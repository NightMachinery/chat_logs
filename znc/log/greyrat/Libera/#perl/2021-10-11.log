[00:07:57] *** Joins: vague (~vague@irssi/staff/vague)
[00:10:04] *** Joins: nx_ (~nitronix@88.198.206.243)
[00:11:16] *** Quits: magla (~gelignite@55d486d7.access.ecotel.net) (Quit: Stay safe!)
[00:12:42] *** Quits: Nitronix (~nitronix@5.29.23.150) (Ping timeout: 260 seconds)
[00:17:54] *** Joins: krismatrix (~krismatri@38.80.149.51)
[00:17:56] *** Joins: N4buc0- (~N4buc0@191.177.181.111)
[00:18:43] *** Quits: krismatrix (~krismatri@38.80.149.51) (Client Quit)
[00:20:31] *** Quits: N4buc0 (~N4buc0@2804:14c:8782:814c:d332:3a8e:5821:2145) (Ping timeout: 245 seconds)
[00:21:22] * GumbyPAN CPAN Upload: Alien-OpenMP-0.003003 by ETJ https://metacpan.org/release/ETJ/Alien-OpenMP-0.003003
[00:45:06] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 245 seconds)
[00:51:34] *** Quits: nx_ (~nitronix@88.198.206.243) (Ping timeout: 252 seconds)
[00:52:02] *** Quits: aspic (~shifty~~~@ppp121-44-118-38.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[00:52:19] *** Joins: aspic (~shifty~~~@ppp121-44-122-213.syd-gls-har-bras39.tpg.internode.on.net)
[00:52:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[00:55:28] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[01:00:08] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:05:19] *** Quits: hudo_ (~hudo@62.68.20.210) (Ping timeout: 252 seconds)
[01:09:05] <greyrat> Why don't I need to dereference an arrayref inside a hash? https://paste.gnugen.ch/paste/3SGS
[01:10:00] *** Quits: bmeneg_ (~bmeneg@2001:1284:f013:56c9:477e:58ae:7d0c:e535) (Remote host closed the connection)
[01:12:05] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[01:14:32] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Read error: Connection reset by peer)
[01:17:15] <rewt> greyrat, hash values can only be scalars, so if used as an array, it's automatically assumed be an arrayref
[01:23:20] *** Quits: aspic (~shifty~~~@ppp121-44-122-213.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[01:24:25] *** Joins: aspic (~shifty~~~@ppp121-44-122-186.syd-gls-har-bras39.tpg.internode.on.net)
[01:32:44] *** Joins: nx_ (~nitronix@5.29.23.150)
[01:36:05] *** Joins: pucara (~i@host223.190-31-184.telecom.net.ar)
[01:37:20] <fizzie> The way it's described at https://perldoc.perl.org/perlref#Arrow-Notation is, "The arrow is optional /between/ brackets subscripts --"
[01:37:21] <Paperbot> Link title(s): [ perlref - Perl references and nested data structures - Perldoc Browser ]
[01:49:18] *** Joins: Linux77 (~Linux7_7@186.233.182.243)
[01:56:28] *** Quits: aspic (~shifty~~~@ppp121-44-122-186.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[01:56:45] *** Joins: aspic (~shifty~~~@ppp121-44-111-160.syd-gls-har-bras38.tpg.internode.on.net)
[01:57:11] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 245 seconds)
[02:00:37] <ether> yup, $foo->{bar} and $foo{bar} are very different
[02:00:55] <ether> but you can $foo->{bar}{baz}{blup} instead of $foo->{bar}->{baz}->{blup}
[02:09:55] *** Joins: pj (~pj@ghettoforge/pj)
[02:11:52] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[02:15:19] <skyl4rk> cool, this is news to me
[02:33:10] *** Quits: pizdets_ (~pizdets@183.182.110.49) (Ping timeout: 260 seconds)
[02:34:01] *** Joins: pizdets (~pizdets@183.182.111.226)
[02:34:45] *** Joins: semeion (~semeion@user/semeion)
[02:38:03] <genio> https://github.com/StrawberryPerl/Perl-Dist-Strawberry/issues/11#issuecomment-939556311
[02:38:03] <Paperbot> Link title(s): [ [feature request] don't pollute PATH with mingw toolchain Â· Issue #11 Â· StrawberryPerl/Perl-Dist-... ]
[02:38:15] <genio> Hmmm. How to reply to such hostility
[02:38:16] <greyrat> Is $a->[b] the same as ${@{$a}}[b]?
[02:38:49] <ether> $a->[b] doesn't make any sense. you can't use non-integer values as array indexes
[02:45:04] <genio> Anyone else want to take a stab at a sane response on that GitHub issue?
[02:47:01] * ether reads..
[02:52:33] <ether> seems that guy shouldn't be letting github CI actions install stuff into his main environment
[03:12:00] <xenu> i mean he's right it's annoying but it isn't simple to fix
[03:12:59] <xenu> i really wish strawberry would stop relying on $PATH
[03:14:18] <xenu> 90% of questions on #win32 are exactly about this issue
[03:15:24] <xenu> ideally 1) path to the toolchain tools should be hardcoded in Config.pm 2) pl2bat should hardcode paths in generated .bat files
[03:16:06] <xenu> the latter will break portable builds but i think some workarounds might be possible
[03:18:21] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! ðŸ‘‹)
[03:19:52] <genio> ether: The thing he's railing against is that for some reason, GitHub installs SP by default on their windows builds
[03:20:02] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Ping timeout: 265 seconds)
[03:22:08] <genio> but since Windows doesn't have a compiler available easily for free, how else are we supposed to build with anything other than MinGW? And since we have portables, how else can we have Perl available other than (ab)?using PATH?
[03:23:22] <genio> fixing his path to get rid of SP is dead simple, but he preferred to go on a tirade in the SP issue rather than take it up with GH to get rid of Perl from the build
[03:24:41] <xenu> i didn't say "remove mingw", just hide it from $PATH
[03:24:49] <xenu> anyway, there a few options
[03:25:34] <xenu> 1) require to run relocation script before starting portable stawberry
[03:26:12] <xenu> 2) patch Config.pm to use env variables, something like %PORTABLE_ENV%
[03:26:14] <xenu> 3) use relative paths
[03:26:45] <xenu> 4) leave the portable as they are now and only make changes in the standalone install
[03:26:56] <xenu> leave the portable builds*
[03:27:38] <xenu> argh, s/%POTABLE_ENV%/%PORTABLE_PATH%/
[03:28:11] <genio> heh. potable
[03:28:29] <xenu> btw, we wouldn't be the first ones to patch Config.pm to do something weird
[03:28:44] <xenu> activeperl's config.pm used to automatically download mingw if it was missing
[03:30:59] <genio> https://docs.microsoft.com/en-us/cpp/build/walkthrough-compile-a-c-program-on-the-command-line?view=msvc-160  FFS that 6th paragraph angers
[03:31:00] <Paperbot> Link title(s): [ Walkthrough: Compile a C program on the command line | Microsoft Docs ]
[03:32:47] <genio> and of course the command line tools require a valid visual studio license
[03:34:02] *** Quits: jelly (jelly@user/jelly) (Ping timeout: 246 seconds)
[03:36:04] *** Joins: YaoNai (~YaoNai@user/yaonai)
[03:36:26] <xenu> well you need a visual studio license if you want to use visual studio, yes
[03:36:33] <xenu> but it's free for personal use
[03:36:57] <xenu> (and commercial usage in companies with *tiny* revenue)
[03:37:14] <xenu> it was $1M usd/year iirc
[03:43:41] <genio> yep. makes it inaccessible for us since XS is necessary
[03:44:12] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:46:08] *** Quits: aspic (~shifty~~~@ppp121-44-111-160.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[03:46:25] *** Joins: aspic (~shifty~~~@ppp121-44-121-73.syd-gls-har-bras39.tpg.internode.on.net)
[03:55:51] *** Joins: whynot (~whynot@37.73.170.231)
[04:17:57] *** Quits: aspic (~shifty~~~@ppp121-44-121-73.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[04:18:48] <genio> ok, I've had enough of Mr. GitHub Angry Person
[04:18:49] *** Joins: aspic (~shifty~~~@ppp121-44-124-150.syd-gls-har-bras39.tpg.internode.on.net)
[04:21:56] <genio> I mean, the GH Windows image has MinGW and several other things that bother Perl, but we don't go and yell at the MinGW maintainers about how GH Actions Windows images are built. We work around it
[04:30:52] <xenu> while that guy is a dick, tbh it's one of those things that from the outside seem extremely simple
[04:31:01] <xenu> so i (kind of) understand his frustration
[04:31:55] <xenu> speaking of strabwerry, have you made it build yet?
[04:34:33] <genio> nope. need to get a new windows machine to test on
[04:40:03] <genio> I'm still in middle finger mode, so I'll just mute that issue for a while
[04:44:29] *** Quits: Su-Shee (~Susanne@p508943e4.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[04:45:50] *** Joins: Su-Shee (~Susanne@p50894a91.dip0.t-ipconnect.de)
[04:46:39] <genio> "I can't remove Perl from the PATH because I need to call Perl scripts"  ffs. full path, man. full path.
[04:49:11] <genio> ok, really muting that now
[04:50:04] *** Quits: aspic (~shifty~~~@ppp121-44-124-150.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[04:50:49] *** Joins: aspic (~shifty~~~@ppp121-44-97-190.syd-gls-har-bras38.tpg.internode.on.net)
[04:51:21] *** Quits: karjala (sid176588@id-176588.lymington.irccloud.com) (Ping timeout: 245 seconds)
[04:51:42] *** Joins: tg (~tg@rockylinux/infra/tg)
[04:52:11] *** Quits: Yaakov (sid19863@user/Yaakov) (Ping timeout: 245 seconds)
[04:52:31] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (Ping timeout: 252 seconds)
[04:52:36] *** Quits: itok (sid418430@id-418430.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[04:52:45] *** Joins: karjala (sid176588@lymington.irccloud.com)
[04:53:04] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Ping timeout: 252 seconds)
[04:54:06] *** Quits: mstevens (sid285816@id-285816.tinside.irccloud.com) (Ping timeout: 260 seconds)
[04:55:52] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[04:55:54] *** Joins: mstevens (sid285816@tinside.irccloud.com)
[04:56:08] *** Quits: aspic (~shifty~~~@ppp121-44-97-190.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[04:56:27] *** Joins: Yaakov (sid19863@user/Yaakov)
[04:56:29] *** Joins: itok (sid418430@ilkley.irccloud.com)
[04:56:42] *** Joins: yuesbeez (uid458354@tinside.irccloud.com)
[04:56:52] *** Joins: aspic (~shifty~~~@ppp121-44-122-227.syd-gls-har-bras39.tpg.internode.on.net)
[05:02:13] <mst> genio: https://github.com/StrawberryPerl/Perl-Dist-Strawberry/issues/11#issuecomment-939604032
[05:02:14] <Paperbot> Link title(s): [ [feature request] don't pollute PATH with mingw toolchain Â· Issue #11 Â· StrawberryPerl/Perl-Dist-... ]
[05:05:47] *** Quits: aspic (~shifty~~~@ppp121-44-122-227.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[05:06:41] *** Quits: Yaakov (sid19863@user/Yaakov) (Read error: Connection reset by peer)
[05:06:45] *** Quits: skaji (sid178483@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:06:52] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (Read error: Connection reset by peer)
[05:06:56] *** Quits: mruszczyk (sid160336@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:06:58] *** Quits: mstevens (sid285816@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:22] *** Quits: toddr (sid457681@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:26] *** Quits: yuesbeez (uid458354@tinside.irccloud.com) (Read error: Connection reset by peer)
[05:07:32] *** Joins: aspic (~shifty~~~@ppp121-44-120-39.syd-gls-har-bras39.tpg.internode.on.net)
[05:07:34] *** Quits: sa (sid1055@tinside.irccloud.com) (Write error: Connection reset by peer)
[05:08:26] *** Quits: Su-Shee (~Susanne@p50894a91.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:10:16] *** Joins: Su-Shee (~Susanne@p508948d5.dip0.t-ipconnect.de)
[05:12:40] *** Joins: jelly (jelly@user/jelly)
[05:14:43] *** Joins: toddr (sid457681@tinside.irccloud.com)
[05:15:01] *** Joins: Yaakov (sid19863@user/Yaakov)
[05:15:08] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[05:15:09] *** Joins: skaji (sid178483@id-178483.tinside.irccloud.com)
[05:15:18] *** Joins: mruszczyk (sid160336@id-160336.tinside.irccloud.com)
[05:15:54] *** Joins: yuesbeez (uid458354@tinside.irccloud.com)
[05:16:12] *** Joins: sa (sid1055@tinside.irccloud.com)
[05:19:16] *** Quits: Figworm (FiggyWitIt@user/figworm) (Remote host closed the connection)
[05:20:24] *** Joins: Figworm (FiggyWitIt@user/figworm)
[05:21:16] *** Joins: mstevens (sid285816@id-285816.tinside.irccloud.com)
[05:21:32] *** Quits: aspic (~shifty~~~@ppp121-44-120-39.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[05:23:19] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[05:25:28] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 252 seconds)
[05:31:01] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 252 seconds)
[05:32:28] *** Joins: hudo_ (~hudo@62.68.20.210)
[05:32:38] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:32:46] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[05:42:01] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[05:50:47] <aquanight> dammit
[05:50:51] <aquanight> perlbot: use Devel::Refcount;
[05:51:01] <aquanight> perlbot: sweval use Devel::Refcount;
[05:51:03] <perlbot> aquanight: ERROR: Can't locate Devel/Refcount.pm in @INC (you may need to install the Devel::Refcount module) (@INC contains: $BLEAD/lib/site_perl/5.35.3/x86_64-linux $BLEAD/lib/site_perl/5.35.3 $BLEAD/lib/5.35.3/x86_64-linux $BLEAD/lib/5.35.3) at (IRC) line 1. BEGIN failed--compilation aborted at (IRC) line 1. 
[05:52:28] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[05:53:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 265 seconds)
[05:54:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:56:05] *** Joins: akaWolf (~akaWolf@akawolf.org)
[05:57:25] <aquanight> perlbot: sweval my $x = bless [], "foo"; bless $x, undef; ref($x)
[05:57:27] <perlbot> aquanight: Use of uninitialized value in bless at (IRC) line 1. Explicit blessing to '' (assuming package main) at (IRC) line 1. main
[05:57:35] <aquanight> huh
[05:57:42] <aquanight> could've sworn there was a way to debless an object
[06:05:04] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:07:14] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[06:10:11] *** Quits: whynot (~whynot@37.73.170.231) (Quit: leaving)
[06:14:39] <aquanight> in liee of trying to unbless a package
[06:15:00] <aquanight> I'll settle for: bless $ref, (join "", map { chr int(rand * 32) } (1..16)) # reblessing it to a package name containing only CC0 characters
[06:17:13] <zgu> isn't that called damning?
[06:19:44] <xenu> https://metacpan.org/pod/Acme::Damn
[06:19:45] <Paperbot> Link title(s): [ Acme::Damn - 'Unbless' Perl objects. - metacpan.org ]
[06:21:52] <aquanight> yeah I found that
[06:22:01] <aquanight> hmmm
[06:22:11] <aquanight> LeoNerd: can I not declare an exported sub within an O:P class?
[06:22:21] <aquanight> e.g. class Stuff { ...; our @EXPORT = '
[06:22:38] <aquanight> e.g. class Stuff { ...; sub thing { ... } our @EXPORT = 'thing'; use Exporter 'import'; }
[06:23:34] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 265 seconds)
[06:25:21] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:25:26] <aquanight> what the hell
[06:25:34] *** Quits: michelle_ (~michelle@203.206.128.220) (Read error: Connection reset by peer)
[06:25:49] <aquanight> perlbot: sweval class Foo { method test { } } [ defined &Foo::test ]
[06:25:51] <perlbot> aquanight: ERROR: syntax error at (IRC) line 1, near "} [" 
[06:25:57] <aquanight> perlbot: sweval use Object::Pad; class Foo { method test { } } [ defined &Foo::test ]
[06:25:59] <perlbot> aquanight: [1]
[06:26:56] <aquanight> perlbot: sweval class Foo { sub test { } } [ defined &Foo::test ]
[06:26:57] <perlbot> aquanight: ERROR: syntax error at (IRC) line 1, near "{ sub test " 
[06:27:04] <aquanight> perlbot: sweval use Object::Pad; class Foo { sub test { } } [ defined &Foo::test ]
[06:27:05] <perlbot> aquanight: [1]
[06:27:12] <aquanight> wtf am I doing wrong
[06:27:34] <aquanight> perlbot: sweval use Object::Pad; class Foo { sub TIESCALAR { (shift)->new(@_); } } tie my $x, "Foo";
[06:27:36] <perlbot> aquanight: bless( [], 'Foo' )
[06:28:48] <aquanight> oh I can't fucking spell that's what
[06:33:00] <aquanight> perl why
[06:33:03] <aquanight> perl fucking why
[06:33:07] <aquanight> perlbot: sweval rand() * 32
[06:33:09] <perlbot> aquanight: 1.96123393115715
[06:33:11] <aquanight> perlbot: sweval rand * 32
[06:33:13] <perlbot> aquanight: Argument "*main::32" isn't numeric in rand at (IRC) line 1. 0.396675370241613
[06:33:16] <aquanight> just why
[06:34:40] <aquanight> LeoNerd: also explain this
[06:34:40] <xenu> eval: prototype(\&CORE::rand)
[06:34:42] <perlbot> xenu: ;$
[06:35:49] *** Quits: yuesbeez (uid458354@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:35:50] <aquanight> perlbot: sweval use Object::Pad; use B (); class Foo { has $x :param; sub bar { B::svref_2object($x)->REFCNT; } } my $o = Foo->new(x => []); [ $o->bar ] # 1
[06:35:52] <perlbot> aquanight: ERROR: Global symbol "$x" requires explicit package name (did you forget to declare "my $x"?) at (IRC) line 1. 
[06:36:02] <aquanight> perlbot: sweval use Object::Pad; use B (); class Foo { has $x :param; method bar { B::svref_2object($x)->REFCNT; } } my $o = Foo->new(x => []); [ $o->bar ] # 1
[06:36:03] <perlbot> aquanight: [1]
[06:36:08] <aquanight> ...
[06:36:13] <aquanight> then why am I getting 2 in ->DESTROY
[06:36:26] <aquanight> oh bloody biscuits
[06:36:32] <aquanight> because I'm passing it to another sub
[06:38:12] <aquanight> bloody hell now I'm getting 3!
[06:40:08] <aquanight> LeoNerd: https://l.perl.bot/p/txlx7i
[06:40:09] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[06:40:18] <aquanight> LeoNerd: I don't know why the refcount is wrong
[06:41:37] <aquanight> also if anyone fights me over :prototype($) my main weapons are "operator precedence" and "variable declarator-alike"
[06:43:10] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[06:45:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[06:47:12] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:51:24] *** Joins: ominionx (~ominionx@2.sub-174-250-14.myvzw.com)
[06:51:36] *** Quits: ominionx (~ominionx@2.sub-174-250-14.myvzw.com) (Remote host closed the connection)
[06:52:05] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 250 seconds)
[06:58:22] *** Joins: Martchus (~martchus@dynamic-095-117-055-132.95.117.pool.telefonica.de)
[06:59:01] *** Quits: Martchus_ (~martchus@2a01:c22:738b:9e00:d250:99ff:fe49:3cce) (Ping timeout: 252 seconds)
[06:59:01] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 252 seconds)
[07:02:52] *** Manderson_ is now known as Manderson
[07:23:59] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[08:07:34] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[08:09:01] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:11:30] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:11e3:257b:356e:c925) (Ping timeout: 268 seconds)
[08:12:34] *** Joins: Michelle (~michelle@203.206.128.220)
[08:15:16] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Remote host closed the connection)
[08:15:58] *** Quits: N4buc0- (~N4buc0@191.177.181.111) (Ping timeout: 252 seconds)
[08:20:06] *** Quits: hudo_ (~hudo@62.68.20.210) (Ping timeout: 245 seconds)
[08:27:15] * GumbyPAN CPAN Upload: Module-Generic-v0.16.0 by JDEGUEST https://metacpan.org/release/JDEGUEST/Module-Generic-v0.16.0
[08:31:44] *** Joins: mattil (~mattil@83.145.199.6)
[08:34:44] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[08:37:30] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[08:38:25] *** Quits: mattil (~mattil@83.145.199.6) (Ping timeout: 265 seconds)
[09:00:41] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:05:56] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[09:07:39] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[09:08:33] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:09:04] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[09:13:10] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 252 seconds)
[09:28:33] *** Joins: mattil (~mattil@airio.portalify.com)
[09:40:05] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[09:41:59] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:45:46] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[09:47:32] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) ()
[09:48:13] *** Joins: R2robot (~R2robot@user/r2robot)
[09:55:53] *** Quits: rundown (~eb0t@90.202.46.160) (Ping timeout: 265 seconds)
[09:57:45] *** Joins: rundown (~eb0t@90.208.41.2)
[10:02:32] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[10:03:58] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 265 seconds)
[10:09:34] *** Quits: Su-Shee (~Susanne@p508948d5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:11:21] *** Joins: Su-Shee (~Susanne@p50894019.dip0.t-ipconnect.de)
[10:11:26] * GumbyPAN CPAN Upload: Chemistry-OpenSMILES-0.5.2 by MERKYS https://metacpan.org/release/MERKYS/Chemistry-OpenSMILES-0.5.2
[10:25:43] *** Quits: randir (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[10:26:09] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:30:16] *** Quits: nowaker_ (~quassel@188.116.38.80) (Quit: No Ping reply in 180 seconds.)
[10:30:23] *** Joins: Nowaker (~quassel@188.116.38.80)
[10:38:06] *** Joins: randir (~randir@93.159.239.42)
[10:47:06] *** Joins: emanuele6 (~emanuele6@net-2-36-104-122.cust.vodafonedsl.it)
[10:48:55] *** Quits: eseyman (~manu@lfbn-idf1-1-1108-68.w82-125.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[10:49:07] *** Quits: jetchisel (jetchisel@user/jetchisel) (*.net *.split)
[10:49:07] *** Quits: itok (sid418430@ilkley.irccloud.com) (*.net *.split)
[10:49:07] *** Quits: karjala (sid176588@lymington.irccloud.com) (*.net *.split)
[10:49:07] *** Quits: vague (~vague@irssi/staff/vague) (*.net *.split)
[10:49:07] *** Quits: tomaw (tom@libera/staff/tomaw) (*.net *.split)
[10:49:07] *** Quits: humky (~humky@user/humky) (*.net *.split)
[10:49:07] *** Quits: odc (sid197788@helmsley.irccloud.com) (*.net *.split)
[10:49:08] *** Quits: jadesoturi (~jadesotur@user/jadesoturi) (*.net *.split)
[10:49:08] *** Quits: ztx (~ztx@user/ztx) (*.net *.split)
[10:49:08] *** Quits: B33F_1338 (~b33f1337@host.b33f1337.com) (*.net *.split)
[10:49:08] *** Quits: boubou_ (~boubou@hide.my.ip.upsidehosting.com) (*.net *.split)
[10:49:08] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (*.net *.split)
[10:49:08] *** Quits: phenom_ (~primus@user/phenom) (*.net *.split)
[10:49:08] *** Quits: woei (~woei@cust-245-64-110-94.dyn.as47377.net) (*.net *.split)
[10:49:08] *** Quits: rfi (~rfi@216.70.102.172) (*.net *.split)
[10:49:08] *** Quits: leont (sid489095@uxbridge.irccloud.com) (*.net *.split)
[10:49:08] *** Quits: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (*.net *.split)
[10:49:08] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[10:49:08] *** Quits: scp1 (~scp1@user/japh) (*.net *.split)
[10:49:08] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[10:49:08] *** Quits: bs338 (~pi@host217-44-189-120.range217-44.btcentralplus.com) (*.net *.split)
[10:49:08] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (*.net *.split)
[10:49:08] *** Quits: Kassandry (~Kassandry@kassandry.net) (*.net *.split)
[10:49:08] *** Quits: webstrand (~webstrand@user/webstrand) (*.net *.split)
[10:49:08] *** Quits: alh (~alh@hiddenrealms.org) (*.net *.split)
[10:49:08] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[10:49:08] *** Quits: dotandimet (~dotandime@evomr2.evogene.com) (*.net *.split)
[10:49:08] *** Quits: jercos (jercos@xyl.be) (*.net *.split)
[10:49:08] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[10:49:08] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[10:49:08] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (*.net *.split)
[10:49:08] *** Quits: Kobaz (~libera@its.kobaz.net) (*.net *.split)
[10:49:08] *** Quits: dilfridge (~quassel@gentoo/developer/dilfridge) (*.net *.split)
[10:49:08] *** Quits: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder) (*.net *.split)
[10:49:08] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[10:49:08] *** Quits: Skarn (~skarn@user/skarn) (*.net *.split)
[10:49:18] *** Quits: emanuele6 (~emanuele6@net-2-36-104-122.cust.vodafonedsl.it) (Changing host)
[10:49:18] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[10:55:08] *** Joins: fstd (~fstd@xdsl-78-35-82-134.nc.de)
[10:55:12] *** Quits: fstd_ (~fstd@xdsl-87-79-83-167.nc.de) (Ping timeout: 265 seconds)
[10:56:31] * GumbyPAN CPAN Upload: Catmandu-DBI-0.10 by NICS https://metacpan.org/release/NICS/Catmandu-DBI-0.10
[11:00:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:00:52] *** Joins: itok (sid418430@ilkley.irccloud.com)
[11:00:52] *** Joins: karjala (sid176588@lymington.irccloud.com)
[11:00:52] *** Joins: vague (~vague@irssi/staff/vague)
[11:00:52] *** Joins: tomaw (tom@libera/staff/tomaw)
[11:00:52] *** Joins: humky (~humky@user/humky)
[11:00:52] *** Joins: odc (sid197788@helmsley.irccloud.com)
[11:00:52] *** Joins: jadesoturi (~jadesotur@user/jadesoturi)
[11:00:52] *** Joins: ztx (~ztx@user/ztx)
[11:00:52] *** Joins: B33F_1338 (~b33f1337@host.b33f1337.com)
[11:00:52] *** Joins: boubou_ (~boubou@hide.my.ip.upsidehosting.com)
[11:00:52] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[11:00:52] *** Joins: phenom_ (~primus@user/phenom)
[11:00:52] *** Joins: woei (~woei@cust-245-64-110-94.dyn.as47377.net)
[11:00:52] *** Joins: rfi (~rfi@216.70.102.172)
[11:00:52] *** Joins: leont (sid489095@uxbridge.irccloud.com)
[11:00:52] *** Joins: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[11:00:52] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[11:00:52] *** Joins: scp1 (~scp1@user/japh)
[11:00:52] *** Joins: AndrewYu (~andrew@user/andrewyu)
[11:00:52] *** Joins: bs338 (~pi@host217-44-189-120.range217-44.btcentralplus.com)
[11:00:52] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[11:00:52] *** Joins: Kassandry (~Kassandry@kassandry.net)
[11:00:52] *** Joins: webstrand (~webstrand@user/webstrand)
[11:00:52] *** Joins: alh (~alh@hiddenrealms.org)
[11:00:52] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[11:00:52] *** Joins: dotandimet (~dotandime@evomr2.evogene.com)
[11:00:52] *** Joins: jercos (jercos@xyl.be)
[11:00:52] *** Joins: salparadise (~salparadi@129.146.17.140)
[11:00:52] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[11:00:52] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[11:00:52] *** Joins: Kobaz (~libera@its.kobaz.net)
[11:00:52] *** Joins: dilfridge (~quassel@gentoo/developer/dilfridge)
[11:00:52] *** Joins: mst (~matthewt@perl/shadowcat-mst/chainsaw-wielder)
[11:00:52] *** Joins: Skarn (~skarn@user/skarn)
[11:00:52] *** Joins: Artea (~Lufia@artea.com.pt)
[11:00:52] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Excess Flood)
[11:00:54] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (Excess Flood)
[11:00:58] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Excess Flood)
[11:01:05] *** Joins: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net)
[11:01:05] *** Quits: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net) (Changing host)
[11:01:05] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[11:01:06] *** Joins: Repaster (~Repaster@ool-2f148218.dyn.optonline.net)
[11:01:06] *** Quits: Repaster (~Repaster@ool-2f148218.dyn.optonline.net) (Changing host)
[11:01:06] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[11:01:32] * GumbyPAN CPAN Upload: Catmandu-DBI-0.10.1 by NICS https://metacpan.org/release/NICS/Catmandu-DBI-0.10.1
[11:01:32] * GumbyPAN CPAN Upload: Net-SSL-ExpireDate-1.22 by HIROSE https://metacpan.org/release/HIROSE/Net-SSL-ExpireDate-1.22
[11:01:43] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[11:01:51] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Max SendQ exceeded)
[11:01:51] *** Quits: humky (~humky@user/humky) (Max SendQ exceeded)
[11:01:51] *** Quits: AndrewYu (~andrew@user/andrewyu) (Max SendQ exceeded)
[11:01:51] *** Quits: itok (sid418430@ilkley.irccloud.com) (Max SendQ exceeded)
[11:02:01] *** Quits: webstrand (~webstrand@user/webstrand) (Max SendQ exceeded)
[11:02:18] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[11:02:20] *** Joins: humky (~humky@user/humky)
[11:03:06] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[11:03:34] *** Joins: webstrand (~webstrand@user/webstrand)
[11:06:30] *** Joins: AndrewYu (~andrew@user/andrewyu)
[11:21:34] * GumbyPAN CPAN Upload: Web-Solid-Auth-0.5 by HOCHSTEN https://metacpan.org/release/HOCHSTEN/Web-Solid-Auth-0.5
[11:32:06] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[11:33:51] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 245 seconds)
[11:40:37] *** Quits: pucara (~i@host223.190-31-184.telecom.net.ar) (Quit: Lost terminal)
[11:40:53] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[11:42:13] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:43:05] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[11:43:37] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:45:23] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[11:46:09] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:46:37] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[11:47:23] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[11:48:07] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:52:39] *** Joins: nx_ (~nitronix@5.29.23.150)
[11:56:02] *** Joins: choroba (~E.Choroba@88.146.255.106)
[11:56:10] *** Joins: nxs__ (~nitronix@88.198.206.243)
[11:56:43] *** Joins: semeion (~semeion@user/semeion)
[11:56:53] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[11:57:43] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:58:21] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[11:58:43] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 252 seconds)
[11:58:55] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:07:09] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:07:30] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:10:07] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[12:12:53] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:13:19] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:15:26] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:19:48] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:24:23] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:24:49] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:26:54] *** Quits: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (Remote host closed the connection)
[12:27:33] *** Joins: castawayc (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[12:28:09] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:28:29] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:30:08] *** Quits: AlexLaurie[m] (~alauriema@2001:470:69fc:105::f3ba) (Quit: You have been kicked for being idle)
[12:31:52] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:32:17] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:34:23] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:34:49] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:37:52] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:38:31] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:45:23] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:45:48] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:46:30] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:46:55] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:47:23] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:48:02] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:51:52] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:52:10] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[12:52:24] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:52:50] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:53:15] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[12:57:54] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[12:58:21] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[13:00:52] *** Joins: akaWolf (~akaWolf@akawolf.org)
[13:03:53] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[13:04:19] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[13:04:19] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 250 seconds)
[13:09:39] *** Joins: emanuele6 (~emanuele6@net-2-36-104-122.cust.vodafonedsl.it)
[13:09:39] *** Quits: emanuele6 (~emanuele6@net-2-36-104-122.cust.vodafonedsl.it) (Changing host)
[13:09:39] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[13:11:34] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[13:11:46] * GumbyPAN CPAN Upload: App-Licensecheck-v3.2.13 by JONASS https://metacpan.org/release/JONASS/App-Licensecheck-v3.2.13
[13:12:09] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[13:14:23] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[13:14:48] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[13:33:53] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:34:37] *** Joins: csrf (~csrf@user/csrf)
[13:35:48] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:41:18] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[13:42:06] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[13:42:29] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[13:44:11] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:46:40] *** Joins: omegatron (~some@p5b056a70.dip0.t-ipconnect.de)
[13:50:09] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[13:56:12] <LeoNerd> aquanight: https://metacpan.org/pod/Variable::Disposition#dispose  also of interest
[13:56:13] <Paperbot> Link title(s): [ Variable::Disposition - helper functions for disposing of variables - metacpan.org ]
[13:57:54] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:00:56] <aquanight> LeoNerd: interesting. But I still don't know why my refcount was wrong in the attempt I made yesterday.
[14:11:09] <LeoNerd> stack?
[14:15:02] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:15:30] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[14:17:59] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Client Quit)
[14:18:17] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[14:23:47] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:24:04] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[14:28:37] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[14:33:04] <tm604> we have refcounted stack now? nice
[14:36:30] <rindolf> tm604: hi, ltns
[14:42:04] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[14:46:48] <LeoNerd> simcop2387: I think my weather station got upset last night. I fixed the IÂ²C bus lockup problem, but the atmosphere sensor reported -239 Â°C temperature and -230665 hPa of air pressure
[14:48:06] *** Joins: roflbot (~hoydand@195.181.139.135)
[14:53:38] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[15:00:46] *** Quits: woei (~woei@cust-245-64-110-94.dyn.as47377.net) (Ping timeout: 252 seconds)
[15:11:59] * GumbyPAN CPAN Upload: Graphics-TIFF-17 by RATCLIFFE https://metacpan.org/release/RATCLIFFE/Graphics-TIFF-17
[15:15:00] <aquanight> LeoNerd: -239 jeebus
[15:15:46] <aquanight> between those two measurements, I'm not sure which is the more extreme
[15:16:53] <aquanight> the 34 kelvin temp or the -23 MPa
[15:16:59] * GumbyPAN CPAN Upload: Net-DNS-SEC-1.19 by NLNETLABS https://metacpan.org/release/NLNETLABS/Net-DNS-SEC-1.19
[15:17:45] <huf> brexit hitting very hard eh
[15:21:33] <aquanight> LeoNerd: does B::svref_2object increment REFCNT
[15:22:06] <aquanight> nope it's not that
[15:23:58] <aquanight> perlbot: sweval use B (); my $x = []; B::svref_2object($x); ref($x)
[15:24:00] <perlbot> aquanight: ARRAY
[15:24:11] <aquanight> perlbot: sweval use B (); my $x = []; sprintf "%s", B::svref_2object($x);
[15:24:12] <perlbot> aquanight: B::AV=SCALAR(0x5557e9f9d800)
[15:28:08] <aquanight> perlbot: sweval use B (); my $x = []; sprintf "%d", B::svref_2object($x)->REFCNT;
[15:28:10] <perlbot> aquanight: 1
[15:28:17] <aquanight> perlbot: sweval use B (); my $x = []; my $y = $x;  sprintf "%d", B::svref_2object($x)->REFCNT;
[15:28:18] <perlbot> aquanight: 2
[15:28:38] <aquanight> perlbot: sweval use B (); my $y; { my $x = []; $y = $x; } sprintf "%d", B::svref_2object($y)->REFCNT;
[15:28:39] <perlbot> aquanight: 1
[15:29:58] <aquanight> if it is stack
[15:30:06] <aquanight> I have no idea where it would be or how to even find out
[15:31:49] <aquanight> because my refcnt is 2 as soon I create the damn thing
[15:32:24] <aquanight> perlbot: sweval use Tie::Scalar; my $x; tie $x, "Tie::StdScalar"; $x = []; sprintf "%d", B::svref_2object($x)->REFCNT;
[15:32:26] <perlbot> aquanight: ERROR: Undefined subroutine &B::svref_2object called at (IRC) line 1. 
[15:32:33] <aquanight> perlbot: sweval use B (); use Tie::Scalar; my $x; tie $x, "Tie::StdScalar"; $x = []; sprintf "%d", B::svref_2object($x)->REFCNT;
[15:32:35] <perlbot> aquanight: 2
[15:32:41] <aquanight> like that
[15:32:56] <aquanight> also it's strange that B::svref_2object isn't triggering FETCH
[15:34:16] <aquanight> well isn't this interesting
[15:34:27] <aquanight> https://metacpan.org/release/XSAWYERX/perl-5.34.0/source/ext/B/B.xs#L723
[15:34:27] <Paperbot> Link title(s): [ ext/B/B.xs - metacpan.org ]
[15:34:58] <aquanight> so it's not triggering FETCH logic on the tied scalar
[15:35:05] <aquanight> it's just... grabbing SvRV directly?
[15:35:55] <aquanight> that can't be right
[15:39:39] <aquanight> perlbot: sweval use Tie::Scalar; my $x; tie $x, "Tie::StdScalar"; $x = 42; untie $x; [ $x ]
[15:39:41] <perlbot> aquanight: [42]
[15:39:49] <aquanight> ...what.
[15:40:01] <aquanight> frickin. what?
[15:40:30] <aquanight> are you telling me that if the scalar is tied, the thing is still *stored in the scalar* on top of all the FETCH/STORE nonsense?
[15:41:46] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[15:41:47] <LeoNerd> ties are weeeeeeird
[15:45:37] <aquanight> yeah they are
[15:46:06] <aquanight> and here I was wondering why a tie couldn't use the tied variable as storage given that its access is replaced with something else and then *this* happens.
[15:46:48] <LeoNerd> That's what the object is for
[15:46:56] <aquanight> yes
[15:47:02] <aquanight> but wtf is the tied variable doing in the meantime
[15:47:12] <LeoNerd> the tied variable itself is the interface to it
[15:47:34] <aquanight> ok but what is the *content* of said tied variable doing in the meantime
[15:47:38] <LeoNerd> nothing
[15:47:42] <aquanight> besides, apparently, making my life miserable
[15:47:50] <LeoNerd> Dont' forget, tied scalars are really just a sortof pureperl wrapping of magic on scalars
[15:48:02] <LeoNerd> magic == event hooks that run at various times in the interpreter
[15:48:12] <aquanight> right
[15:48:14] <LeoNerd> They are all void-returning events
[15:48:24] <aquanight> but I understood said magic to be a *replacement* for acting on the scalar
[15:48:29] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:48:31] <LeoNerd> E.g. the "fetch" magic is just run to say "Hey, magic, someone is about to read the SV"
[15:48:31] <aquanight> but instead they're just "in addition to"
[15:48:44] <aquanight> except FETCH does return a value
[15:48:46] <LeoNerd> So e.g. fetch magic on the $! will populate the PV part of it with an error string
[15:49:14] <LeoNerd> fetch /magic/ at the C level does not return its value. It sets the "value" it wants to be visible as a side-effect on the magicalised SV
[15:49:42] <aquanight> so the tie FETCH is done by calling FETCH and putting its value into the scalar
[15:49:42] <LeoNerd> Hmm. trying to think if I have any fetch magic on CPAN I can show
[15:49:48] <LeoNerd> Yes
[15:50:13] <aquanight> with the ultimate upshot of this that the tied variable references an object twice
[15:50:20] <LeoNerd> https://metacpan.org/release/PEVANS/Sentinel-0.06/source/lib/Sentinel.xs#L54
[15:50:21] <Paperbot> Link title(s): [ lib/Sentinel.xs - metacpan.org ]
[15:50:26] <aquanight> once in the scalar itself as a result of FETCH magic, and again as part of the object
[15:50:30] <LeoNerd> ^-- for example, here is how Sentinel does the 'get' operation
[15:51:23] <aquanight> hmmm. I could conceivably fix this by having FETCH return the stored ref while also converting the stored ref to a weakref
[15:51:27] <LeoNerd> The object implementation of a tied variable ought not be referring to the tied SV itself
[15:51:39] <LeoNerd> As I said that is just the interface onto it
[15:51:42] <aquanight> no
[15:51:44] <aquanight> I mean $x = []
[15:51:48] <aquanight> the [] is reffed twice
[15:51:54] <aquanight> once in $x itself and again in the tie object
[15:51:54] <LeoNerd> Oh.. -that- may well be yes
[15:52:09] <LeoNerd> refs are one-layer-removed
[15:52:18] <aquanight> I could either just expect a refcount of 2
[15:52:21] <haarg> what are you actually trying to accomplish?
[15:52:30] <aquanight> or I could weaken the object's stored ref during FETCH
[15:52:39] <LeoNerd> haarg: He's trying to recreate assert_oneref and I'm still not sure why
[15:52:41] <aquanight> and hope the order of operations mworks out
[15:52:52] <aquanight> LeoNerd: at this point? because I can.
[15:53:33] <aquanight> (assert_oneref has the disadvantage of putting a check at end of scope, rather than at declaration site)
[15:53:42] <LeoNerd> I already told you about that
[15:53:48] <LeoNerd> defer { assert_oneref $x }
[15:53:52] <LeoNerd> Or wrap that in some other way
[15:53:54] <aquanight> well there's that
[15:53:54] <LeoNerd> Or totally recreate it
[15:54:02] <LeoNerd> Point being:at the end of the scope,k assert that SvREFCNT(sv) == 1
[15:54:06] <LeoNerd> That's all you need to do
[15:54:07] <aquanight> but like I said this really is at this point just "because I can"
[15:54:25] <LeoNerd> Then stop wasting everyone's time because there's other things that are more important and useful
[15:55:01] <aquanight> and hey, now I know that thing with tied scalars. Literally until now I never knew what was actually going on with $x after tie $x
[15:55:19] <aquanight> is it the same with arrays and hashes then?
[15:55:28] <LeoNerd> No they're much crazier
[15:55:31] <LeoNerd> Go read about "uvar magic"
[15:55:34] <LeoNerd> and then cry
[15:55:49] <ehuelsmann[m]> Lol
[15:57:22] *** Joins: jabberwok (~wlindley@75.105.20.104)
[15:58:01] <aquanight> "This magic is invoked when the variable is reset, such as when an array is emptied. Please note that this is different from undefining the variable" ... huh.
[15:58:14] <LeoNerd> Oh, yeah.. clear is not "assign undef"
[15:58:17] <aquanight> well, I guess @thing = () would do that
[15:58:30] <aquanight> clear then push a bunch
[15:58:39] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[15:58:41] <LeoNerd> Oh that's for scalars
[15:59:09] <aquanight> uvar magic took me to Variable::Magic's perldoc which I got that from
[15:59:26] <LeoNerd> grep perl core source for it
[15:59:27] *** Joins: tg (~tg@rockylinux/infra/tg)
[15:59:30] <aquanight> ah
[15:59:40] <LeoNerd> metacpan can't see into the core source, so its search wont' find things
[16:00:15] <aquanight> well that was google but okay
[16:01:13] <aquanight> ah, perhaps PERL_MAGIC_uvar is what I need to search for?
[16:01:29] <LeoNerd> That's the badger
[16:02:37] <aquanight> for (mg = SvMAGIC(sv); mg; mg = mg->mg_moremagic) {
[16:02:49] <aquanight> "more magic" makes me think of that old hacker story with the magic/more magic switch
[16:03:21] <LeoNerd> Mmm :) A more traditional name for that field would be  mg_next  so I suspect it was deliberately named because of that
[16:04:15] <aquanight> hmm. Perl_mg_copy suggests that the copy magic *does* have a return value
[16:04:29] <LeoNerd> Oh, yeah some of the hooks do have a meaningful return value
[16:04:29] <aquanight> I'm guessing there's some purpose behind it
[16:04:46] <LeoNerd> It's more simply that get magic doesn't just return an SV, for example
[16:05:08] *** Quits: quernd (~quernd@boethin.uberspace.de) (Ping timeout: 246 seconds)
[16:05:22] <aquanight> right
[16:05:29] <aquanight> why do that when you have a ready-to-go SV right there
[16:05:35] <aquanight> just stuff it in that one
[16:05:43] <LeoNerd> ?
[16:05:57] <aquanight> wait that would only be for get *on* an SV
[16:06:13] <aquanight> but get is supposedly not used for arrays/hashes so when else would it happen
[16:07:57] *** Joins: quernd4 (~quernd@boethin.uberspace.de)
[16:08:19] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:09:13] <aquanight> okay as far as perl src goes, everything relating to uvar I'm finding so far deals with hashes...
[16:10:04] <LeoNerd> I forget if that's also used on arrays, or if there's a different kind
[16:10:40] <LeoNerd> Perhaps take a look for how @+ works
[16:10:47] *** Quits: BlueShark (sid10311@user/blueshark) (Quit: Connection closed for inactivity)
[16:13:03] <aquanight> sv_magic(MUTABLE_SV(av), (SV*)n, PERL_MAGIC_regdata, NULL, 0); // well that was easy
[16:13:20] <LeoNerd> Yah, so go find PERL_MAGIC_regdata
[16:13:50] <aquanight> ....
[16:14:07] <aquanight> what even is this mess
[16:14:08] <aquanight> #define PERL_MAGIC_regdata        'D' /* Regex match position data
[16:14:14] <aquanight> seriously?!
[16:20:37] <aquanight> welp this is a rabbit hole for sure
[16:24:12] <Botje> well, it _is_ marked as magic.
[16:24:37] *** Quits: roflbot (~hoydand@195.181.139.135) (Remote host closed the connection)
[16:25:37] <jabberwok> (( toggle switch with only one wire, marked "Magic" and "More Magic." In the More Magic position. Switch to "Magic" and the mainframe crashes. ))
[16:25:42] *** Quits: Su-Shee (~Susanne@p50894019.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:26:09] <aquanight> LeoNerd: ok I think I have it figured out. sv_magic is weird, what the heck is up with the letter coded vtables?
[16:26:51] <aquanight> but there's actually two magic vtables involved: regdata for @+ itself, and then regdatum for $+[n]
[16:27:09] *** Joins: roflbot (~hoydand@195.181.139.135)
[16:27:29] *** Joins: Su-Shee (~Susanne@p4ffc7a48.dip0.t-ipconnect.de)
[16:28:17] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[16:28:23] <aquanight> regdata doesn't have a 'copy' hook, so the default hook ends up applying a regdatum hook to the nsv (the result of the copy I think?)
[16:28:42] <aquanight> and regdatum does the rest
[16:28:55] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[16:29:44] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:32:07] <aquanight> hmm. ultimately though
[16:32:27] <aquanight> perlbot: sweval use Tie::Array; my @x; tie @x, "Tie::StdArray"; push @x, 1..20; untie @x; \@x;
[16:32:29] <perlbot> aquanight: []
[16:32:34] <aquanight> empty?
[16:32:49] <aquanight> so..... *only* scalars.
[16:34:30] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 265 seconds)
[16:39:55] *** Joins: mattil (~mattil@airio.portalify.com)
[16:40:01] <haarg> aquanight: https://perlbot.pl/p/6dp8vn
[16:40:01] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[16:41:20] *** Joins: Nitronix (~nitronix@88.198.206.243)
[16:42:16] *** Quits: nxs__ (~nitronix@88.198.206.243) (Read error: Connection reset by peer)
[16:42:17] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[16:43:24] <simcop2387> upgrading blead again this morning
[16:45:55] *** Joins: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi)
[16:47:24] *** Quits: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi) (Remote host closed the connection)
[16:47:56] *** Joins: mattil (~mattil@airio.portalify.com)
[16:50:19] <vague> Can I do client cert auth with mojo::useragent? Customer wants me to use certificate instead of http basic auth but I can't find anything about how that would be done
[16:51:47] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[16:54:10] *** Joins: noctuks (dzDZscEp9m@user/noctux)
[16:54:48] *** Joins: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi)
[16:55:46] <rindolf> vague: do you know if libcurl can do that?
[16:56:43] <vague> Looks like it, CURLOPT_SSLCERT - SSL client certificate.
[16:57:42] *** Quits: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi) (Remote host closed the connection)
[16:58:14] <rindolf> vague: ah
[16:58:14] *** Joins: mattil (~mattil@airio.portalify.com)
[16:58:27] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[16:59:18] *** Joins: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi)
[16:59:49] *** Quits: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[17:04:23] *** Joins: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi)
[17:07:59] *** Quits: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:09:09] *** Joins: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi)
[17:10:16] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[17:16:24] *** Joins: gast0n (~g4570n@user/gast0n)
[17:19:46] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:21:06] *** Joins: bmeneg (~bmeneg@2001:1284:f013:56c9:477e:58ae:7d0c:e535)
[17:24:13] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:25:17] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:25:41] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:26:01] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:26:28] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:26:49] *** Quits: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:28:58] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[17:29:15] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[17:29:27] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:29:51] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[17:31:32] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 265 seconds)
[17:32:45] *** Joins: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi)
[17:33:18] *** Joins: mattil_ (~mattil@airio.portalify.com)
[17:33:57] *** Quits: Bluewind (~Bluewind@user/bluewind) (Quit: WeeChat 3.2)
[17:34:56] <karjala> Is there a reason why this syntax is not valid? $object->"method_$name"($var);
[17:36:35] *** Joins: magla (~gelignite@55d44679.access.ecotel.net)
[17:37:06] *** Quits: mattil (~mattil@d5w96lcqf914b4hm3ft-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[17:37:22] <LeoNerd> Not overly.. it just isn't. The usual way is  my $method = "method_$name";  $object->$method(Vvar)
[17:37:24] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:37:27] <LeoNerd> $var
[17:39:37] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:39:48] <choroba> karjala: you can use $obj->${\"method_$name"}($var)
[17:40:04] <choroba> which doesn't mean you should.
[17:40:05] <LeoNerd> Yah; I do that sometimes
[17:40:10] <LeoNerd> quite ;)
[17:40:24] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:40:25] <karjala> Okay!
[17:40:31] *** Joins: hudo_ (~hudo@62.68.20.210)
[17:41:22] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:42:15] * GumbyPAN CPAN Upload: local-lib-2.000_026 by HAARG https://metacpan.org/release/HAARG/local-lib-2.000_026
[17:43:52] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:44:33] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:45:54] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:47:26] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:47:48] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:48:13] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:48:39] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:49:04] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:49:24] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:50:20] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:50:58] *** Joins: Bluewind (~Bluewind@user/bluewind)
[17:52:24] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:53:24] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[17:54:50] *** Quits: Nitronix (~nitronix@88.198.206.243) (Ping timeout: 260 seconds)
[17:56:34] *** Joins: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net)
[17:57:39] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[17:59:16] *** Joins: symdrome (~symdrome@186-240-46-141.user3p.veloxzone.com.br)
[17:59:34] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 265 seconds)
[18:00:05] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[18:01:13] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[18:01:17] * GumbyPAN CPAN Upload: PerlPowerTools-1.027 by BDFOY https://metacpan.org/release/BDFOY/PerlPowerTools-1.027
[18:02:00] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:02:01] *** Quits: roflbot (~hoydand@195.181.139.135) (Ping timeout: 250 seconds)
[18:02:48] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[18:03:02] *** Quits: mattil_ (~mattil@airio.portalify.com) (Remote host closed the connection)
[18:03:16] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:03:42] *** Quits: symdrome (~symdrome@186-240-46-141.user3p.veloxzone.com.br) (Client Quit)
[18:04:02] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[18:04:05] *** Joins: symdrome (~symdrome@186-240-46-141.user3p.veloxzone.com.br)
[18:04:53] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 265 seconds)
[18:05:43] *** Quits: bmeneg (~bmeneg@2001:1284:f013:56c9:477e:58ae:7d0c:e535) (Remote host closed the connection)
[18:07:05] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[18:07:14] *** Joins: roflbot (~hoydand@195.181.139.135)
[18:07:22] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[18:09:07] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Client Quit)
[18:09:17] *** Joins: Nitronix (~nitronix@5.29.23.150)
[18:09:23] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[18:11:16] *** Joins: nx_ (~nitronix@88.198.206.243)
[18:11:27] <Altreus> the real question is why do we allow methods to be treated this way when we have strictures to prevent the same thing happening to variables
[18:12:08] <LeoNerd> The same reason we allow  my $class = "Some::string::here";  $class->method(@args)
[18:12:13] <Botje> because methods can be (and are) routinely generated at compile time in places far far away from the invocations.
[18:12:13] <LeoNerd> dynamic language
[18:12:35] <LeoNerd> If you didn't want the dynamic language bits you could just not use a dynamic language
[18:12:42] <Botje> and because nobody thought to add a UNIVERSAL::send so you can do $obj->send("method_$foo", @args)
[18:12:53] <Altreus> but isn't no strict refs also dynamic language bits?
[18:13:52] *** Quits: Nitronix (~nitronix@5.29.23.150) (Ping timeout: 252 seconds)
[18:13:58] <LeoNerd> I suppose we could add a  use strict 'methods';  if you wanted that
[18:14:01] <Altreus> I mean if I wanted to use the variable $"item_$foo" I would just make %item and do $item{$foo} - why aren't classes held to the same standard? $class->method($foo)
[18:14:43] <Grinnz> none of the stuff that's allowed in dynamic methods are related to refs
[18:15:02] <Grinnz> they're just because methods are looked up as strings (or cached as such)
[18:15:06] <Altreus> right but the reason we disallow it is not because it's hard for the compiler, it's because it's hard for the programmer
[18:15:27] <Altreus> dynamically generated method names are the scourge of many a maintenance programmer's world
[18:15:38] <Grinnz> are they?
[18:15:45] <Altreus> well I fucking hate them
[18:16:24] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:16:28] <Grinnz> the main difference is actually that symbolic refs have to be resolved at runtime and variables are normally resolved at compile time
[18:16:30] <Altreus> trying to find all calls to a particular method and I don't learn about some of them until unrelated tests start failing
[18:16:43] <Grinnz> methods are always resolved at runtime already
[18:16:45] <xq> that is if you have tests!
[18:16:47] <xq> :)
[18:17:03] <xq> now try that when you don't have any
[18:17:04] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[18:17:04] <Altreus> And it turns out one piece of code was using that package in this way and there's no way I'd ever have found that if I hadn't happened to decide to run the whole test suite
[18:17:18] <Grinnz> parse time method resolution cuold be useful but it would definitely be an opt in required situation
[18:17:37] <LeoNerd> parse-time method resolution would only be possible on classy methods, not instance ones
[18:17:55] <Grinnz> LeoNerd: unless we make my Foo::Bar $obj actually work
[18:18:06] <LeoNerd> And what happens when I pass in a subclass of a Foo::Bar instance?
[18:18:12] <Altreus> I rather thought we were trying to support the capability of a program to be reasoned about later, not supporting internal optimisations
[18:18:15] <Grinnz> well, that's just mean :P
[18:18:31] <Altreus> LeoNerd: it's cast to a Foo::Bar :D
[18:18:36] <Grinnz> Altreus: column A, column B
[18:19:01] <Altreus> I mean
[18:19:02] <Grinnz> symbolic refs were always misused; dynamic method names aren't really
[18:19:10] <Altreus> I guess there's no reason the *language* has to enforce reasoning-about-code restrictions
[18:19:11] <LeoNerd> Imean, if you want a strictness pragma for turning off dynamic methods, it's easy enough to do
[18:19:44] <LeoNerd> I'd argue by far the hardest part about it would be arguing its way into strict.pm itself. If you can solve that, the rest is eeeeeasy
[18:19:55] <xq> wouldn't that break basically every OOP system?
[18:20:10] <LeoNerd> If enabled in scope, sure
[18:20:12] <LeoNerd> So don't do that ;)
[18:20:16] <xq> and every ORM
[18:20:34] <Grinnz> and every mojo app, and
[18:21:53] <Altreus> What examples of dynamic method names can't be replaced by some sort of despatch table?
[18:22:25] <Altreus> Especially since the method can just be given an :Attribute to be found later
[18:22:30] <LeoNerd> exit __PACKAGE__->can( "command_" . shift @ARGV )->( @ARGV );
[18:22:40] <LeoNerd> Ohlook I've just created a subcommand-based script
[18:22:53] <choroba> the ones whose names depend on an external input
[18:23:14] <Altreus> that sounds even more obfuscated
[18:23:37] <Grinnz> my dispatch tables are often to find the method name, which is still used dynamically
[18:23:59] <Grinnz> the alternative would be adding sub call overhead
[18:24:23] <Grinnz> (though sometimes that's needed to adjust args)
[18:25:12] <Grinnz> and that means the dispatch table needs to close over the object
[18:25:25] <Grinnz> which isn't great for reusability
[18:25:33] <Altreus> LeoNerd: but why can't __PACKAGE__ just implement a method called "has_command" if you're already requiring it to call everything command_*
[18:26:02] <Grinnz> then has_command has to implement all of the commands or add a method call overhead
[18:26:10] <Altreus> yes
[18:26:11] <xenu> we should remove dynamic typing while we're at it
[18:26:20] <Grinnz> neither of those are great
[18:26:33] <Altreus> worrying about method call overhead sounds like premature optimisation to me
[18:26:54] <Grinnz> it's a tradeoff
[18:27:04] <vague> Grinnz, maybe you know an answer to my question above about Mojo::UserAgent and client cert auth?
[18:27:07] <Altreus> Between legibility and what I have to imagine is negligible overhead
[18:27:37] <Grinnz> regular sub call overhead is generally negligible, method call overhead can be less so 
[18:27:56] <Altreus> why does it need to be a method call and not a regular sub call?
[18:28:05] <Grinnz> object orientation?
[18:28:07] <Altreus> just make a despatch table and return a subref
[18:28:20] <Altreus> then don't add OO
[18:28:24] <Grinnz> i guess that depends on what you're actually doing then
[18:28:29] <Altreus> oh I said method but I meant function
[18:28:42] <Grinnz> this whole thing was about methods
[18:28:58] <Altreus> I was responding to what LeoNerd said
[18:29:05] <Altreus> which is not about methods
[18:29:44] <Grinnz> unless you want it to be subclassable, yes
[18:29:50] <Altreus> exit (__PACKAGE__->has_command(shift @ARGV) || sub { "not a command"; 1 })->(@ARGV)
[18:30:17] <xq> If I understand the original Altreus's problem  correctly, it is finding all places where method x is called, and being unable to due to dynamic method calls in the form of $foo->$bar, and his idea is to have a way to forbid such syntax, but it is problematic because it will break many things. I think a more viable approach could be having some instrumentation machinery - a way to ask the perl interpreter "list 
[18:30:23] <xq> me all the places where the method X  was called from (file, line), regardless of if statically or dynamically"
[18:30:24] <Altreus> point is it was not an example of something that requires dynamic method lookups
[18:30:44] <Altreus> and in fact if it doesn't have to be dynamic, it doesn't have to be a method, which means it avoids the overhead
[18:30:53] <Altreus> so that sounds like a win-win
[18:31:15] <LeoNerd> You then have to implement the `has_command` method. How? Maybe it's a hash, or a big if/elsif or match/case or somesuch
[18:31:18] <LeoNerd> Those are kinda icky
[18:31:18] <xq> can existing profilers do the above?
[18:31:22] <LeoNerd> They are DRY-failures
[18:31:34] <Altreus> LeoNerd: who cares? That's for __PACKAGE__ to decide
[18:31:48] <LeoNerd> my %commands = ( flibble => \&command_flibble );  sub command_flibble { ... }    # I've just written flibble twice more than I needed to
[18:32:01] <Altreus> then inline it
[18:32:07] <Grinnz> vague: https://metacpan.org/pod/Mojo::UserAgent#cert is the only option for it in Mojo::UserAgent, if you want to affect arbitrary SSL options for it you have to use https://metacpan.org/pod/IO::Socket::SSL#IO::Socket::SSL::set_client_defaults(%args)
[18:32:08] <Paperbot> Link title(s): [ Mojo::UserAgent - Non-blocking I/O HTTP and WebSocket user agent - metacpan.org ] [ IO::Socket::SSL - metacpan.org ]
[18:32:10] <Altreus> at least you can _find_ it
[18:32:30] <LeoNerd> Ahyes, lets inline the entire ~thousandline body of /all/ the toplevel command functions into one giant hash constructor. That sounds like a fun idea
[18:32:33] <Altreus> plus you could do sub command_flibble :Command {} and write a thing that adds :Commands to the hash
[18:32:47] <LeoNerd> So. er... I did that. It's called Commandable::Finder::SubAttributes. 
[18:32:51] <LeoNerd> In fact I wrote it *yesterday*
[18:32:56] <LeoNerd> Guess how it dispatches? ;)
[18:33:05] <Altreus> it finds all :Commands and puts them in a hash
[18:33:16] <Altreus> as refs
[18:33:31] <Grinnz> xq: that requires running the code, so static analyzers can't at least
[18:33:34] <Altreus> which would be far cleaner than putting their *names* in a hash
[18:33:58] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:34:00] <Altreus> plus I don't entirely object to $foo->$bar
[18:34:12] <Altreus> What I object to is $bar being constructed from some substring and another bar
[18:34:15] <LeoNerd> That was literally the exact thing we started from
[18:34:23] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[18:34:30] <Altreus> no we started from "method_$bar"
[18:34:53] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:34:54] <Grinnz> so you want them to write $bar = "method_$bar" on another line, which they have to anyway because perl doesn't support that syntax?
[18:34:55] <Altreus> $foo->$bar could easily come from some code introspection, meaning you are just calling something you already know about
[18:35:21] <Altreus> Well this is rather the crux of the problem but I didn't really find the moment to bring it up
[18:35:29] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[18:35:41] <Altreus> then again why wouldn't $bar just be a coderef
[18:35:50] <Altreus> Can't see why it would need to be a string
[18:35:57] <Altreus> unless you're obfuscating something
[18:36:44] <LeoNerd> If it's a code reference then method override no longer happens
[18:37:05] *** Joins: thrig (~thrig@65.113.153.50)
[18:37:20] <Grinnz> i.e. it's not a method call anymore
[18:37:23] <xq> there is also the issue of string eval
[18:37:25] <Altreus> I'm trying to theorycraft a situation where you would construct a string and use it as a name, instead of setting up coderefs somehow
[18:37:28] <xq> which can do whatever it wants
[18:37:39] <Grinnz> any situation where you still actually want object orientation?
[18:37:52] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:37:55] <Altreus> but if you have an object you can have a despatch interface
[18:38:00] <Altreus> objects are the easiest to remove this from
[18:38:13] <LeoNerd> Yes but then you have to write that
[18:38:17] <Grinnz> i can, but i won't
[18:38:18] <LeoNerd> This is a convenience around not having to do that
[18:38:24] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[18:38:48] <Altreus> But the disadvantages are horrible
[18:38:55] <LeoNerd> Imean sure you could write   match($name : eq) { case("one") { return $self->thing_one(@_) }  case("two") { return $self->thing_two(@_) } case("three") .... }
[18:38:57] <LeoNerd> but that's icky
[18:39:06] <LeoNerd> if I wanted to write large amounts of stupid boilerplate I'd be writing Java
[18:39:17] <Grinnz> overusing it can get horrible sure, i haven't had any problems with it
[18:39:33] <Altreus> Well if there's one thing Java has going for it, it's the fact you can find things :P
[18:39:37] <Altreus> there's just a lot more things to find
[18:39:44] <LeoNerd> Java is a static language, yes.
[18:40:02] <Grinnz> maybe whatever you're working on should use less object orientation
[18:40:11] <LeoNerd> It makes dynamic behaviours more difficult to implement, at the benefit that more static analysis is possible
[18:40:28] <Altreus> I generally agree the world could do with less OO, yes
[18:41:13] <Altreus> The example that hurt me this deeply was one where the $bar part of method_$bar came from the database
[18:42:18] <Altreus> And all it was doing was running a queue
[18:42:28] <xq> too many programming tutorials teach you things you can do, not enough of them that teach you things you can but should not do
[18:43:06] <Altreus> I couldn't find a single place in the ENTIRE code where this method was called, and for some reason carping didn't help, which happens sometimes for some reason
[18:43:35] <Altreus> oh, right, it didn't help because I did find where it was called, and it was mired in this spaghetti code that tried to work out what the method should be
[18:43:42] <xq> in theory this is a job for a debugger
[18:43:54] <Altreus> the code doesn't launch at all in the debugger
[18:43:56] <Altreus> :D
[18:44:03] <xq> yeah, emphasis on theory
[18:44:24] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:44:38] <thrig> last I tried gdb I ended up with gdb.core and gdb not really helping
[18:44:42] <Altreus> I do recall it took me a long time to discover that the things in the code were even database objects in the first place
[18:44:50] <Altreus> cos there was no documentation either
[18:45:14] <Altreus> It was clear what the method did but it was not remotely clear how :D
[18:45:19] <xq> sounds like you're working on a interesting piece of code
[18:45:20] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[18:45:44] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:45:51] <jabberwok> i do love "Data-driven code" but it can lead to things like putting method names in a database so methods are only ever called by name and not statically at all.  sort of GOTO X*3
[18:46:08] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[18:46:19] <Altreus> driven, yes, but this is almost data-written-code
[18:46:27] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[18:47:40] <gordonfish-> I just love old mysql databases where everything is in 'latin1_swedish_ci' collation, with text encoded in layering as follows...:
[18:47:45] <gordonfish-> sweval: use Encode::Simple qw(decode); my $fromdb = join '', map chr hex, qw(3C 62 72 20 2F 3E C3 82 C2 A0 20 3C 69 6D 67); my $utf8_decoded = decode 'utf-8', $fromdb; my $utf8_decoded_again = decode 'utf-8', $utf8_decoded; [ $fromdb, $utf8_decoded, $utf8_decoded_again ]; # DD note: \303\202\302\240 == \xC3\x82\xC2\xA0
[18:47:47] <perlbot> gordonfish-: ["<br />\303\202\302\240 <img","<br />\x{c2}\x{a0} <img","<br />\x{a0} <img"]
[18:47:50] *** gordonfish- is now known as gordonfish
[18:47:52] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:48:03] <thrig> swedish? bork bork bork
[18:48:11] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:48:24] <gordonfish> Sounds like borg
[18:48:52] <jabberwok> does the INSTALL file include an Allen wrench ?
[18:49:41] <Altreus> definitely borked
[18:50:37] * LeoNerd misread Alien wrench
[18:52:50] <gordonfish> I'm in the process of converting the entire DB to utf8mb4_general_ci, fun fun fun
[18:53:17] <Grinnz> if it's a correctly stored text field, you should onyl need to change your connection charset and mysql will do the translation for you
[18:53:19] <gordonfish> LeoNerd: It's right here on this guide book: To Wrench 40 Humans
[18:53:21] <Grinnz> but it sounds like it's not
[18:53:48] <gordonfish> Grinnz: Except if you want queries with non-ascii characters to work right
[18:53:57] <Grinnz> also leverage CONVERT TO CHARSET for fixing the data in the tables, it does the same auto conversion for you
[18:54:23] <Grinnz> yeah, querying against different charsets is "fun"
[18:54:32] <thrig> SELECT * FROM table BORKING THE DATA
[18:55:37] <gordonfish> thrig: That and wild cards in place of the non-ascii character is I've typically tested such issues
[18:55:43] <gordonfish> %
[18:56:16] <Grinnz> a mysql text column value is sort of like a perl string, except that instead of the opaque utf8 bit, it has an actual encoding recorded
[18:56:26] <Grinnz> so it can use that to translate to your connection charset, or convert to another one
[18:57:05] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 265 seconds)
[18:58:34] <gordonfish> yep
[18:58:50] <Grinnz> whereas converting between text and blob columns will just assume you want the bytes to map to the specified charset, so you can use that to fix broken encodings
[18:59:19] <Grinnz> (back up your data before you attempt this)
[19:00:23] <vague> Grinnz, thanks, why didn't I find that? Could be because I thought google would turn up something instead of going to the source doc and look myself :)
[19:00:43] <Grinnz> as always, google is the worst perldoc
[19:01:59] <gordonfish> Grinnz: When ever I do a big, DB-wide, conversion, I grab the full sql dump, do the changes, change the db name in the sql file, import that. Old DB remain undisturbed, while new one can be tested.
[19:08:15] *** Joins: Pali (~pali@user/pali)
[19:09:30] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:10:15] <Altreus> So people don't like my $foo = try { ...
[19:10:26] <Altreus> I kind of agree because it's like a cuddled else
[19:10:42] <Grinnz> mostly they don't like it because it makes it an expression which means you need a trailing semicolon
[19:10:50] <Altreus> I suppose "real" try would require my $foo; try { $foo = }
[19:10:52] <LeoNerd> SKT, FCT and core's feature 'try' are control-flow and not value-returning
[19:10:56] <LeoNerd> Yes
[19:10:57] <Grinnz> personally i don't like it because i feel like it's weird to get a return value from different blocks depending what happens
[19:11:07] <LeoNerd> Or  my $foo = do { try { ... } catch($e) { } };
[19:11:18] <Altreus> no they don't like it cos it was hard to find the try when you found the catch
[19:11:39] <Grinnz> wut
[19:11:43] <choroba> in Emacs, it's C+r try
[19:11:51] <LeoNerd> /catch<CR><S-Up>
[19:12:27] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[19:12:33] <Altreus> being able to see code is fairly valuable
[19:13:03] <thrig> but you have to like or at least tolerate that C code
[19:14:34] <Grinnz> huh https://snoonet.org/posts/2021/06/20/updates-to-irc-com-infrastructure/
[19:14:34] <Paperbot> Link title(s): [ Snoonet Â· Updates to IRC.com infrastructure ]
[19:16:42] *** Joins: donsequitur (~donsequit@c-68-83-221-41.hsd1.md.comcast.net)
[19:18:02] *** Joins: Tempesta (~Tempesta@user/tempesta)
[19:22:17] *** Quits: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net) (Ping timeout: 264 seconds)
[19:23:56] *** Joins: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net)
[19:27:26] *** Joins: humky (~humky@user/humky)
[19:31:47] *** Joins: sbates (~sbates@198.178.118.18)
[19:31:54] *** Quits: donsequitur (~donsequit@c-68-83-221-41.hsd1.md.comcast.net) (Quit: Leaving)
[19:32:18] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Read error: Connection reset by peer)
[19:32:18] *** Joins: donsequitur (~donsequit@c-68-83-221-41.hsd1.md.comcast.net)
[19:33:19] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[19:35:45] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[19:39:48] *** Joins: woei (~woei@cust-245-64-110-94.dyn.as47377.net)
[19:41:05] *** Quits: nx_ (~nitronix@88.198.206.243) (Ping timeout: 246 seconds)
[19:42:27] *** Joins: gast0n (~g4570n@user/gast0n)
[19:49:19] *** Joins: unthrig (~thrig@65.113.153.50)
[19:52:52] *** Quits: thrig (~thrig@65.113.153.50) (Ping timeout: 252 seconds)
[19:54:01] *** unthrig is now known as thrig
[19:55:34] <choroba> Re: https://www.perlmonks.org/?node_id=11137416
[19:55:35] <Paperbot> Link title(s): [ Re^2: Is it safe to use external strings for regexes? (infinite loops) ]
[19:56:25] <choroba> I tried the code samples in various Perl versions I have available, they create infinite loops in 5.6.2, not in 5.10.1
[19:56:44] <choroba> (I have no versions in between available easily)
[19:57:47] <choroba> Which probably means most of https://perldoc.perl.org/perlre#Repeated-Patterns-Matching-a-Zero-length-Substring should have been rewritten 12 years ago
[19:57:48] <Paperbot> Link title(s): [ perlre - Perl regular expressions - Perldoc Browser ]
[20:00:15] *** Joins: eseyman (~manu@lfbn-idf1-1-1108-68.w82-125.abo.wanadoo.fr)
[20:03:34] *** Joins: mattil (~mattil@87-92-67-65.bb.dnainternet.fi)
[20:08:16] *** Quits: mattil (~mattil@87-92-67-65.bb.dnainternet.fi) (Ping timeout: 265 seconds)
[20:09:06] *** Quits: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:09:17] <Altreus> if only I could return properly from a Try::Tiny :(
[20:11:25] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[20:12:36] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[20:13:20] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[20:13:46] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[20:13:55] <_73> What cpan module would you reccomend for parsing data blocks with key=val pairs, where their is a static set of valid keys, in which all the valid keys must be defined. Example: http://dpaste.com/63MAYNYCA
[20:13:55] <Paperbot> Link title(s): [ dpaste: . ]
[20:14:23] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[20:14:54] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[20:15:18] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[20:15:24] <aquanight> why does that block style look familiar
[20:15:46] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[20:16:10] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[20:16:55] <Altreus> nginx
[20:17:04] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[20:17:28] <aquanight> hmm
[20:17:29] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[20:18:04] <LeoNerd> I'd write soemthing on Parser::MGC.. parse the lot then throw out the bad ones probablhy
[20:18:54] <aquanight> yeah. generally best way to go is separate parsing from data-structure validation
[20:20:29] <aquanight> could've sworn there was a module for grammar-based parsing but hell if I can remember what it is
[20:20:40] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Remote host closed the connection)
[20:21:09] <aquanight> Regexp::Grammars
[20:21:15] <aquanight> *that's* what I was looking for
[20:21:24] <thrig> or something in Config:: but dunno if anything there is strict or does what you want
[20:21:42] <_73> LeoNerd: I asked a similar question about a month ago and you reccomended Parser::MGC, but I struggled getting going with it. I then ended up hacking together something, my implementation sucks though and now I can't debug it without significant pain.
[20:22:14] <LeoNerd> Ah, well maybe have another go :)
[20:22:33] <xq> if that's all the grammar there is, this should be very easily parseable by hand
[20:22:59] <_73> I have more motivation now :)
[20:23:32] <aquanight> LeoNerd: the problem with Parser::MGC is you haven't converted the POD to Object::Pad :P
[20:24:13] <aquanight> or the module itself, apparently
[20:24:37] <aquanight> but then that's probably on your list
[20:25:14] <LeoNerd> eh.. maybe eventually
[20:25:38] <LeoNerd> I don't want to change -everything- of mine into O:P just have to do it a second time a few years later for core class feature
[20:25:52] <LeoNerd> I'm doing enough to get some interesting use-cases out as points of research 
[20:27:18] <Altreus> Object::POD
[20:27:46] <Altreus> I object
[20:27:53] <thrig> I, Object
[20:30:49] <shaldannon> iObject
[20:31:11] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:68ba:3570:12e9:ed45)
[20:31:20] <shaldannon> (potentially copyrighted by Apple)
[20:40:12] *** Quits: choroba (~E.Choroba@88.146.255.106) (Remote host closed the connection)
[20:40:29] *** Joins: choroba (~E.Choroba@88.146.255.106)
[20:41:18] *** Quits: choroba (~E.Choroba@88.146.255.106) (Client Quit)
[20:41:44] <Grinnz> that isn't nginx, lines aren't semicolon terminated
[20:42:27] <Grinnz> and also nginx has directives not assignments
[20:43:35] <thrig> does it have a prime directive?
[20:46:44] <fizzie> Yeah, the prime directive disallows nginx from responding with "Upgrade" headers to prevent undue interference to the normal protocol evolution of a client.
[20:48:25] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 252 seconds)
[20:48:32] <genio> ether: We went riding at the motocross track last wednesday. I thought I did so well and was all proud of myself. My friend just showed me the gopro footage he had and it crushed my happy. I suck and I'm slower than slow
[20:51:34] <Altreus> hmm you're right, but it is familiar
[21:01:49] <jabberwok> "Prime Directive" sounds like a fancy steak house overlooking San Francisco Bay
[21:04:31] <BLZbubba> how about Spock's Criss
[21:07:11] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[21:10:44] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[21:16:24] *** Quits: sbates (~sbates@198.178.118.18) (Quit: Leaving)
[21:17:29] *** Joins: Moonligh1 (~Moonlight@209.172.231.126)
[21:24:47] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[21:25:11] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[21:28:58] *** Quits: pizdets (~pizdets@183.182.111.226) (Quit: pizdets)
[21:34:41] *** Quits: Moonligh1 (~Moonlight@209.172.231.126) (Ping timeout: 245 seconds)
[21:35:41] *** Joins: pizdets (~pizdets@183.182.111.226)
[21:36:44] *** Joins: Moonlight (~Moonlight@209.172.231.126)
[21:45:01] *** Quits: Moonlight (~Moonlight@209.172.231.126) (Ping timeout: 252 seconds)
[21:47:39] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:51:40] * GumbyPAN CPAN Upload: Astro-VEX-0.001 by GSB https://metacpan.org/release/GSB/Astro-VEX-0.001
[21:52:13] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 252 seconds)
[21:52:43] <BLZbubba> tough crowd here today :)
[21:52:57] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:59:07] *** Joins: N4buc0- (~N4buc0@2804:14c:8782:814c:1e84:789b:f579:27d9)
[22:11:12] *** Quits: N4buc0- (~N4buc0@2804:14c:8782:814c:1e84:789b:f579:27d9) (Quit: Leaving)
[22:14:43] <ether> genio: aww
[22:15:12] <genio> ether: Meh, I'll improve quickly is all that means
[22:28:41] *** Joins: tg_ (~tg@rockylinux/infra/tg)
[22:29:11] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[22:31:41] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 265 seconds)
[22:41:13] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[22:51:47] * GumbyPAN CPAN Upload: Devel-Examine-Subs-1.72 by STEVEB https://metacpan.org/release/STEVEB/Devel-Examine-Subs-1.72
[22:55:56] *** Quits: cooper_ (~mitchell@user/cooper) (Quit: leaving)
[22:57:34] *** Joins: cooper (~mitchell@user/cooper)
[23:00:04] *** Quits: cooper (~mitchell@user/cooper) (Client Quit)
[23:00:13] *** Joins: cooper (~mitchell@user/cooper)
[23:02:18] *** Joins: whynot (~whynot@37.73.154.187)
[23:02:19] *** Quits: cooper (~mitchell@user/cooper) (Client Quit)
[23:04:03] *** Joins: cooper (~mitchell@user/cooper)
[23:08:07] <simcop2387> LeoNerd: et al: blead has been updated and has up to date modules as of an hour or two ago
[23:09:13] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:11:09] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[23:11:49] * GumbyPAN CPAN Upload: Devel-Examine-Subs-1.73 by STEVEB https://metacpan.org/release/STEVEB/Devel-Examine-Subs-1.73
[23:13:29] *** Joins: pucara (~i@181.95.206.221)
[23:14:46] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[23:19:04] <simcop2387> alright.... walmart is pushing stuff out for the linux kernel.  https://www.linuxfoundation.org/press-release/walmart-moves-production-grade-networking-project-l3af-to-the-linux-foundation/
[23:19:05] <Paperbot> Link title(s): [ Linux Foundation to Integrate L3AF, Walmart's Production-Grade Project to Support eBPF programs -... ]
[23:22:28] *** Joins: nx_ (~nitronix@5.29.23.150)
[23:24:16] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[23:25:14] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[23:26:14] <LeoNerd> :)
[23:32:06] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[23:32:48] *** Joins: YaoNai (~YaoNai@user/yaonai)
[23:36:43] *** Quits: zgu|skaro (~zgu@2603-7080-b704-0800-832f-b7d5-7b90-f547.res6.spectrum.com) (Ping timeout: 252 seconds)
[23:41:53] * GumbyPAN CPAN Upload: Devel-Examine-Subs-1.74 by STEVEB https://metacpan.org/release/STEVEB/Devel-Examine-Subs-1.74
[23:45:55] <zgu> the C language now has lvalues, rvalues, and Great Values
[23:46:26] <LeoNerd> Any Great Stellated Values?
[23:47:01] <zgu> no, only platonic and catalan
[23:47:55] <LeoNerd> Huh... I hadn't head of the Catalan Solids before. Going to have to read about them now
[23:48:04] *** Joins: jaytee8057 (~jaytee80@fw.bmd.cpii.com)
[23:48:08] <LeoNerd> The bugfix for  has $slot :weak;  on roles will have to wait a few more minutes :P
[23:51:24] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Ping timeout: 256 seconds)
