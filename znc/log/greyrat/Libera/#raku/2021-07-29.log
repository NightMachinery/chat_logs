[00:07:30] <vrurg> [Coke]: and it doesn't explode? Are you boolifying it somewhere?
[00:10:41] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Read error: Connection reset by peer)
[00:11:08] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Ping timeout: 268 seconds)
[00:28:54] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[00:29:44] <jdv> [Coke]: do you turn a lot of things into fail often?
[00:35:58] <[Coke]> jdv: it's just one of my powers.
[00:42:44] *** Joins: casaca (~casaca@user/casaca)
[00:44:16] <jdv> i knew it!
[00:50:53] <codesections> Is there a reason why the following is:
[00:51:23] <codesections> m: say (-1).sqrt; say (-1.Complex).sqrt
[00:51:23] <camelia> rakudo-moar 74d7ff771: OUTPUT: «NaN␤0+1i␤»
[00:52:14] <codesections> I would have expected those to both return 0+1i (that is, the NaN surprised me)
[00:52:26] <[Coke]> you have to declare if you want Complex, yes.
[00:52:57] <[Coke]> m: -1.^name.say
[00:52:57] <camelia> rakudo-moar 74d7ff771: OUTPUT: «WARNINGS for <tmp>:␤Int␤Useless use of "-" in expression "-1.^name.say" in sink context (line 1)␤»
[00:53:06] <[Coke]> m: (-1).^name.say
[00:53:06] <camelia> rakudo-moar 74d7ff771: OUTPUT: «Int␤»
[00:53:45] <codesections> yeah, I see that that is the case.  I would have expected an auto conversion, and I was wondering why we didn't go that route
[00:54:32] <codesections> m: 1.sqrt.^name.say
[00:54:32] <camelia> rakudo-moar 74d7ff771: OUTPUT: «Num␤»
[00:54:43] <codesections> plenty of fns convert 
[00:55:22] <[Coke]> would you want *every* math operator to upgrade to Complex?
[00:55:38] <[Coke]> operator +/or function
[00:56:04] <[Coke]> An argument could be made either way, but it would be an argument.
[00:56:08] <codesections> no?  I mean, I wouldn't want *every* math operator to upgrade to Num either -- just the ones that need to
[00:56:29] <codesections> How many would need to return a Complex result?
[00:56:38] <moritz> well, Larry was against turning (-1).sqrt into 1i. He said most folks don't know, want or need complex numbers
[00:56:53] <[Coke]> moritz++
[00:57:23] <moritz> and for somebody who isn't familiar with the concept, getting the information that there was an undefined operation is much more useful than some mathematical concept they don't know
[00:57:50] <codesections> I see.  That makes sense – it's trading off consistency, but getting something useful in return.
[00:58:22] <moritz> you could also call Num in, Num out consistent :D
[00:58:41] <codesections> not sure I agree, but I can see the force of the argument.  Thanks, that was exactly what I was asking :D
[00:59:42] * moritz dates himself by recalling a probably decade-old discussion with TimToady :D
[00:59:48] <moritz> and you're welcome
[01:00:05] <codesections> well, but Int in, Num out is inconsistent then! (I.e., there's *some* inconsistency with how Raku expands numeric types)
[01:00:43] <codesections> well, that's why I asked -- I figured there was a years-ago discussion that I hadn't been around for :)
[01:13:17] <codesections> Oh, I see ^^^ in the docs, actually (I was going to add a note, but there's already one there -- I just didn't look in the right place)
[01:13:29] <codesections> it also points out &roots
[01:14:29] <codesections> m: say (-1).roots(2)[0] =~= i
[01:14:29] <camelia> rakudo-moar 74d7ff771: OUTPUT: «True␤»
[01:16:43] *** Quits: nullheroes (~danielvu@168.235.66.22) (Quit: WeeChat 3.1)
[01:30:23] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[01:32:02] *** Joins: jess (~jess@libera/staff/jess)
[01:40:06] <Util> m: class L {has Str $.l}; my $c = 0; multi sub infix:<cmp> (L $a, L $b) { say "called {++$c} times"; $b.l cmp $a.l }; my @a = map {L.new: :l($_) }, <a b c a b c a>; @a .= sort; my $z = @a[0] cmp @a[1]; # Why is my custom cmp not called by .sort?
[01:40:07] <camelia> rakudo-moar 74d7ff771: OUTPUT: «called 1 times␤»
[01:48:48] <codesections> I'm not 100% sure this is right, but I believe it's because your &infix:<cmp> isn't in the lexical scope for &sort's definition.  But you can pass it in as a custom comparator with .sort(&infix:<cmp>)
[01:52:16] <Util> codesections: thanks, I am familiar with custom comparitors in sort. I am really playing with .minpairs, which says it uses <cmp>. Sort should also use <cmp> even more frequently, hence my use of it here.
[01:53:32] <Util> Also, the infix:<cmp> definition is after the close of the class, so it *is* in lexical scope, for my explicit single call to cmp, and for the sort. 
[01:55:24] <codesections> I agree that it's in lexical scope for your call to cmp.  But isn't it in dynamic scope for &sort?  (That is, in scope at the callsite, but not where &sort was defined)
[01:57:56] <codesections> But I might be wrong about how multis handle scope...
[01:59:49] <Util> I don't quite follow you on scoping. Can you see some variant of what I am doing that would use my custom <cmp> for sorting or .minpairs? 
[02:05:21] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 276 seconds)
[02:05:53] <codesections> hmm, not the most elegant, but this would work I think: 
[02:07:43] *** Joins: thundergnat (~steve@2601:80:8600:2543:2129:3fcf:f399:9779)
[02:08:09] <thundergnat> m:  class L {has Str $.l}; my $c = 0; multi sub infix:<cmp> (L $a, L $b) { say "called {++$c} times"; $b.l cmp $a.l }; my @a = map {L.new: :l($_) }, <a b c a b c a>; @a .= sort(&infix:<cmp>); my $z = @a[0] cmp @a[1];
[02:08:10] <camelia> rakudo-moar 74d7ff771: OUTPUT: «called 1 times␤called 2 times␤called 3 times␤called 4 times␤called 5 times␤called 6 times␤called 7 times␤called 8 times␤called 9 times␤called 10 times␤called 11 times␤called 12 times␤called 13 times␤called 14 times␤called 1…»
[02:08:38] <thundergnat> It IS odd that you need to pass in the declared cmp routine...
[02:08:54] <codesections> m: class L {has Str $.l}; my $c = 0; &infix:<cmp>.wrap(->| { say "called {++$c} times"; $b.l cmp $a.l }) ; my @a = map {L.new: :l($_) }, <a b c a b c a>; @a .= sort; my $z = @a[0] cmp @a[1];
[02:08:54] <camelia> rakudo-moar 74d7ff771: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared␤at <tmp>:1␤------> 3>.wrap(->| { say "called {++$c} times"; 7⏏5$b.l cmp $a.l }) ; my @a = map {L.new: :␤»
[02:09:18] <codesections> m: class L {has Str $.l}; my $c = 0; &infix:<cmp>.wrap(->$a, $b { say "called {++$c} times"; $b.l cmp $a.l }) ; my @a = map {L.new: :l($_) }, <a b c a b c a>; @a .= sort; my $z = @a[0] cmp @a[1];
[02:09:19] <camelia> rakudo-moar 74d7ff771: OUTPUT: «called 1 times␤Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤called 2 times␤called 3 times␤»
[02:09:46] <thundergnat> It is probably some sort of scoping issue but I am not seeing the reason for it
[02:09:52] <codesections> m: class L {has Str $.l}; my $c = 0; &infix:<cmp>.wrap(->| { say "called {++$c} times"; callsame }) ; my @a = map {L.new: :l($_) }, <a b c a b c a>; @a .= sort; my $z = @a[0] cmp @a[1];
[02:09:52] <camelia> rakudo-moar 74d7ff771: OUTPUT: «called 1 times␤called 2 times␤called 3 times␤called 4 times␤called 5 times␤called 6 times␤called 7 times␤called 8 times␤called 9 times␤called 10 times␤called 11 times␤called 12 times␤called 13 times␤called 14 times␤called 1…»
[02:10:33] <codesections> (and then unwrap after, which is part of what makes it less elegant)
[02:11:10] <jdv> it could be a optimization that made overloading cmp impossible?
[02:11:21] <jdv> lizmat would probably know
[02:12:08] <lizmat> what is the nature of the programmatical emergency?
[02:12:21] <jdv> just skimming src/core.c/Rakudo/Sorting.pm6 hints at that, maybe
[02:12:57] <thundergnat> There are 14 candidates for cmp. https://github.com/rakudo/rakudo/blob/efb3116a90a1c6a7eff73b141aec79d345be0c28/src/core.c/Order.pm6#L14
[02:13:41] <Util> Classes should be able to define their own ordering. My understanding is that such should be done via custom `multi sub infix:<cmp>` with 2 params, each of the class.
[02:13:58] <lizmat> that is the idea, yes
[02:14:07] <thundergnat> Util: I agree, it _should_ work
[02:14:59] <Util> .minpairs *relies* on it working, since it cannot take a &by custom comparitor at call-time.
[02:15:47] * lizmat is still not sure what should work
[02:16:46] <Util> From docs/announce:
[02:16:52] <Util> 2017.04.md:74:    + Made Any.maxpairs/.minpairs use `cmp` and return Seq [5927186]
[02:16:58] <Util> 2018.06.md:54:    + Made .minpairs/.maxpairs about 25% faster [788cda94]
[02:17:01] <Util> 2018.12.md:32:    + Fixed semantics of `minpairs`/`maxpairs` (ignore undefined values) [7bf7a2c6]
[02:17:51] <Util> Unfortunatly, I don't have working Docker Rakudo that far back.
[02:25:07] *** Quits: casaca (~casaca@user/casaca) (Remote host closed the connection)
[02:30:40] <Util> There is a note in https://docs.raku.org/routine/cmp : "if $a eqv $b, then $a cmp $b always returns Order::Same." 
[02:30:59] <Util> but when I also specify a custom <eqv>, it does not get called.
[02:31:12] <lizmat> Util: do you have a golf?
[02:33:08] <Util> lizmat: just the one I posted shortly before you originally spoke:
[02:33:15] <thundergnat> https://colabti.org/irclogger/irclogger_log/raku?date=2021-07-28#l202
[02:33:16] <Util> m: class L {has Str $.l}; my $c = 0; multi sub infix:<cmp> (L $a, L $b) { say "called {++$c} times"; $b.l cmp $a.l }; my @a = map {L.new: :l($_) }, <a b c a b c a>; @a .= sort; my $z = @a[0] cmp @a[1]; # Why is my custom cmp not called by .sort?
[02:33:16] <camelia> rakudo-moar 74d7ff771: OUTPUT: «called 1 times␤»
[02:33:59] <Util> Maybe relevant parts of Roast:
[02:34:00] <Util> https://github.com/Raku/roast/blob/c07c5b9806a47ee2a692bc497bca761d0908aa6c/S03-sequence/nonnumeric.t#L69
[02:34:11] <Util> https://github.com/Raku/roast/blob/c07c5b9806a47ee2a692bc497bca761d0908aa6c/S03-sequence/nonnumeric.t#L8
[02:35:31] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[02:36:34] <Util> The golf of my actual use-case is:
[02:36:38] <Util> m: class L {has Str $.l}; my $c = 0; multi sub infix:<cmp> (L $a, L $b) { say "called {++$c} times"; $b.l cmp $a.l }; my @a = map {L.new: :l($_) }, <a b c a b c a>; say @a.minpairs; my $z = @a[0] cmp @a[1]; # Why is my custom cmp not called by .minpairs?
[02:36:38] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(1 => L.new(l => "b"))␤called 1 times␤»
[02:37:06] *** Joins: casaca (~casaca@user/casaca)
[02:38:54] <lizmat> Util: if you change the sort to "@a .= sort(&[cmp]);" it works
[02:39:17] <lizmat> it will then use the infix:<cmp> known in that scope
[02:39:35] <lizmat> I think this is actually one of the things that new-disp will fix
[02:40:07] <lizmat> the &[cmp] that .sort sees, does not include your added candidate
[02:40:34] <lizmat> I'm not sure whether that is actually a bug or not, but it *is* incovenient as hell  :-)
[02:41:19] <Util> I strongly view it as a bug.
[02:43:27] *** Quits: casaca (~casaca@user/casaca) (Remote host closed the connection)
[02:43:28] <lizmat> testing some stuff now
[02:43:34] <Util> I see a branch named `new-disp`, but I don't know it's history. Is there already a summary anywhere?
[02:44:06] <lizmat> https://6guts.wordpress.com/2021/04/15/raku-multiple-dispatch-with-the-new-moarvm-dispatcher/
[02:47:05] <Util> Oh, *that* one :^)   Thank you.
[02:52:14] <lizmat> ok, I have a fix, but it involves using CALLERS::
[02:52:52] <lizmat> and I'm pretty sure jnthn doesn't like that  :-)
[02:53:09] <lizmat> and it will affect performance for the "normal" case
[02:56:20] <codesections> Util: does the &wrap workaround I suggested address your usecase? (ugly though it might be)
[03:07:20] <lizmat> Util: have something that may fix this without too much performance loss for the common case
[03:07:37] <lizmat> will make a PR for it tomorrow, as I would like to have more eyes on it
[03:07:44] * lizmat is now off to bed :-)
[03:09:18] <Util> lizmat: Thanks! I will try to shore up my argument for how custom <cmp> should change the behaviours of other ops and methods.
[03:09:30] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[03:11:04] <Util> codesections: I should not use it for this usecase (exhibition code), but would consider it for real-world, 
[03:11:07] <Util> if I saw how to actually use it to change the comparator; 
[03:11:10] <Util> `->|` does not give me access to $a&$b to do the real calculation, and `->$a, $b` errors. 
[03:11:13] <Util> Thanks for your efforts, though!
[03:12:13] <Util> thundergnat, jdv: thank you for contributing!
[03:13:09] <codesections> (I think you could capture the args in |c and then check if they're $a & $b, but that'd get even uglier and it sounds like there will be a better way soon)  
[03:21:25] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:22:22] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[03:30:07] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[04:30:07] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:30:07] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:30:51] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[04:31:34] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[04:32:55] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:38] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de)
[04:43:19] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Read error: Connection reset by peer)
[04:43:54] *** Quits: codesections (~user@2600:1700:1650:1faf:ef37:8752:433c:db47) (Ping timeout: 240 seconds)
[04:49:13] *** Quits: jess (~jess@libera/staff/jess) ()
[04:53:09] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[05:15:19] *** Quits: thundergnat (~steve@2601:80:8600:2543:2129:3fcf:f399:9779) (Quit: Leaving)
[05:31:06] <moon-child> this makes the common lisp approach of using dynamic scoping for _all_ globals seem somewhat attractive
[05:34:02] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[06:34:02] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:34:02] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:34:02] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:34:02] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:34:02] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:34:02] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:34:02] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:34:02] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:34:02] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:02] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:34:28] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[06:34:29] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[06:34:38] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[06:34:53] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[06:35:03] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[06:35:49] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[06:36:10] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[07:35:48] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[07:36:09] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[07:36:45] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[07:36:54] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:36:58] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[07:37:01] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[07:37:11] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[07:53:34] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[08:08:48] *** Joins: frost-lab (~Guest92@143.110.154.65)
[08:36:15] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[08:36:21] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[08:46:43] *** Quits: frost-lab (~Guest92@143.110.154.65) (Ping timeout: 246 seconds)
[09:09:59] *** Joins: Guest92 (~Guest92@143.110.154.65)
[09:11:35] *** Quits: Guest92 (~Guest92@143.110.154.65) (Client Quit)
[09:31:23] <mykhal> btw is there something like Python's globals() and locals()
[09:31:24] <mykhal> ?
[09:35:31] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[09:36:40] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[09:49:52] *** Joins: Guest92 (~Guest92@143.110.154.65)
[09:52:29] *** Quits: Guest92 (~Guest92@143.110.154.65) (Client Quit)
[09:52:48] *** Joins: frost-lab (~frost-lab@143.110.154.65)
[10:00:15] <moritz> m: my $x; say MY::.keys
[10:00:16] <camelia> rakudo-moar 74d7ff771: OUTPUT: «($/ GLOBALish EXPORT $! $_ $x !UNIT_MARKER ::?PACKAGE $=pod $=finish $?PACKAGE $¢)␤»
[10:00:27] <moritz> m: say OUR::.keys
[10:00:28] <camelia> rakudo-moar 74d7ff771: OUTPUT: «()␤»
[10:00:33] <moritz> mykhal: ^^
[10:00:37] <Util> mykhal: I am heading for bed, but this is is a start: https://docs.raku.org/language/packages#index-entry-MY_(package)
[10:00:48] <Util> moritz++
[10:12:20] <mykhal> m: my $x = <x> ; say ( MY.?keys, MY.?x )
[10:12:20] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(() Nil)␤»
[10:14:26] * mykhal did not read lines above
[10:15:31] *** Joins: ufobat (~martin@dynamic-077-004-035-039.77.4.pool.telefonica.de)
[10:32:32] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:44:27] <mykhal> m: CORE::.keys.grep(/fix/).map(*.subst(/.* 'fix:' ['<'||'«'] (.*) ['>'||'»']/, {$0}))
[10:44:28] <camelia> rakudo-moar 74d7ff771: ( no output )
[10:44:33] <mykhal> m: say CORE::.keys.grep(/fix/).map(*.subst(/.* 'fix:' ['<'||'«'] (.*) ['>'||'»']/, {$0}))
[10:44:33] <camelia> rakudo-moar 74d7ff771: OUTPUT: «(^ ge (+) ^...^ && but ~~ ⊎ ~^ ∉ [; ] ~| ⚛-= ^^ so ⩵ > , ...^ ∈ =~= ÷ ne { } ∖ × = .. ⊂ {; } ⚛−= ** ⊃ & ⚛ ^ or − || +| +> ∘ ⊉ ?| != [ ] (>=) cmp ?^ ∋ before (<=) ~ %% ⊇ ⊈ o ! le ≽ ⚛= | and ^..^ (&) xor div min -…»
[10:58:22] <mykhal> nice, that would be like __builtins__ and beyond
[11:01:01] <Geth> ¦ doc: 2483b6a3ff | (Trey Harris)++ (committed by Juan Julián Merelo Guervós) | doc/Language/py-nutshell.pod6
[11:01:01] <Geth> ¦ doc: py-nutshell: Add how to enumerate in iteration
[11:01:01] <Geth> ¦ doc: 
[11:01:01] <Geth> ¦ doc: Resolves #3924.
[11:01:01] <Geth> ¦ doc: 
[11:01:01] <Geth> ¦ doc: Modified from suggestion in issue to include `kv()`’s other use case in maps,
[11:01:01] <Geth> ¦ doc: matching Python’s `dict.items()`.
[11:01:03] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2483b6a3ff
[11:01:04] <linkable6> Link: https://docs.raku.org/language/py-nutshell
[11:01:05] <Geth> ¦ doc: 1c844d668b | (Trey Harris)++ (committed by Juan Julián Merelo Guervós) | doc/Language/py-nutshell.pod6
[11:01:07] <Geth> ¦ doc: Copyediting
[11:01:09] <Geth> ¦ doc: 
[11:01:11] <Geth> ¦ doc: @JJ — I noticed that in this doc, `L<>`’s to routine docs are not in `C<>`’s, so appear as regular text instead of monospaced. This seems to be a case where there’s different styles on different pages—but should I submit a separate patch to change all these routine-link `L<>`’s to code font? Thanks.
[11:01:11] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[11:01:13] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/1c844d668b
[11:01:46] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:01:57] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:02:25] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[11:09:30] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 240 seconds)
[11:09:53] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[11:15:07] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[11:33:57] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[11:36:31] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[11:38:34] *** Quits: frost-lab (~frost-lab@143.110.154.65) (Ping timeout: 246 seconds)
[11:48:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:59:03] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de)
[12:02:04] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[12:55:04] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[12:56:28] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[13:09:25] <mykhal> m: my $six = 6 but "one" ;  say ( 0+$six, +$six )
[13:09:25] <camelia> rakudo-moar 681e3b5e8: OUTPUT: «(6 one)␤»
[13:10:26] <mykhal> .. i meant "six".. imperfectly over-edited, point is surprise, that 0+… and +… behaves different
[13:12:23] <moon-child> eh, six of one...
[13:12:52] <moon-child> serious answer:  +$six is the same as saying $six.Numeric, and since $six is already numeric, that's a no op
[13:13:13] <moon-child> where as 0+$six actually performs an addition, which constructs a _new_ object which doesn't know to but "one"
[13:13:14] <lizmat> and then the say calls .gist on that
[13:13:42] <moon-child> m: my $six = 6 but 'one'; say $six
[13:13:42] <camelia> rakudo-moar 681e3b5e8: OUTPUT: «one␤»
[13:34:23] <mykhal> m: say ( +RatStr.new(16/9, "16:9"), +(16/9 but "16:9") )
[13:34:24] <camelia> rakudo-moar 681e3b5e8: OUTPUT: «(1.777778 16:9)␤»
[13:34:54] *** Quits: renormalist (~ss5@renormalist.net) (Remote host closed the connection)
[13:35:12] <mykhal> m: say ( 9*RatStr.new(16/9, "16:9"), 9*(16/9 but "16:9") )
[13:35:12] <camelia> rakudo-moar 681e3b5e8: OUTPUT: «(16 16)␤»
[13:36:22] <mykhal> i guess but is not meant for such usage
[13:38:30] <mykhal> m: say (2 but "II").^name
[13:38:30] <camelia> rakudo-moar 681e3b5e8: OUTPUT: «Int+{<anon|1>}␤»
[13:45:56] <mykhal> my m: say so 2.Rat == 2 but 2/1
[13:46:03] <mykhal> m: say so 2.Rat == 2 but 2/1
[13:46:03] <camelia> rakudo-moar 681e3b5e8: OUTPUT: «Unexpected named argument 'value' passed␤  in block <unit> at <tmp> line 1␤␤»
[14:11:38] <mykhal> m: my \True = Bool::True but "Fake"; say True; say ~True
[14:11:38] <camelia> rakudo-moar 681e3b5e8: OUTPUT: «===SORRY!===␤No compile-time value for True␤»
[14:13:58] <mykhal> interesting, does no fail in my m 2021.07
[14:14:46] <moon-child> rather, it works at the repl but not otherwise
[14:15:20] <moon-child> m: EVAL ‘my \True = Bool::True but "Fake"; say True; say ~True’
[14:15:21] <camelia> rakudo-moar 681e3b5e8: OUTPUT: «True␤Fake␤»
[14:15:21] <mykhal> moon-child: right
[14:17:50] *** Joins: Frozenset (~Frozenset@176.220.112.141)
[14:22:50] <synthmeat> new rakudo-star is getting packaged up in the august, right?
[14:29:02] *** Joins: codesections (~user@2600:1700:1650:1faf:f4aa:8cf2:cc9a:4128)
[14:30:31] *** Quits: MasterDuke (~MasterDuk@176.248.62.150) (Quit: Connection closed)
[14:33:32] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[14:33:36] <lizmat> .tell Util ttps://github.com/rakudo/rakudo/pull/4484
[14:33:37] <tellable6> lizmat, I'll pass your message to Util
[14:34:19] <patrickb> synthmeat: Can you clarify the question?
[14:35:25] *** Joins: MasterDuke (~MasterDuk@176.248.62.150)
[14:36:56] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[14:44:04] <synthmeat> patrickb: i think i read somewhere rakudo-star gets packaged up quarterly. like rakudo is monthly, i guess.
[14:45:13] <patrickb> synthmeat: The release process wrt the star bundle is currenty undergoing a refactor. It's not entirely clear if we want to stick to the release cycle.
[14:46:41] <patrickb> Currently there are monthly releases of the Windows MSI installer for star. The star source release is being worked on. When that work will finish, and what release cycle we'll commit to has not been decided yet.
[14:50:28] <synthmeat> okie, thanks for the info. lots of refactors recently, judging by skimming liz's weeklies.
[14:52:04] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[15:06:40] *** Quits: juanfra (~juanfra@user/juanfra) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: cnx (~cnxhaloge@2001:470:69fc:105::61f) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: littlebenlittle[ (~littleben@2001:470:69fc:105::1eca) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: rba[m] (~rba@2001:470:69fc:105::c2d8) (Quit: Bridge terminating on SIGTERM)
[15:06:50] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[15:09:10] *** Joins: juanfra (~juanfra@user/juanfra)
[15:13:05] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[15:13:05] *** Joins: cnx (~cnxhaloge@2001:470:69fc:105::61f)
[15:13:05] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[15:13:17] *** Joins: littlebenlittle[ (~littleben@2001:470:69fc:105::1eca)
[15:13:17] *** Joins: aolko[m] (~aolko93ma@2001:470:69fc:105::68ec)
[15:13:18] *** Joins: rba[m] (~rba@2001:470:69fc:105::c2d8)
[15:13:19] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[15:19:11] *** Quits: Frozenset (~Frozenset@176.220.112.141) (Ping timeout: 250 seconds)
[15:37:58] *** Joins: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:43:44] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:44:04] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[15:45:44] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:46:03] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[15:47:43] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:48:02] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[15:50:05] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:50:24] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[15:52:04] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:52:23] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[15:56:05] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:56:24] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[15:58:04] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:58:23] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[16:00:03] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:00:22] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[16:02:02] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:02:21] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[16:04:01] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:04:20] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[16:06:00] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:06:19] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[16:06:23] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:32:47] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:34:43] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:44:23] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de)
[16:48:05] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[16:54:11] *** Joins: Frozenset (~Frozenset@176.220.112.141)
[17:35:29] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:40:25] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[18:00:13] *** Quits: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[18:02:02] *** simcop2387 is now known as mycroft2387
[18:02:37] *** mycroft2387 is now known as simcop2387
[18:08:15] *** Joins: stoned75 (~seb@pop.92-184-102-237.mobile.abo.orange.fr)
[18:08:58] <Geth> ¦ doc: 946431335f | (Stoned Elipot)++ | doc/Type/Int.pod6
[18:08:58] <Geth> ¦ doc: Fix typo
[18:08:58] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/946431335f
[18:09:01] <linkable6> Link: https://docs.raku.org/type/Int
[18:34:11] *** Joins: renormalist (~ss5@renormalist.net)
[18:42:28] *** Quits: renormalist (~ss5@renormalist.net) (Quit: leaving)
[18:42:43] *** Joins: renormalist (~ss5@renormalist.net)
[18:54:17] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[19:46:51] *** Quits: ufobat (~martin@dynamic-077-004-035-039.77.4.pool.telefonica.de) (Ping timeout: 258 seconds)
[19:47:55] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de)
[20:02:57] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-158.092.218.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[20:04:07] *** Joins: Doc_Holliwood (~holli@dslb-084-059-122-144.084.059.pools.vodafone-ip.de)
[20:14:28] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:16:29] <Geth> ¦ doc: 9bc7589a9a | Coke++ | doc/Language/py-nutshell.pod6
[20:16:29] <Geth> ¦ doc: prefer array-like
[20:16:29] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/9bc7589a9a
[20:16:29] <Geth> ¦ doc: f75ebf4d15 | Coke++ | xt/pws/code.pws
[20:16:29] <Geth> ¦ doc: learn new word used in code
[20:16:30] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/f75ebf4d15
[20:16:30] <Geth> ¦ doc: ad022d4f01 | Coke++ | doc/Language/py-nutshell.pod6
[20:16:31] <Geth> ¦ doc: whitespace
[20:16:32] <linkable6> Link: https://docs.raku.org/language/py-nutshell
[20:16:33] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/ad022d4f01
[21:14:28] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:14:28] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:16:22] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[21:48:22] *** Joins: ufobat (~martin@dynamic-077-004-035-039.77.4.pool.telefonica.de)
[22:06:07] *** Quits: Frozenset (~Frozenset@176.220.112.141) (Quit: Ping timeout (120 seconds))
[22:09:38] *** Joins: Frozenset (~Frozenset@176.220.112.141)
[22:32:55] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:42:16] *** Quits: Frozenset (~Frozenset@176.220.112.141) (Ping timeout: 256 seconds)
[23:05:25] *** Quits: ufobat (~martin@dynamic-077-004-035-039.77.4.pool.telefonica.de) (Ping timeout: 258 seconds)
[23:15:35] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[23:34:56] <kybr> m: for 1,2,3,4,5 -> $a, $b { say "$a-$b" }
[23:34:56] <camelia> rakudo-moar 62e291f09: OUTPUT: «1-2␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤3-4␤»
[23:36:03] <kybr> what's a way to walk through the list 1,2,3,4,5 such that we get pairs like 1,2 2,3 3,4 4,5 instead of 1,2 3,4 5!
[23:38:50] <moon-child> m: .say for (1..5).rotor(2 => -1)
[23:38:50] <camelia> rakudo-moar 62e291f09: OUTPUT: «(1 2)␤(2 3)␤(3 4)␤(4 5)␤»
[23:40:52] <moon-child> 2 means take batches of 2 items; -1 means step forward by 2-1 each time
[23:57:24] <codesections> m: .say for (1..5).&{$_ Z .skip} # also works
[23:57:24] <camelia> rakudo-moar 62e291f09: OUTPUT: «(1 2)␤(2 3)␤(3 4)␤(4 5)␤»
