[00:01:38] <EvanR> was that on day twenty-x of advent of code last month
[00:02:51] <monochrom> Allow me to transform and distort your problem.
[00:03:33] *** Quits: Topsi (~Tobias@dyndsl-095-033-093-212.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[00:03:46] <monochrom> We can always reduce set theory to propositional logic,  (x or C or D) implies (y or z or F).
[00:09:18] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:09:18] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[00:09:47] <monochrom> Then the resolution algorithm says, if you want to find a way to satisfy that, give me the negation instead, (x or C or D) and not (y or z or F).  If the negation is doomed to be false, I will find a counterexample (therefore a solution to the unnegated sentence), or die trying.
[00:11:54] <monochrom> This plot may or may not work. But we'd never know if I didn't suggest it.
[00:12:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[00:13:23] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[00:14:44] *** Quits: benin (~benin@183.82.176.241) (Quit: The Lounge - https://thelounge.chat)
[00:15:12] <byorgey> monochrom: oh, very good suggestion, thanks!  The connection to propositional logic had not yet occurred to me.
[00:15:16] *** Joins: gentauro (~gentauro@user/gentauro)
[00:15:46] *** Joins: Guest72 (~Guest72@82-132-214-147.dab.02.net)
[00:15:59] <byorgey> EvanR: no, this is something I think I'm going to need for implementing a certain type checker.
[00:17:25] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[00:17:55] <byorgey> monochrom: hmm, one problem is that just gives me T/F values for the variables, but I want values corresponding to sets of constants.  e.g. one solution for this example would be  x -> {}, y -> {C,D}, z -> {}
[00:18:08] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[00:19:09] <monochrom> Yeah, in truth, predicates are involved.  A set S is a predicate \v -> is v in S?
[00:19:36] <monochrom> (x(v) or C(v) or D(v)) implies (y(v) or z(v) or F(v)).
[00:19:59] <monochrom> Fortunately, resolution is about that, too, finding a value for v.
[00:20:30] <EvanR> that kind of reminds me of clicking on a screen painted with monoids and wanting to know which one you clicked on
[00:21:20] <byorgey> EvanR: https://diagrams.github.io/blog/2015-04-30-GTK-coordinates.html ?  =)
[00:22:04] <EvanR> that actually exists
[00:22:13] <monochrom> onoes
[00:23:56] *** Joins: cemguresci (~cemguresc@2001:a61:11ff:a001:9a1b:dd7d:413d:f699)
[00:23:57] <byorgey> monochrom: hmm, interesting, I have not seen resolution in the context of second-order logic before.
[00:24:07] *** cemguresci is now known as cemg
[00:29:48] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:30:47] <Guest72> A haskell set is a Hask of course
[00:32:01] <Guest72> You can't ask are you undecidable
[00:35:41] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:36:18] *** Joins: Guest|58 (~Guest|58@host-137-205-1-17.warwick.ac.uk)
[00:36:46] *** Quits: Guest|58 (~Guest|58@host-137-205-1-17.warwick.ac.uk) (Client Quit)
[00:37:45] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 250 seconds)
[00:38:10] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:41:55] *** Joins: gdd (~gdd@129.199.146.230)
[00:43:01] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[00:45:20] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[00:46:03] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e155922c761977fca48.dip0.t-ipconnect.de)
[00:46:03] *** Joins: acidjnk (~acidjnk@p200300d0c7271e155922c761977fca48.dip0.t-ipconnect.de)
[00:46:34] <tomsmeding> monochrom: sounds like the problem was finding x,y,z, not v in your re-written version
[00:48:28] <int-e> Guest72: This is very off season, but would you write Huskell programs for Halloween?
[00:50:18] <Guest72> Sure
[00:51:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:55:43] *** Quits: k`` (~user@152.1.137.158) (Remote host closed the connection)
[00:59:30] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:01:42] *** Joins: lechner (~lechner@debian/lechner)
[01:04:53] *** Quits: michalz (~michalz@185.246.204.126) (Remote host closed the connection)
[01:05:15] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[01:10:40] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:11:09] *** Hash is now known as PCLoadLetter
[01:15:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:15:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:15:03] *** Joins: wroathe (~wroathe@user/wroathe)
[01:16:13] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 240 seconds)
[01:23:00] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:23:47] *** Joins: ymirhotfoot (~ymirhotfo@user/ymirhotfoot)
[01:25:33] <random-jellyfish> can I ask questions related to the euterpea music library here?
[01:27:26] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:33:54] <monochrom> Yes but probably very few of us can answer.
[01:37:51] <random-jellyfish> ##MusicTheory is invite only for some reason
[01:37:58] <random-jellyfish> would've been a better channel
[01:38:24] <glguy> no, it's not invite only
[01:38:53] <glguy> but it is *empty* so not much better
[01:39:20] <random-jellyfish> I was automatically banned from it when I joined: × ChanServ kicked you from ##MusicTheory (You are not authorized to be on this channel)
[01:39:25] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:40:06] <random-jellyfish> anyway
[01:40:09] <glguy> ah, I guess the founders decided to close it
[01:40:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:40:19] <random-jellyfish> [11:56:59 PM] <random-jellyfish> I have the following rhythm: qn qn den den qn en qn den den en
[01:40:19] <random-jellyfish> [11:57:32 PM] <random-jellyfish> where qn=quarter note, en=eight note, den=dotted eighth note
[01:40:20] <random-jellyfish> [11:57:42 PM] <random-jellyfish> what's the time signature for it?
[01:40:37] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[01:41:26] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:41:41] <polyphem> is it 11/4 ?
[01:42:37] <monochrom> Damn those prime-numbered time signatures like 5/4, 7/4, 11/4, 13/8...
[01:43:10] <monochrom> Tchaikovsky and/or Mahler had some 5/4 sheninigans...
[01:43:51] <polyphem> 16/8 or 8/4
[01:44:30] <random-jellyfish> yeah the fractions add up to 2/1
[01:44:32] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[01:45:06] <random-jellyfish> so it's probably 16/8 or 8/4
[01:45:24] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 256 seconds)
[01:46:04] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[01:46:32] <polyphem> or 4/4 with "borrowed time"
[01:47:01] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[01:47:09] <polyphem> two bars of 4/4 
[01:47:42] <hpc> i like my time signatures with a positive weyl curvature
[01:48:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:50:43] <random-jellyfish> "borrowed time"? is that an actual concept in music?
[01:51:28] <random-jellyfish> you can't make a "clean" 4/4 bar with those notes in that order
[01:51:43] *** PCLoadLetter is now known as Hash
[01:52:15] <Clint> pick-up notes are an actual concept in music
[01:52:39] <polyphem> random-jellyfish: https://www.youtube.com/watch?v=kCQfekVrSAA
[01:53:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:56:25] <random-jellyfish> thanks!
[01:56:50] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:58:00] *** Quits: ymirhotfoot (~ymirhotfo@user/ymirhotfoot) (Quit: Client closed)
[02:01:02] <EvanR> in Data.Category you have this class called Category for types of kind * -> * -> *. Say you have some type ctor f which is a Category. Exactly what "category theory category" is this referring to
[02:01:49] <EvanR> er, Control.Category
[02:02:16] <EvanR> is f literally some category, or what
[02:02:25] <dolio> It's a category whose objects are types, and whose arrows are given by the instance.
[02:03:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:03:32] <awpr> IIRC it's poly-kinded, so actually the instance head is `cat :: k -> k -> Type`.  then, for a given instance, the objects are the "types" of kind `k`, and the morphisms from `a :: k` to `b :: k` are the values of type `cat a b`
[02:04:10] <awpr> and the `Category` instance methods provide the identity morphisms and composition
[02:05:47] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:06:00] *** Joins: Akiva (~Akiva@user/Akiva)
[02:06:29] <EvanR> oh that makes sense now
[02:07:01] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[02:07:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:07:31] <EvanR> while fmap lifts a function from a to b to f a to f b, (.) does combining of morphisms directly
[02:08:22] <EvanR> and the category objects are really determined by k
[02:09:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:10:06] <EvanR> so f is like the arrow, and we don't have a name for the category itself
[02:14:58] *** Quits: ubert1 (~Thunderbi@p200300ecdf0994f8385203c98e392e3c.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[02:16:31] <Raito_Bezarius> I'm trying to do simple i18n with Hakyll, so I tried to use Shakespeare, but I'm unsure how to understand https://hackage.haskell.org/package/shakespeare-2.0.25.1/docs/Text-Shakespeare-I18N.html#mkMessage function which seems to create instances
[02:16:43] <Raito_Bezarius> can I call it at the top level of my application to generate my instances or does it need to be scoped?
[02:17:04] <Raito_Bezarius> the Q [Dec] seems to be related to QuasiQuoter stuff, do I need to enable QuasiQuoter in my file?
[02:18:06] <Raito_Bezarius> and if someone have better suggestions to get type-based translations with a gettext-style, without getting onboard Yesod or other framework, that would be awesome :)
[02:20:20] *** Joins: raoul (~raoul@95.179.203.88)
[02:25:18] <Raito_Bezarius> ha, it seems like it is required to put under some instance Yesod App where ...
[02:26:36] *** Quits: raoul (~raoul@95.179.203.88) (Quit: The Lounge - https://thelounge.chat)
[02:27:13] *** Joins: raoul (~raoul@95.179.203.88)
[02:27:29] <glguy> Raito_Bezarius: I don't know much about Hakyll, but if you're looking at Q [Dec] stuff, the search term is TemplateHaskell. QuasiQuoters are related to but not this
[02:27:42] <Raito_Bezarius> Alright, thanks glguy !
[02:28:12] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[02:29:21] <glguy> Raito_Bezarius: but if mkMessage generates instances, then it would need to be at the top-level of your module
[02:29:49] <glguy> and mkMessage does appear to generate data type declarations and instance declarations, so top-level
[02:30:31] <Raito_Bezarius> but hm whenever I do that, it seems like hls is complaining:
[02:30:34] <Raito_Bezarius> [typecheck] [E] Parse error: module header, import declaration
[02:30:35] <Raito_Bezarius> or top-level declaration expected.
[02:30:56] <glguy> Did you turn on the TemplateHaskell extension in that module?
[02:31:31] <Raito_Bezarius> indeed, that did the trick… thanks a lot glguy !
[02:31:58] <Raito_Bezarius> that's really super neaaaat
[02:34:38] <hololeap> I'm working on a long-running program that will need to have suspend/resume functionality. I've heard that ContT allows for this, but I've also heard that it has issues and should be avoided. Thoughts?
[02:35:26] <glguy> suspend/resume like all one process or across multiple processes?
[02:35:30] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:36:34] <hololeap> just one process. it's going to have an updating work queue that should be saved so that it can resume if it stops for whatever reason
[02:36:35] <jkaye> What issues have you heard about with ContT? Interested just because I haven't heard that before
[02:36:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:36:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[02:37:08] <hololeap> jkaye: I honestly don't remember. I've never used it and what I read was probably years ago when I didn't understand much
[02:37:33] <EvanR> you want the work queue persisted to disk and reloaded after the program reboots?
[02:37:49] <hololeap> yeah
[02:38:20] <glguy> oh, that's "multiple processes" then
[02:38:35] <hololeap> oh, I see what you meant now, glguy
[02:38:37] <glguy> ContT probably isn't related to your answer
[02:39:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[02:39:39] <hololeap> ok, yeah as I think of it StateT makes sense to use. but then what _is_ ContT useful for?
[02:39:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:39:52] <glguy> StateT isn't particularly related, either
[02:40:13] <glguy> You just need your work queue to be serializable and then save/restore it to/from disk when you need to do that
[02:40:27] <glguy> so don't save functions in it, for example
[02:41:08] <EvanR> unless you want to get fancy with higher order abstract syntax or something xD
[02:41:20] <hololeap> really? I would think that `StateT WorkQueue IO a` would make sense, where you save the queue to disk each time it updates
[02:41:20] <dolio> ContT, in particular, is just notation for using higher-order functions, so it's not going to help with serializing things to disk.
[02:41:37] <glguy> hololeap: StateT isn't doing anything there, you just happen to be using it
[02:41:49] <glguy> WorkQueue being serializable or not is what matters
[02:42:02] <hololeap> sure
[02:42:11] <EvanR> implement working Read and Show and you're golden xD
[02:42:42] <EvanR> *YMMV
[02:43:13] <hololeap> haha. I don't know if I'll ever find a use for ContT. it just never seems to fit anywhere
[02:44:16] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[02:44:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:45:04] <hpc> i almost had a use for it once, but it turns out i needed to short-circuit the start of the computation instead, and switched to some goofy StateT IO thing
[02:45:19] <hpc> someday though...
[02:45:32] <hololeap> lol so it isn't just me then
[02:45:46] <hpc> knowing it is more important than actually using it though
[02:46:05] <monochrom> Firstly it depends on your answer to "resume from what?".  For example, resuming from disk is very different from resuming from memory.
[02:46:24] <hpc> you can recognize the continuations in ParsecT and such, once you know the "base case" of ContT
[02:46:48] <hpc> https://hackage.haskell.org/package/parsec-3.1.15.0/docs/src/Text.Parsec.Prim.html#ParsecT - the consumed/empty ok/err stuff
[02:47:08] <hpc> that's just a really elaborate (stuff -> m b) -> m b
[02:47:22] <hpc> foralled and etc
[02:47:29] *** Joins: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net)
[02:47:53] *** infinity0 is now known as Guest9673
[02:47:53] *** Quits: Guest9673 (~infinity0@occupy.ecodis.net) (Killed (zirconium.libera.chat (Nickname regained by services)))
[02:48:07] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[02:48:37] <hololeap> ok, sure. I've been using and slowly grokking LogicT, which someone pointed out is `forall r. ContT r (ContT r)`, if I remember correctly
[02:49:20] <hpc> oh, another funny thing to note
[02:49:25] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:49:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:49:34] <hpc> there's no difference between s and u, in that ParsecT definition
[02:49:55] <hpc> just that every function on it has Stream s m t in the class context
[02:50:38] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:50:42] <jackdk> ContT is good for taming callback pyramids
[02:51:06] <hpc> yeah, i think if i had ever messed with ghcjs i would have a dozen uses for it
[02:51:35] <hpc> webapps are callback city
[02:53:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:53:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:53:05] *** Joins: wroathe (~wroathe@user/wroathe)
[02:53:12] <hololeap> doesn't FRP do a better job of taming callbacks, by making them unneeded?
[02:54:17] <monochrom> In the case of ParsecT and LogicT, you are looking at more Codensity.  "Codensity m a" = forall r. (a -> m r) -> m r
[02:54:37] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[02:54:37] <monochrom> ContT lacks that forall over r.
[02:55:31] <monochrom> If you like to think of ContT and then slaps on "forall r", that's OK, but the extra forall makes a whole lot of difference.
[02:56:28] <hpc> heh, that's true
[02:56:32] <hpc> like comparing ST to State
[02:57:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:57:21] <hololeap> "Abuse of the Continuation monad can produce code that is impossible to understand and maintain." -- this is probably why I avoided it, jkaye
[02:57:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:57:49] <monochrom> The benefit of the extra forall can be explained by looking at how System F manages to provide all algebraic data types.
[02:58:25] <monochrom> Suppose my ADT is "data T = C0 | C1 Int | C2 T T". 
[02:58:33] <hololeap> it's the only monad that mentions abuse in the docs
[02:58:55] <glguy> don't get too comfortable, though; you can write unmaintainable code no matter what libraries you use
[02:59:22] <monochrom> In System F, it becomes "forall r. (r, Int, (r,r)) -> r", or after currying my tuples, "forall r. r -> Int -> (r -> r -> r) -> r".
[02:59:35] *** hays is now known as h_
[02:59:35] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:59:36] <hpc> glguy: heh, as proof i submit acme-php
[02:59:57] <hpc> zero-import horribleness
[03:00:22] *** Quits: puke (~puke@user/puke) (Quit: puke)
[03:00:51] <hololeap> "ContT is not a functor on the category of monads, and many operations cannot be lifted through it." -- this is also one of the other thorns that scared me. it reminds me of ListT's warnings
[03:00:58] *** Joins: AlexNoo_ (~AlexNoo@178.34.151.107)
[03:01:13] *** Joins: cheater (~Username@user/cheater)
[03:01:29] <monochrom> If you do a similar decoding to ParsecT, you can recover the original Leijen-Meijer "4 cases: {consumed, unconsumed} x {OK, error}" ADT in the original parsec.
[03:01:57] <monochrom> If you do a similar decoding to LogicT, you can recover the ADT of "ListT done right".
[03:02:35] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[03:02:44] <monochrom> So LogicT and today's ParsecT are just doing a CPS or System-F encoding of very vanilla ADTs.
[03:03:15] <hololeap> isn't that called church encoding?
[03:03:27] <monochrom> Why do they do it?  The answer is efficiency, or believed efficiency.
[03:04:13] <monochrom> Because which way is more efficient is pretty sensitive to which GHC version you use.  Very old GHC, probably ADTs are slower.
[03:04:34] <monochrom> Today's GHC? I don't think anyone has any actual data. I bet ADTs are not slower.
[03:04:35] *** Quits: AlexZenon (~alzenon@178.34.162.219) (Ping timeout: 256 seconds)
[03:04:37] *** Quits: Alex_test (~al_test@178.34.162.219) (Ping timeout: 240 seconds)
[03:04:44] *** Quits: AlexNoo (~AlexNoo@178.34.162.219) (Ping timeout: 256 seconds)
[03:05:13] <dolio> That's not a very good bet.
[03:05:27] <hpc> also would you want strict data or lazy data?
[03:05:43] <hololeap> I've wondered why there were church-encoded versions of e.g. Free and why it would affect performance
[03:06:43] <monochrom> Oleg would say that the untyped-lambda-calculus version is Church encoding, the System-F version is Böhm-Berarducci encoding.
[03:07:07] <dolio> It's kind of like betting that (co)yoneda is no longer faster in certain use cases, because GHC somehow figures out how to fuse fmap at runtime, without inlining.
[03:08:11] <jackdk> I remember seeing a talk presented by someone who worked at Seek, saying they used to use the `data Free f a = Return a | Free (f (Free f a))`, had poor performance, and switched to the "Church Encoded" version. This would've been 2015 or so, though.
[03:08:46] *** Joins: Alex_test (~al_test@178.34.151.107)
[03:08:49] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-16.elisa-laajakaista.fi) (Quit: Leaving.)
[03:08:49] *** Joins: AlexZenon (~alzenon@178.34.151.107)
[03:10:07] <hololeap> if anyone can point me to something that goes into more detail on this, I'd be grateful: https://stackoverflow.com/a/9806770
[03:11:04] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:12:03] <hololeap> otherwise I'll just continue reading what pops up in a search
[03:12:15] *** Joins: mikoto-chan (~mikoto-ch@185.25.79.189)
[03:12:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:13:36] <monochrom> Yikes haha "aka Visitor Pattern"
[03:15:05] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Quit: Leaving)
[03:15:12] <jackdk> that's an interesting parallel that I'd never noticed before
[03:15:35] *** Joins: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net)
[03:16:15] <monochrom> Yeah, "yikes" means "I see it's true but oh god".  ("haha" means "god help us")
[03:16:43] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Client Quit)
[03:16:47] *** Quits: cemg (~cemguresc@2001:a61:11ff:a001:9a1b:dd7d:413d:f699) (Quit: Leaving)
[03:17:00] *** Joins: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net)
[03:17:53] <jackdk> hololeap: https://slides.yowconference.com/yowlambdajam2017/Humphries-ContinuationsAllTheWayDown.pdf this shows the performance angle somewhat, but may be unintelligible if you didn't see the actual presentation (a recording of which never seemed to be published)
[03:18:48] <jackdk> but there are at least benchmarks, and if you trace the reductions of DList appends or whatever, you can see the right-association pop out. I remember going home after the talk and grabbing pen and paper to convince myself that it worked
[03:22:51] <dolio> Encoding the data type isn't always better, of course. They're bad for repeatedly peeling off just the outermost layer.
[03:23:18] <dolio> Unless you get really elaborate with the encodings.
[03:23:50] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:5835:5767:1aa7:b5ec) (Quit: Leaving)
[03:24:11] <hololeap> jackdk: the syntax trees are neat, I think I might get something out of those slides
[03:24:26] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:24:34] <dolio> Point being, you need to know what you're optimizing for.
[03:27:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[03:29:56] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[03:36:27] <Axman6> hololeap:  monochrom: jackdk: https://ibb.co/2KmCCHF
[03:37:13] <jackdk> Axman6...
[03:37:15] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:5835:5767:1aa7:b5ec)
[03:38:24] <monochrom> Haha congrats
[03:39:24] <Axman6> f it, it's going on reddit
[03:39:35] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e155922c761977fca48.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:39:35] *** Quits: acidjnk (~acidjnk@p200300d0c7271e155922c761977fca48.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:39:35] <hololeap> heh
[03:39:45] <monochrom> There is also a connection with dependency injection, may I add...
[03:40:13] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687) (Ping timeout: 240 seconds)
[03:41:10] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:41:39] <Axman6> Image posts not allowed :'( don't they know I have @ in here!
[03:42:59] <monochrom> It is still draft but my https://www.vex.net/~trebla/haskell/abs-type-param.html opens with a church encoding example but I relate it to dependency injection instead. >:)
[03:44:06] *** Joins: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com)
[03:45:40] <dolio> This 100 year old thing is just a more general version of this much newer thing I came up with because I didn't know about the much older thing. :þ
[03:46:01] <jackdk> that's my favourite genre of conference talks
[03:46:27] <jackdk> particularly if the speaker invented the less general thing, and you get to follow along the path of dawning realisation
[03:47:52] <hpc> when that happens to me i just think "oh phew, it was a good idea after all"
[03:48:39] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:48:49] <Axman6> so I used church encoding yesterday to try and speed up somecode that would allocate IORefs when really State should be enough. I was surprised to find that the IORefs were both faster and ended up allocating less: https://paste.tomsmeding.com/h6aIktOI
[03:49:55] *** Joins: puke (~puke@user/puke)
[03:50:06] <Axman6> using the normal newtype S s a = S (a -> IO (a,s)) was even worse
[03:50:13] *** Quits: puke (~puke@user/puke) (Client Quit)
[03:50:50] <Axman6> edwardk: ^ I came up with another way to write memo with discrimination, but I'm surprised it performed worse than the IORef version
[03:54:08] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Remote host closed the connection)
[03:54:23] <jackdk> Axman6: you gonna PR this thing at any point?
[03:54:36] <Axman6> perhaps...
[03:56:29] <jackdk> Does this monadic variant of `local` have a common name? `localM :: MonadReader r m => (r -> m r) -> m a -> m a`
[03:57:13] <[itchyjunk]> can i use something and define after in list comprehension? [y | y <- x, x <- xs] ?
[03:57:17] *** Quits: hud (~hud@uwyo-129-72-161-67.uwyo.edu) (Ping timeout: 256 seconds)
[03:57:20] <Axman6> why do I want to call that locum
[03:57:31] <Axman6> no
[03:58:57] <Axman6> "locum-tenens:  A person, especially a physician or cleric, who substitutes temporarily for another." seems apt
[03:59:10] <[itchyjunk]> can i nest it ? [y | y <- [x | x <- xs]]
[03:59:37] <Axman6> yes
[03:59:40] <Axman6> uh
[03:59:47] *** Joins: puke (~puke@user/puke)
[03:59:49] <Axman6> I mean, that will do something, but not the same thing
[03:59:56] <[itchyjunk]> :<
[04:00:20] <Axman6> in the firt one, xs :: [[a]], in the second it onlt needs to be [a] because the inner comprehension is id
[04:00:48] <Axman6> > ( \xs -> [x | x <- xs]) [1..10]
[04:00:50] <lambdabot>  [1,2,3,4,5,6,7,8,9,10]
[04:02:38] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:35fa:dcbe:dd4e:5a43)
[04:06:07] *** Joins: notzmv (~zmv@user/notzmv)
[04:07:45] <jackdk> Axman6: I dunno why you want to call it locum, but given the amazonka refactor I'm considering, having `localEnvM :: MonadAmazonka m => (Env -> m Env) -> m a -> m a` is going to be so useful that I think it's worth naming  (consider `localEnvM (fromAssumedRole "arn:aws:..." "assumed-role") $ do ...`)
[04:09:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:09:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:09:53] *** Joins: wroathe (~wroathe@user/wroathe)
[04:10:22] <Axman6> looks lovely
[04:10:36] <Axman6> and i think the name is fine
[04:10:36] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[04:11:27] <jackdk> it's like almost under the Fairbairn threshold, but its implementation is a little awkward
[04:11:30] <monochrom> locum tenet: A person whose time is backwards temporarily >:)
[04:11:41] <hololeap> prependKleisli
[04:12:02] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 240 seconds)
[04:12:28] <hpc> monochrom: coforwards
[04:12:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[04:13:09] *** Joins: burnsidesLlama (~burnsides@client-8-69.eduroam.oxuni.org.uk)
[04:13:47] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[04:14:15] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[04:15:30] <hololeap> appendMonadicEndomorphism
[04:16:17] <hololeap> oh, I guess it would still be prepending
[04:16:26] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 252 seconds)
[04:17:50] *** Quits: burnsidesLlama (~burnsides@client-8-69.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[04:18:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:20:00] *** Joins: shapr (~user@2601:7c0:c202:5190:cc12:44b:f211:c38f)
[04:20:49] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[04:29:32] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Read error: Connection reset by peer)
[04:31:22] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[04:41:17] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:38] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:87d8:fa0a:4d3d:df57)
[04:42:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com) (Ping timeout: 240 seconds)
[04:43:54] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:47:24] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:47:46] *** Joins: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com)
[04:53:29] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:80ee:56b1:c7cc:d16d) (Quit: Textual IRC Client: www.textualapp.com)
[04:53:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d171:6c14:e395:f91b) (Ping timeout: 240 seconds)
[04:57:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com) (Ping timeout: 240 seconds)
[05:00:46] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[05:04:33] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.4)
[05:05:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:35fa:dcbe:dd4e:5a43) (Ping timeout: 240 seconds)
[05:05:24] <albet70> how to get all k from Map k v?
[05:05:48] <Axman6> @hoogle keys
[05:05:48] <lambdabot> Data.IntMap.Internal keys :: IntMap a -> [Key]
[05:05:48] <lambdabot> Data.IntMap.Lazy keys :: IntMap a -> [Key]
[05:05:48] <lambdabot> Data.IntMap.Strict keys :: IntMap a -> [Key]
[05:05:56] <Axman6> @hoogle Map k a -> [k]
[05:05:57] <lambdabot> Data.Map.Internal keys :: Map k a -> [k]
[05:05:57] <lambdabot> Data.Map.Lazy keys :: Map k a -> [k]
[05:05:57] <lambdabot> Data.Map.Strict keys :: Map k a -> [k]
[05:07:11] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[05:09:58] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[05:11:05] <albet70> \k -> lookup k target == flip lookup target?
[05:12:14] <Axman6> yep
[05:12:24] <albet70> how to $ to express this?
[05:12:33] <Axman6> or (`lookup` target)
[05:12:49] <Axman6> I don't understand the question
[05:13:03] <albet70> "Axman6 :or (`lookup` target)", could with $?
[05:14:04] <Axman6> I don't know what that means. what code are you trying to write that doesn't work?
[05:15:18] <albet70> never mind, just a little wounder if $ can change the argument order
[05:16:01] <Axman6> :t ($)
[05:16:02] <lambdabot> (a -> b) -> a -> b
[05:17:35] <albet70> :t const
[05:17:37] <lambdabot> a -> b -> a
[05:26:59] <ephemient> :t \target -> ($ target) . lookup
[05:27:00] <lambdabot> Eq a => [(a, b)] -> a -> Maybe b
[05:27:55] <ephemient> so sure, you can find a way to express (flip lookup target) using ($), but it doesn't feel natural
[05:32:27] <monochrom> It's pretty contrived.
[05:35:52] *** Joins: ub (~Thunderbi@p200300ecdf0994f52db7d35c756e5286.dip0.t-ipconnect.de)
[05:36:57] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:37:22] *** Quits: ubert (~Thunderbi@p200300ecdf0994f82db7d35c756e5286.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:37:22] *** ub is now known as ubert
[05:38:52] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[05:43:34] *** Joins: califax- (~califax@user/califx)
[05:43:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:44:39] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:44:40] *** califax- is now known as califax
[05:48:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:87d8:fa0a:4d3d:df57) (Ping timeout: 268 seconds)
[05:52:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:52:14] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:52:14] *** Joins: wroathe (~wroathe@user/wroathe)
[05:53:18] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:5835:5767:1aa7:b5ec) (Remote host closed the connection)
[05:54:24] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:55c5:5707:fdcb:78cd)
[05:58:02] *** Joins: neurocyte09175 (~neurocyte@IP-045143079193.dynamic.medianet-world.de)
[05:58:03] *** Quits: neurocyte09175 (~neurocyte@IP-045143079193.dynamic.medianet-world.de) (Changing host)
[05:58:03] *** Joins: neurocyte09175 (~neurocyte@user/neurocyte)
[05:59:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:00:15] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:00:15] *** neurocyte09175 is now known as neurocyte0917
[06:00:20] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[06:00:37] *** Quits: xff0x (~xff0x@2001:1a81:5310:700:28af:ed1a:1e0a:acc) (Ping timeout: 240 seconds)
[06:02:37] *** Joins: xff0x (~xff0x@2001:1a81:534d:9900:3a80:4bac:7552:9848)
[06:03:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:03:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:03:12] *** Joins: wroathe (~wroathe@user/wroathe)
[06:03:47] *** Joins: cheater (~Username@user/cheater)
[06:04:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:07:17] *** Joins: raym (~raym@user/raym)
[06:09:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[06:13:16] *** Joins: xsperry (~xs@user/xsperry)
[06:13:26] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[06:23:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:28:59] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:29:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:29:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:34:49] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[06:35:32] *** Quits: mikoto-chan (~mikoto-ch@185.25.79.189) (Ping timeout: 256 seconds)
[06:37:34] *** Joins: mikoto-chan (~mikoto-ch@185.25.79.189)
[06:37:39] *** Quits: jushur (~human@user/jushur) (Quit:  ¯\_(ツ)_/¯)
[06:38:25] *** Joins: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e)
[06:39:07] <BrokenClutch> I've learned the difference between srfi-1's fold and haskell
[06:39:12] <BrokenClutch> \o/
[06:42:03] <EvanR> which is what
[06:43:24] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:43:24] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:43:24] *** finn_elija is now known as FinnElija
[06:46:26] <Axman6> you haven't truly learnt it if you can't teach us :)
[06:47:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:48:03] <shapr> Is Axman6 still the king of the channel?
[06:48:13] *** Quits: mikoto-chan (~mikoto-ch@185.25.79.189) (Ping timeout: 240 seconds)
[06:48:45] <Axman6> yes, and no one know why D:
[06:48:48] <Axman6> except you
[06:48:56] * shapr cackles evilly
[06:50:28] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[06:50:33] <Axman6> I was very good and  refrained from weilding my power yesterday when someone was talking _a lot_ of nonsense
[06:50:50] <Axman6> got very close to @where ops'ing though
[06:50:55] <shapr> well, if you got the ops
[06:51:07] <shapr> you've been around to know the right thing to do
[06:59:42] <BrokenClutch> the struct of foldl on srfi-1 is just a reverse of foldr 
[07:00:06] <BrokenClutch> like, foldr is a_1 to a_n and foldl is a_n to a_1
[07:00:19] <BrokenClutch> with almost the same algorithm
[07:01:12] <BrokenClutch> foldl f i l = (f a_n (foldl f i (cdr l))
[07:02:18] <BrokenClutch> foldr f i l = (f a_1 (foldr f i (cdr l)))
[07:02:35] <BrokenClutch> with l on foldl being (a_n ... a_1)
[07:02:35] <EvanR> that seems backwards
[07:02:45] <BrokenClutch> and l on foldr being (a_1 ... a_n)
[07:02:50] <BrokenClutch> yeah, it's backwards
[07:03:26] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[07:04:30] <Axman6> there is a funcamental difference between foldl and foldr - one can run in constant space, the other allows for laziness in a lazy language, but leads to stack overflows in a strict language or when using strict functions
[07:08:08] <BrokenClutch> you can't have infinite loops with foldr
[07:08:16] <BrokenClutch> in eager languages (obviosly)
[07:08:29] <BrokenClutch> it would be a infinite loop
[07:08:33] <BrokenClutch> which is a big nono
[07:10:22] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (Ping timeout: 260 seconds)
[07:10:37] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[07:10:40] *** Joins: mikoto-chan (~mikoto-ch@185.25.79.189)
[07:11:03] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:11:29] <dibblego> well you can, if you fix the foldr implementation
[07:12:56] *** Quits: td_ (~td@94.134.91.23) (Ping timeout: 256 seconds)
[07:14:32] *** Joins: td_ (~td@94.134.91.153)
[07:14:47] <BrokenClutch> srfi is dumb
[07:14:51] <BrokenClutch> there are others
[07:15:06] <BrokenClutch> actually, fold is dumb
[07:15:12] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:21] <BrokenClutch> (i'm sorry, just joking, don't kill me)
[07:16:26] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:17:53] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.4)
[07:19:09] *** Joins: noddy (~user@user/noddy)
[07:21:53] <dibblego> already dead to me bro
[07:22:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[07:30:59] *** Joins: yauhsien_ (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:31:00] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:35:54] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[07:36:16] *** Joins: user322 (~user322@75-32-237-142.lightspeed.rnpsca.sbcglobal.net)
[07:36:48] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:69b8:e285:4414:d6cb)
[07:37:18] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[07:38:42] <Axman6> does anyone have a relatively modern document on binding to C libraries from Haskell? I'd love to automate as much as possible (.h in, .hs out) and not sure what the current state of the art is.
[07:44:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[07:45:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:52:02] <BrokenClutch> Axman6 capi ftw
[07:53:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:54:28] <c_wraith> starting at the .h file is too late.  start from the specification, create bindings from that.  (only works for one C library:  https://github.com/ekmett/gl )
[07:55:00] <Axman6> I'm just not sure what tools exist these days to help automate things
[07:55:46] *** Joins: mbuf (~Shakthi@122.178.183.53)
[07:58:38] *** Quits: user322 (~user322@75-32-237-142.lightspeed.rnpsca.sbcglobal.net) (Remote host closed the connection)
[08:05:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:05:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:09:10] <ephemient> hsc2hs still exists
[08:09:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:15:54] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[08:18:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:20:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:23:36] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[08:25:28] *** Quits: yauhsien_ (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:26:19] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:26:26] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:69b8:e285:4414:d6cb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:27:34] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (Ping timeout: 268 seconds)
[08:31:12] *** Joins: pavonia (~user@user/siracusa)
[08:32:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[08:33:33] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[08:33:52] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[08:35:50] *** Joins: nhatanh02 (~satori@123.24.172.30)
[08:35:58] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:36:07] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[08:36:39] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:40:17] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Ping timeout: 240 seconds)
[08:40:35] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[08:45:53] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[08:46:29] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:47:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:47:09] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:49:13] <jackdk> Axman6: try frase on #bfpg - he gave a talk on it a couple of years back
[08:51:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:54:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:55:09] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[08:55:10] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:55:10] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:55:10] *** Joins: wroathe (~wroathe@user/wroathe)
[08:56:59] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:57:40] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:59:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:03:26] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[09:05:06] <Axman6> Found it! thanks jackdk
[09:06:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:07:29] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:08:09] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[09:10:08] *** Quits: puke (~puke@user/puke) ()
[09:12:11] <EvanR> is there every a downside to putting ~ on pair pattern match
[09:12:30] <EvanR> is there a performance hit
[09:14:03] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[09:14:22] <EvanR> just realized I don't know the difference between ~ and no ~ on deconstructing a pair in a let binding
[09:15:03] <EvanR> and I'm using that annoying speech pattern. What is the different between ~ and no ~ on deconstructing a pair in a let binding?
[09:18:33] <c_wraith> nothing
[09:18:54] <c_wraith> using a let binding and a ~ both do the same thing.
[09:19:21] <c_wraith> In that they both mean the (,) constructor isn't evaluated until one of its arguments is demanded
[09:21:16] <EvanR> but if used in do notation or in a lambda argument, it does something right
[09:21:32] <c_wraith> pattern matches in a let expression are irrefutable by default.
[09:21:45] <c_wraith> Pattern matches in a function definition, case, or lambda are not
[09:23:25] <EvanR> cool
[09:24:07] <c_wraith> oh.  and pattern matches in a <- are refutable by default, with special desugaring to use MonadFail if they are refuted.
[09:25:04] *** Joins: moet (~moet@mobile-166-170-41-195.mycingular.net)
[09:26:40] <int-e> > fix (\ ~(a,b) -> (b+19, 23))
[09:26:42] <lambdabot>  (42,23)
[09:26:49] <int-e> > fix (\(a,b) -> (b+19, 23))
[09:26:51] <lambdabot>  *Exception: <<loop>>
[09:28:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[09:29:30] *** Joins: vysn (~vysn@user/vysn)
[09:30:04] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[09:30:10] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:33:00] *** Quits: h_ (rootvegeta@fsf/member/hays) (Quit: h_)
[09:35:35] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[09:36:09] *** Quits: moet (~moet@mobile-166-170-41-195.mycingular.net) (Ping timeout: 256 seconds)
[09:36:54] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:37:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:37:47] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[09:38:19] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[09:41:36] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[09:41:59] *** Joins: hays (rootvegeta@fsf/member/hays)
[09:45:35] *** Quits: Guest72 (~Guest72@82-132-214-147.dab.02.net) (Quit: Client closed)
[09:46:43] *** Joins: puke (~puke@user/puke)
[09:48:12] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[09:49:52] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[09:55:01] *** Quits: mikoto-chan (~mikoto-ch@185.25.79.189) (Ping timeout: 240 seconds)
[10:01:01] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:02:22] *** Quits: vglfr (~vglfr@88.155.96.35) (Ping timeout: 256 seconds)
[10:14:11] *** Joins: michalz (~michalz@185.246.204.104)
[10:20:21] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 256 seconds)
[10:21:20] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[10:22:44] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:23:57] *** Quits: shapr (~user@2601:7c0:c202:5190:cc12:44b:f211:c38f) (Ping timeout: 240 seconds)
[10:25:27] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[10:26:14] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:28:26] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[10:31:33] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[10:31:59] *** Joins: mcglk (~mcglk@131.191.49.120)
[10:35:02] *** Joins: nhatanh02 (~satori@123.24.172.30)
[10:39:16] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:39:54] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[10:42:17] *** Quits: xff0x (~xff0x@2001:1a81:534d:9900:3a80:4bac:7552:9848) (Ping timeout: 240 seconds)
[10:42:57] *** Joins: xff0x (~xff0x@2001:1a81:534d:9900:3a80:4bac:7552:9848)
[10:53:02] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[10:53:20] <jackdk> > fix error
[10:53:21] <lambdabot>  "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *Ex...
[10:53:28] <jackdk> Alas, my error was not fixed.
[10:57:17] *** Joins: yangby (~secret@115.199.105.217)
[10:58:35] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:2c67:7cfa:cdb8:6538)
[11:04:14] <ephemient> speaking of pattern matches in let expressions… this order isn't defined, is it?
[11:04:14] <ephemient> > let !_ = error "1"; !_ = error "2" in ()
[11:04:15] <lambdabot>  *Exception: 2
[11:04:33] <c_wraith> it is in fact explicitly undefined
[11:05:12] <c_wraith> ghc is allowed to treat all bottoms as equivalent
[11:05:57] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:55c5:5707:fdcb:78cd) (Ping timeout: 240 seconds)
[11:06:07] *** Parts: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e) ()
[11:07:24] *** Joins: mikoto-chan (~mikoto-ch@95.214.66.65)
[11:09:08] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:55c5:5707:fdcb:78cd)
[11:09:34] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[11:17:01] *** Quits: mikoto-chan (~mikoto-ch@95.214.66.65) (Ping timeout: 256 seconds)
[11:17:24] *** Joins: mikoto-chan (~mikoto-ch@95.214.66.65)
[11:21:24] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:21:51] *** Joins: Akiva (~Akiva@user/Akiva)
[11:25:47] *** Quits: yangby (~secret@115.199.105.217) (Quit: Go out for a walk and buy a drink.)
[11:27:26] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:28:05] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:30:04] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:32:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:33:00] *** Joins: fef (~thedawn@user/thedawn)
[11:33:35] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:33:36] *** Quits: mikoto-chan (~mikoto-ch@95.214.66.65) (Ping timeout: 256 seconds)
[11:34:29] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:d6ff:672a:8ae7:74fd)
[11:35:06] *** Joins: mikoto-chan (~mikoto-ch@95.214.66.65)
[11:35:20] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:41:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[11:44:32] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[11:45:43] *** Joins: califax (~califax@user/califx)
[11:48:45] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[11:57:06] *** Joins: max22- (~maxime@2a01cb08833598007fce73d4e7f21a7b.ipv6.abo.wanadoo.fr)
[11:57:38] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:58:49] *** Joins: cfricke (~cfricke@user/cfricke)
[12:00:35] *** Joins: MajorBiscuit (~MajorBisc@c-001-007-038.client.tudelft.eduvpn.nl)
[12:01:44] *** Joins: sektor|2 (~kvirc@87.227.175.182)
[12:03:30] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[12:03:47] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:07:05] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[12:08:13] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 240 seconds)
[12:08:19] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:08:46] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[12:09:05] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:10:26] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:18:13] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:18:54] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[12:21:32] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[12:23:18] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:55c5:5707:fdcb:78cd) (Remote host closed the connection)
[12:25:07] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[12:25:29] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[12:26:08] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[12:26:44] *** Joins: sus (zero@user/zeromomentum)
[12:28:43] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:29:24] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[12:30:09] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Quit: You have been kicked for being idle)
[12:32:47] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[12:33:40] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[12:33:49] *** Quits: ubert (~Thunderbi@p200300ecdf0994f52db7d35c756e5286.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:33:50] *** Joins: cheater (~Username@user/cheater)
[12:34:39] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:39:13] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:39:54] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[12:40:21] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[12:41:47] *** Joins: acidjnk (~acidjnk@p200300d0c7271e155922c761977fca48.dip0.t-ipconnect.de)
[12:41:47] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e155922c761977fca48.dip0.t-ipconnect.de)
[12:41:47] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[12:42:06] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[12:44:34] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:44:45] *** Joins: neurocyte0917 (~neurocyte@IP-045143079193.dynamic.medianet-world.de)
[12:44:45] *** Quits: neurocyte0917 (~neurocyte@IP-045143079193.dynamic.medianet-world.de) (Changing host)
[12:44:45] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:39] *** allbery_b is now known as geekosaur
[12:48:24] *** Quits: mikoto-chan (~mikoto-ch@95.214.66.65) (Ping timeout: 256 seconds)
[12:49:15] *** Joins: mmhat (~mmh@55d441e1.access.ecotel.net)
[12:58:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[13:05:12] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[13:05:56] *** Joins: _FlawLess_ (~user@2a01:e0a:a4:7098::10)
[13:11:03] *** Joins: zaquest (~notzaques@5.130.79.72)
[13:11:45] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:13:05] *** Joins: kuribas (~user@ptr-25vy0ia1hzdpftx2lxu.18120a2.ip6.access.telenet.be)
[13:20:13] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[13:23:48] *** Quits: the_last_immorta (~thelastim@2001:470:69fc:105::1:4d57) (Quit: You have been kicked for being idle)
[13:24:13] *** Quits: xff0x (~xff0x@2001:1a81:534d:9900:3a80:4bac:7552:9848) (Ping timeout: 240 seconds)
[13:24:35] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (Quit: You have been kicked for being idle)
[13:25:05] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:25:08] *** Joins: xff0x (~xff0x@2001:1a81:534d:9900:e459:15a9:4623:d8a6)
[13:28:31] *** Joins: jkaye_ (~qicruser@2601:281:8300:7530:81c9:15c5:1001:5f30)
[13:29:07] *** Quits: jkaye_ (~qicruser@2601:281:8300:7530:81c9:15c5:1001:5f30) (Read error: Connection reset by peer)
[13:35:17] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 256 seconds)
[13:35:55] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:37:30] *** Joins: syrkis (syrkis@gateway/vpn/protonvpn/syrkis)
[13:39:36] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[13:40:02] *** Joins: maroloccio (~marolocci@151.75.59.229)
[13:40:48] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:4371:6bef:aafb:f58d)
[13:41:01] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[13:41:59] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[13:45:38] *** Joins: chele (~chele@user/chele)
[13:46:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:48:19] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:52:17] *** Joins: mikoto-chan (~mikoto-ch@91-157-120-246.elisa-laajakaista.fi)
[13:53:10] *** Joins: Topsi (~Tobias@dyndsl-095-033-027-133.ewe-ip-backbone.de)
[13:55:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:4f29:e68c:50c9:fe2)
[13:59:36] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:00:16] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[14:00:41] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[14:03:29] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a92f:4d2f:4882:4db9)
[14:03:47] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[14:05:06] <madjestic> hey guys, I have uploaded a package candidate to hackage to check if everything is ok, but it looks like hackage failed generate the documentation, even though when I generate the documentation locally (using `cabal haddock`), everything seems to be ok.  Is there a way to upload hackage documentation for a hackage candidate manually?
[14:05:19] *** Quits: monochrom (trebla@216.138.220.146) (Ping timeout: 256 seconds)
[14:06:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:06:56] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:07:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:07:05] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[14:07:28] <merijn> Yes, same 'cabal upload' command, just with -d flag
[14:07:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:07:43] <merijn> Also, I don't think hackage builds docs for candidates?
[14:08:16] *** Lord_of_Life_ is now known as Lord_of_Life
[14:15:50] <madjestic> merijn: just to make sure (I don't want to screw up by uploading anything permanent yet, as I am just testing), the upload command will work with the candidate upload, or documentation upload is something separate and can be updated?
[14:17:44] *** Joins: __monty__ (~toonn@user/toonn)
[14:18:11] *** Joins: pera (~pera@user/pera)
[14:18:23] <madjestic> (I am reading https://hackage.haskell.org/upload as a guide, but it is not clear, if there's a distinction between candidate and normal upload)
[14:18:30] *** Quits: puke (~puke@user/puke) (Ping timeout: 256 seconds)
[14:22:49] <madjestic> also, is there an IRC channel, dedicated to hackage?
[14:23:22] *** Joins: comerijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:24:06] <geekosaur> #hackage but I'm not sure about user questions there
[14:24:57] <geekosaur> ok, looks like they're fine with it
[14:25:05] *** Quits: max22- (~maxime@2a01cb08833598007fce73d4e7f21a7b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[14:25:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:31:15] <madjestic> geekosaur: thanks!
[14:31:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[14:35:48] *** Quits: maroloccio (~marolocci@151.75.59.229) (Quit: WeeChat 3.0)
[14:36:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:37:20] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:38:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:38:16] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:39:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[14:40:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[14:40:27] *** Quits: syrkis (syrkis@gateway/vpn/protonvpn/syrkis) (Ping timeout: 256 seconds)
[14:41:10] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[14:41:59] *** Joins: random (~random@185.219.68.251)
[14:42:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[14:42:44] <random> hey guys
[14:42:55] <geekosaur> o/
[14:43:07] <random> can anyone help with a probably very simple Conduit question
[14:43:19] <random> we have a `ConduitT () thing m result`
[14:43:38] <random> and need to get ([thing], result) out of it
[14:43:50] <random> we used to have `ConduitT () thing m ()` and used `sourceToList`
[14:44:20] <random> but now that it also has a result we need that as well, I found runConduitRes that just gives you the result, and sourceToList that gives you [thing], but nothing that combines both
[14:46:42] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[14:47:24] *** Quits: comerijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:48:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:49:51] <random> no actually runConduit requires a () output
[14:50:19] *** Joins: jakalx (~jakalx@base.jakalx.net)
[14:53:12] *** Joins: puke (~puke@user/puke)
[14:53:18] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Ping timeout: 260 seconds)
[14:53:19] <geekosaur> runConduit :: Monad m => ConduitT () Void m r -> m r -- looks like r, not () ? (similar to runConduitRes)
[14:53:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:53:50] <random> it has () as the output value
[14:54:06] <random> Void I meant
[14:54:17] *** Quits: xff0x (~xff0x@2001:1a81:534d:9900:e459:15a9:4623:d8a6) (Ping timeout: 240 seconds)
[14:54:23] <random> we have `ConduitT () CustomType m CustomResult`
[14:54:35] <random> and need [CustomType] and CustomResult
[14:54:38] <geekosaur> runConduitRes has Void in the same position
[14:54:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:54:48] <random> yeah
[14:54:51] <geekosaur> the "Res" in runConduitRes is ResourceT, not result
[14:54:57] <random> exactly but I misread
[14:55:04] <random> so I can't get it to work at all
[14:55:21] *** Joins: xff0x (~xff0x@2001:1a81:534d:9900:ecd7:329:7ff4:5aa6)
[14:55:58] <geekosaur> I'm not a conduit expert so doubt I can help much., not sure anyone else is around this time of day/night/whatever :)
[14:56:27] <random> it's lunchtime over here haha
[14:57:33] <geekosaur> breakfast here
[14:58:17] *** Quits: emf (~emf@2620:10d:c090:400::5:b9c2) (Ping timeout: 240 seconds)
[14:58:19] <random> damn this feels weird :D
[14:58:21] <random> looking at https://hackage.haskell.org/package/conduit-1.3.4.2/docs/Data-Conduit.html
[14:58:29] <geekosaur> and getting ready for a trip which will cost me pretty much all day
[14:58:30] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[14:58:47] <random> have fun!
[14:59:24] <polyphem> geekosaur: day/night/whatever ... i recently had the idea of a "mob time" , like the average time for all clients in a channel , what do you think about that concept ?
[14:59:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:59:55] *** Joins: emf (~emf@2620:10d:c090:400::5:b9c2)
[15:00:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:00:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:01:00] <Axman6> you could hack something by turning Conduit () thing m r into Conduit () thing (StateT [thing] m) r, push each thing onto the list, then reverse at the end
[15:01:12] <geekosaur> polyphem, see https://ircbrowse.tomsmeding.com/lchaskell
[15:01:32] <random> Axman6: that sounds like fun
[15:01:37] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:01:42] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[15:02:13] <random> Axman6: but it seems so weird that it's not trivial to get both the source as list and the result
[15:02:40] <Axman6> I feel like getting a list of results is often a code smell when it comes to stream libraries
[15:03:05] <polyphem> geekosaur: oh, cool , thanks
[15:05:00] <random> Axman6: need to serve the results through the API
[15:05:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:05:35] <Axman6> how are you building he API?
[15:05:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:06:00] <Axman6> servant IIRC has ways to stream data in the reesponse
[15:06:06] <random> Axman6: just a regular servant thing, the usecase is to stream a large db query
[15:06:16] <random> Axman6: need to check about that
[15:06:33] <Axman6> It may or moy not exist because I complained and asked for it :)
[15:07:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:41] <random> Axman6: haha
[15:07:55] <random> I'd still need both the [thing] and the result though, so probably that's where the codesmell is
[15:08:06] <random> I need the stream and the length
[15:08:13] *** Quits: acidjnk (~acidjnk@p200300d0c7271e155922c761977fca48.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:08:13] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e155922c761977fca48.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:08:31] <Axman6> https://hackage.haskell.org/package/servant-0.18.3/docs/Servant-API.html#t:ToSourceIO
[15:08:47] <Axman6> needing the length is lamesauce
[15:09:20] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:09:25] *** Quits: xff0x (~xff0x@2001:1a81:534d:9900:ecd7:329:7ff4:5aa6) (Ping timeout: 240 seconds)
[15:09:38] <random> Axman6: need to calculate the "total pages" available
[15:09:48] <Axman6> https://hackage.haskell.org/package/servant-0.18.3/docs/Servant-API-Stream.html#t:Stream is probably a better link
[15:09:57] <Axman6> where's the data comming from?
[15:09:57] <random> everything I've been doing so far feels like lamesauce tbh :D
[15:10:23] <random> Axman6: postgres
[15:10:29] <random> we basically have
[15:10:32] *** Joins: xff0x (~xff0x@2001:1a81:534d:9900:8e73:9611:d4ed:ad69)
[15:10:50] <Axman6> can you run two queries?
[15:11:22] <random> (postgresQuery .| CL.map fancyTransformation .| CL.length (we need the length before the filters) .| CL.filter someFilters) `fuseUpstream` paginate
[15:11:46] <random> Axman6: lol yeah of course, it's just that it's very overengineered and not very straightforward
[15:11:49] <random> not sure how much I can change
[15:12:09] <random> we don't need the length of the query, but the length of the query after some mapping
[15:12:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:12:33] <random> in (postgresQuery .| CL.map fancyMap) the query might have had 2000 results, but fancy map will return 350
[15:12:48] <random> we need that 350 count before CL.filer-ing the thing
[15:12:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:13:25] *** Joins: fef (~thedawn@user/thedawn)
[15:14:37] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 240 seconds)
[15:14:40] <random> nvm I'll just take a couple of hours break and plan towards simplifying the whole thing
[15:14:52] <random> it's just way too complicated for what it's doing
[15:15:59] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[15:17:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[15:17:19] <Axman6> good luck
[15:17:38] <random> Axman6: I teared up while typing that
[15:17:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:18:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:19:01] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[15:23:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:24:37] *** Quits: xff0x (~xff0x@2001:1a81:534d:9900:8e73:9611:d4ed:ad69) (Ping timeout: 240 seconds)
[15:25:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:25:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:25:43] *** Joins: xff0x (~xff0x@2001:1a81:534d:9900:c522:bda4:b63a:6841)
[15:27:51] *** Joins: briandaed (~briandaed@185.234.208.208.r.toneticgroup.pl)
[15:28:09] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e153d27ba4f49b7fa4a.dip0.t-ipconnect.de)
[15:28:12] *** Joins: acidjnk (~acidjnk@p200300d0c7271e153d27ba4f49b7fa4a.dip0.t-ipconnect.de)
[15:29:15] *** Joins: cfricke (~cfricke@user/cfricke)
[15:29:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:30:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:31:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:31:42] *** Joins: benin (~benin@183.82.176.241)
[15:32:13] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[15:35:23] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[15:35:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:36:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:41:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:42:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:44:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[15:44:37] *** Joins: random_ (~random@185.219.68.251)
[15:46:13] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:47:15] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:47:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:47:28] *** Quits: random (~random@185.219.68.251) (Ping timeout: 256 seconds)
[15:48:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:50] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:48:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:49:33] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:51:21] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[15:53:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:54:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:54:20] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[15:55:47] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[15:57:14] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[15:59:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:00:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:02:53] *** Joins: califax- (~califax@user/califx)
[16:04:06] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[16:04:07] *** califax- is now known as califax
[16:06:40] *** Joins: monochrom (trebla@216.138.220.146)
[16:07:46] *** AlexNoo_ is now known as AlexNoo
[16:09:16] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:10:57] *** Quits: monochrom (trebla@216.138.220.146) (Ping timeout: 240 seconds)
[16:12:00] *** Quits: mikoto-chan (~mikoto-ch@91-157-120-246.elisa-laajakaista.fi) (Quit: mikoto-chan)
[16:12:14] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[16:12:32] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[16:12:55] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (haskell has no up to date standard, hence it's relegated to ghc slavery)
[16:14:42] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[16:16:56] *** Quits: xff0x (~xff0x@2001:1a81:534d:9900:c522:bda4:b63a:6841) (Ping timeout: 252 seconds)
[16:18:17] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[16:18:40] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:18:59] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[16:19:03] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[16:23:17] *** Joins: slack1256 (~slack1256@191.126.227.94)
[16:32:08] *** Joins: random__ (~random@185.219.68.251)
[16:32:39] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:32:46] *** Joins: monochrom (trebla@216.138.220.146)
[16:33:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[16:34:37] *** Quits: random_ (~random@185.219.68.251) (Ping timeout: 240 seconds)
[16:36:26] <slack1256> I am asking for a friend that uses VSCode on ubuntu 21.10. Does the haskell extension for that editor autoinstall the haskell-language-server? It seems to have conflict with the native install via ghcup.
[16:36:45] <slack1256> If so, is there a way to configure the extension to choose the local/native install?
[16:40:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[16:41:00] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[16:45:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[16:48:12] *** Joins: Everything (~Everythin@37.115.210.35)
[16:52:36] *** Quits: haask (~harry@user/haask) (Remote host closed the connection)
[16:53:58] <[itchyjunk]> I imagine people who use that editor/vscode would know more but maybe i am wrong
[16:54:31] *** Joins: unyu (~pyon@user/pyon)
[16:54:50] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:55:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:58:54] *** Joins: xff0x (~xff0x@2001:1a81:534d:9900:c522:bda4:b63a:6841)
[16:59:49] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[17:01:44] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[17:04:12] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:11:54] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (Ping timeout: 256 seconds)
[17:16:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[17:19:38] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 252 seconds)
[17:20:22] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[17:20:33] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[17:22:12] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:25:55] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 256 seconds)
[17:26:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[17:26:52] *** Quits: michalz (~michalz@185.246.204.104) (Remote host closed the connection)
[17:27:03] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[17:27:12] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[17:28:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[17:31:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:37:44] *** Joins: ksqsf (~user@2001:da8:d800:604:6d71:4647:806f:d6e9)
[17:38:00] *** Quits: ksqsf (~user@2001:da8:d800:604:6d71:4647:806f:d6e9) (Remote host closed the connection)
[17:39:06] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[17:42:47] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[17:48:57] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[17:49:57] *** Joins: xkuru (~xkuru@user/xkuru)
[17:50:17] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[17:51:09] *** Joins: michalz (~michalz@185.246.204.104)
[17:51:49] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[17:52:41] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[17:57:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[17:59:12] *** Joins: max22- (~maxime@2a01cb0883359800510125e1acff834b.ipv6.abo.wanadoo.fr)
[18:01:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:03:32] <byorgey> repl.it works with Nix now (https://blog.replit.com/nix), and I'd like to see if it's possible to use Nix to set up a custom REPL for a language implemented in Haskell.  Anyone have experience with something like this that could offer advice or pointers to examples, etc?
[18:03:37] *** Quits: emf (~emf@2620:10d:c090:400::5:b9c2) (Read error: Connection reset by peer)
[18:03:42] <byorgey> I don't have any experience with Nix but I'm willing to learn.
[18:03:53] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[18:03:59] *** Joins: emf_ (~emf@2620:10d:c090:400::5:b9c2)
[18:04:30] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[18:04:35] <byorgey> to be more concrete, I want to try to set things up so that students can work with https://github.com/disco-lang/disco/ in repl.it
[18:06:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:07:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:07:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:07:52] *** Joins: wroathe (~wroathe@user/wroathe)
[18:10:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[18:12:44] <Inst> gah
[18:12:48] <Inst> i can't finish my "homework"
[18:13:06] <Inst> it turns out I don't know how to apply a type constructor wrapped function to a type constructor wrapped value
[18:15:16] <byorgey> Inst: try pattern matching on both of them to get the function and the value out
[18:15:36] <byorgey> myFunction (Constructor1 f) (Constructor2 value) = ... f value ...
[18:15:38] <Inst> i'm trying to do it with just fmap / <*> machinery
[18:15:53] <Inst> IO is not a Data Constructor, though
[18:16:03] <byorgey> Inst: ah, in that case, <*> does exactly what you just said
[18:16:06] <byorgey> :type (<*>)
[18:16:09] <Inst> it's nested
[18:16:19] <Inst> i can work with one level of TCs using <*>
[18:16:23] <Inst> I can't work with two levels
[18:16:26] <Inst> IO Maybe
[18:16:41] <byorgey> you can, actually, but I agree it's not as straightforward.
[18:16:49] <Inst> dialogedFileOpenSanity = ((pure (pure openFile <*>) <*> openFilePath)) <*> (pure (<*> (Just ReadMode)))
[18:17:06] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[18:17:07] <Inst> openFilePath delivers IO (Maybe String)
[18:17:30] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7cb5:a22f:ba66:1688)
[18:17:36] <Inst> but it's the very fact that it's not as straightforward that's worth learning how to do
[18:17:38] <Axman6> :t liftA2 (<*>)
[18:17:39] <lambdabot> (Applicative f1, Applicative f2) => f1 (f2 (a -> b)) -> f1 (f2 a) -> f1 (f2 b)
[18:17:43] <Inst> sorry axman6
[18:17:43] <Inst> :(
[18:17:55] <Inst> oh
[18:19:02] *** Quits: acidjnk (~acidjnk@p200300d0c7271e153d27ba4f49b7fa4a.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:19:02] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e153d27ba4f49b7fa4a.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:19:16] <Axman6> :t \mf ma -> (<*>) <$> (mf :: IO (Maybe (Int -> Bool)) <*> ma
[18:19:17] <lambdabot> error:
[18:19:17] <lambdabot>     parse error (possibly incorrect indentation or mismatched brackets)
[18:19:23] <Axman6> :t \mf ma -> (<*>) <$> (mf :: IO (Maybe (Int -> Bool))) <*> ma
[18:19:24] <lambdabot> IO (Maybe (Int -> Bool)) -> IO (Maybe Int) -> IO (Maybe Bool)
[18:19:49] <Inst> well, you still didn't walk me through this
[18:20:03] <Axman6> I thought we went through exactly this a few days ago?
[18:20:05] <Inst> i mean, in the sense that I want to be able to do this with just (<*>), fmap
[18:20:53] <Axman6> do you see anything other than fmap and <*> in \mf ma -> (<*>) <$> mf <*> ma?
[18:21:14] *** Joins: henninb (~henninb@97-116-147-100.mpls.qwest.net)
[18:21:31] *** Quits: henninb (~henninb@97-116-147-100.mpls.qwest.net) (Client Quit)
[18:21:48] <Inst> this was my old solution, mind you
[18:21:49] <Inst> join $ fmap sequence (fmap (fmap (ReadMode &)) (fmap (fmap openFile) openFilePath))
[18:22:20] <sshine> traverse?
[18:22:20] <Axman6> what on earth
[18:22:29] *** Joins: henninb (~henninb@97-116-147-100.mpls.qwest.net)
[18:22:34] <sshine> or maybe several steps back :-D
[18:23:02] <Inst> the point is that I end up generating IO (Maybe (IO Handle))
[18:23:15] <Inst> traverse gets it to IO (IO (Maybe Handle)) so I can join it to IO (Maybe Handle)
[18:23:17] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:24:59] <Axman6> I need to go to bed, good luck!
[18:26:05] <Inst> cya, enjoy your sleep
[18:26:13] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:27:00] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[18:27:16] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[18:27:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[18:29:01] *** Joins: jgeerds_ (~jgeerds@55d4bbed.access.ecotel.net)
[18:31:28] *** Quits: MasseR (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[18:31:32] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 240 seconds)
[18:32:05] *** Joins: MasseR (~MasseR@51.15.143.128)
[18:32:57] <janus> now is your chance to get rid of spurious Maybe's in amazonka: https://github.com/brendanhay/amazonka/issues/739
[18:34:35] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[18:35:49] *** Quits: slack1256 (~slack1256@191.126.227.94) (Ping timeout: 240 seconds)
[18:37:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:38:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[18:41:24] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:41:30] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[18:41:55] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[18:43:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[18:43:50] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:45:36] *** Joins: jonathanx__ (~jonathan@c-5eea34e7-74736162.cust.telenor.se)
[18:46:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:46:27] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:46:27] *** Joins: wroathe (~wroathe@user/wroathe)
[18:47:49] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 240 seconds)
[18:48:05] *** Joins: pottsy (~pottsy@129.227.183.244)
[18:48:46] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:4c27:e379:35e8:63af)
[18:50:13] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:50:33] *** Quits: jonathanx__ (~jonathan@c-5eea34e7-74736162.cust.telenor.se) (Read error: Connection reset by peer)
[18:51:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:51:08] *** Joins: nhatanh02 (~satori@123.24.172.30)
[18:52:03] *** Joins: jonathanx__ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[18:52:08] <gentauro> anybody know why `stack` emits this warning "Warning: Installation path /home/johndoe/.local/bin not found on the PATH environment variable" but is able to install binaries to that folder? "Copied executables to /home/johndoe/.local/bin:"
[18:52:12] <gentauro> it's a bit strange
[18:53:49] <peutri> the directory exists
[18:53:53] <peutri> it's just not on your $PATH
[18:54:13] <peutri> so it won't find them by default when you try to run them without specifying the path
[18:54:27] <peutri> which is likely a cause of surprise right after “installing”, hence the warning
[18:59:08] *** Joins: schweers (~user@2001:16b8:e94a:ef00:aaa1:59ff:fe3f:235c)
[18:59:42] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:01:30] <schweers> Is there something I should know about where embedFile from Data.FileEmbed looks for files?  I’m using it in my tests and it works fine, but when I try to use it in the library or executable of the same cabal project, I always get a message that the file was not found.  I’m using plain Cabal, not Stack.
[19:04:41] <gentauro> 16:24 < peutri> it's just not on your $PATH
[19:04:46] <gentauro> peutri: it is !!!
[19:05:30] *** Joins: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com)
[19:05:41] <gentauro> conent of `.bashrc` -> `export PATH="$HOME/.local/bin:$PATH"`
[19:05:54] <gentauro> that's why it's a bit `meh`
[19:06:03] <peutri> how about `echo $PATH` ?
[19:08:51] <Henson> I'm writing a library that contains a whole bunch of functions, but one main function that is exported.  I also want to write tests in a separate module for this library.  There doesn't seem to be a way to export all functions from the main library to the test library alone.  What is the standard way of doing this in Haskell?  Do I write a parent library with two child libraries?  One child..
[19:09:05] <gentauro> peutri: yeah it's there
[19:09:06] <Henson> is the main library that exports all functions.  The other child is the test library that then import all functions from the main child library.  Then the parent only exports the one function from the main child that I want other libraries to be able to use?
[19:09:30] <gentauro> is it me or is `stack` a "bit" buggy for the time being?
[19:09:31] <gentauro> xD
[19:09:52] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:2d06:fff0:d105:7c1)
[19:10:41] <polyphem> Henson: put all functions in a n .Internal module export them all, reexport only api functions from main module , test should use the .Internal module
[19:11:39] <Henson> polyphem: great, thank you
[19:13:41] <schweers> polyphem: I’ve asked myself the same question as Henson.  With your solution, the internal module would be visible to users of the package, correct?
[19:14:05] <peutri> gentauro: well, it works for me :)
[19:14:14] <gentauro> peutri: I get that :)
[19:14:19] <polyphem> schweers: yes but its marked Internal 
[19:14:35] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[19:15:02] <schweers> polyphem: by “marked” you mean that it’s a mere convention?  Not that that’s a bad thing.
[19:15:33] <polyphem> schweers: its "unsafe" and can change wheras the main api should stay stable and is safe to use
[19:16:13] <schweers> Thanks for the explanation.  It seems to be a quite reasonable solution.
[19:16:22] <polyphem> schweers: its a common idiom, have seen it in some libraries
[19:16:31] <Henson> schweers: I've seen other packages with an "Internal" module
[19:17:37] <schweers> polyphem: I’ve seen it too, I just didn’t know how common the practice is.
[19:17:41] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[19:19:04] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[19:23:04] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[19:24:22] <EvanR> also common is to hide the internal bits, then the user is screwed if they need access
[19:24:30] *** Joins: razetime (~quassel@49.207.203.87)
[19:26:03] <polyphem>  Henson , schweers : Here is a fine talk about structuring idioms in haskell projects : https://skillsmatter.com/skillscasts/10832-how-to-architect-medium-to-large-scale-haskell-applications
[19:27:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[19:27:22] <schweers> polyphem: Thanks, I’ll give it a read.
[19:28:19] <schweers> Or rather a watch as it seems.
[19:28:20] <polyphem> schweers: its a video talk :)
[19:28:21] <Henson> polyphem: thanks for the pointer!
[19:29:10] <oxytocat> The internal modules pattern is mentioned here: https://lhbg-book.link/03-html/07-internal_modules.html
[19:29:14] *** Joins: nvmd (~nvmd@user/nvmd)
[19:36:02] *** Joins: emf (~emf@2620:10d:c090:400::5:b9c2)
[19:37:37] *** Quits: emf_ (~emf@2620:10d:c090:400::5:b9c2) (Ping timeout: 240 seconds)
[19:38:23] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[19:38:51] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[19:39:27] *** Joins: futh14 (~futh14@c90-143-137-255.bredband.tele2.se)
[19:40:04] <futh14> I have seen this function from the course cis194. I have a hard time understanding what the oneTwo = 1:2:oneTwo means,  is this something infinitely recursive, just to adjust oneTwo's length to xs? https://pastebin.com/3mMnH7uJ
[19:40:58] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:41:01] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[19:41:49] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:d6ff:672a:8ae7:74fd) (Ping timeout: 240 seconds)
[19:42:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca)
[19:42:49] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:2c52:4b9f:7e82:ac3e)
[19:42:55] *** Joins: burnside_ (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[19:43:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[19:43:05] <polyphem> futh14: to double every other element in xs you multiply first element with one , next element with two ,next element with one again, fourth with 2 .....
[19:43:26] <oxytocat> it is infinitely recursive. it prepends 1 and 2 to oneTwo, which is prepending 1 and 2 to oneTwo, which is ...
[19:43:53] <oxytocat> so you get: 1 : 2 : 1 : 2 : 1 : 2 : ...
[19:44:04] <polyphem> zipWith takes a combining function (*) and two lists xs and [1,2,1,2,1,2,1,2....
[19:44:13] <futh14> in the end, oneTwo's length becomes equal to xs
[19:44:18] <futh14> okay, thanks
[19:44:31] <EvanR> oneTwo's length is infinite
[19:44:41] <polyphem> zip familiy of functions stop after ind of shortest list
[19:44:52] <polyphem> *end*
[19:45:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[19:45:03] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:45:15] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:45:25] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[19:45:46] <futh14> its length is infinite, but only the length that is required by the calculation is made to a list though? EvanR
[19:45:53] *** Joins: unyu (~pyon@user/pyon)
[19:46:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[19:46:27] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:2c52:4b9f:7e82:ac3e) (Client Quit)
[19:46:31] <EvanR> well, what will probably happen is oneTwo becomes a circular object in memory
[19:46:37] <EvanR> doesn't always happen but it's nice when it does
[19:46:55] <EvanR> that's an implementation detail though
[19:47:52] <EvanR> in other circumstances you will get some finite prefix demanded by the program, unless you screw up
[19:49:05] <EvanR> i.e. demand the whole infinite list
[19:49:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:49:41] <merijn> futh14: Do you know any C, by any chance?
[19:50:37] *** Quits: jgeerds_ (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 240 seconds)
[19:51:46] <EvanR> also I want to point out a cool way to interpret equations of the form oneTwo = 1:2:oneTwo. A minimal assumption is that oneTwo is undefined, i.e. ⊥. Then you can take the formula literally and see what happens in steps: 
[19:52:00] <EvanR> oneTwo = ⊥
[19:52:07] <EvanR> oneTwo = 1:2:⊥
[19:52:13] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[19:52:13] <EvanR> oneTwo = 1:2:1:2:⊥
[19:52:17] <EvanR> etc
[19:54:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:54:57] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:55:55] *** Quits: henninb (~henninb@97-116-147-100.mpls.qwest.net) (Quit: leaving)
[19:56:22] <EvanR> substitution taken to a logical extreme
[19:56:36] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[19:58:02] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:58:53] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[20:00:22] <tomsmeding> ghc-vis representation of oneTwo: https://tomsmeding.com/ss/get/tomsmeding/tB2wIw
[20:01:02] <EvanR> :successbaby:
[20:04:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca)
[20:04:47] <futh14> @mer
[20:04:47] <lambdabot> Maybe you meant: vera msg more metar let arr
[20:04:57] <futh14> merijn yes I do
[20:05:31] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[20:05:57] <futh14> tomsmeding is this some kind of doubly-linked list? :D
[20:06:07] <tomsmeding> singly-linked
[20:06:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[20:06:18] <tomsmeding> it's just circular :)
[20:06:21] <futh14> how do you generate such implementations?
[20:06:29] <tomsmeding> the visualisation?
[20:06:32] <futh14> yep
[20:06:38] <tomsmeding> https://www.youtube.com/watch?v=I4lnCG18TaY
[20:08:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:17:06] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: brb)
[20:17:34] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:a92f:4d2f:4882:4db9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:18:23] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:4371:6bef:aafb:f58d) (Ping timeout: 252 seconds)
[20:21:40] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:25:10] *** Joins: alx741 (~alx741@157.100.93.160)
[20:28:39] *** Quits: MajorBiscuit (~MajorBisc@c-001-007-038.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[20:39:55] *** Joins: econo (uid147250@user/econo)
[20:41:26] *** Joins: Guest42 (~Guest42@563BEF60.catv.pool.telekom.hu)
[20:41:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:43:30] *** Quits: michalz (~michalz@185.246.204.104) (Remote host closed the connection)
[20:43:46] *** Quits: oo_migue1 (~pi@77.252.47.226) (Quit: WeeChat 2.3)
[20:43:54] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:259f:1db:61a3:46e1)
[20:44:27] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:86d:17f:4605:4c9d)
[20:46:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:47:43] <Inst> i mean it should work, no?
[20:48:07] <Inst> f a <*> f b = f (a b)?
[20:48:13] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:259f:1db:61a3:46e1) (Ping timeout: 240 seconds)
[20:48:15] <EvanR> that doesn't look right
[20:48:26] *** Joins: Akiva (~Akiva@user/Akiva)
[20:49:06] <byorgey> Inst: it looks like you are mixing up types and values.
[20:49:16] *** Joins: shapr (~user@2601:7c0:c202:5190:c2c1:1b44:a2c4:880c)
[20:49:17] <monochrom> That's very intuitive and very wrong.
[20:49:17] <EvanR> (f <*> g) x = f x (g x)
[20:49:54] <EvanR> monochrom, there you go again </reagan>
[20:50:12] <byorgey> (<*>) has type  f (a -> b) -> f a -> f b, so intuitively it takes a function and an argument both "inside" an f, and applies the function to the value "in the f context".
[20:50:14] <polux> Hi all, if I have a String that is a valid haskell function declaration, is there a way to turn that into an actual function declaration using template haskell?
[20:50:23] <monochrom> Except for the Identity functor and f = Identity (the data constructor)
[20:50:35] <byorgey> However,  f a  is not valid syntax for a value of type  f (a -> b)
[20:51:20] <polux> I know of generating an haskell AST using template haskell combinators, and of quasiquotes but neither seems to help here.
[20:51:45] <EvanR> polux do you want to like "eval" the string and use it at runtime?
[20:51:46] <Inst> see, more things I hate about Haskell:
[20:51:58] <Inst> standard should be F a <*> F b = F (a b)
[20:52:01] <Inst> is that right?
[20:52:11] <Inst> where F is a type constructor and a is a function
[20:52:20] <polux> EvanR: no, I have a function that generates something of the form "f x = e" and I would like to turn that into a program at compile time
[20:52:24] <monochrom> Why is F not a data constructor?
[20:52:31] <Inst> *data constructor
[20:52:56] <monochrom> That works for Identity as said. But have you tried Maybe? []? Either e?
[20:53:17] <EvanR> polux, I know with TH you could parse that string and either fail or use the results to output code...
[20:53:24] <Inst> Maybe includes logic such that if F b = Nothing, <*> returns Nothing
[20:53:31] <monochrom> Maybe has two data constructors so does F become Nothing or does F become Just?
[20:53:52] <polux> EvanR: right, that's something like that I am looking for! Is there some standard or commonly accepted way  to do this?
[20:54:13] <monochrom> And what about [] such that no constructor is 1-ary?
[20:54:21] <Inst> textbook definition of <*> for Maybe (Hutton):
[20:54:28] <monochrom> Does F become [] or does F become (:)?
[20:54:31] <Inst> Nothing <*> _ = Nothing
[20:54:37] <Inst> (Just g) <*> mx = fmap g mx
[20:55:07] <Inst> Maybe (a->b) -> Maybe a -> Maybe b
[20:55:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:2c67:7cfa:cdb8:6538) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:55:52] <polux> looks like https://hackage.haskell.org/package/haskell-src-meta does just that
[20:56:09] <Square> I try to create (through standalone deriving) a Lift instance for Name (from Template.Haskell) but it says "The data constructors of ‘Name’ are not all in scope" even if i import "Name(..)"
[20:56:44] <Inst> i mean I can get it working with toy examples
[20:56:49] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:57:03] <Inst> pure (+) <*> pure 1 <*> pure 2 = Just 3
[20:57:05] <Inst> let me check
[20:58:12] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[20:58:13] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[20:58:23] <Inst> pure (+) <*> pure 1 <*> (pure 2 :: Num a => Maybe a)
[20:58:32] <Inst> Just 3
[20:58:34] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 256 seconds)
[20:59:59] <EvanR> as expected, pure has no effect
[21:00:18] <Inst> i assume there's a default instance defined for Num a...
[21:00:19] <EvanR> The pure was not very effective
[21:00:31] <monochrom> Square: Did you import from Language.Haskell.TH or did you import from Language.Haskell.TH.Syntax?  Not all of them actually exports the data constructor.
[21:00:45] <EvanR> haskell doesn't have default instances
[21:00:49] <byorgey> Inst: a default instance of what defined for Num a ?
[21:01:02] <Square> monochrom, Language.Haskell.TH.Syntax
[21:01:18] <Square> ...ill try the former
[21:01:31] <Square> vice versa
[21:01:44] <monochrom> That's mysterious. Language.Haskell.TH.Syntax is the one that has the best hope.
[21:01:57] <byorgey> Inst: also, what question are you trying to answer right now?  I'm trying to figure out how to help.
[21:02:23] <Inst> byorgey: I'm trying to feed openFile a value of IO (Maybe String)
[21:02:30] <Inst> using applicatives only
[21:02:49] <Inst> problem is, openFile takes two arguments, a String and a IOMode
[21:03:05] <Square> monochrom, you were correct.. chaning to Language.Haskell.TH.Syntax (i stated wrongly). It seems to work now
[21:03:09] <Square> thanks
[21:03:14] <byorgey> Inst: are you allowed to use liftA2?
[21:03:21] <Inst> I already have a liftA2 solution
[21:03:24] <Inst> it's an exercise
[21:03:31] <Inst> it was provided by Ax....
[21:03:55] <byorgey> Inst: OK, did you see earlier when Axman6 showed the type of liftA2 (<*>)?
[21:03:59] <Inst> yeah, I saw
[21:04:49] <Inst> takes f1 (f2 (a->b)) -> f1 (f-2 a) -> f1 (f2 b)
[21:04:55] <Inst> erm, sig
[21:05:01] <Inst> it works
[21:05:05] <byorgey> Right.  It seems to me that is exactly what you want
[21:06:11] <byorgey> you can apply it to  pure (pure openFile)  etc.
[21:06:51] <Inst> liftA2 (<*>) fmap fx
[21:06:57] <Inst> liftA2 (<*>) fmap f x
[21:08:37] <byorgey> hmm?  liftA2 (<*>) expects as its first argument something of type  f1 (f2 (a -> b)).  That is not the type of fmap.
[21:09:32] <Inst> liftA2 f x = (<*>) (fmap f x)
[21:09:41] <Inst> from GHC.Base
[21:10:06] <byorgey> ok.
[21:11:57] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[21:13:07] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:15:27] *** Quits: platz_ (~platz@40.122.118.113) (Quit: leaving)
[21:15:47] *** Joins: neurocyte09179 (~neurocyte@IP-045143079193.dynamic.medianet-world.de)
[21:15:48] *** Quits: neurocyte09179 (~neurocyte@IP-045143079193.dynamic.medianet-world.de) (Changing host)
[21:15:48] *** Joins: neurocyte09179 (~neurocyte@user/neurocyte)
[21:15:49] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[21:15:49] *** neurocyte09179 is now known as neurocyte0917
[21:17:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:17:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:17:50] *** Joins: wroathe (~wroathe@user/wroathe)
[21:20:32] <Inst> why do people think "being filtered by trees" is funny?
[21:22:04] <byorgey> they do?
[21:22:28] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[21:22:54] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[21:23:21] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[21:25:02] <Inst> do people get filtered by trees?
[21:25:09] <Inst> i almost got filtered by trees, but made it
[21:25:20] <Inst> now i'm about to get filtered by not understanding how to use <*> with stacked monads
[21:25:31] <Inst> i'm sure i'll make it
[21:26:19] <Inst> just needs more time, and the challenge is only a bit after the "fun" level right now
[21:26:31] <EvanR> you know, this isn't a monad thing
[21:26:54] <EvanR> it's about the Applicative instances
[21:27:38] <EvanR> which is usually nicer to deal with, but you have the awkard situation where most of your stuff is not using Maybe or IO
[21:27:45] <EvanR> in openFile
[21:29:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:31:06] <EvanR> why is ghci still complaining about ambiguous . even after I put import Prelude hiding ((.))
[21:32:02] *** Quits: Athas (athas@sigkill.dk) (Read error: Connection reset by peer)
[21:32:45] <EvanR> and id
[21:33:09] <byorgey> EvanR: maybe they are being imported via a module you :loaded?
[21:33:56] <EvanR> head scratch... importing and reexporting Prelude id and . ??
[21:33:58] *** Joins: moet (~moet@mobile-166-170-41-167.mycingular.net)
[21:34:28] <EvanR> ah there are two import Prelude hiding lines!
[21:35:13] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:62f3:c8e:2d83:a34f) (Read error: Connection reset by peer)
[21:35:24] <byorgey> haha, each one is importing the thing the other is hiding =)
[21:35:30] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:e50d:c794:338b:ac83)
[21:35:38] *** Quits: phma (~phma@host-67-44-208-201.hnremote.net) (Read error: Connection reset by peer)
[21:36:33] *** Joins: phma (~phma@host-67-44-208-198.hnremote.net)
[21:37:31] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[21:37:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:37:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:37:47] *** Joins: wroathe (~wroathe@user/wroathe)
[21:39:02] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:39:48] *** Quits: moet (~moet@mobile-166-170-41-167.mycingular.net) (Quit: leaving)
[21:40:24] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[21:40:44] <Inst> (fmap (<*>) (fmap (fmap openFile) openFilePath)) <*> (pure (pure ReadMode)) <-- this works
[21:40:58] *** Quits: mbuf (~Shakthi@122.178.183.53) (Quit: Leaving)
[21:41:44] <Inst> EvanR: I am treating FAM monadically (in the sense of being a single unit)
[21:42:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:42:50] <EvanR> just saying that could would work if nothing involved were monads
[21:42:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:42:54] <EvanR> that code*
[21:43:02] <EvanR> which comes up a lot more actually
[21:43:57] <EvanR> :t \x y -> fmap (<*>) (fmap (fmap x) <*> (pure (pure x))
[21:43:58] <lambdabot> error:
[21:43:58] <lambdabot>     parse error (possibly incorrect indentation or mismatched brackets)
[21:44:04] <EvanR> :t \x y -> fmap (<*>) (fmap (fmap x)) <*> (pure (pure x))
[21:44:05] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:44:05] <lambdabot> Applicative f => (a -> b) -> p -> f ((a -> b) -> a) -> f b
[21:44:15] <EvanR> look mom no monads
[21:44:25] <EvanR> :t \x y -> fmap (<*>) (fmap (fmap x)) <*> (pure (pure y))
[21:44:26] <lambdabot> Applicative f => (a1 -> b) -> a2 -> f (a2 -> a1) -> f b
[21:44:39] *** Square is now known as Sqaure
[21:45:25] *** Joins: Athas (~athas@2a01:7c8:aaac:1cf:d10b:de69:b1cf:3fd6)
[21:45:55] <EvanR> sometimes it turns out you don't need some abilities and you can make your code more general
[21:46:49] <Inst> i mean i don't actually need the code, it's just an exercise
[21:47:07] <EvanR> no excuse not to note something cool
[21:47:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:48:23] <Inst> in your sentence above, monad meant (it'd actually be funnier if monad's semantic drift went out of control and we be able to compose sentences entirely out of the word monad, with various inflections to indicate grammatical use)
[21:48:33] <Inst> values whose type was monadic, right?
[21:48:48] *** Quits: pera (~pera@user/pera) (Quit: leaving)
[21:49:05] *** Joins: vysn (~vysn@user/vysn)
[21:49:31] <EvanR> no
[21:49:40] <EvanR> since we're talking about types not values
[21:49:52] <EvanR> none of the types were monads
[21:49:58] <EvanR> (necessarily)
[21:51:42] <Inst> openFilePath returns IO (Maybe String) which is why it's such a mess
[21:54:02] <EvanR> @hoogle openFilePath
[21:54:02] <lambdabot> No results found
[21:54:15] <EvanR> what's that
[21:55:43] <Inst> openFilePath :: IO (Maybe String)
[21:55:43] <Inst> openFilePath = openFileDialog (pack "") (pack "") [] (pack "") False >>= \x -> pure $ x >>= \y -> pure $ unpack (head y)
[21:55:56] <Inst> openFileDialog is from TinyFileDialogs on Hackage
[21:56:02] <Inst> I've been told it's badly coded
[21:56:13] <Inst> it's a wrapper for TinyFileDialogs
[21:56:44] <Inst> so it calls up OS API to get you a file selector, then returns a file path as IO Maybe [Text]
[21:57:22] <EvanR> it returns the first path selected by the user or Nothing if they cancelled?
[21:57:23] <Inst> the architecture of "cancer.hs"
[21:57:25] <Inst> yeah
[21:57:36] <Inst> if True is sent, you can select multiple files and it's a multi-element List
[21:58:09] <Inst> so, like, if you want to teach with it, you can give an assignment to give a way to hook up TinyFileDialogs to an openFile / writeFile whatever
[21:58:16] <EvanR> in this case, I would immediately handle the Nothing after calling that, then continue in IO, 
[21:58:30] <EvanR> using a case
[21:58:51] <EvanR> react to a Just path with some IO code and a real String
[21:58:57] <Inst> why do you guys hate If Then Else statements so much? They're perfectly useful when you only have two cases!
[21:59:14] <Inst> it desugars to case!
[21:59:15] <EvanR> if then else isn't about the number of cases, it's about the type of the scrutinee
[21:59:25] <ephemient> you wan to destructure the maybe, so the natural thing to use is case
[21:59:26] <monochrom> I don't hate if-then-else.
[21:59:28] <EvanR> you don't have a Bool so it's inconvenient
[21:59:35] <Inst> ah
[21:59:44] <monochrom> "if x>10 then ... else ..." is fine.
[21:59:44] <Inst> case of you can use pattern matching
[21:59:58] <monochrom> Instead, why do you hate pattern matching so much?
[21:59:59] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:e50d:c794:338b:ac83) (Remote host closed the connection)
[22:00:10] <monochrom> "case xs of [] -> ... x:xs -> ..." is fine.
[22:00:14] <EvanR> also, using an if with isJust or isNothing would be bad here, because then you don't have the string
[22:00:14] <Inst> i wasn't used to it!
[22:00:18] <Inst> and also, on FP Discord
[22:00:23] <ephemient> with {-# LANGUAGE LambdaCase #-} you can write something >>= \case Just something -> foo; Nothing -> bar
[22:00:28] <EvanR> and to get the string, you need... to use a case statement
[22:00:30] <Inst> we have some guy who insists on defining functions with pattern matching
[22:00:35] <EvanR> then the Nothing case makes no sense
[22:00:35] <Inst> also, btw, can you @ a function?
[22:00:45] <Inst> it's a phase people go through
[22:00:52] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:00:55] <ephemient> and with {-# LANGUAGE BlockArguments #-} you don't need to increase indentation for a do block inside there
[22:00:56] <Inst> they're not comfortable with pattern matching, they work with if then else because it's what they learned first
[22:01:10] <Inst> if then else only has a valid use in the rare case where you only have two cases and don't need pattern matching
[22:01:19] <EvanR> if then else doesn't give you access to the payload of Maybe
[22:01:22] <Inst> yeah
[22:01:23] <Inst> correct
[22:01:30] <Inst> so in this case it's not necessary
[22:01:37] <Inst> erm, it's not useful
[22:01:42] <EvanR> it would actually be very awkward and weird
[22:01:58] <Inst> but re: hating pattern matching
[22:02:03] <Inst> there's a stage people go through where they prefer guards
[22:02:10] <Inst> it's because they don't want to type the function name and arguments all the time
[22:02:17] <Inst> so I'm sort of wondering if it's possible to @ the function name
[22:02:22] <EvanR> you can just use a case to avoid that
[22:02:27] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:02:33] <Inst> so when you're pattern matching, you can just type Function x y
[22:02:42] <Inst> so when you're pattern matching, you can just type k@function x y
[22:02:48] <Inst> then k x2 y2, etc
[22:03:00] <Inst> not sure if @ notation is powerful enough for that
[22:03:16] <monochrom> WTH is "@ the function name"?
[22:03:30] <EvanR> yeah you can't write that
[22:03:33] <Inst> in Chinese and Japanese, because words are so complicated, they have something called an iteration mark
[22:03:38] <Inst> so, if you're reduplicating a word
[22:03:46] <Inst> erm, the character for a given morpheme can be so complicated
[22:03:54] <int-e> function_with_tediously_long_name = f where f ...
[22:04:13] <int-e> "go" is a somewhat popular short name
[22:04:14] <Inst> you just write 々
[22:04:24] <monochrom> No, Chinese doesn't do that.
[22:04:26] <Inst> oh, thanks
[22:04:34] <EvanR> function_with_tedious_name x = case x of
[22:04:38] <Inst> Chinese has iteration marks, two, used entirely in casual writing
[22:05:15] <[itchyjunk]> if list = [[1],[2,3]] and i [x | x <- [ y | y <- list] ], first instance of y would be [1] so x <- [1] would be 1 no?
[22:05:18] <Inst> but there is a stage where people do guards, probably because (like me) they're too dumb to figure out how to use where to avoid having to type the pattern name repeatedly
[22:05:21] <monochrom> And I believe Japanese does that for immediate repetition only, not marking something to be cloned 3 inches away.
[22:05:23] <[itchyjunk]> idk why this is id function again
[22:05:31] <int-e> EvanR: I kind of hate that because it means switching from = to ->
[22:05:40] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:05:44] <monochrom> And English has "ditto" for that.
[22:05:49] <Inst> 〻
[22:05:50] <EvanR> well... we switch between = and -> so much anyway xD
[22:05:53] *** Joins: futh1415 (~futh14@c90-143-137-255.bredband.tele2.se)
[22:06:09] <EvanR> i didn't know about the f trick
[22:06:11] <Inst> case of I actually dislike because you have to use ->
[22:06:17] <Inst> would be better if you could just type = instead
[22:06:40] <[itchyjunk]> ah i think it's left to right evaluation
[22:06:56] <[itchyjunk]> can i do list comprehension without a list? xD
[22:06:58] <EvanR> it wouldn't be better, imo
[22:07:00] *** Quits: futh14 (~futh14@c90-143-137-255.bredband.tele2.se) (Ping timeout: 256 seconds)
[22:07:05] <EvanR> = means equals in haskell
[22:07:18] <Inst> "is defined as"
[22:07:21] <EvanR> Nothing = "whatever, it's empty" is wrong
[22:07:23] <Inst> == is boolean equal
[22:07:32] <EvanR> it's not is defined as either
[22:08:06] <Inst> @int-e thank you for letting me know about the where trick
[22:08:07] <lambdabot> Unknown command, try @list
[22:08:14] <int-e> [itchyjunk]:  [ y | y <- list] equals  list
[22:08:45] <EvanR> = also isn't a bool test, it's a proposition
[22:09:06] <[itchyjunk]> :<
[22:09:37] <int-e> we're back to making bold declarations I see
[22:09:37] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:4c27:e379:35e8:63af) (Ping timeout: 240 seconds)
[22:09:41] <Inst> w/e, this is a case where i'm better off learning the language more before arguing it
[22:10:04] <Inst> like, I had a pythoner who had signed up to learn Hask from me when I was ready run off once he saw that Aeson apparently required you to define types
[22:10:05] <monochrom> I thought that was the only fair thing to do.
[22:10:21] <ephemient> well, one part of syntax I always find a bit awkward is using <- inside pattern guards, but I don't think there's really a great alternative since = already means something
[22:10:25] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:10:29] <monochrom> What do you mean it is possible to give so much opinion on something you don't know.
[22:10:41] <monochrom> Is that a new-fangled TikTok thing.
[22:10:49] <Inst> isn't that the basis of democracy? :)
[22:11:15] <int-e> monochrom: I don't know what you're talking about, therefore you are wrong.
[22:12:17] <Inst> also there seems to be a dearth of information on algebraic data types in textbooks, as in, it's usually not taught unitarily
[22:12:47] <[itchyjunk]> if i have a [[1]], is there no direct way to refer to that 1 inside a list comprehension?
[22:13:02] <[itchyjunk]> [x | x <- ? ]
[22:13:03] <Inst> ummm
[22:13:16] <Inst> [x | x<- y , y<-k]
[22:13:22] <Inst> or no, that doesn't work
[22:13:25] <EvanR> > [x | [[x]] <- [[1]]] -- ? xD
[22:13:26] <[itchyjunk]> no..
[22:13:27] <lambdabot>  error:
[22:13:27] <lambdabot>      • No instance for (Num [()]) arising from a use of ‘e_11’
[22:13:27] <lambdabot>      • In the expression: e_11
[22:13:35] <EvanR> > [x | [x] <- [[1]]] -- ? xD
[22:13:37] <lambdabot>  [1]
[22:13:53] <Inst> i'm trying to figure out how to do it using the list comprehension syntax only
[22:14:01] <int-e> Inst: it basically works, you just need to put things into the proper order
[22:14:03] <Inst> you could just do [head x | x <- list]
[22:14:18] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:2fd9:6714:788f:97f6)
[22:14:21] <monochrom> > [x | a <- [[1]]  {- so a = [1] -}  ,  x <- a]
[22:14:22] <lambdabot>  [1]
[22:14:22] <int-e> and maybe rename things
[22:14:33] <Inst> [x | y <- list, x <- y
[22:14:35] <Inst> ]?
[22:14:41] <[itchyjunk]> okay, [[1]] was an example
[22:14:48] <[itchyjunk]> i want to refrence to [[a]]
[22:14:54] <[itchyjunk]> elements in lists of lists
[22:14:57] <[itchyjunk]> all of them
[22:15:01] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[22:15:09] <monochrom> You mean [[1,2,3]]
[22:15:23] <[itchyjunk]> [[1],[2],[3..]] 
[22:15:24] <monochrom> > [x | a <- [[1,2,3]]  {- so a = [1] or [2] or [3] -}  ,  x <- a]
[22:15:25] <lambdabot>  [1,2,3]
[22:15:36] <Inst> list = [[1]
[22:15:38] <Inst> list = [[1]]
[22:15:38] <monochrom> Err, a=[1,2,3]
[22:15:54] <monochrom> [[1], [2], [3]] can also work
[22:15:55] <EvanR> gratuitous list comprehension syntax for outrageous fortune
[22:15:59] <Inst> [x | y<-list, x<-y]
[22:16:02] <Inst> returns 1
[22:16:03] <[itchyjunk]> whats this {- -} stuff?
[22:16:09] <monochrom> > [x | a <- [[1],[2],[3]]  {- so a = [1] or [2] or [3] -}  ,  x <- a]
[22:16:10] <lambdabot>  [1,2,3]
[22:16:18] <futh1415> [itchyjunk] comments
[22:16:22] <monochrom> block comment
[22:16:43] <Inst> welcome to the Haskell club, [itchyjunk]
[22:16:46] <[itchyjunk]> Inst, oh i didnt think of difining y first then x :|
[22:17:02] <[itchyjunk]> oh i  see :<
[22:17:17] <[itchyjunk]> [x | y <- list, x <- y] seems to work
[22:17:25] <Inst> EvanR: it's not gratuitous when you intrinsically derive pleasure from the syntax
[22:17:38] <Inst> a bit decadent, perhaps, but not gratuitous
[22:17:44] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:18:02] <EvanR> after using clojure I do appreciate my syntax
[22:18:09] <EvanR> when it exists
[22:18:12] <Inst> it could be better in parts
[22:18:21] <Inst> but pretty close to optimum, Idris apparently uses : for type signatures
[22:18:26] <monochrom> I like outrageous fortune. May well worth gratuitous syntax.
[22:18:26] <Inst> not sure what they use for cons
[22:18:27] <EvanR> : is more standard
[22:18:33] <EvanR> haskell is the odd one out with ::
[22:18:37] <Inst> ah
[22:19:02] <monochrom> If someone pays me $100000 for saying "type X = Y" 3 times, I will do it.
[22:19:04] <[itchyjunk]> https://bpa.st/MBDQ
[22:19:18] <[itchyjunk]> Why didn't I think of defining y first? was stuck on this for too long..
[22:19:18] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:19:28] <Inst> LYAH or HPFFP?
[22:19:43] <EvanR> basically you needed a two step list comprehension not one
[22:19:48] <EvanR> since it's nested
[22:19:54] <monochrom> This is why education exists. You can't expect to think up all the obvious-in-retrospect ideas yourself.
[22:20:32] <monochrom> It is also why when I teach I don't say "think about it".  I give carefully designed hints and even appropriate spoilers.
[22:20:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:21:02] <Inst> monad comprehension is a language extension, right?
[22:21:32] <Inst> there's no way to implement list comprehensions for a custom list type?
[22:22:23] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:2fd9:6714:788f:97f6) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:24:06] <Henson>  /quit
[22:24:17] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Quit: let's try that again!)
[22:24:23] <monochrom> Heh
[22:25:20] <EvanR> a Henson shaped hole next to the open exit door
[22:25:35] <monochrom> haha
[22:26:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:26:49] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[22:29:10] <Inst> still fairly ugly
[22:29:11] <Inst> d = pure ((<*>) . (pure openFile <*>)) <*> openFilePath <*> pure (pure ReadMode)
[22:29:25] <Inst> well, it's going to be ugly, just need to figure out how to get rid of the .
[22:29:34] <Inst> then it's done just with <*> and pure
[22:30:13] <Inst> then i have to figure out how the code actually works!
[22:30:38] <dsal> That looks like a mini golfer showed up at a PGA Tour.
[22:30:43] *** Quits: xstill- (xstill@fimu/xstill) (Quit: Ping timeout (120 seconds))
[22:30:43] <EvanR> @pl \x y z -> pure ((<*>) . (pure x <*>)) <*> y <*> pure (pure z)
[22:30:43] <lambdabot> flip flip (pure . pure) . (((.) . (<*>)) .) . (<*>) . pure . ((<*>) .) . (<*>) . pure
[22:31:06] *** Joins: xstill- (xstill@fimu/xstill)
[22:31:43] *** Quits: max22- (~maxime@2a01cb0883359800510125e1acff834b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[22:31:48] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:31:55] *** Joins: max22- (~maxime@2a01cb0883359800decae4ceda35e3bf.ipv6.abo.wanadoo.fr)
[22:32:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:34:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[22:34:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:35:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:38:57] <Inst> i have a problem wherein I where if I see those red squiggly lines under my code, I feel like the Hlinter just called me a paedophile
[22:39:36] <EvanR> use vim, no red squiggle support
[22:42:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:43:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:46:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca)
[22:47:32] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[22:48:16] <schuelermine[m]> Is there a package/module that does something like this? https://gist.github.com/schuelermine/6a06efcc0c5b3a18768c4649e4cc8efb
[22:48:29] <ephemient> :t let openFilePath :: String -> IO (Maybe FilePath); openFilePath = undefined in openFilePath >=> mapM (flip openFile ReadMode)
[22:48:30] <lambdabot> error:
[22:48:30] <lambdabot>     Variable not in scope: openFile :: FilePath -> b0 -> IO b
[22:48:30] <lambdabot> error: Data constructor not in scope: ReadMode
[22:48:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[22:50:55] *** Joins: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648)
[22:51:25] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:52:37] *** Quits: Athas (~athas@2a01:7c8:aaac:1cf:d10b:de69:b1cf:3fd6) (Ping timeout: 240 seconds)
[22:53:59] *** Quits: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648) (Read error: Connection reset by peer)
[22:54:08] *** Quits: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (Quit: leaving)
[22:59:10] *** Joins: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648)
[23:00:45] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca)
[23:00:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:00:54] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:05:59] <Inst> bjs
[23:06:14] *** Joins: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[23:08:11] *** Quits: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648) (Read error: Connection reset by peer)
[23:09:28] *** Quits: benin (~benin@183.82.176.241) (Quit: The Lounge - https://thelounge.chat)
[23:13:30] *** Quits: futh1415 (~futh14@c90-143-137-255.bredband.tele2.se) (Quit: Client closed)
[23:14:47] *** Joins: Athas (~athas@sigkill.dk)
[23:15:29] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:16:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:18:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:18:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:18:11] *** Joins: wroathe (~wroathe@user/wroathe)
[23:19:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:20:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:21:01] <lyxia> schuelermine[m]: you might be interested in "ghosts of departed proofs" https://hackage.haskell.org/package/gdp
[23:23:48] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:24:21] <monochrom> Why is the readme essentially empty? :(
[23:25:09] <geekosaur> ghosts are invisible :þ
[23:25:19] <monochrom> Fortunately app/Main.hs is a good example.
[23:27:13] <EvanR> was there a paper by this name
[23:27:42] *** Quits: briandaed (~briandaed@185.234.208.208.r.toneticgroup.pl) (Quit: leaving)
[23:27:52] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[23:27:55] <lyxia> yeah, a functional pearl
[23:30:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[23:31:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:32:32] <schuelermine[m]> What syntax is `([a] ?SortedBy comp)`? Is it applying `[a]` to an implicit parameter?
[23:33:28] <monochrom> It's "type (?) a p = Satisfies p a"
[23:34:06] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:34:35] <schuelermine[m]> It's an infix type operator? And `SortedBy comp` is the right argument?
[23:34:41] <monochrom> Yeah
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:38] <schuelermine[m]> Does GHC propagate constraints from type families? Can you do... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/56f684a65369fda39abada8109007f682e427671)
[23:37:56] <schuelermine[m]> * Does GHC propagate constraints from type families? Can you do... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/f2a37c482df8e3589687753844ee3b18bf1ad47b)
[23:38:11] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:18] <schuelermine[m]> oh frick
[23:38:20] <schuelermine[m]> sorry
[23:38:27] <schuelermine[m]> I forgot I was bridging from matrix
[23:38:40] <schuelermine[m]> sorry for attempting to use markdown :/
[23:39:53] <geekosaur> it's okay, the bridge pushed it into a pastebin and mostly kept the formatting
[23:39:58] <geekosaur> the edit was more problematic
[23:40:01] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[23:40:41] <schuelermine[m]> what does it show up as? 
[23:40:48] <schuelermine[m]> (the editl
[23:40:53] <schuelermine[m]> s/l/)
[23:40:59] <geekosaur> [11 20:07:56] <schuelermine[m]> * Does GHC propagate constraints from type families? Can you do... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/f2a37c482df8e3589687753844ee3b18bf1ad47b)
[23:41:05] <geekosaur> it doesn't edit, in short
[23:41:34] <schuelermine[m]> I see, thanks
[23:41:44] <geekosaur> IRC has no edit mechanism, just some conventions that hopefully don;t get overused
[23:42:15] <schuelermine[m]> yeah I know, I just forgot to code-switch.
[23:42:45] <schuelermine[m]> it's s/pat/rep/, or *fix-word, right?
[23:42:51] <geekosaur> yeh
[23:43:29] <geekosaur> and yours wasn't too bad, it's the folks who do 5 or 6 *s of the whole message in a row that are really frustrating IRC-side
[23:43:40] <awpr> > let f :: (Num String => String) -> String; f _ = "what?" in f 42 -- putting the constraint there probably doesn't do what you were expecting
[23:43:41] <lambdabot>  "what?"
[23:44:13] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[23:44:46] <schuelermine[m]> Oh you can omit braces in one-line let stmts now & still use semicolons?
[23:45:41] <geekosaur> when they're not nested in some other layout-using construct
[23:45:53] <geekosaur> let inside of do will break, for example
[23:46:01] <schuelermine[m]> > let a = 2; b = 3 in [a,b+a]
[23:46:02] <lambdabot>  [2,5]
[23:46:10] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:46:37] <schuelermine[m]> …ok, that got turned into a blockquote on Matrix, hope that got through fine
[23:46:54] <geekosaur> worked fine here
[23:47:14] <geekosaur> bridging message systems with different conventions has its rough edges :)
[23:47:35] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Remote host closed the connection)
[23:47:51] <geekosaur> you could use @run instead of "> " if matrix is doing weird things with it
[23:48:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:48:35] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:49:02] <Inst> question
[23:49:03] <schuelermine[m]> IMO the best feature of rich text messaging is <details>, that's so convenient if you wanna send loads of text without cluttering up everyone's screens
[23:49:10] <Inst> is it not possible to dispense wholly with .?
[23:49:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7cb5:a22f:ba66:1688) (Ping timeout: 240 seconds)
[23:49:22] <Inst> like, i mean, i could always just replace . with a lambda
[23:49:46] <geekosaur> there are some uses of . that can't be done in other ways, like use with forall
[23:49:48] <Inst> pure ((<*>) . (pure openFile <*>)) <*> openFilePath <*> pure (pure ReadMode)
[23:49:53] <Inst> like, how do I get . out?
[23:50:03] <Inst> lambda solution is always there, of course
[23:50:10] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:50:10] <geekosaur> @unpl pure ((<*>) . (pure openFile <*>)) <*> openFilePath <*> pure (pure ReadMode)
[23:50:10] <lambdabot> ((pure (\ x -> (<*>) (pure openFile <*> x)) <*> openFilePath) <*> pure (pure ReadMode))
[23:50:18] <Inst> unpl?
[23:50:29] <Inst> so the only way i can nuke the . is with a lambda? :(
[23:50:32] <geekosaur> reverse of @pl which removes "points" (variables)
[23:50:42] <Inst> pointless -> point free? :)
[23:50:44] <geekosaur> that doens't necessarily mean it's the only way\
[23:50:50] <bjs> presumably "un-point-less" :P
[23:51:11] <geekosaur> yes. "pointless" is just, well, when you see some of the stuff it comes up with, you'll see why some people consider it pointless :)
[23:51:48] <geekosaur> multiple uses of <*> can sometimes be replaced by use of liftAn for some n
[23:51:53] <Inst> i know
[23:51:59] <Inst> but trying to do it with just pure and <*>
[23:52:08] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:52:12] <Inst> it's something about parsing, i'm sure
[23:52:14] <EvanR> just pure or <*>, no lambda, what else
[23:52:18] <Inst> hi whatsupdoc, did you finally try learning Haskell yet?
[23:52:27] <Inst> parens, I guess, or $
[23:52:28] <whatsupdoc> lol
[23:52:37] <EvanR> no parens allowed?
[23:52:41] <Inst> allowed
[23:52:56] <EvanR> these rules are turning into an olympic sport
[23:52:56] <whatsupdoc> why so curious about me learning haskell?
[23:53:52] <Inst> EvanR: "make a functional IO program that can read and write files on lesson 3 of 'Haskell for non-programmers'"
[23:54:15] <EvanR> do notation
[23:54:16] <whatsupdoc> Inst: i'm learning about the stock market right now
[23:54:34] <Inst> is it ethical to teach do notation without teaching what's happening underneath?
[23:54:36] <EvanR> and case analysis to dispatch the Maybes if they appear
[23:54:44] <EvanR> yes it is ethical and probably smart
[23:54:45] <Inst> i mean all you need is Do
[23:54:47] <monochrom> Unethical.
[23:55:04] <Inst> some people after getting monads want to teach a monad tutorial, i want to teach a monad course
[23:55:06] <EvanR> just get something in IO working
[23:55:09] <Inst> which is less unethical
[23:55:13] <whatsupdoc> as soon as that's over, i'll start learning haskell
[23:55:20] <EvanR> like we saw earlier it doesn't have to have anything to do with Monads
[23:55:28] <Inst> hmmm, if i paid you $6 would you be a guinea pig for my haskell course?
[23:55:34] <monochrom> Well, actually I don't have a notion of ethics for this. But I have a notion of efficacy on this. do-notation is more confusing than helping at an early stage.
[23:55:34] <Inst> it'll be taught on twitch.tv and Discord
[23:55:39] <EvanR> you used other means and didn't even use the monad instance
[23:55:59] <whatsupdoc> twitch? I hate live stream stuff, disaster for learning
[23:56:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:56:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:56:05] *** Joins: wroathe (~wroathe@user/wroathe)
[23:56:38] <Inst> tbh i'm thinking it'd be impossible to teach algebraic data types on lesson 2
[23:57:01] *** Joins: d0ku (~d0ku@178.43.3.56.ipv4.supernova.orange.pl)
[23:57:06] <Inst> then intro monads as part of algebraic data types, along with the standard "monad anti-tutorial"
[23:57:35] <EvanR> speaking of which, why are we learning haskell right now from the perspective of a seasoned practioner attempting to teach it to non-programmers
[23:57:37] <monochrom> Live stream per se is neither good nor bad for learning. The real difference is between pre-planned and stream-of-consciousness.
[23:57:42] <whatsupdoc> ablgebraic data types sounds like a class
[23:57:45] <EvanR> i.e. where most of the monad tutorials came from
[23:57:50] <EvanR> bad ones
[23:58:18] <EvanR> like, learn it from the perspective of someone learning it
[23:58:22] <monochrom> And then statistically most live-streamers are stream-of-consciousness.
[23:58:38] <Inst> i'm trying to learn it, which is why i feel privileged to blow my mouth off about stuff i don't understand
[23:58:47] <whatsupdoc> what's the best reosurce for learning haskell? i think if i don't have a structured plan i probably won't be curious to dig into it on my own
[23:58:51] <Inst> "if I were teaching myself, this would be how I'd do it"
[23:58:55] <Inst> LYAH is dead
[23:59:06] <Inst> HPFFP costs money, but you can find a moderately old version online
[23:59:15] <Inst> apparently people have a grudge against Chris Allen for trying to rip off Julie Moronuki
[23:59:30] <Inst> LYAH you can still find on archive.org
[23:59:32] <monochrom> I don't know about best. But http://www.vex.net/~trebla/haskell/learn-sources.html is my comments on some resources I have looked at.
[23:59:47] <monochrom> And eventually "best" is very personal.
