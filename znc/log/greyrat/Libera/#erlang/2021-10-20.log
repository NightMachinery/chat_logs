[00:05:20] *** Quits: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6) (Remote host closed the connection)
[00:05:32] *** Joins: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6)
[00:48:58] *** Quits: rgrinberg (~textual@186.4.37.225) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:01:32] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:24:02] *** Joins: vidbina (~vid@sub-190-88-147ip110.rev.onenet.cw)
[01:41:00] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[01:55:52] *** Quits: vidbina (~vid@sub-190-88-147ip110.rev.onenet.cw) (Quit: vidbina)
[03:01:34] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:53:54] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[05:07:37] *** Quits: jespada (~jespada@2803:9800:9842:7a62:5d33:6404:2aef:9813) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:03:07] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:07:00] *** Quits: BadRequest (uid3514@user/badrequest) (Quit: Connection closed for inactivity)
[08:00:01] *** Joins: stzsch|2 (~stzsch@187.44.81.18)
[08:02:44] *** Quits: stzsch (~stzsch@187.44.81.18) (Ping timeout: 265 seconds)
[08:13:27] *** Quits: stzsch|2 (~stzsch@187.44.81.18) (Read error: Connection reset by peer)
[08:13:50] *** Joins: stzsch|2 (~stzsch@187.44.81.18)
[08:22:09] *** Quits: stzsch|2 (~stzsch@187.44.81.18) (Read error: Connection reset by peer)
[08:22:32] *** Joins: stzsch|2 (~stzsch@45.238.66.15)
[08:40:04] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 258 seconds)
[08:47:46] *** Joins: voltone (~voltone@mailgw3.be-all.com)
[09:21:11] *** Quits: rgrinberg (~textual@ip11-246-50-179.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:31:20] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:32:40] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:50:16] *** Joins: xek (~xek@89-72-114-215.dynamic.chello.pl)
[09:58:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[09:59:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:30:34] *** Joins: ski_ (~ski@remote12.chalmers.se)
[10:30:44] *** Joins: bind3 (~bind@md-dingen.tilaa.cloud)
[10:31:07] *** Joins: urdh_ (~urdh@user/urdh)
[10:37:12] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[10:39:50] *** Quits: bind2 (~bind@md-dingen.tilaa.cloud) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: urdh (~urdh@user/urdh) (Ping timeout: 260 seconds)
[10:39:51] *** urdh_ is now known as urdh
[10:41:30] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 260 seconds)
[11:39:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:42:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:56:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:56:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:58:01] *** Quits: voltone (~voltone@mailgw3.be-all.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:59:21] *** Joins: voltone (~voltone@mailgw3.be-all.com)
[13:19:12] *** Quits: voltone (~voltone@mailgw3.be-all.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:21:32] *** Joins: voltone (~voltone@mailgw3.be-all.com)
[14:23:01] *** Quits: withersh1 (~craig@pa49-184-234-55.pa.vic.optusnet.com.au) (Ping timeout: 245 seconds)
[14:32:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:33:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:35:27] *** Joins: jespada (~jespada@2803:9800:9842:7a62:5d33:6404:2aef:9813)
[14:38:09] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[14:42:59] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 264 seconds)
[16:10:05] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[16:14:42] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 260 seconds)
[16:38:27] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[16:38:45] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:40:02] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[16:41:37] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:41:54] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:47:50] *** Quits: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6) (Remote host closed the connection)
[16:48:04] *** Joins: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6)
[16:51:14] *** Quits: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6) (Client Quit)
[16:53:52] *** Joins: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6)
[17:02:17] *** Joins: phaleth (~phaleth@user/phaleth)
[17:11:38] *** Quits: phaleth (~phaleth@user/phaleth) (Read error: Connection reset by peer)
[17:11:43] *** Joins: phaleth_ (~phaleth@user/phaleth)
[17:23:07] *** Joins: Guest48 (~Guest48@gsemenov.com)
[17:25:40] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:27:51] *** Quits: Guest48 (~Guest48@gsemenov.com) (Quit: Client closed)
[17:41:20] *** Quits: voltone (~voltone@mailgw3.be-all.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:49:59] *** Joins: Guest7 (~Guest7@gsemenov.com)
[17:50:58] *** Quits: Guest7 (~Guest7@gsemenov.com) (Client Quit)
[17:53:11] *** Quits: etrepum (sid763@id-763.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:53:41] *** Joins: etrepum (sid763@uxbridge.irccloud.com)
[18:02:29] *** Joins: withersh1 (~craig@pa49-184-233-216.pa.vic.optusnet.com.au)
[18:10:45] *** Quits: withersh1 (~craig@pa49-184-233-216.pa.vic.optusnet.com.au) (Ping timeout: 260 seconds)
[18:14:07] *** Joins: drdo (~drdo@overlord0.drdo.eu)
[18:19:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:20:45] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:21:04] <drdo> I'm a bit confused on what the point of gen_server is. Why would I spawn a process and deal with all this message passing just to bottleneck all my code in a single process that processes requests sequentially?
[18:26:13] *** Joins: rgrinberg (~textual@ip152-195-159-186.ct.co.cr)
[18:45:32] <hauleth> drdo: you can spawn more than one process
[18:46:20] <hauleth> For example when using Cowboy then each connection is separate process
[18:46:35] <hauleth> You can have pool of processes
[18:48:04] <drdo> Sure, I can do all of this. My questions is, the gen_server behaviour seems to be treated as something that is ubiquitous in erlang, but I'm finding it hard to imagine situations where I'd want one
[18:48:09] <drdo> *question
[18:48:30] <hauleth> Depends on the code you write
[18:48:44] <hauleth> Many libraries abstract that gen_servers from you
[18:48:58] <hauleth> So you do not use it directly
[18:49:03] <hauleth> But it is still there
[18:49:28] <drdo> Yes, but what would I actually use one for. So far to me it seems like a very elaborate way to have shared state
[18:50:44] <hauleth> Yes, but it can also be used to do work periodically, to limit the error fall
[18:51:08] <hauleth> You can use it to keep state, not really to share it
[18:51:46] <hauleth> For example if you use `socket` backend for `gen_tcp` then it uses process
[18:52:05] <drdo> Well, in essence it seems to be a mutex on the State, albeit a complicated one
[18:52:58] <hauleth> Yes and no
[18:53:15] <hauleth> As I said, you can use it without sharing
[18:53:30] <hauleth> For example listen on events from the bus and then react in some way
[18:54:05] <hauleth> For example I have gen_server that refreshes materialized view in the DB periodically
[18:56:13] <drdo> hauleth: and what does that gen_server do more speficically? (i.e. what requests does it accept)
[18:56:43] <hauleth> it is just wrapper on a function that does receive and then calls itself
[18:57:42] <mc_> drdo: if you're sending a message to the gen_server, how do you know a response in your mailbox is from the gen_server?
[18:57:59] <mc_> you have to implement creating a reference()
[18:58:01] <mc_> and do all that checking
[18:58:10] <mc_> this is hidden behind gen_server:call
[18:58:25] <drdo> mc_: Well, I wouldn't do any of that. I'd just call a regular function
[18:58:33] <drdo> Rather than have a process
[18:59:17] <mc_> sure, if you're just processing things linearly
[18:59:18] <drdo> Which is back to my point, what gen_server really seems to provide is the ability to mutate shared state
[19:00:10] <mc_> yes, with lots of testing and hardening and consistency baked in
[19:00:30] <tristan> I'd suggest going and looking at some real world projects and how they use gen_server/gen_statem
[19:00:55] <hauleth> drdo: super simple, dumbed down, gen_server-like implementation http://ix.io/3CjV
[19:00:57] <drdo> tristan: That seems like a good idea, got any specific suggestions?
[19:01:19] <drdo> hauleth: my problem isnt' with the implementation, but rather the use cases
[19:01:22] <drdo> *isn't
[19:01:42] <drdo> I of course have some ideas on where this could be useful
[19:02:08] <hauleth> My simple example of implementation of ICMP protocol on top of `socket` module https://github.com/hauleth/gen_icmp/blob/master/src/gen_icmp_server.erl
[19:02:10] <drdo> But what confuses me is that this seems rather niche. Yet it is sold in erlang books as if I'm going to be using gen_server a dozen times per project
[19:02:27] <drdo> And it leads me to think that I'm missing something
[19:03:14] <mc_> we have 72 modules that implement the gen_server behaviour in kazoo
[19:03:17] <mc_> for one
[19:03:26] <hauleth> As I said, in many cases it will be hidden from you
[19:04:20] <tristan> drdo: i guess top of my mind is this one just because I'v ebeen working on it today. it is gen_statem, but basically the same thing, https://github.com/open-telemetry/opentelemetry-erlang/blob/main/apps/opentelemetry/src/otel_batch_processor.erl
[19:04:51] <hauleth> Example in Elixir project I am working on - refreshing materialised view https://gitlab.com/hauleth/langusta/-/blob/master/lib/langusta/submissions/refresher.ex
[19:08:30] <hauleth> Another example - keep alive connections in Hackney https://github.com/benoitc/hackney/blob/254ce97505a9ab677e50287c276b869d4ff79a39/src/hackney_connections.erl
[19:10:42] *** Joins: BadRequest (uid3514@user/badrequest)
[19:11:23] *** Joins: blaze (~blaze@user/blaze)
[19:14:04] <hauleth> drdo: I think that in any non-toy project there will be gen_server
[19:14:17] <hauleth> If not directly, then through some library
[19:14:42] <hauleth> Excluding obvious processes like init
[19:27:48] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[19:43:05] *** Quits: cp- (~cp-@b157153.ppp.asahi-net.or.jp) (Ping timeout: 265 seconds)
[19:44:00] *** Joins: curious-user (~user@user/curious-user)
[19:44:03] *** Joins: cp- (~cp-@b157153.ppp.asahi-net.or.jp)
[19:45:39] <curious-user> hi, if i have 10 scheduler threads and 100 erlang lighweight processes, and then ask these 100 processes to read different large files, would first 10 processes block 10 scheduler threads and leave other 90 process to wait?
[19:45:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:47:19] <rkallos> It would depend on how many bytes you want to read at a time.
[19:47:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:49:56] <curious-user> rkallos: does that mean that preemptive scheduling can't interrupt io operation to give another process a chance do its thing?
[19:53:18] <rkallos> I seem to be wrong. Reading the entire contents of a file appears to call a NIF in prim_file.erl. I'm looking for the implementation now, but if it's a dirty NIF, then it won't block an entire scheduler
[19:55:32] <rkallos> Yeah, it's a dirty NIF. This means that it gets to run in a thread pool separate from the scheduler threads. Reading a big file won't block an entire scheduler.
[19:56:42] <rkallos> More likely is that the scheduler threads will be scheduled out by the OS to run the threads that are reading the files, allocating memory, etc.
[19:57:40] <curious-user> rkallos: interesting, thank you for info! do you know how that separate thread pool is called and if its size is configurable?
[19:58:26] *** Joins: Corbit (~Corbit@2001:a61:2a55:d801:dcc6:6367:7027:74c0)
[19:58:59] <curious-user> is it "PollThreads"?
[20:02:06] <curious-user> or maybe "DirtySchedulers"?
[20:07:23] <rkallos> Yes! See the +SDcpu option to erl.
[20:08:40] <rkallos> Sorry, wrong again; +SDio is the option ;)
[20:09:05] <rkallos> There are two thread pools for dirty NIFs, one for CPU-bound NIFs, and one for IO-bound NIFs
[20:12:13] <rkallos> The number of threads for dirty NIFs, whether CPU or IO, is configurable when calling erl, but it appears that only the number of dirty CPU schedulers can be configured at runtime, with erlang:system_flag/2
[20:35:18] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:43:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[20:54:59] *** Quits: rgrinberg (~textual@ip152-195-159-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:56:17] *** Joins: rgrinberg (~textual@201.182.226.118)
[21:13:59] <curious-user> rkallos: thanks you!
[21:18:48] *** Quits: blaze (~blaze@user/blaze) (Quit: WeeChat 3.3)
[21:25:12] *** Quits: curious-user (~user@user/curious-user) (Quit: WeeChat 3.3)
[22:03:57] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:07:42] *** Joins: rgrinberg (~textual@201.182.226.118)
[22:36:21] *** Quits: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6) (Remote host closed the connection)
[22:36:30] *** Joins: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6)
[22:38:18] *** Quits: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6) (Read error: Connection reset by peer)
[22:38:56] *** Joins: craigger (~cwhipp@2600:8800:2500:a45:d66e:eff:fe1f:53d6)
[22:54:42] *** Quits: Corbit (~Corbit@2001:a61:2a55:d801:dcc6:6367:7027:74c0) (Quit: WeeChat 3.1)
[23:26:08] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:43:47] *** ski_ is now known as ski
[23:52:24] *** Quits: xek (~xek@89-72-114-215.dynamic.chello.pl) (Ping timeout: 258 seconds)
[23:57:25] *** Quits: phaleth_ (~phaleth@user/phaleth) (Quit: phaleth_)
