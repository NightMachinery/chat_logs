[00:05:39] *** Joins: ur5us_ (~ur5us@2406:e002:6804:8a01:f026:9131:1160:dcf8)
[00:08:16] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1425:fb3a:f0dc:6899)
[00:13:57] *** Quits: cabal704 (~cabal704@user/cabal704) (Ping timeout: 240 seconds)
[00:14:33] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:16:12] *** Joins: cabal704 (~cabal704@user/cabal704)
[00:33:48] *** Quits: alxarch (~alxarch@ppp-94-66-221-18.home.otenet.gr) (Ping timeout: 240 seconds)
[00:36:56] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1425:fb3a:f0dc:6899) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:39:46] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1425:fb3a:f0dc:6899)
[00:42:38] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[00:43:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:45:10] *** Joins: Guest17 (~Guest17@185.42.249.169)
[00:48:59] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[00:52:07] *** Quits: Guest17 (~Guest17@185.42.249.169) (Ping timeout: 256 seconds)
[00:58:49] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1425:fb3a:f0dc:6899) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:20] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:1425:fb3a:f0dc:6899)
[01:02:17] *** Quits: jemius (~imperator@200116b82df3930097163bb5ed706304.dip.versatel-1u1.de) (Quit: Leaving)
[01:14:07] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[01:18:17] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:1425:fb3a:f0dc:6899) (Ping timeout: 240 seconds)
[01:20:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[01:21:04] *** Joins: kenran (~kenran@200116b82bed0b0071c8f52489bfb401.dip.versatel-1u1.de)
[01:27:52] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:fb55:f4b:9349:d06d) (Ping timeout: 250 seconds)
[01:29:12] *** Quits: kenran (~kenran@200116b82bed0b0071c8f52489bfb401.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[01:49:54] *** Quits: ur5us_ (~ur5us@2406:e002:6804:8a01:f026:9131:1160:dcf8) (Remote host closed the connection)
[01:51:17] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[01:59:00] *** Joins: greaser|q (greaser@antihype.space)
[01:59:31] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 245 seconds)
[02:00:06] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[02:00:06] *** Joins: greaser|q (greaser@user/greasemonkey)
[02:00:10] *** greaser|q is now known as GreaseMonkey
[02:02:01] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 245 seconds)
[02:09:04] *** Joins: kron (~weechat@user/qaph)
[02:17:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:18:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[02:26:26] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 252 seconds)
[02:26:54] *** Joins: kron (~weechat@user/qaph)
[02:27:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:33:55] *** Quits: Snetry (~snetry@dslb-146-060-142-061.146.060.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[02:34:06] *** Quits: frett27 (~frett27@2a01:e0a:58a:6c00:fdf4:40b8:c8d9:7945) (Ping timeout: 245 seconds)
[02:34:12] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:e806:c1f9:7fcc:ee25)
[02:37:23] *** Joins: Snetry (~snetry@ipservice-092-209-149-049.092.209.pools.vodafone-ip.de)
[02:42:55] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:e806:c1f9:7fcc:ee25) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:46:32] *** Quits: Snetry (~snetry@ipservice-092-209-149-049.092.209.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[03:47:18] *** Joins: Snetry (~snetry@ipservice-092-209-109-206.092.209.pools.vodafone-ip.de)
[03:53:50] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[04:18:26] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:e806:c1f9:7fcc:ee25)
[04:26:35] *** Joins: todo75 (~todo75@user/todo75)
[04:55:10] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrz4ktp4p5vobqt.ipv6.telus.net)
[05:24:41] *** Quits: koakuma (~koakuma@user/koakuma) (Ping timeout: 256 seconds)
[05:24:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[05:26:12] *** Joins: koakuma (~koakuma@user/koakuma)
[05:28:32] *** Joins: livoreno (~livoreno@user/notzmv)
[05:50:17] *** Quits: moog (~moog@107.126.53.146) (Remote host closed the connection)
[05:50:38] *** Joins: moog (~moog@107.126.53.146)
[06:16:04] *** Quits: ravella (~ravella@user/ryanavella) (Remote host closed the connection)
[06:16:29] *** Joins: ravella (~ravella@user/ryanavella)
[06:17:48] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[06:18:50] *** Joins: alxarch (~alxarch@ppp-94-66-221-18.home.otenet.gr)
[06:21:04] *** Quits: frmdstryr (~jrm@172.58.203.101) (Ping timeout: 256 seconds)
[06:21:11] *** Joins: notzmv (~zmv@user/notzmv)
[06:23:00] *** Quits: alxarch (~alxarch@ppp-94-66-221-18.home.otenet.gr) (Ping timeout: 240 seconds)
[06:24:40] *** Quits: kotto (~kotto@2001:8a0:ee37:f500:2ad2:44ff:fe68:9566) (Quit: WeeChat 3.4)
[06:26:57] *** Joins: kotto (~kotto@188.250.182.133)
[06:30:22] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[06:42:02] *** Quits: NickH (~hastings@aj147019.dynamic.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[06:43:45] *** Joins: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp)
[07:25:45] *** Joins: masoudd (~masoudd@user/masoudd)
[07:26:48] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[07:39:53] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:54:09] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[08:02:01] *** Joins: notzmv (~zmv@user/notzmv)
[08:21:32] *** Quits: sebonirc (~sebonirc@8.9.88.219) (Ping timeout: 240 seconds)
[08:33:20] *** Joins: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles)
[08:35:35] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[08:43:18] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[08:54:42] *** Quits: hspak (~hspak@user/hspak) (Quit: The Lounge - https://thelounge.chat)
[08:56:32] *** Joins: hspak (~hspak@user/hspak)
[09:09:35] *** Quits: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[09:15:53] *** Joins: bozo (~bozo@188.252.187.207)
[09:17:00] *** Quits: bozo_ (~bozo@188.252.190.171) (Ping timeout: 240 seconds)
[09:43:33] *** Joins: ltriant (~ltriant@118.102.122.246)
[09:51:35] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 256 seconds)
[09:58:20] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:12:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[10:32:18] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:e806:c1f9:7fcc:ee25) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:32:42] *** Joins: shaken (~shaken@nlt-1.opensvr.net)
[10:50:31] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[10:55:29] *** Joins: jjido (~Denis@94.4.149.217)
[11:00:37] *** Quits: shaken (~shaken@nlt-1.opensvr.net) (Quit: leaving)
[11:09:33] *** Joins: alxarch (~alxarch@ppp-94-66-221-18.home.otenet.gr)
[11:24:50] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:33:37] *** Quits: gwizon (~gwizon@ool-45798b07.dyn.optonline.net) (Quit: Lost terminal)
[11:47:08] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[12:16:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:00:20] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:01:38] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:02:20] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[13:35:54] *** Joins: Guest17 (~Guest17@185.42.249.169)
[13:35:59] *** Quits: Guest17 (~Guest17@185.42.249.169) (Client Quit)
[13:49:31] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 245 seconds)
[14:38:55] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrz4ktp4p5vobqt.ipv6.telus.net) ()
[14:41:17] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[14:44:24] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[14:44:31] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[14:48:10] *** Joins: ltriant (~ltriant@118.102.122.246)
[14:53:26] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 272 seconds)
[14:56:34] *** Joins: notapenguin (~ryu@187.3.254.107)
[15:05:11] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:17:17] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Remote host closed the connection)
[15:18:33] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[15:39:13] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:47:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[15:55:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[16:00:17] *** Joins: frmdstryr (~jrm@172.58.203.101)
[16:00:38] *** Quits: frmdstryr (~jrm@172.58.203.101) (Remote host closed the connection)
[16:44:12] *** Quits: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Ping timeout: 240 seconds)
[16:48:58] *** Joins: kenran (~kenran@200116b82b58bf00ac94994ddceb2eda.dip.versatel-1u1.de)
[16:57:31] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[17:03:26] *** Joins: tsmanner (~tsmanner@ool-182d23f9.dyn.optonline.net)
[17:50:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:56:35] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:05:35] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 250 seconds)
[18:10:45] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[18:29:31] *** Joins: arkurious (~arkurious@user/arkurious)
[18:34:58] *** Joins: phaleth (~user@user/phaleth)
[18:35:03] <marler8997_> I want to learn more about the new direction for packed structs.  I see features going away but am unsure of what their replacement is.  Sounds like most of the use cases I thought packed structs were for will now be handled by extern structs?
[18:36:00] <ikskuh> what was your thought use case of packed structs?
[18:36:39] <marler8997_> any time you needed full control over the memory layout of your struct, which now appears to be wrong, so I'm not sure what the purpose of them is
[18:37:05] <marler8997_> here's an example where I would have used a packed struct: https://github.com/marler8997/maros/blob/master/kernel/bootheader.zig
[18:37:30] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:49aa:ca07:3aa6:4b6e)
[18:38:42] <ikskuh> yeah that's something i'd definitly use a extern struct for
[18:38:51] <motiejus> likewise interested. I am also using packed structs for storing/reading their contents into files (relatedly, created an issue and a PR recently: https://github.com/ziglang/zig/pull/10941
[18:39:05] <ikskuh> the problem is that it's very hard to define the semantics of packed structs
[18:39:25] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:49aa:ca07:3aa6:4b6e) (Client Quit)
[18:39:32] <ikskuh> it's "trivial" for byte-aligned stuff, but this could be covered with align(1) fields already
[18:39:39] <marler8997_> I'm also not sure why array support is being removed for structs
[18:39:49] <ikskuh> huh?
[18:39:51] <ikskuh> wdym?
[18:40:06] <marler8997_> you can't have arrays as fields in packed structs anymore
[18:40:24] <ikskuh> source on this? *thinking*
[18:40:33] <motiejus> huh? this seems to work: https://git.sr.ht/~motiejus/turbonss/tree/main/item/src/header.zig#L20
[18:40:48] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:49aa:ca07:3aa6:4b6e)
[18:40:52] <ikskuh> marler8997_: i don't know of any such intentions
[18:40:54] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:40:58] <motiejus> (at least it worked yesterday until I broke all of the code this morning)
[18:41:36] <marler8997_> https://github.com/ziglang/zig/commit/6249a24e81b9b3df3d5ca99b57f22470b9ac486c
[18:41:45] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:49aa:ca07:3aa6:4b6e) (Client Quit)
[18:41:47] <marler8997_> ...removes the
[18:41:47] <marler8997_> ability to put pointers and arrays inside packed structs.
[18:42:32] <ikskuh> not sure if that's a permanent change
[18:42:46] <marler8997_> I think it is
[18:42:52] <plumeus> I guess it's because stuff like `[8]u1` has a size of 8 and not 1 with the status quo.
[18:43:13] <plumeus> But having 8 fields of `u1` in a packaged struct should be a size of 1, granted proper alignment.
[18:43:57] <marler8997_> here are the 3 statements andrew said were important to understand the new direction of packed structs:
[18:44:03] <marler8997_> 1. every packed struct has 1 host integer
[18:44:07] <marler8997_> 2. only types will be integers, floats, bools, other packed structs
[18:44:11] <marler8997_> 3. can't change alignment per field
[18:45:12] <plumeus> huh, no enums?
[18:45:37] <marler8997_> to me it sounds like the only use case for packed structs now is creating small types that encode a few different fields in them, so it's a convenient way to reduce memory size
[18:45:57] <marler8997_> maybe enums as well, this is what he said on stream and could have easily forgot a few items
[18:46:43] <marler8997_> Along with arrays, I'm also unsure why pointers are being removed
[18:46:45] <ifreund> enums are allowed if they have an explict tag type iirc
[18:46:59] <plumeus> I wonder how much of my code will break with stage2. It's going to be fun.
[18:47:43] <ifreund> marler8997_: I think you should see this new packed struct direction as a massive simplification that can be built on as practical use-cases are examined
[18:48:31] <ifreund> right now extern structs solve byte-aligned use cases and packed structs solve bit aligned use cases from my view
[18:48:48] <marler8997_> oh that's a good distinction
[18:49:05] <ifreund> and together they solve every concrete use-case I currently have 
[18:49:31] <plumeus> I was under the impression that `extern struct` is currently discouraged for use-cases outside of interfacing with C code?
[18:49:47] <marler8997_> that brings up a question, I thought "extern structs" were supposed to match the C ABI, which can change per platform
[18:50:34] <marler8997_> I saw "packed" as "extern" for with more guarantees like field order is always the same on every platform and all sizes are the same on every platform
[18:50:37] *** Quits: marcj (~marc@205.175.215.11) (Ping timeout: 240 seconds)
[18:50:38] <plumeus> "This kind of struct should only be used for compatibility with the C ABI. Every other use case should be solved with packed struct or normal struct."
[18:50:45] <bgiannan> https://pithlessly.github.io/allocgate.html does that mean the days of @fieldParentPtr are counted ?
[18:50:46] <plumeus> Quote from https://ziglang.org/documentation/master/#extern-struct
[18:51:00] <plumeus> So, I guess they'll change the use-cases for packed and extern?
[18:51:20] <ifreund> bgiannan: no, it's very useful for other things beyond that pattern
[18:51:52] <bgiannan> ifreund, thank god, i'm not about to change that part of my projects
[18:52:21] <marler8997_> So is Zig going to change the definition of "extern" to not mean "match what C does"?
[18:52:55] <plumeus> I have a code right now where I have a packed struct made mostly of array of bytes, where I do a `@bitCast` to convert it back and forth, welp
[18:53:29] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:49aa:ca07:3aa6:4b6e)
[18:53:30] <ifreund> marler8997_: "match what C does" is actually a bit of a misnomer, extern matches the ABI defined by the target operating system
[18:54:00] <ifreund> which in most current cases is defined using C types because all? major operating systems that currently exist are written in C
[18:54:37] <ikskuh> marler8997_: "match what C does" is already wrong, as zig allows to under-align fields while C does not
[18:54:45] <ikskuh> you cannot have a align(1) u32 in C, but zig can do that
[18:54:57] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[18:55:00] <ikskuh> imho the distinction bit vs. byte aligned is very good, ifreund!
[18:55:01] *** Joins: jjido (~Denis@94.4.149.217)
[18:55:09] *** Joins: marcj (~marc@205.175.215.11)
[18:55:12] <ikskuh> but i think we can allow arrays in packed structs
[18:55:14] <marler8997_> https://ziglang.org/documentation/master/#extern-struct
[18:55:21] <marler8997_> "An extern struct has in-memory layout guaranteed to match the C ABI for the target."
[18:55:22] *** Joins: gwizon (~gwizon@ool-45798b07.dyn.optonline.net)
[18:55:26] <ikskuh> which have to be packed/unpacked on conversion though
[18:56:17] <ikskuh> packed struct { a: [3]u1, b: u5 } should be equivalent to packed struct { a0: u1, a1: u1, a2: u1, b: u5 }
[18:56:32] <ifreund> ikskuh: Technically we can allow arrays yes, but I'm not sold on their use-cases tbh
[18:56:53] <ikskuh> ifreund: a lot of mmio registers contain bit arrays
[18:56:56] <plumeus> marler8997_, you made me question if the Matrix <-> IRC bridge was working because you repeated the quote and link I sent minutes ago, lol
[18:56:58] <tsmanner> marler8997_ beat me to it!  ifreund do you have an example of any ABI other than the C-ABI?  O dpm
[18:56:59] <ifreund> anyhow like I said view the current stage2 implementation as an actually simple but very useful starting point for further iteration
[18:57:02] <ikskuh> which are typically accessed via dynamic shifting
[18:57:27] <tsmanner> s/O dpm// (off by one on my keyboard)
[18:57:28] <ifreund> tsmanner, marler8997_: I'm saying that this "C ABI" you speak of is not defined by C but rather by the operating systems
[18:57:34] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:57:36] <ifreund> e.g. System V ABI
[18:58:08] <tsmanner> The C ABI is a combination of C, OS, and platform architecture, and is a C specific concept
[18:58:25] <marler8997_> ifruend fair enough that is a good distinction
[18:59:11] <ifreund> even in a world without C would would still have ABIs
[18:59:31] <marler8997_> sure, but I think you're missing the point of my question here
[18:59:54] <ikskuh> ifreund: use case for packed struct + array:
[18:59:56] <ikskuh> https://www.pololu.com/file/0J431/user.manual.lpc17xx.pdf 
[19:00:01] <tsmanner> There are other ABIs, but the keyword 'extern' in zig, according to all the current zig docs, exists to match the C-ABI (which happens to be OS and platform dependent)
[19:00:06] <ikskuh> check out chapter 8.5.1, pdf page 108
[19:00:15] <ifreund> I think extern is/will be defined in terms of target operating system ABIs
[19:00:29] <ikskuh> PINSEL = packed struct { gpio: [16]u2 };
[19:00:37] <marler8997_> The point is that extern is not defined by Zig, it's defined by the target OS/platforms and Zig matches whatever they do.
[19:00:53] <marler8997_> So there's no guarantee of field order, field alignment/size
[19:01:10] <ifreund> extern struct and unions also happen to use the same rules pretty much everywhere
[19:01:21] <ifreund> where you will see more variation in the ABI is with calling conventions
[19:02:08] <ifreund> Note that we have both C and SysV there already 
[19:03:35] <ifreund> Discussion: https://github.com/ziglang/zig/issues/6700
[19:05:29] <ifreund> ikskuh: that looks like it should be a bunch of different enum (u2) {}s
[19:06:01] <ifreund> e.g. enum (u2) { gpio0, rd1, txd3, sda1 }
[19:06:09] <ifreund> maybe I'm reading it wrong though
[19:06:25] <ikskuh> there are a lot of those registers with the same design
[19:06:44] <ikskuh> but yeah, that depends on the philosophy
[19:06:46] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[19:07:38] <ikskuh> this was just the first mmio register that came into my mind that had a packed-array like structure
[19:07:45] <tsmanner> ifreund On struct/union layout variation: That's true by convention, but not by rule.  Extern, right now, is not defined in terms of OS, it's defined in every use in the zig docs to be C ABI.  Same goes for export.  Redefining it is a fine thing to do, but it makes the meaning of extern context-sensitive.
[19:08:26] <ikskuh> PINMODE0 to PINMODE4 are probably a better example (8.5.9, page 112)
[19:08:27] <ifreund> tsmanner: you're right, I'm not really talking about what the current docs say but rather what I think the spec should be
[19:09:01] <ifreund> we used to only have the C callconv but SysV was later added because there was a use case for using it on an operating system where the default C calling convention is something different
[19:09:08] <marler8997_> ifruend but C compilers do things differently
[19:09:31] <tsmanner> ifreund I'm curious, because I interop with C a lot and sometimes on esoteric system, I'm wondering how to guarantee that an actually-defined-in-C extern struct would be reliably handled?
[19:09:58] <ifreund> I expect that a similar approach will be taken for extern struct eventually as well, allowing to target either "whatever C does for the target" or "this specific OS ABI" as one chooses
[19:10:45] <ifreund> And maybe "whatever C does for the target" would be better defined as "the target's native ABI"
[19:11:15] <ifreund> if I write an OS in zig, I might come up with my own ABI not tied to C's legacy
[19:11:16] <tsmanner> OK, similar to how callconv(.C) can be used instead of export
[19:11:33] <ifreund> uh, those are two distinct things
[19:11:47] <ifreund> callconv(.C) does not imply that a function will be exported
[19:12:03] <marler8997_> ifruend write your own ABI not tied to C's legacy?  C doesn't define an ABI
[19:12:06] <ifreund> export currently implies callconv(.C) but that can be overridden
[19:12:16] <tsmanner> Fair, I mean in terms of the layout, the callconv(.C) makes it C-ABI compatible, export does that AND exports the symbol
[19:12:32] <ifreund> marler8997_: no, but operating systems define their ABI in terms of C types
[19:12:34] <marler8997_> it's the compilers/platforms/architectures that define the ABI for C, not the other way around
[19:12:57] <marler8997_> not really
[19:13:02] <tsmanner> C defined a couple of things about the ABI, like that char is 1 byte, but 1 byte is defined by the OS+platform.  A zig-implemented OS would still be a suitable target for C code, and thus would have a C-ABI that would have to conform to the parts of the ABI that C actually does define
[19:14:11] <marler8997_> the ABI is defined by how the toolchain interprets C, not the C code itself
[19:16:00] <marler8997_> if you write an OS, you have to define your own ABI, C doesn't impose one on you so I don't know what "tie" you might be severing
[19:20:22] <tsmanner> The only "rules" I can remember are that that C compiler must define char to be 1 byte, and to allow the char* type to point to anything.  Everything else is up to the OS and architecture.  Am I missing something marler8997_?
[19:20:42] <marler8997_> by removing these packed features, it sounds to me like Zig is saying there's no real use cases for having full control of in-memory representation (field order/size/padding) other than to match extern ABI's or bit packing
[19:21:34] <marler8997_> tsmanner, point is that C does not define the ABI, the implementation does
[19:23:34] <tsmanner> fair
[19:24:08] *** Parts: fcambus (~fcambus@static.88-198-193-213.clients.your-server.de) ()
[19:24:14] <marler8997_> so if I needed to make a struct, where field "x" is at offset 100 from the start of the struct, my only choice is to use "packed", but now packed as a bunch of restrictions
[19:24:34] <marler8997_> like this linux bootheader example: https://github.com/marler8997/maros/blob/master/kernel/bootheader.zig
[19:24:55] <marler8997_> linux defines parameters in terms of fixed offsets (see the comptime assert blocks)
[19:25:46] <marler8997_> so to be semantically correct on all platforms, I need to use packed, which means I'll no longer be able to use arrays
[19:26:54] <ikskuh> marler8997_: we had a similar discussion in the stage2-meetup channel earlier
[19:27:12] <ikskuh> i think the idea of having both a byte- and bit-controllable environment is enough for the language itself
[19:27:25] <ikskuh> we can implement all other layouting techniques on top of that with comptime features
[19:27:43] <ikskuh> ExternStruct("a: u24, b: i8");
[19:27:44] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:27:47] <ikskuh> or whatever
[19:28:19] <marler8997_> I'm still confused though
[19:28:32] <marler8997_> it's simple, extern is to match extern ABIS, packed is for full memory control
[19:28:34] *** Joins: mikezackles_ (~mikezackl@gateway/tor-sasl/mikezackles)
[19:28:43] <marler8997_> that's what it is today, what's the new direction?
[19:28:49] <ikskuh> it's not
[19:28:53] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[19:28:57] <ikskuh> it's just another take on memory control
[19:29:08] <marler8997_> extern is not memory control though, only packed is
[19:29:09] <ikskuh> packed is a lot, but it's definitly not trivial 
[19:29:29] *** Parts: sh4_ (~sh4@user/sh4) (Leaving)
[19:29:29] <marler8997_> extern can order fields in any order, size them with any size and add any arbitrary padding
[19:29:30] <ikskuh> and my definition concept is pretty sweet as it actually gives you perfect memory control
[19:29:34] <marler8997_> you're giving control to something else
[19:30:01] <tsmanner> Seems like the word extern is a misnomer there.  Could packed have an increment size or something?  e.g. packed(.Bit) struct ... and packed(.Byte) struct ...
[19:30:25] <ikskuh> tsmanner: the problem is that "bit packed" isn't actually a good or helpful definition
[19:31:00] <ikskuh> and it wasn't defined at all previously how packed actually worked
[19:31:05] <tsmanner> ikskuh why's that?  It seems pretty useful to me for creating lenses to reinterpret ints into sets of fields
[19:31:15] <ikskuh> packed struct { a: u4, b: u4 }
[19:31:17] <ikskuh> what's the layout of that?
[19:32:42] <ikskuh> the stage1 implementation was basically undefined
[19:33:00] <tsmanner> According to the docs that would be an 8-bit struct which had that single byte of data that could be safely @bitCast to a u8, where a was the high-order nibble and b was the low-order nibble.
[19:33:26] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:33:45] <tsmanner> The example here appears to me to define it pretty strongly, based only on the endianness of the system. https://ziglang.org/documentation/0.9.1/#packed-struct
[19:34:16] <ikskuh> why is a the high-oprder nibble?
[19:34:24] <ikskuh> because it's not on little endian, and it's on big endian ^^
[19:34:38] <tsmanner> because it came first, and "Fields remain in the order declared."
[19:34:43] <tsmanner> big endian only concerns bytes, not bits
[19:34:47] <ikskuh> so 0x01 will either be { a=1,b=0 } or {a=0,b=1}
[19:34:49] <tsmanner> within that byte, it is well defined
[19:35:04] <ikskuh> no, it will swap positions depending on endian
[19:35:09] <ikskuh> at least thats what the implementation did
[19:35:26] <tsmanner> For bit endian it will pack the fields in reverse, regardless of their alignment?
[19:35:50] <ikskuh> https://godbolt.org/z/GnW73hj9x
[19:36:00] <ikskuh> it will do weird shit
[19:36:34] <ikskuh> the new definition is: fields are always ordered LSB to MSB in an integer with @bitSizeOf(@This()) bits
[19:39:17] <ikskuh> the removal of arrays is weird, and i would like to have them in again
[19:43:20] <tsmanner> Ah ok I misread in the example the quarter3/quarter4 and missed that it swapped the 1 and 2.  ikskuh I still don't understand why bit-packed is not good or helpful though
[19:44:17] <ikskuh> it's super helpful
[19:44:25] <ikskuh> it's just not trivial to find a reasonable definition of it
[19:44:49] <ikskuh> (disclaimer: the new integer backed definition is based on work from SpexGuy and me)
[19:45:18] <ikskuh> and i think it's the only definition where i can say: i can understand how the final data looks like when i read the code
[19:45:37] <ikskuh> i thought about a lot of definitions, but none were truly simple to understand
[19:45:46] <ikskuh> because endianess made things weird as heck
[19:46:12] <ikskuh> if everything would be little endian, it would be much easier, but the world isn't that easy sadly
[19:46:14] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:47:13] <ikskuh> as you can see, the thing that isn't well defined in Zig yet is the ABI compatible struct vs. byte aligned structs
[19:48:43] <ikskuh> if i remember correct, the C abi requires at least orderning of the fields from "low" to "high" addresses
[19:49:23] <ikskuh> if not stated explicitly, then definitly by the requirement that struct pointers can be cast to compatible struct pointers (structs which share the same prefix)
[19:52:37] <ikskuh> marler8997_: https://mq32.de/public/7830b5bb8cc490fe2cbcd2e21e5b5d4394091356.png
[19:52:50] <ikskuh> C layout structs are not allowed to reorder fields
[20:01:00] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Read error: Connection reset by peer)
[20:01:19] <tsmanner> ikskuh completely agree on endianness making things weird, I happen to work on a big endian processor project, and it gets wild sometimes trying to wrap my brain around what's going on in there lol
[20:01:29] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[20:03:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[20:04:51] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Quit: WeeChat 3.4)
[20:12:30] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[20:13:54] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[20:14:12] *** Quits: kenran (~kenran@200116b82b58bf00ac94994ddceb2eda.dip.versatel-1u1.de) (Ping timeout: 240 seconds)
[20:15:09] *** Joins: kenran (~kenran@200116b82b58bf00e0673ca75d341939.dip.versatel-1u1.de)
[20:18:24] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:31:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:34:48] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:35:19] *** Quits: poqomchi (~poqomchi@user/poqomchi) (Ping timeout: 256 seconds)
[20:36:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 245 seconds)
[20:39:45] *** Joins: ltriant (~ltriant@118.102.122.246)
[20:44:37] *** Quits: ltriant (~ltriant@118.102.122.246) (Ping timeout: 250 seconds)
[20:46:57] *** Quits: Snetry (~snetry@ipservice-092-209-109-206.092.209.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[20:48:54] *** Joins: Snetry (~snetry@dslb-092-072-120-066.092.072.pools.vodafone-ip.de)
[20:53:16] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[20:54:02] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[20:54:16] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:01:19] *** Joins: frmdstryr (~jrm@172.58.203.101)
[21:05:12] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[21:05:53] *** Joins: jemius (~imperator@200116b82d1741001511b85e4762230e.dip.versatel-1u1.de)
[21:11:47] *** Quits: frmdstryr (~jrm@172.58.203.101) (Remote host closed the connection)
[21:23:49] *** Quits: flokli (~flokli@2a01:4f9:c010:6c2:9479:5dff:fe37:7b16) (Ping timeout: 240 seconds)
[21:24:45] *** Joins: flokli (~flokli@2a01:4f9:c010:6c2:9479:5dff:fe37:7b16)
[21:26:13] *** Quits: slowjo (~slowjo@sourcehut/user/slowjo) (Ping timeout: 240 seconds)
[21:26:53] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:26:55] *** Joins: slowjo (~slowjo@sourcehut/user/slowjo)
[21:27:07] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[21:31:04] *** Joins: phaleth (~user@user/phaleth)
[21:32:50] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:38:31] *** Quits: kenran (~kenran@200116b82b58bf00e0673ca75d341939.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[22:03:08] *** Joins: cabal704 (~cabal704@user/cabal704)
[22:04:57] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[22:06:45] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[22:17:31] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:18:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[22:18:43] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Remote host closed the connection)
[22:31:00] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[22:31:00] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[22:31:00] *** Joins: tane (~tane@user/tane)
[22:36:24] *** Quits: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp) (Ping timeout: 272 seconds)
[22:36:46] *** Joins: xackus (~xackus@185.15.0.3)
[22:45:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[22:55:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:18:28] *** Joins: frett27 (~frett27@2a01:e0a:58a:6c00:89f9:180d:416f:2376)
[23:20:41] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:49aa:ca07:3aa6:4b6e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:30:16] *** Quits: freshcoffee1 (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[23:31:39] *** Joins: sebonirc (~sebonirc@8.9.88.219)
[23:36:53] *** Joins: NickH (~hastings@aj154045.dynamic.ppp.asahi-net.or.jp)
[23:39:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[23:43:55] *** Joins: frmdstryr (~jrm@172.58.203.101)
[23:46:16] <frmdstryr> Is there an equivalent for @field but with decls? Eg @decl(FooStruct, "a")
[23:51:43] <frmdstryr> Nevermind, @field seems to work for both
[23:56:15] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
