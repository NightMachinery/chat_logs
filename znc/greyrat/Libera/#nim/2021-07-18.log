[00:05:42] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[00:08:32] <FromDiscord> <hamidb80> how can i convert a var that has a type `T` to a `ref T` ?
[00:09:06] <FromDiscord> <hamidb80> `(ref T)(myVar)` ?
[00:09:11] <FromDiscord> <Rika> `var a = new T; a[] = old`
[00:09:38] <FromDiscord> <Rika> well, can be `let`
[00:10:56] <FromDiscord> <aleclarson> In reply to @SolitudeSF "{.discardable.}": thx Solitude ^^
[00:20:29] *** Quits: koltrast (403c30d0@h77-53-57-114.cust.a3fiber.se) (Quit: ZNC - http://znc.in)
[00:21:09] <arkanoid> why parseJson is not available at compile time? I'm reading static json from file with readFile into const
[00:22:14] <FromDiscord> <Rika> parseJson is a deeply nested ref object which afaik isnt supported in nimscript
[00:23:05] <FromDiscord> <timotheecour> upvote https://github.com/nim-lang/Nim/pull/15528 if you want to allow it in future
[00:24:42] <arkanoid> (y)
[00:30:26] <arkanoid> the json module unmarshall function "to" function accepts Option type to handle missing values, but equivalent function "to" in marshal module to turn back data structure into json writes Options as {val:...}
[00:31:36] <FromDiscord> <Rika> you dont use marshal module to turn a struct into json
[00:32:22] *** Quits: beshr (~beshr@user/beshr) (Remote host closed the connection)
[00:34:48] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 255 seconds)
[00:37:32] <arkanoid> no?
[00:38:04] <FromDiscord> <Rika> i'm confused, what are you trying to do exactly
[00:38:19] <FromDiscord> <Rika> you use `%` to convert something to a JsonNode
[00:38:28] <FromDiscord> <Rika> (i believe?)
[00:39:46] <arkanoid> I'm reading a json from a static file with readFile + parseJson, then I'm unmarshalling it via "to" function of json module, then I'm editing some attributes of the unmarshalled data structure via internal logic, now I have to re-convert the data structure into json
[00:40:12] <arkanoid> I'm using "$$" of marshal module on the data structure, not
[00:40:14] <arkanoid> *now
[00:41:23] <FromDiscord> <Rika> yes and i believe it's % to go back to json
[00:41:29] <FromDiscord> <Rika> or % i dont remember
[00:43:28] <arkanoid> you're right! thanks
[00:45:12] <FromDiscord> <System64 ~ Flandre Scarlet> I try to interop with C but : https://media.discordapp.net/attachments/371759389889003532/866050423102373928/unknown.png
[00:45:43] <FromDiscord> <System64 ~ Flandre Scarlet> UnDeFiNeD ReFeReNcE To...↵Raaaah I hate theses linker errors
[00:59:22] *** Parts: DrWhax (~DrWhax@37.218.247.209) ()
[00:59:50] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[00:59:50] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[00:59:50] *** Joins: beshr (~beshr@user/beshr)
[01:02:17] *** Joins: koltrast (55df89c8@h77-53-57-114.cust.a3fiber.se)
[01:04:41] <FromDiscord> <System64 ~ Flandre Scarlet> is it normal?
[01:06:20] <FromDiscord> <haxscramper> Normal programs tend to compile, so probably no
[01:06:27] <FromDiscord> <haxscramper> You are missing linkage with some static library
[01:09:28] <FromDiscord> <System64 ~ Flandre Scarlet> It's C source code
[01:10:48] <FromDiscord> <System64 ~ Flandre Scarlet> so I need to compile the C code first?
[01:10:59] *** Joins: vicfred (~vicfred@user/vicfred)
[01:11:28] <FromDiscord> <haxscramper> ...
[01:11:33] <FromDiscord> <haxscramper> Yes, you need to compile whole program
[01:11:46] <FromDiscord> <System64 ~ Flandre Scarlet> Ah
[01:11:56] <FromDiscord> <haxscramper> Nim has `{.compile:` for external c files
[01:12:06] <FromDiscord> <haxscramper> So you don't have to manually run GCC on the files
[01:12:32] <FromDiscord> <System64 ~ Flandre Scarlet> so maybe I have to put a compile for all C files?
[01:13:34] <FromDiscord> <haxscramper> Yes, add all files to .compile., that should work
[01:13:39] <FromDiscord> <bernardo> Nim beginner here.↵Anyone could help me understand how the `ok` operator works? https://github.com/status-im/nim-json-rpc/blob/364dd2ebd132d7eb5e4516099250060b094c3daa/json_rpc/clients/httpclient.nim#L90↵↵I couldn't find anything in the docs
[01:14:36] <FromDiscord> <haxscramper> That is simply a procedure that takes two arguments
[01:14:54] <FromDiscord> <haxscramper> Not an operator, the just omitted parentheses
[01:15:12] <FromDiscord> <System64 ~ Flandre Scarlet> and it works!
[01:18:26] <FromDiscord> <bernardo> In reply to @haxscramper "Not an operator, the": do you mean the `ok` omits the parentheses?↵is that an implicit return?
[01:19:18] <FromDiscord> <Rika> nim MCS
[01:19:34] <FromDiscord> <Rika> you can omit parentheses in "method style call"
[01:19:44] <FromDiscord> <ElegantBeef> Well it's not MCS it's the command syntax 😄
[01:19:48] <FromDiscord> <SolitudeSF> thats not mcs
[01:20:12] <FromDiscord> <Rika> ok i read "operator" and thought binary operator
[01:20:20] <FromDiscord> <Rika> thought they saw `x.ok y`
[01:20:28] <FromDiscord> <Rika> usually what people mistake as operators
[01:21:19] <FromDiscord> <ElegantBeef> Command syntax lets you drop `()` if it's a single statement, if it's nested you can only drop them for the next for example `foo a.fooTwo b`
[01:21:45] <FromDiscord> <ElegantBeef> in this example you cannot supply anymore than 1 extra argument to `fooTwo` due to the result being passed to foo
[01:21:54] <FromDiscord> <Rika> haskell `$` when
[01:23:15] <FromDiscord> <Rika> In reply to @Rika "ok i read "operator"": if you want more explanation, i dont open linkts
[01:23:17] <FromDiscord> <Rika> links
[01:23:24] <FromDiscord> <Rika> it takes me a few seconds to load a link
[01:23:35] <FromDiscord> <ElegantBeef> It's ok rika we believe you
[01:23:47] <FromDiscord> <Rika> sure
[01:23:55] <FromDiscord> <ElegantBeef> Anywho @bernardo  it's documented here https://nim-lang.org/docs/manual.html#procedures-command-invocation-syntax
[01:26:29] <FromDiscord> <treeform> In reply to @arkanoid "why parseJson is not": jsony can parse json at compile time.
[01:26:55] <FromDiscord> <treeform> https://github.com/treeform/jsony
[01:26:57] <fn> <12R2D299> 4GitHub: 7"A loose, direct to object json parser with hooks."
[01:27:07] <arkanoid> treeform, that's a good news! thanks!
[01:27:18] <FromDiscord> <bernardo> In reply to @ElegantBeef "Anywho <@!602790129500684308>  it's": thanks! so `ok` is actually a procedure?
[01:27:24] <FromDiscord> <Rika> yes
[01:37:41] *** Joins: max22- (~maxime@2a01cb0883359800ed361b247e159c0c.ipv6.abo.wanadoo.fr)
[01:38:52] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 245 seconds)
[01:46:58] <FromDiscord> <bernardo> ok found it, it's actually a template: https://github.com/status-im/nim-stew/blob/3c91b8694e15137a81ec7db37c6c58194ec94a6a/stew/results.nim#L292
[01:48:26] <FromDiscord> <bernardo> I had to manually break the `ok` statement to get some clues that it was actually a template, and then I had to manually search through the imported modules↵↵I'm using VSCode, is there some shorter path I could have used to find this?
[01:48:38] <FromDiscord> <ElegantBeef> ctrl click the `ok`
[01:50:09] <FromDiscord> <bernardo> In reply to @ElegantBeef "ctrl click the `ok`": just did it, got nothing
[01:51:08] <FromDiscord> <ElegantBeef> If nimstew was installed as a nimble package it should've worked
[01:51:27] <FromDiscord> <ElegantBeef> Assuming your goto definition works
[01:55:04] <FromDiscord> <bernardo> In reply to @ElegantBeef "*Assuming your goto definition": is that the same as right-click, `Go to Definition (F12)`?
[01:55:28] <FromDiscord> <bernardo> In reply to @ElegantBeef "If nimstew was installed": `nim-stew` is installed, along with all the dependencies for `nim-json-rpc`
[01:58:56] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[02:00:17] <FromDiscord> <bernardo> aha! I had two different extensions (`kosz78.nim` + `nimsaem.nimvscode`), disabling `kosz78.nim` made goto work
[02:00:25] <FromDiscord> <ElegantBeef> Ah there you go
[02:01:12] <FromDiscord> <bernardo> In reply to @ElegantBeef "Ah there you go": thanks again!
[03:14:35] <FromDiscord> <System64 ~ Flandre Scarlet> it works I implemented OPL3 emulation
[03:27:57] *** Quits: max22- (~maxime@2a01cb0883359800ed361b247e159c0c.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:48:49] <FromDiscord> <dom96> No wonder AVs are marking the compiler as malicious https://huskyhacks.dev/2021/07/17/nim-exploit-dev/
[03:49:30] <FromDiscord> <VVX7> seeing a lot of red teams playing with Nim
[03:49:44] <FromDiscord> <VVX7> so yeah, not surprised by that
[03:49:57] <FromDiscord> <dom96> _wonders what a "red team" is_
[03:50:08] <fn> <06Prestige99> offensive hacking
[04:07:32] <FromDiscord> <Daniel> but any programming language can be use for malicious purposes
[04:23:56] <fn> <06Prestige99> depends on the requirements
[04:29:30] <arkanoid> treeform, jsony is great!
[04:32:35] <arkanoid> yeah it is sad that I have to use my nim tools only on backend. Every time I try to build a windows tool I end up fighting with the AV and it looks like I am doing something nasty just to parse an xml
[04:47:34] <FromDiscord> <treeform> I primly develop on windows. I have 0 AV problems?
[04:47:47] <FromDiscord> <treeform> I think I disable all AV is its always bad for programming.
[04:57:57] <FromDiscord> <exithead> People actually program on windows? Wild.
[04:58:57] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[04:59:41] *** Joins: xet7 (~xet7@user/xet7)
[05:02:50] <FromDiscord> <treeform> if you work on games as a hobby, and most of gamers use windows. Its not that bad.
[05:08:28] <FromDiscord> <theangryepicbanana> In reply to @exithead "People actually program on": I prefer using .NET and JVM languages on windows ngl lol
[05:11:21] <FromDiscord> <j$> hey trying to use ffi, when importing structs do I have to declare all the fields?
[05:15:54] <FromDiscord> <stu002> Can I confirm that on macOS the homebrew install of nim does not install testament?
[05:26:07] <fn> <11ForumUpdaterBot99> New thread by Stu002: Which macOS installation method for Nim?, see https://forum.nim-lang.org/t/8240
[05:27:28] <FromDiscord> <ElegantBeef> In reply to @j$ "hey trying to use": I dont know but i'm going to say you dont need to but for the most safe FFI it's probably the smartest
[05:32:01] *** Joins: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[05:34:30] *** Quits: beshr (~beshr@user/beshr) (Ping timeout: 255 seconds)
[05:43:41] <arkanoid> I have to serialize and deserialize GeoJSON format. I'm trying to data map it with object variant, but the "coordinates" key (see example here https://en.wikipedia.org/wiki/GeoJSON) contains seq[int] for Point type and seq[seq[int]] for LineString and Polygon type. Nim does not support object variant with attributes with different types for same name. What's an idiomatic solution for this?
[05:45:21] <FromDiscord> <treeform> In reply to @arkanoid "I have to serialize":  you could name them different things
[05:45:34] <FromDiscord> <treeform>  you could have Point have seq[seq[int]] as well.
[05:45:53] <arkanoid> but that's now what the standard wants
[05:46:06] <arkanoid> s/now/not
[05:47:54] <arkanoid> I think I will have to work with generics
[05:52:13] <FromDiscord> <treeform> you have have a problem that prop can be any type
[05:53:29] <FromDiscord> <treeform> and Polygon is a seq of seq of 2 int
[05:54:28] *** Joins: vicfred_ (~vicfred@206.217.205.37)
[05:55:01] <arkanoid> you're right, polygon is seq[seq[seq[float]]]
[05:55:12] <arkanoid> well, any idea?
[05:55:30] <arkanoid> I'm only thinking about GeoJson[T]
[05:56:10] <FromDiscord> <treeform> I got some thing like this:
[05:56:11] <FromDiscord> <treeform> https://play.nim-lang.org/#ix=3tjw
[05:56:21] <FromDiscord> <treeform> its not a nim friendly format
[05:56:37] <FromDiscord> <treeform> its schema is loose
[05:57:04] <FromDiscord> <treeform> I kept everything that is super dynamic as JsonNode
[05:58:20] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 268 seconds)
[06:12:43] <FromDiscord> <j$> In reply to @ElegantBeef "I dont know but": yeah there are some places that so you should not have to, but it was giving me some error, so for my use case ill just wrap fields in functions and call it a day
[06:12:56] <FromDiscord> <j$> (edit) "so" => "say"
[06:31:07] <FromDiscord> <ajusa> This might be a weird question but does os.walkDir not work for file paths that have an "!" in their filename? I just tested it on my machine and that seems to be the case
[06:36:07] <arkanoid> is there a function to sanitize file names so that they can be used in paths?
[06:41:44] <FromDiscord> <ElegantBeef> You mean remove the extension?
[06:41:53] <FromDiscord> <ElegantBeef> or get the name + extension?
[06:45:10] <FromDiscord> <carmysilna> I think they mean sanitize a tainted string so it’s safe to open that file name
[06:45:37] <FromDiscord> <ElegantBeef> Tainted strings are opt in and basically 0 people use them 😄
[06:50:26] <FromDiscord> <ElegantBeef> `splitFile` and `extractFileName` in `std/os` should help
[07:17:08] <arkanoid> I mean remove weird characters from file name, like ()!.'
[07:18:58] <FromDiscord> <ElegantBeef> You should be able to do `import std/[os, strutils];fileName.replace(invalidFileNameChars)`
[07:23:37] <FromDiscord> <ajusa> Can I import a struct from Cwithout needing to redefine it?
[07:25:01] *** Quits: vicfred_ (~vicfred@206.217.205.37) (Quit: Leaving)
[07:25:13] *** Joins: vicfred (~vicfred@user/vicfred)
[07:26:02] <fn> <06Prestige99> Don't think so
[07:27:21] <FromDiscord> <ajusa> Rip, I was trying to import tcp/ip/udp header definitions, that'll be a pain
[07:27:44] <fn> <06Prestige99> c2nim might be useful
[07:29:57] <FromDiscord> <ajusa> Yeah, I'll try running it (although it'll be on some pretty messy 20 year old headers).
[07:47:33] <fn> <06Prestige99> I found it pretty easy to convert headers using macros in vim, if you're using anything similar
[07:56:15] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:12:57] <FromDiscord> <Revenant> hiya, i'm trying to use NimScript as a build tool, replacing makefiles, basically, but can't figure it out how to get it to work because the documentation is quite sparse...
[08:13:12] <FromDiscord> <Revenant> i have this in `build.nims`
[08:13:14] <FromDiscord> <Bung> @haxscramper okay, get it.
[08:13:26] <FromDiscord> <Revenant> sent a code paste, see https://play.nim-lang.org/#ix=3tjS
[08:13:59] <FromDiscord> <Revenant> and this is how i'm trying to use it
[08:14:15] <FromDiscord> <Revenant> sent a code paste, see https://play.nim-lang.org/#ix=3tjT
[08:14:37] <FromDiscord> <Revenant> which doesn't actually execute the `build` task
[08:17:05] <FromDiscord> <Bung> task is defined by nimble
[08:17:54] <FromDiscord> <Revenant> no, it's defined by system
[08:18:02] <FromDiscord> <Revenant> it says it here https://nim-lang.github.io/Nim/nims.html
[08:18:21] <FromDiscord> <Revenant> "NimScript as a build tool" section
[08:18:34] <FromDiscord> <Revenant> but it doesn't show an example how to invoke the task in a nimscript file, that is my problem
[08:21:28] <FromDiscord> <Bung> hmm, havn't used it like this.
[08:22:01] <FromDiscord> <Revenant> okay, if i rename if to `config.nims`, then i can invoke `debug` with `nim debug`
[08:22:45] <FromDiscord> <Bung> so still works as a config file
[08:23:27] <FromDiscord> <Revenant> well... yeah... but the documentation is a bit misleading
[08:23:39] <FromDiscord> <Revenant> i thought you can just use tasks in any nimscript file
[08:23:43] <FromDiscord> <Bung> kinda , I agree
[08:23:51] <FromDiscord> <Revenant> but seems like just in the `config.nims` in the project root
[08:24:25] <FromDiscord> <Bung> more like config your build process
[08:25:27] <FromDiscord> <Revenant> yeah, it's all a bit confusing to be hones
[08:25:28] <FromDiscord> <Revenant> (edit) "hones" => "honest"
[08:27:20] <FromDiscord> <Bung> guess with nimble that parts does not need anymore.
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:42:20] *** Quits: bkay (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Quit: Leaving)
[08:42:34] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[08:42:34] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[08:42:34] *** Joins: beshr (~beshr@user/beshr)
[08:57:03] <FromDiscord> <hamidb80> https://github.com/hamidb80/mycouch/blob/main/src/mycouch/api.nim#L57↵↵> Error: undeclared field: 'code' for type httpclient.Response [type declared in C:\Users\HamidB80\.choosenim\toolchains\nim-#devel\lib\pure\httpclient.nim(227, 3)]
[08:57:10] <FromDiscord> <hamidb80> i'm going crazy
[08:58:20] <FromDiscord> <hamidb80>  https://media.discordapp.net/attachments/371759389889003532/866174522456670208/unknown.png
[08:58:35] <FromDiscord> <hamidb80> the language server detect it
[08:58:39] <FromDiscord> <ElegantBeef> does `code(res).int` work?
[08:59:06] <FromDiscord> <hamidb80> In reply to @ElegantBeef "does `code(res).int` work?": nope
[08:59:15] <FromDiscord> <hamidb80> In reply to @hamidb80 "the language server detect": but the compiler not
[09:02:02] <FromDiscord> <Hi02Hi> In reply to @Revenant "well... yeah... but the": as far as i can tell, nimscript tasks act on files with `file.nims` or with directories with `config.nims`
[09:03:30] <FromDiscord> <Revenant> In reply to @Hi02Hi "as far as i": this doesn't make much sense...
[09:05:58] <FromDiscord> <Hi02Hi> In reply to @Revenant "this doesn't make much": which part doesnt make sense? if you mean `file.nims`, then i mean if the project is in `main.nim`, then the nimscript file would be `main.nims`
[09:06:52] <FromDiscord> <Revenant> well, my original goal was to use NimScript as a substitute for makefiles
[09:07:31] <FromDiscord> <Revenant> maybe there are not even any Nim files involved
[09:07:43] <FromDiscord> <hamidb80> In reply to @ElegantBeef "does `code(res).int` work?": removing the argument type fixes the problem
[09:07:47] <FromDiscord> <Revenant> maybe i just want to write a "makefile" in NimScript for a C++ project, or whatever
[09:08:43] <FromDiscord> <Rika> wdym?
[09:08:47] <FromDiscord> <Rika> i mean to hamid
[09:08:52] <FromDiscord> <Hi02Hi> so ig use `config.nims` and use a bunch of `import os ... exec("build command")`
[09:09:07] <FromDiscord> <ElegantBeef> I just tested it hamidb and it worked
[09:09:14] <FromDiscord> <Hi02Hi> or is `import os` not needed
[09:09:24] <FromDiscord> <Rika> exec needs os
[09:09:26] <FromDiscord> <Rika> i believe
[09:09:26] <FromDiscord> <hamidb80>  https://media.discordapp.net/attachments/371759389889003532/866177317009227786/unknown.png
[09:09:42] <FromDiscord> <Rika> what was the type before
[09:09:48] <FromDiscord> <hamidb80> Response
[09:09:53] <FromDiscord> <Rika> strange
[09:09:56] <FromDiscord> <ElegantBeef> Oh you're not exporting the frigging type
[09:10:00] <FromDiscord> <Revenant> my problem with using `config.nims` is that while it works, if i do `exec "nim ..."` from there, then the script gets executed a SECOND time when i exec the nim compiler from the script
[09:10:01] <FromDiscord> <ElegantBeef> (edit) "type" => "module"
[09:10:02] <FromDiscord> <Revenant> which sucks
[09:10:02] <FromDiscord> <Rika> what?
[09:10:13] <FromDiscord> <Revenant> how can i reliably parse extra command line params then?
[09:10:13] <FromDiscord> <Rika> beef what are you spouting
[09:10:18] <FromDiscord> <hamidb80> In reply to @ElegantBeef "Oh you're not exporting": ?!
[09:11:09] <FromDiscord> <ElegantBeef> I dont know how that macro works that those procs are declared in
[09:11:27] <FromDiscord> <hamidb80> addTestCov?
[09:11:30] <FromDiscord> <ElegantBeef> But i just assumed it was due to not exporting `httpclient` since it was a template
[09:11:30] <FromDiscord> <ElegantBeef> Yes
[09:11:44] <FromDiscord> <hamidb80> it just adds `cov` pragma to the procs
[09:12:05] <FromDiscord> <ElegantBeef> Well oddly enough `export httpclient` resolves the issue 😄
[09:13:08] <FromDiscord> <hamidb80> it works fine when i compile api.nim individually
[09:13:32] <FromDiscord> <hamidb80> but  `nimble test`  somehow break it
[09:13:57] <FromDiscord> <hamidb80> (edit) "break" => "breaks"
[09:14:50] <FromDiscord> <hamidb80> and something more strange:
[09:15:11] <FromDiscord> <hamidb80> i didn't import macroutils in `tests/tapi.nim`
[09:16:05] <FromDiscord> <hamidb80> but it somehow injected
[09:16:10] <FromDiscord> <hamidb80> and the last line: https://github.com/hamidb80/mycouch/blob/main/tests/tapi.nim#L67
[09:16:14] <FromDiscord> <hamidb80> doesn't work
[09:17:32] <FromDiscord> <hamidb80> In reply to @ElegantBeef "Pmunch emits some converters": .
[09:17:49] <FromDiscord> <hamidb80> (edit) "but it somehow ... injected" 03added "goy"
[09:17:55] <FromDiscord> <hamidb80> (edit) "goy" => "got"
[09:17:58] <FromDiscord> <Rika> In reply to @ElegantBeef "Well oddly enough `export": ah, this was a file being imported?
[09:18:04] <FromDiscord> <ElegantBeef> Yea
[09:18:10] <FromDiscord> <Rika> yeah that means code needs to be exposed to the importing module as well
[09:18:17] <FromDiscord> <Rika> so you need to export httpclient
[09:18:19] <FromDiscord> <ElegantBeef> I'm trying to find the logic in this code
[09:18:37] <FromDiscord> <Rika> you need to find the logic in your head first 😛
[09:18:47] <FromDiscord> <ElegantBeef> I mean i fixed the error
[09:19:02] <FromDiscord> <Rika> i dont actually know where you're looking at
[09:19:09] <FromDiscord> <ElegantBeef> https://github.com/hamidb80/mycouch/blob/main/src/mycouch/api.nim
[09:19:23] <FromDiscord> <ElegantBeef> guess i should've grabbed line 56
[09:19:52] <FromDiscord> <ElegantBeef> This is the first time i've seen someone use `using`
[09:20:12] <FromDiscord> <Rika> i use using, not often but ive used it
[09:21:36] <FromDiscord> <hamidb80> it's because i'm too lazy to write argument types
[09:21:52] <FromDiscord> <ElegantBeef> I know why people use it 😄
[09:22:36] <FromDiscord> <ElegantBeef> Ok so seems like this is a templates issue(bug?)
[09:23:00] <FromDiscord> <Rika> why?
[09:23:34] <FromDiscord> <hamidb80> removing type fixes the issue
[09:23:37] <FromDiscord> <ElegantBeef> I really should open this up in a properly setup editor to expand on it
[09:23:48] <FromDiscord> <hamidb80> In reply to @hamidb80 "": .
[09:23:56] <FromDiscord> <Rika> In reply to @hamidb80 "removing type fixes the": oh yeah i forgot about that
[09:25:56] <FromDiscord> <hamidb80> i think every thing works fine magically
[09:26:02] <FromDiscord> <hamidb80> (edit) "i think every thing works fine magically ... " 03added "now"
[09:26:34] <FromDiscord> <hamidb80> (edit) "i think every thing works ... fine" 03added "magically " | 04removed "magically"
[09:28:47] <FromDiscord> <hamidb80> no
[09:30:34] <FromDiscord> <hamidb80>  https://media.discordapp.net/attachments/371759389889003532/866182639126577163/2021-07-18_09-29-16.mkv
[09:33:40] <FromDiscord> <ElegantBeef> like i said replace it with `code(res)`
[09:33:53] <FromDiscord> <ElegantBeef> I mean it gets another compiler error unrelated
[09:34:32] <FromDiscord> <hamidb80> gives me same error
[09:34:37] <FromDiscord> <ElegantBeef> you didnt replace it in both spots
[09:34:45] <FromDiscord> <ElegantBeef> you use `res.code` twice
[09:35:21] <FromDiscord> <hamidb80> wow
[09:35:35] <FromDiscord> <hamidb80> fixes https://media.discordapp.net/attachments/371759389889003532/866183895871258624/unknown.png
[09:35:38] <FromDiscord> <hamidb80> the issue
[09:35:47] <FromDiscord> <ElegantBeef> Templates have some issues with the MCS when importing which can result in having to use C style calls
[09:37:17] <FromDiscord> <ElegantBeef> you can do `mixin code` in the first line to have it seem to work
[09:37:23] <FromDiscord> <ElegantBeef> But i dont know much about mixin/bind
[09:37:53] <FromDiscord> <ElegantBeef> Ah kinda makes sense what it does
[09:39:52] <FromDiscord> <hamidb80> works with mixin
[09:40:04] <FromDiscord> <hamidb80>  https://media.discordapp.net/attachments/371759389889003532/866185022247272448/unknown.png
[09:41:11] <FromDiscord> <ElegantBeef> Almost like i tested it before hand 😄
[09:46:16] <FromDiscord> <hamidb80> do you know what are these errors? my code compiles but they exist https://media.discordapp.net/attachments/371759389889003532/866186588240085008/unknown.png
[09:47:06] <FromDiscord> <hamidb80> seems they dont give much information
[09:47:26] <FromDiscord> <ElegantBeef> It's something with your macros
[10:01:33] <FromDiscord> <hamidb80> it complains about `cov` ident https://media.discordapp.net/attachments/371759389889003532/866190433629765653/unknown.png
[10:06:44] <FromDiscord> <hamidb80> how can I tell to the compiler which `cov` i mean
[10:07:05] <FromDiscord> <hamidb80> `bindSym` seems not useful
[10:54:43] <FromDiscord> <Bung> there's something need improve, one that template/generic should be hint message, need to be configurable.
[11:03:09] <FromDiscord> <hamidb80> beef
[11:03:15] <FromDiscord> <hamidb80> i got confused
[11:04:32] <FromDiscord> <hamidb80> this code in separated file compiles successfully https://media.discordapp.net/attachments/371759389889003532/866206282201169940/unknown.png
[11:13:01] *** Joins: max22- (~maxime@2a01cb08833598006bca23fcf5be1e27.ipv6.abo.wanadoo.fr)
[11:13:18] *** Quits: max22- (~maxime@2a01cb08833598006bca23fcf5be1e27.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[11:13:41] *** Joins: max22- (~maxime@2a01cb08833598006bca23fcf5be1e27.ipv6.abo.wanadoo.fr)
[11:15:18] <FromDiscord> <hamidb80> oh
[11:15:25] <FromDiscord> <hamidb80> static argument
[11:15:46] <FromDiscord> <hamidb80> i found a crazy bug
[11:20:21] <FromDiscord> <hamidb80> https://github.com/hamidb80/mycouch/blob/main/src/mycouch/api.nim#L759
[11:20:50] <FromDiscord> <hamidb80> if i remove static argument here everything gonna be ok
[11:22:12] <FromDiscord> <hamidb80> https://github.com/hamidb80/mycouch/blob/main/src/mycouch/api.nim#L763
[12:07:01] <fn> <11ForumUpdaterBot99> New post on r/nim by WrongJudgment6: Nim on the Attack: Process Injection Using Nim and the Windows API, see https://reddit.com/r/nim/comments/omm010/nim_on_the_attack_process_injection_using_nim_and/
[12:46:32] <FromDiscord> <hamidb80> he compiled nim for windows in linux?
[12:47:15] <FromDiscord> <hamidb80> -d:mingw
[12:47:43] <FromDiscord> <ElegantBeef> yea you can cross compile windows binaries from linux depending on the dependancies you have
[12:48:23] <FromDiscord> <ElegantBeef> https://nim-lang.org/docs/nimc.html#crossminuscompilation
[12:55:54] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I'm guessing no quick way to iterate over a string backwards?
[12:56:36] <FromDiscord> <hamidb80> ?
[12:57:07] <FromDiscord> <hamidb80> sent a code paste, see https://play.nim-lang.org/#ix=3tkC
[12:58:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> !eval var s = "hello"; for c in countdown(s.len - 1, 0)\: echo c
[12:59:03] <NimBot> Compile failed: /usercode/in.nim(1, 59) Error: expected: ':', but got: '[EOF]'
[12:59:14] <FromDiscord> <@bracketmaster-5a708063d73408ce4> !eval var s = "hello"; for c in countdown(s.len - 1, 0)\: echo c;
[12:59:17] <NimBot> Compile failed: /usercode/in.nim(1, 60) Error: expected: ':', but got: ';'
[12:59:26] <FromDiscord> <hamidb80> 😄
[12:59:44] <FromDiscord> <@bracketmaster-5a708063d73408ce4> which is not "olleh"
[12:59:45] <FromDiscord> <@bracketmaster-5a708063d73408ce4> sent a long message, see http://ix.io/3tkD
[13:00:20] <FromDiscord> <hamidb80> https://play.nim-lang.org/#ix=3tkE
[13:00:24] <FromDiscord> <hamidb80> s[c]
[13:00:51] <FromDiscord> <@bracketmaster-5a708063d73408ce4> yeah yeah, I know - but a little less elegant than string.reverse
[13:00:55] <FromDiscord> <@bracketmaster-5a708063d73408ce4> which doesn't exist
[13:01:07] <FromDiscord> <hamidb80> algorighm.reverse
[13:01:36] <FromDiscord> <hamidb80> https://play.nim-lang.org/#ix=3tkE
[13:02:09] <FromDiscord> <hamidb80> sorry
[13:02:12] <FromDiscord> <hamidb80> wait a minute
[13:02:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> wrong link?
[13:03:58] <FromDiscord> <hamidb80> https://play.nim-lang.org/#ix=3tkL
[13:04:25] <FromDiscord> <hamidb80> algorithm.reversed return seq[char] by default
[13:05:20] <FromDiscord> <hamidb80> you can convert it to string in many ways
[13:05:21] <FromDiscord> <hamidb80> https://stackoverflow.com/questions/32094567/converting-a-seqchar-to-string
[13:05:30] <FromDiscord> <@bracketmaster-5a708063d73408ce4> thanks
[13:05:32] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that works
[13:33:35] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3tkT
[13:33:42] <FromDiscord> <ElegantBeef> Ideally you just make an iterator for 0 cost
[13:35:15] <FromDiscord> <ElegantBeef> always realizes the time of the message too late
[14:20:48] <FromDiscord> <Kermithos> Is there a way to get the ascii char from an int? for example I have the number 97 and want to convert it to 'a'
[14:27:14] <fn> <11ForumUpdaterBot99> New thread by Rtrn: Base method when returning an iterator, see https://forum.nim-lang.org/t/8241
[14:40:56] <FromDiscord> <haxscramper> `char(97)`↵(@Kermithos)
[14:41:37] <FromDiscord> <Kermithos> In reply to @haxscramper "`char(97)` (<@739886115623927889>)": perfect, thanks
[15:18:25] *** Quits: max22- (~maxime@2a01cb08833598006bca23fcf5be1e27.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[15:53:29] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[15:55:04] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:55:24] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[15:56:34] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[15:56:46] *** Server sets mode: +nt 
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:57:10] *** Joins: arkurious (~arkurious@user/arkurious)
[17:04:44] <FromDiscord> <haxscramper> @Bung  @ElegantBeef https://github.com/haxscramper/hnimast/blob/master/tests/tNimscriptInterop.nim↵↵This is still more or less proof-of-concept, but it is able to handle variant objects, private fields, private fields in generic objects, nested variants with variant fields inside
[17:05:22] <FromDiscord> <haxscramper> Regular serialization approach `fromVm(target: T, source: PNode)`
[17:06:07] <FromDiscord> <haxscramper> `iterateFields()` from hnimast yields fields in exactly the same order as they are placed in the PNode representation in the VM, so I just copy data using index
[17:06:39] <FromDiscord> <haxscramper> This is how `VmVariant` looks in the Vm https://media.discordapp.net/attachments/371759389889003532/866297410330427412/unknown.png
[17:07:05] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3tlG
[17:07:28] <FromDiscord> <haxscramper> Round-trip preserves all data `(beforeKind: '\x00', privateField: 0.0, tableField: (test: "Non-default argument passed to private field", genr: ""), kind: vmkSecond, field2: "Set value in the VM side", afterKind: '\x00') `
[17:09:03] <FromDiscord> <haxscramper> You can also implement custom (de) serialization hooks and so on
[17:10:01] <FromDiscord> <haxscramper> I removed dependency on nimble, but devel breaks hmisc, most likely due to this enum "fix"
[17:10:24] <FromDiscord> <haxscramper> But in the example I can use std libraries just fine (tables), so
[17:11:18] *** Joins: max22- (~maxime@2a01cb08833598002f9a36966fe2b9e1.ipv6.abo.wanadoo.fr)
[17:13:38] <FromDiscord> <haxscramper> So you can use this example as a reference if you already have object unparsing implemented, though hnimast is probably the best you can get for that sort of thing, unless you want to spend as much time as I did
[17:14:18] <FromDiscord> <haxscramper> In reply to @haxscramper "I removed dependency on": I had distinct enum typedef and on devel I can't convert it to the underlying enum
[17:24:26] <FromDiscord> <haxscramper> Is it normal I'm getting insane number of strange type mismatch errors when switching to devel?
[17:24:38] <FromDiscord> <haxscramper> ``type mismatch: got <uint8> but expected one of: proc echo(x: varargs[typed, `$`]) ``
[17:25:05] <FromDiscord> <haxscramper> Also had to fix like 5+ pefectly normal procs that suddely failed to compile
[17:25:30] <FromDiscord> <haxscramper> Most of them were `Type1 | Type2` and I had to separate them into two procedures
[17:26:36] *** Quits: max22- (~maxime@2a01cb08833598002f9a36966fe2b9e1.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:30:30] <FromDiscord> <haxscramper> `rror: ambiguous call; both pragmas.newNPragma(names: varargs[NimNode])  and pragmas.newNPragma(names: varargs[string])  match for: (string)`
[17:30:41] <FromDiscord> <haxscramper> And I had no implicit converters of course
[17:35:05] <FromDiscord> <haxscramper> Idk, maybe I just somehow managed to write all of the code incorrectly or something
[17:38:17] <FromDiscord> <haxscramper> In reply to @haxscramper "I had distinct enum": That one I at least figured out - now, for some reason you have to go through .int when converting distinct enum to the base type as well, which makes zero sense but anyway
[17:39:15] <FromDiscord> <haxscramper> But overall it seems like you are out of luck with hnimast on devel, @ElegantBeef , since I largely get completely random compilation errors for code that worked perfectly fine earlier
[17:49:25] <FromDiscord> <haxscramper> Also whatever fusion is installed by nimble & CI also fails with idk-why errors https://github.com/haxscramper/hmisc/runs/3097352353?check_suite_focus=true#step:5:24
[17:56:48] <FromDiscord> <haxscramper> Fusion is still tagged as 1.0, and package version in manifest has been the same for the last 15 months
[18:10:42] <FromDiscord> <generic linux user> really bit git banner
[18:10:52] <FromDiscord> <generic linux user> covers all of my scren😐
[18:23:45] *** Joins: max22- (~maxime@2a01cb08833598004cbbbc79f5e438fa.ipv6.abo.wanadoo.fr)
[18:40:13] *** Joins: huria4 (~huria4@c-24-30-27-91.hsd1.ga.comcast.net)
[18:42:30] *** Quits: huria4 (~huria4@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[18:53:46] <FromDiscord> <dom96> yeah, these embeds are annoying
[18:53:49] <FromDiscord> <dom96> deleted it
[19:03:46] <FromDiscord> <generic linux user> whyyy
[19:03:54] <FromDiscord> <generic linux user> just <> eh
[19:17:24] <FromDiscord> <jfmonty2> it appears that arrays indexed by enums are not bounds-checked? As in, if you cast an invalid value to the enum and use that to index the array, you can get a segfault.
[19:17:48] <FromDiscord> <jfmonty2> I'm guessing the official answer to this is "if you're casting types like that then you're taking your life into your own hands, the compiler can't help you"?
[19:18:09] <FromDiscord> <Rika> pretty much
[19:18:51] <FromDiscord> <Rika> i guess it would help if there was a runtime check for enum validity
[19:19:07] <FromDiscord> <deech> I'm using the `compile` pragma to build an object file, eg. `{.compile: "blah.cxx".}` but how do I pass the resulting `blah.cxx.o` to the linker? It ends up the the `~/.cache/nim/...` folder and simply doing `{.passL: "blah.cxx.o".}` doesn't find it.
[19:19:20] <FromDiscord> <jfmonty2> I mean there is, if you're using the regular conversions, but if you cast then all that goes out the window of course
[19:19:31] <FromDiscord> <Rika> well then there is the answer
[19:19:40] <FromDiscord> <jfmonty2> understandable but I will admit I was surprised since I was still intuitively expecting bounds checking to happen
[19:20:06] <FromDiscord> <Rika> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-link-pragma @deech
[19:20:13] <FromDiscord> <Rika> would this help
[19:22:26] <FromDiscord> <carmysilna> In reply to @ElegantBeef "Tainted strings are opt": Oh, that’s funny. It was one of the features that drew me to Nim
[19:25:28] <FromDiscord> <Rika> its being rethought i believe
[19:25:34] <FromDiscord> <Rika> effects system is the modern equivalent
[19:25:51] <FromDiscord> <deech> @Rika Same issue. The object file is in the `cache` directly but `g++` can't find it.
[19:26:05] <FromDiscord> <carmysilna> The effects system is pretty cool as well.
[19:26:37] <FromDiscord> <deech> I'll ask in internals as well.
[19:26:41] <FromDiscord> <Rika> no clue then
[19:26:50] <FromDiscord> <haxscramper> If it was possible to enforce conversion via procedure and forbid .string this could make sense, otherwise tainted mode does not enforce it enough
[19:27:33] <FromDiscord> <Rika> yes but how would taintedstring -> string work?
[19:27:47] <FromDiscord> <Rika> are we restricting people regards which procs they can use now or something
[19:28:21] <FromDiscord> <Rika> are we adding a pragma `io` or an effect `parseeffect` or whatever that marks the proc for handling io
[19:28:36] <FromDiscord> <Rika> (i guess ioeffect already handles io)
[19:28:50] <FromDiscord> <Rika> i guess an effect isnt the way to go either
[19:28:57] <FromDiscord> <Rika> since that bubbles up
[19:29:48] <FromDiscord> <haxscramper> Isn't it what tainted mode was for?↵(@Rika)
[19:30:07] <FromDiscord> <haxscramper> To make everyone write converters and validate data
[19:30:35] <FromDiscord> <carmysilna> Well, there’s also “parse, don’t validate” to consider
[19:30:36] <FromDiscord> <Rika> i meant more "restricting" as in "people cannot make procs that handle stuff, it must go through stdlib stuff to convert" or so
[19:30:43] <FromDiscord> <Rika> (ofc stupid idea)
[19:32:28] <FromDiscord> <carmysilna> Maybe all io functions in the stdlib could also accept Twitter strings as input and it would be assumed that they would be properly sanitized
[19:34:11] <FromDiscord> <Rika> twitter strings?
[19:34:54] <FromDiscord> <carmysilna> Sorry, autocorrect. Tainted strings
[19:35:43] <FromDiscord> <Rika> that doesnt seem sensible; i dont understand exactly
[19:36:51] <FromDiscord> <carmysilna> So readFile accepts TaintedString as wells as string, and properly sanitizes the tainted string so that it is safe to open as a file name
[19:37:59] <FromDiscord> <Rika> hmm
[19:38:13] <FromDiscord> <Rika> that sounds complex
[19:38:21] <FromDiscord> <Rika> every proc that takes in a string needs to have a counterpart then
[19:38:40] <FromDiscord> <konsumlamm> In reply to @carmysilna "Oh, that’s funny. It": it's deprecsted in devel now
[19:38:47] <FromDiscord> <haxscramper> No, `readFile` path has very little to do with tained strings
[19:38:47] <FromDiscord> <konsumlamm> (edit) "deprecsted" => "depreca5ed"
[19:38:54] <FromDiscord> <konsumlamm> (edit) "depreca5ed" => "deprecated"
[19:38:54] <FromDiscord> <haxscramper> It has everything to do with `AbsFile = distinct string`
[19:39:06] <FromDiscord> <haxscramper> What it returns can be tainted string
[19:39:26] <FromDiscord> <haxscramper> Data from the outside world is 'tainted' and should be validated
[19:41:12] <FromDiscord> <haxscramper> That is also true, more or less. Handling absolutely everything via simple `string` - absolute/relative directory/file/link paths, environment variable names etc. is not the best idea↵(@Rika)
[19:41:20] <FromDiscord> <haxscramper> at least because of the overloading
[19:41:42] <FromDiscord> <haxscramper> Otherwise we end up with `removeFile`, `removeDir` as if we didn't have static typing
[19:42:27] <FromDiscord> <haxscramper> Well, remove procs might benefit from being explicit, so `exists()` or `.ext()` is a better
[19:42:33] <FromDiscord> <haxscramper> example
[19:48:04] <FromDiscord> <carmysilna> In reply to @konsumlamm "it's deprecated in devel": Oh, okay, good to know
[19:57:51] *** Joins: Guest30 (~Guest30@123.139.87.115)
[19:58:09] *** Quits: Guest30 (~Guest30@123.139.87.115) (Client Quit)
[20:21:54] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:34:08] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:33:49] <FromDiscord> <tandy> im trying to import a file from a parent dir, \`import ../types\` but i'm having trouble getting it to work..
[21:37:29] <FromDiscord> <haxscramper> What is the error, or how does it fail?
[21:37:29] <FromDiscord> <tandy> oh nvm, the other file was importing the file i was trying to import from
[21:59:58] <FromDiscord> <tandy> is it possible to import like this \`import ../[types, utils]\`?
[22:04:50] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3tmR
[22:05:17] <FromDiscord> <Ayy Lmao> I can't seem to capture `window` inside `windowProc` because it needs to be `stdcall`
[22:07:44] <FromDiscord> <Ayy Lmao> I basically just want to define my own draw procedure on a per window basis.
[22:09:33] <FromDiscord> <demotomohiro> Only closure proc can capture, other proc cannot.
[22:09:58] <FromDiscord> <haxscramper> IIRC you have to do `import ".."/[types, utill]`
[22:10:19] <FromDiscord> <Ayy Lmao> So am I basically forced to keep a table of all HWND : Window pairs and look up the Window in `windowProc` ?
[22:10:52] <FromDiscord> <haxscramper> If the code is does not have to be threadsave you can use `{.global.}` for captures
[22:11:08] <FromDiscord> <haxscramper> Copy captured variable to global, and make callback have `nimcall` or `stdcall`
[22:11:13] <FromDiscord> <haxscramper> But this is a hack
[22:11:40] <FromDiscord> <Ayy Lmao> In reply to @haxscramper "If the code is": Ideally I would like to stay away from something like that
[22:12:04] <FromDiscord> <haxscramper> Then you need to have lookup table somewhere else
[22:12:37] <FromDiscord> <Ayy Lmao> Alright, I figured that might be the case. It seems I was on the right track
[22:12:47] <FromDiscord> <haxscramper> Or you can store pair window + proc somehoa
[22:13:55] <FromDiscord> <Ayy Lmao> `windowProc` only gets a `HWND` passed in so that's all I have to go by to determine which window it is. I still need to look up the `Window` by its `HWND`
[22:18:34] <FromDiscord> <demotomohiro> Im usually use look up table like `Table[SomeId, ref Data]` when I use callback function in C library. Easy to detect use of id after freeing data.
[22:19:40] <FromDiscord> <demotomohiro> As long as id is never reused.
[22:20:22] <FromDiscord> <Ayy Lmao> In reply to @demotomohiro "Im usually use look": I will give it a try and see if I can get it working
[22:25:53] <FromDiscord> <demotomohiro> It seems this API can set pointer to user data on hWnd.↵https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlongptrw
[22:28:11] <FromDiscord> <Ayy Lmao> In reply to @demotomohiro "It seems this API": Unfortunately I am limited as to what I can use from the win api. I am making an extension for Reaper which ports a small subset of the win api over to OSX/Linux. So if I want cross platform compatibility I have to stay within those constraints.
[22:29:10] <FromDiscord> <Ayy Lmao> They do seem to have `SetWindowLong` supported though
[22:46:49] <FromDiscord> <Ayy Lmao> Using `Window` as a `ref object` and creating a lookup table seems to work.
[23:46:21] <FromDiscord> <Stuffe> It seems you can't make a const out of a ref object or an object with a ref in it. The only work around I can think of for having a self referential const object is using a seq in the type, any other ideas?
[23:51:27] <FromDiscord> <haxscramper> `ref` is const is not supported yet https://github.com/nim-lang/Nim/pull/15528
[23:52:03] <FromDiscord> <haxscramper> And I don't think there are any workarounds, at least if you need `ref`
