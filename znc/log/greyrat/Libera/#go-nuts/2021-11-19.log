[00:00:09] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[00:00:34] *** Quits: rcernin_ (~rcernin@124.190.139.235) (Ping timeout: 260 seconds)
[00:02:41] *** Quits: zwr (~zwr@2804:d45:b966:fb00:f0c0:f746:9f80:b26b) (Ping timeout: 250 seconds)
[00:03:22] <ash_m> Someone in here pointed me to a great library that allowed me to have a single entrypoint for golang CLI commands. So you could maybe do something like `go run main.go user:create ash_m`, the entrypoint parses the input consistently and sends the parses command to the same handler you'd have for a web interface
[00:03:25] *** Joins: zwr (~zwr@2804:d45:b966:fb00:44a0:dd67:7917:26dc)
[00:04:05] <ash_m> In lieu of anyone knowing what I'm talking about, is there a channel log somewhere?
[00:05:21] *** Quits: flukes (~textual@user/flukes) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:05:42] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[00:06:38] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:07:35] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 264 seconds)
[00:08:31] <b0nn> WRT channel log, not officially; but there could be unofficial logs
[00:08:40] *** Joins: dr0n (~nabromov@94.11.23.235)
[00:09:06] *** Joins: easbarbo` (~user@2804:1b2:180:70a8:a663:a1ff:fe49:c8ed)
[00:09:55] <ikke> ash_m: https://pkg.go.dev/mellium.im/cli?
[00:10:02] <ikke> That was answer when you asked about it previously
[00:11:15] *** Quits: easbarbosa (~user@2804:1b2:180:3cf8:a663:a1ff:fe49:c8ed) (Ping timeout: 268 seconds)
[00:14:03] <ash_m> ikke are you reading that from logs? Can you pastebin that conversation?
[00:15:21] *** Quits: dozn (uid249292@user/dozn) (Quit: Connection closed for inactivity)
[00:15:26] *** Joins: flukes (~textual@user/flukes)
[00:16:56] <mikoto-chan> KirkMcDonald: assiging to s will not be visible to the caller? can I pass it by reference to make s mutable?
[00:17:14] <mikoto-chan> I'd rather not use a return value (for practice reasons)
[00:18:28] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:19:32] *** Quits: flukes (~textual@user/flukes) (Client Quit)
[00:20:47] *** Joins: g2anj (~v@39.112.227.198)
[00:21:24] *** Quits: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net) (Quit: Leaving)
[00:21:40] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:b9c7:ff04:a0ba:4d3a)
[00:25:32] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:b9c7:ff04:a0ba:4d3a) (Client Quit)
[00:26:02] <ash_m> ikke was that on freenode?
[00:26:21] <ikke> no
[00:26:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[00:28:05] <ash_m> Must've been on my phone (no log of it) thanks again
[00:28:30] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[00:28:41] *** Joins: fikran (~fikran@user/fikran)
[00:28:41] *** Joins: Teckla (~Teckla@user/teckla)
[00:31:36] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[00:33:49] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[00:35:26] *** Joins: flukes (~textual@user/flukes)
[00:38:43] *** Quits: ash_m (~androirc@user/ash-m/x-3292451) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[00:39:22] *** mooff is now known as snack
[00:39:29] *** snack is now known as mooff
[00:39:58] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[00:39:58] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[00:39:58] *** Joins: tane (~tane@user/tane)
[00:40:00] *** Quits: jackneill (~jackneill@20014C4E181AEC002C291CD9283DEA90.dsl.pool.telekom.hu) (Remote host closed the connection)
[00:40:23] *** Joins: jackneill (~jackneill@20014C4E181AEC0001A48553404CB25B.dsl.pool.telekom.hu)
[00:43:51] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[00:44:04] <ash_worksi> ikke: out of curiosity, what do you think of that package?
[00:45:09] <ash_worksi> and, to the #go-nuts channel> what do you think of the mellium.im/cli package?
[00:48:35] <flukes> ash_worksi: check out https://github.com/alecthomas/kong, it's got a very nice API, imo
[00:50:48] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:346b:8ef4:4433:cb30)
[00:52:35] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[00:53:15] *** Quits: flukes (~textual@user/flukes) (Quit: Textual IRC Client: www.textualapp.com)
[00:53:37] *** Joins: flukes (uid527792@user/flukes)
[00:54:38] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Ping timeout: 260 seconds)
[00:56:35] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[00:56:57] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[00:58:22] <ash_worksi> flukes: thanks, I'll bookmark that
[00:59:07] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Quit: Leaving)
[01:04:37] *** Parts: flukes (uid527792@user/flukes) (Textual IRC Client: www.textualapp.com)
[01:04:40] *** Joins: flukes (uid527792@user/flukes)
[01:09:07] *** Joins: rcernin (~rcernin@124.190.139.235)
[01:10:37] <leitz> Am I correct in thinking Ginko is like Cucumber, for Go?
[01:13:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[01:14:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[01:20:59] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:22:12] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 256 seconds)
[01:26:45] *** Quits: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:27:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:28:12] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[01:34:15] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[01:36:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:37:04] *** particleflux_ is now known as particleflux
[01:40:30] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 3.3)
[01:44:08] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[01:44:28] *** Joins: alzgh (~alzgh@user/alzgh)
[01:46:43] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[01:46:50] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 268 seconds)
[01:49:55] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 268 seconds)
[01:52:17] *** Joins: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de)
[02:02:15] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 268 seconds)
[02:03:35] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 250 seconds)
[02:04:23] *** Quits: znpy (~znpy@user/znpy) (Remote host closed the connection)
[02:05:32] *** Joins: znpy (~znpy@user/znpy)
[02:06:15] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[02:07:00] *** Quits: znpy (~znpy@user/znpy) (Client Quit)
[02:07:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:09:20] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:11:57] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[02:12:23] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 264 seconds)
[02:14:03] *** Joins: rcernin (~rcernin@124.190.139.235)
[02:19:20] *** Joins: Rayke (rayke@user/rayke)
[02:19:45] *** Quits: Rayke (rayke@user/rayke) (Client Quit)
[02:20:02] *** Joins: Rayke (rayke@user/rayke)
[02:22:47] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Quit: ZNC 1.7.4 - https://znc.in)
[02:23:02] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[02:23:17] *** Quits: arinov (~arinov@213.194.126.155) (Read error: Connection reset by peer)
[02:26:07] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[02:28:50] *** Joins: arinov (~arinov@5.24.160.250)
[02:28:51] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[02:30:45] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[02:35:04] *** Joins: mkf9 (mkf@bsdforall.org)
[02:35:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:38:03] *** Joins: fikran (~fikran@user/fikran)
[02:38:04] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[02:38:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:41:53] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[02:42:32] *** Joins: znpy (~znpy@user/znpy)
[02:43:30] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:43:40] *** Joins: evocatus (~evocatus@213.193.2.105)
[02:47:47] *** Quits: Guest7702 (~sav@177.12.48.155) (Ping timeout: 250 seconds)
[02:50:55] *** Joins: Guest7702 (~sav@177.12.48.155)
[02:51:35] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:55:15] *** Joins: Batzy (~Batzy@user/batzy)
[02:59:01] <Batzy> Has anyone here using martini with go? Is there a way I can accept arbitrary json in a post that I'm not sure about the structure, but access a key? Right now I'm trying to do something like this: https://bpa.st/57EA
[03:00:39] <zsnes> thats one way, you can also use a struct type that only has the fields you want
[03:01:13] <Batzy> zsnes: using a struct actually forces some structure on the json
[03:01:21] <b0nn> Batzy: You have 3 options when it comes to handling json - a set struct (which you cannot use because your jason is dynamic), the map[string]interface{}, and json.RawMessage
[03:01:22] <Batzy> zsnes: also the way i pasted here doesnt work
[03:01:38] <Batzy> b0nn: what i pasted doesnt work
[03:02:21] <zsnes> this is some martini convention, are you concerned with dealing with dynamic json or how martini accepts json?
[03:02:34] <b0nn> What do you mean "doesn't work" there are a few interpretations of "works" in your snippet
[03:03:03] <Batzy> i guess it's martini convention, although if people know of better frameworks to build a rest api in Go i'll use it
[03:03:12] <Batzy> let me try to generate the error for my snippet
[03:03:58] <fizzie> I imagine the point about using a struct was that "encoding/json" -- as long as DisallowUnknownFields() isn't called -- ignores fields that don't exist in a struct when unmarshalling into it, so you *can* use a struct if there's a specific fixed object key that you want to pull out, even if the rest of the JSON (that you don't care about) is dynamic.
[03:04:11] * b0nn isn't a martini user, but where you have the binding.Json() is normally where you put the handler that will be called when the mux sees the specified route asccessed
[03:04:22] <Batzy> yes
[03:05:11] <Batzy> so yeah i get some random error panic("reflect: NumField of non-struct type")
[03:05:15] <Batzy> I guess it needs a struct
[03:06:33] <Batzy> i eman if im accessing a key anyways, i guess i know something about the structure of the json
[03:06:39] <Batzy> but i was just curious
[03:07:11] <Batzy> yeah, the struct way works. cool.
[03:08:33] <fizzie> Requiring a struct would seem to be a "github.com/martini-contrib/binding" thing, not a regular Go "encoding/json" thing.
[03:08:57] <fizzie> (And part of the "validation" aspect of it.)
[03:09:43] *** Parts: mkf9 (mkf@bsdforall.org) ()
[03:09:52] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Quit: WeeChat 3.3)
[03:10:09] <Batzy> yes
[03:10:38] *** Quits: Guest7702 (~sav@177.12.48.155) (Quit: Leaving)
[03:10:41] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[03:10:41] <zsnes> yeah most other frameworks pass a custom "context" to the handler func and you can then use methods on that context, within the handler func, to determine binding of parameters
[03:10:49] *** Joins: sav (~savio@177.12.48.155)
[03:11:02] <zsnes> martini is apparently deciding that at the route level and then passing the derived struct as a parameter to the handler, instead of the "context"
[03:11:13] *** sav is now known as Guest2383
[03:11:49] *** Joins: steve___ (~steve@213.240.182.77)
[03:13:53] <zsnes> i guess you have to use other libraries toa ctually make responses within the handler then? rather than using methods on the context like in Echo or Gin, for example.
[03:14:28] *** Parts: steve___ (~steve@213.240.182.77) ()
[03:14:32] *** Quits: Guest2383 (~savio@177.12.48.155) (Client Quit)
[03:15:07] <Batzy> i have no idea
[03:15:21] <Batzy> well i respond with just a string in my example
[03:16:51] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:19:11] <Batzy> i dont even see a good way to get request headers..
[03:19:11] <Batzy> hm
[03:19:24] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Client Quit)
[03:19:33] <Batzy> I think I will try echo instead
[03:19:54] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:20:03] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Remote host closed the connection)
[03:20:13] *** Joins: cobber (~cobber@213.240.182.77)
[03:20:18] *** Quits: cobber (~cobber@213.240.182.77) (Client Quit)
[03:20:44] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Client Quit)
[03:21:12] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:21:31] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Client Quit)
[03:21:54] *** Joins: protorom (~protorom@213.240.182.77)
[03:22:04] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:22:16] *** Quits: protorom (~protorom@213.240.182.77) (Client Quit)
[03:22:58] *** Joins: ausyeti (~ausyeti@213.240.182.77)
[03:23:06] *** Parts: ausyeti (~ausyeti@213.240.182.77) ()
[03:25:19] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:34:31] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:41:57] *** Joins: sav_ (~savio@177.12.48.155)
[03:43:29] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[03:48:22] *** Joins: cobber (~protorom@213.240.182.77)
[03:48:25] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Quit: Leaving)
[03:48:41] *** Quits: sav_ (~savio@177.12.48.155) (Quit: Leaving)
[03:48:57] *** cobber is now known as protorom
[03:50:36] *** protorom is now known as cobber
[03:51:23] *** cobber is now known as protorom
[03:52:22] *** protorom is now known as cobber
[03:56:57] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 268 seconds)
[03:58:05] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[03:58:32] <cobber> Q: when running "go install github.com/some/go-app@v1.2.3", go downloads, builds and installs the binary in $GOROOT/bin. So far, so good. Is there a way for the go-app code to know which version it is, without requiring "go build -ldflags "-X main.version=$(git describe --tags)"" or similar?
[04:01:27] <cobber> I just installed a cli util written in go and discovered that the last tagged release is quite old, "go-app -version" would have helped identify the actual version that "go install" installed (I installed it without a version)
[04:01:34] <cobber> thanx in advance :-)
[04:02:57] <queue-> this is why i dont go without docker
[04:03:02] <queue-> make life ez
[04:03:29] <queue-> this sounds like dependency/setup hell when you dont have to worry about it
[04:03:44] *** Quits: arinov (~arinov@5.24.160.250) (Ping timeout: 268 seconds)
[04:05:15] <cobber> not sure I understand... then you just have the unidentified binary in a docker image. I just want the binary to be able to identiy itself.
[04:06:07] <cobber> I get the tips on SO etc. that use makefiles, build scripts etc. but "go install" just does a blank "go build" doesn't it?
[04:07:40] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 265 seconds)
[04:10:55] <fizzie> In binaries built with modules, https://pkg.go.dev/runtime/debug#ReadBuildInfo supposedly returns the versions of all the dependencies.
[04:14:54] <cobber> @fizzie thatnks... maybe the version is included in the build path... I'll have it a go
[04:14:58] <fizzie> And from https://github.com/golang/go/issues/29228 I get the impression it also applies to the main module (or rather, there is no main module) when you do "go install ...@ver".
[04:15:38] <fizzie> The version is in the "Version" field.
[04:16:51] <cobber> ah! BuildInfo{Module:{Version:...}} :-)
[04:16:53] <cobber> perfect
[04:17:57] <fizzie> https://play.golang.org/p/zompsfbKmHL
[04:19:29] <fizzie> Just prints "(devel)" there, though. Not sure what .Main is set when the binary is from a go install with a version suffix.
[04:20:24] <cobber> I guess I'll have to push a version to github then see what happens when I install it
[04:21:10] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[04:30:40] *** Joins: sav (~savio@177.12.48.155)
[04:31:04] *** sav is now known as Guest2886
[04:36:32] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:37:39] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 268 seconds)
[04:38:29] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[04:43:01] *** Joins: Atque (~Atque@user/atque)
[04:43:45] *** Joins: rcernin (~rcernin@124.190.139.235)
[04:45:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:24] *** Joins: fikran (~fikran@user/fikran)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:50:44] *** Quits: adip (~adip@dij224.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[05:14:27] *** Joins: Torr_ (~Torr@user/torr)
[05:22:06] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[05:25:30] *** Joins: frost (~frost@user/frost)
[05:30:00] *** Joins: lirnril (~uirc@45.77.158.143)
[05:30:40] *** Joins: shtirlic_ (~shtirlic@pppoe.178-66-69-224.dynamic.avangarddsl.ru)
[05:32:17] *** Joins: andlabs_ (~andlabs@2a00:79e1:abc:1a0a:d4c1:5a37:7bd7:f5ef)
[05:33:52] *** Quits: shtirlic (~shtirlic@pppoe.178-66-70-130.dynamic.avangarddsl.ru) (Ping timeout: 265 seconds)
[05:35:32] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:f87a:7987:9b41:bb0e) (Ping timeout: 240 seconds)
[05:47:58] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:58:23] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:05:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[06:05:31] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Remote host closed the connection)
[06:05:44] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:09:17] *** Joins: cloudfstrife (~cloud@112.65.61.36)
[06:14:19] *** Quits: yonson (~yonson@2600:8801:d900:0:1e69:7aff:fea2:4e85) (Remote host closed the connection)
[06:14:33] *** Joins: yonson (~yonson@2600:8801:d900::16db)
[06:22:36] *** Joins: mickey85 (~user@user/mickey)
[06:23:06] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 268 seconds)
[06:24:24] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[06:24:24] *** mickey85 is now known as mickey8
[06:30:21] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[06:37:04] *** Quits: cobber (~protorom@213.240.182.77) (Read error: Connection reset by peer)
[06:38:43] *** Joins: cobber (~protorom@213.240.182.77)
[06:46:51] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.3)
[06:49:37] *** Joins: mohan43u (~mohan@user/mohan43u)
[06:50:48] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[06:51:39] *** Joins: mohan43u (~mohan@user/mohan43u)
[06:51:47] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[06:54:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[06:56:11] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 264 seconds)
[06:56:20] *** Quits: andlabs_ (~andlabs@2a00:79e1:abc:1a0a:d4c1:5a37:7bd7:f5ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:56:44] *** Joins: fikran (~fikran@user/fikran)
[07:04:07] *** Joins: mohan43u (~mohan@user/mohan43u)
[07:04:30] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[07:05:41] *** Joins: mohan43u (~mohan@user/mohan43u)
[07:06:10] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 256 seconds)
[07:08:26] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 265 seconds)
[07:09:26] *** Joins: darkapex (~darkapex@user/darkapex)
[07:10:11] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[07:11:24] *** Joins: mohan43u (~mohan@user/mohan43u)
[07:11:28] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[07:11:32] *** Quits: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:12:16] *** Joins: mohan43u (~mohan@user/mohan43u)
[07:13:24] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[07:15:06] *** Joins: mohan43u (~mohan@user/mohan43u)
[07:17:54] *** Joins: jackneilll (~jackneill@20014C4E181F52002E5B792ABA63A192.dsl.pool.telekom.hu)
[07:20:02] *** Quits: jackneill (~jackneill@20014C4E181AEC0001A48553404CB25B.dsl.pool.telekom.hu) (Ping timeout: 240 seconds)
[07:20:08] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:7197:d94:9d79:f9d8)
[07:25:07] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[07:26:00] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:7197:d94:9d79:f9d8) (Ping timeout: 268 seconds)
[07:27:52] *** Joins: aman (~aman@user/aman)
[07:37:06] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[07:38:17] *** Joins: cskr (~cskr@122.178.232.116)
[07:44:42] *** Quits: cloudfstrife (~cloud@112.65.61.36) (Ping timeout: 256 seconds)
[07:45:13] *** Joins: cloudfstrife (~cloud@2408:840c:911e:855c:ee60:f6e6:cdcb:6a78)
[07:45:47] *** Joins: andlabs (~andlabs@2604:ca00:17c:100:6115:a9e1:7664:52a3)
[07:48:37] *** Joins: andlabs_ (~andlabs@2604:ca00:17c:100:f9fc:f9eb:4783:100f)
[07:50:28] *** Joins: andlabs__ (~andlabs@2604:ca00:17c:100:f158:37e1:63ef:805d)
[07:51:29] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:52:35] *** Quits: andlabs (~andlabs@2604:ca00:17c:100:6115:a9e1:7664:52a3) (Ping timeout: 264 seconds)
[07:53:47] *** Quits: andlabs_ (~andlabs@2604:ca00:17c:100:f9fc:f9eb:4783:100f) (Ping timeout: 264 seconds)
[07:54:47] *** Joins: dozn (uid249292@user/dozn)
[07:55:41] *** Quits: cskr (~cskr@122.178.232.116) (Quit: Leaving)
[07:55:56] *** Joins: jpw (~jpw@user/jpw)
[07:56:13] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 268 seconds)
[07:59:59] *** Joins: christophergray (~christoph@190.148.51.123)
[08:00:59] *** Quits: cloudfstrife (~cloud@2408:840c:911e:855c:ee60:f6e6:cdcb:6a78) (Ping timeout: 264 seconds)
[08:02:29] *** Quits: christophergray (~christoph@190.148.51.123) (Client Quit)
[08:03:26] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[08:04:38] *** Quits: aman (~aman@user/aman) (Quit: aman)
[08:07:16] *** Joins: andlabs (~andlabs@2604:ca00:17c:100:408c:2104:e5a9:e952)
[08:11:11] *** Quits: andlabs__ (~andlabs@2604:ca00:17c:100:f158:37e1:63ef:805d) (Ping timeout: 264 seconds)
[08:11:54] *** Quits: X-Scale (~ARM@46.50.7.119) (Ping timeout: 256 seconds)
[08:12:31] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[08:13:53] *** X-Scale` is now known as X-Scale
[08:13:55] *** Quits: mobbi_ (~quassel@dfs2j6yd4flw04sr2zw5y-3.rev.dnainternet.fi) (Read error: Connection reset by peer)
[08:16:15] *** Joins: andlabs_ (~andlabs@2604:ca00:17c:100:30b9:32c2:f6ee:23de)
[08:16:41] *** Joins: rcernin (~rcernin@124.190.139.235)
[08:20:11] *** Quits: andlabs (~andlabs@2604:ca00:17c:100:408c:2104:e5a9:e952) (Ping timeout: 264 seconds)
[08:25:11] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[08:30:20] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.3)
[08:33:26] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[08:33:36] *** Joins: mohan43u (~mohan@user/mohan43u)
[08:33:39] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[08:40:06] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[08:46:16] *** Joins: mohan43u (~mohan@user/mohan43u)
[08:46:38] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[08:48:55] *** Joins: mohan43u (~mohan@user/mohan43u)
[08:49:02] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[08:51:14] *** Joins: mohan43u (~mohan@user/mohan43u)
[08:51:43] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[08:52:53] *** Joins: mohan43u (~mohan@user/mohan43u)
[08:53:00] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[08:57:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:03:08] *** Quits: GJdan (~quassel@107-190-26-141.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:04:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[09:06:05] *** Joins: fikran (~fikran@user/fikran)
[09:09:54] *** Quits: andlabs_ (~andlabs@2604:ca00:17c:100:30b9:32c2:f6ee:23de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:10:37] *** Parts: mikey__ (~mikey__@user/mikey/x-6463285) (WeeChat 3.3)
[09:14:42] *** Quits: Guest3728 (~Leon@138.sub-174-198-200.myvzw.com) (Read error: Connection reset by peer)
[09:14:58] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 260 seconds)
[09:15:04] *** Joins: Guest3728 (~Leon@138.sub-174-198-200.myvzw.com)
[09:15:12] *** Joins: darkapex_ (~darkapex@user/darkapex)
[09:19:28] *** Quits: Torr_ (~Torr@user/torr) (Ping timeout: 268 seconds)
[09:21:32] *** Quits: easbarbo` (~user@2804:1b2:180:70a8:a663:a1ff:fe49:c8ed) (Ping timeout: 240 seconds)
[09:24:01] *** Joins: mohan43u (~mohan@user/mohan43u)
[09:26:09] *** Joins: mei (~mei@user/mei)
[09:30:15] *** Joins: andlabs (~andlabs@70.107.171.168)
[09:30:24] *** Joins: jla (~jordi@64.225.79.195)
[09:33:11] *** Joins: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de)
[09:35:58] *** Joins: cloudfstrife (~cloud@140.207.23.97)
[09:36:46] *** Joins: mobbi (~quassel@dfs2j6ycqhzd4fkqvmmyt-3.rev.dnainternet.fi)
[09:59:18] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 260 seconds)
[10:01:14] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.3)
[10:04:27] *** Joins: rcernin (~rcernin@124.190.139.235)
[10:06:57] *** Quits: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[10:07:47] *** Joins: mohan43u (~mohan@user/mohan43u)
[10:09:32] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (Ping timeout: 240 seconds)
[10:09:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:09:57] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[10:10:22] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:10:54] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 256 seconds)
[10:18:15] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:18:54] *** Joins: rcernin (~rcernin@124.190.139.235)
[10:28:00] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:29:22] *** Quits: Guest2886 (~savio@177.12.48.155) (Quit: Leaving)
[10:33:19] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:33:28] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:36:16] <Tykling> I want to dynamically add elements to a map inside a struct as needed, each element value needs to be a sync.Mutex, how do I do this? the map in the struct is declared as map[string]*sync.Mutex but "mystruct.mutexMap[mykey] = sync.Mutex" makes the compiler complain
[10:37:11] <Tykling> I am new to Go so it is hopefully just a syntax thing I can't grok, thanks in advance :)
[10:37:36] <demsh> mystruct.mutexMap[mykey] = &sync.Mutex{}
[10:38:06] <Tykling> ooh fancy let me try that thank you
[10:38:19] <demsh> sync.Mutex{} - allocate new struct of type sync.Mutex, & - take address of the allocation
[10:39:16] <Tykling> right, that works, very nice thanks again
[10:40:13] *** Quits: ztx (~ztx@user/ztx) (Remote host closed the connection)
[10:40:35] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[10:42:28] *** Joins: ztx (~ztx@user/ztx)
[10:46:46] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 245 seconds)
[10:47:52] <A_Dragon> you shouldnt need a pointer I dont think; I dont remember though
[10:48:15] <demsh> this is a map of string to pointer
[10:48:19] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[10:48:27] <A_Dragon> pointer to a mutex, yes
[10:48:32] <A_Dragon> a mutex which itself contains pointers
[10:49:27] <demsh> mutex shouldn't be copied though after first use
[10:49:46] <demsh> mutex struct is int32 and uint32 without pointers
[10:50:04] <A_Dragon> ah THATS the thing I was thinking of
[10:50:40] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[10:50:53] <demsh> map of string to mutex will result in mutex copying
[10:52:34] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:55:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:57:24] *** Joins: sheldon (~sheldon@user/sheldon)
[10:59:00] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[11:01:54] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[11:13:48] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[11:15:26] *** Joins: fikran (~fikran@user/fikran)
[11:16:38] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[11:17:06] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[11:26:32] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Ping timeout: 265 seconds)
[11:26:58] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:27:10] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[11:31:12] *** Joins: sheldon (~sheldon@user/sheldon)
[11:31:29] *** Quits: cs_0x6373 (~verdammt_@static.2.59.76.144.clients.your-server.de) (Quit: ##glassjaw)
[11:31:55] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[11:34:35] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 264 seconds)
[11:35:08] *** Quits: cloudfstrife (~cloud@140.207.23.97) (Ping timeout: 268 seconds)
[11:35:38] *** Joins: cloudfstrife (~cloud@2408:840c:8f3e:89bd:dd9:6c8b:1b80:6f90)
[11:35:54] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 260 seconds)
[11:37:21] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:38:03] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[11:38:31] *** Joins: rcernin (~rcernin@124.190.139.235)
[11:40:24] *** Joins: jla (~jordi@64.225.79.195)
[11:41:21] *** Joins: mrig (~AdiIRC@user/mrig)
[11:42:18] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:43:22] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[11:43:34] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:43:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:49:57] *** Joins: frost (~frost@user/frost)
[11:52:14] *** Joins: adip (~adip@dij224.neoplus.adsl.tpnet.pl)
[11:54:10] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[12:03:08] *** Joins: sheldon (~sheldon@user/sheldon)
[12:05:54] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:07:46] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:08:06] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 260 seconds)
[12:15:50] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[12:19:25] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:24:23] *** Joins: arinov (~arinov@213.194.126.155)
[12:26:54] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 256 seconds)
[12:31:01] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[12:31:12] *** Joins: dr0n (~nabromov@92.40.255.115.threembb.co.uk)
[12:32:06] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[12:35:31] *** Joins: mrniranjan (~mniranja@103.208.71.145)
[12:41:34] *** Joins: sheldon (~sheldon@user/sheldon)
[12:44:01] *** Joins: nabromov (~nabromov@94.11.23.235)
[12:45:58] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[12:46:34] *** Joins: cobber (~protorom@213.240.182.77)
[12:47:18] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 256 seconds)
[12:50:18] *** Quits: cloudfstrife (~cloud@2408:840c:8f3e:89bd:dd9:6c8b:1b80:6f90) (Quit: Konversation terminated!)
[13:03:40] *** Quits: nabromov (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[13:04:16] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:12:11] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:909e:de36:5be2:fe99)
[13:12:57] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:18:59] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:909e:de36:5be2:fe99) (Ping timeout: 264 seconds)
[13:23:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[13:24:09] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:909e:de36:5be2:fe99)
[13:24:47] *** Joins: fikran (~fikran@user/fikran)
[13:30:56] *** Joins: sheldon (~sheldon@user/sheldon)
[13:31:47] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[13:34:24] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:7cb6:a747:5071:b94c)
[13:34:32] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:909e:de36:5be2:fe99) (Ping timeout: 240 seconds)
[13:35:28] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[13:39:30] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:7cb6:a747:5071:b94c) (Ping timeout: 260 seconds)
[13:39:35] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:b05b:4993:3d2f:b94a)
[13:44:32] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:b05b:4993:3d2f:b94a) (Ping timeout: 240 seconds)
[13:44:53] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:61f6:180b:4de:469e)
[13:46:19] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[13:47:30] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[13:47:42] *** Quits: mrniranjan (~mniranja@103.208.71.145) (Quit: leaving)
[13:50:08] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.3)
[13:50:44] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:61f6:180b:4de:469e) (Ping timeout: 265 seconds)
[13:51:47] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:d003:65e3:de19:84b9)
[13:56:47] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:d003:65e3:de19:84b9) (Ping timeout: 264 seconds)
[13:57:44] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a967:ce77:a61a:46be)
[13:57:49] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:1c8:bcb5:8c94:e21d) (Ping timeout: 265 seconds)
[14:00:17] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e9d4:3456:ac46:68aa)
[14:05:32] <kn100> Not strictly a go question, but relates to the vs-code-go plugin. Is there some way to disable the package aliasing? For example, I have a package called my-package, but the code actually lives in a package called mypackage - so vscode is `autocorrecting` the import to mypackage github.com/kn100/my-package. I'd prefer it if it just didn't for now.
[14:07:56] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:09:12] <A_Dragon> my-package isnt a valid name
[14:09:30] <A_Dragon> thus the only way to import that is an import alias
[14:11:46] <kn100> not strictly true, the package name is actually mypackage - it just lives in a folder called my-package. If I manually change the import line from `mypackage github.com/kn100/my-package` to `github.com/kn100/my-package` and save without letting the plugin run, the code still compiles and works as expected
[14:12:24] <A_Dragon> surprising. regardless, I dont think gopls has support for that.
[14:12:37] <kn100> yeah I didn't think it would.
[14:12:39] <kn100> Thanks
[14:14:15] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[14:14:28] *** Joins: mrig (~AdiIRC@user/mrig)
[14:18:01] *** Joins: sheldon (~sheldon@user/sheldon)
[14:20:05] *** Joins: tg (~tg@rockylinux/infra/tg)
[14:22:35] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 264 seconds)
[14:25:58] *** Quits: Fingolfin (~leonard@87.118.126.66) (Remote host closed the connection)
[14:26:56] *** Joins: Everything (~Everythin@37.115.210.35)
[14:26:56] *** Quits: Xjs (~jannis@user/xjs) (Quit: Bye.)
[14:27:21] *** Joins: Xjs (~jannis@user/xjs)
[14:38:32] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[14:40:08] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[14:49:05] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:981a:64cb:59a:ff39)
[14:49:23] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a967:ce77:a61a:46be) (Ping timeout: 268 seconds)
[14:50:14] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[14:51:26] *** Joins: cobber (~protorom@213.240.182.77)
[14:52:12] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:7c4d:dc6b:e98f:8777)
[14:54:23] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:981a:64cb:59a:ff39) (Ping timeout: 264 seconds)
[14:56:43] *** Joins: arinov (~arinov@5.24.160.250)
[14:59:15] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:7c4d:dc6b:e98f:8777) (Ping timeout: 268 seconds)
[14:59:21] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[15:11:20] *** Quits: cobber (~protorom@213.240.182.77) (Remote host closed the connection)
[15:12:13] *** Joins: cobber (~protorom@213.240.182.77)
[15:30:13] *** Joins: sheldon (~sheldon@user/sheldon)
[15:32:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[15:32:33] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 268 seconds)
[15:32:55] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:34:08] *** Joins: fikran (~fikran@user/fikran)
[15:35:02] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[15:36:34] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[15:37:40] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[15:39:59] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[15:41:30] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Read error: Connection reset by peer)
[15:41:32] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[15:47:39] *** Quits: lb9di (~Urist@archlinux/op/MrElendig) (Quit: 404 human not found)
[15:48:42] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[16:00:01] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:01:48] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:12:48] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[16:13:02] *** Joins: mrig (~AdiIRC@user/mrig)
[16:19:11] *** Joins: walkr (~walkr@200.195.131.74)
[16:19:54] *** Joins: sheldon (~sheldon@user/sheldon)
[16:22:07] <walkr> Hi guys! Is there any package you guys feel like it's missing from Go's world? i.e. something like sorting algorithms package, or heap package
[16:24:23] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 264 seconds)
[16:25:12] <novns> walkr, proper GSM encoding/decoding stuff
[16:26:14] <novns> some packages exist but they support only a subset of encodings
[16:27:07] <MrElendig> functional ftdi bindings
[16:27:25] <MrElendig> (and a lot of other "hardware" related stuff)
[16:27:31] *** Joins: lauraaah (uid156848@ilkley.irccloud.com)
[16:27:39] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:28:07] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Remote host closed the connection)
[16:28:15] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:28:21] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[16:28:30] *** Joins: mickey8 (~user@user/mickey)
[16:28:34] <novns> and SMPP protocol, existing packages are not fully compliant and are unmaintained
[16:31:13] <novns> and the same for Modbus protocol
[16:34:45] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[16:35:02] <walkr> Thanks guys! Those are deep stuff! I'll check if I'm able to contribute to any of those topics in the next few months.
[16:38:40] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:39:37] <leitz> Can you pass a text/template to a method?
[16:42:23] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[16:44:03] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5)
[16:45:26] <leitz> Hmm...I can delare it outside of main().
[16:49:09] *** Joins: sheldon (~sheldon@user/sheldon)
[16:49:38] *** Quits: arinov (~arinov@5.24.160.250) (Ping timeout: 268 seconds)
[16:51:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1)
[16:53:00] *** Joins: nortoh (~nortoh@user/nortoh)
[16:53:26] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:54:06] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 260 seconds)
[16:57:55] *** Quits: zanshin_ (~zanshin@ip24-255-217-102.ks.ks.cox.net) (Quit: WeeChat 3.0)
[16:58:21] *** Joins: zanshin (~zanshin@user/zanshin)
[16:58:38] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:01:37] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Remote host closed the connection)
[17:01:51] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[17:05:50] *** Joins: arinov (~arinov@5.24.160.250)
[17:08:26] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[17:08:26] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[17:08:26] *** Joins: tane (~tane@user/tane)
[17:13:41] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 268 seconds)
[17:14:56] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Remote host closed the connection)
[17:18:15] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[17:20:32] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:24:49] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[17:29:04] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:34:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:35:13] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[17:37:49] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Client Quit)
[17:42:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[17:43:29] *** Joins: fikran (~fikran@user/fikran)
[17:44:08] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[17:45:12] *** Quits: walkr (~walkr@200.195.131.74) (Quit: Leaving)
[17:45:28] <twaapo> im looking at: https://github.com/golang/go/issues/9334 but its looks old
[17:45:39] <twaapo> how to bind to single interface ip4 + ip6?
[17:45:50] <twaapo> net/http ListenAndServe takes a string?
[17:46:08] <twaapo> thats odd, as i want to give 2 net.IP i thinnk
[17:49:42] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[17:49:54] <siXy> twaapo: Sadly you can't do that currently. You either listen on all interfaces, or need to listen seperately on v4 and v6.
[17:51:10] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:51:30] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 260 seconds)
[17:52:13] <twaapo> hmm, ok a bit surprising but I guess this dualstack stuff is messy
[17:54:09] *** Joins: Jigsy (~Jigsy@user/jigsy)
[17:55:28] <siXy> I think it's partly that the number of people who really need that feature is fairly low, also. A lot of stuff just listens on *:port, which is good enough if you have a nice simple network.
[17:57:59] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Quit: The Lounge - https://thelounge.chat)
[17:58:30] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[18:00:50] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5) (Ping timeout: 260 seconds)
[18:01:35] *** Joins: mrniranjan (~mniranja@103.208.71.145)
[18:02:25] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.3)
[18:02:34] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[18:02:57] *** Joins: Jigsy (~Jigsy@user/jigsy)
[18:03:28] <twaapo> true, in this case its imperative interfaces are defined explicitly
[18:04:36] *** Quits: mrniranjan (~mniranja@103.208.71.145) (Client Quit)
[18:12:17] *** Quits: gspbirel566 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[18:17:12] *** Joins: pepee (~pepee@user/pepee)
[18:19:19] *** Joins: Maxattax (~max@136.sub-174-202-46.myvzw.com)
[18:22:43] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:25:02] *** darkapex_ is now known as darkapex
[18:30:45] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[18:31:16] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[18:31:29] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:32:32] *** Quits: arinov (~arinov@5.24.160.250) (Ping timeout: 240 seconds)
[18:32:38] *** Quits: Maxattax (~max@136.sub-174-202-46.myvzw.com) (Ping timeout: 260 seconds)
[18:34:44] *** Joins: Maxattax (~max@131.sub-174-202-44.myvzw.com)
[18:34:47] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[18:35:04] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:35:57] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[18:36:49] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[18:36:49] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:40:47] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[18:43:39] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Remote host closed the connection)
[18:44:31] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db)
[18:44:40] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:49dd:937c:2516:8e71)
[18:45:34] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:45:37] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[18:45:55] <moldorcoder7_> hi is this any reason why this code display stdout in real time then stderr at the end of the execution only : https://play.golang.org/p/qtpgHFOIrhT
[18:46:09] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[18:46:11] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1) (Ping timeout: 268 seconds)
[18:46:38] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[18:46:50] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[18:48:40] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e9d4:3456:ac46:68aa) (Ping timeout: 268 seconds)
[18:51:41] <siXy> moldorcoder7_: Because that's what multireader does - it reads from the provided io.readers sequentially.
[18:58:01] <siXy> moldorcoder7_: If you want to read in parallel, you'd want to construct your own thing, with a bunch of reader loops in goroutines, writing back to a channel that the main code can read from.
[18:58:05] <twaapo> heheh apiserver: listen tcp: address 2001:1254:face::1:8081: too many colons in address
[18:58:37] *** Joins: andlabs (~andlabs@2604:ca00:179:9b5b:709f:d76b:61e4:a5ed)
[19:00:38] <moldorcoder7_> siXy, ha ok , understood then
[19:00:42] <moldorcoder7_> thanks
[19:00:57] <fizzie> For the special case of using "os/exec" and capturing both outputs mixed together, you can also just do `pipe, err := cmd.StdoutPipe(); cmd.Stderr = cmd.Stdout`.
[19:01:21] <moldorcoder7_> fizzie, ha :) thats what i was looking for i guess
[19:01:25] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:01:29] <fizzie> Cf. https://pkg.go.dev/os/exec#Cmd "If Stdout and Stderr are the same writer, and have a type that can be compared with ==, at most one goroutine at a time will call Write."
[19:01:50] *** Joins: sheldon (~sheldon@user/sheldon)
[19:02:33] <moldorcoder7_> fizzie, works perfectly thanks
[19:06:24] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[19:19:27] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[19:19:54] *** Quits: cobber (~protorom@213.240.182.77) (Quit: cobber)
[19:20:43] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[19:23:24] *** Quits: Maxattax (~max@131.sub-174-202-44.myvzw.com) (Ping timeout: 256 seconds)
[19:25:09] *** Joins: Maxattax (~max@15.sub-174-202-46.myvzw.com)
[19:28:33] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[19:28:46] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[19:29:46] *** Quits: Maxattax (~max@15.sub-174-202-46.myvzw.com) (Read error: Connection reset by peer)
[19:32:24] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[19:35:00] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[19:39:16] *** Joins: andlabs_ (~andlabs@2604:ca00:179:9b5b:e87d:1f4a:7e67:2b35)
[19:41:14] *** Joins: Maxattax (~max@15.sub-174-202-46.myvzw.com)
[19:42:30] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[19:42:39] *** Joins: sheldon (~sheldon@user/sheldon)
[19:42:55] *** Quits: andlabs (~andlabs@2604:ca00:179:9b5b:709f:d76b:61e4:a5ed) (Ping timeout: 268 seconds)
[19:45:44] *** Joins: andlabs (~andlabs@2604:ca00:179:9b5b:6c:f2a9:1f7f:d21a)
[19:47:14] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 260 seconds)
[19:49:02] *** Quits: andlabs_ (~andlabs@2604:ca00:179:9b5b:e87d:1f4a:7e67:2b35) (Ping timeout: 240 seconds)
[19:50:16] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Remote host closed the connection)
[19:50:35] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[19:51:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[19:51:26] *** Quits: andlabs (~andlabs@2604:ca00:179:9b5b:6c:f2a9:1f7f:d21a) (Ping timeout: 260 seconds)
[19:51:53] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[19:52:50] *** Joins: fikran (~fikran@user/fikran)
[19:55:04] *** Joins: mertyildiran (~mertyildi@85.103.163.116)
[20:01:12] *** Joins: andlabs (~andlabs@2604:ca00:179:9b5b:80be:ed42:5c25:8a60)
[20:04:19] *** Joins: andlabs_ (~andlabs@2604:ca00:179:9b5b:d119:f90f:af7c:25b8)
[20:05:50] <dostoyevsky2> I tried to use `export GOGC=off' before I compile my code but compilation time was exactly the same 5.7s
[20:06:37] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Remote host closed the connection)
[20:06:51] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e)
[20:07:07] <A_Dragon> that would be because the GC isnt the thing that makes compiles take a bit
[20:07:11] <A_Dragon> the... compiling does
[20:07:29] <ikke> suprising
[20:07:37] *** Quits: Maxattax (~max@15.sub-174-202-46.myvzw.com) (Read error: Connection reset by peer)
[20:07:46] <A_Dragon> any GC it does will mostly be parallel anyway
[20:08:11] *** Quits: andlabs (~andlabs@2604:ca00:179:9b5b:80be:ed42:5c25:8a60) (Ping timeout: 264 seconds)
[20:08:12] <dostoyevsky2> yeah, I have 64g ram, so maybe go already realized: no need to run the gc if I am not over a certain % of free ram
[20:08:27] <A_Dragon> throwing more ram at the problem isnt going to make it faster
[20:08:36] <A_Dragon> hell throwing more cores at it wont either, past a point
[20:08:47] *** Quits: andlabs_ (~andlabs@2604:ca00:179:9b5b:d119:f90f:af7c:25b8) (Ping timeout: 264 seconds)
[20:08:58] <dostoyevsky2> A_Dragon: maybe I could try to compile go programs in parallel, if there are free cores
[20:09:09] <A_Dragon> the go compiler already runs in parallel
[20:09:18] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 256 seconds)
[20:11:16] *** Joins: livingsilver94 (~livingsil@user/livingsilver94)
[20:11:36] <livingsilver94> hi folks. Where can I ask gRPC questions? Is this the place?
[20:11:36] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[20:12:39] <A_Dragon> I'd suggest asking in here and seeing what happens
[20:13:02] <dostoyevsky2> The channel might disappear in a puff of logic
[20:13:31] <dostoyevsky2> grpc is that the RPC of https://pkg.go.dev/net/rpc ?
[20:13:38] *** Joins: Maxattax (~max@15.sub-174-202-46.myvzw.com)
[20:14:10] <livingsilver94> dostoyevsky2: nah, it's a protobuf-based gRPC. Outside the stdlib
[20:14:46] <livingsilver94> OK. So, I need to set HTTPS headers for every gRPC call, so that my load balancer can do its load balancy stuff. How can I set headers somewhere near the connection establishment in a fire-and-forget fashion?
[20:15:07] <livingsilver94> I want the library adding headers automatically throughout the connection time
[20:15:42] <livingsilver94> dostoyevsky2: I meant to say protobuf-based protocol*
[20:16:25] <dostoyevsky2> livingsilver94: if you are just wrapping protobufs in a http call... just set whatever headers you like
[20:18:17] <livingsilver94> no, I'm not doing that. gRPC has its concepts and its library. It's not like using the stdlib to send stuff writing in a http.Response
[20:19:02] *** Quits: Maxattax (~max@15.sub-174-202-46.myvzw.com) (Ping timeout: 240 seconds)
[20:19:43] *** Quits: mobbi (~quassel@dfs2j6ycqhzd4fkqvmmyt-3.rev.dnainternet.fi) (Read error: Connection reset by peer)
[20:20:58] *** Joins: Maxattax (~max@255.sub-174-202-39.myvzw.com)
[20:22:58] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[20:23:34] *** Joins: Jigsy (~Jigsy@user/jigsy)
[20:33:31] *** Joins: sheldon (~sheldon@user/sheldon)
[20:34:11] <rawtaz> i need to create CSV output and am looking at https://pkg.go.dev/encoding/csv - there doesnt seem to be a way to tell it to always enclose the values in quotes, am i missing something or is this package limited in that regard?
[20:34:50] *** Joins: mobbi (~quassel@dfs2j6ycbrm6pbb2bwnst-3.rev.dnainternet.fi)
[20:36:57] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[20:38:13] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[20:40:36] <rawtaz> 743
[20:48:51] *** Joins: arinov (~arinov@213.194.126.155)
[20:50:32] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[20:50:43] <j416> rawtaz: why do you need quotes?
[20:51:02] <j416> (I can't find an option to set them always on)
[20:52:22] <rawtaz> j416: i tested the lib and it sure does the right thing in terms of applying quotes when needed (e.g. due to there being quote(s) or commas in the values)
[20:52:55] <rawtaz> the reason i want to apply quotes all the time is that im building this CSV for an API from a vendor/provider and they explicitly specify that the format of the CSV data should be with quotes.
[20:52:57] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:53:14] *** Joins: X-Scale` (~ARM@83.223.248.137)
[20:53:14] <j416> :/
[20:53:18] <j416> figured.
[20:53:18] <rawtaz> i simply figure that while i think that shouldnt be needed and so on, there are more constructive things to do than to deviate from that :)
[20:53:38] <j416> makes me wonder if they even handle escaping properly
[20:53:43] <rawtaz> ill try their parser real quick just for kicks though
[20:53:50] <rawtaz> yeah thats a good question
[20:54:23] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[20:54:37] *** X-Scale` is now known as X-Scale
[20:54:48] <segfaultfizzbuzz> what random number generator does the math/rand package use? i can't find documentation on this, and i am only finding a forum thread with a wide range of speculative comments
[20:55:35] <j416> segfaultfizzbuzz: does the code not document it? hm
[20:55:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[20:55:53] <rawtaz> cats driven by laser pointers probably
[20:56:16] <segfaultfizzbuzz> i didn't see it in the docs but i didn't try to look at the original source,... i'm actually foreign to golang and am reading somebody else's code at the moment--where do you folks store your code? i'm guessing not on github...?
[20:56:21] *** Quits: Maxattax (~max@255.sub-174-202-39.myvzw.com) (Ping timeout: 256 seconds)
[20:56:42] <rawtaz> in a git repository locally for starters. if and where we push it depends on the project etc
[20:57:11] *** Joins: fikran (~fikran@user/fikran)
[20:57:16] <segfaultfizzbuzz> oh, it is on github
[20:57:27] *** Joins: rogersm (~rogersm@90.166.177.48)
[20:57:54] <rawtaz> segfaultfizzbuzz: most of the libs you see at the top of the source code files, in the "import" section there, are on github if theyre not part of the standard library in go
[20:58:05] <segfaultfizzbuzz> https://github.com/golang/go/blob/master/src/math/rand/rand.go
[20:58:06] <rawtaz> you can usually use the same URLs as you see there
[20:58:18] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[20:58:25] <segfaultfizzbuzz> so in this i see no declaration of what algorithm is being implemented
[20:59:24] <rawtaz> segfaultfizzbuzz: you see the Seed() function is used to seed the RNG
[20:59:32] <rawtaz> so you basically are free to use whatever seeding you want
[20:59:59] <rawtaz> oh wait youre asking about the algorithm for the RNG, sorry
[21:00:42] <fizzie> livingsilver94: There's a context-driven thing via metadata.NewOutgoingContext, and you can also use grpc.WithUnaryInterceptor as a grpc.DialOption to set up an interceptor that populates the metadata for each method call at call time.
[21:00:48] *** Joins: lack (~lack@user/lack)
[21:01:26] <segfaultfizzbuzz> somebody used this thing as an input to a bunch of scientific work and i think their is bogus and am trying to confirm my suspicion
[21:01:35] <segfaultfizzbuzz> *think their work is bogus
[21:01:53] <rawtaz> segfaultfizzbuzz: https://github.com/golang/go/blob/master/src/math/rand/rand.go#L140 perhaps?
[21:01:54] <segfaultfizzbuzz> i do see that the comments say that this can be predictable and that it isn't crypto grade
[21:03:24] <j416> the commit history doesn't give many clues, at all @ rand
[21:03:45] <segfaultfizzbuzz> ok well lemire is no fool but yeah i don't know what this algorithm is lol
[21:04:02] <j416> segfaultfizzbuzz: what do you mean by bogus?
[21:04:09] <j416> it's a pseudorandom generator, obviously
[21:04:16] <segfaultfizzbuzz> when you are using a random number generator in scientific settings you need to evaluate its quality
[21:04:28] <segfaultfizzbuzz> so you should do some projections and other tests of the output and confirm that you can't see patterns in the output
[21:04:34] <j416> I see
[21:05:09] <segfaultfizzbuzz> the person who wrote this code lazily used math/rand (and seeded it with the unix system time for each function call, cringe)... i am pretty sure they think rand means "random"
[21:05:12] <rawtaz> segfaultfizzbuzz: whats your suspicion? that they used an RNG that didnt produce random enough numbers?
[21:05:16] <segfaultfizzbuzz> yep
[21:05:57] <j416> sounds odd to seed it each time
[21:06:08] <rawtaz> do you have their source code? cant you project it and see what it looks like? i mean if it's "good" or not
[21:06:16] <segfaultfizzbuzz> yep i have the source code
[21:06:28] <segfaultfizzbuzz> well the source code just uses math/rand, like i said
[21:06:30] *** Joins: GJdan (~quassel@107-190-26-130.cpe.teksavvy.com)
[21:06:46] <segfaultfizzbuzz> so i can theoretically evaluate it, but it's much easier for me to try to dig up a paper where somebody else has already done the work
[21:06:54] <segfaultfizzbuzz> but in order to do that, i need to know what algorithm is being used
[21:06:57] <j416> also if they re-seed it on every function call, there's the risk that they'll seed it with the same seed more than once
[21:07:10] <segfaultfizzbuzz> j416: exactly, they obviously don't know what they are doing :)
[21:07:29] <j416> sounds like proof enough?
[21:07:35] <j416> tell them to use something proper
[21:07:51] <segfaultfizzbuzz> it would be nice to have a double whammy and say that the rng itself is bogus for this application
[21:08:01] <j416> heh
[21:08:35] *** Joins: jla (~jordi@64.225.79.195)
[21:08:49] <rawtaz> the unix system time as in with at most second precision?
[21:09:38] <segfaultfizzbuzz> looks like lemire calls his technique (apparently the basis of the golang rng) "fastrange"   https://github.com/lemire/Code-used-on-Daniel-Lemire-s-blog/blob/master/2016/06/25/fastrange.c
[21:09:52] <segfaultfizzbuzz> thankfully they used nanosecond precision, but that doesn't excuse them from anything
[21:10:01] <fizzie> segfaultfizzbuzz: Allegedly the *actual* underlying uniform-distributin PRNG is the same as Plan 9's rand. "The comments refer to D. P. Mitchell and J. A. Reeds (Don Mitchell and Jim Reeds, respectively). Presumably, they came up with algorithm while working at Bell Labs. I've never found a paper describing it."
[21:10:14] <j416> "Saving..." :D
[21:10:32] <segfaultfizzbuzz> yeah, so...
[21:10:56] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[21:11:10] <fizzie> The part that involves Lemire is just the part that goes from a uniformly distributed N-bit number to a uniformly distributed number in an arbitrary range effeciently.
[21:11:20] <segfaultfizzbuzz> ah ok
[21:11:23] <segfaultfizzbuzz> scratch that
[21:11:44] <fizzie> https://cs.opensource.google/go/go/+/refs/tags/go1.17.3:src/math/rand/rng.go generates the actual bits. But it doesn't seem to be particularly academically studied one.
[21:11:57] <segfaultfizzbuzz> yeah so, if you don't study your rng, it can be absolute trash
[21:12:09] <rawtaz> segfaultfizzbuzz: ewll the time is somewhat predictable so in that sense its not a good seed, hardly possible that they seed with the same number twice though
[21:12:18] <fizzie> I'm sure someone somewhere has ran the diehard tests on it.
[21:12:49] <segfaultfizzbuzz> ok i'll add that to the references "Someone Somewhere Et Al."
[21:13:01] <rawtaz> lol
[21:15:36] <segfaultfizzbuzz> other people have made this observation over the years https://www.seehuhn.de/blog/134.html
[21:18:13] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[21:19:07] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[21:19:10] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[21:20:09] <fizzie> Well, random internet commenters suggest the underlying algorithm is an additive lagged Fibonacci generator per Knuth vol 2 section 3.2.2 equation 7. But yeah, it doesn't sound like the sort of thing you can just easily cite.
[21:22:12] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[21:23:12] *** Joins: sheldon (~sheldon@user/sheldon)
[21:24:16] <rawtaz> j416: theres only boring meetups in Gbg, cant you set up some cool Go meetup down here?
[21:25:11] *** Joins: ztx (~ztx@user/ztx)
[21:25:32] <j416> rawtaz: haha.
[21:27:23] <j416> maybe you do it.
[21:27:32] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[21:28:04] <rawtaz> too new in Go
[21:28:20] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[21:28:40] <rawtaz> there is a good Go group here but i guess theyre just dormant at the moment
[21:31:33] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[21:33:17] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:71f6:da30:448:aa60)
[21:33:52] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:34:16] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[21:34:43] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Client Quit)
[21:34:59] *** Joins: danmurf (uid480399@user/danmurf)
[21:36:31] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[21:38:22] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[21:41:42] *** Joins: goldfish (~goldfish@user/goldfish)
[21:44:35] <j416> as with most meetups, I would assume.
[21:45:22] <rawtaz> yep
[21:46:10] *** Joins: jla (~jordi@64.225.79.195)
[21:46:46] <rawtaz> hmm seems that API csv parse rally does work the right way. i think ill just throw at it what the csv package produces then. i tested most things i can think of and it does parse it as it should :)
[21:47:46] <rawtaz> +speling
[21:50:02] *** Joins: jpw (~jpw@user/jpw)
[21:53:19] *** Joins: livingsilver94_ (~livingsil@user/livingsilver94)
[21:54:54] *** Quits: livingsilver94 (~livingsil@user/livingsilver94) (Ping timeout: 268 seconds)
[21:58:16] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[22:01:24] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:01:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:02:45] *** Joins: jbauer (~jbauer@146.71.11.98)
[22:06:37] <rawtaz> to convert an int to the numeric representation as a string, would you recommend fmt.Sprintf, strconv.Itoa or strconv.FormatInt?
[22:06:51] <rawtaz> the first one seems to perhaps not be the optimal case as it uses reflection
[22:07:53] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[22:08:12] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:08:38] <rawtaz> ill just Go with Itoa
[22:09:29] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 256 seconds)
[22:09:41] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db) (Ping timeout: 268 seconds)
[22:15:20] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 265 seconds)
[22:16:19] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[22:18:55] *** Quits: lauraaah (uid156848@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:21:24] *** Quits: mertyildiran (~mertyildi@85.103.163.116) (Ping timeout: 268 seconds)
[22:22:43] *** Quits: jbauer (~jbauer@146.71.11.98) (Quit: Quitting)
[22:25:13] *** Joins: busf4ct0r (~busf4ct0r@187.155.30.195)
[22:25:29] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:71f6:da30:448:aa60) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:26:55] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[22:29:43] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Client Quit)
[22:29:51] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[22:31:46] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Client Quit)
[22:36:15] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:5cf8:f783:63:4cbe)
[22:37:29] *** Quits: FoodMan (~glucose@user/foodman) (Ping timeout: 250 seconds)
[22:39:10] <segfaultfizzbuzz> i'm not finding documentation on the expected performance of an additive lagged fibonacci generator as compared to mersenne twister etc
[22:40:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[22:41:20] *** Joins: jbauer (~jbauer@146.71.11.98)
[22:42:27] *** Quits: jbauer (~jbauer@146.71.11.98) (Client Quit)
[22:44:06] *** Joins: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de)
[22:44:06] *** Quits: resamvi (~resamvi@p4ff7768d.dip0.t-ipconnect.de) (Changing host)
[22:44:06] *** Joins: resamvi (~resamvi@user/resamvi)
[22:47:08] *** Joins: Killirse (~Killirse@146.120.222.5)
[22:52:20] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:53:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:04:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[23:06:33] *** Joins: fikran (~fikran@user/fikran)
[23:06:56] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[23:07:17] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:52] *** Quits: Killirse (~Killirse@146.120.222.5) (Remote host closed the connection)
[23:08:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:09:23] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:13:12] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:15:24] *** Quits: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net) (Quit: Leaving)
[23:16:55] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Client Quit)
[23:19:31] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:20:37] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Client Quit)
[23:20:37] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[23:23:28] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[23:26:38] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[23:28:16] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:30:07] *** Quits: EdFletcher (~PKD@user/edfletcher) (Client Quit)
[23:30:25] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:7c4d:dc6b:e98f:8777)
[23:32:16] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[23:37:19] *** Joins: mrig (~mrig@user/mrig)
[23:40:38] <b0nn> segfaultfizzbuzz: Strongly recommend you take your questions to the -dev mailing list
[23:40:57] <b0nn> https://groups.google.com/g/golang-dev
[23:42:34] <b0nn> filippo valsorda is the crypto guy, and I would expect him to have knowledge on the design of the crypto/rand vs math/rand (for example)
[23:47:41] *** Joins: rusty (~rustyboy@82.77.237.221)
[23:55:09] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:7c4d:dc6b:e98f:8777) (Ping timeout: 268 seconds)
[23:57:32] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e) (Ping timeout: 240 seconds)
[23:59:18] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:5cf8:f783:63:4cbe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
