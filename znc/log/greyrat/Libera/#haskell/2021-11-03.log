[00:00:25] *** Joins: gg (~gg@2a01:e0a:819:1510:9c2f:617b:a3fa:cf0d)
[00:01:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:01:13] *** Joins: hololeap_ (~hololeap@user/hololeap)
[00:02:27] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:04:09] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c) (Remote host closed the connection)
[00:04:42] *** Quits: max22- (~maxime@2a01cb08833598001e044e1e5445c714.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[00:05:16] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[00:05:19] <boxscape_> tomsmeding does subtractMean' count as one traversal? I think I'm only storing the sum here, not the individual values https://paste.tomsmeding.com/I0ipKExN
[00:05:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:05:55] <boxscape_> (also, FWIW: quickCheck \xs -> subtractMean xs == subtractMean' xs; +++ OK, passed 100 tests.)
[00:08:33] <tomsmeding> boxscape_: I'm lazy, what's the type of that large do block in subtractMean'
[00:09:43] <tomsmeding> okay not so lazy, ST s [ST s a]
[00:09:45] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:09:53] <tomsmeding> thank you for writing dependencyless code
[00:10:06] <boxscape_> I think almost, go :: (Num a, Num b) => STRef s b -> [b] -> ST s (a, [ST s b])
[00:10:39] <tomsmeding> you're constructing a list of stuff the size of the original list, then traversing that again?
[00:10:42] <tomsmeding> that's two traversals :p
[00:10:54] *** Quits: Null_A (~null_a@2601:645:8700:2290:91de:cb47:8eef:9a3e) (Remote host closed the connection)
[00:11:02] <boxscape_> oh lol right at the beginning
[00:11:18] <tomsmeding> if that's allowed, I can traverse 'list' and build 'map id list' meanwhile, then traverse that second list afterwards and have it count as one traversal
[00:11:32] <boxscape_> right, okay
[00:11:32] *** Joins: Null_A (~null_a@2601:645:8700:2290:91de:cb47:8eef:9a3e)
[00:11:55] <tomsmeding> my concept of "number of traversals" is based on "how many parallel loops can you write this in"
[00:12:11] <tomsmeding> and here the answer is two
[00:12:26] <boxscape_> I'm not quite sure what that meanss
[00:12:26] <tomsmeding> (okay a scan also counts as such a loop in this case)
[00:12:54] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:13:24] <tomsmeding> boxscape_: I like the sneaky :) at the end of line 23
[00:13:31] <boxscape_> :)
[00:13:36] <tomsmeding> @botsnack
[00:13:36] <lambdabot> :)
[00:15:24] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: Connection reset by peer)
[00:16:31] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[00:18:06] <tomsmeding> boxscape_: wait this particular problem can easily be written using one traversal because your formula is linear
[00:18:18] <Hecate> woop woop, just released my babyyyy https://hackage.haskell.org/package/text-display-0.0.1.0
[00:18:33] <boxscape_> Hecate ðŸŽ‰
[00:18:45] *** Quits: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[00:19:07] <boxscape_> I saw that a couple of days ago, looked interesting
[00:19:15] <tomsmeding> oh ignore what I just said
[00:19:20] <boxscape_> ok
[00:19:31] <Hecate> boxscape_: :D
[00:19:33] <Hecate> thank you
[00:19:46] <Hecate> just waiting for tomsmeding's seal of approval
[00:19:59] * tomsmeding reads
[00:20:07] <boxscape_> tomsmeding so if I'm understanding correctly, the "second traversal" in my solution was the fmap, is that right?
[00:20:16] <tomsmeding> the sequence, I think
[00:20:17] <boxscape_> i.e. fmap sequence
[00:20:21] <boxscape_> ah right sorry
[00:20:25] <tomsmeding> but yeah
[00:20:40] <boxscape_> https://paste.tomsmeding.com/okd4PHqT it's gone
[00:21:06] <cigsender> Hecate: right at the bottom of the docs, "You should not try to display ByteStrings!", you've put decudeUtf8 instead of decodeUtf8
[00:21:10] <cigsender> <3
[00:21:11] <boxscape_> still passes the tests, somewhat to my surprise
[00:21:50] <tomsmeding> Hecate: looks neat! I think I've written a Pretty class like 10 times by now
[00:22:12] <cigsender> same thing, decudeUtf8With :p
[00:22:42] <tomsmeding> also in the docs for the instance :p
[00:24:13] <tomsmeding> Hecate: I think it's good that you didn't go overboard with the predefined instances
[00:24:27] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com) (Quit: Konversation terminated!)
[00:24:39] <tomsmeding> the point of classes like this, I think, is to be able to do some partial domain-specific debugging formatting
[00:24:41] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com)
[00:25:38] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com) (Client Quit)
[00:26:29] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com)
[00:27:42] <boxscape_> tomsmeding I'm not missing something else, right? The updated version counts as one (hacky) traversal?
[00:28:03] <tomsmeding> I'm reading, trying to figure out what the hell is happening with the nested unsafePerformIOs :p
[00:28:15] <boxscape_> fair :)
[00:28:16] <tomsmeding> why are you even unsafePerformIO'ing _inside_ an IO context
[00:28:20] <tomsmeding> is that essential?
[00:28:35] <boxscape_> urm my idea was that it should only unsafePerformIO after the mean is compute
[00:28:36] <boxscape_> d
[00:28:49] <tomsmeding> if so then before understanding what's happening, I claim linked list of thunks
[00:28:52] <tomsmeding> if not then no idea
[00:29:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:29:15] <boxscape_> hm I guess I'll have to figure out if it's essential
[00:29:18] <awpr> this sounds like something that's impossible to do under a useful definition of "single-pass"
[00:29:25] <tomsmeding> yeah
[00:29:29] <boxscape_> :(
[00:29:38] <tomsmeding> boxscape_ is trying very hard though
[00:29:47] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[00:29:53] <tomsmeding> it's a nice puzzle to even figure out what's going on
[00:29:54] <awpr> this impl might succeed in hiding the second pass in the form of thunks
[00:30:07] <tomsmeding> yes :p
[00:30:30] <tomsmeding> right yes
[00:30:47] <tomsmeding> the output list has a thunk in each position, and each of those thunks calls unsafePerformIO
[00:30:50] <boxscape_> if you have a list of thunks that consist of `1 + 1`, would you say that list effectively requires another traversal before it's evaluated?
[00:31:13] <awpr> but you have to look all the way to the end of the list to finish computing the mean before you can produce the first element, so I don't think it'd be meaningfully better than making two normal passes
[00:31:18] <tomsmeding> so after you've traversed the whole input list, you update the IORef with the final mean, and then when you force the list in the end, you evaluate each of the thunks
[00:31:35] <tomsmeding> boxscape_: no, because in strict evaluation that's one traversal
[00:31:51] <boxscape_> I see, whereas if I make my list strict, the result it different
[00:31:55] <tomsmeding> you can choose evaluation style, but in some chosen sensible evaluation order it needs to be one traversal :p
[00:32:08] <awpr> well this impl effectively copies the input list into thunks, so in terms of being able to stream the output in constant space, it's not any better
[00:32:09] <boxscape_> (I think, anyway)
[00:32:17] <tomsmeding> yeah
[00:32:21] <awpr> it does avoid retaining the original input list, but it retains something equivalent to it
[00:32:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[00:32:22] <tomsmeding> then you'd be subtracting the partial means
[00:32:29] <tomsmeding> what awpr says
[00:32:33] <boxscape_> okay
[00:33:09] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:33:46] <boxscape_> (I accept defeat)
[00:33:51] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 245 seconds)
[00:33:58] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[00:34:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:34:44] <tomsmeding> you _can_, however, compute the variance of a list (sum_i (x_i - mean(x))^2) in a single traversal
[00:34:45] *** Joins: acidjnk (~acidjnk@p200300d0c74411677812fb9732750684.dip0.t-ipconnect.de)
[00:34:59] <boxscape_> interesting
[00:35:24] <tomsmeding> but you need to do a little high-school algebra to get there, and no array fusion algorithm is going to produce that given the obvious two-pass algorithm :p
[00:36:03] <tomsmeding> (The 2 in the exponent is non-essential, works with at the very least every _fixed_ nonnegative integer power)
[00:36:23] <tomsmeding> (hm perhaps that's too much of a hint)
[00:36:42] <boxscape_> I'm not about to do this anyway, I need to eat :)
[00:37:34] *** Joins: acidjnk_new (~acidjnk@p200300d0c72670437812fb9732750684.dip0.t-ipconnect.de)
[00:37:48] *** Quits: unmanbearpig (~unmanbear@45.76.95.141) (Ping timeout: 260 seconds)
[00:38:05] *** Joins: stefan-_ (~cri@42dots.de)
[00:38:59] <tomsmeding> it's not too interesting: sum_i (x_i - mu)^2 = sum_i x_i^2 - 2 mu sum_i x_i + n mu^2
[00:39:03] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:39:41] <tomsmeding> so collecting the sum of squares, sum of values, and length (sounds like a pattern...), allows you to compute the final result in O(1)
[00:39:53] <boxscape_> hm I see
[00:39:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:40:27] <tomsmeding> of course you collect (sum_i x_i^0, ..., sum_i x_i^k) if the power was not 2 but k
[00:40:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:40:57] *** Quits: acidjnk (~acidjnk@p200300d0c74411677812fb9732750684.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:42:34] <tomsmeding> for k=2 the end result is -s_1^2 / s_0 + s_2; I wonder if that gives a pattern as well, probably it does
[00:45:09] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[00:45:09] <maerwald> cabal repl can't reload .hsc file changes it seems
[00:45:31] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[00:50:35] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:50:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:51:07] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:51:14] <monochrom> My tie-knot solution: https://paste.tomsmeding.com/bbCS30Yd
[00:52:32] <geekosaur> maerwald, ghci is not smart enough to run hsc2hs
[00:52:41] <tomsmeding> monochrom: yes :)
[00:53:04] <tomsmeding> monochrom: question 2 https://www.cs.uu.nl/docs/vakken/fp/2021/exercises/lazy.html
[00:53:52] <monochrom> OMG that is a tough question.
[00:54:45] <monochrom> Ugh "Implement the Sieve of Eratosthenes for computing prime numbers"
[00:55:23] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:56:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:58:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:58:14] <tomsmeding> yeah that's a bad question, implementing that with the right complexity in haskell is a pain. They aren't asking for the right complexity
[00:59:13] <[exa]> where's my fav diophantine equation for prime number testing?
[00:59:55] <monochrom> Beyond a certain point, I forsake laziness and use non-strictness instead, i.e., I forsake operational semantics and use denotational semantics.
[01:01:12] <tomsmeding> monochrom: that tja thing is applying the same trick as your code: the left pair element can be computed first because it's not dependent on the second
[01:01:27] <tomsmeding> so it does two traversals, to circle back to the topic we started with :p
[01:03:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:08:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[01:08:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:10:33] *** Quits: jtomas (~jtomas@95.red-88-11-64.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[01:13:09] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[01:13:57] *** Quits: cosimone (~user@93-47-228-48.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:14:40] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[01:16:43] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[01:19:46] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:21:46] *** Quits: michalz (~michalz@185.246.204.104) (Remote host closed the connection)
[01:25:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:25:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[01:27:08] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[01:30:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[01:31:20] *** Joins: trillp (~trillp@69.233.98.238)
[01:31:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:31:24] *** Quits: hseg (~gesh@185.120.126.13) (Quit: WeeChat 3.3)
[01:31:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:32:38] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[01:33:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:34:50] *** Quits: fendor_ (~fendor@178.165.199.1.wireless.dyn.drei.com) (Remote host closed the connection)
[01:38:18] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[01:39:26] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:40:48] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:41:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:44:47] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:45:52] <dsal> Heh, it's nice having people I can argue with about everything every day.  Currently:  if you write code in the form of `:: MonadIO m => a -> m ()` you've most likely made your code incorrect because someone can send in an `m` that doesn't do `MonadIO` correctly.
[01:46:07] <dsal> I mean, it's *true*, but also like, inside your own codebase, moving `liftIO` to all the callers doesn't really fix anything.
[01:46:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:46:58] <Rembane_> dsal: That sounds fun! :D
[01:47:01] <monochrom> I would slippery-slope that all the way to foldr and map.
[01:47:04] <[exa]> dsal: in an ideal world, that person will be guilty of breaking monad instance laws, and expunged to python lands
[01:47:18] <Rembane_> [exa]: No! Not the snake pit! :O :O :O 
[01:47:50] <[exa]> that is the way
[01:48:19] <monochrom> "If I wrote map :: (a -> b) -> [a] -> [b], it would be likely incorrect because someone can send in a buggy f::a->b"
[01:48:39] <[exa]> oR a BuGgy lIsT
[01:48:42] <dsal> monochrom: There's already a lot of that sort of thing.  I like the idea of making it so that people can't do bad things, but also, just because someone *can* do a bad thing doesn't mean we should make everything harder.
[01:49:26] <Rembane_> Best def: map _ _ = []
[01:49:52] <monochrom> I like Rembane_'s solution. :)
[01:49:55] <dsal> [exa]: examples include things like  `liftIO action = Don't $ error "didn't do it"` and `liftIO action = Stupid $ action >> action` or even just doing extra stuff.
[01:49:57] <monochrom> I mean >:)
[01:50:38] <dsal> Rembane_: We've secretly replaced your `map` with a different implementation that satisfies the compiler.  Let's see if anyone notices.
[01:50:51] <monochrom> Really, nihilism is the unique solution to both parametricity and resilience against human mistakes.
[01:52:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:52:30] <boxscape_> hm so this was just tweeted https://twitter.com/kerckhove_ts/status/1455657935019941892
[01:52:33] <[exa]> dsal: to the snake pit I said! :D
[01:52:49] <boxscape_> (re: MonadIO)
[01:52:53] <dsal> boxscape_: Heh.  Person I'm arguing with...
[01:52:56] <boxscape_> I see
[01:52:58] <Rembane_> monochrom, dsal: Muaha! One of the best pranks was that a friend of mine changed the definition of addition, like this in ghci: (+) = (-) and then cleared the screen and watched the mayhem ensue. 
[01:53:09] <boxscape_> I thought that was likely too much of a coincidence to be a coincidence
[01:53:32] *** Parts: iqubic (~user@2601:602:9502:c70:458b:ca39:de67:50b0) (ERC 5.3 (IRC client for GNU Emacs 29.0.50))
[01:54:56] <[exa]> dsal: anyway, the concerns of "someone could break it" are generally invalid, some assumption drift (easily generated by a thinking being) can break literally any code
[01:55:05] <dsal> Yeah.  That's kind of where I am.
[01:55:29] <dsal> In this case, moving `liftIO` to all the callers doesn't seem clear to me.  Or as I said in conversation, I've rarely seen a situation where writing more code in general leads to fewer bugs.
[01:55:34] <[exa]> there's even some kind of rigorous proof for that, somewhere in the neighborhood of halting & rice theorems
[01:55:45] <dsal> halters gonna halt
[01:55:51] <monochrom> Is someone going to troll kerckhove with a Show instance that goes "show x = ackermann 100 100 `seq` <the actual code>"?
[01:55:53] <Rembane_> dsal: I need that on a t-shirt 
[01:56:05] <Rembane_> But isn't this why we write tests? 
[01:56:13] <[exa]> takeaway: we still rely a lot of non-code communication while sharing the code
[01:56:24] <dsal> This dude is big on tests.   I'm still staring at that `Late` instance and failing to see the problem.
[01:56:31] <boxscape_> Rembane_ but what if the evil MonadIO instance has code to figure out whether it's being run in a test or not
[01:57:17] <dsal> monochrom: He pretty much dislikes all class constraints, so that's not going to change a mind.
[01:57:35] <monochrom> OK, then perhaps my map and foldr.
[01:57:42] <Rembane_> boxscape_: Now that's fun! Doesn't that sound an awful lot like Volkswagen's cars? 
[01:57:44] <monochrom> err, my map and foldr point.
[01:57:50] <boxscape_> hah yeah
[01:57:59] <boxscape_> they shouldn't allow car manufacturers to use type classes
[01:58:06] <monochrom> Every criticism against class constraints can be translated to higher-order functions.
[01:58:14] <[exa]> "does this volkswagen halt?"
[01:58:33] <monochrom> Right? By the dictionary translation.
[01:58:45] <boxscape_> monochrom that sounds right to me
[01:59:00] <boxscape_> well
[01:59:03] <awpr> the criticisms become /stronger/ when translated to HOFs
[01:59:09] <boxscape_> you could argue that type classes with *laws* are special
[01:59:19] <boxscape_> because then you can write an instance that type checks but doesn't satisfy laws
[01:59:20] <hpc> every criticism of higher-order functions can be translated to first-order functions with sufficiently java-like data definitions
[01:59:24] <boxscape_> which you can't really do with higher order functions
[01:59:36] <boxscape_> but of course you can have pre-conditions on your higher-order functions as well
[01:59:50] <awpr> because being a typeclass imposes a guarantee that a given type has only one instance (ignoring incoherent instances)
[02:00:10] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[02:00:20] <hpc> awpr: can't ignore those, the incoherent instance can be in another module
[02:00:41] <awpr> I mean if you're using typeclasses in a not-broken way, you won't have them
[02:00:58] <hpc> it could be in another package then
[02:01:06] <awpr> can't argue against typeclasses by saying you can turn on an extension and break them intentionally
[02:01:14] <awpr> at least, not reasonably
[02:01:21] <hpc> but unreasonably...
[02:01:44] <awpr> may as well argue against the notion of types because you can wreck everything with `unsafeCoerce`
[02:03:27] <dsal> I think the thing that throws me off is "can write a bug if you try by deviating from something sensible" vs. "everything's harder, but we can't write specific types of bugs"
[02:04:07] <awpr> I can still write that delay bug without any typeclasses
[02:04:19] <hpc> without IO, even
[02:04:25] <monochrom> slippery-slopeable to "if programming is impossible, then bugs are impossible too"
[02:04:40] <boxscape_> what's the supposed solution here? Specializing the MonadIO instance so you know which implementation it will be?
[02:04:41] <awpr> given `thing :: IO Something`, `let thing' = threadDelay 1010101010 >> thing`
[02:05:18] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[02:05:26] <dsal> boxscape_: Only use known concrete instances with no typeclasses.
[02:05:29] <hpc> ooh, make that threadDelay use acme-now instead of a hard-coded number
[02:05:32] <boxscape_> I see
[02:05:48] <dsal> I really don't understand what's wrong with that `Late` instance other than just being slightly silly.
[02:05:53] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:05:58] <monochrom> BTW this criticism also translates to using any library you didn't write yourself, too.
[02:06:20] <monochrom> In fact in that case you are also vulnerable to supply-chain trust-network attacks.
[02:06:27] <hpc> dsal: nothing imo, it's just "you don't want this instance therefore the class is bad"
[02:06:30] <dsal> Someone checked in a change that generates an RSA keypair before every test iteration.  That's basically the `Late` Monad.
[02:06:34] <hpc> like saying Const invalidates Functor or something
[02:06:45] <monochrom> And the javascript community did suffer that one prominently.
[02:07:05] <dsal> hpc: That summarizes it well.
[02:07:11] <awpr> yeah, I think that argument is not useful at all.  "parameterizing your IO makes it possible to ask for bad instances" is not really any different from "parameterizing putStrLn makes it possible to print bad words"
[02:07:24] <awpr> if you don't want to print bad words, then just... don't
[02:07:43] <awpr> if you don't want to use an artificially slowed-down IO monad, then don't
[02:07:48] <hpc> there's also, what law do you add to MonadIO that makes that definition impossible?
[02:07:56] <hpc> what information could you even gain out of such a law?
[02:08:12] <hpc> when you look at the Monoid laws, you get mconcat and so many other useful things
[02:08:18] <awpr> hmm, `liftIO x >> liftIO y == liftIO (x >> y)`?
[02:08:38] <hpc> they're not just to say "neener neener" to the acme authors of the world
[02:08:54] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com)
[02:09:32] <hpc> liftIO (m >>= f) = liftIO m >>= (liftIO . f) is already a law
[02:09:35] <hpc> so... yeah
[02:09:36] <dsal> This is the same "`fold` is bad" argument, though.  I don't like knowing lots of things, so I just use `fold` whenever I want to fold things.
[02:09:41] <hpc> actually, that makes that tweet wrong to begin with
[02:09:51] <awpr> oh, yeah, that does seem to break laws then
[02:10:09] <hpc> this whole discussion is like a bad branch prediction
[02:10:26] <dsal> Delay is a weird side effect, though.
[02:10:28] *** Joins: Cajun (~Cajun@user/cajun)
[02:10:51] <hpc> but it is one
[02:11:09] <boxscape_> why is it weird?
[02:11:13] <hpc> sometimes it seems like the only thing that isn't a side effect of IO is seq making your cpu warm
[02:11:31] <dsal> It's weird because it's not *exactly* observable.  The delay may be indistinguishable from just having things be slow.
[02:12:00] <boxscape_> at least in this context you can observe the IO expression that's built up rather than the actual effect
[02:12:03] <awpr> from a laws perspective, computing the same thing but slower is generally considered not to be a difference.  but putting it as an action in an IO makes it intuitively different somehow
[02:12:07] <boxscape_> and I guess the laws are for the former
[02:13:09] <hpc> it's just where the line is drawn
[02:13:21] <dsal> One of the arguments used `error` which is not even IO.  We try to hlint some of this stuff out, but I can bottom any function call.
[02:13:30] <hpc> you could also argue pure code has side effects from being written slightly differently because of what ends up in the cpu cache at the end of evaluation
[02:14:03] <hpc> timing is commonly useful in software written in haskell, so it goes in IO's model
[02:15:11] <boxscape_> dsal eagerly awaiting someone to come up with the theoretical foundations for a haskell completeness checker
[02:15:21] <boxscape_> s/dsal/dsal I'm
[02:15:38] <boxscape_> or... totality checker might be a better word
[02:16:39] *** Quits: jkaye (~jkaye@BELVEDERE-T.ear2.Denver1.Level3.net) (Quit: Leaving)
[02:16:46] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:16:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:17:46] *** Quits: acidjnk_new (~acidjnk@p200300d0c72670437812fb9732750684.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:17:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[02:17:49] <dsal> Heh.  Yeah.  But in your own small codebase, you can also like, see what's calling what and with what.  "someone can do MonadIO wrong" is just a weird concept to me.
[02:18:02] <boxscape_> yeah
[02:19:27] <Cajun> boxscape_: does section 3.3.3 in https://arxiv.org/abs/1610.07978 count for "theoretical foundations"?
[02:20:02] <Cajun> ah well it doesnt define a foundation, he just talks about it
[02:20:07] <boxscape_> Cajun IIRC the main thing it says about totality checking is that "totality checking haskell is hard"
[02:20:22] <Cajun> what a shame ):
[02:20:36] <boxscape_> yeah
[02:20:36] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[02:21:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[02:21:52] <boxscape_> not to mention GHC inserts Any in your Core if you blink for a second
[02:22:03] <hpc> foo n | collatzConverges n = "defined" -- try checking that :D
[02:22:44] <boxscape_> hpc totality checking in dependently typed languages is usually conservative, i.e. if it can't show that it's total, it just assumes that it isn't
[02:23:02] <hpc> we're talking haskell though
[02:23:23] <boxscape_> well, if haskell did have a totality checker, I'd imagine that it'd work similarly to those
[02:23:45] <hpc> the question then though is how far in the analysis do you stop
[02:23:56] <hpc> totality checking in haskell could potentially be very easy :P
[02:24:02] <boxscape_> that is true
[02:24:08] <boxscape_> const false will work
[02:25:35] *** Quits: Jing (~textual@2604:a840:3::1021) (Remote host closed the connection)
[02:25:47] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[02:28:40] *** Joins: thyriaen (~thyriaen@x4dbf0bd8.dyn.telefonica.de)
[02:29:21] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[02:29:22] *** Joins: Jing (~textual@2604:a840:3::1021)
[02:29:29] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[02:32:41] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:34:51] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Quit: Leaving)
[02:36:47] *** Joins: jespada (~jespada@190.7.36.46)
[02:39:00] *** Quits: thyriaen (~thyriaen@x4dbf0bd8.dyn.telefonica.de) (Quit: Leaving)
[02:41:56] *** Joins: jespada_ (~jespada@190.7.36.46)
[02:42:05] *** Quits: jespada (~jespada@190.7.36.46) (Read error: Connection reset by peer)
[02:48:37] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:57:34] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com) (Ping timeout: 260 seconds)
[02:59:20] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[02:59:37] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:02:39] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[03:07:26] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[03:07:40] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:07:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:07:41] *** Joins: wroathe (~wroathe@user/wroathe)
[03:09:49] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:11:22] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[03:12:31] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[03:17:01] *** Quits: Jing (~textual@2604:a840:3::1021) (Remote host closed the connection)
[03:17:35] *** Joins: Jing (~textual@2604:a840:3::1021)
[03:21:28] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com)
[03:26:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[03:28:18] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:32:00] <dsal> One thing that came up in this discussion is the (,) Foldable.  Is there actually a good use case for that?  It's super easy to confuse people at least.
[03:32:24] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[03:32:43] <geekosaur> that one keeps coming up
[03:32:50] <geekosaur> > length (1,'a')
[03:32:51] <lambdabot>  1
[03:32:59] <boxscape_> not even sure (,) should have a Functor instance in base
[03:33:24] <boxscape_> (especially considering it has a Bifunctor instance)
[03:33:29] <monochrom> That one I agree is more confusing than useful.
[03:33:47] <dsal> Some things are debatable, but I'm wondering if what the "yes, this is a good idea" argument sounds like.
[03:34:03] <dsal> Functor *sort of* makes sense.
[03:34:13] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:34:34] <dsal> It's only mildly surprising, that is.
[03:34:49] <awpr> best thing I can come up with is, it can have the instance, and that's the only thing the instance could possibly do, so it may as well be provided
[03:35:21] <dsal> Scientists were so worried about what instances they could make that they never stopped to think about whether they should.
[03:35:22] <geekosaur> that's more or less the only argument for I've ever heard
[03:35:26] <awpr> I guess it could be `toList = const []`
[03:35:36] <boxscape_> it also means you can use (,) in functions that expect a functor, but then, you could also use Joker + Bifunctor instance for that (but Joker's not in base)
[03:35:47] <dsal> What's Joker?
[03:35:57] <awpr> `toList (a, b) = [unsafeCoerce a, b]`
[03:36:02] <boxscape_> https://hackage.haskell.org/package/bifunctors-5.5.11/docs/Data-Bifunctor-Joker.html
[03:36:02] *** Quits: jespada_ (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:36:13] <boxscape_> it extracts the right Functor/Foldable from a Bifunctor/-foldable
[03:36:28] <dsal> Ah, that's neat.
[03:36:42] <dsal> Why did they name the arguments `a` and `b`?  That's obviously wrong.
[03:36:55] <monochrom> To argue for it, I would start with "(,) W is the Writer W monad" so it's also a container of size 1 but oh it also has a W value piggybacked.
[03:37:24] <dsal> Is that arguing for Functor or Foldable?
[03:38:00] <monochrom> Functor, Foldable, all the way to Traversable too.  I used the "container" wording. :)
[03:38:19] <dsal> Ah.  So the same reason Maybe is.
[03:38:49] <awpr> Maybe is actually fairly useful now and then
[03:39:03] <dsal> > length Nothing
[03:39:04] <lambdabot>  0
[03:39:04] <awpr> > foldMap show (Just 42 :: Maybe Int)
[03:39:06] <lambdabot>  "42"
[03:39:11] <awpr> > foldMap show Nothing
[03:39:12] <lambdabot>  ""
[03:39:22] <dsal> Yeah, Maybe doesn't surprise.
[03:39:28] <geekosaur> yeh, the Maybe instance treated as a list of at most one element has precedent
[03:39:37] <dsal> Until it returns 2.
[03:39:59] <awpr> I've seen some writing distinguish "left-biased sums/products" from "symmetric sums/products"
[03:40:29] <awpr> the Foldable instance of `(,) a` treats it as left-biased, but people probably intuitively thing of it as symmetric
[03:40:37] <awpr> think*
[03:41:34] <dsal> I'm not familiar with that terminology.
[03:41:35] <monochrom> Right, we think of (,) as unbiased, whereas if I say "Writer" you expect it to be biased. That's where the surprise comes from.
[03:42:24] <awpr> like `data WithBonusValue x a = WithBonusValue x a` having a `Foldable` instance with length 1 shouldn't be as surprising, because it's seen as focused on the `a`, but has an extra `x` too
[03:43:07] <dsal> Yeah, that's how I look at most of the (,) instances.  I guess people just have words for those things.  :)
[03:43:58] <boxscape_> dsal actually I take it back - as it is currently set up, Joker relies on the existing Functor/Foldable instance to extract it
[03:46:46] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[03:50:20] <boxscape_> tbh I'm just confused by instance Functor (Clown f a), which ignores the function argument ( https://hackage.haskell.org/package/bifunctors-5.5.11/docs/src/Data.Bifunctor.Clown.html#line-167 ) - I suppose I should read the original paper
[03:51:01] <awpr> looks to me like those two lift normal Functors to Bifunctors that are phantom in their left or right argument
[03:51:21] *** Joins: sciencentistguy (~sciencent@hacksoc/ordinary-member)
[03:51:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:51:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:51:47] <awpr> so the Functor instance of Clown would ignore its argument because the rightmost parameter (the one Functor cares about) is the one that's phanto
[03:51:48] <awpr> m
[03:52:44] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[03:52:49] <boxscape_> but it's tagline is "Make a Functor over the first argument of a Bifunctor" - it doesn't seem like it does that
[03:52:51] <awpr> https://hackage.haskell.org/package/bifunctors-5.5.11/docs/Data-Bifunctor-Wrapped.html#t:WrappedBifunctor is the other direction
[03:52:59] <awpr> yeah, the tagline looks wrong
[03:53:20] <awpr> unless they have very weird definitions of "make", "over", and "first" or something
[03:53:28] <shapr> Is there a quickcheck instance for Data.Set somewhere?
[03:56:27] <dsal> shapr: I thought I'd find it in https://hackage.haskell.org/package/quickcheck-instances but doesn't seem to.
[03:56:43] <shapr> dsal: I thought that oo
[03:56:46] <shapr> turns out it wasn't
[03:56:47] <dsal> arbitrary = Set.fromList <$> listOf arbitrary
[03:56:51] <dsal> And then, you know, shrink.
[03:57:19] <dsal> Handwaving shrink is important because that's the easy part.
[03:58:31] *** Quits: adium (adium@user/adium) (Quit: Stable ZNC by #bnc4you)
[03:58:59] <dsal> I guess it's just something like `shrink = fmap Set.fromList . shrink . Set.toList`
[04:02:46] <boxscape_> hm okay so the actual way to extract the right functor is WrapBifunctor as awpr said and then to extract the left one you'd have to do WrapBifunctor . Flip
[04:06:42] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:15:59] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:17:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:23:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:25:25] *** Quits: mmhat (~mmh@55d4a263.access.ecotel.net) (Ping timeout: 268 seconds)
[04:26:39] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[04:27:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:29:50] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 268 seconds)
[04:32:04] *** Quits: Null_A (~null_a@2601:645:8700:2290:91de:cb47:8eef:9a3e) (Remote host closed the connection)
[04:34:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[04:34:15] *** Quits: cigsender (~cigsender@74.124.58.162) (Quit: Lost terminal)
[04:35:28] *** Joins: Null_A (~null_a@2601:645:8700:2290:91de:cb47:8eef:9a3e)
[04:36:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:37:34] *** Joins: mmhat (~mmh@55d4a3df.access.ecotel.net)
[04:38:41] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:43:54] *** Quits: hippoid (~idris@184.105.6.88) (Quit: Lost terminal)
[04:52:32] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[04:52:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[05:04:55] *** Joins: hiruji (~hiruji@user/hiruji)
[05:05:27] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Read error: No route to host)
[05:05:49] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[05:06:54] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[05:07:29] *** Joins: acidsys (~LSD@2.lsd.systems)
[05:09:12] *** Quits: retro_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[05:10:53] *** Joins: euouae (~euouae@user/euouae)
[05:10:56] <euouae> Hello
[05:11:09] <euouae> Are the hackage packages signed?
[05:12:01] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[05:12:02] <Axman6> there is some sort of signing mechanism but I don't know much about it. I don't think they are signed by the authors (stackage does allow that)
[05:13:05] <euouae> https://www.stackage.org/lts-18.14/package/base-4.14.3.0 For example, what is the signature here and how can it be pulled up?
[05:13:08] <Axman6> https://github.com/haskell/hackage-security is pretty relevant
[05:14:14] <euouae> Axman6 thanks. It seems that there is plenty of work for many projects to do related to TUF 
[05:14:39] <euouae> In some sense, it's encouraging. I'm learning about crypto and stuff now and if I could participate in such a project it would be nice
[05:16:10] *** kawpuh1 is now known as kawpuh
[05:18:24] *** Quits: hueso (~root@user/hueso) (Quit: No Ping reply in 180 seconds.)
[05:19:36] *** Joins: hueso (~root@user/hueso)
[05:19:54] *** Quits: jonathanclarke (~jonathanc@202.51.76.91) (Ping timeout: 260 seconds)
[05:20:34] *** Quits: Jing (~textual@2604:a840:3::1021) (Remote host closed the connection)
[05:21:13] *** Joins: Jing (~textual@2604:a840:3::1021)
[05:27:06] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 268 seconds)
[05:27:54] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[05:28:30] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[05:31:59] *** Joins: jonathanclarke (~jonathanc@202.51.76.91)
[05:32:42] *** Joins: hiruji (~hiruji@user/hiruji)
[05:33:35] <euouae> Or at least be able to observe the progress & apply the security when available. Thanks for the response.
[05:33:37] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[05:34:18] *** Quits: mmhat (~mmh@55d4a3df.access.ecotel.net) (Quit: WeeChat 3.3)
[05:34:18] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Read error: Connection reset by peer)
[05:34:29] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[05:34:31] *** Joins: emanuele6 (~emanuele6@net-2-36-98-113.cust.vodafonedsl.it)
[05:34:51] *** Quits: emanuele6 (~emanuele6@net-2-36-98-113.cust.vodafonedsl.it) (Changing host)
[05:34:51] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[05:37:59] *** Quits: tremon (~tremon@217-63-61-89.cable.dynamic.v4.ziggo.nl) (Quit: getting boxed in)
[05:39:25] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 268 seconds)
[05:41:44] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[05:43:07] *** Quits: sciencentistguy (~sciencent@hacksoc/ordinary-member) (Ping timeout: 268 seconds)
[05:44:59] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 268 seconds)
[05:48:52] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[05:50:42] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 260 seconds)
[05:51:09] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[05:52:21] *** Joins: brettgilio (~brettgili@x-node.gq)
[05:53:15] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[05:54:19] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b)
[05:55:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:8872:6fff:30a7:51e0) (Ping timeout: 260 seconds)
[05:58:34] *** Quits: Null_A (~null_a@2601:645:8700:2290:91de:cb47:8eef:9a3e) (Remote host closed the connection)
[05:59:39] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:01:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:01:59] *** Joins: hiruji (~hiruji@user/hiruji)
[06:16:04] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[06:17:16] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[06:19:31] *** Quits: xff0x (~xff0x@port-92-195-109-25.dynamic.as20676.net) (Ping timeout: 268 seconds)
[06:21:08] *** Joins: xff0x (~xff0x@2001:1a81:53fb:b000:b58d:2078:260f:228a)
[06:21:21] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[06:22:04] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[06:24:24] *** Quits: juhp (~juhp@128.106.188.220) (Quit: juhp)
[06:24:38] *** Joins: juhp (~juhp@128.106.188.220)
[06:26:55] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[06:29:11] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[06:31:13] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:31:51] *** Quits: catman (~catman@user/catman) (Ping timeout: 268 seconds)
[06:33:24] *** Joins: catman (~catman@user/catman)
[06:40:16] *** Quits: alx741 (~alx741@186.178.109.189) (Quit: alx741)
[06:41:23] *** Joins: mbuf (~Shakthi@122.173.251.242)
[06:41:47] *** Joins: adium (adium@user/adium)
[06:42:56] *** Quits: catman (~catman@user/catman) (Ping timeout: 268 seconds)
[06:46:06] *** Joins: catman (~catman@user/catman)
[06:46:33] *** Quits: catman (~catman@user/catman) (Client Quit)
[06:47:34] *** Joins: catman (~catman@user/catman)
[06:47:43] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com) (Quit: Konversation terminated!)
[06:48:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:48:20] *** Joins: mishugana (~mishugana@user/mishugana)
[06:48:31] *** Quits: hiruji (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[06:48:43] <mishugana> Hello, does anybody have a quick small review of "Practical Programming" by Serrano Mena? 
[06:48:55] *** Joins: hiruji (~hiruji@user/hiruji)
[06:50:17] <mishugana> Just for a quick background, I have "Programming in Haskell" by Hutton under my belt, and was looking for the next step up. I don't know what I don't know (I have Diehl's list of todos handy, but bear with me), but if I had to choose one, I'm having trouble moving up to, say, Monad Transformers. They all start off with "lift", which Hutton's book did not cover. 
[06:51:10] <mishugana> I looked at the ToC for Serrano Mena's book, and it looks comprehensive while introducing one to the library ecosystem at the same time, but I have a nagging feeling that there is something missing between Hutton's book and Serrano Mena's book? Am I wrong?
[06:51:41] <dsal> mishugana: Do you have any software you're working on?
[06:51:48] <dsal> Some of this stuff just becomes obvious as you find you need it.
[06:51:51] <mishugana> By the way, I looked at the haskell programming from first principles book, but I couldnt' abide the long-winded seemingly-unnecessary verbose style
[06:52:02] <dsal> @hoogle [a] -> [[a]] -> [[a]]
[06:52:03] <lambdabot> No results found
[06:52:12] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[06:52:21] <mishugana> dsal: Nothing in particular right now, but I would like to use Haskell for exploratory compiler writing in the future, as a start, say
[06:52:50] <mishugana> About Will Kurt's book, I didn't like that either, and it doesn't cover Monad Transformers either
[06:53:20] <mishugana> I tried reading the Haskell Wiki, but again, they mention "lift" right from the get go, and I could look that up, but looking for a more cohesive approach
[06:54:49] <monochrom> For monad transformer, I would try the Typeclassopedia and/or the Haskell Wikibook (not to be confused with the Haskell Wiki)
[06:54:52] <mishugana> I loved Hutton's book and his style, by the way, and wish he'd written the next step up as well :(
[06:54:58] <dsal> I can't really learn stuff without doing stuff.  Some of these concepts I read through and didn't really get until that one day when I was trying to do a thing and remembered that concept I read about back in the day and went back to review it.
[06:55:32] <monochrom> The Haskell Wiki is known to be written for author self-gratification not readership benefit.
[06:55:49] <mishugana> dsal: that makes sense, and to a great extent, applies to me as well. However, you mention connecting your practical experience with the theory you'd read sometime back - is that from book(s) or from the wiki/misc. resources?
[06:55:58] <mishugana> monochrom: hahaha
[06:56:16] <mishugana> yes, it does seem to be like that in places, I suppose
[06:57:15] <mishugana> That's why I was wondering if anyone had worked through the "Practical Haskell" book - I don't mind doing extra legwork in parallel, but wondering how people's experience with it went
[06:57:20] <dsal> mishugana: Not even sure.  I've read the Hutton book, and HPFFP and some specific topics stuff like Penner's Optics book and MacGuire's "Thinking with Types" and random topics people bring up and stuff.  Many of those are just words that pass through me until that time I need them.
[06:57:33] <mishugana> dsal: Hmmm
[06:58:18] <mishugana> Interestingly, I've bookmarked "The Monad Book" and "Thinking with Types" for future reading since I do wish to learn the theoretical/mathematical side of it, but after getting to at least an intermediate "practical" Haskell programmer :)
[06:58:41] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[06:58:55] <dsal> I learn more from just writing and maintaining programs.
[06:59:55] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (Ping timeout: 260 seconds)
[07:05:26] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[07:11:20] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:11:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b)
[07:14:25] <sm> @where books
[07:14:25] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[07:14:26] <sm> might have some other options
[07:15:14] <sm> you sound a bit past HTAC, though I think it has some good practical stuff too
[07:15:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 268 seconds)
[07:19:44] *** Quits: boxscape_ (~boxscape_@i59F67A65.versanet.de) (Quit: Connection closed)
[07:20:18] <mishugana> sm: Thank you for that list!
[07:20:46] <mishugana> I just checked HTAC. It's by Mark Watson, the Lisper - this guy is prolific!
[07:21:48] <mishugana> sm: Very useful list. Thank you yet again - I haven't seen quite a few of those books anywhere during my "research"
[07:22:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[07:22:30] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[07:24:23] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[07:24:56] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:27:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:29:44] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com)
[07:30:10] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[07:30:19] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-c881-7958-2102-07bc.res6.spectrum.com) (Client Quit)
[07:37:16] <sm> yes, HTAC is great (and so is extrema.is books list, except hard to find)
[07:43:23] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[07:43:23] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[07:43:23] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[07:44:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:44:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:44:00] *** Joins: wroathe (~wroathe@user/wroathe)
[07:45:00] <Axman6> just had my mind blown by not finding any haskell package which fully represents KMLs
[07:48:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[07:50:40] *** Joins: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com)
[07:50:45] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:51:06] *** Parts: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com) ()
[07:52:47] *** Joins: Axman6348 (~Axman6@user/axman6)
[07:54:06] <dsal> I've done enough work in that area that I just got annoyed by it without my mind being blown.
[07:54:57] <dsal> Axman6: here's my Very Good implementation:  https://github.com/dustin/heatmap/blob/main/src/Graphics/Heatmap/KML.hs
[07:55:27] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[07:55:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 268 seconds)
[07:57:56] *** Joins: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com)
[07:57:56] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[07:58:19] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[07:59:00] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[07:59:39] *** Axman6348 is now known as Axman6
[08:01:05] <Axman6> ha
[08:01:24] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[08:01:31] *** Joins: MQ-17J (~MQ-17J@2607:fb90:1d84:6382:7ad7:ddcd:c10b:ea3e)
[08:01:55] *** Quits: MQ-17J (~MQ-17J@2607:fb90:1d84:6382:7ad7:ddcd:c10b:ea3e) (Read error: Connection reset by peer)
[08:02:15] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[08:02:21] *** Quits: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com) (Client Quit)
[08:02:36] *** Parts: mishugana (~mishugana@user/mishugana) ()
[08:02:51] *** Joins: wei2912 (~wei2912@138.75.71.147)
[08:05:03] *** Joins: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com)
[08:09:18] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 260 seconds)
[08:09:39] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[08:10:57] *** Joins: wei2912 (~wei2912@138.75.71.147)
[08:13:11] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[08:14:33] <jle`> woo hoo i upgraded everything and can finally build ghc 9+
[08:14:37] <jle`> just in time for 9.2
[08:15:56] <jle`> okay um, is there a cabal equivalent for 'stack new' that sets up a skeleton project?
[08:16:18] <sclv> cabal init
[08:17:05] <Axman6> does that actually give you anything?
[08:17:10] <jle`> ah the docs say it only sets up the package file
[08:17:13] <jle`> but i can try it
[08:17:43] <Axman6> stack new is the mean feature I miss from stack
[08:18:07] <Axman6> main*
[08:18:12] <sclv> for richer projects thereâ€™s dedicated tools like summoner
[08:18:32] <jle`> ooh it made the whole skeleton, neat
[08:18:35] <jle`> thanks!
[08:18:38] <Axman6> oh yeah, summoner is great, but not sure if it's up to date
[08:18:47] <Axman6> check out summoner-tui too
[08:19:38] <jle`> ooh that's neat
[08:19:40] <jle`> it generates licenses too
[08:22:03] *** Quits: kronicmage (user3131@neotame.csclub.uwaterloo.ca) (Ping timeout: 265 seconds)
[08:22:27] *** Joins: kronicmage (user28253@neotame.csclub.uwaterloo.ca)
[08:23:41] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Remote host closed the connection)
[08:24:08] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[08:24:10] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Remote host closed the connection)
[08:25:17] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[08:25:30] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Remote host closed the connection)
[08:26:00] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:26:12] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[08:29:18] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[08:47:13] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[08:55:32] *** Quits: azeem (~azeem@2a00:801:3c9:cf16:6d84:9e6f:3c27:1ca6) (Ping timeout: 268 seconds)
[09:05:02] *** Joins: azeem (~azeem@2a00:801:3c9:cf16:6d84:9e6f:3c27:1ca6)
[09:19:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:25:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Ping timeout: 268 seconds)
[09:27:10] *** Joins: desophos (~desophos@2601:249:1680:a570:fd0e:5698:a1d9:2696)
[09:28:31] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:31:26] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[09:35:09] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:36:23] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[09:38:49] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[09:44:17] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[09:46:17] *** Joins: Core5109 (~Core5109@47.245.54.240)
[09:52:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[09:58:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[09:58:39] *** Joins: Guest|64 (~Guest|64@cpe688f2ec6dd93-cm688f2ec6dd90.cpe.net.fido.ca)
[09:59:05] *** Quits: Guest|64 (~Guest|64@cpe688f2ec6dd93-cm688f2ec6dd90.cpe.net.fido.ca) (Client Quit)
[10:00:05] *** Joins: kadir (~kadir@95.7.9.203)
[10:00:23] *** Parts: kadir (~kadir@95.7.9.203) ()
[10:02:04] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[10:02:40] *** Joins: jtomas (~jtomas@95.red-88-11-64.dynamicip.rima-tde.net)
[10:08:18] *** Joins: Guest|8 (~Guest|8@c-75-73-118-185.hsd1.mn.comcast.net)
[10:09:59] <Guest|8> Trying to install ghcup and getting this error:   [ Info  ] verifying digest of: ghc-8.10.7-x86_64-apple-darwin.tar.xz
[10:10:00] <Guest|8> [ Info  ] Unpacking: ghc-8.10.7-x86_64-apple-darwin.tar.xz to /private/var/folders/0h/xrg9b4ln6yd4rmgm5pdrb36c0000gn/T/ghcup-2849be2844e9b286
[10:10:00] <Guest|8> [ Info  ] Installing GHC (this may take a while)
[10:10:01] <Guest|8> [ ghc-configure ] checking Xcode version... not found (too old?)
[10:10:01] <Guest|8> [ ghc-configure ] checking for gcc... gcc
[10:10:02] <Guest|8> [ ghc-configure ] checking whether the C compiler works... no
[10:10:02] <Guest|8> [ ghc-configure ] configure: error: in `/private/var/folders/0h/xrg9b4ln6yd4rmgm5pdrb36c0000gn/T/ghcu...
[10:10:03] <Guest|8> [ ghc-configure ] configure: error: C compiler cannot create executables
[10:10:03] <Guest|8> [ ghc-configure ] See `config.log' for more details
[10:10:04] <Guest|8> [ Error ] Process "sh" with arguments ["./configure",
[10:10:04] <Guest|8> [ ...   ]                              "--prefix=/Users/jwb/.ghcup/ghc/8.10.7"] failed with exit code 77.
[10:10:05] <Guest|8> [ Error ] Also check the logs in /Users/jwb/.ghcup/logs
[10:10:05] <Guest|8> "_eghcup --cache install ghc recommended" failed!
[10:10:06] <Guest|8> sh-3.2$ 
[10:10:51] <Guest|8> Downloaded the dms file manually and adjusted my PATH, but cannot see how to actually activate it.
[10:12:48] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:12:52] <Axman6> @where paste
[10:12:53] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[10:13:06] <Axman6> please don't paste multiple lines into IRC
[10:13:11] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[10:13:48] <Axman6> you probably need to install the Xcode command line tools
[10:14:08] <Axman6> try running xcode-select --install
[10:15:46] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[10:16:52] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[10:24:13] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:31:43] *** Quits: Guest|8 (~Guest|8@c-75-73-118-185.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[10:38:03] *** Quits: desophos (~desophos@2601:249:1680:a570:fd0e:5698:a1d9:2696) (Quit: Leaving)
[10:40:00] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:46:19] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[10:46:19] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[10:46:20] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[10:48:20] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:51:27] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[10:52:43] *** Joins: fendor (~fendor@178.165.199.1.wireless.dyn.drei.com)
[10:53:53] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:54:02] *** Joins: kadir (~kadir@95.7.9.203)
[10:55:49] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:56:17] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[11:01:06] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[11:06:15] *** Quits: xff0x (~xff0x@2001:1a81:53fb:b000:b58d:2078:260f:228a) (Ping timeout: 268 seconds)
[11:08:43] *** Joins: xff0x (~xff0x@2001:1a81:53fb:b000:b58d:2078:260f:228a)
[11:10:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[11:11:25] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:12:03] *** Joins: lbseale_ (~lbseale@user/ep1ctetus)
[11:14:10] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Ping timeout: 260 seconds)
[11:15:12] *** Joins: chele (~chele@user/chele)
[11:16:06] *** Joins: lortabac (~lortabac@88.125.6.227)
[11:17:31] *** Joins: michalz (~michalz@185.246.204.109)
[11:18:30] *** Joins: wonko (~wjc@user/wonko)
[11:19:49] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 268 seconds)
[11:20:06] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[11:20:24] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[11:21:16] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:21:20] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 260 seconds)
[11:22:56] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:23:32] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 268 seconds)
[11:24:50] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[11:29:36] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:30:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:35:28] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:37:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[11:38:05] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[11:38:54] *** Quits: TMA (tma@twin.jikos.cz) (Ping timeout: 260 seconds)
[11:39:07] *** Joins: TMA (tma@twin.jikos.cz)
[11:39:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:42:00] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[11:44:40] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:45:47] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[11:46:54] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[11:47:35] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[11:47:51] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:49:13] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[11:49:45] *** Joins: cfricke (~cfricke@user/cfricke)
[11:54:22] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[11:54:51] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[11:55:32] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:55:47] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:58:11] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[12:00:41] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:00:52] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:01:14] <drownbes> mishugana: "haskell in depth" by Bragilevsky is really good book for going beyond basics
[12:02:10] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[12:03:56] <drownbes> it explains prelove spells https://paste.tomsmeding.com/hGfXvJgv pretty well
[12:03:58] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:07:18] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[12:13:24] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[12:14:33] *** Joins: mmhat (~mmh@55d4baf7.access.ecotel.net)
[12:15:34] *** Joins: mei (~mei@user/mei)
[12:17:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:18:43] *** Quits: mbuf (~Shakthi@122.173.251.242) (Quit: Leaving)
[12:22:04] *** Joins: mbuf (~Shakthi@122.173.251.242)
[12:22:12] *** Joins: trcc (~trcc@users-1190.st.net.au.dk)
[12:24:56] *** Joins: p_____ (~dyeplexer@user/dyeplexer)
[12:25:14] *** Quits: p_____ (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[12:26:12] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[12:28:17] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 268 seconds)
[12:30:08] *** Quits: bakinonion[m] (~bakinonio@2001:470:69fc:105::ddb3) (Quit: You have been kicked for being idle)
[12:30:48] *** Joins: trcc_ (~trcc@eduroam09.au.dk)
[12:30:59] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 264 seconds)
[12:34:50] *** Quits: trcc (~trcc@users-1190.st.net.au.dk) (Ping timeout: 260 seconds)
[12:35:32] *** Quits: trcc_ (~trcc@eduroam09.au.dk) (Ping timeout: 260 seconds)
[12:39:40] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:43:43] *** nckx is now known as Thunderbi
[12:44:08] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:46:28] *** Quits: azeem (~azeem@2a00:801:3c9:cf16:6d84:9e6f:3c27:1ca6) (Read error: Connection reset by peer)
[12:46:50] *** Thunderbi is now known as guix-znc-test
[12:46:54] *** guix-znc-test is now known as guix
[12:47:04] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[12:48:25] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[12:49:09] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[12:49:44] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[12:51:50] *** guix is now known as nckx
[12:52:19] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[12:52:21] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[12:53:41] *** Joins: gawen (~gawen@user/gawen)
[12:54:23] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 264 seconds)
[12:54:32] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:54:47] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[12:57:12] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:57:30] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:59:36] *** Joins: cfricke (~cfricke@user/cfricke)
[13:01:23] *** Quits: cfricke (~cfricke@user/cfricke) (Client Quit)
[13:01:53] *** Joins: ubert (~Thunderbi@p200300ecdf4fca4ae019fddc82d0353e.dip0.t-ipconnect.de)
[13:02:48] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[13:08:18] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:09:48] *** Quits: jtomas (~jtomas@95.red-88-11-64.dynamicip.rima-tde.net) (Remote host closed the connection)
[13:13:42] *** Joins: nschoe (~quassel@178.251.84.79)
[13:21:29] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:23:46] *** Quits: ubert (~Thunderbi@p200300ecdf4fca4ae019fddc82d0353e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:26:51] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[13:30:53] *** Joins: trcc (~trcc@eduroam09.au.dk)
[13:33:51] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[13:34:56] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[13:35:56] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[13:37:49] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[13:37:50] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[13:38:38] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 265 seconds)
[13:38:47] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[13:39:52] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[13:39:54] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[13:41:02] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[13:44:44] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 268 seconds)
[13:45:20] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:46:10] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:47:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:48:32] *** Quits: thornAvery (~thornAver@2401:c080:1800:4346:5400:3ff:fe2c:c8f8) (Ping timeout: 268 seconds)
[13:49:45] *** Joins: acidjnk_new (~acidjnk@p200300d0c726704340645b0c72496253.dip0.t-ipconnect.de)
[13:50:28] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[13:51:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[13:53:03] *** Quits: trcc (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[13:56:20] *** Joins: alzgh (~alzgh@user/alzgh)
[13:58:32] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[14:02:17] *** Joins: wonko (~wjc@user/wonko)
[14:06:19] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[14:07:27] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[14:08:19] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[14:08:57] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:13:44] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[14:21:31] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[14:21:45] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 268 seconds)
[14:22:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:23:22] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[14:24:09] *** Quits: fendor (~fendor@178.165.199.1.wireless.dyn.drei.com) (Remote host closed the connection)
[14:25:19] *** Joins: fendor (~fendor@178.165.199.1.wireless.dyn.drei.com)
[14:25:50] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:27:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[14:28:48] *** Joins: trcc (~trcc@eduroam09.au.dk)
[14:29:12] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[14:29:32] *** Joins: alzgh (~alzgh@user/alzgh)
[14:30:22] *** Quits: xff0x (~xff0x@2001:1a81:53fb:b000:b58d:2078:260f:228a) (Ping timeout: 268 seconds)
[14:30:23] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Read error: Connection reset by peer)
[14:30:53] *** Joins: alx741 (~alx741@186.178.109.189)
[14:32:11] *** Quits: fendor (~fendor@178.165.199.1.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[14:32:52] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[14:33:20] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[14:34:36] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[14:34:41] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[14:36:56] *** Joins: xff0x (~xff0x@2001:1a81:53fb:b000:b58d:2078:260f:228a)
[14:38:03] <Hecate> < tomsmeding> Hecate: looks neat! I think I've written a Pretty class like 10 times by now // So have I, hence this library :3
[14:38:24] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[14:38:29] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[14:38:29] <Hecate> < tomsmeding> Hecate: I think it's good that you didn't go overboard with the predefined instances // I tried to keep it as close to Show as possible, the real deal is for one's own datatypes
[14:38:49] *** Joins: alzgh (~alzgh@user/alzgh)
[14:39:37] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[14:43:39] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[14:43:39] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[14:43:39] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[14:43:45] <boxscape_> Hecate the documentation on hackage says "decodeUtf8`" - I can't quite tell if the ` shouldn't be there or if it should be decodeUtf8'
[14:44:10] <Hecate> boxscape_: it's Haddock's fault!! :<
[14:44:13] <boxscape_> :(
[14:44:22] <Hecate> 'decodeUtf8'' should be valid to link the identifier
[14:45:09] *** hololeap_ is now known as hololeap
[14:45:16] <boxscape_> yeah true it's strange that it inserts a `
[14:46:48] <boxscape_> Ah, I see, you did it like 'decodeUtf8'' for the instance documentation but `decodeUtf8'` for the "You should not try to display ByteStrings" documentation
[14:47:00] <Hecate> hhhhhhhhh
[14:48:53] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[14:50:43] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[14:51:27] *** Joins: ubikium (~ubikium@i223-218-66-82.s41.a013.ap.plala.or.jp)
[14:52:18] <boxscape_> Hecate that's better :)
[14:53:56] <boxscape_> Hecate though I think you have now changed the last line to say ByteStrin&g
[14:54:50] <Hecate> hhhhhhhhhhhhh
[14:54:58] * Hecate foams at the mouth
[14:55:30] <Hecate> alright should be good
[14:55:31] <Hecate> thanks boxscape_ 
[14:57:01] <Hecate> boxscape_: can you see it changed here? https://hackage.haskell.org/package/text-display-0.0.1.0/docs/Data-Text-Display.html#g:4
[14:57:13] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[14:58:08] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[14:58:47] *** Parts: ubikium (~ubikium@i223-218-66-82.s41.a013.ap.plala.or.jp) (Leaving)
[14:59:03] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[14:59:18] <Cajun> if its meant to be decodeUtf8' then its working on my end
[15:00:38] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[15:00:51] <Hecate> Cajun: okay, Hackage caches everything on my end so I can't see if it's been take into account :)
[15:01:10] <Hecate> Cajun: yeah, the last line, thank you :)
[15:01:47] *** Joins: ubikium (~ubikium@i223-218-66-82.s41.a013.ap.plala.or.jp)
[15:02:49] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[15:02:49] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[15:02:49] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[15:03:14] *** Joins: tomku (~tomku@user/tomku)
[15:03:25] *** Joins: guniberas (~guniberas@42.191.188.121)
[15:03:45] *** Joins: hippoid (~idris@184.105.6.88)
[15:03:48] *** Quits: ubikium (~ubikium@i223-218-66-82.s41.a013.ap.plala.or.jp) (Quit: Leaving)
[15:04:08] *** Joins: ubikium (~ubikium@i223-218-66-82.s41.a013.ap.plala.or.jp)
[15:04:41] <Hecate> wew already 14 downloads
[15:05:18] *** Quits: ubikium (~ubikium@i223-218-66-82.s41.a013.ap.plala.or.jp) (Client Quit)
[15:05:36] *** Joins: ubikium (~ubikium@i223-218-66-82.s41.a013.ap.plala.or.jp)
[15:06:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:07:06] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[15:07:06] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[15:07:09] *** allbery_b is now known as geekosaur
[15:07:27] *** Joins: mei (~mei@user/mei)
[15:07:47] *** Quits: trcc (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[15:08:31] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[15:09:54] *** Joins: img (~img@user/img)
[15:11:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[15:14:02] <Cajun> i wonder if it would be useful to supply an overloaded `show` method to make displaying stuff unchanged, so long as `show` is hidden from the prelude
[15:15:40] *** Joins: Farzad (~FarzadBek@178.131.31.240)
[15:16:12] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[15:17:33] *** Joins: img (~img@user/img)
[15:17:47] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (Ping timeout: 264 seconds)
[15:17:56] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (Ping timeout: 260 seconds)
[15:18:34] <Hecate> Cajun: the prerequisite makes it really difficult in terms of adoption :/
[15:18:45] <Hecate> I don't wish to export a conflictual `show`
[15:19:05] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[15:19:19] <Cajun> yeah i figured, and it wouldnt be too hard to define on the user end either should they want it
[15:21:36] <Hecate> yup'
[15:21:37] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:22:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:22:56] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[15:23:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:03] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[15:24:49] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[15:25:11] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[15:27:09] <boxscape_> Hecate sorry, had lunch, but yeah, looks good
[15:27:14] *** Joins: gentauro (~gentauro@user/gentauro)
[15:28:19] <Hecate> boxscape_: did you eat well? :)
[15:28:23] <boxscape_> yes, thank you :)
[15:30:11] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[15:30:11] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:32:10] *** Quits: acidjnk_new (~acidjnk@p200300d0c726704340645b0c72496253.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:32:14] *** Joins: gentauro (~gentauro@user/gentauro)
[15:32:48] *** Joins: trcc (~trcc@users-5343.st.net.au.dk)
[15:33:31] *** Joins: __monty__ (~toonn@user/toonn)
[15:33:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:34:03] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[15:34:04] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:35:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:36:11] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:37:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:37:18] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:37:26] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[15:37:47] *** Joins: alzgh (~alzgh@user/alzgh)
[15:39:29] *** Joins: gentauro (~gentauro@user/gentauro)
[15:40:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:41:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:44:05] *** Joins: cfricke (~cfricke@user/cfricke)
[15:47:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[15:48:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:51:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:52:06] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[15:52:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:54:00] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[15:54:26] *** Parts: kadir (~kadir@95.7.9.203) ()
[15:56:02] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (Ping timeout: 260 seconds)
[15:56:02] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (Ping timeout: 260 seconds)
[15:56:10] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[15:56:10] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[15:56:23] *** Joins: Ainoretho (~ypw@huji-132-64-245-57.xt.huji.ac.il)
[15:56:32] *** Quits: Ainoretho (~ypw@huji-132-64-245-57.xt.huji.ac.il) (Client Quit)
[15:57:24] *** Joins: Ainoretho (~ypw@huji-132-64-245-57.xt.huji.ac.il)
[15:57:32] *** Quits: Ainoretho (~ypw@huji-132-64-245-57.xt.huji.ac.il) (Client Quit)
[15:57:57] *** Joins: Ainoretho (~ypw@huji-132-64-245-57.xt.huji.ac.il)
[15:59:14] *** Quits: Ainoretho (~ypw@huji-132-64-245-57.xt.huji.ac.il) (Client Quit)
[16:00:39] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[16:00:39] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[16:01:02] *** Joins: gentauro (~gentauro@user/gentauro)
[16:01:51] *** Joins: fendor (~fendor@178.165.199.1.wireless.dyn.drei.com)
[16:01:51] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[16:02:16] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Ping timeout: 268 seconds)
[16:02:43] *** Joins: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it)
[16:02:43] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[16:02:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:03:21] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[16:03:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:04:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[16:06:35] *** Quits: xff0x (~xff0x@2001:1a81:53fb:b000:b58d:2078:260f:228a) (Ping timeout: 268 seconds)
[16:06:39] *** Joins: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net)
[16:07:07] *** Joins: xff0x (~xff0x@2001:1a81:53fb:b000:1550:cc88:ac55:5459)
[16:08:06] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 260 seconds)
[16:09:43] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:10:02] *** Quits: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 260 seconds)
[16:11:09] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:13:06] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:13:21] <dminuoso> Gah. prettyprinter is funnyu
[16:13:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:13:42] *** Joins: cosimone (~user@93-34-133-207.ip49.fastwebnet.it)
[16:13:53] <dminuoso> https://hackage.haskell.org/package/prettyprinter
[16:13:56] <dminuoso> [...] which can then be rendered to a variety of formats, for example plain Text, or Markdown. What you are reading right now was generated by this library (see GenerateReadme.hs).
[16:14:11] <dminuoso> Funny, because GenerateReadme.hs doesn't render it into markdown, they simply bake the markdown into the document.
[16:14:16] <dminuoso> :>
[16:14:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:14:52] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:15:38] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[16:18:22] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[16:20:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:20:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:22:56] *** Joins: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it)
[16:23:57] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[16:23:57] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[16:24:27] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[16:24:28] *** Quits: cosimone (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 268 seconds)
[16:28:46] *** Quits: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 268 seconds)
[16:29:03] *** Joins: trcc_ (~trcc@eduroam09.au.dk)
[16:29:23] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 268 seconds)
[16:29:39] *** Joins: gentauro (~gentauro@user/gentauro)
[16:29:55] *** Quits: immae (~immae@2a01:4f8:141:53e7::) (Quit: WeeChat 2.9)
[16:30:24] *** Joins: immae (~immae@2a01:4f8:141:53e7::)
[16:31:08] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[16:31:50] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[16:32:08] *** Quits: trcc (~trcc@users-5343.st.net.au.dk) (Ping timeout: 260 seconds)
[16:33:59] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (Ping timeout: 264 seconds)
[16:33:59] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[16:34:19] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[16:35:14] <maerwald> big names in the author list
[16:35:42] <Hecate> :'')
[16:35:53] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[16:36:11] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[16:36:47] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[16:36:48] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Read error: Connection reset by peer)
[16:37:37] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[16:39:57] *** Joins: gentauro (~gentauro@user/gentauro)
[16:40:13] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[16:46:11] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[16:50:26] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-b0ad-0af8-2f41-da4e.res6.spectrum.com)
[16:50:26] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[16:52:03] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:52:37] *** Joins: yrlnry (~mjd@pool-100-11-2-80.phlapa.fios.verizon.net)
[16:54:13] *** Joins: kadir (~kadir@95.7.9.203)
[16:54:16] *** Joins: kuribas (~user@ptr-25vy0i9fcjh581tavd9.18120a2.ip6.access.telenet.be)
[16:55:34] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[16:55:55] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:56:21] *** Joins: gentauro (~gentauro@user/gentauro)
[16:57:23] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Ping timeout: 264 seconds)
[17:00:21] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[17:01:43] <timCF> Hello! Is there any way expression in hpack (package.yaml) to exclude module from exposed-modules list of cabal file?
[17:02:33] <maerwald> in plain cabal files easily
[17:02:43] *** Quits: trcc_ (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[17:03:15] *** Joins: trcc (~trcc@users-5343.st.net.au.dk)
[17:04:17] <timCF> maerwald: yeah, but plain cabal is kinda pain to deal with :(
[17:04:17] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[17:04:23] <maerwald> not really
[17:05:14] <timCF> Â¯\_(ãƒ„)_/Â¯
[17:05:34] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[17:05:52] <maerwald> given the fact that you come here asking for something that's *really* simple in cabal, my takeaway is that hpack is a pain to deal with 
[17:06:52] <yushyin> maybe we just need one more layer of abstraction to deal with hpack? ;)
[17:07:08] <maerwald> timCF: https://github.com/sol/hpack#library-fields
[17:07:09] <jneira[m]> well in cabal is move the module from `exposed-modules` to `other-modules` iirc
[17:07:20] <jneira[m]> i guess hpack has the same field
[17:07:22] <maerwald> the documentation of hpack seems to be very clear
[17:07:28] <merijn> jneira[m]: Presumably he's using wild-cards to do things automatically
[17:07:39] <timCF> maerwald: I didn't did much research of latest cabal development, but for me critical thing was atomated maintainance of exposed-modules (project contains 469 modules and this number is changing from time to time as well as module names)
[17:07:43] <merijn> There's a reason why cabal (intentionally) doesn't support wildcards
[17:08:20] <jneira[m]> merijn: cause at some point you want to do excluisions .-)
[17:08:32] <merijn> timCF: I have a few 100 modules too, but generally you only add/move only a handful at a time anyway, so it's like 5s work to manage
[17:08:54] <merijn> jneira[m]: Well, yes, but also, more importantly that for packaging and distribution "explicitness" is a feature, not a bug
[17:09:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:09:23] <jneira[m]> maerwald: >  	Outside conditionals: All modules in source-dirs less exposed-modules less any modules mentioned in when. Inside conditionals, and only if exposed-modules is not specified inside the conditional: All modules in source-dirs of the conditional less any modules mentioned in when of the conditional
[17:09:30] <jneira[m]> :-D 
[17:09:38] <merijn> cabal files are intended to be able to function as manifest files, defining explicitly what *is* and *is not* part of a package. Arguably the support for wildcard data files is a miss-feature
[17:09:43] *** Joins: gentauro (~gentauro@user/gentauro)
[17:09:49] <jneira[m]> it looks like a groucho marx speech
[17:09:54] <timCF> maerwald: thanks! 
[17:10:09] *** Joins: max22- (~maxime@2a01cb0883359800e04aab7dab8e26cf.ipv6.abo.wanadoo.fr)
[17:10:26] <maerwald> merijn: the proposed solution is to expand all paths when you do `cabal sdist`
[17:10:42] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[17:11:13] <maerwald> then hackage would just reject packages with unexpanded paths
[17:11:45] <merijn> maerwald: Still leads to people accidentally packaging garbage, though :p
[17:13:02] <maerwald> well, hackage doesn't reject bad code either
[17:13:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[17:13:49] *** Joins: cosimone (~user@93-34-133-207.ip49.fastwebnet.it)
[17:15:01] <maerwald> would be funny getting an error on upload like "your code looks like garbage, we don't want that here" :D
[17:15:22] <maerwald> that would be a nice aprils fool
[17:15:22] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[17:18:44] *** Quits: max22- (~maxime@2a01cb0883359800e04aab7dab8e26cf.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:21:03] *** Joins: gentauro (~gentauro@user/gentauro)
[17:22:37] *** Quits: hrdl (~hrdl@mail.hrdl.eu) (Remote host closed the connection)
[17:22:37] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[17:23:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:23:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:23:31] *** Joins: wroathe (~wroathe@user/wroathe)
[17:24:12] *** Joins: hrdl (~hrdl@mail.hrdl.eu)
[17:28:06] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:28:19] *** Joins: gentauro (~gentauro@user/gentauro)
[17:29:46] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[17:31:03] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 268 seconds)
[17:31:04] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:31:31] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[17:31:49] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[17:33:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:39:04] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 268 seconds)
[17:40:03] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:40:34] *** Quits: cosimone (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 260 seconds)
[17:42:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[17:42:26] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[17:45:02] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[17:47:06] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[17:47:06] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[17:48:03] <dsamperi> Seems hackage is not curated, and does not provide incentive to document and provide examples. There are notable exceptions like Pipes.
[17:49:12] <geekosaur> youhave to define the scope of "curated" there. for example, stackage is curated but not in that sense
[17:52:53] *** Joins: gentauro (~gentauro@user/gentauro)
[17:58:01] <shapr> do cabal files have an example stanza or something?
[17:58:05] <shapr> I was wondering about that yesterday.
[17:58:12] <Hecate> no, it's in the README or description
[17:58:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:58:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:58:24] *** Joins: wroathe (~wroathe@user/wroathe)
[17:58:26] <shapr> Work codebase has lots of examples, and I was wondering if I could reduce compile time by not building them.
[17:58:57] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:58:57] <geekosaur> you can set them to be not buildable without an examples flag
[18:01:27] <geekosaur> and with includable sections (which will require you to set a minimum Cabal version on the cabal file) you could define that one and include it into all the examples
[18:01:36] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:01:47] <dsamperi> I guess Haskell is more like C++ than R, being naturally a compiled language, where its takes more work to provide working examples. WIth R one can often run working examples with example(funcname).
[18:02:55] <maerwald> I don't understand your remarks. Are you saying documentation in Haskell is generally not very good?
[18:02:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[18:03:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:04:01] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[18:04:16] *** Joins: gentauro (~gentauro@user/gentauro)
[18:06:34] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[18:06:49] <merijn> I mean, overall the average documentation on hackage seems about 50x as any of the python packages I ever have to work with
[18:06:49] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 268 seconds)
[18:07:26] <merijn> shapr: You can mark the example components as not built by default
[18:08:13] <merijn> Or make them tests, which is what I did :p
[18:14:33] *** Joins: cigsender (~cigsender@74.124.58.162)
[18:15:11] <timCF> Let's say I do have `Foo.Orphan` module with orphan instances of some class, which is used internally inside `Foo` package and is not in exposed-modules. But when there is `Bar.Orphan` file in some other package which depends on 
[18:15:29] <timCF> `Foo` - orphan instances are stil in scope
[18:15:50] *** Quits: Core5109 (~Core5109@47.245.54.240) (Quit: CoreIRC for Android - www.coreirc.com)
[18:15:54] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[18:16:23] <timCF> `Bar.Orphan` instances do overlap somehow `Foo.Orphan` even if `Foo.Orphan` is not exposed/exported/imported
[18:16:23] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[18:16:24] <geekosaur> orphan instances cannot be imported or exported, they are global
[18:16:42] *** Joins: gentauro (~gentauro@user/gentauro)
[18:16:44] <geekosaur> there is no other way to handle them
[18:16:54] <timCF> geekosaur: omg, that's not good
[18:17:11] <geekosaur> separate compilation means only the linker knows the full story about instances
[18:17:26] <geekosaur> and the linker is designed for C/C++, not Haskell
[18:17:28] <timCF> at least in my case :)
[18:17:42] *** Joins: tfeb (~tfb@88.98.95.237)
[18:19:26] <timCF> geekosaur: thanks!
[18:19:47] <merijn> timCF: All instances are always global. The only thing that changes is "at what point (if any) does the compiler realise they exist.
[18:21:21] <lortabac> if you want to hide an instance the only way is to avoid importing that module anywhere in the program
[18:21:21] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[18:21:30] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Read error: Connection reset by peer)
[18:21:38] <lortabac> but you can't pick different instances in different modules
[18:21:55] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[18:22:13] <dsamperi> Haskell documentation varies a lot, from little more than a bunch of function signatures (with pointers to research papers), to detailed explanations with illustrations (Pipes).
[18:22:25] <geekosaur> well, you can use the OVERLASPPING pragma or even IncoherentInstances, but in that case you're at the mercy of the compiler
[18:22:33] <geekosaur> *OVERLAPPING
[18:22:46] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[18:23:22] <timCF> For some reason I was always sure what it's the point of orphan instances - being local, but not the case really
[18:23:44] <geekosaur> dsamperi, you haven't even seen the worst of it. Henning Thielemann generally writes good documentation, except all his types are named T and are intended to be used fully qualified
[18:24:02] *** Quits: mmhat (~mmh@55d4baf7.access.ecotel.net) (Quit: WeeChat 3.3)
[18:24:08] <geekosaur> timcf, this is a large part of why orphan instances are a bad idea
[18:24:38] <geekosaur> dsamperi, which makes his documentation well-nigh unreadable
[18:25:00] <timCF> geekosaur: overlapping pragma says what it will be *some* instance, but not necessarily any particular
[18:25:03] <timCF> ?
[18:25:32] <geekosaur> yes. the compiler does try to follow some saneish rules, but at some point it'll throw up its hands and give up
[18:25:51] <geekosaur> (basically using the first instance it happens to know about at that point, which may not be the one you intended)
[18:27:00] *** Joins: gentauro (~gentauro@user/gentauro)
[18:27:41] <geekosaur> because, again, only the linker knows the full story and the linker has no clue about Haskell instances
[18:28:00] <geekosaur> it knows there are symbols that start with `$d`, but not what they mean
[18:28:15] <geekosaur> (instance dictionaries)
[18:28:45] <merijn> timCF: Overlapping instances just says "what rules do you follow if you find multiple conflicting instances"
[18:29:05] <merijn> timCF: If you mix overlapping and orphans, prepare for some of the worst nightmare debugging you will ever see
[18:29:13] <merijn> Of course, not right away. That would be easy
[18:29:24] <maerwald> lolo
[18:29:45] <merijn> No, at some indeterminate point in the future when stars align and with some specific mix of dependencies *then* it will suddenly manifest
[18:30:03] <maerwald> I was never a fun of classes :D
[18:32:44] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[18:33:00] <merijn> It's like using a PRNG to generate random identifiers in a concurrent setting to ensure RPCs don't conflict. All you've done is make it less likely to happen and thus more of a nightmare to debug
[18:34:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[18:35:02] *** Joins: trcc_ (~trcc@eduroam09.au.dk)
[18:35:03] *** Joins: tfeb (~tfb@88.98.95.237)
[18:35:25] <maerwald> all code just works by chance
[18:35:29] <maerwald> what's the difference :D
[18:35:59] * geekosaur sends maerwald a cosmic ray
[18:36:58] <geekosaur> anyway if you need specific behavior you might be better off passing dictionary records around explicitly instead of relying on instances in scope to do it implicitly
[18:36:58] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[18:37:52] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[18:38:50] *** Quits: trcc (~trcc@users-5343.st.net.au.dk) (Ping timeout: 260 seconds)
[18:39:21] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[18:39:46] *** Quits: trcc_ (~trcc@eduroam09.au.dk) (Ping timeout: 260 seconds)
[18:41:52] *** Quits: Farzad (~FarzadBek@178.131.31.240) (Quit: Leaving)
[18:42:24] *** Parts: kadir (~kadir@95.7.9.203) ()
[18:42:24] *** Joins: gentauro (~gentauro@user/gentauro)
[18:43:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:43:19] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:d8ab:2e91:63f7:db6e) (Remote host closed the connection)
[18:43:38] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:d8ab:2e91:63f7:db6e)
[18:43:59] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[18:46:27] *** Joins: max22- (~maxime@2a01cb0883359800dcf2cfbbabba90b8.ipv6.abo.wanadoo.fr)
[18:46:51] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:47:33] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[18:49:20] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:49:51] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.130)
[18:49:51] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[18:49:52] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.130) (Changing host)
[18:49:52] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:50:00] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[18:50:30] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:d8ab:2e91:63f7:db6e) (Ping timeout: 260 seconds)
[18:52:22] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 260 seconds)
[18:52:49] <monochrom> All of quantum mechanics just works by chance, too. Overwhelming chance, that is.
[18:53:15] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:53:23] <monochrom> And by the way transistor-based logic gates also work by that same chance.
[18:54:30] <monochrom> If you issue so much as "xor ax,ax" you are still "not sure" that it sets ax to 0.
[18:55:04] <monochrom> And nevermind what the program counter actually points to.
[18:55:46] *** Joins: gentauro (~gentauro@user/gentauro)
[18:57:06] <janus> Is it true that because of Brownian motion, there is a small chance that my whole body will be moved to Jupiter in 42 seconds?
[18:57:11] *** Quits: arahael (~arahael@118.208.229.178) (Ping timeout: 245 seconds)
[18:57:42] <monochrom> If you s/Brownian motion/wave mechanics/ then yes.
[18:57:43] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[19:00:02] <janus> Why not true only with Brownian motion? I consist of particles suspended in gas.
[19:00:03] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[19:00:24] <dsamperi> Brownian motion may just be a way of describing lack of knowledge of predicability.
[19:00:47] *** Joins: gentauro (~gentauro@user/gentauro)
[19:00:54] <janus> Well, the same goes for Quantum mechanics, right? There are deterministic interpretations
[19:01:14] <monochrom> This should belong to -offtopic but Brownian motion's context is after your wave collapses to particles and after the light-speed limit.
[19:01:41] <dsamperi> QBism takes this point of view (Quantum Bayesianism)
[19:02:11] <monochrom> Whereas Feymann figured out that with waves, light speed is emergent, photon is just very likely to be at that speed, and you very likely to be under.
[19:02:47] *** Joins: thyriaen (~thyriaen@dynamic-078-055-251-028.78.55.pool.telefonica.de)
[19:04:12] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[19:07:00] *** Joins: NieDzejkob (~quassel@212.87.13.106)
[19:09:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:11:16] *** Joins: arahael (~arahael@124.148.78.199)
[19:14:42] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:cd36:4dbb:1af8:be8)
[19:17:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:19:06] *** Joins: favonia (~favonia@user/favonia)
[19:23:33] *** Joins: fendor_ (~fendor@178.115.63.67.wireless.dyn.drei.com)
[19:24:18] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[19:25:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:26:23] *** Quits: fendor (~fendor@178.165.199.1.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[19:28:40] *** Joins: CubOfJudahsLion (~CubOfJuda@45.63.109.242)
[19:30:25] *** Joins: gentauro (~gentauro@user/gentauro)
[19:30:48] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[19:30:58] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-b0ad-0af8-2f41-da4e.res6.spectrum.com) (Quit: Konversation terminated!)
[19:31:42] *** Quits: CubOfJudahsLion (~CubOfJuda@45.63.109.242) (Client Quit)
[19:32:08] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[19:35:00] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 268 seconds)
[19:35:23] *** Joins: jumper149 (~jumper149@80.240.31.34)
[19:36:26] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:37:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:38:52] *** Quits: thyriaen (~thyriaen@dynamic-078-055-251-028.78.55.pool.telefonica.de) (Quit: Leaving)
[19:39:23] *** Parts: ubikium (~ubikium@i223-218-66-82.s41.a013.ap.plala.or.jp) (Leaving)
[19:42:33] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[19:48:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:49:13] <dolio> There's almost certainly ways of making sense of QM that don't involve a 'chance' of your being suddenly teleported to Jupiter. :)
[19:50:21] *** Quits: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it) (Quit: turlando_)
[19:50:21] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[19:50:32] <geekosaur> transactional interpretation, yes
[19:50:54] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[19:50:54] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[19:50:54] *** Joins: turlando (~turlando@user/turlando)
[19:51:28] <geekosaur> (note however that by any interpretation the chance is very, very small)
[19:52:16] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:52:17] <janus> i am a correctness fetishist, i must obsess over even the smallest probabilities.
[19:53:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:54:06] <geekosaur> QM is not for you, then :)
[19:54:32] <geekosaur> better stay away from quantum computers
[19:55:58] *** Joins: gentauro (~gentauro@user/gentauro)
[19:56:40] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-b0ad-0af8-2f41-da4e.res6.spectrum.com)
[19:58:26] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 268 seconds)
[19:58:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:58:43] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[19:59:43] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[20:01:30] *** Quits: lortabac (~lortabac@88.125.6.227) (Quit: WeeChat 2.8)
[20:01:38] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[20:02:26] *** Quits: tv (~tv@user/tv) (Ping timeout: 260 seconds)
[20:03:22] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[20:03:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:06:27] *** Joins: pop3 (~pop3@user/pop3)
[20:07:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:07:02] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[20:07:21] *** Joins: gentauro (~gentauro@user/gentauro)
[20:07:46] <janus> but QM isn't different from classical mechanics in that regard. our weather models can't rule out freak events either.
[20:08:06] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[20:08:14] *** Joins: boxscape_ (~boxscape_@i59F67A7D.versanet.de)
[20:09:32] <janus> the culture around QM may have a larger focus on calculating the exact probabilities, so in that regard it may be more rigorous than weather forecasting
[20:10:03] <geekosaur> meh. we know exactly what's wrong with the weather models. we just can't fix it sanely
[20:10:06] *** Joins: pop3 (~pop3@user/pop3)
[20:10:23] <geekosaur> (you need perfect and exact topographical information, for one)
[20:10:48] <dolio> Right, it's just impossible to measure precisely enough.
[20:11:16] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:12:18] *** Joins: jespada (~jespada@190.7.36.46)
[20:15:48] *** Joins: tv (~tv@user/tv)
[20:17:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:21:15] *** Quits: tv (~tv@user/tv) (Ping timeout: 268 seconds)
[20:21:39] *** Joins: tv (~tv@user/tv)
[20:25:16] *** Quits: zincy (~tom@2a00:23c8:970c:4801:b46f:f559:1389:e031) (Read error: Connection reset by peer)
[20:26:24] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[20:27:36] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[20:27:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:28:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:29:53] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:30:30] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 268 seconds)
[20:30:53] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:31:36] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[20:33:29] <monochrom> "What have I done?" :)
[20:34:45] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[20:35:14] *** Joins: morphism (~ret@static.247.176.55.162.clients.your-server.de)
[20:35:25] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[20:36:41] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[20:37:26] <maerwald> weather forecasting is only important if you actually leave the house
[20:38:44] *** Quits: mbuf (~Shakthi@122.173.251.242) (Quit: Leaving)
[20:39:05] *** Joins: zincy (~tom@2a00:23c8:970c:4801:b46f:f559:1389:e031)
[20:39:29] <monochrom> ObHaskell: Analogically, IO is only important if you leave purity >:)  https://ro-che.info/ccc/9
[20:40:39] *** Quits: zincy (~tom@2a00:23c8:970c:4801:b46f:f559:1389:e031) (Read error: Connection reset by peer)
[20:42:09] *** Quits: tv (~tv@user/tv) (Read error: Connection reset by peer)
[20:43:35] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:45:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:45:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:41b5:a1c:d64e:bf9)
[20:50:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:50:50] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[20:51:29] *** Quits: boxscape_ (~boxscape_@i59F67A7D.versanet.de) (Ping timeout: 268 seconds)
[20:52:22] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Read error: Connection reset by peer)
[20:53:53] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[20:55:25] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Read error: Connection reset by peer)
[20:58:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[20:58:31] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[20:59:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:59:30] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Ping timeout: 268 seconds)
[21:00:24] *** Joins: tv (~tv@user/tv)
[21:00:51] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[21:01:53] *** Joins: azeem (~azeem@2a00:801:3cb:bcc0:53ee:32be:de18:8352)
[21:02:21] *** Joins: drdo (~drdo@roach0.drdo.eu)
[21:02:24] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Read error: Connection reset by peer)
[21:03:24] *** Joins: cfricke (~cfricke@user/cfricke)
[21:05:06] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:06:01] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[21:06:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[21:06:44] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:06:54] *** Quits: xff0x (~xff0x@2001:1a81:53fb:b000:1550:cc88:ac55:5459) (Ping timeout: 268 seconds)
[21:07:20] *** Joins: xff0x (~xff0x@port-92-193-245-245.dynamic.as20676.net)
[21:08:45] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[21:09:58] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:09:59] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[21:11:26] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[21:12:04] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[21:12:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[21:13:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:16:05] *** Joins: Topsi (~Tobias@dyndsl-095-033-088-198.ewe-ip-backbone.de)
[21:17:04] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:18:15] *** Joins: kadir (~kadir@95.7.9.203)
[21:18:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:19:48] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[21:20:27] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[21:21:00] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[21:21:20] *** Quits: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Read error: Connection reset by peer)
[21:21:55] *** Parts: kadir (~kadir@95.7.9.203) ()
[21:23:28] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[21:24:03] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:25:33] *** Joins: aegon (~mike@174.127.249.180)
[21:26:56] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[21:28:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:29:06] *** Joins: desantra (~skykanin@user/skykanin)
[21:29:36] *** Joins: zaquest (~notzaques@5.128.210.178)
[21:29:41] *** Joins: mmhat (~mmh@55d4baf7.access.ecotel.net)
[21:30:24] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:30:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:30:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:31:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:31:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:31:18] *** Joins: wroathe (~wroathe@user/wroathe)
[21:31:45] *** Quits: desantra (~skykanin@user/skykanin) (Client Quit)
[21:32:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:41b5:a1c:d64e:bf9) (Ping timeout: 264 seconds)
[21:33:11] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.130)
[21:33:12] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.130) (Changing host)
[21:33:12] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:36:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[21:37:01] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[21:37:06] *** Quits: yrlnry (~mjd@pool-100-11-2-80.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[21:37:07] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[21:38:34] *** Quits: Jing (~textual@2604:a840:3::1021) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:39:03] *** Joins: wonko (~wjc@user/wonko)
[21:39:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:39:59] *** Joins: vicfred (~vicfred@user/vicfred)
[21:40:01] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:41:25] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 268 seconds)
[21:44:01] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-b0ad-0af8-2f41-da4e.res6.spectrum.com) (Quit: Konversation terminated!)
[21:45:08] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[21:46:22] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[21:46:47] *** Joins: kadir (~kadir@95.7.9.203)
[21:49:18] *** Joins: mei (~mei@user/mei)
[21:52:12] *** Parts: kadir (~kadir@95.7.9.203) (WeeChat 3.3)
[21:52:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:53:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:56:06] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[21:56:45] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:56:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:58:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[21:59:06] *** Quits: tv (~tv@user/tv) (Ping timeout: 260 seconds)
[22:00:37] *** Quits: canta (~canta@user/canta) (Quit: WeeChat 2.8)
[22:00:47] *** Joins: desantra (~skykanin@user/skykanin)
[22:00:49] *** Joins: canta (~canta@user/canta)
[22:01:30] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:01:39] <tomjaguarpaw> Does Haddock always show a class's members even if they're not exported?  I want to export the class but not the members and I'd rather Haddock didn't show them ...
[22:02:10] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:02:16] *** Joins: ubert (~Thunderbi@p200300ecdf4fca4ae019fddc82d0353e.dip0.t-ipconnect.de)
[22:03:16] <dsal> tomjaguarpaw: I don't think so, but can't you just try to see if it does what you expct?
[22:03:19] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-ad06-78d6-67f9-46d9.res6.spectrum.com)
[22:03:28] <tomjaguarpaw> Well yeah, I tried it and it doesn't do what I want
[22:03:36] *** Joins: hololeap (~hololeap@user/hololeap)
[22:03:44] <tomjaguarpaw> It's the autogenerated "minimal complete definition" section that shows them
[22:03:52] <tomjaguarpaw> I wonder if I can tell Haddock to suppress that
[22:04:59] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[22:05:18] <tomjaguarpaw> Seems to be this issue https://github.com/haskell/haddock/issues/330
[22:05:22] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-ad06-78d6-67f9-46d9.res6.spectrum.com) (Client Quit)
[22:05:49] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-ad06-78d6-67f9-46d9.res6.spectrum.com)
[22:06:26] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[22:07:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:07:26] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 260 seconds)
[22:12:13] *** Joins: tv (~tv@user/tv)
[22:15:26] <dsal> Yeah, I don't like these things that look like bugs, but you can see both arguments.  I had a few of those with HPC yesterday.
[22:16:10] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[22:16:18] *** Quits: jumper149 (~jumper149@80.240.31.34) (Ping timeout: 260 seconds)
[22:16:35] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[22:17:25] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[22:17:29] *** Joins: jumper149 (~jumper149@80.240.31.34)
[22:18:27] *** Joins: boxscape_ (~boxscape_@i59F67A7D.versanet.de)
[22:20:12] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[22:22:23] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[22:24:35] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[22:24:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:27:37] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[22:29:10] *** Joins: ub (~Thunderbi@p548c9652.dip0.t-ipconnect.de)
[22:30:03] *** Quits: ubert (~Thunderbi@p200300ecdf4fca4ae019fddc82d0353e.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:30:03] *** ub is now known as ubert
[22:31:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:34:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:35:06] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[22:35:22] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[22:36:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[22:38:10] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:38:58] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c)
[22:39:24] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b) (Ping timeout: 268 seconds)
[22:40:52] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:41:28] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[22:43:25] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c) (Remote host closed the connection)
[22:43:31] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:44:51] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[22:46:48] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[22:47:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:48:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:52:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:54:41] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c)
[22:56:39] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[22:57:48] *** Quits: Topsi (~Tobias@dyndsl-095-033-088-198.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[22:59:15] *** Joins: pgib (~textual@99-148-134-85.lightspeed.knvltn.sbcglobal.net)
[22:59:38] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[23:02:11] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c) (Remote host closed the connection)
[23:02:43] *** Joins: pavonia (~user@user/siracusa)
[23:02:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:03:42] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[23:04:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b)
[23:09:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b) (Ping timeout: 268 seconds)
[23:12:12] *** Quits: favonia (~favonia@user/favonia) (Remote host closed the connection)
[23:13:23] *** justache is now known as justUnited
[23:15:04] *** Joins: favonia (~favonia@user/favonia)
[23:18:26] *** Joins: Pickchea (~private@user/pickchea)
[23:19:33] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[23:20:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[23:20:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[23:25:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[23:28:38] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[23:29:36] *** Joins: econo (uid147250@user/econo)
[23:30:44] <AWizzArd> When reading about linear types I saw the Socket example, where they had `data State = Unbound | Bound | Listening | â€¦` and then  `data Socket (s :: State)`.
[23:30:51] <AWizzArd> Now we can have types such as `Socket Unbound` or `Socket Listening` etc.
[23:30:58] <AWizzArd> I wonder how we could find an equivalent in Java. Would Socket be a base class and BoundSocket and ClosedSocket be sub classes? Then a close method would be in the base class, while in Haskell   close :: âˆ€s. Socket s â†’ IOL Ï‰ ()
[23:31:39] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[23:32:47] <dminuoso> Having read some opinions, I really wish linear types wouldt have gotten into GHC
[23:33:39] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[23:34:08] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c)
[23:34:18] <AWizzArd> dminuoso: Why? They seem to be very useful for resource management.
[23:34:43] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:34:54] <AWizzArd> Saving tons of unit tests that are so big that they themselve need their own tests.
[23:35:38] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 260 seconds)
[23:35:53] <dminuoso> It will promote more fragmentation in libraries, where you will have linear versions, non-linear versions
[23:36:28] <jumper149> Isn't linear stuff "downwards-"compatible?
[23:36:28] <dminuoso> And if non-linear versions die out due to lack of maintenance, you're suddenly forced to turn on big hammer extensions just to use said library..
[23:37:06] *** Joins: juhp (~juhp@128.106.188.220)
[23:37:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:37:47] <cigsender> AWizzArd: your example as shown doesn't have much to do with linear types, though, just DataKinds
[23:38:18] <jumper149> (aside from linear functions in contravariant position)
[23:38:20] <dminuoso> AWizzArd: Also, I think its not that silver bullet some people make it out to be.
[23:38:50] <dminuoso> AWizzArd: For a large portion of problems it will not catch realistic bugs, while adding huge complexity and complicate diagnostics a lot.
[23:39:07] <dminuoso> It's sort of why "encode invariant XYZ it into the type system" doesn't tend to go well.
[23:39:28] <dminuoso> It looks like a cool idea initially, but very rapidly you will drastically increase complexity and reduce the people able or willing to even touch/contribute to your code.
[23:39:54] <dminuoso> And even decrease likelihood of people using your api, if haddock gives complicated type signatures
[23:40:37] <cigsender> dminuoso: better error messages from GHC will help with this
[23:41:04] *** Joins: drownbes89 (~drownbes@79-206-50-195.sta.estpak.ee)
[23:41:22] <sm> if it's a big enough problem and the community is clear enough, they can always be removed
[23:41:56] <dminuoso> cigsender: These error messages will require linear type competency still to understand.
[23:42:14] *** Quits: drownbes89 (~drownbes@79-206-50-195.sta.estpak.ee) (Client Quit)
[23:42:18] <dminuoso> sm: When has a GHC extension ever been removed for any reason other than being subsumed or completely buggy?
[23:42:45] <cigsender> dminuoso: DataKinds without linear types still allows you to encode type-level invariants, though
[23:43:09] <dminuoso> And what AWizzArd said is not really true.
[23:43:30] <dminuoso> cigsender: Yes, and it's awfully terrible.
[23:43:40] <sm> I'm just saying it actually is possible
[23:43:43] <dminuoso> Type signatures become completely unreadable for anyone who is not the author
[23:44:05] <dminuoso> Errors become unreadable for anyone who is not intimiately familiar with the implementation and with how GHC type inference works
[23:44:27] <dminuoso> And your linearly generalized code will have type signatures that newcomers will not be able to understand
[23:44:30] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[23:44:45] <dminuoso> linear types is a type of extension that will have a *very* noticeable impact on APIs.
[23:48:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:48:07] <maerwald> dminuoso: the authors of the proposal said it's an experiment and the community will decide if it's successful, which I find confusing. It's a one-way street. You'll never be able to remove it
[23:49:29] <maerwald> oh wait, I haven't read the backlog carefully
[23:49:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:49:38] <dminuoso> maerwald: Well, of course the community decides whether an extension is successful. Success is merely a measurement of how many people will use it.
[23:50:19] <maerwald> this was rather about DT, but the same principle applies to linear types
[23:50:43] <maerwald> at least it will allow some things in streaming libraries that's not possible right now I think
[23:50:49] <maerwald> whether that's a net gain, I don't know
[23:50:57] <dminuoso> Liquid Haskell is one of those things that is very amazing because it's so non-intrusive. Dont care about it? Well, it all exists just in comments!
[23:51:05] <dminuoso> You want it? Add your LH assertions all day long.
[23:51:16] <dminuoso> It doesn't impact me as a user in the slightest.
[23:51:54] <maerwald> opt-in is always great... if it works well
[23:52:10] <dminuoso> maerwald: Yeah. I think to some degree we're the victim of a language that has a long history of being a testbed of experimentation, despite Haskell having succeeded in becoming a language widely used in production.
[23:52:29] <awpr> if the API that's using linear types is a pure linear interface to mutable arrays, making it opt-in is just throwing away memory safety
[23:52:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[23:52:53] *** Quits: jocke-l (jocke-l@a.x0.is) (Quit: WeeChat 2.3)
[23:52:56] <awpr> my view on the point of adding linear types is to make it possible to write safe APIs that would otherwise have been unacceptably unsafe
[23:52:57] <dminuoso> awpr: It's not just throwing away memory safety, it adds usability and decreases complicated diagnostics.
[23:53:06] *** Joins: jocke-l (jocke-l@a.x0.is)
[23:53:30] <dminuoso> Depending on the exact ergonomics in your library, linear types can easily make writing trivial and morally correct code impossible in the presence of exceptions
[23:53:40] <maerwald> the alternative is to create a new language that's inter-operable with haskell
[23:53:42] <awpr> diagnostics and ease of use are nice, but if you have to delete referential transparency to get them, it's not worth it
[23:54:12] <awpr> if opt-in were a viable option, we'd already have pure interfaces to mutable arrays today
[23:54:31] <dminuoso> Well we do with ST?
[23:54:47] <awpr> that's a monadic, imperative interface
[23:54:55] <dminuoso> Ah I see what you mean
[23:55:06] <boxscape_> hm it doesn't seem impossible to make linear types opt-in - I think you'd just need a flag that unsafely coerces multiplicities when they don't match'/
[23:55:13] <boxscape_> s/'\//?
[23:55:38] <awpr> yeah, it's surely possible to implement (in fact I'd guess `-fdefer-type-errors` would do it already)
[23:55:52] <dminuoso> -fdefer-type-errors is quite the hammer to sling
[23:55:59] <dminuoso> It's the nuclear option.
[23:56:11] <awpr> I would also guess it'd be feasible to add `-fdefer-multiplicity-errors`
[23:56:32] <dminuoso> What about type signatures in haddock on hackage then?
[23:56:47] <dminuoso> Can we add a non-linear mode to simply hide the linear type stuff?
[23:56:54] <boxscape_> -fdefer-type-errors doesn't do it in ghc at least, but you can unsafeCoerce an argument to a function without problem, so it seems possible in principle
[23:57:17] <boxscape_> dminuoso this applies to some other features as well - it'd be nice if maybe there were two versions of haddock html, a simplified view that hides advanced features, and the complete view
[23:57:21] <awpr> I don't have a good answer for that.  multiplicity-polymorphic signatures would be a bit of a burden to newcomers indeed
[23:57:24] <dminuoso> Like, I dont mind linear types at all if it's not just opt-in, but the gory details hidden away for me if I dont care for them
[23:57:55] <AWizzArd> cigsender: yes, I just stumbled upon this while reading about LT and wondered what a good mapping to Java would be.
[23:58:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[23:58:25] <dminuoso> boxscape_: Im not sure what other things this could apply on.
[23:58:37] <awpr> this is like a turbocharged version of the debate on generalizing stuff in Prelude to Foldable, for one
[23:58:57] <boxscape_> runtime reps is the first thing that comes to my mind but I think I thought about this relating to something else in the past as well
[23:59:37] <dminuoso> awpr: Well sure, I mean I guess library vendors could expose a linear generalized API in one module, and a monomorphized version in another. But the reality is that this requires discipline from package authors.
[23:59:47] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 264 seconds)
[23:59:53] <dminuoso> boxscape_: You mean levity polymorphism?
