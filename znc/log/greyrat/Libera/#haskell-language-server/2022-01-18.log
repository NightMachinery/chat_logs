[00:08:50] <michaelpj[m]> jneira: I was thinking to release https://github.com/haskell/lsp/pull/388 in a minor version. *technically* it changes the behaviour of that type function, but it was 100% wrong before so I'm pretty sure nobody was using it. Technical PVP break, but ðŸ¤·
[00:17:21] <jneira[m]> yeah, i think it would be fine
[00:23:20] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[02:13:28] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[03:42:43] <isovector1> Ok i got my 9.0 tests passing
[03:42:51] <isovector1> but now they fail on 9.2. can i just disable them there?
[03:48:22] <hololeap> is hls and all its plugins working on ghc-9.0 at this point, or will I need to wait for another version bump?
[03:52:26] <isovector1> hololeap: wingman isn't working yet, but im actively working on it!
[03:52:56] <hololeap> ok, no worries. just thought I'd check given the discussion
[03:53:24] <isovector1> besides that i think maybe everything else works
[03:53:41] <isovector1> oh also brittany and stylishhaskell dont
[04:04:55] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[04:06:10] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Ping timeout: 268 seconds)
[04:06:46] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Ping timeout: 268 seconds)
[04:06:57] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[04:16:10] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[04:16:12] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[04:24:43] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[05:08:02] *** Quits: isovector1 (~isovector@172.103.216.166) (Ping timeout: 240 seconds)
[05:10:24] *** Joins: isovector1 (~isovector@172.103.216.166.cable.tpia.cipherkey.com)
[06:39:54] *** Joins: isovector1_ (~isovector@172.103.216.166.cable.tpia.cipherkey.com)
[06:44:38] *** Quits: isovector1 (~isovector@172.103.216.166.cable.tpia.cipherkey.com) (Ping timeout: 268 seconds)
[07:09:59] *** Quits: isovector1_ (~isovector@172.103.216.166.cable.tpia.cipherkey.com) (Ping timeout: 256 seconds)
[09:56:23] <jneira[m]> <isovector1> "but now they fail on 9.2. can..." <- sure, putting a `if: matrix.test && matrix.ghc != '9.2.1'` here: https://github.com/haskell/haskell-language-server/blob/5714207bfe44b13b02726334f9caf883249e68a9/.github/workflows/test.yml#L197
[09:57:00] <jneira[m]> <isovector1> "oh also brittany and stylishhask..." <- brittany also works and next hls version will have it included for 9.0.1
[09:57:55] <jneira[m]> jneira[m]: well the line would be `if: matrix.test && matrix.ghc != '9.2.1' && !(matrix.os == 'ubuntu-latest' && matrix.ghc == '8.6.5')` as tests dont pass for 8.6.5 neither
[09:58:15] <jneira[m]> (or maybe it will do?)
[10:24:21] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[10:25:46] *** Joins: hololeap (~hololeap@user/hololeap)
[10:45:07] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:28:14] *** Joins: isovector1_ (~isovector@172.103.216.166)
[13:58:44] *** Quits: isovector1_ (~isovector@172.103.216.166) (Quit: Leaving)
[14:00:25] <fendor[m]> A question regarding reading timing information, when I see multiple lines of (C:getHieAst: <filename> (took 18s)), did each of the individual actions take up 18s? In particular, I see such a line roughly 6 times for the same file, should this happen?
[14:01:13] <fendor[m]> some take 2s, but 4 of these log lines report a run-time of 19s.
[15:01:03] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[15:27:16] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:03:39] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[19:07:35] *** Joins: shapr (~user@98-159-193-131.scottsboro.org)
[19:10:54] <shapr> I'm starting to make changes to a project that has a bunch of packages in subdirectories
[19:11:08] <shapr> specifically https://github.com/morpheusgraphql/morpheus-graphql
[19:11:23] <shapr> To increase the excitement level, I'm also using NixOS and emacs
[19:12:02] <shapr> In emacs I usually add a git repo as its own "project"
[19:12:52] <shapr> I did that for morpheus, but now haskell-language-server wants me to rename my modules to things like morpheus-graphql-core.src.Data.Morpheus.Types.Internal.Validation.Validator
[19:13:24] <michaelpj[m]> shapr: sounds like a bug in the module-name plugin
[19:13:26] <shapr> Is haskell-language-server smart enough to pick up a cabal.project file in the root directory that lists packages in subdirectories?
[19:13:28] <michaelpj[m]> you have a `cabal.project`?
[19:13:31] <shapr> I do not!
[19:13:34] <michaelpj[m]> yes, absoultely
[19:13:45] <shapr> I converted this from a stack project via hpack
[19:13:46] <michaelpj[m]> IDK what happens if you have multiple bare cabal packages
[19:13:55] <michaelpj[m]> we tend to assume the existence of `cabal.project`
[19:13:59] <michaelpj[m]> is there a `stack.yaml`?
[19:14:00] <shapr> oh good, that's helpful
[19:14:02] <shapr> there is!
[19:14:10] <shapr> but hpack doesn't convert that into a cabal.project
[19:14:11] <michaelpj[m]> then I expect it's using the stack cradle
[19:14:14] <michaelpj[m]> so things should work TM
[19:14:19] <michaelpj[m]> HLS works with stack
[19:14:26] <michaelpj[m]> does all the other stuff work?
[19:14:38] <michaelpj[m]> if so it's probably just a straight up bug
[19:14:39] <shapr> well, I decided to convert to cabal and not stack
[19:14:54] <shapr> so I probably just need to create a cabal.project that matches the stack.yaml
[19:15:05] <michaelpj[m]> HLS will probably see that you have a `stack.yaml` and not a `cabal.project` and decide you want it to use stack, FYI
[19:15:11] <shapr> michaelpj[m]: or straight up user error aka, user is making difficult choices
[19:15:13] <shapr> ohhh
[19:15:15] <shapr> well then
[19:15:48] <michaelpj[m]> but none of that should really matter
[19:16:02] <michaelpj[m]> if it's set up and you're getting completions, hovers etc then it's probably working fine with stack
[19:16:12] <michaelpj[m]> the module name thing still sounds like a bug
[19:16:55] <shapr> I used hpack to generate cabal files and then re-ran gen-hie
[19:17:02] <shapr> so I'm trying to force usage of cabal instead of stack
[19:17:06] <shapr> and that's likely the issue
[19:17:55] <shapr> michaelpj[m]: slightly related question, are there small group video calls where haskell.nix users give a tour and answer questions?
[19:18:00] <michaelpj[m]> conveivably
[19:18:17] <michaelpj[m]> try adding a cabal.project, if that fixes it, that'll be interesting (and maybe still worth reporting)
[19:18:24] <michaelpj[m]> shapr: um, no?
[19:18:31] <michaelpj[m]> is that a thing you would like?
[19:18:34] <shapr> yes please
[19:18:48] <michaelpj[m]> like, you want to talk to other users of haskell.nix or to those of us sinners who can be considered "maintainers"?
[19:18:50] <shapr> I don't have enough context to know why I might benefit from haskell.nix over stock nix
[19:19:16] <michaelpj[m]> I mean, it's an OSS project, we don't really do... marketing
[19:19:22] <shapr> uh, probably both or either?
[19:19:41] <shapr> hm, I probably do count as marketing for the projects that I use
[19:20:00] <shapr> anyway, others have asked me why I might use haskell.nix over stock nix and I don't know the answer
[19:20:03] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[19:20:23] <michaelpj[m]> fair enough
[19:20:41] <michaelpj[m]> tbh, sometimes it feels like it barely holds up under the users it already has D:
[19:21:06] <michaelpj[m]> I'm not sure anyone is really trying to get more people to use it
[19:21:23] <michaelpj[m]> (like, I think it's a good project, I just don't think it's anyone's priority)
[19:22:19] <shapr> SimSpace uses haskell.nix and I know a few others, but I don't know the costs and benefits
[19:23:42] <michaelpj[m]> fair
[19:24:06] <michaelpj[m]> I guess in summary: I can see what you're asking for (although I'd probably just prefer some clearer documentation), but I don't think anyone's going to do it any time soon
[19:24:15] <shapr> ah, too bad
[19:24:32] <shapr> friend of mine gave me an hour long intro to nix+flakes and now I'm a convert
[19:26:12] <michaelpj[m]> ah, you see, most people using haskell.nix are using it at $WORK, hence the lack of evangelical enthusiasm ;)
[19:26:23] <michaelpj[m]> it's only fun if you do it in your spare time ;)
[19:27:21] <shapr> that's a really good point
[19:27:25] <shapr> a very true statement
[19:30:43] <shapr> how about poignant
[19:30:55] <shapr> since truth does not have degrees, no matter what politicians desire
[19:36:45] <shapr> seems that a cabal.project does not magically convince hls to find the subprojects, but maybe deleting the stack.yaml ?
[19:36:58] <shapr> no, I don't think that does it either
[19:37:46] <fendor[m]> shapr: a cabal.project should make it magically discover the rest
[19:38:06] * shapr reads the hls cabal.project
[19:38:12] <fendor[m]> if both stack.yaml and cabal.project exist, the next check is going to be for which one we can find compilation artefacts
[19:38:17] <michaelpj[m]> shapr: when you say "find the subprojects"... does HLS functionality generally work, or not?
[19:38:18] <fendor[m]> such as .stack-work or dist-newstyle
[19:38:24] <michaelpj[m]> or is it just the module-name thing that's wrong?
[19:38:39] <fendor[m]> module-name thing should only be wrong with stack, imo
[19:38:49] <shapr> michaelpj[m]: hls has started, but says Aeson is not found.
[19:39:00] <shapr> cabal can build the project, so hls is confused
[19:39:03] <fendor[m]> actually, I might be confusing something. No idea about module-name plugin
[19:39:40] <fendor[m]> maybe implicit-hie is messing up again? Can you write a hie.yaml with `cradle: { cabal: }`?
[19:39:59] <shapr> I'll check the hie.yaml files
[19:40:15] <shapr> I explicitly generated them after running hpack, so this could be user error; trying to stretch hls past its limits
[19:40:40] <fendor[m]> do you have one hie.yaml per sub-project?
[19:40:53] <shapr> yes I do
[19:40:59] <shapr> is that the problem?
[19:42:12] <shapr> I'll try generating one hie.yaml at the top level now that I've written a minimal cabal.project
[19:43:09] <shapr> I'll be back tomorrow with more questions
[19:43:20] <fendor[m]> I am not sure actually
[19:43:34] <fendor[m]> Looking at the session loading code, it might work out
[19:43:53] <fendor[m]> however, usually a single hie.yaml is enough for a pure cabal project
[19:44:18] <fendor[m]> and you often rather want the simple one instead of the generated one
[19:47:32] *** Quits: shapr (~user@98-159-193-131.scottsboro.org) (Ping timeout: 240 seconds)
[19:50:37] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 240 seconds)
[19:55:10] <supersven> Is there something like a list of supported LSP commands? I'd like to compare it with the current Haskell LSP bindings of SpaceVim and add missing ones (in case).
[19:59:29] <supersven> A good code pointer would be sufficient. But, unfortunately I don't have enough time to really dig into HLS code...
[20:01:52] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[20:04:32] <michaelpj[m]> supersven: when you say "commands", do you mean "the LSP methods we support" or "code actions"?
[20:09:02] <supersven> michaelpj[m] :  I think the former - E.g. Hover, Go To Declaration, Rename ...
[20:10:30] <michaelpj[m]> supersven: then the answer is no, but coincidentally someone was asking for the same thing yesterday, so I'm wondering about writing one...
[20:16:06] <supersven> michaelpj[m]: IMHO that would be very useful.
[20:21:10] <supersven> My story: I'm using VSCode for most of of Haskell dev work. But, I'm considering to switch to SpaceVim. Trying it out I realized that some LSP methods aren't bound. Binding them would be easy, but figuring out what would be available doesn't seem to be very straight forward...
[20:21:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:22:30] <supersven> I guess other people may easily run into the same issue with their editor configuration distribution of choice... ;)
[20:26:04] <michaelpj[m]> supersven: the thing is, usually there's generic functionality for binding all the LSP stuff, so I find it strange that you say that some of them aren't bound...
[20:26:17] <michaelpj[m]> I'd expect the generic-LSP-support-for-spacevim to do that
[20:38:49] *** Joins: fendor (~fendor@178.115.55.2.wireless.dyn.drei.com)
[20:53:48] <supersven> michaelpj[m] : That would be a reasonable and clean solution. But, AFAIK SpaceVim needs some glue code to map shortcuts to LSP related functions.
[20:54:35] <michaelpj[m]> So what, ever user of any language server just has to write those themselves?
[21:01:13] <supersven> There's one file with such mappings for each language...
[21:02:46] *** Joins: qeqeqw1 (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[21:03:42] <michaelpj[m]> Oh dear
[21:03:47] <supersven> E.g. this is the file for C code https://github.com/SpaceVim/SpaceVim/blob/master/autoload/SpaceVim/layers/lang/c.vim#L294 and this is the Haskell one: https://github.com/SpaceVim/SpaceVim/blob/master/autoload/SpaceVim/layers/lang/haskell.vim#L75
[21:06:42] <michaelpj[m]> Emacs and vscode and friends seem to just go with "there's one keybinding, and if the server doesn't support that thing you get a message"
[21:31:38] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:46:15] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:35:25] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:37:17] *** Joins: juhp (~juhp@128.106.188.82)
