[00:01:31] *** Joins: v88m (~Xiro@109-252-61-156.nat.spd-mgts.ru)
[00:03:02] *** Joins: derelict (~derelict@user/derelict)
[00:09:40] *** Quits: andreyorst[erc] (~andreyors@2.92.124.61) (Ping timeout: 240 seconds)
[00:09:48] <pjb> akater[m]: no, it expands to ,getter!
[00:09:50] <pjb> That's the point.
[00:13:16] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:14:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[00:14:33] *** Lord_of_Life_ is now known as Lord_of_Life
[00:14:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:14:54] <pjb> akater[m]: there are several cases: if the place is a macro, then it's expanded, and we process it again. If it's a function call with a (setf foo) function, then it expands to (funcall (fdefinition '(setf foo)) new-value elementary-place).  If it's a form that as a setf-expander (defsetf or define-setf-expander), then the setf-expander macro is called to get the setter and this is used the elementary-place being one of the store-var,
[00:14:54] <pjb> etc.  And finally if it's a special case, or implementation defined, then the special case is handled (eg. (setf (car k) a) --> (progn (rplaca k a) a) etc).
[00:15:43] <pjb> So (setf foo) is just one case amongst several, (and the generic function even more special a case).
[00:21:16] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[00:22:18] <akater[m]> pjb: I mean, I don't see how you can define an `(setf accessor1)` method that ensures the `(accessor2 c)` place in `(setf (accessor1 a b (accessor2 c)) new)` gets setf'd whenever `(setf accessor1)` gets called.
[00:32:20] <Bike> you would have to use setf expanders instead of functions, i guess
[00:32:46] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Ping timeout: 252 seconds)
[00:37:24] <pjb> akater[m]: indeed.  Since it's not mutated> (accessor2 c) is only read and is only auxiliary to find the place defined by accessor1 and the passed values.
[00:38:22] <pjb> Bike: well, not even, because the setf-expander for accessor1 doesn't receive (accessor2 c). It receives a temporary variables where its value is stored.
[00:54:14] *** Quits: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu) (Quit: Leaving)
[00:54:39] *** Joins: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu)
[01:07:17] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[01:10:14] <akater[m]> Bike: Yes but the initial motivation was to make generic setfs always apply.  If setf only operated via expanders there's no reason to consider the issue at all.
[01:10:24] <Bike> oh right.
[01:10:52] <Bike> i guess you could finagle a two-layer thing but then things are getting complicated
[01:18:47] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[01:33:17] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-39.prtc.net)
[01:37:26] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[01:37:56] *** Joins: srhm (~srhm@user/srhm)
[01:38:47] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[01:42:14] *** Joins: selwyn (~selwyn@user/selwyn)
[01:48:34] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[01:52:25] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[01:52:55] *** Quits: prxq (~quassel@dynamic-077-012-217-237.77.12.pool.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:53:14] *** Joins: john__ (~john@dynamic-095-117-007-066.95.117.pool.telefonica.de)
[01:54:27] *** Quits: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu) (Ping timeout: 250 seconds)
[01:55:27] *** Quits: gaqwas (~john@dynamic-095-114-045-235.95.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[01:58:16] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[01:59:56] *** Joins: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5)
[02:03:00] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 250 seconds)
[02:06:25] *** Joins: khrbt (~znc@user/khrbt)
[02:08:45] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-39.prtc.net) (Quit: Client closed)
[02:09:22] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[02:10:15] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-134.prtc.net)
[02:16:01] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:16:29] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[02:27:47] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7) (Ping timeout: 240 seconds)
[02:30:21] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[02:34:01] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:36:19] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[02:50:59] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[02:52:31] *** Quits: john__ (~john@dynamic-095-117-007-066.95.117.pool.telefonica.de) (Ping timeout: 250 seconds)
[02:57:57] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[03:00:57] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Remote host closed the connection)
[03:04:12] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[03:11:08] *** Quits: pve (~pve@176-93-86-239.bb.dnainternet.fi) (Quit: leaving)
[03:15:30] *** Joins: srhm (~srhm@user/srhm)
[03:16:09] *** Quits: srhm (~srhm@user/srhm) (Client Quit)
[03:16:47] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[03:22:15] *** Joins: cjb (~cjb@user/cjb)
[03:27:13] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-134.prtc.net) (Quit: Client closed)
[03:29:38] *** Joins: elf_fortrezz (~elf_fortr@adsl-72-50-6-134.prtc.net)
[03:31:50] *** Quits: elf_fortrezz (~elf_fortr@adsl-72-50-6-134.prtc.net) (Client Quit)
[03:32:19] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-134.prtc.net)
[03:36:10] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[03:36:35] *** Joins: srhm (~srhm@user/srhm)
[03:42:06] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-134.prtc.net) (Quit: Client closed)
[03:44:10] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[03:44:41] *** Joins: srhm (~srhm@user/srhm)
[03:45:06] *** Joins: khrbt (~znc@user/khrbt)
[03:51:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[03:52:47] *** Joins: srhm (~srhm@user/srhm)
[03:54:24] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[04:00:07] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[04:04:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[04:07:59] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Quit: ERC (IRC client for Emacs 27.2))
[04:09:08] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:09:40] *** Joins: srhm (~srhm@user/srhm)
[04:12:59] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[04:15:25] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[04:15:26] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[04:16:32] *** Joins: robin (~robin@user/terpri)
[04:23:32] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[04:38:40] *** Quits: random-nick (~random-ni@87.116.177.176) (Ping timeout: 240 seconds)
[04:43:50] *** Joins: igemnace (~ian@user/igemnace)
[04:46:57] *** Joins: akoana (~ah@user/akoana)
[05:01:17] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC - https://znc.in)
[05:02:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[05:05:17] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:05:50] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[05:08:06] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[05:12:56] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:15:06] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:17:47] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[05:20:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[05:27:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[05:31:21] *** Joins: cjb (~cjb@user/cjb)
[05:33:08] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:36:12] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 250 seconds)
[05:40:42] *** Quits: wheelsucker (~user@2600:8801:8c03:1f00::8165) (Remote host closed the connection)
[06:17:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[06:19:54] *** Joins: beach` (~user@2a01:cb19:150:3400:460b:fcb3:e7e8:c29c)
[06:23:40] *** Quits: beach (~user@2a01:cb19:150:3400:76ec:360e:ff97:8eae) (Ping timeout: 240 seconds)
[06:26:33] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[06:30:31] *** Joins: notzmv (~zmv@user/notzmv)
[06:49:18] *** notzmv is now known as zimmybot
[06:49:25] *** zimmybot is now known as notzmv
[06:55:30] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[06:58:39] *** Quits: Demosthe1ex (~Demosthen@user/demosthenex) (Ping timeout: 250 seconds)
[07:09:48] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[07:09:58] *** Joins: semz (~none@user/semz)
[07:15:13] *** Quits: Guest29 (~Guest29@72.71.222.77) (Ping timeout: 246 seconds)
[07:17:54] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[07:25:48] *** beach` is now known as beach
[07:25:58] *** ChanServ sets mode: +o beach
[07:27:47] *** beach sets mode: -o beach
[07:31:39] <beach> Good morning everyone!
[07:41:07] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[07:47:27] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[07:52:03] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[07:53:50] *** Joins: semz (~none@user/semz)
[07:58:36] *** Joins: notzmv (~zmv@user/notzmv)
[08:04:05] <kakuhen> Is babel the recommended library for parsing utf-8?
[08:07:01] <beach> What's wrong with READ-CHAR?
[08:08:33] <kakuhen> Rather than making my own inferior decoder, I'd rather use one that already exists and does the right thing
[08:08:40] <moon-child> beach: portability, presumably
[08:09:07] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-12.prtc.net)
[08:09:08] <moon-child> kakuhen: utf8 decoding is 10 lines of code, if that; it's hard to make it 'inferior'
[08:11:14] <moon-child> alright, my decoder is 18 bytes.  So more than 10, but not by much
[08:11:45] <elf_fortrez> tower of hanoi in CL
[08:12:21] <beach> elf_fortrez: Is that a question?
[08:12:41] <semz> there are some pitfalls in utf-8 actually, such as overlong encodings and surrogate handling
[08:12:51] <semz> the format is deceptive
[08:14:05] <moon-child> an overlong encoding is just an invalid initial byte.
[08:14:12] <moon-child> surrogates are just in utf16 afaik
[08:14:16] <beach> kakuhen: If you have a good Common Lisp implementation, READ-CHAR should work.
[08:14:43] <kakuhen> So major implementations make their own extension to READ-CHAR for this?
[08:14:53] <beach> Extension?
[08:14:53] <kakuhen> Or are you hinting at the possibility to do this myself with READ-CHAR
[08:15:10] <Bike> if you're reading from a stream you can set the external format to be utf-8, probably.
[08:15:13] <beach> You just make sure your input stream has the right encoding when you open it.
[08:15:26] <Bike> if you just have a bytevector you probably do need a decoder like babel.
[08:15:53] <semz> moon-child: It's not just initial bytes. Code points must be encoded with the minimal number of bytes, so e.g. #\Nul must be encoded as #x00, rather than #xC0 #x00
[08:16:43] <Bike> http://sbcl.org/manual/#Supported-External-Formats e.g. on sbcl
[08:17:05] <moon-child> semz: are you implying a decoder should reject such forms?  Postel's law indicates otherwise
[08:17:58] <Bike> although this list doesn't seem to have utf-8 for some reason, which is weird, given that it is the default default
[08:19:11] <semz> moon-child: Yes, as are surrogates. https://datatracker.ietf.org/doc/html/rfc3629 page 5
[08:19:15] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 250 seconds)
[08:20:02] <semz> they're explicitly not allowed, and for good reason imo
[08:20:13] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:20:16] <semz> but it does take away from the elegance of the idea behind UTF-8
[08:21:20] *** Parts: elf_fortrez (~elf_fortr@adsl-72-50-7-12.prtc.net) ()
[08:22:41] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-12.prtc.net)
[08:23:40] <beach> kakuhen: Maybe you should describe your use case.  If you have SBCL and your encoding is located in a text file, you should be able to open the file and just read characters.
[08:23:59] <kakuhen> ok, looks like read-char supports unicode on my cl implementation
[08:24:02] <kakuhen> http://0x0.st/-tqm.txt
[08:24:07] <semz> ...which seems like a common pattern in Unix land, come to think of it. "Simple and elegant, as long as you ignore the edge cases"
[08:24:50] <kakuhen> I wasn't aware read-char was able to do this on modern implementations, since I mostly take clhs at face value, and a little birdie once told me people often just use a library for unicode in cl.
[08:24:58] <Bike> i think that's a common pattern in literally anything.
[08:25:31] <kakuhen> oh actually my output is now confusing me
[08:25:40] <kakuhen> how the hell did my invocation of file-position work
[08:25:59] <kakuhen> I naively used (file-position stream 2) to place the offset at the start of the third character
[08:26:02] <hayley> I would definitely reject UTF-8 text with bogus continuation bytes.
[08:26:19] <hayley> Remember what Linus Torvalds said to do with the GNU coding style guide? I would do that with Postel's law. Just sayin'.
[08:26:28] <semz> I tend to agree.
[08:26:40] <kakuhen> beach: my use case is just to be able to read UTF-8 coded numbers from a binary file
[08:26:52] <kakuhen> I think READ-CHAR will work for this purpose, assuming that I have the correct offset.
[08:27:04] <beach> kakuhen: Then, yes, READ-CHAR should be fine.
[08:44:14] <elf_fortrez> is treaming the inpult and output at the same time the best solution?
[08:44:22] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[08:47:05] <elf_fortrez> is writing a utf-8 in Common Lisp hard
[08:47:18] <elf_fortrez> utf-8 decoder
[08:49:24] <hayley> No, but you shouldn't need to do that.
[08:50:08] <elf_fortrez> then what function could he use?
[08:50:47] <hayley> As beach said, READ-CHAR will work fine.
[08:51:35] <elf_fortrez> bam i got it
[08:51:39] <elf_fortrez> thank you
[08:59:39] *** Joins: Oladon (~olad@98.43.81.226)
[09:06:34] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:11:48] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[09:16:02] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[09:18:25] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:19:45] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[09:19:55] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[09:20:21] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[09:21:32] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 250 seconds)
[09:23:22] *** Joins: semz (~none@user/semz)
[09:28:47] *** Joins: khrbt (~znc@user/khrbt)
[09:32:41] *** Joins: shka (~herr@109.231.62.239)
[09:34:39] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-12.prtc.net) (Quit: Client closed)
[09:39:16] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[09:39:56] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:40:56] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[09:40:58] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Remote host closed the connection)
[09:41:09] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[09:44:07] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[09:47:57] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[09:48:05] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[09:50:12] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[09:53:49] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Ping timeout: 256 seconds)
[09:56:00] *** Joins: semz_ (~none@user/semz)
[09:56:45] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Quit: Leaving...)
[09:56:57] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:59:52] *** Joins: twi (~twi@154.21.216.146)
[10:00:22] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[10:01:33] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[10:02:45] *** twi is now known as bothillinois
[10:08:40] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[10:08:47] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[10:15:24] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[10:33:12] *** Joins: [deleted] (~livoreno@user/notzmv)
[10:34:04] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[10:36:07] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[10:44:37] *** Joins: elf_fortrezz (~elf_fortr@adsl-72-50-6-135.prtc.net)
[10:50:47] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[10:51:49] *** Joins: amb007 (~a_bakic@85.133.22.93.rev.sfr.net)
[10:52:36] *** Quits: elf_fortrezz (~elf_fortr@adsl-72-50-6-135.prtc.net) (Quit: Client closed)
[10:53:57] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:55:41] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[10:56:20] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:cb9:2d96:4da8:aca7)
[10:57:20] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[10:57:52] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[11:00:03] <hayley> moon-child: A bit late, but Joe Armstrong calls it "making matters worse law": <https://youtu.be/ed7A7r6DBsM?t=1521>
[11:00:24] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[11:00:38] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[11:00:50] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Remote host closed the connection)
[11:00:59] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[11:01:20] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Remote host closed the connection)
[11:01:26] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[11:01:43] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Remote host closed the connection)
[11:02:38] <moon-child> hayley: neh, that's fair
[11:04:44] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[11:04:54] <moon-child> though, I think it depends a lot on the domain, and the nature of the data you're processing.  Utf8 decoder should (generally) not crash on invalid input, but put a substitution character or utf8-c8 nonsense.  There still _are_ a lot of documents that are actually encoded in iso8559 or w/e, and the consequences of accepting a malformed utf8 stream are highly unlikely to be terrible
[11:05:55] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:07:30] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[11:07:39] <semz_> malformed utf-8 can fool substring/equality checks, that could definitely have security implications
[11:07:45] *** semz_ is now known as semz
[11:08:45] <moon-child> hence utf8-c8 rather than substitution character
[11:09:37] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[11:12:09] <moon-child> (or just don't bother decoding in that case.  Again depends on domain)
[11:13:06] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[11:13:24] *** Joins: livoreno (~livoreno@user/notzmv)
[11:14:04] <semz> the other part specific to utf-8 is that there is just ~no reason to emit surrogates or overlong sequences.
[11:14:26] <semz> especially overlong sequences just have no reason to ever be in your output if it really is utf-8
[11:14:49] <semz> so it's not like you're losing much
[11:15:45] *** Joins: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu)
[11:17:15] <moon-child> the part of that talk on universality was delightful
[11:18:32] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[11:19:12] *** Joins: john__ (~john@dynamic-077-004-091-194.77.4.pool.telefonica.de)
[11:28:47] *** Quits: amb007 (~a_bakic@85.133.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[11:29:39] *** Joins: amb007 (~a_bakic@115.38.22.93.rev.sfr.net)
[11:30:05] *** Joins: Cymew (~ante@host-78-79-172-172.mobileonline.telia.com)
[11:30:58] *** Joins: makomo (~makomo@user/makomo)
[11:32:28] *** Joins: rowanthorpe (~Thunderbi@ppp005054222136.access.hol.gr)
[11:33:29] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 248 seconds)
[11:35:09] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[11:35:13] *** Joins: rowanthorpe1 (~Thunderbi@ppp005054222136.access.hol.gr)
[11:35:55] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[11:36:51] *** Quits: rowanthorpe (~Thunderbi@ppp005054222136.access.hol.gr) (Ping timeout: 250 seconds)
[11:36:51] *** rowanthorpe1 is now known as rowanthorpe
[11:37:44] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[11:41:33] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[11:42:30] *** Quits: amb007 (~a_bakic@115.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:42:43] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:44:47] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:45:42] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:08:05] *** Joins: pve (~pve@178-55-235-61.bb.dnainternet.fi)
[12:08:07] <pjb> moon-child: there are security implications is accepting malformed utf-8 sequences.  Modern protocols reject and close the connection when a field that should be in utf-8 cannot be decoded properly. (eg websockets rfc6455).
[12:26:07] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 252 seconds)
[12:33:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:35:21] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[12:36:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:22] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:49:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 250 seconds)
[12:56:09] *** Quits: john__ (~john@dynamic-077-004-091-194.77.4.pool.telefonica.de) (Ping timeout: 250 seconds)
[13:06:40] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:07:32] *** Quits: esb (~esb@2804:14c:1ad:8b70::1000) (Remote host closed the connection)
[13:09:47] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:14:44] <susam> pjb: Thanks for sharing that comment on malformed utf-8 sequences.
[13:14:45] <susam> Found this technical report that talks about this in detail: https://unicode.org/reports/tr36/#SecureEncodingConversion
[13:21:17] *** Joins: cosimone (~user@5.171.25.185)
[13:34:42] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-11.prtc.net)
[13:36:48] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-11.prtc.net) (Client Quit)
[13:39:24] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-136.prtc.net)
[13:55:53] <lisp-newbie> Hi, I'm using a package that defines a generic and some methods. I created a method to deal with a specific object. Now how can I make it so that the algorithm that calls the methods uses mine? see here encode-json https://github.com/hankhero/cl-json/blob/master/src/encoder.lisp
[13:56:13] <lisp-newbie> Bike are you here?
[13:56:44] <lisp-newbie> this was yur suggestion yesterday, I now learned a bit about methods and generics, thanks! exactly what I need, if it works it's a very simple solution
[13:56:56] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[13:57:02] <lisp-newbie> *by package read system
[13:59:04] <lisp-newbie> the idea I had was to use (in-package :json) and then back (in-package :my-own-package)
[14:00:19] <lotuseater> lisp-newbie: you can import to your package the symbols from the :json package you need
[14:00:48] <beach> lotuseater: I recommend against importing symbols.
[14:01:24] <beach> lisp-newbie: Bike is probably asleep.  And if you can maybe give a smaller example for your question, or point to a particular method in that file, that would help.
[14:01:25] <lotuseater> beach: right, I didn't mean exactly using :import-from
[14:01:37] <lisp-newbie> lotuseater I created the method already, I just want it that when I call json:encode-json it should call my method when it happens to find an object of class whatever
[14:02:12] <lisp-newbie> beach lotuseater yeah one sec, making a pastebin
[14:02:21] <beach> lisp-newbie: It will call your method if you give it an argument that is an instance of the particular class you specialied your method to.
[14:02:24] <lotuseater> ah okay
[14:02:49] <beach> lisp-newbie: But then you said "a specific object" and I don't see any trace of that in your code.
[14:03:12] <beach> lisp-newbie: Because that would mean an "EQL specializer" and I don't see one.
[14:03:32] <lisp-newbie> beach https://pastebin.com/0haADxKj
[14:03:36] <lisp-newbie> lotuseater
[14:04:40] <lisp-newbie> beach yeah, you are right. I meant when a object of a specific class is called, I want my own method to do it. not cl-json's generalized clos method
[14:04:41] <beach> lisp-newbie: That method will be called if you pass it an instance of the class LOCAL-TIME:TIMESTAMP.
[14:04:55] <lisp-newbie> beach even if it's in a different package?
[14:05:09] <beach> lisp-newbie: Wow, hold on a sec...
[14:05:21] <lisp-newbie> b/c it didn't seem to work for me... now if I change the package it seems to be working though I get no result not sure why...
[14:05:28] <beach> lisp-newbie: The only object that are called are functions.  And I don't think that's what you mean.
[14:05:45] <beach> lisp-newbie: Also, packages matter mostly just to the reader.
[14:05:56] <beach> lisp-newbie: Just create an instance of that class and you are fine.
[14:06:08] <lisp-newbie> beach ok will try
[14:06:47] <beach> It is possible that the DEFGENERIC form and the DEFMETHOD form are in different packages?
[14:07:37] <beach> If so, you have two generic functions with two different names, but the names (i.e., the symbols naming them) have the same SYMBOL-NAME but different values of SYMBOL-PACKAGE.
[14:08:29] <beach> Does that make sense to you?
[14:09:05] *** Quits: lsip123_` (~user@80.227.170.170) (Read error: Connection reset by peer)
[14:09:13] *** Joins: lsip123_` (~user@80.227.170.170)
[14:10:06] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[14:11:10] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 252 seconds)
[14:11:26] <lisp-newbie> beach I don't really understand
[14:11:34] <lisp-newbie> sorry for the late reply, trying to test this...
[14:12:16] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[14:12:26] *** Joins: dac (~dcx@user/dac)
[14:12:49] *** Quits: dcx (~dcx@user/dac) (Ping timeout: 252 seconds)
[14:12:59] <beach> lisp-newbie: Is it the case that, when things don't work, your DEFGENERIC form and your DEFMETHOD form are in two different files with two different IN-PACKAGE forms at the beginning?
[14:14:30] <beach> lisp-newbie: If so, and if your DEFGENERIC form is in package A and your DEFMETHOD form is in package B, then your DEFMETHOD form will implicitly create a generic function named B:ENCODE-JSON, whereas you DEFGENERIC form created a generic function named A:ENCODE-JSON.
[14:15:04] <lisp-newbie> beach yes
[14:15:47] <beach> lisp-newbie: Any symbol you find in a file with an (IN-PACKAGE #:MUMBLE) will be in package #:MUMBLE, except for symbols that are imported.
[14:15:50] <lisp-newbie> exactly, so what can I do? my defmethod is in :my-package and the defgeneric encode-json is in cl-json:encode-json
[14:16:38] <beach> So you do (defmethod cl-json:encode-json ...) instead of (defmethod encode-json ...).
[14:16:42] <lisp-newbie> beach so I should import it? and by importing do you mean :import-from or :use? I've tried to stick to :import-from from what I read to avoid naming conflicts
[14:16:51] <beach> NOOOOOOOOOOO!
[14:16:58] <lisp-newbie> ahhhh wow, never would have thought of that
[14:16:59] <lisp-newbie> thanks
[14:17:07] <beach> Sure.
[14:18:14] <beach> You can refer to any exported symbol in any existing package by giving a package prefix.
[14:19:08] <lotuseater> beach: That's also helpful when shadowing symbols but when you then need them at some points.
[14:20:21] <beach> You are telling me?  I do that all the time.  The Cluffer library has symbols named FDEFINITION, FIND-CLASS, etc. and we occasionally need to refer to the symbols with those names in the CL package.
[14:20:43] <jmercouris> hm, I never thought of just not using CL in a package
[14:20:58] <jmercouris> :USE to be clear
[14:21:10] <jmercouris> I guess there could be a reason to do it
[14:21:14] <beach> We do :USE the CL package, be we often choose to shadow some symbols.
[14:21:31] <jmercouris> I see, so you just shadow them
[14:21:35] <beach> Yes.
[14:21:37] <jmercouris> it's been a while since i've looked at cluffer
[14:21:40] <lotuseater> No of course I'm not telling.
[14:22:15] <beach> Ooops, I meant Clostrum, not Cluffer.
[14:22:39] <beach> Because Clostrum manages first-class global environments
[14:23:02] <beach> So it is normal that it has names that are the same as some CL names, because the functions do similar things.
[14:23:32] <jmercouris> ah, that makes much more sense
[14:23:38] <jmercouris> I was wondering why those would have been shadowed in cluffer
[14:23:44] <beach> Yeah, sorry.
[14:23:46] <jmercouris> but I figured there was some esoteric reason I did not know :-D
[14:24:27] <beach> So there is a generic function (defgeneric fdefinition (client environment function-name) ...) that returns the function with the given name in the given environment.
[14:24:45] <beach> It would be silly to try to name it something else, when that is precisely what it does.
[14:25:14] <jmercouris> agreed
[14:26:02] <beach> Same with MACRO-FUNCTION, COMPILER-MACRO-FUNCTION, FIND-CLASS, etc.
[14:33:16] <lisp-newbie> wohooo!! :D thank you beach and lotuseater :D now working
[14:34:39] <beach> Pleasure.
[14:34:49] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-136.prtc.net) (Ping timeout: 246 seconds)
[14:34:58] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:35:06] *** Joins: amb007 (~a_bakic@99.38.22.93.rev.sfr.net)
[14:35:06] *** Quits: amb007 (~a_bakic@99.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:35:34] *** Joins: amb007 (~a_bakic@99.38.22.93.rev.sfr.net)
[14:39:09] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: This computer has gone to sleep)
[14:47:57] *** Quits: Cymew (~ante@host-78-79-172-172.mobileonline.telia.com) (Ping timeout: 250 seconds)
[14:51:48] *** Quits: amb007 (~a_bakic@99.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:51:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:56:44] <lotuseater> erm okay but I didn't say anything useful ._.
[14:57:38] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:02:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:03:22] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[15:20:08] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Quit: ERC (IRC client for Emacs 28.0.50))
[15:28:05] *** Joins: selwyn (~selwyn@user/selwyn)
[15:28:19] <hayley> Today I found out that SBCL has a SB-LOCKLESS package, which (at least?) has an implementation of a lock-free linked list. Does anyone use it? I can't find a use in SBCL, but I didn't look too hard.
[15:28:50] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[15:29:14] *** Joins: selwyn (~selwyn@user/selwyn)
[15:29:35] *** Quits: lsip123_` (~user@80.227.170.170) (Remote host closed the connection)
[15:30:27] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:30:37] <jmercouris> haylely: rgrep QL
[15:31:23] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:32:02] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[15:32:13] <hayley> Yeah, thanks. I'll just download everything in Quicklisp to find out. But there don't seem to be any hits on GitHub for it.
[15:32:25] <jmercouris> the only thing I see is lparallel using a lockless queue
[15:32:44] <jmercouris> on first inspection it does not apepar they are using SBCL's package
[15:34:22] <jmercouris> yeah, I can't find anything else
[15:34:39] <jmercouris> you may have better luck with a more populated QL than mine, I only looked at what I had already used
[15:34:41] *** Joins: dlowe (~dlowe@user/dlowe)
[15:35:56] <hayley> Earlier I was aware of a mostly lock-free hash table in SBCL, but that is at least used for packages.
[15:37:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:38:29] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:40:47] <_death> grepping sbcl shows some uses.. it's an internal package so not meant to be used by other projects
[15:46:51] <_death> although there's no actual construction of such lists, so my next guess is that it's used in google's Lisp code..
[15:47:12] <hayley> I can't seem to find any uses in SBCL though. The GC and SAVE-LISP-AND-DIE have to be careful around it (as it uses lowtags for "mark bits"), but - yeah, nothing really "uses" it.
[15:47:53] <lotuseater> _death: where's that Lisp code at Google you speak of?
[15:49:57] <_death> lotuseater: https://en.wikipedia.org/wiki/ITA_Software
[15:50:39] <lotuseater> okay I'm aware of that
[15:50:59] <lotuseater> but they just bought it once. and have some CL style guide
[15:52:24] *** Joins: Cymew (~ante@host-78-79-172-153.mobileonline.telia.com)
[15:56:37] <_death> sometimes it seems the purpose of certain SBCL commits is to help with particular issues in their software
[15:59:20] <_death> (I'm not attaching judgment to this statement, to be clear)
[16:01:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:01:52] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:03:33] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[16:06:32] *** Joins: Guest29 (~Guest29@72.71.222.77)
[16:08:07] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[16:08:42] *** Joins: semz (~none@user/semz)
[16:10:43] *** Quits: robin (~robin@user/terpri) (Ping timeout: 250 seconds)
[16:17:43] *** Quits: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net) (Quit: karlosz)
[16:18:31] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[16:19:47] *** Quits: cosimone (~user@5.171.25.185) (Ping timeout: 240 seconds)
[16:21:26] *** Joins: semz (~none@user/semz)
[16:26:19] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[16:33:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:35:49] <pjb> susam: [tr36] interesting; thanks.
[16:39:13] *** Joins: semz (~none@user/semz)
[16:44:59] *** Joins: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net)
[16:59:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[17:01:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:15:09] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[17:16:56] *** Joins: Bike (~Glossina@71.69.170.70)
[17:16:56] *** ChanServ sets mode: +o Bike
[17:18:34] <lisp123> _death: How big is ITA these days?
[17:20:29] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[17:21:03] *** Joins: semz (~none@user/semz)
[17:25:15] <_death> lisp123: I don't know
[17:25:18] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Quit: You have been idle for 30+ days)
[17:26:27] <lisp123> https://matrix.itasoftware.com
[17:26:44] <lisp123> Hopefully it stays big, when travel rebounds - Google should get a good pickup
[17:28:43] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[17:30:05] *** Joins: didi (~user@user/didi)
[17:31:07] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[17:33:03] <didi> This is curious: Compiling (defmethod foo (x) (with-slots (h) x (loop for v being each hash-value in h sum v))) with C-c C-c in SLIME under SBCL I get the following style warning: "Can't preserve function source - missing MAKE-LOAD-FORM methods?"
[17:33:40] <contrapunctus> o/
[17:33:56] <beach> clhs with-slots
[17:33:56] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm
[17:34:35] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Remote host closed the connection)
[17:34:37] <didi> beach: Am I using `with-slots' wrong?
[17:34:45] <beach> No, apparently not.
[17:34:55] <didi> Ah, ok.
[17:34:59] <_death> didi: I don't get this here.. what sbcl version?
[17:35:30] <didi> _death: "2.0.1.debian"
[17:35:50] <_death> maybe try a more recent version
[17:36:22] <didi> _death: Thanks. Tho I might write it without LOOP to avoid the warning.
[17:37:01] *** Joins: shka (~herr@109.231.62.239)
[17:37:33] <hayley> I don't think that warning has to do with any code you wrote.
[17:37:50] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[17:38:00] <didi> hayley: Well, it's that code which triggers it.
[17:38:27] <contrapunctus> I can't start seem to start a SLIME REPL of late (was working fine earlier) - on the first attempt I got END-OF-FILE for swank.fasl, and on the second attempt I got "The function SWANK::INIT is undefined." -  http://ix.io/3wPs
[17:39:39] <hayley> didi: Does it not occur for any other function?
[17:39:54] <didi> hayley: Not until now, no.
[17:39:55] <hayley> Or for any other DEFMETHOD form, or anything else?
[17:40:00] <didi> Nope.
[17:40:06] *** Quits: lisp-newbie (~lisp-newb@bzq-109-66-77-73.red.bezeqint.net) (Quit: Leaving)
[17:40:23] <hayley> Weird.
[17:40:45] <didi> It's just curiosity. As _death said, it doesn't occur on a more recent version.
[17:44:10] <contrapunctus> I've tried searching for the error, and `apt reinstall sbcl`. No change...
[17:44:27] <_death> have you tried deleting the fasls
[17:44:35] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:44:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:45:42] *** Joins: semz (~none@user/semz)
[17:48:44] <recordgroovy> I've never seen the LOOP phrase "being each hash-value in h"... is there a difference between "in" and "of"?
[17:49:01] <Bike> don't think so, at least in that context
[17:49:46] <contrapunctus> _death: I moved the `fasls` directory to `fasls.bak`...that did not end well. http://ix.io/3wPw
[17:51:00] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[17:53:23] <didi> recordgroovy: Nope. "each|the" and "on|in" are just for grammar.
[17:54:06] <didi> Eer, "of|in".
[17:54:15] * didi is not great on grammar
[17:54:21] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (*.net *.split)
[17:54:21] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[17:54:21] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[17:54:21] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[17:54:21] *** Quits: micro (~micro@user/micro) (*.net *.split)
[17:54:21] *** Quits: lukego (sid312033@tooting.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: travv0 (sid293381@user/travv0) (*.net *.split)
[17:54:21] *** Quits: jhi (sid81469@tooting.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: conjunctive (sid433686@brockwell.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[17:54:21] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[17:54:21] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[17:54:21] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[17:54:21] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[17:54:21] *** Quits: remexre (~nathan@user/remexre) (*.net *.split)
[17:54:21] *** Quits: clemens3 (~clemens@225.40.150.83.ftth.as8758.net) (*.net *.split)
[17:54:21] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[17:54:22] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[17:56:11] <_death> contrapunctus: maybe try cloning the slime repo from github instead of using the elpa version, and make sure it's the only copy
[17:56:12] <contrapunctus> Tried to `M-x package-reinstall RET slime RET` and start a new SBCL...that worked!
[17:56:36] <contrapunctus> _death: thanks :)
[17:57:19] *** Quits: v88m (~Xiro@109-252-61-156.nat.spd-mgts.ru) (Ping timeout: 250 seconds)
[17:58:36] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[17:58:36] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[17:58:36] *** Joins: Fade (fade@outrider.deepsky.com)
[17:58:36] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[17:58:36] *** Joins: lukego (sid312033@tooting.irccloud.com)
[17:58:36] *** Joins: Oddity (Oddity@user/oddity)
[17:58:36] *** Joins: micro (~micro@user/micro)
[17:58:36] *** Joins: travv0 (sid293381@user/travv0)
[17:58:36] *** Joins: jhi (sid81469@tooting.irccloud.com)
[17:58:36] *** Joins: conjunctive (sid433686@brockwell.irccloud.com)
[17:58:36] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:58:36] *** Joins: sm2n (~sm2n@user/sm2n)
[17:58:36] *** Joins: energizer (~energizer@user/energizer)
[17:58:36] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:58:36] *** Joins: zagura (~zagura@user/zagura)
[17:58:36] *** Joins: remexre (~nathan@user/remexre)
[17:58:36] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[17:58:36] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[17:59:33] *** Joins: v88m (~Xiro@109-252-61-156.nat.spd-mgts.ru)
[18:14:27] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:15:31] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[18:16:49] *** Quits: v88m (~Xiro@109-252-61-156.nat.spd-mgts.ru) (Ping timeout: 250 seconds)
[18:22:59] *** Joins: semz (~none@user/semz)
[18:27:56] *** Quits: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu) (Quit: Leaving)
[18:29:55] *** Joins: attila_lendvai (~alendvai@1F2EFC6D.unconfigured.pool.telekom.hu)
[18:33:43] *** Quits: semz (~none@user/semz) (Ping timeout: 250 seconds)
[18:35:32] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Ping timeout: 245 seconds)
[18:37:22] *** Quits: attila_lendvai (~alendvai@1F2EFC6D.unconfigured.pool.telekom.hu) (Quit: Leaving)
[18:37:50] *** Joins: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu)
[18:38:44] *** Joins: semz (~none@user/semz)
[18:38:58] *** Quits: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu) (Client Quit)
[18:39:23] *** Joins: attila_lendvai (~alendvai@1f2efc6d.nat.pool.telekom.hu)
[18:44:53] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:45:48] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[18:49:11] *** Joins: prxq (~quassel@x4db665e2.dyn.telefonica.de)
[18:51:58] *** Quits: sgithens (sid10659@id-10659.brockwell.irccloud.com) ()
[18:52:11] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[18:57:07] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:57:20] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:00:47] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[19:03:28] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[19:06:19] *** Joins: livoreno (~livoreno@user/notzmv)
[19:07:48] *** Joins: karlosz (~karlosz@93-164-35-250-static.dk.customer.tdc.net)
[19:08:44] *** Quits: palter (sid27521@brockwell.irccloud.com) ()
[19:09:00] *** Joins: palter (sid27521@id-27521.helmsley.irccloud.com)
[19:09:38] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[19:21:55] *** Quits: Cymew (~ante@host-78-79-172-153.mobileonline.telia.com) (Ping timeout: 252 seconds)
[19:21:56] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Remote host closed the connection)
[19:22:06] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[19:23:27] *** Quits: pl (sid98063@id-98063.brockwell.irccloud.com) ()
[19:23:42] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[19:23:42] *** ChanServ sets mode: +o pl
[19:28:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:30:45] *** Joins: Josh_2 (~user@37.25.47.130)
[19:31:21] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[19:34:26] *** Quits: attila_lendvai (~alendvai@1f2efc6d.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[19:35:33] *** Joins: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu)
[19:44:28] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[19:56:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[19:57:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:58:57] *** Joins: dlowe_ (~dlowe@146.115.166.6)
[20:10:56] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[20:17:07] <jcowan> hayley: Postel's Law makes sense for display programs: if your browser always said "HTML validity error" and nothing else, you'd quickly dispose of it in favor of another browser that is liberal in what it accepts.
[20:19:04] *** Quits: dlowe_ (~dlowe@146.115.166.6) (Remote host closed the connection)
[20:25:42] *** Quits: attila_lendvai (~alendvai@1F2EFC6D.nat.pool.telekom.hu) (Quit: Leaving)
[20:34:11] *** Quits: rowanthorpe (~Thunderbi@ppp005054222136.access.hol.gr) (Ping timeout: 250 seconds)
[20:35:47] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[20:36:42] *** Joins: amb007 (~a_bakic@67.38.22.93.rev.sfr.net)
[20:39:31] *** Joins: cranium (~cranium@user/cranium)
[20:39:46] *** Quits: cranium (~cranium@user/cranium) (Client Quit)
[20:39:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:40:11] *** Joins: cranium (~cranium@user/cranium)
[20:40:49] *** Quits: stylewarning (sid241636@id-241636.brockwell.irccloud.com) ()
[20:41:03] *** Joins: stylewarning (sid241636@id-241636.helmsley.irccloud.com)
[20:43:27] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[20:56:55] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[21:01:37] *** Joins: silasfox (~sbv@xdsl-87-78-57-101.nc.de)
[21:08:23] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:13:47] *** Quits: silasfox (~sbv@xdsl-87-78-57-101.nc.de) (Ping timeout: 240 seconds)
[21:21:43] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:24:06] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[21:24:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[21:26:13] *** Joins: v88m (~Xiro@109.252.61.156)
[21:28:00] *** Quits: amb007 (~a_bakic@67.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:28:41] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:44:59] *** Joins: silasfox (~sbv@p200300cec722ef9b1b5a7fa8102da339.dip0.t-ipconnect.de)
[21:45:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[21:46:42] *** Joins: cuz (~user@38.140.58.234)
[21:50:06] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[21:50:10] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:00:02] *** Joins: Krystof (~user@81.174.155.115)
[22:01:09] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:03:37] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[22:09:08] *** Joins: Guest42 (~Guest42@adsl-72-50-7-6.prtc.net)
[22:14:06] *** Joins: ln43 (~ln43@user/ln43)
[22:15:23] <ln43> Hi all... i'm downloading a book edited  for the first time in the 1995 about CL ,... hoping that the reading will be pleasant
[22:16:28] *** Joins: PinealGlandOptic (~PinealGla@195.60.174.145)
[22:16:39] <hexology> which book?
[22:18:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:19:53] <ln43> Artificial Intelligence: A Modern Approach (Stuart Russell, Peter Norvig)
[22:21:01] <ln43> basically i was looking for a decent implementation of a* used for search and i found this site: http://www.ccs.neu.edu/home/rjw/csg120/ which was pointing as a textbook to that one
[22:22:36] <ln43> the reason was that i really don't liked the approach used in another book
[22:23:06] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:24:51] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:25:55] <_death> it's a great book, but not about CL.. the authors did write some CL code to go along with the book
[22:26:36] <ln43> but ok, to be honest i should start understanding the pseudocode before cnsidering the "style" ... anyway since i'm trying to getting used to the language i would like to find a decent way to express the concepts using CL
[22:27:02] <ln43> so if there is any possible suggestion it's welcome
[22:27:23] <didi> ln43: PAIP is a classic.
[22:27:24] <_death> before AIMA, Norvig wrote a much more CL-centric book called Paradigms of AI Programming
[22:27:38] <didi> ln43: ^
[22:27:39] *** Joins: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net)
[22:28:01] <ln43> ok... thanks, so i should try to get that book
[22:28:03] <rain3> https://github.com/norvig/paip-lisp/blob/master/docs/chapter2.md
[22:31:05] <Bike> PAIP doesn't cover A*, does it?
[22:31:21] <_death> it does
[22:31:34] <Bike> really? i should go over my copy again, then
[22:31:39] <_death> though the implementation is a bit messy :)
[22:32:34] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[22:33:03] *** Joins: cosimone (~user@93-44-186-101.ip98.fastwebnet.it)
[22:33:47] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 240 seconds)
[22:34:03] <_death> https://github.com/norvig/paip-lisp/blob/master/docs/chapter6.md#searching-graphs
[22:34:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:36:04] *** Quits: Guest42 (~Guest42@adsl-72-50-7-6.prtc.net) (Ping timeout: 246 seconds)
[22:37:07] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 240 seconds)
[22:37:43] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[22:39:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:39:45] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:40:47] <ln43> right... good implementation compared to the others i have seen before
[22:41:29] <_death> it's very inefficient.. since it uses a list where a heap should be used
[22:46:47] <_death> it seems the aima-lisp implementation uses a heap.. progress :)
[22:48:33] <_death> anyway I use this: https://github.com/death/zonquerer/blob/master/a-star.lisp
[22:48:34] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[22:49:58] <_death> it's also a bit messy, but I used it successfully in practical problems
[22:50:11] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[22:53:21] *** Joins: zuckonit (~user@154.6.18.5)
[22:53:42] <ln43> _death, this one: https://github.com/aimacode/aima-lisp/blob/master/search/algorithms/problems.lisp ?
[22:54:29] <_death> that's the repo
[22:54:52] <ln43> yes i should try to find the book too
[22:55:10] <ln43> but ok, right now i'm speed limited...
[22:55:10] <_death> amazon.com has it
[22:55:55] *** Joins: zuckonit` (~user@2603-6011-2303-6613-5091-f145-92e9-cead.res6.spectrum.com)
[22:57:27] *** Quits: zuckonit (~user@154.6.18.5) (Ping timeout: 240 seconds)
[23:11:00] *** Quits: zuckonit` (~user@2603-6011-2303-6613-5091-f145-92e9-cead.res6.spectrum.com) (Remote host closed the connection)
[23:14:34] *** Quits: cosimone (~user@93-44-186-101.ip98.fastwebnet.it) (Remote host closed the connection)
[23:16:58] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:22:27] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 240 seconds)
[23:24:30] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:26:34] *** Joins: makomo (~makomo@user/makomo)
[23:27:38] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:31:55] <recordgroovy> didi: Good to know, thanks!
[23:34:16] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[23:35:46] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[23:36:21] *** Joins: mjoerg (~user@user/mjoerg)
[23:41:31] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 252 seconds)
[23:45:22] *** Quits: PinealGlandOptic (~PinealGla@195.60.174.145) (Ping timeout: 252 seconds)
[23:56:34] *** Joins: cuz (~user@38.140.58.234)
[23:56:34] *** Joins: psycomic (~psycomic@2a01:e0a:18:d0a0:722:ca5a:b7d:38dd)
[23:58:42] <phantomics> I just updated to the latest version of SBCL and Alexandria and now I'm seeing a strange bug:
[23:59:08] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[23:59:13] <phantomics> (alexandria:rotate #(3 1) 1) gives #(1 3), but (alexandria:rotate (make-array 2 :element-type 'fixnum :initial-contents '(3 1)) 1) produces an error
[23:59:31] <phantomics> The 'fixnum type is causing a problem. Any thoughts?
[23:59:33] <lotuseater> ohai phantomics :)
[23:59:46] <phantomics> What's up lotuseater
