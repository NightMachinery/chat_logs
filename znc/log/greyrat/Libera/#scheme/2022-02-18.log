[00:01:12] <Zipheir> klf: Are you trying to handle macro expansion as well?
[00:01:38] <klf> Zipheir, does my parser need to know how to parse the lambda syntactic form? 
[00:01:40] <Zipheir> klf: Otherwise, binding is not a concept you have to worry about.
[00:01:55] <klf> Zipheir, if it's complex and hairy, then no.
[00:02:03] <Zipheir> klf: Almost certainly.
[00:02:05] <sham1> It doesn't. Technically you can just parse them all as expressions and then in the semantic analysis see that it's a lambda expression and do the stuff there
[00:02:22] <Zipheir> Er, or that.
[00:02:44] <klf> Shaml, if that case, it would be a super ultra simple parser. lol
[00:02:48] <sham1> You don't need to validate that your program is correct at the parsing stage. Just that the grammar is correct
[00:02:50] <sham1> klf: correct
[00:02:56] <Zipheir> klf: Traditionally, you just write a parser for S-expressions, then interpret those.
[00:03:18] <sham1> That's one of the reasons why s-expressions are so attractive
[00:03:29] <sham1> Parsing them is a piece of cake
[00:03:35] *** Joins: kitty1 (~kitty@096-039-147-043.res.spectrum.com)
[00:03:38] <Zipheir> It's enough to parse (lambda (x y z) e) as '(lambda '(x y z) e).
[00:03:44] <Zipheir> Er, drop the second quote.
[00:04:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:04:57] <Zipheir> But you *could* write a more elaborate parser that accepts the language described in the the lexical section of the standards.  As jcowan says.
[00:05:03] <Zipheir> klf: ^
[00:05:10] <sham1> It's not that difficult
[00:05:26] <sham1> The lexical forms are pretty tame when compared to other languages
[00:05:39] <Zipheir> But looking for string-length and other procedures in a parser is too much, IMO.
[00:06:31] <klf> so figure out what they mean.... interpret what form it is referring to by figuring what expansion context each part that being expanded is in during semantic analsysis?
[00:06:36] <klf> is that the plan?
[00:06:51] *** Joins: aeth (~aeth@user/aeth)
[00:07:25] <klf> that is* being expanded ...
[00:07:36] <Zipheir> klf: If you're just parsing, completely ignore the semantics and focus on syntax?
[00:10:08] <Zipheir> I would say that a parser should reject (lambdla (x y z) e) as a syntax error.  Whether that is done by the parser, or by a mid-layer s-exp analyzer, is a design choice, I guess.
[00:10:28] <amazigh> sequence of chars -> sequence of atoms
[00:10:35] <sham1> I'd say that for scheme that might be more semantic than syntax
[00:10:40] <amazigh> yes
[00:10:52] <amazigh> read does not reject (lambdla ...)
[00:11:09] <Zipheir> A Scheme parser.  Not read.
[00:11:15] <Zipheir> read is an s-expression parser.
[00:11:39] <sham1> Well a scheme parser then is an amalgam of read and eval ;P
[00:11:54] <Zipheir> sham1: But you see how that's not absolutely true, right?
[00:12:31] <Zipheir> sham1: You can absolutely write a parser for R5RS Scheme that rejects (lambdla ...) without doing any evaluation.
[00:12:33] <mdhughes> You do need comments and a few other niceties in a Scheme parser, over read.
[00:12:55] <sham1> Zipheir: sure
[00:13:02] <Zipheir> (RnRS, I just typed 5 for some reason.)
[00:13:51] <amazigh> R5RS tribe is back ;)
[00:13:52] <sham1> But then the parser would also need a symbol table to know that you don't accidentally reject a program which has defined a name lambdla
[00:13:59] <gwatt> but should the parser reject (lambdla ...) ? That's a valid call expression, if "lambdla" is defined
[00:14:03] <klf> Why should (lambda (x y z) e) be rejected? b/c it's not an s-expression?
[00:14:03] <tokie> i am implementing call/cc and r7 definitely has a much improve text on continuations
[00:14:39] <Zipheir> gwatt: Yes, that's valid.  I meant the typoed lambda expression (lambdla (x y e) e).
[00:14:48] <sham1> klf: the argument is about whether to reject it when one misspells lambda
[00:14:56] <Zipheir> klf: Because, without macros, it's a syntax error.
[00:14:58] <tokie> my parser would produce an AST for a bad lambda form but then my compiler is what would puke on it
[00:15:40] <klf> tokie, then you are the perfect person I can I ask bout this.
[00:15:58] <Zipheir> *If* you have macros, then you simply have to allow any s-exp and reject them as syntax errors only after expansion.
[00:16:03] *** Joins: notzmv (~zmv@user/notzmv)
[00:16:16] <klf> I am tryingt to find out how to write a parser that could handle lambda forms.
[00:16:33] <sham1> Well I'd say that doing macro expansion for a Compilers class project would deserve extra credit :P
[00:16:57] <tokie> klf: i dunno, this channel is full of very talented people and you've been talking to them about this subject :P 
[00:17:23] <gwatt> I don't think the parser should do anything with forms. It produces s-expressions and something else interprets their meaning
[00:17:36] <tokie> gwatt: that is how my scheme operates, yeah
[00:18:01] <klf> gwatt sounds like a better choice, considering that i need to deliver by monday
[00:18:12] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:18:27] <mdhughes> (read) with some niceties gets you your "AST" - a series of sexpr. Walk it and eval it, you have an interpreter. Walk it and generate code, you have a compiler. It's not like C or Java where there's a big middle step after tokenizing.
[00:20:19] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:9823:214d:db98:b3c3) (Quit: Client closed)
[00:20:22] <sham1> Of course the steps in "walk it and {eval,generate code for} it" can be quite complex with things like type analysis and other stuff
[00:20:38] <sham1> Which correspond to the semantic analysis steps seen in other languages' compilers
[00:20:41] <sham1> And interpreters
[00:20:58] <klf> Where does a macro expander ussually sit? 
[00:20:58] <Zipheir> Interpreters and compilers can be massively complicated, of course.
[00:21:16] <Zipheir> klf: Between the s-expressions and the rest of the interpreter.
[00:21:21] <sham1> A macro expander is right after you've parsed your AST
[00:21:45] <sham1> It depends on your compilation state (imported modules and such)
[00:21:46] <tokie> presumably the class doesn't require a student write a macro expander?
[00:22:08] <sham1> Thus I said "extra credit" although a traditional lisp macro expander isn't that bad
[00:22:09] <Zipheir> tokie: That's what I've assuming...
[00:22:17] <tokie> i would be shocked if it did
[00:22:23] <tokie> unless it was a very very trivial macro system
[00:22:58] <Zipheir> Based on klf's grammar ve is not dealing with macros.
[00:23:14] <mdhughes> If I was gonna add macros to Simplest Lisp Possible there, they'd just be run over each (read) that follows.
[00:24:41] <sham1> (eval (eval form))
[00:24:43] <mdhughes> (define-macro x ...) creates the macro, then when I read (define (foo) (x ...))  recurse down and run that macro on x. Not the most efficient solution but it's fine.
[00:25:13] <sham1> One of the simplest extensions to the lisp 1.5 micromanual
[00:26:42] <klf> here's a picture of the miniJavaParser in PLY.  For java-like languages that make extensive use of reserved words, the meaning of the program is mostly revealed after ast
[00:27:24] <klf> https://imgur.com/a/KYZMSou
[00:27:40] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[00:28:14] <klf> because the reserved words are semantic in nature.
[00:28:15] <sham1> Well, that's true insofar as one has a grammatically correct program. A grammatically correct program can still be incorrect
[00:29:14] <Zipheir> klf: I think "reserved words" are misleading you here.
[00:30:24] <Zipheir> klf: Consider your string_unary_op definition.  How many unary procedures on strings are there?
[00:32:42] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[00:32:49] <klf> uniecided
[00:32:57] <klf> undecided.
[00:33:04] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[00:33:48] <klf> We're asked to support a few basic data types; the target is C 
[00:34:06] <Zipheir> klf: Notionally, an infinite number.
[00:34:35] <Zipheir> klf: So treating "built-in" procedures as literals for a parser isn't likely to provide any useful information.
[00:35:50] <Zipheir> klf: And that doesn't mean that Scheme is any harder to parser than languages with lots of literal "keywords".
[00:36:23] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:36:56] <Zipheir> klf: The simplest approach is to have a parser rule for application.  This should give you (among other things) an identifier in the operator position.  A full interpreter would look that up in a table of definitions, and expect to get a procedure.
[00:37:37] <klf> üëç
[00:39:21] <Zipheir> Scheme really is quite minimal.  There is no observable difference between built-in procedures and user-defined procedures, usually.
[00:39:47] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[00:41:06] *** Joins: Avichi (~Avichi@2a02:a460:7aa6:1:9823:214d:db98:b3c3)
[00:46:27] *** Quits: klf (~klf@66.220.205.98) (Quit: Leaving)
[00:58:09] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:92ea:b5:1013:5714)
[01:00:39] *** Joins: klf (~klf@66.220.205.98)
[01:03:00] *** Quits: dnm (sid401311@id-401311.lymington.irccloud.com) (Ping timeout: 240 seconds)
[01:03:24] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[01:04:12] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (Ping timeout: 240 seconds)
[01:04:36] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[01:05:36] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[01:05:36] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[01:05:38] *** Joins: dnm (sid401311@id-401311.lymington.irccloud.com)
[01:05:43] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[01:27:39] *** Quits: klf (~klf@66.220.205.98) (Quit: This computer has gone to sleep)
[01:43:54] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:45:42] *** Joins: badkins (~badkins@136.56.92.199)
[01:53:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[02:00:17] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:08:55] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[02:26:50] *** Joins: jao (~jao@79.red-79-159-137.dynamicip.rima-tde.net)
[02:31:08] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:80a3:f5a9:9ce8:ca83) (Quit: Leaving)
[02:40:18] *** Quits: rgherdt (~rgherdt@83.236.18.121) (Remote host closed the connection)
[02:43:22] *** Quits: dbohdan (~dbohdan@user/dbohdan) (Ping timeout: 260 seconds)
[02:44:39] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:92ea:b5:1013:5714) (Ping timeout: 252 seconds)
[02:44:41] *** Quits: Oxyd (~oxyd@user/oxyd) (Ping timeout: 256 seconds)
[02:50:32] *** Joins: dbohdan (~dbohdan@user/dbohdan)
[02:51:00] *** Joins: Oxyd (~oxyd@user/oxyd)
[02:59:05] *** Quits: Avichi (~Avichi@2a02:a460:7aa6:1:9823:214d:db98:b3c3) (Ping timeout: 256 seconds)
[03:20:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:22:27] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:25:25] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:38:02] *** Quits: masoudd (~masoudd@user/masoudd) (Remote host closed the connection)
[03:47:31] *** Joins: klovett (~klovett@107.127.17.177)
[03:48:17] *** Quits: klovett_ (~klovett@107.127.17.177) (Ping timeout: 240 seconds)
[03:52:42] *** Joins: badkins (~badkins@136.56.92.199)
[04:00:05] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:13:58] *** Joins: TCZ (~tcz@91.150.178.124)
[04:22:29] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Remote host closed the connection)
[04:23:12] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:30:31] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:32:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[04:35:58] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[04:36:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:36:50] *** Joins: badkins (~badkins@136.56.92.199)
[04:39:47] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:48:30] *** Joins: trannus_aran (~sammi@c-98-244-55-191.hsd1.ca.comcast.net)
[04:48:47] *** Joins: seninha (~chatzilla@user/seninha)
[04:48:51] *** Parts: trannus_aran (~sammi@c-98-244-55-191.hsd1.ca.comcast.net) ()
[04:49:56] *** Quits: kitty1 (~kitty@096-039-147-043.res.spectrum.com) (Quit: WeeChat 3.4)
[04:50:53] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[04:51:18] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[04:56:13] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[04:56:35] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[04:56:40] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[05:05:52] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:06:53] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:36:33] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[05:36:58] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[05:47:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:50:50] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:10:36] *** Quits: jao (~jao@79.red-79-159-137.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[06:11:54] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[06:11:54] *** Joins: badkins (~badkins@136.56.92.199)
[06:12:20] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[06:13:00] *** Joins: jao (~jao@68.235.43.100)
[06:16:33] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[06:22:37] *** Joins: badkins (~badkins@136.56.92.199)
[06:23:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[06:27:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:30:46] *** Joins: badkins (~badkins@136.56.92.199)
[06:34:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:44:03] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:55:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:57:15] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[06:57:40] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[06:59:51] *** Joins: badkins (~badkins@136.56.92.199)
[07:04:43] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:14:55] *** Quits: jao (~jao@68.235.43.100) (Ping timeout: 256 seconds)
[07:15:46] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:16:48] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220211225827])
[07:18:46] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 272 seconds)
[07:37:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[07:39:10] *** Joins: aeth (~aeth@user/aeth)
[08:15:18] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[08:23:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:40:08] *** Quits: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[08:41:52] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[08:43:48] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[08:45:44] *** Joins: aeth (~aeth@user/aeth)
[08:47:35] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[08:47:59] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[08:53:19] *** Joins: Rue (~rue@2001-b011-1000-17d9-d616-1cce-b758-6ab8.dynamic-ip6.hinet.net)
[09:29:24] *** Joins: badkins (~badkins@136.56.92.199)
[09:33:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:42:55] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[09:43:19] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[09:48:15] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[09:48:40] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[10:16:13] *** Joins: Darkcoal (~user@user/Darkcoal)
[10:18:22] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:120e:485c:a94b:d581)
[10:21:17] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 240 seconds)
[10:26:27] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:120e:485c:a94b:d581) (Quit: Konversation terminated!)
[10:37:31] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 256 seconds)
[10:44:22] *** Quits: klovett (~klovett@107.127.17.177) (Quit: ZZZzzz‚Ä¶)
[10:45:00] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[10:45:26] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:01:03] *** Joins: rgherdt (~rgherdt@83.236.18.121)
[11:09:52] *** Quits: Zipheir (~wcm@98.4.178.27) (Quit: Eadem mutata resurgo.)
[11:19:52] <amazigh> hello schemers :)
[11:19:59] <sham1> Morning
[11:20:36] <amazigh> a little bit a latin to start the day: Eadem mutata resurgo. 
[11:20:41] <amazigh> taken from Zipheir quit message
[11:20:58] *** Joins: Avichi (~Avichi@77-173-127-151.fixed.kpn.net)
[11:23:30] <dpk> (get 'call-with-values 'scheme-indent-function) => 1
[11:23:34] <dpk> go home, Emacs, you're drunk
[11:23:49] <sham1> Indented by one space I take it
[11:25:16] <dpk> no, means it thinks call-with-values is effectively a macro with one fixed argument and then a body
[11:25:31] <sham1> hm
[11:25:47] <dpk> the scheme-indent-function property for lambda is 1, for example, because it has one fixed argument (the formals list) then the procedure body
[11:25:59] <amazigh> that yields the correct indentation
[11:26:32] <amazigh> what would you prefer?
[11:26:59] <dpk> for what? lambda? i know it's right for lambda, but for call-with-values it should be 0 or nil (treat this as a procedure, not a macro) as far as i'm concerned
[11:27:16] *** Joins: silasfox (~sbv@p200300cec712b400b45e618d2b7703c5.dip0.t-ipconnect.de)
[11:30:19] *** Joins: badkins (~badkins@136.56.92.199)
[11:31:07] <dpk> in scheme.el it has the reassuringly vague comment ‚Äò; r5rs?‚Äô after the line which gives call-with-values this property
[11:35:01] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[11:35:53] *** Quits: Avichi (~Avichi@77-173-127-151.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:37:25] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[11:38:35] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[11:39:00] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[11:43:47] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[11:44:46] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[11:46:49] *** Joins: masoudd (~masoudd@user/masoudd)
[11:48:39] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[11:48:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:50:07] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[11:59:26] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[12:15:26] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[12:15:48] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[12:16:30] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:16:43] *** Joins: Avichi (~Avichi@77-173-127-151.fixed.kpn.net)
[12:18:06] *** Joins: Darkcoal (~user@user/Darkcoal)
[12:25:40] *** Joins: rgherdt_ (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[12:28:28] *** Quits: rgherdt (~rgherdt@83.236.18.121) (Ping timeout: 272 seconds)
[12:33:55] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[12:34:20] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[12:37:05] *** Quits: Avichi (~Avichi@77-173-127-151.fixed.kpn.net) (Ping timeout: 256 seconds)
[12:40:57] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[12:43:05] *** Joins: Darkcoal (~user@user/Darkcoal)
[12:44:15] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[12:44:18] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 272 seconds)
[12:44:39] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[12:50:00] *** Quits: rgherdt_ (~rgherdt@port-92-193-217-5.dynamic.as20676.net) (Quit: Leaving)
[12:50:12] *** Joins: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[13:04:14] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:04:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:09:10] *** Joins: civodul (~user@guix/contributor/civodul)
[13:16:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[13:16:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:16:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[13:17:10] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[13:28:39] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[13:30:40] *** Joins: Darkcoal (~user@user/Darkcoal)
[13:31:19] *** Joins: badkins (~badkins@136.56.92.199)
[13:32:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:34:35] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[13:34:58] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[13:35:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[13:38:01] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:38:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:39:55] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[13:40:18] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[13:43:25] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Quit: Bridge terminating on SIGTERM)
[13:43:29] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (Quit: Bridge terminating on SIGTERM)
[13:43:29] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Bridge terminating on SIGTERM)
[13:43:31] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Bridge terminating on SIGTERM)
[13:44:42] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[13:46:17] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[13:46:52] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[13:47:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:48:57] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[13:50:00] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[13:50:00] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[13:50:00] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[13:50:00] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[13:50:00] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[13:50:00] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[13:50:00] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[13:50:00] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[13:50:13] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[13:50:13] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[13:51:16] *** Joins: Darkcoal (~user@user/Darkcoal)
[13:51:33] *** Joins: karlosz (~karlosz@47.151.136.69)
[13:52:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:54:17] *** Joins: seninha (~chatzilla@user/seninha)
[13:54:54] <dpk> okay, i think i've found a bug in Chibi's SRFI 128 implementation, sigh
[13:54:55] *** Joins: ManDay (~manday@user/manday)
[13:55:12] <dpk> i've constructed a comparator where <? and =? both return #f for a particular object, but <=? returns #t
[13:55:16] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[13:55:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:55:41] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[13:55:45] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[13:56:01] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[13:59:03] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[13:59:27] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:03:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[14:11:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:19:23] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:19:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[14:19:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:20:34] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[14:24:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[14:25:20] <dpk> oh, no, it was a bug in my code
[14:36:29] *** Joins: akarle (~akarle@user/akarle)
[14:40:36] *** Quits: akarle (~akarle@user/akarle) (Ping timeout: 240 seconds)
[14:55:36] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[14:56:02] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[15:00:57] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[15:01:19] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[15:03:10] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[15:05:18] *** Joins: opfez (~opfez@user/opfez)
[15:06:12] <opfez> hi! what's the difference between using equal? and string=? for string comparisons? as far as i can tell, they give the same results, but equal? is more generic (since it works on other types as well)
[15:08:39] <sham1> Yeah, string=? is monomoprhic
[15:11:17] <sham1> "The equal? procedure, when applied to pairs, vectors, strings and bytevectors, recursively compares them, returning #t when the unfoldings of its arguments into (possibly infinite) trees are equal (in the sense of equal?) as ordered trees, and #f otherwise."
[15:11:41] <sham1> And for strings, the recursion would be comparing the characters of both strings by equal? which would compare them like eqv?
[15:11:58] <sham1> Meanwhile string=?
[15:12:21] <sham1> "Returns #t if all the strings are the same length and contan exactly the same characters in the same positions, otherwise returns #f."
[15:12:38] <sham1> So the big difference is that equal? is binary while string=? is n-ary
[15:14:53] <opfez> interesting, is there any reason why equal? is not n-ary?
[15:15:03] <opfez> because, apart from that, they seem to function identically on strings
[15:21:00] <wasamasa> honestly, I'd just stick to using equal? (complex values), eqv? (simple values) and = (numbers)
[15:21:15] <wasamasa> more specific predicates are rarely worth it
[15:21:37] <wasamasa> for example in the rare case you want pointer identity, eq? is the thing to use
[15:21:49] <wasamasa> or a case-insensitive string comparator
[15:22:10] <wasamasa> or a type-specific comparator for use in a hash table or something
[15:26:17] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[15:26:39] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[15:28:19] <edgar-rft> string=? signals an error if the argument is not a string while equal? does not - sometimes type-checking can be desired
[15:29:19] <sham1> Yeah. It also helps with type inference because you know that (string=? a b) both a and b will be strings after this point
[15:43:37] *** Quits: ManDay (~manday@user/manday) (Quit: WeeChat 3.3)
[15:48:35] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:9945:b7ba:a6f7:2a93)
[15:53:05] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:01:00] *** Joins: tfb (~tfb@88.98.95.237)
[16:07:00] *** Joins: Guest22 (~Guest22@2001:6b0:1:1041:2a6d:a48d:707d:37df)
[16:16:37] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[16:17:02] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[16:17:14] *** Joins: notzmv (~zmv@user/notzmv)
[16:19:56] *** Joins: epony (epony@user/epony)
[16:21:15] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[16:22:24] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:23:22] *** Joins: Darkcoal (~user@user/Darkcoal)
[16:26:01] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[16:33:48] *** Quits: Guest22 (~Guest22@2001:6b0:1:1041:2a6d:a48d:707d:37df) (Quit: Client closed)
[16:34:31] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[17:00:53] *** Joins: frost (~frost@user/frost)
[17:06:35] *** Joins: sheb (~sheb@31.223.228.71)
[17:07:18] *** Quits: sheb (~sheb@31.223.228.71) (Remote host closed the connection)
[17:09:00] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e029:79e4:6493:91cc)
[17:09:00] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e029:79e4:6493:91cc) (Changing host)
[17:09:00] *** Joins: skapata (~Skapata@user/skapata)
[17:19:47] *** Quits: rx80 (~quassel@user/rx80) ()
[17:22:00] *** Joins: rx80 (~quassel@user/rx80)
[17:34:03] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:3be0:d6f6:50af:de87)
[17:45:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:46:57] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[17:47:22] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[17:49:02] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[17:52:02] *** Joins: badkins (~badkins@136.56.92.199)
[17:52:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:58:37] *** Joins: klovett (~klovett@107.127.17.177)
[18:02:41] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[18:08:24] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:3be0:d6f6:50af:de87) (Quit: Konversation terminated!)
[18:12:17] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[18:12:42] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[18:12:51] *** Quits: seninha (~chatzilla@user/seninha) (Ping timeout: 245 seconds)
[18:19:53] *** Joins: seninha (~chatzilla@user/seninha)
[18:29:20] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[18:33:35] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[18:35:48] *** Quits: X-Scale (~ARM@92.250.101.104) (Ping timeout: 272 seconds)
[18:35:49] *** X-Scale` is now known as X-Scale
[18:39:51] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[18:45:38] *** Joins: X-Scale` (~ARM@31.22.160.17)
[18:47:12] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[18:47:13] *** X-Scale` is now known as X-Scale
[18:53:48] *** Joins: jao (~jao@68.235.43.172)
[18:56:04] *** Joins: akarle (~akarle@user/akarle)
[19:00:13] *** Quits: duncanm (sid287146@id-287146.tinside.irccloud.com) (Ping timeout: 240 seconds)
[19:00:16] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (Read error: No route to host)
[19:00:26] *** Joins: Balooga (sid407689@id-407689.lymington.irccloud.com)
[19:01:08] *** Joins: duncanm (sid287146@id-287146.tinside.irccloud.com)
[19:01:09] <rudybot> la la la
[19:05:07] <tokie> i am implementing call/cc today
[19:05:55] <LeoNerd> Good luck
[19:06:56] <tokie> i think it's really straight forward, actually
[19:07:35] <tokie> it's dynamic-wind that confuses me
[19:07:42] <LeoNerd> call/ec is quite easy. Some of the thorny twists about more generic call/cc will bite you
[19:07:54] <LeoNerd> Such as recursion, or multiple activations
[19:08:06] <tokie> well, i have a VM which makes it a lot easier
[19:08:21] <sham1> Well you'd need to capture your activation records when doing a call/cc
[19:08:30] <sham1> And that's not difficult but it is annoying
[19:09:48] <LeoNerd> I think in some ways Scheme's call/cc feels a lot like the Goldbach Conjecture. At first glance it looks tantalisingly simple.. "surely, you solve it by just doing er... uhmm.. well, maybe.. uhmm.." and before you know it you've been sucked in for the past 5 years of research and not made any headway
[19:10:14] <ecraven> dpk: I like #‚àÖ ;) but a very good call, I've written a bunch of ffi functions and always struggled with how to correctly map "null"
[19:11:07] <sham1> Might be better to just go with SRFI 226 semantics for call/cc than the actually "compliant" semantics because the latter just aren't that good
[19:11:15] <tokie> sham1: yeah, i have made that easy to do - if not a little expensive depending on the depth of the stack
[19:11:28] *** Joins: badkins (~badkins@136.56.92.199)
[19:14:14] <LeoNerd> Ohwait I don't mean Goldbach; I mean the one about starting from any integer and doing that iterated process that probably ends ... 4, 2, 1  and suggesting that starting from any integer leads to 1. What's that one called?
[19:14:51] <sham1> Collatz conjecture
[19:14:58] <tokie> collatz
[19:15:00] <tokie> yeah :D
[19:15:09] <LeoNerd> Collatz! That's the one
[19:15:24] <LeoNerd> Imean, Goldbach still fits my original quote, but Collatz is the one I was actually thinking of
[19:15:40] <tokie> i feel like call/cc is one of those things where it falls on opposite ends of the spectrum depending on how you've implemented the language
[19:15:52] <tokie> but TCO is kinda like that too
[19:16:51] *** Quits: zwr (~zwr@2804:d45:b966:fb00:2d7c:db02:239b:d206) (Ping timeout: 252 seconds)
[19:17:20] *** Joins: zwr (~zwr@2804:d45:b966:fb00:b63f:5fd6:7c74:2962)
[19:17:42] <LeoNerd> Mmm.. my toy impl was atop perl5 which already has tailcalls, so implementing that part was easy :)
[19:25:35] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (Remote host closed the connection)
[19:27:53] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[19:45:59] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[19:47:05] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[19:48:03] *** Quits: duncanm (sid287146@id-287146.tinside.irccloud.com) (Read error: Connection reset by peer)
[19:48:12] *** Joins: duncanm (sid287146@id-287146.tinside.irccloud.com)
[19:48:12] <rudybot> la la la
[19:52:37] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[19:53:02] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[19:59:23] <jcowan> opfez: Eq?, eqv?, and equal? are binary because they have to work on all objects, and it is not clear what the interpretation of (equal? x y z) is.  Does it mean that x and y are equal? and x and z are equal?, or one of the permutations of that?
[20:02:26] *** Quits: aeka (~aeka@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[20:03:43] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[20:06:02] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:07:14] *** Joins: aeka (~aeka@user/hiruji)
[20:08:37] <tokie> jcowan: it means all of them are equal
[20:09:16] <tokie> but it doesn't need to check all permutations to ensure that. any proper implementation of equal? would do the right thing
[20:10:13] <jcowan> I guess if equal? is *defined* to always be an equivalence function, then yes.
[20:12:12] <gwatt> what else would it be?
[20:13:40] <jcowan> In RnRS it always is, but in a Scheme where equal? is generic, it ain't necessarily so.
[20:14:49] <tokie> oh yeah, RnRS only defines eq/eqv/equal for 2 arguments
[20:15:21] *** Joins: badkins (~badkins@136.56.92.199)
[20:19:23] <sham1> Well if the user makes it not be an equivalence function then that's their problem
[20:20:21] <gwatt> I think a situation where (and (equal? a b) (equal? b c)) should also imply (equal? a c), and am struggling to think of a situation where that not being the case is desired
[20:20:39] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:9945:b7ba:a6f7:2a93) (Quit: Client closed)
[20:22:06] <pinoaffe> gwatt: imo transitivity of equal? is a great good
[20:22:57] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[20:23:22] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[20:24:17] <pinoaffe> in languages with more than one falsy value, there tends to be a non-transitive equality check but I don't think that would make sense in scheme
[20:30:36] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:7d94:836:ad6f:8005)
[20:32:45] <mdhughes> They might differ by epsilon each from a central value, like if epsilon was 0.01, (equal? 3.09 3.10) (equal? 3.10 3.11) would be true, (equal? 3.09 3.11) would be false.
[20:34:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:34:32] <pinoaffe> ah yes, that makes sense
[20:44:12] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[20:48:17] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[20:48:42] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[20:53:26] *** Quits: turlando (~turlando@user/turlando) (Quit: turlando)
[20:55:00] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:56:42] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[20:56:42] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[20:56:42] *** Joins: turlando (~turlando@user/turlando)
[21:24:18] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[21:28:59] *** Joins: apg (~apg@97-120-104-164.ptld.qwest.net)
[21:29:38] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:2d85:d178:746e:2777)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:31:16] *** Joins: ns12 (~ns12@user/ns12)
[21:35:59] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:7d94:836:ad6f:8005) (Ping timeout: 256 seconds)
[21:43:37] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[21:44:00] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[21:51:05] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:03:49] <amazigh> +1 gwatt 
[22:06:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[22:12:39] <mdhughes> Also if you compare two finger trees filled with the alphabet, before lazy evaluation it'll have 9 or 10 entries, after it'll have 26. Maybe.
[22:17:24] *** Quits: jao (~jao@68.235.43.172) (Ping timeout: 240 seconds)
[22:19:31] *** Joins: notzmv (~zmv@user/notzmv)
[22:20:52] <amazigh> promise have no equivalence predicate?
[22:21:27] <amazigh> (lazy foobar) is never equivalent to (lazy foobar)
[22:21:53] <amazigh> like (lambda () (+ 40 2)) is never equivalent to (lambda () (+ 40 2))
[22:22:32] <gwatt> well, they can be.
[22:22:37] <gwatt> but unlikely
[22:24:03] <amazigh> now that I think about it maybe gambit can do it
[22:35:50] <amazigh> I got a brillant idea: I will not try to reach the stars, and settle on the moon
[22:35:54] <amazigh> :)
[22:36:25] <amazigh> more seriously, I looked back at the plan I made last year about the search engine, it was not bad, actually it was even good.
[22:36:50] <amazigh> I even made some progress.
[22:37:22] <amazigh> even if I can't make a demo
[22:37:47] <wasamasa> lol
[22:37:50] <amazigh> I will restart and try to be more humble and less perfectionist
[22:37:59] <wasamasa> you've read about how google's search results are getting worse
[22:38:05] <amazigh> I told you!
[22:38:18] <amazigh> It is been almost a year I noticed
[22:38:23] <wasamasa> https://dkb.io/post/google-search-is-dying
[22:38:33] <wasamasa> not to be confused with dpk
[22:39:39] <amazigh> ^^
[22:40:07] <wasamasa> > Google claims the exact matching feature is merely unintuitive, not broken
[22:42:28] <amazigh> exact match is not all, you need a scoring strategy
[22:42:51] <amazigh> idk, something synonyms help ?!
[22:42:53] <amazigh> no?
[22:42:57] <wasamasa> go look at the actual examples, lol
[22:44:49] <amazigh> soon on your screen https://google.killedbygoogle.com/
[22:45:46] <amazigh> I mean exact match even with tf-idf scoring is broken, imo you need to curate the index
[22:45:52] <amazigh> that merely speculations.
[22:46:09] <amazigh> or reddit-all-the-things.
[22:51:17] *** Joins: badkins (~badkins@136.56.92.199)
[22:53:58] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[22:54:23] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[22:55:37] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:00:45] *** Parts: tatsumaru (~tatsumaru@82.147.131.155) ()
[23:10:55] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:11:24] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:14:55] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:31:21] *** Joins: jao (~jao@static-68-235-44-54.cust.tzulo.com)
[23:33:22] *** Joins: badkins (~badkins@136.56.92.199)
[23:37:32] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[23:44:18] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[23:44:43] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[23:52:46] *** Joins: aeth_ (~aeth@user/aeth)
[23:52:47] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:52:50] *** aeth_ is now known as aeth
[23:55:36] <lagash> amazigh: https://privacy.killedbygoogle.com/ should be up there..
[23:56:54] <amazigh> true
[23:57:06] <amazigh> enjoy the global village!
[23:58:49] <amazigh> where your spying uncle is a gigabyte model supervised by ivy league brightest minds
[23:59:33] <amazigh> "hey wiretape, where are my keys?" lol
