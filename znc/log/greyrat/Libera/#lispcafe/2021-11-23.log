[00:01:23] <hayley> Well, clearly they don't, because some can't write a fast DFA simulator. /me is kidding...
[00:01:30] <selwyn> who mods the modmen?
[00:01:45] <White_Flame> the project owners.  mods are a deferred position
[00:02:39] <White_Flame> (I get the reference, but it does have an easy answer ;) )
[00:03:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:04:23] <hayley> Read The Unique and Its Property?
[00:04:31] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[00:07:53] <gilberth> The issue I have with trendy "code of conducts" is that (1) borders are drawn where there should be none (2) When person A calls what person B contributed silly on technical groups, the blame is quick that person A would harass person B just because it is felt that both are on different sides of a border drawn for just for the purpose of that blame.
[00:08:49] <White_Flame> moderators are given a position to judge.  policy seeks to eliminate judgement
[00:08:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:09:17] <White_Flame> and policy cannot encompass all interpersonal issues
[00:09:37] <White_Flame> and generally does what it does poorly, when it is brought in for an individual answer to all interpersonal problems
[00:09:46] <gilberth> Hence it's a name calling defense mechanism. I call your code "silly", you don't need to argue anymore, all you need to do is to define a border between us and blame me being on the other side and harassing all not in my group [which you defined].
[00:10:57] <White_Flame> but all the silence on the actual issues really just reeks of elitism
[00:13:30] <gilberth> And this is against my spirit. All that would matter to me are technical merits alone.
[00:13:53] <hayley> https://www.youtube.com/watch?v=pUyLhxU5AwA
[00:13:53] -ixelp- The Clash - Midnight Log (Remastered) [Official Audio] - YouTube
[00:14:08] <White_Flame> gilberth: I'd tend to agree, but the ability to "be on a team" with others doing tech is also basically a skill
[00:14:26] <White_Flame> the rare ability to actually do tech without a bunch of other crap getting in the way
[00:15:28] <gilberth> Perhaps and I personally am probably not a very good at being a team member.
[00:16:38] <White_Flame> I don't see any particular indication of that, but who knows
[00:19:04] <gilberth> Frankly, I don't know either. Has been a long time since I actually have been in a team of sorts. /me shrugs
[00:20:55] <White_Flame> personally, I'd only ever do small teams
[00:21:42] <White_Flame> I simply cannot abide corporate middle managing and non-project-goal-oriented mucking about with group infrastructure
[00:21:58] <selwyn> my issue with this kind of thing is that mod teams attract 'cop' personalities
[00:22:48] <White_Flame> that's why leadership runs mods
[00:22:54] <selwyn> just like their hr department equivalents
[00:23:07] <White_Flame> if the mods fail, the leadership can clean house.  If the leadership fails, then well the community is lost regardless.  Time to fork
[00:23:19] <selwyn> i see
[00:25:00] <selwyn> i suspect that open source in general tends to contain big personalities because they can achieve a hell of a lot with their drive, compared to other fields at least
[00:25:23] <selwyn> but that admittedly does lead to problems, so i do concede the need for some kind of control
[00:25:26] <White_Flame> eh, the corporate world tends to contain lots of big personalities, too
[00:25:32] <selwyn> for example, consider how much rms did for open source
[00:25:51] <White_Flame> and too many people use the size of rules/budgets/teams/etc to prop up their own ego, to the detriment of the project
[00:25:51] <selwyn> yet if it wasn't for his weirdness, it might have gone mainstream in the 2000s and the world would be much better now
[00:26:11] <White_Flame> ideological leaders are all by definition extremists
[00:29:07] <White_Flame> also, that was the time where people were starting to make big money with computers, so no I don't think it woudl have caught on with a more personable leader
[00:29:34] *** Quits: Inline (~Inline@2a02:908:1252:7a80:1d47:7f49:468:ba96) (Quit: Leaving)
[00:29:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:37:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:41:15] *** Joins: Inline (~Inline@2a02:908:1252:7a80:d3da:57e0:913c:b7aa)
[00:48:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:49:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:53:47] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:58:33] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[01:15:47] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[01:16:51] *** Quits: X-Scale (~ARM@31.22.202.54) (Ping timeout: 250 seconds)
[01:17:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:18:24] *** X-Scale` is now known as X-Scale
[01:20:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:38:58] <selwyn> https://www.newscientist.com/article/2298455-uk-visa-scheme-for-prize-winning-scientists-receives-no-applications/
[01:38:58] -ixelp- Prestigious prize visa: UK Global Talent fast-track scheme for scientists hasn’t received any applications since it laun [...]
[01:39:02] <selwyn> lol
[01:44:03] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[01:46:04] <Gnuxie> goddamn
[01:50:35] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:13:44] <hayley> "The Rust fandom is dying, repost this image to make it die faster"
[02:14:17] <White_Flame> heh
[02:14:29] * hayley needs to think of an image
[02:14:43] <White_Flame> a rusted-out computer?
[02:14:52] <White_Flame> (or is that rust growing?)
[02:15:09] <hayley> Rust is apparently the fungus, not oxidised metal. Weird.
[02:17:07] <sham1> Was anyone surprised
[02:17:19] <White_Flame> hayley: not according to wikipedia, at least
[02:17:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[02:17:27] <hayley> One sec.
[02:17:47] <hayley> "The language grew out of a personal project begun in 2006 by Mozilla employee Graydon Hoare.[13] Hoare has stated that the project was possibly named after rust fungi and that the name is also a substring of "robust"."
[02:18:01] <hayley> https://www.reddit.com/r/rust/comments/27jvdt/internet_archaeology_the_definitive_endall_source/
[02:18:03] -ixelp- Internet archaeology: the definitive, end-all source for why Rust is named "Rust" : rust
[02:18:48] <hayley> Given that the game of Rust is to make shared memory safe, I dun gedit.
[02:19:12] *** Joins: aeth (~aeth@user/aeth)
[02:19:26] * hayley uploaded an image: (251KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ZbaCmsoaHxjDLAgAjYiEXTvG/rust-fandom.png >
[02:20:45] <White_Flame> apparently rust (fungus) has nothing in common with iron oxide
[02:28:05] <selwyn> hayley: perhaps you can emigrate to the uk on that talent visa
[02:28:08] <selwyn> live the dream
[02:28:22] <hayley> selwyn: why do I want to go to TERF island
[02:29:24] * hayley waits for an email from Discord
[02:29:58] <hayley> My friend got a response w.r.t account recovery. "Your account could only be compromised if some malicious program stole access tokens." Well, it did.
[02:30:18] <selwyn> i made a discord bot with abcl it was quite fun
[02:30:59] <hayley> I made a bot which sent the authors of that token stealer some furry porn, cause they used Discord webhooks to collect them. Ironic.
[02:31:48] <selwyn> a still from the futurama episode where they go to dr zoidbergs home planet for the dying crabs picture?
[02:32:05] <hayley> Absolutely.
[02:53:03] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[02:58:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[03:00:00] *** Joins: aeth (~aeth@user/aeth)
[03:33:41] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[03:35:27] *** Joins: aeth (~aeth@user/aeth)
[04:11:19] *** Joins: Catie (~user@user/catie)
[04:20:41] <gilberth> Is there an offline version of sth like MathJax? Perhaps one rendering according to well known standard font metrics and giving me some SVG I could just include?
[04:21:39] <hayley> dvisvgm?
[04:22:11] <gilberth> Hmm. What does it do wrt fonts?
[04:24:15] <hayley> https://www.youtube.com/watch?v=JlGZN74iaZ4
[04:24:16] -ixelp- La Dolce Vita - YouTube
[04:24:28] <hayley> No idea, but apparently I already have it installed.
[04:25:42] <hayley> It seems to embed fonts into the SVG file? idk
[04:26:39] <gilberth> I am looking at the examples on their page. I seems so. What I get is just an image. I can't cut and paste the text.
[04:27:30] <hayley> Selection is quite broken here.
[04:28:26] <gilberth> And I see no examples of embedding TeX right in otherwise HTML text. Perhaps I have a closer look or I may roll my own.
[04:28:57] <hayley> Window.saveDOMAndDie();
[04:29:27] <gilberth> Perhaps.
[04:30:58] <gilberth> I'll play with that another time. My idea was to use the standard fonts, which stick to standard PS metrics and just render with that. TeX itself adapts quite nicely to what ever font metrics it has. Heck, even using monospace works with math mode. :-)
[04:31:19] <gilberth> hayley: Thanks for the pointer.
[04:35:22] <gilberth> A pity though that MathML is not universally supported.
[04:37:28] <hayley> Indeed.
[04:38:26] <hayley> The message I am getting so far from these emails is: spamming the endpoint used by malware writers with furry porn is more effective than contacting the security departments of two large companies that host them.
[04:39:26] <gilberth> Yes, dear. What did you expect? You could mail some tech online magazine.
[04:48:04] * hayley rather goes to try to fit lyrics to rhythms.
[04:49:27] <gilberth> Writing a song?
[04:49:45] <hayley> Getting close to finishing an album. I just need to add the words.
[04:56:15] <gilberth> hayley: What was your RE fork bomb again?
[04:56:42] <hayley> ((lookbehind-noise A*)A)*
[04:57:01] <hayley> (Substitute lookbehind-noise with the symbols for it, I forgot)
[04:57:24] <gilberth> ok. Thanks.
[05:06:32] <hayley> Is there a trick to not fork bombing and generating a DFA?
[05:07:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[05:09:06] *** Joins: aeth (~aeth@user/aeth)
[05:11:34] <gilberth> Well, isn't your RE the same as just a*? Am I missing sth?
[05:11:47] <hayley> Yes, how do you simplify though?
[05:14:04] <gilberth> With magic, it seems. What I have isn't working quite right yet.
[05:24:26] <gilberth> Nah, I get garbage. Back to the drawing board, I should be more patient and think before I hack.
[05:26:52] <gilberth> This indeed is a night mare, milady. We must be crazy or turn so.
[05:27:53] <hayley> Is 43 minutes enough for an album?
[05:28:24] <gilberth> I'd say so. But I am not qualified to answer that.
[05:28:41] <Catie> Yeah, it is
[05:29:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:31:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[05:32:12] * hayley decides at this rate, she better just add one more song per album.
[05:32:19] <moon-child> http://regex-and-pe-to-dfa.com/ this looks interesting
[05:32:19] -ixelp- REwLAViz Regular Expression with Lookahead to DFA
[05:35:12] <hayley> Well, we want lookbehind rather than lookahead, but interesting still.
[05:35:15] <gilberth> Ah. Thompson again.
[05:36:09] <hayley> ((?=A*)A)* does work like A* though.
[05:36:13] <moon-child> hayley: yeah.  Though when I do the analogous thing with lookahead it generates A*
[05:36:14] <moon-child> yeah
[05:38:28] <hayley> "Boolean finite automaton" is a new term though.
[05:44:19] <gilberth> I heard that somewhen, somewhere.
[05:51:51] * gilberth extents his RE parser to accept (?=....).
[05:52:17] <gilberth> What's the syntax for lookbehind?
[05:52:48] <hayley> (?<=bla)
[05:53:41] <gilberth> Thanks.
[05:56:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[05:57:03] <gilberth> When Boolean FAs are what I believe they are, namely NFAs handling boolean operations, this makes sense as key to my algorithm is the realization that (?=r)s is the same as r ∧ s.
[05:58:02] *** Joins: aeth (~aeth@user/aeth)
[05:59:16] <gilberth> And they also have negative lookahead, which is just the complement. I have both operations.
[06:00:41] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 250 seconds)
[06:02:32] <hayley> https://www.youtube.com/watch?v=P22TEf4pZZs
[06:02:33] -ixelp- The Smiths - William, It Was Really Nothing - YouTube
[06:08:44] * hayley looks for her bit diddling string test, and comes across sentiment-ANALysis.lisp [capitalisation left as is]
[06:10:32] <hayley> Oh well, if I want to do Boyer-Moore-Horspool first then I need branches.
[06:11:34] <gilberth> You still want the fastest grep, don't you?
[06:12:42] <hayley> "fastest" would need SIMD, though I need something portable too.
[06:12:44] <hayley> But yes.
[06:15:02] <gilberth> Don't you rather want a pony?
[06:15:42] <hayley> Gnuxie is right there.
[06:16:04] <gilberth> ok, then.
[06:16:47] <hayley> There is also Aho-Corasick for multiple substrings, but it generates a DFA and I already have a damn DFA!
[06:17:17] <gilberth> lol
[06:18:15] <hayley> Hm, does Boyer-Moore-Horspool actually provide the best-case O(n/m) that Boyer-Moore has?
[06:18:47] <gilberth> Do I look like a grep-addict?
[06:19:17] <hayley> I need grep to find uses of strcpy in my code.
[06:20:03] <gilberth> Why don't you look at the object file? scnr.
[06:21:01] <gilberth> Trouble is: grep won't tell you.
[06:21:36] <hayley> Did they hack grep already?
[06:21:56] <gilberth> Who is they?
[06:22:19] <hayley> Whoever hacked my code with strcpy.
[06:25:27] <gilberth> #define cat0(x,y) x##y \n #define cat(x,y) cat0(x,y) \n #define catch_me_if_you_can cat(mouse,trap) \n #define mouse st \n #define trap rcpy \n catch_me_if_you_can(buf,blah);
[06:25:35] <gilberth> What now?
[06:26:31] * hayley is joking about "static analysis" used in university. No need to be realistic.
[06:26:37] <moon-child> gilberth: cpp go brr
[06:26:51] <gilberth> You mean the cat dance?
[06:26:59] <moon-child> yeah
[06:27:02] <moon-child> pipe through cpp, then grep
[06:27:03] <moon-child> buut
[06:27:24] <gilberth> Try cc -E
[06:27:29] <moon-child> yeah, same thing
[06:27:34] <moon-child> const char x[] = {'s', 't', 'r', 0, 'p', 'y', 0}; x[3] = 'c'; dlsym(libc, x)
[06:27:44] <moon-child> now even analyzing the binary won't do anything for you!
[06:27:58] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/aLavdiOEITgqQERmVnVYCQuq/bruhcha.jpg >
[06:28:04] <gilberth> Encrypt with xor.
[06:28:28] <hayley> I could send you the payload code I was reverse engineering yesterday, and you all would weep.
[06:28:36] <gilberth> Sad, that I know the cat dance by heart. Funny cpp semantics.
[06:28:37] * hayley posted a file: (31KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/GHqkcqClufRfVxtmLqNVbIot/payload-shite.js >
[06:28:55] <moon-child> gilberth: strfry(3)
[06:29:06] <hayley> I really want a program to do the beta-reduction/evaluation dance for me. Shouldn't be impossible.
[06:29:37] <hayley> Most JS obfuscators are remarkably dumb with how they obfuscate. Using a string table and decrypting it is new, but still can be isolated and evaluated in a JS engine.
[06:29:43] <gilberth> moon-child: No manual entry for strfry
[06:30:01] <moon-child> linux-exclusive
[06:30:06] <gilberth> hayley: I would at least alpha convert.
[06:30:08] <moon-child> https://man7.org/linux/man-pages/man3/strfry.3.html
[06:30:12] * gilberth switches machine.
[06:30:59] * gilberth reads memfrob(3)
[06:31:10] <gilberth> Is that meant serious?
[06:44:51] <gilberth> Anyhow, pretty nifty idea to show his algorithm online. /me contemplates sth similar.
[06:50:29] * hayley wonders if derivatives of REs imply that there are integrals too.
[06:52:21] <gilberth> I always viewed that as more a division than a derivative.
[06:53:32] <gilberth> I have no idea why it is called a derivative.
[07:01:26] <hayley> d/dx a* or smth
[07:03:03] <White_Flame> right, the integral of f(x) is just as much a derived function as well as the "derivative"
[07:03:40] <White_Flame> I assume it's just that "derivatives" came first
[07:30:23] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[07:32:15] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[07:43:08] *** Joins: notzmv (~zmv@user/notzmv)
[08:09:35] <gilberth> moon-child: error: assignment of read-only location ‘x[3]’. However, no need to obfuscate the string as gcc does it for you. <https://termbin.com/n2ez>.
[08:10:05] <moon-child> giblwell
[08:10:07] <moon-child> gah
[08:10:16] <moon-child> gilberth: well, i guess that's what happens when you write const :P
[08:10:19] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:10:51] <dave0> maw
[08:10:58] <moon-child> maw
[08:11:05] <gilberth> Hello dave0!
[08:11:34] <dave0> maw moon-child, gilberth !
[08:11:59] <gilberth> moon-child: Have you watched what the compiler does? I wonder why it insists on putting that string onto the stack.
[08:12:33] * gilberth sneaks for the space to claim it without being noticed.
[08:12:40] <moon-child> gilberth: just a guess, look what happens if you make foo 'static'
[08:13:11] <moon-child> basically, functions have to be reentrant.  dlsym could call back into foo, in which case it would get another copy of the string.  And semantically, they have to have different addresses
[08:13:36] <moon-child> but if foo is static then it has a guarantee that will never happen, so nobody will be able to observe that the address is always the same
[08:13:39] <gilberth> It ends up in the text segment as it must.
[08:14:31] <gilberth> moon-child: dlsym could remember that address. In theory.
[08:14:44] <moon-child> right, exactly
[08:15:17] <gilberth> Which is blurry with strings as same strings may be share the same address.
[08:16:17] <gilberth> Otherwise it is a legit approach to have a unique address as a token or sth.
[08:16:18] <moon-child> http://ix.io/3FPI
[08:16:43] <moon-child> gilberth: string literals can be coalesced but automatic variables cannot
[08:17:11] <moon-child> so if you said instead const char *x = "strcpy", it would be fine to store it statically, but const char x[] you cannot
[08:17:41] <gilberth> ok
[08:18:50] <gilberth> Is it specified that I get a new address for 'x' with the 'auto' storage class in case of reentry?
[08:18:59] <moon-child> I think so
[08:19:43] <hayley> > Our motto: "builds.shipilev.net — still more secure than npm install"
[08:20:10] <gilberth> Really? I am a bit curious, as my B Ersatz with s-expression syntax implements 'auto' differently.
[08:21:19] <moon-child> how do you do it?
[08:21:29] <moon-child> in most cases you would have to allocate it separately anyway, because of mutability
[08:22:19] <gilberth> As stack relative addressing is really, really painful, local variables are at a fixed location, as if declared 'static'. On reentry I save the previous values on the stack and restore on leaving.
[08:23:29] <gilberth> This bulk save/restore is less expensive, and I do it on demand, that is no reentry => no stack save/restore.
[08:24:10] <gilberth> Playing with my 50s design made me realize why FORTRAN has no recursion and some thought that Algol would be impossible to implement. So I read.
[08:25:11] <gilberth> And I understood why my Turbo Pascal for the 8080 has a compiler switch to make it generate functions that could be reentered. It was off by default.
[08:25:16] <moon-child> 'stack relative addressing is painful'  it is??
[08:25:59] <dave0> for a long time i didn't realize that call and return actually makes a hardware-accelerated stack data-structure
[08:26:22] <gilberth> moon-child: On this <http://clim.rocks/gilbert/b32p/isa.html> machine it is.
[08:27:01] <moon-child> right !
[08:27:57] <gilberth> A <- SP[3] would me lod sp : add =3 : ior =lod : sto .+1 : lod 0
[08:28:41] <White_Flame> (misspelled "addresss" in the word's bit fields)
[08:28:54] <hayley> https://www.youtube.com/watch?v=C8dqCQ2MHfQ
[08:28:54] -ixelp- Sparks - "When Do I Get To Sing 'My Way'"(official video) - YouTube
[08:29:11] <gilberth> Oh dear. Thanks, White_Flame.
[08:29:21] <moon-child> hmm, calling functions seems difficult too
[08:29:24] <moon-child> no JSR/CALL nor RET
[08:30:11] <gilberth> You use a Wheeler jump. You pass the return address in A.
[08:32:13] <White_Flame> and of course that needs its own reentrancy support as well
[08:32:18] <gilberth> Actually you pass the jump in A, like: lod =(jmp .+2) : jmp foo : ... Then the subroutine is like foo: sto done .... done: <return-will-be-placed-here>
[08:33:43] <gilberth> White_Flame: Yep, but you could see the return address as just another parameter. I mean architectures having a link register like ARM, work that way. The callee needs to save the link register, if it does further subroutine calls.
[08:35:19] <dave0> i managed a recursive function on gilberth's cpu
[08:35:26] <gilberth> However: How many routines are actually reentered? In my embedded software I wrote, actually none. At least not within a thread/process.
[08:36:01] <White_Flame> yep, for that scale of development, it should be an opt-in feature, that bugs if you call reentrantly without enabling it
[08:36:12] <White_Flame> for that particular function
[08:36:35] <moon-child> hmm.  If I were trying to do a really simple ISA, I would probably do completely stack-based
[08:36:56] <gilberth> I had a tool for stack usage analysis as I had no stack overflow check and was extremely tight on space. It would have told me about any reentry.
[08:37:07] <White_Flame> sure, but you need to process more instructions in a stack ISA than a register ISA to accomplish the same amount of work
[08:37:08] <moon-child> smaller instructions.  Skip a full address on almost everything.  And maybe if there's space do a couple of load/store stack-rel/global, but with very small offsets
[08:37:40] *** Joins: ln43 (~ln43@user/ln43)
[08:38:17] <gilberth> moon-child: Perhaps larger microcode. By design was intentionally trivial to implement and out of curiosity modeled after what the very first von-Neumann machines looked like ISA-wise.
[08:38:43] <gilberth> s/B/M  ;what is that with "b" and "m" with be^Wme?
[08:39:00] <White_Flame> sounds like you have a stuffy nose
[08:39:39] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:39:45] <gilberth> Thankfully I don't. Could be Corona otherwise.
[08:41:37] <gilberth> Anyhow, for an ISA I would always prefer a three-address ISA. With a stack based approach, for X=Y+Z, you would need four instructions: load Y, load Z, add, stash X. With a three-address ISA, it's just one instruction.
[08:42:23] <ln43> but why there is so much interest in the low level stuffs here around...?
[08:42:38] <gilberth> And you could load Y and Z simultaneously. Given that this are registers.
[08:43:19] <gilberth> ln43: Perhaps because it's fun?
[08:43:25] <ln43> ok, i think that living in taiwan everything could be possible
[08:43:31] <White_Flame> it's actually 4 instructions in a typical forth:  push y address, deref, push z address, deref, add, push x address, store
[08:43:37] <dave0> i think WebAssembly is the latest assembler thing
[08:43:37] <White_Flame> erm, 7 instructions
[08:43:52] <ln43> really dave0?
[08:44:00] <dave0> ooh maybe risc-v
[08:44:12] <dave0> ln43: yeah i can't think of any new ones for years
[08:44:27] <gilberth> White_Flame: Oh yes, instructions take no arguments at all?
[08:44:46] <ln43> ok... dave0, i should see a bit more to that maybe
[08:45:02] <White_Flame> LIT does, and that's basically how you get all literals/immediates
[08:46:25] <White_Flame> and iirc, when you define a variable in forth on the dictionary, evaluating the variable name pushes its address onto the stack (just like a LIT instruction if not exactly compiled a such), after which you do the @ or ! or whatever
[08:46:38] <White_Flame> plus, each of those evaluations tends to be a full "function call"
[08:46:38] <gilberth> Literals are always a pain in ISA design. They simply cannot be as wide as your instructions, which is a concern for strictly word oriented machines with each instruction being exactly one word.
[08:46:54] <ln43> and  are now the taiwan borders still closed for tourists?
[08:47:05] <dave0> forth encodes literals in the instruction stream
[08:47:37] <White_Flame> but yeah, forth is quite compact in source code, but the actual memory footprint can be large, and it does a ton of work for very menial things
[08:48:05] <gilberth> PS is like that too, instructions take no arguments. Or rather: The arguments come from the stack. Instruction stream is either literals or instructions.
[08:49:42] <gilberth> Playing with ISAs in fun though. You realize that what we have as registers is an optimization. The L0 cache so to speak.
[08:50:12] <White_Flame> many moder stack ISAs (like the JVM) do include a lot more parameter bytes for things, like loading/storing various types of variables/constants
[08:50:15] <White_Flame> *modern
[08:50:22] <gilberth> Older publications call a [main] memory word a "register", too.
[08:52:13] <gilberth> And for my primitive B32 design, you could just set aside a fixed number of memory locations, name them R0, R1, ... and write LOD R0 : ADD R1 : STO R2 for what would be ADD R2, R1, R0 in a three address code.
[08:52:27] <dave0> gilberth: https://esolangs.org/wiki/ByteByteJump
[08:53:37] <gilberth> Then, instead of having full words for an instruction, use one byte as there is enough room for those register addresses. => Three-address ISA.
[08:55:09] <gilberth> dave0: Oh yes! OISC is fun.
[08:55:22] <dave0> :-)
[08:55:53] <dave0> gilberth: ByteByteJump is the only esoteric thingy that i can get my head around :-)
[08:57:00] <gilberth> My favorite is toggle-jump-not-zero, because it won't me too slow actually. Not like DJNZ, which must be faced to enumerate all 2^n combinations of a word to just clear a word, or do a move.
[08:57:18] <gilberth> s/m/b/ ;dammit
[08:57:28] <White_Flame> huh, that bytebytejump actually seems fairly efficient
[08:58:04] <gilberth> With lookup tables, yes. That's cheating.
[08:58:15] <White_Flame> without an ALU, it's a fair requirement
[08:58:36] <gilberth> Is a NOT gate an ALU?
[08:59:02] <moon-child> 'I wrote an OISC.  The singular instructioon has three operands; the first says what operation to perform, the second gives the source operand for that operation, adn the third give the destination operand'
[08:59:02] <White_Flame> no
[08:59:17] <White_Flame> moon-child: heh
[09:00:32] <gilberth> I have a secret design for a machine having just one instruction and no program counter. The instruction is called DWIM.
[09:00:51] <White_Flame> must be quite a comprehensive design
[09:01:45] <gilberth> I need zero bits to encode that instruction, and no transistors either.
[09:02:56] <moon-child> ;o
[09:03:07] *** Quits: Inline (~Inline@2a02:908:1252:7a80:d3da:57e0:913c:b7aa) (Quit: Leaving)
[09:03:33] <White_Flame> I tried to implement DWIM, but all it did was HCF :-(
[09:04:17] <gilberth> Did you try using INTERLISP?
[09:04:35] <White_Flame> no, but I know one of those has a "DWIM" functionality
[09:04:41] <White_Flame> for autocorrect or something?
[09:05:30] <gilberth> Yes, it has. It would guess what symbol you misspelled. But what I read it would do more than that.
[09:06:08] <gilberth> And Interlisp has this structural editor.
[09:06:56] <gilberth> There is some simulator called "Medley" IIRC which simulates some XEROC (IIRC) and boots a Lisp Machine, with both Interlisp and Common Lisp.
[09:07:14] <White_Flame> I've only really played with the Symbolics stuff
[09:07:19] <mfiano> Any of you familiar with RPN calculators?
[09:07:25] <White_Flame> vlm/x86
[09:07:29] <White_Flame> mfiano: sure
[09:07:32] <mfiano> I need help.
[09:07:34] <White_Flame> though it's been quite a few years
[09:07:53] <gilberth> Medley is nice. For one thing the window system is familiar. Which comes to no surprise.
[09:08:20] <mfiano> I'm trying to use the Unix "dc" command (like "bc" but RPN") to take the average of a set of numbers. "p" prints the result, and all I got is echo "1 2 3 + p". I'm not sure how to work with the stack to do the division
[09:08:36] <mfiano> err
[09:08:41] <mfiano> echo "1 2 3 + p" | dc
[09:09:20] <White_Flame> well, from "1 2 3 +" you'll end with a stack of "1 5"
[09:09:44] <mfiano> THis is totally confusing for me :/
[09:09:44] <dave0> mfiano: echo "1 2 3 + + 3 / p" | dc
[09:09:52] <White_Flame> so "1 2 3 + + 3 / p" ... right
[09:09:55] <ln43> anyone here tryied OpenLisp? (https://en.wikipedia.org/wiki/OpenLisp)
[09:10:00] <dave0> mfiano: that's (1+(2+3))/3
[09:10:12] <mfiano> Oh I get it I think! Thanks
[09:10:16] <Catie> ln43: I use an OpenLisp-derived lisp at work
[09:10:34] <ln43> oh, nice
[09:11:01] <mfiano> dave0: Except that is doing integer division
[09:11:04] <White_Flame> "1 2 3 + +" is basically the same as "1 2 + 3 +"
[09:11:04] <mfiano> Hmm
[09:11:10] <mfiano> I get 2
[09:11:22] <White_Flame> certainly the average of (1 2 3) is 2
[09:11:22] <Catie> mfiano: You can force floating-point arithmetic by using any one floating point number, it's contagious
[09:11:28] <copec> you're making a stack and applying the operator to it when you get to it
[09:11:32] <mfiano> It doesnt work
[09:11:59] <mfiano> echo "1.0 2.0 3.0 ++ 3.0 / p" | dc == 2
[09:12:03] <dave0> mfiano: start with    10 k     that sets the number of fraction numbers to 10
[09:12:07] <mfiano> err "+ +"
[09:12:26] <Catie> Interesting, it works for addition but not for division
[09:12:56] <dave0> try different numbers    echo "10k 2 2 + 3 + 3 / p"
[09:13:06] <White_Flame> ln43: heh "Despite its name, OpenLisp is proprietary software. Its interpreter is available free of charge for any noncommercial use."
[09:13:21] <ln43> yes but it's good
[09:13:26] <copec> "open to pay us monies"
[09:13:42] <ln43> no, open for reversing
[09:13:44] <Catie> ISLISP is very similar to Common Lisp, the similarities far outweigh the differences
[09:13:45] <ln43> xd
[09:14:59] <mfiano> dave0: Hmm that works. What the....
[09:15:33] <moon-child> I think there's an oss implementation of islisp
[09:15:39] <moon-child> 'easy-islisp' or some such
[09:15:52] <dave0> mfiano: i think the default number of fraction digits is 0, so it would always round to the nearest integer
[09:16:29] <copec> I have this HP program I scanned years ago of my Dad's https://unaen.org/files/HP%20Calculator%20Windmill%20Program.pdf
[09:16:37] <mfiano> dave0: Hmm...
[09:17:17] <dave0> mfiano: have you got a lisp running? this is the perfect thing for a REPL
[09:17:37] <mfiano> dave0: Nope. I'm on BSD CLI
[09:17:47] <moon-child> 'sbcl'?
[09:18:20] <moon-child> (or text-mode emacs even)
[09:18:39] <mfiano> I understand the RPN now. I just don't know how to set the precision
[09:18:53] <mfiano> or scale or whatever
[09:20:11] <pl> mfiano: dc?
[09:20:20] <pl> use 'k' command
[09:20:30] <pl> for example 4k will set 4 digits of precision
[09:20:39] <moon-child> 'Forced to choose between speed and safety, most people choose speed.  This is the only conclusion consistent with what happens on our highway'
[09:21:44] <mfiano> pl: Im not sure where to put that in this to get 1.5: echo "1 2 3 + + 3 / p" | dc
[09:21:57] <mfiano> I tried using k already. I must be doing it wrong
[09:22:14] <mfiano> err not 1.5
[09:22:17] <gilberth> Why not use Lisp? echo "(avg 1 2 3 4 5 6 7)" | ccl -n -b -Q -e "(defun avg(&rest x) (/ (reduce #'+ x) (length x)))" scnr
[09:22:18] <mfiano> sigh
[09:22:19] <pl> echo "1k 1 2 3 + + 3 / p" | dc
[09:22:27] <dave0> mfiano: k is also RPN ... you have to push a number before you use k
[09:22:29] <mfiano> I need to wake up first me thinks
[09:22:57] <dave0> mfiano: try    echo "5 k 1 7 / p" | dc
[09:23:16] <dave0> shoud give you the first 5 digits of 1/7
[09:23:19] <mfiano> Got it. Thank you all!
[09:27:28] <moon-child> ugh.  Lacking motivation.  I can not bring myself to do anything productive
[09:28:08] <gilberth> copec: What are those barcodes at the end?
[09:29:35] <gilberth> moon-child: Take a break, motivation will show up again.
[09:30:50] <ln43> ops... so searching for ISLISP i found easy-islisp (https://github.com/sasagawa888/eisl )  (http://eisl.kan-be.com/library/easyislisp1.html)
[09:32:19] <Catie> ln43: That's the free implementation of ISLISP. OpenLisp has some proprietary extensions, but the cores of the two implementations would be the same
[09:32:43] <copec> Gilberth: You could scan in the program with a reader accessory 
[09:32:51] <gilberth> I rather wonder, if there is an Interlisp implementation to play with. I have an recent interest in ancient Lisp dialects.
[09:33:18] <gilberth> copec: Ah. Nifty mass storage.
[09:33:58] <gilberth> Pen sth like a single photo diode in a pen-like device would do. Like those old barcode scanners.
[09:34:06] <gilberth> * Perhaps
[09:34:16] <moon-child> gilberth: thanks.  I sure hope so
[09:34:46] <moon-child> gilberth: interlisp can be found at https://github.com/Interlisp/maiko/ and https://github.com/Interlisp/medley.  Pretty easy to run on linux, you may need xquartz or some such on mac
[09:34:46] -ixelp- GitHub - Interlisp/maiko: Medley Interlisp virtual machine
[09:35:43] <gilberth> Ah! That is the Medley I remember.
[09:35:55] <copec> https://www.ebay.com/itm/Barcode-Reader-WAND-for-HP-41C-41CV-41-CX-82153A-Excellent-Cond-w-Manual-/144262885388?mkcid=16&mkevt=1&_trksid=p2349624.m46890.l49286&mkrid=711-127632-2357-0
[09:35:56] -ixelp- Barcode Reader WAND for HP-41C, 41CV, 41-CX; 82153A, Excellent Cond. w/Manual | eBay
[09:36:53] <gilberth> moon-child: I run X11 all the time, couldn't do without it. And: Thanks! I was not aware that there is a free version.
[09:38:17] <moon-child> it was made opensource recently, released by the son of the copyright owner (who is now dead), and now worked on by a few of the original devs
[09:40:01] <gilberth> Hey! That's nice. More for me to play with.
[09:40:17] <copec> Gilberth:  There is a #interlisp
[09:40:26] <gilberth> I never used Interlisp, I wonder how it feels like.
[09:40:56] <moon-child> text is rather small at modern resolutions
[09:41:01] <moon-child> documentation browser is rather nice
[09:41:13] <moon-child> I haven't taken the time to actually properly grok its use yet tho
[09:42:14] <gilberth> I'd like to. The other night I inhaled the MACLISP manual. But that is all very familiar.
[09:43:28] <contrapunctus> moon-child: «ugh.  Lacking motivation.  I can not bring myself to do anything productive» time to watch Kiki's Delivery Service 😏
[09:47:38] <ln43> and after all looking here https://en.wikipedia.org/wiki/ISLISP (Timeline of Lisp dialects) i can see an Hy ... as the most recent successor
[09:48:25] <ln43> strange that it was even reported but maybe it's good enough
[09:51:12] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 268 seconds)
[09:53:44] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:57:16] *** Quits: sm2n (~sm2n@user/sm2n) (Quit: Leaving)
[09:58:16] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[10:00:09] *** Joins: aeth (~aeth@user/aeth)
[10:05:11] <hayley> Hy? You mean Python in ()
[10:05:12] <hayley> ?
[10:06:36] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 245 seconds)
[10:12:35] *** Joins: sm2n (~sm2n@user/sm2n)
[10:14:02] *** Quits: Catie (~user@user/catie) (Quit: sleep)
[10:31:34] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:48:24] <gilberth> hayley: These days everything using parens is called a Lisp. The curious thing is that s-expression syntax seems to become fashionable.
[10:48:45] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[10:49:17] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[10:51:48] <hayley> https://kar.kent.ac.uk/40820/1/ismm012-ugawa.pdf Hooray, someone worked out weak references with an on the fly GC. And they found the bug I found in the Pauseless paper.
[10:52:18] <hayley> "However, this seems insufficient for correct behaviour as the GC may win one race but lose another, thereby failing to clear atomically all soft references to an object..."
[10:53:22] <sham1> S-expressions are a good "syntax" but it doesn't a lisp make, yeah
[10:57:23] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[10:59:30] <gilberth> I still have the theory that eventually languages will converge towards Lisp. But it will take time. A lot of time.
[10:59:55] <amazigh> moon-child: o)
[11:00:49] <amazigh> A couple of weeks ago I read that something is at a minimum impossible to get right without GC
[11:01:02] <amazigh> IIRC it is related to lockless programming.
[11:01:44] <amazigh> PLs already converged toward LISP, imo, except they disregard their heritage (and droped s-exprs0
[11:01:51] <amazigh> PLs already converged toward LISP, imo, except they disregard their heritage (and droped s-exprs)
[11:02:24] <gilberth> Yes? What language should that be? I am not aware of any.
[11:02:54] <amazigh> Any language that does what?
[11:03:35] <gilberth> You said programming languages already converged. I wonder which language besides Lisp that would be.
[11:03:42] <shka> structural macros at least are getting somewhat adopted 
[11:03:48] <shka> same for multi-methods
[11:04:13] <moon-child> what is a structural macro?  A hygienic one?
[11:04:32] <shka> lisp style macro, as opposed to fucking preprocessor
[11:04:40] <moon-child> multiple dispatch I have not seen anywhere aside from maybe julia and raku.  And dylan, if you can count that, it is decades old now
[11:04:46] <shka> weirdly, restarts are not getting adopted
[11:04:49] <shka> which is weird
[11:04:55] <shka> it would be my first peek
[11:04:58] <shka> *pick
[11:04:59] <amazigh> gilberth: yes, I agree with you.
[11:05:22] <shka> moon-child: yes, those two i had in mind
[11:05:38] <shka> also, there is something like that in C# apparently 
[11:06:03] <gilberth> shka: Could I write CLEX then in that language? A macro which is some 5k lines and compiles scanner definitions to CL?
[11:06:19] <moon-child> shka: I don't think the interactive development model has been picked up at all
[11:06:46] <shka> gilberth: you COULD, but you don't want to :D
[11:06:49] <moon-child> and e.g. dyalog apl is drifting _away_ from that model.  I don't blame them; it's a commercial product, and they need to buy into unix to survive
[11:07:19] <shka> i mean, writing macros in scala is rather...
[11:07:20] <shka> uh
[11:07:27] <shka> not pleasant
[11:07:47] <gilberth> shka: I could? In the turning complete sense?
[11:07:55] <amazigh> how is interactive dev model different from or related to to unix?
[11:08:03] <shka> i think so, yes, but it is horrific
[11:08:07] <shka> let me show you
[11:08:08] <amazigh> seems orthogonal to me.
[11:08:20] <amazigh> moon-child: ^
[11:08:36] <gilberth> CL to C++ template compiler, anyone? Aren't they Turing complete?
[11:08:50] <amazigh> unix favors code, compile, then run? unlike CL?
[11:08:54] <shka> gilberth: https://docs.scala-lang.org/overviews/macros/overview.html
[11:08:54] -ixelp- Def Macros | Macros | Scala Documentation
[11:09:10] <moon-child> amazigh: unix shell is interactive; but under unix, _programs_ are secondary, and not to be developed interactively
[11:09:20] <shka> the problem with scala macros is that, compared to lisp, they are really difficult to use
[11:09:32] <amazigh> moon-child: oh yeah! I got it!
[11:11:53] <gilberth> shka: But I could do computations in them, it seems.
[11:12:12] <shka> you could, i am not sure if you would want to
[11:12:27] <moon-child> gilberth: I know of at least one language that _hasn't_ macros, but where you can generate a parser at compile time (from bnf or w/e)
[11:13:12] <gilberth> moon-child: Sounds like that is a builtin feature.
[11:13:25] <moon-child> no
[11:13:39] <moon-child> I mean, you can generate arbitrary code, according to nearly arbitrary compile-time computation
[11:14:07] <gilberth> ok
[11:14:11] <moon-child> but there is not quoting.  Everything has to be evaluated before use
[11:16:13] <shka> which is a problem
[11:16:41] <shka> plus ASTs are a little bit on the wonky side 
[11:17:03] <moon-child> yes
[11:17:47] <sham1> Some newer languages like Rust or Zig have embraced macrology. Rust of course has macro_rules which is just syntax-rules, while the proc-macros are more like syntax-case with a bit more procedure stuff
[11:17:58] <sham1> Zig of course just has the comptime idea
[11:18:11] <sham1> Which is more like traditional lisp macros
[11:18:28] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[11:20:34] <mfiano> dave0: Still there?
[11:21:36] <dave0> hi mfiano 
[11:21:50] <mfiano> I thought it was working but I discovered a bug
[11:22:13] <dave0> ok? is this with dc?
[11:22:21] <mfiano> yes
[11:22:30] <mfiano> https://i.lisp.cl/yMfhBR.png
[11:22:58] <mfiano> Can you help me discover what's wrong here?
[11:23:00] <dave0> ok you need more +'s
[11:23:19] <dave0> if you want to sum 10 numbers, you need 9 pluses
[11:23:42] <dave0> i don't believe dc is programmable to make a loop
[11:23:51] <mfiano> Oh ok.
[11:24:02] <mfiano> I will have to preprocess that in my script then. Thanks
[11:25:14] <selwyn> gilberth: i used mathjax offline for a similar purpose once
[11:25:53] <selwyn> but it was .. temperamental
[11:31:36] <hayley> "However, we found that, with an insertion barrier, the mutator can continually prevent the collector from breaking out of the termination loop, even if we assume weakly fair scheduling" lmao
[11:41:23] <hayley> Another paper: "It is now expected that hardware transactional memory will become a mainstream feature in commodity servers in the 2013-2014 timeframe." Assholes jinksed it.
[11:44:33] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 250 seconds)
[11:45:56] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:56:23] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[11:59:39] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[12:08:45] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[12:46:14] <hayley> aeth: Any ideas on why gmod insists on having a load of like 80 these days?
[12:47:38] <aeth> idk, I haven't played in a while
[12:47:59] <hayley> Oh well.
[12:57:07] <mfiano> dave0: I am done. Thank you!
[12:57:43] <mfiano> https://gist.github.com/mfiano/bcd36903d057ad5d9a2c0f7d98d406e1
[12:57:43] -ixelp- cpu-usage · GitHub
[13:02:13] <dave0> mfiano: ah i see where you put the pluses :-)
[13:04:11] <mfiano> :)
[13:25:11] <selwyn> i wonder what the most played game in person hours is
[13:25:22] <lotuseater> hello there
[13:25:23] <selwyn> gmod must be a serious contender
[13:25:30] <selwyn> hi lotuseater
[13:25:31] <shka> selwyn: i bet it is WoW
[13:25:39] <lotuseater> or mindecraft?
[13:25:42] <selwyn> hard to argue with that
[13:25:44] <lotuseater> *minecraft
[13:25:48] <moon-child> definitely wow
[13:25:52] <selwyn> i think it has to be a grinding rpg
[13:26:01] <lotuseater> yes i bet that too but never played it ^^
[13:26:06] <moon-child> person hours per purchaser per year owned, though, could be factorio
[13:26:21] <selwyn> shka: not your beloved starcraft?
[13:26:31] <moon-child> or maybe something like dota, lol
[13:26:44] <shka> selwyn: in terms of hours played globally SC has nothing on WoW
[13:27:27] <hayley> selwyn: https://www.youtube.com/watch?v=blb7DejmklY
[13:27:27] -ixelp- [Vinesauce] Vinny - G-Mod RP (Reupload) - YouTube
[13:27:43] <moon-child> gta has got to be up there too.  It's sold a ridiculous number of copies
[13:36:47] <sham1> Tetris is probably up there too
[13:37:35] <moon-child> tetris, candy crush
[13:39:36] <lotuseater> and tetris being one of the most reimplemented
[13:39:55] <moon-child> farmville!
[13:40:26] <dave0> omg my mom played farmville!
[13:53:17] * hayley uploaded an image: (25KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/xUfTIgfTfoUtoCqdCZHcGKeN/Screenshot_2021-11-23_21-21-55.png >
[13:53:28] <hayley> Can I do my own Greenspun's tenth rule thing?
[13:54:13] <hayley> hayley's tenth rule: every fediverse extension project implements a slow, ad-hoc clone of some Netfarm feature.
[13:54:18] <moon-child> you are asked to implement a web browser?
[13:54:39] <moon-child> oh, just a web page?
[13:55:00] <hayley> I'm not asked to do squat, this is someone else's project idea.
[13:55:09] <hayley> "Kind of interested in making a small project to render various ActivityPub objects in different layouts based on activity type. It would be kind of neat to plug in a URL, fetch the object through a basic GET request, then figure out how to make it look good for that specific object."
[13:55:48] <hayley> I literally have a method called PRESENT on Netfarm objects for this exact purpose. And, guess what, it's already implemented and you can just write your own damn one independent of client.
[14:05:08] <hayley> Must be time for https://www.youtube.com/watch?v=nbtEkZIvMAg
[14:05:08] -ixelp- Alabama Song (Whisky Bar) - YouTube
[14:08:29] <hayley> BTW I just ripped off CLIM presentations, which more or less nail the idea.
[14:12:28] <shka> hayley: presentation are shockingly useful concept 
[14:13:47] <selwyn> recently, i have become a great fan of 'text-only' stuff, somewhat to my surprise
[14:13:57] <selwyn> so i am obliged to reconsider my opinions on gemini et al
[14:14:07] <hayley> Right.
[14:14:46] <selwyn> i mean, it does sound bad, but not necessarily because of text
[14:15:20] <hayley> Also, the "structured" approach to getting shit on screen, where you can give each object its own canvas to scribble on, lets you jam whatever objects into a list, and the worst that can happen is that people who wrote the presentation methods have different ideas about graphic design.
[14:15:33] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/dUAyCKSOgNBifkIpISfJOalM/randall-smith.jpeg >
[14:15:38] <hayley> selwyn: prepare to die of terminal boredom
[14:16:17] * hayley uploaded an image: (187KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CJOHxHuiRwuSaLpKSqUKunIa/average-gemini-fan.jpeg >
[14:16:48] <sham1> People should separate presentation layers from the data layer God damn it
[14:17:11] <hayley> If you only have text, then the data layer and presentation layer are one and the same. Sorry!
[14:17:32] <sham1> And this is why I don't personally like just plain old plaintext
[14:17:52] <sham1> Although plaintext does have the advantage of being able to be reflowed easily
[14:18:08] <moon-child> unix is based on text.  So graphics toolkits people build in unix are siloed and compose badly
[14:18:11] <moon-child> and text composes well
[14:18:27] <moon-child> but that doesn't mean things that aren't text categorically compose badly.  Just under unix
[14:18:31] <hayley> I have a "semantic" representation with objects and accessor methods, and a human-consumable representation with presentation methods.
[14:18:37] <sham1> Well I should say, I don't like plaintext that is unstructured
[14:18:54] <sham1> Yeah, text that is structured semantically is great
[14:19:05] <moon-child> sham1: 'structured text' is passing structure through a side channel, it's not inherently structured
[14:19:08] <moon-child> awful garbage
[14:19:13] <hayley> In future, there could be multiple presentation methods for different devices (screen, print, teletype, screen reader...)
[14:19:27] <lotuseater> uii
[14:19:35] * hayley taps https://applied-langua.ge/posts/terminal-boredom.html#orgfea75d4
[14:19:45] <sham1> moon-child: it's just that the content and the semantic goes through the same tube of bytes
[14:20:18] <moon-child> that's exactly it.  Canon is a byte sequence.  It should not be
[14:21:01] <moon-child> in-band vs out-of-band is also an issue, but separate.  E.G. c strings it can be argued are inherently structured yet have an in-band terminator
[14:21:02] <hayley> The canonical form is an object. Now what do you do with it? Transform it further? PPRINT? Pull up an inspector?
[14:21:11] <moon-child> hayley: damn straight!
[14:21:31] <sham1> You (display) it, clearly
[14:21:39] * moon-child tired, slightly drunk, apologises for being inflammatory
[14:21:45] * dave0 got a decaf-capp from the lisp cafe!
[14:21:54] <hayley> IMO having "object" and "printer" is exactly what you want for a content/presentation separation.
[14:22:09] <dave0> moon-child: what'cha drinking?
[14:22:12] <sham1> It's alright. I'm sitting here doing $JOB and writing Java. I appreciate the inflammatory response
[14:22:21] <moon-child> dave0: just wine.  I am a light weight
[14:22:32] <dave0> ah that's cool
[14:22:39] * hayley doesn't like wine even, just drinks lemonade at bars
[14:22:42] <dave0> moon-child: how do you feel about cider?
[14:22:56] <sham1> Wine has weird taste
[14:23:19] <dave0> hayley: just don't eat the peanuts
[14:23:24] <moon-child> dave0: it's ok, I guess?  No strong feelings
[14:23:57] <hayley> That said, my PRESENT method just spits out a Markdown AST, more or less. I need to come up with a more flexible, but still structured, way to produce graphics. Hence I should study CLIM and Morphic in more detail.
[14:28:04] <sham1> An ideal for graphics to me is basically the idea where the GUI is separate from the data processing, and they'd be connected through some duplex communication channel, exchanging messages. So something like the web or X, but more general. And probably data-oriented as opposed to having the data processor tell how to draw the stuff
[14:29:02] <hayley> Yes, it is data^Wobject-oriented in that the object describes how to draw itself.
[14:29:17] <sham1> So instead of sending pixels, you would send an object, yes
[14:29:27] <sham1> And then the presentation layer would figure out the pixels
[14:30:05] <sham1> Now of course, sometimes you want to send straight pixels from the data processing system to the presentation layer, but that could just be a special "bitmap object"
[14:31:07] <hayley> Sure.
[14:33:41] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[14:35:48] *** Joins: aeth (~aeth@user/aeth)
[14:47:47] <amazigh> let there be didgeridoo https://www.youtube.com/watch?v=06ShGePnMx0
[14:47:47] -ixelp- Jamiroquai - Supersonic (Official Video) - YouTube
[14:49:04] <amazigh> meh
[14:49:11] <amazigh> now for something completly different
[14:49:13] <amazigh> https://www.youtube.com/watch?v=CmvHz1exxcY
[14:49:14] -ixelp- Return to the Mind: Part I (A Trip Hop Mix) - YouTube
[14:49:57] <hayley> https://www.youtube.com/watch?v=TrzT1iSpwJk
[14:49:58] -ixelp- Video 5 8 6 (2020 Remaster) - YouTube
[15:01:21] <selwyn> dave0: i am brewing cider
[15:01:30] <dave0> selwyn: nice!
[15:01:39] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 264 seconds)
[15:01:47] <selwyn> still need to name the batch
[15:03:06] <selwyn> have kind of promised to name it after a discord i am in
[15:10:21] <mfiano> Some of the smaller scripts I've been working on for FreeBSD: https://github.com/mfiano/freebsd-scripts (moon-child or someone might find them useful). I've been writing a much larger script for ZFS snapshots that reached critical mass, with no end in sight...a bit too much for /bin/sh, so I'll now rewriting that one in CL.
[15:10:22] -ixelp- GitHub - mfiano/freebsd-scripts: A collection of FreeBSD scripts that have been useful
[15:12:04] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:13:45] *** Joins: random-nick (~random-ni@87.116.180.220)
[15:20:03] <shka> selwyn: "Stephen"
[15:20:14] <selwyn> after wolfram?
[15:21:41] <shka> sure, why not
[15:22:26] <selwyn> one thing's for sure i can't name it after hawking
[15:23:00] <hayley> A Bottleful of Sauce
[15:23:08] <selwyn> yesterday, i forgot that liquids shrink in volume when they cool down
[15:23:11] <selwyn> worst physicist ever
[15:24:06] <shka> selwyn: well, it is more true to gas ;-)
[15:25:00] <selwyn> i wonder what equation of state they use for water actually
[15:25:25] <shka> for liquids it varies 
[15:25:38] <shka> and alcohol/water mixture is actually different
[15:25:45] <shka> selwyn: call it Clapeyrona
[15:25:57] <shka> *Clapeyron
[15:26:11] <selwyn> lol
[15:26:13] <selwyn> not a bad idea
[15:26:19] <shka> https://en.wikipedia.org/wiki/Beno%C3%AEt_Paul_%C3%89mile_Clapeyron
[15:28:32] <shka> hot damn, they have uniforms https://en.wikipedia.org/wiki/%C3%89cole_Polytechnique#/media/File:Pr%C3%A9sentation_au_drapeau_2012_%C3%89cole_polytechnique.jpg
[15:28:42] <shka> and they look rather dashing 
[15:28:47] <selwyn> ens?
[15:29:03] <shka> École Polytechnique
[15:29:18] <selwyn> the engineering version right
[15:29:18] <shka> alma of Clapeyron
[15:30:33] <selwyn> if i was french might have ended up going to the ens
[15:30:59] <selwyn> a very different culture
[15:31:29] <selwyn> am informed that they get 'commissioned' similar to officers and get paid a salary
[15:31:35] <selwyn> maybe thats what the ceremony is about
[15:31:41] <shka> i think so
[15:32:17] <shka> i also think that there is difference in the mindset 
[15:32:35] <selwyn> a massive difference
[15:32:38] <shka> in anglosaxon world education is considered to be a matter of just a student
[15:32:53] <selwyn> i don't think the ens way has matured well tbh
[15:33:10] <shka> while in France they seem to consider it national matter 
[15:33:18] <selwyn> that part is kind of cool
[15:34:10] <shka> it also makes sense, educating brilliant minds will allow them to contribute the most to the society 
[15:34:45] <shka> in other words: it makes sense to invest into that
[15:35:08] <selwyn> the ens is so abstract in its mathematical content though
[15:35:39] <shka> well, i can't speak on that
[15:36:34] <shka> but regardless, you can't argue with the fact that France produced excellent engineers in the past
[15:36:45] <selwyn> of course
[15:37:00] <shka> and the French aviation industry probably wouldn't be the same if not for those 
[15:37:04] <shka> or car industry
[15:37:14] <shka> or Arian rockets
[15:37:21] <shka> or anything, really
[15:38:44] *** Joins: Nselm (~Nselm@p200300d56f0dd2fd43e7fb66dfd2cd87.dip0.t-ipconnect.de)
[15:39:37] <selwyn> iirc there's a criticism of french mathematics that it became too inward looking after the war
[15:39:50] <selwyn> which is consistent with criticisms of it i've heard from people who were around the ens
[15:40:07] <sham1> French auto industry
[15:40:09] <sham1> Heh
[15:41:42] <shka> sham1: well, what is the best car for the moose test?
[15:42:48] <sham1> Well the most reasonable ones would be either Volvo or Saab
[15:43:32] <shka> Citroën Xantia Activa
[15:43:58] <shka> because of superb, active suspension
[15:44:24] <sham1> That still doesn't help with the electronics
[15:44:39] <shka> yeah, they are not the best at that :P
[15:45:17] <selwyn> return to british leyland
[15:45:20] <shka> but anyway, not nearly as bad as you would think
[15:47:25] <shka> french cars are fine, and in the past they brought some real innovations into the market
[15:47:35] <shka> well, mostly Citroen
[15:47:50] <shka> the rest is a little bit boring 
[15:48:11] <selwyn> not sure how it is in france but so many of my science friends are going into finance/tech and giving up the quantum game
[15:48:32] <shka> selwyn: no wonder
[15:48:33] <selwyn> since this is the only way to have a good life in the rentier economy
[15:48:48] <shka> i mean, sometimes you want that nicer tea :P
[15:48:55] <selwyn> hahaha
[15:49:18] <selwyn> pg tips every day
[15:51:09] <shka> it is even worse in the us
[15:51:52] <shka> the wall street absorbs a lot of harvard graduates
[15:52:08] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[15:53:06] <shka> "Just last year, over a third of Harvard’s graduating seniors went on to jobs in finance or consulting."
[15:54:48] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[16:15:59] <selwyn>  this is why hudson has so much appeal to me
[16:16:06] <selwyn> i feel i can see it played out in real time
[16:17:09] <selwyn> france is professional at what they do in quantum (mostly optics) but it is usually small scale and focused towards academia
[16:17:20] <selwyn> iirc the quantum rng for crypto applications is a franco swiss collab
[16:18:48] <shka> quantum is not well suited toward grand scale and industry anyway
[16:18:56] <shka> at least not right now
[16:20:10] <shka> fuck, polish złoty is going down big time
[16:20:18] <shka> 1 euro = 4.72 pln
[16:29:06] <selwyn> lira too
[16:29:21] <selwyn> tfw dreams go up in smoke
[16:30:16] <selwyn> what is the cause? more fucking about and finding out with brussels?
[16:33:13] <shka> i am not a economist
[16:33:24] <shka> i don't know
[16:36:55] *** Joins: rogersm (~rogersm@90.166.177.48)
[17:09:52] *** Quits: Nselm (~Nselm@p200300d56f0dd2fd43e7fb66dfd2cd87.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:37:01] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[17:38:59] *** Joins: aeth (~aeth@user/aeth)
[17:39:22] <selwyn> https://www.bloomberg.com/news/articles/2021-11-23/eu-lawmakers-pass-strict-new-rules-affecting-big-u-s-tech
[17:39:25] <selwyn> wow
[17:57:10] <sham1> I somehow doubt the headline
[17:57:28] <sham1> It hasn't been very "strict" thus far
[18:22:31] *** Joins: lagash (lagash@lagash.shelltalk.net)
[18:27:20] <dave0> nite all
[18:27:32] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:50:53] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[19:04:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:05:56] <ck_> would you trade the internet and so on for the middle class life of, say, the sixties or seventies?
[19:23:44] <pl> ck_: ... depends where
[19:24:15] <selwyn> ck: yeah definitely
[19:24:25] <selwyn> also what pl said
[19:25:15] <pl> also, seventies in USA means you might have access to ARPAnet for free ;)
[19:25:22] <pl> and learn lisp on MIT-AI
[19:25:26] <selwyn> return to prestel
[19:26:51] <selwyn> it hurts a lot to say it but the internet lost all of its allure for me
[19:31:20] <selwyn> a time travelling novel but instead of going back to kill hitler they go back to stop javascript from being born
[19:38:25] <shka> we are just living in the most boring version of the cyberpunk dystopia
[19:40:58] <sham1> selwyn: so what, convince Netscape that making the syntax like Java is not worth it
[19:41:10] <sham1> That it'd get popular regardless
[19:41:10] <selwyn> shka: harsh reality
[19:41:19] <selwyn> well, idk
[19:41:24] <selwyn> it would make for an interesting novel
[19:41:37] <sham1> I'd probably actually read it
[19:41:53] <selwyn> there would have to be the necessary plot twist of scheme somehow making the internet worse than it actually is when they travel back to the present day
[19:46:52] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:10:57] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[20:35:18] <ck_> sad state of affairs
[20:41:15] <amazigh> day is over!
[20:41:21] * amazigh rejoices!
[20:42:18] <amazigh> selwyn: :D
[20:42:25] <amazigh> no more aws shit.
[21:14:56] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 245 seconds)
[21:15:16] *** Joins: X-Scale` (~ARM@92.250.97.112)
[21:17:42] *** X-Scale` is now known as X-Scale
[21:50:34] <shka> that zx-spectrum keyboard review
[21:50:37] <shka> https://www.youtube.com/watch?v=4fYJZkTeDno
[21:50:38] -ixelp- Sinclair ZX Spectrum keyboard review (rubber chiclet things) - YouTube
[21:51:01] <shka> dude was not aware how shit it was 
[21:54:46] <selwyn> will javascript outlive java?
[21:55:05] <shka> no
[21:55:28] <ck_> depends on at what point a language is "dead"
[21:55:31] <ck_> what does it mean?
[21:55:44] <shka> inertia in the backend off the business systems is much larger then in the applications
[21:55:49] <shka> in other words
[21:55:55] <shka> java is the new cobol
[22:02:02] <zbrown[m]> ruby is the new java
[22:03:03] <gilberth> Good morning #lispcafe!
[22:05:20] *** Joins: ln43 (~ln43@user/ln43)
[22:06:28] <White_Flame> javascript is the new fortran?
[22:06:48] <shka> js is the new delphi
[22:06:53] <White_Flame> heh
[22:06:57] <ln43> xd
[22:07:04] <ln43> https://www.youtube.com/watch?v=NaaViaCjYFs
[22:07:05] -ixelp- Freddie Mercury In My Defence Official Video - YouTube
[22:11:41] <ln43> ok, anyway i was thinking to start founding a new sector for rare earth mass production
[22:11:48] <ln43> production / estraction
[22:14:01] <ln43> especially considering the emerging trend to produce chips in home
[22:15:26] <sham1> Javascript is the new old blub
[22:15:50] <ln43> js is a quite  old language nowdays
[22:16:07] <ln43> same for html5 and all those things
[22:16:44] <ln43> and there was a discussion on the logo too at the time
[22:17:06] *** Joins: Nselm (~Nselm@p200300d56f0dd2fd651ddbefc8f50dfa.dip0.t-ipconnect.de)
[22:17:12] <ln43> but the road is already tracked 
[22:18:09] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:19:46] *** Joins: aeth (~aeth@user/aeth)
[22:29:06] *** Quits: ln43 (~ln43@user/ln43) (Ping timeout: 245 seconds)
[22:33:29] *** Joins: Catie (~user@user/catie)
[23:03:58] <shka> https://www.youtube.com/watch?v=htARnZjxQGs
[23:03:58] -ixelp- Ancient Babylonian Lamb Stew - YouTube
[23:07:41] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[23:08:20] <selwyn> this one looks kind of modern
[23:08:25] <selwyn> there is another one which is really weird
[23:12:07] <selwyn> its a dream of mine to be able to read those tablets
[23:22:35] * gilberth 's ALU chips arrived.
[23:23:43] <gilberth> Plenty of SMD parts. I am kind of happy.
[23:25:20] <selwyn> shka: https://arkeonews.net/a-12-000-year-old-temple-was-found-during-excavations-in-boncuklu-tarla-in-southeastern-turkey/
[23:25:34] <gilberth> Actually I wonder how many of 74F181 still exist at all.
[23:25:45] <shka> selwyn: stone age temple?
[23:25:54] <selwyn> its so old
[23:26:16] <gilberth> Could I buy all and have a monopoly? :-)
[23:26:40] <shka> selwyn: yeah, it is before the age of metal
[23:26:49] <selwyn> gilberth: 74F181 is our finest remaining export
[23:26:53] <selwyn> we can form a cartel
[23:28:10] <selwyn> iiuc agriculture is thought to have started 10k years ago
[23:28:53] <shka> selwyn: this goes right out of the window with this discovery 
[23:32:25] <selwyn> right
[23:33:10] <selwyn> i wonder if they had a pork taboo in ancient sumeria
[23:33:10] <gilberth> selwyn: Sorry, your Brits are too expensive. I got mine from Poland for less hassle with customs too.
[23:33:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:34:32] *** Joins: kar (~kar@68.203.99.60)
[23:35:17] <selwyn> kefir grains are kind of expensive but i only have to buy them once
[23:35:38] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:38:51] <selwyn> seems to me that the bronze age is exciting
[23:39:12] <selwyn> bronze age collapse and attack of barbarians
[23:39:16] <selwyn> but what does the stone age have
[23:39:32] <shka> nothing, really
[23:39:54] <gilberth> wrt to human history. I am puzzled how the ancient knew about the great year. This is a ~26,000 year period. How the hell did they observe that on my birthday morning the sun rises at 0°0'50" west of where it did a year before? Hence I believe that civilization is way older than we think.
[23:39:56] <shka> no large scale empires, no known religions
[23:40:33] <selwyn> 12000 years ago britain was connected to the mainland
[23:41:18] <gilberth> Hasn't the ice age ended just about 20,000 years ago?
[23:41:36] <shka> define "ended"
[23:41:41] <selwyn> so that temple is o l d
[23:42:26] <gilberth> shka: Ended is, when the ground isn't covered by ice all year.
[23:42:37] <shka> gilberth: then it never ended!
[23:42:44] <shka> or it never started!
[23:42:56] * gilberth looks out the window and spots no ice.
[23:43:14] <shka> gilberth: trying moving to Antarctica :-)
[23:43:25] <shka> and on the other extreme scale
[23:44:07] <gilberth> shka: Sure. But you properly got what I mean. Of course this depends on where you are.
[23:44:14] <shka> it was not like during all of the ice age snow was laying at the equator
[23:44:21] <selwyn> my favourite ice age story is that when english geologists went to switzerland local peasants cheerfully volunteered their theory that glaciers had transported rocks from the next town
[23:44:26] <selwyn> but were dismissed for a long time
[23:44:53] <shka> Turkey is particular is much warmer then the Germany 
[23:45:13] <selwyn> iirc ice age did not really reach anatolia
[23:45:20] <gilberth> shka: Yes, and this is perhaps why we believe that vilification started in the middle east and not in say Norway.
[23:45:22] <selwyn> hence why it has more biodiversity today
[23:46:31] <gilberth> * civilization ; funny typo, is that a word even?
[23:46:51] <selwyn> it can be a real word
[23:46:58] <selwyn> it has certainly been used before
[23:47:18] <gilberth> Anyhow, this great year business still puzzles me. And why that was deemed so important that religions are based on it, like this Jesus figure.
[23:47:34] <selwyn> return to juche calendar
[23:48:19] *** Quits: kar (~kar@68.203.99.60) (Quit: WeeChat 3.0)
[23:49:11] <gilberth> Calendars is the next thing which puzzles me. Why are month and weeks based on the phase of the moon instead of an astronomical year? Couldn't they just count days? They must have known the exact length of a year.
[23:50:20] <hayley> https://twitter.com/Gilad_Bracha/status/1463174766236418071 Gilad Bracha goes on Netfarm
[23:50:41] <selwyn> i don't see why its absurd to use the phase of the moon
[23:51:04] <gilberth> Was it based on the moon, or rather menstrual cycle? And why are both in sync?
[23:51:57] <gilberth> selwyn: I'd like to know when the best time is to plant seeds, say.
[23:53:55] <gilberth> And why are all those observatories to determine the equinoxes? I could see why the spring equinox is important --- it's my birth day ;)
[23:54:39] <shka> gilberth: because you need to know when you have to plant your crops!
[23:55:10] <shka> and menstrual cycle is not strictly synchronized with the moon
[23:55:22] <gilberth> shka: Which could have figured out by just counting days, no need for an expensive observatory.
[23:55:57] <gilberth> shka: Most of the time it is. It's however disturbed these days in our modern world.
[23:56:15] <shka> if you know how many days are in the year, sure 
[23:57:26] <gilberth> Yes, and you can't tell me that you are aware of the great year but don't know the length of an astronomical year. This puzzles me.
[23:58:16] <gilberth> Perhaps it was about power. Who knows?
