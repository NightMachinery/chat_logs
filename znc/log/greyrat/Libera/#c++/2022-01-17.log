[00:02:26] <PJBoy> wow `auto& r = const_int'` is allowed?
[00:02:36] <PJBoy> that's unfortunate
[00:02:38] *** Quits: paulf (~paulf@lfbn-lyo-1-263-154.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[00:06:21] <zz> well yeah, auto will just resolve to include a 'const'
[00:06:42] <PJBoy> apparently so
[00:06:46] <zz> which kinda makes sense, given it was about reducing my typing
[00:07:30] <PJBoy> { const int x{}; f(x); } template<typename T> void f(T&) { BARK; }
[00:07:31] <geordi> f(T&) [with T = const int]
[00:07:36] <PJBoy> I don't like that one bit
[00:07:57] <PJBoy> it's clear that my function wants to modify the reference
[00:08:03] <zz> template<typename T> void f(T &&x) { for (auto &element : x) { /* one case where the propagation of const is actually desired */ }}
[00:08:14] <PJBoy> it should be a demand made on the caller that the reference is to a non-const
[00:11:05] <zz> void f(T&) { static_assert(is_same_v<T, remove_const<T>>); } or something for your demand
[00:12:04] <Alipha> PJBoy: are you going to put requires on all of your templated functions now? Or make your own concept? heh
[00:12:08] <Alipha> { const int x{}; f(x); } template<typename T> void f(T&) requires(!std::is_const_v<T>) { BARK; }
[00:12:08] <geordi> error: no matching function for call to 'f(const int&)'
[00:12:25] <PJBoy> non-const concept would probably be the thing to do, yeah
[00:13:34] <zz> But you don't really need the requires/assert. If your function attemps to make a modification and you pass a const T, it would fail to compile/substitute.
[00:13:44] <zz> at which point you know you need to pass a mutable T in
[00:14:32] <Alipha> zz: which isn't that obvious from error messages, generally
[00:15:23] <PJBoy> { const int x{}; f(x); } template<typename T> concept NonConstRef = !is_const_v<T>; void f(NonConstRef auto&) { BARK; }
[00:15:23] <geordi> Same error.
[00:15:31] <PJBoy> I still haven't decided on a casing style for concepts
[00:15:51] <zz> what casing does the C++ standard's examples use?
[00:16:03] <PJBoy> all of stdlib uses lower_case
[00:16:12] <PJBoy> for everything
[00:16:21] <zz> good, chime in.
[00:16:28] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (Remote host closed the connection)
[00:16:31] <PJBoy> except std::regex_constants::ECMAScript
[00:16:44] <PJBoy> and some macros
[00:17:15] <zz> one could treat macros as a (necessary evil) smallcaps variant of the lower_case
[00:17:31] <PJBoy> true enough
[00:18:10] <PJBoy> I figure I should use the same naming style as I use for template type parameters currently
[00:18:36] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[00:19:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:19:27] *** Quits: triad (~triad@user/triad) (Quit: Leaving)
[00:21:14] *** Joins: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[00:23:16] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:310a:887:a8c8:ed35) (Ping timeout: 250 seconds)
[00:24:32] *** Quits: kit_ten (~u0_a391@2600:380:a43d:1c52:7818:8bea:e74b:70b) (Ping timeout: 240 seconds)
[00:24:39] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:25:36] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:35a0:e4d2:2738:3a6)
[00:27:10] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[00:33:32] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[00:35:49] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:36:23] *** Joins: stonkey2 (~stonkey@user/stonkey)
[00:37:13] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[00:44:04] *** Joins: Pook (~Pook@2001:8a0:f996:1400:3108:e44f:bc1e:6094)
[00:48:27] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:48:58] *** Joins: kit_ten (~u0_a391@2600:380:a43d:1c52:a655:2fba:9fbf:3ba0)
[00:50:42] *** Quits: Enitin (~Enitin@82.102.22.86) (Remote host closed the connection)
[00:51:01] *** Joins: Enitin (~Enitin@82.102.22.86)
[00:51:52] *** Quits: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 250 seconds)
[00:51:57] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:57:14] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[00:57:15] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Remote host closed the connection)
[01:06:10] *** Quits: stonkey2 (~stonkey@user/stonkey) (Ping timeout: 250 seconds)
[01:06:24] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Quit: WeeChat 3.4)
[01:07:32] *** Quits: clime (~clime@78-80-115-5.customers.tmcz.cz) (Ping timeout: 240 seconds)
[01:11:39] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[01:13:45] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:15:08] *** Quits: chozorho (~chozorho@2601:146:300:c30::719a) (Quit: WeeChat 3.0)
[01:16:27] <ville> these are key decissions
[01:16:29] *** Quits: Imk0tter (~Imk0tter@172.58.228.46) (Ping timeout: 256 seconds)
[01:18:59] *** Quits: magla (~gelignite@55d4ed71.access.ecotel.net) (Quit: Stay safe!)
[01:20:26] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:26:39] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[01:28:13] *** Joins: pulse (~pulse@user/pulse)
[01:31:15] *** Joins: clime (~clime@78-80-115-5.customers.tmcz.cz)
[01:31:55] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:33:03] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a42:be20:6ada:7861)
[01:33:14] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[01:33:48] *** Joins: Joss (~joss@user/Joss)
[01:35:30] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:40:32] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[01:41:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:06] *** Joins: Praise (~Fat@user/praise)
[01:41:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:12] *** ChanServ sets mode: +v npaperbot
[01:41:39] *** Quits: Joss (~joss@user/Joss) (Quit: Leaving.)
[01:43:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:45:35] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a42:be20:6ada:7861) (Remote host closed the connection)
[01:45:45] *** Joins: tbcr (~tbcr@107.13.189.161)
[01:46:10] *** Joins: chozorho (~chozorho@2601:146:300:c30::304)
[01:46:41] *** Joins: stonkey (~stonkey@user/stonkey)
[01:47:25] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[01:48:40] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[01:49:12] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[01:51:04] <spidermonkey54> in an SO post I have read `non-static data member declaration already serves as the definition.` is this true? so `struct test { int i;};` , `i` a definition? that doesn't make sense.
[01:51:59] <PJBoy> that's true, yeah
[01:52:10] <PJBoy> what doesn't make sense about that?
[01:52:26] <spidermonkey54> what is `i` define to be? it doesn't have a value
[01:52:37] <PJBoy> it's defined to be an int that's a member of that class
[01:52:56] <PJBoy> definitions aren't related to the value a variable is initialised with
[01:53:14] <PJBoy> they're more about what type they are and how they can be used
[01:53:31] <spidermonkey54> but in `int f(){ int ; }`  `i` is a  declaration, not a definition/
[01:53:43] <PJBoy> `int i;` there is a definition
[01:54:02] <PJBoy> it declares and defines a variable call i as an int that's a local variable of that function
[01:54:20] <PJBoy> it's not initialised
[01:54:48] <PJBoy> `struct S {};` is a definition too
[01:54:58] <PJBoy> as opposed to `struct S;`, which is merely a declaration
[01:55:02] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[01:55:12] <PJBoy> similarly `extern int i;` is merely a declaration
[01:56:02] <PJBoy> https://en.cppreference.com/w/cpp/language/definition
[01:56:47] <spidermonkey54> thank you.
[01:57:25] <PJBoy> :)
[01:58:50] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:58:59] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[02:00:20] *** Quits: rgrinberg (~textual@2806:101e:7:2b:a509:6fda:5123:c5ae) (Ping timeout: 250 seconds)
[02:05:58] *** Quits: proller (~p@2a02:6b8:b081:8014::1:4) (Ping timeout: 250 seconds)
[02:07:30] <spidermonkey54> @PJBoy not sure if you saw my previous question but I still don't have a proper answer for it, if I include `struct s{  int a = 5; };` in a header I wont end up with a link error about multiple definitions of `int a`.Is it because `a` doesn't even exist until an instance of the struct is created?
[02:08:47] <PJBoy> class and struct definitions have "external linkage"
[02:09:06] <PJBoy> meaning you can have more than one of them in different object files and be able to link them together
[02:09:39] <PJBoy> and so the `int` being a member of the struct falls into this external linkage thing
[02:10:03] <spidermonkey54> i see
[02:10:11] <PJBoy> if you were to declare an inline variable in a header file, such as `inline int i = 0;`, that would achieve the same thing
[02:10:38] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:11:06] <PJBoy> I've somewhat oversimplified it, but yeah
[02:17:26] *** Quits: furrymcgee (~devuan@cgn-89-1-208-165.nc.de) (Quit: leaving)
[02:19:19] *** Joins: proller (~p@80.240.216.69)
[02:31:03] *** Joins: zunino (~zunino@2804:7f5:f380:9c7a:f242:753c:e983:8393)
[02:31:05] *** Joins: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3)
[02:31:24] *** phoenix1 is now known as phoenix
[02:32:52] *** Quits: pizdets (~pizdets@183.182.110.138) (Ping timeout: 250 seconds)
[02:33:31] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[02:33:48] <hans> any idea where to report errors on cppreference.com ?
[02:34:00] *** Joins: pizdets (~pizdets@183.182.111.203)
[02:34:40] <ville> no, but it's a wiki?
[02:34:58] *** Quits: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-125.cust.tzulo.com) (Quit: Leaving)
[02:35:15] <hans> ohh lel there's literally a "edit" link on the page, nvm
[02:36:38] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[02:44:22] *** Joins: changeHello (~panos@2a00:fe0:32a:fd0:1c19:5c53:f9b2:72e8)
[02:44:32] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 250 seconds)
[02:45:29] <changeHello> hi, i have a *list* of class instances that i am trying to randomly select from and then dereference, what's the best way to do this?
[02:46:08] <ville> which part...
[02:46:26] <changeHello> problem is that some of the class instances can also be nullptr
[02:46:53] <changeHello> uh, the selection part
[02:47:07] <changeHello> generating a random number and then assigning a variable to the class instance
[02:47:12] <changeHello> sidenote: class instance pointer*
[02:47:20] <changeHello> shared_ptr in particular
[02:48:00] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 250 seconds)
[02:49:14] <changeHello> the context of this is basically a simulation program, where we take "real-life" remote vehicle toys and spin them around randomly, but after a specific amount of times, i destroy the instance
[02:49:31] <jkaye> Stored a weak_ptr in the list
[02:49:36] <jkaye> Store**
[02:49:39] <ville> the way to generate random numbers in c++ is bit verbose. and has some pitfalls. https://en.cppreference.com/w/cpp/numeric/random
[02:49:52] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[02:50:58] *** Joins: nostar (~nostar@45.14.195.247)
[02:51:26] <changeHello> how can weak pointers help?
[02:51:54] <changeHello> i am trying to use uniform_int_distribution for the random number generation part as an additional FYI
[02:52:00] <ville> i guess this is a pretty good overview of your options: https://www.youtube.com/watch?v=0Ez-KqDTVXg
[02:52:01] <changeHello> i am not sure if i can get any more -v
[02:52:09] <hans> @changeHello there's a sample rng here, but i doubt it's the "best way", https://github.com/divinity76/phpcpp/blob/master/src/php_namespace.cpp#L503
[02:52:41] <changeHello> oh yeah, that's basically what i am exactly doing right now!
[02:53:39] <ville> so what's wrong with it then?
[02:54:04] <ville> and in general if your question contains the phrase "the best" or equivalent it's a nonsensical question
[02:54:30] <changeHello> oh, i insinuated that i wanted an opinionated answer
[02:55:09] <changeHello> uh, the problem, let me try to rephrase: if i boil it down, the problem is that i'm not sure how to use the number in order to get the correct element in the list, and then check if the element is "valid" (if it's a nullptr, try again)
[02:56:24] <ville> std::list?
[02:57:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:57:38] <changeHello> Yep
[02:59:31] <ville> auto i = std::next(list, random_i()); while(*i == nullptr) { i = std::next(list, random_i()); } ...
[02:59:42] <ville> err list.begin()
[03:00:05] *** Quits: Brewster (~Brewster@104.145.226.5) (Changing host)
[03:00:05] *** Joins: Brewster (~Brewster@user/brewster)
[03:00:43] <ville> random_i() being some function that gives you integers in [0, list.size())
[03:01:22] <changeHello> by list, do you mean the iterator?
[03:01:48] <ville> as i corrected: list.begin()
[03:01:55] <changeHello> oh sorry
[03:02:44] <jkaye> weak_ptr is basically the exact thing you want for the "shared pointer that may not exist any more" use case
[03:02:54] <jkaye> That's more or less the entire reason that it exists
[03:03:19] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:03:22] *** Joins: beco (~DrBeco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76)
[03:04:00] <sprout> shared_ptr lacks a borrow semantics though.  guess it'll be implemented once
[03:04:29] <changeHello> problem is that i use the shared_ptr's in other places as well, not sure if it's as simple as using weak_ptr as a drop-in replacement
[03:04:43] *** Quits: cosimone (~user@93-47-231-31.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:05:15] <changeHello> because the list is, uh, err, "the primary owner" and the thing that all parts in my program consult
[03:05:26] *** Quits: beco (~DrBeco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76) (Client Quit)
[03:05:38] *** Joins: beco (~DrBeco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76)
[03:05:41] *** Quits: beco (~DrBeco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76) (Remote host closed the connection)
[03:05:51] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Quit: Quit.)
[03:06:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:06:11] *** Joins: beco (~beco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76)
[03:07:41] <jkaye> I think there are probably other things wrong with this.. Why wouldn't you store unique_ptrs if you know that the list is the owner?
[03:07:55] <ville> do you really need shared_ptr though.. if the list's lifetime is longer than the other parts' lifetimes then shared_ptr seems excessive
[03:07:57] <jkaye> Or, keep a single shared_ptr in the list and only hand out weak_ptrs
[03:08:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:08:19] *** Quits: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3) (Remote host closed the connection)
[03:08:47] *** Joins: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3)
[03:09:09] <changeHello> yeah, you're right, i'll try to adjust that later
[03:09:29] <changeHello> i think i will still have to check whether an iterator points to a null pointer though (is this even possible?), right?
[03:10:08] *** Quits: nostar (~nostar@45.14.195.247) (Quit: Leaving)
[03:10:18] <ville> not sure why you would keep null elements around in the list?
[03:10:38] *** Joins: nostar (~nostar@68.51.221.108)
[03:10:58] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 250 seconds)
[03:10:59] <ville> it's something you might do if you've contiguous storage, but for linked list sounds bit curious
[03:11:20] <jkaye> If you use unique_ptrs in the list, the presence of the pointer in the list means it's "alive"
[03:11:24] *** Parts: FAT1337 (~IceChat78@user/fat1337) ()
[03:11:25] <jkaye> Absence would mean it's not
[03:11:31] *** Quits: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3) (Remote host closed the connection)
[03:11:41] <changeHello> uh, the order in the list matches some IDs that are aligned per instance
[03:12:03] <changeHello> and some other parts of this living hell try to access parts of the list using the stored IDs
[03:12:14] *** Joins: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3)
[03:12:20] <ville> that's not really a property of unique_ptr, you could still have null unique_ptr same as shared_ptr if you really tried
[03:12:40] <changeHello> ?
[03:12:46] <ville> that was for jkaye
[03:12:52] *** Joins: BauComeTeuCu (~cppcon@12.159.165.130)
[03:13:29] <jkaye> I mean of course you could
[03:13:33] <jkaye> But that would defeat the purpose
[03:13:38] <jkaye> At least of what I am talking about
[03:14:00] <ville> well if you've a SoA, well guess struct-of-list in this case, situation and you need null entries then sure go ahead
[03:14:04] <RandomReader> better approaches would probably involve changing the datastructure
[03:14:52] <RandomReader> e.g. use a map, so absence is a signal .. use a sorted vector, so random selection is faster .. separate the selection from the storage, so each is faster ... etc
[03:15:09] *** BauComeTeuCu is now known as CppCon
[03:15:13] * CppCon loves data structures
[03:15:38] <RandomReader> (which sounds like the same sort of issue as shared_ptr here: non-optimal choices made early, would benefit from looking at this all again now that you know what the use cases are)
[03:15:41] <changeHello> to be honest i'm like a zombie running on 2 monster drinks that's barely even in the mood for eating brains or whatever, how can I check whether a randomly selected iterator doesn't point to a pointed that points to a nullptr?
[03:15:54] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[03:16:13] <ville> 01:29:31          ville | auto i = std::next(list, random_i()); while(*i == nullptr) { i = std::next(list, random_i()); } ...
[03:16:23] <changeHello> i just really need to get this done because this is some sort of university cooperative project and my hands are tied as far as this entire structure of the program is concerned, i'd burn it all down if i could
[03:16:49] <RandomReader> you can view an iterator as a pointer to a list entry, so *iterator is that list entry, and you look at it just like you look at a list entry at any other place in your code
[03:17:09] <changeHello> so just dereferencing twice should be absolutely okay, right?
[03:17:36] <ville> if there is a non-null pointer in that list element
[03:17:38] <RandomReader> list<T>, what is T?
[03:17:44] <ville> pointer-like
[03:18:22] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Quit: Leaving)
[03:18:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:18:31] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[03:19:26] *** Quits: rogorido (~rogorido@mail.georeligion.org) (Quit: ZNC 1.8.2+deb1 - https://znc.in)
[03:19:29] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Client Quit)
[03:19:38] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[03:20:14] <CppCon> ew
[03:20:41] <CppCon> list to pointers. asking for double trouble
[03:27:18] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:30:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:38] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:33:55] *** Parts: changeHello (~panos@2a00:fe0:32a:fd0:1c19:5c53:f9b2:72e8) (Konversation terminated!)
[03:34:15] *** Joins: walterwhip (~www@user/walterwhip)
[03:35:26] *** Joins: sturggling (~helloWorl@2a00:fe0:32a:fd0:1c19:5c53:f9b2:72e8)
[03:35:38] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:36:19] <sturggling> hi, .empty() is boolean and doesn't modify list like other languages, right?
[03:37:38] <RandomReader> yes
[03:37:49] <sturggling> thx]
[03:37:52] *** Quits: sturggling (~helloWorl@2a00:fe0:32a:fd0:1c19:5c53:f9b2:72e8) (Client Quit)
[03:37:57] <RandomReader> .resize(0) would be the action equivalent
[03:38:37] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:39:15] *** Quits: LunarJetman (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[03:39:37] <CppCon> he's gone...
[03:39:46] <CppCon> join/ask/leave
[03:40:10] <CppCon> at least he said thanks
[03:46:04] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[03:47:12] *** Joins: Guest3273 (~Guest@host223.190-139-78.telecom.net.ar)
[03:49:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:51:42] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[03:52:14] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[03:52:35] *** Quits: beco (~beco@2804:351c:dd02:b000:fe8b:5fac:6d35:c76) (Quit: Leaving)
[03:54:23] *** Joins: Soni (~quassel@autistic.space)
[03:55:32] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[03:58:11] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[03:59:05] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[04:01:18] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[04:03:24] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 250 seconds)
[04:05:41] *** Quits: zunino (~zunino@2804:7f5:f380:9c7a:f242:753c:e983:8393) (Quit: WeeChat 3.0.1)
[04:06:43] *** Joins: millido (~millido@84.210.150.128)
[04:10:19] *** Quits: Pook (~Pook@2001:8a0:f996:1400:3108:e44f:bc1e:6094) (Quit: Leaving)
[04:10:25] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:10:52] *** Quits: Guest3273 (~Guest@host223.190-139-78.telecom.net.ar) (Remote host closed the connection)
[04:12:39] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1d45:c0f8:56d9:c89f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:13:11] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[04:13:17] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 256 seconds)
[04:14:06] *** Joins: millido (~millido@84.210.150.128)
[04:20:17] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Ping timeout: 240 seconds)
[04:24:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:4077:3f1e:888b:24b3) (Ping timeout: 240 seconds)
[04:25:32] *** Quits: clime (~clime@78-80-115-5.customers.tmcz.cz) (Ping timeout: 240 seconds)
[04:25:49] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:29:07] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:29:33] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:30:36] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:35a0:e4d2:2738:3a6) (Remote host closed the connection)
[04:33:32] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 240 seconds)
[04:37:19] *** Joins: llh (~llh@user/llh)
[04:37:42] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:25] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:48:41] *** Joins: _SKiTZO (~dark@64.89-10-146.nextgentel.com)
[04:50:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:00:43] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[05:01:39] *** Joins: DrMax__ (~DrMax@node-1w7jra94757fyob8fnmfiiypq.ipv6.telus.net)
[05:02:42] *** Quits: DrMax__ (~DrMax@node-1w7jra94757fyob8fnmfiiypq.ipv6.telus.net) (Client Quit)
[05:03:01] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:03:07] *** Joins: malloy (~jimery@113.116.52.211)
[05:04:39] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:04:51] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 256 seconds)
[05:07:04] *** Joins: millido (~millido@84.210.150.128)
[05:07:32] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[05:09:29] *** Joins: walterwhip (~www@user/walterwhip)
[05:09:36] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[05:14:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[05:18:04] *** Joins: seninha (~seninha@user/seninha)
[05:21:19] *** Joins: ix (~ix@213.205.241.31)
[05:22:49] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:26:38] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[05:28:23] *** Joins: jw5 (~Thunderbi@user/jw4)
[05:28:48] *** Joins: malloy (~jimery@113.116.52.211)
[05:29:01] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:29:37] *** Quits: jw4 (~Thunderbi@user/jw4) (Ping timeout: 256 seconds)
[05:29:37] *** jw5 is now known as jw4
[05:31:53] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:33:55] *** Joins: kit-ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[05:37:52] *** Quits: kit_ten (~u0_a391@2600:380:a43d:1c52:a655:2fba:9fbf:3ba0) (Ping timeout: 250 seconds)
[05:39:40] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:41:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:13] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:13] *** ChanServ sets mode: +v npaperbot
[05:44:32] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca) (Ping timeout: 240 seconds)
[05:45:14] *** Joins: foozle (~foozle@2001-b011-c040-5c74-123a-2936-e0e6-5160.dynamic-ip6.hinet.net)
[05:45:48] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-134.dsl.bell.ca)
[05:46:26] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[05:46:44] *** Quits: foozle (~foozle@2001-b011-c040-5c74-123a-2936-e0e6-5160.dynamic-ip6.hinet.net) (Remote host closed the connection)
[05:53:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:58:50] *** Joins: walterwhip (~www@user/walterwhip)
[05:59:44] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:01:47] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:12:30] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Remote host closed the connection)
[06:13:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:17:29] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[06:18:26] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[06:24:47] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:26:57] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:28:26] *** Joins: waleid (~waleid@110.137.101.248)
[06:28:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:30:06] *** Joins: PureSine (~PureSine@user/PureSine)
[06:33:39] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[06:41:28] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:44:10] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[06:48:33] *** Quits: C-Man (~C-Man@78.31.190.82) (Ping timeout: 256 seconds)
[06:50:31] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:57:29] *** Quits: CppCon (~cppcon@12.159.165.130) (Quit: This computer has gone to sleep)
[06:58:02] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[06:58:26] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[07:02:49] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:05:02] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[07:06:38] *** Joins: coolchris (sid536654@id-536654.lymington.irccloud.com)
[07:06:39] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:09:44] *** Quits: AmR (~AmREiSa@41.36.185.103) (Quit: Konversation terminated!)
[07:15:25] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[07:16:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:20:09] *** Joins: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net)
[07:20:52] <jimmio92> Is there a chat dedicated to GNU Make or is it okay to ask here?
[07:22:49] <leduyquang753> Whether there is or not it does not belong here, you can maybe try #C++-general.
[07:22:52] *** Joins: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55)
[07:24:38] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:25:16] *** Joins: walterwhip (~www@user/walterwhip)
[07:25:25] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:35:18] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 250 seconds)
[07:36:30] *** Joins: millido (~millido@84.210.150.128)
[07:36:43] *** Joins: Leo_V (~Leo@157.52.18.77)
[07:37:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:39:12] *** Quits: Leone (~Leo@157.52.18.77) (Ping timeout: 250 seconds)
[07:39:15] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[07:39:23] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 256 seconds)
[07:44:24] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 250 seconds)
[07:45:58] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[07:46:12] *** Joins: frost (~frost@user/frost)
[07:48:51] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:49:15] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:506e:821:1232:2e80)
[07:49:15] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:506e:821:1232:2e80) (Changing host)
[07:49:15] *** Joins: skapata (~Skapata@user/skapata)
[07:49:20] *** Joins: millido (~millido@84.210.150.128)
[07:50:16] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[07:52:34] <vdamewood> jimmio92: ##workingset
[07:56:57] *** Quits: waleid (~waleid@110.137.101.248) (Ping timeout: 256 seconds)
[07:57:24] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 250 seconds)
[08:00:19] *** Joins: hinata (~hinata@2409:4042:2d90:eac6:356e:1f7:b186:346e)
[08:03:55] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[08:05:05] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[08:08:16] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[08:08:21] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:10:32] *** Quits: jw4 (~Thunderbi@user/jw4) (Ping timeout: 240 seconds)
[08:12:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:13:06] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:14:16] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:22:27] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[08:26:00] *** Quits: ix (~ix@213.205.241.31) (Ping timeout: 250 seconds)
[08:26:55] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[08:27:34] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:31:54] *** Joins: waleid (~waleid@110.137.101.248)
[08:36:10] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:36:13] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[08:37:00] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[08:40:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:40:50] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[08:48:44] <jimmio92> vdamewood thanks (a whole hour later; oops)
[08:48:56] *** Joins: ix (~ix@213.205.192.166)
[08:49:53] *** Quits: waleid (~waleid@110.137.101.248) (Quit: Nettalk6 - www.ntalk.de)
[08:53:26] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[08:59:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:01:56] *** Joins: walterwhip (~www@user/walterwhip)
[09:02:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:03:22] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[09:03:26] *** Joins: nicko (~iClass@221.236.54.48)
[09:05:43] *** Quits: nicko (~iClass@221.236.54.48) (Client Quit)
[09:08:47] *** Joins: Burgundy (~yomon@82.76.72.88)
[09:12:50] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[09:14:45] *** Joins: malloy (~jimery@113.116.52.211)
[09:17:46] *** Joins: Jaydayal (~Jaydayal@user/jaydayal)
[09:19:02] *** Quits: ix (~ix@213.205.192.166) (Ping timeout: 240 seconds)
[09:23:15] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[09:32:25] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[09:34:28] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:37:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:41:06] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:14] *** ChanServ sets mode: +v npaperbot
[09:48:54] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:53:19] *** Joins: irrenhaus3 (~xenon@HSI-KBW-046-005-002-171.hsi8.kabel-badenwuerttemberg.de)
[09:55:17] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600b1409487ab5b1115.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[09:58:11] *** Quits: real_hirion (~hirion@user/hirion) (Quit: real_hirion)
[10:02:09] *** Joins: hirion (~hirion@user/hirion)
[10:15:06] *** Parts: emanuele6 (~emanuele6@user/emanuele6) (WeeChat 3.4)
[10:16:09] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:18:18] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[10:18:38] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de)
[10:27:26] *** Quits: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f) (Quit: Leaving)
[10:27:46] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[10:30:53] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:31:17] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:35:19] *** Joins: evelyette (~Eleanor@178.79.105.181)
[10:36:26] *** Quits: rgrinberg (~textual@2806:101e:7:2b:6129:f312:6bd3:a55) (Ping timeout: 250 seconds)
[10:37:29] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c)
[10:38:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[10:39:27] *** Joins: paulf (~paulf@lfbn-lyo-1-263-154.w2-7.abo.wanadoo.fr)
[10:40:04] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:40:22] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[10:40:26] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:42:26] *** Joins: malloy (~jimery@113.116.52.211)
[10:44:14] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[10:44:52] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:46:32] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:50:02] *** Quits: _SKiTZO (~dark@64.89-10-146.nextgentel.com) (Ping timeout: 240 seconds)
[10:51:57] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[10:52:15] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:54:05] *** Joins: karakedi (~eAC53C340@user/karakedi)
[10:56:50] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[10:58:56] *** Joins: malloy (~jimery@113.116.52.211)
[10:58:56] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:59:12] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[11:00:54] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Remote host closed the connection)
[11:01:32] *** Quits: hinata (~hinata@2409:4042:2d90:eac6:356e:1f7:b186:346e) (Quit: Leaving)
[11:02:44] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[11:03:19] *** Joins: jw4 (~Thunderbi@user/jw4)
[11:04:05] *** Quits: chozorho (~chozorho@2601:146:300:c30::304) (Quit: WeeChat 3.0)
[11:05:33] *** Joins: oknenavin (~nomo@95.87.208.95)
[11:07:31] *** Quits: jw4 (~Thunderbi@user/jw4) (Ping timeout: 256 seconds)
[11:07:42] *** Quits: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net) (Quit: Client closed)
[11:09:48] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:23:08] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[11:24:45] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:25:23] *** Quits: Jaydayal (~Jaydayal@user/jaydayal) (Quit: Leaving)
[11:26:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[11:26:58] *** Joins: lewisje (~lewisje@72.49.207.113)
[11:27:50] *** Joins: Enitin (~Enitin@82.102.22.86)
[11:29:12] *** Joins: HvszrStykp (~X@81.171.62.86)
[11:33:14] *** Joins: jsbach (~jsbach@2a01:c23:613f:6700:91c6:e70b:f7c4:5ea9)
[11:40:42] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:41:01] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:42:04] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Read error: Connection reset by peer)
[11:42:39] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Quit: Leaving)
[11:42:51] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:43:33] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[11:54:06] *** Joins: PureSine_ (~PureSine@109.162.188.198)
[11:54:06] *** Quits: PureSine (~PureSine@user/PureSine) (Read error: Connection reset by peer)
[11:58:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:58:23] *** Joins: Vrganj (~vrganj@93-138-60-3.adsl.net.t-com.hr)
[11:59:57] *** Joins: MajorBiscuit (~MajorBisc@c-001-020-016.client.tudelft.eduvpn.nl)
[12:05:34] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:07:20] *** Joins: xkuru (~xkuru@user/xkuru)
[12:08:35] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[12:11:23] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[12:11:51] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Client Quit)
[12:12:17] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[12:12:53] *** Joins: rendar (~rendar@user/rendar)
[12:14:18] *** Joins: slavfox (~slavfox@93.158.232.111)
[12:21:31] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[12:22:36] *** Quits: Vrganj (~vrganj@93-138-60-3.adsl.net.t-com.hr) (Ping timeout: 250 seconds)
[12:22:36] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 250 seconds)
[12:37:27] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[12:38:00] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:e20c:8a7d:bfa1:8087) (Remote host closed the connection)
[12:38:31] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[12:43:02] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[12:44:17] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:44:59] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:45:42] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f93b:a580:30af:53b2)
[12:50:07] *** Joins: stonkey (~stonkey@user/stonkey)
[12:51:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:53:15] *** Joins: andreasbuhr (~quassel@p549db3a5.dip0.t-ipconnect.de)
[12:54:47] *** Quits: andreasbuhr (~quassel@p549db3a5.dip0.t-ipconnect.de) (Client Quit)
[12:54:52] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:56:59] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:58:30] *** Joins: riebers (~riebers@185.107.25.45)
[13:04:36] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:08:37] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[13:13:32] *** Joins: plastico (~plastico@neomutt/plastico)
[13:16:20] *** Joins: furrymcgee (~devuan@cgn-89-1-208-165.nc.de)
[13:17:25] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[13:26:44] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[13:28:07] *** Joins: jkotra (~jkotra@122.169.214.214)
[13:34:14] <jkotra> hi all
[13:35:15] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 256 seconds)
[13:35:38] *** Joins: rajkosto (~rajkosto@178.220.243.118)
[13:35:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:36:21] *** Quits: jkotra (~jkotra@122.169.214.214) (Quit: Ping timeout (120 seconds))
[13:36:39] *** Joins: jkotra (~jkotra@122.169.214.214)
[13:38:06] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:41:06] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:14] *** ChanServ sets mode: +v npaperbot
[13:41:27] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[13:42:38] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[13:49:01] *** Joins: andreasbuhr (~quassel@p549db3a5.dip0.t-ipconnect.de)
[13:49:01] *** Quits: andreasbuhr (~quassel@p549db3a5.dip0.t-ipconnect.de) (Client Quit)
[13:50:30] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[13:52:17] <riebers> hi jkotra
[14:00:11] *** Quits: riebers (~riebers@185.107.25.45) (Ping timeout: 256 seconds)
[14:01:42] *** Joins: seninha (~seninha@user/seninha)
[14:01:53] <jkotra> https://wandbox.org/permlink/uBaQwkwbftYjzzLE
[14:02:26] <jkotra> cannot filter a string. not sure what  i am doing wrong.
[14:02:47] <jkotra> i'm new new to  cpp.
[14:04:01] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[14:05:45] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e558:997e:112:92fe:0:7ca) (Quit: WeeChat 3.4)
[14:08:07] <sam113101> wait hold on, if I define a constructor, the default constuctor gets removed?
[14:09:08] <ville> jkotra: you wish to escape when the a match is found for the letter from the escape_characters? then either the condition on line 14 is wrong or the .append() on line 16 is in wrong spot
[14:09:48] <Oxyd> Also you don't append anything to the result when the character is not to be escaped.
[14:09:58] <Oxyd> Also you return the input string, not the filtered result you built.
[14:12:00] <PJBoy> sam113101, yeah
[14:14:45] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:18:34] <ville> where's that specified? went to look for it but nothing obvious popped out in: http://www.eelis.net/c++draft/class.mem
[14:19:29] <jkotra> @ville https://wandbox.org/permlink/nxDn1TmfmYmFNseN
[14:19:45] <jkotra> fixed the logic (i dont know if its right)
[14:19:55] <jkotra> output is error
[14:20:23] <jkotra> "www not validgoogle not validcom/l is not valid/l is not valids not validdl is not valid/d" it's worse in my local g++. i'm scared :(
[14:20:28] *** Joins: Yruama (~Yruama@lfbn-lyo-1-506-102.w2-7.abo.wanadoo.fr)
[14:20:48] <PJBoy> "If there is no user-declared constructor for class X, a non-explicit constructor having no parameters is implicitly declared as defaulted"
[14:21:08] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[14:21:09] <PJBoy> http://www.eelis.net/c++draft/class.default.ctor
[14:22:21] <ville> you can link to paragraphs: http://www.eelis.net/c++draft/class.default.ctor#1 or to sentences: http://www.eelis.net/c++draft/class.default.ctor#1.sentence-2 directly
[14:22:46] <ville> amazingly enough just by clicking!
[14:23:02] *** Joins: costanza (~i.am@user/heineken)
[14:23:20] <ville> i went searching for mentions of "default cons"
[14:23:40] <PJBoy> I ctrl+f'd for "default constructor" for a little while
[14:24:11] <jkotra> with g++  i get "wwwtd::vector larger than max_size()googletd::vector larger than max_size()com/te std::vector "......
[14:24:12] <PJBoy> and yeah I know you can link to that stuff, but it was in the first paragraph
[14:24:30] <Shell> jkotra: filtered.append(std::string("\\") + w);
[14:24:49] <Shell> you're adding some arbitrary number to a pointer in your code, I'm fairly sure.
[14:25:15] <jkotra> Shell thank you :) it seems to be working now
[14:25:52] <ville> jkotra: : "\\" + w does pointer arithmetic
[14:25:54] <ville> nevermind
[14:32:37] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:36:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[14:38:15] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:39:35] *** Quits: fluter (~fluter@user/fluter) (Read error: Connection reset by peer)
[14:41:13] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[14:45:19] *** Joins: pulse (~pulse@user/pulse)
[14:48:04] *** Joins: cursey (~cursey@user/cursey)
[14:53:23] *** Joins: HvszrStykp (~X@81.171.62.86)
[14:59:17] *** Joins: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[14:59:34] *** Joins: hinata (~hinata@2409:4042:2d90:eac6:dc64:440f:45cb:fd7b)
[15:04:30] *** Joins: dfkfs (~dfkfs@178.49.152.151)
[15:10:02] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (Quit: leaving)
[15:14:22] *** Joins: C-Man (~C-Man@78.31.190.82)
[15:20:25] *** Joins: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151)
[15:22:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:26:10] *** Joins: B1uebird (~palenoon@103.100.150.2)
[15:26:46] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 250 seconds)
[15:28:41] *** Joins: NovumDXW (~NovumDXW@2409:8a28:3610:29b0:74d8:d16b:92b3:8d89)
[15:29:43] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[15:32:24] *** Quits: B1uebird (~palenoon@103.100.150.2) (Ping timeout: 250 seconds)
[15:34:36] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[15:35:31] *** Quits: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151) (Quit: Konversation terminated!)
[15:35:44] *** Joins: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151)
[15:42:27] *** Quits: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151) (Quit: Konversation terminated!)
[15:42:59] *** Joins: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151)
[15:44:12] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:49:55] *** Quits: judabuda (kowbunga@user/judabuda) (Ping timeout: 250 seconds)
[15:50:00] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:50:14] <sam113101> can someone explain this to me
[15:50:16] *** Joins: Wanderer_42 (~Wanderer_@dslb-188-109-015-071.188.109.pools.vodafone-ip.de)
[15:50:17] <sam113101> src/main.cpp:129:18: error: cannot bind non-const lvalue reference of type 'Packet&' to an rvalue of type 'Packet'
[15:50:19] <sam113101>    auto p = by_me(Packet(action, (action != PA::HORN && horn_is_on)));
[15:53:02] <PJBoy> can't pass a temporary to a function that wants a non-const reference
[15:53:18] <PJBoy> rvalue = nameless temporary
[15:54:06] <sam113101> why can't we do that?
[15:54:34] <PJBoy> the idea of non-const reference parameter is that the function modifies the object passed as argument
[15:54:53] <PJBoy> if you pass a temporary, odds are you're not using the function as intended, as you'd never get to observe the changes
[15:57:36] <sam113101> well, the function is supposed to return the thing it receives as parameter
[15:57:44] <ville> sam113101: "think of the children" is the reason
[15:58:05] <PJBoy> is it returning a reference?
[15:58:13] <PJBoy> if so then you're returning a reference to a temporary
[15:58:18] <PJBoy> so it's still bad
[15:58:37] <PJBoy> if you're returning a value, then the parameter may as well be a const-ref or value parameter
[16:00:41] *** Joins: hehehe9 (~hehehe9@110.red-88-21-181.staticip.rima-tde.net)
[16:02:20] *** Joins: judabuda (kowbunga@kowbunga.thunderirc.net)
[16:02:54] *** Joins: fluter (~fluter@user/fluter)
[16:03:25] <sam113101> damn I don't know how to go about it
[16:04:08] <PJBoy> make a variable
[16:04:53] *** Joins: N4buc0- (~N4buc0@187.59.149.196)
[16:05:04] <PJBoy> `Packet peter_packet_picked_a_peck_of_pickled_peppers(action, action != PA::HORN && horn_is_on); auto p = by_me(peter_packet_picked_a_peck_of_pickled_peppers);`
[16:05:56] <sam113101> honestly I wish I could do packet.by_me()
[16:06:19] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:f93b:a580:30af:53b2) (Remote host closed the connection)
[16:06:52] <PJBoy> it's little different
[16:07:05] <PJBoy> `by_me(packet);` `packets.by_me();`
[16:07:10] * PJBoy shrugs
[16:07:38] <sam113101> the problem is I need to access global variables that are defined in another file
[16:07:54] <sam113101> I know they're different lol
[16:08:14] <PJBoy> "little" different
[16:08:22] <PJBoy> as in they're basically the same
[16:08:55] *** Quits: mitch0 (~mitch@84-236-20-10.pool.digikabel.hu) (Quit: leaving)
[16:09:21] *** Joins: mitch0 (~mitch@84-236-20-10.pool.digikabel.hu)
[16:13:34] *** Quits: costanza (~i.am@user/heineken) (Ping timeout: 250 seconds)
[16:14:38] *** Joins: costanza (~i.am@179.83.23.163)
[16:14:39] *** Quits: costanza (~i.am@179.83.23.163) (Changing host)
[16:14:39] *** Joins: costanza (~i.am@user/heineken)
[16:15:22] *** Quits: costanza (~i.am@user/heineken) (Remote host closed the connection)
[16:15:36] *** Joins: costanza (~i.am@179.83.23.163)
[16:15:36] *** Quits: costanza (~i.am@179.83.23.163) (Changing host)
[16:15:36] *** Joins: costanza (~i.am@user/heineken)
[16:16:32] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:20:34] <sam113101> PJBoy: what do you mean
[16:24:14] *** Quits: dfkfs (~dfkfs@178.49.152.151) (Quit: Client closed)
[16:30:11] <sam113101> I'm getting some circular linking shit
[16:30:38] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:30:56] *** Quits: rajkosto (~rajkosto@178.220.243.118) (Quit: Leaving)
[16:31:57] *** Joins: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl)
[16:32:43] *** sonic1 is now known as sonic
[16:33:45] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Read error: Connection reset by peer)
[16:35:24] <PJBoy> like they're extremely similar
[16:35:27] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[16:35:38] *** Joins: sigma_ (~sigma@164.215.224.240)
[16:35:51] <PJBoy> not much reason to prefer one over the other
[16:35:57] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66008c32c6e39a037144.ipv6.abo.wanadoo.fr)
[16:37:01] <sam113101> PJBoy: main.h includes packet.h which includes main.h, and now the linker says there are multiple definitions of everything
[16:38:20] *** Joins: neure (~TimoSuora@dzpbmlptyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[16:42:52] *** costanza is now known as jhms
[16:42:53] *** Quits: jhms (~i.am@user/heineken) (Changing host)
[16:42:53] *** Joins: jhms (~i.am@user/marlboro)
[16:44:10] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:44:21] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[16:44:25] *** Joins: stonkey2 (~stonkey@user/stonkey)
[16:44:54] <Hello71> is it actually the linker or are you guessing
[16:45:01] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[16:45:23] <zz> it probably is the linker. But the underlying issue is that they managed to emit the same symbol into two different .o files.
[16:47:21] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:48:39] *** Quits: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[16:51:22] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:54:11] *** Joins: proller (~p@2a00:1fa0:42aa:8316:680b:6634:a494:a395)
[16:58:32] *** Quits: proller (~p@2a00:1fa0:42aa:8316:680b:6634:a494:a395) (Ping timeout: 240 seconds)
[17:00:53] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[17:04:59] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:efce:e92e:a54f:2046)
[17:06:04] <sam113101> Hello71: collect2: error: ld returned 1 exit status
[17:06:47] *** Quits: N4buc0- (~N4buc0@187.59.149.196) (Ping timeout: 256 seconds)
[17:08:22] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:08:58] <PJBoy> defining non-inline stuff in the headers
[17:09:10] *** Joins: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de)
[17:10:36] *** Quits: hinata (~hinata@2409:4042:2d90:eac6:dc64:440f:45cb:fd7b) (Quit: Leaving)
[17:12:15] *** Quits: Kerr (~Kerr@2601:602:ce01:1f0:aaf6:d7cf:bef:465d) (Quit: Client closed)
[17:13:41] *** Joins: pingpongball (~pingpongb@27.34.47.124)
[17:14:06] <pingpongball> Why you wouldnt want to use shared_ptr, weak_prt, unique_ptr?
[17:14:58] <PJBoy> for when I'm doing something that doesn't involve owning a resource like a pointer
[17:17:32] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[17:18:20] <pingpongball> PJBoy what realworld example would you give me for that `something that doesn't involve owning a resource`  ?
[17:20:36] *** Joins: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b)
[17:20:45] <PJBoy> `std::string selectedText = scintilla.StringOfSpan(scintilla.SelectionSpan());`
[17:20:52] <PJBoy> from my last open project
[17:21:25] <pingpongball> aummm may i know what kind of project are you working on?
[17:22:05] <PJBoy> notepad++ extension
[17:22:19] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:22:28] *** Quits: Hypnosz (~resende@2001:8a0:e389:bb00:24da:c021:5892:f151) (Ping timeout: 250 seconds)
[17:22:33] *** Quits: hehehe9 (~hehehe9@110.red-88-21-181.staticip.rima-tde.net) (Quit: Client closed)
[17:22:55] <pingpongball> =L  oh thanks ,
[17:25:39] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[17:32:10] *** Joins: xiongxin (~Thunderbi@119.123.101.209)
[17:33:15] *** Quits: sigma_ (~sigma@164.215.224.240) (Ping timeout: 256 seconds)
[17:39:56] *** Quits: anzu (~anzu@melkki.cs.helsinki.fi) (Ping timeout: 252 seconds)
[17:41:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:14] *** ChanServ sets mode: +v npaperbot
[17:44:12] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[17:44:35] *** Joins: bebyx (~Thunderbi@user/bebyx)
[17:46:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:47:06] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:48:08] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:49:14] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c6d6:7de6:6176:c300)
[17:51:03] *** Quits: neure (~TimoSuora@dzpbmlptyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[17:52:48] *** Joins: anzu (~anzu@melkki.cs.helsinki.fi)
[17:58:21] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[17:59:02] *** Joins: pulse (~pulse@user/pulse)
[18:01:02] *** Quits: xiongxin (~Thunderbi@119.123.101.209) (Ping timeout: 250 seconds)
[18:01:08] *** Joins: xiongxin1 (~Thunderbi@119.123.101.209)
[18:03:26] *** xiongxin1 is now known as xiongxin
[18:03:45] *** Quits: syrius (syrius@titan.stormtek.net) (Remote host closed the connection)
[18:09:15] *** Quits: judabuda (kowbunga@kowbunga.thunderirc.net) (Changing host)
[18:09:15] *** Joins: judabuda (kowbunga@user/judabuda)
[18:10:27] *** Parts: pingpongball (~pingpongb@27.34.47.124) ()
[18:14:58] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[18:15:13] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:16:54] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:22:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:9048:56ad:c252:2add)
[18:22:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:9048:56ad:c252:2add) (Changing host)
[18:22:25] *** Joins: skapata (~Skapata@user/skapata)
[18:26:23] *** Joins: jw4 (~Thunderbi@user/jw4)
[18:27:13] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[18:29:09] *** Joins: Guest6915 (~Guest69@ip72-199-239-162.sd.sd.cox.net)
[18:32:42] <ville> opportunities for shared_ptr seem rather rare in my experience. as in none really
[18:33:37] *** Joins: sigma_ (~sigma@164.215.224.240)
[18:34:06] <jkaye> weak_ptr can be useful and it requires shared_ptr
[18:34:23] <jkaye> But generally I agree that they are significantly over-used
[18:35:01] *** Quits: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b) (Quit: Leaving)
[18:35:14] *** Joins: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b)
[18:35:45] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[18:36:02] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 240 seconds)
[18:37:05] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[18:37:52] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:41:09] *** Joins: executivePan (~uglyQuota@187.103.114.125)
[18:41:54] *** Quits: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b) (Quit: Leaving)
[18:42:14] *** Joins: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b)
[18:43:31] *** Quits: jw4 (~Thunderbi@user/jw4) (Ping timeout: 256 seconds)
[18:45:20] <lionkor> shared_ptr is usually a sign of someone who doesn't understand ownership
[18:45:30] <lionkor> speaking from experience, of courser
[18:47:51] <jkaye> Usually yes. Just not always :)
[18:48:21] *** Joins: adlternative (~adl@117.32.216.19)
[18:50:18] *** Joins: Coldberg (~C-Man@78.31.190.82)
[18:51:57] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[18:53:19] *** Quits: C-Man (~C-Man@78.31.190.82) (Ping timeout: 256 seconds)
[18:59:37] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[19:03:07] *** Quits: adlternative (~adl@117.32.216.19) (Quit: Konversation terminated!)
[19:04:39] <Guest6915> what does using unique_ptr say about someone?
[19:06:59] <Guest6915> is there a reason that only MSVC has a full implementation of modules? GCC and Clang still dont. See:   https://en.cppreference.com/w/cpp/compiler_support
[19:07:32] <furrymcgee> shared_ptr is in <memory>, I see its use case in some kind of shared memory
[19:09:30] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[19:09:50] *** Parts: Wanderer_42 (~Wanderer_@dslb-188-109-015-071.188.109.pools.vodafone-ip.de) (carry on)
[19:10:41] *** Joins: bebyx (~Thunderbi@user/bebyx)
[19:13:19] <PJBoy> MSVC have a build system
[19:13:24] <PJBoy> whereas GCC and clang don't
[19:13:47] <PJBoy> cmake would love to support modules for GCC and clang, but cmake needs support from those compilers
[19:13:53] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[19:13:56] <PJBoy> MSVC too
[19:14:13] *** Joins: spithash (~spithash@user/spithash)
[19:14:26] <PJBoy> not sure what the status cmake getting their compiler support is
[19:14:35] <PJBoy> but it's probably close to not-started
[19:15:04] *** Quits: xiongxin (~Thunderbi@119.123.101.209) (Remote host closed the connection)
[19:16:23] <Guest6915> okay so i'm not well versed on how modules works, but it entails not only compiler support but also the provision of a build-system?
[19:17:02] <Guest6915> Will those boxes for GCC/Clang at cppreference modules support ever turn green?
[19:17:14] *** Joins: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[19:18:01] <PJBoy> the modules have to be compiled into some format that can then be read by the compiler again for later on
[19:18:19] <PJBoy> MSBuild has solved that problem
[19:18:32] *** Joins: clime (~clime@78-80-115-5.customers.tmcz.cz)
[19:18:44] <PJBoy> I think GCC have made progress to that end
[19:19:03] <PJBoy> but the build system that gets used does also need to understand these compiled modules to do their job
[19:19:43] <PJBoy> GCC could make modules on its own, but no one would care
[19:20:15] <lh_mouse> I think it would be nightmare to incorporate a module with another convention library that knows nothing about modules.
[19:21:30] <lh_mouse> for instance my code could include <ostream> indirectly, and if I had its equivalent module imported, there would be multiple definitions.
[19:24:09] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[19:31:45] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[19:32:43] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[19:34:41] <CarloWood> I want to argue that C++ should be changed as follows: If the compiler sees an (thus inline) definition of a (member) function in a header but it can't compile the function body because some types are unknown, then it should treat that as 'inline ReturnType function_declaration(Args);' and ignore the function body until that function is actually USED - and THEN try to compile the given function again.
[19:35:29] <CarloWood> It does that basically too with templates. But in this case it would be a non-template, but inline function.
[19:35:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:36:38] <leonardus> CarloWood: What would be the performance impact?
[19:37:29] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:39:20] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:39:32] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[19:40:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[19:42:17] *** Joins: magla (~gelignite@55d4381b.access.ecotel.net)
[19:42:41] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[19:43:35] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:43:35] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Client Quit)
[19:49:24] *** Joins: keinbock (~pepsi@2a02:4780:1:1::1:a856)
[19:50:14] *** Joins: ketiv (~ketiv@sgyl-44-b2-v4wan-162733-cust126.vm6.cable.virginm.net)
[19:51:17] *** Quits: NovumDXW (~NovumDXW@2409:8a28:3610:29b0:74d8:d16b:92b3:8d89) (Ping timeout: 240 seconds)
[19:52:15] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[19:52:26] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:52:28] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[19:52:48] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:53:24] <theseb> *p = 0xdeadbeef sets the VALUE the pointer points to....what about in declarations?..e.g. int *p = 0xdeadbeef; ?
[19:53:24] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:53:35] <theseb> i think latter sets the ADDRESS yes!?
[19:54:15] <imMute> yes, it inisializes the pointer to point at 0xdeadbeef
[19:54:52] *** Quits: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca) (Quit: NightShadow)
[19:58:20] <theseb> imMute: you agree might be problematic since people are hard wired to think putting * in from of var means "I'm setting the value not the address" ?
[19:58:49] *** Joins: pottsy (~pottsy@129.227.183.244)
[19:58:55] <imMute> perhaps, but then you think about it a bit and you realize that setting the address is the only thing that makes sense.
[19:59:07] <theseb> imMute: yes i agree!
[19:59:22] <theseb> imMute: still is quirky at first
[20:00:03] <imMute> just wait till you learn about "inline"
[20:00:17] <theseb> imMute: ;)
[20:00:53] *** Joins: Crassus (~Crassus@user/crassus)
[20:03:50] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:05:06] *** Joins: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[20:05:30] *** Parts: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca) ()
[20:05:50] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[20:06:22] *** Joins: pulse (~pulse@user/pulse)
[20:06:39] *** Joins: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[20:06:45] *** Quits: executivePan (~uglyQuota@187.103.114.125) (Quit: Leaving)
[20:07:19] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:09:23] *** Quits: Guest6915 (~Guest69@ip72-199-239-162.sd.sd.cox.net) (Quit: Connection closed)
[20:09:23] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:12:13] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:18:56] <theseb> if i malloc say 10 bytes....how can i set them all in one line?
[20:19:39] <zz> calloc
[20:24:49] <theseb> zz: c has memset but can it accept massive hex vals like 0xaabbccddeeffaabbccddeeff ?
[20:25:44] <kalven> memset sets byes, so no
[20:26:59] *** Quits: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:28:54] <cbreak> theseb: how about you use std::vector? :)
[20:33:17] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[20:33:34] *** Quits: proller (~p@2a02:6b8:0:40c:d672:80ce:1436:e46b) (Ping timeout: 250 seconds)
[20:33:39] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[20:33:42] *** Joins: dextercd (~dexter@2a02:a450:f25d:1:76d4:35ff:fefe:34c)
[20:36:21] *** Joins: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf)
[20:38:23] *** Joins: jw4 (~Thunderbi@user/jw4)
[20:39:03] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[20:39:27] *** Joins: orthoplex64 (~crm@70.120.0.94)
[20:46:07] *** Quits: jw4 (~Thunderbi@user/jw4) (Quit: jw4)
[20:46:43] *** Joins: Atque (~Atque@user/atque)
[20:46:58] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:48:31] *** Quits: NightShadow (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca) (Quit: NightShadow)
[20:49:51] *** Joins: Betal (~Betal@user/betal)
[20:57:11] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[20:58:31] *** Quits: stonkey2 (~stonkey@user/stonkey) (Quit: Leaving)
[20:58:56] *** Quits: tbcr (~tbcr@107.13.189.161) (Killed (NickServ (GHOST command used by tbcr_!~brclark@user/tbcr)))
[20:59:44] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[21:03:02] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:145:48aa:c4b6:f056)
[21:05:11] *** Quits: PureSine_ (~PureSine@109.162.188.198) (Quit: Leaving)
[21:12:29] *** Joins: proller (~p@2a02:6b8:0:40c:881b:ea30:b0df:3b74)
[21:13:30] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[21:13:52] *** Quits: magla (~gelignite@55d4381b.access.ecotel.net) (Ping timeout: 250 seconds)
[21:13:58] *** Joins: geli (~gelignite@55d4fbf8.access.ecotel.net)
[21:16:02] *** Quits: sigma_ (~sigma@164.215.224.240) (Ping timeout: 240 seconds)
[21:24:22] *** Joins: rgrinberg (~textual@2806:101e:7:2b:f4e6:13e8:c8a9:3722)
[21:26:22] *** Joins: xkuru (~xkuru@user/xkuru)
[21:30:50] *** Joins: stonkey (~stonkey@user/stonkey)
[21:36:05] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:36:23] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:41:07] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:15] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:15] *** ChanServ sets mode: +v npaperbot
[21:52:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-020-016.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:54:45] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[21:55:46] *** Joins: stonkey2 (~stonkey@user/stonkey)
[21:57:53] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[22:02:28] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:04:01] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:04:18] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:04:20] *** Joins: stonkey (~stonkey@user/stonkey)
[22:04:39] *** Joins: seninha (~seninha@user/seninha)
[22:04:51] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[22:05:10] *** Quits: ketiv (~ketiv@sgyl-44-b2-v4wan-162733-cust126.vm6.cable.virginm.net) (Quit: WeeChat 3.3)
[22:05:30] *** Joins: chozorho (~chozorho@2601:146:300:c30::29ed)
[22:05:52] *** Quits: stonkey2 (~stonkey@user/stonkey) (Ping timeout: 250 seconds)
[22:08:17] *** Quits: proller (~p@2a02:6b8:0:40c:881b:ea30:b0df:3b74) (Ping timeout: 240 seconds)
[22:12:03] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[22:14:19] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[22:14:58] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:15:19] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:145:48aa:c4b6:f056) (Quit: Konversation terminated!)
[22:16:15] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[22:19:44] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:32:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c) (Ping timeout: 240 seconds)
[22:35:03] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[22:35:51] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[22:36:38] *** Quits: fivegruel (~fivegruel@HSI-KBW-095-208-248-017.hsi5.kabel-badenwuerttemberg.de) (Ping timeout: 250 seconds)
[22:38:21] *** Joins: Pook (~Pook@2001:8a0:f996:1400:d899:6be4:9e1e:78eb)
[22:42:34] *** Quits: pottsy (~pottsy@129.227.183.244) (Quit: Leaving)
[22:43:45] *** Quits: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf) (Quit: Konversation terminated!)
[22:43:47] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[22:46:36] *** Joins: sbrothy (~sbrothy@192038134088.mbb.telenor.dk)
[22:47:06] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:47:47] <sbrothy> Hi. I'm a little rusty so bear with me please. I guess this is really a compiler-related question but again.... If I include a bunch of headers via a precompiled header I don't actually need to link against the APIs unless I actually call them do I?
[22:48:28] <PJBoy> #c++-general for that question
[22:49:12] *** Joins: dhwohrom^ (~dhwohrom@wsip-98-188-242-61.mc.at.cox.net)
[22:51:25] <sbrothy> thx
[22:51:50] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:56:02] *** Quits: pizdets (~pizdets@183.182.111.203) (Ping timeout: 240 seconds)
[22:56:50] *** Joins: pizdets (~pizdets@183.182.110.188)
[23:00:09] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[23:00:33] *** Joins: orthoplex64 (~crm@70.120.0.94)
[23:02:48] *** Joins: AmR (~AmREiSa@41.36.185.103)
[23:03:33] <pa> is it ok to concurrently read from an unordered_map while at most one at a time is only inserting elements ?
[23:03:54] <pa> in other words doing find(), and if find returns end, locking and inserting
[23:05:53] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[23:05:54] *** Joins: Dreg- (~Dreg@fr33project.org)
[23:06:53] <zz> No
[23:07:16] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:c4ae:efce:e92e:a54f:2046) (Remote host closed the connection)
[23:07:32] <Praise> pa: inserting could move the data you are trying to read. you have to lock every access.
[23:07:35] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[23:08:39] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82)
[23:08:39] <pa> does data in unordered map get moved?
[23:08:53] <zz> Then again, insertion is (for u_map) specified not to invalidate iterators, so if you already have an iterator..
[23:09:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:09:38] <zz> (hm... seems it's not safe on rehash - https://en.cppreference.com/w/cpp/container/unordered_map)
[23:10:04] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:10:24] <zz> that would imply that node_type may be indirection-free
[23:11:02] *** Quits: jhms (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:11:12] <pa> what if i make it large enough from the start?
[23:11:21] <pa> so to avoid rehash
[23:12:17] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[23:12:24] <zz> still, the way I read it, you'd have to obtain the iterator under lock
[23:13:25] *** Joins: Joss (~joss@user/Joss)
[23:13:39] <zz> the .find operation (to obtain said iterator) may access data structures that are modified during .insert, even if the insert itself does not trigger a rehash
[23:13:58] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:453d:d51a:32ef:ac82) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:14:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:15:10] *** Quits: Joss (~joss@user/Joss) (Client Quit)
[23:15:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e9a6:1557:3796:678c)
[23:15:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:16:37] <pa> https://stackoverflow.com/a/41939654 if i don't misunderstand this answer, find() behaves as const for thread safety
[23:16:49] *** Quits: beagles (~beagles@142.162.188.116) (Ping timeout: 256 seconds)
[23:17:55] *** Quits: dhwohrom^ (~dhwohrom@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[23:18:15] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[23:19:45] <pa> *should behave
[23:21:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:22:32] *** Quits: sbrothy (~sbrothy@192038134088.mbb.telenor.dk) (Ping timeout: 240 seconds)
[23:22:53] *** Joins: shadow_ (~shadow@lnsm3-montreal02-142-119-4-156.internet.virginmobile.ca)
[23:23:18] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[23:23:24] *** Joins: beagles (~beagles@142.162.188.116)
[23:26:09] *** Joins: proller (~p@2a02:6b8:b081:8014::1:1e)
[23:33:50] *** Quits: jsbach (~jsbach@2a01:c23:613f:6700:91c6:e70b:f7c4:5ea9) (Ping timeout: 250 seconds)
[23:37:03] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:d0b9:9f3c:59d9:5e72)
[23:39:53] <ville> pa: yes you can call .find() from multiple threads at same time. you can't call any non-const member together with any const or non-const from multiple threads
[23:43:17] *** Quits: beagles (~beagles@142.162.188.116) (Ping timeout: 256 seconds)
[23:43:24] <ville> the standard library's "const means thread-safe" is rather weak guarantee that way. it's thread-safe amongst other const member functions
[23:44:52] *** Joins: beagles (~beagles@142.162.188.116)
[23:45:17] *** Joins: zen_coder (~Axel@2a02:8109:a280:2d8d:6140:c4c6:bf9:2254)
[23:45:45] *** Quits: zen_coder (~Axel@2a02:8109:a280:2d8d:6140:c4c6:bf9:2254) (Client Quit)
[23:45:55] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[23:46:52] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6140:c4c6:bf9:2254)
[23:49:01] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:50:38] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Remote host closed the connection)
[23:59:06] *** Joins: jsbach (~jsbach@2a01:c23:613f:6700:1138:8625:6687:4d6c)
