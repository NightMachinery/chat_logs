[00:00:01] <PJBoy> and AFAIK no compiler has any ability to let the user control those things
[00:00:03] <AliceMeows> I don't mind having the compiler decide however in some cases I'd like to be able to control it
[00:00:09] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[00:00:23] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[00:00:27] <PJBoy> your macros don't solve the problem
[00:00:32] <PJBoy> macros are just a list of statements
[00:00:36] <PJBoy> or an expression
[00:00:42] <PJBoy> they don't give you control over inlining
[00:01:02] <AliceMeows> Yes but like I said I want to insert those statements instead of wrapping them in a lambda or ugly macros
[00:01:19] <T`aZ> kit-ten: and how is that problem related to selecting at compile time which function is available ?
[00:01:21] <PJBoy> inserting statements is what a macro does
[00:01:30] <PJBoy> and it doesn't give you any control over inlining that code
[00:01:41] <PJBoy> the compiler can choose to write any arbitrary code in a separate function
[00:01:56] <PJBoy> whether it's in a macro, lambda, or written inline
[00:01:56] <AliceMeows> I think you're misunderstanding what I'm saying
[00:03:06] <PJBoy> wouldn't be the first misunderstanding I've ever made
[00:03:24] <PJBoy> you were saying you wanted to be able to control inlining
[00:03:40] <AliceMeows> What I want is to insert statements without macros
[00:03:50] <kit-ten> t`az i want to be able to, when i add a new function, not have to append a new else if
[00:04:04] <PJBoy> so that's what functions and function-like things do
[00:04:35] <AliceMeows> for(auto i = very_long_function_with_many_parameters(...); i != 0; i = very_long_function_with_many_parameters(...)) something like this is very ugly and difficult to read
[00:04:40] <Alipha> AliceMeows: nah, i think you're misunderstanding what PJBoy is saying. a compiler could, if it wanted to, create its own functions and you'd have no idea that it was happening. a compiler could rewrite `int foo(int x, int y) { return x*y + x*y; }` into `int foo(int x, int y) { return __do_mul(x, y) + __do_mul(x, y); }`
[00:05:06] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:05:09] <AliceMeows> I trust the compiler to do the right thing in that case
[00:05:14] <kit-ten> alice you can try having a wrapper function for the very long function
[00:05:21] <Alipha> AliceMeows: but not in the opposite case?
[00:05:33] <AliceMeows> What I want is to make my code more readable without macros
[00:05:57] <kit-ten> you can also try packing all the args into a struct
[00:06:22] <Alipha> also...
[00:06:24] <Alipha> !give AliceMeows first
[00:06:25] <T`aZ> kit-ten: i would then suggest to write a small wrapper that will register the given function into a std::map-like structure , linking the command to the new function
[00:06:26] <nolyc> AliceMeows: C++ as the first language? Read this: http://stackoverflow.com/a/713735/809387
[00:06:29] <Alipha> oops
[00:06:33] <Alipha> !give AliceMeows rule1
[00:06:34] <nolyc> Alipha: Error: "rule1" is not a valid command.
[00:06:36] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[00:06:37] <PJBoy> I'd write a function for that big ol' expression probably
[00:06:38] <Alipha> UHG
[00:06:50] <Alipha> ... where's the factoid?
[00:06:54] <Alipha> !rule 1
[00:06:55] <nolyc> Make things work. Profile. Make things fast. In this order.
[00:07:07] *** Joins: joilerv (~joilerv@162.43.194.16)
[00:07:08] <AliceMeows> Its not so much about performance but about readability
[00:07:14] <PJBoy> !give Alipha rule 100
[00:07:15] <nolyc> Alipha: Stop guessing rule numbers, you insolent biped. See !factoids.
[00:07:21] *** Quits: joilerv (~joilerv@162.43.194.16) (Client Quit)
[00:07:28] <T`aZ> kit-ten: then parsing is just reading the value for the give key(being the command)
[00:07:30] <kit-ten> t`az ah ill look into that, i havent messed with many of the c++ features yet besides classes and stuff
[00:07:30] <Alipha> PJBoy: ... did you write that just now? :-P
[00:07:40] <kit-ten> thx!
[00:07:40] *** Parts: icedtea (~paul@141.217.247.7) (Leaving)
[00:07:44] <kit-ten> ill look into it
[00:08:04] <PJBoy> hahaha, a reasonable suspicion
[00:08:25] *** Joins: peacefulman (~paul@141.217.247.7)
[00:08:47] <Alipha> AliceMeows: here's your readable solution: https://godbolt.org/z/cac8be4Wo
[00:09:52] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:91c7:2a85:731c:7bf8)
[00:11:21] <AliceMeows> Yes it is readable however it lambdas don't really solve it the same way as macro would or preferably compile time alternative to macros
[00:11:49] <sprout_> https://egel-language.blogspot.com/2022/01/c20-migration-woes.html <- start of migration process to C++20 modules.  decided to document it
[00:13:34] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[00:15:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:15:30] <AliceMeows> I suspect that rust's macros are similar to what I want to do in c++ however I'm not rust developer and don't know it that well to be sure
[00:18:50] <Kit> is it possible to append to a macro?
[00:18:52] <Kit> like
[00:19:19] <Kit> #define macro macro appended
[00:19:30] <PJBoy> geordi ^
[00:19:41] <PJBoy> I thought that worked
[00:20:08] <Kit> or maybe to append to a func
[00:20:14] <PJBoy> << macro; #define macro 1\ #define macro macro 0
[00:20:14] <geordi> error: "macro" redefined
[00:20:15] <Kit> idk
[00:20:18] <Kit> oh
[00:20:19] <PJBoy> anyways there you go
[00:20:44] <Kit> oh...
[00:20:53] <Kit> wait
[00:20:54] <Kit> hold on
[00:21:19] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:22:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:22:37] <Kit> #define temp mymacro  #undef mymacro  #define mymacro temp appended  #undef temp
[00:22:44] <Kit> would this work?
[00:22:52] <anyone> if you have to ask, no
[00:24:04] <PJBoy> << mymacro; #define mymacro 1\ #define temp mymacro\ #undef mymacro\ #define mymacro temp 0\ #undef temp
[00:24:04] <geordi> error: 'temp' was not declared in this scope; did you mean 'tm'?
[00:24:26] <Kit> oh
[00:24:33] <Kit> so
[00:24:52] <Kit> it doesnt evaluate macros before replacing them
[00:24:54] <Kit> fuck.
[00:24:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:25:27] <Kit> hmm
[00:25:29] <Kit> how about
[00:26:03] <Kit> nope
[00:26:06] <Kit> nvm
[00:26:33] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[00:26:43] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[00:26:48] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:27:21] *** Quits: furrymcgee (~devuan@cgn-89-1-208-165.nc.de) (Quit: leaving)
[00:29:39] <AliceMeows> expr MyExpr = func(1, 2, 3); /*new keyword 'expr' as alternative to macros*/ while(MyExpr);
[00:29:55] <AliceMeows> What would be wrong with something like this?
[00:30:22] <cbreak> what would be useful with something like that?
[00:31:09] <cbreak> auto Mew = [](){ return func(1, 2, 3); }; while (Mew()) {}
[00:31:17] <AliceMeows> I give up
[00:31:24] <cbreak> good.
[00:31:30] <cbreak>  empty ; is shitty style.
[00:31:40] <cbreak> it shouldn't be used :)
[00:31:51] <Kit> can i use std::map with char array style string or should i use std::string
[00:32:01] <cbreak> Kit: use std::string
[00:32:11] <imMute> Kit: you can, but you'll get it wrong. just use std::string.
[00:32:16] <Kit> ok
[00:32:54] <Kit> i ask because ive gotten so used to using `char*` for strings and its kinda hard to break away to use `std::string` instead
[00:33:00] <AliceMeows> cbreak: if you seen my earlier example you'd understand what it aims to solve which is mostly readability
[00:33:47] <cbreak> empty ; is bad for readability though :/
[00:34:03] <PJBoy> cbreak's example looks readable to me
[00:34:12] <Alipha> auto Mew = std::bind(func, 1, 2, 3); while(Mew()) {}  // people are used to lambdas though, though i'd prefer the lambda, actually
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:17] <BurumaSerafuku> stop using macros
[00:34:40] <AliceMeows> I wish I could
[00:34:46] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[00:35:00] <cbreak> Kit: char* aren't strings though
[00:35:02] <cbreak> they're char pointers
[00:35:07] <Kit> i know
[00:35:09] <Kit> i meant
[00:35:14] <Kit> er
[00:35:15] <Kit> nvm
[00:35:18] <Kit> i get it now
[00:35:32] <cbreak> with std::string you get value identity
[00:35:39] <cbreak> with pointers you get object identity
[00:35:48] <cbreak> (and memory leaks :D)
[00:36:21] <AliceMeows> Not if you're being careful
[00:36:43] <cbreak> yes. Even if you're careful.
[00:36:54] <cbreak> becuase std::map doesn't allow you to be careful with its keys if you use char*
[00:37:45] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 250 seconds)
[00:38:43] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:91c7:2a85:731c:7bf8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:39:04] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[00:41:55] *** Joins: gdd (~gdd@129.199.146.230)
[00:42:54] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[00:46:37] *** Quits: kit-ten (~u0_a391@2600:380:a435:d1e6:f902:eb98:9c0d:5b2e) (Ping timeout: 240 seconds)
[00:48:21] *** Quits: magla (~gelignite@55d483f5.access.ecotel.net) (Quit: Stay safe!)
[00:51:03] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:52:04] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[00:53:51] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:55:53] *** Joins: Viewday118 (~Viewday@user/viewday)
[00:57:48] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:57:49] *** Viewday118 is now known as Viewday11
[00:58:43] *** Joins: crankslider (~slidercra@user/slidercrank)
[01:02:28] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:03:32] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[01:03:33] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:03:48] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[01:03:49] *** Joins: spithash (~spithash@user/spithash)
[01:05:58] *** Joins: malloy (~jimery@116.30.220.175)
[01:06:09] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[01:08:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:10:40] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:14:55] <BurumaSerafuku> [16:06] <AliceMeows> Not if you're being careful <== the whole point of using the correct C++ features is to let the compiler being careful for us
[01:17:06] <AliceMeows> I've never argued against it
[01:17:44] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:18:48] <CarloWood> I want to have class members that I can use without having to add '*' in front of them, or having to use a -> all the time; in other words, they can't be pointers Foo*.  But, I can't initialize them during the construction of that class...
[01:19:16] <CarloWood> Is the only solution to write my own wrapper around a pointer? :/
[01:20:55] <kalven> :|
[01:21:00] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:21:19] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[01:21:29] <T`aZ> make a factory-like function that will give the properly state/ctor for those member variables to your main class ctor, so you can simply instantiate them normally ?
[01:21:38] <AliceMeows> CarloWood: store reference?
[01:23:26] <CarloWood> Maybe you mean https://en.cppreference.com/w/cpp/utility/functional/reference_wrapper ?
[01:23:41] <AliceMeows> You could store T&
[01:24:26] <CarloWood> That is not different; that normally requires immediate initialization.
[01:24:49] <CarloWood> Nevertheless... I am not sure I understand what I want... lemme think about it a bit more.
[01:24:57] <T`aZ> you also might have a design issue
[01:25:34] <CarloWood> That's an easy one. I can't have a design issue.
[01:25:38] <CarloWood> I don't have a design!
[01:26:06] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:26:25] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[01:27:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[01:27:15] <AliceMeows> CarloWood: https://godbolt.org/z/n9MvK8qKo
[01:28:31] <CarloWood> Seriously though. *rubberduck* I have a Window class that contains application specific stuff - like the render graph of the application.  Window is derived from vulkan::SynchronousWindow - which defines more general (common) things of vulkan applications.
[01:29:22] <CarloWood> In Window::create_render_passes() I want to construct both, render pass objects and build a render graph with them. The latter looks like:
[01:29:31] <CarloWood> m_render_graph = main_pass[~depth]->stores(~output) >> imgui_pass->stores(output);
[01:30:16] <CarloWood> Where main_pass, depth, output and imgui_pass are respectively a RenderPass, an Attachment, and Attachment and a RenderPass.
[01:30:53] <CarloWood> For reasons I do NOT want to use *main_pass, *depth, *output or *imgui_pass.
[01:31:44] <AliceMeows> Then abstract it
[01:32:11] <CarloWood> However - in Window::draw() I have the need to refer back to the render pass objects. So, they can no longer be local variables of create_render_passes, which they are now. They are currently declared in that function as:
[01:32:19] <CarloWood>     auto& main_pass = m_render_graph.create_render_pass("main_pass");
[01:32:19] <CarloWood>     auto& imgui_pass = m_render_graph.create_render_pass("imgui_pass");
[01:32:19] <CarloWood>     auto& output = swapchain().presentation_attachment();
[01:32:30] *** Joins: walterwhip (~www@user/walterwhip)
[01:33:13] <CarloWood> I can not execute that code during the creation of the Window class. At that point nothing exists, certainly not the swapchain.
[01:33:41] <CarloWood> However...
[01:34:28] <AliceMeows> You might want to ask in c++-general
[01:34:33] <CarloWood> For one thing, I forgot why I am getting a reference to each render pass from the m_render_graph object :/... I made that change later, so it was needed...
[01:35:07] <CarloWood> I can continue there :P
[01:35:31] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:39:10] *** Quits: techsurvivor (~don@89.45.90.193) (Ping timeout: 256 seconds)
[01:39:50] *** Joins: DaftMouse (~DaftMouse@177.54.124.1)
[01:40:37] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[01:40:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:54] *** ChanServ sets mode: +v npaperbot
[01:41:11] *** Joins: techsurvivor (~don@94.198.42.171)
[01:49:22] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[01:55:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:56:10] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:57:13] *** Quits: jsbach (~jsbach@2a01:c22:b171:2800:661:8ac5:856b:c920) (Ping timeout: 268 seconds)
[01:58:32] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[01:59:20] *** Joins: Atque (~Atque@user/atque)
[02:00:49] *** Quits: peacefulman (~paul@141.217.247.7) (Quit: Leaving)
[02:04:51] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[02:06:49] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:07:29] *** Joins: walterwhip (~www@user/walterwhip)
[02:15:17] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:18:04] *** Joins: walterwhip (~www@user/walterwhip)
[02:19:16] *** Joins: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c)
[02:26:24] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:27:01] *** Joins: walterwhip (~www@user/walterwhip)
[02:27:35] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[02:33:01] *** Quits: pizdets (~pizdets@183.182.111.169) (Ping timeout: 240 seconds)
[02:33:55] *** Joins: pizdets (~pizdets@183.182.115.239)
[02:40:46] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:42:32] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:42:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:43:21] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:43:46] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[02:44:16] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[02:44:22] *** Quits: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c) (Remote host closed the connection)
[02:44:54] *** Joins: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c)
[02:45:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:45:34] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[02:46:56] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[02:52:46] *** Quits: rochadt (~rochadt@24.148.29.135) (Ping timeout: 260 seconds)
[02:55:24] *** Joins: rochadt (~rochadt@24.148.29.135)
[02:59:37] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 240 seconds)
[03:02:47] *** Joins: walterwhip (~www@user/walterwhip)
[03:03:35] *** Quits: AmR| (~AmREiSa@156.207.253.69) (Quit: Konversation terminated!)
[03:04:15] *** Joins: CaCode (~CaCode@user/cacode)
[03:05:20] *** Quits: rochadt (~rochadt@24.148.29.135) (Quit: WeeChat 2.8)
[03:07:59] <mathe8787> What is the purpose of using a pointer and new for the A* = new A(); class?  https://bpa.st/5XDA
[03:12:19] <Shell> probably that you're following an old intro book and it wanted to teach you about pointers and new.
[03:14:22] *** Quits: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net) (Ping timeout: 256 seconds)
[03:15:41] <CarloWood> If I declare a member variable of a non-const object to be const, aka:  struct A { B const b; }; int main() { A a; /* not const */ }
[03:15:51] <mathe8787> Shell, ok so there is no reason to do this?
[03:16:07] <CarloWood> Then is it legal to still write to mutable members of A::b?
[03:17:30] <Shell> mathe8787: not in this particular case.
[03:18:51] <Hello72> CarloWood: wouldn't that defeat the purpose of const
[03:18:58] <Hello72> and i assume you mean a.b
[03:19:30] <CarloWood> mathe8787: I think that what matters here is which GetName function is called, and in the next paragraph they might introduce virtual and so forth.  That e and b are addressed through pointers is really not relevant.
[03:19:46] <mathe8787> ok thanks you two
[03:22:45] <CarloWood> Hello72: it's a yes/no question :).  I don't care about purpose (unless you want to know this yourself)
[03:22:58] <CarloWood> (no it doesn't)
[03:23:52] <CarloWood> I am pretty sure this is illegal:
[03:24:48] <CarloWood> { a.m = 42; } struct A { int n; mutable int m; };  A const a;
[03:24:48] <geordi> error: uninitialized 'const a'
[03:24:52] <CarloWood> sigh
[03:24:59] <CarloWood> { a.m = 42; } struct A { int n; mutable int m; };  A const a{};
[03:25:00] <geordi>  
[03:25:13] <CarloWood> Even though the compiler compiles it.
[03:25:24] <anyone> because mutable is an exception to const
[03:25:45] <CarloWood> that's why it compiles yes.
[03:25:53] <CarloWood> but it is still illegal
[03:26:19] <CarloWood> however, and that was the question, is it still illegal when 'a' is a member of a non-const object?
[03:26:25] <CarloWood> Aka:
[03:26:27] <anyone> { S s; const S *t = &s; t->foo(); } struct S { mutable int v; void foo() const { v = 42; } };
[03:26:27] <geordi> warning: 't' may be used uninitialized
[03:26:39] <anyone> however that should be legal
[03:27:16] <anyone> and that's kinda the usecase for mutable
[03:27:30] <CarloWood> { b.a.m = 42; } struct A { int n; mutable int m; }; struct B { int b; A const a; }; B b{};
[03:27:31] <geordi>  
[03:27:56] <CarloWood> Now 'a' is still declared as 'A const a', but inside B b, and b is not const.
[03:28:37] *** Joins: N4buc0 (~N4buc0@2804:7f4:348a:16c8:b4b9:1d36:c752:b3ce)
[03:28:56] <CarloWood> The idea is of course that in the first case the compiler might decide to actually put 'a' in a read-only memory, because it is const.  While that should never happen in the second case.
[03:29:06] <anyone> 'a' is not put into ro-memory
[03:31:35] <anyone> As soon as an object type has a constructor or a mutable keyword, it is no longer eligible to be put into rodata, but lands in bss (at least on my particular platform).
[03:32:06] *** Quits: N4buc0 (~N4buc0@2804:7f4:348a:16c8:b4b9:1d36:c752:b3ce) (Remote host closed the connection)
[03:32:43] <CarloWood> That might be implementation dependent; I'd like to know what the standard says about that.
[03:35:08] <anyone> https://eel.is/c++draft/dcl.spec#dcl.stc-8
[03:36:09] *** Joins: N4buc0 (~N4buc0@200.146.13.23.dynamic.dialup.gvt.net.br)
[03:37:56] <anyone> more specifically, https://eel.is/c++draft/dcl.spec#dcl.type.cv-4 has exaclty that example
[03:38:10] *** Quits: crankslider (~slidercra@user/slidercrank) (Read error: Connection reset by peer)
[03:38:22] <anyone> (near const Y y)
[03:38:30] <CarloWood> yes I saw thx
[03:39:17] <CarloWood> It isn't super specific about it, but from that I'd conclude that putting y in ro member isn't allowed.
[03:39:26] <CarloWood> memory*
[03:40:12] <CarloWood> Maybe the original remark had to do with const_cast.
[03:40:41] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:41:25] *** Quits: techsurvivor (~don@94.198.42.171) (Ping timeout: 256 seconds)
[03:41:51] <anyone> The standard does not specifically discuss/know readonly memory. There simply are mutable and immutable objects (remember string literals?)
[03:42:20] <anyone> Speaking of string literals, they're immutable, and modifying them is UB.
[03:43:15] <anyone> but that's the same thing as dcl.type.cv-4's mentions of UB
[03:43:31] *** Joins: techsurvivor (~don@cpe-70-114-183-69.austin.res.rr.com)
[03:45:03] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:46:14] <mathe8787> mybrush = make_unique<Pencil>(); mybrush->draw();
[03:46:21] <mathe8787> why is -> used here?
[03:46:41] <mathe8787> isnt that just for "this"?
[03:46:42] <anyone> because mybrush is a unique_ptr<>, but draw is a member function of Pencil::, not of unique_ptr
[03:46:56] <CarloWood> make_unique returns a std::unique_ptr, which acts like a pointer.
[03:47:46] <CarloWood> It isn't really a  Pencil*  but rather some object that overloaded the operator->  to return a Pencil*.
[03:49:07] <anyone> overloaded op-> is kinda special; not only does it return a new type, but the -> is also applied again right away.
[03:49:53] <anyone> x->y in those circumstances really is ( x.operator->() )-> y
[03:50:30] <anyone> elegant syntactical solution though!
[03:52:32] *** Quits: emerent (~quassel@p200300cd5724fde6ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:52:32] *** Joins: chozorho (~chozorho@2601:146:300:c30::d584)
[03:52:53] <anyone> x.get()->y is another form of the same
[03:53:06] <anyone> (for unique_ptr/shared_ptr, anyway)
[03:54:45] <mathe8787> so when were dealing with member functions, we can always use ->?
[03:54:48] *** Joins: ferdna (~ferdna@user/ferdna)
[03:55:06] <RandomReader> it's a member access operator for pointers
[03:55:10] <RandomReader> what are you using for learning material?
[03:55:21] <mathe8787> just slides
[03:55:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:55:29] <mathe8787> and google :)
[03:55:33] *** Joins: slidercrank (~slidercra@user/slidercrank)
[03:56:06] <RandomReader> ah, that approach won't get you very far with C++ .. it's complex, and the syntax is highly contextual, which means the only way to make sense of it is with long-form explanations of the underlying concepts
[03:56:07] <mathe8787> ah ok i get it...your first comment made sense
[03:56:15] <RandomReader> and since C++ is older, the best material is in book form
[03:56:22] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:56:25] <RandomReader> but there are some other options
[03:56:26] <RandomReader> !basics
[03:56:27] <nolyc> Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[03:56:54] <mathe8787> thanks
[03:56:55] <RandomReader> cppreference may help for your current approach, learncpp may fill in some blanks, the stackoverflow link is a book list
[03:57:24] <mathe8787> i mean this is from slides from a lecture im taking
[03:57:34] <RandomReader> ah ok
[03:58:09] <mathe8787> nice lecture but theres a lot they jump over...its probably too much for one semester for them
[03:58:17] *** Joins: walterwhip (~www@user/walterwhip)
[03:59:38] <RandomReader> given object.member,   pointer->member is a shortcut for (*pointer).member
[03:59:52] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[04:00:36] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[04:00:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[04:01:00] <anyone> given object.member, object->member is a shortcut for object.operator->()->member. Love the vis-a-vis contrast
[04:01:51] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[04:02:38] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:35fa:dcbe:dd4e:5a43)
[04:02:42] *** Joins: Betal (~Betal@user/betal)
[04:02:49] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Remote host closed the connection)
[04:03:00] *** Quits: rgrinberg (~textual@2806:101e:7:b1fc:11d3:8083:cd07:346c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:01] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[04:05:11] *** Joins: emerent (~quassel@p200300cd57025366ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:09:37] *** Joins: Figworm (FiggyWitIt@user/figworm)
[04:09:49] *** Quits: emerent (~quassel@p200300cd57025366ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:10:31] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:10:36] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[04:11:13] *** Quits: DaftMouse (~DaftMouse@177.54.124.1) (Remote host closed the connection)
[04:13:47] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[04:13:53] *** Joins: emerent (~quassel@p5b265a25.dip0.t-ipconnect.de)
[04:13:59] <mathe8787> anyone, what is object.operator?
[04:14:15] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[04:16:42] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:19:20] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[04:20:49] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[04:24:48] *** Joins: walterwhip (~www@user/walterwhip)
[04:24:54] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[04:25:37] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[04:26:08] *** Joins: frost (~frost@user/frost)
[04:29:32] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Read error: Connection reset by peer)
[04:32:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[04:35:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:37:48] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:33] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:43:43] *** Joins: walterwhip (~www@user/walterwhip)
[04:48:57] *** Quits: evelyette (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:49:00] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[04:53:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d171:6c14:e395:f91b) (Ping timeout: 240 seconds)
[05:01:30] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[05:03:18] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[05:04:37] *** Parts: King_DuckZ (~quassel@2a00:66c0:1:1::51) (See you later)
[05:05:09] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:05:17] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[05:05:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:35fa:dcbe:dd4e:5a43) (Ping timeout: 240 seconds)
[05:05:45] *** Joins: walterwhip (~www@user/walterwhip)
[05:05:51] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 256 seconds)
[05:06:53] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:07:11] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[05:07:13] *** Quits: Pook (~Pook@2001:8a0:f996:1400:2d26:18c4:7a5f:9cd6) (Quit: Leaving)
[05:07:25] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[05:07:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:09:58] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[05:11:38] *** smallvil_ is now known as smallville7123
[05:12:05] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[05:13:22] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Ping timeout: 256 seconds)
[05:16:48] *** Joins: walterwhip (~www@user/walterwhip)
[05:17:23] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[05:23:31] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:23:59] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[05:24:19] *** Joins: seninha (~seninha@user/seninha)
[05:29:21] *** Joins: frost (~frost@user/frost)
[05:29:45] *** Joins: walterwhip (~www@user/walterwhip)
[05:33:29] *** Quits: walterwhip (~www@user/walterwhip) (Client Quit)
[05:35:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[05:36:57] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:39:13] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[05:40:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:56] *** ChanServ sets mode: +v npaperbot
[05:46:14] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Ping timeout: 256 seconds)
[05:46:35] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[05:50:14] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[05:50:19] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[05:50:31] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[05:51:29] *** Quits: Brewster (~Brewster@104.145.226.5) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[05:51:40] *** Joins: ethoxy (~root@bison.sh3ll.ru)
[05:51:44] *** Joins: Brewster (~Brewster@104.145.226.5)
[05:52:19] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[05:52:21] *** Joins: malloy (~jimery@116.30.220.175)
[05:54:57] *** Joins: frost (~frost@user/frost)
[05:56:26] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[05:58:48] *** Joins: Tokamak_ (~Tokamak@172.58.188.35)
[05:59:20] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[06:00:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[06:01:32] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:06:29] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 256 seconds)
[06:08:13] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:08:27] *** Joins: walterwhip (~www@user/walterwhip)
[06:11:35] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[06:13:24] *** Joins: xsperry (~xs@user/xsperry)
[06:13:56] *** Joins: frost (~frost@user/frost)
[06:14:45] *** Joins: peacefulman (~paul@141.217.247.7)
[06:15:45] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:60fb:64b1:ca3d:1cb1)
[06:15:51] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:60fb:64b1:ca3d:1cb1) (Remote host closed the connection)
[06:16:06] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[06:17:10] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[06:17:15] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[06:18:47] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[06:20:25] *** Quits: kusanagi (~kusanagi@user/kusanagi) (Read error: Connection reset by peer)
[06:21:58] *** Joins: kusanagi (~kusanagi@user/kusanagi)
[06:22:49] *** Joins: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3)
[06:22:53] *** Quits: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3) (Excess Flood)
[06:25:38] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[06:28:33] *** Joins: rgrinberg (~textual@187.223.71.231)
[06:28:53] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:28:59] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:29:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[06:31:11] *** Joins: walterwhip (~www@user/walterwhip)
[06:32:28] *** Parts: peacefulman (~paul@141.217.247.7) (Leaving)
[06:33:56] *** Joins: Lazenca (~lazenca@user/lazenca)
[06:38:39] *** Joins: BobTheTomato (~paul@141.217.247.7)
[06:38:58] *** Parts: BobTheTomato (~paul@141.217.247.7) ()
[06:39:32] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:44:36] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 256 seconds)
[06:46:13] *** Joins: BobTheTomato (~paul@141.217.247.7)
[06:46:38] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[06:46:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:47:00] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:47:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:47:33] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[06:49:00] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[06:50:37] *** Joins: teepee (~teepee@openscad/teepee)
[06:51:12] *** Joins: frost (~frost@user/frost)
[06:58:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:03:26] *** Joins: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620)
[07:11:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[07:12:20] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:21:55] *** Joins: frost (~frost@user/frost)
[07:26:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[07:31:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:accc:f920:44e1:6c44)
[07:31:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:accc:f920:44e1:6c44) (Changing host)
[07:31:46] *** Joins: skapata (~Skapata@user/skapata)
[07:32:33] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:32:46] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:34:17] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:34:43] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:35:07] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:8634:97ff:fe6e:86ac) (Remote host closed the connection)
[07:36:00] *** Joins: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[07:38:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[07:39:34] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[07:43:15] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[07:43:57] *** Quits: techsurvivor (~don@cpe-70-114-183-69.austin.res.rr.com) (Ping timeout: 256 seconds)
[07:45:44] *** Joins: techsurvivor (~don@static-198-54-133-171.cust.tzulo.com)
[07:46:54] *** Joins: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com)
[07:48:37] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[07:49:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:49:46] *** Quits: BobTheTomato (~paul@141.217.247.7) (Ping timeout: 256 seconds)
[07:53:53] *** Joins: hinata (~hinata@2409:4042:d98:f536:2cc6:57e0:8b7e:83d8)
[07:55:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:59:30] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.29)
[07:59:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:01:54] *** Joins: smeso (~smeso@user/smeso)
[08:03:11] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[08:05:08] *** Joins: anandn (~anandn@2601:600:a27f:d92d:4c9a:7729:efdf:f7c5)
[08:06:18] *** Quits: Tokamak_ (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:07:27] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:19:24] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:19:25] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.29) (Ping timeout: 240 seconds)
[08:20:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:23:36] *** Quits: jkaye_ (~qicruser@2604:ca00:158:98c7::662:b620) (Read error: Connection reset by peer)
[08:25:52] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:27:10] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[08:31:39] *** Joins: PureSine (~PureSine@user/PureSine)
[08:32:31] *** Joins: PureSine_ (~PureSine@static.205.212.40.188.clients.your-server.de)
[08:34:41] *** Joins: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3)
[08:34:56] *** Quits: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3) (Excess Flood)
[08:35:32] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:36:14] *** Quits: PureSine (~PureSine@user/PureSine) (Ping timeout: 256 seconds)
[08:38:57] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:40:37] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:42:18] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:42:41] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:43:49] *** Joins: noarb- (~noarb@user/noarb)
[08:44:10] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[08:44:35] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[08:48:32] *** Quits: chozorho (~chozorho@2601:146:300:c30::d584) (Ping timeout: 268 seconds)
[08:48:46] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[08:48:51] *** Joins: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3)
[08:49:02] *** Quits: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3) (Excess Flood)
[08:49:09] *** Joins: chozorho (~chozorho@2601:146:300:c30::a060)
[08:50:40] *** Joins: malloy (~jimery@116.30.220.175)
[08:51:59] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:53:12] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:53:33] *** Joins: noarb (~noarb@user/noarb)
[08:54:22] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 256 seconds)
[08:56:46] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:57:55] *** Joins: rajkosto (~rajkosto@178-221-112-107.dynamic.isp.telekom.rs)
[08:58:44] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[09:04:26] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[09:06:07] *** Joins: supernova (~quassel@2405:9800:ba11:6207:9b58:d180:12a8:f790)
[09:11:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[09:11:43] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:18:11] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[09:19:21] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:22:18] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:23:30] *** Joins: programmar (~whatever@118.69.128.37)
[09:24:04] <programmar> is there anyhow i can pass a reference of a class to another included header ? for example in this code of mine https://hatebin.com/hvghdwogsr i am trying to pass the pointer of "object" to func(...) in another file but it doesn't work
[09:30:13] <leduyquang753> You need to have the definition of `ThisClass` above the function definition.
[09:31:15] *** Quits: Brett[Air] (~Brett@124.148.79.4) (Read error: Connection reset by peer)
[09:31:39] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[09:31:46] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[09:31:47] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:33:42] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[09:34:09] <programmar> ok it works, but still why is it saying that i have incomplete type ? error: invalid use of incomplete type ‘class ThisClass’, (*conn).method();
[09:34:25] <leduyquang753> Definition, not just declaration.
[09:34:57] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:35:35] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[09:36:08] <programmar> yes but in case that the declaration has to be in the main file, how is it possible ?
[09:36:31] <leduyquang753> You rearrange your code.
[09:36:54] <leduyquang753> Why can't you have the class definition in another header file?
[09:37:55] <programmar> well it could potentially mess up my codes somehow and i have to have extra effort redebugging, but if there is literally no other way then ok
[09:38:16] <programmar> that was just a testcase, not my real code, but my real code is somewhat similar
[09:38:25] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[09:40:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:00] *** ChanServ sets mode: +v npaperbot
[09:47:45] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:49:33] *** Joins: frost (~frost@user/frost)
[09:51:59] <Alipha> CarloWood: it's UB to modify a const member inside a non-const object. Because it's const, the compiler can assume that it won't change after initialization and do optimizations based upon that.
[09:53:21] <RandomReader> (it isn't necessary to reason about the storage at all, it's as simple as the presence of const and mutable)
[09:55:29] <Alipha> programmar: typically you'd put the class definition in a header file (ie, put `class ThisClass {...};` in ThisClass.h) and then have foo.h `#include "ThisClass.h"`
[09:56:00] <Alipha> Eh, lib.h. Not foo.h
[09:56:05] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:56:38] <programmar> hhmm, ok
[09:57:04] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[10:01:01] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:05:12] *** Quits: programmar (~whatever@118.69.128.37) (Quit: Leaving)
[10:08:14] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:15:11] *** Joins: AmR (~AmREiSa@156.207.253.69)
[10:18:05] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:26:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7dc8:1477:cf9c:6f84)
[10:29:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[10:32:35] <ville> CarloWood: if you want just storage then union { int x; } or alignas(int) unsigned char[sizeof(int)];?
[10:35:05] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[10:37:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[10:38:31] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:39:21] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:39:22] *** Quits: chozorho (~chozorho@2601:146:300:c30::a060) (Quit: WeeChat 3.0)
[10:39:39] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:40:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[10:40:56] *** Joins: PureSine (~PureSine@user/PureSine)
[10:41:04] *** Quits: PureSine_ (~PureSine@static.205.212.40.188.clients.your-server.de) (Quit: Leaving)
[10:46:41] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:46:52] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:46:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7dc8:1477:cf9c:6f84) (Ping timeout: 240 seconds)
[10:52:43] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:53:28] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:57:42] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:01:07] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:01:34] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:03:23] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:03:42] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:05:30] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:08:06] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:08:31] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:09:37] *** Quits: rajkosto (~rajkosto@178-221-112-107.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[11:09:50] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:09:57] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Read error: Connection reset by peer)
[11:10:02] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:10:22] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[11:16:48] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:17:03] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[11:17:32] *** Joins: frost (~frost@user/frost)
[11:17:42] *** Joins: namo (~nomo@95.87.208.95)
[11:18:23] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:20:58] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:21:03] *** Joins: jsbach (~jsbach@2a01:c22:acc2:e00:b54:b457:7345:29c8)
[11:21:04] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[11:21:05] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:23:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:26:24] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:27:05] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:27:13] *** Joins: evelyette (~Eleanor@178.79.105.181)
[11:30:09] *** Quits: hinata (~hinata@2409:4042:d98:f536:2cc6:57e0:8b7e:83d8) (Quit: Leaving)
[11:31:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:40f5:2114:f40e:465b)
[11:31:48] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:34:14] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:34:50] *** Joins: AmR| (~AmREiSa@41.36.185.103)
[11:35:09] *** Quits: AmR (~AmREiSa@156.207.253.69) (Ping timeout: 256 seconds)
[11:35:31] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:38:38] *** Joins: pizdets_ (~pizdets@183.182.115.239)
[11:38:43] *** Quits: pizdets (~pizdets@183.182.115.239) (Read error: Connection reset by peer)
[11:40:45] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:40:50] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:43:07] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:43:39] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:43:57] *** Joins: aLeSD (~aLeSD@2001:b07:6462:32c2:d0b4:84e9:62b6:1c15)
[11:44:14] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[11:46:24] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[11:59:44] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:00:35] *** Joins: MajorBiscuit (~MajorBisc@c-001-007-038.client.tudelft.eduvpn.nl)
[12:01:04] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:01:42] *** Quits: rgrinberg (~textual@187.223.71.231) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:03:59] *** AmR| is now known as AmR
[12:05:20] *** Quits: NEYi (~NEYi@109.251.216.38) (Ping timeout: 256 seconds)
[12:12:53] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:14:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:14:36] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[12:14:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[12:16:21] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:17:21] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[12:18:15] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Client Quit)
[12:22:22] *** Joins: Xardas (~Xardas@149.233.51.127)
[12:23:15] *** Joins: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3)
[12:23:25] *** Quits: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3) (Excess Flood)
[12:24:38] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[12:27:31] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[12:27:33] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[12:27:51] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:31:53] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[12:33:29] *** Joins: Schrostfutz (~Schrostfu@client-141-23-129-154.wlan.tu-berlin.de)
[12:34:57] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Ping timeout: 240 seconds)
[12:35:22] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[12:45:02] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:47:49] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 240 seconds)
[12:49:14] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[12:51:25] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[12:51:54] *** Joins: plastico (~plastico@neomutt/plastico)
[12:58:06] *** Joins: rcoote (~rcoote@2a02:908:690:a140:e79c:da85:5a01:9cdc)
[12:59:30] *** Joins: smach (~savio@177.12.48.44)
[12:59:41] *** Quits: smach (~savio@177.12.48.44) (Remote host closed the connection)
[13:00:45] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[13:00:45] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:00:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:02:57] *** Quits: Schrostfutz (~Schrostfu@client-141-23-129-154.wlan.tu-berlin.de) (Ping timeout: 240 seconds)
[13:03:19] *** Joins: furrymcgee (~devuan@cgn-89-1-208-165.nc.de)
[13:03:49] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:05:24] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[13:06:20] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[13:07:06] *** Joins: NEYi (~NEYi@109.251.216.38)
[13:09:30] *** Joins: oknenavin (~nomo@95.87.208.95)
[13:10:47] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:10:55] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[13:14:43] *** Joins: rendar (~rendar@user/rendar)
[13:15:02] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:16:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:20:32] *** Joins: Schrostfutz (~Schrostfu@client-141-23-129-154.wlan.tu-berlin.de)
[13:22:15] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Ping timeout: 256 seconds)
[13:24:35] *** Quits: bsffffff[m] (~bsffffffm@2001:470:69fc:105::1:4c49) (Quit: You have been kicked for being idle)
[13:28:31] *** Joins: jkaye_ (~qicruser@2601:281:8300:7530:81c9:15c5:1001:5f30)
[13:29:07] *** Quits: jkaye_ (~qicruser@2601:281:8300:7530:81c9:15c5:1001:5f30) (Read error: Connection reset by peer)
[13:34:16] *** RemoteHost is now known as A_Dragon
[13:36:09] *** Quits: Cyp (~cyp@213.237.85.9) (Remote host closed the connection)
[13:36:33] *** Joins: Cyp (~cyp@213.237.85.9)
[13:39:26] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[13:40:02] *** Joins: maroloccio (~marolocci@151.75.59.229)
[13:40:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:58] *** ChanServ sets mode: +v npaperbot
[13:41:28] *** Joins: Cyp (~cyp@213.237.85.9)
[13:46:03] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[13:47:38] *** Joins: Cyp (~cyp@213.237.85.9)
[13:50:45] *** Joins: aLeSD_ (~aLeSD@93-34-146-120.ip50.fastwebnet.it)
[13:51:25] *** Quits: Schrostfutz (~Schrostfu@client-141-23-129-154.wlan.tu-berlin.de) (Ping timeout: 240 seconds)
[13:53:47] *** Quits: aLeSD (~aLeSD@2001:b07:6462:32c2:d0b4:84e9:62b6:1c15) (Ping timeout: 268 seconds)
[13:57:48] *** Joins: frost (~frost@user/frost)
[14:00:38] *** Joins: jhms (~i.am@user/marlboro)
[14:00:39] *** Joins: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3)
[14:00:55] *** Quits: Jantz (~IceChat95@2407:7000:8d04:100:d4cf:4fa:7dea:40b3) (Excess Flood)
[14:01:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[14:02:29] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:05:28] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[14:06:34] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:06:49] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:09:21] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca) (Quit: WeeChat 3.4)
[14:09:33] *** Quits: Cyp (~cyp@213.237.85.9) (Excess Flood)
[14:10:05] *** Joins: Cyp (~cyp@213.237.85.9)
[14:12:08] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:12:31] *** Joins: frost (~frost@user/frost)
[14:13:49] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca)
[14:25:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:28:27] *** Joins: dan01 (~dan01@2a02:2f0f:320f:8200:e55e:d7a1:1605:3639)
[14:28:42] <dan01> are rvalues always not located in memory
[14:28:51] <dan01> bur rather in the registers, I guess?
[14:30:04] <RandomReader> that's not a distinction C++ makes, it's purely an implementation thing .. if you're really asking why you can't take the address of an rvalue, that's more of a semantic decision
[14:30:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[14:32:05] *** Joins: frost (~frost@user/frost)
[14:33:20] *** Joins: stonkey (~stonkey@user/stonkey)
[14:33:49] <dan01> RandomReader: I'm trying to make sure I have a right understanding of what an rvalue is in the first place :D
[14:34:30] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[14:35:13] *** Joins: millido (~millido@84.210.150.128)
[14:35:29] <RandomReader> this is probably a good overview: https://blog.knatten.org/2018/03/09/lvalues-rvalues-glvalues-prvalues-xvalues-help/
[14:35:48] *** Quits: maroloccio (~marolocci@151.75.59.229) (Quit: WeeChat 3.0)
[14:36:08] <RandomReader> for more details and expressed in terms of what you can do with each: https://en.cppreference.com/w/cpp/language/value_category
[14:36:32] <dan01> RandomReader, thanks!
[14:44:13] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Ping timeout: 240 seconds)
[14:45:44] *** Joins: xiongxin (~Thunderbi@113.116.224.135)
[14:50:04] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[14:51:14] *** Quits: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu) (Quit: leaving)
[14:52:30] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[14:53:02] *** Joins: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu)
[14:53:18] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Ping timeout: 260 seconds)
[14:54:22] *** Joins: HvszrStykp (~X@81.171.62.86)
[14:56:53] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:00:29] *** Joins: Burgundy (~yomon@82.76.72.88)
[15:02:42] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[15:03:05] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[15:09:20] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:10:28] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[15:17:15] *** Joins: frost (~frost@user/frost)
[15:21:40] *** Quits: dan01 (~dan01@2a02:2f0f:320f:8200:e55e:d7a1:1605:3639) (Read error: Connection reset by peer)
[15:21:58] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:23:40] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:25:42] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[15:29:57] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[15:34:51] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[15:36:13] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[15:39:51] *** Quits: rcoote (~rcoote@2a02:908:690:a140:e79c:da85:5a01:9cdc) (Quit: Konversation terminated!)
[15:49:07] *** Joins: kit-ten (~u0_a391@2600:380:a417:4988:a0ad:2a9c:1eef:118e)
[15:52:37] *** Quits: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 240 seconds)
[15:53:01] *** Quits: xiongxin (~Thunderbi@113.116.224.135) (Ping timeout: 240 seconds)
[15:53:19] *** Joins: xiongxin (~Thunderbi@113.116.224.135)
[15:55:47] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[15:57:31] *** aLeSD_ is now known as aLeSD
[15:57:41] *** Joins: Xardas (~Xardas@149.233.51.127)
[15:57:59] <Xardas> Is it easy to get a job as a c++ junior developer ?
[15:58:42] <Xardas> I've never done any projects before and only know the basics ( classes, pointers etc)
[16:00:37] <ville> Xardas: having completed projects in the relevant field would go towards that goal
[16:02:27] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[16:02:29] <Xardas> Can you name a few field ?
[16:02:43] <Xardas> except game development
[16:04:38] <TinoDidriksen> No, you're supposed to do that. What do you want to work with?
[16:04:47] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Client Quit)
[16:04:49] <ville> whatever it is that a company you apply for does...
[16:07:08] <Xardas> Software development, writing api's, improving software
[16:08:03] <ville> so what is improving software? making it run faster?
[16:08:16] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[16:08:21] <ville> pick an open project source or two out there, make them run faster
[16:08:26] <ville> open source
[16:08:33] <Xardas> You know what's funny ? I've completed a course on Scala on Linkedin, and I got 2 offers now. 3500$/month
[16:08:37] <Xardas> It's so in demand
[16:08:42] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[16:08:53] <mitch0> scala? uh...
[16:08:55] <ville> also not really on-topi chere. more of a -general
[16:09:01] <Xardas> Seems scala developers are in need.
[16:09:02] <ville> !give Xardas general
[16:09:03] <nolyc> Xardas: #C++-general for algorithms, libraries, practices, projects, tools etc.
[16:10:00] <Xardas> ville basically anything that doesn't have to do with game development and design.
[16:10:02] *** Joins: mathe (~wellmathe@85.251.70.233.dyn.user.ono.com)
[16:10:21] <Xardas> mitch0 yes !!
[16:11:27] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Read error: Connection reset by peer)
[16:18:37] *** Quits: Brett[Air] (~Brett@124.148.79.4) (Ping timeout: 240 seconds)
[16:18:40] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:20:31] <pa> is there a way to perform a check if a token/string is in a given set at compile time?
[16:21:29] *** Joins: xiongxin1 (~Thunderbi@119.123.100.12)
[16:22:56] <pa> in other words i would like to selectively disable code, based on the compile-time-provided set of tokens
[16:23:01] *** Quits: xiongxin (~Thunderbi@113.116.224.135) (Ping timeout: 256 seconds)
[16:23:01] *** xiongxin1 is now known as xiongxin
[16:25:08] <pa> hm.. i think i see a way.. using ##
[16:25:37] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:26:06] <pa> is it then possible to do something like token ## someOtherMacro and get token<content of someOtherMacro> ?
[16:26:25] *** Joins: foozle (~foozle@2001-b011-c040-13fe-5941-1239-e073-b67c.dynamic-ip6.hinet.net)
[16:27:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[16:32:45] *** Joins: jsbach_ (~jsbach@2a01:c22:acc2:e00:3dc0:53ff:72f6:cd)
[16:33:38] *** Joins: millido (~millido@84.210.150.128)
[16:33:57] *** Quits: jsbach (~jsbach@2a01:c22:acc2:e00:b54:b457:7345:29c8) (Ping timeout: 240 seconds)
[16:37:51] *** Joins: frost (~frost@user/frost)
[16:38:32] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[16:41:08] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Client Quit)
[16:46:49] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[16:47:34] *** Joins: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by)
[16:47:34] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:48:05] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[16:54:31] *** Joins: unyu (~pyon@user/pyon)
[16:55:22] <PJBoy> like
[16:56:32] <PJBoy> #define isFooLike(token) #token == "option0" || #token == "option1" // etc?
[16:56:52] <PJBoy> erm
[16:56:57] <PJBoy> nvm
[16:57:18] <PJBoy> probably token pasting like you said then
[16:57:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[16:58:30] <PJBoy> #define Fooable_Opt0 \ #define Fooable_Opt1 /* etc */ \ #define IsFooLike(token) defined(Fooable_##token) // perhaps
[17:00:00] *** Quits: xiongxin (~Thunderbi@119.123.100.12) (Ping timeout: 256 seconds)
[17:00:20] *** Joins: xiongxin (~Thunderbi@113.116.224.135)
[17:00:59] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[17:01:44] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[17:02:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:03:49] *** Quits: N4buc0 (~N4buc0@200.146.13.23.dynamic.dialup.gvt.net.br) (Ping timeout: 256 seconds)
[17:06:40] <pa> yea i was thinking of something like that
[17:11:38] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[17:11:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:14:02] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Client Quit)
[17:20:24] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:21:27] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[17:28:50] *** Joins: polyrob_ (~rob@user/polyrob)
[17:29:53] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 256 seconds)
[17:29:55] *** polyrob_ is now known as polyrob
[17:30:33] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:37:37] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[17:39:02] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:40:07] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (Quit: Leaving)
[17:40:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:58] *** ChanServ sets mode: +v npaperbot
[17:44:08] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:48:07] *** Joins: slidercrank (~slidercra@user/slidercrank)
[17:49:57] *** Joins: xkuru (~xkuru@user/xkuru)
[17:50:07] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:50:25] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[17:53:17] *** Quits: Dave_R (~Dave_R@home.amunra.co.uk) (Ping timeout: 240 seconds)
[17:53:56] *** Joins: pulse (~pulse@user/pulse)
[17:54:44] *** Joins: yorkin (~yorkin@61-224-87-81.dynamic-ip.hinet.net)
[18:05:56] *** Joins: netpipe (~netpipe@user/netpipe)
[18:06:38] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:09:10] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[18:09:26] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:10:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[18:10:52] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:11:49] *** Quits: kit-ten (~u0_a391@2600:380:a417:4988:a0ad:2a9c:1eef:118e) (Ping timeout: 240 seconds)
[18:12:18] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:12:21] *** Joins: kit-ten (~u0_a391@2600:380:a417:4988:a0ad:2a9c:1eef:118e)
[18:13:48] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[18:14:23] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[18:17:30] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7cb5:a22f:ba66:1688)
[18:18:18] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[18:20:19] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:20:31] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[18:21:17] *** Joins: Furai (~Furai@furai.pl)
[18:21:26] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[18:21:56] <AliceMeows> https://godbolt.org/z/qKEsf1K7v Is there an alternative to this kind of hackery?
[18:22:10] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:22:39] <AliceMeows> Or is my only option to wait for another 2 decades in the hope that meta classes become a thing in the standard?
[18:23:21] <Eelis> what's the goal?
[18:23:52] <AliceMeows> Add or remove member functions and variables that aren't needed
[18:24:02] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Client Quit)
[18:24:03] <Eelis> i thought that's what requires is for
[18:24:42] <Eelis> (as in the "requires" keyword)
[18:24:47] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[18:24:57] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:25:36] <AliceMeows> I can't use concepts to add or remove members functions or variables to existing class that way, can I?
[18:26:09] <Eelis> modifying existing classes doesn't make sense at all. C++ compile-time is non-mutating
[18:26:18] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Client Quit)
[18:26:28] <Eelis> you can't have a class that has one set of members at one time during compilation and another set of members at another time
[18:26:30] <AliceMeows> I do mean to do so at compile time, not runtime
[18:26:49] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[18:26:52] <Eelis> it doesn't even make sense at compile time
[18:27:17] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Client Quit)
[18:27:49] *** Quits: xiongxin (~Thunderbi@113.116.224.135) (Ping timeout: 240 seconds)
[18:27:52] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[18:28:07] *** Joins: xiongxin (~Thunderbi@119.123.100.12)
[18:28:09] <AliceMeows> That is very narrow minded
[18:28:22] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Client Quit)
[18:28:31] *** Quits: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com) (Client Quit)
[18:28:51] <Eelis> actually, non-modifiability is the preferred mode in more abstract systems like pure math. and it's a blessing that compile-time C++ is functional in that way
[18:28:58] *** Quits: furrymcgee (~devuan@cgn-89-1-208-165.nc.de) (Ping timeout: 256 seconds)
[18:29:06] *** Joins: BobTheTomato (~paul@107-190-110-80.cpe.teksavvy.com)
[18:29:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[18:29:26] <Eelis> it would really suck if the question "what members does class X have?" had different answers at different stages during compilation
[18:29:38] <ville> AliceMeows: metaclasses are not needed. you want static reflection
[18:29:46] *** Joins: andreasbuhr (~quassel@p549dbe60.dip0.t-ipconnect.de)
[18:29:51] <AliceMeows> That works too
[18:30:00] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:30:01] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:31:02] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:31:05] <ville> (metaclasses work on top of static reflection, giving a name to set of static reflection operations and language syntax to stick the name at a specific place)
[18:31:56] <AliceMeows> I prefer such solutions if meta classes and the likes could be implemented on top of them as long as there is proper language support
[18:32:00] <ville> but even with out metaclasses you can already give a name for set of static reflection operations. so they arent' striclty needed
[18:32:07] *** Quits: andreasbuhr (~quassel@p549dbe60.dip0.t-ipconnect.de) (Client Quit)
[18:32:30] <ville> heh "already"
[18:33:40] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:a69c:d91a:66fb)
[18:33:40] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:a69c:d91a:66fb) (Changing host)
[18:33:40] *** Joins: skapata (~Skapata@user/skapata)
[18:36:11] *** Quits: yorkin (~yorkin@61-224-87-81.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[18:37:05] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[18:37:37] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[18:41:04] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:41:08] *** Joins: Viewday119 (~Viewday@user/viewday)
[18:41:46] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:43:08] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:43:50] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:44:45] *** Joins: rgrinberg (~textual@2806:101e:7:445d:e1a3:1c4d:1ca5:ce95)
[18:45:17] *** Quits: kit-ten (~u0_a391@2600:380:a417:4988:a0ad:2a9c:1eef:118e) (Ping timeout: 240 seconds)
[18:45:30] *** Joins: Viewday11 (~Viewday@user/viewday)
[18:45:54] *** Quits: Viewday119 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[18:45:58] *** Joins: xiongxin1 (~Thunderbi@113.116.224.194)
[18:45:58] *** Quits: xiongxin (~Thunderbi@119.123.100.12) (Ping timeout: 256 seconds)
[18:45:59] *** xiongxin1 is now known as xiongxin
[18:48:05] *** Joins: pottsy (~pottsy@129.227.183.244)
[18:49:40] *** Joins: kit-ten (~u0_a391@2600:380:a417:4988:a0ad:2a9c:1eef:118e)
[18:51:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[18:52:09] *** Quits: aLeSD (~aLeSD@93-34-146-120.ip50.fastwebnet.it) (Quit: Leaving)
[18:57:25] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:01:35] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:09:52] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:2d06:fff0:d105:7c1)
[19:11:52] *** Joins: seninha (~seninha@user/seninha)
[19:13:57] *** Quits: PureSine (~PureSine@user/PureSine) (Quit: Leaving)
[19:18:34] *** Quits: xiongxin (~Thunderbi@113.116.224.194) (Quit: xiongxin)
[19:20:04] *** Quits: netpipe (~netpipe@user/netpipe) (Quit: Client closed)
[19:20:37] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (Ping timeout: 240 seconds)
[19:21:21] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[19:23:04] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[19:23:49] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[19:23:52] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:28:46] *** Quits: foozle (~foozle@2001-b011-c040-13fe-5941-1239-e073-b67c.dynamic-ip6.hinet.net) (Quit: Leaving)
[19:29:14] *** Joins: nvmd (~nvmd@user/nvmd)
[19:32:06] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:35:07] *** Joins: duuude (~user@user/duuude)
[19:35:32] <duuude> "write a method that returns the names of the parents of the current class"
[19:35:46] <duuude> I have no idea if this is even possible
[19:36:04] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[19:37:32] <Alipha> duuude: nope
[19:39:47] <duuude> such strange exams they give us
[19:40:22] <PJBoy> I mean you `return "Base1, Base2..."`
[19:40:38] <PJBoy> you just can't get C++ to figure out the names for you
[19:41:43] <cbreak> there are hacky ways that might sometimes work
[19:42:03] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Read error: Connection reset by peer)
[19:42:30] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca)
[19:43:28] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[19:43:44] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[19:45:53] *** Joins: unyu (~pyon@user/pyon)
[19:48:18] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[19:49:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-227.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:52:48] *** Joins: Atque (~Atque@user/atque)
[19:53:27] *** Quits: mathe (~wellmathe@85.251.70.233.dyn.user.ono.com) (Remote host closed the connection)
[19:53:49] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[19:54:22] *** Joins: mathe8989 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[19:54:36] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[19:54:56] *** Quits: mathe8989 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Client Quit)
[19:55:40] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[19:56:23] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[19:58:34] <pa> whats the most efficient way to map a pointer to an id, for a number of pointers that is 4?
[19:58:45] <pa> vector<pair>?
[19:59:16] <pa> i suppose unordered_map or map is heavier than checking 4 elements..
[19:59:24] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:59:44] <AliceMeows> XMACRO is probably the most efficient way however its not safe
[20:00:05] <pa> how would that work?
[20:00:18] <pa> i know the values at runtime
[20:00:33] <AliceMeows> Its a disgusting macro hackery and I highly suggest to avoid that
[20:02:30] <Budd> I'm just starting to learn about coroutines and their stack allocation. If a coroutine calls regular functions that need more stack, how is this provided?
[20:03:33] <Budd> I imagine it could use the thread's main stack for those calls, since they'll wind back before the coroutine returns control, but I'm just guessing.
[20:04:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca)
[20:04:51] <heiner_> pa: for only  4 elements you could probably just use a small lookup table and search int sequentially:
[20:04:53] <heiner_> struct {
[20:04:53] <heiner_>         void*   ptr;
[20:04:53] <heiner_>         uint32_t id;
[20:04:53] <heiner_> } table[] = ...;
[20:05:19] <anyone> Budd: that's why you can't call functions
[20:05:46] <Alipha> and i would also agree with heiner_ about creating a struct/class because then you can give better member names than std::pair's first and second :-)
[20:06:44] <Budd> anyone: thanks - I didn't know about that restriction.
[20:06:53] <heiner_> If this is a homework assignment the best solution of course is something else...
[20:07:28] <anyone> Budd: well, functions that co_yield, anyway.
[20:08:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-183.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:14:14] *** Joins: masticass (~gzc@host-85-201-222-202.dynamic.voo.be)
[20:16:45] *** Quits: masticass (~gzc@host-85-201-222-202.dynamic.voo.be) (Client Quit)
[20:17:37] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[20:19:35] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:19:45] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[20:20:50] <AliceMeows> Eelis: https://godbolt.org/z/4EPx65oYY
[20:21:19] <AliceMeows> I see no reason for lazy_call to hold result if the result of the function is void its wasteful
[20:21:44] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[20:22:01] *** Joins: stonkey (~stonkey@user/stonkey)
[20:23:01] <AliceMeows> There however should be better ways to do it
[20:26:03] *** Joins: montpol (montpol@fine.mouses.xyz)
[20:26:13] <AliceMeows> Err, https://godbolt.org/z/abE9eEY4h fixed link with some junk removed
[20:27:21] *** Joins: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073)
[20:28:39] *** Quits: MajorBiscuit (~MajorBisc@c-001-007-038.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[20:29:49] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[20:32:31] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Quit: Leaving)
[20:34:38] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:37:07] <Alipha> AliceMeows: why even store the result at all? https://godbolt.org/z/Y4qex5aG7
[20:40:23] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 3.2)
[20:40:55] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.54)
[20:43:27] <AliceMeows> Because maybe I wish to check it later on and not right now but that really isn't the point, the point is to avoid storing data in a class when I don't need it to begin with
[20:44:29] *** Quits: rgrinberg (~textual@2806:101e:7:445d:e1a3:1c4d:1ca5:ce95) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:48:32] *** Joins: Viewday11 (~Viewday@user/viewday)
[20:51:26] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:59:10] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[21:03:06] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[21:04:52] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[21:05:42] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[21:05:46] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:07:37] *** Joins: Betal (~Betal@user/betal)
[21:22:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[21:26:37] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:27:11] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:27:50] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[21:29:54] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:32:44] *** Joins: Atque (~Atque@user/atque)
[21:32:58] *** Parts: susam (~susam@user/susam) ()
[21:40:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:59] *** ChanServ sets mode: +v npaperbot
[21:42:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:48:14] *** Joins: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf)
[21:52:39] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:53:50] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:54:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[22:00:13] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[22:01:43] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:02:15] *** Joins: pulse (~pulse@user/pulse)
[22:03:33] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[22:03:45] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[22:05:02] <Schrostfutz_> Hi, I try to use STL algorithms where possible but can't come up with a way for a problem I'm having: I want to find the two adjacent elements in a vector that are minimal by some metric. I solved it with a regular loop, but is there a nicer way to achieve that?
[22:07:23] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[22:08:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:09:17] *** Quits: jsbach_ (~jsbach@2a01:c22:acc2:e00:3dc0:53ff:72f6:cd) (Ping timeout: 250 seconds)
[22:11:04] <anyone> what does math have to say about it?
[22:11:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:12:42] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[22:14:34] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:15:01] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[22:20:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:25:44] *** Joins: magla (~gelignite@55d42175.access.ecotel.net)
[22:26:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:26:38] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[22:27:49] <PJBoy> stdlib algorithms don't have much for adjacent elements
[22:28:07] <PJBoy> or taking two ranges and doing something with them
[22:28:11] <Alipha> Schrostfutz_: the std algorithms look really only at one element at a time. only std::adjacent_find comes to mind, which doesn't seem applicable. so, just use a for loop
[22:28:37] <PJBoy> with two steps you could do adjacent_difference and min_element
[22:29:28] <PJBoy> might be able to use a zip iterator to lever min_element without adjacent_difference
[22:29:34] <PJBoy> *leverage
[22:30:27] <Schrostfutz_> Okay, then I didn't miss anything, I was trying something with transform & min_element, but a loop is much more intuitive in this case.
[22:30:30] <Schrostfutz_> Thanks!
[22:31:33] <PJBoy> taking that loop out into your own named algorithm is a reasonable move to consider
[22:31:49] <Alipha> plus adjacent_difference (or transform) would involve allocating an additional container, which seems like a bad idea
[22:31:57] *** Quits: supernova (~quassel@2405:9800:ba11:6207:9b58:d180:12a8:f790) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:32:19] <PJBoy> you can use partial_sum to undo adjacent_difference
[22:32:26] <PJBoy> if you're willing to trade memory for time
[22:32:26] <Alipha> lol
[22:34:02] *** Joins: segnior (segnior@user/segnior)
[22:34:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[22:35:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[22:36:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:38:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:42:13] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.54) (Ping timeout: 240 seconds)
[22:46:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca)
[22:46:23] <Alipha> i would not advise, but since PJBoy brought it up: https://godbolt.org/z/M4dnvxE36
[22:46:47] <PJBoy> nice
[22:49:33] <PJBoy> obligatory C++20 version https://godbolt.org/z/zqsbhMf7a
[22:50:55] *** Joins: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648)
[22:51:25] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-198.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:52:15] <PJBoy> C++23 is getting zip, so hopefully we'll get a stdlib viable version
[22:53:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:53:59] *** Quits: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648) (Read error: Connection reset by peer)
[22:56:33] *** Quits: nshire_ (~nshire@47.146.41.156) (Quit: Leaving)
[22:56:50] *** Joins: nshire (~nshire@user/nshire)
[22:59:10] *** Joins: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648)
[22:59:27] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Read error: Connection reset by peer)
[22:59:35] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[23:00:02] *** Joins: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de)
[23:00:45] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-25.dsl.bell.ca)
[23:01:56] *** Quits: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf) (Quit: Konversation terminated!)
[23:03:13] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[23:06:49] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:07:20] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[23:07:52] *** Joins: Pook (~Pook@2001:8a0:f996:1400:a56d:2cce:c1f:3ace)
[23:08:11] *** Quits: jkaye_ (~qicruser@2605:ef80:1a:c23f::1062:2648) (Read error: Connection reset by peer)
[23:10:41] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[23:11:09] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:12:25] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[23:13:03] <kalven> obligatory C++11 version https://godbolt.org/z/PhqnKh8ov
[23:19:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:19:43] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:20:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:21:43] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: No Ping reply in 180 seconds.)
[23:23:06] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[23:23:31] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:23:38] *** Quits: Schrostfutz_ (~Schrostfu@schettlerdck.tkn.tu-berlin.de) (Ping timeout: 256 seconds)
[23:27:01] <PJBoy> compiled with C++20 >_>
[23:27:25] <PJBoy> and using ranges...
[23:27:34] <PJBoy> oh right
[23:27:55] <PJBoy> C++11 doesn't support deduced auto return type
[23:28:31] <kalven> ah yeah.. easy to fix
[23:28:54] <kalven> btw, the zip version fails to compile with a const vector
[23:29:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:fddd:e672:32ce:4073) (Ping timeout: 240 seconds)
[23:30:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[23:31:16] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:40:51] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[23:41:05] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[23:43:15] *** Joins: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net)
[23:49:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7cb5:a22f:ba66:1688) (Ping timeout: 240 seconds)
[23:52:08] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:53:19] <rpav> is c++23 getting a _good_ zip?
[23:54:07] <PJBoy> it's getting [P2321]
[23:54:08] <npaperbot> P2321R2: [Library] zip <https://wg21.link/p2321r2> (by Tim Song) (2021-06-11) (Related: https://wg21.link/p2321r2/github)
[23:54:23] <rpav> yea reading .. at first glance it looks useful, but i'm sure the other shoe will drop at some point heh
[23:55:15] <PJBoy> I'm unsure of what all these pair and tuple modifications are needed
[23:55:29] <rpav> they ought to deprecate pair
[23:55:57] <rpav> afaict it's in the short reasoning section i just read where "some things use pair and it's easier to convert pair to tuple than the other way around"
[23:56:14] <rpav> but pair ought to just be removed
[23:56:25] <PJBoy> and `void swap(const pair&, const pair&)`
[23:56:32] <PJBoy> like that doesn't look reasonable at all
[23:56:44] *** Quits: jhms (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:56:47] <rpav> wait what
[23:56:57] <PJBoy> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2321r2.html#pair
[23:57:26] <PJBoy> also merged into cppreference https://en.cppreference.com/w/cpp/utility/pair/swap2
[23:58:28] <PJBoy> only enabled if both the pair types satisfy `std::is_swappable_v<const T>`
[23:58:55] <rpav> i don't understand how it's swappable if they're const T
[23:59:11] <PJBoy> yeah I'm wondering about that
[23:59:31] <PJBoy> << TYPE<const T>; using T = int&;
[23:59:32] <geordi> int&
[23:59:41] <PJBoy> might be for swapping references for some reason??
