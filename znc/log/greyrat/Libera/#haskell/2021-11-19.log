[00:00:01] <dsal> sm: Heh, yeah, it's been pretty helpful actually.
[00:04:12] <shapr> dsal: wait, really? car hacking with Haskell?
[00:04:53] <shapr> obd2?
[00:04:57] <dsal> shapr: Nah, just the tesla API.  I use it for monitoring and stuff.
[00:05:03] <shapr> oh
[00:05:06] <dsal> But apparently the actual tesla car code is haskell.
[00:05:19] <shapr> wow
[00:05:22] <dsal> †
[00:05:32] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[00:05:42] <dsal> It writes out C code that the thing actually runs.
[00:05:50] <tomsmeding> phew
[00:05:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:06:38] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:06:41] <shapr> haskell is gaseous real time
[00:06:54] <shapr> you've heard of hard real time, and soft real time ...
[00:07:01] <dsal> haha
[00:07:34] <APic> Stuffs can also just sublimate
[00:09:56] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[00:11:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[00:11:53] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[00:11:56] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[00:12:28] <sm> is there no stopping him...
[00:12:40] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:14:02] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[00:14:52] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[00:15:28] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:16:00] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Changing host)
[00:16:00] *** Joins: zfnmxt (~zfnmxtzfn@user/zfnmxt)
[00:16:16] * monochrom does not have a lot of confidence in "vapour real time", sounds like vapourware...
[00:16:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[00:16:48] <monochrom> However, "fuming real time" sounds impressive :)
[00:18:01] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[00:18:51] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[00:20:39] *** Quits: andrade (~andrade@user/andrade) (Quit: Leaving)
[00:20:50] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[00:21:10] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[00:23:16] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[00:29:29] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[00:31:36] *** Quits: mei (~mei@user/mei) (Ping timeout: 268 seconds)
[00:32:22] *** Joins: vicfred (~vicfred@user/vicfred)
[00:33:12] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:41:28] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[00:43:06] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[00:45:34] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:45:42] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5b56:79c0:acea:f05c) (Quit: WeeChat 2.8)
[00:45:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[00:49:14] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:50:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[00:54:34] <turco32> "my car runs haskell, whats your car run? python?"
[00:54:56] <turco32> or better yet, BASIC
[00:55:05] <turco32> loaded with GOTOs
[00:55:30] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:55:33] <turco32> or get a really old car that runs fortran or cobol
[00:55:34] <geekosaur> don't laugh, I once worked with a hard realtime BASIC
[00:55:47] <geekosaur> it didn't do GOTO though
[00:55:51] <maerwald> cars run C
[00:56:01] <turco32> yeah lol i was joking
[00:56:12] <maerwald> even batteries do
[00:56:31] <turco32> BBC BASIC actually discourgaes using GOTOs
[00:56:43] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[00:57:03] <maerwald> and usually built with verified compilers (although verified here doesn't mean formally verified)
[00:58:01] <turco32> your telling me GCC ain't good enough?
[00:58:02] <turco32> :P
[00:58:20] <maerwald> gcc 3.4 or so, because getting a new version verifed costs a lot of money
[00:58:27] <turco32> oh shit really
[00:58:38] <Hecate> in MISRA C ofc
[00:58:44] <maerwald> yes
[00:58:54] <turco32> what version of C does 3.4 reconize?
[00:58:55] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[00:59:26] <turco32> 99? 90?
[00:59:49] <turco32> 90 aka "K&R"
[01:00:16] <maerwald> although trains already run C++ and other crap
[01:00:29] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[01:00:42] <geekosaur> probably on windows 3.1 :þ
[01:00:56] <turco32> haha
[01:01:01] <gehmehgeh> didn't British submarines have Windows 3.11?
[01:01:13] <turco32> trains running on system V
[01:01:18] <gehmehgeh> hmm, maybe they've upgraded that
[01:01:28] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[01:01:54] <turco32> at least they can play dos games while under the atlantic ocean
[01:02:26] <gehmehgeh> dosbox?
[01:02:28] <gehmehgeh> :D
[01:02:38] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[01:02:48] <turco32> haha
[01:03:30] <gehmehgeh> ah, it's Windows XP https://www.popularmechanics.com/military/weapons/a19061/britains-doomsday-subs-run-windows-xp/
[01:03:36] <gehmehgeh> it least it was in 2016
[01:03:42] <gehmehgeh> according to that article
[01:08:37] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[01:09:28] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:11:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:13:31] *** Joins: Pickchea (~private@user/pickchea)
[01:15:01] *** Quits: boxscape_ (~boxscape_@i59F67A95.versanet.de) (Quit: Connection closed)
[01:15:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[01:16:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[01:17:16] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[01:17:49] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:21:25] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:21:33] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 268 seconds)
[01:21:40] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[01:22:45] <janus> @hoogle segv
[01:22:45] <lambdabot> System.Posix.Signals sigSEGV :: CInt
[01:22:45] <lambdabot> Graphics.Gloss.Geometry.Line intersectSegVertLine :: Point -> Point -> Float -> Maybe Point
[01:22:45] <lambdabot> Graphics.Gloss.Geometry.Line intersectSegVertSeg :: Point -> Point -> Float -> Float -> Float -> Maybe Point
[01:23:11] <janus> DemiMarieObenour: you can find segfault under that name: sigsegv
[01:24:36] <DemiMarieObenour> janus: thanks!
[01:30:38] *** Joins: favonia (~favonia@user/favonia)
[01:31:12] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[01:32:39] *** Quits: deadmarshal (~deadmarsh@95.38.117.166) (Ping timeout: 268 seconds)
[01:33:07] *** Joins: nvmd (~nvmd@user/nvmd)
[01:34:01] <Sqaure> just playing with Alternative here. "some" and "many". That is "some :: Alternative f => f a -> f [a]". Why doesnt "some (Just 1)" return in repl? 
[01:35:09] <monochrom> It goes in a pretty strict infinite loop.
[01:35:25] <geekosaur> some and many are really intended for parsers and won't do what you expect otherwise
[01:35:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:35:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:35:42] *** Joins: wroathe (~wroathe@user/wroathe)
[01:36:14] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[01:36:17] <Sqaure> ah ok
[01:36:24] <geekosaur> that is, it expects f to be some kind of parser and will loop as long as f a doesn't fail. for something like (Just 1) it will always succeed, so it will loop forever
[01:36:44] <Sqaure> gotcha
[01:37:02] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:38:42] *** Joins: Cajun (~Cajun@user/cajun)
[01:40:29] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:40:48] <kronicmage> hey guys, does Numeric.Natural behave differently in interpreted vs compiled?
[01:41:07] <kronicmage> i'm working with really big natural numbers, and it seems like my code is not correct when compiled, but correct when interpreted
[01:41:21] <kronicmage> a lot of numbers end up somewhere close to 2^64 instead of the actual value they're supposed to take
[01:41:24] <kronicmage> how can i fix this?
[01:42:29] <[exa]> any chance to get a minimal broken example, or does this trigger randomly in some large codebase?
[01:42:38] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[01:42:48] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[01:42:59] *** Joins: pfurla_ (~pfurla@16.191.255.173.client.dyn.strong-mf37.as54203.net)
[01:43:20] <kronicmage> gimme a second
[01:43:28] <kronicmage> i'm on haskell 9.0.1, if that helps
[01:44:08] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[01:44:28] *** Joins: alzgh (~alzgh@user/alzgh)
[01:44:52] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Ping timeout: 256 seconds)
[01:44:59] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:45:41] *** Joins: Guest|61 (~Guest|61@pool-74-104-163-225.bstnma.fios.verizon.net)
[01:45:59] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:99ae:703b:b7dc:fe53) (Ping timeout: 264 seconds)
[01:46:19] <[exa]> kronicmage: btw what does "really big" mean precisely? below 2^64 and it underflows to larger numbers, or way over 2^64 and it computes wrong?
[01:46:22] <kronicmage> huh, i switched to ghc 8.x with lts 18.10 and the issue disappeared
[01:46:56] <kronicmage> way over 2^64 computed wrong
[01:47:32] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[01:47:41] <maerwald> kronicmage: do you know about https://mail.haskell.org/pipermail/haskell-cafe/2021-March/133540.html
[01:47:54] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:2c1a:ca53:b91a:9355)
[01:47:55] <maerwald> I'm not sure that has anything to do with it
[01:48:17] <Guest|61> Hello friends, I am trying to install Haskell from https://www.haskell.org/ghcup/ and the "first steps" are failing to work. I am a bit lost. Is this a place I can find help?
[01:48:30] <maerwald> Guest|61: what is failing?
[01:49:32] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 240 seconds)
[01:49:49] <Guest|61> i went to https://cabal.readthedocs.io/en/latest/getting-started.html and tried to create my first haskell app with cabal, but I did not have cabal. so I installed cabal with apt-get but my cabal is not working
[01:49:55] *** Quits: pfurla_ (~pfurla@16.191.255.173.client.dyn.strong-mf37.as54203.net) (Ping timeout: 268 seconds)
[01:50:07] <maerwald> Guest|61: cabal should be installed by ghcup already
[01:50:19] <sclv> use a pastebin to past the error
[01:50:20] <maerwald> did you run 'source ~/.ghcup/env' in your environment?
[01:50:29] <kronicmage> maerwald: yes, that's exactly it! fromIntegral is used in the code that's incorrect
[01:50:45] <Guest|61> i just followed the curl instructions :-)
[01:50:56] <maerwald> the curl instructions install cabal
[01:51:07] <maerwald> if you can't run cabal you didn't follow the last instructions
[01:51:07] *** Quits: turco32 (~turco32@104.158.25.93) (Quit: Leaving)
[01:51:20] <Guest|61> the last instructions?
[01:51:23] <maerwald> yes
[01:51:34] <sclv> source ~/.ghcup/env
[01:51:44] <Guest|61> doh!
[01:51:46] <Guest|61> oh no
[01:51:51] <Guest|61> thank you
[01:52:07] <Guest|61> i hope i didn't mess things up by apt-get installing cabal
[01:52:14] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[01:52:20] <hpc> you can apt autoremove it
[01:52:35] <Guest|61> ok thx
[01:52:40] <hpc> you definitely don't want to be mixing from multiple sources
[01:52:56] <Guest|61> i will go follow the last instruction after i autoremove cabal
[01:52:57] <hpc> at best, it's almost impossible to keep track of
[01:53:04] <Guest|61> yikes
[01:53:16] <Guest|61> i am total haskell noob
[01:53:22] <monochrom> You should apt-get remove. Unless you want to confuse yourself.
[01:53:31] <Guest|61> ok
[01:53:34] <Guest|61> thank you
[01:53:46] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3) (Remote host closed the connection)
[01:53:59] <hpc> autoremove gets dependencies too
[01:54:06] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:54:09] <hpc> so like if you install cabal you get ghc, then remove cabal and still have ghc
[01:54:23] <monochrom> remove gets dependencies too.
[01:54:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:54:33] <hpc> oh, neat
[01:54:40] <hpc> maybe i am mixing up yum's behavior then
[01:54:54] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:55:09] <Guest|61> i sudo apt-get removed cabal-install (same thing I had installed)
[01:55:09] <monochrom> But it is safe to do both.
[01:55:32] <Guest|61> now I go and follow the last instruction, so I have to reboot
[01:55:34] <Guest|61> thank you
[01:55:38] <Guest|61> bye for now
[01:55:45] <maerwald> reboot? :o
[01:55:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[01:56:03] <Guest|61> "restart terminal for changes to take effect"
[01:56:11] <maerwald> just your terminal
[01:56:14] <maerwald> not your computer
[01:56:17] <Guest|61> ha ha
[01:56:18] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 260 seconds)
[01:56:19] <Guest|61> ok
[01:57:00] <hpc> yeah, it just needs to run through the bashrc and whatnot so that source line gets executed
[01:57:06] <maerwald> is "terminal" really so ambiguous?
[01:57:07] <hpc> or you can run it yourself
[01:57:58] <monochrom> maerwald: Is it true that the script adds "source ~/.ghcup/env" to .bashrc, so that launching a new shell is enough?
[01:58:07] <hpc> maerwald: you never know
[01:58:15] <hpc> once i tried to install nodejs and ran out of ink in my teletype
[01:58:20] <maerwald> monochrom: if it can figure out your default shell, yes 
[01:58:23] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:58:32] <monochrom> OK then no worries.
[01:58:46] <Guest|61> success!!!!!!
[01:58:58] <Guest|61> Hello, Haskell
[01:58:58] <maerwald> so, now `cabal init` should work
[01:59:11] <monochrom> You know, it's a mess either way.
[01:59:29] <Guest|61> thanks everybody I am abstracting away now
[01:59:33] <maerwald> lol
[01:59:46] <Guest|61> beta reducing like no tomorrow
[01:59:58] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[01:59:59] <Guest|61> many thanks
[02:00:17] *** Joins: nvmd (~nvmd@user/nvmd)
[02:00:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Ping timeout: 264 seconds)
[02:00:50] <monochrom> So suppose the PATH setting is not done in .profile. Then suppose I'm on ubuntu and I'm on the graphical desktop and I launch emacs by clicking the button (no terminal, no .bashrc) and inside that emacs instance I launch haskell-mode etc.  Then its PATH does not have the desired setting.
[02:01:31] <monochrom> Conversely, if the setting is done in .profile but not in .bashrc. Then one needs to at least logout and re-login.
[02:01:39] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[02:02:05] <monochrom> Now, add systemd's "user session" thingy to the picture. Then even logout and re-login may be insufficient.
[02:02:17] <monochrom> (The "user session" refuses to die.)
[02:02:30] <monochrom> (I learned it the hard way before.)
[02:02:36] <hpc> ghcup should just patch the kernel to add the right environment variables to every process
[02:02:43] <monochrom> :)
[02:03:33] *** Joins: yauhsien (~yauhsien@49.216.238.61)
[02:03:42] <monochrom> Life was simpler when it was DOS.
[02:04:12] <maerwald> yeah, changing env vars in windows is more seamless indeed
[02:04:12] <geekosaur> we just need someone to port plan 9's #e filesystem to linux :þ
[02:04:19] <monochrom> And you could set date by hand upon bootup to circumvent shareware expiration.
[02:06:25] *** Quits: mimmy_ (~mimmy@37.19.213.65) (Quit: WeeChat 3.3)
[02:07:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[02:08:09] *** Quits: michalz (~michalz@185.246.204.126) (Remote host closed the connection)
[02:09:13] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[02:10:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:10:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:10:39] *** Joins: wroathe (~wroathe@user/wroathe)
[02:10:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[02:11:32] <maerwald> geekosaur: Harendra from streamly could do it, he worked on filesystem afair
[02:12:15] *** Joins: pfurla_ (~pfurla@16.191.255.173.client.dyn.strong-mf37.as54203.net)
[02:12:21] <geekosaur> sadly that wasn't serious. too many programs assume the environment only needs to be read once at startup
[02:12:30] <maerwald> WAFL
[02:12:44] <maerwald> https://en.wikipedia.org/wiki/Write_Anywhere_File_Layout
[02:13:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:13:58] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[02:13:58] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:14:32] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:2c1a:ca53:b91a:9355) (Ping timeout: 240 seconds)
[02:15:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[02:15:37] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7)
[02:17:11] *** Quits: pfurla_ (~pfurla@16.191.255.173.client.dyn.strong-mf37.as54203.net) (Ping timeout: 264 seconds)
[02:22:47] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Quit: ZNC 1.7.4 - https://znc.in)
[02:23:02] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[02:32:58] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[02:33:36] *** Parts: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) ()
[02:33:45] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[02:36:07] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[02:37:36] *** Joins: Sgeo (~Sgeo@user/sgeo)
[02:38:04] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:38:18] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[02:38:40] <lbseale> I am trying to add a custom hlint rule for function that's not in base (Data.Map.Strict.fromList), but hlint isn't catching it. It's being used with a qualified import ... does anyone know why this wouldn't work?
[02:42:36] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 265 seconds)
[02:43:00] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[02:43:30] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:43:40] *** Joins: evocatus (~evocatus@213.193.2.105)
[02:44:40] *** Quits: max22- (~maxime@2a01cb088335980084a2aafb0ef18753.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[02:46:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[02:48:58] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[02:50:25] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:51:35] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:53:50] *** Quits: Guest|61 (~Guest|61@pool-74-104-163-225.bstnma.fios.verizon.net) (Quit: Connection closed)
[02:55:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[02:58:02] <oats> are there any good learning resources out there for how to factor recursion out of a function? I've got a recursive function in which I reckon there's a fold or something hiding, but I can't prove it yet
[02:58:26] <Hecate> oats: you need to practice folds
[02:58:37] <Hecate> the more you do, the more you recognise patterns to which folds apply
[02:58:48] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[03:02:22] <monochrom> The resources are organized as "this is a tutorial on list's foldr specifically" "this is a tutorial on list's map specifically", etc.  As opposed to "this is a one-stop shop for all common recursions".
[03:02:32] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[03:02:48] *** Joins: nvmd (~nvmd@user/nvmd)
[03:04:27] <monochrom> Actually I lied, there is a one-stop shop, it's an academic paper called "banana, barbed wires, ...", and it is not easy to read, and it goes overboard, today most Haskellers aren't interested.
[03:04:34] <oats> oh shit, it's actually an unfold
[03:04:49] <oats> no wonder it was sus :P
[03:09:32] <lbseale> Update: we figured it out. We needed to add it as a warning in a group, following the patterns in https://github.com/ndmitchell/hlint/blob/v2.1.11/data/hlint.yaml
[03:11:49] <lbseale> https://paste.tomsmeding.com/0FpSc3oc
[03:16:35] *** Quits: yauhsien (~yauhsien@49.216.238.61) (Read error: Connection reset by peer)
[03:17:54] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:19:22] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[03:20:21] <oats> https://github.com/oatberry/aoc2020-haskell/commit/d24e072a564512520c9d7334e4210a77dd6ae7eb
[03:20:37] <oats> some may say, unreadable :P
[03:21:20] <dsal> sum.unFoldr sounds like a hylomorphism.
[03:22:25] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[03:24:54] <oats> that's the first I've seen that term
[03:25:05] <dsal> @package recursion-schemes
[03:25:05] <lambdabot> https://hackage.haskell.org/package/recursion-schemes
[03:25:24] <dsal> There's your "how do I refactor all recursion out of everything" thing.  :)
[03:25:36] <oats> hah, thanks :)
[03:26:02] <dsal> I just used regular `fold` when I did that one.
[03:26:33] <oats> dsal, AoC? is your solution up anywhere?
[03:26:40] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[03:27:09] <dsal> I've got a helper library with some common stuff like grid parsing, but this is my day 3:  https://www.irccloud.com/pastebin/pBTpHp1C/day3.hs
[03:27:59] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[03:30:42] <oats> nice
[03:30:59] <dsal> I don't remember what the problem was. heh
[03:31:30] <oats> tobogganing
[03:31:35] <oats> avoiding arboreal incidents
[03:31:46] <dsal> AI can be a problem, yeah.
[03:31:55] <oats> lol
[03:32:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[03:33:02] <dsal> oh, I think day4 might've been fun.  This was my solution to part 1:  `part1 = length`
[03:34:54] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[03:35:21] *** Joins: hololeap (~hololeap@user/hololeap)
[03:35:47] *** Quits: emf (~emf@2620:10d:c090:400::5:d3e3) (Ping timeout: 264 seconds)
[03:36:24] <dsal> Sorry.  Spoiler.
[03:36:31] <oats> oh meanning you already had utility functions for reading in hashmaps and stuff?
[03:36:46] <oats> hah no worries, I did most of these last year in not-haskell
[03:37:03] <oats> I just wanted to throw together a little framework for doing them in haskell these year
[03:37:05] <dsal> Nah, I just wrote a parser that did most of the work.
[03:37:14] <dsal> getInput = fmap catMaybes . parseFile (parsePassport `sepBy` "\n")
[03:37:33] <dsal> parsePassport was `parsePassport :: Parser (Maybe Passport)`
[03:37:43] <oats> mmm, parseFile seems like a very good function
[03:38:08] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:38:08] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:38:08] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:38:08] *** Joins: wroathe (~wroathe@user/wroathe)
[03:38:12] <dsal> It's not particularly fancy:  https://github.com/dustin/aoc/blob/master/src/Advent/AoC.hs#L44
[03:39:02] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:39:05] *** Parts: texasmynsted (~texasmyns@99.96.221.112) (WeeChat 3.1)
[03:39:59] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[03:41:07] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[03:45:01] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[03:45:41] <dsal> Man, day 7 with lazy maps kind of blew my mind.
[03:45:55] *** Joins: hiruji (~hiruji@user/hiruji)
[03:47:48] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[03:49:45] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 250 seconds)
[03:52:58] <oats> dsal, any particular reason you use Text pretty much everywhere instead of String?
[03:53:11] <dsal> Because that's best practice.  :)
[03:54:02] <oats> 😰
[03:55:35] <dsal> It doesn't matter a lot of the time, but `String` is a type alias for `[Char]` which is a silly amount of overhead to do just about anything you might want to do.
[03:58:05] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[03:58:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[03:59:05] <oats> yeah, if I had performance in mind I guess I might
[03:59:10] <oats> AoC is kinda small scale though :P
[04:00:23] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:c01b:60fe:9558:2d95)
[04:01:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:01:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[04:02:19] *** Joins: turco32 (~turco32@104.158.25.93)
[04:02:52] *** Lord_of_Life_ is now known as Lord_of_Life
[04:02:58] <turco32> am i doing it wrong using ghci in a terminal and not in a emacs setup?
[04:03:22] <turco32> i don't know if a such a setup exists for ghci and emacs
[04:04:05] <sm> but, but, maybe you want to slice and dice strings like lists, and without requiring a big extra package and import ?
[04:04:21] <sm> maybe you want to interact easily with the OS ?
[04:04:30] <turco32> true
[04:04:35] <dsal> turco32: There are a few ways to do it.  I just use some old haskell-mode stuff and it'll open a ghci buffer and do all the things.
[04:04:54] <turco32> oh really?
[04:04:58] <turco32> that's neat
[04:05:11] <dsal> I think the cool kids do HLS these days, but I've never made that work.
[04:05:56] <dsal> oats: Yeah, it may not matter.  But it's not harder to use Text and it's got a couple extras that make some things easier.  Some things are harder.  All depends.
[04:06:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:06:26] <oats> turco32, I'm a fan of ghci in emacs
[04:06:37] * oats uses lsp-mode, haskell-mode, and haskell-interactive-mode
[04:06:54] <turco32> id like to find a package that does that
[04:07:48] <justsomeguy> spaceemacs and ghcup get you close
[04:08:11] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[04:08:22] <justsomeguy> Although spaceemacs is pretty huge, and I don't think I'll ever understand how it works.
[04:09:38] <monochrom> Nothing wrong with low tech KISS.
[04:09:39] <sm> turco, the two easy ide setups are emacs + ghcid, and vs code + haskell extension
[04:10:03] <sm> so of course I combine them. vs code + haskell extension with terminal pane running emacs running ghcid for when hls fails
[04:11:04] * sm has been playing this most excellent jasper van der jeugt  joint discovered via HF podcast: https://www.jaspervdj.be/beeraffe/
[04:11:22] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[04:11:52] <sm> hello myShoggoth 
[04:15:26] <dsal> I've never used ghcid, either.  Most of these things seem hard to manage more than one project with.
[04:15:36] <dsal> I hardly ever have just one project open.
[04:16:32] <sm> dsal: you're often hacking on multiple projects simultaneously ?
[04:16:51] <sm> like, as part of a single superproject ?
[04:16:57] <dsal> Sometimes, yeah.
[04:17:08] <dsal> Other times, it's like, I thought of a thing, and I want to do that thing across a bunch of different projects.
[04:17:56] <sm> hls is too heavy to keep a lot of instances running. Even ghcid is, sometimes
[04:18:20] <sm> vs code could easily shut down the one not currently focussed, though
[04:18:30] *** Joins: favonia (~favonia@user/favonia)
[04:18:44] <dsal> I can't remember what was confusing in vscode.
[04:19:01] <dsal> It doesn't help that I have this weird eggshell env.  It's like, stack + nix + macos.
[04:19:05] <dsal> + multiple projects.
[04:20:24] <dsal> vs code was a pretty big improvement for doing TLA+, though.  Except the part where it uses entirely different LaTeX templates or something and doesn't bother shading comments.
[04:27:42] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:29:44] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[04:30:01] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7) (Quit: gone to sleep. ZZZzzz…)
[04:34:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[04:34:34] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[04:36:37] *** Joins: ystael (~ystael@user/ystael)
[04:37:29] <myShoggoth> sm: hi!
[04:39:35] <sm> myShoggoth: hope you work goes well. I'm loving the haskell interlude podcast, just to say
[04:41:20] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:42:35] *** Quits: alx741 (~alx741@181.196.69.19) (Ping timeout: 268 seconds)
[04:43:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:44:12] *** Joins: Topsi (~Tobias@dyndsl-091-249-083-165.ewe-ip-backbone.de)
[04:47:27] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:03] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[04:50:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:50:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:50:51] *** Joins: wroathe (~wroathe@user/wroathe)
[04:53:00] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:55:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:56:25] *** Joins: alx741 (~alx741@186.178.109.242)
[04:57:23] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[05:04:19] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7)
[05:05:26] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7) (Client Quit)
[05:15:27] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[05:16:47] *** Quits: zaquest (~notzaques@5.130.79.72) (Quit: Leaving)
[05:17:37] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7)
[05:17:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:18:45] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:21:20] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[05:22:06] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[05:23:13] *** Joins: machinedgod (~machinedg@24.105.81.50)
[05:25:52] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:29:23] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (Remote host closed the connection)
[05:30:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:31:11] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[05:43:23] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7) (Quit: gone to sleep. ZZZzzz…)
[05:45:32] *** Quits: retro_ (~retro@97e2ba2e.skybroadband.com) (Read error: Connection reset by peer)
[05:46:22] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[05:48:52] *** Quits: chronon (~chronon@user/chronon) (Ping timeout: 260 seconds)
[05:50:17] *** Joins: chronon (~chronon@user/chronon)
[05:52:10] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:52:42] *** Joins: Vajb (~Vajb@85-76-10-43-nat.elisa-mobile.fi)
[05:52:49] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 250 seconds)
[05:54:34] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[05:54:35] *** Quits: Vajb (~Vajb@85-76-10-43-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[05:54:40] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:55:28] <myShoggoth> sm: thank you!
[05:55:36] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[05:55:51] <myShoggoth> sm: The Haskell Interlude team is doing a fantastic job
[05:57:35] <sm> 👍️ excellent guests
[06:16:19] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[06:16:37] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7)
[06:17:47] *** Quits: xff0x (~xff0x@2001:1a81:53b1:4500:9213:f6eb:82ba:af29) (Ping timeout: 264 seconds)
[06:19:17] *** Joins: xff0x (~xff0x@2001:1a81:53ef:fb00:5000:2c7a:ffb3:dbe2)
[06:20:21] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:20:21] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:20:21] *** Joins: wroathe (~wroathe@user/wroathe)
[06:27:14] *** Quits: alx741 (~alx741@186.178.109.242) (Quit: alx741)
[06:31:02] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:c01b:60fe:9558:2d95) (Ping timeout: 240 seconds)
[06:33:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[06:33:37] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7) (Quit: gone to sleep. ZZZzzz…)
[06:33:52] *** Neuromancer is now known as Nrmncr
[06:34:21] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:9965:319a:ef17:fff9)
[06:34:30] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[06:37:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[06:37:53] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[06:38:23] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:40:59] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 268 seconds)
[06:46:32] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:9965:319a:ef17:fff9) (Ping timeout: 240 seconds)
[06:47:33] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[06:48:03] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:c9c2:f9da:e6bb:5682)
[06:57:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:57:33] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:57:33] *** finn_elija is now known as FinnElija
[06:59:45] <Axman6> There's a new haskell podcast? :o
[07:06:10] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 256 seconds)
[07:06:58] *** Joins: mbuf (~Shakthi@122.174.57.32)
[07:07:27] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:11:49] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[07:14:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:18:37] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:18:43] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[07:23:49] *** Quits: td_ (~td@muedsl-82-207-238-143.citykom.de) (Ping timeout: 250 seconds)
[07:25:45] *** Joins: td_ (~td@muedsl-82-207-238-169.citykom.de)
[07:27:00] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:f54f:22a2:7c84:1461)
[07:27:52] *** Joins: aman (~aman@user/aman)
[07:29:42] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:c9c2:f9da:e6bb:5682) (Ping timeout: 268 seconds)
[07:31:02] *** Quits: Topsi (~Tobias@dyndsl-091-249-083-165.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[07:37:09] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:9d18:4862:d949:6f72)
[07:38:26] *** Joins: iamanewb (~iamanewb@98.45.192.30)
[07:39:02] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:f54f:22a2:7c84:1461) (Ping timeout: 240 seconds)
[07:41:10] *** Joins: Guest63 (~Guest63@130.253.27.11)
[07:45:44] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 268 seconds)
[07:45:54] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[07:46:07] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2da1:529b:e827:2fbb)
[07:47:32] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:9d18:4862:d949:6f72) (Ping timeout: 240 seconds)
[07:48:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:49:09] *** Joins: vysn (~vysn@user/vysn)
[07:51:45] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[07:52:38] <Guest63> https://paste.tomsmeding.com/1SZMvVLB
[07:54:00] <Guest63> I'm having trouble running any command involving "stack build" or "stack test" the error seems to be connected to when I put hspec in my dependencies on the package.yaml file
[07:56:01] <Guest63> I have another project that uses hspec and works, but when I use it in this project it doesn't work
[07:56:57] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:57:35] <dsal> Guest63: Sounds like an older stack snapshot?
[07:58:28] <Guest63> How do I refresh my stack snapshot?
[07:58:37] <dsal> you edit stack.yaml
[08:01:33] <Guest63> https://paste.tomsmeding.com/nhcYFpfN
[08:01:46] <Guest63> What should I edit in stack.yaml?
[08:02:47] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:45bd:2d1d:42f2:f442)
[08:02:48] <sm> Axman6: I was talking about https://haskell.foundation/podcast/
[08:04:08] <sm> Guest63: replace lines 20-21 with `resolver: lts-18.17`, eg
[08:04:28] <sm> and get rid of all those confusing comments
[08:04:38] *** Quits: aman (~aman@user/aman) (Quit: aman)
[08:06:05] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2da1:529b:e827:2fbb) (Ping timeout: 268 seconds)
[08:07:47] *** Quits: iamanewb (~iamanewb@98.45.192.30) (Quit: Client closed)
[08:08:16] <sm> Guest63: your error looks like this packaging bug with mintty: https://github.com/RyanGlScott/mintty/issues/4
[08:12:44] <sm> so you're not alone. The easy solution seems to be wait a little bit for lts-18.18
[08:17:31] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[08:19:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:21:10] *** Quits: puke (~puke@user/puke) (Quit: puke)
[08:21:27] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:22:36] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7)
[08:24:09] <Guest63> sm thank you so much, I had to change that 17 in the URL to a 15
[08:24:20] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[08:24:32] <sm> great
[08:25:21] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7) (Client Quit)
[08:27:09] <dsal> The URL form is weird and busted.
[08:27:19] <dsal> But if it works, then go for it.  heh
[08:27:52] <Guest63> its autogenerated either way haha
[08:29:42] <dsal> Yeah, at some point stack started generating that way and it only worked with some tooling.
[08:30:07] <dsal> Just using the string `lts-18.15` works in all the places.
[08:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[08:31:06] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:45bd:2d1d:42f2:f442) (Quit: WeeChat 3.3)
[08:31:13] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[08:31:26] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7)
[08:31:33] <sm> love them snapshots
[08:36:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[08:37:12] <dsal> I was kind of hoping the most recent one would up that network package.
[08:43:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:49:02] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Ping timeout: 240 seconds)
[08:53:47] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 264 seconds)
[08:56:25] *** Joins: hiruji (~hiruji@user/hiruji)
[08:56:40] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[08:56:58] *** Joins: gentauro (~gentauro@user/gentauro)
[08:57:18] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[09:04:41] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:10:19] *** Joins: gentauro (~gentauro@user/gentauro)
[09:11:42] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:12:16] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:12:19] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:15:19] *** Joins: gentauro (~gentauro@user/gentauro)
[09:18:44] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:22:04] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: leaving)
[09:24:04] *** Joins: euouae (~euouae@user/euouae)
[09:24:19] <euouae> Hello how can I apply `f` to `(a,b)`, i.e. transform into `f a b`?
[09:24:36] *** Joins: gentauro (~gentauro@user/gentauro)
[09:25:11] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:26:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:26:10] *** Joins: mei (~mei@user/mei)
[09:26:18] *** Quits: zebrag (~chris@user/zebrag) (Read error: Connection reset by peer)
[09:26:18] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:26:35] <euouae> Ah it's `uncurry`
[09:29:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:29:35] <EvanR> :t uncurry
[09:29:36] <lambdabot> (a -> b -> c) -> (a, b) -> c
[09:29:41] <dsal> I'm trying to read some math that's foreign to me.  I can sort of work it out, but can someone tell me how to read:   g ∈ B → A||B
[09:30:09] <euouae> I think that means g is a proof of B -> A || B
[09:30:30] <EvanR> hexchat shows the thing between g and B as four zeros in a square : (
[09:31:04] <euouae> EvanR it's TeX \in or `belongs to`
[09:31:37] <EvanR> ∈?
[09:31:50] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[09:31:51] *** Joins: gentauro (~gentauro@user/gentauro)
[09:32:29] <EvanR> probably the link to whatever dsal is reading is more helpful xD
[09:32:42] <dsal> It's in https://maartenfokkinga.github.io/utwente/mmf91m.pdf  sorry
[09:32:55] <EvanR> oh that one
[09:32:56] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[09:33:03] <dsal> g \in B \rightarrow A||B
[09:33:10] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[09:33:16] <euouae> there's always €
[09:33:29] <dsal> haha
[09:33:51] <dsal> I can work a lot of these out backwards because I know the end results, but the function notation with the || seems weird to me.
[09:33:51] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:35:05] <euouae> dsal, in that paper it looks like the authors don't care about defining things. It's probably because they think their results are good enough, so what you typically have to do is read the references for definitions
[09:35:52] <EvanR> so A||B is the product type
[09:36:03] <EvanR> and elsewhere, it's just a pairing
[09:36:31] <dsal> oooh.  that makes sense here, thanks.
[09:36:44] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[09:36:49] <dsal> My brain was telling me the || was like, super dividing these two things.
[09:36:57] <EvanR> confusion over product or pairing exists in normal notation (A,B) vs (x,y)
[09:37:06] <EvanR> now we have extra confusion xD
[09:38:16] <EvanR> page 6 does seem to define ||
[09:38:53] *** Quits: Guest63 (~Guest63@130.253.27.11) (Quit: Client closed)
[09:39:02] <EvanR> apparently it's a (bi)functor
[09:39:07] *** Joins: gentauro (~gentauro@user/gentauro)
[09:39:44] <euouae> oh yeah. not that I would know what those are :D
[09:40:13] <dsal> Oh.  I was supposed to get to page 6 before understanding stuff?
[09:40:22] <dsal> I don't read a lot of math papers.
[09:40:35] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[09:40:42] <EvanR> always read the first page and the last page first xD
[09:41:13] <euouae> dsal, it varies from paper to paper. This paper is in the style of addressing other experts
[09:41:33] <dsal> I'm not an expert.  :)
[09:41:46] <euouae> me neither and hence our confusions
[09:41:46] <EvanR> the pages are to be understood lazily... on demand
[09:41:49] <dsal> But it's pretty interesting once I work out the notation.
[09:42:23] <EvanR> each page is like an unevaluated thunk, and may required forcing other pages xD
[09:42:28] <dsal> The annoying part is I know kind of what they're talking about, so I'm actually working out the whole thing backwards.  I'm basically figuring out this notation from understanding what they're trying to describe with it.
[09:42:48] <euouae> I have a function `f n` that produces a list of `n` elements with the property that `f (n + 1)` contains `f n`. How can I optimize for this? 
[09:42:59] <euouae> e.g. f n = [1..n]
[09:43:04] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:43:04] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:43:04] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:43:04] *** Joins: wroathe (~wroathe@user/wroathe)
[09:43:26] <EvanR> you could memoize f n
[09:43:31] <euouae> dsal, it's fine to e-mail the authors and ask them questions too
[09:43:48] <EvanR> memocombinators
[09:43:53] <euouae> Got it, thank you 
[09:43:54] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 260 seconds)
[09:44:07] *** Joins: gentauro (~gentauro@user/gentauro)
[09:44:23] <dsal> I've spoken to one of the authors before.  I should've known this question was going to come up...
[09:44:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:45:22] <dsal> I don't understand why \in is used the way it is here.  I guess = isn't any more obviously a good idea.
[09:45:50] <EvanR> in older papers I've seen \in used in place of : (has type)
[09:46:11] <EvanR> if the right side is a type, then that's probably what it is
[09:46:52] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:47:07] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:47:31] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:47:35] <EvanR> g \in B → A||B would then be g :: B -> (A,B)   (haskell notation)
[09:47:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[09:49:11] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:49:33] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:50:06] <dsal> Yeah, I kind of read that more like "is" than "in" or "element of" or whatever.
[09:52:26] *** Joins: gentauro (~gentauro@user/gentauro)
[09:52:37] <dsal> This barbed wire thing, though…  The best part of being a mathematician seems to be making fancy notation you can show off.
[09:53:06] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[09:54:02] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:54:17] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[09:54:53] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[09:56:10] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[09:57:22] <EvanR> "is" vs "is a" xD
[09:57:54] *** Joins: slice (~slice@user/slice)
[09:58:03] <dsal> ooh, that might help.
[09:58:27] <dsal> These πs with accents are a little too much.
[09:58:43] <EvanR> are they projectors out of a product
[09:59:25] <dsal> To close the loop, this paper also defines uncurry
[09:59:40] <euouae> yay :D
[09:59:42] *** Joins: gentauro (~gentauro@user/gentauro)
[09:59:47] <dsal> You'd never have asked that question if you just read this paper first.
[10:00:19] <EvanR> seems yes. modern notation you'd say pi subscript 1 and pi subscript 2
[10:00:40] <EvanR> rather that forward and backward accent mark... 
[10:00:51] <EvanR> who was the editor lol
[10:01:37] <dsal> I don't know how I've managed to not read this before.  it's pretty good.
[10:02:14] <EvanR> all I really can recall is that banana is basically fmap, liftA2, liftA3 etc
[10:02:15] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[10:02:33] <euouae> EvanR: it's a draft not published I think 
[10:03:02] <EvanR> banana's barbed wire paper was not published?
[10:03:23] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[10:04:08] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[10:04:10] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:04:41] <euouae> the pdf linked on github is a draft so there's no editor for it
[10:05:27] <Lycurgus> in contrast to the default semantics of "draft"
[10:06:28] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:06:40] <dsal> Oh hey, someone translated it to Haskell: http://blog.ezyang.com/2010/05/bananas-lenses-envelopes-and-barbed-wire-a-translation-guide/
[10:07:22] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[10:07:56] <EvanR> well the publishing industry sucks anyway
[10:08:13] <EvanR> who needs em
[10:08:59] *** Joins: gentauro (~gentauro@user/gentauro)
[10:10:22] <euouae> EvanR, no we should have papers from 1970 talking aboug black holes behind paywalls, that's better for society
[10:10:46] <euouae> just in case anyone comes up with an idea without paying first, you know?
[10:10:46] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[10:12:22] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[10:12:27] <EvanR> details of a black hole hidden behind a wall seems ironically apropos
[10:14:21] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[10:15:55] <Lycurgus> https://maartenfokkinga.github.io/utwente/mmf91m.pdf is the "draft"?
[10:16:16] *** Joins: gentauro (~gentauro@user/gentauro)
[10:16:24] <euouae> touche. I was talking about Hawking's 1975 article "particle creation by black holes" 
[10:16:44] <euouae> Lycurgus yeah that's the one I meatn
[10:17:26] <Lycurgus> ah, so in this case the actual semantics of "30 yo" overrides "draft" as far as mutability 
[10:17:54] <euouae> I don't understand you, but I think you're saying it's not a draft?
[10:18:48] <Lycurgus> no, although I didn see that term in it, I mean a 30 yo thing can't be a draft in the sense of 
[10:19:06] <Lycurgus> something is likely going to have more drafts before pub
[10:19:11] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[10:19:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[10:19:41] <euouae> this is not important
[10:20:08] <Lycurgus> no
[10:20:16] <euouae> I have a function f :: Int -> Int and a list [Int] and I'd like to group by f-value. e.g. if f 1 = 1, f 2 = 1 and f 3 = 2, then I'd like to have [[1, 2], [3]]. How can I do this?
[10:20:29] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[10:20:29] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[10:20:42] <euouae> Lycurgus although if this is a typed/scanned version of an old published paper then yeah I stand corrected, and there's probably an editor... 
[10:21:14] <Lycurgus> well it's a dvi 
[10:21:36] <Lycurgus> the tex could be lost
[10:22:08] <euouae> I think I can zip, and then groupBy
[10:23:20] <Lycurgus> i'm unclear what the function is from example list
[10:23:42] <euouae> any function
[10:23:50] <euouae> I'm trying to group by f x == f y
[10:24:23] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[10:26:35] *** Joins: gentauro (~gentauro@user/gentauro)
[10:30:29] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:34:14] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[10:36:54] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[10:39:56] *** Joins: gentauro (~gentauro@user/gentauro)
[10:45:15] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[10:45:37] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:46:25] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[10:47:25] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[10:47:25] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[10:47:34] <tomsmeding> euouae: groupBy ((==) `on` f) ?
[10:47:51] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:6cf6:5d02:5f47:daaa)
[10:47:53] <tomsmeding> might need to sortBy (comparing f) beforehand
[10:48:34] <euouae> I had an issue with groupBy only taking sequential values, I rewrote it as https://paste.tomsmeding.com/5d6v3Bga
[10:48:59] <euouae> Good point though, I think involving a `sort` is a more efficient way to do
[10:50:37] <tomsmeding> euouae: right, your method has quadratic complexity, while sorting has n log n ("linearithmic") complexity
[10:52:16] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:52:26] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[10:52:49] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[10:53:10] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:53:17] *** Joins: gentauro (~gentauro@user/gentauro)
[10:56:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:57:02] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:58:35] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 264 seconds)
[10:58:37] <euouae> linearithimic eh? :P
[10:58:56] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[11:01:12] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[11:05:00] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:06:38] *** Joins: gentauro (~gentauro@user/gentauro)
[11:07:14] *** Joins: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net)
[11:07:20] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[11:09:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[11:11:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:11:12] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[11:12:40] *** Joins: gg (~gg@2a01:e0a:819:1510:8568:3ca4:33bc:8c5b)
[11:13:58] *** Quits: jonathanx_ (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 265 seconds)
[11:14:47] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[11:16:57] *** Joins: gentauro (~gentauro@user/gentauro)
[11:18:37] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[11:18:49] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[11:19:53] *** Joins: vicfred (~vicfred@user/vicfred)
[11:21:57] *** Joins: gentauro (~gentauro@user/gentauro)
[11:23:41] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:23:41] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[11:24:02] <tomsmeding> s/imic/mic/ ;)
[11:26:13] *** Joins: xmx (~xmx@2409:4071:e00:80b9:b273:3649:b25e:dd93)
[11:27:14] <xmx> Hello
[11:29:13] *** Joins: gentauro (~gentauro@user/gentauro)
[11:29:38] <xmx> Guys can anyone tell me what it takes to understand Servant Library ? I have learned the some amount of Haskell but when I see Servant library source code nothing makes sense.
[11:29:53] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:31:51] <sm> xmx, I'd be starting with servant's docs, it couldn't hurt eh
[11:31:52] <[exa]> xmx: by "servant library" you mean the internal code or how to use it?
[11:32:08] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:32:32] *** Quits: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[11:33:38] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[11:34:17] <xmx> [exa]: Internal concepts used.
[11:38:45] *** Joins: ubert (~Thunderbi@p200300ecdf0ba29adda7833ccd9cfa98.dip0.t-ipconnect.de)
[11:39:16] <[exa]> are you familiar with any kind of type-level programming and preferably DataKinds?
[11:39:32] *** Joins: gentauro (~gentauro@user/gentauro)
[11:41:17] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[11:42:20] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[11:45:29] <idnar> @hoogle merge
[11:45:29] <lambdabot> Data.IntMap.Internal merge :: SimpleWhenMissing a c -> SimpleWhenMissing b c -> SimpleWhenMatched a b c -> IntMap a -> IntMap b -> IntMap c
[11:45:30] <lambdabot> Data.IntMap.Merge.Lazy merge :: SimpleWhenMissing a c -> SimpleWhenMissing b c -> SimpleWhenMatched a b c -> IntMap a -> IntMap b -> IntMap c
[11:45:30] <lambdabot> Data.IntMap.Merge.Strict merge :: SimpleWhenMissing a c -> SimpleWhenMissing b c -> SimpleWhenMatched a b c -> IntMap a -> IntMap b -> IntMap c
[11:45:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:46:47] *** Joins: gentauro (~gentauro@user/gentauro)
[11:47:22] *** Joins: michalz (~michalz@185.246.204.119)
[11:48:22] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:48:45] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[11:50:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:51:02] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[11:51:47] *** Joins: gentauro (~gentauro@user/gentauro)
[11:52:10] *** Joins: cfricke (~cfricke@user/cfricke)
[11:53:56] *** Joins: juhp (~juhp@128.106.188.82)
[11:55:00] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[11:55:35] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7) (Quit: gone to sleep. ZZZzzz…)
[11:57:28] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Remote host closed the connection)
[11:59:43] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[12:00:24] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:ecb9:277f:4a2a:1a1f)
[12:01:20] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:03:23] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 264 seconds)
[12:04:44] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7)
[12:07:10] *** Joins: gentauro (~gentauro@user/gentauro)
[12:07:58] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:ecb9:277f:4a2a:1a1f) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:08:59] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:12:36] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[12:14:27] *** Joins: gentauro (~gentauro@user/gentauro)
[12:15:54] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:16:08] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[12:16:16] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:16:50] *** Joins: jess (~jess@libera/staff/jess)
[12:20:11] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 264 seconds)
[12:21:42] *** Joins: gentauro (~gentauro@user/gentauro)
[12:23:27] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:25:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[12:28:57] *** Joins: gentauro (~gentauro@user/gentauro)
[12:32:27] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:34:44] *** Joins: wei2912 (~wei2912@138.75.71.147)
[12:34:58] *** Joins: acidjnk (~acidjnk@p200300d0c7271e04495a3d38c01005cf.dip0.t-ipconnect.de)
[12:36:13] *** Quits: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5) (Quit: Leaving)
[12:36:42] *** Quits: wei2912 (~wei2912@138.75.71.147) (Client Quit)
[12:37:03] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[12:37:31] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:38:14] *** Joins: gentauro (~gentauro@user/gentauro)
[12:39:01] *** Joins: favonia (~favonia@user/favonia)
[12:47:33] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:36] *** allbery_b is now known as geekosaur
[12:49:22] <perrierjouet> hi all
[12:49:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:49:49] <perrierjouet> stack install moe gave me this error http://ix.io/3FqG 
[12:49:50] *** Quits: phma (phma@2001:5b0:2172:a9b8:34c1:76b3:d477:41fd) (Read error: Connection reset by peer)
[12:50:38] <perrierjouet> I did add this line - gray-code-0.3.1@sha256:2c8a4ed9c9ee37320305610604d6d93504e0813d7c9768949af418b53043185a,2388 in /www/.stack/global-project/stack.yaml it did not work
[12:50:46] *** Joins: phma (~phma@host-67-44-208-215.hnremote.net)
[12:51:01] *** Quits: xmx (~xmx@2409:4071:e00:80b9:b273:3649:b25e:dd93) (Remote host closed the connection)
[12:51:10] <perrierjouet> perhaps it should be like gray-code-0.3.1@sha256:2c8a4ed9c9ee37320305610604d6d93504e0813d7c9768949af418b53043185a ?
[12:51:48] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[12:53:09] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:6091:9a2c:b661:21c7) (Quit: gone to sleep. ZZZzzz…)
[12:56:35] *** Quits: bitmapper (uid464869@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:57:31] <tomsmeding> perrierjouet: the ,2388 suffix is necessary
[12:57:36] <tomsmeding> where exactly did you add this in the stack.yaml?
[12:57:42] *** Joins: gentauro (~gentauro@user/gentauro)
[12:57:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[12:58:50] <tomsmeding> perhaps post the stack.yaml after your addition?
[13:03:19] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Ping timeout: 268 seconds)
[13:03:23] <perrierjouet> tomsmeding: http://ix.io/3FqI 
[13:03:34] <perrierjouet> my stack.yaml
[13:03:37] <tomsmeding> ah, it needs to look like this:
[13:03:39] <tomsmeding> extra-deps:
[13:03:43] <tomsmeding> - gray-code-.....
[13:03:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:04:10] <tomsmeding> (including all the stuff that was already there of course, including the packages thing and the resolver thing
[13:04:11] <tomsmeding> )
[13:05:31] *** Joins: jinsun__ (~quassel@user/jinsun)
[13:06:01] <perrierjouet> tomsmeding: thanks it worked
[13:06:35] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 250 seconds)
[13:07:59] *** Joins: jinsun (~quassel@user/jinsun)
[13:09:14] *** Joins: jinsun___ (~quassel@user/jinsun)
[13:11:57] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[13:12:05] <Franciman> well, happy to read haskell is quite energy efficient: https://greenlab.di.uminho.pt/wp-content/uploads/2017/10/sleFinal.pdf
[13:12:30] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[13:12:44] <Franciman> but but ocaml features always a 2x save in energy in the tests
[13:12:50] <Franciman> is it because of laziness?
[13:19:00] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a055:2897:27b6:f1d6)
[13:20:35] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[13:28:42] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:31:47] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[13:39:18] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:42:50] <hololeap> is this nextStep function an example of where I could use logict instead? http://sprunge.us/3zxdMZ
[13:43:34] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:44:35] *** Quits: jinsun___ (~quassel@user/jinsun) (Read error: Connection reset by peer)
[13:45:03] *** Joins: jinsun (~quassel@user/jinsun)
[13:47:06] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[13:47:06] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[13:48:37] *** Joins: rkrishnan (~user@122.167.19.65)
[13:48:45] <hololeap> I was just curious what monad could be used to remember the parent value in a tree traversal. state wouldn't work because it would remember the last value traversed, which could be a leaf and not the parent.
[13:48:53] *** Quits: rkrishnan (~user@122.167.19.65) (Remote host closed the connection)
[13:50:08] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.3)
[13:51:59] *** Quits: bgamari (~bgamari@70.16.103.161) (Ping timeout: 264 seconds)
[13:52:09] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Read error: Connection reset by peer)
[13:52:46] *** Joins: gentauro (~gentauro@user/gentauro)
[13:53:01] <[exa]> hololeap: well, Reader + local might just do, if you absolutely want a monad
[13:54:10] <hololeap> sure, and it isn't necessary, just exploring different ergonomic options
[13:55:18] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[13:55:58] <hololeap> I'm also trying to understand how to use logict a little better by finding little use cases for it
[13:57:32] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:57:32] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[13:57:58] *** Joins: bgamari (~bgamari@64.223.235.131)
[13:58:24] <hololeap> Reader + local is something I know about
[14:03:05] *** Joins: gentauro (~gentauro@user/gentauro)
[14:03:37] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:08:17] *** Joins: alzgh (~alzgh@user/alzgh)
[14:09:26] <alzgh> Hello, I have a single haskell file that imports `System.Random`. I want to load it in ghci and test. How can I add `random` package to ghci's environment? I can also do `stack ghci`. Thanks.
[14:09:59] <[exa]> alzgh: do you have `random` specified in project dependencies?
[14:10:42] <[exa]> alzgh: also in ghci you can add (already installed) packages to the "search paths" using `:set -package random`
[14:11:07] <[exa]> (which should be done automagically if you have that in deps)
[14:11:37] <alzgh> this isn't a project. It's a single file that import `System.Random`.
[14:12:30] <[exa]> ah okay. you might need to install a "global" random package then, I'm not really sure how that's done with stack
[14:12:52] <alzgh> just checked with stack ghci and it worked
[14:12:57] <[exa]> but try the :set, chances are that it either works or gives you an error that's easier to fix :D
[14:13:01] <[exa]> ah okay nice
[14:13:09] <alzgh> thanks
[14:13:42] <[exa]> yw :]
[14:14:03] <[exa]> hololeap: what's the algorithm supposed to do btw? LogicT is for prolog problems
[14:15:52] <[exa]> hololeap: also (just curious) you don't support asymmetric branches (such as "left child only") with the datatype there, right?
[14:16:03] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:18:19] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba29ae6b318fffe838f33.dip0.t-ipconnect.de)
[14:20:13] *** Joins: slice (~slice@user/slice)
[14:21:31] *** Joins: gentauro (~gentauro@user/gentauro)
[14:22:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[14:23:37] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[14:23:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:26:04] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:26:44] <hololeap> it's for this programming challenge where you implement GoL with a binary tree instead of a 2d grid
[14:26:56] *** Joins: Everything (~Everythin@37.115.210.35)
[14:28:10] <hololeap> and no, it's either a node with two branches or a leaf
[14:29:56] <hololeap> since each step in the GoL requires knowledge of all neighboring nodes, you have to carry around the state of the parent so you can reference it
[14:30:51] *** Joins: alx741 (~alx741@186.178.109.242)
[14:31:49] *** Joins: gentauro (~gentauro@user/gentauro)
[14:32:49] <[exa]> how's the binary tree organized into 2D? like, H-curve?
[14:32:59] <[exa]> or is it a 1D cellular automaton?
[14:34:08] *** Joins: puke (~puke@user/puke)
[14:34:27] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:35:34] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[14:36:36] <hololeap> it just looks at the parent node and the two children, if they exist
[14:37:05] <hololeap> neighbors that don't exist are considered dead
[14:38:53] <hololeap> https://www.hackerrank.com/challenges/the-tree-of-life/problem
[14:38:59] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Quit: ZNC 1.8.2 - https://znc.in)
[14:39:16] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[14:40:04] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:45:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[14:46:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:47:18] *** Joins: dschrempf (~dominik@62.240.134.78)
[14:49:40] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:52:02] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[14:53:32] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 240 seconds)
[14:54:35] <tomsmeding> alzgh: stack ghci --package random myfile.hs
[14:54:55] <tomsmeding> this automatically downloads and compiles the package and dependencies if necessary
[14:55:20] *** Joins: gentauro (~gentauro@user/gentauro)
[14:56:37] <idnar> @hoogle (a -> b) -> Either a a -> b
[14:56:38] <lambdabot> No results found
[14:57:19] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[14:57:19] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:59:21] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[14:59:45] <dminuoso> % :t bimap id id
[14:59:45] <yahb> dminuoso: Bifunctor p => p b d -> p b d
[15:00:00] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[15:00:01] <dminuoso> idnar: Mm, the closest thing is `select`
[15:00:05] <dminuoso> from selective functors
[15:00:16] <dminuoso> https://hackage.haskell.org/package/selective-0.4.2/docs/Control-Selective.html#v:select
[15:00:21] *** Joins: gentauro (~gentauro@user/gentauro)
[15:01:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:01:34] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:04:22] <idnar> oh actually I have to use my function at different types
[15:14:43] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:17:08] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:17:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:19:00] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:21:37] *** Joins: bobfang (~bobfang@2a01:4b00:87fe:be00:30ce:ab50:b4f4:7d62)
[15:23:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[15:23:11] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[15:23:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:24:16] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 256 seconds)
[15:25:19] *** Quits: bobfang (~bobfang@2a01:4b00:87fe:be00:30ce:ab50:b4f4:7d62) (Client Quit)
[15:27:00] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 268 seconds)
[15:27:40] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:29:15] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:32:33] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 268 seconds)
[15:34:12] <hololeap> % import Data.Bifunctor.Join
[15:34:13] <yahb> hololeap: 
[15:34:28] <hololeap> % :t either id id . runJoin -- idnar
[15:34:28] <yahb> hololeap: Join Either c -> c
[15:34:33] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:35:13] <hololeap> % :t \f -> either id id . runJoin . fmap f
[15:35:14] <yahb> hololeap: (a -> c) -> Join Either a -> c
[15:35:53] <hololeap> % :t \f -> either id id . runJoin . fmap f . Join -- there we go ;)
[15:35:53] <yahb> hololeap: (a -> c) -> Either a a -> c
[15:38:20] * dminuoso prefers selective
[15:38:54] <dminuoso> It seems more fitting
[15:39:15] <dminuoso> in particular with branch
[15:39:20] <dminuoso> branch :: Selective f => f (Either a b) -> f (a -> c) -> f (b -> c) -> f c 
[15:39:37] <dminuoso> branch x f f
[15:39:45] <hololeap> fair enough. I just wanted to point out that bifunctors has some hidden goodies
[15:39:59] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[15:40:00] <dminuoso> Who knows, depending on idnar's access pattern, they might even end up doing something like `branch x f g` if they are fmapping before
[15:40:30] <dminuoso> hololeap: Yeah, Join is a neat thing I havent heard of before
[15:41:06] <dminuoso> Perhaps selective is not so elegant, since you need to run it through Identity as well
[15:41:14] <dminuoso> Perhaps points to you after all, hololeap
[15:41:31] <idnar> mergeBy (comparing (view (choosing _1 _1))) (Left <$> trades) (Right <$> fees)
[15:41:32] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[15:42:25] *** Quits: ubert (~Thunderbi@p200300ecdf0ba29adda7833ccd9cfa98.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[15:42:26] *** ubert1 is now known as ubert
[15:42:27] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[15:43:13] <idnar> seems inelegant
[15:43:33] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[15:43:59] *** Joins: Guest17 (~Guest17@wificampus-098247.grenet.fr)
[15:44:12] <dminuoso> idnar: Heh I have this type of access pattern frequently 
[15:44:19] <dminuoso> It's very unidiomatic and doesnt fit well into optics/lens
[15:44:30] <dminuoso> What I do is this:
[15:44:40] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Client Quit)
[15:44:49] <Guest17> so I was wondering how the the Eq class "works under the hood"
[15:44:57] <dminuoso> idnar: https://gist.github.com/dminuoso/079df3993f83700eedd188ecb5d92820
[15:45:10] *** Joins: BobFang1992_ (~textual@2a01:4b00:87fe:be00:30ce:ab50:b4f4:7d62)
[15:45:21] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[15:45:35] <dminuoso> Where: unsafeSingular :: forall k is s a. Is k A_Traversal => Optic' k is s a -> Lens' s a
[15:45:51] <Guest17> does haskell have functions for comparing its primitive types like Int and Char?
[15:45:56] *** Joins: __monty__ (~toonn@user/toonn)
[15:46:04] <Guest17> that map to FFI calls, I suppose?
[15:46:05] <dminuoso> idnar: This could perhaps work for you, because then you can simply pretend you have a lens and it just works.
[15:46:28] <dminuoso> So for your case you'd just write: bothSides = unsafeSingular (_Left `failingT` _Right)
[15:46:44] <hololeap> Guest17: generally, you convert one type to the other first
[15:47:43] <hololeap> but there probably is some low-level way of comparing unboxed values
[15:49:01] <Guest17> hololeap: "unboxed values" ?
[15:50:03] <geekosaur> I'm not sure what Guest17 is asking
[15:51:05] <geekosaur> but the primitive values contained within types like Int and Char ("unboxed values") can be compared using intrinsics that map directly to assembly code in the code generator
[15:51:20] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[15:52:03] <geekosaur> and much of the time the compiler will know that it can unbox an Int and directly generate and compare the values, so the result is as fast as assembly code
[15:52:08] <geekosaur> @src Int
[15:52:08] <lambdabot> data Int = I# Int#
[15:52:08] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Client Quit)
[15:52:25] <hpc> the "box" around unboxed values is the stuff that gives you laziness and such
[15:52:30] <geekosaur> the # marks it as internal and there's an extension to access those directly
[15:53:11] <geekosaur> Int# is a signed machine word and operations on it generally map straight to assembly language instructions
[15:53:39] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[15:53:46] *** Quits: Guest17 (~Guest17@wificampus-098247.grenet.fr) (Ping timeout: 256 seconds)
[15:53:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:55:19] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:55:26] <int-e> :t (GHC.Prim.<#)
[15:55:27] <lambdabot> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[15:56:05] <int-e> (that's one of the builtin primitive comparison operations)
[15:56:26] <dminuoso> And how is that turned back into a Bool?
[15:56:53] <dminuoso> Or does this produce something like 0 or 1, and that gets pattern matched back into False/True?
[15:57:06] <alzgh> what was the flag for enabling explicit class method signatures?
[15:57:21] <dminuoso> alzgh: InstanceSigs ?
[15:57:28] <int-e> :t GHC.Exts.isTrue#
[15:57:29] <lambdabot> GHC.Prim.Int# -> Bool
[15:57:34] <dminuoso> int-e: Ah!
[15:57:58] <alzgh> right, thanks dminuoso
[15:58:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:58:24] <int-e> which isn't a builtin but an alias: isTrue# x = tagToEnum# x
[15:58:43] <hololeap> speaking of InstanceSigs, what's the status of some meta-extension like Extensions2021 or something? I remember reading about that being considered at some point
[15:59:04] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[15:59:05] <merijn> GHC2021
[15:59:23] <int-e> dminuoso: conceptually it's a case expression, of course.
[15:59:29] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 250 seconds)
[15:59:42] <hololeap> oh, nice
[16:00:01] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:00:04] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:00:37] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[16:00:38] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[16:00:38] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[16:01:53] <int-e> and presumably the compiler knows some simplifciations that optimize  case tagToEnum# foo of ...  accordingly.
[16:02:17] <dminuoso> isTrue# x = tagToEnum# x
[16:02:21] <dminuoso> And tagToEnum# is a primop it seems
[16:03:07] <hololeap> where can I find a list of which extensions that enables?
[16:03:23] <tomsmeding> https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0380-ghc2021.rst
[16:03:32] <merijn> hololeap: Presumably in the GHC user guide? :p
[16:03:34] <hololeap> ok
[16:03:39] <yushyin> hololeap: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/control.html#extension-GHC2021
[16:03:42] <tomsmeding> oh better source: https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/control.html?highlight=ghc2021#extension-GHC2021
[16:03:55] <hololeap> sorry, I had a hard time finding it in the user guide
[16:04:00] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[16:04:02] <tomsmeding> wrong ghc version? :)
[16:04:25] <hololeap> no, I just didn't notice the search bar
[16:04:37] <hololeap> I was looking through different categories
[16:05:27] <tomsmeding> tip: https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/table.html
[16:06:08] <tomsmeding> I'm not sure whether the extensions are even divided into categories, I never use the categories to find an extension
[16:06:20] <tomsmeding> s/whether/why/
[16:06:38] <tomsmeding> (that's quite a change in meaning...)
[16:06:42] <hololeap> for whatever reason, the docs for 8.10.6 on my PC have the extensions section as one big HTML file, so that's what I'm used to searching through
[16:06:59] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[16:11:04] <hololeap> interesting; there are some extensions listed that aren't in the user's guide e.g. RelaxedPolyRec
[16:11:38] <yushyin> maybe part of the haskell report
[16:11:45] <hololeap> why wouldn't TypeFamilies be in there?
[16:12:12] <hololeap> or GADTs
[16:12:13] <tomsmeding> why wouldn't GADTs be in there
[16:12:14] <tomsmeding> yeah
[16:12:29] <yushyin> https://gitlab.haskell.org/ghc/ghc/-/issues/18630
[16:12:51] <hololeap> it's all in the docs. except for what isn't in the docs
[16:12:57] <tomsmeding> why did PolyKinds, which changes semantics (IIRC), get more votes than TypeFamilies and GADTs
[16:13:47] <Cajun> what semantics do polykinds change? i know it lets you use polymorphic kinds, but when does that really change the meaning of a program?
[16:14:10] <tomsmeding> see also https://gitlab.haskell.org/ghc/ghc/-/blob/master/compiler/GHC/Driver/Session.hs#L3618-3620
[16:15:00] <tomsmeding> Cajun: I admit I don't have an example, just some vague recollection. Can't PolyKinds make some code not compile because kinds become more ambiguous or something?
[16:15:24] <Cajun> that would make sense, would need to tinker with it some more
[16:15:34] <Cajun> cant wait for Thinking with Types 2 :)
[16:16:36] <yushyin> cant wait for -XGHC2023! :P
[16:17:10] <Cajun> then code breaks because it has -XGHC2021 instead of 2023 :P
[16:21:25] <lortabac> TypeFamilies implies MonoLocalBinds, enabling it may make previously working programs not compile anymore
[16:21:50] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[16:21:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:22:15] <lortabac> same problem for GADTs
[16:22:59] <tomsmeding> ah
[16:24:22] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:26:22] <dminuoso> Is Data.Text.toLower injective?
[16:26:38] <dminuoso> Sorry
[16:26:40] <dminuoso> Let me rephrase:
[16:27:25] <dminuoso> My question is very redundant and silly.
[16:27:27] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:30:21] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[16:31:24] <tomsmeding> :)
[16:31:49] <tomsmeding> it is injective for certain languages though
[16:32:11] <dminuoso> For a moment I was pondering whether `instance Eq where (Domain k) == (Domain l) == T.toLower k == T.toLower l` would behave nicely
[16:32:53] <tomsmeding> it's an equivalence relation
[16:33:14] <dminuoso> Sure, and DNS even requires this 
[16:33:44] <dminuoso> My confusion started with "but what if this is not ASCII" - but this is not possible by construction
[16:33:55] <dminuoso> Which is why the question was silly to begin with
[16:34:23] <dminuoso> Fun fact, in most PCRE implementations \d is likely not what you want.
[16:34:32] <dminuoso> Since it often will match UTF8 digit characters of various scripts...
[16:35:48] <merijn> dminuoso: No
[16:36:07] <merijn> dminuoso: or rather, toLower might be, because it's a hack-job implementation
[16:36:10] <c_wraith> Hmm.  if it's not supposed to be outside of ASCII, why are you representing it as Text?
[16:36:19] <merijn> Unicode toLower is locale dependent
[16:36:56] <dminuoso> c_wraith: Yeah ByteString is probably more fitting. Honestly there's a bunch of interfaces that made me pick Text instead
[16:36:58] <dminuoso> Seemed more compatible
[16:37:24] <c_wraith> there's a well-defined conversion from unicode to bytes for domains
[16:37:34] <c_wraith> and nothing else in the world uses it
[16:37:56] <dminuoso> Well, strictly speaking Im writing a DNS server layer - but punycode conversion would happen outside of it
[16:38:06] <dminuoso> I think?
[16:38:09] <dminuoso> Uh. 
[16:38:11] <dminuoso> Hold on.
[16:38:43] <c_wraith> just at a domain level, you should either have bytes that have been encoded, or text that hasn't.
[16:38:55] <c_wraith> Those are the two levels that make sense.
[16:39:53] <dminuoso> c_wraith: The main reason I have Text here, is because I end up putting it out via JSON.
[16:40:04] <dminuoso> using aeson
[16:40:43] <dminuoso> There's an extra newtype around it to avoid accidental confusion, so you have to go through my parser routine anyway
[16:41:31] <dminuoso> And my parser has things like isLetDig c = isAsciiLetter c || isDigit c
[16:46:57] *** Quits: BobFang1992_ (~textual@2a01:4b00:87fe:be00:30ce:ab50:b4f4:7d62) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:47:45] *** Joins: kuribas (~user@ptr-25vy0i8ozjc5f1a3qes.18120a2.ip6.access.telenet.be)
[16:51:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1)
[16:55:32] *** Quits: Nrmncr (~Neuromanc@user/neuromancer) (Ping timeout: 240 seconds)
[16:57:53] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:59:29] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:02:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[17:03:58] *** Quits: dschrempf (~dominik@62.240.134.78) (Ping timeout: 260 seconds)
[17:06:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Ping timeout: 264 seconds)
[17:08:22] *** Joins: dschrempf (~dominik@62.240.134.78)
[17:08:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[17:08:34] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:10:17] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:11:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 264 seconds)
[17:12:12] *** Joins: jbox (~jbox@user/jbox)
[17:13:41] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Ping timeout: 268 seconds)
[17:13:46] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:15:44] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[17:15:55] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-fa5e-26bf-14ad-ea07.fixed6.kpn.net)
[17:18:44] *** Quits: dschrempf (~dominik@62.240.134.78) (Ping timeout: 256 seconds)
[17:20:32] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:21:20] *** Joins: slice (~slice@user/slice)
[17:24:23] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 264 seconds)
[17:25:20] *** Joins: sydddddd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net)
[17:25:33] *** Joins: max22- (~maxime@2a01cb0883359800f3916cdff6a2f8a4.ipv6.abo.wanadoo.fr)
[17:26:13] <kuribas> ApplicativeDo could have been one of the best extensions, if it wasn't so buggy...
[17:26:25] <kuribas> It's very useful with records.
[17:27:09] <kuribas> Right now, if you would use it for parallelism, it may give you sequencing when you expect parallism.
[17:28:11] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:29:14] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:30:46] <sydddddd> does anyone have any links on ALens' info (other than Lens docs) ?
[17:31:56] <lortabac> kuribas: it's not perfect but it's always been good enough for me
[17:32:07] *** Joins: hololeap (~hololeap@user/hololeap)
[17:32:21] <lortabac> as long as you respect the rules it should be quite reliable
[17:32:58] <Lycurgus> kuribas, it does say 'best effort' on parallelism
[17:33:04] <c_wraith> sydddddd: it's not really that interesting. It's mostly there to not need to infer polymorphic types
[17:33:13] <kuribas> Lycurgus: I'd say it can do better :)
[17:33:33] <Lycurgus> that's like sayin it's undone/uncovered
[17:33:33] <kuribas> If I do (a, b) <- someApplicative, it will consider it a monad.
[17:33:51] <kuribas> Lycurgus: it's buggy and flawed, yes.
[17:34:48] <sydddddd> c_wraith: thanks. I tend to use it with specific type errors I've come to recognise and to be fair it usually works.
[17:34:55] <Lycurgus> i would say flawed but within spec
[17:35:04] <kuribas> Lycurgus: not even that
[17:35:37] <sydddddd> usually when passing/returning polymorphic functions that take and return lenses, when type annotations don't help.
[17:35:42] <Lycurgus> (as far as parallelism and do)
[17:36:18] <sydddddd> does that sound about right for typical usage of it?
[17:36:47] <lortabac> kuribas: do you have an example of unexpected behavior?
[17:37:00] <kuribas> Lycurgus: it removes polymorphism.
[17:37:37] <kuribas> Lycurgus: Also do "x <- foo; y <- bar; let z = x + y; pure z" becomes monadic.
[17:38:05] <kuribas> Lycurgus: Or "do (x, y) <- foo; z <- bar; pure (x + y + z)"
[17:38:26] <Lycurgus> i wouldn expect parallelism to be handled properly outside stuff explicitly oriented for that 
[17:38:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[17:38:54] <kuribas> Sure I can rewrite than, but it's annoying...
[17:38:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:39:07] <kuribas> Plus, there is no indication that it should be parallel.
[17:39:35] <kuribas> So you could think that everything is fine and optimally parallel when it isn't.
[17:40:35] * geekosaur wonders if the new QualifiedDo stuff would be helpful there
[17:40:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:41:02] <geekosaur> although probaly not since you can't use that to choose the Applicative instance
[17:41:03] <geekosaur> sigh
[17:41:29] <geekosaur> might be an interesting extension to QualifiedDo since then it could throw a type error if it "upgraded" to Monad
[17:44:08] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[17:44:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 265 seconds)
[17:47:20] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[17:52:02] * kuribas wonders how it's done at facebook
[17:54:54] <jippiedoe> I'd love QualifiedDo to take into account what's in scope, that would also allow you to opt out of MonadFail and get exhaustiveness checks in your monad bindings instead
[18:01:41] *** Joins: jkaye (~jkaye@216.53.205.34)
[18:02:25] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.3)
[18:02:54] *** Joins: favonia (~favonia@user/favonia)
[18:04:02] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[18:05:18] *** Joins: pera (~pera@user/pera)
[18:05:19] <hololeap> I would like for there to be some way to force applicative do, rather than it silently defaulting back to monadic do
[18:07:04] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[18:10:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:10:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:10:11] *** Joins: wroathe (~wroathe@user/wroathe)
[18:14:18] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:18:03] <kuribas> like purescript ado?
[18:19:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:20:04] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:20:44] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[18:21:59] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Quit: ZNC 1.8.2 - https://znc.in)
[18:22:25] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[18:23:59] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 268 seconds)
[18:25:21] *** Joins: BobFang1992 (~textual@2a01:4b00:87fe:be00:2941:7b2f:659a:8781)
[18:25:47] <maerwald> "wonders how it's done at facebook" -> you just lie about what you did xD
[18:25:59] *** Joins: mimmy (~mimmy@146.70.75.190)
[18:26:13] <hololeap> kuribas: I haven't used purescript but yeah, ado was what I was thinking
[18:26:57] <Franciman> ahah
[18:27:25] <hololeap> abort
[18:28:40] *** Joins: nvmd (~nvmd@user/nvmd)
[18:29:32] <hololeap> I agree it's pretty clunky, but at least there is a way to do it... http://sprunge.us/HPeHM8
[18:29:52] *** Joins: ymherklotz (~user@2a0c:5bc0:40:107b:fdfc:4d2d:898a:f9f5)
[18:29:57] *** Joins: hiruji (~hiruji@user/hiruji)
[18:33:31] <hololeap> I don't know why the `let` built in to the do notation would force it back to monadic do
[18:35:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:36:09] *** Joins: pavonia (~user@user/siracusa)
[18:36:21] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:2c29:7076:9399:3f2e) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:36:35] *** BobFang1992 is now known as bobfang1992_
[18:36:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7816:2c69:3dcc:933a)
[18:37:08] <hololeap>  > Note: the final statement must match one of these patterns exactly ... In particular, slight variations such as `return . Just $ x` or `let x = e in return x` would not be recognised.
[18:37:48] <hololeap> so it sort of explains it
[18:39:07] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[18:40:37] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[18:41:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:42:00] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:6cf6:5d02:5f47:daaa) (Quit: WeeChat 2.8)
[18:42:11] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-fa5e-26bf-14ad-ea07.fixed6.kpn.net) (Ping timeout: 265 seconds)
[18:43:39] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Remote host closed the connection)
[18:44:31] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db)
[18:46:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:46:11] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:bde7:830:4cf1:2fa1) (Ping timeout: 268 seconds)
[18:49:32] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[18:50:25] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Quit: gone to sleep. ZZZzzz…)
[18:52:26] *** Joins: xsperry (~xs@cpe-188-129-101-182.dynamic.amis.hr)
[18:52:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:52:30] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:52:30] *** Joins: wroathe (~wroathe@user/wroathe)
[18:53:37] *** Joins: cheater1__ (~Username@user/cheater)
[18:53:37] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[18:53:40] *** cheater1__ is now known as cheater
[18:56:40] *** Quits: mimmy (~mimmy@146.70.75.190) (Ping timeout: 268 seconds)
[18:57:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:57:59] *** Joins: cheater1__ (~Username@user/cheater)
[18:58:18] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[18:58:23] *** cheater1__ is now known as cheater
[19:00:12] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[19:03:50] *** Joins: ub (~Thunderbi@p200300ecdf0ba29aa5e920d3668bb518.dip0.t-ipconnect.de)
[19:05:02] *** Quits: acidjnk (~acidjnk@p200300d0c7271e04495a3d38c01005cf.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:06:35] *** Quits: jkaye (~jkaye@216.53.205.34) (Remote host closed the connection)
[19:07:00] *** Joins: jkaye (~jkaye@216.53.205.34)
[19:07:56] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:08:17] *** Joins: mimmy (~mimmy@146.70.75.189)
[19:08:29] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:09:34] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[19:10:35] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 264 seconds)
[19:13:58] *** Joins: alzgh (alzgh@user/alzgh)
[19:14:33] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[19:15:30] *** Joins: gandalf_ (gandalf@2a01:270:20cd:88::1)
[19:15:48] *** Parts: gandalf_ (gandalf@2a01:270:20cd:88::1) ()
[19:15:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:16:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:18:15] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 268 seconds)
[19:19:46] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:20:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[19:21:33] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:e6ab:18be:9a14:11e0)
[19:21:34] *** Quits: turco32 (~turco32@104.158.25.93) (Quit: Leaving)
[19:26:15] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:28:39] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[19:32:59] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:35:35] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:35:48] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: restarting)
[19:36:04] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[19:38:21] *** Quits: pera (~pera@user/pera) (Quit: leaving)
[19:38:21] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:43:33] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[19:43:34] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[19:44:10] *** Quits: jkaye (~jkaye@216.53.205.34) (Ping timeout: 268 seconds)
[19:46:16] *** Joins: favonia (~favonia@user/favonia)
[19:48:06] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:48:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[19:48:55] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[19:50:03] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[19:50:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:51:39] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[19:52:31] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:e6ab:18be:9a14:11e0) (Quit: WeeChat 2.8)
[19:56:46] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:57:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[19:58:07] *** Joins: monochrom (~trebla@216.138.220.146)
[19:59:02] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[20:00:18] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:a055:2897:27b6:f1d6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:01:56] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 265 seconds)
[20:02:06] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a055:2897:27b6:f1d6)
[20:06:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[20:07:30] *** Joins: mimmy (~mimmy@146.70.75.189)
[20:09:47] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[20:10:08] *** Joins: alzgh (alzgh@user/alzgh)
[20:11:11] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[20:12:35] <kuribas> hololeap: well "return let x = e in x" works
[20:12:44] *** Quits: kuribas (~user@ptr-25vy0i8ozjc5f1a3qes.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[20:13:30] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[20:14:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:18:09] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:18:30] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[20:18:30] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 260 seconds)
[20:18:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:19:16] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[20:19:38] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[20:19:56] <monochrom> I am reading and encouraged by https://anthony.noided.media/blog/thoughts/haskell/languages/2021/11/05/writing-about-haskell-is-hard.html  Perhaps I should include rank-n types in my class next time. (I already have Applicative, and Functor, and Monad.)
[20:20:12] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[20:20:24] <monochrom> And yeah Boring Haskell is a bit misguided.
[20:20:45] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[20:20:56] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:22:23] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[20:22:45] <maerwald> it depends on laziness to not blow up? hope they have a good test suite :)
[20:25:25] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[20:27:33] *** Quits: ub (~Thunderbi@p200300ecdf0ba29aa5e920d3668bb518.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[20:31:15] <monochrom> Now I'm reading https://reasonablypolymorphic.com/blog/century-of-the-fruitbat/  (OK, so basically I'm catching up with yesterday's Haskell Weekly News heh)
[20:32:41] <monochrom> You know what, ironically, I may appreciate Prelude omitting head and tail. Because then my students are forced to write like "f [] = ...  f (x:xs) = ..." and learn pattern matching :)
[20:33:07] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[20:34:03] <maerwald> Until they need to use Text
[20:34:07] <maerwald> and then the world collapses
[20:34:22] <maerwald> everything was a lie!
[20:34:24] <monochrom> And in the rare case I need head, it's a simple lambda, (\(x:_) -> x).
[20:35:00] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:35:22] <maerwald> (\[x] -> x)
[20:35:30] <monochrom> I don't use String to teach lists. I use [Int] [Bool] etc.
[20:36:15] <maerwald> @pl (\(x:_) -> x)
[20:36:15] <lambdabot> head
[20:36:22] <monochrom> haha
[20:42:14] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Remote host closed the connection)
[20:42:59] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 264 seconds)
[20:44:27] *** Quits: mbuf (~Shakthi@122.174.57.32) (Quit: Leaving)
[20:46:32] *** Quits: xff0x (~xff0x@2001:1a81:53ef:fb00:5000:2c7a:ffb3:dbe2) (Ping timeout: 240 seconds)
[20:48:16] *** Joins: xff0x (~xff0x@2001:1a81:53ef:fb00:5000:2c7a:ffb3:dbe2)
[20:53:20] *** Joins: slaydr (~seriley@192.109.205.174)
[20:54:35] <slaydr> is the Haskell2020 report still in the works?
[20:55:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[20:56:11] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[21:00:47] *** Joins: xkuru (~xkuru@user/xkuru)
[21:00:51] *** Joins: mbuf (~Shakthi@122.174.57.32)
[21:01:04] <maerwald> haha
[21:01:20] <maerwald> maybe when covid is over
[21:01:23] *** Quits: ubert (~Thunderbi@p200300ecdf0ba29ae6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[21:01:27] <maerwald> (like... never)
[21:01:51] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 268 seconds)
[21:01:58] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[21:05:02] *** Quits: Jing (~hedgehog@115.207.47.111) (Read error: Connection reset by peer)
[21:06:59] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[21:07:17] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[21:08:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[21:08:11] *** Joins: mimmy (~mimmy@146.70.75.190)
[21:10:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:11:11] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 264 seconds)
[21:12:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:12:45] *** Joins: econo (uid147250@user/econo)
[21:13:22] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Ping timeout: 256 seconds)
[21:17:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:17:44] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[21:18:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:19:11] <monochrom> Even the 2020 Summer Games have already finished >:)
[21:19:45] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:19:54] <monochrom> It's now pretty clear that we will have GHC2021 instead.
[21:20:22] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[21:22:03] <monochrom> I am paradoxically both surprised and not surprised that no one complains against GHC2021, whereas people get vocal against no-/=.
[21:23:51] *** Quits: slaydr (~seriley@192.109.205.174) (Remote host closed the connection)
[21:24:37] <yushyin> but if we are comfortable with ghc2021, maybe it will pave the way for haskell prime :-)
[21:24:47] <monochrom> This is consistent with my model that programmers are good at technicalities (even when technicalities are irrelevant) and very bad at social, cultural considerations (even when much more relevant).
[21:25:36] <monochrom> GHC2021 is "not" a breaking change because technically it is an opt-"in". So no one will complain.
[21:26:48] <monochrom> Just you wait. It is doomed to be so commonly used that socially you will be forced into it anyway. Then it is a breaking change.
[21:27:08] *** Joins: deadmarshal (~deadmarsh@95.38.116.147)
[21:28:00] <monochrom> Whereas no-/= is statistically a pretty irrelevant "breaking" change.
[21:28:51] <monochrom> I don't buy the "but what about the principles?" argument because it would apply to GHC2021 too so why aren't you speaking up.
[21:29:11] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[21:30:28] *** Joins: Successus (~Successus@gateway/tor-sasl/successus)
[21:31:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:32:04] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[21:32:30] *** Joins: emf (~emf@162.218.217.186)
[21:35:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[21:36:10] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[21:36:58] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:37:38] *** Joins: emf_ (~emf@2620:10d:c090:400::5:5ceb)
[21:38:34] *** Quits: max22- (~maxime@2a01cb0883359800f3916cdff6a2f8a4.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:39:18] *** Quits: emf (~emf@162.218.217.186) (Ping timeout: 260 seconds)
[21:41:42] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:a055:2897:27b6:f1d6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:42:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8)
[21:42:46] <davean> monochrom: I did speak up about GHC2021
[21:43:02] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[21:43:11] *** Joins: alzgh (~alzgh@user/alzgh)
[21:43:34] <davean> No one gives a shit about voices that aren't acting little toddlers who just won't stop crying though. I can't be bothered to keep complaining though and making hyperbolic claims about it.
[21:45:37] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[21:46:31] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:48:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f4b8:2aef:8963:2af8) (Ping timeout: 264 seconds)
[21:55:35] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 264 seconds)
[21:56:01] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[21:56:54] *** Quits: Successus (~Successus@gateway/tor-sasl/successus) ()
[21:57:00] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:57:57] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[21:58:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:58:15] *** Joins: hololeap (~hololeap@user/hololeap)
[21:58:31] *** Joins: vicfred (~vicfred@user/vicfred)
[22:00:21] *** Joins: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net)
[22:00:33] *** Quits: mbuf (~Shakthi@122.174.57.32) (Quit: Leaving)
[22:01:52] <dsal> What's bad in GHC2021?
[22:01:58] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:03:04] <dsal> Also, I'm not in a great place to understand the arguments for keeping /= -- I kind of like change in general, even when it's slightly uncomfortable.
[22:03:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:03:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:04:26] *** Joins: hololeap (~hololeap@user/hololeap)
[22:05:23] *** Quits: yauhsien (~yauhsien@61-231-35-209.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[22:06:01] *** Quits: ymherklotz (~user@2a0c:5bc0:40:107b:fdfc:4d2d:898a:f9f5) (Remote host closed the connection)
[22:07:53] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[22:07:59] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Quit: gone to sleep. ZZZzzz…)
[22:08:42] *** Quits: deadmarshal (~deadmarsh@95.38.116.147) (Ping timeout: 260 seconds)
[22:09:05] *** Joins: ymherklotz (~ymherklot@2a0c:5bc0:40:107b:fdfc:4d2d:898a:f9f5)
[22:09:18] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:09:41] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f6bc:f00:93d:ef3a:ec37:e2db) (Ping timeout: 268 seconds)
[22:13:32] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[22:14:25] *** Quits: bobfang1992_ (~textual@2a01:4b00:87fe:be00:2941:7b2f:659a:8781) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:14:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:15:20] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 265 seconds)
[22:15:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:16:19] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[22:17:09] <yushyin> i think GHC2021 was long overdue and a good first step, i already started a new toy project with GHC2021 ;> 
[22:17:09] <monochrom> yushyin: I have now thought about it more. One possible outcome is what you said, yes. But another possible outcome is "so we don't need a Haskell Prime".
[22:17:50] <yushyin> monochrom: also possible, yes :/
[22:18:34] <monochrom> I am pessimistic. Every silver lining has tarnish.
[22:20:01] <monochrom> I like GHC2021 too. I even think it is not bold enough. I want BlockArguments to be in. I also want FunDeps in too (or else what's the point of including MPTC).
[22:20:41] <monochrom> Ah and DataKinds (or else what's the point of including all the other kind-related extensions).
[22:21:18] <dsal> I don't exactly understand BlockArguments.  It's kind of like TupleSections in that you just try to do it and the compiler tells you to flip it.  Are there downsides?
[22:21:25] <geekosaur> sounds like they're still arguing over fundeps vs. tyfams?
[22:21:32] <monochrom> I also want NoStarIsType, but it's a minor issue.
[22:22:17] <geekosaur> dsal, it can be harder to read (for humans, not the compiler: it actually simplifies parsing by removing a pointless distinction)
[22:22:20] <monochrom> Ah tyfams is probably better but needs more consensus. I'm less sad now. :)
[22:22:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:22:46] <dsal> geekosaur: Yeah, sometimes it's super clear.  Sometimes it's slightly confusing.
[22:23:05] <monochrom> Generally BlockArguments is easy to read if you add more line breaks.
[22:23:42] <monochrom> "withX \x -> <newline> withY \y -> <newline> ..." is easy to read.
[22:23:46] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Read error: Connection reset by peer)
[22:23:55] <monochrom> "withX \x -> withY \y -> ..." is hard to read.
[22:24:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:24:58] <monochrom> Call me a stubborn scientist but this clearly puts the blame on one-liners not block arguments.
[22:25:07] <monochrom> The extension you're looking for is NoOneLiners.
[22:25:22] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:26:52] <dsal> -XNoNewlines
[22:26:53] <monochrom> Oh BTW a lot of beginners claim that "f (g (h (i (j (a+b))))" is hard to read too. Are they going to advocate NoParentheses too?
[22:27:16] <geekosaur> that's just why so many people use $
[22:27:20] <c_wraith> yes.  prevent the use of tuples!
[22:27:21] <tomsmeding> monochrom: earlier today it was noted that TypeFamilies enables MonoLocalBinds, which is breaking with Haskell2010
[22:27:39] <dsal> This is a thing ormolu is doing to me.  If I want to break a thing into two lines, it's like, "Nope, that's 8 lines."  So I have to choose between one really long line, or 8 lines of one word each.
[22:27:58] <monochrom> Meanwhile, the same people, since they came from OOP backgrounds, also claim that "x.plus(y.plus(z))" is better than "x+y+z".
[22:28:06] *** Quits: sm2n_ (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[22:28:10] *** Joins: sm2n (~sm2n@user/sm2n)
[22:28:10] *** Joins: max22- (~maxime@2a01cb08833598003c399b41b69f08ec.ipv6.abo.wanadoo.fr)
[22:28:26] <tomsmeding> (C++ doesn't have that issue)
[22:28:33] <monochrom> haha
[22:28:36] <tomsmeding> (but then C++ is the kitchen sink anyway)
[22:28:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[22:29:09] <monochrom> But ExplicitForall already breaks Haskell2010.  I can't use "forall" as a type variable, or not even a term variable.
[22:29:37] <tomsmeding> oh interesting, I was somehow under the impression that GHC2021 was non-breaking
[22:30:04] <tomsmeding> though the 'forall' breakage is less bad: it causes less programs to compile, but no programs to change meaning
[22:30:18] <monochrom> It breaks very slightly. In fact, to be forthcoming, I think "forall"-reserved-word is the only breakage.
[22:31:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:31:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:31:18] *** Joins: wroathe (~wroathe@user/wroathe)
[22:31:29] <monochrom> But I would think MonoLocalBinds just causes less programs to compile too? I think it doesn't change meaning.
[22:31:34] <tomsmeding> monochrom: my ghc already treats 'forall' as a reserved word, even with -XHaskell2010
[22:31:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[22:32:03] <dsal> > isAlpha '∀'
[22:32:05] <lambdabot>  False
[22:32:06] <dsal> Lame.
[22:32:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:33:07] <tomsmeding> :set -XUnicodeSyntax
[22:33:13] <monochrom> I think GHC -XHaskell2010 still deviates a bit from paper Haskell 2010 regarding that. :)
[22:33:20] <tomsmeding> certainly
[22:33:46] <tomsmeding> but we're talking about breakage between -XHaskell2010 and -XGHC2021, I think; talking about breakage between report haskell 2021 and -XGHC2021 is not productive, I think
[22:33:49] <monochrom> Anyway I don't really raise hell about "forall", no one facetiously uses it as a variable :)
[22:33:56] <tomsmeding> at least not in the context of deciding whether -XGHC2021 is a good idea
[22:34:39] <tomsmeding> ah of course BangPatterns steals syntax
[22:35:00] <monochrom> Ah, that, haha.
[22:35:34] <tomsmeding> so -XGHC2021 is indeed breaking with respect to -XHaskell2010 :)
[22:35:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[22:35:50] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[22:36:32] <tomsmeding> that makes me agree mildly less with excluding TypeFamilies and GADTs in GHC2021
[22:37:03] * tomsmeding was starting with "that makes me mildly more in favour of adding those extensions" but adding is not a good idea :p
[22:37:24] <dsal> What's the downside of GADTs?
[22:37:33] <tomsmeding> implies -XMonoLocalBinds, which is breaking
[22:37:33] <monochrom> I think the selection criteria were pragmatic rathan than "as a matter of inflexible high-horse principles".
[22:37:47] <dsal> I forget the whole graph of implies.  heh
[22:37:49] *** Quits: mimmy (~mimmy@146.70.75.190) (Ping timeout: 256 seconds)
[22:38:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:38:07] <tomsmeding> in particular, note that GADTSyntax _is_ in :)
[22:38:15] <monochrom> A good balance of "how many people want it" and "how compatible".
[22:38:22] <tomsmeding> which is not very useful IMO, but subjective
[22:38:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:38:40] <tomsmeding> monochrom: which is a fairly good way of deciding this, perhaps
[22:38:58] <monochrom> Some people think that the GADT syntax is clearer, even for ADTs.
[22:40:53] <monochrom> The disagreement is between "BNF-like syntax" and "spell out the type sigs of constructors"
[22:41:28] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:78f3:43f3:fd48:5ac3)
[22:41:32] <tomsmeding> a positive point of GADT syntax is that it makes explicit that the constructors are functions, and can be used and partially applied as such
[22:41:47] <tomsmeding> which might be useful for learnerS?
[22:41:50] <tomsmeding> s/S/s/
[22:41:56] <davean> I think not having to formats is clearer, but I use AST type generally - never broke the habit.
[22:42:03] <davean> *two formats
[22:42:47] <c_wraith> It makes it easier to see that constructors are functions, but bizarrely harder to see that they can be used for pattern matching
[22:43:01] <tomsmeding> good point
[22:43:15] <davean> I just think you state both things and get it axiomaticly so seeing isn't relivent
[22:43:31] <c_wraith> I just mean the same argument works both directions
[22:43:42] <davean> and I think neither argument is relivent :)
[22:43:45] <c_wraith> So neither is really better
[22:43:49] <tomsmeding> in which case, normal ADT syntax is shorter :)
[22:44:01] <davean> c_wraith: I think GADT is better, because then we don't need two
[22:44:09] <davean> (still use AST typically)
[22:44:21] <monochrom> See, who dares to say aloud "BNF unclear" >:)
[22:45:04] <davean> monochrom: hum?
[22:45:35] <monochrom> But I'm also a worst-of-both-worlds person, in addition to being pessimistic. I say that one should define an ADT by writing both syntaxes, both are required, and the compiler gets the pleasure of telling you they don't match up.
[22:45:36] <geekosaur> bnf is clearer if you're used to it. it has certainly confused those who aren't, in my experience
[22:47:17] <davean> The only part unclear about BNF in my oppinion is which damn one?
[22:47:32] <monochrom> heh
[22:47:33] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[22:48:29] *** Joins: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net)
[22:48:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:50:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:50:38] *** Quits: max22- (~maxime@2a01cb08833598003c399b41b69f08ec.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[22:51:48] <monochrom> Naaawwww! This is the better syntax: The notation for formation rules in natural deduction.
[22:52:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:53:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:55:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[22:58:11] <c_wraith> just require all data types be written as a fold
[22:59:43] *** Joins: mimmy (~mimmy@146.70.75.189)
[23:00:47] <monochrom> How would that look?  Would it look like "forall r. r -> (Int -> Char -> r) -> r" standing for "data Foo = C0 | C1 Int Char"?
[23:01:08] <c_wraith> yep!
[23:01:35] <monochrom> Because "data Foo where {C0 :: Foo; C1 :: Int -> Char -> Foo}" comes very close to that.  Just s/r/Foo/ essentially.
[23:01:57] *** Joins: Killirse (~Killirse@146.120.222.5)
[23:01:59] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[23:06:43] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[23:07:52] *** Quits: Killirse (~Killirse@146.120.222.5) (Remote host closed the connection)
[23:09:19] <zincy_> davean: hey
[23:10:51] <monochrom> You have tipped my balance towards the GADT-syntax side. :)
[23:12:24] <monochrom> Regarding "each syntax makes some other side less clear", I have never been bothered by that, my teaching material has always needed to spell out all sides, it can't be helped.
[23:18:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[23:19:15] *** Joins: alzgh (~alzgh@user/alzgh)
[23:20:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:20:35] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:24:43] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[23:24:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[23:24:46] *** allbery_b is now known as geekosaur
[23:25:06] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[23:25:24] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[23:27:39] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d) (Quit: gone to sleep. ZZZzzz…)
[23:28:44] *** Joins: vysn (~vysn@user/vysn)
[23:30:11] *** Quits: Guest99 (~Guest99@pool-100-8-45-127.nwrknj.fios.verizon.net) (Quit: Client closed)
[23:32:39] *** Joins: chisui (~chisui@2001:16b8:6687:d600:ec27:7b7a:c771:651e)
[23:33:00] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:4346:8725:e95d:ae21)
[23:35:03] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:4346:8725:e95d:ae21) (Client Quit)
[23:35:26] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 260 seconds)
[23:36:00] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:cc0f:3c1b:cb:bfd6)
[23:37:51] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:57] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85::bde6)
[23:38:16] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85::bde6) (Remote host closed the connection)
[23:40:53] <tomsmeding> EvanR: I collected some more data on ghci's evaluation behaviour https://tomsmeding.com/f/ghci-evaluation.html
[23:41:02] <tomsmeding> tldr it's a mess
[23:41:13] <tomsmeding> monochrom: the sadist in you may like this as well
[23:41:19] <EvanR> lol it's at least 3 dimensional now
[23:41:21] <maerwald> davean: you can express GADTs with normal syntax
[23:41:34] <maerwald> so I don't understand that point
[23:42:06] <tomsmeding> EvanR: yes :p
[23:42:18] <EvanR> I see there are 3 outcomes
[23:42:23] *** Quits: mimmy (~mimmy@146.70.75.189) (Ping timeout: 264 seconds)
[23:42:26] <EvanR> _, _:_, and "abc"
[23:42:43] <tomsmeding> note: I switched to characters for the thing to be monomorphic even without a typesig
[23:43:15] <maerwald> https://paste.tomsmeding.com/3fh551uA
[23:43:31] <EvanR> why is there a difference between map and id >_<
[23:43:45] <geekosaur> hm. RULES?
[23:43:58] <EvanR> RULES fires in ghci?
[23:44:06] <geekosaur> dunno tbh
[23:44:11] <tomsmeding> maerwald: Illegal equational constraint a ~ String (Use GADTs or TypeFamilies to permit this)
[23:44:13] <geekosaur> just the first thing that came to mind
[23:44:14] <tomsmeding> that is kind of ironic
[23:44:37] <tomsmeding> geekosaur: I suspect https://gitlab.haskell.org/ghc/ghc/-/issues/10160
[23:44:58] <maerwald> tomsmeding: ?
[23:45:10] <tomsmeding> in particular, a subexpression that is a direct application of a constructor to arguments is already in WHNF without evaluation
[23:45:42] <tomsmeding> maerwald: no point, because it isn't related to the syntax question; just funny that you currently need the GADTs extension to write the non-GADT syntax
[23:45:58] <maerwald> you don't... TypeFamilies and ExistentialQuantification is enough
[23:46:00] <tomsmeding> though that makes sense I guess, because the extension is about the functionality, and GADTSyntax is about the syntax, ostensibly
[23:46:09] <geekosaur> I think there's a proposal to separate out equality constraints into their own LANGUAGE pragma
[23:46:17] <geekosaur> I know it's been discussed, at least
[23:47:02] <geekosaur> since it's kinda a wart that less than obvious LANGUAGE pragmas are needed to enable them
[23:47:09] <maerwald> I really dislike jumping from normal to GADT style... using the type equality constraint also enlightens the reader about what this actually does under the hood
[23:47:41] *** Joins: rusty (~rustyboy@82.77.237.221)
[23:48:23] <tomsmeding> EvanR: if you want to try at home: https://paste.tomsmeding.com/ERDspJLB
[23:48:55] <EvanR> I almost pasted that into cmd.exe
[23:49:02] <tomsmeding> heh
[23:49:08] <tomsmeding> sorry, bash
[23:49:27] <EvanR> I can try on mac
[23:49:40] <tomsmeding> no git bash on your windows?
[23:49:46] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d84:ffec:9a44:a68d)
[23:50:00] <EvanR> lets not go into the problems with my windows
[23:51:58] <monochrom> maerwald: I am not sure that "a ~ [a]" is a good idea.
[23:52:39] <EvanR> some of the tests produced results and some gave parse error on input ';' and parse error on input '='
[23:52:57] <tomsmeding> that is odd
[23:53:24] <EvanR> https://paste.tomsmeding.com/g6XzuV1F
[23:53:28] <tomsmeding> EvanR: if you remove the " | $GHCI | ..." stuff on line 11, does the output look sensible?
[23:54:02] <tomsmeding> EvanR: what's the version of your ghci there
[23:54:06] <EvanR> yep
[23:54:18] <EvanR> 7.10.2
[23:54:41] <tomsmeding> try entering 'a = 42' in that
[23:55:10] <tomsmeding> I think the support for bare variable declarations without let is newer than that
[23:55:31] <EvanR> yeah not allowed
[23:56:14] <tomsmeding> so all "Without let" cases are not applicable in your version of ghci
[23:56:28] <EvanR> https://paste.tomsmeding.com/zzdbhY08
[23:56:49] <EvanR> by removing that part maybe the script makes no sense xD
[23:57:09] <tomsmeding> you can let it use let always by removing the "" in the 'for letprefix' line
[23:58:50] <EvanR> well I see it doesn't show any sprint results anymore
