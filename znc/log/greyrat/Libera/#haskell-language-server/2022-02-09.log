[00:26:14] *** Joins: georgefst (~georgefst@79.73.172.71)
[00:48:36] *** Quits: arrowd (~arr@2.93.163.158) ()
[01:14:00] <pepeiborra> @sooch_ would you be interested in applying to GSoC to work on the GHC HEAD/9.4 support? 
[01:15:46] <pepeiborra> Note that there's been some big changes this year:
[01:15:46] <pepeiborra> 1. There is now the choice of doing large projects as well as medium
[01:15:46] <pepeiborra> projects (more or less full time vs part-time)
[01:15:46] <pepeiborra> 2. We are allowed to accept any contributors (no longer limited to students)
[01:16:02] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[01:16:15] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[01:38:19] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[01:39:55] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[01:55:12] <maralorn> Is there anything anywhere where I can read up on dynamic vs. static linking for hls. We are debating enabling dynamic linking in nixpkgs, but that will have a huge impact on downloadsize for users.
[01:58:44] <Guillaum[m]> maralorn: what will be the impact? If user are developing they will certainly pick `ghc` using the same nixpkgs clone, hence the cost of the huge `ghc` closure is kinda of amortized.
[02:00:14] <maralorn> Guillaum[m]: Currently when users install pkgs.haskell-language-server, they actually get a hls for every supported ghc version. That way we can be most certain that it "just works".
[02:01:01] <Guillaum[m]> Ha, indeed.
[02:01:05] <maralorn> But since that currently includes 8.8, 8.10, 9.0 and 9.2, that would have a huge closure.
[02:02:18] <maralorn> So, I am not totally convinced this is worth it.
[02:02:48] <maralorn> I wonder how much larger is a dynamic hls installed with ghcup?
[02:06:32] <Guillaum[m]> Why not providing the different variations and let user make their choice?
[02:08:03] <Guillaum[m]> Kinda like the latex toolchain, either you pay a configuration cost, but you win bandwith, or you are free from configuration, but you pull the huge 4x6GiB closure
[02:13:31] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Ping timeout: 256 seconds)
[02:16:41] <maralorn> <Guillaum[m]> "Why not providing the different..." <- Users can choose today. Itâ€™s more about reasonable defaults.
[02:17:02] *** Quits: georgefst (~georgefst@79.73.172.71) (Quit: Client closed)
[02:17:45] <maralorn> Now, I wonder what the better default is: Only including hls for the default ghc version, but dynamically linked or including hls for all ghc versions but statically linked.
[02:17:56] <maralorn> Users can easily override both.
[02:18:28] <Guillaum[m]> give both, no "default", but both available in the binary cache.
[02:19:26] <maralorn> Guillaum[m]: When there is no "default", what would happen if users install `pkgs.haskell-language-server`?
[02:20:14] <Guillaum[m]> I would no exists. They insteadd will install `pkgs.haskell-language-server-full` or `pkgs.haskell-language-server-compact`
[02:23:01] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Quit: leaving)
[03:55:35] <sm> just curious, why would a dynamically-linked hls be larger ? I usually think of static binaries as larger
[05:57:49] *** Joins: Altariarite (~Altariari@31.205.87.83)
[06:00:38] <sooch_> @pepeiborra: I don't think I'd be eligible, plus I highly doubt I'd have time. I'd be happy to slowly pick away at 9.4 support otherwise. (Still working on the change type signature stuff, got side tracked looking at the new Diagnostic items and GHC HEAD)
[06:12:58] <Altariarite> Hi all, I am following Pepe Iborra's 2020 tutorial: Let's write a Haskell Language Server Plugin. When writing the lensProvider mentioned, I found there seems to be a major change with the type `CodeLensProvider`, as it is no longer available in the latest version of hls's master branch. Further searching indicates that the type definition is
[06:12:58] <Altariarite> available in hls-plugin-api-0.7.00, but disappears in hls-plugin-api-1.2.0.2. I couldn't find documentation on how this change should be accommodated when writing a plugin. Could someone point me in the right direction? Thanks!
[07:12:28] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:54] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[08:03:40] <sooch_> @Altariarite: I believe it is now under `PluginMethodHandler` -> https://github.com/haskell/haskell-language-server/blob/4b8f9d53bed3e775ccd120d9a2471ae374a88db3/hls-plugin-api/src/Ide/Types.hs#L340
[08:08:25] <sooch_> So for example the new signature for CodeLensProvider would be `PluginMethodHandler IdeState 'TextDocumentCodeLens`
[08:12:04] <sooch_> I've opened an issue on GHC in regards to feedback for the new Typed Diagnostics. This was at the suggestion of @michaelpj to open some dialog and provide feedback. Looks like most of the mechanics to provide us a way to determine the actual type of a binding exists, but the integration point is still unknown. Feel free to chime in (or if you work in the GHC codebase move it to the proper location)
[08:12:21] <sooch_> https://gitlab.haskell.org/ghc/ghc/-/issues/21063
[09:49:23] *** Joins: arrowd (~arr@2.93.163.158)
[12:25:36] <mpickering> sooch_: I think the idea is that HLS should try and integrate the errors
[12:25:46] <mpickering> and then you can make whatever changes you like
[12:26:50] <mpickering> I suspect the most efficient way forward would be if there was a client who was interested in funding this then I could do the basic 9.4 support
[12:52:41] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[12:56:06] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Remote host closed the connection)
[13:09:19] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[13:10:52] <cptwunderlich> Hi there! So I'm using HLS 1.6.1, GHC 9.2.1 in VS Code. Installed with ghcup. I've configured a log file and debug level output. No error or anything in the log, but I have no HLS functionality in Editor.
[13:11:03] <cptwunderlich> i.e., no goto definition, hover help or anything. 
[13:11:21] <cptwunderlich> Even though the log says "DEBUG hls:	Hover request at position 217:25 in file:"
[13:11:31] <cptwunderlich> "DEBUG hls:	finish: C:GetHieAst:"
[13:11:43] <cptwunderlich> etc etc. 
[13:11:50] <cptwunderlich> What could that possibly be?
[13:47:58] <mpickering> have you configured your ghc tree to build with 9.2.1 as well?
[13:48:19] <mpickering> I am using this commit and it works with 9.2.1 411db02883d6985efb37918a0b9100d727fe8554
[13:48:31] <mpickering> cptwunderlich: 
[13:49:25] <cptwunderlich> I did clean and run ./boot and ./configure
[13:49:39] <cptwunderlich> because I rebased anyway and built everything from zero
[13:50:32] <cptwunderlich> That there is not even any error is so weird :(
[13:51:19] <mpickering> there probably is an error
[13:51:49] <cptwunderlich> But not in the log or IDE
[13:52:20] <mpickering> I have seen in the past that an error appears very briefly
[13:52:23] <mpickering> then disappears
[13:53:07] <cptwunderlich> But I'm logging to a file
[13:54:21] <cptwunderlich> idk, I'll try rerunning config and build 
[14:00:15] <mpickering> dunno if all errors actually go to the file?
[14:00:22] <mpickering> not all type errors do, do they
[14:00:31] <mpickering> does running the hie-bios command work?
[14:13:47] <cptwunderlich> Mh I meant HLS's error?
[14:14:44] <cptwunderlich> What is the hie-bios command? You mean hadrian/hie-bios ?
[14:14:53] <mpickering> yeah
[14:15:35] <mpickering> In the terminal in vscode what does `ghc --info` say?
[14:15:42] <mpickering> sorry `ghc --version`
[14:21:17] <cptwunderlich> "The Glorious Glasgow Haskell Compilation System, version 9.2.1"
[14:21:26] <cptwunderlich> I just recompiled and restarted HLS in VS Code. 
[14:21:35] <cptwunderlich> You were right, there were 2 errors that quickly disappeared
[14:21:52] <cptwunderlich> Dang: ./hadrian/hie-bios: line 6: $HIE_BIOS_OUTPUT: ambiguous redirect
[14:22:11] <mpickering> ah just set the variable
[14:22:22] <mpickering> `HIE_BIOS_OUTPUT=/tmp/test ./hadrian/hie-bios`
[14:23:35] <cptwunderlich> Data.Binary.Get.runGet at position 458: not enough bytes
[14:23:36] <cptwunderlich> Build failed.
[14:24:48] <mpickering> rm -r .hie-bios
[14:26:04] <cptwunderlich> ...aaand now that works
[14:27:29] <cptwunderlich> sigh, but not in VS Code
[14:28:02] <cptwunderlich> Ah, but I was quick enough to get the error
[14:28:15] <cptwunderlich> "/home/ben/Projekte/haskell/ghc/compiler/hadrian/hie-bios: streamingProcess: exec: invalid argument (Bad file descriptor)"
[14:29:13] <cptwunderlich> I should have never upgraded GHC ^^  "Never change a running system", why won't I ever learn that :P
[14:44:18] <mpickering> do you know how to solve that erorr?
[14:52:41] <cptwunderlich> I did rerun ./hadrian/hie-bios and left it running longer and it spewed out some other error
[14:53:03] <cptwunderlich> I rebased in anger and am currently recompiling after cleaning everything...
[14:53:15] <cptwunderlich> So...no =)
[14:53:24] <cptwunderlich> Thank you very much for your help, by the way!
[15:20:22] *** Quits: Altariarite (~Altariari@31.205.87.83) (Quit: Client closed)
[15:30:44] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[15:49:44] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Quit: leaving)
[16:28:59] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[16:30:26] *** Joins: hololeap (~hololeap@user/hololeap)
[17:35:34] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[17:36:55] *** Joins: hololeap (~hololeap@user/hololeap)
[19:20:34] <cptwunderlich> btw I was not able to solve that error... :/
[19:20:56] *** Joins: shapr` (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:22:17] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[20:14:02] *** Joins: Jerr (~Jerr@146.115.146.100)
[20:15:05] *** Quits: arrowd (~arr@2.93.163.158) ()
[21:37:26] *** Quits: Jerr (~Jerr@146.115.146.100) (Quit: Client closed)
[23:29:34] *** shapr` is now known as shapr
[23:35:02] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:28] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:24] <shapr> Two or three of our ball of mud packages crash HLS, and I hate working in those parts of the codebase because I get so much benefit from the cool tools in haskell-language-server
[23:38:46] <shapr> Is there a way to track down exactly what is causing the crash?
[23:41:56] <shapr> 80% of our code loads up fine in HLS
[23:42:42] <shapr> Perhaps a better question, can I put up a bounty for better crash reporting in HLS?
[23:46:28] <maerwald> there are two common enemies for HLS: template haskell and boot files
[23:48:57] <shapr> It's probably TH, but I wish I knew exactly where
[23:49:08] <shapr> so I could find a way to get around it.
[23:59:57] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Ping timeout: 240 seconds)
