[00:00:21] <koz> Does said parsed AST contain module annotations?
[00:00:25] <koz> (assuming there are any)
[00:01:15] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[00:02:17] <awpr> hmm, that's a good question.  I'd assume so, but maybe not in a form that's ready to use yet
[00:03:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 258 seconds)
[00:03:33] <koz> awpr: Ah, so it _can_ tell me 'annot is here', but not 'its type is X'?
[00:03:50] <awpr> I found them in this form: https://hackage.haskell.org/package/ghc-8.10.2/docs/GHC-Hs-Decls.html#t:AnnDecl
[00:04:23] <awpr> yeah, so that contains a pre-type-checker expression for the annotation value
[00:04:42] <koz> Ah, so just its stringy name.
[00:04:52] <koz> Or rather, stringly _value_.
[00:05:02] <awpr> last field is `HsExpr`
[00:05:17] <awpr> it's just not been type-inferenced or reduced to a value yet
[00:05:20] <koz> Oh, even better.
[00:05:29] <koz> Thanks awpr, that's very helpful, and you are uncommonly attractive.
[00:05:37] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[00:05:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[00:05:48] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 258 seconds)
[00:07:13] <awpr> lol, np and thanks, I guess?
[00:08:39] <koz> LOL
[00:09:38] *** Joins: mestre (~mestre@191.177.175.57)
[00:10:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285) (Remote host closed the connection)
[00:11:50] *** Quits: timCF (~timCF@m91-129-111-87.cust.tele2.ee) (Quit: leaving)
[00:14:36] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[00:14:44] *** Parts: mzan (~quassel@mail.asterisell.com) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:18:27] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 258 seconds)
[00:19:27] *** Joins: arkeet (arkeet@moriya.ca)
[00:20:42] *** Quits: nehsou^ (~nehsou@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 265 seconds)
[00:21:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:8275:c2bd:871b:678c) (Ping timeout: 252 seconds)
[00:21:55] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[00:23:30] *** Quits: fendor (~fendor@91.141.35.79.wireless.dyn.drei.com) (Remote host closed the connection)
[00:25:21] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[00:28:00] *** Quits: connrs (~connrs@conners.plus.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:28:07] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:28:20] *** Joins: connrs (~connrs@user/connrs)
[00:30:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[00:37:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:37:43] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[00:40:35] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[00:43:34] *** Quits: benin (~benin@183.82.207.116) (Quit: The Lounge - https://thelounge.chat)
[00:49:17] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[00:51:23] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[00:52:58] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 260 seconds)
[00:54:09] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[00:56:31] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[00:57:15] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 260 seconds)
[01:01:25] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[01:01:25] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[01:01:25] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: cbarrett (sid192934@helmsley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: NemesisD (sid24071@lymington.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: cln (sid336875@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: angerman (sid209936@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: gmc (sid58314@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[01:01:25] *** Quits: scav (sid309693@helmsley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: JSharp (sid4580@lymington.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[01:01:25] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: nrr_ (sid20938@lymington.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[01:01:26] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[01:01:26] *** Quits: srk (~sorki@user/srk) (*.net *.split)
[01:01:26] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (*.net *.split)
[01:01:26] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[01:01:26] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (*.net *.split)
[01:01:26] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[01:01:26] *** Quits: yaroot (~yaroot@6.3.30.125.dy.iij4u.or.jp) (*.net *.split)
[01:01:26] *** Quits: ByronJohnson (~bairyn@mail.digitalkingdom.org) (*.net *.split)
[01:01:26] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[01:01:26] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[01:01:26] *** Quits: tv (~tv@user/tv) (*.net *.split)
[01:01:26] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[01:01:26] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[01:01:26] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[01:01:26] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[01:01:26] *** Quits: Hecate (~mariposa@user/hecate) (*.net *.split)
[01:01:26] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: hendi (sid489601@lymington.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: gonz___ (sid304396@lymington.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[01:01:26] *** Quits: cls (~cls@chalk.lubutu.com) (*.net *.split)
[01:01:26] *** Quits: T_S_ (sid501726@uxbridge.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[01:01:26] *** Quits: slep (~slep@cpc150002-brnt4-2-0-cust437.4-2.cable.virginm.net) (*.net *.split)
[01:01:26] *** Quits: dpratt_ (sid193493@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: aria (sid380617@lymington.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: bradparker (sid262931@uxbridge.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: tapas (sid467876@ilkley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[01:01:26] *** Quits: sqrt2 (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[01:01:26] *** Quits: jrm (~jrm@156.34.187.65) (*.net *.split)
[01:01:26] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (*.net *.split)
[01:01:26] *** Quits: w1gz (~do@159.89.11.133) (*.net *.split)
[01:01:26] *** Quits: gnyeki (~gnyeki@user/gnyeki) (*.net *.split)
[01:01:26] *** Quits: mmarusea1ph2 (~mihai@198.199.100.72) (*.net *.split)
[01:01:26] *** Quits: CannabisIndica (~herb@user/mesaboogie) (*.net *.split)
[01:01:26] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (*.net *.split)
[01:01:26] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[01:01:26] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[01:01:26] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[01:01:26] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[01:01:33] *** Joins: slep (~slep@cpc150002-brnt4-2-0-cust437.4-2.cable.virginm.net)
[01:01:33] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[01:01:33] *** Joins: gnyeki (~gnyeki@li578-216.members.linode.com)
[01:01:36] *** Joins: ByronJohnson (~bairyn@mail.digitalkingdom.org)
[01:01:37] *** Joins: sqrt2 (~ben@80-108-18-7.cable.dynamic.surfer.at)
[01:01:37] *** Joins: Hecate (~mariposa@163.172.211.189)
[01:01:37] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[01:01:38] *** Joins: tapas (sid467876@id-467876.ilkley.irccloud.com)
[01:01:38] *** Joins: cls (~cls@chalk.lubutu.com)
[01:01:40] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[01:01:41] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[01:01:41] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[01:01:41] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[01:01:41] *** Joins: angerman (sid209936@id-209936.ilkley.irccloud.com)
[01:01:41] *** Joins: samebchase (~thelounge@51.15.68.182)
[01:01:41] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[01:01:41] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[01:01:42] *** Joins: yaroot (~yaroot@6.3.30.125.dy.iij4u.or.jp)
[01:01:48] *** Joins: asm (~alexander@burner.asm89.io)
[01:01:51] *** Joins: drewolson (~drewolson@user/drewolson)
[01:01:51] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[01:01:53] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[01:01:55] *** Joins: gonz___ (sid304396@id-304396.lymington.irccloud.com)
[01:01:57] *** Joins: nisstyre (~wes@li798-187.members.linode.com)
[01:01:57] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[01:01:57] *** Joins: dpratt_ (sid193493@id-193493.helmsley.irccloud.com)
[01:02:11] *** jackhill is now known as KM4MBG
[01:02:11] *** Joins: ellie (~ellie@user/ellie)
[01:02:14] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[01:02:14] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[01:02:21] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[01:02:22] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[01:02:23] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[01:02:23] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[01:02:25] *** Joins: aria (sid380617@id-380617.lymington.irccloud.com)
[01:02:28] *** KM4MBG is now known as jackhill
[01:02:32] *** Joins: vito (sid1962@id-1962.uxbridge.irccloud.com)
[01:02:33] *** Joins: bjs (sid190364@id-190364.helmsley.irccloud.com)
[01:02:34] *** Quits: nisstyre (~wes@li798-187.members.linode.com) (Signing in (nisstyre))
[01:02:34] *** Joins: nisstyre (~wes@user/nisstyre)
[01:02:42] *** Quits: bjs (sid190364@id-190364.helmsley.irccloud.com) (Changing host)
[01:02:42] *** Joins: bjs (sid190364@user/bjs)
[01:02:46] *** Joins: nrr_ (sid20938@id-20938.lymington.irccloud.com)
[01:02:47] *** Quits: vito (sid1962@id-1962.uxbridge.irccloud.com) (Changing host)
[01:02:47] *** Joins: vito (sid1962@user/vito)
[01:02:51] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[01:02:52] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[01:02:56] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[01:02:57] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[01:03:10] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[01:03:11] *** Joins: srk (~sorki@user/srk)
[01:03:19] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[01:03:20] *** Joins: CnnibisIndica (~herb@user/mesaboogie)
[01:03:25] *** Joins: w1gz (~do@159.89.11.133)
[01:03:27] *** Joins: jrm (~jrm@156.34.187.65)
[01:03:27] *** Joins: jinsun (~quassel@user/jinsun)
[01:03:28] *** Joins: nitrix (~nitrix@user/nitrix)
[01:03:30] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[01:03:31] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[01:03:32] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[01:03:33] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[01:03:34] *** Joins: sm2n (~sm2n@user/sm2n)
[01:03:37] *** Joins: tv (~tv@user/tv)
[01:03:38] *** Joins: fluxit (~fluxit@techsmix.net)
[01:03:39] *** Joins: sshine (~simon@hubris.eta.solutions)
[01:03:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:05:44] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[01:06:42] *** Joins: tureba (~tureba@tureba.org)
[01:09:29] *** Quits: michalz (~michalz@185.246.204.41) (Remote host closed the connection)
[01:09:58] *** Quits: max22- (~maxime@2a01cb088335980063b7aac9e60f4864.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:11:18] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[01:13:33] <teddyc> TIL: the backslash in anonymous functions is supposed to resemble lambda(λ). makes sense now
[01:14:00] <geekosaur> it's as close as you get in ASCII, yeh
[01:16:18] <monochrom> :)
[01:18:43] <pavonia> ,\
[01:19:57] <Rembane_> You need to be slightly careful otherwise you'll fall down the J rabbit hole.
[01:21:23] <hpc> (.) is also meant to resemble the middot thing that math uses for function composition
[01:21:59] <teddyc> Rembane_: and APL from what I've seen from code_report on youtube. 
[01:22:03] <monochrom> Hrm! I didn't notice that cabal-install 3.4.1.0 exists.
[01:22:37] <teddyc> hpc: ah, thats true. it always bothered me that i forgot the way it composes, but that sort of helps
[01:22:44] <Rembane_> teddyc: Yes! :)
[01:25:50] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[01:27:28] *** Joins: zebrag (~chris@user/zebrag)
[01:32:13] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[01:32:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Remote host closed the connection)
[01:34:24] *** Joins: reumeth (~reumeth@user/reumeth)
[01:35:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:37:38] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[01:37:55] <mjrosenb> getId :: (MonadState s m) => Lens' s (IdGen a) -> m (Id) -- should this require RankNTypes?
[01:38:22] <c_wraith> yes
[01:38:36] <mjrosenb> is that because Lens' requires RankNTypes?
[01:38:40] <c_wraith> no
[01:38:56] <c_wraith> It's because Lens' has a forall inside it, and expanding it puts the forall inside the argument
[01:39:28] <mjrosenb> that sounds like Lens' requiring RankNTypes?
[01:39:45] <c_wraith> nah, you can write foo :: Lens' Bar Foo
[01:39:52] <c_wraith> and the forall expands at the top level
[01:40:16] <mjrosenb> Ahh, gotcha.
[01:40:31] <c_wraith> This is why things in the lens library that accept optics tend to take types like ALens instead of Lens
[01:41:25] <mjrosenb> makes sense, I'm guessing ALens is missing that forall?
[01:41:49] <mjrosenb> can you just pass optics into functions that accept ALens?
[01:41:54] <c_wraith> yes to both
[01:42:13] <mjrosenb> I know there are *many* parts of lens that are completely opaque to me
[01:42:17] <mjrosenb> like 90% at least.
[01:42:32] <c_wraith> ALens specializes to a Functor instance that lets you extract the polymorphic version again to use it
[01:42:42] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:43:33] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:44:53] <mjrosenb> I know all of those words separately
[01:45:14] <c_wraith> so..  a lens is a function that's polymorphic over some Functor instance
[01:46:02] <c_wraith> ALens is an alias for a function at a concrete Functor instance, so you can pass a lens to a function that expects ALens as an argument
[01:46:04] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[01:46:34] <c_wraith> But the functor instance was carefully chosen so that you can make convert it back to being polymorphic over any functor
[01:46:36] <mjrosenb> and (^.) and (.~) force the functor to be specialized in a way suitable for getting or updating?
[01:47:04] <c_wraith> Yes.  (^.) forces it to be Const, (.~) forces it to be Identity
[01:47:09] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[01:48:30] *** Quits: mmhat (~mmh@55d497bf.access.ecotel.net) (Ping timeout: 260 seconds)
[01:48:54] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb9378de40592bee5174.dip0.t-ipconnect.de)
[01:48:58] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 260 seconds)
[01:49:17] <mjrosenb> > polymorphic over any functor -- over absolutely any functor? or over any functors that you'd reasonably want to coerce an optic into?
[01:49:18] <lambdabot>  error:
[01:49:18] <lambdabot>      • Variable not in scope:
[01:49:18] <lambdabot>          polymorphic
[01:49:23] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:49:35] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[01:49:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[01:49:38] *** allbery_b is now known as geekosaur
[01:49:52] <c_wraith> any
[01:50:22] <c_wraith> :t id :: Lens' Int Int
[01:50:23] <lambdabot> Functor f => (Int -> f Int) -> Int -> f Int
[01:50:34] <c_wraith> any Functor!
[01:52:14] *** Joins: notzmv (~zmv@user/notzmv)
[01:52:36] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb93c8c758eae23fe552.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[01:53:19] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:56:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:57:05] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[01:58:30] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 260 seconds)
[01:58:37] *** Quits: neo3 (~neo3@cpe-292712.ip.primehome.com) (Ping timeout: 252 seconds)
[01:58:45] <mjrosenb> :t id :: ALens' Int Int
[01:58:46] <lambdabot> ALens' Int Int
[01:58:58] <mjrosenb> ... I guess I should have expected that.
[01:59:13] <c_wraith> for whatever reason, it doesn't pierce the type aliases there
[02:01:07] <c_wraith> it's like...  (Int -> Pretext (->) Int Int Int) -> Int -> Pretext (->) Int Int Int
[02:01:17] *** Joins: mmhat (~mmh@55d49dd9.access.ecotel.net)
[02:01:21] <c_wraith> and Pretext is a type I don't pretend to understand at all
[02:02:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:03:34] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:06:14] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[02:06:56] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[02:07:15] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[02:08:30] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:08:58] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[02:09:29] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:13:28] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[02:14:57] <hpc> c_wraith: do you tend to understand text?
[02:15:34] <c_wraith> nope.
[02:15:54] <hpc> :D
[02:18:02] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[02:18:03] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 258 seconds)
[02:18:19] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[02:20:01] *** Joins: manjaro-user__ (~manjaro-u@95.85.66.41)
[02:20:25] <c_wraith> On the other hand, I do end to understand ext
[02:22:25] *** Quits: manjaro-user__ (~manjaro-u@95.85.66.41) (Quit: Konversation terminated!)
[02:22:47] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[02:28:31] *** Quits: jespada (~jespada@2803:9800:9842:7a62:c904:aff:1e1a:fc0a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:32:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[02:36:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[02:36:51] *** Quits: Hecate (~mariposa@163.172.211.189) (Changing host)
[02:36:51] *** Joins: Hecate (~mariposa@user/hecate)
[02:37:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 264 seconds)
[02:39:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[02:40:53] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[02:42:19] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb67c0866ab856626c9e.dip0.t-ipconnect.de)
[02:43:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[02:44:26] *** Joins: Hayek (~xxx@cpe-72-134-91-230.natsow.res.rr.com)
[02:45:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:45:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:45:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:45:39] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb9378de40592bee5174.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[02:45:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 244 seconds)
[02:49:06] *** Quits: Hayek (~xxx@cpe-72-134-91-230.natsow.res.rr.com) (Ping timeout: 258 seconds)
[03:03:40] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb67c0866ab856626c9e.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[03:06:44] <mrianbloom> Is there a way to get a cabal/stack project to also build a library with cmake?
[03:07:13] <sclv> fully custom setup.hs file but please don’t
[03:07:25] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[03:09:51] <mrianbloom> What would you recommend instead?
[03:10:29] *** Joins: iqubic (~user@2601:602:9502:c70:3ba1:e05a:f13:1fa6)
[03:11:20] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::4b63)
[03:12:57] <iqubic> Does anyone know why MonadAccum isn't yet in mtl? Transformers has Control.Monad.Trans.Accum already.
[03:13:49] <davean> iqubic: because edwardk has his hands under his ass and hasn't gotten a release out yet :)
[03:13:54] <davean> its in the repository
[03:14:05] <iqubic> I see. That's so annoying.
[03:14:28] <monochrom> But then it should be s/mtl/transformers/
[03:15:45] <davean> iqubic: Uh, feel free to show up and squash release blockers I guess?
[03:16:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:17:27] <iqubic> Basically, I want to add a 'MonadAccum w m' constraint to my function, so that I can use "add :: w -> m ()" and "look :: m w" in my function body.
[03:17:30] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:17:31] <monochrom> https://lambdacats.github.io/fixed-in-head/ :)
[03:17:47] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 264 seconds)
[03:18:01] <geekosaur> I ewas under the impression mtl release was waiting on the new CLC, maybe I'm wrong
[03:18:14] <monochrom> I misread. Sorry! You already know about transformers.
[03:19:05] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[03:19:08] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[03:19:18] <monochrom> But if release blockers happen to be humans, do you squash them too?  "If you see Buddha, kill Buddha"? >:)
[03:19:22] <davean> https://github.com/haskell/mtl/issues/86
[03:19:33] <iqubic> Yes. I know that transformers has Control.Monad.Trans.AccumT. But I'd prefer to write my code in the tagless final format that mtl uses.
[03:19:55] <davean> "Sorry, I'm behind with polishing MonadAccum, but I hope it's not holding up the release? I believe it's not necessary to ship it with the next version. But in case it is, I can speed up." specificly
[03:20:13] <davean> There is stuff to polish, if you want MonadAccum sooner, show up and help would be my advice - its a blocker ATM
[03:20:40] <davean> The specific thing you want is a blocker ATM
[03:20:50] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:20:50] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:20:50] *** Joins: wroathe (~wroathe@user/wroathe)
[03:20:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[03:21:04] <iqubic> I see. That makes sense.
[03:21:22] <davean> But like, it really should be pretty easy to move that forward
[03:21:57] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[03:22:22] *** Joins: hololeap (~hololeap@user/hololeap)
[03:22:32] <iqubic> Yeah, I guess it would be.
[03:22:53] <iqubic> It's just that I've never contributed to a major package like this, so I have no clue how to do so.
[03:23:05] <davean> Clone it, make some patches, start a marge request
[03:23:09] <davean> seriously, it'll be fine
[03:23:35] <iqubic> I don't know what patches need to be made. That's it.
[03:23:44] <davean> Well for one theres documentation listed
[03:23:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[03:23:58] <davean> you'll get edits and such, you'll probably learn stuff from the process
[03:24:22] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 265 seconds)
[03:24:26] <iqubic> I guess I'll just let others work on this. It's not critical that I have this right now.
[03:24:46] <davean> Seriously this is probably VERY easy
[03:26:10] <iqubic> I know. But I'm busy with other things right now. I don't actually have the time to work on this right now.
[03:26:22] <davean> well now you know why its not in mtl yet :)
[03:27:24] <iqubic> I guess so.
[03:32:20] <zzz> opensource in a nutshell
[03:36:23] *** Quits: mmhat (~mmh@55d49dd9.access.ecotel.net) (Quit: WeeChat 3.3)
[03:37:04] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[03:39:11] <Inst_> curious
[03:39:15] <Inst_> does haskel lhave anything like this already?
[03:39:17] <Inst_> https://towardsdatascience.com/read-text-from-image-with-one-line-of-python-code-c22ede074cac
[03:39:33] <Inst_> or, if it doesn't, how hard would it be to reimplement this in haskell? would there also be FOSS issues?
[03:44:11] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[03:45:29] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:46:18] <Cajun> did a tiny bit of digging and found a library meant for solving captchas.. so it definitely can be done :P
[03:46:20] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[03:46:29] <Cajun> `antigate` to be specific
[03:46:49] *** Lord_of_Life_ is now known as Lord_of_Life
[03:47:34] *** Quits: jgeerds (~jgeerds@55d40de2.access.ecotel.net) (Ping timeout: 265 seconds)
[03:50:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[03:50:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:51:23] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 264 seconds)
[03:52:01] <Cajun> -and hackage's tagging system leaves many features to be desired- (how do i do strikethough?)
[03:53:17] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[03:53:47] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:e9cf:d82f:5daa:fcc1) (Ping timeout: 264 seconds)
[03:54:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 264 seconds)
[03:55:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 244 seconds)
[03:58:06] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 258 seconds)
[04:00:34] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:00:58] <Cajun> ah it doesnt seem like the library does any of the actual heavy lifting, just sending it to a website to do it for you. lazy AND boring..
[04:02:32] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:05:21] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[04:06:21] *** Quits: Player001 (~Player001@user/player001) (Quit: Quitting)
[04:08:47] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::4b63) (Ping timeout: 264 seconds)
[04:09:48] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 265 seconds)
[04:14:09] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:5872:8a70:85c4:9bd4)
[04:16:55] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[04:19:32] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:19:47] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[04:21:14] *** Joins: img (~img@user/img)
[04:21:54] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:22:48] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Quit: m5zs7k)
[04:23:05] <xsperry> Inst_, python is just interacting with libraries written in other languages (OpenCV and PyTesseract), which you can do in haskell as well. cursory glance at hackage shows bindings for both libraries, but I'm not sure how well they are maintained
[04:23:15] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[04:23:24] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 258 seconds)
[04:23:27] <xsperry> OpenCV and Tesseract*
[04:23:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[04:24:33] *** Quits: img (~img@user/img) (Client Quit)
[04:25:13] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[04:25:56] *** Joins: img (~img@user/img)
[04:27:21] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[04:27:36] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 244 seconds)
[04:28:06] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:28:14] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Client Quit)
[04:28:39] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[04:31:55] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[04:32:11] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[04:32:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:33:02] *** Joins: Player001 (~Player001@user/player001)
[04:36:10] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Quit: m5zs7k)
[04:38:00] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[04:41:13] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[04:42:00] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:43:07] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:46:20] *** Quits: Nosrep (~archbox@user/nosrep) (Quit: WeeChat 3.3)
[04:46:22] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 252 seconds)
[04:48:38] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[04:50:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 252 seconds)
[05:00:30] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[05:01:08] *** Joins: wei2912 (~wei2912@138.75.71.147)
[05:02:30] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[05:02:50] <kronicmage> hey can anyone here help with a linear types problem?
[05:03:01] <kronicmage> i'm trying to return an (Ur Int, Array Int)
[05:03:19] <kronicmage> o wait nvm my bad
[05:03:31] <kronicmage> getting rid of ($) and using brackets fixed my problem
[05:04:49] <pavonia> What is Ur?
[05:04:52] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:05:05] <kronicmage> from linear-base by tweag
[05:05:30] <kronicmage> it's their container for getting unrestricted/nonlinear stuff out of linear datatypes
[05:06:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[05:07:06] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 258 seconds)
[05:10:18] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:11:17] <Cajun> could someone explain the whole idea behind linear-base? does adding explicit linear signatures allow the compiler to do anything special? or am i just entirely misunderstanding what linear types are for
[05:12:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[05:12:41] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:15:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:21:01] *** Quits: xff0x (~xff0x@2001:1a81:5287:aa00:fcfc:7af3:e2b:ab16) (Ping timeout: 252 seconds)
[05:21:05] <rtpg> @Cajun I think that without linear-base you would not be able to use anything in base on linear variables, as the type signatures in base don't describe linearness
[05:21:05] <lambdabot> Unknown command, try @list
[05:22:58] *** Joins: xff0x (~xff0x@2001:1a81:52c0:f300:645b:c6c7:cd20:13be)
[05:26:00] <Cajun> oh alright i see, yeah makes sense. the motivation section of the proposal also cleared it up. very neat addition
[05:37:14] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[05:42:28] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[05:42:54] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[05:43:23] *** Quits: emergence (~emergence@vm0.max-p.me) (Ping timeout: 246 seconds)
[05:43:35] *** Joins: emergence (~emergence@vm0.max-p.me)
[05:44:36] *** Quits: stefan-__ (~cri@42dots.de) (Excess Flood)
[05:44:47] *** Joins: stefan-_ (~cri@42dots.de)
[05:48:53] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:49:04] *** Quits: econo (uid147250@user/econo) (Ping timeout: 252 seconds)
[05:49:15] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (Read error: Connection reset by peer)
[05:49:16] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 245 seconds)
[05:49:16] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:49:16] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[05:49:26] *** Joins: tapas_ (sid467876@id-467876.ilkley.irccloud.com)
[05:49:39] *** Quits: dpratt_ (sid193493@id-193493.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:49:39] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[05:49:41] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (Ping timeout: 245 seconds)
[05:49:41] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[05:49:41] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[05:49:41] *** tapas_ is now known as tapas
[05:49:42] *** Joins: angerman_ (sid209936@id-209936.ilkley.irccloud.com)
[05:49:43] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Read error: Connection reset by peer)
[05:50:05] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:06] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 245 seconds)
[05:50:13] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:15] *** Quits: mrianbloom (sid350277@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:23] *** Joins: econo (uid147250@user/econo)
[05:50:25] *** Quits: angerman (sid209936@id-209936.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[05:50:27] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:27] *** Quits: SethTisue__ (sid14912@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:27] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:43] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 252 seconds)
[05:50:44] *** Joins: dpratt_ (sid193493@helmsley.irccloud.com)
[05:50:44] *** Joins: scav (sid309693@helmsley.irccloud.com)
[05:50:47] *** Quits: sa1 (sid7690@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[05:50:52] *** Quits: ysh (sid6017@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:55] *** Quits: rune (sid21167@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:56] *** Quits: caasih (sid13241@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:58] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Read error: Connection reset by peer)
[05:50:59] *** Quits: hook54321 (sid149355@user/hook54321) (Read error: Connection reset by peer)
[05:51:02] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:02] *** Quits: supersven (sid501114@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:08] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[05:51:11] *** Joins: bjs (sid190364@user/bjs)
[05:51:12] *** Joins: cbarrett (sid192934@helmsley.irccloud.com)
[05:51:21] *** Quits: vito (sid1962@user/vito) (Ping timeout: 245 seconds)
[05:51:21] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[05:51:28] *** Joins: bradparker_ (sid262931@uxbridge.irccloud.com)
[05:51:40] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[05:51:50] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[05:51:57] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (Ping timeout: 258 seconds)
[05:52:22] *** Joins: jonrh (sid5185@id-5185.ilkley.irccloud.com)
[05:52:22] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[05:52:23] *** Joins: S11001001 (sid42510@id-42510.ilkley.irccloud.com)
[05:52:24] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[05:52:25] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[05:52:31] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[05:52:32] *** Joins: meinside (uid24933@helmsley.irccloud.com)
[05:52:32] *** Joins: vito (sid1962@user/vito)
[05:52:33] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[05:52:34] *** angerman_ is now known as angerman
[05:52:35] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[05:52:38] *** Joins: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com)
[05:52:53] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[05:52:56] *** Joins: supersven (sid501114@ilkley.irccloud.com)
[05:53:00] *** Joins: sa1 (sid7690@ilkley.irccloud.com)
[05:53:00] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[05:53:01] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[05:53:05] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[05:53:06] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[05:53:09] *** Joins: bw (sid2730@user/betawaffle)
[05:53:15] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[05:53:15] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[05:54:12] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[05:54:21] *** Joins: hook54321 (sid149355@user/hook54321)
[05:54:45] *** Quits: Psybur (~Psybur@mobile-166-170-29-82.mycingular.net) (Remote host closed the connection)
[05:56:46] *** Quits: ishutin (~ishutin@94-21-131-99.pool.digikabel.hu) (Ping timeout: 260 seconds)
[05:57:50] <mjrosenb> I have a bit of code that I feel should not compile, but it does.
[05:58:10] <mjrosenb>      inFlightLen <- use $ flatrisState . FM.inFlight . to length
[05:58:38] <mjrosenb> in particular FM.inFlight is a lens for a (Map foo bar), not a list.
[05:59:08] <mjrosenb> (It used to be a list, but I've updated it, and am going through uses of it, but it just compiled, and this use hasn't been updated)
[05:59:18] <mjrosenb> is lens doing something funny here?
[06:00:46] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:00:46] *** Quits: vito (sid1962@user/vito) (Ping timeout: 258 seconds)
[06:00:46] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 258 seconds)
[06:01:10] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:01:21] *** Quits: aria (sid380617@id-380617.lymington.irccloud.com) (Ping timeout: 245 seconds)
[06:01:21] *** Quits: gonz___ (sid304396@id-304396.lymington.irccloud.com) (Ping timeout: 245 seconds)
[06:01:32] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (Ping timeout: 258 seconds)
[06:01:35] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:01:35] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 264 seconds)
[06:01:35] *** Quits: angerman (sid209936@id-209936.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:01:43] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:01:43] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:01:43] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:01:43] *** Quits: jonrh (sid5185@id-5185.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:01:55] *** Quits: S11001001 (sid42510@id-42510.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:01:55] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:04] <mjrosenb> and, I guess a better quesion: is it doing what I want it to do, or is it doing something wrong, like synthesizing a list of length 1 (that contains a Map foo bar), and giving the length of that?
[06:02:16] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[06:02:18] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (Ping timeout: 258 seconds)
[06:02:20] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 260 seconds)
[06:02:20] *** Quits: nrr_ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 260 seconds)
[06:02:28] *** Joins: aria (sid380617@lymington.irccloud.com)
[06:02:38] *** Joins: NemesisD (sid24071@lymington.irccloud.com)
[06:02:41] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:47] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 264 seconds)
[06:02:47] *** Quits: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:02:47] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:02:52] *** Joins: gmc (sid58314@ilkley.irccloud.com)
[06:03:09] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[06:03:16] *** Joins: vito (sid1962@user/vito)
[06:03:25] *** Joins: T_S_ (sid501726@uxbridge.irccloud.com)
[06:03:37] *** Joins: gonz___ (sid304396@lymington.irccloud.com)
[06:03:42] *** Joins: hendi (sid489601@lymington.irccloud.com)
[06:03:45] *** Joins: ishutin (~ishutin@92-249-141-159.pool.digikabel.hu)
[06:03:45] *** Joins: rune (sid21167@ilkley.irccloud.com)
[06:03:45] *** Joins: SethTisue__ (sid14912@ilkley.irccloud.com)
[06:03:51] *** Joins: nrr_ (sid20938@lymington.irccloud.com)
[06:03:59] *** Joins: ysh (sid6017@ilkley.irccloud.com)
[06:04:12] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[06:04:14] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[06:05:13] <awpr> :t length
[06:05:14] <lambdabot> Foldable t => t a -> Int
[06:05:36] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[06:05:42] *** Joins: cln (sid336875@ilkley.irccloud.com)
[06:05:44] <mjrosenb> oh, emacs is lying to me.  It is giving me [a] -> Int
[06:05:56] <dsal> :t Data.List.length
[06:05:57] <lambdabot> Foldable t => t a -> Int
[06:05:57] <mjrosenb> although I guess switching to Data.Map.Size will be faster?
[06:06:17] <awpr> hmm, weird.  maybe some stale HLS data that hasn't accounted for the changed type yet?
[06:06:39] <mjrosenb> I have absolutely no clue where emacs is getting its data from
[06:06:41] <c_wraith> mjrosenb: should be the same.  length is part of the class, so it can be efficient
[06:06:44] <mjrosenb> probably not HLS
[06:06:53] *** Joins: tapas (sid467876@ilkley.irccloud.com)
[06:06:58] *** Joins: jonrh (sid5185@ilkley.irccloud.com)
[06:07:00] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[06:07:00] *** Joins: mrianbloom (sid350277@ilkley.irccloud.com)
[06:07:06] <mjrosenb> I wouldn't be surprised if someone added in a bunch of hard-coded signatures in like 7.6
[06:07:29] <awpr> `length` is a proper method of `Foldable`, so well-written instances typically implement it with something more efficient than the `foldMap (const (Sum 1))` thing
[06:08:32] *** Joins: angerman (sid209936@ilkley.irccloud.com)
[06:08:32] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[06:08:37] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[06:09:01] <mjrosenb> well, then I'll change that back to length :-)
[06:10:35] *** Quits: td_ (~td@94.134.91.189) (Ping timeout: 264 seconds)
[06:12:09] *** Joins: td_ (~td@muedsl-82-207-238-090.citykom.de)
[06:13:15] *** Joins: UpstreamSalmon (uid12077@hampstead.irccloud.com)
[06:13:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:14:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:16:57] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[06:17:55] *** Joins: hook54321 (sid149355@user/hook54321)
[06:18:34] <davean> hlint?
[06:18:40] <davean> Its insane :)
[06:28:49] <Inst_> hmm, what do people think about ocaml vs haskell?
[06:28:55] <Inst_> ocaml apparently has two major advantages over haskell
[06:28:57] *** Inst_ is now known as Inst
[06:29:15] <Inst> one, OCaml's compilers are fast, whereas GHC takes me 15 seconds on a Xeon to compile even the simplest stuff
[06:29:45] <ghoulguy> with practice you'll get faster, though
[06:29:49] <Inst> two, OcaML apparently has a superior parallel
[06:29:54] <Inst> compile, not code
[06:30:02] <Inst> parallel cost model, whatever that means
[06:31:10] <dsal> I used to program in ocaml a couple decades ago.  It was kind of neat.  I did like that I had native binaries out of my program running on my SunOS 4.1.4 machine.
[06:31:20] <dsal> Haskell is way more comfortable, though.
[06:31:52] <Inst> I assume parallel cost model is baked into the language design, unfortunately
[06:32:20] <Inst> you might end up needing a PHaskell or something like that for implementing a parallel cost model comparable to OCaml, but then again, someone needs to either fix GHC or make a faster compiler
[06:32:27] <Inst> even Target is complaining about how long it takes for GHC to run
[06:34:13] <mjrosenb> Target?
[06:43:42] <c_wraith> I don't understand how people make ghc take so long.
[06:43:58] <c_wraith> Unless they're using TH for things that don't need it
[06:45:09] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[06:46:13] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[06:46:13] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[06:46:18] <Inst> quick, dumb question
[06:46:28] <Inst> i was told to avoid Template Haskell like the plague?
[06:46:34] <Inst> why is GHC getting pissed off when I put a pipe?
[06:46:45] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[06:47:10] <Inst> https://pastebin.com/m8m9bEbi
[06:47:10] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[06:47:32] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[06:48:50] <tapas> it needs a let binding, a return statement to lift the bmiTell string into a monad, and some tact because why tf would you post that publicly
[06:49:08] <Inst> thanks, it's cribbing do
[06:49:13] <Inst> that's why it's failing
[06:49:26] <Inst> and taken from Learn Me A Haskell
[06:49:36] <Inst> just trying to figure out how to get guards to work
[06:49:41] <Inst> in a compiled environment
[06:50:11] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[06:50:13] <mjrosenb> learn you a haskell?
[06:50:39] <Inst> ya
[06:51:04] <Inst> http://learnyouahaskell.com/syntax-in-functions#guards-guards
[06:51:05] <tapas> sigh. 
[06:51:40] <tapas> why tf did they write that -.-
[06:51:48] <awpr> personally I make GHC take so long by using GHC.Generics on a record with enough fields to make the inliner give up
[06:52:41] <Inst> i'm told LYAH is terrible
[06:52:46] <Inst> and you should be using haskell book etc instead
[06:53:03] <tapas> Inst: the syntax is <func name> <arg1> ... <argN> | <guard1> = ... |  <guard2> = ... | ... |  otherwise = ... 
[06:53:21] <mjrosenb> I have a bunch of templates just because of lens. 
[06:53:27] <Inst> i guess it's more my problem with trying to figure out how to hack a .hs file into compiling
[06:53:27] <tapas> you can do similar things with patterns in case statements
[06:53:40] <tapas> > Inst> i'm told LYAH is terrible 
[06:53:42] <lambdabot>  error: Data constructor not in scope: Insterror:
[06:53:42] <lambdabot>      Variable not in scope: i'm :: t0 -> t1 -> t2 -> t3 -> a0error:
[06:53:42] <lambdabot>      • Variable not in scope: told
[06:53:43] <tapas> yeah.
[06:53:46] <mjrosenb> and 'otherwise' isn't actually necessary, it is just an alias for True, since | True = "looks weird"
[06:53:48] <tapas> hate that book lmao
[06:54:11] <mjrosenb> and is also not actually needed if the previous cases handle everything.
[06:54:12] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:00:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[07:02:05] <Inst> mjrosenb:
[07:02:40] <Inst> Target built a bunch of Haskell systems, it's an American grocery / department store
[07:02:53] <Inst> their head dev on Quora / stackexchange went and bitched about GHC's long compile times
[07:03:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:04:45] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[07:05:03] <Cajun> i remember reading the first few pages of Learn You a Haskell and man was it just not a fun or educational experience. picking up a 'real' textbook will always be better
[07:05:28] <Inst> HYAh probably should be B& or something
[07:05:39] <Inst> it's a painful textbook and I'm glad someone explained to me it's crap
[07:05:49] <tapas> can we just collectively forget it exists? that may be easier
[07:05:57] <Inst> the fact that it's freely available online is horrible because everyone just goes to LYAh
[07:06:07] <Inst> tapas: it's listed on haskellwiki
[07:06:18] <tapas> rip
[07:08:10] <awpr> I never really know what to recommend when people ask.  I keep being tempted to just buy HPFFP and judge it for myself, but I can't get over the feeling that $60 wouldn't be worth it just to decide whether it's worth recommending
[07:08:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[07:12:10] <Cajun> i would recommend `Programming in Haskell` because it was a pretty pleasant intro to the language, but i have no experience with other introductory textbooks
[07:13:10] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:14:14] <Cajun> though for some reason it doesnt cover some language features like putting @ in front of a pattern anywhere and i dont know why. there was another thing too but i cant remember it off the top of my head, but its very minor
[07:15:20] <brainfreeze> Is that the Graham Hutton one? I can vouch for that one. Plus he's got lectures for the book on his youtube channel, so you can LARP like he's your teacher!
[07:15:49] *** Quits: alx741 (~alx741@186.178.108.23) (Quit: alx741)
[07:16:00] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[07:16:13] <Cajun> yes its the Graham Hutton one. it also has some nice specialist chapters at the end, but i think i skipped the last one or two
[07:16:46] <Cajun> i really dont like how an explanation of lazy evaluation is one of the last chapters, but it is what it is
[07:18:08] <Cajun> it also provides further reading to papers on stuff from the chapter at the end of each, which are nice for those who want to get into the more academic side
[07:20:36] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[07:22:08] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[07:25:48] <Inst> given that i tend to study with multiple textbooks, i would be an excellent reviewer of haskell textboks
[07:25:59] <Inst> except that i'm not competent enough to judge all the intro textbooks i have coming in
[07:26:40] <mjrosenb> putting @ in front of a pattern, not as part of a pattern?
[07:27:11] <Cajun> mjrosenb: like `foo tup@(a,b) = tup`
[07:27:54] <mjrosenb> ok, yeah. I've always thought of that as part of a pattern.
[07:28:09] <Cajun> oh yeah the other thing it didnt cover was irrefutable patterns
[07:29:52] <mjrosenb> I have never once needed those, and am vaguely aware of when they're necessary.
[07:30:30] <mjrosenb> I would not be surprised if there were a bunch of places that I put awful hacks in place that could have been solved with an irrefutable pattern
[07:31:36] <mjrosenb> ok, question: how do I use ^@..? the indexed portion of lens has always been kind of opaque to me, and I'm trying with some simple cases, and the types are not lining up.
[07:32:55] *** Quits: aegon (~mike@174.127.249.180) (Quit: leaving)
[07:33:29] <mjrosenb> ahh, searching for itoListOf on google is *way* better than searching for ^@..
[07:33:38] <mjrosenb> which I assume it is discarding as nonsense
[07:33:59] <mjrosenb> since why would that sequence of non-alphanumeric characters ever have meaning?
[07:34:10] <awpr> Haddock JS search feature works great for operators, if you already know what package it's in
[07:34:22] <awpr> (hit 's' anywhere in a package's docs)
[07:35:48] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[07:35:58] <Cajun> i seriously dislike how search engines seem to sometimes erase symbols and sometimes dont, and some of them are shortcut commands when first. its all a complete mess
[07:36:33] <mjrosenb> that takes me to its definition, but but the lens docs are missing examples for these functions.
[07:37:25] <Cajun> maybe the documentation in optics will make sense? the use case is analogous, but the representation is different
[07:37:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[07:37:56] <Cajun> ( https://hackage.haskell.org/package/optics-0.4/docs/Optics.html#g:21 ) this specifically
[07:39:12] <mjrosenb> Cajun: that's what google pointed me to when I searched from itoListOf :-)
[07:39:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[07:39:37] <mjrosenb> also, it looks like I need to s/traversed/itraversed/ in order to use that function
[07:40:10] <Cajun> youll probably have to switch to indexed versions to get the types to match
[07:40:26] <Cajun> since instead of `s t a b` it uses `i s t a b`
[07:41:09] <mjrosenb> A great sentiment to have when working with lenses.
[07:41:14] <Cajun> or i guess just `i s a` , which is quite a bit less entertaining
[07:41:31] <awpr> an indexed lens `i s a` lens too
[07:42:48] <Cajun> i was getting optics and lens mixed up :P
[07:50:04] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[07:51:18] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Remote host closed the connection)
[07:52:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:57:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[07:59:41] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[08:04:10] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[08:07:07] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 252 seconds)
[08:13:18] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:23:11] *** Quits: wei2912 (~wei2912@138.75.71.147) (Ping timeout: 264 seconds)
[08:34:52] <awpr> hmm, HPFFP already has a fair number of things that either weirdly out of order, confusingly worded, or just straight up wrong if interpreted in the most likely way
[08:36:54] <awpr> "The `$` function evaluates everything to its right first and can thereby be used to delay function application."  I see what they're trying to say, but I think most people will read this as "it causes the rhs argument to be evaluated before applying the function", which it doesn't do
[08:38:47] <awpr> so uh, is all the beginner learning material like this?  it does do some really nice things like show counterexamples of bad indentation and what errors that'd cause, and go out of the way to clarify some common misconceptions
[08:40:27] <awpr> but it just kinda name-drops redexes in the first real section and then forgets about them for at least the rest of the 100-page free sample
[08:40:52] <Cajun> i didnt find anything explicitly confusing other than the diagrams of Applicative machinery and Monad machinery in PiH. it also doesnt go out of the way to clarify misconceptions, i do like when a textbook shows you "oh, this code errored! why? well...."
[08:41:53] <awpr> yeah, it's doing a very good job of that so far
[08:49:34] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[08:50:44] <awpr> wait _what_?  I've never seen anybody line up equals signs between a top-level definition and the bindings of its where-clause
[08:50:46] *** Joins: MQ-17J (~MQ-17J@8.21.10.17)
[08:50:47] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[08:51:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[08:51:53] <awpr> it's like if Mondrian decided to try his hand at writing Haskell code
[08:57:29] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 258 seconds)
[08:58:43] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:59:40] <mjrosenb> awpr: link?
[09:00:12] <awpr> to the HPFFP sample?  https://lorepub.com/product/haskellbook
[09:00:52] *** Joins: wei2912 (~wei2912@138.75.71.147)
[09:01:28] <mjrosenb> in particular, the weird alignment
[09:01:47] <awpr> ah, it's page 37, but I can pastebin it
[09:03:00] <awpr> https://paste.tomsmeding.com/ZjVHHag1
[09:03:18] <mjrosenb> danke.
[09:04:29] <mjrosenb> TBF, I've avoided using where clauses when they can also be top level definitions, in part because I never liked the way they indented
[09:04:32] <mjrosenb> but
[09:04:40] <mjrosenb> *that* is not the solution to my problem.
[09:06:57] <awpr> although I do also prefer a style some people will think is weird for where clauses: indent the keyword a half-step less than the expression, and the bindings the same as the expression https://paste.tomsmeding.com/aG9KTXd1
[09:07:58] <hololeap> awpr: I do that too, more or less
[09:08:11] *** Quits: Alleria (~textual@user/alleria) (Ping timeout: 264 seconds)
[09:08:55] <hololeap> I use 4-space indents and use a half indent (2 spaces) for the where keyword. everything else is pretty standard
[09:09:01] <Cajun> i dont believe the x=5 should be directly after "where," looks weird
[09:09:35] <awpr> yeah, 4/2 vs. 2/1 is just the orthogonal choice of how big a tab stop is
[09:09:43] <hololeap> although if I have a very short where clause with only one definition, I might give 'where' a full indentation and put the definition on the same line after it
[09:09:54] <Cajun> "whatever is default" is my number of spaces
[09:10:10] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 260 seconds)
[09:10:42] * awpr heads off to check if vim can render a half-width space so I can use 1/0.5
[09:11:00] <hololeap> haha probably not
[09:11:50] * ski confusedly wonders what this "half indent" thing could be
[09:13:00] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[09:15:03] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:15:07] <int-e> can't wait for the PR to ghc that changes indent width type to Double and correctly accounts for various space widths *runs*
[09:15:59] <int-e> s/Double/Rational/
[09:16:08] <int-e> (let's be clean)
[09:16:12] * ski was just thinking `CReal' ..
[09:16:14] <Cajun> why not be even uglier and use Float
[09:17:13] <int-e> Oh and a pragma to declare the font being used.
[09:17:15] <ski> (apropos, i noticed (from someone else's query) that `CReal' doesn't seem to be imported in lambdabot any longer ..)
[09:17:31] <int-e> Hmm. Maybe flesh it out for next year's April Fool's day...
[09:22:03] *** Joins: InstX1 (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[09:23:47] <int-e> Hmm. I don't remember whether there was an actual issue with the package (safehaskell) or whether it's just a victim of me reducing dependencies a few years ago...
[09:25:02] <ski> yea (i think i've noticed it before, but seeing that interaction recently reminded me of it)
[09:25:16] <int-e> @let import Data.Number.CReal
[09:25:19] <lambdabot>  Defined.
[09:25:34] <int-e> > pi :: CReal
[09:25:35] <lambdabot>  Could not find module ‘Data.Number.CReal’
[09:25:35] <lambdabot>  Use -v (or `:set -v` in ghci) to see a list of the files searched for.Could ...
[09:25:35] <lambdabot>  Use -v (or `:set -v` in ghci) to see a list of the files searched for.
[09:25:47] <int-e> huh?
[09:25:51] <int-e> @undef
[09:25:51] <lambdabot> Undefined.
[09:25:53] <c_wraith> > ()
[09:25:54] <lambdabot>  ()
[09:25:59] <c_wraith> Oh, you undef'd it
[09:28:44] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:29:06] *** Quits: InstX1 (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[09:33:51] <int-e> Oh, I think I know what went wrong there. @let is checking imports against the wrong environment... ouch
[09:34:01] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 252 seconds)
[09:34:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[09:34:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:34:26] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[09:34:56] <int-e> @let import Data.Number.CReal
[09:34:57] <lambdabot>  Defined.
[09:34:58] <int-e> > pi :: CReal
[09:34:59] <lambdabot>  3.1415926535897932384626433832795028841972
[09:36:09] <int-e> @undef
[09:36:09] <lambdabot> Undefined.
[09:36:11] <int-e> > pi :: CReal
[09:36:12] <lambdabot>  3.1415926535897932384626433832795028841972
[09:37:25] <int-e> > text $ showCReal 200 pi
[09:37:27] <lambdabot>  3.14159265358979323846264338327950288419716939937510582097494459230781640628...
[09:38:56] <ski> najs :)
[09:44:08] *** Joins: reumeth (~reumeth@user/reumeth)
[09:48:28] <gentauro> int-e: that `type` reminds me of `South Park` (Al Gore)
[09:53:34] <gentauro> > :t text
[09:53:35] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[09:53:59] <gentauro> > text
[09:54:01] <lambdabot>  <[Char] -> Doc>
[09:54:23] <ski> @type text
[09:54:23] <lambdabot> String -> Doc
[09:54:45] <gentauro> int-e: is it this `text`? https://hackage.haskell.org/package/text
[09:55:03] <gentauro> last time (many years) when I tried to use it with `Safe-Haskell` it exploded :o
[09:55:06] <gentauro> is it fixed by now?
[09:55:20] <c_wraith> No, it's from a pretty-printing library
[09:55:41] <gentauro> c_wraith: aha
[10:03:30] <awpr> > text ":t id"
[10:03:31] <lambdabot>  :t id
[10:03:57] <gentauro> kind of interesting "blogpost series" https://byorgey.wordpress.com/2021/10/14/competitive-programming-in-haskell-bfs-part-1/
[10:04:01] <awpr> guess the bots aren't on speaking terms with each other
[10:04:02] <c_wraith> lambdabot's outputs all start with space, and it ignores anything that starts with a space.
[10:04:10] <gentauro> I have been looking into trying do something similar
[10:04:41] <gentauro> but, as it's only allowed to use `base` and only submit one file, it all becomes "clumsy" (lack of `submodules`) :(
[10:04:54] <pavonia> gentauro: Maybe we should make that one of our mottoes: "Haskell -- our values are super CReal"
[10:05:30] <gentauro> pavonia: I was hopping that they already used a similar description for the package ;)
[10:06:30] *** Quits: emf (~emf@2620:10d:c090:400::5:bb17) (Quit: emf)
[10:07:31] <gentauro> awpr: are there still multiple bots here in #haskell?
[10:07:44] <gentauro> % :t show
[10:07:44] <yahb> gentauro: Show a => a -> String
[10:07:48] <gentauro> yep
[10:07:48] <jackdk> > :t show
[10:07:50] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[10:07:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[10:07:58] <jackdk> @botsnack sorry lambdabot 
[10:07:58] <lambdabot> :)
[10:08:03] <gentauro> there is the `%` and the `>`
[10:09:33] <gentauro> has somebody came up with a `snippet` that makes yahb post a new `> …` to lambdabot and then lambdabot to post a new `% …` to yahb? 
[10:09:43] * gentauro some people just want to se the world burn xD
[10:10:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:11:05] <gentauro> % show "@let import Data.Number.CReal"
[10:11:05] <yahb> gentauro: "\"@let import Data.Number.CReal\""
[10:11:05] <awpr> hmm, `> 42` is apparently an invalid nick
[10:11:10] <ski> istr we played this game, last time (preflex ?) we had multiple bots
[10:11:24] <brainfreeze> Is there a way to stop the list monad on a certain condition? Kind of like the guard function, but won't produce duplicates and would just be a single valued list.
[10:11:32] <awpr> I was hoping to hijack its reply syntax to turn it into a cons constructor, but I guess I can't
[10:11:39] *** Quits: UpstreamSalmon (uid12077@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:11:49] <gentauro> % "@let import Data.Number.CReal"
[10:11:49] <yahb> gentauro: "@let import Data.Number.CReal"
[10:11:56] <ski> brainfreeze : example ?
[10:13:02] <gentauro> brainfreeze: wouldn't that requiere some kind of `Ord a`? and you can't specify any context in a Monad (the reason we can have monads for Dictionaries/HashTables)
[10:14:45] <brainfreeze> ski: https://paste.tomsmeding.com/5SdgMX60
[10:16:18] <brainfreeze> So basically, I'm just using the list monad to get all the combinations. I'm sure there may be a better answer, but that's what I came up with.
[10:17:15] <Cajun> gotta love list as the brute-force enabler, always too tempted to use it rather than some algorithmic approach
[10:17:35] <ski> (gentauro : s/can/can't/ ?)
[10:17:39] <nitrix> If it works for Prolog... :P
[10:18:18] * ski ought to go back attempting to reverse-engineer a Prolog system ..
[10:18:24] <ski> (.. for Commodore 64)
[10:18:37] *** Joins: fef (~thedawn@user/thedawn)
[10:18:55] <ski> brainfreeze : example input, with expected/desired output ?
[10:21:09] <[exa]> brainfreeze: if you can sort `xs` (O(n log n)), you can walk it parallelly from the beginning and end without guessing, getting all combinations in just O(n log n + n) instead of O(n^2)
[10:22:18] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[10:22:19] <gentauro> ski: yeah, you are right (I had the first can't, but forgot the second)
[10:22:59] <brainfreeze> ski: https://paste.tomsmeding.com/Vo9Xj8ew comments have the input and current/desired output
[10:25:10] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 252 seconds)
[10:25:23] <[exa]> brainfreeze: you can do something like `xts <- tails xs; a:bs <- xts; b <- bs` but it's still gonna be slow
[10:27:43] <[exa]> (correction: `(a:bs) <- tails xs; b<-bs; ...` )
[10:28:08] <gentauro> brainfreeze: you need somekind of `distinct . order` functionality :0
[10:29:18] * gentauro with the `distinct` you need to reorder the created `tuple` => (x,y) => (min x y, max x y)
[10:30:31] <ski> % :t comparing
[10:30:31] <yahb> ski: Ord a => (b -> a) -> b -> b -> Ordering
[10:30:35] <ski> % :let equating :: Eq a => (b -> a) -> (b -> b -> Ordering); equating f = (==) `on` f
[10:30:35] <yahb> ski: unknown command ':let'; use :? for help.
[10:30:56] <ski> % let equating :: Eq a => (b -> a) -> (b -> b -> Ordering); equating f = (==) `on` f
[10:30:56] <yahb> ski: ; <interactive>:100:72: error:; * Couldn't match type `Bool' with `Ordering'; Expected: b -> b -> Ordering; Actual: b -> b -> Bool; * In the expression: (==) `on` f; In an equation for `equating': equating f = (==) `on` f
[10:31:36] <ski> oh, i always mix the order up there ..
[10:31:50] <ski> % let equating :: Eq a => (b -> a) -> (b -> b -> Ordering); equating f = f `on` (==)
[10:31:50] <yahb> ski: ; <interactive>:101:72: error:; * Couldn't match type `a' with `b -> Ordering'; Expected: b -> b -> Ordering; Actual: b -> a; `a' is a rigid type variable bound by; the type signature for:; equating :: forall a b. Eq a => (b -> a) -> b -> b -> Ordering; at <interactive>:101:5-56; * In the first argument of `on', namely `f'; In the expression: f `on
[10:32:46] <ski> % let equating :: Eq a => (b -> a) -> (b -> b -> Bool); equating f = (==) `on` f; nubOn :: Eq b => (a -> b) -> [a] -> [a]; nubOn = nubBy . equating
[10:32:46] <yahb> ski: 
[10:32:59] <ski> % [ x | x <- [0,1,0,2,0,1,0,3],then nubOn by x]
[10:32:59] <yahb> ski: [0,1,2,3]
[10:33:20] <ski> brainfreeze : anyway, that ^ seems to work
[10:33:28] <ski> @hoogle nubOn
[10:33:28] <lambdabot> Data.List.Extra nubOn :: Eq b => (a -> b) -> [a] -> [a]
[10:33:28] <lambdabot> Extra nubOn :: Eq b => (a -> b) -> [a] -> [a]
[10:33:28] <lambdabot> Turtle.Prelude nubOn :: Ord b => (a -> b) -> Shell a -> Shell a
[10:34:06] <ski> (and no, getting just `514579' isn't possible)
[10:34:45] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[10:35:25] <gentauro> brainfreeze: something like this -> `Data.List.sort $ map (\(x,y) -> (min x y, max x y)) $ cp [0..2] [0..2]` where cp is: `cp xs ys = (,) <$> xs <*> ys`
[10:35:41] <gentauro> brainfreeze: you can easily make a distinct with that list ;)
[10:35:55] <gentauro> s/list/sorted list/
[10:36:20] <gentauro> `[(0,0),(0,1),(0,1),(0,2),(0,2),(1,1),(1,2),(1,2),(2,2)]`
[10:36:23] <ski> @hoogle Ord b => (a -> b) -> [a] -> [a]
[10:36:23] <lambdabot> Data.List sortOn :: Ord b => (a -> b) -> [a] -> [a]
[10:36:23] <lambdabot> GHC.Exts sortWith :: Ord b => (a -> b) -> [a] -> [a]
[10:36:23] <lambdabot> GHC.OldList sortOn :: Ord b => (a -> b) -> [a] -> [a]
[10:37:28] <ski> > [(x,y) | ys@(x:_) <- [0 .. 3],y <- ys]
[10:37:29] <lambdabot>  error:
[10:37:29] <lambdabot>      • No instance for (Num [()]) arising from a use of ‘e_103’
[10:37:29] <lambdabot>      • In the expression: e_103
[10:37:39] <ski> > [(x,y) | ys@(x:_) <- tails [0 .. 3],y <- ys]
[10:37:41] <lambdabot>  [(0,0),(0,1),(0,2),(0,3),(1,1),(1,2),(1,3),(2,2),(2,3),(3,3)]
[10:37:50] <ski> > [(x,y) | x:ys <- tails [0 .. 3],y <- ys]
[10:37:52] <lambdabot>  [(0,1),(0,2),(0,3),(1,2),(1,3),(2,3)]
[10:37:59] <brainfreeze> That nub function seems like exactly what I was looking for! Terribly named, yeesh.
[10:38:12] <ski> (a nice way to only grab ordered pairs from the same list)
[10:38:27] <gentauro> brainfreeze: `nub` has a bad asymtotic complexity if I recall correctly
[10:38:36] <ski> yea, quadratic
[10:39:13] <gentauro> ski: nice list comprehension
[10:39:21] <ski> if your lists are sorted, you should be able to define and use a `nubOrd :: Ord a => [a] -> [a]' that only checks adjacent elements for duplicates
[10:39:28] <gentauro> sorted and not duplicated. ME GUSTA
[10:39:40] <jackdk> look for there are many functions called `ordNub` on hoogle
[10:39:44] <ski> (i wouldn't be surprised if this is defined in some package)
[10:40:06] <[exa]> I realized there's a problem with `tails`, if there was 1010 in the input it wouldn't trigger
[10:40:12] <brainfreeze> It's just for practice, so I think that's fine. I really like the idea of "sorting and walking one list forward and one backwards" too. I'll give that a shot.
[10:40:13] <[exa]> jackdk: (map head.group)
[10:40:14] <jackdk> many alternative preludes provide one, but I'd probably reach for the one in witherable, because I have a soft spot for that package
[10:40:16] <gentauro> ski: it seems that brainfreeze list isn't sorted: `-- example input:  [1721, 979, 366,299,675,1456]`
[10:40:24] <ski> (hm, or i guess it would only actually need to be `Eq a => [a] -> [a]' still)
[10:41:19] <jackdk> [exa]: noice.
[10:41:58] <[exa]> jackdk: fun how you only need Eq at that point
[10:42:27] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[10:43:40] *** Quits: ikex (ash@user/ikex) (Ping timeout: 258 seconds)
[10:43:48] <[exa]> brainfreeze: the sort&walk seems to work fine here, just for xs=[1..2000] the difference in speed can be felt a lot :]
[10:44:23] *** Joins: ikex (~ash@user/ikex)
[10:45:17] <[exa]> (but yeah it's uglier, there's like 5 cases to take care of :] )
[10:45:32] <ski> for `a + b', perhaps it could be nicer if `a' walked `xs' from the front, and `b' walked it from the back ..
[10:46:15] <ski> (in the case `xs' is sorted, that is .. which is not the case in the given examples, as noted)
[10:46:38] <[exa]> still sorting is going to be faster than the list binding
[10:46:46] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[10:48:08] <[exa]> (fun hint: you can actually split the list to (<=1010) and (>=1010) parts to save some extra sorting power)
[10:51:23] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[10:52:23] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:54:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[10:58:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 245 seconds)
[10:59:15] *** Joins: alzgh (~alzgh@user/alzgh)
[11:00:25] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[11:06:38] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:07:33] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb67c0866ab856626c9e.dip0.t-ipconnect.de)
[11:12:12] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[11:19:34] *** Quits: phma (~phma@host-67-44-209-75.hnremote.net) (Read error: Connection reset by peer)
[11:20:30] *** Joins: phma (~phma@host-67-44-208-32.hnremote.net)
[11:21:34] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[11:26:05] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[11:31:50] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[11:35:38] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:27] <Unhammer> Do I have to `stack clean` if I add -threaded to ghc-options? It doesn't seem to do much when I `stack build` after toggling it
[11:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:38:46] <Unhammer> (it says Preprocessing, Building, Linking but doesn't go through each file – should it?)
[11:39:54] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[11:40:22] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:41:41] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[11:42:39] <Unhammer> hm, sending +RTS -N4 works when threaded but not without threaded so I guess recompiling when just toggling threading is fast then :)
[11:43:03] <Unhammer> Does -threaded have an effect on library sections in .cabal?
[11:45:11] *** Joins: neo3 (~neo3@cpe-292712.ip.primehome.com)
[11:46:00] <hololeap> Unhammer: I don't think so, I think it only effects the runtime system
[11:47:58] <hololeap> along with -threaded you can also add -rtsopts=-N4 to make that the default for the binary (or -N to have it try to autodetect the number of cores available)
[11:51:06] *** Joins: Guest16 (~Guest16@122.164.27.104)
[11:52:35] *** Quits: Guest16 (~Guest16@122.164.27.104) (Client Quit)
[11:52:56] *** Joins: cufussed (~cufussed@122.164.27.104)
[11:53:17] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[11:56:33] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[11:57:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:57:58] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.115)
[11:59:05] *** Joins: fendor (~fendor@77.119.192.109.wireless.dyn.drei.com)
[12:00:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:01:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[12:07:34] *** Joins: jgeerds (~jgeerds@55d40de2.access.ecotel.net)
[12:08:13] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[12:10:46] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[12:13:04] *** Quits: cufussed (~cufussed@122.164.27.104) (Quit: Client closed)
[12:22:54] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:30:17] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.115) (Read error: Connection reset by peer)
[12:30:46] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[12:31:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[12:33:16] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:35:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[12:38:38] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:39:06] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:41:56] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[12:47:50] *** Joins: rk04 (~rk04@user/rajk)
[12:53:11] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 264 seconds)
[12:53:45] *** Joins: Farzad (~FarzadBek@178.131.24.167)
[12:56:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[13:00:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 245 seconds)
[13:00:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:01:17] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:01:45] *** Quits: jonatan (~nate@h85-8-60-194.cust.a3fiber.se) (Remote host closed the connection)
[13:03:15] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[13:03:36] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[13:07:58] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[13:08:55] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[13:09:56] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:10:23] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:11:37] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[13:13:36] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:16:15] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:17:11] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 245 seconds)
[13:19:09] *** Joins: rk04 (~rk04@user/rajk)
[13:19:10] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[13:19:21] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[13:20:56] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:25:27] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[13:26:09] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[13:27:14] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:27:44] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 258 seconds)
[13:29:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[13:32:53] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[13:34:33] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:37:50] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[13:39:39] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[13:39:49] *** Joins: mestre (~mestre@191.177.175.57)
[13:40:01] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:40:51] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:40:53] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[13:41:25] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb67a588bcb670b337ca.dip0.t-ipconnect.de)
[13:42:37] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[13:44:59] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb67c0866ab856626c9e.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[13:45:56] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[13:54:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:59:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 244 seconds)
[13:59:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 264 seconds)
[14:02:25] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb67a588bcb670b337ca.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:03:37] *** Quits: ulvarrefr (~user@185.24.53.152) (Read error: Connection reset by peer)
[14:04:44] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[14:07:35] *** Quits: xff0x (~xff0x@2001:1a81:52c0:f300:645b:c6c7:cd20:13be) (Ping timeout: 264 seconds)
[14:08:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d)
[14:08:09] *** Joins: xff0x (~xff0x@2001:1a81:52c0:f300:1be9:ff56:80a8:5503)
[14:09:46] *** Joins: rk04 (~rk04@user/rajk)
[14:10:14] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[14:10:31] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[14:11:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:12:09] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[14:12:09] *** Joins: mmhat (~mmh@55d498fd.access.ecotel.net)
[14:12:24] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:15:15] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[14:15:28] *** Quits: reumeth (~reumeth@user/reumeth) (Quit: reumeth)
[14:17:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:18:12] <merijn> dminuoso: Anyone who likes static linking loathes glibc in general :p
[14:19:32] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c904:aff:1e1a:fc0a)
[14:19:46] *** Quits: jgeerds (~jgeerds@55d40de2.access.ecotel.net) (Ping timeout: 265 seconds)
[14:22:10] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 260 seconds)
[14:23:45] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[14:24:22] *** Joins: phma_ (~phma@host-67-44-208-174.hnremote.net)
[14:25:20] *** Quits: phma (~phma@host-67-44-208-32.hnremote.net) (Read error: Connection reset by peer)
[14:29:31] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[14:30:53] *** Joins: alx741 (~alx741@186.178.108.23)
[14:40:52] *** Joins: ssipos90 (~ssipos@86.123.18.123)
[14:41:43] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Ping timeout: 258 seconds)
[14:41:55] <ssipos90> Hi, guys. Is this the right place to ask for some help with rio?
[14:42:10] *** Joins: _ht (~quassel@37.120.218.164)
[14:42:18] *** Joins: AlexNoo_ (~AlexNoo@178.34.150.6)
[14:42:34] *** Quits: ssipos90 (~ssipos@86.123.18.123) (Quit: WeeChat 3.3)
[14:42:48] *** Joins: ssipos (~ssipos@86.123.18.123)
[14:44:06] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:44:47] *** Quits: Alex_test (~al_test@178.34.160.45) (Ping timeout: 264 seconds)
[14:44:56] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[14:45:03] <ssipos> if someone has 5 mins to take a look a the highlighted line( and the following), I'd appreciate it https://github.com/ssipos90/tasks2-hs/blob/main/src/Run.hs#L209
[14:45:23] *** Quits: AlexZenon (~alzenon@178.34.160.45) (Ping timeout: 264 seconds)
[14:45:32] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 244 seconds)
[14:45:58] *** Quits: AlexNoo (~AlexNoo@178.34.160.45) (Ping timeout: 260 seconds)
[14:46:42] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[14:47:11] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[14:49:16] *** Joins: AlexZenon (~alzenon@178.34.150.6)
[14:49:23] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[14:49:24] *** Joins: Alex_test (~al_test@178.34.150.6)
[14:50:21] <merijn> ssipos: FYI: you don't needa new let for each binding, you can have only one on line 204 and then just binding on the following lines (assuming they're indented as far as 'task')
[14:56:21] *** phma_ is now known as phma
[14:56:44] *** AlexNoo_ is now known as AlexNoo
[14:56:45] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[14:57:38] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[14:58:03] *** Joins: __monty__ (~toonn@user/toonn)
[14:58:04] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[14:58:25] *** Joins: mengu (~mengu@c188-150-15-33.bredband.tele2.se)
[15:00:30] <merijn> There's no strict tuple in base, right?
[15:01:04] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[15:01:46] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 245 seconds)
[15:03:03] *** Joins: notzmv (~zmv@user/notzmv)
[15:03:19] <geekosaur> not unless you count (# , #)
[15:03:23] *** Quits: pfurla_ (~pfurla@ool-182ed2e2.dyn.optonline.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:03:26] <hololeap> weird thought, would `WriterT x (Writer y a)`, where WriterT is the Strict version, be considered a strict tuple (in x and y) with extra data?
[15:03:34] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 258 seconds)
[15:03:34] <merijn> geekosaur: Unboxed tuple are entirely different, though
[15:03:53] *** Quits: fendor (~fendor@77.119.192.109.wireless.dyn.drei.com) (Remote host closed the connection)
[15:04:08] *** Quits: mengu (~mengu@c188-150-15-33.bredband.tele2.se) (Quit: Leaving...)
[15:04:10] <merijn> geekosaur: I just want the laziness to now make my mconcat super slow
[15:04:15] <merijn> s/now/not
[15:04:37] <merijn> foldMap' is nice, but tuple basically defeats it >.>
[15:05:44] <hololeap> can you deepseq it?
[15:06:19] <merijn> I mean, I can, but that makes everything more verbose and this is something I end up needing frequently
[15:07:24] <hololeap> I'd say make a custom strict tuple for each use case and at least you can use the verbosity to describe something
[15:12:29] *** Quits: Gestotterd (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net) (Quit: Leaving)
[15:12:57] *** Joins: fendor (~fendor@77.119.192.109.wireless.dyn.drei.com)
[15:15:23] <ssipos> @merijn, screw those lets, I have bigger fish to fry. My logging attempts aren't working
[15:15:23] <lambdabot> Unknown command, try @list
[15:15:30] <ssipos> merijn, screw those lets, I have bigger fish to fry. My logging attempts aren't working
[15:15:30] *** Quits: _ht (~quassel@37.120.218.164) (Ping timeout: 244 seconds)
[15:15:57] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[15:16:21] <merijn> ssipos: Sure, but I was too lazy to figure out what was going on, so I gave up :p
[15:16:44] *** Joins: ssipos90 (~ssipos90@86.123.18.123)
[15:17:36] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[15:18:33] *** Quits: ssipos90 (~ssipos90@86.123.18.123) (Client Quit)
[15:19:14] <ssipos> thanks for tryin'
[15:19:49] *** Joins: ssipos90 (~ssipos90@86.123.18.123)
[15:20:09] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[15:20:17] *** Quits: ssipos (~ssipos@86.123.18.123) (Quit: WeeChat 3.3)
[15:20:29] <ssipos90> .
[15:22:10] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[15:35:24] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[15:37:50] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[15:39:22] *** Joins: whatif (~xxx@47.245.54.240)
[15:44:12] *** Joins: rk04 (~rk04@user/rajk)
[15:48:45] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:48:48] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 258 seconds)
[15:53:13] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[15:57:11] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 245 seconds)
[16:03:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[16:07:26] *** Joins: Guest9678 (~neo3@cpe-292712.ip.primehome.com)
[16:07:46] *** Joins: fef (~thedawn@user/thedawn)
[16:10:17] *** Quits: neo3 (~neo3@cpe-292712.ip.primehome.com) (Ping timeout: 244 seconds)
[16:10:49] <jollygood2> is there no equivalent that returns Text? System.Win32.String.peekTString :: LPCTSTR -> IO String
[16:11:27] *** Joins: agumonkey (~user@88.160.31.174)
[16:12:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:12:16] <geekosaur> probably there isn't, System.Win32 could use a lot of love
[16:12:31] <jollygood2> it calls Foreign.C.String.peekCString :: CString -> IO String. there doesn't seem to be Text equivalent in there either
[16:12:59] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (EOF))
[16:14:04] <geekosaur> I know they left, but that one might be harder, not sure that doesn't tie Text too closely to ghc
[16:14:13] <geekosaur> then again I guess text could export its own
[16:15:49] <geekosaur> @tell jollygood2 you could always file an issue on the text repo, or even provide diffs. probably can't go into base though
[16:15:49] <lambdabot> Consider it noted.
[16:16:02] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[16:16:16] <jollygood2> seems like an uphill battle trying to use Text when String is used all over the place, even in base :|
[16:16:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 258 seconds)
[16:17:01] <geekosaur> migration to Text is somewhere in the HF/CLC priorities, iirc
[16:17:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[16:18:26] <geekosaur> that said, it's muddled because there's a fair amount of convenience in String, and it still works well for short strings
[16:18:41] <geekosaur> so I expect a lot of bikeshedding over it
[16:19:07] <merijn> hah
[16:19:10] <geekosaur> also I suspect they want to get utf8 Text out first
[16:19:22] <merijn> Text in base is gonna take decades :p
[16:19:36] <merijn> That's even more controversial and painful than AMP
[16:20:31] *** Joins: fa (~fa@116.127.1.72)
[16:22:08] <maerwald> jollygood2: https://github.com/hasufell/abstract-filepath
[16:22:19] <maerwald> you don't want Text
[16:22:36] <maerwald> but that's WIP and not finished
[16:23:11] <jollygood2> I am not dealing with file paths
[16:23:19] <maerwald> doesn't matter
[16:23:24] <maerwald> https://github.com/hasufell/abstract-filepath/blob/61fb550abd78805c5ddea232fab8e5e065410b29/abstract-filepath-Win32/System/Win32/WindowsString/Types.hsc#L184
[16:23:29] <maerwald> `peekTString    :: LPCTSTR -> IO WindowsString`
[16:26:43] *** Parts: fa (~fa@116.127.1.72) (Leaving)
[16:27:59] <maerwald> newtype WindowsString = WS { unWFP :: BS.ShortByteString } -- which is UTF16 encoded
[16:35:41] <jollygood2> if I understood it right, there would be greater overhead when converting from Text to LPCTSTR, and vice versa, than from WindowsString to LPCTSTR?
[16:37:08] <maerwald> well, WindowsString keeps the data untouched that comes from syscalls
[16:37:12] <maerwald> that's the point
[16:37:56] <maerwald> but here, they are short bytestrings that are unpinned bytearrays
[16:38:21] <maerwald> that means they cause a memcpy, but they avoid memory fragmentation
[16:38:53] <maerwald> so this wouldn't make sense for reading file contents
[16:39:32] *** Joins: Guest32 (~Guest32@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:39:45] <Guest32> is there a reason why TypeSynonymInstances are disabled by default?
[16:40:10] <Guest32> people generally don
[16:40:40] <Guest32> 't like type synonyms either, why is that?
[16:41:14] *** Quits: Guest9678 (~neo3@cpe-292712.ip.primehome.com) (Ping timeout: 260 seconds)
[16:43:06] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[16:43:15] <jollygood2> maerwald, that's pretty neat, and could be useful when doing a lot of winapi calls in a tight loop. but when I am writing haskell, and dealing with text, I usually want to manipulate text with haskell functions, not low-level winapi functions. and for that, Text should be the default, not String
[16:43:38] <merijn> Guest32: They're confusing
[16:43:39] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:43:50] <merijn> Guest32: And don't add any type safety
[16:44:20] <merijn> Guest32: You see people defining 3 layers of type synonyms only for the eventual *actual* type to be "Int", but now I have to click through several links/modules to find out what a function *actually* wants
[16:45:17] <merijn> Guest32: If something takes an Int, the signature should just be Int...now, sometimes for callbacks that have long types they can have some use to cleanup and make types more readable, but any use of type synonyms that is *not* abbreviation is bad IMO
[16:45:33] <merijn> Either just write the actual type *or* use an actual newtype and get some type safety
[16:45:56] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[16:46:14] *** Quits: mestre (~mestre@191.177.175.57) (Quit: Lost terminal)
[16:47:31] <Guest32> that clears things up
[16:47:37] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[16:47:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:48:57] <merijn> Guest32: Consider an example like "type JSON = Text" and "foo :: JSON -> Something" and you can see how that kinda thing might just be straight up misleading :)
[16:50:35] *** Quits: MQ-17J (~MQ-17J@8.21.10.17) (Ping timeout: 244 seconds)
[16:50:43] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 252 seconds)
[16:51:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:52:15] <hpc> or if you really want to mess with people, do something like type Just = Maybe
[16:53:22] <Guest32> so there are no type class instances because they would contradict existing instances for some types?
[16:53:52] <Guest32> if I type CoolNumber = Int and I try to instance say Show for it
[16:53:53] <geekosaur> yes, since they can't have their owninstances; they are exactly the same as the aliased type
[16:53:57] <Guest32> that can't be good?
[16:54:31] <geekosaur> TypeSynonymInstances is therefore misleading because it sounds like you coulkd create such an instance, but it'll still fail because there's already an instance
[16:55:36] <geekosaur> or trickier ones, like if you defined an instance for String it would prevent you from defining an instance for lists
[16:55:46] <Guest32> type synonyms bad
[16:55:47] <geekosaur> because type String = [Char]
[16:56:32] <Guest32> but [a] != [b] ?
[16:56:37] <geekosaur> that one actually required an additional extension because it could cause so much trouble (FlexibleInstances)
[16:56:47] <Guest32> or is it just lists of chars that will be out of reach
[16:57:17] <Guest32> yet another reason not to use String
[16:57:54] <hpc> for a good time, look at the Show instance for lists
[16:57:58] <hpc> > [1, 2, 3]
[16:57:58] <geekosaur> instance ... String ... in effect becomes (x ~ Char) => instance ... [x]
[16:57:59] <lambdabot>  [1,2,3]
[16:58:03] <hpc> > ['a', 'b', 'c']
[16:58:04] <lambdabot>  "abc"
[16:58:20] <geekosaur> so it matches all lists, then checks that the specific list is a list of Char
[16:59:14] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[16:59:32] <geekosaur> you can't do otherwise given separate compilation: other modules can't know that you defined an instance with a constraint (here x ~ Char), and it's on the linker to connect the instances up and the linker has no clue about Haskell constraints
[16:59:45] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[17:00:30] <geekosaur> so in general defining instances on type synonyms is just asking for trouble
[17:01:33] <geekosaur> as is using type synonyms in general, just because they're so confusing and provide no type safety
[17:03:23] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[17:03:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 245 seconds)
[17:03:33] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 258 seconds)
[17:07:36] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 245 seconds)
[17:08:57] <geekosaur> (if you're wondering how instance Show String works, it doesn't. there's one Show instance for lists which calls the showList method of the list member type. this has a default implementation for all types except Char.)
[17:12:38] <jollygood2> how do I efficiently build Text in IO char by char? is there a TextBuilder, or something?
[17:13:30] <geekosaur> https://hackage.haskell.org/package/text-1.2.5.0/docs/Data-Text-Internal-Builder.html ?
[17:14:41] <jollygood2> that works in ST. so I have to mix and match IO and ST?
[17:14:53] <merijn> jollygood2: You can trivially convert ST to IO
[17:15:10] <merijn> There's literally a stToIO function somewhere :p
[17:15:22] <jollygood2> ah, ok. :P
[17:15:25] <merijn> @hoogle stToIO
[17:15:25] <lambdabot> Control.Monad.ST stToIO :: ST RealWorld a -> IO a
[17:15:25] <lambdabot> Control.Monad.ST.Lazy stToIO :: ST RealWorld a -> IO a
[17:15:25] <lambdabot> Control.Monad.ST.Lazy.Safe stToIO :: ST RealWorld a -> IO a
[17:15:38] <merijn> jollygood2: Because IO and ST use the exact same underlying implementation in GHC
[17:16:16] <Franciman> @hoogle wiki
[17:16:16] <lambdabot> XMonad.Actions.Search wikipedia :: SearchEngine
[17:16:16] <lambdabot> package wikicfp-scraper
[17:16:16] <lambdabot> Path.Extensions wikiExtension :: String
[17:16:40] <geekosaur> :)
[17:21:13] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[17:24:06] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:24:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:24:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:25:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[17:29:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[17:31:42] *** Joins: max22- (~maxime@2a01cb0883359800a1b62314adf10ac2.ipv6.abo.wanadoo.fr)
[17:32:58] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[17:33:18] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[17:40:02] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:41:17] *** Joins: kuribas (~user@ptr-25vy0i98mhuqx60svv0.18120a2.ip6.access.telenet.be)
[17:43:00] <Guest32> why does https://hackage.haskell.org/package/prettyprinter-1.7.1/docs/Prettyprinter.html#v:nest only ident the tail of the list?
[17:44:34] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 258 seconds)
[17:51:36] *** Joins: arpl (~arpl@84-107-171-239.cable.dynamic.v4.ziggo.nl)
[17:52:47] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[17:54:11] *** Quits: arpl (~arpl@84-107-171-239.cable.dynamic.v4.ziggo.nl) (Client Quit)
[17:55:20] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 265 seconds)
[17:56:04] *** Joins: rk04 (~rk04@user/rajk)
[17:57:11] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 245 seconds)
[17:58:14] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:58:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:58:40] *** Joins: Guest92 (~Guest92@178-78-205-86.customers.ownit.se)
[17:59:16] <Guest92> Hi! I'm trying to understand currying, and want to write mypi x = x ^ 2 * pi, but without using x -- like I can do triple = (*) 3. Is this possible?
[17:59:52] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:00:02] <hpc> yes
[18:00:06] *** Quits: [Kalisto]_ (~nico@user/kalisto/x-8968079) (Ping timeout: 260 seconds)
[18:00:12] *** Joins: dbqp (~dbqp@84-107-171-239.cable.dynamic.v4.ziggo.nl)
[18:00:22] <hpc> it's a bit more awkward though, and you'll have to use function composition
[18:00:39] <hpc> @pl \x -> x ^ 2 * pi
[18:00:39] <lambdabot> (pi *) . (^ 2)
[18:01:20] <hpc> any function can be rewritten in pointfree style with enough effort
[18:01:20] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[18:02:16] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:02:16] <hpc> @pl \a b c d e f g -> f e e d b e e f b a g
[18:02:18] <lambdabot> (const .) . flip (flip . ((flip . (flip .)) .) . (flip =<< ((flip . (flip .)) .) . flip flip id . ((flip . (ap .)) .) . flip flip id . (liftM2 flip .) . flip flip id . (liftM2 flip .) . flip (flip .
[18:02:18] <lambdabot> (flip .) . flip (flip . (flip =<< flip id)))))
[18:02:20] <Guest92> Thanks -- I have some more reading to do, evidently :). But at least I wasn't missing something simple!
[18:03:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[18:05:43] *** Joins: Darwin226 (~Darwin226@95.168.118.20)
[18:05:47] *** Quits: dbqp (~dbqp@84-107-171-239.cable.dynamic.v4.ziggo.nl) (Quit: Client closed)
[18:06:01] *** Quits: max22- (~maxime@2a01cb0883359800a1b62314adf10ac2.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:08:03] <Darwin226> Does anyone know if the monad instance for cofree is the only possible one? Specifically, would swaping the arguments to <|> make an invalid instance?
[18:08:06] <Darwin226> it's here https://hackage.haskell.org/package/free-5.1.7/docs/src/Control.Comonad.Cofree.html#line-177
[18:09:33] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[18:11:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[18:12:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[18:14:25] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 260 seconds)
[18:14:39] *** Joins: agumonke` (~user@88.160.31.174)
[18:15:27] <kronicmage> does anyone know if there's a version of Array.read that's linear on both arguments, rather than just the array?
[18:15:30] <kronicmage> in linear-base
[18:15:37] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 258 seconds)
[18:16:20] *** Quits: agumonkey (~user@88.160.31.174) (Ping timeout: 244 seconds)
[18:17:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Ping timeout: 244 seconds)
[18:18:14] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:18:28] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[18:18:29] *** Joins: sedeki (~textual@user/sedeki)
[18:20:09] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:22:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:22:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:23:04] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:23:18] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:23:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:25:06] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:25:14] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:25:48] <whatif> I have a simple question, how a function can change a variable out of the function?
[18:26:25] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:26:27] <whatif> like there are two functions, they need to visit one same variable and change it for store result
[18:27:16] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[18:27:25] <whatif> in OOP it will look like Object.method1 and Object.method2 change Object.attribute
[18:27:46] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:27:47] <geekosaur> variables are immutable, so you can't change them even in one function. you instead return the new value possible as part of a tuple
[18:28:14] <whatif> or in Kotlin, there're two function and one variable defined inside a function, that inside function can visit that variable
[18:28:16] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[18:28:43] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:29:04] <geekosaur> in general you design to avoid such things, or use the State monad to hide the fact that youy're actually passing values in and out
[18:29:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:30:01] *** Quits: Guest92 (~Guest92@178-78-205-86.customers.ownit.se) (Ping timeout: 256 seconds)
[18:30:40] <geekosaur> there are alsao IORefs for when you really do need to do such things, but you still need to pass the IORef around and this forces you to have everything in IO
[18:30:47] <whatif> except haskell, which language would you guys use? I'd like to make an example, but I don't know which is perfer
[18:31:03] <whatif> js python java kotlin?
[18:31:11] <whatif> or scheme?
[18:31:34] <kronicmage> pure scheme is probably closest to haskell, but either way i think you just have a design problem whatif
[18:32:03] <kronicmage> you shouldn't be wanting to mutate in the first place, and if you do, you better contain it properly in a State/ST/IORef
[18:32:47] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[18:32:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:34:26] <whatif> fun outter(){ var a=1; fun add1(){ a=a+1 }; fun add2(){ a = a+2 } ... }
[18:34:51] <whatif> add1 and add2 both need to visit a, change it
[18:35:11] <whatif> how to use State to express this?
[18:35:33] <kuribas> whatif: idris :)
[18:35:57] <whatif> "🟢#haskell kuribas :whatif: idris :)", what is idris?
[18:36:10] <kronicmage> whatif: you make the a your state, and then you write `add1 = modify (+1)` and `add2 = modify (+2)`
[18:36:32] <kronicmage> but I stress again that if you can avoid doing so, it's better to not use State
[18:36:45] <kuribas> whatif: a language I would use besides haskell:  https://www.idris-lang.org/
[18:36:45] <kronicmage> and that depends on what exactly you're doing with your outer and your add functions
[18:37:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 244 seconds)
[18:38:37] <whatif> "🟢#haskell kronicmage :whatif: you make the a your state, and then you write `add1 = modify (+1)` and `add2 = modify (+2)`", more details please
[18:38:43] <whatif> I don't get it
[18:40:06] <kuribas> whatif: you cannot "change state", so you take one state, and return a new one.
[18:40:25] <kronicmage> whatif: https://pastebin.com/4HZtvZ2t
[18:40:32] <kuribas> whatif: if you need to change it twice, then pass the state from the first function to the second function.
[18:41:06] <kuribas> whatif: however "I need to change a variable" is already not thinking in a haskell way.
[18:41:13] <kronicmage> oops sorry my pastebin is wrong
[18:41:31] <whatif> "🟢#haskell kuribas :whatif: if you need to change it twice, then pass the state from the first function to the second function.", but what if the two function running at different threads?
[18:41:33] <kronicmage> you need to redo `a <- get` before each trace statement
[18:41:44] <whatif> so it can not be passed
[18:41:58] <kronicmage> whatif: half the point of haskell is writing stateless functions to make concurrency much easier
[18:42:13] <kuribas> whatif: if you have two threads then you need to use mutable variables, like IORef, MVar, or STVar.
[18:42:22] <kronicmage> if you must use state and you must have it be threaded, then an MVar or TVar may be your best choice
[18:42:34] <kronicmage> but still inferior to just writing pure functions and letting concurrency happen automagically
[18:42:54] <kuribas> kronicmage: concurrency doesn't happen "magically", you need to write it.
[18:43:02] *** Quits: Farzad (~FarzadBek@178.131.24.167) (Ping timeout: 260 seconds)
[18:43:18] <kronicmage> sorry i overexagerrated. but still preferable to doing so statefully
[18:43:28] <kuribas> There are many different ways and libraries to do concurrency/parallelism, but none of them are completely automatic.
[18:43:45] <ski> @quote is.no.state
[18:43:45] <lambdabot> MonadState says: Do not try to change the state; that's impossible. Instead only try to realize the truth: There is no state.
[18:43:56] <kuribas> it depends, are you doing concurrency, or parallelism?
[18:44:21] <whatif> me? yes
[18:44:27] <Hecate> :'D
[18:44:56] <kuribas> parallelism is where you have a pure function that you want to run in different threads for performance reasons.
[18:45:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[18:45:24] <kuribas> concurrency means you have side-effects which you want to run aside from each-other, for example web-server requests.
[18:45:30] <whatif> there're two different functions running in async block, they need to visit one same variable and change it result for each other
[18:45:31] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[18:45:46] <kuribas> whatif: then use MVar or TVar.
[18:45:57] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[18:45:59] <whatif> yes, there's IO Socket
[18:46:03] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[18:46:10] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[18:46:43] <ski> Oz has declarative concurrency (without data races). also, iirc, `lvish'
[18:49:21] <maerwald[m]> kuribas: you can also use streamly for async 
[18:50:00] <kuribas> maerwald[m]: I didn't mention any library...
[18:51:24] *** Quits: agumonke` (~user@88.160.31.174) (Ping timeout: 265 seconds)
[19:00:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[19:00:59] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:01:26] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[19:04:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[19:04:50] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:05:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 245 seconds)
[19:05:21] <ski> @hackage lvish
[19:05:21] <lambdabot> https://hackage.haskell.org/package/lvish
[19:05:50] * ski . o O ( <https://en.wikipedia.org/wiki/Oz_(programming_language)#Dataflow_variables_and_declarative_concurrency>,<http://mozart2.org/mozart-v1/doc-1.4.0/tutorial/node8.html#chapter.concurrency>,<http://mozart2.org/mozart-v1/doc-1.4.0/dstutorial/node2.html#single.assignment> )
[19:06:01] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[19:06:46] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 245 seconds)
[19:07:11] *** Joins: LimeGolem (~LimeGolem@82.40.121.143)
[19:10:50] *** Quits: mmhat (~mmh@55d498fd.access.ecotel.net) (Quit: WeeChat 3.3)
[19:11:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 258 seconds)
[19:13:31] *** Quits: jespada (~jespada@2803:9800:9842:7a62:c904:aff:1e1a:fc0a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:13:45] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:16:00] *** Joins: jkaye (~jkaye@2601:281:8300:7530:30bc:26a4:e2b8:8034)
[19:16:12] *** Joins: rk04 (~rk04@user/rajk)
[19:20:56] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[19:25:44] <Cajun> theres also a `scheduler` library used by `massiv` that allows for nested parallelism. its pretty cool but i havent used it directly
[19:26:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:27:29] *** Quits: LimeGolem (~LimeGolem@82.40.121.143) (Quit: Client closed)
[19:30:31] *** Joins: Farzad (~FarzadBek@151.238.114.164)
[19:31:52] <whatif> yushyin, why version?
[19:32:37] *** Quits: Farzad (~FarzadBek@151.238.114.164) (Client Quit)
[19:34:34] *** Joins: econo (uid147250@user/econo)
[19:35:17] *** Quits: Darwin226 (~Darwin226@95.168.118.20) (Quit: Client closed)
[19:35:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:35:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:35:39] *** Joins: wroathe (~wroathe@user/wroathe)
[19:35:49] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[19:36:23] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:36:32] <yushyin> whatif: you can ignore it, it was a ctcp command, but apparently your client doesn't support it 
[19:37:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:38:46] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 265 seconds)
[19:39:01] *** Joins: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285)
[19:40:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[19:42:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[19:42:32] <whatif> yushyin, what is solanum?
[19:43:40] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[19:44:45] <jollygood2> geekosaur, hmm, this doesn't sound very reassuring. link to Data.Text.Internal.Builder you posted earlier. "Warning: this is an internal module, and does not have a stable API or name. Functions in this module may not check or enforce preconditions expected by public modules. Use at your own risk!"
[19:47:18] <jkaye> Don't authors usually use Internal modules to signal that you shouldn't use it? That was my understanding
[19:48:55] <jollygood2> perhaps you wanted to paste a link to this?  Data.Text.Lazy.Builder
[19:50:37] *** Quits: fendor (~fendor@77.119.192.109.wireless.dyn.drei.com) (Remote host closed the connection)
[19:51:33] <jollygood2> I'm also a bit confused why there's no strict variant
[19:52:00] <Franciman> because it would be more costly to generate
[19:52:14] <Franciman> lazy text is basically a list of strict texts
[19:52:23] <Franciman> so builder can easily and cheaply generate it
[19:52:33] <Franciman> and you can also support strange streaming things
[19:52:37] <Franciman> that's my understanding
[19:53:40] <Franciman> while, I think you need to have the whole builder available to efficiently build a strict text, which AFAIK is a contiguous chunk of memory
[19:53:51] <Franciman> so it's costly to allocate and deallocate it copying the whole thing
[19:55:14] <geekosaur> jollygood2, there's a way to hide internals completely. Internals modules are specifically exported for those who really do need to use them
[19:55:18] <jollygood2> isn't the whole point of Builder to keep track of concating and appending chars/strings, and then allocate memory for Text once, when you are done? so I don't see the point of using Lazy Text asthe middle gorund?
[19:55:19] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[19:55:55] <Franciman> jollygood2: but a Builder value can be lazily computed!
[19:56:03] <geekosaur> so you can build it in chunks instead of all at once
[19:56:06] <jkaye> geekosaur, how can we hide internals complete (assuming we still need to test them and such)? I didn't know that was possible
[19:56:14] <geekosaur> other-modules:
[19:56:28] <Franciman> if you force the evaluation of a builder completely, then you can easily get a Strict Text
[19:56:35] <Franciman> just keeping track of things
[19:59:34] <jkaye> Cool, thanks
[20:01:51] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[20:06:41] <jollygood2> my use case is trying to write efficient Foreign.C.String.peekCString equivalent that returns Text. should I use Data.Text.Lazy.Builder or Data.Text.Internal.Builder?
[20:07:16] *** Joins: andrevdm (~andre@41.76.35.141)
[20:07:35] *** Quits: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com) (Ping timeout: 264 seconds)
[20:07:53] <geekosaur> probably the exported one
[20:07:57] <jollygood2> I tried to pack peekCString's result to Text, but that didn't improve performance one bit compared to just using String everywhere
[20:07:59] <geekosaur> somehow I missed it before
[20:08:17] <geekosaur> yes, I expect a Builder will work better
[20:08:39] <jollygood2> I was hoping fusion would take care of String being created at all. maybe it can't, or maybe I called pack too late
[20:16:00] *** Joins: Hayek (~xxx@2603-8000-b401-6099-7541-8f40-8f83-6bcb.res6.spectrum.com)
[20:16:13] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 244 seconds)
[20:16:37] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[20:20:30] *** Joins: Topsi (~Tobias@dyndsl-095-033-090-025.ewe-ip-backbone.de)
[20:24:42] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[20:25:31] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 244 seconds)
[20:26:45] <awpr> re the TypeSynonymInstances discussion, (I had to go test this out in a repl, but) `instance C String` is not like `a ~ Char => instance C [a]`
[20:27:20] <geekosaur> no, I cut some corners there
[20:27:45] <geekosaur> there are similarities but it's not quite identical
[20:28:07] <awpr> the former only matches `[Char]`, and prevents an overlapped `instance C [a]` from matching without further knowledge of `a`; while the latter matches any `[a]` and forcibly makes the element type be `Char`
[20:28:20] <awpr> (resulting in a type error if it's something else)
[20:28:46] <awpr> equality constraints in instance contexts are interesting beasts
[20:29:13] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[20:29:27] *** Joins: emanuele6 (~emanuele6@net-2-36-101-242.cust.vodafonedsl.it)
[20:29:46] *** Quits: emanuele6 (~emanuele6@net-2-36-101-242.cust.vodafonedsl.it) (Changing host)
[20:29:46] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:32:05] <hpc> it's also kind of just the natural continuation of general class constraints in instance definitions
[20:32:18] <hpc> the right side of (=>) is all that counts for instance resolution
[20:32:37] *** Joins: hyiltiz (~quassel@31.220.5.250)
[20:32:46] <awpr> yeah, the interesting new thing about them is that they can cause the type the instance head matched to "change" by unification
[20:33:10] <hpc> yeah
[20:33:23] <hpc> instance Show a => ... lets you use show
[20:33:26] <jkaye> Anyone tried out Polysemy for a larger project? Wondering if it's worth looking into, I like the idea of dealing with effects in that way, but also have never really had a problem with mtl
[20:33:31] <hpc> instance (a ~ Char) => ... lets you use ord, chr, etc
[20:33:51] <awpr> right, but it also can make the call site behave differently under type inference
[20:34:41] <geekosaur> hm, isn't polytsemy the one that really wants a patched compiler for decent performance?
[20:34:46] <geekosaur> *polysemy
[20:37:08] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[20:37:41] <yushyin> geekosaur: eff
[20:37:50] <geekosaur> oh
[20:38:23] <geekosaur> lose track of all these effects libraries :/
[20:38:25] *** Joins: Guest9678 (~neo3@cpe-292712.ip.primehome.com)
[20:38:30] <dsal> poultrysemi
[20:38:42] <yushyin> and afaik the ghc-proposal was accepted but is yet to be implemented
[20:38:46] <dsal> It used to require compiler plugins.  eff required new primops of some sort.
[20:38:52] <awpr> we have all these libraries for tracking effects, but what we really need is a library for keeping track of effects _libraries_
[20:39:23] <geekosaur> there's an xkcd for that
[20:39:58] <awpr> I was thinking it sounded a bit like "14 competing standards", but this case is a bit more meta
[20:40:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:40:15] <yushyin> https://github.com/hasura/eff/issues/15
[20:40:20] <geekosaur> that one, yes
[20:40:54] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 258 seconds)
[20:41:13] *** Joins: aegon (~mike@174.127.249.180)
[20:43:02] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[20:45:36] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[20:47:23] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[20:47:38] *** Joins: nekroxxiga (~nekroxxig@88.222.185.135)
[20:47:49] *** Joins: rk04 (~rk04@user/rajk)
[20:49:25] *** Quits: Guest32 (~Guest32@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[20:49:29] <remexre> Is there a typeclass that's sufficient to express filterability?
[20:49:41] <awpr> Filterable/Witherable
[20:49:51] <awpr> https://hackage.haskell.org/package/witherable-0.4.2/docs/Data-Witherable.html
[20:51:40] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: quit)
[20:52:54] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[20:54:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[20:57:46] *** Quits: xsperry (~xs@user/xsperry) ()
[20:58:11] <monochrom> Nice, the reactionary movement of elliding hierarchical module names and going "module Witherable" :)
[20:59:58] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 265 seconds)
[21:02:13] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[21:02:13] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:06:04] <hpc> soon we'll be writing #include <lens.h>
[21:06:58] <dsal> The previous version of the codebase I'm working on had lens in their prelude, but now it's banned.  I feel like they may have overcorrected.
[21:06:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f) (Ping timeout: 264 seconds)
[21:07:20] <hpc> ew, the older versions of witherable don't have module Witherable either
[21:07:28] <hpc> it's the benjamin button of software
[21:07:41] <hpc> going back in time with every release
[21:07:45] *** Joins: rk04 (~rk04@user/rajk)
[21:10:06] *** Quits: kuribas (~user@ptr-25vy0i98mhuqx60svv0.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:11:45] <maerwald> dsal: why?
[21:12:14] <dsal> The story I heard was that devs were "bored" or something and trying to  look super smart, so they just did all the fancy stuff they could.
[21:12:58] *** Joins: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi)
[21:13:11] <geekosaur> "Bored now!"
[21:13:20] <maerwald> that's why you give devs the freedom to experiment outside of your codebase
[21:13:28] <maerwald> but... most managers don't understand this
[21:13:44] <dsal> I had a case where lens wasn't necessary, but it made a five line special function digging through a list of records to pull a string value of out of an aeson object out of a Maybe.  I replaced it with five or so lines of function, but it doesn't read better, IMO.
[21:14:24] <dsal> It does read better in the O of someone who says nobody should have to know any libraries to work on the codebase.  Apparently encountering `_Just` completely blew his mind and he had no idea what it might do.
[21:14:59] <maerwald> if you use lens, you should have a good internal tutorial
[21:15:13] <maerwald> not "go google about it"
[21:15:29] <dsal> The approximate argument I'm failing to understand and characterizing badly is "people shouldn't have to learn things"
[21:15:58] <dsal> But yeah, in this discussion, they looked up the docs for _Just and were complaining about how impossible it is to understand.  I pointed out that this is not a reasonable way to learn things.
[21:16:11] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[21:16:11] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[21:16:14] *** allbery_b is now known as geekosaur
[21:16:15] <maerwald> all depends on internal culture... if none of the seniors can be bothered to take a day to help juniors without being productive, well...
[21:16:33] <dsal> The code was basically  `view (someField . _Just . key "thing" . _String)` and that's just too much, man.
[21:16:35] <maerwald> I've been in companies were seniors are more concerned with their own productivity
[21:16:43] <dsal> I'd *love* to help people understand stuff.  That's my favorite thing to do.
[21:17:16] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[21:18:00] <dsal> I said I'd rather buy everyone a copy of Penner's book if they don't understand something than to just avoid it.  I can understand how that came across poorly, though.
[21:18:23] <monochrom> When I was young and reckless and arrogant, I said a few arrogant things. A minority turns out to be timeless truth, not arrogance.
[21:18:49] <dsal> I'm old and reckless, but try not to be arrogant.
[21:18:53] <monochrom> People do write-protect their brains upon graduation or hitting age 21 or something.
[21:19:16] <maerwald> lol
[21:19:40] <dsal> I'm not sure how old the guy is who's running this project, but he did point out that he's working on a cache that might need to be reevaluated.  So he at least recognized that phenomenon.
[21:19:45] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[21:21:36] * geekosaur at least tries to keep his brain R/W. seems to get harder as he gets older though :(
[21:21:48] <dsal> The problem I run into a lot is people don't want to have to "know" a library or concept or something, they'd rather just see lots of redundant code.  But that code all has to be named something.  So now I have to come up with a new name for the concept and that's the hardest part.
[21:22:07] <geekosaur> (sadly this only really got to be a problem a few years ago)
[21:22:08] <monochrom> BTW I also oppose to the millenial learn-off-free-resources-on-the-internet notion that library docs are obliged to teach.
[21:22:46] <monochrom> Library docs are obliged to specify. There is difference.
[21:22:51] <dsal> One of the vague rules is to not write instances of things, just functions.  e.g., `concatSomeThing` is preferable to `Semigroup SomeThing` or whatever.  But now I have to have a huge vocabulary and wonder why this things' special each time.  I don't pay much attention to that one, though.
[21:23:14] <dsal> Library docs are pretty good for what they are.
[21:23:31] <monochrom> And when library docs include examples, they are to clarify the spec, still not to teach.
[21:23:51] <dsal> I was using a library recently while learning a new concept and the docs had zero docstrings, but I could still understand how to use the thing because the types told the story.
[21:24:50] <hpc> monochrom: funny you mention that, i always go straight to library docs because i prefer specifying to "tutorializing"
[21:24:54] <dsal> But yeah, I found linking to the docs for _Just as an argument for how it's confusing was disingenuous:  https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Prism.html#v:_Just
[21:25:28] <dsal> There are a few cases where you can actually read and write stuff without having a super deep understanding of it.  Prisms are kind of that.
[21:25:50] <dsal> In that discussion, I was asked if I knew that _Just was actually a prism and not a lens and whether I could explain to strawman what it actually did and how it failed and all that.
[21:26:36] <dsal> You don't need to get into theory, though.  I'm making a list of stuff.  It has to pick stuff out of a record.  There's a Maybe here.  If it hits Nothing, then I'm not going to find the things I'm looking for down that path.  You don't need to understand how profunctors compose to get it.
[21:31:14] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[21:34:48] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[21:34:55] *** Joins: hololeap_ (~hololeap@user/hololeap)
[21:35:43] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[21:37:15] *** hololeap_ is now known as hololeap
[21:38:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:38:21] <hololeap> the names of things naturally bring up theory, though. someone has to eventually ask why it's named Functor
[21:38:57] <hpc> eventually
[21:39:23] <geekosaur> unless they ask "Why isn't it named something meaningful?"
[21:39:42] <hololeap> you could just say it's greek, which is technically true I think :p
[21:40:25] <[exa]> I guess FP naming is still much better than combs & sheafs & fibrations
[21:40:38] <dsal> Sure.  I deleted a bunch of code in a change to just make a thing a monoid and got pushback from strawman noob guy because he didn't know what any of that was.  Meanwhile, I stared at this code for a while to realize it's just `foldMap` with a bunch of new names.
[21:40:40] <[exa]> except, well, for the case of lenses
[21:42:01] <dsal> It's a weird balance.  Do you want someone who doesn't know anything to be able to come in and work on code at the expected rate, or do you want people who *do* know things to come in and work on code at that expected rate?
[21:42:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:42:32] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[21:42:32] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[21:42:32] *** Joins: turlando (~turlando@user/turlando)
[21:42:38] <aegon> what do y'all think is the eta on dependent haskell
[21:42:54] <[exa]> dsal: honestly I wouldn't say that the catch-up lag is THAT harsh
[21:43:03] <hololeap> I think getting someone up to speed on monoids is probably a good first mandatory introduction to the terms
[21:43:14] <dsal> [exa]: heh, which one?
[21:43:14] <aegon> imo if you dont have the time and energy to train a new hire on your code base, don't hire anyone
[21:43:23] <dsal> I'm hugely biased towards everyone knowing things that I know.
[21:43:31] <aegon> its wrong to them, wrong to you and its an easy way to grow antagonisim in your org
[21:43:40] <geekosaur> aegon, a long time
[21:44:01] <hololeap> getting someone to intuitively understand monoids opens the door to so much else
[21:44:15] <dsal> aegon: "we need to hire more people" usually comes from people who aren't working on codebases.
[21:44:42] <geekosaur> not only are we a long ways from it, but apparently linear haskell is getting more internal attention right now
[21:45:20] <geekosaur> "the mythical man-month"
[21:45:23] <dsal> I've often been asked after giving an estimate for how long it'll take to do something how long it'd take me to get someone else to do something.  I'm only really good at expressing my ideas in code and I don't know all the detailed issues until I encounter them.  My estimates aren't too bad with that.  However, if I have to use someone else's brain and hands, it's definitely going to take me 8x longer.
[21:46:35] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[21:46:44] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[21:47:03] <hololeap> translating code to and from english (or whatever language you're speaking) is a lot of overhead, but being able to discuss it in english seems pretty necessary
[21:47:17] <geekosaur> also I get the impression dependent haskell is more or less eisenberg's personal project and mostly doesn't exist even in his head yet, only vague ideas that have yet to be firmed down
[21:47:38] <geekosaur> (I think it's eisenberg?)
[21:47:54] <dsal> hololeap: I don't completely disagree with that, but I can't discuss it in English before it exists because I only have a vague idea of what it is.  e.g., I know what parts needs to exist at a pretty high level, but when I start working on them, I realize there are necessary things at the bottom I wasn't thinking of.
[21:48:12] <hololeap> yeah, you both need to be on the same level
[21:48:23] <hololeap> or similar at least
[21:48:29] <dsal> It comes down to:  Do you want to see it working, or do you want me to tell you a story about what something that might work looks like where each sentence is increasingly further from the truth?
[21:48:32] <aegon> geekosaur: well, linear is pretty cool too but the need for a whole other iteration on existing libs to really take advantage of it makes it seem super far off too
[21:49:29] <[exa]> dsal: like, there is a serious ratio of programmers out there who just refuse to learn, which might be a problem though, but from what I've seen you can get productive in typemagic-less haskell in 1-2 days, just by trying things
[21:49:55] *** Joins: notzmv (~zmv@user/notzmv)
[21:49:58] <aegon> dsal: yeah, i think there are a ton of problems with our current structure for stuff. I thought things were much more sane untill i worked at microsoft
[21:50:13] <aegon> their team / org nonesense is the craziest pile of garbo i've experienced
[21:50:24] <aegon> only place i quit in a spectacle
[21:50:30] <dsal> [exa]: Sure.  And there are lots of things you can be reasonably good at without actually understanding them.  I kind of recommend that approach in general.  Don't try to completely understand something before using it.
[21:50:57] <dsal> aegon: I worked at Google for a while which has a strong culture for design docs for everything.  But people were pretty happy with me writing design docs after I had stuff working.
[21:51:07] <aegon> lol
[21:51:35] <aegon> my experience with microsoft was no one has time to help anyone so figure it out, then the people who make the most convoluded systems get praise and ego and continue doing it
[21:51:44] <geekosaur> well, sure. how often do you get decent docs for anything?
[21:52:10] <aegon> so you end up with toxicity top down and a bunch of new hires out of college taht don't know this isn't normal freaking out trying to learn with no one to mentor
[21:52:15] <geekosaur> so you have lofty goals but in the end any docs at all are a win
[21:52:22] <[exa]> aegon: is that internal or external experience? (I reached that externally :D )
[21:52:25] <dsal> aegon: Yeah, there's a butterfly effect in incentives at some of these places.  We want people who can demonstrate an ability to manage complexity.  Challenge accepted.
[21:52:47] <hololeap> haskell libs seem to have a lot of good docs, if they are a little verbose with the theoretical jargon
[21:53:05] <geekosaur> [exa], note "I thought things were much more sane untill i worked at microsoft"
[21:53:06] *** Quits: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[21:53:07] <dsal> and terse with any human language at all.  :)
[21:53:16] <aegon> internal, i've been a manager at a couple places now and it literaly made me flip tables one day. apparently the guy who holds the power has changed since i blew up but it was just a terrible experience and i feel bad for folks that start there
[21:54:07] <aegon> the rest of the team like sent me thank you texts after 
[21:54:22] <hololeap> there seems to be a positive feedback loop surrounding toxicity in organizations as the best and brightest quit in frustration leaving only those who can tolerate it
[21:54:25] <[exa]> oh that's nice actually
[21:54:47] <dsal> I'm going to be working with a guy shortly who has ~no Haskell experience.  I'm pretty excited about it.  I'm hoping for a combination of having things that are hard to use incorrectly and easy to use correctly helping guide the process along.
[21:56:13] <monochrom> Eh hard to use incorrectly?  "challenge accepted" >:)
[21:56:36] <monochrom> Among my students, the weak ones try that.
[21:56:40] <dsal> ha.  Well, e.g., you can't make an HTTP request in the middle of a DB transaction.
[21:56:50] <hololeap> oh, speaking of, what is a good alternative prelude that does away with partial functions?
[21:57:14] <[exa]> dsal: slight hint, never insist that it's "better" (it's not), I'm usually saying that "it saves me a lot of coding" which is caught up much more smoothly
[21:57:17] *** Joins: rk04 (~rk04@user/rajk)
[21:57:23] <dsal> hololeap: We've got a vicious hlint precommit for that sort of thing.
[21:57:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[21:57:26] <[exa]> dsal: also, friendly constructive code reviews help. :D
[21:57:56] <aegon> whew, sorry for the ranting, that + some morning coffee brought back some crud
[21:58:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:4852:7354:5eb5:641f)
[21:58:43] <hololeap> no worries, it was a pretty small rant
[21:58:50] <[exa]> aegon: no worries I guess, I'm happy to have my stuff confirmed from insiders :D
[21:58:53] *** Joins: xsperry (~xs@user/xsperry)
[21:59:12] <dsal> [exa]: Yeah.  Makes sense.  Saves time coding is less important than saves time reading, which is where the arguments come from.  I think reading a super simple lens access thing (just field . field . _Just . field . etc) is easier than reading the function I wrote in its place.  Others thing the function is easier because you don't have to "know anything."
[21:59:23] <geekosaur> I could have done that, secondhand
[22:00:13] <dsal> My favorite part of that particular discussion was that I spent like, three or four days rewriting this test three times because of "simplicity" bikeshedding yet nobody noticed that in a previously bikeshed commit where I introduced my Transaction monad, *it did start a transaction*
[22:00:29] <dsal> er. *did not*
[22:00:45] <dsal> Like, the whole point of the thing was to do DB work in a transaction, and it didn't do the most basic thing it was supposed to do.
[22:00:47] *** Quits: Guest9678 (~neo3@cpe-292712.ip.primehome.com) (Quit: Leaving)
[22:01:31] <geekosaur> I know the guy who came up with what got perverted into sharepoint. boy did he ever have scathing things to say about the business side of ms
[22:02:11] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 264 seconds)
[22:02:17] <geekosaur> (he was in msr)
[22:02:20] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:02:53] <[exa]> "... what got perverted into ..." -- ah yeah that's the way. 
[22:03:13] <dsal> Yeah, it often seems like the business people are there like, "Yeah, that's a good idea and all, but what can we add to make it worse before selling it to people?"
[22:03:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[22:04:04] <dsal> I always think of Sony with that because I like dated references.  The PSP was a pretty amazing piece of technology, but let's make a proprietary storage device and a  proprietary media format and assume everyone will just buy all new things from us.
[22:04:13] <[exa]> "People will miss MS Comic Chat integration"
[22:04:16] *** Quits: jkaye (~jkaye@2601:281:8300:7530:30bc:26a4:e2b8:8034) (Ping timeout: 245 seconds)
[22:06:21] <hpc> it doesn't even take business people to ruin software - just look at yaml
[22:06:34] <dsal> haha.  I'd rather not.
[22:06:53] <hpc> take a perfectly sensible data format, then add a zillion aliases for true/false and add the classic xml amplification vulnerability back
[22:06:55] *** Joins: max22- (~maxime@2a01cb08833598006074215d6309d66e.ipv6.abo.wanadoo.fr)
[22:07:07] <[exa]> you mean "what people think is yaml" or "what yaml specification tries to say" ? :D
[22:07:19] <hpc> the latter
[22:07:30] <hpc> such as it is - it's not very well documented either
[22:07:32] <[exa]> ah yes that's the victim of xml
[22:07:36] <dsal> My favorite yaml feature is Norway.
[22:08:15] <[exa]> all at all, this stuff is victim of software designers who fail terribly at parsing&validating inputs
[22:08:33] *** Joins: benin (~benin@183.82.207.116)
[22:10:38] <dsal> Postel's law was repealed.
[22:11:49] <shapr> too bad
[22:11:52] <monochrom> Oh, that was not from Larry Wall?
[22:12:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[22:12:47] <c_wraith> Postel's law is a really bad idea anyway
[22:12:54] <c_wraith> It just encourages being sloppy
[22:12:54] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[22:14:04] <c_wraith> if you're liberal in what you accept, there will be people who aren't strict in what they produce.
[22:14:12] *** Joins: ubert (~Thunderbi@77.119.175.138.wireless.dyn.drei.com)
[22:14:32] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 244 seconds)
[22:15:23] <[exa]> by "liberal in what you accept" I usually read as "choose the subset yourself", not "parse everything"
[22:15:25] * ski . o O ( co- & contra-variance of function type, vs. bounded polymorphism )
[22:16:41] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:17:22] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:18:43] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[22:18:44] <monochrom> Oh! That kind of liberal. Heh.
[22:18:51] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[22:19:14] *** Joins: solomon (~solomon@cpe-76-168-7-139.socal.res.rr.com)
[22:19:26] <dsal> That's not how people did it SMTP.
[22:19:49] <hpc> there are no lessons to be learned from smtp
[22:20:05] <c_wraith> sure there is.  "EHLO" is the best way to spell "Hello".
[22:20:06] <solomon> is it possible to have two `%token` directives in a Happy parser? I want to do the token case matching different in certain contexts.
[22:21:13] <hendursaga> c_wraith: I think Edison's Hallo is better :P
[22:23:23] <hpc> the LTE protocol initiates connections with "NEW PHONE WHO DIS"
[22:24:45] <dsal> It totally would if I worked on that protocol.
[22:25:30] <dsal> I used to do simple text protocols with `:)` to indicate a positive response and `:(` to indicate a negative response.
[22:26:16] *** Quits: Null_A (~null_a@2601:645:8700:2290:6cb0:bf84:22bf:3285) (Remote host closed the connection)
[22:26:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:28:13] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:33:48] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Remote host closed the connection)
[22:33:59] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[22:37:05] *** Joins: Pickchea (~private@user/pickchea)
[22:37:26] *** Quits: max22- (~maxime@2a01cb08833598006074215d6309d66e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[22:37:30] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[22:38:00] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[22:38:08] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[22:41:16] *** Joins: jkaye (~jkaye@2601:281:8300:7530:5bae:6a75:284d:ff5)
[22:42:14] *** Joins: son0p (~ff@181.136.122.143)
[22:42:46] <dsal> amazonka 2.0 is using generic lens which is kind of neat except the error messages are unnecessarily not as good as they should be.  You do `field @"x"` instead of the older thing, but then it's like, "There's no x" 
[22:43:47] <hololeap> is there a way to make an exception hierarchy that is less boilerplatey than what's described in the Control.Exception docs?
[22:45:11] <hololeap> I have NoRootException and AmbiguousRootException, and I just want to be able to catch either one of these but not other exceptions
[22:45:34] <hololeap> or is making a heirarchy for something this simple even a good idea?
[22:46:06] *** Joins: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[22:46:17] <hololeap> maybe polysemy would be a good fit here. I have yet to try that out
[22:46:34] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 252 seconds)
[22:47:13] <dsal> I've seen that in the form of a RootedException with two constructors.
[22:47:33] *** Quits: mikoto-c1 (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Client Quit)
[22:47:47] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[22:49:07] *** Joins: Guest52 (~Guest52@144.164.185.81.rev.sfr.net)
[22:49:12] <hololeap> yeah that's a good idea
[22:49:39] <Guest52> I'm trying to match againt Map.empty but I'm getting "Qualified name in binding posiition" ?
[22:50:02] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[22:50:12] <dsal> hololeap: in particular, I was doing this yesterday or so:  https://hackage.haskell.org/package/postgresql-simple-0.6.4/docs/Database-PostgreSQL-Simple-FromField.html#t:ResultError
[22:50:24] <Guest52> the Map module has to be imported qualified
[22:50:36] <dsal> Guest52: can you show more code?
[22:50:40] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[22:50:46] <dsal> You probably don't want to match against Map.empty anyway.  Do you just mean null?
[22:50:47] <dsal> :t null
[22:50:48] <lambdabot> Foldable t => t a -> Bool
[22:51:12] <hololeap> Map.empty is the same as mempty, actually
[22:51:51] <ski> you could rewrite `foo M.empty = ...; ...' into `foo (null -> True) = ...; ...', using `ViewPatterns'
[22:52:12] <ski> (or `foo m | null m = ...; ...')
[22:53:10] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[22:53:48] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[22:54:05] <hololeap> dsal: I suppose my only complaint with that approach is that you can't specify exactly which exception constructor a function may return at the type level
[22:54:21] <hololeap> it really isn't much of a big deal, though
[22:54:23] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[22:54:33] <c_wraith> Guest52: you can't match against named values anyway - only patterns.
[22:54:49] <c_wraith> Guest52: that's what the error message is trying to tell you, except it focused on a weird detail
[22:55:03] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[22:55:17] <dsal> hololeap: Yeah.  I only cared in a test where the test framework that would catch the exception and return a bool if it matched, so it worked out fine for me.  :)
[22:55:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[22:55:35] *** Quits: andrevdm (~andre@41.76.35.141) (Ping timeout: 264 seconds)
[22:55:40] <Guest52> dsal: I don't really know what to show .. https://paste.tomsmeding.com/JJubAVjX
[22:56:20] <hololeap> doesn't map have a pattern synonym for that?
[22:56:43] <c_wraith> hololeap: no, because there's no good matching pattern synonym for extracting a value
[22:56:45] <Guest52> c_wraith: oh I see, so there is no pattern for Map.empty I suppose? I should simply use say null in an if/then/else as was suggested?
[22:57:02] <c_wraith> Guest52: or use a guard, but yeah
[22:57:07] <hololeap> that's true
[22:57:08] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[22:57:24] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 244 seconds)
[22:57:46] <ski> Guest52 : you could define a pattern synonym ..
[22:58:32] <dsal> I just modified a bunch of code to compile against amazonka 2.  I assume it's perfect.
[23:00:26] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 258 seconds)
[23:01:18] <ski> % pattern Empty :: Foldable t => t a; pattern Empty <- (null -> True)
[23:01:18] <yahb> ski: 
[23:01:21] <ski> % let foo Empty = () in foo M.empty
[23:01:21] <yahb> ski: ()
[23:01:25] <ski> Guest52 ^
[23:01:48] <c_wraith> where's the other direction of that pattern? :P
[23:02:11] <ski> unidirectional, for simplicity :b
[23:02:12] <Guest52> I didn't know you could do that x)
[23:02:19] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:02:29] <ski> which constraints would you like, for bidirectional ?
[23:02:35] <c_wraith> Monoid, probably
[23:02:42] <ski> or `Alternative' ?
[23:03:04] <c_wraith> Hmm, Alternative does match kindedness better
[23:03:10] *** Joins: oxide (~lambda@user/oxide)
[23:03:17] <ski> > empty :: S.Set ()
[23:03:18] <lambdabot>  error:
[23:03:18] <lambdabot>      • No instance for (Alternative S.Set) arising from a use of ‘empty’
[23:03:18] <lambdabot>      • In the expression: empty :: S.Set ()
[23:03:19] <ski> > mempty :: S.Set ()
[23:03:20] <lambdabot>  fromList []
[23:03:25] <c_wraith> but yeah, that
[23:03:34] <c_wraith> A lot more Monoids than Alternatives
[23:04:25] <ski> % pattern Empty :: (Monoid (t a),Foldable t) => t a; pattern Empty <- (null -> True) where Empty = empty
[23:04:25] <yahb> ski: ; <interactive>:131:98: error:; * Could not deduce (Alternative t) arising from a use of `empty'; from the context: (Monoid (t a), Foldable t) bound by the signature for pattern synonym `Empty' at <interactive>:131:52-102; Possible fix: add (Alternative t) to the "required" context of the signature for pattern synonym `Empty'; * In the expression: empty; In an equation for `Emp
[23:04:32] <ski> % pattern Empty :: (Monoid (t a),Foldable t) => t a; pattern Empty <- (null -> True) where Empty = mempty
[23:04:32] <yahb> ski: 
[23:05:10] <ski> % let foo Empty = () in foo (Empty :: M.Map Void Void)
[23:05:10] <yahb> ski: ()
[23:05:41] <c_wraith> I don't really think it's that useful of a pattern, though
[23:05:56] <solomon> can I use mutliple wrappers with `Alex`? Or at that point should I just write my own?
[23:06:00] <c_wraith> Because you can't usefully express a complete pattern set that way
[23:06:50] <c_wraith> Unless...  you wanted to get into horrible type-level programming stuff using GHC 9.2 :P
[23:07:45] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[23:07:52] <solomon> oh nevermind, the `monad` wrapper is basically just a fancier version of `posn` and looks more like an example for how to write your own alex monad wrapper
[23:07:56] <ski> i was wondering if one could have `InsertMin' or something .. but then that'd be a partial function
[23:08:07] <ski> (or non-injective, if you return a `Maybe')
[23:08:35] <solomon> why don't more people use Alex and Happy? All I ever hear about is parser combinators from haskell folks
[23:08:37] <c_wraith> Yeah, that still doesn't let you create complete patterns
[23:09:37] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:09:55] <geekosaur> solomon, alex and happy are kinda targeted toward folks used to lex/yacc from C, whereas parser combinators are a more natural fit for Haskell
[23:10:42] <solomon> @geekosaur i have always used parser combinators but recently ported a parser over to Happy and found it to be way nicer for anything non-trivial. Parser Combinators get out of control really fast in my experience
[23:10:42] <lambdabot> Unknown command, try @list
[23:11:33] <c_wraith> solomon: did you try using parser combinators over a token stream rather than a character stream?  parsing characters is usually where they get unwieldy
[23:11:46] <solomon> yeah i was using a custom lexer with megaparsec
[23:11:49] <jkaye> I've had nothing but great experiences with the various Parsec libraries
[23:12:50] <geekosaur> yeh, it sounds like you may not be using parser combinators especially well. and you can do much the same token parsing with them, by using two different parsers, one to collect characters into tokens and the other to parse the resulting token stream
[23:13:33] <solomon> happy checkes for ambiguity, handles left recursion perfectly, and happy rules are essentially BNF grammars so you can just have a quick glance and understand hte language
[23:13:47] <geekosaur> it's also a lot easier to have multiuple parsers, which can also simplify things considerably
[23:13:54] <jkaye> When you've used combinators, do you define "building blocks" for yourself and compose them together? There's probably a better word for that, but I've seen that mistake before where people just make individual combinators way too large
[23:14:04] <c_wraith> I often do left recursion just fine with parser combinators.
[23:14:14] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 258 seconds)
[23:14:19] <c_wraith> The key is understanding that the parsec design sucks, and not using it. :P
[23:15:10] *** Quits: retro_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 252 seconds)
[23:15:11] <solomon> @jkaye yes i build up my parsers compositionally when using *parsec
[23:15:11] <lambdabot> Unknown command, try @list
[23:15:22] <c_wraith> parsec does have flaws that require you to build your grammar around its limitations
[23:15:55] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:16:21] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 245 seconds)
[23:17:00] <solomon> *shrug*, idk. Maybe i'm just a bad programmer but after using parser combinators on a bunch of projects and Happy for 48 hours, i'm probably not going back to combinators.
[23:17:05] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[23:17:17] <davean> They're not the same
[23:17:32] <davean> They have different domains and purposes
[23:17:38] <davean> well similar purposes
[23:17:41] * geekosaur used yacc for a couple decades and doesn't miss it
[23:17:47] <solomon> well, my domain of interest is writing languages
[23:17:59] <hololeap> % :t lens id (const Identity)
[23:17:59] <yahb> hololeap: Functor f => (a -> f b) -> a -> f (Identity b)
[23:18:25] <hololeap> is there another name for this (replacing Identity with another constructor)
[23:18:42] <hololeap> (I just used Identity here for illustrative purposes)
[23:19:19] <c_wraith> monad morphism, when they're monads.
[23:19:44] <hololeap> well, I meant in lens terms. it seems like it wouldn't need to be as powerful as a lens with id thrown in there
[23:21:11] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[23:21:18] <hololeap> % :t lens id (const Identity) :: Lens s (Identity b) a b
[23:21:18] <yahb> hololeap: ; <interactive>:1:1: error:; * Couldn't match type `a1' with `s1'; Expected: (a1 -> f1 b1) -> s1 -> f1 (Identity b1); Actual: (a1 -> f1 b1) -> a1 -> f1 (Identity b1); `a1' is a rigid type variable bound by; an expression type signature:; forall s1 b1 a1. Lens s1 (Identity b1) a1 b1; at <interactive>:1:29-51; `s1' is a rigid type variable bound by; 
[23:22:10] <c_wraith> that doesn't look very lensy
[23:22:13] <hololeap> % :t lens id (const Identity) :: Lens a (Identity b) a b
[23:22:13] <yahb> hololeap: Functor f => (a -> f b) -> a -> f (Identity b)
[23:22:17] <hololeap> there it is
[23:22:39] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[23:22:53] <c_wraith> I'm pretty sure that doesn't actually satisfy the unchecked requirements on the type of a lens
[23:23:13] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:23:13] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[23:25:12] <c_wraith> yeah, it doesn't.
[23:25:49] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 244 seconds)
[23:26:05] <c_wraith> See the "Why is it a Lens Family" section in http://comonad.com/reader/2012/mirrored-lenses/
[23:26:13] <hololeap> hm, which way would it misbehave?
[23:27:29] <c_wraith> In that particular case, since Identity does nothing, I'm pretty sure you can't actually find a case where it does
[23:27:53] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[23:28:25] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[23:29:30] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:30:28] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[23:30:45] <c_wraith> But since Identity does nothing, you could just use the stuff in Control.Lens.Wrapped to have an Iso for working with adding and removing Identity wrappers
[23:33:06] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[23:33:11] *** Joins: hololeap_ (~hololeap@user/hololeap)
[23:35:10] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[23:35:11] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 264 seconds)
[23:35:34] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[23:36:46] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:36:47] *** Joins: juhp (~juhp@128.106.188.220)
[23:37:32] *** Joins: larryba (~bc8165b6@217.29.117.252)
[23:37:55] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[23:42:10] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[23:43:24] *** Quits: alx741 (~alx741@186.178.108.23) (Ping timeout: 244 seconds)
[23:44:04] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:44:48] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[23:46:08] <shapr> Is there some magical Haskell library that converts CSV files into a normalized database?
[23:46:22] <shapr> I want to split columns with only a few unique values into their own table.
[23:48:33] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[23:50:21] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[23:50:58] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[23:52:46] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[23:53:40] <[exa]> Hm, I'm debugging one problem with cabal on ubuntu, basically `cabal update` on a fresh cabal from ghcup does something and ends up with message: Could not deserialize <repo>/root.json: Malformed: (line 1, column 1): unexpected end of input.
[23:54:37] <[exa]> any hints on where to start searching? (We've pretty much stumped here, cabal nukes & reinstalls have been attempted)
[23:55:46] <maerwald> how do you derive a read instance for a GADT?
[23:55:51] *** Quits: nekroxxiga (~nekroxxig@88.222.185.135) (Quit: Client closed)
[23:55:54] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[23:56:04] *** Joins: alx741 (~alx741@186.178.108.74)
[23:56:11] <jkaye> StandaloneDeriving
[23:56:22] <sclv> did you nuke <repo>/* ?
[23:56:23] <maerwald> tried, causes compile error
[23:56:33] <jkaye> Do you have a gist?
[23:56:45] <jkaye> I've done it in the past
[23:56:53] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:57:12] <maerwald> jkaye: https://gist.github.com/hasufell/95ddd1ca14760e6d3a68e1bc5fd2d7cd
[23:57:17] <geekosaur> I think if the GADT involves an existential, which is most of the point of GADTs, you can't derive a Read instance?
[23:57:24] <maerwald> this is the type
[23:57:26] <maerwald> https://hackage.haskell.org/package/uri-bytestring-0.3.3.1/docs/URI-ByteString.html#t:URIRef
[23:57:27] <[exa]> sclv: we nuked everything (I'm debugging this over a chat too :])
[23:57:32] <geekosaur> and possibly can't define one manually
[23:57:39] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
