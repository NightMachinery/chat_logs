[00:00:20] *** Joins: specbot (~specbot@common-lisp.net)
[00:01:06] <pl> iirc yes
[00:11:07] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[00:22:28] <pl> There's an interesting reverse engineering post about it
[00:25:29] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[00:27:45] *** Joins: tfeb (~tfb@88.98.95.237)
[00:32:05] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[00:41:36] *** Joins: lotuseater (~user@p200300e7871b3f0081bbcfa708479df8.dip0.t-ipconnect.de)
[00:42:00] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 276 seconds)
[00:54:35] *** Joins: hafat (~hafat@95.70.168.45)
[00:54:47] *** Quits: Devon (~user@2601:184:4780:ee50::417) (Ping timeout: 255 seconds)
[00:56:14] *** Joins: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net)
[00:58:01] *** Joins: notzmv (~zmv@user/notzmv)
[00:59:11] *** Joins: Devon (~user@2601:184:4780:ee50::417)
[01:03:22] <lotuseater> good evening from my pi :)
[01:06:07] *** Quits: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:07:00] <phantomics> evening lotuseater
[01:08:41] *** Quits: mariari (~mariari@user/mariari) (Ping timeout: 258 seconds)
[01:11:05] <lisp123> lotuseaster: nicely done :)
[01:12:32] *** Joins: akoana (~ah@user/akoana)
[01:18:16] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:20:06] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:20:12] *** Joins: mariari (~mariari@user/mariari)
[01:21:48] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[01:23:16] <ecraven> does slime have a "call this lisp function with region as a parameter and replace region with the result" builtin?
[01:23:36] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 276 seconds)
[01:24:13] <lisp123> It may, but it should be pretty easy to write regardless
[01:25:03] <lisp123> I haven't played around much with slime's output / result settings, so I might do that as an exercise one day - let me know if you struggle with it
[01:32:18] *** Quits: Devon (~user@2601:184:4780:ee50::417) (Ping timeout: 240 seconds)
[01:40:21] <lotuseater> phantomics: did you get my mail from yesterday?
[01:41:14] <lotuseater> lisp123: spacemacs with slime is running here fine too. this DELL laptop I borrowed temporarily has some hardware issue
[01:41:55] <phantomics> lotuseater: I hadn't looked at that address, just read it
[01:42:46] <phantomics> I've been looking at developing an Emacs mode for April to give a REPL experience similar to the GNU APL mode
[01:43:01] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:43:27] <lisp123> ecraven: Functions you need to use to do what you are after are (slime-eval-defun), (kill-region), (insert ...), slime-eval-print
[01:43:27] <lotuseater> ok no problem
[01:43:54] <phantomics> Apart from that, another longer-range project of mine is aimed at creating a general-purpose Lisp interface, kind of like an IDE
[01:44:01] <lotuseater> phantomics: yes that was also what i thought about. or as i wrote, building with McCLIM some sort of IDE as Dyalog offers
[01:44:14] <phantomics> Were you the one asking about visual interfaces for s-expressions before?
[01:44:28] <lotuseater> no I wasn't
[01:44:46] <lisp123> the first one (slime-eval-defun) you can probably avoid - you can use (buffer-substring-no-properties (region-beginning) (region-end)) to get the form, then pass it through slime-eval-print to get the result, then kill-region to delete the current region and finally insert to insert the result
[01:44:52] <lisp123> that would be the basic idea
[01:45:10] <lotuseater> we talked about eg it can get more performance by eg SIMDs meaning the SBCL intrinsics
[01:46:03] *** Quits: pve (~pve@87-93-194-73.bb.dnainternet.fi) (Quit: leaving)
[01:46:05] <lisp123> lotuseater: nice :-) will be curious to see how much performance you can get out of it (e.g. can you run a CRUD server)
[01:46:13] <lisp123> time for sleep for me though :-) night all
[01:46:54] <phantomics> I build a web-based interface before where I had a window of APL code next to a window containing a Minecraft-style voxel environment generated by the APL
[01:47:03] <lotuseater> lisp123: atm i have NO IDEA how that even works. there is this nice blog article by Paul Khuong about it "for when abstracts too much away" :D
[01:47:18] <lotuseater> or one video from cbaggers
[01:47:45] <lotuseater> hehe minecraft. i know of this sucle voxel engine with opengl
[01:48:15] <lisp123> lotuseater: :D
[01:48:19] *** Quits: lisp123 (~lisp123@45.130.83.200) (Quit: Leaving...)
[01:49:22] <lotuseater> but i wanna dive deep to show everyone else the power CL offers
[01:52:46] <lotuseater> damn now he's gone, I saw i must correct "for when C abstracts too much"
[01:52:50] <phantomics> I tried sucle a bit but it's very much alphaware
[01:53:19] <phantomics> Needs a lot of work to be usable
[01:54:23] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:54:46] <lotuseater> it was beginning of last year i got it running but didn't get how to do stuff. before my system had issues finding the .so files
[01:55:36] *** Quits: gaqwas (~john@dynamic-077-004-084-193.77.4.pool.telefonica.de) (Ping timeout: 272 seconds)
[02:00:57] *** Quits: lotuseater (~user@p200300e7871b3f0081bbcfa708479df8.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[02:01:49] *** Joins: lotuseater (~user@p200300e7871b3f0081bbcfa708479df8.dip0.t-ipconnect.de)
[02:02:16] <lotuseater> firefox on pi is not a good idea. and that was just 1 tab with rocketchat o_O
[02:04:54] <lotuseater> but phantomics I'm happy you're in IRC again
[02:08:07] <phantomics> I'll be around, let me know if you have further thoughts
[02:08:18] <phantomics> I've been doing extensive debugging of April, getting ready for a new release
[02:09:01] <lotuseater> oh wow
[02:09:54] <lotuseater> the most important file is spec.lisp as you said in your long talk, right? i have to watch it again in detail and try out
[02:14:51] <phantomics> Yes, spec.lisp is the core language spec
[02:15:12] <phantomics> grammar.lisp specifies the grammar patterns
[02:15:33] <phantomics> Most of the functions are implemented in library.lisp and aplesque/aplesque.lisp
[02:16:01] <lotuseater> and as i see the parser is with combinators. i wonder if Dyalog does it this way
[02:20:18] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 240 seconds)
[02:23:03] <phantomics> Not sure how they do it, theirs is an interpreter so it works very differently
[02:23:15] <phantomics> I know theirs is very baroque with lots of exceptions to rules
[02:23:50] <lotuseater> ou damn, and surely much old legacy C++ from before c++11
[02:27:46] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Remote host closed the connection)
[02:34:48] *** Joins: hafat (~hafat@95.70.168.45)
[02:35:43] *** Quits: hafat (~hafat@95.70.168.45) (Client Quit)
[02:36:53] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[02:37:14] *** Joins: hafat (~hafat@95.70.168.45)
[02:39:11] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 250 seconds)
[02:39:51] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:49:47] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:05:02] *** Joins: silasfox (~sbv@197.156.117.57)
[03:29:04] *** Quits: frgo (~frgo@p200300deef181d007d15c7aa06e17b64.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:29:23] *** Joins: cjb (~cjb@user/cjb)
[03:29:31] *** Joins: frgo (~frgo@p200300deef181d0049a6f005cb021136.dip0.t-ipconnect.de)
[03:30:34] *** Quits: silasfox (~sbv@197.156.117.57) (Ping timeout: 240 seconds)
[03:33:52] *** Quits: lotuseater (~user@p200300e7871b3f0081bbcfa708479df8.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:35:56] *** Joins: silasfox (~sbv@197.156.117.57)
[03:40:06] *** Quits: peterhil (~peterhil@mobile-access-5d6af6-209.dhcp.inet.fi) (Ping timeout: 258 seconds)
[03:43:42] *** Quits: silasfox (~sbv@197.156.117.57) (Quit: WeeChat 3.2)
[03:53:50] *** Joins: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi)
[04:07:06] *** Quits: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0) (Ping timeout: 240 seconds)
[04:09:58] *** Parts: akoana (~ah@user/akoana) (Leaving)
[04:12:00] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:17:33] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 250 seconds)
[04:18:33] *** Quits: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi) (Ping timeout: 252 seconds)
[04:23:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:39:58] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 265 seconds)
[04:45:04] *** Joins: igemnace (~ian@user/igemnace)
[05:05:00] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[05:05:57] *** Joins: zacts (~zacts@user/zacts)
[05:08:26] *** Joins: zacts17 (~zacts@user/zacts)
[05:09:13] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[05:12:01] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[05:23:25] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[05:28:09] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[05:31:04] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[05:33:03] *** zacts17 is now known as zacts
[05:40:54] <Josh_2> I keep getting a very annoying bug when making HTTP requests using Dex I get an error complaining about writing to closed SSL, https://plaster.tymoon.eu/view/2564#2564 however if I try the request once again it works just fine, five minutes later it will signal that error again..
[05:41:40] *** Joins: notzmv (~zmv@user/notzmv)
[05:44:48] <Josh_2> I am making requests to a hunchentoot server
[05:46:12] <Josh_2> I might just swap over to drakma
[05:49:05] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[05:51:46] <etimmons> Josh_2: Try with `:use-connection-pool nil`. Dexador's connection pool support is broken and unsafe in general.
[05:51:55] <Josh_2> I'll give it a shot
[05:52:35] <Josh_2> Without the pooling is dex actually any faster than Drakma?
[05:52:45] <Josh_2> (not that it really matters)
[05:53:48] <etimmons> No idea. It's also worth noting it's possible to do connection pooling in Drakma, it's just not built in.
[05:54:17] <Josh_2> Interesting
[05:54:19] <etimmons> I tend to only use Dexador on Windows since its story for https on Windows is better
[05:54:24] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[05:54:30] <Josh_2> Yes that seems to have fixed it etimmons tyvm. I will try it again tomorrow
[05:54:40] *** Joins: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0)
[05:54:59] <Josh_2> I should probably swap to drakma, weitz ware seems to be better than fukamachi ware
[05:55:01] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[05:56:39] <etimmons> More maintainable and readable at least (IMO)
[05:57:37] <etimmons> I wish I had the time to integrate winhttp into drakma, then I wouldn't have to worry about dex at all
[05:59:48] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[06:00:08] <Josh_2> I really love hunchentoot, just wish it was a bit faster...
[06:00:39] <Josh_2> Maybe with some call site optimization on SICL it will speed right up
[06:02:06] <etimmons> We can hope!
[06:02:10] <moon-child> the sicl meme precedes it.  I kinda wonder how that happened--it's not like it has a large marketing budget
[06:12:12] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[06:12:37] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[06:13:20] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[06:23:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:25:42] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:29:09] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[06:29:27] *** Joins: derelict (~derelict@user/derelict)
[06:45:47] *** Joins: derelict_ (~derelict@user/derelict)
[06:49:15] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 276 seconds)
[06:59:03] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 258 seconds)
[07:10:42] *** Joins: prxq_ (~quassel@x4dbe09f7.dyn.telefonica.de)
[07:14:38] *** Quits: prxq (~quassel@x4db60e69.dyn.telefonica.de) (Ping timeout: 265 seconds)
[07:23:58] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[07:27:06] *** Joins: derelict (~derelict@user/derelict)
[07:28:15] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:30:06] *** Quits: derelict_ (~derelict@user/derelict) (Ping timeout: 258 seconds)
[07:31:06] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[07:34:18] <beach> Good morning everyone!
[07:34:38] <recordgroovy> Oh yeah, timezones
[07:35:06] <beach> Or UGT.
[07:36:04] <Josh_2> Mornin' beach
[07:37:26] <raeda> Morning, everyone
[07:37:35] <beach> Hello raeda.
[07:37:56] <beach> moon-child: I think it's the published papers.  They have been peer reviewed, so there must be some substance there.
[07:40:26] <pillton> I have a design question which relates to a chronology I have observed many times. An application originally invoked a function f(x). Over time, the function changed to f2(x) = h(x;p) where p is a parameter provided by the user of the application. My question is, how would you structure the application given that f(x) and f2(x) or potentially f3(x) are useful implementations? Would you 1) add a slot to the application state which stores
[07:40:26] <pillton> a closure which closes over the parameter p or 2) implement f(x) using a dynamic variable *VAR* which invokes the generic function (EXTENDABLE-F X *VAR*) or 3) just change f(x) to h(x;p) and provide a default value for p or 4) something else?
[07:40:26] <pillton>  
[07:44:11] <beach> pillton: I think the right answer depends a lot on the details.  But I can tell you that, for SICL, we have developed a style that is close to number 2, but not for the reason you give.  We have a first argument CLIENT that the library does not specialize to, and client code can write methods with specific clients.
[07:44:38] <beach> pillton: Check out Eclector as a good example.
[07:45:53] <beach> This style allows us to provide lots of useful default functionality in the library, while still allowing complete customization for clients who need it.
[07:47:26] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 255 seconds)
[07:47:37] <beach> This style also allows the same library to play different roles in a single Common Lisp image.
[07:49:32] <pillton> beach: Cheers. I'll take a look.
[07:53:06] <moon-child> beach: solid academic work does not a positive public image make
[07:53:08] <moon-child> at least not alone
[07:54:53] <beach> I guess that's true.  But I didn't generalize what Josh_2 said to be a "positive public image".
[07:59:30] <moon-child> I feel that there is a general perception of sicl as somewhat of a holy grail in lisp implentation, and that this perception has more than a little to do with performance
[07:59:48] <moon-child> how many times is it now people have asked whether sicl is ready yet, or when it will be ready? :P
[08:00:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[08:00:47] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[08:12:58] <beach> Oh, that would be unfortunate if so.
[08:15:30] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 240 seconds)
[08:15:32] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b005:fee8:8561:e990:936:5c65)
[08:15:56] <beach> It is true that we have come up with techniques that are likely faster than the analogous technique used in current Common Lisp implementations (like generic dispatch, path replication, call-site optimization), but my main goal is for SICL to provide excellent debugging support.
[08:16:06] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[08:16:26] *** Joins: derelict_ (~derelict@user/derelict)
[08:17:47] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[08:18:41] <beach> In fact, until I came up with the call-site optimization technique, I was convinced that SICL would never be able to compete with the best existing Common Lisp implementations in terms of performance.
[08:19:23] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 255 seconds)
[08:26:44] <beach> Another issue is that, although we are getting closer to generating a native executable for SICL, there is a lot of work left to implement all the optimizations we want, and that is going to take time.
[08:41:15] <phantomics> One key to performance will be allowing the generation of ASM code like SBCL does, I think I asked you about that before
[08:42:10] <beach> That's an easy one.  And it is taken care of.  But that alone won't imply good performance.
[08:42:35] <phantomics> People have complained about the stagnation of CL, but the define-vop in SBCL is a major point of distinction that makes much higher performance possible, it could lead to a division of CL between SBCL and non-SBCL
[08:44:17] <beach> I don't see that.  The Cleavir compiler framework is quite easy to customize, but it doesn't have a define-vop.
[08:47:33] <phantomics> What's the approach to generating ASM in that case?
[08:49:24] <beach> Well, first of all, we don't generate "ASM".  We generate a graph of standard objects representing "instructions" that are closer and closer to native with different passes.  And each pass is defined by a bunch of generic functions that can be customized, so that new "instructions" can be provided.
[08:49:36] *** Quits: Melantha (~pyon@user/pyon) (Quit: WeeChat 3.2)
[08:49:53] *** Joins: Melantha (~pyon@user/pyon)
[08:50:06] <kakuhen> Is there a function like FIND-CLASS that does not signal error if class is not found? I know that you can write (find-class 'name nil), but it does not feel "idiomatic" to me.
[08:50:09] <beach> I haven't studied SBCL internals much, but I suspect define-vop is just an implementation echnique.
[08:50:12] <beach> technique
[08:50:35] <beach> kakuhen: That's the idiom.
[08:51:13] <kakuhen> i guess it's fine if you're aware of the optional arguments accepted by find-class
[08:51:19] <kakuhen> I'll keep using it then
[08:51:42] <beach> Why would a Common Lisp programmer not be aware of that optional argument?
[08:52:08] <beach> kakuhen: It is a slippery slope to start writing code for people who might now only part of the language.
[08:52:18] <kakuhen> I guess, yeah
[08:52:33] <beach> s/now/know/
[09:11:58] <beach> phantomics: SBCL is great, of course, but there are some issues with it as well.  For one thing, the garbage collector is not that great.  And the technique used for generic dispatch was designed at a time when memory access and register operations were roughly equally fast.  For call-site optimization, SBCL addresses a number of special cases, but in general, I don't see any attempt to get good performance out of keyword arguments an
[09:11:58] <beach> such.
[09:15:45] <phantomics> beach: I see, I'm sure there's room for improvement. It seems like SBCL is ahead of other impls in the area of generating custom ASM, which you need for SIMD. That's why things like the sb-simd project are SBCL-only, and why if I add SIMD support to April it may only be available in SBCL. It would be great to see more support for use cases like this
[09:17:33] <phantomics> Also, all CL impls have some shortcomings related to array handling: for instance, you can't have a vector of 8 64-bit ints and create another reference to it as a vector of 64 8-bit ints like you can in C, this would help in some situations
[09:25:56] <beach> Most such "shortcomings" are not about the implementation(s), but about language semantics.  This particular case might be possible, though.
[09:27:16] <kakuhen> a little birdie told me sbcl is getting a new garbage collector and it's apparently going to be great
[09:28:40] <|3b|> i suspect sb-simd being sbcl only is more about # of users than anything else (and ecl has had a simd extension for a while i think)
[09:29:13] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[09:29:39] <|3b|> (and also that "sbcl is fast" so the users that care about performance enough to write simd code are using sbcl)
[09:29:50] <kakuhen> in general sbcl seems to be very good for number crunching
[09:30:41] <kakuhen> there's pretty much only three reasons i use ccl: objective-c bridge, more "efficient" gc, and starts up faster on my computer; it seems inferior to sbcl as far as number crunching and saving heap images goes
[09:31:00] <kakuhen> so for instance, on sbcl you can save a heap image and compress it down quite a bit, with minimal impact on performance; ccl has nothing like this
[09:32:44] *** Quits: derelict_ (~derelict@user/derelict) (Ping timeout: 255 seconds)
[09:32:51] <|3b|> the nibbles library helps with a lot of the situations where you want to read a chunk of memory as various types, though not transparently and you have to start from a vector of 8-bit ints
[09:33:12] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[09:34:30] <|3b|> (and most of the cases where i care about that sort of thing, transparent "8x64-bit <-> 64x8-bit" isn't what i would want anyway, since i usually care about "Nx8-bit <-> some arbitrary layout of mixed types")
[09:37:43] <|3b|> i think ccl has "LAP" for defining things in asm, and according to the docs that supports altivec on ppc, so you could make a portable simd lib that supported that if you happened to still have some PPC somewhere :p
[09:38:12] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:45:12] <kakuhen> i was planning to build a small blackbird workstation, but the power9 chips are on backorder
[09:45:39] <kakuhen> the power architecture is forwards compatible, based on what little i was able to find online
[09:45:57] <kakuhen> that is to say ppc970 assembly should mostly "just work" with power9
[09:48:48] *** Joins: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi)
[10:00:32] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 245 seconds)
[10:04:13] *** Joins: hayley (~theemacss@user/hayley)
[10:05:26] *** Joins: gaqwas (~john@dynamic-095-115-142-224.95.115.pool.telefonica.de)
[10:07:13] <hayley> I did a naughty thing and read the logs. Some thoughts on performance things:
[10:07:25] <beach> kakuhen: That's great news about the SBCL garbage collector.  Do you know any details about it?
[10:08:40] <hayley> |3b|: Right, there's a Lisp assembler in Clozure. Though I don't know if the assembler knows any SIMD instructions on PowerPC or x86-64. (It does, however know about the instructions to do an atomic increment rather than a CAS loop, but that is something else.)
[10:08:54] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[10:09:36] <hayley> beach: SBCL is going to support use of the Memory Pool System. The Boston Lisp Meeting I attended was about it, and I believe I provided a link for the slides...
[10:10:12] <beach> I see.
[10:10:28] <beach> I guess I missed that part.
[10:11:26] <hayley> I forgot exactly how DEFINE-VOP works, but it ends up generating another kind of instruction, which eventually is replaced by a user-defined sequence of instructions. This would not be awfully difficult to do in Cleavir.
[10:12:30] <beach> Don't we already do something similar with primop/AST/HIR/MIR/LIR methods?
[10:12:55] <hayley> We could create a HIR instruction class which eventually is replaced with a sequence of LIR instructions that the user provided -- well, yes, that's pretty close.
[10:15:45] <hayley> But generally I hope that DEFINE-VOP is the last resort for doing SIMD work; rather the compiler should vectorise where possible, and then a programmer could use "intrinsic" functions like in C or SB-SIMD if the compiler cannot vectorise for them.
[10:16:58] <beach> Makes sense.
[10:17:25] <hayley> Such functions are probably more important in Common Lisp, as they can perform type and bounds checks and are generally safe. Although VOPs do require precise type definitions, it is not hard to generate completely broken and unsafe code.
[10:21:16] <hayley> Of course, in an APL compiler like the one phantomics is writing, there are relatively few tight loops that need assembly to be written for them. But otherwise measuring the performance of anything with explicit SIMD instructions tends to be more of a challenge of who memorised the fastest instructions.
[10:22:49] <kakuhen> Is there a function like REMHASH but for association lists?
[10:23:21] <hayley> Can't think of one, but (remove key alist :test #'car) would work.
[10:24:54] <kakuhen> aah I think I found my mistake now
[10:25:15] <kakuhen> I was using remove and comparing the car of each cons cell; but this kept giving me an error that the alist was not the type SEQUENCE
[10:29:15] <kakuhen> ok thanks so much; this solved my issue... not using #'car in particular, but I put in a small lambda that did exactly what I wanted. thanks
[10:30:42] *** Joins: pve (~pve@87-93-157-134.bb.dnainternet.fi)
[10:35:40] *** Joins: ad_absurdum (~ad-absurd@2600:100a:b005:fee8:8561:e990:936:5c65)
[10:38:16] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b005:fee8:8561:e990:936:5c65) (Ping timeout: 256 seconds)
[10:44:17] *** Joins: domovod (~domovod@176.196.122.197)
[10:44:54] *** Joins: igemnace (~ian@user/igemnace)
[10:47:48] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:48:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:49:01] *** Lord_of_Life_ is now known as Lord_of_Life
[11:11:02] *** Quits: totoro (~totoro@user/totoro) (Ping timeout: 272 seconds)
[11:11:52] *** Joins: totoro (~totoro@user/totoro)
[11:14:22] <kakuhen> debugging macros is harddd
[11:14:37] <kakuhen> so I was adding custom conditions and signalling errors, and offering restarts for these errors
[11:14:48] <kakuhen> in some random cases, the restarts simply wouldn't appear, and then the restarts would provide errors
[11:14:58] <kakuhen> after enough macroexpand's I figured out my mistakes and it finally works
[11:15:35] <kakuhen> writing ,'foo accidentally when i meant ',foo really threw me off
[11:17:27] <hayley> It could help to do the work of the macro in a function, and then have the macro expand to something like (call-with-foo (lambda () body ...)), provided that there is enough code that doesn't need to be generated every time.
[11:23:19] *** Joins: selwyn (~selwyn@user/selwyn)
[11:28:42] <beach> Speaking of SIMD, one thing I would like in SICL some day is a set of excellent FFT functions, and those would very likely use SIMD.
[11:28:42] *** Quits: gaqwas (~john@dynamic-095-115-142-224.95.115.pool.telefonica.de) (Ping timeout: 256 seconds)
[11:36:35] *** Joins: shka (~herr@109.231.62.239)
[11:38:25] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[11:41:56] <hayley> I have an implementation of the Cooley-Tukey algorithm written in Petalisp, and Petalisp will likely be an early user of SB-SIMD.
[11:44:38] <beach> But that's a very basic algorithm, right?
[11:44:56] <hayley> Yes, I don't think Petalisp can optimize that out :)
[11:45:58] <beach> I would like to experiment with things like √n radix.
[11:46:35] <beach> That's optimal with respect to arithmetic operations as I recall, but hard to manage because of the space.
[11:57:23] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[11:58:24] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:07:17] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 250 seconds)
[12:15:15] *** Quits: ad_absurdum (~ad-absurd@2600:100a:b005:fee8:8561:e990:936:5c65) (Quit: Leaving)
[12:17:05] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[12:17:29] *** Joins: lad (~lad@user/lad)
[12:18:28] *** Joins: asarch (~asarch@2806:10ae:7:ea36:8b01:efac:f019:c887)
[12:19:57] <asarch> If I have: '(:tacos 10 :beer 12 :pizza 8 … :tacos 7), how could I get the second :taco value?
[12:20:53] <beach> Use POSITION to find the position of the first one.  Then use FIND with a :START position beyond that.
[12:21:53] <mfiano> That requires repeating traversing the intersection. Instead, just walk it until you find it "again". A good job for LOOP
[12:22:25] <beach> Sure, that works too.
[12:24:29] <beach> Or you can use MEMBER to find the first one, and then MEMBER on the CDDR of the value the first MEMBER returned.
[12:25:43] <mfiano> I like that one, and it will work if you ever want to find the second NIL key
[12:26:15] <beach> As in (member :tacos (cddr (member :tacos '(:tacos....))))
[12:26:56] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[12:29:54] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:30:09] <|3b|> there is also GET-PROPERTIES that returns the tail of the list starting at the found property as 3rd value, and could be used similarly to member if there is a risk of the key also being a value
[12:30:19] *** Joins: Th30n (~Th30n@cpe-188-252-157-241.zg5.cable.xnet.hr)
[12:30:29] <beach> Good point.
[12:33:17] * |3b| would probably just LOOP though
[12:34:18] <asarch> Let's say: (defparameter *lista* '(:tacos 1 :pizza 3 :beer 4 :tacos 4 :ramen 4))
[12:34:47] <asarch> (find :tacos *lista* :start (position :tacos *lista*)) → :TACOS
[12:35:35] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[12:37:00] <hayley> Sorry to ask, is this representative of any real data you are playing with? Would it be easier to structure the data we are searching some other way?
[12:37:04] <pjb> asarch: find and member are bad, if you have something that is structured like a plist.
[12:37:28] <pjb> asarch: (member :tacos '(:beer 12 :prefered-meal :tacos :tacos 3)) #| --> (:tacos :tacos 3) |#
[12:37:51] <pjb> asarch: if you have a plist, use loop on by cddr
[12:38:03] <|3b|> for example start from (loop for (k v) on plist by #'cddr when (eql k key) collect v) to get all the values for a key, if the task isn't always "get the value for the second instance of the key"
[12:38:13] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:38:49] <pjb> asarch: but indeed, the point of a-lists and p-lists, is to shadow the following keys, so it may be preferable to structure your data differently if this is a normal thing you need to do.
[12:38:56] <hayley> Say, are we dealing with separate collections of foodstuff, which might be represented as '((:tacos 1 :pizza 3 :beer 4) (:tacos 4 :ramen 4))?
[12:39:42] <pjb> or: (let ((plist '(:ramen 2))) (push 3 (getf plist :tacos)) (push 4 (getf plist :tacos)) plist) #| --> (:tacos (4 3) :ramen 2) |#
[12:39:44] <hayley> Perhaps I shouldn't ask, but it seems like a weird thing to do to retrieve the second value, as pjb said.
[12:40:06] <asarch> Yeah: '((:tacos 1 :pizza 3 :beer 4 :tacos 4 :ramen 4) (:tacos 1 :pizza 3 :beer 4 :tacos 4 :ramen 4) (:tacos 1 :pizza 3 :beer 4 :tacos 4 :ramen 4) …)
[12:40:31] <asarch> And I need the second :tacos from each list
[12:40:52] <hayley> But why do :tacos appear twice in each list?
[12:41:19] <asarch> From a query
[12:41:55] <hayley> What kind of a query is that?
[12:42:08] <asarch> From a PostgreSQL resulting query
[12:42:24] * |3b| would probably add a "clean up the data into an easier to use form" step between "query" and "use", or else fix the sql to generate what you want :)
[12:42:29] <hayley> Okay, still, how do you get two columns with the same name?
[12:43:11] <asarch> SELECT * FROM foo, bar WHERE foo.baz = bar.id ORDER BY foo.id;
[12:43:38] <asarch> There are foo.tacos and bar.tacos
[12:44:25] <asarch> And each tacos means something different
[12:45:07] <asarch> However, when I parse the query, I get it as list in that form: (:tacos 1 :pizza 3 :beer 4 :tacos 4 :ramen 4)
[12:47:04] <asarch> (This is a very simplified form of the resulting query)
[12:47:12] <hayley> Well, I'm not sure if I'd count on the order the columns appear to start with. Guess there is a defined order, but foo.tacos coming first in the list and bar.tacos coming later is too subtle.
[12:48:18] <hayley> (Though it is also weird for the database library to strip off the foo. and bar. off the column names in my opinion. And does your database care if you use a product then a WHERE constraint rather than JOIN?)
[12:50:09] <hayley> Again, sorry for the hard questions, but having to use such a list just sounds like a bad idea to start with.
[12:50:29] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[12:52:03] <asarch> Oh :-(
[12:52:57] <pve> asarch: you should probably use result-type :lists instead of :plists, and examine the second return value to figure out what is where
[12:53:50] <pve> or rewrite the query so you get ... bar.tacos as tacos2 ...
[12:54:29] <hayley> I mean, the database would not let you make columns with duplicate names. So it is weird that the database library ends up producing duplicate names.
[12:54:47] <pve> they're from different tables
[12:56:15] <pve> the plist result type isn't really suitable for joins
[12:57:11] <asarch> Or, can you convert a plist into an array? If yes, how?
[12:57:23] <pjb> you can use "AS" to rename columns in the output to ensure you get unique names.
[12:57:24] <pve> asarch: are you using postmodern?
[12:58:13] <pjb> SELECT foo.tacos as footacos bar.tacos as bartacos foo.pizza foo.beer bar.ramen  FROM foo, bar WHERE foo.baz = bar.id ORDER BY foo.id;
[12:58:23] <pjb> + the commas of course.
[12:58:32] <asarch> CL-DBI
[12:58:37] <pve> oh
[12:58:56] <pve> does it always return plists? there's no way to change that?
[13:00:12] <pve> even "select *, bar.tacos as tacos2 ... " will work if you're lazy
[13:02:26] <asarch> Or even parse its output as a JSON object
[13:04:21] <asarch> No, it won't work. The second :tacos will overwrite the first one
[13:05:24] <pve> asarch: but you're calling it "tacos2"
[13:06:18] <hayley> Still, doesn't the database name your columns foo.tacos, bar.tacos, foo.baz, foo.id, etc?
[13:07:31] <hayley> I pulled up sqlite3 and apparently not. Go figure.
[13:15:46] *** Joins: tfb (~tfb@88.98.95.237)
[13:18:08] <asarch> Well, it seems that I will have to do two separate queries and then join each result in a new plist
[13:20:34] <hayley> sigh
[13:23:38] <pve> asarch: doesn't using "AS" work?
[13:26:22] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[13:27:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:34:47] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[13:35:32] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[13:35:33] *** Joins: lotuseater (~user@p200300e7871b3f0034ed9e810c3724ce.dip0.t-ipconnect.de)
[13:43:38] *** Joins: igemnace (~ian@user/igemnace)
[14:00:22] <asarch> Yeah, it works: '(:tacos 1 :pizza 3 :beer 4 :tacos 4 :ramen 4 :taquitos 1 :tacotes 4)
[14:00:47] <asarch> :taquitos as the first :tacos and :tacotes as the second one
[14:01:20] <lotuseater> nice asarch
[14:03:45] <asarch> Now I understand why Lispers hate SQL language
[14:04:25] <hayley> No, it's not really because of that.
[14:06:14] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[14:06:18] <asarch> Oh
[14:06:46] <moon-child> doesn't everybody hate sql?
[14:07:04] <hayley> https://plover.com/~mjd/misc/hbaker-archive/letters/CACM-RelationalDatabases.html provides some reasons, which I would summarise as that 1. the relational theory didn't come first and 2. joins are messier than pointers at times.
[14:08:02] <hayley> Personally, I prefer that good programs are based around protocols of functions, whereas SQL has no such concept and is only concerned with storing homogenous rows. This is called the "object-relational impedance mismatch". Some people use it to claim object-oriented programming is bad, but I use it to claim that relational databases are bad.
[14:09:05] <pjb> sql has a sound mathematical foundation.
[14:09:07] <pjb> haskell has a sound mathematical foundation.
[14:09:33] <pjb> lisp has not. lambda was just a keyword, when he introduced it, JMC didn't understand lambda-calculus.
[14:09:56] <hayley> That doesn't change that doing things in SQL or Haskell can get very hairy if you're not doing "the right things".
[14:10:01] <pjb> draw your conclusions.
[14:10:09] * moon-child leaps into the domain-specificity corner, because no one is there
[14:10:27] <moon-child> ooh, pjb what do you mean by 'sound'?
[14:10:28] <hayley> Well, sure, but I never seem to be in that domain.
[14:10:59] <moon-child> s/ooh//j
[14:11:07] <moon-child> g, god, I can't type today
[14:12:41] <hayley> I wonder if https://counterexamples.org/ has any bugs in Haskell. Some Haskell examples, sure, but I can't remember if there are bugs.
[14:14:16] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[14:19:02] <pjb> moon-child: sql a une base mathématique solide. haskell a une base mathématique solide.
[14:20:11] <pjb> The point is that because you're have a good mathematical model doesn't mean that you have a practical system.  The universe is still messy.
[14:22:04] <tfb> pjb: and if you try and program in a version of lambda calculus which *does* make sense mathematically, but leave out all the stuff you actually need, you rapidly find out how little the good mathematical underpinnings actually help you
[14:23:20] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[14:23:46] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:23:53] <moon-child> pjb: that doesn't explain anything.  What does it _mean_ to have a solid mathematical base?  I can model lisp, c, sql, haskell... in a mathematical fashion.  So what distinction are you trying to draw?
[14:26:25] *** Quits: Th30n (~Th30n@cpe-188-252-157-241.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[14:27:05] * hayley assumes no one wants a HIR abstract machine.
[14:27:10] *** Quits: lad (~lad@user/lad) (Ping timeout: 258 seconds)
[14:27:12] <hayley> s/no one/no one else/
[14:28:32] *** Joins: tfeb (~tfb@88.98.95.237)
[14:31:09] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 250 seconds)
[14:47:06] *** Joins: lisp123 (~user@80.227.170.170)
[14:47:30] <lotuseater> nice maybe I can get a Lisp job in Bremen
[14:48:38] <lotuseater> pjb: but you can seriously rely on stuff it provides (when done correctly)
[14:49:24] <tfeb> moon-child: it should mean among other things there is a consistent model which would le you predict the behaviour of a program (modulo halting problem etc)
[14:49:42] <hayley> Is a mathematical specification any better than any other specification in this regard?
[14:50:00] <tfeb> which I would be extraordinarily surprised if could exist for CL
[14:50:42] * tfeb realises now he missed some of this due to disconnecting, sorry
[14:50:52] *** tfeb is now known as tfb
[14:50:56] *** Quits: asarch (~asarch@2806:10ae:7:ea36:8b01:efac:f019:c887) (Quit: Leaving)
[14:51:05] <hayley> https://plover.com/~mjd/misc/hbaker-archive/MetaCircular.html "we believe that a carefully fashioned system of metacircular definitions can achieve most of the precision of denotational semantics."
[14:51:17] <kakuhen> suppose I have a restart-case that skips executing some pure function entirely, but I do not want to abort evaluation; does it matter if I make this restart return t or nil?
[14:52:39] <kakuhen> basically, I have a macro that can add a key to an alist, but I want to avoid duplicate keys in the alist, so I signal a duplicate-key condition when someone attempts to insert a key that already exists
[14:52:51] <hayley> From memory, the RESTART-CASE evaluates to whatever the last form in the restart clause is. So it should return something that makes sense for the operation.
[14:53:06] <kakuhen> there are two restarts I have: one just deletes the key and its values entirely, and another one just "does nothing" and it's intended for when the user wants to cancel redefining the key
[14:53:59] <kakuhen> oh and to clarify, the former restart deletes the already existing key and then inserts what would've been a duplicate key
[14:54:08] <hayley> Right. So the latter might return the original alist.
[14:55:14] <kakuhen> oh wow I never thought of that, thanks
[14:55:27] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[14:55:48] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:55:48] <kakuhen> if i want to return t, it's probably more meaningful to return the original alist anyway
[14:57:00] <hayley> Well, if you have a pure function, then you are going to return the modified alist, right?
[14:57:12] <pl> I wonder if someone documented any sort of issue/wish list for drakma api
[15:00:56] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[15:07:30] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[15:08:07] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[15:09:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:15:26] *** Joins: scymtym (~user@p200300c09f028556229b1a50c5feb482.dip0.t-ipconnect.de)
[15:21:29] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:25:21] <lisp123> If i want to learn to write more efficient search & loop algorithms in Lisp, am I better off learning SICP or an algorithm book (e.g. the design and analysis of computer programs - which was recommended here and I'm starting to read)
[15:25:51] <lisp123> Both require reasonable investments of time
[15:26:24] <lisp123> I assume an algorithm book is better, but perhaps SICP will make me better and is more applicable to Lisp?
[15:29:02] *** Quits: frgo (~frgo@p200300deef181d0049a6f005cb021136.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:29:30] *** Joins: frgo (~frgo@p200300deef181d0049a6f005cb021136.dip0.t-ipconnect.de)
[15:31:35] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:34:07] *** Joins: random-nick (~random-ni@87.116.182.181)
[15:39:29] *** Quits: scymtym (~user@p200300c09f028556229b1a50c5feb482.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[15:44:03] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[15:47:17] <lisp123> OK - chapter 1 of 'The Design and Analysis of Computer Algorithms' was pretty dry and felt too out of the way, but chapter 2 is looking _good_ and very useful. So I will do this book first and not SICP
[15:48:48] <pjb> moon-child: Well, basically what it means is that the "sound mathematical models" are simplistic, while the real-life mathematical models are too complex to handle efficiently or cost-effectively.  Yes, indeed, you could formalize complex systems.  But it's difficult, and once you've integrated into the mathemacal model all the complexities, you're not any more advanced (you have to switch to physics, biology, or "computer science").
[15:49:51] <hayley> I'd say I just drew up a state machine for what I considered to be a subtle module, but it is fairly simple on paper.
[15:51:26] <pjb> lisp123: I'd say an algorithm book.
[15:56:41] <lisp123> pjb: thanks :)
[16:11:22] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[16:16:15] <etimmons> Xach: when is the next QL release? It looks like we're going to release ASDF/UIOP v3.3.6 to prevent that error you found from happening in most circumstances
[16:20:20] <pl> lisp123: SICP is more of how to compute
[16:26:43] <pl> for writing efficient algorithm, in lisp or otherwise, an algorithm book and detailed specs for implementation and language (CLHS/WSCL) are the go to
[16:27:05] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[16:27:22] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[16:41:08] <lisp123> pl: thanks for that
[16:53:18] *** Joins: tfeb (~tfb@88.98.95.237)
[16:55:10] *** Parts: lisp123 (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[17:10:50] *** Joins: nirved (~nirved@gateway/tor-sasl/nirved)
[17:10:54] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[17:15:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:21:44] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[17:22:01] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:24:04] <Xach> etimmons: this week
[17:24:23] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[17:31:32] *** Joins: Bike (~Glossina@71.69.170.70)
[17:31:32] *** ChanServ sets mode: +o Bike
[17:37:07] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:37:29] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:39:35] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[17:41:17] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[17:49:52] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[17:50:01] *** Joins: raeda (~raeda@72.49.219.33)
[17:51:31] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[18:10:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:13:20] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[18:13:54] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:21:50] *** Joins: domovod (~domovod@176.196.122.197)
[18:23:20] <Josh_2> 'ello
[18:26:35] <nij-> Hello :) Morning there
[18:26:47] *** Quits: nirved (~nirved@gateway/tor-sasl/nirved) (Quit: Leaving)
[18:37:12] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[18:39:44] *** Joins: zacts (~zacts@user/zacts)
[18:40:48] <lotuseater> hi nij-
[18:43:27] <nij-> :)
[18:47:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:50:04] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[18:50:18] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[18:50:38] <jcowan> This Lisper doesn't hate SQL because it's relational, but because it is not relational enough, being full of gaps, unorthogonal, and plagued with things that look relational but make no sense.
[18:57:19] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:13:12] *** Joins: selwyn (~selwyn@user/selwyn)
[19:13:53] *** Joins: ullbeking (sid5364@2001:67c:2f08:3::14f4)
[19:14:07] *** Joins: zacts (~zacts@user/zacts)
[19:15:27] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[19:16:29] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[19:17:15] *** Joins: admich (~user@ip-159-119.sn-213-198.clouditalia.com)
[19:19:19] <aeth> SQL is kind of like Lisp actually
[19:19:38] <aeth> SQL is relational... with a bunch of compromises for real-world performance and usability
[19:20:02] <aeth> Lisp is functional programming with similar compromises, to the point where many don't even call it FP anymore
[19:20:40] <aeth> (and then Common Lisp in particular takes Lisp into a fully multiparadigm design)
[19:21:34] *** Quits: admich (~user@ip-159-119.sn-213-198.clouditalia.com) (Ping timeout: 258 seconds)
[19:29:02] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[19:42:02] <jcowan> Yes?  What's so efficient about the result of SELECT SUM(price) where product_name = "nonexistent"?
[19:42:21] <jcowan> What would you naturally expect the sum of zero rows to be?
[19:44:19] <jackdaniel> I may be naive, but if I buy 0 goods I expect to pay 0 coins
[19:44:44] <jackdaniel> alternatively NULL as no payment occurs
[19:46:10] * jackdaniel gives in to wondering whether the cave empty of dragons is the same the cave empty of knights
[19:56:06] <jcowan> NULL is SQL-correct, but I think clearly 0 is right.
[19:57:00] <jcowan> Admittedly you probably need to take further steps before sending an invoice to the customer demanding a payment of $0.00.
[19:57:11] *** Joins: akoana (~ah@user/akoana)
[19:57:40] <jcowan> That's a small thng, but there are a *lot* of small things that add up.
[20:00:23] <raeda> Taking further steps is still a tall order for most places. I got a bill for $0 a few days ago :p
[20:06:45] *** Joins: attila_lendvai (~alendvai@1F2EF87D.nat.pool.telekom.hu)
[20:07:49] *** Joins: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it)
[20:07:55] <lotuseater> raeda: the only amount which is the same in all currencies :D
[20:08:49] <lotuseater> did anyone of you once worked (as job) with AutoLISP? any recommendations?
[20:13:08] *** Joins: hafat (~hafat@95.70.168.45)
[20:23:15] *** Quits: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi) (Ping timeout: 252 seconds)
[20:23:32] *** Quits: hafat (~hafat@95.70.168.45) (Quit: Leaving)
[20:26:01] <jcowan> I'd actually rather have a recurring bill for $0 than wonder if the bill got lost in the (e)mail.
[20:27:18] * pl regularly has a bill where the amount I'd negative and gets lower every month 
[20:27:26] <pl> s/I'd/is/
[20:27:30] *** prxq_ is now known as prxq
[20:37:07] *** Joins: hafat (~hafat@95.70.168.45)
[20:42:05] <pjb> pl: so they send you more and more money?
[20:43:56] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[20:47:11] <lotuseater> maybe they got injected with SEND MORE MONEY
[20:49:11] *** Joins: srhm (~ascii@user/srhm)
[21:01:57] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[21:03:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:07:25] *** Joins: tfeb (~tfb@88.98.95.237)
[21:14:39] *** Joins: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi)
[21:21:30] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[21:21:45] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[21:22:04] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[21:24:14] <nij-> Any updates on an issue brought up roughly 3 months ago, on liberating CLHS?
[21:25:31] <jackdaniel> a rebellion commenced, the war has been wrought upon the lisp community
[21:26:04] <jackdaniel> right now the eastern front is stuck, however we make some small progress on the center, under the proud banner "clhs liberation front"
[21:26:43] * jackdaniel gives flyers left and right
[21:27:17] <lotuseater> I like peace in the Land of Lisp.
[21:29:40] <jackdaniel> nij-: clhs won't be "liberated"; its clearly stated by the copyright holder; scymtym started a repository for wscl here: https://github.com/s-expressionists/wscl and new clarifications happen from time to time
[21:29:48] <jackdaniel> it is based on the final specification draft (not clhs)
[21:32:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[21:37:52] <nij-> I like the github account "s-expressionists", btw.
[21:39:28] <nij-> jackdaniel: By liberating clhs I mean to work on DPANS (https://github.com/xach/dpans) and create "another" CLHS.
[21:40:07] <jackdaniel> clhs is a proper noun, isn't it?
[21:40:35] <Josh_2> nij-: I think there have been many attempts to create a new hyperspec, or a complimentary one at least
[21:40:49] <nij-> Oh wow, seems like some movement has been 'ROLLING! https://github.com/s-expressionists/dpans
[21:42:19] <nij-> Does scymtym hang out in #commonlisp? (https://github.com/scymtym)
[21:42:30] <jackdaniel> yes
[21:43:04] *** Joins: lad (~lad@user/lad)
[21:43:19] <jackdaniel> mind that other wscl contributors (like beach and Bike) are present too
[21:46:18] *** Quits: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi) (Ping timeout: 252 seconds)
[21:48:59] *** Joins: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi)
[21:49:29] <phantomics> Hi, a question: is there a way to find out if a symbol is lexically bound? For example: (let ((abc 1)) (lex-boundp 'abc)) => T
[21:49:55] <phantomics> Is there something that can do the job of lex-boundp?
[21:50:10] <Bike> No. I mean, whether it's bound should be obvious from the source code. What are you trying to do? Something in a macro?
[21:51:27] <jackdaniel> phantomics: lexical variables may be optimized away by the compiler, so there is not even a guarantee that they will be stored (unportably) in the environment
[21:51:36] <phantomics> Yes, a macro that creates functions that can be used to set a variable value outside of a given scope, this is for output from the April compiler so there are constraints that I wouldn't normally have
[21:52:23] <jackdaniel> the usual way to do that is to give names to the macro yourself
[21:52:56] <jackdaniel> i.e (let ((a 3)) (my-macro (a :extrap t) woosh))
[21:53:28] <jackdaniel> (but during macroexpansion time lexical variables should be accessible in the env)
[21:53:50] <jackdaniel> another way to approach that would be incorporating a code walker
[21:54:05] <phantomics> Ok, I'll see about that
[21:54:23] <phantomics> The code walker is a last resort solution due to the added complexity
[21:54:46] <jackdaniel> yes, and code walkers easily break (because of impementation-specific special forms)
[21:55:54] <phantomics> In APL you have the ability to either create a local alias of an external variable to a function (changeable without side-effects) or to write a side-effecting statement that changes a variable external to a function, I'm figuring out how to support both of these cases
[21:56:06] <jackdaniel> phantomics: i.e try this: (defmacro foobar (&body body &environment env) (print env))
[21:56:16] <jackdaniel> (defun xxx (my-fancy-variable) (foobar))
[21:56:32] <jackdaniel> you will probably see some elaborate implementation-specific structure
[21:57:21] <phantomics> Interesting
[21:57:39] <jackdaniel> standard-wise environment is an opaque token passed between macros
[21:57:58] <jackdaniel> (unfortunately:)
[21:58:43] <phantomics> Right, can't count on any specific structure being present in there
[22:00:11] *** Joins: Alfr (~Alfr@user/alfr)
[22:18:40] *** Quits: peterhil (~peterhil@mobile-access-b04815-181.dhcp.inet.fi) (Ping timeout: 256 seconds)
[22:21:05] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[22:23:58] *** Joins: tfeb (~tfb@88.98.95.237)
[22:27:12] *** Joins: gaqwas (~john@dynamic-095-115-142-224.95.115.pool.telefonica.de)
[22:37:46] *** Quits: pve (~pve@87-93-157-134.bb.dnainternet.fi) (Quit: leaving)
[22:39:25] *** Joins: pve (~pve@87-93-157-134.bb.dnainternet.fi)
[22:44:16] *** Quits: attila_lendvai (~alendvai@1F2EF87D.nat.pool.telekom.hu) (Read error: Connection reset by peer)
[22:44:58] *** Joins: attila_lendvai (~alendvai@1F2EF87D.nat.pool.telekom.hu)
[23:17:22] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:20:20] *** Joins: zacts (~zacts@user/zacts)
[23:31:29] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[23:36:52] *** Quits: pve (~pve@87-93-157-134.bb.dnainternet.fi) (Ping timeout: 258 seconds)
[23:38:45] <nij-> (FYI: quickdocs is back https://quickdocs.org/)
[23:44:59] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:46:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
