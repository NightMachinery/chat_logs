[00:00:05] <hayley> Hopefully I made aeth famous. Else, not as productive as expected, but still fine.
[00:00:41] <gilberth> You could pass file descriptors over sockets, couldn't you?
[00:01:16] <hayley> I guess?
[00:02:11] <|3b|> you can use  #!/usr/bin/env -S sbcl --script
[00:02:35] <hayley> Though I used my Google account with Zoom, and that has the name "Name Here", and I couldn't change it without reconnecting for some reason. Embarrassing first contact with Cliff.
[00:02:58] <gilberth> Terrific! Another secret option. Why the --script? It's superfluous.
[00:02:59] <|3b|> no debugger, non-zero exit on error
[00:03:09] <hayley> Usually I could change the nick in sessions with my last university. idk
[00:03:30] <|3b|> --script adds the #! reader and disables debugger and exits after processing file
[00:04:00] <gilberth> It could always be present. It's superfluous.
[00:04:28] <|3b|> #! maybe could, but i'd expect debugger and repl by default
[00:04:45] <gilberth> I don't. It's a script, isn't it?
[00:04:57] <|3b|> how does sbcl know that?
[00:05:10] <random-nick> by reading the shebang, presumably
[00:05:21] <gilberth> And adding well hidden secret options is not a good idea. What if, I want to use CCL?
[00:05:49] <|3b|> --script is in manual, and in --help output
[00:06:08] <|3b|> if you want to use ccl, ask their4 docs what the equivalent is, or use roswell :)
[00:06:16] <gilberth> random-nick: You could always pass arguments with environment variables. say SBCL_I_REALLY_WANT_A_DEBUGGER=T myscript
[00:06:22] <hayley> Was funny that ranting about build systems was popular today.
[00:06:23] <random-nick> another issue with --script I experienced is that it doesn't (purposefully) load the init files
[00:06:24] <|3b|> or convince someone to write a new CL spec that assumes it is unix hosted
[00:06:48] <random-nick> so you have to paste the quicklisp initialisation code and whatever else you need into the script
[00:07:12] <hayley> Could have mentioned my time with university, VS Code and """Maven""". But I didn't.
[00:07:20] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[00:07:28] * |3b| might argue that things that need QL aren't "scripts" anymore :p
[00:07:29] <gilberth> |3b|: My point was: I don't want secret options there. And it could be "#! /usr/bin/env lisp" nothing more. You could then arrange for your favorite Lisp.
[00:07:32] <hayley> Alternately, the ASDF situation.
[00:07:43] <|3b|> gilberth: right, roswell tries to be that
[00:07:48] <gilberth> Since when does SBCL have a --help?
[00:08:49] <|3b|> since 2003?
[00:08:53] <gilberth> It says "usage: run-sbcl.sh options". Nothing more.
[00:09:16] <gilberth> It doesn't even look at argv[0], it seems.
[00:09:17] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[00:09:32] <|3b|> well, that's run-sbcl.sh having it's own --help which apparently isn't very good :p
[00:10:29] <|3b|> here, run-sbcl.sh also says "Runs SBCL from the build directory or binary tarball without need for
[00:10:31] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[00:10:39] <|3b|> installation. Except for --help, accepts all the same command-line options as SBCL does."
[00:10:55] <|3b|> which isn't much better
[00:11:13] <|3b|> but does somewhat indicate it is eating the --help :/
[00:13:09] <|3b|> from spec under Sharpsign macro character: "!              undefined*" and "The combinations marked by an asterisk (*) are explicitly reserved to the user. No conforming implementation defines them."
[00:13:23] <|3b|> so defining #! reader by default would be non-conforming
[00:14:08] <random-nick> wouldn't need to be a reader macro, since you'll only except it to be at the beginning
[00:14:29] <gilberth> You don't need to define #! as a reader macro.
[00:14:46] <|3b|> yeah, there might be some valid argument for defining that as a file type or something with special parsing, but you'll have to argue that with the devs
[00:14:57] <|3b|> (who will probably just say "use --script" :p ) 
[00:15:19] <gilberth> Yeah, I never liked SBCL.
[00:15:33] <random-nick> and even if you want to load some code using #! and launch into the repl, the code would have to have some form at the beginning in order to enable such reader macro
[00:15:47] <|3b|> i don't think sbcl accepts a single filename by itself on the command line either
[00:15:54] <|3b|> you need --load or --script
[00:16:23] <random-nick> so breaking conforming code would be extremely hard (or impossible, depending on how you interpret the definition of conforming code)
[00:16:56] <|3b|> possibly they would accept patches to make sbcl work directly as #! sbcl
[00:17:14] <gilberth> The whole run-sbcl.sh script is silly. CCL can do fine without. As does CMUCL. By magic the logical hostnames are setup right, no matter where the executable is.
[00:18:01] <random-nick> on my system /bin/sbcl is an elf binary
[00:18:14] <White_Flame> --script sucks because you don't have access to quicklisp by default
[00:18:20] <gilberth> I could just untar CCL anywhere and put a symlink to its executable into my ~/bin
[00:19:01] <selwyn> https://www.youtube.com/watch?v=SumdIkmSNog
[00:19:02] -ixelp- Lum the Invader Girl, part 1, BBC dub of Urusei Yatsura うる星やつら - YouTube
[00:20:02] <gilberth> random-nick: ls -l /bin/sbcl => /bin/sbcl: No such file or directory. And it should be /usr/bin not /bin. And no, I don't have a /usr/bin/sbcl either.
[00:20:22] * |3b| thinks sbcl installs to /usr/local by default
[00:20:35] <|3b|> if installed, you run the executable directly though
[00:20:40] <random-nick> oh, I just have my distro's sbcl package installed
[00:21:39] <gilberth> White_Flame: That is another issue with Lisp. Why wouldn't REQUIRE be suffice? It's there, it's standard and it's either your or the implementations buisness to make it work.
[00:22:13] <|3b|> and i think the main reason sbcl needs run-sbcl.sh is that it assumes it will be installed so doesn't bother to organize compiler output into a directly usable form
[00:22:26] <gilberth> random-nick: I like to compile from sources and I also like to keep multiple versions around.
[00:22:35] <|3b|> so run-sbcl-sh is there to adapt to the form it outputs if you don't want to install
[00:22:44] <White_Flame> right, it's totally unnecessary
[00:22:53] <White_Flame> I have my sbcl installed into ~/bin
[00:24:47] <hayley> Hm, another idea for SIMDing would be to run a few loop iterations with scalar code, then jump into SIMD. But I still suspect keeping feedback will give better results.
[00:25:34] <Alfr> gilberth, for that you'd only need to point SBCL_HOME to the right place where the sbcl.core file (and the contribs) reside.
[00:26:01] <hayley> And I mentioned "[^"]" as an example of such an interesting loop, so it is useful for scanning, mind you.
[00:27:00] <gilberth> Alfr: "Only"? What if, I want to run another version of SBCL? Do I need to change SBCL_HOME?
[00:27:33] * |3b| suspects if you configure asdf correctly you could (require 'asdf) (require 'whatever) if it is already installed
[00:28:28] <gilberth> Everyone else is happy with being put somewhere, but the magnificent sbcl needs an SBCL_HOME variable set?
[00:29:03] <|3b|> no, it needs it's files in a specific configuration
[00:29:12] <Alfr> gilberth, yes, you would need to do that. Otoh there'll only be ever one program used called sbcl for a given PATH.
[00:29:17] *** Joins: djuber (~user@65.79.128.64)
[00:29:19] <gilberth> |3b|: I have set up my Lisp that way. REQUIRE just works. It doesn't fix ASDF though, it still is doing very funny things.
[00:30:13] <|3b|> if you want multiple sbcls, sh ./install.sh --prefix=/whatever/sbcl-123 then run /whatever/sbcl-123/sbcl
[00:30:46] <|3b|> sorry, /whatever/sbcl-123/bin/sbcl
[00:31:10] <gilberth> Alfr: Indeed. I have seven versions of GCC installed each in its own directory below /opt/gcc-<version> once I have that in PATH, it just works. SBCL should be like that.
[00:31:19] <|3b|> will put a bin/ lib/ and share/ under /whatever/sbcl-123/
[00:31:26] <|3b|> it is
[00:31:35] <gilberth> Wasn't it mentioned that SBCL_HOME must be set?
[00:31:46] <|3b|> well, except add bin/ when adding to path
[00:32:02] <|3b|> SBCL_HOME used to be required, but is optional now
[00:32:19] <gilberth> Progress!
[00:32:29] <|3b|> they do listen to users sometimes :)
[00:32:53] <Alfr> gilberth, if the required files are at an unexpected location, e.g. you moved the binary and want to use the supporting files from the build directory.
[00:33:10] <|3b|> i suspect if you could show evidence that most other implementations work directly as #!whatever with no options they would at least consider making sbcl do so as well
[00:33:11] <pl> ck_: what kind of bothering is being done to you with pitchforks? 
[00:33:21] <gilberth> CMUCL was fine. So that was regression.
[00:33:26] <|3b|> though still might not put it ahead of other things they are working on
[00:33:35] <Alfr> gilberth, not sure about running it directly from the build dir though.
[00:33:59] <|3b|> yeah, sbcl hasn't been cmucl for a while, for good and bad
[00:34:49] <gilberth> Alfr: Who ever build CMUCL? ;-)
[00:35:19] <gilberth> You usually did that by emailing the right person and ask for a build.
[00:35:44] <pl> One of my favourite idle pondering is "how to make cmucl purely from source with no cmucl binary available" 
[00:35:50] <Alfr> gilberth, nah, I as referring to running a freshly built sbcl.
[00:36:40] <gilberth> Alfr: Even a freshly downloaded sbcl is like that. I usually don't build sbcl myself, but grab a binary.
[00:36:55] <pl> I have non trivial suspicion that building CMUCL without having a CMUCL build might involve "first you need a PDP-10..." 
[00:36:56] * |3b| thought the joke is that sbcl is the answer to "who does / how to build cmucl" :p
[00:38:17] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[00:38:28] <gilberth> pl: I was excited as CMUCL was ported to Linux. Problem: No binary available and you needed a FreeBSD to cross build the Linux binary. Problem 2: It took a day to do so.
[00:38:29] * |3b| wonders if cmucl version control history is complete enough to go all the way back, and/or if some steps would require manual intervention that has been forgotten
[00:39:12] * gilberth notes that PDP-10 emulators are available.
[00:39:25] <pl> Well, I suspect the very oldest code might be compilable with MACLISP, which we have 
[00:39:50] <pl> It might also be compilable with Franz Lisp, which we also have, but by accident more than on purpose 
[00:40:33] <pl> gilberth: quite good ones, even with turn key ITS 
[00:40:43] <gilberth> Yes, I notices while browsing UNIX sources. Would be fun to Franz Lisp working again.
[00:41:07] <pl> It's working and been updated to run on recent systems, I believe 
[00:41:24] <gilberth> Hey, that's kewl.
[00:41:28] <pl> Well, the last public source release at least 
[00:42:51] <pl> But we have reasonable set of PDP-10 MACLISP versions and usable (but possibly not last) Multics MACLISP 
[00:43:35] <pl> PDP-10 one works olfor ITS and TOPS-20 never tried on TOPS-10 
[00:43:44] <gilberth> I never tried. I am somehow stuck with the CADR emulator.
[00:46:35] <pl> gilberth: a good starting point is the turnkey setup from https://github.com/PDP-10/its
[00:46:36] -ixelp- GitHub - PDP-10/its: Incompatible Timesharing System
[00:47:51] <gilberth> pl: Thanks, I'll find your link in the logs, when I feel like doing some archeology.
[00:49:44] <pl> If you build with pdp10-ka, you'll get the most features as related to MIT-AI system 
[00:50:08] <pl> (there are multiple emulator options available, all buildable with single makefile) 
[00:50:46] <pl> A public access Multics system is also available at ban.ai 
[00:51:32] <pl> N.B. effectively every Multics site had MACLISP installed, to chagrin of PL/I purists 
[00:51:49] <gilberth> Curious, does it run Chaosnet?
[00:51:58] <selwyn> can it run crysis
[01:06:13] <hayley> https://youtube.com/watch?v=qdU_OTs4HH4
[01:06:14] -ixelp- Coffee Compiler Club, 2022_01_21 - YouTube
[01:06:30] <sm2n> hayley: Sounds like fun
[01:21:05] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Quit: Time to sleep...)
[01:37:09] <hayley> Side-note: if one has a faster regex engine, it is not unreasonable that more people will use regexen (for better or for worse). Then more people will want a faster regex engine.
[01:37:31] <hayley> You don't have regexen in hot code, because you don't have an engine that will work in hot code.
[01:48:31] <pl> gilberth: I'm pretty sure there's a combination thay supports chaosnet 
[01:53:40] <pl> A bit of problem is that different emulators represent a bit of an evolution of the hw
[01:54:37] <pl> KA-10 afaik was last not microcoded? And last one without FEP
[01:57:09] <pl> So ITS on KA10 has probably most features and might map to somewhat of golden age for AI Lab, but KS10 and KL10 cam have Ethernet, etc 
[02:05:51] <gilberth> pl: Something must have run the CADR file server. For some reason I find Chaosnet interesting. And someone must have implemented SUPDUP; the CADR comes with a SUPDUP client.
[02:06:14] <pl> SUPDUP was available on bunch of machines 
[02:07:08] <pl> I think servers were available on Lisp Machines, on ITS, i suspect on Multics, some on Unix as well, no idea about TOPS
[02:08:08] <gilberth> Unix definitely. I saw to code, tried to make it behave and gave up and rather implement my own FILE server in CL.
[02:08:09] <pl> TOPS-20 on MIT-OZ was popular as file server I think, though people connected with whatever had their files 
[02:10:37] <pl> I think by the time there was more serious LispM deployment at AI Lab, one of the machines served as the file server 
[02:21:55] * hayley wins the final boss fight of Postal 2: Paradise Lost and the game crashes. Didn't save.
[02:32:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:47:36] *** Joins: dra (~dra@2a04:4540:6405:4a00:9da1:d2d3:1f56:71e5)
[02:47:38] <dra> Hello!
[02:48:17] <hayley> Hello dra!
[02:53:51] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:57:15] *** Quits: clintm (~user@98.20.67.102) (Ping timeout: 256 seconds)
[03:02:25] <sm2n> "...Java-like syntax, such as C and C++"
[03:16:50] <selwyn> i suppose its one way to describe it
[03:24:31] *** Quits: dra (~dra@2a04:4540:6405:4a00:9da1:d2d3:1f56:71e5) (Quit: Leaving)
[03:36:35] <hayley> -like is commutative?
[03:41:28] <hayley> gilberth: So, TL/DR is that Cliff said to maintain a full counter for how many times we last ran a loop. Then one can branch on the counter value, to take the (hopefully) faster path.
[03:42:27] <hayley> I had asked if maintaining a bit would be any better (since if the bit stays one way, then you don't have to update it, and cause cache ping-pong), but apparently it's not a big deal. Hm.
[03:49:14] <hayley> https://netsettlement.blogspot.com/2022/01/automated-departure-message.html
[03:49:15] -ixelp- netsettlement: Automated Departure Message
[04:06:27] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[04:19:39] <hayley> Hm, if I diddle variables bound in a closure, SBCL seems to generate...some sort of allocation code, but it is obviously dead.
[04:34:57] <hayley> https://www.youtube.com/watch?v=_XNoxQ0vW_o
[04:34:57] -ixelp- Wii Tanks MASTER MOD vs TANKS VETERAN - YouTube
[04:35:50] <epony> HEAL  https://en.wikipedia.org/wiki/Unix_philosophy#Mike_Gancarz:_The_UNIX_Philosophy
[04:36:20] <epony> 8. Avoid captive user interfaces.
[05:25:20] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 256 seconds)
[05:30:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:32:29] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:45:25] <drakonis> https://github.com/lokke-org/lokke
[05:45:26] -ixelp- GitHub - lokke-org/lokke: Lokke: Clojure for Guile
[05:45:43] <hayley> wtf they ruined Guile
[05:45:58] <hayley> "Lokke intends to provide a full dialect of Clojure for Guile" how the fuck does that work. Is it a dIaLeCt or not?
[05:46:12] <drakonis> guile has a thing called a language tower
[05:46:14] <drakonis> remember racket?
[05:46:23] <drakonis> its kinda similar but significantly better designed
[05:46:34] <hayley> Right.
[05:46:52] <drakonis> it is clojure running inside guile's vm
[05:46:57] <drakonis> its also written in scheme
[05:47:05] <drakonis> so it has bidirectional compatibility
[05:47:27] <hayley> I meant, how is it simultaneously a "dialect" and "full"? I assume the latter is "the full language"...
[05:47:35] <drakonis> https://www.gnu.org/software/guile/manual/html_node/Compiler-Tower.html its a compiler tower~
[05:47:35] -ixelp- Compiler Tower (Guile Reference Manual)
[05:47:37] <drakonis> oh
[05:47:51] <drakonis> it is a dialect because it isn't backed by the jvm like mainline clojure is
[05:48:26] <hayley> So the Clojure language only exists by having a JVM?
[05:48:28] <drakonis> it implements as much as possible of clojure's functionality
[05:48:45] <drakonis> clojure lives and dies by its jvm integration
[05:48:58] <drakonis> there's a clojure backed by the CLR vm
[05:49:12] <drakonis> so it has interop with c# libraries, but it is hardly the primary option
[05:49:35] * hayley now wonders what part of a Clojure system is actually specified as the language.
[05:49:46] <drakonis> the implementation is the spec
[05:49:58] <pl> the CLR was the original version, afaik
[05:50:09] <pl> but when it happened JVM was much more widespread especially outside windows
[05:50:13] <drakonis> huh, that'd be something.
[05:50:36] <hayley> In other news, <https://soundcloud.com/user-308419292/sets/midsummer-moonlight> is one year old today.
[05:50:37] -ixelp- Stream theemacsshibe | Listen to Midsummer Moonlight playlist online for free on SoundCloud
[05:50:52] <pl> drakonis: Rich Hickey also has a history of doing CL<->JVM interop, iirc
[05:51:00] <drakonis> neat.
[05:51:38] <drakonis> the clr version does not seem to be implemented by rich hickey
[05:51:41] <drakonis> its by someone else
[05:51:47] <drakonis> david miller
[05:52:24] <drakonis> https://github.com/clojure/clojure-clr/commit/b136e2512bd53f7e8901471598b8d104c7fb3f0b
[05:52:25] -ixelp- Initialize the Clojure.net repository, add .gitignore. · clojure/clojure-clr@b136e25 · GitHub
[05:52:40] <drakonis> there's no commits by rich in the entire repository
[05:53:14] <drakonis> also isnt it a bit silly that clojure is spelled with a j :V?
[05:53:26] <drakonis> if it was done with a different language, it'd probably not have that
[05:54:01] <hayley> I've seen people very rarely think that a closure is a clojure.
[05:54:14] <hayley> Also no fun when we have a Clozure CL too.
[05:54:33] <drakonis> ha, yes.
[05:54:50] <drakonis> i wonder how viable it is to do CL inside guile
[05:54:54] <hayley> "I remember being at a conference, I think it might have been in about 2008, and Rich Hickey was there and I went up to him and I said, “Hey, man, you know, Clozure CL with a ‘z’ was around a lot longer than your Lisp.  You ought to change your name.”  And, he didn’t really want to." - rme
[05:55:09] <drakonis> it'd serve as a very good way to write a whole lot of libraries
[05:55:30] <drakonis> as well as inflict nightmares on CL maintainers
[05:57:17] <drakonis> i suspect that guile has already greenspunned itself into CL
[06:01:56] <semz> last I heard they added some CLOS offshoot, so probably
[06:02:22] <pl> drakonis: That's, iirc, the rewrite *after* clojure in JVM
[06:02:45] <drakonis> huh, okay.
[06:02:52] <drakonis> i see.
[06:03:00] <drakonis> semz: that's not particularly new though
[06:03:11] <semz> Seems to be how many Schemes go. "We don't need no stinking CL bloat!" *proceeds to adhoc reimplement the CL bloat throughout the next ten years*
[06:03:29] <semz> drakonis: Possible, my last adventures with Guile were about 2014 which is... oh god where has time gone
[06:03:30] <drakonis> tbf, they're all based on tinyclos
[06:03:57] <drakonis> gregor kiczales' implementation in scheme
[06:04:24] <drakonis> i don't think any of the schemes actually have that attitude though
[06:04:44] <drakonis> maybe racket does, but the racket core team is very snobby
[06:05:46] <drakonis> semz: you should also check out the srfis
[06:06:01] <drakonis> just to refresh your memory
[06:10:36] <drakonis> goops has been in the source since 2000s
[06:11:11] <drakonis> since the year 2000
[06:12:24] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[06:12:48] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 250 seconds)
[06:13:37] <drakonis> guile has restarts as of 3.0
[06:13:59] <drakonis> oops, it has the condition system rather.
[06:16:54] <drakonis> scheme is fascinating.
[06:20:31] <semz> Hm, looking through the releases, I might have been using 1.8, whose manual doesn't mention goops
[06:20:39] <semz> 2.0.9 was out at the time but I remember not being able to use it for some reason
[06:24:08] <hayley> IIRC the Racket/TinyCLOS language was ditched because CLOS wasn't considered modular enough.
[06:24:29] <hayley> IOW the top level was too un-hopeless then.
[06:24:40] <drakonis> lol
[06:24:45] <drakonis> hopeless
[06:35:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:45:18] *** Joins: jeosol (~jeosol@user/jeosol)
[06:56:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:12:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:18:24] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:44:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:48:22] <ck_> pl: the kind of bothering that mystifies me. "don't use plain text env vars, use secrets." [uses secrets..] now the docker-entrypoint script doesn't work as before. good luck figuring out why!
[08:08:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:09:30] <pl> ck_: ok, secrets is useful because it decouples (and makes it easier to secure) well, secrets
[08:09:45] <pl> what probably nobody told you is that you can load env vars from secrets :)
[08:11:51] <pl> you can either specify it for single environment variable, or tell k8s to load a bunch of them from secret or configmap
[08:13:00] <pl> for quick access to manifest specs, I recommend becoming acquaintained with `kubectl explain` command
[08:14:25] <pl> for example, `kubectl explain pod.spec.containers.env` will show the details of `env` part of container in a pod
[08:19:29] *** Joins: semz_ (~semz@user/semz)
[08:20:29] <mfiano> hayley: why? :)
[08:21:11] <hayley> mfiano: I'll just get the link for ya. Basically I accused Casey of promoting a programming style that would lead to avoidable deaths.
[08:21:52] <hayley> https://twitter.com/nodefunallowed/status/1479024641049968646
[08:22:22] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:23:09] <hayley> (Somewhere else in the replies, I was spending my time arguing that writing a good compiler for modern hardware is very damn hard. "I don't think anyone knows how to make optimal machine code nowadays.")
[08:25:51] <mfiano> Ha
[08:26:10] <pl> hayley: dunno if you had seen discussion how C/C++ compilers going like crazy for mining UB for optimization opportunities resulted in slower code than if there was no UB-based optimization?
[08:26:17] <mfiano> I will admit, it is surprising seeing that Baker note coming from you.
[08:26:49] <hayley> Maybe that statement was a bit too strong for an opener, admittedly. But Casey's idea of "people who write safety bugs are just incompetent and should be replaced" seems very impossible to satisfy.
[08:27:03] <hayley> pl: I haven't. But lol
[08:27:35] <pl> hayley: turns out good programmers don't want UB from their code, and start coding defensively around it
[08:28:19] <mfiano> Good programmers don't want unmodular, unmaintainable code, which is often in direct conflict with ultimate performance, too.
[08:28:24] <hayley> Off the record, I've heard beach talk about tradeoffs w.r.t correctness, and I guess I err on putting more effort into correctness when I know how to. e.g. model checking things I can't model in my head, or on paper.
[08:29:03] <pl> mfiano: even if you want to write for absolute performance, it turns out that people don't necessarily want to depend on UB ;)
[08:29:07] <pl> because, well, UB
[08:29:53] <hayley> But (as I said in #sicl) inlining and staging, where applicable, are the simplest ways to improve performance that I know of. Just keep your abstractions out of compiled code, and no one has to be any the wiser.
[08:30:14] <sm2n> ZERO COST ABSTRACTIONS
[08:30:16] * sm2n leaves
[08:30:27] <hayley> ...hence a regular expression compiler is not overkill to me, though I got a funny reaction from Cliff.
[08:30:53] <hayley> pl: lmao that's amazing
[08:31:19] <mfiano> I get the impression he is very stubborn and "knows it all" from nearly 50 years of compiler theory for the "wrong" types of compilers.
[08:31:33] <mfiano> So that doesn't surprise me.
[08:31:49] <hayley> Whom now? Cliff?
[08:31:53] <mfiano> Yeah
[08:31:54] <pl> and even the craziest bastards in optimizing weird code in gamedev using shitty languages, tend to learn details of how things work down to compiler-specific behaviour... which is kinda antithesis to UB, isn't it?
[08:32:23] <hayley> I guess, but he wrote a non-negligible part of the most used and most spiffy JIT ever. So it would be ironic in a way.
[08:32:24] <pl> for example, Carmack&co taking into account MSVC/ICC devirtualization support in Doom3
[08:32:44] <hayley> [citation needed] of course. 
[08:33:31] <hayley> ...and the history of JIT roughly goes "Lisp (sorta, not really), regular expressions (sorta, not really), APL, Smalltalk, Self (very much so), Java, the world"
[08:33:36] *** semz_ is now known as semz
[08:34:00] <pl> hayley: on Doom3? I'll have to dig out an analysis on the engine code, been few years since I've read it, but the guy writing the analysis was also well acquaintained with details of C++ compilers, and immediately pointed "hey, this specific style declaration let's compiler generate faster method calls"
[08:34:28] <hayley> pl: Sorry, I meant on "most used and most spiffy JIT ever" - I don't have numbers for that.
[08:34:34] <pl> ah
[08:34:35] <hayley> Just a guess, as Java runs on 3 billion toasters or smth
[08:34:59] <pl> well, some of the most deployed java arch is purely interpreted, afaik
[08:35:43] <pl> (JavaCard)
[08:35:53] <hayley> That's a thing?
[08:36:06] <hayley> (I'm aware it exists, I didn't know it was actually used)
[08:37:19] <pl> hayley: JavaCard is "big enough" that there's barely any talk about any other smartcard runtime environment
[08:37:36] <hayley> See, I don't hear much talk about smart cards at all.
[08:37:39] <pl> they exist, but JavaCard is not the 900lb gorilla, it's the fucking expeditionary task force
[08:37:52] <hayley> Hah.
[08:38:17] <sm2n> I need to unhear this
[08:38:44] <hayley> sm2n: https://www.youtube.com/watch?v=OP-cQa3eEZk
[08:38:44] -ixelp- Weasles Ripped My Flesh (Live At Town Hall, Birmingham, 5/30/69) - YouTube
[08:39:16] <pl> hayley: consider that pretty much every EMV2 physical card runs JavaCard
[08:39:36] * hayley reads EVM 2 physical card. Fucking dammit
[08:39:46] <pl> EMV2 = pretty much every smartcard-based payment card (credit or debit) outside of niche systems like FeLiCa
[08:39:49] <hayley> Well goddamn, that's a fair few devices.
[08:40:10] <pl> hayley: also something close to all SIM cards
[08:40:43] <pl> it's also really common in identity/access cards
[08:40:54] <pl> (the more advanced ones that do things like holding certificates)
[08:41:32] <pl> I believe there are some other routines, but JavaCard is literally the easiest one to start with and with widest support
[08:42:21] <sm2n> wow
[08:42:38] <sm2n> I am never going to make a payment in a store the same way again
[08:43:52] <pl> btw, EMV = Europay, Mastercard, Visa
[08:48:50] <pl> it's a bit like UEFI - even if CPU vendors weren't pushing it, the fact that it standardized a lot of low-level programming means benefits for the whole PC industry
[08:49:29] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:59:36] *** Joins: Alfr (~Alfr@user/alfr)
[09:15:38] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[09:21:37] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[09:21:51] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[09:26:19] *** Joins: winningluser (~w@2601:8c1:80:70d0::4b06)
[09:27:40] *** winningluser is now known as [w]
[09:29:32] *** Quits: [w] (~w@2601:8c1:80:70d0::4b06) (Client Quit)
[09:35:25] *** Joins: winningluser (~w@2601:8c1:80:70d0::4b06)
[09:35:30] *** winningluser is now known as [w]
[09:49:02] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Ping timeout: 240 seconds)
[10:14:46] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[10:46:52] * hayley asks how much the calcium lime and rust remover has to be diluted to make it safe to handle.
[10:47:03] <hayley> "Don't overthink it, just do it." Right, I won't overthink burning my hands. Sure.
[10:47:44] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:48:04] <dave0> maw
[10:48:12] <hayley> maw
[10:49:16] <dave0> hi hayley :-)
[10:52:03] <selwyn> what are you removing and from what
[10:52:38] <ck_> pl: yes, thank you, that's exactly what I did though. I set the same env vars from secrets, when I don't use the docker-entrypoint but for example sleep 3600 the container and exec a shell into it, I can see the env vars set correctly. Maybe it is a timing issue
[10:55:08] <dave0> hayley: how's your saturday?
[10:55:23] <hayley> It's what it is.
[10:56:47] <dave0> i visited my friend and we had a burger
[10:56:48] <hayley> Also funny that Cliff mentioned calling into C if the loop iteration count is that high. But why?
[10:56:55] <ck_> what kind of burger
[10:57:00] <ck_> .. that hawaiian burger joint?
[10:57:11] <dave0> regular fish'n'chips shop
[10:57:17] <dave0> i had just meat and a bun with nothing
[10:57:30] <ck_> do you use vinegar on the chips or no
[10:57:47] <dave0> oh yes i haven't done that for ages
[10:58:00] *** Joins: notzmv (~zmv@user/notzmv)
[10:58:12] <dave0> my friend has mayonaise on her chips :-(
[10:58:25] <ck_> neither have I but now I'd really like that for lunch, wrapped in a newspaper and everything
[10:58:29] <moon-child> hayley: hahaha
[10:58:45] <dave0> ck_: the newspaper has essential inks
[10:58:55] <hayley> moon-child: Have you watched any of the recording?
[10:59:00] <ck_> :D
[10:59:38] <hayley> So far, I feel pretty meh about the meeting.
[10:59:40] <selwyn> essential inks lol
[10:59:50] <dave0> :-)
[10:59:51] <selwyn> iirc they banned wrapping it in newspaper
[11:00:43] <selwyn> but sometimes you get chip boxes which have fake newspapers printed on them to remind people
[11:00:55] <hayley> dave0: Wouldn't mind some good mayonaise.
[11:01:15] <ck_> yeah that's what the burger shops here do sometimes too
[11:01:16] <hayley> selwyn: The fish and chips I got yesterday had fake newspaper. In two more layers of plain paper. 
[11:01:32] <hayley> And you can never tell which way you're supposed to unroll it, so you might end up with an upside-down chip box.
[11:02:59] <selwyn> yes i always have the same problem but with greaseproof paper wrapped chips
[11:03:35] <hayley> https://www.youtube.com/watch?v=8GZnSeGbssw
[11:03:35] -ixelp- If - YouTube
[11:04:30] <moon-child> hayley: 'watched the recording' no
[11:04:58] <moon-child> I don't have stamina for long videos.  Reading is much easier.
[11:06:09] <ck_> I just put youtube links under my pillow at night
[11:06:35] <hayley> TL/DW something about riding bikes on black ice, and handling spam calls. Also some talk about language design and compilers, e.g. shorthand for "todo" errors at run-time and compile-time. Cliff also wonders why I am optimizing the shit out of regular expressions (A: cause it's fun).
[11:07:43] <selwyn> https://www.youtube.com/watch?v=8F0FSm5lVvs
[11:07:44] -ixelp- The Best Fish And Chips In London | Best Of The Best - YouTube
[11:08:00] <selwyn> narrator voiceover: but they weren't the best fish and chips in london
[11:08:03] <moon-child> I rode my bike on the ice a week or two ago
[11:08:06] <moon-child> fell three times
[11:08:24] <ck_> no bike from home?
[11:08:24] <moon-child> once was on a hill, I slid for a bit, that was quite fun
[11:08:27] <selwyn> moon-child: https://www.youtube.com/watch?v=y_bwKW6V1lw
[11:08:28] -ixelp- Epic Cycling on Ice - YouTube
[11:08:47] <moon-child> then I nearly fell in front of a car, not so fun, decided to walk the rest of the way home
[11:09:16] <moon-child> selwyn: ;o
[11:10:21] <ck_> :o indeed
[11:11:02] <selwyn> i wonder how comfortable it is to ride
[11:11:08] <selwyn> no tires or suspension
[11:11:15] <ck_> the suspension is in the snow
[11:11:16] <selwyn> otoh you are on ice which is very flat
[11:11:41] <ck_> on ice, I'd expect a lot of microagressions into the spine
[11:34:43] <epony> "meagerexpressions" ;-)
[11:35:44] <moon-child> cliff click: 'a type is a set of values'
[11:36:06] <ck_> very categorical
[11:36:19] <epony> what's the difference between https://en.wikipedia.org/wiki/M-expression and https://en.wikipedia.org/wiki/S-expression anyway?
[11:37:56] <epony> https://en.wikipedia.org/wiki/R-expression and https://en.wikipedia.org/wiki/P-expression
[11:42:03] <epony> let's imagine there are also J- and K- expressions: "S-expressions were originally intended only for data to be manipulated by M-expressions, but the first implementation of Lisp was an interpreter of S-expression encodings of M-expressions, and Lisp programmers soon became accustomed to using S-expressions for both code and data. This means that Lisp is homoiconic; that is, the primary representation of programs is also a data structure in a primitive type of 
[11:42:03] <epony> the language itself."
[11:46:21] <epony> https://en.wikipedia.org/wiki/JK_flip-flop#JK_flip-flop
[11:51:40] <epony> for UNIX-haters "In the 1930s, the earliest digital logic systems were constructed from telephone relays because these were inexpensive and relatively reliable."
[11:53:42] *** Joins: ln43 (~ln43@user/ln43)
[11:55:18] <hayley> https://github.com/telekons/one-more-re-nightmare/issues/10 Thingy #10 let's goooo
[11:55:19] -ixelp- Runtime feedback for SIMD and repetition · Issue #10 · telekons/one-more-re-nightmare · GitHub
[12:00:18] *** Joins: kevingal (~quassel@80.233.43.128)
[12:01:23] <ln43> Good morning
[12:12:25] <selwyn> does 'lekker' have an equivalent in german?
[12:19:24] <ck_> 'lecker'
[12:19:36] <selwyn> does it have the same meaning/connotation
[12:19:50] <ck_> not quite, at least if I'm not mistaken
[12:19:59] <ck_> 'lekker' means good, enjoyable, nice, right?
[12:20:26] <ck_> 'lecker' literally means tasty
[12:20:55] <ck_> 'Lecker' is someone who licks, so mind your caps
[12:21:43] <selwyn> lol
[12:27:01] <selwyn> thanks!
[12:29:31] <hayley> moon-child: Cliff stated that SIMD only gives you a 2x speedup too. Could be "ballpark 2x" like all things, but it seems like an underestimate to me?
[12:30:02] <hayley> I guess my loop handling is about 1.5x or so, still.
[12:30:02] <moon-child> 2x speedup at what?
[12:30:25] <moon-child> I mean, I doubt you'll get _better_ than 2x if your vector registers are only 2x wordsize, like arm...
[12:45:09] <gilberth> Hugh?! CCL can load from URLs? (LOAD "http://clim.rocks/gilbert/hw.lisp") works and I don't know, if I like that.
[12:47:49] <gilberth> Anyhow for #! support, I believe we shouldn't fuss with the reader, but patch LOAD. It should just recognize the "#!" as a sort of file header and ignore that. Bonus points, when you could do with FASLs, too.
[12:49:25] <moon-child> 1: what about: 'sbcl < whatever.lisp', where whatever.lisp starts with a #!?
[12:49:35] <moon-child> 2: patching reader is much easier when you are a user, not an implementor
[12:49:40] *** Joins: shka (~herr@109.231.0.226)
[12:49:44] <moon-child> 3: all attempts to bridge lisp and unix are fraught, and should not be attempted
[12:49:53] <selwyn> i've seen some clever way to deal with #!
[12:50:22] <gilberth> moon-child: What about "sbcl whatever.lisp", like everyone else but Lisp behaves like?
[12:51:09] <moon-child> what about it?
[12:51:32] <pjb> gilberth: not here: (load #P"http://clim.rocks/gilbert/hw.lisp") #| ERROR: File #P"http\\:/clim.rocks/gilbert/hw.lisp" does not exist. |# 
[12:51:36] <pjb> gilberth: but abcl can do that.
[12:51:42] <moon-child> (NB. if you really need it, I advocate for: #!/usr/bin/env sbclwrapper, where sbclwrapper is something like: sed 1d < "$1" | sbcl)
[12:51:47] <pjb> gilberth: (lisp-implementation-version) #| --> "Version 1.12.1 (v1.12.1-7-g4912320e) Darwinx8664" |# 
[12:51:48] <gilberth> What is the problem? I cannot remember saying "sbcl < foo.lisp" ever.
[12:51:53] <shka> https://medium.com/lessons-from-history/bonhoeffers-theory-of-stupidity-explains-the-world-perfectly-957cbb3fbac1
[12:51:53] -ixelp- Bonhoeffer’s Theory of Stupidity Explains The World Perfectly | by Peter Burns | Lessons from History | Medium
[12:53:37] <gilberth> moon-child: Do that. I'll patch load; come up with sth, so that I could stick what should be executed as a script into a MAIN function or (EVAL-WHEN (:SCRIPT) ...) or whatever, so that I could just LOAD the file interactively too while developing and not wanting to run that script.
[12:53:38] <selwyn> its behind a damn paywall
[12:54:21] <gilberth> Those attempts only fail, because somehow Lisp implementors have a mental blockade to play by UNIX rules here.
[12:54:36] <moon-child> why should I want to play by unix rules?
[12:54:47] <selwyn> only way to win is not to play
[12:54:56] <moon-child> ^
[12:55:01] <gilberth> See, what I said.
[13:01:21] *** Joins: vats (~vats@103.158.91.8)
[13:01:30] *** Quits: vats (~vats@103.158.91.8) (Client Quit)
[13:01:43] *** Joins: vats (~vats@103.158.91.8)
[13:01:51] <ln43> i hardly can imagine something that is not unix-like... maybe there are alternatives but strictly  i don't like unix too
[13:03:32] <moon-child> you cannot imagine http://metamodular.com/closos.pdf?
[13:06:10] <gilberth> Use that marketing failure and vapourware, if you wish. I enjoy my UNIX meanwhile. It's the best we have. And: I like my files and I also like them arranged in a tree.
[13:08:27] <ln43> good point...
[13:09:09] <moon-child> gilberth: 'vapourware' fine.  What about genera?
[13:09:23] <moon-child> sharp apl?
[13:10:07] <gilberth> moon-child: Do you use Genera for day to day hacking?
[13:11:08] <shka> gilberth: i think that there is, actually room for novel OS
[13:11:09] <moon-child> no.  But many did, back in the day
[13:11:10] <gilberth> And BTW CCL already has some magic logic to ignore #! -- No idea where it hides.
[13:11:22] <moon-child> unix won because it was worse, not because it was better.  See gabriel
[13:11:22] <shka> for cloud
[13:11:30] <moon-child> shka: 'cloud' includeos
[13:11:44] <moon-child> And: regarding unix, I do not enjoy slow context-switches
[13:12:06] <shka> linux and docker are fine, but something like singularity would be better 
[13:13:15] <gilberth> moon-child: Yes, back in the days. UNIX has gone a long way since then. Unlike Genera it doesn't crash every five minutes. And UNIX has preemptive multiprocessing, I like that my machine is still responsive, when I say (loop).
[13:13:49] <moon-child> you can have preemptive multiprocessing without sacrificing efficient context-switching
[13:13:55] <gilberth> And even then: I cannot remember SYSV ever crashing. Back in the days.
[13:13:55] <moon-child> that genera lacks it signifies nothing
[13:14:14] <dave0> gilberth: hmm you're not a unix weenie
[13:14:39] <moon-child> gilberth: fwiw I have had linux freeze up on me completely, requiring a hard reboot, multiple times
[13:15:04] <ln43> yes but today i think that DOS is caching on (D for distributed)
[13:15:13] <selwyn> lol
[13:15:21] <moon-child> this once happened during a kernel upgrade, requiring me to recreate the kernel from an offline installation medium
[13:16:24] <gilberth> moon-child: I had that exactly once by saying yes > /dev/ttyS2 with /dev/ttyS2 being an USB->RS232 adaptor. Flow control was missing and all memory wound up with "y\n".
[13:16:40] <selwyn> lol
[13:16:49] <moon-child> I've had this happen randomly, not while doing anything special
[13:16:50] <gilberth> I cannot use Genera for more than five minutes without landing in the debugger. My that's me, bugs haunt me.
[13:17:06] <moon-child> across multiple completely unrelated pieces of hardware
[13:17:31] <gilberth> And macos is unstable. I need to reboot it every 100 days or so.
[13:18:38] <moon-child> I have had my mac for fewer than 100 days (I think), haven't had to reboot it yet, though
[13:24:03] <gilberth> And granted, back in the days Suns liked to crash, too. The olde like a Sun3.
[13:25:11] <moon-child> reminds me of this: 'For over 20 years, I have been [...] using the Solaris operating system on Sun Hardware.  Recently, I have switched to Linux on i86 hardware'
[13:25:23] <moon-child> published in _2016_
[13:25:43] <ln43> was Solaris good in your opinion ?
[13:25:49] <gilberth> i86 = 8086? :-)
[13:26:38] <ln43> i tried to use opensolaris, openindinana ... but with few success
[13:27:52] <moon-child> sunos and solaris were the last solid bits of os research.  Today, they are unexceptional.  I would run freebsd for anything that needs to be reliable
[13:29:09] <ln43> yes a minimal BSD system should be great
[13:29:16] <gilberth> I should use FreeBSD, too. I am a Linux user by accident and also because it looks like SYSV.
[13:31:03] <moon-child> as far as unices go, freebsd is good
[13:31:17] <epony> almost, but it's not UNIX
[13:31:19] <moon-child> it has zfs (:3), dtrace, jails
[13:31:22] <epony> (departed)
[13:31:53] <epony> zfs is totally the wrong way to organise disks and storage
[13:32:03] <Duuqnd> It sucks that the only choices for (usable for daily tasks) operating systems these days is Unix, free Unix, free Unix clone, and Windows
[13:32:27] <epony> dtrace comes from Linux contamination of Solaris (Linux-like) tracing
[13:32:47] <epony> overly complicated
[13:33:12] <epony> jails are the single benefit of FreeBSD and the scheduler, for which you have really no idea as casual useds
[13:33:27] <ln43> epony: which OS do you suggest?
[13:33:38] <epony> FreeBSD for you, OpenBSD for me
[13:34:33] <epony> and Linux, eventually, due to applications and production requirements, something which you don't control
[13:35:42] <ln43> but is OpenBSD overcomplicated? .... or not
[13:35:49] <epony> depends
[13:36:12] <epony> it's simpler and closer to the UNIX (FreeBSD/NetBSD it started from)
[13:36:33] <epony> the modern day FreeBSD is not quite FreeBSD any more, it's more like Linuxified BSD
[13:37:36] <ln43> there was an interesting discussion on slackware days ago about building a minimal BSD system
[13:38:04] *** Quits: kevingal (~quassel@80.233.43.128) (Remote host closed the connection)
[13:38:35] <epony> it happened in the 80ies
[13:39:03] <ln43> something like this https://github.com/386bsd/386bsd
[13:39:04] -ixelp- GitHub - 386bsd/386bsd: 386BSD
[13:39:05] <epony> SysV is the other thing than happened which was intended as upsale to commercial vendors
[13:39:49] <epony> ln43, that story is pointless, the previous variants were adaptations and the modern ones are the real progress on that
[13:40:26] <ln43> yes, today i was interested to see something more about porteus kiosk but it's mostly a commercial project
[13:41:11] <ln43> which story?
[13:41:55] <epony> about BSD porting to 386 again after the early 90ies
[13:41:59] <epony> no such thing
[13:42:20] <epony> starting point for current systems is 19955
[13:43:06] <epony> replicating the 1990-1995 period by Linux people is not worth even testing
[13:43:55] <ln43> ok, that link was only intended as an example... nothing more. for sure making an OS is not an easy task
[13:46:01] <epony> takes many people and years of work, relearning mistakes by a small team is very slow and pointless reproduction for lower results by definition
[13:46:20] <epony> the real hardware is gone
[13:46:42] <epony> emulators are not quality machinery and can not emulate correctly the hardware
[13:47:10] <ln43> yes and also virtualization technologies are on going
[13:47:15] <epony> there are more than one platform, and more than one compiler system and toolchain, there are epochs to cross with generations of application software to use and test-proof
[13:47:30] <epony> it's not a realistic environment
[13:51:49] <epony> DragonflyBSD is the previous gen FreeBSD that is closer to the original BSD in the FreeBSD4 years 2000-2004
[13:52:45] <epony> 2005-2010 saw accelerated development and good improvements like SMP unlocking and new functionality in file systems (conservative)
[13:52:53] <epony> the ZFS is bogus
[13:53:17] <epony> (feature competition with Linux server markets)
[13:53:43] <epony> dynamic tracing is useful, but is overly ambitious
[13:55:48] <epony> FreeBSD has good performance but relies on Linux for drivers and NDA propagation, and.. is lagging in any production quality security mechanisms in real-world use (just prerequisites but not really used, and has no important mitigations, because these conflict with performance chasing)
[13:56:22] <epony> so you really have no benefits of it, other than a second system for risk levelling on enterprise workloads
[13:57:04] <epony> I personally like FreeBSD a lot, just the ZFS is bollocks
[13:59:01] <ln43> ok... now i'm fighting trying to find the right version of linux headers but apt does not succeed ... looks like there are only recent versions
[14:00:11] <epony> "the not an OS" is a real problem with realistic complications
[14:00:22] <ln43> yes not 4.0.0-11, only from -13 to -17
[14:00:29] <ln43> 4.9.0
[14:02:00] <ln43> so maybe i'm forced to upgrade everything
[14:02:41] <epony> kernel & headers must match and then userland against them and libraries against applications
[14:03:12] <ln43> yes that is the point
[14:03:18] <epony> these are connected sub-systems so must be compatible and happening "automagically" for you at kernel, world (userland) and applications (ports) build time
[14:03:31] <ln43> but is strange that the package manager is not handling that correctly
[14:03:33] <epony> this is where the BSD's shine
[14:04:01] <epony> as they make that "easy" with their build system, while Linux is a per package "mix and match"
[14:04:21] <ln43> not exact match
[14:04:23] <epony> so you would find similar ideas in Linux distributions like Gentoo and probably Arch / Slack
[14:05:09] <ln43> Alpine too
[14:05:22] <epony> they have different libc
[14:05:25] <epony> so nothing works
[14:05:34] <ln43> yes based on musl i think
[14:05:43] <epony> like the security "hardening" failures in Linux and FreeBSD land
[14:06:05] <epony> you toggle it on, recompile and find yourself in a large pile of problems afterwards
[14:06:18] <epony> so that really "does not work" in the real world
[14:08:26] <ln43> only that after i should reboot to use the new kernel but i'm doing all in a not persistent way
[14:08:48] <ln43> ok... there are a loot of complications like reboots and so on
[14:09:19] <epony> if you try FreeBSD / Gentoo you will like that a lot more than Linux "do-it-yourself" distribution replacement upkeep
[14:15:01] <epony> in the context of JVM and modern virtualised Lisp-family languages running in JVM and LLVM bytecode environments, it's Linux only ;-) with some "testing" on BSD that is not realistic use outside academic / research Universities
[14:15:47] <epony> the world has become Linuxified (which is the post-UNIX trend on x86 PCs) and that's what servers and client computers are (for work / in production)
[14:16:14] <epony> the RISC workstations do not exist anymore, contrary to the failed beliefs of many naive internet crib dwellers
[14:16:24] <epony> since the mid 90ies (gone gone gone and gone)
[14:17:01] <epony> and "holding onto" Apple lies is just disfunctional personal use
[14:18:36] <epony> and PostgreSQL comes from the BSD side (which is the basis of Oracle and other DB systems like MySQL)
[14:19:08] <[w]> is there anything new in modern systems that you *do* like
[14:19:28] <epony> everything is nice, if it is "support"-efficient
[14:22:25] <epony> if it's all manual work that does not integrate, even the fanciest most cool software is.. laborious and overhead
[14:23:27] <epony> just Linux new kernels are heavy on old machines, you have to match these by generations of processors and applications
[14:23:35] <epony> same about FreeBSD
[14:24:36] <epony> new releases are not fine on 15 year old machines and it can't be, while OpenBSD does not have this problem.. it's just not SMP unlocked and has lower performance drivers on storage and some chipsets
[14:25:38] <epony> because business "targets" Linux and FreeBSD benefits from that closer (less system specific improvements / differences)
[14:27:08] <hayley> moon-child: at...yeah, he never said. Good start. But in this instance, finding the first character that is not a match. And we have 8-character vector registers. 
[14:34:47] <hayley> That said, I suspect my comparison is for crap scalar vs crap vector code. I don't unroll or anything, and /me would like more probabilities before unrolling everything.
[14:36:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:36:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:37:45] <hayley> Maybe it's 2x between good scalar and good SIMD, idk.
[14:38:49] * hayley has been awake for 19 hours on end, probably a personal record.
[14:38:55] <selwyn> damn
[14:39:14] <hayley> 3am to 10pm now.
[14:39:15] <selwyn> taken anything to help?
[14:39:27] <hayley> Only one cup of tea at 8am or so.
[14:39:51] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[14:40:17] <selwyn> wondering what my longest is
[14:40:53] <selwyn> i've pulled two all nighters in a row before, but an all-nighter for me usually ends at 6-8am and sleep for a few hours
[14:41:17] <moon-child> hayley: my memset implementation (good vector) is 5x than freebsd's (good scalar) at some size classes
[14:41:46] <hayley> IIRC the best difference I've had scanning is ballpark 7x or so.
[14:41:54] <epony> sell it to them ;-)
[14:42:36] <moon-child> (I am also 3x faster than glibc--fairly good vector--at one size class, which is rather nice)
[14:42:56] *** Quits: vats (~vats@103.158.91.8) (Ping timeout: 256 seconds)
[14:43:29] <epony> FreeBSD loves performance and will "steal it" from you for some cash.. you will learn what's the difference between a system and an application at minimum
[14:44:10] <selwyn> new covid variant just dropped
[14:44:25] <ck_> :) sick beats?
[14:44:31] <ck_> or stale sample pastiche
[14:45:52] <epony> your antivirus definitions are too old, not on the premium subscribers clientelle list
[14:45:59] <hayley> But it's funny that Cliff first said to check if the performance difference mattered. Idk I only woke up at 3am to attend, it might not matter and I don't have skin in the game.
[14:46:34] <hayley> 🤔🤔🤔
[14:47:12] <selwyn> ck: it is apparently a remix of omicron
[14:47:22] <epony> deltacron
[14:47:56] <hayley> (The difference is like 700Mc/s shit sequential vs 1Gc/s with poor choices of SIMD loops, vs 1.7Gc/s or so with good choices.)
[14:48:00] <epony> this year CoughID, next year CallerID
[14:48:18] <epony> MIMD when? ;-)
[14:48:30] <epony> that Flynn basterd
[14:49:19] <moon-child> well that is ... not what I expected
[14:49:30] <moon-child> you can get 86% of the way towards saturating memory with scalar code
[14:49:51] <hayley> Yeah, I don't unroll yet, which might help.
[14:49:51] <moon-child> (course, that's for memset, which has the easiest task in the world.  Bet it's harder if you're doing something hard.  But 'check for this one character' is not hard)
[14:50:49] <moon-child> .oO(does swar count as vector?)
[14:51:14] <hayley> But then I'd either generate unrolled stuff for every tight loop...which might be infrequent enough that I don't care for extraneous optimisation, or I would really JIT, which I don't.
[14:51:33] <hayley> It doesn't not count, but you'd only fit 2 characters in a 64 bit register.
[14:52:05] <moon-child> right, I forgot you have 4-byte chars
[14:52:28] <hayley> (64 bits / 21 bits/character = 3 characters, give or take. Damn byte addressing)
[14:53:23] <epony> it's even faster if you don't have to "set" anything, just pretend it was already set and deal with the setting later if you need to (that's how linux cheats)
[14:53:43] <epony> you call that peformance, we call it lies and crapware
[14:54:24] <hayley> But I still blame not unrolling, even though IIRC I have half okay instructions per clock. Wouldn't hurt to measure again though.
[14:55:22] <moon-child> I got surprisingly slim gains from unrolling.  YMMV of course
[14:56:14] <hayley> llvm-mca seemed to greatly underestimate the IPC, so I guess there is some speculative loop buggery at play.
[14:59:29] <hayley> I need moar benchmarks really.
[15:00:31] <moon-child> 'lies, damn lies, and ...'
[15:00:57] <gilberth> The fun thing is that with CCL the main() function already has provisions to behave as a regular citizen, it's only that this is later somehow overridden in Lisp. I still believe the sanest thing would be, if a file to be loaded is to be passed on the command-line, without further options. This should trigger batch mode. The remaining of the command line then would be for the script.
[15:01:01] <hayley> Foo! It's all micro benchmarks with regexen.
[15:01:35] <gilberth> hayley: "regexEN" doesn't suit you.
[15:02:00] <hayley> And harder when I want to test interesting REs, when few are interesting. Apparently gilberth gets some nice loops with lexing nonetheless.
[15:02:05] <selwyn> gilberth: why not
[15:02:18] * moon-child still thinks the best way to pluralise it is 'regecide'
[15:02:23] <hayley> "[^"]*" - to SIMD the inner loop or not?
[15:02:33] <selwyn> moon-child: lol
[15:02:38] <hayley> That's the game now IMO. And unrolling too.
[15:03:32] <Alfr> Reghexen?
[15:03:35] <hayley> But I'll also need a €6000 x86-64 machine to thoroughly investigate; I have an ARM64 Pi so I just need a RISC-V board to compensate for ISA differences.
[15:03:57] <gilberth> selwyn: For the very same reason I don't say "boxen".
[15:03:57] <moon-child> hayley: SIMDing "(\\.|[^"])*" is harder though
[15:04:04] <moon-child> gilberth: but you do say 'oxen'
[15:04:11] <selwyn> we can choose the plural of regex though
[15:04:13] <selwyn> its a new word
[15:04:31] * moon-child does not like 'regexen' on aesthetic grounds, but agrees we may choose whatever we like
[15:04:35] <gilberth> Yes, I do. As I say "mice" also.
[15:04:47] <selwyn> also, the attempt to reason by analogy with english plurals is brave but futile
[15:04:53] * moon-child says 'hice'
[15:05:59] <selwyn> there are actually explanations for english plurals being the way they are, they are not random
[15:06:13] <selwyn> it is just that those explanations are not straightforward
[15:06:28] <epony> the riscv64 is in qemu
[15:06:55] <gilberth> Well, sure, you can be as creative with language as you wish. However, I perceive "regex" and "regexen" in particular as silly.
[15:07:24] <epony> "RE"
[15:07:44] <hayley> moon-child: My loop detector would handle the not \ nor " case in SIMD.
[15:07:48] <epony> BRE, ERE, PCRE/2..
[15:07:57] <epony> JRE (no shit)
[15:08:00] <gilberth> selwyn: Nah, "oxen" and "mice" are just two random survivors of a proper plural.
[15:08:21] <selwyn> it is not random
[15:08:25] <hayley> Not perfect, but we're just focusing on the transition from one DFA state to itself. A two character escape sequence won't make such a transition by definition.
[15:09:02] *** Joins: vats (~vats@103.158.91.8)
[15:09:07] <gilberth> It sure is. The fact that these words survived is. Not the way the plural is formed.
[15:09:07] <selwyn> english plurals evolved according to some sound and grammatical changes that were transparent at the time but mysterious to us now
[15:09:32] <selwyn> gilberth: well, ok
[15:09:42] <hayley> -en plurals are mostly amusing to me.
[15:09:49] <hayley> "A server rack has several boxen."
[15:10:10] <selwyn> hayley dislikes the anglo, yet likes anglo-saxon, curious
[15:10:10] <gilberth> Well, -en is common in German.
[15:10:13] * moon-child is annoyed by the proliferation of 'unixen' and 'linuxen' over the proper plurals 'unices' and 'linuces'
[15:10:45] <epony> BNF, EBNF, WSN, ABNF
[15:11:28] * ck_ for fake esperanto pluraloj, add -oj
[15:11:32] <selwyn> there is an irritating tendency in the uk amongst language snobs to overcorrect '-ize' to '-ise'
[15:12:00] <selwyn> unaware that many words derive from '–ίζειν'
[15:12:30] <ck_> incentiviče them even further then
[15:12:36] * hayley starts to wonder how she would put likely/unlikely marks in SBCL
[15:12:41] <gilberth> But you don't come up with "machinen" for "machines". That my point. This "-en" which English shares with German survived with "oxen", but not with other words. You also don't say "keybordren" or "keyborden" or "keyboarde".
[15:14:31] <moon-child> cleavir has branch probabilities, right?
[15:14:52] <selwyn> gilberth: i think the argument/joke is that unix sounds anglo saxon
[15:15:04] * moon-child wonders if beach will be able to stomach hot/cold ordering, making error paths very distant from hot paths ... probably not :/
[15:15:16] <selwyn> otherwise, the argument doesn't make sense/ joke would not be funny
[15:15:26] <selwyn> hm
[15:16:02] <selwyn> unixen is nicer/easier to say than the alternatives imo
[15:18:08] <dave0> the trouble is unix squashed the alternatives.. now there are no alternatives
[15:20:18] <selwyn> sigh
[15:20:44] <selwyn> does anyone know an easy way to determine the aspect ratio of bounding boxes of figures in a pdf?
[15:22:25] <ck_> don't know about easy, but I used a tool to convert pdf to html, and its bboxes were very accurate
[15:22:41] <ck_> you could look at the source
[15:22:42] <moon-child> all I know is that anything that tries to touch pdfs is doomed to failure and frustration :)
[15:26:09] <gilberth> selwyn: Is there only the figure in the PDF?
[15:26:27] <selwyn> no, but never mind
[15:26:35] <selwyn> this will no longer be necessary
[15:26:41] <selwyn> thank god
[15:27:20] <selwyn> a journal we are going to submit to has arcane rules to calculate effective word count
[15:27:47] <ck_> how many square inches in a word? :)
[15:27:59] <selwyn> each single-column figure counts as (150/aspect ratio) + 20) words
[15:28:08] <selwyn> and every equation is 16 words (???)
[15:28:13] <ck_> :-D
[15:28:17] <ck_> amazing
[15:28:21] <selwyn> happily, we will not be subject to these requirements
[15:28:52] <ck_> typeset entire paper as one \eqnarray, come in under word limit always
[15:29:35] <selwyn> i feel that equations should be a lot more than that, morally
[15:29:50] <ck_> and a picture should be a thousand words
[15:29:54] <selwyn> exactly
[15:30:10] <selwyn> so an equation must be like at least 50
[15:32:08] <ck_> ok, so what about things like this? https://en.wikipedia.org/wiki/Tupper%27s_self-referential_formula
[15:33:11] <selwyn> oh that thing
[15:33:13] <selwyn> so cute
[15:33:17] <selwyn> reminds me of a quine
[15:35:37] <selwyn> self-referential not the best name for it
[15:37:03] <ck_> I agree, and looked for "self-describing" and "self-visualising" first
[15:37:47] <selwyn> i mean, it's not your fault
[15:39:07] <ck_> that was just the reason why it took me an entire two minutes to look it up
[15:39:16] <ck_> snappy humor is hard work
[15:39:36] <selwyn> oh ffs
[15:39:42] <selwyn> journal wants a flat directory structure
[15:44:01] <ck_> last time something like this happened to me was probably 12 years ago. I feel your pain
[15:45:12] <ck_> don't remember the venue, not siggraph but something close
[15:46:09] <ck_> they wanted each figure uploaded separately, into a web form or something.  and the group I worked with had everything in a giant figs/ directory, with like ten years worth of files in it
[15:46:13] <ck_> good times
[15:50:20] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:04:13] <selwyn> haha
[16:04:56] <selwyn> i mean, you could make the argument that directory trees are tiresome to visualise in a web interface
[16:05:03] <selwyn> yet the arxiv manages just fine
[16:07:21] <selwyn> managed to submit, hooray
[16:10:37] <ck_> congratulations
[16:12:23] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:18:20] <selwyn> ty
[16:24:22] *** Quits: vats (~vats@103.158.91.8) (Ping timeout: 256 seconds)
[16:32:17] *** Joins: kevingal (~quassel@80.233.35.128)
[16:57:37] <contrapunctus> phoe: no longer hanging around lisp@ these days? O.o
[16:57:51] <phoe> contrapunctus: what's lisp@?
[16:58:30] <contrapunctus> xmpp:lisp@conference.a3.pm?join o.o
[16:58:36] <phoe> oh shit
[16:58:39] <contrapunctus> lel
[16:58:44] <phoe> I forgot that I even have a xmpp account
[16:58:49] <phoe> too many communicators
[16:59:16] <contrapunctus> I must make an IRC-XMPP bridge sometime.
[16:59:26] <contrapunctus> and bridge lisp@ with #lisp
[17:00:35] <contrapunctus> we even had Daniel Barlow there for a brief, glorious period T_T
[17:08:33] <epony> and bridge bridges with land and jeff bridges
[17:09:00] <epony> too few modules and libraries
[17:11:09] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:14:07] <contrapunctus> Say...I could have sworn there was a variable containing the current directory of the running Lisp process, distinct from `*default-pathname-defaults*` , but I can't find it 🤔️
[17:15:09] <pjb> contrapunctus: "current directory" is not a lisp notion, but a posix notion.
[17:16:10] <pjb> contrapunctus: posix doesn't expose a variable for it, but two functions: getcwd(2) and chdir(2)
[17:23:27] <contrapunctus> I see
[17:25:12] <contrapunctus> Also...how does one get the pathname for the parent directory of `*default-pathname-defaults*` ? `directory-namestring` just returns the same directory :\
[17:28:14] <Duuqnd> I don't know how correct this is, but you could take BUTLAST of the PATHNAME-DIRECTORY
[17:28:23] <Duuqnd> And then put that into MAKE-PATHNAME
[17:29:52] <contrapunctus> Duuqnd: I see...I just found `uiop:pathname-parent-directory-pathname` 🙂️
[17:30:12] <contrapunctus> (who named it that way and why, I wonder.)
[17:30:58] <Duuqnd> That's probably the more correct solution
[17:31:06] <pjb> (merge-pathnames (make-pathname :directory '(:relative :up)) *default-pathname-defaults*)
[17:31:41] <pjb> contrapunctus: because: (merge-pathnames (make-pathname :directory '(:relative :up)) "/home/pjb/tmp/foo.bar") #| --> #P"/home/pjb/foo.bar" |# 
[17:32:16] <pjb> if the pathname is a file pathname, the name, type and version components are not removed by this merge-pathnames.
[17:32:29] <pjb> (merge-pathnames (make-pathname :directory '(:relative :up) :name nil :type nil :version nil) "/home/pjb/tmp/foo.bar") #| --> #P"/home/pjb/foo.bar" |# 
[17:34:00] *** Quits: kevingal (~quassel@80.233.35.128) (Remote host closed the connection)
[17:44:04] <gilberth> Speaking of UNIX. Or rather of Mach this time. Why can't I wait on both a file descriptor and a semaphore? This is a recurring issue.
[17:44:40] <pl> ck_: you can't get timing issues like this, though
[17:45:21] <pl> ck_: if podSpec can't resolve a dependency, it will simply not result in a pod
[17:45:24] <ck_> pl: then I simply don't understand the problem, or there's a difference in the way docker-entrypoint.sh works between docker swarm and kubernetes deployment in that case
[17:45:52] <ck_> pl: like I said the dependency is resolved and inside the container, the environment variable is set. it just appears as if that isn't the case immediately on startup
[17:45:52] <pl> ck_: I suspect that there migth be an error in your manifest, or the docker-entrypoint.sh is indeed fucky
[17:46:06] <pl> ck_: you can't set env var *post* startup, so...
[17:46:42] <pl> (env vars are part of process initial stack)
[17:46:53] <moon-child> gilberth: I think windows does that
[17:46:58] <moon-child> WaitForMultipleObjects or some such
[17:47:00] <moon-child> fwiw
[17:47:58] <pl> WinNT has that, yes
[17:48:07] <pl> because WinNT API is internally all async
[17:48:57] <ck_> pl: what's your consultancy rate? :)
[17:48:59] <pl> and things like file handles and other handles are built from common base object
[17:49:49] <pl> ck_: I'm open to negotiations ;) I mean I could quote you a number but I suspect you're not a $BIGCO and it would be way too high ;)
[17:50:15] <pl> I can take an initial look and advise for free for now ;)
[17:52:49] <ck_> I need to go over things first in order to make sure I didn't overlook something stupid and waste your time. But I'm semi serious about the previous question -- if you're confident you can help with the debugging of a deployment with some peculiarities, and crunch time comes up next, I'll probably get some money freed up for that
[17:54:29] <gilberth> Yes, Windows NT has that.
[17:56:11] <epony> it does not have reliable processes
[17:56:52] <epony> and no predictable / fair resource sharing
[18:01:23] <gilberth> But as macos cannot wait with a timeout or rather raises every timeout and argument to sleep to 10s, I am already a pro at forking a process as a waiting helper, which happily throws signals at you. Macos is really broken here. On purpose.
[18:02:37] <epony> also WIN?DOS fails mostly due to drivers privilege abuse (system takeover / crash) and processes consuming the entire system resources
[18:03:20] <epony> so you have both ways of failing ;-) the MSFT and the AAPL way
[18:05:59] <epony> it also has no chance of security the system execution model, since it intentionally lacks tooling to isolate and run separate processes in different security contexts managed by the kernel and sub-systems
[18:30:49] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[18:31:03] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[18:39:59] *** Joins: vats (~vats@103.216.143.18)
[19:01:39] *** Quits: [w] (~w@2601:8c1:80:70d0::4b06) (Quit: nyaa~)
[19:09:12] <pjb> gilberth: because semget returns a id of a semaphore instead of a file descriptor.
[19:12:28] <gilberth> pjb: Right. And I can't what on both at the same time. That we use Mach semaphores here, doesn't help either.
[19:12:46] <gilberth> wait, rather.
[19:13:58] <gilberth> So it's either throwing signals or using a helper thread here.
[19:21:21] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[19:21:23] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Client Quit)
[19:36:08] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:51:49] <lagash> contrapunctus: so lisp@ isn't bridged to anywhere?
[19:52:16] <contrapunctus> lagash: unfortunately, no
[19:53:09] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[19:53:19] <contrapunctus> (...I say "unfortunately", but quite a few peoople have joined emacs@ citing the activity of #emacs as a _drawback_ 🤔️)
[20:05:50] <lagash> perhaps they're not fond of all the off-topic chatter? :P
[20:32:24] *** Joins: rogersm (~rogersm@90.166.180.250)
[21:00:11] <gilberth> No #emacscafe?
[21:02:31] <waleee> lol "too much activity" must be a 1st for an irc-channel
[21:20:37] *** Joins: jeosol (~jeosol@user/jeosol)
[21:29:23] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:29:50] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:33:15] <shka> pl: hey, what is the deal with the OwnCloud?
[21:33:23] <pl> ?
[21:33:29] <shka> there are some forks now, i wonder why 
[21:34:14] <shka> nextcloud to be specific
[21:34:17] <pl> shka: I don't remember details, but there was some big fight over the future direction or how the project was run
[21:34:28] <shka> got it
[21:34:46] <shka> if i would want to set up something for my personal use, which one should i pick?
[21:35:07] <shka> I want to run it on a pi
[21:37:06] <pl> https://en.wikipedia.org/wiki/Nextcloud#:~:text=The%20fork%20was,open%20source%20community.
[21:37:13] <pl> shka: I'd go with nextcloud myself
[21:37:16] <pl> of the two 
[21:37:50] <selwyn> my science and technology university opted for box.com for all its cloud storage needs
[21:37:58] <selwyn> which lacks a linux client
[21:38:43] <shka> well, let's install nextcloud on that pi
[21:42:18] <shka> i will gonna need to add some HDD over the usb 
[21:47:58] <selwyn> why
[21:48:15] <shka> for storage
[21:48:27] <pl> as much as I dislike its use of PHP, it covers a lot of stuff that is very useful
[21:48:31] <selwyn> i mean, why do you want to host cloud storage
[21:50:05] <shka> selwyn: for my personal stuff, I don't like MS or google, and dropbox had terrible fuckup with security
[21:50:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:50:31] <selwyn> good point
[21:57:45] <contrapunctus> amen to self-hosting
[22:08:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:14:07] <shka> and i do have that pi not doing much besides playing audio
[22:14:11] <shka> so it is no-brainer
[22:15:10] <White_Flame> I ran nextcloud for a bit, but was quickly disappointed with it in that none of the online file editing stuff was multi-user
[22:15:59] <White_Flame> (also, the word "cloud" sucked, sucks, and will suck)
[22:16:18] <White_Flame> but is quickly being replaced with "metaverse"
[22:25:30] <gilberth> Has somebody read the NeWS book?
[22:44:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[22:55:30] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[22:58:02] *** Joins: ln43 (~ln43@user/ln43)
[23:11:41] <contrapunctus> White_Flame: Collabora? o.O
[23:18:53] <ln43> https://www.collabora.com/ < this one?
[23:18:54] -ixelp- Collabora | Open Source Consulting
[23:19:15] <drakonis> CDR is live again, hopefully it'll get used again
[23:19:33] <ln43> CDR ?
[23:19:39] <lagash> ln43: beat me to it :P
[23:22:22] <White_Flame> contrapunctus: wath's that?
[23:22:27] <White_Flame> *what
[23:31:19] <contrapunctus> White_Flame: https://www.collaboraoffice.com/
[23:31:20] -ixelp- Collabora - the world's leading LibreOffice services company - online & pc
[23:33:24] <White_Flame> contrapunctus: no, I was talking about nextcloud
[23:34:52] <White_Flame> hoping to have something to build multiuser web interfaces off of
[23:35:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:36:03] <White_Flame> (and wow, what a corporatastic website collabora has)
[23:37:20] <White_Flame> I see the word "open source" in there, but I see no source
[23:41:57] <edgar-rft> seeing the source was left open
[23:42:34] <selwyn> a while back i tried to explain open source to some non tech friends and it was surprisingly difficult
[23:42:40] <selwyn> 'but why do they work for free'
[23:42:49] <ln43> why ?
[23:43:09] <selwyn> well, why indeed lol
[23:43:16] <selwyn> i couldn't think of a good answer
[23:43:23] <ln43> for free in the spare time maybe
[23:43:35] <ln43> ok... at least i think so
[23:44:17] <White_Flame> why would someone play a ball game for free?  or maintain their yard for free? etc
[23:44:31] <White_Flame> why would someone build a ship in a bottle for free?
[23:44:52] <ln43> only for the pleasure to do it maybe
[23:46:00] <shka> programmers, especially good programmers, are a weird bunch 
[23:47:48] <ln43> i was surprise to see how high are the incomes for a surgeon to say...
[23:47:55] <White_Flame> I guess there's a car analogy there, too.  Why would somebody restore an old piece of junk?
[23:47:55] <ln43> compared to the working hours
[23:48:05] <ln43> *surprised
[23:48:27] <White_Flame> everybody enjoys sharing their hobby & passin
[23:48:32] <White_Flame> & passion
[23:49:01] <ln43> yes but not all are doing that for free
[23:49:30] <White_Flame> right, they usually sink a lot of money into it :-P
[23:49:45] <gilberth> I am searching words here. I am pondering keyboard input focus. This is not just about has/hasn't focus. There are at least three states from the perspective of a single gadget or pane. It could have focus and the frame, or top level window, has focus. Fully active, a solid blinking cursor. A gadget may have no focus at all: No cursor. A gadget has focus in principle, but the frame has not: A hollow cursor usually.
[23:49:56] <White_Flame> it's ridiculous how much people sink into thinks like skiing or playing music
[23:50:52] <White_Flame> gilberth: do frames themselves have focus, or just any interactive widgets inside the frame?
[23:51:25] <White_Flame> oh, I guess if "frame" means "toplevel window", and not just a generic nestable rectangular region
[23:51:26] <gilberth> I struggle with how to name that. Also with how events should look like. Just some focus-in / focus-out is not suffice.
[23:52:11] <White_Flame> and of course a widget might have focus whenthe window doesn't, and remembers that for when its window does get "focus" again
[23:52:26] <gilberth> White_Flame: Yes, frames (top level windows) have focus or not, managed by the window manager and none of my business. Then within one application one gadget/pane could have focus, managed by the application.
[23:53:15] <gilberth> White_Flame: Exactly. And in the frame has no focus, but the gadget is in principle the TABed to, you often get a hollow cursor instead of not just none.
[23:53:28] <gilberth> Or it stops blinking, or whatever.
[23:55:25] <gilberth> Actually it's hierarchical. /me scratches head.
[23:56:13] <hayley> Good morning everyone!
[23:56:42] <selwyn> good morning
[23:56:50] <gilberth> I mean a frame could have focus, and within a frame a gadget could have. I'll come up with sth.
[23:59:10] <White_Flame> I've heard of the term "active" window, vs inactive
[23:59:21] <White_Flame> vs "focus" being used for the widgets
[23:59:41] *** Joins: chiselfu1e (~chiselfus@user/chiselfuse)
