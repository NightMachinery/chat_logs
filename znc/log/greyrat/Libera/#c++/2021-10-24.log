[00:06:16] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[00:06:23] *** Quits: jkaye (~jkaye@2601:281:8300:7530:5bae:6a75:284d:ff5) (Ping timeout: 264 seconds)
[00:11:38] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[00:15:11] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[00:17:13] <anyone> Gee I did so much C++ in the last days I don't see the wood for the trees. Why would vector here need copy-constructability? https://godbolt.org/z/4G6q415fM
[00:17:22] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I've gone to sleep...)
[00:20:03] <ville> anyone: strong exception safety guarantee
[00:20:33] <RandomReader> internal reallocation .. vector needs to maintain ^ so it requires noexcept move construction, or it has to copy instead
[00:20:49] <ville> anyone: declare your move operations noexcept
[00:26:00] *** Quits: LNokto (~LNokto@user/lnokto) (Ping timeout: 260 seconds)
[00:26:44] *** Joins: LNokto (~LNokto@user/lnokto)
[00:28:13] <anyone> making just A(A&&) noexcept isn't sufficient, I need to add "B(B&&) noexcept = default;". When move-ctor is implicit, does it not inherit noexcept()?
[00:29:54] *** Joins: jacki (~jacki@93-44-189-64.ip98.fastwebnet.it)
[00:29:59] <jacki> hello
[00:31:47] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:32:25] <RandomReader> user destructor suppresses implicit move ctor
[00:32:39] <RandomReader> (so in practice, rule of 5 for these things)
[00:36:11] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:38:14] <anyone> RO5; That hint was indeed insightful.
[00:49:46] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[00:50:49] *** Quits: great_taste (~great_tas@190.32.235.20) (Ping timeout: 256 seconds)
[00:51:44] *** Joins: great_taste (~great_tas@190.32.235.20)
[00:52:07] <jacki> I cant send a new line in the command args, i exec myapp "aaa\nbbb" but i get no newline, i see the \n literal, even in printf. my app uses fltk, but i dont think its related
[00:52:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:54:26] <jacki> !?
[00:54:27] <nolyc> I can dig it!!
[00:55:14] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[00:56:04] <anyone> so, consult a book on command-line shells on how to input a literal newline? (if at all..)
[00:57:16] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[01:02:34] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:03:05] *** Joins: nvmd (~nvmd@user/nvmd)
[01:08:46] <jacki> rtfm
[01:09:37] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:10:01] <jacki> is anyone an ass ?
[01:10:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[01:13:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:15:19] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[01:25:48] *** Joins: a_ (~a@69.165.165.206)
[01:25:53] <a_> Hi there
[01:26:18] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[01:26:20] <a_> Is anyone here?
[01:27:27] <artok> no
[01:27:44] <a_> Does anyone know of a String library for C++ that is as powerful (and hopefully elegent) as Ruby?
[01:27:57] <artok> this is irc, people are idle, you start with your question and someone might answer
[01:29:16] <a_> Anyone know?
[01:29:57] <artok> would need to know more about ruby then
[01:30:34] <RandomReader> would be a more appropriate question for #c++-general
[01:30:36] <cbreak> a_ c++ has std::string
[01:30:44] <cbreak> that's the only string library inside c++
[01:30:50] <cbreak> if you want more, you'll have to go past c++
[01:30:51] <a_> :/
[01:30:58] <cbreak> maybe use a third party library
[01:31:05] <a_> Not really. There are libraries. But from what I've seen they're not that good.
[01:31:07] <artok> like facebook string lib
[01:31:13] <a_> Oh, let me look
[01:31:17] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:31:30] <cbreak> I've seen plenty of third party strings, like Qt's QString, but they all sucked
[01:31:34] <RandomReader> this channel deals specifically with Standard C++; discussion of third-party options belongs in #c++-general
[01:31:37] <artok> but that's topic for another channel
[01:31:50] <cbreak> std::string is efficient in storage and use
[01:32:06] <cbreak> and it has basic algorithms. And it's a container, so all c++ algorithms work with it.
[01:32:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[01:32:24] <cbreak> if you want more, you should think of what you want to do that goes beyond this
[01:32:54] <anyone> there's a youtube video, of some facebook employee who's comparing g++3 strings, fbstring and then g++5/c++11 strings, and found std::string is kinda good these days
[01:32:54] <cbreak> is it parsing regular expressions? That's not part of the string, it's part of the regex library part of the standard library
[01:33:11] <anyone> ( https://www.youtube.com/watch?v=kPR8h4-qZdk )
[01:33:16] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[01:33:51] <artok> surely enough, std::string is implemented better than before
[01:34:07] *** Gustavo6046_ is now known as Gustavo6046
[01:34:21] <cbreak> I've not seen any major change in std::string in a decade
[01:34:32] *** Quits: lucido (~lucido@p548819c0.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[01:35:01] <artok> algorithms have ?
[01:36:45] <artok> anoyhow, networking TS is on what state?
[01:36:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:07] *** ChanServ sets mode: +v npaperbot
[01:41:40] *** Quits: src (~src@user/src) (Quit: Leaving)
[01:42:49] *** Joins: tomith (tomith@85-156-184-155.elisa-laajakaista.fi)
[01:45:54] *** Joins: X-Scale (~ARM@31.22.163.11)
[01:47:02] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:49:25] *** Quits: a_ (~a@69.165.165.206) (Remote host closed the connection)
[01:50:09] *** Joins: a_ (~a@69.165.165.206)
[01:51:19] *** Quits: DrMax_ (~DrMax@132.215.96.39) (Remote host closed the connection)
[01:52:15] <anyone> About the strong exception guarantee of vector: so if a move-ctor is throwing, vector would use copy-ctor instead. But it seems to be fine with a maythrow move-ct. https://godbolt.org/z/erWGf8f5c
[01:53:30] *** Joins: DrMax_ (~DrMax@132.215.96.34)
[01:53:32] <cbreak> anyone: you have to think about what the container does
[01:53:38] <cbreak> is it insertion? Using move for that is fine
[01:53:50] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 265 seconds)
[01:53:55] <cbreak> is it resizing: using move for that is not fine
[01:54:06] <cbreak> since it might have to be able to back out of the resizing
[01:54:16] <RandomReader> his example would have it do resizing, so I don't think that's the answer here
[01:54:17] <cbreak> and if moves can fail, it can't just move back everything
[01:55:06] <RandomReader> I thought there was a hard check, but maybe it just gives up the guarantee in this case
[01:55:18] <cbreak> RandomReader: his case doesn't matter, because the copy constructor is deleted
[01:55:30] <cbreak> so it'll just be forced to not give any strong exception guarantee
[01:55:38] <RandomReader> like I just said, I thought there was a hard check
[01:55:51] <RandomReader> as in, I thought this was a requirement of the container, not a nice-to-have
[01:55:53] <cbreak> as far as I remember, the guarantee is just out of the window
[01:56:03] *** Joins: Karel (~Karel@ptr-9091p57s6xbhk4qg1xx.18120a2.ip6.access.telenet.be)
[01:57:38] <RandomReader> ...seems so: https://eel.is/c++draft/vector.modifiers#2.sentence-6
[01:58:48] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[01:59:00] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[01:59:00] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[02:00:07] <Karel> Is there a convenient way to turn a int* into a int[R] where R is some constant/known length? The context is that I want to branch from a runtime size to a compile time size like this: https://gist.github.com/KarelPeeters/ee0b3b27b178efb002500f035c360694
[02:01:12] *** Quits: AmR (~AmREiSa@156.199.106.121) (Quit: Konversation terminated!)
[02:03:34] *** Quits: jacki (~jacki@93-44-189-64.ip98.fastwebnet.it) (Quit: Leaving)
[02:04:38] <RandomReader> the types aren't compatible, so there's no way to do that without full data conversion
[02:04:50] <RandomReader> as in, int* and int[N] are not interchangeable types
[02:05:02] <cbreak> Karel: only by copying, if you are absolutely sure that the int pointer points to an int in a sequence of at least R length
[02:05:32] <RandomReader> if all you need is set length for the rest of the function, just use R directly, keep the param as int*
[02:05:44] <cbreak> you could do reinterpret cast trickery if you want
[02:05:49] <cbreak> but I wouldn't recommend it, it's UB
[02:07:13] <cbreak> it'd go something like *reinterpret_cast<int*[4]>(someIntPtr) // bad idea
[02:07:15] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Quit: Leaving)
[02:07:40] <Karel> Yeah copying is completely fine, I'm just wondering how to go about it. Do I just define a temporary field eg. int tmp[2], then call memcpy(&tmp, x, size) and then pass tmp as an argument?
[02:07:54] <Karel> cbreak, Huh and why is that UB?
[02:08:15] <RandomReader> https://eel.is/c++draft/basic.compound#note-4
[02:08:41] <RandomReader> you could but you'd need a tmp[N] for each call
[02:08:53] <RandomReader> is this really the problem to solve though? this seems odd, as an interface
[02:09:03] <cbreak> Karel: if you want to copy, std::copy can do it fine.
[02:09:37] *** Joins: a__ (~a@69.165.165.206)
[02:10:00] <Karel> RandomReader, Yeah I really need it to be int[R], down the line it calls a cuda kernel and those need fixed-size parameters for them to get put into constant memory.
[02:10:08] *** Quits: a_ (~a@69.165.165.206) (Remote host closed the connection)
[02:10:24] <RandomReader> fixed-size isn't the same as needing an array
[02:10:49] <RandomReader> like even that function signature doesn't work for C++
[02:11:07] <cbreak> Karel: I think it's UB because I can't think of where it would be defined to do something
[02:11:52] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[02:13:35] <RandomReader> as in, foo(int a[42])  is still just foo(int*)
[02:13:42] <Karel> Ah wait really
[02:14:02] <Karel> Looks like I've been writing too much Rust recently :)
[02:14:27] <Karel> What's the type for "an array of R ints by value" then?
[02:14:33] <RandomReader> there isn't one
[02:14:39] <RandomReader> arrays don't get passed by value
[02:15:11] <RandomReader> there's the library type std::array which is more sensible and can be treated as a value, but it seems like your original question is about the CUDA interface, so I'd think that would be the starting point here
[02:15:41] <Karel> Yeah I need to look into that more I though it would be this simple but I guess not :)
[02:16:21] *** Quits: damiano (~cesello@host-188-13-240-8.business.telecomitalia.it) (Read error: Connection reset by peer)
[02:16:28] <RandomReader> what is that fixed-size interface that you're trying to match?
[02:16:47] *** Quits: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de) ()
[02:18:08] <cbreak> Karel: you can pass arrays by const ref (or non-const ref)
[02:19:04] <Karel> RandomReader, My own :), but it looks like it's completely wrong: https://gist.githubusercontent.com/KarelPeeters/a34c942e82b1a1ec5e14c2004d69edb8/raw/93b35cea78cc3d1e3e5e5efa0b43101c536e3ee2/kernels.cu
[02:19:15] <Karel> I'm sorry for the XY problem :)
[02:19:41] <RandomReader> oh
[02:20:24] <cbreak> you can think of that function taking pointer parameters
[02:21:30] <Karel> cbreak, Yeah but I don't want that, the requirement is to pass things by value to get the cuda compiler to put things in constant memory
[02:21:34] <RandomReader> I'd also note that some of what you need might be specifically in the CUDA compiler's extensions/modifications, rather than in C++ itself
[02:21:44] <RandomReader> since it's not C++, it's its own thing
[02:24:50] <cbreak> Karel: how about you pass it as texture? :D
[02:25:00] <cbreak> those are read with texture caching
[02:26:40] <cbreak> or you can use shared memory with extern __shared__ int shared[]; in the function body, and copy stuff there
[02:27:15] <cbreak> Karel: also, I'm sure the compiler will be more inclined to consider it constants if you actually mark it as const
[02:28:15] <Karel> cbreak, A texture for up to 12 ints feels a bit strange :)
[02:28:21] <Karel> What's next, interpolation?
[02:28:26] <Karel> mipmaps
[02:29:09] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Quit: Leaving)
[02:29:25] <Karel> It looks like something like this works: https://gist.github.com/KarelPeeters/b2dd100654e4ab0ea6d1fffadf855a6b
[02:29:59] <cbreak> why not make it const?
[02:30:04] <cbreak> (and pass it by ref)
[02:30:15] *** Joins: cesello (~cesello@user/cesello)
[02:31:05] <Karel> Since then I need to copy it to the device myself, no? Initially I was just passing *ints along to the kernel but then it was trying to access host memory.
[02:31:43] <cbreak> you would need to copy to the device anyway, wouldn't you?
[02:32:40] *** Quits: pizdets (~pizdets@183.182.114.206) (Ping timeout: 250 seconds)
[02:32:47] <Karel> No this way (when things are passed by value) cuda itself already copies everything to device memory for you
[02:33:02] <Karel> And specifically constant memory
[02:33:18] <Karel> As far as I understand
[02:33:49] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[02:33:57] <cbreak> so std::array would work too
[02:33:58] *** Joins: pizdets (~pizdets@183.182.110.93)
[02:34:06] <cbreak> ... maybe not...
[02:34:46] <RandomReader> that doesn't seem to make sense unless the cuda compiler has something different it calls "arrays"
[02:34:55] <RandomReader> since arrays can't be treated as values in C or C++
[02:35:13] <Karel> Well if you put them in a struct they're passed by value
[02:35:36] <Karel> Is std::array basically the same thing as my struct but for only one array? The it should work too yeah
[02:35:39] <RandomReader> but how would it know what to do with them?
[02:36:03] <RandomReader> there's no reflection so it can't know they exist
[02:36:08] <Karel> It handles them the same way as if you would have just passed a bunch of int parameters separately
[02:36:48] <RandomReader> I'm saying the magic "ends up in constant memory just by calling a function" doesn't inherently make sense
[02:37:19] <RandomReader> there's likely more to it than that, or some *really* interesting language extensions
[02:37:24] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:37:56] <Karel> Ah no it does have reflection in that sense, you don't compile these with a normal C++ compiler, and then you don't just call them there's a strange syntax for it, stridedCopyKernel<float, 2><<<blocks, blockSize, 0, stream>>>(size, strides, input, output); in this case
[02:38:11] <Karel> So yeah a bunch of language extensions
[02:38:27] <RandomReader> ok, that looks like a copy function, and some dynamic-looking parameters
[02:38:45] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[02:38:58] <RandomReader> so is there an equivalent that will handle a dynamically-sized array?
[02:39:31] <RandomReader> then you wouldn't need to start with C++ compile-stage sizing, and the whole thing would be simpler
[02:39:54] <Karel> Yeah but I want the innermost for loop (over r) to be unrolled.
[02:40:18] <RandomReader> but all you need is a count for that, not a fixed *type*
[02:40:44] <RandomReader> (and if you're doing this, then that implies the cuda compiler magic isn't, so I'm still left wondering why the constant thing is relevent here)
[02:41:15] <Karel> (I mean fully unrolled, not just partially, so R needs to be known at compile time)
[02:41:26] <RandomReader> yes, but R is just a count, a number .. not a *type*
[02:41:51] <RandomReader> int* in a loop with a known R is no different from int[R]
[02:42:14] <RandomReader> except for actually working with the language, since that's how the expressions on array variables decompose anyway
[02:42:36] <RandomReader> and since the underlying functions appear to be copy instructions, there's no need to pass by value to begin with, right?
[02:42:50] <RandomReader> it'd be a redundant copy
[02:43:00] <Karel> But the total size of the parameters changes depending on R!
[02:43:30] <RandomReader> the size of the data to be copied does, yes
[02:43:34] <RandomReader> why does that affect the parameters?
[02:43:35] <Karel> No int[R] is just stride information, not the actual bulk data to be copied. It will always be tiny (R <= 6)
[02:45:18] <Karel> The bulk-copy for loop happens kind of magically, the function stridedCopyKernel is "called" blocks * blocksize times on the GPU with different values for blockIdx and threadIdx, so different i.
[02:45:51] <Karel> The inner loop over R just does a small bit of math to decide where to copy to/from
[02:46:51] <RandomReader> ok, and how does this unrolling require int[R] as opposed to int* and R?
[02:48:02] <RandomReader> I feel like there's some disconnect in terminology, language behavior, cuda extensions, something .. I just don't know what it is yet
[02:48:17] *** Quits: a__ (~a@69.165.165.206) (Remote host closed the connection)
[02:51:50] <Karel> Well the cuda compiler copies parameters of functions into constant memory (on the GPU) for you, so it's fast/easy to access them. If I give it an *int I'll have fast access to a CPU-ram pointer that doesn't even work on the GPU. So instead, I want to pass the values in the array as parameters (by value, like all parameters) instead of a pointer to the array.
[02:52:17] <Karel> I thought int[R] was the solution, like it would be in Rust, but as you said that's wrong because that also just behaves like a pointer
[02:53:15] <Karel> But "template<int R> struct Foo { int[R] }" is a solution, since that doesn't behave like a pointer any more but instead like a "true value"
[02:53:46] <RandomReader> ah
[02:53:57] <RandomReader> this still strikes me as unusual in a general sense, but I don't know CUDA, so
[02:54:03] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 244 seconds)
[02:54:17] <RandomReader> "unusual" in that it still feels like a roundabout solution when there's something more direct
[02:55:10] <RandomReader> especially since device-constant-from-dynamic-input can't be an uncommon thing
[02:56:15] <Karel> But the input size isn't actually dynamic from the POV from the specialized kernel
[02:56:27] <Karel> Since the loop has been completely unrolled
[02:57:06] <Karel> But yeah maybe there's another solution, but I can't find it
[02:57:53] <Karel> Hah I just found this, that's what people usually seem to do, just only support one R and unroll things themselves: https://github.com/LeelaChessZero/lc0/blob/master/src/neural/cuda/common_kernels.cu#L130-L148
[03:03:16] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[03:03:52] <Karel> Hmm std::array doesn't work, it's probably too complicated for the compiler to figure out :)
[03:10:03] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:10:08] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I've gone to sleep...)
[03:12:56] <cloudbender> what are you trying to do ?
[03:13:10] *** wootehfoot is now known as Supersaiyan_IV
[03:13:40] *** Supersaiyan_IV is now known as wootehfoot
[03:14:10] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:19:55] <Karel> cloudbender, Now I'm back to my original problem, how to go from a *int with compile-time known size R to a int[R].
[03:19:55] <Karel> https://gist.github.com/KarelPeeters/a2cd948e7a8812e2f46f45cf53bb44ec
[03:19:58] <Karel> This is fully working now
[03:20:30] <Karel> But lines 44-51 are annoying and basically all of stridedCopyKernelWrapper only exists to contain those lines
[03:23:21] <cloudbender> Am I sensing you are converting many *int to an array of *int ?
[03:24:10] <Karel> Well it's always 3 times *int to 3 times int[R], _not_ (*int)[R].
[03:30:04] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[03:36:03] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:37:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:37:33] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[03:39:55] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[03:44:00] <Karel> Got it cleaned up by adding a constructor and operator[] to the array struct: https://gist.github.com/KarelPeeters/ece1b49225fc1928bf82ee1565d5314d
[03:44:33] <Karel> It's surprising to me that std::array doesn't have a from-pointer constructor like this
[03:45:48] <cloudbender> The pointer declares in line 41 confuse me.  They are single ints, not arrays.
[03:46:05] <cloudbender> But I'm easily confused, so ...
[03:47:55] <Brewster> this might be more of a linux-y question but it's supposedly part of the standard c++ thread support library
[03:48:07] <Brewster> what package do I need to #include <semaphore>
[03:48:08] *** Quits: lovelace (~paul@2.24.23.175) (Quit: Konversation terminated!)
[03:48:12] <cloudbender> and following in lines 46,48,50 you are moving each int into an array of one int
[03:49:01] <Brewster> https://en.cppreference.com/w/cpp/thread/counting_semaphore
[03:49:32] <Brewster> I'm trying to use the binary semaphore but it doesn't seem to be in semaphore.h
[03:49:41] *** Joins: cloudbender61 (~cloudbend@user/cloudbender)
[03:49:47] <Karel> cloudbender, int* input_strides is a pointer to the start of an "array" of R integers, and I want to copy that into an array int[R] allocated on the stack.
[03:50:15] <Karel> int* can be to a single int but it can just as well be to a bunch of ints :)
[03:51:31] <Karel> 46..50 are copying the int values from the array behind a pointer to new arrays just allocated on the stack
[03:52:55] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 252 seconds)
[03:53:46] *** presonic is now known as highrate
[03:54:40] *** Quits: cloudbender61 (~cloudbend@user/cloudbender) (Ping timeout: 265 seconds)
[03:59:24] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[03:59:26] *** Quits: froggy (~froggy@2.235.241.212) (Ping timeout: 258 seconds)
[04:00:37] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:01:45] *** Quits: Karel (~Karel@ptr-9091p57s6xbhk4qg1xx.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[04:03:26] *** Quits: LNokto (~LNokto@user/lnokto) (Ping timeout: 245 seconds)
[04:03:55] *** Joins: LNokto (~LNokto@user/lnokto)
[04:04:10] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 260 seconds)
[04:04:56] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f413:894:cbd8:9458) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:13:02] *** Joins: Guest19 (~Guest19@c-98-239-165-66.hsd1.pa.comcast.net)
[04:13:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[04:13:31] <Guest19> error: redefinition of '__libcpp_is_integral<char> when trying to compile ctools (CP/M filesystem util).  macOS Catalina / command line tools installed.  This gets defined like twenty times in a row, so I don't understand why the compiler balks at it.
[04:13:52] <Guest19> template <>          struct __libcpp_is_integral<char>               : public true_type {};
[04:14:03] <Guest19> template <>          struct __libcpp_is_integral<bool>               : public true_type {};
[04:14:14] <Guest19> ...and the file this is happening in is _part_of_the_compiler_install_ so that's really baffling.
[04:14:23] <Guest19> error occurs at /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:740
[04:14:29] <Guest19> thoughts / ideas?
[04:16:52] *** Joins: cation (cation@user/cation)
[04:21:42] <RandomReader> Brewster - it's C++20, so will need a newer toolchain .. looks like gcc 11 or clang 11 (paired with the same version stdlib)
[04:24:32] <Brewster> lol thanks, I was suspecting that was the case
[04:24:47] <Brewster> g++ only goes up to 8 in my distro though
[04:24:54] <Brewster> I think a regular mutex would do
[04:25:30] *** Quits: magla (~gelignite@55d43ee1.access.ecotel.net) (Quit: Stay safe!)
[04:25:44] <RandomReader> Guest19 - normally you'd talk to the maintainers about a project you're simply trying to use
[04:26:14] <Guest19> @randomreader I think they've died.
[04:26:31] <RandomReader> ..yeah, was going to say, that one appears to be so old that it pre-dates the first C++ standard, so it may need some work
[04:27:53] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[04:30:55] *** Quits: Optimus (~risto@87.227.237.59) (Ping timeout: 265 seconds)
[04:31:00] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[04:31:23] <anyone> I remember the war stories about Borland C++ on DOS..
[04:31:24] <RandomReader> you could try adding   -std=gnu++98    to CXXFLAGS, but if that doesn't work, you'll need someone who wants to spend the time on the project itself
[04:33:15] <RandomReader> this particular error is probably more about old/bad #include order, but no way of telling what else might be going on, so it's an unbounded kind of issue
[04:34:42] *** Joins: LNokto (~LNokto@user/lnokto)
[04:36:08] *** Quits: SorinK (~SK@86.127.15.118) (Remote host closed the connection)
[04:38:57] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[04:50:35] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:55:00] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[05:00:43] *** Joins: dld (~davidlowr@2601:197:600:1210:5db6:6f5a:3b6e:25f9)
[05:01:56] *** Joins: The_Jag_ (~The_Jag@host-87-15-17-212.retail.telecomitalia.it)
[05:04:15] *** Quits: The_Jag (~The_Jag@host-87-17-20-218.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:06:30] *** Joins: rgrinberg (~textual@201.182.226.118)
[05:12:18] *** Quits: tomith (tomith@85-156-184-155.elisa-laajakaista.fi) (Quit: tomith)
[05:15:47] *** Quits: rackj (~rackj@c-73-140-240-136.hsd1.wa.comcast.net) (Quit: Client closed)
[05:23:30] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[05:27:03] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:28:13] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Client Quit)
[05:30:08] *** Joins: fengdaolong (~fengdaolo@183.93.98.36)
[05:35:46] *** Quits: fengdaolong (~fengdaolo@183.93.98.36) (Ping timeout: 244 seconds)
[05:36:30] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[05:37:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:04] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[05:37:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:07] *** ChanServ sets mode: +v npaperbot
[05:37:28] *** Joins: fengdaolong (~fengdaolo@183.94.82.151)
[05:38:25] <Guest19> @randomreader I simplified my life and found a linux machine.  Compiles first try.
[05:38:34] <Guest19> Thanks for the help nonetheless
[05:48:28] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:53:55] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:54:08] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[06:03:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:08:02] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:08:37] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I've gone to sleep...)
[06:11:46] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 245 seconds)
[06:15:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[06:15:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:28:50] *** Quits: fengdaolong (~fengdaolo@183.94.82.151) (Ping timeout: 260 seconds)
[06:30:49] *** Joins: fengdaolong (~fengdaolo@183.93.98.239)
[06:31:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:39:03] *** Joins: ormaaj2 (~ormaaj2@user/ormaaj)
[06:39:25] *** Parts: ormaaj2 (~ormaaj2@user/ormaaj) ()
[06:39:29] *** Quits: Guest19 (~Guest19@c-98-239-165-66.hsd1.pa.comcast.net) (Quit: Client closed)
[06:41:40] *** Joins: Viewday7 (~Viewday@user/viewday)
[06:42:48] *** Quits: Viewday (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:42:48] *** Viewday7 is now known as Viewday
[06:43:34] *** Quits: fengdaolong (~fengdaolo@183.93.98.239) (Ping timeout: 260 seconds)
[06:45:17] *** Joins: fengdaolong (~fengdaolo@183.93.99.113)
[06:46:23] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6274:3e6b:ca61:27ef)
[07:02:41] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 265 seconds)
[07:06:43] *** Joins: sn0wdrone (~snowdrone@user/snowdrone)
[07:07:50] *** Quits: snowdrone (~snowdrone@user/snowdrone) (Ping timeout: 250 seconds)
[07:08:05] *** Quits: sn0wdrone (~snowdrone@user/snowdrone) (Read error: Connection reset by peer)
[07:08:30] *** Joins: snowdrone (~snowdrone@user/snowdrone)
[07:09:22] *** Quits: snowdrone (~snowdrone@user/snowdrone) (Remote host closed the connection)
[07:10:24] *** Joins: snowdrone (~snowdrone@user/snowdrone)
[07:16:42] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[07:20:30] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[07:22:39] *** Joins: Carbonflux (~Carbonflu@c-24-56-228-141.customer.broadstripe.net)
[07:27:17] *** Quits: Player001 (~Player001@user/player001) (Quit: Read Hegel and Lacan and Marx)
[07:32:18] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:32:56] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6274:3e6b:ca61:27ef) (Quit: Leaving)
[07:33:09] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6274:3e6b:ca61:27ef)
[07:37:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[07:38:59] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Quit: Leaving)
[07:44:25] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 244 seconds)
[07:47:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:03:55] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[08:13:53] *** Joins: enferex (~enferex@users.757.org)
[08:14:46] *** Joins: chozorho (~chozorho@2601:146:300:c30::8489)
[08:18:31] *** Quits: fengdaolong (~fengdaolo@183.93.99.113) (Ping timeout: 244 seconds)
[08:18:43] <enferex> I have a Wrapper class that inherits from std::string.  I want Wrapper to handle cases when Wrapper instances are passed to functions as std::strings. I'm not sure this is possible, I failed detecting this with Wrappers conversion operator.
[08:20:28] *** Joins: fengdaolong (~fengdaolo@183.94.82.204)
[08:21:06] *** Quits: jeremy_k (~jeremy_k@c-65-50-184-73.hs.gigamonster.net) (Remote host closed the connection)
[08:22:54] *** Parts: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Leaving)
[08:27:19] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[08:30:27] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:32:33] *** Joins: Sadale (~Sadale@user/sadale)
[08:33:06] *** Joins: frost (~frost@user/frost)
[08:36:27] *** Quits: fengdaolong (~fengdaolo@183.94.82.204) (Ping timeout: 265 seconds)
[08:37:19] *** Joins: fengdaolong (~fengdaolo@183.93.99.65)
[08:40:44] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: brb)
[08:41:25] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[08:44:14] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[08:46:22] *** Joins: ravan (~ravan@user/ravan)
[08:46:25] *** Quits: fengdaolong (~fengdaolo@183.93.99.65) (Ping timeout: 244 seconds)
[08:47:09] *** Joins: dmaroo (~dhruv@157.47.63.218)
[08:48:38] *** Joins: fengdaolong (~fengdaolo@183.93.98.36)
[08:50:00] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[08:50:09] *** Joins: Sadale_ (~Sadale@user/sadale)
[08:53:38] *** Quits: fengdaolong (~fengdaolo@183.93.98.36) (Ping timeout: 244 seconds)
[08:55:32] *** Joins: fengdaolong (~fengdaolo@183.93.98.155)
[09:00:06] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[09:05:31] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 244 seconds)
[09:06:46] *** Joins: ravan (~ravan@42.201.198.151)
[09:06:49] *** Quits: ravan (~ravan@42.201.198.151) (Client Quit)
[09:08:42] <ville> enferex: a conversion to a base class will never use a conversion function
[09:09:51] <ville> or conversion to reference-to-base class for that matter
[09:17:03] *** Quits: fengdaolong (~fengdaolo@183.93.98.155) (Ping timeout: 265 seconds)
[09:17:53] <ville> enferex: you should be able to get your compiler warn you about this if you pass it enough flags
[09:17:58] <ville> !give enferex -Wall
[09:17:59] <nolyc> enferex: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[09:18:54] *** Joins: fengdaolong (~fengdaolo@183.93.99.113)
[09:20:10] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 252 seconds)
[09:22:51] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[09:24:07] *** Quits: fengdaolong (~fengdaolo@183.93.99.113) (Ping timeout: 244 seconds)
[09:24:33] *** Joins: fengdaolong (~fengdaolo@183.93.98.239)
[09:26:21] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6274:3e6b:ca61:27ef) (Ping timeout: 245 seconds)
[09:27:41] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[09:27:43] <RandomReader> (more generally, if that scenario matters, then it's not true that Wrapper is-a std::string which means inheritance is the wrong model .. it sounds more like Wrapper is intended to be its own thing, simply containing a std::string member internally)
[09:28:04] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:37:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:08] *** ChanServ sets mode: +v npaperbot
[09:43:54] *** Joins: jeremy_k (~jeremy_k@c-65-50-184-73.hs.gigamonster.net)
[09:44:27] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:48:29] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[09:50:40] *** Sadale_ is now known as Sadale
[09:53:18] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 265 seconds)
[09:58:43] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:09:30] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[10:19:03] *** Joins: rgrinberg (~textual@ip152-195-159-186.ct.co.cr)
[10:19:25] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[10:19:37] *** Quits: pike (~yuval@176.231.160.23) (Quit: Konversation terminated!)
[10:20:00] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[10:25:36] *** Quits: fengdaolong (~fengdaolo@183.93.98.239) (Ping timeout: 244 seconds)
[10:26:52] *** Joins: fengdaolong (~fengdaolo@183.93.99.6)
[10:30:13] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[10:35:30] *** Quits: fengdaolong (~fengdaolo@183.93.99.6) (Ping timeout: 260 seconds)
[10:37:41] *** Joins: fengdaolong (~fengdaolo@183.93.99.113)
[10:45:30] *** Quits: fengdaolong (~fengdaolo@183.93.99.113) (Ping timeout: 265 seconds)
[10:46:50] *** Joins: NEYi (~NEYi@109.251.216.38)
[10:47:35] *** Joins: fengdaolong (~fengdaolo@183.93.98.27)
[10:57:53] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:01:46] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:18:40] *** Joins: robod34 (Username@79.113.195.239)
[11:18:51] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[11:21:20] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[11:21:55] *** Joins: cursey (~cursey@user/cursey)
[11:26:43] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[11:27:06] *** Joins: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32)
[11:29:16] *** Joins: Atque (~Atque@user/atque)
[11:29:26] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[11:29:35] *** Joins: andreasbuhr (~quassel@p549db0bc.dip0.t-ipconnect.de)
[11:30:02] *** Quits: andreasbuhr (~quassel@p549db0bc.dip0.t-ipconnect.de) (Client Quit)
[11:32:36] *** Joins: bitwiser (~dhruv@2409:4070:2e1b:c65d:acb5:3c04:828:2b94)
[11:32:43] *** Quits: dmaroo (~dhruv@157.47.63.218) (Ping timeout: 252 seconds)
[11:32:51] *** Joins: magla (~gelignite@55d4df94.access.ecotel.net)
[11:34:52] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:37:11] *** Quits: rgrinberg (~textual@ip152-195-159-186.ct.co.cr) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:44:06] *** Quits: fengdaolong (~fengdaolo@183.93.98.27) (Ping timeout: 260 seconds)
[11:44:13] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Quit: ZNC 1.8.2 - https://znc.in)
[11:44:34] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[11:46:01] *** Joins: fengdaolong (~fengdaolo@183.93.98.36)
[11:49:22] *** Joins: src (~src@user/src)
[11:51:07] <Inst> if i auto all my variables will my genitals fall off?
[11:51:21] *** Quits: xisop (~xisop@bnull.net) (Ping timeout: 245 seconds)
[11:58:52] *** Joins: rendar (~rendar@user/rendar)
[12:01:13] *** Quits: kts_ (~kts@103.73.237.174) (Quit: Konversation terminated!)
[12:01:32] *** Joins: kts (~kts@103.73.237.174)
[12:02:30] *** Quits: fengdaolong (~fengdaolo@183.93.98.36) (Ping timeout: 260 seconds)
[12:03:28] <cbreak> no
[12:04:00] <cbreak> your future self will just invent a time machine to go back and murder you for writing unreadable code.
[12:04:29] *** Joins: fengdaolong (~fengdaolo@183.94.82.151)
[12:05:59] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[12:09:27] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:402d:e275:f744:5ade)
[12:10:56] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 245 seconds)
[12:16:42] *** Quits: fengdaolong (~fengdaolo@183.94.82.151) (Ping timeout: 244 seconds)
[12:18:50] *** Joins: fengdaolong (~fengdaolo@183.94.82.49)
[12:21:16] *** Joins: xisop (~xisop@bnull.net)
[12:25:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:26:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[12:27:30] *** Joins: furrymcgee (~devuan@cgn-89-1-210-103.nc.de)
[12:28:51] *** Quits: fengdaolong (~fengdaolo@183.94.82.49) (Ping timeout: 245 seconds)
[12:30:18] *** Quits: xisop (~xisop@bnull.net) (Ping timeout: 260 seconds)
[12:30:39] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:30:50] *** Joins: xisop (~xisop@bnull.net)
[12:30:59] *** Joins: fengdaolong (~fengdaolo@183.93.99.137)
[12:31:13] *** Joins: bobb_ (~bobb_@dslb-092-074-254-082.092.074.pools.vodafone-ip.de)
[12:33:13] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:36:07] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:37:22] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 244 seconds)
[12:37:52] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:38:34] *** Joins: froggy (~froggy@2.235.241.212)
[12:39:16] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[12:39:37] *** Quits: xisop (~xisop@bnull.net) (Ping timeout: 258 seconds)
[12:40:59] *** Quits: fengdaolong (~fengdaolo@183.93.99.137) (Ping timeout: 244 seconds)
[12:42:51] *** Joins: fengdaolong (~fengdaolo@183.94.82.244)
[12:45:16] *** Joins: xisop (~xisop@bnull.net)
[12:52:09] <ville> Inst: only one way to find out. certainly projects in the "one-man, sub-10k loc"-category can't see it mattering one bit. hardly matters what you decide to do there
[12:53:47] <Inst> tbh stuff like int, string, char, double, etc are strictly unnecessary
[12:53:51] <Inst> except in declarations
[12:53:58] <Inst> i guess it matters more when you're handling objects
[12:54:01] <Inst> created by classes
[12:54:29] <Inst> int -> any number, string -> any variable assigned by a quotes value, double -> any number with a decimal in it
[12:54:37] <Inst> char: single quote
[12:58:13] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Quit: ZNC - https://znc.in)
[12:58:51] *** Quits: chozorho (~chozorho@2601:146:300:c30::8489) (Ping timeout: 245 seconds)
[13:00:52] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[13:02:35] *** Joins: tafa (~tafa@5.2.76.31)
[13:03:10] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[13:05:26] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[13:05:46] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 244 seconds)
[13:07:35] *** Joins: plastico (~plastico@neomutt/plastico)
[13:07:50] *** Quits: fengdaolong (~fengdaolo@183.94.82.244) (Ping timeout: 244 seconds)
[13:08:51] *** Quits: SecretFire (~secret-fi@75-164-146-104.ptld.qwest.net) (Quit: Konversation terminated!)
[13:09:12] *** Joins: SecretFire (~secret-fi@75-164-146-104.ptld.qwest.net)
[13:10:13] *** Joins: fengdaolong (~fengdaolo@183.94.82.220)
[13:11:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[13:13:07] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[13:17:10] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[13:19:56] *** Quits: kts (~kts@103.73.237.174) (Quit: Konversation terminated!)
[13:20:00] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:20:08] *** Joins: Optimus (~risto@87.227.237.59)
[13:20:18] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[13:23:42] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:402d:e275:f744:5ade) (Ping timeout: 258 seconds)
[13:28:52] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:30:59] *** Quits: fengdaolong (~fengdaolo@183.94.82.220) (Ping timeout: 264 seconds)
[13:32:34] *** Joins: fengdaolong (~fengdaolo@183.93.99.65)
[13:34:33] *** Joins: Miyu (~hackkitte@154-148-165-046.ip-addr.inexio.net)
[13:37:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:09] *** ChanServ sets mode: +v npaperbot
[13:37:35] *** Quits: fengdaolong (~fengdaolo@183.93.99.65) (Ping timeout: 264 seconds)
[13:37:48] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:38:10] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Ping timeout: 260 seconds)
[13:38:53] *** Joins: fengdaolong (~fengdaolo@183.94.153.72)
[13:42:25] *** Joins: Atque (~Atque@user/atque)
[13:46:22] <RandomReader> those *are* objects .. classes in C++ define custom types, they're not a foundation for OOP design or anything
[13:46:45] <RandomReader> you can use custom types to express OOP concepts, C++ supports that, but that's not what they *are* on a base level
[13:47:12] <RandomReader> which means "auto" doesn't make any difference here, it's the same considerations for all code, whether the types are built-in or custom
[13:47:46] *** Quits: Carbonflux (~Carbonflu@c-24-56-228-141.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[13:50:25] <RandomReader> there are a few discussions on "auto" scattered around, but this is probably a decent summary: https://www.fluentcpp.com/2018/09/28/auto-stick-changing-style/
[13:52:33] *** Miyu is now known as hackkitten
[13:56:10] *** Quits: Coldberg (~C-Man@78.31.190.82) (Ping timeout: 260 seconds)
[13:58:23] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Quit: Leaving)
[13:58:45] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[13:59:32] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[14:00:25] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:01:16] *** Quits: fengdaolong (~fengdaolo@183.94.153.72) (Ping timeout: 258 seconds)
[14:01:30] *** Joins: msmhbd^ (~msmhbd@wsip-68-227-92-38.mc.at.cox.net)
[14:02:29] *** Joins: fengdaolong (~fengdaolo@183.93.99.113)
[14:08:05] *** Joins: lovelace (~Elspeth@2.24.23.175)
[14:08:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:13:58] *** Quits: rahl (~rahl@102.114.161.137) (Quit: leaving)
[14:17:15] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:17:32] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[14:17:51] *** Joins: lovelace (~Elspeth@2.24.23.175)
[14:23:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e4ea:1e88:cb3a:f1c4)
[14:33:19] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:37:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:37:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:39:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:42:39] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:43:23] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[14:45:14] *** Quits: fengdaolong (~fengdaolo@183.93.99.113) (Ping timeout: 265 seconds)
[14:45:46] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 252 seconds)
[14:46:52] *** Joins: fengdaolong (~fengdaolo@183.93.99.137)
[14:50:10] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[14:53:47] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 264 seconds)
[14:54:53] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:03:21] *** Joins: chris64 (~chris@user/chris64)
[15:10:32] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Quit: Leaving)
[15:10:49] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[15:16:01] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[15:22:39] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[15:22:41] *** Quits: fengdaolong (~fengdaolo@183.93.99.137) (Ping timeout: 244 seconds)
[15:23:56] *** Joins: neure (~TimoSuora@dzpyl0jyyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[15:24:57] *** Joins: fengdaolong (~fengdaolo@183.94.82.151)
[15:25:32] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[15:30:09] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[15:36:05] *** Joins: Atque (~Atque@user/atque)
[15:40:22] *** Joins: pulse (~pulse@user/pulse)
[15:41:57] *** Joins: sprout_ (~quassel@86-82-44-193.fixed.kpn.net)
[15:43:30] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[15:45:20] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 260 seconds)
[15:57:30] *** Quits: fengdaolong (~fengdaolo@183.94.82.151) (Ping timeout: 260 seconds)
[15:57:33] *** Joins: geeknix (~pi@2001:e68:5432:e7b4:9184:efe7:4bf4:a5de)
[15:59:23] *** Joins: fengdaolong (~fengdaolo@183.93.98.27)
[16:06:21] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[16:09:23] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 264 seconds)
[16:10:45] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[16:12:09] <fluter> hi, is there a way to parse c++ types? like V<T<int, foo>> , how can i get the inner type of int?
[16:13:33] <cbreak> fluter: in what context?
[16:13:57] <cbreak> you can always write a meta function
[16:15:45] <cbreak> like template<typename> struct get_inner; template<typename A, typename B> struct get_inner<V<T<A,B>>> { using type_a = A; using type_b = B; }; // something like this
[16:21:00] *** Joins: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:22:06] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[16:23:29] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:23:53] *** Quits: Spirit532 (~Spirit532@178.127.244.189) (Killed (NickServ (GHOST command used by Spirit5323!~Spirit532@mm-112-217-122-178.mgts.dynamic.pppoe.byfly.by)))
[16:23:54] *** Joins: Spirit532 (~Spirit532@mm-112-217-122-178.mgts.dynamic.pppoe.byfly.by)
[16:23:59] *** Joins: Atque (~Atque@user/atque)
[16:24:19] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[16:26:42] *** Quits: magla (~gelignite@55d4df94.access.ecotel.net) (Quit: Stay safe!)
[16:28:01] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 245 seconds)
[16:31:02] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:32:03] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[16:32:30] *** Joins: AmR (~AmREiSa@156.199.106.121)
[16:34:00] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 244 seconds)
[16:35:26] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I've gone to sleep...)
[16:39:53] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[16:47:39] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[16:50:01] *** Quits: X-Scale (~ARM@31.22.163.11) (Ping timeout: 244 seconds)
[16:50:01] *** X-Scale` is now known as X-Scale
[16:54:53] *** Joins: proller (~p@80.240.216.69)
[16:56:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[17:03:21] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[17:07:34] *** Joins: X-Scale` (~ARM@92.250.96.217)
[17:08:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:08:54] *** Quits: fengdaolong (~fengdaolo@183.93.98.27) (Ping timeout: 260 seconds)
[17:09:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[17:09:21] *** Joins: fengdaolong (~fengdaolo@183.94.82.220)
[17:09:50] *** X-Scale` is now known as X-Scale
[17:11:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:12:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:20:06] *** Joins: rendar (~rendar@user/rendar)
[17:25:16] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Read error: Connection reset by peer)
[17:27:41] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[17:32:34] *** Joins: slidercrank (~slidercra@user/slidercrank)
[17:37:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:11] *** ChanServ sets mode: +v npaperbot
[17:37:14] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[17:37:46] *** Joins: LNokto (~LNokto@user/lnokto)
[17:44:22] *** Quits: bitwiser (~dhruv@2409:4070:2e1b:c65d:acb5:3c04:828:2b94) (Ping timeout: 258 seconds)
[17:54:41] *** Joins: PeriBooty (~PeriBooty@2601:100:817f:2dd0::20b6)
[17:55:56] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:56:03] *** Joins: magla (~gelignite@55d4df94.access.ecotel.net)
[17:56:38] *** Quits: wladimir (~doforlove@user/doforlove33) (Client Quit)
[17:57:14] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:57:33] *** Quits: wladimir (~doforlove@user/doforlove33) (Client Quit)
[18:00:22] *** Quits: PeriBooty (~PeriBooty@2601:100:817f:2dd0::20b6) (Changing host)
[18:00:22] *** Joins: PeriBooty (~PeriBooty@user/peribooty)
[18:02:03] *** Quits: PeriBooty (~PeriBooty@user/peribooty) (Quit: Leaving)
[18:02:16] *** Joins: PeriBooty (~PeriBooty@2601:100:817f:2dd0::20b6)
[18:02:23] *** Quits: PeriBooty (~PeriBooty@2601:100:817f:2dd0::20b6) (Changing host)
[18:02:23] *** Joins: PeriBooty (~PeriBooty@user/peribooty)
[18:03:53] *** Quits: LNokto (~LNokto@user/lnokto) (Read error: Connection reset by peer)
[18:04:30] *** Joins: LNokto (~LNokto@user/lnokto)
[18:06:32] *** Joins: ethrl (uid524335@user/doforlove33)
[18:08:15] *** Quits: fengdaolong (~fengdaolo@183.94.82.220) (Ping timeout: 260 seconds)
[18:10:45] *** Joins: fengdaolong (~fengdaolo@183.93.98.27)
[18:11:06] *** ElementW_ is now known as ElementW
[18:11:41] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[18:14:27] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[18:17:11] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[18:19:44] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[18:26:10] <yates> is there a recommended way to split a std::string in c++11?
[18:29:02] <ville> i'd decide whether you want new string objects, implying allocations and copies of data, or are some sort of views into the original enough. other than that go with whatever you want
[18:30:05] <yates> ville: these are small strings, so i was thinking a convenient return would be std::vector<std::string>
[18:30:39] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4465:42da:6a61:c596)
[18:30:39] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4465:42da:6a61:c596) (Changing host)
[18:30:39] *** Joins: skapata (~Skapata@user/skapata)
[18:30:53] <anyone> or use the old C trick: exchange the split character for \0 (assuming it's not otherwise used), then access the string data with C string logic
[18:32:38] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:33:10] <yates> anyone: yes, that is a possibility. thanks.
[18:33:35] <yates> C: takes a licking and keeps on ticking...
[18:33:59] <yates> (does anyone remember the old Timex watch commercials anymore?)
[18:35:12] <ville> i guess you should be able to use ranges for this sort of thing
[18:35:19] <ville> oh wait 11. nevermind
[18:36:07] <yates> in my newish job (less than 2 years now) we are confined to lubuntu 18.04 LTS
[18:36:21] <yates> and the associated old-ish compiler version
[18:36:46] <furrymcgee> getline?
[18:37:28] * yates hands furrymcgee a cold fish
[18:38:36] <furrymcgee> split it in half please
[18:39:05] <yates> lol
[18:39:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:f415:c2d6:236d:7d8b)
[18:39:49] <Alipha> std::stringstream + std::getline is the easy to write solution
[18:41:15] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[18:41:30] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0d00-af10-da91-027d.res6.spectrum.com)
[18:43:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:f415:c2d6:236d:7d8b) (Ping timeout: 245 seconds)
[18:46:46] *** Quits: fengdaolong (~fengdaolo@183.93.98.27) (Ping timeout: 244 seconds)
[18:47:53] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[18:48:16] *** Joins: fengdaolong (~fengdaolo@183.93.99.109)
[18:48:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:50:02] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c3d4:ecc4:d44c:ce60)
[18:50:19] *** Quits: fengdaolong (~fengdaolo@183.93.99.109) (Client Quit)
[18:54:28] *** Quits: snowdrone (~snowdrone@user/snowdrone) (Remote host closed the connection)
[18:54:58] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:55:35] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:55:44] *** Joins: snowdrone (~snowdrone@user/snowdrone)
[18:57:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:58:39] *** Quits: msmhbd^ (~msmhbd@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[19:00:59] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 264 seconds)
[19:02:37] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[19:03:59] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[19:05:00] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:11:22] *** Joins: Null_A (~null_a@2601:645:8700:2290:f415:c2d6:236d:7d8b)
[19:16:00] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[19:18:38] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:22:19] *** Joins: vqueiroz (uid340368@id-340368.hampstead.irccloud.com)
[19:22:33] *** Joins: paulmcquad (~gamer@78.17.229.141)
[19:25:19] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:27:44] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[19:28:09] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Changing host)
[19:28:09] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[19:28:30] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[19:29:52] *** Joins: rgrinberg (~textual@201.182.226.118)
[19:33:50] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:35:58] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[19:36:12] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 265 seconds)
[19:39:34] *** Joins: andrey (~quassel@62.33.81.197)
[19:40:16] *** Quits: andrey (~quassel@62.33.81.197) (Client Quit)
[19:40:58] *** Quits: snowdrone (~snowdrone@user/snowdrone) (Remote host closed the connection)
[19:42:13] *** Joins: snowdrone (~snowdrone@user/snowdrone)
[19:43:17] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[19:44:43] *** Joins: Atque (~Atque@user/atque)
[19:46:37] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[19:58:19] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:59:18] *** Joins: aportnoy1 (~aportnoy@2607:f720:1901:1060::100)
[19:59:26] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:01:42] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Ping timeout: 244 seconds)
[20:01:42] *** Quits: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 244 seconds)
[20:02:50] *** Joins: lucido (~lucido@p548819c0.dip0.t-ipconnect.de)
[20:03:01] *** Joins: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com)
[20:03:23] <ian|> is it good practice to use rvalue references for all reference function parameters?
[20:04:14] *** Joins: ferdna (~ferdna@user/ferdna)
[20:05:14] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[20:05:20] <jkaye> No, not all parameters are going to be rvalues
[20:06:21] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:08:22] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:08:31] <ian|> but if i pass an lvalue won't it be accepted by &&
[20:08:34] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[20:08:53] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 258 seconds)
[20:09:46] *** Quits: aportnoy1 (~aportnoy@2607:f720:1901:1060::100) (Read error: Connection reset by peer)
[20:11:25] *** Joins: aportnoy1 (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[20:11:29] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[20:11:50] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:12:41] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[20:13:14] <PJBoy> so there you go
[20:13:34] <PJBoy> different references for different kinds of arguments
[20:14:13] <jkaye> https://godbolt.org/z/ThGhEf9f8
[20:14:21] <jkaye> Pretty simple to show where that falls apart
[20:14:36] <jkaye> I wonder if you're thinking about perfect forwarding or universal references?
[20:14:47] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[20:16:25] <ian|> i don't know about const&
[20:18:08] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[20:18:36] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:22:32] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Client Quit)
[20:22:49] <ian|> "Unlike references to non-const values, which can only be initialized with non-const l-values, references to const values can be initialized with non-const l-values, const l-values, and r-values."
[20:23:03] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:23:22] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[20:26:36] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[20:26:57] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[20:27:40] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:28:00] *** Joins: pikapika_lunar (~pikapika_@pika.powered.by.lunarbnc.net)
[20:28:11] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[20:28:46] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:30:21] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Ping timeout: 258 seconds)
[20:30:44] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[20:30:59] *** Quits: Null_A (~null_a@2601:645:8700:2290:f415:c2d6:236d:7d8b) (Remote host closed the connection)
[20:31:23] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:33:01] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:33:44] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Read error: Connection reset by peer)
[20:33:59] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[20:34:57] *** Quits: lovelace (~Elspeth@2.24.23.175) (Ping timeout: 258 seconds)
[20:35:12] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:35:59] *** Quits: cesello (~cesello@user/cesello) (Quit: Cia')
[20:36:49] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 244 seconds)
[20:38:24] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[20:39:50] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:40:36] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:42:30] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[20:43:43] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:44:02] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[20:44:49] *** Joins: lovelace (~Elspeth@2.24.23.175)
[20:45:38] *** Joins: Jmtrix (~qed@user/jmtrix)
[20:46:04] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[20:50:25] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 260 seconds)
[20:50:38] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[20:52:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:53:53] *** Quits: lucido (~lucido@p548819c0.dip0.t-ipconnect.de) (Ping timeout: 244 seconds)
[20:56:50] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[20:56:55] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:57:32] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[20:57:38] *** Quits: rgrinberg (~textual@201.182.226.118) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:57:49] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[20:58:00] *** Quits: aportnoy1 (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 244 seconds)
[20:58:10] *** Joins: lovelace (~Elspeth@2.24.23.175)
[20:58:19] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[20:59:28] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:00:01] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Read error: No route to host)
[21:00:38] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[21:02:03] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[21:03:57] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[21:04:27] *** Joins: Praise (~Fat@user/praise)
[21:04:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:f415:c2d6:236d:7d8b)
[21:04:52] *** Joins: teepee (~teepee@openscad/teepee)
[21:05:11] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[21:08:55] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:10:13] *** Quits: emerent (~quassel@p200300cd5748559eba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[21:10:23] *** Joins: emerent (~quassel@p200300cd574855b8ba27ebfffed28a59.dip0.t-ipconnect.de)
[21:11:47] <enferex> ville: Thanks for the info, you answered my question.
[21:14:23] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[21:15:02] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:15:25] <Alipha> ian|: if you need to modify a parameter, you pass by non-const lvalue reference. primitives and small structs (ie, cheap to copy) should be passed by value. If you need read-only access to parameter which will not benefit from "resource stealing", then pass by const lvalue reference.
[21:15:52] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:16:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:f415:c2d6:236d:7d8b) (Remote host closed the connection)
[21:16:34] *** Joins: great_taste (~great_tas@190.32.235.20)
[21:16:49] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[21:17:09] *** Quits: mven (~mven@ip70-173-103-41.lv.lv.cox.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:17:38] <Alipha> ian|: if the function would benefit from resource stealing, then I would actually pass by value, NOT by rvalue reference, as you might suspect. If you pass by value, then it's more flexible and allows the caller to either std::move the parameter or not std::move the parameter, depending upon if they want the resources stolen from the object
[21:18:00] *** Joins: mven (~mven@ip70-173-103-41.lv.lv.cox.net)
[21:18:44] <Alipha> I would actually only pass by rvalue reference if the object is a move-only object (eg, unique_ptr) and it cannot be copied, and you want to transfer ownership to the function
[21:19:39] <Alipha> And if the argument is a template parameter, then it's a completely different story
[21:21:59] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 264 seconds)
[21:26:11] *** Joins: lucido (~lucido@p200300de0f1f0fe2f0e04a7415af6a54.dip0.t-ipconnect.de)
[21:26:57] *** Joins: bitwiser (~dhruv@2409:4070:2284:3069:612e:c96a:5126:33b)
[21:30:46] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:32:23] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[21:33:46] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:35:11] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 264 seconds)
[21:37:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:12] *** ChanServ sets mode: +v npaperbot
[21:38:47] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:42:39] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[21:43:01] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c3d4:ecc4:d44c:ce60) (Ping timeout: 245 seconds)
[21:44:10] *** Quits: bitwiser (~dhruv@2409:4070:2284:3069:612e:c96a:5126:33b) (Quit: Konversation terminated!)
[21:46:17] *** Joins: Sora (~Guest@152.78.249.50)
[21:51:29] *** Quits: ian| (~ian|@cpe-104-228-101-152.stny.res.rr.com) (Quit: Client closed)
[22:00:43] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[22:02:46] <yates> if you're using an iterator to iterate through a vector, is there a way to extract the vector index from the iterator?
[22:02:50] <yates> in c++11?
[22:05:40] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:06:14] <TinoDidriksen> std::distance()
[22:06:50] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[22:09:32] <yates> TinoDidriksen: +1
[22:10:24] <lucido> I get a nonsense linker error before this output: ">LINK : warning LNK4075: ignoring '/INCREMENTAL' due to '/OPT:ICF' specification"
[22:10:46] *** Joins: Guest8850 (~Guest88@212.17.41.100)
[22:10:58] *** Parts: Guest8850 (~Guest88@212.17.41.100) ()
[22:11:26] <lucido> The linker error is: dashed_property.lib(ColorEditor.obj) : error LNK2019: unresolved external symbol "public: void __cdecl MultiPropertyIndex::setValue<float>(float,bool,bool,bool)const " (??$setValue@M@MultiPropertyIndex@@QEBAXM_N00@Z) referenced in function "private: void __cdecl dashed_editors::ColorEditor::slotColorChanged(class QColor const &)" (?slotColorChanged@ColorEditor@dashed_editors@@AEAAXAEBVQColor@@@Z)
[22:11:53] *** Quits: neure (~TimoSuora@dzpyl0jyyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Read error: Connection reset by peer)
[22:12:04] <lucido> can they be related,  how to fix the warning?
[22:13:18] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:13:53] *** Joins: ondrodrak (~ondrodrak@user/ondrodrak)
[22:14:00] *** Parts: ondrodrak (~ondrodrak@user/ondrodrak) (Leaving)
[22:14:06] *** Joins: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00)
[22:14:19] <LOOL123> Hello. I could not find tlist command on windows 10 I just could find tasklist instead. I imagine that the book to learn system programming is deprecated. IS it the case of the book I read? It is Windows Internals 7th edition (Part 1) see https://docs.microsoft.com/en-us/sysinternals/resources/windows-internals. Do you suggest me another book more updated? thank you.
[22:14:46] *** Parts: enferex (~enferex@users.757.org) ()
[22:16:44] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Quit: WeeChat 3.3)
[22:16:56] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[22:17:53] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Read error: Connection reset by peer)
[22:17:55] *** Joins: rahl (~rahl@102.114.87.133)
[22:19:05] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[22:28:47] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[22:29:20] <TinoDidriksen> !give LOOL123 windows
[22:29:22] <nolyc> LOOL123: You should ask your Windows programming questions in #C++-general, #winapi, #windows-coding or irc://irc.efnet.org/winprog
[22:30:58] <tct> I have some code base which uses std::invocable. It compiles fine with GCC 10 and GCC 11. Now I try to compile it with clang and I get ´no member invocable in namespace std´. I tried with clang 13 and clang 14. Any ideas?
[22:33:07] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:36:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:36:28] *** Joins: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net)
[22:37:27] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[22:37:39] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:38:07] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:38:34] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[22:39:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:39:44] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:42:50] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:44:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 265 seconds)
[22:45:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:49:51] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:cdbe:d4e8:1dd8:6d8a)
[22:49:51] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:cdbe:d4e8:1dd8:6d8a) (Changing host)
[22:49:51] *** Joins: RoKenn (~RoKenn@user/rokenn)
[22:49:53] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:50:12] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[22:50:36] *** Joins: rendar (~rendar@user/rendar)
[22:57:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[22:58:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[23:02:20] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:06:19] *** Joins: rendar (~rendar@user/rendar)
[23:08:33] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[23:10:21] <RandomReader> tct - seems fine: https://godbolt.org/z/17Pf6nE79
[23:10:35] *** Quits: lucido (~lucido@p200300de0f1f0fe2f0e04a7415af6a54.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[23:10:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:11:07] *** Joins: chozorho (~chozorho@2601:146:300:c30::8489)
[23:12:52] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 244 seconds)
[23:13:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:14:01] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:15:26] *** Joins: rendar (~rendar@user/rendar)
[23:16:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:16:07] *** Joins: rgrinberg (~textual@ip11-246-50-179.ct.co.cr)
[23:17:02] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[23:18:35] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[23:19:22] *** Joins: pah (~pah@user/pah)
[23:19:45] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[23:28:36] *** Joins: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca)
[23:29:06] <leonardus> are visual studio project/solution files supposed to be portable, or are they device-specific?
[23:30:58] <m_ben> leonardus: probably better to ask in #c++-general
[23:31:44] <tct> RandomReader, seems to be related to -stdlib=libc++
[23:32:29] <Alipha> yates: `myIter - myVec.begin()` (or std::distance, as TinoDidriksen said, but that depends upon if you want it to work with non-random-access iterators and to take the penalty for repeated ++ if it's not a random-access iterator)
[23:33:03] *** Quits: Optimus (~risto@87.227.237.59) (Quit: Konversation terminated!)
[23:34:03] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 244 seconds)
[23:34:15] <RandomReader> tct - that switch just uses libc++ which ships with clang, otherwise it might be using libstdc++ that ships with gcc, either way it needs to be appropriately up to date
[23:35:24] *** Joins: RoKenn_ (~RoKenn@2001:a61:3505:d101:9b92:2d34:cdad:8bf)
[23:35:24] *** Quits: RoKenn_ (~RoKenn@2001:a61:3505:d101:9b92:2d34:cdad:8bf) (Changing host)
[23:35:24] *** Joins: RoKenn_ (~RoKenn@user/rokenn)
[23:36:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:38:10] *** Quits: RoKenn (~RoKenn@user/rokenn) (Ping timeout: 252 seconds)
[23:38:59] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:42:21] *** Parts: src (~src@user/src) (Leaving)
[23:53:19] *** Joins: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de)
[23:56:20] *** Quits: paulmcquad (~gamer@78.17.229.141) (Quit: Konversation terminated!)
[23:58:26] *** Quits: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de) (Quit: quit)
[23:58:40] *** Joins: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de)
[23:58:50] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 244 seconds)
