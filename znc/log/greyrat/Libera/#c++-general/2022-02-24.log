[00:01:34] *** Joins: Raziel (~Raziel@user/raziel)
[00:03:26] <MaddHatter> hey, if you need !-path support, it's the only game in town
[00:04:59] *** gentooclimax is now known as climax
[00:06:44] <rpav> uucp address? :P
[00:07:12] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[00:07:13] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[00:07:24] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 272 seconds)
[00:12:41] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:15:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:18:27] *** Quits: filename (~kilitary@kilitary.xyz) (Remote host closed the connection)
[00:34:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:40:50] *** Quits: paul424 (~tom@ip-5-172-234-213.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:44:13] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[00:45:56] *** Joins: cahoots (~cahoots@200.122.212.106)
[00:48:42] <cahoots> hi, why are compact unwind tables necessary? can't we just, on arm64 at least, repeatedly dereference the return address in each stack frame to get the backtrace?
[00:49:53] *** Quits: rajkohaxor (~rajkosto@93-87-207-233.dynamic.isp.telekom.rs) (Quit: Leaving)
[00:51:14] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:7799:28cf:5a29:7ce3:efd1) (Remote host closed the connection)
[00:51:52] *** Joins: p-i- (~Ohmu@183.89.27.225)
[00:54:42] *** Quits: magla (~gelignite@d5360aa7.access.ecotel.net) (Quit: Stay safe!)
[00:55:38] <Alipha> cahoots: from my understanding, the compact unwind tables contain the information for what needs to be done for each stack frame during the unwinding process. and so, it contains what destructors need to be run and if there are any catch blocks in the function
[00:56:20] <Alipha> so yes, following the return addresses will give you a backtrace, but the program needs to know what to do at each point in that backtrace
[00:58:08] <sprout> https://maskray.me/blog/2020-11-08-stack-unwinding
[01:04:04] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:05:17] <cahoots> Alipha, got it. sprout, so that blog post says "In practice, it is not guaranteed that all libraries contain frame pointers" and gives some examples. however, in the source code for apple's backtrace, it calls "_thread_stack_pcs", which just repeatedly dereferences: https://opensource.apple.com/source/Libc/Libc-1272.200.26/gen/thread_stack_pcs.c.auto.html
[01:05:54] <Hello71> whether stack frames always contain base pointers is part of the ABI and varies by implementation
[01:06:28] <Hello71> gcc omits frame pointers on all architectures by default with -O(2?), *except* aarch64
[01:07:02] <Hello71> but that's for historical reasons, not anything inherent to the isa
[01:07:25] <cahoots> Hello71, so backtrace on apple platforms is probably just taking advantage of that fact?
[01:07:27] <Hello71> the article briefly mentions this
[01:07:41] <Hello71> yes, apple can set their toolchain to generate frame pointers by default
[01:07:56] <Hello71> presumably you can turn it off manually, and then backtracing will not work for your program
[01:08:59] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[01:10:11] <CarloWood> Why on Earth would `std::is_trivially_copyable_v<Eigen::Vector4f>` return false?
[01:10:24] *** Quits: proller (~p@80.240.216.69) (Read error: Connection reset by peer)
[01:10:32] <LordKalma> well, you'll have to read Eigen's source code
[01:10:40] <CarloWood> Eigen::Vector4f is Eigen::Matrix<float, 4, 1>  with a size of 4 * sizeof(float).
[01:10:51] <CarloWood> I did - it is incomprehensible :P
[01:10:52] <LordKalma> so?
[01:10:55] <LordKalma> ah ok
[01:11:05] *** Joins: proller (~p@80.240.216.69)
[01:11:06] <imMute> don't forget that Eigen::Matrix supports variable sized matrices, so that code is probably why
[01:11:13] <CarloWood> But it contains four floats and only four floats.
[01:11:26] <LordKalma> but it probably has non-default copy constructors
[01:12:03] <imMute> LordKalma: it seems to https://eigen.tuxfamily.org/dox/classEigen_1_1Matrix.html#a0b287f226563b8410312bd474b2a1ccc
[01:12:16] <CarloWood> Ah, that could the reason? Then std::is_trivially_copyable isn't as smart as I thought/hoped.
[01:12:28] <LordKalma> no, it's not about being smart
[01:12:37] <LordKalma> if it hhas a custom copy constructor it's not trivial
[01:12:38] <LordKalma> period
[01:12:55] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:13:00] <imMute> because you can't know if that custom copy ctor is doing a memcpy or something more magical
[01:13:06] <imMute> s/you/the compiler/
[01:13:15] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:13:47] <rpav> which is annoying, because it _can_ know _somewhat_, but
[01:14:07] <cahoots> i wonder why apple crash reporters like crashlytics do their unwinding with the compact unwind table, e.g. https://github.com/firebase/firebase-ios-sdk/blob/master/Crashlytics/Crashlytics/Unwind/FIRCLSUnwind.c#L196 . could it be due to the fact it's asynchronous, so if it's in the function epilog/prolog, it'll miss that function?
[01:14:07] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[01:14:12] <LordKalma> this actualyl brings an interesting point
[01:14:12] <cahoots> Hello71, ^
[01:14:13] <imMute> rpav: now your class is trivial in one TU but not another.
[01:14:19] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:7500:cc05:1b37:c736)
[01:14:21] <rpav> like if you have `T(const T&) {}` it _should_ be able to consider that trivial
[01:14:31] <rpav> imMute: well without an inline definition obviously you can't
[01:14:41] <Hello71> cahoots: why don't you ask them
[01:14:45] <imMute> rpav: that's not a trivial copy.  that's a trivial *do nothing*
[01:15:01] <CarloWood> Well, I am very sure that if I use memcpy on it to copy it from one Eigen::Vector4f to another - then that will work perfectly :P.  It has to be if you know that the size is four floats and it represents a vector of four floats.
[01:15:16] <rpav> imMute: but it's still trivial, but makes the copy ctor nontrivial; the class might have no members
[01:15:21] <cahoots> Hello71, the average response time in that project is several months :P and i suspect certain key people left after the google acquisition
[01:15:23] <imMute> CarloWood: *you* know that, but the compiler can't.
[01:15:36] <CarloWood> In my eyes that means it is trivially copyable. It's just that std::is_trivially_copyable_v can't figure that out.
[01:15:41] <rpav> this is another case of "the optimization model is poor"
[01:15:57] <imMute> rpav: in the case of zero members, sure.  but in the general case it's not even doing the same thing that trivial copy would do, so calling it trivial is wrong.
[01:16:02] <LordKalma> rpav, https://raw.githubusercontent.com/CppCon/CppCon2017/master/Presentations/Effective%20Qt%20-%202017%20Edition/Effective%20Qt%20-%202017%20Edition%20-%20Giuseppe%20D'Angelo%20-%20CppCon%202017.pdf
[01:16:05] <LordKalma> see slide 19
[01:16:06] <Hello71> well one reason, as i've said, is that it will work if frame pointers are disabled
[01:16:11] <LordKalma> there is a very interesting point
[01:16:39] <LordKalma> Qt containers, and EASTL containers have macros where you explain to the container whether a type can be memcopy'd/memove'd
[01:16:43] <Hello71> also the thing that they say about "on the first frame", and various signal handler related shenanigans
[01:16:46] <LordKalma> but the std::lib... doesn't
[01:17:04] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[01:17:37] <rpav> imMute: but in the trivial case, it _is_ doing the same thing, so clearly there is a minimum point at which the compiler can detect it's trivial
[01:17:48] <LordKalma> the discussion actually starts at slide 13 if you want to read it
[01:17:55] <LordKalma> but slide 19 is the summary
[01:17:56] <hnOsmium0001[m]> qt has those? didn't know that until today
[01:17:58] <imMute> rpav: "no members" is "the trivial case" ???
[01:18:09] <CarloWood> What I do in my own code is create trivially copyable POD base classes - and then derive a class from that that doesn't add any extra data.  And then use the base class whereever I want the compiler to know it is trivially copyable :/
[01:18:30] <imMute> rpav: why would we even care if the compiler can detect that a no-member object can be trivially copied even though it has a non-default copy ctor???
[01:18:50] <LordKalma> hnOsmium0001[m] it's actuallysomething they very much want you to do if you intend to use your types on Qt contaienrs
[01:18:52] <LordKalma> *containers
[01:18:59] <LordKalma> always declare the "type traits"
[01:19:03] *** climax is now known as gentooclimax
[01:19:44] <LordKalma> and this would solve CarloWood's problem. instead of making the compiler guess based on copy-constructors, just tell it it can memcpy that shit just fine
[01:19:46] <rpav> LordKalma: wow qlist is worse than i thought
[01:19:52] <LordKalma> qlist is HORRIBLE
[01:19:55] <LordKalma> that's why it was removed
[01:20:17] <rpav> but it's O(1) lookup! ;)
[01:20:23] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[01:20:29] <LordKalma> hahaha it's basically a vector of pointers
[01:20:36] <LordKalma> because fuck memory locality
[01:20:37] <rpav> yeah, ergh
[01:20:49] <kalven> https://www.reddit.com/r/cpp/comments/szg5h8/asking_for_api_design_feedback_on_possible_future/
[01:20:53] <LordKalma> fortunately that stuff is gone
[01:20:55] <rpav> and all that extra wasted space
[01:21:29] <LordKalma> on Qt6 QVector is just a typedef to QList, but the Qt6's QList is QVector from Qt5
[01:21:34] <CarloWood> What I really wanted is a concept that checks if my type is a struct that exists exclusively of types from a given list (two dozen or so).
[01:21:47] <LordKalma> they made QList the canonical name because other Qt things use the name list
[01:21:53] <CarloWood> But I suppose I can't make it go over each of the elements of a struct either.
[01:21:57] <rpav> QVector is a QList?!
[01:22:01] <LordKalma> NO
[01:22:20] <LordKalma> in Qt6 QVector is a typedef to QList, BUT QList is qt5's QVector
[01:22:26] <LordKalma> so it's all fine
[01:23:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:23:09] <LordKalma> qt5's QVector was a normal vector, with also fast insertion at the front
[01:23:17] <LordKalma> it reserves both ways
[01:23:30] <LordKalma> (plus Qt uses copy-on-write, but that's another story)
[01:25:10] <rpav> err oh ..
[01:25:33] <rpav> i see, QVector6 = QList6 = QVector5
[01:27:24] <hnOsmium0001[m]> I presume Q_DECLAR_TYPEINFO still doesn't help with move-only types since COW is inherent to all qt conatiners?
[01:29:56] *** gentooclimax is now known as climax
[01:30:02] *** climax is now known as gentooclimax
[01:30:58] <LordKalma> yeah, I guess, idk
[01:31:36] *** Quits: cahoots (~cahoots@200.122.212.106) (Ping timeout: 245 seconds)
[01:31:46] *** Joins: badone (~badone@209.132.189.152)
[01:31:53] *** Joins: cahoots (~cahoots@200.122.212.106)
[01:33:34] *** Quits: bobb_ (~bobb_@dslb-088-066-159-156.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[01:34:03] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[01:35:40] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[01:36:19] *** Quits: cahoots (~cahoots@200.122.212.106) (Ping timeout: 256 seconds)
[01:36:48] *** Joins: markong (~kvirc@213.146.188.203)
[01:37:25] *** Quits: cq-work (~cq-work@user/cq-work) (Remote host closed the connection)
[01:37:44] *** Joins: cq-work (~cq-work@user/cq-work)
[01:39:20] <CarloWood> Thought on using 'override final' vs just 'final'?
[01:39:24] <CarloWood> Thoughts*
[01:40:25] * Alipha has never used 'final'
[01:40:48] <Friithian> what does final even do?
[01:41:02] <kalven> if I use it, it's on the class-level. not individual functions
[01:41:15] <Alipha> Friithian: it prevents a derived class from overriding the function
[01:41:20] <Friithian> ah
[01:41:47] <CarloWood> Oh, I use final on functions of base classes.  Especially I'd say, if you don't want derived classes to mess with it anymore.
[01:41:49] <Alipha> the only real justifiable use for it is to assist with optimization and de-virtualization
[01:41:57] <sonOfRa> Which seems to be rarely useful in C++ because virtual isn't the default. Much more useful in other languages like Java where virtual functions are the default
[01:42:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:58] <CarloWood> I am only asking because recently I saw somewhere someone say to NEVER use "override final" - as in, they thought that was stupid.
[01:43:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:03] *** ChanServ sets mode: +v npaperbot
[01:43:14] <ville> CarloWood: it would have to be virtual first to stick final on something
[01:43:16] <CarloWood> I guess that final implies override - but well, override final compiles so... :/
[01:43:33] <kalven> and why say something with one keyword when you can use two?
[01:43:35] <CarloWood> sure
[01:43:39] <CarloWood> {} struct A { virtual void f() = 0; }; struct B : public A { void f() final {} };
[01:43:40] <geordi>  
[01:43:46] *** Quits: Leone (~Leo@216.154.12.122) (Read error: Connection reset by peer)
[01:43:46] <CarloWood> {} struct A { void f() = 0; }; struct B : public A { void f() final {} };
[01:43:47] <geordi> error: initializer specified for non-virtual method 'void A::f()'
[01:43:56] *** Joins: soman (~soman@83.139.179.68)
[01:44:16] <Alipha> {} struct A { void f() {} }; struct B : public A { void f() final {} };
[01:44:16] <geordi> error: 'void B::f()' marked 'final', but is not virtual
[01:44:27] <CarloWood> Hence 'override final' is redundant... yet again failure of C++ to force people to a single style :(
[01:44:43] <soman> Why this code is crashed for unordered_map 'for (auto it = std::next(fq.begin()); it != fq.end(); ++it) cout << it->first << ": " << std::prev(it)->second << endl;'?
[01:44:59] <CarloWood> Alipha: oops
[01:45:16] <Alipha> {} constexpr int x = 3; struct foo { virtual void f() = x; };  // :-(
[01:45:16] <geordi> error: invalid pure specifier (only '= 0' is allowed) before ';' token
[01:45:25] <CarloWood> soman: because fq is empty?
[01:45:37] <soman> CarloWood: no, fq has size() = 3
[01:46:22] <Alipha> soman: what type are the key and value?
[01:46:39] <soman> Alipha: <char, int>
[01:47:05] <Alipha> soman: char, not char*?
[01:47:22] <soman> Alipha: yeah, char. If I remove std::prev, then the code is worked well
[01:48:27] *** Joins: proller (~p@80.240.216.69)
[01:48:51] <Alipha> !give soman testcase
[01:48:52] <nolyc> soman: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[01:49:46] <CarloWood> In other words, there is nothing wrong with the code that you showed.
[01:50:24] <CarloWood> Apart from using namespace std.
[01:50:55] <Friithian> do we have4 a factoid for using namespace std?
[01:51:00] <Friithian> ss4ss
[01:51:37] <Alipha> !using namespace std
[01:51:38] <nolyc> Importing the entire std namespace into the global scope brings in a lot more symbols than vector and list; it also brings in standard library implementational details. C++ headers are allowed to include other C++ headers, so there is no way of knowing just what symbols got pulled into global scope. It's best not to use 'using namespace std;'. See also http://stackoverflow.com/q/1452721/809387
[01:51:55] <Friithian> cool
[01:52:01] *** Quits: jsbach (~jsbach@2a01:c22:35b1:f900:45c9:a958:57c7:c5b2) (Ping timeout: 245 seconds)
[01:52:27] <ville> the secret is of course that you'll get them at global scope regardless
[01:53:23] <soman> CarloWood: https://ideone.com/I5F2Yo
[01:56:02] <CarloWood> https://wandbox.org/permlink/Ydrnjb7VOHkB3EKw
[01:56:06] <CarloWood> I am so nice
[01:57:46] <Alipha> i so don't see what the issue is :-/
[01:58:18] <soman> Part of the code could be reduced to => 'std::unordered_map<char, int> fq = {{'a', 2}, {'b', 2}, {'c', 3} };'
[01:59:09] <CarloWood> You don't? Lemme have a look (I was eating)
[02:00:54] <kalven> unordered_map's iterator isn't bidi.. weird
[02:00:55] <soman> If recompile the link by CarloWood to clang, c++17 (GNU) the code works
[02:01:04] <soman> gcc bug?
[02:01:08] <CarloWood> no
[02:01:58] <cq-work> Stuff like that is (almost) never a compiler bug.
[02:02:13] <kalven> { unordered_map<int,int> m = {{0,0},{1,1}}; auto it = m.begin(); ++it; --it; }
[02:02:14] <geordi> error: no match for 'operator--' in '--it' (operand type is '_Safe_iterator<__detail::_Node_iterator<pair<const int, int>, false, false>, unordered_map<int, int>, forward_iterator_tag>')
[02:02:36] <Alipha> oh, wow
[02:04:04] <kalven> I would have expected a compile error with next
[02:04:07] <kalven> err, prev
[02:04:26] <Alipha> { unordered_map<int,int> m = {{0,0},{1,1}}; auto it = m.begin(); ++it; std::advance(it, -1); }
[02:04:27] <geordi> /usr/local/include/c++/12.0.1/bits/stl_iterator_base_funcs.h:159: constexpr void __advance(_InputIterator&, _Distance, input_iterator_tag) [with _InputIterator = _Safe_iterator<__detail::_Node_iterator<pair<const int, int>, false, false>, unordered_map<int, int>, forward_iterator_tag>; _Distance = long int]: Assertion '__n >= 0' failed. [+ 1 discarded line]
[02:04:42] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:04:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[02:05:16] <cq-work> Apparently, std::advance expects it to be bidirectional or it's just USB
[02:05:18] <CarloWood> It crashes on the first call to std::prev(it)
[02:05:19] <cq-work> UB even
[02:05:42] <Alipha> that's crazy it's not a compile error
[02:05:51] <Alipha> who wants to write a defect?? :-)
[02:06:17] <CarloWood> I must say this hard to understand even in a debugger :/
[02:06:46] <CarloWood> std::prev(it) with a totally sane looking it, do one step into, and you're at
[02:06:47] <kalven> CarloWood: the problem has been found already
[02:06:53] <CarloWood> 230           std::advance(__x, -__n);
[02:07:05] <CarloWood> with __x having _M_cur = 0x0
[02:07:12] <CarloWood> I saw that
[02:07:15] <Alipha> soman: it's Undefined Behavior to use std::prev with a std::unordered_map iterator
[02:07:37] <Alipha> because std::unordered_map iterators don't support decrementing
[02:08:39] <cq-work> Probably not a defect, just some weird ruling to help performance somehow.
[02:09:02] <Alipha> eh, i meant a c++ standard defect
[02:09:17] <soman> Alipha: I should check cppreference to find it
[02:09:20] <cq-work> Yeah, I don't think it is.
[02:10:13] <cq-work> That said, I don't understand what the standard gods always intend so maybe could start a discussion on the mailing lists
[02:11:58] <kalven> well.. TIL
[02:12:22] <Alipha> i feel like PJBoy would love this footgun
[02:12:52] <kalven> is he into S&M?
[02:13:13] <cq-work> Well, we are in #c++-general
[02:13:23] <PJBoy> the using std::advance with a negative offset on non-bidirectional iterator?
[02:13:36] <PJBoy> I thought that was common knowledge
[02:13:45] <soman> Found 'iterator Â Â Â  LegacyForwardIterator to value_type' on unordered_map at cppreference. So what's the final conclusion? Have I been written UB code?
[02:13:47] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:14:00] <Alipha> soman: yes, you wrote UB
[02:14:06] <kalven> PJBoy: more that prev(forward_it) compiles nicely
[02:14:07] <cq-work> -.- There is nothing intuitive about being able to advance a forward-only iterator backwards.
[02:14:49] <PJBoy> sucks that it compiles yeah
[02:14:51] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[02:15:10] <PJBoy> but that's the general trend
[02:15:23] <Alipha> { unordered_map<int,int> m = {{0,0},{1,1}}; auto it = m.begin(); ++it; std::ranges::prev(it); }
[02:15:24] <geordi> error: no match for call to '(const ranges::__prev_fn) (_Safe_iterator<__detail::_Node_iterator<pair<const int, int>, false, false>, unordered_map<int, int>, forward_iterator_tag>&)'
[02:15:25] <PJBoy> all the algorithms that require forward iterator or beyond nicely compile with input iterators
[02:15:49] <Alipha> { map<int,int> m = {{0,0},{1,1}}; auto it = m.begin(); ++it; it = std::ranges::prev(it); }
[02:15:50] <geordi>  
[02:16:01] <Alipha> okay, use std::ranges::prev from now on
[02:16:17] <PJBoy> exactly, concepts save the day
[02:16:38] <PJBoy> when they're used anyway, which not all stdlib additions are using...
[02:17:00] *** Joins: apteryx (~maxim@dsl-156-1.b2b2c.ca)
[02:17:07] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[02:17:18] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:17:34] <Alipha> { std::unordered_map<int,int> m = {{0,20},{1,51}}; auto it = m.begin(); it = std::prev(it, -1); std::cout << it->second; } // :-)
[02:17:35] <geordi> 20
[02:17:41] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:18:32] <Alipha> i still think that std::prev should require a bidirectional_iterator like std::ranges::prev does
[02:18:50] <PJBoy> it does "require" it
[02:19:20] <Alipha> That it should be a compile error
[02:19:21] *** Quits: AmR (~AmREiSa@156.199.47.115) (Quit: Konversation terminated!)
[02:19:23] <soman> Ok, then I want to check equality of all values (0...N-1) in unordered_map and I can't take prev from end. Then how can I do that? O(N) advance from begin to N - 1?
[02:19:23] <PJBoy> but yeah, SFINAE or a static_assert would be nice
[02:19:29] <apteryx> hello!  Would someone have a link to an explanation of the scope of "temporaries" ?
[02:19:45] <PJBoy> can't help the advance(it, -1) case though
[02:19:49] <apteryx> I had something like "const char* rpath = realPath.utf8().data();" in webkitgtk, and it was pointed to me that this was use-after-free
[02:20:04] <Alipha> PJBoy: yeah, I'll accept that as UB
[02:20:16] <PJBoy> yeah I agree then
[02:20:23] <PJBoy> although
[02:20:28] <kalven> soman: instead of using prev, start with the first iterator and get next(it) in the loop, but compare the next iterator with .end() before you use it
[02:20:40] <PJBoy> nah scratch that although
[02:21:01] <soman> kalven: thanks, sounds like a solution.
[02:21:28] <Alipha> apteryx: temporaries live until the end of the statement they're on. That is, until the ;
[02:22:03] <CarloWood> apteryx: it is if utf8() returns something by value - ie, std::string.  Then the pointer data() points to freed memory the next line.
[02:22:11] <soman> What about std::ranges::prev then? Does it allow to go in both directions with unordered_map or it still UB?
[02:22:50] <Alipha> soman: std::ranges::prev will give a compile error instead of mysteriously causing UB at runtime
[02:22:51] <CarloWood> soman: just write it without using std::prev
[02:23:11] <soman> Ok, big thanks to all replied!
[02:23:23] <apteryx> Alipha: OK, thanks
[02:23:31] <CarloWood> auto prev = it++;
[02:23:50] <apteryx> CarloWood: so the only way is to manually invoke something that copies it?  There's no way in having the compiler figure that for us?
[02:23:59] <Alipha> soman: std::unordered_map iterators have no --, so it's impossible to get the previous iterator
[02:26:10] <soman> Alipha: ok, now it's clear.
[02:27:40] <Alipha> apteryx: the compiler would have to know to keep the std::string returned by utf8() alive for as long as the const char* is used, which is a very difficult problem to solve in all but the most trivial cases.
[02:29:21] <apteryx> I see.  Basically it'd need reference counting with GC or something.
[02:29:57] <Alipha> Rust has the "borrow checker"
[02:31:21] <apteryx> I see.  I didn't know the borrow checked solved that problem.
[02:32:36] <Shell> I mean, Rust's borrow checker solves the problem by telling you that line is wrong. :p
[02:33:32] *** Joins: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it)
[02:33:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:34:25] <apteryx> that's nice :-)
[02:35:08] <CarloWood> apteryx: The real problem is that you want to use `const char*`. Why would you? Use C++
[02:35:54] <Alipha> from what i've heard, Rust programmers aren't huge fans of the borrow checker. though i think it just forces you to think about lifetimes, which they would need to be doing anyway in a language like c++
[02:36:30] <CarloWood> std::string rpath = realPath.utf8();  is perfectly fine code
[02:36:37] <kalven> sounds like you've been talking to rust heretics.
[02:37:10] <Alipha> i'm just repeating what i've heard from the rumor mill :-)
[02:37:50] <CarloWood> They don't like it because it confronts them the reality that things have a lifetime, and they don't understand life times.
[02:38:05] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:38:28] <kalven> uhm
[02:38:42] <kalven> that might be the dumbest thing I've heard today
[02:38:53] <kalven> but hey.. it's only 3pm
[02:39:05] <cq-work> I don't think it's that dumb. People don't like having to manage lifetimes of their variables.
[02:39:08] <Alipha> kalven is on the pacific!
[02:39:18] <CarloWood> I don't know anything about Rust. I am just summarizing what I just saw on the channel :p
[02:39:54] <cq-work> You have to explicitly give a marker on variables that live outside of some scope, that confuses people, so they don't like it.
[02:40:31] <CarloWood> Lifetimes are easy: when it crashes you did something wrong.
[02:40:42] <cq-work> C++ doesn't force you to do that, C++ doesn't care if your variable lives inside a scope, outside a scope, or on the moon
[02:41:03] <kalven> it crashes if you're lucky
[02:41:05] <cq-work> Well, "lives" might be a bad word.
[02:41:25] <Alipha> the compiler doesn't. but objects have lifetimes and you better code in agreement with them
[02:42:17] <Shell> also the compiler totally does and if you fuck up it'll just miscompile your code. sometimes. :)
[02:42:54] *** Parts: blackout69 (~blackout6@net-31-156-75-167.cust.vodafonedsl.it) ()
[02:43:37] <Alipha> you make it sound like the compiler has malicious intent.
[02:44:02] <Shell> not really, just that it's not amazingly helpful.
[02:47:40] <cq-work> Clang at least has some lifetime analysis functionality. Unfortunately, it can't be perfect since it's hard to tell when a variable is supposed to live in a certain scope.
[02:48:15] <Alipha> just use std::shared_ptr for everything ;-)
[02:48:35] *** Joins: ferdna (~ferdna@user/ferdna)
[02:49:07] <Alipha> or https://github.com/hsutter/gcpp
[02:58:51] <soman> In the code like that => 'for (int &&i: intVector)' I can't bind rvalue ref to lvalue. Why does i is lvalue and how can I investigate it's lvalue? range-based for works via begin/end as I know so what's next?
[02:59:45] <kalven> What do you want to do with `i` ?
[03:00:25] *** Joins: peoliye (~peoliye@205.251.233.53)
[03:00:29] <Alipha> use `for (int &i: intVector)` instead? or `for (int i: intVector)` if you don't need to modify the elements of intVector
[03:00:34] <soman> kalven: for example move it to other vector with std::move(i). If I will write int &i + std::move(i) then it will work but I want to find out why
[03:00:57] <kalven> it'll always take a move.. once you have a name for it, it's no longer an rvalue
[03:01:42] <kalven> like.. void foo(string&& s)  { /* s is not an rvalue here */ }
[03:03:23] <Alipha> `for (int &&i: intVector) { /* do something */ }` is equilavent to `for(auto it = intVector.begin(); it != intVector.end(); ++it) { int &&i = *it; /* do something */ }` which that `int &&i = *it;` is not legal because *it returns a int& to the element
[03:03:44] <Alipha> and you can't initialize a int&& with an int&
[03:05:41] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:07:20] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:07:45] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:14:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:17:03] *** Quits: soman (~soman@83.139.179.68) (Quit: Client closed)
[03:17:51] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[03:20:57] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[03:21:41] <mike18> hi if i dont have a constructor or destructor is it recommend to write: Foo() = default; ~Foo() = default; ?
[03:22:00] <mike18> as well as virtual ~B() = default;
[03:24:56] <kalven> for the virtual destructor, sure.
[03:25:04] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[03:25:33] <kalven> otherwise only do Foo() = default; if you need to, you usually get it for free anyway. There's usually little point in defaulting a non-virtual destructor.
[03:30:48] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:75d6:9a85:fe86:684b)
[03:30:48] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:75d6:9a85:fe86:684b) (Changing host)
[03:30:48] *** Joins: skapata (~Skapata@user/skapata)
[03:32:35] <hnOsmium0001[m]> I feel like the frequency of gccpp appaering in this chat has increased significantly recently
[03:34:27] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2549:2ec4:27e7:2488) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:41:02] <kalven> twice in november, once in december, twice in february
[03:45:10] <mike18> kalven: what little point?
[03:46:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:47:44] <kalven> mike18: what's your question?
[03:48:01] <mike18> whats the benefit of a Foo() = default;
[03:48:07] <mike18> if any
[03:48:51] <kalven> mike18: if you add a non-default constructor to the class, the otherwise automatically generated default ctor will be suppressed.. so if you want it back, you can default it.
[03:50:11] <mike18> i dont need one
[03:50:55] <kalven> okay, then don't add it
[03:52:22] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:7799:a97f:e3b8:dca9:f9cf)
[03:53:58] <mike18> also for a class with a pure virtual func?
[03:54:22] <mike18> i guess so
[03:54:34] <mike18> i just have the virtual destructor to be default
[03:54:45] *** Quits: Dragoon (~Dragoon@user/dragoon) (Ping timeout: 250 seconds)
[03:54:46] <mike18> since its good to have one in that case
[03:55:29] *** Quits: p-i- (~Ohmu@183.89.27.225) (Ping timeout: 256 seconds)
[03:55:32] <kalven> the virtual destructor is a bit special in that you typically want one in the base class.. the constructors are all about what kind of interface you want to give your class
[03:55:37] <very_sneaky> mike18: might be worth reading the core guidelines, i found it pretty good for working out what i need when: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c21-if-you-define-or-delete-any-copy-move-or-destructor-function-define-or-delete-them-all
[03:56:35] <mike18> nice page
[03:56:47] <Alipha> mike18: the rule of thumb is that if you have any virtual functions, then you should have a virtual destructor. otherwise, you don't need a virtual destructor
[03:57:03] <mike18> yeah - so i had it default
[03:57:21] <very_sneaky> and if you default your virtual destructor, you should implement all special member functions, even if just to default them
[03:58:23] <Alipha> you likely want to make your class non-copyable/non-movable, if it has a virtual destructor (or make your copy/move ctor/op= protected)
[03:58:32] <Alipha> you don't want accidental slicing
[04:05:24] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:01] *** Joins: Dragoon (~Dragoon@user/dragoon)
[04:11:00] <CarloWood> Anyone who knows Eigen3?  How would I create a Matrix3f that scales and translates a 2D object?
[04:11:28] *** Quits: Dragoon (~Dragoon@user/dragoon) (Read error: Connection reset by peer)
[04:14:18] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:14:50] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:16:58] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[04:18:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:18:49] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[04:18:50] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[04:21:00] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:21:08] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:29:46] *** Joins: Dragoon (~Dragoon@user/dragoon)
[04:35:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:37:28] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:44:12] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[04:58:01] *** Joins: p-i- (~Ohmu@mx-ll-183.89.30-105.dynamic.3bb.co.th)
[04:59:37] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:7799:a97f:e3b8:dca9:f9cf) (Ping timeout: 240 seconds)
[05:02:35] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[05:04:13] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:10:01] <CarloWood> Hmm, when I scale the vector (2, 3) with 0.2... I get (0.4, 0.6)... And if then I translate it over (-0.1, 0.1) I get  (0.3, 0.7)
[05:10:02] *** Quits: dextaa (~DV@user/dextaa) (Quit: Ping timeout (120 seconds))
[05:10:09] <CarloWood> 0.38
[05:10:09] <CarloWood> 0.62
[05:10:11] <CarloWood> :/
[05:10:23] *** Joins: dextaa (~DV@user/dextaa)
[05:10:41] <CarloWood> Ah, fixed
[05:15:19] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:16:16] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Killed (NickServ (GHOST command used by Friithian!gunqqer@friithian.dev)))
[05:16:30] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[05:16:55] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Read error: Connection reset by peer)
[05:19:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[05:22:50] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[05:23:26] *** Quits: Praise (~Fat@user/praise) (Remote host closed the connection)
[05:24:35] *** Joins: Praise (~Fat@user/praise)
[05:25:44] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[05:27:24] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1f3b:3a8f:f843:9a79) (Ping timeout: 240 seconds)
[05:31:12] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:33:06] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6a7c) (Quit: Leaving)
[05:41:28] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:41:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[05:42:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:06] *** ChanServ sets mode: +v npaperbot
[05:44:54] <mike18> what is the right way to init such a unordered_map? https://ideone.com/78ArBM
[05:44:58] <mike18> with shared ptr
[05:47:41] <kalven> mike18: https://ideone.com/zH7awk
[05:48:18] <mike18> almost ^^
[05:48:50] <mike18> im surprised that you can do that without a constructor in Test
[05:48:52] <mike18> class
[05:52:39] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:2ee9:1440:1c10:eea8)
[05:53:41] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:53:48] <kalven> I mean.. there *is* a constructor. You're just using a different syntax to say what is going to happen in it
[05:54:20] *** Joins: c4017w (~c4017@209.52.68.8)
[05:59:45] <mike18> how to init it with test constructor?
[05:59:51] <mike18> in
[06:05:40] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[06:08:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:14:08] *** Joins: Guest8647 (~Guest@host38.181-14-187.telecom.net.ar)
[06:14:18] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[06:18:46] *** Joins: nshire (~nshire@user/nshire)
[06:25:05] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[06:29:20] *** Joins: xkuru (~xkuru@user/xkuru)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:33:17] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[06:38:28] *** Guest19 is now known as virmaha
[06:38:42] *** Joins: skapata (~Skapata@user/skapata)
[06:39:02] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:41:53] *** Joins: smeso (~smeso@user/smeso)
[06:42:15] *** virmaha is now known as kulzen
[06:44:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:46:09] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[06:55:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:55:06] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[06:58:31] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:59:39] *** Joins: adeliktas8 (~adeliktas@i59F5F56B.versanet.de)
[07:01:35] *** Quits: adeliktas (~adeliktas@i59f4a288.versanet.de) (Ping timeout: 256 seconds)
[07:01:35] *** adeliktas8 is now known as adeliktas
[07:02:04] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:03:30] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 272 seconds)
[07:03:45] *** Joins: Praise (~Fat@user/praise)
[07:07:35] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:08:49] *** Quits: pulse (~pulse@user/pulse) (Quit: Look behind you, a three headed monkey!)
[07:10:37] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:20:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:21:04] *** Quits: p-i- (~Ohmu@mx-ll-183.89.30-105.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[07:21:40] *** Joins: p-i- (~Ohmu@2403:6200:8978:9e12:d907:b4bf:424b:db5f)
[07:21:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:37:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:45:35] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:46:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:55:31] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:59:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:04:33] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[08:20:35] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:26:54] *** Joins: Guest77 (~Guest77@68.132.78.81)
[08:28:23] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[08:30:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[08:40:42] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::175)
[08:43:21] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Ping timeout: 256 seconds)
[08:44:28] *** vinleod is now known as vdamewood
[08:46:31] *** Joins: minto (~mintograd@47.201.5.61)
[08:49:35] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 256 seconds)
[08:54:25] *** Quits: mike18 (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[08:56:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:56:12] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 265 seconds)
[08:56:39] *** Joins: malloy (~jimery@116.30.220.175)
[08:59:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:01:39] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[09:03:25] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Quit: Ping timeout (120 seconds))
[09:03:48] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[09:05:02] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[09:09:16] *** Quits: peoliye (~peoliye@205.251.233.53) (Quit: Client closed)
[09:26:26] *** Quits: hightower4 (~hightower@141-136-162-159.dsl.iskon.hr) (Remote host closed the connection)
[09:31:29] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:34:29] <smallville7123> how difficult would it be to convert C# to C++ ?
[09:37:25] <kalven> depends on how much it is, what c# features and libs it uses
[09:38:53] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:54de:a685:89de:8152)
[09:42:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:42:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:06] *** ChanServ sets mode: +v npaperbot
[09:43:09] <smallville7123> yea
[09:54:27] *** Quits: Guest8647 (~Guest@host38.181-14-187.telecom.net.ar) (Remote host closed the connection)
[09:56:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:00:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:05:49] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:14:56] *** Joins: jsbach (~jsbach@2a01:c22:a4c6:8f00:c69b:57a:cda0:a5e0)
[10:25:24] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[10:37:03] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:47:11] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:52:13] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[10:57:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:01:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:17:55] <hnOsmium0001[m]> I mean the CLR is written in C++ and there is an interop API, so it's just a really fancy config loader
[11:17:55] * hnOsmium0001[m] runs
[11:32:45] *** Joins: AmR (~AmREiSa@156.199.47.115)
[11:33:41] *** Joins: DSpider (~DSpider@82.79.237.125)
[11:43:04] *** Joins: MatSharrow (~matthew@56.93.9.51.dyn.plus.net)
[11:47:17] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:57:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:01:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:04:58] *** Joins: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it)
[12:10:12] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:15:19] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:16:38] *** Joins: paul424 (~tom@ip-5-172-232-197.multi.internet.cyfrowypolsat.pl)
[12:23:25] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:25:44] *** Joins: robod34 (Username@79.113.243.73)
[12:34:12] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 240 seconds)
[12:34:36] *** Quits: paul424 (~tom@ip-5-172-232-197.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[12:34:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Ping timeout: 240 seconds)
[12:36:29] *** Joins: txtsd (~txtsd@user/txtsd)
[12:38:17] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:48:02] *** Joins: fldme (~fldme@178.49.152.42)
[12:57:33] *** Parts: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it) ()
[12:57:54] *** Joins: soman (~soman@83.139.179.68)
[12:57:58] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[12:58:00] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:59:47] <soman> Does this code move the strings from vec to the umap (in-place insert)? Or copies? => 'std::unordered_map<std::string, int> um; for (std::string &s: myVec) { um[std::move(s)]++; }'
[12:59:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[13:01:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:03:25] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:11:53] <TinoDidriksen> Sure looks like it should.
[13:12:26] <LordKalma> wouldn't it copy?
[13:12:39] <LordKalma>  um[std::move(s)] // this doesn't remove the original from the vector, does it?
[13:12:50] *** Joins: fldme6 (~fldme@178.49.152.42)
[13:14:27] *** Quits: fldme (~fldme@178.49.152.42) (Ping timeout: 256 seconds)
[13:14:53] *** Joins: plastico (~plastico@neomutt/plastico)
[13:19:02] <ville> LordKalma: removing something from a vector and an element being in a moved-from state are different things
[13:20:19] <ville> and yes std::map does have operator [] that takes a key&&, so yeah i'd expect it would leave the strings in the vector in moved-from state.
[13:20:48] <LordKalma> ah using the move constructors?
[13:21:12] <ville> not going to bet on the internals
[13:22:23] <ville> the elements being in a moved-from state would still leave the vector's size intact
[13:22:32] <LordKalma> yeah yeah, I get it now, thanks
[13:23:38] <ville> not sure if it has-to-has-to call move ctor if the element already exists in the map. these days it's bit of ann adventure to try to find out what actually happens there
[13:23:54] <ville> it certainly could
[13:26:31] <ville> it used to be defined simply as: return (*((insert(make_pair(x, T()))).first)).second, but now the current specification is an undecipherable mess
[13:31:09] *** Joins: joilerv (~joilerv@145.224.65.230)
[13:31:30] *** Quits: fldme6 (~fldme@178.49.152.42) (Quit: Client closed)
[13:33:47] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9e12:946e:262d:4e8a:73e2)
[13:34:43] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:35:11] *** Quits: p-i- (~Ohmu@2403:6200:8978:9e12:d907:b4bf:424b:db5f) (Ping timeout: 256 seconds)
[13:41:23] <ville> ah 1998... simpler times. the standard was only ~750 pages...
[13:42:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:07] *** ChanServ sets mode: +v npaperbot
[13:43:40] <PJBoy> at least memcpy'ing objects into existence without placement new is well defined now
[13:43:44] <PJBoy> and malloc etc
[13:46:28] <PJBoy> looking at cppreference, it looks like unordered_map::operator[] has barely changed
[13:47:36] *** Quits: joilerv (~joilerv@145.224.65.230) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:47:38] <ville> go look up the nonsense that's in the standard
[13:47:42] <PJBoy> in fact I don't think it's changed whatsoever
[13:48:05] <ville> and then tell me how many places did you have to jump into to know what happens
[13:48:28] <PJBoy> but that means looking up the container part of the standard
[13:48:38] <PJBoy> the worst part of the library part of the standard
[13:48:43] <PJBoy> :(
[13:49:57] <PJBoy> that section's always been bad though, presumably
[13:50:12] <ville> no it hasn't. what i wrote what it used to be in 1998
[13:50:37] <PJBoy> I don't have a copy of C++98 handy, but I assume it's always had "sequence container requirements" and "allocator aware container requirements"
[13:51:14] <ville> start from the operator [] and try to understand what it does
[13:52:20] *** Joins: Burgundy (~NA@86.121.143.206)
[13:52:31] <PJBoy> ok so we start here http://eel.is/c++draft/unord.map.elem
[13:53:04] <PJBoy> then we go to try_emplace http://eel.is/c++draft/unord.map.modifiers#lib:try_emplace,unordered_map
[13:53:16] <PJBoy> whose name has always reminded me of the "try and save" shop from the simpsons
[13:53:30] *** Joins: proller (~p@2a02:6b8:0:40c:a7f3:9e3a:a3cc:244c)
[13:53:40] <ville> map not unordered_map, but probably differs very little in this regard
[13:54:14] <PJBoy> well for unordered_map I'm done now
[13:54:57] <ville> what are piecewise_construct and so on
[13:55:53] <PJBoy> piecewise_construct is a tag value you pass to pair to say its element arguments are constructed from those two tuples of arguments
[13:56:21] <PJBoy> so the key of the pair is constructed from the `k` argument of try_emplace
[13:56:29] <PJBoy> and the value of the pair is constructed from the args...
[13:57:00] <PJBoy> and there's lots of forwards, so you assume perfect forwarding
[13:57:18] <ville> you see it's just nonsense
[13:57:31] <Haohmaru> !sense
[13:57:32] <nolyc> Haohmaru: Error: "sense" is not a valid command.
[13:57:42] <PJBoy> the pair and piecewise_construct stuff makes sense to me
[13:58:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:58:59] <PJBoy> and the reason it's needed is to allow non-moveable value types
[13:59:35] <PJBoy> so you forward the arguments to the value's ctor where it can be constructed in-place, usual emplace semantics
[14:00:02] <PJBoy> I won't deny that it's hard on the eyes
[14:02:10] <PJBoy> also wow, they really used make_pair for map::operator[] before?
[14:02:41] <PJBoy> oh reference_wrapper didn't exist at that time
[14:02:46] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[14:03:14] <PJBoy> make_pair unwraps reference_wrapper, so it's always suspicious to see
[14:05:39] <ville> how do i tell clangd to stop sticking its .cache dir in the project root? thought i had that sorted out previously
[14:08:51] *** Quits: soman (~soman@83.139.179.68) (Ping timeout: 256 seconds)
[14:13:13] <LordKalma> !fact
[14:13:14] <nolyc> LordKalma: An identifier is an arbitrarily long sequence of letters and digits.
[14:15:45] <LordKalma> and underscore... not starting with digits... and etc...
[14:16:44] <kenanmarasli> it should be short enough to fit into memory
[14:20:32] <Shell> ville: you can't.
[14:22:02] <PJBoy> according to https://github.com/clangd/clangd/issues/946 it's set according to XDG_CACHE_HOME
[14:22:38] <PJBoy> or that's only for non project files?
[14:23:15] <PJBoy> yeah
[14:23:33] <PJBoy> as confirmed by https://github.com/clangd/clangd/issues/341#issuecomment-1003560792
[14:25:30] <PJBoy> I get to solve a conan+cmake build issue today, woo
[14:26:17] <PJBoy> need conan to pass cmake an include directory path somehow
[14:26:55] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:27:26] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Client Quit)
[14:27:48] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:32:18] <LordKalma> explain
[14:33:37] <PJBoy> I have only just started looking at it
[14:33:46] <LordKalma> but explain what the problem is
[14:34:18] <Haohmaru> his build system is acting barbaric
[14:34:26] <LordKalma> no, that0s barbarian
[14:34:27] <PJBoy> obviously this package we want to build needs to know where a certain include directory is
[14:34:43] <PJBoy> and allegedly only conan knows where that include directory will be
[14:34:52] <PJBoy> because it puts it there
[14:35:38] <LordKalma> you want to use a dependency
[14:35:39] <LordKalma> ?
[14:36:27] <PJBoy> yeah
[14:36:37] <LordKalma> using include directories from dependencies is trivial...
[14:36:44] <PJBoy> that's good
[14:36:59] <LordKalma> if the depency recipe is well made, if you use cmake_find_package generator, just use target_link_libraries as usual
[14:37:05] <LordKalma> it's that simple
[14:37:30] <LordKalma> (with find_package before)
[14:37:40] <LordKalma> if the dependency has a canonical find_package name, CCI tries to follow
[14:37:50] <PJBoy> I'll bring up the gory details a bit later
[14:37:52] <LordKalma> otherwise it's usually soemthing sensible like nameofdependency
[14:37:57] <PJBoy> fwiw none of these packages are in CCI
[14:38:07] <LordKalma> and the target nameofdependency::nameofdependency
[14:38:08] <PJBoy> so we have home grown recipes
[14:38:19] <LordKalma> hahah well, if it's in house, I sure hope you did them right :p
[14:38:33] <PJBoy> healthy skepticism
[14:39:03] <LordKalma> but by default conan assumes that in the package include/ is the include directoryu
[14:40:01] <LordKalma> https://github.com/conan-io/conan-center-index/blob/master/recipes/miniaudio/all/conanfile.py#L27
[14:40:04] <LordKalma> and it "just works" :D
[14:41:58] <LordKalma> and with a cmake_find_package generator you're use find_package(miniaudio) and then target_link_libraries(mything PRIVATE miniaudio::miniaudio)
[14:42:15] <LordKalma> when you don't define a canonical name it defaults to this https://github.com/conan-io/conan-center-index/blob/master/recipes/miniaudio/all/conanfile.py#L7
[14:42:33] <PJBoy> "we apply a patch to the libA source code that stops cmake from building the libB code included with libA, instead we pass -I<libC_include_dir> where libC includes libB"
[14:42:38] <PJBoy> <_<
[14:42:45] <LordKalma> ah?
[14:43:11] <PJBoy> sounds crazy, but that's what we've been doing so far
[14:43:18] <PJBoy> I do not know the reasoning
[14:43:41] <LordKalma> if you just use target_link_libraries cmake bhandles all that crap
[14:43:52] <LordKalma> if you use global link_libraries, then fuck you, learn cmake:p
[14:45:11] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Quit: Quit)
[14:48:43] <ville> Shell: odd. didn't use to get those .cache dirs when doing `find ~/projects/...`. oh well
[14:49:08] *** Joins: soman (~soman@83.139.179.68)
[14:49:11] <LordKalma> .cache dirs are from clangd>=12
[14:49:16] <LordKalma> (or 11, I don't remember)
[14:49:22] <LordKalma> they had a different name before
[14:50:49] *** Joins: HvszrStykp (~X@81.171.62.82)
[14:50:50] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[14:51:45] *** Quits: Guest77 (~Guest77@68.132.78.81) (Quit: Client closed)
[14:51:50] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[14:58:50] *** Joins: jokoon (~eio@2a01:e0a:542:e160:9488:e80c:fc86:e1a6)
[14:59:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:02:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[15:19:24] <PJBoy> looks like this conan file is generating the cmake
[15:19:37] <PJBoy> man that's just crazy
[15:20:05] <PJBoy> but I guess it makes sense
[15:20:18] <PJBoy> the original source code doesn't have a cmake file
[15:22:25] <LordKalma> selecting a generator would be useless if it didnt generate anything
[15:25:55] <PJBoy> man I can't get a grasp on this at all
[15:29:05] <ville> PJBoy: have you heard of this great tool called make?
[15:29:21] <PJBoy> make is the worst tool ever made
[15:39:56] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[15:40:35] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[15:42:38] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[15:49:57] *** Joins: markong (~kvirc@213.146.188.203)
[15:56:41] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:9e12:946e:262d:4e8a:73e2) (Remote host closed the connection)
[15:57:15] *** Joins: Leone (~Leo@216.154.12.122)
[15:57:54] *** Joins: p-i- (~Ohmu@183.89.30.105)
[15:59:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:59:42] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:02:36] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[16:03:01] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:03:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[16:10:19] * Haohmaru randomizes nolyc
[16:10:20] <Haohmaru> !rq
[16:10:20] <nolyc> Haohmaru: <rpav> it just works!
[16:10:34] <Haohmaru> that was as random as 42
[16:11:00] <LordKalma> todd howard said it would just work
[16:11:01] <LordKalma> it didnt
[16:19:12] *** Joins: horribleprogram (~user@user/horribleprogram)
[16:19:15] <horribleprogram> hey
[16:19:16] <horribleprogram> guys
[16:20:39] <horribleprogram> where is this sort of overload
[16:20:59] <horribleprogram> obviously std::cin >> std::noskipws maps to std::cin.operator>>(std::noskipws)
[16:21:13] <horribleprogram> now, std::noskipws is a function, so it decays to a pointer
[16:21:35] <horribleprogram> where the hell is this operator>> overload?
[16:23:57] <BluesBoy> https://en.cppreference.com/w/cpp/io/basic_istream/operator_gtgt (8) ?
[16:24:29] <horribleprogram> :O
[16:24:30] <LordKalma> 8-10) Calls func(*this), where func is an I/O manipulator.
[16:24:32] <LordKalma> sounds about right
[16:24:39] <horribleprogram> yeah that's the one
[16:25:32] <horribleprogram> ty
[16:26:46] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:27:52] <horribleprogram> oh uk what
[16:27:53] <horribleprogram> it's inline
[16:27:56] <horribleprogram> that's the problem
[16:31:22] *** Joins: pulse (~pulse@user/pulse)
[16:36:44] *** Joins: _Hokedli_ (~lasliedv@gateway/tor-sasl/hokedli)
[16:37:48] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[16:39:55] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Ping timeout: 240 seconds)
[16:41:09] *** Quits: _Hokedli_ (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[16:43:27] *** Parts: horribleprogram (~user@user/horribleprogram) (ERC (IRC client for Emacs 27.2))
[16:55:19] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[17:00:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:03:36] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[17:03:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:06:30] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[17:06:54] <PJBoy> conan doesn't generate a CMakeLists.txt?
[17:06:59] <PJBoy> that's crazy
[17:07:00] <LordKalma> nope
[17:07:15] <LordKalma> it generates whatever the generator you're using
[17:07:28] <PJBoy> but all the supporting CMake files
[17:07:33] <PJBoy> i.e. CMakeFiles/
[17:07:39] <LordKalma> cmake_find_packaage generates a FindMylib.cmake
[17:07:55] <PJBoy> yeah that much makes sense
[17:08:34] <PJBoy> there's also stuff here with CMakeToolchain(self) though
[17:08:46] <PJBoy> I was expecting its .generate() to make a CMakeLists.txt
[17:08:54] <LordKalma> no no
[17:09:01] <LordKalma> CMakeToolchain is to *build* from a cmakelists
[17:09:03] <LordKalma> not generate it
[17:09:07] <PJBoy> oh ok ok
[17:09:54] <PJBoy> that does the .generate() method do then?
[17:09:54] <LordKalma> oh no, nevermind
[17:09:57] <LordKalma> it's another generator
[17:10:00] <LordKalma> sorry
[17:10:03] <PJBoy> ok yeah
[17:10:04] <LordKalma> https://docs.conan.io/en/1.44/reference/conanfile/tools/cmake/cmaketoolchain.html
[17:10:08] <LordKalma> it's an experimental generator
[17:10:14] <LordKalma> that generates a toolchain file
[17:10:20] <LordKalma> (isn't this that vcpkg does?)
[17:10:27] <PJBoy> oh yeah of course, right
[17:10:31] <PJBoy> (idk about vcpkg)
[17:10:43] <PJBoy> yeah that's the idea here supposedly
[17:10:57] <LordKalma> https://github.com/conan-io/conan-center-index/blob/master/recipes/fftw/all/conanfile.py#L67
[17:11:03] <LordKalma> the CMake build wrapper is just called CMake
[17:11:45] <PJBoy> my collegue wanted to make a custom toolchain that just appends an option to CMAKE_CXX_FLAGS_INIT
[17:11:55] <PJBoy> which has the -I option in it
[17:11:58] <LordKalma> bah, that's shit
[17:12:09] <PJBoy> yeah it's not good
[17:12:13] <PJBoy> but it was an attempt
[17:12:25] <PJBoy> also it doesn't work
[17:12:32] <LordKalma> it's best to write an actually proper cmake build graph :D
[17:12:39] <LordKalma> instead of harcoding it in a hack
[17:12:41] <PJBoy> idk why but it loses those changes made to that variable
[17:12:58] <PJBoy> that's the other thing we're doing
[17:13:28] <PJBoy> asking some guy from the other department why they're patching out the include of this dependency just so it can use that same dependency from somewhere else
[17:13:44] <PJBoy> possibly a different version of that dependency
[17:14:03] <PJBoy> but I felt like we should know how to work around this *anyway*
[17:15:44] <PJBoy> also
[17:15:57] <PJBoy> I had to update conan for this
[17:16:12] <LordKalma> that's an experimental generator
[17:16:13] <PJBoy> but before, it didn't give me any errors when trying to generate this toolchain
[17:16:15] <LordKalma> so yeah, it's not surprising
[17:16:33] <PJBoy> obviously we should have a conan minimum version check
[17:16:38] <PJBoy> but I'm surprised it didn't fail
[17:17:02] <PJBoy> but yeah, experimental
[17:20:12] <LordKalma> I recomend cmake_find_package (+ cmake_paths which sometimes helps) for now
[17:20:16] <LordKalma> and CMakeDeps after conan 2.0
[17:20:38] <PJBoy> yeah we're using that
[17:21:07] <PJBoy> so that gets us our FindX.cmake files
[17:21:38] <PJBoy> and then it's just a question of how to specify this one extra include directory
[17:22:56] <PJBoy> and the current idea is to do so via a custom toolchain
[17:23:03] <PJBoy> which seems somewhat reasonable?
[17:24:11] <PJBoy> I think if I were working on the CMakeLists.txt directly, I'd pass `mydep_INCLUDES` as set by the Findmydep.cmake file somehow
[17:24:34] <PJBoy> and append it to CMAKE_INCLUDE_PATH
[17:25:18] <PJBoy> acutally it's already there anyway
[17:25:36] <PJBoy> ok now I'm confused
[17:30:00] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:35:37] <LordKalma> If you wanted an extra include directory change the dependency recipe
[17:35:54] <PJBoy> but it's only this one package that wants the extra include directory
[17:35:54] <LordKalma> You can change the package information to explain conan what are the include directories
[17:36:16] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[17:37:38] <LordKalma> Well, you can change the dependency anyway, or use [ target_]include_directories in the consuming recipe
[17:38:10] <LordKalma> Use include_directories, not CMAKE_INCLUDE_DIRECTORIES
[17:38:18] <PJBoy> target_include_directories is probably gonna be the thing
[17:38:40] <LordKalma> Or CMAKE_INCLUDE_PATH, whatever
[17:38:56] <PJBoy> I've got some unrelated error now, so I'm rebuilding everything
[17:39:10] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[17:40:17] <LordKalma> target_include_directories(whatever [PUBLIC|PRIVATE] yourdependency_INCLUDES[0]/../<path_to_new_include_dir>)
[17:40:21] <LordKalma> in pseudo-code-ish
[17:40:30] <LordKalma> yourdependency_INCLUDES[0] isn't a thing you can do with cmake haha
[17:40:35] <LordKalma> but you can massage it
[17:40:41] <PJBoy> it's tricky 'cause we're generating the cmake file with conan
[17:40:43] <LordKalma> get an element from a lst is possible with cmake
[17:40:54] <LordKalma> the *build* file?
[17:40:55] <PJBoy> idk if you can just insert arbitrary cmake commands
[17:41:15] <PJBoy> yeah
[17:41:30] <PJBoy> or something like that
[17:41:39] <LordKalma> Dude on CCI we have small cmake lists and just copy them over
[17:41:40] <PJBoy> 'cause again I don't see a CMakeFiles.txt anywhere
[17:41:51] <LordKalma> The pffft recipe is a good example
[17:42:09] <LordKalma> It didn't have a build system, so I shipped one in cci
[17:42:13] <PJBoy> *CMakeLists.txt
[17:42:38] <PJBoy> making a CMakeLists.txt might be the play
[17:42:49] <PJBoy> I'm not sure
[17:42:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:00] <LordKalma> Check the recipe for pffft
[17:43:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:07] *** ChanServ sets mode: +v npaperbot
[17:43:17] <LordKalma> You can have arbitrary files copied over to the source directory
[17:43:18] <PJBoy> currently we're using conans.CMake and calling its configure() and build()
[17:43:33] <LordKalma> Those are for existing cmake lists
[17:44:15] <PJBoy> well then I'm confused :/
[17:44:34] <PJBoy> as I should be
[17:46:25] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:47:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:54:35] *** Quits: baltazar (~baltazar@84-236-101-128.pool.digikabel.hu) (Ping timeout: 272 seconds)
[17:55:12] *** Quits: mitch0 (~mitch@84-236-101-128.pool.digikabel.hu) (Ping timeout: 272 seconds)
[17:55:14] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[17:56:02] *** Joins: baltazar (~baltazar@178-164-190-49.pool.digikabel.hu)
[17:56:50] *** Joins: mitch0 (~mitch@178-164-190-49.pool.digikabel.hu)
[17:58:40] <PJBoy> struggling to find the documentation that says I can `import conan.tools.cmake`
[17:59:25] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[17:59:47] <rpav> hum, just ordered a ryzen 9 5900x / mobo / 64GB .. should be enough to compile llvm _and_ run a browser
[18:00:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:01:59] <PJBoy> can it compile llvm in-browser though?
[18:02:38] <Friithian> oh god last time I tried to compile llvm the linker took so much memory the oom-killer showed its face
[18:02:42] <rpav> llvm _does_ have a wasm backend
[18:02:47] <rpav> Friithian: yea
[18:03:21] <Friithian> I never did figure out how to properly compile it so it uses all the threads it can on the compile stage, but doesn't shit itself on mem usage while linking
[18:03:26] <rpav> i say compile but it's really the linking steps .. definitely needs 24G+ which is crazy
[18:03:54] <rpav> there's not much you can do except maybe `make -j 1` (or `ninja -j1`) during those steps if you have issues
[18:04:00] <rpav> linking rarely is in parallel anyway
[18:04:13] <rpav> swap partition on nvme? ;)
[18:04:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:04:22] <PJBoy> that's insane
[18:04:22] <Friithian> well that solves the linking issue, but the compile stages go slower
[18:04:24] <PJBoy> wtf
[18:04:28] <Friithian> 32GB ram + 32GB swap and it still shat itself
[18:04:44] <rpav> Friithian: right, well, restart once it's linked .. but usually i don't have issues til the last step anyway so
[18:05:06] <rpav> you shouldn't -j more than 1 per 2-4GB
[18:05:28] <Friithian> maybe I'll try again soon
[18:05:55] <rpav> i can definitely get it to build on 32GB and it doesn't actually _require_ a lot of swap
[18:06:02] *** Quits: proller (~p@2a02:6b8:0:40c:a7f3:9e3a:a3cc:244c) (Ping timeout: 240 seconds)
[18:07:00] <Friithian> although I think I need more disk space before compiling llvm again
[18:07:21] <rpav> actually wtf _is_ taking so much ram right now
[18:07:56] <Friithian> something chromium based?
[18:08:05] <rpav> Chrome -> exit .. 24% -> 16%
[18:08:10] <Friithian> ding ding!
[18:08:17] <PJBoy> spare RAM is wasted RAM
[18:08:45] <Friithian> unless you plan on using that ram for something else
[18:08:48] <rpav> that doesn't explain teh remaining 16% though .. should really not be more than like 5% of 32GB
[18:08:58] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:09:00] <Friithian> check your preferred process moniitor
[18:09:04] <rpav> exactly .. and i do, with clangd+gcc
[18:09:14] <rpav> yeah that's what i'm going through now
[18:09:28] <Friithian> and by that I mean manually parse /proc/
[18:09:35] <rpav> heh
[18:10:09] <rpav> xpra was a couple%
[18:10:33] <Friithian> boot headless and compile there for maximum utilization
[18:12:15] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:14:07] <rpav> hrm emacs was taking up 5% .. i think it's letting the clangd buffer get too big
[18:14:22] <Friithian> and this is why we use neovim ;P
[18:14:56] <rpav> actually it must mostly be clangd; that accounted for ~4% before when i killed it
[18:15:05] <rpav> and it would have killed the processes when i exited
[18:15:11] <Friithian> I am still blaming emacs
[18:15:22] <rpav> hehe
[18:15:29] <rpav> well it wasn't showing up too high on ps
[18:16:01] <rpav> chrome 13% -> 18%
[18:16:51] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:45e9:3822:8cbb:4b60)
[18:16:51] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:45e9:3822:8cbb:4b60) (Changing host)
[18:16:51] *** Joins: skapata (~Skapata@user/skapata)
[18:22:51] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[18:26:48] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[18:27:51] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[18:27:58] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Read error: Connection reset by peer)
[18:41:24] <LordKalma> Changing linkers doesn't help with memory?
[18:41:49] <LordKalma> Does llvm build with lto? If it does, thinlto is a better linker
[18:41:51] <Friithian> I found an article that recommended switching to gold :P
[18:42:56] <rpav> nah use lld
[18:43:10] <rpav> i mean, you should at _least_ be using gold, but lld is that much better
[18:43:25] <rpav> mold will hopefully kick all their asses but it's not ready for primetime afaict
[18:43:59] <Friithian> tbh I never thought of what linker was being used until I tried to compile llvm
[18:44:04] <rpav> LordKalma: what, what's thinlto .. i thought that was a mode of LTO
[18:45:52] <rpav> ah yeah sortof looks like .. the basic linkers support it? https://clang.llvm.org/docs/ThinLTO.html
[18:45:56] <rpav> not sure i've tried that for big builds though
[18:49:24] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[18:50:23] *** Joins: proller (~p@2a02:6b8:0:40c:8ae9:9280:5d9e:fe69)
[19:00:16] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[19:00:18] *** Joins: paul424 (~tom@ip-5-172-238-104.multi.internet.cyfrowypolsat.pl)
[19:00:19] *** Joins: tom_ (~tom@ip-5-172-238-104.multi.internet.cyfrowypolsat.pl)
[19:01:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:01:49] <Hello71> thinlto isn't a linker.
[19:04:39] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:15:42] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[19:16:12] *** Quits: Burgundy (~NA@86.121.143.206) (Remote host closed the connection)
[19:16:36] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[19:30:13] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 240 seconds)
[19:36:12] *** Quits: ville (~ville@user/ville) (Quit: ville)
[19:39:30] *** Joins: ville (~ville@user/ville)
[19:42:00] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:46:06] *** Quits: tom_ (~tom@ip-5-172-238-104.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[19:51:22] <Haohmaru> !fact
[19:51:23] <nolyc> Haohmaru: A class template defines the layout and operations for an unbounded set of related types.
[19:54:34] *** Joins: pulse (~pulse@user/pulse)
[19:56:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:56:58] *** Joins: xkuru (~xkuru@user/xkuru)
[20:01:33] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:05:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:09:26] *** Quits: apteryx (~maxim@dsl-156-1.b2b2c.ca) (Quit: apteryx)
[20:12:26] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 245 seconds)
[20:15:01] *** Joins: angelacrust (~angelacru@171.50.165.251)
[20:17:37] *** Joins: DepthDeluxe (~DepthDelu@2601:647:4700:1e3c:ecf9:7ef4:b130:16ca)
[20:25:31] <cq-work> !fact
[20:25:33] <nolyc> cq-work: List-initialization is initialization of an object or reference from a braced-init-list.
[20:29:06] <Friithian> do we have a !fiction to contrast?
[20:30:16] <Alipha> did anyone watch Beyond Belief: Fact or Fiction, starring Jonathan Frakes (Commander Will Riker?)?
[20:30:57] <Haohmaru> Friithian no, fiction has no place here
[20:31:21] <Friithian> but I hear people speak of the amazingness of rust here frequently
[20:31:26] <rpav> haha
[20:32:38] <Alipha> we should have !fiction return random examples of UB and present them as if they're true
[20:32:52] <Haohmaru> +1 Alipha
[20:32:59] <Alipha> "Dereferencing the end iterator is valid"
[20:33:07] <Haohmaru> !give Friithian rust
[20:33:08] <nolyc> Friithian: Rust is composed of iron oxides. In colloquial usage, the term is applied to red oxides, formed by the reaction of iron and oxygen in the presence of water or air moisture.
[20:33:59] <Friithian> lol
[20:36:54] <Alipha> "You can use std::prev on std::unordered_map iterators"
[20:37:41] <Haohmaru> "scrambled_eggs is just a typedef of unordered_eggs"
[20:37:58] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 260 seconds)
[20:39:54] <pulse> !grab Haohmaru
[20:39:54] <nolyc> pulse: The operation succeeded.
[20:41:13] *** Joins: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it)
[20:43:59] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[20:45:02] <Alipha> though "scrambled" implies intentional shuffling. while "unordered" simply doesn't make any promises about ordering
[20:45:44] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Ping timeout: 250 seconds)
[20:46:02] * Alipha creates a std::scrambled_map. it has O(n) lookup
[20:46:44] <Haohmaru> i find scrambled eggs not very promising
[20:48:34] <imMute> Alipha: is that just std::map with a Compare that does a std::hash() before doing operator< ?  ;)
[20:48:50] <Friithian> std::hash_browns()
[20:49:02] <Alipha> std::hash<Browns>()
[20:49:53] <Alipha> imMute: it could be. though std::hash isn't very interesting for integer types
[20:50:01] <Alipha> << std::hash<int>()(12)
[20:50:02] <geordi> 12
[20:50:19] <imMute> well that's dumb...
[20:50:54] <CarloWood> Looks like a cryptographically strong one-way hash.
[20:55:20] <Alipha> siphash!
[20:55:23] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 265 seconds)
[20:55:28] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:57:14] *** Joins: malloy (~jimery@116.30.220.175)
[21:02:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:02:11] *** Joins: nshire_ (~nshire@47.146.41.156)
[21:02:40] <Alipha> imMute: as a generic utility, std::hash<int> has no idea the shape of the ints in order to make a more effective hash function. so there's no reason to do any additional work if it doesn't know if that adds any additional value. besides, if the number of buckets you use is prime, then that's effective in reducing collisions (as long as your data doesn't tend to be congruent to each other mod the bucket
[21:02:42] <Alipha> size)
[21:02:45] <Alipha> { std::unordered_map<int,int> m = {{0,20},{1,51}}; cout << m.bucket_count(); }
[21:02:45] <geordi> 13
[21:03:00] <Alipha> { std::unordered_map<int,int> m = {{0,20},{1,51},{034,20},{1532,51},{450,20},{3451,51},{7430,20},{641,51},{120,20},{431,51},{430,20},{61,51},{20,20},{13,51}}; cout << m.bucket_count(); }
[21:03:01] <geordi> 29
[21:03:12] * Alipha wonders if there's just a hardcoded list of prime numbers
[21:04:34] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 260 seconds)
[21:05:50] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[21:07:30] <kalven> the whole hash system in standard c++ is pretty garbage
[21:08:38] *** Quits: DepthDeluxe (~DepthDelu@2601:647:4700:1e3c:ecf9:7ef4:b130:16ca) (Quit: Leaving)
[21:11:39] <Alipha> it's sad std::pair and std::tuple don't have std::hash defined.
[21:11:51] <Alipha> and potentially the containers would be nice too
[21:12:03] <Alipha> maybe not the unordered containers
[21:14:33] <kalven> not sure what happened to hinnants proposal
[21:26:00] *** Quits: jokoon (~eio@2a01:e0a:542:e160:9488:e80c:fc86:e1a6) (Read error: Connection reset by peer)
[21:26:18] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:26:21] *** Joins: jokoon (~eio@2a01:e0a:542:e160:9488:e80c:fc86:e1a6)
[21:29:00] *** Quits: jokoon (~eio@2a01:e0a:542:e160:9488:e80c:fc86:e1a6) (Client Quit)
[21:32:23] <paul424> What's up with the std::map ?  I need to store map keys like in two disjoint sets. Like call them Xs and Ys .... Having two maps is bad because when I ask is t an X ( or in map X) then it will always return some value
[21:32:37] <paul424> even if not and it's in the Y map. What to do ?
[21:33:01] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:33:12] <kalven> use .find or .contains to see if an entry exists, not operator[]
[21:34:36] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[21:35:21] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:36:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[21:36:28] <Alipha> operator[] will default construct an element if it doesn't exist
[21:37:14] <Alipha> You can also use .at if you want an exception to be thrown if it doesn't exist
[21:38:47] *** Quits: soman (~soman@83.139.179.68) (Ping timeout: 256 seconds)
[21:38:54] <paul424> kalven, Alipha thanks
[21:39:48] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[21:42:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:06] *** ChanServ sets mode: +v npaperbot
[21:45:14] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[21:53:04] *** Joins: oscurochu (~oscurochu@2603-9000-c202-1034-ecbc-c4db-21c9-0a46.inf6.spectrum.com)
[21:55:04] *** gentooclimax is now known as climax
[21:56:50] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[21:57:01] *** climax is now known as gentooclimax
[21:57:33] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[21:57:56] *** Quits: proller (~p@2a02:6b8:0:40c:8ae9:9280:5d9e:fe69) (Ping timeout: 252 seconds)
[21:58:20] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[21:59:10] *** Quits: plastico (~plastico@neomutt/plastico) (Remote host closed the connection)
[21:59:56] *** Joins: plastico (~plastico@neomutt/plastico)
[22:00:10] *** Joins: pulse (~pulse@user/pulse)
[22:02:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:03:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[22:05:59] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:07:29] *** Quits: angelacrust (~angelacru@171.50.165.251) (Quit: Client closed)
[22:13:00] *** Quits: p-i- (~Ohmu@183.89.30.105) (Ping timeout: 240 seconds)
[22:13:03] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:9e12:946e:262d:4e8a:73e2)
[22:14:01] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:17:36] *** gentooclimax is now known as climax
[22:19:12] <paul424> kalven, contains ? bool contains( const Key& key ) const;
[22:19:12] <paul424> 	(1) 	(since C++20) ... hmm would g++ work with it out of the box ?
[22:19:47] <kalven> paul424: depends on how recent your g++ is. if you don't have it, use .find
[22:19:56] <paul424> oki thanks
[22:20:32] <Alipha> paul424: contains is pretty useless anyway, since 99.9% of the time, you then want to do something with the element if it exists
[22:21:05] <Alipha> just use find
[22:21:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[22:22:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[22:24:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:27:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[22:32:23] *** Parts: blackout69 (~blackout6@net-109-117-245-37.cust.vodafonedsl.it) ()
[22:33:04] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[22:35:31] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Remote host closed the connection)
[22:35:47] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[22:40:36] *** Quits: kulzen (~Guest19@2601:647:5280:2a50:7500:cc05:1b37:c736) (Quit: Client closed)
[22:45:13] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:50:09] *** Joins: Simplar (~Simplar@188.163.93.241)
[22:54:29] *** Quits: paul424 (~tom@ip-5-172-238-104.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[22:54:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:56:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:59:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:01:04] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:01:34] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:9473:c92c:b844:1b59)
[23:01:34] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:9473:c92c:b844:1b59) (Changing host)
[23:01:34] *** Joins: skapate (~Skapata@user/skapata)
[23:03:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:03:10] <PJBoy> idk about 99% of the time
[23:03:17] *** skapata is now known as Guest4571
[23:03:17] *** Quits: Guest4571 (~Skapata@user/skapata) (Killed (osmium.libera.chat (Nickname regained by services)))
[23:03:17] *** skapate is now known as skapata
[23:03:35] <PJBoy> there's `if (!map.contains(key)) map[key] = value;`
[23:03:47] <PJBoy> find doesn't help you there
[23:05:05] <ville> inser()
[23:05:19] <PJBoy> yeah I know
[23:05:19] <ville> sometimes spelled with a t in some parts of the world
[23:05:26] <PJBoy> but only because I looked up cppreference
[23:05:29] <kalven> tinser
[23:05:53] <rpav> try_emplace?
[23:06:01] <PJBoy> that too
[23:06:02] <Alipha> `map.try_emplace(key, value);`
[23:06:07] <rpav> the problem of course is no lazy evaluation
[23:06:41] <rpav> even though it calls the ctor of the value, it doesn't defer evaluation of the arguments, so you may still unnecessarily do things
[23:06:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[23:06:57] <rpav> i thought there was an emplace_with_hint or something though
[23:07:08] <rpav> ah emplace_hint indeed
[23:07:13] <PJBoy> so there, `if (!map.contains(...))` still has a use case
[23:07:29] <PJBoy> for when the args would be needless much calculation
[23:07:37] <rpav> contains is such bullshit
[23:07:43] <rpav> it should return a pointer
[23:07:51] <Alipha> then it's just find
[23:07:51] <PJBoy> then it would be find
[23:07:55] <PJBoy> ish
[23:08:02] <rpav> but it _is_ already find, with discarded effort
[23:08:18] <rpav> i always just use my own findmap which returns a pointer, no need for contains()
[23:08:38] <PJBoy> it saves on checking the found iterator against the map's end iterator
[23:09:03] <PJBoy> returning the end iterator probably has some marginal overhead compared to returning a bool
[23:09:04] <rpav> not really
[23:09:09] <PJBoy> and contains is more expressive
[23:09:31] <ville> i bet you use "and" and "or" too
[23:09:44] <PJBoy> you know I don't
[23:10:03] <PJBoy> because they could be confused with bitand and bitor
[23:10:13] <ville> the level of expressiveness for those is above 9000
[23:11:00] <PJBoy> `and` and `or` are logical operations, whilst `and_eq`, `or_eq` and `xor` are all bitwise
[23:11:02] <PJBoy> terrible
[23:11:13] <rpav> `bitor` is what you get using c++
[23:11:57] <PJBoy> and ~ is `compl` instead of `bitnot`
[23:11:59] <PJBoy> terrible
[23:12:05] <Alipha> PJBoy: https://wandbox.org/permlink/47b2AZXvMhrA94uw ? :-)
[23:12:34] <PJBoy> what the fuck happened to wandbox
[23:12:53] <Alipha> it got a face lift!
[23:13:13] <PJBoy> oh god it's so much worse
[23:13:25] <PJBoy> and it doesn't work on my old firefox anymore
[23:13:35] <PJBoy> god damn it
[23:13:46] <rpav> how do you change any settings
[23:13:53] <PJBoy> clone + edit
[23:13:55] <Alipha> rpav: you have to clone first
[23:13:58] <PJBoy> they're doing the ideone thing
[23:14:45] <rpav> it looks slightly less 90s .. it seems more of a pita to use
[23:14:48] <ville> i get a big fat "application error" on wandbx
[23:14:55] <PJBoy> damn iiiiiiiiit
[23:15:30] <ville> ok that site is now no longer recommended or accepted
[23:16:13] <PJBoy> but it's still the only site that reasonably supports multiple files
[23:16:35] *** climax is now known as gentooclimax
[23:16:53] <ville> it supposrts 0 files currently
[23:18:14] <PJBoy> argh
[23:18:19] <PJBoy> damn it wandbox
[23:19:19] <Alipha> i'm disappointed how much more overhead there is in the lazy solution: https://godbolt.org/z/janh7hber
[23:19:46] <ville> so godbolt or coliru?
[23:20:53] <PJBoy> coliru is my secondary
[23:21:27] <PJBoy> godbolt's slow and cluttered when you don't need its disassembly or libraries
[23:21:29] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[23:21:36] <PJBoy> and also doesn't work on my old firefox
[23:21:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[23:22:06] <antto> ashfox
[23:23:03] <antto> hm, that's a dead firefox, i meant smokefox
[23:23:18] *** Joins: lxsameer (lxsameer@user/lxsameer)
[23:23:38] <rpav> isn't that just solid snake
[23:24:06] <PJBoy> on the other hand, coliru has out of date compilers
[23:24:19] <rpav> solution: godbolt
[23:24:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Ping timeout: 240 seconds)
[23:25:05] <Alipha> no one commented on my lazy struct :-(
[23:25:11] <PJBoy> there's a temptation to fork old wandbox
[23:25:34] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[23:25:48] <PJBoy> wandbox has ruined my day
[23:25:56] *** Joins: kraa2 (~kraa@107-190-7-216.cpe.teksavvy.com)
[23:25:56] <PJBoy> there's no coming back from that
[23:26:00] <antto> Alipha, what struct?
[23:26:37] <antto> wait, is it some voodoo struct?
[23:26:55] <antto> oh i saw the link now
[23:26:57] <Alipha> antto: https://godbolt.org/z/5461avjvd
[23:27:35] *** gentooclimax is now known as climax
[23:28:14] <antto> dafuq's going on there x_x
[23:28:47] <rpav> i'm not even sure
[23:29:24] <PJBoy> it's a struct that holds a function and is implicitly convertible to that function's result
[23:29:32] <PJBoy> whose conversion calls the function
[23:29:34] <rpav> i mean aside from the obvious :p
[23:29:43] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[23:29:52] <rpav> what the asm is doing and why it's not mostly inlined nothing
[23:29:58] <PJBoy> oh that bit
[23:29:58] <Alipha> The complaint with `map.try_emplace(key, foo());` is that it calls foo regardless. And so, instead, you can do `map.try_emplace(key, lazy(foo));`
[23:30:01] <antto> he is taking the regurn type of a function, to declare a member variable of the struct?
[23:30:06] <rpav> they're both pretty long
[23:30:11] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[23:30:34] <antto> * return
[23:31:12] <rpav> like `call operator new(unsigned long)` what
[23:31:12] <PJBoy> hard to compare because one calls try_emplace and the other inlines try_emplace
[23:32:27] <PJBoy> operator new(size_t) allocates memory
[23:32:49] <rpav> yes, why the hell is it doing that here heh
[23:33:03] <PJBoy> because unordered_map allocates memory when you emplace into it
[23:33:15] <PJBoy> try_emplace is inlined in that codegen
[23:33:39] <rpav> err .. oh duh i'm reading this as calling `new<unsigned long>()`
[23:34:10] <rpav> but unclear why it's allocating here and why the other _isn't_
[23:34:31] <PJBoy> wow clang doesn't compile that lazy one
[23:34:49] <PJBoy> the mystery is why try_emplace gets inlined in one and not the other
[23:35:00] <rpav> of course it's not to say that one is more or less optimal than the other .. but it definitely generates a bit more asm
[23:35:47] <rpav> probably just need a deduction guide
[23:36:30] <PJBoy> seems that way
[23:37:22] <rpav> huh doesn't seem to help
[23:38:26] <rpav> oh
[23:38:49] <rpav> lazy{} not lazy() since no ctor
[23:39:09] <rpav> and you need the guide
[23:39:36] <rpav> and the clang output is pretty long but it's hard to tell what's efficient or not i guess
[23:40:05] <PJBoy> clang looks to inline both
[23:40:10] <rpav> i mean, for simple doubles, not calling a function is almost certainly maximally efficient obviously
[23:40:23] <PJBoy> it has like a thousand lines of debug text for me for the non lazy case
[23:40:28] *** Joins: kaph (~kaph@net-109-116-117-37.cust.vodafonedsl.it)
[23:40:31] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:9d17:3f5c:3c5f:d569)
[23:40:31] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:9d17:3f5c:3c5f:d569) (Changing host)
[23:40:31] *** Joins: skapate (~Skapata@user/skapata)
[23:41:50] <PJBoy> man idk what clang smokes, but if I ever become a compiler, I want it
[23:42:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[23:43:20] <notevil> !grab PJBoy
[23:43:20] <nolyc> notevil: The operation succeeded.
[23:44:12] <Friithian> it's just a few kg of lsd
[23:44:25] <Friithian> not Âµg, not g, kg
[23:45:28] <LordKalma> PJBoy ping
[23:45:50] <PJBoy> poo
[23:45:50] <LordKalma> what's the clang-format setting to have the initializing list of a constructor have an element per line?
[23:45:53] <LordKalma> do you know?
[23:46:10] <PJBoy> clang-format I'm not familiar with actually
[23:46:25] <LordKalma> https://i.gyazo.com/9a4082f3ab5d6eefb121b2ae3c6a36ed.png // this looks like shit
[23:47:03] <PJBoy> seems to be PackConstructorInitializers though
[23:47:04] <LordKalma> hum... https://stackoverflow.com/a/59574671
[23:47:07] <LordKalma> yes indeed
[23:47:27] <PJBoy> I hate wrapping styles that do that
[23:47:35] <PJBoy> just bring it down a line and indent four spaces
[23:47:54] <Friithian> >indent >spaces
[23:47:54] <Friithian> reeeeee
[23:48:22] <PJBoy> eh I can't help it if tabs are misused by everyone and mishandled by every tool
[23:48:35] <rpav> they're only misused by people who use them
[23:48:41] <PJBoy> true
[23:48:52] <LordKalma> PackConstructorInitializers: CurrentLine doesn't seem to cut it
[23:49:10] <Friithian> it is an abuse of spaces to use them for indentation
[23:49:25] <rpav> i see the kids have to relearn spaces-not-tabs
[23:49:55] <Friithian> relearn? fucking hell if there's people teaching spaces over tabs they need to be caught and shot now
[23:49:57] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[23:50:03] <Friithian> (don't worry, that's a hitchhiker's reference)
[23:50:23] <rpav> yeah pretty sure that wasn't in the books heh
[23:50:29] <Friithian> oh it was
[23:50:45] <Friithian> ``if there's something more important than my ego, I want it caught and shot now!''
[23:51:00] <rpav> ok not a very good reference then :P
[23:51:09] <Friithian> it's an excellent refernce, you just didn't get it
[23:51:18] <Friithian> like you don't get how spaces should not be used for indentation
[23:51:37] <rpav> nah it's like tabs .. intent, poorly done
[23:51:44] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:dbd7:f1d:cb35:c4f4)
[23:51:44] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:dbd7:f1d:cb35:c4f4) (Changing host)
[23:51:44] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:51:59] <Friithian> tabs are perfectly excellent for indentation given how they were built to do so
[23:52:05] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[23:52:14] <rpav> ðŸ‘Ž
[23:52:20] <LordKalma> space team
[23:52:50] <Friithian> uses spaces, uses emojis in irc, figures
[23:53:10] <rpav> tabs are nearly as bad as people who use variable width fonts for code
[23:53:30] <Friithian> what the fuck
[23:53:36] <Friithian> you're insane
[23:53:55] <rpav> like everyone learned this decades ago, but apparently the newbies have to relearn every few years, it's weird
[23:54:31] <LordKalma> I use 4 spaces because I use half-ident for visibility identifiers
[23:54:32] <Friithian> has this channel really fell so far in grace that we have people actively advocating for spaces for indentation? An outrage
[23:54:34] <LordKalma> like public and private
[23:55:02] <rpav> no one needs to _advocate_; it's a settled question that spaces are what you should use
[23:55:12] <rpav> but occasionally someone is clueless enough to think otherwise
[23:55:15] <Friithian> no it sure isn't
[23:55:42] <rpav> LordKalma: i'm actually not sure what i do for public/private, i want to say zero indent but i think actually half
[23:55:57] <LordKalma> just do whatever you want
[23:55:58] <LordKalma> idc
[23:56:08] <rpav> i just push a button and let clang-format do whatever, i haven't changed the settings in awhile and the results are good enough
[23:56:25] <rpav> i mostly only have issues with things that end up error-prone or hard to read/confusing
