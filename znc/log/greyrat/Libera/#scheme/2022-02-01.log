[00:00:46] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[00:00:46] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[00:26:37] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[00:27:29] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[00:37:46] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[00:39:35] <tatsumaru> hey guys could you share some other programming languages which introduced profoundly different programming paradigms to the scene such as lisp and prolog? I enjoy reading about alternative approaches to programming. Not interested in esoteric languages made for fun though, only stuff that's actually useful.
[00:40:09] <ecraven> APL, maybe forth, smalltalk
[00:40:44] <ecraven> personally, also idris 2 ;)
[00:41:10] *** Joins: cjb (~cjb@user/cjb)
[00:42:54] <tatsumaru> thanks ecraven
[00:44:35] <mdhughes> COBOL
[00:44:40] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[00:45:40] <mdhughes> Actually, BASIC as the first, or at least most significant, time-shared, interactive language.
[00:45:48] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[00:46:05] <mdhughes> You like REPL? It's there because BASIC was interactive.
[00:47:16] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[00:48:31] *** Joins: X-Scale` (~ARM@46.50.6.87)
[00:49:07] <tatsumaru> When I was a little kid I found an old book in my grandma's library about BASIC and how to write source code on magnetic tape.
[00:49:59] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[00:50:18] <sham1> How old do we want to go with finding programming languages that introduced profoundly different programming paradigms
[00:51:01] *** Quits: X-Scale (~ARM@83.223.248.131) (Ping timeout: 256 seconds)
[00:51:02] *** X-Scale` is now known as X-Scale
[00:51:21] <tatsumaru> sham1 My question wasn't that great. I want to update this question by adding the condition that these programming languages are still underappreciated i.e. they contain powerful features that are not very well known
[00:51:34] <sham1> Ah
[00:53:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:55:32] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[00:56:13] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[00:58:58] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[01:02:05] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1c:1ad4:20cd:fc87)
[01:02:05] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1c:1ad4:20cd:fc87) (Changing host)
[01:02:05] *** Joins: skapata (~Skapata@user/skapata)
[01:07:53] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[01:12:19] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 268 seconds)
[01:14:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[01:15:35] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[01:37:29] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:38:56] *** Joins: aeth (~aeth@user/aeth)
[01:44:08] <Zipheir> Logic languages seem to me like the only fundamentally "new" idea since Lisp and FORTRAN.
[01:44:11] <Zipheir> *ideas
[01:44:23] *** Quits: flyke (~flyke@45.168.124.52) (Ping timeout: 268 seconds)
[01:45:32] <Zipheir> I recall a comment by the late Joe Armstrong in 2019 (or so): "What's happened in programming since the 60s?  Not too much, besides Prolog."
[01:45:45] *** Joins: flyke (~flyke@45.168.124.52)
[01:57:42] <sham1> SQL is like Prolog except not Turing complete and more limited in scope (a good thing in this case), since relational algebra is very much related to the logic relations expressed in Prolog and such
[02:00:08] <ouestbillie> big data is moving towards datalog anyways
[02:00:11] <ouestbillie> which is a subset of prolog
[02:00:22] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[02:00:56] <ouestbillie> Zipheir: inb4 type theory comes knocking at your door with a threatening aura
[02:01:13] <ouestbillie> behind it is pi-calculus and all concurrent related theory
[02:02:04] *** Joins: civodul (~user@guix/contributor/civodul)
[02:03:22] <ouestbillie> Zipheir: also Algol is pretty pissed you forgot about lexical scope
[02:16:57] <aeth> the problem with declarative/query/logic is the unpredictable performance
[02:17:37] <aeth> if Moore's law had continued to apply to single-threaded performance, we'd probably be using them more often... but then again, there's only so much Moore's law can do to help you if the algorithm has bad big-O
[02:18:13] <ouestbillie> aeth: i have bad news for you if you want "predictable" performance
[02:18:30] <aeth> the level of abstraction we've settled on (e.g. lists vs vectors vs hash tables vs etc.) is mainly to avoid bad big-O.
[02:18:36] * ouestbillie gestures wildly at modern hardware, microcode, compiler optimizations etc
[02:19:09] <aeth> although obviously (1) weird hierarchies of network/storage/memory/cache/etc. can still hurt performance unexpectedly, (2) hash tables aren't really O(1) access and we just assume they are...
[02:19:54] <aeth> and, yeah, strange compiler optimizations... a few other things, too
[02:20:16] <aeth> but in general, we like to believe that we have control over the expectations of algorithmic performance, which declarative takes from us
[02:20:32] <ouestbillie> we live to believe is key here
[02:20:37] <ouestbillie> just embrace the darkness
[02:20:39] <aeth> hmm, probably should add strings to "unexpected nonsense"
[02:20:43] <aeth> not just C-strings, also Unicode
[02:20:59] <ouestbillie> C-strings are the true billion dollar mistake
[02:21:15] <aeth> but even with Unicode
[02:21:21] <sham1> C strings are fine for what they are, especially when one considers them in context
[02:21:29] <aeth> you can have fast Unicode, but then you can't reverse strings containing flags... https://davidamos.dev/why-cant-you-reverse-a-flag-emoji/
[02:21:40] <sham1> Grapheme clusters!
[02:21:43] <aeth> or you can have "proper" Unicode, but now it will have unexpected performance
[02:22:08] <sham1> ðŸ‡ºðŸ‡¦ => ðŸ‡¦ðŸ‡º
[02:22:20] <sham1> Well, arrow both ways
[02:22:31] <aeth> ðŸ‡ºðŸ‡¸ vs ðŸ‡¸ðŸ‡º
[02:22:38] <aeth> too bad SU isn't the USSR flag, like the .su domain
[02:23:01] <sham1> But yeah, this is why one deals with grapheme clusters if they want to reverse strings in a manner humans understand
[02:23:02] <aeth> it's basically literally the Cold War to have the two flags reverse into each other
[02:23:45] <Zipheir> ouestbillie: Oh, I didn't forget at all about type theory, but I'm not sure it's really a new idea.
[02:24:18] <Franciman> i think one thing changed
[02:24:27] <Franciman> initially type theory was used for constraining use of the languages
[02:24:29] <Franciman> see russel
[02:24:36] <Franciman> at some point they started to think, uhm
[02:24:36] <Zipheir> Most people are still figuring out Martin-LÃ¶f type theory, which is ~40 years old at this point.
[02:24:52] <Franciman> instead of using it to constraint usage, i can use it to express properties and describe computations
[02:25:14] <Franciman> so instead of saying this can't return anything but
[02:25:22] <Franciman> you start saying, this does return X
[02:25:32] <ouestbillie> now lets not pretend anybody in this room actually knows what Martin-Lof was talking about
[02:25:33] <Franciman> i mean the POV changed
[02:25:39] *** Quits: flyke (~flyke@45.168.124.52) (Ping timeout: 256 seconds)
[02:25:48] <ouestbillie> id venture categorical logic unifying with type theory was a pretty big deal
[02:25:52] <Franciman> martin lof basically took the verificationist point of view
[02:25:56] <Franciman> and put it in type theory
[02:26:02] <Zipheir> Yes.
[02:26:11] * ouestbillie stares angrily at dusty HOTT copy in corner of the room
[02:26:15] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[02:26:15] <Zipheir> I think most of the programming world is ignoring this, unfortunately.
[02:26:25] <Zipheir> It's filtering in slowly.
[02:26:27] <Franciman> he even quotes carnap when saying: the meaning of a property is what counts as a verification of it
[02:26:40] <Franciman> wait i don't remember if it's carnap or other neopositivists
[02:27:04] <ouestbillie> okok were quoting Lof quoting carnap in this bitch
[02:27:19] <sham1> I don't understand LÃ¶f's work, but that doesn't mean I won't try
[02:27:20] <Zipheir> Category theory being connected with type theory and functional programming is a very big deal for CS, but perhaps not a whole new paradigm of computing.
[02:27:29] *** Joins: flyke (~flyke@45.168.124.52)
[02:27:37] <ouestbillie> dude like 
[02:27:48] <ouestbillie> how much change do you need for paradigm shifting
[02:27:55] <sham1> Clearly intuitionist type theory wasn't intuitive enough
[02:28:04] <ouestbillie> ++++
[02:28:14] <Zipheir> Ask Thomas Kuhn.
[02:28:34] <ouestbillie> ...id prefer not to
[02:28:47] <Franciman> sham1: just think about functional programming
[02:29:09] <ouestbillie> famous last words
[02:29:11] <Zipheir> Sussman: "I worry that we're playing with perfecting our type systems when computing is radically changing under our feet." ... or something like that.
[02:29:28] <Franciman> interesting PoV
[02:29:43] <Zipheir> His notion of propagator-based designs using mega-parallel computing sytems would be a major shift, IMO.
[02:29:56] <sham1> Types are thankfully abstract enough that they can be pretty much on every device
[02:30:14] <sham1> Actor model for all the tuings
[02:30:38] <Zipheir> (Quote paraphrased from We Really Don't Know How to Compute: https://www.youtube.com/watch?v=O3tVctB_VSU)
[02:30:48] <Zipheir> Oh, jeez, actors.
[02:30:49] *** Joins: aeth_ (~aeth@user/aeth)
[02:30:49] <Franciman> does hewitt say anything about scheme?
[02:31:00] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[02:31:05] *** aeth_ is now known as aeth
[02:31:30] <sham1> Actors as the basic building block of software like Java uses classes when
[02:31:36] <Zipheir> Corbin says actors are just a Î» calculus, and I believe him.
[02:31:55] <sham1> I'd argue Ï€ calculus
[02:31:57] <Franciman> i think actors are let-over-lambda
[02:32:22] <Zipheir> Specifically, he said "actors give a cartesian closed category", which is essentially equivalent.
[02:32:24] <ouestbillie> Zipheir: i mean what /isn't/ a lambda calculus
[02:32:29] <ouestbillie> also 
[02:32:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:32:42] <ouestbillie> what transtively, according to lambeck, what /isnt/ a CCC?
[02:32:43] <Franciman> ouestbillie: actors, according to hewitt
[02:32:46] <Franciman> they solve godel
[02:32:49] <Franciman> and everything
[02:32:54] * Franciman lels
[02:33:06] <Zipheir> Yeah, they're magic and stuff.
[02:33:12] <sham1> So not powerful enough to do arithmetic
[02:33:26] <Franciman> sham1: no powerful
[02:33:28] <Zipheir> The nice thing about them is that they've inspired a ton of research, leading to Scheme, among other things.
[02:33:30] <Franciman> but hewit has very strange ideas
[02:33:42] <ouestbillie> okay this thread is getting lit af
[02:33:42] <Franciman> and by strange i mean: controversial
[02:33:56] <ouestbillie> any book recommandations on actor theory?
[02:34:08] <Franciman> ouestbillie: it is not better than other models, i was just quoting hewitt lol
[02:34:24] <Franciman> Zipheir: iirc actors were ditched from scheme because they were just lambdas?
[02:34:36] <Zipheir> Franciman: IIUC, yes.
[02:34:37] <sham1> I like the idea of actors, and they remind me of how Alan Kay has characterised object orientation. Although in some sense I don't truly see a difference between an object and an actor
[02:34:54] <sham1> It's just that they're weird to do stuff with
[02:34:55] <Zipheir> Right, Smalltalk is another fruit of the actors research tree.
[02:35:05] <ouestbillie> objects are a great example of "a definition so general as to be useless" imo
[02:35:28] <Zipheir> Hah, agreed. :)
[02:35:33] <sham1> It's not about encapsulation, but about sending a message. - Joker
[02:35:48] <Zipheir> I'm always asking people who ask "does Scheme have objects?" what they mean by "object".
[02:36:17] <ouestbillie> imo the problem is that people that first defined objects didnt know type theory
[02:36:36] <ouestbillie> which is fair cause it didnt really have mindshare at that moment in cs
[02:37:08] <sham1> Doesn't help that the term object is overloaded beyond just this stuff, I mean C for example has objects but there the standard just defines them as "stuff in memory with a size"
[02:37:35] <Franciman> wittgenstein also has objects
[02:37:38] <ouestbillie> so at the end of the day an object in day to day life these days is mishmash of a bunch of not so related concepts like "namespace + type + scope"
[02:37:39] <Franciman> as the substance of the world
[02:37:45] <Franciman> so yeah, a pretty overloaded word
[02:38:04] <ouestbillie> wittgenstein is for people who think they can figure out life
[02:38:54] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[02:38:57] <ouestbillie> sloterdijk is for people who are like  "oh fuck this lets just have fun and write stuff"
[02:40:05] <Zipheir> It's good distinguish between "W1" Wittgenstein (Tractatus, basically) and the later W2 (the sort of pietistic guy who wrote Philosophical Investigations).
[02:40:28] *** Joins: aeth (~aeth@user/aeth)
[02:41:05] <Zipheir> Russell made some joke about how everyone should read W1 and no-one should be allowed to read W2.  This was a reference to Wittgenstein's own somewhat nasty remark that no-one should be allowed to read Russell's ethical writings.
[02:41:33] <ouestbillie> PI is overrated
[02:41:44] <ouestbillie> most analytic phil is for failed mathematicians
[02:41:46] * ouestbillie ducks
[02:42:01] <Franciman> loool
[02:42:09] <Zipheir> I'd call Philosophical Investigations anti-analytic.
[02:42:10] <Franciman> imho W2 makes some interesting claims
[02:42:19] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[02:42:22] <Franciman> and i think wittgenstein has never been strictly analytic
[02:42:26] <Franciman> he was a true philosopher
[02:42:34] <Franciman> true in the sense of full spectrum
[02:42:38] <Zipheir> I gave up in frustration on that one when W. basically denies the possibility of talking about language.
[02:43:30] <ouestbillie> Zipheir: hes only anti-analytic in the sense that he posits the inner contradictions of positivism in order to sublate them into a greater analytic project
[02:43:45] <ouestbillie> lmaoo im just making shit up, cont stuff amiright 
[02:43:46] <Franciman> positivists are cringe
[02:43:59] <Franciman> but i think we are very much positivists in science nowadays?
[02:44:05] <Zipheir> I think he's intentionally cryptic and oracular.
[02:44:15] <Franciman> Zipheir: W2?
[02:44:22] <Zipheir> He writes pretty well, though.  "The world is all that is the case.", and all that.
[02:44:33] <Franciman> oh ok W1, yeah
[02:44:40] <ouestbillie> "the world is all that is the case"
[02:44:42] <Franciman> he doesn't even give examples for things
[02:44:50] <ouestbillie> fuck this id rather read Auden, might as well
[02:44:53] <Franciman> what's a primitive proposition?
[02:45:19] <Franciman> tbf we must say that wittgenstein ends the W1 book saying: if you understood me, you know that this book doesn't make sense
[02:45:25] <Franciman> so it's like a ladder
[02:45:30] <Franciman> you go up by it
[02:45:36] <Franciman> but then you must throw it away :D
[02:45:47] <ouestbillie> ^^ this has major sus hegel vibez
[02:46:14] <Zipheir> rudybot_: sus hegel vibez!!
[02:46:15] <rudybot_> Zipheir: eh?  Try "rudybot_: help".
[02:46:25] <Franciman> lolol
[02:46:43] <Zipheir> rudybot_: You're supposed to come up with a clever quote.
[02:46:56] <rudybot_> Zipheir: Hacks are supposed to be clever.
[02:47:01] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Ping timeout: 240 seconds)
[02:47:06] <Zipheir> I guess lower-case words are commands.
[02:48:00] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[02:48:29] <ouestbillie> i wanna read cat theory to learn cat logic but then they always give weird examples from alg topo and im back to square one trying to learn abstract alg proper
[02:48:53] * ouestbillie is crying for help
[02:48:59] <Franciman> unfortunately yeah
[02:49:09] <Franciman> but did you read category theory for the working programmer?
[02:49:11] <Franciman> or
[02:49:21] <Franciman> category theory by bartosz milewski?
[02:49:30] <ouestbillie> Franciman: yes the first chapters i was like sure
[02:49:41] <ouestbillie> but the second part i was like meh
[02:49:49] <Franciman> which one?
[02:49:51] <Franciman> bartosz?
[02:49:56] <Franciman> or cat theory for the working prog?
[02:49:57] <ouestbillie> yes
[02:49:59] <ouestbillie> woups
[02:50:12] <ouestbillie> bartosz, i ordered the nice colored printed version
[02:50:56] <ouestbillie> but also i majored in pure math so like, i all those "cat for programmers" things trigger my anti hand waiving histamines
[02:51:13] <Franciman> loool
[02:51:19] <Franciman> you did a math major without algebraic topology?
[02:51:30] <Franciman> were you doing mathematical analysis?
[02:51:30] * ouestbillie is offended
[02:51:31] <Zipheir> ouestbillie: Fong & Spivak is good http://math.mit.edu/~dspivak/teaching/sp18/7Sketches.pdf
[02:51:33] <ouestbillie> ...yes
[02:51:39] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[02:51:43] <ouestbillie> Franciman: alg topo is grad stuff at mcgill
[02:51:46] <Zipheir> Also Aluffi's Algebra Chapter 0.
[02:51:52] <Franciman> true
[02:52:09] <Franciman> ouestbillie: i did the fundamental group in the bachelor
[02:52:14] <ouestbillie> Zipheir: funny you should say, thats actually the alg book i bought to get back into it
[02:52:16] <Franciman> and homology in the master degree
[02:52:36] <ouestbillie> cause D&F is sooo boring
[02:52:40] <ouestbillie> i like ring stuff
[02:53:27] <ouestbillie> but often i feel like  alg books are just bone no meat 
[02:53:36] <Zipheir> I'm working on Algebra Chapter 0 at the moment and am massively enjoying it.
[02:53:46] <ouestbillie> :-)
[02:53:50] <Franciman> pretty nice book
[02:54:00] <ouestbillie> the way it should be thought imo
[02:54:08] <Franciman> ouestbillie: regarding algebraic topology
[02:54:12] <ouestbillie> hatcher?
[02:54:13] <Franciman> you can get a good intro
[02:54:19] <Franciman> not bad
[02:54:22] <Franciman> but i prefer rotman's
[02:54:24] <ouestbillie> see
[02:54:30] <ouestbillie> last time i opened hatcher
[02:54:32] <Franciman> i think rotman is easier
[02:54:35] <Franciman> hatcher is too hard for me
[02:54:43] <ouestbillie> i stared for an hour at his fund group of circle proof
[02:54:47] <Franciman> Â«this is obvious if you visualize this in 200 dimensionsÂ»
[02:55:00] <ouestbillie> and im not the smartest but I feel like hatcher writes poorly
[02:55:25] <ouestbillie> im not sure i recall correctly but he like
[02:55:29] <Franciman> i personally would teach category theory as follows
[02:55:41] <Franciman> 1. introduce functors
[02:55:43] <ouestbillie> hatcher uses a parametrization of the helix 
[02:55:45] <Franciman> and motivate them
[02:55:46] <ouestbillie> and then projects back
[02:55:49] <ouestbillie> Franciman: nice
[02:56:01] <ouestbillie> always motivate
[02:56:02] <Franciman> for example algebraic topology makes it really clear why functors are useful language
[02:56:15] <Franciman> because you associate to each space a group
[02:56:22] <Franciman> or a lot of abelian groups depends 
[02:56:29] *** Joins: livoreno (~livoreno@user/notzmv)
[02:56:33] <Franciman> so you associate an object from topology to an object from algebra
[02:56:37] <Franciman> in a way that
[02:56:49] <Franciman> homeomorphic objects are mapped to isomorphic objects
[02:56:53] <Franciman> this is FUNCTORS
[02:56:58] *** Joins: notzmv (~zmv@user/notzmv)
[02:57:00] <Franciman> now to define functors you introduce categories
[02:57:32] <ouestbillie> see i dont understand cat but i feel like id go the other way around
[02:57:44] <ouestbillie> get klemke
[02:57:49] <ouestbillie> read until prob kernels
[02:58:05] <ouestbillie> and then show definition of monoid
[02:58:13] <ouestbillie> the intuition slaps you in the face then
[02:58:42] * ouestbillie is obviously more analysis enclined
[02:59:02] <ouestbillie> but I feel like functional analysis would be a great motivation too for cat
[02:59:09] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[02:59:42] <ouestbillie> isnt any well behaved "operator" youd encounter in the wild a functor?
[03:03:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[03:07:56] *** Quits: madage (~madage@user/madage) (Quit: leaving)
[03:10:51] <ouestbillie> was I so wrong i killed the thread ?
[03:10:53] <ouestbillie> lmao
[03:12:23] <Zipheir> It's IRC; you might get a response several hours/days from now. :)
[03:12:48] *** Quits: civodul (~user@guix/contributor/civodul) (Quit: ERC (IRC client for Emacs 27.2))
[03:13:15] <Zipheir> I know not much about algebraic topology, but starting from categories and working up to it makes sense to me.  The last chapter of Fong & Spivak does something like that with toposes.
[03:13:52] <ouestbillie> Fong and Spivak did nothing me tbh
[03:14:11] <ouestbillie> like it felt murky
[03:14:24] <ouestbillie> didnt know what was getting defined, what was being proven, etc
[03:14:24] <Zipheir> It's definitely sketchy, so they titled it correctly. :)
[03:14:31] <ouestbillie> heh
[03:14:59] <Zipheir> I think it's more a selection of ideas to think about, play with, and come back to when you know more.
[03:15:12] <Zipheir> Very good for those who think cat. theory is just abstract nonsense.
[03:15:12] *** Joins: cjb` (~cjb@user/cjb)
[03:15:28] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[03:16:06] *** cjb` is now known as cjb
[03:16:10] <Zipheir> Not every interesting book on math has to play the Bourbaki game.  Indeed, I prefer when they don't.
[03:16:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[03:17:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:20:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Client Quit)
[03:21:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:22:47] *** Joins: X-Scale` (~ARM@31.22.166.79)
[03:24:04] <ouestbillie> me too but the examples felt vacuous, idk, learning cat theory in a playful way seems a bit of a pipe dream
[03:24:48] *** Quits: X-Scale (~ARM@46.50.6.87) (Ping timeout: 256 seconds)
[03:25:56] *** Joins: X-Scale (~ARM@83.223.224.94)
[03:28:46] *** Quits: X-Scale` (~ARM@31.22.166.79) (Ping timeout: 256 seconds)
[03:33:05] *** Quits: flyke (~flyke@45.168.124.52) (Ping timeout: 256 seconds)
[03:33:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[03:34:13] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:f810:eec9:8a20:6a95) (Ping timeout: 256 seconds)
[03:35:37] *** Joins: aeth (~aeth@user/aeth)
[03:44:40] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[03:50:08] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzzâ€¦)
[03:51:46] *** Joins: klf (~klf@66.220.205.98)
[03:53:32] <klf> I have a question about the user of the exception symbol (-) in EBNF; but I'll just ask away.  
[03:56:03] <klf> all_but_alphabet = all_character - lowercase - uppercase
[03:57:04] <klf> Do I need to parenthesize?
[03:57:33] <klf> all_but_alphabet = (all_character - lowercase ) - uppercase
[03:57:37] <klf> or something like that
[03:58:39] <klf> The example here (https://en.wikipedia.org/wiki/Extended_Backusâ€“Naur_form#Pascal) demonstrates the use of the exception symbol, but I wish they had shown more.
[04:06:14] *** Joins: madage (~madage@user/madage)
[04:32:54] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[04:33:18] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[04:35:43] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:41:10] *** Joins: seninha (~seninha@user/seninha)
[04:46:17] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:48:37] *** Quits: micro_ (~micro@user/micro) (Ping timeout: 240 seconds)
[04:49:37] *** Joins: micro (~micro@user/micro)
[04:56:02] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[05:00:15] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[05:05:17] *** Joins: epony (epony@user/epony)
[05:07:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:14:55] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[05:17:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[05:17:57] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:19:34] *** Joins: aeth (~aeth@user/aeth)
[05:58:14] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Quit: WeeChat 3.3)
[05:58:40] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[06:20:53] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[06:31:41] *** Joins: frost (~frost@user/frost)
[06:33:02] *** Quits: frost (~frost@user/frost) (Client Quit)
[06:34:12] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Read error: Connection reset by peer)
[06:42:15] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:44:55] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[06:46:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:54:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:00:11] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[07:02:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:12:08] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:21] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:21:40] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[07:24:25] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:36] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:35:03] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:38:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[08:09:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:17:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:38:28] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[08:42:30] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:45:49] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:50:25] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:57:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[08:58:17] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[09:03:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:15:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[09:29:08] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:49:33] *** Quits: sjamaan (~sjamaan@chicken/developer/sjamaan) (Quit: brb)
[09:50:38] *** Joins: sjamaan (~sjamaan@chicken/developer/sjamaan)
[09:55:52] *** Quits: Ekho (~Ekho@user/ekho) (Quit: CORE ERROR, SYSTEM HALTED.)
[10:03:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:03:09] *** Joins: Ekho (~Ekho@user/ekho)
[10:23:26] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[10:35:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[10:37:02] *** Joins: aeth (~aeth@user/aeth)
[10:47:25] *** Joins: thevishy (~Nishant@2405:201:f005:c007:f4c6:4183:fabe:3b64)
[11:02:55] *** Joins: notzmv (~zmv@user/notzmv)
[11:10:37] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[11:11:17] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:11:34] *** Joins: silasfox (~sbv@p4fe8d6cb.dip0.t-ipconnect.de)
[11:11:37] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:9d2a:1a5d:fbd1:7e6b) (Ping timeout: 240 seconds)
[11:31:09] <dpk> wondering how much effort it would be to add AOT native compilation  to Chibi
[11:31:23] <dpk> it certainly seems within the realm of possibility
[11:31:47] *** Joins: civodul (~user@guix/contributor/civodul)
[11:33:23] <dpk> (compiling its procedure bytecode to C code)
[11:34:46] *** Quits: klf (~klf@66.220.205.98) (Quit: Leaving)
[11:41:46] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:56:04] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:00:34] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[12:01:17] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[12:08:10] *** Joins: frost (~frost@user/frost)
[12:12:44] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[12:17:35] *** Quits: taw10 (~taw@46.235.227.49) (Remote host closed the connection)
[12:37:16] *** Quits: mdhughes_ (~mdhughes@user/mdhughes) (Ping timeout: 250 seconds)
[12:41:40] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[12:48:31] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (Remote host closed the connection)
[12:50:00] <Franciman> dpk: one could use qbe as a backend
[12:50:02] <Franciman> or llvm
[12:50:07] <Franciman> qbe being smaller
[12:50:12] <Franciman> and probably easier
[12:51:29] <dpk> nah, i wanted to do something as minimal as possible. unfortunately it isn't *quite* possible to do this without changing any C code in Chibi, because there's currently no programmatic access to the contents of bytecode objects from Scheme
[12:51:58] <Franciman> ouch, i see
[12:52:00] <dpk> but my plan was to generate a C code file from Scheme code using Chibi's module, AST, and bytecode introspection functions
[12:52:15] <Franciman> pretty cool
[12:52:48] <dpk> it's too tricky for me to consider right now, but i'll look at it again in future
[12:53:58] <dpk> (longer-term #scheme readers may recall how i noted one day that implementing identifier macros in Chibi didn't look that hard, then a few months later i just did it on the train in like two hours. this may turn out somewhat similar, except there remain some obstacles i'm unsure of (mainly threading and dealing with module imports))
[12:54:35] <Franciman> what's identifier magroz?
[12:54:46] <dpk> https://github.com/ashinn/chibi-scheme/pull/805
[12:54:50] <Franciman> takk
[12:55:03] <dpk> explained reasonably concisely by https://www.gnu.org/software/guile/manual/html_node/Identifier-Macros.html
[12:58:56] <wasamasa> kind of like symbol-macrolet in CL
[13:01:32] *** Joins: taw10 (~taw@46.235.227.49)
[13:34:54] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 250 seconds)
[13:39:47] *** Joins: yhsiveht (~Nishant@2405:201:f005:c007:f4c6:4183:fabe:3b64)
[13:40:05] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[13:40:16] *** Joins: evdubs_ (~evdubs@user/evdubs)
[13:41:37] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[13:41:43] *** Joins: teiresias2 (~chris@blvuug/founder/teiresias)
[13:41:47] *** Joins: conjunctive_ (sid433686@id-433686.helmsley.irccloud.com)
[13:41:57] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8) (Ping timeout: 240 seconds)
[13:42:03] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[13:42:12] *** Joins: robin__ (~robin@user/terpri)
[13:42:17] *** Quits: thevishy (~Nishant@2405:201:f005:c007:f4c6:4183:fabe:3b64) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: evdubs (~evdubs@user/evdubs) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6) (Ping timeout: 240 seconds)
[13:42:18] *** conjunctive_ is now known as conjunctive
[13:42:52] *** Joins: lwhjp (~user@2400:2411:a080:4700:be5f:f4ff:fee9:7fbf)
[13:43:04] *** Joins: greaser|q (greaser@antihype.space)
[13:43:09] *** Joins: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6)
[13:43:40] *** teiresias2 is now known as teiresias
[13:43:54] *** Joins: jeko (~jeko@2a01:e0a:25f:d8f0:477e:c5fc:7b49:e353)
[13:44:00] *** Joins: civodul` (~user@91-160-117-201.subs.proxad.net)
[13:44:13] *** Joins: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8)
[13:44:45] *** Joins: daviid (~user@179.210.52.91)
[13:45:39] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: taw10 (~taw@46.235.227.49) (Ping timeout: 256 seconds)
[13:47:46] *** Joins: taw10 (~taw@46.235.227.49)
[13:49:47] *** Quits: civodul` (~user@91-160-117-201.subs.proxad.net) (Quit: ERC (IRC client for Emacs 27.2))
[13:50:11] *** Joins: civodul (~user@guix/contributor/civodul)
[13:51:02] *** Quits: yhsiveht (~Nishant@2405:201:f005:c007:f4c6:4183:fabe:3b64) (Quit: Leaving)
[14:01:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:14:05] *** Joins: rgherdt (~rgherdt@2a01:598:b1a3:2245:6a0f:5263:3193:7e65)
[14:14:43] *** Joins: Lysandros_ (~Lysandros@31-10-160-225.cgn.dynamic.upc.ch)
[14:16:03] *** Joins: dnm_ (sid401311@id-401311.lymington.irccloud.com)
[14:16:29] *** Quits: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: dnm (sid401311@id-401311.lymington.irccloud.com) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (Ping timeout: 250 seconds)
[14:16:55] *** dnm_ is now known as dnm
[14:17:21] *** Quits: Lysandros (~Lysandros@user/lysandros) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Ping timeout: 250 seconds)
[14:17:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:18:34] *** Joins: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8)
[14:18:51] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[14:19:45] *** Joins: seninha (~seninha@user/seninha)
[14:26:32] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:12f6:2540:5b2e:5026)
[14:32:41] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[14:36:30] *** Quits: rgherdt (~rgherdt@2a01:598:b1a3:2245:6a0f:5263:3193:7e65) (Ping timeout: 260 seconds)
[14:36:36] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b0:57ed:1d3:f8d9:95fe:666e)
[14:36:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[14:38:17] *** Joins: aeth (~aeth@user/aeth)
[14:38:48] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a5:e39f:6219:9462:1ee1:d73b)
[14:39:35] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[14:41:23] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b0:57ed:1d3:f8d9:95fe:666e) (Ping timeout: 250 seconds)
[14:42:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:42:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:58:43] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[15:03:35] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Bridge terminating on SIGTERM)
[15:04:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:09:32] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[15:11:13] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[15:14:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[15:15:11] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a5:e39f:6219:9462:1ee1:d73b) (Ping timeout: 250 seconds)
[15:17:12] *** Joins: aeth (~aeth@user/aeth)
[15:17:42] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Remote host closed the connection)
[15:22:15] *** Quits: Lysandros_ (~Lysandros@31-10-160-225.cgn.dynamic.upc.ch) (Changing host)
[15:22:15] *** Joins: Lysandros_ (~Lysandros@user/lysandros)
[15:22:17] *** Lysandros_ is now known as Lysandros
[15:30:48] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[15:31:03] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:32:43] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Remote host closed the connection)
[15:33:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:38:16] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[15:38:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:40:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:43:03] *** Quits: jeko (~jeko@2a01:e0a:25f:d8f0:477e:c5fc:7b49:e353) (Ping timeout: 268 seconds)
[15:51:34] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[15:53:20] *** Joins: ManDay (~manday@user/manday)
[15:55:27] *** Quits: ManDay (~manday@user/manday) (Client Quit)
[15:57:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:59:27] *** Quits: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8) (Quit: WeeChat 3.3)
[15:59:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:02:29] *** Joins: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8)
[16:02:34] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[16:02:34] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[16:02:34] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[16:02:34] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[16:02:34] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[16:02:34] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[16:02:34] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[16:02:34] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[16:02:34] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[16:02:46] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Client limit exceeded: 20000)
[16:02:46] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[16:02:49] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Client limit exceeded: 20000)
[16:03:15] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Quit: Client limit exceeded: 20000)
[16:03:44] *** Quits: DeeEff_ (~deeeff@user/deeeff) (Quit: Client limit exceeded: 20000)
[16:04:53] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Quit: Client limit exceeded: 20000)
[16:05:15] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Client limit exceeded: 20000)
[16:05:19] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Quit: Client limit exceeded: 20000)
[16:06:21] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Quit: Client limit exceeded: 20000)
[16:11:47] *** Quits: nazarii[m] (~nazariim]@2001:470:69fc:105::63a) (Quit: Client limit exceeded: 20000)
[16:26:02] *** Joins: rgherdt (~rgherdt@2a01:598:d037:b097:b8db:6918:76e1:7858)
[16:27:36] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:33:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:35:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[16:37:22] *** Joins: jeko (~jeko@83.118.200.115)
[16:41:46] *** Joins: rgherdt_ (~rgherdt@2a01:598:d039:414:563a:b3dc:13b5:c05c)
[16:41:55] *** Joins: ManDay (~manday@user/manday)
[16:42:51] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (Quit: Client limit exceeded: 20000)
[16:43:18] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1aa:9b6c:a0d2:d786:f311:1678)
[16:44:16] *** Quits: rgherdt (~rgherdt@2a01:598:d037:b097:b8db:6918:76e1:7858) (Ping timeout: 250 seconds)
[16:46:11] *** Quits: rgherdt_ (~rgherdt@2a01:598:d039:414:563a:b3dc:13b5:c05c) (Ping timeout: 250 seconds)
[16:46:19] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1a4:4217:a65b:4dd:c76e:3b8f)
[16:47:55] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1aa:9b6c:a0d2:d786:f311:1678) (Ping timeout: 250 seconds)
[16:49:28] *** Quits: jeko (~jeko@83.118.200.115) (Ping timeout: 250 seconds)
[16:50:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[16:53:42] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:78d6:a5c5:9558:b0ea)
[16:56:18] *** Joins: rgherdt__ (~rgherdt@2a01:598:d033:9b98:6b54:3afa:5afd:517)
[16:58:16] *** robin__ is now known as robin
[16:59:00] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1a4:4217:a65b:4dd:c76e:3b8f) (Ping timeout: 250 seconds)
[17:03:44] *** Joins: seninha (~seninha@user/seninha)
[17:03:58] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:78d6:a5c5:9558:b0ea) (Ping timeout: 260 seconds)
[17:05:35] *** Joins: Darkcoal (~user@2001:16a2:7ade:4500:78d6:a5c5:9558:b0ea)
[17:06:22] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[17:06:56] *** Joins: rgherdt (~rgherdt@2a01:598:d030:8dd4:a16d:ab84:9794:611f)
[17:07:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:08:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:08:41] *** Quits: rgherdt__ (~rgherdt@2a01:598:d033:9b98:6b54:3afa:5afd:517) (Ping timeout: 245 seconds)
[17:08:46] *** Joins: rgherdt_ (~rgherdt@2a01:598:d032:e71d:11fb:f7b3:9f31:4445)
[17:11:34] *** Quits: rgherdt (~rgherdt@2a01:598:d030:8dd4:a16d:ab84:9794:611f) (Ping timeout: 250 seconds)
[17:14:48] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1aa:fb03:abae:bd8d:5b3a:af02)
[17:17:12] *** Quits: rgherdt_ (~rgherdt@2a01:598:d032:e71d:11fb:f7b3:9f31:4445) (Ping timeout: 250 seconds)
[17:18:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:19:59] *** Quits: Darkcoal (~user@2001:16a2:7ade:4500:78d6:a5c5:9558:b0ea) (Ping timeout: 250 seconds)
[17:19:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:21:41] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:21:54] *** Joins: Darkcoal (~user@167.86.178.227)
[17:26:11] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[17:27:26] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1aa:fb03:abae:bd8d:5b3a:af02) (Ping timeout: 245 seconds)
[17:27:28] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Client Quit)
[17:28:31] *** Joins: rgherdt (~rgherdt@tmo-087-14.customers.d1-online.com)
[17:32:22] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[17:34:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:36:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:36:30] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03b:93d4:360e:eea1:79cc:6c51)
[17:38:33] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:12f6:2540:5b2e:5026) (Quit: Client closed)
[17:38:48] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:b8cf:746f:6b24:d274:e071)
[17:39:54] *** Quits: rgherdt (~rgherdt@tmo-087-14.customers.d1-online.com) (Ping timeout: 256 seconds)
[17:41:39] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03b:93d4:360e:eea1:79cc:6c51) (Ping timeout: 250 seconds)
[17:46:46] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b1:4d88:3891:54f1:b1b:c554)
[17:49:06] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:b8cf:746f:6b24:d274:e071) (Ping timeout: 245 seconds)
[17:52:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:54:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:55:18] *** Joins: rgherdt__ (~rgherdt@2a01:598:d034:43cd:fae4:bc4a:df80:aab0)
[17:57:56] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b1:4d88:3891:54f1:b1b:c554) (Ping timeout: 250 seconds)
[17:59:53] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[17:59:58] *** Joins: rgherdt (~rgherdt@2a01:598:b1a3:945e:7af4:8d3d:808:6177)
[18:01:32] *** Quits: rgherdt__ (~rgherdt@2a01:598:d034:43cd:fae4:bc4a:df80:aab0) (Ping timeout: 252 seconds)
[18:01:46] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b0:a3d9:b576:f797:be46:8fde)
[18:04:31] *** Quits: rgherdt (~rgherdt@2a01:598:b1a3:945e:7af4:8d3d:808:6177) (Ping timeout: 245 seconds)
[18:07:48] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzzâ€¦)
[18:14:18] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:14:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:16:10] *** Quits: silasfox (~sbv@p4fe8d6cb.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:23:43] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[18:27:22] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:12f6:2540:5b2e:5026)
[18:30:48] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1b2:3f0b:edb2:a1f2:2af5:a50b)
[18:33:16] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b0:a3d9:b576:f797:be46:8fde) (Ping timeout: 245 seconds)
[18:36:21] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:48:37] *** Quits: civodul (~user@guix/contributor/civodul) (Remote host closed the connection)
[18:52:49] *** Joins: civodul (~user@guix/contributor/civodul)
[18:53:44] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[19:00:29] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[19:01:53] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:12f6:2540:5b2e:5026) (Quit: Client closed)
[19:05:20] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1b2:3f0b:edb2:a1f2:2af5:a50b) (Ping timeout: 252 seconds)
[19:21:33] *** mdhughes_ is now known as mdhughes
[19:27:49] *** Joins: zwr (~zwr@2804:d45:b966:fb00:62a1:9ee5:c9ff:a3df)
[19:35:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:40:46] *** Quits: zwr (~zwr@2804:d45:b966:fb00:62a1:9ee5:c9ff:a3df) (Ping timeout: 245 seconds)
[19:41:42] *** Joins: zwr (~zwr@2804:d45:b966:fb00:35ea:d66c:6406:325c)
[19:44:00] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:2d1a:1acb:f1e6:80e4)
[19:44:00] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:2d1a:1acb:f1e6:80e4) (Changing host)
[19:44:00] *** Joins: skapata (~Skapata@user/skapata)
[19:44:29] *** Joins: rgherdt (~rgherdt@2a01:598:b1b2:3f0b:edb2:a1f2:2af5:a50b)
[19:54:17] *** Quits: rgherdt (~rgherdt@2a01:598:b1b2:3f0b:edb2:a1f2:2af5:a50b) (Ping timeout: 252 seconds)
[20:11:55] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[20:13:02] *** Joins: mogrim (~mogrim@gateway/tor-sasl/mogrim)
[20:14:17] *** Quits: flatwhatson (~flatwhats@220.253.110.95) (Read error: Connection reset by peer)
[20:14:27] *** Joins: flatwhatson (~flatwhats@220.253.110.95)
[20:36:24] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[20:42:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[20:55:20] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[21:01:42] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:01:58] *** Joins: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net)
[21:04:01] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[21:15:57] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:18:42] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[21:21:59] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:23:04] *** Joins: rgherdt (~rgherdt@2a01:598:d03e:b78c:9795:3485:9416:4f30)
[21:24:37] *** Quits: Rue (~rue@2001-b011-1000-11b6-9802-64fa-1e5c-3e4d.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:33:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[21:35:23] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:12f6:2540:5b2e:5026)
[21:35:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[21:37:17] *** Quits: mogrim (~mogrim@gateway/tor-sasl/mogrim) (Quit: leaving)
[21:46:18] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:51:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:04:32] *** Quits: sdu (~sidu@185.44.146.61) (Ping timeout: 240 seconds)
[22:12:54] <sham1> Why is there no `bytevector-append!` or alternatively a nice way of going from a flexvector to a bytevector
[22:12:55] *** Joins: DeeEff_ (~deeeff@user/deeeff)
[22:12:55] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[22:12:55] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[22:12:55] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[22:12:55] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[22:12:55] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[22:12:55] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[22:12:55] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
[22:12:55] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[22:15:34] *** Quits: rgherdt (~rgherdt@2a01:598:d03e:b78c:9795:3485:9416:4f30) (Remote host closed the connection)
[22:15:45] *** Joins: rgherdt (~rgherdt@2a01:598:d03e:b78c:9795:3485:9416:4f30)
[22:16:46] <dpk> bytevectors are fixed in size, so an -append! version doesn't make sense
[22:17:03] <dpk> you could relatively easily implement your own flexbytevector if you need it
[22:17:21] <sham1> I suppose so
[22:17:25] <dpk> but there is also e.g. open-output-bytevector
[22:17:45] <sham1> True, one can do it by writing bytes to that port
[22:18:00] <sham1> It's still a bit weird though
[22:19:14] <gwatt> Yeah, I think one of the oddities is that bytevectors support getting/setting several different integer widths as well as floating point, and take into account endianness.
[22:21:46] *** Quits: rgherdt (~rgherdt@2a01:598:d03e:b78c:9795:3485:9416:4f30) (Ping timeout: 260 seconds)
[22:22:16] <Zipheir> sham1: bytevector-copy!
[22:22:18] <edgar-rft> many things in Scheme don't make sense, so appending a fixed-size bytevector somehow feels natural to me :-)
[22:22:57] <Zipheir> sham1: I mean, it's essentially roll-your-own bytevector-append, but...
[22:23:02] <Zipheir> That's the closest thing.
[22:23:22] <Zipheir> dpk: Do you think there's some sense in a "flexbytestring"?
[22:23:42] <dpk> me? no, but i'm not the one who asked ;-)
[22:24:02] <sham1> Hmm, I suppose bytevector-copy! is a way
[22:25:09] <sham1> As for me, since I am the one who asked, I'd say that a flexbytevector would make some sense since it makes it easier to build buffers with binary data, although with-output-bytevector that can also be achieved by then doing port operations
[22:25:10] <Zipheir> I've been trying to expand my srfi-207 CHICKEN port with various string-esque functions, and it occurs to me that maybe the fixed-size aspect isn't ideal for bytestrings.
[22:26:04] <sham1> Err, open-output-bytevector and then get-output-bytevector which doule be combined into a `with-output-bytevector` procedure
[22:26:26] <dpk> output bytevectors are likely to be faster anyway
[22:27:19] <Zipheir> Unless the Scheme implementation doesn't have real bytevector ports.
[22:28:51] <sham1> Yeah. An implementation could make bytevector output ports by way of SRFI 181 and then doing bytevector stuff as needed, by for example adding bytes to a flexvector that can then be used to produce a bytevector at get-output-bytevector
[22:29:08] <sham1> I.e. custom ports
[22:30:33] <Zipheir> IMHO flexvectors are a rather Pythonic approach to the problem they purport to solve.
[22:31:05] <sham1> Eh, growable arrays are useful
[22:31:23] <Zipheir> Side effects everywhere!
[22:32:20] <sham1> If side-effects are used inside procedures as implementation details, it should be fine. Most procedures might still return regular vectors and such as values
[22:33:06] <sham1> I mean, a damning thing for me with bytevectors is that there's not even a thing there that allows for reverse-list->bytevector even though that's also a useful idiom
[22:33:38] <Zipheir> sham1: Sure there is.  It's just called reverse-list->u8vector https://srfi.schemers.org/srfi-160/srfi-160.html
[22:33:48] <sham1> Bytevectors truly feel like they're their own bubble of stuff
[22:33:54] <sham1> Great
[22:33:54] <Zipheir> The naming is truly confusing.
[22:34:12] <Zipheir> Take your pick: bytevector, u8vector, bytestring.
[22:34:46] <sham1> I'll take identifier renaming for 100, Alex
[22:34:50] <Zipheir> (And bytevectors â‰  u8vectors in Guile, maybe other Schemes?)
[22:35:28] <sham1> Well that's just inexcusable. No reason to not have them be synonyms
[22:35:45] <Zipheir> It's a little like the situation with string libraries.
[22:40:43] <gwatt> Looking at the docs, I think a reason u8vectors and bytevectors are different is that u8vectors can be nested. "#2u8((1 2) (3 4))" creates a 2x2 matrix
[22:41:45] <Zipheir> That's kind of weird.
[22:42:25] <Zipheir> To my mind, that should just be syntactic sugar for a vector of u8vectors.
[22:42:32] <gwatt> I assume that guile had u8vectors before bytevectors were standardized and at that point they couldn't make them fit
[22:43:15] <Zipheir> Most likely.
[22:44:17] <Zipheir> OK, I'm oversimplifying.  But it seems like n-D u8vectors for n > 1 should be disjoint from u8vectors.
[22:44:20] <gwatt> also, u8vectors are exclusively for u8s. at least in r6rs, bytevectors are for u{8,16,32,64} and floats
[22:45:24] <Zipheir> You can make it work.
[22:45:52] <gwatt> I've certainly never loved scheme more than when typing out "bytevector-ieee-double-native-set!"
[22:46:11] <Zipheir> But that does make it even weirder that a lot of procedures in SRFI 160 have no "bytevector-" analog.
[22:46:16] <Zipheir> Hah, yes, those names.
[22:51:05] <dpk> C-M-i is your friend ;-)
[22:51:19] <gwatt> dpk: what's that in vim?
[22:51:46] * dpk googles Â« emacs completion-at-point vim equivalent Â»
[22:51:50] <sham1> C-x C-n IIRC
[22:52:35] <gwatt> I think it's actually ^P
[22:52:56] <sham1> If I recall correctly, those should do the same thing
[22:53:16] <gwatt> but it doesn't include the "!" at the end.
[22:54:00] <sham1> Seems like it doesn't see #\! as part of a word
[22:54:38] <gwatt> looks like ^N and ^P are both some kind of auto-complete. ^X is some weird mode I've never used
[22:55:03] *** Joins: sdu (~sidu@185.44.146.61)
[22:55:25] <sham1> Yeah, it's brilliant
[22:55:33] <sham1> ^X ^O is omnicomplete
[22:55:51] <sham1> :help ins-completion
[22:56:49] <gwatt> "E764: Option 'omnifunc' is not set
[22:56:53] <sham1> Yeah
[22:57:05] <sham1> It obviously needs to be made into a thing first
[23:02:42] <Zipheir> I wish there were some modular way to provide autocomplete for EDITOR.
[23:02:57] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:02:59] <sham1> Well that exists, for better or for worse. LSP
[23:03:15] <sham1> But as for Scheme? Nah, not enough introspection
[23:04:11] <Zipheir> I imagine that supporting LSP would be about as complicated as implementing basic autocomplete...
[23:04:30] <Zipheir> But maybe a small subset of what LSP handles could be supported.
[23:04:36] <gwatt> is there a language server for scheme?
[23:05:11] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[23:06:12] <sham1> I don't think any implementation has one. And as far as cross-implementation efforts are justâ€¦ no
[23:06:39] <gwatt> Racket's the likeliest option for that
[23:07:05] <sham1> Probably, although since they have DrRacket, I'm not sure if there's a lot of demand for it
[23:07:09] <gwatt> https://docs.racket-lang.org/racket-language-server/index.html
[23:07:13] <sham1> Oh
[23:07:21] <sham1> I suppose I was wrong
[23:07:27] <sham1> Nice
[23:07:29] <gwatt> there's enough demand for someone to have made one
[23:09:37] <sham1> I'll be damned. Well, any cross-implementation effort Ã  la SLIME seems infeasible at least currently
[23:11:02] *** evdubs_ is now known as evdubs
[23:13:02] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[23:13:02] *** Joins: greaser|q (greaser@user/greasemonkey)
[23:13:05] *** greaser|q is now known as GreaseMonkey
[23:15:52] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:21:23] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[23:37:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:39:44] *** Joins: aeth (~aeth@user/aeth)
[23:40:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:42:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:47:10] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[23:59:42] *** Joins: skapata (~Skapata@user/skapata)
