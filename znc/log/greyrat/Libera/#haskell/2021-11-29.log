[00:01:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:02:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:03:38] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[00:05:28] <sm> @where paste, yin
[00:05:28] <lambdabot> I know nothing about paste,.
[00:05:34] *** Joins: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com)
[00:05:50] <Hecate> @where paste 
[00:05:50] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[00:06:12] <sm> (a similarish ghcid command works here)
[00:07:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3)
[00:07:57] <hpc> @where paste -- ooh, does that error message mean this works now?
[00:07:57] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[00:08:00] <mreh> could someone explain the type of runF?
[00:08:00] <hpc> yessssss
[00:08:18] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[00:09:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:09:06] <mreh> I'm not quite sure how to use it
[00:09:49] *** Quits: xff0x (~xff0x@2001:1a81:523b:c600:f9b1:c475:746a:8f2c) (Ping timeout: 265 seconds)
[00:10:00] * mreh reads http://comonad.com/reader/2011/free-monads-for-less-2/
[00:10:13] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[00:10:40] *** Joins: xff0x (~xff0x@2001:1a81:523b:c600:e658:9e80:725:12f4)
[00:11:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:11:47] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[00:12:18] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[00:13:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[00:13:47] *** Joins: cjb (~cjb@user/cjb)
[00:13:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[00:13:55] <sm> hpc, this also works:
[00:13:55] <sm> @where paste (@ must be in column 0, argument word must have nothing next to it)
[00:13:55] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[00:14:16] *** Joins: nckx (~nckx@tobias.gr)
[00:14:58] <sm> it would save some noise if it were a little more forgiving
[00:16:58] <edwardk> mreh: runF takes come computation in the 'free' monad, how to convert 'a's at the leaves to values of type 'r' and the ability to convert layers of 'f r -> r' and runs the whole tree of actions represented by the free monad.
[00:17:45] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 256 seconds)
[00:18:01] <edwardk> e.g. if you have some other monad 'm', you might pick r = 'm a'  pass it 'pure as the first argument, and something that converts f (m a) -> m a as the second. and interpret into the other monad
[00:18:53] <edwardk> that is what 'fromF' does, using runF.
[00:20:30] *** Joins: P1RATEZ (piratez@user/p1ratez)
[00:23:51] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e27c5c24316ea6f3b87.dip0.t-ipconnect.de)
[00:26:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:26:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:29:08] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[00:29:27] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:32:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:32:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:35:51] *** Quits: Hecate (~mariposa@163.172.211.189) (Changing host)
[00:35:51] *** Joins: Hecate (~mariposa@user/hecate)
[00:37:03] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[00:37:12] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[00:38:31] *** Quits: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com) (Ping timeout: 250 seconds)
[00:40:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:41:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:42:22] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[00:43:02] *** Quits: alx741 (~alx741@181.196.69.248) (Ping timeout: 240 seconds)
[00:44:38] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[00:45:57] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[00:46:02] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[00:46:31] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[00:48:08] *** curiousgay_ is now known as curiousgay
[00:49:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:49:48] *** Quits: haask (~harry@92.234.0.237) (Read error: Connection reset by peer)
[00:50:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:51:00] *** Joins: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com)
[00:51:11] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 256 seconds)
[00:54:07] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:54:13] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c935:9328:4c7f:5838)
[00:54:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:55:55] *** Joins: alx741 (~alx741@181.196.69.176)
[00:57:52] *** Joins: deadmarshal (~deadmarsh@95.38.228.7)
[00:58:17] *** Joins: nitrix (~nitrix@user/nitrix)
[00:58:38] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c935:9328:4c7f:5838) (Ping timeout: 265 seconds)
[01:00:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:01:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:02:31] *** Quits: deadmarshal (~deadmarsh@95.38.228.7) (Ping timeout: 256 seconds)
[01:04:45] *** Joins: Pickchea (~private@user/pickchea)
[01:04:53] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[01:06:10] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Client Quit)
[01:08:44] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[01:09:31] *** Quits: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com) (Ping timeout: 245 seconds)
[01:09:42] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[01:09:45] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 265 seconds)
[01:10:32] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:12:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:13:24] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:d2c:da22:1ce0:f7f1)
[01:13:52] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:18:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:19:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:21:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:21:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:23:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:23:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:24:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3) (Remote host closed the connection)
[01:27:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:27:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:28:29] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:d2c:da22:1ce0:f7f1) (Quit: Leaving)
[01:32:37] *** Joins: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com)
[01:32:59] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[01:33:28] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[01:35:44] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[01:36:14] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[01:37:01] *** Quits: gnyeki (~gnyeki@li578-216.members.linode.com) (Changing host)
[01:37:01] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[01:39:22] *** Quits: n3t (~n3t@user/n3t) (Quit: WeeChat 2.9)
[01:39:30] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:40:14] *** Joins: n3t (n3t@s45.mydevil.net)
[01:40:19] *** Quits: n3t (n3t@s45.mydevil.net) (Changing host)
[01:40:19] *** Joins: n3t (n3t@user/n3t)
[01:41:39] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 265 seconds)
[01:42:45] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:43:12] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[01:43:57] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[01:49:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:49:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:50:40] *** Joins: pavonia (~user@user/siracusa)
[01:52:48] *** Quits: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com) (Ping timeout: 268 seconds)
[01:55:41] *** Joins: nuh^ (~nuh@68.101.58.90)
[01:57:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:02:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:02:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:03:24] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[02:05:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:05:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:07:28] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Remote host closed the connection)
[02:09:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:11:23] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[02:11:43] <EvanR> https://paste.tomsmeding.com/RyJqXSBg 😎
[02:13:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:14:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:15:15] <EvanR> dangit I think I missed something
[02:16:32] *** Joins: nautical (~nautical@2601:602:900:1630::396f)
[02:16:40] <nautical> help
[02:17:16] <EvanR> to integrate I need an initial value
[02:18:12] <Axman6> @help
[02:18:13] <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
[02:19:53] <EvanR> and I only had one pair of shades
[02:20:03] <geekosaur> nautical, what is your problem?
[02:20:18] <nautical> sorry, that was an accident
[02:21:07] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[02:22:47] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[02:23:00] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[02:23:02] *** Quits: nautical (~nautical@2601:602:900:1630::396f) (Quit: WeeChat 3.3)
[02:23:18] *** Joins: nautical (~nautical@2601:602:900:1630::396f)
[02:24:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3)
[02:26:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:27:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:27:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:27:30] *** Joins: alzgh (~alzgh@user/alzgh)
[02:29:09] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:30:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3) (Ping timeout: 245 seconds)
[02:33:36] <EvanR> https://paste.tomsmeding.com/h0Aqsfh3 this nonsense brought to you by differential geometry
[02:34:13] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[02:34:19] *** Quits: alx741 (~alx741@181.196.69.176) (Ping timeout: 256 seconds)
[02:34:23] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[02:36:01] *** Joins: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com)
[02:37:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:38:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:39:51] *** Quits: xff0x (~xff0x@2001:1a81:523b:c600:e658:9e80:725:12f4) (Ping timeout: 250 seconds)
[02:40:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 265 seconds)
[02:40:53] *** Joins: xff0x (~xff0x@2001:1a81:523b:c600:eb6a:2c7d:ead9:34e8)
[02:40:58] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:40b9:a545:8d47:6552) (Quit: gone to sleep. ZZZzzz…)
[02:41:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3)
[02:43:29] *** Joins: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:43:56] *** Quits: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Remote host closed the connection)
[02:44:00] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 265 seconds)
[02:44:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:44:33] *** Joins: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:44:42] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:44:46] <EvanR> its too bad that exploiting local linearity requires ridiculously small step sizes, relative to better integration method
[02:45:17] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[02:45:47] *** Quits: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Client Quit)
[02:46:21] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:47:30] *** Joins: alx741 (~alx741@181.196.69.176)
[02:49:15] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[02:49:44] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[02:49:58] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:40b9:a545:8d47:6552)
[02:50:31] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[02:50:35] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:50:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:50:35] *** Joins: wroathe (~wroathe@user/wroathe)
[02:51:17] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[02:53:11] * yin pkills -9 ghc for the 9th time today
[02:54:11] <yushyin> not cool
[02:54:12] *** Quits: cosimone (~user@93-44-184-115.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:55:30] * yin yushes
[02:55:51] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 256 seconds)
[02:55:51] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:56:02] <geekosaur> what's going wrong?
[02:56:05] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Ping timeout: 265 seconds)
[02:56:14] <yin> EvanR: why dt and not δ
[02:56:17] <geekosaur> does ghc -v tell you where it's getting stuck?
[02:56:26] *** Joins: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[02:56:43] <EvanR> laziness
[02:57:32] <Axman6> I had some fun with the DAML compiler the other day (which is based on GHC) where it would take an hour to finally report a type error. I thought it was just getting stuck but someone else compiled my branch and forgot about it and came back an hour later to find an error. fun times
[02:57:33] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[02:58:15] *** Quits: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com) (Quit: WeeChat 3.3)
[02:58:15] <mreh> prime.haskell.org is down
[02:58:53] <Axman6> try #haskell-infrastructure
[02:59:03] <mreh> Bezos getting litigious?
[02:59:08] <mreh> Axman6: thanks
[02:59:12] <yin> geekosaur: it's not really getting stuck, i mean... i ^C out of ghcid and after a while i notice there's a zombie ghc process hogging my cpu.
[02:59:32] <geekosaur> oh
[02:59:48] * geekosaur already notified #haskell-infrastructure
[03:00:00] <geekosaur> yin, windows by any chance?
[03:00:26] <yin> no, but 32bit arm
[03:00:53] <yin> ubuntu in this instance
[03:01:03] <geekosaur> hm. I know there are problems with subprocesses on windows, but that should not affect arm ubuntu
[03:01:20] <geekosaur> then again I think I have heard of this happening before, so it might be a ghcid bug
[03:01:36] <geekosaur> or yet another bug in the process library, I guess
[03:02:09] *** Quits: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com) (Quit: leaving)
[03:03:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:04:11] *** Joins: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com)
[03:05:36] <yin> i think it also happened when i did "watch ghc ...", which i used t do before finding out about ghcid
[03:06:40] <geekosaur> mm, wonder if anyone'[s watching the infra tonight
[03:07:48] <mreh> geekosaur: where's it hosted? UK?
[03:08:02] <mreh> UCL IIRC
[03:09:48] <geekosaur> don't know
[03:10:07] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:10:17] <geekosaur> just thinking it's sunday evening in the US, midnight in the UK, past midnight in Europe
[03:10:26] <geekosaur> probably a really bad time to find anyone around
[03:11:05] <mreh> I'm about to go to bed, so I'm not so bothered!
[03:11:15] <hpc> maybe in australia
[03:12:16] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[03:12:17] <mreh> I was fixing something, wanted to check on the deal with Control.Monad.Fail
[03:12:36] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[03:12:48] <mreh> Docs say it's been in since base-4.9.0.0, I think at least
[03:13:33] <geekosaur> you might also be able to check it on the proposals github?
[03:13:46] <mreh> ah, okay
[03:13:50] <mreh> thanks
[03:15:28] <mreh> geekosaur: do you have a link?
[03:16:09] <mreh> is it ghc-proposals?
[03:16:44] *** Quits: adium (adium@user/adium) (Quit: Stable ZNC by #bnc4you)
[03:17:16] *** Quits: xff0x (~xff0x@2001:1a81:523b:c600:eb6a:2c7d:ead9:34e8) (Ping timeout: 268 seconds)
[03:17:22] <mreh> can't see it, oh well
[03:17:34] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[03:18:03] *** Joins: xff0x (~xff0x@2001:1a81:523b:c600:ed55:79c2:75f9:f2e2)
[03:18:22] *** Joins: maplike (~maplike@31.209.100.216)
[03:18:24] <geekosaur> yes and I don't see it either
[03:18:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:18:42] <geekosaur> must hyave come before the proposals process as I see several follow-ons but not MonadFail itself
[03:18:49] <geekosaur> oh well
[03:19:12] <mreh> This lib imports it and is supposed to support base >=4.7
[03:19:19] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[03:20:32] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[03:20:43] <maplike> I have a `[(a,b)]` and I'd like to aggregate all the `b`s per `a`, into a `[a,[b]]`. I though something like `fromList` or `foldMap` might help but my aggregate is not the same type as the values. How should I be thinking about this? 
[03:20:48] <mreh> Anyway, the code compiles, my work is done...
[03:20:49] <mreh> gn
[03:21:11] <mreh> :t partition
[03:21:11] *** Quits: arkeet (~arkeet@moriya.ca) (Ping timeout: 245 seconds)
[03:21:12] <lambdabot> (a -> Bool) -> [a] -> ([a], [a])
[03:21:28] <mreh> Hmm, no
[03:22:16] <maplike> same issue - - probably a SemiGroup thing :)
[03:22:32] <mreh> maplike: I would fold over a Map personally
[03:22:58] *** Quits: max22- (~maxime@2a01cb0883359800f9d5861d99da2e2e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:23:21] <maplike> ... still need to create the Map (that is why I looked at fromList)
[03:24:14] <jackdk> https://hackage.haskell.org/package/containers-0.6.4.1/docs/Data-Map-Lazy.html#v:fromListWith would be the simple choice
[03:24:29] <mreh> fold the list into a Map a [(a, b)] and then `fmap snd`
[03:24:31] <maplike> I think I tried that one too
[03:25:42] <mreh> [a,[b]] looks like a heterogenous list to me
[03:25:56] <jackdk> I assumed it was a typo of `[(a, [b])]`
[03:26:18] <maplike> no 
[03:26:33] <maplike> otherwise there'd be plenty of choices
[03:26:48] <geekosaur> casn you assign a type to this [a,[b]] ?
[03:27:03] <mreh> sure a = [b]
[03:27:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:27:41] <maplike> think [Country, Language], for example
[03:27:44] <mreh> but I don't think that's what maplike wants
[03:28:02] <maplike> and, some coutries have multiple languages, but Language is not a monoid
[03:28:10] <mreh> maplike: are Country and Language different types?
[03:28:13] <maplike> yes
[03:28:30] <geekosaur> you cannot have such a list, is the point we're trying to make
[03:28:42] <mreh> I'm off to bed ;)
[03:28:46] <maplike> it seems that in Haskell, that data-structure is not a good fit for the behaviours I would want
[03:28:56] <maplike> really?!
[03:29:02] <geekosaur> lists are collections of all one type
[03:29:08] <mreh> it's 12am
[03:29:10] <mreh> bye!
[03:29:13] <geekosaur> > [1,'A']
[03:29:15] <lambdabot>  error:
[03:29:15] <lambdabot>      • No instance for (Num Char) arising from the literal ‘1’
[03:29:15] <lambdabot>      • In the expression: 1
[03:29:24] <geekosaur> hm, not the best example
[03:29:25] *** Quits: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com) (Quit: leaving)
[03:29:25] <maplike> thanks mreh
[03:29:32] <geekosaur> > [1::Int,'A']
[03:29:33] <lambdabot>  error:
[03:29:33] <lambdabot>      • Couldn't match expected type ‘Int’ with actual type ‘Char’
[03:29:33] <lambdabot>      • In the expression: 'A'
[03:29:37] <maplike> I see
[03:29:59] <maplike> it is a typo, the elements are tuples
[03:30:13] <maplike> [(a,[b])]
[03:30:36] <maplike> I hope that wasn't the straw that broke the camels' back for mreh :(
[03:31:08] <geekosaur> no, mreh was talking about going to bed soon before you arrived,m they logged on to report a down site
[03:31:16] <maplike> so I want to go from [(a,b)] -> [(a,[b])]
[03:31:46] <maplike> good, thanks geekosaur
[03:31:48] <geekosaur> :t map (map group)
[03:31:49] <lambdabot> Eq a => [[[a]]] -> [[[[a]]]]
[03:31:55] <geekosaur> mm, not quite
[03:32:10] *** Quits: alx741 (~alx741@181.196.69.176) (Ping timeout: 256 seconds)
[03:32:46] <int-e> :t groupBy ((==) `on` snd)
[03:32:47] <lambdabot> Eq a1 => [(a2, a1)] -> [[(a2, a1)]]
[03:32:58] <maplike> I'm pretty sure in scala it's be something like `toMap` on the List
[03:33:18] <int-e> :t map (head &&& map snd) . groupBy ((==) `on` fst)
[03:33:19] <lambdabot> Eq a => [(a, b)] -> [((a, b), [b])]
[03:33:25] <int-e> tsk.
[03:33:36] <geekosaur> glad I'm not the only one :þ
[03:33:38] <int-e> :t map ((fst . head) &&& map snd) . groupBy ((==) `on` fst)
[03:33:39] <lambdabot> Eq a => [(a, b)] -> [(a, [b])]
[03:33:40] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[03:33:46] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[03:33:50] *** shapr` is now known as shapr
[03:33:57] <int-e> probably not the nicest way. does order matter?
[03:34:19] *** Joins: maplike (~maplike@31.209.100.216)
[03:34:19] <maplike> a bit of a mouthful, but better than anything I came up with!
[03:34:28] <int-e> :t M.toList . M.fromListWith (++) . map (second pure)
[03:34:29] <lambdabot> Ord k => [(k, a)] -> [(k, [a])]
[03:34:59] <maplike> that's what I wanted :D
[03:35:02] <int-e> that's if you don't care about the order
[03:35:06] <maplike> nice!
[03:35:31] <int-e> (but also more efficient)
[03:35:36] <maplike> nope, it should really be a Map, but I thought it owuld be interesting to see how to do it
[03:35:37] <int-e> asymptotically at least
[03:35:48] <maplike> and the size is trivial
[03:35:58] <int-e> Heh, then you can drop the M.toList
[03:37:06] <int-e> > M.fromListWith (++) . map (second pure) $ [(1,'a'),(2,'b'),(1,'c')] -- note a quirk: c comes before a
[03:37:08] <lambdabot>  fromList [(1,"ca"),(2,"b")]
[03:39:30] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[03:42:18] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[03:42:35] *** Joins: maplike (~maplike@31.209.100.216)
[03:44:01] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 256 seconds)
[03:44:06] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[03:44:24] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:46:43] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[03:47:01] *** Joins: maplike (~maplike@31.209.100.216)
[03:49:18] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[03:50:48] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[03:53:04] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[03:53:20] *** Joins: maplike (~maplike@31.209.100.216)
[03:55:01] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[03:55:18] *** Joins: maplike (~maplike@31.209.100.216)
[03:55:26] <maplike> excuse the delayed feedback - just trying to lookup what second does. That was the trick I was missing
[03:55:39] <Axman6> @hoogle second
[03:55:40] <lambdabot> Control.Arrow second :: Arrow a => a b c -> a (d, b) (d, c)
[03:55:40] <lambdabot> Data.Bifunctor second :: Bifunctor p => (b -> c) -> p a b -> p a c
[03:55:40] <lambdabot> System.Directory.Internal.Prelude second :: Arrow a => a b c -> a (d, b) (d, c)
[03:55:48] <maplike> not really played with Arrows yet
[03:56:07] <Axman6> it's basically just fmap on the first element of a tuple
[03:56:22] <maplike> I've heard that they are more powerful than Applicatives, but weaker than Monads
[03:56:29] <Axman6> there are more advanced uses of it, but generally you're usiing it as (a -> b) -> (a,c) -> (b,c)
[03:56:40] <maplike> OK
[03:56:48] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[03:56:58] <geekosaur> % :t second @(->)
[03:56:59] <yahb> geekosaur: (b -> c) -> (d, b) -> (d, c)
[03:57:50] <maplike> is that generalistion reasonable? (re Applicatives > Arrows > Monads, even though Arrow is not heirarchically related to the others))
[03:58:06] <geekosaur> hm, I''d say not really
[03:58:37] <maplike> can you do everything with an Arrow that and Applicative can, but not as much as a Monad?
[03:58:38] <geekosaur> Arrow was an attempt to fit function application and Kleisli (monad) application into a single framework. It kinda failed
[03:58:38] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[03:58:59] <geekosaur> but out of Arrow came Applicative and profunctors
[03:59:01] <Axman6> It found a use in Opaleye
[03:59:56] <Axman6> also, from the discussion above, it's worth remembering that group and groupBy do not work how you think, they group consecutive runs, they do not collect like elements together
[04:00:08] <Axman6> > group "aaabbaabc"
[04:00:09] <lambdabot>  ["aaa","bb","aa","b","c"]
[04:00:26] <maplike> right, so you have to pay for the sort, one way or another!
[04:00:55] <maplike> coming back to [(Country, Language)], well, in reality, a better example is borders = [(WA, NT), (WA, SA), (NT, SA), (NT, Q), (Q, SA),      (Q, NSW), (NSW, SA), (NSW, V), (V, SA), (T, V),      (ACT, NSW)]
[04:01:06] <Axman6> Aussie Aussie Aussie!
[04:01:17] <maplike> yep, and paint
[04:01:20] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:40b9:a545:8d47:6552) (Ping timeout: 265 seconds)
[04:01:31] *** Joins: pfurla_ (~pfurla@205.185.222.148)
[04:01:31] <Axman6> s'if Queensland gets just Q. I'm not ok with this
[04:02:08] * Axman6 wishes there was a (ACT, NZ) in there too, but alas
[04:02:18] <maplike> that's what it's called in the book
[04:02:22] <maplike> (on CSP)
[04:02:37] <maplike> or, more likely, lecture notes
[04:02:38] <monochrom> What is ACT?
[04:02:48] <Axman6> The best territory
[04:02:52] <maplike> capital
[04:02:58] <monochrom> Oh! That.
[04:03:39] <maplike> so the [OzState, [OzState]] should take snd as a key too
[04:03:59] <Axman6> eh?
[04:04:15] <maplike> otherwise you can't lookup all the borders for a state unless you duplicate the relationships (in both directions)
[04:04:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[04:04:27] <Axman6> also, make sure you use the correct syntax, you either mean (OzState, [OzState]) or [(OzState, [OzState])]
[04:04:30] <monochrom> Yeah Wikipedia uses QLD :)
[04:04:53] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[04:04:55] <maplike> so, for example, you will see that Tasmania borders Victoria (whatever) but not that Victoria borders Tasmania
[04:04:58] <Axman6> (Also, it should be AusState, but whatever)
[04:05:06] <maplike> :D
[04:06:04] <Axman6> that's pretty easy to deal with, just have directedToUndirected xs = xs ++ map (\(a,b) -> (b,a)) xs and then do the collect above
[04:06:14] <maplike> it's not offensive, is it , Axman6?
[04:07:11] <Axman6> Oz? No but definitely not used much by us
[04:07:19] <maplike> yes, I can see that bit, but it just seems less elegant than I would have liked/expected, but I suppose there is so much you can represent with a list of tuples
[04:08:59] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[04:09:05] <Axman6> If you want graphs, then maybe you should look at a graph library :)
[04:10:04] *** Joins: vonfry (~user@116.236.75.238)
[04:11:30] *** Joins: maplike (~maplike@31.209.100.216)
[04:11:56] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:11:56] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[04:12:43] *** Joins: maplike (~maplike@31.209.100.216)
[04:12:54] *** Joins: adium (adium@user/adium)
[04:13:20] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[04:14:25] *** Joins: maplike (~maplike@31.209.100.216)
[04:15:17] <jackdk> https://hackage.haskell.org/package/algebraic-graphs
[04:17:01] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e27c5c24316ea6f3b87.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[04:18:15] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 265 seconds)
[04:19:27] <maplike> is there no _other_ trick with Arrows to help wrt that (using fst _and_ snd of [OzState, OzState] as keys (and therefore values, in the other direction) for the [(OzState, [OzState])] ) ?
[04:20:18] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:20:59] <Axman6> not really, most tools for building up map like things are designed to work with values of type (k,v) where k and v are different
[04:21:40] <maplike> that makes sense. And List and (,) are probably both dubious design decisions
[04:21:49] <maplike> ... for this example
[04:21:52] *** Joins: alx741 (~alx741@181.196.69.176)
[04:22:07] <maplike> it was an attempt to avoid "denormalistion"
[04:22:21] <maplike> and be as succinct as possible
[04:23:24] <maplike> a map with values reappearing as keys whee necessary would have made the behaviour much easier to implement, but somehow less elegant (I thought :)
[04:25:06] <maplike> so, is it the case that learning about Arrows, interesting and instructive as it may be, would not lead to much practical benefitin modern Haskell?
[04:25:49] <maplike> or was that an exageration that nobody uses them (apart from for my warped example!)
[04:27:03] <geekosaur> there are a few uses, but the existence of `arr` makes them a lot less useful than they might be
[04:27:18] <geekosaur> :t arr
[04:27:19] <lambdabot> Arrow a => (b -> c) -> a b c
[04:28:04] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c)
[04:28:13] <maplike> I saw some scala talk once where one of the questions was "Arrows have been around for a while - why have they never taken off?
[04:28:40] <maplike> the presenter didn't have a concrete answer.
[04:29:02] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:29:02] <maplike> In Haskell there is even syntax sugar for it, but in scala, it seems less idiomatic
[04:29:21] *** Quits: pfurla_ (~pfurla@205.185.222.148) (Ping timeout: 256 seconds)
[04:29:26] <maplike> (like applicative style)
[04:30:39] *** Joins: Guest8469 (~Guest84@node-1w7jr9yg17p34ft5ls8sbppyg.ipv6.telus.net)
[04:30:58] <yin> arrows are nice
[04:31:05] <maplike> anyway, I better go and denormalise my borders! Thanks all
[04:31:13] <maplike> ... aha - I want to hear this :)
[04:31:35] <yin> i like them. that is all
[04:32:19] <maplike> yin - can you say in what context? With that be with arrow do notation (or whatever it's called)?
[04:32:56] <maplike> I mean, would you consider using arrows where others might automatically go to applicatives or monads?
[04:33:20] *** Quits: Guest8469 (~Guest84@node-1w7jr9yg17p34ft5ls8sbppyg.ipv6.telus.net) (Client Quit)
[04:34:27] <maplike> the John Hughes paper seemed to claim that it was as good, if not better in some cases, for parsers, for example
[04:35:22] <yin> probably not, but in the same way i don't go around talking in petry form. doesn't make it less beautiful :)
[04:35:44] <yin> s/petry/poetry
[04:35:53] <maplike> I remember thinking watching that talk that they were elegant, too
[04:36:17] <geekosaur> practice says applicatives capture all the advantages of arrows for parsing, but monads tend to perform better
[04:37:01] <geekosaur> also monads allow parsing some things arrows and applicatives can't
[04:37:11] <maplike> yin I was wondering if you meant pretty or petty :D
[04:37:26] <geekosaur> but unlike arrows, applicatives give you the option of switching to monadic parsing for those things
[04:37:58] <maplike> the way the speaker framed it was that arrows can do everything applicatives can, but monads can do a few things they can't
[04:38:00] <geekosaur> I thought they meant poetry
[04:38:16] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[04:39:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:39:43] <maplike> the speakers eaxample, iirc, involved encoding to json some objects, where in some cases you need to know the thing you just did to shape the rest of the computation
[04:40:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:40:37] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:40:42] <maplike> both monad and applicative failed at some aspect (can't remmber what now) but Arrow + ArrowChoice, iirc, solved both
[04:40:44] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:10] <geekosaur> hm, actually I think I've heard that been claimed
[04:41:15] <maplike> the applicative solution was probably due to the usual reasons 
[04:41:39] <geekosaur> symmetric choice?
[04:41:46] <maplike> and the monad soln failed due to lack of anything meaningful to bind to
[04:41:51] <geekosaur> er, non-biased choice. that was it
[04:44:40] *** Quits: nautical (~nautical@2601:602:900:1630::396f) (Quit: WeeChat 3.3)
[04:44:56] *** Joins: nautical (~nautical@2601:602:900:1630::396f)
[04:44:58] <geekosaur> applicatives bias toward the first partially matching choice, ArrowChoice is unbiased, iirc
[04:45:48] *** Quits: shailangsa (~shailangs@host86-186-136-24.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[04:46:52] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:45] <maplike> btw, I am having a play with Haskell in VSCode using HIE (via a plugin). On my last play with Haskell, I used atom. Seems like the VSCode plugin is pretty good (not sure how it scales, but for toys).
[04:50:32] <maplike> you can even do `-- >>>` and evaluate the suffix, inline 
[04:50:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[04:51:22] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[04:51:42] *** Joins: maplike (~maplike@31.209.100.216)
[04:51:52] *** Quits: nautical (~nautical@2601:602:900:1630::396f) (Quit: WeeChat 3.3)
[04:52:08] *** Joins: nautical (~nautical@2601:602:900:1630::396f)
[04:55:13] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[04:55:25] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[04:56:21] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 250 seconds)
[04:59:34] *** Quits: maplike (~maplike@31.209.100.216) (Remote host closed the connection)
[05:00:26] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:02:46] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[05:02:46] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[05:02:49] *** allbery_b is now known as geekosaur
[05:11:54] *** Quits: nautical (~nautical@2601:602:900:1630::396f) (Quit: WeeChat 3.3)
[05:14:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[05:21:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:21:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:21:01] *** Joins: wroathe (~wroathe@user/wroathe)
[05:26:10] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[05:26:13] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[05:42:42] <Axman6> huh, I hadn't seen that, that's cool!
[05:49:26] *** Joins: emf (~emf@2620:10d:c090:400::5:99c8)
[05:50:22] <boxscape_> Huh
[05:50:26] <boxscape_> my main function works when I run it in ghci
[05:50:31] <boxscape_> but produces <<loop>> when compiled
[05:50:32] <boxscape_> odd
[05:50:45] <boxscape_> s/function/action
[05:52:21] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:55:00] <boxscape_> Ah... it's because some function finds a different path when run in ghci vs compiled, and another function that uses this path has a bug where it loops infinitely on certain inputs
[06:04:06] *** Quits: mmhat (~mmh@55d4d614.access.ecotel.net) (Ping timeout: 265 seconds)
[06:05:15] *** Quits: xff0x (~xff0x@2001:1a81:523b:c600:ed55:79c2:75f9:f2e2) (Ping timeout: 250 seconds)
[06:05:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[06:06:49] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:07:13] *** Joins: xff0x (~xff0x@2001:1a81:527f:8300:c0be:43f4:9685:d0cc)
[06:07:33] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Remote host closed the connection)
[06:10:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:13:53] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[06:15:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[06:15:17] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[06:17:28] *** Joins: mmhat (~mmh@55d431d8.access.ecotel.net)
[06:17:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:21:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:21:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:21:27] *** Joins: wroathe (~wroathe@user/wroathe)
[06:26:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[06:26:37] *** Joins: Guest13 (~Guest13@85-192-130-19.dsl.esoo.ru)
[06:31:08] *** Quits: mmhat (~mmh@55d431d8.access.ecotel.net) (Quit: WeeChat 3.3)
[06:31:58] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[06:34:45] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:04] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:39:33] <xsperry> boxscape_, that's odd, why would a function use a different path in ghc vs ghci? would it be possible to post a test case?
[06:39:54] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[06:41:20] <boxscape_> xsperry `import GHC.SysTools.BaseDir; main = findTopDir Nothing >>= print`
[06:41:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:42:02] <boxscape_> (when the result is used as argument for `findToolDir` from the same module, on Windows, it produces an infinite loop for me when compiled but not in ghci, since findTopDir produces different paths)
[06:43:23] <boxscape_> (I'm doing this inside a cabal project; the path it finds when compiled is somewhere in dist-newstyle, whereas the path it finds in ghci is the ghc installation directory)
[06:47:52] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[06:48:33] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:51:14] <xsperry> boxscape_ ok, that makes sense
[06:55:33] *** Quits: td_ (~td@muedsl-82-207-238-244.citykom.de) (Ping timeout: 256 seconds)
[06:57:23] *** Joins: td_ (~td@94.134.91.97)
[07:03:47] *** Joins: xerxesphainon[m] (~artaxerxe@2001:470:69fc:105::f400)
[07:03:57] <xerxesphainon[m]> ??????
[07:11:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:12:13] *** Quits: P1RATEZ (piratez@user/p1ratez) (Remote host closed the connection)
[07:14:42] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 268 seconds)
[07:15:15] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[07:16:35] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:19:11] <Axman6> yes?
[07:26:40] *** Quits: Guest13 (~Guest13@85-192-130-19.dsl.esoo.ru) (Quit: Client closed)
[07:27:24] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:31:00] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[07:35:17] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[07:35:52] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[07:35:56] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[07:41:58] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[07:45:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:47:52] *** Quits: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:52:02] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:57:16] *** Joins: Guest13 (~Guest13@85-192-130-19.dsl.esoo.ru)
[07:58:47] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 250 seconds)
[07:59:12] *** Joins: mbuf (~Shakthi@223.184.125.58)
[08:00:46] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Quit: ZNC - https://znc.in)
[08:03:36] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[08:05:35] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[08:07:39] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:10:21] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[08:13:38] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[08:14:32] *** Quits: xff0x (~xff0x@2001:1a81:527f:8300:c0be:43f4:9685:d0cc) (Ping timeout: 240 seconds)
[08:15:25] *** Joins: xff0x (~xff0x@2001:1a81:527f:8300:57da:badd:210c:d109)
[08:17:05] *** Quits: Guest13 (~Guest13@85-192-130-19.dsl.esoo.ru) (Quit: Client closed)
[08:17:22] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:18:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:19:46] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[08:20:33] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:22:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[08:23:53] *** Joins: hubvu (sid495858@user/hubvu)
[08:23:59] *** Joins: CannabisIndica (~herb@user/mesaboogie)
[08:26:05] <kennyd> how long do you think it will take for stack to support 9.2?
[08:29:02] <c_wraith> It's almost always blocked on library support for a sufficient range of libraries.  And that's a mystery
[08:29:34] *** Quits: sunarch (uid526836@user/sunarch) (Ping timeout: 260 seconds)
[08:30:22] *** Joins: deadmarshal (~deadmarsh@95.38.231.110)
[08:30:48] *** Joins: sunarch (uid526836@user/sunarch)
[08:36:57] <c_wraith> Also, it's certainly waiting for 9.2.2
[08:37:03] <c_wraith> 9.2.1 has some severe bugs on some platforms
[08:37:03] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Quit: ZNC - https://znc.in)
[08:40:56] *** Joins: CannabisIndica (~herb@user/mesaboogie)
[08:42:00] *** Quits: Hafydd (~Hafydd@user/hafydd) (Quit: WeeChat 3.3)
[08:43:03] *** Joins: Hafydd (~Hafydd@user/hafydd)
[08:43:14] <kennyd> c_wraith, which ones?
[08:45:19] <c_wraith> https://discourse.haskell.org/t/psa-9-2-1-aarch64-miscompilation/3638
[08:46:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:47:26] <kennyd> hmm, I just noticed that stack is still on 8.10.7 for long term support. 9.0.1 is nightly only
[08:47:44] <c_wraith> 9.0 had a bunch of bug too
[08:48:50] <c_wraith> A lot of things I ran into testing new features - rough edges that were fixed in 9.2
[08:49:13] <kennyd> perhaps they will skip 9 and 9.2, and jump straight to 9.2.2
[08:49:24] <c_wraith> most likely
[08:51:14] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[08:51:32] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Quit: ZNC - https://znc.in)
[08:51:34] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[08:56:15] *** Quits: deadmarshal (~deadmarsh@95.38.231.110) (Ping timeout: 256 seconds)
[09:03:11] *** Joins: reumeth (~reumeth@user/reumeth)
[09:03:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[09:05:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[09:08:39] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:11:36] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[09:15:54] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[09:16:03] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[09:16:13] *** Joins: alzgh (~alzgh@user/alzgh)
[09:16:20] <dsal> > getAp $ Ap [10,20] + Ap [1,2] -- I hope I don't ever need this, because it looks like a bad idea.
[09:16:21] <lambdabot>  [11,12,21,22]
[09:16:58] <c_wraith> Ap is very generally useful
[09:17:13] <dsal> I've not actually used it, but the Num instance?
[09:17:16] <c_wraith> Though...  that Num instance is...  interesting
[09:17:52] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[09:17:58] <kennyd> > liftA2 (+) [10,20] [1,2]
[09:18:00] <lambdabot>  [11,12,21,22]
[09:18:02] <c_wraith> I don't usually complain about too many instances, but I think I will in that case.
[09:18:26] <c_wraith> The main problem with that instance is documented directly: "Note that even if the underlying Num and Applicative instances are lawful, for most Applicatives, this instance will not be lawful"
[09:19:06] <c_wraith> But if you ignore that instance, Ap is useful. :)
[09:19:09] <dsal> It's almost counter-documented.
[09:19:22] <dsal> It doesn't tell me what it's good for, just like, to not trust it.
[09:20:28] <dsal> c_wraith: Where do you end up using Ap?
[09:20:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[09:20:43] <dsal> I was just shopping for monoids and noticed and don't quite understand what it does that I can't already do.
[09:20:46] <c_wraith> It comes up in traverse-like cases
[09:21:04] <c_wraith> or foldMap stuff
[09:21:27] <dsal> Hmm...  So using foldMap to make a lift* ?
[09:21:46] <c_wraith> I don't remember the details of when I've run into it specifically, just that I've run into it more than once.
[09:22:12] <c_wraith> Including finding a chunk in a book that worked really hard to not do what it does as well as it did it.
[09:22:37] *** Joins: deadmarshal (~deadmarsh@95.38.231.110)
[09:23:10] <dsal> I think I'd be better off going to sleep than to try to contrive a need at the moment.  heh.  I just thought that Num instance looked pretty weird.
[09:23:14] <c_wraith> It's just an adapter for "I want to work on the monoid under some Applicative instance"
[09:23:29] <dsal> > Ap [1, 2, 3] + 5
[09:23:30] <lambdabot>  Ap {getAp = [6,7,8]}
[09:24:31] <dsal> This is one of those things that's just going to seem useless to me until one day when it's exactly what I need and I'm glad I read docs one night.
[09:28:03] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[09:28:19] <c_wraith> > runState (getAp (foldMap Ap [ modify (* 2) *> pure "hello", flip replicate ' ' <$> get, modify (+1) *> pure "world" ])) 1
[09:28:21] <lambdabot>  ("hello  world",3)
[09:32:02] *** Quits: yin (~z@user/zero) (*.net *.split)
[09:32:02] *** Quits: jrm (~jrm@156.34.187.65) (*.net *.split)
[09:32:02] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (*.net *.split)
[09:32:02] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[09:32:02] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (*.net *.split)
[09:32:02] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (*.net *.split)
[09:32:02] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (*.net *.split)
[09:32:02] *** Quits: sajith (~sajith@user/sajith) (*.net *.split)
[09:32:02] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[09:32:02] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[09:32:02] *** Quits: akspecs__ (~akspecs@user/akspecs) (*.net *.split)
[09:32:02] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (*.net *.split)
[09:32:02] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[09:32:02] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[09:32:02] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[09:32:02] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[09:32:02] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (*.net *.split)
[09:32:02] *** Quits: xacktm_ (xacktm@user/xacktm) (*.net *.split)
[09:32:02] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[09:32:03] *** Quits: OscarH (~OscarH@90.201.86.195) (*.net *.split)
[09:32:03] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[09:32:03] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[09:32:03] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (*.net *.split)
[09:32:03] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[09:32:03] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (*.net *.split)
[09:32:03] *** Quits: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host) (*.net *.split)
[09:32:03] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[09:32:03] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[09:32:03] *** Quits: joeyh_ (joeyh@kitenet.net) (*.net *.split)
[09:32:03] *** Quits: Rembane_ (~Rembane@li346-36.members.linode.com) (*.net *.split)
[09:32:03] *** Quits: piele (~piele@tbonesteak.creativeserver.net) (*.net *.split)
[09:32:03] *** Quits: _\_ (~o@user/ding) (*.net *.split)
[09:32:03] *** Quits: jeffz (~user@lambda.xen.prgmr.com) (*.net *.split)
[09:32:03] *** Quits: PHO` (~pho@akari.cielonegro.org) (*.net *.split)
[09:32:03] *** Quits: sweater (~sweater@206.81.18.26) (*.net *.split)
[09:32:03] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[09:32:03] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[09:32:03] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[09:32:03] *** Quits: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001) (*.net *.split)
[09:32:03] *** Quits: AkechiShiro (~licht@user/akechishiro) (*.net *.split)
[09:32:03] *** Quits: enikar (~enikar@user/enikar) (*.net *.split)
[09:32:09] *** Joins: landonf (landonf@mac68k.info)
[09:32:10] *** Joins: kaol_ (~kaol@94-237-42-30.nl-ams1.upcloud.host)
[09:32:11] *** Joins: jeffz (~user@lambda.xen.prgmr.com)
[09:32:11] *** Joins: Rembane (~Rembane@li346-36.members.linode.com)
[09:32:11] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[09:32:13] *** Joins: joeyh (joeyh@kitenet.net)
[09:32:14] *** Joins: carbolymer (~carbolyme@dropacid.net)
[09:32:16] *** Joins: meejah (~meejah@rutas.meejah.ca)
[09:32:20] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[09:32:20] *** Joins: piele (~piele@tbonesteak.creativeserver.net)
[09:32:21] *** Joins: ncopa (~ncopa@gbr2-dev1.alpinelinux.org)
[09:32:22] *** Joins: OscarH (~OscarH@90.201.86.195)
[09:32:24] *** Joins: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net)
[09:32:25] *** Joins: mniip (mniip@libera/staff/mniip)
[09:32:34] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[09:32:34] *** Joins: lieven (~mal@ns2.wyrd.be)
[09:32:36] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[09:32:37] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[09:32:39] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[09:32:40] *** Joins: noctux (~noctux@user/noctux)
[09:32:40] *** Joins: AkechiShiro (~licht@2a01:e0a:5f9:9681:1473:3dff:fe42:56a9)
[09:32:41] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[09:32:48] *** Joins: urdh (~urdh@user/urdh)
[09:32:48] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[09:32:48] *** Joins: _\_ (~o@user/ding)
[09:32:51] *** Quits: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net) (Changing host)
[09:32:51] *** Joins: akspecs__ (~akspecs@user/akspecs)
[09:32:54] *** Joins: dextaa (~DV@user/dextaa)
[09:33:31] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[09:33:33] *** Joins: jrm (~jrm@156.34.187.65)
[09:33:34] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[09:33:35] *** Joins: nonzen (~nonzen@user/nonzen)
[09:33:38] *** Joins: zero (~z@user/zero)
[09:33:39] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[09:33:40] *** Joins: sajith (~sajith@user/sajith)
[09:33:43] *** Joins: DigitalKiwi (~kiwi@192.241.157.119)
[09:33:43] *** Joins: fluxit (~fluxit@techsmix.net)
[09:33:46] *** Joins: PHO` (~pho@akari.cielonegro.org)
[09:33:47] *** Joins: xacktm (xacktm@user/xacktm)
[09:33:50] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[09:33:53] *** Joins: sweater (~sweater@206.81.18.26)
[09:34:37] *** Joins: enikar (~enikar@user/enikar)
[09:36:24] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[09:36:24] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (*.net *.split)
[09:36:24] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (*.net *.split)
[09:36:24] *** Quits: zfnmxt (~zfnmxtzfn@user/zfnmxt) (*.net *.split)
[09:36:24] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[09:36:24] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (*.net *.split)
[09:36:24] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (*.net *.split)
[09:36:24] *** Quits: spoonm (spoonm@inaba.spoonm.org) (*.net *.split)
[09:36:24] *** Quits: cigsender (~cigsender@74.124.58.162) (*.net *.split)
[09:36:24] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (*.net *.split)
[09:36:24] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (*.net *.split)
[09:36:24] *** Quits: dagit (~dagit@2001:558:6025:38:6476:a063:d05a:44da) (*.net *.split)
[09:36:24] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (*.net *.split)
[09:36:24] *** Quits: rembo10 (~rembo10@remulis.com) (*.net *.split)
[09:36:24] *** Quits: Ram-Z_ (~Ram-Z@li1814-254.members.linode.com) (*.net *.split)
[09:36:24] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (*.net *.split)
[09:36:25] *** Quits: lstor (~lstor@user/lstor) (*.net *.split)
[09:36:25] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[09:36:25] *** Quits: xdej (~xdej@quatramaran.salle-s.org) (*.net *.split)
[09:36:25] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[09:36:25] *** Quits: dyniec (~dyniec@mail.dybiec.info) (*.net *.split)
[09:36:25] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[09:36:32] *** Joins: cigsender (~cigsender@74.124.58.162)
[09:36:33] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[09:36:37] *** Joins: lstor (~lstor@user/lstor)
[09:36:40] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[09:36:40] *** Joins: rembo10 (~rembo10@remulis.com)
[09:36:41] *** Joins: dyniec (~dyniec@mail.dybiec.info)
[09:36:42] *** Joins: mstruebing (~maex@2001:41d0:8:93c7::1)
[09:36:42] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[09:36:43] *** Joins: remexre (~remexre@user/remexre)
[09:36:59] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[09:37:02] *** Joins: Xe (~cadey@tailscale/xe)
[09:37:04] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[09:37:13] *** Joins: chronon (~chronon@user/chronon)
[09:37:26] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[09:37:37] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[09:37:48] *** Joins: auri (~quassel@fsf/member/auri)
[09:38:05] *** Joins: spoonm (spoonm@inaba.spoonm.org)
[09:38:05] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[09:38:06] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[09:38:20] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[09:40:27] *** Quits: sweater (~sweater@206.81.18.26) (Ping timeout: 256 seconds)
[09:40:27] *** Quits: carbolymer (~carbolyme@dropacid.net) (Ping timeout: 256 seconds)
[09:40:51] *** Joins: carbolymer (~carbolyme@dropacid.net)
[09:42:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:42:06] *** Joins: sweater (~sweater@206.81.18.26)
[09:43:26] *** Joins: namkeleser (~namkelese@101.175.102.188)
[09:43:50] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[09:45:01] *** Joins: hololeap_ (~hololeap@user/hololeap)
[09:45:30] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[09:47:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:48:03] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[09:51:34] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:52:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[09:52:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:54:03] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[09:56:00] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:00:19] *** hololeap_ is now known as hololeap
[10:05:39] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[10:06:54] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:08:11] *** Quits: deadmarshal (~deadmarsh@95.38.231.110) (Ping timeout: 265 seconds)
[10:14:26] *** Joins: deadmarshal (~deadmarsh@95.38.231.110)
[10:15:22] *** Joins: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad)
[10:16:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:19:18] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[10:32:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:34:46] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[10:36:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:36:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:38:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:38:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:38:49] *** Quits: deadmarshal (~deadmarsh@95.38.231.110) (Ping timeout: 256 seconds)
[10:40:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:40:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:41:17] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[10:42:29] *** Joins: deadmarshal (~deadmarsh@95.38.231.110)
[10:43:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[10:45:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:46:50] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 252 seconds)
[10:48:51] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:49:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[10:49:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:50:15] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.69)
[10:50:21] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:51:51] *** Quits: deadmarshal (~deadmarsh@95.38.231.110) (Ping timeout: 256 seconds)
[10:53:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[10:54:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:56:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[10:59:49] *** Joins: mario (~mario@31.147.205.13)
[11:01:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:03:25] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:03:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:03:44] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:03:53] *** Joins: nautical (~nautical@2601:602:900:1630::396f)
[11:05:33] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:05:51] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:07:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:07:47] *** Quits: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad) (Quit: Konversation terminated!)
[11:07:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:08:34] *** Joins: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad)
[11:08:36] *** Joins: fendor (~fendor@77.119.220.212.wireless.dyn.drei.com)
[11:10:10] *** Joins: rkrishnan (~user@122.171.76.46)
[11:12:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[11:14:04] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[11:14:04] *** Joins: notzmv (~zmv@user/notzmv)
[11:16:38] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[11:16:54] *** Quits: fendor (~fendor@77.119.220.212.wireless.dyn.drei.com) (Quit: Leaving)
[11:22:45] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[11:23:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:26:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:27:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:28:52] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[11:31:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[11:33:55] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[11:34:24] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[11:34:50] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 260 seconds)
[11:39:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:41:04] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[11:43:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:43:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:44:42] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:5742:827:3cc1:1d6)
[11:45:53] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[11:46:04] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[11:49:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:49:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:51:15] *** Quits: namkeleser (~namkelese@101.175.102.188) (Quit: Client closed)
[11:53:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:53:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:54:32] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 240 seconds)
[11:54:58] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:57:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:57:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:58:49] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[12:00:22] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:02:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:02:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:02:30] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Quit: Leaving)
[12:02:45] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[12:02:59] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[12:03:17] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[12:05:20] *** Joins: michalz (~michalz@185.246.204.62)
[12:06:08] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[12:08:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:08:21] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 256 seconds)
[12:08:33] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:08:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:09:46] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Remote host closed the connection)
[12:12:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:12:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[12:13:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:14:05] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5742:827:3cc1:1d6) (Quit: WeeChat 2.8)
[12:16:39] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[12:16:57] *** Joins: chele (~chele@user/chele)
[12:17:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[12:19:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:19:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:21:37] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:21:50] *** Joins: Farzad (~FarzadBek@37.98.108.116)
[12:21:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:23:14] *** Quits: ThatLinuxGuy (~sand49@2001:8003:8431:d200:220b:84b2:a334:cbad) (Quit: Konversation terminated!)
[12:26:01] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e27ac7cfecfdd63434d.dip0.t-ipconnect.de)
[12:27:29] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[12:27:31] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:27:55] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:283f:851a:b183:49fe)
[12:30:08] *** Quits: Domino[m] (~dominothe@2001:470:69fc:105::1:271b) (Quit: You have been kicked for being idle)
[12:31:14] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:32:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:33:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:33:33] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[12:33:42] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[12:36:18] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:38:34] <Square> im planning on saving data using a some sort of serialization. To deserialize i need the same Type implementation is used to save it. Does anyone know of some neat mechanism to accomplish this. I was thinking i could get an hash of the type with Template Haskell but it feels like a cumbersome route. 
[12:39:32] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[12:39:51] <Square>  To deserialize i need assert the same Type implementation is used that saved it*
[12:40:21] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:43:55] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[12:44:38] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:45:26] *** Joins: arkeet (~arkeet@moriya.ca)
[12:46:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[12:47:03] *** Quits: mario (~mario@31.147.205.13) (Quit: Leaving)
[12:47:28] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:28] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:31] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[12:47:31] *** allbery_b is now known as geekosaur
[12:50:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:51:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:54:30] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:56:13] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[12:56:28] *** Joins: cfricke (~cfricke@user/cfricke)
[13:01:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:01:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:03:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3) (Remote host closed the connection)
[13:07:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:08:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:08:11] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[13:08:18] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[13:10:10] *** Joins: _bo (~bo@79.171.122.236)
[13:11:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:12:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:15:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:15:51] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:15:57] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:16:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:16:13] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:17:53] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:18:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:19:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:20:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:20:12] *** Joins: mario (~mario@31.147.205.13)
[13:20:14] *** Joins: mario_ (~mario@31.147.205.13)
[13:22:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:22:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:24:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:24:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:24:46] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (Quit: WeeChat 3.3)
[13:25:00] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[13:26:51] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:27:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:28:32] *** Quits: mario (~mario@31.147.205.13) (Quit: Leaving)
[13:28:43] *** Quits: mario_ (~mario@31.147.205.13) (Quit: Leaving)
[13:31:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:31:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:32:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:32:38] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:32:47] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 256 seconds)
[13:33:54] *** Lord_of_Life_ is now known as Lord_of_Life
[13:37:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:38:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:38:31] *** Joins: mestre (~mestre@191.177.175.57)
[13:38:52] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[13:41:01] *** Joins: xkuru (~xkuru@user/xkuru)
[13:41:09] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[13:43:28] <arahael> Square: The default answer is json, why doesn't that work for you?
[13:43:57] <arahael> Square: (The answer informs the discussion, I suspect)
[13:44:02] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[13:44:08] * dminuoso is unsure why JSON is always thrown around as "the answer"
[13:45:20] <arahael> dminuoso: Pretty sure it's written in the scriptures somewhere.  Somewhere.
[13:45:22] <[exa]> dminuoso: ask a random internet service nowadays, they always send json
[13:45:29] <dminuoso> [exa]: Yes, so?
[13:45:45] <dminuoso> Why does that make "JSON" as "the default answer" when it comes to serializing data?
[13:45:56] <dminuoso> The default answer should be "what are your requirements?"
[13:46:03] <arahael> dminuoso: The point is more that whilst there's many things that may be wrong about JSON, it's a reasonable starting point.
[13:46:16] <dminuoso> Asking about requirements is a reasonable starting point.
[13:46:23] <arahael> Yeah, that works too. :)
[13:46:39] <arahael> But so, too, do "why" questions!
[13:47:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:47:42] *** Joins: jakalx (~jakalx@base.jakalx.net)
[13:50:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:51:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:51:29] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[13:51:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[13:51:40] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[13:52:11] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 252 seconds)
[13:54:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:55:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:55:49] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[13:58:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:59:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:02:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:03:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:04:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3)
[14:06:45] *** Quits: sunarch (uid526836@user/sunarch) (Quit: Connection closed for inactivity)
[14:08:40] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3) (Ping timeout: 264 seconds)
[14:10:01] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[14:11:22] *** Quits: arahael (~arahael@125-209-128-15.tpgi.com.au) (Ping timeout: 256 seconds)
[14:11:59] *** Joins: mmhat (~mmh@55d431d8.access.ecotel.net)
[14:13:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:13:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:15:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:16:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:17:20] *** Quits: nuh^ (~nuh@68.101.58.90) (Remote host closed the connection)
[14:18:36] *** Joins: trcc (~trcc@users-1190.st.net.au.dk)
[14:24:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:24:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:26:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:26:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:30:02] *** Joins: mario (~mario@31.147.205.13)
[14:31:12] *** Joins: cheater (~Username@user/cheater)
[14:31:37] *** Quits: mario (~mario@31.147.205.13) (Client Quit)
[14:37:06] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[14:37:14] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[14:37:36] *** Quits: emf (~emf@2620:10d:c090:400::5:99c8) (Quit: emf)
[14:41:50] *** Joins: euouae (~euouae@user/euouae)
[14:42:16] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[14:43:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:44:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:45:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:46:27] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:49:12] <Square> arahael. I dont mean the data, but the datastructure itself? If there is a way to describe the datastructure with json sure, i could hash that. 
[14:49:12] *** Quits: euouae (~euouae@user/euouae) (Read error: Connection reset by peer)
[14:49:43] <Square> data structure / "the type"
[14:51:23] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:51:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:53:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:53:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:55:19] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:55:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:57:17] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:57:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:59:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:59:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:01:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:01:29] *** Quits: Farzad (~FarzadBek@37.98.108.116) (Quit: Leaving)
[15:01:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:03:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:03:14] <geekosaur> so you're looking for a versioned data structure?
[15:03:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:03:39] <geekosaur> kinda like erlang?
[15:05:41] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:05:53] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 252 seconds)
[15:05:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:07:24] <dminuoso> Square: Id be careful with hashing type information since you might have internal changes that are not representational
[15:09:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:09:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:12:21] <Square> geekosaur, yes its a type versioning scheme. But it relies on developers not changing the scheme in between releases / or they know the implications of doing it. Basically i just want an assert no one tries to deserialize data into a possible modified datastructure. If its easy to accomplish.
[15:12:59] <geekosaur> :t Fingerprint
[15:13:00] <lambdabot> error:
[15:13:00] <lambdabot>     Data constructor not in scope: Fingerprint
[15:13:03] <geekosaur> bah
[15:13:41] <geekosaur> ghc associates fingerprints with data constructors. might be a little too restrictive though as I don't think it's guaranteed stable across compiles
[15:14:10] <geekosaur> oh wait, it's not a datacon
[15:14:31] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[15:15:24] *** Joins: mario (~mario@31.147.205.13)
[15:15:39] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/libraries/base-4.16.0.0/Data-Typeable.html#v:typeRepFingerprint
[15:16:10] <geekosaur> > typerepFingerprint (typeOf (1::Int))
[15:16:12] <lambdabot>  error:
[15:16:12] <lambdabot>      • Variable not in scope: typerepFingerprint :: TypeRep -> t
[15:16:12] <lambdabot>      • Perhaps you meant one of these:
[15:16:24] <geekosaur> @let import Data.Typeable
[15:16:25] *** Quits: mario (~mario@31.147.205.13) (Remote host closed the connection)
[15:16:25] <lambdabot>  Defined.
[15:16:28] <geekosaur> > typerepFingerprint (typeOf (1::Int))
[15:16:30] <lambdabot>  error:
[15:16:30] <lambdabot>      • Variable not in scope: typerepFingerprint :: TypeRep -> t
[15:16:30] <lambdabot>      • Perhaps you meant one of these:
[15:16:42] <geekosaur> > typeRepFingerprint (typeOf (1::Int))
[15:16:44] <lambdabot>  b1460030427ac0fa458cbf347f168b53
[15:16:54] <geekosaur> % typeRepFingerprint (typeOf (1::Int))
[15:16:54] <yahb> geekosaur: b1460030427ac0fa458cbf347f168b53
[15:16:59] <geekosaur> oh good
[15:18:37] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[15:20:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:20:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:20:49] <geekosaur> you need a Typeable constraint on your type, but this is just bookkeeping: ghc always makes Typeable representations of types for internal use
[15:21:32] <geekosaur> s/on your type/where you make use of this/
[15:21:39] <geekosaur> all types have Typeable, as I said
[15:21:46] <xerxesphainon[m]> i want to learn more about structures. arrays. data trees. integers. binary. machine code. compilimng. im not sure where to start. i nee to modify a mac os kernal to run without sse4.2 instruction set
[15:21:57] <xerxesphainon[m]> im sorry for just walking in you guys
[15:26:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:26:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:28:28] *** Joins: kuribas (~user@ptr-25vy0i9nuu9joot4en6.18120a2.ip6.access.telenet.be)
[15:30:36] <geekosaur> this probably isn't the channel for that
[15:31:44] <geekosaur> apple doesn't release source for their kernel, or it'd be relatively easy. you'd have to spend a lot of time with machine code dumps identifying the code that not only uses sse4.2 math but also accesses sse4.2 registers, and patch in replacements that emulate them
[15:32:57] <geekosaur> and those replacements have to be aware of which registers are available and which have to be spilled to the stack to make room for the emulated opcodes to work with
[15:33:10] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:35:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:35:11] <geekosaur> hm
[15:35:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:35:28] <geekosaur> @let data A a = A a
[15:35:29] <lambdabot>  Defined.
[15:35:32] <Cajun> im certain there would be quite a few very detailed and very non-haskell textbooks about those things, like compiler design and structures & algorithms
[15:35:41] <geekosaur> % let data A a = A a
[15:35:41] <yahb> geekosaur: ; <interactive>:31:5: error: parse error on input `data'
[15:35:46] <geekosaur> % data A a = A a
[15:35:47] <yahb> geekosaur: 
[15:36:13] <geekosaur> > typeRepFingerprint (typeOf (A (1::Int)))
[15:36:14] <lambdabot>  9fdf0d45d7e67ce04c73dcb9ef131cd5
[15:36:22] <geekosaur> % typeRepFingerprint (typeOf (A (1::Int)))
[15:36:22] <yahb> geekosaur: 04fc6ed32dc1e391c6a42e2f744b75b8
[15:36:29] <geekosaur> that's not so hot
[15:36:53] <geekosaur> guess Fingerprint won't help with versioned serialization after all :(
[15:36:56] <Cajun> is that a ghc version thing?
[15:37:32] <geekosaur> dunno
[15:38:46] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[15:39:22] <Cajun> > !ghci -V
[15:39:23] <lambdabot>  <hint>:1:7: error: parse error on input ‘-’
[15:39:24] <geekosaur> I was hopeful when Int worked out the same for both but then it occurred to me that it might be too wired-in to vary
[15:39:38] <geekosaur> @version
[15:39:38] <lambdabot> lambdabot 5.3.0.1
[15:39:38] <lambdabot> git clone https://github.com/lambdabot/lambdabot
[15:39:43] <geekosaur> bah
[15:39:58] <Cajun> thats not a particularly helpful version number lol
[15:40:03] <geekosaur> anyway lambdabot isnb't ghci so you can't use things like !
[15:40:49] <merijn> > System.Info.compilerVersion
[15:40:51] <lambdabot>  error:
[15:40:51] <lambdabot>      Not in scope: ‘System.Info.compilerVersion’
[15:40:51] <lambdabot>      No module named ‘System.Info’ is imported.
[15:40:53] <merijn> hmm
[15:40:58] <merijn> how did you add imports again? :p
[15:41:01] <Square> geekosaur, sorry. Wandered away a bit there. Interesting. Is it consistent between versions of haskell you think? 
[15:41:03] <Cajun> > import System.Info
[15:41:05] <lambdabot>  <hint>:1:1: error: parse error on input ‘import’
[15:41:10] <merijn> % System.Info.compilerVersion
[15:41:10] <yahb> merijn: Version {versionBranch = [9,0], versionTags = []}
[15:41:23] <geekosaur> Square, no, see the later one
[15:41:27] <merijn> Cajun: That doesn't work, because lambdabot isn't ghci :p
[15:41:34] <geekosaur> (startinbg with "data A a")
[15:42:08] <geekosaur> basically Int is wired in so it always generates the same fingerprint. user defined types don't
[15:42:34] <geekosaur> @let import System.Info
[15:42:35] <lambdabot>  Defined.
[15:42:37] *** Joins: xkuru (~xkuru@user/xkuru)
[15:42:42] <geekosaur> > compilerVersion
[15:42:44] <lambdabot>  Version {versionBranch = [8,10], versionTags = []}
[15:42:53] <Cajun> that would probably explain it
[15:43:07] <Square> If i find a way to export a schema using this lib https://typedefs.com/ . I think i should be safe. 
[15:43:28] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[15:43:57] <Square> I wont have any more complicated types than it can handle.
[15:44:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:45:52] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Ping timeout: 264 seconds)
[15:45:55] *** Quits: justache (~justache@user/justache) (Ping timeout: 268 seconds)
[15:46:07] *** Quits: Megant (megant@user/megant) (Ping timeout: 260 seconds)
[15:47:43] *** Joins: Megant (~kaitsu@user/megant)
[15:48:37] *** Joins: justache (~justache@user/justache)
[15:50:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:50:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:51:32] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 240 seconds)
[15:52:07] *** Joins: FragByte (~christian@user/fragbyte)
[15:52:21] *** Joins: thevishy (~Nishant@2405:201:f005:c007:f92b:9823:fedf:deab)
[15:53:19] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[15:55:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:55:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:57:33] *** Joins: arahael (~arahael@203.166.224.240)
[15:58:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:58:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[15:58:21] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[15:59:42] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[16:00:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:01:00] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[16:02:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:03:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:04:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:06:00] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[16:08:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:08:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:09:59] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:10:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:12:34] *** Joins: justache (~justache@user/justache)
[16:14:38] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:14:48] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:17:07] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[16:21:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:21:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:21:34] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:21:49] *** Joins: Farzad (~FarzadBek@37.98.108.116)
[16:22:12] *** Joins: justache (~justache@user/justache)
[16:25:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:25:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:26:05] *** Joins: Topsi (~Tobias@dyndsl-095-033-088-116.ewe-ip-backbone.de)
[16:26:40] *** Quits: justache (~justache@user/justache) (Ping timeout: 264 seconds)
[16:27:05] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[16:30:27] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[16:32:04] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[16:32:45] *** Joins: justache (~justache@user/justache)
[16:35:14] <dminuoso> Mmm, is there a way to gen-bounds on a test-suite?
[16:35:41] <dminuoso> Or is copy+pasting the build-depends from the test-suite into an appropriate library build-depends, then running gen-bounds the way?
[16:37:11] *** Quits: justache (~justache@user/justache) (Ping timeout: 252 seconds)
[16:37:41] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[16:38:07] *** Joins: fef (~thedawn@user/thedawn)
[16:38:42] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:40:22] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:40:39] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[16:40:40] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:42:21] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:42:39] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:45:31] <geekosaur> or using an include section to put the build-depends into both, then running gen-bounds?
[16:46:04] <dminuoso> Mmm I guess.
[16:46:16] <dminuoso> It's the same thing really :)
[16:46:34] *** Joins: justache (~justache@user/justache)
[16:46:36] <geekosaur> aside from not needing to make sure you update both later
[16:47:09] <dminuoso> Sure, I mean just commenting in/out that `include` in my executable/library component is more comfortable
[16:47:41] <dminuoso> But I guess what I really want is some `cabal add` type of command that implicitly adds the component with a suitable PVP bound on the highest possible version it can find a build plan with.
[16:48:19] <dminuoso> otoh such a command would decrease the value of hackage - the bar to adding dependencies better be high. :>
[16:50:04] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[16:50:56] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[16:51:08] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[16:51:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:53:24] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[16:55:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[16:58:57] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[17:02:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:02:41] *** Joins: slack1256 (~slack1256@191.125.99.210)
[17:02:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:03:35] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 256 seconds)
[17:03:58] <Hecate> dminuoso: would you still recommend https://github.com/dminuoso/servant-prometheus ?
[17:04:07] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[17:04:56] *** Joins: alzgh (alzgh@user/alzgh)
[17:05:04] <slack1256> Hello. Is GHC 9.0.1 a valid version or is it a "beta" for the 9.x branch? I feel like GHC 9.2.1 was the real first release of the 9.x branch.
[17:05:18] <Hecate> slack1256: it's a beta, don't invest in it
[17:05:29] <merijn> slack1256: It's not beta, but also, it is :p
[17:05:40] <slack1256> I knew it!
[17:06:12] <merijn> Even numbered releases are always proper releases, but not all proper releases are as proper as you'd like :p
[17:06:31] <merijn> Especially the x.y.1 ones
[17:08:03] <dminuoso> Hecate: I think exarkun maintains some up-to-date fork?
[17:08:06] <slack1256> So 9.2.1 is also a non proper release?
[17:08:07] <slack1256> Damn.
[17:08:54] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:09:12] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[17:09:19] <yushyin> i played a bit with 9.2.1, works for me, but no HLS support yet.
[17:10:07] <exarkun> Hello what
[17:10:29] <exarkun> Oh servant-prometheus, huh
[17:10:37] <exarkun> "maintain" might be putting it a little strongly
[17:13:09] <dminuoso> Your fork includes the work of kirelagin it seems
[17:13:17] <dminuoso> The one I never merged
[17:13:29] <dminuoso> Think something came up, and then I forgot all about it
[17:13:43] <dminuoso> I really want servant-prometheus to be a thing and be on hackage.
[17:14:20] <dminuoso> exarkun: Are there any notable todos on your fork?
[17:14:29] <geekosaur> 9.2.1 was intended to be "proper" but some severe codegen bugs in Apple M1 support were found post-release
[17:15:14] <geekosaur> aside from that I'd say it's proper
[17:15:36] <merijn> slack1256: .1 releases always tend to always have some sleeper bug that gets noticed to late :p
[17:15:45] <exarkun> dminuoso: I don't think so.  At least, it is working well enough that it is running in my almost-production system and I sort of forgot about it.
[17:16:30] <Hecate> dminuoso: ok thanks!
[17:18:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:18:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:18:32] <slack1256> I wonder, if I use the llvm backend, would I have stability bugs on M1? I know that GHC targets an older/stable version on LLVM.
[17:18:58] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[17:19:13] <geekosaur> llvm should be fine
[17:19:19] <geekosaur> and is on 8.10.7
[17:19:27] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Ping timeout: 256 seconds)
[17:20:04] <geekosaur> native support has sign extension issues at the cmm layer that they're still trying to figure out if they can fix without completely redoing the path from core to cmm
[17:20:22] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[17:21:52] <slack1256> I will try to build our project and see how it goes.
[17:22:02] *** Quits: Typedfern (~Typedfern@171.red-83-51-60.dynamicip.rima-tde.net) (Ping timeout: 260 seconds)
[17:24:16] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[17:26:15] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:29:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:29:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:31:13] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:33:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:33:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:33:54] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:58c0:b83a:3eea:a1cf)
[17:35:10] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[17:35:53] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 256 seconds)
[17:38:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:38:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[17:38:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:38:45] <xerxesphainon[m]> this is a language
[17:38:51] <xerxesphainon[m]> similar to lua
[17:38:56] <xerxesphainon[m]> or rubyh
[17:39:04] <xerxesphainon[m]> can i get in on this?
[17:41:52] <merijn> Of all the languages I'd call Haskell are similar too, Ruby and Lua are *definitely* not ones I'd consider similar :p
[17:43:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:43:21] <hpc> ruby does have that whole "function do {code block}" thing going on
[17:43:45] <hpc> xerxesphainon[m]: haskell is quite unlike anything you have likely used before
[17:43:59] <hpc> https://www.haskell.org/documentation/ can get you started
[17:44:34] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[17:45:06] <slack1256> It seems -fllvm is working on the M1 :woah: .
[17:47:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:47:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:47:29] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Client Quit)
[17:47:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[17:47:53] *** Joins: reumeth (~reumeth@user/reumeth)
[17:49:24] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[17:52:51] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:52:56] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[17:53:14] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[17:55:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:56:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:56:37] <kuribas> hpc: I remember being amazed by ruby code blocks, until I realised they are just lambdas.
[17:57:06] <merijn> I tried to make a typed python that included those kinda code blocks
[17:57:24] <merijn> Quickly realised it was basically 'IO ()' and I was reinventing Haskell, poorly. So I stopped :p
[17:57:59] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:58:40] *** Joins: max22- (~maxime@2a01cb0883359800844aee1a010c5cf0.ipv6.abo.wanadoo.fr)
[18:00:25] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:03:40] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[18:07:33] *** Joins: alzgh (alzgh@user/alzgh)
[18:08:10] <kuribas> merijn: haskell where everything is IO (), so sml or ocaml?
[18:09:02] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 252 seconds)
[18:09:32] <Hecate> merijn: wise
[18:10:28] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[18:10:43] <hpc> kuribas: yeah, they aren't particularly special but it's nice to see another language make it so easy to use them
[18:11:32] <hpc> trying the same style in python will take years off your life :P
[18:12:00] <kuribas> the python community is actually discouraging function style.
[18:12:05] <kuribas> functional style.
[18:12:11] <hpc> yep
[18:12:58] <kuribas> "there is one way to do it" is so stupid, especially if that one way is completely broken.
[18:13:26] <boxscape_> what kind of thing is meant by "functional style python"?
[18:14:15] <boxscape_> but yeah "there is one way to do it" kind of means you're eternally stuck with the first idea you had, even if better ideas come along later
[18:14:26] <hpc> it's ironic too, because ruby is the "everything is an object" ideal that java always wished it could be
[18:14:51] <kuribas> boxscape_: using HOFs
[18:14:59] <boxscape_> I see
[18:17:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:17:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:17:25] *** Joins: wroathe (~wroathe@user/wroathe)
[18:19:10] <jneira[m]> Smalltalk always will be the lost paradise of oop
[18:19:23] *** Joins: jkaye (~jkaye@2601:281:8300:7530:70fe:f118:dc91:2d9c)
[18:22:07] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[18:24:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:24:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:26:33] <merijn> kuribas: No, where only some things were IO ()
[18:28:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:28:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:29:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[18:29:42] *** Quits: Farzad (~FarzadBek@37.98.108.116) (Quit: Leaving)
[18:32:19] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[18:33:47] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[18:34:17] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[18:34:23] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:35:21] *** Joins: trcc_ (~trcc@185.45.22.131)
[18:35:26] *** Quits: slack1256 (~slack1256@191.125.99.210) (Ping timeout: 252 seconds)
[18:35:53] *** Joins: img (~img@user/img)
[18:37:53] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:58c0:b83a:3eea:a1cf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:38:44] *** Quits: trcc (~trcc@users-1190.st.net.au.dk) (Ping timeout: 252 seconds)
[18:39:11] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e27ac7cfecfdd63434d.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:39:13] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[18:40:13] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:40:31] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:40:34] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:40:34] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:58c0:b83a:3eea:a1cf)
[18:42:11] *** Quits: trcc_ (~trcc@185.45.22.131) (Ping timeout: 256 seconds)
[18:43:34] *** Joins: fr33domlover (~fr33@2.53.150.205)
[18:44:02] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[18:44:17] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:44:52] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[18:45:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:45:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:45:20] *** Joins: wroathe (~wroathe@user/wroathe)
[18:49:44] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[18:50:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[18:55:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:55:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:57:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:57:16] *** Quits: rkrishnan (~user@122.171.76.46) (Ping timeout: 264 seconds)
[18:57:20] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:57:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:59:51] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[19:01:12] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:05:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:06:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:07:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:08:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:08:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3)
[19:10:19] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:10:38] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:12:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:12:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:13:28] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3) (Ping timeout: 264 seconds)
[19:14:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:15:35] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:16:57] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[19:17:14] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:17:32] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[19:18:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:18:46] *** Joins: ystael (~ystael@user/ystael)
[19:19:30] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:20:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:21:24] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:21:52] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[19:23:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:24:55] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:25:32] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:27:08] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:27:27] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Remote host closed the connection)
[19:27:37] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:28:04] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:29:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:29:38] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:30:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:31:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:31:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:33:15] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:33:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:35:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:35:40] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:36:22] *** Joins: fef (~thedawn@user/thedawn)
[19:37:13] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:37:39] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:39:12] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:39:38] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[19:39:44] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:41:19] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:41:45] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:41:48] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Client Quit)
[19:42:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:42:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:43:16] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:43:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:45:20] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:45:47] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:47:22] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:47:50] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:48:14] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[19:49:23] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:49:48] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:51:21] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:51:51] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:52:08] *** Joins: slack1256 (~slack1256@191.126.99.210)
[19:52:27] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[19:52:55] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 250 seconds)
[19:53:04] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[19:53:25] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:53:52] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[19:53:54] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[19:54:42] *** Joins: hololeap (~hololeap@user/hololeap)
[19:54:43] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:55:24] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:55:47] <dsal> Today's dumb thing everybody should do:  https://www.haskellforall.com/2015/09/how-to-make-your-haskell-code-more.html
[19:55:57] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:56:39] <dsal> I guess everybody should ignore the second paragraph and immediately do all of these things.
[19:57:13] *** Joins: stefan-_ (~cri@42dots.de)
[19:57:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[19:57:58] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[19:58:39] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:283f:851a:b183:49fe) (Quit: WeeChat 2.8)
[19:59:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:00:00] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:00:02] *** Quits: xff0x (~xff0x@2001:1a81:527f:8300:57da:badd:210c:d109) (Ping timeout: 240 seconds)
[20:00:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:01:08] *** Joins: xff0x (~xff0x@2001:1a81:527f:8300:4a2b:7ccd:5352:f2b5)
[20:01:30] <kuribas> learning ($) takes literally 1 minute
[20:01:34] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:01:36] <kuribas> if even...
[20:01:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:01:59] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:02:40] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Ping timeout: 264 seconds)
[20:03:10] <boxscape_> kuribas yes, but if you're trying to write code meant to be read by non-Haskellers (as in the blog post), your readers don't know where to look to learn it
[20:03:13] <dsal> The actual point of the article seems to be that if you want to give a small example of something in Haskell for people who don't know Haskell, there are a few things you should do that will make it a bit more accessible.
[20:03:30] <dsal> The way it was presented internally is "these are all good ideas and we should write code like this!"
[20:03:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:04:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:04:19] <kuribas> boxscape_: point taken :)
[20:04:38] <kuribas> avoiding ($) may even seduce lispers :)
[20:04:53] <dsal> I think I reached my limit here.  This dude might be good at a few things, but he's a terrible technical leader and seems to be unable to work with anyone who doesn't just believe everything he says without explanation.  He can have those people, I guess.
[20:05:33] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:05:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:06:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:06:14] <kuribas> Most of these are decent points, if not taken so extreme.
[20:06:18] <c_wraith> yeah, the article is weird in that all the explanations refer to beginners, yet the heading doesn't say a thing about it
[20:06:50] <c_wraith> it's not titled "how to introduce haskell to a new audience"
[20:06:58] <boxscape_> hm? the headline says "How to make your Haskell code more readable to non-Haskell programmers ", that seems fine
[20:06:59] <c_wraith> that advice would be good with that title!
[20:07:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:07:28] <c_wraith> Oh, huh.  I guess I did that thing where I ignore the title because I expect the body to contain all relevant info
[20:07:35] <boxscape_> :D
[20:07:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:07:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:07:54] <c_wraith> But yeah, that's not advice for programming in Haskell
[20:08:02] <c_wraith> It's advice for introducing the language
[20:08:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:08:12] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:08:13] <kuribas> c_wraith: even toned down a bit it's decent advice IMO...
[20:08:15] *** Quits: _bo (~bo@79.171.122.236) (Read error: Connection reset by peer)
[20:08:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:08:29] <kuribas> like, use do notation if that improves readability.
[20:08:34] <pragma-> Imagine showing a program full of Lens operators to someone largely unfamiliar with Haskell.
[20:08:35] <dsal> Most readability things are subjective.
[20:08:59] <boxscape_> pragma- depending on *which* lens operators we're talking about that could go over quite well actually
[20:09:00] <dsal> do notation doesn't always improve readability for someone familiar with Haskell.
[20:09:08] <pragma-> Someone told me "Oh, just read the program and simply guess what the operators do! It's not hard."
[20:09:10] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[20:09:33] <c_wraith> I define a bunch of local operators in my own code, because they often result in cleaner syntax.
[20:09:33] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:09:39] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:09:46] <c_wraith> But they have the advantage of being defined adjacent to usage
[20:09:55] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:10:06] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:10:11] <kuribas> I tend to avoid all lens operators.
[20:10:24] <boxscape_> (e.g. `totalCost += company^.ceo.salary` is quite readable)
[20:10:24] <dsal> I've got code that uses do notation specifically so they can have a `let` binding without `in` in the form of `let someVariableName = someFunc someArg` just so they can then have a `case someVariableName of`.  Like... Hey, you know, if you didn't name the result of that function and its argument (which is pretty obvious), you wouldn't need the let and the do would be redundant and this whole thing would just be a simple case.
[20:10:35] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[20:11:22] *** Joins: kmein (~weechat@user/kmein)
[20:11:26] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:11:37] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:11:40] <dsal> Some people really believe that `let theResultOfFunctionWithArg = function arg` somehow makes something more readable.
[20:11:50] <boxscape_> :/
[20:12:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:12:18] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:12:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:12:49] <geekosaur> go back to Java :(
[20:13:27] *** Joins: lbseale_ (~ep1ctetus@user/ep1ctetus)
[20:13:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:13:43] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:14:10] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:14:23] <dsal> I mean, there *are* points where you should probably name a few intermediate steps if chains get large.  But naming something that's basically already named (just with a space in it) doesn't add clarity.  Extra words make code harder to read.
[20:14:32] <dsal> That last point seems controversial, so it's probably subjective.
[20:14:48] <c_wraith> map theFunctionToApplyToTheElementsOfTheList (theFirstElementOfTheList:theRestOfTheList) = ...
[20:15:11] <dsal> Yeah.  I see some of that stuff.  Go back to objective c.  :)
[20:15:41] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[20:16:07] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:16:26] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[20:16:48] <dsal> I wish I could find this one example I had.  There were two identifiers in scope that were like   `someVariableResultingFromACallToCatfunction` and `someVariableResultingFromACallToCarFunction` 
[20:17:04] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 264 seconds)
[20:17:10] <kuribas> boxscape_: yeah, the state operators are somewhat more readable than the rest.
[20:17:10] <dsal> Super long multiword variables with just a letter or two somewhere in the middle distinguishing them.
[20:17:31] <dsal> kuribas: the state operators are the uncanny valley of Haskell.
[20:18:19] *** lbseale_ is now known as lbseale
[20:24:12] *** Joins: masterbuilder (~user@user/masterbuilder)
[20:24:36] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[20:25:08] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:27:47] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:27:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[20:28:06] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:28:13] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3)
[20:29:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:29:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:30:44] *** Joins: reumeth (~reumeth@user/reumeth)
[20:33:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:39:29] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[20:39:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:40:01] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[20:41:19] *** Joins: arjun (~user@user/arjun)
[20:43:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:43:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:44:08] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[20:47:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:47:29] *** Joins: zebrag (~chris@user/zebrag)
[20:47:42] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:48:04] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Ping timeout: 268 seconds)
[20:50:43] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:51:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:51:23] *** Quits: fr33domlover (~fr33@2.53.150.205) (Ping timeout: 256 seconds)
[20:53:20] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[20:53:35] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 250 seconds)
[20:55:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:59:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:01:54] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[21:02:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:03:38] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:03:58] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[21:04:43] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[21:04:52] *** Joins: unyu (~pyon@user/pyon)
[21:05:48] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Client Quit)
[21:06:20] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:58c0:b83a:3eea:a1cf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:15:20] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[21:15:52] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[21:15:56] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[21:16:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[21:20:21] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[21:21:11] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[21:23:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:23:41] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[21:23:53] *** Joins: emf (~emf@2620:10d:c090:400::5:9a5b)
[21:24:39] <tito> why does GHC complain about tab indentation by default?
[21:25:12] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Client Quit)
[21:25:17] <tito> is it because of compatibility with the Haskell report grammar or something like that? tabs and spaces should be quite equivalent
[21:25:34] <Hecate> I think there's a flag that's default but you can disable it
[21:25:36] <monochrom> Because most editors lie about tabs.
[21:25:58] <tito> Hecate: I know, it's -fno-warn-tabs I think
[21:26:21] <tito> so the rationale is that most editors mess up with tabs?
[21:26:22] <yushyin> many users, especially newcomers, did not get the layout and tabs right, so this warning became default at some point.
[21:26:43] <monochrom> Tabs should mean column 8*n+1, but editors lie that they can mean whatever number of spaces you want. Well then GHC is not telepathic.
[21:27:16] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:58c0:b83a:3eea:a1cf)
[21:27:19] <geekosaur> some editors use fixed 4 or fixed 5 or 5*n+1 or …
[21:27:38] <geekosaur> or just indent to the closest word-like thing on the preceding line
[21:27:46] <monochrom> In an ideal world, people would regard those editors buggy and reject them. But this is not an ideal world.
[21:27:46] <tito> monochrom: Okay, editors are customizable - but what's the problem? If all indentation is made using tabs, there wouldn't be any ambiguity
[21:28:19] <tito> GHC doesn't care if everything is indented by 2, or 4, or 8 spaces - it shouldn't care if everything is indented by a tab too
[21:28:34] <yushyin> works fine then, i've used ghc a long time with only tabs
[21:28:41] <geekosaur> except that it does care, because of layout
[21:28:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:29:02] <tito> I'm sorry if this looks like some kind of complain, I'm just trying to understand why the default is like this
[21:29:02] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:29:08] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:29:16] <tito> geekosaur: could you provide me with an example? 
[21:29:16] <monochrom> Here is an example.
[21:29:37] <monochrom> My 1st line is "main = do print 0"
[21:29:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:30:00] <monochrom> My 2nd line is "print 1" aligned with "print 0". This means I need 10 spaces.
[21:30:38] <monochrom> Someone set their tab to "mean" 4 spaces. So they use 2 tabs, 2 spaces.
[21:30:42] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[21:30:57] <monochrom> Now GHC sees 18 spaces.
[21:31:00] <tito> But the point isn't to align "print 1" with "print 0", right? You can indent it with 4 spaces for example and it would work equally well
[21:31:05] <arjun> 2tab2furious
[21:31:18] <tito> The point is to distinguish different levels of indentation
[21:31:48] <dsal> If tabs aren't for alignment, why do they exist?
[21:31:49] <monochrom> The point is to align "print 1" with "print 0".
[21:32:08] <monochrom> At least, the point of Haskell 2010 layout rules.
[21:32:30] <[exa]> tito: the situation gets complicated pretty easily, imagine you have 2 nested `do` blocks, and the tail of the outer one aligns with the inner "do" with one tab setting, and with the outer "do" with another tab setting
[21:32:52] *** Quits: thevishy (~Nishant@2405:201:f005:c007:f92b:9823:fedf:deab) (Quit: Leaving)
[21:33:32] <tito> [exa], monochrom I see, thank you
[21:33:33] <arjun> dsal: ancient artifact to save file space i reckon? get the illusion of 8 \s characters for the price of 1 \t characters
[21:34:25] <monochrom> I think it goes deeper than that. Tabbing came from typewriters.
[21:34:28] *** Quits: jkaye (~jkaye@2601:281:8300:7530:70fe:f118:dc91:2d9c) (Ping timeout: 264 seconds)
[21:34:44] <monochrom> Everything weird about terminals traces back to typewriters.
[21:34:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:34:49] <[exa]> tito: the enforcement of spaces is a design choice that prevents the other design choice of going through the complicated obscure way of enforcing mixed tab/space prefix format to do it completely right
[21:34:50] <dsal> Typewriters were notorious for having very little RAM.
[21:35:29] <tito> [exa], I see, it makes sense
[21:35:32] <[exa]> in comparison, setting your editor to "just do spaces" is pretty compatible choice, well understood by newbies :D
[21:35:47] <tito> I didn't think that the Haskell grammar was alignment-based, my bad
[21:36:11] <arjun> i watched a documentary on a typewriter store, it had tom hanks AND john mayer
[21:36:13] <[exa]> you can do even without alignment using { .. ; .. }
[21:36:24] <tito> And actually I got into some mysterious alignment issues some time ago because I didn't know the Haskell report, I'll go and check it out
[21:36:24] <[exa]> but people tend to do alignment, looks neater
[21:36:54] <[exa]> tbh I've got a parser hidden somewhere from the university years that does the tab/space thing right
[21:37:52] <[exa]> turned out that to enjoy the whole thing properly, your text editor would need to be plain magic
[21:37:55] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[21:38:02] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Client Quit)
[21:38:15] <[exa]> (and completely avoid the "tab is N spaces" idea)
[21:40:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7309:f677:c771:6123)
[21:42:14] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[21:44:33] <geekosaur> you can even observe this in vim, by setting hardtabs to something other than 8
[21:45:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:45:20] <geekosaur> (vim being one of the smarter editors when it comes to tabs; it keeps its internal notion of tabs separate from the one it exposes to the outside world)
[21:46:21] *** Quits: arahael (~arahael@203.166.224.240) (Ping timeout: 256 seconds)
[21:48:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:48:03] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:48:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:49:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[21:51:12] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:51:30] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[21:51:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3) (Remote host closed the connection)
[21:53:54] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:54:05] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[21:54:12] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Client Quit)
[21:56:51] *** Quits: mbuf (~Shakthi@223.184.125.58) (Quit: Leaving)
[21:57:37] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[21:59:01] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[21:59:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:02:13] *** Quits: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:03:42] <justsomeguy> Is it possible in theory to express all control flow using map/fold alone, rather than direct recursion?
[22:04:20] <dsal> You can map with fold.
[22:04:26] <dminuoso> Depending on the type.
[22:04:49] <boxscape_> say you want a function that does the same thing forever - to do this with a fold you need to first construct an infinite list, for which you need recursion
[22:04:50] *** Joins: arahael (~arahael@27-32-144-20.tpgi.com.au)
[22:04:56] <slack1256> justsomeguy: Not sure if *all* but pretty much yeah.
[22:05:11] <tomsmeding> justsomeguy: what fold exactly are you talking about?
[22:05:21] <tomsmeding> the 'foldr' from Data.Foldable?
[22:05:44] <dsal> :t fold
[22:05:45] <lambdabot> (Foldable t, Monoid m) => t m -> m
[22:05:50] <tomsmeding> if so, then no, you can't express a map over some weird tree structure, because when using foldr you implicitly flatten the structure to a list
[22:05:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:06:01] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[22:06:38] *** Parts: arjun (~user@user/arjun) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[22:07:05] <dsal> I don't know if there's a name for an anamorphism followed by a catamorphism, but you could always do that with the tree.
[22:07:13] <tomsmeding> dsal: same thing, doesn't allow you to distinguish between Node (Node (Leaf 1) (Leaf 2)) (Leaf 3) and Node (Leaf 1) (Node (Leaf 2) (Leaf 3))
[22:08:04] <tomsmeding> (assuming your monoid is indeed associative -- a more complex example works for nonassociative "monoids")
[22:08:21] <dsal> Sure, a functor map makes sense there, but I'm not convinced you *can't* do it, just that it might be very expensive and unreadable.
[22:09:01] <tomsmeding> data WeirdTree a = List [WeirdTree a] | Node (WeirdTree a) (WeirdTree a) | Leaf a
[22:09:07] <tomsmeding> with the obvious Functor and Foldable instances
[22:09:41] <tomsmeding> you're not going to be able to distinguish List [Leaf 1, Leaf 2] and Node (Leaf 1) (Leaf 2) using 'fold'
[22:09:42] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:356c:6df7:ff7f:48a3)
[22:09:47] <shapr> map preserves structure, fold flattens and reduces ... I still don't know of laws for changing shape like filter. I've heard of witherable, but does it have real laws?
[22:09:48] <dminuoso> justsomeguy: A generalized form of "can represent all control flow" is free monads.
[22:09:58] <tomsmeding> (granted, dumb example)
[22:10:21] <dminuoso> shapr: Yes
[22:10:26] <tomsmeding> also: algebraic folds, also called Church encoding
[22:10:28] <dminuoso> mapMaybe (Just . f) = fmap f
[22:10:31] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[22:10:31] <dsal> tomsmeding: Sure, it makes sense.  I'm just thinking it's possible to encode that into the fold and then unfold it again.  Not that you should.
[22:10:42] <dminuoso>     wither (Identity . f) = Identity . mapMaybe f
[22:10:45] <dminuoso> t . wither f ≡ wither (t . f)
[22:10:50] <dminuoso> And some more
[22:10:55] <dminuoso> https://hackage.haskell.org/package/witherable-0.4.2/docs/Data-Witherable.html#t:Witherable
[22:11:26] <tomsmeding> dsal: but you can't, right? fold f (List [Leaf 1, Leaf 2]) = f 1 <> f 2 = fold f (Node (Leaf 1) (Leaf 2)) -- there's nothing you can encode anywhere as far as I can see
[22:11:32] <justsomeguy> So, for context, the reason I ask about this is because I've been thinking about whether eliminating as much control flow as possible would make my code easier to read. One idea was to replace all direct recursion with HOFs. But there seem to be trade-offs associated with that. ...and recursive function calls are not only control-flow, but also represent data-flow in the form of changing argument
[22:11:34] <justsomeguy> values.
[22:11:50] <tomsmeding> "easier to read" no.
[22:11:57] <dminuoso> justsomeguy: I find separating is the key, not abstracting away
[22:12:10] <shapr> dminuoso: sounds like I need to do more reading on witherable
[22:12:16] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[22:12:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:13:13] <tomsmeding> justsomeguy: eliminating direct recursion in favour of HOF might _shorten_ your code, but in many cases (but not all) and for many people (but not all), that will actually harm readability
[22:13:36] <tomsmeding> exceptions include: stuff like 'compose = foldr (.) id', where using direct recursion is really too verbose (in my personal opinion)
[22:14:13] <dsal> tomsmeding: I'm not 100% sure I can't.  I'm fairly sure it's not worth the effort to try, though.  :)
[22:14:23] <tomsmeding> :)
[22:14:37] <monochrom> readability depends on the reader too
[22:14:49] <monochrom> Also I hate that word. I use "comprehensible".
[22:14:54] <tomsmeding> hence the second "(but not all)" :)
[22:15:34] <dsal> foldr is better when your code otherwise is reinventing foldr.  Sometimes, expressing your thing in terms of recursion is better.
[22:15:35] <dminuoso> https://pbs.twimg.com/media/FDLRPTFWEAUdqwv.jpg
[22:15:41] <dminuoso> ^- this diagram applies to haskellers just as much.
[22:16:13] <tomsmeding> with nuance :p
[22:16:36] <justsomeguy> Reminds me of this quote I like ... "first you learn the value of abstraction, then you learn the cost of abstraction, then you're ready to engineer" ~ Kent Beck
[22:17:04] <monochrom> And then "simple" is also paradoxical because different people actually give it opposite meanings.
[22:17:46] *** Joins: mario (~mario@31.147.205.13)
[22:18:01] <EvanR> haha I scrolled pretty to far to see what it is you guys are really talking about, then gave up
[22:18:07] <dminuoso> monochrom: To me that dual meaning is hidden in that diagram as well, in the sense that "simple code" by experts differs very much from "simple code" by newcomers.
[22:18:14] <sm> Kent Beck++
[22:18:30] <EvanR> what topic could inspire such generalized abstract discussion
[22:18:31] <monochrom> Ah, nice.
[22:18:47] <EvanR> laws for filterable?
[22:18:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:18:52] <monochrom> And yeah the Kent Beck quote is golden.
[22:18:53] <slack1256> For HLS, where can I specify that is it safe to run ghc with '-j4'?
[22:19:05] <tomsmeding> EvanR: justsomeguy asked a question coming from an attempt to make code more readable by turning direct recursion into higher-order functions
[22:19:06] <dminuoso> EvanR: https://hackage.haskell.org/package/witherable-0.4.2/docs/Data-Witherable.html#t:Filterable
[22:19:10] <tomsmeding> and certain #haskell'ers rebelled
[22:19:37] <justsomeguy> Good synopsis tomsmeding, I was struggling to condense my question down.
[22:19:42] <EvanR> those two choices are in an eternal cosmic war
[22:19:53] <EvanR> just use recursion, just use a recursion combinator
[22:19:57] <dminuoso> I dont think recursion schemes ever succeeded beyond peeking curiosity and boredom?
[22:20:26] <dminuoso> Nobody without an academic degree can read your code anymore, and neither can you half a year from now. And your performance is down the drain too
[22:20:30] <EvanR> map, fold, scan, mapAccum, etc are great
[22:20:30] <geekosaur> piquing, maybe, but that's my understanding as well
[22:20:31] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:20:49] <dsal> The larger problem with recursion schemes is that it doesn't work with your data structures.
[22:20:56] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Ping timeout: 252 seconds)
[22:21:01] <dminuoso> geekosaur: Ah indeed. It's one of those words I will probably never get right.
[22:21:15] <EvanR> but the combinator for what you want doesn't always exist
[22:21:22] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:21:36] <EvanR> or it would be clearer using recursion
[22:22:19] <dminuoso> traverse is and remains my favourite combinator. :)
[22:22:20] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[22:22:31] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Remote host closed the connection)
[22:22:47] <slack1256> let og_lens = traverse
[22:23:16] *** Joins: justache (~justache@user/justache)
[22:24:38] *** Joins: x88x88x_ (~cheeg@gateway/vpn/pia/x88x88x)
[22:26:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[22:26:03] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[22:27:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:27:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:28:10] *** Quits: max22- (~maxime@2a01cb0883359800844aee1a010c5cf0.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[22:29:05] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[22:30:34] <EvanR> I still don't know how to use traverse xD
[22:30:46] <EvanR> :t traverse
[22:30:47] <lambdabot> (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
[22:32:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:32:35] <tomsmeding> Perform a computation on each element of a structure; then you get back a computation which returns the transformed structure
[22:32:40] <monochrom> If you know mapM, it's similar.
[22:32:57] <tomsmeding> Important property being that the structure is maintained, because it's basically fmap on steroids
[22:33:12] <tomsmeding> traverse is to fmap as mapM is to map?
[22:33:16] <monochrom> To a large extent, you can start with t=[]: (a -> f b) -> [a] -> f [b]
[22:33:59] <monochrom> No, mapM was simply s/Applicative/Monad/ because Applicative did not exist back then.
[22:34:01] <boxscape_> tomsmeding I think technically traverse is to fmap as mapM is to liftM
[22:34:08] <tomsmeding> (except mapM uses >>= and traverse uses <*>, which should not matter if your instances are law-abiding)
[22:34:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:34:51] <tomsmeding> TIL mapM works on traversables
[22:34:55] <monochrom> It looks like map because SML and Scheme's map are always living in IO and corresponds to Haskell's mapM.
[22:35:04] <boxscape_> tomsmeding mapM is actually defined as `mapM = traverse` in the Prelude
[22:35:20] <EvanR> I knew mapM = traverse
[22:35:32] <EvanR> that's cool
[22:36:05] <tomsmeding> Ah no it was sequence_ which is not just sequenceA_
[22:36:11] <EvanR> visible each element of the t a, get an f b, and combine it all with <*> ?
[22:36:20] <EvanR> s/visible/visit/
[22:36:27] <tomsmeding> Basically
[22:36:58] <monochrom> For each Handle, read the 1st line: traverse (\h -> hGetLine h) my_list_of_handles
[22:37:19] <monochrom> (and return the list of lines)
[22:37:33] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[22:37:49] <tomsmeding> traverse f (Node (Leaf 1) (Node (Leaf 2) (Leaf 3))) = Node <$> (Leaf <$> f 1) <*> (Node <$> (Leaf <$> f 2) <*> (Leaf <$> f 3))
[22:37:50] <EvanR> how does the process get started
[22:37:58] <EvanR> where does empty list come from
[22:38:14] <EvanR> or empty traversable
[22:38:17] <monochrom> Uh that's how it ends, not starts?
[22:38:17] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:38:37] <monochrom> But traverse _ [] = pure []
[22:38:37] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[22:39:01] <EvanR> the empty comes from the traversable type ok
[22:39:04] <tomsmeding> EvanR: just fmap it, and then combine actions upwards using <*>
[22:39:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:39:36] <EvanR> > traverse (\x -> Identity x) (Just '0')
[22:39:37] <lambdabot>  Identity (Just '0')
[22:39:42] <EvanR> > traverse (\x -> Identity x) Nothing
[22:39:43] <lambdabot>  Identity Nothing
[22:39:57] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[22:40:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:40:45] <EvanR> started / ended, whatever this is haskell xD
[22:41:34] *** Quits: x88x88x_ (~cheeg@gateway/vpn/pia/x88x88x) (Quit: Using Circe, the loveliest of all IRC clients)
[22:41:50] *** Quits: mario (~mario@31.147.205.13) (Quit: Leaving)
[22:41:51] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:42:31] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[22:44:37] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:45:26] *** Joins: alzgh (~alzgh@user/alzgh)
[22:45:43] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Read error: Connection reset by peer)
[22:46:26] *** Joins: mei (~mei@user/mei)
[22:48:37] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[22:49:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:50:20] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[22:50:46] <EvanR> erhm what happened with Monoid and Semigroup
[22:50:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:50:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:50:48] *** Joins: wroathe (~wroathe@user/wroathe)
[22:50:59] <EvanR> I can't just define mappend anymore?
[22:51:27] <boxscape_> you have to define (<>)
[22:51:29] <monochrom> I think you still can.
[22:51:30] <EvanR> I tried to define (<>) as mappend and it didn't work
[22:52:01] <tomsmeding> Which version of ghc?
[22:52:18] <EvanR> 8.10.7
[22:52:43] <monochrom> mappend is still a method of Monoid
[22:52:58] <boxscape_> you should be able to say `(<>) = mappend` in the Semigroup instance
[22:52:58] <monochrom> (<>) is a method of Semigroup
[22:53:28] <EvanR> I see, I didn't put Monoid constraint on the Semigroup instance, which... wouldn't really make sense 
[22:53:50] <EvanR> for the wrapped type
[22:53:55] <monochrom> No need to put Monoid constraint on Semigroup instance.
[22:53:55] <EvanR> Semigroup first it is
[22:54:08] <boxscape_> the order shouldn't matter
[22:54:21] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[22:54:24] <monochrom> Show actual code?
[22:54:33] <boxscape_> (though in practice I do think it makes more sense to define (<>) and leave the default implementation of mappend alone)
[22:54:52] <tomsmeding> EvanR: mappend is a method of Monoid, so you can't use mappend of _another_ type without requiring that that other type is Monoid
[22:55:12] <tomsmeding> But yes, just use (<>)
[22:55:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[22:55:48] <EvanR> https://paste.tomsmeding.com/AIXOSQk6
[22:56:42] <EvanR> putting that code in semigroup now
[22:56:48] <tomsmeding> Semigroup a is not going to provide you with a Monoid (E a) instance, is it? :)
[22:56:50] <tomsmeding> Yes
[22:57:01] <tomsmeding> That's the solution
[22:57:17] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[22:57:31] <monochrom> instance Semigroup a => Semigroup (E a) where E es1 <> E es2 = E (zipWith (<>) es1 es2)
[22:57:51] <EvanR> yes
[22:58:24] <EvanR> I originally had that semigroup constraint there 
[22:58:34] <EvanR> but was using mappend
[22:58:37] <EvanR> fixed
[22:59:11] <EvanR> Semigroup superiority forever
[23:00:18] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[23:01:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[23:02:21] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[23:05:45] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:06:26] *** Joins: max22- (~maxime@2a01cb0883359800172da6e8deefe185.ipv6.abo.wanadoo.fr)
[23:07:14] <janus> boxscape_: (<>)=mappend is a warning on GHC 9.2, so i'd do it the other way around
[23:07:28] <janus> (like you suggested)
[23:07:40] <boxscape_> right, makes sense
[23:07:41] <janus> may as well do it correctly now so people can turn on -Wall -Werror 
[23:08:35] <janus> i was a bit surprised that even if you have mytypeConcat and you set (<>)=mytypeConcat , it still will warn you if you do mappend=mytypeConcat... seems a bit strict
[23:09:03] <boxscape_> overriding the mappend default implementation is arguably always either a no-op or wrong
[23:09:29] <boxscape_> since it'd implemented as `mappend = (<>)` by default, *and* the Monoid laws state that `mappend` must be equal to (<>)
[23:11:01] <boxscape_> (well, actually, it's not a law, the docs make a stronger argument - "In a future GHC release mappend will be removed from Monoid." So just a bad idea to define `mappend`.)
[23:11:02] <janus> well the pattern i suggested is a no-op on modern ghcs. but it allows for simpler code if you want compatibility with ghc 8.0, for instance
[23:11:39] <boxscape_> janus the guidelines are that code must work with the latest three releases without CPP, and ghc 8.0 is not part of those three.
[23:11:57] <boxscape_> s/code must work/there must be a single way to make your code work
[23:12:22] <janus> which guidelines?
[23:12:37] <boxscape_> the guidelines used by the GHC team to decide which warnings to give
[23:13:19] <boxscape_> tbh I have no idea where they're written down
[23:13:49] <boxscape_> ah https://gitlab.haskell.org/haskell/prime/-/wikis/libraries/3-release-policy
[23:14:44] <boxscape_> (I suppose "GHC team" may not be entirely accurate, since this is about the basic libraries, not ghc)
[23:15:25] <geekosaur> I think that may still be in flux, but for a  long time base was managed by the ghc team
[23:16:22] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:16:28] *** Joins: sunarch (uid526836@user/sunarch)
[23:16:40] <janus> so the guideline implies that people can move directly from 'no semigroup instance and mappend' directly to 'semigroup instance and no mappend' without using cpp?
[23:17:21] <janus> i wonder how often that has happened, i'd speculate that most people just use cpp
[23:17:44] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[23:19:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:19:29] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:19:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:19:52] <boxscape_> janus I think that's not quite right - it implies people can move directly from 'no semigroup instance instance and mappend' to 'semigroup instance and mappend' (initially, Semigroup wasn't a superclass of Monoid), and then from that directly to 'semigroup instance and (<>)`. You can't skip the middle step without CPP, I believe
[23:20:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:20:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:20:49] <EvanR> does traversable make sense for an infinite data structure
[23:20:59] <EvanR> speaking of "end"
[23:20:59] <boxscape_> hence Semigroup was added to base two releases before it was made a superclass of Monoid
[23:21:25] <dsal> After ten years, the list of people I'm never working with again has doubled from 1 to 2 people.
[23:21:26] <boxscape_> % traverse_ print $ cycle "HELLO WORLD"
[23:21:32] <yahb> boxscape_: 'H'; 'E'; 'L'; 'L'; 'O'; ' '; 'W'; 'O'; 'R'; 'L'; 'D'; 'H'; 'E'; 'L'; 'L'; 'O'; ' '; 'W'; 'O'; 'R'; 'L'; 'D'; 'H'; 'E'; 'L'; 'L'; 'O'; ' '; 'W'; 'O'; 'R'; 'L'; 'D'; 'H'; 'E'; 'L'; 'L'; 'O'; ' '; 'W'; 'O'; 'R'; 'L'; 'D'; 'H'; 'E'; 'L'; 'L'; 'O'; ' '; 'W'; 'O'; 'R'; 'L'; 'D'; 'H'; 'E'; 'L'; 'L'; 'O'; ' '; 'W'; 'O'; 'R'; 'L'; 'D'; 'H'; 'E'; 'L'; 'L'; 'O'; ' '; 'W'; 'O'; 'R'; 'L'; 'D'; 'H'; 'E'; 'L'; 'L'; 'O'; ' '; 'W'; 'O'; 'R'; 'L'; 'D'; 'H'; 'E';
[23:21:44] <boxscape_> (I meant to use repeat but I'll take it)
[23:21:46] <EvanR> oh duh I missed part of the sequenceA sig
[23:21:59] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 252 seconds)
[23:22:24] <monochrom> I think it makes sense for very non-strict Applicative instances such as Control.Monad.State.Lazy
[23:22:46] <janus> boxscape_: oh, but if i attempted my proposal on a too-old ghc, it would complain about the missing mappend if i have -Wall on, right?
[23:22:54] <janus> boxscape_: so i would have found out
[23:23:21] <janus> since surely if it isn't a superclass, it can't have a default impl
[23:23:31] <janus> s/super/sub/
[23:23:36] <boxscape_> janus yeah, I think you don't even need -Wall for that
[23:24:00] <janus> i always have -Wall :P no point in even considering what happens if i don't
[23:24:05] <boxscape_> fair
[23:24:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[23:25:40] <janus> it's interesting that the warning then suggests that people can have a duplicated mappend definition. because the addition of the superclass is more than 3 releases ago, so it shouldn't affect their reasoning that people may want to support not having Semigroup
[23:26:09] <janus> if the warning demanded that people remove the definition, it would be less churn once they remove mappend entirely
[23:27:22] <janus> maybe it is something that could be changed for 9.2.2?
[23:28:21] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Remote host closed the connection)
[23:29:09] *** Joins: jonatanb (~accio@31-178-144-108.dynamic.chello.pl)
[23:29:14] *** Quits: max22- (~maxime@2a01cb0883359800172da6e8deefe185.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[23:30:24] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c) (Read error: Connection reset by peer)
[23:30:25] <boxscape_> that's a good point
[23:30:40] *** Quits: joeyh (joeyh@kitenet.net) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:30:46] <janus> i'll create a bug if nobody has complained in 15 min :P
[23:30:53] *** Joins: joeyh (joeyh@kitenet.net)
[23:31:01] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:f9a9:132:7129:df1c)
[23:31:07] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Read error: Connection reset by peer)
[23:31:08] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (Quit: ...)
[23:31:08] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[23:31:17] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:31:26] *** Joins: sander (~sander@user/sander)
[23:31:27] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Remote host closed the connection)
[23:31:36] *** Joins: max22- (~maxime@2a01cb0883359800172da6e8deefe185.ipv6.abo.wanadoo.fr)
[23:31:44] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[23:31:51] *** Joins: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae)
[23:31:58] *** Joins: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net)
[23:32:56] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (Ping timeout: 265 seconds)
[23:32:57] *** Quits: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001) (Ping timeout: 265 seconds)
[23:32:57] *** Quits: moats (~oats@user/oats) (Ping timeout: 265 seconds)
[23:32:57] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (Ping timeout: 265 seconds)
[23:33:05] *** Quits: Logio (em@kapsi.fi) (Quit: Lost terminal)
[23:33:08] *** Joins: Guest|70 (~Guest|70@c-65-50-165-29.hs.gigamonster.net)
[23:33:25] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: acidsys (~LSD@2.lsd.systems) (Ping timeout: 265 seconds)
[23:33:45] *** Quits: tlax_ (tlax@kapsi.fi) (Quit: Lost terminal)
[23:33:52] *** Quits: jonatanb (~accio@31-178-144-108.dynamic.chello.pl) (Ping timeout: 264 seconds)
[23:33:54] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Ping timeout: 265 seconds)
[23:33:54] *** Quits: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045) (Ping timeout: 265 seconds)
[23:33:54] *** Quits: Tavi[m] (~factoidde@2001:470:69fc:105::1:819) (Ping timeout: 265 seconds)
[23:33:54] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (Ping timeout: 265 seconds)
[23:34:10] *** Quits: ent (entgod@kapsi.fi) (Quit: Lost terminal)
[23:35:09] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:03] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[23:36:17] *** Quits: trcc (~trcc@2-104-60-169-cable.dk.customer.tdc.net) (Ping timeout: 256 seconds)
[23:36:50] *** Joins: econo (uid147250@user/econo)
[23:37:10] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:53] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:40:14] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:40:57] *** Joins: cosimone (~user@93-47-231-139.ip115.fastwebnet.it)
[23:41:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk)
[23:43:27] *** Quits: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:44:26] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[23:44:35] *** Joins: ubert (~Thunderbi@p200300ecdf0ba218e6b318fffe838f33.dip0.t-ipconnect.de)
[23:45:08] *** Joins: jinsun_ (~jinsun@user/jinsun)
[23:45:55] *** Joins: acidsys (~LSD@2.lsd.systems)
[23:45:56] <janus> hmmm i think i know why: they want to mention exactly what would resolve the warning. it would be confusing if the warning were resolved by more than just what is recommended in its text. and the text does mention that removing the method is the best
[23:46:35] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[23:47:04] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[23:47:06] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[23:47:11] *** Joins: moats (~oats@user/oats)
[23:47:19] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[23:47:20] *** Joins: alex[m]121 (~alexchete@2001:470:69fc:105::1:1001)
[23:47:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-026.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[23:47:44] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[23:47:54] *** Quits: sm2n (~sm2n@user/sm2n) (Quit: Leaving)
[23:47:59] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[23:48:32] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[23:49:13] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[23:49:46] *** Joins: Tavi[m] (~factoidde@2001:470:69fc:105::1:819)
[23:49:56] *** Quits: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net) (Client Quit)
[23:51:17] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[23:51:18] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[23:51:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:51:53] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[23:52:14] *** Joins: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045)
[23:53:49] *** Joins: n8ess163 (~b@pool-72-80-171-162.nycmny.fios.verizon.net)
[23:55:18] *** Quits: kuribas (~user@ptr-25vy0i9nuu9joot4en6.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:56:49] <maerwald> jan
[23:59:07] *** Joins: yauhsien (~yauhsien@61-231-58-114.dynamic-ip.hinet.net)
[23:59:21] *** Joins: sm2n (ae95cb1267@user/sm2n)
