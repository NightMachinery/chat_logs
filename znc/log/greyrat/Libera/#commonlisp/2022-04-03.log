[00:16:36] *** Joins: tfeb (~tfb@88.98.95.237)
[00:18:23] *** Quits: Psybur (~Psybur@2600:1003:b1a9:25a8:9157:2734:89e6:c88e) (Ping timeout: 260 seconds)
[00:18:48] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[00:19:43] *** Joins: Psybur (~Psybur@137.sub-97-47-71.myvzw.com)
[00:25:09] <CodeBitCookie[m]> <mfiano> "I once waited a half hour for my..." <- Interesting, although I never had delays more than 1 minute.
[00:25:35] <CodeBitCookie[m]> one time it was 5 minutes, but mostly it's instantaneous.
[00:26:09] <CodeBitCookie[m]> beach: If you don't mind, I have a few questions about LispOS
[00:31:13] *** Quits: Psybur (~Psybur@137.sub-97-47-71.myvzw.com) (Ping timeout: 260 seconds)
[00:31:18] <CodeBitCookie[m]> jackdaniel: Also, how far have you gotten into converting McCLIM into material UI?
[00:33:33] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:33:38] *** Joins: Psybur (~Psybur@2600:1003:b103:720d:4903:f699:2ddf:4e24)
[00:34:11] <rotateq> CodeBitCookie[m]: I think you might have to wait a few more hours for answers. :)
[00:34:46] <CodeBitCookie[m]> rotateq: Yeah, just asking so that they can answer later.
[00:35:45] <rotateq> As I know him by now from here he will answer as he cares about new and motivated people.
[00:39:35] *** Quits: hhhh92 (~hhhh92@2804:14d:78b1:54b6::1005) (Quit: Leaving)
[00:39:57] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[00:45:53] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:47:07] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:48:39] *** Lord_of_Life_ is now known as Lord_of_Life
[00:50:53] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:51:31] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[00:53:55] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:54:28] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[00:56:11] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[00:59:12] *** Joins: akoana (~ah@user/akoana)
[01:01:30] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[01:02:50] <lucie22> https://youtu.be/_A4e72MDlsA
[01:04:58] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:06:22] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[01:09:00] *** Quits: Psybur (~Psybur@2600:1003:b103:720d:4903:f699:2ddf:4e24) (Ping timeout: 240 seconds)
[01:09:24] *** Joins: Psybur (~Psybur@2600:1003:b103:720d:4903:f699:2ddf:4e24)
[01:10:24] <rotateq> lucie22: Maybe the wrong channel? :)
[01:16:08] *** Quits: Psybur (~Psybur@2600:1003:b103:720d:4903:f699:2ddf:4e24) (Ping timeout: 260 seconds)
[01:17:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[01:18:48] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[01:25:46] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:27:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:29:05] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 246 seconds)
[01:38:09] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[01:39:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:46:57] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.4)
[01:50:43] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[02:00:28] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[02:02:16] *** Joins: Bike (~Bike@71.69.170.70)
[02:06:32] *** Joins: Psybur (~Psybur@2600:1003:b103:720d:e963:cba8:6a5a:3543)
[02:10:39] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[02:13:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:47] *** Quits: Inline (~Inline@p4fedb8e0.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:16:48] *** Joins: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[02:19:36] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 272 seconds)
[02:20:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:27:05] *** Quits: Psybur (~Psybur@2600:1003:b103:720d:e963:cba8:6a5a:3543) (Ping timeout: 252 seconds)
[02:31:05] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:36:38] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 246 seconds)
[02:40:18] <lucie22> https://youtu.be/UP_bes_kpbE
[02:40:31] *** Joins: lisp123 (~lisp123@143.238.171.43)
[02:40:48] * hayley wonders when Kandria went three-dimensional
[02:41:12] <lisp123> If I have a list of data (say 50 items) that I need to keep adding to, and I only need to access sequentially, is it better to use a LIST or VECTOR data structure?
[02:41:45] <lisp123> Shinmera: Thanks, will share on all socials
[02:41:48] <hayley> An adjustable vector would be faster for iteration, due to hardware raisins.
[02:42:02] <lisp123> hayley: Thanks
[02:42:40] <hayley> Well, I thought I had fixed a bug in websocket-driver, where it would use 100% CPU after the connection dropped out, but now my process crashes with a double-free. Makes sense, since (subseq "#commonlisp" 0 2) ⇒ "#c"
[02:44:12] *** Quits: lucie22 (~lucie22@host-109-88-209-116.dynamic.voo.be) (Quit: Connection closed)
[02:55:01] *** Joins: occ (~occ@user/occ)
[02:57:31] *** Quits: Madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: Using Circe, the loveliest of all IRC clients)
[03:00:21] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[03:02:55] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[03:07:39] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:10:05] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:11:13] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[03:12:11] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[03:14:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[03:14:22] *** Joins: lisp123 (~lisp123@143.238.171.43)
[03:17:36] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[03:18:11] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[03:18:35] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[03:18:49] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[03:28:26] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[03:29:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[03:30:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:46:26] <mfiano> lisp123: Cons cells may not be adjacent in memory. I wouldn't say this is a hardware reason.
[03:47:13] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 260 seconds)
[03:47:50] <mfiano> Any time you are adding onto a list, if you care about performance, you'll wait to maintain a tail pointer as to not traverse it, if append-semantics are important anyway.
[03:47:59] <mfiano> s/wait/want/
[03:48:10] <hayley> It has effects on cache utilisation (and paging, if your heap is big enough). Though the SBCL GC tries to line up cons cells when it can.
[03:48:59] <lisp123> mfiano: Thanks
[03:49:25] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[03:49:44] *** Joins: robin (~robin@user/terpri)
[03:52:03] <lisp123> Err what..."COMPILE-FILE-ERROR while compiling   #<IRONCLAD-SOURCE-FILE "ironclad" "src" "opt" "sbcl" "x86oid-vm">"
[03:52:14] <lisp123> Anyone see that before?
[03:53:38] <lisp123> Were there some breaking changes since SBCL 2.1.9
[03:56:29] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[03:58:55] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[03:59:00] <hayley> Quite possible, given the file name.
[03:59:59] <lisp123> hayley: Thanks, I assume so too..since it always used to work before (on higher versions). Very strange
[04:29:26] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 272 seconds)
[04:30:54] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[04:38:48] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[04:39:20] *** Joins: lisp123 (~lisp123@143.238.171.43)
[04:42:59] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[04:43:11] *** Joins: lisp123 (~lisp123@143.238.171.43)
[04:51:13] *** Joins: hashfunc1729 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[04:53:02] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[05:03:00] *** Quits: occ (~occ@user/occ) (Ping timeout: 272 seconds)
[05:21:22] *** Joins: notzmv (~zmv@user/notzmv)
[05:45:05] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[05:49:43] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:49:59] *** Joins: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de)
[05:50:08] *** Joins: Bike (~Bike@71.69.170.70)
[05:52:14] *** Quits: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:56:19] <hashfunc1729> i'm looking for an idiomatic strategy to grab every c/c++ header file in a directory
[05:57:10] <hashfunc1729> can someone point me in the right direction please?
[05:57:40] *** Joins: livoreno (~livoreno@user/notzmv)
[06:00:13] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 260 seconds)
[06:02:33] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[06:03:31] <hashfunc1729> it's all good. i found it: https://lispcookbook.github.io/cl-cookbook/files.html#finding-files-matching-a-pattern
[06:09:49] *** Joins: lisp123 (~lisp123@143.238.171.43)
[06:18:57] *** Joins: Inline (~Inline@p2e5790e6.dip0.t-ipconnect.de)
[06:20:56] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[06:21:27] *** Quits: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:25:58] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[06:29:53] <lisp123> So apparently MAKE-EA was removed in SBCL in 2.1.0, hence the error
[06:37:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[06:39:05] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[06:39:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:40:03] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[06:55:20] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[06:59:43] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:13:24] *** Quits: hashfunc1729 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 240 seconds)
[07:17:30] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:23:41] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:27:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[07:30:23] <beach> Good morning everyone!
[07:32:19] <semz> Good morning
[07:43:11] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[07:46:50] *** Joins: semz_ (~semz@user/semz)
[07:49:23] *** Quits: semz (~semz@user/semz) (Ping timeout: 252 seconds)
[07:49:57] *** Joins: Bike (~Bike@71.69.170.70)
[07:50:09] *** semz_ is now known as semz
[07:54:43] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:05:04] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[08:10:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:11:17] *** Joins: lisp123 (~lisp123@143.238.171.43)
[08:21:31] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:29:28] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:30:03] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:30:19] <lisp123> JZON is nice
[08:34:30] *** Joins: hashfunc1729 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[08:35:11] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[08:37:42] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 272 seconds)
[08:41:56] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[08:44:37] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[08:44:50] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 246 seconds)
[08:56:01] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[08:59:31] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:01:09] *** Joins: lisp123 (~lisp123@143.238.171.43)
[09:04:56] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 272 seconds)
[09:05:20] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:13:04] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[09:14:43] *** Joins: occ (~occ@user/occ)
[09:16:41] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 246 seconds)
[09:18:38] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:49:05] *** Joins: s-liao (~s-liao@101.86.164.158)
[10:00:11] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[10:00:37] *** Joins: lisp123 (~lisp123@143.238.171.43)
[10:00:40] *** Joins: occ (~occ@user/occ)
[10:03:30] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[10:05:43] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[10:14:12] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[10:35:42] *** Joins: ebrasca (~user@librepanther.com)
[10:45:54] *** Joins: lisp123 (~lisp123@143.238.171.43)
[10:49:37] *** Quits: hashfunc1729 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[11:02:16] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[11:06:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[11:13:12] *** Joins: notzmv (~zmv@user/notzmv)
[11:16:44] *** Quits: zachel (~zachel@user/zachel) (Quit: DIsconnected: v7+nano)
[11:18:32] *** Joins: igemnace (~ian@user/igemnace)
[11:18:49] *** Joins: zachel (~zachel@user/zachel)
[11:40:52] *** Joins: nature (~nature@mail.blazebone.com)
[11:41:41] <contrapunctus> o/
[11:42:58] <beach> Hello contrapunctus.
[11:46:37] <contrapunctus> hey, beach
[11:46:43] <contrapunctus> In today's episode of porting Elisp to Common Lisp...I've got mixin with slot `foo` . A class inheriting this mixin redefines `foo` with `:initform <default value>` . Now, when I `(make-instance 'my-subclass ...)` I get an object with _two_ slots called `foo` , one of which is nil and the other has the <default value> ...what's going on and what can I do here?
[11:47:03] <contrapunctus> got * a mixin
[11:47:43] <beach> Do the two slots have names in different packages?
[11:48:01] <beach> There can't be two slots with the same name in CLOS.
[11:48:46] <contrapunctus> Ah, yes, these classes are defined in different packages...
[11:49:58] <contrapunctus> I'm trying to define a default value of `foo` for all instances of the subclass...IIRC the recommended way to do that is to make a constructor, right?
[11:52:15] <beach> I am no longer in favor of constructors.  It is often the case that the class I like to instantiate depends on context, and a constructor fixes the class once and for all.  But they work fine for simpler cases.
[11:52:28] <beach> Then, what is wrong with an :INITFORM?
[11:54:37] <lisp123> package-a:slot-name might do the trick?
[11:54:58] <lisp123> where package-a is the package holding the class that is being inherited
[12:00:54] <beach> Also, a better technique than to redefine the slot might be to use :DEFAULT-INITARGS.
[12:04:01] *** Joins: dra (~dra@2a04:4540:640a:c500:7975:cd65:df3f:7b03)
[12:07:23] <rotateq> beach: I remember what you told me, one can change the superclass with using :DEFAULT-INITARGS in subclasses.
[12:08:45] <rotateq> lisp123: I see more into not exporting slot names in packages but their accessors.
[12:10:32] <lisp123> rotateq: i see
[12:10:33] <rotateq> And I adapted this style of prefixing slot names with #\%.
[12:12:24] <rotateq> So let's pray nobody defines accidentally a reader macro for #\%. :)
[12:12:30] <lisp123> lol
[12:13:16] <hayley> (set-macro-character #\% (lambda (s c) (declare (ignore s c)) (error "You posted abstraction violation, prepare to lose subscriber")))
[12:15:06] <jackdaniel> CodeBitCookie[m]: not far from implementing the specification; otoh many improvements in the codebase were made towards that goal
[12:20:26] <jackdaniel> I think that using slot-value already voids the warranty, so I wouldn't bother with using symbol other than the "main" accessor
[12:20:54] <beach> CodeBitCookie[m]: I don't mind questions about LispOS at all.
[12:21:51] <jackdaniel> re constructors (make-foo foo-class foo-initargs) may look like a silly duplicate of make-instance but when objects are immutable then you may memoize results so the same arguments will return eq objects
[12:22:17] <jackdaniel> (mind that this constructor takes the class as one of its arguments)
[12:22:50] <hayley> The SICL hash table library extends MAKE-HASH-TABLE to take a :CLASS argument.
[12:22:51] <jackdaniel> of course it is not always desireable
[12:23:20] <jackdaniel> interesting
[12:23:46] <hayley> e.g. (make-hash-table) would use the default class, whereas (make-hash-table :class 'your-hash-table:super-duper-magic-table) makes an instance of that class.
[12:24:02] <jackdaniel> yes, I can see the utility in that
[12:25:22] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[12:26:40] <contrapunctus> lisp123: thanks, exporting and importing the slot symbol did the trick
[12:27:08] <beach> contrapunctus: But that is a very bad idea, given that slot names are implementation details.
[12:28:39] <beach> contrapunctus: I should have said: But that is a very bad idea, given that slots are implementation details.
[12:29:40] <contrapunctus> Hm...constructors, then, I guess. I'm not sure `:default-initargs` suits this situation...
[12:30:00] <beach> Why wouldn't it?
[12:30:37] <beach> The purpose of redefining the slot seemed to be to give it an initial value in the subclass.
[12:37:35] <contrapunctus> beach: there are multiple subclasses, each with its own default value for the slot...
[12:38:07] <beach> Why is that a problem?
[12:42:35] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[12:43:35] <jackdaniel> when you have default initargs in a subclass, then they take the precedence over superclass's ones
[12:44:30] <rotateq> contrapunctus: That's the intention for using :DEFAULT-INITARGS, it gets overridden and the next subclass takes that new one as a default. :)
[12:45:26] <contrapunctus> oh, I see...I misunderstood 😅️ great, I'll try using `:default-initargs` . Thanks!
[12:45:30] <rotateq> jackdaniel: Sorry I had it typed and then checked better before saying in the slime buffer with a simple example, but it totally makes sense even by logic.
[12:47:16] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[12:48:43] <rotateq> I remember not long ago I didn't really get it and wasn't aware.
[12:53:02] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[12:58:39] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:59:13] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:01:08] *** Joins: attila_lendvai (~alendvai@2a02:ab88:7509:f780:ed82:a496:f55:e07b)
[13:01:33] *** Joins: shka (~herr@109.231.3.55)
[13:02:08] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:04:27] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[13:08:55] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[13:10:40] *** Joins: lisp123 (~lisp123@143.238.171.43)
[13:11:11] *** Quits: lisp123 (~lisp123@143.238.171.43) (Read error: Connection reset by peer)
[13:11:42] *** Joins: lisp123 (~lisp123@143.238.171.43)
[13:15:46] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[13:18:54] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[13:22:33] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Ping timeout (120 seconds))
[13:22:42] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 272 seconds)
[13:25:26] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[13:25:27] *** Quits: amk_ (~amk@109.255.169.126) (Remote host closed the connection)
[13:25:36] *** Joins: amk (~amk@109.255.169.126)
[13:30:45] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[13:36:39] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 260 seconds)
[13:54:59] *** Joins: lucie22 (~lucie22@host-109-88-209-116.dynamic.voo.be)
[13:55:58] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:58:41] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:00:00] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[14:04:39] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:14:19] *** Joins: knobo (~knobo@cCF845BC1.dhcp.as2116.net)
[14:15:38] *** Quits: rgherdt (~rgherdt@port-92-195-125-72.dynamic.as20676.net) (Remote host closed the connection)
[14:15:54] *** Joins: rgherdt (~rgherdt@port-92-195-125-72.dynamic.as20676.net)
[14:19:42] *** Joins: nature_ (~nature@mail.blazebone.com)
[14:20:07] *** Quits: nature_ (~nature@mail.blazebone.com) (Client Quit)
[14:29:01] *** Joins: artchad (~user@public-gprs225418.centertel.pl)
[14:30:26] *** Quits: knobo (~knobo@cCF845BC1.dhcp.as2116.net) (Ping timeout: 250 seconds)
[14:37:48] <artchad> Are there some guides on how to set up an allegro-serve server? I'm kinda fumbling my way around.
[14:38:13] <lisp123> i am suprised allegro doesn't have documentation on it
[14:38:22] <lisp123> check their website, they usually have the best documentation
[14:38:48] <lisp123> https://franz.com/support/tutorials/aserve-tutorial.htm
[14:39:06] <artchad> ok, let me see. I plan on proxying tor traffic to the server, so yeah. Also remotely interacting with the repl with tramp is also something I need to learn. xD
[14:39:32] <lisp123> so, I started using tramp a few days ago
[14:39:48] <lisp123> its pretty good. this was on AWS, Google Compute gave me too many issues
[14:40:33] <lisp123> But apparently, many like to install Terminal Emacs on the remote machine for long-lived work...which is a bit annoying (even after setting up emacs well). So now I just do everything in localhost and then will FTP over the files to the server
[14:41:43] <artchad> I've already installed emacs-nox, I'm trying to figure out all this stuff by just getting started.
[14:42:16] <artchad> but programming would be done on my main machine, while commiting or updating the repl on the remote machine somehow.
[14:42:22] <artchad> At least that's a workflow I would like to have.
[14:44:49] <lisp123> Yeah (I did local machine --> github private repo <---- pull from remote machine)
[14:46:04] <artchad> that seems like the most straight forward choice for me. The tricky part will be integrating allegro serve with the hidden service.
[14:46:10] *** Joins: mzan (~quassel@mail.asterisell.com)
[14:46:54] <lisp123> Good luck!
[14:48:20] <artchad> yeah, let's see. I've already played around with it and managed to make requests over Tor using drakma. How hard can it be to receive requests?
[14:48:46] <hayley> I don't recall it being too hard.
[14:49:38] <hayley> From memory, it's like any other reverse proxy, you just tell the Tor daemon(?) that you have a server on this port, and it'll work.
[14:50:08] <artchad> I'll give you an update once I get it working.
[14:50:13] <hayley> The only "issue" is that IP blocking will not work, for an obvious reason, and you risk blocking your Tor daemon by mistake.
[14:54:09] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[15:02:30] *** Quits: nature (~nature@mail.blazebone.com) (Quit: leaving)
[15:02:47] *** Joins: nature (~nature@mail.blazebone.com)
[15:03:30] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[15:07:35] <rotateq> hayley: Nice docu for your OMRN btw!
[15:07:59] *** Quits: nature (~nature@mail.blazebone.com) (Quit: leaving)
[15:08:47] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 256 seconds)
[15:08:47] *** Joins: nature (~nature@mail.blazebone.com)
[15:13:01] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 240 seconds)
[15:13:17] *** Joins: Psybur (~Psybur@2600:1003:b108:f292:c2b:a76d:9518:b609)
[15:23:07] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:33:27] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:33:43] *** Joins: lisp123 (~lisp123@143.238.171.43)
[15:38:34] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[15:44:08] <hayley> Thanks!
[15:54:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:55:05] <hayley> Should mention that one can now get one-more-re-nightmare from Quicklisp, if that is something one wants to do.
[15:56:38] <CodeBitCookie[m]> Hello Everyone!
[15:57:00] <CodeBitCookie[m]> I have a question; How can I read a binary file according to some rules?
[15:57:03] <CodeBitCookie[m]> I tried doing
[15:57:05] <CodeBitCookie[m]>  * I tried doing:
[15:57:41] * CodeBitCookie[m] sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/542c4470b6c47c07b54752d657610fa60b19e02b
[15:57:53] <CodeBitCookie[m]> Oops, a little error there.
[15:58:01] <CodeBitCookie[m]>  * ```... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/70acd1093c7a9c64e9a92e8c7f8458dc14d804ae)
[15:58:10] <CodeBitCookie[m]> Fixed.
[15:59:04] <beach> clhs open
[15:59:04] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_open.htm
[15:59:45] <hayley> "rules" as in you have some grammar to parse with? But, indeed, you will want to provide :element-type '(unsigned-byte 8) in the arguments to WITH-OPEN-FILE.
[15:59:45] <beach> Se the :ELEMENT-TYPE option.
[16:00:07] <CodeBitCookie[m]> Oh, thanks, let me try that.
[16:00:36] <CodeBitCookie[m]> It worked! Yayyyyy, thanks guys (*no-defun-allowed* ,beach )
[16:00:40] <CodeBitCookie[m]>  * It worked! Yayyyyy, thanks guys (no-defun-allowed, beach)
[16:00:46] <beach> Pleasure.
[16:00:54] <hayley> Sure.
[16:01:00] <beach> CodeBitCookie[m]: Like I said before I don't mind questions about LispOS at all.
[16:01:24] <CodeBitCookie[m]> beach: Oh yeah, so:
[16:02:35] <CodeBitCookie[m]> beach: If I intend to create an application for LispOS, lets say a file manager, What GUI framework would I use?
[16:02:46] <CodeBitCookie[m]> I saw A version of McCLIM you guys were trying to make
[16:02:50] <beach> McCLIM.
[16:03:04] *** Quits: Inline (~Inline@p2e5790e6.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:03:05] <CodeBitCookie[m]> Although that lacks presentation types.
[16:03:25] <hayley> I'd suspect CLIM is the only framework you could use (as it would have to be entirely written in Lisp). But it isn't essential for a Lisp operating system, per se.
[16:03:25] <CodeBitCookie[m]> So I would first have to complete making that version of CLIM 3
[16:03:34] <beach> It does not lack presentation types.  Those are the very basis of CLIM.
[16:03:49] <hayley> I've certainly used presentation types with McCLIM.
[16:03:51] <beach> You can safely forget about CLIM 3.
[16:03:57] <CodeBitCookie[m]> With all due respect, if that's the case, your OS would look quite ugly.
[16:04:05] <CodeBitCookie[m]> beach: Why?
[16:04:06] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[16:04:29] <CodeBitCookie[m]> beach: *no-defun-allowed*: beach I was talking about: https://github.com/robert-strandh/CLIMatis
[16:04:43] <hayley> The particular graphical style of McCLIM is also not essential to the CLIM protocol.
[16:04:49] <beach> CLIM 3 was an attempt by me to do something simpler when it looked like there would not be enough maintainers for McCLIM.  But that changed when jackdaniel took on the maintenance of McCLIM.  So CLIM 3 is dead.
[16:05:33] <hayley> beach: For what it's worth, your list of suggested programming projects links to <http://metamodular.com/Common-Lisp/gui-library.html> which gives out of date information, then.
[16:07:01] <CodeBitCookie[m]> beach: Interesting.
[16:07:03] <CodeBitCookie[m]> @be
[16:07:20] <beach> CodeBitCookie[m]: The way McCLIM looks is relatively easily fixable by anyone who knows a bit about graphic design (I am not one of those) but the program interfaces of other GUI frameworks are intrinsically broken and can't be fixed.
[16:07:35] <CodeBitCookie[m]> hayley: So is beach not using McCLIM?
[16:07:46] <beach> I am using McCLIM.
[16:07:58] <CodeBitCookie[m]> beach: Oh, I thought it was the other way around.
[16:08:20] <hayley> He is using McCLIM, but I mean using CLIM will not doom your applications to look as McCLIM currently does.
[16:08:48] <beach> CodeBitCookie[m]: The advantages of CLIM to Common Lisp programming are so great that I can't imagine using anything else.
[16:09:12] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[16:09:59] <CodeBitCookie[m]> beach: Wow, you are really sold on CLIM, Well, me too, but the non-cross-platform ability does it for me.
[16:10:15] <CodeBitCookie[m]> Or is that just a McCLIM thing?
[16:10:32] * hayley is not in #lispcafe, so cannot borrow gilberth's desk
[16:11:36] <CodeBitCookie[m]> Huh?
[16:11:58] <beach> CodeBitCookie[m]: You keep bringing up issues that are relatively easily fixable, many of which are being worked on.  But there is no alternative for me.  Other GUI frameworks are just a pain compared to CLIM.  By the time LispOS is a reality, McCLIM will have all those minor issues fixed.
[16:12:56] <beach> CodeBitCookie[m]: For one thing, most other frameworks are written in something other than Common Lisp, so that's just not an option for LispOS, or let's call it CLOSOS to be more specific that I am talking about my own design.
[16:13:08] <CodeBitCookie[m]> So beach, according to you, cross platformability is not a big issue? Or are you saying "minor" because they are easily fixable.
[16:13:20] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[16:13:40] <hayley> There is a joke in #lispcafe, where we swap desks for faceplanting into, and then say "Desk is fine, thanks".
[16:13:40] <beach> CodeBitCookie[m]: Define "cross platform"!
[16:14:23] <CodeBitCookie[m]> beach: It should Work on Atleast Windows and Apple devices for it to be called that. BSD is a plu
[16:14:24] <CodeBitCookie[m]> s/plu/plus/
[16:14:42] <beach> CodeBitCookie[m]: OK, let's see [takes a big breath]...
[16:14:45] <hayley> I think there is some amount of a Windows port for McCLIM. There is another CLIM implementation, but I don't know how portable (and/or useful) it is.
[16:15:10] <CodeBitCookie[m]> hayley: I know, although it isn't there yet.
[16:15:18] <rotateq> So that just depends on the backends it supports to keep things modular and on what the real CLIM abstractions build independently.
[16:15:23] <CodeBitCookie[m]> and I personally don't think that's a minor issue
[16:15:24] <hayley> "What platforms do you support?" "Oh, we got both platforms, we got GNU/Linux and the Lisp machine!"
[16:15:25] <jackdaniel> I have sdl port in the oven, it will be the second part of backend writing tutorial (concerned about input)
[16:15:35] <beach> CodeBitCookie[m]: There is nothing about CLIM or McCLIM that makes it impossible for it to work on all platforms.  I  don't care whether it does so know, because I don't work on other platforms.
[16:15:47] <jackdaniel> the output part will be published in days (I'm nailing details before letting it get proofreaden)
[16:16:04] <jackdaniel> so if sdl works on windows then there you will have it
[16:16:11] * jackdaniel gets back to family time
[16:16:23] <CodeBitCookie[m]> jackdaniel: Wow, that would be amazing! I am so excited for that.
[16:16:24] <jackdaniel> s/ugly/retro/ ;-)
[16:16:29] <jackdaniel> ciao
[16:16:32] <rotateq> jackdaniel: Enjoy. :)
[16:16:36] <CodeBitCookie[m]> I just can't
[16:16:41] <beach> CodeBitCookie[m]: I am a researcher, and I don't have the time or qualifications to create a finished product.  I can just demonstrate the feasibility of my suggestions, and then I have to count on other to make products, if the so desire.
[16:16:43] <CodeBitCookie[m]> jackdaniel: ^
[16:17:08] <beach> CodeBitCookie[m]: I certainly would not even imagine using a commercial operating system myself.
[16:17:23] <CodeBitCookie[m]> beach: I would be ready, but again, (aside from my studies) I can takeout some time if it stand out (CLOSOS)
[16:17:27] <CodeBitCookie[m]> s/stand/stands/
[16:17:41] <CodeBitCookie[m]> beach: True, although the majority of the world does.
[16:17:46] <beach> I don't care.
[16:17:50] <CodeBitCookie[m]> And if I make applications for the majority, I can't.
[16:18:07] <CodeBitCookie[m]> Maybe you don't, I can now see why.
[16:18:13] <CodeBitCookie[m]> beach: ;)
[16:18:49] <CodeBitCookie[m]> beach: Well, if you aren't aiming for the majority, who are you aiming for?
[16:18:58] <hayley> I write libraries for Common Lisp. Most people aren't programmers. Most programmers aren't Common Lisp programmers.
[16:19:15] <CodeBitCookie[m]> beach: Also, if you aren't using McCLIM, then what are you going to use?
[16:19:21] <hayley> Those are unfortunate observations, but I have observed them, and it does not bother me too much.
[16:19:22] <CodeBitCookie[m]> Or, are you using McCLIM?
[16:19:24] <rotateq> hayley: And most Common Lisp programers aren't designers. :)
[16:19:35] <beach> CodeBitCookie[m]: I am not in the game to make it easy for you or anyone else to write applications for Windows.  Again, I am a researcher, and my aim is to show that my ideas are feasible.
[16:19:40] <CodeBitCookie[m]> hayley: Interesting argument, can't argue with that.
[16:19:45] <hayley> rotateq: Hey, I like to think I can make nice looking websites.
[16:19:49] <CodeBitCookie[m]> rotateq: That is also true.
[16:19:53] <beach> CodeBitCookie[m]: I am using McCLIM for all my GUI programs.
[16:19:58] <hayley> But I don't get along with designers too well.
[16:20:34] <rotateq> CodeBitCookie[m]: The big advantage of McCLIM is that it's a free implementation of CLIM2 and with CLX it doesn't need any 3rd party dependencies to talk to an xserver.
[16:20:35] <CodeBitCookie[m]> hayley: Why?
[16:20:39] <CodeBitCookie[m]> beach: I see.
[16:21:04] <hayley> I don't think I have a good answer for why. It's not relevant for #commonlisp anyway.
[16:21:15] <random-nick> mcclim also runs on mezzano
[16:21:17] <CodeBitCookie[m]> beach: So are you saying, your goal, and everyone else who is working on the project is for YOU to prove that your ideas are feasible?
[16:21:35] <CodeBitCookie[m]> hayley: Hmmm.
[16:22:05] <beach> CodeBitCookie[m]: I can't speak for others.  Many people just pitch in because they think it's fun.
[16:22:07] <random-nick> it's very slow though, probably because all the drawing is done by mcclim and mezzano's clos implementation is just closette
[16:22:14] <rotateq> hayley: I don't doubt you can! :) As I like to think being able to let TeX typeset some nice documents for others (and me) but of course much work that is done automatically has been done by people who know this stuff very well. Or the font design not to forget.
[16:22:40] <CodeBitCookie[m]> beach: I mean, I don't think you have a strong enough argument to make people work on this.
[16:22:43] <hayley> There might be a tale for #lispcafe, still.
[16:23:04] <hayley> Is "this" referring to McCLIM or CLOSOS?
[16:23:19] <CodeBitCookie[m]> hayley: CLOSOS
[16:23:47] <beach> CodeBitCookie[m]: Apparently, I don't seem to need any arguments.  People just show up.  However, many of the applications I suggest are independently usable.  That's why I showed you that page.  But then you became interested in the OS part instead.
[16:24:20] <hayley> Well, I was convinced because I don't enjoy debugging operating systems. There are many different ways to probe at things, and some things just can't get probed at all too easily. But Common Lisp is quite uniform in doing that.
[16:24:56] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[16:25:10] <CodeBitCookie[m]> beach: I do, because, first of all, I am more of a systems-programmer and second, if i am making a file manager of an OS which doesn't have files and objects instead. My effort would be wasted.
[16:25:24] <CodeBitCookie[m]>  * beach: I do, because, first of all, I am more of a systems-programmer and second, if i am making a file manager of an OS which has objects instead of files.. My effort would be wasted.
[16:25:27] <CodeBitCookie[m]>  * beach: I do, because, first of all, I am more of a systems-programmer and second, if i am making a file manager of an OS which has objects instead of files. My effort would be wasted.
[16:25:32] <hayley> Similarly, I don't enjoy implementing persistence. So having persistence automatically saves a lot of hair-pulling for me.
[16:25:33] <CodeBitCookie[m]>  * beach: I do, because, first of all, I am more of a systems-programmer and second, if i am making a file manager of an OS which has objects instead of files.
[16:26:13] *** Joins: lisp123 (~lisp123@143.238.171.43)
[16:26:41] <beach> CodeBitCookie[m]: You are definitely welcome to work on parts of CLOSOS if you like.
[16:26:43] <mfiano> CodeBitCookie[m]: Please don't edit your messages.
[16:26:50] <hayley> I also like the goals of the SICL project, too.
[16:27:10] <beach> hayley: Thanks! :)
[16:27:11] <CodeBitCookie[m]> Also, beach I think crashing is basically a non-existant problem on some OS's like NixOS, which I have used for more than an year and have had NO crashes at ALL.
[16:27:27] <beach> CodeBitCookie[m]: Great!
[16:27:42] <CodeBitCookie[m]> mfiano: Why?
[16:27:47] <hayley> beach: Sure, but I hope that was implied when I went to work on it.
[16:27:56] <hayley> CodeBitCookie: Look how the edits appear on https://irclog.tymoon.eu/libera/%23commonlisp
[16:28:00] <beach> hayley: Yes, hence the smiley.
[16:28:00] <mfiano> CodeBitCookie[m]: The result is a flood of each edit being sent to IRC.
[16:28:17] <hayley> beach: Sorry. Must be too late for humour for me.
[16:28:36] <hayley> I'd recommend writing edits the olde way, as to not flood.
[16:28:52] <CodeBitCookie[m]> beach: beach: My point is not to mock your idea or anything, but to point out some things I had in mind, which seemed interesting and didn't have a reason I could think of which would be that important.
[16:29:22] <hayley> .oO( 24 hours ago, it was 11pm, now it is 10pm. Universal greeting time is a leaky abstraction )
[16:29:32] <CodeBitCookie[m]> the message was also for you to check out some ideas from NixOS since it has that database type thing you talked about in your paper.
[16:29:37] <beach> CodeBitCookie[m]: Let me assure you that I don't take anything you say as "mocking".
[16:29:52] <CodeBitCookie[m]> beach: Thank you.
[16:30:39] <CodeBitCookie[m]> hayley: Oh, well will try to avoid that.
[16:31:16] <CodeBitCookie[m]> beach: Also, even if a computer crashes, as you said in your paper:
[16:31:31] <jackdaniel> CodeBitCookie[m]: McCLIM is independent from SICL project and has an ambition to be a goto solution for cl gui developers
[16:31:48] <CodeBitCookie[m]> > Some programs, such as web browsers, compensate somewhat for this problem by
[16:31:48] <CodeBitCookie[m]> remembering the open windows and the addresses that were associated with
[16:31:48] <CodeBitCookie[m]> each window.
[16:32:03] <beach> CodeBitCookie[m]: That is way too lame.
[16:32:15] <CodeBitCookie[m]> Haha
[16:32:26] <beach> CodeBitCookie[m]: I guess it works for people who do nothing but surf the web.  I am not one of those.
[16:32:29] <CodeBitCookie[m]> But is that lame fixing worth the effort
[16:32:34] <hayley> YES!
[16:32:40] <CodeBitCookie[m]> And for an OS which hasn't crashed in an year?
[16:32:58] <beach> CodeBitCookie[m]: If you think the crashing problem is the main issue, you have missed a lot.
[16:32:58] <hayley> Well, whoever wrote <http://metamodular.com/Common-Lisp/lispos.html> apparently does nothing but surf the web. :)
[16:33:07] <CodeBitCookie[m]> so for a thing that happened once in an year, and caused about a minute of inconvenience, worth the effort for decades?
[16:33:16] <hayley> Yup.
[16:33:24] <CodeBitCookie[m]> beach: I don't
[16:33:26] <beach> CodeBitCookie[m]: The main issue is the application interface and the safety.
[16:33:27] <CodeBitCookie[m]> And I haven't
[16:33:52] <hayley> Also keep in mind that it's "a thing" that occurs for every computer ever created.
[16:34:03] <CodeBitCookie[m]> beach: I again, was not referring to it as the main reason for LispOS.
[16:34:27] <CodeBitCookie[m]> beach: as I said in this message:
[16:34:38] <CodeBitCookie[m]> <CodeBitCookie[m]> "beach: My point is not to mock..." <- ^
[16:34:46] <beach> CodeBitCookie[m]: Let me say this again: I am a researcher, and it is my job to see whether we can produce better stuff.  It can take decades if that is required, and it can fail, if it turns out the ideas are bad.  That's still what I do as a researcher.
[16:35:20] <hayley> But, for what it's worth, I do not like writing code to implement persistence, and I also do not like having to page in and out stuff from disk myself.
[16:35:42] <jackdaniel> bknr.datastore for the rescue
[16:35:43] <rotateq> CodeBitCookie[m]: Erlang systems are even more intended to not crash. So may depend what you really want to have/do.
[16:35:56] <CodeBitCookie[m]> hayley: Can you explain a bit more?
[16:36:05] <hayley> File systems are famously awful for performing transactional/atomic updates. The best option for transactional updates are often relational databases, but they exacerbate the problem of writing persistence code.
[16:36:54] <CodeBitCookie[m]> beach: Well, personally, I think that people should focus on researching something that would produce better, but have a lower limit on what better means.
[16:37:12] <CodeBitCookie[m]> I think LispOS is a valid point of making
[16:37:48] <CodeBitCookie[m]> but considering the time and effort, for something that would probably be proved wrong and bad on some things like you did for Unix.
[16:38:04] <CodeBitCookie[m]> s/wrong and bad on some things like you did for Unix./obsolete/
[16:38:18] <hayley> Perfection is the enemy of good. But "good enough" is the enemy of what we actually need.
[16:38:30] <CodeBitCookie[m]> Hahaha
[16:38:46] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[16:39:01] <rotateq> beach: I would say we all can be happy you have the time, money and motivation to be a researcher on those topics as we profit in the long run by that.
[16:39:22] <beach> CodeBitCookie[m]: I have the luxury of being able to work on whatever I see fit, and getting paid for it, and that's what I plan to continue doing.
[16:39:48] <CodeBitCookie[m]> beach: Okay, can't argue with, I will do whatever I want.
[16:39:51] <beach> rotateq: Thanks.  Either way, that's how (public) research works.
[16:39:56] *** Joins: Inline (~Inline@p200300cd473cee00b1553510cacfa527.dip0.t-ipconnect.de)
[16:40:02] <hayley> beach: Forgive me for asking, but didn't you say some time ago that you would have retired by now?
[16:40:37] <beach> Fair enough.  I no longer get paid to do research.  I get paid no matter what I do.
[16:40:54] <CodeBitCookie[m]> Haha
[16:40:55] <hayley> Oh, I see.
[16:41:35] <rotateq> Yes but someone (else) must see a benefit of it to pay for. Much money, time and brain power was/is wasted on many aweful things, not just computer science.
[16:42:40] <CodeBitCookie[m]> beach, *no-defun-allowed*: Well, what I am saying is trying to find out problems of LispOS and trying to fix that might be more fun for you.
[16:42:51] <CodeBitCookie[m]> It might also be more fun for other people.
[16:43:30] <CodeBitCookie[m]> Like you tried to fix the problems of UNIX, why don't you try to fix the problems of your theoritical CLOSOS?
[16:44:04] <CodeBitCookie[m]> Again, as you said beach, you'll do whatever you want.
[16:44:30] <beach> CodeBitCookie[m]: So far, I don't have enough experience with CLOSOS to see what the problems might be.
[16:45:23] <CodeBitCookie[m]> I think, sometimes, thinking about the problem might be better than even experience.
[16:45:37] <beach> That's what I do.  Full time.
[16:47:41] <CodeBitCookie[m]> Well, you were saying you don't have "experience" with CLOSOS, why don't you think about as if you have it.
[16:47:48] <CodeBitCookie[m]> like what you do.
[16:47:59] <CodeBitCookie[m]> just do it more.
[16:48:23] <CodeBitCookie[m]> Because, I think testing with a product is being an engineer more than a researcher.
[16:48:34] <CodeBitCookie[m]> s/with a/a/
[16:50:45] *** Joins: knobo (~knobo@cCF845BC1.dhcp.as2116.net)
[16:51:12] <CodeBitCookie[m]> beach: Well, I think I have gone a bit too far. Anyways.
[16:51:17] <beach> I am not smart enough for that.
[16:51:36] <rotateq> CodeBitCookie[m]: Maybe.
[16:52:20] <knobo> I have som probloems getting company completion to work with sly. If I type something, and press <tab>  (for example i type "(ql" and press tab), the first suggestion is %make-simd-pack-256-double
[16:52:37] <CodeBitCookie[m]> beach: I don't think so, but smart is subjective. That's why people collaborate more. I mean that would also further benefit CLOSOS and you. Do as you please.
[16:53:33] <rotateq> knobo: And with "(ql:"?
[16:53:33] <knobo> I'd like company to check if there is any packages that starts with "ql" and give me completion suggestions based on that.
[16:53:51] <beach> CodeBitCookie[m]: I am really puzzled by how much you care about what I do and how I do it.  Maybe one day I will understand.
[16:54:00] <knobo> "(ql:" gives completion suggestions from the ql package
[16:54:17] <rotateq> And that's not what you want? :)
[16:54:35] <knobo> no
[16:54:45] <mfiano> knobo: You are looking for simple-completions instead of flex-completions. The relevant setting to tweak is in the manual somewhere.
[16:54:59] <CodeBitCookie[m]> beach: Haha, well I don't care about what you do, I care about CLOSOS, and thus it's creator, you.
[16:55:09] <knobo> As I wrote, without the ":" I'd like company to suggest which packages are available
[16:56:41] <CodeBitCookie[m]> CodeBitCookie[m]: beach: I care more about the idea than you, but to change the idea, I would have to consult with someone who knows more about CLOSOS than anyone, and I think that would be you.
[16:56:47] <mfiano> knobo: (or maybe its flex. I forget which one does what; check the manual.)
[16:57:37] <CodeBitCookie[m]> My suggestion instead of action suggests that maybe I don't have the skill to research furthur, and so I suggest my ideas to you. To that you respond with a "I will do whatever I want". That seems interesting to me.
[16:57:57] <lucie22> https://youtu.be/EeVN4yd4-5o
[16:58:13] <CodeBitCookie[m]> lucie22: Bro, stop.
[16:58:19] <CodeBitCookie[m]> you keep sending random stuff here.
[16:58:20] <hayley> lucie22: stop posting cringe
[16:58:28] <CodeBitCookie[m]> *no-defun-allowed*: Agreed.
[16:58:58] <CodeBitCookie[m]> Anyways,
[16:59:10] <CodeBitCookie[m]> How do I loop through the entire file and turn that into bytes.
[16:59:15] <rotateq> hayley: like (for me) yesterday evening :D
[16:59:30] <hayley> You could use alexandria:read-file-into-byte-vector.
[17:00:37] <hayley> Alternately, use FILE-LENGTH to get the length of the file, make a suitable vector, and then READ-SEQUENCE. But I like not having to write the loop.
[17:00:57] <CodeBitCookie[m]> Okay, but the loop is good for more control
[17:01:18] <hayley> Which reminds me of the C++ class at university that I don't have to take. The poor students haven't learnt how to copy arrays without writing the loop explicitly, and they are not allowed to use any techniques that weren't covered in classes.
[17:01:42] <rotateq> hayley: Lucky you!
[17:02:09] <mfiano> Might need to specify an encoding, too. UTF-32 is evil, SBCL.
[17:02:28] <hayley> mfiano: It is a binary file, so there shouldn't be an encoding.
[17:03:35] <knobo> The manual does not explain how to add packages to the completion result
[17:03:42] <CodeBitCookie[m]> mfiano mfiano, *no-defun-allowed* is right.
[17:03:45] <hayley> I can't think of anything to control for reading a file. But generally I don't like having to write more code, since I can mess more up. And a friend wrote something like "for (int x = 0; x < N; x++) for (int y = 0; y < N; x++)", which would loop forever, and we needed to stare at it for a few minutes to find the bug.
[17:04:29] <hayley> ...for C++ homework. DOTIMES or LOOP in Common Lisp lets one avoid the bug systematically, though it might still be possible with DO.
[17:04:40] <CodeBitCookie[m]> Hahahaha
[17:04:51] <mfiano> An encoding specifies how binary data is represented, but fair enough. I don't use that alexandria function to know what it does without checking.
[17:05:44] <hayley> It reads a file, and returns a vector with element type (unsigned-byte 8) containing the contents of the file. No decoding is performed.
[17:05:52] <CodeBitCookie[m]> *no-defun-allowed*: So technically, mfiano the enoding would be a unsigned byte 8
[17:06:18] <CodeBitCookie[m]> so *no-defun-allowed*, each number is stored as 8 bytes?
[17:06:36] <CodeBitCookie[m]> since I have to get to the bits.
[17:06:39] <hayley> clhs unsigned-byte
[17:06:40] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/t_unsgn_.htm
[17:06:48] <CodeBitCookie[m]> and also little endian
[17:07:36] <CodeBitCookie[m]> Ohhh, > The type (unsigned-byte 1) is also called bit.
[17:07:39] <CodeBitCookie[m]> inside the CLHS
[17:07:42] <hayley> The integer is the number of bits used. So 8-bit "bytes".
[17:07:47] <CodeBitCookie[m]> so that means one byte.
[17:07:48] *** Quits: Psybur (~Psybur@2600:1003:b108:f292:c2b:a76d:9518:b609) (Ping timeout: 240 seconds)
[17:08:03] <hayley> And hence you don't have to worry about endian-ness, since you're already working at the level of bytes.
[17:08:29] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[17:09:15] <CodeBitCookie[m]> hayley: I mean, do I?
[17:09:32] <CodeBitCookie[m]> since I have to parse the binary as follows:
[17:09:35] <CodeBitCookie[m]> - each number is stored as a 16-bit little-endian pair (low byte, high byte)
[17:09:50] <CodeBitCookie[m]> I mean that's the binary format
[17:10:12] <hayley> You have to care when parsing, but not while reading the bytes into a vector.
[17:10:45] <CodeBitCookie[m]> Well, okay thanks, now, how do I parse?
[17:11:15] <hayley> rotateq: They let me skip C++ class, as I had already done it at another university. But they decided the computation models class at that other university was too easy. Go figure.
[17:12:55] <hayley> The first thing I find is <https://github.com/j3pic/lisp-binary> which reads from a stream.
[17:13:50] <rotateq> hayley: As you would have never done anything of way more difficulty.
[17:14:05] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 246 seconds)
[17:14:40] <CodeBitCookie[m]> *no-defun-allowed*: Is there any more manual way without a library?
[17:14:41] <hayley> It was odd, as I also handed in my work on the SICL compiler, and on regular expressions, for supporting evidence. But I've never published any C++ code (I think).
[17:16:07] <hayley> There is the NIBBLES library too, for reading larger integers from byte streams, but the way without a library would be to write something like (defun read-16-bits-little-endian (stream) (+ (read-byte stream) (ash (read-byte stream) 8)))
[17:17:14] <CodeBitCookie[m]> *no-defun-allowed*: Thanks!
[17:17:23] <pjb> I prefer to use (dpb (read-byte steam) (byte 8 8) (read-byte stream))
[17:17:55] <CodeBitCookie[m]> pjb: Can you explain that please?
[17:18:24] <hayley> Well, I prefer to not, but I was asked for how to do it without libraries.
[17:18:59] <CodeBitCookie[m]> *no-defun-allowed*: is dpb in a library?
[17:19:26] <hayley> No, dpb is a standard Common Lisp function. I mean that I would usually use NIBBLES.
[17:19:40] <CodeBitCookie[m]> Oh, I see.
[17:20:28] <pjb> CodeBitCookie[m]: ldb and dpb let you manipulate bit ranges in integers directly. You don't have to worry about mask and shifts, you just specify the range with (byte size position).
[17:20:43] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[17:20:50] <CodeBitCookie[m]> I seae.
[17:20:53] <CodeBitCookie[m]>  * I see.
[17:20:57] <CodeBitCookie[m]> Thanks pjb
[17:21:40] *** Joins: lisp123 (~lisp123@143.238.171.43)
[17:26:20] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[17:26:43] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:30:03] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[17:30:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[17:32:47] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[18:07:56] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[18:13:29] *** Quits: lucie22 (~lucie22@host-109-88-209-116.dynamic.voo.be) (Quit: Connection closed)
[18:25:23] *** Joins: john-a-carroll (~john-a-ca@79-66-128-18.dynamic.dsl.as9105.com)
[18:27:19] *** Joins: s-liao (~s-liao@101.86.164.158)
[18:30:54] *** Quits: ski (~ski@remote12.chalmers.se) (Quit: Lost terminal)
[19:06:54] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[19:08:43] *** Quits: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 256 seconds)
[19:09:29] *** Joins: s-liao (~s-liao@101.86.164.158)
[19:10:18] *** Joins: lisp123 (~lisp123@143.238.171.43)
[19:10:22] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[19:11:16] *** Quits: s-liao (~s-liao@101.86.164.158) (Client Quit)
[19:13:05] *** Joins: notzmv (~zmv@user/notzmv)
[19:15:28] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 272 seconds)
[19:18:00] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 272 seconds)
[19:18:13] *** Joins: psf (~pi@206.55.172.18)
[19:24:03] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:25:41] *** Quits: john-a-carroll (~john-a-ca@79-66-128-18.dynamic.dsl.as9105.com) (Quit: Connection closed)
[19:27:06] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:32:15] *** Quits: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[19:35:50] *** Joins: yauhsien (~yauhsien@61-231-37-33.dynamic-ip.hinet.net)
[19:39:30] *** Joins: Bike (~Bike@71.69.170.70)
[19:49:49] *** Joins: Bike_ (~Glossina@71.69.170.70)
[19:50:05] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[19:50:18] *** Bike_ is now known as Bike
[19:53:24] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 240 seconds)
[19:56:36] *** Joins: Psybur (~Psybur@2600:1003:b12f:917d:51b:ed39:8828:ea95)
[19:58:16] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[20:00:37] *** Quits: jmiven (~vpm@pham.algeb.re) (Quit: reboot)
[20:01:23] *** Joins: jmiven (~vpm@pham.algeb.re)
[20:07:03] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:07:29] *** Quits: dra (~dra@2a04:4540:640a:c500:7975:cd65:df3f:7b03) (Quit: Leaving)
[20:12:12] *** Quits: russe``` (~user@cl-user.org) (Quit: ERC (IRC client for Emacs 26.3))
[20:12:20] *** Joins: admich1 (~admich1@ip-156-96.sn-213-198.clouditalia.com)
[20:12:36] *** Quits: Psybur (~Psybur@2600:1003:b12f:917d:51b:ed39:8828:ea95) (Ping timeout: 240 seconds)
[20:15:49] <Bike> how do people usually include a resource/data type directory with their systems? i know there's asdf:system-relative-pathname, do people just use that?
[20:18:36] *** Quits: attila_lendvai (~alendvai@2a02:ab88:7509:f780:ed82:a496:f55:e07b) (Ping timeout: 240 seconds)
[20:22:13] *** Joins: john-a-carroll (~john-a-ca@79-66-128-18.dynamic.dsl.as9105.com)
[20:31:20] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[20:31:27] *** Joins: VincentVega (~user@212.97.4.213)
[20:34:26] <lagash> Whatever happened to LispForum.com? Hosting costs? Lack of interest?
[20:36:31] <artchad> Should I run the webserver REPL as root? Otherwise I get a permission denied error when trying to bind port 80.
[20:37:11] <artchad> I was hoping I could isolate the http server with a user called "lisper"
[20:37:24] <Guest74> Bike: I tend to use xdg dirs. I prefer settings/resources to be stored with each other and away from the code. Saves you the trouble of finding out where you are currently living.
[20:39:11] <lagash> artchad: what OS?
[20:39:23] <Nilby> artchad: A typical thing is to run a proxy with privieges, which forwards it to your lisp on another port.
[20:39:30] <lagash> artchad: and no, you shouldn't, that's a terrible security idea
[20:40:03] <lagash> if you're running Linux, there's some permission you could grant.. but yeah, a privileged proxy is a good idea
[20:41:04] <artchad> lagash:Alpine
[20:41:49] <artchad> oh, there is a tor HTTPTunnelProxy
[20:41:53] <artchad> thansk for the pointer
[20:42:24] <artchad> I'm trying to make aserver play with a Tor hidden serivice.
[20:42:31] <lagash> the dark web eh? :)
[20:42:43] <artchad> no need to pay the DNS mafia
[20:42:44] <Bike> xdg, huh... maybe...
[20:43:42] <artchad> I'm running a raspberry pi which will serve a minimalists website. I outsource the heavy media files and e voila a webserver practically for free.
[20:47:18] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 272 seconds)
[20:47:29] <scymtym> Bike: do you want to load the data at compile/load time or at runtime?
[20:47:36] <random-nick> asdf also has the :static-file component
[20:49:17] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Ping timeout: 252 seconds)
[20:51:46] <lagash> Can anyone recommend a "streaming" XML builder/writer? xml-emitter is somewhat wnat I'm looking for
[20:53:08] <Bike> scymtym: prrrrrobably just load time?
[20:53:09] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[20:56:44] <scymtym> Bike: i would just use something like (defvar *data* (alexandria:read-file-into-byte-vector (make-pathname :name "data" :type "bin" :directory '(:relative :up "data") :defaults *compile-file-pathname*)))
[20:57:38] <Guest74> I was a bit disappointed to see that nibbles doesn't seem to have a way to deal with nibbles. Or anything larger than 64bits.
[20:58:43] <Bike> simple, could work, thanks you two
[21:08:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[21:10:25] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:16:14] *** Joins: VincentV` (~user@212.97.4.213)
[21:17:55] *** Quits: VincentVega (~user@212.97.4.213) (Ping timeout: 256 seconds)
[21:23:51] *** Joins: treflip (~user@user/treflip)
[21:27:24] *** Joins: simendsjo (~user@84.211.91.241)
[21:27:50] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 272 seconds)
[21:28:19] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[21:28:46] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[21:29:35] <Nilby> I feel like no REPL respects ‘print’ or the old lisp way of printing.
[21:30:32] *** Quits: john-a-carroll (~john-a-ca@79-66-128-18.dynamic.dsl.as9105.com) (Quit: Connection closed)
[21:32:19] <Nilby> e.g. there's always a useless blank line
[21:34:45] <semz> Nilby: What do you mean?
[21:34:55] <Bike> Nilby: PRINT does a newline before writing out the object
[21:36:41] <Nilby> https://plaster.tymoon.eu/view/3013#3013
[21:38:19] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Remote host closed the connection)
[21:38:27] <Guest74> You want a repl that 'corrects' the standard?
[21:38:56] <Nilby> Guest74: No. Not at all.
[21:39:12] <Nilby> it seems like everyone gave in to the W.I.B. unix tty driver
[21:40:29] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[21:40:46] <Nilby> the part I have issue with is how repls read, and echo the input
[21:45:14] <contrapunctus> Is there any SQL generator in Common Lisp which does not have a hardcoded set of keywords it accepts? Similar to `emacsql` , and the opposite of SXQL or CLSQL.
[21:46:06] <contrapunctus> (Thinking of writing one if there isn't.)
[21:49:17] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[22:02:43] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 260 seconds)
[22:03:15] *** Joins: Psybur (~Psybur@2600:1003:b12f:917d:c456:4602:f034:984a)
[22:08:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[22:10:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:16:29] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 246 seconds)
[22:28:39] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[22:29:52] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:30:09] *** Joins: karlosz (~karlosz@47.151.152.149)
[22:32:27] *** Quits: Psybur (~Psybur@2600:1003:b12f:917d:c456:4602:f034:984a) (Read error: Connection reset by peer)
[22:32:46] *** Joins: Psybur (~Psybur@2600:1003:b12f:917d:c456:4602:f034:984a)
[22:36:11] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[22:42:58] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 260 seconds)
[22:46:29] *** Quits: knobo (~knobo@cCF845BC1.dhcp.as2116.net) (Quit: Client closed)
[22:46:47] *** Joins: lisp123 (~lisp123@143.238.171.43)
[22:51:42] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[22:53:07] *** Quits: VincentV` (~user@212.97.4.213) (Ping timeout: 256 seconds)
[22:55:09] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[23:00:53] *** Quits: cosimone (~user@93-47-228-79.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[23:02:43] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 260 seconds)
[23:02:52] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:05:22] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[23:06:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[23:07:56] *** Joins: aeth (~aeth@user/aeth)
[23:10:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:29:05] *** Quits: admich1 (~admich1@ip-156-96.sn-213-198.clouditalia.com) (Quit: Quit)
[23:30:23] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[23:30:23] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[23:34:38] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[23:46:23] *** Joins: akoana (~ah@user/akoana)
[23:59:54] *** Joins: Oddity (~Oddity@user/oddity)
