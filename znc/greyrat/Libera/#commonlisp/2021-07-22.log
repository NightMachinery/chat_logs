[00:01:55] *** Joins: makomo (~makomo@80.208.68.179)
[00:03:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:08:58] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[00:12:40] *** Quits: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com) (Quit: bye)
[00:14:20] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Read error: Connection reset by peer)
[00:14:51] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[00:36:38] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[00:37:19] *** Joins: amb007 (~a_bakic@202.246.204.77.rev.sfr.net)
[00:40:30] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:45:03] *** Quits: citizenajb (~citizenaj@216.13.217.230) (Quit: Client closed)
[00:47:44] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[00:50:56] *** Joins: zacts (~zacts@user/zacts)
[00:57:29] *** Joins: zacts33 (~zacts@user/zacts)
[00:58:04] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[00:58:42] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[01:01:34] <lisp123> Why does (member nil (list 1 2 3)) return nil and not (nil)?
[01:02:13] <lisp123> Is there some sort of override on the last cdr being nil not being recognised as an element? Is this why some functions require proper lists as inputs?
[01:03:57] <Bike> member checks cars, not cdrs
[01:04:02] <Krystof> no cdr is considered to be an element
[01:05:23] <aeth> list iteration for the most part is effectively doing MAPCAR with emphasis on CAR (well, in that case, MEMBER could be implemented with MAPLIST because it needs to return the sublist, but can't be implemented with MAPCAR, but it still mostly cares about the CAR)
[01:05:24] *** Quits: amb007 (~a_bakic@202.246.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[01:05:52] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:06:45] <lisp123> thanks Bike, Krystof, aeth
[01:10:18] <aeth> A possible implementation of MEMBER (excluding the keyword arguments) could be something like: (defun member* (item list) (maplist (lambda (sublist) (if (eql (car sublist) item) (return-from member* sublist) nil)) list) nil)
[01:11:24] <lisp123> aeth: thanks, that was going to be my next question
[01:11:41] <aeth> You could get what you want (MEMBER, but for potentially dotted lists) if you wrote a LOOP (or some other iteration) to behave similarly, but when you got to the last element, you returned the last element instead of NIL
[01:12:05] *** Joins: citizenajb (~citizenaj@216.13.217.230)
[01:12:06] <aeth> but even then '(1 2 3) would return NIL and it would only behave differently when provided with, say, '(1 2 3 . 4) where it would return 4 instead of erroring.
[01:12:22] <aeth> since it's '(1 2 3 . NIL) not '(1 2 3 NIL) so returning the CDR would just return NIL
[01:12:42] <edgar-rft> cdr doesn't seem considered to be an element: (member 4 '(1 2 3 . 4)) => type-error: the value 4 is not of type LIST
[01:12:52] <aeth> (the built-ins MEMBER, MAPCAR, etc., will just error when given a dotted list)
[01:13:26] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Read error: Connection reset by peer)
[01:13:41] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[01:13:42] <aeth> '(1 2 3 NIL) would return (NIL) in our hypothetical, while '(1 2 3 . NIL) i.e. '(1 2 3) would still just be NIL
[01:13:51] <lisp123> aeth: yes exactly
[01:14:06] <lisp123> aeth: I'm just wondering if (car sublist) would cause an error at any point
[01:14:36] <lisp123> and there is some check that the cdr is nil and then the function stops there (hence the requirement for list to a proper list)
[01:14:48] <aeth> it will error at some point: if it turns out that the last "sublist" is '(1 . 2) instead of '(1 . NIL)
[01:15:17] <lisp123> ah
[01:15:21] <aeth> MEMBER and the things that you could trivially implement MEMBER with (such as MAPLIST) check for a proper list at the very end, because it's more efficient that way.
[01:15:25] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[01:15:27] <aeth> You won't notice unless there's a side effect
[01:15:48] <lisp123> so basically because (car nil) is defined, it works --> but if the last item was 2 (as in your example), the error comes from (car 2)?
[01:15:50] <aeth> i.e. it's more efficient to assume that it's the correct input, and fail on the rare case when it's not, rather than slowing down the common path for the fast error path
[01:15:52] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[01:16:23] <aeth> lisp123: the error comes because '(1 . 2) isn't a proper list, so the sublist assumption is violated. You just won't find out until the final iteration
[01:17:12] <lisp123> aeth: (sorry to be obtuse), but that specific error occurs in the final iteration since car will no longer work on "2" as in your example?
[01:17:55] <_death> as an exercise, you can try to implement the basic MEMBER operation without using any of the existing mapping functions
[01:18:28] <aeth> lisp123: it doesn't work because list-iteration (or especially sequence-iteration that works on lists) tends to iterate until the CDR is NIL, so when that's not the case, the assumption has been violated. You usually have to work with dotted lists yourself.
[01:18:51] <aeth> worst case is actually infinite loop, never reaching the NIL. The built-ins are just friendly enough to fail with an error
[01:19:06] <lisp123> aeth: thanks, that was very helpful (esp the iterate until CDR is NIL part)
[01:19:09] <aeth> although I guess you'd (cdr '(1 . 2)) treat 2 as a sublist, then try to take the car/cdr of it and error
[01:19:13] <aeth> depending on how the iteration was written
[01:19:37] <aeth> unfortunately, there's a million and one ways to handle lists
[01:19:48] <lisp123> _death: I can now see the value of doing this, when I get time I'll try and re-implement the CL functions from scratch
[01:19:52] <antoszka> both proper and improper :)
[01:20:32] <aeth> right, what you'd want to do as an exercise (or for real, if you really need this behavior) is rewrite sequence/proper-list built-in functions on top of LOOP/DO/etc. to handle dotted lists
[01:20:56] <aeth> you lose elegance because now you're not sure that the CDR is a CONS-or-NIL, unlike a proper list.
[01:21:04] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Read error: Connection reset by peer)
[01:21:26] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:21:41] <lisp123> aeth: unfortunatley, there's a million and one ways to handle lists --> Indeed, it can get confusing at times. But at least today I finally learned WHY i needed to use proper lists (vs. just the standard says so)
[01:21:49] <aeth> oh, and you could also do tail recursion locally inside of LABELS (and arguably this is the most elegant way), it just won't be guaranteed to work, unlike in Scheme
[01:22:10] <_death> lisp123: actually it's very important that you do this and similar exercises if you plan on using Lisp, because they require you to learn and understand fundamental concepts
[01:22:14] <lisp123> within certain functions that is*
[01:22:52] <aeth> and sometimes abstractions do break down and you're just stuck working with raw sublists/CONSes inside of LOOP (or similar)
[01:23:05] <aeth> rare, but possible
[01:23:41] <aeth> you might also want to write your own cons-like thing, in which case you don't get access to any of the built-ins, but the API is well-known (so, foo-car, foo-cdr, foo-cons, etc.)
[01:24:32] <lisp123> _death: so much to learn, so little time ;) I've decided to go down the path of build first, fix later - it optimises the process and IMO one learns more from making mistakes and fixing them. Otherwise I would be stuck with too many books and concepts to read, and then forget it all anyway
[01:25:04] <lisp123> aeth: it sounds like an interesting project for when I have a holiday
[01:25:14] <_death> lisp123: this is not a good approach when it comes to concepts fundamental to Lisp, such as conses and atoms
[01:26:39] *** Quits: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:27:53] <_death> lisp123: the book ANSI Common Lisp is not long and contains good exercises.. the two first chapters are available on Graham's site.. there are other basic sets of exercises on the internet, such as "ninty nine Lisp problems" or "Lisp koans", though it's been a long time since I checked them out and I'm not sure about their quality
[01:27:53] <lisp123> _death: you are probably right :) I'll try and do it (re-do all the basic functions to understand how they exactly work) sooner rather than later
[01:28:49] <pve> didn't lisp koans get a make-over recently?
[01:29:02] *** Quits: zacts33 (~zacts@user/zacts) (Quit: Client closed)
[01:29:07] *** Joins: dsk (~dsk@user/dsk)
[01:29:11] <_death> pve: I remember phoe working on it, yeah
[01:29:24] <pve> oh yeah that's right
[01:33:27] *** Joins: zacts (~zacts@user/zacts)
[01:34:06] <lisp123> _death: thanks, I read that book. And I've been reading / re-reading CLTL2e a lot (have a hard copy on my desk :D). But this has been a very good discussion (thanks aeth in particular), since even the CLHS isn't 100% precise on the implementation details for MEMBER, a lot of it must be from other parts (quoting the CLHS: " each search list for item or for a top-level element that satisfies the test. The argument to the predicate function is
[01:34:06] <lisp123> an element of list." >>> which doesn't make the implementation 100% clear)
[01:34:56] <lisp123> so I now see the value of learning the implementation details as well :-)
[01:35:11] <_death> lisp123: the CLHS entry has a link to the traversal rules
[01:35:46] <_death> lisp123: if you read ANSI Common Lisp but didn't do the exercises, my advice is to go back and do them
[01:36:05] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[01:36:50] *** Joins: amb007 (~a_bakic@116.199.204.77.rev.sfr.net)
[01:36:56] <lisp123> _death: ok, let me do that
[01:38:05] <_death> (actually, the traversal rules link is not helpful.. but if you click on the "element" link to the glossary you can see what is meant)
[01:39:52] <lisp123> _death: thanks, where is that? I got to the traversal link but not to "element"
[01:39:53] *** Quits: amb007 (~a_bakic@116.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[01:40:09] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:40:23] <_death> http://www.lispworks.com/documentation/HyperSpec/Body/26_glo_e.htm#element
[01:41:38] <lisp123> _death: thanks! that was super helpful
[01:54:25] *** Joins: pegaso (~reis-r@131.72.121.77)
[01:54:46] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[02:01:36] *** Quits: pve (~pve@37-33-124-163.bb.dnainternet.fi) (Quit: leaving)
[02:01:56] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:02:27] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[02:06:47] *** Joins: silasfox (~sbv@165.56.184.158)
[02:11:45] <jcowan> yeesh, 7 definitions!
[02:16:03] <_death> probably missing some :)
[02:30:00] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[02:31:24] *** Quits: gaqwas (~john@dynamic-077-004-085-046.77.4.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:33:27] *** Quits: frgo (~frgo@p200300deef181d005042a47c27277884.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:33:35] *** Joins: frgo (~frgo@p200300deef181d00958e2a53dc12b65c.dip0.t-ipconnect.de)
[02:37:28] *** Quits: makomo (~makomo@80.208.68.179) (Ping timeout: 258 seconds)
[02:40:13] *** Quits: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Remote host closed the connection)
[02:42:12] *** Quits: silasfox (~sbv@165.56.184.158) (Ping timeout: 256 seconds)
[02:53:47] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[02:55:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[02:55:54] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 240 seconds)
[02:56:06] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 255 seconds)
[02:56:15] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 258 seconds)
[02:56:17] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 255 seconds)
[02:57:48] *** Joins: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se)
[02:58:10] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[02:58:49] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[02:59:00] *** Joins: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:04:03] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a44a:8604:b487:1d4e) (Remote host closed the connection)
[03:08:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[03:23:06] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[03:24:17] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:27:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[03:28:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:33:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[03:37:03] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Quit: Ping timeout (120 seconds))
[03:37:40] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[03:38:07] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[03:38:11] *** Joins: lad (~lad@user/lad)
[03:38:26] *** Joins: hexology (~hexology@user/hexology)
[03:44:36] *** Joins: cjb (~cjb@user/cjb)
[03:50:57] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 245 seconds)
[03:57:15] *** Joins: pjb (~pjb@user/pjb)
[04:02:26] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[04:04:57] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 255 seconds)
[04:10:44] *** Joins: pjb (~pjb@user/pjb)
[04:13:23] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[04:16:44] *** Quits: selwyn (~selwyn@user/selwyn) (Quit: Leaving)
[04:16:55] *** Joins: pjb (~pjb@user/pjb)
[04:21:39] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[04:24:38] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[04:26:37] *** Joins: pjb (~pjb@user/pjb)
[04:32:28] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[04:32:53] *** Quits: pegaso (~reis-r@131.72.121.77) (Quit: Leaving)
[04:35:34] *** Joins: pjb (~pjb@user/pjb)
[04:43:08] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[04:47:38] *** Joins: pjb (~pjb@user/pjb)
[04:51:21] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[04:56:29] *** Joins: pjb (~pjb@user/pjb)
[04:56:29] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[04:58:16] *** Joins: zacts (~zacts@user/zacts)
[05:04:56] *** Joins: pjb (~pjb@user/pjb)
[05:04:56] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[05:09:37] *** Joins: pjb (~pjb@user/pjb)
[05:14:35] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[05:18:09] <cheers> beach: i see; thanks for the update!
[05:18:29] <cheers> re: SICL, that is
[05:23:45] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[05:29:24] *** Joins: pjb (~pjb@user/pjb)
[05:29:24] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[05:32:32] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[05:35:00] *** Joins: yewscion (~yewscion@2601:547:a01:2900::a967)
[05:44:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[05:48:16] *** Joins: dsk (~dsk@user/dsk)
[05:50:37] *** Joins: pjb (~pjb@user/pjb)
[05:54:42] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[06:00:07] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[06:11:15] *** Joins: pjb (~pjb@user/pjb)
[06:11:15] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[06:16:50] *** Joins: pjb (~pjb@user/pjb)
[06:19:41] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[06:26:43] *** Joins: zacts (~zacts@user/zacts)
[06:30:35] *** Joins: zacts92 (~zacts@user/zacts)
[06:30:45] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 255 seconds)
[06:31:26] *** Quits: zacts (~zacts@user/zacts) (Killed (NickServ (GHOST command used by zacts92)))
[06:31:40] *** zacts92 is now known as zacts
[06:39:16] *** Joins: pjb (~pjb@user/pjb)
[06:42:30] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[06:45:08] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[06:46:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[06:46:40] *** Lord_of_Life_ is now known as Lord_of_Life
[06:51:11] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[06:57:17] *** Joins: pjb (~pjb@user/pjb)
[06:57:17] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[06:58:13] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[07:04:15] *** Joins: pjb (~pjb@user/pjb)
[07:16:29] *** Joins: prxq (~quassel@x4dbefb1e.dyn.telefonica.de)
[07:20:20] *** Quits: prxq_ (~quassel@x4db9618d.dyn.telefonica.de) (Ping timeout: 252 seconds)
[07:21:30] *** Joins: pillton (~user@118-211-28-190.tpgi.com.au)
[07:32:13] <beach> Good morning everyone!
[07:39:25] *** Joins: akoana (~ah@user/akoana)
[07:42:18] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[07:42:31] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[07:46:34] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[07:46:55] *** Joins: pegaso (~reis-r@131.72.121.54)
[07:52:17] *** Joins: cjb (~cjb@user/cjb)
[07:53:31] <PinealGlandOptic> beach: !
[07:57:30] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[08:02:53] *** Joins: derelict (~derelict@user/derelict)
[08:03:29] *** Joins: pjb (~pjb@user/pjb)
[08:03:29] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[08:09:05] *** Joins: pjb (~pjb@user/pjb)
[08:10:24] *** Quits: pegaso (~reis-r@131.72.121.54) (Quit: Leaving)
[08:15:30] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[08:19:29] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:27:05] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Quit: Leaving.)
[08:27:43] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[08:30:27] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 255 seconds)
[08:39:54] *** Joins: pjb (~pjb@user/pjb)
[08:46:54] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[08:48:18] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[08:54:00] *** Joins: pjb (~pjb@user/pjb)
[08:54:00] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[08:55:22] *** Quits: svillemot (~sebastien@rama.villemot.name) (Ping timeout: 240 seconds)
[08:57:55] *** Joins: svillemot (~sebastien@rama.villemot.name)
[08:59:26] *** Joins: pjb (~pjb@user/pjb)
[08:59:26] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[09:02:18] *** Quits: yewscion (~yewscion@2601:547:a01:2900::a967) (Ping timeout: 240 seconds)
[09:02:31] *** Joins: pjb (~pjb@user/pjb)
[09:10:01] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:10:09] *** Quits: citizenajb (~citizenaj@216.13.217.230) (Quit: Client closed)
[09:10:15] <susam> Good morning, beach!
[09:10:20] <susam> Good morning, everyone!
[09:16:23] <beach> Hello susam.
[09:17:11] *** Joins: ldb (~user@user/ldb)
[09:17:17] <ldb> good afternoon
[09:17:34] <beach> Hello ldb.
[09:33:30] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 246 seconds)
[09:38:20] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:38:32] *** Joins: cjb (~cjb@user/cjb)
[09:40:20] *** Quits: Inline_ (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:41:39] <beach> There are rumors that recent versions of the software produced by the Muse Group is spyware.  Perhaps this is a good time, then, to consider a Common Lisp implementation of an editor for music scores.  It is insane anyway to write such a program in C++.  We can do much better.
[09:44:21] <ldb> What is the difference between a music score editor and GNU LilyPond?
[09:44:47] <ldb> the later claims to be "music engraving program"
[09:45:15] *** Joins: isekaijin (~pyon@user/pyon)
[09:45:31] <beach> I think they are the same.  But as I recall, LilyPond is not interactive.
[09:46:24] <ldb> It is TeX underneath
[09:46:31] <beach> Right.
[09:46:34] *** Quits: isekaijin (~pyon@user/pyon) (Client Quit)
[09:48:01] *** Joins: isekaijin (~pyon@user/pyon)
[09:48:03] <beach> So the idea would be to create a CLIM/McCLIM-based interactive program that uses the new standard for music fonts, and the new (apparently excellent and free) implementation of that standard.
[09:48:13] <cjb> isn't there a nice GUI for lilypond that lets you input scores really fast?
[09:48:22] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[09:48:22] *** Joins: gaqwas (~john@dynamic-095-114-074-085.95.114.pool.telefonica.de)
[09:48:37] <ldb> like side by side preview
[09:49:26] <cjb> since it is TeX underneath, you can probably do something like this: https://castel.dev/post/lecture-notes-1/
[09:50:04] <ldb> I know someone who's writing a PDF lib from scratch, she says the ISO spec for the compression formats used in PDF along costs $9000
[09:50:20] <cjb> ouch!!
[09:50:29] <beach> I haven't followed the evolution of LilyPond.
[09:51:06] <cjb> looks like there a few 'easier' options here: http://lilypond.org/easier-editing.html
[09:51:21] *** Joins: pjb (~pjb@user/pjb)
[09:52:31] <ldb> I think lilypond is like a preprocesor to TeX, simplfies a lot of things of MusiXTeX
[09:53:00] <ldb> MusiXTeX is almost impossible for any pratical use.
[09:54:11] <edgar-rft> right, lilypond uses GNU Guile as a preprocessor for TeX, plus some C++ hacking to extend Guile
[09:54:30] <beach> I see absolutely no advantage of using TeX for typesetting music scores.
[09:55:14] <edgar-rft> lilypond is a hodgepoge of piled-up tools with not really clever design choices
[09:56:55] <edgar-rft> for example the current lilypond versions are still stuck with Guile 1.8 because all other Guile version afterwards make lilypond unbearably slow
[09:57:25] <beach> Wow.
[09:57:26] <ldb> beach: TeX resembles movable type, so it suits the aesthetics of retro enthusiasts
[09:58:32] <ldb> despite that, TeX is not designed for music ;)
[09:58:39] <beach> Exactly.
[09:59:15] <beach> The rules of music engraving are completely different from those of typesetting text, so I don't see what TeX can contribute.
[10:01:15] <edgar-rft> The lilypond developers mainly work in the music or typesetting/printing business, I think they choosed TeX because they didn't want to write their own typesetting program and choosed Guile because it was said to become the "standard GNU scriptiung language". I can ask on the mailing list if somebody needs details.
[10:02:21] <beach> Don't do it for me.
[10:02:40] <ldb> They are also former contributors to the MusiXTeX
[10:02:43] *** Quits: isekaijin (~pyon@user/pyon) (Quit: WeeChat 3.2)
[10:02:55] <beach> I think Common Lisp would be the ideal implementation language for an interactive score editor/engraving program.
[10:03:20] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[10:03:27] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:03:45] <edgar-rft> beach: that may be but have you the slightest idea how much work that is?
[10:03:49] <beach> I did Gsharp some time ago, but made some wrong design decisions.  Also, at the time, McCLIM was not as good as it is now.  And the font technology was not available.  Now is a good time to do something better.
[10:04:07] *** Joins: unyu (~pyon@user/pyon)
[10:04:35] <beach> edgar-rft: I am not entirely ignorant.  I have read up on all the rules of music engraving, and I have experience with Gsharp.
[10:05:07] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[10:05:20] <edgar-rft> beach: I didn't mean that I think you're stupid :-)
[10:05:40] <beach> Sure, stupidity and ignorance are not the same.
[10:05:43] <ldb> i'm getting interested, is there any reading I can do to start learning music engraving?
[10:06:02] <beach> ldb: Yes, there is a very good book.  Let me find it for you...
[10:06:35] <edgar-rft> beach: sure, I know *some* things but I'm ignorant in *most* others :-)
[10:07:08] <beach> ldb: https://www.goodreads.com/book/show/2779991-behind-bars
[10:07:39] <edgar-rft> ldb: there are papers from Werner Lemberg (main typesetter and music font designer of lilypond), gimme some seconds to look...
[10:07:50] <susam> Learnt about Gsharp now. Hadn't heard about it before. I have used LilyPond about 10 years ago and the PDFs it rendered looked very good. The Gsharp screenshots at https://common-lisp.net/project/gsharp/ don't look as good. I think I see a lot of aliasing.
[10:07:52] <beach> ldb: The trick is to encode those rules in software, while still allowing the user to tweak the layout when necessary.
[10:08:15] <beach> susam: Yes, the technology at the time wasn't good enough.
[10:09:05] *** Joins: pjb (~pjb@user/pjb)
[10:10:00] <edgar-rft> ldb: this is a description of the typesetting ideas behind lilypond -> https://lilypond.org/doc/v2.22/Documentation/essay/index.html
[10:10:17] <moon-child> cjb: side-by-side preview is not really 'interactive', particularly for tex which takes quite a while to render
[10:10:22] <beach> susam: Like I said, McCLIM is much better now.  We also have Common Lisp support for OpenType fonts, and we have a free OpenType music font that is apparently excellent.
[10:12:34] <susam> beach: Yes. That makes sense. I agree, a very good music score system can be made with CL.
[10:12:51] *** Joins: raeda (~raeda@72.49.219.33)
[10:13:03] <beach> This video is about the design of the new font: https://www.youtube.com/watch?v=XGo4PJd1lng
[10:13:42] <ldb> Btw, I just mentioned a lot of efforts need to be made to produce PDF. Any ideas on how to work on that with CL
[10:14:18] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[10:14:47] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[10:17:16] *** Joins: pjb (~pjb@user/pjb)
[10:25:08] *** Joins: asarch (~asarch@2806:10ae:7:b9e7:4bdc:cf0a:4221:7c6c)
[10:32:01] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.2)
[10:37:24] *** Quits: gaqwas (~john@dynamic-095-114-074-085.95.114.pool.telefonica.de) (Ping timeout: 258 seconds)
[10:44:45] <pillton> I think McCLIM has the ability to render to PDF.
[11:04:45] <jackdaniel> it can, also to ps and raster image
[11:09:35] *** Quits: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:15:54] *** Quits: asarch (~asarch@2806:10ae:7:b9e7:4bdc:cf0a:4221:7c6c) (Quit: Leaving)
[11:34:11] *** Joins: unyu (~pyon@user/pyon)
[11:36:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[11:36:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[11:41:26] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[11:43:20] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 258 seconds)
[11:48:08] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[11:50:56] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[11:52:51] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[11:57:41] <beach> We already have 25 or so issues for WSCL: https://github.com/s-expressionists/wscl/tree/main/wscl-issues/proposed and if anybody feels like adding more, please do so.
[11:57:46] *** Joins: pve (~pve@37-136-194-166.rev.dnainternet.fi)
[11:58:11] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:06:15] *** Quits: pillton (~user@118-211-28-190.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[12:19:44] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[12:20:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:32:34] *** Joins: shka (~herr@109.231.62.239)
[12:33:26] *** Joins: yewscion (~yewscion@2601:547:a01:2900::a967)
[12:33:39] *** Joins: cranium (~cranium@user/cranium)
[12:35:07] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[12:36:35] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:57] <pve> Hi, are there any examples of libraries or applications where, in order to compile the code, one needs to load the source code first (i.e. the lisp files) before compiling anything?
[12:38:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:17] *** Quits: yewscion (~yewscion@2601:547:a01:2900::a967) (Ping timeout: 255 seconds)
[12:44:28] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[12:46:24] <beach> Probably not.  It would be strange to organize the code that way.
[12:48:41] <flip214> pve: if reader macros are in use, they're needed to read other source files. CL-INTERPOL (used eg. for CL-PPCRE), or NAMED-READTABLES, or similar stuff comes to my mind.
[12:48:44] <beach> Oh, sorry, I thought you said "many" but you said "any".
[12:48:57] <beach> It is possible that there are a few such examples.
[12:48:58] <pjb> Well, some old application could have needed that. Basically, in Patchwork, which was developped in part in the image, had files with a lot of circular dependencies.  Loading everything before compiling would have helped compiling without error or warning.
[12:49:24] <pjb> But this is not clear. The first thing I did of course was to sort that out and write an asd file to compile it normally.
[12:50:05] <beach> flip214: You would do that by making sure the compiled file containing reader macros was loaded before the others.
[12:50:06] <pjb> So you only need to load (compiled) files before compiling other files when the former contain functions or other definitions needed at read-time or compilation-time of the later (reader-macros, functions used by macros, macros, etc).
[12:50:26] <beach> Exactly.
[12:50:28] <pve> yeah, I'm looking at "The Description of Large Systems" by Kent Pitman and get the impression that such code might exist
[12:50:42] <pjb> pve: let's say that you wouldn't aim at such a system…
[12:50:50] <pve> (probably old code)
[12:50:55] <pjb> Yes.
[12:51:23] <beach> pve: ASDF typically compiles and loads one file at a time, so as long as the order is respected, there should be no such issues.
[12:52:53] <pve> So I was curious to see if there's some case where doing things that way would be called for (maybe increased convenience..)
[12:53:27] <pve> thanks beach, pjb
[12:54:23] *** Joins: silasfox (~sbv@165.56.185.80)
[12:56:39] *** Joins: silasfox_ (~sbv@165.56.185.76)
[12:58:49] <beach> Sure.
[12:59:30] *** Quits: silasfox (~sbv@165.56.185.80) (Ping timeout: 252 seconds)
[12:59:33] *** Quits: silasfox_ (~sbv@165.56.185.76) (Read error: Connection reset by peer)
[13:00:37] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:90cb:df22:d8bd:d785)
[13:02:28] *** Joins: silasfox_ (~sbv@165.56.185.117)
[13:04:56] *** Joins: selwyn (~selwyn@user/selwyn)
[13:06:05] *** Joins: silasfox1 (~sbv@165.56.185.41)
[13:07:09] <pve> flip214: yeah, i guess you wouldn't need to wrap certain function calls, like (enable-some-reader-syntax ..), with an eval-when
[13:07:24] <cranium> re: music engraving in Lisp, I think https://opusmodus.com/ should be mentioned in this.
[13:07:26] <cranium> Also there's been a reddit thread summarizing other prior work: https://www.reddit.com/r/Common_Lisp/comments/lmjt6v/music_notations_in_cl/
[13:07:37] *** Quits: silasfox_ (~sbv@165.56.185.117) (Ping timeout: 245 seconds)
[13:08:40] *** Joins: silasfox_ (~sbv@165.56.185.61)
[13:11:14] *** Quits: silasfox1 (~sbv@165.56.185.41) (Ping timeout: 252 seconds)
[13:13:17] *** Joins: silasfox (~sbv@165.56.185.33)
[13:13:19] <lisp123> beach: Will SICL be a powered up version of ANSI CL (i.e. some new functionality that is covered by libraries currently) or is it focused mostly on portability?
[13:14:09] <moon-child> I do not see why you would put into the implementation functionality which could be put into libraries
[13:14:36] <moon-child> sicl is rather geared the other way around, with components designed to be reusable by other implementations
[13:14:59] <lisp123> moon-child: I realised today that the standard doesn't support custom equality tests for hash tables, so was wondering if this was something that could be extended into a new implementation without libraries
[13:15:16] <lisp123> moon-child: thanks for clarifying on what SICL will do
[13:15:41] <moon-child> lisp123: the problem you have there is portability
[13:16:17] *** Quits: silasfox_ (~sbv@165.56.185.61) (Ping timeout: 252 seconds)
[13:16:20] <moon-child> you don't want your code to be tied to a certain implementation
[13:16:44] <lisp123> moon-child: i agree :) that would be terrible (IMO)
[13:19:32] <lisp123> i just realised how stupid my question was :) ignore me (if a new implementation extended CL then it would no longer be portable)
[13:19:32] *** Quits: silasfox (~sbv@165.56.185.33) (Read error: Connection reset by peer)
[13:20:20] *** Joins: silasfox (~sbv@165.56.184.146)
[13:22:20] <moon-child> well, there is certain functionality overlooked by spec which must go into the implementation
[13:22:22] <moon-child> such as threads
[13:23:13] <beach> lisp123: The improvements are mostly in code maintainability and algorithms for various things including bootstrapping and generic dispatch.
[13:23:16] <moon-child> but the difference there is that threading is (somewhat--see boehm paper on c's (lack of) memory model) orthogonal to other language functionality.  Also that such extensions are generally abstracted over by generic libraries such as bordeaux threads
[13:23:49] <beach> cranium: Thanks for the links.
[13:25:29] <beach> lisp123: If there are good existing libraries, I see no reason to re-implement.  But mostly it's the other way around.  The SICL project will create new libraries that did not exist before like Clostrum, Trucler, Eclector, etc.
[13:25:48] <beach> ... as moon-child said. :)
[13:27:20] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[13:29:19] <beach> lisp123: The idea here is that these libraries could be used by other implementations to improve modularity and maintainability.  However, since we decided some time ago that there can be no "order" between the libraries, to actually use them natively in a Common Lisp implementation, something like SICL bootstrapping is required.
[13:29:43] <beach> And I haven't (yet) figured out how to make SICL bootstrapping usable in other implementations.
[13:31:13] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[13:33:20] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[13:38:42] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[13:41:15] *** Joins: Th30n (~Th30n@cpe-188-252-159-93.zg5.cable.xnet.hr)
[13:42:46] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[13:59:22] *** Joins: lotuseater (~user@p200300e787091b0081ef3b671857d89c.dip0.t-ipconnect.de)
[14:03:15] <lisp123> beach: thanks :-) thats great to hear
[14:03:32] <lisp123> moon-child: thanks also
[14:11:58] *** Joins: makomo (~makomo@80.208.68.179)
[14:12:56] *** Joins: asarch (~asarch@2806:10ae:7:b9e7:4bdc:cf0a:4221:7c6c)
[14:18:30] <asarch> With Caveman2, you can create a controller for a specific HTML request like: (defroute "/students/:id/information" (&key id) (let ((student (with-connection (db :school) (retrieve-one (select :* (from :student) (where (:= :id id))))))) (render #P"students.html" (list :student student))))
[14:18:52] <asarch> In the web app I am writing, I have ~163 controllers
[14:19:25] <asarch> In one of them I can use variables without actually "declaring" them
[14:20:04] <asarch> So, if I do: (setf tacos 10) without previously do a (let (tacos...) ..., SBCL does not complain
[14:20:10] *** Quits: zagura (~zagura@user/zagura) (Read error: error:1408F10B:SSL routines:ssl3_get_record:wrong version number)
[14:20:28] <asarch> How is that possible?
[14:21:34] <lotuseater> Good morning everybody :)
[14:21:35] <moon-child> perhaps the code is not getting compiled?  If you actually request a uri served by that controller, does it work?
[14:23:12] <asarch> Yeah, I even get the valor of 'taco' with a (format t "Valor de taco: ~d" taco)
[14:23:35] <asarch> This is from Caveman2 output log: [04:52:14] <DB> SELECT * FROM "idioma" ORDER BY "id" () [8 rows] | LACK.UTIL:FUNCALL-WITH-CB
[14:23:48] <asarch> And then my message: Valor de taco: 10
[14:24:04] <asarch> And then the request: 127.0.0.1 - [22/Jul/2021:04:52:14 -05:00] "POST /expresiones/buscar HTTP/1.1" 200 3867 "http://localhost:5000/expresiones/buscar" "Mozilla/5.0 (X11; Linux x86_64; rv:90.0) Gecko/20100101 Firefox/90.0"
[14:24:29] <moon-child> are you certain that 'taco' is not defined anywhere dynamically?  What if you read from 'taco' without assigning to it?  What if you use another name?
[14:25:58] <asarch> This the controller full code: https://pastebin.com/fPt4BUmV
[14:27:33] <asarch> This is how that code is rendered: https://pasteboard.co/KckDE9L.png
[14:28:06] <asarch> The controller works fine in spite of actually two variables (taco and indice) was not declared before
[14:28:48] *** Joins: zagura (~zagura@user/zagura)
[14:29:26] <asarch> Sorry, wrong image. This is the correct one: https://pasteboard.co/KckEr7g.png
[14:30:53] *** Quits: manicennui (uid349235@id-349235.tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:33:03] *** Joins: manicennui (uid349235@id-349235.tinside.irccloud.com)
[14:33:05] *** Quits: frgo (~frgo@p200300deef181d00958e2a53dc12b65c.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:33:34] *** Joins: frgo (~frgo@p200300deef181d00958e2a53dc12b65c.dip0.t-ipconnect.de)
[14:34:54] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[14:36:09] <asarch> No matter how many times I call that controller, it always works: https://pasteboard.co/KckGYVG.png
[14:38:23] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[14:43:56] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[14:44:25] *** Quits: frgo (~frgo@p200300deef181d00958e2a53dc12b65c.dip0.t-ipconnect.de) (Quit: Leaving...)
[14:46:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[14:47:36] <asarch> Would you consider this a critical bug of SBCL?
[14:48:02] *** Quits: danieli (~danieli@user/danieli) (Quit: Alpine Linux, the security-oriented, lightweight Linux distribution)
[14:48:19] *** Joins: danieli (~danieli@user/danieli)
[14:49:43] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[14:50:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:54:14] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 258 seconds)
[14:57:32] <asarch> Anyway, have a nice day. Time to bed :-)
[14:57:36] *** Quits: asarch (~asarch@2806:10ae:7:b9e7:4bdc:cf0a:4221:7c6c) (Quit: Leaving)
[15:02:12] *** Quits: Th30n (~Th30n@cpe-188-252-159-93.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[15:02:33] <lisp123> good night :-)
[15:06:42] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:11:07] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[15:11:34] *** Joins: amb007 (~a_bakic@100.199.204.77.rev.sfr.net)
[15:11:34] *** Quits: amb007 (~a_bakic@100.199.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:13:30] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:17:41] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[15:17:44] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[15:23:55] <kakuhen> good night
[15:23:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:24:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:25:15] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[15:26:24] <flip214> what's the easiest library to show a 2D-array of float data in an x11 window as a bitmap (with a color palette)?
[15:28:35] <jackdaniel> clx
[15:29:15] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[15:31:13] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[15:32:52] *** Joins: random-nick (~random-ni@87.116.182.181)
[15:33:46] *** Joins: notzmv (~zmv@user/notzmv)
[15:36:05] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:44:16] *** Quits: andreyorst (~andreyors@2.92.126.37) (Ping timeout: 246 seconds)
[15:51:43] <flip214> jackdaniel: thanks, do you have a small example?
[15:53:23] *** Joins: andreyorst (~andreyors@2.92.126.232)
[15:54:08] <flip214> I guess https://sharplispers.github.io/clx/Direct-Image-Transfer.html#Direct-Image-Transfer would be a good starting point
[15:54:46] *** Quits: makomo (~makomo@80.208.68.179) (Ping timeout: 252 seconds)
[16:03:21] <jackdaniel> flip214: you may see how mcclim sends pixmaps
[16:03:50] <jackdaniel> that said what I've meant is to draw directly on a drawable of the same size as the array
[16:04:17] <jackdaniel> if you already have precomputed array with integers, then use mcclim
[16:05:00] <jackdaniel> i.e (draw-design *standard-output* (make-patterny <array> (list +red+ +blue+ +pink+)))
[16:05:05] <jackdaniel> make-pattern*
[16:05:35] <jackdaniel> the above assumes that array elements are either 0, 1 or 2 and they have assigned +red+, +blue+ and +pink+ appropriately
[16:06:22] <jackdaniel> (this draw-design is expected to be invoked in the context of the running application frame)
[16:06:31] <flip214> jackdaniel: ack, will take a look
[16:06:34] <flip214> thanks!
[16:21:12] <jackdaniel> sure
[16:29:31] <flip214> mcclim from current QL doesn't (ql:quickload :clim-examples) for me
[16:29:45] <flip214> "Invalid initialization arguments: :CURRENT-LAYOUT, :REINITIALIZE-FRAMES in call for class #<STANDARD-CLASS COMMON-LISP:STANDARD-CLASS>."
[16:31:27] <jackdaniel> are you sure that you don't have stale fasls?
[16:32:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[16:32:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:35:18] *** Quits: sndr (~sander@user/sander) (Quit: So long! :))
[16:36:35] *** Joins: sander (~sander@user/sander)
[16:37:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[16:37:21] <jackdaniel> flip214: here is an example http://turtleware.eu/static/paste/80cf9813-flip214.lisp
[16:38:17] <jackdaniel> and a screenshot : http://turtleware.eu/static/paste/ec4a3bef-flip.png
[16:38:17] <flip214> jackdaniel: just did an QL:update-all-dists, so I don't think so.  thanks for the example!
[16:38:42] <jackdaniel> flip214: by stale fasls I mean old files in ~/.cache/common-lisp/
[16:39:08] <jackdaniel> they might be old because asdf did not realize some changes or because mcclim asd definitions are not correct
[16:39:40] <jackdaniel> because these changes were introduced in the same merge request, so these arguments are valid initialization arguments for the application frame
[16:40:44] <flip214> jackdaniel: The value 69/68 is not of type (OR (SINGLE-FLOAT 0.0 1.0) (DOUBLE-FLOAT 0.0d0 1.0d0) (RATIONAL 0 1)) [Condition of type TYPE-ERROR]
[16:40:54] <flip214> with your example
[16:41:04] <flip214> now recompiling everything, including sbcl
[16:41:14] <jackdaniel> recompiling sbcl is a bit excessive :)
[16:42:13] <jackdaniel> replace the last clause in make colors with (colors (make-rgb-color 1.0 1.0 (* i number)))
[16:42:58] <jackdaniel> (colors (make-rgb-color 1.0 1.0 (* i (/ 1 number)))) *
[16:43:54] <flip214> jackdaniel: no, wanted to update anyway
[16:50:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[16:58:00] <lotuseater> how do i correctly create a subclass to a built-in class, by providing (:metaclass built-in-class) to DEFCLASS. let's say (defclass safe-vector (vector) () (:metaclass built-in-class))
[16:58:17] <pjb> You can't.
[16:58:40] <pjb> That's the point of built-in-classes. If they could be extended by standard methods, they wouldn't be built-in.
[16:59:17] *** Joins: Bike (~Glossina@71.69.170.70)
[16:59:17] *** ChanServ sets mode: +o Bike
[16:59:18] <pjb> lotuseater: also, note how integer is a built-in-class. What's the meaning of subclassing integers? Make colored integers?
[17:00:30] <jackdaniel> (defclass them-money (integer) ((currency :initarg :currency :initform :pln)))
[17:00:33] <pjb> lotuseater: on the other hand, if you're an implementer, then you can always create more built-in-classes, and possibly deriving one from another, depending on how they're implemented.
[17:00:42] <lotuseater> sad :( but thx again
[17:00:58] <lotuseater> one must also learn about forbidden magic ^^
[17:01:33] <pjb> lotuseater: this also mean, that it's possible that some implementation let you do it, at least for some classes, using implementation level APi.
[17:01:57] <pjb> But it would not be wise to use that in an application or library…
[17:02:11] <lotuseater> so also disallowed first do (defclass internal-class (built-in-class)) ?
[17:02:43] <pjb> Indeed.
[17:02:57] <Bike> i don't know if it's disallowed to define a subclass of BUILT-IN-CLASS. defining a subclass of _a_ built in class (vector, number, etc) isn't allowed
[17:03:01] <lotuseater> okay :)
[17:03:36] <Bike> except that some implementations let you subclass SEQUENCE
[17:03:42] <jackdaniel> lotuseater: built-in-class is not the standard class so all bets are off regarding how it behaves, what would be a reason to subclass it?
[17:04:38] <lotuseater> but I was productive up to know and got ecl on raspberry work with quicklisp (as you advised me some days ago using setup.lisp) and compiled ccl, it just needed m4. but it's not obvious to me now how to link ccl for startup correctly
[17:05:48] *** Joins: ldb (~user@user/ldb)
[17:05:55] <lotuseater> pjb: subclasses of integer could many things be, starting with even or odd integers. ok or using (deftype even-integer () '(and integer (satisfies even-integer-p))) by wrapping #'even-integer-p in an eval-when
[17:06:14] <Bike> that's a type, not a class
[17:06:28] <lotuseater> jackdaniel: more theoretical question that came to my mind
[17:06:48] <lotuseater> Bike: i know, was meant as an alternative to subclassing integer
[17:08:02] <jackdaniel> lotuseater: mcclim presentation type system allows you to parametrize cl classes (even built-in ones)
[17:08:03] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[17:08:07] <jackdaniel> s/mcclim/clim/
[17:09:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:11:03] <pjb> If we were smalltalk. But even with smalltalk, there are usually optimizations that would break subclassing of integer and similar.
[17:12:48] *** Joins: Th30n (~Th30n@cpe-188-252-159-93.zg5.cable.xnet.hr)
[17:18:00] *** Quits: lotuseater (~user@p200300e787091b0081ef3b671857d89c.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[17:19:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:21:28] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[17:21:46] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[17:24:39] *** Joins: domovod (~domovod@176.196.122.197)
[17:24:56] *** Quits: domovod (~domovod@176.196.122.197) (Client Quit)
[17:25:18] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[17:28:44] *** Quits: pve (~pve@37-136-194-166.rev.dnainternet.fi) (Ping timeout: 265 seconds)
[17:28:44] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Ping timeout: 265 seconds)
[17:28:59] *** Joins: pve (~pve@37-136-194-166.rev.dnainternet.fi)
[17:29:05] *** Joins: makomo (~makomo@2a02:aa7:4606:5284:1a85:3275:1a35:4d90)
[17:29:23] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[17:31:23] <flip214> jackdaniel: can I eliminate the blinking, eg. via double-buffering or so?
[17:37:13] <jackdaniel> flip214: if you don't execute new commands then it shouldn't blink. that said - clx-fb backend has double buffering, "native" one has planned feature for that
[17:38:08] <jackdaniel> (let ((*default-server-path* :clx-fb)) (find-application-frame 'show-array :array the-array :own-process nil))
[17:39:45] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[17:43:48] *** Quits: specbot (~specbot@common-lisp.net) (Killed (NickServ (GHOST command used by specbot1)))
[17:43:57] *** Joins: specbot (~specbot@common-lisp.net)
[17:44:09] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[17:44:20] *** Quits: makomo (~makomo@2a02:aa7:4606:5284:1a85:3275:1a35:4d90) (Ping timeout: 256 seconds)
[17:44:26] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[17:44:29] *** Joins: cullsure_ (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net)
[17:44:50] *** Joins: specbot (~specbot@common-lisp.net)
[17:45:04] *** Joins: zephyr9 (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[17:45:22] *** Joins: jcowan_ (sid325434@id-325434.charlton.irccloud.com)
[17:45:25] *** Joins: manicennui_ (uid349235@id-349235.tinside.irccloud.com)
[17:45:58] *** Joins: susam_ (~susam@user/susam)
[17:46:03] *** Joins: derelict (~derelict@user/derelict)
[17:46:20] *** Joins: Shinmera- (~shinmera@shirakumo/shinmera)
[17:46:39] *** Joins: hexology- (~hexology@user/hexology)
[17:46:39] *** Joins: slyrus_ (~slyrus@135.180.166.51)
[17:47:14] *** Joins: lottaquestions_ (~nick@2607:fa49:5040:5c00:15ff:5298:25c8:dfb2)
[17:47:36] *** Joins: lonjil2 (~quassel@user/lonjil)
[17:48:37] *** Joins: Patternm1ster (~georg@li1192-118.members.linode.com)
[17:48:44] *** Quits: hexology (~hexology@user/hexology) (Ping timeout: 255 seconds)
[17:48:44] *** Quits: manicennui (uid349235@id-349235.tinside.irccloud.com) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: amk (~amk@176.61.106.150) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: lottaquestions (~nick@2607:fa49:5040:5c00:790d:d034:7297:4543) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: jcowan (sid325434@id-325434.charlton.irccloud.com) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: susam (~susam@user/susam) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: flip214 (~marek@h081217094109.dyn.cm.kabsi.at) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: sander (~sander@user/sander) (Ping timeout: 255 seconds)
[17:48:45] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: slyrus (~slyrus@135.180.166.51) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: cullsure (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: lonjil (~quassel@user/lonjil) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: minion (~minion@common-lisp.net) (Ping timeout: 255 seconds)
[17:48:46] *** Quits: dale (dale@user/dale) (Ping timeout: 255 seconds)
[17:48:47] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (Ping timeout: 255 seconds)
[17:48:47] *** Joins: flip214 (~marek@h081217094109.dyn.cm.kabsi.at)
[17:48:47] *** Joins: dale (dale@2600:3c02::f03c:92ff:feb4:61d1)
[17:48:47] *** manicennui_ is now known as manicennui
[17:48:47] *** jcowan_ is now known as jcowan
[17:48:47] *** zephyr9 is now known as zephyr
[17:48:48] *** Quits: dale (dale@2600:3c02::f03c:92ff:feb4:61d1) (Changing host)
[17:48:48] *** Joins: dale (dale@user/dale)
[17:48:50] *** Shinmera- is now known as Shinmera
[17:49:00] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[17:49:13] *** Joins: zacts (~zacts@user/zacts)
[17:49:17] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[17:49:21] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[17:49:24] *** Joins: minion (~minion@common-lisp.net)
[17:49:32] *** Joins: amk (~amk@176.61.106.150)
[17:49:37] *** Joins: sander (~sander@user/sander)
[17:50:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:50:14] *** Joins: igemnace (~ian@user/igemnace)
[17:51:20] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Ping timeout: 255 seconds)
[17:53:34] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[17:53:58] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[17:58:54] *** Quits: cullsure_ (~cullsure@pool-96-237-166-123.bstnma.fios.verizon.net) (Remote host closed the connection)
[18:00:43] *** Joins: makomo (~makomo@2a02:aa7:4001:842d:cabc:e673:cf8e:10b0)
[18:01:09] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:01:45] *** susam_ is now known as susam
[18:05:25] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[18:13:12] *** Quits: makomo (~makomo@2a02:aa7:4001:842d:cabc:e673:cf8e:10b0) (Ping timeout: 255 seconds)
[18:17:20] <jmercouris> just updated my quickdist and: http://dpaste.com/CK5BMYWD8
[18:17:22] <jmercouris> anyone any ideas?
[18:18:24] <jmercouris> anyone else have trouble compiling static-vectors?
[18:20:01] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[18:20:57] <beach> Do you have ASDF error when compilation gives warnings?
[18:21:06] <jmercouris> I do, I'm going to try something quickly before reporting that
[18:21:15] <jmercouris> just making sure I'm not doing something stupid by overriding a package somehwere
[18:21:20] <jmercouris> s/package/system
[18:21:32] <beach> You might want to disable that so that you can see where the warnings come from.
[18:21:34] <jackdaniel> (setf asdf:*compile-file-warnings-behaviour* :warn)
[18:23:31] <jmercouris> OK, false alarm, I was in fact doing something stupid... sorry for the noise
[18:28:53] *** Joins: makomo (~makomo@2a02:aa7:4600:8f44:afca:247b:908e:69b2)
[18:28:53] *** Quits: makomo (~makomo@2a02:aa7:4600:8f44:afca:247b:908e:69b2) (Client Quit)
[18:28:59] *** Joins: makomo (~makomo@2a02:aa7:4600:8f44:afca:247b:908e:69b2)
[18:29:58] *** Joins: dlowe (~dlowe@user/dlowe)
[18:30:19] *** Joins: zacts (~zacts@user/zacts)
[18:30:28] <dlowe> Does anyone have experience migrating from stefil to fiasco or is it just me?
[18:33:40] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[18:34:02] *** Joins: dlowe (~dlowe@user/dlowe)
[18:35:59] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[18:38:09] *** Joins: zacts88 (~zacts@user/zacts)
[18:41:01] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[18:41:05] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[18:41:41] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[18:49:35] *** Quits: makomo (~makomo@2a02:aa7:4600:8f44:afca:247b:908e:69b2) (Ping timeout: 252 seconds)
[18:51:13] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[18:51:26] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[18:52:03] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[18:54:56] *** Joins: dsk (~dsk@user/dsk)
[18:55:25] *** Quits: unyu (~pyon@user/pyon) (Read error: Connection reset by peer)
[18:58:49] *** Quits: Th30n (~Th30n@cpe-188-252-159-93.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[19:01:45] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[19:02:23] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[19:02:40] *** zacts88 is now known as zacts
[19:03:21] *** Joins: frgo (~frgo@p200300deef181d00cdc713606c64200b.dip0.t-ipconnect.de)
[19:09:52] *** Joins: selwyn (~selwyn@user/selwyn)
[19:12:14] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[19:12:49] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[19:16:17] *** Joins: unyu (~pyon@user/pyon)
[19:21:24] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[19:22:21] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[19:22:58] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[19:24:07] <jcowan> edgar-rft: Probably no one cares any more, but Guile 3's JIT makes it essentially as fast as Guile 1, so lilypond could be updated.  Although it would still run unbearably slowly on a Vax.
[19:29:01] *** Quits: zacts (~zacts@user/zacts) (Quit: Ping timeout (120 seconds))
[19:30:19] *** Joins: makomo (~makomo@77.241.129.45.mobile.3.dk)
[19:32:39] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[19:33:15] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[19:34:55] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[19:36:34] *** Joins: zacts (~zacts@user/zacts)
[19:38:16] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[19:41:02] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[19:41:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:42:42] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[19:43:18] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[19:45:14] *** Quits: makomo (~makomo@77.241.129.45.mobile.3.dk) (Ping timeout: 268 seconds)
[19:47:14] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:47:39] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:57:27] <beach> clhs use-package
[19:57:28] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_use_pk.htm
[19:57:36] *** Joins: makomo (~makomo@2a02:aa7:4007:8396:84b1:e5e9:aff1:a5cc)
[19:58:48] <beach> Tell me that the phrase "use-package checks for name conflicts between the newly IMPORTED [my emphasis] symbols, and those already accessible in package" is wrong.
[19:59:43] <Bike> sure looks wrong
[19:59:47] <beach> Thanks.
[20:00:13] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 250 seconds)
[20:00:29] <beach> The glossary says "import v.t. (a symbol into a package) to make the symbol be present in the package".
[20:00:29] *** Joins: cuz (~user@38.140.58.234)
[20:01:18] <beach> "use-package does not cause any new symbols to be present in package..."
[20:02:04] <beach> I'll turn it into a WSCL issue tomorrow I guess.
[20:03:47] <beach> Since I am now working on the package system, I am slowly convincing myself that the entire package system could be defined in an external library.
[20:04:01] <beach> The package system is relatively independent of other parts of Common Lisp.
[20:04:23] <beach> There are some minor interactions with symbols, like changing the home package of those symbols.
[20:05:06] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[20:07:51] <beach> Those interactions could be handled by the standard way that we have developed, i.e., the library has a generic function that it calls, and client code has to define a method on it.
[20:10:02] *** Joins: duuqnd_ (~duuqnd@89-253-114-156.customers.ownit.se)
[20:10:48] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Read error: Connection reset by peer)
[20:12:52] <xach> beach: i have a favorite example problem with the package spec...let me dig it up
[20:14:14] <xach> here it is: https://groups.google.com/g/comp.lang.lisp/c/iT9olHK7NkM/m/NOM2ZzuPcDQJ
[20:17:43] <lisp123> how to close slime when its in a infinite loop?
[20:17:48] <lisp123> without closing emacs
[20:18:25] <Bike> slime-quit-lisp, i think? usually i'd just restart it, and this is assuming C-c C-c isn't working
[20:19:38] <lisp123> Bike: My computer thanks you!
[20:22:22] <edgar-rft> jcowan: I's not neccessarily my opinion but the people on the lilypond mailinglist who frequently are running Guile tests say otherwise. As far as I know the main problem is that it's the unneccessary Guile "compile" step that slows everything down. Lilypond passes the Guile results directly to C++ and therefore needs a fast Guile *interpreter*, it throws away the compiled code anyway.
[20:24:29] <jcowan> Ah, yes.  If all code is throwaway, then a fast interpreter is indeed what you want.
[20:26:38] *** Quits: duuqnd_ (~duuqnd@89-253-114-156.customers.ownit.se) (Quit: Leaving)
[20:28:18] <pjb> beach: In my understanding, using a package doesn't import the (exported) symbols.
[20:28:33] <pjb> beach: so formally, the sentence is wrong.
[20:29:42] <beach> xach: I'll study the example.  Thanks.
[20:29:53] <beach> pjb: Right, thanks.
[20:30:03] <jcowan> It does, and en masse at that, which is why use is dangerous.
[20:30:09] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[20:31:02] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[20:33:12] *** Quits: makomo (~makomo@2a02:aa7:4007:8396:84b1:e5e9:aff1:a5cc) (Ping timeout: 256 seconds)
[20:36:58] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[20:37:11] *** Joins: srhm (~ascii@user/srhm)
[20:42:34] <beach> jcowan: What does what en masse?
[20:43:22] <jcowan> use-package imports the exported symbols of the package being used en masse, contra pjb's remark
[20:43:40] <beach> We just agreed that it does not import.
[20:44:05] <beach> I quoted the relevant passages from the Common Lisp HyperSpec.
[20:46:23] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Ping timeout: 255 seconds)
[20:46:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:47:11] *** Joins: makomo (~makomo@2a02:aa7:4004:8c9b:69f7:5f82:61ce:ce5)
[20:47:15] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[20:51:42] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Excess Flood)
[20:52:54] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[20:54:26] *** Quits: makomo (~makomo@2a02:aa7:4004:8c9b:69f7:5f82:61ce:ce5) (Ping timeout: 252 seconds)
[20:56:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:56:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[21:04:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:15:43] *** Joins: bpanthi977 (~Thunderbi@103.152.144.53)
[21:17:26] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[21:21:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:28:18] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[21:28:22] <lisp123> Is there a way to get the full call stack when calling a function? I have one with many nested loops & recursion and debugging is going slow
[21:29:42] <pve> lisp123: maybe "trace" would help?
[21:29:53] <_death> you can insert (break) where you want it to enter the debugger
[21:30:12] <lisp123> _death: thanks
[21:30:23] <lisp123> pve: how does that work?
[21:31:11] <pve> lisp123: (trace my-function), then call it
[21:31:33] <pve> and then later (untrace my-function)C
[21:32:50] <lisp123> pve: thanks, that also is very helpful, will experiment with it more now
[21:33:07] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:33:27] <pve> lisp123: I believe SBCL also allows (trace "MY-PACKAGE")
[21:33:58] <Bike> if you (declare (optimize debug)) appropriately you will probably get more complete call stacks, e.g. by preventing tail call optimization
[21:34:47] <lisp123> pve: thanks, let me try that too
[21:34:59] <lisp123> Bike: thanks, I'll add that to my file
[21:35:07] <pve> lisp123: you might get a lot of output
[21:37:25] <lisp123> pve: I got this https://plaster.tymoon.eu/view/2559#2559
[21:37:42] <lisp123> is there a way to step into any of the lines? the numbers seem to suggest so
[21:38:24] <pve> lisp123: you'll want to use (break) for that
[21:38:54] <lisp123> pve: many thanks :)
[21:38:59] <pve> and then hit 0 until you get to the one you want
[21:39:39] <pve> or break only when some condition is true
[21:40:26] <lisp123> will do
[21:45:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Connection reset by peer)
[21:45:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:46:42] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[21:46:45] *** Joins: gaqwas (~john@dynamic-095-114-074-085.95.114.pool.telefonica.de)
[21:49:24] *** Quits: dale (dale@user/dale) (Remote host closed the connection)
[21:49:45] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[21:50:14] *** Joins: dale (dale@user/dale)
[21:51:09] <pve> lisp123: are you aware that you can do all kinds of cool stuff in the slime debugger? (you probably are, just checking)
[21:52:43] *** Joins: makomo (~makomo@user/makomo)
[21:59:12] *** Joins: zacts (~zacts@user/zacts)
[22:04:20] *** Joins: dsk (~dsk@user/dsk)
[22:08:44] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 255 seconds)
[22:10:07] *** Joins: igemnace (~ian@user/igemnace)
[22:12:53] *** Joins: Krystof (~user@81.174.155.115)
[22:18:45] *** Joins: notzmv (~zmv@user/notzmv)
[22:19:54] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 240 seconds)
[22:21:54] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[22:24:03] *** Joins: domovod (~domovod@176.196.122.197)
[22:26:08] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[22:46:04] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[22:52:03] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[22:54:06] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[22:56:23] *** Joins: cuz (~user@38.140.58.234)
[22:58:51] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[22:59:41] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[23:00:50] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 252 seconds)
[23:02:53] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:09:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:32:50] <dieggsy> is there a manual way of checking a list of arguments against the acceptable parameter list of a function without actually calling it?
[23:33:26] <dieggsy> basically check if an apply will succeed (based on num args, keywords, etc.) before actually applying it
[23:36:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[23:38:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:39:24] *** Joins: kpoeck (~kpoeck@87.140.195.0)
[23:41:36] <Bike> dieggsy: no, for several reasons, first of which is that the implementation doesn't actually have to save the lambda list of a function
[23:42:43] <dieggsy> fair. a manual check it is then i suppose
[23:48:54] *** Joins: fourier (~fourier@customer-89-255-226-149.stosn.net)
