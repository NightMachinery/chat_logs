[00:01:45] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[00:16:29] *** Quits: TheAthlete (~TheAthlet@176.96.230.85) (Quit: Client closed)
[00:36:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[00:46:19] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: reboot)
[00:48:16] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[01:11:01] <japhb> m: with (1,2,3,4) { dd; dd .$ }
[01:11:01] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´block (;; $_ is raw)‚ê§(1, 2, 3, 4)‚ê§¬ª
[01:11:10] <japhb> m: with (1,2,3,4) { dd $_; dd .$ }
[01:11:10] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´(1, 2, 3, 4)‚ê§(1, 2, 3, 4)‚ê§¬ª
[01:24:51] *** Joins: younder (~younder@33.51-174-155.customer.lyse.net)
[01:28:40] <younder> I have problems with Compress:Zlib. I have a file in iso-latin1 and when it encounters a 8 bit character it goes into a infinate loop.
[01:29:30] <younder> I eventually gave up copied the file and unzipped it in the local directory.
[01:31:27] <younder> anyhow:
[01:31:38] <younder> Uploaded file: https://uploads.kiwiirc.com/files/bb6a47acff210f7604cd0d91155a0517/pasted.txt
[01:32:49] <younder> Uploaded file: https://uploads.kiwiirc.com/files/756063a91f61366b8dd01457cb2c446a/pasted.txt
[01:32:51] *** Joins: MasterDuke (~MasterDuk@94.0.188.131)
[01:35:24] <younder> "$line.encode("utf8").bytes == $line.chars" was needed to to filer ascii from iso-latin1
[01:36:14] <younder> That took a lot of time to figure out..
[01:38:10] <younder> s/filer/filter/
[01:44:37] <younder> Anyhow what is the story of 'leave' not implemented yet. Would be more belivable if it didn't work :)
[01:45:17] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[01:47:00] <younder> As i see it C(continue, break) -> raku(next, leave)
[01:47:48] <MasterDuke> last is break
[01:47:52] <moon-child> leave, not last?
[01:48:10] <moon-child> leave is return from blocks, I think, and still nyi
[01:49:46] <younder> That explains a lot..
[01:54:09] <younder> I thoght leave was like a goto where you jumped out of blocks except that you spesify the exit symbol before the nested loop rather than after. So leave without a symbol would be exit just the innermost loop.
[01:55:58] <guifa> it's most commonly used in subs as a sort of cleanup-ish thing
[01:56:26] <younder> yes.
[01:56:44] <guifa> m: sub calculate-something {¬†LEAVE say 'finished calculations'; return 'here are calculations' }; calculate-something() 
[01:56:44] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´finished calculations‚ê§¬ª
[01:57:00] <moon-child> well no leave is different from LEAVE
[01:57:24] <younder> of cource you have lEAVE to that or try {} CATCH {}.. there are many ways to do things
[01:58:47] <younder> yes, the all caps versions confused me. What is the difference?
[02:00:43] <younder> LEAVE {
[02:00:43] <younder> ¬† ¬† ¬† ¬† close $file;
[02:00:44] <younder> ¬† }
[02:01:47] <moon-child> LEAVE is a phaser.  leave is a not-yet-implemented directive which is similar to return except that it escapes blocks rather than subroutines
[02:03:50] <younder> I sort of got that from working with the code.
[02:05:04] <younder> Sorry to trouble you with a beginner like me, but the raku-beginner has practically no attendants.
[02:07:38] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[02:08:45] <younder> Why do you call it a phaser?
[02:09:34] <moon-child> I don't know why they're called that.  But see https://docs.raku.org/language/phasers
[02:09:36] *** Quits: xinming (~xinming@115.219.38.131) (Ping timeout: 250 seconds)
[02:11:19] *** Joins: xinming (~xinming@115.219.38.131)
[02:15:51] <younder> So raku has no character type, just string?¬† I needed a 'for $word.split('', :skip-empty) -> $ch {' .. to itterate over characters.
[02:16:29] <younder> and a integer.chr returns a string
[02:17:09] <moon-child> do you perhaps want comb?
[02:17:17] <moon-child> m: .say for "quux".comb
[02:17:18] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´q‚ê§u‚ê§u‚ê§x‚ê§¬ª
[02:17:32] <younder> perhaps like a 'go' rune..
[02:18:03] <moon-child> 'rune' is not well-defined given unicode
[02:18:14] <younder> nor is character
[02:18:18] <moon-child> yes
[02:18:25] <moon-child> (or, rather, it is well-defined but not to anything interesting)
[02:18:33] <moon-child> again: comb probably does what you want here
[02:20:35] <younder> Yes from the doc comb seems what I was after. thanks!
[02:22:03] <younder> Is comb more efficent than .split('', :skip-empty)?
[02:22:17] *** Quits: xinming (~xinming@115.219.38.131) (Ping timeout: 240 seconds)
[02:22:40] *** Joins: xinming (~xinming@115.219.38.131)
[02:23:44] <moon-child> seems so
[02:23:51] <moon-child> I would not worry too much about it though
[02:25:36] <younder> replaced it and it works..
[02:27:03] <MasterDuke> on a 50k line file, i get ~0.34s for comb()ing every line and ~0.45s for split()ting every line
[02:28:56] *** Joins: SqrtNegInf (~SqrtNegIn@97-113-165-109.tukw.qwest.net)
[02:36:11] <younder> Another thing I miss Python's 'x in [array] is there a better way than 'grep { $ch eq $_ }, @guessed'?
[02:36:32] <moon-child> x (elem) array or x ‚àä array
[02:37:52] <younder> thanks
[02:38:37] *** Quits: xinming (~xinming@115.219.38.131) (Ping timeout: 240 seconds)
[02:39:00] *** Joins: xinming (~xinming@115.219.38.131)
[02:42:07] <younder> ¬†'$ch (elem) @guessed' works..
[02:43:46] <younder> Well I have learned a lot. Thanks for your time.
[02:44:41] *** Quits: younder (~younder@33.51-174-155.customer.lyse.net) (Quit: Connection closed)
[02:54:41] *** Quits: sena_kun (~koto@94.142.239.45) (Ping timeout: 256 seconds)
[02:57:57] *** Quits: xinming (~xinming@115.219.38.131) (Ping timeout: 240 seconds)
[02:58:19] *** Joins: xinming (~xinming@115.219.38.131)
[03:19:06] <elcaro> .tell younder Phasers are contructs than can "fire" (get triggered) outside of the standard flow control. The ALLCAPS are to make them stand out because of this
[03:19:07] <tellable6> elcaro, I'll pass your message to younder
[03:20:05] <elcaro> .tell younder eg. and INIT block at the bottom of your script doesn't happen last... or you could have a single CATCH block handle _all_ exceptions in a script.
[03:20:06] <tellable6> elcaro, I'll pass your message to younder
[03:20:16] *** Joins: sena_kun (~koto@94.142.239.45)
[03:29:14] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Remote host closed the connection)
[03:36:16] <SqrtNegInf> Regarding the .$ construction: Looking at the QAST output for the code, it seems like an anonymous state variable is generated from the topic variable. They necessarily remain in lock-step through the loop.
[03:36:47] <SqrtNegInf> Not-half-bad as an obscfucation technique...
[03:37:05] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:40:35] <Geth> ¬¶ Raku-Steering-Council/main: b16f124c26 | (Geoffrey Broadwell)++ | minutes/20220122.md
[03:40:35] <Geth> ¬¶ Raku-Steering-Council/main: Add RSC meeting minutes for 2022-01-22
[03:40:35] <Geth> ¬¶ Raku-Steering-Council/main: review: https://github.com/Raku/Raku-Steering-Council/commit/b16f124c26
[03:42:40] <SmokeMachine> m: say .$ given 42
[03:42:40] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´42‚ê§¬ª
[03:43:31] <SmokeMachine> m: say .$++ for 1,1,1,1
[03:43:31] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Int:D); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§    (Int:D $a is rw --> Int:D)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§   ‚Ä¶¬ª
[03:44:21] <SmokeMachine> m: say .$++ for ($=1) xx 5
[03:44:21] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Int:D); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§    (Int:D $a is rw --> Int:D)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§   ‚Ä¶¬ª
[03:45:11] <SmokeMachine> m: my @a = 1 xx 5; say .$++ for @a
[03:45:12] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Int:D); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§    (Int:D $a is rw --> Int:D)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§   ‚Ä¶¬ª
[03:46:04] <SmokeMachine> m: say .$.VAR given 42
[03:46:05] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable $.VAR used where no 'self' is available‚ê§at <tmp>:1‚ê§------> 3say .$.VAR7‚èè5 given 42‚ê§    expecting any of:‚ê§        dotty method or postfix‚ê§¬ª
[03:47:13] <SmokeMachine> m: say .VAR given 42.$
[03:47:14] <camelia> rakudo-moar 2ee3a46e3: OUTPUT: ¬´42‚ê§¬ª
[03:55:05] *** Quits: sena_kun (~koto@94.142.239.45) (Ping timeout: 268 seconds)
[04:03:59] *** Joins: sena_kun (~koto@94.142.239.45)
[04:14:28] *** Joins: Summer (~summer@user/summer)
[04:17:36] <Summer> xx but as a metaoperator?, `(1..6).roll xx[max] 6  #6d6` or `("a".."z") xx[X~] 5` generating permutations
[04:18:06] <Summer> I get that it doesn't really match with the original intent of xx to be instantly reduced, but
[04:18:31] <Summer> ngl every time I use xx I instantly reduce it üëÄ 
[04:38:39] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[05:08:24] <leont> That's not really a metaoperator, is it
[05:23:06] *** Joins: frost (~frost@user/frost)
[05:29:45] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[05:33:57] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Ping timeout: 240 seconds)
[05:49:09] *** Joins: jaguart (~jaguart@119-18-28-11.77121c.mel.static.aussiebb.net)
[05:51:08] <jaguart> Anyone know why Raku is not on https://stackshare.io? I submitted it - but the submission failed because the slug is reserved. :(
[06:23:22] <Summer> its a metaoperator if it can wrap another operator, e.g. X~, X metaoperatorings around the ~ operator
[06:24:10] <Summer> X~ ~= X[~], need brackets since some operators are letters too
[06:25:28] <Summer> (and that would be, xx[X[~]] for duplicate, crossproduct, concat)
[06:35:46] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[06:37:47] *** Joins: razetime (~quassel@49.207.209.26)
[07:03:08] *** Quits: SqrtNegInf (~SqrtNegIn@97-113-165-109.tukw.qwest.net) (Quit: Leaving...)
[07:22:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[07:51:11] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:48:43] *** Quits: razetime (~quassel@49.207.209.26) (Read error: Connection reset by peer)
[08:54:16] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[09:36:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:37:26] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:50:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:17:49] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 256 seconds)
[10:22:48] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[10:47:33] *** Joins: TheAthlete (~TheAthlet@176.96.230.91)
[10:49:49] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:50:26] *** Joins: seednode99 (~seednode@user/seednode)
[11:06:32] *** Quits: qorg11 (~lain@2605:6400:c022:fa04::666) (Ping timeout: 240 seconds)
[11:07:56] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[11:19:05] *** Quits: jast (jast@zoidberg.org) (Remote host closed the connection)
[11:19:15] *** Joins: jast (jast@zoidberg.org)
[11:25:39] *** Quits: jrjsmrtn (~jrjsmrtn@ip-212-239-244-124.dsl.scarlet.be) (Quit: ZNC 1.8.2 - https://znc.in)
[11:26:13] *** Joins: jrjsmrtn (~jrjsmrtn@ip-212-239-244-124.dsl.scarlet.be)
[11:34:16] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:49:25] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:50:57] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 256 seconds)
[11:51:41] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[12:30:53] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[13:06:03] <discord-raku-bot> <Nemokosch#9980> I don't get the reasoning behind that hypothetical xx metaoperator
[13:07:58] <discord-raku-bot> <Nemokosch#9980> jaguart: what is "slug"? ü§î
[13:11:46] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[13:24:11] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[13:59:02] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[14:22:04] *** Quits: TheAthlete (~TheAthlet@176.96.230.91) (Quit: Client closed)
[14:28:06] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Read error: Connection reset by peer)
[14:36:33] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[14:36:34] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Read error: Connection reset by peer)
[14:42:32] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[14:43:27] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Read error: Connection reset by peer)
[14:44:22] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[14:45:16] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Read error: Connection reset by peer)
[14:45:51] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[14:46:46] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Read error: Connection reset by peer)
[14:47:21] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[14:47:21] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Read error: Connection reset by peer)
[14:53:16] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[14:55:09] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Read error: Connection reset by peer)
[15:01:22] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[15:22:10] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:27:55] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Remote host closed the connection)
[15:28:27] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[15:37:18] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:38:29] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:55:07] *** Joins: frost (~frost@user/frost)
[15:56:26] *** Quits: frost (~frost@user/frost) (Client Quit)
[16:00:22] *** Joins: fjlavado (~fjlavado@73.pool85-57-197.dynamic.orange.es)
[16:02:29] *** Quits: fjlavado (~fjlavado@73.pool85-57-197.dynamic.orange.es) (Client Quit)
[16:05:57] *** Joins: TheAthlete (~TheAthlet@176.96.230.105)
[16:24:11] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:34:05] *** Joins: frost (~frost@user/frost)
[17:14:29] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:14:40] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[17:16:49] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[17:45:56] *** Joins: frost (~frost@user/frost)
[18:25:07] <[Coke]> slug: "a part of a URL which identifies a particular page on a website in a form readable by users." ... though I never heard that before looking it up just now
[18:25:34] <[Coke]> guessing derived from the earlier "a line of type in Linotype printing.
[18:28:23] <[Coke]> (RSC minutes) "We are normal people" ?
[18:29:57] <El_Che> (are you all superheroes?)
[18:31:37] <[Coke]> I'm not arguing against that statement, just wondering why it's in the minutes. :)
[18:34:48] <El_Che> If I would be an alien from outer space I would say "we are normal people" all the time
[18:34:59] <El_Che> 3rd rock from the Sun plot :)
[18:42:17] <japhb> [Coke]: Because any time there's a committee or council or whatever and the general public doesn't have the opportunity to talk to them and determine they are normal people, they instead assume shadowy cabal.
[18:42:36] <japhb> Which I suppose given world history is probably not a horrible assumption.
[18:43:52] <japhb> El_Che: Yeah, I probably should have found a better way to write that than "WE ARE TOTALLY NORMAL, BELIEVE US" which comes out a little like "We come in peace!  (kill, kill!)"
[18:44:26] <japhb> Further proof for the "normal people" statement: I suck at this.  ;-)
[18:45:56] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[18:47:44] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:49:50] <[Coke]> Yah, that might have been edited too much and therefore lost clarity
[18:52:34] <[Coke]> Thanks for the explainer.
[18:57:31] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:59:55] <El_Che> Some of you I've known IRL for years (and probably all online for years)
[19:00:24] <El_Che> maybe it just means that the infiltration plots works with sleeping agents :)
[19:14:58] * guifa is still waiting for an in-person conference so he can meet everyone IRL
[19:15:47] <guifa> Looks like maaaybe finally P&R Houston but I know a lot of people won't be going in person for that
[19:16:35] <El_Che> just too early
[19:19:43] <guifa> Yeah.  It's just unfortunate for me that I started getting to the point of presenting at a conference right as the pandemic hit.  
[19:57:31] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:48:55] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[21:07:37] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 240 seconds)
[21:12:21] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Remote host closed the connection)
[21:18:55] *** Quits: dogbert11 (~dogbert@c83-253-59-194.bredband.tele2.se) (Quit: WeeChat 2.8)
[21:36:31] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:37:02] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:05:40] <tonyo> .
[22:37:02] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:43:09] <leont> We don't have Buf/Blob literals, right?
[22:45:39] <lizmat> nope
[22:46:06] <leont> NYI? Or deliberate?
[22:47:02] <lizmat> afaik there is no syntax for it ?
[22:47:21] <leont> qb/abcd/ would seem like the obvious option there
[22:47:49] <lizmat> I assume that would be a blob ?
[22:48:08] <lizmat> with an escape for / I assume ?
[22:48:09] <leont> Right now I either have to do 'abcd'.encode('ascii'), or Blob.new(65, 66, 67, 68). Neither is ergonomic.
[22:48:36] <lizmat> q:b:ascii then ?
[22:48:42] <lizmat> q:b:ascii/abcd/ then?
[22:49:35] <lizmat> assuming the default would be utf8 encoding ?
[22:50:20] <guifa> leont: you could probably do sub qb is pure ($s) {¬†$s.encode('ascii') }, and then the compiler could even do some of it for you
[22:52:13] <leont> I'm not entirely sure what the default encoding should be, but it should be one of those two for sure
[22:52:39] <lizmat> we do utf8 everywhere by default, so I guess.... 
[22:52:53] <leont> Fair
[22:53:04] <lizmat> and if you're just using ASCII characters, that shouldn't matter anyway
[22:53:17] <leont> Yeah, in the cases I've encountered so far the distinction wouldn't have mattered
[22:53:20] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[22:56:10] <guifa> leont: lemme see if I can resurrect the slang I had finally got working for binex.  It could probably be reworked fairly quickly to give you a nice way of entering in blob literals (including doing q:b/‚Ä¶/) or maybe 0x(‚Ä¶) for hex, 0a(‚Ä¶) for ascii, 0b(‚Ä¶) for binary, etc)
[22:56:38] * guifa has been playing with RakuAST the past 24 hours and is so excited for the future of so many modules 
[22:56:52] <lizmat> yeah, it's pretty cool, eh?
[22:57:16] <guifa> I think I need to write a RakuAST::Prettifier soon though :-) 
[22:57:46] <lizmat> yeah, I'm sorta torn on that
[22:58:12] <lizmat> on the one hand, it should be easy to simplify a lot of constructs
[22:58:40] <lizmat> otoh, it would be yet another language to learn, document and maintain
[22:58:52] * leont wants a RegexBuilder when RakuAST lands. I've needed that in at least two modules already.
[22:59:16] <lizmat> I think you already can do that in RakuAST, I seem to recall
[22:59:21] <lizmat> to an extent, anyway
[23:00:08] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[23:02:08] <guifa> lizmat I think of it only really as a way for quick visualization of what's going on
[23:02:35] <guifa> (or did you mean for a binary quoting construct?) 
[23:03:23] <lizmat> no, I meant the RegexBuilder idea
[23:07:02] <lizmat> in any case, if anybody would like to tackle .assuming in RakuAST  :-)
[23:11:02] <gfldex> I'm looking forward to assume fastness. :)
[23:11:04] <guifa> That would really just involve pulling out an element or two from the parameter list and adding a new lexical that's bound to the args in .assume(‚Ä¶), yeah?
[23:11:18] * guifa is probably missing a LOT of complexity there
[23:11:22] <lizmat> basically, yeah  :-)
[23:11:49] <lizmat> problem is that parsing the core should be far enough so that you can interact with stuff that was parsed by the default parser
[23:12:22] <lizmat> at the moment, you can't do that yet very well, because the bootstrap is only half-way so to speak
[23:12:27] <guifa> ah
[23:12:55] <lizmat> so you don't have a RakuAST to work on, to start peeking and poking on  :-)
[23:14:14] <guifa> I suppose in the meantime you could do a QOD pointy block that just recalls the original, reordering/inserting arguments as necessary.  But the stack trace would be off if it errored
[23:16:50] <guifa> I think the other thing that's really cool about RakuAST is I'm seeing a lot of potentially to actually REALLY make Raku a polyglot
[23:19:27] <guifa> Imagine being able to do sub-fortran {¬†print *, "Hello, World!" } 
[23:21:10] <gfldex> Do you intend to grow heads faster then out enemies can swing a sword?
[23:21:32] <guifa> I mean‚Ä¶¬†
[23:22:07] <gfldex> It's one head per glot, isn't it?
[23:22:22] <gfldex> Anything else would be a mouthfull!
[23:22:56] * guifa . o O ( neckful? )
[23:28:17] <guifa> I don't actually know how well fortan code could be done, given that it'd involve GOTOs and that doesn't quite align so well with how Raku compiles (although I think the synopses intended that there be a goto)
[23:28:42] <leont> I don't think fortran is the useful kind of polyglotery, it's DSLs that are
[23:30:18] <guifa> leont: agreed.  I just think it's one of those "look what can be done" things.  My work is primarily going to be towards a the binary regex
[23:32:41] <gfldex> There is plenty of Fortran code out there, that was written for slowputers. If we provide the companies that are affected with a nice escape hatch, we might be able to win a few hearts.
[23:33:39] <guifa> My understanding is that people still write Fortran, particularly in the science community where speed is king
[23:34:47] <guifa> (partly because history/tradition, partly because Intel and friends have extremely hyper optimized fortran compilers available )
[23:42:59] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[23:43:06] <gfldex> There is plenty of business software with reporting in 7-bit ASCII. I'm confident we can handle that.
[23:45:04] *** Joins: morte_ (~user@190.104.116.153)
[23:54:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:144d:71e8:f3fd:20f1)
