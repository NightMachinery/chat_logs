[00:14:12] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:15:47] *** Joins: shka (~herr@109.231.0.226)
[00:15:52] <shka> https://www.icd10data.com/ICD10CM/Codes/V00-Y99/V95-V97/V97-/V97.33XD
[00:16:10] <shka> nomnomnomnom https://i.pinimg.com/564x/93/3b/85/933b850a48717fa0c3781f6b310d7bac.jpg
[00:21:58] <selwyn> there was nearly a big crash in dubai the other day
[00:22:14] <shka> what kind of crash?
[00:22:17] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:22:36] <selwyn> https://onemileatatime.com/news/emirates-terrifying-boeing-777-flight-washington/
[00:22:42] <ck_> selwyn: would you write about that training strategy as well?
[00:23:03] <selwyn> i have lots of things to write about
[00:23:07] *** Joins: hayley (~theemacss@user/hayley)
[00:24:00] <selwyn> which training strategy?
[00:24:23] <ck_> the one you alluded to earlier, neuroscience, never felt so strong
[00:25:06] <selwyn> there is already much written about this
[00:25:10] <selwyn> i have little to add
[00:26:22] <selwyn> one of the main principles for example is 'neurons that fire together wire together', except applied to exercise
[00:27:05] <selwyn> in practice it means that you do as many repetitions as you can, spaced throughout the day, without ever going to exhaustion (which is bad)
[00:27:59] <ck_> got it
[00:28:23] <selwyn> it is called 'grease the groove'
[00:29:20] <ck_> oh right, that's what I used to do with rings, and pull-ups
[00:29:30] <selwyn> oh you know it
[00:30:17] <ck_> not under that name, I just thought it was a good idea
[00:30:48] <selwyn> gtg is very compatible with wfh
[00:31:35] <ck_> yes
[00:32:03] <ck_> I need to get new rings actually, made the mistake of buying ones that are too much of a hassle to set up
[00:32:14] <ck_> so I left them outside and they disintegrated over time
[00:32:27] <selwyn> :/
[00:32:47] <selwyn> i have decent rings but i don't really have a good place to set them up
[00:33:08] <ck_> wood or plastic?
[00:34:03] <selwyn> higher quality plastic i would say
[00:35:39] <ck_> that's what I'll get next time, hoping they can survive the great outdoors a little longer
[00:35:53] <selwyn> you have wooden rings?
[00:35:57] <ck_> had
[00:36:05] <selwyn> hm
[00:36:18] *** Joins: sp (~sp@user/susam)
[00:41:04] <ck_> I think it was these. Hanging them with that sort of strap requires feeding the entire belt through the buckle each time https://www.decathlon.de/p/turnringe-crosstraining/_/R-p-171418
[00:41:16] <ck_> anyway, what other topics would you be writing about?
[00:41:30] <selwyn> i have the same straps
[00:41:30] <ck_> scientific? culinary? philosophical?
[00:41:31] <selwyn> uh
[00:41:38] <selwyn> all of those i guess
[00:42:27] <selwyn> i wanted to do some quantum natural language processing this break, and possibly prepare an els submission
[00:42:32] <selwyn> but its not a good time for it
[00:42:36] <ck_> I'm interested in those things and would subscribe to your newsletter
[00:42:52] <ck_> yes, I suspect you're engaging in what we call "escapism", no? :)
[00:43:04] <ck_> or maybe productive procrastination
[00:43:07] <selwyn> well, i am resisting
[00:43:11] <selwyn> work restarts tomorrow
[00:43:42] <ck_> mine as well. can't say I'm looking forward to it that much
[00:46:25] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[00:47:20] <ck_> not much rest&recovery during this christmas period.. or in general. it feels like march 753rd, 2020
[00:52:04] <Aurora_v_kosmose> Welcome to 2020 II
[00:55:06] <selwyn> lol
[00:58:26] <selwyn> they are planning for 25% absentee rates at work
[00:58:29] <selwyn> real wartime shit
[00:59:44] <Aurora_v_kosmose> And ultimately, the vast majority of the work not being done... wasn't actually necessary to start with.
[01:00:22] <selwyn> well, the most noticeable effect is train cancellations
[01:00:37] <selwyn> leading to more crowded trains...
[01:01:50] <Aurora_v_kosmose> The whole thing about "required employees" is messed up considering how many such positions really aren't required nor anywhere near mandatory.
[01:01:53] <selwyn> but yes, much work is not necessary
[01:02:12] <Aurora_v_kosmose> Corruption at work.
[01:02:24] <Aurora_v_kosmose> Heh. Pun unintended but welcomed.
[01:02:50] <selwyn> 'jobs for the boys' are important
[01:02:56] *** Joins: sepanko (~sepanko@user/sepanko)
[01:03:25] * Aurora_v_kosmose coughs half their lungs out in [doubt]
[01:03:37] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:04:16] *** Quits: random-nick (~random-ni@87.116.167.125) (Quit: quit)
[01:05:01] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:05:51] <ck_> just press x next time
[01:06:06] <Aurora_v_kosmose> heh
[01:06:21] <Aurora_v_kosmose> Which game did that come from actually?
[01:06:30] <ck_> LA Noire I believe
[01:06:52] <Aurora_v_kosmose> Huh, older than I thought.
[01:06:52] <semz> indeed
[01:08:30] <ck_> Aurora_v_kosmose: this came through the feed, maybe you're interested https://wiki.tcl-lang.org/page/SplineEditor
[01:09:31] <ck_> and what do you mean "older than you thought"? Isn't it from 2011, that's practically yesterd.. FUCK
[01:09:44] <Aurora_v_kosmose> ck_: I thought it was from Detroit Become Human
[01:10:08] <ck_> oh, right
[01:13:23] <pl> ck_: it's 2020-05-673, iirc
[01:14:59] <ck_> I just pulled a number starting with 7 out of thin air, don't judge me
[01:15:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:18:45] *** Joins: random-nick (~random-ni@87.116.180.98)
[01:18:54] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Read error: Connection reset by peer)
[01:18:54] *** Quits: hayley (~theemacss@user/hayley) (Read error: Connection reset by peer)
[01:18:55] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[01:18:55] *** Quits: sepanko (~sepanko@user/sepanko) (Read error: Connection reset by peer)
[01:18:59] *** Quits: sp (~sp@user/susam) (Read error: Connection reset by peer)
[01:18:59] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Read error: Connection reset by peer)
[01:18:59] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[01:20:11] *** Joins: sepanko (~sepanko@user/sepanko)
[01:20:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:22:55] <pl> Mo judgement, just sharing of pain 
[01:22:56] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[01:22:56] *** Joins: sp (~sp@user/susam)
[01:23:10] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[01:23:10] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:23:10] *** Joins: hayley (~theemacss@user/hayley)
[01:23:23] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:23:29] <selwyn> captains log stardate 6345347
[01:23:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:30:39] *** robin_ is now known as robin
[01:44:12] *** Quits: sepanko (~sepanko@user/sepanko) (Quit: Client limit exceeded: 20000)
[01:45:15] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Client limit exceeded: 20000)
[01:46:24] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Client limit exceeded: 20000)
[01:46:25] *** Quits: sp (~sp@user/susam) (Quit: Client limit exceeded: 20000)
[01:46:55] *** Quits: hayley (~theemacss@user/hayley) (Quit: Client limit exceeded: 20000)
[01:48:46] <semz> These have to be the two weirdest functions in CL: http://www.lispworks.com/documentation/HyperSpec/Body/f_short_.htm
[01:48:53] *** Joins: sepanko (~sepanko@user/sepanko)
[01:48:53] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[01:48:53] *** Joins: sp (~sp@user/susam)
[01:49:07] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:49:47] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (Quit: Client limit exceeded: 20000)
[01:49:49] <semz> I really wonder what the idea behind adding them was.
[01:50:12] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[01:55:45] *** Joins: hayley (~theemacss@user/hayley)
[01:58:36] <pl> semz: it's part of system information calls, and they had a meaning then for most sites 
[01:59:08] *** Parts: hayley (~theemacss@user/hayley) ()
[01:59:49] <pl> The administrator of the site would configure the implementation with correct information 
[02:00:01] <pl> All lisp machines had that as basic config, too 
[02:05:51] <semz> But what would it be used for?
[02:09:04] <selwyn> is ed there for lisp machine reasons as well
[02:09:12] <selwyn> http://www.lispworks.com/documentation/HyperSpec/Body/f_ed.htm#ed
[02:10:06] <gilberth> semz: In case you forgot where you are, you could ask your Lisp.
[02:11:51] <pjb> semz: why do you say useless? (list (short-site-name) (long-site-name)) #| --> ("despina" "despina.lan.informatimago.com") |# 
[02:12:03] <pjb> s/useless/weirdest/
[02:12:38] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Client limit exceeded: 20000)
[02:13:03] <pjb> semz: ed calls up your favorite lisp editor.  It may be hemlock (eg. in Clozure CL.app), or emacs (eg. in a well configured implementation), or some other editor.
[02:13:17] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:14:05] <semz> I know what ed is for (and have used it myself).
[02:14:26] <gilberth> Hemlock came with CMUCL.
[02:15:01] <semz> But I can't imagine any use for *-site-name, even with your example.
[02:17:12] <pjb> semz: I see what you mean: no standard network operator.  This could be used in generated reports and listing.
[02:17:47] <pjb> also, possibly, in pathname; there could be ways to specify pathname to network shares.
[02:18:59] <pjb> (format t "Welcome to ~A~%" (long-site-name)) could be useful as greeting on the repl, if you connected to various lisp machines remotely.
[02:20:02] <gilberth> However, SI:CALL-ELEVATOR didn't make it to CL. On the CADR it would call the elevator to your floor. Also bound to <Terminal> + E. And this function would need to know on which floor you are. Thus SHORT-SITE-NAME.
[02:20:46] <pjb> All I know is that I've used those functions already. 
[02:21:02] <gilberth> For what would be a hostname there also is MACHINE-INSTANCE.
[02:22:20] <pjb> Ah correct.
[02:22:35] <pjb> You'd rather configure the -site-names manually…
[02:25:18] <gilberth> It's nice that these functions are specified. Also lisp-implementation-version and -type as well as {machine,software}-{version,type}.
[02:25:30] *** Joins: hayley (~theemacss@user/hayley)
[02:26:03] <hayley> gilberth: /me had a lightbulb while making eggs for breakfast - why not SIMD any ole tight loop in the DFA, if we expect to take the loop?
[02:26:07] <pjb> They provide human readable output. So specifically for reports, listing, etc.
[02:26:50] <hayley> This should still work if we were to use a grep machine, too, so we don't have the O(n^2) worst case.f.
[02:27:16] <edgar-rft> pjb: how do you configure the site names when you're not allowed to redefine functions in th CL package?
[02:27:31] <gilberth> hayley: Sure, if you can. Especially the initial grepper loop expecting to wade through lots of haystack. Scanners waste little hay. ;)
[02:28:08] <hayley> Well, I already handle the initial loop. But I get so many false positives on e.g. resolutions when there's just an integer.
[02:28:18] <gilberth> edgar-rft: You use a hex-editor to patch your executable.
[02:28:25] <hayley> ...and really I should use a grep machine for that too, but I didn't, I forgot why.
[02:29:02] <pjb> edgar-rft: implementation specific. For example, #+ccl (setf ccl:*short-site-name* "foo" ccl:*long-site-name* "foo bar baz")
[02:31:12] <gilberth> hayley: Sure. But going for the initial loop is the lowest hanging fruit. In your example with the code I generated for it, you win, when you unroll that loop. And also when you keep a lookahead register and instead of saying ch = *p++; if (ch > ...) ...; say ch = la; la = *p++; if (ch > ..) ..; You don't stall on the load of the next character then. A poor man's pipeline.
[02:32:01] <edgar-rft> pjb: thanks, true, in SBCL there's SB-SYS:*SHORT-SITE-NAME* and SB-SYS:*SHORT-SITE-NAME*, even if not mentioned in the manual :-)
[02:33:58] <hayley> Well, best I know, the main trick is knowing that the assignments I allow for (T <- P and Ta <- Tb) are idempotent, so if one loop ends up with assignments, I can just cheat and only run the last assignment.
[02:34:12] <hayley> s/last assignment/assignments for the last "transition" we performed/
[02:34:12] <gilberth> hayley: And of course, when you need to do bounds checks, you could say unroll four-fold and check once every four characters, if there are four left still and bail out to a slow, final, sad path otherwise.
[02:35:34] <hayley> In any case, someone asked me about how other people handle running a RE. I said that most used an interpreter, but got away with it by including an efficient prefix scanner of some sort.
[02:36:21] <gilberth> hayley: This is curious. I don't see that kind of of redundant assignments often. Perhaps my dataflow analysis kills then right away. I mean, by idempotent, you mean that say Ta <- Tb is dead, don't you?
[02:36:21] <hayley> But being able to generate arbitrary SIMD code for prefixes, and now loops, is very handy.
[02:36:23] <hayley> I don't think even Hyperscan does that; best I know, it strings functions with tight loops together.
[02:36:53] <hayley> gilberth: I mean that {Ta <- Tb}^n for arbitrary n has the same effects as {Ta <- Tb}^1
[02:37:44] <gilberth> Aren't your assignments a substitution to begin with?
[02:38:30] <semz> pjb: I suppose this makes sense.
[02:38:34] <hayley> Sure.
[02:38:44] <semz> gilberth: I honestly can't tell if the elevator thing is a joke.
[02:38:56] <gilberth> hayley, I am afraid, I don't quite get you. Do you have an example RE for me, that I could subject to my compiler?
[02:39:41] <hayley> I can't imagine REs based on properties of the Mealy machine...best just get my compiler and the Graphviz visualiser running, and check myself.
[02:40:16] <gilberth> semz: Well, I had the very same thing at my office at my company. I could call the elevator with a hotkey. It would be there waiting for me by the time I would have made it down the corridor.
[02:41:15] <pjb> semz: yes, since we used to connect to computers thru the network or the phone system, we didn't know where they were. So it was important to have some location information in the long site name, to be able to go and reset the computer or mount some tape or disk…
[02:41:52] <pjb> semz: nowadays, we just keep our computers in our pockets, so it doesn't really matter. We still give them names for publication on bluetooth and wifi networks.
[02:42:19] <hayley> But the problem is: suppose I have a tight loop where some state has a transition to itself, and the transition generates the set of assignments S. Must I perform the assignments on every transition, or will just the last transition suffice?
[02:42:58] <hayley> I suspect the latter is the case, based on gut feeling and how the values would be overwritten immediately.
[02:43:07] <pjb> hayley: in state machine descriptions you can distinguish different actions: on-entry, on-exit, and activity which is performed continuously while in the state.
[02:43:10] <gilberth> semz: There is code behind SI:CALL-ELEVATOR which talks to another machine and sents a command. I assume the elevator was wired to that machine.
[02:43:27] <pjb> hayley: when you have transitions from and to the same node, on-exit and on-entry actions should be run.
[02:45:02] <gilberth> pjb: Register assignment happens on a transition. It could be different for each transition and are not a property of a state, neither entry, nor exit.
[02:45:14] <hayley> Okay, I found one such loop, one second...
[02:45:27] * hayley still waiting for things to load on desktop
[02:45:34] <pjb> You can also have actions associated with the transition itself.
[02:45:50] * hayley uploaded an image: (92KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/CokqsMnYMETUPnAzZmgvvizg/digits.png >
[02:45:58] <gilberth> This happens, when you shift. Like in a*(a)a
[02:46:33] <hayley> Note the repeated {END ← P} in the state near the bottom.
[02:46:42] <pjb> for example: https://i.stack.imgur.com/cdLTE.png
[02:49:21] <gilberth> hayley: Is this ([0-9]+x[0-9]+)? I just want to be sure.
[02:49:34] <hayley> Yes.
[02:50:23] <gilberth> With GREP[] around, I presume.
[02:50:31] <hayley> Right again.
[02:51:19] * hayley continues to struggle to use a letter from her old university as a mousepad. Can't even give me a damn mousepad, let alone an education.
[02:53:44] <hayley> Hm, no, something like {A <- B; B <- P} repeated should end up with A = P - 1 and B = P. Can't skip that. But still I can identify when we don't have such a "delay" being generated, and win most of the time.
[02:53:55] <gilberth> hayley: Ok, have you loooked at my code? I get <http://termbin.com/v3xf> I don't spot such kind of assignments. [3 is the real initial state, 2 is the accepting state, and :EXIT is essentially a fall-through]
[02:54:16] <hayley> Yes, you do global data flow analysis, I don't.
[02:54:42] <gilberth> Yes, milady, and there is a reason, why I do that. ;)
[02:55:17] <gilberth> OTOH a Lisp compiler should do the very same. It's just that I don't trust it in that regard.
[02:55:17] <sm2n> Aurora_v_kosmose: 2022? More like 2020 too!
[02:56:01] <hayley> The Lisp compiler probably can't help, if I wish to make the decision to SIMD or not based on the assignments.
[02:56:13] <Aurora_v_kosmose> 2020 Part 2 - A Proud presentation by Pandemic Productions Inc
[02:56:42] <gilberth> Well, for data flow, gcc does what I do just fine.
[02:57:48] <gilberth> What nags me is, that I still have two registers there, where one would do.
[02:59:52] <gilberth> hayley: So I suggest you implement the next chapter of CLEX2: Data flow analysis. Have fun! :-p
[03:00:02] <hayley> Dammit!
[03:00:32] <gilberth> Sorry.
[03:00:42] <hayley> I have a global value numbering algorithm for SICL, so I suppose it should be possible.
[03:01:05] <gilberth> It's easy. Really.
[03:01:32] <hayley> I just said I implemented it for SICL, which, mind you, implements all Common Lisp semantics and not just tag assignments.
[03:02:22] <hayley> https://github.com/no-defun-allowed/SICL/tree/global-value-numbering/Code/Cleavir/HIR-transformations/Global-value-numbering
[03:02:24] <gilberth> Yep, so you should be done in no time. However I can't see how CL semantics come into play here.
[03:02:52] <hayley> They don't, I'm just saying I've done "harder" GVN before.
[03:06:07] <hayley> But, to be honest, I don't think the SIMD loop stuff should really depend on GVN being run; I don't know if GVN will eliminate all such assignments in loops.
[03:06:33] <gilberth> Hmm, I could be more clever though and catch "shifting" as with a*(a)a. I am almost there, though. But my data flow stuff is quick and dirty.
[03:07:27] <gilberth> hayley: Well, we were talking a about an initial self-loop on hay, weren't we?
[03:08:16] <gilberth> hayley: Nomen est omen?
[03:09:14] <hayley> Sure.
[03:09:37] <hayley> ...and as my last name is Patton, I had to use a pattern matching library.
[03:09:57] <gilberth> Anyhow, there shouldn't be any assignments within hay. Otherwise it wouldn't be hay.
[03:10:25] <gilberth> hayley: Right! Now you mention that. How come, I missed that?
[03:13:53] <hayley> Well, now I want to attack the loops after the initial loop. And note that the first loop doesn't have any assignments.
[03:20:42] <hayley> Granted I would suspect that having just the first two loops vectorised greatly helps. Hmm.
[03:46:53] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[04:01:06] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[04:12:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:13:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:11:04] <epony> patent marching? ;-)
[06:23:06] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:25:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:33:21] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[06:38:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:46:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:d903:d876:1354:7b4c) (Ping timeout: 250 seconds)
[06:48:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:df45:34e6:a5aa:758)
[07:07:44] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[07:08:16] * moon-child notices sly has more cats than slime, switches
[07:08:54] <sm2n> to or away
[07:09:20] <moon-child> to
[07:09:32] <sm2n> nice
[07:10:21] <sm2n> don't forget to try out stickers, the better way to TRACE!
[07:11:07] <sm2n> they are imo the biggest QoL improvement in sly, other than not having to manually configure company-mode and other stuff
[07:11:20] <sm2n> I always found all the slime-contribs confusing
[07:11:53] <moon-child> will take a look
[07:11:59] <moon-child> (the real draw is still the cats though)
[07:14:04] <moon-child> https://twitter.com/ChrisRackauckas/status/1477274812460449793  julia gets DEFINE-VOP? DEFINE-COMPILER-MACRO?
[07:15:12] <hayley> ONE-MORE-RE-NIGHTMARE::DEFINE-REWRITES?
[07:15:22] <sm2n> "Symbolics.jl"
[07:16:23] <sm2n> where is my julia machine
[07:18:59] <sm2n> Wow, that's impressive for a bachelor's thesis
[07:20:09] <sm2n> I wonder how this affects compile times though
[07:21:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[07:22:17] <sm2n> ...Why are they using "LISP" in the paper
[07:22:33] *** Joins: perrierjouet (~perrier-j@185.128.26.174)
[07:22:42] <hayley> idk, Julia people aren't well educated in Lisp, from what mfiano told me once.
[07:23:24] <mfiano> I'm not sure I remember that conversation.
[07:23:53] <hayley> You mentioned DISASSEMBLE to them, and they said they thought Lisp was interpreted?
[07:24:56] <sm2n> julia works essentially the same way in that respect, so that's weird
[07:25:15] <mfiano> I'm not sure, maybe, but I'm not sure one or a few people is all Julia people, and that is a common misconception among all people anyway.
[07:25:51] <mfiano> I did however convince them to add SBCL-style code size to their disassemble equivalent.
[07:26:26] <sm2n> mfiano: in mainline julia?
[07:26:32] <mfiano> Yeah
[07:26:37] <sm2n> nice
[07:28:15] <sm2n> "The design of this pattern matcher is an adaptation of the excellent pattern matcher introduced in the book "Software Design for Flexibility" [21] by Gerald Jay Sussman."
[07:28:17] <sm2n> huh
[07:28:34] <sm2n> Perhaps I should read the book
[07:29:19] <mfiano> I doubt you will be very impressed
[07:29:36] <sm2n> oh?
[07:30:04] <sm2n> I am a big SICP fan
[07:30:09] *** Quits: perrierjouet (~perrier-j@185.128.26.174) (Ping timeout: 256 seconds)
[07:30:24] <sm2n> Does it not live up to its predecessor?
[07:30:51] <mfiano> I think it has some good ideas, but it's very hand-wavey. I got more value out of the papers introducing the topics the book glosses over.
[07:31:37] <sm2n> Oh, I see
[07:31:42] <mfiano> I haven't read SICP to answer that question
[07:32:43] <sm2n> "The EMATCH function, short for e-graph pattern matching searches an e-graph for all the possible matches corresponding to an arbitrary pattern."
[07:33:01] <sm2n> julia programmers coming to CL might get confused with trivia in the future
[07:35:37] <mfiano> I wouldn't say Julia people don't know about Lisp though. After all, Julia was written in Lisp
[07:36:07] <sm2n> Femtolisp is still part of Julia as I understand it
[07:36:22] <mfiano> The initial compiler was written in a custom Lisp, called Femtolisp, even if it is only used for early parsing these days.
[07:36:37] <mfiano> There is a flag to drop you into a lisp repl instead of a julia repl
[07:37:48] <sm2n> Yeah, I would put it in the heritage of Dylan
[07:39:24] <mfiano> Julia is a nice language for exploratory programming. I wouldn't ever write anything serious in it, not being a data scientist, though.
[07:39:46] <sm2n> I didn't know julia's broadcasting operation was basically a macro. Just learnt something.
[07:39:50] <mfiano> The package system is as if it was meant to be a cruel joke, in particular.
[07:41:45] <mfiano> If you want to live code and recompile something, it is possible to end up in a state where your "image" refers to two packages of the same name, causing all sorts of havoc and confusion. Packages have no concept of identity like Lisp.
[07:42:21] <mfiano> Actually very possible, and very annoying. There are specific packages to hack around this, but they all make sacrifices to the usual image-based development experience.
[07:42:28] <sm2n> Someone seriously thought "Wow, Python's packaging story is a mess. Let's build it into our language"
[07:43:10] <sm2n> The idea is that libraries can pin the version of other libraries, so that the ecosystem stays reproducible
[07:43:23] <sm2n> but it results in contortions as you say
[07:43:50] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:44:01] <hayley> Best of luck with first-class global environments then :)
[07:44:15] <mfiano> For example, there is Revise.jl, which essentially watches a _file_ for changes.
[07:45:33] <mfiano> I'm not a huge fan of Julia for multiple reasons, but their package system rewrite was a major reason I became uninterested a few years ago.
[07:45:35] <sm2n> first-class global environments are fine because they are /global/
[07:45:50] <mfiano> (and they were very proud of this rewrite, giving lots of talks about it)
[07:45:58] <sm2n> Julia's is per-module or whatever they call it
[07:46:04] <sm2n> Package, I guess
[07:46:53] <sm2n> mfiano: They did solve the problem they wanted to solve well though
[07:47:11] <sm2n> Which was "Data scientists just want the computer to dang work"
[07:47:15] <mfiano> As of late, I became quite fond of Golang. Having knocked on it in the past, I feel bad, because it is actually a very well-designed language, and a lot of it's seemingly strange design decisions make a lot of sense when you look at the gestault of it.
[07:47:26] <sm2n> oh no
[07:49:38] <hayley> mfiano: if (err != nil)
[07:49:56] <hayley> If Rob Pike is in the room with ya, blink twice
[07:49:57] <mfiano> Sorry but that's not idiomatic Go code
[07:50:10] <aeth> Having never used it, I'm not a big fan of Go's philosophy... iirc, it's about code that's easy to read at the micro level of just jumping in and reading lines of a function, at the expense of, well, abstraction. Maybe it makes sense for large teams.
[07:50:26] <aeth> they somehow managed to finally add generics, though?
[07:50:31] <hayley> How do you do idiomatic error handling then?
[07:50:31] <mfiano> parentheses in that position are frowned upon.
[07:50:34] <hayley> aeth: yes
[07:50:44] <mfiano> aeth: No, not yet
[07:50:49] <sm2n> if err != nil
[07:50:52] <hayley> So, if err != nil
[07:50:58] <mfiano> It's still being worked out, and the tooling can't cope with generics very well yet.
[07:51:04] <hayley> What an improvement! Plaudits to all involved.
[07:51:07] <mfiano> It won't be officially released until February
[07:51:12] <aeth> I'm also not a fan of not being able to add unnecessary parens
[07:51:25] <aeth> years before I discovered Lisp, I did that all of the time
[07:51:50] <aeth> so, so far 0-2 for Go :-p
[07:52:02] <mfiano> This is such a thing as error wrapping, and attaching contextual information to them, including stack traces.
[07:52:11] <mfiano> So it isn't that bad
[07:52:39] <mfiano> s/This/There/
[07:52:53] <aeth> no language is bad unless it's intentional
[07:52:59] <aeth> they all have different points of annoyance, though
[07:53:03] <hayley> But it still starts with if err != nil?
[07:53:47] <aeth> CL, for instance, doesn't really have too many typed arrays available, but will happily let a newbie define obviously-invalid :ELEMENT-TYPEs in MAKE-ARRAY. Just in case I'm seeming unfair.
[07:54:02] <aeth> I can probably list CL's annoyances more than any other... except maybe Lua. I haven't used Lua more than CL, but wow Lua has a lot of annoyances
[07:54:11] <sm2n> I don't see a reason to use Go when CL exists
[07:54:13] <mfiano> By convention, errors are propagated as the last return value, so in a way, yes. But you sort of have to understand the other aspects of the language that complement this approach.
[07:54:26] <moon-child> aeth: you also have a greater ability to fix annoyances in cl than in most other languages
[07:54:45] <hayley> aeth: It's portability when one implementation might have (UNSIGNED-BYTE 64) arrays and another might not (and upgrades it to T)
[07:55:21] <aeth> moon-child: to be fair, some of those powerful ways to fix annoyances are intentionally not provided in other languages because they make tools basically impossible to use in the general case. Especially reader macros.
[07:55:44] <aeth> Sure, you can do whatever you want with reader macros. But you have to heavily restrict yourself or write your own emacs mode...
[07:55:46] <sm2n> Also, other than in type-checking, which was never guaranteed anyway, array element-type upgrading does not change the semantics of your program
[07:56:14] <sm2n> So I don't really see that as an annoyance
[07:56:30] <sm2n> At worse you are just writing code that doesn't do anything
[07:56:36] <sm2n> s/worse/worst/
[07:56:40] <aeth> what's probably a bigger issue for newbies is mutating literals like '(1 2 3 4)
[07:56:52] <sm2n> I agree with this one
[07:56:52] <aeth> since if you mutate it in another function, you won't find out
[07:56:53] <moon-child> aeth: nobody will want to use your custom array type if they have to write 'make_array(...)' to use it, but can just write [...] for the builtin array type.  But for (cl:make-array ...) vs (your-garbage:make-array ...), who cares?
[07:56:55] *** Joins: semz (~none@user/semz)
[07:57:08] <hayley> totally-legit-SICL-repl * (setf (car '(1 2 3)) 2)
[07:57:22] <moon-child> hayley: does not halt? :)
[07:57:38] <hayley> You have posted cringe, prepare to lose subscriber [condition of type SICL-CONDITIONS:BRUH-MOMENT]
[07:57:44] <aeth> moon-child: CL doesn't really provide the tools for your own custom arrays... unless you want to heavily abuse structs, maybe
[07:57:46] <sm2n> I got burned by mutating stuff in macros before
[07:58:02] <sm2n> aeth: It would be implementation dependent, obviously
[07:58:14] <moon-child> aeth: well, sure, but you could e.g. make a thing which wraps around the builtin arrays and prevents you from using nonsense element-types
[07:58:15] <aeth> (i.e. using struct slots as array slots, giving an implicit numbering to the slots)
[07:59:14] <sm2n> "representation of programs called Program Expression Graphs (PEGs)"
[07:59:39] <sm2n> What is wrong with julia people? you can't just steal an established acronym like that
[07:59:40] <hayley> You are going to the sea of nodes
[07:59:55] * hayley uploaded an image: (49KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/WzdTwouitMgSlchRHGCUESGL/cliff-click.jpg >
[08:00:44] <mfiano> sm2n: Welcome to programming. May I remind you of the CFG acronym?
[08:01:06] <sm2n> Oh that too
[08:01:11] <mfiano> Context-free Grammar vs Control Flow Graph.
[08:01:11] <hayley> Is DFA data-flow analysis or discrete finite automaton? #lispcafe can't figure it out.
[08:01:23] <hayley> Similar: is MMU minimum mutator usage or memory management unit?
[08:02:53] <moon-child> I'm not sure I have heard CFG used to refer to context-free grammar
[08:03:21] <mfiano> Really? Wow.
[08:03:28] <moon-child> but then, I am not a parser person.  I leave that to hayley and gilberth 
[08:03:29] <mfiano> It's all over compiler theory.
[08:03:34] <mfiano> And the first sentence of https://en.wikipedia.org/wiki/Context-free_grammar
[08:03:46] <hayley> I am not a context-free person, and nor is gilberth. You lose.
[08:03:53] <moon-child> :<
[08:04:15] <moon-child> mfiano: graphs > trees, don't @ me
[08:04:22] * hayley raises MessageNotUnderstood exception
[08:04:31] <moon-child> (question for the With It and Hip: what does 'don't @ me' mean?)
[08:04:35] <sm2n> I've mainly heard CFG refer to Context-free grammar personally
[08:04:51] <hayley> moon-child: Don't reply (which involves your reply looking like "@moon-child blablabla")
[08:05:02] <mfiano> Except when your filesystem is a DAG when you add hard-links, so inotify/kqueue is essentially broken.
[08:05:04] <moon-child> ah, ok
[08:05:29] <sm2n> moon-child: Someone posts something "controversial" on twitter, and then requests people to not reply to them despite them deliberately stoking outrage
[08:05:30] <moon-child> mfiano: I do not like hierarchical file systems
[08:05:47] <mfiano> moon-child: ! I am right with you there.
[08:06:11] <sm2n> Is there anyone in #lispcafe that likes hierarchical file systems?
[08:06:28] <hayley> gilberth?
[08:06:38] <sm2n> really?
[08:06:45] <moon-child> hmm, he claimed to like files, but I don't remember if he said anything about how they should be organized
[08:06:53] * hayley throws sm2n into the sea of nodes
[08:07:31] <hayley> .oO(Just grab onto a floating point op and you'll survive...) 
[08:07:33] <sm2n> Oh no! However will I compile
[08:08:02] <mfiano> I dislike traditional OOP for one of the same reasons: properties just force their way up the hierarchy over time, until you're left with a god object.
[08:08:15] <mfiano> COming up with definitive taxonomies is a waste of time.
[08:08:22] <mfiano> And a losing battle in the end
[08:08:27] <sm2n> mfiano: sounds like Go error propagation
[08:08:48] <moon-child> sm2n: if you want to make calls from a tree into a graph, you need continuations
[08:08:50] <moon-child> :^)
[08:09:06] <aeth> all files should be organized under ~/git
[08:09:14] <aeth> e.g. ~/git/foo
[08:09:57] * moon-child has said the c-word in a cl channel.  Wonder when I will be booted...
[08:10:22] <sm2n> moon-child: I'm sorry, we only accept first-class delimited continuations at this joint. Please see Oleg if you disagree
[08:10:39] <sm2n> Actually, aeth, how do you handle continuations in airship
[08:11:38] <aeth> it's broken atm
[08:12:01] <aeth> but https://en.wikipedia.org/wiki/Continuation-passing_style
[08:12:16] <aeth> it's a difficult-to-debug transformation, unfortunately
[08:12:22] <sm2n> oh, you rewrite everything?
[08:12:26] <aeth> but conceptually, it's simple. Just insert an extra argument to the start of anything
[08:12:29] <hayley> aeth: Have you read the RABBIT compiler?
[08:12:33] <sm2n> Doesn't that kill interop?
[08:12:41] <aeth> sm2n: why would it kill the interop?
[08:12:51] <aeth> just wrap any Scheme that you call from CL with a trampoline
[08:13:47] <aeth> probably could cause issues if you call/cc from two different entry points? not sure. it would be reified as a lambda, wouldn't it?
[08:14:01] <aeth> hayley: I skimmed the paper iirc
[08:14:11] <sm2n> I guess so
[08:14:46] <moon-child> might there not also be complications with dynamic-wind?
[08:15:02] <hayley> IIRC I ported https://matt.might.net/articles/cps-conversion/ to CL, and used some fairly simple constant folding code to clean it up.
[08:15:46] <aeth> sm2n: it doesn't give it trivially free interop, though
[08:15:51] <aeth> but you don't get that anyway
[08:16:21] <aeth> because Scheme has #t and #f and '() while CL has T and NIL and NIL
[08:16:27] <aeth> so you need some wrapping
[08:16:59] <aeth> so CL always sees NIL instead of '%f and Scheme always sees the correct interpretation of NIL
[08:17:14] <aeth> (well, to the best of the ability of the function, anyway... obviously if it's something ultra-generic like GETHASH it might get the wrong thing)
[08:18:10] <moon-child> ah, you map #t and #f to symbols?
[08:18:34] <moon-child> I think I would rather make boolean a standard class, so boolean? and symbol? are simpler
[08:19:09] <moon-child> (though I guess if you're doing that you wanna do the same for (), complicating interop further)
[08:19:21] <aeth> It's easier for me to have #f as a symbol (#t is just CL:T) than for me to have to specially handle the many, many list processing functions that work with '()
[08:19:34] <aeth> that is, one of the two has to be native and one of the two has to be internal
[08:19:56] <moon-child> I mean, why not write those list processing functions in the target?
[08:20:55] <moon-child> err, in the source
[08:21:00] <moon-child> in scheme
[08:22:25] <aeth> because most of them carry over
[08:26:21] <aeth> it's just easier to use the same list representation
[08:26:41] <aeth> NIL-as-#f would break that
[08:27:16] <aeth> you could, perhaps, as an option force that if you need interoperability at the expense of breaking Scheme semantics a bit
[08:28:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:14:16] <hayley> It appears a colouring pencil box is the best mouse pad I have on me. Take that, honour society letter! 
[09:17:11] <sm2n> If you take some old clothes and lay them out flat, I think that should work for optical mice
[09:19:29] <gilberth> Cloth? Wouldn't that be too rough?
[09:20:27] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:20:33] <sm2n> iirc cloth works fine for optical but not laser mice
[09:20:38] <dave0> maw
[09:20:56] <sm2n> But it's been quite a while since I've owned an optical mice so I can't actually test that
[09:20:58] <gilberth> sm2n: Still, I can't imagine to move a mouse on cloth.
[09:21:20] <sm2n> ah, yeah I guess it could catch and stuff
[09:21:29] <gilberth> Hello dave0!
[09:21:35] <sm2n> probably want to stretch it out, which is what some mousepads do, I think
[09:21:44] <dave0> hi gilberth ! how are you ?
[09:22:51] <gilberth> sm2n: Yeah I don't like that kind of mouse pads, it's not rigid enough for me. Usually either my table surface works as it is, or I use a sheet of paper.
[09:24:45] <gilberth> dave0: Well, "it goes." I am still not satisfied with my life and my poor health is getting on my nerves. How to find a GF in that state? I need patience until I could leave my prison here.
[09:25:59] <gilberth> dave0: And how are you? Recovered from your New Year's hangover?
[09:26:02] <dave0> gilberth: i hope things work out for you :-)
[09:26:33] <dave0> ah yes and i saw my friends for a chat
[09:26:58] <dave0> i showed them my flat, they humored me with a "oooh nice"
[09:27:10] <dave0> i'm gonna give them a call on saturday
[09:27:26] <dave0> end of story
[09:27:27] <dave0> :-)
[09:27:35] <gilberth> Ah that kind of "Oh! Niiiiice."?
[09:27:49] <dave0> yep
[09:27:58] <dave0> even though it's a pigsty ;-)
[09:28:30] <gilberth> Oh dear. How come?
[09:28:30] <moon-child> bet you are more organised than I am
[09:29:18] <dave0> i need a slave-girl to come in once a month and clean the flat from top to bottom
[09:30:03] <gilberth> That bad? And why a slave girl?
[09:30:24] <dave0> gilberth: the cobwebs are getting dusty
[09:30:52] <gilberth> I see.
[09:31:42] <dave0> lol
[09:31:58] <gilberth> I have a split personality in that regard. Shared space, like the kitchen, needs to be clean and cleaned up. My personal realm needs to be a mess. I can't think while sitting in a clean room.
[09:33:57] <gilberth> And it gets on my nerves, that I am the only one here, who cleans the kitchen. But that is me, insisting on finding clean uncluttered surfaces in the kitchen, because I have the crazy habit of cooking. Can you imagine that?
[09:34:15] <dave0> cooking is an excellent skill
[09:34:52] <gilberth> I don't like it. Especially, when I cook for exactly one person.
[09:35:41] <gilberth> It seems so pointless.
[09:36:17] <hayley> Suppose you had a magic compiler which could tell you when objects are no longer used (at least some of the time - I mean, it doesn't really matter how often, but hold your "lol halting problem" for a second). How does this affect your allocation strategy?
[09:38:01] <hayley> Is there still a point to bump allocation? Might be if you believe that compacting is the important part, and collecting garbage is secondary.
[09:38:42] <White_Flame> I think bump vs freelist has more to do with if your allocations are fixed-size
[09:38:52] <White_Flame> or I should say consistently sized
[09:39:44] <hayley> IIRC beach said mark-sweep was ideal (for fragmentation) with fixed-size objects.
[09:40:05] <hayley> Then again, anything is, so idk. /me double-checks the discussion.
[09:40:20] <White_Flame> you still can get sparse memory usage taking up tons of pages
[09:40:36] <White_Flame> so moving is always a 'nice to have'
[09:41:04] <White_Flame> but if everything is fixed size, you never fragment or have unusably small holes
[09:41:25] <White_Flame> basically disks with their sector-based allocation do the same
[09:42:03] <gilberth> I am puzzled. Mark/sweep has to sweep, doesn't it? This is a cost that a copying collector does not have.
[09:42:38] <White_Flame> a copying collector has to copy, which is a cost that mark/sweep doesn't have...
[09:42:44] <hayley> Steve Blackburn told me to use memory used by pages / memory used by objects.
[09:43:27] <hayley> IIRC there was a transparently compacting malloc which would diddle virtual memory to compact.
[09:43:37] <gilberth> For allocation and all object being the same size and a memory with a uniform speed (no locality effects), a free list is negligible worse than a bump pointer.
[09:44:07] <White_Flame> hayley: that seems strange, unless all allocations are in blocks of 4k or something?
[09:44:25] <hayley> This one <https://www.youtube.com/watch?v=VMP2w5o4Yco>
[09:44:42] <hayley> No, they just randomised in a way which somehow lets you "mesh" pages together, idk.
[09:44:47] <White_Flame> oh, hmm, if you map multiple virtual pages to the same page, then I guess if the low bits of the pointer are unique, you can have disparate objects coalesce into a single page
[09:45:18] <hayley> Magic to me, I'd usually want to pull out a compacting GC, but that is infeasible for C.
[09:45:19] <moon-child> hayley: what does it _mean_ to know when an object is no longer used?
[09:45:27] <White_Flame> eg, you have #x01000004 and #x0f000008 both map to the same #x__000000 page
[09:45:36] <moon-child> I don't think that has a meaningful definition in the face of higher-order functions
[09:46:00] <hayley> moon-child: It means that, by magic, we know that an object cannot be live after some point in execution.
[09:46:40] <moon-child> how do we identify an object?  By its allocation point?
[09:46:47] <gilberth> White_Flame: This depends on how expensive the copying is, if what you need to copy is pointers (as they need to be visited anyway) or bulk blobs, and your ratio of garbage to non-garbage. And in case of Cheney if you could bet your stack while marking is large enough, or you would need this insane algorithmn to traverse a tree in O(1) space by flipping pointers. Hence: It depends. :-)
[09:47:16] <hayley> idk, by magic that is precise enough. Like V's autofree (lol).
[09:47:47] <sm2n> V still exists?
[09:48:09] <hayley> Last I heard, yes.
[09:57:14] <semz> what would need to happen for it to die
[09:57:46] <semz> I mean, at what point does it no longer exist?
[09:58:16] <sm2n> presumably if the developers stop developing it
[10:00:13] <hayley> Should I check for you?
[10:01:20] <sm2n> sure
[10:02:04] <hayley> Last commit was 2 hours ago. Congratulations!
[10:02:08] <hayley> And it was to the regex engine.
[10:05:23] <moon-child> slow
[10:05:34] <moon-child> it generates all the matches first, and then writes the output
[10:06:04] * moon-child reminded of baker tirade regarding ranges vs closures
[10:07:00] * sm2n is not sure what he is being congratulated for
[10:07:13] <hayley> https://plover.com/~mjd/misc/hbaker-archive/Iterator.html
[10:08:23] <hayley> .oO(But Smalltalk has MAPCAR, it's called #do: and it works with "functions" of a sort, as you expect.)
[10:10:57] <sm2n> Something I've been wondering about
[10:11:11] <sm2n> are there significant downsides to heap-allocated stacks?
[10:11:47] <sm2n> The only languages I know that use them are haskell and racket, but it's nice to be able to rely on recursion without reifying the stack
[10:12:17] <moon-child> what is a heap-allocated stack?
[10:12:42] <hayley> Allocating activation records on the heap? I'd guess Haskell and Racket just do tail call elimination.
[10:12:47] <moon-child> cps?  Allocating a stack larger than the OS gives you?
[10:12:47] <sm2n> where your control stack grows on demand
[10:12:58] <sm2n> and is managed by the language runtime
[10:13:15] <sm2n> hayley: I am explicitly not talking about tail recursion
[10:13:19] <hayley> Resizing the stack is probably a good move, sure. IIRC Go does that, and for a better example, SICL uses the MMU to lazily page in a 256MB stack.
[10:13:44] <moon-child> for some definition of 'uses' :)
[10:13:59] <sm2n> you can write non-tail recursive functions and they can use your entire ram if necessary
[10:14:14] <moon-child> anyway yeah I think that's a good idea.  Lets you scale down, too, if you wanna go ham with threads because context switching is cheap (scnr)
[10:14:14] <hayley> moon-child: Well, the specification says that, and the spec is always right, right?
[10:15:15] <sm2n> if it's such a good idea why don't more languages do it?
[10:15:50] <sm2n> or is it just one of those things, like conditions
[10:16:06] <hayley> Languages don't, implementations do. But it is indeed one of those things.
[10:17:08] <sm2n> I see
[10:17:20] <sm2n> moon-child: scnr?
[10:18:10] <moon-child> 'sorry, could not resist'
[10:18:15] <sm2n> oh
[10:19:23] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[10:20:12] <sm2n> kind of disappointing that there is no reason to have stack overflows when it is such an iconic phrase
[10:40:00] *** Joins: shka (~herr@109.231.0.226)
[10:50:49] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[10:51:10] *** Joins: shka (~herr@109.231.0.226)
[10:53:44] <dave0> i like the idea of scribbling anywhere in memory and unix automatically allocates fresh pages for you each time
[10:54:00] <ck_> "dave0 was here"
[10:54:10] <dave0> haha
[10:54:20] <dave0> i didn't mean graffiti ;-)
[10:55:31] <epony> "roy"
[10:56:28] <epony> https://en.wikipedia.org/wiki/Kilroy_was_here
[10:57:08] <dave0> hayley: someone posted this and i thought of you, i think it is your style? https://youtu.be/7OvW8Z7kiws
[10:57:49] * hayley has it on candle wax
[11:03:38] <shka> i still think of haylay each time i see this https://www.youtube.com/watch?v=Af8ltlcZNi0
[11:13:59] <contrapunctus> > haylay
[11:17:49] *** Quits: shka (~herr@109.231.0.226) (Read error: Connection reset by peer)
[11:19:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[11:20:37] <ck_> "haha cantrapanctas"
[11:21:34] *** Joins: shka (~herr@109.231.0.226)
[11:21:51] * hayley puts https://www.youtube.com/watch?v=OxfSC9GybPA on jukebox
[11:25:20] <hayley> https://eng.uber.com/how-we-saved-70k-cores-across-30-mission-critical-services/
[11:25:35] <hayley> What is JVM Ergonomics :S
[11:25:43] <shka> hayley: this is uber
[11:26:02] <shka> they are techno-posers 
[11:26:31] <shka> this blog is just so they can be perceived as a tech company :P
[11:27:20] <hayley> "GOGCTuner dynamically computes the correct GOGC value in accordance with the container’s memory limit" Fucking hilarious.
[11:27:59] <shka> because being zombie company that is not tech is far less acceptable 
[11:28:17] <shka> fucking tech bubble 
[11:28:27] <hayley> Can't they do something interesting, like regex compilers?
[11:28:28] * shka emits angry old man noises
[11:28:45] <ck_> slight chuckle
[11:29:49] <hayley> OTOH SBCL gives you --dynamic-space-size and no concurrent GC, so you end up with another arbitrarily chosen "single GC knob!!1!1one"
[11:30:23] <shka> are people really hurting from poor GC performance that much?
[11:31:26] <White_Flame> people are really hurting from being butthurt over GC taking nonzero time, does that count?
[11:31:46] <shka> White_Flame: i wouldn't say so
[11:32:08] <White_Flame> because as far as I can tell, the butthurt is really the only hurt for 99+% of cases
[11:32:13] <shka> because allocating memory takes time
[11:32:44] <shka> i see some legitimacy for that for servers with massive number of cores
[11:33:07] <shka> but it is not often when you actually run a single process application on such server 
[11:33:46] <shka> but even then... seems like there are more promising ways to optimize
[11:33:50] <hayley> Best I can tell, it's that Go only lets you adjust the GC by setting a heap size:live size ratio.
[11:33:52] <gilberth> The trouble is that people often believe that allocation takes time because of GC.
[11:34:27] <hayley> So instead the hacks at Uber decided to tweak that ratio from other metrics, like CPU time and absolute heap size.
[11:35:04] <hayley> At that rate /me would seriously consider making a "custom" GC control function, which actually implements such meters, and disable the force-GC-every-two-minutes too.
[11:43:51] <hayley> Also funny that Go needs to stop the world to get the heap size.
[12:02:45] <hayley> https://www.youtube.com/watch?v=NIzleISU5jw
[12:19:21] <White_Flame> makes sense if it has to walk the heap
[12:19:48] <White_Flame> I think ROOM in sbcl probably stops the world as well
[12:20:44] <hayley> AIUI they just need the heap size, not class counts. And it doesn't even need to be precise in this case, so counting pages allocated would work too.
[12:35:33] *** Joins: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr)
[12:40:06] * dave0 freshens everyones coffee
[12:41:16] <ck_> godsend
[12:42:53] *** massimo_zaniboni is now known as mzan
[12:48:40] <ck_> I feel like I could use a vacation. That's probably a bad sign on day one
[12:58:32] <hayley> https://twitter.com/miragenos/status/1477736643171815426
[12:58:32] *** Joins: mrmr1 (~mrmr@user/mrmr)
[12:59:25] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:00:11] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 268 seconds)
[13:00:11] *** mrmr1 is now known as mrmr
[13:14:33] *** Joins: pjb (~pjb@user/pjb)
[13:27:16] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[13:27:17] <White_Flame> ck_: it's been a long year so far
[13:27:44] *** Joins: Alfr (~Alfr@user/alfr)
[13:27:59] *** Joins: notzmv (~zmv@user/notzmv)
[13:29:00] *** Joins: rogersm (~rogersm@90.166.180.250)
[13:34:20] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[13:34:42] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[13:44:22] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[13:45:15] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[13:48:07] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 256 seconds)
[13:49:37] *** Joins: mrmr (~mrmr@user/mrmr)
[14:17:13] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:39a4:4154:9964:3167)
[14:24:32] <ck_> yes.
[14:27:08] <shka> gilberth: yes, i have a problem with this belief 
[14:27:24] <shka> because it highlights the high level of ignorance 
[14:29:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[14:35:02] <hayley> https://www.pcgamer.com/uk/the-evga-kingpin-rtx-3090-ti-may-feature-1275w-of-power-inputs/
[14:36:14] <selwyn> another two months of writing starts..
[14:39:29] <selwyn> happy to take 'heavy metal for studying' playlist suggestions
[14:40:47] <shka> selwyn: how heavy?
[14:41:12] <selwyn> well, i was joking, but if it even exists, any amount
[14:41:54] <shka> grab some of that https://www.youtube.com/watch?v=8KFUwxnK1b8&list=PLSdWjaYgE9dWeXH-Mlr1TZaSxqyV7Bh-F
[14:53:28] <hayley> https://www.youtube.com/watch?v=IJr61z44m6c
[14:58:57] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 240 seconds)
[15:01:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:09:04] *** Joins: mrmr (~mrmr@user/mrmr)
[15:13:17] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:42:09] *** Quits: robin (~robin@user/terpri) (Ping timeout: 250 seconds)
[15:54:55] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 256 seconds)
[16:00:07] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[16:05:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:08:17] *** Joins: shka (~herr@109.231.0.226)
[16:16:55] *** Joins: random-nick (~random-ni@87.116.180.98)
[16:21:30] <ck_> "soothing *HARD-CORE TRASH METAL* to relax and study to smiley-face heart-emoji"
[16:23:16] <selwyn> they have this sort of thing https://www.youtube.com/watch?v=UrxlRXKii10
[16:23:24] <selwyn> but its not appropriate for phd crunch i feel
[16:23:42] <ck_> "dark academia" lol
[16:23:53] <selwyn> a new a e s t h e t i c
[16:24:21] <ck_> just loop https://www.youtube.com/watch?v=WxY7O4eFHRk
[16:25:31] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[16:39:00] <shka> selwyn: oh, so if not godflesh then maybe https://www.youtube.com/watch?v=2HHopkKxJvg
[16:51:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:df45:34e6:a5aa:758) (Ping timeout: 240 seconds)
[16:52:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:fd9c:24e7:5ea:6f47)
[17:03:23] *** Joins: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1)
[17:04:19] <marcoxa> Hi ()
[17:07:15] <selwyn> https://www.youtube.com/watch?v=XlTvsHFdxiw
[17:10:29] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:12:56] <epony> that's like new wave macadamia, yes?
[17:30:28] *** Quits: marcoxa (~user@2a02:587:e209:d00:3992:634d:16cc:17f1) (Remote host closed the connection)
[17:38:07] *** Joins: Alfr (~Alfr@user/alfr)
[17:38:39] <pjb> Furuno marine GPS affected by 2022 rollover issue <https://twitter.com/mir_lentejas/status/1478000216863248385>
[17:50:46] <shka> https://www.youtube.com/watch?v=Ie2JpR7xzvg
[17:55:34] <pjb> It would take 1135 litres of pee to cause a 747's waste tank to overflow <https://www.travelstatsman.com/03012022/airports-had-to-deal-with-over-2-billion-litres-of-airplane-toilet-waste-in-2019/>
[18:27:37] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[18:34:45] *** Joins: cranium (~cranium@user/cranium)
[18:39:24] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:53:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:57:37] <dave0> nite all
[18:57:50] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:15:58] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:27:18] *** Quits: lagash_ (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[19:32:30] *** Joins: lagash (lagash@lagash.shelltalk.net)
[19:32:32] <aeth> when I hear 20s/30s, my mind switches to Celsius
[19:32:37] <aeth> but it's Fahrenheit
[19:36:27] <edgar-rft> or maybe the 2020s..30s
[19:36:59] <aeth> I mean, it's the '20s in Maryland right now, too
[19:38:36] <aeth> 29 °F / -2 °C, for those wondering
[19:39:35] <selwyn> https://arxiv.org/pdf/2112.07978.pdf
[19:40:05] <shka> 6.6°C here 
[19:40:15] <shka> which is unsettlingly warm
[19:40:36] <shka> selwyn: tardigrades?
[19:40:39] <shka> TLDR man
[19:42:37] <selwyn> i find it hard to understand the expression 'like a forty degree day' meaning 'unremarkable'
[19:42:47] <selwyn> 40f is still cold imo
[19:43:54] <shka> selwyn: depends where you live
[19:44:08] <selwyn> shka: my first thought is that a 'schrodinger's cat' experiment will be rather hard to pull off, considering how indestructible tardigrades are
[19:46:28] <selwyn> well, the expression was coined in 'the wire' which is set in maryland
[19:46:35] <selwyn> which appears to be cold as aeth says
[19:47:32] <shka> just about freezing in the middle of a winter  is cold?
[19:48:07] <selwyn> shka: depends on where you live :p
[19:48:44] <shka> i am actually really surprised that it is as warm as it is outside 
[19:49:05] <shka> i would expect something around minus ten degrees 
[19:54:40] <ck_> and it was, one week ago
[19:59:36] <selwyn> tardigrades put me in mind of panspermia
[20:00:22] <shka> selwyn: don't be silly
[20:00:23] <selwyn> if life is limited to planet earth - how could something evolve that survives micro kelvin temperatures
[20:01:41] <shka> selwyn: if such trait would be useless while limited to planet earth it would gradually vanish
[20:01:49] <shka> also, how this would work?
[20:02:13] <shka> you evolve AHEAD of time and then wait for meteor crash?
[20:02:57] <shka> also, panspermia does not solve the fundamental problem of "how first live organisms came to be"
[20:03:25] <shka> the answer "first live organisms popped up somewhere else" is a not answer 
[20:04:00] <ck_> well it was intelligently designed by a creator, why do you ask these basic questions?!?!?!
[20:04:44] <shka> ...
[20:04:46] <selwyn> note that i don't claim tardigrades themselves come from outer space
[20:05:10] <shka> selwyn: sure, but you know what i am referring to 
[20:05:14] <selwyn> there might be some inheritance of traits from older times that confer extreme survival abilities
[20:05:41] <selwyn> well, ok
[20:06:47] <pl> tardigrades' adaptations are afaik also usable in other conditions
[20:07:37] <ck_> I thought (without having done much research) that their ability to "dry preserve" was the main thing, and the other resistances were a side effect. In what ways is that wrong?
[20:08:21] <shka> makes sense
[20:08:44] <shka> no water: radiation less scary, no problem with ice crystals forming below 0
[20:08:56] <pl> essentially, bunch of extremophiles on earth happen to also work well enough in space
[20:09:25] <pl> sometimes even stuff that isn't very extremophilic in comparison
[20:09:36] <shka> also, no water: water won't boil in the vacuum of space 
[20:09:41] <pl> (the really extreme tends to find normal condition dangerous)
[20:17:50] <shka> i really don't think that panspermia is appealing
[20:18:56] <selwyn> don't you want to believe?
[20:19:43] <shka> https://www.youtube.com/watch?v=U7bZ8bLrYcU
[20:19:54] <shka> i believe in everything
[20:20:35] <shka> i am also rather skeptical about presence of alien civilization in our galaxy 
[20:29:08] <ck_> I guess you were sent here to watch us, Skully
[20:35:41] *** Joins: robin (~robin@user/terpri)
[20:37:22] <edgar-rft> I believe all my neighbours are aliens, no need for another galaxy :-)
[20:48:25] <aeth> at least where I am, 68-74°F is unremarkable. So 20-23⅓°C
[20:48:41] <aeth> beyond that, you'll notice
[20:48:50] <aeth> less humid areas might not notice the heat until it's higher
[20:54:57] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[21:16:34] <pl> https://twitter.com/jwz/status/1478022085737803776
[21:16:42] <gilberth> Good morning, #lispcafe!
[21:17:20] * gilberth offers 8°C.
[21:17:46] <shka> pl: based
[21:20:33] <edgar-rft> gilberth: I'll take it, now you have 0°C.
[21:21:50] *** Joins: robin (~robin@user/terpri)
[21:24:59] <semz> climate change is solved
[21:25:06] <semz> add one to the achievements of lisp
[21:25:13] <ck_> THE MARKET solves everything
[21:25:14] <ck_> awesome
[21:26:22] <ck_> luckily the conversion rates between the temperatures remain pretty stable
[21:27:26] <shka> well, the last time when the temperature was on average uniform across the globe was rather unforgiving 
[21:27:31] <shka> so maybe not do that?
[21:30:39] <ck_> not do what?
[21:30:57] <ck_> all the temperature will end up in the hands of the temperature elite, there won't be uniformity
[21:31:23] <ck_> celsius bubbles in the winter, when people borrow against spring returns.. it'll be a wild ride
[21:36:02] <semz> Do spring showers prove that trickle down economics works?
[21:37:26] <ck_> water is an orthogonal commodity, maybe there's derivatives and so on I'm not an expert
[21:51:56] <White_Flame> buy heat in the summer, sell heat in the winter, free money
[21:58:42] <ck_> It is a good year to watch Soylent Green https://www.imdb.com/title/tt0070723
[21:59:09] <ck_> also on topic with respect to climate and population crises, supply shortages, and so on
[22:00:15] <gilberth> I wonder: Is the achievable uptime of an macos system an inverse proportional function of the version number?
[22:01:36] <ck_> was macos 9 very stable? I seem to remember one of the single-digit having a bad reputation
[22:01:58] <gilberth> edgar-rft: Perhaps I find someone for another handful of degrees. That would be terrific as the rain we have would turn into snow and I like snow.
[22:02:07] <White_Flame> ck_:  I seem to remember none of them having a good stability reputation
[22:03:15] <gilberth> ck_: Ok. Perhaps it's an upside-down square function? What's the peak then? 10.7 or something?
[22:21:01] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:21:17] *** ec_ is now known as ec
[22:25:13] *** Joins: Catie (~user@user/catie)
[23:00:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:02:42] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[23:13:31] <MichaelRaskin> You can probably define away MacOS 9 by only asking about version number within the Darwin/XNU lineage
[23:19:12] <aeth> use NeXTSTEP versions for pre-OSX
[23:19:29] <aeth> according to Wikipedia... latest release 3.3 (1995), latest preview 4.2 (1997)
[23:19:32] <aeth> https://en.wikipedia.org/wiki/NeXTSTEP
[23:20:04] <aeth> OSX is just NeXTSTEP wearing a MacOS skin
[23:27:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:31:16] <shka> aqua skin
[23:31:39] * shka would be happy with the platinum skin for osx
[23:45:26] <aeth> what's that? is that what they called the NeXTSTEP skin?
[23:45:36] <aeth> I'm not a big fan of the 90s UNIX look and feel
[23:46:01] <shka> it is the old, pre OSX look of apple 
[23:46:02] <aeth> peak UI was probably Windows 2000 or the classic-style in Windows XP
[23:46:31] <shka> https://i1.wp.com/lowendmac.com/wp-content/uploads/appearence.png
[23:46:34] <aeth> with one exception: middle mouse buttons, since clicking the scrollwheel probably wasn't common enough in the Win2k era for Windows users
[23:46:44] <aeth> most mice probably didn't even have a scroll wheel yet
[23:47:05] <selwyn> i would have said 95 was the peak, though i didn't get to use it much
[23:47:09] <shka> aeth: it has the same vibe as the windows, but a little bit prettier in my opinion
[23:47:31] <aeth> selwyn: Windows 98 has some improvements over 95. Or, I think it was 98 and not 2k/Me that made the change
[23:47:50] <aeth> 95 was solid blue, 98+ was the more familiar gradient
[23:47:59] <aeth> 95 also assumed fewer colors than modern machines have
[23:48:14] <aeth> because it was right around that transition period
[23:48:34] <aeth> shka: better than 95? arguable. better than 2000? I don't think so. Small refinements by then
[23:48:41] <selwyn> one of my earliest computer memories is of noticing the dithering in the win95 (or 98?) loading bar
[23:49:12] <aeth> XP went for the look of a child's toy, Vista was like "oh, cool, we can do transparencies, let's do that?" and Windows 8 was "you should be using a tablet"
[23:49:28] <aeth> The XP era was also the era when every Windows app started wanting to stand out in appearance
[23:49:33] <aeth> WinAmp probably started that trend
[23:49:46] <White_Flame> shka: I like how there's a typo in there
[23:49:51] <White_Flame> "balck & white"
[23:49:54] <aeth> few apps on other OSes try to stand out and not blend in. Steam is probably the most noticeable
[23:50:05] <shka> White_Flame: that's what i found
[23:50:16] <shka> anyway, I like how platinum looked
[23:50:28] <selwyn> i would say steam tries for a consistent look and feel across platforms
[23:50:43] <aeth> which means it looks like it doesn't fit in anywhere
[23:50:48] <aeth> not that bad for gaming, though
[23:50:54] <aeth> every game goes for its own look and feel, anyway
[23:50:58] <aeth> even games in a series
[23:51:59] <shka> i also wish skulpture would play better with fresh QT https://kdepepo.files.wordpress.com/2010/02/skulpture-demo.png?w=500&h=368
[23:52:10] <selwyn> does java swing still get used?
[23:52:27] <aeth> maybe in academia
[23:52:30] <shka> i even considered fixing it myself
[23:52:38] <shka> but source code is gore
[23:52:52] <shka> selwyn: applications that i use everyday are built with swing
[23:53:31] <selwyn> swing backend for mcclim?
[23:53:45] <selwyn> shka: in house stuff?
[23:54:56] <shka> selwyn: dbeaver for instance
[23:55:06] <shka> it is old app, but it works completely fine
[23:55:13] <shka> and is still developed
[23:55:25] <selwyn> to be honest, swing was not that bad to use
[23:55:50] <shka> swing is fine, i don't know what people expect of gui toolkits anymore
[23:55:51] <selwyn> i get the impression they put a lot of effort into making it compatible with 'java ideology'
[23:56:13] <selwyn> which is not trivial
[23:58:05] <shka> also, swing works everywhere 
