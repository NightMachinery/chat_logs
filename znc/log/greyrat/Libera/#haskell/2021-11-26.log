[00:00:03] <dsal> I'm not remotely ready.
[00:00:30] <[exa]> you said "starts out pretty easy", got totally scared I missed it. :D
[00:01:40] <dsal> Oh, the first part is always like, "What's 1?"  And then you're all like... wait, I know this one.  Then a couple days later, "Solve this maze of arbitrary dimensions using only IO mechanisms in this program written for  this VM you had write."
[00:02:01] <dsal> Damnit, I left out the word "two"  "two IO mechanisms"
[00:02:05] <monochrom> Ugh, "what's 1?" is a deep question. >:)
[00:02:18] <dsal> Yeah, what page of the book is 1+1 on?
[00:02:48] * monochrom teaches monads by beginning with "what are numbers? see, that's an unhelpful question. don't ask what are monads either."
[00:03:24] <[exa]> wow cool
[00:03:26] <dsal> People are *super* blind to all the context they carry along with them.
[00:04:06] <int-e> dsal: obviously *ducks*
[00:04:55] <dsal> Someone was in my discussion about why I think "where" is actually a good thing was talking about how it works in various spoken languages using arrangements of "I'll have a cup of coffee when it's ready."  So I wrote that function out and got lost in dependencies about washing cups and getting gas before going to the store to buy a bean grinder...
[00:05:44] <monochrom> Ugh, that's one more data point for Wadler's law.
[00:06:11] <dsal> I think I just need to do more pairing.  I tend to write functions like       `mything x = theAnswer`  then I define `theAnswer = keysFrom . buildMapOf x`  etc... until it stops not compiling.
[00:06:39] <monochrom> Some big shot thought up this syntax and now we're all stuck with it for better or worse. Why would anyone waste time rationalizing or derationalizing it post mortem.
[00:07:01] <dsal> Heh.  I've not seen Wadler's Law.  It looks like a specialization of bike shedding.
[00:07:10] <monochrom> Yeah!
[00:07:52] <dsal> The argument is that you should list every requirement before you do a thing.  You know, like you're writing assembler and can't jump backwards or something.
[00:08:06] <monochrom> Just be aware that human history has come up with all sorts of grammars and orders, so different permutations make sense to different people. Deal with it.
[00:08:38] <dsal> Yeah, I can understand that.  But in a declarative language, requiring everything you see to have occurred higher up in the file is just kind of silly.
[00:08:53] <dsal> s/occurred/been defined/
[00:09:03] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[00:09:45] <monochrom> That one is easily understood as "at the time of inventing Algol and C, they wanted the compiler to be more streaming".
[00:10:39] <dsal> The guy who's a proponent for that is also into really long identifier names.  And like, having lots of identifier names.    I introduced confusing by changing  `theThingWeGotFromGetTheThing <- getTheThing; case theThing of` with `getTheThing >>= \case`   woah, that name was super helpful.
[00:13:12] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[00:13:17] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:14:48] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[00:16:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:16:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:16:14] *** Joins: wroathe (~wroathe@user/wroathe)
[00:16:29] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Client Quit)
[00:16:52] *** Joins: pavonia (~user@user/siracusa)
[00:17:16] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:17:33] *** Joins: deadmarshal (~deadmarsh@95.38.117.164)
[00:20:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[00:21:23] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:24:54] *** Quits: remedan (~remedan@balak.me) (Quit: Bye!)
[00:25:57] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[00:26:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[00:28:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[00:31:26] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:32:03] *** Joins: remedan (~remedan@balak.me)
[00:37:58] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[00:40:42] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[00:43:02] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:45:34] <dsal> Wrote tests for obviously correct code and spent a while trying to figure out how I broke it.  Obviously correct code wasn't.
[00:46:42] <dsal> Turns out about 4/9 of these value parsers were incorrect and couldn't parse things like their own examples.  Can't wait until I get the complaints about how I wrote tests for these for not being copy and pasted swaths of code.  heh
[00:48:11] <arahael> dsal: my pet irritation is working with devs who, when they review my code, keep asking me "whats weg? what's fyi?", i have a personal convention of calling my locals using acronyms of the thing they just came from.  i've given up saying "look 3 lines above. it's always 3 lines. and it's never used again anywhere else".
[00:48:54] <peutri> what *is* weg tho
[00:50:09] <arahael> let weg = WorldEngineeringGlobalists(); let wog = WorldOwnersGlobalists(); return weg.code + wog.code;
[00:50:57] <dsal> arahael: I did go readability at Google for like, 6 years.  That was a huge thing.  And it was always that.  Name something.  Use it only once on like, the next line.  But name it like you're hoping to get it published.
[00:52:00] <arahael> dsal: blegh.  frustrating.  i have bigger things to worry about, such as whether 'weg.code + wog.code' is correct.
[00:52:19] <dsal> These folks have a really bad forest-for-the-trees problem and the solutions always seem to be "make bigger trees"
[00:52:26] <arahael> dsal: i argue shorter names make it much easier for pattern matching.
[00:52:37] <dsal> So very much.
[00:53:02] <dsal> I had an example where there were two variable names that were ~7 words  long, around 50 chars or so with just two or three chars *in the middle* different.
[00:53:03] <arahael> the mathematicians got one thing right.
[00:53:50] <dsal> I understand why people don't like seeing just piles of µ • ß everywhere or something, but also like, I can tell those apart without much thinking.
[00:55:00] <arahael> it's always a few short lines above.  always obvious from context.
[00:55:15] <dsal> Random statement I woke up to in a group chat from senior guy:  "there is *no point* in abbreviating variable names"  Gave examples like yours where the context is obvious.
[00:55:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[00:56:04] <dsal> Though some of this is making more sense.  I was arguing with someone else who said he wanted to do things in a "standard" way and I'm starting to figure out that "standard" is just whatever the other dude says.
[00:56:17] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:56:30] <dsal> Doesn't have to look like anything else anyone might see in the wild.  Ironically the link to the "standard" document says very specifically it's not free to use.
[00:57:13] <arahael> dsal: it strikes me that this is exactly the same sort of conversation i had about 8 years ago when people were grappling with "var" in C#.  some people hated it.
[00:57:13] <dsal> If these guys want to argue about how to spell their bugs, that's cool, I guess.  I'm still somewhat enjoying myself.  :)
[00:57:22] *** Joins: benin (~benin@183.82.179.164)
[00:57:39] <arahael> dsal: as in, name your types, otherwise how do you know what it is? 
[00:58:13] <arahael> i am so tired of typing types three times on the same line.
[00:58:19] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e128015eb8f81d9ba9d.dip0.t-ipconnect.de)
[00:58:30] <dsal> No, like, the specific example was:  do not write `uat :: UserAccessToken`  -- write `userAccessToken :: UserAccessToken`
[00:58:39] <arahael> WorldEngineeringGlobalists worldEngineeringGlobalists = WorldEngineeringGlobalists()
[00:58:48] *** Joins: Pickchea (~private@user/pickchea)
[00:59:00] <arahael> dsal: yeah, that also annoys me.
[00:59:09] <dsal> I mostly just ignore them otherwise I'd never get anything done.
[00:59:16] <arahael> yep.
[00:59:21] <dsal> And I get so much more done than anyone else, that I'm completely OK with them firing me.
[01:00:00] <arahael> yeah i have started getting that attitude as well, way i see it, if it's so difficult to get pay rises, stop sucking up :)
[01:00:29] <dsal> I can't even get a pay raise at this place because I started at the top of the scale, so I can only go out.  heh
[01:00:42] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 260 seconds)
[01:01:20] <arahael> dsal: i hate the "scale" thing, but i've been told i am at the top myself. yet...  i know someone who recently quit got even more so yeah it's never true.
[01:01:42] <arahael> dsal: back to the type names topic!  another extreme is almosr as bad.
[01:01:54] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Remote host closed the connection)
[01:01:54] <dsal> Heh, sure.  I took a pretty big pay cut to work here just because the job itself seems more interesting.  I don't even care that much.
[01:02:01] <dsal> But year, forest vs. trees.
[01:02:41] <arahael> in swift, which is an apple language where it feels like people are just discovering things us haskell people have known for decades...  one thing is that swift lets you infer a *lot* of types. not all, but mosr.
[01:03:02] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[01:03:05] <arahael> so people in our teams are now saying: never specify types.  never, if you can get away with it, then don't.
[01:03:10] <arahael> *sigh*.
[01:03:27] <dsal> "complex" and "simple" are strangely subjective.  I deleted over a hundred lines of code, made it much harder to get wrong, fixed a few bugs, added tests, etc... and while the reduction of duplication is appreciated, it's "too complex."  I'm like... there are fewer types, fewer functions, fewer failure modes, etc...
[01:03:30] <arahael> so what i do is i add in my types... get it working... then delete them before i send it for review.
[01:03:39] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[01:03:49] <dsal> I've never tried swift.  I used to do objc back in the day.  It started getting super weird.
[01:04:09] *** Joins: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com)
[01:04:10] <dsal> Half of my app was specified in a binary blob I worked on so infrequently I forgot how to recreate it.
[01:04:10] <arahael> swift is a huge improvement over objc, not even in the same ballpark.
[01:04:18] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:04:32] <arahael> yeah.  apple's tooling sucks.
[01:05:32] <dsal> Starting haskell, it does seem like you should just line Hindley or Milner or whoever do all that type work for you and just write toplevel symbols.
[01:05:40] <dsal> GHC's like. oookay, but don't make any mistakes.
[01:06:01] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[01:06:07] <arahael> yep.  trouble is adding an extra type or two, especially in long chains, is helpful for both the human and compiler.
[01:06:24] <mreh> I cannot get my head round free, is there a good example free monad?
[01:06:46] <dsal> mreh: does this help?  https://chrispenner.ca/posts/asts-with-fix-and-free
[01:07:10] <dsal> arahael: Yeah, it doesn't seem like something you want when you're starting, but then you learn to love types.  Then you get wingman or something and never write code again.
[01:07:20] <mreh> dsal: may do!
[01:07:25] <arahael> mreh: free monads evaluate to a graph, a free standing tree of nodes, if you will.  so you end up with just an abstract syntax tree, effectively.
[01:07:54] <arahael> mreh: (approximately, anyway. there may be some lambda's and the like complicating that picture)
[01:08:00] <Rembane_> Regarding types: Agda is also good, proof by auto. 
[01:08:23] <dsal> I never got to the point of agda where it did anything other than look pretty.
[01:08:50] <arahael> dsal: yep.  the other struggle, which i am having in the current project, is where you have a language that is actually quite decent for functional programming...  but they have an OOP mindset.
[01:09:14] <arahael> dsal: nil's everywhere! protocols everywhere (instead of just defining a struct once).
[01:11:08] <dsal> There are a few of these styles that people seem to like but have always been horrifying to me.
[01:12:32] <Rembane_> Walk softly and always check for nils.
[01:12:45] <dsal> Many languages sometimes let you use nils just fine.
[01:12:54] <dsal> go, smalltalk, etc..
[01:14:26] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8d6b:77ca:adc:64ea) (Quit: gone to sleep. ZZZzzz…)
[01:15:13] <mreh> arahael: I've come accross it in beam, I guess it's being used to represent SQL syntax
[01:16:27] <dsal> I'm not sure I'm ever going to be a fan of fancy database abstractions if I'm not by now.
[01:16:37] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:8d6b:77ca:adc:64ea)
[01:17:06] <mreh> beam is great
[01:17:45] <mreh> it helps to know some depended typing to understand what's going on though
[01:19:23] <dsal> postgresql-simple seems perfect for just about everything I've needed.  I made a `Transaction` monad for transactionally composing lower level stuff.  You can also compose FromRow and ToRow so you can smash bits together.  There's still some dynamic parts that can occasionally lead to confusion, but the confusion is "why does this test fail with this error message that tells me what I did wrong?"
[01:20:02] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:20:36] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:20:49] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[01:23:15] <mreh> with type safety you don't need transations :^)
[01:24:32] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[01:25:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[01:25:27] <arahael> mreh: i'm assuming that is tongue in cheek :)
[01:25:50] <mreh> of course
[01:26:24] <monochrom> I had never seen "weg" but I could guess "working example".
[01:26:33] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Remote host closed the connection)
[01:26:39] <monochrom> Although, IMO "working" is redundant.
[01:26:52] <arahael> monochrom: i'd call that one 'we' ;)
[01:27:15] <arahael> dsal: i definitely prefer thin abstractions these days.
[01:27:45] <arahael> well, nearly 9am.  i should probably get ready to walk to the cafe.  for my second coffee.
[01:29:02] <arahael> and to play with jackdk's aeson 2.0 compatible amazonka, he fixed that up whilst i was trying to sleep!
[01:29:15] <arahael> amazing.
[01:30:11] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[01:31:12] <dsal> arahael: The amazonka 2.0 stuff is a bit disruptive, but nice.
[01:31:25] <dsal> Probably not related, but it does have a number and name in common with stuff you typed.
[01:32:35] <arahael> there's no perfect solution w.r.t. AWS :(
[01:33:11] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[01:34:07] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:34:47] *** Joins: drdo (~drdo@roach0.drdo.eu)
[01:35:17] *** Quits: michalz (~michalz@185.246.204.33) (Remote host closed the connection)
[01:36:15] *** Quits: alx741 (~alx741@186.178.109.248) (Ping timeout: 250 seconds)
[01:36:53] <jackdk> arahael: I should've been trying to sleep too, but here we are
[01:37:09] <jackdk> thanks for the nerdsnipe, I guess? It needed to happen at some point.
[01:37:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:38:06] <arahael> jackdk: a pleasure - and thanks again! i'll be checking it out soon!
[01:38:31] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:41:02] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Remote host closed the connection)
[01:41:28] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:43:41] <Athas> How do I make haskell-mode in Emacs run a the ghci session for my project within the Nix environment defined by my shell.nix?
[01:43:49] <Athas> My Emacs does not (and should not) run within that Nix environment.
[01:45:40] <energizer> Athas: have you looked at emacs-direnv?
[01:46:36] <dsal> arahael: I don't mind amazonka 2.0.  I'm glad I picked it up when I did because I found a pretty big hole in it.  But it was fixed up quickly.  Now I just need it to get rolled out.
[01:46:44] <Athas> energizer: I am now.  It might solve the problem, depending on how exactly haskell-mode works (although I don't normally use direnv).  Have you solved it this way?
[01:47:24] <energizer> Athas: i haven't tried it with haskell but for other things yes
[01:49:22] *** Joins: alx741 (~alx741@186.178.108.193)
[01:51:42] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[01:52:44] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[01:53:19] *** Joins: mmhat (~mmh@55d42d28.access.ecotel.net)
[01:55:10] <hololeap> anyone else go to ruby sometimes, just to use nokogiri? why does that library feel so much more intuitive than anything than any equivalent haskell library? is it that ruby's syntax makes it easier to bang out something that's "good enough" in 15 minutes?
[01:55:12] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:55:40] <dsal> What's that?  I've not seen a ruby in over 10 years.  :)
[01:55:48] <jackdk> athas: the other option would be to rummage around with something like `apropos-variable` and find how haskell-mode configures the command to run, possibly using a `.dir-locals.el` file to set it for each project
[01:55:56] <jackdk> s/the other/another/
[01:55:56] <hololeap> it's a html/xml parsing library
[01:56:07] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 268 seconds)
[01:56:08] <dsal> ah, I've probably used it.
[01:56:19] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[01:56:36] <dsal> I've done some sloppy in html in haskell, I think.  Definitely a bit of XML.  But only a little bit because I don't go to bad  neighborhoods very often.
[01:57:07] <hololeap> I busted something out that removed all the javascript off a bunch of downloaded html in like 15 minutes. I doubt I could have done it that fast in haskell, and I don't understand why. I hadn't used the library in while, either.
[01:57:17] <jackdk> no, but that's more because i tend not to have to do that sort of thing. I haven't had much fun with either hxt or xml-conduit, but were I to do it again today I would probably reach for lens
[01:57:27] <Athas> jackdk: I'm surprised there is not ready machinery to handle this.  I'd expect everyone who develops Haskell on NixOS with Emacs to run into this.
[01:57:46] <Athas> Maybe there are just not that many of those.
[01:58:06] <jackdk> I use ghcid (though at some point i want to wire lsp support into my emacs) and I use .dir-locals.el to drive this. I can pastebin a snippet, if you'd like?
[01:58:06] <dsal> hololeap: I had to grab some crap out of html here:  https://github.com/dustin/tesla/blob/master/src/Tesla.hs#L122
[01:58:21] <monochrom> Unpopular opinion but the arrow-based interface of hxt is pretty intuitive to me.
[01:59:27] <monochrom> But at the meta level, I reckon that Haskellers no longer care about html and xml, so there hasn't been any improvement or innovation for years.
[02:00:04] <mreh> monochrom: because SPAs are so popular?
[02:00:15] <monochrom> I don't know what's SPA.
[02:00:21] <mreh> single page application
[02:00:36] <dsal> My hot tub's heat control relay is broken.
[02:00:55] <monochrom> But all the Haskell webdevs rave about various json solutions instead of html solutions.
[02:01:33] <monochrom> or s/json/RESTful API/
[02:01:48] *** Quits: deadmarshal (~deadmarsh@95.38.117.164) (Ping timeout: 256 seconds)
[02:02:10] <mreh> does anyone know how to write a beam database backend?
[02:02:14] <monochrom> A decade ago Haskellers did not have a lot of webdevs but there were a lot of html scrapers.
[02:02:29] <monochrom> Now there are no html scrapers but a lot of webdevs and "api" people.
[02:02:37] <mreh> beam-mysql is behind beam-core and I'd really like to get it to compile with a recent snapshot
[02:03:04] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[02:03:16] <mreh> monochrom: I'm actually scraping HTML with haskell right now
[02:03:21] *** Joins: tpefreedom (~tpefreedo@user/tpefreedom)
[02:03:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[02:04:07] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[02:04:10] <mreh> what are people using to develop their APIs now? I really like servant
[02:04:18] <monochrom> On the technical side, although every Arrow instance in hxt is also a Monad instance, the arrow mode of thinking, or rather, the Klesli arrow view of >=>, makes xml scraping code look really like what XPath dreams of. The code reads like a path. That's what makes me like it.
[02:04:28] <hololeap> hm, now that I look at my ruby script, I wonder if the language's built-in syntactic for PCREs and maps makes it more suitable for expressing HTML parsing, without taking the time to import 20 modules
[02:04:44] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:05:39] <dsal> mreh: I like scotty.  I've never intentionally used servant, but this project is.
[02:05:51] <hololeap> (if anyone is curious, http://sprunge.us/SmPRne)
[02:05:52] <dsal> "this project" == people at work.
[02:06:21] *** Parts: tpefreedom (~tpefreedo@user/tpefreedom) (Leaving)
[02:07:24] <mreh> actually using haskell at work, I can only dream
[02:07:46] <mreh> I'll have a look at scotty
[02:08:01] <monochrom> Stay tuned for the next horror story dsal tells you about coworkers though >:)
[02:08:55] <mreh> if only they listened
[02:08:58] <hololeap> ruby really is a fun language, but I will never make anything "serious" with it again
[02:09:07] <dsal> haha.  servant is a funny one because they're all about "simple haskell" but like, good luck finding a definition of that.  Many I found suggest not to use servant.
[02:09:12] *** Joins: zebrag (~chris@user/zebrag)
[02:09:15] <monochrom> Apparently humans are still humans. Coworkers who have agreed to switch to Haskell still preserve previous idiosyncracies, superstitious ideologies, and cargo culting.
[02:09:52] <dsal> Yeah.  I do generally prefer arguing over mostly good tools vs. just not having any good tools to argue over.
[02:09:58] <hololeap> what in the world does "cargo culting" mean in this context?
[02:10:16] <dsal> Generally just doing X because X is the right thing to do..
[02:10:24] <dsal> Tautologically speaking.
[02:10:39] <monochrom> Blindly insisting on long identifier names, for example.
[02:10:48] <jackdk> "cargo culting" - only using stuff that's been rewritten in rust ;-)
[02:10:54] <dsal> ha
[02:10:54] <monochrom> hahaha
[02:11:13] <hololeap> isn't that also known as a "style guide"?
[02:11:30] <monochrom> IMO that's orthogonal.
[02:11:42] <dsal> Eh, sort of.  Declaring something is Better from an authority  needs an argument.
[02:12:14] <hololeap> that's fair. although sometimes consistency is what matters and so _something_ has to be the pattern to follow
[02:12:25] <dsal> Don't use foldMap, don't use sum, don't use either, don't use unless, etc...  are closer to cargo culting.
[02:12:28] <monochrom> Given a style guide, one can still understand why the guide makes sense normally, and when to make exceptions.
[02:12:56] <monochrom> Without a style guide, there are still a trillion "best practice"s to cargo-cult over.
[02:13:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[02:13:13] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8d6b:77ca:adc:64ea) (Quit: gone to sleep. ZZZzzz…)
[02:13:15] <mreh> "best practice" - makes my skin crawl every time
[02:13:26] <hololeap> well, I can see how in general it could be a positive but taken too far it could be limiting
[02:14:10] <dsal> I was suggesting foldr vs. a foldl' of a flipped thing and said foldr is probably a better thing and got linked to that lexi-lambda bug thing about why foldl' is better when you're going to definitely use everything.  Big explanation.  Also said it often doesn't matter.  Like in this case where there were ~5 things.
[02:14:27] <dsal> I end up rewriting stuff a lot because hlint blocks mycommit.
[02:14:42] <Rembane_> dsal: I suppose you're not allowed to turn off hlint?
[02:14:48] <hololeap> yeah that's lame
[02:15:19] <monochrom> Bloggers die die die.
[02:15:27] <dsal> Thing I used today that I had to rewrite:   either, fromJust, error.   In a test.  Like, definitely fail if you can't do this setup thing that has to work.  But OK, fine, it'll return a Maybe and then use the higher level error message thing to do roughly the same thing error does but I guess throwIO?
[02:15:39] <hololeap> but, I also see the other side, where writing something in terms of some super-advanced categorical viewpoint might make the code really hard to understand to outsiders
[02:15:42] <dsal> Turning of hlint will let me commit, but it'll still fail CI
[02:16:09] <dsal> hololeap: my "that's too fancy" thing right now is a record with a type variable instead of having two ~identical records.
[02:16:26] <hololeap> haha
[02:16:34] <dsal> Except the fields have different names and you have to copy all the values over and you have to write a test that makes sure you copied all the values over, etc...
[02:17:04] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[02:17:19] <dsal> But forest for trees.  I wrote a test for the actual parser and found that 4/9 of the things being parsed couldn't take the actual input they expect.
[02:21:55] <dsal> I generally get lectured for writing a function in a test instead of copying data structures over (because good test code and good application code don't look similar).  It's kind of funny.  OK.  But also you didn't write test coverage for this so maybe your principles can be oncall.
[02:22:02] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[02:23:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:23:17] *** Quits: xff0x (~xff0x@2001:1a81:5377:a800:360f:89df:3dda:3328) (Ping timeout: 250 seconds)
[02:24:02] *** Joins: xff0x (~xff0x@2001:1a81:5377:a800:3eaf:ed99:f02b:b5f2)
[02:25:21] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:25:28] <arahael> mreh: Isn't scotty unmaintained?
[02:26:55] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[02:27:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[02:30:20] <maerwald> PVP isn't particularly clear about whether "changing behavior of a function" counts as a breaking change or not... I guess I'm allowed to consider it one though
[02:30:41] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:31:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Ping timeout: 245 seconds)
[02:32:48] <dsal> arahael: unmaintained, or perfect?
[02:32:56] <arahael> dsal: Let me try and find the ticket.
[02:33:01] <maerwald> I think scotty blows up with large body sizes?
[02:33:25] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[02:34:12] <arahael> OOh!  As of... May this year, it has new maintainers! https://github.com/scotty-web/scotty/issues/274
[02:34:50] <arahael> maerwald: Not too sure of PVP myself, I haven't properly read it...  But I'd think we'd err on assuming something's breaking if we're not sure, in terms of versioning?
[02:35:51] *** Quits: slack1256 (~slack1256@181.42.50.148) (Ping timeout: 250 seconds)
[02:36:00] <arahael> maerwald: I don't see any tickets against large body sizes.  Incidentally, what's your go-to small webserver framework library?
[02:36:26] <hpc> it depends on what "changing behavior of a function" means
[02:36:28] <arahael> Since writing my own gemini server (just as a hypothetical test case, really), using Network-simple-tls, I'm suddenly inspired at how easy it is to write the.
[02:36:32] <maerwald> I avoid web servers like a plague... the only time I write them is if someone throws a lot of money at me
[02:36:37] <hpc> https://xkcd.com/1172/
[02:36:41] <maerwald> and then most of the time servant is already in use
[02:36:42] <monochrom> "behaviour change" may count as bug fix or count as feature change.  We normally say "point release" for bug fixes, even though there is a facetious logic saying that it "breaks" "backward" "compatibility". There is even an xkcd for that.
[02:37:14] <monochrom> For feature changes, there are also backward compatible ones and incompatible ones.
[02:37:24] <maerwald> monochrom: well, lets put it this way... if you change behavior of a function in *filepath*, would you rather have a point release or a major bump :p
[02:37:39] <hpc> it depends
[02:37:40] <monochrom> Yes hpc has got the xkcd in question :)
[02:37:50] <maerwald> or do you not mind your haskell program deleting different files now
[02:38:01] <monochrom> The only correct answer is "it depends".
[02:38:23] <hpc> haha
[02:38:30] <hpc> it's like scrollback is backwards today
[02:39:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[02:40:05] *** Joins: Skyfire (~pyon@user/pyon)
[02:40:22] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:40:27] <monochrom> You have to take specifications aka user expectations into account.
[02:40:57] <monochrom> And you have to judge what's facetious and what's reasonable.
[02:41:04] <hololeap> maerwald: wouldn't it be considered a breaking change if any input no longer produces the same output?
[02:41:38] <maerwald> I think it depends whether you truly consider it a bug or simply behavioral change
[02:41:42] <hpc> let's go full nihilist - any version bump is a breaking change because there might be a sha256 collision in its nix derivation :D
[02:41:48] <monochrom> If your old version took 10 seconds, your new version takes 1 second, all else being equal.
[02:42:28] <monochrom> Someone can facetiously say "this breaks my usage of your algorithm to time 10 seconds" but you should just give them the finger. This is not a breaking change.
[02:43:58] <monochrom> At the meta level: When will programmers understand that technicalities are never the only considerations?
[02:44:23] <maerwald> I'm thinking more: does major bump make people read changelogs? 
[02:44:37] <maerwald> I don't read changelogs for minor version bumps
[02:44:42] <hpc> if that's your metric we don't need version numbers at all
[02:44:47] <maerwald> :D
[02:44:48] <geekosaur> does anything make people read changelogs?
[02:44:53] <dsal> I don't read logs until my tests break.
[02:45:09] <monochrom> Not me. "This is an exciting release!" makes me read changelogs.
[02:45:25] <dsal> I skip docs and go straight to the excitement.
[02:45:58] <geekosaur> "This is a release" makes me read changelogs, unless I've been following along with development (only a couple of packages, one non-Haskell)
[02:46:11] <hpc> i wait for #haskell to talk about it
[02:46:17] <geekosaur> but then, I'm weird. I also read docs.
[02:46:19] <hpc> i didn't even know ghc 9 was out until a week ago
[02:46:36] <arahael> How would I troubleshoot this issue when doing a 'cabal build --verbose'? dist-newstyle/src/amazonka-d53e9f8a972a20ec/amazonka: getDirectoryContents:openDirStream: does not exist (No such file or directory)
[02:46:44] <monochrom> I read changelogs when I think I need to know. I don't read when I think I don't need to know.
[02:46:48] <dsal> I would be so bored if I couldn't just roll everything forward and see what the day brings me.
[02:47:05] <dsal> arahael: Ooh, did the compiler delete the file?
[02:47:18] <arahael> dsal: How would I find out? :D
[02:47:23] <maerwald> arahael: did you specify an incorrect subdir?
[02:47:25] <monochrom> So, once again, you won't be able to find a correlation with any machine-checkable formal technicalities such as "version bump".
[02:47:34] <arahael> maerwald: That's possible! Let me check...
[02:47:41] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[02:47:50] <maerwald> it's lib/amazonka
[02:48:07] <jackdk> that repo did get rearranged. amazonka is now under lib/amazonka, amazonka-core is now under lib/amazonka-core, generated service amazonka-foo is under lib/services/amazonka-foo
[02:48:33] <monochrom> When are you going to learn that I make decisions based on like two dozen variables and most of them are fuzzy social constructs?
[02:48:54] <arahael> jackdk: Ah, thanks.
[02:48:56] <Axman6> jackdk's been on a "Get Amazonka 2.0 released" rampage for the last few months, and I am very thankful to him for it <3
[02:48:59] <monochrom> This is where even machine learning performs better than human learning.
[02:49:10] <Axman6> What a top bloke
[02:49:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:49:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:49:56] *** Joins: wroathe (~wroathe@user/wroathe)
[02:52:03] <arahael> jackdk: With cabal.project, can I specify 'subdir/*' to say, "use all these...", instead of specifying each individual package?
[02:52:15] <maerwald> I hope not :D
[02:52:33] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:52:34] <jackdk> Axman6: it's frustrating when I say "I think I fixed your bug, can you test?" and people are like "well, er... I don't have the system to test on any more" - this is "the cloud", just stand up your own storage bucket or VM for a few minutes please
[02:52:42] <maerwald> file globbing is generally a plague in metadata
[02:53:32] <arahael> I've now got: cabal: sdist of amazonka-core-2.0: filepath wildcard 'README.md' does not
[02:53:42] <jackdk> arahael: I don't think so but if you're on cabal-install >= 3.2.0.0 you should be able to list multiple subdirs
[02:53:51] <jackdk> even though the key is still `subdir: `
[02:53:56] <arahael> jackdk: Ah, neat!
[02:53:57] <jackdk> https://github.com/haskell/cabal/blob/8d959d0b17751a235052c05c3ba7eae2b8bb6ddc/cabal-install/changelog#L12-L27
[02:54:30] <maerwald> arahael: that looks like a bug in the repo
[02:54:39] <arahael> maerwald: Mine or jackdk's?
[02:54:53] <maerwald> https://github.com/brendanhay/amazonka/blob/bc2f5d28def1ecb1d569b265a7a415c28307fd71/lib/amazonka-core/amazonka-core.cabal#L14
[02:55:18] <dsal> Is amazonka 2 coming out soon/
[02:55:28] <dsal> I updated some of my projects a bit back, but haven't been keeping up.
[02:55:38] <Axman6> Itis if you help test it dsal
[02:55:41] <arahael> maerwald: Ah, thanks. :D
[02:55:49] <dsal> Axman6: I did!  Filed a bug and everyting.
[02:56:01] <Axman6> More test pls
[02:56:10] <dsal> I only found the one bug.  :)
[02:56:17] <jackdk> I hope I fixed it
[02:56:20] <dsal> I use S3 a lot, some lambda, SQS.
[02:56:24] <dsal> Someone fixed it.
[02:56:29] <jackdk> phew
[02:56:30] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[02:56:43] <dsal> At work I'm using SES, but that's not going to be updated any time soon.
[02:56:50] *** Quits: max22- (~maxime@2a01cb088335980085c825298679dd8e.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:56:55] <jackdk> dsal: the last PR for the milestone is aeson-2.0 support, then Brendan needs to regenerate docs, then we tag release and announce RC and give people a chance to catch up and find breakage, then hackage.
[02:57:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[02:57:20] <dsal> Neeat.  So I guess I should test against that.
[02:57:49] <jackdk> He's been pretty responsive after I went through and triaged all the issues, but he's got some work stuff this week.
[02:58:06] <arahael> jackdk: I have to get back to work (On Swift, not haskell. *sigh*.  But it pays the bills).  Hopefully I'll find more time over the weekend to play with this, even if that means cloning your repo, as it looks like I might be able to fix things myself a bit.
[03:01:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[03:01:45] <jackdk> arahael: https://github.com/brendanhay/amazonka/pull/714
[03:02:30] <jackdk> the aeson-2.0 branch is rebased atop latest `main`, so have another crack when you're off work
[03:03:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[03:03:57] <arahael> jackdk: Nice, it gets me past that issue, I'll have to look at this after work later as I have to fiddle with versions and all that crap with my project. :)
[03:04:05] <arahael> Amazing work, I love IRC. :)
[03:04:08] <arahael> (And amazonka)
[03:05:38] <Axman6> If you ever meet jackdk, please buy him a beverage of his choice (i'll be doing this next time I'm in Brisbane... I should go to Brisbane). It's hard to state just how much work he's put into finally getting a release of Amazonka, lots of cat herding, lots of patching. I wish I had as much will
[03:08:03] <jackdk> thankfully it was a solid project to try and save - Brendan's generator code has either hit all the corner cases already or was built with a tremendous amount of foresight
[03:09:23] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[03:11:25] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:19:45] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[03:24:53] <arahael> Woah - jack's aussie?
[03:27:29] *** Joins: sunarch (uid526836@user/sunarch)
[03:34:49] <Axman6> All the best Haskellers are
[03:34:56] *** Quits: sayola (~vekto@dslb-002-201-085-156.002.201.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[03:35:13] <hpc> can confirm, am not an aussie :P
[03:38:44] <Axman6> (Or British, obviously)
[03:40:17] <hpc> reverse aussie
[03:41:40] <Axman6> Where the ciminals come from
[03:44:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:55:13] *** Joins: sayola (~vekto@dslb-092-072-095-186.092.072.pools.vodafone-ip.de)
[04:00:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:00:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:00:25] *** Joins: wroathe (~wroathe@user/wroathe)
[04:00:30] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 265 seconds)
[04:00:47] *** Joins: sm2n (~sm2n@user/sm2n)
[04:00:48] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:a418:17da:6b4f:5fc3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:04:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[04:05:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:05:22] <monochrom> dons is probably from Australia too. Certainly went to a university there.
[04:05:34] <Axman6> yeah I believe so
[04:05:42] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[04:05:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:06:21] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:07:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Remote host closed the connection)
[04:08:00] *** Joins: Skyfire (~pyon@user/pyon)
[04:09:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[04:14:25] *** Quits: mreh (~matthew@host81-157-195-163.range81-157.btcentralplus.com) (Quit: Lost terminal)
[04:14:53] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:4d2d:d973:9795:262a)
[04:16:43] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[04:16:44] *** Quits: mmhat (~mmh@55d42d28.access.ecotel.net) (Read error: Connection reset by peer)
[04:17:58] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:18:06] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e128015eb8f81d9ba9d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:19:03] <arahael> nice.  so i have a chance... eventually...
[04:19:10] <arahael> slim chance.
[04:19:56] <jackdk> the aussie haskell meetups have been a bit quiet of late, but there's still some chatter on fp-syd
[04:22:41] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[04:25:34] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[04:27:45] <arahael> is that on slack?
[04:28:24] <arahael> unfortunately i find meetups in person difficult.
[04:28:57] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[04:29:06] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[04:30:15] <EvanR> yeah accessing meetups in australia is challenging, it's an island after all
[04:31:03] <arahael> i live on that island.   the island is the size of the USA, though.
[04:31:31] <dsal> I've been there once.  I saw a wallaby
[04:31:47] <arahael> but my challenge is that organising interpreters basically cost anywhere betweem $120 to $240 an hour...  unless i rely on voice to text apps which are also exhausting.
[04:32:16] <monochrom> Ugh it's large enough to be called a continent!
[04:32:38] <arahael> it is a continent!
[04:32:44] <arahael> it's an island continent.
[04:32:54] <EvanR> you could also say it's the size of pluto... but not sure if that is helping or hurting
[04:32:59] <monochrom> Ugh tautologically every continent is an island continent...
[04:33:28] <monochrom> OK nevermind.
[04:33:45] <arahael> :P
[04:34:53] <EvanR> this island earth
[04:35:29] <dsal> Wadler's Law question:  What's the difference between syntax and lexical syntax?
[04:35:42] <hpc> how frequently it's discussed
[04:36:04] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[04:36:04] <dsal> haha
[04:36:05] <EvanR> in the old days people distinguished lexers and parsers
[04:36:15] <EvanR> in the dark times before monads
[04:36:22] <monochrom> I feel that that question will cause expoentially more arguments than just arguing over a particular language's syntax... >:)
[04:36:23] <hpc> a lexer splits a string into a stream of tokens
[04:36:35] <hpc> a parser turns a stream of tokens into an AST
[04:36:45] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:37:00] <monochrom> We still separate Alex from Happy.
[04:37:02] <dsal> I just don't quite understand what this was referring to in the 90s.
[04:37:08] <dsal> Why can't Alex be Happy?
[04:37:28] <EvanR> lexers allowed the use of regex
[04:37:32] <EvanR> so it was cool
[04:37:39] <dsal> Oh *that* syntax?
[04:37:44] <monochrom> Alex thought that conquering Persia would make him happy.
[04:37:51] <dsal> I used lex back in the day, but never yacc.
[04:38:48] <hpc> you didn't have parser combinators, and nobody wanted to implement a parsing system that could do tokenization in a nice composable way
[04:39:03] <hpc> so instead they applied the universal solution to difficult parsing problems - add another pass
[04:39:04] <EvanR> i blame regex for why anyone who works in a boring coding job hates coding
[04:39:22] <dsal> I avoid regex pretty hard.
[04:39:28] <dsal> Possibly too hard, but I doubt it.
[04:39:52] <hpc> regexes have an undesereved reputation of being difficult
[04:40:12] <hpc> people can't handle backslashes apparently
[04:40:13] <geekosaur> well, in the really old days, it was so lexing and parsing could fit in the same process address space
[04:40:22] <hpc> (like lisp with parens :P)
[04:40:30] <geekosaur> but this didn't apply to haskell; by then it was just habit
[04:40:36] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:17] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[04:41:19] <hpc> from the perspective of computational complexity, regexes are extremely simple even
[04:41:36] <hpc> regexes are just a particular way of representing a finite state machine
[04:41:43] <geekosaur> also, as I read this, lexical syntax meant bird tracks
[04:41:44] <EvanR> great example of how humans and computers differ
[04:42:15] <monochrom> I like having a tokenization stage that eliminates the difference between "f (x)" and "f(x)".
[04:42:41] <EvanR> how does that work
[04:42:47] <dsal> The naming argument is dumb, but the forest-for-trees part I hope got through a bit is that they're so focused on naming "things" that they completely avoid naming patterns and algorithms.  Let's have big walls of code marching off to the right in case statements but start a fight if I point out that all of that is just doing "doThisOrFailTheTest", so why don't we just name that *idea* and move on.
[04:42:49] <jackdk> arahael: there is a slack. I don't know if their meetups are in-person or online, they've had to do both at different stages for pandemic-related reasons
[04:42:56] <EvanR> without totally parsing everything in the process
[04:43:14] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:4d2d:d973:9795:262a) (Quit: Textual IRC Client: www.textualapp.com)
[04:43:24] <hpc> EvanR: both can lex to ["f", "(", "x", ")"]
[04:43:36] <monochrom> Not sure what you mean by "totally parsing".
[04:43:44] <EvanR> only if space is always irrelevant?
[04:43:49] <hpc> you don't need to balance parens or anything like that
[04:44:04] <EvanR> space doesn't matter in some parts of haskell but does in others
[04:44:04] <hpc> it would just as easily lex "f )x("
[04:44:18] <monochrom> Tokenization has to go through all of the input, yes. But only streamingly.
[04:44:25] <dsal> I like the look of `f )x(`
[04:44:32] <monochrom> Tokenization does not have to be smart, no.
[04:44:34] <hpc> EvanR: yeah, you'd write a specific lexer for what you need
[04:44:34] <dsal> Looks neat in my font.  Gonna build a parser.
[04:44:40] <hpc> like you write a specific parser :P
[04:44:53] <hpc> dsal: just swap the glyphs
[04:45:11] <dsal> Oh yeah.  Do it in the font.  That's lazy thinking.
[04:45:12] <hpc> make a font instead
[04:45:21] *** Quits: alx741 (~alx741@186.178.108.193) (Ping timeout: 245 seconds)
[04:45:39] <monochrom> It just has to recognize token boundaries and classify tokens and report that the token stream is: identifier f, open paren, identifier x, close paren.
[04:45:42] <dsal> Why even create a language if it doesn't need its own font?
[04:46:10] <dsal> Are there modern lexers that can care about unicode classes?
[04:46:13] <hpc> it doesn't even have to say f is an identifier
[04:46:14] <geekosaur> go back to agda? :þ
[04:46:22] <hpc> it just needs to know it's a lettery word of some sort
[04:46:27] <EvanR> agda does not like this idea lol
[04:46:28] <hpc> maybe it's a keyword
[04:46:33] <monochrom> Your CFG grammar then does not have to say "whitespace*" 200 times.
[04:46:36] <hpc> maybe it's not a keyword in this particular context :D
[04:46:43] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:46:46] <monochrom> Unlike, for example, the XML grammar.
[04:46:51] <dsal> Collection of different types of whitespaces.
[04:47:34] <EvanR> now I'm not sure where whitespace matters or not... "a-b" "f -x"...
[04:47:46] <monochrom> For better or worse, due to self-perpetuating education or otherwise, it's also intuitive.
[04:47:47] <hpc> EvanR: depends on the language
[04:48:01] <dsal> a-b is just another symbol in some languages.
[04:48:45] <dsal> And then agda's special _ thing.
[04:48:57] <dsal> One thing I've learned is that everything I know is wrong.
[04:48:57] <EvanR> wut
[04:49:04] <hpc> agda's operator parsing is neat, but very simple lexing-wise
[04:49:14] <monochrom> Because when teaching a student the syntax of Haskell for example, I just have to say "an expression can be identifier, +, identifier".  I don't have to say where there can be optional spaces. And the students alreeady knows.
[04:49:20] <hpc> infix operators always have whitespace between them
[04:50:23] <EvanR> 2 ^ x 
[04:51:06] <dsal> I was going to ask how much pain it'd be to get Haskell using λ for lambda because surely nobody uses that as a variable, then I realize I do that.
[04:51:32] <geekosaur> didn't we already find a math-operator lambda instead of the Greek lowercase letter?
[04:51:34] <EvanR> why not use a different color for variables
[04:52:02] <dsal> I was briefly surprised that there's more than one λ
[04:52:03] <monochrom> hpc: It is customary and nice for most languages for the tokenizer to right away classify identifiers vs reserved words.
[04:52:34] <monochrom> However, you would be right about PL/I, in which "if if==0 then then=1 else else=if" can make sense.
[04:52:35] <dsal> That's what I need.   `λ λ -> λ` but with a different λ for the first λ obviously.
[04:53:21] <EvanR> blue for types, red for values, or something
[04:53:27] <monochrom> which is a snark way to say: ugh, please don't do that, please classify identifiers vs reserved words ASAP.
[04:53:35] <hpc> > let as = [1..] in as
[04:53:37] <lambdabot>  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,...
[04:53:42] <hpc> i was thinking of haskell specifically
[04:53:47] <hpc> "as" is a keyword
[04:53:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:53:56] <monochrom> No.
[04:54:19] <hpc> yes? it's part of import syntax
[04:54:29] <monochrom> And yet unreserved.
[04:54:38] <hpc> i didn't say reserved :P
[04:54:54] <EvanR> import qualified As (as) as As
[04:55:11] <monochrom> Damn you.
[04:55:30] <dsal> Where does "as" go in that import?
[04:55:30] <hpc> unless you want to explain in your parser that yes, import syntax uses a specific identifier in the middle of it for magical purposes
[04:55:42] <hpc> EvanR: <3
[04:56:09] <hpc> you're missing something though
[04:56:37] <hpc> this needs data As, with constructor As
[04:56:49] <dsal> import qualified "as" As (As(as)) as As
[04:56:56] <arahael> jackdk: yeah.  aussies seem to prefer in person or video meetings.  both which i find less accessible.
[04:57:04] <EvanR> well capital As is a bit weak 
[04:57:19] <monochrom> Oh hey "hiding" is unreserved too, let's do it!
[04:57:21] <dsal> It's not bad (at being bad) if you read it aloud.
[04:58:04] <dsal> import qualified "qualified" Qualified (As(qualified)) as Qualified
[04:58:19] <EvanR> > let qualified = hiding; hiding = qualified; as = as in []
[04:58:20] <lambdabot>  []
[04:58:45] <EvanR> > let import = qualified in []
[04:58:46] <lambdabot>  <hint>:1:5: error: parse error on input ‘import’
[04:58:49] <EvanR> oooo
[04:58:54] <hpc> that's a shame
[04:59:08] <hpc> i really wanted "from future import __something__" to be a valid haskell expression
[04:59:10] <monochrom> I guess you all prefer PI/I haha
[04:59:18] <geekosaur> import pretty much has to be a reserved word for the rest to not be
[04:59:46] <hpc> geekosaur: nope, you can say top-level expressions aren't allowed, and nested imports aren't allowed
[04:59:58] <hpc> and in import syntax, '=' only occurs inside parens
[05:00:02] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:00:05] <hpc> totally unambiguous!
[05:00:12] <hpc> nothing could be simpler!
[05:00:16] <monochrom> Yeah if there is no "=" then it's an import clause. If there is "=" then it's a definition clause.
[05:00:41] <EvanR> the poor implementors of the language
[05:01:17] <EvanR> when will AI be able to do that job
[05:01:23] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[05:01:44] <monochrom> The additional benefit is that now Alex and Happy cannot help you parse Haskell, so you really have to use a monad parser combinator library.
[05:02:55] <janus> my dad just threw away his PL/I book :(
[05:05:47] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 250 seconds)
[05:07:34] *** Joins: smaris (~smaris@cpe-75-82-50-132.socal.res.rr.com)
[05:10:10] *** Joins: Cajun (~Cajun@user/cajun)
[05:12:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:12:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:12:47] *** Joins: wroathe (~wroathe@user/wroathe)
[05:15:22] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[05:18:31] *** Joins: dolio (~dolio@130.44.130.54)
[05:22:51] *** Quits: smaris (~smaris@cpe-75-82-50-132.socal.res.rr.com) (Ping timeout: 245 seconds)
[05:24:27] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[05:28:04] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:28:49] *** Joins: alx741 (~alx741@186.178.109.84)
[05:37:40] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 260 seconds)
[05:48:14] *** Quits: alx741 (~alx741@186.178.109.84) (Ping timeout: 260 seconds)
[05:52:52] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:53:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[05:55:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[05:55:46] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:8d6b:77ca:adc:64ea)
[05:56:18] <remexre> where does resource management live in fused-effects these days? sounds like they were moving it to -exceptions, but I don't see it there
[06:01:03] *** Joins: alx741 (~alx741@186.178.109.84)
[06:08:32] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:08:57] *** Quits: xff0x (~xff0x@2001:1a81:5377:a800:3eaf:ed99:f02b:b5f2) (Ping timeout: 268 seconds)
[06:10:16] *** Joins: xff0x (~xff0x@2001:1a81:53bb:9600:6878:c21:1339:de41)
[06:11:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[06:11:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[06:12:03] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[06:13:04] *** Joins: smaris (~smaris@cpe-75-82-50-132.socal.res.rr.com)
[06:13:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[06:15:46] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Ping timeout: 245 seconds)
[06:16:42] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:19:28] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:22:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[06:30:27] *** Quits: EvanR (~evan@user/evanr) (Quit: Leaving)
[06:31:35] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[06:31:36] *** Quits: benin (~benin@183.82.179.164) (Ping timeout: 245 seconds)
[06:32:02] *** Joins: benin (~benin@183.82.179.164)
[06:32:51] *** Quits: ubert (~Thunderbi@p200300ecdf0ba227e6b318fffe838f33.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:33:09] *** Joins: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de)
[06:37:01] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:38:14] *** Joins: zaquest (~notzaques@5.130.79.72)
[06:39:11] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[06:44:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:49:14] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:50:59] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Client Quit)
[06:54:12] *** Quits: td_ (~td@94.134.91.22) (Ping timeout: 256 seconds)
[06:56:09] *** Joins: td_ (~td@94.134.91.33)
[07:03:50] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[07:04:56] *** Joins: mbuf (~Shakthi@171.61.241.63)
[07:08:49] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:18:34] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[07:24:04] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 260 seconds)
[07:24:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:24:06] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:24:06] *** Joins: wroathe (~wroathe@user/wroathe)
[07:24:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:29:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:33:50] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:37:34] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8d6b:77ca:adc:64ea) (Quit: gone to sleep. ZZZzzz…)
[07:38:12] *** Joins: hatchet (~hatchet@2601:448:4280:330:c0d:94db:7b6:5658)
[07:39:16] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:8d6b:77ca:adc:64ea)
[07:42:22] <hatchet> Hello everyone. I'm new to Haskell, trying to teach myself by implementing ERC20. Is there some sort of idiom for code that looks like this
[07:42:23] <hatchet> ```haskell
[07:42:23] <hatchet>    do
[07:42:24] <hatchet>         state <- exec (mint alice 5) context state
[07:42:24] <hatchet>         state <- exec (mint bob 10) context state
[07:42:25] <hatchet>         state <- exec (balanceOf alice) context state
[07:42:25] <hatchet>         state <- exec (balanceOf bob) context state
[07:42:26] <hatchet>         return ()
[07:42:26] <hatchet> ```
[07:42:32] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[07:43:22] <hatchet> Ignore the code fences, I was hoping markdown syntax worked :(
[07:43:32] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:44:31] <dsal> It works for me.
[07:45:07] <hatchet> Oh, well I'm using a web irc client. I obviously don't use IRC much
[07:45:15] <dsal> What is `exec`?  You wouldn't restart the state every time.
[07:46:05] <hatchet> It's a function that takes a partial function, a context, and a state,  returns `IO State`
[07:46:16] <hatchet> `exec :: Show a => (EnvironmentInput -> ExecutionResult a) -> Context -> State -> IO State`
[07:46:20] <dsal> I suspect it's not a partial function.
[07:46:25] *** Quits: smaris (~smaris@cpe-75-82-50-132.socal.res.rr.com) (Quit: WeeChat 3.3)
[07:46:50] <hatchet> I wrote exec, idk, maybe I made some mistaek
[07:46:53] <hatchet> mistake
[07:47:12] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[07:47:26] <dsal> I'd want to write something like `something $ do { mint alice 5; mint bob 10; balanceOf alice, balanceOf bob }`
[07:47:36] <hatchet> https://gist.github.com/encody/0c8f57b69186c7edb00788c9a8c7b63b
[07:48:32] <hatchet> relevant section at the bottom
[07:50:07] <dsal> There's a lot going on here.
[07:50:15] <hatchet> Yeah, my first intuition was to create a list of partial functions and execute those using a fold of some sort, since they all have very similar signatures, but since they can return slightly different things the compiler got mad at me and wouldn't let me
[07:50:33] <dsal> The most direct translation would be `exec (mint alice 5) context state >>= exec (mint bob 10) context >>= exec (balanceOf alice) context >>= exec (balanceOf bob) context`
[07:50:56] <hatchet> I'd never written any haskell 24 hours ago lol
[07:50:59] <dsal> I don't think partial function means what you think partial function means.
[07:51:05] <hatchet> darn it
[07:51:09] <dsal> OK, then yeah, this isn't at all how any of this should be written.  heh
[07:51:49] <hatchet> Partially executed function? Like where it takes 2 arguments but you only give it one and save it for later
[07:51:58] <dsal> partially applied function.
[07:52:05] <hatchet> yeah that
[07:52:08] <dsal> A partial function is a function that is undefined for some inputs.
[07:52:17] <dsal> > 3 `div` 0
[07:52:18] <lambdabot>  *Exception: divide by zero
[07:52:26] <dsal> > head []
[07:52:27] <lambdabot>  *Exception: Prelude.head: empty list
[07:52:34] <hatchet> Sorry my terminology is gonna be fudgy
[07:52:36] <dsal> Partial functions are bad.
[07:53:26] <hatchet> Anyways, I was thinking that the `>>=` operator would be useful here, just couldn't quite figure it out
[07:53:44] <dsal> You might try stylish-haskell to clean things up a bit.  This code's a bit hard to follow for a couple reasons.  But one of them is it's not clear what you're trying to do.
[07:53:53] <dsal> I think you're trying to create State monad, but that's generally not a day one thing.
[07:54:27] <dsal> Oh, gist had rendered this poorly. heh
[07:54:48] <dsal> It's a weird style, but it was showing up in my browser with like, no indentation.
[07:55:17] <hatchet> oh weird. I'm writing in VS Code and I just installed the Haskell extension pack which apparently came with a formatter. Just using that
[07:55:55] <hatchet> I'm trying to rewrite this in haskell: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol
[07:56:37] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[07:56:39] <hatchet> So far the only things that actually work are the balanceOf and transfer functions
[07:56:58] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[07:57:02] <dsal> The formatter looks like ormolu or something.  Not my favorite.  I don't know why people like having one word per line.
[07:57:45] <hatchet> Can't say I have much of an opinion on style yet. The only functional programming language I've used before is Ocaml, and that was only in undergrad
[07:59:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[07:59:43] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[08:00:48] <dsal> Well.  Starting from the middle won't be a super efficient strategy, but you might look into the State monad.  It looks like you're approximately aiming for that.
[08:02:31] <dsal> It looks like this:
[08:02:31] <dsal> > flip evalState 3  $ do { modify (* 11) ; get }
[08:02:33] <lambdabot>  33
[08:02:45] *** Joins: EvanR (~evan@user/evanr)
[08:03:21] <Axman6> hatchet: is feels very much like you want the StateT monad transformer (and probably ReaderT, so might as well go with a full RWST Context () State IO)
[08:03:26] <dsal> > flip evalState 3  $ do { original <- get; modify (* 11) ; modify (+ 100); final <- get;  pure (original, final) }
[08:03:27] <lambdabot>  (3,133)
[08:04:15] <dsal> Seems like starting day one with StateT is… inefficient.  heh
[08:04:19] <Axman6> if you ever find yourself passing around some sort of state to update, particularly monadically, then StateT is probably going to lead to much cleaner code, and means you can't accidentally makes a new state and then forget to use it and end up using an old state
[08:04:26] <Axman6> v.hard to debug
[08:04:41] <Axman6> @hoogle StateT
[08:04:42] <lambdabot> Control.Monad.Trans.State.Lazy newtype StateT s m a
[08:04:42] <lambdabot> Control.Monad.Trans.State.Lazy StateT :: (s -> m (a, s)) -> StateT s m a
[08:04:42] <lambdabot> Control.Monad.Trans.State.Strict newtype StateT s m a
[08:05:33] <hatchet> Okay, this sounds like great stuff to read up on. Thus far the documentation has been... unforgiving? to someone who isn't comfortable with the syntax yet. Any pointers for slightly more friendly intros to these things?
[08:05:35] <dsal> We can go full weird.
[08:05:35] <dsal> > flip execState (2,4) $ do {  _1 += 11; _2 *= 6 }
[08:05:36] <lambdabot>  (13,24)
[08:05:55] <dsal> hatchet: It's really easy if you learn in a more constructive order.
[08:06:03] <dsal> The documentation is pretty good once you have a foundation.
[08:06:49] <dsal> But if you start learning music by grabbing some orchestral sheet music on day one, you're gonna be a bit lost.
[08:07:25] <hatchet> Ok, cool. I read a bunch of this http://learnyouahaskell.com/ and watched most of these videos https://www.youtube.com/channel/UC3xdLFFsqG701QAyGJIPT1g/videos
[08:08:03] <dsal> Neat, I've never seen that video set.
[08:08:04] <hatchet> For now I think I want to focus more on basic syntax tho (like figuring out exactly when and how to use `>>=` like above)
[08:08:20] <EvanR> call me nuts but I still think this is a good crash course https://www.haskell.org/tutorial/
[08:08:23] <dsal> Yeah, that's why starting from the beginning makes things a bit easier.
[08:08:36] <EvanR> i.e. A gentle introduction
[08:11:07] <hatchet> the gentle introduction has come up a bunch in my ddg searches
[08:11:29] <dsal> hatchet: Well, I would definitely not write that.  It seems pretty weird.  I think that's just StateT that you want there.
[08:12:02] <dsal> I still like haskellbook.com -- but I read intro stuff all the time and always learn something new.
[08:14:18] <hatchet> Thanks for all the recommendations!
[08:16:25] <dsal> It's nice because it starts with nothing and then you build all the stuff you need to use.  Some people think it's too slow.  I keep seeing people try to go faster and getting really frustrated because they want to start on step 19.
[08:17:10] <jackdk> I literally ground through the haskell book beginning-to-end and found that worked very well for me.
[08:17:48] <hatchet> I did a similar thing when I learned Rust, just read through the entire book in like 3 days
[08:17:49] *** Joins: RobotMicrowave (~user@2804:d41:c2b2:be00:2926:cba1:14b8:da8b)
[08:18:03] <hatchet> I'll give it a shot!
[08:18:16] <EvanR> reading is cool but
[08:18:19] <dsal> jackdk: Yeah, especially as a quite experienced programmer, I found it helped sort of flush the unhelpful baggage.
[08:18:27] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 268 seconds)
[08:18:32] <EvanR> pales in comparison to how much writing you will need to do xD
[08:18:46] <dsal> Ha.  Yeah. The Book basically has you invent everything along the way.
[08:19:01] <RobotMicrowave> what book?
[08:19:01] <jackdk> It then took me a while to learn how to actually structure an application... I was fortunate enough to join a project with an established codebase and learn off that
[08:19:02] <EvanR> kind of like, you want to speak a language, but you just read about it a lot xD
[08:19:06] <dsal> RobotMicrowave: haskellbook.com
[08:19:15] <RobotMicrowave> oh no
[08:20:08] <RobotMicrowave> this book big
[08:20:14] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:20:31] <RobotMicrowave> and pricy, 60 dollars is just too much for me :(
[08:20:34] <dsal> jackdk: I was mostly just building my own apps.  But you see the blub bubble rise.  Like, start out passing everything around and thinking these dumb ReaderT things are overkill.  Then one day you get it.
[08:20:54] <EvanR> ReaderT is a good one
[08:20:55] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[08:21:04] <jackdk> that feeling of "ok, so that's why THEY invented THAT" is very satisfying
[08:21:06] <dsal> RobotMicrowave: There are other resources.  I just found that one to be quite good and was completely worth it to me.
[08:21:20] <dsal> jackdk: I love doing that several months later.  heh
[08:21:41] <jackdk> I had a similar moment when I finally understood that lens operators were not chosen at random
[08:21:43] <dsal> How often I'm like, "WTF... why would anyone ever need this?"  [several months later] "Ugh, I wish I had a way to... wait a second"
[08:22:38] <jackdk> It's often useful to learn what a bunch of stuff is and what it's for, but defer the details until you hit the problem that it solves
[08:23:13] <RobotMicrowave> I try to learn by reading the docs, it's not very helpful, but it's very fun
[08:24:19] <dsal> RobotMicrowave: Haskell docs are generally just references.  You won't learn lens or recursion-schemes by reading haddock.  :)
[08:27:26] <RobotMicrowave> dsal: sad
[08:27:27] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:27:57] <dsal> Good instructional material and good references are often very different.
[08:28:00] <dsal> > flip execState (2,4) $ do {  _1 += 11; _2 *= 6; modify (over each (^2)) }
[08:28:02] <lambdabot>  (169,576)
[08:28:05] <dsal> wheee
[08:28:49] <dsal> > flip execState (2,4) $ do {  _1 += 11; _2 *= 6; modify (over each (2^)) }
[08:28:50] <lambdabot>  (8192,16777216)
[08:29:32] <RobotMicrowave> dsal: I've learned most of my c++ with the docs and a debugger
[08:30:01] <RobotMicrowave> But of couse i got some theory to back this up
[08:30:23] <RobotMicrowave> by reading random articles
[08:31:28] <monochrom> I doubt that there is any online free doc that teaches "concept", the latest addition to C++, properly.
[08:31:32] <EvanR> random article U my alma mater
[08:31:38] <dsal> hahaha
[08:31:58] <hatchet> how i learned web dev fr
[08:32:27] <RobotMicrowave> hatchet: web dev is a hoax, just glue things together
[08:32:38] <EvanR> when haskell docs are good, they are very good
[08:33:07] <RobotMicrowave> monochrom: cppreference can helpe you a lot, but it would be good to read the PR
[08:34:44] <monochrom> That's what I tried. No.
[08:34:51] <monochrom> Either that or I'm dense.
[08:36:47] <RobotMicrowave> monochrom: I'm really dumb, so I take 2 months to understand this kind of stuff
[08:37:08] <dsal> It sounds like you're just doing things inefficiently.
[08:37:25] <RobotMicrowave> dsal: pretty much
[08:37:50] <RobotMicrowave> this and I'm pretty dumb, like, a lot
[08:37:56] <dsal> Trying to understand the universe by seeing tiny bits here and there will take a very long time and probably won't work super well.
[08:38:14] <RobotMicrowave> dsal: I try my best
[08:40:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:40:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:40:39] *** Joins: wroathe (~wroathe@user/wroathe)
[08:44:59] *** Parts: RobotMicrowave (~user@2804:d41:c2b2:be00:2926:cba1:14b8:da8b) (ERC 5.4.1 (IRC client for GNU Emacs 27.2))
[08:46:13] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[08:47:45] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[08:48:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Client Quit)
[08:54:41] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:56:09] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[08:56:19] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[09:01:05] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[09:03:43] *** Joins: reumeth (~reumeth@user/reumeth)
[09:04:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[09:08:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[09:09:25] *** Quits: hatchet (~hatchet@2601:448:4280:330:c0d:94db:7b6:5658) (Quit: Client closed)
[09:09:38] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[09:10:30] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[09:10:49] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 250 seconds)
[09:16:53] <EvanR> if you grind through something slow and inefficiently, that may end up being valuable later on
[09:17:10] <EvanR> worst case, as a red flag of what not to do xD
[09:19:44] *** Joins: emf (~emf@2620:10d:c090:400::5:4c86)
[09:20:55] <sm> @where htac  , hatchet
[09:20:55] <lambdabot> "Haskell Tutorial and Cookbook" by Mark Watson in 2017-09-04 at <https://leanpub.com/haskell-cookbook>
[09:21:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:21:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:21:12] *** Joins: wroathe (~wroathe@user/wroathe)
[09:23:31] <dsal> EvanR: I hit it from all angles.  Had code I'd written and was using over long periods of time, started HPFFP, did some exercisms and AoC, read other books, played around with various other projects, then eventually just started doing everything all at once.
[09:23:35] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[09:25:45] <EvanR> I had the benefit of doing the scheme book in school, so at least I knew what a pure function was. 
[09:25:57] <EvanR> the rest follows from there
[09:26:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[09:26:47] <EvanR> there's also a bit of laziness in there, so that wasn't super alien
[09:26:52] <dsal> I programmed in ocaml a couple of decades ago.  Had good times there.
[09:27:39] <EvanR> but haskell was definitely a step up on the tech level from anything I saw before
[09:27:51] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 245 seconds)
[09:28:07] <EvanR> which then opened the door to other things
[09:30:26] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[09:38:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:38:41] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 245 seconds)
[09:38:48] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:39:58] <Axman6> I wonder how hard it would be to add a transformation to hlint for foo <$> pure a <*> pure b <*> someApplicativeThing <*> pure c ==> (\x -> foo a b x c) <$> someApplicativeThing, but for arbitrary number of actions 
[09:44:32] *** Joins: monochrom (trebla@216.138.220.146)
[09:44:52] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:8d6b:77ca:adc:64ea) (Quit: gone to sleep. ZZZzzz…)
[09:45:12] *** Quits: m1dnight_ (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[09:46:44] *** Joins: m1dnight (~christoph@christophe.dev)
[09:54:48] *** Quits: xff0x (~xff0x@2001:1a81:53bb:9600:6878:c21:1339:de41) (Ping timeout: 260 seconds)
[09:55:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:55:26] *** Joins: xff0x (~xff0x@2001:1a81:53bb:9600:a1e8:7445:87f2:2d40)
[09:56:54] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:00:43] *** Quits: EvanR (~evan@user/evanr) (Quit: Leaving)
[10:01:01] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:03:03] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[10:05:47] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:06:49] *** Joins: wei2912 (~wei2912@116.88.103.128)
[10:07:19] *** Quits: wei2912 (~wei2912@116.88.103.128) (Client Quit)
[10:07:35] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[10:08:01] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[10:09:56] *** Quits: srk (~sorki@user/srk) (Ping timeout: 245 seconds)
[10:10:02] *** Quits: emf (~emf@2620:10d:c090:400::5:4c86) (Quit: emf)
[10:14:36] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[10:17:47] *** Quits: xff0x (~xff0x@2001:1a81:53bb:9600:a1e8:7445:87f2:2d40) (Ping timeout: 250 seconds)
[10:18:39] *** Joins: xff0x (~xff0x@2001:1a81:53bb:9600:4dee:bd75:d531:be0)
[10:20:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:20:43] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[10:27:01] *** Quits: benin (~benin@183.82.179.164) (Ping timeout: 245 seconds)
[10:28:18] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:29:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:29:57] *** Joins: benin (~benin@183.82.179.164)
[10:39:56] *** Quits: xff0x (~xff0x@2001:1a81:53bb:9600:4dee:bd75:d531:be0) (Ping timeout: 245 seconds)
[10:40:51] *** Joins: xff0x (~xff0x@2001:1a81:53bb:9600:42f4:b800:f8f2:1c2a)
[10:42:08] *** Joins: peeweep[m] (~peeweep@2001:470:69fc:105::1:39c1)
[10:42:43] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[10:44:49] *** Joins: michalz (~michalz@185.246.204.37)
[10:47:36] *** Joins: emf (~emf@2620:10d:c090:400::5:4c86)
[10:50:25] *** Parts: peeweep[m] (~peeweep@2001:470:69fc:105::1:39c1) ()
[10:51:50] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[10:51:59] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:53:56] *** Quits: emf (~emf@2620:10d:c090:400::5:4c86) (Quit: emf)
[10:57:37] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[10:59:08] *** Quits: Teacup (~teacup@user/teacup) (Quit: Teacup)
[10:59:32] *** Joins: Teacup (~teacup@user/teacup)
[11:03:44] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[11:04:20] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 268 seconds)
[11:11:51] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[11:19:35] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[11:21:56] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:24:14] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[11:24:54] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:25:06] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:25:13] <dminuoso> Axman6: Doesn't htlint just do very naive and static matching of patterns? https://github.com/ndmitchell/hlint/blob/master/data/hlint.yaml
[11:26:51] <arahael> dminuoso: If it's "just do a very naive and static matching of patterns", then it's insane how good it is compared to literally every other programming language ecosystem's lint. :(
[11:27:06] <dminuoso> Our opinions diverge apparently.
[11:27:21] <arahael> Not neccessarily.
[11:27:35] <arahael> You're assuming this is a high bar.
[11:27:52] <dminuoso> That might very well be. :)
[11:27:55] <earthy> it helps that haskell's semantics do not carry side effects. ;)
[11:28:40] <dminuoso> I guess there's a point to that. With a (mostly) referential transparent language, you can have static refactoring rules easily
[11:28:57] <dminuoso> *referentially transparent. uh
[11:29:11] <dminuoso> arahael: I just dont put much faith or value in linters in the first place.
[11:29:36] <earthy> dminuoso: they're *extremely* helpful in large teams
[11:29:49] <dminuoso> Yeah your and my opinions diverge here as well. :)
[11:30:01] <opqdonut> extremely helpful for project outcomes, or extremely helpful for placating pedants?-)
[11:30:08] <arahael> I agree, they're *extremely* good for large teams, they're good at catching the low hanging fruit.
[11:30:30] <arahael> Especially if the compilers are crap.
[11:30:35] <earthy> project outcomes, in my experience. large teams tend to wallow in pedantic discussions if given half a chance
[11:30:38] * arahael glares at Kiel's GCC.
[11:30:44] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:859e:604a:c9a4:ff01)
[11:30:47] *** Joins: chele (~chele@user/chele)
[11:31:01] <earthy> linters take the discussion off the table
[11:31:02] <dminuoso> In my opinion they're not helpful for large teams. If I want to express some code in a way that the linter disagrees with, why should a static tool without actual Haskell expertise or problem domain knowledge tell me different?
[11:31:08] <opqdonut> agreeing on conventions and checking them automatically is a great pattern, but linters are rarely up to the task. you need custom ad-hoc analysers
[11:31:09] <arahael> earthy: That, too.
[11:31:23] <opqdonut> things like "are all localization keys used in the source defined for all languages"
[11:31:25] <arahael> dminuoso: Some teams I've worked in required MISRA-C.
[11:31:29] <dminuoso> These tools appear to serve to give the impression that unskilled developers can produce "nice looking code". But the reality, good quality code cannot be reasonably described by linters.
[11:31:31] <opqdonut> "are all events emitted by service X handled by service Y"
[11:31:32] <earthy> opqdonut: that'd be better, yes. we also do that. ;)
[11:31:48] <arahael> dminuoso: There's a reason I said low-hanging fruit.
[11:31:55] <earthy> dminuoso: the trick is that *bad* patterns can be detected by linters
[11:32:03] <dminuoso> arahael: To me, linters stand in the way. Too often I trigger patterns that I simply completely disagree with.
[11:32:09] <earthy> just taking away the actively bad stuff is a boon.
[11:32:12] <dminuoso> And in large teams you have this type of conflict more often
[11:33:01] <dminuoso> earthy: A code review would catch that same stuff but in a better way.
[11:33:22] <arahael> dminuoso: Code review is often a mere formality in large teams, it's insane how often review misses painfully obvious crap.
[11:33:52] <dminuoso> There's your real problem then.
[11:34:23] <dminuoso> A linter will not really improve that situation much. Instead, it will give all the more justification to simply click "Accept" every time.
[11:34:36] <dminuoso> "Oh the linter and tests passed? Then it must be good"
[11:34:41] <earthy> dminuoso: may be... but people suck at seeing these things, and can be *much* more effective when analysing whether the code fits the domain and whether it makes sense.
[11:35:10] <earthy> dminuoso: that is a lack of imagination on the dev reviewing. the content of the tests are what should be under review.
[11:35:16] <arahael> dminuoso: A linter that checks use-before-assign, or use-after-free is a good one, as an example, plus, unused variables, etc, all often help.
[11:35:26] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:35:36] <earthy> arahael: granted, that's mostly in languages that basically suck for correctness. ;)
[11:35:37] <arahael> dminuoso: Do you disable all your warnings with your compiler, if you don't like linters?
[11:35:41] <dminuoso> arahael: Absolutely. It's just that we have these as warnings in GHC already. :)
[11:35:44] <arahael> earthy: Well, yes.
[11:35:49] <arahael> dminuoso: So you *do* like the linters.
[11:36:05] <arahael> dminuoso: I guess you mean you don't like linters that are separate to the compiler?
[11:36:41] <dminuoso> arahael: Okay so I guess you have a point there. I dont like linters that emit warnings based on stylistic or supposed idiomatic choices.
[11:36:44] <arahael> dminuoso: There are some unbelievably bad compilers out there, having a linter helps massively.
[11:36:52] <dminuoso> And hlint is almost all that.
[11:36:59] <arahael> dminuoso: I once had to use a assembler that couldn't even implement *macros* correctly.
[11:37:16] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[11:37:27] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[11:37:29] <dminuoso> Like, hlint has generalization warnings I simply disagree with.
[11:37:34] <arahael> dminuoso: And Kiel's GCC by default, if I recall correctly, doesn't even optimise at all.  Which happens to be a good thing because the linting options are almost as bad.
[11:37:35] <dminuoso> If I want to pick `map` over `fmap`, I might have a good reason for that.
[11:37:54] <dminuoso> Or this one:     - warn: {lhs: "maybe []", rhs: foldMap}
[11:37:55] <arahael> dminuoso: No optimisation means less potential for undefined behaviour in practice - it becomes implementation-defined in practice instead.
[11:38:00] <dminuoso> I simply completely disagree with this in any way
[11:38:13] <arahael> dminuoso: I think hlint's explicitly not recommended to be an automatically-applied lint.
[11:38:47] <dminuoso> arahael: The problem is, if my code provokes that linting rule, I have to write a complete separate line to squelch the linter as to not annoy everyone else.
[11:38:53] <dminuoso> And this seems disapportionate to me
[11:39:06] <dminuoso> And its very frustrating
[11:39:37] <arahael> dminuoso: That's relatively unusual in C projects with crappy compilers.  In those projects, you'd just fix the damn rule and move on. :)
[11:40:01] <dminuoso> My tools should obey me, not the other way around.
[11:40:49] <arahael> dminuoso: You have good tools.  A good validating compiler helps.  Makes a separate linting tool less important, but you still have a lint phase, it's just embedded.
[11:40:58] <dminuoso> Like I pointed out earlier
[11:41:02] <arahael> Right.
[11:41:07] <dminuoso> 09:06:41       dminuoso | arahael: Okay so I guess you have a point there. I dont like linters that emit warnings based on stylistic or supposed idiomatic choices.
[11:41:36] <dminuoso> Lets separate linters into "linting potentially erraneous code" and "linting whatever the author deems unidiomatic or stylistically wrong"
[11:41:49] <dminuoso> The first I completely agree with, and GHC has a fairly decent set of warnings already
[11:42:11] <dminuoso> I like it, and for languages where the implementation does not have this built in, I dont mind a separate linting software at all.
[11:42:22] <arahael> I just wish haskell enabled all those by default.
[11:42:25] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:42:36] <dminuoso> Indeed. -Wall and -Wcompat should be enabled by default
[11:42:53] <dminuoso> And -fno-warn-name-shadowing 
[11:43:34] <arahael> Right.  Oh, that's an interesting point.  People seem to _hate_ name shadowing for some reason. I've not understood it.
[11:43:41] <arahael> I don't really know why.
[11:44:22] <dminuoso> In my opinion this is a sane default: `-Wall -Wcompat -Werror=incomplete-patterns -Wno-warn-unticked-promoted-constructors -Wno-warn-name-shadowing`
[11:44:33] <arahael> I mean, I get shadowing in teh global scope is problematic, but people get unreasonably annoyed if I shadow something in a freaking 3-line scope.
[11:45:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:46:52] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:47:54] <arahael> People in large teams basically loose all perspective.
[11:48:13] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[11:48:39] <[exa]> +1 ^
[11:48:42] <dminuoso> Perhaps some large teams are just badly organized.
[11:48:52] <dminuoso> And no amount of tooling can realistically compensate for that
[11:49:59] <[exa]> dminuoso: just curious (don't take this as me being doubtful :D ), are there any other ways to organize large teams than literally separate them into subteams?
[11:50:47] <dminuoso> Im not saying they cant be organized
[11:51:19] <dminuoso> It's just that perhaps too many shops that operate huge teams lack both the necessary discipline on programmers and the organizational skills by senior positions
[11:54:02] *** Quits: Megant (megant@user/megant) (Ping timeout: 240 seconds)
[11:55:14] *** Joins: jushur (~human@user/jushur)
[11:56:29] *** Quits: michalz (~michalz@185.246.204.37) (Read error: No route to host)
[11:57:27] *** Joins: michalz (~michalz@185.246.204.58)
[11:58:15] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:58:36] * earthy nods
[11:59:22] <earthy> that sounds valid. especially given that it's hard to get enough seniors to be able to organize the more junior devs
[12:01:29] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:02:00] <arahael> Or you have too many seniors and not enough juniors.
[12:04:47] *** Joins: img (~img@user/img)
[12:09:39] *** Joins: mmhat (~mmh@55d426e2.access.ecotel.net)
[12:11:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[12:11:26] *** Joins: awschnap (~lavaman@98.38.249.169)
[12:13:58] *** Joins: rkrishnan (~user@171.48.57.101)
[12:17:50] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:22:30] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 260 seconds)
[12:22:34] *** Joins: cfricke (~cfricke@user/cfricke)
[12:27:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:28:43] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:29:14] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[12:36:05] *** Joins: Megant (megant@user/megant)
[12:37:45] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[12:38:07] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[12:39:07] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Remote host closed the connection)
[12:42:01] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[12:47:38] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:41] *** allbery_b is now known as geekosaur
[12:47:55] *** Joins: jumper149 (~jumper149@static.6.71.203.116.clients.your-server.de)
[12:49:01] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:49:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:51:02] *** Quits: mmhat (~mmh@55d426e2.access.ecotel.net) (Quit: WeeChat 3.3)
[12:55:57] *** Quits: xff0x (~xff0x@2001:1a81:53bb:9600:42f4:b800:f8f2:1c2a) (Ping timeout: 250 seconds)
[12:57:04] *** Joins: xff0x (~xff0x@2001:1a81:53bb:9600:57:b0d1:750c:1fc)
[13:01:55] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e128015eb8f81d9ba9d.dip0.t-ipconnect.de)
[13:04:48] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 256 seconds)
[13:07:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:08:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:08:26] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:08:55] *** Joins: srk (~sorki@user/srk)
[13:11:09] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[13:12:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[13:13:21] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:13:41] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[13:13:43] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Remote host closed the connection)
[13:14:35] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Client Quit)
[13:15:26] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:16:10] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:19:19] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:19:55] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[13:24:38] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:29:52] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:33:14] <arahael> Wow. Updating to Aeson 2.0 is a huge jump from 1.5.  Finally did it for one of my repos. :D
[13:33:37] <arahael> And I was able to do it mechanically whilst watching a movie so pretty happy about that.
[13:36:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[13:38:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:39:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:40:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:42:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:42:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:42:52] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[13:44:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:44:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:47:38] <jackdk> I do wish they published a 1.6 with the KeyMap interface and type aliases to easy that transition, but it wasn't so bad
[13:48:02] *** Joins: neurocyte0132889 (~neurocyte@92.119.8.11)
[13:48:02] *** Quits: neurocyte0132889 (~neurocyte@92.119.8.11) (Changing host)
[13:48:03] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:48:07] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:49:50] <arahael> Right.  I haven't gotten my repo fully up to speed with amazonka 2.0, but it's compiling (with all the imports and everything - just everything amazonka has been commented out such as the runAWST stuff.
[13:49:58] <arahael> But the aeson is pretty decent.
[13:50:09] <arahael> Next I'll have to update the amazonka bits. :)
[13:50:27] <arahael> (Which I confirm compiles, I noticed in the release notes that runAWST is gone)
[13:50:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:50:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:51:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:52:41] <arahael> I mean, I still have the amazon imports and all. :)
[13:52:45] <jackdk> yes, thank the maker. It was never as well-behaved as other transformers
[13:52:59] <arahael> I'm afraid I'm too naive to know better. :(
[13:54:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:54:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:55:48] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 256 seconds)
[13:58:02] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[14:00:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:01:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:01:47] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[14:03:37] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd)
[14:07:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:07:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:07:26] *** Joins: max22- (~maxime@2a01cb088335980072dc9c7c6d37d1a7.ipv6.abo.wanadoo.fr)
[14:08:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:08:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:09:14] <Unhammer> What's the big change with 2.0?
[14:10:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:11:37] <arahael> Unhammer: The most obvious is that Object is now a KeyMap.
[14:12:03] <arahael> I noticed it when !? stopped working with them.
[14:13:37] <jackdk> The KeyMap type became opaque so that the implementation could be swapped out, as someone demonstrated a working PoC DoS attack against the unordered-containers HashMap
[14:13:57] <arahael> jackdk: Oh?
[14:14:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[14:14:30] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:15:24] <jackdk> https://cs-syd.eu/posts/2021-09-11-json-vulnerability discusses the vulnerability but newer versions of aeson use the Map from containers instead so are unaffected
[14:15:30] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[14:15:55] <arahael> Thanks, I'll check that out!
[14:16:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:16:37] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:75c5:c6ed:c91:17fe)
[14:17:51] <arahael> Ah, interesting.  Seems logical.
[14:19:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Ping timeout: 260 seconds)
[14:20:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:22:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:22:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:24:33] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:24:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:26:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:26:51] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:28:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:28:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:29:30] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 260 seconds)
[14:32:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:32:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:34:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:34:38] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[14:34:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:36:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:36:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:37:55] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[14:40:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:40:45] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[14:40:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:41:21] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[14:43:31] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:43:39] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[14:44:31] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[14:45:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:48:58] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:49:45] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[14:50:49] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[14:53:04] *** Joins: kuribas (~user@ptr-25vy0i8ep4e11jhvxvb.18120a2.ip6.access.telenet.be)
[14:55:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:55:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:56:08] *** Joins: royo (~royo@user/royo)
[14:56:19] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[14:56:43] *** Parts: royo (~royo@user/royo) ()
[14:59:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[15:03:23] <Unhammer> Oh nice
[15:09:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:09:27] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[15:10:07] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:11:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:12:20] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Read error: Connection reset by peer)
[15:12:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:14:02] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[15:18:28] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[15:18:48] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:18:50] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[15:18:52] *** Joins: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de)
[15:18:56] *** Joins: zopsi_ (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[15:19:09] *** Joins: pyook (~puke@user/puke)
[15:19:09] *** Quits: puke (~puke@user/puke) (Killed (mercury.libera.chat (Nickname regained by services)))
[15:19:09] *** pyook is now known as puke
[15:19:11] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[15:19:24] *** Joins: forell_ (~forell@host-178-216-90-220.sta.tvknaszapraca.pl)
[15:19:35] *** Joins: aforemny_ (~aforemny@static.248.158.34.188.clients.your-server.de)
[15:19:47] *** Joins: dminuoso_ (~dminuoso@static.88-198-218-68.clients.your-server.de)
[15:19:49] *** Joins: wagle_ (~wagle@quassel.wagle.io)
[15:20:11] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[15:20:22] *** Joins: glider_ (~glider@user/glider)
[15:20:30] *** Joins: dumptruckman_ (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[15:20:33] *** Joins: p3n_ (~p3n@217.198.124.246)
[15:20:36] *** Quits: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:20:44] *** Joins: sshine_ (~simon@hubris.eta.solutions)
[15:20:46] *** Joins: ptrcmd_ (~ptrcmd@user/ptrcmd)
[15:20:52] *** Joins: anderson_ (~ande@user/anderson)
[15:20:53] *** Joins: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de)
[15:20:56] *** Joins: Clint_ (~Clint@user/clint)
[15:20:57] *** Joins: Hecate_ (~mariposa@163.172.211.189)
[15:20:59] *** Joins: [exa]_ (~exa@srv3.blesmrt.net)
[15:20:59] *** Joins: dfordivam1 (~dfordivam@tk2-219-19469.vs.sakura.ne.jp)
[15:21:03] *** Joins: cjay- (cjay@nerdbox.nerd2nerd.org)
[15:21:06] *** Joins: m1dnight_ (~christoph@christophe.dev)
[15:21:09] *** Server sets mode: +Cnt 
[15:21:10] *** Joins: tlax_ (tlax@kapsi.fi)
[15:21:14] *** Joins: bcoppens_ (~bartcopp@vpn2.bartcoppens.be)
[15:21:19] *** Joins: pie__ (~pie_bnc@user/pie/x-2818909)
[15:21:20] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Killed (NickServ (GHOST command used by dminuoso_!~dminuoso@static.88-198-218-68.clients.your-server.de)))
[15:21:20] *** Joins: Igloo (~ian@matrix.chaos.earth.li)
[15:21:23] *** Joins: Eoco_ (~ian@x-160-94-179-157.acm.umn.edu)
[15:21:25] *** Joins: ts2 (~ts@46.101.20.9)
[15:21:48] *** dminuoso_ is now known as dminuoso
[15:21:51] *** Joins: jushurr (~human@user/jushur)
[15:22:06] *** Quits: dminuoso (~dminuoso@static.88-198-218-68.clients.your-server.de) (Changing host)
[15:22:06] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[15:22:33] *** Joins: connrs_ (~connrs@user/connrs)
[15:24:25] *** Joins: mht-wtf (~mht@mht.wtf)
[15:24:33] *** Joins: infinity0_ (~infinity0@occupy.ecodis.net)
[15:24:34] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Killed (iridium.libera.chat (Nickname regained by services)))
[15:24:34] *** infinity0_ is now known as infinity0
[15:24:40] *** Joins: Square (~a@user/square)
[15:24:57] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:25:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:25:21] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[15:25:24] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[15:25:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:25:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: connrs (~connrs@user/connrs) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: zopsi (~zopsi@irc.dir.ac) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: forell (~forell@user/forell) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: Sqaure (~a@user/square) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: madnight (~madnight@static.59.103.201.195.clients.your-server.de) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: sshine (~simon@hubris.eta.solutions) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: p3n (~p3n@217.198.124.246) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: m1dnight (~christoph@christophe.dev) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: wagle (~wagle@quassel.wagle.io) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: cfebs (~cfebs@user/cfebs) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: AlexNoo (~AlexNoo@178.34.162.8) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: Clint (~Clint@user/clint) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: MidAutumnMoon6 (~MidAutumn@user/midautumnmoon) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: [exa] (exa@user/exa/x-3587197) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: glider (~glider@user/glider) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: ts1 (~ts@46.101.20.9) (Ping timeout: 260 seconds)
[15:26:00] *** connrs_ is now known as connrs
[15:26:00] *** Quits: mht (~mht@mht.wtf) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Eoco (~ian@x-160-94-179-157.acm.umn.edu) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Hecate (~mariposa@user/hecate) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: sm[i]_ (~user@li229-222.members.linode.com) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: davl (~davl@207.154.228.18) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: cjay (cjay@nerdbox.nerd2nerd.org) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: tlax (tlax@kapsi.fi) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: jushur (~human@user/jushur) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: mbuf (~Shakthi@171.61.241.63) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: russruss (~russruss@my.russellmcc.com) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: anderson (~ande@user/anderson) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: ian_ (~ian@matrix.chaos.earth.li) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: micro (~micro@user/micro) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: dfg (~dfg@user/dfg) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: sqrt2 (~ben@80-108-18-7.cable.dynamic.surfer.at) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: platz (~platz@user/platz) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: ellie (~ellie@user/ellie) (Ping timeout: 260 seconds)
[15:26:01] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[15:26:01] *** Joins: mbuf (~Shakthi@171.61.241.63)
[15:26:01] *** Joins: sm[i]_ (~user@li229-222.members.linode.com)
[15:26:01] *** cfebs_ is now known as cfebs
[15:26:01] *** russruss0 is now known as russruss
[15:26:01] *** ralu9 is now known as ralu
[15:26:01] *** dumptruckman_ is now known as dumptruckman
[15:26:01] *** brettgilio3 is now known as brettgilio
[15:26:02] *** ellie9 is now known as ellie
[15:26:02] *** mustafa_ is now known as mustafa
[15:26:02] *** MidAutumnMoon65 is now known as MidAutumnMoon6
[15:26:02] *** m5zs7k_ is now known as m5zs7k
[15:26:15] *** anderson_ is now known as anderson
[15:26:17] *** Joins: micro (~micro@user/micro)
[15:26:38] *** Joins: platz (~platz@40.122.118.113)
[15:26:38] *** Quits: platz (~platz@40.122.118.113) (Changing host)
[15:26:38] *** Joins: platz (~platz@user/platz)
[15:28:10] *** Quits: deadmarshal_ (~deadmarsh@95.38.116.172) (Ping timeout: 256 seconds)
[15:28:14] *** Lord_of_Life_ is now known as Lord_of_Life
[15:29:38] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[15:29:49] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[15:33:42] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[15:34:11] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Client Quit)
[15:36:37] *** Joins: mmhat (~mmh@55d426e2.access.ecotel.net)
[15:37:45] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[15:41:14] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[15:42:00] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:43:46] *** [exa]_ is now known as [exa]
[15:43:53] *** Quits: [exa] (~exa@srv3.blesmrt.net) (Changing host)
[15:43:53] *** Joins: [exa] (~exa@user/exa/x-3587197)
[15:45:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:46:11] *** Quits: benin (~benin@183.82.179.164) (Ping timeout: 245 seconds)
[15:49:15] *** Joins: notzmv (~zmv@user/notzmv)
[15:49:44] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[15:51:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:54:11] *** Quits: max22- (~maxime@2a01cb088335980072dc9c7c6d37d1a7.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[15:56:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:58:01] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:58:13] *** Joins: benin (~benin@183.82.179.164)
[15:58:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:59:06] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 245 seconds)
[15:59:56] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Quit: gone to sleep. ZZZzzz…)
[16:00:41] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[16:02:54] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[16:04:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:04:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:07:40] *** Quits: awschnap (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:09:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:09:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:11:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:11:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:12:52] *** Joins: slack1256 (~slack1256@186.11.45.199)
[16:16:21] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 250 seconds)
[16:16:53] *** aforemny_ is now known as aforemny
[16:17:39] *** Joins: cfricke (~cfricke@user/cfricke)
[16:20:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:20:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:21:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:21:44] <zero> what's a case where return can be defined more optimally than pure?
[16:22:17] *** zero is now known as yin
[16:22:32] *** yin is now known as zzz
[16:24:01] <hpc> i can't immagine there is one
[16:24:26] <hpc> everything that would be in scope defining return is also in scope defining pure
[16:29:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:29:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:32:08] <geekosaur> zero, afaik the only reason there's a difference is backward compatibility
[16:32:16] <geekosaur> not optimality
[16:32:25] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:32:49] <dminuoso> What's the idiomatic way to provide a 
[16:32:52] <dminuoso> oops
[16:33:04] <geekosaur> in fact there's a "monad of no return" proposal that would remove return from Monad and just use Applicative's pure
[16:33:20] <dminuoso> What's the idiomatic way to provide an uninitialized CString buffer of a specified size?
[16:33:39] <dminuoso> Something like `withBuf 10 $ \ptr -> ...`
[16:34:24] <geekosaur> isn't this the use case for allocaBytes?
[16:35:06] <dminuoso> Ohh. Yes.
[16:35:14] <dminuoso> That's what I was looking for. thanks.
[16:37:46] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[16:38:34] *** Quits: coolnickname (~omg@user/coolnickname) (Ping timeout: 268 seconds)
[16:39:33] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[16:40:11] *** AlexNoo_ is now known as AlexNoo
[16:40:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[16:41:03] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[16:41:55] *** Joins: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net)
[16:43:19] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Quit: ZNC 1.8.2 - https://znc.in)
[16:43:45] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[16:48:06] <nf> :t \l f -> do a <- use l; l <~ f a :: MonadState s m => (forall f. Functor f => (a -> f a) -> s -> f s) -> (a -> m a) -> m ()
[16:48:07] <lambdabot> error:
[16:48:07] <lambdabot>     • Couldn't match type ‘Const a s’ with ‘Identity s’
[16:48:07] <lambdabot>       Expected type: ASetter s s a b
[16:48:18] <nf> why doesn't this typecheck?
[16:48:39] <nf> i don't know how to say more explicitly that i want l to be polymorphic in f
[16:49:01] <nf> (a workaround is to use cloneLens l but i'd like to understand why that is needed)
[16:49:31] <dminuoso> % :t use
[16:49:31] <yahb> dminuoso: MonadState s m => Getting a s a -> m a
[16:49:33] <dminuoso> % :i Getting
[16:49:33] <yahb> dminuoso: type Getting :: * -> * -> * -> *; type Getting r s a = (a -> Const r a) -> s -> Const r s; -- Defined in `Control.Lens.Getter'
[16:49:39] <dminuoso> % :t (<~)
[16:49:39] <yahb> dminuoso: MonadState s m => ASetter s s a b -> m b -> m ()
[16:49:42] <dminuoso> % :i ASetter
[16:49:42] <yahb> dminuoso: type ASetter :: * -> * -> * -> * -> *; type ASetter s t a b = (a -> Identity b) -> s -> Identity t; -- Defined in `Control.Lens.Setter'
[16:50:10] <dminuoso> nf: The problem has nothing to do with f, but the consumption of it.
[16:50:25] <nf> i mean f the functor, not f the second argument
[16:50:28] <dminuoso> Ah
[16:51:02] <dminuoso> Mm this is actually curious
[16:51:13] <nf> it seems to me that  forall f. Functor f => (a -> f a) -> s -> f s  should unify with both ASetter and Getting
[16:51:41] <nf> then again i have no idea how rank-n types work in ghc
[16:51:43] <dminuoso> Im idly wondering whether this has to do with simplified subsumption
[16:52:14] <hpc> :t let foo :: MonadState s m => (forall f. Functor f => (a -> f a) -> s -> f s) -> (a -> m a) -> m (); foo = \l f -> do a <- use l; l <~ f a in foo
[16:52:15] <lambdabot> MonadState s m => (forall (f :: * -> *). Functor f => (a -> f a) -> s -> f s) -> (a -> m a) -> m ()
[16:52:15] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Quit: ZNC 1.8.2 - https://znc.in)
[16:52:24] <hpc> it's a syntax issue
[16:52:24] <nf> o_o
[16:52:33] <nf> lol
[16:52:33] <hpc> your type signature is applying to a, or f a, or something
[16:52:35] <hpc> not to the whole lambda
[16:52:50] <nf> ...oh my god
[16:52:54] <nf> thanks.
[16:52:58] <hpc> :D
[16:53:04] <dminuoso> Oh hah
[16:53:20] * nf writes 100 times "i will never assume the precedence of :: again"
[16:53:21] * dminuoso still prefers `optics`
[16:53:31] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[16:53:53] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[16:54:00] <hpc> nf: yeah, i have been burned by that enough times that any use of inline "::" without parens is instantly suspect
[16:54:10] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[16:55:04] <nf> and now for a follow-up question: what magic set of extensions do i have to turn on to make ghc infer a type for foo?
[16:55:17] <dminuoso> nf: DoesNotExist
[16:55:19] <nf> :t let foo = \l f -> do a <- use l; l <~ f a in foo 
[16:55:20] <lambdabot> error:
[16:55:20] <lambdabot>     • Couldn't match type ‘Const t1 s1’ with ‘Identity s1’
[16:55:20] <lambdabot>       Expected type: ASetter s1 s1 t1 b1
[16:55:21] <hpc> iirc higher-rank types can't be inferred
[16:55:28] <nf> not even rank 2?
[16:55:38] <dminuoso> rank 2 can, but I dont think that algorithm has been implemented in GHC
[16:55:43] <dminuoso> IIRC
[16:55:46] <nf> ok
[16:55:56] <hpc> there used to be two extensions
[16:56:01] <hpc> Rank2Types and RankNTypes
[16:56:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:56:22] <hpc> but that was aaaaaages ago and i hadn't ever needed to use them
[16:56:35] <hpc> maybe the inference algorithm used to exist?
[16:57:12] <nf> https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/rank_polymorphism.html#type-inference
[16:57:22] <nf> apparently not doable without annotating
[16:57:34] *** Joins: bsdbandit (~bwell@users.757.org)
[16:57:56] <dminuoso> nf: Yeah for arbitrary rank that is true
[16:58:15] <dminuoso> This is also worth a skim https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/putting.pdf
[16:58:19] <nf> yeah i saw that
[16:58:32] *** Quits: jushurr (~human@user/jushur) (Quit: payload updated)
[16:59:33] <geekosaur> the inference algo never existed. ages ago ghc only supported rank-2 types; eventually that was extended to rank-N
[16:59:57] <dminuoso> Also, rank 2 type inference decideability really depends on language features I think
[17:00:05] <geekosaur> iirc adding rank-2 inference has been considered and they decided it was a lot of complexity for somnething that would rarely if ever be used
[17:00:07] <dminuoso> So perhaps interaction with other extensions rendered that impossible
[17:00:37] <nf> geekosaur: a reasonable choice
[17:01:10] <hpc> i wonder if it would lead to confusing type errors along the lines of instance Num b => Num (a -> b) and such
[17:01:27] <dminuoso> Realistically you should document the type signature anyway.
[17:01:50] <dminuoso> So lack of inference just means you have to think for yourself rather than asking GHC `f :: _`
[17:02:05] <dminuoso> Also: If you used `optics` this problem wouldn't appear. :P
[17:02:22] * nf is now reading https://hackage.haskell.org/package/optics-0.4/docs/Optics.html
[17:02:25] <dminuoso> Since that brings everything back to rank1.
[17:03:05] <dminuoso> (Or rather, the higher rank stuff is hidden behind newtypes)
[17:03:46] <nf> i don't think i'm mature enough for optics yet. i haven't grown out of my "LENSES COMPOSE LIKE FUNCTIONS THIS IS SO COOL!!!11" phase
[17:04:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:04:41] <dminuoso> optics do too!
[17:04:53] <dminuoso> It's just hidden behind an operator :p
[17:04:55] <nf> yes but not transparently
[17:04:58] <dminuoso> heh 
[17:05:17] <hpc> what you need is a healthy dose of spring framework :D
[17:05:27] <dminuoso> This sort of mathematical beauty and symmetry of lens/optics always amazes me.
[17:06:55] <dminuoso> nf: Here's a selling point then: optics use a uniform profunctor representation, giving you more beauty inside! :p
[17:07:06] <dminuoso> With lens its a mix of VL, mixed and profunctor stuff. :p
[17:07:25] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:07:27] <nf> if only i wasn't so superficial
[17:07:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:09:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:09:41] *** Hecate_ is now known as Hecate
[17:11:12] <boxscape_> is there a better way to write `f <=< pure g <=< h`?
[17:11:23] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 250 seconds)
[17:11:48] <boxscape_> oh
[17:11:52] <boxscape_> it's just `f . g <=< h`
[17:12:59] <lortabac> regarding rank-n types, you can have full inference if you only allow them hidden in a data-type (as we currently do for existentials)
[17:13:00] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[17:13:36] <lortabac> which IMO is a good compromise, but it's not what GHC decided to do
[17:17:53] *** jinsun__ is now known as jinsun
[17:21:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:23:53] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[17:24:28] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:25:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:26:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:27:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:28:43] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:29:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:30:37] *** Joins: arjun (~user@user/arjun)
[17:32:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:32:46] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Read error: Connection reset by peer)
[17:33:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:34:03] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[17:34:26] *** Joins: smorgasbord (buggy@thunix.net)
[17:34:55] *** Quits: smorgasbord (buggy@thunix.net) (Changing host)
[17:34:55] *** Joins: smorgasbord (buggy@user/smorgasbord)
[17:35:16] *** Joins: reumeth (~reumeth@user/reumeth)
[17:35:32] <smorgasbord> hello! I wanted to know if there was anyway of pattern matching a Data constructor using a wildcard, and using the exact same match later?
[17:36:10] <smorgasbord> considering that I have something like Data Foo = Bar int | Baz char
[17:37:12] <smorgasbord> anyway I can do something like `hello (WC x) = WC 10`
[17:37:38] <dminuoso> Of course.
[17:37:41] <dminuoso> Exactly like that.
[17:38:01] <dminuoso> You're not really "reusing the exact same match", you're just building the same data constructor back again.
[17:38:03] <boxscape_> ...but not if WC is supposed to match both `Bar` and `Baz`
[17:38:06] <dminuoso> Ah.
[17:38:24] <dminuoso> You read the pseudocode better than me I guess
[17:38:38] <smorgasbord> I get an error when I do it exactly like that
[17:38:41] <dminuoso> smorgasbord: What would that even do if the data constructor was `Baz`?
[17:38:42] <kuribas> 10 is not a char ...
[17:38:48] <dminuoso> smorgasbord: You can't construct `Baz 10`
[17:38:53] <kuribas> maybe he wants a Functor?
[17:38:57] <smorgasbord> dminuoso: it would have given an error :P (Not the best example)
[17:39:13] <hpc> maybe you want @?
[17:39:16] <smorgasbord> WC is indeed supposed to match both
[17:39:20] <hpc> @let data Foo = Bar Int | Baz Char
[17:39:21] <lambdabot>  Defined.
[17:39:30] <dminuoso> smorgasbord: If you have something like `data F a = F a | G a`, you can write a Functor implementation and use `fmap`
[17:39:31] <hpc> @let f x@(Bar n) = (n, x)
[17:39:31] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Quit: gone to sleep. ZZZzzz…)
[17:39:31] <lambdabot>  Defined.
[17:39:35] <hpc> > f (Bar 10)
[17:39:36] <lambdabot>  error:
[17:39:36] <lambdabot>      Ambiguous occurrence ‘f’
[17:39:36] <lambdabot>      It could refer to
[17:39:37] *** Quits: alx741 (~alx741@186.178.109.84) (Quit: alx741)
[17:39:39] <hpc> ugh
[17:39:48] <hpc> @let foo x@(Bar n) = (n, x)
[17:39:49] <lambdabot>  Defined.
[17:39:52] <hpc> > foo (Bar 10)
[17:39:53] <lambdabot>  error:
[17:39:53] <lambdabot>      • No instance for (Show Foo)
[17:39:53] <lambdabot>          arising from a use of ‘show_M8911773327894737618’
[17:40:01] <hpc> you get the idea
[17:40:19] <smorgasbord> hpc: I'm really sorry, but I don't :(
[17:40:33] <dminuoso> hpc: It wouldn't match both though
[17:40:45] <dminuoso> smorgasbord: consider this:
[17:40:45] <smorgasbord> x@() gives me access to the whole datum
[17:40:52] <smorgasbord> and Bar only is a specific constructor
[17:41:02] *** Joins: alx741 (~alx741@186.178.109.84)
[17:41:03] <dminuoso> % data OneOf a = This a | That a
[17:41:03] <yahb> dminuoso: 
[17:41:07] <smorgasbord> I want access tothe constructor I don't know a priori
[17:41:15] <smorgasbord> I only know the arity of the contructor
[17:41:27] <dminuoso> % instance Functor OneOf where fmap f (This a) = This (f a); fmap f (That a) = That (f a)
[17:41:28] <yahb> dminuoso: 
[17:41:47] <dminuoso> % fmap (+1) (This 10)
[17:41:47] <yahb> dminuoso: ; <interactive>:11:1: error:; * No instance for (Show (OneOf Integer)) arising from a use of `print'; * In a stmt of an interactive GHCi command: print it
[17:41:49] <kuribas> smorgasbord: short answer: you cannot.
[17:41:56] <dminuoso> % data OneOf a = This a | That a deriving Show
[17:41:56] <yahb> dminuoso: 
[17:41:59] <dminuoso> % instance Functor OneOf where fmap f (This a) = This (f a); fmap f (That a) = That (f a)
[17:41:59] <yahb> dminuoso: 
[17:42:02] <dminuoso> % fmap (+1) (This 10)
[17:42:02] <yahb> dminuoso: This 11
[17:42:05] <dminuoso> % fmap (+1) (That 10)
[17:42:05] <yahb> dminuoso: That 11
[17:42:14] <kuribas> smorgasbord: larger answer, you can with some hack but shouldn't.
[17:42:15] <dminuoso> % "foo" <$ This 10
[17:42:15] <yahb> dminuoso: This "foo"
[17:42:18] <dminuoso> % "foo" <$ That [1,2,3]
[17:42:19] <yahb> dminuoso: That "foo"
[17:42:22] <dminuoso> smorgasbord: ^- this perhaps?
[17:44:33] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e128015eb8f81d9ba9d.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:46:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[17:46:41] <smorgasbord> I don't understand what you've written dminuoso 
[17:46:54] <smorgasbord> what is the `<$` operator supposed to do?
[17:48:12] <dminuoso> smorgasbord: That's just fmap with a constant value.
[17:48:29] <dminuoso> % fmap (const "foo") This [1,2,3]
[17:48:29] <yahb> dminuoso: "foo"
[17:48:32] <dminuoso> Uh
[17:48:37] <dminuoso> % fmap (const "foo") (This [1,2,3])
[17:48:37] <yahb> dminuoso: This "foo"
[17:51:34] *** Joins: slac59793 (~slack1256@181.43.229.27)
[17:51:57] *** Parts: arjun (~user@user/arjun) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[17:53:32] *** Quits: slack1256 (~slack1256@186.11.45.199) (Ping timeout: 240 seconds)
[17:57:49] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[17:57:49] <smorgasbord> ah I missed the line in dminuoso's code about the functor
[17:58:07] <smorgasbord> I think I will have to understand functors then, another person I had asked about this also suggested the same
[17:58:12] <smorgasbord> thank you!
[17:58:40] <dminuoso> smorgasbord: In simple terms, any data type where you can "map over its values" in a sensible fashion is called a functor.
[17:58:44] *** Joins: justache (~justache@user/justache)
[17:59:07] <dminuoso> So for instance, we can map over the values of a list and modify them
[17:59:16] <dminuoso> % fmap (+1) [1,2,3,4]
[17:59:16] <yahb> dminuoso: [2,3,4,5]
[17:59:39] <smorgasbord> right, this looks like a normal map that I'm familiar with from other languages
[17:59:43] <dminuoso> Yup.
[17:59:48] <dminuoso> We just have an implied law
[18:00:22] <dminuoso> Which we can think of as saying "fmap may not change the structure of the thing", for instance fmap on list is not allowed to change the element order, or drop elements
[18:01:07] <smorgasbord> so in a tree like structure, I can't replace elements with fmap?
[18:01:12] <xsperry> smorgasbord, unlike a normal map it can be used on a lot more than just lists or collections
[18:01:36] *** Joins: max22- (~maxime@2a01cb0883359800917d653070f119e8.ipv6.abo.wanadoo.fr)
[18:01:38] <smorgasbord> that could be a problem (an x-y problem) because I want to use this to make changes to a tree like structure with a lot of different constructors
[18:02:11] <boxscape_> Tree-like structures are very often Functors
[18:02:27] <boxscape_> so you can typically replace elements in a tree with fmap
[18:02:30] <geekosaur> but if you want to make changes you may want Traversable instead
[18:02:40] <geekosaur> depending on the changes
[18:02:56] <xsperry> > fmap (*10) $ M.fromList [("one", 1), ("two", 2)]
[18:02:57] <lambdabot>  fromList [("one",10),("two",20)]
[18:03:17] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[18:04:03] *** Joins: kennyd (~bc8165b6@217.29.117.252)
[18:04:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:05:00] <smorgasbord> I actually am trying to simplify expressions in an implementation of Montague's intensional logic. So what I was trying to do, was take lambda expressions in the language when applied, which look like `Appl (Lmbd (LVar 'x') <body-of-l-expr>) y`, where y will replace every instance of (LVar 'x') in the expression.
[18:05:24] <smorgasbord> I basically wanted to take this syntax tree and return <body-of-expr-with-y-replaxing-x>
[18:06:28] <smorgasbord> The recursive procedure needed me to deconstruct to act on the args of the constructor, but there are a lot of constructors, so I did not want to write the recursive call manually for each constructor
[18:07:14] <mniip> this is a monadic pattern actually
[18:07:20] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: leaving)
[18:07:37] <smorgasbord> I am new to haskell and scared of the word 'monad' xD
[18:07:44] <mniip> do be
[18:08:44] <mniip> saying that doesn't actually save you from writing out every constructor though
[18:08:57] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:09:08] <mniip> I don't think the deriving mechanism is strong enough
[18:09:25] <justsomeguy> b/c
[18:09:28] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 260 seconds)
[18:09:42] <smorgasbord> where should I start if I want to solve this with the monadic approach?
[18:09:50] <smorgasbord> should I learn about monads in general or something specific?
[18:09:54] <mniip> although, if this is a lambda calculus, you have to be careful with your descent
[18:10:06] <mniip> because you can hit a lambda that shadows the identifier you're currently substituting
[18:10:26] <mniip> so it's not a straightforward tree traversal
[18:10:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[18:10:36] <smorgasbord> mniip: you're right, I had not considered that earlier. Thank you for that!
[18:11:05] *** Quits: kennyd (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Ping timeout))
[18:11:08] <mniip> this is definitely not a "general monads" type situation no, rather a fairly niche application of them
[18:11:41] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[18:12:03] <mniip> @let data Expr v = Var v | App v v deriving (Functor, Show)
[18:12:04] <lambdabot>  Defined.
[18:13:19] <mniip> @let instance Monad Expr where { return = Var; Var v >>= h = h v; App f x >>= h = App (f >>= h) (x >>= h) }; instance Applicative Expr where { pure = return; (<*>) = ap }
[18:13:19] <lambdabot>  .L.hs:156:16: error:
[18:13:20] <lambdabot>      Ambiguous occurrence ‘Expr’
[18:13:20] <lambdabot>      It could refer to
[18:13:24] <mniip> uh oh
[18:13:29] <mniip> but yeah basically this
[18:14:16] <smorgasbord> well looks fairly complicated for the me right now. I will do it manually for the moment and try to come back to rewrite it later. thanks for the help everyone!
[18:14:44] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Quit: The Lounge - https://thelounge.chat)
[18:15:23] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[18:18:07] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Client Quit)
[18:18:13] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[18:18:43] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:18:52] *** Quits: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net) (Quit: ZNC 1.8.1 - https://znc.in)
[18:19:17] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[18:19:54] *** Joins: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net)
[18:20:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:23:28] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[18:25:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[18:32:24] *** Joins: kennyd (~bc8165b6@217.29.117.252)
[18:37:41] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:15f2:638c:7ed7:4999)
[18:41:32] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[18:41:51] *** Quits: ph88^ (~ph88@2a02:8109:9e00:71d0:6dfb:d68d:ebe:207) (Ping timeout: 264 seconds)
[18:42:02] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Ping timeout: 240 seconds)
[18:43:25] *** Joins: narendra (~user@2a02:8109:b63f:ff7c::56c2)
[18:46:10] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[18:48:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:49:06] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Ping timeout: 245 seconds)
[18:53:48] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[18:54:40] *** Quits: alx741 (~alx741@186.178.109.84) (Ping timeout: 265 seconds)
[18:55:24] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[18:57:46] <maralorn> Does hackage enforce that uploaded versions are increasing?
[18:58:32] *** Quits: narendra (~user@2a02:8109:b63f:ff7c::56c2) (Ping timeout: 240 seconds)
[18:58:42] <maralorn> I need to backport a fix to an older version of my lib in a setting where I can‘t yet use a newer version of the lib because of dependency clashes.
[19:00:06] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[19:00:33] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:00:33] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:00:33] *** Joins: wroathe (~wroathe@user/wroathe)
[19:02:22] <hpc> you can add patch releases for previous versions, yes
[19:03:40] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Quit: Connection closed)
[19:05:22] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b) (Quit: gone to sleep. ZZZzzz…)
[19:05:57] *** Quits: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net) (Ping timeout: 268 seconds)
[19:07:12] *** Joins: alx741 (~alx741@181.196.69.161)
[19:10:25] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:12:20] <maerwald> if you couldn't, then that would be a disaster for PVP :D
[19:12:30] <maerwald> since the only reason of having PVP is backporting patches
[19:14:32] *** Quits: alx741 (~alx741@181.196.69.161) (Ping timeout: 240 seconds)
[19:14:53] <kennyd> how come haskell doesn't have built-in fixed sized arrays? even C has them
[19:15:22] <kennyd> or unsigned integral types.. seems like it would be in haskell spirit to make these restrictions at compile time
[19:16:01] *** Joins: EvanR (~evan@user/evanr)
[19:16:30] <hpc> Word ~ Int, Word64 ~ Int64, and Natural ~ Integer
[19:17:09] <hpc> and C doesn't really have fixed size arrays
[19:17:26] <hpc> it has pointers to memory that's been allocated up to a fixed length :P
[19:17:33] <maerwald> I think it does
[19:17:59] <maerwald> it's just when you pass an array to a function it degrades to a pointer
[19:18:07] <hpc> the size doesn't show up in the type of it, either
[19:18:36] <kennyd> hpc, no, C has real fixed size arrays. and you can maintain the size of the array in function declaration. it just isn't common to do so
[19:18:54] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:19:16] <kennyd> int func(int (*)[10]) <- you can only pass a pointer to array of 10 ints
[19:19:17] <EvanR> pass by pointer degradation
[19:20:47] <kennyd> and func knows the size pointer points to, at compile time
[19:20:54] <kennyd> size of the array pointer points to*
[19:21:57] <hpc> https://paste.tomsmeding.com/uygLC9YK compiled for me
[19:22:14] <kennyd> hpc, that is not what I wrote
[19:22:43] <kennyd> int arg[10] is an int pointer in this context. int (*arg)[10] is a pointer to an array of 10 ints
[19:22:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[19:22:52] <maerwald> hpc: you get compile time warnings with real arrays in C
[19:23:03] <maerwald> in the initializer and in the accessing
[19:23:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[19:23:43] <lortabac> kennyd: Haskell has arrays, but they are less useful than in other languages, since they either require mutability or copying 
[19:23:59] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[19:24:02] <hpc> warnings don't count :P
[19:24:16] <maerwald> hpc: you can turn them into errors
[19:24:22] <kennyd> well C standard doesn't distinguish between a warning and compile error. it just talks about diagnostics
[19:24:56] <lortabac> kennyd: the common use case for arrays is when you have values that you read frequently and modify seldom
[19:25:03] <kennyd> lortabac, I think immutable arrays are still useful. I'm just a bit puzzled why we need third party libraries to restrict the size
[19:25:44] <hpc> arrays are part of base
[19:25:49] <maerwald> it would have been nice though if passing arrays to functions doesn't degrade them to pointers
[19:26:18] <lortabac> kennyd: what do you mean by third party libraries?
[19:26:19] <maerwald> that makes little sense to me... sure, cast them to a pointer if you want to do something unsafe
[19:26:25] <kennyd> hpc which ones? I see half a dozen array/vector libraries on hackage
[19:26:47] <maerwald> well, haskells 'array' package is... let's say "special"
[19:26:59] <lortabac> :)
[19:27:11] <hpc> argh, misread hoogle
[19:27:14] <hpc> https://hoogle.haskell.org/?hoogle=Array
[19:27:14] *** Joins: alx741 (~alx741@186.178.108.213)
[19:27:21] <hpc> (second item)
[19:27:24] <maerwald> if you manage to use it in real world code without swearing, I'll buy you a beer
[19:27:49] *** Joins: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk)
[19:28:05] <hpc> i guess you can use GHC.Arr if you want to code like a pirate
[19:28:08] <lortabac> maybe we should reformulate kennyd's question as "why does Data.Array suck?"
[19:28:09] *** Quits: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:28:29] *** Joins: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de)
[19:28:35] <hpc> also there's https://hackage.haskell.org/package/vector
[19:29:09] <hpc> Data.Array sucks because it's too generic
[19:29:30] <maerwald> lortabac: because someone wrote it that way
[19:29:37] <hpc> being able to index an array by Ordering isn't worth the tuple nonsense and off-by-one errors
[19:30:12] <maerwald> it's very common for programmers to only think about properties and care nothing about ergonomics
[19:30:23] <maerwald> that's how we got nix too
[19:30:35] <hpc> > array (LT, GT) [(LT, 1), (EQ, 2), (GT, 3)]
[19:30:37] <lambdabot>  array (LT,GT) [(LT,1),(EQ,2),(GT,3)]
[19:31:20] <hpc> > @let wat = array (LT, GT) [(LT, 1), (EQ, 2), (GT, 3)]
[19:31:21] <lambdabot>  <hint>:1:1: error: parse error on input ‘@’
[19:31:27] <hpc> @let wat = array (LT, GT) [(LT, 1), (EQ, 2), (GT, 3)]
[19:31:28] <lambdabot>  Defined.
[19:31:39] <hpc> > wat ! (compare "yes" "no")
[19:31:41] <lambdabot>  3
[19:31:48] <lortabac> kennyd: regarding the ability to check the size at compile-time, it's certainly doable, but it takes you quickly to singletons territory, which is not something everybody is willing to endure :)
[19:31:48] <hpc> features!
[19:31:49] <hololeap> kennyd: use vector-sized. it keeps the size of the array at the type level, and it's well used and well maintained
[19:32:25] <lortabac> it's definitely not within "simple Haskell"
[19:33:24] <hpc> vector-sized also has such neat definitions as https://hackage.haskell.org/package/vector-sized-1.5.0/docs/Data-Vector-Sized.html#v:-43--43-
[19:33:32] <hpc> try writing that one in C
[19:33:41] <kennyd> hololeap, ok. for context, I'm building a toy chess engine as a practice
[19:34:26] <lortabac> these type-level tricks are good as long as all the sizes can be determined statically
[19:34:36] <hololeap> yeah vector-sized would be perfect for that. I built a toy game of life board with it
[19:35:06] <EvanR> for a toy chess engine you may be served by making a "8 of something" packed data type
[19:35:17] <hololeap> there is also that option
[19:35:31] <EvanR> since it's only 8
[19:35:35] <lortabac> once you start serializing or reading arrays of unknown size from a database you start suffering
[19:35:38] <hpc> you can also do away with the arrays entirely, and use bit masks
[19:35:53] <hpc> there are 64 squares on a chessboard, and guess what type has 64 booleans packed into it
[19:36:00] <EvanR> lol
[19:36:01] <hpc> stockfish uses that extensively
[19:36:24] <EvanR> if only the CPU came with a chess instruction
[19:36:49] <EvanR> wait... microcode xD
[19:36:51] <maerwald> how does bool help on a chess board... "there's a piece on the square"?
[19:36:54] <hpc> EvanR: it's on intel's roadmap right after the http-post-xml-to-facebook instruction
[19:37:28] <EvanR> use several words one for each piece-mask
[19:37:30] <hpc> maerwald: what squares are attacked, what squares are defended, where pieces can move next turn, etc
[19:37:31] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Read error: Connection reset by peer)
[19:37:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[19:37:51] <hpc> you just have lots and lots of masks, for their own specific purpose
[19:38:06] <maerwald> I bet that  code is easy to follow
[19:38:10] <hpc> the actual board state, you do very little with
[19:38:19] <hpc> it is, in fact
[19:38:20] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[19:38:46] <hpc> although i was messing with stockfish before they added the NN
[19:38:51] <hpc> so maybe it's slightly messier now
[19:39:16] *** Joins: slack1256 (~slack1256@191.126.227.86)
[19:41:43] *** Quits: slac59793 (~slack1256@181.43.229.27) (Ping timeout: 268 seconds)
[19:41:55] *** Joins: Feuermagier_ (~Feuermagi@154.28.188.22)
[19:42:26] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:859e:604a:c9a4:ff01) (Quit: WeeChat 2.8)
[19:44:31] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 245 seconds)
[19:44:35] <hololeap> wait, why isn't there a (Comonad w1, Comonad w2) => instance Comonad (Compose w1 w2)
[19:44:56] <hololeap> comonads don't compose either?
[19:45:04] <hololeap> I would think they would
[19:45:09] <EvanR> why would they
[19:45:40] <hololeap> well, extract certainly would. I haven't thought too hard about duplicate and the laws
[19:45:51] <mniip> well?
[19:45:57] <mniip> the same thing happens with monads?
[19:46:06] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[19:46:37] <EvanR> maybe you want to invent comonad transformers xD
[19:46:52] <hololeap> that's true
[19:47:50] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:54:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:54:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:54:29] *** Joins: wroathe (~wroathe@user/wroathe)
[19:54:40] *** Quits: alx741 (~alx741@186.178.108.213) (Ping timeout: 268 seconds)
[19:55:39] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:58:57] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[19:59:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[20:01:36] *** Joins: Carras (~carras@202.184.44.217)
[20:03:32] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 240 seconds)
[20:04:13] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd)
[20:05:21] *** Quits: Carras (~carras@202.184.44.217) (Client Quit)
[20:08:05] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:08:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Remote host closed the connection)
[20:09:06] *** Joins: alx741 (~alx741@186.178.109.194)
[20:10:47] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:15:19] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[20:16:18] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[20:17:45] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:19:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:19:56] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[20:21:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:22:28] <janus> hmm  a haskell webbrowser from Hallgren and co from 1994 is on the HN frontpage :O
[20:23:45] <[itchyjunk]> Are there "objects" in haskell like in Java? for example, String is an object there
[20:24:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[20:24:58] <janus> [itchyjunk]: no but you can define functions that all take the same record as the first parameter and return a modified record
[20:25:00] <yushyin> (a closure over a mutable state could be seen as an object :P)
[20:25:57] <janus> [itchyjunk]: with that pattern, `obj.method(arg0, arg1)` would be written `method obj arg0 arg1` but it would be pure of course
[20:26:21] <janus> [itchyjunk]: you can put it in a monad and it starts looking impure
[20:26:40] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[20:26:40] <[itchyjunk]> ah, idk monads yet. but the rest makes sense
[20:28:05] <sm> a haskell web browser from 1994 - nice
[20:28:34] <janus> the web is something else now, that part is the least interesting :P
[20:29:05] <janus> fudgets are more interesting though. i always wanted to know, how do fudgets compare to other streaming libraries and UI paradigms?
[20:29:34] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[20:30:09] <EvanR> after your first "object" of that kind you make... you will quickly become tired of the boilerplate and wonder if someone invented an entire field of computer science to streamline it xD
[20:31:38] <[itchyjunk]> so a string is of type String. but string is also of type list of characters?
[20:31:47] <[itchyjunk]> so String = [char] ?
[20:32:04] <[itchyjunk]> at least i thought i saw the type String somewhere
[20:33:06] <janus> it's just an alias, you can replace every String with [Char] and it would still compile
[20:33:12] <yushyin> [itchyjunk]: String is just a type synonym of [Char]
[20:33:16] <[itchyjunk]> ah great
[20:33:36] <janus> it's not great! it's horrible!
[20:34:18] <[itchyjunk]> so `"Hello friend" -> ["Hello", "friend"]` is `f :: [Char] -> [[]]` ?
[20:34:33] <[itchyjunk]> i was gonna say `[[Char]]` but that might imply single char?
[20:34:35] <janus> [] is not a valid type
[20:34:38] <[itchyjunk]> wait not, maybe that is correct
[20:34:41] <monochrom> No. ['H', 'e', 'l', 'l', 'o', ' ', 'f', ...]
[20:34:42] <[itchyjunk]> oh..
[20:34:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[20:34:58] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:35:32] *** Quits: mbuf (~Shakthi@171.61.241.63) (Quit: Leaving)
[20:35:42] <[itchyjunk]> no i want `["hello","friend"]` and am trying to figure out the signature. so `f :: [Char] ->[[Char]]` ? a list containing lists of characters
[20:35:53] <monochrom> Although, upon seeing [Char], one could not logically imagine "like ["Hello", "friedn"]"
[20:36:05] <[itchyjunk]> [['H',..,'o']['F',..,'d']]
[20:36:18] <monochrom> I mean, it is not like Unicode has code points for English words...
[20:36:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:37:18] <janus> yes ["Hello","friend"] is the same as [['H',...,'o'],['F',...,'d']]
[20:37:21] <janus> those are values
[20:37:26] *** Quits: deadmarshal (~deadmarsh@95.38.116.172) (Ping timeout: 245 seconds)
[20:37:54] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:38:01] <janus> the function that splits by space is indeed String -> [String] which is the same type as [Char] -> [[Char]]
[20:38:21] <janus> :t words
[20:38:22] <lambdabot> String -> [String]
[20:38:22] <[itchyjunk]> ah okay, so that's the signature i want
[20:40:48] <janus> just like String is an alias for [Char] on the type level, you can see "hi" as an alias for ['h','i']
[20:40:56] *** ptrcmd_ is now known as ptrmcd
[20:40:57] <EvanR> maybe [itchyjunk] is confused about the difference between String and Char
[20:40:59] *** ptrmcd is now known as ptrcmd
[20:41:05] <[itchyjunk]> I think i get it now
[20:41:06] <EvanR> many languages do not know the difference
[20:41:13] <[itchyjunk]> String is just [Char]
[20:41:19] <monochrom> But Java has a difference.
[20:41:20] <EvanR> yeah but Char
[20:41:33] <EvanR> isn't just a string of length 1 xD
[20:41:38] <[itchyjunk]> aka String is a fake sugar syntax
[20:41:54] <[itchyjunk]> hmm idk how Char gets implemented, true
[20:42:04] <[itchyjunk]> but there is primitive types in Java and char is that..
[20:42:06] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[20:42:07] <EvanR> it's like a number
[20:42:08] <EvanR> atomic
[20:42:11] <[itchyjunk]> internally, it's some unicode uumber
[20:42:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:42:20] <[itchyjunk]> 67 = A or somesuch
[20:42:26] <EvanR> yeah basically
[20:42:39] <EvanR> so a string is a list of that
[20:42:43] *** Joins: slac78719 (~slack1256@191.126.227.81)
[20:42:45] <monochrom> Same for our Char.
[20:42:48] <[itchyjunk]> i think now, A and a smiley emojy are the same because of unicode
[20:43:00] <[itchyjunk]> encoded the same way that is
[20:43:22] <monochrom> Well, "same" for now. There is more to support laziness.
[20:43:27] <[itchyjunk]> so use can have irc nicknames with emojies in ircd's that support unicode
[20:43:28] <EvanR> > "A😀"
[20:43:30] <lambdabot>  "A\128512"
[20:43:45] <[itchyjunk]> 6 digit number?
[20:43:47] <dsal> Is there an easy way to like, download hackage source (latest or something)?  I wanted to do a quick survey.
[20:43:56] <[itchyjunk]> we went from 3 digit numbers to 6 digit already? damn..
[20:44:02] <janus> both char and strings are 'atomic' in both java and haskell, no? you can't mutate a java string (keeping its identity) without fancy tricks
[20:44:09] <EvanR> it's up to 21 bits I think
[20:44:15] <[itchyjunk]> String is an object in java
[20:44:16] <dsal> In particular, I'm curious how ByteString is imported.
[20:44:21] <[itchyjunk]> char is primitive type 
[20:44:23] *** Joins: slack7679 (~slack1256@181.42.49.169)
[20:44:39] <EvanR> by "atomic" I mean you can subdivide it into smaller data
[20:44:46] <EvanR> can't*
[20:45:13] <janus> ah i interpreted it as immutable somehow, oops
[20:45:14] *** Quits: slack1256 (~slack1256@191.126.227.86) (Ping timeout: 268 seconds)
[20:46:06] <EvanR> good to know that about strings in java though xD
[20:46:12] <EvanR> why am I learning so much about java in here
[20:46:12] <monochrom> Atomic weapon/fuel keeps decaying. Clearly mutable. And mutant-causing too, in superhero comics.
[20:46:35] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:46:43] <[itchyjunk]> you use '' for chars right?
[20:46:55] <janus> right check this out
[20:47:00] <janus> :t 'A'
[20:47:01] <lambdabot> Char
[20:47:01] <[itchyjunk]> if x /= ' ' makes sense? to check if x is same as space
[20:47:06] <[itchyjunk]> ah
[20:47:26] *** Quits: slac78719 (~slack1256@191.126.227.81) (Ping timeout: 260 seconds)
[20:47:43] <janus> [itchyjunk]: do you know how to use ghci?
[20:48:07] <[itchyjunk]> yes, i am :l my functions into ghci and running them that way for everything currently
[20:48:16] <[itchyjunk]> well i know how to run ghci.. xD
[20:48:21] <[itchyjunk]> not sure what counts as usage
[20:48:24] <janus> dsal: isn't it just github.com/haskell/hackage-server ? or what are you referring to when you say hackage?
[20:49:01] <janus> [itchyjunk]: ah great. ok, so in ghci you can use ":t" to query the type of something like i did in this chat
[20:49:22] <geekosaur> dsal, I think there are some hackage packages for that
[20:49:37] <[itchyjunk]> right, i did use :t for functions but didn't think about using it for data types :D
[20:50:04] <EvanR> [itchyjunk], in ghci do putStrLn "A😀"
[20:50:10] <EvanR> fun times
[20:50:11] <dsal> janus: The actual packages -- I want to survey.
[20:50:25] <dsal> geekosaur: I found a sort of howto guide with a bunch of steps I might be able to reproduce.
[20:50:42] <[itchyjunk]> https://bpa.st/VYGA
[20:51:04] <EvanR> you didn't put quotes
[20:51:08] <[itchyjunk]> ah..
[20:51:17] <janus> apropos i am trying to write a stackage not-solver for cabal, where do cabal devs hang out?
[20:51:55] <maerwald> janus: what is a stackage not-solver?
[20:52:06] <[itchyjunk]> lexical error in string/character literal at end of input
[20:52:15] <[itchyjunk]> ah nm
[20:52:32] <janus> maerwald: cabal has a "solver" configuration flag which currently has one option "modular". the modular solver was written to replace the top-down solver 10 years ago
[20:52:37] <geekosaur> https://hackage.haskell.org/package/hackage-mirror
[20:52:37] <geekosaur> #hackage I think?
[20:52:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:52:39] <[itchyjunk]> "A😀" :: [Char] heh interesting
[20:52:46] <EvanR> ikr
[20:52:53] <dsal> There are currently 123453 package*versions in hackage.
[20:53:30] <janus> maerwald: since stackage doesn't need solving anything it's not really a solver. so i can't call it "stackage solver" since it isn't actually solving anything. but i put it such that it goes in the "solver" config space option, where you used to put top-down or modular, and where you can now only put modular
[20:53:50] <maerwald> janus: you mean freeze files?
[20:53:56] <maerwald> that already exists
[20:54:13] <EvanR> [itchyjunk], ord :: Char -> Int from Data.Char gives you the number for the char, very handy
[20:54:18] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:54:19] <maerwald> and that's likely how the stackage support will be implemented
[20:54:30] <janus> maerwald: but freeze files are not in the same syntax as build.yaml
[20:54:51] <maerwald> janus: you can convert that easily
[20:54:52] <janus> maerwald: and freeze files are project specific, they can't meaningfully be shared across projects right?
[20:55:04] <maerwald> janus: there's a ticket for remote freeze files
[20:55:08] <hololeap> dsal: you know you want to upload 3 more
[20:55:10] *** Quits: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk) (Remote host closed the connection)
[20:55:27] <maerwald> janus: I suggest you read the topic about the hackage support, probably all your questions will be answered there
[20:55:39] <janus> maerwald: where is that?
[20:55:57] <dsal> hololeap: Yeah, that's almost distracting me...
[20:56:03] <maerwald> janus: https://github.com/haskell/cabal/issues/7556
[20:56:11] <hololeap> haha
[20:59:24] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[20:59:58] <janus> [itchyjunk]: beware, just because it looks the same, it could be different:
[21:00:02] <janus> > putStrLn "\xe9"
[21:00:04] <lambdabot>  <IO ()>
[21:00:11] <janus> % putStrLn "\xe9"
[21:00:11] <yahb> janus: é
[21:00:19] <janus> % putStrLn "\x65\x301"
[21:00:19] <yahb> janus: é
[21:00:49] *** Joins: SSCC (~SSCC@59-102-95-229.tpgi.com.au)
[21:00:58] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[21:01:08] <edwardk> hololeap: you can look into Day u v  -- for two comonads u and v. that at least composes
[21:01:24] *** Joins: slice (~slice@user/slice)
[21:03:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:03:15] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:03:15] *** Joins: wroathe (~wroathe@user/wroathe)
[21:03:26] <hololeap> oh no... kan-extensions... XD
[21:04:39] <[itchyjunk]> Oh ohh, ,i've confused myself
[21:04:46] <hololeap> edwardk: where would you recommend I look into that?
[21:04:47] * [itchyjunk] takes a short break in hopes of unconfusing self
[21:05:27] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[21:05:40] <janus> maerwald: ok very cool, i hadn't internalized that it's coming in cabal 3.8
[21:06:39] <edwardk> hololeap:phil freeman wrote it up at one point: https://blog.functorial.com/posts/2016-08-08-Comonad-And-Day-Convolution.html
[21:07:19] <hololeap> cool, thanks. that might get me one step closer to penetrating that library
[21:09:14] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51)
[21:09:18] <janus> the beginning of the read still says cabal 3.10 but that was moved ahead, i guess...
[21:09:25] <edwardk> re: comonads not composing, its the same problem as with monads. you wind up needing to take FG -> FGFG to write duplicate but two arbitrary comonads just give you what you need to get FFGG by duplicating each part. Then you have no way to distribute them to get FGFG
[21:10:27] <edwardk> for monads OTOH, join needs to take FGFG -> FG, and sure you could use the join of each monad if you had FFGG -> FG -- but you lack a distributive law in general to get FGFG -> FFGG to apply that latter step
[21:10:40] <edwardk> so you get stuck in the middle in both cases.
[21:11:00] <hololeap> gotcha
[21:12:10] <boxscape_> so then... is there some dual to Day that lets you compose any two monads?
[21:12:20] <EvanR> stupid question, why does composing comonads require you to do FG -> FGFG
[21:12:26] <hololeap> Night
[21:12:50] <boxscape_> hololeap I suppose I could have thought of that myself..
[21:13:03] <edwardk> a subset of the monad/comonad transformers come from taking comonads/monads that _do_ have such a distributive law. e.g. you can write f (e -> a) -> e -> f a.    and that distributive law is the basis of ReaderT
[21:13:05] <hololeap> boxscape_: I was joking :p
[21:13:15] <boxscape_> https://hackage.haskell.org/package/functor-combinators-0.4.1.0/docs/Data-Functor-Combinator.html#t:Night
[21:13:20] <edwardk> (e, f a) -> f (e, a) -- gives you the building block for WriterT, etc.
[21:13:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:852c:89ad:25b7:fe51) (Ping timeout: 245 seconds)
[21:13:51] <hololeap> EvanR: because duplicate on `W1 (W2 a)` would mean getting `W1 (W2 (W1 (W2 a)))` if that makes sense
[21:14:01] <EvanR> oh right
[21:14:09] <edwardk> EvanR: consider the type signature for 'duplicate' for Compose f g where f and g are comonads, under the assumption you are writing ... hololeap got it
[21:14:47] <EvanR> and now I see the monad version
[21:14:57] <EvanR> and all that that entails (mtl)
[21:15:40] <boxscape_> (no idea though if the Night I linked lets you compose Monads, from the description I'd guess not)
[21:16:33] <hololeap> FunctorBy Night -- sounds like the setup to a movie
[21:16:56] <EvanR> wait... Night is real?
[21:16:58] <dminuoso> smorgasbord: With fmap on a tree like structure you cant change the shape of the tree, but you can universally map and replace each element.
[21:17:39] <dminuoso> smorgasbord: We can concisely express this law as `fmap id = id`, which means if you fmap with the identity function, it must give you the same thing back. It cant change the structure, drop elements, reorder them, etc.
[21:18:59] <EvanR> ah it's not dual to Day
[21:19:06] <EvanR> unfortunately xD
[21:19:09] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[21:19:18] <edwardk> boxscape_: there's a fancy phrase tarmo uustalu likes to use saying 'the dual of substitution is redecoration' -- it is the thing that finally gave me the "right" reference frame for thinking about comonads in haskell. that you are basically taking some 'view of a structure and computing local answers (w a -> b) before you apply them at every possible 'location' in w, and reassemble the structure: w a -> w b...  out of those little 
[21:19:18] <edwardk> tiles. whats telling to me is the comonad doesn't change 'shape' in the process it has just as many 'b's as it had 'a's. which is weird compared to the usual monad story, where >>='ing lists can change the number of elements in the list. the comonadic operations redecorate the structure, but they don't change it.
[21:19:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:19:54] <edwardk> the day convolution of two comonads, is more about convolving two different comonads notion of shape and location, and making something that has a 'location' for the product of that notion.
[21:20:13] <edwardk> that works really well when not reshaping things
[21:21:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:22:02] <boxscape_> hm, interesting
[21:24:03] *** Quits: benin (~benin@183.82.179.164) (Quit: The Lounge - https://thelounge.chat)
[21:24:04] <edwardk> now if you want to get fancy, a better frame for thinking about comonads is maybe to dip over and look at comonads in Poly, and show they are in 1:1 correspondence with categories, and then poke at the day convolution story above and see how it compares with product categories
[21:24:54] *** Joins: benin (~benin@183.82.179.164)
[21:26:39] <hololeap> if f and g are both distributive and comonads, does that mean you could get an automatic comonad instance for the composition?
[21:27:02] <hololeap> or maybe only one of them has to be distributive?
[21:27:06] <edwardk> Distributive is a very strong class
[21:27:24] <hololeap> true, not many functors are distributive
[21:27:46] <edwardk> Distributive f is saying f ~ (->) e   for some e.
[21:27:59] <hololeap> oh, I guess this goes back to the relationship between adjunctions and comonads
[21:28:00] <edwardk> so now you're reinventing Traced
[21:28:23] <dminuoso> edwardk: (Jokingly) But Distributive is not very strong. It doesn't even have Strong as a superclass.
[21:28:39] <edwardk> for something to be both Distributive _and_ a Comonad you wind up with a monoid on that 'e'
[21:28:42] *** Joins: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-107.cust.tzulo.com)
[21:28:47] <edwardk> dminuoso: *headdesk*
[21:29:27] <hololeap> edwardk: I've been meaning to ask you, where did you get the terms that you use in your profunctors library? is there a good reference for all those concepts somewhere?
[21:29:47] <edwardk> hololeap: in the head version of distributive (which builds on hkd), distributive becomes a bit stronger, able to provide all the implied instances you'd expect if you need it to, and it can recover that monoid.
[21:30:03] <dminuoso> hololeap: ncatlab.org? :p
[21:30:25] <edwardk> some i plucked out of thin air, pastro and street wrote a paper on tambara modules, i abused some vocabulary there
[21:30:26] <dminuoso> edwardk's prime hobby is turning that wiki into hackage.
[21:30:44] <dminuoso> And I mean this non-jokingly.
[21:31:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk)
[21:31:39] <hololeap> edwardk: ok, what about subprofunctor?
[21:31:43] <hololeap> what does that mean?
[21:31:44] <dsal> This survey of Data.ByteString imports is interesting.   I was told not to use `BS` because it's supposed to be `SB` which sounds like... the other one.  Turns out, most imports use `B`, followed closely by `BS`.  `SB` is in the list with nearly three times the occurrence of `QtahDBS`.
[21:32:08] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:32:37] <dminuoso> dsal: I have never seen SB before.
[21:32:47] <dminuoso> What is the S trying to imply? Strict?
[21:32:53] <dminuoso> Would you also have LB then?
[21:33:25] *** Quits: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:33:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[21:33:34] <dsal> Yes.
[21:33:48] *** Joins: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de)
[21:33:53] * dminuoso uses BS and BSL
[21:34:06] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[21:34:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:34:15] <dsal> I've not got everything downloaded yet, but it's approximately 3240:102   BS:SB right now.
[21:34:23] <maerwald> SB is for ShortByteString, no?
[21:34:33] <dminuoso> I use SBS for ShortByteString
[21:34:59] <dsal> Who knows.  There are a lot of these things that are just "this is the standard way to do this" declarations that I can't find any evidence for other than this one guy thinks he's a standards body.
[21:35:22] *** Quits: chomwitt (~chomwitt@94.69.34.153) (Ping timeout: 256 seconds)
[21:35:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:35:52] <dsal> It's possibly a language barrier, but I'm quite certain he thinks he's smarter than everyone.
[21:35:59] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:36:11] <EvanR> wait... BS is BS now?
[21:36:14] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:36:23] <hololeap> haha way to go dsal, I'm sure the look on his face will be priceless when you hand him the survey :p
[21:36:33] <EvanR> is haskell going to be associated with satanism too
[21:36:37] *** Quits: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:36:48] <dsal> In one of the lens discussions, I was trying to understand what the actual argument was and it was "People think I don't like lens because I don't understand it.  I do understand it and it's a bad idea."  It's like...  OK, but that wasn't the question.
[21:36:59] *** Joins: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de)
[21:37:08] *** Quits: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[21:37:12] <dsal> "People think I don't understand linear algebra.  I wrote a book on it!"   OK, but I wasn't asking you about linear algebra.
[21:37:46] <hololeap> that says something that people still don't think he understands it after writing a book on it
[21:37:50] <dsal> hololeap: I honestly don't think he cares.  He's pretty sure everyone's wrong about things and his way is the only path to enlightenment.
[21:38:10] <edwardk> hololeap: https://en.wikipedia.org/wiki/Subfunctor
[21:39:03] <hololeap> edwardk: oh, that's all you meant :p
[21:39:12] <dsal> In the end, it's 127 for SB and 23 for QtahDBS.  Maybe I should start using QtahDBS
[21:39:42] <hololeap> definitely QtahDBS
[21:39:48] <EvanR> I guess it's inevitable. Once there are actual haskell jobs, there must necessarily be stupid haskell jobs xD
[21:40:44] <dsal> Also in use (in order of frequency):  B, S, P, D, C, L, A, F, K, X, J, E and surprisingly last, B'
[21:40:49] *** Quits: benin (~benin@183.82.179.164) (Quit: The Lounge - https://thelounge.chat)
[21:41:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[21:41:38] <dsal> (actually, X, J, E, and B' are all the same frequency, so it's not necessarily last, just sorted higher)
[21:41:52] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[21:43:58] *** Joins: benin (~benin@183.82.179.164)
[21:47:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:47:42] *** Quits: benin (~benin@183.82.179.164) (Client Quit)
[21:48:33] <[itchyjunk]> for `f :: [Char] -> [[Char]]`, `f [] = [[]]` makes sense right?
[21:48:53] <dsal> Why not `f [] = []` ?
[21:49:02] <dsal> Not enough context to know which one is better.
[21:49:20] <[itchyjunk]> isn't it expecting [[]] ?
[21:49:24] <[itchyjunk]> due to the signature
[21:49:31] <geekosaur> the outer list could be empty
[21:49:40] <monochrom> > [] :: [[Char]]
[21:49:41] <lambdabot>  []
[21:49:43] <monochrom> is legal
[21:49:48] <monochrom> > [] :: [[[[[Char]]]]]
[21:49:49] <lambdabot>  []
[21:49:51] <monochrom> is too
[21:49:52] <geekosaur> with [[]] the outer list has one item, the inner one is empty
[21:50:07] <[itchyjunk]> oh
[21:50:22] <dsal> And thus zero was invented.
[21:50:33] <monochrom> But [[]] is not wrong either. Depends on what you want f to do.
[21:50:45] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:50:46] <geekosaur> which is what dsal said
[21:50:49] <dsal> What the `f` do you want?
[21:50:54] <geekosaur> heh
[21:50:55] <monochrom> haha
[21:50:57] <[itchyjunk]> lol
[21:52:21] *** Joins: jakalx (~jakalx@base.jakalx.net)
[21:53:02] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[21:53:33] <monochrom> This is why I don't say "makes sense" very often. What does it even mean?
[21:54:05] <[itchyjunk]> yes it's doesn't make sense to say that
[21:54:08] <monochrom> type checks? the right thing to do? understandable? sympathizable?
[21:54:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:54:29] <tom__> Does it not mean "I understand what you said"?
[21:54:51] <monochrom> See that's the point. Sometimes yes, sometimes something else.
[21:55:32] <monochrom> "I understand what you are saying" so it makes sense, but "but you are wrong there" so it doesn't make sense, too.
[21:55:44] <tom__> Natural language huh
[21:55:53] <monochrom> natural languages die die die
[21:56:21] <tom__> haha
[21:57:33] *** Joins: econo (uid147250@user/econo)
[21:58:15] <tom__> Is there a data structure which would model the positions of players at a table who are either active or inactive. Obviously a single list works but separate data structures for inactives and actives would simplify game logic and validation. 
[21:59:03] *** Quits: Jing (~hedgehog@115.207.50.95) (Read error: Connection reset by peer)
[21:59:03] <tom__> I'm looking for two data structures that share ordering but are parameterized by different types.
[22:00:43] <dsal> tom__: It means I think I understand something that I think you said and I want you to think that your idea is right even though I probably don't know what you're talking about.
[22:00:53] <monochrom> haha
[22:01:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[22:01:45] <dsal> tom__: You can convert the full set to the subset pretty easily, right?
[22:01:50] <tom__> haha
[22:02:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:02:30] <dsal> Here are the results from my very important survey: https://usercontent.irccloud-cdn.com/file/hKXNfFFF/bytestring.png
[22:02:36] <tom__> dsal: Yeah just a simple filter on the list right
[22:03:01] <dsal> Yeah, once you have functions that give you the things you think you need a structure for, you don't need to think about the structure anymore.
[22:03:17] <tom__> Makes sense
[22:03:22] <dsal> haha
[22:03:24] <tom__> :D
[22:03:36] <monochrom> "what have I done???!!!"
[22:04:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:04:06] <tom__> Okay so just a single list/vector then
[22:04:13] <[itchyjunk]> how do you do nothing?
[22:04:20] <monochrom> Cannot.
[22:04:21] <[itchyjunk]> if blah then blah else do nothing
[22:04:22] <zzz> dsal makes census
[22:04:24] <[itchyjunk]> hmm
[22:04:47] <geekosaur> well. "do nothing" can make sense in certain contexts. at some point you'll have to show code
[22:04:53] <geekosaur> @where paste
[22:04:53] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[22:04:59] <monochrom> But ask yourself why you need that "nothing". The reason will lead to a solution.
[22:05:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:05:50] <dsal> There's that zero again.
[22:06:25] <dsal> I want to add 1 if this  is greater than three, but I don't want to add anything otherwise and this is making me add something.
[22:06:35] <tom__> Why do we need validation when everything can be correct by construction
[22:06:53] <tom__> Assume no parsing 
[22:06:56] <dsal> Not everything can be, but some people really like making things hard and unsafe.
[22:07:05] <geekosaur> because you can't always be correct by construction in Haskell.
[22:07:23] * dsal totally isn't talking about really annoying things on a project today
[22:07:24] <monochrom> I consider validation to be part of parsing.
[22:07:29] <geekosaur> at some point that starts to require fancies like dependent types, where you have to carry around a proof that it's correct
[22:07:54] <tom__> Yeah
[22:08:01] <monochrom> Well, OK, I don't always. I am OK with type-checking after parsing, for example.
[22:08:03] <geekosaur> or yes, parsing, or other cases where something comes from "outside" and you don't get to assume correctness
[22:08:07] <geekosaur> or even sanity
[22:08:07] <tom__> Validation is part of parsing interesting
[22:09:10] <tom__> So should I strive for correct by construction only when the tools needed to do so are minimalistic - ADTs usually
[22:09:13] <monochrom> But most people's idea of "validation" is trivial conditions like "the age field must be non-negative" so why don't you check that during parsing already.
[22:09:35] <dsal> The lexi-lambda post makes an argument to sort of separate these concepts.  A parser will reject invalid data.  A validator will just tell you if your data is valid.  It's good to avoid the latter.
[22:09:36] <tom__> Yeah
[22:09:50] <monochrom> I strive for correct-by-construction iff pragmatic.
[22:10:03] <dsal> yeah.  You can go overboard and make it harder.
[22:10:09] <tom__> Liquid haskell
[22:10:15] <tom__> For my crud app
[22:10:16] <dsal> I have this image I got from an old war archive. https://usercontent.irccloud-cdn.com/file/EzyJmco3/error.png
[22:10:17] <xerox> (i strive for correct-by-construction) iff pragmatic
[22:10:25] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[22:10:32] *** Quits: rkrishnan (~user@171.48.57.101) (Ping timeout: 240 seconds)
[22:10:40] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:10:44] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[22:10:49] <[itchyjunk]> say `f :: a -> a`, does `[f]` imply [a] then?
[22:10:53] <tom__> I am going to confuse people at work with iff
[22:11:02] <tom__> Stop misspelling if!
[22:11:15] <dsal> [itchyjunk]: f is id.  I'm not sure what you're asking though.
[22:11:25] <dsal> tom__: I had someone correct one of my PRs before submitting it while I was asleep.
[22:11:41] <[itchyjunk]> hmm
[22:11:47] <tom__> Correct in what way?
[22:11:52] <dsal> s/iff/if/
[22:11:57] <tom__> haha
[22:12:05] <monochrom> What is "`[f]` imply [a]"?
[22:12:25] <[itchyjunk]> i want to make a list out of what f returns
[22:12:49] <monochrom> and?
[22:13:09] <dsal> like, `[f x]`?
[22:13:10] <zzz> [itchyjunk]: rememeber that there' an implicit forall a. in your a -> a, so f = id is the only solution
[22:13:25] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 250 seconds)
[22:14:31] <dsal> "make a list out of what f returns" is kind of a weird way to think about things.  Do you just want a list of one item?  That's [x].  If you want more than one thing, then where do they come from?
[22:14:42] <EvanR> correct by construction crud apps? UrWeb? 
[22:14:51] <monochrom> See, programming is a special case of explaining yourself clearly, as opposed to intuitively.
[22:15:24] <[itchyjunk]> hmmm
[22:15:33] <[itchyjunk]> the [[Char]] is throwing me off honestly
[22:15:45] <EvanR> imagine it says [String] then
[22:15:46] <dsal> Unless you're programming in perl, where you can pretty much just type anything and the runtime will say "make sense"
[22:15:59] <monochrom> :)
[22:16:01] <zzz> monochrom: programming is a way to find out that what your exaplanation was wrong to begin with
[22:16:03] <tom__> haha
[22:16:13] <EvanR> or imagine that [[a]] is a list of rows of a
[22:16:19] <EvanR> or columns
[22:16:27] <zzz> s/what//
[22:16:29] <geekosaur> rubber duck explaining?
[22:16:51] <dsal> The other way to think of it is to just not think of lists of lists and only think in one dimension, get that done, and then think of that whole dimension as one thing and move on to the next dimension.
[22:16:53] <EvanR> [[[a]]] is a list of layers of that xD
[22:16:59] *** Joins: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net)
[22:17:22] <[itchyjunk]> ill think about it somemore before showing my code but basically
[22:17:24] <dsal> If you have a `a -> b` you don't need to think of a `[a] -> [b]` because that's already there.
[22:17:51] <[itchyjunk]>  f "ab cd" ["a","b","c","d"], but what i want is ["ab","cd"]
[22:17:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:17:57] <[itchyjunk]> so i think i am in somewhat of a right track
[22:18:03] <[itchyjunk]> just the details need to be worked out
[22:18:11] <dsal> > unwords "ab cd"
[22:18:13] <lambdabot>  error:
[22:18:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:18:13] <lambdabot>      • Couldn't match type ‘Char’ with ‘[Char]’
[22:18:13] <lambdabot>        Expected type: [String]
[22:18:16] <dsal> damnit
[22:18:18] <zzz> ahah
[22:18:20] <dsal> > words "ab cd"
[22:18:21] <lambdabot>  ["ab","cd"]
[22:18:28] <EvanR> ununwords
[22:18:31] <dsal> @src words
[22:18:31] <lambdabot> words s = case dropWhile isSpace s of
[22:18:31] <lambdabot>     "" -> []
[22:18:31] <lambdabot>     s' -> w : words s'' where (w, s'') = break isSpace s'
[22:18:34] <[itchyjunk]> yes something like that
[22:18:37] <dsal> ok, that's probably not helpful.
[22:18:48] <zzz> wth
[22:19:09] <monochrom> I think it's helpful. Sometimes you didn't know that you have to code like that.
[22:19:18] <monochrom> or even that you can.
[22:19:27] <zzz> but why
[22:19:32] <dsal> Yeah, just ignore `break`  I think the shape is helpful.
[22:19:47] <zzz> @src break
[22:19:48] <lambdabot> break p = span (not . p)
[22:19:53] <dsal> obviously
[22:20:23] <[itchyjunk]> my approach is a bit err odd
[22:20:24] <[itchyjunk]> https://bpa.st/BSQA
[22:20:30] <[itchyjunk]> ignore g, was using that to test things
[22:21:02] <dsal> [itchyjunk]: Yeah, you're just putting everything in its own list, which you knew already.
[22:21:17] <[itchyjunk]> right
[22:21:32] *** Quits: yauhsien (~yauhsien@61-231-63-167.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:21:32] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 265 seconds)
[22:21:47] <dsal> But if you want to group things together while they're not spaces, then you keep adding to that first list while it's not a space, then ignore spaces, then recurse.
[22:22:05] <monochrom> You are asking yourself, how to ensure f "hi there" = ["hi", "there"].
[22:22:19] <[itchyjunk]> thats what i was attempting to do, x: f xs does the keep going part
[22:22:22] <monochrom> And by the induction hypothesis, f "i there" = ["i", "there"]
[22:22:40] <[itchyjunk]> but [x: f xs] wasn't doing what i thought it might do
[22:22:45] <monochrom> So your job is to start with  ["i", "there"] and build ["hi", "there"]
[22:23:03] <geekosaur> (x : f xs) ?
[22:23:05] *** Joins: FragByte (~christian@user/fragbyte)
[22:23:12] *** Quits: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-107.cust.tzulo.com) (Quit: Leaving)
[22:23:27] <geekosaur> > 'a' : []
[22:23:28] <lambdabot>  "a"
[22:23:36] <geekosaur> > ['a' : []]
[22:23:37] <lambdabot>  ["a"]
[22:23:39] <monochrom> (Also note how nicely I have avoided framing it as "change" :) )
[22:24:07] <[itchyjunk]> oh i'll try to use this hint geekosaur just gave
[22:26:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:27:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:27:20] *** Quits: kennyd (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/)
[22:27:27] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:29:27] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[22:31:19] *** Quits: max22- (~maxime@2a01cb0883359800917d653070f119e8.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:32:37] <[itchyjunk]> if i have `f (x:xs) = [x:f xs]` with f (' ':xs) = [], i know it should fully work but for "ab cd", it should be ["a":"b cd"] then ["ab":" cd"] then it encounters " " and it should be [ab:[]] = ["ab"] ?
[22:32:48] <[itchyjunk]> shouldn't fully work*
[22:33:36] <monochrom> No.
[22:33:49] <monochrom> The whole thing. No.
[22:33:55] <zzz> i there any difference (perf wise) between `| null x = ([],[])` and `| null x = (x,x)` ?
[22:33:59] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:34:09] <monochrom> No difference.
[22:34:51] <monochrom> GHC-generated code has a static flyweight [] so saying "x" and saying "[]" both get compiled to the same [] flyweight.
[22:34:55] *** Joins: deadmarshal (~deadmarsh@95.38.116.172)
[22:35:07] <monochrom> Similarly for Nothing and other nullary data constructors.
[22:35:19] <zzz> nice
[22:35:55] <zzz> so i can think of it as just pointers to some "nullary value" in memory?
[22:36:08] <monochrom> Yeah, x already points to the same reused [].
[22:36:35] <monochrom> It's also a statically created [], no heap pressure.
[22:37:47] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:38:02] <zzz> and just out of curiosity, are all nullary constructors the same?
[22:38:10] <monochrom> Ah, that one is a no.
[22:38:21] <monochrom> [] and Nothing are at different addresses.
[22:38:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-025.wadham.ox.ac.uk)
[22:38:41] <zzz> couldn't they be at the same address?
[22:38:59] <monochrom> I think there is no harm, but GHC didn't do it.
[22:39:11] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[22:39:13] <zzz> nice curisioty
[22:39:24] <monochrom> Probably easier to debug in some sense.
[22:40:33] *** Quits: xsperry (~xs@user/xsperry) ()
[22:40:46] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 245 seconds)
[22:41:21] *** {Franciman} is now known as Franciman
[22:43:16] *** Quits: xff0x (~xff0x@2001:1a81:53bb:9600:57:b0d1:750c:1fc) (Ping timeout: 245 seconds)
[22:44:21] *** Joins: xff0x (~xff0x@2001:1a81:53bb:9600:5031:992:22e6:cca9)
[22:45:40] <hololeap> type ThisWord = [Char]
[22:45:45] <hololeap> type Remainder = [Char]
[22:45:59] <hololeap> stringToWordAndRemainder :: [Char] -> (ThisWord, Remainder) -- it might help you to write this first, [itchyjunk]
[22:46:16] *** Joins: xsperry (~xs@user/xsperry)
[22:46:49] <[itchyjunk]> hmm i manage to "this word" -> ["this word"]
[22:47:09] <[itchyjunk]> but i'll try that first
[22:47:56] <zzz> > (:[]) "this word"
[22:47:57] <lambdabot>  ["this word"]
[22:48:20] <zzz> yu have unlocked the angry monkey
[22:48:52] * zzz (:[])
[22:49:04] <monochrom> It is not angry.
[22:49:11] <EvanR> it eats 1 thing and becomes full
[22:49:14] <monochrom> Maybe it is robotic.
[22:49:18] <zzz> i dont remember
[22:49:18] <EvanR> hungry monkey
[22:49:28] <geekosaur> robot monkey is how we used to refer to it
[22:49:32] <EvanR> > (:[]) 'a'
[22:49:34] <lambdabot>  "a"
[22:49:38] <EvanR> > (:[]) 1
[22:49:40] <lambdabot>  [1]
[22:49:46] <maerwald> I think it's a lovely monkey with big beautiful lips
[22:49:53] <maerwald> but that's just my imagination
[22:50:19] <EvanR> :t (:[]) (:[]) -- it can be a cannibal monkey
[22:50:20] <lambdabot> [a -> [a]]
[22:50:31] <monochrom> You project your persona to everything. If you see a ____ monkey, you are the one who is ____
[22:50:39] <EvanR> oof
[22:50:44] <monochrom> Yes I think of myself as robotic, too.
[22:50:53] *** Joins: MrNobody_0000000 (~MrNobody@user/mrnobody-0000000/x-9129771)
[22:50:56] * zzz is angry
[22:51:15] <MrNobody_0000000> hello guys
[22:51:17] <EvanR> you just called me a cannibal
[22:51:19] <maerwald> well, thank you for the compliment
[22:51:28] <zzz> GET OUT
[22:51:30] <MrNobody_0000000> I'm having a little difficulty understanding the ||| operator
[22:51:36] <MrNobody_0000000> I'm reading my xmonad config
[22:51:41] <geekosaur> which one?
[22:51:44] <geekosaur> ah
[22:51:54] <geekosaur> it's not the one you'll find in the standard library
[22:52:08] <MrNobody_0000000> is it specific to xmonad?
[22:52:19] <[itchyjunk]> i just wrote a function that maps "hello world" to "hello world" it seems
[22:52:20] <[itchyjunk]> hmm
[22:52:58] <monochrom> Yes, you wrote foldr (:) [] but with your own recursion.
[22:52:58] <geekosaur> https://hackage.haskell.org/package/xmonad-0.17.0/docs/XMonad-Layout.html#v:-124--124--124-
[22:53:22] <geekosaur> but there's also one in Control.Arrow that does something completely different
[22:54:22] <MrNobody_0000000> tiled ||| Mirror tiled ||| noBorders Full
[22:54:26] <MrNobody_0000000> that's an example
[22:54:45] <[itchyjunk]> i think the way i am approaching this is producing [h [e [ l [ l [o]]]]] or somesuch
[22:55:47] <hololeap> [itchyjunk]: did you try writing that function I mentioned? (it doesn't need that long of a name :p)
[22:55:58] <[itchyjunk]> that's the one i am working on
[22:56:12] *** Joins: hiruji` (~hiruji@pool-100-4-208-71.albyny.fios.verizon.net)
[22:56:13] <[itchyjunk]> just a tiny bit i need to figure out
[22:56:30] <[itchyjunk]> https://bpa.st/EN3Q
[22:56:32] <geekosaur> MrNobody_0000000, this is a shortcut for writing something like (Choose CL tiled (Choose CL (Mirror tiled) Full))
[22:56:37] <[itchyjunk]> h is supposed to be the one you mentioned
[22:56:45] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 250 seconds)
[22:56:49] <[itchyjunk]> i just have an issue with `then x : h xs` part
[22:56:52] <MrNobody_0000000> thanks I'll look it up
[22:57:04] <geekosaur> this is somewhat annoying to write out so we use the ||| shortcut
[22:57:10] <[itchyjunk]> i think the `else [xs]` does what i want
[22:57:17] <hololeap> so with input "these are some words" it should return ("these", "are some words")
[22:57:21] <geekosaur> I pointed to ||| earlier, Choose is just above it and CL just below
[22:57:21] <EvanR> if you go by the types then [h [e [l [l [o]]]]] is very unlikely to happen
[22:57:44] <monochrom> This doesn't escape from what I said.
[22:57:46] <[itchyjunk]> oh like that?
[22:58:04] <[itchyjunk]> i could do h (x:' ':y) = (x,y) 
[22:58:05] <[itchyjunk]> no?
[22:58:27] <hololeap> no, you can't split a list like that, but it shouldn't be too hard to figure out
[22:58:28] <MrNobody_0000000> so is choose comparable to an enumeration
[22:58:44] <[itchyjunk]> ah, let me think for a few more minutes then
[22:58:44] <monochrom> You want h "hi there" = ("hi", "there").  The induction hypothesis says you can assume h "i there" = ("i", "there"). So now you have to bridge that to ("hi", "there").
[22:58:50] <EvanR> see you keep thinking : is joining two lists
[22:58:53] <EvanR> that's ++
[22:59:00] <[itchyjunk]> oh
[22:59:01] <EvanR> and we don't have a pattern for that (for lists)
[22:59:01] <monochrom> As long as you ignore this line of thought, you will get nowhere.
[22:59:42] <geekosaur> MrNobody_0000000, it's a switch. every time you press mod-space, a CL turns into a CR, which causes the corresponding Choose to switch from the left layout to the right
[22:59:58] <geekosaur> (Choose is itself a "layout" for this purpose)
[23:00:03] <monochrom> Especially if you are still thinking of a for-loop, as opposed to this simple non-tail recursion.
[23:00:19] <hololeap> [itchyjunk]: you'll have three cases for that function: for an empty list, for a list starting with a space character, and a list starting with any other character
[23:00:25] <geekosaur> if all the switches are CR, the layout resets such that all the CRs become CLs and you cycle back to the beginning
[23:00:30] <[itchyjunk]> is this signature correct? `h :: [Char] -> ([Char], [Char])
[23:00:35] <monochrom> Yes.
[23:00:35] <hololeap> yes
[23:00:44] <MrNobody_0000000> wow I really need to forget about C lol
[23:00:54] <geekosaur> btw you might want to move to #xmonad, it's quieter there
[23:01:13] <MrNobody_0000000> I'll check it out
[23:01:28] <MrNobody_0000000> Maybe  I'll come back here when I know a bit more about haskell
[23:01:33] <MrNobody_0000000> it's a process haha
[23:01:59] <geekosaur> well, this is less about Haskell than about how we implemented layouts
[23:02:10] <geekosaur> they're a combination of function and data
[23:02:31] <EvanR> forget about C, learn haskell, realize there's a C API xD
[23:02:36] <MrNobody_0000000> are you a developer of xmonad?
[23:02:39] <geekosaur> CLR is data that's stored in the Choose "layout", saying whether it haas curently chosen left or right. Initially they all choose left
[23:02:43] <geekosaur> yes
[23:03:04] <MrNobody_0000000> wow it's an honor
[23:03:30] <sm> how would you write a file strictly ? so that you can read it right afterward and be sure of seeing all the new content  ?
[23:03:42] <monochrom> writeFile already does.
[23:03:56] <monochrom> vanilla Prelude writeFile
[23:04:21] <MrNobody_0000000> thanks for the help
[23:04:42] <geekosaur> no problem
[23:04:56] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9c86:91d6:b6fa:287b)
[23:05:12] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:05:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:05:57] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:05:57] <monochrom> Or if you are already using a Handle, then hClose does it.
[23:06:17] <maerwald> sm: on windows? :)
[23:06:22] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:06:24] <monochrom> Or if you are already using withFile, then waiting for it to return does it.
[23:07:33] <sm> thanks! On all platforms. Good to know writeFile does, I am currently using hPutStr and for that I should close the handle. Great.
[23:07:51] <monochrom> or flush buffer if you can't close yet.
[23:08:09] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:08:09] <maerwald> I don't know if vanilla writeFile will work this way on windows
[23:08:18] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:08:19] <maerwald> I'd probably use Win32 api
[23:08:22] *** Quits: hiruji` (~hiruji@pool-100-4-208-71.albyny.fios.verizon.net) (Ping timeout: 260 seconds)
[23:08:43] *** Quits: xsperry (~xs@user/xsperry) ()
[23:09:08] <monochrom> What would be a possible problem?
[23:09:30] <maerwald> how writeFile interacts with Win32
[23:09:40] <maerwald> and whether it allows reads during writes
[23:10:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[23:10:16] <EvanR> what is this windows FUD
[23:10:24] <monochrom> Um it's sequentially writeFile (which ends with a close) and only after that a readFile.
[23:10:37] <maerwald> ah
[23:11:02] <maerwald> I thought it's like using a file as a pipe
[23:11:03] *** Joins: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2)
[23:11:14] <monochrom> I'm OK if you say "hPutStr then hFlush then try to read but with a different Handle"
[23:12:07] <EvanR> on the same thread?
[23:12:25] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[23:12:57] <monochrom> Well, Windows has pretty paranoid file locking, so as long as you're coming from a different Handle...
[23:13:02] *** Joins: cosimone` (~user@93-47-228-243.ip115.fastwebnet.it)
[23:16:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 240 seconds)
[23:16:29] <geekosaur> iirc there is a problem that Handles aren't GCd immediateloy so an immediate readFile may find the write Handle still there?
[23:18:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:18:31] <monochrom> iirc writeFile is not lazy, unlike readFile, it has a very deterministic and determined hClose.
[23:18:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:18:56] <monochrom> I mean, as far as "iirc" is concerning.
[23:19:02] <monochrom> s/concerning/concerned/
[23:19:18] *** Joins: max22- (~maxime@2a01cb0883359800b686e733ae8fbdbc.ipv6.abo.wanadoo.fr)
[23:19:50] <EvanR> so writeFile is a good driver of a big lazy thing to be written
[23:19:58] <monochrom> Yes.
[23:20:34] *** Joins: hiruji (~hiruji@user/hiruji)
[23:20:50] <monochrom> even putStr is, despite often you don't see the writing.
[23:20:58] <monochrom> But that's buffering not laziness.
[23:21:26] <monochrom> What would "lazy writing" mean? "Don't write until the human peek-a-poo"?
[23:21:41] <EvanR> ask Writer xD
[23:23:41] <hololeap> isn't that how quantum mumbo jumbo works? the universe doesn't write to file until I observe it? :)
[23:24:16] <monochrom> At that level IIRC all physicists agree that the Copenhagen interpretation doesn't apply.
[23:24:52] *** Joins: hiruji` (~hiruji@2606:6080:1001:10:3c5b:63ff:df18:8486)
[23:24:53] <sm> with RecordWildCards, why am I seeing You cannot use `..' in a record update ? I have seen that done lots
[23:25:02] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 240 seconds)
[23:25:19] <jle`> sm: i've seen it a lot in creating records
[23:25:32] <jle`> but i'm not sure it would really make sense in a record update
[23:25:43] <jle`> since it's implying that you're updating all of the fields anyway
[23:25:49] <sm> I'm trying to use it with Data.Default - return def{..}
[23:25:51] <jle`> so you might as well create a new record right?
[23:25:58] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:26:12] <jle`> sm: yeah i'm saying that def{..} would overwrite all of the fields anyway
[23:26:22] <jle`> so it would use none of 'def''s fields
[23:26:39] <sm> yes, I just want to minimise typing
[23:27:14] <monochrom> Are you sure you were not seeing other people doing "Ctor{..}" as opposed to "varname{..}"?
[23:27:18] *** Quits: narendraj9 (~user@2a02:8109:b63f:ff7c::57b2) (Remote host closed the connection)
[23:27:26] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:27:37] <hololeap> jle`: why did you do this to us? https://hackage.haskell.org/package/functor-combinators-0.4.1.0/docs/Data-Functor-Combinator.html#t:Night
[23:27:41] <sm> that must be it I guess monochrom 
[23:27:55] <jle`> i guess it technically "makes sense" to implement, but it's probably sufficiently silly in its function that it's more likely to be done by mistake maybe
[23:28:06] <jle`> hololeap: :)
[23:28:08] <jle`> it's been useful to me
[23:28:10] <jle`> :3
[23:28:13] <hololeap> is that not supposed to be the dual of Day?
[23:28:22] <sm> my idea was to update a default value (smart constructor) so I wouldn't have to set every field
[23:28:34] <jle`> hololeap: ah yes, if that's what you are talking about
[23:28:38] <jle`> hololeap: it's the dual of invariant Day
[23:28:44] <jle`> sm: that would set every field though
[23:28:49] <jle`> what you wrote
[23:29:06] <monochrom> I prefer Knight, if it comes downs to pun.
[23:29:14] *** Joins: son0p (~ff@181.136.122.143)
[23:29:17] <hololeap> oh, ok. it came up in a earlier discussion. "what's the dual of Day? Night?" ... somebody hoogles...
[23:29:30] <geekosaur> there's a ghc issue about this that concluded it didn't really make sense
[23:29:33] <jle`> monochrom: ah that's a better one i think
[23:29:40] <jle`> since both Day and Knight are names in that context
[23:29:40] <geekosaur> (.. in record updates)
[23:29:42] <jle`> darn
[23:30:34] <monochrom> Just bump the major major version :)
[23:30:36] <sm> NamedFieldPuns seems to work better. return def{field2,field5}
[23:30:48] <jle`> that one actually makes sense, yeah
[23:30:51] <hololeap> (oh it does actually say that in the docs)
[23:31:07] <jle`> sm: because def{..} would be equivalent to def{field1,field2,field3,field4,field5} etc.
[23:31:26] <jle`> with namedfieldpuns you can pick which fields you want overwritten
[23:31:46] <janus> that's one thing i like about GHC2021, it has NamedFieldPuns but not RecordWildCards
[23:32:08] <sm> yes. I know def is not loved because it can be harder to read, I'm just trying it in this script since I'm tired of writing both a long data def and then a long smart constructor
[23:32:13] <janus> i saw a pattern in our code base where we have fun A{..} = B{..} though 
[23:32:24] <janus> i dunno if i approve of that though :O
[23:32:28] <jle`> sm: the issue isn't really with def though, i think
[23:32:46] <geekosaur> just with bindings vs. constructors
[23:33:02] <jle`> but i guess you're saying that the original constructor is not exported, but just all the fields?
[23:33:24] *** Joins: chomwitt (~chomwitt@94.69.34.153)
[23:33:35] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6057:883c:398d:9dbd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:34:09] *** Joins: pavonia (~user@user/siracusa)
[23:34:11] <jle`> sm: you're basically using to avoid the equivalent MyLongNameConstructor{..}, right?
[23:34:52] <jle`> janus: heh, that one can be fun :) if you have types that are just equivalent to others but missing fields, like intermediate data types
[23:35:07] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[23:36:16] <janus> thing is, our development environment relies on ripgrep... so unless you have HLS understanding RecordWildCards, there is at least that disadvantage
[23:36:22] <janus> but i guess it's not really a giant problem
[23:36:48] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:07] <jle`> tooling is a big issue with a lot of haskell usage patterns, yeah
[23:37:25] <jle`> but if you rg for fields then you'll at least get the final use sites, right heh
[23:37:51] <nf> monad-dijkstra rules
[23:37:54] <janus> with NamedFieldPuns, if you're supposed to copy all fields over with that pattern, the compiler wouldn't know that... with RecordWildCards it could theoretically warn that you have a field in scope that isn't used
[23:38:07] <nf> i just solved an old AoC puzzle with it and i really like it https://github.com/ncfavier/aoc/blob/main/src/2015/Day22.hs
[23:38:07] <janus> though i think there isn't currently a warning for that
[23:39:03] *** Quits: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:39:21] *** Joins: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de)
[23:39:23] <jle`> janus: ah yeah, the lack of warning is something that does bother me
[23:39:28] <jle`> there's only a warning if *none* are used
[23:39:42] <jle`> maybe in general it's best to replace recordwildcards with namedfieldpuns when you are refactoring
[23:39:45] <janus> but i think we should definitely have a warning like that. then RecordWildCards would have a use case where it is superior to NamedFieldPuns
[23:40:02] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:40:14] <jle`> a warning might not make sense because it's sort of one of the "points" of recordwildcards, i don't think most people use it intending to use all of the fields
[23:40:18] <jle`> unless maybe they should
[23:40:43] <janus> exactly. the warning would be optional, i am not saying it should be in -Wall or anything
[23:42:40] <sm> jle`: yes I'm avoiding that, but more important avoiding having to set all the fields
[23:43:04] *** Quits: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:43:22] *** Joins: ubert (~Thunderbi@p200300ecdf0ba285e6b318fffe838f33.dip0.t-ipconnect.de)
[23:43:50] *** Quits: SSCC (~SSCC@59-102-95-229.tpgi.com.au) (Quit: Client closed)
[23:43:53] <jle`> sm: yeah, my point is that a hypothetical def{..} would set all of the fields
[23:44:12] <jle`> since {..} in a binding position is equivalent to {field1,field2,field3,field4...all fields}
[23:44:28] <jle`> no matter what is already in scope
[23:45:21] <jle`> so if there was a def{..}, it would ignore all of the information in def and just overwrite it with whatever is in scope, and if the field isn't in scope, it'd be set to undefined
[23:48:06] <sm> agreed, thank you
[23:49:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:50:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:50:31] <dminuoso> I wish we had a split extension that just provided the construction via Constructor{..} :(
[23:50:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:51:01] <dminuoso> But without the unhygeniec macro of Constructor{..} pattern matching
[23:51:34] <dminuoso> Ive become very fond of it parsers and all kinds of other ApplicativeDo core
[23:52:49] <janus> dminuoso: if you had a warning that triggered when you used it to match, wouldn't that do? no need for a new extension :P
[23:53:30] <janus> there are already warnings in -Weverything that are too extreme, may as well add another one :P
[23:53:42] <dminuoso> No, I dont care for code that can secretly, without display, introduce identifiers
[23:53:57] <dminuoso> It's bad enough that I use optics TH helpers like makeLenses already.
[23:54:11] <janus> well if you had a warning and you turn on -Werror you will effectively not have that code
[23:54:19] <dminuoso> That's not true.
[23:54:30] <janus> why not?
[23:54:40] <[itchyjunk]> is `where var1 = f n && var 2 = g n` valid syntax?
[23:55:03] <dminuoso> [itchyjunk]: No. What is that supposed to denote?
[23:55:13] <dminuoso> janus: Not sure what to tell you beyond what I just wrote
[23:55:27] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:55:31] <dminuoso> Or wait
[23:55:46] <dminuoso> I think I misunderstood. You mean the warning would fire whenever used as a pattern match?
[23:56:03] <[itchyjunk]> i need to assign 2 valiables var1 and var2 where var1 needs to hold output of f and var2 of g so a function h can return (var1,var2)
[23:56:05] <janus> dminuoso: yes exactly. i am just saying you don't necessarily need a "split extension" to achieve what you want
[23:56:08] <dminuoso> Don't see that getting into GHC, a warning that would warn on a *feature* itself.
[23:56:25] <dminuoso> yet-another-extension seems far more likely and in line with GHC has been doing
[23:56:47] <geekosaur> where {var1 = f n; var2 = g n}
[23:56:48] <janus> dminuoso: i suspect there is less bureaucracy around adding warnings than adding extensions since the ghc proposal process got started
[23:56:57] <[itchyjunk]> oh i see, thanks
[23:57:06] <[itchyjunk]> turns out i can directly (f n, g n) as well :x
[23:57:10] <geekosaur> and you don't need the braces if you use indentation
[23:57:19] <geekosaur> yes
[23:57:51] <geekosaur> (although if the real `f n` is long I'll still do assignments just to keep stuff from wrapping)
[23:57:57] <dminuoso> janus: Honestly, I think you have to take the proposal and extension path
[23:58:05] <geekosaur> s/assignments/bindings/
[23:58:07] <[itchyjunk]> hololeap, i managed to solve the exercise but i had to start from scratch and write 2 helper functions for it :<
[23:58:07] <[itchyjunk]> https://bpa.st/OM6Q
[23:58:24] <dminuoso> There's just no precedence so far, I think
[23:58:50] <[itchyjunk]>  h "a b cd" gives me ("a","b cd")
[23:59:03] <dminuoso> janus: And Im still not sure a warning would suffice.
[23:59:30] <dminuoso> If I look at some source code and see RecordWildCards, I now have to be wary whether or not this could indicate use of unhygenic macros.
[23:59:42] <dminuoso> Whether or not they are used cannot necessarily be seen inside that same source file
[23:59:56] <dminuoso> Because now I have to figure out whether the build process sets that warning (and perhaps even promotes it to an error)
