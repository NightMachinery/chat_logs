[00:26:26] <merit> Alipha: lol... that works
[00:26:35] <merit> I added in bazel `CXX': `/usr/bin/g++`
[00:26:42] <merit> this seems bad
[00:26:58] <merit> but if it works, I twerks
[00:34:27] <merit> I mean, `"CXX": "/usr/bin/g++"`
[00:34:40] <merit> which sets the env for cmake
[00:34:47] <merit> which I guess lets make know that's what I want
[00:34:57] <merit> Make -> Bazel -> CMake -> Make
[00:35:05] <merit>  /wrist
[00:35:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:53:01] *** Joins: bobb_ (~bobb_@dslb-088-066-137-038.088.066.pools.vodafone-ip.de)
[01:13:25] *** Quits: magla (~gelignite@55d46190.access.ecotel.net) (Quit: Stay safe!)
[01:23:05] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[01:26:27] *** Quits: argonautx (~argonautx@i5E867311.versanet.de) (Quit: Leaving)
[01:41:39] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[01:49:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:56:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[01:59:39] *** Joins: ferdna (~ferdna@user/ferdna)
[02:21:20] *** Joins: gggpkm (~gggpkm@60.10.194.46)
[02:21:58] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[02:23:38] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[02:26:14] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[02:27:23] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[02:33:50] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[02:47:01] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[02:49:50] *** Quits: yans (~yans@2a02:8388:4504:1780:b5be:e9d1:8106:a961) (Ping timeout: 260 seconds)
[02:56:47] *** Joins: X-Scale` (~ARM@83.223.251.139)
[02:57:40] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[02:57:52] *** gggpkm__ is now known as gggpkm
[02:58:51] *** Quits: bobb_ (~bobb_@dslb-088-066-137-038.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:58:56] *** X-Scale` is now known as X-Scale
[03:20:38] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[03:21:34] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:22:42] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[03:26:02] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[03:30:03] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (*.net *.split)
[03:30:03] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[03:30:03] *** Quits: majors (~majors@user/majors) (*.net *.split)
[03:30:03] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[03:30:03] *** Quits: DrinkyBird (~drinkybir@sprawl.drinkybird.net) (*.net *.split)
[03:30:03] *** Quits: switchy (sid489027@mechboards/switchy) (*.net *.split)
[03:30:03] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[03:30:03] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (*.net *.split)
[03:30:27] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[03:30:31] *** Joins: buhman (sid411355@user/buhman)
[03:30:41] *** Joins: DrinkyBird (~drinkybir@sprawl.drinkybird.net)
[03:30:42] *** Joins: celphi (sid97751@user/celphi)
[03:30:45] *** Joins: Bodger1234_ (sid503511@uxbridge.irccloud.com)
[03:31:13] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[03:31:35] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[03:31:42] *** Joins: switchy (sid489027@uxbridge.irccloud.com)
[03:31:47] *** Quits: switchy (sid489027@uxbridge.irccloud.com) (Changing host)
[03:31:47] *** Joins: switchy (sid489027@mechboards/switchy)
[03:31:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[03:32:12] *** Joins: Trollmann (~Trollmann@user/trollmann)
[03:32:35] *** Joins: majors (~majors@user/majors)
[03:32:39] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[03:33:13] *** Joins: gggpkm (~gggpkm@60.10.194.46)
[03:34:45] *** Quits: gggpkm_ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[03:35:54] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 268 seconds)
[03:41:42] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[03:45:09] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 268 seconds)
[04:13:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:23:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[04:44:56] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6b2c) (Quit: Leaving)
[04:54:03] *** Joins: The_Jag (~The_Jag@host-82-58-136-144.retail.telecomitalia.it)
[04:55:46] *** Quits: sonic (~sonic@user/sonic) (Quit: WeeChat 3.0.1)
[04:57:23] *** Quits: The_Jag_ (~The_Jag@host-87-14-224-44.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[06:08:49] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[06:09:55] *** Quits: hsv1 (~weechat@gateway/tor-sasl/hsv-2) (Remote host closed the connection)
[06:10:17] *** Joins: hsv1 (~weechat@gateway/tor-sasl/hsv-2)
[06:21:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:23:15] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:23:20] *** Joins: The_Jag_ (~The_Jag@host-79-32-14-38.retail.telecomitalia.it)
[06:25:51] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 260 seconds)
[06:25:56] *** Quits: The_Jag (~The_Jag@host-82-58-136-144.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[06:40:42] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[06:47:47] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[07:07:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[07:08:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:12:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:44:10] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[07:47:47] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 264 seconds)
[07:50:42] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[07:53:51] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 245 seconds)
[07:56:40] *** Joins: gggpkm__ (~gggpkm@221.219.79.236)
[07:59:41] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 245 seconds)
[08:26:11] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:29:01] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Excess Flood)
[08:29:28] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[09:12:23] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 264 seconds)
[09:35:38] *** Quits: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 265 seconds)
[09:45:33] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:b5ea:9d67:614d:69e) (Remote host closed the connection)
[09:47:55] *** Joins: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109)
[09:49:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[09:54:58] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 265 seconds)
[10:10:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[11:35:20] *** gggpkm__ is now known as gggpkm
[11:57:12] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[12:00:41] *** Quits: gggpkm (~gggpkm@221.219.79.236) (Ping timeout: 264 seconds)
[12:10:41] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[12:14:07] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 268 seconds)
[12:18:30] *** gggpkm__ is now known as gggpkm
[12:32:03] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[12:40:18] *** Joins: meator (~meator@user/meator)
[12:48:59] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[12:53:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[12:53:42] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[12:56:46] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 245 seconds)
[12:57:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:59:50] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 246 seconds)
[13:22:48] *** Joins: Firecatmon (~firecatmo@45.125.247.108)
[13:34:26] *** Quits: gggpkm_ (~gggpkm@60.10.23.170) (Remote host closed the connection)
[13:34:50] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[13:34:56] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Remote host closed the connection)
[13:35:20] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[13:35:30] *** Joins: DSpider (~DSpider@82.79.237.121)
[13:36:32] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[13:40:35] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 264 seconds)
[13:42:31] *** Joins: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de)
[13:51:12] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[13:55:56] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:58:18] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[14:03:17] *** Joins: markong (~kvirc@213.146.188.203)
[14:08:58] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[14:19:33] *** Quits: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de) (Quit: Leaving)
[15:14:12] *** Joins: meator (~meator@user/meator)
[16:07:24] *** Joins: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de)
[16:10:42] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 268 seconds)
[16:15:31] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 245 seconds)
[16:22:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:24:05] *** Joins: CaCode (~CaCode@user/cacode)
[16:27:12] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[16:39:19] *** Joins: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp)
[16:55:12] *** Quits: Firecatmon (~firecatmo@45.125.247.108) (Ping timeout: 260 seconds)
[17:35:03] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[17:46:01] *** Joins: bewees (~bewees@user/bewees)
[17:48:20] <bewees> hi, for read-only variables there seems to be a consensus to pass a value `by const reference`. For values to be changed some style guides recommend to pass the value by a pointer, so that people know the value will be changed. Do you recommend to do that or do you recommend to use call by reference as much as possible?
[17:49:58] <Raziel> at this point passing by non-const reference when you wanna change them should be fine, generally
[17:50:30] <Raziel> you should try to make it obvious that the thing passed in is gonna get changed through the function name or such, maybe
[17:53:51] <bewees> Right, with the function name it should be ok. Should call by reference then be preferred because they can be safer, because in a big program a memory address might be accidently accessed by another thread? And only if I really need pointer I would go for them?
[17:59:04] <Svitkona> references alone don't protect you in multi-threaded contexts
[18:05:39] <bewees> Ok, thank you!
[18:09:23] *** Quits: DarkTrick (~DarkTrick@pl-749-047.bunbun.ne.jp) (Ping timeout: 264 seconds)
[18:33:23] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 264 seconds)
[19:17:41] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[19:17:44] *** Parts: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) ()
[19:20:12] <Alipha> bewees: non-const references vs pointers is really just that references have a nicer syntax and cannot be null.
[19:20:16] *** Quits: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:20:37] *** Joins: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de)
[19:22:34] *** Joins: Inline (~Inline@aftr-37-201-241-178.unity-media.net)
[19:23:15] <Alipha> bewees: though also it's typically implied that if you pass by reference, the function only needs the object for the duration of the call. I would pass by pointer if the function intends to store the pointer away somewhere and use it later, after the function call ends
[19:29:56] <cbreak> bewees: passing by pointer is problematic
[19:30:08] <cbreak> avoid it unless you are sure you can make the semantic very clear
[19:31:08] <cbreak> you have to make clear the following aspects: Ownership transfer? Array Size? Array at all? Lifetime expectancy? Nullability?
[19:31:39] <cbreak> passing a pointer can imply that ownership of the pointed-to object is taken, for example as done in the std::unique_ptr constructor
[19:32:00] <cbreak> but it might not, for example when passing a pointer to std::printf. Be sure to make this clear
[19:32:11] <cbreak> with references it is clear: No ownership is transfered
[19:32:49] <cbreak> when passing a pointer, it is unclear how big the array is it points to. That's why many functions in the stdlib expect a pair of pointers (iterator pair semantic) for this. For example std::copy
[19:33:03] <cbreak> or a size_t argument as in std::copy_n
[19:33:46] <cbreak> when you pass an argument by pointer, the strong implication is that it points to the first object in an array. But sometimes ot doesn't. You have to make it clear that you can unambiguously know the size of the array, and whether it's an array at all
[19:34:23] <cbreak> also, if you do ownership transfer, you have to make sure to know whether the object is an array or not (such as std::unique_ptr's specializations for T and T[])
[19:34:58] <cbreak> none of this is a problem with references. They don't refer to arrays at all, unless the type is that of an array reference, which also includes the size of the array. All very type safe.
[19:35:54] <cbreak> When passing a pointer, often the purpose is to keep this pointer stored. And unless ownership is transfered, the consumer of the pointer might have requirements on the object staying alive for some time. This must be communicated to the caller. Failure to do so can cause serious lifetime bugs.
[19:36:44] <cbreak> this is less of an issue with references, since those are usually only expected to stay valid for the duration of the call (although there are exceptions to this, some stdlib types expect referenced objects to have a much broader lifetime)
[19:37:31] <cbreak> And nullability. Pointers can be null. References can not. But despite pointers having the possibility to be null, whether that is supported by a pointer-consuming function needs to be documented. And in many cases, null-pointers aren't supported.
[19:37:58] * cbreak wins the supervillain-monologue-of-the-day award.
[19:59:33] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:19:27] *** Joins: dld (~dld@2601:197:600:1210:4005:8d20:87b1:8dd5)
[20:53:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[20:57:36] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[21:01:12] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[21:04:14] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[21:05:56] *** Quits: Inline (~Inline@aftr-37-201-241-178.unity-media.net) (Ping timeout: 245 seconds)
[21:14:47] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b384:bd52:ad64:846c)
[21:43:43] <merit> so pointers are legacy
[21:53:37] *** cow_2001 is now known as chao_2001
[21:53:44] *** chao_2001 is now known as cow_2001
[22:04:24] <Raziel> legacy would imply that there's been a replacement
[22:04:38] <Raziel> there still are things you can only do with/through pointers, so they're not legacy, no
[22:05:56] <Raziel> but some of the things that used to be done through pointers probably shouldn't be done through pointers now, because there's nicer/safer ways to do em.
[22:27:57] <cbreak> merit: pointers are a powerful and easily abused tool
[22:28:52] <cbreak> there are many alternatives that are better than raw pointers in many situations, but obviously there's nothing that can replace pointers in every situation, or you'd end up with the same problem.
[22:30:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:57:07] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:00:49] <bewees> Thanks for the elaboration. I wrote a small use case with an association between two classes using A::std::vector <B>. To change values in the vector I have to use pointers? I could only set a value when I passed it by pointer. Deletion of vector elements worked for either vector::<B *> or vector:: <B>. See: https://dpaste.com/75QZ4NHWN
[23:00:56] *** Quits: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de) (Quit: Leaving)
[23:07:49] <merit> Ok, ok
[23:08:10] <merit> You can't do the fun things pointers do with refs
[23:08:28] <merit> but that's kinda the point, too
[23:08:30] <bewees> Yep, I think I saw my mistake
[23:08:35] <bewees> Let me paste the fix
[23:10:12] <bewees> merit, Now I can set vector elements fine with m_b1[my_index] = b; https://dpaste.com/EGV2GJ47U so I wonder what approach is recommended among the three options. I think pointers, because I spare one copy?
[23:10:55] <cbreak> don't use pointers unless you can't avoid it.
[23:12:08] <bewees> Gotcha thanks, then I would use the approach `add_b1(B & b)` with `std::vector <B> m_b1;`
[23:12:39] <cbreak> why do you use for (B b : m) ?
[23:12:45] <cbreak> you know that b is a copy, right?
[23:13:26] <cbreak> bewees: also, you're leaking memory
[23:13:30] <bewees> Oh, didn't think about this. So (B & b : m) would save me one copy?
[23:13:33] <cbreak> you must pair every new with exactly one delete
[23:13:37] <cbreak> yes
[23:13:50] <bewees> Oh yeah, adding delete 
[23:43:09] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
