[00:00:50] *** Quits: mro (~mro@port-92-195-152-225.dynamic.as20676.net) (Read error: Connection reset by peer)
[00:00:56] *** Joins: mro_ (~mro@port-92-195-152-225.dynamic.as20676.net)
[00:21:36] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[00:26:59] <d_bot> <mseri> You went monorepo?
[00:27:18] <d_bot> <undu> Mostly, yes
[00:27:37] <d_bot> <mseri> I guess makes rpm versioning much easier
[00:27:40] <d_bot> <undu> Managing rpms with the new system was painful, even with the automation
[00:27:45] <d_bot> <mseri> And dev ðŸ™‚
[00:28:51] <d_bot> <undu> Build times are much faster as well
[00:29:15] <d_bot> <undu> Setting up so many build environments has a high overhead
[00:29:15] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:30:16] *** Joins: rgrinberg (~textual@177.248.156.216)
[00:36:52] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:42:37] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[00:42:55] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[01:05:06] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 272 seconds)
[01:05:51] *** Joins: rgrinberg (~textual@177.248.156.216)
[01:05:58] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[01:20:07] *** Joins: olle (~olle@i5E866D83.versanet.de)
[01:29:16] *** Quits: gravicappa (~gravicapp@46.191.232.8) (Ping timeout: 246 seconds)
[01:37:54] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[01:40:33] *** Quits: mro_ (~mro@port-92-195-152-225.dynamic.as20676.net) (Quit: Leaving...)
[01:57:46] <d_bot> <rgrinberg> for xapi, right?
[01:57:55] <d_bot> <rgrinberg> how long does a clean build take for you guys?
[01:59:53] <Anarchos> rgrinberg a clean build of xapi, or of ocaml itself ?
[02:00:05] <d_bot> <rgrinberg> xapi
[02:04:00] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:04:39] <d_bot> <undu> just xapi? maybe a minute and a half, for building and testing github ci takes 20 minutes, I'm sure the internal CI takes less https://github.com/xapi-project/xs-opam/actions/runs/2068799064
[02:13:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:17:17] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:295a:c0f6:bdc5:6c0) (Quit: Konversation terminated!)
[02:23:11] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[02:25:25] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:39:23] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:58:28] <d_bot> <inkbottle> I've got a "timed out" with `ocamllsp/ocamlformat`, I've already tried several configurations.
[03:00:30] <d_bot> <inkbottle> `ocamllsp` is working, `ocamlformat` is working. But I can't have `ocamlsp` successfully call `ocamlformat`, specifically it times out.
[03:03:02] *** Quits: olle (~olle@i5E866D83.versanet.de) (Ping timeout: 252 seconds)
[03:12:32] *** Quits: salkin (~salkin@84.212.156.62) (Ping timeout: 246 seconds)
[03:18:38] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[03:20:05] *** Joins: Techcable (~Techcable@user/Techcable)
[03:22:49] <d_bot> <inkbottle> Is it possible to make a `rpc` call to `ocamllsp` from command line? To test `ocamlformat` through `ocamllsp` with `emacs` out of the way.
[03:23:42] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[03:25:16] *** Joins: Techcable (~Techcable@user/Techcable)
[03:30:37] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[03:31:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[03:33:31] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[03:56:27] *** Joins: epony (epony@user/epony)
[04:28:13] <d_bot> <rgrinberg> Are you using vscode?
[04:29:11] *** Joins: rgrinberg (~textual@177.248.156.216)
[04:50:11] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:00:40] <d_bot> <inkbottle> No, I'm using `emacs` with `eglot`.
[05:02:14] <d_bot> <inkbottle> It works right out of the box, save for the ocamlformat bit that times out.
[05:16:54] *** Joins: rgrinberg (~textual@177.248.156.216)
[05:26:58] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:27:59] <d_bot> <rgrinberg> I think eglot posts the output from stderr for the server. Is there anything there?
[05:37:28] <d_bot> <inkbottle> There's an eglot buffer and I think it's empty on the subject, `message` buffer says `jsonrpc-error: "request id=8 failed:", (jsonrpc-error-message . "Timed out")`
[05:38:41] <d_bot> <inkbottle> If I hadn't `ocamlformat` installed (opam), I'd get an eglot message about it, coming from ocamllsp.
[05:46:46] <d_bot> <inkbottle> when doing `eglot-format` what it does (I believe), is:
[05:46:47] <d_bot> <inkbottle> ```
[05:46:48] <d_bot> <inkbottle> (jsonrpc-request
[05:46:49] <d_bot> <inkbottle>  (eglot--current-server-or-lose)
[05:46:51] <d_bot> <inkbottle>  :textDocument/formatting
[05:46:52] <d_bot> <inkbottle>  (cl-list*
[05:46:53] <d_bot> <inkbottle>   :textDocument (eglot--TextDocumentIdentifier)
[05:46:55] <d_bot> <inkbottle>   :options (list :tabSize tab-width
[05:46:56] <d_bot> <inkbottle>                  :insertSpaces t
[05:46:57] <d_bot> <inkbottle>                  :insertFinalNewline t
[05:46:58] <d_bot> <inkbottle>                  :trimFinalNewlines t)
[05:47:00] <d_bot> <inkbottle>   nil)
[05:47:01] <d_bot> <inkbottle>  :deferred :textDocument/formatting)
[05:47:02] <d_bot> <inkbottle> ```
[05:47:04] <d_bot> <inkbottle> and it times out, so it doesn't actually error.
[05:48:46] <d_bot> <inkbottle> If I do `ocamlformat bin/main.ml` in a terminal, it's fine.
[05:50:18] *** Quits: slothby (~JoshAshby@irc.isin.space) (Ping timeout: 260 seconds)
[05:51:03] *** Joins: slothby (~JoshAshby@irc.isin.space)
[06:27:05] <d_bot> <inkbottle> Just to check it it was otherwise working, I've done `eglot-rename`, and it worked, and `eglot-code-actions` / `type anotate`, and it worked too.
[06:44:17] *** Quits: chiastre (~chiastre@user/chiastre) (Ping timeout: 240 seconds)
[06:52:47] *** Joins: chiastre (~chiastre@user/chiastre)
[07:13:23] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:27] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:18:14] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[07:20:50] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[07:45:51] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:54:18] *** Joins: mbuf (~Shakthi@122.162.64.255)
[08:01:24] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[08:04:07] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:08:40] <saltrocklamp[m]> if i want to change where opam stores things to something other than `~/.opam`, do i set `OPAMROOT`? the `opam --help` output has circular references between `--root` and `OPAMROOT`, and neither one actually explains what the "root" is
[08:13:19] *** Joins: gravicappa (~gravicapp@46.191.232.8)
[08:19:24] <saltrocklamp[m]> huh, why does `opam init` think that opam.ocaml.org has an expired cert? looks fine in my browser
[08:19:34] <saltrocklamp[m]> but when i check it with openssl it seems expired there too
[08:35:35] <sleepydog> saltrocklamp[m]: i don't get that. here it says it expires May 14
[08:35:50] <saltrocklamp[m]> weird
[08:36:30] <sleepydog> opam init seems happy, too
[08:47:41] <saltrocklamp[m]> ah wait, i read May -> March
[08:47:49] <saltrocklamp[m]> so it's not verifying, but for some other reason
[08:48:12] <saltrocklamp[m]> https://bpa.st/2PSQ
[08:48:24] <saltrocklamp[m]> maybe something with the certs on my system? i'm on macos big sur
[09:52:57] *** Joins: salkin (~salkin@84.212.156.62)
[10:41:54] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:42:10] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:44:29] *** Joins: mro (~mro@port-92-195-231-191.dynamic.as20676.net)
[11:30:32] *** Quits: salkin (~salkin@84.212.156.62) (Quit: salkin)
[11:37:00] *** Quits: mro (~mro@port-92-195-231-191.dynamic.as20676.net) (Remote host closed the connection)
[11:38:43] *** Joins: mro (~mro@port-92-195-231-191.dynamic.as20676.net)
[11:42:31] *** Joins: olle (~olle@i5E866D90.versanet.de)
[11:43:25] *** Quits: bobo (~bobo@37.173.71.147) (Ping timeout: 240 seconds)
[11:43:36] *** Joins: bobo (~bobo@37.166.198.24)
[11:48:45] *** Quits: olle (~olle@i5E866D90.versanet.de) (Quit: leaving)
[11:48:57] *** Joins: olle (~olle@i5E866D90.versanet.de)
[13:15:14] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[13:20:37] *** Quits: mro (~mro@port-92-195-231-191.dynamic.as20676.net) (Quit: Leaving...)
[13:42:24] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[14:06:14] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[14:06:21] <d_bot> <Bluddy> Is there a Lens library outside of Jane Street's Accessors?
[14:14:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[14:17:59] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:19:44] *** Joins: bartholin (~bartholin@158.110.71.83)
[14:26:36] <d_bot> <quernd> https://opam.ocaml.org/packages/lens/lens.1.0.2/
[14:31:11] <d_bot> <Bluddy> thanks!
[15:16:35] *** Quits: chrisz (andygb8dle@55d44066.access.ecotel.net) (Ping timeout: 256 seconds)
[15:18:25] *** Joins: chrisz (dss0jjb5y7@55d4100b.access.ecotel.net)
[15:21:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[15:21:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:49:47] *** Quits: chrisz (dss0jjb5y7@55d4100b.access.ecotel.net) (Ping timeout: 256 seconds)
[15:51:17] *** Joins: chrisz (bz5edi147c@55d453e3.access.ecotel.net)
[16:33:43] *** Quits: bartholin (~bartholin@158.110.71.83) (Ping timeout: 260 seconds)
[16:46:06] *** Joins: bartholin (~bartholin@158.110.71.83)
[18:25:15] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[18:29:28] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[18:30:41] *** Joins: omegatron (~some@p54bd5280.dip0.t-ipconnect.de)
[19:15:03] *** Joins: zebrag (~chris@user/zebrag)
[19:37:15] *** Quits: bartholin (~bartholin@158.110.71.83) (Ping timeout: 256 seconds)
[19:45:28] *** Quits: olle (~olle@i5E866D90.versanet.de) (Ping timeout: 272 seconds)
[19:47:01] *** Joins: neilthereildeil (~neilthere@149.8.13.140)
[19:47:04] <neilthereildeil> hey guys
[19:47:44] <neilthereildeil> im trynna deobfuscate some ocaml code:
[19:47:44] <neilthereildeil> Hashtbl.add h fd e; e in
[19:47:50] <neilthereildeil> whats does the semicolon do here?
[19:48:32] <d_bot> <NULL> Separate expressions, similarly to how it separates instructions in imperative languages
[19:48:58] <d_bot> <NULL> It's nearly the same as `let () = Hashtbl.add h fd e in e`
[19:49:03] *** Joins: bartholin (~bartholin@158.110.71.83)
[19:50:14] <neilthereildeil> what would that have done?
[19:50:22] <neilthereildeil> the "in e" part?
[19:50:43] <d_bot> <NULL> It returns e after running the first part
[19:51:45] *** Quits: neilthereildeil (~neilthere@149.8.13.140) (Client Quit)
[19:52:24] *** Joins: neilthereildeil (~neilthere@149.8.13.140)
[19:52:39] <neilthereildeil> so this code is inside is nested 4 levels deep in let statements
[19:52:40] <neilthereildeil> https://paste.debian.net/1236414/
[19:52:58] <neilthereildeil> it doesnt actually run the first part until any of the outer functions are called, does it?
[19:54:53] <d_bot> <NULL> It will be run if add_event is called and Hashtbl.find h fd raises Not_found
[19:57:12] <neilthereildeil> right
[19:58:02] <neilthereildeil> so "; e" basically causes that whole let statement to evaluate to e, which effectively returns e?
[20:00:33] <neilthereildeil> please correct me if im wrong?
[20:05:20] <neilthereildeil> also, what does "event_set e in" do after the ';'? does that cause the add_event function to return those 2 values?
[20:15:13] *** Quits: bartholin (~bartholin@158.110.71.83) (Ping timeout: 256 seconds)
[20:18:11] *** Joins: bartholin (~bartholin@158.110.71.83)
[20:24:52] <d_bot> <NULL> The returned e is going to be the value for the outer `let e = ...` definition
[20:39:16] <neilthereildeil> i just realized there are 2 let e= statements
[20:39:29] <neilthereildeil> does it just use the e with the more tightly bound scope?
[20:41:05] <d_bot> <NULL> In `let e = expr1 in expr2`, every definition in `expr1` is out-of-scope for `expr2`
[20:41:24] <d_bot> <NULL> So which e is "taken" is unambiguous here
[20:42:20] <neilthereildeil> aren't the variables defined in expr1 are usable in expr2?
[20:42:38] <d_bot> <NULL> No they're not
[20:42:56] <d_bot> <NULL> Ususally, you do `let v1 = ... in let v2 = ... in ...`
[20:43:26] <neilthereildeil> so in the code i pasted, how is 'h' accessible inside of the most nested statements?
[20:43:33] <d_bot> <NULL> This way, v1 is bound in v2's definition and after it
[20:44:29] <d_bot> <NULL> It seems you're confusing `let v2 = let v1 = ... in ... in ...` and `let v1 = ... in let v2 = ... in ...`
[20:44:43] <neilthereildeil> ahh ok so "let" statement extends the current scope into whatever follows?
[20:44:56] <d_bot> <NULL> The former confines `v1` to the definition of `v2`, the latter does not
[20:46:01] <neilthereildeil> ok understood thx
[20:46:22] <neilthereildeil> so "; e" basically causes that whole let statement to evaluate to e, which effectively returns e?
[20:46:25] <d_bot> <glennsl> OCaml does not have statements, it has expressions. `let x = <e1> in <e2>` is an expression with two sub-expressions, `e1` and `e2`
[20:46:50] <neilthereildeil> so "; e" basically causes that whole let EXPRESSION* to evaluate to e, which effectively returns e?
[20:47:38] <d_bot> <glennsl> `<e1>; <e2>` is an expressiont hat evaluates to `e2`, yes
[20:47:46] <neilthereildeil> ok gotit
[20:48:16] <d_bot> <glennsl> (and you'll get a warning if `e1` does not evaluate to `unit`, because that would usually be a mistake)
[20:48:17] <neilthereildeil> also, what does "event_set e in" do after the ';'? does that cause the add_event function to return those 2 values?
[20:48:53] <neilthereildeil> or is that a function call?
[20:50:05] <d_bot> <NULL> `f x` is a function call
[20:52:37] *** Joins: dextaa_ (~dextaa@user/dextaa)
[20:56:48] <octachron> Another important point is that `in` is not meaningful by itself. You should always read it as a part of a local let binding: `let <pattern> = <expr1> in <expr2>`
[20:57:38] <d_bot> <NULL> (Just like `let <p> = <e>` is only meaningful on its own when it is a toplevel definition)
[20:57:51] <neilthereildeil> yea, im noticing let, in and = dont always have to go togehter. trynna ready about that now...
[20:59:15] <d_bot> <NULL> There are 3 things : toplevel definition `let <p> = <e>`, local definition `let <p> = <e> in <e>` and boolean equality (or any function you define it as) `<e> = <e>`
[20:59:35] <d_bot> <inkbottle> I'm struggling with https://github.com/ocaml/ocaml-lsp in conjunction with https://github.com/joaotavora/eglot:
[20:59:36] <d_bot> <inkbottle> everything is working fine and straight out of the box, with no `emacs/eglot` configuration and only `opam install ocaml-lsp-server ocamlformat` and `dune init proj my_project`, `cd my_project`, `touch .ocamlformat`. Then just emacs-open `bin/main.ml`, and `M-x eglot`, and everything is working fine. Save that `M-x eglot-format`, which is a staple, says: `jsonrpc-error: "request id=35 failed:", (jsonrpc-error-message . "Timed o
[20:59:52] <d_bot> <NULL> Those are the only 3 constructs where `let`, `in` and `=` can appear as tokens
[21:00:21] <octachron> Not exactly `=` is used for all definitions `type t = ...` `module M = ...` `module type MT = ...`
[21:00:37] <d_bot> <NULL> Oops, forgot those
[21:01:03] <octachron> At the same time, they are toplevel definitions
[21:01:27] <neilthereildeil> so in the code i pasted, theres:
[21:01:28] <neilthereildeil> let h = Hashtbl.create 57 in
[21:01:28] <neilthereildeil> Â let add_event event_set fd =
[21:01:42] <neilthereildeil> one expression has "in" withile the other doesnt
[21:01:50] <neilthereildeil> does this mean that add_event is global?
[21:02:04] <neilthereildeil> err. toplevel
[21:02:21] <d_bot> <NULL> No, it's in another definition so it isn't
[21:02:22] <octachron> In this case, this means that you have not finished to read the definition of add_event
[21:02:35] <d_bot> <NULL> This just means your code is truncated
[21:02:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:03:01] <octachron> and that there is an `in` later that is paired wit the `let` in `let add_event = ... `
[21:03:12] <neilthereildeil> ok, so the context matters when deciding if something is toplevel. not just the absence of "in"
[21:04:00] <d_bot> <NULL> If the code is well-formed, the absence of `in` is enough; if it isn't, you could say so
[21:04:30] <d_bot> <NULL> Toplevel definitions are usually those which start unindented
[21:04:42] <neilthereildeil> does whitespace matter in ocaml?
[21:04:54] <neilthereildeil> like in py
[21:04:57] <neilthereildeil> ?
[21:05:05] <companion_cube> nope
[21:05:06] <d_bot> <NULL> Not more than C or JS: it matters for the reader, not the compiler
[21:05:52] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[21:06:20] <d_bot> <NULL> to* the reader
[21:06:30] *** Joins: epony (epony@user/epony)
[21:10:07] <neilthereildeil> can we think of let={ and in=}?
[21:10:26] <d_bot> <NULL> There's a definition in there also
[21:11:07] <neilthereildeil> no i mean mentally, can we think of let as similat to '{' and in as similar to '}' in C?
[21:11:11] <octachron> No
[21:11:46] <d_bot> <NULL> I understood, but you're forgetting that let in is a definition more than a scoping mechanism
[21:11:59] <d_bot> <NULL> The scope is similar
[21:13:31] <neilthereildeil> ur saying as far as scoping goes, we can think of let as similat to '{' and in as similar to '}' in C?
[21:13:33] <octachron> You could say that there are `{` `}` around `expr1` in `let p = <expr1> in`
[21:14:14] <neilthereildeil> how would i represent nested C {{}} in ocaml?
[21:14:29] <neilthereildeil> in terms of scope?
[21:14:31] <companion_cube> nested begin/end
[21:14:50] <d_bot> <NULL> Or nested parentheses, those are equivalent
[21:16:01] <octachron> `let <p> = <expr1> in <expr2>` will be most similar to `{var <p>= {<expr1>}; <expr2>}` in C. But C is a bad mental model for any expression-bases language like OCaml
[21:16:10] *** Joins: rgrinberg (~textual@177.248.156.216)
[21:31:56] *** Joins: kor1 (~kor1@201.17.127.170)
[21:34:02] *** Quits: kor1 (~kor1@201.17.127.170) (Client Quit)
[21:34:13] *** Joins: kor1 (~kor1@user/kor1)
[21:34:35] <neilthereildeil> is there any requirements for balancing of let and in?
[21:35:27] <octachron> It doesn't make sense to have an `in` without a `let`.
[21:36:13] <octachron> However, toplevel definitions use a `let` without an `in`.
[21:36:52] *** Quits: kor1 (~kor1@user/kor1) (Client Quit)
[21:37:19] *** Joins: kor1 (~kor1@user/kor1)
[21:38:02] <d_bot> <NULL> (But besides those, `let` don't make sense without an `in`)
[21:39:35] <neilthereildeil> which 'e' does "event_set e in" refer to?
[21:39:52] <d_bot> <NULL> The only one in context
[21:40:03] <neilthereildeil> i see 2 'e's
[21:40:16] <neilthereildeil> which one is in context here?
[21:40:17] <d_bot> <NULL> The inner one is not in context at call site
[21:40:32] <d_bot> <NULL> because it's in a definition
[21:41:33] <neilthereildeil> <NULL> It seems you're confusing `let v2 = let v1 = ... in ... in ...` and `let v1 = ... in let v2 = ... in ...`
[21:41:33] <neilthereildeil> <NULL> The former confines `v1` to the definition of `v2`, the latter does not
[21:41:35] <d_bot> <NULL> Rather, it is defined in the definition of another variable
[21:41:49] *** Quits: kor1 (~kor1@user/kor1) (Ping timeout: 240 seconds)
[21:41:53] <neilthereildeil> i see let let in in pattern here
[21:42:34] *** Joins: kor1 (~kor1@user/kor1)
[21:42:35] <neilthereildeil> this means that "e = init_event ()" is confined to the contact of:
[21:42:36] <neilthereildeil> try Hashtbl.find h fd
[21:42:36] <neilthereildeil> Â  Â with Not_found ->
[21:42:37] <neilthereildeil> right?
[21:42:46] <neilthereildeil> context*
[21:43:03] <d_bot> <NULL> No, even smaller
[21:44:36] <d_bot> <NULL> `let e = init_event () in Hashtbl.add h fd e; e` is a complete expression, what follows is the `in` of a bigger expression containing this one
[21:45:08] <d_bot> <NULL> This means that what's after the definition is the only place where this `e` is in context
[21:45:41] <neilthereildeil> but itsnt this parsed the same as yiour example?
[21:45:45] <neilthereildeil> let let in in
[21:46:03] <d_bot> <NULL> Pretty much
[21:46:23] <d_bot> <NULL> (There's a try with construct between the two lets, but this doesn't change much)
[21:46:52] *** Quits: kor1 (~kor1@user/kor1) (Client Quit)
[21:46:55] <d_bot> <NULL> So `v1` is confined to inside the definition of `v2`
[21:47:00] <neilthereildeil> according to what you said, this means that "e = init_event ()" is confined to the context of:
[21:47:00] <neilthereildeil> try Hashtbl.find h fd
[21:47:01] <neilthereildeil> with Not_found ->
[21:47:12] <neilthereildeil> what is v1 and v2 here?
[21:47:17] <d_bot> <NULL> As soon as you pass the second `in`, `v1` is out of scope
[21:47:18] *** Joins: kor1 (~kor1@user/kor1)
[21:48:51] <d_bot> <NULL> `let v2 = <v1,v2 not defined> let v1 = <v1,v2 not defined> ... in <v1 defined, v2 not> ... in <v1 out-of-scope, v2 defined> ...`
[21:51:35] <neilthereildeil> so "e = init_event ()" is out of scope for "event_set e"?
[21:52:11] <d_bot> <NULL> If you mean "the e that is defined by init_event", yes
[21:52:20] <neilthereildeil> ok
[21:53:16] *** Quits: kor1 (~kor1@user/kor1) (Ping timeout: 245 seconds)
[21:53:18] <neilthereildeil> and "event_set e" is referring to the 'e' 5 lines prior
[21:53:21] <neilthereildeil> right?
[21:53:47] <octachron> yes
[21:53:57] <neilthereildeil> and the e 5 lines prior ended up being the 'e' that was returned by "; e"?
[21:53:57] *** Quits: mbuf (~Shakthi@122.162.64.255) (Quit: Leaving)
[21:53:58] <d_bot> <NULL> the whose definition starts 5 lines above, yes
[21:54:20] *** Joins: kor1 (~kor1@user/kor1)
[21:54:30] <d_bot> <NULL> The try with construct splits the flow, in one case this e is what is returned
[21:54:41] <neilthereildeil> ok gotit thanks
[21:54:42] <octachron> only if `Hashtbl.find` at line 5 raised a Not_found exception
[21:55:19] <neilthereildeil> ok guys, thats enough for today LOL
[21:55:25] <neilthereildeil> thanks so much for your help
[21:56:14] *** Quits: neilthereildeil (~neilthere@149.8.13.140) (Quit: Client closed)
[21:58:50] *** Quits: kor1 (~kor1@user/kor1) (Ping timeout: 246 seconds)
[22:23:48] *** Quits: bartholin (~bartholin@158.110.71.83) (Quit: Leaving)
[22:42:01] *** Joins: olle (~olle@i5E866D90.versanet.de)
[23:09:23] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[23:20:48] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 272 seconds)
[23:27:34] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:38:28] *** Joins: vicfred (~vicfred@user/vicfred)
[23:42:39] *** Joins: spip (~bobo@37.165.33.103)
[23:43:36] *** Quits: bobo (~bobo@37.166.198.24) (Ping timeout: 272 seconds)
