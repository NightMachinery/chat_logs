[00:00:09] <jinsun> yes eggs are dead
[00:00:11] <ztrawhcse> idk why pip wheel claims to not support pyproject.toml there though :D
[00:01:11] *** Quits: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net) (Read error: Connection reset by peer)
[00:01:14] <dale> oriba: I think this discussion about packaging probably plays out monthly, maybe weekly, and this is why I have opted to just follow that guide I linked and move on with my coding unless/until the packages they selected become unusable. :)
[00:01:16] *** Joins: panella32 (~panella32@185.229.59.132)
[00:02:13] <oriba> dale: yes, looks like a good advice to follow that document :-)
[00:02:31] <dale> It's at least not bad advice, I hope, and in any case I seem to have ended up with a working package. :)
[00:02:43] *** Quits: mcglk (~mcglk@131.191.49.120) (Quit: (seeya))
[00:03:16] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[00:03:48] <puff> Hm, re: my question about csv reader, if you need to use enumerate(reader) then you can use the optional start parameter to skip the first line:  enumerate(reader, 1)
[00:04:32] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:04:36] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 240 seconds)
[00:04:41] <jinsun> oriba: backend is the thing that takes your source code and some config and create distribution archives from that, and front end is the thing that determines what build backend to use and prepares a build environment with all the build dependencies and then calls the backend to do the build, see PEP 517 for more details https://www.python.org/dev/peps/pep-0517
[00:04:46] *** Quits: ztrawhcse (3d1f427b6a@archlinux/bugwrangler/eschwartz) (Ping timeout: 250 seconds)
[00:04:46] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Ping timeout: 250 seconds)
[00:04:46] *** Quits: srhm (dda3db84b5@user/srhm) (Ping timeout: 250 seconds)
[00:05:26] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[00:05:27] *** Joins: srhm (dda3db84b5@user/srhm)
[00:05:27] *** Joins: ztrawhcse (3d1f427b6a@archlinux/bugwrangler/eschwartz)
[00:05:53] *** Quits: vishwin (~brioux@2001:470:1f07:302::1) (Read error: Connection reset by peer)
[00:06:12] *** Joins: vishwin (~brioux@2001:470:1f07:302::1)
[00:07:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:07:15] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:07:22] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:07:55] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[00:07:58] <ChrisWarrick> puff: that’s not what enumerate’s first parameter does
[00:08:08] <puff> ChrisWarrick: No, the second parameter.
[00:08:12] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:08:12] <ChrisWarrick> puff: second*
[00:08:18] *** Quits: cowsay-moo (~cowsay-mo@2001:ac8:25:400:1016:44e2:837e:7026) (Remote host closed the connection)
[00:08:23] <puff> It's not?
[00:08:23] <ChrisWarrick> puff: it only specifies the first *number* that appears, not the first item
[00:08:39] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[00:08:47] <ChrisWarrick> puff: enumerate([-1], 1234) gives you (1234, -1)
[00:08:55] *** Quits: ano (~ano@user/ano) (Ping timeout: 240 seconds)
[00:09:06] *** Quits: Narrat (~omnius@p200300df5f123b3b06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[00:09:14] *** Joins: ano (~ano@user/ano)
[00:09:15] <puff> for rownumber, row in enumerate(reader(inputfile), 1):
[00:09:19] <puff> Is what I'm thinknig.
[00:09:27] <puff> Ah, wait, I gotcha.
[00:09:32] <jinsun> to skip items you can use itertools.islice
[00:09:35] <puff> You're saying it only sets the counter, not the row.
[00:09:40] <jamea> ChrisWarrick:  os.startfile('C:\\Path\To\File.xlsx')  time.sleep(3)  hwnd = win32gui.GetForegroundWindow()  win32gui.ShowWindow(hwnd, win32con.SW_MAXIMIZE)
[00:09:40] <puff> Thanks, dunno how I missed that.
[00:09:43] <jamea> interesting
[00:09:50] <ChrisWarrick> jamea: please ask your questions to the entire channel
[00:10:24] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[00:11:52] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[00:11:57] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 256 seconds)
[00:13:20] <jamea> cant install https://paste.debian.net/1231655/   pip install win32gui   anya dvice?
[00:13:28] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[00:13:29] *** Joins: shad (~shad@user/shad)
[00:13:44] <jamea> *advice
[00:13:53] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:14:09] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:14:25] <jinsun> win32gui comes with pywin32 I think
[00:14:33] <jinsun> so you have to pip install pywin32
[00:14:54] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[00:15:07] <jamea> ok, thanks
[00:15:07] <jamea> R
[00:15:14] <jamea> Requirement already satisfied: pywin32 in c:\python310\lib\site-packages (303)
[00:15:16] *** Joins: reticuli (~reticuli@user/reticuli)
[00:15:21] <shad> Hi, i have an issue with this code https://github.com/chazapp/garden/blob/master/lights.py ; this code is supposed to setup GPIO leds on raspberry pi. The method when_activated doesn't seem to run as associated to my "Lights" object. Any idea how to make that code work ?
[00:15:40] *** Quits: not_not (~not_not@193.178.220.11) (Ping timeout: 272 seconds)
[00:16:35] <shad> i suspect the method still fires if it's in the range of "TimeOfDay",  but not associated with the class. Akin to ".bind()" in Javascript
[00:19:58] <dale> shad: The "self" in onActivate is going to be bound to the instance that set when_activated, so it's not like JS in this case.
[00:20:06] <dale> shad: The Lights instance, that is.
[00:20:15] *** Quits: henbruas (~henbruas@ti0003a400-2412.bb.online.no) (Ping timeout: 252 seconds)
[00:20:34] <dale> shad: Maybe try sprinkling some print("got to X") kind of statements around to find out if your code is being called or not?
[00:21:39] *** Joins: viaSanctus (~viaSanctu@user/viasanctus)
[00:22:00] *** Joins: henbruas (~henbruas@ti0003a400-2412.bb.online.no)
[00:22:49] <foo> Ok, so git-commit is showing me exit code: 1 on several hooks... now to find where the log is so it's more verbose and I know what to actually do, heh.
[00:23:14] * foo now understands why grym wanted to KISS... err, I mean, suggested the KISS method on pre-commit
[00:23:19] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:23:36] *** Quits: viaSanctus (~viaSanctu@user/viasanctus) (Client Quit)
[00:24:08] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:24:19] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:24:37] <foo> eg. Add trailing commas......................................................Failed -> ok, so what do I have to do to fix that?
[00:24:41] *** Joins: viaSanctus (~viaSanctu@user/viasanctus)
[00:24:44] <foo> Maybe it's not as clear as I'd like and this is to be expected
[00:25:20] <ztrawhcse> perhaps the simpler methodology would be to not use pre-commit, and just run the tools you care about directly
[00:25:35] <foo> ztrawhcse: too much effort, though?
[00:25:52] <foo> ztrawhcse: (I've been doing that for years, I think it makes more sense to solve this in pre-commit)
[00:26:01] <foo> I can also remove some of these hooks, too
[00:26:48] <foo> eg. interrogate failed. what functions lack docstrings?
[00:26:54] <foo> Maybe they just expect folks to know
[00:27:39] <ztrawhcse> I did just make the big-mouthed claim that it's *less* effort, not more effort, to shun pre-commit. So presumably I disagree about it being more effort :)
[00:27:53] <jinsun> it should mention the file name and line number in the message ideally
[00:28:41] <jinsun> but if you are using some gui for git, it might hide that, so use the cli if you're not using it
[00:29:10] *** Joins: mcglk (~mcglk@131.191.49.120)
[00:29:11] <ztrawhcse> what are the hooks involved, and what are the *actual* linting tools hidden under layers of pre-commit?
[00:30:25] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:30:42] <jinsun> oh add-trailing-comma doesn't complain it just rewrites the code
[00:30:45] *** Joins: dme86 (~dan@user/dan86)
[00:31:15] <jinsun> so pre-commit would be complaining that the hook modified the file
[00:31:24] <foo> jinsun: agreed, that's basically what I'm looking for.
[00:31:26] <foo> jinsun / ztrawhcse - https://bpa.st/LV4A
[00:31:48] <jinsun> well git status will show you
[00:32:06] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[00:32:35] <foo> jinsun: hmm, everything in git status is staged. I'm expecting to see something unstaged when I run that? :thinking
[00:32:51] *** majors_ is now known as majors
[00:33:28] <jinsun> pre-commit should also have told though ideally, but maybe it doesn't, I haven't used it recently
[00:34:16] <foo> I could just remove that plugin too
[00:34:25] *** Parts: Earnestly (~earnest@user/earnestly) (WeeChat 3.4)
[00:34:30] <foo> I'm surprised it's not showing me anything
[00:34:44] <OliverUK> I am using the socket library to send and receive TCP packets.  I have a line data = s.recv(1024) to receive but how do I know how much the other side will send before they send (in this case 1024)?
[00:35:03] <exarkun> OliverUK: You have to arrange to know it.
[00:35:12] <exarkun> OliverUK: This is called a "protocol".
[00:35:18] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[00:35:21] <exarkun> OliverUK: There are many protocols already.  Perhaps one of them is suitable for your application.
[00:35:59] *** Quits: satta_satta (~AdminUser@55d41988.access.ecotel.net) (Ping timeout: 256 seconds)
[00:36:08] <OliverUK> exarkun: I am talking to a system that uses it's own protocol
[00:36:22] <exarkun> OliverUK: Then that protocol defines how you will know.
[00:36:35] <exarkun> (Or it doesn't and the whole system is broken, of course.)
[00:37:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:37:35] <ztrawhcse> so a mixture of pre-commit hooks to *lint* your code and hooks to *modify* your code
[00:37:46] *** Joins: korg815 (~korg815@user/korg815)
[00:37:49] <ztrawhcse> this doesn't seem like a wonderful idea :p
[00:38:07] *** Quits: onichomp (~onichomp@2806:264:4408:1f2:5550:1ec2:7947:17fa) (Read error: Connection reset by peer)
[00:38:09] <OliverUK> exarkun: Thanks
[00:38:45] *** Joins: onichomp (~onichomp@2806:264:4408:1f2:5550:1ec2:7947:17fa)
[00:39:24] *** Quits: arinov (~arinov@77.67.139.142) (Ping timeout: 240 seconds)
[00:39:57] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[00:40:04] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[00:40:05] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[00:40:54] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[00:40:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:42:41] *** Joins: cosmo (~user@43.sub-174-208-104.myvzw.com)
[00:43:45] *** Spitfire is now known as Spitteh
[00:43:54] *** Spitteh is now known as Spitfire
[00:44:04] *** Joins: mugwort (~mugwort@host86-187-228-211.range86-187.btcentralplus.com)
[00:44:31] <exarkun> why is it impossible to step into an attrs __eq__ implementation with pdb
[00:44:44] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[00:44:46] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[00:45:46] <agronholm> is it possible to build CPython on Windows with Visual Studio 2022?
[00:46:19] <mugwort> hi, I'm looking to make a clustering method but one of the input variables is cyclical and so is one of the outputs, i.e. i expect where the longitude cycles round at 360 -> 0, the output angle will also be around a full angle ahead, but I can figure how to make a clustering method take this into account as some near 360 degrees will be 360 less so
[00:46:20] <mugwort> they'll look like outliers
[00:46:28] *** Quits: cozmo (~user@65.78.142.57) (Ping timeout: 256 seconds)
[00:46:29] <agronholm> by default it seems to want an earlier version of the Windows 10 SDK than is offered by this Visual Studio, and when I install it separate, it can't find the SDK
[00:47:11] <BtbN> The SDKs are usually fully backwards compatible. So that seems like a weird dependency
[00:47:35] <agronholm> then I tried retargeting it to the nearest SDK offered by Visual Studio, but then the build failed because it could not find sqlite3 (which was downloaded but with a different version than the build was looking for)
[00:48:02] <agronholm> I haven't the slightest clue why that would happen, or if it's related to the differing SDK versions
[00:49:15] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:d068:c7d1:a1c0:59b4) (Quit: Client closed)
[00:50:11] *** Joins: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs)
[00:50:47] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da)
[00:53:34] <kosh> agronholm, you could build it on vs 2022 but you would also break every single binary package for python
[00:53:42] <OliverUK> with socket library and sending TCP packets, is it 'bad' to close the connection before waiting for a response, even if the server might want to send one?
[00:53:45] *** Joins: dme86 (~dan@user/dan86)
[00:53:54] <kosh> argoneus, for each version of python a version of visual studio and build tools are chosen and everything uses that on window
[00:55:05] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[00:55:25] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[00:55:31] *** Joins: Mat1010 (~Mat1010@168.181.209.34)
[00:55:35] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[00:55:39] <exarkun> OliverUK: You'll have to specify what you mean by "bad"
[00:55:44] *** Parts: Mat1010 (~Mat1010@168.181.209.34) ()
[00:55:49] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:57:15] *** Joins: vakera_pingveno (~dan@2600:1700:21f9:b150::30)
[00:58:34] *** Quits: panella32 (~panella32@185.229.59.132) (Quit: Textual IRC Client: www.textualapp.com)
[00:58:38] <OliverUK> exarkun: Well, I need to send a packet to a system for it to take an action, it will send a response to let me know what action it has taken but I actually don't care.  I don't want it to hold up the server though if it is waiting to send a response or something
[00:58:44] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 272 seconds)
[00:59:51] <agronholm> kosh: I'm not concerned about that – I just want to test my changes to the _overlapped module
[00:59:57] <exarkun> OliverUK: Do you care if the server took the action?  If it even received your message?
[01:00:19] <agronholm> but as it stands I cannot build CPython at all
[01:00:38] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[01:01:03] *** Joins: pgr (~pgr@37.120.156.253)
[01:02:00] <OliverUK> exarkun: No, I only care that I sent the message but I defo don't want to impact the server performance with this sending of messages, if it is 'better' for the server for me to wait for the reply then I will
[01:02:19] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:03:15] <exarkun> OliverUK: "better" just doesn't mean anything in this context.
[01:03:31] <exarkun> OliverUK: If you don't care if your message is delivered, go ahead and close the socket as soon as you send the message.
[01:03:47] *** Joins: andrew_ (~andrew@2601:42:900:1f00::109)
[01:04:04] *** andrew_ is now known as apos
[01:04:13] <exarkun> OliverUK: Closing the socket immediately is "better" _for you_ because it lets you avoid slowing down your sender and has no negative consequences that you care about.
[01:04:17] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Ping timeout: 240 seconds)
[01:04:36] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[01:04:49] <exarkun> If you cared about your message being delivered, closing the socket immediately would be worse _for you_ because you would be giving up delivery/failure notifications.
[01:04:57] *** Joins: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr)
[01:05:00] *** Quits: marcello42 (~mp@p200300dfaf10fe015baf6eed7f4ef68f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:05:27] <ApostleInTriumph> Hello. How do I use multiprocessing to speedup this code? essentially, I have 64 cores available, but this for loop is executing on just one CPU https://bpa.st/2ARQ
[01:05:28] <exarkun> (It seems a little odd to be sending a message but not care if it is delivered or not, but there are certainly systems that operate on unreliable messaging, so it's not completely absurd.)
[01:06:23] *** apos is now known as aposm
[01:06:28] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:d068:c7d1:a1c0:59b4)
[01:06:59] *** Quits: aposm (~andrew@2601:42:900:1f00::109) (Client Quit)
[01:07:04] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:07:08] *** Joins: aposm (~andrew@2601:42:900:1f00::109)
[01:07:21] *** Quits: aposm (~andrew@2601:42:900:1f00::109) (Client Quit)
[01:07:30] *** Joins: aposm (~aposm@2601:42:900:1f00::109)
[01:07:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:07:50] <jinsun> agronholm: this says it should be possible https://devguide.python.org/setup/#windows, but you also need to select the Python development workload and the optional Python native development tools component
[01:08:02] <stewie925> happy Sunday, all,  requesting input on  a better way to rewrite line number 9 in the following snippet: https://bpa.st/BNDQ
[01:08:50] *** Quits: aposm (~aposm@2601:42:900:1f00::109) (Client Quit)
[01:09:04] <exarkun> stewie925: most people would probably find a for loop more readable than a list comprehension there
[01:09:15] <agronholm> jinsun: ok, thanks for pointing me to the right direction – I think I might know what the problem is
[01:09:39] *** Joins: dme86 (~dan@user/dan86)
[01:09:46] <exarkun> ApostleInTriumph: `v` is unbound in your example
[01:09:51] *** Quits: simplicius (~simplicio@2a02-a45b-3dc8-1-1d3a-6766-2ae7-f393.fixed6.kpn.net) (Quit: Leaving)
[01:10:02] <foo> Ok, I have 3 git pre-commit hooks failing: autopep8, isort, and black. It doesn't say exit status 1, though. I expect black and isort would simply make changes... not fail... not sure what's blocking the commit.
[01:10:08] <ApostleInTriumph> exarkun i wanted the example to be short, but consider v to be coming from another outer forloop
[01:10:57] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:11:04] <exarkun> ApostleInTriumph: so it is effectively constant for this block?
[01:11:17] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[01:11:22] <exarkun> ApostleInTriumph: so you just want to call compute_fps `num_fps_ind` times?
[01:11:30] <exarkun> with exactly the same arguments each time
[01:11:32] <jinsun> foo: black and isort don't fail, bur pre-commit decides they fail if they modify some file, and you need to manually re-add the changed files and commit again
[01:11:51] <exarkun> and compute_fps is a pure function (it doesn't depend in hidden mutable state)?
[01:11:51] <nedbat> foo: you can run them in check mode instead of change mode
[01:11:55] *** Quits: nomic (~nomic@185.217.117.193) (Quit: Leaving)
[01:12:24] <ablegreen> stewie925: i think you can use executor.map
[01:12:38] <ablegreen> instead of submit
[01:12:49] *** Joins: audio (~audio@user/audio)
[01:13:00] <stewie925> ablegreen: and exarkun - thank you!
[01:13:09] <exarkun> ApostleInTriumph: naively, cur_fps_inds.extend([compute_fps(v, 1024)] * num_fps_ind) would be a faster replacement w/o even using any extra cores
[01:13:09] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[01:13:32] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:13:35] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[01:13:35] <foo> jinsun / nedbat - thank you. I run git commit, I see 3 fails, I then do git status - everything is staged, I see nothing unstaged (I did previously, but I just added them git add file.py and did git commit) - same issue
[01:13:36] <hrob> Im wondering if Ive been using the term "no-opt" incorrectly in documenting my python functions, lol
[01:13:42] <foo> Perhaps I'm missing something
[01:13:51] <stewie925> ablegreen: yes, I also wrote it using executor.map() , and I agree this is a better way.   But I m writing two functions side by side to show why executor.map is better hehe
[01:13:59] <hrob> no-opt I was assuming, "does not modify or cause any side-effects"
[01:14:17] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 240 seconds)
[01:14:17] <ApostleInTriumph> exarkun yes exactly. compute_fps is farthest point sampling
[01:14:26] <ApostleInTriumph> depending on initial random start, i'll get different results
[01:14:35] <ApostleInTriumph> here, I'm trying to precompute 50 such indices
[01:14:51] <foo> I wonder if I need something for isort to say to use black in my pre-commit (like I do with command line isort)
[01:14:58] <exarkun> ApostleInTriumph: where is the random start parameter, though
[01:15:06] <foo> Right now this is failing: https://bpa.st/Y3KA -> nothing unstaged in git status after this
[01:15:07] <ApostleInTriumph> that's inside compute_fps
[01:15:18] <exarkun> ApostleInTriumph: so compute_fps is not a pure function after all
[01:15:19] *** Joins: esther (~esther@136.62.7.216)
[01:15:24] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[01:15:27] <ApostleInTriumph> it is a function
[01:15:44] <exarkun> ApostleInTriumph: a pure function always returns the same value when called with the same arguments
[01:15:48] <jinsun> foo: why do you have both autopep8 and black?
[01:15:56] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:16:06] <ApostleInTriumph> exarkun https://en.wikipedia.org/wiki/Farthest-first_traversal
[01:16:20] <foo> jinsun: because I'm a pre-commit noobie, please have some empathy. :) Do they both do similar things differently? I may have misunderstood the docs
[01:16:31] *** Quits: aslicedbanjo (~aslicedba@host86-178-157-216.range86-178.btcentralplus.com) (Quit: Leaving.)
[01:16:32] <ApostleInTriumph> by this definition, no it's not
[01:16:54] <exarkun> ApostleInTriumph: It is relatively easy to use extra cores to add concurrency and speed up execution of pure functions
[01:17:05] <exarkun> ApostleInTriumph: It is arbitrarily more complex to do this for non-pure functions
[01:17:09] <jinsun> foo: using more than one formatter is a terrible idea, both will be fighting about which way to format is right, autopep8 will format black formatted files, and black will modify autopep8 formatted files
[01:17:27] <exarkun> ApostleInTriumph: Can you refactor compute_fps so that it _is_ a pure function?  Say, but taking some of the "impurities" out of it and making them parameters instead?
[01:17:33] <foo> jinsun: ok, understood - I missed the memo on that. In that case I'll just go with black since that's what I was manually running in vim beforehand. Thanks for helping me understand that.
[01:17:55] *** Quits: pgr (~pgr@37.120.156.253) (Quit: leaving)
[01:18:36] <jinsun> foo: isort and black can also fight, that's why you need to use isort --profile=black, with autopep8 there is no way to make it black compatible I think (and you don't need it really if you use black), so just remove it
[01:18:36] <exarkun> ApostleInTriumph: For example, if compute_fps calls `random.randrange()` somewhere, move that call out and make the result a parameter compute_fps accepts
[01:19:00] <foo> jinsun: yup, added profile black in args. Removed pep8... I do like this much better after doing git diff and seeing changes
[01:19:05] <exarkun> ApostleInTriumph: Or if it needs to generate a _lot_ of random values, then make it instantiate its own `random.Random` and accept a seed parameter that it uses to seed that Random instance
[01:19:26] <foo> jinsun: great! Got it working, thank you thank you.
[01:20:28] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[01:20:30] *** Joins: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6)
[01:20:42] *** Quits: magla (~gelignite@55d46ecf.access.ecotel.net) (Quit: Stay safe!)
[01:20:48] <ApostleInTriumph> exarkun i don't understand why i'd do that
[01:20:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:21:10] <ApostleInTriumph> i want 1024 well-separated points from a set of 1000. where separation metric is Euclidean
[01:21:15] <exarkun> ApostleInTriumph: If you have a pure function, multiprocessing.map() will probably just work and then you can run the calls in parallel on your 64 cores.
[01:21:16] <jinsun> foo: cool, try to avoid adding too many auto-formatting tools, because they all have to play along and know about each other, or else they will constanty fight and rewrite your code
[01:21:53] <exarkun> ApostleInTriumph: Sorry, I don't know about your domain and I'm not going to learn enough about it to matter in the next 9 minutes (at which point I have to leave).
[01:22:05] *** Joins: dme86 (~dan@user/dan86)
[01:22:06] <foo> jinsun: why can't we all just be friends and get along? I don't need my pre-commits fighting with each other. Life is too short... thank you ;)
[01:22:07] <exarkun> ApostleInTriumph: The domain shouldn't really matter, though.
[01:22:30] <ApostleInTriumph> that's why my question was how should I use multi processing :)
[01:22:37] <exarkun> Indeed!
[01:22:47] <exarkun> And the way you should use it is to make your function pure and then call multiprocessing.map. :)
[01:23:21] <ApostleInTriumph> i see! and why should I make it pure?
[01:23:23] <exarkun> If you skip the first part then I don't know what will happen.  You could try it, of course.  The most likely result is that your program will become non-deterministically incorrect.
[01:23:45] <exarkun> If you have a pure function, it will behave the same way whether you call it normally or with multiprocessing.map.
[01:23:55] <exarkun> If you have an impure function, it *might* behave the same way.
[01:24:29] *** Joins: ejjfunky (~ejjfunky@125.164.23.55)
[01:25:15] <exarkun> For example, if it uses the random, each child process /might/ get the same random seed and all of your calls to compute_fps will actually use the same "random" sequence of values.
[01:25:20] *** Joins: ejjfunky0 (~ejjfunky2@125.164.18.221)
[01:25:39] <ApostleInTriumph> I see, that makes sense. Thanks!
[01:25:41] <exarkun> There are an infinite number of ways a function can be impure so there are an infinite number of ways it could break.  That's just one possibly-relevant example.
[01:25:45] *** Joins: puzzled (~puzzled@83-85-202-120.cable.dynamic.v4.ziggo.nl)
[01:25:49] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:b07c:b562:c9fc:b27a)
[01:25:59] <ApostleInTriumph> would it be possible to use it in a notebook ? or should I move it to a script?
[01:26:21] <exarkun> A jupyter notebook?  I don't have much experience with those.
[01:26:30] <ApostleInTriumph> yes
[01:27:07] <exarkun> People here talk about them all the time though so maybe someone else knows (if the multiprocessing module is compatible with jupyter notebooks)
[01:27:22] *** Quits: asbel (Shaka@user/shaka) (Quit: ...)
[01:27:36] *** Joins: parv (~quass@user/parv)
[01:27:39] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:d068:c7d1:a1c0:59b4) (Quit: Client closed)
[01:28:10] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:54c5:a541:eeee:60e9) (Ping timeout: 260 seconds)
[01:28:59] <ChrisWarrick> you should be able to try it and see
[01:29:32] <ChrisWarrick> I wouldn’t be surprised if it didn’t work
[01:29:58] *** Parts: bad_blue_bull (~user@178.70.156.192) ()
[01:30:06] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[01:30:25] *** Joins: defn (~n0b0dy@user/defn)
[01:30:34] *** Quits: d3fn (~n0b0dy@user/defn) (Ping timeout: 250 seconds)
[01:32:31] *** Guest8016 is now known as GiverOfDomani
[01:33:00] *** Joins: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b)
[01:33:17] <ApostleInTriumph> ChrisWarrick i've seen notorious behaviour from notebook, hence I'm sceptical
[01:33:20] *** Quits: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b) (Read error: Connection reset by peer)
[01:33:32] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[01:33:49] <ChrisWarrick> ApostleInTriumph: I recommend not using notebooks for anything serious
[01:34:05] *** Quits: esther (~esther@136.62.7.216) (Read error: Connection reset by peer)
[01:34:22] <ApostleInTriumph> ChrisWarrick apart from security issue, what's wrong though? I've grown up a lazy programmer due to it, so kinda thankful
[01:34:33] *** Joins: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b)
[01:34:36] <ApostleInTriumph> easy for quick prototyping
[01:34:42] *** Quits: onichomp (~onichomp@2806:264:4408:1f2:5550:1ec2:7947:17fa) (Ping timeout: 260 seconds)
[01:35:11] <ChrisWarrick> ApostleInTriumph: https://docs.google.com/presentation/d/1n2RlMdmv1p25Xy5thJUhkKGvjtV-dkAIsUXP-AL4ffI/edit
[01:35:48] *** Quits: faris (~faris@lfbn-idf1-1-1759-158.w90-91.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[01:36:11] *** Joins: esther (~esther@136.62.7.216)
[01:36:49] <ApostleInTriumph> lol i can strongly identify with slide 6
[01:36:55] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[01:37:24] *** audio is now known as audioburn
[01:37:49] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:38:02] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[01:38:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:38:17] *** audioburn is now known as audio
[01:40:37] *** Quits: esther (~esther@136.62.7.216) (Read error: Connection reset by peer)
[01:41:24] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[01:41:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[01:41:56] *** Joins: esther (~esther@136.62.7.216)
[01:41:57] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[01:43:18] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[01:44:23] *** Joins: klf (~fkl@67.216.48.0)
[01:44:27] *** Parts: klf (~fkl@67.216.48.0) ()
[01:44:34] *** Joins: zuplex (~zuplex@202.51.76.205)
[01:44:36] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[01:45:57] *** Quits: esther (~esther@136.62.7.216) (Ping timeout: 240 seconds)
[01:47:46] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:48:28] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[01:48:42] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[01:50:24] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:50:27] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Quit: emf)
[01:51:54] <mawk> look I made a base32 encoder https://bpa.st/AZ7Q
[01:52:10] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[01:52:20] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[01:52:32] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[01:52:42] *** Joins: greentree (~greentree@pool-74-101-99-157.nycmny.fios.verizon.net)
[01:52:45] *** Quits: greentree (~greentree@pool-74-101-99-157.nycmny.fios.verizon.net) (Changing host)
[01:52:45] *** Joins: greentree (~greentree@user/greentree)
[01:53:28] *** Joins: palasso (~palasso@user/palasso)
[01:53:30] *** Joins: teut (~teut@122.161.83.81)
[01:53:40] *** Quits: greedom (~greedom@p200300de674d5b0089331a0bb91838bc.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:53:58] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[01:54:13] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[01:54:36] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 240 seconds)
[01:55:47] *** Joins: vince (~vince@75.127.14.76)
[01:57:18] <mugwort> hi i have 2 radius variables, rad1 and rad2, and i have to distances d1 and d2 (which might be None), i want to set another radius variable, rad to whichever rad1 or rad2 has the mininum corresponding distance variable
[01:57:32] <jamea> i need use a list arraylist with 5 columns, how to?
[01:57:56] <mugwort>         rad = None
[01:57:57] <mugwort>         if d1!=None and d2!=None:
[01:57:57] <mugwort>             if min(d1, d2) == d1:
[01:57:58] <mugwort>                 rad = rad1
[01:57:58] <mugwort>             else:
[01:57:59] <mugwort>                 rad = rad2
[01:57:59] *** litharge sets mode: +q $a:mugwort
[01:58:01] *** Joins: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur)
[01:58:31] *** litharge sets mode: -q $a:mugwort
[01:58:34] <teut> d1 = None or 0   # gives 0
[01:58:45] *** Joins: andrew_ (~andrew@107.174.64.146)
[01:58:47] <teut> mugwort so you can use this trick
[01:58:53] <hrob> does type annotation on arguments and returns have any impact on performance in python?
[01:59:11] *** andrew_ is now known as aposm
[01:59:17] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 240 seconds)
[01:59:33] <Repiphany> Type annotations are only used by static type checkers and not on runtime
[02:00:10] <hrob> Repiphany thanks!   was hoping so :)    linting and ide
[02:00:10] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 272 seconds)
[02:00:32] <teut> rad = min([rad1 or float("inf") , rad2 or float("inf")])
[02:00:35] *** Quits: sentriz (~sentriz@109.255.139.98) (Remote host closed the connection)
[02:00:40] <hrob> Repiphany  although I imagine that some frameworks may use it...?  like pydantic?
[02:00:45] *** Joins: sentriz (~sentriz@109.255.139.98)
[02:00:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d50:ed7b:88e6:c382) (Read error: Connection reset by peer)
[02:01:05] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[02:01:55] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[02:02:07] <hrob> type annotations are probably contained somewhere within some types of classes? and can perhaps affect performance depending on class implementation?
[02:02:33] <mugwort> teut does that pick infinity when rad1 is none?
[02:03:05] <jinsun> mawk: divmod on line 6
[02:03:58] <mugwort> nice trick
[02:04:10] <hrob> mugwort  no it doesnt, if rad2 is smaller then doesnt
[02:04:21] <mugwort> yeah no i meant for each variable
[02:04:21] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:05:24] <mugwort> but its the distance variable im wanting to use to select the rad so I'd do something like
[02:05:35] <teut> it will give you the one present is one of them is None
[02:05:41] <teut> if one of *
[02:05:42] <mugwort> index (min([d1 or float("inf") , d2 or float("inf")])
[02:06:03] <mugwort> index (min([d1 or float("inf") , d2 or float("inf")])) in [d1, d2]
[02:06:25] <teut> thats obfuscated code
[02:07:10] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:07:12] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[02:07:41] <hrob> mugwort  yeah any  foo = bla or something_else   will give you something_else   if the bla is a falsy... i.e. if bla = None, "", []    empty or none things
[02:07:59] *** Joins: mugwort89 (~mugwort@host86-187-228-211.range86-187.btcentralplus.com)
[02:08:06] <mugwort89> what i meant was i need the index of that to pick the radius variable
[02:08:08] <teut> I was wondering why does int(None) doesn't give  0 and a type error
[02:08:29] <teut> and instead gives a*
[02:09:02] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[02:09:46] *** Quits: chives (~chives@64.130.100.177) (Ping timeout: 256 seconds)
[02:10:31] <mawk> ah yes jinsun and also 9 and 11, thanks
[02:10:37] *** Quits: mugwort (~mugwort@host86-187-228-211.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[02:10:50] <hrob> mugwort   I dont like falsy/truthy evaluations much...  rather hard to read, and error prone I found... but I bet many wont agree
[02:11:15] *** Joins: aknot (~aknot@2603-900a-1503-17bb-948c-8b07-1309-13ff.inf6.spectrum.com)
[02:12:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[02:12:44] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[02:12:53] *** Quits: mugwort89 (~mugwort@host86-187-228-211.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[02:12:54] <hrob> mugwort  you want to know the index 0 or 1... depending on which one got picked?
[02:13:02] *** Quits: Sidiq (~Guest21@36.72.21.216) (Quit: Client closed)
[02:13:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[02:13:50] <hrob> mugwort  with two things... just do two lines of code...
[02:14:18] <teut> https://www.youtube.com/watch?v=Y4Gt3Xjd7G8&t=3409s    46:30  , why does the producer has call_later by 1 sec, why not call_soon?
[02:14:24] *** Joins: mugwort (~mugwort@host86-187-228-211.range86-187.btcentralplus.com)
[02:14:25] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:14:39] *** Joins: tejr (~tejr@user/tejr)
[02:15:01] *** Quits: dthpulse (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:15:13] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Quit: Client closed)
[02:15:36] <mugwort> i wish if you didn't put except: pass, it would just assume thats what you meant
[02:15:53] <mugwort> like even if they changed it so it did that it wouldnt break all the older code
[02:16:01] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 272 seconds)
[02:16:02] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[02:16:04] *** Joins: dthpulse (~quassel@podciarou.sk)
[02:16:21] <jamea> how to create an array of 5 columns and N elements?
[02:16:30] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[02:16:39] *** Parts: teut (~teut@122.161.83.81) ()
[02:16:46] <nedbat> mugwort: it would assume that in what situation?
[02:16:47] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[02:17:26] <mugwort> it you put try: something but don't specify an except statement
[02:17:53] <nedbat> mugwort: i see.
[02:17:54] <mugwort> so you try something and if you dont specify anything if it falis it just continues
[02:20:43] <Jong> I'm reading that in python the head of a function starting def functionName and ending with a colon is called the "function signature". Is this correct?  I always called it the function declaration.  That's the lingo I learned when learning C and C++.
[02:21:19] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Quit: Client closed)
[02:21:49] *** Quits: upsala (~zcb@185.209.196.167) (Quit: WeeChat 3.4)
[02:24:04] <parv> To me, function signature is only about the parameters taken & values returned by a function
[02:25:24] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:26:37] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 240 seconds)
[02:27:08] <nedbat> Jong: to be pedantic, python doesn't have declarations, it has definitions.
[02:27:25] <nedbat> Jong: even in C and C++, the "function signature" is what the function accepts and returns.
[02:27:36] <nedbat> Jong: so I would call the def line the function signature, yes.
[02:28:38] <Jong> Weird, the word "signature" does not appear once in K&R The C Programming Language 2nd Ed.
[02:28:55] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:28:55] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[02:29:08] <nedbat> Jong: they might not have used that term, but lots of people do:  https://www.google.com/search?q=c%20function%20signature
[02:29:35] <Jong> thanks nedbat
[02:32:28] *** Quits: shad (~shad@user/shad) (Ping timeout: 272 seconds)
[02:33:06] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:33:19] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:33:38] <jamea> xListaSOV1=[]   xListaSOV1.add(0.48024431877165336)  AttributeError: 'list' object has no attribute 'add'
[02:33:51] *** Quits: mugwort (~mugwort@host86-187-228-211.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[02:34:15] <Repiphany> append, not add
[02:34:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[02:35:39] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:35:41] *** Joins: evanextreme (~evan@2604:4080:1000:8150:1cc2:43f9:3edb:f1c0)
[02:38:19] *** Quits: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[02:38:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:39:05] *** Quits: cosimone (~user@93-34-133-75.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:39:06] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:39:27] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:41:00] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:41:49] *** Joins: Pickchea (~private@user/pickchea)
[02:41:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:43:59] *** Quits: OP-0 (~pca290122@94.134.227.107) (Quit: WeeChat 3.4)
[02:44:03] *** Quits: puzzled (~puzzled@83-85-202-120.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[02:46:03] *** Joins: Guest1090 (~Guest10@89.214.155.67)
[02:46:16] *** Quits: Guest1090 (~Guest10@89.214.155.67) (Client Quit)
[02:46:32] *** Quits: babilen (~babilen@user/babilen) (Ping timeout: 252 seconds)
[02:47:01] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[02:47:58] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
[02:48:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[02:48:56] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[02:49:43] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[02:50:56] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:52:49] *** Quits: evanextreme (~evan@2604:4080:1000:8150:1cc2:43f9:3edb:f1c0) (Read error: Connection timed out)
[02:53:44] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:54:30] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 260 seconds)
[02:57:41] *** Joins: nomic (~nomic@185.217.117.193)
[02:58:42] <jamea> exist a way for drwat something TEXT in the Screen(canvas)?
[03:01:36] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[03:02:08] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[03:02:19] *** Joins: wakeup (~wakeup@user/wakeup)
[03:02:35] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[03:03:01] *** Quits: sentriz (~sentriz@109.255.139.98) (Remote host closed the connection)
[03:03:03] *** Quits: pgib (~textual@173.38.117.90) (Ping timeout: 252 seconds)
[03:03:10] *** Joins: sentriz (~sentriz@109.255.139.98)
[03:03:56] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[03:03:59] *** Joins: creedofnecessity (~creedofne@mobile-107-77-199-124.mobile.att.net)
[03:04:11] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[03:04:13] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:04:38] *** Quits: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b) (Read error: Connection reset by peer)
[03:04:49] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:05:14] *** Joins: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b)
[03:07:37] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 256 seconds)
[03:10:33] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[03:11:24] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[03:12:05] <Gustavo6046> Does '-pre' in version strings get considered? Like, is 2.13.1-pre1 considered lesser than 2.13.1?
[03:18:12] *** Joins: Seto_Kaiba (~hunterkll@remote.kisaracorporation.com)
[03:18:45] <jinsun> Gustavo6046: yes, see https://www.python.org/dev/peps/pep-0440/ and https://packaging.pypa.io/en/latest/version.html
[03:18:47] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:19:25] <Gustavo6046> ah, thanks!
[03:19:35] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:20:12] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:8313:4753:b259:91cf) (Ping timeout: 240 seconds)
[03:20:43] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:21:20] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[03:21:33] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[03:21:34] *** Quits: Yugi (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 260 seconds)
[03:22:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:23:10] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:23:42] *** Joins: mwsb (~mwsb@user/mwsb)
[03:24:17] *** Quits: aknot (~aknot@2603-900a-1503-17bb-948c-8b07-1309-13ff.inf6.spectrum.com) (Ping timeout: 240 seconds)
[03:25:09] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:54c5:a541:eeee:60e9)
[03:25:23] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[03:25:35] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 240 seconds)
[03:26:16] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[03:28:36] *** Quits: dreamon (~dreamon@pd95035d1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:29:06] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:29:45] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:30:19] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:42] *** Joins: Guest6511 (~Guest65@2603-6010-4903-d184-0218-d705-fa62-f556.res6.spectrum.com)
[03:30:43] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:51] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[03:32:06] *** Quits: fofoni_ (~fofoni@user/fofoni) (Remote host closed the connection)
[03:32:21] *** Joins: fofoni_ (~fofoni@user/fofoni)
[03:33:18] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:33:38] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 256 seconds)
[03:34:32] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[03:35:20] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:37:01] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Quit: Reconnecting)
[03:37:14] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[03:38:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 256 seconds)
[03:39:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:39:22] *** Joins: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net)
[03:40:14] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[03:40:36] *** Joins: masoudd (~masoudd@user/masoudd)
[03:42:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:42:45] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:43:56] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[03:44:27] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[03:47:00] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[03:47:30] *** Joins: Xano (~Xano@2a00:23c4:4204:700:aa3:d50:3c93:ad01)
[03:48:13] *** Joins: babilen (~babilen@user/babilen)
[03:48:26] *** Joins: S010 (~S010@2a02:8084:4261:f700:2291:10e1:4488:92fd)
[03:48:28] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:48:44] *** Quits: NoelFlantier3 (~Hubert@195.201.244.189) (Remote host closed the connection)
[03:48:54] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[03:49:05] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[03:49:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[03:49:08] *** Joins: NoelFlantier3 (~Hubert@195.201.244.189)
[03:49:09] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:49:14] <Xano> Is there something like concurrent.futures.wait() that works with asyncio futures?
[03:49:31] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[03:49:38] *** Joins: Wulf (~Wulf@user/wulf)
[03:50:09] *** Joins: mickey8 (~user@user/mickey)
[03:51:02] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[03:51:21] <Yhg1s> Xano: asyncio.gather.
[03:53:12] <Xano> Anything that's not async? Or would the only way to run a coroutine in plain non-async code be to use a thread?
[03:53:53] <dale> Hmm, typeshed thinks codecs.register_error's handler should take a UnicodeError argument, but typeshed also defines UnicodeError without any attributes like object or start.  I see why they did this, but it would seem to leave the user in a little bit of a conundrum: either type the parameter as UnicodeDecodeError/UnicodeEncodeError, or else leave an annoying ex=cast(UnicodeDecodeError, ex) sort of
[03:53:56] <dale> thing as the first line of the handler.
[03:54:06] <Yhg1s> Xano: is the event loop already running? If not, you want to start the event loop. If it is running, you can't wait for it to run your future without being an async function.
[03:54:42] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[03:55:19] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:d068:c7d1:a1c0:59b4)
[03:55:37] <dale> It would put my mind at ease if I knew CPython didn't generate bytecode for noop statements like ex=cast(..., ex).
[03:55:47] <stewie925> I am trying to understand the advantage of process pool executors over multiprocessing in Python
[03:55:58] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:56:25] <stewie925> all I "know" is concurrent.futures.ProcessPoolExecutor spawns worker processes,  while multi-processes spawn "multiple processes"?
[03:57:15] <Yhg1s> stewie925: they are the same thing.
[03:57:19] *** audio is now known as audiomouse
[03:57:19] *** Joins: Guest22fdsafdsaf (~Guest22fd@2a00:23c5:ed80:e501:b570:41ae:5f2f:177c)
[03:57:21] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 272 seconds)
[03:57:26] <Yhg1s> (the interface is slightly different, that's all, really.)
[03:57:26] <dale> stewie925: It probably matters most which API you prefer.  I could swear ProcessPoolExecutor is using multiprocessing under the hood.
[03:57:48] <stewie925> oh, thank you so much guys
[03:58:16] <stewie925> but codewise, I like ProcessPoolExecutor better, you dont need to specify start() and join()
[03:58:43] <stewie925> and the execute.map() is a dream lol - really nice to work with it
[03:58:44] <jinsun> dale: cast is not special cased by python, it is just a normal function, https://github.com/python/cpython/blob/v3.10.2/Lib/typing.py#L1715
[03:58:49] <dale> jinsun: I know.
[03:59:26] <dale> jinsun: What I meant to say, half-seriously, was that I am bothered that CPython is incurring the overhead of a function call that is presumably lambda a, b: b.
[04:00:35] <dale> stewie925: Instead you have concurrent.futures.wait and Executor.shutdown? :)
[04:00:39] <Xano> Yhg1s, Gotcha. Thanks!
[04:00:54] <jinsun> dale: yeah there is some overhead, and cast is to be avoided for type safety anyway, try to get typeshed fixed if the annotation is buggy
[04:01:30] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[04:01:46] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[04:01:49] <dale> jinsun: I'm not really sure that it is buggy.  I honestly don't know how I'd want this to be fixed.
[04:01:51] <stewie925> Dale: ooohhhh... I need to look that up (wait and shutdown) - Im learning multiprocessing and trying to gather examples and save them to my github
[04:02:08] *** Quits: Guest22fdsafdsaf (~Guest22fd@2a00:23c5:ed80:e501:b570:41ae:5f2f:177c) (Quit: Client closed)
[04:02:48] <dale> I think I am surprised that assert isinstance(ex, UnicodeDecodeError) isn't hinting mypy and pyright that ex is UnicodeDecodeError, not UnicodeError.
[04:03:26] <jinsun> dale:  can you show the error https://mypy-play.net/ ?
[04:03:39] <dale> Oh wait, now it's working, my mistake.  I must not have... saved?  Weird.
[04:03:40] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:d068:c7d1:a1c0:59b4) (Quit: Client closed)
[04:03:57] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[04:04:01] <dale> I do think typeshed should probably add typing.NoReturn to the signature for handlers, though.  I probably should open an issue for that.
[04:04:21] <dale> jinsun: I will thank you for motivating me to check again. :)
[04:04:37] <jinsun> :)
[04:05:26] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:07:19] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[04:08:42] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[04:09:03] *** Joins: cozmo (~user@233.sub-174-208-162.myvzw.com)
[04:10:01] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 272 seconds)
[04:10:38] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[04:13:10] *** Quits: cosmo (~user@43.sub-174-208-104.myvzw.com) (Ping timeout: 272 seconds)
[04:14:14] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Read error: Connection reset by peer)
[04:14:29] *** Joins: funhouse (~funhouse@user/funhouse)
[04:15:00] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[04:17:55] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[04:18:11] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[04:18:17] *** Quits: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6) (Quit: Leaving)
[04:18:26] *** Joins: Soni (~quassel@autistic.space)
[04:19:37] <mat001> New to web apps in Flask. When a user logs inselects tem from the list and deletes it. Then another separate user on diff machine logs in with their credentials and they go to their list of item, then the first user can see the list of the second user. How can I handle this cross-user route conflicts? I don't know even what the concept, web terminology for this is
[04:20:50] *** Joins: jazzy (~jaziz@user/jaziz)
[04:21:50] <akk> mat001: It sounds like the issue is being aware of what happens in your database (or whatever is acting like a database).
[04:21:56] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:22:28] <akk> mat001: Like, are these lists of items stored per user or global?
[04:22:36] <mat001> akk: thx. I'm not using a database. There is a session file that's created. It's telegram api I'm using with flask.
[04:22:58] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:23:07] <mat001> akk: the items in the list are pulled from the user's telegram messenger account then directly shown in the frontend
[04:23:25] *** Quits: MJ (~mjpieters@zopatista.plus.com) (Quit: ZNC - http://znc.in)
[04:23:59] *** Joins: cosmo (~user@65.78.142.57)
[04:23:59] <akk> mat001: In that case, the second user shouldn't be able to see the first user's list unless that's what happens in telegram.
[04:24:01] <mat001> there is no database
[04:24:04] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[04:24:18] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[04:24:27] *** Quits: abaiste^ (~abaiste@50.233.120.162) (Remote host closed the connection)
[04:24:30] <akk> probably there is, it's just stored on telegram's servers instead of yours :)
[04:24:41] <jamea> how to python draw text on dektop GetWindowDC(GetDesktopWindow);
[04:24:50] <ztrawhcse> dale: to be fair, any form of typing is going to incur a bit of runtime performance, the goal is to make that be minimal. And lambda x: x is not bad, honestly.
[04:24:55] <mat001> akk: well, the second user can see the list of teh first one when: 1. the first user is logged in and 2. navigates to teh route /group_list
[04:25:00] <BrenBarn> how does your flask program store/manipulate the data it gets from telegram?
[04:25:08] <jazzy> so default arguments aren't accessible outside of function scope, but remain in the outer scope anyway? How does that work?
[04:25:29] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[04:25:30] *** Quits: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur) (Quit: Leaving)
[04:25:31] <BrenBarn> what is this "list of items"?
[04:26:11] *** Joins: MJ (~mjpieters@zopatista.plus.com)
[04:26:18] <dale> ztrawhcse: Type annotations don't incur a runtime penalty in Python beyond parsing and maybe filling out __annotations__, which should all be once at module load, right?
[04:27:21] <mat001> BrenBarn: when user logs in with phone and verification code, then the app calls telegram api to fetch their groups. The groups are stored in a variable in one of the Flask functions. Then I render that list of items to the UI
[04:27:31] <ztrawhcse> well, that's minimal but not nonexistent! __future__ annotations can further reduce the cost, admittedly
[04:27:44] *** Quits: cozmo (~user@233.sub-174-208-162.myvzw.com) (Ping timeout: 272 seconds)
[04:27:50] <mat001> BrenBarn: list of items is a list of groups that logged user has on telegram
[04:28:13] <BrenBarn> I mean it's hard to say without seeing the code but it sounds like "stored in a variable" is the place to look for the problem
[04:28:27] <BrenBarn> i.e., how is that variable cleared/recreated when a new user logs in
[04:28:28] <mat001> BrenBarn: let me show you part fo the code
[04:30:11] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[04:31:14] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:31:31] <mat001> BrenBarn: here: https://bpa.st/7SFQ
[04:31:43] <mat001> It's in Quart, async fork of Flask
[04:31:49] <nedbat> dale: yes
[04:31:51] *** Quits: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[04:32:15] <nedbat> ztrawhcse: the runtime hit of type annotations is microscopic
[04:33:48] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[04:36:34] *** Joins: TomVoid (~void@84.67.132.76)
[04:36:36] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[04:36:50] *** Joins: mat001 (~mat001@c-71-202-208-88.hsd1.ca.comcast.net)
[04:37:11] <mat001> BrenBarn: had internet issues, now back. Did I miss your response?
[04:37:57] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:38:04] <BrenBarn> no, I'm not sure from this what the issue is
[04:38:25] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[04:38:27] <BrenBarn> are you logging in with one user after another like in the same browser?
[04:38:32] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[04:38:35] *** Quits: mattfoxxx (~mattfoxxx@200116b822f4490071cd60d41e462908.dip.versatel-1u1.de) (Quit: WeeChat 3.4)
[04:39:30] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[04:39:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:39:37] *** Joins: dsrt^ (~dsrt@50.233.120.162)
[04:39:46] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[04:40:05] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[04:40:12] <mat001> BrenBarn: nope. I host this app on hosted server. Then my friend at home logs in and deleteds few groups he sees on his list. Then I log in on my machine, delete few of my groups. Then he goes back to the route /group_list WHILE STILL logegd in and sees my list groups
[04:40:17] <fofoni_> I'm trying to understand a little bit of the internals of mypy
[04:40:20] <fofoni_> what is SCC?
[04:40:21] <ztrawhcse> nedbat: I was given to understand that that's more the case with future annotations?
[04:40:25] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[04:40:48] <mat001> I use one telegram dev account that's tied to my phone, but anyone should be able to use their number to log in
[04:41:08] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[04:42:38] <mat001> BrenBarn: u know how  are  cross-user conflits like this usually addressed in flask?
[04:42:48] <mat001> the use of datbase, sessions??
[04:43:08] <BrenBarn> I gather you're using telethon?
[04:43:14] <BrenBarn> looking at its docs I see it has some kind of session file
[04:43:17] <mat001> BrenBarn: yes, exactly, telethon
[04:43:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[04:43:56] <mat001> BrenBarn: yes I use the string session file. I provide a name for it when client is created, then this creates a session file correct
[04:44:03] <jinsun> fofoni_: strongly connected component it seems https://github.com/python/mypy/blob/master/mypy/semanal_main.py#L8
[04:44:16] <BrenBarn> are you creating a separate client on each request?
[04:44:30] <mat001> BrenBarn: no, one client for all requests, so same session file, hmm
[04:44:33] <fofoni_> jinsun, thanks!
[04:44:57] <BrenBarn> well, that may be the problem then
[04:45:19] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:45:27] <mat001> BrenBarn: well, how do you architecturally resolve that? Do I have to have as earate server for this? I mean that's crazy :)
[04:46:16] <BrenBarn> I don't really know anything about telethon or telegram
[04:46:16] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[04:46:38] <nedbat> ztrawhcse: i don't know what happens exactly with future annotations, but whatever it is, it's once at import time, and linear with the number of functions.
[04:46:52] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 250 seconds)
[04:47:14] <BrenBarn> are you saying your flask program only creates one session file altogether?  or do you have some other kind of session management (I mean like a login session, not a telethon session) that maintains state across requests?
[04:48:35] <mat001> BrenBarn: I think teh former. All I have is one Quart (Flask) app with one client. While that app runs, multiple users log in with their telegram account
[04:48:44] <mat001> BrenBarn: This is how client is created: https://bpa.st/IFMQ
[04:49:16] *** Joins: esv (~esv@74.124.178.154)
[04:49:39] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[04:50:23] <mat001> I've never thought about how could you have a new client for each new request...I'm curious. if that's the right way to do it though
[04:50:51] <BrenBarn> I mean you could try it
[04:51:16] <BrenBarn> it's a little unclear to me from the telethon docs when it says "log in" if it means logging in with your dev credentials (which would just be one per app) or logging in as a particular telegram user
[04:51:31] <BrenBarn> but if it's the latter then that would need to be done separately for each user
[04:51:34] <mat001> BrenBarn: can you show teh likn ot that, I'll clarify
[04:52:04] <BrenBarn> I mean like here: https://docs.telethon.dev/en/stable/concepts/sessions.html
[04:53:12] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[04:53:20] <puff> mat001: I'm catching up on your question.  I've barely worked with flask, but did a ton of java web stuff in the past. It sounds like you're using the wrong level of session store.
[04:54:03] <BrenBarn> anyway to answer your earlier question the way this kind of thing is usually handled in web apps is with session handling
[04:54:20] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:54:21] *** Joins: dme86 (~dan@user/dan86)
[04:54:33] <BrenBarn> that is a bit confusing in this case because telethon also has its own notion of a session
[04:54:46] <BrenBarn> but it sounds like maybe you are creating one telethon session for the whole app when there needs to be one per user
[04:54:58] <mat001> BrenBarn: I'm not sure either t the docs mean the dev account log in or the user logging in with phoneumber and verification code. I thnk teh former (dev acc)
[04:55:34] <mat001> puff: thanks for the interest
[04:55:50] <BrenBarn> I don't understand how the example at the top of https://docs.telethon.dev/en/stable/modules/client.html is supposed to work
[04:55:56] <BrenBarn> since I don't see any mention of user credentials
[04:56:16] <BrenBarn> unless it just assumes the user with the API key is the one who gets logged in, which seems like it would be kind of awkward
[04:57:00] *** Quits: ejjfunky (~ejjfunky@125.164.23.55) (Ping timeout: 240 seconds)
[04:57:11] *** Quits: Barones (~Barones@user/Barones) (Remote host closed the connection)
[04:57:13] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:57:18] *** Quits: esv (~esv@74.124.178.154) (Quit: Leaving)
[04:58:06] *** Quits: parv (~quass@user/parv) (Read error: Connection reset by peer)
[04:58:29] <puff> mat001: Sorry, got distracted for a moment. So typically with web apps you use a single cookie with a unique ID value to keep track of the user, and store user state on the server side.  In both php and java that's referred to as session data. I don't know offhand what flask calls it, but it's likely to be named something similar.
[04:58:38] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[04:59:00] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[04:59:49] <puff> mat001: Often server side user session data is stored in a database on the server for long term storage. In java and in PHP it's stored in memory. In Java servlets there is both a per-user session store and an application-wide session store.
[05:00:08] <puff> mat001: If flask has something similar, it sounds like you're using the wrong level of session store.
[05:00:55] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:01:09] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[05:01:11] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 256 seconds)
[05:02:00] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[05:02:11] *** Joins: driib25 (~driib@185.65.135.254)
[05:03:34] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[05:03:36] <mat001> BrenBarn: I just tried that short example. I got prompted for phone number and verification code in the terminal.
[05:03:38] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Read error: Connection reset by peer)
[05:03:46] <mat001> Butthe session explanation is a bit confusing
[05:03:56] <puff> Which session explanation?
[05:04:18] *** Quits: driib2 (~driib@185.65.135.252) (Ping timeout: 256 seconds)
[05:04:18] *** driib25 is now known as driib2
[05:04:35] <BrenBarn> mat001: you got prompted on your phone that was used to get the dev API key?
[05:04:54] <BrenBarn> I see a reference in the docs to having multiple users logged in at once and that is a bit surprising
[05:05:19] <mat001> puff: see the link of BrenBarn ^^ https://docs.telethon.dev/en/stable/modules/client.html . Then search for this: The file name of the session file to be used if a string is given
[05:05:30] <puff> mat001: It's extremely likely that this library is meant for a standalone python program, e.g. a bot or something, rather than a web app that's meant to serve multiple users.
[05:05:30] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[05:05:38] <BrenBarn> I guess another thing to try is try using telethon to log the user out at the end of the request (to bookend where you're using `sign_in`)
[05:05:44] <BrenBarn> yeah, it looks like this is more meant for bots
[05:05:50] <mat001> BrenBarn: I got prompted uin the terminal where I ran the app from, then got verifiaction code in the telegram appp on the phone
[05:06:00] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:06:01] <puff> Yeah, looking at this, what you'd basically need to do is instantiate a client object for each user.
[05:06:07] <BrenBarn> that's not to say you couldn't use it for an app but it may require more finagling
[05:06:22] *** Quits: oriba (~oriba@dynamic-077-191-072-113.77.191.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:06:23] <puff> Or log in for a specific user at the beginning of the request and log out at the end.
[05:06:24] <mat001> puff: And how do I do that?? I have one app running with one client (meaning one dev account on my name)
[05:06:40] <puff> mat001: Can you show your code?
[05:06:58] <puff> mat001: Are you storing the telethon client object in flask, in between requests?
[05:06:59] <mat001> puff: here: https://bpa.st/7SFQ
[05:07:03] <BrenBarn> well, right now in your code you have `sign_in`, so you could do a `log_out` at the end of that
[05:07:18] <BrenBarn> puff: he's just got one client that's created globally, yeah
[05:07:32] <mat001> BrenBarn: true, I could do log out. See in the docs, the likn you posted, it says to use liog out IF YOU MAKE SESSION as None
[05:07:39] <mat001> what is if it's not None?
[05:07:44] <BrenBarn> it's kind of weird to me that `sign_in` doesn't raise some kind of error if a user is already signed in
[05:08:08] *** Joins: hackers (~self@user/hackers)
[05:08:28] *** hackers is now known as remote
[05:08:55] <BrenBarn> I mean it also says `log_out` will delete the session file, so it seems it's still okay to use even if you do have a session
[05:09:37] <mat001> BrenBarn: ooooh that's nice. But what about when two users are using the app but none of them is logged out yet? Like in the collision scenario I described at the beginning
[05:09:42] <puff> Looking at the pastebin, I ssee lots of code using the client variable, but I don't see where client is instantiate.
[05:09:47] *** Quits: blackleitus (~blackleit@189.195.195.100) (Read error: Connection reset by peer)
[05:10:10] <mat001> puff: yeah, client in instantiated here, another snippet: https://bpa.st/IFMQ
[05:10:11] *** Joins: blackleitus (~blackleit@189.195.195.100)
[05:10:45] <puff> mat001: https://pythonbasics.org/flask-sessions/
[05:11:43] <puff> mat001: So basically it has to work one of two ways.  Either TelegramClient can support logging into multiple users or not.  I would assume the answer is not, unless I confirm otherwise.
[05:11:43] <mat001> BrenBarn: When oyu say about error when user is already logged in, do you mean if a single user of the app is logged in, all others should get an error that the session is "busy"?
[05:12:08] <BrenBarn> I don't really mean anything about your app, just about how the telethon library is designed
[05:12:11] <mat001> puff: yeah...I have been looking for this also. Let me know if you see that
[05:12:34] <puff> mat001: Therefore, you need a separate TelegramClient instance for each user.  You would store each user's TelegramClient instance in the user's session store.
[05:12:43] <BrenBarn> like you have one single telethon client object and apparently it calls `sign_in` multiple times and never calls `sign_out`, and that seems to be okay with that library, and that is odd to me
[05:13:05] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[05:13:06] <mat001> puff: as eparate client instance for each user...that means each user needs to create e tepegram api dev account? hmmmm
[05:13:15] <mat001> or would there be another way, Iwonder
[05:13:15] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[05:13:38] *** Quits: nomic (~nomic@185.217.117.193) (Quit: Leaving)
[05:13:48] <mat001> BrenBarn: agree
[05:14:02] <puff> I agree with BrenBarn, if the library was properly designed, it should say something if you try to log in two users via the same client... unless the library is designed to support multiple users on the same TelegramClient at once.  Which would be nice, but I would not count on that unless you check and confirm that it does.
[05:14:20] <puff> mat001: Does telegram only let you login once per API key?
[05:15:04] <mat001> puff: with test account I can log in indefinitely, but with real number I have 5 attempts per day --- that's another issue i see when other users use my app, they get FLOOW WAIT error
[05:15:12] *** Joins: kevr (~kevr@user/kevr)
[05:15:29] <BrenBarn> it seems like when you create the client it auto-logs in as the user who "owns" the API key, and that is also a bit odd
[05:15:31] <mat001> it's expected...malicious bot prevention
[05:15:56] <BrenBarn> like I said I don't really know anything about telegram, but I had a vague impression that logging in and out of telegram was not something users did often
[05:16:01] <mat001> (flood wait error)
[05:16:06] <jamea> friends    pyautogui.keyDown('shift')     pyautogui.press('left')    after press left keyb the Shioft continue pressed?
[05:17:29] <mat001> BrenBarn: I completely agree. I never log out of my phone telegram that I use daily. That's why I was thinking to have my app run once. But then there are 100 users that need to log in and delete old groups. All through my app. !!!
[05:17:50] *** Quits: TomVoid (~void@84.67.132.76) (Quit: Leaving)
[05:18:42] <BrenBarn> well, it sounds like at this point you need to learn more about telethon and how it works
[05:18:51] <BrenBarn> maybe there is some mailing list or forum or something
[05:19:33] <BrenBarn> I do see this: https://stackoverflow.com/questions/62558913/how-can-i-login-multiple-accounts-using-telethon
[05:19:42] <BrenBarn> which again suggests multiple clients is the way to go
[05:19:42] <mat001> BrenBarn: thx for your help. Have been looking...haven't seen a forum or a chant, but will look more.
[05:19:50] <mat001> let me see
[05:19:59] <BrenBarn> but I dunno if you'll get in trouble if you create like 100 clients
[05:21:00] <puff> mat001: This says you need a separate client object for each user https://stackoverflow.com/questions/62558913/how-can-i-login-multiple-accounts-using-telethon
[05:21:14] <puff> BrenBarn: Dammit, slow down :-)
[05:21:36] <mat001> BrenBarn: oooohh, this might be exactly what I need
[05:21:45] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:21:58] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 260 seconds)
[05:22:02] <mat001> puff: haha, you both got teh same article. lol.. thx, this seems very promissing
[05:22:18] *** Joins: binary01 (~binary01@174.141.153.217)
[05:22:24] <mat001> I see they just write a separate line for each client. And a toption for arbitrary number of client... hm
[05:23:05] <BrenBarn> I mean, for your app you wouldn't be manually writing client1 and client2
[05:23:15] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:23:25] <puff> Yeah.  You need to instantiate a new TelegramClient object for each user, store each user's TelegramClient object in the user's session.
[05:23:28] *** Parts: mwsb (~mwsb@user/mwsb) ()
[05:23:31] <BrenBarn> you'd have to have some code in your app that creates a client at the beginning of the request and closes it down at the end (or stores it in a session and closes it when the session expires)
[05:23:31] *** Joins: mugwort (~mugwort@host86-187-230-235.range86-187.btcentralplus.com)
[05:23:37] <mat001> BrenBarn: no, I need to come up with a logis, sme meaningful way to accommodate arbitrary No of clients... hm
[05:23:46] <mugwort> hi im trying to find a signed angle given 2 coordinates
[05:24:07] <mugwort> i currently have m = (y1-y2) / (x1-x2)
[05:24:12] <BrenBarn> not clear whether you'd be able to store the TelegramClient object itself in the session, but you could probably store its "name" (the name of the session file)
[05:24:17] <mugwort> this ranges from -infinity to infinity
[05:24:38] <mugwort> but i need it to range from -180 to 180 degrees (or in radians)
[05:24:50] <BrenBarn> well, you probably want to take the arctan
[05:24:53] <mat001> BrenBarn: yeah, I think name would count. session files can also be stringifid sosort of like a vriable that can be passed around in the code
[05:25:01] *** Joins: hams (~hams@user/hams)
[05:25:20] <mugwort> aye i thought it was arctan but this only repeats every 180 degrees..
[05:25:34] <mugwort> would i just force the result to use the sign of m?
[05:27:15] <puff> I'm reading up on flask sessions but most web pages don't explain how they're implemented.  However, I am beginning to suspect that standard flask sessions just use a browser cookie, i.e. the flash server serializes the session data as a string, base64 encodes it and includes it in the browser cookie value.
[05:27:15] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[05:27:32] *** Joins: TomVoid (~void@84.67.132.76)
[05:27:35] <puff> In which case the TelegramClient cannot be saved across requests but would have to be reinstnatited.
[05:27:38] <puff> Reinstantiated.
[05:28:02] <puff> But you can swap in different implementations of session in Flask, so if there's one that stores user data in memory, that would do the trick.
[05:28:25] <BrenBarn> there's sometimes a function arctan2 that will do that
[05:28:30] <BrenBarn> can't remember if that's in python stdlib
[05:28:33] <puff> Either that or you store the user's telegram credentials in the browser cookie session store and then re-login the user for each request.
[05:28:45] <jinsun> mugwort: https://docs.python.org/3/library/math.html#math.atan2
[05:28:55] <BrenBarn> there you go
[05:28:56] <puff> Yeah, flask's default session store is client side: https://stackoverflow.com/questions/32084646/flask-session-extension-vs-default-session
[05:29:20] <BrenBarn> telethon also has this "session string" thing that lets you store a login token so you could store that in the session
[05:29:24] *** Joins: esv (~esv@74.124.178.154)
[05:29:32] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[05:30:20] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:39] <puff> Ah, neat. Yeah, that would help.
[05:31:47] <mat001> BrenBarn: yeah, that's the session string that I meant earlier. Thx guys hmm, will need to ponder on some implementation...
[05:32:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:32:49] <puff> mat001: StringSession?
[05:32:56] <mat001> BrenBarn: puff thx for this...I feel more hopeful now. I think that should resolve the cross-user issues when multiple users use the app with teh same client
[05:33:13] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[05:33:42] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Client Quit)
[05:33:50] <mat001> puff: yeah...see the first code example here: https://docs.telethon.dev/en/latest/concepts/sessions.html
[05:34:01] <puff> Yeah, sessionstring = client.session.save()
[05:34:14] <puff> You should be able to set sessionstring in the flask session and then reuse sessionstring on the next request.
[05:34:45] <puff> mat001: See the example at the battom of this page: https://docs.telethon.dev/en/latest/concepts/sessions.html
[05:35:06] <BrenBarn> you'll need to read up on flask sessions
[05:35:26] <puff> Or see this https://stackoverflow.com/questions/58890931/is-it-possible-to-create-a-telethon-client-starting-from-auth-key-only
[05:35:53] <mat001> yeah I see
[05:36:01] <mugwort> ah thank you guys! thought atan2 was just for avoiding division by 0 errors
[05:36:09] <puff> Yeah, it's unclear to me from the flask session doc I was reading if you need to setup the flask session.  It seems to be a sort of implicitly declared variable.  https://pythonbasics.org/flask-sessions/
[05:36:35] <puff> In essence, sessionstring can act as sort of an auth token for telegram.
[05:36:36] *** Quits: osxtra (~root@2605:a601:aa30:fe00::83a2:6799) (Ping timeout: 245 seconds)
[05:36:37] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[05:37:06] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[05:37:23] *** Joins: Barones (~Barones@user/Barones)
[05:37:52] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[05:38:00] <puff> Or rather probably the telethon session contains the auth token for repeated requests to telegram, and SessionString is a handy way to serialize the telethon session as a string, save it somewhere (in the flask session variable, which gets stored in the user's browser cookie) and then load it to use in a future request.
[05:38:32] <mat001> puff: yes, I think that's how it's supposed to be used
[05:39:13] <mat001> puff: and then what is meant as a "request"? Does a new user login count as a request? I mean I need new user login to use a new client instance. How would stringsession play a role in this
[05:39:30] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[05:39:30] <mat001> That's what I'll put together next...but since we're chatting about it
[05:39:57] <puff> mat001: I'm not entirely certain what you're asking, but here's how I would do it:
[05:40:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:40:12] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[05:41:00] <puff> mat001: 1) User logs into your flask app, flask app asks the user for telegram credentials.  I'm not sure but I think from your code and what you were saying, telegram requires 2 factor authentication?
[05:42:05] <mat001> no, but the code will ask for phone number, and then verification code user will get from the telegram app
[05:42:24] <puff> mat001: Right, your code calls it confirmatoin code.
[05:42:24] <mat001> then user gets to the list of telegram groups fetched
[05:42:26] *** Joins: hwdyki (~hwdyki@user/hwdyki)
[05:42:32] <mat001> yes, confirmation code
[05:42:37] <puff> mat001: So the flask app instantiates a TelegramClient on the server side, starts the Telegram login process, and displays HTML to the user with a form for the user to enter the confirmation code.
[05:42:50] <mat001> yes
[05:43:05] *** Joins: BlessJah (~BlessJah@user/blessjah)
[05:43:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:43:43] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:44:14] <puff> mat001: The user enters the confirmation code, the flask app then uses the confirmation code to TelegramClient.sign_in()
[05:44:35] <puff> mat001: Okay, at *this* point you have a working TelegramClient object that is signed in as the user.
[05:44:54] <mat001> yes. After that they get rerouted to /group_list where I fetch groups using telethon method to get groups
[05:45:33] <puff> Does the reroute cause another browser request?
[05:45:47] <puff> Or does that all happen server side?
[05:46:15] <puff> mat001: What you do is, after sign_in, you do:  telegramsessionstring = client.session.save()
[05:47:23] <mat001> puff: after signed in...the form that verifies the code reroutes to /group_list...that happens from my app.
[05:47:52] <puff> mat001: And then you do session['telegramsession'] = telegramsessionstring
[05:48:25] <mat001> do I need to create a session dict variable?
[05:49:21] <mat001> I guess yes, to store the telegramsessionstring in
[05:49:45] <puff> mat001: For the flask session?  You have to "from flask import session" and that should do it, I beleive.
[05:49:49] <puff> mat001: And then on future requests from that user, you do:  client = TelegramClient(StringSession(session['telegramsession'), api_id, api_hash)
[05:50:16] <puff> mat001: Note that you need to create TelegramClient at the start of each request.
[05:51:07] *** Parts: akk (~akk@75-161-95-245.albq.qwest.net) (+++)
[05:51:10] *** Joins: osxtra (~root@2605:a601:aa30:fe00::83a2:6799)
[05:51:20] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[05:51:34] <mat001> puff: where 'telegramsession' is a session name specific to each user?
[05:51:58] <puff> Each user gets their own flask session variable.
[05:52:10] *** Quits: kts (~kts@103.73.237.237) (Quit: Konversation terminated!)
[05:52:20] <puff> Each user gets their own flask session variable, which is a dict.
[05:52:30] <puff> And then you store the sessionstring in that flask session dict under the key 'telegramsession'.
[05:52:48] <puff> Since each user gets their own dict, when your code uses session['telegramsession'] it gets the one for that user.
[05:53:09] *** Parts: nrg (~NRG@user/nrg) (WeeChat 3.4)
[05:53:21] <mat001> What do you mean by future requests? Do yuo mean, request to log in, request to go to the list of groups, request to delete selected groups, request to go t o the confirmation page...the requests in my app?
[05:53:58] <puff> Each web request.
[05:54:09] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Remote host closed the connection)
[05:54:24] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[05:54:27] <mat001> Ok, so each request when the yinteract with the app
[05:54:27] *** Quits: mugwort (~mugwort@host86-187-230-235.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[05:54:31] <puff> Yes.
[05:55:04] <puff> mat001: It would look roughly like https://bpa.st/HTJQ
[05:55:12] <mat001> so in this case we'd have my app running once. Then multiple users loged in using own clients and own sessions
[05:55:25] <puff> Yes.
[05:55:37] *** Quits: zuplex (~zuplex@202.51.76.205) (Ping timeout: 240 seconds)
[05:56:33] <puff> Each user has their own TelegramClient object, and you save the Telegram session string in the flask session dict at the end of each web request.
[05:56:59] <mat001> puff: thank you. I will need to dash (appointment). This looks great. One thing though. I'm using Quart, async fork of Flask... I need to look if Quart supports "from flask import session". There probably is an equivalent
[05:57:01] <puff> At the beginning of each web request, you check to see if the user's flask session dict contains a telegram session string, and if yes, you create a new TelegramClient using that telegram session string, so the user doesn't need to do the confirmation code again.
[05:57:08] <puff> Good luck.
[05:57:16] *** Joins: cheater (~Username@user/cheater)
[05:57:16] <puff> There is certianly an equivalent.
[05:57:22] <puff> User session management is a standard thing for web app frameworks.
[05:57:48] <mat001> Would I need to provide log out functionality in this case?
[05:57:57] <mat001> users just close the browser
[05:57:59] <mat001> ?
[05:58:05] <puff> mat001: Yes, that's a good idea.
[05:58:32] <mat001> puff: would deleting teh session work?
[05:58:36] <mat001> I can look into it
[05:58:48] <puff> mat001: I dont' know but I suspect that the flask session browser cookie will by default persist across browser sessions.
[05:58:52] <puff> Yeah, you should look it up.
[05:59:18] <mat001> puff: thx man (not sure about our gender :) ). Appreciate it
[05:59:20] <puff> mat001: You probably also want to plan, in the future, to save the telegram session string in a database.
[05:59:29] <puff> mat001: Yeha, I'm a guuy.
[05:59:32] <puff> Guy, yeesh.
[05:59:34] <mat001> lol, ok
[06:00:21] <puff> mat001: I.e. the user does the confirmation code on the first setup, then you save the session string in a database so the next time, all they have to do is log into your flask app, your flask app pulls the telegram session string out of the database and uses it to create the client.
[06:00:26] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:01:27] <mat001> puff: +1
[06:01:32] <puff> mat001: That is, assuming that the telegram people are cool with that.... it's very likely that they are, chat clients stay logged in for a very long time usually.
[06:01:42] <mat001> yeah, should be fine
[06:02:18] <puff> If the telegram people were really on top of their game, they would have an explicit auth token that you could generate using the first confirmation, and then you'd save that auth code, which would be specific to both your API key and that user.
[06:02:35] <puff> But instead, we're sort of faking it by using that telegram session string.
[06:02:59] <puff> But it's worth looking into the telegram API and seeing if they have support for doing it the proper way.
[06:04:06] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[06:04:10] *** Quits: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b) (Read error: Connection reset by peer)
[06:04:21] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:04:48] *** Joins: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b)
[06:04:50] *** Quits: TomVoid (~void@84.67.132.76) (Quit: Leaving)
[06:04:55] <puff> I'm kind of curious about flask, been meaning to look into it.
[06:05:14] <puff> Mainly I'm wondering how much support it has for simple CRUD apps and the like.
[06:05:34] *** Quits: zumba_addict25 (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[06:05:47] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[06:05:53] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:06:10] <puff> A lot of frameworks I've seen in java and php are quite tedious...
[06:06:25] *** Joins: TomVoid (~void@84.67.132.76)
[06:07:10] *** Joins: justAstache (~justache@user/justache)
[06:07:30] *** Joins: zuplex (~zuplex@202.51.76.81)
[06:07:44] *** Quits: zuplex (~zuplex@202.51.76.81) (Remote host closed the connection)
[06:08:08] *** Joins: zuplex (~zuplex@202.51.76.81)
[06:08:17] *** Joins: CrypticSquared (~CrypticSq@user/crypticsquared)
[06:09:11] *** Quits: truth2 (~truth@user/truth) (Ping timeout: 250 seconds)
[06:10:06] *** Joins: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs)
[06:10:07] *** Joins: aknot (~aknot@2603:900a:1503:17bb:f895:7409:92a0:fb4)
[06:11:07] *** Joins: llh (~UPP@user/llh)
[06:11:08] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:11:08] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[06:11:34] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[06:11:38] *** Joins: junebug (~junebug@2600:1700:3db0:2540:9da7:df1f:2ac:6bb2)
[06:13:52] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[06:13:57] *** Quits: Barones (~Barones@user/Barones) (Ping timeout: 240 seconds)
[06:14:04] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[06:14:14] <jim> hi. in the first part of the django tutorial, I encountered: from . import foo
[06:14:28] <jim> what's this mean, and what does the . refer to?
[06:16:34] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[06:17:59] <junebug> jim, current directory
[06:19:00] *** Quits: zuplex (~zuplex@202.51.76.81) (Ping timeout: 240 seconds)
[06:19:01] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:19:23] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:19:26] <jinsun_> jim: it is relative import, https://docs.python.org/3/reference/import.html#package-relative-imports
[06:19:50] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[06:20:25] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.29-122.dynamic.3bb.co.th) (Remote host closed the connection)
[06:20:32] <jinsun_> https://www.python.org/dev/peps/pep-0328/ for more details
[06:21:04] *** Joins: p-i- (~Ohmu@2403:6200:8978:3172:74c7:3101:7ef7:bc18)
[06:21:05] *** Joins: truth2 (~truth@user/truth)
[06:21:14] <jim> so, if the cur. dir is ancient_variables_from_MIT and I'm in that dir (which has an empty __init__.py, making the cur. dir a package). files in this dir can refer to the packages containing that file using a .
[06:22:09] <jim> hmm. not sure that makes sense
[06:22:45] <jim> so, if the cur. dir is ancient_variables_from_MIT and I'm in that dir (which has an empty __init__.py, making the cur. dir a package). files in this dir can refer to the package dir containing that file using a .
[06:22:51] <jim> that's better
[06:23:38] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[06:25:01] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) ()
[06:25:19] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:30:07] <audiomouse> do i have to do something beyond time.sleep(5) to wait for selenium to load a new page?
[06:30:21] <audiomouse> selenium cant find elements on the newly loaded page and idk why
[06:30:49] *** Quits: jero98772 (~jero98772@2800:484:1d80:d8ce:3490:26c5:1782:da8c) (Remote host closed the connection)
[06:31:01] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:31:27] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:33:25] *** Joins: kts (~kts@103.73.237.68)
[06:33:56] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:35:11] *** Quits: knkay (~knkay@213.190.30.120) (Ping timeout: 250 seconds)
[06:35:47] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[06:38:06] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[06:38:39] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[06:39:00] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[06:39:10] *** Quits: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b) (Read error: Connection reset by peer)
[06:39:24] *** Quits: aknot (~aknot@2603:900a:1503:17bb:f895:7409:92a0:fb4) (Ping timeout: 240 seconds)
[06:39:48] *** Joins: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b)
[06:40:07] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[06:40:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:42:17] *** Joins: kevr` (~kevr@user/kevr)
[06:42:55] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[06:43:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[06:44:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:46:57] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:47:00] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 240 seconds)
[06:48:18] *** Joins: mugwort (~mugwort@host86-187-230-115.range86-187.btcentralplus.com)
[06:48:38] *** Joins: Vonter (~Vonter@user/vonter)
[06:49:08] *** Joins: Lucanis (~Lucanis@user/lucanis)
[06:50:36] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Read error: Connection reset by peer)
[06:51:13] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[06:51:27] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[07:00:49] *** Joins: knkay (~knkay@213.190.30.120)
[07:03:48] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[07:04:13] *** Joins: adeliktas5 (~adeliktas@i59F5279A.versanet.de)
[07:04:58] *** Joins: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com)
[07:05:24] *** Quits: adeliktas (~adeliktas@i59F5265C.versanet.de) (Ping timeout: 240 seconds)
[07:05:24] *** adeliktas5 is now known as adeliktas
[07:06:35] <mehwork> what is an "integration test" when it comes to stricly backend code? Does it mean unit testing a function that calls a function OR does it mean doing a  api request and testing everything that api call does at once?
[07:06:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[07:07:25] *** Joins: Azem (~haise01@user/haise01)
[07:08:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:08:34] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Read error: Connection reset by peer)
[07:10:53] *** Quits: cosmo (~user@65.78.142.57) (Remote host closed the connection)
[07:11:08] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 272 seconds)
[07:13:49] *** Joins: circd (~circd@142.167.143.188)
[07:14:55] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[07:17:24] *** Quits: circd (~circd@142.167.143.188) (Remote host closed the connection)
[07:17:44] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:17:48] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[07:20:01] *** Quits: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net) (Ping timeout: 256 seconds)
[07:21:08] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[07:21:17] *** Quits: vakera_pingveno (~dan@2600:1700:21f9:b150::30) (Ping timeout: 240 seconds)
[07:21:21] <puff> mehwork: Generally speaking an integration test is testing when you put things together.  How many things is ambiguous.
[07:21:51] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[07:21:54] <puff> mehwork: You have unit tests, integration tests, end to end tests.
[07:22:01] *** Joins: jazzy2 (~jaziz@user/jaziz)
[07:22:09] *** Joins: bluedust (~bluedust@103.165.167.221)
[07:22:12] <puff> mehwork: Unit tests generally attempt to isolate the code being tested as much as possible.
[07:22:33] <puff> mehwork: End to end tests are trying to test the entire system, or at least one path through the entire system.
[07:23:14] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da)
[07:23:29] *** Joins: lkthomas__ (~lkthomas@host81-149-79-114.in-addr.btopenworld.com)
[07:23:36] <puff> mehwork: Integration tests are generally somewhere in the middle.  Classically you see these in contexts like large projects where different devs are working on different pieces of the puzzle.  You need to plug the pieces together and test that they work together they way you expected them to.
[07:24:03] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:24:18] *** Quits: TomVoid (~void@84.67.132.76) (Quit: Leaving)
[07:24:29] <puff> mehwork: https://martinfowler.com/bliki/IntegrationTest.html
[07:25:28] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 250 seconds)
[07:25:48] *** Quits: lkthomas_ (~lkthomas@host81-149-79-114.in-addr.btopenworld.com) (Ping timeout: 240 seconds)
[07:25:52] *** Quits: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[07:26:26] <puff> mehwork:  And https://martinfowler.com/bliki/UnitTest.html
[07:26:37] *** Quits: Sargento (uid523534@wikipedia/Sargento-de-Hierro) (Quit: Connection closed for inactivity)
[07:27:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:27:43] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:54c5:a541:eeee:60e9) (Ping timeout: 256 seconds)
[07:28:54] *** Joins: tWqaq (~tWqaq@240e:389:5d1c:ff00:54c8:40ea:f2d7:4c83)
[07:29:22] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[07:30:03] *** Quits: kadobanana (~mud@user/kadoban) (Quit: quit)
[07:30:12] *** Quits: GreenLlama (~quassel@80-219-124-12.dclient.hispeed.ch) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[07:31:26] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[07:31:30] *** Joins: panella32 (~panella32@138.199.31.193)
[07:31:53] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[07:32:28] *** Joins: GreenLlama (~quassel@80-219-124-12.dclient.hispeed.ch)
[07:33:00] *** Joins: saroy (~Sandipan@43.252.250.104)
[07:33:43] <drbeco> guys... If I delete the folder of a virtual env, rm -rf oldenv , and it is still activate, how do I deactivate it? thanks
[07:33:56] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 272 seconds)
[07:34:11] *** Quits: mugwort (~mugwort@host86-187-230-115.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[07:34:12] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:34:45] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[07:35:07] *** Joins: mud (~mud@user/kadoban)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:01] <mehwork> puff: martin fowler's link is why i asked because it was very confusing still. Is it done with a unit test framework or something else?
[07:37:21] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[07:37:46] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[07:37:48] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:4c08:71:8cb3:77da) (Ping timeout: 240 seconds)
[07:38:36] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[07:39:05] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[07:40:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:41:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:41:48] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 240 seconds)
[07:41:49] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:42:12] *** Joins: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs)
[07:44:09] *** Quits: sreve (~quassel@p54a706a2.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:44:12] *** Joins: sreve_ (~quassel@p549d70f4.dip0.t-ipconnect.de)
[07:44:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:44:55] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[07:45:14] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 256 seconds)
[07:45:42] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:45:51] *** Quits: reticuli (~reticuli@user/reticuli) (Ping timeout: 256 seconds)
[07:46:01] *** Joins: _blackeitus (~blackleit@189.195.195.100)
[07:46:38] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[07:46:50] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:47:08] *** Henry_The_Longsh is now known as HenryTheLongshot
[07:47:47] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[07:48:26] *** Quits: blackleitus (~blackleit@189.195.195.100) (Ping timeout: 250 seconds)
[07:50:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:51:07] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:51:11] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[07:53:43] *** Quits: bluedust (~bluedust@103.165.167.221) (Remote host closed the connection)
[07:54:24] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[07:54:53] <mehwork> even fowler seems confused by what a unit test is if you read that
[07:55:03] <mehwork> er confused about what an integration test is i meant
[07:55:18] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[07:56:09] *** Joins: icy_hot (~icy_hot@oki-180-131-210-234.jptransit.net)
[07:56:38] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.4)
[07:56:42] *** Joins: a210222 (~alex@218-215-213-197.sta.wbroadband.net.au)
[07:56:57] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:57:12] *** Joins: bluedust (~bluedust@103.165.167.221)
[07:59:24] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[08:00:21] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[08:00:26] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[08:01:27] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[08:02:42] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[08:03:58] <AhmedAmerican> if x is a `list` and then i converted x to a `generator` so once i iterate over x, Is the memory size got wiped for `x`
[08:04:56] *** Quits: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net) (Quit: leaving)
[08:08:32] *** Quits: bluedust (~bluedust@103.165.167.221) (Remote host closed the connection)
[08:08:44] <Repiphany> How are you converting the list to a generator
[08:09:15] *** Quits: icy_hot (~icy_hot@oki-180-131-210-234.jptransit.net) (Quit: WeeChat 3.4)
[08:09:22] <Repiphany> The list won't be deallocated if there are still references to it
[08:09:29] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[08:10:12] *** Joins: kingofcsu (~kingofcsu@114.249.132.226)
[08:10:42] <AhmedAmerican> `x = [item...]` and then `x = (i for i in x)` so right now it's a generator
[08:11:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[08:11:36] *** Quits: kts (~kts@103.73.237.68) (Quit: Konversation terminated!)
[08:11:44] *** Quits: h_ (rootvegeta@fsf/member/hays) (Remote host closed the connection)
[08:12:45] *** Quits: panella32 (~panella32@138.199.31.193) (Quit: Textual IRC Client: www.textualapp.com)
[08:13:29] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[08:14:19] <Repiphany> It's not immediately obvious why you'd need to start with a list and then make a generator out of it if you're worried about memory
[08:15:06] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 272 seconds)
[08:16:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:16:37] *** Joins: ejjfunky (~ejjfunky@125.164.19.196)
[08:16:55] <Peng> AhmedAmerican: What's your goal?
[08:20:23] *** Joins: Barones (~Barones@user/Barones)
[08:21:52] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[08:21:58] <AhmedAmerican> Repiphany: you meant to use iter(list) from beginning
[08:22:27] <AhmedAmerican> Peng: just to increase performance by using generator in right way
[08:22:29] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:22:34] *** Joins: panella32 (~panella32@138.199.31.193)
[08:22:50] <Peng> What aspect of performance?
[08:23:40] <AhmedAmerican> Not storing big list within memory ?
[08:24:20] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:24:21] <Peng> Can you avoid creating a big list in the first place?
[08:25:49] *** Quits: bloody (~bloody@user/bloody) (Quit: okluvyabubye)
[08:25:52] <Peng> If you have a big list and want to destructively iterate over it, in reverse order, consider using a while loop and x.pop()
[08:26:19] <Peng> If you want to destructively iterate over it in the right order, consider converting it to a collections.deque and using x.popleft()
[08:27:36] *** Quits: purple_cthulhu (~rax@2.186.4.33) (Quit: Leaving.)
[08:28:58] *** Joins: toastloop (~toastloop@user/toastloop)
[08:31:06] *** Joins: BlueFrog (~BlueFrog@user/BlueFrog)
[08:35:22] *** Quits: BlueFrog (~BlueFrog@user/BlueFrog) (Client Quit)
[08:35:58] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[08:40:11] *** Quits: Swayze (~gryster@user/swayze) (Ping timeout: 252 seconds)
[08:41:05] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[08:41:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:41:43] *** Joins: kts (~kts@103.73.237.68)
[08:41:52] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[08:43:55] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[08:44:06] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[08:45:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:45:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[08:46:44] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[08:47:03] *** Joins: bluedust (~bluedust@103.165.167.221)
[08:47:06] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[08:48:09] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[08:49:08] *** Quits: bluedust (~bluedust@103.165.167.221) (Remote host closed the connection)
[08:49:53] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 256 seconds)
[08:50:50] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:51:14] *** Joins: analoq (~yashi@user/dies)
[08:52:06] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[08:52:36] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[08:53:25] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[08:53:42] *** Joins: pankid (~quassel@pankid.club)
[08:53:51] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:57:43] *** Quits: panella32 (~panella32@138.199.31.193) (Quit: Textual IRC Client: www.textualapp.com)
[08:57:44] *** Quits: tijko (~tijko@static-71-184-137-31.bstnma.ftas.verizon.net) (Quit: leaving)
[08:57:58] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:59:26] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 272 seconds)
[08:59:56] *** Quits: Barones (~Barones@user/Barones) (Ping timeout: 250 seconds)
[09:02:56] *** Joins: upsala (~zcb@185.209.196.167)
[09:03:59] *** Joins: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net)
[09:05:46] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[09:06:02] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:dfb2:bef1:214a:e046)
[09:06:11] *** Joins: pepper (~pepper@user/pepper)
[09:07:38] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:08:41] *** Joins: sbrown (~sbrown@66.44.16.44)
[09:10:18] *** Quits: kingofcsu (~kingofcsu@114.249.132.226) (Quit: kingofcsu)
[09:12:13] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[09:12:45] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[09:14:13] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:16:09] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[09:16:31] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Read error: Connection reset by peer)
[09:17:40] *** Joins: satta_satta (~AdminUser@55d41988.access.ecotel.net)
[09:19:15] *** Joins: mexen (uid495612@user/mexen)
[09:21:51] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[09:23:54] <mehwork> puff: for example, can you explain the difference between an "integration" test and a "functional" test?
[09:25:21] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:54c5:a541:eeee:60e9)
[09:26:12] *** Quits: esv (~esv@74.124.178.154) (Ping timeout: 240 seconds)
[09:26:57] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[09:28:39] *** Quits: ExpiredKebab (~sgreadly@47-72-197-36.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[09:28:58] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[09:29:11] *** Joins: Swayze (~gryster@81.28.5.93)
[09:29:21] *** Quits: nickel84481 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.3)
[09:31:06] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Lost terminal)
[09:31:19] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[09:31:20] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[09:31:40] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:32:34] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[09:33:03] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:35:02] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[09:38:21] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[09:39:40] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:39:46] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[09:40:22] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:41:25] *** Quits: mitchxv2 (~mitch@24.31.27.81) (Read error: No route to host)
[09:42:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:42:03] *** Quits: junebug (~junebug@2600:1700:3db0:2540:9da7:df1f:2ac:6bb2) (Remote host closed the connection)
[09:42:16] *** Quits: rajkosto (~rajkosto@93-86-159-18.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[09:42:22] *** Joins: junebug (~junebug@2600:1700:3db0:2540:e6d0:8f86:be89:6d1)
[09:45:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[09:46:13] *** Joins: pepper (~pepper@user/pepper)
[09:46:13] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Read error: Connection reset by peer)
[09:47:02] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:47:29] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:b07c:b562:c9fc:b27a) (Read error: Connection reset by peer)
[09:49:45] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[09:51:10] *** Joins: ericho (~erich@2806:103e:1f:2f22:d834:3578:da87:55fe)
[09:53:05] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2022/02/20 UTC) 64 Bit)
[09:53:25] *** Joins: Tempesta (~Tempesta@user/tempesta)
[09:53:33] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:54:36] *** Quits: AlanMD (~AlanMD@86.124.30.89) (Remote host closed the connection)
[09:55:00] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 252 seconds)
[09:55:09] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[09:55:25] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[09:55:41] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:55:56] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[09:56:04] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[10:02:19] *** Joins: arinov (~arinov@77.67.139.142)
[10:02:39] *** Quits: e-snail (~pete@user/e-snail) (Ping timeout: 256 seconds)
[10:03:04] *** Quits: funhouse (~funhouse@user/funhouse) (Quit: Client closed)
[10:04:38] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:07:10] *** Joins: KombuchaKip (~kip@192.252.230.5)
[10:07:39] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[10:09:10] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:09:20] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-70-13.poda.cz)
[10:09:35] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[10:10:13] *** subopt is now known as _subopt
[10:10:14] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[10:10:36] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 240 seconds)
[10:10:42] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-70-13.poda.cz) (Client Quit)
[10:10:49] *** Joins: manti7 (~manti7@176.10.104.94)
[10:11:09] *** Quits: Wulf (~Wulf@user/wulf) (Remote host closed the connection)
[10:12:34] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[10:12:44] *** Quits: satta_satta (~AdminUser@55d41988.access.ecotel.net) (Read error: No route to host)
[10:12:48] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[10:13:02] *** Joins: jpodivin (~jpodivin@cgnat44-pool3-70-13.poda.cz)
[10:13:42] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[10:16:03] *** Joins: dme86 (~dan@user/dan86)
[10:16:47] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:16:55] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[10:20:19] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[10:21:13] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:21:37] *** Joins: OP-0 (~pca290122@94.134.227.107)
[10:21:38] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:22:20] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[10:22:54] *** Joins: kingofcsu (~kingofcsu@114.249.132.226)
[10:23:15] *** Joins: carl-- (~carl-@185.103.188.130)
[10:23:23] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:23:49] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Read error: Connection reset by peer)
[10:23:51] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:25:15] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:25:36] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[10:25:49] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:26:12] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[10:27:10] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[10:27:24] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 240 seconds)
[10:28:38] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:28:52] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[10:30:31] *** Joins: white2 (~mahengrui@user/mahengrui1)
[10:34:21] *** Joins: pepper (~pepper@user/pepper)
[10:34:23] *** Quits: creedofnecessity (~creedofne@mobile-107-77-199-124.mobile.att.net) (Ping timeout: 256 seconds)
[10:35:31] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[10:39:54] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:40:22] *** gentooclimax is now known as climax
[10:42:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:45:16] *** Joins: p-i-_ (~Ohmu@183.89.29.122)
[10:45:48] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:45:54] *** Quits: ericho (~erich@2806:103e:1f:2f22:d834:3578:da87:55fe) (Remote host closed the connection)
[10:47:16] *** Joins: NiD27 (~nid27@49.205.150.78)
[10:47:24] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[10:47:58] *** climax is now known as gentooclimax
[10:48:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:3172:74c7:3101:7ef7:bc18) (Ping timeout: 240 seconds)
[10:48:18] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:48:19] *** Joins: ericho (~erich@2806:103e:1f:2f22:d834:3578:da87:55fe)
[10:55:30] *** Joins: Payam25 (~Payam@138.106.57.132)
[10:58:19] *** Joins: domicron (~domicron@gateway/tor-sasl/domicron)
[10:58:32] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:59:09] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[11:00:18] *** Joins: kuter (~kuter@public-gprs526002.centertel.pl)
[11:00:49] *** Joins: califax (~califax@user/califx)
[11:00:51] *** Joins: tim__ (~tmart@47-220-163-218.gtwncmkt04.res.dyn.suddenlink.net)
[11:01:09] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[11:03:34] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:04:20] *** Joins: gusto (~Augustus@109.255.100.54)
[11:04:59] *** Quits: tmart (~tmart@47-220-163-218.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[11:05:00] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:05:40] *** Joins: tmart (~tmart@47-220-163-218.gtwncmkt04.res.dyn.suddenlink.net)
[11:06:03] *** Quits: kingofcsu (~kingofcsu@114.249.132.226) (Quit: kingofcsu)
[11:06:15] *** Joins: kingofcsu (~kingofcsu@114.249.132.226)
[11:06:24] *** Quits: tim__ (~tmart@47-220-163-218.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[11:08:22] *** Quits: sbrown (~sbrown@66.44.16.44) (Quit: Leaving…)
[11:09:48] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:09:52] *** Joins: Wulf (~Wulf@user/wulf)
[11:10:39] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:10:46] *** Joins: kosh (~kosh@user/kosh)
[11:12:01] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:12:07] *** Joins: dvx (~dvx@5.181.92.64)
[11:13:24] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 240 seconds)
[11:13:52] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[11:14:15] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[11:14:23] *** Joins: thiras (~thiras@user/thiras)
[11:16:14] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 272 seconds)
[11:16:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:17:43] *** Joins: Syzygy__ (~Syzygy@2001:871:265:1cdc:6de7:2cf3:5788:567b)
[11:17:45] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:19:11] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[11:19:12] *** Joins: lowfi (~lowfi@user/lowfi)
[11:19:41] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[11:19:44] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[11:19:46] *** Joins: rendar (~rendar@user/rendar)
[11:20:51] *** Joins: tobybl_ (~tobybl@214.242.200.146.dyn.plus.net)
[11:21:56] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[11:22:06] *** Joins: palasso (~palasso@user/palasso)
[11:22:33] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:22:42] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[11:24:02] *** Quits: jab416171 (~jab416171@c-174-52-58-23.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[11:24:15] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Ping timeout: 256 seconds)
[11:24:52] *** Joins: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de)
[11:25:08] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.123)
[11:26:05] *** Joins: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp)
[11:26:24] *** Quits: junebug (~junebug@2600:1700:3db0:2540:e6d0:8f86:be89:6d1) (Quit: Leaving)
[11:28:28] *** Joins: c4017_ (~c4017@2604:3d08:747f:7c90:55aa:d9ba:2b59:8544)
[11:29:00] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:54c5:a541:eeee:60e9) (Ping timeout: 250 seconds)
[11:29:01] *** Quits: oz4ga (~tim@hator.sunsite.lv) (Read error: Connection reset by peer)
[11:29:02] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (Killed (NickServ (GHOST command used by thekingofbandit1!thekingofb@thunix.net)))
[11:29:06] *** Joins: ou5x (~tim@hator.sunsite.lv)
[11:29:18] *** Joins: tc_ (~tc@103-140-203-11.vic.as139284.net.au)
[11:29:39] *** Joins: Sidiq (~Sidiq@36.72.21.216)
[11:29:40] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[11:29:40] *** Joins: jab416171 (~jab416171@c-174-52-58-23.hsd1.ut.comcast.net)
[11:30:25] *** Joins: zln (~zln@c83-249-48-11.bredband.tele2.se)
[11:30:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:30:55] *** Quits: Helithumper (~Helithump@c-76-25-170-226.hsd1.co.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:31:17] *** Joins: Helithumper (~Helithump@c-76-25-170-226.hsd1.co.comcast.net)
[11:32:11] *** Quits: c4017 (~c4017@S0106c0943583f893.vf.shawcable.net) (Ping timeout: 256 seconds)
[11:32:11] *** Quits: trycatch (~tc@user/trycatch) (Ping timeout: 256 seconds)
[11:32:21] *** Joins: chele (~chele@user/chele)
[11:32:37] *** Joins: Klinda (~superleag@user/klinda)
[11:33:12] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[11:33:39] *** Joins: amo (~amogorkon@port-92-196-27-200.dynamic.as20676.net)
[11:34:44] *** Quits: arinov (~arinov@77.67.139.142) (Ping timeout: 256 seconds)
[11:34:54] *** Joins: __slate__ (~slate@2a01:4f8:c0c:f0a9::1)
[11:34:56] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:3cb7:2fb3:1d93:9395)
[11:35:35] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Ping timeout: 256 seconds)
[11:35:48] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[11:36:09] *** Quits: amogorkon (~amogorkon@port-92-196-27-200.dynamic.as20676.net) (Ping timeout: 256 seconds)
[11:36:09] *** Quits: _slate_ (~slate@159.69.26.92) (Ping timeout: 256 seconds)
[11:37:17] *** Quits: sawk (~quassel@151.81.119.74) (Ping timeout: 256 seconds)
[11:37:29] *** Joins: sawk (~quassel@151.81.119.74)
[11:37:32] *** Joins: mrwick (~mrwick@user/mrwick)
[11:38:26] *** Joins: arinov (~arinov@78.162.46.214)
[11:38:38] *** Joins: raym (~raym@user/raym)
[11:38:42] *** Joins: pycode (~pycode3@2001:b07:5d28:551:5647:37e6:5350:44e8)
[11:38:56] *** Joins: dme86 (~dan@user/dan86)
[11:39:33] *** Quits: jab416171 (~jab416171@c-174-52-58-23.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[11:39:50] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:40:08] *** Quits: Payam25 (~Payam@138.106.57.132) (Quit: Client closed)
[11:42:16] *** Joins: djapo (~archangel@user/djapo)
[11:42:28] *** Joins: arinov_ (~arinov@77.67.139.142)
[11:43:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:44:56] *** Quits: arinov (~arinov@78.162.46.214) (Ping timeout: 256 seconds)
[11:46:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:47:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 272 seconds)
[11:49:14] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[11:49:51] *** Joins: twb (~twb@2403-5804-c6--cfeb-44f7-7895-9800.ip6.aussiebb.net)
[11:50:58] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[11:52:33] *** Joins: jayray (~jayray@user/jayray)
[11:52:54] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[11:53:21] *** Quits: dbristow_ (~dbristow@user/dbristow) (Read error: Connection reset by peer)
[11:53:34] <twb> So my background with concurrency in ML, bash, C89, and a little erlang is I never REALLY grokked it, it tended to break, and I gave up and stayed single-threaded.  I still can't get my head around asyncio or twisted AT ALL.  If I need concurrency for HTTP/3 or FUSE3, is https://github.com/python-trio/trio  "zomg yes", "lol just no" or somewhere in between?
[11:54:14] *** Quits: ano (~ano@user/ano) (Quit: ano)
[11:54:59] *** Joins: tm007 (uid287041@id-287041.uxbridge.irccloud.com)
[11:55:26] *** Joins: ano (~ano@user/ano)
[11:55:57] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[11:55:58] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[11:56:16] *** Joins: dbristow (~dbristow@user/dbristow)
[11:57:22] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[11:59:45] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[12:00:14] *** Joins: parv (~quass@user/parv)
[12:03:38] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[12:03:51] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:04:05] *** Joins: shad (~shad@user/shad)
[12:04:37] *** Quits: shad (~shad@user/shad) (Client Quit)
[12:05:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:06:28] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.123) (Ping timeout: 256 seconds)
[12:07:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:09:35] *** Joins: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr)
[12:11:17] *** Joins: vladoski (~vladoski@2001:b07:add:d406:87bc:7ac9:abdf:a38f)
[12:11:22] *** Joins: sixie6e (~sixie6e@2600:1000:b06b:d422:1da9:f8de:d2b5:3823)
[12:12:48] *** Quits: txtsd (~txtsd@user/txtsd) (Quit: WeeChat 3.4)
[12:14:50] *** Joins: stardiviner (~stardivin@39.170.213.70)
[12:15:24] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[12:15:46] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 272 seconds)
[12:15:47] <bookworm> twb: depends on your workload
[12:15:48] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[12:17:35] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[12:18:57] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[12:19:27] *** Joins: toastloop (~toastloop@user/toastloop)
[12:20:12] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[12:20:12] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 272 seconds)
[12:20:30] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[12:20:48] *** Joins: de-facto (~de-facto@user/de-facto)
[12:21:00] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[12:21:06] *** Joins: dme86_ (~dan@user/dan86)
[12:21:44] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[12:22:06] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 272 seconds)
[12:23:28] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Remote host closed the connection)
[12:23:28] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[12:23:36] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[12:23:59] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[12:24:00] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 272 seconds)
[12:24:53] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[12:25:24] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:25:30] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Client Quit)
[12:25:57] *** Quits: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[12:25:59] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:26:05] *** Joins: slav0nic (slav0nic@python.su)
[12:26:10] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[12:26:41] *** Joins: mrwick (~mrwick@user/mrwick)
[12:27:08] *** Quits: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b) (Read error: Connection reset by peer)
[12:27:26] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) (Ping timeout: 256 seconds)
[12:27:46] *** Joins: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b)
[12:28:12] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[12:28:17] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[12:28:27] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 272 seconds)
[12:28:41] *** Quits: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b) (Read error: Connection reset by peer)
[12:28:43] *** Joins: wolfshappen (~waff@irc.furworks.de)
[12:28:51] *** Quits: upsala (~zcb@185.209.196.167) (Ping timeout: 256 seconds)
[12:29:00] *** Joins: zazoon (~dev@213.133.91.246)
[12:29:12] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[12:29:18] *** Joins: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b)
[12:29:45] *** Joins: simplicius (~simplicio@2a02-a45b-3dc8-1-1d3a-6766-2ae7-f393.fixed6.kpn.net)
[12:30:28] *** Joins: upsala (~zcb@p200300d5072b35007e27f062af649e7a.dip0.t-ipconnect.de)
[12:30:56] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Client Quit)
[12:30:58] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[12:31:10] <zazoon> instead of writing var1 = regex.group(1) var2 = regex.group(2) is it possible to make it in one line?
[12:31:16] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:31:52] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[12:33:13] <twb> zazoon: var1, var2 = match.groups()
[12:33:20] *** Joins: evanextreme (~evan@2604:4080:1000:8150:1cc2:43f9:3edb:f1c0)
[12:33:22] <twb> zazoon: but you must have the exact arity
[12:33:38] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:34:53] <bookworm> friendly reminder that not everything needs to be on a single line
[12:35:10] *** Quits: a210222 (~alex@218-215-213-197.sta.wbroadband.net.au) (Quit: Leaving.)
[12:35:18] <bookworm> it's perfectly fine to do the assignments in 2 lines there
[12:35:20] <twb> oh you can also use names instead of numbers
[12:36:15] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[12:36:36] *** Quits: kingofcsu (~kingofcsu@114.249.132.226) (Read error: Connection reset by peer)
[12:36:40] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[12:36:44] *** Joins: kingofcsu (~kingofcsu@114.249.132.226)
[12:36:51] <twb> re.fullmatch(r'https://(?P<domain>[a-z0-9.]+)/(?P<path>.*)', url)
[12:37:02] *** Joins: shad (~shad@user/shad)
[12:37:05] <twb> (But use urllib if you want to actually parse URLs)
[12:37:07] *** Joins: c4017__ (~c4017@S0106c0943583f893.vf.shawcable.net)
[12:37:17] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[12:37:30] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[12:37:38] *** Joins: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de)
[12:37:38] *** Quits: menace (~someone@ppp-93-104-186-58.dynamic.mnet-online.de) (Changing host)
[12:37:38] *** Joins: menace (~someone@user/menace)
[12:37:48] *** menace is now known as Deknos
[12:38:12] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[12:38:34] <tuskkk____> I have an API call that is suppose to filter data based on the parameters, one of the parameter is an array, can be a long list as well (say 20 elements), is it still ok to use GET and receive it as query params, or are there any better ideas out there?
[12:38:43] <zazoon> thank you
[12:38:49] *** Quits: evanextreme (~evan@2604:4080:1000:8150:1cc2:43f9:3edb:f1c0) (Ping timeout: 256 seconds)
[12:38:49] <tuskkk____> Thinking of using POST, have these params in the body, but it kind of is against the RESTFul paradigm right?
[12:39:05] *** Quits: onichomp666 (~onichomp@2806:264:4408:1f2:68f7:6c28:e1be:d87b) (Read error: Connection reset by peer)
[12:39:08] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[12:39:13] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[12:39:52] <twb> tuskkk____: there's actually a brand new thing in between GET and POST for that case
[12:39:57] *** Quits: c4017_ (~c4017@2604:3d08:747f:7c90:55aa:d9ba:2b59:8544) (Ping timeout: 240 seconds)
[12:40:04] <twb> i think it's still a draft RFC so you probably can't rely on it yet
[12:40:16] <tuskkk____> yeah, read about that some time ago
[12:41:06] *** Quits: dme86_ (~dan@user/dan86) (Ping timeout: 272 seconds)
[12:41:10] *** dcaro_away is now known as dcaro
[12:41:12] *** Joins: rajkosto (~rajkosto@178.220.66.235)
[12:41:33] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Quit: Leaving)
[12:42:00] <twb> Sorry, I can't find a cite.
[12:42:32] *** Parts: sixie6e (~sixie6e@2600:1000:b06b:d422:1da9:f8de:d2b5:3823) ()
[12:42:35] <twb> anyway, "GET vs. POST" is about idempotency (GET is better) and also abuot how much crap you can cram into the request (POST is better)
[12:43:08] <twb> If you need both you might need to fiddle around with sessions.  This is really more a #web question than a #python question, I think.
[12:43:28] <tuskkk____> I don't need sessions
[12:43:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:43:48] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:43:51] <tuskkk____> I am on to finding the "correct" way for this
[12:44:32] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[12:44:34] <twb> I think there is no correct option at this time.  Web development is a dumpster fire because of stuff like this.
[12:44:52] <twb> (But I'm not an expert in webdev)
[12:45:00] <tuskkk____> ok
[12:46:31] *** Joins: minip (~minip@user/minip)
[12:46:37] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[12:46:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:46:57] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (Ping timeout: 240 seconds)
[12:46:57] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Ping timeout: 240 seconds)
[12:47:01] *** Quits: nhanb (522d4a25ea@2604:bf00:561:2000::13b) (Ping timeout: 245 seconds)
[12:47:01] *** Quits: sliwkr (1aac56ad72@2604:bf00:561:2000::251) (Ping timeout: 245 seconds)
[12:47:02] *** Quits: Robin_Jadoul (afe6b98926@2604:bf00:561:2000::18e) (Ping timeout: 240 seconds)
[12:47:02] *** Quits: shrysr (4e0b42ae98@user/shrysr) (Ping timeout: 240 seconds)
[12:47:02] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Ping timeout: 240 seconds)
[12:47:11] *** Quits: srhm (dda3db84b5@user/srhm) (Ping timeout: 250 seconds)
[12:47:11] *** Quits: ztrawhcse (3d1f427b6a@archlinux/bugwrangler/eschwartz) (Ping timeout: 250 seconds)
[12:47:26] *** Quits: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5) (Ping timeout: 245 seconds)
[12:47:26] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (Ping timeout: 245 seconds)
[12:47:26] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (Ping timeout: 245 seconds)
[12:47:32] *** Quits: seanh (1a2a07ea57@2604:bf00:561:2000::201) (Ping timeout: 240 seconds)
[12:47:51] *** Quits: lew (c292bc13c9@2604:bf00:561:2000::27e) (Ping timeout: 245 seconds)
[12:47:51] *** Quits: akelly (24aca7a63b@2604:bf00:561:2000::152) (Ping timeout: 245 seconds)
[12:47:52] *** Quits: MJ (~mjpieters@zopatista.plus.com) (Ping timeout: 250 seconds)
[12:48:03] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Ping timeout: 250 seconds)
[12:48:12] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[12:48:12] *** Joins: sliwkr (1aac56ad72@2604:bf00:561:2000::251)
[12:48:14] *** Joins: nhanb (522d4a25ea@2604:bf00:561:2000::13b)
[12:48:14] *** Joins: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5)
[12:48:17] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (Ping timeout: 240 seconds)
[12:48:21] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[12:48:23] *** Joins: ztrawhcse (3d1f427b6a@archlinux/bugwrangler/eschwartz)
[12:48:25] *** Joins: srhm (dda3db84b5@user/srhm)
[12:48:26] *** Joins: shrysr (4e0b42ae98@user/shrysr)
[12:48:41] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Ping timeout: 245 seconds)
[12:48:48] *** Joins: Robin_Jadoul (afe6b98926@2604:bf00:561:2000::18e)
[12:48:51] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[12:48:59] *** Joins: seanh (1a2a07ea57@2604:bf00:561:2000::201)
[12:49:00] *** Quits: _blackeitus (~blackleit@189.195.195.100) (Read error: Connection reset by peer)
[12:49:00] *** Joins: MJ (~mjpieters@zopatista.plus.com)
[12:49:02] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (Ping timeout: 240 seconds)
[12:49:11] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[12:49:23] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[12:49:23] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[12:49:24] *** Joins: _blackeitus (~blackleit@189.195.195.100)
[12:49:28] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[12:49:41] *** Joins: akelly (24aca7a63b@2604:bf00:561:2000::152)
[12:49:49] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[12:49:50] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[12:49:50] *** Joins: lew (c292bc13c9@2604:bf00:561:2000::27e)
[12:51:08] *** Joins: dme86 (~dan@user/dan86)
[12:51:39] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:52:31] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:52:44] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[12:53:14] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[12:53:16] *** Quits: MJ (~mjpieters@zopatista.plus.com) (Ping timeout: 245 seconds)
[12:54:18] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[12:54:45] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[12:58:31] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Read error: Connection reset by peer)
[12:58:40] *** Joins: rsx (~dummy@ppp-188-174-156-244.dynamic.mnet-online.de)
[12:58:41] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[12:58:50] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 272 seconds)
[12:59:56] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[13:00:04] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Remote host closed the connection)
[13:00:07] *** Quits: led_belly (~led_belly@37.120.197.45) (Ping timeout: 272 seconds)
[13:00:07] *** Joins: dme86 (~dan@user/dan86)
[13:00:08] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:00:32] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[13:01:29] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[13:02:12] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[13:02:29] *** Joins: lkthomas (~lkthomas@host81-149-79-114.in-addr.btopenworld.com)
[13:02:35] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[13:02:38] *** Quits: lkthomas__ (~lkthomas@host81-149-79-114.in-addr.btopenworld.com) (Ping timeout: 272 seconds)
[13:02:44] *** Quits: DerpGusta (~quassel@user/derpgusta) (Quit: No Ping reply in 180 seconds.)
[13:02:51] *** Quits: p-i-_ (~Ohmu@183.89.29.122) (Remote host closed the connection)
[13:03:11] *** Joins: DerpGusta (~quassel@user/derpgusta)
[13:03:23] *** Joins: p-i- (~Ohmu@2403:6200:8978:3172:a52c:82f0:fae0:da04)
[13:03:37] *** Joins: kuter_ (~kuter@public-gprs524903.centertel.pl)
[13:03:55] *** Joins: Z-cat (~Z-cat@user/z-cat)
[13:04:05] *** Quits: Sidiq (~Sidiq@36.72.21.216) (Quit: Client closed)
[13:04:50] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:05:16] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:05:24] *** Quits: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[13:05:44] *** Joins: Xano_ (~Xano@2a00:23c4:4204:700:282c:c9fd:b33f:6087)
[13:07:00] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[13:07:06] *** Quits: kuter (~kuter@public-gprs526002.centertel.pl) (Ping timeout: 256 seconds)
[13:08:56] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Remote host closed the connection)
[13:09:26] *** Quits: kts (~kts@103.73.237.68) (Quit: Konversation terminated!)
[13:09:31] *** Quits: Xano (~Xano@2a00:23c4:4204:700:aa3:d50:3c93:ad01) (Ping timeout: 245 seconds)
[13:09:37] *** Joins: led_belly (~led_belly@37.120.197.44)
[13:10:19] *** Joins: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com)
[13:10:59] *** Joins: BAD (~mad@user/god)
[13:11:47] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:12] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[13:13:34] *** Quits: rvgate (~rvgate@user/rvgate) (Quit: Ping timeout (120 seconds))
[13:14:14] *** Joins: rvgate (~rvgate@user/rvgate)
[13:14:17] *** Quits: endidragon (~elle@cpe-76-167-67-22.natsow.res.rr.com) (Remote host closed the connection)
[13:14:40] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[13:15:09] <OliverUK> Hello, hopefully someone knows how to help.  I have been writing scripts in AutoHotKey and it worked great but I am trying to move to Python instead.  AHK allowed me to make exe files for Windows that could run silently with no command window popping up etc, how can I achieve the same with Python please?
[13:15:14] *** Joins: cosimone (~user@93-34-132-33.ip49.fastwebnet.it)
[13:16:40] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[13:17:05] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:17:12] *** Joins: vlm (~vlm@user/vlm)
[13:17:22] *** Quits: SlicerDicer68 (~SlicerDic@107-208-180-225.lightspeed.mdsnwi.sbcglobal.net) (Read error: Connection reset by peer)
[13:17:29] *** Joins: SlicerDicer680 (~SlicerDic@107-208-180-225.lightspeed.mdsnwi.sbcglobal.net)
[13:18:46] *** Joins: bluedust (~bluedust@103.165.167.221)
[13:18:57] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:20:28] *** Quits: bluedust (~bluedust@103.165.167.221) (Remote host closed the connection)
[13:20:56] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:3172:9c8d:bc4a:f54f:40ea)
[13:22:13] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:3172:9c8d:bc4a:f54f:40ea) (Remote host closed the connection)
[13:22:47] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:3172:1daf:a0:fe39:6993)
[13:24:12] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[13:24:21] <Repiphany> OliverUK: Opening scripts with pythonw.exe suppresses the command window
[13:24:24] <Repiphany> supresses
[13:24:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:3172:a52c:82f0:fae0:da04) (Ping timeout: 240 seconds)
[13:24:40] <Repiphany> Whoops two p
[13:24:56] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[13:25:30] <OliverUK> Yea I read that, I was hoping to get a packaged exe with python and my script in one
[13:25:34] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:54c5:a541:eeee:60e9)
[13:25:59] *** Joins: MajorBiscuit (~MajorBisc@c-001-030-015.client.tudelft.eduvpn.nl)
[13:26:51] <Repiphany> You can use pyinstaller to turn scripts into single-file executables but it's slow because it has to unzip python every time and also you run into problems with antivirus detection in windows
[13:27:23] <twb> w11 doesn't have something like binfmt-misc for .pyz files?
[13:28:20] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:28:56] <OliverUK> Repiphany: Not too fussed about slow, just wanted it to work like AHK does, single exe and can be made to be silent/hidden
[13:29:36] *** Quits: BAD (~mad@user/god) (Quit: flying away from here)
[13:29:55] <Repiphany> If you're just writing scripts for yourself, not sure why you need to make them into .exes
[13:29:57] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Ping timeout: 240 seconds)
[13:31:38] <white2> in my opinion python is not good at this requirement
[13:32:17] *** Joins: flower_ (~debian@46.244.61.4)
[13:32:39] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[13:34:17] <OliverUK> Repiphany: That's because I am not writing them just for myself
[13:34:35] <Repiphany> Yeah, ypu
[13:34:52] <Repiphany> you're not going to have a fun time trying to distribute packaged python executables for windows
[13:35:20] *** Quits: rajkosto (~rajkosto@178.220.66.235) (Read error: Connection reset by peer)
[13:36:12] <OliverUK> That's a shame
[13:36:35] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[13:36:44] <mickey8> any idea why does nltk.tokenize.RegexpTokenizer(r"\w+").tokenize("5g antenna") return ["g", "antenna"] and not ["5g", "antenna"]? \w matches "5g"
[13:36:55] <mickey8> \w+ even
[13:37:32] *** Quits: S010 (~S010@2a02:8084:4261:f700:2291:10e1:4488:92fd) (Quit: Leaving)
[13:38:40] *** Joins: Guest91 (~Guest91@2a02:a03f:6439:5800:8c8c:16ef:a978:a333)
[13:39:49] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:40:48] *** Joins: paul424 (~tom@ip-5-172-238-6.multi.internet.cyfrowypolsat.pl)
[13:41:09] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[13:43:07] *** Joins: kts (~kts@103.73.237.68)
[13:43:52] <mickey8> nvm found it
[13:44:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:44:17] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Ping timeout: 240 seconds)
[13:44:21] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[13:44:27] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[13:46:23] <Guest91> Hello to all python-fans. I don't have much time but I wanted to propose an idea. Everyone is free to bring it up in the python community if they find it interesting. By default a condition like this: ``if A and B or C:`` is interpreted as ``if (A and B) or C:``. We have all had to work to make complex conditions more readable. It would seem quite
[13:46:24] <Guest91> natural for ``if A and if B or C:`` to be interpreted as ``if A and (B or C)``. Currently an ``if`` in a conditional is a syntax error. I would suggest that an ``if`` in a condition be interpreted as if the rest of the condition were in parentheses.
[13:47:08] <Guest91> "B) " = "B )"
[13:47:24] <Guest91> B)   = "B )"
[13:47:26] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[13:48:13] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[13:48:36] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[13:48:37] *** Quits: simplicius (~simplicio@2a02-a45b-3dc8-1-1d3a-6766-2ae7-f393.fixed6.kpn.net) (Quit: Leaving)
[13:48:41] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Client Quit)
[13:48:58] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 250 seconds)
[13:51:12] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[13:52:36] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 240 seconds)
[13:53:37] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:54:19] *** Joins: pepper (~pepper@user/pepper)
[13:54:42] <jinsun> doesn't sound like a very good idea, parens solve this already and easier to understand
[13:55:27] *** Joins: nomic (~nomic@185.217.117.193)
[13:56:41] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[13:56:41] *** Quits: lowfi (~lowfi@user/lowfi) (Quit: Leaving)
[13:58:22] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 272 seconds)
[13:59:36] *** Joins: mrwick (~mrwick@user/mrwick)
[13:59:45] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:00:59] *** Joins: MJ (~mjpieters@zopatista.plus.com)
[14:03:10] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[14:04:49] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[14:05:00] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 250 seconds)
[14:05:20] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[14:06:37] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[14:10:20] *** Joins: Vonter (~Vonter@user/vonter)
[14:11:16] *** Quits: gitly (~gitly@185.69.144.241) (Quit: WeeChat 3.4)
[14:11:37] *** Quits: Throgkt (~Throgkt@user/throgkt) (Quit:  )
[14:11:39] *** Quits: stardiviner (~stardivin@39.170.213.70) (Remote host closed the connection)
[14:12:18] <amo> i have a suggestion coming from the other side
[14:13:06] *** Joins: dreamon (~dreamon@153.100.191.113)
[14:13:36] <amo> we should have "else" as a shortcircuit. `foo = foo else {}` which will expand to `foo = foo if foo is None else {}`
[14:14:35] <jinsun> that's PEP 505, just with else instead of ?? https://www.python.org/dev/peps/pep-0505/
[14:14:55] <amo> exactly
[14:15:00] <jinsun> I like it, becasue I used C# that has ?? and .? too
[14:15:31] <jinsun> but some people don't like it because it encourages returning None or something that
[14:15:47] <amo> doesn't work for none-aware attributes, but at least it's less cryptic and less verbose than the if else dance
[14:16:37] *** Quits: audiomouse (~audio@user/audio) (Ping timeout: 240 seconds)
[14:16:42] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:18:13] *** Joins: NealRame (~a@122-199-48-238.ip4.superloop.com)
[14:19:58] *** Joins: Throgkt (~Throgkt@user/throgkt)
[14:22:08] <OliverUK> I have a script that works fine but then when I run it via pyinstaller to get an exe I get an OSError: [WinError 10022] An invalid argument was supplied
[14:23:35] *** Joins: evanextreme (~evan@2604:4080:1000:8150:1cc2:43f9:3edb:f1c0)
[14:23:40] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[14:24:56] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:25:08] *** Quits: Cienisty (Cienisty@user/cienisty) (Quit: Error 606 | Demon not found)
[14:26:37] *** Joins: darksun (~darksun@user/darksun)
[14:26:52] *** Quits: dreamon (~dreamon@153.100.191.113) (Ping timeout: 272 seconds)
[14:28:20] *** Quits: evanextreme (~evan@2604:4080:1000:8150:1cc2:43f9:3edb:f1c0) (Ping timeout: 252 seconds)
[14:28:22] <jinsun> another good thing would be to add something like Option and Result from rust and other functional languages to collections maybe
[14:28:34] *** Joins: gusto (~Augustus@109.255.100.54)
[14:28:58] *** Joins: toastloop (~toastloop@user/toastloop)
[14:29:03] <jinsun> having those will discourage two common bad practices, returning None and throwing exceptions
[14:30:08] *** Joins: Cienisty (Cienisty@user/cienisty)
[14:30:16] *** Quits: NiD27 (~nid27@49.205.150.78) (Remote host closed the connection)
[14:31:26] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[14:32:08] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[14:32:26] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:32:31] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:32:47] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:08] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:34:43] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[14:36:35] *** Quits: ano (~ano@user/ano) (Ping timeout: 240 seconds)
[14:37:38] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[14:37:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:38:32] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[14:38:38] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Quit: leaving)
[14:38:48] *** Joins: ano (~ano@user/ano)
[14:38:49] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: leaving)
[14:39:32] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:39:57] *** Quits: tobybl_ (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[14:40:06] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[14:40:54] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[14:42:05] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[14:42:09] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[14:42:48] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[14:43:00] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[14:43:41] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:44:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:44:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:45:19] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:46:10] *** Joins: cursey (~cursey@user/cursey)
[14:46:41] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[14:47:44] *** Joins: zuplex (~zuplex@202.51.76.222)
[14:47:55] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[14:48:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:48:58] *** Joins: noteness (~noteness@user/noteness)
[14:50:18] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[14:50:49] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:53:04] *** Quits: arinov_ (~arinov@77.67.139.142) (Ping timeout: 256 seconds)
[14:54:47] *** Joins: dme86_ (~dan@user/dan86)
[14:55:42] *** Quits: samuelbernardo (~samuelber@nata02.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[14:57:36] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[14:58:25] *** Joins: samuelbernardo (~samuelber@nata02.lip.pt)
[14:58:57] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[14:59:18] *** Quits: fstd (~fstd@xdsl-81-173-174-103.nc.de) (Read error: Connection reset by peer)
[14:59:21] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[14:59:26] *** Joins: zuplex_ (~zuplex@202-51-76-38.vianet.com.np)
[14:59:35] *** Joins: fstd (~fstd@xdsl-81-173-174-103.nc.de)
[14:59:36] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[15:02:12] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[15:02:21] *** Quits: zuplex (~zuplex@202.51.76.222) (Ping timeout: 272 seconds)
[15:04:15] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Read error: Connection reset by peer)
[15:04:55] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:05:05] *** Joins: georgios (~georgios@user/georgios)
[15:05:30] *** Quits: zaquest (~notzaques@5.130.79.72) (Ping timeout: 272 seconds)
[15:05:58] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:06:12] *** Quits: zuplex_ (~zuplex@202-51-76-38.vianet.com.np) (Ping timeout: 240 seconds)
[15:06:55] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 240 seconds)
[15:07:30] <nedbat> jim: throwing exceptions is a bad practice?
[15:07:31] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 256 seconds)
[15:07:49] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[15:08:10] *** Joins: de-facto (~de-facto@user/de-facto)
[15:08:24] <bookworm> for some people coming from other languages, yes. Throwing exceptions in say C++ is rather frowned upon
[15:08:41] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 272 seconds)
[15:08:56] <bookworm> it hides the error paths, but makes the code "simpler". Both camps have valid arguments
[15:09:13] <bookworm> explicit error handling like say in go is rather... verbose
[15:09:45] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 250 seconds)
[15:09:47] *** Quits: Guest91 (~Guest91@2a02:a03f:6439:5800:8c8c:16ef:a978:a333) (Ping timeout: 256 seconds)
[15:09:49] *** Joins: Midjak (~Midjak@82.66.147.146)
[15:09:56] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[15:10:04] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[15:10:19] <bookworm> the problem with exceptions in python is that they aren't annotated, meaning it's not obvious what *can* throw unless you look at the full source
[15:10:21] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 245 seconds)
[15:10:40] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[15:10:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:11:14] *** Joins: a_fellow_human[m (~afellowhu@2001:470:69fc:105::1:c6e1)
[15:11:27] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:921a:3b05:ee59:6305)
[15:11:31] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[15:12:03] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 256 seconds)
[15:12:49] *** Joins: summersault (~summersau@179.221.251.36)
[15:15:11] <Helle> bookworm: mooooood, I have some libraries that I had to wrap calls to in a broad exception as the library itself does not wrap errors and lets a lot of cruft of the underlying stuff just bubble up
[15:17:19] <bookworm> broad except handlers are fine, after all you only need to special case certain sentinel errors... usually there's nothing you can do about it but to bubble it up to the main loop so that you can terminate with an error / retry at a level that knows how to do it
[15:17:48] <Helle> I mean I have fallback methods if the library is unable to handle it even
[15:17:50] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 250 seconds)
[15:17:54] <Helle> that is what makes it like the worst
[15:18:29] *** Quits: parv (~quass@user/parv) (Quit: parv)
[15:19:10] *** Joins: timkofu (~timkofu@user/timkofu)
[15:19:13] <timkofu> Howdy
[15:19:18] *** Joins: mcon1 (~Thunderbi@host-87-7-219-236.retail.telecomitalia.it)
[15:20:26] <Helle> bookworm: but the annotation lack is why pylint can only be like "you shouldn't do this" and me having to go "shut up", because actually discovering the possible exceptions is uh, hell or at least potentially halting problem
[15:20:32] *** Joins: bluedust (~bluedust@103.165.167.221)
[15:20:46] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:20:50] *** Quits: pycode (~pycode3@2001:b07:5d28:551:5647:37e6:5350:44e8) (Ping timeout: 250 seconds)
[15:21:03] *** Joins: Taeyeon (~taeyeon@2a02:6d40:35ab:c800:d29b:7f99:6d94:9d60)
[15:21:52] *** Quits: OP-0 (~pca290122@94.134.227.107) (Quit: WeeChat 3.4)
[15:21:58] <nedbat> last time i worked in a language with checked exceptions, we eventually just said everything could raise Exception, because it was constant whack-a-mole to keep the notations tighter than that.
[15:22:06] <bookworm> well, I'd rather use an actual typed language over pythons type annotations but that's me
[15:22:41] *** Joins: Barones (~Barones@user/Barones)
[15:23:32] <mcon1> I have a complex application using, among others, PyQt5 and pyqtlet2 with all their dependencies. It works as expected under Linux. Now I need to pack it to have it work on a Win10 desktop for "non programmer" users. How should I proceed? I see there are several alternatives but I know none of them and I would like to avoid "false starts" as much as possible.
[15:24:54] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:25:57] <Taeyeon> Hi. I have a function with an optional kw-only bool argument that changes the return type. How do I tell MyPy about it? I tried using @overload with Literal[True] and [False] but it complains about overlaps with incompatible return type
[15:26:39] *** Joins: arinov_ (~arinov@77.67.139.142)
[15:26:49] *** Joins: marcello42 (~mp@p200300dfaf10fe015baf6eed7f4ef68f.dip0.t-ipconnect.de)
[15:26:57] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[15:27:10] *** Joins: califax (~califax@user/califx)
[15:27:21] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:27:41] *** Joins: Pandadub (~Barones@user/Barones)
[15:27:54] <Helle> bookworm: yeah, strong typing especially on exceptions is a thing I actually appreciate in languages, it gives me some clue on failure paths as well and makes catches somewhat clear what they actually need to handle
[15:28:23] *** Quits: Pandadub (~Barones@user/Barones) (Client Quit)
[15:29:15] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:54c5:a541:eeee:60e9) (Ping timeout: 250 seconds)
[15:29:15] *** Quits: naranja (~orange@user/orangeboxcutter) (Ping timeout: 240 seconds)
[15:29:24] *** Quits: upsala (~zcb@p200300d5072b35007e27f062af649e7a.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:31:31] *** Joins: 073AARX7D (~jay-m@41.205.30.141)
[15:31:31] *** Joins: 047AAC4A3 (~jay-m@41.205.30.141)
[15:31:41] *** Joins: upsala (~zcb@185.213.155.232)
[15:31:54] <Taeyeon> Ah I got it. I needed to omit the default argument for the non-default overload. Didn't realize it was legal to have kw-only arguments without default value
[15:32:25] *** Joins: Atque (~Atque@user/atque)
[15:32:28] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[15:33:35] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:33:39] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[15:33:44] *** Joins: p-i- (~Ohmu@2403:6200:8978:7799:fd4a:71a0:8bdb:db3d)
[15:33:57] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[15:34:12] *** Joins: vaio (~gary@user/ghost)
[15:34:16] *** Joins: sanmingzhi1 (~duimech@h96-61-237-176.tlpltn.broadband.dynamic.tds.net)
[15:34:36] *** Quits: sanmingzhi (~duimech@h96-61-237-176.tlpltn.broadband.dynamic.tds.net) (Ping timeout: 240 seconds)
[15:34:37] *** Quits: tm007 (uid287041@id-287041.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:34:41] <bjs> nedbat: checked exceptions is a difficult one,  even Haskell doesn't do it.
[15:35:47] *** Joins: zuplex (~zuplex@202-51-76-35.vianet.com.np)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:06] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:3172:1daf:a0:fe39:6993) (Ping timeout: 260 seconds)
[15:36:12] <jancoow> Hi; so a library fonttools puts a lot of useless(for me) information in the log. How can i disable the logging in such lib
[15:36:18] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:51cf:76e6:128:2246)
[15:36:18] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:51cf:76e6:128:2246) (Changing host)
[15:36:18] *** Joins: skapata (~Skapata@user/skapata)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:32] <Helle> jancoow: is it using the Python logging API and using a correctly created logger ?
[15:37:02] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[15:37:41] <Helle> "logging.getLogger('loggernamehere').setLevel(logging.INFO)" and then replace the name and level you want there
[15:37:49] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[15:37:52] <jancoow> It is using the python logger
[15:37:59] <jancoow> In my app I just use getlogger()
[15:38:02] <Helle> jancoow: then see what I just gave :)
[15:38:05] <jancoow> I think the library does that as well
[15:38:20] <sn_fk_n> fa
[15:38:24] <sn_fk_n> oops
[15:38:25] <Helle> jancoow: yes, but getLogger('nametheyuse') gets you their logger and you can set the level there
[15:39:18] *** Joins: cdown (~cdown@188.214.11.14)
[15:39:19] <jancoow> Ah I see, it uses a different facility
[15:39:55] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:40:24] *** Quits: nomic (~nomic@185.217.117.193) (Quit: Leaving)
[15:40:51] <Helle> now it could get a bit painful if they explicitly set the level then you need to make sure you set your level later, but instatiation order is not an issue, getLogger is actually get or create
[15:41:27] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[15:41:44] <jancoow> Ye I just set it as critical later
[15:42:01] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[15:43:17] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[15:43:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32)
[15:45:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:45:58] *** Joins: summersault (~summersau@179.221.251.36)
[15:46:02] *** Quits: marcello42 (~mp@p200300dfaf10fe015baf6eed7f4ef68f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:46:03] *** Quits: 073AARX7D (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[15:46:12] *** Quits: 047AAC4A3 (~jay-m@41.205.30.141) (Ping timeout: 240 seconds)
[15:46:24] *** Joins: txtsd (~txtsd@user/txtsd)
[15:46:29] *** Joins: rvalue (~rvalue@user/rvalue)
[15:46:36] *** Quits: bluedust (~bluedust@103.165.167.221) (Ping timeout: 240 seconds)
[15:46:37] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[15:48:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:49:19] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[15:49:20] *** Quits: arinov_ (~arinov@77.67.139.142) (Quit: Konversation terminated!)
[15:49:32] *** Joins: de-facto (~de-facto@user/de-facto)
[15:49:34] *** Joins: arinov_ (~arinov@77.67.139.142)
[15:50:04] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:50:14] *** Joins: cdown_ (~cdown@163.114.131.1)
[15:52:51] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 256 seconds)
[15:52:58] *** cdown_ is now known as cdown
[15:53:41] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[15:54:10] *** Joins: pycode (~pycode3@2001:b07:5d28:551:ea12:1261:d2ab:9138)
[15:54:27] *** Joins: summersault (~summersau@179.221.251.36)
[15:55:09] *** Quits: paul424 (~tom@ip-5-172-238-6.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:55:24] *** Joins: frost (~frost@user/frost)
[15:55:24] *** Quits: arinov_ (~arinov@77.67.139.142) (Ping timeout: 256 seconds)
[15:57:04] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[15:57:41] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[15:57:48] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[15:58:03] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[15:58:12] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[16:02:53] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[16:02:57] *** Joins: fonini__ (~fofoni@user/fofoni)
[16:03:14] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[16:03:38] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[16:05:30] *** Quits: fofoni_ (~fofoni@user/fofoni) (Ping timeout: 260 seconds)
[16:07:23] *** Joins: creedofnecessity (~creedofne@mobile-107-77-199-124.mobile.att.net)
[16:10:15] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[16:11:39] *** Joins: dme86 (~dan@user/dan86)
[16:13:58] *** Quits: Xano_ (~Xano@2a00:23c4:4204:700:282c:c9fd:b33f:6087) (Quit: Leaving)
[16:14:09] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[16:14:32] *** Quits: dme86_ (~dan@user/dan86) (Ping timeout: 272 seconds)
[16:14:43] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[16:14:59] *** Joins: amoe (~amoe@visarend.solasistim.net)
[16:15:03] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: help)
[16:15:15] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:15:26] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:3cb7:2fb3:1d93:9395) (Ping timeout: 250 seconds)
[16:16:09] *** Joins: rakoon (~rakoon@80-100-166-138.ip.xs4all.nl)
[16:17:51] <amoe> Hopefully simple pandas question.  I have some variable length lists of strings in a column 'B'.  I want to find all rows where the value is exactly equal to some other list.  df[df['B'] == ['some_list']] doesn't work because I get "ValueError...Lengths must match to compare".  How can I do this?
[16:17:56] *** Quits: kts (~kts@103.73.237.68) (Quit: Konversation terminated!)
[16:18:30] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[16:18:45] *** Joins: bluedust (~bluedust@103.165.167.221)
[16:18:53] *** Quits: pycode (~pycode3@2001:b07:5d28:551:ea12:1261:d2ab:9138) (Ping timeout: 252 seconds)
[16:20:16] *** Joins: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr)
[16:21:25] <white2> df[df['B'] == 'some_list']
[16:21:59] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[16:22:51] *** Quits: hwdyki (~hwdyki@user/hwdyki) (Quit: Client closed)
[16:23:02] <amoe> white2: That doesn't do the same thing as the values in column B are lists, so they will always compare False to strings
[16:23:14] *** Quits: zuplex (~zuplex@202-51-76-35.vianet.com.np) (Ping timeout: 250 seconds)
[16:23:48] *** Joins: zuplex (~zuplex@202.51.76.195)
[16:24:08] <bookworm> white2: ser.isin(list)
[16:24:14] *** Quits: kuter_ (~kuter@public-gprs524903.centertel.pl) (Quit: Lost terminal)
[16:24:35] <bookworm> ser being df['B'] or whatever other Series
[16:26:05] <MacGyver> Would anyone happen to know when SO_NO_CHECK was dropped from the python's socket constants?
[16:26:13] <MacGyver> Or maybe it was never in there to begin with?
[16:26:31] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:26:44] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:27:22] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[16:27:23] <MacGyver> (Don't start a discussion about checksumming being necessary yada yada; I'm building a system for the express purpose of teaching students how to handle packet corruption and can't have the OS take my packets away before they hit the python process)
[16:27:35] <amoe> bookworm: that does work, nice, df['B'].isin([['some_list']])
[16:27:52] <bookworm> you sound surprised?
[16:27:53] *** Joins: timkofu (~timkofu@user/timkofu)
[16:28:17] <amoe> heh, I was a little bit.  thanks :)
[16:31:46] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:32:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:33:03] *** Joins: thevar1able (~textual@46.39.45.122)
[16:33:22] <MacGyver> Not that it matters, looks like I can still just hardcode the 11.
[16:34:33] *** Joins: kts (~kts@103.73.237.68)
[16:34:50] *** Joins: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com)
[16:35:05] *** Joins: hwdyki (~hwdyki@user/hwdyki)
[16:35:38] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[16:37:06] *** Joins: someuser (~user@197.54.28.206)
[16:38:41] <Masklin_Gurder> I have a list of sets, and I want to create the union or intersection of all these sets
[16:38:59] <Masklin_Gurder> Is there a neat syntax for this I'm forgetting, or must I do e.g. |= in an explicit loop?
[16:39:00] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[16:39:41] <MacGyver> The union *or* intersection?
[16:39:49] <MacGyver> Those are different things.
[16:39:56] <grym> listofsets[0].intersection(*listofsets[1:])
[16:39:57] <Repiphany> functools.reduce(set.union, list_of_sets)
[16:39:57] <grym> :D
[16:40:00] <deniska> Masklin_Gurder: you can pass multiple sets to `set.union`
[16:40:01] <Masklin_Gurder> MacGyver: I imagine the syntax is very similar, so take either as the example
[16:40:11] <drbeco> Hello everyone, good morning
[16:40:28] <Masklin_Gurder> deniska: so      set.union(list_of_sets**) ?
[16:40:30] *** Quits: kts (~kts@103.73.237.68) (Ping timeout: 272 seconds)
[16:40:43] <Repiphany> or intersection
[16:40:46] <drbeco> I hope someone in the morning shift can help me, because the midnight shift slept through it . :)
[16:40:48] <Masklin_Gurder> No wait, *list_of_sets      ja?
[16:40:53] <deniska> Masklin_Gurder: set.union(*list_of_sets)
[16:41:02] *** Quits: lxdr (~lxdr@user/lxdr) (Quit: Ping timeout (120 seconds))
[16:41:03] <Masklin_Gurder> Right, right. I knew there was a neat way. Thanks!
[16:41:10] <drbeco> If I delete the folder of a virtual env, rm -rf oldenv , and it is still activate, how do I deactivate it? (without closing the terminal?)
[16:41:40] <deniska> drbeco: try `deactivate`
[16:41:47] *** Joins: pro_z (~pro_z@37.214.61.103)
[16:41:53] *** Joins: lxdr (~lxdr@user/lxdr)
[16:42:10] <drbeco> deniska, thanks. I thought "deactivate" would be gone when the folder is deleted
[16:42:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[16:42:31] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[16:42:34] *** Joins: vlm (~vlm@user/vlm)
[16:43:20] *** Quits: hwdyki (~hwdyki@user/hwdyki) (Quit: Client closed)
[16:43:22] <MacGyver> Masklin_Gurder: Right, yeah, that'll work for all basic operations defined under https://docs.python.org/3/library/stdtypes.html#set
[16:44:39] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[16:44:53] <grym> drbeco: on disk, yes
[16:45:02] *** Joins: kts (~kts@103.73.237.68)
[16:45:21] *** Quits: vladoski (~vladoski@2001:b07:add:d406:87bc:7ac9:abdf:a38f) (Ping timeout: 245 seconds)
[16:45:32] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:45:57] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:46:02] <phy1729> drbeco: iirc it's a function that undefines itself when you run it
[16:47:00] *** Quits: kts (~kts@103.73.237.68) (Client Quit)
[16:47:31] *** Quits: NealRame (~a@122-199-48-238.ip4.superloop.com) (Remote host closed the connection)
[16:47:54] <drbeco> grym, phy1729, thanks
[16:48:08] <drbeco> phy1729, that is cool, I was wondering about it
[16:48:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:49:31] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[16:49:51] *** Joins: ExeciN (~ExeciN@user/nicexe)
[16:50:50] *** Joins: fdan (~fdan@2001:1900:2100:2807:640a::ffb)
[16:51:46] *** Joins: NealRame (~a@122-199-48-238.ip4.superloop.com)
[16:52:27] *** Joins: stockholm (~Andreas@p200300d2c70393000030926e442b207a.dip0.t-ipconnect.de)
[16:53:08] <stockholm> i am looking for instructions to install several python version in parallel on a debian11 system.
[16:53:16] *** Quits: herjazz (~herjazz@p10513117-ipngn24101marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:53:22] *** Quits: timkofu (~timkofu@user/timkofu) (Quit: Lost terminal)
[16:53:38] *** Joins: shad (~shad@user/shad)
[16:53:40] <stockholm> i google and find only useless online magazines that copy from each other and dont actually answer the question
[16:53:44] <grym> stockholm: https://github.com/pyenv/pyenv
[16:54:15] <grym> stockholm: dependencies: https://github.com/pyenv/pyenv/wiki#suggested-build-environment
[16:54:37] <grym> stockholm: a convenient installer script: https://github.com/pyenv/pyenv-installer
[16:54:39] *** Joins: kts (~kts@103.73.237.68)
[16:54:45] <stockholm> can i use that with pycharm?
[16:54:49] <grym> yes
[16:54:54] <stockholm> awwesome
[16:54:56] <stockholm> thank you
[16:55:02] <grym> np
[16:55:13] <supakeen> [minor disagreement noises]
[16:55:32] *** Quits: kts (~kts@103.73.237.68) (Client Quit)
[16:57:29] <supakeen> i (used to) use the deadsnakes ppa which works on debian as well to install python3 versions, if you are disciplined with your use of virtual environments and specifying the full interpreter it works well
[16:57:54] *** Quits: zuplex (~zuplex@202.51.76.195) (Ping timeout: 250 seconds)
[16:58:07] <grym> and remember to install _all_ of it, split across however many packages that is :)
[16:58:32] <grym> i use deadsnakes too sometimes; usually in docker
[17:00:00] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:00:03] <Masklin_Gurder> What is this word "deadsnakes"?
[17:00:13] <deniska> Don't forget to remove python installed from deadsnakes if you dist-upgrade ubuntu though
[17:00:15] *** Quits: efil4cri (~efil4cri@gateway/tor-sasl/wfnintr) (Ping timeout: 240 seconds)
[17:00:19] <deniska> Otherwise fun things happen
[17:00:21] *** Joins: efil4cri_ (~efil4cri@gateway/tor-sasl/wfnintr)
[17:00:46] <grym> Masklin_Gurder: a ppa
[17:00:47] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:00:52] <nedbat> Masklin_Gurder: it's a place to get lots of python versions: https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
[17:01:20] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:c91d:95da:a39d:f68c)
[17:01:59] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[17:03:17] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:03:58] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Ping timeout: 256 seconds)
[17:04:25] *** Joins: georgios (~georgios@user/georgios)
[17:04:50] <bjs> old Pythons == dead snakes :(
[17:05:25] <grym> new(-er than the distro's system) pythons: predead snakes?
[17:05:48] <Masklin_Gurder> bjs: Ah
[17:05:50] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[17:06:24] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[17:06:53] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[17:08:03] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[17:08:31] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:08:43] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:08:46] <valdur55> aa/wc
[17:08:56] <valdur55> sry typo.. meant /wc to close window
[17:08:57] *** Parts: valdur55 (valdur55@free.blinkenshell.org) ()
[17:10:12] *** Quits: fdan (~fdan@2001:1900:2100:2807:640a::ffb) (Quit: Client closed)
[17:11:02] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[17:14:12] *** Joins: MeanEYE (~Mladen@87.116.177.143)
[17:14:47] *** Quits: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[17:15:17] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[17:15:38] *** Quits: fofoni (~fofoni@user/fofoni) (Killed (NickServ (GHOST command used by fonini__)))
[17:15:49] *** fonini__ is now known as fofoni
[17:16:03] *** Joins: fofoni_ (~fofoni@user/fofoni)
[17:16:48] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:16:49] *** Joins: aknot (~aknot@2603:900a:1503:17bb:740b:1ae:8164:3478)
[17:18:02] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[17:19:10] *** Joins: PublicWifi (~PublicWiF@user/publicwifi)
[17:19:37] *** Quits: Masklin_Gurder (~joel@h-5-150-226-94.A230.priv.bahnhof.se) (Read error: Connection reset by peer)
[17:20:13] *** Joins: kts (~kts@103.73.237.14)
[17:23:17] *** Joins: bloody (~bloody@user/bloody)
[17:24:32] *** Joins: not_no5 (~not_not@193.178.220.11)
[17:25:10] *** Joins: hwdyki (~hwdyki@user/hwdyki)
[17:25:41] *** Quits: dsrt^ (~dsrt@50.233.120.162) (Remote host closed the connection)
[17:26:06] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:b54c:f832:91af:f6f2)
[17:26:33] *** not_no5 is now known as not_not_not
[17:26:46] *** Quits: not_not_not (~not_not@193.178.220.11) (Excess Flood)
[17:27:43] *** Joins: angelacrust (~angelacru@182.68.142.100)
[17:28:00] *** Joins: not_no2 (~not_not@193.178.220.11)
[17:28:31] *** not_no2 is now known as not_no3
[17:28:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:28:45] *** not_no3 is now known as not_not_not
[17:28:51] *** Quits: not_not_not (~not_not@193.178.220.11) (Excess Flood)
[17:29:03] *** Joins: Masklin_Gurder (~joel@h-5-150-226-94.A230.priv.bahnhof.se)
[17:30:19] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:30:27] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[17:31:21] *** Joins: Pi-sistance (~Pi-sistan@cpc94040-newt37-2-0-cust284.19-3.cable.virginm.net)
[17:31:51] *** Joins: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr)
[17:31:58] *** Joins: oldguy (~peter@user/oldguy)
[17:32:26] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 272 seconds)
[17:32:36] *** Quits: aknot (~aknot@2603:900a:1503:17bb:740b:1ae:8164:3478) (Ping timeout: 240 seconds)
[17:33:00] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[17:34:54] *** Quits: amoe (~amoe@visarend.solasistim.net) (Quit: leaving)
[17:35:24] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Ping timeout: 240 seconds)
[17:39:00] *** Quits: someuser (~user@197.54.28.206) (Ping timeout: 240 seconds)
[17:39:38] *** Joins: ice9 (~ice9@user/ice9)
[17:40:32] *** Quits: Barones (~Barones@user/Barones) (Ping timeout: 240 seconds)
[17:42:39] *** Joins: Barones (~Barones@user/Barones)
[17:46:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:46:36] *** Quits: Allegretto (~allegrett@fibhost-67-39-93.fibernet.hu) (Ping timeout: 240 seconds)
[17:47:53] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[17:49:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:49:51] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[17:49:54] *** Quits: pepper (~pepper@user/pepper) (Quit: Leaving)
[17:50:10] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[17:50:44] <Pi-sistance> just been intorduced to init. feels good always wondered what that meant
[17:51:26] *** Joins: jamea (~jamea@10.189-202-213.bestelclientes.com.mx)
[17:51:46] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[17:51:59] *** Joins: pepper (~pepper@user/pepper)
[17:52:50] *** Joins: pycode (~pycode3@2001:b07:5d28:551:b4f7:7e5f:2606:5f00)
[17:53:05] *** Quits: mossman93 (~quassel@user/mossman93) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:53:32] *** Joins: mossman93 (~quassel@user/mossman93)
[17:55:05] *** Joins: dme86 (~dan@user/dan86)
[17:55:21] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[17:55:29] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[17:56:41] <bookworm> "initialization" is what it means
[17:58:04] <Pi-sistance> if I Have  def foo(key1=zzz,key2=zyyy):    how do I use key1's default, but not key 2's? I cant do: foo(,zzzzz)
[17:58:05] *** Joins: frmlof (~frmlof@70.243.238.191)
[17:58:17] <Pi-sistance> yes
[17:58:53] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[17:59:01] <phy1729> foo(key2='bar')
[17:59:01] <white2> yes
[17:59:04] *** Quits: frmlof (~frmlof@70.243.238.191) (Client Quit)
[17:59:33] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 256 seconds)
[18:00:26] *** Joins: frmlof (~frmlof@70.243.238.191)
[18:01:55] *** Joins: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net)
[18:02:02] *** Quits: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[18:02:15] <Pi-sistance> ah ok thanks
[18:02:36] *** Quits: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[18:05:15] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[18:05:22] *** Quits: moog (~moog@107.126.48.23) (Ping timeout: 272 seconds)
[18:06:20] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[18:06:25] *** Joins: Guest51 (~Guest51@161.8.242.212)
[18:06:27] *** Quits: white2 (~mahengrui@user/mahengrui1) (Remote host closed the connection)
[18:06:50] *** Joins: white2 (~mahengrui@110.253.208.80)
[18:09:50] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[18:09:57] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[18:10:30] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:11:44] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[18:11:45] *** Joins: Guest5125 (~Guest51@161.8.242.212)
[18:12:11] *** Quits: Guest5125 (~Guest51@161.8.242.212) (Client Quit)
[18:12:44] *** ou5x is now known as oz4ga
[18:12:58] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 272 seconds)
[18:13:00] *** Quits: kingofcsu (~kingofcsu@114.249.132.226) (Quit: kingofcsu)
[18:13:13] *** Joins: zaquest (~notzaques@5.130.79.72)
[18:13:14] *** Quits: hwdyki (~hwdyki@user/hwdyki) (Quit: Client closed)
[18:13:18] *** white2 is now known as mahengrui1
[18:13:23] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[18:13:36] *** Quits: mahengrui1 (~mahengrui@110.253.208.80) (Changing host)
[18:13:36] *** Joins: mahengrui1 (~mahengrui@user/mahengrui1)
[18:13:52] *** mahengrui1 is now known as white2
[18:13:56] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:14:23] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:14:31] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 256 seconds)
[18:15:16] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[18:15:21] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (Ping timeout: 245 seconds)
[18:15:57] *** Quits: Barones (~Barones@user/Barones) (Ping timeout: 240 seconds)
[18:16:08] *** Joins: Allegretto (~allegrett@94-21-199-71.pool.digikabel.hu)
[18:16:17] *** Joins: ice9 (~ice9@user/ice9)
[18:16:31] *** Quits: oldguy (~peter@user/oldguy) (Quit: oldguy)
[18:16:52] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[18:17:12] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[18:17:46] *** Joins: Harlin (~DonQixote@75-163-174-136.clsp.qwest.net)
[18:18:56] *** Joins: VoidSync (~sync@user/voidsync)
[18:19:03] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:19:08] *** Joins: marcello42 (~mp@p200300dfaf10fe015baf6eed7f4ef68f.dip0.t-ipconnect.de)
[18:20:57] *** Joins: xrogaan_ (~xrogaan@user/xrogaan)
[18:21:12] *** Quits: xrogaan_ (~xrogaan@user/xrogaan) (Client Quit)
[18:21:14] *** Joins: iomari891 (~iomari891@105.112.138.38)
[18:22:02] *** Quits: ghost43_ (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[18:22:30] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[18:24:26] *** Joins: had3so0 (~had@user/had3so0)
[18:24:27] *** ninpo is now known as Ninpo
[18:24:30] *** Quits: VoidSync (~sync@user/voidsync) (Quit: VoidSync)
[18:25:11] *** Quits: creedofnecessity (~creedofne@mobile-107-77-199-124.mobile.att.net) (Quit: Client closed)
[18:27:09] *** Joins: BlueFrog (~BlueFrog@user/BlueFrog)
[18:27:19] *** Joins: elnino (~elnino@41.204.228.78)
[18:27:23] *** Joins: MrRed (~MrRed@ec2-35-183-11-46.ca-central-1.compute.amazonaws.com)
[18:27:48] *** Quits: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se) (Ping timeout: 240 seconds)
[18:28:02] <elnino> i am new to python i need a mentor
[18:28:52] <white2> hi
[18:29:03] *** Joins: tieinv (~tieinv@user/tieinv)
[18:29:36] *** Joins: idontneedanick (~idontneed@h-85-24-184-105.A189.priv.bahnhof.se)
[18:30:05] <white2> the way described in Topic may be classic
[18:30:57] *** Quits: flower_ (~debian@46.244.61.4) (Ping timeout: 256 seconds)
[18:31:01] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[18:31:16] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[18:31:28] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[18:31:44] *** Joins: hwdyki (~hwdyki@user/hwdyki)
[18:32:02] <nedbat> elnino: we can help if you have questions
[18:33:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[18:33:24] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:34:01] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:34:33] *** Parts: had3so0 (~had@user/had3so0) ()
[18:35:51] *** Quits: Ergo^ (~ergo@91.238.59.144) (Read error: Connection reset by peer)
[18:36:15] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[18:36:26] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-9894-33e6-e807-a3ac.res6.spectrum.com)
[18:37:38] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[18:37:44] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[18:39:00] *** Quits: AnimalFarmPig (~quassel@user/animalfarmpig) (Ping timeout: 240 seconds)
[18:39:05] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:40:39] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:43:17] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[18:43:22] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 272 seconds)
[18:44:36] *** Joins: Ergo^ (~ergo@91.238.59.144)
[18:45:18] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[18:45:21] *** Quits: Guest6511 (~Guest65@2603-6010-4903-d184-0218-d705-fa62-f556.res6.spectrum.com) (Quit: Client closed)
[18:46:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:46:56] *** Quits: m1dnight (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[18:47:13] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[18:47:16] *** Joins: martti (~martti@46-126-48-136.dynamic.hispeed.ch)
[18:47:39] *** Quits: angelacrust (~angelacru@182.68.142.100) (Quit: Client closed)
[18:48:02] *** Joins: kts_ (~kts@103.73.237.80)
[18:48:04] *** Joins: m1dnight (~christoph@78-22-9-5.access.telenet.be)
[18:48:14] *** Quits: kts (~kts@103.73.237.14) (Ping timeout: 256 seconds)
[18:48:16] *** Joins: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr)
[18:48:45] *** Quits: kts_ (~kts@103.73.237.80) (Client Quit)
[18:49:59] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:50:17] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[18:50:36] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:50:36] *** Parts: tieinv (~tieinv@user/tieinv) (Gone!)
[18:52:04] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[18:52:18] *** Quits: zaquest (~notzaques@5.130.79.72) (Ping timeout: 250 seconds)
[18:52:35] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[18:53:28] *** Joins: AnimalFarmPig (~quassel@user/animalfarmpig)
[18:53:29] *** Quits: Em (~em@user/emnode) (Remote host closed the connection)
[18:54:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[18:54:49] *** Quits: CombatVet (~c4@user/combatvet) (Write error: Connection reset by peer)
[18:54:49] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Write error: Broken pipe)
[18:54:49] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[18:54:49] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Read error: Connection reset by peer)
[18:54:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Write error: Connection reset by peer)
[18:54:49] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Write error: Connection reset by peer)
[18:54:49] *** Quits: bindu (~bindu@user/bindu) (Write error: Connection reset by peer)
[18:54:53] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[18:55:08] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:55:10] *** Joins: spithash (~spithash@user/spithash)
[18:55:11] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[18:55:14] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:55:15] *** Joins: bindu (~bindu@user/bindu)
[18:55:26] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:55:49] *** Joins: akk (~akk@75-161-95-245.albq.qwest.net)
[18:55:57] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:56:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:56:47] *** Quits: qlixed (~qlixed@181.44.129.13) (Remote host closed the connection)
[18:56:48] *** Joins: kts (~kts@103.73.237.80)
[18:58:27] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:58:48] *** Quits: BlueFrog (~BlueFrog@user/BlueFrog) (Read error: Connection reset by peer)
[18:58:48] *** Joins: junebug (~junebug@2600:1700:3db0:2540:240a:eb7a:6461:3400)
[18:59:33] *** Joins: nehsou^ (~nehsou@50.233.120.162)
[18:59:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:59:46] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:dfb2:bef1:214a:e046) (Quit: pvergain)
[19:01:32] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[19:01:47] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:01:49] <jinsun> nedbat: I mean it isn't bad specially in python where exceptions are thrown for everything so you have to learn to deal with them anyway, but sometimes I feel it would be nicer if stuff like https://pypi.org/project/result was built-in and encouraged more than exceptions, then my editor can tell if I have not dealt with potential failures, instead of finding out at runtime
[19:02:01] *** Joins: bindu (~bindu@user/bindu)
[19:03:28] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:04:01] *** Joins: quartz (~quartz@user/quartz)
[19:04:17] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:04:23] *** Quits: martti (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[19:04:25] *** Joins: zaquest (~notzaques@5.130.79.72)
[19:05:04] <quartz> Hello. Is it possible to have multiple return statements like in lines 83 and 84 of this code? https://bpa.st/WZ6A
[19:05:25] <quartz> I'm trying to return both variables "sales" and "clients" within a single function.
[19:05:34] <quartz> Sorry, new to python.
[19:05:35] *** Joins: martti (~martti@46-126-48-136.dynamic.hispeed.ch)
[19:05:49] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[19:05:51] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[19:06:03] <grym> quartz: no, but you can return jsonify(data = sales),jsonify(data = clients)
[19:06:08] <grym> (which is a tuple)
[19:06:10] <tykling> you can only return once but you could return a tuple with both values as
[19:06:11] <tykling> right
[19:06:12] <akk> quartz: It's common to return two values, like: return sales, clients
[19:06:25] *** Quits: rakoon (~rakoon@80-100-166-138.ip.xs4all.nl) (Ping timeout: 256 seconds)
[19:06:30] <white2> no, the 2nd return is useless
[19:06:39] <grym> but you probably want to return jsonify(data = [sales, clients]) or something ?
[19:06:49] <grym> then you get one json thing back, which is a list of two things
[19:07:58] <bjs> grym: quartz: yeah you'll probably want one big response that "contains" both the parts. Like returning jsonify({'sales': sales, 'clients': clients})  or something
[19:08:16] *** Joins: nadio (ice@starlight.iextreme.org)
[19:08:19] <quartz> grym: Thats a good suggestion, I'm actually not sure
[19:08:21] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:51fc:97ba:a6e:6a15)
[19:08:36] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[19:08:46] <white2> u may do this:try:ENTERa=b(c)ENTERreturn aENTERexceptENTERreturn d(e)
[19:08:48] <bjs> but the other end will have to understand that format
[19:09:01] <bjs> white2: I'm not sure that does what they want.
[19:09:07] <white2> search 'try' in python
[19:09:24] <quartz> bjs: Sorry, I'm a bit confused on the syntax of jsonify({'sales': sales, 'clients': clients})
[19:09:35] <quartz> Is it a hashtable?
[19:09:52] <bjs> quartz: yes, Python calls them dictionaries.
[19:10:06] <CrtxReavr> I take it 'jsonify' is your own function?
[19:10:07] <bjs> quartz: like you created on line 74 `new_sale_entry`
[19:10:10] <bjs> CrtxReavr: it's flask's jsonify
[19:10:11] <bjs> I assume
[19:10:21] <quartz> CrtxReavr: No, it's flask
[19:10:21] <CrtxReavr> bjs, the horror.
[19:10:31] <CrtxReavr> How is it different than json.dumps()?
[19:10:34] *** Parts: MrRed (~MrRed@ec2-35-183-11-46.ca-central-1.compute.amazonaws.com) (WeeChat 2.3)
[19:10:35] <bjs> CrtxReavr: I think it's just json.dumps + a wrapper to get a flask Response object with the right mimetype
[19:10:57] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:11:07] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[19:11:15] *** Joins: mickey8 (~user@user/mickey)
[19:11:21] *** Parts: lxwulf (~lxwulf@user/lxwulf) ()
[19:12:05] <quartz> I'm not sure if I should return BOTH clients and sales as one JSON, or leave them seperate somehow. They are seperate variables after all.
[19:12:10] <bjs> quartz: in the end when you "GET /add_name" you're going to get back *one* big response blob (in this case, some JSON).
[19:12:54] *** Quits: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6) (Quit: WeeChat 3.4)
[19:13:03] *** Joins: Kohe (~Kohe@77.49.10.102.dsl.dyn.forthnet.gr)
[19:13:13] <bjs> quartz: perhaps you want add_name to not return all the sales, but to have another route like "GET /all_sales" or something?
[19:13:43] <bjs> and instead add_name itself can just return a success/failure response
[19:13:44] *** Quits: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net) (Ping timeout: 256 seconds)
[19:14:04] <quartz> bjs: Hmmm
[19:14:09] <quartz> Wow these are all good suggestions
[19:14:33] <quartz> My assignment says to return sales and clients.
[19:14:45] <quartz> I think they mean to return them as individual variables, although I'm not sure.
[19:14:45] <bjs> quartz: assignment?
[19:15:14] <quartz> bjs: I purchased a course on web development so I can learn basic front end stuff
[19:15:16] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 250 seconds)
[19:15:16] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 250 seconds)
[19:15:27] <bjs> quartz: "return as individual variables" doesn't really make sense.  Like was said earlier a function can only have 1 return value,  and a flask response is just 1 blob of data
[19:15:29] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[19:15:31] <quartz> Just doing it to learn independently and teach me some new skillset
[19:16:08] <quartz> bjs: I see.
[19:16:39] <quartz> bjs: So, jsonify({'sales': sales, 'clients': clients})  is not the same thing as: return jsonify(data = sales), jsonify(data = clients) ?
[19:16:50] <bjs> quartz: no
[19:17:05] <bjs> quartz: in Python `return x, y` is the same as `return (x, y)` and `(_, _)` is a tuple with 2 things in it
[19:18:07] <quartz> bjs: Ahh OK. I probably don't want a tuple then.
[19:18:18] *** Joins: PurpleBooger (~purpleboo@2600:6c5d:4600:1e76:501:c69e:9615:f10)
[19:18:37] <grym> probably not
[19:18:59] <grym> returning a jsonified dict is what i would likely choose in this situation
[19:19:55] <quartz> Yeah that makes sense.
[19:19:59] <quartz> bjs: Thank you for your help.
[19:20:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:20:14] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:20:19] *** Quits: kts (~kts@103.73.237.80) (Quit: Konversation terminated!)
[19:20:28] *** Quits: phylaz (~phylaz@82.51-174-55.customer.lyse.net) (Ping timeout: 250 seconds)
[19:20:32] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[19:20:54] *** Joins: beli6147 (~Thunderbi@174.128.60.162)
[19:22:23] *** Joins: davor (~davor@user/davor)
[19:23:58] *** Joins: vladoski (~vladoski@2001:b07:add:d406:1a2f:b362:5818:b84f)
[19:24:36] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[19:24:47] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[19:25:00] <akk> +1 for returning a jsonified dict
[19:26:21] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:87b2:598e:5ed5:8ca9) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:26:37] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:26:46] *** Joins: xkuru (~xkuru@user/xkuru)
[19:27:11] <amo> is there a way to unpack a dict?
[19:27:54] <amo> i'm guessing i have to sort the items
[19:27:57] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:28:05] <grym>  **
[19:28:17] <amo> what :p
[19:28:27] <CrtxReavr> amo, depends what you mean.
[19:28:35] <CrtxReavr> dict.keys() will return the keys.
[19:28:44] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:87b2:598e:5ed5:8ca9)
[19:28:45] <CrtxReavr> dict.values() will return the values.
[19:28:47] <amo> i mean just what it sounds like - tuple unpacking but for dicts
[19:28:53] <grym> amo: right, **thedict
[19:28:57] <CrtxReavr> dict.items() will return, both in a different format.
[19:29:05] <amo>  a, b = **test()
[19:29:05] <amo>            ^
[19:29:05] <amo> SyntaxError: invalid syntax
[19:29:16] <grym> does test return a dictx?
[19:29:19] <amo> yup
[19:29:31] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[19:29:41] <grym> i don't think that's valid syntax anyway
[19:29:41] <jinsun> only works inside function calls and dict literal syntax I think
[19:29:49] <amo> def test():
[19:29:49] <amo>     return {"a":2, "b": 3}
[19:29:54] <jinsun> not in assignments
[19:29:58] <grym> x,y = *(1,2) is also a syntax error
[19:30:15] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[19:30:29] *** Joins: mrwick (~mrwick@user/mrwick)
[19:30:48] <jinsun> what do you want the assignment to do? if you just want the values, you can just do a, b = the_dict.values()
[19:30:52] *** Joins: revolve (~u0_a227@82-132-238-198.dab.02.net)
[19:31:01] <jinsun> because .values() is iterable
[19:31:09] *** Quits: beli6147 (~Thunderbi@174.128.60.162) (Quit: beli6147)
[19:31:22] <grym> ^^
[19:31:38] <amo> but order isn't guaranteed :s
[19:31:46] <bookworm> it is actually
[19:31:53] <jinsun> it is insertion order
[19:32:00] <bookworm> insertion order since 3.6 iirc
[19:32:13] <jinsun> if you want sorted you can put it inside sorted() too
[19:32:16] <amo> yeah, but insertion order isn't guaranteed, i don't have control over the sqlite
[19:32:42] <grym> amo: then sort it
[19:32:45] <bookworm> to be honest, unpacking a dict like that seems pointless
[19:32:53] *** _subopt is now known as subopt
[19:33:07] <bookworm> just use the dict with the literal values, you ought to know the keys right?
[19:33:13] *** Joins: spithash (~spithash@user/spithash)
[19:33:52] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[19:34:00] *** Joins: ub (~Thunderbi@p200300ecdf3be9f1a9bca37dd282c10f.dip0.t-ipconnect.de)
[19:34:02] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:34:20] *** Quits: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[19:34:35] <amo> i don't want to work with the dict
[19:34:42] *** Quits: ubert (~Thunderbi@86.107.21.238) (Ping timeout: 256 seconds)
[19:34:42] *** ub is now known as ubert
[19:34:52] *** Quits: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) (Quit: Leaving.)
[19:35:00] <bjs> amo: what version of Python are you using?
[19:35:11] <jinsun> the good solution to these problems is pydantic usually
[19:35:16] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[19:35:17] <bjs> amo: in 3.10+ you have match https://www.python.org/dev/peps/pep-0636/
[19:35:23] <amo> 39
[19:35:52] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[19:35:59] <quartz> Sorry to ask again, but I'm having some issues writing a python function that will iterate through the "sales" dict / JSON thingy and delete a sale that corresponds to a specific id. This is all I have at line 86: https://bpa.st/WM2A
[19:36:14] <bjs> amo: before 3.10 the easiest way to "unpack" is probably `key1, key2 = d["key1"], d["key2"]` :(
[19:36:42] <quartz> I know sales is an object and must have some function for deleting, but I'm not sure how that can be done, because I'm not sure what type sales is.
[19:37:06] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[19:37:27] <jinsun> quartz: type() can tell you the type
[19:37:41] <bjs> quartz: sales is defined on line 8, `sales = [`  so it's a list
[19:37:54] <quartz> Oh :)
[19:37:54] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[19:38:02] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[19:38:11] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[19:38:32] *** Quits: marcello42 (~mp@p200300dfaf10fe015baf6eed7f4ef68f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:38:35] *** Joins: ionelmc (uid20175@id-20175.helmsley.irccloud.com)
[19:38:57] <quartz> bjs: So sales is a list of dicts?
[19:39:03] <bjs> quartz: yes.
[19:41:09] *** Joins: et_ (~et@user/et)
[19:41:11] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:41:17] <quartz> The confusing part is that I feel I can't just use sales.remove(id) or something like that because it's a list of dictionary values
[19:41:48] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[19:41:48] *** et_ is now known as et
[19:41:50] *** Quits: akelly (24aca7a63b@2604:bf00:561:2000::152) (Remote host closed the connection)
[19:41:50] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (Remote host closed the connection)
[19:41:50] *** Quits: nhanb (522d4a25ea@2604:bf00:561:2000::13b) (Remote host closed the connection)
[19:41:50] *** Quits: seanh (1a2a07ea57@2604:bf00:561:2000::201) (Remote host closed the connection)
[19:41:50] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[19:41:50] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Remote host closed the connection)
[19:41:50] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (Remote host closed the connection)
[19:41:50] *** Quits: lew (c292bc13c9@2604:bf00:561:2000::27e) (Remote host closed the connection)
[19:41:50] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Remote host closed the connection)
[19:41:50] *** Quits: shrysr (4e0b42ae98@user/shrysr) (Remote host closed the connection)
[19:41:50] *** Quits: Robin_Jadoul (afe6b98926@2604:bf00:561:2000::18e) (Remote host closed the connection)
[19:41:50] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (Remote host closed the connection)
[19:41:50] *** Quits: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5) (Remote host closed the connection)
[19:41:50] *** Quits: sliwkr (1aac56ad72@2604:bf00:561:2000::251) (Remote host closed the connection)
[19:41:50] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (Remote host closed the connection)
[19:41:51] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (Remote host closed the connection)
[19:41:51] *** Quits: srhm (dda3db84b5@user/srhm) (Remote host closed the connection)
[19:41:51] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Remote host closed the connection)
[19:41:55] *** Quits: ztrawhcse (3d1f427b6a@archlinux/bugwrangler/eschwartz) (Remote host closed the connection)
[19:42:17] *** Joins: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it)
[19:42:30] *** Joins: nhanb (522d4a25ea@2604:bf00:561:2000::13b)
[19:42:31] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[19:42:32] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[19:42:32] *** Joins: sliwkr (1aac56ad72@2604:bf00:561:2000::251)
[19:42:32] *** Joins: Robin_Jadoul (afe6b98926@2604:bf00:561:2000::18e)
[19:42:32] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[19:42:33] *** Joins: seanh (1a2a07ea57@2604:bf00:561:2000::201)
[19:42:38] *** Joins: akelly (24aca7a63b@2604:bf00:561:2000::152)
[19:42:38] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[19:42:41] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[19:42:44] *** Joins: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5)
[19:42:44] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[19:42:50] *** Joins: shrysr (4e0b42ae98@user/shrysr)
[19:42:50] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[19:42:54] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[19:42:54] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[19:42:54] *** Joins: lew (c292bc13c9@2604:bf00:561:2000::27e)
[19:42:54] *** Joins: ztrawhcse (3d1f427b6a@archlinux/bugwrangler/eschwartz)
[19:42:56] *** Joins: srhm (dda3db84b5@user/srhm)
[19:44:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:44:55] <nedbat> i have async code inside asyncio.run(...). I wrapped a try/finally around that. When I hit ^C, the program ends, but my finally clause doesn't run.  I'm an asyncio newb. How do I run something at the end of the program?
[19:45:09] *** Joins: envex (~envex@cpe-173-91-189-33.neo.res.rr.com)
[19:47:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:47:48] *** Quits: davor (~davor@user/davor) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:49:14] <quartz> Sorry to ask again, but does it look like I properly implemented the delete_sales function on line 86? Just a sanity check
[19:49:43] *** Joins: davor (~davor@user/davor)
[19:50:18] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:50:38] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[19:50:56] <Wooble> nedbat: works for me; I'm pretty sure finally *should* run whether asyncio is involved or not. :/
[19:51:08] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[19:51:14] <nedbat> Wooble: oh, sorry, i found out I put the code in the wrong file! It works for me too :)
[19:51:25] <Wooble> well that would do it :)
[19:52:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[19:52:28] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[19:54:21] <nedbat> Wooble: i have no idea how vim found the copy of the file in the ./build directory!
[19:55:35] <Wooble> sometimes your tools are smarter than you wanted :)
[19:55:48] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:56:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:56:12] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[19:57:18] <enrh> If I want to add a bunch of values to Literal, can I list them in a var somewhere else? Instead of Literal['15min', '1hour', '1day'] I could do Literal[SomeClassOrSomething]?
[19:57:46] *** Joins: superaga (~superaga@mob-194-230-155-117.cgn.sunrise.net)
[19:58:55] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:58:56] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[19:58:59] *** Joins: nomic (~nomic@185.198.243.172)
[19:59:24] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 240 seconds)
[20:00:00] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 272 seconds)
[20:00:31] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[20:00:59] *** Joins: kts (~kts@103.73.237.251)
[20:02:02] *** Quits: vladoski (~vladoski@2001:b07:add:d406:1a2f:b362:5818:b84f) (Ping timeout: 240 seconds)
[20:02:02] *** Joins: darksun (~darksun@user/darksun)
[20:02:52] *** Joins: bluedust_ (~bluedust@static-198-54-133-121.cust.tzulo.com)
[20:03:20] *** Joins: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de)
[20:03:54] *** Joins: zebrag (~chris@user/zebrag)
[20:04:27] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[20:04:28] *** Joins: Santzes (~Santzes@2400:8901::f03c:92ff:fe49:47a6)
[20:05:07] *** Joins: monchi (~joints@143.198.92.132)
[20:05:18] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 256 seconds)
[20:06:24] *** Quits: bluedust (~bluedust@103.165.167.221) (Ping timeout: 250 seconds)
[20:06:32] <chronon> I am for-looping over a zip of two generator functions, but it seems that the for loop exits when the first generator runs out. How can I check whether and which of the generators still has values without using any and without causing an exception to be raised?
[20:07:27] <bjs> chronon: you can use itertools.zip_longest
[20:07:37] *** Quits: thevar1able (~textual@46.39.45.122) (Quit: thevar1able)
[20:07:56] <bjs> that will let you "fill" the other value with some value you can check for to see if it has ended (e.g. None)
[20:09:11] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:09:44] <chronon> Interesting, I will check that out. So are yo usaying there's no direct way to check a simple generator such as by calling a method on it, eg something lie "if not gen.eof()": etc?
[20:10:12] <grym> there's also zip(..., strict=True) in 3.10+
[20:10:23] <bjs> grym: "without causing an exception to be raised"
[20:10:29] <grym> oh whoops
[20:10:33] <phy1729> You can't do it with zip. Consider https://bpa.st/EK2A
[20:10:54] *** Quits: NealRame (~a@122-199-48-238.ip4.superloop.com) (Remote host closed the connection)
[20:10:59] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:11:02] *** Joins: backes (~backes@ict-networks-195-176-112-251.fwd-v4.ethz.ch)
[20:11:09] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[20:11:17] <bjs> chronon: well yes there is no check for eof on a generator, but zip() wouldn't need it (since it knows anyway that it reached the end) the issue is that zip can't zip anything once it reaches the end, you just need another "zip-like" function that continues anyway
[20:11:22] <bjs> and that's what zip_longest does
[20:11:25] <Wooble> chronon: in general you can't really check if a generator has another value without trying to get one and seeing if it raises StopIteration
[20:11:51] <backes> hey, there is this function: https://docs.python.org/3/library/os.html#os.urandom but I can't find the implementation in https://github.com/python/cpython/blob/3.10/Lib/os.py  Where can I find it?
[20:11:53] *** Joins: zeden (~zeden@user/zeden)
[20:12:05] <phy1729> But that doesn't work if you have two iterators and the first is one "longer" than the second
[20:12:11] <grym> and generators can kind of continue indefinitely, in general
[20:12:59] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:13:00] <chronon> Ok, so https://bpa.st/EK2A looks like it would be workable, if I were to memorise the value read and then shove it back in somehow.
[20:13:07] <Wooble> backes: https://github.com/python/cpython/blob/main/Modules/posixmodule.c#L13051 (for posix)
[20:13:13] <jinsun> backes: see line 55 and line 75
[20:13:13] <bjs> backes: it's coming from the `from posix import *` line (or whatever line is appropriate for your platform)
[20:13:20] *** Joins: sagax (~sagax_nb@user/sagax)
[20:13:21] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[20:13:30] <bjs> backes: and posix comes from posixmodule.c in Modules/  (since it's built-in)
[20:13:32] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[20:13:47] <bjs> yeah Wooble has the link right to it ;)
[20:14:07] <chronon> bjs, you idea of implementing my own zip-alike is a good one.
[20:14:14] *** Joins: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr)
[20:14:17] <bjs> chronon: no itertools.zip_longest
[20:14:20] <bjs> just use it
[20:14:21] <backes> oh, thats why I couldn't find it with the search. The function name is different. Thanks
[20:14:22] *** Joins: bluedust (~bluedust@103.165.167.221)
[20:14:32] <bjs> chronon: https://docs.python.org/3/library/itertools.html#itertools.zip_longest
[20:14:44] <phy1729> chronon: the point of that link was to say do NOT use zip; use zip_longest
[20:14:45] <chronon> Yeah, probably best to use the library.
[20:15:00] <chronon> Ok,, thanks for the guidance.
[20:15:09] *** Joins: NealRame (~a@122-199-48-238.ip4.superloop.com)
[20:16:48] <supakeen> ChrisWarrick: I'm working on packaging pinnwand for fedora; and as collateral I'll be packaging pygments_better_html :)
[20:17:22] *** Joins: flower_ (~debian@46.244.61.4)
[20:17:30] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[20:17:30] *** Quits: bluedust_ (~bluedust@static-198-54-133-121.cust.tzulo.com) (Ping timeout: 260 seconds)
[20:17:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:18:37] *** Quits: Guest51 (~Guest51@161.8.242.212) (Ping timeout: 256 seconds)
[20:20:20] <jinsun> enrh: depends on what you want to do with the annotation, for runtime inspection, Literal[some_tuple] will work, for type checking that won't work, but you can TypeAlias the whole thing
[20:21:14] *** LordKalma_ is now known as LordKalma
[20:22:11] *** Quits: Taeyeon (~taeyeon@2a02:6d40:35ab:c800:d29b:7f99:6d94:9d60) (Quit: Leaving)
[20:22:33] *** Joins: Enitin (~Enitin@82.102.22.86)
[20:22:46] <backes> I think that the documentation is wrong: https://docs.python.org/3/library/os.html#os.urandom It says that on windows it uses CryptGenRandom, but the source code uses BCryptGenRandom : https://github.com/python/cpython/blob/main/Python/bootstrap_hash.c#L54 . CryptGenRandom is deprecated: https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom
[20:23:13] *** Joins: The_Loko (~The_Loko@86.127.255.193)
[20:24:00] <enrh> jinsun, okay I'll try a TypeAlias, thank you!
[20:25:55] *** Quits: superaga (~superaga@mob-194-230-155-117.cgn.sunrise.net) (Quit: Client closed)
[20:26:11] *** Joins: Barones (~Barones@user/Barones)
[20:26:28] <jinsun> backes: https://docs.python.org/3.11/library/os.html#os.urandom
[20:26:35] <jinsun> it is only in 3.11
[20:26:46] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[20:26:47] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:c91d:95da:a39d:f68c) (Quit: Leaving)
[20:26:48] <jinsun> 3 points to 3.10 for now
[20:27:19] <backes> oh
[20:27:38] <backes> indeed, on the 3.10 branch it still uses the old function. Thanks
[20:28:04] *** Quits: roxfan (~roxfan@2a02:a03f:a2be:4f00:b54c:f832:91af:f6f2) (Ping timeout: 250 seconds)
[20:28:11] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Remote host closed the connection)
[20:28:11] *** Quits: ztrawhcse (3d1f427b6a@archlinux/bugwrangler/eschwartz) (Remote host closed the connection)
[20:28:11] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[20:28:11] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (Remote host closed the connection)
[20:28:11] *** Quits: akelly (24aca7a63b@2604:bf00:561:2000::152) (Remote host closed the connection)
[20:28:12] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (Remote host closed the connection)
[20:28:12] *** Quits: shrysr (4e0b42ae98@user/shrysr) (Remote host closed the connection)
[20:28:12] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (Remote host closed the connection)
[20:28:12] *** Quits: seanh (1a2a07ea57@2604:bf00:561:2000::201) (Remote host closed the connection)
[20:28:12] *** Quits: lew (c292bc13c9@2604:bf00:561:2000::27e) (Remote host closed the connection)
[20:28:12] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (Remote host closed the connection)
[20:28:12] *** Quits: nhanb (522d4a25ea@2604:bf00:561:2000::13b) (Remote host closed the connection)
[20:28:12] *** Quits: Robin_Jadoul (afe6b98926@2604:bf00:561:2000::18e) (Remote host closed the connection)
[20:28:12] *** Quits: sliwkr (1aac56ad72@2604:bf00:561:2000::251) (Remote host closed the connection)
[20:28:12] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (Remote host closed the connection)
[20:28:12] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (Remote host closed the connection)
[20:28:12] *** Quits: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5) (Remote host closed the connection)
[20:28:17] *** Quits: srhm (dda3db84b5@user/srhm) (Remote host closed the connection)
[20:28:17] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (Remote host closed the connection)
[20:29:11] *** Joins: monchi_ (~joints@143.198.92.132)
[20:29:29] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[20:29:29] *** Joins: Enitin (~Enitin@82.102.22.85)
[20:29:51] *** Quits: backes (~backes@ict-networks-195-176-112-251.fwd-v4.ethz.ch) (Quit: leaving)
[20:30:30] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[20:31:02] *** Quits: sreve_ (~quassel@p549d70f4.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[20:31:16] *** Joins: sreve (~quassel@p549d70f4.dip0.t-ipconnect.de)
[20:32:13] *** Quits: elnino (~elnino@41.204.228.78) (Ping timeout: 256 seconds)
[20:32:18] *** Quits: michele (~eraser@user/michele) (Quit: restart)
[20:33:49] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[20:34:04] *** monchi_ is now known as monchi
[20:34:06] *** Joins: michele (~eraser@user/michele)
[20:34:15] *** Joins: nhanb (522d4a25ea@2604:bf00:561:2000::13b)
[20:34:15] *** Joins: Robin_Jadoul (afe6b98926@2604:bf00:561:2000::18e)
[20:34:16] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[20:34:16] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[20:34:16] *** Joins: Schnouki (e7aa4cfb39@2604:bf00:561:2000::178)
[20:34:16] *** Joins: seanh (1a2a07ea57@2604:bf00:561:2000::201)
[20:34:16] *** Joins: sliwkr (1aac56ad72@2604:bf00:561:2000::251)
[20:34:17] *** Quits: Schnouki (e7aa4cfb39@2604:bf00:561:2000::178) (Changing host)
[20:34:17] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[20:34:18] *** Joins: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5)
[20:34:19] *** Joins: shrysr (4e0b42ae98@user/shrysr)
[20:34:26] *** Joins: lew (c292bc13c9@2604:bf00:561:2000::27e)
[20:34:30] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[20:34:31] *** Joins: akelly (24aca7a63b@2604:bf00:561:2000::152)
[20:34:31] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[20:34:32] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[20:34:35] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[20:34:37] *** Joins: ztrawhcse (3d1f427b6a@archlinux/bugwrangler/eschwartz)
[20:34:37] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[20:34:39] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[20:34:40] *** Joins: srhm (dda3db84b5@user/srhm)
[20:34:49] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:34:52] *** Joins: bindu (~bindu@user/bindu)
[20:35:13] *** Joins: randombrain (~rbrain@user/randombrain)
[20:35:31] *** Quits: kts (~kts@103.73.237.251) (Quit: Konversation terminated!)
[20:36:20] *** Joins: wilk_ (~wilk@user/wilk)
[20:36:45] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 256 seconds)
[20:36:51] *** wilk_ is now known as wilk
[20:37:18] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[20:37:20] <chronon> What is the current situation with Python multithreading? I've not used it but I heard there was some kind of limitation to do with a global interpreter lock. What's the problem exactly?
[20:38:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[20:38:08] <ali1234> there's a global interpreter lock
[20:38:17] <ali1234> that's it. that's the entire issue
[20:38:23] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[20:38:28] <chronon> What is it for?
[20:38:36] <chronon> What's the downside?
[20:38:50] <ali1234> preventing multiple threads from accessing the same object at the same time
[20:39:06] <deniska> from accessing all the objects at the same time, it's global after all
[20:39:08] <ali1234> the downside is it does this by only allowing one thread to hold the global lock
[20:39:09] *** Joins: sobkas (~sobkas@95.175.17.217)
[20:39:21] <ali1234> it does it this way because it is faster than having a mutex on every object
[20:40:07] <ali1234> what this means in practice is that multithreading is almost entirely useless for making python code run faster
[20:40:09] <chronon> Ok, so the limitation is that you cannot lock a specific object for synchronising access to it separately from locking any other object. It's a lock everything at once kind of thing. Right?
[20:40:16] *** Joins: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr)
[20:41:10] <ali1234> yes
[20:41:33] <chronon> I do not really see why Python could not add a mechanism for locking individual objects. Why has the current situation remained for so long?
[20:41:38] <deniska> chronon: effectively it means that if code deals with python objects (any python bytecode, and some of native code extensions) only a single core worth of CPU works on it
[20:41:49] <ali1234> because guido wouldn't accept any alternative that was slower
[20:41:53] <deniska> chronon: adding a lock per object makes a single threaded case slower
[20:41:53] <Yhg1s> chronon: because it's much, much more efficient than fine-grained locks.
[20:42:01] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[20:42:16] <Yhg1s> (lots of things *are* parallel when using threads, though.)
[20:42:51] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[20:43:10] <chronon> Is the GIL basically handled tranparrently by the Python runtime? So that threads can run simultaneously without consciously having to deal with mutexes of any kind?
[20:43:16] <ApostleInTriumph> Hello. I've a dict of dict. in the inner dict, each key has a single value. how do i find the combination of keys (inner + outer) that corresponds to the smallest value?
[20:43:39] <ali1234> chronon: pretty much yes, until you start writing C extensions to avoid it
[20:43:56] <Yhg1s> chronon: not really, no. You still have to deal with locks for integrity of your own shared state.
[20:44:00] <deniska> chronon: if you share state between threads, you still have to use synchronization mechanisms
[20:44:02] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Quit: WeeChat 2.8)
[20:44:10] <deniska> chronon: GIL protects python's state, not the state of your program
[20:44:10] <chronon> And what does Yhg1s mean by "lots of things *are* parallel"? Such as?
[20:44:13] <ali1234> yeah that is true if you have compound objects
[20:44:54] <chronon> Right, compound objects.
[20:44:57] <Yhg1s> chronon: pretty much all blocking operations.
[20:44:58] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[20:45:28] <chronon> Hmmm, ok, I think I get it.
[20:45:34] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:46:19] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:8a6:a8d3:62c4:7875)
[20:46:51] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:46:55] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[20:47:17] *** Quits: dreamon (~dreamon@ppp-88-217-74-38.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[20:47:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:47:55] *** Joins: chmykh (~chmykh@mm-135-47-121-178.gomel.dynamic.pppoe.byfly.by)
[20:48:02] *** Joins: bahamas (~lucian@84.232.140.52)
[20:48:10] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:48:16] <chronon> There appear to be a number of different ways to do multithreading. Which is the simplest and currently blessed Python3ish way to do it? (so that I can go read up on it)
[20:48:49] <ali1234> it depends what you want to gain from threads
[20:48:58] *** Quits: domicron (~domicron@gateway/tor-sasl/domicron) (Remote host closed the connection)
[20:49:06] *** Quits: jdmark (~jdmark@user/jdmark) (Read error: Connection reset by peer)
[20:49:19] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[20:49:21] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:49:24] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 272 seconds)
[20:49:40] <chronon> Parallel operatinos. In particular, some that necessarily have to block waiting for input, while another is running a process updating the screen.
[20:49:44] *** Joins: domicron (~domicron@gateway/tor-sasl/domicron)
[20:50:10] <ApostleInTriumph> Hello. I've a dict of dict. in the inner dict, each key has a single value. how do i find the combination of keys (inner + outer) that corresponds to the smallest value?
[20:50:15] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 240 seconds)
[20:50:27] *** Joins: siege (~obriencj@bouncer.preoccupied.net)
[20:50:41] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:3027:99e6:c0d6:7e32) (Ping timeout: 256 seconds)
[20:50:46] <jinsun> ApostleInTriumph: `min(((k1, k2, v2) for k1, v1 in dd.items() for k2, v2 in v1.items()), key=lambda x: x[2])` will give you (inner, outer, value), where dd is your dict of dict
[20:50:56] <ali1234> chronon: the current way people do that is with one of the async libraries which basically hide threads in a layer of abstraction
[20:51:00] <ApostleInTriumph> ah
[20:51:00] <chronon> ApostleInTriumph, can't you just use a nexted loop of the keys and memorise the smallest value seen?
[20:51:05] <ApostleInTriumph> i exchanged dd and v1
[20:51:15] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:51:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:51:25] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:51:30] <chronon> "One of" the async libraries?
[20:51:34] <ali1234> (or sometimes they don't use threads at all)
[20:51:41] <ali1234> yeah there's like four different ones
[20:52:03] <ApostleInTriumph> jinsun thanks
[20:52:06] <ali1234> the stdlib one, trio, twisted, and the other one
[20:52:22] <chronon> I have in mind that I will have a simulation running updating the screen, and a separate thread waiting for input that would inject a change into the simulation.
[20:52:26] <ali1234> everyone seems to hate the stdlib one
[20:53:27] <ali1234> i dunno. i only have experience with the other type of multithreading, where the goal is to run CPU intensive tasks on all CPUs at the same time
[20:53:49] <chronon> Fewer dependencies is always a good thing, don't want to burden users with finding and install additional modules. Is the stdlib async module one of the batteries included?
[20:53:51] *** Quits: duds- (~duds-@user/duds) (Ping timeout: 272 seconds)
[20:54:23] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[20:54:28] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 272 seconds)
[20:55:06] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[20:55:08] *** Joins: dme86 (~dan@user/dan86)
[20:55:32] *** Quits: ubert (~Thunderbi@p200300ecdf3be9f1a9bca37dd282c10f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:55:52] *** Joins: ubert (~Thunderbi@p200300ecdf3be9f1a9bca37dd282c10f.dip0.t-ipconnect.de)
[20:55:52] <bahamas> chronon: packages in the stdlib come with python, yes
[20:55:54] <chronon> import async gives me a "SyntaxError"!! Really? A syntax error?
[20:56:05] <ali1234> async is a keyword
[20:56:20] *** Joins: edge (~edge@111.92.81.133)
[20:56:21] <chronon> Oh.
[20:56:29] <chronon> What is the module I need?
[20:56:34] <bjs> chronon: did you mean asyncio ?
[20:56:35] *** Joins: Wh0 (~V@103.249.233.12)
[20:56:36] <ali1234> asyncio maybe
[20:56:42] <chronon> Ah, ok.
[20:56:47] <chronon> Thanks :-)
[20:56:55] <ali1234> beware that async python makes very little sense if you are familiar with threads
[20:57:09] <chronon> Is threads a different thing?
[20:57:10] <ali1234> it is a completely different way of working
[20:57:19] <ali1234> it is a higher level of abstraction
[20:57:20] <bjs> chronon: yes, threads are a different thing
[20:57:31] <bjs> a similar and related thing, but not the same
[20:57:48] <chronon> Ok, so I might want to look into that too. Is it a module called "threads"?
[20:57:54] <bjs> chronon: threading
[20:58:04] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[20:58:18] <chronon> Ok.
[20:58:31] <chronon> Can you briefly characterise the difference for me?
[20:58:45] <ali1234> have you ever done async javascript?
[20:58:51] <ali1234> with promises etc?
[20:58:56] *** Joins: esv (~esv@74.124.178.154)
[20:59:06] <ali1234> it's identical to that except everything has a different name
[20:59:16] *** Joins: duds- (~duds-@user/duds)
[20:59:31] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 245 seconds)
[20:59:33] <chronon> Hehe
[20:59:58] *** Quits: edge (~edge@111.92.81.133) (Client Quit)
[21:00:45] <chronon> I did some multithread code in Java a long time ago, and I've seen the concept of promises in a video about Raku. That doesn't really count as experience though.
[21:01:59] <chronon> I think I shall need some guidance on which approach to choose: asyncio or threading, for my current requirement, which is really just a little bit of parallelism to allow processing to continue while waiting for keyboard input.
[21:02:49] <chronon> Maybe there is a way to poll the keyboard non-blocking to see if there are keys ready to be read in?
[21:03:22] <ali1234> depends what gui library you use
[21:03:23] *** Quits: Dantali0n (~Dantali0n@dantalion.connected.by.freedominter.net) (Ping timeout: 256 seconds)
[21:03:31] <chronon> This would be in a terminal.
[21:03:35] <ali1234> ncurses then
[21:04:31] <chronon> I looked at ncurses and thought it was rather restrictive, and a bit overkill for my purposes. I might just interact with the terminal directly myself.
[21:05:18] *** Joins: spacenautx (~spacenaut@111.92.81.133)
[21:05:45] *** Joins: Dantali0n (~Dantali0n@2a10:3781:15ed::2003)
[21:06:06] <chronon> But I am not aware of a simple Pythonic and portable way to check for the presence of a key waiting in the keyboard buffer. I believe all input is blocking. I would like to be proved wroung though.
[21:06:23] *** Joins: marcello42 (~mp@p200300dfaf10fe015baf6eed7f4ef68f.dip0.t-ipconnect.de)
[21:06:43] <ali1234> ncurses has non-blocking input
[21:06:44] *** Quits: Neopolitan (~tn5421@45.76.61.24) (Quit: The Lounge - https://thelounge.chat)
[21:07:00] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[21:07:33] *** Quits: spacenautx (~spacenaut@111.92.81.133) (Changing host)
[21:07:33] *** Joins: spacenautx (~spacenaut@user/spacenautx)
[21:07:41] <chronon> I did not see that when I looked. Which function are you referring to?
[21:07:42] *** Joins: Neopolitan (~tn5421@45.76.61.24)
[21:08:09] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Client Quit)
[21:08:11] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[21:08:27] *** Joins: edge (~spacenaut@111.92.81.133)
[21:08:50] <ali1234> screen.getch
[21:09:13] <ali1234> you have to set no delay mode first
[21:09:23] <ali1234> then it always returns immediately
[21:09:33] <chronon> Ah, great, thanks.
[21:10:20] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:10:22] <ali1234> anyone ever used csnake?
[21:10:38] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[21:10:45] <ali1234> can it go directly from a numpy array to c code?
[21:11:13] *** Joins: edge (~spacenaut@111.92.81.133)
[21:11:31] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[21:14:36] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[21:15:00] *** Quits: saroy (~Sandipan@43.252.250.104) (Ping timeout: 240 seconds)
[21:15:56] *** Joins: toma (~RubbishPu@node-1w7jr9yhpl489uxzjsc4xjqm3.ipv6.telus.net)
[21:16:16] *** Joins: tobybl (~tobybl@214.242.200.146.dyn.plus.net)
[21:16:37] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:16:51] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[21:19:36] *** Joins: thevar1able (~textual@46.39.45.122)
[21:20:58] *** Quits: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[21:21:00] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[21:21:35] *** Joins: ice99 (~ice9@user/ice9)
[21:21:39] *** Quits: thevar1able (~textual@46.39.45.122) (Client Quit)
[21:21:55] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[21:21:58] *** Joins: spithash_ (~spithash@user/spithash)
[21:23:08] *** Joins: TIMER74 (~TIMER@90.68.87.93)
[21:23:24] *** Quits: revolve (~u0_a227@82-132-238-198.dab.02.net) (Ping timeout: 240 seconds)
[21:23:58] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[21:24:22] *** Joins: ice9 (~ice9@user/ice9)
[21:24:23] *** Quits: avane_ (~avane@fsf/member/avane) (Ping timeout: 250 seconds)
[21:24:45] *** Joins: ub (~Thunderbi@p548c8d84.dip0.t-ipconnect.de)
[21:24:54] *** Quits: ubert (~Thunderbi@p200300ecdf3be9f1a9bca37dd282c10f.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:24:54] *** ub is now known as ubert
[21:24:56] *** Joins: revolve (~u0_a227@cpc100838-bagu15-2-0-cust672.1-3.cable.virginm.net)
[21:25:44] *** Quits: ice99 (~ice9@user/ice9) (Read error: Connection reset by peer)
[21:26:04] *** Joins: thevar1able (~textual@46.39.45.122)
[21:26:23] *** Quits: tWqaq (~tWqaq@240e:389:5d1c:ff00:54c8:40ea:f2d7:4c83) (Quit: Leaving)
[21:26:44] *** Joins: evanextreme (~evan@2604:4080:1000:8150:1cc2:43f9:3edb:f1c0)
[21:27:57] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:28:20] *** Joins: shad (~shad@user/shad)
[21:28:37] *** Quits: TIMER74 (~TIMER@90.68.87.93) (Quit: Client closed)
[21:30:13] *** Quits: XV8 (~XV8@2601:5cb:c001:50::5524) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:27] *** Joins: crashrep (~crashrep@user/crashrep)
[21:30:49] *** Quits: thevar1able (~textual@46.39.45.122) (Client Quit)
[21:30:54] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (Quit: Client closed)
[21:31:29] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 256 seconds)
[21:31:41] *** Joins: XV8 (~XV8@2601:5cb:c001:50::5524)
[21:32:12] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[21:32:36] *** dcaro is now known as dcaro_away
[21:32:50] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[21:33:19] <ChrisWarrick> supakeen: great, thanks for letting me know :)
[21:35:27] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:35:39] *** Joins: thevar1able (~textual@46.39.45.122)
[21:35:56] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com)
[21:36:17] *** Joins: andyewen (~andyewen@31.124.173.210)
[21:37:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[21:37:07] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[21:37:33] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[21:37:46] *** Quits: tobybl (~tobybl@214.242.200.146.dyn.plus.net) (Remote host closed the connection)
[21:37:51] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[21:38:22] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:38:28] *** Joins: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net)
[21:38:45] *** Joins: avane (~avane@fsf/member/avane)
[21:39:27] *** Joins: Betal (~Betal@user/betal)
[21:41:04] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[21:42:17] <stockholm> i set up pyenv, created an 3.7.12 version by issuing  pyenv install 3.7.12, it builds fine, but i cant activate it with pyenv activate 3.7.12, because it "is not a virtualenv"
[21:42:28] <stockholm> how do i do it properly?
[21:42:53] <stockholm> if i build this environment to point pycharm at it, do i need to activate it at all?
[21:43:37] *** Joins: slav0nic (slav0nic@python.su)
[21:43:51] *** Joins: alex11 (~alex11@user/alex11)
[21:43:52] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:45:41] <bahamas> stockholm: you don't, because pycharm will reference the python binary in that virtualenv directly
[21:46:50] *** Joins: faris (~faris@lfbn-idf1-1-963-34.w86-238.abo.wanadoo.fr)
[21:48:05] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:48:39] *** Quits: chmykh (~chmykh@mm-135-47-121-178.gomel.dynamic.pppoe.byfly.by) (Quit: chmykh)
[21:49:34] *** Quits: yac (~user@user/yac) (Ping timeout: 272 seconds)
[21:49:58] *** Joins: yac (~user@user/yac)
[21:50:10] <bahamas> stockholm: pyenv install -l doesn't list `3.7.12` as an available version
[21:51:31] *** Joins: triode (~number9@130.70.15.5)
[21:51:32] <stockholm> oh? it does here!
[21:52:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[21:52:08] <stockholm> bahamas, what is your highest 3.7 version?
[21:52:26] <stockholm> here it is 3.7.12
[21:54:29] *** Quits: Barones (~Barones@user/Barones) (Read error: Connection reset by peer)
[21:54:38] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:55:14] <triode> Hello all, I am working on the d2l.ai machine learning book, and wanted to learn it more (by putting all python files in one file for now). I just do not understand somethning. In their main tensorflow file, they have: d2l = sys.modules[__name__] (in this file: https://github.com/d2l-ai/d2l-en/blob/master/d2l/tensorflow.py) and I just do not get it. They repeatedly call d2l.things after that, example line 962, I do not get it). Can someone explain that?
[21:55:30] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[21:56:23] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[21:56:39] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[21:57:05] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[21:57:20] <stockholm> pyenv versions gives me * system and 3.7.12
[21:57:29] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[21:57:39] <stockholm> i guess the star marks system as the default one
[21:58:21] <triode> I thought the sys.modules defined a class instance?
[21:59:03] *** Quits: Madda (~Madda@2a05:f6c3:1935:0:2990:3a03:c1e1:2949) (Remote host closed the connection)
[21:59:06] *** Joins: monchi (~joints@143.198.92.132)
[21:59:12] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[21:59:13] <powftw> I was using Sublime as my editor. Now I've switched to vim because Sublime was having some annoying indentation errors but there was none. But when I opened file in Vim after installing few plugins especially python indentation plugin and now all python files written in Sublime has different indentation in Vim. When I Hit tab in vim, it's more than what was in sublime.
[21:59:22] <powftw> What should I do?
[21:59:30] *** Quits: thevar1able (~textual@46.39.45.122) (Quit: thevar1able)
[21:59:51] <triode> powftw: you can change tabs in vim to be four spces.
[21:59:57] *** Joins: paul424 (~tom@ip-5-172-235-10.multi.internet.cyfrowypolsat.pl)
[22:00:03] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:00:09] <triode> powftw: in .vimrc, add: set tabstop=4
[22:00:20] <triode> set shiftwidth=4
[22:00:20] <triode> set expandtab
[22:00:25] <triode> set tabstop=4
[22:00:27] *** Quits: BlackBishop (dexter@user/blackbishop) (Ping timeout: 252 seconds)
[22:00:45] <triode> you also want: syntax enable
[22:00:51] <powftw> https://usercontent.irccloud-cdn.com/file/QIKx11bR/IMG_20.png
[22:00:53] <triode> Personally, I do not use those plugins.
[22:01:01] <powftw> This is what I've in my vimrc
[22:01:05] *** Joins: BlackBishop (dexter@user/blackbishop)
[22:01:06] <triode> All ones I just listed are VIM without plugsins.
[22:01:15] *** Joins: edge (~spacenaut@111.92.81.133)
[22:01:41] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[22:01:52] <powftw> syntax enable means we get suggestions while typing?
[22:02:02] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 260 seconds)
[22:02:33] <triode> Ok, I think you need to add set nocompatible
[22:02:59] <triode> syntax enable enables syntax highlighting
[22:03:48] <powftw> so, what should I do? How I can make Sublime spaces to match with Vim? As I said, sublime and vim has different indentation now. The file is over 900lines and can i fix the indentation at one shot?
[22:03:49] *** Joins: karx (karx@user/karx)
[22:03:57] *** Quits: ravish0007_ (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:03:57] *** Quits: vinay (~Vinay@user/vinay-keshava) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:03:59] *** Joins: dreamon (~dreamon@pd95035d1.dip0.t-ipconnect.de)
[22:04:07] *** Quits: karx (karx@user/karx) (Client Quit)
[22:04:14] *** Quits: edge (~spacenaut@111.92.81.133) (Client Quit)
[22:04:29] <triode> powftw: with sed or awk? I do not use sublime. But I would fix a space problem with indentation with sed or VIM personally.
[22:04:50] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[22:04:56] *** Joins: spacenautx (~spacenaut@111.92.81.133)
[22:04:58] *** Joins: zerok (~zerok@user/zerok)
[22:05:50] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[22:06:06] *** Joins: onichomp (~onichomp@2806:264:4408:1f2:e911:cc31:4d8c:5e48)
[22:06:19] <powftw> Which plugin helps me to show suggestions while typing?
[22:06:22] <akk> unless it's shared code and you're going to be merging further changes, then fixing indentation isn't an option
[22:06:24] *** Quits: spacenautx (~spacenaut@111.92.81.133) (Client Quit)
[22:06:29] *** Quits: onichomp (~onichomp@2806:264:4408:1f2:e911:cc31:4d8c:5e48) (Read error: Connection reset by peer)
[22:07:13] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f863-5727-5d9c-7f8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:07:45] <triode> powftw: pythonic suggestions?
[22:07:48] *** Quits: andyewen (~andyewen@31.124.173.210) (Remote host closed the connection)
[22:07:49] *** Joins: thevar1able (~textual@46.39.45.122)
[22:07:53] *** Joins: Barones (~Barones@user/Barones)
[22:08:05] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[22:08:14] <triode> powftw: I am not sure I understand the question.
[22:08:19] *** Joins: onichomp (~onichomp@2806:264:4408:1f2:e911:cc31:4d8c:5e48)
[22:08:49] <powftw> Python suggestion ofcourse
[22:08:57] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[22:08:57] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[22:09:03] <ChrisWarrick> you might want to set up black for reasonable formatting
[22:09:06] *** Quits: rsx (~dummy@ppp-188-174-156-244.dynamic.mnet-online.de) (Quit: rsx)
[22:09:41] *** Quits: hwdyki (~hwdyki@user/hwdyki) (Ping timeout: 256 seconds)
[22:09:48] *** Quits: r4ulrm (~raul@181.27.127.43) (Ping timeout: 240 seconds)
[22:09:56] *** Joins: r4ulrm (~raul@181.27.127.43)
[22:10:05] *** Joins: Madda (~Madda@2a05:f6c3:1935:0:2990:3a03:c1e1:2949)
[22:10:06] <powftw> What if I follow the sublime way of tab space?
[22:10:06] <akk> emacs M-x format-region usually does pretty well, maybe vim has something similar
[22:10:09] *** Parts: zerok (~zerok@user/zerok) (Textual IRC Client: www.textualapp.com)
[22:10:12] <akk> indent-region
[22:10:14] *** Joins: aslicedbanjo (~aslicedba@host31-52-125-126.range31-52.btcentralplus.com)
[22:10:35] <ChrisWarrick> powftw: whatever your sublime plugin did might be difficult to reproduce with other environments
[22:10:46] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[22:11:45] <powftw> Is there any rule in python about spaces for tab ?
[22:11:51] <powftw> Or it can be any?
[22:11:57] <triode> powftw: I agree with ChrisWarrick. If you are trying to replicate sublime on vim, try to search the web for a plugin like that. coc.nvim with jedi? There are builtin autocompletes for python in vim... <C-x><C-n>, <C-n>, <C-x><C-l>
[22:12:16] <ChrisWarrick> powftw: the typical rule is 4 spaces per indentation level
[22:12:23] <ChrisWarrick> powftw: other rules are possible (but obviously wrong)
[22:13:11] <powftw> Sublime was telling about indentation error but me and my friends couldn't find any. Sublime tbh is bad at this indentation errors
[22:13:34] <powftw> In other editors, the entire indentation looks different
[22:13:39] <ChrisWarrick> sublime used to be cool 10 years ago
[22:13:59] <ChrisWarrick> (also, if you’re looking for a good editor, I’d suggest pycharm, or vscode if you don’t like large IDEs)
[22:14:26] <triode> ChrisWarrick: heh, its funny, vim was cool years before that, now I keep hearing about people going back to vim for its size and that sublime has lost their way.
[22:14:26] <powftw> Both are huge
[22:15:21] *** Quits: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net) (Ping timeout: 256 seconds)
[22:15:35] <ChrisWarrick> triode: vim is fine, but pycharm’s magic is addictive, and the python plugin space for vim felt lacking to me
[22:15:35] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[22:16:40] <triode> ChrisWarrick: yeah. I do not do a lot of python, and as a linux sysadmin, vi/vim is installed by default. I think if I did a lot more python I would check on more alternatives. Heh, I am having a hard enough time figuring out my d2l = sys.modules[__name__] question.
[22:17:04] <triode> the docs are not helping me on this one...
[22:17:27] <ChrisWarrick> triode: that’s an ugly hack
[22:17:27] <regulate> triode: they're just saving the name of the module since it clashes with another module they import later
[22:17:30] <triode> I still do not fundamentally understand sys.modules[__name__]
[22:17:45] <triode> regulate: which module? (heh)
[22:17:46] *** Joins: qlixed (~qlixed@181.44.129.13)
[22:18:05] <merrinx> having problem with some crypto server client task, get error:
[22:18:17] <merrinx> bytes like objes is required not int
[22:18:27] <merrinx> https://godbolt.org/z/3jnz9jv5G
[22:18:42] <merrinx> cannot figure out, if anyone can help take a look
[22:18:51] *** Joins: medium_cool (~medium_co@2605:a601:a9aa:f800:64cd:e1df:8737:185)
[22:18:54] <triode> regulate: I just do not see where they import it later. I will look though.
[22:19:19] <regulate> triode: __name__ evaluates to the current module, the filename, in this case tensorflow.py.
[22:19:30] <ChrisWarrick> triode: print(d2l) might help you figure it out
[22:19:59] <stockholm> in my new pyenv 3.7.12 distutils.core seems to be missing. how can i install it?
[22:20:26] <stockholm> do i need to pyenv install somethingsomething?
[22:20:37] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 240 seconds)
[22:21:41] <ChrisWarrick> stockholm: nope
[22:22:05] <stockholm> ChrisWarrick, where do i get distutils then?
[22:22:30] <ChrisWarrick> stockholm: they should be built-in in 3.7, but do you really need them?
[22:22:36] *** Joins: darksun (~darksun@user/darksun)
[22:22:47] <triode> Huh, I am trying to import this tensorflow.py file and it crashes at line 27, nn_Module = tf.keras.Model I will have to look into that.
[22:23:24] <ChrisWarrick> stockholm: did you call a file `distutils.py`?
[22:23:48] <stockholm> ChrisWarrick, i want to install a local python module, and the installation process bombs out
[22:23:58] <regulate> triode: how are you importing it ?
[22:24:00] *** Parts: blackout69 (~blackout6@net-31-156-121-253.cust.vodafonedsl.it) ()
[22:24:10] <stockholm> i assume i need to install the local module into the pyenv environment?
[22:24:13] <ChrisWarrick> stockholm: replace distutils.core with setuptools
[22:24:34] <stockholm> in the setup.py code?
[22:24:36] <ChrisWarrick> stockholm: yes
[22:24:49] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:25:38] <triode> regulate: import tensorflow.py (I am in a conda env with all the tensorflow stuffs so typing import tensorflow as tf works too)
[22:25:48] <triode> regulate: oh, the tensorflow.py file is in the CWD
[22:26:05] <stockholm> it imports setuptools already, ChrisWarrick
[22:26:06] *** Quits: evanextreme (~evan@2604:4080:1000:8150:1cc2:43f9:3edb:f1c0) (Quit: Heading out, seeya!)
[22:26:17] <ChrisWarrick> stockholm: show full traceback?
[22:26:24] *** Quits: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[22:26:32] <ChrisWarrick> stockholm: also, `pip install -U pip setuptools wheel`
[22:26:37] *** Joins: roxfan (~roxfan@2a02:a03f:a2be:4f00:b54c:f832:91af:f6f2)
[22:26:41] <regulate> triode: try 'from d2l import tensorflow as d2l'
[22:28:00] <stockholm> i did it in the shell, not out of pycharm, and now it worked.
[22:28:17] <stockholm> ChrisWarrick, thanks for your help
[22:28:37] <ChrisWarrick> stockholm: your pycharm might be misconfigured w/r/t python interpreter
[22:28:51] <triode> regulate: python does not have a module named d2l. Also, I did not setup the d2l envionment as they wanted you to do with pip... I am literally trying to see if I can understand what they are doing without using the env
[22:29:01] <triode> i.e. just tensorflow/matplotlib/etc.
[22:29:32] <stockholm> yes, i get that hunch, too
[22:30:09] *** Quits: Wh0 (~V@103.249.233.12) (Quit: Leaving)
[22:30:59] <BtbN> Can I somehow tell "--no-binary :all:" to exclude build-time only dependencies?
[22:31:19] <BtbN> Without listing all the stuff I'm explicitly installing there again
[22:31:22] <regulate> So here's the thing, tensorflow is a package on its own and also a module within this dl2 project.  So that's why they have that hackish sys.modules manipulation
[22:31:28] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:31:38] <BtbN> (and the runtime dependencies of that stuff, and so on ...)
[22:32:19] *** Joins: Talla (~Intan@120.188.78.85)
[22:32:38] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[22:32:52] <triode> regulate: Ok, I kind of see that. My issue is that later on they start saying things like pcm = ax.imshow(d2l.numpy(matrix), cmap=cmap) and I get confused... if I wnat to get "rid" of d2l and use the file without it, what do I replace d2l with there?
[22:32:54] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[22:33:16] *** Quits: white2 (~mahengrui@user/mahengrui1) (Ping timeout: 272 seconds)
[22:33:40] <triode> regulate: tensorflow.numpy does not work. numpy(matrix) does not work... I cna not figure out what d2l references there.
[22:33:41] <triode> :
[22:33:41] <triode> p
[22:34:17] <ChrisWarrick> triode: this module looks like a trainwreck to me, do you really want to use it?
[22:34:43] *** Quits: toma (~RubbishPu@node-1w7jr9yhpl489uxzjsc4xjqm3.ipv6.telus.net) (Read error: Connection reset by peer)
[22:34:45] <regulate> triode: look at line 54.  It's imported as 'tf'.  you can try putting "d2l = tf" at line 55
[22:34:56] <triode> ChrisWarrick: LOL, NO. I did have to replce the show_heatmaps and plot with my own that I hacked from the web.
[22:35:03] <regulate> triode: this is just a hack though
[22:35:28] *** Joins: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net)
[22:35:30] <regulate> I agree with Chris, this is ugly crap
[22:36:36] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[22:36:38] <triode> regulate: I am no python programmer by far, and I agree, this code sucks. The authors ask you to modify this and that, and I am reading it going "wtf?"... if I had more time I would re-write. We are using it as a book (https://d2l.ai)
[22:36:39] *** Soni is now known as GD-IRC
[22:37:04] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[22:37:23] <triode> I will say thank you both for your help, I do understand a few things a lot better now.
[22:37:53] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:38:07] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[22:38:31] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[22:38:57] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Max SendQ exceeded)
[22:39:01] *** Joins: bahamas (~lucian@84.232.140.52)
[22:39:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:39:59] *** Joins: dme86 (~dan@user/dan86)
[22:40:15] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:40:17] *** Quits: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[22:40:27] *** Joins: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net)
[22:40:35] *** Joins: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net)
[22:40:49] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:41:26] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:41:30] <bahamas> stockholm: for me it's 3.7.10
[22:41:58] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:42:08] *** Joins: flokuehn (~flokuehn@87.123.247.39)
[22:42:43] <stockholm> perhaps you have an old version. i installed mine today
[22:42:47] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:43:14] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:43:57] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:44:02] *** Quits: ejjfunky (~ejjfunky@125.164.19.196) (Ping timeout: 272 seconds)
[22:44:26] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 252 seconds)
[22:44:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:44:31] *** Quits: flokuehn (~flokuehn@87.123.247.39) (Client Quit)
[22:45:05] *** Quits: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:15] *** Joins: flokuehn (~flokuehn@87.123.247.39)
[22:45:36] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Max SendQ exceeded)
[22:45:40] <marduk> Hmm, I have a class that I'm instantiating a bunch of times because in tests it's always instatiated with test arguments (tmpdir, etc) but in "production" they're always the same arguments. I'd like to instantiate a module-level "singleton" on import so I don't have to instatiate it a million times elsewhere, but the singleton will fail on import
[22:45:40] <marduk> when run in tests. so should I just give up on the single instance idea?
[22:46:06] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.231)
[22:46:55] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.231) (Max SendQ exceeded)
[22:47:23] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.255)
[22:48:28] *** Quits: pro_z (~pro_z@37.214.61.103) (Ping timeout: 272 seconds)
[22:48:31] *** Joins: Haxxa (~Haxxa@122-199-59-132.ip4.superloop.com)
[22:48:31] *** Joins: radiojosh (~Joshua@70-131-32-80.lightspeed.stlsmo.sbcglobal.net)
[22:48:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:49:00] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:49:37] <phy1729> Why will the singleton fail in tests?
[22:49:58] <regulate> marduk: if modifying all the tests is acceptable, you can try 'del singletonmodule' before every import
[22:50:37] <bahamas> stockholm: that's possible
[22:51:46] <marduk> Actually I was thinking to try module-level __getattr__
[22:51:58] *** Quits: bahamas (~lucian@84.232.140.52) (Quit: leaving)
[22:52:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[22:53:04] <phy1729> I usually go with functools.cache
[22:53:25] *** Quits: onichomp (~onichomp@2806:264:4408:1f2:e911:cc31:4d8c:5e48) (Read error: Connection reset by peer)
[22:53:32] *** Joins: dgdg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222)
[22:53:36] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[22:53:58] *** Quits: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:54:03] *** Joins: onichomp (~onichomp@2806:264:4408:1f2:e911:cc31:4d8c:5e48)
[22:54:12] *** Joins: kickingvegas (~cchoi@c-73-170-198-141.hsd1.ca.comcast.net)
[22:54:34] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:55:59] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[22:56:00] *** Quits: dg_dg (~dg_dg@gateway/vpn/pia/dgdg/x-00698222) (Ping timeout: 252 seconds)
[22:56:32] *** Quits: pycode (~pycode3@2001:b07:5d28:551:b4f7:7e5f:2606:5f00) (Ping timeout: 252 seconds)
[22:58:55] <marduk> phy1729: basically because the tests implement their own instances with test-specific parameters (e.g. storage_dir=tmpdir) but I want the module-level instance to depend on environment variables which aren't defined when the tests run.
[22:59:36] *** Joins: Tempesta (~Tempesta@user/tempesta)
[22:59:37] *** Quits: medium_cool (~medium_co@2605:a601:a9aa:f800:64cd:e1df:8737:185) (Quit: I have gone to sleep. ZZZzzz…)
[22:59:52] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[22:59:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:00:02] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[23:00:04] <phy1729> functools.cache or lru_cache with appropriate argument seems like it could do the trick
[23:00:41] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:00:47] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[23:01:07] <exarkun> are official windows releases built with /fp:strict ?
[23:01:12] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:01:21] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[23:01:29] <marduk> Not sure that would work either... or I want to instantiate it at import time so I just `import instance`
[23:01:36] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[23:03:51] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[23:04:32] *** Joins: Pickchea (~private@user/pickchea)
[23:04:46] *** fofoni_ is now known as fofoni
[23:06:04] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[23:06:47] *** Joins: crashrep (~crashrep@user/crashrep)
[23:07:28] *** Joins: wholesomedonut (~wholesome@2607:fb90:46c:5900:8144:d9ae:9f0b:2ee1)
[23:08:12] *** Quits: wholesomedonut (~wholesome@2607:fb90:46c:5900:8144:d9ae:9f0b:2ee1) (Client Quit)
[23:08:51] *** Quits: magla (~gelignite@d5361f17.access.ecotel.net) (Quit: Stay safe!)
[23:08:57] *** Joins: archivist_yukon (~archivist@2607:fb90:46c:5900:8144:d9ae:9f0b:2ee1)
[23:10:03] *** Quits: archivist_yukon (~archivist@2607:fb90:46c:5900:8144:d9ae:9f0b:2ee1) (Client Quit)
[23:10:28] <znf> Hi.
[23:10:31] *** Joins: wholesomedonut (~wholesome@2607:fb90:46c:5900:8144:d9ae:9f0b:2ee1)
[23:10:42] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[23:11:06] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:11:07] *** Joins: thiras (~thiras@user/thiras)
[23:11:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:11:38] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[23:12:37] *** Quits: reset (~reset@user/reset) (Quit: reset)
[23:14:27] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:14:30] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[23:14:55] *** Joins: califax (~califax@user/califx)
[23:15:25] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[23:15:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:15:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:16:09] <nedbat> znf: hey there
[23:16:33] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[23:16:34] <dba> does every folder as package has to have __init__.py file?
[23:16:47] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:16:50] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 256 seconds)
[23:17:06] *** Joins: mickey8 (~user@user/mickey)
[23:17:20] <regulate> dba: yes, that's how a package is defined
[23:17:54] *** Joins: crashrep (~crashrep@user/crashrep)
[23:18:22] *** Lord_of_Life_ is now known as Lord_of_Life
[23:18:42] *** Joins: reset (~reset@user/reset)
[23:18:58] *** Joins: i2t (~i2t@69.54.152.9)
[23:19:01] *** Joins: jazzy (~jaziz@user/jaziz)
[23:19:22] *** Quits: triode (~number9@130.70.15.5) (Quit: "It takes many nails to build crib, but one screw to fill it.")
[23:21:29] *** Quits: MajorBiscuit (~MajorBisc@c-001-030-015.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[23:22:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:22:32] *** Quits: marcello42 (~mp@p200300dfaf10fe015baf6eed7f4ef68f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:22:56] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[23:24:15] *** Quits: jamea (~jamea@10.189-202-213.bestelclientes.com.mx) (Ping timeout: 256 seconds)
[23:24:17] *** Joins: Auron (Auron956@user/auron)
[23:24:45] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[23:25:26] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Client Quit)
[23:25:57] *** Quits: wholesomedonut (~wholesome@2607:fb90:46c:5900:8144:d9ae:9f0b:2ee1) (Ping timeout: 240 seconds)
[23:26:31] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[23:27:05] *** Joins: wholesomedonut (~wholesome@2607:fb90:46c:5900:8144:d9ae:9f0b:2ee1)
[23:27:51] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.255) (Ping timeout: 245 seconds)
[23:28:23] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[23:28:58] *** Joins: crashrep (~crashrep@user/crashrep)
[23:29:14] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 250 seconds)
[23:30:21] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) (Ping timeout: 245 seconds)
[23:30:50] *** Joins: Auron (Auron956@user/auron)
[23:31:38] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[23:33:32] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:33:33] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:34:21] <bjs> marduk: how does the other places use it?
[23:34:37] <bjs> marduk: like does it get passed as an argument?
[23:35:32] *** Joins: not_not (~not_not@193.178.220.11)
[23:36:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:37:11] <bjs> marduk: because the usual way to do something like this is to make one instance (e.g. in some main.py or app.py or whatever) and then pass that "down" the chain of calls.  If you're instantiating it in lots of places.
[23:37:56] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[23:38:13] <bjs> If you have lots of places where it doesn't get passed down but instead tries to make a new one, like a `def get_app()` function that creates an instance if it doesn't exist and otherwise just returns the one that was created earlier (e.g. a global var)
[23:39:00] *** Joins: magla (~gelignite@d5361f17.access.ecotel.net)
[23:39:08] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 272 seconds)
[23:39:38] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:41:12] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[23:41:15] *** Joins: crashrep (~crashrep@user/crashrep)
[23:41:41] * ztrawhcse whispers in regulate ear: namespace packages, naaaaaaaaaaaaaaamespace packages...
[23:41:42] <Pi-sistance> any point in using the first form over the second??
[23:41:44] <Pi-sistance> square.computeArea(aSquareInstance)
[23:41:44] <Pi-sistance> aSquareInstance.computeArea()
[23:42:21] <bjs> Pi-sistance: you mean if square is the class name?
[23:42:25] <Pi-sistance> yes
[23:42:34] <Pi-sistance> and i have defined a method for length and area
[23:42:40] <bjs> Pi-sistance: no there's not really any reason to do it that first way
[23:43:09] <Pi-sistance> ok thanks, i thouight it was weird.
[23:43:34] <bjs> Pi-sistance: it does look weird,  people don't usually do that, and once you add inheritance it will stop working
[23:44:12] *** Joins: naranja (~orange@user/orangeboxcutter)
[23:44:19] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[23:44:28] <bjs> e.g. when I add a NonEuclidianSquare class, with its own compute_area method then your code probably calls the wrong method!
[23:45:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:45:36] <Pi-sistance> ok cool. inheritance is at the end of this weeks topic, jsut about to read it :)
[23:46:56] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:47:05] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[23:47:24] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[23:47:40] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[23:48:01] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[23:48:50] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[23:49:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:49:28] *** Joins: lkthomas_ (~lkthomas@host81-149-79-114.in-addr.btopenworld.com)
[23:51:08] *** Joins: Deneb (~johnch@245.82.159.143.dyn.plus.net)
[23:51:49] *** Quits: lkthomas (~lkthomas@host81-149-79-114.in-addr.btopenworld.com) (Ping timeout: 240 seconds)
[23:52:23] *** Quits: amo (~amogorkon@port-92-196-27-200.dynamic.as20676.net) (Read error: Connection reset by peer)
[23:52:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:53:41] *** Joins: jringstad__ (~Amadiro@31.11.55.179)
[23:54:32] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:54:35] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 240 seconds)
[23:55:58] *** Quits: schumaml (~schumaml@p200300e2ef02330053c1821a43d17d29.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[23:56:03] *** Quits: Amadiro (~Amadiro@31.11.55.179) (Ping timeout: 250 seconds)
[23:56:11] *** Quits: Barones (~Barones@user/Barones) (Remote host closed the connection)
[23:56:11] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[23:56:20] *** Joins: Tempesta (~Tempesta@user/tempesta)
[23:58:37] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 240 seconds)
[23:58:49] *** Joins: cjb (~cjb@user/cjb)
[23:59:00] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[23:59:53] *** Joins: Croves (~Croves@192.34.198.23)
