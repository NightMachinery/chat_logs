[00:01:21] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[00:01:21] *** Joins: rnsanchez (~rnsanchez@179.233.246.221)
[00:04:57] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5fb:de91:938f:c954)
[00:06:41] *** Quits: Tokamak (~Tokamak@107.117.203.65) (Ping timeout: 256 seconds)
[00:07:33] *** Quits: dld (~dld@2620:6e:6000:2900:1d51:fa28:794f:615f) (Ping timeout: 250 seconds)
[00:08:11] *** Quits: supernova (~quassel@2405:9800:ba11:6207:30fd:c9aa:5f13:128b) (Ping timeout: 264 seconds)
[00:17:04] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:20:41] <Alipha> << string().capacity()
[00:20:42] <geordi> 15
[00:21:04] <Alipha> Simplar: on geordi, 15 chars can be stored before allocating ^
[00:21:08] <kalven> << sizeof(void*)
[00:21:09] <geordi> 8
[00:22:30] <kalven> looks like it's 22 with libc++
[00:25:21] *** Joins: Tokamak (~Tokamak@172.58.188.188)
[00:28:02] *** Quits: paul424 (~tom@ip-37-248-157-149.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:29:12] <gehn> it surely varies with specific implementation, there's a CppCon from Alexandrescu on Facebook's string implementation, it's rather clever and can hold I think up to about 20-ish chars for small string opt
[00:30:21] <kalven> yes, we were just talking about it being 15 in one implementation and 22 in another (both 64-bit)
[00:33:24] *** Joins: dld (~dld@2620:6e:6000:2900:1d51:fa28:794f:615f)
[00:34:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:26] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[00:34:42] *** Joins: Fault (~Fault@152.70.112.168)
[00:35:09] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:06] *** Quits: Tokamak (~Tokamak@172.58.188.188) (Ping timeout: 260 seconds)
[00:36:23] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:36:55] <Ronalds_Mazitis_> invalid operands of types ‘const char*’ and ‘const char [3]’ to binary ‘operator+’
[00:36:56] <Ronalds_Mazitis_>   163 |      system("ffmpeg -i name2 -ss" + sakums + "to" + beigas + "-c:v libx264 -crf 30 trim_opseek" +_name2.str())
[00:37:33] <Ronalds_Mazitis_> please don't be snobs, I can't find example on google that fits this common programming technique
[00:37:46] <rpav> try std::string("ffmpeg ...") + ...
[00:37:58] *** Quits: lihora (~lihora@177.50.213.32) (Quit: lihora)
[00:38:01] <rpav> watch out with system(), but i'm not sure what's a better option
[00:38:20] <Ronalds_Mazitis_> dude I'm running ffmpeg as a process here
[00:38:25] <Ronalds_Mazitis_> I'm not making it a string
[00:38:39] <rpav> ??
[00:38:51] <rpav> << "xx" + "yy"
[00:38:51] <geordi> error: invalid operands of types 'const char [3]' and 'const char [3]' to binary 'operator+'
[00:38:58] <rpav> << std::string("xx") + "yy"
[00:38:59] <geordi> xxyy
[00:39:05] <Ronalds_Mazitis_> okay
[00:39:15] <kalven> system((std::string("ffmpeg ...") + blah + foo).c_str());  // etc..
[00:39:31] <rpav> oh right .data() or .c_str() depending on how ancient your C++ is
[00:39:58] <Ronalds_Mazitis_> no match for ‘operator+’ (operand types are ‘std::__cxx11::basic_string<char>’ and ‘int’)
[00:39:59] <Ronalds_Mazitis_>   163 |   system("ffmpeg -i name2 -ss" + sakums + std::string("to") + beigas + "-c:v libx264 -crf 30 trim_opseek" +_name2.str())
[00:40:06] <rpav> << fmt::format("ffmpeg ... {} ... {}", "foo", "bar") /* if you have that too */
[00:40:07] <geordi> error: 'fmt' has not been declared
[00:40:10] <rpav> bah
[00:40:36] <kalven> Ronalds_Mazitis_: wrap your ints with std::to_string
[00:41:35] <Ronalds_Mazitis_> 			  system(std::string("ffmpeg -i name2 -ss") + std::to_string(sakums) + std::string("to") + std::to_string(beigas) + std::string("-c:v libx264 -crf 30 trim_opseek") +_name2.str())
[00:41:52] <rpav> i think i'd be looking into something else at this point
[00:42:11] <rpav> << format("foo")
[00:42:12] <geordi> error: 'format' was not declared in this scope
[00:42:15] <rpav> bah
[00:42:46] <kalven> Ronalds_Mazitis_: look at what I wrote, pay attention to the parenthesis and where the last .c_str() goes
[00:43:06] <kalven> or launch into some diatribe about programming, idk..
[00:43:29] <Ronalds_Mazitis_> error: cannot convert ‘std::__cxx11::basic_string<char>’ to ‘const char*’
[00:43:30] <Ronalds_Mazitis_>   163 | ring(beigas) + std::string("-c:v libx264 -crf 30 trim_opseek") + name2)
[00:43:30] <Ronalds_Mazitis_>       | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~
[00:43:31] <Ronalds_Mazitis_>       |
[00:43:51] <Ronalds_Mazitis_> 				std::string name2;
[00:44:00] <kalven> and once again
[00:44:19] <Ronalds_Mazitis_> 			  system(std::string("ffmpeg -i name2 -ss") + std::to_string(sakums) + std::string("to") + std::to_string(beigas) + std::string("-c:v libx264 -crf 30 trim_opseek") + name2)
[00:44:30] <Ronalds_Mazitis_> once again this is dumb and not explained
[00:44:40] <Ronalds_Mazitis_> for some reason internet is not c++ friendly
[00:44:45] <kalven> okay
[00:44:54] <kalven> so we're doing the diatribe
[00:45:08] <Ronalds_Mazitis_> I have no idea wut you talking about
[00:45:27] <AmR> Any one know statically linked web browser ?
[00:45:51] <kalven> Ronalds_Mazitis_: system((std::string("ffmpeg ...") + blah + foo).c_str());   - look at the parenthesis and where that .c_str() goes
[00:46:10] <Ronalds_Mazitis_> unreadable
[00:46:23] <Ronalds_Mazitis_> 			  system(std::string("ffmpeg -i name2 -ss") + std::to_string(sakums) + std::string("to") + std::to_string(beigas) + std::string("-c:v libx264 -crf 30 trim_opseek") + name2).c.str()
[00:46:25] <Ronalds_Mazitis_> idnk
[00:46:31] <Ronalds_Mazitis_> help the brotha out
[00:47:24] <Ronalds_Mazitis_> foo).c_str());
[00:47:29] <Ronalds_Mazitis_> wut is this
[00:47:35] <Ronalds_Mazitis_> cmmon
[00:47:35] <kalven> notice that I start with system((  - two parenthesis
[00:48:03] <Ronalds_Mazitis_> ohh
[00:50:08] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/9aa871a88fc4674b95d3a641dd3fb7d0/pasted.txt
[00:50:11] <Ronalds_Mazitis_> error: aggregate ‘std::ofstream file’ has incomplete type and cannot be defined
[00:50:12] <Ronalds_Mazitis_>   214 | std::ofstream file; // out file stream
[00:50:22] <Raziel> I don't look at the channel for 10 fekkin minutes and Ronalds_Mazitis_ forgot how to use a pastebin?
[00:50:25] <kalven> include <fstream>
[00:50:35] <InPhase> Yeah, that definitely calls for a pastebin.
[00:50:47] <Ronalds_Mazitis_> that is pastebin kiwiirc provided
[00:51:01] <Raziel> that last one is... acceptable
[00:51:02] <Raziel> lol
[00:51:22] <Raziel> passting more than one or maybe two lines directly to the channel, not so much
[00:52:02] *** Quits: causative (~halberd@user/causative) (Ping timeout: 244 seconds)
[00:52:53] <Ronalds_Mazitis_> expected ‘;’ before ‘arr’ 218 | file arr[a];
[00:52:58] *** Joins: Tokamak (~Tokamak@172.58.191.72)
[00:53:10] <Raziel> but, brownie points for persevering. unfortunately those brownie points immediately get taken away because you chose to persevere with using C++ as a glorified shell script by doing everything important in system() calls
[00:54:02] <kalven> Ronalds_Mazitis_: that code doesn't make sense
[00:54:15] <Ronalds_Mazitis_> file.open("mylist.txt");
[00:54:26] <kalven> file.close();
[00:54:32] <Ronalds_Mazitis_> ahhh
[00:54:41] <kalven> file.what_do_you_want()
[00:54:42] <Raziel> Ronalds_Mazitis_, if you're trying to read a list of... something from a file, into an array, that is not how to do it
[00:55:09] <Raziel> but I really can't tell what you're trying to do from those snippets v:
[00:58:15] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[01:00:34] *** Quits: Leone (~Leo@45.72.233.136) (Read error: Connection reset by peer)
[01:05:53] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[01:08:11] *** Joins: great_taste (~great_tas@190.32.235.20)
[01:09:20] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:13:09] *** Quits: magla (~gelignite@55d431b8.access.ecotel.net) (Quit: Stay safe!)
[01:15:54] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[01:16:05] *** Joins: aegon (~mike@174.127.249.180)
[01:16:31] *** Joins: Fault (~Fault@152.70.112.168)
[01:25:02] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[01:25:20] *** Joins: Fault (~Fault@152.70.112.168)
[01:27:10] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 244 seconds)
[01:28:45] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[01:30:45] *** Quits: dld (~dld@2620:6e:6000:2900:1d51:fa28:794f:615f) (Ping timeout: 250 seconds)
[01:36:09] *** Quits: Tokamak (~Tokamak@172.58.191.72) (Read error: Connection reset by peer)
[01:37:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:54] *** ChanServ sets mode: +v npaperbot
[01:38:33] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:41:24] *** Joins: Tokamak (~Tokamak@172.58.191.72)
[01:41:38] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[01:48:55] *** Joins: dld (~dld@2620:6e:6000:2900:1d51:fa28:794f:615f)
[01:55:16] *** Joins: gggpkm (~gggpkm@123.113.176.184)
[01:55:54] *** Joins: gggpkm_ (~gggpkm@123.113.176.184)
[01:57:57] *** Joins: gggpkm__ (~gggpkm@123.113.176.184)
[01:59:47] *** Quits: gggpkm (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[02:01:05] *** Quits: gggpkm_ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[02:01:11] *** Joins: emerent_ (~quassel@p200300cd574855efba27ebfffed28a59.dip0.t-ipconnect.de)
[02:01:11] *** Quits: emerent (~quassel@p200300cd574855c7ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (iridium.libera.chat (Nickname regained by services)))
[02:01:11] *** emerent_ is now known as emerent
[02:02:01] *** Joins: pah (~pah@user/pah)
[02:02:48] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[02:07:04] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:09:19] *** Quits: pah (~pah@user/pah) (Ping timeout: 250 seconds)
[02:10:57] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Read error: Connection reset by peer)
[02:12:34] *** Joins: pah (~pah@user/pah)
[02:22:05] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[02:22:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5fb:de91:938f:c954) (Ping timeout: 268 seconds)
[02:25:21] *** Quits: gggpkm__ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[02:27:14] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[02:27:19] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Client Quit)
[02:27:38] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[02:29:02] *** Quits: dld (~dld@2620:6e:6000:2900:1d51:fa28:794f:615f) (Ping timeout: 240 seconds)
[02:30:45] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5fb:de91:938f:c954)
[02:30:47] *** Joins: CppCon (~istupy@2620:0:1003:206:efff:4122:1028:ce8d)
[02:33:17] *** Joins: Fault (~Fault@152.70.112.168)
[02:33:37] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[02:36:49] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[02:37:25] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Max SendQ exceeded)
[02:38:59] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 244 seconds)
[02:39:25] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[02:41:42] *** Joins: causative (~halberd@user/causative)
[02:51:02] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:04:57] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[03:05:16] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[03:13:33] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[03:17:57] *** Joins: Deneb (~johnch@117.111.189.80.dyn.plus.net)
[03:18:06] *** Joins: Deneb^ (~johnch@117.111.189.80.dyn.plus.net)
[03:21:41] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 250 seconds)
[03:22:02] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:22:35] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe)
[03:24:06] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[03:27:19] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[03:27:52] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[03:30:35] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:35:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:37:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[03:38:42] *** Joins: pah (~pah@user/pah)
[03:39:23] *** Quits: Deneb (~johnch@117.111.189.80.dyn.plus.net) (Quit: Leaving)
[03:39:23] *** Quits: Deneb^ (~johnch@117.111.189.80.dyn.plus.net) (Quit: Leaving)
[03:39:46] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[03:42:00] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 260 seconds)
[03:50:35] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5fb:de91:938f:c954) (Quit: Textual IRC Client: www.textualapp.com)
[03:59:40] *** Joins: Ivii (~Ivyy@2001:a61:13ad:1c01:e32a:130c:f3c:3482)
[04:10:04] *** Joins: frost (~frost@user/frost)
[04:10:23] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:01] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe) (Quit: Quit)
[04:16:05] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe) (Quit: Quit)
[04:16:30] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe)
[04:18:58] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[04:22:00] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[04:23:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:23:52] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 244 seconds)
[04:24:42] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[04:29:41] *** Quits: jkaye (~jkaye@2601:281:8300:7530:2b36:18db:1545:7097) (Ping timeout: 245 seconds)
[04:37:36] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[04:38:11] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:41:07] *** Quits: Ivii (~Ivyy@2001:a61:13ad:1c01:e32a:130c:f3c:3482) (Remote host closed the connection)
[04:46:38] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[04:52:10] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[04:59:47] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[05:05:09] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:05:46] *** Joins: ferdna (~ferdna@user/ferdna)
[05:07:57] <computerquip> After this, he can put C++ on his resume.
[05:21:02] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[05:21:14] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5fb:de91:938f:c954)
[05:22:15] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[05:25:11] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 250 seconds)
[05:26:25] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1c01:b0f:3c58:2e46)
[05:31:42] *** Joins: euouae (~euouae@user/euouae)
[05:37:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:54] *** ChanServ sets mode: +v npaperbot
[05:40:46] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 260 seconds)
[05:43:26] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 244 seconds)
[05:45:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5fb:de91:938f:c954) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:45:31] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[05:45:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5fb:de91:938f:c954)
[05:45:58] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a5fb:de91:938f:c954) (Client Quit)
[05:45:59] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[05:47:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[05:47:57] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:52:47] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Quit: Please Hold…)
[05:53:36] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:55:37] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[05:57:15] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[06:02:02] *** Quits: rnsanchez (~rnsanchez@179.233.246.221) (Ping timeout: 244 seconds)
[06:06:25] *** Joins: rnsanchez (~rnsanchez@179.233.246.221)
[06:07:51] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:10:29] *** Quits: euouae (~euouae@user/euouae) (Quit: Client closed)
[06:16:09] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[06:16:52] <lmat> I'm coding a game. A player has goods: food, stone, gold, wood, cloth. He has any number of each. He needs to put them together to form "packets". A "packet" must three unique goods and one of them must be food. How do I get every possible packet a player could make?
[06:17:24] <lmat> {food, cloth, stone}, {food, wood, cloth}, etc. are all possible packets.
[06:17:24] <geordi> error: expected unqualified-id before ',' token
[06:17:57] <kalven> a nested for loop over the non food goods
[06:18:03] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe) (Quit: Quit)
[06:20:31] <kalven> (skip the steps where a and b are the same goods)
[06:21:11] <lmat> kalven: So if the player has  {food, stone, stone, wood, wood}, that will return  {food, stone, wood}, {food, stone, wood}, right?
[06:21:53] <kalven> you want to exclude the second one, right?
[06:23:03] <lmat> yeah, because it's a duplicate...but wait...maybe not
[06:23:48] <kalven> lmat: you can use this method: https://wandbox.org/permlink/aqzcUmELTodbGD2d
[06:23:59] <lmat> kalven: Come to think of it, a player can submit a {food, stone, wood} AND a {food, stone, wood}
[06:24:05] <lmat> okay, I have bigger problems than I thought :-D
[06:24:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 244 seconds)
[06:24:21] <lmat> I actually need to return a std::vector<std::vector<std::vector<good>>> ...
[06:24:48] <kalven> if you want to treat the same, just sort it
[06:25:23] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[06:26:12] <Raziel> lmat, from a logical standpoint you're looking for combinations without repetition/replacement
[06:26:38] <Raziel> and from a filtering standpoint, you only care about combinations of two items, without food. then you can add food at the end.
[06:28:02] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:31:32] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1c01:b0f:3c58:2e46) (Ping timeout: 240 seconds)
[06:34:05] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Quit: Leaving)
[06:36:09] <lmat> A packet is a using packet = std::vector<good> (or using packet = std::array<good, 3>). A player might be able to play multiple packets at once: using packets = std::vector<packet>. I need every combination of packets a player could submit: std::vector<packets>
[06:36:29] <Raziel> lmat, https://wandbox.org/permlink/57ULgPNFPcL3Ll85
[06:36:31] <Raziel> behold. lol
[06:37:10] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:37:16] <lmat> And I'll need to be able to withhold packets, too :-D, so I need to return  { {}, {{food, stone, wood}}, {{food, stone, wood}, {food, stone, wood}} } I think.
[06:37:19] <Raziel> now, you'd just need to add validation to that, based on if the player has enough of each item
[06:39:06] *** Joins: Fault (~Fault@152.70.112.168)
[06:39:06] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[06:39:11] <Raziel> or if you're storing items as  {food, stone, stone, wood, wood} rather than a map like {food:1, stone:2, wood:2} you can just shove that in the combo generator
[06:39:39] <Raziel> but it will make combos with several of the same item in that case
[06:40:09] *** Joins: Fault (~Fault@152.70.112.168)
[06:40:43] <RandomReader> why do you need every possible packet?
[06:44:59] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[06:45:02] <lmat> RandomReader: I need every possible combination of packets!!
[06:46:49] <lmat> I'm thinking std::next_permutation might factor in...
[06:47:39] <Raziel> if you really want to store your shit as a list instead of a map but still wanna avoid duplicate items in combos, you can use sets
[06:47:47] <Raziel> https://wandbox.org/permlink/hNsuT5EgTn0ep2t8 like so
[06:48:10] <Raziel> that ITEM_TYPES is less ITEM_TYPES and more PlayerInventory at that point
[06:48:22] <Raziel> also, this will be slower. by a lot.
[06:48:48] <Raziel> and, I gotta get some sleep, have funz
[06:49:46] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[06:49:56] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Remote host closed the connection)
[06:51:44] <lmat> Raziel: Sleep well!
[06:53:03] *** Joins: Fault (~Fault@152.70.112.168)
[06:53:03] <kalven> lmat: next_permutation doesn't really do what you want here
[06:53:06] *** Quits: Fault (~Fault@152.70.112.168) (Client Quit)
[06:57:37] <RandomReader> my question was *why*
[06:59:20] *** Joins: Fault (~Fault@152.70.112.168)
[06:59:21] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[07:02:51] *** Joins: Fault (~Fault@152.70.112.168)
[07:02:52] *** Quits: Fault (~Fault@152.70.112.168) (Remote host closed the connection)
[07:04:25] <RandomReader> like I can certainly think of reasons to validate or account for consumed combinations, but it's relatively rare to need to generate all potential combinations from a reasonably-sized set
[07:05:11] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:13:21] *** Joins: Fault (~Fault@152.70.112.168)
[07:15:15] <lmat> RandomReader: Because I'm making my game ;-)
[07:15:29] <lmat> RandomReader: My AI needs to know his next possible moves :-D
[07:16:15] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[07:16:21] *** Quits: DSpider (~DSpider@82.79.237.31) (Quit: Leaving)
[07:18:14] *** Joins: Fault (~Fault@152.70.112.168)
[07:20:03] <amosbird> Hello! What does this if condition do in general?  if ( _currentThread != std::thread::id() ) { ... } . IIUC, std::thread::id() is used to generate a unique identifier.
[07:22:26] <johnny> generate? is it not an already generated thread id?
[07:22:37] <lmat> amosbird: If by "unique identifier" you mean among threads...sure, it's generated at some point...
[07:22:40] <johnny> that'd what i'd assume by seeing htat, assuming that's the correct usage
[07:23:06] <RandomReader> it's the default constructor, so it generates a value that represents "no thread"
[07:23:50] <lmat> amosbird: That's some pretty wonky code. Better deny that merge request.
[07:23:53] <RandomReader> presumably _currentThread is initialized to that value and then set to something else when other logic tells it about a particular std::thread
[07:24:20] <RandomReader> std::thread::id is a type, if it's not clear
[07:24:40] <RandomReader> non-default values come from thread.get_id()
[07:25:22] <lmat> Right, if you want the current thread's ID, use std::this_thread::get_id() https://en.cppreference.com/w/cpp/thread/get_id
[07:26:11] <RandomReader> framed another way, it's checking that _currentThread is not the default/empty value
[07:32:57] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:39:28] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[07:45:41] *** Joins: Fault (~Fault@152.70.112.168)
[07:55:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:57:00] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[07:57:54] *** Joins: Fault (~Fault@152.70.112.168)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:12:17] *** Quits: Tokamak (~Tokamak@172.58.191.72) (Read error: Connection reset by peer)
[08:14:24] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[08:14:24] *** Quits: frost (~frost@user/frost) (*.net *.split)
[08:14:24] *** Quits: pah (~pah@user/pah) (*.net *.split)
[08:14:24] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (*.net *.split)
[08:14:24] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (*.net *.split)
[08:14:24] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[08:14:24] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[08:14:24] *** Quits: aegon (~mike@174.127.249.180) (*.net *.split)
[08:14:24] *** Quits: pakcjo (~pakcjo@user/pakcjo) (*.net *.split)
[08:14:24] *** Quits: paule32_ (~paule32@user/paule32) (*.net *.split)
[08:14:24] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[08:14:24] *** Quits: kurfen (~kurfen@45.152.181.20) (*.net *.split)
[08:14:24] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[08:14:24] *** Quits: mathu (~matt@user/mathu) (*.net *.split)
[08:14:24] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[08:14:24] *** Quits: edr (~edr@user/edr) (*.net *.split)
[08:14:24] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[08:14:24] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[08:14:24] *** Quits: Argorok (sid195487@hampstead.irccloud.com) (*.net *.split)
[08:14:24] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[08:15:13] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:15:13] *** Joins: frost (~frost@user/frost)
[08:15:13] *** Joins: pah (~pah@user/pah)
[08:15:13] *** Joins: aegon (~mike@174.127.249.180)
[08:15:13] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[08:15:13] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[08:15:13] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:15:13] *** Joins: pakcjo (~pakcjo@user/pakcjo)
[08:15:13] *** Joins: paule32_ (~paule32@user/paule32)
[08:15:13] *** Joins: cursey (~cursey@user/cursey)
[08:15:13] *** Joins: kurfen (~kurfen@45.152.181.20)
[08:15:13] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[08:15:13] *** Joins: mathu (~matt@user/mathu)
[08:15:13] *** Joins: edr (~edr@user/edr)
[08:15:13] *** Joins: zagura (~zagura@user/zagura)
[08:15:13] *** Joins: Trollmann (~Trollmann@user/trollmann)
[08:15:13] *** Joins: computerquip (sid423484@user/computerquip)
[08:15:13] *** Joins: Argorok (sid195487@hampstead.irccloud.com)
[08:15:13] *** Joins: rb (~augh@theguntretort.com)
[08:17:56] *** Joins: Tokamak (~Tokamak@172.58.191.72)
[08:19:59] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[08:21:31] *** Joins: pah (~pah@user/pah)
[08:23:58] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:39:02] *** Quits: cm007magnum (~Rheanna@101.68.251.194) (Ping timeout: 260 seconds)
[08:39:40] *** Joins: cm007magnum (~Rheanna@101.68.251.194)
[08:43:20] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (Quit: Ping timeout (120 seconds))
[08:43:42] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[08:44:24] *** Quits: BrandonArnold1 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com) (Ping timeout: 260 seconds)
[08:44:44] *** Joins: ferdna (~ferdna@user/ferdna)
[08:45:09] *** Joins: BrandonArnold1 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com)
[08:49:08] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[08:50:36] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:51:20] *** Joins: malloy (~jimery@116.30.220.108)
[08:58:50] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[08:59:54] *** Quits: manuels (~manuel@80.211.205.88) (Quit: The Lounge - https://thelounge.chat)
[09:00:32] *** Joins: manuels (~manuel@80.211.205.88)
[09:06:29] *** Quits: edr (~edr@user/edr) (Ping timeout: 244 seconds)
[09:07:06] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:07:08] *** Joins: edr (~edr@enlo.co)
[09:07:08] *** Quits: edr (~edr@enlo.co) (Changing host)
[09:07:08] *** Joins: edr (~edr@user/edr)
[09:12:56] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:17:11] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[09:24:41] *** Quits: talisein (~talisein@user/talisein) (Ping timeout: 245 seconds)
[09:32:41] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:37:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:54] *** ChanServ sets mode: +v npaperbot
[09:40:25] *** Quits: engest (~engest@50.53.244.75) (Ping timeout: 250 seconds)
[09:42:47] <amosbird> RandomReader: Yeah, I kinda think the same (it's a no-thread check)
[09:43:07] <amosbird> lmat: how wonky it is? I think it's valid to some degree
[09:53:30] *** Quits: frost (~frost@user/frost) (Ping timeout: 244 seconds)
[10:00:44] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:04:06] *** Joins: supernova (~quassel@2405:9800:ba11:6207:e80f:7fe4:8d57:5f68)
[10:04:36] *** Quits: emerent (~quassel@p200300cd574855efba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[10:05:50] *** Joins: emerent (~quassel@p200300cd574855efba27ebfffed28a59.dip0.t-ipconnect.de)
[10:15:24] *** Joins: talisein (~talisein@user/talisein)
[10:22:20] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[10:31:27] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:32:39] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[10:40:53] *** Joins: ambasta (~ambasta@89.46.62.147)
[10:44:29] <ambasta> Is it possible to have constrain on value instead of type? i.e. enum class Dim { One, Two,... }... template <typename T> concept EventConcept = (std::same_as<T::possibility, Dim::One> and std::same_as<T::x, double>) or( std::same_as<T::possibility, Dim::Two> and std::same_as<T::x, double> and std::same_as<T::y, double>) ... ;
[10:46:12] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[10:49:22] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[10:50:54] *** Joins: Terminus (~null@user/terminus)
[10:51:15] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[10:54:47] <ville> ambasta: sure but std::same_as works on types rather than values, so you'll have to use something else for that
[10:55:08] <ambasta> Is there something available in std already?
[10:56:43] <ville> doubt it. they only included things which were required by the standard library it self
[10:58:51] <ambasta> aight, thanks ville
[11:05:33] *** Quits: aegon (~mike@174.127.249.180) (Quit: leaving)
[11:09:19] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[11:20:46] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c84:9f64:7a7:24c5)
[11:23:00] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[11:23:48] *** Joins: Simplar (~Simplar@188.163.92.225)
[11:30:43] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:33:09] *** Joins: Fault (~Fault@152.70.112.168)
[11:34:23] *** Quits: FuraiTHD (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:37:46] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:41:45] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Client Quit)
[11:41:53] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:42:16] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:45:11] *** Joins: andreasbuhr (~quassel@p549db620.dip0.t-ipconnect.de)
[11:49:50] *** Quits: malloy (~jimery@116.30.220.108) (Ping timeout: 250 seconds)
[11:51:41] *** Joins: malloy (~jimery@116.30.220.108)
[11:53:32] *** pah is now known as pa
[11:53:35] *** Quits: AmR (~AmREiSa@156.199.218.104) (Quit: Konversation terminated!)
[11:55:52] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:57:27] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[11:58:21] *** Joins: Fault (~Fault@152.70.112.168)
[12:10:28] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[12:13:21] <Haohmaru> !rq
[12:13:21] <nolyc> Haohmaru: <hnOsmium0001> I should've quotegrabbed that but anyways...
[12:21:45] <LordKalma> !rq
[12:21:45] <nolyc> LordKalma: <ville> don't believe the cmake propaganda. make is fine
[12:33:11] <Haohmaru> the cmake gropapanda
[12:35:05] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[12:36:17] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[12:38:05] *** Quits: cm007magnum (~Rheanna@101.68.251.194) (Remote host closed the connection)
[12:39:43] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[12:39:53] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[12:51:27] <Haohmaru> !fact
[12:51:28] <nolyc> Haohmaru: There is one name space for macro names.
[12:51:38] <Haohmaru> huh?!
[12:51:50] <Haohmaru> oh, sure
[12:51:59] <Haohmaru> the global namespace i guess
[12:56:43] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[12:58:58] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[13:02:02] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[13:02:29] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:05:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[13:09:25] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:11:29] <LordKalma> https://i.gyazo.com/a10d43b62d27a89a2d7b16f516b4c3d4.png
[13:11:32] <LordKalma> am I a fullstack dev now?
[13:12:53] <Haohmaru> did you fill the stack?
[13:12:57] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[13:13:22] <LordKalma> I for sure needed a whole lot of stackoverflow for this shit
[13:13:34] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:16:22] <LordKalma> you know what's funny?
[13:16:42] <Haohmaru> farts
[13:16:49] <LordKalma> is that the create-react-app script installs a buttload of packages, many of which are deprecated hahah
[13:16:56] <LordKalma> typical JS
[13:22:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[13:24:42] <johnny> can't wait for webpack itself to become outmoded
[13:25:45] *** Joins: plastico (~plastico@neomutt/plastico)
[13:26:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:27:08] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:28:07] <LordKalma> in the time you took to answer, 4 new packages became the new standard and 34 were deprecated
[13:29:36] *** Joins: Fault (~Fault@152.70.112.168)
[13:29:47] <Haohmaru> is this where you have to press the "Hard-Refresh" button like mad?
[13:32:14] <LordKalma> react has hot reload
[13:32:16] <LordKalma> so no
[13:32:23] <LordKalma> just saving the files works :D
[13:32:40] <LordKalma> it's the advantage of it all being JS manipulating the DOM. it's always the same page ;)
[13:33:09] * Haohmaru doesn't schprachen ze HTML
[13:34:06] <LordKalma> well, HTML documents are trees basically
[13:34:11] <LordKalma> and you can modify the tree directly with JS
[13:34:15] <LordKalma> without reloading a new page :D
[13:34:39] <Haohmaru> terrible
[13:34:47] <Haohmaru> who's idea was this?
[13:36:10] <LordKalma> https://en.wikipedia.org/wiki/Document_Object_Model
[13:36:22] <LordKalma> "The principal standardization of the DOM was handled by the World Wide Web Consortium (W3C), "
[13:37:06] * Haohmaru sends a bag of a$$-woops to the W3C
[13:37:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:55] *** ChanServ sets mode: +v npaperbot
[13:40:17] <johnny> there's also shadow dom and such things. react itself uses a virtual dom and uses some sort of diffing algorithm
[13:45:38] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:45:49] <Haohmaru> !fact
[13:45:50] <nolyc> Haohmaru: A union shall not have base classes.
[13:45:53] <LordKalma> yes, react keeps its own object tree
[13:45:59] <LordKalma> and uses that to update the DOM only when required
[13:46:17] <Haohmaru> but a union can be a baseclass to something else, right?
[13:47:19] <ville> no
[13:47:39] <Haohmaru> hm
[13:48:37] <Haohmaru> {} union U { int a; int b; }; struct S : public U { float x; };
[13:48:38] <geordi> error: base type 'U' fails to be a struct or class type
[13:49:18] <ville> http://www.eelis.net/c++draft/class.derived#general-2.sentence-2
[13:49:44] <Haohmaru> but it can have constructors and methods
[13:54:55] <ville> although... i am not sure that's sufficient rule. as far as i remember unions are class types
[13:55:31] <Haohmaru> weren't they more like struct (default public access) ?
[13:55:35] *** Quits: ambasta (~ambasta@89.46.62.147) (Remote host closed the connection)
[13:57:26] <LordKalma> This subject is #c++ erotic material
[13:57:56] * Haohmaru turns off LordKalma's javascripts
[14:05:56] <ville> http://www.eelis.net/c++draft/class.union#general-1 seems to say union is a class type
[14:07:02] <ville> and elsewhere in the standard they sometimes say class type and then explicitly say not union or union included. guess they've forgot to put that in there
[14:07:27] <ville> http://www.eelis.net/c++draft/class.union#general-4.sentence-3
[14:10:03] *** Joins: Simplar (~Simplar@188.163.92.225)
[14:13:01] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[14:13:07] <Haohmaru> ville "ykwim" ;P~
[14:13:25] <Haohmaru> they should sprinkle some of that
[14:18:55] *** Joins: Guest38 (~Guest38@49.207.217.150)
[14:19:15] <Guest38> I want to use https://github.com/uNetworking/uWebSockets in my project. I have added this in my conanfile.py"uwebsockets/20.8.0" however I am not able to #include <uwebsockets/App.h> saying file not found. What do I do in conan or cmake so that the library is available ?
[14:22:44] <Haohmaru> who's saying it? the compiler?
[14:23:07] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:23:31] <LordKalma> who packaged uwebsockets?
[14:23:49] <smallville7123> is this normal? https://gist.github.com/mgood7123/9339d1c45e14ed4967f14901db444095
[14:23:51] <Guest38> at the time of build with cmake --build ./build
[14:25:14] <LordKalma> Guest38, anyway, that's not enoygh info
[14:25:25] <LordKalma> you'd have to show us both your cmake file and your conanfile
[14:26:09] <smallville7123> as this works in a fresh build with a non-existant build directory, but when i try to rebuild i sometimes get that even though nothing has changed in those files
[14:26:44] <Guest38> LordKalma Give a min, uploading to github.
[14:26:50] <LordKalma> np
[14:28:05] <LordKalma> So, first things first
[14:28:11] <LordKalma> looking at the recipe for uwebsockers
[14:28:12] <LordKalma> dst=os.path.join("include", "uWebSockets"),
[14:28:26] <LordKalma> so it would be #include <uWebSockets/App.h>
[14:28:31] <LordKalma> casing important
[14:29:12] <LordKalma> https://github.dev/conan-io/conan-center-index/blob/7da6bd7496bd69034a7fe05f35adab7b1b535324/recipes/uwebsockets/all/conanfile.py#L94
[14:29:52] <LordKalma> dst=os.path.join("include", "uWebSockets", "f2"), suggests the *.hpp files are under uWebSockets/f2
[14:30:00] <LordKalma> this is likely mimicking the official docs
[14:30:48] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:32:08] <Guest38> LordKalma This is the only change I have done in the project. https://github.com/shadow-fox/coreservice/blob/main/conanfile.py#L18
[14:32:50] <LordKalma> generators = "cmake", "gcc", "txt", "cmake_find_package" # What the hell? you clearly don't need all of those
[14:33:06] <LordKalma> also, what the hell with those boolean options?
[14:33:14] <Guest38> I am just using one of the starter kit from github.
[14:33:21] <LordKalma> who wrote this crap?
[14:33:28] <Guest38> This is the one I have cloned: https://github.com/cpp-best-practices/cpp_starter_project
[14:33:40] <LordKalma> of course...
[14:34:17] <LordKalma> anyway
[14:34:19] <LordKalma> as I said
[14:34:24] <LordKalma> try #include <uWebSockets/App.h>
[14:34:27] <LordKalma> with that casing
[14:35:48] <Guest38> LordKalma It compiles, However it fails at build.
[14:35:57] <LordKalma> Turner is amazing with his work and all, but his starter projects aren't starter project. they are massively heavy, all including, project boilerplate that a noob wont need, wont understand, and wont navigate
[14:36:00] <Guest38> pushed the same in the repo in main.cpp
[14:36:09] <LordKalma> compiling and building is the same thing
[14:37:16] <Guest38> This is the error: https://gist.github.com/shadow-fox/8822e00a54eed57e8959001945950977
[14:37:24] <LordKalma> did you linked uwebsockets in your cmakelists?
[14:37:37] <LordKalma> https://github.com/shadow-fox/coreservice/blob/main/src/CMakeLists.txt#L50
[14:37:39] <LordKalma> nope, you didn't
[14:38:19] <LordKalma> you're new to this stuff, right?
[14:38:43] <Guest38> yes sir
[14:39:07] <LordKalma> well, you choose the most complicated starter project around
[14:39:09] <smallville7123> does INTERFACE build a library as static or shared?
[14:39:24] <LordKalma> smallville7123, INTERFACE doesn't build anything
[14:39:29] <Guest38> any other starter project which is easy start with ?
[14:39:35] <smallville7123> oh
[14:39:45] <LordKalma> Guest38, https://github.com/friendlyanon/cmake-init probably that one
[14:39:50] <LordKalma> or even better
[14:39:50] <LordKalma> https://github.com/friendlyanon/cmake-init-conan-example
[14:40:00] <LordKalma> just look at this and use bits and pieces from i
[14:40:02] <LordKalma> it*
[14:40:12] * smallville7123 has no idea why i get "[ 19%] Built target Diligent-ApplePlatform " then since it is defined as INTERFACE
[14:40:23] <LordKalma> but the best would be to learn these things separately
[14:40:32] <LordKalma> first c++, then cmake, then conan
[14:40:40] <LordKalma> smallville7123, code and log, you know the drill
[14:41:06] <Simplar> What's more time efficient for processing a bunch of input strings up to 61 characters, each string on a separate line? Read char by char, or line by line?
[14:41:27] <LordKalma> try both, profile, and then tell us
[14:41:48] <smallville7123> would it be UB to "add_library(lib file.cpp)" without stating SHARED, STATIC or INTERFACE ?
[14:41:55] <LordKalma> no
[14:42:00] <LordKalma> in fact, that's the right way to do things
[14:42:06] <LordKalma> there's CMAKE_BUILD_SHARED flag
[14:42:21] <LordKalma> if you have a library that you're developing that people may want to use as either static or shared
[14:42:23] <LordKalma> that's how do you it
[14:42:28] <smallville7123> hmm ok
[14:42:33] <LordKalma> PLEASE PLEASE PLEASE dont build both and DO NOT ADD YOUR OWN BOOLEAN FLAG
[14:42:42] <LordKalma> I'm tried of seeing that shit around.
[14:43:10] <Guest38> LordKalma For this starter project anyway, adding uwebsockets to the target_link_libraries ends up with the same error: fatal error: 'uWebSockets/App.h' file not found
[14:43:14] <LordKalma> smallville7123, when are you reading Professional CMake and actually gain systematic knowledge on what you're doing
[14:43:59] <LordKalma> Guest38, well, I don't know if you added it correctly. It's too much of a heavy starter project to really understand what the hell is going on, really.
[14:44:00] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:44:14] <LordKalma> the fact jason is using cmake and cmake_find_package generator, and then only using the cmake names generated
[14:44:24] <LordKalma> tjhat "best practices starter project" is anything but
[14:44:42] <Guest38> I did push to the github.
[14:44:44] <smallville7123> then it appears that somehow the CMAKE_BUILD_SHARED is being set to true (even though ag cannot find it)
[14:45:13] <LordKalma> smallville7123, sorry, the flag is https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html
[14:45:19] <smallville7123> as if i explicitly set it to SHARED then the reference gets undefined even tho it exists in the dylib
[14:45:50] <LordKalma> smallville7123, project and log....
[14:46:17] * smallville7123 finds 14 references to it
[14:47:16] <smallville7123> in glfw i have    option(BUILD_SHARED_LIBS "Build shared libraries" OFF)
[14:47:32] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[14:47:52] <LordKalma> options only affect their directory and below
[14:47:57] <LordKalma> so that's fine
[14:48:01] <smallville7123> and in raylib i get option(BUILD_SHARED_LIBS "Build raylib as a shared library" OFF)
[14:48:08] <LordKalma> still fine
[14:48:24] <smallville7123> in the root cmake i have set(BUILD_SHARED_LIBS TRUE)
[14:48:52] <LordKalma> since normal variables shadow cache variables, that's still fine
[14:49:17] <smallville7123> hmm ok
[14:49:18] <Guest38> LordKalma Can you check whether I have done it right ?
[14:49:25] <Simplar> a 1-byte character string of length 61 is considered a small string or a large string?
[14:49:34] <Simplar> i'm unsure if it's stored as vector of chars or not
[14:50:01] <smallville7123> add_subdirectory(OpenGLWindow) includes the Diligent-ApplePlatform
[14:50:09] <LordKalma> you shouldn't care about those implementations, Simplar. if you're talking about std::string and small string optimization, you still don't care :)
[14:50:34] <LordKalma> Guest38, it would be uwebsockets::uwebsockets (probably)
[14:50:38] <LordKalma> so yeah, it's wrorng
[14:50:43] <Simplar> So if I have 50k lines in user input, for example, and I need to process each line in a specific way...
[14:50:53] <Simplar> then i am better off with chars
[14:50:55] <smallville7123> and https://gist.github.com/mgood7123/427677b4c992c38bdf15902eb32a8410 is the ummm ag of it
[14:51:00] <LordKalma> and as I said, I recomend you to take a step back and try to lean these things individually and sistematically
[14:51:40] <LordKalma> smallville7123, you're going to just rant alone if you don't provide log, code, and an actual description of the problem btw, which I haven't yet understood whaat is it
[14:51:56] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[14:52:44] <smallville7123> do i need to explicitly set shared libs to false before i include the cmake that needs to be built statically and then restore it after?
[14:53:01] <LordKalma> if you want those things to be build statically, yes
[14:53:12] <LordKalma> the best way, hoever, would be for you to lean superbuild patterns
[14:54:57] <smallville7123> hmm even if remove the build dir and "set(BUILD_SHARED_LIBS TRUE)" before i include the project it still gets built as static
[14:55:10] <Simplar> https://www.mycompiler.io/view/FHKhTll Why does it not see / print new lines?
[14:55:13] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:55:20] <Simplar> in the Input tab, those are present
[14:55:45] <Simplar> if(c=='\0') cout << 'newline'; did no output
[14:55:54] <smallville7123> nvm i forgot to remove STATIC from the "add_library(Diligent-ApplePlatform "
[14:56:24] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[14:56:27] *** Joins: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net)
[14:57:17] <LordKalma> Simplar, new lines is what "inputs" the data to cin
[14:57:23] <smallville7123> ok i get undefined reference when building it as a SHARED library but i dont get undefined reference when building it as a static library
[14:57:29] <LordKalma> it doesn't actually has a new line char in the acquired data
[14:57:43] <LordKalma> I don't think you're clear on how cin works, better go read it up
[14:57:47] <Guest38> I am start from zero on cmake.
[14:57:51] <Guest38> Thanks LordKalma
[14:57:52] <smallville7123> why is it undefined if it is a shared library?
[14:57:57] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:60ca)
[14:58:06] <LordKalma> idk, apple platform frameworks are dumb shit that I don't understand
[14:58:24] <LordKalma> Guest38, professional cmake is a book by Craig Scott that I 100000%%% recommend
[14:58:36] <LordKalma> if you want to be serious about this stuff
[14:58:40] <LordKalma> and not like smallville7123  :P
[14:58:51] <Simplar> if I do cin.get(c) it does new lines
[14:58:57] <smallville7123> as nm shows for the shared library:
[14:58:58] <smallville7123> 00000000000101e8 d __ZN8Diligent20DebugMessageCallbackE
[14:59:19] <LordKalma> that's some apple framework crap, right?
[14:59:37] <smallville7123> and for the static library
[14:59:44] <LordKalma> cmake has documentation on how you link with apple frameworks. read it
[14:59:45] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:59:52] <very_sneaky> one of my coworkers asked me why i wanted to switch to cmake from our bespoke build system today. "It's documented" was my response - he was like "oh wow you read documentation? I just ask ben when i have a problem"
[14:59:56] <smallville7123> 0000000000000348 D __ZN8Diligent20DebugMessageCallbackE
[14:59:58] <very_sneaky> i have a feeling this will be a rocky transition
[15:00:58] <LordKalma> very_sneaky, well, we all make questions in this channel that we could very well google about/read about, that's for sure. sometimes just out of laziness, sometimes to get the convo going
[15:01:05] <LordKalma> it's not all interesting discussion
[15:01:21] <LordKalma> that's not bad, of course it isn't, and I'm very much "guilty" of it
[15:01:33] <very_sneaky> agree. i was disappointed that he hadn't even tried to locate the existing documentation of our bespoke build system though lol
[15:01:41] <LordKalma> what bothers me personally is the apathy for systematic acquisition o f knowledge
[15:01:58] <very_sneaky> yeah that's bad
[15:02:07] <Simplar> made it
[15:02:17] <LordKalma> like, I ask random small dumb crap, but I like to lean things systematically in the bottom line
[15:02:23] <very_sneaky> it frustrates me when there's no culture of "put in some effort to understand your problem before you ask questions" - don't just outsource your thinking to someone else
[15:02:32] <Simplar> char c; while(cin.get(c)) { if(c == 10) //newline }
[15:04:00] <LordKalma> what bothers me the most is like when you notice people are asking every single step in their process because they clearly don't have the smallest understanding of the tooling they are using. º
[15:04:12] <LordKalma> Reading the official cmake tutorial (which now exists! isn't that hard)
[15:04:28] <very_sneaky> that actually frustrates me less - it's hard to start when you don't know what you're doing. That's when you take them back to basics though
[15:04:38] <LordKalma> I foudn that reading the "overview" sections of crap I want to use is amazing
[15:04:59] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 250 seconds)
[15:05:00] <very_sneaky> yeah, there's definitely an art to reading documentation efficiently - takes some practice
[15:05:11] <LordKalma> In fact, yesterday I enjoyed seeing this in react docs: https://reactjs.org/docs/getting-started.html#learn-react
[15:05:16] <LordKalma> If you prefer to learn by doing, start with our practical tutorial.
[15:05:19] <LordKalma> If you prefer to learn concepts step by step, start with our guide to main concepts.
[15:05:25] <very_sneaky> some members of my team are learning to use git for the first time right now - it took some serious encrouragement to get them to read the first 3 chapters of the pro git book
[15:05:26] <LordKalma> I just don't agree with the text.
[15:05:31] <LordKalma> you should deffo do BOTH
[15:05:54] <very_sneaky> agree, some people have an order of preference though
[15:06:01] <LordKalma> I scrolled the tutorial, then read the overview, then went back to the tutorial
[15:06:02] <very_sneaky> i certainly learnt git by doing rather than by theory
[15:06:07] <LordKalma> hahaha same same :P
[15:06:26] <very_sneaky> i recently started going through hackers guide to git - so good.
[15:06:28] <LordKalma> I learned git by using the vscode tooling until I understood it :D
[15:06:34] <very_sneaky> i now understand what cherry picks and rebases are
[15:06:54] <LordKalma> at my workplace (not a software house, at least) people don't even know that git isn't github
[15:06:54] <very_sneaky> and that a "branch" is just a file with a commit in it, lol
[15:07:14] <LordKalma> that there is more to life than github
[15:07:20] <LordKalma> that there is more to life than github  *desktop application, I mean
[15:07:22] <very_sneaky> yeah i'm in a similar spot. lots of people in my team are analysts who are software adjacent
[15:07:38] <very_sneaky> so useful for them to know so they can interact with it, but not software people
[15:07:50] <LordKalma> I'm not asoftware person
[15:07:55] <smallville7123> it does not seem like extern "C" fixes it
[15:08:00] <very_sneaky> electrical eng right?
[15:08:06] <very_sneaky> or electronic
[15:08:18] <LordKalma> physics by master, phding in telecom
[15:08:40] <smallville7123> even though basically every stackoverflow says it is because you are not using extern "C"
[15:09:03] <very_sneaky> gotcha. you're doing better than most academics then
[15:09:22] <LordKalma> smallville7123, maybe go read cmake docs about linking with apple frameworks as I've been saying you for the last half an hour
[15:09:35] <very_sneaky> i honestly think software eng/comp sci is the best supplementary expertise to have for science/stem generally
[15:09:42] <smallville7123> it is not an apple framework
[15:09:45] <LordKalma> of course it is
[15:10:00] <LordKalma> (re very_sneaky )
[15:10:00] <smallville7123> it is a shared library
[15:10:06] <Simplar> Wait so if I input my strings in the multimap, char by char, they automatically get sorted?
[15:10:21] <LordKalma> smallville7123, sorry, when you linked that first log it looked it was apple framework stuff
[15:10:23] <very_sneaky> it frustrates me that my view isn't shared more widely. a lot of people see the software side as superfluous
[15:10:34] <LordKalma> well, thing is
[15:10:39] <LordKalma> at work, we all do some coding
[15:10:45] <LordKalma> most matlab, me and another few do python
[15:10:53] <LordKalma> very little know any decent VCS
[15:10:57] <very_sneaky> do you work at my work
[15:11:00] <very_sneaky> lol
[15:11:11] <LordKalma> some do a couple of C++ but it's fucking trash of code
[15:11:13] <smallville7123> also it is probably not "FRAMEWORK" either as that is mostly for XCode/App Bundles
[15:11:24] <LordKalma> it's barely C-with-classes quality code
[15:11:33] <LordKalma> like single file procedural coding
[15:11:36] <smallville7123> and i dont get tons of undefined references as i dont use FRAMEWORK
[15:11:57] <LordKalma> smallville7123, I don't meant you're building a frameworkr
[15:12:08] <LordKalma> I meant it looked like you needed to LINK WITH an apple framework
[15:12:20] <smallville7123> yea
[15:12:49] <smallville7123> thr symbol itself is in the dylib which sais is undefined even though it also exists in the .a which is not undefined
[15:13:00] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[15:13:16] <LordKalma> smallville7123, just give us the build log
[15:13:32] <LordKalma> unless you're just venting, then carry on
[15:13:42] <cbreak> smallville7123: have you ever looked at man nm?
[15:14:08] <cbreak> it will tell you that lowercase letters mean local symbols, uppercase letters mean global symbols
[15:14:30] <smallville7123> https://gist.github.com/mgood7123/b9e1e5216e2c89d7e7879e8a7269ca8c
[15:14:30] <very_sneaky> LordKalma: yep, same. It's frustrating to deal with. I take the view that you should master the tools you use, a lot take the view that the tool isn't important, it's only the science that's important, and I'm just like "por que no los dos?"
[15:14:58] <LordKalma> master may be an overstatement
[15:15:04] <LordKalma> but at least understand github isn' git
[15:15:14] <very_sneaky> i think you can go further than that
[15:15:19] <smallville7123> cbreak: so if shared uses a local symbol it cannot be found when linking?
[15:15:24] <lionkor> oh god dont get me started on gh desktop >:(
[15:15:29] *** Quits: gggp (~gggp@111-251-148-239.dynamic-ip.hinet.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:15:37] <very_sneaky> a lot of people at work deliberately avoid templating where it's an obvious design choice because it's "harder for people to read and understand"
[15:15:56] *** Joins: paul424 (~tom@ip-37-248-157-216.multi.internet.cyfrowypolsat.pl)
[15:15:58] <lionkor> code is hard to understand, let's write less of it
[15:16:04] <very_sneaky> basically
[15:16:19] <very_sneaky> in this case they actually end up writing more, and duplicating a lot
[15:16:27] <LordKalma>  " "_DebugMessageCallback", referenced from:" hum............
[15:16:37] <LordKalma> it's looking for an unmangled name, indeed
[15:17:27] <smallville7123> LordKalma: forgot to remove the extern C
[15:17:29] <smallville7123> "Diligent::DebugMessageCallback", referenced from:
[15:17:32] <LordKalma> smallville7123, where does "_DebugMessageCallback" supposed to come from?
[15:17:43] <smallville7123> platform apple
[15:18:07] <smallville7123> Diligent-ApplePlatform.a/Diligent-ApplePlatform.dylib
[15:18:33] <LordKalma> and is that installed?
[15:18:42] <smallville7123> in the header it is
[15:18:54] <LordKalma> smallville7123, the reason why it doesn't complain with static libraries is that with static libraries the "linking" is defered
[15:18:55] <smallville7123> extern DebugMessageCallbackType DebugMessageCallback;
[15:18:58] <LordKalma> so you wouldn't know
[15:19:20] <smallville7123> and in the implementation it is
[15:19:21] <smallville7123> DebugMessageCallbackType DebugMessageCallback = AppleDebug::OutputDebugMessage;
[15:19:22] <LordKalma> you have to install the required framework if you don't have it
[15:19:56] <smallville7123> it is being build as a subdir
[15:20:21] <LordKalma> and do you have it in the target_link_libraries?
[15:20:25] <smallville7123> ./build/OpenGLWindow/MultiTouch/DiligentLog/Platforms/Apple/libDiligent-ApplePlatform.dylib
[15:20:34] <smallville7123> yes
[15:20:37] <LordKalma> what I see here is a PERFECT use case for super builds
[15:21:11] <smallville7123> it only fails if it is dylib, it works fine if it is .a but i dont know why
[15:21:20] <LordKalma> I told you why 5 lines above
[15:21:32] <LordKalma> <LordKalma> smallville7123, the reason why it doesn't complain with static libraries is that with static libraries the "linking" is defered (to the time you actually use the static library)
[15:21:37] <LordKalma> so there is no problem with missing symbols
[15:22:07] <LordKalma> This is a perfect example of a super build:
[15:22:08] <LordKalma> https://github.com/SerenityOS/serenity/blob/master/CMakeLists.txt#L68
[15:22:18] <LordKalma> you basically treat each thing as an indeopendent cmake build
[15:22:25] <LordKalma> and the root cmake just controls the sub builds
[15:22:34] <LordKalma> and you even use "find package" and all in each sub build
[15:22:40] <LordKalma> instead of target spagetty
[15:22:47] <LordKalma> and you have a perfect use case for it right there
[15:23:43] <smallville7123> so why does it fail for the dylib?
[15:23:53] *** Joins: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c)
[15:24:25] <LordKalma> because the dylib has to resolve symbols, aactually have a linking step
[15:25:07] <LordKalma> very_sneaky, smallville7123 which one of you was the one trying to make conan packages recently?
[15:25:20] <very_sneaky> i made a couple
[15:25:51] <smallville7123> so why cant it resolve the symbol?
[15:26:02] <LordKalma> the fuck I know
[15:26:09] <LordKalma> bugs in your cmake, missing libraries, idk
[15:26:14] <smallville7123> :(
[15:26:27] <LordKalma> I just said it doesn't fail on static because it doesn't try, basically
[15:26:38] <LordKalma> very_sneaky, so all this dicussion and you didn't learn decently about static vs shared libs :p you did ask a LOT about that heheh
[15:29:06] *** Joins: Burgundy (~yomon@86.127.194.72)
[15:30:45] <LordKalma> I'm particularly being an ass today, I know
[15:30:58] <cbreak> smallville7123: yes. Local symbols are internal only
[15:31:25] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[15:32:10] <very_sneaky> i know what they are :P
[15:32:17] <very_sneaky> some of the details i still find confusing
[15:32:49] <cbreak> smallville7123: look at the code. How is that symbol defined?
[15:33:05] <cbreak> smallville7123: look at your command line. how is the TU containing that symbol compiled?
[15:33:16] <cbreak> make VERBOSE=1 should show that (with cmake)
[15:39:38] <smallville7123> https://gist.github.com/mgood7123/4c09cbf4925ef406955ec9015a974a3c
[15:40:01] * smallville7123 cant figure out how to enable wrapping on gist
[15:40:18] <very_sneaky> smallville7123: things to check: (1) look at your CMakeLists.txt. Are you linking against the required library? (2) Have you got the right #includes? Are the includes visible from the location at which you call Log::Log_String(...)? (3) Do you have the appropriate include path in your build command? i.e., `-I/path/to/library/includes/containing/_DebugMessageCallback/definition` (4) Do you have
[15:40:21] <very_sneaky> the appropriate library path in your build command? i.e., `-L/path/to/xxx.dylib` (5) Are you compiling your code as a static library, and attempting to link to the dependency as a shared library, and then consuming your static library without linking to the shared library? This won't work
[15:42:18] <very_sneaky> you can view the raw build/link commands in build/CMakeFiles/yourprogram.dir/{link.txt, flags.make}
[15:42:20] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[15:42:58] <very_sneaky> adding the VERBOSE=1 environment variable to your build command dumps some of this out which can be helpful but you can see the raw commands in those files anyway
[15:43:42] <smallville7123> very_sneaky: and the gist doesnt tell you those commands?
[15:43:59] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 250 seconds)
[15:44:31] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:45:12] <very_sneaky> it does, i'm not familiar with the libraries you're trying to use though or which is problematic
[15:45:34] <very_sneaky> looks like you're mixing static libs and dynamic libs
[15:47:00] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[15:49:02] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[15:52:54] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[16:00:35] *** Joins: Leone (~Leo@45.72.233.136)
[16:03:24] <very_sneaky> smallville7123: I haven't written code that looks like this in a while - is DebugMessageCallback actually defined anywhere? it looks like you have a function pointer declaration with no definition or assignment
[16:03:37] *** Quits: paul424 (~tom@ip-37-248-157-216.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[16:04:26] <smallville7123> i ended up changing it to this
[16:04:28] <smallville7123> https://github.com/mgood7123/DiligentLog/blob/main/Platforms/CMakeLists.txt
[16:04:35] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:06:25] <very_sneaky> it's working now?
[16:11:05] <very_sneaky> i tried to build your project
[16:11:22] <very_sneaky> your relative includes are inconsistent with your project structure
[16:11:37] <very_sneaky> seems to assume paths outside of your project
[16:24:04] <smallville7123> what do you mean
[16:24:51] <very_sneaky> `fatal error: '../../../../../MultiTouch/DiligentLog/Primitives/interface/FormatString.hpp' file not found`
[16:26:02] <smallville7123> oh
[16:26:07] <very_sneaky> `MultiTouch` is outside of the `DiligentLog` project dir, should be `#include "../../../Primitives/interface/FormatString.hpp"`
[16:26:10] <very_sneaky> there a bunch like that
[16:26:35] <smallville7123> yea
[16:27:09] <smallville7123> it was originally part of MultiTouch to make it compile standalone
[16:31:36] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[16:35:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:35:36] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:38:00] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[16:41:29] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[16:45:03] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[16:45:24] *** Joins: plastico (~plastico@neomutt/plastico)
[16:45:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:89a6:1aba:4d2d:ccbe)
[16:45:58] <cart_man> A long time ago someone in this channel told me that this notaion -> !!std::unqiue_ptr<x>  is a cheeky way of checking for a valid pointer?
[16:46:22] <cart_man> However... if you do this !!x  notation would it return TRUE if it is valid?
[16:47:07] *** Joins: wnbeser (~wnbeser@91-154-216-100.elisa-laajakaista.fi)
[16:47:27] *** Quits: wnbeser (~wnbeser@91-154-216-100.elisa-laajakaista.fi) (Client Quit)
[16:47:33] <TinoDidriksen> Using !!x to test for whether the pointer is null is quite common.
[16:48:55] <Raziel> { int* x = nullptr; cout << !!x;}
[16:48:56] <geordi> false
[16:49:11] <Raziel> { int* x = new int; cout << !!x;}
[16:49:11] <geordi> true
[16:50:15] <Raziel> yep seems fine to me
[16:50:16] <TinoDidriksen> Or rather, to cast a pointer to bool.
[16:56:25] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 260 seconds)
[16:56:47] <Simplar> I've ran my program
[16:57:04] <Simplar> and seems like my while(cin >> c) loop keeps taking more and more and more lines from me
[16:57:10] <Simplar> how do I stop it after n lines?
[16:58:00] <Raziel> you use a counter and break once counter == n
[16:58:26] <Raziel> if you're storing those lines in a container, you can use container.size as the counter
[16:58:52] <Simplar> Mkays
[16:59:00] <Simplar> So... Here is my short program: https://www.mycompiler.io/view/0XdWnqE
[16:59:33] <Simplar> it takes the following inputs: first line takes number n that is the number of next consecutive input lines
[17:00:08] <Simplar> next lines are strings of maximum length 61 that can only contain 0-9a-zA-Z characters
[17:00:35] <Simplar> the task this program carries out is to compare which string is the 'largest' among all them.
[17:01:06] <Raziel> there's a lot of superfluous stuff in there
[17:01:24] <Raziel> you don't need ni, you don't need the pair<string, uint8> because you never need the uint8
[17:02:02] *** Quits: pa (~pah@user/pah) (Ping timeout: 240 seconds)
[17:03:32] *** Joins: pah (~pah@user/pah)
[17:03:45] <Simplar> 'Largest' is defined as 'the string with largest length and, if string lengths is equal, they are compared char by char, and whatever string's first different char (reading right to left) has larger index in `lib` variable,  is considered bigger'. If multiple strings are largest, their indexes (which are order number of input) are listed each on a separate line.
[17:04:14] <Simplar> in ascending order
[17:04:15] <Raziel> oh, so you do need to save the initial order as indexes because of that
[17:04:22] <Simplar> That's true
[17:04:35] <Simplar> I still don't need ni?
[17:05:13] <Raziel> yeah
[17:05:17] <Simplar> I would simply compare the strings btw
[17:05:25] <Simplar> if the ascii table would be in accordance with lib
[17:05:28] <Simplar> but it is not :\
[17:05:34] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[17:05:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[17:06:12] <Simplar> Ah yes @Raziel I also remove leading zeros
[17:06:56] <Simplar> How come do I not need pair<string,uint8_t> ?
[17:07:13] <Raziel> you kinda do since you need the initial indexes, I just hadn't noticed that at first :p
[17:08:09] <Simplar> Aha!
[17:08:19] <Simplar> I can use str.erase(0, min(str.find_first_not_of('0'), str.size()-1)); to remove leading zeros from str
[17:09:30] <Raziel> https://wandbox.org/permlink/2zUdVtVVTYRuC5dN
[17:09:33] <markand> never seen !!foo in any project in the wild myself
[17:09:36] <Raziel> this works, as far as input.
[17:09:47] <Raziel> doesn't look like the actual finding of the largest string works tho
[17:09:56] <Raziel> ohwait
[17:10:52] <Raziel> https://wandbox.org/permlink/ykGb8xbgAKxxxYXy I had accidentally put the wrong thing into the pair :p
[17:12:04] <Simplar> Raziel: lol
[17:12:06] <Simplar> Ive noticed
[17:12:12] <Simplar> Very smart approach with v.size
[17:12:15] <Simplar> wouldn't think of it ;o
[17:13:59] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[17:16:22] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:18:36] <Simplar> Raziel: the original task involved factorials, btw, but getting a factorial is a ... costy ... operation.
[17:19:15] <PJBoy> calculating factorial doesn't take long
[17:19:27] <Raziel> yeah, calculating is fine
[17:19:46] <Simplar> Let me state the actual problem (since I will not beg for solution, as I've thought it out)
[17:19:56] <Raziel> getting all permutations with repetitions of a set, of which there are size of set factorial, is not as fine
[17:20:12] <Raziel> you can parallelize it, at least. v:
[17:20:33] <PJBoy> there's only 21 factorials smaller than a 64-bit int
[17:20:37] <PJBoy> so you can lookup table it
[17:21:09] <Raziel> wait no, permutations without repetition is factorial. with repetitions is even worse.
[17:23:03] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:23:29] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[17:24:19] <Simplar> The original task was kinda the following: suppose you have a numeric system based on factorials, with an alphabet 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ. There is a function val(d) where d is a char from the alphabet. val('0')=0, ..., val('9')=9, val('a')=10, etc. Each input string has a number in that system, equal to: val(d_i[n])*n!+val(d_i[n-1])*(n-1)!+...+val(d_1[1])*1!. The notation d_i[n] means that an nth char of
[17:24:19] <Simplar> the string has index i in the alphabet.
[17:25:13] <Simplar> so it reads chars from right to left
[17:25:29] <Simplar> and this is why i didn't want to decode anything into decimal
[17:25:38] <LordKalma> {for(uint64_t i{0}; i<22; ++i) cout << factorial(i) << " ";} uint64_t factorial(uint64_t n) {if(n > 1) return n * factorial(n - 1); return 1;}
[17:25:39] <geordi> 1 1 2 6 24 120 720 5040 40320 362880 3628800 39916800 479001600 6227020800 87178291200 1307674368000 20922789888000 355687428096000 6402373705728000 121645100408832000 2432902008176640000 14197454024290336768
[17:25:51] <LordKalma> damn, geordi is actually kinda fast
[17:25:55] <Simplar> Provided by task, it has a time limit of 1 seconds and real time limit of 5 seconds, and tests can consists of up to 50k numbers
[17:26:04] <LordKalma> {for(uint64_t i{0}; i<23; ++i) cout << factorial(i) << " ";} uint64_t factorial(uint64_t n) {if(n > 1) return n * factorial(n - 1); return 1;}
[17:26:05] <Simplar> written in that numeric system
[17:26:05] <geordi> 1 1 2 6 24 120 720 5040 40320 362880 3628800 39916800 479001600 6227020800 87178291200 1307674368000 20922789888000 355687428096000 6402373705728000 121645100408832000 2432902008176640000 14197454024290336768 17196083355034583040
[17:26:29] <PJBoy> CPUs can do like 50 billion floating point operations per second
[17:26:29] <LordKalma> PJBoy, you mean signed ints?
[17:26:41] <LordKalma> *meant
[17:27:01] <LordKalma> {for(uint64_t i{0}; i<23; ++i) cout << factorial(i) << " ";} uint64_t factorial(uint64_t n) {if(n > 1) return n * factorial(n - 1); return 1;}
[17:27:02] <geordi> Same output.
[17:27:12] <LordKalma> {for(uint64_t i{0}; i<40; ++i) cout << factorial(i) << " ";} uint64_t factorial(uint64_t n) {if(n > 1) return n * factorial(n - 1); return 1;}
[17:27:13] <geordi> 1 1 2 6 24 120 720 5040 40320 362880 3628800 39916800 479001600 6227020800 87178291200 1307674368000 20922789888000 355687428096000 6402373705728000 121645100408832000 2432902008176640000 14197454024290336768 17196083355034583040 8128291617894825984 10611558092380307456 7034535277573963776 16877220553537093632 12963097176472289280 12478583540742619136 11390785281054474240 9682165104862298112 4999213071378415616 12400865694432886784 34001982946751
[17:27:20] <LordKalma> the first 40 definitely overflow
[17:27:44] <Simplar> this is why they chose alphabet of 61 different chars?
[17:28:40] <LordKalma> {for(uint64_t i{0}; i<40; ++i) cout << i << ": " factorial(i) << "; ";} uint64_t factorial(uint64_t n) {if(n > 1) return n * factorial(n - 1); return 1;}
[17:28:40] <geordi> error: expected ';' before 'factorial' (fix known)
[17:28:49] <LordKalma> {for(uint64_t i{0}; i<40; ++i) cout << i << ": " << factorial(i) << "; ";} uint64_t factorial(uint64_t n) {if(n > 1) return n * factorial(n - 1); return 1;}
[17:28:49] <geordi> 0: 1; 1: 1; 2: 2; 3: 6; 4: 24; 5: 120; 6: 720; 7: 5040; 8: 40320; 9: 362880; 10: 3628800; 11: 39916800; 12: 479001600; 13: 6227020800; 14: 87178291200; 15: 1307674368000; 16: 20922789888000; 17: 355687428096000; 18: 6402373705728000; 19: 121645100408832000; 20: 2432902008176640000; 21: 14197454024290336768; 22: 17196083355034583040; 23: 8128291617894825984; 24: 10611558092380307456; 25: 7034535277573963776; 26: 16877220553537093632; 27: 129630971
[17:29:13] <Simplar>  {for(uint64_t i{0}; i<62; ++i) cout << i << ": " << factorial(i) << "; ";} uint64_t factorial(uint64_t n) {if(n > 1) return n * factorial(n - 1); return 1;}
[17:29:14] <geordi> 0: 1; 1: 1; 2: 2; 3: 6; 4: 24; 5: 120; 6: 720; 7: 5040; 8: 40320; 9: 362880; 10: 3628800; 11: 39916800; 12: 479001600; 13: 6227020800; 14: 87178291200; 15: 1307674368000; 16: 20922789888000; 17: 355687428096000; 18: 6402373705728000; 19: 121645100408832000; 20: 2432902008176640000; 21: 14197454024290336768; 22: 17196083355034583040; 23: 8128291617894825984; 24: 10611558092380307456; 25: 7034535277573963776; 26: 16877220553537093632; 27: 129630971
[17:29:27] <LordKalma> the bot only shows one line of IRC text
[17:30:18] <PJBoy> factorial of 21 is wrong there
[17:30:21] <PJBoy> so I was right
[17:30:31] <LordKalma> indeed
[17:30:58] <PJBoy> also
[17:31:03] <PJBoy> recursive factorial, really?
[17:31:07] <Simplar> Also, are there better ways to compare first two different chars in the same position of the string than just iterating to it?
[17:31:39] <LordKalma> https://godbolt.org/z/4fsxKrzhx
[17:31:53] <LordKalma> PJBoy, what's wrong with recursive factory?
[17:31:58] <LordKalma> it's a classical
[17:32:19] <PJBoy> and it's crap
[17:32:41] <PJBoy> { for (uint64_t i(1), x(1); i < 22; ++i) { x *= i; cout << pair(i, x), ""; } }
[17:32:42] <geordi> {1, 1}, {2, 2}, {3, 6}, {4, 24}, {5, 120}, {6, 720}, {7, 5040}, {8, 40320}, {9, 362880}, {10, 3628800}, {11, 39916800}, {12, 479001600}, {13, 6227020800}, {14, 87178291200}, {15, 1307674368000}, {16, 20922789888000}, {17, 355687428096000}, {18, 6402373705728000}, {19, 121645100408832000}, {20, 2432902008176640000}, {21, 14197454024290336768},
[17:32:45] <Simplar> Ah also
[17:32:49] <PJBoy> see how much clearer and faster that is
[17:33:01] <Simplar> this task has a memory limit of 512M
[17:33:03] <PJBoy> it's the most popular bad recursive algorithm
[17:33:24] *** Quits: andreasbuhr (~quassel@p549db620.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:33:26] <LordKalma> for sequences for sure
[17:33:29] <LordKalma> it's extra calculation
[17:33:39] <PJBoy> even for non sequences
[17:33:46] <PJBoy> the for loop is way clearer
[17:34:05] <PJBoy> and no chance of stack overflow
[17:34:21] <LordKalma> https://godbolt.org/z/8KjeqxMcY
[17:34:30] <LordKalma> the compiler un-recursed it
[17:34:58] <PJBoy> which I'm happy about
[17:35:08] <LordKalma> it's a while loop and an if
[17:35:17] <PJBoy> it's not even written tail recursively
[17:35:28] <PJBoy> so I'm pleasantly surprised
[17:35:56] <LordKalma> https://godbolt.org/z/555vc8r8z
[17:35:57] <LordKalma> happy?
[17:36:01] <LordKalma> same exact code
[17:36:11] <PJBoy> clang's codegen is something else haha
[17:36:38] <PJBoy> that's still not tail recursive, if that's what you were trying to do
[17:36:38] <LordKalma> WTF IS THIS SHIT
[17:37:06] <PJBoy> right???
[17:37:06] <LordKalma> clang is trying to bring the simd registers into the party
[17:37:27] <PJBoy> it's like nearly a thousand vector instructions
[17:37:41] <LordKalma> yeah, no way that's faster
[17:37:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:52] <LordKalma> and gcc usually doesn't use the vector on -O2
[17:37:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:55] *** ChanServ sets mode: +v npaperbot
[17:37:57] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[17:37:58] <LordKalma> but clang still does, you can see it if you change it
[17:38:03] <PJBoy> honestly compilers should just convert factorial functions to lookup tables
[17:38:04] <LordKalma> -O2 is still a mess
[17:38:36] *** pah is now known as pa
[17:38:53] <PJBoy> and MSVC gets me an HTTP 502
[17:38:57] <PJBoy> so rip that
[17:40:26] <LordKalma> hahaha yeah
[17:40:50] <Simplar> Howdya like this?
[17:40:53] <Simplar> {double factorial(double x) {return std::tgamma(x+1);}}
[17:40:53] <geordi> error: a function-definition is not allowed here before '{' token
[17:41:05] <PJBoy> fyi the tail recursive version is https://godbolt.org/z/T8G83jGzK
[17:41:47] <Simplar> how about asking people to calculate the factorial of a double without tgamma, as an olympiad task? XD
[17:42:46] <PJBoy> return exp(lgamma(x))
[17:43:39] <LordKalma> https://godbolt.org/z/1WoYv7841
[17:44:01] <LordKalma> PJBoy, even ICC does it better than clang, ffs
[17:44:08] <PJBoy> ICC's really good
[17:44:34] <PJBoy> it outperformed GCC on every test I ever did back in uni
[17:54:09] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:56:33] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[17:57:21] <Alipha> ville: um, std::same_as for values would simply be ==, regarding ambasta's question about creating a concept comparing enum values.
[17:57:23] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 246 seconds)
[17:58:23] <PJBoy> can you have a concept with a non type template parameter?
[17:59:03] <LordKalma> what would that mean?
[17:59:29] <Raziel> would making and using a lookup table for pow(n,k) be worth the trouble? hmm
[18:00:01] <LordKalma> Raziel, intel thought so 50 years ago and then forgot some entries :D
[18:00:02] <ville> PJBoy: concept is a template that has constraints
[18:00:02] <LordKalma> jk
[18:00:09] <Raziel> lol
[18:00:16] <PJBoy> << factorialable64<20>; template<uint64_t x> concept factorialable64 = x < 21;
[18:00:17] <geordi> true
[18:00:21] <PJBoy> neat
[18:00:26] <ville> Alipha: sure it'd be simple but the point was that's not what std::same_as currently does
[18:00:50] <LordKalma> << factorialable64<23>; template<uint64_t x> concept factorialable64 = x < 21;
[18:00:50] <geordi> false
[18:00:54] <ville> the concepts they included in the current standard library are the concepts they needed to make the standard library
[18:01:52] <LordKalma> PJBoy, you can have a concept = bool?
[18:01:57] <LordKalma> I though you needed the requires clause
[18:02:17] <PJBoy> requires clause is just something that returns a bool
[18:02:22] <LordKalma> no, nevermind, yeah, sorry
[18:02:33] <LordKalma> requires is basically a consteval bool
[18:02:49] <PJBoy> << f<20>(); template<uint64_t x> concept factorialable64 = x < 21; template<factorialable64 x> void f() { cout << "overload true"; } template<auto x> void f() { cout << "overload false"; }
[18:02:49] <geordi> error: 'factorialable64' does not constrain a type
[18:02:54] <PJBoy> yeah that's a useless concept
[18:05:23] <Alipha> Simplar: use '\n', not 10, for newline. And write code based upon what's easiest to write, not what you think is fastest. Most of the time, the small difference in performance doesn't matter. And also, what you think is faster may actually be slower.
[18:05:52] *** Joins: engest (~engest@50.53.244.183)
[18:05:59] <PJBoy> s/may/is often/
[18:06:27] <LordKalma> and I'd add: the compiler is able to do things you can't even dream of if you just tell it what you want in the cleanest way possible
[18:07:11] <Raziel> and if you really care about performance, at some point you'll have to implement the different ways of doing something and benchmark them against eachother
[18:07:22] <Raziel> if you think another way is faster, you implement that one too, and check if it's actually faster. v:
[18:07:53] <LordKalma> in that regard, declarative programming sure may open a LOT of doors for compiler optimiation
[18:08:00] <Simplar> Wow
[18:08:01] <Simplar> Man
[18:08:07] <Simplar> That task list is tough
[18:08:17] <LordKalma> Im imagine compilers looking at the sequence of events you want and just re-write it completely
[18:08:56] <LordKalma> what task list?
[18:08:59] <Simplar> As a final task, they give the precompiled program that takes uint64_t input
[18:09:12] <Simplar> they allow to run the program as much as i want
[18:09:41] <Simplar> and they want solvers to code a program that will give the input number for the output number for that input in the program
[18:09:49] <Simplar> basically, reverse its behavior without knowing it
[18:10:30] <LordKalma> cout << system("magic_program", cin >> );
[18:10:31] <LordKalma> done
[18:10:35] <LordKalma> hahahah
[18:11:17] <Simplar> LOOOOOOOOOL
[18:11:44] <Simplar> you want me to simply import that program into the code and call it from there? LMAO
[18:12:41] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 264 seconds)
[18:12:52] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[18:13:07] <Raziel> Simplar, so what are you actually expected to do? Figure out the pattern/algorithm used, like in an IQ test? Actually reverse engineer the binary? Or just store a map of all uint64_t inputs and outputs? v:
[18:13:21] <Simplar> > Figure out the pattern/algorithm used
[18:13:22] <Simplar> this
[18:13:30] *** Joins: andreasbuhr (~quassel@p549db620.dip0.t-ipconnect.de)
[18:13:37] <Simplar> I also have a jslinux emu
[18:13:41] <Simplar> to run the prog
[18:15:37] <Raziel> inb4 there is no pattern/algorithm and it's just a big map of random values.
[18:15:52] <Simplar> https://drive.google.com/file/d/1hUKO-c3FcPXvXgvbphNoHfHYRjF-7HyA/view?usp=sharing
[18:15:56] <Simplar> Here is the binary itself
[18:16:13] <Simplar> https://bellard.org/jslinux/vm.html?url=alpine-x86.cfg&mem=192 and jslinux emulator configged to use it
[18:16:30] <Simplar> all you have to do is upload the file using the icon below the terminal to there
[18:16:47] <Simplar> then chmod +x ./prog
[18:16:59] <Simplar> chmod +x ./p sorry
[18:17:10] <Simplar> and then run ./p to execute the program
[18:17:29] <Simplar> it will await an uint64_t input, and give you some uint64_t output
[18:17:55] <LordKalma> it's probably something simple
[18:17:59] <LordKalma> but I'm not on a windows machine
[18:18:05] <LordKalma> and I won«t download a random binary
[18:18:32] <LordKalma> oh, you have a vm for us
[18:18:33] <LordKalma> thanks
[18:18:41] <Simplar> Yeah, all i want is the vm
[18:18:46] <Simplar> just to provide save sandbox
[18:18:49] <Simplar> safe*
[18:19:53] <LordKalma> pfft
[18:19:55] <LordKalma> simple algorithm
[18:20:25] <LordKalma> nevermind, found an exceeption already haha
[18:21:04] <Simplar> It's not that simple tho
[18:21:45] <Raziel> well, let's see
[18:22:03] <Raziel> 1, 2, 4, 8 return input * 3
[18:22:26] <Raziel> 0, 3, 5, 6, 7, return something else. v:
[18:22:50] <LordKalma> https://oeis.org/search?q=3%2C6%2C2%2C12%2C4%2C7%2C5%2C24&sort=&language=english&go=Search
[18:22:51] <LordKalma> found it
[18:22:52] <LordKalma> _D
[18:22:53] <LordKalma> so easy
[18:22:58] <LordKalma> when you have OEIS :D
[18:23:29] <LordKalma> you can confirm more numbers if you want to make sure
[18:23:51] <Raziel> that seems correct
[18:24:43] <LordKalma> https://oeis.org/search?q=3%2C6%2C2%2C12%2C4%2C7%2C5%2C24%2C8%2C11&sort=&language=english&go=Search
[18:24:54] <Raziel> but also, there doesn't seem to be any logical way to deduce that, it's far too complex without looking it up or knowing it prior
[18:24:54] <LordKalma> added a couple more, and it seems to be this sequence indeed
[18:25:04] <LordKalma> shifted by two places
[18:25:17] <LordKalma> aka a(1) in ./p is actually a(2)
[18:25:21] <LordKalma> one plaace, sorry
[18:25:34] <LordKalma> because the 3 is ./p(1)
[18:26:27] <LordKalma> but it's complicated, that's for sure
[18:26:41] <LordKalma> thanks OEIS
[18:26:52] <Simplar> That's really wonderful
[18:27:26] <Simplar> Imagine such tasks are given to children aged 16 to 17 in Russia
[18:27:32] <Simplar> To check their cpp skills
[18:27:37] <yolo_> does this make sense: convert container-alike-data from pointers to containers to do rule-or-zero(free RAII), but for single-object pointers(not container alike), you still need unique_ptr/shared_ptr in class members, and you can't use containers, unique_ptr/shared_ptr will do its own RAII so it still works like rule-of-zero(i.e. your dtor does not need release the pointed memory)
[18:27:53] <Raziel> well, googling skills are very important for a software engineer, so I guess it's valid
[18:28:06] <Raziel> unless they actually expect you to deduce that thing without googling, in which case, uh
[18:28:09] <Raziel> that's not happening
[18:28:41] <LordKalma> at least A006068 has a Python implementation and A003188 has a C implementation
[18:28:51] <LordKalma> A003188 (C) int a(int n) { return n ^ (n>>1); }
[18:29:17] <Raziel> the second part, which is writing the reverse of that whole thing, is a decent exercise
[18:29:25] <LordKalma> in A006068 look for (Python) :D
[18:29:26] <LordKalma> hahah
[18:29:43] <Simplar> LordKalma: what is the number on the input and output?
[18:29:55] <LordKalma> https://oeis.org/search?q=3%2C6%2C2%2C12%2C4%2C7%2C5%2C24%2C8%2C11&sort=&language=english&go=Search
[18:30:00] <LordKalma> it's the n as in a(n)
[18:30:10] <Simplar> input: n; output: a(n)?
[18:30:29] <LordKalma> and as we've already concluded .p(k) is actually a(k+1)
[18:30:40] <LordKalma> <Simplar> input: n; output: a(n)? / No
[18:30:57] <LordKalma> in the website says a(0) = 0, and when you run ./p(1) you get 3
[18:31:01] <LordKalma> so it's actually a(2)
[18:31:27] <Simplar> Raziel: they expect them to deduce this without googling. Basically they expect that they studied it before without instructing them to study this explicitly
[18:31:51] <Raziel> I don't even know what the context for studying this explicitly would be
[18:32:00] <Raziel> does this sequence have any sort of practical use?
[18:32:00] <LordKalma> so ./p(n) is a(n+1), were a is a(n) = A003188(1+A006068(n-1)), where A003188 (C) int a(int n) { return n ^ (n>>1); } and A006068, well, look at the python implementation
[18:32:17] <PJBoy> wtf is going on hahaha
[18:32:26] <PJBoy> just got out of my meeting
[18:32:29] <LordKalma> 	Permutation of natural numbers is something you'd find on a maths book
[18:32:55] <LordKalma> Simplar, anyway, got what I meant?
[18:33:08] <Simplar> LordKalma: assembling the formula
[18:33:26] <LordKalma> PJBoy, read from 14:28:59 (my time)
[18:33:42] <LordKalma> PJBoy, read from 14:38:59 (my time) I mean
[18:33:46] <Raziel> I use permutations often, in simulations and crap. but permutations where... some of them are binary gray code and some are the inverse? I can't even imagine why
[18:34:12] <LordKalma> it's jsut permutations of natural numbers
[18:34:17] <LordKalma> "a(0) = 0, a(n) = A003188(1+A006068(n-1)), where A003188 is binary Gray code and A006068 is its inverse. "
[18:34:22] <LordKalma> is their formulation for it
[18:34:31] <PJBoy> ah we're recognising an arbitrary sequence of numbers?
[18:34:38] <LordKalma> PJBoy, yeah
[18:34:48] <PJBoy> and it's the gray code?
[18:34:54] <PJBoy> that should be something you recognise IMO
[18:35:19] <LordKalma> no. it's permutations of natural numbers
[18:35:28] <LordKalma> whose formula involves gray coding AND its inverse
[18:35:36] <PJBoy> yeah that makes sense
[18:35:46] <PJBoy> I didn't see the numbers written anywhere in this convo though
[18:36:01] <LordKalma> PJBoy,  https://oeis.org/search?q=3%2C6%2C2%2C12%2C4%2C7%2C5%2C24%2C8%2C11&sort=&language=english&go=Search
[18:36:08] <LordKalma> I found the sequence on OEIS
[18:36:11] <LordKalma> and we went from there
[18:36:28] <PJBoy> hm, ok
[18:36:28] <LordKalma> that's the "Numbers in the convo" :)
[18:36:32] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 240 seconds)
[18:36:45] <Simplar> So I look for the inverse of this sequence
[18:36:48] <PJBoy> I definitely wouldn't have recognised that sequence haha
[18:37:09] <Raziel> Simplar, no, you reverse the algorithms
[18:37:19] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Ping timeout: 250 seconds)
[18:37:20] <Raziel> :p
[18:37:26] <LordKalma> ahhh
[18:37:32] <LordKalma> you want n for .p(n)
[18:37:37] <LordKalma> so the inverse of that...
[18:37:38] <LordKalma> hum...
[18:37:48] <PJBoy> inverse of that sequence is linked: https://oeis.org/A268718
[18:38:10] <Simplar> No C code, dang
[18:38:29] <PJBoy> python's pretty close to C
[18:38:35] <LordKalma> yeah, it has the python one
[18:38:38] <LordKalma> that«s pretty good
[18:38:49] <Raziel> it shouldn't be too hard to translate into C/++, yeah v:
[18:39:08] <LordKalma> just remember you'll have a off-by-one error with that def a(n): return 0 if n==0 else 1 + a003188(a006068(n) - 1)
[18:39:10] <PJBoy> I never heard of PARI before
[18:39:21] <LordKalma> since we determined that .p(n) is direct_a(n+1)
[18:39:31] <Simplar> Aha.
[18:39:32] <LordKalma> but you can tune that in the end
[18:39:34] <LordKalma> good luck
[18:39:39] <LordKalma> yeah, wtf language is PARI
[18:39:43] <Simplar> Let me try and see
[18:40:09] <PJBoy> > PARI is a C library
[18:40:27] <PJBoy> > The name PARI is a pun about the project's early stages when the authors started to implement a library for "Pascal ARIthmetic" in the Pascal programming language (although they quickly switched to C), and after "pari de Pascal" (Pascal's Wager)
[18:40:47] <PJBoy> Pascal's Wager is insanely dumb btw
[18:41:32] <Simplar> n^(n//2) in python is equal to n ^ (n>>1) in C++?
[18:41:48] <LordKalma> yes
[18:41:57] <LordKalma> oh wait, NOT
[18:42:06] <LordKalma> in python exponent is **
[18:42:24] <Simplar> https://oeis.org/A003188 C implementation of A003188 here
[18:42:35] <Simplar> And Python implementation of your found seq
[18:42:39] <Simplar> compare
[18:42:56] <LordKalma> wtf is operator ^ in python?
[18:43:01] <PJBoy> xor
[18:43:04] <LordKalma> ah ok
[18:43:05] <PJBoy> same as every other language
[18:43:18] <LordKalma> sorry, my bad haha
[18:43:27] <LordKalma> PJBoy, except... matlab :p
[18:43:41] <PJBoy> >:(
[18:43:45] *** Joins: jkaye (~jkaye@2601:281:8300:7530:49b1:9f67:bcbc:61f)
[18:43:51] <LordKalma> Simplar, come'onm the python implementation for https://oeis.org/A268718
[18:44:06] <Alipha> yolo_: yes
[18:44:07] <LordKalma> even has  def a003188(n): return n^(n>>1) and def a006068(n): and then def a(n):
[18:44:09] <LordKalma> it's all self contained
[18:44:43] <LordKalma> you just need a final def reverse_p(n) return n-1 # I think it's -1, might be +1
[18:45:05] *** Joins: xkuru (~xkuru@user/xkuru)
[18:46:02] *** Quits: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c) (Ping timeout: 240 seconds)
[18:46:23] <Alipha> yolo_: but note that you can and should use raw pointers (or references) when you simply need to observe an object and you're not responsible for destroying the object (ie, you don't own the object)
[18:47:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:47:47] <yolo_> thanks!
[18:49:01] <Alipha> yolo_: so if you have a `std::unique_ptr<Foo> foo` in one part of the code, but other parts of the code need access to that Foo, it's perfectly fine to use foo.get() to hand out a Foo*  to another part of the code that needs to use it
[18:49:06] <Simplar> Hey
[18:49:24] <LordKalma> yes?
[18:49:29] <LordKalma> does it work?
[18:49:38] <Alipha> ... there Delilah
[18:50:43] <Simplar> https://www.mycompiler.io/view/C9droaq
[18:50:52] <Simplar> that's the forward prog i've made
[18:50:59] <Simplar> now i gotta reverse the algo?
[18:51:53] <LordKalma> A003188 is the reverse algorithm
[18:52:17] <LordKalma> sorry
[18:52:23] <LordKalma> A268718 IS the inverse
[18:52:38] <Simplar> uh wait
[18:52:41] <Simplar> i'm lost XD
[18:52:43] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:52:46] <Simplar> what is the inverse of the program?
[18:52:48] <Simplar> in oeis
[18:52:52] <LordKalma> https://oeis.org/A003188 this one already is the inverse of what we found out to be the sequence https://oeis.org/search?q=3%2C6%2C2%2C12%2C4%2C7%2C5%2C24%2C8%2C11&sort=&language=english&go=Search
[18:53:11] <LordKalma> nortice in the latter link it says: CROSSREFS 	
[18:53:12] <LordKalma> Inverse: A268717.
[18:53:19] <Simplar> so if I have a(n+1) in the input
[18:53:32] <Simplar> I just apply A003188 to it?
[18:53:47] <LordKalma> fuck, even I'm stupid, lemme restart
[18:54:41] *** Joins: dld (~dld@73.61.8.213)
[18:54:56] <LordKalma> We found out that the sequence is A268717(n+1). We now want n. in A268717 it says CROSSREFS Inverse: A268718.. So we go to A268718, use the python implementation in there, and use that
[18:55:06] <LordKalma> subtracting one in the end, or something
[18:55:57] <Simplar> so in the input we have A268717(n+1). We want to output n.
[18:56:12] <Simplar> For that, we use A268718(our_input)
[18:56:22] <Simplar> and subtract 1
[18:56:27] <LordKalma> yes
[18:57:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[18:58:03] <LordKalma> I mean, I'm not 100% on the subtract one, but something like that yeah
[18:59:25] <LordKalma> since ./p(n) is A268717(n+1), so by doing A268718(A268717(n+1)) you should have n+1, so yeah, subtract 1, I think
[19:00:08] <Simplar> https://www.mycompiler.io/view/Dl6qaGw
[19:00:11] <Simplar> seems to work
[19:00:55] <LordKalma> cool
[19:02:33] <LordKalma> this was fun
[19:02:52] <LordKalma> but no way anybody would guess this without intimate knowledge of some math sequences
[19:03:54] <LordKalma> PJBoy, https://godbolt.org/z/8so8rodvo
[19:03:55] <LordKalma> clang won!
[19:04:04] <LordKalma> Simplar, open that too
[19:04:23] <Simplar> 0__0
[19:04:55] <Raziel> LordKalma, pretty sure msvc won, because <Compilation failed: Bad Gateway> is much smaller ASM than the 52 lines of clang
[19:05:25] <LordKalma> hhahaha
[19:07:15] <Simplar> lol, good point Raziel
[19:07:46] <Simplar> i guess practicing my c++ experience it better time investment than playing games XD
[19:07:57] <Simplar> it's even more *fun*
[19:08:05] <PJBoy> clang generally wins in my experience
[19:08:09] <PJBoy> but when it loses
[19:08:18] <PJBoy> it's usually because of a thousand vector instructions
[19:08:31] <PJBoy> idk what kinda drugs clang takes
[19:09:20] <Simplar> these drugs are probably called 'paranoid way'
[19:09:48] <PJBoy> those ternaries always worry me
[19:10:42] <PJBoy> it's fine there but
[19:11:36] <PJBoy> << same_as<decltype(true ? 0 : Int{}), Int>; using Int = uint16_t;
[19:11:37] <geordi> false
[19:11:42] <PJBoy> that kinda thing happens sometimes
[19:12:08] <PJBoy> << same_as<decltype(true ? 0LL : Int{}), Int>; using Int = uint64_t;
[19:12:08] <geordi> false
[19:12:28] <LordKalma> << same_as<decltype(true ? 0ULL : Int{}), Int>; using Int = uint64_t;
[19:12:29] <geordi> false
[19:12:42] <Simplar> {cout << typeof cout}
[19:12:42] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[19:12:42] <geordi> error: 'typeof' was not declared in this scope; did you mean 'typedef'? (fix known)
[19:12:56] <LordKalma> << typeid(cout)
[19:12:56] <geordi> ostream
[19:13:07] <PJBoy> I'm a little surprised by that 0ULL case
[19:13:15] <LordKalma> me too
[19:13:25] <PJBoy> I guess uint64_t is merely a UL
[19:13:27] <PJBoy> on geordi
[19:14:00] <Raziel> so ULL is 128bit?
[19:14:00] <Raziel> v:
[19:14:08] <PJBoy> ofc not
[19:14:16] <PJBoy> nothing is 128 bit
[19:14:38] <LordKalma> << same_as<decltype(true ? 0UL : Int{}), Int>; using Int = uint64_t;
[19:14:39] <geordi> true
[19:14:43] <Raziel> gib 128bit
[19:14:48] <Raziel> I want it. for reasons.
[19:14:58] <LordKalma> 128bit is a full first gen simd vector
[19:15:05] <LordKalma> hahah that's 4 floats right there
[19:15:10] <Simplar> One fun thing i want to try out
[19:15:18] <PJBoy> there's char/short/int/long/long long, and there's uint8_t/uint16_t/uint32_t/uint64_t
[19:15:23] <Simplar> { int int = 1; cout << to_string(int)}
[19:15:24] <geordi> error: expected unqualified-id before '=' token
[19:15:33] <Raziel> LordKalma, yeah, I have seen some simd128 functions for stuff
[19:15:50] <PJBoy> so by the pigeonhole principle, one of those natural types isn't mapped to by a uintN_t typedef
[19:15:53] <LordKalma> Raziel, compiler do a great job of simd'ing for you
[19:16:00] <LordKalma> you just have to not forget -march
[19:16:10] <LordKalma> because compilers default to a sensible SSE 4.2
[19:16:27] <LordKalma> in MSVC it's easy: /arch:avx2
[19:16:45] <LordKalma> in gcc you have to guess. is it -march=haswell? other architecture name?
[19:16:50] <Simplar> OOF! Want to see another fun task from the same list?
[19:16:52] <LordKalma> who the fuck decided to use the cpu codenames?
[19:16:56] <Simplar> I have an assumption but oh wow
[19:17:02] <Raziel> yeah, I do usually set my x64 builds to avx2, and x86 to sse2
[19:17:13] <PJBoy> yeah fuck gcc
[19:17:43] <LordKalma> honestly though, cpu codenames as arguments for the SIMD architecture is BS
[19:17:56] *** Joins: soman (~soman@83.139.147.234)
[19:19:31] *** Quits: Tokamak (~Tokamak@172.58.191.72) (Quit: Textual IRC Client: www.textualapp.com)
[19:20:01] <soman> [linked list] Are any sensible cases exist where we need to store linked list in a contiguous memory for optimization? In case we don't need to add elements anymore. Is it possible to implement such thing for std::forward_list?
[19:20:37] <Raziel> what would the point of it being a linked list be, if it's contiguous anyway?
[19:20:49] <Raziel> you can do it by copying your linked list into an array. done. v:
[19:20:50] <LordKalma> storing a linked list in continuous memory is a std::vector with extra steps
[19:21:18] <LordKalma> or if you're using a linked list because you ahve a lot of initial push and pop, use a deque
[19:21:30] <PJBoy> can always give a linked list the allocator to do contiguous memory allocation
[19:22:04] <LordKalma> still vote for std::deque
[19:22:24] * LordKalma recites the write, profile, and etc disclaimer
[19:22:31] <soman> OK if I need intensively add to any place of list I can use list, then if I need fast iteration just copy it to vector.
[19:22:47] <LordKalma> if you have copiable types, sure
[19:22:51] <LordKalma> but, deque
[19:22:51] <soman> Thanks for answers. PJBoy also thanks for an idea about allocator
[19:23:27] <PJBoy> I guess one of the problems with deque is that insert operatios invalidate all iterators
[19:23:39] <PJBoy> whereas list gives you excellent iterator stability
[19:24:31] <Simplar> Input is a decimal nonnegative integer without leading zeros. You are allowed to: (1) multiply by 2; (2*) divide by 2; (3*) erase half of the digits from a number, right to left (for example, 72 becomes 7); (4*) erase half of the digits from a number, left to right (for example, 72 becomes 2); (5*) apply (3*) and write it twice (for example, 72 becomes 77); (6*) apply (4*) and write it twice (for example, 72 becomes 22). Operations marked by (*)
[19:24:31] <Simplar> are only allowed if a number is even. Output the minimal possible amount of the operations to make input number equal to 1. If that's not possible, print -1.
[19:24:54] <Simplar> If leading zeros are present after any operation, remove them.
[19:24:58] <LordKalma> holy shit
[19:25:03] <Simplar> Yeah.
[19:25:18] <PJBoy> that's a dynamic programming problem
[19:25:43] <kalven> gcc/clang has 128-bit ints on 64-bit targets
[19:25:52] <soman> Also about optimization: could you advice any book where I can read about cache-friendly code, L1/2/3 caches and other hardware things which impacts to cpp code performance?
[19:25:53] <Simplar> PJBoy: do I need graph theory here?
[19:25:57] <PJBoy> nah
[19:26:25] <Simplar> so i basically take the route that will make the number as close to 1 as possible?
[19:26:41] <PJBoy> that would be a greedy algorithm
[19:26:53] <Simplar> i also suspect i should use deque to store digits of a number.
[19:27:04] <LordKalma> honestly I don't know how'd approach it
[19:27:18] <Simplar> due to operations (3)(4)(5)(6)
[19:27:51] <PJBoy> I would define those 6 operations and make a 6d array
[19:27:56] <PJBoy> and do the dynamic programming thing
[19:28:30] <PJBoy> man it's been a really long times since I've done that
[19:28:35] <Simplar> 6D array? Vector of vector of vector of vec-- what
[19:28:50] <Raziel> I've been doing this for quite some years and I still don't even really know what dynamic programming is supposed to be
[19:29:04] <PJBoy> brute force with a lookup table :p
[19:29:13] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[19:29:15] <PJBoy> where you build the lookup table as you go
[19:29:34] <Raziel> oh.
[19:29:40] <Raziel> well that's far less fancy than they make it sound
[19:29:54] <PJBoy> yeah well
[19:29:57] <PJBoy> blame Dijkstra
[19:30:04] <Simplar> Same restrictions, btw, apply.
[19:30:05] <Simplar> 1 second and 512M
[19:30:16] *** Joins: great_taste (~great_tas@190.32.235.20)
[19:30:17] <PJBoy> a mathematician naming a computer science concept, what can you expect
[19:30:23] <Raziel> 1 second on what tho
[19:30:31] <Simplar> on execution time of the program
[19:30:47] <Raziel> on a pentium 4? on a ryzen? on my rtx 3090?
[19:31:43] <PJBoy> doesn't really matter
[19:32:10] <PJBoy> 1 second just means "some not completely insane time"
[19:32:10] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[19:32:21] <Raziel> I suppose :p
[19:32:34] <Simplar> Yeah
[19:33:02] *** Quits: X-Scale (~ARM@46.50.3.203) (Ping timeout: 240 seconds)
[19:33:58] <Simplar> Also, this task restricts the maximum decimal number's length on input
[19:34:12] <Simplar> it is 100 digits with no leading zeros at most
[19:34:31] *** X-Scale` is now known as X-Scale
[19:35:31] <Simplar> so if we get a 2-digit number and it has 1 among digits, then we just apply (3*) or (4*) depending on where the digit is
[19:35:41] <Simplar> and eventually leave it
[19:37:10] <PJBoy> yeah I think I'm starting to agree that dynamic programming would be out of the question
[19:37:46] <PJBoy> algorithm is probably find the smallest digit, binary truncate to get it, do whatever divisions by 2 are necessary
[19:38:43] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:38:47] <Simplar> but wait, are we allowed binary truncation?
[19:38:59] <PJBoy> uh
[19:39:00] <Simplar> or you mean apply (3*) and (4*) until we get to it
[19:39:10] <PJBoy> yeah I mean to do that
[19:39:20] <Simplar> we can't always apply 3 or 4
[19:39:25] <Simplar> since the number can become odd
[19:39:31] <Simplar> with odd digits*
[19:39:40] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:39:40] <Simplar> and we will be unable to split it evenly
[19:39:45] <PJBoy> yeah well
[19:39:50] <PJBoy> I was wondering what would happen in that case
[19:39:59] <PJBoy> does it say those steps are disallowed?
[19:40:20] <Simplar> ah, yes, it does
[19:40:29] <PJBoy> if so then I guess you'll have to divide or multiply by 2 until satisfactory
[19:40:50] <Simplar> ah hm
[19:40:57] <PJBoy> I think 0 is the only input that would be impossible to transform to 1
[19:41:18] <PJBoy> does it say you're not allowed to halve odd numbers?
[19:41:48] <Simplar> 'halve' means get half digits or divide by 2?
[19:41:55] <PJBoy> divide by 2, sorry
[19:42:02] <Simplar> yes, that's not allowed
[19:42:13] <PJBoy> ugh that complicates things
[19:42:33] <PJBoy> that's where the last operation becomes useful I suppose
[19:42:52] <Simplar> PJBoy: let me correct myself, we are allowed to *2 any number, and /2 even number. We are allowed to do (3),(4),(5),(6) if the current number has even amount of digits
[19:43:35] <PJBoy> ah
[19:43:58] <PJBoy> that's fine I suppose
[19:44:24] <PJBoy> ugh, it's such a peculiar problem
[19:45:29] <PJBoy> reminds me of my advanced algorithms coursework
[19:46:18] <Raziel> haha
[19:46:36] <InPhase> Simplar: All you have to do is solve it for 1-9, and then reduce every number to that.
[19:46:53] <Raziel> these can be fun to wrack your brain with, but whoever comes up with them must be a real sadist huh
[19:47:16] <InPhase> Simplar: There are trivial steps in there to reduce every number other than 0 to a single non-zero digit.
[19:48:01] <Simplar> InPhase: cut half the digits, divide by 2 if the number has odd amount of digits until it has even amount of digits, cut again... etc?
[19:48:17] <PJBoy> nah I take it back, my coursework was considerably harder than I remember haha
[19:48:23] <InPhase> Simplar: That gives you the iteration depth.  Then you can evaluate the other steps to that depth (halting problem solved) and look for shorter ways to do it.
[19:48:53] <InPhase> Simplar: Yes.
[19:49:49] <Simplar> InPhase: are you sure it's the shortest way to use these operations to get 1?
[19:50:07] <InPhase> Simplar: It's not.  But you can guarantee finding the solution when you know one way to find it.
[19:51:48] <Simplar> Well, 1 is already reduced to 1
[19:51:51] <Simplar> so we just return 1
[19:52:04] <Simplar> reducing 2 to 1 is as simple as dividing by 2
[19:52:36] <Simplar> reducing 3 to 1 means multiplying it by 2 twice
[19:52:41] <Simplar> and then getting the left digit
[19:52:58] <Simplar> reducing 4 to 1 means dividing by 2 two times
[19:53:14] <Simplar> reducing 5 to 1 means multiplying by 2, then getting the left digit
[19:53:30] <Simplar> reducing 6 to 1 means multiplying by 2 and getting the left digit
[19:53:42] <Simplar> reducing 7 to 1 means multiplying by 2 and getting the left digit
[19:53:59] <Simplar> reducing 8 to 1 means multiplying by 2 and getting the left digit
[19:54:10] <Simplar> reducing 9 to 1 means multiplying by 2 and getting the left digit
[19:54:15] <Simplar> So what does that give me?
[19:56:13] <Simplar> reducing 10 to 19 to 1 is as simple as getting the left digit
[19:56:15] <InPhase> You can then reduce any number to a 1 digit number trivially by making its digit count even and taking the leftmost digit by the obvious step, which gives you one solution.  Now you can explore other operations to that depth with a backtracking algorithm.
[19:56:55] <InPhase> The key problem is you can't do backtracking until you have a termination depth, so you need one solution first.
[19:57:08] <Simplar> so you suggest me to sketch the not-too-much-efficient algo and then see what can be optimized?
[19:58:02] <InPhase> There might exist a faster approach.  But I'm pretty certain this approach works.
[19:58:29] <InPhase> You can continually shrink the backtracking depth each time you find a shorter solution, so it's probably pretty close to optimal.
[19:58:55] <InPhase> The only way to get shorter would be if there's some algorithmic trick of a set of rules that doesn't require exploring.
[19:59:11] <InPhase> But that would require a proof.
[20:01:19] *** Quits: msk (~msk@185.124.240.174) (Remote host closed the connection)
[20:01:19] *** Joins: ravan (~ravan@user/ravan)
[20:01:36] *** Joins: msk (~msk@185.124.240.174)
[20:06:45] *** Joins: cq-work (~Z_Lund@user/cq-work)
[20:07:36] <Simplar> PJBoy: dynamic programming will give us complexity O(n^2 * 2^n)
[20:11:43] <Simplar> ...holy heck
[20:11:49] <Simplar> am i supposed to use string.
[20:13:54] <Raziel> what else would you use? you're not gonna fit 100 digits in any standard integer type
[20:14:13] <Raziel> I mean, you can always use a container of ints instead :p
[20:14:36] <Simplar> Raziel: deque.
[20:14:39] <cq-work> Use a bignum class?
[20:14:48] <Raziel> deQ
[20:14:54] <Simplar> deque makes splitting by half a breeze
[20:14:59] <Raziel> and, no, don't use bignums for this, it's a trap :p
[20:15:14] <cq-work> What's the issue, I missed context
[20:15:24] <Raziel> cq-work, he only cares about individual digits as far as I can tell
[20:15:58] <Simplar> may I pack in the problem I've mentioned again for cq-work?
[20:16:05] <Raziel> it's an algorithmics exercise thing
[20:16:13] <Raziel> go ahead :p
[20:17:56] <Simplar> Input: a decimal nonnegative integer without leading zeros, up to 100 digits. You are allowed to: (1) multiply by 2; (2*) divide by 2; (3**) erase half the digits from a number, right to left (for example, 72 becomes 7); (4**) erase half the digits from a number, left to right (for example, 72 becomes 2); (5**) apply (3**) and write it twice (for example, 72 becomes 77); (6**) apply (4**) and write it twice (for example, 72 becomes 22). Operations
[20:17:56] <Simplar> marked by (*) are only allowed if a number is even. Operations marked by (**) are only allowed if a number has an even number of digits. Output the minimal possible amount of the operations to make input number equal to 1, and list these operations separated by space. If that's not possible, print -1.
[20:19:11] <Simplar> Raziel: I mean, with deque, erasing half the digits from a number is as simple as resize(myDeque.size()/2) if myDeque.size()%2 = 0
[20:19:41] <Raziel> yes
[20:19:51] <Raziel> at least, that seems correct enough :p
[20:20:11] *** Joins: bobb_ (~bobb_@46.232.229.52)
[20:20:39] <Simplar> however, dividing by 2 becomes a challenge, o hecc
[20:21:21] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:21:39] <bobb_> Hi, can anybody explain me why the <new value> line 8 in https://coliru.stacked-crooked.com/a/30623fa932aed137 deduces to _X* const and not const _X*?
[20:22:29] *** Joins: JeffH (~JeffH@9.sub-174-198-138.myvzw.com)
[20:23:13] *** Joins: pulse (~pulse@user/pulse)
[20:31:52] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[20:32:22] <Alipha> bobb_: Xp is a pointer. so `const Xp` is a const pointer, ie, `_X* const`
[20:32:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:32:53] <cbreak> X * const vs X const *
[20:33:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[20:33:19] <Alipha> the const is being applied to the pointer, not what the pointer points to
[20:33:40] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:34:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:34:58] <PJBoy> `const T*` is `add_pointer_t<const T>`, `T* const` is `const add_pointer_t<T>` :)
[20:35:37] <Alipha> https://coliru.stacked-crooked.com/a/4bf4bf82bc7dcf01
[20:36:24] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:36:25] *** Quits: engest (~engest@50.53.244.183) (Quit: Leaving)
[20:36:49] <bobb_> Alipha PJBoy cbreak ahhh now its clear to me, thank you!
[20:36:56] <Simplar> Hmmmmmmmm
[20:37:09] <Simplar> I think I've managed to program all 6 operations given a string
[20:37:21] <Alipha> so, parentheses aren't valid here, but i'm just using them to illustrate "precedence": `const _X*` is `(const _X)*`. whereas `const Xp` is `const (_X*)`
[20:38:45] <LordKalma> bobb_, the usual rule (that has some exceptions) is "read right to left
[20:39:04] <LordKalma> const T* "pointer to T constant", T* const "constant pointer to T"
[20:43:32] <bobb_> correct
[20:43:51] *** Quits: pa (~pah@user/pah) (Ping timeout: 250 seconds)
[20:44:06] *** Joins: pah (~pah@user/pah)
[20:45:25] * PJBoy doesn't subscribe to that
[20:48:20] <PJBoy> if you defined `using Ptr = T*;` and wrote `const Ptr`, that'd be a "Ptr constant" or "pointer to T constant" expanding the type alias
[20:48:21] <Simplar> pair<string,list<uint8_t>>& reduceTo1(pair<string,list<uint8_t>>& status)
[20:48:28] <Simplar> is it a correct way to not spam pairs?
[20:48:31] <PJBoy> but it's not, it's a `T* const`
[20:48:55] <Alipha> Simplar: create a struct/class instead of a pair
[20:49:01] <PJBoy> ^
[20:49:08] <Simplar> Alipha: why?
[20:49:16] <Simplar> struct won't have neat things like push_back
[20:49:24] <Simplar> oh
[20:49:28] <Alipha> Simplar: ... pair doesn't have push_back
[20:49:34] <Simplar> ...yeah, i just realized
[20:49:37] <Simplar> i can keep the list home :D
[20:50:14] <Alipha> Simplar: pair has two members, first and second, which tell us NOTHING about what the `string` and `list<uint8_t>` are for
[20:50:31] <Simplar> maybe for order of operations it's better to use std::stack?
[20:52:31] <bobb_> PJBoy i have tons of C89 code that shall be connected to modern C++
[20:52:47] <bobb_> that typedef stuff sometimes confuses me
[20:52:59] *** Joins: magla (~gelignite@55d4ec6e.access.ecotel.net)
[20:53:43] *** Quits: Youmu (uid129469@user/condy) (Quit: Connection closed for inactivity)
[20:54:56] *** Quits: andreasbuhr (~quassel@p549db620.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:55:07] <PJBoy> you working with an IDE?
[20:55:17] <PJBoy> should be able to get it to expand type aliases
[20:56:02] *** Joins: andreasbuhr (~quassel@p549db620.dip0.t-ipconnect.de)
[20:56:20] <PJBoy> otherwise you can always try to compile something bad using that type and see what the compiler says
[20:56:28] <PJBoy> { enable_if_t<false, T>(); } using T = vector<int>::iterator;
[20:56:28] <geordi> error: no type named 'type' in 'struct enable_if<false, _Safe_iterator<vector<int>::iterator, vector<int>, random_access_iterator_tag> >'
[20:56:41] <Simplar> struct SampleData {
[20:56:41] <Simplar>     string num;
[20:56:41] <Simplar>     list<uint8_t> ops;
[20:56:41] <Simplar> }; ............. and then .............. SampleData reduceTo1(SampleData& status) ?
[20:56:51] <Simplar> wow, how did it separate my msg
[20:56:55] <PJBoy> see, now I know vector<int>::iterator is a _Safe_iterator<vector<int>::iterator, vector<int>, random_access_iterator_tag>
[20:57:02] <PJBoy> IRC doesn't support line breaks
[20:57:10] <Simplar> Weird
[20:58:13] <Alipha> Simplar: yes, that's better. i'm not sure if SampleData is the best name, but *shrugs*. Also, does reduceTo1 modify status?
[20:58:28] <Simplar> reduceTo1 should modify members of the struct
[20:58:51] <Simplar> struct ReducibleNumber sounds better?
[20:59:04] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[20:59:17] *** Joins: Skyfire (~pyon@user/pyon)
[20:59:21] <Alipha> Simplar: what is reduceTo1 returning then?
[21:00:02] <Simplar> Alipha: a modified number and updated operation list after actions in the function
[21:00:07] <Simplar> it's supposed to be the recursion
[21:01:25] <Alipha> Simplar: so reduceTo1 doesn't actually modify the status argument, but instead makes a copy of it, updates the operation list on the copy, and returns that copy?
[21:01:44] <Simplar> Alipha: ugh, that's gonna be costy i guess?
[21:01:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:01:58] <Simplar> copying that every time
[21:03:58] <Alipha> Simplar: do you just want to modify the status argument instead? in which case, i wouldn't return anything. just return void
[21:04:05] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:04:24] <Simplar> but in the end of the recursion, it should return the final status
[21:04:33] <Simplar> oh wait
[21:04:41] <Simplar> i can return just the list instead
[21:05:09] <Simplar> or wait
[21:05:26] <Simplar> do you mean I can just modify the status and then use whatever i passed in the param?
[21:05:34] <Alipha> yes
[21:05:49] <Simplar> like, the *argument* of the function will get modified and ready for usage after the function call even if it is recursive?
[21:05:50] <Alipha> which may or may not work with recursion. you might have to copy
[21:05:54] *** Quits: supernova (~quassel@2405:9800:ba11:6207:e80f:7fe4:8d57:5f68) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:06:07] <Simplar> yeah, may have to copy
[21:06:29] <Alipha> recursive algorithms usually require copying the data
[21:10:14] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Ping timeout: 246 seconds)
[21:12:02] *** Quits: JeffH (~JeffH@9.sub-174-198-138.myvzw.com) (Remote host closed the connection)
[21:13:57] <Simplar> Alipha: https://www.mycompiler.io/view/Cd6ramF
[21:14:06] <Simplar> This is the program itself
[21:14:44] <Simplar> I know how to check if a number in the string is even
[21:14:53] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[21:15:05] <Simplar> last char = '0', '2', '4', '6', '8'
[21:15:22] <kalven> are you doing the task or is it sort of a channel collaboration?
[21:15:24] *** Joins: X-Scale` (~ARM@31.22.162.107)
[21:16:24] <Simplar> kalven: this is a sort of myself trying to get my head over how to do the task. It confused even people here.
[21:17:33] *** X-Scale` is now known as X-Scale
[21:25:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:bcb4:bb44:2d0f:bd9c)
[21:25:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:bcb4:bb44:2d0f:bd9c) (Changing host)
[21:25:53] *** Joins: skapata (~Skapata@user/skapata)
[21:29:05] *** Joins: CorvetteZR1 (~CorvetteZ@cpef81d0fb064e3-cmf81d0fb064e0.cpe.net.cable.rogers.com)
[21:29:16] <CorvetteZR1> hello.  i'm trying to compile an old game, stuntrally, and this is causing the build to fail:      #define isnan(f)  std::isnan(f)
[21:29:24] <CorvetteZR1> i'm using gcc 11.2 to compile.  here is the paste that has the code where it's failing, and the full error:  https://dpaste.com/CFWZSY8ZW
[21:29:34] <CorvetteZR1> any idea why it's failing and how to fix it?
[21:30:00] *** Quits: andreasbuhr (~quassel@p549db620.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:30:15] <kalven> try replacing the macro with just 'using std::isnan;'
[21:31:45] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[21:31:57] *** Joins: JeffH (~JeffH@9.sub-174-198-138.myvzw.com)
[21:32:33] <PJBoy> as for why it's failing
[21:32:45] <PJBoy> `std::MACRO` does expand the macro
[21:32:51] *** Joins: Fault (~Fault@152.70.112.168)
[21:33:01] <PJBoy> so your call to std::isnan ends up being rewritten as std::std::isnan
[21:33:33] <CorvetteZR1> right, i read that somewhere; i think there was a patch to fix this in some other files, but not this one...and when enabling debug during compile, it trips here
[21:33:40] *** OnlineCop is now known as OnlineCop_
[21:34:21] <CorvetteZR1> kalven, so it should look like this:    #define std::isnan(f)     ?
[21:34:43] <CorvetteZR1> or replace that whole line and just have:   using std::isnan;
[21:34:54] <kalven> CorvetteZR1: replace that whole line
[21:35:02] <CorvetteZR1> ok, will try it
[21:37:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:56] *** ChanServ sets mode: +v npaperbot
[21:38:44] *** Quits: bobb_ (~bobb_@46.232.229.52) (Ping timeout: 256 seconds)
[21:39:14] *** Joins: gehn (~gehn@user/gehn)
[21:42:10] <CorvetteZR1> kalven, that worked!  thank you very much
[21:42:23] <kalven> no problem
[21:42:50] <CorvetteZR1> and thanks for the explanation PJBoy, will keep this in mind :)
[21:43:02] <PJBoy> :)
[21:55:30] *** OnlineCop_ is now known as OnlineCop
[21:57:16] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[22:00:58] *** Quits: pakcjo (~pakcjo@user/pakcjo) (Ping timeout: 244 seconds)
[22:06:35] *** Quits: pah (~pah@user/pah) (Ping timeout: 246 seconds)
[22:06:58] *** Joins: pah_ (~pah@host-82-57-4-54.retail.telecomitalia.it)
[22:07:33] *** Quits: JeffH (~JeffH@9.sub-174-198-138.myvzw.com) (Remote host closed the connection)
[22:08:45] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[22:11:50] *** Quits: pah_ (~pah@host-82-57-4-54.retail.telecomitalia.it) (Ping timeout: 246 seconds)
[22:12:28] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[22:13:17] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[22:13:39] *** Joins: pah (~pah@user/pah)
[22:17:42] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[22:18:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[22:19:51] *** Joins: pah (~pah@user/pah)
[22:24:33] *** Joins: immibis (~hexchat@62.156.144.218)
[22:33:57] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[22:34:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[22:36:11] *** Joins: chozorho (~chozorho@2601:146:300:c30::4ac5)
[22:37:15] *** Quits: magla (~gelignite@55d4ec6e.access.ecotel.net) (Quit: Stay safe!)
[22:38:44] *** Quits: Guest38 (~Guest38@49.207.217.150) (Quit: Connection closed)
[22:39:23] *** Joins: pah (~pah@user/pah)
[22:41:16] *** Joins: Simplar (~Simplar@188.163.92.225)
[22:43:01] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[22:43:17] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[22:45:20] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[22:47:34] <TheGuestMovie> If I compile an app written for C++98 in C++11, is it guaranteed to behave the same as before? It's the same compiler, just adding -std=c++11. It's a legacy app without a test suite.
[22:47:39] <TheGuestMovie> barring gcc bugs, I mean
[22:49:05] <PJBoy> http://eel.is/c++draft/diff.cpp03
[22:49:25] <PJBoy> that's a mostly comprehensive list of code incompatibilities
[22:52:16] <TheGuestMovie> damn. it compiles and runs so most of those don't apply...but the few with different runtime behavior are enough to make me not want to risk it
[22:52:32] <PJBoy> this is what tests are for
[22:52:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 246 seconds)
[22:53:41] <TheGuestMovie> at this point, that would be a herculean effort for this old app that I didn't write :/
[22:54:13] <TheGuestMovie> I'd also have to run the tests of all libraries used
[22:54:27] <TheGuestMovie> Guess it's staying on C++98 for now
[22:54:44] <PJBoy> fair
[22:55:47] <Simplar> What is the shortest unsigned integer type in C++?
[22:55:52] <Simplar> for storing *digits*
[22:57:56] *** Joins: ravan_ (~ravan@user/ravan)
[23:00:02] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[23:03:00] <TinoDidriksen> What do you mean storing digits? A string?
[23:03:38] <Simplar> TinoDidriksen: numbers from 0 to 9 as numbers, not as chars or strigns
[23:03:45] <Simplar> strings*
[23:04:00] <TinoDidriksen> Then uint8_t, which is an unsigned char.
[23:04:37] <TheGuestMovie> PJBoy: that URL you linked is for differences between 98 and 03, right? How come it mentions reserving auto, which I understood to be a C++11 feature (and https://en.cppreference.com/w/cpp/language/auto says so) ? Did they reserve it as far back as 03?
[23:05:00] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:05:10] <TinoDidriksen> auto was a different keyword before C++11
[23:05:31] <TinoDidriksen> It meant automatic storage duration, as opposed to static.
[23:05:49] <TinoDidriksen> Nobody used it for that purpose.
[23:05:50] <TheGuestMovie> but then why isn't auto listed at  http://eel.is/c++draft/diff.cpp11 if they changed the meaning of it?
[23:07:14] <TinoDidriksen> Because it's inherited from C.
[23:08:43] <TheGuestMovie> ok, thanks
[23:11:06] <Raziel> Simplar, uint8_t
[23:11:30] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:11:39] <Raziel> which, yes, is an unsigned char, but saying uint8_t is nicer. :p
[23:13:03] <comrad> shouldn't std::byte work too?
[23:13:54] <Simplar> Raziel: I can't believe I spent so much time doing one task XD
[23:14:32] <TinoDidriksen> byte is not an arithmetic type, which you usually want.
[23:14:47] <Simplar> Yep, I need arithmetics exactly
[23:14:57] <Raziel> Simplar, well, it do be that way sometimes
[23:15:07] <Simplar> I enjoy this at least
[23:15:18] <Simplar> It accelerates my cpp learning
[23:16:04] <Raziel> Simplar, if you really hate yourself, you could technically split an uint8 into 4bit halves that each store one digit :DDddd
[23:16:16] <Simplar> Raziel: I did this in js
[23:16:20] <Simplar> lovely one :D
[23:17:04] <Raziel> while stuff like that can save memory, they also normally end up being much slower, so eh
[23:20:03] <Simplar> Okay
[23:20:17] <Simplar> I proudly present my n00bish algo on multiplication by 2.
[23:20:55] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[23:21:04] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[23:21:05] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:21:17] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (osmium.libera.chat (Nickname regained by services)))
[23:21:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:21:22] *** Joins: udet__ (~udet@ve603.venus.servdiscount-customer.com)
[23:21:56] *** Joins: ravan__ (~ravan@user/ravan)
[23:22:08] *** Joins: pah (~pah@user/pah)
[23:22:16] *** Quits: Cienisty (Cienisty@user/cienisty) (Killed (platinum.libera.chat (Nickname regained by services)))
[23:22:18] *** Joins: manuels5 (~manuel@80.211.205.88)
[23:22:19] *** Joins: geordi_ (~geordi@tinodidriksen.com)
[23:22:19] *** ChanServ sets mode: +v geordi_
[23:22:21] *** Joins: Cienisty (Cienisty@user/cienisty)
[23:22:22] *** Joins: flynn4 (~mcbloch@user/flynn)
[23:22:24] *** Joins: dzz0072 (~dzz007@user/dzz007)
[23:22:26] *** Joins: Flonk6 (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[23:22:29] *** ravan__ is now known as ravan
[23:23:21] *** Joins: mcfrd (~mcfrdy@user/mcfrdy)
[23:23:33] <malinus> I'm pretty sure that std::byte is only recommended by people who never used it
[23:23:48] *** Joins: mIGu_ (~mig21@user/naur)
[23:24:07] *** Joins: magla (~gelignite@55d4ec6e.access.ecotel.net)
[23:24:15] *** Joins: m_tadeu (~quassel@bl5-182-86.dsl.telepac.pt)
[23:24:34] *** Joins: __nick__ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:24:46] *** Joins: sven_ (~quassel@squint.a-oben.org)
[23:25:41] *** Joins: Brewster_ (~Brewster@185.145.156.241)
[23:25:42] *** Joins: wasd_ (~wasd@108.101.7.51.dyn.plus.net)
[23:25:51] *** Joins: barix_ (~barix@user/barix)
[23:25:55] *** Joins: lmat_ (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[23:26:02] *** Joins: baltazaar (~baltazar@178-164-254-231.pool.digikabel.hu)
[23:26:02] *** Joins: ezzieygu1wuf (~Unknown@user/ezzieyguywuf)
[23:26:04] *** Quits: Brewster (~Brewster@user/brewster) (Killed (NickServ (GHOST command used by Brewster_!~Brewster@185.145.156.241)))
[23:26:08] *** Brewster_ is now known as Brewster
[23:26:17] *** Quits: Brewster (~Brewster@185.145.156.241) (Changing host)
[23:26:17] *** Joins: Brewster (~Brewster@user/brewster)
[23:26:26] *** Joins: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109)
[23:26:31] *** Joins: BrandonArnold2 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com)
[23:27:13] *** Quits: pah (~pah@user/pah) (Ping timeout: 250 seconds)
[23:28:38] <Simplar> https://wandbox.org/permlink/6lkltEvegwWaca3w
[23:28:56] <Simplar> why does that throw me so much compille errors if my iterator usage is presumably right?
[23:28:57] *** Joins: pah (~pah@user/pah)
[23:29:13] *** Joins: tabakhase__ (tabakhase@irc.s.bitase.net)
[23:29:15] *** Joins: edro (~edr@enlo.co)
[23:29:15] *** Quits: edro (~edr@enlo.co) (Changing host)
[23:29:15] *** Joins: edro (~edr@user/edr)
[23:29:53] <Raziel> because your iterator usage is not right
[23:30:11] <Simplar> does iterator represent the current item in the list?
[23:30:22] <TinoDidriksen> Yes
[23:30:46] *** Quits: ravan_ (~ravan@user/ravan) (*.net *.split)
[23:30:46] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (*.net *.split)
[23:30:46] *** Quits: Fault (~Fault@152.70.112.168) (*.net *.split)
[23:30:46] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[23:30:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (*.net *.split)
[23:30:46] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[23:30:46] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (*.net *.split)
[23:30:46] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[23:30:46] *** Quits: Burgundy (~yomon@86.127.194.72) (*.net *.split)
[23:30:46] *** Quits: edr (~edr@user/edr) (*.net *.split)
[23:30:46] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[23:30:46] *** Quits: BrandonArnold1 (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com) (*.net *.split)
[23:30:46] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (*.net *.split)
[23:30:46] *** Quits: rnsanchez (~rnsanchez@179.233.246.221) (*.net *.split)
[23:30:46] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[23:30:46] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[23:30:46] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[23:30:46] *** Quits: sven^ (~quassel@squint.a-oben.org) (*.net *.split)
[23:30:46] *** Quits: tabakhase (~tabakhase@user/tabakhase) (*.net *.split)
[23:30:46] *** Quits: udet_ (~udet@ve603.venus.servdiscount-customer.com) (*.net *.split)
[23:30:46] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[23:30:46] *** Quits: wasd (~wasd@user/axis) (*.net *.split)
[23:30:46] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[23:30:46] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[23:30:46] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[23:30:46] *** Quits: m_tadeu_ (~quassel@bl5-182-86.dsl.telepac.pt) (*.net *.split)
[23:30:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[23:30:46] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[23:30:47] *** Quits: baltazar (~baltazar@178-164-254-231.pool.digikabel.hu) (*.net *.split)
[23:30:47] *** Quits: mitch0 (~mitch@178-164-254-231.pool.digikabel.hu) (*.net *.split)
[23:30:47] *** Quits: barix (~barix@user/barix) (*.net *.split)
[23:30:47] *** Quits: mIGu (~mig21@user/naur) (*.net *.split)
[23:30:47] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[23:30:47] *** Quits: johnny (~johnny@user/johnny) (*.net *.split)
[23:30:47] *** mcfrd is now known as mcfrdy
[23:30:47] *** geordi_ is now known as geordi
[23:30:47] *** geordi is now known as geordi_
[23:30:47] *** flynn4 is now known as flynn
[23:30:47] *** manuels5 is now known as manuels
[23:30:47] *** Flonk6 is now known as Flonk
[23:30:47] *** mIGu_ is now known as mIGu
[23:30:47] *** dzz0072 is now known as dzz007
[23:30:47] *** baltazaar is now known as baltazar
[23:31:07] <TinoDidriksen> geordi_ wtf did you do...renamed twice?
[23:31:15] *** Quits: __nick__ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:31:23] <Simplar> TinoDidriksen: so when i do ++it, I basically move one item left?
[23:31:32] <TinoDidriksen> Yup
[23:31:32] <Simplar> (since it's a reverse iterator)
[23:31:57] <Simplar> how do I modify the current item in the list using the iterator then?
[23:32:02] <Simplar> I honestly thought iterator is an index
[23:32:08] <TinoDidriksen> Assign to *it
[23:32:23] <Simplar> like *it = ...something
[23:32:26] <TinoDidriksen> Yes
[23:32:32] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 268 seconds)
[23:32:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:32:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:33:03] *** Joins: Fault (~Fault@152.70.112.168)
[23:33:56] <Simplar> TinoDidriksen: it clearly does not like me doing (*it = (it<9) ? it : it+rem);)
[23:33:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:34:03] <Simplar> because 'no < operand'
[23:34:07] <TinoDidriksen> You can't check it < 9
[23:34:10] <Simplar> do I need *it < 9 ?
[23:34:24] <TinoDidriksen> If you want to check whether the value is 9 at that spot, yes.
[23:34:36] <Simplar> aha, so it is the pointer
[23:34:42] <Simplar> and *it is value behind it
[23:34:46] <TinoDidriksen> Indeed
[23:35:51] <Simplar> https://wandbox.org/permlink/0TNdUhTZIAP0SNds hello my new attempt
[23:36:41] *** Quits: dld (~dld@73.61.8.213) (Ping timeout: 264 seconds)
[23:36:59] *** Joins: rnsanchez (~rnsanchez@179.233.246.221)
[23:37:09] *** Joins: johnny (~johnny@user/johnny)
[23:37:12] *** Joins: greenbagels (~gb@user/greenbagels)
[23:37:20] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[23:37:44] *** barix_ is now known as barix
[23:37:50] <Raziel> Simplar, add to_string to n
[23:37:57] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[23:37:58] <Raziel> cause uint8 gets interpretes as a character
[23:38:00] *** Joins: Dragoon (~Dragoon@user/dragoon)
[23:38:03] <Simplar> Raziel: just did
[23:38:05] <Raziel> when you cout it
[23:38:06] *** Joins: dld (~dld@2601:197:600:1210:1d51:fa28:794f:615f)
[23:38:49] <Simplar> 13371333222287*2 should be 26742666444574
[23:39:09] <Simplar> program gave 126662666646484 :(
[23:39:48] *** Joins: Terminus (~null@user/terminus)
[23:40:16] <Raziel> well your algorithm must be wrong then. :p
[23:40:47] <Simplar> let's see...
[23:40:56] <Simplar> 7*2 = 14 indeed
[23:41:15] <Simplar> { cout << to_string((7*2)%10) }
[23:41:15] <geordi_> error: expected ';' before '}' token (fix known)
[23:41:19] *** kenanmarasli_ is now known as kenanmarasli
[23:41:20] <Simplar> { cout << to_string((7*2)%10); }
[23:41:20] <geordi_> 4
[23:41:21] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:18c0:c660:97e2:f5b6)
[23:41:21] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:18c0:c660:97e2:f5b6) (Changing host)
[23:41:21] *** Joins: skapata (~Skapata@user/skapata)
[23:41:27] <Simplar> mod should work well
[23:41:49] <Raziel> let's take something easier. like, say, just 87.
[23:42:14] <Raziel> first you multiple the 7 by two, you get 14, right. so you replace the 7 with a 4, and you have to add 1 to the 8
[23:42:21] <Simplar> yes, this is what i did
[23:42:42] <Raziel> I don't see you adding anything to the next element anywhere
[23:42:47] <Raziel> you always only work on it
[23:43:04] <Simplar> what if the next element does not exist?
[23:43:15] <Simplar> i just save the remainder 0 or 1 in rem variable
[23:43:17] <Raziel> then you're at the special endcase where your rem is actually relevant
[23:43:19] <Simplar> so it'll add next iteration
[23:43:22] <Raziel> but that's only for the end.
[23:43:51] <Raziel> well, if you want it to carry over it should be static, at least
[23:44:30] <Raziel> unfortunately, just adding static doesn't seem to fix anything in there
[23:44:38] <Simplar> oh
[23:44:40] <Simplar> rem = (*it < 5) ? 1 : 0;
[23:44:48] <Raziel> oh wait, it doesn't have to be static, the loop is inside there anyway
[23:44:49] <Raziel> hurr.
[23:44:53] <Simplar> my it resulted in to be 4
[23:45:01] <Simplar> but i should calc rem based on numbers before manip
[23:45:04] <Simplar> sec
[23:45:31] *** Joins: ShiftyLogic (~shiftylog@c-67-171-23-157.hsd1.wa.comcast.net)
[23:45:44] *** Quits: ShiftyLogic (~shiftylog@c-67-171-23-157.hsd1.wa.comcast.net) (Client Quit)
[23:46:27] <Raziel> your conditions seem kinda sus in the first place. like, I'm not sure why they're there.
[23:46:58] <Simplar> because if the digit is 9 and we have to add something to it, it'll become 2-digit in any case
[23:52:40] <Simplar> Raziel: my thought is to just %10 for the digit and %10 that result again for remainder
[23:53:53] *** Quits: tabakhase__ (tabakhase@irc.s.bitase.net) (Quit: ZNC - http://znc.in)
[23:54:17] <Raziel> you know what's funny, is that even when correctly coded this wouldn't work
[23:54:25] <Simplar> Why not?
[23:54:41] *** Joins: tabakhase (~tabakhase@user/tabakhase)
[23:55:12] <Raziel> nevermind, it will if you do things in the right order
[23:55:39] <Raziel> https://wandbox.org/permlink/7vIwbH38ym4uW2Jn
[23:56:08] <Raziel> lots of debug out there to see what's going on but yeah
[23:56:58] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[23:58:33] <Raziel> which should've been cleaned up a bit more since I left it all over the place https://wandbox.org/permlink/7hERL4Ea7CsucgjH
[23:59:11] <Raziel> this is also kinda halfway there to working for multiplying by something other than 2 as well, but :p
