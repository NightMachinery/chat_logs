[00:05:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[00:05:31] *** Quits: paul424 (~tom@ip-37-248-155-156.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:09:00] <xkoncek> yolo i was wondering about the same hidden macro a few days ago
[00:10:04] <xkoncek> anyway, if you included a C header that does not acknowledge the exictence of C++, you would get linker errors because the symbol names are different
[00:10:36] *** Joins: fartacus (~root@74-207-241-188.ip.linodeusercontent.com)
[00:11:56] *** Quits: fartacus (~root@74-207-241-188.ip.linodeusercontent.com) (K-Lined)
[00:12:50] <yolo> yes, used to be a C guy, so how to mix c and c++ best back and forth is interesting, so far, with 'extern C' it 'just works', from my read, mix cstdio and iostream is also safe
[00:15:02] <yolo> https://flylib.com/books/en/2.123.1.537/1/  ios::sync_with_stdio() of cstdio/iostream occurs to modify the same file though
[00:15:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[00:26:51] *** Quits: r-g (~r-g@51.15.187.53) (Quit: r-g)
[00:28:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:29:18] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[00:31:28] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:40:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:47:08] *** Quits: rito_ (~rito_gh@45.112.243.149) (Quit: Leaving)
[00:47:59] *** Quits: irrenhaus3 (~xenon@HSI-KBW-046-005-003-233.hsi8.kabel-badenwuerttemberg.de) (Quit: Lost terminal)
[00:49:06] *** Joins: seninha (~seninha@user/seninha)
[00:52:25] *** Quits: magla (~gelignite@55d47b01.access.ecotel.net) (Quit: Stay safe!)
[00:53:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:56:06] <sprout_> dear people,  I am starting on a migration of code to c++20 modules.  now my question is:  where is <iostream>?  what import statement am I looking for?
[00:57:29] <sprout_> oh,  it's just `import <iostream>;` I gather
[00:57:32] <sprout_> right?
[00:58:19] *** Joins: luizfrds (~Luiz@152.250.243.147)
[01:01:21] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[01:01:42] *** Joins: pulse (~pulse@user/pulse)
[01:06:36] *** Quits: Leone (~Leo@157.52.18.77) ()
[01:10:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[01:12:27] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:12:56] *** Joins: Leone (~Leo@157.52.18.77)
[01:12:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:13:39] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[01:14:21] <kalven>  has the standard library been "modularized" yet?
[01:14:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[01:14:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:17:51] <sprout_> maybe not in a portable manner? I am still googling instead of writing code.
[01:18:25] <sprout_> looks like mscv has std.core,  maybe,  and other compilers other stuff?  but that might all be outdated too
[01:18:42] <sprout_> this is terribly confusing!
[01:24:14] <kalven> clang/libc++ has the method you mentioned above
[01:26:00] <kalven> nice.. just tested it on my little project. swapped out all #include with standard headers to import and the compile time was nearly cut in half
[01:32:17] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:34:22] <sprout_> kalven: thanks for the help but that was too cryptic for me...  what do I type in,  or rather,  where can I find what I need to type in?
[01:34:46] <xkoncek> sprout_ last time i checked (about 6 months ago) it was buggy
[01:35:06] <xkoncek> random compiler errors whenever i modularized too much
[01:35:15] <xkoncek> on gcc
[01:35:24] <xkoncek> 11.2.1
[01:36:42] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:36:56] *** Joins: MarcusRoman (~Admin@37.120.232.44)
[01:39:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:39:57] *** Quits: MarcusRoman (~Admin@37.120.232.44) (Client Quit)
[01:40:18] *** Joins: MarcusRoman (~Admin@37.120.232.44)
[01:40:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:52] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:52] *** ChanServ sets mode: +v npaperbot
[01:42:41] *** Quits: MarcusRoman (~Admin@37.120.232.44) (Client Quit)
[01:43:17] <kalven> sprout_: it'll depend on what compiler and standard lib you are using
[01:43:32] *** Joins: MarcusRoman (~Admin@37.120.232.44)
[01:44:23] <sprout_> that's unfortunate.  I am writing an interpreter I want to be able to be compilable on most targets (now gcc/clang but I do intend to support mscv)
[01:44:34] <sprout_> *it
[01:44:42] <sprout_> ah well
[01:45:09] <sprout_> going for import <iostream>; then for the moment,  pending some other answer
[01:46:23] *** Joins: aeg (~aeg@215-052-180-159.dynamic.caiway.nl)
[01:47:35] <kalven> then you should probably not use modules for now
[01:50:02] <LordKalma> modules are most definitely mostly not ready
[01:50:51] <kalven> but since I'm only targeting clang/libc++ in this project, I'll take the improvement
[01:51:01] <Guest19> Hello. Simple question - If I've struct Node { Node* left; }, what's type of x : auto x = &Node::left ;
[01:51:01] <LordKalma> for sure
[01:52:10] *** Joins: noarb (~noarb@user/noarb)
[01:52:37] <LordKalma> {auto x = &Node::left; cout << typeid(x).name();}  struct Node { Node* left; }; // Guest19
[01:52:37] <geordi> Node* Node::*
[01:53:16] <Guest19> I am confused by that answer..can you ELI5?
[01:53:22] <LordKalma> no, because same
[01:53:59] <Guest19> huh
[01:54:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[01:54:35] <kalven>  it's a member pointer (in the struct node) that points to a node
[01:55:26] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:55:36] <kalven> or rather, pointer-to-member
[01:55:51] *** Quits: Leone (~Leo@157.52.18.77) (Read error: Connection reset by peer)
[01:56:01] <Guest19> I am confused because int q = 123; int* p = &q;Â  auto x = &p; x will have type int**
[01:56:20] <Guest19> but when we are taking address of left, I was expecting 2 ** but it's not the case
[01:56:57] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[01:57:15] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:57:29] <kalven> note that regular pointers and member pointers are quite different
[01:57:30] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[01:57:35] <Guest19> {auto x = &Node::left; cout << typeid(x).name();}  struct Node { Node** left; };
[01:57:35] <geordi> Node** Node::*
[01:58:26] <kalven> { Node n; auto x = &n.left; cout << typeid(x).name();}  struct Node { Node* left; };
[01:58:26] <geordi> Node**
[01:58:51] <kalven> now x is a pointer to n.left
[01:59:06] <Guest19> yeah I see
[01:59:35] <Guest19> so Node* Node::* implies x is Pointer to a member(Node::*) and that member has type Node* (Node *)
[02:00:07] <kalven> right
[02:00:23] <Guest19> perfect, that helps. Thanks a lot!
[02:01:59] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[02:02:02] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:02:20] *** Quits: jsbach (~jsbach@2a01:c22:3576:8400:5c0d:1d5f:eb51:9dd2) (Ping timeout: 252 seconds)
[02:07:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[02:14:41] *** Joins: jsbach (~jsbach@2a01:c22:3576:8400:485:57f6:a6f7:e592)
[02:19:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:21:01] <RandomReader> xkoncek - there's also https://github.com/timsong-cpp/cppwp for drafts of specific C++ revisions, since eel.is is always the current in-progress one
[02:22:44] *** Joins: Terminus (~null@user/terminus)
[02:26:15] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[02:27:28] <MarcusRoman> how do i represent a UTF-8 string in C++
[02:30:22] <kalven> crickets..
[02:35:13] *** Quits: MarcusRoman (~Admin@37.120.232.44) (Ping timeout: 256 seconds)
[02:38:22] *** Joins: MarcusRoman (~Admin@37.120.232.44)
[02:40:46] *** Quits: jsbach (~jsbach@2a01:c22:3576:8400:485:57f6:a6f7:e592) (Quit: Leaving)
[02:44:05] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[02:47:23] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:51:44] *** Joins: Burgundy (~yomon@82.76.72.88)
[02:57:34] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:01:18] *** Quits: paule32 (~paul@user/paule32) (Quit: Leaving)
[03:05:24] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Remote host closed the connection)
[03:09:36] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[03:10:17] *** Quits: plastico1 (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:10:55] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[03:20:34] <RandomReader> in C++20, you use the u8 prefixes on literals where appropriate, and store data in std::u8string
[03:21:25] <RandomReader> unfortunately that's about all you can do, since none of the I/O supports that .. e.g. using iostreams isn't going to work, most popular libraries aren't going to either, etc
[03:22:00] <RandomReader> so the practical answer? use std::string, and manually verify every single place you use it expects / is set to work with UTF-8
[03:22:13] <RandomReader> which isn't going to be any kind of portable, always platform-specific
[03:22:20] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[03:24:49] *** Joins: seninha (~seninha@user/seninha)
[03:26:46] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[03:33:48] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[03:35:39] <cbreak> or you can just define it in some readme / doxygen comment as API requirement for your library / functions
[03:55:49] *** Joins: frost (~frost@user/frost)
[04:01:17] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[04:07:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[04:08:34] *** Joins: seninha (~seninha@user/seninha)
[04:09:00] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:20] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:65e0) (Quit: Leaving)
[04:17:44] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:20:05] *** Joins: xkuru (~xkuru@user/xkuru)
[04:20:48] *** Joins: frost (~frost@user/frost)
[04:23:38] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:26:46] *** Joins: Fairy (~Fairy@ti0004a400-0210.bb.online.no)
[04:30:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:40:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:41:35] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:48:32] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[04:49:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:53:04] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 256 seconds)
[05:00:13] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 240 seconds)
[05:02:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:26:11] *** Joins: PJBoy (~PJBoy@user/pjboy)
[05:28:29] *** PJBoy is now known as Guest5916
[05:28:29] *** Quits: Guest5916 (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[05:28:35] *** Joins: PJBoy (~PJBoy@user/pjboy)
[05:31:20] *** Joins: AmR (~AmREiSa@41.238.31.212)
[05:34:27] *** Joins: frost (~frost@user/frost)
[05:38:37] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:40:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:55] *** ChanServ sets mode: +v npaperbot
[05:42:48] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[05:44:23] *** Joins: johnny (~johnny@user/johnny)
[05:51:17] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[05:55:51] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:59:22] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:05:20] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[06:07:06] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[06:07:15] *** Joins: frost (~frost@user/frost)
[06:08:46] *** Joins: johnny (~johnny@user/johnny)
[06:09:54] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:11:10] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[06:12:56] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[06:20:11] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:24:36] *** Joins: frost (~frost@user/frost)
[06:26:02] *** Quits: dld (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196) (Ping timeout: 240 seconds)
[06:27:23] *** Joins: dld (~davidlowr@2601:197:600:1210:a837:f325:7d6a:5246)
[06:27:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:29:27] *** Quits: MarcusRoman (~Admin@37.120.232.44) (Quit: Konversation terminated!)
[06:29:49] *** Quits: Fairy (~Fairy@ti0004a400-0210.bb.online.no) (Ping timeout: 256 seconds)
[06:34:21] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 256 seconds)
[06:36:31] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ¦)
[06:37:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:38:03] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[06:41:18] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[06:41:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:42:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:54:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[06:55:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[06:59:20] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:14:33] *** Joins: segnior (segnior@user/segnior)
[07:19:30] *** Quits: segnior (segnior@user/segnior) (Read error: Connection reset by peer)
[07:22:20] *** Joins: adeliktas2 (~adeliktas@i59F525D5.versanet.de)
[07:24:13] *** Quits: adeliktas (~adeliktas@i59F5F341.versanet.de) (Ping timeout: 240 seconds)
[07:24:13] *** adeliktas2 is now known as adeliktas
[07:30:13] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 240 seconds)
[07:40:18] <yolo> https://github.com/dtrugman/ModernPosix looks like i'm not new to ask for posix-c++-wrappers
[07:43:09] <yolo> https://basepath.com/aup/ex/group__Ux.html this one is in 2004, too old, the above on is c++11
[07:54:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:08:01] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:27:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[08:42:26] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:50:22] *** Joins: supernova (~quassel@2405:9800:ba11:6207:d922:7fa5:432:de05)
[08:57:43] *** Joins: malloy (~jimery@116.30.220.175)
[09:00:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:00:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:04:36] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[09:09:37] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:10:02] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[09:27:22] *** Joins: malloy (~jimery@116.30.220.175)
[09:29:23] <ville> yolo: you're fairly new to c++? i'd advice to accumulate your self helper types that help you use c libraries rather than individually wrapping every library you come into contact with into some "c++ oop" form
[09:40:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:54] *** ChanServ sets mode: +v npaperbot
[10:00:12] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Read error: Connection reset by peer)
[10:03:31] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[10:20:33] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:22:16] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[10:27:14] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[10:27:37] *** Quits: kapil- (~kapil@2a01:4f9:c010:c9c3::1) (Read error: Connection reset by peer)
[10:29:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[10:30:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:39:37] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Ping timeout: 240 seconds)
[10:41:01] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:f92e:1579:496c:2e3a) (Read error: Connection reset by peer)
[10:41:32] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:30ae:97d7:8d1d:fbf3)
[10:44:03] *** Joins: BluesBoy (~bboy@user/bluesboy)
[10:45:49] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:30ae:97d7:8d1d:fbf3) (Ping timeout: 240 seconds)
[10:49:39] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:53:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:53:27] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[10:58:56] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:03:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:06:02] *** Joins: frost (~frost@user/frost)
[11:06:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[11:11:40] *** Joins: namo (~nomo@95.87.208.95)
[11:13:32] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:68ff)
[11:17:59] *** Joins: jsbach (~jsbach@2a01:c22:b171:2800:661:8ac5:856b:c920)
[11:19:59] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:23:50] *** Joins: andreasbuhr (~quassel@p549db698.dip0.t-ipconnect.de)
[11:30:12] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:39:30] *** Quits: frost (~frost@user/frost) (*.net *.split)
[11:39:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[11:39:30] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[11:39:31] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (*.net *.split)
[11:39:31] *** Quits: adeliktas (~adeliktas@i59F525D5.versanet.de) (*.net *.split)
[11:39:31] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (*.net *.split)
[11:39:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[11:39:31] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[11:39:31] *** Quits: letto (~letto@188.25.113.229) (*.net *.split)
[11:39:31] *** Quits: HvszrStykp (~X@81.171.62.86) (*.net *.split)
[11:39:31] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[11:39:31] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[11:39:31] *** Quits: RandomReader (~RandomRea@user/randomreader) (*.net *.split)
[11:39:31] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[11:39:32] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (*.net *.split)
[11:39:32] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[11:39:32] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (*.net *.split)
[11:39:32] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (*.net *.split)
[11:39:32] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (*.net *.split)
[11:39:32] *** Quits: adeliktas7 (~adeliktas@v15153.1blu.de) (*.net *.split)
[11:39:32] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (*.net *.split)
[11:39:32] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[11:39:32] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (*.net *.split)
[11:39:32] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[11:39:32] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[11:39:32] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[11:39:32] *** Quits: sonic1 (~sonic@user/sonic) (*.net *.split)
[11:39:32] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[11:39:32] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[11:39:32] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[11:39:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[11:39:32] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (*.net *.split)
[11:39:33] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[11:39:33] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[11:39:33] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (*.net *.split)
[11:39:33] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:39:33] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:39:33] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[11:39:33] *** Quits: imMute (~immute@user/immute) (*.net *.split)
[11:39:33] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[11:39:33] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (*.net *.split)
[11:39:33] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[11:39:33] *** Quits: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (*.net *.split)
[11:39:33] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[11:39:33] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[11:39:33] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[11:39:33] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[11:39:33] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (*.net *.split)
[11:39:34] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[11:39:34] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[11:39:34] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[11:39:34] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[11:39:34] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[11:39:34] *** Quits: andreyv (~andrey@user/andreyv) (*.net *.split)
[11:39:34] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[11:39:34] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[11:39:34] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (*.net *.split)
[11:39:34] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[11:39:34] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[11:39:34] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[11:39:34] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: taiyu (~taiyu@user/taiyu) (*.net *.split)
[11:39:35] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[11:39:35] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[11:39:35] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[11:39:35] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: renopt (~renopt@lisp.us.to) (*.net *.split)
[11:39:35] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (*.net *.split)
[11:39:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (*.net *.split)
[11:39:35] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (*.net *.split)
[11:39:35] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (*.net *.split)
[11:39:35] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[11:39:35] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[11:39:35] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[11:39:35] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[11:39:35] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[11:39:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[11:39:35] *** Quits: ville (~ville@user/ville) (*.net *.split)
[11:39:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[11:39:35] *** Quits: hackkitten (~hackkitte@94.31.103.136) (*.net *.split)
[11:39:35] *** Quits: ravan (~ravan@user/ravan) (*.net *.split)
[11:39:36] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[11:39:36] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[11:39:36] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (*.net *.split)
[11:39:36] *** Quits: jns (~x@user/jns) (*.net *.split)
[11:39:36] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[11:39:36] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (*.net *.split)
[11:39:36] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[11:39:36] *** Quits: rnsanchez (~rnsanchez@179.233.249.52) (*.net *.split)
[11:39:36] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[11:39:36] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[11:39:36] *** Quits: lru (~lru@240.ip-51-79-50.net) (*.net *.split)
[11:39:36] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[11:39:37] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[11:39:37] *** Quits: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi) (*.net *.split)
[11:39:37] *** Quits: malinus_ (~malinus@172.245.158.16) (*.net *.split)
[11:39:37] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[11:39:37] *** Quits: mathu (~matt@user/mathu) (*.net *.split)
[11:39:37] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[11:39:37] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[11:39:37] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[11:39:37] *** Quits: aeg (~aeg@215-052-180-159.dynamic.caiway.nl) (*.net *.split)
[11:39:38] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[11:39:38] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (*.net *.split)
[11:39:38] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (*.net *.split)
[11:39:39] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[11:39:39] *** Quits: chris123123 (~bnc123@streuwerte.de) (*.net *.split)
[11:39:39] *** Quits: HeTo (henkka@beer.modeemi.fi) (*.net *.split)
[11:39:39] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[11:39:39] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[11:39:39] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[11:39:39] *** Quits: wielding (~wielding@user/wielding) (*.net *.split)
[11:39:39] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[11:39:40] *** Quits: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (*.net *.split)
[11:39:40] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[11:39:40] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[11:39:40] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[11:39:41] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[11:39:41] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[11:39:41] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (*.net *.split)
[11:39:41] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[11:39:41] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[11:39:41] *** Quits: bv (~bv@user/bv) (*.net *.split)
[11:39:41] *** Quits: d12fk (~heiko@exit0.net) (*.net *.split)
[11:39:41] *** Quits: epony (~epony@user/epony) (*.net *.split)
[11:39:41] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[11:39:41] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (*.net *.split)
[11:39:42] *** Quits: miklcct (~quassel@vps.miklcct.com) (*.net *.split)
[11:39:42] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[11:39:42] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[11:39:42] *** Quits: tbe_loki (~loki@loki.codes) (*.net *.split)
[11:39:42] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[11:39:42] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[11:39:42] *** Quits: kalven (~calvin@2a02:470:84:102::24) (*.net *.split)
[11:39:42] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[11:39:42] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[11:39:42] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[11:39:42] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[11:39:43] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[11:39:43] *** Quits: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d) (*.net *.split)
[11:39:43] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (*.net *.split)
[11:39:43] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[11:39:43] *** Quits: eck (~root@user/eck) (*.net *.split)
[11:39:43] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (*.net *.split)
[11:39:43] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[11:39:43] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[11:39:44] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[11:39:44] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[11:39:44] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:39:44] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (*.net *.split)
[11:39:44] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[11:39:44] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[11:39:44] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (*.net *.split)
[11:39:44] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (*.net *.split)
[11:39:45] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[11:39:45] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:410:b257:d310:4a8f) (*.net *.split)
[11:40:28] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:41:38] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[11:50:10] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[11:51:16] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[11:51:37] *** Joins: JohnMS_WORK (~kvirc@user-5-173-136-94.play-internet.pl)
[11:51:37] *** Joins: NiD27 (~nid27@49.205.151.136)
[11:51:37] *** Joins: biberu (~biberu@user/biberu)
[11:51:37] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:51:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:51:37] *** Joins: BluesBoy (~bboy@user/bluesboy)
[11:51:37] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[11:51:37] *** Joins: adeliktas (~adeliktas@i59F525D5.versanet.de)
[11:51:37] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:51:37] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[11:51:37] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:51:37] *** Joins: noarb (~noarb@user/noarb)
[11:51:37] *** Joins: aeg (~aeg@215-052-180-159.dynamic.caiway.nl)
[11:51:37] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[11:51:37] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:51:37] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[11:51:37] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[11:51:37] *** Joins: letto (~letto@188.25.113.229)
[11:51:37] *** Joins: HvszrStykp (~X@81.171.62.86)
[11:51:37] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:51:37] *** Joins: causative (~halberd@user/causative)
[11:51:37] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[11:51:37] *** Joins: RandomReader (~RandomRea@user/randomreader)
[11:51:37] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[11:51:37] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[11:51:37] *** Joins: greenbagels (~gb@user/greenbagels)
[11:51:37] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[11:51:37] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:410:b257:d310:4a8f)
[11:51:37] *** Joins: autark (~autark@ti0048a400-0869.bb.online.no)
[11:51:37] *** Joins: dzz007 (~dzz007@user/dzz007)
[11:51:37] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[11:51:37] *** Joins: edr (~edr@user/edr)
[11:51:37] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[11:51:37] *** Joins: adeliktas7 (~adeliktas@v15153.1blu.de)
[11:51:37] *** Joins: ville (~ville@user/ville)
[11:51:37] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:51:37] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[11:51:37] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[11:51:37] *** Joins: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d)
[11:51:37] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[11:51:37] *** Joins: epony (~epony@user/epony)
[11:51:37] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:51:37] *** Joins: traxex (traxex@user/traxex)
[11:51:37] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[11:51:37] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[11:51:37] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[11:51:37] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[11:51:37] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[11:51:37] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[11:51:37] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[11:51:37] *** Joins: wielding (~wielding@user/wielding)
[11:51:37] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[11:51:37] *** Joins: orkim (~orkim@user/orkim)
[11:51:37] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[11:51:37] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[11:51:37] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[11:51:37] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[11:51:37] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[11:51:37] *** Joins: jns (~x@user/jns)
[11:51:37] *** Joins: Oxyd (~oxyd@user/oxyd)
[11:51:37] *** Joins: Dijky (~Dijky@user/dijky)
[11:51:37] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[11:51:37] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[11:51:37] *** Joins: mathu (~matt@user/mathu)
[11:51:37] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[11:51:37] *** Joins: malinus_ (~malinus@172.245.158.16)
[11:51:37] *** Joins: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi)
[11:51:37] *** Joins: jkl1337 (~jkl@user/jkl)
[11:51:37] *** Joins: lru (~lru@240.ip-51-79-50.net)
[11:51:37] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[11:51:37] *** Joins: LangerJan (~jan@user/langerjan)
[11:51:37] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[11:51:37] *** Joins: rnsanchez (~rnsanchez@179.233.249.52)
[11:51:37] *** Joins: rb (~augh@theguntretort.com)
[11:51:37] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[11:51:37] *** Joins: Praise (~Fat@user/praise)
[11:51:37] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[11:51:37] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[11:51:37] *** Joins: andreyv (~andrey@user/andreyv)
[11:51:37] *** Joins: computerquip (sid423484@user/computerquip)
[11:51:37] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[11:51:37] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[11:51:37] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[11:51:37] *** Joins: elemongw (~elemongw@20.107.36.50)
[11:51:37] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[11:51:37] *** Joins: urdh (~urdh@user/urdh)
[11:51:37] *** Joins: kurfen (~kurfen@176.119.195.10)
[11:51:37] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[11:51:37] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[11:51:37] *** Joins: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[11:51:37] *** Joins: tabakhase (tabakhase@user/tabakhase)
[11:51:37] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[11:51:37] *** Joins: xisop (~xisop@bnull.net)
[11:51:37] *** Joins: imMute (~immute@user/immute)
[11:51:37] *** Joins: celphi (sid97751@user/celphi)
[11:51:37] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[11:51:37] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:51:37] *** Joins: renopt (~renopt@lisp.us.to)
[11:51:37] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[11:51:37] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[11:51:37] *** Joins: Ara (~Ara@user/ara)
[11:51:37] *** Joins: InPhase (~InPhase@openscad/inphase)
[11:51:37] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[11:51:37] *** Joins: taiyu (~taiyu@user/taiyu)
[11:51:37] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[11:51:37] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[11:51:37] *** Joins: buhman (sid411355@user/buhman)
[11:51:37] *** Joins: Artea (~Lufia@artea.com.pt)
[11:51:37] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[11:51:37] *** Joins: teepee (~teepee@openscad/teepee)
[11:51:37] *** Joins: Spydar007 (~spydar007@user/spydar007)
[11:51:37] *** Joins: obiwahn (~heini@user/obiwahn)
[11:51:37] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[11:51:37] *** Joins: HeTo (henkka@beer.modeemi.fi)
[11:51:37] *** Joins: chris123123 (~bnc123@streuwerte.de)
[11:51:37] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[11:51:37] *** Joins: d12fk (~heiko@exit0.net)
[11:51:37] *** Joins: bv (~bv@user/bv)
[11:51:37] *** Joins: Cienisty (Cienisty@user/cienisty)
[11:51:37] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[11:51:37] *** Joins: m42e (~m42e@pb42.de)
[11:51:37] *** Joins: tonitch (~tonitch@user/tonitch)
[11:51:37] *** Joins: Dragoon (~Dragoon@user/dragoon)
[11:51:37] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[11:51:37] *** Joins: klys (~mdasoh@show.op8.us)
[11:51:37] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[11:51:37] *** Joins: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1)
[11:51:37] *** Joins: geordi (~geordi@tinodidriksen.com)
[11:51:37] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:51:37] *** Joins: markand (~markand@markand.fr)
[11:51:37] *** Joins: Khoyo (~khoyo@user/khoyo)
[11:51:37] *** Joins: FLHerne (flh@flherne.uk)
[11:51:37] *** Joins: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[11:51:37] *** Joins: eck (~root@user/eck)
[11:51:37] *** Joins: jancoow (~jancoow@user/jancoow)
[11:51:37] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[11:51:37] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[11:51:37] *** Joins: cncr04s (~cncr04s@afxr.net)
[11:51:37] *** molybdenum.libera.chat sets mode: +v geordi
[11:51:37] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[11:51:37] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[11:51:37] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[11:51:37] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[11:51:37] *** Joins: miklcct (~quassel@vps.miklcct.com)
[11:51:37] *** Joins: tbe_loki (~loki@loki.codes)
[11:51:37] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[11:51:37] *** Joins: manuels (~manuel@80.211.205.88)
[11:51:37] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[11:51:37] *** Joins: tobs (~tobs@taboege.de)
[11:51:37] *** Joins: deepy (deepy@user/deepy)
[11:51:37] *** Joins: talisein (~talisein@user/talisein)
[11:51:37] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[11:51:37] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[11:51:37] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[11:51:37] *** Joins: Karyon (~Karyon@user/karyon)
[11:51:37] *** Joins: zoraj (~zoraj@209.126.81.159)
[11:51:37] *** Joins: syrius (syrius@titan.stormtek.net)
[11:51:37] *** Joins: unyu (~pyon@user/pyon)
[11:51:37] *** Joins: sonic1 (~sonic@user/sonic)
[11:51:37] *** Joins: Furai (~Furai@furai.pl)
[11:51:37] *** molybdenum.libera.chat sets mode: +v nolyc
[11:51:47] *** Quits: andreasbuhr (~quassel@p549db698.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:52:05] *** JohnMS_WORK is now known as 073AAG789
[11:52:06] *** Quits: epony (~epony@user/epony) (Max SendQ exceeded)
[11:52:09] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:52:09] *** Joins: epony (~epony@user/epony)
[11:52:26] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[11:54:31] *** Quits: 073AAG789 (~kvirc@user-5-173-136-94.play-internet.pl) (Ping timeout: 256 seconds)
[11:56:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[11:56:35] *** Joins: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl)
[11:56:38] *** Joins: andreasbuhr (~quassel@p549db698.dip0.t-ipconnect.de)
[11:56:38] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:56:41] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Read error: Connection reset by peer)
[11:58:02] *** Joins: johnny (~johnny@user/johnny)
[12:02:44] *** Quits: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[12:05:30] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[12:06:33] *** Quits: johnny (~johnny@user/johnny) (Read error: Connection reset by peer)
[12:09:40] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:10:16] *** Joins: johnny (~johnny@user/johnny)
[12:14:14] *** Quits: AmR (~AmREiSa@41.238.31.212) (Quit: Konversation terminated!)
[12:20:33] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:80b8:5f9c:24dd:6945)
[12:22:43] *** Joins: Brewster_ (~Brewster@104.145.226.5)
[12:22:57] *** Quits: Brewster (~Brewster@104.145.226.5) (Ping timeout: 240 seconds)
[12:22:59] *** Brewster_ is now known as Brewster
[12:23:14] *** Joins: frost (~frost@user/frost)
[12:25:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:25:51] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[12:26:13] *** Quits: adeliktas7 (~adeliktas@v15153.1blu.de) (Read error: Connection reset by peer)
[12:26:15] *** Joins: adeliktas78 (~adeliktas@v15153.1blu.de)
[12:28:48] *** Joins: robod34 (~Username@79.113.195.239)
[12:30:38] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[12:36:26] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:30ae:97d7:8d1d:fbf3)
[12:44:23] *** Joins: johnny (~johnny@user/johnny)
[12:52:29] *** Joins: jokoon (~jokoon@136.252.163.126)
[12:55:14] <LordKalma> !rq
[12:55:14] <nolyc> LordKalma: <Raziel> when will they learn that we want both fast AND deep, at the same time
[12:55:33] <LordKalma> welll, C libraries aren't hard to use in the C form, and you just wrap what you need and it's fine
[12:55:46] <TinoDidriksen> geordi --version
[12:55:47] <geordi> GCC 12.0.0 20220101 (experimental)
[13:00:06] <TinoDidriksen> geordi --version
[13:00:07] <geordi> GCC 12.0.0 20220110 (experimental)
[13:01:12] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:14:41] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:15:51] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[13:16:02] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:17:38] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[13:19:06] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[13:21:15] *** Quits: NiD27 (~nid27@49.205.151.136) (Quit: Leaving)
[13:28:14] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:29:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:33:31] *** Joins: seninha (~seninha@user/seninha)
[13:38:22] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[13:40:37] <Haohmaru> !fact
[13:40:39] <nolyc> Haohmaru: A function shall be defined only in namespace or class scope.
[13:40:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:55] *** ChanServ sets mode: +v npaperbot
[13:41:06] <Haohmaru> hm? uh-oh
[13:53:35] *** Joins: Burgundy (~yomon@82.76.72.88)
[14:02:24] *** Joins: walkr (~walkr@bl19-168-53.dsl.telepac.pt)
[14:06:14] <xkoncek> {module xxx;}
[14:06:14] <geordi> error: 'module' was not declared in this scope; did you mean 'modfl'? (fix known)
[14:07:55] *** Joins: paul424 (~tom@ip-37-248-154-252.multi.internet.cyfrowypolsat.pl)
[14:11:44] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:65bb:c31d:f4b5:273e) (Quit: Textual IRC Client: www.textualapp.com)
[14:13:10] *** Quits: walkr (~walkr@bl19-168-53.dsl.telepac.pt) (Read error: Connection reset by peer)
[14:13:17] <jokoon> whats the good news about modules? still not part of c++21?
[14:13:50] <jokoon> I still wonder how much work it will require for library developers
[14:15:24] <leduyquang753> There is no such thing as C++21.
[14:15:58] <leduyquang753> Modules are standardized in C++2020. MSVC has official support while GCC has experimental support.
[14:16:22] <sprout_> you only live once.  I am in the process of converting a smallish interpreter to c++20 modules and I am bewildered
[14:17:29] <sprout_> where does my 'assert' macro go?  how do I import iostream? where are the libicu modules?
[14:18:03] <sprout_> what about my own macros? where do compile time constants go?
[14:18:12] <comrad> heh, i once tried to verge into Java Modules, same thing. Nothing works anymore - sort of.
[14:18:14] <sprout_> no idea
[14:20:25] <sprout_> the problem is that with modules all the trilliions of lines of legacy code would preferably be rewritten.   in a clear consistent manner
[14:21:29] <sprout_> not to mention cmake
[14:22:14] <sprout_> the build process changes too.  then do I give modules .ixx,  .cppm,  or .cpp extensions?
[14:23:04] <sprout_> I want to do it but no clear answers anywhere.
[14:23:29] <johnny> sprout_, the thing coming maybe with c++23 is that basically everything in std is available by import std;
[14:23:41] <johnny> there's a paper for that somewhere
[14:24:04] <johnny> atm, it's pretty much on the programmer side or build system side to decide how to expose modules and by what name
[14:24:07] <sprout_> like,  for Zeus' sake.  I don't care about .ixx,  .cppm,  or .cpp.  can't somebody in industry not just toss a coin and tell everyone what it'll be
[14:24:17] <johnny> c++ committee won't do that
[14:24:37] <sprout_> I don't care who does it,  at long as someone does
[14:24:53] <sprout_> *as
[14:26:08] <sprout_> then make a different committee.  the C++ industrial guideline consortium,  no problem
[14:26:12] <johnny> .cpp isn't even standardized
[14:26:49] <johnny> lots of folks use .cc for example. and then there's header files.. so many folks still use .h or .hpp or something else
[14:27:04] <johnny> so as you can see, the cpp committee does not care about such things
[14:27:31] <sprout_> what I said,  then push a different committee
[14:27:32] <johnny> i think it's silly .. but that's just how they are
[14:27:34] <johnny> who?
[14:27:38] <JohnMS_WORK> We use .cpp for C++ definition files, .h for declarations, and .hpp for mixed declaration & definitions.
[14:27:51] <johnny> the committee is made up of stakeholders who contribute to making c++
[14:27:59] <johnny> so.. a new committee would have no teeth and thus no point
[14:28:18] <sprout_> google,  ibm,  ms,  oracle
[14:28:25] <sprout_> aplle
[14:28:28] <sprout_> *apple
[14:28:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[14:28:38] <johnny> why would they move to a different committee?
[14:28:52] <sprout_> because it hurts their bottom line too?
[14:28:53] <johnny> i mean there's still the eternal abi argument and how they won't break it..
[14:29:16] <johnny> it doesn't really.. because each of them basically have their own styleguide
[14:29:25] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[14:29:42] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2cdf:da3e:72d8:7f8f)
[14:29:50] <jokoon> what about clang++?
[14:30:20] <sprout_> thus.  I want to use libicu.  cross-platform,  multiple compilers.  they want to be told to write .ixx,  .cppm,  or .cpp for modules too
[14:30:33] *** Joins: frost (~frost@user/frost)
[14:30:34] <sprout_> and that's the least of everybody's problem
[14:30:39] <sprout_> *s
[14:32:01] *** Joins: proller (~p@2a02:6b8:0:40c:e4e9:dfa0:20d6:1961)
[14:32:40] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:35:34] <johnny> jokoon, you mean about module support in clang++? seems a bit farther behind than gcc last i checked
[14:35:50] <johnny> maybe things i have improved since then tho. it's been 4 months since i looked into it
[14:36:10] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[14:36:11] <johnny> clang devel in general has seemed to slow down a lot recently, or at least that's the impression folks have.
[14:37:20] <LordKalma> clang a bit, llvm not really
[14:38:39] <LordKalma> https://www.reddit.com/r/programming/comments/rufc63/llvm_enjoyed_record_growth_in_2021_many_exciting/
[14:44:59] *** Joins: cursey (~cursey@user/cursey)
[14:55:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:01:23] *** Quits: paul424 (~tom@ip-37-248-154-252.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:05:59] <johnny> indeed llvm is going quite well
[15:14:05] <LordKalma> but yeah, like, clang slowing at the same time clang tooling is ever more popular
[15:14:34] <LordKalma> clang{d|-format|-tidy}...
[15:15:20] <LordKalma> Intel's SYCL: https://github.com/intel/llvm
[15:15:22] <LordKalma> and etc etc
[15:17:49] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[15:19:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:32:54] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:43:15] <Haohmaru> !rq
[15:43:16] <nolyc> Haohmaru: <barix> i know what it does and that's enough for me to never touch it
[15:48:56] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[15:51:00] <johnny> nice
[15:59:07] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:01:43] *** Joins: Leone (~Leo@157.52.18.77)
[16:03:02] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:23:44] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[16:26:14] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[16:30:29] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[16:39:45] *** Quits: proller (~p@2a02:6b8:0:40c:e4e9:dfa0:20d6:1961) (Ping timeout: 268 seconds)
[16:41:59] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:80b8:5f9c:24dd:6945) (Quit: Konversation terminated!)
[16:43:05] *** Joins: Guest17 (~Guest17@wificampus-097061.grenet.fr)
[16:52:41] *** Joins: proller (~p@2a02:6b8:0:40c:4efa:2971:68f2:8ad5)
[17:02:26] *** Quits: Guest17 (~Guest17@wificampus-097061.grenet.fr) (Quit: Client closed)
[17:14:53] *** Quits: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (Ping timeout: 250 seconds)
[17:24:49] *** Joins: pulse (~pulse@user/pulse)
[17:28:11] *** Joins: ravan (~ravan@user/ravan)
[17:38:57] *** Quits: proller (~p@2a02:6b8:0:40c:4efa:2971:68f2:8ad5) (Ping timeout: 240 seconds)
[17:40:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:55] *** ChanServ sets mode: +v npaperbot
[17:41:37] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[17:45:36] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[17:46:17] *** Joins: ravan (~ravan@user/ravan)
[17:49:44] <xkoncek> {int i = 0, j = 1, k; k = i = j; cout << i << j <<k;}
[17:49:44] <geordi> 111
[17:50:20] <rpav> right
[17:52:10] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[17:52:10] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Remote host closed the connection)
[17:52:24] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[17:52:58] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:53:27] <Haohmaru> slightly naughty
[17:55:57] <rpav> howso? other than not really being very nice code
[17:59:27] <Haohmaru> why would you write such a sketchy thing ;P~
[18:03:27] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:04:17] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:05:03] <yolo> ville: thanks. about 4 months fulltime in c++, need write some c/c++ mix code and realize posix-c++-api can make the code easier. Thanks for your advice. I might work on c++ full time for the next 6 months.
[18:06:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:08:40] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:17:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2cdf:da3e:72d8:7f8f) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[18:19:29] <rpav> Haohmaru: oh well sure, that much ought to be self-evident ;)
[18:19:41] <rpav> but the result shouldn't be surprising
[18:19:48] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:20:15] <rpav> like if you expect `int a, b, c; a = b = c = 1;` to assign them all 1, how why would the other differ
[18:20:23] <Haohmaru> yeah, just don't do it with volatiles
[18:26:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[18:26:50] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[18:30:47] <Haohmaru> !fact
[18:30:48] <nolyc> Haohmaru: Traits::char_type shall be the same as CharT.
[18:34:55] *** Joins: xkuru (~xkuru@user/xkuru)
[18:35:40] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d171:6c14:e395:f91b)
[18:43:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:50:02] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:53:55] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[18:55:22] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:57:40] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:35a5:a9fd:9975:e15)
[18:57:40] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:35a5:a9fd:9975:e15) (Changing host)
[18:57:40] *** Joins: skapata (~Skapata@user/skapata)
[18:58:30] *** Joins: ravan (~ravan@user/ravan)
[19:09:06] <PJBoy> oh wow I've never considered volatility in the expression `a = b = c`
[19:09:49] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 240 seconds)
[19:11:40] <PJBoy> I guess for class types `a = b = c = const_expr` is always worse than `a = const_expr; b = const_expr; c = const_expr;`
[19:11:55] <PJBoy> 'cause you always get move semantics for the former and only one move for the former
[19:12:03] <PJBoy> 'cause you always get move semantics for the latter and only one move for the former
[19:23:22] <rpav> i think `a = b = ..` in general ought to be avoided
[19:23:39] <rpav> which makes it perfect for making it do something weird
[19:23:41] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:24:04] <Haohmaru> it's a nice little spice for code obfuscation
[19:24:12] <rpav> but normally it looks ugly and acts poorly
[19:25:37] <Haohmaru> with volatile iirc it would assign 1 to c, then read c and assign that to b, then read b and assign that to a
[19:25:48] <Haohmaru> (if all of them were volatile, i mean)
[19:25:59] <rpav> yeah surely it must
[19:27:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:28:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[19:36:09] *** Quits: jokoon (~jokoon@136.252.163.126) (Remote host closed the connection)
[19:41:31] <CarloWood> Still on detecting namespace of a type.  Say I have namespaces N and M.  In namespace N we have `class A : public M::B`.  Then is there a way to use ADL on A and detect if you find whatever you found is found in namespace N or M?
[19:44:53] <CarloWood> { A a; f(a); } namespace M { template<typename T> void f(T const&) { BARK; } struct B {}; } namespace N { template<typename T> void f(T const&) { BARK; } struct A : M::B {}; }
[19:44:53] <geordi> error: 'A' was not declared in this scope; did you mean 'N::A'? (fix known)
[19:45:01] <CarloWood> { N::A a; f(a); } namespace M { template<typename T> void f(T const&) { BARK; } struct B {}; } namespace N { template<typename T> void f(T const&) { BARK; } struct A : M::B {}; }
[19:45:01] <geordi> error: call of overloaded 'f(N::A&)' is ambiguous
[19:46:06] <CarloWood> As you see, by ADL both N::f and M::f are found because N::A is derived from M::B.
[19:47:22] <CarloWood> But if the f's are unique (to be used in some SFINAE) then I'd still like to know if whatever we found was found by N::A or by M::B somehow:
[19:47:53] <CarloWood> { N::A a; f_M(a); } namespace M { template<typename T> void f_M(T const&) { BARK; } struct B {}; } namespace N { template<typename T> void f_N(T const&) { BARK; } struct A : M::B {}; }
[19:47:53] <geordi> M::f_M(const T&) [with T = N::A]
[19:48:51] <CarloWood> So that didn't help much: T is N::A, not M::B, even if we found it by M::B :/.
[19:50:19] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[19:55:31] <CarloWood> Can you also lookup / get a struct with ADL?
[19:56:36] <rpav> err
[19:56:57] <rpav> why are you trying to look up what namespace something is and why are you using ADL to do it
[19:58:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:58:26] <CarloWood> { N::A a; auto x = F{a}; } namespace M { template<typename T> struct F { F(T const&) { BARK; } };  struct B {}; } namespace N { template<typename T> struct F { F(T const&) { BARK; } }; struct A : M::B {}; }
[19:58:26] <geordi> error: 'F' was not declared in this scope
[19:59:18] <CarloWood> rpav: I want to write a catch-all operator<< for classes that have a certain member function.
[19:59:32] <CarloWood> See https://wandbox.org/permlink/MmJLyHhaxy1G9ooh
[19:59:43] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[20:00:18] <rpav> that doesn't answer the question because it has nothing to do with your goal
[20:00:26] <CarloWood> lol
[20:00:28] <CarloWood> ok
[20:00:39] <rpav> besides, the way to implement the operator as such is using sfinae and decltype
[20:01:01] <rpav> looking up namespace tells you nothing about what something implements
[20:01:24] <rpav> if you're trying to work around ADL, you should use an "adl laundering" templated struct
[20:01:58] <CarloWood> I am using ADL as a means to find the namespace of a type. If you have a better idea then please tell me.
[20:02:20] <rpav> it still doesn't make any sense why you're looking for the namespace of the type
[20:02:38] <rpav> of what consequence is it
[20:04:10] <CarloWood> It doesn't make sense to you. In other words, you don't understand what I am doing. I don't understand why you bring that as that what I am doing makes no sense. I am more than willing to spend time explaining all this, if you really want to help me (please do).
[20:04:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[20:04:23] <jkaye> CarloWood, This is called the xy problem
[20:04:29] <rpav> ^
[20:04:32] <jkaye> What are you actually trying to accomplish
[20:04:36] <CarloWood> He thinks it is, but is it?
[20:04:37] <jkaye> Not the individual detail that you are working on
[20:04:50] <jkaye> Please state your end goal. "Find the namespace" is not it
[20:04:58] <rpav> like, if you have a simple explanation for why you're doing this, please do tell; if you can't, consider that _you_ may be the one who doesn't understand what you're doing
[20:05:04] <CarloWood> I already explained that in great length yesterday - but I'll explain it again.
[20:05:20] <rpav> it _appears_ you only want to implement operator<< for things with print_on in a specific namespace, but it's still unclear why you'd make this restriction
[20:06:56] <rpav> notably this is one really great example of why keeping most peripheral things separate from class members is good .. e.g., you should not implement C::print_on, but print_on(ostream&, const C&) (or really, print_adl<T>::print_on(ostream&, const T&))
[20:07:41] <CarloWood> What I want is being able to do: std::cout << foo;   or any ostream for that matter, in *any* namespace where foo is a class type defined in *any* (possibly different or the same) namespace for which no operator<< is defined but that has the member function `void print_on(std::ostream&) const`. And then have foo.print_on(std::cout) being called.
[20:07:53] <rpav> but if you must because you're dealing with a bunch of random crap that implements print_on or to_string or somesuch, then the question is more why are you making the arbitrary restriction and do you have a real case for doing so
[20:08:10] <CarloWood> Is that an acceptable starting point? Or do you still see that as a possible xy problem?
[20:08:12] <rpav> CarloWood: ah, yeah, that's where you want the laundering struct
[20:09:09] <rpav> e.g. i have a <T> toStream(ostream&, const T&), but that calls by default a <T> struct stream_adl { static void toStream(...); };
[20:10:23] <rpav> pretty sure you'd want similar with an operator<< just so you can trivially not get screwed over by adl when you call it in random places
[20:11:19] <CarloWood> Now I can't follow you. And you didn't answer my question it seems. You think that my starting point is wrong?
[20:11:22] <rpav> though tbh i'm not sure how ADL impacts a decltype lookup in this case for a global-namespaced operator<<
[20:13:08] <CarloWood> I use << a lot for debug output. So I have everywhere (in every namespaces) code where I << some_type, where some_type is declared in any namespace. I want that to work.
[20:13:22] <rpav> right
[20:13:36] <CarloWood> You have to start with telling me if that is an accepting starting point or not, or the rest would be a waste of time.
[20:13:41] <rpav> i do similar but use a variadic function that calls << by default
[20:13:43] <CarloWood> acceptable*
[20:14:04] *** Joins: Figworm (~inoor@user/figworm)
[20:14:05] <rpav> i implement type printing via toStream / stream_adl<T> but it ougth to be vaguely similar in principle
[20:14:25] *** Joins: Guest8100 (~tinloaf@virt-no01.mrvm.net)
[20:14:58] <CarloWood> So yes or no? You are OK with it that I want to use << to print my debug output?
[20:15:06] <rpav> yes why not?
[20:15:25] <CarloWood> Ok, then you are also OK with it that I want to do that in any namespace?
[20:15:35] <rpav> yes
[20:15:50] <CarloWood> And also that the type that I am writing can be in any namespace?
[20:15:52] <rpav> this however does not require looking up something's namespace
[20:16:06] <Alipha> You can declare a operator<< which would sfinae whether or not the class has a print_on
[20:16:13] <rpav> or really caring about namespace at all, except that ADL is a pain in the ass sometimes
[20:16:16] <CarloWood> I already have that Alipha
[20:16:19] <rpav> Alipha: exactly
[20:16:34] <CarloWood> Didn't get a yes or no on my last question.
[20:16:43] <Alipha> CarloWood: and you're getting ambiguous calls?
[20:17:16] <CarloWood> Alipha: yup, that is the problem. But rpav refuses to address the real issue because he thinks I have an xy problem.
[20:17:27] <CarloWood> See https://wandbox.org/permlink/MmJLyHhaxy1G9ooh
[20:17:29] <rpav> and you're being an ass and i don't really have time to deal with it
[20:17:36] <CarloWood> That exactly shows the problem that I have now.
[20:17:55] <rpav> ambiguous call resolution does not require looking up namespaces
[20:19:05] <CarloWood> rpav: this is why I didn't like to even begin this time wasting discussion. We spent some time talking about it and then you'd bail. You didn't even WANT to say 'yes' to trivial questions to get a common ground; which clearly shows you are in a defensive position and not really interested in tackling the PROBLEM, rather to just prove I am wrong and you are right.
[20:19:30] <rpav> i've already pointed out how solving this is accomplished, actually
[20:19:32] <rpav> multiple times
[20:20:03] <CarloWood> I didn't see a single line of code from you just a few meaningless keyword that you probably defined in your own code.
[20:20:50] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:21:06] <rpav> the ADL struct thing ought to have a commonly-known name in C++ by now tbh; i've seen it used in a lot of places, i've used it in a number of places, and it seems like a thing that ought to be a well-known C++ pattern
[20:21:07] <Alipha> CarloWood: why do you have two different operator<< and not just one?
[20:21:14] *** Joins: magla (~gelignite@55d483f5.access.ecotel.net)
[20:21:20] <CarloWood> If you get yourself to say that you are OK with using   << foo  in any namespace, where foo is a type from any namespace, and where foo only has a print_on method. Then I can finally start to explain why that requires the problem that I asked about half an hour ago. Because it does.
[20:21:32] <rpav> but i'm actually not even sure why it'd be necessary here so i'm trying to reproduce your goal and find an actual problem
[20:21:32] <CarloWood> Alipha: while lines?
[20:23:27] <CarloWood> Alipha: ok line 20 and 54.  Because one is in namespace N and the other in namespace M.
[20:24:30] <CarloWood> That is required... if I only have one in namespace N, then I can't print types M::Foo from global namespace or from M.
[20:25:47] <CarloWood> And if I'd have only one in global namespace then I can't find that when there is even a single other operator<< defined in (say) namespace N when printing from namespace N, because it will find the one in N before it finds the one in global namespace (ie, never find that one)
[20:26:22] <CarloWood> You need to define the operator<<'s in the namespace of the types that you want to print them with, or it can never work.
[20:26:30] <CarloWood> So, I need one in every namespace.
[20:26:40] <CarloWood> And THAT leads to ambiguity.
[20:27:05] <CarloWood> If you try to print M::Foo from namespace N, it find the operator<<'s in N and in M.
[20:27:15] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:27:56] <CarloWood> So - I tried to solve that by detecting if the type that you try to print (M::Foo) is actually from the namespace that the operator<<'s that you try to find is defined in (using SFINAE).
[20:28:21] <CarloWood> And that works well, unless you try to print a type that is defined in namespace N, but derived from a type in namespace M.
[20:29:02] <Haohmaru> wouldn't the "::blah" syntax help?
[20:29:15] <CarloWood> rpav: see all of the above; that is the full explanation.
[20:30:57] <Haohmaru> { cout << ::vector; } using namespace std; string vector = "asdf";
[20:30:58] <geordi> asdf
[20:33:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:33:40] <CarloWood> So, if I put this in EVERY namespace (that has such print_on types):
[20:34:02] <CarloWood> template<typename T>
[20:34:02] <CarloWood> std::enable_if_t<utils::has_print_on<T const> && in_namespace_M<T>, std::ostream&>
[20:34:02] <CarloWood> operator<<(std::ostream& os, T const& obj) { obj.print_on(os); return os; }
[20:34:35] <CarloWood> Then that will work perfectly - *iff* in_namespace_M<T> would work :/  (this one being defined in namespace M).
[20:35:53] <CarloWood> So, back to my original question :/ ...
[20:36:44] <CarloWood> How can I get that in_namespace_M<T> work when T is a type defined in namespace N, but derived from a class defined in namespace M?
[20:37:27] <Haohmaru> x_x
[20:37:32] <PJBoy> you can't detect if something's in a namespace AFAIK
[20:38:17] <CarloWood> PJBoy: boy it seems so. Although I saw a non-portable version once that used std::type_info::name.
[20:38:21] <CarloWood> s/boy//
[20:38:40] <CarloWood> (I typed a space there:  PJ boy: ... )
[20:38:53] <Haohmaru> in mIRC script you can probe whether some "function" is or isn't defined, and if it is - in which script file it is and on which line it begins ;P~
[20:40:05] *** Joins: AmR (~AmREiSa@41.238.31.212)
[20:41:10] <CarloWood> I have hunderds of classes and I just hate to have to define a std::ostream& operator<<(std::ostream&, Foo const&) for all of them. The only reasonable way to go would be to use a macro that declares the print_on AND the friend operator<< in one go... And that seems silly/annoying, to have to resort to macros :/
[20:41:21] <CarloWood> hundreds*
[20:41:39] <Alipha> CarloWood: https://wandbox.org/permlink/qKZt5cJc3wTGfmKh
[20:43:30] <PJBoy> you could probably just write an operator<<(ostream&, auto) in your namespace
[20:43:35] <CarloWood>  Alipha: wow
[20:43:43] <PJBoy> that should get ADL'd I think
[20:43:53] <CarloWood> You are often so brilliant. I feel humbled.
[20:44:45] <CarloWood> Absolutely brilliant - this way it doesn't complain about the ambiguity because they are really the same operator<< !
[20:47:34] <Alipha> PJBoy: the problem is there's two namespaces, M and N, so he wants his operator<< available to both (so his solution was to write separate M::operator<< and N::operator<< functions). But M::C inherits from N::B, so both namespaces get included in ADL
[20:49:15] <PJBoy> doesn't ADL end up preferring M::operator<< in that case?
[20:49:43] <CarloWood> The next hour I am going to sort out the mess in 'git diff' that I made, to end up with this solution :) :)
[20:50:56] <PJBoy> guess not :/
[20:51:17] <CarloWood> PJBoy: no, it looks in the current namespace (and parents if it finds nothing) and in the namespace of each argument (and parents of those if it finds nothing) and the namespace of base classes thereof (etc), all with the same priority.
[20:51:18] <Alipha> PJBoy: you would think so :-/
[20:55:42] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:02:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Quit: varioust)
[21:04:11] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:04:35] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:06:07] <Alipha> CarloWood: though note that i couldn't come up with that solution until i understood your real problem, not "how do i detect what namespace a class is in" :-P
[21:06:26] <Alipha> maybe you explained it yesterday and i just missed it
[21:06:28] <CarloWood> Absolutely.
[21:06:43] <CarloWood> So it was an xy problem after all ;)
[21:07:23] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 268 seconds)
[21:07:34] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:09:13] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[21:10:08] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:10:17] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[21:17:15] *** Joins: Tokamak_ (~Tokamak@172.58.188.35)
[21:18:34] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[21:19:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:22:45] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[21:23:42] *** Joins: xcm_ (~xcm@user/xcm)
[21:26:29] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[21:35:56] *** Quits: Tokamak_ (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[21:37:07] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[21:40:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:56] *** ChanServ sets mode: +v npaperbot
[21:44:14] *** Joins: seninha (~seninha@user/seninha)
[21:49:08] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:49:40] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[21:52:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:54:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:00:25] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 268 seconds)
[22:03:58] *** Joins: math9292 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[22:05:09] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:08:14] *** Joins: mathe9292 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[22:08:31] *** Quits: math9292 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Client Quit)
[22:12:08] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 268 seconds)
[22:20:03] *** Joins: math7878 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[22:21:01] *** Joins: jackblasted (~quassel@193.19.109.30)
[22:21:58] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 256 seconds)
[22:23:42] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:24:00] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[22:24:06] *** Quits: mathe9292 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Quit: Leaving)
[22:24:11] *** Quits: math7878 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Client Quit)
[22:25:25] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[22:26:21] <rpav> Alipha, CarloWood: still not sure why you need any of that, e.g. https://godbolt.org/z/rd66EeGq7
[22:26:53] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:27:31] <rpav> especially if this is primarily debugging code for an app, why bother namespacing everything explicitly
[22:28:47] <rpav> though personally i have as i was saying like, rpav::say("stuff: ", val, ...); .. which calls its own toStream() and lets you implement your own printers, but that's .. far above and beyond solving this simple problem
[22:28:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Ping timeout: 240 seconds)
[22:30:04] <Alipha> rpav: lines 40-47: adding any operator<< (even for an unrelated class) inside the namespace breaks ADL for all other classes in the namespace: https://godbolt.org/z/G5q8986jG
[22:30:53] <Alipha> because an operator<< was found in namespace M, even though it doesn't match, the compiler won't look for operator<< in outer scopes
[22:31:32] <rpav> i thought you weren't supposed to overload operator<< in a local namespace for that anyway actually
[22:32:09] <rpav> but `using ::operator<<;` is also sufficient
[22:32:29] <rpav> before the local definition of course :p
[22:32:59] <Alipha> indeed, `using ::operator<<:` works in your case. though if you're going to go ahead and have that using, i'd just throw operator<< into a different namespace and do `using PrintOn::operator<<;` imo
[22:34:16] <rpav> i could have sworn there was some guidance about "don't define operator<< in a namespace"
[22:34:34] <rpav> but really if i was going to go to _that_ trouble... well i'd do what i said i did ;)
[22:34:48] <rpav> since you can't like overload operator<< for things in std anyway afaik
[22:39:19] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[22:41:14] <Alipha> I'd be tempted to throw operator<< in std anyway ;-)
[22:42:04] <rpav> probably the only reason it's not is legacy pre-namespace stuff and i'm not even sure there
[22:42:14] <rpav> _probably_ it's not because of ADL shit
[22:51:17] *** Quits: supernova (~quassel@2405:9800:ba11:6207:d922:7fa5:432:de05) (Ping timeout: 240 seconds)
[22:53:33] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:59:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[23:02:20] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[23:02:31] *** Joins: AmR| (~AmREiSa@156.207.253.69)
[23:02:37] *** Quits: AmR (~AmREiSa@41.238.31.212) (Ping timeout: 256 seconds)
[23:10:45] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:15:48] *** Joins: gehn (~gehn@user/gehn)
[23:16:00] <PJBoy> there's guidance that operator<< should be a hidden friend
[23:16:32] <PJBoy> but I haven't seen anything that says it shouldn't be a non-namespaced function otherwise
[23:17:02] <PJBoy> and the hidden friend thing is good because it doesn't add bogus operator<< to your list of operator<< candidates in error messages
[23:17:44] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[23:20:31] <rpav> dunno it was like 98-era if so
[23:21:03] <rpav> actually can't you just specify ::operator<< explicitly in a definition, friend or otherwise?
[23:21:35] <PJBoy> if operator<< were a global function, yeah
[23:21:37] *** Joins: proller (~p@2a02:6b8:b081:12::1:8)
[23:21:51] <rpav> operator<< was a mistake
[23:22:09] <Alipha> indeed. we should just multiply instead
[23:22:24] <PJBoy> now that we have fmtlib, I'd be inclined to agree
[23:22:24] <rpav> there ya go
[23:23:11] <rpav> i don't like fmtlib but i'd rather use it over direct iostreams (or at all .. i still need to work on the composable fast stream template stuff)
[23:23:28] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:23:30] <LordKalma> everything sucks
[23:23:40] <PJBoy> fmtlib is good
[23:23:47] <rpav> yeah it's all a matter of what you have time to make slightly better before you kick the bucket
[23:24:01] <PJBoy> and that bytesio proposal looked good :<
[23:24:07] <PJBoy> for the unformatted side
[23:24:15] <LordKalma> also qt sucks
[23:25:29] <PJBoy> confirmed
[23:25:53] <LordKalma> is skia hardware accelerated?
[23:26:58] <rpav> i thought its rendering was up to you but i never really got that far
[23:27:29] <LordKalma> I wonder how viable would it be to have a skia canvas in a qt application if you wanted performant 2d graphics
[23:28:28] <rpav> qt's going to kill you every time
[23:28:42] <LordKalma> everything sucks
[23:28:52] <PJBoy> direct2d's alright
[23:28:57] <PJBoy> it's just windows only
[23:28:59] <rpav> but i mean it's fairly fast for some stuff as it is, if you're stuck using qt it's maybe good enough without the additional 500MB dependency
[23:29:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[23:29:27] <LordKalma> haha yes I wasn't considering doing it
[23:29:30] <LordKalma> just wondering stuff
[23:29:49] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[23:30:12] *** Joins: ville (~ville@user/ville)
[23:30:30] <rpav> unfortunately it's just a case of "everything sucks" ;/
[23:33:03] <yolo> "nobody uses" vs "this one is used by many but sucks" typical situation
[23:33:15] <rpav> yea
[23:33:26] <rpav> i use nanovg and it kinda sucks but it's a happy medium
[23:33:42] <rpav> between "dependency size and complexity" and "actually does things"
[23:34:03] <rpav> like, i was baffled to realize that aesprite uses skia
[23:37:42] <cbreak> qt isn't that bad
[23:37:55] <cbreak> you can get away with only a few dozen MB of libraries
[23:38:15] <rpav> qt is a useful tool
[23:38:19] <cbreak> compare that to a 100+ mb of libraries you get with a typical text editor based on web browser tech :D
[23:38:34] <rpav> it's shit in so many ways, but there aren't alternatives and it gets the job done
[23:39:04] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[23:39:15] <cbreak> qt seems to be pushing their qt quick stuff
[23:39:22] <LordKalma> yes, they clearly are
[23:39:23] <cbreak> but if you go the JS route, why not go full electron?
[23:39:28] <yolo> qt is bad for me as it's another ecosystem to master, i already had too many
[23:39:38] * cbreak hasn't looked at Qt quick more than a few glances so far
[23:40:18] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:40:28] <cbreak> yolo: normal Qt is quite reasonable, at least a lot of thethe core / widget areas, if you can overlook the weirdo idiosyncracies that come from its legacy
[23:40:47] <fiesh> the great thing is you don't have to recompile for gui changes.  the bad thing is you don't compile ;)
[23:40:53] <LordKalma> cbreak, qml is more performant than electron if you need a decent backend, and you're not sandboxed by the browser
[23:40:54] <fiesh> plus how heavily device dependent it is sometimes
[23:41:04] <yolo> all my UI these days are a small (embedded) http that uses browser to render
[23:41:24] <LordKalma> but yeah, quick is still unfortunately mediocre on the desktop
[23:41:25] <yolo> everyone uses a browser anyways, and it's cross-platform for free
[23:42:01] <yolo> obviously i don't do game/2D stuff, just some normal UI
[23:42:11] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:42:26] <yolo> drag-drop, unload files, download files, check status, those sorts
[23:42:40] <cbreak> yolo: remember that anti-virus software that had the same idea?
[23:42:49] <LordKalma> https://www.mapeditor.org/ apparently this is qt quick
[23:42:54] <sprout_> https://egel-language.blogspot.com/2022/01/c20-migration-woes.html <- start of migration process to C++20 modules.  decided to document it
[23:43:06] <cbreak> opened a port for http, as user interface, but they had the stupid idea to also give it an "api"
[23:43:09] <yolo> what anti-virus? have not uses anti-virus for like 2 decades as i don't do windows
[23:43:13] <cbreak> which then promptly had an RCE
[23:43:16] <yolo> s/uses/used/
[23:43:43] <yolo> linux + vim + browser is all I need these days
[23:43:53] <cbreak> I think they failed to harden their web interface against cross site scripting
[23:44:00] <LordKalma> hahah AMD had the UI for some storage controller thing via a webserver that occupied your port 80, no configuration
[23:44:24] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:44:31] <cbreak> :/
[23:45:49] <rpav> to be fair, something that can serve ui with minimal resources is a good idea .. the web is just sortof a shitty implementation
[23:45:58] <yolo> as a matter of fact to make browser-UI more robust I did some typescript, and it actually looks nice
[23:46:07] <LordKalma> speaking of the web: https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html
[23:46:26] <yolo> dynamic language with static typing are good, these days all langs are becoming the same, copying each other
[23:47:45] <rpav> LordKalma: to be fair you could probably replace "browser" with "OS" in that and make the same argument
[23:47:47] <CarloWood> rpav: because: <CarloWood> And if I'd have only one in global namespace then I can't find that when there is even a single other operator<< defined in (say) namespace N when printing from namespace N, because it will find the one in N before it finds the one in global namespace (ie, never find that one)
[23:48:16] <CarloWood> for example... https://godbolt.org/z/366Kd3Phe
[23:48:17] <rpav> CarloWood: again, don't define operator<< in a namespace :p
[23:48:38] <rpav> though also, probably just avoid the whole mess
[23:48:59] <rpav> and/or `using ::operator<<;`
[23:49:23] <cbreak> LordKalma: yes... I guess that's why there's only one web browser left nowadays. And chrome. :(
[23:49:37] <CarloWood> I am pretty sure operator<<'s should be found by ADL, and not put them ALL in global namespace, hoping that really nobody ever will declare a single one in a namespace.
[23:49:39] <LordKalma> ahaha chrome and a half-dying one
[23:49:47] <rpav> what, people use firefox?
[23:49:53] <LordKalma> I do
[23:49:56] <LordKalma> dunno why still
[23:49:59] <cbreak> Yes. You can chose: web browser, or spyware? :)
[23:50:10] <rpav> you think firefox isn't
[23:50:13] <cbreak> well, I guess you can get both at once with chrome
[23:50:33] <rpav> most of the important "spy" stuff is browser-independent in any case
[23:50:55] <cbreak> depends on who's spying
[23:51:01] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[23:51:21] <rpav> not really; google knows all whether you use their browser or not
[23:51:30] <cbreak> depends.
[23:51:39] <cbreak> firefox containers make this a bit harder with newer versions
[23:52:15] <rpav> ð¤· google is sortof the least of my concerns
[23:53:22] *** Quits: Figworm (~inoor@user/figworm) (Quit: Figworm)
[23:57:33] *** Quits: andreasbuhr (~quassel@p549db698.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:59:21] <LordKalma> qt 6.3 will likely ship the general preview of the qml->c++ compiler
