[00:00:01] <RandomReader> I can appear to cross the street without looking all the time, until that fails spectacularly :)
[00:06:23] *** Quits: jkaye (~jkaye@2601:281:8300:7530:5bae:6a75:284d:ff5) (Ping timeout: 264 seconds)
[00:13:20] *** Joins: markong (~kvirc@213.146.188.203)
[00:31:47] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:45:21] <computerquip> Surprised godbolt doesn't have libcurl
[00:50:49] *** Quits: great_taste (~great_tas@190.32.235.20) (Ping timeout: 256 seconds)
[00:51:44] *** Joins: great_taste (~great_tas@190.32.235.20)
[00:52:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:55:24] <anyone> I don't recall wandbox having curl, what's your point?
[00:56:13] <computerquip> Testy today eh?
[01:02:34] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:09:37] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:10:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[01:11:35] <LiaoTao> That's strange. GCC 11.2 has suddenly started rejecting my lambdas that use constexpr enum values without explicitly capturing them. Clang is still happy.
[01:11:36] <johnny> i parsed what computerquip was saying as: "curl is pretty popular, so i'm surprised these online compilers don't have it"
[01:11:50] <johnny> libcurl*
[01:13:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:15:39] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[01:27:47] *** Quits: markong (~kvirc@213.146.188.203) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[01:31:17] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:32:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[01:33:16] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[01:33:21] <RandomReader> wandbox wouldn't be able to do anything with it (networking) .. godbolt would have the same restrictions on execution, so that leaves compile checks, but since it's not particularly typed (in C++ terms) I'm not sure that'd be much help
[01:33:34] *** Joins: a_ (~a@69.165.165.206)
[01:33:37] <RandomReader> (or maybe they just haven't gotten around to it, I don't really know what their rationale for libraries are)
[01:34:06] <computerquip> Oh that's true. I wonder what it does for crosscables and libuv.
[01:34:07] *** Gustavo6046_ is now known as Gustavo6046
[01:34:15] <a_> Hi there. Does anyone know of a C++ library that implements the majority (or more) than Ruby's String class? In essence, does anyone know of a really, really powerful String library for C++?
[01:35:20] <RandomReader> what particular functionality are you looking for? (e.g. only Ruby is going to be like Ruby since a large part of is about what's natural for expressions in the language...)
[01:35:52] <a_> Like, I like how QString has split()
[01:35:59] <a_> But, QString is not that good
[01:36:14] <RandomReader> yes, I'm asking for more details on "good" or "really powerful"
[01:36:17] <a_> Nothing in particular, just a really, really versatile library
[01:36:25] <RandomReader> otherwise you're just asking us to figure out what your opinion is, which is silly
[01:36:25] <a_> Something like D's string?
[01:36:36] <RandomReader> specifics, not vague "like X"
[01:36:45] <RandomReader> split is one specific thing, what else?
[01:36:47] <a_> Alright, I'll list some methods I "like"
[01:36:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:07] *** ChanServ sets mode: +v npaperbot
[01:37:36] <a_> split, dump (add quotes), replace (regex and string), conversion to other types, iteration, etc.
[01:38:04] <cbreak> c++ has regex
[01:38:10] <artok> regex is ther...
[01:38:11] <lumberluch0> > regex in C++
[01:38:12] <cbreak> but obviously not as part of string, but as part of regex
[01:38:15] <RandomReader> those things probably all exist in some form in C++, what is missing for you?
[01:38:17] <a_> But awkwardly so, not like Ruby
[01:38:20] <cbreak> c++ has adding quotes
[01:38:30] <RandomReader> e.g. you seem focused on this as methods of a class, why?
[01:38:36] <a_> Maybe elegance, or many methods
[01:38:42] <cbreak> c++ has conversion and parsing
[01:38:49] <RandomReader> "elegance" is again asking people to guess your opinion, stop that
[01:38:54] <lumberluch0> C++ has .c_str()
[01:39:01] <RandomReader> or is this just a case of you being new to C++ and wishing it was like other languages you're already familiar with?
[01:39:17] <a_> I'm not new at all. I first learned C++ 13 years ago
[01:39:30] <computerquip> Obligatory mention fo boost string alo library
[01:39:38] <computerquip> https://www.boost.org/doc/libs/1_77_0/doc/html/string_algo.html
[01:39:49] <a_> But Ruby is much nicer, because there are methods, and it's OOP. If someone subclassed std::string without dealing with constructors or destructors, that would be very nice
[01:39:59] <cbreak> << ('"' + std::string("pizza") + '"')
[01:39:59] <geordi> "pizza"
[01:40:06] <cbreak> easy adding quotes
[01:40:21] <a_> No, ruby's dump makes a representation of something
[01:40:24] <cbreak> a_: why would that be good?
[01:40:27] <a_> You can do that in C++ too, yes
[01:40:27] <RandomReader> I don't know how to parse that, but it's sounding like you don't know C++ at all
[01:40:31] <lumberluch0> << quoted("pizza")
[01:40:31] <geordi> "pizza"
[01:40:36] <cbreak> string doesn't need more members
[01:40:57] <cbreak> if you want something, just write a function for it. or use a function that does it
[01:40:59] <a_> RandomReader Utterly baseless assumption. Inappropriate.
[01:41:00] <cbreak> string is a data container
[01:41:09] <RandomReader> at least not well enough to be able to understand the model or idioms, so you can describe what's missing in more concrete terms
[01:41:18] <RandomReader> "subclassed std::string without dealing with constructors or destructors"
[01:41:19] <cbreak> it is NOT an unholy fusion of data and everything everyone would ever want to do with it
[01:41:21] <lumberluch0> when I made my own string class (everyone makes their own, it's like the initiation rite) it had only 12~15 methods; standard C++ somehow has 113 I think?
[01:41:23] <RandomReader> what am I supposed to get out of that comment?
[01:41:59] <a_> A subclass could have members that deal with a plain std::string, but add nice members
[01:41:59] <cbreak> a_: a representation of something? C++ can make representations of some things too.
[01:42:04] <a_> People REALLY do care about syntax.
[01:42:08] <cbreak> but you don't need string for that
[01:42:17] <a_> I already said that, cbreak
[01:42:35] <cbreak> c++ can elegantly represent some things as unsigned integers for example.
[01:42:35] <RandomReader> well yes, I agree that people do care about syntax, and code that flows well according to the basic models of the language, common idioms, etc
[01:42:44] <lumberluch0> so IIUC it's "a wrapper around std::string that adds niceties"?
[01:42:48] <RandomReader> and you seem to like Ruby's OOP model, which is fine and all
[01:42:59] <a_> Like
[01:43:00] <a_> listen
[01:43:29] <a_> If there were a library that could make C++ code as efficient at text processing (in programming time) as Ruby or Perl, that would be wonderful
[01:43:37] <a_> you could have chains of methods
[01:43:49] <cbreak> c++ supports chains of methods...
[01:43:52] <a_> And modern compilers would do things really well with copy elision and whatnot
[01:43:54] <cbreak> but it's ugly
[01:44:02] <a_> Not necessarily
[01:44:03] <cbreak> so it's hardly ever used
[01:44:09] <a_> It's not ugly
[01:44:12] <cbreak> and it's not modular
[01:44:19] <cbreak> since classes are closed to extension
[01:44:25] <a_> .............
[01:44:28] <lumberluch0> what does "in programming time" even mean? Mythical Man-Hours?
[01:44:36] <RandomReader> this is still sounding like "make C++ be like Ruby", which is never going to have a solution since the languages express things very differently, regardless of libraries
[01:44:45] <RandomReader> I'm not sure what to suggest without something more concrete to go on
[01:44:46] <a_> Not really
[01:44:52] <a_> There wouldn't be eval and such, sure
[01:45:08] <a_> Ruby can be compiled as Crystal, which is roughly as fast as C++
[01:45:11] <a_> (or faster sometimes)
[01:45:21] <RandomReader> I wasn't even thinking of eval, I was thinking of the basic expression and object models
[01:45:27] <cbreak> c++ can be compiled to javascript, which is probably almost as slow as ruby.
[01:45:31] <a_> Crystal deals with that fine
[01:45:34] <RandomReader> which feeds directly into syntax and seems to be something you value here
[01:45:54] *** Joins: X-Scale (~ARM@31.22.163.11)
[01:45:58] <a_> You are trying to miss the point
[01:46:21] <cbreak> a string is simply a container for text data. Nothing more.
[01:46:24] <lumberluch0> from what little I understand about string representation, C++ is already quite performant at processing text, I mean you just directly access the chars and operate on them.
[01:46:38] <computerquip> If you're wanting a string class that does everything, the answer is no because that doesn't fit well into C++. QString is about as close as you're going to get and people tend to hate it.
[01:46:41] <a_> Performance is valuable. Conciseness is valuable too
[01:46:41] <a_> String manipulation is also valuable
[01:46:41] <a_> If all 3 could be the case in one program, that would be really good
[01:46:45] <lumberluch0> More complex abstractions (eg.: not "tetx processing" but "word processing") require something like ICU?
[01:46:54] <cbreak> its purpose is to access the data, and manipulate it in generic ways
[01:47:29] <cbreak> std::string does not have to do anything exotic, because it's reusable.
[01:47:32] <a_> I like QString somewhat, I do use it, but QString is not that good of a library
[01:47:40] <RandomReader> but this still seems to be "entire language + library ecosystem" level, not "I want a library" level
[01:47:50] <cbreak> std::string itself does not have to be extensible, because functions allow that already
[01:48:09] <cbreak> QString is a bit of a design failure
[01:48:14] <a_> What is the best function library?
[01:48:19] <computerquip> I mean, QString is notorious for being slow and messy. We don't have libraries like that because it's miserable.
[01:48:39] <cbreak> it has hard-coded encoding, it also contains unrelated functionality such as parsing and formating strings
[01:48:47] <a_> If I would have to use functions, not methods, what should I use? Boost?
[01:48:47] <a_> I could create a Ruby to C++ string transpiler
[01:49:02] <cbreak> it is inefficient due to its internal storage
[01:49:11] <computerquip> Boost String Algo is a good route, but just note that unicode support is still fairly miserly.
[01:49:25] *** Quits: a_ (~a@69.165.165.206) (Remote host closed the connection)
[01:49:37] <computerquip> Boost Locale can wrap or replace some of the shortcomings. Just have to be careful.
[01:49:39] <cbreak> a_: as I said, regexes work fine from std::regex, but there's also boost's.
[01:49:52] <cbreak> there's boost::format for formating, but also plenty of alternatives for that
[01:50:09] *** Joins: a_ (~a@69.165.165.206)
[01:50:15] <cbreak> for parsing, there are also plenty of options, both in boost (lexical_cast) or std (istream...)
[01:50:28] <a_> I got disconnected, I'm back
[01:50:48] <computerquip> I would recommend against boost format. Boost Format is old and decrepit, even by my standards.
[01:50:52] <a_> But they would take longer to write and thing of
[01:50:58] <a_> *think
[01:51:02] <cbreak> who would?
[01:51:19] *** Quits: DrMax_ (~DrMax@132.215.96.39) (Remote host closed the connection)
[01:51:34] <computerquip> std::regex is... well, use re2 or boost::regex if you can in my experience.
[01:51:49] <computerquip> std::regex has gotten better in recent days but I think VC++ still has issues with it.
[01:52:05] <cbreak> sounds more like a VC++ issue :)
[01:52:20] <computerquip> And because that's a major compiler, it's a practical issue.
[01:52:21] <cbreak> it's not like that library isn't already 10 years old...
[01:52:45] <a_> Basically, if I could write something with the brevity of Ruby and compile it without garbage collection (ruling out D strings and Crystal) in the C/C++/Rust world, that would be nice
[01:52:46] <computerquip> The problem isn't the age, it has something to do with ABI concerns.
[01:52:51] <computerquip> It's not entirely their fault iirc.
[01:53:30] *** Joins: DrMax_ (~DrMax@132.215.96.34)
[01:54:15] <a_> So no one is aware of anything like this? Maybe this is why Facebook uses D, lol
[01:54:23] <a_> But then there is the garbage collector...
[01:54:53] <computerquip> I hear Rust is picking up speed.
[01:54:56] * computerquip runs away.
[01:55:09] <a_> Does Rust have something like that?
[01:55:19] <a_> I've never really used it
[01:55:43] <a_> The problem is, is that everyone uses C++
[01:55:54] <a_> So, compilation with libraries could be hard
[01:55:58] <a_> Qt, GTK, etc.
[01:56:03] <a_> Though there might be bindings
[01:56:22] <computerquip> GTK can be used practically anywhere because it has a stable C interface.
[01:56:30] <cbreak> a_: facebook uses php...
[01:56:41] <computerquip> Qt not so much but there are bindings for it.
[01:56:49] <cbreak> which they compile to c++?!? because it apparently runs faster that way...
[01:57:03] <a_> Lol
[01:57:15] <a_> Facebook uses PHP, C++ and D, and hires Walter Bright
[01:57:27] <cbreak> the drug dealer?
[01:57:32] <a_> D evidently influenced modern C++
[01:57:38] <a_> auto keyword, etc.
[01:58:30] <computerquip> From a quick google, Walter Bright was hired to write Warp 7 years ago
[01:58:41] <computerquip> That's the only thing I can find that used D
[01:59:19] <a_> To my understanding, he works for Facebook
[01:59:30] <a_> Not to mention the significant influence D has had on modern C++
[02:00:17] <anyone> I'm fine with C++ taking all the influences in if it means the other programming languages don't succeed :D
[02:00:17] <RandomReader> I don't think D itself has had much influence
[02:00:21] <computerquip> I mean... I don't know how much of modern D can be contributed to modern C++. If anything influenced C++, it was D1.
[02:00:31] <RandomReader> Walter has, but that's due to his participation, not necessarily D itself
[02:00:54] <computerquip> Walter Bright himself wrote C++ compilers, mans a brilliant dude.
[02:01:12] *** Quits: AmR (~AmREiSa@156.199.106.121) (Quit: Konversation terminated!)
[02:01:12] <a_> D String, though, are very, very good
[02:01:14] <cbreak> the only thing I remember about D appart from the fact that it did exist at some time, is that it had garbage collection.
[02:01:16] <a_> *D strings
[02:01:20] <RandomReader> anyway, the interoperatibility with other libraries was sort of what I was getting at with asking for concrete functionality originally
[02:01:24] <computerquip> D Strings cheat because it's garbage collected.
[02:01:36] <a_> Right :/
[02:01:38] <cbreak> computerquip: how's that useful for a string?
[02:01:43] <a_> Crystal and D are very good, but then there's GC
[02:01:48] <RandomReader> a large part of it is how C++ expresses things naturally, because that's how existing code works, so obviously strings need to meet those same needs
[02:01:57] <computerquip> It has to do with how splitting, merging, etc. work.
[02:02:06] <RandomReader> and it really does seem like what you want is the kind of expression that exists in other languages, not just library components
[02:02:09] <cbreak> merging with a + b ?
[02:02:14] <RandomReader> to which I'd just say: use the other languages
[02:02:29] <a_> I do
[02:02:30] <RandomReader> the choices are certainly practical
[02:02:45] <a_> But if I can make current code faster and more portable using C++, then that would sound nice, no?
[02:03:05] <RandomReader> by wanting something that isn't portable?
[02:03:17] <a_> By wanting something more portable
[02:03:20] <a_> C++ is very, very portable
[02:03:23] <computerquip> cbreak, I actually don't remember. There's a wiki page somewhere on it concerning garbage collection and how you have to *really* careful with it when you turn GC off.
[02:03:41] <RandomReader> how is a custom library going to be more portable?
[02:04:00] <a_> I wasn't necessarily talking about a custom library
[02:04:13] <a_> But C++ can have static libraries
[02:04:21] <a_> *programs
[02:04:29] <a_> Nice, self-contained programs with no dependencies
[02:04:47] <a_> A simple string library should be cross-platform inherently
[02:05:28] <computerquip> I mean... std::string is cross-platform.
[02:05:41] <computerquip> It's already considered too complex by some.
[02:05:49] <a_> ..............
[02:06:33] <RandomReader> but you were specifically asking for a *not* simple string library :P
[02:06:41] <a_> I can just split by "." in Ruby/Crystal and wrap function calls
[02:06:46] <a_> Not oop, but oh well
[02:07:08] <computerquip> You can do that in C++, you just have to use a library for it like boost string algo.
[02:07:18] <a_> No, I mean to make a transpiler
[02:07:49] <a_> Also, there's no way GC is a good idea
[02:07:56] <a_> Lol
[02:08:06] <cbreak> it's a good idea in a language with lots of garbage, like JS.
[02:08:32] <cbreak> sometimes I'm not sure there's anything in that JS that's not worthy to be collected
[02:09:37] *** Joins: a__ (~a@69.165.165.206)
[02:09:56] <a__> Got disconnected again. Flaky internet.
[02:10:08] *** Quits: a_ (~a@69.165.165.206) (Remote host closed the connection)
[02:10:25] <a__> Is the boost string library good?
[02:10:31] <a__> I should probably use that
[02:10:51] <computerquip> I can say that it does what it says it does and is probably fairly well designed since it goes through peer review.
[02:11:43] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 265 seconds)
[02:12:08] <a__> Like
[02:12:12] <a__> Here's a line of Ruby code
[02:12:13] <cbreak> it's boost. It might be good :)
[02:12:18] <a__>     lines.scan(/(.+?)::\1/).uniq.sort.flatten.map(&:dump).map(&:downcase).add_nl.prepend_each('require_relative ').join("\n") + lines.split("\n").reject do |i|
[02:12:18] <a__>                                                                                                                                   i.strip.start_with? 'require'
[02:12:18] <a__>                                                                                                                                 end.join("\n")
[02:12:23] <cbreak> what the hell is that :O
[02:12:33] <cbreak> besides being completely unreadable
[02:12:52] <a__> it should have been add_nl
[02:12:52] <computerquip> Yeah, I look down on that code pretty hard. I hope I'm not working in a code base with that.
[02:13:05] <a__> It's very concise
[02:13:12] <a__> It does something that 200 lines maybe would
[02:13:21] <cbreak> if anyone gave me a PR with that junk I'd reject it.
[02:13:24] <a__> If something like that could be done in C++, that would be nice
[02:13:29] <computerquip> Doing a 1000 things in a single line doesn't make it concise.
[02:13:39] <a__> It does, it's not wordy, not verbose
[02:14:04] <a__> Perl can do that too, so can LISP
[02:14:14] <cbreak> perl is not meant to be readable though.
[02:14:18] <a__> It'd be nice if a C++ library helped with one-liners
[02:14:21] <a__> And C++ is? XD
[02:14:26] <cbreak> good c++ is.
[02:14:27] <anyone> sure you can do lines.scan.uniq.sort in C++. You just need to define appropriate functions that return what they processed.
[02:14:35] <cbreak> that's why I call that line of code "garbage"
[02:14:38] <a__> Which is what I want
[02:14:38] <cbreak> because it's not readable.
[02:14:41] <computerquip> Bro, are you serious? That code is nowhere near co-worker friendly.
[02:14:53] <computerquip> Who the fuck told you it was?
[02:15:01] <cbreak> anyone: those are not functions, they're member variables :P
[02:15:08] <a__> Lol
[02:15:11] <anyone> yeah but in the context of C++ you'd need functions
[02:15:18] <a__> D can do that too, same with Nim
[02:15:32] <a__> If it is well commented, it is very readable
[02:15:46] <a__> Or if it is in an appropriate function
[02:15:47] <computerquip> You shouldn't need comments to understand code.
[02:15:54] <a__> Sure
[02:15:56] <anyone> lines().sort().uniq() is just another style of writing uniq(sort(lines()) [with consequences for what the functions have to return and need to take]
[02:16:04] <a__> Sure
[02:16:08] <a__> And the latter is more perl-like
[02:16:21] <a__> So where are the C++ library for those things?
[02:16:21] *** Quits: damiano (~cesello@host-188-13-240-8.business.telecomitalia.it) (Read error: Connection reset by peer)
[02:16:26] <a__> In boost?
[02:16:47] *** Quits: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de) ()
[02:16:57] <cbreak> the standard library has generic sorting and uniquifying
[02:17:02] <cbreak> you probably know of them
[02:17:18] <cbreak> those algorithms work on iterator pairs
[02:17:34] <a__> The Ruby approach is like a UNIX pipe
[02:17:48] <a__> One could do that in D or Nim too
[02:17:52] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:18:24] <a__> Do you guys hate UNIX pipes too?
[02:18:28] <computerquip> Look man, I crap on C++ for a *lot* of things, but this just isn't one of them.
[02:18:32] <a__> And bash?
[02:18:40] <cbreak> unix pipes have so many issues...
[02:18:46] <cbreak> it's not even funny to make fun of them
[02:18:50] <a__> ........
[02:18:56] <cbreak> the only thing they have going for them is that they work
[02:19:09] <a__> They improve productivity markedly
[02:19:14] <a__> They get real things done
[02:19:28] <lumberluch0> unix style pipes are pretty good for when you know that the intermediate processes won't cause trouble
[02:19:36] <lumberluch0> like find | grep | uniq | sort
[02:20:33] <lumberluch0> And are in general good for describing serial processes in very much the same way the find().grep().uniq().sort() syntax would be
[02:20:34] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[02:20:36] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[02:20:43] <a__> Yes
[02:20:54] <cbreak> guess why find has both -print and -print0
[02:21:12] <cbreak> and guess how programs after it will break in different ways
[02:21:13] <a__> sort(uniq(grep(find()))) would be very clunky
[02:21:21] <lumberluch0> because sometimes you want to print, and sometimes you want to prin0 (and I'm not even kidding)
[02:21:43] <cbreak> lumberluch0: just think of what happens when you encounter a name that contains both a newline and a null byte :)
[02:21:56] <a__> That could be problematic
[02:21:59] <cbreak> yes.
[02:22:02] <a__> find is not a good program
[02:22:06] <cbreak> why? Because pipes are dumb
[02:22:07] <a__> It's really poorly made
[02:22:11] <cbreak> they're streams
[02:22:14] <a__> It doesn't have to do with pipes at all
[02:22:22] <a__> It has to do with find
[02:22:22] <cbreak> they have no notion of messages, or message boundaries, or any encoding at all
[02:22:24] <a__> Find sucks
[02:22:28] <lumberluch0> like, that's what I said. But that has nothing to do with the processes the pipes (or the piped-to functions) themselves do, it's just an artifact of how text is represented at the source
[02:22:32] <cbreak> all you can transfer is raw bytes
[02:22:59] <cbreak> lumberluch0: it's an artefact of how the "protocol" of pipes works
[02:23:03] *** Joins: tomith (tomith@85-156-184-155.elisa-laajakaista.fi)
[02:23:23] <cbreak> unix pipes have a start, they have a data stream, and they have an end
[02:23:26] <cbreak> that's it.
[02:23:42] <cbreak> everything beyond that is left to the interpretation of participating programs
[02:23:42] <a__> Like a singly linked list
[02:23:48] <cbreak> a__: no
[02:23:56] <a__> Right, they're better
[02:23:57] <cbreak> a linked list has a notion of elements
[02:24:07] <a__> characters are elements
[02:24:08] <a__> Bytes
[02:24:10] <RandomReader> that looks like you want some of what Ranges would enable
[02:24:48] <RandomReader> as in you specifically want a functional-style processing pipeline, it's not about the strings themselves
[02:25:03] <a__> Yeah
[02:25:08] <a__> I care about syntax and brevity
[02:25:42] <a__> Why do you think people use scripting languages and not C++? Serious question.
[02:25:58] <RandomReader> I use scripting languages when I have tasks suited to them
[02:26:04] <RandomReader> same as any other practical choice
[02:26:08] <lumberluch0> each language has its ups and downs, I use scripting languages when I'm in a scripting environment
[02:26:24] <a__> Why are there scripting environments?
[02:27:15] <lumberluch0> Because different ways of doing tasks are better to use at different times. Sometimes it suffices to just quickly hack something together, sometimes you need (or are paid for) something more involved.
[02:27:57] <lumberluch0> Like, sure, you can write a menu in bash no issues, but I'd definitively not write a menu for *medical equipment* in bash
[02:28:26] <a__> I'm saying
[02:28:31] <a__> Why doesn't everyone use C++ always?
[02:28:49] <lumberluch0> I return to you the question: why doesn't everyone use Perl anyways?
[02:28:55] <lumberluch0> Or BASIC? Or Cobol? or assembler?
[02:28:58] <a__> Because people use Ruby?
[02:29:02] <a__> (that's a joke)
[02:29:13] <a__> COBOL sucks, assembler is worse than C or C++, BASIC sucks
[02:29:18] <RandomReader> "why doesn't everyone use a hammer?"
[02:29:29] <a__> Hammers are good
[02:29:39] <RandomReader> we understand that different tools are for different jobs .. I'm not convinced you fully do yet :)
[02:29:40] <lumberluch0> Hammers are good when you need to hammer
[02:29:40] <a__> People could make transpilers
[02:29:46] <PJBoy> hammers considered harmful
[02:30:00] <a__> Everything could be converted to a hammer. The thing is, hammers work
[02:30:04] <lumberluch0> but I'd definitively not program a menu for medical equipment in a hammer
[02:30:07] <a__> No need for rudeness, RandomReader
[02:30:15] *** Joins: cesello (~cesello@user/cesello)
[02:30:23] <a__> "Hammer" would be machine code
[02:30:28] <cbreak> no.
[02:30:39] <lumberluch0> a__, exactly how do you get the utility and tailored application of a scissors with a hammer?
[02:30:52] <a__> SMASH THE NAILS!!!
[02:30:54] <a__> lol
[02:31:11] <a__> You could use a scissors to hammer transpiler
[02:31:14] <a__> A magic wand
[02:31:27] <a__> That would make scissors as powerful and potent as a hammer
[02:31:56] <a__> People should transpile more
[02:32:22] <cbreak> compile all the things to clang llvm byte code.
[02:32:40] <a__> I don't need to use Python because I made my own programming language with better syntax than Python that transpiles to C++
[02:32:47] <a__> I made a web browser in it
[02:32:53] <a__> I don't want to make a web browser in Python
[02:32:54] <a__> or Ruby
[02:33:10] <a__> No need for that, one could compile to C or C++ (or even Rust)
[02:33:18] <a__> LLVM could work too, I guess
[02:33:26] <a__> But that would be more complex
[02:34:18] <a__> So my C++ + QWebEngine (C++) + Chromium (C++)
[02:34:19] <a__> C++ is very fast
[02:35:23] <a__> "we understand that different tools are for different jobs .. I'm not convinced you fully do yet :)" <---- This comment assumes that tools are static (false), and that there are "jobs" that abstractly exist (false), and that some tools are necessarily "inherently" better than others (false)
[02:35:41] <computerquip> ...
[02:35:47] <computerquip> This conversation is literally pointless.
[02:35:54] <a__> That is false
[02:36:33] <cbreak> hey, I also built a web browser by taking a web browser and gluing an other web browser onto it
[02:36:53] <a__> No, I use Chrome's engine, like multiple browsers have
[02:36:58] <a__> Doesn't Edge do that?
[02:37:04] <computerquip> You can't just say things without defining terms or statements with the assumptions that they're fact while also expecting a productive conversatoin.
[02:37:14] <a__> Chromium is generally considered to be the best engine
[02:37:22] <cbreak> for spyware maybe
[02:37:24] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:37:36] <a__> You were the ones doing that
[02:37:38] <a__> I wasn't
[02:37:39] <a__> lol
[02:38:00] <a__> But if absurd claims that inherently do not have any basis in reality get claimed, then I should disagree
[02:38:24] <computerquip> Good talk.
[02:38:28] <a__> ..........
[02:38:45] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[02:38:52] <a__> You guys seem to like wasting time
[02:39:47] <a__> > for spyware maybe
[02:39:50] <a__> Oh please
[02:39:55] <a__> This is the mainstream consensus
[02:40:04] <a__> Chromium is well respected and used
[02:43:17] <johnny> sshouldn't you be talking in terms of rendering engines rather than specific browers?
[02:43:28] <johnny> blink has no spyware
[02:43:59] <johnny> and what they they integrated blink into before turning into a real browser (whatever they call the most base layer) also has no spyware
[02:44:20] <johnny> the spyware doesn't come until a bit higher up in the stack
[02:48:17] *** Quits: a__ (~a@69.165.165.206) (Remote host closed the connection)
[02:50:46] <RandomReader> lol
[02:51:12] <RandomReader> I wonder who that was
[02:54:03] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Ping timeout: 244 seconds)
[03:02:33] *** Joins: evocatus (~evocatus@84.51.113.13)
[03:05:55] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:24ec:fe64:8453:2000)
[03:06:14] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[03:10:02] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:13:10] *** wootehfoot is now known as Supersaiyan_IV
[03:13:39] *** Joins: KombuchaKip (~kip@192.252.230.5)
[03:13:40] *** Supersaiyan_IV is now known as wootehfoot
[03:30:04] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[03:36:03] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:37:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:48:08] *** Quits: lovelace (~paul@2.24.23.175) (Quit: Konversation terminated!)
[04:04:10] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 260 seconds)
[04:04:56] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f413:894:cbd8:9458) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:13:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[04:25:30] *** Quits: magla (~gelignite@55d43ee1.access.ecotel.net) (Quit: Stay safe!)
[04:38:57] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[04:48:01] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[05:00:43] *** Joins: dld (~davidlowr@2601:197:600:1210:5db6:6f5a:3b6e:25f9)
[05:01:25] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[05:02:12] *** Joins: The_Jag_ (~The_Jag@host-87-15-17-212.retail.telecomitalia.it)
[05:04:15] *** Quits: The_Jag (~The_Jag@host-87-17-20-218.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:12:18] *** Quits: tomith (tomith@85-156-184-155.elisa-laajakaista.fi) (Quit: tomith)
[05:13:48] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:24ec:fe64:8453:2000) (Quit: Quit)
[05:22:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d11d:1c5b:4ce6:a804)
[05:28:19] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:37:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:04] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[05:37:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:07] *** ChanServ sets mode: +v npaperbot
[06:03:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:11:46] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 245 seconds)
[06:15:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[06:15:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:31:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:46:23] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6274:3e6b:ca61:27ef)
[06:58:17] *** Quits: DSpider (~DSpider@82.79.237.143) (Quit: Leaving)
[07:16:42] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[07:20:30] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[07:32:18] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:32:56] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6274:3e6b:ca61:27ef) (Quit: Leaving)
[07:33:09] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6274:3e6b:ca61:27ef)
[07:37:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[07:38:59] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[07:47:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[07:53:06] *** Quits: lumberluch0 (~lumbermb@191.114.114.152) (Ping timeout: 260 seconds)
[08:14:46] *** Joins: chozorho (~chozorho@2601:146:300:c30::8489)
[08:30:22] *** Joins: ShiftyLo_ (~shiftylog@104.200.132.217)
[08:30:27] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:33:06] *** Joins: frost (~frost@user/frost)
[08:36:02] *** Quits: ShiftyLo_ (~shiftylog@104.200.132.217) (Ping timeout: 260 seconds)
[08:44:14] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[08:50:58] *** Joins: ravan (~ravan@user/ravan)
[09:00:06] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[09:05:31] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 244 seconds)
[09:06:46] *** Joins: ravan (~ravan@42.201.198.151)
[09:06:49] *** Quits: ravan (~ravan@42.201.198.151) (Client Quit)
[09:20:10] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 252 seconds)
[09:22:51] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[09:26:21] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6274:3e6b:ca61:27ef) (Ping timeout: 245 seconds)
[09:37:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:08] *** ChanServ sets mode: +v npaperbot
[09:44:27] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:48:29] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[09:53:18] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 265 seconds)
[10:06:47] *** Joins: kurfen (~kurfen@45.152.181.134)
[10:19:25] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[10:30:13] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[10:50:11] <very_sneaky> based on ip, new entrant, and it doesn't seem like a vpn ip
[10:57:53] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:01:46] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:18:51] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[11:21:20] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[11:21:55] *** Joins: cursey (~cursey@user/cursey)
[11:26:43] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[11:27:06] *** Joins: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32)
[11:29:35] *** Joins: andreasbuhr (~quassel@p549db0bc.dip0.t-ipconnect.de)
[11:30:02] *** Quits: andreasbuhr (~quassel@p549db0bc.dip0.t-ipconnect.de) (Client Quit)
[11:32:51] *** Joins: magla (~gelignite@55d4df94.access.ecotel.net)
[11:32:52] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[11:41:36] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[11:43:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:51:21] *** Quits: xisop (~xisop@bnull.net) (Ping timeout: 245 seconds)
[12:03:41] *** Joins: honeyittsya (~ittsya@95.67.115.93)
[12:04:03] *** Parts: honeyittsya (~ittsya@95.67.115.93) ()
[12:05:59] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[12:09:27] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:402d:e275:f744:5ade)
[12:10:56] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 245 seconds)
[12:19:33] <very_sneaky> is it a common c++ pattern to chain function calls on an object in a similar way to what's performed in java spring? if not, is there a reason why it's avoided? Seems like it can provide a reasonably robust interface for customisation
[12:21:16] *** Joins: xisop (~xisop@bnull.net)
[12:22:30] <very_sneaky> like, this kind of thing: https://bpa.st/JNFA
[12:23:19] <cbreak> you can do that
[12:23:23] <cbreak> but it's ugly.
[12:23:42] <cbreak> you don't need the .build() at the end either, if your proxy object has a destructor that does that
[12:24:01] <very_sneaky> i actually don't mind it - are there any functional reasons i don't see this pattern much in c++?
[12:24:05] <cbreak> very_sneaky: I've seen that pattern for example in boost::python, boost's named parameter library and others
[12:24:21] <very_sneaky> huh, okay - interesting
[12:24:21] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:24:23] <cbreak> you probably see it a lot, but not with named functions
[12:24:32] <cbreak> std::cout << blah << blub << xyz;
[12:24:42] <very_sneaky> yeah true, that's a good example
[12:25:34] <cbreak> in c++ you don't really need that
[12:25:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:25:40] <cbreak> we have constructors you can call
[12:25:47] <cbreak> or factory functions if you want to go that way
[12:26:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[12:26:29] <cbreak> ah, have you used boost::asio?
[12:26:41] <cbreak> I think I saw something similar there for option types
[12:26:48] <cbreak> it might make sense for that... a bit...
[12:27:02] <cbreak> -> to fake optional named parameters
[12:30:04] <very_sneaky> to give context, i'm thinking about the idea of creating "services"
[12:30:18] *** Quits: xisop (~xisop@bnull.net) (Ping timeout: 260 seconds)
[12:30:27] <very_sneaky> the type of information available in a given service could be composable by inheriting a number of different interfaces
[12:30:50] *** Joins: xisop (~xisop@bnull.net)
[12:31:00] <cbreak> that sounds weird
[12:31:10] <cbreak> why inheritance?
[12:31:13] *** Joins: bobb_ (~bobb_@dslb-092-074-254-082.092.074.pools.vodafone-ip.de)
[12:31:33] <very_sneaky> i.e., one service might provide historical data, another service might provide company information, and there might be different queries to perform on each - i'm thinking that this pattern might be useful because configuration by the client could also be composable based on the different data provided by each service
[12:33:13] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:33:42] <very_sneaky> maybe inheritence isn't the best way - seemed like the most straight forward
[12:35:08] <very_sneaky> but if a service is going to provide historical market data, then it would need a function to call to be able to parse that, and presumably a reasonably similar set of filters/configuration options
[12:35:44] <very_sneaky> but if i want services to provide various combinations of those kinds of interfaces, inheritence seemed to be the most obvious way
[12:36:07] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:36:51] <cbreak> or you can just give them a member
[12:37:30] <cbreak> like sneakyService.history.getStuff() / sneakyService.liveData.getTheThingsNow()
[12:37:52] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:38:22] <cbreak> or you just have separate things from the start
[12:38:24] <very_sneaky> hmm, true.
[12:38:59] <cbreak> if you want runtime polymorphism, inheritance is required
[12:39:10] <cbreak> but you don't neccessarily need to shove everything into one type
[12:39:21] <cbreak> so you might not need multiple-inheritance
[12:39:37] *** Quits: xisop (~xisop@bnull.net) (Ping timeout: 258 seconds)
[12:41:07] <very_sneaky> i was thinking it might be useful to have like, service.request("History", "XBT").filter(from, to).filter(price, ">50000")
[12:41:35] <very_sneaky> but i guess that could equally be service.request().history("XBT").filter(from, to).filter(price, ">50000") or similar
[12:43:14] <very_sneaky> i guess it might be necessary to have inheritence to deal with heterogenous services when passing things around - if i have different fields they wouldn't be accessible from the base class without a pointer cast
[12:44:21] <very_sneaky> i.e., i'd have to pass HistoryService*, LiveDataService* around discretely rather than just Service* and call a get() method or something on it
[12:45:16] *** Joins: xisop (~xisop@bnull.net)
[12:47:57] <very_sneaky> having said that, perhaps it would be better to detach clients from the services themselves and have a more generic request object
[12:47:57] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:48:14] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:58:51] *** Quits: chozorho (~chozorho@2601:146:300:c30::8489) (Ping timeout: 245 seconds)
[13:00:52] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[13:01:08] *** Joins: wovado (~wovado@2a02:a03f:8a8f:2300:c568:f8c5:3f87:8f6b)
[13:05:46] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 244 seconds)
[13:07:35] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[13:11:49] <Ronalds_Mazitis_> hey , I thought about getting some stuff that auto comments tha code
[13:12:11] <Ronalds_Mazitis_> oops wrong group
[13:13:07] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[13:17:10] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[13:20:02] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:20:18] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[13:23:42] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:402d:e275:f744:5ade) (Ping timeout: 258 seconds)
[13:34:33] *** Joins: Miyu (~hackkitte@154-148-165-046.ip-addr.inexio.net)
[13:37:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:09] *** ChanServ sets mode: +v npaperbot
[13:37:48] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:37:54] *** Quits: kurfen (~kurfen@45.152.181.134) (Quit: WeeChat 2.3)
[13:38:10] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Ping timeout: 260 seconds)
[13:38:17] *** Joins: kurfen_ (~kurfen@45.152.181.134)
[13:40:11] *** Quits: kurfen_ (~kurfen@45.152.181.134) (Client Quit)
[13:41:10] *** Joins: kurfen (~kurfen@45.152.181.134)
[13:42:14] *** Quits: kurfen (~kurfen@45.152.181.134) (Client Quit)
[13:42:35] *** Joins: kurfen (~kurfen@45.152.181.134)
[13:42:39] *** Quits: kurfen (~kurfen@45.152.181.134) (Client Quit)
[13:43:37] *** Joins: kurfen (~kurfen@45.152.181.134)
[13:45:07] *** Quits: kurfen (~kurfen@45.152.181.134) (Client Quit)
[13:45:27] *** Joins: kurfen (~kurfen@45.152.181.134)
[13:50:36] *** Joins: ShiftyLo_ (~shiftylog@104.200.132.217)
[13:52:33] *** Miyu is now known as hackkitten
[13:56:10] *** Quits: ShiftyLo_ (~shiftylog@104.200.132.217) (Ping timeout: 260 seconds)
[13:56:10] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:56:52] *** Quits: kurfen (~kurfen@45.152.181.134) (Quit: WeeChat 2.3)
[13:57:12] *** Joins: meator (~meator@user/meator)
[13:57:14] *** Joins: kurfen (~kurfen@45.152.181.134)
[14:05:21] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:08:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:18:09] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[14:23:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e4ea:1e88:cb3a:f1c4)
[14:26:53] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:29:25] <zen_coder> I have a problem with boost asio https://paste.ee/p/hw3dh
[14:29:43] <zen_coder> unfortunately wandbox is down
[14:33:19] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[14:37:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:37:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:39:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:40:34] <ville> and the problem is?
[14:42:39] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:42:50] <zen_coder> ville: https://paste.ee/p/hw3dh#s=0&l=37
[14:44:41] <zen_coder> I have added the ouput here too https://paste.ee/p/xMGK9 in the bottom
[14:44:55] <zen_coder> the problem is, when I start the 2nd loop
[14:45:00] <zen_coder> "io->run() - start 2nd loop"
[14:45:10] <zen_coder> SIGTERM/SIGKILL handler called will be called
[14:45:17] <zen_coder> and the 2nd timer will not be invoked
[14:45:45] <zen_coder> somewhow the 2nd creation of the new handler_signal is repsonsible for this https://paste.ee/p/xMGK9#s=0&l=41
[14:48:23] <zen_coder> ville: do you see?
[14:48:24] <bv> async_wait() "returns immediately".  That's a hint that internally it still does something before it is really initialized.
[14:49:03] <bv> so your run() is getting called before the timer has really started
[14:49:20] <bv> that's my guess anyways as someone never using boost asio but seeing this same pattern in zeromq
[14:51:17] <zen_coder> the problem is somehow connected to this "handler_signal"
[14:51:38] <zen_coder> just adding "handler_signal->cancel();" will behave the problem to exit in the 2nd loop imediately
[14:51:55] <zen_coder> problem=>program
[14:52:56] <bv> I see, you repeat the pattern and it works as expected first time but not second
[14:53:53] <bv> I should have held my tongue then as it's not likely the reason I thought
[14:53:53] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[14:55:32] <zen_coder> I tried some stuff, but no success
[15:03:21] *** Joins: chris64 (~chris@user/chris64)
[15:03:27] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:05:38] <bv> There's this, maybe it's needed for the second setting of signal handlers? https://www.boost.org/doc/libs/1_77_0/doc/html/boost_asio/reference/basic_signal_set__rebind_executor.html
[15:06:22] <bv> I really should learn boost::asio proper
[15:13:08] *** Quits: wovado (~wovado@2a02:a03f:8a8f:2300:c568:f8c5:3f87:8f6b) (Remote host closed the connection)
[15:16:01] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[15:17:30] *** Joins: DSpider (DSpider@2a02:2f00:2ff:ffff::646c:635d)
[15:18:47] <chris64> apropos asio. does anybody know about the current state of standard executors proposal and it's adoption?
[15:19:49] <chris64> there was a change log notice or blog post (not sure anymore) that there's work on asio to support it, but there's no library that implements the executors yet, no?
[15:23:53] <ville> chris64: executors is on track, networking is dead
[15:24:39] <ville> for networking to make a comeback they have to reword it in terms of the sender/receiver model
[15:25:07] <chris64> I see, is there an implementation of the executors already?
[15:25:30] <chris64> I just saw that asio has their own executor implementation, so I guess they'd adapt theirs then?
[15:26:03] <ville> do you mean asio the library or asio the general concept of asynchronous io
[15:26:04] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:26:12] <chris64> the library
[15:26:18] <ville> c++ is not adoptinc the asio the library's model of execution
[15:26:48] <chris64> yes, I understood that
[15:27:08] <ville> for years it looked like they would, at least for networking, but then the receiver/sender came along it looks like they are basing everythig on top of that
[15:27:44] <ville> ok then I didn't understand your comment: "so I guess they'd adapt theirs then?"
[15:27:52] <ville> who would adapt what?
[15:28:10] <chris64> ahh, I found a branch on https://github.com/chriskohlhoff/asio called standard-executors
[15:28:17] <chris64> this is what I was looking for
[15:28:40] <chris64> ville: boost.asio adopting the standards executor API
[15:29:12] <chris64> and there's an io-uring branch as well :-o
[15:29:22] <ville> so yes the networking ts is expected to adapt to using sender/receiver if it wants to make progress through wg21. no idea what boost would do. sort of expect they'd track what wg21 wants
[15:32:02] <chris64> I guess so too
[15:32:39] <ville> someone just had a blog post(?) about this which expounded on some of the votes that have taken place
[15:35:38] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:38:11] <ville> chris64: https://old.reddit.com/r/cpp/comments/q6tgod/c_committee_polling_results_for_asynchronous/
[15:40:22] *** Joins: pulse (~pulse@user/pulse)
[15:41:53] <chris64> ahh, that's interesting, thank you ville
[15:41:57] *** Joins: sprout_ (~quassel@86-82-44-193.fixed.kpn.net)
[15:42:36] <chris64> this kind of polling is interesting as well. never saw it before for technical stuff but it's actually something I'd like to try out in design-by-committee situations
[15:45:04] <ville> lewg posts their polling results. you can see them when a new wg21 mailing comes available
[15:45:20] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d6e:87c6:1a95:cc2d) (Ping timeout: 260 seconds)
[15:45:46] <chris64> haven't check the mailings for quite some time now mh
[15:46:47] <chris64> looks like chriskohlhoff is very active on the iouring branch recently, really looking forward to that
[15:51:07] <johnny> so how much of that networking stuff is just library related vs not? or is it all library?
[16:03:18] <chris64> I guess it's all library, right? because it's not intending to adapt the language?
[16:03:25] <chris64> or change
[16:06:21] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[16:09:23] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 264 seconds)
[16:10:45] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[16:12:55] <johnny> i didn't read anything too specific about it because i haven't yet needed anything like that from C++ yet
[16:21:04] *** Joins: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:23:15] *** Quits: meator (~meator@user/meator) (Ping timeout: 260 seconds)
[16:23:53] *** Quits: Spirit532 (~Spirit532@178.127.244.189) (Killed (NickServ (GHOST command used by Spirit5323!~Spirit532@mm-112-217-122-178.mgts.dynamic.pppoe.byfly.by)))
[16:23:54] *** Joins: Spirit532 (~Spirit532@mm-112-217-122-178.mgts.dynamic.pppoe.byfly.by)
[16:24:19] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[16:24:36] <chris64> I see, maybe ville knows more on which wg are involved in networking and standard executors
[16:26:42] *** Quits: magla (~gelignite@55d4df94.access.ecotel.net) (Quit: Stay safe!)
[16:27:23] *** Joins: meator (~meator@user/meator)
[16:32:30] *** Joins: AmR (~AmREiSa@156.199.106.121)
[16:32:30] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:32:43] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:34:00] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 244 seconds)
[16:39:37] <ville> wg21 is all of it, sg1 is executors, sg4 is networking
[16:39:53] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[16:39:55] <ville> sg being a study group of wg21
[16:41:18] <cbreak> if sg1 is executors, then sg0 must be judges and jury
[16:41:42] <ville> sg1 is really concurrency
[16:47:41] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[16:50:01] *** Quits: X-Scale (~ARM@31.22.163.11) (Ping timeout: 244 seconds)
[16:50:01] *** X-Scale` is now known as X-Scale
[16:54:53] *** Joins: proller (~p@80.240.216.69)
[16:56:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[17:07:37] *** Joins: X-Scale` (~ARM@92.250.96.217)
[17:08:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:09:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[17:09:50] *** X-Scale` is now known as X-Scale
[17:11:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:12:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[17:12:53] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:21:17] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:31:11] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:36:29] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[17:37:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:05] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:37:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:11] *** ChanServ sets mode: +v npaperbot
[17:40:36] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[17:41:09] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:50:40] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:52:38] *** Joins: lumberluch0 (~lumbermb@191.114.114.152)
[17:55:15] *** Joins: PeriBooty (~PeriBooty@2601:100:817f:2dd0::20b6)
[17:55:56] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:56:03] *** Joins: magla (~gelignite@55d4df94.access.ecotel.net)
[17:56:38] *** Quits: wladimir (~doforlove@user/doforlove33) (Client Quit)
[17:57:14] *** Joins: wladimir (~doforlove@user/doforlove33)
[17:57:33] *** Quits: wladimir (~doforlove@user/doforlove33) (Client Quit)
[18:00:22] *** Quits: PeriBooty (~PeriBooty@2601:100:817f:2dd0::20b6) (Changing host)
[18:00:22] *** Joins: PeriBooty (~PeriBooty@user/peribooty)
[18:02:03] *** Quits: PeriBooty (~PeriBooty@user/peribooty) (Quit: Leaving)
[18:02:16] *** Joins: PeriBooty (~PeriBooty@2601:100:817f:2dd0::20b6)
[18:02:23] *** Quits: PeriBooty (~PeriBooty@2601:100:817f:2dd0::20b6) (Changing host)
[18:02:23] *** Joins: PeriBooty (~PeriBooty@user/peribooty)
[18:07:05] *** Joins: ethrl (uid524335@user/doforlove33)
[18:07:05] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:11:41] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[18:14:27] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[18:15:54] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:17:11] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[18:19:44] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[18:20:00] <cart_man> So can std::min()  Not be used with long long ?
[18:20:25] <lumberluch0> why wouldn't it?
[18:21:20] <lumberluch0> IIRC it's templated so it should work with anything that's <-comparable
[18:21:20] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:21:53] <zen_coder> I want to create some QtTimer equivalent with boost::asio, therefore I created a context manager which  stores for every thread exactly one boost:.asio::io_context object
[18:22:02] <cart_man> lumberluch0: Ahh nevermind it was actually the ABS I had in there needed a std:: -> std::min(solution,std::abs(last - 2 * parts[i]))
[18:22:19] <zen_coder> Then the timer object can internally retrieve the io_context object for the current thread
[18:22:44] <zen_coder> so I can avoid forwarding the io_context object in the interface, and keep asio hidden from the public interface
[18:22:53] <zen_coder> also easier to use
[18:23:02] <zen_coder> is this a good idea?
[18:29:58] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:30:06] *** Parts: anyone (~filler@a4.inai.de) ()
[18:30:39] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4465:42da:6a61:c596)
[18:30:39] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4465:42da:6a61:c596) (Changing host)
[18:30:39] *** Joins: skapata (~Skapata@user/skapata)
[18:47:53] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[18:48:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[18:50:02] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c3d4:ecc4:d44c:ce60)
[18:55:00] <lumberluch0> Quickie reminder please: it is UB to add a new *overload* to std algorithms that depends on user-defiend types, yes?
[18:55:29] <jkaye> Putting things in namespace std without "permission" is UB I'm pretty sure
[18:55:35] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:56:02] <jkaye> "The behavior of a C++ program is undefined if it adds declarations or definitions to namespace std or to a namespace within namespace std unless otherwise specified"
[18:56:19] <lumberluch0> Excellent
[18:56:50] <lumberluch0> I'm *implementing* std tho (I write backport libraries) so I assume by definition I have to have "permission", but I still want to break as little stuff as possible.
[18:57:27] <jkaye> Haha, that is beyond my knowledge then I think
[18:57:28] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:58:44] <lumberluch0> That's understandable. C++ lawyers are the only ones who can reasonably challenge insurance lawyers to a duel and win, I think
[19:00:59] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 264 seconds)
[19:03:59] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[19:06:34] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:07:17] <ville> lumberluch0: depends on which version of c++ you are talking about exactly. as an implementer you can do whatever you want
[19:08:15] <lumberluch0> what *exactly* is an "implementer", anyway? I assume eg.: Boost are one, for example, yes?
[19:09:10] <ville> if you're implementing the standard library you'd count as one, but if you are not also the compiler implementer then you'd still have to play by someone else's rules in that regard
[19:09:27] <ville> and no boost wouldn't be one. they are writing 3rd party libaries like anyone else
[19:09:58] <ville> (there are things in the standard library that can't be implemented with out compiler support)
[19:11:23] <lumberluch0> Oh that makes lots of sense
[19:11:42] <ville> sorry. that wasn't my intention
[19:11:42] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:12:19] <PJBoy> hah
[19:16:59] <lumberluch0> no I mean, it actually clarifies things to me (or I was way overthinking it)
[19:18:51] <computerquip> If that's the case, seems like ville is losing his touche smh.
[19:18:53] <computerquip> touch*
[19:20:38] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:22:33] *** Joins: paulmcquad (~gamer@78.17.229.141)
[19:23:35] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[19:28:48] <lumberluch0> heh
[19:35:58] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[19:37:14] *** Joins: meator (~meator@user/meator)
[19:40:13] <AmR> How I can learn About linking reference  ?
[19:46:37] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[19:58:24] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:58:24] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:01:42] *** Quits: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 244 seconds)
[20:01:58] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[20:04:14] *** Joins: ferdna (~ferdna@user/ferdna)
[20:05:14] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[20:06:12] <paulmcquad> Please help. Why is this failing? ->  https://ideone.com/YK3jTS
[20:07:43] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:08:34] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[20:09:39] <cart_man> Is it ok to to say something lke std::vector::iterator X = Vec.begin();   X += 7 ;  To mov the iterator up 7 times if you know there are enough vector elements in the vector?  You dont have to say X++; seven times right?
[20:10:05] <cart_man> Also if it does work like that, Is it because they overloaded anything that adds and subtracts from Iterators?
[20:10:43] <jkaye> Yes, that's fine
[20:10:43] <jkaye> https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator
[20:23:22] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[20:32:46] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:32:46] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:33:05] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:33:44] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Read error: Connection reset by peer)
[20:35:59] *** Quits: cesello (~cesello@user/cesello) (Quit: Cia')
[20:36:49] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 244 seconds)
[20:38:24] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[20:39:47] <computerquip> paulmcquad, Go through each error. Most of those are pretty intuitive.
[20:40:30] <computerquip> Also, if you copied and pasted that code, ∗ isn't an ASCII character.
[20:40:40] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:41:16] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:43:43] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:44:02] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[20:50:25] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 260 seconds)
[20:50:38] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[20:52:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:56:50] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[20:59:28] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:02:03] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[21:02:03] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:03:57] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[21:04:22] *** Joins: teepee (~teepee@openscad/teepee)
[21:04:27] *** Joins: Praise (~Fat@user/praise)
[21:10:13] *** Quits: emerent (~quassel@p200300cd5748559eba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[21:10:22] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:10:23] *** Joins: emerent (~quassel@p200300cd574855b8ba27ebfffed28a59.dip0.t-ipconnect.de)
[21:12:23] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 265 seconds)
[21:16:34] *** Joins: great_taste (~great_tas@190.32.235.20)
[21:25:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d11d:1c5b:4ce6:a804) (Quit: Quit)
[21:30:07] *** Joins: horribleprogram (~user@2607:fea8:7040:830:c8e3:c56b:f48c:87dd)
[21:30:33] *** Quits: horribleprogram (~user@2607:fea8:7040:830:c8e3:c56b:f48c:87dd) (Changing host)
[21:30:33] *** Joins: horribleprogram (~user@user/horribleprogram)
[21:33:46] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:37:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:12] *** ChanServ sets mode: +v npaperbot
[21:42:39] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[21:42:39] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:42:49] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[21:43:01] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c3d4:ecc4:d44c:ce60) (Ping timeout: 245 seconds)
[21:43:02] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Client Quit)
[21:51:26] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:06:50] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[22:13:18] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:28:47] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[22:33:11] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:33:12] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:35:15] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[22:36:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:37:27] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 265 seconds)
[22:37:39] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:38:07] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:39:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:41:30] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:46:54] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:48:27] <rond_> any standard name across most-popular compilers to unmangle `type_info(T).name()`` ?
[22:48:43] <rond_> typeid(T).name()` I meant
[22:49:51] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:cdbe:d4e8:1dd8:6d8a)
[22:49:51] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:cdbe:d4e8:1dd8:6d8a) (Changing host)
[22:49:51] *** Joins: RoKenn (~RoKenn@user/rokenn)
[22:49:53] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:55:12] <TinoDidriksen> There are libraries that can help with that.
[22:55:26] <rond_> outside of std::?
[22:55:33] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:55:35] <rond_> outside of standard library*
[22:55:36] <rond_> ?
[22:55:53] <TinoDidriksen> There is no standard way to demangle symbols.
[22:58:23] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[23:00:31] <rond_> :(  that's a shame
[23:00:32] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:08:33] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[23:08:55] *** Joins: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00)
[23:09:37] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:09:54] <LOOL123> Hello. Is the command tlist /t: deprecated? I found it in the book  windows system internal part 1. published in 2017.  Then I found this : https://forums.commentcamarche.net/forum/affich-944241-l-utilitaire-tlist-exe. Is my book updated ?tasklist works with no more installation contray to tlist that I can not install yet. Can I still install tlist? And how can I install it?
[23:10:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:11:07] *** Joins: chozorho (~chozorho@2601:146:300:c30::8489)
[23:13:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:15:33] <RandomReader> LOOL123 - tlist is in the debugging tools for windows, as the book says
[23:16:08] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:17:02] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[23:18:35] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[23:19:22] *** Joins: pah (~pah@user/pah)
[23:19:45] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[23:20:22] <RandomReader> https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/tlist  and  https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk
[23:22:23] <RandomReader> or as part of the windows sdk, depending on what you're looking at: https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools#small-classic-windbg-preview-logo-debugging-tools-for-windows-10-windbg
[23:29:06] <LOOL123> I have already installed wdk https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk and sdk with no gaining ability to run the command tlist
[23:29:27] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[23:30:31] <RandomReader> it'll be in the install location, I don't believe there's a path set to it by default
[23:31:04] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[23:34:03] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 244 seconds)
[23:35:24] *** Joins: RoKenn_ (~RoKenn@2001:a61:3505:d101:9b92:2d34:cdad:8bf)
[23:35:24] *** Quits: RoKenn_ (~RoKenn@2001:a61:3505:d101:9b92:2d34:cdad:8bf) (Changing host)
[23:35:24] *** Joins: RoKenn_ (~RoKenn@user/rokenn)
[23:36:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:38:10] *** Quits: RoKenn (~RoKenn@user/rokenn) (Ping timeout: 252 seconds)
[23:51:16] <leonardus> when using a project that uses cmake for build in visual studio, is there still a visual studio "project" and a "solution" or does the ide refer to cmake instead?
[23:51:16] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:52:07] <cbreak> leonardus: depends on how visual studio implemented it
[23:52:09] <cbreak> try it? :)
[23:53:19] *** Joins: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de)
[23:54:35] <lumberluch0> question, what is the most *generic* way to print-to-stdout a variable in C++? template <typename T> print (T t) { ???? << t; } <-- who is ???? ?
[23:54:52] <RandomReader> std::cout ?
[23:54:56] <lumberluch0> it can't be std::cout, since that can't interact with eg.: std::wstring (which requires std::wcout) etc.
[23:54:56] <RandomReader> I don't get the question
[23:55:22] <cbreak> std::cout is bound to standard output
[23:55:29] <lumberluch0> hmmm a better wording of the question would be, how do you determine the corresponding *out object for a variable of a given type?
[23:56:04] <lumberluch0> cbreak, IIRC you can't pass eg.: wstring, u16string, 18string to cout (in fact the latter was even explicitly deleted, making u8string suck even more)
[23:56:15] <lumberluch0> s/18string/u8string/g
[23:56:20] *** Quits: paulmcquad (~gamer@78.17.229.141) (Quit: Konversation terminated!)
[23:56:30] <RandomReader> oh .. that isn't really a concept, since the difference is about working with text, which is a semantic choice determined by the programmer
[23:57:02] <RandomReader> that's why the u8/u16/etc forms are deleted, because there's no specification for unicode output
[23:57:27] <lumberluch0> so the "generically correct" thing to do would be to request both the text *and* the stream that it goes to?
[23:57:36] <RandomReader> I don't know, what's your generic surface area here?
[23:57:53] <RandomReader> (as in, why is this coming up?)
[23:57:59] <lumberluch0> "having containers of Whatever whose contents I want to now print to stdout"
[23:58:15] <RandomReader> no, why are *you* printing to stdout?
[23:58:21] <lumberluch0> where I can reasonably expect Whatever to be whatever (that implements operator<<, ofc)
[23:58:26] *** Quits: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de) (Quit: quit)
[23:58:29] <RandomReader> what's the scenario where I would use your thing?
[23:58:39] <leonardus> cbreak: I'm still confused
[23:58:40] *** Joins: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de)
[23:59:06] <lumberluch0> No idea. This is largely theoretical, it's come up in my years of having to deal with trying to print stuff to console cross-platform between Linux and Windows, etc
[23:59:33] <RandomReader> the thing is, printing to console is usually a user choice, not a generic choice
[23:59:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:59:52] <RandomReader> e.g. something generic I might use would be a logging/debugging library, but *I* would choose where that goes, which might well be a file not stdout
