[00:07:06] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[00:15:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[00:15:11] <lungaro> fizzie, yeah, that was it. Just switched to absolute paths. Seems like such a bad design IMHO. But men
[00:15:12] <lungaro> meh*
[00:16:55] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Ping timeout: 268 seconds)
[00:17:35] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Ping timeout: 250 seconds)
[00:17:35] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Ping timeout: 250 seconds)
[00:17:49] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Ping timeout: 240 seconds)
[00:17:57] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Ping timeout: 265 seconds)
[00:18:02] *** Quits: darkskiez[m] (~darkskiez@2001:470:69fc:105::1:2a27) (Ping timeout: 240 seconds)
[00:18:02] *** Quits: enick_642 (~dngraymat@2001:470:69fc:105::793b) (Ping timeout: 240 seconds)
[00:18:02] *** Quits: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb) (Ping timeout: 240 seconds)
[00:18:14] *** Quits: mambang[m] (~mambang@user/mambang) (Ping timeout: 250 seconds)
[00:18:27] *** Quits: gio[m] (~giolekvam@2001:470:69fc:105::1:16a) (Ping timeout: 250 seconds)
[00:19:02] *** Quits: jzacsh[m]1 (~jzacshdax@2001:470:69fc:105::1:3a69) (Ping timeout: 240 seconds)
[00:19:06] *** Quits: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25) (Ping timeout: 245 seconds)
[00:19:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Ping timeout: 252 seconds)
[00:19:25] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Ping timeout: 240 seconds)
[00:19:31] *** Quits: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: noobcake2465[m] (~noobcake2@2001:470:69fc:105::cced) (Ping timeout: 250 seconds)
[00:19:32] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Ping timeout: 240 seconds)
[00:20:02] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 240 seconds)
[00:20:02] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Ping timeout: 240 seconds)
[00:20:06] *** Quits: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103) (Ping timeout: 260 seconds)
[00:20:06] *** Quits: kadoban (~kadoban@user/kadoban) (Ping timeout: 260 seconds)
[00:20:37] *** Quits: astraad[m] (~astraadma@2001:470:69fc:105::1:4425) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Ping timeout: 268 seconds)
[00:20:38] *** Quits: petoem (~petoem@user/petoem) (Ping timeout: 268 seconds)
[00:23:51] *** Joins: misuto3 (~misuto@h-155-4-73-21.A192.priv.bahnhof.se)
[00:24:06] *** Quits: misuto (~misuto@h-155-4-73-21.A192.priv.bahnhof.se) (Ping timeout: 256 seconds)
[00:24:06] *** misuto3 is now known as misuto
[00:26:30] *** Joins: jla (~jordi@64.225.79.195)
[00:27:37] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[00:31:00] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 265 seconds)
[00:32:00] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[00:32:32] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[00:33:34] *** Joins: kadoban (~kadoban@user/kadoban)
[00:34:34] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[00:36:20] *** Joins: fikran (~fikran@user/fikran)
[00:36:23] *** Joins: psydroid (~psydroid@user/psydroid)
[00:38:57] <fikran> I am doing the equivalent of log.Fatal("%v", err) but am getting the error: Fatal call has possible formatting directive %v. I used to do this all the time but I seem to be getting an error now? Is there a correct way to do this?
[00:39:14] <ikke> Fatalf
[00:40:24] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:43:06] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[00:44:58] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[00:45:06] <fikran> wow, thank you!
[00:46:02] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[00:50:50] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[00:50:53] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[00:51:47] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[00:54:05] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[00:55:24] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[00:55:47] *** Joins: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e)
[00:58:43] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[01:01:17] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[01:03:48] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[01:06:29] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[01:07:19] *** Joins: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103)
[01:20:32] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[01:20:53] *** Joins: astraad[m] (~astraadma@2001:470:69fc:105::1:4425)
[01:21:07] *** Joins: petoem (~petoem@user/petoem)
[01:21:35] *** Joins: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb)
[01:21:44] *** Joins: jzacsh[m]1 (~jzacshdax@2001:470:69fc:105::1:3a69)
[01:21:44] *** Joins: darkskiez[m] (~darkskiez@2001:470:69fc:105::1:2a27)
[01:21:45] *** Joins: enick_642 (~dngraymat@2001:470:69fc:105::793b)
[01:22:23] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:27:02] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Quit: Leaving)
[01:28:46] *** Parts: jla (~jordi@64.225.79.195) ()
[01:33:03] *** Joins: pepee (~pepee@user/pepee)
[01:34:09] *** Joins: MOTERF (~MOTERF@105.66.3.166)
[01:36:37] *** Quits: Guest3883 (~kapu@user/egm) (Ping timeout: 240 seconds)
[01:39:36] *** Quits: MOTERF (~MOTERF@105.66.3.166) (Remote host closed the connection)
[01:40:20] <pinky> when a function returns a map thats always a copy of the map itself, right?
[01:40:33] <pinky> in this case it's a map[string]something{}
[01:40:46] <j416> yes, but not a copy of its items
[01:40:50] <pinky> sorry ..  map[string]*something{}
[01:41:06] <pinky> right so the items could be mutated by the receiver, but the map itself can't be
[01:41:13] <pinky> you can't get the map and do a delete on it for instance
[01:41:18] <pinky> and have it affect the original map
[01:41:31] <pinky> if thats the case, thats what i need :)
[01:41:43] <j416> sounds like somethng that you could easily test. :)
[01:41:52] <pinky> i guess i should
[01:42:37] <j416> pinky: https://go.dev/play/p/nN3A2Fnt_Ya
[01:43:12] <j416> maps are pointer-like types
[01:43:29] <j416> if you need a copy, loop and add to another map
[01:43:53] <pinky> ah, thats the only way? :(
[01:44:15] <j416> or, design your program in a way that avoids the need to
[01:44:28] <fizzie> It's definitely not _always_ a copy. Sometimes people write defensively and have functions return "fresh" maps, but they're not required to, and sometimes people might just trust the caller won't touch it.
[01:44:30] <bpalmer> use a fancy datastructure that's not the built-in map
[01:45:01] <bpalmer> for example, something that provides a read-only view, or a Copy() method, or ...
[01:48:08] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:49:02] *** Joins: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25)
[01:49:33] *** Joins: mambang[m] (~mambang@user/mambang)
[01:51:36] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:52:04] *** Quits: mambang[m] (~mambang@user/mambang) (Read error: Connection reset by peer)
[01:52:04] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Write error: Connection reset by peer)
[01:52:04] *** Quits: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25) (Read error: Connection reset by peer)
[01:52:04] *** Quits: darkskiez[m] (~darkskiez@2001:470:69fc:105::1:2a27) (Read error: Connection reset by peer)
[01:52:05] *** Quits: jzacsh[m]1 (~jzacshdax@2001:470:69fc:105::1:3a69) (Write error: Connection reset by peer)
[01:52:05] *** Quits: petoem (~petoem@user/petoem) (Read error: Connection reset by peer)
[01:52:05] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Write error: Connection reset by peer)
[01:52:06] *** Quits: astraad[m] (~astraadma@2001:470:69fc:105::1:4425) (Read error: Connection reset by peer)
[01:52:06] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Read error: Connection reset by peer)
[01:52:06] *** Quits: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e) (Read error: Connection reset by peer)
[01:52:07] *** Quits: enick_642 (~dngraymat@2001:470:69fc:105::793b) (Write error: Connection reset by peer)
[01:52:07] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Read error: Connection reset by peer)
[01:52:08] *** Quits: kadoban (~kadoban@user/kadoban) (Read error: Connection reset by peer)
[01:52:08] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Read error: Connection reset by peer)
[01:52:08] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Read error: Connection reset by peer)
[01:52:08] *** Quits: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb) (Read error: Connection reset by peer)
[01:52:09] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Write error: Connection reset by peer)
[01:52:09] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[01:52:09] *** Quits: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103) (Read error: Connection reset by peer)
[01:52:09] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Write error: Connection reset by peer)
[01:53:13] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[01:55:25] <pinky> https://go.dev/play/p/4v8xFg2Sjxc
[01:55:26] *** Joins: kadoban (~kadoban@user/kadoban)
[01:55:33] <pinky> it looks like the map itself isn't a copy
[01:55:39] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[01:55:39] *** Joins: gio[m] (~giolekvam@2001:470:69fc:105::1:16a)
[01:55:39] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[01:55:45] <seebs> right
[01:55:53] <seebs> because go doesn't like to do expensive things automatically or subtly
[01:55:53] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[01:55:53] *** Joins: mambang[m] (~mambang@user/mambang)
[01:56:04] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[01:56:04] *** Joins: psydroid (~psydroid@user/psydroid)
[01:56:04] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[01:56:04] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[01:56:04] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[01:56:04] *** Joins: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103)
[01:56:05] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[01:56:05] *** Joins: Guest1387 (~dngraymat@2001:470:69fc:105::793b)
[01:56:05] *** Joins: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25)
[01:56:16] *** Joins: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb)
[01:56:17] *** Joins: noobcake2465[m] (~noobcake2@2001:470:69fc:105::cced)
[01:56:17] *** Joins: astraad[m] (~astraadma@2001:470:69fc:105::1:4425)
[01:56:17] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[01:56:18] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[01:56:18] *** Joins: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e)
[01:56:18] *** Joins: petoem (~petoem@user/petoem)
[01:56:18] *** Joins: darkskiez[m] (~darkskiez@2001:470:69fc:105::1:2a27)
[01:56:44] <pinky> sweet :)
[01:56:53] <pinky> thanks
[01:57:15] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[01:57:48] *** Quits: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw) (Read error: Connection reset by peer)
[01:58:12] *** Joins: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw)
[01:58:22] *** Quits: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw) (Read error: Connection reset by peer)
[01:58:24] <bpalmer> pinky: think of a map as being like a slice -- conceptually a map is something like struct MapHeader { length int; buckets *Buckets} , just like a slice is conceptually somethign like struct SliceHeader { length, capacity int; v *T}
[01:58:38] <j416> huh. thought it'd be a copy.
[01:58:46] *** Joins: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw)
[01:58:50] <j416> maybe an optimization?
[01:58:53] <bpalmer> (the actual type of a map ha sa bunch more fields but conceptually they're irrelevant)
[01:59:00] <j416> ye
[02:00:55] <bpalmer> you know what, I withdraw my suggestion; that's a bit misleading to think about.
[02:01:12] <bpalmer> because it really is returning a pointer ot that struct, as lengths change.
[02:05:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:10:49] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[02:12:47] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:16:04] *** Parts: jhenson (4584610261@user/jhenson) ()
[02:16:42] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[02:16:44] *** Quits: Guest1387 (~dngraymat@2001:470:69fc:105::793b) (Quit: Client limit exceeded: 20000)
[02:16:49] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[02:16:53] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 20000)
[02:17:12] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 20000)
[02:17:30] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Client limit exceeded: 20000)
[02:17:47] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[02:18:01] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Client limit exceeded: 20000)
[02:18:20] *** Quits: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103) (Quit: Client limit exceeded: 20000)
[02:18:26] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Quit: Client limit exceeded: 20000)
[02:19:08] *** Quits: gio[m] (~giolekvam@2001:470:69fc:105::1:16a) (Quit: Client limit exceeded: 20000)
[02:19:12] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (Quit: Client limit exceeded: 20000)
[02:19:40] *** Quits: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw) (Read error: Connection reset by peer)
[02:21:55] *** Joins: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw)
[02:22:22] *** Quits: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw) (Read error: Connection reset by peer)
[02:24:39] *** Joins: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw)
[02:25:16] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:25:30] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:25:53] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:32:53] *** Joins: Atque (~Atque@user/atque)
[02:34:47] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Client limit exceeded: 20000)
[02:38:18] *** Joins: rcernin (~rcernin@101.189.144.104)
[02:43:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[02:45:42] *** Joins: fikran (~fikran@user/fikran)
[02:46:40] *** Joins: jla (~jordi@64.225.79.195)
[02:49:26] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:50:22] *** Joins: sav (~savio@177.12.50.57)
[02:50:46] *** sav is now known as Guest7295
[02:51:01] *** Quits: Guest7295 (~savio@177.12.50.57) (Remote host closed the connection)
[02:51:11] *** Joins: sm4ch (~savio@177.12.50.57)
[02:55:45] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[02:56:03] *** Quits: fikran (~fikran@user/fikran) (Quit: WeeChat 3.0.1)
[03:01:23] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 250 seconds)
[03:06:08] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[03:08:15] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[03:10:48] *** Parts: Rudde_ (~rudde@netboot.io) ()
[03:11:17] *** Joins: Rudde (~rudde@netboot.io)
[03:16:08] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[03:18:51] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:20:32] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[03:20:33] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Client limit exceeded: 20000)
[03:24:59] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 250 seconds)
[03:25:00] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 265 seconds)
[03:25:26] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 256 seconds)
[03:25:50] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 260 seconds)
[03:27:42] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[03:32:18] <b0nn>  struct SliceHeader { length, capacity int; v *T } <<-- hrm, nitpick; SliceHeader is a reflect type, slices are just type slice struct // see https://go.dev/src/runtime/slice.go line 13
[03:32:19] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[03:32:19] *** Joins: kadoban (~kadoban@user/kadoban)
[03:32:33] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[03:32:33] *** Joins: gio[m] (~giolekvam@2001:470:69fc:105::1:16a)
[03:32:47] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[03:32:47] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[03:32:47] *** Joins: mambang[m] (~mambang@user/mambang)
[03:32:47] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[03:32:47] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[03:32:47] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[03:32:47] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[03:33:00] *** Joins: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103)
[03:33:00] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[03:33:00] *** Joins: Guest3458 (~dngraymat@2001:470:69fc:105::793b)
[03:39:16] *** Joins: noonien (~noonien@user/noonien)
[03:40:07] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:40:24] *** Quits: noonien (~noonien@user/noonien) (Client Quit)
[03:40:41] *** Joins: noonien (~noonien@user/noonien)
[03:41:05] *** Quits: noonien (~noonien@user/noonien) (Client Quit)
[03:41:22] *** Joins: noonien (~noonien@user/noonien)
[03:43:58] <b0nn> not really sure why map is called hmap, instead of map, though (yes, hashmap, but that imples that there are other types of maps in the system)
[03:44:10] <b0nn> implies*
[03:44:20] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 265 seconds)
[03:45:35] *** Joins: rcernin (~rcernin@101.189.144.104)
[03:45:58] <fizzie> Because `map` is a keyword?
[03:46:06] *** Joins: krux02_ (~krux02@p200300e817365e000ad66d651ebdab48.dip0.t-ipconnect.de)
[03:46:41] <b0nn> as is slice?
[03:46:46] <fizzie> No, it's not.
[03:47:03] <fizzie> The slice types are (of course) written with `[]`, not with a keyword.
[03:47:07] <b0nn> oh, of course it's implied
[03:47:10] <krux02> anybody experience with protoc and go?
[03:47:34] <krux02> it tells me to use the -M flag, but then when I pass a -M falg it complains that it doesn't know it
[03:47:42] <krux02> and I can't find documentation about it
[03:48:48] <fizzie> It's probably referring to `protoc --go_opt=M...` if it's an option to the Go code generator.
[03:49:11] <fizzie> https://developers.google.com/protocol-buffers/docs/reference/go-generated#package has some examples.
[03:53:34] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:f1c3:37e:743c:a04)
[03:55:13] <krux02> fizzie, what is the protos/ part for?
[03:55:19] <krux02> what information does it hold?
[03:56:00] <krux02> ah, ok I understand it is a subfolder
[04:00:50] <bch> hello #go-nuts
[04:03:18] <bch> I'm looking to find out a couple things (1 answer may answer both questions): tls.Dial conditionaly fills in an error type. I understand there is at least a message for ea. error type, but implementations may provide more fields. How/where do I look to find out details of tls' error return type, or any other arbitrary return for other implementations?
[04:06:30] *** Joins: tesuji (~quassel@2a02:908:180:9500:c920:d3a7:8e12:f696)
[04:08:42] <krux02> fizzie, 'unknown flag --go_opt'
[04:08:45] <krux02> now I am lost
[04:10:37] *** Joins: neverfindme (~hayden@72.92.246.5)
[04:10:58] <b0nn> Am presuming you mean https://pkg.go.dev/crypto/tls#Dial - if you click the link it will take you to https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/crypto/tls/tls.go;l=170 which calls DialWithDialer https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/crypto/tls/tls.go;drc=refs%2Ftags%2Fgo1.17.5;l=116 which calls dial
[04:11:03] <b0nn> https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/crypto/tls/tls.go;drc=refs%2Ftags%2Fgo1.17.5;l=120 - the first function call that can return errors is https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/net/dial.go;drc=refs%2Ftags%2Fgo1.17.5;l=372
[04:11:25] <fizzie> I seem to recall --go_opt having to have to come after a --go_out to be recognised. And there were some version differences in how to invoke the compiler.
[04:11:40] <b0nn> bch: I'd just look through the code, not sure which documentation will give you the full set of errors returned
[04:12:29] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:f1c3:37e:743c:a04) (Ping timeout: 268 seconds)
[04:16:53] <fizzie> krux02: This works for me as a `protoc` call: https://0x0.st/-FmZ.txt -- and makes foo.pb.go correctly attempt to import the other proto as "example.com/bar".
[04:17:10] <fizzie> (Although it doesn't really make sense to have protoc output both into the same output directory. But just for the sake of the example.)
[04:18:15] <krux02> yea I basically gave up on the command line and ι put now the option into the .proto file
[04:18:32] <fizzie> That's probably the reasonable option anyway.
[04:18:57] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[04:19:21] *** Joins: mickey8 (~user@user/mickey)
[04:22:20] <krux02> now I placed that statement everywhere and protoc still complains
[04:22:30] <krux02> why is this so fucking complicated
[04:24:25] <krux02> now the question is, how do I generate all the .proto files into the same folder
[04:24:47] <krux02> I have very little interest in splitting it up into a folder for each file, that is stupid
[04:24:52] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[04:24:56] *** Quits: aLeSD (~aLeSD@139.47.114.114) (Ping timeout: 265 seconds)
[04:25:05] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[04:28:13] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[04:30:43] <fizzie> It's fine to generate more than one .pb.go file into the same folder, but they must of course then have the same Go package as well.
[04:31:23] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[04:31:43] <dalan> How do I install a package that doesn't have a main? Getting `package X is not a main package`
[04:32:08] <krux02> fizzie, now set `option go_package = "prot.os"` for every .proto file
[04:32:48] <krux02> `prot.os` is a stupid package name, but protoc wanted the package to contain a . so I've put a . in there
[04:32:52] <krux02> then it was ok
[04:32:59] <dalan> Am I required to use a `go.mod` file?
[04:33:24] <b0nn> dalan, without a main package, it's just a library, so all you need to do is clone it
[04:33:46] <krux02> dalan, I think you can avoid the go.mod file, but it is hard to doge these days
[04:33:47] *** Joins: fikran (~fikran@user/fikran)
[04:34:14] <krux02> maybe when you downgrade go to a before go.mod file time it is easier, but dependencies are hard to resolve
[04:37:32] <b0nn> dalan: `go install` will try and build whatever it's been targeted to, and nothin can be built without a main package
[04:38:21] *** Quits: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:38:53] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[04:39:05] *** Joins: mickey8 (~user@user/mickey)
[04:41:01] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[04:41:40] *** Joins: darkapex (~darkapex@user/darkapex)
[04:42:12] <fizzie> You can pass non-`main` packages to `go install` just fine, and it will build and cache them. You only get the "is not a main package" if you try to do `go install ...@version`, which is the `go install` mode where it runs in module-aware mode but outside the context of any main module, in which case "installing" anything that's not an executable isn't really meaningful.
[04:42:35] <b0nn> go install -d is where you're heading there.
[04:43:26] *** Joins: Guest66 (~textual@98.13.6.21)
[04:43:51] <b0nn> also, how does it "build and cache" somthing wihtout a main, what's it building precisely?
[04:44:30] <fizzie> The same thing it does when you do `go build ./some/package` that's not a main package.
[04:44:38] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:44:43] <fizzie> (I don't think `go install -d` is a thing.)
[04:45:05] <b0nn> sorry, `go get -d`
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:39] *** Quits: neverfindme (~hayden@72.92.246.5) (Quit: Leaving)
[04:49:13] <fizzie> https://pkg.go.dev/cmd/go#hdr-Build_and_test_caching "The go command caches build outputs for reuse in future builds." That's where I imagine it will "build and cache" packages that aren't executables.
[04:49:34] <b0nn> .a files
[04:49:59] <b0nn> ar archives to be precise
[04:50:13] <b0nn> $ file out
[04:50:13] <b0nn> out: current ar archive
[04:51:05] <b0nn> ar -p out shows the contents
[04:55:27] *** Quits: krux02_ (~krux02@p200300e817365e000ad66d651ebdab48.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:17:12] <bch> b0nn: > I'd just look through the code ... OK, thx. I'll keep src handy :)
[05:18:11] <b0nn> bch: My (quick) look - it goes fairly deep for different code paths that can generate errors
[05:18:27] <b0nn> If you are looking to catch specific error types...
[05:18:51] <b0nn> hmm, mock and see ?
[05:28:01] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[05:28:19] *** Quits: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25) (Quit: Client limit exceeded: 20000)
[05:30:57] *** Joins: shtirlic (~shtirlic@95-55-27-245.dynamic.avangarddsl.ru)
[05:34:26] *** Quits: shtirlic_ (~shtirlic@92-100-163-66.dynamic.avangarddsl.ru) (Ping timeout: 252 seconds)
[05:36:42] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:49:51] *** Joins: g2anj (~v@39.112.227.198)
[05:50:58] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 260 seconds)
[05:56:25] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[05:57:56] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[06:02:13] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[06:02:24] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 256 seconds)
[06:05:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:09:17] *** Quits: sm4ch (~savio@177.12.50.57) (Quit: Leaving)
[06:14:12] *** Quits: lilgopher (~textual@2601:241:8000:38f0:fc6d:baa:b0b5:9af8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:17:12] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:23:16] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 245 seconds)
[06:27:54] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 256 seconds)
[06:28:38] <hendry> i have some code that rips out a value from a complex and unfortunately *changing* JSON document. my code looks like foobar["sauce"].(string), and it panics when "sauce" is not there, so I am a little confused how to handle the situation.
[06:28:39] *** Joins: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25)
[06:30:16] <bpalmer> what do you mean by changing? IT's being modified concurrently?
[06:31:29] <bpalmer> But, in general, when a type assertion panics, you can just use a type case or a checked type assertion (ie., a type assertion in an assignment or initiation, with a second ok argument) instead.
[06:31:47] <bpalmer> you should only be doing an unchecked type assertion when you *know* what the type is.
[06:32:30] <foobaz> hendry: i suggest using the two-valued map lookup - sauce, ok = foobar["sauce"]
[06:33:15] <foobaz> if ok is true, continue to the type assertion, otherwise it's not there
[06:33:41] <foobaz> there is also a two-valued type assertion - sauceString, ok = sauce.(string)
[06:34:35] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[06:36:22] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:36:55] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[06:41:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[06:43:00] <hendry> oh, i didn't realise there was a two value return
[06:43:07] *** Joins: fikran (~fikran@user/fikran)
[06:43:34] <hendry> my ide doesn't tell me this ... hmm
[06:45:09] <bpalmer> https://golang.org/ref/spec
[06:47:02] <hendry> bpalmer: "A type assertion used in an assignment or initialization of the special form
[06:47:09] <hendry> I guess that's what I missed
[06:49:01] <bpalmer> hendry: there are two forms of two-valued assignment: one for checking presence in a map (which is what foobaz was suggesting), and one for checking if a type assertion worked (which is what I was suggesting).
[06:49:10] <bpalmer> Either, or both, might help in your case.
[06:50:29] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[06:52:30] <rewt> and you can't combine them into a three-valued assignment ;)
[06:52:50] <rewt> but that would be interesting
[07:05:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[07:09:20] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[07:11:59] *** Joins: moog (~moog@107.77.244.89)
[07:16:37] *** Quits: zwr (~zwr@2804:d45:b966:fb00:30:a6f4:bd2d:bb15) (Ping timeout: 240 seconds)
[07:17:29] *** Joins: zwr (~zwr@2804:d45:b966:fb00:ee25:c4a9:3503:c5f)
[07:18:36] <fizzie> You can do both in sequence, though, if you want to report/handle more detailed errors: https://go.dev/play/p/--rpOAJexSG
[07:22:54] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 250 seconds)
[07:23:11] *** Joins: darkapex (~darkapex@user/darkapex)
[07:25:32] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[07:29:13] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[07:30:04] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[07:32:31] *** Joins: mooff (mooff@awful.cooking)
[07:36:23] *** Joins: darkapex_ (~darkapex@user/darkapex)
[07:36:26] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 260 seconds)
[07:40:25] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:f851:b6e4:f403:23e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:43:08] *** Quits: moog (~moog@107.77.244.89) (Quit: Leaving)
[07:43:36] *** Joins: moog (~moog@107.77.244.89)
[07:45:32] *** Quits: moog (~moog@107.77.244.89) (Remote host closed the connection)
[07:48:27] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 250 seconds)
[07:48:56] *** Quits: sleepingforest (~sleepingf@user/sleepingforest) (Ping timeout: 256 seconds)
[07:56:54] *** Joins: defn (~n0b0dy@user/defn)
[08:02:41] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[08:09:49] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[08:10:03] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[08:17:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:20:06] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 256 seconds)
[08:21:23] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[08:25:26] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[08:32:42] *** Joins: andlabs (~andlabs@2604:ca00:17b:aee:487a:a593:1cb5:8eff)
[08:39:12] *** Quits: andlabs (~andlabs@2604:ca00:17b:aee:487a:a593:1cb5:8eff) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:40:04] *** Joins: andlabs (~andlabs@2604:ca00:17b:aee:e06b:c262:e13d:6432)
[08:44:14] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:aee:49a1:260f:2ae5:5077)
[08:45:00] *** Joins: andlabs__ (~andlabs@2604:ca00:17b:aee:21f1:b22d:2d0b:4186)
[08:47:25] *** Joins: andlab___ (~andlabs@64.9.251.153)
[08:47:50] *** Quits: andlabs (~andlabs@2604:ca00:17b:aee:e06b:c262:e13d:6432) (Ping timeout: 260 seconds)
[08:48:26] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 256 seconds)
[08:48:44] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:aee:49a1:260f:2ae5:5077) (Ping timeout: 268 seconds)
[08:49:59] *** Quits: andlabs__ (~andlabs@2604:ca00:17b:aee:21f1:b22d:2d0b:4186) (Ping timeout: 250 seconds)
[08:50:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:51:53] *** Quits: andlab___ (~andlabs@64.9.251.153) (Client Quit)
[08:52:27] *** Joins: fikran (~fikran@user/fikran)
[08:52:40] *** Joins: andlabs (~andlabs@2604:ca00:17b:aee:f0cd:fde9:d0e8:fd73)
[08:54:53] *** Quits: andlabs (~andlabs@2604:ca00:17b:aee:f0cd:fde9:d0e8:fd73) (Client Quit)
[08:55:49] *** Joins: andlabs (~andlabs@2604:ca00:17b:aee:6976:6afc:e26d:558d)
[08:56:42] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 260 seconds)
[08:58:47] *** Quits: andlabs (~andlabs@2604:ca00:17b:aee:6976:6afc:e26d:558d) (Client Quit)
[08:59:44] *** Joins: andlabs (~andlabs@2604:ca00:17b:aee:71c7:f495:32f4:aa2e)
[09:07:26] <mikoto-chan> how do I create a loop where I initialize a random non-unique number not bigger than n to an integer?
[09:07:45] *** Quits: henry40408 (~henry4040@211-74-79-252.adsl.dynamic.seed.net.tw) (Ping timeout: 250 seconds)
[09:08:16] *** Joins: henry40408 (~henry4040@175.181.179.43)
[09:08:32] <mikoto-chan> not necessarily cryptograpically random btw
[09:11:01] *** Joins: aLeSD (~aLeSD@139.47.114.114)
[09:14:32] <b0nn> sorry, can you expand on that; not really sure what you are wanting
[09:15:12] <mikoto-chan> okay, let me write some code for you
[09:15:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:16:30] <mikoto-chan>  unique* my bad
[09:16:36] <mikoto-chan> https://go.dev/play/p/JqlU08EBtiJ
[09:16:47] *** Quits: chovy (~chovy@tilde.club) (Remote host closed the connection)
[09:16:51] *** Quits: leonardo (~leonardo@user/leonardo) (Quit: WeeChat 3.3)
[09:19:39] <ikke> unique and random is kind of at odds
[09:19:58] <ikke> You can generate a list of numbers, shuffle them, and then consume that
[09:20:27] <bookworm> https://pkg.go.dev/math/rand#Intn too
[09:20:30] *** Quits: henry40408 (~henry4040@175.181.179.43) (Ping timeout: 260 seconds)
[09:20:35] *** Joins: lOOF2OOF (~lOOF2OOF@cpe-67-10-252-192.stx.res.rr.com)
[09:20:54] <ikke> https://pkg.go.dev/math/rand#Shuffle
[09:21:51] *** Joins: henry40408 (~henry4040@175.181.157.83)
[09:25:34] <b0nn> hmm is UUID on the table?
[09:26:34] *** Quits: henry40408 (~henry4040@175.181.157.83) (Ping timeout: 260 seconds)
[09:29:28] *** Quits: andlabs (~andlabs@2604:ca00:17b:aee:71c7:f495:32f4:aa2e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:29:34] *** Joins: henry40408 (~henry4040@175.181.156.210)
[09:30:18] *** Joins: chovy (chovy@tilde.club)
[09:30:23] *** Quits: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb) (Quit: Client limit exceeded: 20000)
[09:31:20] <bookworm> I mean that looks like a game where you want a random ball size or score.... so uuid is the wrong tool
[09:31:20] *** Quits: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e) (Quit: Client limit exceeded: 20000)
[09:31:25] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Quit: Client limit exceeded: 20000)
[09:31:32] *** Joins: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb)
[09:31:39] *** Quits: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69) (Quit: Client limit exceeded: 20000)
[09:32:29] *** Quits: astraad[m] (~astraadma@2001:470:69fc:105::1:4425) (Quit: Client limit exceeded: 20000)
[09:32:50] *** Quits: noobcake2465[m] (~noobcake2@2001:470:69fc:105::cced) (Quit: Client limit exceeded: 20000)
[09:33:55] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[09:36:03] *** Joins: henry404084 (~henry4040@175.182.109.236)
[09:36:36] *** Quits: henry40408 (~henry4040@175.181.156.210) (Ping timeout: 256 seconds)
[09:36:36] *** henry404084 is now known as henry40408
[09:47:10] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[09:47:59] *** Quits: normen (~normen@p200300d717306100217b024fc2139431.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:49:50] *** Joins: andlabs (~andlabs@70.107.171.168)
[09:50:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:51:49] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[09:55:24] <b0nn> UUID%6 :)
[09:55:37] *** Joins: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e)
[09:55:49] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[09:56:03] *** Joins: astraad[m] (~astraadma@2001:470:69fc:105::1:4425)
[09:56:03] *** Joins: noobcake2465[m] (~noobcake2@2001:470:69fc:105::cced)
[09:56:03] *** Quits: petoem (~petoem@user/petoem) (Quit: Client limit exceeded: 20000)
[09:56:15] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[09:56:56] *** Joins: mkopriva (~mkopriva@ip-78-45-72-123.net.upcbroadband.cz)
[09:57:31] *** Quits: darkskiez[m] (~darkskiez@2001:470:69fc:105::1:2a27) (Quit: Client limit exceeded: 20000)
[10:01:22] <j416> also uuid's are meant to be unique
[10:01:37] *** Joins: petoem (~petoem@user/petoem)
[10:01:51] *** Joins: darkskiez[m] (~darkskiez@2001:470:69fc:105::1:2a27)
[10:05:40] *** Joins: noord2 (~noord@user/noord)
[10:05:43] *** Quits: noord2 (~noord@user/noord) (Client Quit)
[10:09:39] *** Joins: normen (~normen@p200300d717306100412cecbaa6fc3a14.dip0.t-ipconnect.de)
[10:09:47] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[10:13:05] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[10:20:11] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 265 seconds)
[10:36:18] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[10:39:18] *** Joins: whaley (~whaley@2603-6080-a301-33d1-af0f-7bd6-e4db-239a.res6.spectrum.com)
[10:41:35] *** Joins: cskr (~cskr@49.207.208.25)
[10:45:55] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 252 seconds)
[10:46:41] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:49:55] *** Joins: menace (~someone@ppp-93-104-168-246.dynamic.mnet-online.de)
[10:50:21] *** Quits: menace (~someone@ppp-93-104-168-246.dynamic.mnet-online.de) (Changing host)
[10:50:21] *** Joins: menace (~someone@user/menace)
[10:50:25] *** menace is now known as Deknos
[10:56:18] *** Quits: mkopriva (~mkopriva@ip-78-45-72-123.net.upcbroadband.cz) ()
[10:59:51] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:00:09] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:00:43] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 268 seconds)
[11:01:15] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:01:47] *** Joins: fikran (~fikran@user/fikran)
[11:02:53] *** Quits: cskr (~cskr@49.207.208.25) (Quit: Leaving)
[11:03:58] *** Joins: anacrolix (~anacrolix@45.133.4.31)
[11:04:28] <anacrolix> Hello, I'm having an issue using a type set for a map key with 1.18 generics
[11:05:42] <seebs> what's the issue? i note that, if memory serves, any SPECIFIC map will have a key of a specific type, generics just let you describe a family of similar functions which use different types for their keys and all have the same name. :)
[11:05:43] <anacrolix> i have `type clientPieceRequestOrderKey interface {
[11:05:44] <anacrolix>  *Torrent | storage.TorrentCapacity
[11:05:44] <anacrolix> }` which I want to use a map key, but it gives me the error:
[11:05:45] <anacrolix> interface contains type constraints
[11:05:45] <anacrolix> at the point that the map is defined: pieceRequestOrder map[clientPieceRequestOrderKey]*request_strategy.PieceRequestOrder
[11:05:53] <seebs> yes
[11:05:56] *** Joins: cskr (~cskr@49.207.208.25)
[11:06:30] <seebs> you can't use type constraints as an interface in general, you need to have anything using that type have a [T clientPieceRequestOrderKey] qualifier on it, and then do map[T]..., and the map will have one specific one of those types
[11:06:33] <anacrolix> I believe my key type is an interface that only allows those 2 types, but it doesn't seem to like it
[11:07:05] <seebs> type constraints aren't general interfaces, they're interfaces usable for type qualifiers on generics
[11:07:09] <anacrolix> oh dear. I thought I spotted an Map[K,V] type in golang.org/x/exp/maps but it's no longer there
[11:07:55] <seebs> as i understand it, at this point, the only place type-constraint interfaces are allowed is inside the [typeDecl] part of a generic function, type, etc.
[11:08:09] <anacrolix> could I define a new type, wrapping a map for this?
[11:09:59] <seebs> I think the thing is, any *specific* map is going to be using exactly one key type.
[11:10:48] <seebs> You could make a type which can use/contain either of those two things, and use that as a key, but then your key comparisons have to be to constructed values of that type.
[11:11:11] <seebs> The underlying thing is, if you have two variables, and one is `*Torrent` and one is `storage.TorrentCapacity`, you can't have a single map in which those are both valid keys as such.
[11:11:20] <seebs> Because map keys are typed, and the types have to match.
[11:11:46] <seebs> If you make it an interface type, then you will accept anything at all that satisifies the interface, and type constraint interfaces aren't proper interfaces, really.
[11:11:51] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:12:04] <seebs> Because, fundamentally, the *goal* of this is specifically *not* to allow you to have "a map which accepts either of two types as its key".
[11:12:10] <seebs> A map has a single key type.
[11:12:52] <seebs> If it's an interface type, then there can be keys of that single interface type, with arbitrary and varied concrete types, and you can't restrict the concrete types to a specific set, because that violates the entire point of having an interface, which is anything's allowed to come along and satisfy that interface.
[11:12:55] <anacrolix> I think I follow. So a type set actually requires you to pick a type at compile time, it doesn't just accept any of those?
[11:13:13] <seebs> Any individual instance of it being used will have a type picked at compile time.
[11:13:24] <seebs> It's not a sum type/tagged union/whatever we want to call that.
[11:13:50] <anacrolix> I could pass a map[*Torrent]V to a function accepting a map[clientPieceRequestOrderKey]V?
[11:13:53] <seebs> It's a way of saying "I want this same function to exist for both of these types" with less typing and cut and paste errors.
[11:14:02] <seebs> sort of
[11:14:23] <anacrolix> Sounds like I'll have to go with map[interface{}]V after all?
[11:14:28] <seebs> if you had a func[T clientPieceRequestOrderKey]DoSomething(m map[T]V) {...}
[11:15:05] <seebs> then there would in fact be *two different* DoSomething() functions, one for each type, and if you passed a map[*Torrent]V to an unqualified reference to the function, you'd get the one for *Torrent.
[11:15:25] <seebs> And if you passed a map[storage.TorrentCapacity]V to the same function name, you'd get an actually-different function which operated on that.
[11:15:39] <seebs> It doesn't have to be map[interface{}].
[11:15:47] <seebs> You can define an interface which those two things satisfy, and most things don't.
[11:15:59] <seebs> You just don't have a way to *guarantee* that no future type created will satisfy that interface.
[11:18:18] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:19:33] *** Joins: rcernin (~rcernin@101.189.144.104)
[11:19:53] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:21:19] <anacrolix> Thanks. I only need the key to match map's key requirements, adn for *Torrent and *storage.TorrentCapacity's to never match each other. I think that would be the default behaviour if they're stuffed in to an interface{}
[11:25:22] *** Quits: rcernin (~rcernin@101.189.144.104) (Ping timeout: 268 seconds)
[11:25:48] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[11:26:03] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[11:26:27] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[11:26:27] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:26:34] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[11:27:53] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[11:28:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:31:09] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[11:31:43] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 265 seconds)
[11:32:59] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[11:34:05] *** Joins: arinov (~arinov@213.194.126.155)
[11:35:55] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[11:36:59] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:38:07] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[11:39:51] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8)
[11:40:37] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:42:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:42:50] *** Joins: leonardo (~leonardo@user/leonardo)
[11:43:06] *** Joins: carlavilla (~carlavill@2a0c:5a84:3407:5100:221:6bff:fe3b:cee4)
[11:43:46] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Ping timeout: 260 seconds)
[11:44:32] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8) (Ping timeout: 240 seconds)
[11:44:43] *** Quits: cskr (~cskr@49.207.208.25) (Quit: Leaving)
[11:47:46] *** Joins: andreisamoila (~andreisam@188.27.129.202)
[11:51:17] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e)
[11:52:12] *** Joins: cskr (~cskr@49.207.208.25)
[11:53:21] *** Joins: mrig (~AdiIRC@user/mrig)
[11:53:23] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:53:34] *** Quits: whaley (~whaley@2603-6080-a301-33d1-af0f-7bd6-e4db-239a.res6.spectrum.com) (Ping timeout: 260 seconds)
[11:56:59] *** Joins: jla (~jordi@64.225.79.195)
[11:58:32] *** Joins: shtirlic_ (~shtirlic@ppp92-100-105-231.pppoe.avangarddsl.ru)
[12:00:06] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[12:00:34] *** Quits: shtirlic (~shtirlic@95-55-27-245.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[12:01:06] *** imm__ is now known as imm_
[12:03:11] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[12:03:29] *** Quits: shtirlic_ (~shtirlic@ppp92-100-105-231.pppoe.avangarddsl.ru) (Ping timeout: 250 seconds)
[12:03:31] *** Joins: shtirlic (~shtirlic@178.71.162.187)
[12:08:15] *** Joins: jjido (~Denis@90.213.58.125)
[12:10:18] *** Joins: rendar (~rendar@user/rendar)
[12:11:38] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:13:36] *** Quits: cskr (~cskr@49.207.208.25) (Quit: Leaving)
[12:21:59] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 256 seconds)
[12:22:47] *** Joins: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de)
[12:27:18] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690)
[12:28:37] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8)
[12:31:51] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690) (Ping timeout: 250 seconds)
[12:33:42] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8) (Ping timeout: 260 seconds)
[12:35:03] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 268 seconds)
[12:47:25] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:51:46] *** Quits: lOOF2OOF (~lOOF2OOF@cpe-67-10-252-192.stx.res.rr.com) (Quit: Client closed)
[12:52:37] *** Joins: shka (~herr@109.231.0.226)
[12:53:05] *** Joins: Atque (~Atque@user/atque)
[12:54:03] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8)
[12:58:25] *** Parts: mickey8 (~user@user/mickey) ()
[12:58:34] *** Joins: rendar (~rendar@user/rendar)
[12:58:57] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8) (Ping timeout: 250 seconds)
[13:01:20] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690)
[13:06:42] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (Read error: Connection reset by peer)
[13:07:07] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690) (Ping timeout: 268 seconds)
[13:08:07] *** Parts: jla (~jordi@64.225.79.195) ()
[13:08:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:11:07] *** Joins: fikran (~fikran@user/fikran)
[13:14:31] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 268 seconds)
[13:28:38] *** Joins: rendar (~rendar@user/rendar)
[13:44:45] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690)
[13:49:03] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[13:50:52] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8)
[13:52:29] *** Joins: krux02 (~krux02@194.8.199.29)
[13:54:55] <sobukus> For reasons, I'm trying to bootstrap a VM to build singularity containers in … installed debian 11 in qemu, trying to build go1.17.4. That fails in the tests. Is that to be expected? Debian has go1.15.
[13:55:17] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690) (Ping timeout: 250 seconds)
[13:55:20] <sobukus>  FAIL: testdata/script/test_relative_import.txt:7: test timed out while running command   panic: test timed out after 9m0s   ← things like that
[13:56:40] <sobukus> I got FAIL    cmd/go  586.732s out of that, but lots of others are OK. I wonder if the failures are spurious in this VM without KVM acceleration. (The point is that users do not get any special permissions and hence need VM to get root)
[13:57:04] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8) (Ping timeout: 268 seconds)
[13:57:36] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[13:59:57] <sobukus> I wonder if I could just build without the tests and things would be fine? I just want to build singularity with this to create containers (not even run them).
[14:20:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:44:34] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690)
[14:45:39] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[14:47:01] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 240 seconds)
[14:49:29] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690) (Ping timeout: 268 seconds)
[14:50:44] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690)
[14:51:07] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[14:52:34] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e) (Quit: Leaving)
[14:55:02] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 268 seconds)
[14:56:49] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[15:01:10] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690) (Ping timeout: 260 seconds)
[15:02:29] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Quit: WeeChat 2.8)
[15:03:02] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 260 seconds)
[15:03:32] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 240 seconds)
[15:05:02] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[15:06:49] *** Joins: mickey8 (~user@user/mickey)
[15:07:45] <mickey8> is it possible to convert a variable's name to string? like hello := 6; then have somehow derive "hello" out of hello's variable name?
[15:10:18] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:49a2:b187:a83c:8b86)
[15:11:08] *** Joins: darkapex (~darkapex@user/darkapex)
[15:11:45] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 250 seconds)
[15:14:10] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[15:14:52] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e)
[15:15:11] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[15:16:36] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Ping timeout: 256 seconds)
[15:16:42] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e) (Remote host closed the connection)
[15:17:31] <ikke> I don't think it's possible
[15:18:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[15:18:24] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[15:20:17] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e)
[15:20:27] *** Joins: fikran (~fikran@user/fikran)
[15:26:25] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[15:30:49] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 252 seconds)
[15:32:25] *** Joins: rendar (~rendar@user/rendar)
[15:34:30] *** Quits: Carbon_Monoxide (~antony@2a02:8109:9cc0:1471:2798:be54:ea3b:71b0) (Ping timeout: 268 seconds)
[15:38:44] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[15:40:44] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e) (Remote host closed the connection)
[15:40:58] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e)
[15:48:24] *** Joins: rcernin_ (~rcernin@101.189.144.104)
[15:52:13] <chilversc> Doing some testing with `httptest.NewTLSServer` and for one of my tests I need the server certificate in PEM format. I can't see anyway to do this short of creating my own certificate or copy/pasting the cert from "net/http/internal/testcert" ?
[15:53:33] <chilversc> I thought maybe I could just take `server.Certificate()` and encode that as PEM, but there does not be any simple way to encode an x509.Certificate
[15:58:21] *** Quits: rcernin_ (~rcernin@101.189.144.104) (Ping timeout: 250 seconds)
[16:04:26] <KirkMcDonald> chilversc: encoding/pem is a thing, but I couldn't tell you exactly how best to get from A to B without some additional poking at the problem.
[16:05:13] <KirkMcDonald> Make a pem.Block, assign cert.Raw into block.Bytes...
[16:06:04] <KirkMcDonald> But there's other bits to put in there and I'm not sure on how best to do that, and it really seems like this should be a function that exists somewhere.
[16:08:48] <KirkMcDonald> Hmm, it may be that you *don't* need more than that.
[16:11:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:11:53] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[16:13:08] <chilversc> Looking at generate_cert.go it might be possible to pull various parts out of the certificate and call x509.CreateCertificate again https://cs.opensource.google/go/go/+/refs/tags/go1.17.5:src/crypto/tls/generate_cert.go;l=140
[16:13:55] <chilversc> though I think I'm just going to create my own certs for the tests, seems simpler. Also realised I need a cert without a SAN that relies on the older CN for some legacy systems
[16:16:57] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:17:26] *** Quits: anacrolix (~anacrolix@45.133.4.31) (Quit: Client closed)
[16:18:48] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[16:19:21] *** Joins: moog (~moog@107.126.53.121)
[16:23:30] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690)
[16:25:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:25:23] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[16:26:21] *** Quits: moog (~moog@107.126.53.121) (Remote host closed the connection)
[16:29:02] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[16:32:34] *** Joins: moog (~moog@107.126.53.121)
[16:33:01] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690) (Ping timeout: 250 seconds)
[16:37:38] *** Joins: Carbon_Monoxide (~antony@2a02:8109:9cc0:1471:2798:be54:ea3b:71b0)
[16:45:16] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:47:37] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8)
[16:54:47] *** Quits: Carbon_Monoxide (~antony@2a02:8109:9cc0:1471:2798:be54:ea3b:71b0) (Ping timeout: 252 seconds)
[16:54:53] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e) (Ping timeout: 250 seconds)
[16:55:33] *** Joins: marlinc_ (~marlinc@user/marlinc)
[16:55:46] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 256 seconds)
[16:59:42] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 260 seconds)
[17:02:42] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:790e:abbb:b1c0:d5b8) (Ping timeout: 268 seconds)
[17:13:02] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[17:16:59] *** Joins: Carbon_Monoxide (~antony@2a02:8109:9cc0:1471:2798:be54:ea3b:71b0)
[17:18:20] *** Joins: pepee (~pepee@user/pepee)
[17:19:31] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[17:24:08] *** Quits: andreisamoila (~andreisam@188.27.129.202) (Remote host closed the connection)
[17:25:21] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[17:25:59] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[17:27:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[17:29:47] *** Joins: fikran (~fikran@user/fikran)
[17:35:18] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[17:37:05] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:38:12] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:39:28] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[17:40:40] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[17:40:56] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:49a2:b187:a83c:8b86) (Ping timeout: 268 seconds)
[17:44:12] *** Joins: mrig (~mrig@user/mrig)
[17:45:30] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:46:15] *** Quits: normen (~normen@p200300d717306100412cecbaa6fc3a14.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:47:14] *** Quits: jjido (~Denis@90.213.58.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:49:30] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 250 seconds)
[17:50:43] <chilversc> I can't figure out where these logs are coming from, and how to surpress them? 2021/12/10 14:15:25 http: TLS handshake error from 127.0.0.1:40578: remote error: tls: bad certificate
[17:53:13] <chilversc> it's not actually an error, as the handshake still completes and the http GET request returns the server response
[17:59:21] *** Joins: goldfish (~goldfish@user/goldfish)
[18:01:31] *** Joins: neverfindme (~hayden@158.123.160.43)
[18:05:07] *** Joins: egm (~egm@user/egm)
[18:09:22] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[18:12:29] *** Joins: normen (~normen@p200300d717306100412cecbaa6fc3a14.dip0.t-ipconnect.de)
[18:17:39] *** Quits: normen (~normen@p200300d717306100412cecbaa6fc3a14.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:18:16] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[18:29:10] *** Quits: egm (~egm@user/egm) (Quit: leaving)
[18:30:58] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[18:31:31] *** Quits: Carbon_Monoxide (~antony@2a02:8109:9cc0:1471:2798:be54:ea3b:71b0) (Ping timeout: 250 seconds)
[18:31:40] *** Joins: normen (~normen@p200300d717306100412cecbaa6fc3a14.dip0.t-ipconnect.de)
[18:32:27] *** Joins: egm (~egm@user/egm)
[18:32:50] <chilversc> just attached a debugger, doesn't seem to be any way to suppress that message, it's coming from net/http.conn.serv -> net/http.conn.logf
[18:33:18] <chilversc> and the standard golang logger doesn't have any concept of things like packages or labels or any other way to disable the logs from a specific component
[18:33:24] *** Quits: egm (~egm@user/egm) (Client Quit)
[18:36:36] *** Joins: itsonlybinary (~iob@itsonlybinary.com)
[18:37:46] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[18:37:57] *** Joins: Carbon_Monoxide (~antony@2a02:8109:9cc0:1471:2798:be54:ea3b:71b0)
[18:38:27] *** Joins: egm (~egm@user/egm)
[18:38:29] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[18:43:13] *** Quits: OnkelUlla (~uol@ptx.hi.pengutronix.de) (Remote host closed the connection)
[18:46:34] <rawtaz> just a curious question: is anyone here using https://encore.dev / https://github.com/encoredev/encore and would be so kind to sum up what theyre using it for and what they think/link/dont like with it? :)
[18:48:46] *** Quits: Carbon_Monoxide (~antony@2a02:8109:9cc0:1471:2798:be54:ea3b:71b0) (Ping timeout: 268 seconds)
[18:55:27] <ewintr> Never heard of it, but I am always very skeptical of attempts to combat complexity by means of adding yet another framework.
[18:56:28] <rawtaz> makes sense :)
[18:57:16] <rawtaz> i only learnt about it a couple of days ago when listening to https://softwareengineeringdaily.com/2021/12/06/building-go-apps-using-encore/
[18:57:35] <rawtaz> sounded nice, but indeed one has to understand the use case and implications of using it
[19:01:43] *** Quits: egm (~egm@user/egm) (Ping timeout: 268 seconds)
[19:02:18] *** Joins: egm (~egm@user/egm)
[19:05:30] *** Joins: lilgopher (~textual@2601:241:8000:38f0:fc6d:baa:b0b5:9af8)
[19:07:25] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[19:07:33] *** Joins: christophergray (~christoph@190.148.51.17)
[19:08:03] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[19:10:54] *** Joins: Carbon_Monoxide (~antony@2a02:8109:9cc0:1471:2798:be54:ea3b:71b0)
[19:12:51] *** Joins: rendar (~rendar@user/rendar)
[19:12:54] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[19:14:49] *** Joins: nikos (~nikos@104.248.205.38)
[19:15:17] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 268 seconds)
[19:15:53] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 268 seconds)
[19:16:22] <nikos> Is there a way to make a struct member non-exported with the asn1 package? http://paste.debian.net/1222919/ e.g.
[19:16:49] <nikos> This fails because uint32 is not supported in asn1, however I don't want the member to be exported at all(so type shouldn't matter), how can I achieve that
[19:17:30] <nikos> The `asn1:"-"` tag doesn't appear to have any effect
[19:18:19] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 250 seconds)
[19:21:26] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:21:26] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[19:21:43] *** Joins: neverfindme (~hayden@158.123.160.43)
[19:23:52] <chilversc> well this is getting weird, I get the error message logged about a bad certificate when I run a whole suite of tests, but when I run the individual test that is causing the error there's nothing
[19:26:31] *** Joins: sleepingforest (~sleepingf@pool-74-98-255-220.pitbpa.fios.verizon.net)
[19:30:31] *** Quits: nikos (~nikos@104.248.205.38) (Quit: "Quit")
[19:31:04] *** Joins: nikos (~nikos@104.248.205.38)
[19:32:10] *** Quits: krux02 (~krux02@194.8.199.29) (Remote host closed the connection)
[19:32:44] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[19:37:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:39:03] *** Quits: christophergray (~christoph@190.148.51.17) (Quit: WeeChat 3.3)
[19:39:07] *** Joins: fikran (~fikran@user/fikran)
[19:44:07] *** Quits: egm (~egm@user/egm) (Ping timeout: 250 seconds)
[19:45:11] *** Joins: egm (~egm@user/egm)
[19:49:05] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:49:10] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Ping timeout: 256 seconds)
[19:52:59] *** Joins: andreisamoila (~andreisam@188.27.129.202)
[19:56:35] <sobukus> Can anyone make sense out of this build failure? https://pastebin.com/KXHciLa3 This is trying to build go1.17.4 inside a debian 11 VM with qemu, NOT using KVM, so likely a bit slow.
[19:56:44] <sobukus> It has 4 cores and 8G RAM.
[19:57:30] *** Quits: andreisamoila (~andreisam@188.27.129.202) (Ping timeout: 260 seconds)
[19:58:22] *** Quits: ziofork (~ziofork@fr.worn.eu) (Quit: The Lounge - https://thelounge.chat)
[19:58:25] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[19:58:58] *** Joins: ziofork (~ziofork@fr.worn.eu)
[19:59:26] <seebs> i don't know what you're building/running, but i think the first step would be to try to run a much smaller subset of tests and find out whether there's a specific subset that fails.
[20:00:29] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690)
[20:01:31] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[20:04:58] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690) (Ping timeout: 260 seconds)
[20:13:33] <sobukus> seebs: I am trying to build golang itself.
[20:13:50] <fizzie> "panic: test timed out after 9m0s" sounds like a plain timeout.
[20:14:12] <sobukus> I wonder if that's due to a deadlock or just some CPU slowness … it must be a deadlock, no?
[20:14:32] <sobukus> This is 4 cores in qemu software mode (non-kvm) on a Haswell Xeon.
[20:15:01] <sobukus> Alternatively, can I easily raise those timeouts to a ridiculous amount to test over the weekend?
[20:15:07] <fizzie> I mean, from the output right before, it looks like it's making progress fine.
[20:15:19] <sobukus> That is what puzzles me;-)
[20:15:51] <fizzie> But the timeout is for the whole test invocation, so if it sums up to too long, it'll barf.
[20:15:56] <sobukus> Ah!
[20:16:26] <sobukus> So all the backtrace noise is only a followup of the timeout killing things?
[20:16:33] <fizzie> That's what it looks like to me.
[20:16:46] <fizzie> As for how to bump it up... it's normally a `go test -timeout=1h` style flag, but I'm not sure where you'd stick it if it's part of building the Go distribution itself.
[20:18:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[20:19:20] <fizzie> I sort of suspect the 9 minute timeout's coming hardcoded from the code: https://cs.opensource.google/go/go/+/master:src/cmd/dist/test.go;l=363;drc=0eb39ca1f0ca118e78648fb6844d35d0a96e5eee
[20:19:39] <fizzie> (180 seconds, *= 3 for including "cmd/go" in it.)
[20:19:48] <fizzie> (That's a bit arbitrary.)
[20:20:04] <fizzie> Heh, there's a "Special case for our slow cross-compiled qemu builders".
[20:20:36] <sobukus> Heh.
[20:21:37] <sobukus> Precompiled tests?1
[20:22:46] <sobukus> So when I raise timeoutSec here in the local sources, it should apply when I run all.bash, right?
[20:23:13] * sobukus tries with 1800
[20:24:41] <sobukus> So perhaps this should be runtime-scaled on some microbenchmark/better heuristic?
[20:28:18] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Ping timeout: 260 seconds)
[20:30:57] *** Joins: jjonah (~jjonah@p200300d5d7149500dea632fffeb3342f.dip0.t-ipconnect.de)
[20:31:48] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[20:32:32] *** Quits: jjonah (~jjonah@p200300d5d7149500dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:35:53] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Reconnecting)
[20:36:10] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[20:36:46] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Client Quit)
[20:37:02] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[20:37:15] *** hayaliali is now known as alip
[20:41:13] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Client Quit)
[20:41:29] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[20:47:19] *** Joins: normen_ (~normen@p200300d71730610070f332d95e56775b.dip0.t-ipconnect.de)
[20:47:26] *** Joins: akelly (24aca7a63b@2604:bf00:561:2000::152)
[20:48:52] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[20:49:36] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-39ba-7f72-5ad6-ef5a.res6.spectrum.com)
[20:50:14] *** Quits: normen (~normen@p200300d717306100412cecbaa6fc3a14.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[20:50:17] *** normen_ is now known as normen
[20:50:31] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[20:51:49] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[20:53:18] *** Joins: jjonah (~jjonah@p200300d5d7149500dea632fffeb3342f.dip0.t-ipconnect.de)
[20:54:04] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[20:54:05] *** Joins: nexgen2 (~nexgen@li614-178.members.linode.com)
[20:54:15] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Client Quit)
[20:54:27] *** Quits: nexgen2 (~nexgen@li614-178.members.linode.com) (Remote host closed the connection)
[20:54:41] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[20:55:58] *** Quits: jjonah (~jjonah@p200300d5d7149500dea632fffeb3342f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:56:23] *** Joins: jjonah (~jjonah@p200300d5d7149500dea632fffeb3342f.dip0.t-ipconnect.de)
[20:58:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-39ba-7f72-5ad6-ef5a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:02:23] *** Quits: Guest66 (~textual@98.13.6.21) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:04:57] *** Joins: Guest66 (~textual@98.13.6.21)
[21:05:07] *** Quits: Guest66 (~textual@98.13.6.21) (Client Quit)
[21:06:28] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:07:48] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:07:50] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[21:15:45] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Ping timeout: 250 seconds)
[21:15:57] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-39ba-7f72-5ad6-ef5a.res6.spectrum.com)
[21:16:34] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Quit: Leaving)
[21:16:54] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[21:18:12] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:19:36] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Read error: Connection reset by peer)
[21:19:50] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[21:22:49] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Read error: Connection reset by peer)
[21:23:05] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[21:24:37] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[21:24:51] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 250 seconds)
[21:25:51] *** Joins: andlabs (~andlabs@2604:ca00:17b:aee:751a:55ba:9c76:f7e4)
[21:29:21] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[21:29:50] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Remote host closed the connection)
[21:30:17] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[21:31:34] <dostoyevsky2> I build my code with <<go build -ldflags='-w -s' app.go>> -- but it still has all the function names when showing a stack trace with fmt.Fatal()
[21:35:29] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:39:26] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:40:34] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[21:41:41] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[21:46:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[21:48:28] *** Joins: fikran (~fikran@user/fikran)
[21:48:37] *** Joins: rendar (~rendar@user/rendar)
[21:48:47] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690)
[21:51:06] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (Remote host closed the connection)
[21:51:30] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[21:53:27] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:3c39:6d91:d222:c690) (Ping timeout: 250 seconds)
[21:58:03] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:aee:4040:e161:e3d4:ea98)
[22:01:19] *** Quits: andlabs (~andlabs@2604:ca00:17b:aee:751a:55ba:9c76:f7e4) (Ping timeout: 252 seconds)
[22:10:21] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[22:12:29] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (Remote host closed the connection)
[22:14:01] *** Joins: andlabs (~andlabs@2604:ca00:17b:aee:8d5f:4c:1350:d4ac)
[22:14:48] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[22:17:27] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:aee:4040:e161:e3d4:ea98) (Ping timeout: 252 seconds)
[22:18:22] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[22:18:57] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[22:24:23] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:24:52] *** Joins: andlabs_ (~andlabs@64.9.251.153)
[22:25:03] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:27:02] *** Quits: andlabs_ (~andlabs@64.9.251.153) (Read error: Connection reset by peer)
[22:27:15] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (Quit: Leaving)
[22:27:21] *** Joins: andlabs_ (~andlabs@2604:ca00:17b:aee:f580:da72:eae:1d46)
[22:27:33] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[22:28:14] *** Quits: andlabs (~andlabs@2604:ca00:17b:aee:8d5f:4c:1350:d4ac) (Ping timeout: 260 seconds)
[22:30:19] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:31:58] *** Quits: shtirlic (~shtirlic@178.71.162.187) (Ping timeout: 260 seconds)
[22:40:55] *** Quits: andlabs_ (~andlabs@2604:ca00:17b:aee:f580:da72:eae:1d46) (Ping timeout: 252 seconds)
[22:46:18] *** Joins: krux02 (~krux02@p200300e817365e0034cc1bc883b75341.dip0.t-ipconnect.de)
[22:54:34] *** Joins: darkstarx (~darkstard@50.39.115.145)
[22:55:40] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[22:56:03] *** Joins: darkstarx (~darkstard@50.39.115.145)
[22:57:50] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:13:46] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[23:16:13] *** Parts: fossdd (~fossdd@sourcehut/user/fossdd) ()
[23:21:50] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:894e:5a46:7f60:aedc)
[23:23:13] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:23:58] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[23:24:00] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[23:24:53] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[23:38:24] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[23:38:52] *** Quits: Lost (cold@user/lost) (Quit: .)
[23:39:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-39ba-7f72-5ad6-ef5a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:39:49] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5f4:4ff8:33c2:92ba)
[23:40:53] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:41:48] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:43:45] *** Joins: MrFantastik (~f@2607:f598:bbda:3d0:7fa7:e568:7da5:26dd)
[23:55:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[23:57:48] *** Joins: fikran (~fikran@user/fikran)
