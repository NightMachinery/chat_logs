[00:09:40] *** Quits: andreyorst[erc] (~andreyors@2.92.124.61) (Ping timeout: 240 seconds)
[00:11:52] *** Quits: lidenbrock (~lidenbroc@2804:14c:32:8120:f87e:d703:28f7:d286) (Quit: Client closed)
[00:37:58] *** Joins: sickill4 (~sickill@84.214.66.166)
[00:39:47] *** Quits: sickill (~sickill@84.214.66.166) (Ping timeout: 240 seconds)
[00:39:47] *** sickill4 is now known as sickill
[00:48:24] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:57:24] *** Quits: natrys (~natrys@user/natrys) (Quit: natrys)
[01:09:45] *** Joins: ur5us (~ur5us@203.86.198.200)
[01:33:26] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-39.prtc.net)
[01:40:03] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[01:42:34] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (Ping timeout: 240 seconds)
[01:43:49] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[01:51:01] *** Joins: inoas (~ionas@aftr-37-201-194-213.unity-media.net)
[02:01:38] *** Joins: Guest7979 (~Guest79@p200300c8cf22760010de3870a841b4a9.dip0.t-ipconnect.de)
[02:02:40] <Guest7979> Hey guys, quick question: if i have a /dashboard that many users have access to, and they can edit things like Posts via the url /dashboard/posts/:id/edit, should i use an :integer or :uuid for the :id?
[02:03:18] *** Quits: inoas (~ionas@aftr-37-201-194-213.unity-media.net) (Remote host closed the connection)
[02:04:26] <Guest7979> i should say that the page will of course be authorized (so users won't be able to change the id in the url to a post they didn't create)
[02:06:50] <rawtaz> doesnt matter for the users, matters for how you architect the app
[02:07:30] <rawtaz> integer IDs have some limitations and potential issues down the road, but are simpler and works fine for many common use cases
[02:08:45] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-39.prtc.net) (Quit: Client closed)
[02:09:01] *** Quits: havenwood (~havenwood@about/ruby/havenwood) (Quit: The Lounge - https://thelounge.chat)
[02:09:11] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 250 seconds)
[02:09:45] *** Joins: havenwood (~havenwood@about/ruby/havenwood)
[02:10:24] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-134.prtc.net)
[02:19:48] *** Joins: inoas (~ionas@aftr-37-201-194-213.unity-media.net)
[02:20:25] <inoas> Guest7979: should people be able to guess the auto increment value (int)? do you need to do some distributed record creation (uuid)
[02:21:13] <inoas> I tend to use uppercase underscored identifiers for records in backend applications so people know what is what, still using a surrogate uuid though, maybe I shouldnt and just use the identifier as a primary/foreign key
[02:30:49] <rawtaz> it should be fine if people guess the IDs, the app shouldnt have a problem with that
[02:30:57] <rawtaz> i mean from a security perspective
[02:31:45] <inoas> yes but the auto increment value also tells something about the app state that you cannot hide unless you use some non numeric pk
[02:32:11] <inoas> like a gapless increasing invoice number which tells your customers how many orders you do if they order once in a while
[02:34:06] <rawtaz> thats why i have a separate invoice number series for each of my customers, so they cant noodle around in such information
[02:34:24] <rawtaz> but that type of use case is practically it. security shouldnt be a matter
[02:34:56] <inoas> in Germany while it is allowed to have ring numbers and gaps by law (just needs to be increasing and unique) the german IRS doesn't believe you and inspects you if they are not gapless :/
[02:42:57] <rawtaz> well each individual series for my customers (one per customer) has an alphabetic prefix, e.g. CUSTOMERNAME- and then the numbers after htat are consecutive. since separate number series are allowed here, theres no way for anyone to say that there are non-unique numbers or that theyre gaping.
[02:43:06] <rawtaz> wouldnt that work in germany too?
[02:44:26] <rawtaz> i guess youre saying that if you have the prefix 1 for one customer's number series and prefix 2 for another customer, the IRS would say that they are in the same series and has a huge gap in them?
[02:54:03] <inoas> while that would work it looks like you have a very few invoices (per customer, unless obviously there are a lot per customer) - but I will have to ask my tax accountant if that would be legit
[02:54:35] <inoas> right now I just picked some pseudo random offset like 146801 and went from there
[02:55:24] <inoas> anyway, the benefit of integer ids is that they are kind of human friendly for small systems (aka not facebook) and do not require human readable crafted primary keys (such as unique string identifiers) 
[02:55:36] <inoas> @Guest7979 
[02:56:12] <inoas> And the benefit of UUIDs is that it allows master master replication (IMHO)
[02:56:31] <Guest7979> thanks for the input guys, so if im building something like a blogging system / ecommerce platform, you would recommend uuid?
[02:56:37] <inoas> and non-guessability of the size of record sets and the growth of record sets
[02:56:50] <inoas> Guest7979: for orders for instance, yes
[02:56:57] <inoas> for things like products, maybe IDs are better
[02:57:08] <inoas> IDs = integer ids
[03:00:30] <inoas> (as a side note generally you can also use ring numbers and auto increment, at least mariadb lets you do that, if you wanted multiple masters to run) / I would look on the web or sql channels such as #maria #postgresql #sql 
[03:04:01] <rawtaz> inoas: not sure what you mean. every customer only sees the number of invoices that they themselves generated. they have no idea if i in total in my company only have two other invoices for other customers or if i have tens of thousands other invoices for other customers.
[03:04:24] <rawtaz> so its the opposite of what you said - it does *not* look like i have few invoices :)
[03:04:45] <inoas> yes but to them it looks like small number unless they know their invoice numbers are linked to them
[03:04:47] <inoas> anyway
[03:05:03] <inoas> it will probably not be approved by my tax accountant
[03:05:17] <inoas> back to learning elixir ... enough about macros for now :)
[03:07:00] <rawtaz> inoas: they obviously know that their invoices are linked to them if you use alphabetical prefixes, and if you use a numberic prefix then they will even less know that/if there are few invoices. i really dont understand your logic
[03:07:06] <rawtaz> sure, back to elixir
[03:07:16] <rawtaz> or in my case the tellie :P
[03:07:47] <inoas> I am rewatching Master of None in the background ... I need to stop that distraction :D
[03:07:50] <inoas> bbl
[03:08:04] * rawtaz ucks Master of None
[03:08:05] <rawtaz> +d
[03:16:46] <inoas> whatever ducking means in that context :D
[03:16:58] <inoas> I wouldn't have thought this worked, but it does: myfun = fn (1, b) -> b; (2, d) -> 2 * d end
[03:17:48] <inoas> are there any really useful applications? just polymorphic anon functions?
[03:27:13] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-134.prtc.net) (Quit: Client closed)
[03:29:47] *** Joins: elf_fortrezz (~elf_fortr@adsl-72-50-6-134.prtc.net)
[03:31:42] <rawtaz> hah thats cool :>
[03:31:47] *** Quits: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 240 seconds)
[03:31:50] *** Quits: elf_fortrezz (~elf_fortr@adsl-72-50-6-134.prtc.net) (Client Quit)
[03:32:00] *** Quits: hoppity (~user@user/hoppity) (Remote host closed the connection)
[03:32:28] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-134.prtc.net)
[03:42:06] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-134.prtc.net) (Quit: Client closed)
[03:46:43] *** Quits: srfsh (~srfsh@user/srfsh) (Ping timeout: 244 seconds)
[03:47:01] *** Joins: srfsh (~srfsh@user/srfsh)
[03:49:41] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:50:40] *** Joins: flynn (~mcbloch@user/flynn)
[03:59:50] *** Joins: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[04:10:47] *** Quits: inoas (~ionas@aftr-37-201-194-213.unity-media.net) (Remote host closed the connection)
[04:18:48] *** Quits: Guest7979 (~Guest79@p200300c8cf22760010de3870a841b4a9.dip0.t-ipconnect.de) (Quit: Client closed)
[04:36:50] *** Joins: manjaro-user (~manjaro-u@102.129.145.49)
[05:13:47] *** Quits: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 250 seconds)
[05:20:07] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 240 seconds)
[05:22:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:c9dc:bc90:bb09:b67b) (Ping timeout: 240 seconds)
[05:26:52] *** Joins: humbertowoody (~humbertow@187.202.253.37)
[05:33:26] *** Joins: henry40408 (~henry4040@112-105-246-24.adsl.dynamic.seed.net.tw)
[05:40:10] *** Quits: humbertowoody (~humbertow@187.202.253.37) (Ping timeout: 240 seconds)
[05:40:53] *** Quits: mathsaey (~mathsaey@user/mathsaey) (Ping timeout: 252 seconds)
[05:46:05] *** Joins: mathsaey (~mathsaey@user/mathsaey)
[05:48:17] *** Joins: ur5us (~ur5us@203.86.198.200)
[06:04:07] *** Quits: brauliobz (~manjaro-u@user/brauliobz) (Ping timeout: 240 seconds)
[06:09:18] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:7807:14e0:51ec:23dd)
[06:13:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:7807:14e0:51ec:23dd) (Ping timeout: 240 seconds)
[06:24:44] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[06:26:33] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[06:29:32] *** Joins: notzmv (~zmv@user/notzmv)
[06:49:18] *** notzmv is now known as zimmybot
[06:49:25] *** zimmybot is now known as notzmv
[07:25:29] *** Quits: mahmutov (~mahmutov@37.155.47.113) (Ping timeout: 248 seconds)
[07:52:03] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[07:56:00] *** Joins: notzmv (~zmv@user/notzmv)
[07:56:10] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[07:57:52] *** Joins: notzmv (~zmv@user/notzmv)
[08:01:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[08:09:16] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-12.prtc.net)
[08:11:18] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[08:18:34] *** Joins: holmes (~holmes@user/holmes)
[08:25:57] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[08:30:50] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[08:44:07] *** Quits: manjaro-user (~manjaro-u@102.129.145.49) (Ping timeout: 240 seconds)
[09:22:47] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 240 seconds)
[09:22:49] *** Quits: holmes (~holmes@user/holmes) (Quit: Textual IRC Client: www.textualapp.com)
[09:24:52] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[09:27:11] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[09:34:39] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-12.prtc.net) (Quit: Client closed)
[09:53:13] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 252 seconds)
[10:04:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[10:15:41] *** Quits: srfsh (~srfsh@user/srfsh) (Remote host closed the connection)
[10:15:52] *** Joins: srfsh (~srfsh@user/srfsh)
[10:33:12] *** Joins: [deleted] (~livoreno@user/notzmv)
[10:36:07] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[10:44:31] *** Joins: elf_fortrezz (~elf_fortr@adsl-72-50-6-135.prtc.net)
[10:52:36] *** Quits: elf_fortrezz (~elf_fortr@adsl-72-50-6-135.prtc.net) (Quit: Client closed)
[11:11:37] *** Joins: LostKobrakai (~LostKobra@2001:16b8:2dea:1800:60ae:54e0:6cff:3559)
[11:13:06] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[11:13:24] *** Joins: livoreno (~livoreno@user/notzmv)
[11:17:27] *** Quits: henry40408 (~henry4040@112-105-246-24.adsl.dynamic.seed.net.tw) (Ping timeout: 240 seconds)
[11:31:24] *** Joins: chgr (~ek@nat-91-137-26-20.net.encoline.de)
[11:42:51] *** LostKobrakai is now known as LostKobrakai[awa
[11:42:51] *** Quits: LostKobrakai[awa (~LostKobra@2001:16b8:2dea:1800:60ae:54e0:6cff:3559) (Quit: LostKobrakai[awa)
[11:45:45] *** Joins: LostKobrakai (~LostKobra@2001:16b8:2dea:1800:60ae:54e0:6cff:3559)
[12:04:04] *** Quits: B3k (~B3k@b3k.pl) (Ping timeout: 268 seconds)
[12:10:52] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 245 seconds)
[12:15:04] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[12:30:51] *** Joins: inoas (~ionas@aftr-37-201-194-213.unity-media.net)
[12:33:39] *** Joins: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[12:36:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:08] *** Joins: kOoLiNuS (~kOoLiNuS@37.183.106.37)
[12:38:22] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:38:31] *** kOoLiNuS is now known as Guest1386
[12:39:20] *** Quits: Guest1386 (~kOoLiNuS@37.183.106.37) (Changing host)
[12:39:20] *** Joins: Guest1386 (~kOoLiNuS@user/koolinus)
[12:39:48] *** Quits: Guest1386 (~kOoLiNuS@user/koolinus) (Client Quit)
[12:40:19] *** Joins: kOoLiNuS (~kOoLiNuS@37.183.106.37)
[12:40:23] *** Quits: kOoLiNuS (~kOoLiNuS@37.183.106.37) (Changing host)
[12:40:23] *** Joins: kOoLiNuS (~kOoLiNuS@user/koolinus)
[12:43:51] *** Quits: kOoLiNuS (~kOoLiNuS@user/koolinus) (Client Quit)
[12:50:45] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:09:04] *** Quits: koollman (samson_t@sp1.kooll.org) (Changing host)
[13:09:04] *** Joins: koollman (samson_t@user/koollman)
[13:14:35] *** Joins: natrys (~natrys@user/natrys)
[13:28:32] *** Joins: glassofethanol (~ethanmorg@cpc78471-cwma11-2-0-cust81.7-3.cable.virginm.net)
[13:34:35] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-11.prtc.net)
[13:36:48] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-11.prtc.net) (Client Quit)
[13:39:18] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-136.prtc.net)
[14:11:57] *** Joins: staceee (~stacy@2001:bc8:47ac:e0a::1)
[14:12:49] *** Quits: staceee_ (~stacy@51.158.78.158) (Ping timeout: 252 seconds)
[14:12:49] *** Quits: cess11 (cess11@wodanaz.se) (Ping timeout: 252 seconds)
[14:13:08] *** Joins: cess11 (cess11@wodanaz.se)
[14:13:40] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 240 seconds)
[14:15:04] *** Joins: sgn (~sgn@user/sgn)
[14:25:50] *** Joins: ur5us (~ur5us@203.86.198.200)
[14:34:49] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-136.prtc.net) (Ping timeout: 246 seconds)
[14:35:47] *** Quits: mathsaey (~mathsaey@user/mathsaey) (Ping timeout: 240 seconds)
[14:37:50] *** Joins: mouseghost (~draco@user/mouseghost)
[14:48:21] *** Quits: inoas (~ionas@aftr-37-201-194-213.unity-media.net) (Remote host closed the connection)
[14:49:04] *** Joins: mathsaey (~mathsaey@user/mathsaey)
[14:52:10] *** Quits: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 250 seconds)
[15:07:12] *** Joins: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[15:13:27] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 240 seconds)
[15:27:11] *** Joins: brauliobz (~manjaro-u@user/brauliobz)
[15:50:10] *** Quits: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Remote host closed the connection)
[15:50:31] *** Joins: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[16:11:43] *** Joins: batok (~batok@wimax-cpe-189-208-165-56.tijbcn.static.axtel.net)
[16:28:25] *** Joins: dallagi[m] (~dallagima@2001:470:69fc:105::e094)
[16:28:36] *** Joins: dalla (~dalla@2001:b07:6456:d97f:d972:b09c:3235:7659)
[16:28:53] *** Quits: dalla (~dalla@2001:b07:6456:d97f:d972:b09c:3235:7659) (Client Quit)
[16:29:19] *** Quits: srfsh (~srfsh@user/srfsh) (Ping timeout: 244 seconds)
[16:32:00] *** Joins: srfsh (~srfsh@user/srfsh)
[16:39:46] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[16:56:10] *** Quits: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[17:11:08] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[17:13:12] *** Quits: batok (~batok@wimax-cpe-189-208-165-56.tijbcn.static.axtel.net) (Remote host closed the connection)
[17:14:57] *** Quits: chgr (~ek@nat-91-137-26-20.net.encoline.de) (Quit: WeeChat 3.2)
[17:20:38] *** Joins: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[17:25:18] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Quit: You have been idle for 30+ days)
[17:25:18] *** Quits: EltonLeanderPint (~eltonpint@2001:470:69fc:105::c6c6) (Quit: You have been idle for 30+ days)
[17:44:35] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:44:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:46:49] <wess> morning!
[17:47:12] <rawtaz> looooo
[17:54:21] *** Quits: drewolson1 (~drewolson@user/drewolson) (*.net *.split)
[17:54:21] *** Quits: href (~href@Sade.random.sh) (*.net *.split)
[17:54:21] *** Quits: balo (~balo@128.199.49.128) (*.net *.split)
[17:54:21] *** Quits: ihabunek (~ihabunek@bezdomni.net) (*.net *.split)
[17:54:21] *** Quits: ds (~ds@user/ds) (*.net *.split)
[17:54:21] *** Quits: carrotzoup2 (~carrotzou@static.181.67.251.148.clients.your-server.de) (*.net *.split)
[17:54:21] *** Quits: micro (~micro@user/micro) (*.net *.split)
[17:54:21] *** Quits: Ananta-shesha (~pjetcetal@2.95.210.196) (*.net *.split)
[17:54:21] *** Quits: benwilson512 (sid71699@charlton.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: Net (sid313265@tooting.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: josephl (sid146137@tooting.irccloud.com) (*.net *.split)
[17:54:21] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[17:54:21] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[17:54:21] *** Quits: ox1eef (~0x1eef@user/rg) (*.net *.split)
[17:54:21] *** Quits: feld (~feld@107-208-180-225.lightspeed.mdsnwi.sbcglobal.net) (*.net *.split)
[17:54:21] *** Quits: nicholasruunu (~nicholasr@ruu.nu) (*.net *.split)
[17:54:21] *** Quits: etehtsea (~kis@164.90.175.135) (*.net *.split)
[17:54:41] *** Joins: batok (~batok@wimax-cpe-189-208-165-56.tijbcn.static.axtel.net)
[17:58:36] *** Joins: href (~href@Sade.random.sh)
[17:58:36] *** Joins: drewolson1 (~drewolson@user/drewolson)
[17:58:36] *** Joins: balo (~balo@128.199.49.128)
[17:58:36] *** Joins: ihabunek (~ihabunek@bezdomni.net)
[17:58:36] *** Joins: ds (~ds@user/ds)
[17:58:36] *** Joins: carrotzoup2 (~carrotzou@static.181.67.251.148.clients.your-server.de)
[17:58:36] *** Joins: micro (~micro@user/micro)
[17:58:36] *** Joins: Ananta-shesha (~pjetcetal@2.95.210.196)
[17:58:36] *** Joins: benwilson512 (sid71699@charlton.irccloud.com)
[17:58:36] *** Joins: Net (sid313265@tooting.irccloud.com)
[17:58:36] *** Joins: josephl (sid146137@tooting.irccloud.com)
[17:58:36] *** Joins: sm2n (~sm2n@user/sm2n)
[17:58:36] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[17:58:36] *** Joins: ox1eef (~0x1eef@user/rg)
[17:58:36] *** Joins: feld (~feld@107-208-180-225.lightspeed.mdsnwi.sbcglobal.net)
[17:58:36] *** Joins: nicholasruunu (~nicholasr@ruu.nu)
[17:58:36] *** Joins: etehtsea (~kis@164.90.175.135)
[18:03:46] *** Joins: phaleth (~phaleth@user/phaleth)
[18:12:04] *** Quits: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[18:13:46] *** Joins: manjaro-user (~manjaro-u@102.129.145.196)
[18:13:52] <creature> I'm working on a toy project to learn Elixir/Phoenix LiveView, and the associated development idioms. You can think of it as a Jackbox-style quiz - people join with an invite code, then answer multiple-choice questions. So I have a `Game` module (also a GenServer) that stores all the state. A list of players, a list of questions, a list of answers submitted by the players. 
[18:16:15] <creature> I'd like to let people change things already submitted, which means I need "If this list has a matching item, update that item, otherwise add that item". I can write something messy to do that, but is there an elegant way to do that? For instance, my players is a list like [{id: 1, name: "Foo"}]. So if I call `Game.add_player(1, "Bar")` I want to update that existing player; `Game.add_player(2, "Bar")` 
[18:16:21] <creature> would add a new one. 
[18:21:22] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[18:32:58] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:36:58] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[18:41:27] *** Quits: manjaro-user (~manjaro-u@102.129.145.196) (Ping timeout: 240 seconds)
[18:45:11] <mouseghost> creature, i dont quite get what you mean by the "elegant" way?
[18:46:17] *** Quits: mjones (sid6844@id-6844.brockwell.irccloud.com) ()
[18:46:20] <creature> (For the record, I think my messy version would first use `Enum.find_index` and then `List.replace_at`.) 
[18:46:32] *** Joins: mjones (sid6844@id-6844.helmsley.irccloud.com)
[18:46:41] <mouseghost> ah im not sure if thats messy at all
[18:46:43] *** Joins: sickill2 (~sickill@84.214.66.166)
[18:47:29] <mouseghost> i dont think its bad or anything. the only thing i could point out is that perhaps you might want a hashmap or something, but that'd be a different question, i guess
[18:47:54] <creature> mouseghost: I'm not sure myself! I guess I'd be looking for something like "Does it in one easy-to-understand line" or "uses a built-in function". I think this isn't possible with `Kernel.update_in`, for instance.
[18:48:27] *** Quits: sickill (~sickill@84.214.66.166) (Ping timeout: 240 seconds)
[18:48:27] *** sickill2 is now known as sickill
[18:48:44] *** Quits: keyvan (sid7672@brockwell.irccloud.com) ()
[18:49:00] *** Joins: keyvan (sid7672@id-7672.helmsley.irccloud.com)
[18:49:50] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:50:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[18:50:49] *** Joins: flynn (~mcbloch@user/flynn)
[18:51:02] <mouseghost> i wouldnt care about that tbh, but maybe there is something more funny, i guess
[18:53:49] <mouseghost> tho i would consider switching to something hashbased instead of thaaat
[18:55:41] *** Quits: Nicd (sid11783@user/nicd) ()
[18:55:57] *** Joins: Nicd (sid11783@user/nicd)
[18:57:35] <mouseghost> creature, you could also `map` it
[18:57:43] <mouseghost> but im not sure if thats faster
[19:00:47] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[19:01:18] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[19:02:16] *** Quits: termos (sid18647@id-18647.brockwell.irccloud.com) ()
[19:02:31] *** Joins: termos (sid18647@id-18647.helmsley.irccloud.com)
[19:03:40] <mouseghost> or, as i said, just use different datatype: Map, it has built-in .put/3
[19:05:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[19:06:19] *** Joins: livoreno (~livoreno@user/notzmv)
[19:07:30] <creature> Yeah, I think in this specific case a map would be a better structure. 
[19:09:25] <creature> But sticking with this as an example - find an element in a list that matches some criteria and modify it, or add it to the list - I think maybe the nicest thing I can think of is pattern matching on the `Enum.find_index` result. If it's nil, add the element; if it's anything else, use the index in replace_at. 
[19:13:05] *** Joins: inoas (~ionas@aftr-37-201-194-213.unity-media.net)
[19:13:26] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Remote host closed the connection)
[19:14:26] <Nicd> I'd reduce over the list
[19:14:37] <Nicd> or yeah, Enum.map :P
[19:17:42] *** Quits: glassofethanol (~ethanmorg@cpc78471-cwma11-2-0-cust81.7-3.cable.virginm.net) (Quit: leaving)
[19:19:00] <creature> 0I think the thing about `Enum.map` is: it's not going to tell you if it's there already or not. So it's tricky to determine whether you need to add the new element. 
[19:20:09] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Read error: Connection reset by peer)
[19:20:50] <Nicd> reduce would fit the bill then and accomplish it with only one iteration. but two iterations can result in cleaner code if it doesn't hurt performance, sure
[19:21:18] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[19:21:48] *** Joins: floriann (~Thunderbi@2a02:8106:2e:1300:2896:c1ef:5aa6:81e6)
[19:22:40] *** Quits: batok (~batok@wimax-cpe-189-208-165-56.tijbcn.static.axtel.net) (Remote host closed the connection)
[19:22:53] *** Joins: hoppity (~user@user/hoppity)
[19:22:57] <creature> I can't visualise the reduce solution; how would I use that? Let's start with `players = [{id: 1, name: "Alice"}, {id: 2, name: "Bob"}, {id: 3, name: "Charlotte"}]` and I call `Game.add_player(4, "Derek")`. 
[19:23:40] <Nicd> you accumulate `{[list_of_data], did_find_element}` and update both as needed
[19:25:12] <mouseghost> ^
[19:25:16] *** Quits: dignifiedquire (sid103808@2001:67c:2f08:5::1:9580) ()
[19:25:31] *** Joins: dignifiedquire (sid103808@id-103808.helmsley.irccloud.com)
[19:26:28] <creature> Right, got you. I guess you still end up with a temporary assignment, in that case. I guess the "more than one iteration" part comes from `List.replace_at` being a linear time operation? (Elixir has to walk the list to get to index n?) 
[19:26:57] <Nicd> yes, and what temporary assignment?
[19:30:19] <creature> You'd need something like `{players, is_found} = Enum.reduce(...)` and afterwards do something like `unless is_found` to add it to the list, I think? Reduce can't tell whether the current item is the last item (and therefore it should be appended), I think? 
[19:32:58] *** Quits: floriann (~Thunderbi@2a02:8106:2e:1300:2896:c1ef:5aa6:81e6) (Quit: floriann)
[19:33:10] <Nicd> true, if you want to append the value then you'd need a second iteration. if it doesn't matter, you can prepend it in constant time
[19:35:00] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[19:37:41] *** Quits: Halcyonicstorm__ (sid174863@id-174863.brockwell.irccloud.com) ()
[19:37:57] *** Joins: Halcyonicstorm__ (sid174863@id-174863.helmsley.irccloud.com)
[19:42:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[19:56:48] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[19:56:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[19:57:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:09:10] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[20:11:10] *** Quits: joshproehl (~quassel@user/joshproehl) (Quit: Disappearing act!)
[20:11:25] *** Joins: joshproehl (~quassel@user/joshproehl)
[20:14:46] <hoppity> IS elixir or erlang currently being used in cellphone towers or any other cool systems like that?
[20:34:15] <hendursaga> I'd be curious if they're used in 5G infrastructure
[20:35:45] <hoppity> It would seem to be a perfect fit
[20:36:44] <cess11> https://www.asocietygroup.com/en-in/assignments/goteborg-erlang-software-developer-for-5g-ref-1300023
[20:36:48] *** Quits: srfsh (~srfsh@user/srfsh) (Ping timeout: 244 seconds)
[20:37:23] <cess11> seems someone wants to employ someone to do it, so there's probably some 5g networks running on the beam already
[20:45:16] *** Quits: stiang (sid245441@id-245441.brockwell.irccloud.com) ()
[20:45:30] *** Joins: stiang (sid245441@id-245441.helmsley.irccloud.com)
[20:49:27] *** Joins: srfsh (~srfsh@user/srfsh)
[20:54:56] *** Quits: inoas (~ionas@aftr-37-201-194-213.unity-media.net) (Remote host closed the connection)
[21:05:00] <tristan> yes, they are (or at least erlang for sure) for a long time. ericsson and https://www.athonet.com/ are the ones off the top of my head
[21:25:49] *** Joins: gitgoood (~gitgood@80-44-12-89.dynamic.dsl.as9105.com)
[21:39:22] *** Joins: mahmutov (~mahmutov@37.155.47.113)
[21:39:37] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Ping timeout: 250 seconds)
[22:07:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[22:09:02] *** Joins: Guest42 (~Guest42@adsl-72-50-7-6.prtc.net)
[22:19:08] *** Joins: humbertowoody (~humbertow@187.202.253.37)
[22:22:44] *** Joins: inoas (~ionas@aftr-37-201-194-213.unity-media.net)
[22:23:40] *** Quits: humbertowoody (~humbertow@187.202.253.37) (Ping timeout: 240 seconds)
[22:36:04] *** Quits: Guest42 (~Guest42@adsl-72-50-7-6.prtc.net) (Ping timeout: 246 seconds)
[22:54:06] *** Joins: dcz (~dcz@user/dcz)
[22:54:27] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431)
[22:58:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:4cd7:81ee:7a45:9431) (Ping timeout: 240 seconds)
[23:07:39] <dcz> is there an "or" operator like in Python that overrides falsy values? like this {:system, "SMTP_SERVER"} | "localhost",
[23:12:44] <dcz> it's a || it seems
[23:24:43] *** Quits: srfsh (~srfsh@user/srfsh) (Ping timeout: 244 seconds)
[23:25:01] <Ankhers> Would anyone have any idea why I may be seeing an `ErlangError` for `{:port_died, :normal}` in my production logs?
[23:26:33] *** Joins: srfsh (~srfsh@user/srfsh)
[23:45:54] *** Joins: kaitsh (~kaitsh@user/kaitsh)
