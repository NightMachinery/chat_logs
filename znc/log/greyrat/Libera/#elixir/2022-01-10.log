[00:07:33] *** Joins: mahmutov (~mahmutov@37.155.21.112)
[00:09:36] *** Joins: notapenguin (~ryu@187.3.254.107)
[00:22:57] *** Quits: humberto1 (~humbertow@189.131.31.180) (Ping timeout: 268 seconds)
[00:23:07] *** Joins: Guest60 (~Guest60@173-15-69-254-Illinois.hfc.comcastbusiness.net)
[00:35:06] *** Quits: Guest60 (~Guest60@173-15-69-254-Illinois.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[00:37:59] *** Joins: Guest60 (~Guest60@2603:900a:1905:d68b:6904:9d27:d6de:b42d)
[00:39:01] *** Quits: phaleth (~user@user/phaleth) (Quit: phaleth)
[00:47:08] *** Quits: rito_ (~rito_gh@45.112.243.149) (Quit: Leaving)
[00:51:18] *** Parts: Guest60 (~Guest60@2603:900a:1905:d68b:6904:9d27:d6de:b42d) ()
[00:52:21] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[01:10:13] *** Quits: mizi (~mizi@user/mizi) (Ping timeout: 240 seconds)
[01:13:34] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[01:59:12] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:c0bf:721a:fdec:b791)
[02:23:28] *** Quits: trafficjam (~qubes@119.17.42.59) (Ping timeout: 256 seconds)
[02:45:46] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[02:47:36] *** Joins: notzmv (~zmv@user/notzmv)
[02:56:40] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Remote host closed the connection)
[02:58:10] *** Joins: rgrinberg (~textual@177.246.219.153)
[03:10:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[03:36:34] *** Quits: mahmutov (~mahmutov@37.155.21.112) (Ping timeout: 256 seconds)
[03:42:40] *** Joins: notzmv (~zmv@user/notzmv)
[03:44:19] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:c0bf:721a:fdec:b791) (Quit: Textual IRC Client: www.textualapp.com)
[03:46:50] <nickjj> did anyone else read this today? https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/
[03:47:41] <nickjj> it made me think that maybe the trade off to write more library code with elixir vs other languages isn't always a bad thing
[04:18:55] *** Joins: trafficjam (~qubes@119.17.42.59)
[04:26:26] <Mayel[m]> Seeing the scrollback about mix.exs, this is how we've implemented deps as config: https://github.com/bonfire-networks/mess
[04:28:07] *** Quits: rgrinberg (~textual@177.246.219.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:09] *** Joins: Tongir (~tangmang@2403-580f-f5--b53d-1d19-7a58-e08b.ip6.aussiebb.net)
[04:53:43] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[04:54:31] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[04:58:26] *** Joins: livoreno (~livoreno@user/notzmv)
[05:04:00] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:04:50] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:13:55] *** Quits: aidalgol (~aidalgol@user/aidalgol) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[05:14:31] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:15:18] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:17:12] *** Joins: aidalgol (~aidalgol@user/aidalgol)
[05:25:03] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:25:44] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:29:11] *** Joins: marco (~marco@199.231.222.140)
[05:29:21] *** Parts: marco (~marco@199.231.222.140) ()
[05:35:33] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:36:24] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:44:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[05:46:06] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:46:56] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:56:39] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:57:20] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:02:04] <trafficjam> Mayel[m]: could you paste the scrollback for the last 12 hours? got d/c'ed and missed it
[06:07:09] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:08:00] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:09:25] *** Quits: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 240 seconds)
[06:13:30] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:17:41] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:18:31] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:28:14] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:28:55] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:35:53] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[06:38:45] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:39:36] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:40:46] <rawtaz> yauhsien: please fix your connection, you're spamming ;)
[06:49:15] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:49:56] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:59:46] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:00:25] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[07:08:08] *** Joins: thojanssens (~thojansse@182.232.179.128)
[07:25:36] <davic> nickjj: worst thing is Github banning him from his own github account
[07:26:33] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:42:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:55:08] <trafficjam> does phoenix include metrics on how long an ecto query takes?
[07:58:28] *** Joins: notzmv (~zmv@user/notzmv)
[08:21:43] <davic> trafficjam: should be available in live dashboard if I recall correctly
[08:24:30] <trafficjam> davic: any idea how i can interface with this data?
[08:24:59] <davic> trafficjam: you just need to listen to the telemetry events
[08:25:37] <trafficjam> ah the Telemtry module, thanks
[08:56:56] <trafficjam> also, how do i open the process (observability) gui?
[08:58:31] <Mayel[m]> trafficjam: this is how I log slow queries https://github.com/bonfire-networks/ecto_sparkles/blob/main/lib/log_slow.ex 
[08:59:41] <Mayel[m]> Plus this in your Application.start/2:  
[08:59:41] <Mayel[m]>  ​    ​EctoSparkles.LogSlow​.​setup​(​@​otp_app​)
[09:01:39] <trafficjam> Mayel[m]: ah neat, thanks
[09:01:58] <trafficjam> also :observer.start apparently
[09:02:52] *** Joins: sagax (~sagax_nb@user/sagax)
[09:05:52] <trafficjam> if i have several elixier/phoenix projects running, how can i identify a particular GenServer in one of my elixir apps?
[09:06:00] <trafficjam> (using erlang-observer)
[09:08:23] <trafficjam> does `GenServer.start_link(__MODULE__, {}, name: __MODULE__)` name the process as the module?
[09:19:24] <trafficjam> another question: if I have 2 modules (A and B), and every method from A and B require access to some variable `primary` which i define in my root elixir file `lib/my_app.ex`, how can i pass that variable to every module method so that i am able to call methods like A.run_task_1(), instead of having to call A.run_task_1(primary), B.run_task_2(primary) etc 
[09:19:35] <trafficjam> i.e. keeping things DRY
[09:22:41] <trafficjam> my_app.ex is a GenServer, so could i define and pass `primary` in its start_link method, and then at the begging of each module, do something like `@primary send(pid, {:get, :primary, self()})`
[09:34:14] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:35:04] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[09:37:21] *** Joins: livoreno (~livoreno@user/notzmv)
[09:42:13] <Mayel[m]> trafficjam: the scrollback https://gist.github.com/mayel/06b74da70f5741ea119c0ca0cb53791a
[09:44:45] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:45:25] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[09:46:02] *** Quits: thojanssens (~thojansse@182.232.179.128) (Ping timeout: 256 seconds)
[09:46:29] <trafficjam> thanks
[09:48:19] *** Joins: thojanssens (~thojansse@182.232.179.128)
[09:48:31] *** Joins: phaleth (~user@user/phaleth)
[09:59:18] *** Joins: humberto1 (~humbertow@189.131.31.180)
[10:00:46] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[10:07:01] *** Quits: thojanssens (~thojansse@182.232.179.128) (Ping timeout: 240 seconds)
[10:16:14] *** Joins: mexen (uid495612@user/mexen)
[10:46:31] *** Joins: infinityfye (~infinityf@41.45.233.27)
[10:54:25] *** Quits: infinityfye (~infinityf@41.45.233.27) (Quit: Leaving)
[10:54:43] *** Joins: infinityfye (~infinityf@41.45.233.27)
[10:55:07] *** Joins: antares80 (~antares80@216.147.105.40)
[10:59:37] *** Joins: humbertowoody (~humbertow@189.131.31.180)
[11:03:03] *** Quits: humberto1 (~humbertow@189.131.31.180) (Ping timeout: 268 seconds)
[11:39:30] *** Quits: infinityfye (~infinityf@41.45.233.27) (*.net *.split)
[11:39:31] *** Quits: mexen (uid495612@user/mexen) (*.net *.split)
[11:39:31] *** Quits: phaleth (~user@user/phaleth) (*.net *.split)
[11:39:31] *** Quits: trafficjam (~qubes@119.17.42.59) (*.net *.split)
[11:39:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[11:39:31] *** Quits: henry40408 (~henry4040@175.182.108.239) (*.net *.split)
[11:39:32] *** Quits: kawen (~quassel@static.208.191.216.95.clients.your-server.de) (*.net *.split)
[11:39:32] *** Quits: havenwood (~havenwood@about/ruby/havenwood) (*.net *.split)
[11:39:32] *** Quits: dr-orlovsky (~dr-orlovs@31.14.40.18) (*.net *.split)
[11:39:32] *** Quits: mooff (mooff@awful.cooking) (*.net *.split)
[11:39:32] *** Quits: drewlander (~drewlande@74.196.20.3) (*.net *.split)
[11:39:32] *** Quits: damjan (~damjan@user/damjan) (*.net *.split)
[11:39:32] *** Quits: jpaa (~jpaa@161.97.129.36) (*.net *.split)
[11:39:32] *** Quits: void09 (~void@150.230.21.57) (*.net *.split)
[11:39:32] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[11:39:32] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (*.net *.split)
[11:39:32] *** Quits: res0nat0r0 (~Fletch@dia.whatbox.ca) (*.net *.split)
[11:39:33] *** Quits: srfsh (~srfsh@user/srfsh) (*.net *.split)
[11:39:33] *** Quits: Mayel[m] (~mayelmatr@2001:470:69fc:105::bf92) (*.net *.split)
[11:39:33] *** Quits: PatrikStenmark[m (~patrikste@2001:470:69fc:105::bfa1) (*.net *.split)
[11:39:33] *** Quits: kshlm (~kshlm@2001:470:69fc:105::b46b) (*.net *.split)
[11:39:33] *** Quits: waz0wski (~waz0wski@hrothgar.distortion.io) (*.net *.split)
[11:39:33] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (*.net *.split)
[11:39:33] *** Quits: hwrd (aa272caead@2604:bf00:561:2000::137) (*.net *.split)
[11:39:33] *** Quits: rrix (~rrix@2620:fc:c000:0:69c1:fa22:c0c9:e2c4) (*.net *.split)
[11:39:33] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[11:39:33] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (*.net *.split)
[11:39:33] *** Quits: esspapier (~esspapier@user/esspapier) (*.net *.split)
[11:39:33] *** Quits: acro (~acro@user/acro) (*.net *.split)
[11:39:33] *** Quits: creature (~alex@198.98.114.33) (*.net *.split)
[11:39:34] *** Quits: kuzyn (beea2fef6b@2604:bf00:561:2000::8f) (*.net *.split)
[11:39:34] *** Quits: andersju1 (~andersju@fnord.unix.se) (*.net *.split)
[11:39:34] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (*.net *.split)
[11:39:34] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[11:39:34] *** Quits: bodgix (~bodgix@vps-ae17da44.vps.ovh.net) (*.net *.split)
[11:39:34] *** Quits: v0idpwn (sid483136@id-483136.helmsley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: Nicd (sid11783@user/nicd) (*.net *.split)
[11:39:34] *** Quits: wojtekmach (sid183574@id-183574.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: josephl (sid146137@id-146137.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[11:39:34] *** Quits: Shados (~shados@shados.net) (*.net *.split)
[11:39:34] *** Quits: kingy (~kingy__@darkpeak.org) (*.net *.split)
[11:39:34] *** Quits: serafeim (serafeim@thunix.net) (*.net *.split)
[11:39:34] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[11:39:34] *** Quits: paak (~Peter@2a01:4f9:c010:677c::104) (*.net *.split)
[11:39:34] *** Quits: me[m]12 (~metmtrxmi@2001:470:69fc:105::8cc3) (*.net *.split)
[11:39:34] *** Quits: uhoreg (~uhoreg@2001:470:69fc:105::35f) (*.net *.split)
[11:39:34] *** Quits: sweater (~sweater@206.81.18.26) (*.net *.split)
[11:39:34] *** Quits: iquites (sid77830@id-77830.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: MuffinPimp (~mokou@box.mokou.io) (*.net *.split)
[11:39:34] *** Quits: keisisqrl (sid501533@user/keisisqrl) (*.net *.split)
[11:39:34] *** Quits: azazel (~azazel@orphu.arstecnica.it) (*.net *.split)
[11:39:34] *** Quits: fhunleth (sid79501@id-79501.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: eproxus_____ (sid39465@id-39465.ilkley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: ley_ (sid320610@id-320610.hampstead.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: mhmd (~mhmd@37.48.90.208) (*.net *.split)
[11:39:35] *** Quits: kwmiebach (sid16855@id-16855.tinside.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: alisdair (sid7471@id-7471.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: jaydoane (sid66455@id-66455.hampstead.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: asonge (sid129041@id-129041.uxbridge.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (*.net *.split)
[11:39:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (*.net *.split)
[11:39:35] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[11:39:35] *** Quits: equil (~u@user/eq) (*.net *.split)
[11:39:35] *** Quits: Bretzky (~Bretzky@167.99.239.126) (*.net *.split)
[11:39:36] *** Quits: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl) (*.net *.split)
[11:39:36] *** Quits: rx80 (~quassel@user/rx80) (*.net *.split)
[11:39:36] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (*.net *.split)
[11:39:36] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[11:39:36] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[11:39:36] *** Quits: m1dnight (~christoph@christophe.dev) (*.net *.split)
[11:39:36] *** Quits: norrland (~norrland@92-33-164-4.customers.ownit.se) (*.net *.split)
[11:39:36] *** Quits: carrotzoup205931 (~carrotzou@static.181.67.251.148.clients.your-server.de) (*.net *.split)
[11:39:36] *** Quits: blambi (~blambi@c-c11e524e.011-113-67626725.bbcust.telenor.se) (*.net *.split)
[11:39:37] *** Quits: joshproehl___ (~quassel@user/joshproehl) (*.net *.split)
[11:39:37] *** Quits: jtdowney (~jtdowney@user/jtdowney) (*.net *.split)
[11:39:37] *** Quits: Poeticode (~Poeticode@user/poeticode) (*.net *.split)
[11:39:37] *** Quits: Halcyonicstorm__ (sid174863@helmsley.irccloud.com) (*.net *.split)
[11:39:37] *** Quits: sgarciapdx (~serge@irc.shork.io) (*.net *.split)
[11:39:37] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[11:39:37] *** Quits: sickill74 (~sickill@user/sickill) (*.net *.split)
[11:39:37] *** Quits: Zevv (~Zevvvvv@185.238.131.12) (*.net *.split)
[11:39:37] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (*.net *.split)
[11:39:38] *** Quits: sleepiejohn[m] (~sleepiejo@2001:470:69fc:105::1:48b9) (*.net *.split)
[11:39:38] *** Quits: rduplain (~rduplain@user/rduplain) (*.net *.split)
[11:39:38] *** Quits: croeso[m] (~croesovep@2001:470:69fc:105::1:aaa) (*.net *.split)
[11:39:38] *** Quits: ajkerrigan[m] (~ajkerriga@2001:470:69fc:105::bc1) (*.net *.split)
[11:39:38] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: sorentwo (sid39488@id-39488.tinside.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: OliverMT (sid16701@id-16701.hampstead.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[11:39:38] *** Quits: termos (sid18647@id-18647.helmsley.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: mathsaey (~mathsaey@user/mathsaey) (*.net *.split)
[11:39:38] *** Quits: stiang (sid245441@id-245441.helmsley.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: joedevivo (sid16225@id-16225.tinside.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: mjones (sid6844@id-6844.helmsley.irccloud.com) (*.net *.split)
[11:39:39] *** Quits: picasso (mike@potbox.pixor.net) (*.net *.split)
[11:39:39] *** Quits: B3k (~B3k@b3k.pl) (*.net *.split)
[11:39:39] *** Quits: DeX77 (~Admiral@dragonslave.de) (*.net *.split)
[11:39:39] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:39:39] *** Quits: gamache (~gamache@gunyoki.net) (*.net *.split)
[11:39:39] *** Quits: rovanion (~rovanion@h-46-59-13-236.A163.priv.bahnhof.se) (*.net *.split)
[11:39:39] *** Quits: andreyorst (~andreyors@broadband-90-154-71-13.ip.moscow.rt.ru) (*.net *.split)
[11:39:39] *** Quits: EnigmaCurry[m] (~enigmacur@2001:470:69fc:105::1:4a7f) (*.net *.split)
[11:39:39] *** Quits: PeterMarreck[m] (~pmarreckm@2001:470:69fc:105::1:64f0) (*.net *.split)
[11:39:40] *** Quits: punnie (~punniemat@2001:470:69fc:105::1193) (*.net *.split)
[11:39:40] *** Quits: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8) (*.net *.split)
[11:39:40] *** Quits: derfj (sid19429@id-19429.tinside.irccloud.com) (*.net *.split)
[11:39:40] *** Quits: wgwz (~wgwz@45.55.193.150) (*.net *.split)
[11:39:40] *** Quits: val (~val@limnoria/val) (*.net *.split)
[11:39:40] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[11:39:40] *** Quits: adamkittelson (sid82542@2a03:5180:f::1:426e) (*.net *.split)
[11:39:40] *** Quits: vhf (~victor@2607:5300:60:1083::1) (*.net *.split)
[11:39:40] *** Quits: sinni800 (~quassel@2a00:1ca8:ae::b0) (*.net *.split)
[11:39:40] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (*.net *.split)
[11:39:40] *** Quits: gjnoonan (cb73e0a324@2604:bf00:561:2000::e) (*.net *.split)
[11:39:40] *** Quits: johnhamelink (3ae947b049@2604:bf00:561:2000::1b) (*.net *.split)
[11:39:41] *** Quits: xlii__ (~xlii@167.172.161.148) (*.net *.split)
[11:39:41] *** Quits: Q[m] (~master-qm@2001:470:69fc:105::1:1a45) (*.net *.split)
[11:39:41] *** Quits: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152) (*.net *.split)
[11:39:41] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (*.net *.split)
[11:39:42] *** Quits: tcit (~tcit@2001:470:69fc:105::8f) (*.net *.split)
[11:39:42] *** Quits: Zaab1t (~carlbordu@2001:470:69fc:105::78e) (*.net *.split)
[11:39:42] *** Quits: eein (35f97d3dbd@2604:bf00:561:2000::2a6) (*.net *.split)
[11:39:42] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (*.net *.split)
[11:39:42] *** Quits: drincruz (drincruz@2607:5300:203:3f52::19) (*.net *.split)
[11:39:42] *** Quits: esainane (esainane@antihype.space) (*.net *.split)
[11:39:42] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[11:39:42] *** Quits: ds (~ds@user/ds) (*.net *.split)
[11:39:42] *** Quits: bind3 (~bind@md-dingen.tilaa.cloud) (*.net *.split)
[11:39:42] *** Quits: Net (sid313265@id-313265.lymington.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: beise (~beise@85.17.52.17) (*.net *.split)
[11:39:42] *** Quits: whk (~whk@ec2-13-244-150-184.af-south-1.compute.amazonaws.com) (*.net *.split)
[11:39:42] *** Quits: GLaDER (~GLaDER@h-98-128-172-23.A785.priv.bahnhof.se) (*.net *.split)
[11:39:43] *** Quits: meredith (~meredith@ramdas.roomag.org) (*.net *.split)
[11:39:43] *** Quits: ruhnet[m] (~ruhnetmat@2001:470:69fc:105::1:626b) (*.net *.split)
[11:39:43] *** Quits: vancha112[m] (~vancha@2001:470:69fc:105::3473) (*.net *.split)
[11:39:43] *** Quits: harrow (~harrow@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[11:39:43] *** Quits: joenoon (sid411732@id-411732.helmsley.irccloud.com) (*.net *.split)
[11:39:43] *** Quits: mrkurt (sid368284@id-368284.helmsley.irccloud.com) (*.net *.split)
[11:39:43] *** Quits: Zarathu (~zarathu@li2222-85.members.linode.com) (*.net *.split)
[11:39:43] *** Quits: jstoker (jstoker@user/jstoker) (*.net *.split)
[11:39:43] *** Quits: triskite3_ (uid414920@id-414920.uxbridge.irccloud.com) (*.net *.split)
[11:39:43] *** Quits: slothby (~JoshAshby@irc.isin.space) (*.net *.split)
[11:39:43] *** Quits: rbino (~rbino@rbino.com) (*.net *.split)
[11:39:43] *** Quits: cdegroot_ (~quassel@209.5.238.85) (*.net *.split)
[11:39:43] *** Quits: hauleth (~hauleth@2.ip-145-239-81.eu) (*.net *.split)
[11:39:43] *** Quits: malware (~malware@ec2-52-91-134-43.compute-1.amazonaws.com) (*.net *.split)
[11:39:44] *** Quits: kpanic (~kpanic@user/kpanic) (*.net *.split)
[11:39:44] *** Quits: jdrab (~jdrab@user/jdrab) (*.net *.split)
[11:39:44] *** Quits: Seaduck (~seaduck@2001:19f0:5:d68:5400:ff:fe75:209e) (*.net *.split)
[11:39:44] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[11:39:44] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[11:39:44] *** Quits: rkleef (rolfscribb@pegasus.vankleef.me) (*.net *.split)
[11:39:44] *** Quits: adrianhblack[m] (~adrianhbl@2001:470:69fc:105::1:30c9) (*.net *.split)
[11:39:44] *** Quits: wehlutyk[m] (~sleauchat@2001:470:69fc:105::2f16) (*.net *.split)
[11:39:44] *** Quits: benwilson512 (sid71699@id-71699.ilkley.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: keyvan (sid7672@id-7672.helmsley.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: nox (sid3872@id-3872.uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: jamra_ (sid16103@id-16103.ilkley.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: bitwalker (sid32334@user/bitwalker) (*.net *.split)
[11:39:44] *** Quits: balo (~balo@128.199.49.128) (*.net *.split)
[11:39:44] *** Quits: davic (sid473656@user/davic) (*.net *.split)
[11:39:45] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: josevalim (sid250896@id-250896.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[11:39:45] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[11:39:45] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[11:51:47] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Max SendQ exceeded)
[11:51:57] *** Joins: yauhsien_ (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[11:51:57] *** Joins: infinityfye (~infinityf@41.45.233.27)
[11:51:57] *** Joins: mexen (uid495612@user/mexen)
[11:51:57] *** Joins: phaleth (~user@user/phaleth)
[11:51:57] *** Joins: sagax (~sagax_nb@user/sagax)
[11:51:57] *** Joins: trafficjam (~qubes@119.17.42.59)
[11:51:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[11:51:57] *** Joins: Sgeo (~Sgeo@user/sgeo)
[11:51:57] *** Joins: EnigmaCurry[m] (~enigmacur@2001:470:69fc:105::1:4a7f)
[11:51:57] *** Joins: henry40408 (~henry4040@175.182.108.239)
[11:51:57] *** Joins: el_kevino (~mote@2604:a880:400:d1::901:5001)
[11:51:57] *** Joins: PeterMarreck[m] (~pmarreckm@2001:470:69fc:105::1:64f0)
[11:51:57] *** Joins: kawen (~quassel@static.208.191.216.95.clients.your-server.de)
[11:51:57] *** Joins: havenwood (~havenwood@about/ruby/havenwood)
[11:51:57] *** Joins: equil (~u@user/eq)
[11:51:57] *** Joins: dr-orlovsky (~dr-orlovs@31.14.40.18)
[11:51:57] *** Joins: Bretzky (~Bretzky@167.99.239.126)
[11:51:57] *** Joins: Mayel[m] (~mayelmatr@2001:470:69fc:105::bf92)
[11:51:57] *** Joins: ruhnet[m] (~ruhnetmat@2001:470:69fc:105::1:626b)
[11:51:57] *** Joins: mooff (mooff@awful.cooking)
[11:51:57] *** Joins: drewlander (~drewlande@74.196.20.3)
[11:51:57] *** Joins: ajkerrigan[m] (~ajkerriga@2001:470:69fc:105::bc1)
[11:51:57] *** Joins: sleepiejohn[m] (~sleepiejo@2001:470:69fc:105::1:48b9)
[11:51:57] *** Joins: adrianhblack[m] (~adrianhbl@2001:470:69fc:105::1:30c9)
[11:51:57] *** Joins: me[m]12 (~metmtrxmi@2001:470:69fc:105::8cc3)
[11:51:57] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[11:51:57] *** Joins: wehlutyk[m] (~sleauchat@2001:470:69fc:105::2f16)
[11:51:57] *** Joins: vancha112[m] (~vancha@2001:470:69fc:105::3473)
[11:51:57] *** Joins: Q[m] (~master-qm@2001:470:69fc:105::1:1a45)
[11:51:57] *** Joins: croeso[m] (~croesovep@2001:470:69fc:105::1:aaa)
[11:51:57] *** Joins: tcit (~tcit@2001:470:69fc:105::8f)
[11:51:57] *** Joins: Zaab1t (~carlbordu@2001:470:69fc:105::78e)
[11:51:57] *** Joins: yeik-the-spik[m] (~yeik-the-@2001:470:69fc:105::6152)
[11:51:57] *** Joins: PatrikStenmark[m (~patrikste@2001:470:69fc:105::bfa1)
[11:51:57] *** Joins: uhoreg (~uhoreg@2001:470:69fc:105::35f)
[11:51:57] *** Joins: kshlm (~kshlm@2001:470:69fc:105::b46b)
[11:51:57] *** Joins: rduplain (~rduplain@user/rduplain)
[11:51:57] *** Joins: punnie (~punniemat@2001:470:69fc:105::1193)
[11:51:57] *** Joins: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl)
[11:51:57] *** Joins: damjan (~damjan@user/damjan)
[11:51:57] *** Joins: jpaa (~jpaa@161.97.129.36)
[11:51:57] *** Joins: srfsh (~srfsh@user/srfsh)
[11:51:57] *** Joins: rx80 (~quassel@user/rx80)
[11:51:57] *** Joins: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[11:51:57] *** Joins: tomku (~tomku@user/tomku)
[11:51:57] *** Joins: void09 (~void@150.230.21.57)
[11:51:57] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[11:51:57] *** Joins: wolfshappen (~waff@irc.furworks.de)
[11:51:57] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[11:51:57] *** Joins: sickill74 (~sickill@user/sickill)
[11:51:57] *** Joins: drewolson (~drewolson@user/drewolson)
[11:51:57] *** Joins: sgarciapdx (~serge@irc.shork.io)
[11:51:57] *** Joins: Halcyonicstorm__ (sid174863@helmsley.irccloud.com)
[11:51:57] *** Joins: Poeticode (~Poeticode@user/poeticode)
[11:51:57] *** Joins: jtdowney (~jtdowney@user/jtdowney)
[11:51:57] *** Joins: joshproehl___ (~quassel@user/joshproehl)
[11:51:57] *** Joins: blambi (~blambi@c-c11e524e.011-113-67626725.bbcust.telenor.se)
[11:51:57] *** Joins: carrotzoup205931 (~carrotzou@static.181.67.251.148.clients.your-server.de)
[11:51:57] *** Joins: norrland (~norrland@92-33-164-4.customers.ownit.se)
[11:51:57] *** Joins: m1dnight (~christoph@christophe.dev)
[11:51:57] *** Joins: paak (~Peter@2a01:4f9:c010:677c::104)
[11:51:57] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[11:51:57] *** Joins: serafeim (serafeim@thunix.net)
[11:51:57] *** Joins: kingy (~kingy__@darkpeak.org)
[11:51:57] *** Joins: Shados (~shados@shados.net)
[11:51:57] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[11:51:57] *** Joins: josephl (sid146137@id-146137.lymington.irccloud.com)
[11:51:57] *** Joins: wojtekmach (sid183574@id-183574.lymington.irccloud.com)
[11:51:57] *** Joins: Nicd (sid11783@user/nicd)
[11:51:57] *** Joins: v0idpwn (sid483136@id-483136.helmsley.irccloud.com)
[11:51:57] *** Joins: bodgix (~bodgix@vps-ae17da44.vps.ovh.net)
[11:51:57] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[11:51:57] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[11:51:57] *** Joins: andersju1 (~andersju@fnord.unix.se)
[11:51:57] *** Joins: kuzyn (beea2fef6b@2604:bf00:561:2000::8f)
[11:51:57] *** Joins: creature (~alex@198.98.114.33)
[11:51:57] *** Joins: acro (~acro@user/acro)
[11:51:57] *** Joins: esspapier (~esspapier@user/esspapier)
[11:51:57] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[11:51:57] *** Joins: mcint (mcint@user/mcint)
[11:51:57] *** Joins: rrix (~rrix@2620:fc:c000:0:69c1:fa22:c0c9:e2c4)
[11:51:57] *** Joins: hwrd (aa272caead@2604:bf00:561:2000::137)
[11:51:57] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[11:51:57] *** Joins: waz0wski (~waz0wski@hrothgar.distortion.io)
[11:51:57] *** Joins: asonge (sid129041@id-129041.uxbridge.irccloud.com)
[11:51:57] *** Joins: jaydoane (sid66455@id-66455.hampstead.irccloud.com)
[11:51:57] *** Joins: alisdair (sid7471@id-7471.ilkley.irccloud.com)
[11:51:57] *** Joins: kwmiebach (sid16855@id-16855.tinside.irccloud.com)
[11:51:57] *** Joins: mhmd (~mhmd@37.48.90.208)
[11:51:57] *** Joins: ley_ (sid320610@id-320610.hampstead.irccloud.com)
[11:51:57] *** Joins: eproxus_____ (sid39465@id-39465.ilkley.irccloud.com)
[11:51:57] *** Joins: fhunleth (sid79501@id-79501.lymington.irccloud.com)
[11:51:57] *** Joins: azazel (~azazel@orphu.arstecnica.it)
[11:51:57] *** Joins: keisisqrl (sid501533@user/keisisqrl)
[11:51:57] *** Joins: MuffinPimp (~mokou@box.mokou.io)
[11:51:57] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[11:51:57] *** Joins: sweater (~sweater@206.81.18.26)
[11:51:57] *** Joins: andreyorst (~andreyors@broadband-90-154-71-13.ip.moscow.rt.ru)
[11:51:57] *** Joins: rovanion (~rovanion@h-46-59-13-236.A163.priv.bahnhof.se)
[11:51:57] *** Joins: gamache (~gamache@gunyoki.net)
[11:51:57] *** Joins: Exa (exa@irc.moe)
[11:51:57] *** Joins: DeX77 (~Admiral@dragonslave.de)
[11:51:57] *** Joins: B3k (~B3k@b3k.pl)
[11:51:57] *** Joins: picasso (mike@potbox.pixor.net)
[11:51:57] *** Joins: mjones (sid6844@id-6844.helmsley.irccloud.com)
[11:51:57] *** Joins: joedevivo (sid16225@id-16225.tinside.irccloud.com)
[11:51:57] *** Joins: stiang (sid245441@id-245441.helmsley.irccloud.com)
[11:51:57] *** Joins: mathsaey (~mathsaey@user/mathsaey)
[11:51:57] *** Joins: termos (sid18647@id-18647.helmsley.irccloud.com)
[11:51:57] *** Joins: bw (sid2730@user/betawaffle)
[11:51:57] *** Joins: OliverMT (sid16701@id-16701.hampstead.irccloud.com)
[11:51:57] *** Joins: sorentwo (sid39488@id-39488.tinside.irccloud.com)
[11:51:57] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[11:51:57] *** Joins: xlii__ (~xlii@167.172.161.148)
[11:51:57] *** Joins: sinni800 (~quassel@2a00:1ca8:ae::b0)
[11:51:57] *** Joins: johnhamelink (3ae947b049@2604:bf00:561:2000::1b)
[11:51:57] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[11:51:57] *** Joins: vhf (~victor@2607:5300:60:1083::1)
[11:51:57] *** Joins: gjnoonan (cb73e0a324@2604:bf00:561:2000::e)
[11:51:57] *** Joins: adamkittelson (sid82542@2a03:5180:f::1:426e)
[11:51:57] *** Joins: val (~val@limnoria/val)
[11:51:57] *** Joins: wgwz (~wgwz@45.55.193.150)
[11:51:57] *** Joins: sm2n (ae95cb1267@user/sm2n)
[11:51:57] *** Joins: derfj (sid19429@id-19429.tinside.irccloud.com)
[11:51:57] *** Joins: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8)
[11:51:57] *** Joins: rkleef (rolfscribb@pegasus.vankleef.me)
[11:51:57] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[11:51:57] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[11:51:57] *** Joins: Seaduck (~seaduck@2001:19f0:5:d68:5400:ff:fe75:209e)
[11:51:57] *** Joins: kpanic (~kpanic@user/kpanic)
[11:51:57] *** Joins: malware (~malware@ec2-52-91-134-43.compute-1.amazonaws.com)
[11:51:57] *** Joins: hauleth (~hauleth@2.ip-145-239-81.eu)
[11:51:57] *** Joins: cdegroot_ (~quassel@209.5.238.85)
[11:51:57] *** Joins: rbino (~rbino@rbino.com)
[11:51:57] *** Joins: slothby (~JoshAshby@irc.isin.space)
[11:51:57] *** Joins: triskite3_ (uid414920@id-414920.uxbridge.irccloud.com)
[11:51:57] *** Joins: jdrab (~jdrab@user/jdrab)
[11:51:57] *** Joins: jstoker (jstoker@user/jstoker)
[11:51:57] *** Joins: Zarathu (~zarathu@li2222-85.members.linode.com)
[11:51:57] *** Joins: mrkurt (sid368284@id-368284.helmsley.irccloud.com)
[11:51:57] *** Joins: joenoon (sid411732@id-411732.helmsley.irccloud.com)
[11:51:57] *** Joins: niko (~niko@libera/staff/niko)
[11:51:57] *** Joins: harrow (~harrow@static.38.6.217.95.clients.your-server.de)
[11:51:57] *** Joins: whk (~whk@ec2-13-244-150-184.af-south-1.compute.amazonaws.com)
[11:51:57] *** Joins: beise (~beise@85.17.52.17)
[11:51:57] *** Joins: Net (sid313265@id-313265.lymington.irccloud.com)
[11:51:57] *** Joins: bind3 (~bind@md-dingen.tilaa.cloud)
[11:51:57] *** Joins: ds (~ds@user/ds)
[11:51:57] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[11:51:57] *** Joins: esainane (esainane@antihype.space)
[11:51:57] *** Joins: drincruz (drincruz@2607:5300:203:3f52::19)
[11:51:57] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[11:51:57] *** Joins: eein (35f97d3dbd@2604:bf00:561:2000::2a6)
[11:51:57] *** Joins: meredith (~meredith@ramdas.roomag.org)
[11:51:57] *** Joins: GLaDER (~GLaDER@h-98-128-172-23.A785.priv.bahnhof.se)
[11:51:57] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[11:51:57] *** Joins: reda_ (~reda@user/reda)
[11:51:57] *** Joins: josevalim (sid250896@id-250896.hampstead.irccloud.com)
[11:51:57] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[11:51:57] *** Joins: balo (~balo@128.199.49.128)
[11:51:57] *** Joins: davic (sid473656@user/davic)
[11:51:57] *** Joins: bitwalker (sid32334@user/bitwalker)
[11:51:57] *** Joins: jamra_ (sid16103@id-16103.ilkley.irccloud.com)
[11:51:57] *** Joins: nox (sid3872@id-3872.uxbridge.irccloud.com)
[11:51:57] *** Joins: keyvan (sid7672@id-7672.helmsley.irccloud.com)
[11:51:57] *** Joins: benwilson512 (sid71699@id-71699.ilkley.irccloud.com)
[11:51:57] *** Joins: res0nat0r0 (~Fletch@dia.whatbox.ca)
[11:51:57] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[11:51:57] *** Joins: ChanServ (ChanServ@services.libera.chat)
[11:51:57] *** molybdenum.libera.chat sets mode: +o ChanServ
[11:53:23] *** Quits: Halcyonicstorm__ (sid174863@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[11:55:09] *** Joins: Halcyonicstorm__ (sid174863@id-174863.helmsley.irccloud.com)
[11:55:53] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[11:55:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:28:42] *** Joins: chgr (~ek@nat-91-137-25-18.net.encoline.de)
[13:10:45] *** Joins: livoreno (~livoreno@user/notzmv)
[13:16:37] *** Quits: mexen (uid495612@user/mexen) (Ping timeout: 240 seconds)
[13:17:37] *** Joins: mexen (uid495612@user/mexen)
[13:41:33] *** Joins: monkeycoder (~monkey@202.185.207.63)
[14:00:06] *** Quits: yauhsien_ (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:00:46] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[14:30:21] <trafficjam> any advice?
[14:32:40] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:36:21] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:37:01] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[14:37:53] <Nicd> to which one?
[14:41:36] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:80ee:56b1:c7cc:d16d)
[14:44:59] *** Joins: cursey (~cursey@user/cursey)
[14:46:51] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:47:38] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[15:21:42] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777)
[15:24:26] *** Joins: henry404088 (~henry4040@175.181.188.127)
[15:25:49] *** Quits: henry40408 (~henry4040@175.182.108.239) (Ping timeout: 240 seconds)
[15:25:49] *** henry404088 is now known as henry40408
[15:30:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[15:42:57] *** Joins: sgn (~sgn@user/sgn)
[15:43:30] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:43:50] *** Joins: sgn (~sgn@user/sgn)
[15:48:24] <trafficjam> Nicd: to the question about modules
[15:48:30] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:48:52] <benwilson512> trafficjam: `GenServer.start_link(__MODULE__, {}, name: __MODULE__)` does name the process as the module yes
[15:48:59] *** Joins: sgn (~sgn@user/sgn)
[15:49:15] <trafficjam> benwilson512: sorry meant the 2 modules question
[15:49:33] <benwilson512> the second question is a bit challenging to sort out honestly since it depends a lot on what that "variable" is
[15:49:37] <Nicd> Your variable"primary", what is it?
[15:50:37] <Nicd> You might set it in configuration, store it in a genserver/agent, store it in ETS...
[15:50:48] <trafficjam> benwilson512, Nicd: it's a Tesla client
[15:50:57] <benwilson512> I would not have a global tesla client
[15:51:05] <benwilson512> taking a step back though
[15:51:18] <benwilson512> your question is asking in terms of modules and functions but it should really be thinking in terms of processes
[15:51:47] <benwilson512> so you have a single genserver my_app and it does what, everything?
[15:52:25] <trafficjam> benwilson512: i guess before i answer that, does it even make sense to use a GenServer in this case?
[15:52:39] <benwilson512> I don't know what the case is :D
[15:52:39] <trafficjam> (the case being making requests to an api)
[15:53:08] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[15:53:11] <benwilson512> are you making the requests over time indefinitely?
[15:53:21] <benwilson512> or are you pulling something down and calling it a day
[15:53:34] *** Joins: sgn_ (~sgn@user/sgn)
[15:53:41] <trafficjam> The latter i think
[15:54:18] <benwilson512> ah ok, so it's almost more of a script that runs from start to finish?
[15:55:47] <benwilson512> I mean I guess the short answer is: If you have functions that need a value, that value should, 95% of the time, be passed in as an argument
[15:56:06] <benwilson512> this should relatively naturally push you to structure your code so that the minimum number of functions actually need to interact with your tesla client
[15:56:39] <benwilson512> ideally you can split things up into as many pure functions as possible and have a limited number of impure ones
[15:56:53] <Nicd> This is good advice that I wasn't able to write down
[15:58:13] <Nicd> Wasn't able to put into words, that's the thing I wanted to say
[16:00:34] <trafficjam> benwilson512: it just seems a bit bloated to have to define the client everytime i want to make a call to one of my app module functions
[16:01:21] <trafficjam> and as far as i can tell, `client` never changes does it?
[16:01:43] <benwilson512> trafficjam: I haven't used tesla much can you show how you are creating the client?
[16:01:43] <trafficjam> can i use metaprogramming for this perhaps?
[16:03:58] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[16:04:06] <trafficjam> well i have a module, MyApp.Config, which has a `client(key)`, defined here -> https://dpaste.org/DrNu
[16:04:09] *** Joins: sgn_ (~sgn@user/sgn)
[16:05:06] <trafficjam> so at the moment if i want to run MyApp.Group1.task1, i have to do `client = MyApp.Config.client("api_key"); MyApp.Group1.task1(client);`
[16:05:56] <benwilson512> does `api_key` change?
[16:06:31] <benwilson512> over the course of your program that is?
[16:06:34] <trafficjam> benwilson512: nope, in fact i could just use a constant @api_key which reads from get_env 
[16:06:43] <trafficjam> oh then definitely not
[16:06:49] <benwilson512> Then you probably want to use a tesla module client
[16:06:50] <benwilson512> https://hexdocs.pm/tesla/Tesla.html#module-examples
[16:06:57] <benwilson512> instead of the dynamic one
[16:07:46] <benwilson512> either way though your choice is actually relatively the same. If the task doesn't meaningfully depend on the api_key then you don't need to pass it in or the client itself in. However inside of the `task1` instead of trying to access some "global" or "shared" client variable, you should segregate all of your actual calls to the API inside of a purpose built module
[16:08:03] <benwilson512> and have that purpose built module fetch your API key and instantiate a client (if. you were still gonna go the dynamic route)
[16:08:19] <benwilson512> eg
[16:09:36] <benwilson512> https://www.irccloud.com/pastebin/SKEgsNOG/
[16:09:55] <benwilson512> if the client were stateful I'd probably suggest a different route but
[16:10:10] <benwilson512> this seems to fit what you're talking about
[16:17:07] <trafficjam> benwilson512: ah ok, i guess the module `use Tesla` version is the most appropriate then, my only question with that is, if i have several different modules (Group1 for "resource", Group2 for another, etc), would i have to add the `use Tesla; plug ...; plug ...; plug ...;` in each one? (from https://hexdocs.pm/tesla/readme.html#http-client-example)
[16:18:04] <trafficjam> i've not done much elixir programming outside of phoenix, so i don't really know how to structure stuff lol
[16:19:25] <benwilson512> trafficjam: what would differ between them?
[16:19:28] <benwilson512> also
[16:20:16] <benwilson512> just to make sure we're on the same page, your `use Tesla` calls don't happen in your application's logic modules they happen in dedicated modules used to sort of represent or manage the remote service in question
[16:21:10] <trafficjam> i think we're on the same page, i mean my application is basically just a client, so there's not much else
[16:21:42] <trafficjam> and what differs between them is basically just the url
[16:22:03] <trafficjam> (from the elixir side anyway)
[16:22:05] <benwilson512> when you say URL do you mean the domain or the path?
[16:22:13] <trafficjam> the path
[16:22:25] <trafficjam> the api is on a single host
[16:23:20] <trafficjam> so the 'resources' (GET/POST/etc) for "example.com/api/modal_a" i would put into my Group1 module 
[16:23:37] <trafficjam> the 'resources' for "example.com/api/model_b" i would put into my Group2 module, etc
[16:24:02] <benwilson512> if that is the only thing that is changing I don't see the need for multiple `use Tesla` modules
[16:24:10] <benwilson512> you'd have 1 module, and then take the path as an argument
[16:24:46] <trafficjam> how would i reference that module from my Group modules though?
[16:25:13] <benwilson512> let me update my example from earlier
[16:25:14] <benwilson512> https://www.irccloud.com/pastebin/wIN3X594/
[16:25:15] *** Joins: Daren (~Daren@85-76-49-69-nat.elisa-mobile.fi)
[16:25:34] <Daren> Hi, is there a jobs channel i can post an opening in?
[16:26:04] <benwilson512> hey Daren this is basically just the main Elixir IRC channel, there aren't really specialty channels. You might try the forums or slack
[16:26:18] <benwilson512> you can post a link here if you like although it's likely to get lost in the shuffle
[16:26:47] <Daren> thank you
[16:27:00] <trafficjam> benwilson512: ah i see what you're saying, makes perfect sense
[16:27:04] <norrland> Daren: perhaps post it on https://elixirjobs.net/ ? (I have no experience of the site other than that I've stumbled upon it in the past)
[16:27:09] <Daren> yeah it will get lost but either way, here it is
[16:27:10] <Daren> https://equilibrium.jobilla.com/9y5wk-elixirerlang-developer?locale=en
[16:28:56] <Nicd> Daren: the Discord also has a #jobs channel
[16:29:48] <Nicd> interestingly probably half of the Elixir job postings I see nowadays are cryptocurrency related
[16:30:17] <trafficjam> benwilson512: going to try to implement that, thanks ben!
[16:30:26] <benwilson512> trafficjam: no problem, good luck!
[16:34:01] <Daren> Nicd people are figuring out we need good scalability + parallelism etc
[16:37:51] <trafficjam> benwilson512: ok didn't take long for me to hit something i'm unsure about :P basically in hit_api, you have a Tesla.get call, but for other http request types (post/update/etc), should i match on function clauses? e.g. `def hit_api(:get, path, args), do: Tesla.get(...); def hit_api(:post, path, args), do: Tesla.post(...); etc`
[16:38:09] <trafficjam> is that how you would do it?
[16:38:23] <benwilson512> yeah that's definitely one option, there is also nothing special about the `def hit_api` function name it was just an example
[16:38:28] <benwilson512> so you could do `def get` and `def post`
[16:38:34] <Nicd> Daren: ooh Finland! :) nice to see Finnish companies
[16:38:52] <benwilson512> up to you!
[16:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:39:31] <trafficjam> oh ok, thanks ;)
[16:44:05] *** Quits: chenghiz_ (uid349735@id-349735.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:45:27] *** Quits: Daren (~Daren@85-76-49-69-nat.elisa-mobile.fi) (Quit: Client closed)
[16:46:58] <Nicd> aww they left :(
[16:48:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:49:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:01:09] *** Joins: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[17:03:39] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[17:03:59] *** Joins: sgn_ (~sgn@user/sgn)
[17:06:23] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[17:06:45] *** Joins: sgn_ (~sgn@user/sgn)
[17:07:06] <trafficjam> when should i return a response directly vs returning a {:ok, data} / {:error, reason}?
[17:07:50] <trafficjam> specifically Tesla.get returns {:ok, env}, should i return {:ok, env.body} on an {:ok, env} match or should i return env.body directly?
[17:08:00] <benwilson512> if your code intends to do something useful with the error, then return the tuples
[17:08:15] <benwilson512> if your plan is to just raise an exception in such cases, then may as well just write the assertive code that unwraps
[17:10:53] <trafficjam> hmm what sort of things could one do with such an error?
[17:12:24] <trafficjam> i've never really done much error handling before honestly, i just Logger.error(error) if a response is an :ok | :error tuple
[17:12:34] <trafficjam> so not really sure what the options are lol
[17:14:26] <trafficjam> like would raisin an exception have any negative effect on the app?
[17:14:30] <trafficjam> *raising
[17:18:21] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[17:18:46] *** Joins: sgn_ (~sgn@user/sgn)
[17:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:34:47] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[17:34:59] *** Joins: sgn_ (~sgn@user/sgn)
[17:35:00] <trafficjam> also, is the elixir equivalent of root.categories("electronics").products().create(), `root |> categories("electronics") |> products |> create`?
[17:35:36] <trafficjam> or would be it `Root.Categories.Products.create("electronics", ...)
[17:35:58] <trafficjam> like which is more idomatic?
[17:38:48] <trafficjam> like is it ok to function chain / pipe non-pure functions?
[17:39:38] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[17:40:04] *** Joins: sgn_ (~sgn@user/sgn)
[17:40:37] *** Quits: monkeycoder (~monkey@202.185.207.63) (Ping timeout: 240 seconds)
[17:43:54] *** Joins: notzmv (~zmv@user/notzmv)
[17:48:18] <davic> trafficjam: you can have a look at how ecto does it with preload and such
[17:50:19] <davic> basically `Model |> Repo.preload([:categories, :products]) |> Repo.insert()`
[17:54:57] <trafficjam> is that the equivalent of function chaining though?
[17:55:31] <trafficjam> like does Repo.preload(:categories) return a list of %Category{} structs?
[17:59:53] *** Quits: phaleth (~user@user/phaleth) (Quit: phaleth)
[18:00:57] *** Joins: phaleth (~user@user/phaleth)
[18:03:30] *** Joins: mizi (~mizi@user/mizi)
[18:07:17] <rawtaz> davic: was there ever a comment or explanation from github about what they based that ban on? i dont see what he could possibly have violated in the tos by adding some code to his own repo..
[18:07:30] <rawtaz> so im just curious what rationale the would have put out there.
[18:09:59] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[18:10:15] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[18:14:18] <Zarathu> trafficjam: re: error handling, the point is to make you think about it
[18:14:27] <Zarathu> < trafficjam> like would raisin an exception have any negative effect on the app?
[18:14:35] <Zarathu> *should* it have a negative effect on the app?
[18:15:36] <Zarathu> what happens if there's an error but the rest of the system ignores it and continues chugging along? could there potentially be consequences?
[18:19:11] *** Joins: samgranieri (~samgranie@user/samgranieri)
[18:19:59] <trafficjam> Zarathu: the problem is i have no experience writing libraries, so it's kind of difficult for me to reason about from first principles
[18:20:13] <trafficjam> I mean obviously it shouldn't crash the app
[18:20:37] <trafficjam> but more than than that i can't quite say
[18:20:46] <Zarathu> oh, this is a library you're writing?
[18:20:55] <trafficjam> yeah
[18:21:10] <Zarathu> then yeah, your user should be deciding what to do about the error, not the library
[18:21:18] <Zarathu> if they decide an error should crash their app, that should be up to them
[18:21:32] <trafficjam> so i should return :ok || :error?
[18:21:48] <Zarathu> {:ok, any()} | {:error, error()}
[18:22:24] <Zarathu> you could also have a version of the function like `def my_function!` that raises on failure, if it makes sense
[18:23:12] <trafficjam> so as a general rule, should i always use :ok | :error for library functions?
[18:23:43] <trafficjam> (or at least for Tesla responses)
[18:24:06] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:24:37] <Zarathu> what does the function do exactly?
[18:37:33] <trafficjam> Zarathu: well this is the Tesla function -> https://hexdocs.pm/tesla/Tesla.html#get/3
[18:37:44] <Zarathu> yeah it makes an http request
[18:37:47] <Zarathu> but to where, for what purpose
[18:38:05] <trafficjam> well that depends on the content of the url i pass it
[18:38:20] <trafficjam> but basically its for interacting with an api
[18:39:21] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[18:39:42] <Zarathu> a good rule of thumb is to take the word "exception" literally. is it a weird exception to the rule that the function fails? or is it to be expected, with some code always there to handle it when things go wrong?
[18:39:47] *** Joins: sgn (~sgn@user/sgn)
[18:40:56] <trafficjam> well if there was some issue connecting to the api, then i guess you would want some code to handle that?
[18:41:24] <trafficjam> i'm not even clear on what exceptions are though to be honest
[18:41:40] <trafficjam> (i.e. what their significance is)
[18:42:08] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[18:42:16] *** Joins: sgn_ (~sgn@user/sgn)
[18:51:08] *** Joins: Guest62 (~Guest62@131-72-153-186.host.nbstelecom.psi.br)
[18:52:38] *** Quits: Guest62 (~Guest62@131-72-153-186.host.nbstelecom.psi.br) (Client Quit)
[18:54:26] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[18:54:50] *** Joins: sgn (~sgn@user/sgn)
[19:02:48] *** Joins: 073AAHEAI (~sven@dslb-084-057-144-135.084.057.pools.vodafone-ip.de)
[19:05:42] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[19:06:14] *** Quits: samgranieri (~samgranie@user/samgranieri) (Quit: samgranieri)
[19:06:20] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[19:14:33] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[19:14:43] *** Joins: hoppity (~hoppity@S0106b4fbe4e5da7b.cg.shawcable.net)
[19:14:56] *** Joins: sgn (~sgn@user/sgn)
[19:14:59] *** Quits: hoppity (~hoppity@S0106b4fbe4e5da7b.cg.shawcable.net) (Changing host)
[19:14:59] *** Joins: hoppity (~hoppity@user/hoppity)
[19:15:59] <hoppity> Hi guys, I would like to get your recommendations regarding what would be the best way to get a "search + select field" in Phoenix Liveview.
[19:27:21] *** Joins: samgranieri (~samgranie@user/samgranieri)
[19:32:44] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[19:33:06] *** Joins: sgn (~sgn@user/sgn)
[19:35:56] *** Quits: samgranieri (~samgranie@user/samgranieri) (Ping timeout: 256 seconds)
[19:38:39] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[19:38:52] *** Joins: sgn (~sgn@user/sgn)
[19:39:37] *** Joins: samgranieri (~samgranie@user/samgranieri)
[19:40:29] *** Joins: samgranieri_ (~samgranie@user/samgranieri)
[19:40:36] *** Joins: chenghiz_ (uid349735@id-349735.ilkley.irccloud.com)
[19:43:49] *** Quits: samgranieri (~samgranie@user/samgranieri) (Ping timeout: 240 seconds)
[20:02:44] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:80ee:56b1:c7cc:d16d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:08:05] *** Quits: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 256 seconds)
[20:11:48] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[20:12:03] *** Joins: sgn (~sgn@user/sgn)
[20:12:49] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[20:13:14] *** Joins: sgn (~sgn@user/sgn)
[20:15:56] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[20:16:23] *** Joins: sgn (~sgn@user/sgn)
[20:17:06] *** Joins: mahmutov (~mahmutov@5.176.13.95)
[20:18:51] *** Joins: thojanssens (~thojansse@182.232.182.224)
[20:30:59] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[20:31:25] *** Joins: sgn (~sgn@user/sgn)
[20:34:24] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[20:35:21] *** Joins: sgn (~sgn@user/sgn)
[20:39:21] *** Joins: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[21:00:37] *** Quits: trafficjam (~qubes@119.17.42.59) (Ping timeout: 240 seconds)
[21:08:02] *** Quits: arpunk (~arpunk@user/arpunk) (Remote host closed the connection)
[21:18:12] *** Quits: thojanssens (~thojansse@182.232.182.224) (Quit: Leaving)
[21:18:44] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[21:19:07] *** Joins: sgn (~sgn@user/sgn)
[21:21:07] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[21:21:21] *** Joins: sgn (~sgn@user/sgn)
[21:22:14] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[21:22:38] *** Joins: sgn (~sgn@user/sgn)
[21:22:45] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[21:23:37] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Quit: WeeChat 3.4)
[21:23:42] *** Joins: xcm_ (~xcm@user/xcm)
[21:30:45] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:80ee:56b1:c7cc:d16d)
[21:31:55] *** Quits: hoppity (~hoppity@user/hoppity) (Remote host closed the connection)
[21:32:29] *** Joins: hoppity (~hoppity@S0106b4fbe4e5da7b.cg.shawcable.net)
[21:34:58] *** Joins: sgn_ (~sgn@user/sgn)
[21:34:59] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[21:37:12] *** Quits: hoppity (~hoppity@S0106b4fbe4e5da7b.cg.shawcable.net) (Ping timeout: 256 seconds)
[21:44:26] *** Joins: hoppity (~hoppity@S0106b4fbe4e5da7b.cg.shawcable.net)
[21:50:49] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[21:51:10] *** Joins: sgn (~sgn@user/sgn)
[21:56:07] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[21:56:41] *** Quits: samgranieri_ (~samgranie@user/samgranieri) (Read error: Connection reset by peer)
[21:57:55] *** Quits: rx80 (~quassel@user/rx80) ()
[22:00:11] *** Joins: rx80 (~quassel@user/rx80)
[22:00:59] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[22:01:22] *** Joins: sgn (~sgn@user/sgn)
[22:13:57] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[22:14:18] *** Joins: sgn (~sgn@user/sgn)
[22:19:08] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[22:19:33] *** Joins: sgn (~sgn@user/sgn)
[22:20:43] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[22:21:06] *** Joins: sgn (~sgn@user/sgn)
[22:21:09] *** Joins: Guest1953 (~Guest19@2600:8803:1803:4700:b554:ef5b:e3d4:3b05)
[22:23:13] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[22:28:22] *** Joins: mahmutov_ (~mahmutov@5.176.2.142)
[22:29:11] *** Quits: mahmutov (~mahmutov@5.176.13.95) (Ping timeout: 256 seconds)
[22:36:47] *** Joins: samgranieri (~samgranie@user/samgranieri)
[22:54:29] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[22:54:50] *** Joins: sgn (~sgn@user/sgn)
[22:57:45] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[22:58:05] *** Joins: sgn (~sgn@user/sgn)
[22:58:55] *** Quits: PepsiLepreux (~pepsi@2a02:4780:1:1::1:a856) (Quit: WeeChat 1.9.1)
[23:01:20] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[23:01:38] *** Joins: sgn (~sgn@user/sgn)
[23:10:33] *** Quits: Guest1953 (~Guest19@2600:8803:1803:4700:b554:ef5b:e3d4:3b05) (Quit: Client closed)
[23:12:02] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[23:12:23] *** Joins: sgn (~sgn@user/sgn)
[23:24:03] <benwilson512> hoppity: isn't that one of the examples?
[23:24:39] <hoppity> benwilson512: I did not even know there were examples, where can I find them?
[23:24:54] <benwilson512> https://github.com/chrismccord/phoenix_live_view_example
[23:25:01] <benwilson512> not 100% sure how up to date it is but it should be approximately right
[23:25:46] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[23:25:51] *** Joins: sgn_ (~sgn@user/sgn)
[23:26:13] <hoppity> thanks, let me check it out
[23:28:18] *** Quits: sgn_ (~sgn@user/sgn) (Read error: Connection reset by peer)
[23:28:28] *** Joins: sgn (~sgn@user/sgn)
[23:29:09] *** Joins: numkem[m] (~numkemmat@2001:470:69fc:105::1:1a66)
[23:29:19] <hoppity> benwilson512: so yes, the examples do have a search and auto complete, but the auto complete simply suggest the text to put on the input field, it does not enforce the suggestion to be tied to an item in the database if you know what I mean
[23:30:02] <hoppity> what I am trying to achieve is a "search and select" where the item you select has an ID that you can then use in some operation
[23:30:22] <benwilson512> ah
[23:31:08] <hoppity> I've used the Javascript library named "Select2" in the past for this kind of thing but I can never make it work reliably with Liveview plus it does not respect my app's CSS
[23:31:21] <numkem[m]> Hello, I'm trying to wrap my head around Port. I wrote a Go binary that takes as stdin some data and it returns the response as stdout. I'm not sure how to structure the API and the Genserver so that the ports work.
[23:37:02] <numkem[m]> mainly it's the part where I have to wait for the go process to send it's message. I feel there must be another better way to do this
[23:59:26] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
