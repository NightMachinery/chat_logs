[00:00:34] <chiselfuse> why doesn't (x << 8) just shift all away leaving an empty byte?
[00:01:05] <chiselfuse> instead it treats x like an int
[00:01:32] <chiselfuse> i do cast it to an int but that is after the shift
[00:01:58] <chiselfuse> ,cc uint8_t x = 1; printf("%d\n", (int)(x << 8));
[00:02:00] <candide> chiselfuse: 256
[00:02:08] <chiselfuse> ,cc uint8_t x = 1; printf("%d\n", (int)(x << 16));
[00:02:10] <candide> chiselfuse: 65536
[00:05:10] <chiselfuse> what i understand is that x is 8 bits long with value 0x01 (00000001)... binary shifting it 16 bits i would expect it to become 0x00 (00000000)  and then get casted to an int of value 0x00000000
[00:05:22] <fizzie> Integer promotions.
[00:05:28] <chiselfuse> where?
[00:05:35] <chiselfuse> and when
[00:05:41] <chiselfuse> after the shirt?
[00:05:44] <chiselfuse> shift*
[00:06:17] <chiselfuse> or you mean that the literal '16' somehow promoted it?
[00:06:33] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[00:06:59] *** Joins: Red_ (~Red@41.92-221-233.customer.lyse.net)
[00:06:59] <fizzie> No, most arithmetic operators apply integer promotions to their arguments. And those promote all types "smaller" than int.
[00:07:03] <chiselfuse> ,cc uint8_t x = 1; printf("%d\n", (int)(x << ((uint8_t)16)));
[00:07:05] <candide> chiselfuse: 65536
[00:07:39] *** Joins: fapple (~user@92.60.40.199)
[00:07:48] <fizzie> `x` as the left operand of << undergoes integer promotions before the shift even takes place.
[00:07:49] *** Joins: rgrinberg (~textual@2806:101e:7:8d89:9996:a352:abd6:f191)
[00:08:06] <fizzie> ,c11 6.5.7p3
[00:08:07] <candide> http://www.iso-9899.info/n1570.html#6.5.7p3 [Bitwise shift operators] The integer promotions are performed on each of the operands. The type of the result is that of the promoted left operand. If the value of the right operand is negative or is greater than or equal to the width of the promoted left operand, the behavior is undefined.
[00:08:09] <chiselfuse> sorry but wtf
[00:08:17] *** Joins: suss` (~user@user/suss)
[00:08:20] <chiselfuse> it makes no sense why it would do that
[00:08:31] <fizzie> Sorry, but that's just the way it is.
[00:08:40] <chiselfuse> sigh
[00:08:42] *** Quits: fapple (~user@92.60.40.199) (Quit: leaving)
[00:08:51] *** Quits: suss` (~user@user/suss) (K-Lined)
[00:08:51] *** Joins: fapple (~user@92.60.40.199)
[00:09:04] <chiselfuse> there's so much to take into account already, it not getting affected by endianness
[00:09:07] <fizzie> ,c11 6.3.1.1p2
[00:09:09] <candide> http://www.iso-9899.info/n1570.html#6.3.1.1p2 [Boolean, characters, and integers] The following may be used in an expression wherever an int or unsigned int may be used: -- An object or expression with an integer type (other than int or unsigned int) whose integer conversion rank is less than or equal to the rank of int and unsigned int. -- A bit-field of type _Bool, int, signed int, or unsigned int. If a... <truncated; https://0x0.st/oKn4.txt>
[00:09:25] *** Quits: fapple (~user@92.60.40.199) (Client Quit)
[00:09:37] *** Quits: suss (~user@user/suss) (Ping timeout: 240 seconds)
[00:09:48] <fizzie> (The relevant part gets cut off, but that's the bit that defines integer promotions.)
[00:09:52] *** Joins: fapple (~user@92.60.40.199)
[00:10:05] *** Quits: Red (~Red@41.92-221-233.customer.lyse.net) (Ping timeout: 256 seconds)
[00:10:28] <chiselfuse> hold on please
[00:10:34] <chiselfuse> i'm confused about something
[00:11:45] *** Joins: Dotz0cat (~Dotz0cat@h38.71.29.71.dynamic.ip.windstream.net)
[00:11:56] *** Quits: minto (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[00:12:22] *** Joins: SaltHillStroller (~SaltHillS@199.249.111.186)
[00:13:52] <chiselfuse> i can't even read that :P
[00:13:57] <fizzie> For the record, the right operand (the shift count) of the << / >> operators doesn't affect the type of the result. Most binary operators use a set of rules to find a common type for their two operands, and use that for the operation. The shifts are an exception: the type of the result is just the type of the left operand after integer promotions. But the promotions still apply.
[00:13:59] <chiselfuse> "conversion rank"
[00:15:08] <chiselfuse> fizzie: do you know a good place to read up on promotions, conversion ranks, and all this related stuff?
[00:15:31] <sham1> There's always the standard
[00:15:44] <fizzie> Yeah, that term is defined in the immediately preceding paragraph. You probably want to read all of chapter 6.3.1 if you want to get it from the standard.
[00:15:45] <ChoHag> is '#if ((-1 >> 1) == -1)' a working preprocessor test to determine whether your right-shift operator is arithmetic or logical?
[00:16:09] <ChoHag> And does C do either depending on the phase of the moon as I recall or is my memory faulty?
[00:16:37] <sham1> Arithmetic or logical depends on the implementatin
[00:16:40] <fizzie> On most implementations it depends solely on whether the left operand is signed or unsigned.
[00:17:11] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[00:18:01] *** Quits: constxd (~brad@142.134.79.191) (Ping timeout: 256 seconds)
[00:19:30] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[00:19:40] <fizzie> Given that it's implementation-defined, it could even be different for different types, I guess, in which case the preprocessor test wouldn't help. Because in #if, "all signed integer types and all unsigned integer types act as if they have the same representation as, respectively, the types intmax_t and uintmax_t --", so you could test only that.
[00:19:53] *** Quits: seninha (~chatzilla@user/seninha) (Read error: Connection reset by peer)
[00:22:11] <sham1> You'd want something like autoconf or meson for this
[00:22:36] *** Quits: SaltHillStroller (~SaltHillS@199.249.111.186) (Ping timeout: 240 seconds)
[00:22:49] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[00:23:00] *** Quits: fapple (~user@92.60.40.199) (Quit: leaving)
[00:23:06] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:23:15] *** Red_ is now known as Red
[00:25:16] *** Joins: seninha (~chatzilla@user/seninha)
[00:25:56] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 272 seconds)
[00:26:55] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[00:26:55] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[00:26:55] *** Joins: Teukka (~teukka@user/Teukka)
[00:26:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[00:29:18] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[00:29:41] <chiselfuse> fizzie: http://hyse.org/pdf/ModernC.pdf
[00:29:46] <chiselfuse> page 23
[00:30:01] <chiselfuse> do i look at this or is it bad
[00:30:48] *** Parts: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Konversation terminated!)
[00:31:07] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:33:43] <fizzie> I have an entirely irrational dislike of Modern C's style, but I don't think there's anything *wrong* with it.
[00:33:47] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[00:34:43] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[00:34:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 272 seconds)
[00:34:51] <chiselfuse> 6.3.1 is complicated
[00:35:17] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[00:35:32] <chiselfuse> i want something to start basic and simple
[00:35:53] <chiselfuse> about evaluation of things and operations
[00:36:05] *** Joins: karakedi (~eAC53C340@user/karakedi)
[00:37:36] *** Joins: joev (~joev@user/joev)
[00:37:37] <fizzie> Although I'm also not quite sure if it's justified to list integer promotions to apply just generally, without any operator, like that table does. Because the way it's described in the standard, it's the operators that apply promotions to their operands. There's no promotion in assignment, for example; `char c, d; c = d;` doesn't apply promotions to `d`. But I can't immediately come up with an example
[00:37:39] <fizzie> where that would make a difference (except maybe _Generic).
[00:40:45] <chiselfuse> fizzie: it mentions that any "object" of type "other" is "evaluated"
[00:40:59] *** Parts: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Konversation terminated!)
[00:41:30] <chiselfuse> so char x = 6; int a = x;
[00:41:49] <chiselfuse> x in the second statement is evaluated?
[00:42:32] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Ping timeout: 240 seconds)
[00:42:44] *** Joins: finalriposte (~finalripo@2403-5802-74-2--2000.ip6.aussiebb.net)
[00:45:13] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[00:45:34] *** Quits: Narrat (~omnius@p200300df5f126b5206ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[00:45:55] *** Joins: joev (~joev@user/joev)
[00:46:10] <fizzie> Certainly it's evaluated. But in `char x = 6; int a = x;` it also hardly matters whether integer promotions are performed on the `x`, and the resulting `int` is assigned to a, or whether integer promotions are *not* performed, and a `char` value is converted to an `int` as part of the assignment.
[00:46:59] <fizzie> (C11 6.5.16.1p2: "In /simple assignment/ (`=`), the value of the right operand is converted to the type of the assignment expression and replaces the value stored in the object designated by the left operand.")
[00:47:44] <chiselfuse> what's the difference between evaluation and promotion, if any
[00:48:53] <chiselfuse> and conversion
[00:49:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[00:49:11] <nitrix> An expression has to be evaluated to produce a value. Promotions are about conversions between ranks of a similar type.
[00:50:06] <fizzie> Evaluation is just... evaluation. The act of computing the value of an expression. (Integer) promotions are these rules that we've been discussing that implicitly convert some values to others, and conversions are the more general concept of converting a value of one type to another.
[00:50:14] *** Quits: magla (~gelignite@d5364c1c.access.ecotel.net) (Quit: Stay safe!)
[00:50:29] <nitrix> `1 + 1` would be an expression producing the value `2`. long x = 2; // The integer literal `2` of type `int` is converted to `long` for the purpose of the initialization.
[00:51:49] <sham1> Integer promotions IMO are quite, if not the most, complex parts of C
[00:51:50] <nitrix> If you had `1 + (long) 1`, then because one of the operand of the + operator has larger rank, the other gets promoted to the same rank.
[00:52:08] <sham1> It feels rather unintuitive even though the standard does lay it out nicely
[00:53:00] *** Quits: Dotz0cat (~Dotz0cat@h38.71.29.71.dynamic.ip.windstream.net) (Ping timeout: 240 seconds)
[00:53:10] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[00:53:10] <fizzie> `char c = 1; int i = c + 1;` has one expression (`c + 1`), which can be evaluated. As part of that evaluation, integer promotions (as one component of the /usual arithmetic conversions/) call for the value of the subexpression `c` (of type `char`) to be converted to an `int`. After that, both operands of the `+` operator have the same type (`int`). The `+` operator yields an `int` that is the sum of the
[00:53:12] <fizzie> two operands, which is then used to initialize the object designated by `i`.
[00:54:11] <fizzie> If it had been `char c = 1; long i = c + 1;` it'd be exactly the same (the `+` would operate on two `int` values), but at the very end the result of evaluating `c + 1` would be converted to type `long`.
[00:55:31] <nitrix> sham1, ^ That one is where people get caught. They assume the intermediary results have the type of the final result, but they're independent. If there's a conversion, it's at the very end before the assignment.
[00:55:59] <sham1> Mmhm
[00:56:46] <sham1> Also I guess that one could have a pathological example where `char c = 1; int c + 1;` the addition expression would yield an `unsigned int` if sizeof(int) == 1 and char is unsigned. At least I think that in that case it might go through unsigned first
[00:57:24] <fizzie> Yes, that sounds right.
[00:57:25] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[00:57:36] <nitrix> Concur.
[00:58:04] <fizzie> (After promotions, you'd have `unsigned int` + `int`, which selects `unsigned int` as the common real type, because the unsigned type "has rank greater or equal".)
[00:58:22] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:58:28] <sham1> And then it has to convert back to a signed integer somehow
[01:00:04] <chiselfuse> sham1: just to be needlessly clear, you have a typo in your example and it should be `char c = 1; int i = c + 1;` right?
[01:00:26] <sham1> I must admit that I tend to have many casts when doing a lot of these subexpressions because even with being somewhat familiar with the promotions, it can be unintuitive at times
[01:00:28] <sham1> chiselfuse: yes
[01:00:31] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[01:01:04] <nitrix> sham1, Better than my "I just hope the numbers are small" approach to things.
[01:02:05] <sham1> I do also use things like UINT64_C and related macros often for this same purpose
[01:03:00] <nitrix> What's that, UL suffix?
[01:03:06] <sham1> Yes
[01:03:16] *** Joins: Dotz0cat (~Dotz0cat@173.187.82.165)
[01:03:47] <sham1> For example I've been bitten by (1 << 63) before so now I just use (UINT64_C(1) << 63) even though I could just as easily do (1ULL << 63)
[01:03:48] <chiselfuse> fizzie: `char c = 1; int i = c + 1L;` where `1L` is literal long, is c still converted to int and then in the addition converted to long?
[01:04:07] <sham1> c is converted to long
[01:04:28] <fizzie> chiselfuse: Conceptually I think it does get promoted first, yes, but the result's the same, because the conversion is in terms of the *value*, and the promotion doesn't affect the value.
[01:04:29] <chiselfuse> no
[01:04:34] <chiselfuse> that is not consistent
[01:04:46] <chiselfuse> i agree with fizzie
[01:04:56] <sham1> Hm, maybe
[01:04:57] <nitrix> sham1, Bitwise operators always on unsigned types. Saves a lot of mistakes :)
[01:05:05] <sham1> Yes
[01:06:51] <sham1> Well I'd think that `c` would be converted to `long` in the case of `c + 1L` since between the `char` and the `long`, the `long` has a bigger rank IIRC. And similarly to `unsigned long` in the case where `char` is unsigned
[01:07:21] <sham1> Although the reasoning of going from char -> int -> long can also work of course, it leads to the same outcome
[01:07:48] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:08:56] <fizzie> The char â†’ int â†’ long argument is based on the wording of the /usual arithmetic conversions/: "Otherwise, the integer promotions are performed on both operands. Then the following rules are applied to the promoted operands: [the rules that make `long` the common real type of `int` + `long`]."
[01:10:51] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: leaving)
[01:10:59] *** Joins: wroathe (~wroathe@user/wroathe)
[01:11:32] <chiselfuse> fizzie: sham1: if sizeof(int) == 1   and   char is unsigned:   char c = 1; int i = c + 1;    c becomes an int of value 1,  addition: literal 1 becomes int of value 1 and first operand already matching other operand type      2 is evaluated and becomes... unsigned int..?
[01:12:06] <sham1> c would become an unsigned int of 1
[01:12:09] <fizzie> chiselfuse: If sizeof(int) == 1 and char is unsigned (implying UCHAR_MAX > INT_MAX), `c` becomes an `unsigned int`, not `int`.
[01:12:11] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[01:12:23] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[01:13:03] <fizzie> The integer promotions are: "If an `int` can represent *all values of the original type* [emphasis added], the value is converted to an `int`; otherwise, it is converted to an `unsigned int`."
[01:13:05] <chiselfuse> and why doesn't it just become an unsigned char?
[01:13:27] <sham1> Well it is
[01:13:55] *** Joins: pnbeast (~pnbeast@2601:140:4280:3800::1)
[01:13:56] <fizzie> Because the integer promotions convert all types with less rank than `int` to either `int` or `unsigned int`. That's why they're called *promotions*.
[01:14:04] <sham1> Because `char` is weird in that unlike other integer types which are either specified to have a specific signedness or are signed by default, `char` being signed or unsigned is implementation defined for some reason
[01:14:31] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[01:14:36] <sham1> So in the pathological example since `char` is unsigned, it's the same as `unsigned char` and thus it gets promoted to `unsigned int`
[01:15:33] <fizzie> On most systems, though, an `unsigned char` also promotes to (signed) `int`, because a signed int tends to be capable of representing all `unsigned char` values.
[01:17:10] <fizzie> The fact that the promotion changes the signedness (when all the values are representable) makes a lot of people unhappy. Here's the rationale's (emotionally unconvincing) argument why it's the "better" choice, though: https://0x0.st/-YVn.txt
[01:18:00] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[01:20:48] *** Joins: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net)
[01:20:48] *** Quits: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net) (Changing host)
[01:20:48] *** Joins: wroathe (~wroathe@user/wroathe)
[01:22:22] *** Joins: System_Error (~SystemErr@user/systemerror)
[01:22:38] <chiselfuse> i'm still a bit far back and i'm trying...   so    sizeof(int) == 1 and char is unsigned:  char c = 1; int i = c + 1;   c is unsigned char of which highest value cannot be represented by int, so it is promoted to unsigned int,    literal 1 is promoted to int      addition:  unsigned int has higher values than int so literal 1 is promoted to unsigned int       after evaluation,    the whole expression is now
[01:22:44] <chiselfuse> unsigned int, it is converted to unsigned char and assigned
[01:22:50] <chiselfuse> you know what would be real nice?
[01:23:00] <chiselfuse>  a chunky example that covers all cases
[01:23:07] <fizzie> Well, the literal `1` doesn't need any promotion, it's already a (signed) int.
[01:23:25] <chiselfuse> hmm
[01:23:35] <fizzie> And the "addition: unsigned int has higher values than int so literal 1 is promoted to unsigned int" is a bit of an approximation of the actual rules.
[01:23:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[01:23:57] *** Quits: Akuli (~Akuli@82-203-160-97.bb.dnainternet.fi) (Quit: Akuli)
[01:24:29] <chiselfuse> i really want (even if i'll write it) an example that covers every case
[01:24:53] <chiselfuse> with paragraphs describing each step
[01:25:01] *** Joins: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[01:25:22] <chiselfuse> not all operators and types, just a few but well documented and where to get ranks etc..
[01:25:37] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[01:27:17] *** Quits: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[01:28:46] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[01:33:23] *** Quits: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[01:33:45] *** Quits: Andrm (~Andrm@190.244.62.157) (Quit: Client closed)
[01:36:45] <chiselfuse> < sham1> And then it has to convert back to a signed integer somehow
[01:36:54] <chiselfuse> where in your example?
[01:37:08] <sham1> Well, you're assigning c + 1 to an int instead of an unsigned int
[01:37:13] <chiselfuse> pathological one
[01:37:25] <chiselfuse> hmm
[01:38:00] <sham1> Yes
[01:38:09] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[01:39:27] *** Joins: wroathe (~wroathe@user/wroathe)
[01:40:37] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[01:41:24] *** Quits: alch (~alch@151.38.177.139) (Ping timeout: 240 seconds)
[01:43:17] *** Joins: alch (~alch@151.38.195.15)
[01:45:06] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 272 seconds)
[01:46:20] *** Quits: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net) (Remote host closed the connection)
[01:46:56] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e14b:875c:3570:34de) (Quit: WeeChat 3.3)
[01:47:04] *** Joins: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net)
[01:51:26] *** Quits: Dotz0cat (~Dotz0cat@173.187.82.165) (Ping timeout: 272 seconds)
[01:51:47] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[01:51:47] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:54:23] *** Quits: alch (~alch@151.38.195.15) (Quit: leaving)
[01:56:48] *** Joins: Dotz0cat (~Dotz0cat@71.31.14.201)
[01:58:32] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[02:01:24] *** Quits: Inline (~Inline@2a02:908:1252:7a80::175) (Ping timeout: 240 seconds)
[02:01:44] *** Joins: andro (~stupidfox@user/stupidfox)
[02:02:17] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[02:05:54] *** Joins: hashfunc1fa5 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:06:12] *** Joins: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net)
[02:06:12] *** Quits: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net) (Changing host)
[02:06:12] *** Joins: wroathe (~wroathe@user/wroathe)
[02:07:23] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[02:07:40] *** Quits: ekathva (~ekathva@n2gvphjzi3l3fwqfx-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[02:07:50] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 260 seconds)
[02:07:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:08:59] *** Joins: mrig (~mrig@user/mrig)
[02:10:44] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[02:14:47] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[02:16:20] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:18:02] *** Joins: cust (amaama@2607:f2c0:f00f:2500::3)
[02:19:59] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:20:06] *** Quits: rgrinberg (~textual@2806:101e:7:8d89:9996:a352:abd6:f191) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:20:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:23:17] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 252 seconds)
[02:23:44] *** Quits: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Ping timeout: 272 seconds)
[02:25:13] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[02:25:21] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:26:30] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:27:34] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[02:27:46] *** Joins: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com)
[02:29:16] <goodfella> sham1poo
[02:29:36] *** Joins: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net)
[02:29:44] <goodfella> sham1 don't mind me i just bored ( and going to sleep asap ) k
[02:30:09] <goodfella> good night
[02:34:03] *** Joins: pizdets_ (~pizdets@183.182.114.254)
[02:34:29] *** Joins: pony (sid524992@smol/hors)
[02:35:12] *** Quits: pizdets (~pizdets@183.182.114.101) (Ping timeout: 265 seconds)
[02:35:46] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[02:39:23] *** Joins: de-facto_ (~de-facto@user/de-facto)
[02:39:28] *** Joins: bindu_ (~bindu@user/bindu)
[02:39:35] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[02:39:36] *** Joins: slidercrank (~slidercra@user/slidercrank)
[02:39:37] *** Quits: goodfella (~archer@user/tessio) (Quit: see you in the morning)
[02:39:55] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[02:39:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[02:39:55] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 240 seconds)
[02:39:55] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[02:40:07] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[02:40:15] *** Quits: tusko (~yeurt@user/tusko) (Ping timeout: 240 seconds)
[02:40:26] *** Joins: teepee (~teepee@openscad/teepee)
[02:40:29] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[02:40:30] *** Joins: kish` (~aqua@user/aqua)
[02:40:32] *** Joins: tusko (~yeurt@user/tusko)
[02:40:36] *** Quits: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[02:40:38] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:41:26] *** bindu_ is now known as bindu
[02:41:34] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-e428-cc41-f578-ae14.res6.spectrum.com) (Read error: Connection reset by peer)
[02:42:12] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-943f-b78d-3dab-f571.res6.spectrum.com)
[02:42:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:42:49] *** Quits: Guest37 (~Guest37@host-92-4-196-248.as13285.net) (Quit: Client closed)
[02:43:31] *** de-facto_ is now known as de-facto
[02:45:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[02:45:39] *** Quits: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se) (Ping timeout: 268 seconds)
[02:46:06] *** Joins: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net)
[02:47:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[02:48:23] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-107-54.pa.qld.optusnet.com.au)
[02:48:30] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:49:01] *** Joins: constxd (~brad@142.134.79.191)
[02:49:24] *** Joins: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[02:49:50] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[02:49:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[02:49:56] *** Joins: miremeister (uid387155@id-387155.uxbridge.irccloud.com)
[02:51:02] *** Joins: Dotz0cat_ (~Dotz0cat@h72.233.186.173.dynamic.ip.windstream.net)
[02:51:33] *** Quits: Dotz0cat (~Dotz0cat@71.31.14.201) (Ping timeout: 250 seconds)
[02:51:55] *** Dotz0cat_ is now known as Dotz0cat
[02:57:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:57:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:57:08] *** Joins: wroathe (~wroathe@user/wroathe)
[02:57:41] *** Joins: rgrinberg (~textual@187.223.63.190)
[03:01:42] *** Joins: eGd0r (~egd0r@user/eGd0r)
[03:02:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[03:02:29] *** Joins: suss (~user@user/suss)
[03:03:01] *** Joins: hiroshi_ (~freedom@151.43.81.245)
[03:03:47] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[03:05:04] *** Quits: eGd0r (~egd0r@user/eGd0r) (Quit: Leaving)
[03:05:52] *** Joins: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[03:06:02] *** Quits: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Client Quit)
[03:07:09] *** Quits: Jong (~Jong@163.114.132.1) (Ping timeout: 256 seconds)
[03:09:35] *** Joins: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se)
[03:10:27] *** miremeister is now known as levi
[03:11:14] *** levi is now known as zoe
[03:11:35] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[03:12:57] *** Quits: kts (~kts@103.73.237.18) (Ping timeout: 240 seconds)
[03:13:57] *** zoe is now known as levi__
[03:14:31] *** Quits: Dotz0cat (~Dotz0cat@h72.233.186.173.dynamic.ip.windstream.net) (Ping timeout: 256 seconds)
[03:15:21] *** Quits: reset (~reset@user/reset) (Quit: reset)
[03:16:37] *** Joins: Guest24 (~Guest24@2601:645:8480:1eb1:1c75:7b24:1647:781c)
[03:16:57] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:18:58] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:19:21] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[03:20:14] *** Joins: joev (~joev@user/joev)
[03:21:26] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:21:54] *** Joins: hashfunc1818 (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be)
[03:22:35] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[03:22:47] *** Quits: andro (~stupidfox@user/stupidfox) (Ping timeout: 256 seconds)
[03:23:08] *** Quits: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com) (Quit: The true sign of intelligence is not knowledge but imagination.)
[03:25:07] *** Quits: hashfunc1fa5 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[03:26:17] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[03:26:35] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[03:27:03] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[03:27:33] *** Joins: joev (~joev@user/joev)
[03:29:21] *** Joins: nermur[m] (~nermurmat@2001:470:69fc:105::1:ccc9)
[03:29:50] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:30:18] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:23] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 252 seconds)
[03:30:44] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:12] *** Joins: reset (~reset@user/reset)
[03:31:49] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Quit: Leaving)
[03:33:47] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:34:16] *** Quits: GD-IRC (~quassel@autistic.space) (Ping timeout: 250 seconds)
[03:35:26] *** Joins: oxfuxxx (~oxfuxxx@217.138.213.28)
[03:36:06] *** Joins: goepsilongo_ (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[03:36:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[03:36:47] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[03:36:57] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-943f-b78d-3dab-f571.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:37:03] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 250 seconds)
[03:38:28] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 272 seconds)
[03:39:48] *** Quits: oxfuxxx (~oxfuxxx@217.138.213.28) (Ping timeout: 240 seconds)
[03:40:12] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:40:53] *** Quits: bnchs___ (~bnchs@160.177.101.13) (Ping timeout: 256 seconds)
[03:41:11] *** Quits: adip (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 245 seconds)
[03:41:24] *** Quits: adip_ (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[03:42:20] *** Joins: Wulf (~Wulf@user/wulf)
[03:43:20] *** Quits: hiroshi_ (~freedom@151.43.81.245) (Quit: hiroshi_)
[03:44:54] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[03:45:08] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[03:45:42] *** Joins: teepee (~teepee@openscad/teepee)
[03:46:21] *** Quits: Guest8574 (~Guest@181.95.237.11) (Remote host closed the connection)
[03:47:34] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[03:50:05] *** Joins: andro (~stupidfox@user/stupidfox)
[03:50:39] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:50:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:50:40] *** Joins: wroathe (~wroathe@user/wroathe)
[03:59:59] *** Quits: Guest24 (~Guest24@2601:645:8480:1eb1:1c75:7b24:1647:781c) (Quit: Client closed)
[04:01:27] *** Quits: candide (~pbot3@about/c/bot/candide) (Remote host closed the connection)
[04:01:30] <constxd> kings
[04:01:41] *** Joins: candide (~pbot3@about/c/bot/candide)
[04:02:18] *** Joins: Akiva (~Akiva@user/Akiva)
[04:02:50] *** Joins: Soni (~quassel@autistic.space)
[04:08:32] <pony> hi
[04:11:25] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[04:14:01] *** Quits: X-Scale (~ARM@31.22.162.17) (Ping timeout: 256 seconds)
[04:14:01] *** X-Scale` is now known as X-Scale
[04:15:49] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[04:15:55] *** Joins: Jong (~Jong@2620:10d:c090:400::5:804e)
[04:16:58] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[04:17:11] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[04:17:19] <pony> done any C programming lately?
[04:17:27] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[04:19:17] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:20:50] <constxd> yes
[04:20:55] <constxd> pony: have you?
[04:21:03] <pony> yeah
[04:23:56] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:23:58] <constxd> pony: let's see
[04:26:36] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-107-54.pa.qld.optusnet.com.au) (Ping timeout: 272 seconds)
[04:27:14] *** Quits: andro (~stupidfox@user/stupidfox) (Ping timeout: 272 seconds)
[04:32:09] *** Quits: moose (~moose@user/moose) (Quit: The system has requested shutdown. Reason: AC Po...)
[04:39:00] *** Joins: andro (~stupidfox@user/stupidfox)
[04:39:20] *** Joins: ymwm (~yingmanwu@117.26.69.52)
[04:42:32] *** Joins: X-Scale` (~ARM@89.214.150.15)
[04:43:39] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-225.cspire.com) (Read error: Connection reset by peer)
[04:44:02] *** Quits: CodePoint (~CodePoint@2600:1700:3070:3790:3df8:cd30:3e5c:fc25) (Quit: CodePoint)
[04:44:58] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[04:45:01] *** X-Scale` is now known as X-Scale
[04:46:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:47:25] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:50:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[04:50:57] *** Quits: suss (~user@user/suss) (Remote host closed the connection)
[04:52:47] *** Joins: suss (~user@user/suss)
[04:55:58] *** Parts: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Konversation terminated!)
[04:58:53] *** Joins: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[05:00:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[05:02:01] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-225.cspire.com)
[05:04:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[05:06:01] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:06:27] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[05:06:40] *** Joins: m4v (~znc@ubuntu/member/m4v)
[05:06:41] *** Joins: wroathe (~wroathe@68-168-191-143.fttp.usinternet.com)
[05:06:41] *** Quits: wroathe (~wroathe@68-168-191-143.fttp.usinternet.com) (Changing host)
[05:06:41] *** Joins: wroathe (~wroathe@user/wroathe)
[05:10:56] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[05:12:02] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[05:13:42] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[05:14:13] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[05:16:51] *** Joins: frost (~frost@user/frost)
[05:21:43] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 272 seconds)
[05:23:52] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[05:24:14] *** Quits: beepbooptheory (~mik@c-73-13-112-194.hsd1.pa.comcast.net) (Ping timeout: 272 seconds)
[05:28:51] *** Joins: moose (~moose@user/moose)
[05:29:46] *** Joins: Viewday118 (~Viewday@user/viewday)
[05:31:27] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:31:28] *** Viewday118 is now known as Viewday11
[05:32:59] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:37:20] *** Joins: epony (epony@user/epony)
[05:38:07] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[05:39:17] *** Quits: Zenton (~user@user/zenton) (Ping timeout: 240 seconds)
[05:39:24] *** Quits: levi__ (uid387155@id-387155.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:40:52] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:43:54] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 260 seconds)
[05:45:46] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-225.cspire.com) (Ping timeout: 272 seconds)
[05:46:50] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-107-54.pa.qld.optusnet.com.au)
[05:47:15] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: leaving)
[05:48:05] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-107-54.pa.qld.optusnet.com.au) (Read error: Connection reset by peer)
[05:48:56] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 272 seconds)
[05:49:51] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[05:55:22] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[05:55:58] *** Joins: Dotz0cat (~Dotz0cat@h235.244.19.98.static.ip.windstream.net)
[05:59:42] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 272 seconds)
[05:59:49] *** Joins: Dotz0cat_ (~Dotz0cat@75.90.117.174)
[06:01:07] *** Quits: Dotz0cat (~Dotz0cat@h235.244.19.98.static.ip.windstream.net) (Ping timeout: 256 seconds)
[06:01:07] *** Dotz0cat_ is now known as Dotz0cat
[06:07:38] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[06:09:57] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:10:32] *** Joins: moog (~moog@107.126.53.115)
[06:10:36] *** Joins: justAstache (~justache@user/justache)
[06:11:09] *** Joins: wroathe (~wroathe@68-168-191-143.fttp.usinternet.com)
[06:11:09] *** Quits: wroathe (~wroathe@68-168-191-143.fttp.usinternet.com) (Changing host)
[06:11:09] *** Joins: wroathe (~wroathe@user/wroathe)
[06:12:01] *** Quits: moog_ (~moog@107.126.53.115) (Ping timeout: 245 seconds)
[06:15:46] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[06:15:59] *** Joins: wroathe (~wroathe@68-168-191-143.fttp.usinternet.com)
[06:15:59] *** Quits: wroathe (~wroathe@68-168-191-143.fttp.usinternet.com) (Changing host)
[06:15:59] *** Joins: wroathe (~wroathe@user/wroathe)
[06:17:24] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[06:19:42] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[06:24:02] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[06:33:00] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[06:33:16] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 272 seconds)
[06:37:03] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:f177:9312:a864:9747)
[06:37:35] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:38:46] *** Joins: soul-d (~uknown@user/soul-d)
[06:41:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[06:41:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:44:59] *** Joins: seninha (~chatzilla@user/seninha)
[06:51:47] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[06:53:10] *** Quits: pert (~pert@fsf/member/pert) (Read error: Connection reset by peer)
[06:55:13] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:59:51] *** Joins: jinsl00000 (~jinsl0000@180.88.96.1)
[07:00:30] *** Quits: andro (~stupidfox@user/stupidfox) (Ping timeout: 272 seconds)
[07:02:22] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:02:34] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[07:04:35] *** Quits: jinsl00000 (~jinsl0000@180.88.96.1) (Ping timeout: 256 seconds)
[07:07:18] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:09:33] *** Joins: hanzo (uid532183@user/hanzo)
[07:10:49] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:14:24] *** Joins: andro (~stupidfox@user/stupidfox)
[07:17:01] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:751f:c2d3:24b7:e2fb)
[07:28:48] *** Quits: root____ (~root@5.2.79.79) (Quit: Lost terminal)
[07:34:36] *** Quits: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:22] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:39:47] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:40:46] *** Joins: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net)
[07:46:06] *** Quits: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 272 seconds)
[07:46:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:46:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:46:20] *** Joins: wroathe (~wroathe@user/wroathe)
[07:49:02] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:51:54] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Remote host closed the connection)
[07:52:06] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[07:53:32] *** Joins: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net)
[07:53:35] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 250 seconds)
[07:55:38] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[07:57:51] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 256 seconds)
[07:58:55] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[07:59:23] *** Joins: hinata (~hinata@2409:4042:2c0e:efa6:4de7:766d:3ef9:c503)
[08:00:16] *** Quits: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[08:12:05] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[08:12:06] *** Joins: lfs (~lfs@5.2.79.79)
[08:12:26] *** Quits: hashfunc1818 (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be) (Remote host closed the connection)
[08:13:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:16:09] *** Joins: angelacrust (~angelacru@171.50.163.218)
[08:19:39] *** Joins: CygniX_ (~CygniX@2a01:8740:1:727:4e:80:7f:2d)
[08:20:33] *** Quits: CygniX (~CygniX@2a01:8740:1:727:4e:80:7f:2d) (Read error: Connection reset by peer)
[08:21:02] *** Quits: xel (~xel@user/xel) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[08:22:32] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:25:20] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[08:25:49] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[08:27:53] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[08:30:43] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:34:29] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[08:35:04] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:42:39] *** Quits: drbeco (~beco@2804:351c:dd02:6800:c024:382c:90ec:dcb6) (Quit: Leaving)
[08:48:18] *** Joins: ekathva (~ekathva@n2gvphuai7dnh8dcm-1.v6.elisa-mobile.fi)
[08:49:42] *** Joins: vicfred (~vicfred@user/vicfred)
[08:50:33] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[08:51:04] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[08:51:27] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[08:51:50] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:52:18] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[08:52:43] *** Joins: kish` (~aqua@user/aqua)
[08:52:57] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 240 seconds)
[09:00:04] *** Quits: kish` (~aqua@user/aqua) (K-Lined)
[09:02:21] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[09:08:48] *** Quits: tusko (~yeurt@user/tusko) (Remote host closed the connection)
[09:08:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:09:10] *** Joins: tusko (~yeurt@user/tusko)
[09:09:26] <pony> hi
[09:11:17] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 240 seconds)
[09:11:39] *** Joins: semeion (~semeion@user/semeion)
[09:12:45] <dave0> hi pony
[09:12:50] <pony> o/
[09:14:55] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[09:15:18] *** Quits: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:15:48] *** Quits: lfs (~lfs@5.2.79.79) (Quit: Lost terminal)
[09:16:37] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[09:21:14] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[09:27:30] *** Joins: malina (~malina@user/malina)
[09:29:17] *** Joins: zer0x_ (~zer0x@58.186.58.26)
[09:31:15] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 272 seconds)
[09:32:36] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[09:43:56] *** Joins: miqztee (~username@user/miqztee)
[09:44:18] *** Joins: semeion (~semeion@user/semeion)
[09:44:26] *** Quits: soapsudsxx (~soapsudsx@209.221.40.142) (Remote host closed the connection)
[09:47:35] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:49:14] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[09:49:40] *** Joins: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl)
[09:53:28] *** Quits: manjaroi3 (~manjaro-i@218.233.99.3) (Remote host closed the connection)
[09:56:58] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[10:00:57] *** Joins: adip (~adip@den37.neoplus.adsl.tpnet.pl)
[10:00:59] *** Joins: adip_ (~adip@den37.neoplus.adsl.tpnet.pl)
[10:01:55] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[10:05:30] *** Quits: angelacrust (~angelacru@171.50.163.218) (Quit: Client closed)
[10:07:17] *** Joins: pulse (~pulse@user/pulse)
[10:08:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[10:11:50] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[10:12:42] *** Quits: Thedarkb1 (~Thedarkb@82.3.80.190) (Remote host closed the connection)
[10:12:53] *** Joins: Thedarkb1 (~Thedarkb@82.3.80.190)
[10:16:08] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[10:16:58] *** Joins: System_Error (~SystemErr@user/systemerror)
[10:22:21] *** Quits: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 256 seconds)
[10:22:21] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 256 seconds)
[10:23:04] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[10:23:15] *** Joins: DonRichie (~DonRichie@ricl.de)
[10:24:06] *** Joins: root____ (~root@5.2.79.79)
[10:24:55] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[10:24:58] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Quit: ERC (IRC client for Emacs 27.1))
[10:25:30] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[10:25:30] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 250 seconds)
[10:25:32] *** Joins: goodfella (~archer@user/tessio)
[10:29:37] *** Quits: rgrinberg (~textual@187.223.63.190) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:29:50] *** Joins: beowuff (~beowuff@50.35.126.161)
[10:31:59] *** Joins: Atque (~Atque@user/atque)
[10:32:48] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[10:35:23] *** Quits: beowuff (~beowuff@50.35.126.161) (Quit: Leaving)
[10:35:47] *** Joins: scchan (~scchan@183.246.21.1)
[10:40:40] *** Quits: scchan (~scchan@183.246.21.1) (Remote host closed the connection)
[10:41:58] *** Joins: Atque (~Atque@user/atque)
[10:47:00] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[10:49:34] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:53:30] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[10:54:00] *** Joins: System_Error (~SystemErr@user/systemerror)
[10:54:02] *** Joins: duckpunch (~duckpunch@d28-23-90-26.dim.wideopenwest.com)
[10:57:41] *** Joins: hashfunc50e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[10:59:03] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:8087:fa58:173a:8b14)
[11:01:53] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:03:03] *** Quits: pnbeast (~pnbeast@2601:140:4280:3800::1) (Quit: WeeChat 2.7.1)
[11:03:12] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 250 seconds)
[11:04:35] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[11:05:17] *** Joins: d_low (~dlow@107-210-161-84.lightspeed.tukrga.sbcglobal.net)
[11:05:33] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:07:08] *** Joins: data68 (~data@2a02:908:a65:3d80:9c91:5ac0:2381:828b)
[11:09:00] *** Quits: duckpunch (~duckpunch@d28-23-90-26.dim.wideopenwest.com) (Ping timeout: 240 seconds)
[11:09:13] *** Joins: duckpunch (~duckpunch@31.sub-174-210-224.myvzw.com)
[11:09:39] *** Joins: mrig (~mrig@user/mrig)
[11:13:05] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:18:15] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[11:18:30] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[11:19:53] *** Quits: duckpunch (~duckpunch@31.sub-174-210-224.myvzw.com) (Ping timeout: 256 seconds)
[11:20:57] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:8087:fa58:173a:8b14) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:21:33] *** Joins: duckpunch (~duckpunch@216.sub-174-210-224.myvzw.com)
[11:23:45] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[11:25:09] <shiroyasha> Rewriting my i3status thingy to C was nice. It's only for displaying current time, and went down to a constant 888k RES memory from a previous ~10MB (because of Python).
[11:25:24] <shiroyasha> I'm not a fan of the json-c dependency, but I guess that was a necessary evil.
[11:29:42] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:30:54] <cytokine_storm> shiroyasha: can i see your program
[11:33:34] *** Quits: root____ (~root@5.2.79.79) (Quit: Lost terminal)
[11:34:49] *** Joins: aradesh (~aradesh@user/aradesh)
[11:35:27] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Ping timeout: 256 seconds)
[11:37:51] <ChoHag> 800K to show the time?
[11:38:14] <ChoHag> I guess 640 isn't enough for anybody.
[11:39:08] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:39:33] <masoudd> where does jq come in when you are just displaying time?
[11:39:50] <masoudd> oh json
[11:40:07] <masoudd> still, json?
[11:40:35] *** Quits: scaramanga (~scara@1.239.35.120) (Read error: Connection reset by peer)
[11:43:13] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[11:45:32] *** Joins: Rounin (~david@84.212.130.215)
[11:46:08] *** Quits: cherrry9 (~jan@ded246.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[11:46:08] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 272 seconds)
[11:48:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[11:48:56] <goodfella> freddi
[11:50:11] <dave0> how does it compare to xclock ?
[11:50:18] *** Joins: Inline (~Inline@p200300cd470c79003cbee1ceac867d03.dip0.t-ipconnect.de)
[11:55:38] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[11:58:02] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:04:15] *** Quits: hinata (~hinata@2409:4042:2c0e:efa6:4de7:766d:3ef9:c503) (Quit: Leaving)
[12:04:37] *** Quits: data68 (~data@2a02:908:a65:3d80:9c91:5ac0:2381:828b) (Ping timeout: 240 seconds)
[12:04:41] <shiroyasha> ChoHag: A simple `for (int i = 0; i < 10; i++) { printf("%d\n", i); sleep(1); }` sits at 764k, so I guess 900k looks fine. Maybe I'm misreading htop output and it's actually bytes.
[12:05:16] <shiroyasha> cytokine_storm: https://0x0.st/oKRR.c  suggestions welcome.
[12:07:10] *** Joins: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net)
[12:08:30] <dave0> shiroyasha: looks alright, does it work?
[12:10:13] <shiroyasha> Yes, I've had it for a few days now and it has survived so far.
[12:11:11] <dave0> cool
[12:11:16] <dave0> nailed it
[12:13:01] <shiroyasha> json-c is weird using the term "put" instead of something like "free", "release", "destroy", "cleanup", etc, but I'm probably missing some context here.
[12:19:14] *** Quits: hashfunc50e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[12:19:26] *** Joins: Burgundy (~NA@86.121.143.206)
[12:20:13] *** Joins: Klinda (~superleag@user/klinda)
[12:22:25] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[12:22:28] <Dean> hello
[12:22:56] *** Joins: LargeRon (~igloo@c-73-201-249-142.hsd1.md.comcast.net)
[12:24:28] <masoudd> ah i3 needs json input. makes sense
[12:25:06] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:25:17] *** Quits: LargeRon (~igloo@c-73-201-249-142.hsd1.md.comcast.net) (Client Quit)
[12:28:09] *** Quits: andro (~stupidfox@user/stupidfox) (Ping timeout: 256 seconds)
[12:30:44] *** Joins: cytokine` (~user@47.29.246.207)
[12:31:02] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Ping timeout: 240 seconds)
[12:31:50] *** Joins: arinov (~arinov@213.194.126.155)
[12:33:46] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 250 seconds)
[12:34:16] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[12:42:08] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[12:43:23] *** Joins: frost (~frost@user/frost)
[12:45:24] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:f177:9312:a864:9747) (Ping timeout: 240 seconds)
[12:46:24] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[12:47:25] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[12:47:54] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[12:48:47] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[12:52:18] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[12:54:13] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[12:54:52] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:55:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:00:34] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:01:33] *** Quits: bebyx (~Thunderbi@user/bebyx) (Client Quit)
[13:01:44] *** Joins: bebyx1 (~Thunderbi@user/bebyx)
[13:02:23] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[13:03:07] *** Joins: seninha (~chatzilla@user/seninha)
[13:04:02] *** bebyx1 is now known as bebyx
[13:12:37] *** Quits: duckpunch (~duckpunch@216.sub-174-210-224.myvzw.com) (Read error: Connection reset by peer)
[13:12:46] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[13:12:46] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:1:d69a:97d2:7a78)
[13:13:35] *** Joins: bnchs (~bnchs@160.177.101.13)
[13:14:03] *** Joins: kts (~kts@103.73.237.122)
[13:15:48] *** Quits: Inline (~Inline@p200300cd470c79003cbee1ceac867d03.dip0.t-ipconnect.de) (Quit: Leaving)
[13:16:33] *** Joins: duckpunch (~duckpunch@d28-23-90-26.dim.wideopenwest.com)
[13:16:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:17:07] *** Joins: mrig (~mrig@user/mrig)
[13:17:58] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[13:18:15] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[13:19:55] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:21:05] *** Joins: hinata (~hinata@2409:4042:2c0e:efa6:4de7:766d:3ef9:c503)
[13:21:32] *** Joins: durpo03 (~82y42jrvw@125.21.249.98)
[13:24:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[13:24:31] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:24:39] *** Quits: kts (~kts@103.73.237.122) (Quit: Konversation terminated!)
[13:26:35] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.42)
[13:32:36] *** Quits: pounce (~pounce@facebook/engineering/pounce) (Ping timeout: 240 seconds)
[13:36:52] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[13:39:04] *** Joins: andro (~stupidfox@user/stupidfox)
[13:40:13] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[13:40:25] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[13:40:40] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:43:26] *** Quits: wingsorc__ (~wingsorc@user/wingsorc) (Quit: Leaving)
[13:49:04] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[13:51:30] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[13:51:33] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[13:54:03] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[13:54:18] *** Joins: not_not_not (~not_not_n@5.2.74.230)
[13:54:18] <not_not_not> is
[13:54:18] *** Quits: not_not_not (~not_not_n@5.2.74.230) (Read error: Connection reset by peer)
[13:55:12] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:55:15] *** Joins: not_not_not (~not_not_n@5.2.74.230)
[13:55:15] <not_not_not> is
[13:55:15] *** Quits: not_not_not (~not_not_n@5.2.74.230) (Read error: Connection reset by peer)
[13:55:38] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[13:55:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[13:56:15] *** Joins: alch (~alch@151.38.145.63)
[13:57:05] *** Joins: haliucinas (~haliucina@5.20.153.21)
[14:00:39] *** Joins: pounce (~pounce@facebook/engineering/pounce)
[14:01:48] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Remote host closed the connection)
[14:02:50] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:03:01] *** Joins: not_not_not (~not_not_n@5.2.74.230)
[14:03:01] <not_not_not> is
[14:03:17] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[14:03:26] <DPA> I don't know json-c, but a "put" function usually indicates some sort of refcounting or gc.
[14:03:46] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:04:56] *** Joins: fe23 (~fe23@2409:8a34:46c:f80:1033:205:13b7:8fcf)
[14:07:05] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[14:10:17] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:10:53] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Read error: Connection reset by peer)
[14:11:29] *** Joins: Giovanni (~Giovanni@87.251.20.36)
[14:11:32] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[14:11:51] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[14:12:25] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[14:14:54] *** Quits: rampart (~rampart@2.sub-174-250-16.myvzw.com) (Remote host closed the connection)
[14:15:11] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:15:29] *** Joins: rampart (~rampart@2.sub-174-250-16.myvzw.com)
[14:22:04] *** Joins: jellie (~luv_panda@user/jellie)
[14:24:19] *** Joins: shivesh (~shivesh@user/shivesh)
[14:27:13] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-694e-debf-2286-ef0f.res6.spectrum.com)
[14:29:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:29:48] *** Quits: goepsilongo_ (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Ping timeout: 240 seconds)
[14:31:00] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 240 seconds)
[14:31:01] *** jellie is now known as zipper
[14:31:50] *** Joins: thevishy (~Nishant@2405:201:f005:c007:7c10:43e8:a548:3fb5)
[14:32:37] *** Joins: kts (~kts@103.73.237.86)
[14:32:51] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:33:09] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[14:34:07] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[14:36:32] *** Joins: Zenton (~user@user/zenton)
[14:38:27] *** Quits: durpo03 (~82y42jrvw@125.21.249.98) (Quit: Leaving)
[14:40:05] *** Joins: Hercules (~Hercules@user/hercules)
[14:44:37] *** Quits: msk (~Thunderbi@89.205.124.19) (Ping timeout: 240 seconds)
[14:44:57] *** Quits: andro (~stupidfox@user/stupidfox) (Ping timeout: 240 seconds)
[14:47:49] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[14:49:05] <goodfella> is there a builtin in the C standard that print characters up until index or should i use array for this ?
[14:49:09] *** Joins: akuma (~i.am@user/marlboro)
[14:49:15] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[14:49:26] *** Joins: cursey (~cursey@user/cursey)
[14:49:28] <goodfella> s/array/for loop
[14:54:25] <bnchs> goodfella: whats index
[14:54:31] <bnchs> is it the numbers of characters?
[14:55:44] <dave0> goodfella: too vague to answer.. what characters, what index
[14:55:49] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[14:56:31] *** Quits: kts (~kts@103.73.237.86) (Quit: Konversation terminated!)
[15:01:05] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[15:01:49] *** Joins: System_Error (~SystemErr@user/systemerror)
[15:03:19] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:03:28] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[15:05:31] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[15:07:05] <goodfella> how to make sure i avoid memory leaks on the same pointer ? i im reading that even realloc is not leak proof
[15:07:21] <goodfella> ,knr 1-19
[15:07:21] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-19. Write a function reverse(s) that reverses the character string s. Use it to write a program that reverses its input a line at a time.
[15:07:35] <goodfella> oops
[15:07:37] <goodfella> that one
[15:07:40] <goodfella> ,knr 1-18
[15:07:40] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-18. Write a program to remove trailing blanks and tabs from each line of input, and to delete entirely blank lines.
[15:07:56] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[15:08:18] <Maxdamantus> ,cc printf("%*s", 5, "hello world"); @ goodfella
[15:08:19] <candide> Maxdamantus: error: stray '@' in program
[15:08:23] <Maxdamantus> ,cc printf("%*s", 5, "hello world");
[15:08:25] <candide> Maxdamantus: hello world
[15:08:34] <Maxdamantus> ,cc printf("%*.s", 5, "hello world");
[15:08:36] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[15:08:36] <candide> Maxdamantus: No output.
[15:08:46] <Maxdamantus> Meh, can't remember how that works.
[15:08:52] <goodfella> it was a mistake to state what my ultimate goal ..
[15:09:08] <Maxdamantus> ,cc printf("%.*s", 5, "hello world");
[15:09:10] <candide> Maxdamantus: hello
[15:09:52] *** Joins: joev (~joev@user/joev)
[15:12:44] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:13:44] <fizzie> Or just a fwrite.
[15:13:58] <goodfella> this is not what i asked,
[15:14:10] <goodfella> i asked how to make use of dynamic allocation and avoid memory leaks ?
[15:14:18] <goodfella> which is what all 1-19 really about
[15:14:26] <Maxdamantus> 00:19:05 < goodfella> is there a builtin in the C standard that print characters up until index or should i use array for this ?
[15:15:35] *** Joins: kts (~kts@103.73.237.255)
[15:15:53] *** Parts: goodfella (~archer@user/tessio) (WeeChat 3.4)
[15:16:18] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[15:16:51] <fizzie> (I don't think 1-19 is "all about" dynamic allocation, and I think the expected solution is one that has a fixed upper bound on the line length. It's a chapter 1 exsercise, malloc and friends have not been introduced yet.)
[15:17:32] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[15:17:38] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[15:18:23] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[15:21:33] *** Joins: goodfella (~archer@user/tessio)
[15:22:02] <goodfella> ,7.20.3.4
[15:22:20] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[15:22:25] <goodfella> how to print phrases from the standard ?
[15:23:00] <goodfella> ,
[15:23:10] <Maxdamantus> ,c99std ,7.20.3.4
[15:23:11] <candide> No such text ',' found within section '7.20.3.4' in C99 Draft Standard (n1256).
[15:23:13] <Maxdamantus> ,c99std 7.20.3.4
[15:23:15] <candide> http://www.iso-9899.info/n1256.html#7.20.3.4 [The realloc function] 1 #include <stdlib.h> void *realloc(void *ptr, size_t size); Description 2 The realloc function deallocates the old object pointed to by ptr and returns a pointer to a new object that has the size specified by size. The contents of the new object shall be the same as that of the old object prior to deallocation, up to the lesser of the ne... <truncated; https://0x0.st/oKh-.txt>
[15:23:18] <DPA> To avoid leaks, a lot has to be taken into account. Don't give or copy the information anywhere, unless absolutely necessary, and null any data no longer needed before freeing. This may still not be sufficient in some cases, and there may still be other vectors.
[15:23:18] <DPA> Recent linux kernels also have memfd_secret, to hide memory as good as possible from everyone else. Although that's probably more of a thing for DRM than for user data protection.
[15:23:48] <goodfella> ok realloc seems like a legit way to avoid memory leaks
[15:24:03] <goodfella> but here i read otherwise
[15:24:06] <goodfella> https://stackoverflow.com/questions/19435433/what-happens-if-i-use-malloc-twice-on-the-same-pointer-c
[15:26:08] <goodfella> The realloc function deallocates the old object ...
[15:26:13] <DPA> Something being deallocated doesn't mean it's physically gone. In the case of realloc, it may not even have been nulled yet, and it's page could still be mapped for other stuff on it too.
[15:26:23] *** Quits: eroux (~eroux@102-65-85-242.ftth.web.africa) (Ping timeout: 256 seconds)
[15:26:26] *** Quits: cytokine` (~user@47.29.246.207) (Read error: Connection reset by peer)
[15:26:59] <DPA> It could be gone, but it may not be.
[15:27:33] <bnchs> yes
[15:27:42] <bnchs> deallocation doesn't erase the data
[15:28:13] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[15:28:13] <bnchs> but what if you don't need to
[15:28:40] <goodfella> DPA: i don't care about physically gone, i use free() to clear it
[15:28:41] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[15:28:52] <bnchs> it doesn't clear it
[15:28:54] <bnchs> it frees it
[15:29:02] <bnchs> the data may still be present at the address
[15:29:03] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[15:29:07] *** Quits: hinata (~hinata@2409:4042:2c0e:efa6:4de7:766d:3ef9:c503) (Quit: Leaving)
[15:29:09] <goodfella> that's irrelevant
[15:29:18] <goodfella> it does prevent from leaking memory
[15:29:27] <bnchs> yes
[15:29:30] <goodfella> after it has been freed it just a memory that had a previously stored value
[15:29:44] <goodfella> and can be used again
[15:30:16] *** Joins: msk (~Thunderbi@89.205.124.39)
[15:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:36] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[15:30:40] <bnchs> it can be used again by other programs
[15:31:02] <goodfella> and that's the definition of memory leak avoidance
[15:31:02] *** Joins: csrf (~csrf@user/csrf)
[15:31:32] <bnchs> thats the point
[15:31:47] <bnchs> allocate and free if you don't need it anymore
[15:31:48] <goodfella> i wonder why DPA has thought that i care about the actual values stored in the memory address after being freed with realloc ..
[15:32:10] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[15:32:13] <fizzie> Because there's two different meanings the word "leak" is used for.
[15:32:25] <bnchs> yes
[15:32:40] <bnchs> memory data leak, which means the previously stored data may contain sensitive data
[15:32:55] <goodfella> fizzie: i don't get it .. it just a memory that can be overwritten again
[15:33:03] <goodfella> or allocate to another function
[15:33:04] <sham1> Always zero sensitive data before deallocating
[15:33:16] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[15:33:31] <bnchs> goodfella, but the data that was stored into the memory can be read
[15:33:48] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[15:33:49] <bnchs> if you store any sensitive data in a memory, memset() before free()
[15:33:54] *** Joins: plastico (~plastico@neomutt/plastico)
[15:34:07] <goodfella> even if there is sensitive information in the old address, noone can reach it
[15:34:12] <sham1> memset_s or whatever the new C2023 one is, because apparently we need this
[15:34:20] <sham1> goodfella: yes they can, if they can recreate the address
[15:34:22] <bnchs> actually you can
[15:34:39] <goodfella> realloc overwrites the old address with the new one
[15:34:39] <bnchs> you can read env variables just by going out of bounds
[15:35:02] <bnchs> goodfella, but the data at the old address is still accessible
[15:35:15] <goodfella> or they might be in the exact same place..
[15:35:43] <fizzie> Anyway, "leaks" in the unintended information disclosure sense are an entirely different discussion from "leaks" in the classic forgot-to-free-what-was-allocated memory leak sense.
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:14] <sham1> The latter of which only really matters for programs that run for a very long time
[15:36:23] <goodfella> fizzie: isn't context already told you that the latter is what we dealing here ?
[15:36:23] <sham1> Although a memory leak can indicate some logic and such going wrong
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:49] *** Quits: not_not_not (~not_not_n@5.2.74.230) (Remote host closed the connection)
[15:37:01] <bnchs> good advice is to allocate if you really need to
[15:37:01] <fizzie> Arguably, but the former was clearly what the other answer was about.
[15:37:10] <bnchs> and use stack buffers if you want
[15:37:23] <bnchs> saves the headache of leaks and shit
[15:37:26] <nomagno> why is double free UB? Wouldn't double-freeing a pointer just result in nothing happening in most cases?
[15:37:55] <bnchs> "double-free in register" *crashes*
[15:38:21] <fizzie> nomagno: Because `free` expects there to be some internal bookkeeping related to the pointer you pass to it, and may be written to just assume that's the case rather than to try to guess if the pointer was already freed.
[15:39:04] <fizzie> For example, many malloc implementations put stuff in memory "before" the returned pointer, and that will have been written over by the first `free`.
[15:39:23] <fizzie> ,cc void *p = malloc(10); free(p); free(p);
[15:39:27] <candide> fizzie: [warning: pointer 'p' used after 'free' [-Wuse-after-free]  note: call to 'free' here] free(): double free detected in tcache 2   Program received signal SIGABRT, Aborted in __pthread_kill_implementation () called by main (argc=1, argv=0x7fffffffe428) at statement: free(p);
[15:39:49] <bnchs> oh its "double free detected in tcache"
[15:42:13] *** Quits: miqztee (~username@user/miqztee) (Quit: Leaving)
[15:43:53] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[15:47:43] <goodfella> Arguable and clearly are subjective i guess
[15:48:36] <bnchs> what do you need allocation for
[15:50:32] *** Quits: goodfella (~archer@user/tessio) (Quit: WeeChat 3.4)
[15:51:21] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 256 seconds)
[15:53:35] *** Quits: Giovanni (~Giovanni@87.251.20.36) (Ping timeout: 256 seconds)
[15:53:47] <bnchs> is [name]_[namespace]() a good function name format
[15:53:57] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[15:54:16] <bnchs> like create_object()
[15:56:50] <twkm> it can be.
[15:57:07] <markand> usually more like the opposite
[15:57:09] <twkm> others would swap them.
[15:57:15] *** Joins: drbeco (~beco@2804:351c:dd02:6800:c024:382c:90ec:dcb6)
[15:57:21] <bnchs> and set_data_object()
[15:57:28] <markand> sound_play, music_stop, window_clear
[15:57:56] <sham1> object_new, object_do_thing, object_get_foo
[15:58:35] <markand> I also like using _init/_finish for non-heap allocated stuff (like user side value) and _new/_free for heap allocated data (from the API itself)
[15:59:36] <bnchs> so?
[16:01:00] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[16:01:34] <bnchs> the format is not good right?
[16:08:27] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:09:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[16:09:26] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[16:09:32] *** test_ is now known as _flood
[16:14:43] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-91.cspire.com)
[16:16:28] *** Quits: useretail (~useretail@185.132.19.151) (Quit: Leaving)
[16:16:40] *** Joins: useretail (~useretail@185.132.19.151)
[16:17:26] *** Quits: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[16:21:07] <sham1> bnchs: yeah. I'd rather do [namespace]_[name]
[16:21:20] <bnchs> ok refactor time
[16:21:30] <dave0> NamespaceName
[16:22:05] <dave0> snake_case is satan himself
[16:23:36] <sham1> I'd personally prefer names-like-this but since that's not possible so names_like_this have to do
[16:24:22] <markand> snake_case ftw
[16:24:39] <dave0> serpent_case
[16:24:45] <markand> nobodyÂ© made a proposal for enum forward declarations in C23?
[16:25:48] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-694e-debf-2286-ef0f.res6.spectrum.com) (Ping timeout: 240 seconds)
[16:26:31] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[16:26:56] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[16:27:17] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[16:27:46] <swinnenb> how about enums with specified underlying type?
[16:27:51] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-84bf-264a-925c-29aa.res6.spectrum.com)
[16:28:30] <sham1> That'd be nice, but also weird, especially if one were to actually get forward declarations
[16:29:17] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[16:30:13] *** Joins: joev (~joev@user/joev)
[16:30:54] <fizzie> Would a forward-declared enum be an incomplete type, the same way forward-declared structs/unions are? If so, would it be good for anything? It's not like people commonly have pointers to enums, and that's about all you can have with an incomplete type.
[16:30:54] <markand> C++ did so I guess as long as you don't call the function that's fine
[16:31:33] <markand> no but it's nice to declare functions that takes enum without exposing them (so that headers don't include the entire earth)
[16:32:53] *** Joins: ymwm_ (~yingmanwu@117.26.69.165)
[16:33:12] <dave0> float enums
[16:33:22] <fizzie> Oh, GNU C allows it as an extension.
[16:33:38] <fizzie> https://gcc.gnu.org/onlinedocs/gcc/Incomplete-Enums.html "This extension may not be very useful, but it makes the handling of enum more consistent with the way struct and union are handled."
[16:35:04] <dave0> ,cc enum { X=0.69 };
[16:35:05] <candide> dave0: error: enumerator value for 'X' is not an integer constant
[16:35:31] *** Quits: ymwm (~yingmanwu@117.26.69.52) (Ping timeout: 256 seconds)
[16:36:36] <caze> pointer enums
[16:37:56] *** Joins: cart_ (~cart@2a01:4c8:1065:7940:4201:1cda:f4ee:5bd7)
[16:38:38] *** Joins: frytaped (~go@user/go4godvin)
[16:38:47] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:39:09] <fizzie> ,cc enum { imaginary = 1i };
[16:39:11] <candide> fizzie: warning: imaginary constants are a GCC extension  error: enumerator value for 'imaginary' is not an integer constant
[16:39:17] <fizzie> Aw.
[16:39:30] <fizzie> (GCC has an `int _Complex` type, after all.)
[16:39:34] <dave0> int x; enum { X = &x };
[16:39:38] <sham1> Why *don't* we have complex literals
[16:39:39] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[16:39:39] <dave0> ,cc int x; enum { X = &x };
[16:39:40] <candide> dave0: error: enumerator value for 'X' is not an integer constant
[16:40:35] <fizzie> ,expand #include <complex.h> I
[16:40:35] <candide> fizzie:  (__extension__ 1.0iF)
[16:40:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:40:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[16:41:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:41:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[16:41:30] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:42:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[16:45:40] *** Quits: frytaped (~go@user/go4godvin) ()
[16:46:29] *** Joins: frytaped (~go@37.131.59.6)
[16:46:52] *** frytaped is now known as Guest6112
[16:49:54] *** Quits: useretail (~useretail@185.132.19.151) (Quit: Leaving)
[16:50:08] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[16:50:17] *** Quits: Guest6112 (~go@37.131.59.6) (Client Quit)
[16:50:23] *** Joins: useretail (~useretail@185.132.19.151)
[16:50:29] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[16:50:55] *** Joins: useretail (~useretail@185.132.19.151)
[16:50:58] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[16:51:57] *** Quits: kts (~kts@103.73.237.255) (Quit: Konversation terminated!)
[16:52:33] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[16:59:00] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[16:59:18] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:a401:c4d0:cd89:4033)
[17:04:40] *** Joins: constxo (~brad@142.134.79.191)
[17:05:58] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 272 seconds)
[17:07:41] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:12:15] *** Joins: Guest4896 (~Guest@host126.190-137-36.telecom.net.ar)
[17:14:37] *** Quits: thevishy (~Nishant@2405:201:f005:c007:7c10:43e8:a548:3fb5) (Ping timeout: 240 seconds)
[17:15:14] *** Joins: thevishy (~Nishant@2405:201:f005:c007:594f:51cf:fa81:524d)
[17:17:20] *** Joins: frost (~frost@user/frost)
[17:17:30] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:18:38] *** Joins: oriba (~oriba@dynamic-089-012-112-014.89.12.pool.telefonica.de)
[17:19:25] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[17:21:02] *** Joins: mlasogd^ (~mlasogd@50-202-219-146-static.hfc.comcastbusiness.net)
[17:23:56] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:26:42] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:29:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:30:30] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:31:15] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:31:56] *** Quits: moog (~moog@107.126.53.115) (Ping timeout: 272 seconds)
[17:32:17] *** Quits: ymwm_ (~yingmanwu@117.26.69.165) (Quit: Leaving)
[17:34:17] *** Joins: goodfella (~archer@user/tessio)
[17:34:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[17:34:56] <goodfella> ,knr 1-19
[17:34:56] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-19. Write a function reverse(s) that reverses the character string s. Use it to write a program that reverses its input a line at a time.
[17:34:58] <goodfella> http://ix.io/3R06
[17:35:03] <goodfella> oops
[17:35:06] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[17:35:06] <goodfella> ,knr 1-18
[17:35:17] <goodfella> ,knr 1-18
[17:35:18] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-18. Write a program to remove trailing blanks and tabs from each line of input, and to delete entirely blank lines.
[17:35:45] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[17:36:42] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:38:27] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:38:39] *** Quits: alch (~alch@151.38.145.63) (Read error: Connection reset by peer)
[17:38:44] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[17:39:02] *** Quits: sebito91 (~sborza@45.55.74.66) (Quit: laterz, coffee...)
[17:39:18] <ioxzev1z> goodfella, don't cast malloc
[17:39:31] <ioxzev1z> don't use sizeof(char), it's always 1
[17:40:08] <ioxzev1z> getchar() uses int, not char
[17:40:12] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:40:23] *** Joins: sebito91 (~sborza@45.55.74.66)
[17:40:39] <goodfella> ioxzev1z: ok thanks
[17:40:40] <ioxzev1z> You needlessly repeat p[i] = c;
[17:40:50] <goodfella> yeah just noticed
[17:41:22] <goodfella> i should repeat but with correct type
[17:41:29] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[17:41:38] <ioxzev1z> You don't need to memset before free
[17:41:45] <pragma-> ,add kr-weirdness https://spin0r.wordpress.com/2014/11/21/kr-c/
[17:41:45] <candide> kr-weirdness added to #c.
[17:42:24] <ioxzev1z> goodfella, you don't need the memset at all actually, just null-terminate the string and ignore anything after the null
[17:42:30] <goodfella> why not cast malloc .. how should a pointer then know the step size ?
[17:42:38] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:42:49] <pragma-> the pointer knows its own size
[17:43:08] <goodfella> ioxzev1z: i've been told here that it's a good practice to set to 0 everything before realloc
[17:43:11] <goodfella> for security reasons
[17:43:14] <pragma-> void * can implicitly convert to any type.
[17:43:29] <ioxzev1z> goodfella, you don't need 'security reasons' for this code
[17:43:35] <pragma-> there's no need to make it explicit and it can be a mistake if you get it wrong.
[17:43:37] <ioxzev1z> In fact the compiler might not even call the memset on that
[17:43:37] *** Joins: alch (~alch@pd-18-102-49.service.infuturo.it)
[17:43:42] <goodfella> pragma-: how does it know that ++p is one byte just or 4 (int) ?
[17:43:57] <ioxzev1z> goodfella, you cannot do pointer arithmetic on void *
[17:44:01] <constxd> because p has a type
[17:44:03] <pragma-> because p isn't a void
[17:44:06] <ioxzev1z> But you can assign a void * to any other pointer typer
[17:44:08] <ioxzev1z> *type
[17:44:40] <ioxzev1z> So: void *p = 0xF00D; p++; doesn't make sense, but int *pi = p; pi++; does
[17:45:00] <constxd> void* arithmetic should be standard
[17:45:32] <ioxzev1z> goodfella, also use https://bpa.st for links
[17:45:32] <dave0> it is. it's standardly not allowed
[17:45:45] <constxd> it should be standardly allowed
[17:46:12] <ioxzev1z> constxd, given void *p = malloc(10); what would p++ do?
[17:46:29] <constxd> p = (char *)p + 1
[17:46:41] <ioxzev1z> constxd, so the standard should define void * as char *?
[17:46:46] <constxd> no
[17:46:55] <pragma-> gnu C does
[17:47:02] <dave0> it's the same as
[17:47:07] <dave0> ,cc struct forward; struct forward *a; a++;
[17:47:09] <candide> dave0: error: increment of pointer to an incomplete type 'struct forward'
[17:47:13] <pragma-> gnu C gives void size 1
[17:47:14] <constxd> 'void *' should implicitly convert to any pointer type, that's the key difference
[17:47:17] <dave0> void=incomplete type
[17:47:21] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:47:29] <ioxzev1z> constxd, it does, you just can't do arithmetic on it
[17:47:38] <constxd> yes, im saying that you should be able to
[17:47:46] <goodfella> ioxzev1z: isn't calling to memset before realloc is a good practice ?
[17:47:50] <constxd> but it should also retain that other key difference from 'char *'
[17:47:51] <ioxzev1z> goodfella, no
[17:47:55] <dave0> if you can do void arithmetic how should you do arithmetic on other incomplete types?
[17:48:31] <constxd> calling memset before realloc is a monumental waste of energy
[17:48:34] <ioxzev1z> goodfella, the only time you need to memset before free is if you're storing something sensitive, e.g. keys.
[17:48:34] <goodfella> ioxzev1z: i have been told that one might recreate the address of potentially sensitive information if one doesn't
[17:48:42] <ioxzev1z> Note the word "sensitive"
[17:48:51] <ioxzev1z> I doubt the input to your test program contains anything sensitive
[17:49:09] <goodfella> it doesn't that's why i asked you if it's a good practice to do so
[17:49:13] <constxd> bro you are causing global warming with this cargo cult shit
[17:49:40] <ioxzev1z> goodfella, also the compiler might notice the call and not do it because it's not needed.
[17:50:17] <ioxzev1z> iirc memset(buf, '\0', buf_size); can be turned into a no-op
[17:50:39] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Remote host closed the connection)
[17:50:49] <goodfella> how does the compiler know if it's sensitive information or garbage ?
[17:50:49] <ioxzev1z> When you're dealing with an array containing a string, just buf[end] = '\0'; then ignore anything after that
[17:51:05] <ioxzev1z> It doesnt. You do. Hence you should know when to call memset and when not to
[17:51:09] <ioxzev1z> In this case, you don't call it
[17:51:34] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[17:52:16] <goodfella> ok thank you
[17:52:23] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:52:42] <goodfella> and regarding to casting malloc, what should be done is just to create another poitner and use that for whatever type i need right ?
[17:53:07] <ioxzev1z> goodfella, any *p = malloc(size) works without (any *) malloc(size)
[17:53:20] <ioxzev1z> malloc returns void *, which you can assign to any pointer type
[17:53:39] <goodfella> ok
[17:53:42] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:54:39] <ioxzev1z> make those modifications and repaste
[17:54:44] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:55:36] <goodfella> im on it
[17:56:06] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Client Quit)
[17:57:17] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[17:58:26] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[17:59:04] *** Joins: strajder (~strajder@user/strajder)
[17:59:17] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[18:00:31] *** Joins: joev (~joev@user/joev)
[18:01:02] <goodfella> ioxzev1z: should i replace the character buffer with int buffer and iterate it with putchar() ?
[18:02:56] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:642a:7bc9:d2b2:1218)
[18:03:05] <ioxzev1z> Link the current code first
[18:03:14] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:03:15] *** Joins: brad_mssw|mac (~bhouse@2601:344:4100:b490:4af:ed5d:8e1f:1da3)
[18:03:23] <cehteh> nor reading backlog, but sounds like a stupid idea
[18:03:46] <cehteh> putchar uses only the 'char' part of an int
[18:03:51] <ioxzev1z> cehteh, I told him to use int for getchar return, but didn't explain that it will only use that part
[18:04:25] <cehteh> well yes getchar need to be int to check for errors, but do that on spot, no need to store the -1
[18:04:49] <ioxzev1z> Sure, but I don't think he understands why getchar returns int rather than char
[18:05:10] <cehteh> would be a good point to start learning about that
[18:05:51] <goodfella> https://bpa.st/GQCQ
[18:05:53] <cehteh> EOF is not a char :)
[18:06:12] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:a401:c4d0:cd89:4033) (Ping timeout: 240 seconds)
[18:06:25] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fb4d-184.dhcp.inet.fi)
[18:06:53] <ioxzev1z> goodfella, You probably want p[0] = '\0';
[18:07:11] <cehteh> goodfella: EOF is not a char means that you need to have int c = getchar() ... and once you know you dont got EOF you can cast/handle it as char
[18:07:24] <ioxzev1z> You don't need line 15, just pass &pr_max to the function
[18:07:27] <cehteh> yes that too
[18:07:33] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:07:50] <goodfella> ioxzev1z: thanks
[18:08:04] <ioxzev1z> 36 and 40 can be moved to just one call in the loop
[18:08:23] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[18:09:09] <ioxzev1z> if(c != ' ' && c != '\t') { ++(*pr_max); } p[i] = c
[18:09:19] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[18:09:36] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:642a:7bc9:d2b2:1218) (Ping timeout: 250 seconds)
[18:10:01] <ioxzev1z> char c should be int c, p[i] = c should be = (char) c;
[18:10:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:10:50] <cehteh> the whole thing could be done much more efficient, but i guess this is an beginners excercise :)
[18:10:56] <ioxzev1z> goodfella, getchar returns either a value in the char range, or -1, but after you've checked for -1, you can assume that the return is a char
[18:11:08] <ioxzev1z> s/-1/EOF/
[18:11:27] <ioxzev1z> cehteh, iirc this is k&r 1-18
[18:11:34] <goodfella> cehteh: i would love to see more efficient implementation
[18:12:23] <cehteh> important thing is that you really treat getchar()'s return as int, otherwise you have a bug   EOF/-1 cast to char is always a valid char but not EOF anymore
[18:13:04] <cehteh> and EOF itself must be outside of the range of valid chars obliviously otherwise you cant represent all chars
[18:13:06] <goodfella> ioxzev1z: i highly appreciate your valuable tips
[18:13:24] *** Quits: zer0x_ (~zer0x@58.186.58.26) (Ping timeout: 240 seconds)
[18:13:46] *** Joins: moog (~moog@107.126.53.115)
[18:14:17] <cehteh> goodfella: pretty much depends on the actual use, do you read from terminal/pipe or from a file, is it viable to read the input entirely or line by line (until EOF) into a buffer and tokenize later.
[18:14:25] *** Quits: mlasogd^ (~mlasogd@50-202-219-146-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[18:14:41] *** Quits: constxd (~brad@142.134.79.191) (Ping timeout: 256 seconds)
[18:15:10] <ioxzev1z> You could read(buf, 1024); for line in buf: handle_line(); but I don't think he's at that point yet
[18:15:18] <cehteh> yeah
[18:15:37] <ioxzev1z> Though he is misusing realloc a little by reallocing just 1 byte per time
[18:15:39] <cehteh> and handle errors there may be lines longer than 1024
[18:16:05] <cehteh> yep2
[18:16:12] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 268 seconds)
[18:16:34] <cehteh> just consider any allocation function as expensive
[18:17:35] <goodfella> there is one problem
[18:17:50] <goodfella> ok there is a few ..
[18:17:54] <ioxzev1z> repaste
[18:18:22] <cehteh> when you know the worst case length of any word you want to input (or you know a safe fallback if you dont know the length) you may use an array on stack instead, and thne strdup it once you read a word if you *really* need an allocated string
[18:18:25] *** Joins: constxd (~brad@142.134.79.191)
[18:19:08] <cehteh> actually the 'or' should be 'and' because errors can always happen when data comes from external sources
[18:19:15] <goodfella> https://bpa.st/JFTQ
[18:19:18] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[18:19:34] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[18:19:47] <goodfella> after running the program, more than 5 characters are being printed (BUF is 5 ) and only the first blank is counted the rest are ignored
[18:23:31] <ioxzev1z> remove 15 and pass &pr_max directly to the function
[18:23:54] <ioxzev1z> you need break; after 18
[18:24:22] <cehteh> what is the intention anyway?  pr_max counts any non space non tab characters, but you still store spaces and tabs in p[]
[18:25:10] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:25:19] <goodfella> ioxzev1z: i dead .. problem persist
[18:25:22] <goodfella> did
[18:25:29] <goodfella> :(
[18:25:31] <ioxzev1z> that break; is very important, because otherwise you access invalid memory
[18:25:38] <cehteh> when your input is "f o o"  then you get p == "f o o"  and pr_max==3  .. and then you printf limited by pr_max  .. "f o"
[18:26:06] <cehteh> is that the intention?
[18:26:46] <cehteh> also when input is shorter than 5 chars then you dont terminate p properly
[18:26:49] <goodfella> i don't get p o o
[18:26:50] <goodfella> that's the problem
[18:26:53] <goodfella> f o o
[18:27:00] <goodfella> i get f oo
[18:27:07] <cehteh> 13: p[BUF] = '\0';    forget about that
[18:27:14] <cehteh> delete that line
[18:27:47] <cehteh> but in 33:   befoire the return EOF you need    p[i] = '\0';
[18:27:49] <goodfella> ioxzev1z: i deleted line 15 and pass &pr_max to the function and added break after free() however it's the same
[18:28:03] <ioxzev1z> goodfella, those weren't fixes, they were code improvements
[18:28:16] <ioxzev1z> Also move 36/40 into one line in the loop and negate the if
[18:28:43] <cehteh> and finally you need p[5] = '\0; before the  return 0; in 43 as welll
[18:29:06] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.211)
[18:29:34] <cehteh> i still dont get the intended semantics i only get what i see :D
[18:30:17] <cehteh> thus works as defined which means undefined behaviour :) .. aka too bad it doesnt crash but print garbage only
[18:30:51] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-751f-c2d3-24b7-e2fb.inf6.spectrum.com)
[18:30:56] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[18:31:05] <cehteh> also you have a double free() in your code  .. line 18/25
[18:31:57] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.42) (Ping timeout: 256 seconds)
[18:32:06] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[18:32:08] *** Joins: crashrep (~crashrep@user/crashrep)
[18:32:19] <cehteh> realloc a freed thing is UB too
[18:32:43] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[18:33:01] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[18:33:29] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:751f:c2d3:24b7:e2fb) (Ping timeout: 252 seconds)
[18:33:29] <cehteh> correct C is hard :D
[18:34:51] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:9489:acfe:a0fe:d45d)
[18:34:51] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:9489:acfe:a0fe:d45d) (Changing host)
[18:34:51] *** Joins: skapata (~Skapata@user/skapata)
[18:35:21] *** Quits: bnchs (~bnchs@160.177.101.13) (Ping timeout: 256 seconds)
[18:35:27] <goodfella> ioxzev1z: by any chance you help me understand why whitespace is counted only once and why i can print arbitrary numbers when i have only a print buffer of 5 ?
[18:36:40] <ioxzev1z> I think you seriously misunderstand the code you're trying to write
[18:36:48] <ioxzev1z> Write pseudocode for what you want to do, then turn it to C
[18:37:50] *** Joins: ymwm (~yingmanwu@117.26.69.165)
[18:38:54] <goodfella> it's pretty simple .. print the buffer without trailing whitespaces and tabs and delete entirely blank lines
[18:39:21] <ioxzev1z> goodfella, sure, but your code doesn
[18:39:24] <ioxzev1z> t do that
[18:39:36] *** Quits: zipper (~luv_panda@user/jellie) (Remote host closed the connection)
[18:40:03] <cehteh> goodfella: can you give a 1 line description of what you actually want to do?
[18:40:31] <cehteh> eh ok
[18:40:49] <cehteh> if its only that, well then this code is fail :)
[18:41:13] *** Quits: ymwm (~yingmanwu@117.26.69.165) (Client Quit)
[18:41:45] <cehteh> print the buffer without trailing whitespaces and tabs and delete entirely blank lines  <<< top be precise you want to operate line by line
[18:42:12] *** Joins: useretail (~useretail@185.132.19.151)
[18:42:14] <cehteh> to figure out if something is trailing you have to read the whole line first
[18:42:29] <cehteh> and then just look at the end
[18:42:53] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:42:59] <cehteh> while that is a ' ' or '\t' replace it with \0
[18:43:08] <ioxzev1z> go to end, while(isspace()) pos--; buf[pos] = '\0';
[18:43:36] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[18:43:41] <cehteh> and when you only want to read-trim-print then you dont need any allocation at all
[18:43:45] *** Joins: Psybur (~Psybur@mobile-166-170-32-247.mycingular.net)
[18:44:21] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[18:44:45] <cehteh> just big enough buffer on stack, handle buffer overflow .. and read line by line which is pretty important here, no getchar
[18:45:33] <cehteh> there is getline()
[18:45:57] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:46:17] <strajder> and fgets
[18:46:26] *** Quits: joev (~joev@user/joev) (Remote host closed the connection)
[18:46:28] <cehteh> yes
[18:46:44] <cehteh> fgets is actually better here
[18:46:50] *** Joins: joev (~joev@user/joev)
[18:47:32] *** Quits: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com) (Quit: leaving)
[18:47:40] <strajder> and then "char *eol = strchr(buf, '\n'); if (eol) *eol = 0;" converts newline into end of string
[18:47:43] <NRK> there's also gets()
[18:47:50] <NRK> *leaves*
[18:47:56] <cehteh> haha
[18:48:03] <cehteh> fscanf
[18:48:10] <ioxzev1z> int c = 0; char buf[1024] = { 0 }; for(size_t i = 0; i < 1024; ++i) { c = getchar(); if(c != EOF && c != '\n') { buf[i] = (char) c; } else { break; } }
[18:48:18] <ioxzev1z> There, with a loop and no reallocs/memsets
[18:48:44] <cehteh> no need for zeroing the buffer
[18:48:53] <pragma-> keywords should be followed by a space before the opening parentheses because they're not functions!
[18:48:55] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 240 seconds)
[18:49:03] <ioxzev1z> cehteh, doesn't really add any overheads and avoids having to remember to = '\0' the end
[18:49:13] <ioxzev1z> pragma-, but muh style
[18:49:34] <cehteh> ioxzev1z: i rather want to crash programs (or flag errors under valgrind) than faking some false safety
[18:49:54] <ioxzev1z> cehteh, I don't see any errors on that code above, assuming it's inside a function
[18:50:23] <cehteh> yeah fair its oj .. but my style would be putting some explicit \0 at the end
[18:52:00] <ioxzev1z> Actually there is a bug in that code. Should be < 1023 to always then be null-terminated
[18:52:23] <ioxzev1z> < 1024 means buf[1023] can be a valid input, leaving no room for the null
[18:52:55] <strajder> why ++i? no need
[18:52:58] <strajder> i++
[18:53:05] <ioxzev1z> strajder, no reason to not use ++i
[18:53:17] <strajder> i++ is standard
[18:53:27] <strajder> Â¯\_(ãƒ„)_/Â¯
[18:53:33] <cehteh> ++i too
[18:53:38] <strajder> no, it's weird
[18:53:42] <cehteh> lol
[18:53:46] <ioxzev1z> No, ++i and i++ are standard, you just get to chose which you want bru. Even if i++ was somehow less efficient, in that for loop the compiler would optimize it out
[18:53:48] <cehteh> opinionated C
[18:54:15] <ChoHag> They are both standard because they are different.
[18:54:29] <ChoHag> When you want the effect of one, you use the one, when the other the other.
[18:54:41] <strajder> for loop idiom goes "for (int i = 0; i < n; i++) {  }
[18:55:14] <ChoHag> That's the introductory for loop.
[18:55:26] <strajder> it's idiomatic
[18:55:31] <cehteh> for (int i = 0; i < n; ++i)    :)
[18:55:33] <ioxzev1z> wat
[18:55:41] <ChoHag> Sounds more dogmatic.
[18:55:48] <strajder> w/e trolls
[18:55:49] <ioxzev1z> strajder, do you know the difference between ++i and i++ ?
[18:55:57] <pragma-> I think for (int i = 42; i --> 0; ) reads better
[18:56:02] <ChoHag> Of course not.
[18:57:17] <NRK> i love the goes-to operator
[18:57:47] *** Quits: constxd (~brad@142.134.79.191) (Ping timeout: 256 seconds)
[18:57:52] <cehteh> we need a <--- oeprator!
[18:57:57] <high_ground> ah yes
[19:01:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[19:05:05] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:49a7:adba:9634:8f82)
[19:06:52] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:08:13] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[19:09:09] *** Joins: joev (~joev@user/joev)
[19:15:32] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[19:18:18] *** Joins: Dotz0cat_ (~Dotz0cat@h234.234.186.173.dynamic.ip.windstream.net)
[19:18:58] *** Quits: Dotz0cat (~Dotz0cat@75.90.117.174) (Ping timeout: 272 seconds)
[19:19:14] *** Dotz0cat_ is now known as Dotz0cat
[19:22:12] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[19:22:55] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[19:24:21] *** Joins: masoudd (~masoudd@user/masoudd)
[19:26:11] *** Joins: magla (~gelignite@d5362da6.access.ecotel.net)
[19:26:50] <joomla9> Question on alignment. Mathematically, if something is aligned to 4 bytes its also aligned to 2 bytes, but it doesn't work the other way correct? i.e a higher alignment is always aligned to a lower type as well, but not the other way.
[19:28:09] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:49a7:adba:9634:8f82) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:29:14] <clarity> Of course.
[19:29:47] <joomla9> Thank you.
[19:30:02] <clarity> That's assuming power of two alignments though
[19:30:10] <joomla9> that's correct.
[19:30:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:33:24] *** Quits: constxo (~brad@142.134.79.191) (Ping timeout: 240 seconds)
[19:33:30] <sham1> It's quite easy to see considering that if you have, say a block that is aligned to 4 bytes, you can see that the address is `0 mod 4`, and of course because 4
[19:33:35] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:33:56] <sham1> 2 | 4, it'd also be `0 mod 2`
[19:34:00] <fizzie> (All alignments are powers of two.)
[19:34:01] <sham1> But you can see that the inverse mightn't be true
[19:34:05] *** Joins: crashrep (~crashrep@user/crashrep)
[19:34:23] <joomla9> right, 14 as an example, it divisible by 2, but not by 4.
[19:36:22] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[19:36:26] <sham1> Yeah
[19:36:36] *** Quits: zlg (~zlg@user/zlg) (Ping timeout: 245 seconds)
[19:37:42] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:38:15] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[19:38:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:38:45] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[19:39:58] <cehteh> fizzie: but thats just a common hardware restriction, in theory you can have more odd alignment restrictions
[19:40:58] <fizzie> It's not a hardware restriction, it's a standard restriction.
[19:41:02] <fizzie> C11 6.2.8p4: "Every valid alignment value shall be a nonnegative integral power of two." p5: "An address that satisfies an alignment requirement also satisfies any weaker alignment requirement."
[19:41:02] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[19:41:56] <sham1> It's a reasonable restriction since C already restricts values to be binary and for them alignment is just leaving however many least significant digits zero
[19:42:07] <fizzie> (In a non-"alignment requirement of a C type" context, like a file format or something, you might of course have a thing that needs to be aligned more oddly, sure.)
[19:44:02] <goodfella> rofl
[19:44:04] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 250 seconds)
[19:44:13] *** Quits: shailangsa (~shailangs@host86-185-102-18.range86-185.btcentralplus.com) (Ping timeout: 256 seconds)
[19:44:47] <goodfella> ok it's working
[19:44:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[19:45:31] <ioxzev1z> ,works
[19:45:31] <candide> It works it works! Omg omg omg! I mean it compiles. Now what's a segfault?
[19:45:42] <goodfella> no segfault
[19:45:44] <goodfella> it works
[19:45:46] <goodfella> ![
[19:45:49] <ioxzev1z> paste
[19:46:01] *** Joins: Darkcoal (~user@user/Darkcoal)
[19:46:06] <goodfella> the embaracing thing is that it's probably always does
[19:46:27] <goodfella> i was certain that gcc -o is 1.18
[19:46:35] <goodfella> but i guess it was 1.8
[19:47:18] <goodfella> ioxzev1z: not far away from my previous versions other than instead of free(p); i just realloc and effectively delete the blank line
[19:49:03] <cehteh> so you still dont follow the recommendations above
[19:49:15] <cehteh> did you compile it with -Wall -Wextra ?
[19:49:35] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.4)
[19:49:50] <goodfella> ioxzev1z: https://bpa.st/DWLQ
[19:49:51] *** Joins: AmR (~AmREiSa@156.199.49.129)
[19:51:34] <goodfella> i find it hard to believe that nobody try to run my code ...
[19:52:03] <goodfella> that gcc -o ... is the devil
[19:52:25] <sham1> Show the complete command line
[19:52:54] <cehteh> goodfella: why should anyone else run it?
[19:53:21] <goodfella> cehteh: what's up masoudd
[19:53:37] *** Joins: malina (~malina@user/malina)
[19:53:41] <goodfella> :)
[19:53:57] <goodfella> two accounts is forbidden in #C .. i hope that pragma- won't bring his hammer oon your head
[19:54:56] <cehteh> masoudd?
[19:55:54] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:58:33] <ioxzev1z> goodfella, you can move lines 16/21 to a single line
[19:58:47] <ioxzev1z> Same for 36/39
[19:58:50] *** Quits: thevishy (~Nishant@2405:201:f005:c007:594f:51cf:fa81:524d) (Quit: Leaving)
[19:59:01] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:59:45] <theseb> how pass int a[7] into f(int *x)?....I tried f(&a); but that gives error
[20:00:11] <theseb> expected â€˜unsigned int *â€™ but argument is of type â€˜unsigned int (*)[7]â€™
[20:00:14] <cehteh> just a
[20:00:15] <theseb> ?
[20:00:24] <theseb> cehteh: thanks
[20:03:51] <goodfella> ioxzev1z: how ?
[20:07:06] *** Quits: justAstache (~justache@user/justache) (Ping timeout: 272 seconds)
[20:07:09] <ioxzev1z> Invert the if on line 15 to contain lines 19/20, move 16/21 after line 22 as your code is
[20:07:11] *** Joins: shailangsa_ (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[20:07:18] <nitrix> theseb, The name of an array, like `a`, evaluates to a pointer to it's first element, `&a[0]`, which in your case the elements have type `int` so you'd have an `int *`.
[20:07:29] <ioxzev1z> The if on 34 doesn't need an else, because the if and else call the same code
[20:07:43] <ioxzev1z> Hence you can remove the else on 38 and just put the = on one lin
[20:07:44] <ioxzev1z> e
[20:07:47] <ioxzev1z> goodfella, ^
[20:08:32] <ioxzev1z> goodfella, you notice that on that paste, the if and else on 15/18 both call realloc, so you can move it out of the if/else block entirely
[20:08:35] *** Joins: bebyx (~Thunderbi@user/bebyx)
[20:08:56] <ioxzev1z> Same with 36/39, in that no matter what happens (if happens, or else), you always call the p assignment
[20:10:53] *** Quits: magla (~gelignite@d5362da6.access.ecotel.net) (Read error: Connection reset by peer)
[20:11:14] *** Joins: justAstache (~justache@user/justache)
[20:12:09] <ioxzev1z> goodfella, if you have something like if(x) { do_y(); } else { do_y(); }, you can just move it outside such as if {} else {} do_y(). Assuming that the if/else have anything else inside
[20:12:15] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 240 seconds)
[20:13:20] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:d135:2251:22b:8978)
[20:15:36] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:17:30] <goodfella> ioxzev1z: please paste what you mean.. as i ended up with the same number of lines as before
[20:20:22] <ioxzev1z> goodfella, https://bpa.st/AEMA
[20:21:18] *** Quits: malina (~malina@user/malina) (Ping timeout: 252 seconds)
[20:23:16] *** Joins: magla (~gelignite@d5362da6.access.ecotel.net)
[20:24:17] <goodfella> ioxzev1z: thank you
[20:25:43] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[20:25:55] <ioxzev1z> General tip: if you see two exact lines of code close to each other it's quite possible to reduce them to one
[20:26:29] <ioxzev1z> In your case you had code that was always executing regardless of whether the if or else was entered
[20:26:41] <ioxzev1z> Hence you can move that line out from the if/else statements completely
[20:28:29] <ChoHag> Depends how long they are.
[20:29:43] *** Joins: beepbooptheory (~mik-wsl@50.216.98.94)
[20:29:50] <ChoHag> Walking a list of known length: frob(y); y=next(y); frab(y); y=next(y); frib(y); y=next(y); assert(y==NULL);
[20:30:01] *** Quits: cart_ (~cart@2a01:4c8:1065:7940:4201:1cda:f4ee:5bd7) (Ping timeout: 268 seconds)
[20:30:10] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a)
[20:30:23] <ChoHag> You *could* reduce that to three calls before the assert with the 'y=next(y)' squirreled away, but why?
[20:30:54] <goodfella> ioxzev1z: it will take time to get use to this .. but ill definetley embrace it, thanks
[20:31:31] <ioxzev1z> goodfella, one thing many beginners think is that an if must have an else
[20:31:51] <ioxzev1z> but: if(x) { do_x() } do_y() is fine
[20:32:01] <ioxzev1z> you don't need an else { do_y() }
[20:33:03] <ioxzev1z> Well, assuming you want do_y() to always run
[20:33:24] <ioxzev1z> Which in your realloc and array assignment case you did
[20:34:20] *** Joins: malina (~malina@user/malina)
[20:37:24] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Ping timeout: 240 seconds)
[20:38:20] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:39:34] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[20:42:30] *** Joins: Akiva (~Akiva@user/Akiva)
[20:43:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc) (Quit: Quit)
[20:45:22] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[20:47:00] *** Joins: crashrep (~crashrep@user/crashrep)
[20:48:17] *** Joins: constxo (~brad@T975D.WPA.Dal.Ca)
[20:48:56] *** Joins: kts (~kts@103.73.237.230)
[20:49:28] *** Quits: kts (~kts@103.73.237.230) (Client Quit)
[20:50:35] <masoudd> smh
[20:50:40] *** Joins: kts (~kts@103.73.237.230)
[20:51:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[20:51:22] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[20:52:07] *** Quits: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a) (Remote host closed the connection)
[20:52:13] *** Joins: coruja (~coruja@user/coruja)
[20:54:41] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a)
[20:58:09] *** Quits: kts (~kts@103.73.237.230) (Ping timeout: 256 seconds)
[20:58:25] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[20:59:41] *** Joins: kts (~kts@103.73.237.247)
[21:00:22] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äœis.)
[21:01:37] *** Parts: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Leaving)
[21:02:33] *** Quits: fe23 (~fe23@2409:8a34:46c:f80:1033:205:13b7:8fcf) (Quit: fe23)
[21:05:08] *** Quits: drbeco (~beco@2804:351c:dd02:6800:c024:382c:90ec:dcb6) (Read error: Connection reset by peer)
[21:08:30] <goodfella> ok there was a fundemental problem with the calculation ..
[21:11:51] <goodfella> i have the final version of the exercise
[21:12:05] <goodfella> even handled '\n' for better output readability
[21:12:34] *** Quits: AmR (~AmREiSa@156.199.49.129) (Ping timeout: 260 seconds)
[21:13:32] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[21:14:51] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[21:15:09] *** Joins: bebyx (~Thunderbi@user/bebyx)
[21:15:33] *** Joins: root____ (~root@5.2.79.79)
[21:16:45] *** Quits: bebyx (~Thunderbi@user/bebyx) (Read error: Connection reset by peer)
[21:17:02] *** Joins: bebyx (~Thunderbi@user/bebyx)
[21:19:02] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:b809:dee4:ffde:c8e9)
[21:19:02] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:b809:dee4:ffde:c8e9) (Changing host)
[21:19:02] *** Joins: skapata (~Skapata@user/skapata)
[21:19:12] *** Joins: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com)
[21:19:17] *** Quits: oriba (~oriba@dynamic-089-012-112-014.89.12.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:19:39] *** Joins: cadmio (~cadmio@151.35.159.211)
[21:19:40] <cadmio> Hello
[21:20:45] <cadmio> I should change color only when I open a template https://paste.gnome.org/plelh82cl#line-240
[21:20:47] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:d135:2251:22b:8978) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:21:07] <cadmio> instead I see the label changed to 'red' also when I open a non-template file
[21:26:49] <twkm> which part is c?
[21:27:25] *** Joins: crashrep (~crashrep@user/crashrep)
[21:27:51] <twkm> because templates aren't in the c language, and how to drive your editor is likely better handled in an editor focused channel.
[21:28:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[21:28:55] <cadmio> it's a logical issue. At start I set litos->fileSaved[page] == TRUE
[21:29:37] *** Joins: fapple (~user@92.60.40.199)
[21:29:38] <twkm> so now go find the code that should change its behavior based on that value.
[21:29:52] <twkm> mind you, merely setting it won't cause code to run.
[21:30:20] <twkm> also, == doesn't set anything, it compares.
[21:31:13] <goodfella> wow.. i didn't knew that one program can be written in so many languages
[21:31:14] <goodfella> https://en.wikipedia.org/w/index.php?title=GNOME&previous=yes#Human_Interface_Guidelines
[21:31:35] <twkm> really, you need to debug and the irc debugger isn't always available.
[21:35:42] *** Joins: Inline (~Inline@p200300cd47142200d42e13192b15e793.dip0.t-ipconnect.de)
[21:36:48] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:37:09] *** Joins: tiotags (~tiotags@user/tiotags)
[21:37:24] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[21:38:24] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:38:25] *** Quits: alch (~alch@pd-18-102-49.service.infuturo.it) (Read error: Connection reset by peer)
[21:38:39] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[21:39:14] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[21:41:17] *** Joins: bnchs (~bnchs@160.177.47.225)
[21:41:41] <goodfella> twkm: who/what is the irc debugger ?
[21:42:55] *** Joins: alch (~alch@151.36.109.46)
[21:43:03] *** Quits: beepbooptheory (~mik-wsl@50.216.98.94) (Remote host closed the connection)
[21:43:22] *** Joins: beepbooptheory (~mik-wsl@50.216.98.94)
[21:44:35] *** Joins: cart_ (~cart@2a01:4c8:1065:7940:45a7:256f:485f:bda2)
[21:45:21] *** Quits: beepbooptheory (~mik-wsl@50.216.98.94) (Remote host closed the connection)
[21:45:45] *** Joins: beepbooptheory (~mik-wsl@50.216.98.94)
[21:45:46] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[21:47:16] *** Quits: beepbooptheory (~mik-wsl@50.216.98.94) (Remote host closed the connection)
[21:48:26] *** Joins: beepbooptheory (~mik-wsl@50.216.98.94)
[21:48:26] *** Quits: goodfella (~archer@user/tessio) (Ping timeout: 272 seconds)
[21:49:04] *** Joins: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de)
[21:49:08] *** Joins: Torr (~Torr@user/torr)
[21:49:16] *** Joins: analognoise (~analognoi@185.229.59.133)
[21:49:34] <novns> the irc debugger is a person from IRC who helps you to debug
[21:52:07] *** Quits: magla (~gelignite@d5362da6.access.ecotel.net) (Quit: Stay safe!)
[21:52:20] *** Quits: cart_ (~cart@2a01:4c8:1065:7940:45a7:256f:485f:bda2) (Ping timeout: 250 seconds)
[21:53:01] *** Joins: cart_ (~cart@2a01:4c8:470:8de:ae99:bccc:7648:65ca)
[21:53:09] *** Quits: cadmio (~cadmio@151.35.159.211) (Quit: WeeChat 3.0)
[21:53:34] <bnchs> but he doesn't have ssh or any remote access
[21:53:42] <bnchs> how can he help
[21:54:13] <novns> bnchs, using telepathy, as usual
[21:55:05] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:350b:c716:fa56:ddbc)
[21:57:49] *** Quits: haniaF_ (~haniaF@83.24.224.152.ipv4.supernova.orange.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[21:58:47] *** Quits: root____ (~root@5.2.79.79) (Quit: Lost terminal)
[22:00:02] *** Quits: cart_ (~cart@2a01:4c8:470:8de:ae99:bccc:7648:65ca) (Remote host closed the connection)
[22:00:08] <twkm> apparently goodfella didn't really care to know.
[22:00:27] *** Joins: cart_ (~cart@2a01:4c8:470:8de:ae99:bccc:7648:65ca)
[22:01:18] *** Joins: mahmutov (~mahmutov@37.155.8.12)
[22:01:20] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[22:01:27] *** Quits: Guest4896 (~Guest@host126.190-137-36.telecom.net.ar) (Remote host closed the connection)
[22:02:45] <bnchs> ping timeout
[22:02:57] <bnchs> it was his ISP who didn't want him to know
[22:03:24] *** Joins: Inline__ (~Inline@p200300cd4715f5002bb20ed77dab6816.dip0.t-ipconnect.de)
[22:04:43] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:05:10] *** Quits: Inline (~Inline@p200300cd47142200d42e13192b15e793.dip0.t-ipconnect.de) (Killed (zirconium.libera.chat (Nickname regained by services)))
[22:05:10] *** Inline__ is now known as Inline
[22:06:53] *** Joins: epicout (~epicout@2a01:e0a:77:db70:978a:6e9:9495:cd9d)
[22:09:32] *** Quits: kts (~kts@103.73.237.247) (Quit: Konversation terminated!)
[22:10:01] <constxo> based
[22:10:16] *** Joins: brad_mssw|mbp (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[22:12:53] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 250 seconds)
[22:13:34] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:4af:ed5d:8e1f:1da3) (Ping timeout: 250 seconds)
[22:17:29] *** Quits: constxo (~brad@T975D.WPA.Dal.Ca) (Ping timeout: 256 seconds)
[22:17:35] *** Joins: mawk (mawk@wireguard/contributor/mawk)
[22:17:44] <mawk> epicout rends l'argent
[22:19:11] <mawk> epicout is a french spy be cautious
[22:20:03] <epicout> russian spy actually
[22:20:37] *** Quits: KevinX (~KevinX@user/KevinX) (Ping timeout: 240 seconds)
[22:21:18] *** Joins: magla (~gelignite@d5362da6.access.ecotel.net)
[22:24:37] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[22:25:05] *** Joins: KevinX (~KevinX@user/KevinX)
[22:25:08] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:25:10] *** Joins: oxfuxxx (~oxfuxxx@217.138.213.28)
[22:25:23] *** Joins: kts (~kts@103.73.237.247)
[22:31:31] *** Quits: oxfuxxx (~oxfuxxx@217.138.213.28) (Read error: Connection reset by peer)
[22:31:39] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:31:46] *** Joins: oxfuxxx (~oxfuxxx@217.138.213.28)
[22:33:00] *** Quits: csrf (~csrf@user/csrf) (Read error: Connection reset by peer)
[22:34:47] *** Joins: csrf (~csrf@user/csrf)
[22:35:30] *** Quits: cart_ (~cart@2a01:4c8:470:8de:ae99:bccc:7648:65ca) (Ping timeout: 252 seconds)
[22:35:45] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[22:36:11] *** Quits: oxfuxxx (~oxfuxxx@217.138.213.28) (Ping timeout: 256 seconds)
[22:37:19] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:44:33] *** Joins: Akuli (~Akuli@82-203-165-162.bb.dnainternet.fi)
[22:45:05] *** Quits: Haxxa (~Haxxa@203-123-96-204.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:06] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[22:46:04] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[22:46:45] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220219201334])
[22:47:31] *** Joins: Haxxa (~Haxxa@203-123-96-204.ip4.superloop.com)
[22:50:30] *** Quits: kts (~kts@103.73.237.247) (Ping timeout: 272 seconds)
[22:51:59] *** Joins: arinov (~arinov@77.67.133.10)
[22:58:03] *** Quits: gonogo (~gonogo@167.88.62.87) (Remote host closed the connection)
[22:58:15] *** Joins: gonogo (~gonogo@167.88.62.87)
[22:58:31] *** Joins: doorzan (~doorzan@2800:200:f540:73::c)
[22:58:31] *** Quits: doorzan (~doorzan@2800:200:f540:73::c) (Changing host)
[22:58:31] *** Joins: doorzan (~doorzan@user/doorzan)
[22:59:25] *** Quits: mahmutov (~mahmutov@37.155.8.12) (Ping timeout: 256 seconds)
[23:02:12] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[23:02:12] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[23:03:24] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.211) (Ping timeout: 240 seconds)
[23:04:13] *** Joins: korg815 (~korg815@user/korg815)
[23:04:57] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[23:05:22] *** lukedashjr is now known as luke-jr
[23:05:56] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: Textual IRC Client: www.textualapp.com)
[23:06:31] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Remote host closed the connection)
[23:10:49] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[23:10:57] *** Joins: Guest3896 (~Guest@181.91.158.121)
[23:20:56] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:21:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:23:17] *** Joins: rgrinberg (~textual@2806:101e:7:8d89:ad31:8328:5a08:79cc)
[23:23:41] *** Lord_of_Life_ is now known as Lord_of_Life
[23:25:18] <ericson2314> looking at the web, there is no good way to asssert code is unreachable with calng, right?
[23:25:49] <ChoHag> assert(!"UNREACHABLE");
[23:26:03] *** Quits: Zenton (~user@user/zenton) (Ping timeout: 256 seconds)
[23:26:42] <ChoHag> No idea what a calng is.
[23:27:12] <ChoHag> assert(!"REACHABLE"); reads better tbh.
[23:29:14] *** Joins: haniaF (~haniaF@83.24.224.152.ipv4.supernova.orange.pl)
[23:30:12] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[23:30:25] *** Joins: ckdCreations (~ckdCreati@147.55.133.134)
[23:31:01] *** Joins: crashrep (~crashrep@user/crashrep)
[23:32:45] *** Joins: zlg (~zlg@user/zlg)
[23:33:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:34:36] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 240 seconds)
[23:35:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:38:50] *** Joins: cart_ (~cart@2a01:4c8:470:8de:2d29:b1e0:8217:3fe4)
[23:39:25] *** Joins: goodfella (~archer@user/tessio)
[23:39:36] <bnchs> ChoHag: whats that ! string prefix
[23:40:26] <goodfella> ioxzev1z: this is my last version of the problem
[23:40:35] <caze> What problem?
[23:40:36] <ChoHag> Not.
[23:40:41] <sham1> bnchs: that's the logical NOT
[23:40:47] <bnchs> and why?
[23:40:50] <caze> bnchs: Not a prefix. Operator.
[23:41:00] <bnchs> yes i know but why apply it to a strin
[23:41:01] <sham1> bnchs: to have the assert faile I presume
[23:41:08] <sham1> While giving the user a readable string
[23:41:19] <goodfella> https://bpa.st/WTUQ
[23:41:21] <caze> I thought it was just a joke.
[23:41:54] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[23:41:55] <ChoHag> bnchs: "<anything>" will resolve to a value >= 0 (probably...). !"<anything>" will therefore be 0. assert(0) will kill the process without prejudice *and* print a helpful error message saying exactly where it happened.
[23:42:16] <ChoHag> Then when your code is bug free you can compile with NDEBUG to disable the check.
[23:42:25] <goodfella> in the previous version there was a problem where there 2 or more whitespaces in a row
[23:42:39] <caze> goodfella: What problem is that for?
[23:42:40] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[23:42:47] <sham1> ChoHag: "when your code is bug free" I appreciate the optimism
[23:42:58] <goodfella> caze: knr 1-18
[23:43:06] <caze> ,kr1-18
[23:43:07] <candide> Chapter 1: A Tutorial Introduction; Exercise 1-18. Write a program to remove trailing blanks and tabs from each line of input, and to delete entirely blank lines.
[23:43:23] <ChoHag> There's a bug already.
[23:43:26] <ChoHag> s/>=/>/
[23:43:30] <ioxzev1z> goodfella, any problems with it?
[23:43:36] <bnchs> vgguh
[23:43:54] <goodfella> ioxzev1z: i sent you the final solution
[23:44:05] <ioxzev1z> lol
[23:44:11] <ioxzev1z> right, but does it work
[23:44:12] <ioxzev1z> ?
[23:44:15] <goodfella> yes
[23:44:28] <ChoHag> goodfella: Are you still on chapter 1? Weren't you chasing people off yesterday for not being helpful enough?
[23:45:48] <goodfella> ChoHag: what do you need help with
[23:45:51] <goodfella> ?
[23:45:53] <goodfella> i might help
[23:46:32] <ChoHag> You might.
[23:46:35] <ChoHag> Then again, you might not.
[23:46:45] <ChoHag> If I was a gambling man...
[23:47:27] *** Quits: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net) (Remote host closed the connection)
[23:47:37] <caze> goodfella: What if I told you that the only characters that should ever be stored in your buffer are ' ' and '\t'?
[23:47:52] *** Joins: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net)
[23:48:00] <ChoHag> Since you're struggling with stack allocation I fear that pointers to objects which point to further objects unless the value of their pointer is misaligned might throw you a tad.
[23:48:17] <goodfella> caze: you know me.. always happy to see different solutions
[23:48:29] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:49:08] <caze> goodfella: This exercise isn't meant to be an exercise in using realloc.
[23:49:11] <goodfella> where this hostility comes from ChoHag ?
[23:49:12] <ChoHag> caze: Ah I didn't consider that. I'd have just collected up to the newline keeping track of the last printable character's location.
[23:49:44] <ChoHag> goodfella: Too much arrogance combined with patent ignorance.
[23:50:21] <caze> goodfella: Consider the strategy of how the buffer was used in 1-17. The buffer is used to store characters that you potentially might *not* print.
[23:50:26] <ChoHag> The theory being that since there can be an unknown number of types of blanks there's no need to special-case that part of each line's collection.
[23:50:28] <caze> goodfella: THe same strategy can be used here.
[23:50:29] <goodfella> ChoHag: what was your intent with that message:
[23:50:30] <goodfella> ChoHag | goodfella: Are you still on chapter 1? Weren't you chasing people off yesterday for not being helpful enough?
[23:50:36] *** Joins: Viewday11 (~Viewday@user/viewday)
[23:50:45] <ChoHag> goodfella: To chide you into speeding up.
[23:51:03] <goodfella> and im the arrogant one ..
[23:51:07] <goodfella> lol
[23:51:17] <ChoHag> ETOOSLOW is a valid error.
[23:51:21] <caze> goodfella: In this exercise, and considering the context that malloc and realloc haven't been introduced yet, it's appropriate to just use a static sized buffer.
[23:51:34] <goodfella> ChoHag: so does ETOOARROGANT i guess
[23:51:45] <ChoHag> Unfortunately not.
[23:51:53] <ChoHag> The CPU is the ultimate arrogant.
[23:52:01] <goodfella> wrong
[23:52:03] <goodfella> you are
[23:52:08] *** Joins: korg815 (~korg815@user/korg815)
[23:52:14] <goodfella> and ill take it as slow as i need
[23:52:16] <ChoHag> Oh no I know my limits.
[23:52:21] <ericson2314> ChoHag: thanks but sorry I meant to say complie time assert
[23:52:22] <goodfella> surely not letting you "speeding me up"
[23:52:24] <bnchs> maybe we should stop throwing words around
[23:52:29] <bnchs> and focus on programming
[23:53:14] <ChoHag> ericson2314: if (1) abort(); maybe?
[23:53:30] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[23:53:40] <ChoHag> Requires optimisation as well as compilation but it comes close?
[23:53:50] <goodfella> caze: you are right, but i let ChoHag convince me that "remove" empty lines suggests dynamic allocation
[23:54:11] <ChoHag> Removing the empty lines only requires tracking some addresses.
[23:54:16] <goodfella> and in the moment i start to work on solutions he started to hate me
[23:54:26] <ChoHag> It's the dynamic length of potential lines which potentially requires dynamic allocation.
[23:54:30] <ioxzev1z> draaaaaaaaaaaaaaaaaaaaaaaaaammmmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
[23:54:30] <ericson2314> hmm maybe
[23:54:54] <ericson2314> sometimes I fel like it's return something and see if one gets "branch without value returned" warnings
[23:54:59] <ChoHag> You don't know when you might encounter the first (non-)blank.
[23:55:03] <ericson2314> I read GCC removed this sort of thing, bummer
[23:55:15] *** Quits: cptcirc (~cptcirc@142.167.143.188) (Ping timeout: 256 seconds)
[23:55:15] <caze> goodfella: Let's say you have a line like "123  4\n". Your program sees the '1', putchars it. Sees the '2', putchars it. Sees the '3', putchars it. Sees the space, and doesn't know if it needs to be printed, so saves it in the buffer. Sees another space, saves it in the buffer. Sees the '4', and can finally make the decisions that all the whitespace it had stored in the buffer needs to be printed. Also prints the
[23:55:17] <caze> '4' it just saw.
[23:55:32] <ericson2314> well at the moment i stopped needing it, but I will keep in mind, thanks!
[23:55:59] <goodfella> caze: no, nothing is "putchar" ..
[23:56:27] *** Quits: beepbooptheory (~mik-wsl@50.216.98.94) (Ping timeout: 250 seconds)
[23:56:32] <sham1> Maybe you should use it
[23:56:34] <goodfella> after im dealing with the buffer i just point to the last character in the buffer that is not blank or tab and print all up until that point
[23:56:35] <caze> goodfella: If on the other hand, it only saw '\n', then it knows to abandon everything in the buffer.
[23:56:43] <caze> goodfella: Why?
[23:57:01] <goodfella> caze: did you look in my code ?
[23:57:22] <caze> goodfella: Not really, I saw that you use malloc and realloc, and stopped reading, because you completely missed the point of the exercise.
[23:57:22] <goodfella> upon '\n' i start all over
[23:57:30] <ChoHag> You can either wait until you have a line and know where it's non-blanks end or as caze suggested switch state between printing and collecting whenever a (non-)blank is encountered, either way you have to be able to collect an unknown-in-advance amount of data.
[23:57:54] <ChoHag> Hence, dynamic allocation.
[23:57:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:59:11] <ioxzev1z> realloc with a single byte is a bit wasteful
[23:59:13] <caze> goodfella: I think you might have missed some things I wrote when you were fighting with ChoHag.
[23:59:28] <goodfella> caze: here is another solution
[23:59:29] *** Quits: akuma (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[23:59:31] <goodfella> https://bpa.st/VSXA
[23:59:57] <goodfella> caze: i might but i ignored him .. so i please try agian
