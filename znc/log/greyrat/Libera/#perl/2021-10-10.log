[00:03:52] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[00:09:02] <LeoNerd> ehuelsmann[m]: gi
[00:09:04] <LeoNerd> hi
[00:09:18] <ehuelsmann[m]> hi!
[00:10:15] <ehuelsmann[m]> I'm getting an error on Perl 5.20 with XS::Parse::Keyword::Builder, which is a dependency of Syntax::Keyword::Try. I was wondering if there's a workaround or what I can do to help a fix.
[00:10:34] <ehuelsmann[m]> (I'm only depending explicitly on S:K:T)
[00:10:49] <ehuelsmann[m]> This is the test run: https://github.com/jonasbn/perl-workflow/pull/173/checks?check_run_id=3848046622
[00:10:49] <Paperbot_> Link title(s): [ Fix #172: Call the correct method name for autorun INITIAL states by ehuelsmann Â· Pull Request #1... ]
[00:12:00] *** Joins: boubou_ (~boubou@hide.my.ip.upsidehosting.com)
[00:13:43] <Grinnz> Paperbot_: nick Paperbot
[00:13:43] *** Paperbot_ is now known as Paperbot
[00:14:04] *** Quits: boubou (~boubou@hide.my.ip.upsidehosting.com) (Quit: ZNC - http://znc.sourceforge.net)
[00:14:05] *** Quits: przemoc (~przemoc@user/przemoc) (Ping timeout: 245 seconds)
[00:14:05] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 245 seconds)
[00:14:07] *** Joins: przemoc86 (~przemoc@89-72-24-4.dynamic.chello.pl)
[00:14:29] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Ping timeout: 245 seconds)
[00:14:51] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[00:15:38] <LeoNerd> ehuelsmann[m]: Er, there's no log there
[00:15:52] <LeoNerd> See /home/runner/.cpanm/work/1633810158.1778/build.log for details.
[00:16:07] <LeoNerd> Anyway it's probably the assert thing
[00:16:26] <LeoNerd> Change  HAVE_PERL_VERSION(5,20,0)  to  (5,22,0)
[00:17:49] <ehuelsmann[m]> ok. I can make sure it extracts the logs or I can make that change.
[00:17:53] <ehuelsmann[m]> whichever you want.
[00:18:42] <mst> ehuelsmann[m]: paste.scsys.co.uk the log, and try that change while leonerd's reading?
[00:20:16] <ehuelsmann[m]> ok. this will take a while to get figured out how to do. but it gives me something to do for a rainy saturday evening.
[00:21:04] <mst> ehuelsmann[m]: it shouldn't
[00:21:09] <mst> ehuelsmann[m]: first step, paste that file
[00:21:23] <mst> ehuelsmann[m]: second step, cd into .cpanm/work/<that dir>/XS-<tab>
[00:21:29] <ology> I love/hate a challenge.
[00:21:31] <mst> ehuelsmann[m]: grep for HAVE_PERL_VERSION
[00:21:36] <mst> ehuelsmann[m]: edit the file that shows up
[00:21:45] <mst> ehuelsmann[m]: then run 'perl Build.PL; ./Build test;'
[00:22:15] <ehuelsmann[m]> mst: yea. it's just that this is currently running on GitHub Actions. Not the most access friendly environment.
[00:22:24] <ehuelsmann[m]> I'll need it to dump the build logs for me.
[00:22:34] <mst> ehuelsmann[m]: break out p3rl.org/Perl::Build and reproduce it on a random handy linux box
[00:24:31] <ehuelsmann[m]> working on it.
[00:24:35] <ehuelsmann[m]> thanks!
[00:33:01] *** Joins: B33F_1338 (~b33f1337@host.b33f1337.com)
[00:35:51] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (Ping timeout: 245 seconds)
[00:37:09] <El_Che> computer vragen om nij lucas arts te solliciteren :)
[00:41:33] *** Joins: akaWolf (~akaWolf@akawolf.org)
[00:43:36] <El_Che> oop
[00:43:37] <El_Che> s
[00:44:07] <xenu> i don't speak north german
[00:45:00] <mst> german is just the ugliest dialect of dutch.
[00:48:05] <El_Che> german is dutch with a bad reputation
[00:49:50] <xenu> tbh while written dutch looks like german with too many Js, spoken dutch sounds more like english after a stroke
[00:49:53] *** Quits: brunoramoslu (~brunoramo@94.252.121.183) (Ping timeout: 264 seconds)
[00:49:57] <xenu> the words seem familiar yet i can't understand them
[00:50:42] <ehuelsmann[m]> "ask computer to apply for a job at Lucas Arts"
[00:51:35] <mst> xenu: when I try and read dutch my brain tries to parse it as german, english, and french at the same time and then segfaults
[00:51:55] <ehuelsmann[m]> lal\
[00:51:57] <ehuelsmann[m]> lol
[00:54:46] <El_Che> If I would be of bad faith I would I have said "german is dutch with an army"
[00:58:27] *** Joins: xenial-user10 (~androirc@20014C4C17E1D2005575509182C3B25C.catv.pool.telekom.hu)
[00:58:42] <mst> El_Che: BAHAHAHAHAHAHAHAHAHAHAHAHAHAHAHA
[01:03:10] *** Joins: brunoramoslu (~brunoramo@94.252.121.95)
[01:25:39] *** Joins: aspic (~shifty~~~@ppp121-44-107-5.syd-gls-har-bras38.tpg.internode.on.net)
[01:31:27] *** Quits: aspic (~shifty~~~@ppp121-44-107-5.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[01:42:50] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 246 seconds)
[01:43:07] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[01:46:37] *** Joins: whynot (~whynot@46.96.181.90)
[01:50:54] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[01:57:35] *** Quits: EGD (~egd@user/egd) ()
[01:57:40] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[02:10:55] *** Quits: xenial-user10 (~androirc@20014C4C17E1D2005575509182C3B25C.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[02:16:21] *** Joins: akaWolf (~akaWolf@akawolf.org)
[02:20:56] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[02:22:33] *** Joins: gast0n (~g4570n@user/gast0n)
[02:30:44] *** vrurg_ is now known as vrurg
[02:32:42] *** Quits: pizdets (~pizdets@183.182.110.93) (Ping timeout: 250 seconds)
[02:33:46] *** Joins: pizdets (~pizdets@183.182.110.107)
[02:36:16] *** Joins: ztx (~ztx@user/ztx)
[02:37:40] *** Joins: monkey_ (~user@190.104.116.134)
[02:56:49] *** Quits: jadesoturi (~jadesotur@user/jadesoturi) (Ping timeout: 250 seconds)
[02:56:50] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Ping timeout: 260 seconds)
[02:57:49] *** Quits: hudo (~hudo@62.68.20.210) (Ping timeout: 265 seconds)
[02:58:11] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[02:58:33] *** Joins: jadesoturi (~jadesotur@user/jadesoturi)
[03:00:06] *** Quits: pucara (~i@host223.190-31-184.telecom.net.ar) (Ping timeout: 245 seconds)
[03:02:34] *** Joins: R2robot (~R2robot@user/r2robot)
[03:07:12] *** Joins: pucara (~i@host223.190-31-184.telecom.net.ar)
[03:13:59] *** Joins: aspic (~shifty~~~@ppp121-44-127-13.syd-gls-har-bras39.tpg.internode.on.net)
[03:15:10] *** Joins: YaoNai (~YaoNai@user/yaonai)
[03:21:47] *** Quits: torbjorn_ (~torbjorn@88.81-166-205.customer.lyse.net) (Ping timeout: 240 seconds)
[03:22:00] *** Joins: torbjorn_ (~torbjorn@88.81-166-205.customer.lyse.net)
[03:23:20] <simcop2387> Mst, https://i.imgur.com/L1nqTsz.jpg
[03:33:52] *** Joins: Figworm (FiggyWitIt@user/figworm)
[03:34:45] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[03:35:50] *** Quits: Figworm (FiggyWitIt@user/figworm) (Client Quit)
[03:35:58] *** Joins: Figworm (FiggyWitIt@user/figworm)
[03:36:24] *** Quits: Figworm (FiggyWitIt@user/figworm) (Client Quit)
[03:38:22] *** Joins: Figworm (FiggyWitIt@user/figworm)
[03:54:57] *** Quits: aspic (~shifty~~~@ppp121-44-127-13.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[03:55:36] *** Joins: aspic (~shifty~~~@ppp121-44-124-244.syd-gls-har-bras39.tpg.internode.on.net)
[03:57:16] *** Quits: Pali (~pali@user/pali) (Ping timeout: 265 seconds)
[04:11:10] *** Quits: whynot (~whynot@46.96.181.90) (Quit: leaving)
[04:21:58] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 268 seconds)
[04:32:20] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[04:35:11] *** Joins: JoelJoel (~jjshoe@user/joel)
[04:36:25] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 265 seconds)
[04:49:16] *** Quits: Su-Shee (~Susanne@p4ff49be4.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:51:11] *** Joins: Su-Shee (~Susanne@p4ffc7d9a.dip0.t-ipconnect.de)
[04:54:45] *** Joins: CycoCid (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au)
[04:57:05] *** Quits: Dreadnaught (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au) (Ping timeout: 246 seconds)
[05:04:10] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 252 seconds)
[05:06:06] *** Joins: gast0n (~g4570n@user/gast0n)
[05:17:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[05:18:21] *** Joins: tg (~tg@rockylinux/infra/tg)
[05:19:59] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:21:24] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:21:30] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 260 seconds)
[05:28:56] *** Joins: geli (~gelignite@55d486d7.access.ecotel.net)
[05:31:46] *** Quits: magla (~gelignite@55d47841.access.ecotel.net) (Ping timeout: 260 seconds)
[05:32:10] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[05:33:16] *** Quits: symdrome (~symdrome@186-240-46-141.user3p.veloxzone.com.br) (Read error: Connection reset by peer)
[05:35:07] *** Joins: akaWolf (~akaWolf@akawolf.org)
[05:35:21] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 268 seconds)
[05:36:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[05:41:21] * GumbyPAN CPAN Upload: Alien-curl-0.09 by PLICEASE https://metacpan.org/release/PLICEASE/Alien-curl-0.09
[05:44:19] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 252 seconds)
[05:47:59] *** Joins: pj (~pj@ghettoforge/pj)
[06:12:47] *** Joins: dansan (~daniel@75.81.148.51)
[06:16:07] *** Quits: aspic (~shifty~~~@ppp121-44-124-244.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[06:16:09] *** Quits: sbates (~sbates@198.178.118.18) (Quit: Leaving)
[06:20:58] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[06:24:28] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:26:32] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:27:27] *** Quits: geli (~gelignite@55d486d7.access.ecotel.net) (Quit: Stay safe!)
[06:38:36] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[06:44:57] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:50:18] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[06:59:38] *** Joins: Martchus_ (~martchus@2a01:c22:738b:9e00:d250:99ff:fe49:3cce)
[07:00:54] *** Quits: Martchus (~martchus@2a01:c22:7b2d:100:d250:99ff:fe49:3cce) (Ping timeout: 260 seconds)
[07:17:52] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[07:48:37] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 252 seconds)
[07:50:52] *** Joins: Joel (~jjshoe@user/joel)
[07:51:52] *** Quits: JoelJoel (~jjshoe@user/joel) (Ping timeout: 252 seconds)
[07:54:18] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:01:30] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:02:45] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Remote host closed the connection)
[08:06:31] *** Joins: voegelas (~voegelas@www.andreasvoegele.com)
[08:26:42] *** Joins: monkey_ (~user@190.104.116.134)
[08:51:18] *** Quits: wlsn (~wlsn@79-75-247-141.dynamic.dsl.as9105.com) (Quit: WeeChat 2.3)
[09:06:46] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:11e3:257b:356e:c925)
[09:11:55] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. âChuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.â)
[09:19:13] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[09:23:10] *** Quits: Su-Shee (~Susanne@p4ffc7d9a.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[09:24:53] *** Joins: Su-Shee (~Susanne@p4ffc7141.dip0.t-ipconnect.de)
[09:27:43] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[09:28:17] *** Joins: semeion (~semeion@user/semeion)
[09:36:04] *** Joins: pajamian (~pj@ghettoforge/pj)
[09:36:21] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 245 seconds)
[09:36:36] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Been a long day.)
[09:36:57] *** pajamian is now known as pj
[10:00:29] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:04:48] *** Joins: EGD (~egd@user/egd)
[10:18:18] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:11e3:257b:356e:c925) (Ping timeout: 260 seconds)
[10:28:24] *** Joins: jabberwok (~wlindley@75.105.20.104)
[10:48:22] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[11:23:05] *** Joins: aspic (~shifty~~~@ppp121-44-113-65.syd-gls-har-bras39.tpg.internode.on.net)
[11:23:10] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[11:29:23] *** Joins: hudo (~hudo@62.68.20.210)
[11:30:05] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[11:30:05] *** diskin is now known as Guest8580
[11:30:05] *** Quits: Guest8580 (~diskin@185.49.242.26) (Killed (cadmium.libera.chat (Nickname regained by services)))
[11:30:05] *** diskin_ is now known as diskin
[11:31:55] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[11:32:00] * GumbyPAN CPAN Upload: GnuCash-SQLite-0.09 by HOEKIT https://metacpan.org/release/HOEKIT/GnuCash-SQLite-0.09
[11:33:24] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[11:33:54] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 260 seconds)
[11:36:47] *** Quits: pucara (~i@host223.190-31-184.telecom.net.ar) (Quit: Lost terminal)
[11:37:00] * GumbyPAN CPAN Upload: App-gimpgitbuild-0.30.1 by SHLOMIF https://metacpan.org/release/SHLOMIF/App-gimpgitbuild-0.30.1
[11:46:52] *** Quits: aspic (~shifty~~~@ppp121-44-113-65.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[11:47:09] *** Joins: aspic (~shifty~~~@ppp121-44-123-226.syd-gls-har-bras39.tpg.internode.on.net)
[12:15:14] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[12:17:56] *** Quits: aspic (~shifty~~~@ppp121-44-123-226.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[12:18:05] *** Joins: aspic (~shifty~~~@ppp121-44-102-108.syd-gls-har-bras38.tpg.internode.on.net)
[12:22:01] *** Joins: ritsch_master (~user@178.165.168.115.wireless.dyn.drei.com)
[12:31:19] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 252 seconds)
[12:36:08] *** Quits: aspic (~shifty~~~@ppp121-44-102-108.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[12:36:25] *** Joins: aspic (~shifty~~~@ppp121-44-100-56.syd-gls-har-bras38.tpg.internode.on.net)
[12:39:40] *** Joins: Pali (~pali@user/pali)
[12:40:24] *** Joins: magla (~gelignite@55d486d7.access.ecotel.net)
[12:47:05] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[12:48:07] *** Quits: aspic (~shifty~~~@ppp121-44-100-56.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[12:49:58] *** Quits: genio (sid223130@id-223130.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:50:15] *** Joins: Elis21F (~KELEBEK@188.119.54.133)
[12:51:07] *** Quits: odc (sid197788@id-197788.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[12:52:00] *** Joins: odc (sid197788@helmsley.irccloud.com)
[12:52:52] *** Joins: genio (sid223130@ilkley.irccloud.com)
[12:59:25] *** Quits: mstevens (sid285816@5.254.36.57) (Read error: Connection reset by peer)
[12:59:40] *** Quits: Yaakov (sid19863@user/Yaakov) (Ping timeout: 260 seconds)
[12:59:40] *** Quits: sa (sid1055@5.254.36.57) (Ping timeout: 260 seconds)
[12:59:46] *** Quits: toddr (sid457681@5.254.36.57) (Read error: Connection reset by peer)
[12:59:46] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (Ping timeout: 260 seconds)
[12:59:56] *** Quits: Elis21F (~KELEBEK@188.119.54.133) (Quit:   ©  Www.Kelebek.Org  Mutlaka Download Edin!  Kelebek Final  irc.kelebek.org  ßy wToprak  ®)
[13:00:06] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 245 seconds)
[13:00:10] *** Quits: skaji (sid178483@5.254.36.57) (Read error: Connection reset by peer)
[13:00:10] *** Quits: mruszczyk (sid160336@5.254.36.57) (Read error: Connection reset by peer)
[13:01:23] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[13:02:48] *** Joins: skaji (sid178483@id-178483.tinside.irccloud.com)
[13:03:01] *** Quits: pizdets (~pizdets@183.182.110.107) (Ping timeout: 245 seconds)
[13:03:21] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[13:03:27] *** Joins: toddr (sid457681@id-457681.tinside.irccloud.com)
[13:03:30] *** Joins: mstevens (sid285816@id-285816.tinside.irccloud.com)
[13:03:30] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[13:03:35] *** Joins: pizdets_ (~pizdets@183.182.110.49)
[13:03:48] *** Joins: Yaakov (sid19863@user/Yaakov)
[13:04:03] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 265 seconds)
[13:04:05] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[13:04:41] *** Joins: mruszczyk (sid160336@tinside.irccloud.com)
[13:04:56] *** Joins: WinterStar (~IceLight@user/icelight)
[13:09:25] *** Quits: Peppard (~quassel@2001:470:1f0b:751:c58d:52f3:f351:19b7) (Quit: No Ping reply in 180 seconds.)
[13:09:46] *** Joins: Tempesta (~Tempesta@user/tempesta)
[13:10:34] *** Joins: Peppard (~quassel@2001:470:1f0b:751:8547:3c3f:78:6b17)
[13:33:48] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[13:34:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:34:57] *** Joins: csrf (~csrf@user/csrf)
[13:35:07] *** Quits: ritsch_master (~user@178.165.168.115.wireless.dyn.drei.com) (Remote host closed the connection)
[13:36:34] *** Joins: nx_ (~nitronix@5.29.23.150)
[13:55:25] *** Quits: Su-Shee (~Susanne@p4ffc7141.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[13:57:20] *** Joins: Su-Shee (~Susanne@p508946fc.dip0.t-ipconnect.de)
[14:04:49] *** Quits: Yaakov (sid19863@user/Yaakov) (Ping timeout: 252 seconds)
[14:05:22] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 252 seconds)
[14:05:22] *** Quits: mstevens (sid285816@id-285816.tinside.irccloud.com) (Ping timeout: 252 seconds)
[14:05:22] *** Quits: toddr (sid457681@id-457681.tinside.irccloud.com) (Ping timeout: 252 seconds)
[14:05:42] *** Joins: xenial-user10 (~androirc@20014C4C17E1D20071A86FDA7A344641.catv.pool.telekom.hu)
[14:05:54] *** Joins: skaji_ (sid178483@tinside.irccloud.com)
[14:06:02] *** Quits: skaji (sid178483@id-178483.tinside.irccloud.com) (Ping timeout: 260 seconds)
[14:06:03] *** skaji_ is now known as skaji
[14:06:35] *** Joins: sa (sid1055@tinside.irccloud.com)
[14:07:55] *** Joins: Yaakov (sid19863@user/Yaakov)
[14:08:06] *** Joins: nxs__ (~nitronix@88.198.206.243)
[14:08:16] *** Joins: toddr (sid457681@tinside.irccloud.com)
[14:09:45] *** Joins: mstevens (sid285816@tinside.irccloud.com)
[14:10:31] *** Quits: nx_ (~nitronix@5.29.23.150) (Ping timeout: 245 seconds)
[14:30:41] *** Joins: humky (~humky@user/humky)
[14:37:25] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:40:25] *** Joins: Shells (~michelle@2407:8800:bc20:200a:b446:9071:e753:f4c9)
[14:41:33] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 265 seconds)
[14:47:45] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[14:49:51] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[14:51:00] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[14:53:13] *** Quits: xenial-user10 (~androirc@20014C4C17E1D20071A86FDA7A344641.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[15:12:18] *** przemoc86 is now known as przemoc
[15:12:29] *** Quits: przemoc (~przemoc@89-72-24-4.dynamic.chello.pl) (Changing host)
[15:12:29] *** Joins: przemoc (~przemoc@user/przemoc)
[15:20:03] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[15:21:25] * GumbyPAN CPAN Upload: Web-Solid-Auth-0.4 by HOCHSTEN https://metacpan.org/release/HOCHSTEN/Web-Solid-Auth-0.4
[15:22:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:34:16] *** Quits: Su-Shee (~Susanne@p508946fc.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[15:35:57] *** Joins: Su-Shee (~Susanne@p4ffc7abd.dip0.t-ipconnect.de)
[15:36:18] <rindolf> Yaakov: shavua tov
[15:37:43] *** Joins: michelle_ (~michelle@203.206.128.220)
[15:38:26] *** Quits: Shells (~michelle@2407:8800:bc20:200a:b446:9071:e753:f4c9) (Ping timeout: 245 seconds)
[15:41:28] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[15:41:48] <LeoNerd> ehuelsmann[m]: Did you make any progress with your 5.20+XS bug?
[15:56:35] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:59:10] *** Joins: nx_ (~nitronix@88.198.206.243)
[15:59:28] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[16:00:10] *** Quits: nxs__ (~nitronix@88.198.206.243) (Read error: Connection reset by peer)
[16:02:00] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[16:04:38] <ehuelsmann[m]> LeoNerd: hi. thanks for asking. I just installed 5.20.3; working to investigate if that's enough to reproduce my problem.
[16:05:40] *** Joins: nxs__ (~nitronix@88.198.206.243)
[16:05:56] *** Quits: nx_ (~nitronix@88.198.206.243) (Read error: Connection reset by peer)
[16:17:35] <LeoNerd> OK
[16:19:20] <ehuelsmann[m]> LeoNerd: just posted the logs. Looking at the offending line.
[16:20:40] <ehuelsmann[m]> ok. you said something about "the assert problem".
[16:21:32] <LeoNerd> https://metacpan.org/release/PEVANS/XS-Parse-Keyword-0.19/source/src/infix.c#L26-27
[16:21:32] <Paperbot> Link title(s): [ src/infix.c - metacpan.org ]
[16:21:37] <LeoNerd> It's possible that 20 needs to be a22
[16:22:41] <ehuelsmann[m]> ok. I can try compiling that.
[16:26:25] <ehuelsmann[m]> it does compile when I change 5.20 to 5.22
[16:26:36] <LeoNerd> OK so it might be that's the change required
[16:27:50] <ehuelsmann[m]> I ran `./Build` to build it. How do I run the tests?
[16:27:59] <LeoNerd> ./Build test
[16:28:22] <ehuelsmann[m]> with that change the tests succeed locally.
[16:30:02] <ehuelsmann[m]> did that help?
[16:30:11] <LeoNerd> Did it help what? I think that's a question to you, surely?
[16:30:15] <LeoNerd> Has your problem now been fixed?
[16:30:38] <ehuelsmann[m]> ah. well, yes, it helped me understand why the build fails on 5.20.
[16:30:48] <LeoNerd> :)
[16:30:49] *** Joins: gast0n (~g4570n@user/gast0n)
[16:31:06] <ehuelsmann[m]> I'm not sure if you need more information regarding 5.20 for an orderly fix, though. Maybe I can supply you with that?
[16:31:23] <LeoNerd> No I just  s/20/22/ on that one line and all is fine
[16:32:01] <LeoNerd> It just means 5.20 or older don't use the assert() so _if_ something else is already broken there, it might be less obvious in that case as to why
[16:32:01] <ehuelsmann[m]> ok. perfect. thanks for the help!
[16:34:54] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 260 seconds)
[16:35:25] *** Joins: sbates (~sbates@198.178.118.18)
[16:36:01] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[16:36:11] <ehuelsmann[m]> yea. I'm actually running tests and production for the latest version of my software on 5.32+, but the library (Workflow) still supports much older and it tripped over this line on a recent PR of mine, because the test suite happens to include 5.20 (but not 5.22 or 5.18...)
[16:38:51] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[16:52:36] *** Joins: aspic (~shifty~~~@ppp121-44-109-220.syd-gls-har-bras38.tpg.internode.on.net)
[16:58:08] <LeoNerd> Bah. I wish do {} was a loop
[16:58:38] <LeoNerd> I want to   my $args = do { ( $pkg->can( "COMMAND_ARGS" ) or last )->() };
[16:58:46] <LeoNerd> Oh.. wait I cna put -that- inside a loop :)
[16:59:22] <rindolf> LeoNerd: last LABEL?
[17:09:31] *** Joins: akaWolf (~akaWolf@akawolf.org)
[17:13:32] *** Quits: aspic (~shifty~~~@ppp121-44-109-220.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:14:04] *** Joins: aspic (~shifty~~~@124-150-107-93.dyn.iinet.net.au)
[17:15:27] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[17:26:33] *** Quits: TieUpYourCamel (~david@2600:1702:26a0:2000:64b3:6f71:b4cf:a70c) (Quit: Leaving)
[17:32:30] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[17:43:06] *** Joins: TieUpYourCamel (~david@2600:1702:26a0:2000:d8e6:c1af:b9ab:5a0f)
[17:49:54] *** Joins: thrig (~thrig@70.97.65.251)
[17:49:57] <greyrat> How do I compile a regex as case-insensitive? =qr/$query/i= doesn't seem to work.
[17:50:12] <LeoNerd> Should work fine
[17:50:35] <LeoNerd> eval: my $query = "hello"; my $re = qr/$query/i; print "Match" if "HeLlO" =~ $re;
[17:50:39] <perlbot> LeoNerd: Match
[17:51:24] <thrig> some want the egg broken on the other end, or qr/(?i)...
[17:51:46] <greyrat> Right, I had another mistake. Sorry.
[17:52:37] <greyrat> BTW, is `/$a|$b/` slower than `/$a/ or /$b/`?
[17:52:51] <thrig> use Benchmark qw(cmpthese) ...
[17:53:31] *** Quits: bn_work (uid268505@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:04:36] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:11:47] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Remote host closed the connection)
[18:33:27] *** Quits: aspic (~shifty~~~@124-150-107-93.dyn.iinet.net.au) (Ping timeout: 260 seconds)
[18:41:53] *** Joins: pucara (~i@host223.190-31-184.telecom.net.ar)
[19:06:37] <LeoNerd> I think I have now reached the peak (or depth?) of today's dependency stack.. and I can now begin to unwind it
[19:06:48] <LeoNerd> Only 4 levels today
[19:08:25] *** Quits: nxs__ (~nitronix@88.198.206.243) (Ping timeout: 252 seconds)
[19:18:32] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[19:20:12] *** Joins: nxs__ (~nitronix@5.29.23.150)
[19:20:31] *** Quits: karjala (sid176588@lymington.irccloud.com) (Ping timeout: 245 seconds)
[19:20:31] *** Quits: mstevens (sid285816@tinside.irccloud.com) (Ping timeout: 252 seconds)
[19:20:34] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (Ping timeout: 260 seconds)
[19:20:55] *** Quits: itok (sid418430@ilkley.irccloud.com) (Ping timeout: 265 seconds)
[19:21:15] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[19:21:15] *** Joins: itok (sid418430@id-418430.ilkley.irccloud.com)
[19:22:03] <ehuelsmann[m]> LeoNerd: i work that way too, but my stack seems to unwind after weeks instead of hours, usually...
[19:22:37] <thrig> probably depends on how aggressive you are about closing the stack overflow tabs
[19:22:39] * ehuelsmann[m] should learn how others do that
[19:23:48] *** Joins: karjala (sid176588@id-176588.lymington.irccloud.com)
[19:24:29] *** Joins: mstevens (sid285816@id-285816.tinside.irccloud.com)
[19:24:55] *** Quits: Yaakov (sid19863@user/Yaakov) (Ping timeout: 252 seconds)
[19:25:06] *** Joins: Yaakov (sid19863@user/Yaakov)
[19:28:10] *** Quits: nxs__ (~nitronix@5.29.23.150) (Ping timeout: 252 seconds)
[19:28:26] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 245 seconds)
[19:29:18] <zgu> "next thing you know, you're at the zoo shaving a yak so you can wash your car"
[19:31:46] <LeoNerd> zgu: I still want a 4-panel comic strip: 1. Shave a yak. 2. Collect yak-hair. 3. Make a yak-hair paintbrush. 4. Paint a bikeshed
[19:33:28] <thrig> but what color of paint?
[19:34:49] <corwin> LeoNerd: would order print of that tbh
[19:35:55] <corwin> LeoNerd: upon further consideration, I bet I know an artist that would take this on.  Would you mind yoinkage?
[19:36:42] <corwin> thrig: maybe ACME TBD #5 ?
[19:37:09] <thrig> it's not a proper bikeshed that isn't argued over
[19:38:10] <corwin> indeed, but the key management tactic here is leaving the decision to our betters for Laterâ¢
[19:39:14] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[19:40:48] <aquanight> perlbot: sweval use Scalar::Util 'weaken'; my $x; { my $y = []; weaken($x = \$y); } "$x";
[19:40:51] <perlbot> aquanight: Use of uninitialized value $x in string at (IRC) line 1. 
[19:40:59] <aquanight> perlbot: sweval use Scalar::Util 'weaken'; my $x; { my $y = []; weaken($x = \$y); } [ $x ];
[19:41:00] <perlbot> aquanight: [undef]
[19:41:09] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 245 seconds)
[19:41:29] <aquanight> now I just need to figure out the actual mechanism that make that happen
[19:44:25] <aquanight> hmm
[19:44:47] <aquanight> apparently the magic is to apply SvWEAKREF to the referencing scalar, and put magic on the referant with a backref list.
[19:44:54] <aquanight> well crapeth.
[19:46:02] *** Quits: magla (~gelignite@55d486d7.access.ecotel.net) (Quit: Stay safe!)
[19:49:09] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[19:49:20] *** Quits: hyperreal (hyperreal@fedora/hyperreal) (Quit: the lounge - https://webirc.envs.net)
[19:49:37] *** Joins: hyperreal (hyperreal@fedora/hyperreal)
[19:51:21] *** Quits: Su-Shee (~Susanne@p4ffc7abd.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[19:52:22] <LeoNerd> corwin: Go for it :)
[19:53:05] <LeoNerd> aquanight: What are you trying to do?
[19:53:09] *** Joins: Su-Shee (~Susanne@p508943e4.dip0.t-ipconnect.de)
[19:53:31] <aquanight> LeoNerd: understand exactly how the "weak refs get forced to undef when the object expires" mechanism happens
[19:53:55] <aquanight> so I could understand how feasible it is to repurpose that mechanism for a hypothetical 'with'
[19:54:43] *** Joins: vague (~vague@irssi/staff/vague)
[19:54:53] <aquanight> e.g. my $y; { with my $x = []; $y = $x; } ok(!defined $y);
[19:56:13] <LeoNerd> That's not what you want to do
[19:56:32] <LeoNerd> That kind of `with` should probably use the savestack
[19:56:49] <LeoNerd> weakrefs and DESTROY are all about the actual refcount of the value itself. Whereas here we know the dynamic scope that we _intend_ the value to have
[19:57:04] <aquanight> sure
[19:57:25] <aquanight> but there needs to be an understanding of what happens to any extra references to the destroyed object
[19:57:39] <aquanight> hmm
[19:57:41] <LeoNerd> That's why I suggested to use assert_oneref
[19:57:49] <aquanight> I'll need to look into what that is
[19:57:54] <LeoNerd> I sent you a link
[19:57:59] <LeoNerd> 18:35 <LeoNerd> https://metacpan.org/pod/Devel::Refcount#assert_oneref(-$ref-)
[19:58:01] <Paperbot> Link title(s): [ Devel::Refcount - obtain the REFCNT value of a referent - metacpan.org ]
[19:58:20] <LeoNerd> In fact, it's quite simple to write with 'defer' now I think about it
[19:58:34] <LeoNerd> { my $var = Thingy->new; defer { assert_oneref $var }   some code here }
[19:58:44] <aquanight> okay that just forces an error if someone took a reference
[19:59:00] <LeoNerd> Yup. And optionally helps you track down the guilty culpret
[19:59:04] <LeoNerd> culprit
[19:59:24] <aquanight> hmmm
[19:59:59] <aquanight> my invisioning was that it would simply forceably destroy the object, no questions asked, no matter the refcount
[20:00:09] <LeoNerd> That's also doable but it's far more subtle
[20:00:11] <aquanight> basically effectively treating it as if all references *except* the 'with' ref was a weak ref
[20:00:21] <LeoNerd> That just means someone else's code, somewhere else, might break later on, if they still hold a reference to it
[20:00:24] <LeoNerd> Better to know /now/
[20:00:46] <aquanight> true, forcing to undef means they just get a weird "uninitialized" fatal
[20:00:47] <LeoNerd> "fail loud and early"
[20:01:04] <aquanight> the C# solution was ObjectDisposedException
[20:01:21] <aquanight> i.e. you "technically" still have a live object but it just refuses to do anything other than throw that
[20:01:43] <aquanight> I was hoping to avoid that because it basically splits object destruction
[20:01:48] <LeoNerd> Right.. I don't believe a CPAN module can retrofit that onto perl
[20:01:51] <LeoNerd> core would have to dit
[20:01:52] <LeoNerd> *do it
[20:02:03] <LeoNerd> And it would slow down some very hot paths
[20:02:25] <aquanight> I'm not even worried about the politics of it. Just conceptually it's icky to me to split destruction when construction is not
[20:02:43] <aquanight> that C# had to do it was a necessary evil due to their background GC
[20:02:57] <LeoNerd> Yeah.. we have reliable GC and reference counting, so make use of it
[20:03:02] <LeoNerd> Use the tools we have :)
[20:03:15] <aquanight> to the point that literally nobody actually uses a finalizer (the de-jure "destructor") other than to just ensure Dispose() gets called
[20:03:27] <LeoNerd> Yuh
[20:03:28] <aquanight> I would not necessarily call our GC reliable
[20:03:39] <aquanight> it's refcounted which still has its share of corner cases
[20:03:42] <LeoNerd> It's "reliable" in the sense that it is predictable
[20:03:51] <aquanight> the more releveant fact is that it's inline and immediate
[20:03:53] <LeoNerd> It doesn't depend at all on timing races or threads or anything else
[20:04:01] <LeoNerd> It is 100% repeatable and deterministic
[20:04:07] <aquanight> as soon as a refcount falls to zero the object is immediately destroyed, interrupting the execution thread
[20:04:34] <aquanight> there is no way to observe a state in between the final reference falling off and the object's destructor beginning
[20:05:12] <aquanight> that it happens right there, right then.
[20:05:29] <aquanight> but
[20:05:49] <aquanight> you're still at the mercy of the refcount. Circular references are the obvious scenario but also the need for assert_oneref
[20:06:07] <LeoNerd> But that's fine, we already have an assert_oneref :) I already wrote it
[20:06:09] <aquanight> of course, circular references are solved by weakref
[20:06:16] <LeoNerd> (it's also a trivial ~3liner in the simple case)
[20:06:50] <aquanight> I guess what I would want is something like a "superweak" ref where, while copies of weak refs are full refs, copies of superweak are still superweak
[20:07:31] <aquanight> I could conceivably implement a PP 'with' that ties the referring scalar so that FETCH always returns a weakened reference
[20:08:39] <aquanight> hmm
[20:08:50] <aquanight> returning a weakened reference from a method is apparently a tricky proposition
[20:09:51] <aquanight> but the problem of self-propogating weakref is that every new copy is further added to the ever-growing chain of weakrefs managed by sv_rvweaken
[20:10:20] <LeoNerd> I feel that you're trying very hard to build the complicated mechanism that some other languages have, because they don't have SvREFCNT
[20:10:21] <aquanight> I imagine most objects that want this kind of assured-destruction pattern are typically used short-term
[20:10:26] <LeoNerd> Since we /do/ have SvREFCNT, just use the damn thing :P
[20:10:46] <aquanight> then what should 'with' actually *do* then?
[20:10:58] <LeoNerd> At the end of the with'ed block, check if SvREFCNT == 1. If so, all is fine. If not then you *know* it is wrong and at that point maybe you can go off and do... something
[20:11:03] <LeoNerd> What the something is is up to you
[20:11:18] <LeoNerd> throw an exception? dump a .pmat file?  print a warning and carry on? hunt refs and undef'ify them?
[20:11:26] <LeoNerd> any or all of these
[20:11:34] <aquanight> the latter part was my original thought.
[20:11:42] <aquanight> the problem is finding said refs
[20:11:56] <aquanight> and I was hoping the weakref mechanism could yield some insight on how that could even *work*
[20:12:40] <LeoNerd> If it's the slow "your code is already broken" path, just walk the heap ;)
[20:13:03] <aquanight> warn and force-destroy seems like a reasonable option. You can still know someone held a reference they shouldn't have
[20:13:43] <aquanight> though if I'm honest, the one thing I really hoped for was to somehow leverage 'with' as a way to bring some semblance of order to the mess that is "global destruction"
[20:14:10] <LeoNerd> but really I'd just use assert_oneref
[20:14:33] <aquanight> it might seem odd to care, since the ultimate step of global destruction is the operating system rips up your memory pages
[20:14:41] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 245 seconds)
[20:14:47] <LeoNerd> then you know not only /that/ the code is broken but also where
[20:14:49] <aquanight> and at that point you're past caring what happens to them
[20:15:32] <aquanight> for a core solution, I'd make it a warning, though I've no idea what category to put it in
[20:15:37] <LeoNerd> if assert_oneref fails then you get a .pmat file you can load in the pmat shell and analyse exactly where the program was broken
[20:15:41] <aquanight> that way you could control it with use warnings as you see fit
[20:15:49] <aquanight> fatalize it and get effectively assert_oneref behavior
[20:15:57] <LeoNerd> Better than simply knowing that it broke
[20:15:58] <aquanight> don't and get guaranteed destruction
[20:17:00] <aquanight> because I mean you're right. The problem I was thinking to solve with 'with' is the problem C# has, and C# only has because it doesn't have SvREFCNT
[20:17:11] <LeoNerd> As I said :)
[20:17:21] <aquanight> in any normal situation where everything is playing nice
[20:17:28] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[20:17:33] <aquanight> you *can* count on { my $obj = Whatever; stuff; } to destroy $obj when the scope leaves
[20:17:38] <aquanight> with nothing extra fancy
[20:17:56] <aquanight> and this is true even for objects owned by other objects in slots
[20:18:22] <aquanight> class Thing { has $other; ... } # $other gets destroyed after the Thing that has it is
[20:18:56] <aquanight> unlike C# where objects that own IDisposables basically have to be IDisposable themselves to ensure correct cleanup.
[20:19:18] <aquanight> Thing rarely has any reason to need to be sure $other gets destroyed
[20:19:38] <aquanight> the most that might ever happen is if you need to be sure several owned objects get destroyed in the right order
[20:20:01] <aquanight> because I would have no idea what destruction order would be for several owned objects in O:P slots
[20:20:04] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:11e3:257b:356e:c925)
[20:20:08] <aquanight> worst case: effectively hash-random
[20:20:17] <aquanight> (ideal case: declaration order)
[20:21:26] <LeoNerd> There are no hashes
[20:21:29] <LeoNerd> It's all arrays
[20:22:44] <aquanight> :repr(HASH)
[20:22:53] <aquanight> but then I remembered it's still an array
[20:22:58] <aquanight> just an array in one specific key
[20:23:20] <aquanight> but hmm
[20:23:33] <aquanight> would it be more correct to ensure destruction in declaration order, or in *reverse* declaration order?
[20:23:56] <aquanight> LeoNerd: I'm assuming you're just letting perl take care of that nonsense when you release the array?
[20:25:09] <LeoNerd> yup
[20:25:19] <aquanight> if perlbot is to be believed, arrays are trashed last to first
[20:25:35] <aquanight> that or global destruction is *again* fucking with me
[20:26:03] <aquanight> ok no
[20:26:23] <aquanight> that's... good actually.
[20:27:07] <LeoNerd> Yes it's all nicely ordered
[20:27:33] <aquanight> so why do I still have this thought that it could all go horribly wrong?
[20:27:57] <aquanight> hmm
[20:28:11] <aquanight> just need to see what the destruct order is between base classes and roles I think.
[20:28:46] <aquanight> that could theoretically matter if DESTROY methods call back into other classes that have already had their elements destroyed
[20:29:08] <aquanight> but I feel like this is on the same level as calling methods during construction
[20:29:26] <aquanight> which is: enjoy your foot bullets
[20:33:37] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 252 seconds)
[20:37:19] *** Joins: krismatrix (~krismatri@38.80.149.51)
[20:38:14] *** Joins: akaWolf (~akaWolf@akawolf.org)
[20:40:31] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[20:46:58] *** Joins: vague (~vague@irssi/staff/vague)
[20:48:08] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[20:50:05] *** Joins: sergiotarxz[m] (~sergiotar@2001:470:69fc:105::1:15f2)
[20:50:40] <corwin> LeoNerd: artist secured.
[20:52:19] <corwin> Aside, if I could make a living finding ways to jam cash into the pockets of artists I would do that, ethical barriers notwithstanding.   Thanks for sharing.  I'll put it here and email ya when something actually exists.  No timeframe.
[20:52:33] *** Joins: tomaw_ (tom@libera/staff/tomaw)
[20:55:39] <LeoNerd> Excelllent :)
[20:56:21] <corwin> :D
[20:58:32] *** tomaw is now known as Guest5854
[20:58:32] *** Quits: Guest5854 (tom@libera/staff/tomaw) (Killed (cadmium.libera.chat (Nickname regained by services)))
[20:58:32] *** tomaw_ is now known as tomaw
[21:07:02] * GumbyPAN CPAN Upload: Commandable-0.05 by PEVANS https://metacpan.org/release/PEVANS/Commandable-0.05
[21:08:45] <LeoNerd> OK. So... now I can sensibly write commandline wrapper tools around things, let me see if I can write a tool around a perl module that interacts with a microcontroller I built for talking to my weather station to see if I can work out why it crashes in cold weather
[21:16:22] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[21:16:55] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 265 seconds)
[21:17:11] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 245 seconds)
[21:23:11] *** Joins: hudo_ (~hudo@62.68.20.210)
[21:24:46] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 252 seconds)
[21:26:35] *** Quits: hudo (~hudo@62.68.20.210) (Ping timeout: 265 seconds)
[21:30:05] *** Joins: semeion (~semeion@user/semeion)
[21:30:15] *** Joins: pj (~pj@ghettoforge/pj)
[21:32:45] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:35:46] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (Ping timeout: 265 seconds)
[21:48:38] *** Joins: srid[m] (~sridmatri@2001:470:69fc:105::1c2)
[21:48:56] *** Parts: srid[m] (~sridmatri@2001:470:69fc:105::1c2) ()
[21:49:49] *** Joins: Sleepy63 (~Sleepy63@user/sleepy63)
[21:58:13] *** Quits: ignarps (~iggy@user/ignarps) (Quit: ZNC - https://znc.in)
[21:58:19] <Kobaz> soooo I'm using Net::Server::PreFork... ->run(port => '2000', host => '127.0.0.1', min_servers => 15, min_spare_servers => 15,max_spare_servers => 30, max_servers => 100, max_requests => 100, check_for_waiting => 5)
[21:58:47] <Kobaz> and then i'm getting errors: Net::Server -- Accept failed with 6 tries left: Bad file descriptor
[22:00:05] <Kobaz> it just keeps counting down until: Ran out of accept retries!
[22:03:48] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 265 seconds)
[22:03:52] *** Joins: magla (~gelignite@55d486d7.access.ecotel.net)
[22:08:06] *** Joins: vague (~vague@irssi/staff/vague)
[22:12:09] * GumbyPAN CPAN Upload: CryptX-0.073_002 by MIK https://metacpan.org/release/MIK/CryptX-0.073_002
[22:15:56] <mst> Kobaz: are you using some sort of stupid daemonisation code that does POSIX::_exit ?
[22:16:28] <Kobaz> i don't call it
[22:16:32] *** Quits: vague (~vague@irssi/staff/vague) (Read error: Connection reset by peer)
[22:16:32] <Kobaz> maybe a module does?
[22:18:12] <mst> let me rephrase this so you're less confused: are you using a daemonisation module?
[22:18:28] <mst> IME Proc::Daemon is the most common mistake
[22:18:40] <Kobaz> i'm using Net::Server::PreFork
[22:18:45] <Kobaz> so yeah it daemons it for you
[22:19:54] <Kobaz> so. the fix is... max_requests => 1
[22:20:17] <mst> so, something in your code is doing a close()
[22:20:23] <mst> (PreFork doesn't)
[22:20:30] <mst> you might want to strace -f
[22:21:06] <Kobaz> ah
[22:21:10] <Kobaz> hmm
[22:21:21] <Kobaz> well i do close() the server connection in my unrelated worker children
[22:21:25] <Kobaz> if they dont need the server socket
[22:21:33] <Kobaz> like File::Tee
[22:23:34] <mst> possibly you've got a close() in the wrong process?
[22:23:42] <mst> maybe sprinkling 'warn $$;' everywhere would help
[22:27:54] *** Quits: sbates (~sbates@198.178.118.18) (Quit: Leaving)
[22:30:06] <Kobaz> sounds good
[22:30:10] <Kobaz> i like warn $$ everywhere
[22:30:15] *** Joins: vague (~vague@irssi/staff/vague)
[22:31:41] <Kobaz> yeah you're right
[22:31:45] <Kobaz> this does look like a close() in the wrong place
[22:32:05] <Kobaz> i added some debugging.. once the child handles a request, it no longer has the server socket
[22:32:06] <Kobaz> thakns
[22:33:00] <Kobaz> sub process_request { my $self = shift(); close($self->{server}{sock}[0]);
[22:33:01] <Kobaz> oh right
[22:33:04] <Kobaz> that's my fix for hot reloads
[22:33:18] <Kobaz> because the server cannot rebind if the children have the server socket open
[22:33:27] <Kobaz> i need a signal to tell them to close the server sock if we're restarting
[22:33:34] <Kobaz> instead of auto-closing
[22:34:08] <Kobaz> hot restarts rather... not hot reloads... i'm killing the main server process and starting a new one, and having child connections carry on from the old server
[22:34:41] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 245 seconds)
[22:37:09] <mst> Kobaz: you're on linux, open the server socket with SO_REUSE
[22:38:39] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[22:38:53] <mst> that or do your hot restart w/exec()
[22:39:54] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[22:44:42] *** Quits: pucara (~i@host223.190-31-184.telecom.net.ar) (Quit: Lost terminal)
[22:48:02] *** Joins: vague (~vague@irssi/staff/vague)
[22:54:02] *** Joins: aspic (~shifty~~~@ppp121-44-118-38.syd-gls-har-bras39.tpg.internode.on.net)
[22:59:07] <greyrat> I am trying to print hashes to JSON, but with rather weird result. Can someone point out my mistake(s)? https://paste.gnugen.ch/paste/peUX
[23:00:25] <mst> $h['a'] = 'hi'; is not valid perl
[23:00:28] <mst> you need 'use strict;'
[23:00:43] <mst> perl syntax is: $array[0], $hash{key}
[23:01:00] <mst> also: my %h = {name => 'foo'}; is wrong
[23:01:07] <mst> my %h = (name => 'foo');
[23:01:12] <mst> a hash is not a hash reference.
[23:01:26] *** schrodinger_ is now known as schro
[23:02:04] *** Joins: Darkcoal (~user@2001:16a2:774b:a200:bd65:6155:898:192d)
[23:04:25] *** Quits: EGD (~egd@user/egd) ()
[23:07:14] * GumbyPAN CPAN Upload: B-Hooks-EndOfScope-0.25 by ETHER https://metacpan.org/release/ETHER/B-Hooks-EndOfScope-0.25
[23:08:47] *** Joins: Guest94 (~Guest94@31.128.204.132)
[23:09:11] <Guest94> Hello ) Please advice Perl hosting ))
[23:11:21] *** Quits: Darkcoal (~user@2001:16a2:774b:a200:bd65:6155:898:192d) (Ping timeout: 245 seconds)
[23:11:43] *** Joins: Darkcoal (~user@139.64.25.106)
[23:13:56] <ology> THat depends on your needs. Context is handy.
[23:15:14] <ology> For instance, I rent a linode instance, which allows me to ssh in and manage things myself.
[23:15:55] <LeoNerd> I used to, but moved to DigitalOcean now
[23:16:25] <mst> my personal infra is split between DO, OVH and Hetzner
[23:16:25] <ology> Major reason why, if I may ask?
[23:16:51] <ology> LeoNerd: ^
[23:17:37] <Guest94> DigitalOcean support Perl 5.32?
[23:17:50] <LeoNerd> I'm not entirely sure I remember why
[23:18:56] <LeoNerd> I remember the migration but not the reason
[23:21:28] <mst> Guest94: you can install any perl you like
[23:21:49] <mst> if you don't want a full VM, consider nearlyfreespeech.net
[23:22:04] <LeoNerd> DigitalOcen give you boxes you can run whatever on. I run debian, and build stuff
[23:22:06] <Guest94> ok,i try. thanks
[23:23:09] <El_Che> I may be promoting the devil, but Oracle cloud gives you 2 VMs for free if you manage to understand their terrible UI
[23:23:26] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 245 seconds)
[23:24:01] <ology> I used nearlyfreespeech.net 13 years ago and ended up hating them with extreme prejudice for some forgotten reason.
[23:24:26] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[23:27:57] *** Quits: Guest94 (~Guest94@31.128.204.132) (Quit: Client closed)
[23:32:49] *** Joins: N4buc0 (~N4buc0@2804:14c:8782:814c:d332:3a8e:5821:2145)
[23:34:50] <mst> ology: I ended up in an argument with the owner about that long ago but they seem to've been pretty solid for everybody else
[23:34:54] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 260 seconds)
[23:41:18] * GumbyPAN CPAN Upload: Graph-0.9725 by ETJ https://metacpan.org/release/ETJ/Graph-0.9725
[23:46:48] *** Quits: Darkcoal (~user@139.64.25.106) (Quit: Darkcoal)
[23:58:13] *** Joins: Nitronix (~nitronix@5.29.23.150)
