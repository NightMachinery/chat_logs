[00:01:16] <FromDiscord> <fail> d
[00:09:15] <PMunch> @lpha3ch0, async is definitely the way to go here. Your app will spend almost all of it's time waiting for the server, so throwing more CPU power (i.e. threads) on it won't speed anything up. With async on the other hand you can send multiple requests of and have a single CPU thread sit there and listen for all of the replies
[00:09:41] <FromDiscord> <ynfle> Listen to the pros!!! ‚òùÔ∏è
[00:17:30] <FromDiscord> <lpha3ch0> In reply to @PMunch "<@275045322705862656>, async is definitely": Thanks!
[00:31:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[00:33:12] *** Joins: rockcavera (~rc@192.12.112.205)
[00:33:12] *** Quits: rockcavera (~rc@192.12.112.205) (Changing host)
[00:33:12] *** Joins: rockcavera (~rc@user/rockcavera)
[00:33:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4)
[00:54:25] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:06:50] <shadow0133> @ynfle It just finished compiling and seem to work for now. I will have to think about proper crosscompiling later. Thanks for help.
[01:07:58] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 250 seconds)
[01:09:12] <shadow0133> I don't have nim installed on target (I tried), but it seems I only needed to download nimbase.h to make it compile
[01:19:18] <FromDiscord> <ynfle> In reply to @shadow0133 "I don't have nim": Yes. You should set the `--cpu:` value when compiling
[01:19:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602f:2025:c843:6cf4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[01:25:36] <shadow0133> @ynfle Hmm? I did that, but I'm talking about something else.
[01:30:16] *** Joins: ltriant (~ltriant@118.102.122.246)
[01:30:44] <FromDiscord> <ynfle> I know. I was just saying because it makes a difference. Nim's int is based on cpu arch. 64, 32 etc.
[01:32:51] *** Joins: oprypin (~irc@pryp.in)
[01:34:00] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Quit: -)
[01:38:09] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[01:40:17] *** Quits: kenran (~kenran@200116b82b49e8006646f20137f4ed5b.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[01:41:05] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Client Quit)
[01:41:42] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[01:42:19] *** Quits: shadow0133 (~shadow013@194.146.248.72) (Quit: Client closed)
[01:44:39] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Client Quit)
[01:45:31] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[01:48:38] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Client Quit)
[01:50:17] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[02:08:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[02:35:54] <FromDiscord> <jmgomez> https://nim-lang.org/docs/nimc.html#crossminuscompilation-for-ios‚Üµ"Use nim c -c --os:ios --noMain:on to generate C files and include them in your XCode project. Then you can use XCode to compile, link, package and sign everything."‚Üµ‚ÜµDoes that mean that nim cant produce a static library for iOS directly?
[02:49:26] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[03:10:14] <NimEventer> New thread by Hobbyman: Calling nim-server-code from javascript, see https://forum.nim-lang.org/t/8940
[03:13:57] <FromDiscord> <jmgomez> This is what Im using to compile it ‚Üµnim c --os:ios  -c --noMain:on --app:staticlib  -d:release test.nim https://media.discordapp.net/attachments/371759389889003532/945828290558586920/message.txt
[03:14:15] <FromDiscord> <jmgomez> (edit) "test.nim" => "test.nim‚Üµ‚ÜµAnd this is the ouput"
[03:15:09] <FromDiscord> <Elegantbeef> Yea i dont think Nim can create a static lib directly due to apples grand wisdom
[03:15:23] <FromDiscord> <Elegantbeef> Developing anything for apple hardware is just harder üòõ
[03:17:02] <FromDiscord> <jmgomez> Right.. So I have to create it manually? UE and Unity create iOS projects behind the scenes, I guess that's too much to expect from a compiler
[03:17:36] <FromDiscord> <Elegantbeef> I imagine so yea, you could always be the person that automates the process!
[03:18:44] <FromDiscord> <jmgomez> lol really new to nim. Im just evaluating nim for building a sdk
[03:24:49] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:27:47] <FromDiscord> <Elegantbeef> Well it's fully possible to do, I have 0 idea the apple build process aside from "Locked down", so cant say much
[03:30:46] <FromDiscord> <Rika> It‚Äôs scuffed
[03:41:04] <NimEventer> New question by itil memek cantik: Nim regex to perform once not global replace, see https://stackoverflow.com/questions/71229867/nim-regex-to-perform-once-not-global-replace
[03:57:54] <FromDiscord> <jmgomez> Was able to compile the code and run it on iOS after importing it from Unity and call it from csharp oc.. The xcode part was easier than I initially imagined
[03:58:44] <FromDiscord> <jmgomez> so having the json that nim generates should not be too difficult to generate a xcode project from it
[03:59:09] <FromDiscord> <jmgomez> the thing is that you have to sign the library with your apple cert
[04:00:58] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:03:54] <FromDiscord> <huantian> In reply to @huantian "is something like this": hm ok this does not work with multisync painnnn
[04:05:47] <FromDiscord> <Elegantbeef> What's the multisync turn it into?
[04:06:25] <FromDiscord> <huantian> uh I should check
[04:06:34] <FromDiscord> <huantian> actually this might be because I'm not modifying await
[04:07:05] <FromDiscord> <huantian> since I'd assume the non-async verion multisync makes uses it's own await stuff
[04:10:23] <FromDiscord> <huantian> lemme try modifying await
[04:13:47] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[04:30:14] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[04:32:34] <FromDiscord> <huantian> perhaps I'm using mulitsync wrong, this doesn't seem to work:‚Üµ<https://play.nim-lang.org/#ix=3Qs8>
[04:33:14] <FromDiscord> <huantian> quote the docs, ‚Üµ> whereas the generated synchronous procedures simply strip off the await calls.
[04:42:00] <FromDiscord> <huantian> yeah no I think I'm just using it wrong lmao
[04:43:53] <FromDiscord> <huantian> man multisync is interesting
[04:46:05] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:47:30] *** Gustavo6046 is now known as Guest5407
[04:47:30] *** Quits: Guest5407 (~Gustavo60@user/gustavo6046) (Killed (silver.libera.chat (Nickname regained by services)))
[04:47:30] *** Gustavo6046_ is now known as Gustavo6046
[04:55:26] <FromDiscord> <huantian> isInAsync seems to fail when you use multisync incorrectly, which is probably not good since it'll print a misleading error message‚Üµbut that seems like it's multisync's problem
[04:58:29] <NimEventer> New thread by Mardiyah: To get the PCRE version by executing Nim, see https://forum.nim-lang.org/t/8941
[05:21:01] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[05:24:37] <FromDiscord> <Fail> sent a code paste, see https://play.nim-lang.org/#ix=3Qsm
[05:24:49] <FromDiscord> <Elegantbeef> Depends what the macros do
[05:24:58] <FromDiscord> <Fail> well, im trying to do this
[05:24:58] <FromDiscord> <Fail> https://docs.microsoft.com/en-us/windows/win32/learnwin32/your-first-windows-program
[05:25:08] <FromDiscord> <Elegantbeef> https://github.com/khchen/winim/blob/b7b32603f4ef672bc34405bc6200e8aab2c366b1/examples/hellowin.nim#L10
[05:25:11] <FromDiscord> <Elegantbeef> Just use winim
[05:25:30] <FromDiscord> <Fail> In reply to @Elegantbeef "Just use winim": okay
[06:28:28] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[06:32:27] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:46:15] <FromDiscord> <dangbinghoo> hi, is there any higher level nim2c generator tools? what I want is that I can export some nim proc to C, the generator just output a C header and static lib (or a single C source can be easily add to pure C project without setting nim lib c headers path ), thanks!
[06:46:42] <FromDiscord> <Elegantbeef> genny perhaps
[06:47:02] <FromDiscord> <Elegantbeef> https://github.com/treeform/genny
[06:52:24] <FromDiscord> <dangbinghoo> ok, that's almost what I want, but it seems that genny can only generate  dynamic-lib?
[06:57:28] <FromDiscord> <Elegantbeef> Seems that way i guess
[06:58:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[07:04:25] <FromDiscord> <congusbongus> would you need to transpile to C in order to create a static lib?
[07:06:10] <FromDiscord> <dangbinghoo> I just want to call nim proc in C
[07:07:14] <FromDiscord> <Elegantbeef> You should be able to make a static lib using Nim, the header is the main issue
[07:07:38] <FromDiscord> <Elegantbeef> doesnt know much about static libs, so assuming a header is needed
[07:07:52] <FromDiscord> <dangbinghoo> I guess I can just-compile-and-dont-link nim compiler generated nimcache to a static lib?
[07:08:17] <FromDiscord> <Elegantbeef> there is a `--staticlib` flag i think
[07:09:28] <FromDiscord> <dangbinghoo> OK, I will try it, only  need to manually write  exported nim proc to a c header.
[07:10:16] <FromDiscord> <dangbinghoo> thanks for all your help ! ü§ù
[07:10:34] <FromDiscord> <Elegantbeef> ah it's `--app:staticlib`
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:41:14] <FromDiscord> <dangbinghoo> In reply to @Elegantbeef "ah it's `--app:staticlib`": üëç
[07:42:42] <madprops> hi animals
[08:13:46] <FromDiscord> <Rika> Hello alien
[08:28:11] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:46:31] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:56:35] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3Qte
[09:57:07] <FromDiscord> <dangbinghoo> a_b_jsexp.nim(14, 14) Warning: implicit conversion to 'cstring' from a non-const location: $j; this will become a compile time error in the future [CStringConv]
[09:57:30] <FromDiscord> <dangbinghoo> ---------
[09:57:31] <FromDiscord> <Elegantbeef> `cstring $j`
[09:57:52] <FromDiscord> <Elegantbeef> Though that's still unsafe
[09:58:18] <FromDiscord> <dangbinghoo> is there any safe way to solve this?
[09:58:50] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:58:58] <FromDiscord> <Rika> What do you mean unsafe? I don‚Äôt see how
[09:59:04] <FromDiscord> <Elegantbeef> Copy the string to a cstring, return it then require the user to free it
[09:59:10] <FromDiscord> <Elegantbeef> This is in a library rika
[09:59:43] <FromDiscord> <Elegantbeef> `$j` will not outlive the function
[09:59:50] <FromDiscord> <dangbinghoo> yes, lora_gw_t_to_jsonstr_p is nim proc exported to be used in C land
[10:00:22] <FromDiscord> <Elegantbeef> you know you can give it a proper Nim name then do `exportC: "myCProcName"`?
[10:00:35] <FromDiscord> <Elegantbeef> Atleast i think yo ucan
[10:03:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/sHV
[10:03:29] <FromDiscord> <Rika> In reply to @Elegantbeef "`$j` will not outlive": Ain‚Äôt this a copy
[10:03:51] <FromDiscord> <Elegantbeef> the return type is `cstring`
[10:03:57] <FromDiscord> <Rika> I guess
[10:04:28] <FromDiscord> <Elegantbeef> It's returning a pointer across the library barrier, it's unsafe to have a pointer to gc'd memory
[10:04:56] <FromDiscord> <Rika> Ah yeah it‚Äôs a string
[10:05:22] <FromDiscord> <Elegantbeef> then you also need a `func nimFree(p: pointer) {.exportC.} = dealloc(p)`
[10:06:23] <FromDiscord> <Elegantbeef> Hopefully that makes sense
[10:07:07] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3Qti
[10:07:16] <FromDiscord> <Elegantbeef> There you go
[10:07:20] <FromDiscord> <Elegantbeef> take in a `cstring`
[10:07:26] <FromDiscord> <Elegantbeef> not a `ptr char`
[10:07:44] <FromDiscord> <dangbinghoo> so, I just copy generated cstring to a C char buffer.
[10:07:45] <FromDiscord> <Rika> They are equivalent in C
[10:07:56] <FromDiscord> <Rika> A cstring is a char buffer
[10:08:02] <FromDiscord> <dangbinghoo> ok
[10:08:11] <FromDiscord> <Elegantbeef> Shouldnt you also pass in the size of the allocated string?
[10:08:18] <FromDiscord> <Rika> Yes
[10:08:29] <FromDiscord> <Rika> It‚Äôs better to
[10:09:33] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3Qtj
[10:09:47] <FromDiscord> <Rika> Again ptr char -> cstring
[10:10:03] <FromDiscord> <Elegantbeef> Well i'd still say use `cstring` just cause it's easier to work with from nim
[10:10:11] <FromDiscord> <dangbinghoo> (edit) "https://play.nim-lang.org/#ix=3Qtj" => "https://play.nim-lang.org/#ix=3Qtk"
[10:10:35] <FromDiscord> <dangbinghoo> ok, thanks!
[10:11:03] <FromDiscord> <Elegantbeef> Otherwise you need to do` copyMem(cast[ptr UncheckedArray[char](strBuff)[0].addr, str[0].addr, str.len + 1)`
[10:11:20] <FromDiscord> <Elegantbeef> Bit tedious given you can just change it to a `cstring` üòõ
[10:18:54] <FromDiscord> <dangbinghoo> In reply to @Elegantbeef "Bit tedious given you": thank you for your great help.
[10:19:29] <FromDiscord> <Elegantbeef> No problem
[10:19:38] <FromDiscord> <dangbinghoo> I'm doing this, just cause cJson is very ugly to me.
[10:20:40] <FromDiscord> <Elegantbeef> interesting
[10:20:41] <FromDiscord> <dangbinghoo> so I implement the C struct to json manipulation in nim, and export to C users.üòÇ
[10:20:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Read error: Connection reset by peer)
[10:21:12] <FromDiscord> <Elegantbeef> Make sure you build the library using `--gc:orc`
[10:21:22] <FromDiscord> <Elegantbeef> This way you dont have any setup so no need for `nimMain()`
[10:22:02] <FromDiscord> <dangbinghoo> I will use this for ESP32, so, is `--gc:arc` OK?
[10:22:48] <FromDiscord> <Elegantbeef> yea
[10:22:49] <FromDiscord> <Elegantbeef> Probably, atleast
[10:22:55] <FromDiscord> <Elegantbeef> Json nodes are acyclical iirc
[10:23:32] <FromDiscord> <dangbinghoo> this is how I generate the .a `nim c --app:staticLib --noMain a_b_jsexp.nim`
[10:24:05] <FromDiscord> <Elegantbeef> you can make a `config.nims` with those flags so you can just do `nim c a_b_jsexp.nim`
[10:24:41] <FromDiscord> <dangbinghoo> In reply to @Elegantbeef "you can make a": ok
[10:27:04] <FromDiscord> <Rika> In reply to @Elegantbeef "Json nodes are acyclical": You do recall correctly
[10:27:16] <FromDiscord> <Rika> JSON that is cyclical is not JSON
[10:27:38] <FromDiscord> <Elegantbeef> I more meant marked as such
[10:28:07] <FromDiscord> <Rika> I believe so as well then
[10:31:34] <FromDiscord> <Rika> In reply to @dangbinghoo "I will use this": Are you sure you have enough RAM for whatever you are doing?
[10:32:08] <FromDiscord> <Rika> In reply to @Elegantbeef "This way you dont": Depends on what he‚Äôs doing exactly though?
[10:32:36] <FromDiscord> <Elegantbeef> Well yea, if they have toplevel statements they need main
[10:33:05] <FromDiscord> <Elegantbeef> But given they're just using the Nim JSON library it's less of an issue
[10:34:25] <FromDiscord> <Elegantbeef> One could avoid the double allocation and unsafety if the added the strings to a sequence or similar
[10:34:55] <FromDiscord> <Elegantbeef> Some sort of buffer of the strings to keep them alive until freed
[10:59:06] <FromDiscord> <dangbinghoo> In reply to @Rika "Are you sure you": I don't know, I should have a test after I got the basic experiment done on my PC Linux.
[10:59:55] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3Qtu
[11:00:12] <FromDiscord> <dangbinghoo> Error: attempting to call routine: 'max_sz'
[11:00:27] <FromDiscord> <Elegantbeef> `-1`  should be `- 1`
[11:00:52] <FromDiscord> <Rika> Consistent spacing is important in Nim
[11:01:15] <FromDiscord> <Elegantbeef> In nim operators bind tightly if there is no space
[11:01:25] <FromDiscord> <dangbinghoo> wow, ok, thanks!
[11:15:36] <FromDiscord> <dangbinghoo> can nim's generic (or template) proc be exported to C land?
[11:17:38] <FromDiscord> <Elegantbeef> No, you need a concrete instantiation
[11:18:23] <FromDiscord> <Elegantbeef> If you have a generic function you want to export you'll have to manually wrap it end export it
[11:19:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Qtv
[11:19:12] <FromDiscord> <Elegantbeef> You can of course automate this a bit with a template
[11:19:24] <FromDiscord> <dangbinghoo> OK
[11:19:46] *** Joins: PMunch (~PMunch@user/pmunch)
[11:54:35] <FromDiscord> <dangbinghoo> sent a code paste, see https://play.nim-lang.org/#ix=3QtG
[11:55:19] <FromDiscord> <dangbinghoo> is my_str a string constructed directly using the  cstring `in_str`'s memory?
[11:56:36] <FromDiscord> <dangbinghoo> (edit) "https://play.nim-lang.org/#ix=3QtG" => "https://play.nim-lang.org/#ix=3QtH"
[11:57:05] <FromDiscord> <Elegantbeef> yes it's going to be like `strcpy` in C
[11:57:23] <PMunch> There you are @Elegantbeef!
[11:57:40] <FromDiscord> <Elegantbeef> It'll go up to the first null terminator and copy it into a string
[11:57:40] <FromDiscord> <Elegantbeef> There i am?
[11:57:40] <FromDiscord> <Elegantbeef> Did you need me?!
[11:57:55] <PMunch> I was working with nimscripter yesterday
[11:58:04] <FromDiscord> <Elegantbeef> Fuuuuck a bug report
[11:58:19] <PMunch> Haha, no I haven't created a bug report :P
[11:58:20] <PMunch> https://github.com/PMunch/ratel
[11:58:24] <PMunch> Oops
[11:58:36] <PMunch> I was trying to implement this: https://github.com/PMunch/ratel/issues/10
[11:58:47] <FromDiscord> <Elegantbeef> Well i never hear anyone say "Oh yea i was using your library, and it works wonderfully"
[11:59:03] <PMunch> And was struggling to get those `--` templates registered properly
[11:59:26] <FromDiscord> <Elegantbeef> Yea this is a common issue i've been seeing, the VM that Nim uses is special
[11:59:41] <PMunch> I was basically trying to do this: http://ix.io/3Qnt
[11:59:54] <PMunch> Special?
[12:00:03] <FromDiscord> <Elegantbeef> Ah nevermind you did that
[12:00:09] <PMunch> Just adding in "nimscript" as a library and it works just fine
[12:00:29] <PMunch> But I want to overload them so they're not actually changing switches in my NimScript environment
[12:00:56] <FromDiscord> <Elegantbeef> Give me a moment, need to test this
[12:01:03] <FromDiscord> <Elegantbeef> Dont know the error
[12:01:57] <FromDiscord> <Elegantbeef> and you said this wasnt a bug report
[12:03:27] <FromDiscord> <Elegantbeef> you might not be able to export templates this way
[12:03:40] <FromDiscord> <Elegantbeef> Which makes sense given their symbols are funky
[12:04:23] <PMunch> https://irclogs.nim-lang.org/22-02-2022.html#11:56:03
[12:04:28] <PMunch> That's from yesterday
[12:06:11] <FromDiscord> <Elegantbeef> Yep i'm right we cannot export templates this way
[12:16:29] <FromDiscord> <Elegantbeef> There you go pmunch `1.0.12` should do the trick for you
[12:16:55] <FromDiscord> <Elegantbeef> Will need to follow https://github.com/beef331/nimscripter#exporting-code-verbatim though
[12:17:38] <PMunch> Oh wow, that was quick :)
[12:18:02] <FromDiscord> <Elegantbeef> What can i say shitty code is easy to write
[12:18:19] <PMunch> Haha :P
[12:21:00] <FromDiscord> <Elegantbeef> I would like to make it a bit smarter, but templates dont work like procs symbol wise
[12:23:20] <PMunch> Hmm, they work differently?
[12:23:31] <FromDiscord> <Elegantbeef> Yea you cant pass them as a symbol
[12:24:12] <FromDiscord> <Elegantbeef> Oh atleast i dont think so
[12:24:19] <PMunch> Ah so the export(module, myTemplate) thing can't work?
[12:24:35] <FromDiscord> <Elegantbeef> hmm i might be wrong
[12:24:48] <FromDiscord> <Elegantbeef> I'm very wrong
[12:30:02] <FromDiscord> <Elegantbeef> It was actually an overload issue
[12:30:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[12:31:15] <FromDiscord> <Elegantbeef> there you now can happily do exportTo(shims, switch, `--`)
[12:31:27] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[12:32:53] <FromDiscord> <Elegantbeef> So pmunch go with the most recent nimscripter, and be merry i guess
[12:33:02] <FromDiscord> <Elegantbeef> Hopefully it doesnt have any other issues
[12:33:27] <PMunch> Oh cool!
[12:34:27] <FromDiscord> <Elegantbeef> \yes i felt like i had to tell mention the exportTo since i seen the two independant statements
[12:37:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[12:38:23] <FromDiscord> <Elegantbeef> Also odd that I didnt get pinged with your mention of me, perhaps it was the '@'
[12:49:16] <PMunch> By the way, would be nice with some more in-depth documentation :P
[12:50:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[12:51:43] <FromDiscord> <Elegantbeef> If only I hated myself
[12:55:47] <PMunch> One day I hope to find the weirdo who loves writing documentation but doesn't like to code
[12:56:01] <FromDiscord> <Elegantbeef> Lol, good luck
[12:56:22] <FromDiscord> <abdu> How do we check a file name exist, like Bash if [ -f "FOO" ] ;then echo "YUP file is there"
[12:57:48] <FromDiscord> <Elegantbeef> `import std/os; if fileExists("foo"): echo("Yep file is there")`
[13:10:16] <FromDiscord> <abdu> ... then make sure its reading works no error at all ?
[13:16:59] <PMunch> `try: readFile("foo") except: echo "Something went wrong"`
[13:17:38] <FromDiscord> <xx_ns> yolo, try reading it even if it fails or the file isn't there
[13:18:32] <FromDiscord> <Goel> readFile already: `Raises an IO exception in case of an error`
[13:19:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[13:27:37] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[13:47:19] <FromDiscord> <demotomohiro> It sounds like https://en.m.wikipedia.org/wiki/Time-of-check_to_time-of-use
[13:51:49] <FromDiscord> <Rika> toctou is important even if single threaded ESPECIALLY if its files
[14:34:14] <FromDiscord> <ShalokShalom> Mosh + Editor is probably the most simple solution to code on the go?
[14:40:50] <PMunch> Or just termux
[14:41:12] <PMunch> Nim can run under Termux so you can dev directly on your phone
[14:42:35] <FromDiscord> <ShalokShalom> Hnn. Sounds awesome
[14:50:09] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3Quq
[14:50:11] <FromDiscord> <impbox [ftsf]> this code used to compile
[14:50:43] <FromDiscord> <impbox [ftsf]> just had to reinstall OS and nim and now things are broken
[14:51:48] <FromDiscord> <impbox [ftsf]> hmm, seems broken since 1.6
[14:52:07] <FromDiscord> <mratsim> float32 now can silently convert to float32?
[14:52:15] <FromDiscord> <mratsim> is it a float literal?
[14:52:37] <FromDiscord> <impbox [ftsf]> it's a comparison between a float32 and 0 literal
[14:52:46] <FromDiscord> <impbox [ftsf]> now needs 0f i guess
[15:08:10] <PMunch> Wait, that means float32 can now implicitly convert to int?
[15:08:14] <PMunch> That doesn't seem right
[15:11:08] <FromDiscord> <impbox [ftsf]> hmm, i think it's because i have converters
[15:11:21] <FromDiscord> <impbox [ftsf]> but the behaviour seems to have changed between versions
[15:11:48] <FromDiscord> <impbox [ftsf]> but doesn't seem to be a documented change in converter behaviour
[15:11:54] <PMunch> Converters are always a mess..
[15:24:04] <FromDiscord> <Hamid_Bluri> sent a long message, see https://paste.rs/sXE
[15:24:31] <FromDiscord> <Hamid_Bluri> of
[15:27:52] <PMunch> Hmm, I guess I could. Got plenty other stuff to do though
[15:28:09] <PMunch> Is there anything in particular you don't get?
[15:28:16] <PMunch> Just the {.effects.} pragma?
[15:30:07] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3QuA
[15:30:17] <NimEventer> New thread by Drkameleon: AsyncHttpServer running in the background, spawn & closures, see https://forum.nim-lang.org/t/8942
[15:31:52] <PMunch> I'm also struggling with a converter issue right now..
[15:32:04] <PMunch> Seems like something might've messed up converters lately
[15:32:26] <PMunch> @Hamid_Bluri ^
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:41:09] <FromDiscord> <impbox [ftsf]> hmm is there a way to make a proc take a `SomeNumber` or similar and have it implicitly converted to `int` for example?
[15:41:32] <FromDiscord> <impbox [ftsf]> i was doing it via converters, but they seem to have further reaching effects
[15:41:52] <FromDiscord> <impbox [ftsf]> I only want the conversions to happen when passing arguments to these procs
[15:42:25] <FromDiscord> <Tanguy> You can do a macro that automatically creates a overloaded proc
[15:42:37] <FromDiscord> <impbox [ftsf]> I don't want an overloaded proc
[15:42:49] <FromDiscord> <impbox [ftsf]> otherwise i'd just use SomeNumber
[15:43:33] <PMunch> impbox_[ftsf], how about taking SomeNumber and then just calling `int` on it manually?
[15:43:50] <FromDiscord> <impbox [ftsf]> that'll be creating lots of extra procs
[15:43:53] <PMunch> Or am I missing something? Why do you need it to be implicit?
[15:43:54] <FromDiscord> <impbox [ftsf]> (edit) "that'll be creating lots of extra procs ... " 03added "in the code space"
[15:44:09] <FromDiscord> <impbox [ftsf]> I want the caller to not have to care about what they're passing it
[15:44:17] <FromDiscord> <impbox [ftsf]> and have the conversion done outside the proc
[15:44:40] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3QuJ
[15:44:57] <FromDiscord> <impbox [ftsf]> so if the proc wants an int and the caller passes a float it'd be implicitly converted to an int at the call site
[15:45:42] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://paste.rs/byb
[15:46:02] <FromDiscord> <impbox [ftsf]> (edit) "https://play.nim-lang.org/#ix=3QuK" => "https://paste.rs/U8E"
[15:46:34] <FromDiscord> <impbox [ftsf]> this is pretty much what I'm doing with converters, and it worked great previously
[15:47:04] <PMunch> This is so freaking annoying: /home/peter/.choosenim/toolchains/nim-1.6.4/lib/system/dollars.nim(108, 12) Error: request to generate code for .compileTime proc: Lit
[15:47:17] <PMunch> It doesn't even tell me what called the dollars procedure..
[15:48:33] <FromDiscord> <Tanguy> You could also have a macro at call site, would be even better since you could mix the SomeNumbers and ints
[15:51:12] <FromDiscord> <konsumlamm> In reply to @impbox "hmm is there a": it doesn't even make sense for every number type to be implicitly converted to `int` (e.g. `uint` or floats)
[15:54:22] <FromDiscord> <impbox [ftsf]> I'd like it to act just as if they did whatever.int, if that would throw an error it can throw an error. It's for a "friendly" game programming framework, I don't want people to have to care about whether the argument they're passing is a float or an int
[15:54:35] <FromDiscord> <impbox [ftsf]> it's also more to avoid breaking all the existing game code which relies on the old behaviour
[15:56:07] <FromDiscord> <untoreh> can nim do named arguments from identifiers?
[15:56:12] <FromDiscord> <mratsim> In reply to @impbox "hmm is there a": use a template to scope conversion?
[15:56:38] <FromDiscord> <mratsim> the proc are defined in the template and so accessible only within its scope.
[15:56:50] <FromDiscord> <mratsim> There is an example for safe pointer arithmetic in the forum.
[15:57:06] <FromDiscord> <impbox [ftsf]> mmm, I guess it's doable, a lot of work though
[15:57:11] <FromDiscord> <impbox [ftsf]> pretty big API
[15:57:40] <FromDiscord> <Tanguy> https://play.nim-lang.org/#ix=3QuN‚ÜµDumb macro example‚ÜµThe real one would need to read the parameters of the passed `v` and cast every one of them that you want to cast
[15:57:45] <FromDiscord> <mratsim> personally I had converters for float -> complex, and then just banned them from my codebase
[15:58:13] <FromDiscord> <impbox [ftsf]> mmm if i was building it from scratch maybe i wouldn't do the converter thing again
[15:58:33] <FromDiscord> <impbox [ftsf]> but all the explicit conversions get pretty ugly
[15:59:44] <FromDiscord> <impbox [ftsf]> @Tanguy that'd pretty nice
[15:59:48] <FromDiscord> <impbox [ftsf]> (edit) "that'd" => "that's"
[16:03:20] <FromDiscord> <mratsim> {.push magicmacro.}
[16:04:27] <PMunch> I have converters in macroutils, and my problem with them is that whenever there's a type issue it tries to call the converter and craps out because it tries to create a NimNode..
[16:05:05] <FromDiscord> <mratsim> Ah yes.
[16:05:12] <FromDiscord> <mratsim> And ambiguous calls ...
[16:06:14] <FromDiscord> <mratsim> https://github.com/mratsim/Arraymancer/issues/394
[16:06:15] <PMunch> The logic around when to apply a converter should really be improved
[16:06:51] <FromDiscord> <mratsim> converter breaks as soon as you need `$` on non-int
[16:07:01] <FromDiscord> <impbox [ftsf]> mmm, i'm gonna sleep on it
[16:07:03] <PMunch> It should be something like `when not compiles(somecode): when compiles(applyConverters(somecode)): applyConverters(someCode) else: somecode else: somecode`
[16:07:04] <FromDiscord> <impbox [ftsf]> thanks for the ideas
[16:13:32] <PMunch> Hmm, even if I try to mark the converter as `{.compileTime.}` it doesn't work..
[16:13:55] <PMunch> Like why would it try to apply a converter it can't apply without crashing?!
[16:13:59] <PMunch> It's so dumb!
[16:18:13] <FromDiscord> <haolian9 (È´òÊµ©‰∫Æ)> lol, even pro like PMunch can get upset
[16:19:12] <FromDiscord> <mratsim> In reply to @haolian9 (È´òÊµ©‰∫Æ) "lol, even pro like": watch me get upset about types in macros or genric instantiation
[16:19:37] <FromDiscord> <mratsim> https://github.com/nim-lang/RFCs/issues/44
[16:20:11] <FromDiscord> <mratsim> https://github.com/nim-lang/Nim/issues/8677
[16:24:48] <PMunch> Nim is such a nice language, but the bugs are so frustrating when you find them :P
[16:27:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[16:30:34] <FromDiscord> <Tanguy> In reply to @mratsim "{.push magicmacro.}": Nope :p remember https://github.com/nim-lang/Nim/issues/12867
[16:46:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[16:46:59] <FromDiscord> <Hamid_Bluri> I remember this stupid issue üòÑ ‚Üµhttps://github.com/nim-lang/Nim/issues/18342
[16:47:54] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[16:49:20] <FromDiscord> <locriacyber> Nim contributors, how do I add tests for std
[16:50:06] <FromDiscord> <Hamid_Bluri> in runnableExamples I guess if it's specific for a proc
[16:50:28] <FromDiscord> <Hamid_Bluri> @locriacyber
[16:50:38] <FromDiscord> <locriacyber> How do I run the specific test
[16:51:38] <PMunch> `runnableExamples` isn't really meant for tests
[16:52:03] <PMunch> It's meant for examples, but the examples are compiled and tested whenever the documentation is built (with `nim doc`).
[16:52:46] <PMunch> If you want to create an actual test for the standard library you should add them here: https://github.com/nim-lang/Nim/tree/devel/tests
[16:53:02] <FromDiscord> <locriacyber> Thanks
[16:53:07] <PMunch> That README alse tells you how tests are written, and how you can run a test
[16:53:39] <FromDiscord> <locriacyber> I'm trying to make sequtils usable with iterable in #19557
[16:54:22] <FromDiscord> <Hamid_Bluri> wow, I really wished that
[16:54:25] <FromDiscord> <locriacyber> Does all the intermediate `seq` get compiled away or what
[16:54:49] <PMunch> Not quite sure what you mean?
[16:55:23] <FromDiscord> <locriacyber> So `filterIt` returns a seq
[16:55:37] <PMunch> I believe so, yes
[16:56:00] <FromDiscord> <locriacyber> What if I chain two together
[16:56:25] <FromDiscord> <Hamid_Bluri> https://github.com/zero-functional/zero-functional ?
[16:56:45] <FromDiscord> <locriacyber> Thanks, that's what I'm looking for
[16:56:54] <FromDiscord> <Hamid_Bluri> you're welcome
[16:57:39] <PMunch> If you chain two together it will create intermediary sequences
[16:59:04] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:59:20] <FromDiscord> <konsumlamm> ye, `sequtils` allocates a lot of unnecessary intermediate seqs, there is no fusion going on
[16:59:56] <PMunch> Damn it.. Foiled by macros and the damn `os` switch again..
[17:00:14] <PMunch> Well, I guess this example wouldn't have worked anyways
[17:01:40] <PMunch> But I tried to run Futhark while cross compiling with `--os:windows`. This means the macro in Futhark now uses backslash instead of slash as the path separator and then tries to run Opir on Linux with incorrect paths..
[17:02:04] <PMunch> There should really be a better distinction of runtime and compile-time OS in Nim..
[17:02:36] <PMunch> Macros shouldn't fail because the target OS doesn't support something the running OS does
[17:02:59] <PMunch> (See my previous rants on `--os:any` and macros trying to read from the file system of the compiling machine)
[17:04:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[17:18:33] <FromDiscord> <coldfussion> Found a legit question on fedi\: "why nim documentation of libraries suck so much balls?"
[17:19:43] <PMunch> Hard to tell without knowing which libraries they're talking about. Most likely because people are having too much fun writing Nim code to write documentation :P
[17:26:37] <FromDiscord> <Hamid_Bluri> Nim doc is much better than python btw
[17:28:23] *** Quits: Abrax (~Abrax@user/abrax) (Quit: Leaving)
[17:37:28] <PMunch> By the way, what is fedi?
[17:39:56] <FromDiscord> <konsumlamm> nim doc is better than a whole language? /s
[17:47:49] <FromDiscord> <coldfussion> Fediverse, a bunch of federated social networks, e.g. mastodon, pleroma, peertube...‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:50:55] <FromDiscord> <deeuu> Hey people,‚ÜµDoes anyone actually use exception tracking (e.g.`{.push raises:[].}‚Üµ` at top) in general? Curious to hear opinions and use cases! Cheers
[17:51:24] <FromDiscord> <coldfussion> Well, I noticed too that for a lot of libraries I'm lucky if there even is some kind of documentation. "Hosted docs" button on nimble.directory only led me to error pages. And when there is a documentation it's usually some automated index of modules with little to no explanation or just very scarce overview of basic functions...‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:51:45] *** Joins: arkurious (~arkurious@user/arkurious)
[17:55:27] <FromDiscord> <coldfussion> Never used that. But I'm coming from python, so I'm used to exception flying everywhereüôÇ‚Üµ(@deeuu)
[17:59:45] <FromDiscord> <auxym> In reply to @konsumlamm "nim doc is better": sphinx is pretty good TBH, I'm not sure nim-doc is exactly there yet
[18:00:15] <PMunch> @deeuu, I've used it in a dynamic library
[18:00:43] <PMunch> Ah wait, not with `{.push.}`
[18:00:56] <PMunch> I just had it on the main entry-point
[18:02:28] <PMunch> @coldfussion, hmm that's unfortunate. The nimble.directory hosted docs do tend to break quite often. federico3, you're aware of this, right? Otherwise it's usually a matter of reading the README for the projects if you can't find all you need in the doc-comments
[18:21:27] <PMunch> @Elegantbeef, you still around?
[18:21:42] <PMunch> Tried to do http://ix.io/3QvI, but it fails
[18:23:12] <PMunch> Hmm, it seems like it's `Whitespace` it doesn't like..
[18:23:48] <PMunch> I guess the easiest thing would be to just create nimscript shim and add that as a NimScript module
[18:53:33] <FromDiscord> <abdu> i can't print ie. echo a variable reference by `addr` or `unsafeAddr` ‚Üµhow to do correctly ?
[18:55:12] <FromDiscord> <mratsim> In reply to @abdu "i can't print ie.": use `repr` for debugging thouse
[18:55:17] <FromDiscord> <mratsim> (edit) "thouse" => "those"
[18:55:24] <FromDiscord> <mratsim> echo foo.repr
[18:57:49] <NimEventer> New thread by Mardiyah: Must check to decide whether this current iteration in a loop is the last , see https://forum.nim-lang.org/t/8943
[19:24:56] <FromDiscord> <Iapetus11> Considering some people fall for these it may be wise to ban this guy. ID: 907276095072632893 https://media.discordapp.net/attachments/371759389889003532/946072643319234630/unknown.png https://media.discordapp.net/attachments/371759389889003532/946072643554148382/unknown.png
[19:30:06] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Quit: You have been kicked for being idle)
[19:42:22] <FromDiscord> <haolian9 (È´òÊµ©‰∫Æ)> with ORC, do i have to define `proc =destroy` for my custom object type?
[19:48:21] <FromDiscord> <haolian9 (È´òÊµ©‰∫Æ)> i found the answer in [here](https://nim-lang.org/docs/destructors.html#hook-generation), ignore me.
[20:05:28] <FromDiscord> <treeform> In reply to @PMunch "<@107140179025735680>, I'm looking at": We have updated the python package to match the Nim one.
[20:11:16] <PMunch> Nice
[20:39:11] <FromDiscord> <Phil> On the one hand, I now have time again to deal with this libwebp wrapping thing
[20:39:18] <FromDiscord> <Phil> On the other, I still really don't want to deal with it
[20:39:37] <FromDiscord> <Phil> (edit) "On the other, I still really don't want to deal with it ... " 03added "and it feels very non-trivial with tons of gotchas waiting for me"
[20:39:59] <PMunch> (Obligatory "haaaave you heard about Futhark" pitch)
[20:40:24] <FromDiscord> <Phil> My gotchas thingy was including futhark
[20:40:35] <FromDiscord> <Phil> Because it still means understanding this clusterfuck of a libwebp API
[20:40:54] <PMunch> Ah :P
[20:41:11] <FromDiscord> <Phil> Or maybe it's not a clusterfuck and I'm just too unused to dealing with C code
[20:41:22] <FromDiscord> <Phil> (edit) "Or maybe it's not a clusterfuck and I'm just too unused to dealing with C code ... " 03added "and thus pulling up the horse blinders"
[20:42:25] <PMunch> Well Futhark should do most of the heavy lifting with the C code
[20:43:14] <FromDiscord> <Phil> It pretty much does... I think (I haven't actually tried out the one function I wrapped so far). It grants me the function in nim, which allows me to make a more easy-to-use API out of it
[20:44:25] <FromDiscord> <Phil> But that still leaves me to deal with procs like this and pray you properly understood them:‚Üµ`  let size: csize_t = WebPEncodeRgb(dataFirstBytePointer, width, height, stride, qualityFactor, outputFirstBytePointer)`
[20:44:39] <FromDiscord> <Phil> variable names provided by me as I understood that proc so far
[20:45:50] <FromDiscord> <Phil> Which I'm maybe a sissy on because I have my roots in python/JS but I do not consider the doccomments in the header file really all that useful where I would have expected them to be
[20:46:17] <FromDiscord> <Phil> (edit) "file" => "files of libwebp"
[20:46:18] <FromDiscord> <ajusa> hopefully this is just me being stupid, but why do the docs here say that the last parameter defaults to s.high when it defaults to 0? https://nim-lang.org/docs/strutils.html#find%2Cstring%2Cstring%2CNatural%2Cint
[20:49:15] <FromDiscord> <Phil> I don't think I understand what you mean by s.high.‚ÜµAs far as I understand the proc: Look for the given substring "sub" in the string "s" from index 0 to index s.high (aka s.len - 1).
[20:49:20] <PMunch> @ajusa, because if it is 0 it is set to high in the body: https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/strutils.nim#L1821
[20:49:38] <FromDiscord> <Phil> Ohhh you mean the default value is 0
[20:49:56] <FromDiscord> <Phil> (edit) "Ohhh you mean the default value is 0 ... " 03added "as given by the parameter"
[20:50:47] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[20:50:51] *** Joins: vicfred (~vicfred@user/vicfred)
[20:53:40] <FromDiscord> <Phil> @treeform  You don't, perchance, have webp support in pixie like right around the corner, do you?
[21:00:12] <FromDiscord> <abdu> Got error in handling command line:‚Üµ`Error: undeclared identifier: 'commandLineParams'`‚ÜµHow solving it
[21:00:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:602a:2cae:7652:6a22)
[21:02:27] <FromDiscord> <Phil> It'd help to show what you're executing that causes that error üòõ
[21:20:36] <FromDiscord> <ajusa> In reply to @PMunch "<@102899813149855744>, because if it": huh, I wonder why it isn't just set in the proc definition? thanks for the code link though, I should have glanced at that first
[21:23:29] <FromDiscord> <Phil> Hmmm design question
[21:29:31] *** Joins: Guest15 (~Guest15@2.24.77.241)
[21:31:11] *** Quits: gsalazar (~gsalazar@194.38.148.130) (Ping timeout: 245 seconds)
[21:31:22] <FromDiscord> <Phil> sent a long message, see http://ix.io/3Qx9
[21:31:29] *** Quits: Guest15 (~Guest15@2.24.77.241) (Client Quit)
[21:31:39] <FromDiscord> <Phil> (edit) "http://ix.io/3Qx9" => "http://ix.io/3Qxa"
[21:48:28] *** Joins: gsalazar (~gsalazar@161.230.168.194)
[21:53:37] *** Quits: gsalazar (~gsalazar@161.230.168.194) (Ping timeout: 240 seconds)
[21:53:46] <FromDiscord> <Phil> Wait... Fuck I'm an idiot
[21:53:49] <FromDiscord> <Phil> noooooooooo
[21:54:27] <FromDiscord> <Phil> to follow "Controller --> Service --> Repository --> Database" correctly I have to wrap all these procs in the service. I don't have to import repositories left and right but the service is required
[21:54:30] <FromDiscord> <Phil> Oh fuuuuuuuck me
[22:06:30] <FromDiscord> <ajusa> In reply to @Elegantbeef "What you might want": pretty sure you aren't online Elegantbeef, but as it turns out converters are weird when used with generics.
[22:06:36] <NimEventer> New question by Dimitri Lesnoff: Nim : How to constrain an existing type, see https://stackoverflow.com/questions/71242378/nim-how-to-constrain-an-existing-type
[22:06:59] <FromDiscord> <dlesnoff> I wanted to ask a question on this channel, but made a Stack Overflow post about it in the end : https://stackoverflow.com/questions/71242378/nim-how-to-constrain-an-existing-type‚Üµoh the bot preceded me ^^
[22:07:58] <FromDiscord> <Phil> In reply to @Jiezron "I wanted to ask": hmm, would enums be a solution?
[22:08:26] <FromDiscord> <Phil> Could make an enum for nucleotides (and where those are amino acids typically aren't that far away)
[22:09:47] <FromDiscord> <Phil> I contemplated a lot, realized that it doesn't matter, my suggestion stays enums for now
[22:10:14] <FromDiscord> <Phil> If you're not familiar with the concept I can provide material
[22:11:46] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Qxk
[22:14:18] <FromDiscord> <treeform> In reply to @Isofruit "<@!107140179025735680>  You don't,": No, I do not sorry. No plans for webp at the moment. PRs welcome though.
[22:14:42] <FromDiscord> <Phil> In reply to @treeform "No, I do not": ~~Noooooooooooooooooooo, I so definitely did not want to deal with wrapping that lib though~~
[22:17:03] <FromDiscord> <treeform> It looks like to support webp you need like 200k lines of code
[22:17:09] <FromDiscord> <treeform> no way we are re-implementing that
[22:17:14] <FromDiscord> <treeform> Looking at this go project: 275,124
[22:17:21] <FromDiscord> <treeform> https://github.com/chai2010/webp/graphs/contributors
[22:17:32] <FromDiscord> <Phil> .... holy fuck
[22:18:13] <FromDiscord> <treeform> Just like apple's HEIF
[22:18:14] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Quit: -)
[22:18:19] <FromDiscord> <dlesnoff> sent a long message, see http://ix.io/3Qxp
[22:18:26] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[22:18:30] <FromDiscord> <ajusa> range types?
[22:19:10] <FromDiscord> <treeform> In reply to @Isofruit ".... holy fuck": I think I would rely on external lib for that, it looks like Windows/Apple have OS level hooks to decode nearly any image, I would probably use that.
[22:19:18] <FromDiscord> <treeform> I don't like shipping extra dlls
[22:19:38] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Qxq
[22:20:06] <FromDiscord> <treeform> In reply to @Isofruit ".... holy fuck": Looks like libwebp is also around 250k https://github.com/webmproject/libwebp/graphs/contributors
[22:20:20] <FromDiscord> <treeform> Its a monster of a format
[22:20:36] <FromDiscord> <Phil> In reply to @treeform "I think I would": It's a REST API application server, I'm essentially auto-converting uploaded images to webp to speed up pageloads
[22:20:52] <FromDiscord> <dlesnoff> sent a code paste, see https://play.nim-lang.org/#ix=3Qxr
[22:21:00] <FromDiscord> <ajusa> oh hey @treeform if you're online I've got a question: what's a good way to extend flatty?
[22:21:12] <FromDiscord> <treeform> In reply to @ajusa "oh hey <@!107140179025735680> if": With PRs? or hooks?
[22:21:31] <FromDiscord> <Phil> ~~With PR's that get you hooked~~
[22:22:01] <FromDiscord> <ajusa> hm, closer to hooks I think. What I'm trying to do is use custom types for serializing and parsing. More specifically, minecraft uses a varint for sizes, whereas flatty defaults to an int when using the `seq` type
[22:22:28] <FromDiscord> <treeform> In reply to @Isofruit "It's a REST API": I doubt the extra % improvement of webp vs say png is wroth the complexity.
[22:22:44] <FromDiscord> <ajusa> so I think what I want to do is create a new type that basically wraps a Nim seq and then declare my own toFlatty and fromFlatty procs right?
[22:22:46] <FromDiscord> <treeform> In reply to @ajusa "hm, closer to hooks": Do you want my minecraft level loader?
[22:23:04] <FromDiscord> <ajusa> In reply to @treeform "Do you want my": trying to do packet parsing, but that may be useful
[22:23:16] <FromDiscord> <Phil> In reply to @treeform "I doubt the extra": My entire prologue webproject is not worth the complexity, this is purely for ego and because I'm sometimes dumb and upload 10mb images and don't want to bother correcting them manually, this is a "try shit out" project of mine
[22:23:51] <FromDiscord> <Phil> I just also had that functionality in python before (this is a rewrite from that backend) and wanted to keep it with the nim backend
[22:24:31] <FromDiscord> <ajusa> as an example, I've tried extending flatty to do more general binary parsing here: https://github.com/ajusa/nimtenbrew/blob/master/src/v2.nim‚Üµthe only issue is that sometimes I need to make a type distinct (not sure why), which needs me to create a converter, but the generic converter doesn't always match (not sure why)
[22:25:04] <FromDiscord> <treeform> sure, doing complex things to learn is always great, I support that.
[22:25:57] <FromDiscord> <Phil> In reply to @treeform "sure, doing complex things": This is two desires of mine clashing, on the one hand I like to learn, on the other my every sense of emotion is looking at wrapping libwebp and telling me to procrastinate
[22:26:07] <FromDiscord> <Phil> (edit) "In reply to @treeform "sure, doing complex things": This is two desires of mine clashing, on the one hand I like to learn, on the other my every sense of emotion is looking at wrapping libwebp and telling me to procrastinate ... " 03added "because that looks very not fun"
[22:26:22] <FromDiscord> <treeform> In reply to @ajusa "as an example, I've": I am not sure what is going on there. It should work without distinct?
[22:26:47] <FromDiscord> <treeform> In reply to @Isofruit "This is two desires": ü§∑
[22:26:48] <FromDiscord> <ajusa> In reply to @treeform "I am not sure": without distinct I think it ends up matching the built in flatty procs rather than the one I've defined
[22:27:08] <FromDiscord> <treeform> Yeah I find that strange
[22:27:22] <FromDiscord> <ajusa> so my proc never runs unless I throw a distinct at it. I realize I'm asking more of a general question here than a flatty question but not really sure if you have any ideas
[22:27:50] <FromDiscord> <ajusa> I hope it isn't a Nim bug...
[22:28:03] <FromDiscord> <treeform> I think you are too deap into meta typing here, I bet this could be much simpler and just work: https://github.com/ajusa/nimtenbrew/blob/master/src/v2.nim#L3-L7
[22:28:57] <FromDiscord> <treeform> what `Size[0x80, UTF16]` supposed to represent?
[22:29:10] <FromDiscord> <ajusa> In reply to @treeform "I think you are": a UTF16 string of size 0x80 bytes
[22:29:45] <FromDiscord> <treeform> can't like array[80, uint16], not work?
[22:29:59] <FromDiscord> <ajusa> it does, but then the interface for writing and reading from that type feels weird
[22:30:18] <FromDiscord> <ajusa> it's inherently a string, so I want to be able to treat it as a string without any crazy casting
[22:30:52] <FromDiscord> <treeform> I think you have two things fighting here, you want the objcs to match the bits of objects, and have a nice API.
[22:30:59] <FromDiscord> <ajusa> yes
[22:31:27] <FromDiscord> <treeform> I would shuffle the weirdness from types to like helper methods like getters and setters.
[22:32:01] <FromDiscord> <ajusa> I see. You're suggesting I have this internal parsing object, but then I expose all the "sane" API through procs and docs?
[22:32:20] <FromDiscord> <treeform> I think that would be simpler.
[22:32:35] <FromDiscord> <treeform> Alternative suggestions:
[22:32:59] <FromDiscord> <treeform> `Size[N : static[int], T] = distinct T` make that like like Utf16[N] string instead?
[22:33:09] <FromDiscord> <treeform> you are like too many levels deep
[22:33:16] <FromDiscord> <treeform> its just confusing
[22:33:33] <FromDiscord> <ajusa> I see, I could flatten my types a bit
[22:34:17] <FromDiscord> <treeform> I would actually not use flatty like this at all
[22:34:30] <FromDiscord> <ajusa> oh
[22:34:35] <FromDiscord> <treeform> Flatty is mostly taking plain nim objects and turning them binary and back
[22:34:48] <FromDiscord> <treeform> not not reading binary things produces by others
[22:34:53] <FromDiscord> <treeform> binary parsing is just to strange/complex
[22:35:05] <FromDiscord> <treeform> I would just use binny for that and imperative style
[22:35:39] <FromDiscord> <treeform> we don't use flatty to parse binary data see here for examples: https://github.com/treeform/pixie/tree/master/src/pixie/fileformats
[22:35:44] <FromDiscord> <ajusa> a lot of the time binary parsing can be as straightforward as types, which is why I was gravitating towards flatty
[22:36:01] <FromDiscord> <treeform> https://github.com/treeform/pixie/blob/master/src/pixie/fontformats/opentype.nim#L538-L552
[22:36:08] <FromDiscord> <treeform> we write code like this instead
[22:36:23] <FromDiscord> <treeform> as binary formats are usually crazy complex and hard to describe with a type system
[22:37:06] <FromDiscord> <treeform> binary formats have bit fields (which are hard to describe in nim)
[22:37:17] <FromDiscord> <treeform> binary formats love offsets etc...
[22:37:28] <FromDiscord> <treeform> which again hard to describe and unflatten
[22:38:21] <FromDiscord> <treeform> this is how I read minecrafts TAG structure:
[22:38:27] <FromDiscord> <treeform> utf16 strings
[22:38:28] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3Qxy
[22:38:36] <FromDiscord> <ajusa> yeah, offsets and sizes that aren't prefixed are messy. does the imperative style work well, or does it have lots of code duplication?
[22:38:50] <FromDiscord> <treeform> I prefer imperative style for binary data
[22:39:00] <FromDiscord> <treeform> rather then descriptive style of the type system
[22:39:58] <FromDiscord> <treeform> because binary data is usually crazy complex mess. Too complex for descriptive style.
[22:42:40] <FromDiscord> <ajusa> thanks for the advice!
[22:45:15] <FromDiscord> <treeform> In reply to @Isofruit "This is two desires": I predict formats like webp and HEIF are dead ends. We will have a neural network based compression format soon. Neural network are really good at compressing things.
[22:45:59] <FromDiscord> <treeform> And I bet they would not be that complex to implement. Train yes, but implement? Just some matrix multiplications.
[22:46:01] <FromDiscord> <haolian9 (È´òÊµ©‰∫Æ)> how to list all symbols that used by `defined()` in a project?
[22:46:55] <FromDiscord> <Phil> In reply to @treeform "I predict formats like": Would that someone wrote such a thing with an API that doesn't force me to actually contemplate the layout of the memory of that imagedate to adjust stepsize and the like and just gives me "Here goes RGB Array, out comes webp image binaries that you can store wherever"
[22:48:40] <FromDiscord> <Phil> Either way, it'll be either me running out of ways to procrastinate or me finding a more-low-effort-way to do this
[22:48:51] <FromDiscord> <Phil> (edit) "Either way, it'll be either me running out of ways to procrastinate ... or" 03added "the approach of futhark-wrapping-libwebp"
[22:49:43] <FromDiscord> <treeform> In reply to @Isofruit "Either way, it'll be": Don't beat yourself up about procrastination, its just a way for your sub mind telling you that maybe its not the right thing...
[22:49:54] <FromDiscord> <treeform> Find other avenues of expressing your self.
[22:50:17] <FromDiscord> <treeform> Some times what we want is not what we really want.
[22:50:44] <FromDiscord> <Rika> In reply to @treeform "I predict formats like": Every format is a dead end for the future. Use whatever we have now
[22:50:55] <FromDiscord> <Rika> Speaking of which, do you know of QOI?
[22:51:09] <FromDiscord> <Phil> It sounds weird enough to be interesting
[22:51:20] <FromDiscord> <treeform> In reply to @Rika "Speaking of which, do": ahh, yes? https://github.com/treeform/pixie/blob/master/src/pixie/fileformats/qoi.nim
[22:52:09] <FromDiscord> <Phil> Is qoi another image format that compresses well?
[22:52:11] <FromDiscord> <treeform> I find QOI quite neat, that it packs such a punch in such low amount of effort.
[22:52:35] <FromDiscord> <treeform> In reply to @Isofruit "Is qoi another image": yeah, just use qoi instead of webp if you want a new quirky format to play with.
[22:52:37] <FromDiscord> <Rika> It‚Äôs a low effort high compression lossless format
[22:52:46] <FromDiscord> <treeform> Its like all the boxes I like.
[22:52:57] <FromDiscord> <Rika> You guys were talking about how webp was crazy so
[22:53:24] <FromDiscord> <treeform> yeah its really crazy
[22:53:34] <FromDiscord> <treeform> Look at QOI is quite good: https://qoiformat.org/benchmark/
[22:54:23] <FromDiscord> <treeform> https://news.ycombinator.com/item?id=29328750
[22:55:11] <FromDiscord> <treeform> A dude had a brilliant idea and it worked, while webp is a "design by committee" everything and the kitchen sink.
[22:55:24] <FromDiscord> <Phil> I may be too wonkered from work but I'm not sure I comprehend the benchmarks
[22:55:30] <FromDiscord> <Rika> In reply to @treeform "Look at QOI is": You mean quite okay?
[22:55:33] <FromDiscord> <Rika> xd
[22:55:34] <FromDiscord> <Phil> is libpng just "converts to ".png" ?
[22:55:47] <FromDiscord> <treeform> yes a "quite okay idea" ...
[22:56:07] <FromDiscord> <treeform> libpng can read/write png
[22:56:11] <FromDiscord> <treeform> but so can pixie
[22:56:15] <FromDiscord> <Phil> Which means it compresses about 20% better than png?
[22:56:17] <FromDiscord> <treeform> just use pixie's version
[22:56:37] <FromDiscord> <treeform> In reply to @Isofruit "Which means it compresses": yes, not hard to do to be honest
[22:56:42] <FromDiscord> <Rika> Looking at the QOI page and what the fuck?
[22:56:44] <FromDiscord> <Rika> https://github.com/pfusik/cito
[22:56:49] <FromDiscord> <Rika> What is this language lmao
[22:56:50] <FromDiscord> <treeform> png uses zlib which s like 90s compression
[22:56:51] <Amun-Ra> that depends on the picture, some qois are smaller, some are quite largeish comp. to png
[22:57:14] <FromDiscord> <treeform> In reply to @Rika "https://github.com/pfusik/cito": c#?
[22:57:32] <Amun-Ra> no, that's ƒÜ, a kind of C transpiler
[22:58:00] <FromDiscord> <treeform> In reply to @Isofruit "Which means it compresses": I had my own image format "flippy" it was faster and compressed better then pngs.
[22:58:09] <FromDiscord> <Rika> I‚Äôve never heard of it yet it has 1.2k stars
[22:58:16] <FromDiscord> <ShalokShalom> How would you check if a NimScript is executed as admin?
[22:58:30] <FromDiscord> <Rika> ?
[22:58:43] <FromDiscord> <Rika> Not a Nim binary but a script!
[22:58:46] <FromDiscord> <Rika> ?
[22:59:21] <Amun-Ra> Rika: I only know it exists bc I'm writing an image viewer for old formats in nim
[22:59:30] <FromDiscord> <ShalokShalom> Yeah, both in general
[22:59:32] <FromDiscord> <treeform> In reply to @Rika "I‚Äôve never heard of": If you think running on 10 backends is neat, take a look at mal, its like 100s backends: https://github.com/kanaka/mal
[22:59:36] <FromDiscord> <ShalokShalom> But a script, in this case
[23:00:20] <FromDiscord> <treeform> In reply to @Rika "What is this language": Some one even made mal in GNU make language, whaat?
[23:00:30] <FromDiscord> <Rika> In reply to @treeform "If you think running": If it doesn‚Äôt include Nim it‚Äôs trash smh
[23:00:49] <FromDiscord> <treeform> In reply to @Rika "If it doesn‚Äôt include": but it does?
[23:01:14] <FromDiscord> <treeform> In reply to @Rika "If it doesn‚Äôt include": https://github.com/kanaka/mal/tree/master/impls/nim
[23:01:31] <FromDiscord> <ShalokShalom> so how to wait for an answer by the system?
[23:01:40] <FromDiscord> <ShalokShalom> like a password, or even any input generally
[23:01:54] <FromDiscord> <Rika> It has a post script implementation? How the fuck
[23:02:32] <FromDiscord> <treeform> In reply to @Rika "It has a post": How about just transistors: https://github.com/kanaka/mal/tree/master/impls/vhdl
[23:02:40] *** Joins: fowl4 (~fowlmouth@user/fowl)
[23:02:55] <FromDiscord> <treeform> vhdl = "Very High-Speed Integrated Circuit Hardware Description Language "
[23:04:15] <FromDiscord> <Rika> I know I somehow missed that
[23:04:20] <FromDiscord> <Jonah> what's the best way to check if a given string/Uri is encoded or not?
[23:04:39] <FromDiscord> <Rika> Encoded in what? Percent?
[23:04:42] *** Quits: fowl (~fowlmouth@user/fowl) (Ping timeout: 272 seconds)
[23:04:43] *** fowl4 is now known as fowl
[23:04:46] <FromDiscord> <Rika> In reply to @ShalokShalom "so how to wait": Not sure sorry
[23:05:08] <FromDiscord> <Rika> On Linux I believe it would be to set the SUID bit or something
[23:07:49] <FromDiscord> <Jonah> In reply to @Rika "Encoded in what? Percent?": encoded according to RFC3986
[23:08:55] <Amun-Ra> suid won't work with "scripts"
[23:11:35] <FromDiscord> <ceramicskate0> Question. I made a nim dll and get the entry-point 'DLLRegisterServer' (but is defined in emit section) not found error. Im using an emit to add the code from my c dll into the nim file, the export is in the code in the emit section. the nim file compiles fine into a dll. Trying to run dll with regsvr32 (no entry point defined error). I think im messing up when trying to pass the --def file  but idk.
[23:13:45] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:17:33] <FromDiscord> <Rika> In reply to @Amun-Ra "suid won't work with": Of course, but you asked about in general
[23:17:39] <FromDiscord> <Rika> As well
[23:27:03] *** Joins: rockcavera (~rc@192.12.112.205)
[23:27:03] *** Quits: rockcavera (~rc@192.12.112.205) (Changing host)
[23:27:03] *** Joins: rockcavera (~rc@user/rockcavera)
[23:53:19] *** Joins: PMunch (~PMunch@user/pmunch)
