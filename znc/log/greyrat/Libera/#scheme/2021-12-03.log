[00:11:02] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[00:16:53] <amazigh> SCAM: Scheme Compiler Atop Make: https://github.com/bhk/scam
[00:17:01] <amazigh> not a gnu project :p
[00:17:11] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:13a7:8835:9f41:37f9) (Quit: Leaving)
[00:32:21] <lagash> And it doesn't claim to be, either!
[00:34:17] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[00:46:18] *** Joins: badkins (~badkins@136.56.92.199)
[00:47:35] <dpk> amazigh: have you seen (chibi json)? (i think it postdates SRFI 180)
[00:47:43] <dpk> http://synthcode.com/scheme/chibi/lib/chibi/json.html
[00:48:03] <dpk> the main problem is that make-json-reader depends on runtime access to record-type field names, as symbols
[00:48:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:48:46] <dpk> whereas i expect we'll adopt field names as identifiers, making that moderately trickier
[00:50:10] <dpk> (though i also still think we should not include any JSON library in the standard)
[00:50:22] *** Joins: aeth (~aeth@user/aeth)
[00:50:47] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[00:50:55] <Zipheir> amazigh: Good name!
[00:56:15] <Zipheir> Well, good acronym, at least.
[00:56:34] <amazigh> yum, it is well thought
[00:56:51] <sham1> Could very well be a backronym
[00:57:07] <amazigh> lagash: I was thinking about GNU because the README mention GNU Make (also because GNU has a lot Scheme implementations)
[00:57:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:58:33] <amazigh> Alex raised some concerns that SRFI-180's json-fold is too complex or something; I think json-read and json-write could be enough, considering larger than memory, and deeply nested json is overengineering.
[00:59:41] *** Joins: aeth (~aeth@user/aeth)
[01:00:10] <amazigh> In theory, it is possible to implement something similar to chibi's make-json-reader on top of json fold; it may be possible even to avoid field descriptors
[01:00:54] <sham1> Does GNU have a lot of Scheme implementations? I can only think of three, those being MIT/GNU Scheme, Kawa and Guile
[01:01:03] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 252 seconds)
[01:01:18] <amazigh> in ruse-json I dropped json-fold.
[01:01:33] <amazigh> re make-json-reader, what happens when the json is invalid?
[01:02:05] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[01:03:27] <amazigh> In anycase, you need to a second pass to validate the input once structured with scheme types
[01:03:57] <amazigh> for a quick hack, make-json-reader might work, but so does a hand-made json->my-json
[01:04:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:05:23] <amazigh> also the code of SRFI-180 is way too complex, even if we consider the overkill requirements of deep json and bigger than ram.
[01:05:56] *** Joins: aeth (~aeth@user/aeth)
[01:06:11] <amazigh> I started a parser combinator with similar goal (that's why I was looking into cursors / iterators / generators)
[01:06:30] <amazigh> Parser combinator can backtrakc.
[01:09:56] <amazigh> parsing, validating, and structing into the proper scheme type in one iteration over the string or stream is... difficult.
[01:10:45] <amazigh> it is more bereable if you consider to stop the process once the first "problem" arise, but even then the code is not straightfoward.
[01:10:46] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[01:11:40] <amazigh> That is what most validator do; but that the wrong ux e.g. Chez scheme will stop at the first error it finds.
[01:12:23] <amazigh> entering a loop of fix - restart - fix - restart - fix... insteat of start - fix - fix - fix.
[01:13:51] <gwatt> I think it's not possible to list every single problem the parser or expander may encounter.
[01:15:37] <amazigh> e.g in the case of json, there is {foo: "bar"; qux: 42}, foo must be number, and qux must be a string, then both errors should be emited
[01:15:54] <amazigh> but that depends on the semantic of the validation, it does not always work.
[01:16:44] <amazigh> e.g. with scheme, a name-let with typo (letloop (... whatever)) once you read letloop and you find out it is unbound, the scheme can not read whatever, but it may read the expression that follow (letloop ..)
[01:18:04] <amazigh> e.g. (let ((out 42)) (letloop whatever...) outx) that will yield two error letloop unbound, and outx unbound
[01:19:17] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Quit: Leaving)
[01:20:37] *** Joins: livoreno (~livoreno@user/notzmv)
[01:24:32] <amazigh> with the parser combinator (paco), I started keeping the bigger than ram requirement, so that the equivalent of (paco-fold my-paco-spec iterator) returns an iterator.
[01:24:59] <amazigh> bigger than ram ~ generality
[01:27:19] *** Joins: Inline (~Inline@aftr-37-201-241-35.unity-media.net)
[01:28:41] <amazigh> re R7RS, and JSON, idk, I think we need more libraries for sure, that's why i started on working on portable libraries, before trying something else.
[01:29:52] <amazigh> SRFI-158, status: final (2017-10-27) well we are still trying to improve on that; hot take is to move forward somewhat on other subjects.
[01:30:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:34:45] <amazigh> I managed to run a simple program that rely on a R7RS on 11 scheme :)
[01:35:00] <amazigh> today I fixed mit-scheme.
[01:35:01] *** Joins: badkins (~badkins@136.56.92.199)
[01:35:07] <amazigh> but it does not run the json test suite
[01:38:48] <dpk> i want R7RS to be a good language in the spirit of Scheme: axiomaticity, correctness, timelessness. in the spirit i think it very much appropriate to revisit previous parts of the spec which turned out not to be up to scratch
[01:38:52] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:40:25] <dpk> if the designers of R4RS had worked like we are for R7RS, we would have got extend-syntax macros with quadratic expansion time ;-)
[01:40:34] *** Joins: seninha (~seninha@user/seninha)
[01:41:40] <dpk> the timelessness aspect is a major part of why i’m against JSON in R7RS. data formats come, and data formats go. mostly, they go
[01:42:58] <amazigh> a future RnRS might deprecate, then drop any JSON.
[01:43:13] <dpk> heck, enough Schemers were against adopting *Unicode* in 2006, then again in 2013
[01:43:24] <amazigh> idk
[01:44:54] <amazigh> rudybot: what is a good language ? 
[01:45:11] <dpk> and Unicode is as close to ‘not going away’ as any standard can be, thanks to the Consortium’s obsessive stance on interoperability — practically every text encoding in the world is now a Unicode encoding, even if they only cover a small part of the standard
[01:45:23] <rudybot> amazigh: I think the question "what is $language good for anyway?" is highly inflammatory in itself :-)
[01:46:09] <amazigh> dpk: do you think Unicode will go away one day?
[01:46:19] <amazigh> i do not understand.
[01:46:36] <amazigh> yes I agree with you about what good language in the spirit of Scheme is
[01:46:53] <amazigh> but also what would be the goal of R7RS-large?
[01:46:54] <dpk> forever is a long time, but i expect it to still be around, and as significant as it is today, when i die
[01:47:13] <amazigh> you favor a small language?
[01:47:21] <amazigh> you can...
[01:47:37] <dpk> not small, but built on small pieces
[01:50:06] <amazigh> re R7RS-large, and especially SRFI the process is more interesting than the result, part of my rationle for R7RS-large is to explore ideas
[01:50:09] <dpk> to Unicode: the novelty and specificity of requiring Unicode was one point of criticism against R6 and to a lesser extent R7. i disagree, but also Unicode is about the newest standard i think Scheme should consider
[01:50:40] <amazigh> some time, ideas come out of uninteresting libraries.
[01:50:52] <dpk> no XML either, e.g.
[01:50:55] <dpk> true!
[01:50:57] <amazigh> what other standard should Scheme consider?
[01:51:15] <dpk> TCP/IP and UDP
[01:51:37] <dpk> POSIX
[01:52:31] <amazigh> OCI
[01:52:33] <amazigh> :D
[01:52:45] <amazigh> I am kidding
[01:53:16] <dpk> jcowan has proposed an ASN.1-based pickle-type thing for Scheme, so maybe (a small subset of) ASN.1 too
[01:53:58] <jcowan> It's on the Urania Straw Poll
[01:54:05] <jcowan> ("Twinjo")
[01:55:15] <amazigh> The number of applications is gargantuesk https://en.wikipedia.org/wiki/ASN.1#Applications
[01:55:44] <jcowan> More and more SCC systems understand git's export format, including even RCS
[01:56:24] <dpk> someone’s still meaningfully maintaining RCS?
[01:56:38] <dpk> beyond bug and compatibility fixes?
[01:58:44] <jcowan> an advantage oof it is that it is useful for when you want to maintain control over, say, your dotfiles without intertwingling their history.
[01:59:39] <dpk> yes, i’ve heard it’s still popular with some for explicitly single-file projects
[01:59:56] <dpk> can ASN.1/Twinjo encode circular references?
[02:00:55] <jcowan> not yet
[02:00:58] *** Parts: gerund (~user@dsl-lprbng12-54f9b9-129.dhcp.inet.fi) (ERC 5.4 (IRC client for GNU Emacs 29.0.50))
[02:01:39] <jcowan> https://web.archive.org/web/20210418143805/http://www.catb.org/~esr/src/ (catb.org is down right now) is a nice layer over rcs
[02:02:35] <jcowan> https://gitlab.com/esr/src
[02:08:44] <amazigh> src is related to ASN.1?
[02:09:19] <amazigh> re paco looks like http://inamidst.com/lisp/serex (but paco is better :p)
[02:11:54] <amazigh> What is SCC?
[02:19:47] <jcowan> source code control
[02:20:03] <jcowan> no relation to asn.1
[02:30:26] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[02:31:35] <Zipheir> AKA VCS = version control system.  Too many TLAs.
[02:32:05] <Zipheir> Funny that RCS didn't become a generic name...
[02:33:19] <dTal> Reaction Control System?
[02:36:32] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[02:38:45] *** Joins: madage (~madage@user/madage)
[02:44:43] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:45:18] *** Joins: badkins (~badkins@136.56.92.199)
[02:45:19] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:36a8:e19b:f9dc:2337)
[02:46:49] *** Joins: klovett (~klovett@107.115.32.2)
[02:51:25] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[02:51:30] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:36a8:e19b:f9dc:2337) (Ping timeout: 256 seconds)
[03:03:05] *** Quits: jasonmason (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[03:06:49] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[03:07:25] *** Joins: badkins (~badkins@136.56.92.199)
[03:12:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[03:14:10] *** Joins: aeth (~aeth@user/aeth)
[03:28:05] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:30:19] *** Quits: s-liao (~s-liao@101.86.99.70) (Client Quit)
[03:33:35] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:41:00] *** Quits: sjamaan (~sjamaan@chicken/developer/sjamaan) (Ping timeout: 268 seconds)
[03:41:15] *** Joins: sjamaan (~sjamaan@chicken/developer/sjamaan)
[03:44:35] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[03:49:36] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[03:50:25] *** Joins: klovett_ (~klovett@107.115.32.2)
[03:52:42] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[04:01:45] *** Quits: Inline (~Inline@aftr-37-201-241-35.unity-media.net) (Ping timeout: 256 seconds)
[04:01:59] *** Quits: livoreno (~livoreno@user/notzmv) (Quit: Quit)
[04:02:00] *** Joins: Inline (~Inline@aftr-37-201-241-35.unity-media.net)
[04:02:16] *** Joins: livoreno (~livoreno@user/notzmv)
[04:10:45] *** Quits: klovett_ (~klovett@107.115.32.2) (Quit: ZZZzzz…)
[04:16:55] *** Quits: jao (~jao@194.99.104.13) (Remote host closed the connection)
[04:27:31] *** Joins: jao (~jao@194.99.104.13)
[04:39:50] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:41:37] *** Joins: badkins (~badkins@136.56.92.199)
[04:46:35] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[04:49:16] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[04:52:10] *** Joins: badkins (~badkins@136.56.92.199)
[04:52:10] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[04:53:21] *** Joins: notzmv (~zmv@user/notzmv)
[04:54:08] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[04:57:33] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[05:02:11] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:14:24] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[05:15:15] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[05:45:18] <mdhughes> Really who needs anything more than cvs?
[05:45:51] <mdhughes> It was kind of a big deal when I went to college that some people were still using rcs and disliked cvs taking over project version numbers.
[05:48:53] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[05:51:10] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[05:52:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:10:23] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 256 seconds)
[06:12:43] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[06:15:42] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:15:58] *** Joins: livoreno (~livoreno@user/notzmv)
[06:16:14] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[06:18:53] *** Quits: Inline (~Inline@aftr-37-201-241-35.unity-media.net) (Ping timeout: 256 seconds)
[06:22:52] *** Joins: livoreno (~livoreno@user/notzmv)
[06:30:11] *** Joins: daviid (~user@177.79.121.178)
[06:43:09] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[06:44:58] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[06:45:29] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[06:48:21] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[06:49:24] *** Joins: klovett (~klovett@107.115.32.2)
[06:51:14] *** Joins: badkins (~badkins@136.56.92.199)
[06:53:25] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:55:51] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[07:09:33] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Ping timeout (120 seconds))
[07:09:49] *** Joins: s-liao (~s-liao@101.86.99.70)
[07:15:33] *** Quits: jao (~jao@194.99.104.13) (Ping timeout: 256 seconds)
[07:21:15] *** Joins: jao (~jao@194.99.104.13)
[07:22:39] *** Joins: badkins (~badkins@136.56.92.199)
[07:26:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:33:33] <Zipheir> OpenBSD's been doing just fine with cvs for decades now.
[07:55:17] *** Joins: mononote (~mononote@user/mononote)
[07:56:14] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[07:59:14] *** Quits: jao (~jao@194.99.104.13) (Ping timeout: 252 seconds)
[08:10:03] *** Quits: daviid (~user@177.79.121.178) (Ping timeout: 252 seconds)
[08:54:41] <lockywolf> OpenBSD is not very big.
[08:55:00] *** Quits: livoreno (~livoreno@user/notzmv) (Remote host closed the connection)
[09:00:48] *** Quits: klovett (~klovett@107.115.32.2) (Quit: ZZZzzz…)
[09:05:20] *** Joins: Inline (~Inline@aftr-37-201-240-188.unity-media.net)
[09:05:21] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[09:05:28] *** Quits: Inline (~Inline@aftr-37-201-240-188.unity-media.net) (Remote host closed the connection)
[09:06:58] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:07:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[09:08:38] *** Joins: livoreno (~livoreno@user/notzmv)
[09:18:12] <Zipheir> Probably a sign of "doing just fine".  It reminds (in contrast) of the unintentionally funny slogan "It is impossible to write a big program without Java".
[09:20:09] <Zipheir> The OpenBSD ports tree is also under cvs, and that's pretty big.
[09:20:49] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[09:23:28] <lockywolf> I can't say "just fine". I'd say "OpenBSD has more important problems to solve".
[09:23:36] *** Joins: badkins (~badkins@136.56.92.199)
[09:23:53] <lockywolf> CVS is extremely slow.
[09:24:06] <lockywolf> Updating OpenBSD ports tree takes hours.
[09:25:02] <lockywolf> It's like, CVS does 80% of what a VCS should do. Works for most cases.
[09:25:47] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[09:28:10] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[09:28:41] <Zipheir> Yes, it's not ideal for something of that size.
[09:29:45] <Zipheir> I haven't tried merges with cvs, either; I can't imagine they're fast either.
[09:33:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[09:35:33] *** Joins: aeth (~aeth@user/aeth)
[09:39:59] <lockywolf> I mean, it's not bad, or something. It's just "layman git" is not any harder, and everyone uses git. 
[09:41:39] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:03:16] <Zipheir> Git has its own issues.
[10:11:54] <mdhughes> I'm not a fan of using something because it's popular, and I loathe git's design. I use it in a few places because I have to, or it's the only supported tool. Would never choose it.
[10:15:46] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[10:19:20] *** Joins: s-liao (~s-liao@101.86.99.70)
[10:22:24] *** Joins: klovett (~klovett@107.115.32.2)
[10:29:23] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:209d:2106:a0ce:2fa2) (Ping timeout: 252 seconds)
[10:31:24] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[10:48:26] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[10:53:14] <f8l> NetBSD and pkgsrc are also still in CVS. It’s very slow and heavy on network usage. Developers have to communicate to avoid stepping on other’s toes. One advantage I see is the ease of managing subset of the repository, which is fine for something as modular as pkgsrc. I would trade that for git’s performance though.
[11:06:36] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:16:41] *** Joins: notzmv (~zmv@user/notzmv)
[11:24:32] *** Joins: badkins (~badkins@136.56.92.199)
[11:25:39] *** Joins: civodul (~user@guix/contributor/civodul)
[11:28:47] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[11:33:09] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:2293:2037:bf6e:4ea5)
[11:46:41] *** Joins: s-liao (~s-liao@101.86.99.70)
[11:48:35] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[11:52:37] *** Joins: daviid (~user@179.210.52.91)
[12:11:41] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[12:20:41] <amazigh> heyall!
[12:27:03] *** Joins: seninha (~seninha@user/seninha)
[12:40:38] *** Joins: tripfandango (~tripfanda@5.29.14.164)
[12:51:25] *** Joins: archenoth (~archenoth@S0106889e6827f474.cg.shawcable.net)
[12:51:35] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[12:51:36] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[12:52:51] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:bda3:983e:438:ddd3) (Ping timeout: 245 seconds)
[12:55:35] <sham1> Hey you
[13:02:24] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:07:05] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[13:13:52] <amazigh> how it feels like to write portable code https://media3.giphy.com/media/11ZSwQNWba4YF2/giphy.gif
[13:15:24] <sham1> Herding cats
[13:16:20] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[13:19:27] <amazigh> ahah
[13:19:49] <amazigh> about herding cats https://yewtu.be/watch?v=vTwJzTsb2QQ (ad, youtube via invidious)
[13:21:09] <amazigh> My secret hope: if we get together enough portable libraries / programs, maybe implementers will work on improving performance (cpu and memory)
[13:30:25] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[13:33:35] <sham1> That's such a funny video
[13:34:30] <sham1> And the fact that it's an ad makes it move brilliant
[13:34:32] <sham1> more*
[13:38:07] *** Joins: pony (sid524992@smol/hors)
[13:39:04] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:55:48] *** Joins: mononote (~mononote@user/mononote)
[13:56:12] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:16:37] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:44:22] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:46:12] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[14:49:31] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 245 seconds)
[14:53:54] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:57:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:58:09] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[14:59:42] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[15:00:59] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[15:16:33] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[15:18:49] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:22:25] *** Joins: seninha (~seninha@user/seninha)
[15:31:43] *** Joins: TCZ (~tcz@91.150.178.124)
[16:04:24] *** mdhughes_ is now known as mdhughes
[16:09:48] *** Joins: m455 (~m455@user/m455)
[16:14:27] *** Joins: user1b13 (~user1b13@cpc97616-walt24-2-0-cust74.13-2.cable.virginm.net)
[16:15:45] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[16:27:54] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:30:42] <dpk> is it possible to tell Emacs that having a .dir-locals.el file that tells it to eval something of the form (put [some symbol] 'scheme-indent-function [some number]) isn't risky?
[16:30:56] <dpk> without just letting it eval anything whatsoever
[16:32:15] <dpk> i should probably ask in #emacs. or emacs.stackexchange.com
[16:32:44] *** Parts: user1b13 (~user1b13@cpc97616-walt24-2-0-cust74.13-2.cable.virginm.net) ()
[16:46:08] *** Quits: tripfandango (~tripfanda@5.29.14.164) (Ping timeout: 252 seconds)
[16:50:24] *** Joins: badkins (~badkins@136.56.92.199)
[16:57:13] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[17:01:32] *** Quits: zwr (~zwr@2804:d45:b966:fb00:e8f3:9015:4194:f553) (Ping timeout: 252 seconds)
[17:02:14] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c634:1c10:a560:ee24)
[17:06:53] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:17:07] *** Joins: s-liao (~s-liao@101.86.99.70)
[17:27:28] <sham1> dpk: yes
[17:27:43] <sham1> It should even give you an option to remember your decision about it not being risky
[17:28:00] <sham1> Which gets added to your custom stuff
[17:38:25] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[17:38:36] *** Quits: Kooda2 (~kooda@natsu.upyum.com) (Quit: WeeChat 2.8)
[17:38:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[17:40:14] *** Joins: Kooda (~kooda@natsu.upyum.com)
[17:41:13] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[17:49:09] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[17:54:28] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[17:55:14] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:819c:2095:bee1:170b)
[17:56:28] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[17:59:50] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:819c:2095:bee1:170b) (Ping timeout: 252 seconds)
[18:01:10] <amazigh> Using a recent build of mit-scheme, does the following error ring a bell to anyone:
[18:01:20] <amazigh> ;Illegal character: #\'
[18:05:31] *** Joins: badkins (~badkins@136.56.92.199)
[18:10:07] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[18:13:27] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[18:13:48] <ns12> amazigh: Where does that error occur?
[18:14:02] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[18:16:46] *** Joins: jao (~jao@45.152.183.54)
[18:28:39] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:819c:2095:bee1:170b)
[18:30:48] <ns12> jcowan: Regarding https://github.com/johnwcowan/r7rs-work/blob/master/ImplementationSupport.md Guile now supports practically all of R7RS-small.
[18:30:52] <ns12> https://www.gnu.org/software/guile/manual/html_node/R7RS-Incompatibilities.html
[18:39:19] *** Joins: badkins (~badkins@136.56.92.199)
[19:01:03] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[19:12:21] <amazigh> ns12: it is complicated lol
[19:12:43] <amazigh> ns12: what version of mit-scheme do you available ready at hand?
[19:14:06] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 245 seconds)
[19:16:13] <amazigh> ns12: or do you have a debian at hand?
[19:16:45] <ns12> amazigh: MIT Scheme 11.2 on Ubuntu. But I am currently occupied.
[19:19:16] *** Joins: livoreno (~livoreno@user/notzmv)
[19:19:33] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[19:22:17] <amazigh> ok
[19:22:28] *** Quits: xsperry (~xs@user/xsperry) ()
[19:23:36] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[19:23:47] <amazigh> You can try to reproduce with:
[19:23:54] <amazigh> % git clone --branch amirouche-json https://github.com/scheme-live/live
[19:24:00] <amazigh> cd live/
[19:24:12] <amazigh> ./venv scheme-live mit run live/json/check-0002-json-unstable.scm
[19:24:57] <amazigh> if mit-scheme is not installed, on debian, or debian-like, you can install it with:
[19:24:59] <amazigh>  ./venv scheme-live mit install
[19:25:27] <amazigh> let me know if you reproduce when you have time
[19:26:03] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[19:26:08] *** Joins: hiruji (~hiruji@user/hiruji)
[19:32:24] <jcowan> ns12: Fixed!
[19:39:19] *** Joins: notzmv (~zmv@user/notzmv)
[19:40:08] *** Quits: klovett (~klovett@107.115.32.2) (Quit: ZZZzzz…)
[19:52:30] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:2293:2037:bf6e:4ea5) (Quit: WeeChat 2.8)
[19:55:29] *** Joins: mononote (~mononote@user/mononote)
[20:23:21] <amazigh> ns12: do you use docker? It might easier to reproduce with docker
[20:23:40] <amazigh> or podman
[20:24:36] <amazigh> bbl
[20:47:41] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[20:48:27] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[21:02:38] *** Joins: livoreno (~livoreno@user/notzmv)
[21:14:45] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:17:54] *** Joins: sonny88 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca)
[21:21:47] *** Joins: badkins (~badkins@136.56.92.199)
[21:26:45] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[21:28:35] *** Joins: klovett (~klovett@107.115.32.2)
[21:32:55] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:38:44] *** Joins: badkins (~badkins@136.56.92.199)
[21:42:57] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 252 seconds)
[21:43:30] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[21:48:24] *** Joins: hiruji (~hiruji@user/hiruji)
[21:54:42] <Franciman> what garbage collection technique does chez scheme use?
[21:55:00] <Franciman> and what is the most famous garbage collection strategy in the various scheme implementations?
[22:00:25] <sonny88> mark n sweep probably
[22:02:18] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Quit: Quit)
[22:06:15] <gwatt> Franciman: it's 25 years old, but I think this still describes the collector: https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.72.1794&rep=rep1&type=pdf
[22:12:06] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[22:14:51] *** Joins: [deleted] (~livoreno@user/notzmv)
[22:15:57] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[22:16:57] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[22:21:23] <Zipheir> Shivers's History of T has a good discussion of Scheme GC algorithms, and it's also a fun read. http://www.paulgraham.com/thist.html
[22:21:33] <sonny88> if anyone is doing aoc, I'd like to see your solutions
[22:21:52] <Zipheir> I am, slowly and methodically.
[22:22:11] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[22:22:24] <Zipheir> The name of the game so far has been "origami".
[22:22:39] <sonny88> first one seems trivially recursive
[22:22:50] <sonny88> but not to me :D
[22:23:00] <Zipheir> You can calculate a nice hylomorphism on day 1.
[22:23:25] <sonny88> i don't even know what that means xD
[22:24:07] <sonny88> well, I guess I should stop being lazy then
[22:25:35] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[22:25:48] <Zipheir> I'll post my discussion of it, give me a sec..
[22:33:11] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Ping timeout: 252 seconds)
[22:34:00] <Franciman> thanks gwatt and Zipheir 
[22:43:46] <Zipheir> sonny88: Spoilers! http://www.sigwinch.xyz/aoc/2021/day_01.html
[22:43:48] <phoebos> sonny88: i am attempting to learn scheme doing some AoC this year, but the solutions are definitely *bad*: https://git.bvnf.space/advent-of-code
[22:44:27] <sonny88> thanks guys, I think I'm putting to much effort out for simple problems
[22:44:54] <Zipheir> The point for me is not to solve the puzzles quickly, but to learn something.
[22:45:22] <Zipheir> I thought day one, part two was rather interesting.
[22:46:15] <Zipheir> From a functional perspective, at least; an imperative solution would be very plug-and-chug, although it's interesting to consider how to formulate it.
[22:47:31] <phoebos> Zipheir: i like your site
[22:48:27] *** Joins: tfeb (~tfb@88.98.95.237)
[22:53:08] <Zipheir> phoebos: Thanks!
[22:53:47] <Zipheir> phoebos: I note that you included the parsing in your solutions.
[22:53:57] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:54:59] <Zipheir> That's always the most tedious part for me; I frequently just use AWK or manual editing to turn the input into valid Scheme/Haskell/whatever data.
[22:55:49] *** Joins: badkins (~badkins@136.56.92.199)
[22:58:10] <phoebos> that's definitely the least portable part
[22:58:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[22:58:22] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[22:58:35] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:58:48] <phoebos> i might do the same as you, but i also want to become familiar with scheme IO
[23:00:15] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[23:00:52] <Zipheir> That makes sense to me.
[23:13:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[23:15:58] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[23:17:11] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:819c:2095:bee1:170b) (Ping timeout: 252 seconds)
[23:25:20] <Zipheir> sonny88: Hylomorphisms are a great programming tool to have.
[23:25:28] <taw10> sonny88: here are mine, in Guile Scheme: https://github.com/taw10/advent-of-code
[23:26:18] <sonny88> ty
[23:26:42] <Zipheir> sonny88: It's a fundamental theorem that every inductively-defined type has a fold and an unfold.  Many, many algorithms can be described as unfolding a structure, then folding it; a hylomorphism "deforests" this kind of algorithm--you compute the result *without* building the intermediate structure.
[23:28:14] *** Joins: badkins (~badkins@136.56.92.199)
[23:28:49] <Zipheir> Summing a list of numbers is a simple example.  Compiling a program is a less simple one.
[23:29:05] *** Joins: xsperry (~xs@user/xsperry)
[23:29:21] <Zipheir> Er, summing an interval.  The whole point is to cut out the list.
[23:30:44] <sonny88> I see
[23:32:29] <Zipheir> https://www.cs.ox.ac.uk/jeremy.gibbons/publications/origami.pdf has the details.  It's pretty short.
[23:35:24] *** Quits: taylan (~taylan@user/taylan) (Read error: Connection reset by peer)
[23:36:33] <sonny88> heh, I'd say 7-8 pages is short, but I'll give this a go
[23:37:19] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[23:37:21] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 252 seconds)
[23:37:54] <Zipheir> I have some extensive notes on that paper which might be helpful http://www.sigwinch.xyz/notes/origami/index.html
[23:38:09] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[23:39:14] <sonny88> thanks again :-)
[23:40:05] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:ec04:5b98:87f7:9e92)
[23:40:05] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:ec04:5b98:87f7:9e92) (Changing host)
[23:40:05] *** Joins: skapata (~Skapata@user/skapata)
[23:56:47] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
