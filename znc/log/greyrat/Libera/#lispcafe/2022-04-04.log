[00:00:05] <shka> yeah, i know
[00:00:11] <selwyn> but if i greedily choose the most effective option at each turn - then there is no strategy
[00:00:35] <selwyn> hand crafted heuristics could work again
[00:01:02] <selwyn> there is something of a delineation between beginning, middle and end game
[00:01:32] <selwyn> hm
[00:02:46] <selwyn> idea: parametrise the policy function somehow, and use a genetic algorithm to optimise it
[00:03:19] <shka> genetic algorithm still needs utility function
[00:03:49] <selwyn> well, the utility function would simply be how many games the bots win on playouts between each other
[00:04:09] <selwyn> over whole games
[00:04:11] <shka> yup
[00:04:27] <shka> but you cant know precisely 
[00:04:41] <shka> for every possible combination 
[00:04:46] <selwyn> no
[00:05:01] <shka> so here is area where ML is actually useful 
[00:05:13] <shka> otherwise, i don't have anything to add
[00:18:14] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:19:59] <gilberth> Hmm, I am at implementing division again. The first thing I do is to shift the divisor left until its MSB is flush with the MSB of the dividend. This seems very inefficient when I the divisor is a small number times a power of two. Worst case would be sth huge divided by just 1. I would first shift the one left all the way and basically read the dividend bitwise from left to right again.
[00:20:13] <gilberth> There must be a more clever way.
[00:20:39] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[00:21:29] <gilberth> I mean, after all I could divide by say 2 by just shifting the dividend right and keep the fallen off bit as remainder.
[00:26:05] <selwyn> just watched 'the second renaissance'
[00:26:08] <selwyn> thinking twice about ai
[00:27:03] <shka> selwyn: boring crap
[00:27:51] <shka> and no thought put into it 
[00:28:11] <selwyn> it is less scary than i remember
[00:36:18] *** Joins: Brucio-61 (~Brucio-70@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[00:38:35] *** Joins: Lycurgus (~juan@98.4.112.204)
[00:56:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[01:21:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:23:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:25:17] *** Joins: jeko (~user@user/jeko)
[01:25:20] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[01:25:54] *** Joins: jeko (~user@user/jeko)
[01:28:19] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[01:28:58] *** Joins: jeko (~user@user/jeko)
[01:36:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:39:43] *** Quits: jeko (~user@user/jeko) (Ping timeout: 256 seconds)
[01:43:48] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[01:44:56] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[01:49:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:50:04] *** Joins: jeko (~user@user/jeko)
[01:53:53] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[01:56:56] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Remote host closed the connection)
[01:58:32] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[02:45:47] <gilberth> I am a bit bored and look into OISCs. However I find it interesting that very early machines build were quite practical machines. I am not aware of that simple OSICish machines were build.
[02:47:13] <gilberth> This is perhaps because of memory.
[02:54:12] *** Joins: jeko (~user@user/jeko)
[02:58:24] <pl> OISC was rather late discovery, IIRC 
[03:12:22] <selwyn> what a weird concept
[03:12:55] <gilberth> Yes, suprisingly late. Though one could argue that the Turing machine is kind of OISC, too.
[03:13:11] <hayley> https://github.com/robert-strandh/SICL/commit/edabb487db7a2c8e0aac18c17039e9e6298e57d2
[03:13:11] -ixelp- Comment out warning for now. · robert-strandh/SICL@edabb48 · GitHub
[03:13:16] <hayley> RIP the return value warning 2021-2022
[03:13:17] <selwyn> it reminds me of toffoli gates being universal for reversible computing
[03:13:52] <selwyn> rip nagging
[03:14:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[03:15:34] <hayley> Hm, MULTIPLE-VALUES-LIMIT just has to be 20 or over. Can I just use a few pages per thread for extra return values? I figure, well, no one is going to have a good use for more than 1000 values.
[03:15:49] <hayley> For reference, GHC tuples are limited to 63 elements IIRC, and nobody has ever complained about that.
[03:15:59] <hayley> *62
[03:17:17] <hayley> 8KiB would be enough for 1Ki values, which seems enough to me.
[03:17:52] <hayley> Maybe I should check how SBCL does multiple values, as it apparently supports a lot.
[03:18:33] <SAL9000> on x86 you could (ab)use the argument registers for multiple values <= 4 (Windows) <= 6 (SysV)
[03:18:39] <SAL9000> x86-64 rather
[03:19:32] <hayley> Yeah, IIRC SICL uses 5 return value registers already. And that might change, since SICL is all caller-saves, so we can use all registers for arguments and return values.
[03:19:53] <gilberth> Well, I would consider just using kind of the same convention as for arguments. Keep the first n values in registers and return the rest of them on the stack.
[03:20:23] <SAL9000> return on stack is kinda spoopy if you have callee allocate the stack (because caller doesn't know how many values you're returning)
[03:21:08] <hayley> I'd have to check how multiple values are actually consumed. 
[03:21:08] <SAL9000> feels like it'd violate some assumptions somewhere about "free" stack frames
[03:21:31] <gilberth> Perhaps.
[03:22:02] <hayley> Hence I'd prefer the simpler approach of just using some spare pages for return values.
[03:22:42] <SAL9000> I don't know SysV as well as I do Windows x64 but in the latter there are these weird required caller-allocated stack slots for the 4 register arguments
[03:22:44] *** Quits: jeko (~user@user/jeko) (Ping timeout: 246 seconds)
[03:23:56] <SAL9000> you could slap the multiple-value count into RAX, first 4 values in the slots, and the rest (if applicable) anywhere on the heap -- in that case store a tagged pointer to that location in RAX
[03:24:04] <gilberth> It seems like SICL already wants to use a weird calling convention. Like caller-saves. Which I still believe is not too brilliant.
[03:24:52] <hayley> All named calls get to pick their own calling convention. So it's just FUNCALL that is caller-saves.
[03:24:56] <SAL9000> (bonus, since x86-64 means you get 3 tag bits, you can always treat RAX as a "tagged pointer" which just happens to have a special case for null... or you could have callee put the stack address in there, if the format of your heap-struct is compatible -- then no special cases, even)
[03:25:14] <SAL9000> uhhhh
[03:25:19] <SAL9000> doesn't that make an utter nightmare for unwinding?
[03:26:42] <SAL9000> you'd have to, like, store the caller's calling convention in the callee's frame to be sure?
[03:26:50] <gilberth> How about: The function returns with the stack pointer were it would be with no multiple values. If the caller doesn't care about multiple values, nothing needs to be done. If it does, it would find the remaining values on the stack.
[03:27:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:27:15] <gilberth> The carry flag could be used to indicate whether multiple values are present or not.
[03:27:19] <hayley> I'd have to think about it.
[03:27:25] <selwyn> going to try aot with java
[03:27:29] <selwyn> hm
[03:27:30] <hayley> gilberth: Ok, calm down SBCL.
[03:27:38] <SAL9000> gilberth: The catch with that is -- in calling conventions without weird stack shit like the windows one -- you now have a situation where the stack pointer is above frames that are "in use"
[03:27:57] <SAL9000> I'm betting this will confuse e.g. valgrind.
[03:27:59] <selwyn> i am just desperate for abcl to start faster
[03:28:10] <hayley> And using caller-saves is a pain for precise GC. Worse for concurrent GC, according to Cliff Click.
[03:28:11] <gilberth> This would provide for a cheap multiple-value-call implementation. No extra copying involved.
[03:28:37] <SAL9000> hayley's idea with the centralized spare page would be much cleaner in terms of both valgrind and GCs, I think
[03:28:43] <SAL9000> you can still use carry flag signaling tho
[03:29:09] <hayley> Oh well, at least the warning I wrote was presented at ELS. :)
[03:30:11] <Gnuxie> but how many yimes are you going to be using values?
[03:30:35] <hayley> Yes, the First Ever SICL Image will only support 5 values. Not CL compatible, but practically not a problem.
[03:30:38] <Gnuxie> or do you always have to pay whether you use them or not? 
[03:30:39] <gilberth> Well, it would not hurt to have the excess values at a place, I want them anyway.
[03:31:18] <selwyn> gnuxie: https://twitter.com/ShowerAbsolute/status/1510324798638985216
[03:31:35] <hayley> gilberth: You'd handle the case of (MULTIPLE-VALUE-CALL #'F (G)) but you'll have to shuffle for anything more.
[03:31:43] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 260 seconds)
[03:31:57] <SAL9000> regarding flag signalling: know of any x86-64 flags which are guaranteed to be reset by calls unaware of the flag-signalling convention? I have an idea which would require doing such signalling in the callee's direction, and only if there are no intervening foreign frames.
[03:32:23] <gilberth> hayley: Do I? BTW what about (multiple-value-call #'f (g) (h))?
[03:32:40] <Gnuxie> selwyn: what the hell??
[03:33:06] <Gnuxie> why is the first part of the tin pixelated though??
[03:33:30] <selwyn> https://pbs.twimg.com/media/FPaqveCXIAYbBdt.png
[03:33:54] <selwyn> perhaps the tin was dirty and he didnt want to embarrass himself in the picture
[03:33:55] <Gnuxie> oh ffs 
[03:35:03] <gilberth> And multiple-value-bind wants excess values on the stack, too. In fact you could implement multiple-value-bind in terms of multiple-value-call easily this way when the return value convention is [almost] like the argument passing convention. IIRC multiple-value-bind isn't even a special form.
[03:35:35] <Gnuxie> selwyn: lol
[03:36:07] <SAL9000> (nope, my idea won't work... looks like it's back to storing a pointer into caller's stack frame in a TLS global, ugh)
[03:37:28] <selwyn> hopefully jaotc will improve startup time
[03:37:55] <selwyn> hayley: do you have experience with aot and abcl?
[03:45:07] <hayley> selwyn: Nope.
[03:45:20] <hayley> gilberth: Yes, w.r.t "no extra copying".
[03:47:25] * hayley uploaded an image: (32KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/vgJKZvTsROVdTnutsSNSueYm/meetings.png >
[03:48:09] <Gnuxie> thanks for the insight 
[03:48:19] <selwyn> hayley: i get those too lol
[03:48:22] <selwyn> great insight
[03:50:07] <hayley> Also, I fear that actually consuming multiple values on the stack will get annoying, without auxiliary space.
[03:52:50] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[03:54:00] *** Joins: aeth (~aeth@user/aeth)
[03:55:30] <gilberth> hayley: For what it is worth, CCL uses the stack, it seems.
[04:00:17] <SAL9000> clearly the One True Lisp Way would be to CONS the values into a list and return that /s
[04:00:46] <hayley> I'm pretty sure something around values does CONS in SICL.
[04:01:37] <hayley> https://github.com/robert-strandh/SICL/blob/master/Code/Compiler/HIR-transformations/eliminate-append-values.lisp
[04:01:38] -ixelp- SICL/eliminate-append-values.lisp at master · robert-strandh/SICL · GitHub
[04:06:40] <gilberth> hayley: Do you cons arguments, too?
[04:06:52] <hayley> gilberth: No.
[04:07:14] <hayley> beach isn't a fan of CONS not CONSing its arguments. But, if it did, we could cons arguments.
[04:07:19] <gilberth> Then this is not the true Lisp Way, as you say.
[04:10:34] <hayley> "In our lazy allocation model, however, all CONS'ing is first performed on the stack, so there is no additional penalty for CONS'ing &REST arguments."
[04:11:55] <gilberth> With cdr-coding it would make no difference at all.
[04:12:36] <hayley> The point is that the list lands on the stack to start with, and not the heap. So if you use the list as if it were of DYNAMIC-EXTENT, you wouldn't go any slower. 
[04:13:13] <hayley> Speaking of, Baker also claimed we better have CDR-coding for better cache use. Anyone got CDR-coding?
[04:13:28] <gilberth> Actually I would prefer that DYNAMIC-EXTENT would have no effect at all.
[04:13:55] <hayley> Well, you know, we don't heap allocate if there's no need to heap allocate. There isn't any restriction on what you do with the &REST list.
[04:14:34] <gilberth> hayley: Well, I have my cdr-coding benchmark and it says, that for larger lists, Baker is right. Same story as with that we discovered that read barriers could be free.
[04:15:24] <hayley> Not quite free, but not too expensive. Rather I found that, if you are traversing a list, the read barrier is basically doing a prefetch for you.
[04:16:04] <hayley> Write barriers also apparently got cheaper, like 0.6% slower than no barriers or so. But those results haven't been published yet.
[04:17:15] <gilberth> Writes are far less often than reads.
[04:17:58] <hayley> Still, if write barriers are cheaper, I have to wonder if read barriers are cheaper. Not as cheap, but the relative difference should be similar.
[04:18:25] <gilberth> Does SBCL use write barriers?
[04:18:25] <hayley> Say, if write barrier overhead halved in 10 years, I'd sort of expect read barrier overhead to halve too.
[04:18:41] *** Joins: CyberneticRev (~akshay@45-21-10-81.lightspeed.hstntx.sbcglobal.net)
[04:19:02] <hayley> Yes.
[04:19:09] <gilberth> Good.
[04:19:33] <hayley> They used to be using the MMU, now there is an explicit card table for generational GC.
[04:19:50] <hayley> But that also gives me somewhere to stick concurrent marking...I hope.
[04:26:40] <hayley> People have wanted a concurrent GC for ages, but I could live with just parallel, as I have enough cores that dividing the pause up would be fine. Just parallel wouldn't need a new barrier, so it'd be easier.
[04:30:24] <gilberth> Which still is curious, because I don't notice pauses.
[04:31:50] <hayley> I did a lot while running the olde decentralise2-tests suite. It'd run fast for two seconds, then pause for one, then run fast again. GC pauses sap something like 30% of throughput there.
[04:32:39] <hayley> And REGRIND with a small heap, and compiled code, would also thrash and the GC would take too much time. Needed something like a 10GB heap for 10 threads, even though barely anything is live for long.
[04:32:42] <gilberth> You saw one second pauses? Every two seconds? That's at lot.
[04:34:00] <gilberth> If that is true, I believe different things are broken there.
[04:34:04] <hayley> It does cons a lot, due to lock-free data structures. But still terrible, you'd think Cliff Click wouldn't bother if GC screwed over his 800 core boxes.
[04:37:17] <hayley> I'll also add, to best appreciate the pauses, you want to have many cons-happy threads running non-stop.
[04:37:35] <hayley> Serial GC just gets outpaced there.
[04:58:05] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:05:33] * hayley just waiting for Cheney GC in SBCL to get the axe, then she can work on a new one
[05:12:52] <hayley> https://www.youtube.com/watch?v=RjoatjztY_Y
[05:12:53] -ixelp- Portal 2: Desolation - Graphics Overhaul Showcase - YouTube
[05:18:28] <Lycurgus> why it that estoppel?
[05:18:32] <Lycurgus> *is
[05:19:29] <Lycurgus> are they going to change anything? I thought you had to special compile to get it in the first place.
[05:19:53] <hayley> Apparently the renderer is new.
[05:23:00] * hayley has little to do, and little motivation to do what there is to do
[05:23:14] <Lycurgus> change is good
[05:24:12] <Lycurgus> i found some stuff unblocked, namely the ability to deploy smalltalk on web and desktop
[05:24:18] <Lycurgus> that fired me up
[05:25:38] <Lycurgus> ns.meansofproduction.biz/SPO/run/ac.html
[05:25:59] <Lycurgus> so you get one thing going in one area and it carries over
[05:26:34] <Lycurgus> just watched as much of the free episode of raised by wolves as I could stand
[05:26:50] <Lycurgus> i'd call it "Religion's not Dead"
[05:28:00] <Lycurgus> most of the KEE will be lisp and prolog but the GUI will be smalltalk 
[05:28:24] <Lycurgus> aside from any exposed legacy clim or the like
[05:29:50] <hayley> https://i.redd.it/tam64lvszdr81.png
[05:37:32] <semz> Are they seriously selling a gfx card for 2K
[05:42:01] <hayley> Yes.
[05:43:53] * hayley bored still
[05:44:25] <hayley> I want to play modded Minecraft but it's boring alone. I wonder if I can run a server on the Pi without it catching fire.
[05:47:14] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[05:56:02] *** Quits: CyberneticRev (~akshay@45-21-10-81.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 246 seconds)
[06:10:41] * hayley looks for a minimum RAM requirement for some modpack
[06:10:49] <hayley> "Come rent our servers, only $5/month"
[06:10:55] * hayley clicks
[06:11:04] <hayley> "We recommend 6GB of RAM, add 4GB extra *here*"
[06:11:09] <hayley> "This will cost $20/month"
[06:12:10] <hayley> I can only give it 2GB on my Pi. zram might help, it might not. Probably not.
[06:16:32] <hayley> And now people want to complain about one bad course to the student union, so that's more important to think about now.
[06:17:38] *** Joins: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[06:20:27] *** Quits: Inline (~Inline@p200300cd473cee00b1553510cacfa527.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:34:53] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[06:35:42] *** Joins: CyberneticRev (~akshay@45-21-10-81.lightspeed.hstntx.sbcglobal.net)
[06:36:48] *** Joins: aeth (~aeth@user/aeth)
[06:53:06] <drakonis> semz: nvidia sure loves to charge people out of the ass for cards
[07:02:39] * hayley uploaded an image: (140KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/jtLftxjAmKqBxfLiUgYcRSoy/Screenshot_2022-04-04_12-28-06.png >
[07:02:52] <hayley> I sure love to have to write to the student union to see if springing a new assessment 14 hours before it is done is allowed.
[07:09:04] * hayley now organising a strike
[07:18:26] <kakuhen> speaking of school
[07:18:38] <kakuhen> i am once again attempting to take algorithms and there's a glaring typo in the homework that makes the problem impossible to solve
[07:18:48] <kakuhen> but if you know what the professor meant then it's easy to solve the question
[07:29:48] <hayley> The department got back to me, and indeed it's not allowed.
[07:42:35] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 240 seconds)
[07:46:11] *** Joins: semz_ (~semz@user/semz)
[07:48:46] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:02:39] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[08:03:59] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:21:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:39:47] <hayley> I have modded Minecraft running on my Pi server. So I propose people fart around in Minecraft, rather than showing up to the class when we're getting assessed.
[08:49:36] <GreaseMonkey> for modded minecraft, if you put together your own modpack instead of using a "literally everything we could throw at it" pack, you should be OK for RAM
[08:56:20] <hayley> I could, but then I'd have to get everyone else to install it.
[08:56:39] <hayley> This is running fine though. I figure the bloat is client-side, mostly.
[09:00:42] *** Quits: CyberneticRev (~akshay@45-21-10-81.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 260 seconds)
[09:06:06] *** semz_ is now known as semz
[09:15:24] <aeth> it's not modding if you have under 100 mods installed
[09:19:07] <ck_> how deep is the largest stack of "doom in assembly in ... in minecraft" ?
[09:19:39] *** Quits: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:47:17] <hayley> aeth: This counts 114 mods.
[10:33:20] <Aurora_v_kosmose> Been slowly looking at McClim. It has interesting ideas.
[10:33:45] <ck_> how are you approaching it?
[10:34:01] <Aurora_v_kosmose> Reading the intro text stuff.
[10:34:23] <ck_> I hope they're up to date, depending on how deep you want to go
[10:34:26] <ck_> have fun!
[11:08:51] <pl> https://usercontent.irccloud-cdn.com/file/sKPNDYPq/image.png Ukrainian TDF month after war is won (not sorry) 
[11:09:27] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[11:09:27] *** Quits: eschaton (eschaton@2600:3c01::f03c:91ff:fefd:5d92) (*.net *.split)
[11:09:27] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[11:09:27] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[11:09:27] *** Quits: Common-Lisp (~Common-Li@104-58-112-202.lightspeed.bcvloh.sbcglobal.net) (*.net *.split)
[11:09:27] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[11:09:27] *** Quits: sthalik (~sthalik@tunnel146824-pt.tunnel.tserv28.waw1.ipv6.he.net) (*.net *.split)
[11:09:39] *** Joins: sthalik (~sthalik@tunnel146824-pt.tunnel.tserv28.waw1.ipv6.he.net)
[11:09:39] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[11:11:09] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[11:11:11] <semz> > Hi libera users. We've got a bit of weekly maintenance to do. The servers lithium and molybdenum will be restarting shortly for software updates.
[11:11:18] <semz> Lisp could have prevented this
[11:12:12] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[11:12:39] *** Joins: eschaton (eschaton@2600:3c01::f03c:91ff:fefd:5d92)
[11:13:11] *** Quits: bosonbear (~user@2a05:f480:1800:663:5400:3ff:fee5:48ad) (*.net *.split)
[11:13:11] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[11:13:11] *** Quits: MetaYan (~MetaYan@c-1555235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[11:13:11] *** Quits: gilberth (~gilberth@p5492d317.dip0.t-ipconnect.de) (*.net *.split)
[11:13:12] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[11:13:51] *** Joins: remexre (~remexre@user/remexre)
[11:13:55] *** Joins: bosonbear (~user@2a05:f480:1800:663:5400:3ff:fee5:48ad)
[11:14:16] *** Joins: nckx (~nckx@tobias.gr)
[11:18:42] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[11:24:14] <White_Flame> semz: and erlang was literally designed to prevent that, too
[11:47:16] *** Joins: shka (~herr@109.231.3.55)
[11:56:49] <kakuhen> so is there libgen but for ISO documents
[11:56:58] <kakuhen> i want to see what the actual jpeg spec says about something i found
[11:57:08] <kakuhen> but I refuse to pay $200
[12:02:11] <kakuhen> oh turns out w3 just has an equivalent pdf out tehre for free
[12:02:19] <semz> usually the drafts (which only differ cosmetically afaik) are downloadable for free
[12:02:37] <contrapunctus> semz, White_Flame: one of the leading XMPP servers is written in Erlang - so perhaps XMPP could have prevented it too 🙃
[12:41:02] * hayley went to a startup program, would not recommend it
[12:41:32] <hayley> One of the innovations on their list was doing business in Antarctica in the 2060s. idk, sounds like shit's fucked if that's an option.
[12:44:25] *** Quits: micro (~micro@user/micro) (Ping timeout: 256 seconds)
[12:45:09] *** Quits: OlCe (~user@lfbn-nic-1-449-48.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[12:49:33] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[12:49:38] <rotateq> ohai!
[12:51:42] *** Joins: gilberth (~gilberth@p5492d317.dip0.t-ipconnect.de)
[12:51:42] *** ChanServ sets mode: +o gilberth
[12:54:47] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[12:54:56] <dave0> hiya gilberth 
[12:55:11] <rotateq> :(
[12:55:48] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 260 seconds)
[12:55:58] <dave0> hi rotateq 
[12:56:01] <gilberth> dave0: Hi there, do we have coffee?
[12:56:03] <moon-child> (rotateq rotateq gilberth)
[12:56:21] <dave0> gilberth: yup, it's on sale this week
[12:56:42] <dave0> 1 coffee and 2 donuts
[12:56:48] <gilberth> moon-child: Don't.
[12:58:16] <rotateq> hay dave0 :)
[12:58:31] <rotateq> moon-child: you got my intention on this name :D
[12:58:45] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:58:50] <moon-child> dave0: what kinda donuts?
[12:59:07] <rotateq> gilberth: surely you don't want to be me at all :/
[12:59:22] <dave0> moon-child: cinnamon
[12:59:48] <dave0> if you're not into donuts, there's rhubarb pie
[12:59:53] <dave0> best in the west
[13:01:15] <selwyn> i had croissants for breakfast
[13:02:19] <selwyn> hayley: did they specify what business one would do there
[13:02:29] * gilberth takes a ddonut.
[13:03:08] <gilberth> Actuafffly, I would preffffer a croissffant.
[13:05:31] <gilberth> dave0: I was bored last night and looked into a ByteByteJump machine. It is kind of fake as it needs lookup tables for what would be an ALU. And those tables are huge. I was wondering though if it boot those tables from much smaller tables. Like first implement a DJNZ emulator and use that to compute say the addition and subtraction tables.
[13:05:45] <shka> gilberth: GARLIC BREAD
[13:06:01] <hayley> selwyn: They didn't.
[13:06:17] <gilberth> shka: Garlic? Do you want to kill me?
[13:07:08] <ck_> what's a ddonut? distributed donut?
[13:07:13] <rotateq> gilberth: are you allergic?
[13:07:37] <hayley> Well, I realise I am not going to find ways to make money by not fucking things up, from people who think making money after fucking things up is a good idea.  
[13:08:31] <gilberth> ck_: A ddnout is a "Dave's Donut".
[13:08:46] <gilberth> lol. Misstyped again.
[13:08:47] <dave0> gilberth: those esoteric languages are interesting :-)
[13:09:07] <dave0> i set up a little trailer outside the lispcafe
[13:09:24] <rotateq> hayley: set 'quantum' before its name and people will buy. or another buzzwort like 'bitcoin'
[13:09:45] <hayley> rotateq: Let me tell you, then, that this is the building next to the "blockchain innovation hub".
[13:09:57] <gilberth> dave0: I still consider ByteByteJump kind of fake. My favorite is a "toggle and jump not zero" machine.
[13:11:06] <hayley> I'm not sure if I prefer that over the "autism research centre".
[13:11:19] <gilberth> Which can be seen as a special case of a DJNZ machine.
[13:11:29] <dave0> gilberth: yeah bytebytejump is pretty close to "mov is turing complete"
[13:11:59] <ck_> .. on the next episode, of DJNball Z
[13:12:01] <gilberth> dave0: Yes, but it can not compute on its own. It needs lookup tables.
[13:12:08] <rotateq> nice hayley 
[13:12:16] <moon-child> gilberth: is not looking up computation?
[13:12:22] <moon-child> and, it can build the lookup tables itself, surely
[13:13:46] <gilberth> moon-child: It can't really. I contemplated to emulate a DJNZ on a ByteMover, but to have that DJNZ, I need a lookup table for the decrement and zerop function.
[13:14:28] <moon-child> so, what's wrong with that?
[13:14:34] <gilberth> But, it's hard to draw a line between a (case x (0 ..) (1 ..) ..) and (aref table x).
[13:14:56] <moon-child> why?
[13:15:00] <gilberth> moon-child: I just don't like it.
[13:15:29] <moon-child> ok.  But there's nothing less computational about it than something else
[13:15:58] <hayley> Today was rubbish. The lecturer admitted to violating university policy on making new assignments, and this startup noise was horrid too.
[13:16:02] <moon-child> if you care to, you can just build 3 lookup tables: extract bit, set bit, nand
[13:16:18] <gilberth> Still, I believe there is a difference between looking up \pi and computing it.
[13:16:30] <gilberth> Begins with you can't do the former.
[13:17:06] <moon-child> well, you can't do the latter
[13:17:08] <moon-child> either
[13:17:25] <moon-child> but you can by repeated lookups construct increasingly close approximations.  Just the same as without lookups
[13:17:38] <gilberth> moon-child: Yes. You can boot a ByteByteJump by providing tables for emulating other OISC.
[13:17:38] <moon-child> if your cpu implemented add, sub, mul, etc. with lookup tables, would you say it's not computing?
[13:17:47] *** Joins: OlCe (~user@lfbn-nic-1-449-48.w90-116.abo.wanadoo.fr)
[13:18:20] <hayley> "So, this assignment isn't allowed by university policy. You can't just add new criteria like that." "It is allowed." "Have you cleared this with the dean? You didn't clear it with us." "I'm going to. That's not your problem." ???
[13:19:25] <gilberth> moon-child: Well, that is a philosophical question really. I mean I can build a computer from just NAND and wireing. (Actually I consider the wiring more important than the gates). Is a NAND gate also lookup?
[13:20:15] <moon-child> you can implement it as such.  So why do you care how it is implemented?
[13:20:31] <moon-child> table lookup is a valid implementation of any abstract function on finite bitstrings
[13:21:09] <gilberth> moon-child: Because. Because it feels like cheating. Like implementing a NAND gate with a mux.
[13:26:05] *** Joins: livoreno (~livoreno@user/notzmv)
[13:26:54] <gilberth> But then the usual way to implement a logic function by a disjunction of the conjunction of all the input combinations for which it should be true, is also a lookup table. Hmm.
[13:34:48] <rotateq> I learnt functions and data are very near to each other cause you can have lookup tables too.
[13:37:17] <gilberth> They are, but still there is a difference. You notice when I ask you to compute 27937*1652. You need to run some algorithm in your head. While when I ask you what 2*3 is, you probably just remember.
[13:37:56] <gilberth> And for \pi you need an algorithm, a table would not do.
[13:38:49] <moon-child> ok.  But in something like bytebytejump a program is not just a single massive table lookup
[13:38:51] <rotateq> hehe yes, one of those into us drilled lookup tables :) or drilled on infix calculations
[13:38:57] <moon-child> it composes multiple table lookups
[13:39:06] <moon-child> just as, when I calculate 27937*1652, I compose smaller multiplications like 2*3
[13:39:40] <gilberth> Yes, you compose. Right. And a say toggle-and-jump-not-zero machine composes more than a byte-byte-jump.
[13:41:43] <gilberth> It's just that a not gate (for toggle and zerop) is the most minimal "table" you can get.
[13:43:21] <gilberth> An addition table just lists numbers, while an algorithm to add two numbers says how to actually add. You can reason about the latter and generalize it to longer word length. You could only assume things about the former and guess.
[13:55:18] <rotateq> hayley: What would you say, would it be very hard writing a good CL->WASM compiler like your other favorite programming language comes built-in with?
[13:55:44] <moon-child> rotateq: clasp?
[13:55:47] <hayley> It would be very hard, because WASM is currently just a crappy C machine, sans longjmp (I think).
[13:56:10] <hayley> Which is not a problem for that other language, because it has no non-trivial control flow, nor GC.
[13:56:15] <rotateq> moon-child: ah it does?
[13:56:25] <moon-child> well, it targets llvm.  And llvm targets wasm
[13:56:26] <rotateq> hayley: sad
[13:56:30] <rotateq> ah right
[13:56:37] <moon-child> while there are surely missing pieces, the hard part is done
[13:56:44] <moon-child> all that remains is the annoying parts :)
[13:56:51] <rotateq> moon-child: so someone should buy me a machine on which I can compile CLASP :D
[14:02:42] <gilberth> WASM is an unsuitable target for any compilation because it has no tail calls. This is in particular bad because of the event-driven nature of the run-time. Suppose you want to implement something blocking like READ-CHAR. You could, if you had continuations, which is not feasible because there are no tail calls. You would eventually wind up with either a VM interpreter or consing each and every continuation to dispatch upon in a loop.
[14:04:17] <hayley> I also like how WASM can sort of be rendered into S-expressions, but then there is other noise like "align=4" being one atom. Yeah, sure, I somehow just have to READ that in. Not.
[14:04:41] <gilberth> Apart from the missing or misspelled GOTO. Anyhow, this asynchronous nature is a show stopper.
[14:04:47] <hayley> At least I can discard alignment info, in theory.
[14:04:54] <kakuhen> rotateq: adding clasp to macports sounds like a great way to haev a bad time for weeks
[14:05:00] <moon-child> wasm is asynch?
[14:05:07] <gilberth> hayley: Well, you need my token reader hook.
[14:05:27] <rotateq> kakuhen: :D
[14:05:28] <gilberth> moon-child: Event based, just like JS. You can't implement anything blocking.
[14:05:33] <hayley> gilberth: Well, I shouldn't have to. Give me keyword arguments, or an alist or something.
[14:05:39] <moon-child> gilberth: ...huh
[14:05:41] <moon-child> til
[14:05:47] <hayley> The point went over their heads, would they add random syntax to S-expressions like that.
[14:06:19] <selwyn> wouldn't be surprised if clasp is already on macports
[14:06:34] <selwyn> drmeister loves macs for some reason
[14:06:35] <gilberth> hayley: Well, just roll your own parser. Being mostly s-expression that should be painless.
[14:07:03] <hayley> The point is I shouldn't have to roll my own parser. It's annoying to do.
[14:07:42] <hayley> I did have to handle (; ;) block comments, but those were easy enough <https://github.com/no-defun-allowed/wasm2ps/blob/master/Code/reader.lisp>
[14:07:42] -ixelp- wasm2ps/reader.lisp at master · no-defun-allowed/wasm2ps · GitHub
[14:07:51] <gilberth> moon-child: I looked into emscripten. And all of stdio.h works on an in-memory file system. You need to ship the file contents with your binary. All fake.
[14:07:59] <moon-child> sure
[14:08:12] <moon-child> that seems a bit beside the point, though
[14:08:16] <moon-child> and I think there is 'webfs' now
[14:08:51] <gilberth> And? I bet you need to register callbacks. There is no escape I found.
[14:09:28] <moon-child> emscripten has sdl
[14:09:48] <moon-child> people ported ordinary games with their own game loops to it
[14:10:08] <moon-child> pretty sure they didn't change their loops to be cooperative with the browser loop
[14:10:14] <kakuhen> wasm to postscript...
[14:10:22] <gilberth> Which is a pity because you could otherwise compile Lisp to JS just fine. But you would expect a REPL. And all approaches I found were unbearable slow. You either cons closures all the time or you implement a VM right away.
[14:10:26] <kakuhen> wow now i can make preview convert wasm to PDFs
[14:11:26] <rotateq> kakuhen: I tried this cl-typesetting and had fun typing my own funny business card at the weekend. :D
[14:11:55] <rotateq> one default example had in the top "You can hire a million monkeys or you can hire me."
[14:11:56] <gilberth> moon-child: Read their page. There are some special hacks for event loops and they give a few hints how to convert your given loop into sth event based. The WASM runtime just can't block.
[14:12:11] <moon-child> hmmm
[14:12:23] *** Joins: lisp123 (~lisp123@143.238.171.43)
[14:13:26] <gilberth> And this is a pity. I believe both WASM and JS JITing can be and are fast. Yet, when you wind up needing to implement a VM, so that you can suspend your computation all this speed goes out the window.
[14:15:50] <gilberth> With JS, you can make some bets on the stack size. Implement CPS and let the call stack pile up a bit and then longjmp^Wthrow back to your toplevel loop. Still slow because of the continuations. And those closures aren't too fast.
[14:16:21] <gilberth> Actually I was more successful with a little byte code interpreter.
[14:17:54] <gilberth> To get some speed back, you would need to do a whole program analysis and figure out which functions can never block and then compile those without CPS. But once there is INTERN and FUNCALL, you can't. Or if you expect that code could be interrupted in general.
[14:18:31] <moon-child> inline everything!
[14:18:50] <gilberth> How do I inline FUNCALL?
[14:18:54] * hayley puts gilberth on the MTA
[14:19:22] <hayley> (case f (#.#'a ...) (#.#'b ...) (#.#'c ...))
[14:19:55] <gilberth> What shall I do sitting on the mail transfer agent?
[14:20:17] <gilberth> hayley: Yeah, and what if, f is SLEEP?
[14:21:12] <gilberth> Anyhow, it is depressing that you need to ponder at all, just because this runtime is crippled on purpose.
[14:23:24] <hayley> https://plover.com/~mjd/misc/hbaker-archive/CheneyMTA.html rather.
[14:23:24] -ixelp- Cheney on the M.T.A.
[14:23:42] <gilberth> And if you ask me the whole stack of HTTP/HTML/CSS/JS whatnot is an accident that happened.
[14:23:54] <moon-child> yep
[14:24:04] <rotateq> gilberth: Definitely.
[14:24:05] <selwyn> return to gopher
[14:24:08] <moon-child> https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript  always a good watch
[14:24:08] -ixelp- The Birth & Death of JavaScript
[14:24:32] <gilberth> hayley: I still need closures, and those are slow really slow with JS.
[14:24:44] <hayley> selwyn: you have posted terminal boredom, prepare to go on applied-langua.ge/posts/
[14:25:17] * moon-child sends hayley to the faa committee for memory corruption
[14:25:17] <gilberth> selwyn: Way to sophisticated. May I have ftp?
[14:27:02] <ck_> uucp
[14:27:38] <ck_> hmm, maybe the origin you can return to is actually a single machine
[14:27:46] <ck_> "I left the configuration for you on the plugboard"
[14:28:09] <gilberth> ck_: Yes, with ftp to mail gateways. Those were the days. Waiting for a day or so to have your file send to you in little pieces.
[14:29:00] * selwyn remembers downloading jdk 1.4.2 over dial-up
[14:29:47] <ck_> napster.exe
[14:29:57] <selwyn> many tens of megabytes!
[14:30:09] <ck_> did you schedule an afternoon to do that?
[14:30:26] <selwyn> well, i was 10
[14:30:47] <lisp123> selwyn: I remember those times too
[14:30:50] <lisp123> good times
[14:30:51] * gilberth got X11 over dial-up transfered with z-modem. Took a week or so.
[14:31:01] <ck_> yeah, so did you ask your parents not to use the phone for that time? is what I meant :)
[14:31:06] <selwyn> after my allotted computer time was up, i pleaded with $parent and we left the computer on for another 2 hours or so
[14:31:10] <selwyn> which was unheard of
[14:31:12] <selwyn> and it worked
[14:31:15] <ck_> :)
[14:31:21] <ck_> and then you were hooked
[14:31:22] <selwyn> after many failed attempts, too
[14:31:23] <ck_> many such cases
[14:31:48] <rotateq> nice and today the over spoiled people yell when they have no gigabit
[14:32:08] * gilberth had his own phone like by like age 14 or so.
[14:32:10] <dave0> yes but 8K video
[14:32:24] <gilberth> And an illegal 9600bps modem :-)
[14:32:25] <selwyn> well, sometimes i am unhappy about the slow internet i have now
[14:32:33] <selwyn> despite remembering the hard times
[14:32:44] <dave0> gilberth: how did you pay for the phone line!
[14:32:52] <dave0> paper route? :-)
[14:33:00] <gilberth> dave0: My parents did.
[14:33:25] <dave0> my parents would never do that for me :-p
[14:33:39] <rotateq> I had my first cell phone also with 14 for just calls, and it was a normal to fold (two halves).
[14:33:55] <rotateq> gilberth: not "Grauzone"? ;)
[14:34:37] <gilberth> dave0: Well, by age 16 I had my own money. Still, my parents paid.
[14:35:49] <gilberth> As well as the then prohibitive expensive XENIX license. I am still very grateful for that.
[14:36:19] <rotateq> okay I'm ~20 years or so younger than you but still
[14:37:08] <rotateq> and all when we were 17 or so had their big smartphones and i bought an iPad2 from my money and was allowed to use it in physics class as our teacher also liked me :D
[14:37:22] <gilberth> The funny thing about this illegal 9600bps modem was that it found other likewise illegal modems to connect to at 9600bps. So much for that. Nobody really cared.
[14:37:51] <selwyn> what was illegal about it
[14:38:24] <gilberth> selwyn: You were not allowed to connect it to the public telephone network because it had no official approval.
[14:38:29] <rotateq> gilberth: did you reference the "Datenklo" or something else?
[14:38:52] <gilberth> rotateq: Nope.
[14:39:01] * rotateq has to watch the newer CCC film about the beginning times and Wau Holland
[14:39:06] <rotateq> okay
[14:39:27] <gilberth> selwyn: At that time only modems up to 2400bps could get an approval at all.
[14:39:49] <selwyn> how interesting
[14:40:09] <gilberth> Well, the telephone network was state-owned.
[14:40:38] <selwyn> sometimes i am nostalgic about old technology
[14:40:54] <selwyn> dial-up is one of the only things i don't want to return to
[14:41:22] <selwyn> playing runescape on it was so, so painful
[14:42:03] <gilberth> And, ever telephone line needed a phone. Literally. We already were into elevator emergency phones, which would automatically dial and exchange data to then establish a voice connection into the car. Yet at the machine room where the phone line ended there needed to be a regular state-owned phone attached.
[14:42:20] <selwyn> lol
[14:43:16] <gilberth> Which led to problems as maintance personnel knew that and at times used that phone to make really expensive calls to someone across half the world.
[14:43:38] <selwyn> lol
[14:49:56] <shka> CL webframework?
[14:50:06] <shka> caveman still popular?
[14:50:43] <selwyn> i used something else iirc
[14:51:09] <selwyn> if caveman is still maintained, why not
[14:51:40] <selwyn> i would use radiance if i had to do it now
[14:51:40] <shka> https://github.com/fukamachi/caveman
[14:51:41] -ixelp- GitHub - fukamachi/caveman: Lightweight web application framework for Common Lisp.
[14:51:44] <rotateq> i tried playing around with parenscript some weeks ago
[14:51:44] <shka> gosh reader macros
[14:51:51] <rotateq> gooosh
[14:51:54] <shka> just why
[14:52:05] <selwyn> fukamachi really likes them
[14:53:11] <selwyn> https://github.com/Shirakumo/radiance
[14:53:11] -ixelp- GitHub - Shirakumo/radiance: A Common Lisp web application environment
[14:53:46] <shka> oh, i was using radiance before
[14:53:49] <shka> it was kinda cool
[14:55:41] <rotateq> the teacher now said all shall forget at JS what they learnt about OO models from C# and friends. i have CLOS in my head so no problem :)
[14:56:00] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 272 seconds)
[14:56:01] <rotateq> he did much C and FORTRAN in earlier days he told me
[14:56:02] <selwyn> til the bank of england has most of europe's gold
[14:56:06] <selwyn> euros taking ls
[14:56:12] <rotateq> selwyn: oh hm
[15:00:03] <rotateq> hayley: I said when he asked "Ah, the class-centered OOP variant?" "Yes, the one with classes." :D
[15:03:06] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:06:43] *** Joins: notzmv (~zmv@user/notzmv)
[15:07:06] <rotateq> okay, the first "question" was my response and the other his on that
[15:16:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[15:16:19] <hayley> Kinda funny that my router has a preset for port forwarding GNUtella.
[15:30:49] *** Joins: [deleted] (~livoreno@user/notzmv)
[15:31:02] <selwyn> whats the consensus on multiline doc strings
[15:31:29] <selwyn> seem useful but i don't really know how to indent them
[15:32:10] <hayley> If you don't start a line at column 1, it'll be indented. You can do some tricks with #.(format nil ...) to get a properly indented string, but it doesn't bother me enough.
[15:33:53] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 248 seconds)
[15:34:16] <shka> selwyn: there is no consensus 
[15:34:41] <shka> my solution: i wrote library with macros that will format docstrings xD
[15:38:23] <selwyn> whats wrong with reader macros
[15:39:27] <moon-child> structural editor can trivially display docstrings however is most convenient, without extraneous spaces or newlines
[15:39:29] <moon-child> just sayin...
[15:39:47] <moon-child> (I mean, textual editor can do it too, but)
[15:46:53] *** Joins: lisp123 (~lisp123@143.238.171.43)
[15:47:59] <selwyn> hm
[15:48:16] <selwyn> is there any good unicode search
[15:48:45] <moon-child> shapecatcher?
[15:49:34] <selwyn> thanks!
[15:52:37] <shka> selwyn: reader macros are invasive 
[15:55:44] <gilberth> I tend to indent doc strings so that they look nice in my editor. After all, I read doc strings in the editor only.
[15:56:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:00:58] <gilberth> To not indent them would be somewhat bearable with DEFUN, but not with documentation strings on slots e.g.
[16:02:37] <ck_> don't people use (format nil ..) with tilde-newline or what it was, to have it both ways?
[16:03:38] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 260 seconds)
[16:05:13] *** Joins: livoreno (~livoreno@user/notzmv)
[16:11:58] <gilberth> ck_: I don't like the clutter. And as I said, I read doc strings in the editor only. Besides why not put this into whatever displays the doc strings? And: m-q does not know about <tilde><newline>. What's next? ~@<...~@:>. That would at least make some sense :-)
[16:13:17] <ck_> yeah, I was just wondering. I seem to remember a lot of that type of comment
[16:17:44] *** Joins: jeko (~user@user/jeko)
[16:23:29] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 248 seconds)
[16:27:08] <gilberth> Actually, I believe doc strings on slots are more useful to be used programmatically. Namely with an inspector. Also because unlike with functions there is no easy m-. for slots.
[16:29:57] <selwyn> hm
[16:30:04] <selwyn> yeah, i suppose i don't use quickdocs that much
[16:44:27] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[16:46:01] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:47:16] <selwyn> gnuxie: https://twitter.com/hepcatsector/status/1510900668961521668
[16:47:28] <selwyn> canon that wizards got involved in the falklands war
[16:48:22] <shka> it is like child version of world of darkness
[16:48:59] <Gnuxie> but she then says Wizards wanted to start WW3? 
[16:59:42] <selwyn> gnuxie: trying to figure that one out
[17:00:43] <selwyn> wtf
[17:00:56] *** Joins: micro (~micro@user/micro)
[17:01:35] <Gnuxie> lol
[17:01:53] <selwyn> well, they fucked that one up
[17:08:21] <moon-child> kakuhen: perhaps of interest  https://fgiesen.wordpress.com/2018/02/19/reading-bits-in-far-too-many-ways-part-1/ (and pts. 2&3)
[17:08:22] -ixelp- Reading bits in far too many ways (part 1) | The ryg blog
[17:10:54] *** Joins: notzmv (~zmv@user/notzmv)
[17:36:01] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:54:13] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[18:27:03] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:27:42] *** Joins: treflip (~user@user/treflip)
[18:55:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[19:09:46] *** Joins: admich (~user@ip-156-96.sn-213-198.clouditalia.com)
[19:18:55] <selwyn> sigh
[19:19:48] <gilberth> hmm?
[19:21:18] <selwyn> what's the idiomatic way to delete elements of a list while you loop over it
[19:21:44] <gilberth> DELETE-IF?
[19:21:50] <gilberth> scnr
[19:21:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[19:22:00] *** Joins: Inline (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[19:22:37] <selwyn> it might not have the desired side effect on the input
[19:22:45] <selwyn> and would interfere with the looping
[19:23:44] <moon-child> (pop (cdr list))?
[19:24:05] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:24:26] <selwyn> i figured out a way that is not too ugly
[19:34:20] <shka> i had a function for that
[19:34:46] <gilberth> Anyhow, why not just use DELETE?
[19:36:26] <shka> gilberth: because of "while iterating" bit
[19:36:37] <shka> if you want to transform some, and then delete some
[19:36:42] <gilberth> DELETE iterates just fine.
[19:37:44] <selwyn> almost done with this simulator
[19:37:50] <selwyn> pathfinding is a pita
[19:55:52] <sm2n> https://vmchale.github.io/jacinda/ APL meets AWK apparently (using rust regex in haskell ;))
[19:55:52] -ixelp- Jacinda - Functional Stream Processing Language
[20:03:38] <moon-child> 'apl stream processing'  https://github.com/ktye/iv
[20:03:38] -ixelp- GitHub - ktye/iv: APL interpreter and stream processor
[20:04:07] <moon-child> oh cool that's from vanessa mchale
[20:04:12] <moon-child> she also did some stuff with j and ats
[20:09:28] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:13:43] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[20:22:50] <shka> https://www.youtube.com/watch?v=JvgF83OHV9c that's kinda cool
[20:22:50] -ixelp- Nuclear reactor startup (with sound) - YouTube
[20:23:10] <selwyn> it's harder on my hands to type java than lisp
[20:23:19] <shka> yeah
[20:23:48] <shka> kebab case does not require shift 
[20:23:51] <shka> clearly better 
[20:24:44] <moon-child> ()
[20:24:47] <ck_> also you don't need to repeat yourself as much
[20:24:59] <ck_> Parenthesis parenthesis = new Parenthesis();
[20:25:22] <shka> i have () under c and v keys, with layer 1 
[20:25:29] <shka> useful 
[20:26:38] <shka> programmable keyboards are good for this kind of stuff
[20:26:43] <ck_> alien keyboards don't sway the average as much
[20:27:01] <selwyn> huh, i thought enum constants were meant to be all caps
[20:27:27] <ck_> ah, trivia time
[20:27:39] <ck_> do you want to answer my favourite java question in this category?
[20:27:52] <selwyn> > Results indicate that camel casing leads to higher accuracy among all subjects regardless of training
[20:27:59] <White_Flame> ck_: no
[20:28:13] <selwyn> results indicate lispers are taking ls
[20:28:19] <selwyn> ck: yes
[20:28:20] <ck_> White_Flame: no-ted :/
[20:28:45] <White_Flame> Welcome to my no-TEDx talk
[20:29:01] <ck_> selwyn: as you know, all float to integer casts are required, specified, to work without signalling any condition or throwing exceptions. The question is: what happens when you cast NaN into an int?
[20:29:14] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:29:21] <selwyn> hm
[20:29:22] <moon-child> :<
[20:29:23] <moon-child> ck_ pls
[20:29:34] <White_Flame> how do you get a NaN in java?
[20:29:42] <selwyn> well, i didn't know that, so this question is off to a great start
[20:30:12] <selwyn> well, its undefined behaviour?
[20:30:23] <ck_> no :) the behaviour is defined
[20:30:32] <ck_> White_Flame: you can, for example, take a float value modulo zero
[20:30:45] <moon-child> in j, x mod 0 is x
[20:30:56] <selwyn> it takes the bit representation of the nan
[20:31:19] <ck_> strike two, no to that as well
[20:31:54] <ck_> there are 2^23-1 single-float NaNs after all, that's too many int NaNs.
[20:32:20] <moon-child> all nans are valid and unique
[20:32:26] <moon-child> after all, nan != nan
[20:32:41] <ck_> even themselves. how mystifying
[20:33:30] <White_Flame> the self-inequality is ieee standard, not java specific
[20:34:39] <ck_> yes, of course
[20:35:54] <selwyn> i thought maybe you could throw away the high bits
[20:36:01] <selwyn> well, i am out of guesses
[20:36:07] <ck_> would you like the answer
[20:36:13] <selwyn> new NaN.asInt()?
[20:36:26] <ck_> I think the syntax is (int) NaN, like C
[20:36:50] *** Joins: Catie (~user@user/catie)
[20:39:50] <ck_> https://pastebin.com/sn3uDqnm
[20:39:50] -ixelp- Omae Wa Mou Shindeiru -- NaN-int ?!? - Pastebin.com
[20:59:02] <selwyn> finally finished the simulator
[21:05:57] <ck_> oh my god, it wasn't an april fool's joke. Ron Gilbert is making another Monkey Island
[21:06:00] <ck_> "neat"
[21:12:19] <ck_> selwyn: "screenshot of an incomprehensible sea of floats or it didn't happen"
[21:13:27] <selwyn> yes much excitement over monkey island. never played it myself
[21:19:28] <drakonis> yes....
[21:19:30] <drakonis> https://twitter.com/devolverdigital/status/1510995585138147333
[21:20:13] <ck_> I'm a little put off by the animation, unfortunately
[21:20:52] * selwyn considers q learning
[21:21:14] <ck_> qeep learning? quick learning? sesame street The Letter Q learning?
[21:21:41] <selwyn> q anon learning
[21:21:49] <ck_> I trust this plan
[21:22:04] <ck_> (because you are considering it)
[21:24:27] <selwyn> not being turn based makes everything harder
[21:24:29] <selwyn> and interesting
[21:25:31] <ck_> [Diablo Post-Mortem Commentary Video Quote Here]
[21:27:21] <ck_> https://www.youtube.com/watch?v=Mlrrc_vy79E#t=25m27s
[21:27:22] -ixelp- Diablo: Original Game Development - YouTube
[21:28:07] *** Quits: SR-71 (~user@user/SR-71) (Ping timeout: 260 seconds)
[21:28:16] *** Joins: SR-71 (~user@user/SR-71)
[21:37:16] *** Joins: Oddity (~Oddity@user/oddity)
[21:49:34] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 272 seconds)
[22:00:00] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:00:12] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[22:03:59] <ck_> by the way, I think this friday is SIGBOVIK day
[22:04:18] <moon-child> ooh nice
[22:04:28] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[22:08:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:09:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:21:32] <gilberth> Who is Bovik? Or what?
[22:21:53] <moon-child> sigbovik is a conference
[22:22:22] <moon-child> e.g. http://sigbovik.org/2016/proceedings.pdf 2016 proceedings
[22:23:03] *** Joins: Oddity (~Oddity@user/oddity)
[22:24:22] <gilberth> Still, who is that Harry then?
[22:24:38] <selwyn> i think it's a bit
[22:25:05] <gilberth> Just a bit?
[22:25:34] <selwyn> a bit = a joke
[22:25:36] <moon-child> 'a bit' as in 'a comedy bit'
[22:26:24] <gilberth> I didn't know that meaning of "bit". Never heard that.
[22:27:09] <gilberth> Which is great! At least I learned something today. A day you don't learn anything is a lost day.
[22:27:52] <ck_> what did you learn yesterday?
[22:27:58] <moon-child> aren't there other ways of creating value than learaning?
[22:28:26] <ck_> of course, child
[22:28:45] <ck_> that's what god came from down from the heavens to give us non-fungible tokens for
[22:29:01] <ck_> you can also leverage some things, I read it in manager magazine
[22:29:06] <selwyn> i read a copyright notice today that expressedly forbade making a nft of the work
[22:29:18] <gilberth> ck_: Yesterday? I learned about the ByteByteJump machine.
[22:29:36] <ck_> gilberth: neat. do you keep a log or diary about these things?
[22:29:50] <gilberth> And I learned that dual port SRAMs aren't that much fake as I believed. Or was that the night before yesterday?
[22:29:58] <selwyn> no escape from goddamn camel case
[22:30:04] <gilberth> ck_: I don't.
[22:33:22] <ck_> selwyn: glasses-mode?
[22:33:55] <selwyn> its not a problem
[22:34:08] <selwyn> was only referring to gilberth's bytebytejump machine
[22:35:09] <selwyn> i wonder how abcl deals with java exceptions and stack unwinding, since exceptions are a huge issue in clasp
[22:35:25] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:35:36] <selwyn> c++ exceptions are not standardised right? while java ones are
[22:35:45] <moon-child> what do you mean by standardised?
[22:36:06] <ck_> "it means that in C++, it's std::exception"
[22:36:10] <ck_> sorry4badjoke
[22:36:12] <selwyn> there are itanium exceptions as well as windows ones iirc
[22:36:20] <moon-child> oh the abi
[22:36:22] <moon-child> sure
[22:36:35] <moon-child> but the language semantics are all the same.  And presumably you're not messing with abi stuff in java anyway
[22:37:00] <selwyn> well, the exception abi is of relevance in clasp
[22:37:03] <selwyn> hm
[22:37:24] <moon-child> jvm doesn't _have_ a standard abi
[22:37:35] <selwyn> oh ok
[22:37:42] <moon-child> I mean
[22:37:52] <moon-child> the language doesn't allow you to express anything that would expose abi details
[22:37:57] <moon-child> (modulo sun.misc.unsafe, but)
[22:39:14] <selwyn> wouldn't abcl need to assume things about the abi?
[22:39:29] <moon-child> like what?
[22:40:52] <selwyn> idk
[22:43:24] *** Quits: admich (~user@ip-156-96.sn-213-198.clouditalia.com) (Ping timeout: 272 seconds)
[22:45:24] <gilberth> Does Java allow for &rest arguments?
[22:45:43] <selwyn> yes
[22:45:57] <gilberth> ok, then ABCL doesn't need to know. :)
[22:46:28] <selwyn> since 1.5.0
[22:46:31] * selwyn remembers
[22:46:35] <moon-child> it looks like the way abcl does it is to have an overload that takes an array of args
[22:47:02] <gilberth> selwyn: You remember? Are you an ex-Java-hacker?
[22:47:14] <selwyn> it was my first real programming language
[22:48:01] <gilberth> Oh dear. Not only a fake physicist, but also a fake Lisp hacker. /me shakes head.
[22:48:12] <moon-child> lol
[22:48:21] <selwyn> well, i suppose i hacked basic when i was younger than that
[22:48:23] <moon-child> 'we managed to drag them about halfway to lisp'
[22:48:33] <sham1> It certainly worked
[22:48:45] <selwyn> problem is that i have been dragged halfway back
[22:49:13] <gilberth> Actually BASIC was my first language. Lisp was my second. Pascal my third. And C my fourth.
[22:49:15] <moon-child> selwyn: oh dear.  Djikstra would not be happy
[22:49:33] <sham1> I'm also somewhat similar that I really started off with Java. Although my starting point was more of the Java 1.6 vintage
[22:49:47] <sham1> So generics, hurray
[22:49:50] <moon-child> I started with python
[22:49:57] <selwyn> i somewhat regret not knowing about lisp at that age
[22:50:04] <moon-child> well, technically shell, but I did not do anything useful with it
[22:50:21] <selwyn> but there were very few guiding influences to get into cool stuff
[22:50:41] <gilberth> selwyn: Yes, I see that. I was lucky being exposed to Lisp that early.
[22:50:57] <moon-child> I grew up in a unix household
[22:51:00] <moon-child> took some time to shake the influence!
[22:51:45] <gilberth> Well, guess that is better than CP/M and its clone MS-DOS.
[22:51:46] <selwyn> 'in this house we believe'
[22:51:48] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:52:47] <sham1> I'd certainly think most people would rather take Unix than CP/M and DOS. Including Microsoft's DOS engineers IIRC
[22:53:41] <gilberth> Heh, I even own a CP/M-68k machine with Lisp and Reduce on it. At least I hope it's still readable. The PSU died and I don't think the harddisk heads are parked :-(
[22:54:31] <gilberth> Nah, this 68k box was better than the IBM-XT. Begins with the available RAM.
[22:55:19] <Lycurgus> so you are old if you got it new
[22:55:57] <Lycurgus> not much CP/M after 1989
[22:56:18] <gilberth> sham1: The DOS sources are funny to read. See, MS-DOS 2.0 actually went with the UNIX open(2), read(2), write(2), close(2), and ioctl(2) API. You read comments in the source which indicate that they rather would like to have a UNIX.
[22:56:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:56:36] <sham1> Well IBM PCs were quite expensive from what I've understood. IN some ways they were the Macs of their time, which is ironic considering that Macintoshes were already a thing
[22:57:01] <Lycurgus> early personal computers were relatively expensive
[22:57:04] <gilberth> IBM PCs never were as sexy as Macs.
[22:57:19] <Lycurgus> my first hard drive was like $5K (corvus)
[22:57:34] <Lycurgus> in the mid 80s money
[22:57:44] <sham1> IBM PCs may not be as sexy as Macs, but did Apple have the Charlie Chaplin lookalike? No? Well then that seals the deal then
[22:58:57] <gilberth> What I always find funny is that the DOS/Windows world took a decade to take advantage of the 80386.
[22:59:16] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:59:26] <gilberth> Like a damn flat address space with paging.
[22:59:50] <Lycurgus> i started working in IBM on OS/2 about a month before it was announced
[22:59:58] <Lycurgus> until then I thought that too
[23:00:29] <Lycurgus> it was announced April 1, 1987
[23:01:07] <gilberth> OS/2 never was wide spread, was it?
[23:01:09] <Lycurgus> at which point it had been in dev at MS and IBM for a couple years
[23:01:27] <Lycurgus> yes it was, but only in business
[23:01:49] <gilberth> I don't remember when I got my XENIX. But it must have been around that time. Perhaps a year later or so.
[23:01:52] <Lycurgus> it never made any impact whatsoever in the actual personal computer market
[23:02:06] <Lycurgus> i.e. that people have in their homes
[23:02:37] <Lycurgus> there are still os/2 systems in service
[23:02:55] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[23:03:05] <Lycurgus> standard platform persistence
[23:03:44] <Lycurgus> and ibm released it to fandom like mvs 2.6
[23:03:49] <Lycurgus> *3.6
[23:04:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[23:05:53] <Lycurgus> *3.8
[23:06:10] *** Joins: aeth (~aeth@user/aeth)
[23:07:06] <Lycurgus> the ps/2 was fairly successful but not the os built for it
[23:07:28] <Lycurgus> ibm stopped trying to bundle them immediately
[23:07:57] <Lycurgus> (in consumer markets)
[23:09:01] <Lycurgus> although ofc it didn succeed in suppressing the clone market
[23:09:05] <gilberth> Wasn't it like MS pulled out of OS/2 and rather went to implement Windows NT?
[23:09:11] <Lycurgus> which was a biz objective
[23:09:34] <Lycurgus> yes the JDA collapsed in 1990
[23:09:50] <Lycurgus> and the both seperately developed OS/2
[23:10:17] <Lycurgus> sql server for example only ran on MS OS/2 in the time right after it was ported from sybase
[23:10:52] <Lycurgus> NT had the base OS/2 subsystems in it until well into this century
[23:12:14] <Lycurgus> they dropped it around windows 7 iirc
[23:23:54] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[23:34:53] <contrapunctus> Hm, I could have sworn I'd seen the name "dlowe" somewhere on IRC...
[23:35:20] <contrapunctus> (The author and/or maintainer of local-time.)
[23:35:36] <semz> He posts in #commonlisp sometimes
[23:35:49] <contrapunctus> I see 🤔️
[23:37:39] <edgar-rft> he also started #clschool, but I can see him nowhere online right now
[23:42:58] *** Joins: jeko (~user@user/jeko)
[23:49:11] <gilberth> How clever are linkers? Suppose I have a fragment which says "Align me on a 256 byte boundary" and other which don't care, would small fragments without an alignment be stuffed into the possibly large alignment of the former, if they fit?
[23:51:04] <moon-child> depends on the linker, I presume
[23:51:12] <moon-child> there are known algorithms for binpacking
[23:51:47] <gilberth> You say that is an instance of binpacking? Perhaps. Oh dear!
[23:52:17] <moon-child> I think so.  I'm not sure if it's quite binpacking but it's certainly related
[23:53:47] <gilberth> Well, I would do sth simple: Place the fragments with the largest alignment first in the hope that I could stuff other things into the unused space. /me shrugs.
[23:54:50] <moon-child> the issue, I guess, is that you align the start, but you have no restrictions on length
[23:55:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:55:38] <gilberth> What do you mean? When I link the length is known.
[23:56:06] <moon-child> I just mean, you might not get optimal results that way
[23:56:16] <mfiano> I now have automated graph conversions and unit testing. Summary^JPassed: 5146 Failed: 0 Skipped: 0 
[23:56:39] <gilberth> moon-child: Sure. Do I need the optimal result?
[23:57:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:57:44] <moon-child> well, is the naive result that just naively spurts out all the sections in order not good enough? :P
[23:58:36] <mfiano> contrapunctus: He's very active on the Fediverse where I saw him not too long ago give up on the Lisp community or something along those lines.
[23:58:41] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[23:58:42] <edgar-rft> contrapunctus: the email address is "dlowe [at] dlowe.net" if that helps
[23:58:47] <gilberth> Anyhow, this just occurred to me. With the 8080 you want some things like a buffer aligned on a 256-byte boundary, because computing with a pointer into it would just affect the lower 8-bit of the address. But otherwise, you really don't care about alignment at all. Heh, there even is no benefit in keeping jump targets near the JMP to it.
[23:59:37] <gilberth> moon-child: No. I remember shuffling around to save space.
