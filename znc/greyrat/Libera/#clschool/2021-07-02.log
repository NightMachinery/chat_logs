[00:26:44] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[01:05:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:28:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[01:44:29] *** Quits: dlowe (~dlowe@user/dlowe) (Ping timeout: 256 seconds)
[01:52:38] *** Joins: selwyn (~selwyn@user/selwyn)
[02:58:18] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:49:10] *** Joins: pjb (~pjb@user/pjb)
[03:58:29] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:01:37] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:05:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[04:12:20] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 268 seconds)
[04:25:24] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:28:44] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[04:36:57] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:40:09] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[05:11:45] *** Quits: seok (~Seok@49.2.163.56) (Ping timeout: 265 seconds)
[05:22:05] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 256 seconds)
[05:29:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[05:43:37] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[05:47:54] *** Joins: seok (~Seok@49.2.163.56)
[06:12:28] *** Joins: Harag (~user@105.243.9.173)
[06:12:34] <Harag> Morning
[06:14:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[06:31:44] *** Joins: beegs (~beegs@2600:8805:d50c:4200::3a89)
[06:34:12] <beegs> Hello, does anybody know how to set the cursor using format? is it possible? I'm trying to print a line to standard output then move the cursor back to the beginning of the same line and print another message
[06:38:17] <beegs> maybe format is the wrong function? 
[06:58:18] *** Joins: pjb (~pjb@user/pjb)
[07:23:04] <Harag> Morning pjb
[07:23:59] *** Quits: sts-q (~sts-q@212.53.219.216) (Ping timeout: 258 seconds)
[07:24:32] <Harag> beegs: sorry not sure what you are trying to do
[07:30:49] <beegs> Hello Harag, I'm trying to do the equivalent lisp equivalent of C's printf("some message \r"). using the (format t "some message ~C" #\return) doesn't seem to work, not sure if there is something else i can do 
[07:31:08] <beegs> Hello Harag, I'm trying to do the lisp equivalent of C's printf("some message \r"). using the (format t "some message ~C" #\return) doesn't seem to work, not sure if there is something else i can do 
[07:31:40] <Harag> (format t "some message ~%")
[07:31:54] <beegs> i dont want a new line
[07:32:11] <beegs> i want the cursor to return to inital position
[07:32:36] <Harag> initial position of what? *standard-output*?
[07:32:45] *** Joins: sts-q (~sts-q@91.200.108.156)
[07:32:45] <Harag> its a stream
[07:32:56] <beegs> i guess that's the issue,
[07:33:21] <beegs> im thinking in terms of printing in a terminal
[07:34:09] <Harag> what are you trying to achieve in the end, and why would you want to go back on what you already printed
[07:35:05] <beach> Good morning everyone! 
[07:35:05] <beegs> i want to print a matrix, update the contents and reprint in the same place
[07:35:35] <beegs> or rather a simple 2d array
[07:35:37] <Harag> place being what?
[07:35:58] <beegs> right, i'd be printing to standard output
[07:37:47] <beach> (format <stream> "string ~c" #\Return)
[07:37:53] <Harag> beegs: are you trying to run this in repl or have you got a dedicate output "screen/widget/whatever"
[07:38:52] <beegs> trying to run in it in a terminal, i just assumed there'd be issues with slime and the repl trying to do this
[07:40:00] <beach> You can try it like this: Start an SBCL from the terminal.  Then type (progm (format t "hello~c" #\Return) (format t "bonjour"))
[07:40:56] <beegs> let me give it a go
[07:41:02] <Harag> Morning beach 
[07:43:31] <Harag> progn maybe instead of progm
[07:44:05] <beach> Oops. 
[07:44:15] <beach> Didn't finish my coffee yet.
[07:44:37] <beegs> bingo! maybe i forgot to complile the file before and that's why it wasn't working for me. Thank Harag and thank you beach!
[07:44:54] <beach> Sure.
[07:45:05] <beach> Works for me at the REPL.
[07:45:15] <beegs> let me try that too
[07:45:46] <beach> Outside any SLIME/SLY/VLIME/SLIMV 
[07:46:03] <beegs> oh gotcha
[07:46:11] <beach> Who knows what they do to the output.
[07:49:41] <Harag> works with sly
[07:50:11] <Harag> nope
[07:50:15] <Harag> it does not sorry
[07:50:56] <Harag> end up with hello
[07:50:56] <Harag> bonjour
[07:51:10] <beegs> slime gave me hello
[07:51:12] <beegs> bonjour!
[07:51:35] <Harag> sbcl started in terminal worked for me
[07:51:44] <beegs> yeah same
[07:51:53] <beegs> cool, thanks again
[07:52:11] <beach> Pleasure.
[08:34:23] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:36:43] *** Quits: beegs (~beegs@2600:8805:d50c:4200::3a89) (Quit: WeeChat 3.0.1)
[08:37:39] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[09:04:52] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[09:06:14] <st_iron> good morning
[09:06:54] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:10:31] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[09:14:42] <beach> Hello st_iron.
[09:25:45] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[09:28:56] *** Joins: derelict (~derelict@user/derelict)
[09:37:54] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[10:16:47] *** Joins: fef (~thedawn@user/thedawn)
[10:26:23] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 256 seconds)
[11:32:55] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:36:04] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[11:42:07] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[11:43:42] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[12:27:10] <rdrg109> good moorning
[12:27:28] <beach> Hello rdrg109.
[12:36:39] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[13:18:56] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:22:01] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[14:08:49] *** Joins: selwyn (~selwyn@user/selwyn)
[14:58:25] <rdrg109> [Q][newbie] Just as C++ has a built-in library for some data structures (vector, list, map, queue, etc.). Does the same happen with Common Lisp?
[15:02:21] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[15:32:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:34:34] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[15:37:49] *** Joins: random-nick (~random-ni@87.116.179.41)
[15:40:09] <Harag> rdrg109: from your list only vector and list
[15:41:39] <Harag> if you mean build in as in cl standard
[15:42:36] <Harag> https://lispcookbook.github.io/cl-cookbook/data-structures.html
[15:47:28] <mfiano> rdrg109: A C++ unordered map is a CL hash table. a std::map though must be implemented yourself or with some binary tree implementation library
[15:52:16] <mfiano> and C++'s unordered_set would just be a list in CL (and using a handful of set-theoretic functions defined in the standard)
[15:56:32] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:57:20] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:58:27] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[16:22:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 256 seconds)
[16:35:57] <rdrg109> Thanks for the information!
[16:36:05] <rdrg109> [Q] I'm writing some data structures in Common Lisp for learning purposes. I've defined a method called "push" for inserting new items to those data structures and this is causing the following error: . This is my code: http://0x0.st/-fbU.lisp and this is the error I'm getting: http://0x0.st/-fb0.log What alternatives do I have for getting rid of that error?
[16:37:53] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:45:25] <rdrg109> For those who don't like opening links, this is the error: Lock on package COMMON-LISP violated when proclaiming PUSH as a function while in package DS.
[16:47:39] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[16:51:11] <beach> rdrg109: You should always define your own package, and if you need to, use SHADOW to avoid importing some symbols.
[16:51:55] <beach> So in this case, use the SHADOW option for DEFPACKAGE when you define your own package. 
[16:53:41] <beach> (defpackage #:ds (:use #:common-lisp) (:shadow #:push) (:export #:push #:is-empty...))
[16:55:51] <beach> rdrg109: IS-EMPTY is better named EMPTYP to fit into existing conventions.
[16:56:09] <rdrg109> beach: Thanks, it worked
[16:56:14] <rdrg109> Will take that under consideration
[16:56:33] <rdrg109> What's the difference between using (:use #:cl) and (:use #:common-lisp)?
[16:56:53] <beach> None, CL is a nickname of the COMMON-LISP package.
[16:57:07] <rdrg109> What's the difference between using (:export #:push) and (:export :push)?
[16:57:10] <beach> I also advise you to use explicit DEFGENERIC forms. 
[16:57:41] <beach> OK, here we go again [this is something I often repeat]...
[16:58:16] <beach> There is a very general rule in programming, that you should use the most specific construct that will work in a particular context, so as to give the person reading your code as much information as possible.
[16:59:38] <beach> In this case, the additional information you give when you use an uninterned symboll like #:push is that this occurrence does not use the package of the symbol in any way whatsoever, because #:push has no package, whereas :push has the package KEYWORD.
[17:00:06] <beach> So if you write :push, your reader (the person, not READ) might wonder in what way you require the package of that symbol to be the KEYWORD package.
[17:01:01] <beach> I mean, imagine you wrote (:export sb-ext::push) instead.  That would look funny wouldn't it?
[17:01:45] <beach> rdrg109: But maybe you have programmed before, so you already know this rule.
[17:01:50] <mfiano> rdrg109: In some contexts, only the name matters, and you could just as well use a string denoting the SYMBOL-NAME. I tend to use an uninterned symbol for reasons outlined above, and also that it is syntax highlighted differently than keyword-interned symbols, which helps me distinguish between keys and values
[17:02:56] <beach> mfiano: Good point.  Another reason is that using a string looks ugly because of the upper-case that clashes with the way the name is later used.
[17:08:41] <rdrg109> I've programed before in multiple languages but Common Lisp feels so different. I understood the general rule you mentioned though. By the way, The Commmon Lisp Cookbook doesn't introduce the concept of #: do any of you know a guide for beginners that would explain that concept?
[17:14:11] <mfiano> There aren't many "guides" for Common Lisp. These are things you pick up after reading the HyperSpec (standard) and reading other peoples' code.
[17:15:49] <mfiano> I would suggest reading Practical Common Lisp to get familiar with the basics, and research anything unfamiliar in the HyperSpec along the way and afterwards.
[17:15:50] <rdrg109> Thanks. I guess I will start visiting some repositories
[17:15:57] <beach> rdrg109: #: hardly deserves the name "concept".  It is just a reader macro that makes the reader return an uninterned symbol.
[17:17:05] <beach> rdrg109: Try (symbol-package '#:hello) and (symbol-package ':hello)
[17:17:20] <mfiano> rdrg109: You may be in for some pain trying to read other peoples' code before knowing the language basics.
[17:18:00] <mfiano> This is because Common Lisp has many ways to do the same thing, and macros allow us to change the language, so each person's code may appear similar yet functionally very different.
[17:18:23] <mfiano> Read PCL first. You will save yourself some trouble.
[17:18:24] <beach> ... and vice versa. :)
[17:20:04] <rdrg109> Noted. Thanks for the help, I really appreciate it
[17:20:24] <beach> Pleasure. 
[17:20:30] <mfiano> Sadly one thing you won't get from any current book, is the fact you must use Emacs with the proper packages installed to get anything out of the language.
[17:21:00] <mfiano> Sure you can use other environments, but they are a dim shadow in comparison.
[17:21:20] *** Joins: selwyn (~selwyn@user/selwyn)
[17:21:29] <rdrg109> I'm currently using Slime, and I'm planning to use Lispy
[17:21:38] <mfiano> Good (on the SLIME part)
[17:27:05] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[17:27:29] *** Joins: selwyn (~selwyn@user/selwyn)
[17:27:58] *** Joins: selwyn_ (~selwyn@user/selwyn)
[17:28:18] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[18:08:42] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[18:14:34] *** Joins: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de)
[18:45:04] *** Quits: Harag (~user@105.243.9.173) (Remote host closed the connection)
[18:47:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[19:00:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[19:00:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[19:21:03] *** Joins: derelict (~derelict@user/derelict)
[19:29:00] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:40:33] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:41:10] *** Joins: thrig (~thrig@65.113.153.50)
[20:13:02] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:34:42] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[21:08:23] *** Joins: dlowe (~dlowe@user/dlowe)
[21:33:17] *** Joins: Oladon (~olad@98.43.81.226)
[21:59:36] *** Joins: kathe (~mayuresh@182.58.242.118)
[21:59:57] <kathe> hello. :)
[21:59:59] *** Quits: silasfox (~sbv@2001-4dd1-e783-0-bfa3-11b8-a81d-dda9.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[22:01:51] *** Joins: silasfox (~sbv@2001-4dd1-e6dc-0-1565-bb31-21a9-ccc5.ipv6dyn.netcologne.de)
[22:04:12] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[22:06:12] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:06:21] *** Joins: thrig (~thrig@65.113.153.50)
[22:06:41] <kathe> anyone awake?
[22:07:41] <thrig> na'e
[22:07:52] <kathe> :)
[22:07:56] <kathe> what does that mean?
[22:09:03] <thrig> contrary scalar negator: other than ...; not ...; a scale or set is implied
[22:10:45] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[22:22:15] *** Parts: kathe (~mayuresh@182.58.242.118) ()
[23:02:09] *** Joins: selwyn (~selwyn@user/selwyn)
[23:05:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:16:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Read error: Connection reset by peer)
[23:16:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[23:20:13] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
