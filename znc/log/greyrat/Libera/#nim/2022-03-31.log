[00:09:00] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[00:09:26] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:42:26] *** Joins: kenran (~kenran@200116b82bc26800d8fb2d8773389650.dip.versatel-1u1.de)
[00:57:24] *** Joins: m4nc3r (~m4nc3r@91.210.104.242)
[00:59:56] *** Quits: m4nc3r (~m4nc3r@91.210.104.242) (Client Quit)
[01:58:57] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8)
[02:12:47] *** Quits: kenran (~kenran@200116b82bc26800d8fb2d8773389650.dip.versatel-1u1.de) (Quit: WeeChat info:version)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:42:49] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:d077:8eb:5057:ebfc) (Remote host closed the connection)
[02:51:31] *** Joins: lumo_e (~enrico@151.29.53.201)
[03:17:51] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 245 seconds)
[03:31:12] *** Joins: xet7 (~xet7@user/xet7)
[03:45:32] <FromDiscord> <xxM0ha> The semaphore timeout period has expired
[03:45:34] <FromDiscord> <xxM0ha> What is that
[03:46:59] <FromDiscord> <auxym> context? code that produces the error?
[03:49:19] <FromDiscord> <xxM0ha> In reply to @auxym "context? code that produces": Iam doing parallel http requests with async and httpclient so when i reach like 900 requests ‚ÜµThe requests stop sending ‚ÜµAnd this error shows in except
[03:50:56] <FromDiscord> <xxM0ha> And it consume the ram very much
[03:51:09] <FromDiscord> <xxM0ha> (edit) "it" => "it‚Äôs"
[03:57:15] <FromDiscord> <michaelb.eth> In reply to @xxM0ha "Iam doing parallel http": you might consider trying async/await of the nim-chronos library and its `apps/http/httpclient` module, see if you have better luck‚Üµ‚Üµalso, can you give an example of your current code?
[03:57:33] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 260 seconds)
[03:58:01] <FromDiscord> <xxM0ha> In reply to @michaelb.eth "you might consider trying": https://pastebin.com/BAYbgBQS
[03:58:06] <FromDiscord> <xxM0ha> This is the code
[04:03:46] <FromDiscord> <Elegantbeef> That seems to be a issue on windows related to drive, or network speed
[04:04:01] <FromDiscord> <Elegantbeef> Seems you could be oversaturating one of your resources
[04:07:52] <FromDiscord> <michaelb.eth> each of the iterations of the for loop is running requests in a while loop, so seems like you could be creating a lot of contention
[04:08:03] <FromDiscord> <michaelb.eth> (edit) "requests" => "one request after another"
[04:25:25] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8)
[04:29:02] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8) (Ping timeout: 260 seconds)
[04:32:27] *** Quits: lumo_e (~enrico@151.29.53.201) (Quit: Quit)
[04:44:34] <FromDiscord> <biz> what is `{.<code>.}`?
[04:44:37] <FromDiscord> <biz> ive seen things like
[04:44:40] <FromDiscord> <biz> `{.async.}`
[04:44:44] <FromDiscord> <Elegantbeef> It's a pragma
[04:45:03] <FromDiscord> <biz> what does it do?
[04:45:07] <FromDiscord> <Elegantbeef> In the case of `async` it's a macro which converts the procedure to an iterator generator so it can be used async
[04:45:24] <FromDiscord> <Elegantbeef> Othercases it's just talking to the compiler, and in some cases it's just a tag
[04:45:40] <FromDiscord> <biz> seems a tad confusing
[04:45:48] <FromDiscord> <Elegantbeef> It's not really
[04:45:48] <FromDiscord> <biz> could i ask you the same question but with an example?
[04:46:02] <FromDiscord> <Elegantbeef> If you have the question probably
[04:46:26] <FromDiscord> <biz> sent a code paste, see https://play.nim-lang.org/#ix=3TTd
[04:46:26] <FromDiscord> <biz> `{.event(discord).}`
[04:47:22] <FromDiscord> <biz> what does this seem to be used for?
[04:47:24] <FromDiscord> <Elegantbeef> Same thing as asnyc it modifies the procedure so the dimscord API can use it
[04:47:38] <FromDiscord> <Elegantbeef> https://github.com/krisppurg/dimscord/blob/d0444dfad3f982497e0ba35ae337b6895df23edb/dimscord/helpers.nim#L11-L12
[04:47:48] <FromDiscord> <Elegantbeef> It's a shorthand for adding a procedure to the event handler
[04:48:08] <FromDiscord> <biz> so its basically
[04:48:13] <FromDiscord> <biz> applying the event you created
[04:48:15] <FromDiscord> <biz> to the handler
[04:48:35] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TTe
[04:48:42] <FromDiscord> <biz> very interesting
[04:48:48] <FromDiscord> <biz> i understand it a bit more now
[04:48:58] <FromDiscord> <Elegantbeef> When you have macros you can really make life easier using them
[04:49:08] <FromDiscord> <Elegantbeef> It might be a bit obscure at first but it can very much make it easier
[04:49:18] <FromDiscord> <biz> o
[04:49:25] <FromDiscord> <biz> i dont understanding exactly what the `{.` means
[04:49:31] <FromDiscord> <biz> but i understand how that was being used
[04:49:53] <FromDiscord> <Elegantbeef> It's just a pragma and in this case it's a call to that macro
[04:50:03] <FromDiscord> <Elegantbeef> Pragmas can be used for a lot of things, it depends on context
[04:50:27] <FromDiscord> <biz> ill make it a habit to use `{.events().}` in the bot, and maybe it will register more eventually
[04:50:41] <FromDiscord> <biz> so if `await` can be used without `{.async.}`, what does async provide?
[04:50:47] <FromDiscord> <Elegantbeef> `proc doThing() {.noSideEffect.}` for instance isnt a macro but is telling Nim that the procedure  cannot have any side effect
[04:51:01] <FromDiscord> <Elegantbeef> await can only be used inside an async setting
[04:51:14] <FromDiscord> <Elegantbeef> async mutates a procedure to be awaitable
[04:51:31] <FromDiscord> <Elegantbeef> In Nim async is implemented 100% in user space, there is no code in the compiler explicitly for it
[04:51:45] <FromDiscord> <biz> so i dont have to use `{.async.}`?
[04:51:58] <FromDiscord> <biz> or i do?
[04:52:04] <FromDiscord> <Elegantbeef> For dimscord?
[04:52:07] <FromDiscord> <biz> just in general
[04:52:15] <FromDiscord> <Elegantbeef> Dimscord will add `async` to the procedure with `event`
[04:52:18] <FromDiscord> <biz> i come from lua and javascript
[04:52:22] <FromDiscord> <biz> so these concepts are a bit obsucre
[04:52:23] <FromDiscord> <Elegantbeef> If you want a procedure to be `async` you need to use it
[04:52:24] <FromDiscord> <biz> obscure
[04:52:27] <FromDiscord> <biz> In reply to @Elegantbeef "If you want a": okay
[04:52:37] <FromDiscord> <biz> i should use await for promises like normal
[04:52:38] <FromDiscord> <biz> correct?
[04:52:58] <FromDiscord> <Elegantbeef> I'm not one to really talk about async with, i've hardly touched it
[04:53:05] <FromDiscord> <biz> understandable
[04:53:09] <FromDiscord> <biz> nim seems pretty cool
[04:53:13] <FromDiscord> <Elegantbeef> I know how it works in Nim and that you use it if you have a bunch of IO
[04:53:26] <FromDiscord> <biz> why are your messages
[04:53:30] <FromDiscord> <biz> in the form of a webhook delivery?
[04:53:34] <FromDiscord> <Elegantbeef> I'm on matrix using a bridge
[04:53:39] <FromDiscord> <biz> matrix
[04:53:40] <FromDiscord> <biz> ?
[04:53:53] <FromDiscord> <Elegantbeef> This discord server is bridged to the IRC and Matrix protocls
[04:54:18] <FromDiscord> <Elegantbeef> Matrix is an open protocol for implementing multimedia clients
[04:54:51] <FromDiscord> <Elegantbeef> It has similar functionality to Discord but isnt proprietary and as such you can use a number of clients to access it
[04:55:15] <FromDiscord> <biz> hmm
[04:55:33] <FromDiscord> <biz> cool
[04:55:42] <FromDiscord> <biz> https://matrix.org/docs/projects/try-matrix-now/
[04:55:44] <FromDiscord> <biz> im checking it out
[04:56:07] <FromDiscord> <biz> what client are you using?
[04:56:25] <FromDiscord> <Elegantbeef> I'm using element right now, but i do want to eventually make my own üòõ
[04:56:58] <FromDiscord> <biz> downloading element
[05:04:11] <FromDiscord> <biz> hi
[05:04:13] <FromDiscord> <biz> elegant
[05:04:16] <FromDiscord> <biz> i made an acc
[05:04:28] <FromDiscord> <biz> @nimc:matrix.org
[05:05:01] <FromDiscord> <Elegantbeef> Odd name if you're curious how to join here it's https://matrix.to/#/#nim:envs.net
[05:09:18] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8)
[05:10:21] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8) (Ping timeout: 245 seconds)
[05:11:08] <FromDiscord> <nimc> i figured it out
[05:11:10] <FromDiscord> <nimc> üòã
[05:12:07] <FromDiscord> <ok> meow
[05:12:27] <FromDiscord> <Elegantbeef> I regret everything in life
[05:12:37] <FromDiscord> <biz> why
[05:12:40] <FromDiscord> <Elegantbeef> You saying "meow"
[05:12:46] <FromDiscord> <Elegantbeef> Anyway this isnt nim related anymore
[05:21:49] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:29:03] <FromDiscord> <Shinyzenith> I was wondering what the meow notification was ü§£ü§£ü§£
[05:29:22] <FromDiscord> <Elegantbeef> Some people that have keyboards shouldnt
[05:30:52] <FromDiscord> <huantian> what's wrong with meow lol
[05:30:59] <FromDiscord> <biz> fr
[05:30:59] <FromDiscord> <biz> meow
[05:31:23] <FromDiscord> <Shinyzenith> I think we should get back to nim talk
[05:31:32] <FromDiscord> <biz> i successfully installed nim just now
[05:31:35] <FromDiscord> <biz> that was pretty easy
[05:31:45] <FromDiscord> <Shinyzenith> Hope you enjoy the language
[05:31:54] <FromDiscord> <biz> will do üëçÔ∏è
[05:32:03] <FromDiscord> <Elegantbeef> How'd you install it?
[05:32:17] <FromDiscord> <biz> used 64x
[05:32:18] <FromDiscord> <biz> zip folder
[05:32:21] <FromDiscord> <biz> unzipped
[05:32:23] <FromDiscord> <biz> moved to downloads
[05:32:27] <FromDiscord> <biz> put Nim/bin in path
[05:32:33] <FromDiscord> <Shinyzenith> Sounds like a bad idea
[05:32:35] <FromDiscord> <Elegantbeef> Ah ideally you use choosenim
[05:32:37] <FromDiscord> <Shinyzenith> A really bad one
[05:32:43] <FromDiscord> <biz> I do this with every lang
[05:32:46] <FromDiscord> <biz> even moonscript
[05:32:57] <FromDiscord> <Shinyzenith> Why this horrific method
[05:33:01] <FromDiscord> <biz> very simple
[05:33:07] <FromDiscord> <biz> and i know exactly where the nim binaries are
[05:33:19] <FromDiscord> <Elegantbeef> Had to check since i moved to debian, and ya debian sid actually has 1.6.4, that's amazing
[05:33:33] <FromDiscord> <Elegantbeef> The reason you want to use things like choosenim or rust up is easy versioning of the language
[05:33:37] <FromDiscord> <huantian> Isn't that to be expected from a rolling release repo
[05:33:56] <FromDiscord> <Shinyzenith> Yeah distro independent versioning is nice
[05:34:07] <FromDiscord> <biz> i like manual more
[05:34:16] <FromDiscord> <Elegantbeef> I was on ubuntu's package rep where it was super outdated so i had a very low bar
[05:34:19] <FromDiscord> <biz> the delays of msgs using the bridge is horrid
[05:34:25] <FromDiscord> <Elegantbeef> This is the first i've used a rolling distro üòõ
[05:34:29] <FromDiscord> <biz> (edit) "is" => "are"
[05:35:00] <FromDiscord> <Elegantbeef> The bridge has issues on and off, sometimes it's fast othertimes it's slow. othertimes it crashes for a few
[05:35:02] <FromDiscord> <biz> element is like guilded and discord together
[05:35:11] <FromDiscord> <huantian> Ubuntu is just permanently out of date always
[05:35:22] <FromDiscord> <Elegantbeef> Yea i know
[05:35:38] <FromDiscord> <huantian> I used guilded for 1 second, realized they didn't allow arbitrary file types and dipped
[05:35:41] <FromDiscord> <Elegantbeef> I'm not an idiot just jokingly observing rolling is magical
[05:35:58] <FromDiscord> <biz> its so over complicated too
[05:36:09] <FromDiscord> <biz> id use element permanently but discord has more to offer
[05:36:19] <FromDiscord> <biz> also all the servers im in dont have bridges
[05:36:19] <FromDiscord> <biz> except this
[05:36:38] <FromDiscord> <biz> OMFG I JUST ACCIDENTALLY ACTIVATED LIGHT MODE
[05:38:43] <FromDiscord> <Elegantbeef> Just seen this library due to the submission to TMWN and damn is it nice https://github.com/can-lehmann/owlkettle
[05:39:23] <FromDiscord> <huantian> rolling is magical!
[05:39:35] <FromDiscord> <biz> is there a `nimble init`
[05:39:38] <FromDiscord> <biz> like that type of stuff
[05:39:47] <FromDiscord> <Elegantbeef> There is an `iniit`
[05:39:52] <FromDiscord> <Elegantbeef> `init` even
[05:40:21] <FromDiscord> <biz> should i do
[05:40:24] <FromDiscord> <biz> library
[05:40:25] <FromDiscord> <biz> or hybrid
[05:40:51] <FromDiscord> <biz> this is a cool ass fucking installer
[05:40:52] <FromDiscord> <Elegantbeef> Are you making a library or binary, or both?
[05:40:59] <FromDiscord> <biz> not sure
[05:41:02] <FromDiscord> <biz> would a bot be a binary
[05:41:04] <FromDiscord> <biz> seems like a binary
[05:41:22] <FromDiscord> <Elegantbeef> It only really matters if people do `nimble install myPackage`
[05:41:38] <FromDiscord> <Elegantbeef> simplescreenrecorder-2022-03-30\_19.10.20.mp4 https://media.discordapp.net/attachments/371759389889003532/958896319961923674/simplescreenrecorder-2022-03-30_19.10.20.mp4
[05:41:48] <FromDiscord> <biz> finished init
[05:41:50] <FromDiscord> <Elegantbeef> But yea this is less than 30 lines of code with owl
[05:41:51] <FromDiscord> <biz> i just did binary
[05:42:12] <FromDiscord> <Elegantbeef> Quite a nice library
[05:42:29] <FromDiscord> <biz> what exactly is `when`
[05:42:37] <FromDiscord> <Elegantbeef> compile time `if` that doesnt open a scope
[05:42:57] <FromDiscord> <biz> elaborate
[05:43:17] <FromDiscord> <Elegantbeef> It's used like `if` but for changing what a program does at compile time
[05:43:28] <FromDiscord> <Elegantbeef> Think platform specific compilation or specialized generics
[05:43:34] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#statements-and-expressions-when-statement
[05:43:51] <FromDiscord> <biz> so
[05:43:55] <FromDiscord> <biz> how could this be useful
[05:44:20] <FromDiscord> <huantian> oooh that's cool
[05:44:25] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TTo
[05:44:43] <FromDiscord> <Elegantbeef> Slight issue with owlkettle lacking fixed height, but yea it's pretty nifty
[05:44:48] <FromDiscord> <biz> god damn pragma confusion
[05:44:49] <FromDiscord> <Elegantbeef> And my search algo is fucking garbage
[05:44:52] <FromDiscord> <biz> üò≠
[05:45:03] <FromDiscord> <biz> i use windows..
[05:45:17] <FromDiscord> <Elegantbeef> Exactly the joke
[05:45:19] <FromDiscord> <aph> sent a code paste, see https://play.nim-lang.org/#ix=3TTp
[05:45:25] <FromDiscord> <huantian> I'm just lazy and always used kd's krunner, which works pretty well so I never looked into anythign else
[05:45:27] <FromDiscord> <Elegantbeef> WSL would count as \nix
[05:45:33] <FromDiscord> <aph> yay
[05:46:08] <FromDiscord> <biz> why do some people use `when` mid-code
[05:46:12] <FromDiscord> <Elegantbeef> Yea i'm just playing around with it right now, i do kinda want my own launcher
[05:46:23] <FromDiscord> <Elegantbeef> Cause their code requires platform or type specific logic
[05:46:35] <FromDiscord> <Elegantbeef> do you have an example?
[05:46:39] <FromDiscord> <huantian> for your linux binary, you don't want windows specific code
[05:46:43] <FromDiscord> <huantian> and vice versa
[05:46:45] <FromDiscord> <biz> no i dont remember
[05:46:55] <FromDiscord> <biz> so is it just for pre-compile
[05:46:58] <FromDiscord> <biz> i meant
[05:47:00] <FromDiscord> <biz> compile tinme
[05:47:01] <FromDiscord> <biz> time
[05:47:03] <FromDiscord> <congusbongus> when is a fancy ifdef
[05:47:10] <FromDiscord> <Generic> no it's a thousand times more powerful
[05:47:16] <FromDiscord> <biz> i just came to nim idk what the hell that is
[05:47:20] <FromDiscord> <Generic> you can plug in any constant value
[05:47:21] <FromDiscord> <huantian> image.png https://media.discordapp.net/attachments/371759389889003532/958897756552966234/image.png
[05:47:31] <FromDiscord> <congusbongus> it's a thousand times more fancy
[05:47:53] <FromDiscord> <Elegantbeef> Yea i've used kde before huan
[05:47:53] <FromDiscord> <biz> so the `when` in ur main file runs before anything else
[05:47:58] <FromDiscord> <Elegantbeef> No
[05:48:05] <FromDiscord> <biz> oh
[05:48:13] <FromDiscord> <Generic> Nim has no preprocessor
[05:48:23] <FromDiscord> <Elegantbeef> The compile checks the condition of `when` at compiile time and if it passes it then checks the body of the when
[05:48:32] <FromDiscord> <biz> i meant if you did like
[05:48:35] <FromDiscord> <biz> `when true:`
[05:48:37] <FromDiscord> <Elegantbeef> Only the true branch of a when elif is emitted
[05:49:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TTr
[05:49:18] <FromDiscord> <Elegantbeef> This enables code that can run on different platforms, or can be specialized for a given type
[05:49:32] <FromDiscord> <biz> note to self im not going to use when anytime soon
[05:49:35] <FromDiscord> <biz> üòã
[05:49:41] <FromDiscord> <huantian> It can also be useful if you say have debug code, which you don't want to include in your release binaries at all
[05:49:55] <FromDiscord> <Generic> sent a code paste, see https://paste.rs/1Ch
[05:50:00] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TTs
[05:50:11] <FromDiscord> <biz> so like
[05:50:14] <FromDiscord> <biz> in that case
[05:50:18] <FromDiscord> <biz> how is that better than `if`
[05:50:18] <FromDiscord> <huantian> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/958898344338554920): It can also be useful if you say have debug code, which you don't want to include in your release binaries at all, nor have a runtime check to see if this is a debug or rele
[05:50:23] <FromDiscord> <Elegantbeef> It's done statically
[05:50:30] *** Joins: neurocyte861 (~neurocyte@user/neurocyte)
[05:50:34] <FromDiscord> <Elegantbeef> Meaning for a string it only has `echo "Hello: ", a` in the body
[05:50:43] <FromDiscord> <Elegantbeef> and all the other types have `echo "Buh bye: ", a`
[05:50:52] <FromDiscord> <Elegantbeef> There is 0 runtime cost for the diferentiating logic
[05:50:55] <FromDiscord> <Generic> if you would use an if to check a generic type there would be an error
[05:51:06] <FromDiscord> <Elegantbeef> Well that aswell
[05:51:08] <FromDiscord> <biz> wtf‚Üµ(@Generic)
[05:51:28] <FromDiscord> <huantian> ok but if you're checking a generic type at runtime, why
[05:51:37] <FromDiscord> <Elegantbeef> Nim's statically typed doing `if x is int` a thing needed
[05:51:40] <FromDiscord> <Generic> generics only work at compile time
[05:51:42] <FromDiscord> <huantian> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/958898791547830363): ok but if you're checking a generic type at runtime, why‚Üµit makes sense to do that checking at compile time, since it's already known then
[05:51:46] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8)
[05:51:53] <FromDiscord> <biz> im just going to use if atp
[05:51:55] <FromDiscord> <Generic> they're gone at runtime
[05:51:55] <FromDiscord> <biz> \:sob
[05:51:58] <FromDiscord> <biz> üò≠
[05:52:06] <FromDiscord> <Generic> sent a code paste, see https://paste.rs/9YU
[05:52:07] <FromDiscord> <Elegantbeef> Yes you're only going to use `if` unless you need when
[05:52:11] <FromDiscord> <Elegantbeef> And you'll know when you need when
[05:52:14] <FromDiscord> <biz> if and when
[05:52:19] <FromDiscord> <biz> üòè
[05:52:23] *** Quits: neurocyte86 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:52:24] *** neurocyte861 is now known as neurocyte86
[05:52:33] <FromDiscord> <biz> if and when i need it
[05:52:37] <FromDiscord> <biz> funny joke
[05:52:43] <FromDiscord> <Generic> that code I sent would break when a is not a string
[05:52:48] <FromDiscord> <Elegantbeef> In the case you need when you'll be going "I really wish i could run specific code for X thing"
[05:53:01] <FromDiscord> <biz> but how woul
[05:53:02] <FromDiscord> <biz> d
[05:53:04] <FromDiscord> <biz> if be any less specific
[05:53:26] <FromDiscord> <Elegantbeef> The issue the whole "only when branches that pass are considered"
[05:53:44] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3TTt
[05:53:59] <FromDiscord> <Elegantbeef> In this case `a.someOpe...` is checked so if `a is int`  it attempts to call `a.someOpe...`
[05:54:10] <FromDiscord> <Elegantbeef> when in the case of `when` that branch isnt considered
[05:54:17] <FromDiscord> <Elegantbeef> so there is no compile time error
[05:54:33] <FromDiscord> <biz> do u mean a is string
[05:54:38] <FromDiscord> <Elegantbeef> No
[05:54:46] <FromDiscord> <biz> so why would it call it
[05:54:48] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8) (Ping timeout: 260 seconds)
[05:54:59] <FromDiscord> <Elegantbeef> In the case `a is int` the type system checks the type of `a.someOperation` and cause it cannot call it it errors statically
[05:55:10] <FromDiscord> <Elegantbeef> Nim is statically typed, if the programm is not type logical it errors
[05:55:34] <FromDiscord> <biz> do ints have any functions at all
[05:55:43] <FromDiscord> <Elegantbeef> if you have no `someOperation(a: int)` and you do `10.someOperation` it will error at compile time even if it's inside a `if false`
[05:56:01] <FromDiscord> <Elegantbeef> All nim procedures can be called `myProc(a)` or `a.myProc` so yes
[05:56:14] <FromDiscord> <biz> ill figure this all out in the future i hope
[05:56:26] <FromDiscord> <Elegantbeef> Well you cant figure it out in the past
[05:56:34] <FromDiscord> <biz> üôÑ
[05:56:41] <FromDiscord> <huantian> and the present of the past is in the past
[05:57:08] <FromDiscord> <Elegantbeef> Like i said just use if and you'll be fine
[05:57:32] <FromDiscord> <Elegantbeef> In the case you need when the compiler will tell you
[05:57:40] <FromDiscord> <Elegantbeef> And by that i mean it'll say "I cannot compile this code"
[05:58:25] <FromDiscord> <Elegantbeef> It sounds like you've never used a static typed language before, so it'll be a learning experience but it'll be so much nicer
[05:58:40] <FromDiscord> <Elegantbeef> Weak/dynamic typed languages are tedious to write imo since you need to run code to see if there are problems
[05:59:01] <FromDiscord> <biz> ive used typescript, c++, and a few others
[05:59:07] <FromDiscord> <biz> i just never messed with nim
[05:59:16] <FromDiscord> <biz> i also used golang for a year
[05:59:29] <FromDiscord> <biz> types in golang r frustrating
[06:00:46] <FromDiscord> <Elegantbeef> Hell it has sub range types so `var a: 0..3 = 4` errors
[06:00:47] <FromDiscord> <Elegantbeef> Well Nim's type system is a treat if you like programs that statically assure safety
[06:00:53] <FromDiscord> <huantian> Me when I have to check generics at runtime with C# üòî
[06:01:41] <FromDiscord> <Generic> haha
[06:02:03] <FromDiscord> <biz> do you know if dimscord
[06:02:05] <FromDiscord> <biz> supports slash cmds
[06:02:16] <FromDiscord> <huantian> yeah it does
[06:02:20] <FromDiscord> <biz> ok thank you
[06:02:23] <FromDiscord> <biz> i found their
[06:02:23] <FromDiscord> <biz> docs
[06:02:25] <FromDiscord> <biz> on the wiki
[06:02:31] <FromDiscord> <huantian> at least I do remember seeing slash commands on dimscmd
[06:02:31] <FromDiscord> <biz> i want to get good with nim
[06:02:41] <FromDiscord> <biz> ive made bots in literally like
[06:02:42] <FromDiscord> <biz> 10 languages
[06:02:45] <FromDiscord> <biz> its how ive always started
[06:09:07] <FromDiscord> <biz> do you guys hacve any recommended
[06:09:09] <FromDiscord> <biz> vscode packages for nim
[06:09:17] <FromDiscord> <Elegantbeef> saem's is the best
[06:09:47] <FromDiscord> <biz> ty
[06:09:48] <FromDiscord> <biz> e
[06:10:24] <FromDiscord> <biz> i see no difference from
[06:10:26] <FromDiscord> <biz> the other one
[06:10:31] <FromDiscord> <biz> do i need to customize
[06:10:49] <FromDiscord> <huantian> I mean there's not much to see
[06:11:08] <FromDiscord> <huantian> it's just more stable and supports debuggin
[06:11:40] <FromDiscord> <huantian> there's not many visual changes
[06:11:59] <FromDiscord> <biz> ah
[06:12:11] <FromDiscord> <biz> can i use tab
[06:12:15] <FromDiscord> <biz> repl.it doesnt allow tabs
[06:12:21] <FromDiscord> <Elegantbeef> Nim only supports spaces
[06:12:33] <FromDiscord> <biz> horrid
[06:13:08] <FromDiscord> <Elegantbeef> It's a whitespace significant language that chose spaces due to places horrifically rendering tabs
[06:13:19] <FromDiscord> <biz> oh
[06:13:31] <FromDiscord> <Elegantbeef> Allowing both is a terrible idea, as such using the one that renders the most consistently is best for everyone
[06:13:40] <FromDiscord> <huantian> there's this cool button in vscode that makes it change from tabs to spaces
[06:13:45] <FromDiscord> <huantian> I'd recommend pushing ti
[06:13:54] <FromDiscord> <biz> so if i
[06:13:55] <FromDiscord> <biz> put a tab
[06:13:57] <FromDiscord> <biz> itll convert it
[06:14:05] <FromDiscord> <Elegantbeef> I mean that's the default
[06:14:25] <FromDiscord> <Elegantbeef> 99% of text editors insert spaces for tab keys
[06:14:27] <FromDiscord> <biz> where is this button
[06:14:45] <FromDiscord> <huantian> image.png https://media.discordapp.net/attachments/371759389889003532/958904653825863730/image.png
[06:14:53] <FromDiscord> <huantian> bottom right
[06:15:36] <FromDiscord> <biz> kk
[06:16:05] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8)
[06:18:31] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8) (Ping timeout: 250 seconds)
[06:21:39] <nrds> <06Prestige99> With nimble, is there a way to differentiate between project dependencies and "developer" dependencies? E.g. if someone wants to use my seq2d library, they really don't need to download the testing framework I'm using
[06:22:31] <FromDiscord> <Elegantbeef> Nope disruptek had the same issue
[06:26:02] <FromDiscord> <biz> my bots online!
[06:26:04] <FromDiscord> <biz> \:D
[06:26:09] <FromDiscord> <biz> sent a code paste, see https://play.nim-lang.org/#ix=
[06:26:17] <FromDiscord> <huantian> 1?
[06:26:23] <FromDiscord> <biz> sent a code paste, see https://paste.rs/oMp
[06:26:23] <FromDiscord> <biz> my bad
[06:26:29] <FromDiscord> <biz> im new to this element shit
[06:27:21] <FromDiscord> <biz> welcome
[06:27:34] <FromDiscord> <aph> sup
[06:28:01] <FromDiscord> <huantian> üåä
[06:31:40] <FromDiscord> <Elegantbeef> The owlkettle dev added fixed image size and told me how to fix my problem, so now i have a proper gui
[06:31:43] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/958908920120872970/image.png
[06:32:23] <FromDiscord> <huantian> ooh nice
[06:32:25] <FromDiscord> <huantian> I see you use firefox, truely a man of culture
[06:33:31] <FromDiscord> <Elegantbeef> Now what's the best way to start a forked process in Nim... üòõ
[06:34:02] <FromDiscord> <Elegantbeef> Rather a detatched process
[06:34:07] <FromDiscord> <huantian> stab it with the fork
[06:36:12] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:60b7:1d07:d71a:f982)
[06:36:21] <FromDiscord> <huantian> I'd assume there's something in std/os
[06:36:28] <FromDiscord> <biz> 'std'
[06:36:31] <FromDiscord> <biz> weirdest term ever
[06:36:33] <FromDiscord> <biz> in coding
[06:38:02] <FromDiscord> <Elegantbeef> Seems like i can just do `startProcess`
[06:45:56] <FromDiscord> <ajusa> In reply to @biz "'std'": Shorter than writing out "standard" each time
[06:46:11] <FromDiscord> <Elegantbeef> But longer than `s`
[06:46:14] <FromDiscord> <biz> i think of
[06:46:17] <FromDiscord> <biz> std as
[06:46:21] <FromDiscord> <biz> sexually transmitted disease
[06:46:22] <FromDiscord> <biz> every time
[06:46:24] <FromDiscord> <biz> that is the issue.
[06:46:27] <FromDiscord> <biz> üò≠
[06:46:28] <FromDiscord> <Elegantbeef> Well be giddy and carry on
[06:46:41] <FromDiscord> <congusbongus> ok it should be `sti` then
[06:46:52] <FromDiscord> <biz> sexually transmitted infection
[06:56:12] <nrds> <06Prestige99> Elegantbeef thanks for the info, maye
[06:56:24] <nrds> <06Prestige99> Maybe I should submit a pr to nimble*
[06:56:27] <FromDiscord> <Elegantbeef> My name's not maye, mate
[06:56:40] <nrds> <06Prestige99> Phone is hard to type on :(
[07:05:05] <FromDiscord> <demotomohiro> Phone is hard type, but SSH to remote machine and writing Nim code on phone on my bed  is nice üôÇ
[07:22:04] <FromDiscord> <huantian> ah neato
[07:22:13] <FromDiscord> <huantian> not too much code nice
[07:22:27] <FromDiscord> <Elegantbeef> Yea it's quite simple, though some UX issuex
[07:22:47] <FromDiscord> <Elegantbeef> But eitherway it works lovely
[07:23:56] <FromDiscord> <Elegantbeef> Much better than i imagined it would be
[07:25:43] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 260 seconds)
[07:26:41] <nrds> <11Prestige|99> https://github.com/nim-lang/nimble/issues/506#issuecomment-755830324 well that works I guess
[07:26:59] <nrds> <11Prestige|99> Still pretty odd to me that it isn't outright supported
[07:30:28] <FromDiscord> <retkid> if a programming language was a person
[07:30:34] <FromDiscord> <retkid> fuck marry kill
[07:30:40] <FromDiscord> <retkid> uhhh
[07:30:48] <FromDiscord> <retkid> JavaScript, Python, C
[07:32:38] <nrds> <11Prestige|99> what does that even imply?
[07:34:22] <FromDiscord> <Elegantbeef> Let's be honest all three of those fuck you over writing them, and will drive you to want to kill someone
[07:34:43] <FromDiscord> <Elegantbeef> You'll wish you were married cause atleast that way you'd have something to look forward to when you're not writing those three
[07:35:19] <FromDiscord> <Elegantbeef> Also prestige today you're feeling different something \| off about you
[07:37:29] <FromDiscord> <retkid> The only language that fills be with that level of Existential dread is Java
[07:37:38] <FromDiscord> <retkid> I was offered a job in java and turned it down today
[07:37:51] <FromDiscord> <retkid> which is bad because its the only job I've been offered out of like 60 applications
[07:38:48] <FromDiscord> <retkid> I want java on my resume, but I don't want people to think I ACTUALLY want to write my code in it
[07:39:11] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:57:23] <FromDiscord> <ShalokShalom> In .Net, it seems to be more and more accepted, when you apply as a F# developer. JVM seems to still require Java
[07:57:39] <FromDiscord> <michaelb.eth> In reply to @retkid "I was offered a": see if they'll let you write Clojure and compile it down class files üòÑ
[07:57:42] <FromDiscord> <ShalokShalom> Maybe because more devs are available
[07:57:52] <FromDiscord> <michaelb.eth> all you'd need is to provide a little shim for Java consumers
[07:58:07] <FromDiscord> <ShalokShalom> Issue is, your code lives further
[07:58:20] <FromDiscord> <retkid> In reply to @michaelb.eth "see if they'll let": I dont know Clojure
[07:58:20] <FromDiscord> <ShalokShalom> So they need to know, that they can find other Clojure devs
[07:58:25] <FromDiscord> <retkid> but it seems cool
[07:58:26] <FromDiscord> <ShalokShalom> Scala, Kotlin
[07:58:30] <FromDiscord> <retkid> I do know Kotli0n
[07:58:32] <FromDiscord> <retkid> (edit) "Kotli0n" => "Kotlin"
[07:58:34] <FromDiscord> <retkid> dont like it
[07:58:37] <FromDiscord> <ShalokShalom> So there you are
[07:58:45] <FromDiscord> <ShalokShalom> Its the recommended language in Android dev anyway
[07:58:59] <FromDiscord> <retkid> Kotlin is cool
[07:59:02] <FromDiscord> <retkid> but like
[07:59:02] <FromDiscord> <ShalokShalom> Scala is indendat now
[07:59:03] <FromDiscord> <retkid> not good
[07:59:04] <FromDiscord> <Equinox> In reply to @retkid "dont like it": why not?
[07:59:06] <FromDiscord> <retkid> y'jknow
[07:59:07] <FromDiscord> <michaelb.eth> Clojure is more fun, but yeah, has a learning curve and smaller hiring pool
[07:59:09] <FromDiscord> <retkid> (edit) "y'jknow" => "y'know"
[07:59:15] <FromDiscord> <ShalokShalom> (edit) "indendat" => "intended"
[07:59:19] <FromDiscord> <retkid> It just feels very generic c-like language
[07:59:22] <FromDiscord> <Equinox> In reply to @michaelb.eth "Clojure is more fun,": generally good income though
[07:59:32] <FromDiscord> <ShalokShalom> In reply to @retkid "It just feels very": Just on the surface
[07:59:40] <FromDiscord> <ShalokShalom> I dont like it for the same reason, though
[07:59:45] <FromDiscord> <Equinox> In reply to @Equinox "generally good income though": rated number one average pay on stack overflow
[07:59:47] <FromDiscord> <retkid> I know, im not the best Kotlin dev
[07:59:55] <FromDiscord> <retkid> and i know super crazy stuff i can do if i look further
[08:00:05] <FromDiscord> <ShalokShalom> In reply to @Equinox "rated number one average": Wasnt it F#?
[08:00:06] <FromDiscord> <michaelb.eth> and if Clojure isn't FP enough for you, go for Frege: https://github.com/Frege/frege
[08:00:08] <FromDiscord> <retkid> but when im doing really complex stuff, I would do it in something else
[08:00:10] <FromDiscord> <ShalokShalom> Guess that changes every year.
[08:00:20] <FromDiscord> <retkid> if that makes sesne
[08:00:22] <FromDiscord> <Equinox> In reply to @ShalokShalom "Wasnt it F#?": Clojure iirc
[08:00:23] <FromDiscord> <huantian> I should learn f# at some point, seems like a decent lang
[08:00:30] <FromDiscord> <retkid> F# looks cool
[08:00:30] <FromDiscord> <ShalokShalom> But thats also down to being used so much in financial institutes.
[08:00:33] <FromDiscord> <Equinox> In reply to @huantian "I should learn f#": it does seem very cool
[08:00:37] <FromDiscord> <retkid> I wanna get better at C# but I just...
[08:00:38] <FromDiscord> <retkid> eh
[08:00:47] <FromDiscord> <retkid> ehhhhhhhh
[08:00:47] <FromDiscord> <Equinox> In reply to @retkid "eh": I feel that
[08:00:48] <FromDiscord> <ShalokShalom> F# also looks very similar to Nim
[08:00:54] <FromDiscord> <huantian> C# is a decent lang imo
[08:01:04] <FromDiscord> <ShalokShalom> And type inference is quite a generation ahead
[08:01:04] <FromDiscord> <michaelb.eth> F# iiuc is basically OCaml for .Net
[08:01:08] <FromDiscord> <huantian> F# seems a Lot more functional than nim
[08:01:13] <FromDiscord> <michaelb.eth> definitely
[08:01:19] <FromDiscord> <Equinox> In reply to @huantian "C# is a decent": it's fine, I really think it is the epitome of average
[08:01:19] <FromDiscord> <ShalokShalom> In reply to @huantian "F# seems a Lot": Tooling is much improved
[08:01:20] <FromDiscord> <retkid> When i learn C# I'm like "I KNOW JAVA I DONT NEED TO DO THIS, ITSS OK CAROLINE"
[08:01:28] <FromDiscord> <retkid> (edit) "When i ... learn" 03added "try to"
[08:01:41] <FromDiscord> <retkid> The next language im learning is R
[08:01:43] <FromDiscord> <retkid> i swear to god
[08:01:45] <FromDiscord> <retkid> im gonna do it
[08:01:50] <FromDiscord> <ShalokShalom> In reply to @michaelb.eth "F# iiuc is basically": Tooling is much improved
[08:01:53] <FromDiscord> <Equinox> In reply to @retkid "The next language im": I don't like R
[08:02:02] <FromDiscord> <retkid> Ocaml is an odd lang
[08:02:05] <FromDiscord> <retkid> I wanna learn more
[08:02:13] <FromDiscord> <retkid> but its hard.
[08:02:15] <FromDiscord> <retkid> itss not an easy lang
[08:02:17] <FromDiscord> <ShalokShalom> OCaml has also more oddities.
[08:02:29] <FromDiscord> <michaelb.eth> I learned R decently well at one point, something of a brain bender, and there are crazy perf pitfalls all over the place
[08:02:42] <FromDiscord> <ShalokShalom> Its an older lang, F-Sharp solved most of its issues from the start.
[08:02:52] <FromDiscord> <ShalokShalom> Yeah, R is odd.
[08:02:56] <FromDiscord> <retkid> In reply to @ShalokShalom "Its an older lang,": does F sharp do ;;
[08:03:00] <FromDiscord> <retkid> i dont undestand the point of ;
[08:03:04] <FromDiscord> <retkid> (edit) ";" => ";;"
[08:03:07] <FromDiscord> <ShalokShalom> Most people in R do no or less other languages
[08:03:13] <FromDiscord> <retkid> I hate ;, ;; is twice as bad
[08:03:26] <FromDiscord> <ShalokShalom> No ;
[08:03:33] <FromDiscord> <retkid> oh neat
[08:03:37] <FromDiscord> <michaelb.eth> while R has a lot of marketshare, if you can pick, seems like Julia would be the way to go for data science and ML, if you don't want to use Python or Nim (Arraymancer, etc.)
[08:03:38] <FromDiscord> <ShalokShalom> I currently port a F# code to Nim
[08:03:44] <FromDiscord> <ShalokShalom> You could help :p
[08:03:58] <FromDiscord> <retkid> intereting
[08:04:03] <FromDiscord> <retkid> i still need to learn nim macros
[08:04:10] <FromDiscord> <retkid> yo I've been so busy doing nothing
[08:04:12] <FromDiscord> <retkid> lmao
[08:04:41] <FromDiscord> <retkid> planning the next project, applying for jobs, thinking about the concept of death, comming out to my mom
[08:04:41] <FromDiscord> <ShalokShalom> https://github.com/ShalokShalom/fsharp-nim/blob/master/dev-aspect.nim
[08:04:43] <FromDiscord> <retkid> (edit) "mom" => "mom, cooking"
[08:04:48] <FromDiscord> <ShalokShalom> lol
[08:04:51] <FromDiscord> <ShalokShalom> In that order
[08:05:09] <FromDiscord> <retkid> order of priority
[08:05:10] <FromDiscord> <retkid> yea
[08:05:27] <FromDiscord> <ShalokShalom> I already ported the type definitions
[08:06:16] <FromDiscord> <ShalokShalom> They look and feel very similar in both languages.
[08:06:34] <FromDiscord> <retkid> @ShalokShalom looking through your github for traditonal fshap
[08:06:35] <FromDiscord> <retkid> (edit) "fshap" => "fsharp"
[08:06:40] <FromDiscord> <retkid> do you have a good one
[08:06:50] <FromDiscord> <retkid> https://github.com/ShalokShalom/Love_and_scare
[08:06:52] <FromDiscord> <retkid> wait i got this
[08:06:58] <FromDiscord> <ShalokShalom> I am still a newbiw in programming in general
[08:07:12] <FromDiscord> <retkid> why do you have so many repos lmao
[08:07:14] <FromDiscord> <ShalokShalom> This is an early concept for a video game
[08:07:21] <FromDiscord> <ShalokShalom> Most are forks
[08:07:27] <FromDiscord> <ShalokShalom> For PRs
[08:07:32] <FromDiscord> <retkid> I KNOW
[08:07:33] <FromDiscord> <retkid> but likew hy
[08:07:36] <FromDiscord> <retkid> (edit) "likew hy" => "like why"
[08:07:40] <FromDiscord> <Elegantbeef> Did you ever port that to Nim?
[08:07:43] <FromDiscord> <ShalokShalom> typos and stuff üòõ
[08:07:54] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "Did you ever port": Its at the current state
[08:07:55] <FromDiscord> <retkid> you're new to programming
[08:08:01] <FromDiscord> <retkid> but you got the programming energy down pat
[08:08:01] <FromDiscord> <ShalokShalom> Yes
[08:08:15] <FromDiscord> <retkid> you remind me of like a 40 year old who will be like
[08:08:22] <FromDiscord> <retkid> "I PROGRAMMED LISP ON MY MACBOOK IN 1872"
[08:08:29] <FromDiscord> <ShalokShalom> I am 33, soon 34
[08:08:40] <FromDiscord> <retkid> see
[08:08:47] <FromDiscord> <ShalokShalom> Yeah, I studied the history and some theory, before I jumped into practice
[08:08:58] <FromDiscord> <retkid> nah i just meet the energy
[08:09:03] <FromDiscord> <ShalokShalom> I see üôÇ
[08:09:04] <FromDiscord> <retkid> mean
[08:09:18] <FromDiscord> <retkid> you say the word "neat" more tho
[08:09:25] <FromDiscord> <retkid> when someone says an interesting idea, go "neat"
[08:09:44] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/958933591176409108/unknown.png
[08:09:49] <FromDiscord> <ShalokShalom> Nim has great bindings to Godot
[08:09:54] <FromDiscord> <ShalokShalom> F# is good on Unreal
[08:09:58] <FromDiscord> <retkid> they kinda suck
[08:10:03] <FromDiscord> <retkid> Idk
[08:10:10] <FromDiscord> <retkid> just use gdscript
[08:10:12] <FromDiscord> <retkid> be an adul
[08:10:14] <FromDiscord> <retkid> adult
[08:10:20] <FromDiscord> <ShalokShalom> Nah
[08:10:35] <FromDiscord> <ShalokShalom> I will study it for its tutorials
[08:10:40] <FromDiscord> <ShalokShalom> But not the actual game
[08:10:57] <FromDiscord> <ShalokShalom> I feel more comfortable, knowing I have a real programming language in my backhand
[08:11:17] <FromDiscord> <ShalokShalom> I also like it, because I can use the APIs to create UI applications.
[08:11:31] <FromDiscord> <retkid> its dificult
[08:11:40] <FromDiscord> <retkid> i tried to use godot to make a gui application
[08:11:43] <FromDiscord> <retkid> it was a bit difficult
[08:11:48] <FromDiscord> <retkid> very clunk
[08:11:49] <FromDiscord> <retkid> (edit) "clunk" => "clunky"
[08:11:52] <FromDiscord> <Elegantbeef> But between elcritches fidget widgets and owlkettle we're going to have nice Nim GUI applications üòõ
[08:11:58] <FromDiscord> <ShalokShalom> https://medium.com/swlh/what-makes-godot-engine-great-for-advance-gui-applications-b1cfb941df3b
[08:12:24] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "But between elcritches fidget": Yeah. I mean one is half way proprietary
[08:12:31] <FromDiscord> <ShalokShalom> And QT QML exists too.
[08:12:31] <FromDiscord> <Elegantbeef> No
[08:12:45] <FromDiscord> <Elegantbeef> Did you read 'fidget widgets'?
[08:12:46] <FromDiscord> <ShalokShalom> Well, the UI designer is
[08:12:56] <FromDiscord> <Elegantbeef> Again reread what i'm saying
[08:13:02] <FromDiscord> <Elegantbeef> I'm not talking about figma
[08:13:04] <FromDiscord> <ShalokShalom> Without UI designer, why would I prefer it to Godot
[08:13:14] <FromDiscord> <ShalokShalom> I know
[08:13:28] <FromDiscord> <Elegantbeef> https://forum.nim-lang.org/t/9059
[08:13:57] <FromDiscord> <Elegantbeef> It's about making a declarative UI that uses widgets like a GUI TK so it'd lovely to use
[08:14:17] <FromDiscord> <huantian> You don‚Äôt need to use figma for fidget
[08:14:27] <FromDiscord> <Elegantbeef> look how simple that application launcher i wrote today using owlkettle is, it was like 30 loc for all the UI
[08:14:42] <FromDiscord> <ShalokShalom> I like to drag and resize and place my UI elements in a GUI
[08:14:45] <FromDiscord> <ShalokShalom> Not by code
[08:15:08] <FromDiscord> <Elegantbeef> And i dont like resizing or placing UI
[08:15:10] <FromDiscord> <ShalokShalom> Fidgets widgets add nothing to the eqation, that Qml has not already?
[08:15:18] <FromDiscord> <ShalokShalom> (edit) "eqation," => "equation,"
[08:15:43] <FromDiscord> <Elegantbeef> I mean it's native code that easily works with Nim code, so i'd say it does but YMMV
[08:16:05] <FromDiscord> <ShalokShalom> Wll, QML has GPU acceleration and tons of other features
[08:16:21] <FromDiscord> <ajusa> Owlkettle?
[08:16:29] <FromDiscord> <ShalokShalom> Particullary, I use KDE and would likely write some Plasma elements sooner or later
[08:16:43] <FromDiscord> <Elegantbeef> A nice declarative API for gtk https://github.com/can-lehmann/owlkettle
[08:16:57] <FromDiscord> <ShalokShalom> ... based on GTK
[08:17:00] <FromDiscord> <ShalokShalom> Thanks, NO!!
[08:17:06] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3TTz is the afformentioned application launcher
[08:17:20] <FromDiscord> <Elegantbeef> Jesus people are unbearable about what GUI toolkit they use
[08:17:40] <FromDiscord> <ajusa> Interesting approach, good use of Nim as DSL
[08:18:30] <FromDiscord> <ajusa> But yeah I'd prefer something more cross platform (mobile use)
[08:18:31] <NimEventer> New thread by Mardiyah: On multi nested macros (templates) in sparse argument pass, see https://forum.nim-lang.org/t/9061
[08:18:55] <FromDiscord> <ShalokShalom> https://www.youtube.com/watch?v=gGZyVSOnqm0
[08:19:07] <FromDiscord> <Elegantbeef> Yea i mean that's where fidget's widgets would be nice
[08:19:10] <FromDiscord> <ShalokShalom> In reply to @ajusa "But yeah I'd prefer": Qt is fully cross platform
[08:19:13] <FromDiscord> <ShalokShalom> Godot too üòõ
[08:20:01] <FromDiscord> <ajusa> Yeah but they aren't as nice to work with as Fidget yet, as far as using them in Nim. Godot seems overkill though, it's a game engine
[08:20:12] <FromDiscord> <ShalokShalom> In reply to @ajusa "Interesting approach, good use": DSL looks nice, yeah
[08:22:48] *** Joins: vicfred (~vicfred@user/vicfred)
[08:24:56] *** Quits: Lord_Nightmare (znc@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[08:26:55] <FromDiscord> <ShalokShalom> In reply to @ajusa "Yeah but they aren't": Recommendation https://medium.com/swlh/what-makes-godot-engine-great-for-advance-gui-applications-b1cfb941df3b
[08:28:28] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[08:29:16] <FromDiscord> <Elegantbeef> Also if figma is something you really dislike make support using https://github.com/akiraux/Akira or similar
[08:43:11] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:08:33] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[09:19:00] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:34:19] <FromDiscord> <treeform> If you don't like Figma there is Sketch, Adobe XD, InVision...
[09:34:55] <FromDiscord> <treeform> https://www.creative-tim.com/blog/web-design/adobe-xd-vs-sketch-figma-invision/
[09:35:38] <FromDiscord> <Elegantbeef> I mean their dislike is that it's not OSS
[09:35:46] <FromDiscord> <Elegantbeef> So Pencil or Akira are the solution to them
[09:36:10] <FromDiscord> <treeform> They would be hard pressed to find a Designer that knows Pencil or Akira...
[09:36:49] <FromDiscord> <Elegantbeef> That's hardly the point to them
[09:36:58] <FromDiscord> <Elegantbeef> They want a GUI designer that's OSS that works with fidget
[09:37:15] <FromDiscord> <treeform> That's a lot of filters there üôÇ
[09:37:47] <FromDiscord> <treeform> I would like an OSS tool that makes crossplatform UIs easy too üôÇ
[09:38:37] <FromDiscord> <Elegantbeef> Oh you reminded  me of another one which is https://penpot.app/
[09:38:47] <FromDiscord> <Elegantbeef> So there's variety someone just has to write the code to support it
[09:38:51] <FromDiscord> <spoon> there's also ui's that rely on webkit
[09:39:02] <FromDiscord> <Elegantbeef> Eh we're talking native gui
[09:39:52] <FromDiscord> <spoon> would probably best be qt open source then
[09:40:06] <FromDiscord> <Elegantbeef> To be clear treeform i dont expect you to go out of you way to support any of these, i was more suggesting them to do it if they wanted it badly
[09:41:46] <FromDiscord> <spoon> actually, what was brought up about godot engine before, i know godot is being used as the ui in teslas and with nim bindings its def an option
[09:42:01] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[09:42:23] <FromDiscord> <spoon> may be able to find professionals there and stick with the open source ecosystem
[09:42:24] <FromDiscord> <Elegantbeef> Yea that's what they've decided to use
[09:42:33] <FromDiscord> <spoon> nice
[09:43:24] <FromDiscord> <Elegantbeef> But given that fidget and other tools are OSS it seems like if they want to use fidget with a OSS UI designer they just have to put in the work
[09:44:40] <FromDiscord> <treeform> In reply to @Elegantbeef "Oh you reminded ": That actually looks pretty far along.
[09:46:00] <FromDiscord> <spoon> i feel like if you wanted to use nim and also wanted a designer, you'd have to at least be using an open standard like html or qml that can be implemented in different languages to get the wide range support, that or the #jobs channel
[09:46:07] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8) (Read error: Connection reset by peer)
[09:46:26] <FromDiscord> <Elegantbeef> Are you disregarding everything i say?
[09:47:47] <FromDiscord> <spoon> is fidget the nim library or am i dumb
[09:48:10] <FromDiscord> <Elegantbeef> Fidget is the nim library
[09:48:10] <FromDiscord> <Elegantbeef> Pencil, Penpot, Akira are opensource GUI designers
[09:48:30] <FromDiscord> <Elegantbeef> fidget has a figma extension to generate fidget code from figma
[09:48:57] <FromDiscord> <spoon> meant something with wide adoption but those are probably easy enough to port your skills to
[09:49:02] <FromDiscord> <Elegantbeef> So if one wanted to use an OSS tool they could look at one of the 3 designers i mentioned, see if they can generate fidget code just like the figma extension does and live happily in an OSS ecosystem
[09:49:56] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8)
[09:50:58] <FromDiscord> <Elegantbeef> And i'm certain they'd atleast get one pat on the back from treeform, maybe even a gold star
[09:51:49] <FromDiscord> <spoon> how mature is fidget right now?
[09:52:12] <FromDiscord> <Elegantbeef> Presently in a rewrite but it works well for what it says it does
[09:54:31] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:68ab:d8f3:d8be:bc36:1ea8) (Read error: Connection reset by peer)
[09:54:37] <FromDiscord> <spoon> i'll have to give it another shot, iirc last time i tried a year or so ago there were a few quirks
[09:55:06] <FromDiscord> <Elegantbeef> Well ideally you use it with figma to make your UI
[09:55:16] <FromDiscord> <Elegantbeef> But there is an initiative for making widgets for iit
[09:55:55] <FromDiscord> <spoon> figma is just for mockup, right?
[09:56:15] <FromDiscord> <Elegantbeef> It's a UI designer and there is a figma -\> fidget tool
[09:56:45] <FromDiscord> <spoon> huh. that's cool
[10:00:22] <FromDiscord> <spoon> have flutter and nim been combined before?
[11:14:35] <FromDiscord> <Phil> Ohhh that gtk package looked nice
[11:14:39] *** Joins: neurocyte861 (~neurocyte@user/neurocyte)
[11:14:45] <FromDiscord> <Phil> Makes me want to contemplate doing some native GUI application
[11:15:01] <FromDiscord> <Phil> (edit) 04removed "want to"
[11:15:19] *** Quits: neurocyte86 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[11:15:27] <FromDiscord> <Phil> Just don't really have a usecase unless I build a native client for my website which seems like a massive amount of wasted effort just to make stuff even smoother
[11:15:33] <FromDiscord> <Phil> Though I guess an android client could be nice...
[11:23:31] <FromDiscord> <enthus1ast> i find it interesting that most of the gui stuff talks about "design" but not small, fast, feature rich, stable and easy to develop and use native guis
[11:26:20] <FromDiscord> <enthus1ast> i was working for kfc several years, and they had a till system that was build for dos (yes MS DOS) the managment software looked like crap, but it was super fast, reliable, and all the work could be done by keyboard shortcuts. So you could do you stuff in seconds (literally). The newer system was windows c# was slow and buggy, but looked quite nice.
[11:30:04] <FromDiscord> <enthus1ast> Currently i have the feeling that, most of the "designed" guys, are throw away guis, build for the "average user" while the ugly guis, are build for professionals that needs work to be done
[11:33:19] <FromDiscord> <enthus1ast> s/guys/guis/
[11:45:52] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "Also if figma is": I dont like repeating things. What is figma adding over qml?
[11:46:13] <FromDiscord> <ShalokShalom> Which is fitting fine into my desktop
[11:46:33] <FromDiscord> <ShalokShalom> Sharing resources, being able to be themed in sync with my other apps
[11:46:50] <FromDiscord> <ShalokShalom> Being hardware accelerated, tons of other benefits
[11:47:24] <FromDiscord> <Rika> Probably gives more control to the designer with regards to how they want the app to look like
[11:47:30] <FromDiscord> <ShalokShalom> In reply to @treeform "I would like an": There are a couple, as we already discussed ^^
[12:18:03] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 260 seconds)
[12:19:11] <FromDiscord> <ShalokShalom> In reply to @spoon "actually, what was brought": In Tesla's, really?
[12:19:56] <FromDiscord> <ShalokShalom> Yeah, the Nim bindings are actually considered one of the best language bindings in Godot at all.‚Üµ‚ÜµThe documentation even is good.
[12:22:04] <FromDiscord> <ShalokShalom> In reply to @Rika "Probably gives more control": How does QML limit that?
[12:22:14] <FromDiscord> <Elegantbeef> Well i like having a pure nim backend as it makes it easier to contribute to for me.‚Üµ(@ShalokShalom)
[12:23:16] <FromDiscord> <ShalokShalom> There is even also a non-free GUI designer, if you want that: https://doc-snapshots.qt.io/qtcreator-4.0/creator-using-qt-quick-designer.html‚Üµ‚ÜµBut its still a far cry from Godoz
[12:24:25] <FromDiscord> <ShalokShalom> (edit) "There is even also" => "sent" | "non-free GUI designer, if you want that: https://doc-snapshots.qt.io/qtcreator-4.0/creator-using-qt-quick-designer.html‚Üµ‚ÜµBut its still a far cry from Godoz" => "long message, see http://ix.io/3TUd"
[12:25:54] <FromDiscord> <ShalokShalom> sent a long message, see http://ix.io/3TUg
[12:26:12] <FromDiscord> <ShalokShalom> And I dont think much contributions are needed there. But idk ü§∑üèª‚Äç‚ôÇÔ∏è
[12:26:32] <FromDiscord> <ShalokShalom> (edit) "ü§∑üèª‚Äç‚ôÇÔ∏è" => "ü§î"
[12:26:52] <FromDiscord> <Elegantbeef> I mean i dont really see the downsides the way you see them
[12:30:02] <FromDiscord> <ShalokShalom> sent a long message, see https://paste.rs/5V4
[12:30:16] <FromDiscord> <Elegantbeef> What do you mean?
[12:33:27] <FromDiscord> <Rika> In reply to @ShalokShalom "How is the community": if they achieve whatever theyre trying to, I'm for sure to switch
[12:33:32] <FromDiscord> <Rika> and I'm thinking of helping
[12:34:50] <FromDiscord> <ShalokShalom> Awesome
[12:34:55] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "What do you mean?": https://github.com/nim-works/nimskull
[12:35:16] <FromDiscord> <Elegantbeef> I know what it is
[12:35:25] <FromDiscord> <Elegantbeef> I'm fucking apart of the organization somehow üòõ
[12:35:39] <FromDiscord> <ShalokShalom> What you think about it?
[12:35:49] <FromDiscord> <Elegantbeef> I'm indifferent
[12:36:29] <FromDiscord> <Elegantbeef> There is a mixture of circle jerkiness and sincere want for betterment
[12:36:30] <FromDiscord> <ShalokShalom> I specifically welcome full type inference, while they had not answered my question about its inclusion
[12:36:49] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "There is a mixture": Sounds like how other projects could describe Nim
[12:36:50] <FromDiscord> <Elegantbeef> Ehh full type inference does not really make sense
[12:37:41] <FromDiscord> <ShalokShalom> F# does it
[12:37:49] <FromDiscord> <Elegantbeef> Sure
[12:37:54] <FromDiscord> <Elegantbeef> And F# is a FP language
[12:37:54] <FromDiscord> <ShalokShalom> Why does it make no sense in Nim
[12:40:00] <FromDiscord> <Elegantbeef> Eh it's just my view mostly, i dont see it working well
[12:40:49] <FromDiscord> <ShalokShalom> Well, f-sharp is functional first
[12:41:11] <FromDiscord> <ShalokShalom> You can even write it imperativ, down to GPUs
[12:41:22] <FromDiscord> <ShalokShalom> And I dont see, how this plays a role?
[12:41:29] <FromDiscord> <Rika> the type systems are different
[12:41:40] <FromDiscord> <ShalokShalom> Sure
[12:41:43] <FromDiscord> <Elegantbeef> I mean my point of it being an FP language is mostly "they do thinks funky anyway"
[12:41:51] <FromDiscord> <Rika> perhaps there are features in nim's type system that would not be compatible with D#'s
[12:41:53] <FromDiscord> <Rika> (edit) "D#'s" => "F#'s"
[12:42:01] <FromDiscord> <Rika> In reply to @Elegantbeef "I mean my point": so what? we do as well?
[12:42:03] <FromDiscord> <ShalokShalom> Could be
[12:42:28] <FromDiscord> <ShalokShalom> Andreas said he is not adding it, because he thinks "people should not be so lazy"
[12:42:30] <FromDiscord> <Rika> and the reverse would be a possibility
[12:42:35] <FromDiscord> <ShalokShalom> Sure
[12:42:44] <FromDiscord> <ShalokShalom> I think this is not really the point
[12:43:00] <FromDiscord> <Elegantbeef> Hey cant i just discredit it by saying it's FP üòõ
[12:43:01] <FromDiscord> <ShalokShalom> Type inference is also something different as actual type checking
[12:43:30] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "Hey cant i just": No, not really‚Üµ‚ÜµSince I suspect the type inference, that is already in Nim, is using a lot of fp
[12:43:37] <FromDiscord> <Rika> im not sure, im not against inference
[12:43:43] <FromDiscord> <ShalokShalom> Thats at least how you develop such systems
[12:43:50] <FromDiscord> <ShalokShalom> Afaik
[12:44:02] <FromDiscord> <Rika> im against inference to the point that you dont need to write a single type in the proc signature hotugh
[12:44:04] <FromDiscord> <Rika> (edit) "hotugh" => "though"
[12:44:17] <FromDiscord> <Elegantbeef> Concepts \> typeless prcocedures
[12:44:46] <FromDiscord> <Elegantbeef> Full type inference is backwards and forwards no?
[12:44:56] <PMunch> The flip side is that error messages get really tough
[12:45:06] <PMunch> The error messages in F# are absolutely horrendous IIRC
[12:45:31] <FromDiscord> <ShalokShalom> In reply to @Rika "im against inference to": Well, thats the point‚Üµ‚ÜµF# handles it, by recommending it in functions, who get used in other files
[12:45:36] <FromDiscord> <Elegantbeef> Nim's type inference is relatively simple using the `typeof` part of the compiler to iterate down to the lowest nodes to figure out their type
[12:45:46] <FromDiscord> <ShalokShalom> Other than that, the editor can show it to you
[12:45:55] <FromDiscord> <Rika> then i'm wholly against it then
[12:46:03] <FromDiscord> <ShalokShalom> It makes the code more script like
[12:46:05] <FromDiscord> <Rika> i'd like some reverse type inference
[12:46:06] <FromDiscord> <Rika> no
[12:46:10] <FromDiscord> <Rika> i would hate that
[12:46:15] <FromDiscord> <ShalokShalom> Ah, I see
[12:46:24] <FromDiscord> <ShalokShalom> You dont need to use it
[12:46:26] <FromDiscord> <Elegantbeef> I mean you dont need to lose types to gain that functionality
[12:46:28] <FromDiscord> <Elegantbeef> I like concrete types
[12:46:32] <FromDiscord> <Rika> the reason i left python for nim is because of the type system
[12:46:40] <FromDiscord> <ShalokShalom> And you can require, that the compiler fills it in
[12:46:44] <FromDiscord> <Rika> i dont need to sure but if i read someone elses code then i do
[12:46:50] <FromDiscord> <ShalokShalom> In reply to @Rika "the reason i left": How is that comparable?
[12:46:51] <FromDiscord> <Rika> i want them on the file
[12:46:57] <FromDiscord> <ShalokShalom> You can
[12:47:03] <FromDiscord> <Rika> In reply to @ShalokShalom "How is that comparable?": i want to see the type without an editor
[12:47:07] <FromDiscord> <ShalokShalom> Elm does enforce such issues
[12:47:11] <FromDiscord> <ShalokShalom> I would be for that
[12:47:16] <FromDiscord> <Rika> on libraries i use?
[12:47:21] <FromDiscord> <ShalokShalom> You compile the code, it gets unified.
[12:47:21] <FromDiscord> <Elegantbeef> I mean you'd need to dynamically emit the concept
[12:47:26] <FromDiscord> <Rika> im not following you then
[12:47:37] <FromDiscord> <Rika> i read code without compiling most of the time
[12:47:45] <FromDiscord> <Rika> i read code without tools
[12:47:52] <FromDiscord> <ShalokShalom> All code that lands in the official repos, is formatted in the right style
[12:48:02] <FromDiscord> <Rika> then that's not like nim
[12:48:07] <FromDiscord> <Rika> nim doesnt enforce style
[12:48:12] <FromDiscord> <Rika> its not like it to do so
[12:48:12] <FromDiscord> <ShalokShalom> In reply to @Rika "i read code without": See how its done in Elm
[12:48:28] <FromDiscord> <ShalokShalom> They have an unified style over everything
[12:48:35] <FromDiscord> <Rika> thats not nim
[12:48:41] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/2qs
[12:48:41] <FromDiscord> <Rika> thats not like nim to do so
[12:48:54] <FromDiscord> <ShalokShalom> You can even do it on save
[12:49:03] <FromDiscord> <ShalokShalom> Just dont confuse me
[12:49:11] <FromDiscord> <Rika> i'm confused as well
[12:49:15] <FromDiscord> <Elegantbeef> Generics should infer implementation restrictions anyway
[12:49:17] <FromDiscord> <Rika> i dont know what the issue is
[12:49:21] <FromDiscord> <ShalokShalom> Well, you get you code
[12:49:46] <FromDiscord> <ShalokShalom> In reply to @Rika "i dont know what": From all the concepts, I face as a newbie, type declaration is one of the most staggering
[12:50:06] <FromDiscord> <ShalokShalom> Its code smell, in my way and should die in hell
[12:50:13] <FromDiscord> <Rika> then i will say
[12:50:17] <FromDiscord> <Rika> you are using the wrong language.
[12:50:22] <FromDiscord> <ShalokShalom> Code density is important in Nim
[12:50:29] <FromDiscord> <ShalokShalom> No, I still prefer static types
[12:50:48] <FromDiscord> <ShalokShalom> Its just too cumbersome to have them in my code
[12:51:03] <FromDiscord> <ShalokShalom> At least how its written in most languages
[12:51:08] <FromDiscord> <Rika> well to me
[12:51:08] <FromDiscord> <ShalokShalom> Haskell does a good job here
[12:51:09] <FromDiscord> <Rika> removing that
[12:51:19] <FromDiscord> <Rika> will nullify the benefit to static typing to me
[12:51:38] <FromDiscord> <ShalokShalom> You can see it in your editor
[12:51:43] <FromDiscord> <Rika> i dont use plugins
[12:51:45] <FromDiscord> <ShalokShalom> Always
[12:52:01] <FromDiscord> <ShalokShalom> In F#, you just hover over the piece of code
[12:52:05] <FromDiscord> <Rika> i dont want to do that
[12:52:13] <FromDiscord> <Rika> i dont want to use a plugin to see what type my shit is
[12:52:15] <FromDiscord> <ShalokShalom> There is even an online snippet platform, that shows that
[12:52:22] <FromDiscord> <ShalokShalom> Its not a plugin
[12:52:26] <FromDiscord> <Elegantbeef> Rika doesnt use tools to read code
[12:52:27] <FromDiscord> <Rika> i want it on the file, written, not dynamically changed until i change what i wrote
[12:52:28] <FromDiscord> <ShalokShalom> Its the standard language plugin
[12:52:33] <FromDiscord> <Rika> i dont USE PLUGINS
[12:52:38] <FromDiscord> <ShalokShalom> Aha
[12:52:43] <FromDiscord> <Elegantbeef> rika uses vim with a syntax highlighter
[12:52:50] <FromDiscord> <ShalokShalom> Well, then come of the middle age
[12:52:56] <FromDiscord> <Elegantbeef> Atleast i hope they have a syntax highlighter
[12:53:07] <FromDiscord> <Rika> i use neovim with the nim plugin only for the semantic highlighting and even then its whatever, i could live with none
[12:53:09] <FromDiscord> <ShalokShalom> I think this is hindering newbies to come to the language
[12:53:21] <FromDiscord> <Elegantbeef> It's really not
[12:53:22] <FromDiscord> <Elegantbeef> Type definitions are simple and concrete
[12:53:29] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[12:53:57] <FromDiscord> <Elegantbeef> Introducing extremely unclear logic would hinder noobs
[12:54:11] <FromDiscord> <Elegantbeef> You're the only person i've ever heard about go "Damn i hate declaring types"
[12:54:11] <PMunch> And the poor error messages that stem from it
[12:54:30] <PMunch> Well, some people say it, then they try a typed language and quickly changes their mind
[12:54:54] <FromDiscord> <Rika> if i read code on my browser like github now what the fuck do i do? if i print my code (and i imagine i would) what?
[12:55:00] <FromDiscord> <ShalokShalom> We cant cater to the diehards and then potential new people at the same time
[12:55:04] <FromDiscord> <Rika> of course
[12:55:07] <FromDiscord> <Rika> so we chose the diehards
[12:55:10] <FromDiscord> <Elegantbeef> You do my least favourite thing and play compiler rika
[12:55:17] <FromDiscord> <Rika> i do that already
[12:55:23] <FromDiscord> <ShalokShalom> @PMunch Do you know the messages from Elm?
[12:55:27] <FromDiscord> <Rika> yes we do
[12:55:33] <PMunch> Yes, they are super verbose
[12:55:36] <FromDiscord> <ShalokShalom> They are quite well known for being superior
[12:55:38] <FromDiscord> <Rika> its a lot of work to incorporate those
[12:55:40] <FromDiscord> <Rika> its nice i say
[12:55:44] <FromDiscord> <ShalokShalom> Not only verbose
[12:55:52] <FromDiscord> <ShalokShalom> Precise
[12:56:01] <FromDiscord> <ShalokShalom> And most of it all: Helpful
[12:56:08] *** Quits: Zectbumo (~Zectbumo@2600:8802:5100:3f90:60b7:1d07:d71a:f982) (Remote host closed the connection)
[12:56:14] <FromDiscord> <ShalokShalom> I dont think type inference ruins error messages
[12:56:17] <PMunch> When I tried it it was a matter of reading the message through once, then just recognising the pattern of the message and reading the one word that actually mattered in it
[12:56:22] <FromDiscord> <ShalokShalom> You probably have that from Haskell
[12:56:35] <PMunch> Nah, I have that from F#
[12:56:50] <PMunch> Haven't really used Haskell a lot
[12:56:52] <FromDiscord> <ShalokShalom> Well, from when? Its much improved today
[12:56:59] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/959005878017736724/image.png
[12:57:01] <FromDiscord> <Elegantbeef> This is just noise
[12:57:07] <PMunch> This was like half a year ago or something
[12:57:14] <FromDiscord> <Rika> noise for the experienced, helpful for the new
[12:57:18] <FromDiscord> <ShalokShalom> Well, for a newbie its important information
[12:57:28] <FromDiscord> <Rika> theres no fix for this other than to have two versions of output
[12:57:28] <FromDiscord> <ShalokShalom> I find it quite elitist, to say that
[12:57:45] <FromDiscord> <Rika> and thats work no one seems to be willing to do
[12:57:55] <FromDiscord> <ShalokShalom> We will never grow, so long as we push away those, who are new and interested
[12:58:21] <FromDiscord> <Elegantbeef> It's not really elitist when it takes a whole paragraph to say "Invalid type got\: string expected html"
[12:58:27] <FromDiscord> <ShalokShalom> The noise doesnt really matter
[12:58:27] <PMunch> It's not elitist, we all agree that Elm error messages are better for newcomers. But they are really distracting if you know what you're doing, and they take a lot of work to implement.
[12:58:46] <FromDiscord> <ShalokShalom> Its worth it.
[12:58:55] <FromDiscord> <Elegantbeef> I do love that i'm accused of pushing those who are new and interested away
[12:58:55] <PMunch> And we don't push away anyone, I spend hours helping newcomers both here and on the forum
[12:58:56] <FromDiscord> <Rika> you may not see it
[12:59:02] <FromDiscord> <Rika> you said yourself you're not very experienced
[12:59:23] <FromDiscord> <ShalokShalom> Its also a lot of work to do a programming language in the first place
[12:59:27] <FromDiscord> <Elegantbeef> For most of the day this is like "Beef helps people the Nim channel"
[12:59:29] <FromDiscord> <Rika> and you said yourself it's elitist to say "i like this because its better for me, or the kind i am"
[13:00:05] <FromDiscord> <Rika> again i said there isnt a single solution here
[13:00:16] <FromDiscord> <ShalokShalom> No, I think its elitist, to say "I am so experienced, I dont need this. And so newbies are not getting it anyway"
[13:00:28] <PMunch> That would be elitist, yes
[13:00:30] <FromDiscord> <Rika> its either the nice helpful messages for newbies, yet noise for experienced, or concise errors for the experienced, yet jargon for the newbies
[13:00:33] <PMunch> But that's not what we're saying
[13:00:36] <FromDiscord> <ShalokShalom> @PMunch You would need to help less, if the compiler does that
[13:00:49] <FromDiscord> <Rika> yes indeed
[13:01:10] <FromDiscord> <ShalokShalom> Well, that's what I got
[13:01:17] <PMunch> We're all in agreement that they are better for newcomers. I wouldn't mind if someone went through and implemented error messages like that. But I'd prefer it if it was able to be turned down to a less verbose version
[13:01:22] <FromDiscord> <Elegantbeef> We've digressed from full type inference
[13:01:39] <FromDiscord> <ShalokShalom> Same as "full type inference won't let me use tech from 1970, so I am wholly against it"
[13:01:41] <FromDiscord> <Phil> I don't think I see why full type inference would be desireable or why type declarations are bad
[13:01:52] <FromDiscord> <ShalokShalom> Since they are noise
[13:01:54] <FromDiscord> <Phil> They're a clarification and debugging help
[13:01:55] <FromDiscord> <Elegantbeef> Oh pmunch you havent seen my application launcher i made today! üòõ
[13:02:07] <FromDiscord> <Rika> okay
[13:02:08] <PMunch> But that takes a lot of work, and I'd rather have the brilliant people working on the Nim compiler spend their time on more important features
[13:02:25] <FromDiscord> <Elegantbeef> Hey dont call me brilliant!
[13:02:27] <FromDiscord> <Phil> You read code 10 times more than you write it. Having it clear what type a variable is makes it more readable. I completely disagree with type declarations being noise
[13:02:29] <FromDiscord> <ShalokShalom> In reply to @Isofruit "They're a clarification and": Well, but you can have them, when you are debugging and reading code, and NOT needing to type them.
[13:02:56] <FromDiscord> <ShalokShalom> In reply to @PMunch "But that takes a": More important than helping newbies, you mean.
[13:03:02] <FromDiscord> <Elegantbeef> Also no one noticed my procedure mismatch message cleanup so no more error message cleanup
[13:03:09] <FromDiscord> <Rika> okay
[13:03:09] <FromDiscord> <ShalokShalom> And I am talking about Nimskull
[13:03:10] <PMunch> Since one is type declarations noise? You're just being concrete and telling both the reader and the compiler exactly what you expect. This means that errors can be more concise
[13:03:22] <FromDiscord> <ShalokShalom> Andreas had been clear, that he will never do this.
[13:03:37] <PMunch> @ShalokShalom, yes, more important than helping newcomers. There's no point for new people to learn Nim if the language isn't great
[13:03:37] <FromDiscord> <Rika> i highly doubt those in nimskull would do it
[13:03:51] <PMunch> So let's have the compiler devs work on how to make the language great first
[13:03:55] <FromDiscord> <ShalokShalom> In reply to @PMunch "Since one is type": I dont have to tell that. Fsharp figures it out. And is mostly right about it.
[13:04:03] <FromDiscord> <Rika> In reply to @ShalokShalom "I dont have to": keyword mostly?
[13:04:07] <PMunch> @ShalokShalom, not in my experience
[13:04:13] <FromDiscord> <ShalokShalom> In reply to @PMunch "<@208199869301522432>, yes, more important": The language is great already
[13:04:16] <FromDiscord> <ShalokShalom> Otherwise
[13:04:57] <PMunch> As a professional programmer with a degree in computer science I had a hard time understad F# error messages because types somehow trickled through my entire program so I could get an error messages popping up with line numbers miles away from the actual source of the bug
[13:05:12] <FromDiscord> <ShalokShalom> In reply to @Rika "keyword mostly?": Yeah, by far. Very few exceptions. As said, its common agreement, that we use declarations for functions, that do get used in other files.
[13:05:15] <PMunch> @ShalokShalom, well it is pretty great, but there is room for improvement
[13:05:33] <FromDiscord> <ShalokShalom> In reply to @Rika "i highly doubt those": Then we dont need to talk about it.
[13:05:54] <PMunch> Besides, most of the newcomers who try Nim seems to be very happy with how easy it is to learn it. I haven't had a single person in here (bar you) complaining about type inference
[13:05:59] <FromDiscord> <Elegantbeef> So pmunch i'm never going to use XLunch again, https://streamable.com/bt7237 üòõ
[13:06:07] <PMunch> Nooo :(
[13:06:13] <PMunch> My lovely xlunch
[13:06:21] <FromDiscord> <Phil> I've learned my lessons of variables without type annotations, I've come to the conclusion that in terms of what type I have where I want to be explicit to give clarity about the data you're dealing with at any given moment.‚ÜµWhich is an opinion shared at my working environment so far.
[13:06:24] <FromDiscord> <ShalokShalom> In reply to @PMunch "Besides, most of the": Because they dont know it
[13:06:43] <FromDiscord> <ShalokShalom> F# is literally the only language, that can do it, and actually encourages it
[13:06:51] <FromDiscord> <Elegantbeef> Nim can do it
[13:07:11] <FromDiscord> <Elegantbeef> `proc doThing(a: auto)` there we did it
[13:07:18] <FromDiscord> <ShalokShalom> Haskell is too complicated for it to work, particularly due to type classes‚Üµ‚ÜµAnd Elm adds it, if you dont provide it ‚ÜµThey want it in code also
[13:07:25] <PMunch> @Elegantbeef, wait, why didn't you just theme xlunch to look like that?
[13:07:30] <PMunch> Instead of writing your own program?
[13:07:41] <FromDiscord> <Elegantbeef> Cause xlunch uses the DSV and not desktop files
[13:07:51] <FromDiscord> <ShalokShalom> But every fsharp dev, who actually uses it, compared to theorising about it, can not think the language without it
[13:08:00] <PMunch> Well it has a script that converts desktop files to that dsv
[13:08:06] <PMunch> Which is what I use on my system
[13:08:07] <FromDiscord> <Solitude> sucks for them
[13:08:13] <FromDiscord> <Elegantbeef> Sure but i dont want to run that whenever i open a program
[13:08:20] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "Nim can do it": This is new to me. When did this get added?
[13:08:21] <FromDiscord> <Elegantbeef> Well i mean install
[13:08:26] <FromDiscord> <Rika> In reply to @ShalokShalom "This is new to": long time ago
[13:08:28] <FromDiscord> <Rika> no one uses it
[13:08:29] <PMunch> Of course not, that's why it reads the DSV file instead
[13:08:30] <FromDiscord> <Rika> guess why
[13:08:33] <PMunch> It's sort of like a cace
[13:08:35] <PMunch> cache*
[13:08:36] <FromDiscord> <Solitude> In reply to @ShalokShalom "This is new to": what is not new to you?
[13:08:46] <FromDiscord> <Elegantbeef> Yea pmunch exactly my point
[13:08:54] <FromDiscord> <Elegantbeef> Also this is like 100 loc
[13:08:57] <FromDiscord> <Elegantbeef> So why not write a new launcher üòõ
[13:08:59] <PMunch> I've been meaning to write a small Nim program which functions like a small daemon, reading desktop files and keeping the DSV up to date
[13:09:03] <FromDiscord> <ShalokShalom> In reply to @Isofruit "I've learned my lessons": Well, that experience is 100% tied to the implementation you are using
[13:09:05] <FromDiscord> <ShalokShalom> Obviously
[13:10:01] <FromDiscord> <ShalokShalom> In reply to @Rika "long time ago": Well, it would be helpful to add it to the documentation, which is suited for newboes
[13:10:07] <FromDiscord> <haxscramper> Getting to type inference where regular typing barely works in a lot of cases is too ambitious for me
[13:10:09] <FromDiscord> <ShalokShalom> (edit) "newboes" => "newbies"
[13:10:15] <FromDiscord> <haxscramper> Even putting aside personal preferences
[13:10:28] <FromDiscord> <Rika> oh heres the lead nimskull guy i'd say
[13:10:31] <FromDiscord> <Elegantbeef> Ah there's the circle jerky i've grown to love
[13:10:32] <FromDiscord> <ShalokShalom> In reply to @haxscramper "Getting to type inference": Of course, nobody asked for this.
[13:10:56] <FromDiscord> <Phil> It isn't, it's about the experience you have while reading a given codebase.‚Üµ"What type was variable X again? Got to look at place Y to figure out"‚ÜµType is integral information about how a function will work and I don't want to have to infer that information myself while reading.
[13:11:06] <FromDiscord> <ShalokShalom> You just look at it
[13:11:13] <FromDiscord> <haxscramper> In reply to @Rika "oh heres the lead": I'm temporary super busy IRL, so for now I'm on vacation from nimskull
[13:11:13] <FromDiscord> <Rika> In reply to @Isofruit "It isn't, it's about": his argument is that tooling will help
[13:11:15] <FromDiscord> <Rika> and yes i get it
[13:11:17] <FromDiscord> <ShalokShalom> With the solution I propose, you can always do that
[13:11:26] <FromDiscord> <hmmm> hey broskis, can hashset[string] somehow match a partial string that hit? like if the string was something like "path:C:\\blabla" can I write if "path..." in hashset?
[13:11:37] <FromDiscord> <Elegantbeef> No
[13:11:37] <FromDiscord> <Rika> no that doesnt work
[13:11:52] <FromDiscord> <Rika> partial matching makes everything a lot more complicated
[13:12:08] <FromDiscord> <Elegantbeef> You want a `seq` and `startswith`
[13:12:17] <FromDiscord> <ShalokShalom> It would so help, if people could see in practice
[13:12:31] <FromDiscord> <ShalokShalom> Then they would not be blended by the idea, that they have of it
[13:12:41] <FromDiscord> <ShalokShalom> And see the reality
[13:12:42] <FromDiscord> <hmmm> hmm ok, I finally got my options working with set[enum] but those options need some metadata and storing them in hashset seemed neater than using seq
[13:13:16] <FromDiscord> <Elegantbeef> Well you want to use substrs to find a value
[13:13:24] <FromDiscord> <Elegantbeef> You need to use a different collection
[13:13:32] <FromDiscord> <hmmm> hmm I see
[13:13:38] <PMunch> @hmmm, what you could do if you're doing paths is put all of the sub-paths in the hashset
[13:13:45] <PMunch> Not super efficient, but would work
[13:14:06] <PMunch> Of course a better solution would be a proper string search tree
[13:14:08] <FromDiscord> <hmmm> hmm depending on the options the metadata can be a path or not
[13:14:23] <PMunch> What are you doing here?
[13:14:29] <FromDiscord> <Rika> In reply to @PMunch "Of course a better": dont we have some impl of this?
[13:14:29] <FromDiscord> <Elegantbeef> Perhaps time to stop using strings
[13:14:32] <FromDiscord> <Elegantbeef> Types exist
[13:14:38] <PMunch> It sounds like you're hand-rolling some weird dynamically typed thing
[13:15:01] <PMunch> @Rika, not exactly sure, if not someone should write it
[13:15:25] <FromDiscord> <hmmm> nununu we got types nailed down it works and I don't want to change them, I'll fiddle with options some more and find another way
[13:15:37] <FromDiscord> <Elegantbeef> "Types nailed down"
[13:15:38] <FromDiscord> <Elegantbeef> Uh oh
[13:15:39] <FromDiscord> <hmmm> lol
[13:15:43] <FromDiscord> <hmmm> üòÉ
[13:15:56] <FromDiscord> <Elegantbeef> That's 'type decls suck' a second time in one night
[13:15:59] <FromDiscord> <Rika> it works until it doesnt
[13:16:14] <PMunch> @hmmm, what problem are you trying to solve?
[13:16:24] <FromDiscord> <Rika> i really get what he means now though
[13:17:44] <FromDiscord> <hmmm> I'm having my app that is basically 90% ready for github I think, I'm adding some non core side options and those options can came with additional data I need to store, I have a metadata field prepared for it and need to decide if it needs to be string, seq, set or whatever
[13:18:13] <FromDiscord> <Rika> maybe it's a minor(maybe not so minor) inconvenience when i encounter "detyped" code in the wild, if nim were to gain full inference, but i can see some benefit
[13:18:15] <FromDiscord> <Elegantbeef> Pmunch do you by anychance know why some .desktops  have `%U` in there `Exec` variable?
[13:18:20] <FromDiscord> <Rika> i can see demerits too though
[13:18:33] <FromDiscord> <Rika> how would the inference work anyway
[13:18:52] <FromDiscord> <Elegantbeef> Reverse inference and inferred concepts for parameters
[13:18:54] <PMunch> @Elegantbeef, https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#exec-variables
[13:19:04] <PMunch> Yes, it's a list of URLs that can be passed in
[13:19:06] <FromDiscord> <Rika> i dont know about the inferred concept thing
[13:19:11] <FromDiscord> <Rika> its going to be annoying for errors
[13:19:17] <FromDiscord> <Rika> "oh we inferred this for you"
[13:19:27] <FromDiscord> <Elegantbeef> Ah so it doesnt matter to my launcher
[13:19:43] <PMunch> Well, not in it's current state
[13:19:54] <FromDiscord> <Elegantbeef> Not ever
[13:20:05] <PMunch> But if you wanted to add support for a "Open file with" kind of thing then it might matter
[13:20:18] <FromDiscord> <Elegantbeef> I'm the guy that uses `dmenu` and `rofi` in desktop mode
[13:20:24] <FromDiscord> <Elegantbeef> I dont use it to run commands
[13:21:04] <PMunch> Yeah just saying, that's what those are for
[13:21:29] <PMunch> And I've added a bunch of stuff to xlunch I thought I'd never have to use :P
[13:23:59] <FromDiscord> <Elegantbeef> I mean i'm basically writing a desktop mode launcher
[13:24:01] <FromDiscord> <Elegantbeef> It's nothing fancy
[13:24:39] <FromDiscord> <Elegantbeef> I'm very happy with the UI library i used though
[13:24:52] <FromDiscord> <Zoom> Maybe you can use a trie for this? Query all leafs of the tree that start with your key. Unfortunately, would work only for starts of the strings.‚Üµ(@hmmm)
[13:24:56] <FromDiscord> <Elegantbeef> The UI code is less than my search logic
[13:25:38] <PMunch> Which UI library is it?
[13:25:55] <FromDiscord> <Elegantbeef> Owlkettle
[13:26:13] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3TUs full code if interested
[13:26:13] <PMunch> Aaah, yes that did look interesting
[13:26:42] <PMunch> I love that we can write full programs in 100 lines of code
[13:26:57] <FromDiscord> <Elegantbeef> It's something
[13:27:15] <PMunch> Why is view a method?
[13:27:37] <FromDiscord> <Elegantbeef> Owlkettle uses OOP for extending app state
[13:28:02] <PMunch> Aah, I see
[13:28:05] <FromDiscord> <Elegantbeef> Could it be statically dispatched, probably
[13:28:32] <PMunch> Yeah probably
[13:29:00] <PMunch> But for UI OOP is fine
[13:29:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[13:29:25] <FromDiscord> <Elegantbeef> Yea
[13:29:36] <FromDiscord> <Elegantbeef> Have the macro for it anyway
[13:30:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Client Quit)
[13:33:32] *** Joins: gsalazar_ (~gsalazar@132.120.90.149.rev.vodafone.pt)
[13:33:51] *** Quits: gsalazar_ (~gsalazar@132.120.90.149.rev.vodafone.pt) (Remote host closed the connection)
[13:36:40] *** Quits: gsalazar (~gsalazar@194.38.148.130) (Ping timeout: 272 seconds)
[13:47:42] <FromDiscord> <ShalokShalom> In reply to @Rika "maybe it's a minor(maybe": As said. You save, compile, or do anything of that sorts: The types get immediately added to your code. You upload only code that is fully declared.
[13:48:24] <FromDiscord> <Elegantbeef> So you're mutating source code files as their being written?
[13:48:30] <FromDiscord> <Elegantbeef> they're\
[13:49:31] <FromDiscord> <ShalokShalom> Yes
[13:50:02] <FromDiscord> <Elegantbeef> That's wildly unsafe and an IO nightmare
[13:50:03] <FromDiscord> <ShalokShalom> Elm is doing so since 10 years or something, they forcibly format the code on compilation and everybody is happy
[13:50:29] <FromDiscord> <ShalokShalom> IDK why this would be dangerous
[13:50:43] <FromDiscord> <Elegantbeef> Cause you have IO going both ways now
[13:50:52] <FromDiscord> <ShalokShalom> Both ways?
[13:51:09] <FromDiscord> <ShalokShalom> Idk how Elm has implemented this, but surely not in an unsafe way
[13:51:12] <FromDiscord> <Elegantbeef> I'm typing and as i'm typing the tooling is pooping out into my buffer
[13:51:24] <FromDiscord> <ShalokShalom> I have never heard about any issue with it, nor even mentioning that it could be an issue
[13:51:34] <FromDiscord> <ShalokShalom> In reply to @Elegantbeef "I'm typing and as": No, its not like that
[13:51:37] <FromDiscord> <ShalokShalom> On compilation
[13:51:41] <FromDiscord> <ShalokShalom> Optionally on save.
[13:51:46] <FromDiscord> <Elegantbeef> > You save, compile, or do anything of that sorts
[13:51:57] <FromDiscord> <ShalokShalom> Yeah, ditch that anything of that sorts
[13:52:15] <FromDiscord> <ShalokShalom> That was more meant for the case, someone might know about another point in time, to apply this
[13:52:27] <FromDiscord> <ShalokShalom> Its mainly done on compilation
[13:52:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[13:52:42] <FromDiscord> <Rika> In reply to @ShalokShalom "As said. You save,": i mean its still an annoyance, if i'm reading github code and it isnt forced to be typed
[13:52:53] <FromDiscord> <ShalokShalom> In reply to @Rika "i dont know about": I really recommend, you see this in real code
[13:53:02] <FromDiscord> <ShalokShalom> In reply to @Rika "i mean its still": It is!
[13:53:13] <FromDiscord> <ShalokShalom> You cannot upload anything, without being formatted.
[13:53:24] <FromDiscord> <ShalokShalom> One thing is, that Elm also hosts its package repository.
[13:53:31] <FromDiscord> <Rika> if its only type formatted sure, but i want my code to be readable in my way
[13:53:37] <FromDiscord> <Rika> In reply to @ShalokShalom "One thing is, that": nim doesnt lol
[13:53:38] <FromDiscord> <ShalokShalom> Nothing there is allowed unformatted.
[13:53:49] <PMunch> That would require every editor to know this (spoiler, they wont)
[13:53:58] <FromDiscord> <ShalokShalom> In reply to @Rika "if its only type": Well, Elm enforces a certain way. But we can do this only for types.
[13:54:05] <FromDiscord> <ShalokShalom> In reply to @PMunch "That would require every": No, why?
[13:54:19] <FromDiscord> <ShalokShalom> Its just done by the compiler
[13:54:25] <FromDiscord> <ShalokShalom> It is actually part of the compiler, iirc
[13:54:29] <PMunch> To add types into the file when you save them?
[13:54:45] <PMunch> Oh so you compile and upload a compilation artifact instead of source code?
[13:54:56] <PMunch> That sounds.. Strange
[13:55:05] <FromDiscord> <Rika> i mean nim is all about strange no?
[13:55:09] <PMunch> And what happens if I use the edit feature on a PR in GitHub?
[13:55:29] <FromDiscord> <Rika> well i assume its not t ogithub in elms case
[13:55:54] <PMunch> There has actually been cases of languages which didn't use text formats for their sources
[13:55:58] <PMunch> But rather binary formats
[13:56:09] <PMunch> So you would need a compatible editor to even open the code
[13:56:31] <PMunch> They haven't really caught on though
[13:56:51] <FromDiscord> <Rika> in nim's case whos to say though that "i'll use nim compilers upload option to upload my proj"
[13:57:00] <FromDiscord> <Rika> they can easily bypass that for our case
[13:57:04] <FromDiscord> <Rika> so thats not really feasible
[13:59:33] <FromDiscord> <Elegantbeef> You guys arent storing your nim code as a Json AST tree?
[13:59:57] <FromDiscord> <Elegantbeef> The tree is on json so no that's not redundant
[14:00:19] <FromDiscord> <aph> ohh, i can store ast in json?
[14:00:32] <FromDiscord> <aph> that might help a bit, am writing a transpiler from python to nim
[14:00:34] <FromDiscord> <Rika> oh god see what you did beef
[14:00:45] <FromDiscord> <Elegantbeef> Lol
[14:00:51] <FromDiscord> <Elegantbeef> I made a joke
[14:00:54] <FromDiscord> <Phil> Beef says one line
[14:00:58] <FromDiscord> <Phil> Immediately spawns a sin
[14:01:06] <FromDiscord> <aph> In reply to @Isofruit "Immediately spawns a sin": guess i'm the sin
[14:01:09] <FromDiscord> <aph> üòà
[14:02:26] *** Joins: lumo_e (~enrico@151.29.53.201)
[14:04:19] <FromDiscord> <ShalokShalom> In reply to @Rika "in nim's case whos": Well, not if you make that law in Nimskull
[14:04:33] <FromDiscord> <Rika> which likely wont
[14:04:51] <FromDiscord> <Rika> how do you make it law anyway?
[14:05:06] <FromDiscord> <ShalokShalom> In reply to @PMunch "Oh so you compile": No, you just add them, where they belong. How you would normally add them, just by the compiler. The inference becomes visible
[14:05:18] <FromDiscord> <Elegantbeef> You neuter the compiler so it follows your 3 tenants
[14:05:20] <FromDiscord> <ShalokShalom> In reply to @Rika "how do you make": Well, look at Elm üòõ
[14:05:26] <FromDiscord> <Rika> we're not elm
[14:05:29] <FromDiscord> <Rika> we dont have the same structure
[14:05:36] <FromDiscord> <ShalokShalom> I am not talking about Nim
[14:05:37] <FromDiscord> <Rika> we dont have a single central repo
[14:05:41] <FromDiscord> <Rika> we dont want a single central repo
[14:05:48] <FromDiscord> <Rika> nimskull follows nim
[14:05:49] <FromDiscord> <Elegantbeef> We are legion
[14:05:49] <FromDiscord> <ShalokShalom> As said, Andreas has already said he wont do full inference
[14:05:56] <FromDiscord> <Rika> nimskull will not vary too much from nim
[14:05:59] <FromDiscord> <Rika> i doubt they will
[14:06:04] <FromDiscord> <Elegantbeef> I know saem he's also opposed to it iirc
[14:06:21] <FromDiscord> <Rika> i cant imagine disruptek liking this at all lmfao
[14:06:24] <FromDiscord> <Elegantbeef> He wants to have concepts be used more
[14:06:29] <FromDiscord> <Rika> we're mentioning nimskull devs btw
[14:06:32] <FromDiscord> <Elegantbeef> Saem that is
[14:06:43] <FromDiscord> <ShalokShalom> In reply to @Rika "we dont want a": Well, you could still make it yourself. Like downloading a file and converting it yourself. It would just miss the Github visibility of types.
[14:07:09] <FromDiscord> <Tanguy> You can already do full inference with auto, what more do you want?
[14:07:13] <FromDiscord> <ShalokShalom> In reply to @Rika "i doubt they will": Well, then its done.
[14:07:37] <FromDiscord> <ShalokShalom> In reply to @Tanguy "You can already do": Thats a good step in the right direction. When you type it, you still add noise
[14:07:52] <FromDiscord> <ShalokShalom> So more dense code which is in line with Nims strategy
[14:07:53] <PMunch> You say noise, I say clarity
[14:08:05] <FromDiscord> <ShalokShalom> ü§∑‚Äç‚ôÇÔ∏è
[14:08:06] <FromDiscord> <Tanguy> You can probably write a macro which adds auto everywhere
[14:08:07] <FromDiscord> <Rika> this is an opinion thing really
[14:08:07] <FromDiscord> <Phil> I'll stick with Pmunch on that one
[14:08:27] <FromDiscord> <ShalokShalom> If I like clarity, I hover with the mouse over it.
[14:08:30] <FromDiscord> <Elegantbeef> You cannot write a macro that inserts auto everywhere
[14:08:37] <FromDiscord> <Rika> and many people dont want to do that
[14:08:40] <FromDiscord> <Phil> That's 2 seconds of my life wasted repeatedly
[14:08:52] <FromDiscord> <Phil> 5 variables, make that 10 seconds + mouse-movement-time
[14:08:56] <FromDiscord> <Rika> this is super opinionated really
[14:09:19] <FromDiscord> <Rika> i mean programming languages in general are
[14:09:22] <FromDiscord> <Rika> opinionated
[14:09:48] <FromDiscord> <Tanguy> Nim is amongst the less opiniated one, since he generally lets you choose what you want
[14:10:19] <FromDiscord> <Elegantbeef> Also how do you do type inference with sub range types?
[14:10:24] <FromDiscord> <Phil> ~~I feel like that word does not suffice for describing some compilers out there but in general I agree~~
[14:10:31] <FromDiscord> <Rika> having choice is an opinion as well, some would argue
[14:10:37] <FromDiscord> <Rika> otherwise people would hate go
[14:10:42] <FromDiscord> <ShalokShalom> In reply to @Isofruit "That's 2 seconds of": To me, its time wasted reading this
[14:10:50] <FromDiscord> <Rika> "well you dont have to read it"
[14:10:50] <FromDiscord> <ShalokShalom> Since in most cases, I dont want
[14:10:58] <FromDiscord> <ShalokShalom> In reply to @Rika ""well you dont have": Its code noise
[14:11:04] <FromDiscord> <ShalokShalom> You neither have to read Java code noise
[14:11:07] <FromDiscord> <Elegantbeef> I'm actually interested in how type inference handles subrange types
[14:11:18] <FromDiscord> <ShalokShalom> Ask F# üòõ
[14:11:43] <FromDiscord> <Elegantbeef> > Alas, the F# type system doesn't provide a way to define a subrange type -- that is, a type representing some subset of the values representable by an existing type.
[14:11:45] <FromDiscord> <ShalokShalom> https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system
[14:11:49] <FromDiscord> <Phil> In reply to @ShalokShalom "Its code noise": I mean, the other way around could be described as code obfuscation
[14:11:54] <FromDiscord> <Rika> we dont use HM type system
[14:11:55] <FromDiscord> <Elegantbeef> It doesnt support subrange types
[14:12:04] <FromDiscord> <ShalokShalom> Its an answer to his question
[14:12:09] <FromDiscord> <Rika> there are concepts in nim which arent compatible with the HM system i am led to believe
[14:12:27] <FromDiscord> <Elegantbeef> Well subrange types is a an example that doesnt work with type inference
[14:12:37] <FromDiscord> <Elegantbeef> You cannot infer an integer should be within 0..10
[14:12:47] <FromDiscord> <Elegantbeef> Unless you have `if x in 0..10` of course
[14:13:03] <FromDiscord> <Tanguy> `assert x in 0..10`, and then smart compilers which reads the predicate
[14:13:19] <FromDiscord> <Rika> so flow typing
[14:13:22] <FromDiscord> <Elegantbeef> Hey i know you read my RFC so shush üòõ
[14:13:46] <FromDiscord> <haxscramper> @sh_oe why not argue for better lsp that would completet the types for you somehow?
[14:13:54] <FromDiscord> <haxscramper> And also plugin to hide types in editor
[14:13:56] <FromDiscord> <Rika> wrong ping lol
[14:14:06] <FromDiscord> <haxscramper> @ShalokShalom
[14:14:07] <FromDiscord> <haxscramper> Righ
[14:14:32] <FromDiscord> <haxscramper> Anyway, it would be easier to hide things you don't like then restructure the whole world
[14:14:37] <FromDiscord> <Tanguy> :p though it's programming by contract, not just your rfc
[14:14:42] <PMunch> Oh yeah, @hmmm I say you asked yesterday for a ternary type (true, false, falsefalse) and got recommended a Option[bool], another option (aport from enums) would be to return a range[0..2] type https://play.nim-lang.org/#ix=3TUy
[14:15:09] <FromDiscord> <Zoom> Don't we all?
[14:15:25] <FromDiscord> <Elegantbeef> I'm very vocal about encouraging concept usage
[14:15:43] <FromDiscord> <Phil> Did they get moved out of the experimental section yet?
[14:15:44] <FromDiscord> <Elegantbeef> No hax dont say "they dont work"
[14:15:49] <FromDiscord> <Elegantbeef> No they're still there
[14:15:56] <FromDiscord> <Elegantbeef> Doesnt meant you cant use them
[14:16:04] <FromDiscord> <Elegantbeef> Hax stop typing
[14:16:07] <FromDiscord> <haxscramper> I couldn't figure out how to use them
[14:16:15] <FromDiscord> <Elegantbeef> I swear if you write "they dont work" i'm flying to you
[14:16:24] <FromDiscord> <Phil> From what I get so far, you essentially just do compile time asserts in them
[14:16:35] <FromDiscord> <haxscramper> I mean, I'm willing to give the benefit of the doubt, but they literally don't work for me
[14:16:43] <FromDiscord> <haxscramper> I would also like concepts
[14:16:54] <FromDiscord> <haxscramper> I really love the idea
[14:17:00] <FromDiscord> <haxscramper> Just like view types
[14:17:11] <FromDiscord> <Elegantbeef> I'll give you view types not working
[14:17:16] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[14:17:24] <FromDiscord> <Elegantbeef> 99% of the time i run into a codegen error
[14:17:25] <FromDiscord> <Zoom> That's what I think to myself when people start bashing Rust \:P‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[14:17:25] <FromDiscord> <haxscramper> And i even agree with clybber that it is worth expending energy to make old concepts work
[14:17:31] <FromDiscord> <ShalokShalom> In reply to @haxscramper "And also plugin to": For me, its mostly that I dont know them in advance. Most of the type, I want types to have the same handle as the variable/function name, or something sane as default. I dont like to care for types. Same as you want to rely on an airbag, and not caring for it while driving.
[14:18:30] <FromDiscord> <haxscramper> I'd you didn't want to care for types you would be using dynamic language
[14:18:39] <FromDiscord> <haxscramper> That's where types are airbag
[14:18:53] <FromDiscord> <ShalokShalom> It works in F#
[14:19:01] <FromDiscord> <haxscramper> If everything blows up at least there some safety after the impact
[14:19:16] <FromDiscord> <haxscramper> But airbag does not prevent impact
[14:19:18] <FromDiscord> <ShalokShalom> Ergonomics of dynamic languages, stability and refactoring of static languages
[14:19:27] <FromDiscord> <Zoom> I'd prefer to not care about names instead, they are noise, not types.‚Üµ(@ShalokShalom)
[14:19:37] <FromDiscord> <ShalokShalom> Sometimes
[14:19:48] <FromDiscord> <ShalokShalom> Then, you dont like to add types even more
[14:19:50] <FromDiscord> <Elegantbeef> No more paramters we just do `MyType[0]`
[14:20:03] <FromDiscord> <ShalokShalom> Why not just imply [auto]?
[14:20:07] <FromDiscord> <ShalokShalom> That would already help
[14:20:13] <FromDiscord> <ShalokShalom> I like to have it out of my way.
[14:20:17] <FromDiscord> <Phil> ... oh shite, I just looked at my first draft of a "SearchableModel" Concept... I understand none of it anymore, like half of it is macros and templates ;_;
[14:20:18] <FromDiscord> <Elegantbeef> Cause implying auto is a mess
[14:20:30] <FromDiscord> <ShalokShalom> Then its not good
[14:20:37] <FromDiscord> <ShalokShalom> I assume that just some type deduction?
[14:20:42] <FromDiscord> <ShalokShalom> Not some real inference
[14:20:44] <FromDiscord> <Elegantbeef> No it's generic
[14:20:48] <FromDiscord> <ShalokShalom> Well -.-
[14:20:57] <FromDiscord> <Elegantbeef> Auto means it takes in any type
[14:20:57] <FromDiscord> <ShalokShalom> Why do you offer it to me as a solution anyway
[14:21:02] <FromDiscord> <Elegantbeef> And if the instantiation failes it fails
[14:21:04] <FromDiscord> <ShalokShalom> Oh, even worse.
[14:21:08] <FromDiscord> <Elegantbeef> Cause it works the same as type inference
[14:21:10] <FromDiscord> <ShalokShalom> Thats not type inference.
[14:21:12] <FromDiscord> <ShalokShalom> No
[14:21:13] <FromDiscord> <ShalokShalom> Hell not
[14:21:24] <FromDiscord> <ShalokShalom> Inference does not mean it takes any type
[14:21:40] <FromDiscord> <ShalokShalom> Inference means, its intelligently infers the type for you
[14:21:49] <FromDiscord> <ShalokShalom> It knows, which type is mostly meant.
[14:21:56] <FromDiscord> <ShalokShalom> You cannot just use it as a dynamic language
[14:21:59] <FromDiscord> <ShalokShalom> Thats horrible
[14:22:17] <FromDiscord> <Elegantbeef> The difference between `auto` and F# type inference is an instantiation error vs descriptive error
[14:22:19] <FromDiscord> <Phil> "Determine the type that must be there for me at compile time" vs "Accept any type at runtime" I think is where the hang up is, auto is the latter I assume?
[14:22:28] <FromDiscord> <Elegantbeef> No
[14:22:35] <FromDiscord> <Elegantbeef> Both are static at compile time
[14:22:49] <FromDiscord> <ShalokShalom> Inference in F# knows which type is meant. 95% of the time.
[14:22:51] <FromDiscord> <Elegantbeef> F# type inference in parameters is identical to unconstrained generic polymorphism
[14:23:00] <FromDiscord> <ShalokShalom> Sometimes you have to go on and add more code, so that it works.
[14:23:01] <FromDiscord> <Tanguy> Yes you can beef
[14:23:02] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3TUz
[14:23:11] <FromDiscord> <ShalokShalom> Or add the type temporarily
[14:23:14] <FromDiscord> <Elegantbeef> You said everywhere
[14:23:26] <FromDiscord> <Tanguy> Oh right, the good old "can't push custom macros"
[14:23:27] <FromDiscord> <ShalokShalom> How you mean?
[14:23:43] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3TUz" => "https://play.nim-lang.org/#ix=3TUB"
[14:24:11] <FromDiscord> <Elegantbeef> How do i mean what?
[14:25:12] <FromDiscord> <Elegantbeef> F#'s type inference generates what Nim considers a concept and it fails the predication before instantiation instead of during instantiation
[14:25:31] <FromDiscord> <Elegantbeef> The way to do what you want is really with manual concepts in Nim
[14:26:21] <FromDiscord> <ShalokShalom> You mean, how to do something that I want automatic, is done by hand?
[14:26:41] <FromDiscord> <Elegantbeef> Nim isnt magic what you want isnt going to magically appear
[14:26:43] <FromDiscord> <ShalokShalom> Manual concepts sound like I have to care about them again.
[14:27:00] <FromDiscord> <ShalokShalom> I didnt ask for it to magically appear.
[14:27:08] <FromDiscord> <ShalokShalom> And I didnt ask for it in Nim
[14:27:18] <FromDiscord> <Elegantbeef> I'm going to sleep so have fun
[14:27:21] <FromDiscord> <ShalokShalom> I know it wont come in Nim.
[14:27:24] <FromDiscord> <ShalokShalom> Good night
[14:27:24] <FromDiscord> <Phil> Move debate to offtopic if not nim related?
[14:27:27] <FromDiscord> <ShalokShalom> Sleep well
[14:27:35] <FromDiscord> <ShalokShalom> It was Nimskull related.
[14:28:47] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3TUC
[14:28:59] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3TUC" => "https://play.nim-lang.org/#ix=3TUD"
[14:29:05] *** Joins: msimm (~msimm@p200300cd4701a600411b7f74dca24154.dip0.t-ipconnect.de)
[14:30:42] <FromDiscord> <Zoom> Nimskull has a whole Matrix space with a bunch of channels there\: #nimworks\:envs.net‚Üµ(@ShalokShalom)
[14:31:30] <FromDiscord> <Phil> Which is why I'm tempted to still suggest offtopic
[14:36:22] <FromDiscord> <ShalokShalom> At all started, since I wanted to hear the opinion of people here about Nimskull
[14:36:26] <FromDiscord> <ShalokShalom> Its over now.
[14:41:50] <FromDiscord> <qb> I'm trying to hit a pattern on a byte string without any libraries. Any ideas? https://play.nim-lang.org/#ix=3TUH
[14:44:00] <FromDiscord> <Phil> I haven't actually worked with bytestrings before, but from a glance of it, could you try to use as pattern a seq of sets of bytes?
[14:44:14] <FromDiscord> <Phil> With a given set containing all allowed bytes for that position
[14:45:47] <FromDiscord> <Phil> If the implementation is allowed to be naive then you could do the naive way and iterate over the bytes, look for a hit where a byte matches the first set in your byte-set-seq and try to match all other sets
[14:48:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[14:49:15] <FromDiscord> <Phil> Hmm you'd still need "matches any" placeholders, so maybe rather a `seq[Option[Set<<Whatever type a bytestring has>>]]` and a custom `contains(s: string, pattern: Option[Set[<bytestringtype>]]): bool` that returns true when Option is none
[14:50:14] <FromDiscord> <Phil> (edit) "`seq[Option[Set<<Whatever type a bytestring has>>]]`" => "`seq[Option[Set[byte-type or something]]]`" | "Option[Set[<bytestringtype>]]):" => "Option[Set[byte-type or something]]):"
[14:53:39] <PMunch> @qb, your problem is that you don't stop when you hit a match
[14:54:20] <FromDiscord> <Phil> Ohhhh this was a "I have a bug" question
[14:55:32] <PMunch> This works @qb: https://play.nim-lang.org/#ix=3TUL
[14:58:24] <PMunch> Wait, that's not right. This is right: https://play.nim-lang.org/#ix=3TUO
[14:59:57] <FromDiscord> <Phil> Is the intent to get the starting index of the first hit?
[15:00:20] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3TUQ
[15:00:38] <PMunch> @Phil, oh wait, in that case my version is not right either :P
[15:00:48] <PMunch> It would return the last index of the character in the pattern
[15:00:53] <PMunch> For the first match
[15:01:31] <FromDiscord> <Phil> Check, I was unsure whether qb wanted that or the number of matches
[15:01:36] <PMunch> I assumed that was what they wanted
[15:02:04] <FromDiscord> <Phil> Makes sense, getting the index of the first isn't much of an addition either way
[15:02:21] <PMunch> Ah well, if they want number of matches it's a simple matter of not having `return` where I have it, but rather `hitChars = 0; inc result`
[15:02:38] <FromDiscord> <Phil> Could also just go result - pattern.len()
[15:02:47] <PMunch> But they where increasing the result in their original version, so I assumed it would be the position
[15:02:57] <PMunch> Yeah, that's pretty much how you'd solve that
[15:03:20] <PMunch> Or if you're cheeky start of result at negative pattern length ;)
[15:04:11] <PMunch> My version would return bytes.len in the case the pattern was not found as well, which is a bit strange :P
[15:06:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[15:08:08] <FromDiscord> <Phil> Petition to make the return type an optional
[15:14:35] <PMunch> Hmm, someone should add support for automatic sentinel values in Option
[15:15:10] <PMunch> If I return Option[Positive] or Option[range[0..100]] it should just pick a number outside of the range and use that as a sentinel value
[15:15:17] <PMunch> Avoids having a separate bool field
[15:21:39] <FromDiscord> <Zoom> I remember I suggested something like that with someone here or on the forum, may be it was Hax.‚Üµ(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[15:23:44] <FromDiscord> <Zoom> That would be Type Specialization, in cpp lingo, right?
[15:26:23] <PMunch> Hmm, I'm unable to find any good results for that term
[15:26:27] <PMunch> But maybe
[15:26:55] <PMunch> This would be pretty easy to add in Nim
[15:27:38] <PMunch> Option is already specialised for pointer types (although that seems to be a super bad idea
[15:27:40] <PMunch> )*
[15:29:34] <FromDiscord> <Zoom> It's interesting to try to implement some generic way to specialize for all range types.
[15:30:05] <PMunch> Shouldn't be that hard I think
[15:30:48] <PMunch> Get the underlying base type, check high and low for the range and find a point that is outside of that but still inside the base type
[15:30:55] <PMunch> This could also work for enums of course
[15:52:36] *** Quits: msimm (~msimm@p200300cd4701a600411b7f74dca24154.dip0.t-ipconnect.de) (Quit: Leaving)
[15:55:23] *** Joins: xet7 (~xet7@user/xet7)
[15:58:26] <FromDiscord> <ShalokShalom> Where do I find docs about concepts?
[15:58:29] <FromDiscord> <ShalokShalom>  https://media.discordapp.net/attachments/371759389889003532/959051551593345064/unknown.png
[15:59:31] <PMunch> https://nim-lang.org/docs/manual_experimental.html#concepts
[16:02:25] <FromDiscord> <ShalokShalom> Thanks a lot
[16:03:01] <FromDiscord> <ShalokShalom> Well, that is awesome, and I didnt knew Nim has type classes
[16:03:12] <FromDiscord> <ShalokShalom> But idk how this should replace type inference
[16:03:26] <FromDiscord> <ShalokShalom> As Elegantbeef has suggested
[16:10:49] <FromDiscord> <Forest> How hard would it theoretically be to make a JVM backend for Nim? What would be the limitations/potential complications?
[16:15:19] <FromDiscord> <Rika> making the backend
[16:15:23] <FromDiscord> <Rika> is the complication
[16:15:27] <FromDiscord> <Rika> xd
[16:15:49] <FromDiscord> <Rika> maybe the general compatibility of the ideas of nim with the JVM
[16:18:27] <FromDiscord> <ShalokShalom> In reply to @Forest "How hard would it": It already does.
[16:18:46] <FromDiscord> <Forest> Wdym?
[16:18:47] <FromDiscord> <Forest> @ShalokShalom
[16:18:53] <FromDiscord> <Forest> Nim doesn't have a JVM backend
[16:18:53] <FromDiscord> <Rika> jnim is not a jvm backend i believe
[16:18:55] <FromDiscord> <Forest> Only JS
[16:19:04] <FromDiscord> <Forest> In reply to @Rika "jnim is not a": Yeah that's just JNI bindings
[16:19:12] <FromDiscord> <ShalokShalom> GraalVM
[16:19:14] <FromDiscord> <Forest> In reply to @Rika "maybe the general compatibility": Hm fair
[16:19:24] <FromDiscord> <ShalokShalom> It compiles LLVM code
[16:19:27] <FromDiscord> <Forest> In reply to @ShalokShalom "GraalVM": I don't understand how you'd compile native code to the JVM with Graal tho
[16:19:33] <FromDiscord> <ShalokShalom> https://en.wikipedia.org/wiki/GraalVM
[16:19:35] <FromDiscord> <Forest> In reply to @ShalokShalom "It compiles LLVM code": Oh?
[16:20:05] <FromDiscord> <ShalokShalom> https://www.graalvm.org/22.0/reference-manual/llvm/
[16:20:32] <FromDiscord> <ShalokShalom> I think you could run theoretically Javascript code as well, so basically every compilation target is supported.
[16:20:37] <FromDiscord> <Forest> Hm neat, but i still have no idea how I'd do that lol
[16:20:53] <FromDiscord> <ShalokShalom> Well, you compile LLVM code. Graal is indifferent to that
[16:21:00] <FromDiscord> <ShalokShalom> If you compile Rust, Nim or Haskell
[16:21:19] <FromDiscord> <ShalokShalom> Graal does care only about LLVM or its other implementations.
[16:21:20] <PMunch> eu
[16:21:32] <FromDiscord> <Forest> But how would you access Java classes and libraries lol
[16:21:43] <FromDiscord> <ShalokShalom> Read the documentation.
[16:22:08] <FromDiscord> <Forest> To me the main reason I'd want a JVM backend for Nim would purely be for the syntax, Java is just bleh, Scala and Kotlin don't fit the bill either
[16:22:11] <FromDiscord> <Forest> Hm fair enough
[16:23:22] <PMunch> Sorry, I was testing out my keyboard
[16:23:37] <PMunch> Turns out I have a wire that's come loose
[16:23:49] <PMunch> So it kept spamming random keys
[16:24:09] <FromDiscord> <ShalokShalom> https://www.graalvm.org/22.0/reference-manual/llvm/Interoperability
[16:25:05] <FromDiscord> <ShalokShalom> In reply to @Forest "To me the main": You know Scala 3 is fairly different, a complete redesign including optional "indentation to build blocks"?
[16:25:41] <FromDiscord> <Forest> Hm, I'll check it out again later
[16:25:45] <FromDiscord> <ShalokShalom> In reply to @Forest "To me the main": Only issue is, that this is not compatible with normal JVM. So in a company, you wont be allowed using it
[16:25:59] <FromDiscord> <ShalokShalom> While you wont be allowed using Nim in the first place, so ..
[16:26:02] <FromDiscord> <Forest> Oof fair
[16:29:04] *** Joins: toulene (~toulene@user/toulene)
[16:31:00] <FromDiscord> <ShalokShalom> Hmm, maybe it would make sense, to advertise this more?
[16:33:42] <FromDiscord> <Rika> if you want, its a non-goal for nim i believe
[16:35:49] <PMunch> Depends on the company, I've been sprinkling some Nim here and there at work
[16:37:28] <FromDiscord> <Phil> Given I do webdev, the ecosystem would need to fast track development of quite a few packages very significantly before mine would even begin to contemplate
[16:38:09] <PMunch> I do a little webdev in Nim, but it's mostly the server side
[16:38:19] <FromDiscord> <Phil> They would need an opinionated fully encompassing framework to make it work
[16:38:49] <PMunch> Ah, they're that kind of crowd
[16:38:54] <FromDiscord> <Phil> I was actually only referring to the server side
[16:39:03] <FromDiscord> <Phil> Frontend is angular
[16:40:25] <FromDiscord> <Phil> Basically if we can expand prologue to fully become like Django with Django rest framework but in nim then we've got a starting point
[16:41:17] <PMunch> Wait, what part of Django is it missing
[16:41:24] <PMunch> Not very familiar with Django
[16:41:27] <FromDiscord> <Phil> In reply to @PMunch "Ah, they're that kind": Current experience is that even if the framework has an intended way of doing things people develop around it
[16:41:38] <FromDiscord> <Phil> (edit) "In reply to @PMunch "Ah, they're that kind": Current experience is that even if the framework has an intended way of doing things people develop around it ... " 03added "sometimes"
[16:44:39] <PMunch> Oh I almost forgot about this: https://github.com/PMunch/webexperiment
[16:44:56] <PMunch> Would probably work much better with ARC
[16:45:13] <PMunch> I wonder how ARC works across dynamic libraries
[16:45:51] <FromDiscord> <Phil> Django signals, fully encompassing database management, a fully featured orm (norm doesn't do views and can't deal with nosql), plug and play elasticsearch integration, async logging appender
[16:45:59] <FromDiscord> <Phil> Off the top of my head
[16:46:15] <PMunch> Ah I see
[16:47:01] <PMunch> If Nim provided a better way to identify modules I'd do some more work on superlog as well
[16:47:13] <PMunch> ORMs are hard though
[16:49:15] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:49:29] <FromDiscord> <Phil> Yeh. What bugs me is that in norm I can't fetch a record of table a and all records with a fk pointing to that record from table b in one query
[16:50:32] <FromDiscord> <Phil> Not sure if the Django orm could do that, but in norm you have to fetch every many to x relationship to your record in a separate query
[16:51:04] <PMunch> OUch, that's not great
[16:52:47] <FromDiscord> <Phil> For my usecase that's fine, the way my stuff is structured I'll never fetch a seq of entries and then query the many to x relationship of every single one
[16:52:50] <FromDiscord> <Phil> But damn
[16:53:29] <FromDiscord> <Phil> Still means that if I want to look at the full data of one entry I'll be doing 6 queries at times
[16:55:11] <FromDiscord> <Phil> Do we actually have a good messaging system in norm? Something like active q
[16:55:24] <FromDiscord> <Phil> (edit) "active q" => "activemq"
[16:55:39] <FromDiscord> <Phil> (edit) "norm?" => "nim?"
[16:59:05] <FromDiscord> <Phil> Actually, we wouldn't need our own messaging system, just clients for activemq
[17:00:00] <PMunch> I'm using librdkafka in my applications, works fine
[17:01:23] <FromDiscord> <ajusa> does anyone know why Nim's JS backend doesn't use string/js objects directly as backing for a nim string and a Nim table? Instead a Nim string is an array of bytes and a Table is the entire internal representation, which is very inefficient.
[17:02:11] <PMunch> Probably for compatibility with Nim libraries, but I'm not sure
[17:02:41] <PMunch> array of bytes shouldn't be inefficient though, is it?
[17:03:04] <FromDiscord> <ajusa> well it's a whole Javascript array, so it's implemented in JS rather than in the native JS engine
[17:04:08] <FromDiscord> <ajusa> each "byte" is actually 8 bytes from my understanding, so a string takes up 8x the memory because it's actually an array of numbers less than 256 (but the JS engine doesn't know that)
[17:04:31] <PMunch> Oh yikes, that's not great
[17:05:07] <PMunch> I thought the Nim JS target was pretty good at doing stuff which made JS able to optimise things
[17:06:01] <FromDiscord> <ajusa> but the last time someone tried making the default std library more compatible with the JS backend I think araq shut it down: https://github.com/nim-lang/Nim/pull/17373#issuecomment-896623016‚Üµit's kind of a pain to pull everything into a new module though
[17:06:27] <FromDiscord> <ajusa> In reply to @PMunch "I thought the Nim": I mean it's acceptable but there's a lot of performance being left behind
[17:06:31] <FromDiscord> <ShalokShalom> In reply to @Rika "if you want, its": Well, it doesnt need a goal, in the sense of Nim has anything to do for it.
[17:07:39] <FromDiscord> <ajusa> especially the table thing though - Nim's implementation has the entire hashing function implemented in JS, which is probably 10x slower than just using an object. Thankfully `jsffi` has a type called JsAssoc which is basically a table, but it doesn't have all of the procs from `std/tables` so it isn't great either.
[17:07:52] <FromDiscord> <ShalokShalom> But if someone else is implementing it on such a huge platform, why would we ignore that
[17:09:40] <PMunch> @ajusa, I'm guessing that's why the tables module isn't running as a JsAssoc, because it wouldn't be compatible
[17:09:59] <FromDiscord> <Phil> Thaaaat solidifies me in my belief I really should keep my current frontend in angular, that sounds painful to even understand
[17:12:06] <FromDiscord> <Phil> I wonder if I'll have to start eating my words once WASM gets enough capabilities that one would actually want to write frontends with it and not feel limited
[17:12:25] <FromDiscord> <Phil> Which actually reminds me that I should check what WASM has gained in the meantime
[17:12:49] <FromDiscord> <ajusa> In reply to @Isofruit "Thaaaat solidifies me in": to be clear - the JS backend works perfectly well for pretty much everything I've thrown at it. I'm just more concerned about performance and code size. Eg, a simple hello world type thing that uses std/tables is 10kb gzipped and minified
[17:13:36] <FromDiscord> <ajusa> Nim's forum system does use it heavily after all, but I think it downloads like 800kb of JS
[17:13:50] <FromDiscord> <ShalokShalom> In reply to @Isofruit "I wonder if I'll": I think wasm is already ready, since it can run Godot :p
[17:14:05] <FromDiscord> <ShalokShalom> You can run an entire game in it, what would it need?
[17:14:18] <FromDiscord> <Phil> Last I checked some DOM manipulation stuff was still inconvenient
[17:14:32] <FromDiscord> <Phil> Which has been a while to be fair
[17:14:33] <FromDiscord> <ShalokShalom> ü§∑‚Äç‚ôÇÔ∏è
[17:18:55] <FromDiscord> <Phil> From what I can find on the DOM front not a lot has changed.‚ÜµThe usecase appears to remain that if you have a single heavy duty computation step it might make sense to outsource that to WASM etc.
[17:19:18] <FromDiscord> <Phil> (edit) "single" => "single/low number of"
[17:19:24] <FromDiscord> <Phil> (edit) "step" => "steps"
[17:21:42] <FromDiscord> <Phil> Though I guess you could write an entire QT-frontend and run that via WASM?
[17:23:18] <FromDiscord> <ajusa> sent a code paste, see https://paste.rs/1Ft
[17:26:11] <FromDiscord> <Phil> I find myself saddened by the fact "GTK in WASM" doesn't produce google hits
[17:28:43] <FromDiscord> <Phil> Writing a webpage client in QT and compiling that to WASM is something I'd actually contemplate
[17:29:23] <FromDiscord> <Phil> It sounds still like the experience would be sandpaper-smooth, but it would be interesting at the very least
[17:29:34] <FromDiscord> <ajusa> yeah that sounds painful
[17:30:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[17:31:12] <FromDiscord> <Phil> In reply to @ajusa "yeah that sounds painful": I mean, hopefully whatever comes out at the end is a bit faster than your typical angular code to the point that even your phone could load the page and have a desktop-like experience
[17:31:14] *** Joins: rockcavera (~rc@192.12.112.192)
[17:31:14] *** Quits: rockcavera (~rc@192.12.112.192) (Changing host)
[17:31:14] *** Joins: rockcavera (~rc@user/rockcavera)
[17:31:30] <FromDiscord> <ShalokShalom> In reply to @Isofruit "I find myself saddened": GTK does even run fine on Windows and MacOS
[17:31:36] <FromDiscord> <ShalokShalom> How would it run on the web?
[17:31:46] <FromDiscord> <Phil> A man can dream Shalok!
[17:31:54] <FromDiscord> <m4ul3r> sent a code paste, see https://play.nim-lang.org/#ix=3TVa
[17:32:15] <FromDiscord> <ShalokShalom> That sounds more like delusion. üòõ
[17:32:28] <FromDiscord> <ShalokShalom> Close to a dream, just not quite like it üòâ
[17:32:54] <FromDiscord> <ShalokShalom> (edit) "does" => "doesnt"
[17:33:01] <FromDiscord> <ShalokShalom> (edit) "doesnt" => "does not"
[17:33:21] <FromDiscord> <Phil> Also you said it doesn't run "fine"... does that mean they run at all? I was under the impression GTK is pretty much dead outside of linux
[17:33:26] <FromDiscord> <Phil> (edit) "Also you said it doesn't run "fine"... does that mean they run at all? I was under the impression GTK is pretty much dead ... outside" 03added "completely"
[17:33:32] <FromDiscord> <Phil> (edit) "linux" => "linux, with not even the faintest signs of life"
[17:34:12] <FromDiscord> <ShalokShalom> https://www.youtube.com/watch?v=gGZyVSOnqm0
[17:34:18] <FromDiscord> <ShalokShalom> This is the state of 2014
[17:34:28] <FromDiscord> <ShalokShalom> So possible, that its completely dead now.
[17:35:54] <FromDiscord> <Phil> Can't be dead completely if GTK is stubbornly maintaining docs for setting up GTK for windows applications:‚ÜµWebAssembly is unable to access the DOM, so any DOM manipulation needs to be done indirectly through JavaScript or using a tool such as Emscripten. There are plans to add the ability to reference DOM and other Web API objects directly, but that's still in the proposal phase.
[17:36:02] <FromDiscord> <Phil> (edit) "applications:‚ÜµWebAssembly is unable to access the DOM, so any DOM manipulation needs to be done indirectly through JavaScript or using a tool such as Emscripten. There are plans to add the ability to reference DOM and other Web API objects directly, but that's still in the proposal phase." => "applications:‚Üµhttps://www.gtk.org/docs/installations/windows"
[17:36:13] <FromDiscord> <Phil> Some day I'll learn to CTRL+C properly
[17:36:22] <FromDiscord> <ShalokShalom> GTK having docs?
[17:36:26] <FromDiscord> <ShalokShalom> Thats a new thing
[17:37:15] <FromDiscord> <qb> In reply to @PMunch "Wait, that's not right.": Thank you. Yea I needed the index of the first hit and it should return 0 on no hit. https://play.nim-lang.org/#ix=3TVc
[17:38:45] <FromDiscord> <Tanguy> In reply to @m4ul3r "I'm trying to use": There are global variables in nim
[17:39:50] <FromDiscord> <Phil> They in fact exist so much a global variable is the center piece of my db-connection pool for sqlite connections
[17:39:55] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3TVe
[17:40:06] <FromDiscord> <Phil> You've got the {.global.} pragma
[17:41:49] <FromDiscord> <Phil> sent a code paste, see https://paste.rs/chT
[17:42:08] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3TVf
[17:42:42] <FromDiscord> <Tanguy> (difference being, everytime you call `createWatcher`, a new `apple` will be created, instead of it being shared with every watcher)
[17:45:21] <FromDiscord> <Phil> In reply to @m4ul3r "I'm trying to use": For further stuff around global variables on top of what Tanguy already wrote):‚Üµhttps://nim-lang.org/docs/manual.html#pragmas-global-pragma
[17:46:14] <PMunch> @qb, how would you differentiate that it hit the pattern on the first character and no match then?
[18:09:47] *** Joins: pch_ (~pch@66.49.131.33)
[18:10:00] <FromDiscord> <m4ul3r> Thank you both, that was helpful. I was able to get it working with `var apple = "string_test"` at the beginning and adding `{.gcsafe.}` to the checkFile func.
[18:11:47] *** Quits: pch (~pch@66.49.131.33) (Ping timeout: 256 seconds)
[18:13:33] <FromDiscord> <Phil> This might be a dumb question but how do you actually instantiate a variable with a type that is `type X = distinct string` ?
[18:14:43] *** Quits: pch_ (~pch@66.49.131.33) (Remote host closed the connection)
[18:15:05] *** Joins: pch_ (~pch@66.49.131.33)
[18:17:22] <FromDiscord> <konsumlamm> `X(someString)`
[18:18:05] *** Joins: pch (~pch@66.49.131.33)
[18:20:14] <FromDiscord> <Phil> Oh, right the default way of instantiating more complicated types
[18:20:28] *** Quits: pch_ (~pch@66.49.131.33) (Ping timeout: 260 seconds)
[18:24:34] <PMunch> Hmm, so I have my `loadTemplates` macro. It reads in all the files in a folder and for each file `<name>.<extension>` creates `to<extension>(argument: <name>): string` so `MyType.html` would create `proc toHtml(argument: MyType): string`. Now I want to make some kind of generic dispatch for this system. So that I could say `myType.to(<something describing the template to use>)` so if I have `MyType.rss` and `MyType.html` for example I could have in my code 
[18:24:34] <PMunch> `resp myPage.to(request.headers["accept"].getExt())` and it would return the correct templated string based on the "Accept" HTTP header
[18:24:45] <PMunch> Now the question is, how would I generate that `to` procedure?
[18:25:31] <PMunch> I guess I could have a global table mapping types to possible extensions
[18:25:55] <PMunch> And whenever I call `loadTemplates` it would add to this table
[18:26:14] <PMunch> Then `to` could simply look up in this table and run the correct procedure
[18:26:51] <PMunch> The table would need to just hold pointers though as the procedures have different signatures
[18:27:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[18:38:10] *** Joins: arkurious (~arkurious@user/arkurious)
[18:42:30] <FromDiscord> <fbpyr> @ajusa\: what does the 'run it through closure compiler' step involve?‚Üµdo you have a pointer to an article/video by any chance?
[18:43:15] <FromDiscord> <ajusa> sent a code paste, see https://paste.rs/OjO
[18:43:27] <FromDiscord> <ajusa> that get rid of a ton of the unneeded js code that Nim outputs by default
[18:43:30] <FromDiscord> <fbpyr> @ajusa\: thanks!! üôÇ
[18:47:05] <FromDiscord> <xflywind> In reply to @ajusa "just tried an actual": if you wanna mimimal JS output, don't use string/echo. I would use `console.log cstring"Hello world"` in my frameworks by enforcing `-d:nimSlimSystem`.
[18:47:18] <FromDiscord> <xflywind> (edit) "by enforcing" => "and enforce"
[18:48:02] <FromDiscord> <Zoom> Nim forum is nice and minimalistic and I'd expect it to be much lighter. On the other hand, most of the time I wish we had just copied the D forum - it's sooo nice.‚Üµ(@ajusa)
[18:48:32] <FromDiscord> <ajusa> In reply to @flywind "if you wanna mimimal": Huh, I haven't heard of nimSlimSystem before, is it documented anywhere? Searching in the Nim source code didn't yield anything
[18:50:46] <FromDiscord> <xflywind> It exists in devel. It means you need to import `std/syncio` or `std/assetions` to use echo, assert/doassert stuffs.
[18:52:19] <FromDiscord> <ajusa> interesting, sounds useful for embedded systems too.
[18:54:14] <FromDiscord> <xflywind> sent a long message, see http://ix.io/3TVv
[19:02:50] <FromDiscord> <ajusa> In reply to @flywind "We may need a": this is what would be ideal - I shouldn't need to change my code to get better JS output, it should be a part of the standard library or compiler ideally. For now I'll probably end up making a wrapper module around std/tables that uses jsassoc as the backing, but it'd be nice if the js codegen could be improved in the future
[20:24:58] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:26:54] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Max SendQ exceeded)
[20:26:58] *** Joins: gsalazar (~gsalazar@132.120.90.149.rev.vodafone.pt)
[20:27:15] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:59:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[21:22:14] *** Joins: vicfred (~vicfred@user/vicfred)
[21:56:21] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:43:49] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[22:44:08] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:45:05] <FromDiscord> <hmmm> yo boiz! if I wanted to have some strings to use at runtime it's more normal to slurp them or like place them in a module as variables and export them for use? ü§î
[22:48:56] <PMunch> Not quite sure what you mean
[22:49:27] <PMunch> slurp is used to read a file during compile-time and embed it into your program
[22:49:37] <FromDiscord> <hmmm> and that is plan A
[22:50:31] <FromDiscord> <hmmm> plan B would be just leaving the strings in some modules and import them as needed, plan C would be to pack them in a file with all my types data but I don't want to lol
[22:50:36] <PMunch> You could of course have a module of variables which are slurped
[22:50:57] <PMunch> You really shouldn't store types data in a file like you're doing anyways..
[22:51:04] <PMunch> If I've understood correctly what you're doing
[22:51:15] *** Joins: rez (rez@user/rez)
[22:51:19] <FromDiscord> <hmmm> I'm jasonying them and compressing them to a file
[22:51:47] <FromDiscord> <hmmm> seems they work just fine
[22:52:42] *** Quits: lumo_e (~enrico@151.29.53.201) (Ping timeout: 260 seconds)
[22:53:26] <PMunch> But for what purpose
[22:54:24] <FromDiscord> <hmmm> it's a surprise! üòÉ
[23:01:43] *** Joins: lumo_e (~enrico@151.29.53.201)
[23:09:52] <NimEventer> New thread by ErikWDev: Searching "jester" on nimble puts it on the bottom, see https://forum.nim-lang.org/t/9062
[23:11:29] *** Joins: Zectbumo (~Zectbumo@2600:8802:5100:3f90:60b7:1d07:d71a:f982)
[23:11:58] <FromDiscord> <treeform> In reply to @hmmm "I'm jasonying them and": I think you just want an external data file... the staticRead for big files make your compile times really slow!
[23:12:13] *** Quits: rez (rez@user/rez) (Ping timeout: 240 seconds)
[23:28:25] <FromDiscord> <demotomohiro> When you embed a 4GB file to the executable file with `staticRead`, it always uses at least of 4GB of memory, isn't it?
[23:34:10] *** Joins: rez (rez@user/rez)
[23:50:40] <FromDiscord> <Zoom> Asking for help implementing a surprise program might have surprising effects.‚Üµ(@hmmm)
[23:54:56] *** Quits: rez (rez@user/rez) (Ping timeout: 245 seconds)
[23:55:29] <FromDiscord> <hmmm> In reply to @treeform "I think you just": oh treeformy my bro, hmm it's very possible I'm doing something wrong, but things seems working right now. Apropos! I was using flatty to put things down to disk but after some creative changes to my types flatty refused to eat them, but jsony eat them just fine so I'm happy. Files are a bit more fatty but I can live with it
[23:56:12] <FromDiscord> <hmmm> In reply to @Zoom "Asking for help implementing": lol zoom is nothing suspicios, I don't even have the skills to write anything malicious lol. It will be a sane honest to the Lord github GPL smol project
[23:56:52] <FromDiscord> <hmmm> I can give you boyz a preview of the logo lol https://media.discordapp.net/attachments/371759389889003532/959171942391373854/Untitled3.png
[23:57:44] <FromDiscord> <Zoom> I don't suspect you or anything like that. Just that advice given without enough context can be hit-or-miss.
[23:58:07] <FromDiscord> <hmmm> yea, but my needs are smol like my programs so it's all fine really üòä
