[04:32:09] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[07:30:48] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[08:12:37] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 240 seconds)
[08:47:30] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:20:44] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[14:20:37] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[15:51:31] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:46:18] <CarloWood> { A a; } struct A { A() { f(); } virtual void f() { cout << "A::f"; } };
[18:46:19] <geordi> A::f
[18:47:17] <CarloWood> { B b; } struct A { A() { f(); } virtual void f() { cout << "A::f"; } }; struct B : A { void f() { cout << "B::f"; } };
[18:47:17] <geordi> A::f
[20:33:30] *** Joins: jokoon (~jokoon@136.252.163.126)
[20:34:38] <jokoon> {vector<int> vec; int ar[] = {2,3,4,5,6}; std::copy(ar, ar+size, std::back_inserter(vec)); for(auto&a:vec) cout << a << " ";}
[20:34:38] <geordi> error: invalid operands of types 'int [5]' and '<unresolved overloaded function type>' to binary 'operator+'
[20:35:11] <jokoon> {vector<int> vec; int * ar = {2,3,4,5,6}; std::copy(ar, ar+size, std::back_inserter(vec)); for(auto&a:vec) cout << a << " ";}
[20:35:11] <geordi> error: scalar object 'ar' requires one element in initializer
[20:35:41] <jokoon> {vector<int> vec; int ar[] = {2,3,4,5,6}; std::copy(ar, ar+5, std::back_inserter(vec)); for(auto&a:vec) cout << a << " ";}
[20:35:42] <geordi> 2 3 4 5 6 
[20:36:14] <jokoon> {vector<int> vec = {11,22,33,44,55,66}; vec.resize(5); int ar[] = {2,3,4,5,6}; std::copy(ar, ar+5, std::back_inserter(vec)); for(auto&a:vec) cout << a << " ";}
[20:36:15] <geordi> 11 22 33 44 55 2 3 4 5 6 
[20:36:19] <jokoon> FUCK
[20:36:24] <Eelis> geordi, add _n after copy and erase ar+
[20:36:25] <geordi> Same output.
[20:37:02] <jokoon> so resize add items, I thought it would make it size == n
[20:37:35] <Eelis> no, back_inserter adds items
[20:38:58] <jokoon> oh
[20:40:13] <jokoon> so I should just use .clear() instead, or is there a better inserter?
[20:40:41] <Eelis> i don't know what the goal is
[20:41:19] <jokoon> I want to to put the array into the vector, but to replace old values, so I want the array to be of the same size
[20:43:21] <Eelis> vector<T> v(a, a+n);
[20:43:51] <jokoon> indeed
[20:57:54] <CarloWood> { std::vector<A> const ps = {}; } struct A { double, int };
[20:57:54] <geordi> error: expected unqualified-id before ',' token
[20:58:08] <CarloWood> { std::vector<A> const ps = {}; } struct A { double d; int n; };
[20:58:09] <geordi>  
[20:59:01] <CarloWood> { std::vector<A> const ps = { { 3.14, 42 }, { 2.72, 13 } }; } struct A { double d; int n; };
[20:59:02] <geordi>  
[21:43:04] <CarloWood> { A t{{}}; } struct T { explicit T() {} }; struct A { T t; };
[21:43:04] <geordi> error: converting to 'T' from initializer list would use explicit constructor 'T::T()'
[21:43:19] <CarloWood> { A t{T{}}; } struct T { explicit T() {} }; struct A { T t; };
[21:43:19] <geordi>  
[22:41:13] *** Quits: jokoon (~jokoon@136.252.163.126) (Remote host closed the connection)
