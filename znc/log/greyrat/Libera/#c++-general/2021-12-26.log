[00:14:55] *** Quits: aniketgm (~Aniket@49.36.109.81) (Quit: leaving)
[00:25:42] *** Joins: chozorho (~chozorho@2601:146:300:c30::f5f4)
[00:27:07] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:36:20] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:37:51] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:02:08] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:02:43] *** Joins: xkuru (~xkuru@user/xkuru)
[01:13:27] *** immibis_ is now known as immibis
[01:27:20] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:35:50] *** Joins: RoKenn_ (~RoKenn@2001:a61:3432:ab01:1535:25a5:25ae:ad07)
[01:35:50] *** Quits: RoKenn_ (~RoKenn@2001:a61:3432:ab01:1535:25a5:25ae:ad07) (Changing host)
[01:35:50] *** Joins: RoKenn_ (~RoKenn@user/rokenn)
[01:36:59] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:37:25] *** Quits: RoKenn (~RoKenn@user/rokenn) (Ping timeout: 250 seconds)
[01:38:43] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[01:39:11] *** Joins: Cyp (~cyp@213.237.85.9)
[01:40:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:12] *** ChanServ sets mode: +v npaperbot
[01:40:34] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:42:02] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:45:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[01:53:31] *** Quits: magla (~gelignite@55d48f64.access.ecotel.net) (Quit: Stay safe!)
[01:54:15] *** Quits: chozorho (~chozorho@2601:146:300:c30::f5f4) (Ping timeout: 268 seconds)
[01:54:59] *** Joins: chozorho (~chozorho@2601:146:300:c30::c97b)
[01:56:47] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[01:58:24] <RandomReader> re: https://wandbox.org/permlink/vtuu6oOAEyxjqtwM  what platform, compiler version, etc are you working on?
[01:58:33] <RandomReader> oops, that's for rmd ^
[01:58:33] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[02:08:31] <rmd> RandomReader: sorry missed this - make 4.2.1 on centos7 3.10.0
[02:10:50] *** Quits: jehelset (~jeh@130.51-175-95.customer.lyse.net) (Remote host closed the connection)
[02:11:09] <RandomReader> gcc / libstdc++ pair then? which version (gcc --version)?
[02:11:20] <RandomReader> or g++ I suppose, either way
[02:16:07] <rmd> really sorry ... gcc /g++ version 8.3.1 20190311 (Red Hat 8.3.1-3)
[02:16:44] <rmd> using the devtoolset only because the supplied make / gcc / etc is ancient
[02:16:54] <rmd> (even more ancient)
[02:20:38] <RandomReader> libstdc++ for gcc 8 shipped the filsystem lib separately, IIRC the name is stdc++fs
[02:21:29] <RandomReader> if everything else is being built on that same toolchain and the wrapper is correct, I *think* this approach is likely to work out
[02:21:36] <ville> it took a long time for g++ to link to it by default
[02:22:29] <RandomReader> I can't remember all the interop rules and I haven't spent much time with this combination on linux, so going on little bits of fuzzy memory
[02:23:53] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[02:25:42] *** Joins: markong (~kvirc@213.146.188.203)
[02:26:15] *** Joins: johnny (~johnny@user/johnny)
[02:26:26] *** Quits: andreasbuhr (~quassel@p5dcf96c3.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:36:21] <rmd> Okay great - this has all pointed me towards a whole pile of literature I hadn't come across now, so you guys have been a great help thank you. Helps when you know what terms to search for! Just assumed the stdc++fs was included ... but now see it's separate
[02:36:41] <rmd> what a pain in the ass, but at least that explains the issue
[02:36:54] <TinoDidriksen> Devtoolset also targets the existing stdlib, not the newer one.
[02:37:23] <rmd> yes ... which is ideal actually because I'm deploying on older boxes
[02:37:54] <rmd> I say "yes" but it only now makes sense
[02:38:30] <rmd> my foray from javaland has been quite a trip
[02:42:37] <RandomReader> yeah in this area C++ often looks like the wild west compared to others .. it's flexible and works in a lot of spaces, but that doesn't make the tools terribly straightforward
[02:44:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[02:45:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[02:48:01] <rmd> I really appreciate all your help though, thank you.
[02:52:13] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:06:40] <RandomReader> welcome!
[03:11:56] *** Quits: RoKenn_ (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:13:02] <cbreak> rmd: welcome back to c++. Here you can log with confidence to not download DLLs from a random third party and execute it.
[03:18:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[03:19:20] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5007:ea61:6bcd:719) (Ping timeout: 268 seconds)
[03:20:26] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c49:6c7:a77a:d251)
[03:26:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[03:28:26] *** Joins: jsbach (~jsbach@2a01:c23:5d2c:c300:45b1:ba1:2d95:278d)
[03:30:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[03:39:33] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[03:39:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[03:41:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:48:57] *** Quits: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com) (Ping timeout: 240 seconds)
[04:00:02] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 268 seconds)
[04:15:28] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[04:15:58] *** Quits: DSpider (~DSpider@82.79.237.23) (Quit: Leaving)
[04:16:19] *** Joins: shailangsa (~shailangs@host109-159-108-207.range109-159.btcentralplus.com)
[04:18:17] *** Quits: Trollmann (~Trollmann@user/trollmann) (Ping timeout: 256 seconds)
[04:23:29] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[04:34:51] *** Joins: unyu (~pyon@user/pyon)
[04:39:39] *** Joins: Trollmann (~Trollmann@user/trollmann)
[04:55:33] *** Quits: teepee (~teepee@openscad/teepee) (Quit: bye...)
[04:56:41] *** Joins: teepee (~teepee@openscad/teepee)
[04:56:49] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[04:57:11] <Hello71> as long as you don't write printf(str);
[05:02:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8c49:6c7:a77a:d251) (Ping timeout: 240 seconds)
[05:07:16] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community: https://indiedevs.net/)
[05:07:31] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[05:08:02] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[05:10:55] <Alipha> !grab cbreak
[05:10:56] <nolyc> Alipha: The operation succeeded.
[05:11:28] <Alipha> Not that great of a grab, but we are seriously lacking quotes, so I do what I can :-)
[05:17:53] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[05:18:34] *** Quits: Guest6406 (~somewhere@122-199-43-68.ip4.superloop.com) (Ping timeout: 260 seconds)
[05:25:44] *** Joins: etolier (~somewhere@202-63-77-120.ip4.superloop.com)
[05:26:08] *** etolier is now known as Guest3589
[05:28:02] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[05:28:22] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[05:32:00] <very_sneaky> i think starting to use clang-tidy might be the best move i've made for the quality of my code
[05:32:33] <very_sneaky> i love the hicpp and core guidelines checks that link me to the sections for consideration
[05:39:21] <cbreak> very_sneaky: I can recommend some better things to do:
[05:39:43] <cbreak> -Wall and -Werror, and -std=c++XX instead of the gnu variants. And maybe -pedantic
[05:40:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:12] *** ChanServ sets mode: +v npaperbot
[05:40:39] <very_sneaky> are they _better_ or complementary?
[05:46:29] <very_sneaky> cbreak: I just tried doing that, and boost is what's throwing errors ~.~
[05:48:07] <very_sneaky> specifically, `-pedantic` doesn't like `ISO C++ does not support ‘__int128’ for ‘type name’`
[05:49:05] <very_sneaky> it looks like there's not much overlap though - these warnings don't tell me "hey, you've defined a default virtual destructor but you haven't specifically defaulted/deleted/implemented all of the other special member functions"
[05:49:07] <cbreak> well. It's a bit pedantic :)
[05:49:39] <cbreak> it'll show you actual compiler warnings and force you to deal with them
[05:49:44] <cbreak> not just style problems
[05:50:11] <very_sneaky> yep
[05:50:53] <very_sneaky> i'll see if there's a way to whitelist boost from being built with `-pedantic`
[05:51:12] <very_sneaky> not a great situation if i have to turn that flag off just because i use boost
[05:51:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[05:52:13] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[05:56:36] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[06:02:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[06:02:53] <RandomReader> -pedantic is required to get rid of most of the gcc extensions, it just silently enables them otherwise
[06:03:03] <RandomReader> that __int128 message is interesting though, I wonder what context that's in
[06:03:50] <RandomReader> one of the most annoying things about the major compilers is that even if you specify a standard version, you still have to jump through some other hoop to turn off extensions
[06:06:51] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:08:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[06:12:45] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[06:12:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[06:13:50] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:14:45] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[06:23:59] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:25:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[06:29:49] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[06:38:57] *** Quits: AmR (~AmREiSa@156.199.236.68) (Ping timeout: 240 seconds)
[06:41:52] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[06:46:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[06:48:20] *** Joins: KevChang (~KevChang@216.49.7.141.res-cmts.pnt2.ptd.net)
[06:49:42] *** Quits: KevChang (~KevChang@216.49.7.141.res-cmts.pnt2.ptd.net) (Client Quit)
[06:50:39] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:51:14] *** Joins: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net)
[07:03:36] <johnny> complementary indeed
[07:03:36] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[07:05:10] *** Quits: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:05:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[07:06:40] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[07:09:42] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[07:21:29] *** Joins: adeliktas8 (~adeliktas@i59F5F176.versanet.de)
[07:22:57] *** Quits: adeliktas (~adeliktas@i59F5F5F7.versanet.de) (Ping timeout: 240 seconds)
[07:22:57] *** adeliktas8 is now known as adeliktas
[07:26:18] <very_sneaky> RandomReader: heh, interesting. This is something I actually haven't paid too much close attention to
[07:26:47] <very_sneaky> are flags like these ones that you would enable all the time, or just for specific build types? Like, I can see how it might be desirable for a Debug build, but would you use them for a Release build?
[07:28:07] <RandomReader> which flags?
[07:28:26] <very_sneaky> -Wall, -Wextra, -Werror, -pedantic
[07:28:31] <RandomReader> oh, always
[07:29:01] <RandomReader> the only way I'd build without them is when dealing with legacy code for a specific platform that I know for certain it supports
[07:29:01] <very_sneaky> hm, okay. is it likely to make builds more fragile for different systems?
[07:29:13] <very_sneaky> i.e., it would complain on an x86 system but on ARM it might be fine
[07:29:18] <RandomReader> it's likely to expose problems that *would* be fragile if ignored
[07:29:41] <very_sneaky> gotcha
[07:29:42] <RandomReader> or just plain broken now, even if it sort of seems to work
[07:29:48] <very_sneaky> are there windows analogs?
[07:30:09] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[07:30:11] <RandomReader> the warnings it highlights are everything from non-standard extensions to forgetting to return a value to a signed/unsigned conversion that might overflow
[07:30:13] <very_sneaky> or an abstract way of applying these kinds of flags using, i.e., cmake?
[07:31:52] <very_sneaky> actually, does anybody have any good resources on recommended/suggested compilation flags, aside from what we've just discussed?
[07:32:00] <RandomReader> Windows analogs are roughly /std:c++whatever /permissive- /W4, plus /Za to disable extensions
[07:32:02] <very_sneaky> it's an area i've managed to ignore
[07:32:03] <RandomReader> no idea on cmake
[07:32:18] <very_sneaky> gotcha, so there are rough equivalents
[07:32:46] *** Joins: Colt_ (~Colt@user/colt)
[07:33:33] <RandomReader> unfortunately /W4 is noisy with template code, so in larger projects that tends to either drop to /W3, or I use the experimental https://devblogs.microsoft.com/cppblog/broken-warnings-theory/ in combination with /W4
[07:34:23] <very_sneaky> RandomReader: how do you normally build your projects? do you use a build system?
[07:34:39] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 268 seconds)
[07:35:27] <RandomReader> the stuff I write tends to be small or specific purpose, so I don't run into any of the needs others do
[07:35:38] <johnny> and that's why i still meson, so i get ok defaults even on msvc via a generic errors setting
[07:35:39] <RandomReader> e.g. a makefile or VS project gets me everything I need
[07:36:00] <very_sneaky> gotcha, so you're normally setting these compilation flags manually
[07:36:20] <johnny> i do not wanna learn those flags if i don't have to
[07:36:47] <very_sneaky> johnny: i'm with you, i wonder if cmake has a nice way of doing it
[07:36:51] <johnny> it does not
[07:36:54] <RandomReader> I just ended up memorizing the handful of important ones for in here, actually
[07:36:56] <johnny> there might be modules you could use
[07:37:09] <johnny> something that has to live in your repo alongside your code
[07:37:12] <RandomReader> people come up with sample code, I stuff it on godbolt with flags .. it's a really easy way to catch the silly stuff
[07:37:17] <very_sneaky> I found this, but it's only "use if available", not "use the compilers equivalents": https://stackoverflow.com/a/33266748/5051351
[07:37:35] <johnny> and then you need one for asan,bsan and whatever else
[07:37:56] <very_sneaky> that's a bummer
[07:37:56] <RandomReader> I'm also, in general, of the school of thought of knowing the tools well
[07:38:14] <RandomReader> e.g. if I'm compiling on windows, it's because I intend to support it, meaning I care about what msvc can do for me and took the time to find out
[07:38:30] <RandomReader> not because it's just another platform for something else I really care about
[07:38:55] <RandomReader> which does mean I am tracking those kinds of flags on purpose
[07:38:56] <johnny> i know that's the case for me, but msvc has uncovered issues
[07:39:17] <RandomReader> not everyone has the same approach, so I may not be the best example
[07:39:19] <johnny> clang and gcc happily convert std::filesystem::path to string in some cases
[07:39:21] <very_sneaky> i would rather just a general option that i can turn on for anything and then dig into the details later as they become relevant
[07:39:37] <johnny> msvc however.. will not
[07:40:13] <RandomReader> anyway, it also means I still haven't picked up something like cmake .. it's been on my list to figure out, just haven't gotten there
[07:40:33] <Stryyker> johnny: does that include their 2022 product?
[07:40:40] <johnny> i don't know
[07:41:12] <johnny> i think i'm using windows-2019 in github's ci
[07:41:17] <InPhase> very_sneaky: The best way to make cmake portable is to just use mingw on Windows, and cut msvc out of the loop.
[07:41:25] <johnny> hmm?
[07:41:30] <johnny> but msvc is just a better compiler on windows
[07:41:45] <johnny> and uncovers different issues than gcc would
[07:42:06] <johnny> so i can see building with both mingw and msvc, but not if not both, then msvc
[07:42:13] <InPhase> Or from another perspective, msvc introduces issues that one doesn't have to deal with if not using it.
[07:42:27] <RandomReader> the conversion from std::filesystem::path to a string is to the native string type
[07:42:38] <RandomReader> and the native type on windows is wstring, not string
[07:42:58] <RandomReader> it's in the standard, it's on cppreference, etc .. so it's the kind of thing you run into when not looking at docs
[07:42:59] <johnny> that's nto the error i was getting at least
[07:43:12] <very_sneaky> InPhase: yeah, appreciated. One of the reasons i persist with personal projects is to educate myself and take those learnings to my work environment. I prefer the unix way of doing things, but unfortunately work is basically entirely a windows shop so MSVC is the preference
[07:43:26] <johnny> it didn't say anything about wstring
[07:43:45] <RandomReader> the destination type has to be known already, so the error would be that there's no conversion to string
[07:43:47] <RandomReader> which is true
[07:44:04] <RandomReader> the API docs for filesystem would tell you that there's a conversion to a native type, which varies by platform
[07:44:10] <InPhase> very_sneaky: I get away with using mingw for work Windows projects because I get to choose the project build systems for this.  But yeah, sometimes you're forced to use what's entrenched.
[07:44:21] <johnny> i read the docs mutiple times, doesn't meanit sunk in though at the time though
[07:44:38] <RandomReader> right, and this is very much a useful cross-platform error to discover
[07:44:46] <johnny> i prefer the unix way of doing things, but i also prefer more a better compiler as longit's not TOO hard to support
[07:44:54] <RandomReader> especially since it's one of those things that's super easy to try and go "oh it works, this must be defined"
[07:45:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[07:45:17] <RandomReader> I also think it's a stupid decision for std::filesystem
[07:45:18] <RandomReader> one of many
[07:45:23] <johnny> and msvc isn't too hard to support as long as you're using something that abstracts the details
[07:46:24] <RandomReader> mingw has other issues though, especially in stdlib support .. to me it's one of those tools you use when you don't care about windows
[07:46:34] <RandomReader> so the opposite of the philosophy I was describing earlier
[07:46:43] <johnny> i'm a little confused though. wstring isn't convertible to std::string trivially is it?
[07:47:02] <InPhase> Well what I care about is cross-platform support, and it's a whole lot easier with a gcc + clang + mingw toolchain than with a gcc + clang + msvc toolchain.
[07:47:08] <RandomReader> I'm happy it exists, it's useful, just different goals
[07:47:22] <RandomReader> no std::string is char, std::wstring is wchar_t
[07:48:23] <RandomReader> std::filesystem::path is slightly abstracted, kind of like a container
[07:48:57] <johnny> "and the conversion method is unspecified." is honestly silly to me :(
[07:49:06] <RandomReader> it has member types, value_type and string_type, which may reflect char/string or wchar_t/wstring (or anything else that's appropriate)
[07:49:12] <johnny> yeah
[07:49:17] <Stryyker> A decision you make to appease all and not make a decision
[07:49:19] <RandomReader> and then it has an operator native_string() implicit conversion
[07:49:41] <RandomReader> I'm fine with the native concept, with the member types .. the implicit conversion is dumb though
[07:49:53] <RandomReader> there aren't many cases where you can use that correctly
[07:50:03] <hnOsmium0001[m]> sometimes I just say F**k it and use `path.string().c_str()` all over the place
[07:50:03] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 268 seconds)
[07:50:08] <RandomReader> it shouldn't have gone in, but oh well
[07:50:16] <johnny> i've only ha todo that once hnOsmium0001[m]
[07:50:23] <hnOsmium0001[m]> awaring about the lifetime, of course
[07:50:27] <johnny> when i was passint to a QString
[07:50:55] <johnny> oh.. nah it must hae been something else, because for those i used fromStdString
[07:51:53] <hnOsmium0001[m]> in that case, I the "best" solution is to do a #if _WIN32 QString::fromWCharArray(path.c_str()) #else QString::fromLocal8Bit(path.c_str())
[07:51:55] <johnny> what i haven't read about is how CP_UTF* interacts with the W and A suffixed methods
[07:52:29] <johnny> i meant UTF8, but held the shift too long
[07:53:08] <johnny> i mean inside the C++ stdlib. i know how it works with with the non suffixed methods in plain win32 api code
[07:53:21] <johnny> i guess that's in the STL code that i haven't looked at
[07:53:31] <InPhase> johnny: Very recently, the A suffixes got utf8 support:  https://docs.microsoft.com/en-us/windows/apps/design/globalizing/use-utf8-code-page
[07:53:44] <johnny> yeah i know that. the real question is.. what does the STL use
[07:53:58] <hnOsmium0001[m]> most of the non suffixed win32 functions are macros that expands to either A or W depending on the existence of _UNICODE
[07:54:14] <johnny> but if the STL explicitly uses W, tha wuldn't work would it
[07:54:16] <hnOsmium0001[m]> most likely MSVC STL uses the W versions and do conversion on api boundaries
[07:54:23] <RandomReader> I don't know offhand, I haven't been tracking the UTF-8 effort
[07:54:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[07:54:32] <hnOsmium0001[m]> because the A are very much codepage dependent until recently
[07:54:36] <johnny> hnOsmium0001[m], so you're saying it definitely works?
[07:54:52] <Stryyker> MS STL is on github
[07:55:19] <johnny> sure, but ican't go through EVERYTHING to see if it uses W or A or non prefxed or whtaever
[07:55:25] <InPhase> johnny: I suspect these changes are too recent to have migrated into a full stdlib support of these modes, but it really should be the direction they head.  It's time to purge everything wstring.
[07:55:28] <johnny> err i mean suffixed*
[07:55:45] <johnny> C++ beating java at that would be interesting
[07:55:49] <InPhase> Portability would get a whole lot easier without having to special case string sizes and extra conversions.
[07:56:03] <johnny> well it's not like you can't just use boost nowide if nothing lse
[07:56:14] <RandomReader> that isn't portability, that's just pretending the world is something it isn't
[07:56:24] <RandomReader> same philosophy as using mingw, actually :)
[07:56:30] <hnOsmium0001[m]> InPhase: that doesn't sound practical at all, you would need massive amounts of #if to detect the targetting windows version
[07:56:49] <johnny> hnOsmium0001[m], if you care about windows support before 1901 or whichever 19xx
[07:57:00] <hnOsmium0001[m]> and the vast majority of A versions end up doing a conversion to UTF 16 anyways, so it's not like you get a performance improvement
[07:57:07] <johnny> it's not about performance though
[07:57:13] <hnOsmium0001[m]> johnny: you can not care, but there is no way that MS doesn't care
[07:57:18] <very_sneaky> weird, i changed to a generator expression in cmake and boost is now no longer throwing errors
[07:57:24] <hnOsmium0001[m]> hence it's not practicaly in github.com/microsoft/STL
[07:57:36] <RandomReader> very_sneaky - for the __int128 thing earlier?
[07:57:38] <InPhase> hnOsmium0001[m]: It's about simplifying code for modern systems.  What the OS does behind the scenes to implement calls is the OS's business.
[07:57:49] <johnny> oh, sorry i didn't realize you were talking about the STL not applications
[07:57:52] <very_sneaky> RandomReader: yeah :s
[07:58:00] <very_sneaky> I can see that cmake is still using -pedantic
[07:58:14] <InPhase> hnOsmium0001[m]: If max performance is what you're seeking, you're not using Windows in the first place.  :)
[07:58:24] <RandomReader> interesting .. I'd probably want to double-check what commands it's actually using, but I wonder what changed in practice
[07:58:26] <johnny> how can you really say that?
[07:58:42] <very_sneaky> RandomReader: this is what it's using: `CXX_FLAGS =   -m64 -O3 -DNDEBUG  -fPIE -std=c++2a -Wall -Wextra -Werror -DCURL_STATICLIB=1 -DGSL_TERMINATE_ON_CONTRACT_VIOLATION -DXTENSOR_USE_XSIMD -DUSE_OS_TZDB=0 -pedantic`
[07:59:01] <hnOsmium0001[m]> but the problem is, you don't simply the code but instead creates a separate codepath
[07:59:07] <johnny> i swear.. people spread the myth that windows is slow, but at least windows cared about WaitForMultipleObjects ..
[07:59:11] <johnny> among other things i don't even know about
[07:59:13] <RandomReader> I was a little surprised at the message originally because while __int128 is an extension, it should also be ok in standard terms .. but then I can't remember if it actually obeys the "extended integer type" language, maybe it doesn't
[07:59:32] <RandomReader> I mean double-check in the sense of having it dump the literal commands
[07:59:39] <RandomReader> as in the whole clang++ ...  line, or whatever
[07:59:42] <johnny> we're just now getting an equivalent to WaitForMultipleObjects in linux in 5.16
[07:59:50] <InPhase> johnny: Because I am constantly struggling against the 100x to 1000x longer response latency variability in Windows compared to other platforms.  Straight processing speed is not the only performance metric.
[07:59:57] <johnny> indeed
[08:00:07] <johnny> but you spoke generically, so i did too
[08:00:20] <johnny> if you say.. doing something X way is better in Linux than Windows, i can say sure
[08:00:27] <johnny> like processes are expensive on windows
[08:00:32] <johnny> sure.. definitely
[08:00:58] <RandomReader> yeah people get stuck on thinking the design of the platform they're used to is the Only Proper Way to do things
[08:01:13] <RandomReader> we're *still* getting tech trickling out of things Solaris got right a couple decades ago
[08:01:18] <johnny> indeed
[08:01:40] <RandomReader> granted some of that is tied up in Oracle legal nonsense, but still
[08:01:56] *** Joins: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net)
[08:02:04] *** Quits: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net) (Client Quit)
[08:02:14] <johnny> RandomReader, some people can say that somewhat authoratively, but i'm too used to hearing people talk nonsense about windows who don't know the first thing about its design
[08:02:33] <RandomReader> aye
[08:02:42] *** Joins: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net)
[08:03:06] <johnny> let me be clear.. i do not use linux for technical excellence. i use it because of the flexibility and FOSSness.. that's it
[08:03:34] <johnny> i dont particular care about unix
[08:04:30] <johnny> i will talk a lot of stuff myself about windows, but it won't be because of the underlying tech.. it'll be the social and business stuff  (and sometimes the BC stuff)
[08:04:39] <InPhase> johnny: Can you clarify what you consider WaitForMultipleObjects to have that the multiple long-existing Linux features for waiting on events don't have?
[08:05:01] <johnny> InPhase, read about futex_waitv and decide for yourself
[08:05:19] <johnny> i'm not gonna repeat the wine devs argument
[08:07:57] *** Quits: jsbach (~jsbach@2a01:c23:5d2c:c300:45b1:ba1:2d95:278d) (Ping timeout: 240 seconds)
[08:08:29] <johnny> there should be an lkml thread, and in the end linus merged it. he wouldn't have done so if the other solutions were reasonable usable
[08:09:40] *** Quits: Guest22 (~textual@216.49.7.141.res-cmts.pnt2.ptd.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:09:47] <johnny> and i doubt the wine devs themselves would have even proposed in the first place as well
[08:10:42] <hnOsmium0001[m]> regarding extended integer types: apparently since intmax_t can't be __int128 (or whatever) due to ABI concerns, those special ints are not considered Extended Integer Types by the requirements of the standard
[08:11:26] <RandomReader> ah ok, thanks for digging that up .. explains the warning then
[08:11:50] <RandomReader> I'll try to remember that this time around, pretty sure it's come up before
[08:12:01] <johnny> bignum nightmares
[08:12:14] <very_sneaky> alright, now i'm confused. it looks like cmake by default is adding `-Wall -Wextra -Werror` to compile flags
[08:12:15] <InPhase> johnny: I could buy an argument that futex_waitv optimizes some thread wakeups in Linux.  I cannot buy any argument that this brings Linux performance up to Windows, because Linux is not behind Windows on thread wakeups.  I have run so many tests on thread wake-ups in Windows that I consider it orders of magnitude on behind in this particular area.  They don't even have the same units.  Linux works
[08:12:21] <InPhase> in the microsecond regime, and Windows works in the millisecond regime.
[08:12:58] <johnny> i wasn't actualy talking about performance although i understand how you could have read it that way
[08:13:01] <johnny> it was my fault
[08:13:23] <InPhase> Ok.
[08:13:55] <johnny> i was talking to RandomReader about design , and thus about how certain paradigms are centered in one OS vs the other
[08:14:08] <johnny> like processes being expensive in windows compared to linux
[08:14:30] *** Joins: KevChang (~kev@216.49.7.141.res-cmts.pnt2.ptd.net)
[08:14:55] <johnny> for the longest time on linux, people are just doing the equivalent of a busy wait when on windows you didn't have to do that
[08:15:06] <johnny> or at lest not explicitly anyways
[08:15:42] <johnny> i bet you look at a ton of popular programs and they're still just polling and using select()
[08:16:28] <kalven> polling what
[08:16:38] <johnny> depends on the program
[08:16:53] <johnny> i was doin that wit ha serial port at one point.. although it makes sense there
[08:18:01] <johnny> ain't nothin fancy going on with a serial port. luckily i don't have to deal with that naymore
[08:19:44] <kalven> are you saying that a ton of popular programs are doing busywaits>
[08:20:11] <johnny> sure
[08:20:35] <johnny> well busywaits when they don't have to.. just because it's easy
[08:21:00] <johnny> and linux (as an os) isn't exactly good at surfacing techniques to folks
[08:21:36] <kalven> what's this idea based on?
[08:21:38] *** Joins: jsbach (~jsbach@2a01:c22:a859:bd00:411e:a8e3:9f6f:fe32)
[08:21:43] <johnny> browsing code over the years
[08:21:49] *** KevChang is now known as KevChang2020
[08:22:40] <johnny> maybe it is indeed better now though
[08:23:01] <johnny> except the part about folks keeping up with new tehcniques that windows has had for a long time
[08:23:17] *** Joins: KevChang (~KevChang@216.49.7.141.res-cmts.pnt2.ptd.net)
[08:23:23] <johnny> i see folks are getting on the iouring thing quicker than expected where feasible though
[08:23:44] <kalven> yeah, i don't know.. I've read a fair amount of code as well. old code tended to be based on select
[08:24:03] *** KevChang is now known as KevChang2010
[08:24:16] <johnny> i didn't say thecode was new
[08:25:09] *** Quits: KevChang2010 (~KevChang@216.49.7.141.res-cmts.pnt2.ptd.net) (Client Quit)
[08:25:30] <kalven> no.. I'm trying to square our (diverging) experiences. I haven't seen a lot of busywaiting code
[08:26:12] <johnny> ok? maybe we've just looked at different code. for example.. if if was looking at a popular and userful webserver or database none of them are
[08:26:21] <johnny> useful*
[08:26:43] <johnny> like there's no way i'd say that nginx for example is using that technique
[08:26:43] *** Quits: KevChang2020 (~kev@216.49.7.141.res-cmts.pnt2.ptd.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:27:16] <kalven> yeah, it's not
[08:28:25] <johnny> why wouldn't there be diverging experiences? and why would we need to square them?
[08:28:32] *** Joins: frost (~frost@user/frost)
[08:28:48] <kalven> why would we need to get all meta?
[08:28:57] <johnny> you're the one who brought it up
[08:29:18] <johnny> you say you've not seen it.. i say i've seen it.. sounds completely natural
[08:29:44] <kalven> ok
[08:30:54] <johnny> heck, i'm sure i've even written some, because i didn't know any better :)
[08:31:08] <johnny> hopefully none of it is in production anywhere
[08:32:47] <kalven> what kind of busywaiting?
[08:34:17] <johnny> well ni the case of playing with arduino stuff ith tehir framework, that's pretty much the whole thing
[08:34:42] <kalven> but that's not linux
[08:34:56] <johnny> indeed, the linux stuff most memorably was serial port data
[08:36:29] <johnny> somewhat relately.. i need to see what wine does for io completion ports
[08:36:51] <johnny> because it reminded me that the last time i looked.. nginx on windows doesn't even use those
[08:39:14] <RandomReader> hm, that reminds me, is there an equivalent for I/O Completion Ports' thread scheduler interactions on Linux? Seems like it'd be useful for thread pools, which I would imagine there's prior art for in some form, but I've never looked for that specifically
[08:39:55] <johnny> i don't kwo enough about the io completion ports api to say :(
[08:40:00] <RandomReader> as in, Windows will try to keep threads hot in cache and letting others idle, rather than hopping around too much
[08:40:02] <johnny> i just know what its purpose is
[08:40:13] <johnny> and the the api surface seemed reasonable
[08:41:52] <johnny> somewhat related.. i just saw this post https://cor3ntin.github.io/posts/iouring/
[08:42:02] <johnny> from early 2020
[08:43:36] <RandomReader> I haven't read it but I think that (or some form of it) is what prompted the recent networking standardization pause
[08:43:40] <johnny> "There are a limited, fixed number of hardware threads, and unlike RAM, it is not possible to download more."
[08:43:58] <johnny> that kinda sounds like what you were talking about
[08:44:18] <RandomReader> oh, that part, will look
[08:45:21] <johnny> but i can't tell ifit's actually describing thread caching though as i read
[08:46:51] <RandomReader> doesn't look like it's mentioned
[08:47:01] <RandomReader> lemme see if I can find the actual Windows reference, for clarity
[08:47:02] <johnny> i feel like it starts off like it's gonna describe the inner parts, but then it pivots to talking about how to unify them
[08:47:14] <very_sneaky> is anybody else having trouble building googletest with clang 13
[08:47:50] <johnny> RandomReader, i think generally you wanna start reading about io_uring
[08:48:12] <RandomReader> oh https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports covers it, LIFO blocking and the concurrency checks
[08:48:33] <johnny> i'm not even gonna pretend to be an expert in this :)
[08:48:55] <RandomReader> doesn't directly say caching, but the effect is that the context for a thread (e.g. its stack) is more likely to be hot if the most recent thread is also the one that picks up the next bit of work
[08:48:59] <johnny> designing of that is way above my baygrade
[08:49:01] <RandomReader> rather than any of the idle threads at random
[08:49:47] <RandomReader> yeah I probably should look at io_uring, just to keep up with what's going on
[08:53:35] <johnny> i haven't read enough to tell how you can control the queue.. only that there is (or if it's even relevant to how io completion ports works) https://unixism.net/loti/ref-liburing/completion.html
[08:53:41] <johnny> the bit about queues is on the left
[08:55:08] <johnny> ifnothing else though.. seems like you can control the queue to your liking gnerally though
[08:56:03] <johnny> anything i'm doing though is just gonna be using io_uring underneath and i won't personally have to touch it
[09:09:20] <kalven> immer is a pretty cool lib
[09:16:43] *** Joins: p-i- (~Ohmu@2403:6200:8978:eb29:a19b:c4d4:1e43:9f1f)
[09:17:39] <p-i-> I need to invoke C++ code from Python. I'm considering making a Unix Socket listener and sending a packet from Python to localhost. This allows complete decoupling of components. Is this sane?
[09:18:26] <p-i-> I'm also looking for ultra-low-latency, so maybe this makes it a bad approach. I might have to implement both to time-profile, but if anyone has information that would save me the effort I'd be glad to hear it.
[09:19:26] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:19:49] *** Joins: ravan (~ravan@user/ravan)
[09:20:27] <RandomReader> depends on the usage, but if minimal latency is the goal, it'd probably be more appropriate to turn the C++ stuff into a library and load it directly into Python
[09:20:32] <very_sneaky> p-i-: you could add a python interface to your library using Boost.Python
[09:20:41] <very_sneaky> RandomReader: beat me to it
[09:21:06] <p-i-> Yes, that sounds like the better way.
[09:22:17] <p-i-> How do I make my C++ program "keep alive" while waiting for the function-call from Python?
[09:23:02] <RandomReader> in library form it's not running independently at all, it's just a pile of functions for Python to call
[09:23:08] <very_sneaky> p-i-: the way we suggested would involve making a library, so no waiting on execution
[09:23:21] <very_sneaky> p-i-: maybe it would be useful to tell us more about what your use case is?
[09:23:24] <very_sneaky> what does your program do
[09:24:21] <p-i-> It's to optimize efficiency of sending multiple HTTP POSTs (so it links against libcurl, and uses the curl-multi option)
[09:24:31] <p-i-> I'll need to expose 2 functions: setup and execute
[09:25:01] <p-i-> setup() can create an instance of the C++ object. But then it needs to somehow persist until `execute(...)` is invoked.
[09:25:53] <p-i-> setup() needs to do some one-time HTTPS/SSL handshaking, etc. So that `execute(...)` only does minimal work.
[09:26:17] <p-i-> I don't see a clear design-pattern.
[09:26:28] <very_sneaky> you could use an object to hold the state
[09:27:03] <very_sneaky> `Connection::setup()`, `Connection::execute()` or similar
[09:27:26] <very_sneaky> or `setup()` could just be handled in the constructor
[09:27:29] <RandomReader> what does "ultra-low-latency" mean in this context, since the HTTPS I/O is going to be longer than pretty much anything else?
[09:28:26] <RandomReader> like you could have Python write some data to a file, then call the shell to execute the C++ program, which reads from the file to figure out what to do, and it'll still likely be faster than the curl calls .. kind of latency
[09:28:57] <p-i-> RandomReader: Python code detects a signal, and has to somehow make an HTTP POST to a target server as fast as possible.
[09:29:22] <very_sneaky> if you're exposing a python interface, you can just make that connection object available directly in python, so your pyhthon might look like `from ConnectionLib import Connection; conn = Connection(...)`
[09:29:37] <very_sneaky> `conn.execute()`
[09:30:06] <RandomReader> nothing about HTTP POST to a remote system is particularly fast, so I'm not sure I'd worry much here
[09:30:27] <very_sneaky> yeah, it sounds like it would be easier to just use requests
[09:30:57] <p-i-> It's a minimal nanotrading engine, so speed counts. But yes, I need to make something simple, identify bottlenecks and fix in a sensible order otherwise I could be code-golfing forever.
[09:31:24] <RandomReader> I don't know anything about that space, but in broad strokes, using HTTP *at all* is your bottleneck here
[09:32:11] <p-i-> I'm already using requests in pure-python. I've also got pycurl working. But I want to move everything over to C++, but in stages. Which requires an interop initially.
[09:32:57] <p-i-> very_sneaky: how would that look on the C++ end?
[09:33:15] <RandomReader> what have you identified as the bottlenecks already?
[09:35:19] <p-i-> If I do `conn = Connection(...)` that can invoke a C-func, which can init a C++ object IIUC. I see... so that object is still gona be available when I call `conn.execute(...)`. That looks good.
[09:36:35] <p-i-> RandomReader: There's 3 stages. (1) listen on web socket for data (Python), (2) process data, look for signal (python), (3) on signal, execute HTTP POST
[09:37:15] <p-i-> I'm working backwards, so now I just have (3) in C++, in 6 weeks or so I hope to have all (1) (2) (3) in C++.
[09:39:57] <RandomReader> I'm more asking has already been identified as having excess latency because of Python, and therefore likely to benefit from using C++
[09:40:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:13] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:13] *** ChanServ sets mode: +v npaperbot
[09:40:31] <RandomReader> part of why this is relevant is that doing the conversion to library form itself is not entirely trivial work, so it'd be a bit of shame to throw it away in the end
[09:41:00] <RandomReader> if it's all new code then you can mitigate that to some extent, just plan for it to be a library in the final C++ form anyway, but it's still extra work in the meantime
[09:43:04] <RandomReader> if it just needs to work in the meantime, then you can just pick whatever is simplest to interface between the two
[09:43:04] <p-i-> Yes, I'm not sure how much work the interop will require. Maybe a couple of days from a professional C++ dev?
[09:43:49] <RandomReader> ("work" as in "function", whether it's a latency improvement or not)
[09:45:16] <p-i-> AFAICS I could shoot for a Python <--> C interop, or a Python <--> C++ interop. Is Python <--> C significantly simpler re: impl?
[09:46:15] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[09:47:24] <RandomReader> probably not, especially with existing tools like Boost Python, but I haven't worked with Python FFI myself
[09:48:12] <RandomReader> usually it's not super difficult, just detail-oriented and a bit tedious to understand the patterns used, to translate everything you need to between the two environments
[09:48:23] <RandomReader> but existing tools can help avoid some of the tedium and boilerplate
[09:50:17] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[09:56:28] <p-i-> Is anyone aware of a minimal sourcecode example for a unix-domain-socket C++ listener?
[09:56:44] <pingpongball> unix-domain-socket C++ listener? what does it means?
[09:59:08] <johnny> pybind11
[09:59:31] <johnny> p-i-, check out pybind11 for sure
[10:00:10] <p-i-> johnny: 🙏
[10:00:36] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[10:14:19] <p-i-> I actually wrote my own C++/Python interop 7 years ago https://github.com/p-i-/PiCxx ... I'm currently blowing off the cobwebs to see if it's worth using my own lib
[10:14:41] *** Colt_ is now known as Colt
[10:26:28] *** Quits: chozorho (~chozorho@2601:146:300:c30::c97b) (Quit: WeeChat 3.0)
[10:32:22] <ville> p-i-: what would count as c++? what's wrong with the normal c interface?
[10:33:37] <ville> but as far as listening on socket wouldn't it be: socket(), bind(), listen(), accept()?
[10:33:48] <p-i-> How to manage a C++ object thru a C interface?
[10:34:31] <ville> i don't understand the question
[10:34:38] <ville> what c++ object?
[10:35:41] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 256 seconds)
[10:35:41] <p-i-> If the C++ code is compiled as a lib, and it exposes C functions, I think I can hit the C functions from Python easily enough. And the C function can instantiate / interact-with a C++ object.
[10:36:34] <ville> ok you lost me. no idea when python entered the picture. i am answering to: "Is anyone aware of a minimal sourcecode example for a unix-domain-socket C++ listener?"
[10:36:44] <p-i-> oh, sorry
[10:36:53] <p-i-> thought you were referencing my OP
[10:37:07] <p-i-> gotcha
[10:37:52] <p-i-> The only unknown is the latency incurred with sending thru unix-domain-sockets. Hoping it will be a small fraction of a millisecond.
[10:38:16] <ville> IPC?
[10:38:21] <p-i-> yeah
[10:39:00] <p-i-> I need to get (small JSON) packets from Python to C++. Those are the only 2 options I see.
[10:39:58] <ville> python's embeddable in-process? so no need for ipc?
[10:42:05] <ville> but if you're set on ipc of some sort, then https://opensource.com/sites/default/files/gated-content/inter-process_communication_in_linux.pdf can serve as a reasonable summary to few ways to do it
[10:43:58] <ville> https://docs.python.org/3/extending/embedding.html
[10:48:12] <ville> so not sure why you would need ipc necessarily. shouldn't you be able to provide an embedded python interpreter with some memory buffer where the interpeter/programming running in the interpreter writes its json output periodically?
[10:48:33] <ville> err program running
[10:48:40] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[10:55:25] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:04:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b9a7:a535:b350:2b5f) (Quit: Quit)
[11:15:24] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 268 seconds)
[11:15:27] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[11:28:32] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[11:33:05] <Alipha> p-i-: to manage a c++ object through a c interface, you would dynamically allocate it and return an opaque pointer to it, then pass around that pointer to other functions. Basically, you'd just do what fopen/fread/fclose/etc do
[11:33:57] <Alipha> FILE* and the corresponding functions is basically OOP in C
[11:34:58] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[11:41:03] <p-i-> tx for the ref, ville
[12:09:42] *** Joins: robod34 (Username@79.113.195.239)
[12:11:20] <p-i-> I'm trying to run code from https://tldp.org/LDP/LG/issue74/tougher.html but I'm getting build errors
[12:11:41] <p-i-> Socket.cpp:114:54: error: use of undeclared identifier
[12:11:42] <p-i->       'MSG_NOSIGNAL'
[12:12:02] <p-i-> Socket.cpp:138:12: error: no member named 'cout' in namespace 'std'
[12:12:40] <p-i-> I'm wondering why the code doesn't work "out of the box", if I'm missing some compiler setting that would be including files that define these symbols
[12:13:59] <p-i-> I googled MSG_NOSIGNAL and got http://www.skrenta.com/rt/man/send.2.html which seems to imply that maybe MSG_NOSIGNAL is defined in <sys/types.h> or <sys/socket.h>
[12:14:12] <p-i-> but including those 2 files doesn't fix
[12:14:29] <ville> the web is full of articles with poorly tested example code
[12:14:40] <ville> the author tests it on their system and calls it done
[12:14:50] <p-i-> I can just copy-paste the line `#define MSG_NOSIGNAL      0x2000  /* don't raise SIGPIPE */` I guess
[12:15:30] <p-i-> yeah, whenever I'm doing a collab with another engineer, there's multiple points where code works on one of our boxes but not the other
[12:16:06] <p-i-> github + issues generally flattens that kinda stuff out nicely
[12:18:01] <ville> that said sys/socket.h should get you MSG_NOSIGNAL unless you've a very old box
[12:21:07] <p-i-> odd. It didn't work. anyway I copy-pasted it in-situ.
[12:21:32] <p-i-> https://tldp.org/LDP/LG/issue74/misc/tougher/simple_server_main.cpp.txt <-- I got this running, but echo foobar > /dev/udp/127.0.0.1/13589 doesn't hit it
[12:21:43] <p-i-> Is this because "unix socket" != "udp socket"
[12:21:59] <p-i-> in which case, is there a CLI for hitting the unix socket (which is at port 10000)
[12:22:06] <p-i-> sorry port 13589
[12:22:47] <p-i-> (I changed it. I also changed the `new_sock << data` line to `std::cout << data`)
[12:30:25] <p-i-> Shouldn't a unix socket have a filename on the filesystem, like /tmp/foo.sock ? I don't see any filename being assigned when I drill down into the code.
[12:35:25] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[12:52:22] <ville> AF_LOCAL sockets are indeed not udp sockets, and they need not be represented by a visible entry in the filesystem
[12:55:43] *** Joins: andreasbuhr (~quassel@p548dd430.dip0.t-ipconnect.de)
[12:55:43] *** Quits: andreasbuhr (~quassel@p548dd430.dip0.t-ipconnect.de) (Client Quit)
[12:58:33] <p-i-> Can I send to one from the CLI? I'm finding e.g. `echo foo | nc -U /tmp/app.sock` but I've just created this socket with a port.
[12:58:54] <ville> what kind of socket is it exactly?
[13:37:30] <very_sneaky> p-i-: https://www.boost.org/doc/libs/1_76_0/libs/python/doc/html/tutorial/index.html this is what i was thinking about re: Boost.Python
[13:38:41] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[13:40:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:14] *** ChanServ sets mode: +v npaperbot
[13:44:23] <very_sneaky> it's actually more straightforward than i remembered. basically just writting a wrapper to bind a class and it's member functions to some label that you want to expose to python
[13:47:52] *** Joins: DSpider (~DSpider@82.79.237.115)
[13:52:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:03:21] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[14:10:32] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 268 seconds)
[14:16:10] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[14:19:12] *** Joins: Burgundy (~yomon@79.115.213.171)
[14:20:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:22:08] *** Joins: pulse (~pulse@user/pulse)
[14:22:31] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:24:53] <LordKalma> CFFI11 is incredibly automatic if it suits your needs
[14:25:06] <LordKalma> but it's automaticness comes with the price of writing pointer code in python with string
[14:25:31] <LordKalma> generally I'd recommend SWIG, or if you're not into SWIG, PyBind11, which is Boost::Python but standalone
[14:27:45] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[14:33:38] <TinoDidriksen> geordi --version
[14:33:39] <geordi> GCC 12.0.0 20211215 (experimental)
[14:34:15] <TinoDidriksen> geordi --version
[14:34:17] <geordi> GCC 12.0.0 20211226 (experimental)
[14:34:42] <antto> "you don't experiment on xmas!"
[14:35:25] <TinoDidriksen> It was yule 2 days ago. It's fine now.
[14:39:27] *** Joins: aniketgm (~Aniket@49.36.109.81)
[14:42:36] *** Quits: sparticus2 (~root@172-105-49-127.ip.linodeusercontent.com) (K-Lined)
[14:55:22] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[14:59:00] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[15:07:26] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[15:28:18] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:30:32] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[15:30:38] *** PJBoy is now known as Guest7659
[15:30:39] *** Quits: Guest7659 (~PJBoy@user/pjboy) (Killed (calcium.libera.chat (Nickname regained by services)))
[15:30:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[15:30:44] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:40:46] *** Quits: aniketgm (~Aniket@49.36.109.81) (Read error: No route to host)
[15:40:59] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Ping timeout: 256 seconds)
[15:43:25] *** Joins: AmR (~AmREiSa@156.199.236.68)
[15:43:40] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[15:45:52] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[15:46:34] *** Joins: aniketgm (~Aniket@49.36.109.81)
[15:47:13] *** Quits: aniketgm (~Aniket@49.36.109.81) (Read error: Connection reset by peer)
[15:52:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:52:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[15:53:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[15:57:52] *** Joins: markong (~kvirc@213.146.188.203)
[15:59:40] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:01:31] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[16:01:52] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:02:21] *** Joins: szutt (~szutt@116.37.2.145)
[16:04:14] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 252 seconds)
[16:04:37] *** Quits: jsbach (~jsbach@2a01:c22:a859:bd00:411e:a8e3:9f6f:fe32) (Ping timeout: 240 seconds)
[16:05:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b165:3b1b:f1f6:f4de)
[16:06:31] <very_sneaky> heh. I'm not impressed with the approach craig scott proposes for managing warning related opts in his professional cmake book
[16:06:38] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:359a:fe01:ab2d:3f72)
[16:06:38] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:359a:fe01:ab2d:3f72) (Changing host)
[16:06:38] *** Joins: skapata (~Skapata@user/skapata)
[16:07:24] <LordKalma> why?
[16:08:55] <very_sneaky> essentially, modifying `CMAKE_CXX_FLAGS` directly which the rest of the internet seems to think is less than ideal, including the cmake documentation https://cmake.org/cmake/help/latest/command/add_compile_options.html#example
[16:09:18] <LordKalma> well
[16:09:22] <LordKalma> when the de-dup works, it's cool
[16:09:26] <LordKalma> when it doesn't, it's meh
[16:09:48] <LordKalma> but anyway warning related flags should be modifying `CMAKE_CXX_FLAGS` in a *presets* file
[16:10:00] <very_sneaky> presets file?
[16:10:50] <very_sneaky> what i've landed on is using a generator expression: https://bpa.st/7LEQ
[16:11:11] <very_sneaky> i don't love it though, i have three targets in my CML so it feels like i'm needlessly duplicating it
[16:12:24] <TinoDidriksen> If all targets share flags, just set it globally.
[16:13:42] <very_sneaky> i did try to do that, i couldn't find the appropriate directive though :s - what am i looking for? `add_compile_options` instead of `target_compile_options`?
[16:13:54] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[16:14:10] <TinoDidriksen> Yes, which you just linked...
[16:14:52] <very_sneaky> yeah, i was confused about its scope - it says "current directory and below", which doesn't seem to talk about targets per-se
[16:15:27] <TinoDidriksen> It does say target: "used when compiling targets from the current directory and below"
[16:15:57] <very_sneaky> you're right, i guess it's just not very intuitive to me to think about the directory structure
[16:16:13] <very_sneaky> maybe that's just my specific case, obviously other projects use nested CML
[16:16:42] <TinoDidriksen> But it seems add_compile_options() can't distinguish between release and debug builds directly, so one has to do that with a branch.
[16:16:48] *** Joins: jsbach (~jsbach@2a01:c22:a859:bd00:86e7:715a:dd44:ada7)
[16:17:39] <very_sneaky> would you consider warnings as something that needs to consider the build type?
[16:18:36] <TinoDidriksen> No, I was just looking into whether I should upgrade from changing CMAKE_CXX_FLAGS and CMAKE_CXX_FLAGS_RELEASE to add_compile_options(), but it doesn't look much better.
[16:18:47] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:ecc:78e5:33dd:bab4)
[16:18:47] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:ecc:78e5:33dd:bab4) (Changing host)
[16:18:47] *** Joins: RoKenn (~RoKenn@user/rokenn)
[16:18:56] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[16:20:01] <TinoDidriksen> https://github.com/GrammarSoft/cg3/blob/main/CMakeLists.txt#L41 is what I do. This is a project started on CMake 2.x, but I really don't see the benefit to using add_compile_options() instead.
[16:23:23] <ville> upgrade to make. solves all your problems
[16:23:44] <TinoDidriksen> Good gods no, that would be horrible.
[16:26:46] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[16:28:25] <pulse> ville++
[16:29:04] <pulse> I'd rather use a C++ program to build my C++ program than deal with the unspeakable horribleness of CMake
[16:29:18] <LordKalma> shhhh
[16:29:34] <TinoDidriksen> That's fair, but that goes double for Make.
[16:30:01] <pulse> Make is far less horrible. Make just calls the compiler. Easy peasy
[16:32:47] <TinoDidriksen> But that's not all I need. I need to find dependencies, cross-build, test compiler version and supported flags, figure out install location for the types of artifacts, parse source files, etc, etc, etc, and combinations of them all.
[16:33:31] *** Joins: aniketgm (~Aniket@49.36.109.81)
[16:35:14] <TinoDidriksen> Even just something like detecting and adapting to MSVC separately from WIN32, because MinGW is a thing.
[16:35:41] <very_sneaky> isn't cmake written in C++
[16:36:26] <TinoDidriksen> Yup
[16:36:39] <very_sneaky> :confused face:
[16:40:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[16:40:17] *** Quits: Guest3589 (~somewhere@202-63-77-120.ip4.superloop.com) (Ping timeout: 240 seconds)
[16:40:37] <very_sneaky> yep, that is much cleaner. Reduced my option configuration to: https://bpa.st/WUSQ
[16:41:08] <TinoDidriksen> I would use an if() instead of generator expressions.
[16:41:38] <very_sneaky> any particular reason?
[16:41:43] <TinoDidriksen> Readability
[16:41:56] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:42:42] <very_sneaky> yeah i guess that's not super readable
[16:43:38] <TinoDidriksen> Also shorter in your case.
[16:43:40] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:43:52] <very_sneaky> in what respect?
[16:44:02] <very_sneaky> ah, just checking for MSVC
[16:44:11] <TinoDidriksen> Yup
[16:44:34] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ecba:1568:6226:2d2f)
[16:44:39] <TinoDidriksen> And those are not Windows options - they're MSVC options. As I just mentioned, MinGW is a thing.
[16:45:09] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:45:16] *** Joins: etolier (~somewhere@202-63-76-134.ip4.superloop.com)
[16:45:21] <very_sneaky> true
[16:45:40] *** etolier is now known as Guest1145
[16:45:41] <very_sneaky> i could split hairs and say mingw does unix things on windows
[16:45:52] <very_sneaky> but i get what you mean
[16:49:49] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[16:50:07] *** Joins: ravan (~ravan@user/ravan)
[16:51:11] <very_sneaky> TinoDidriksen: I did come across a way to switch between build types in generator expressions - `$<$<CONFIG:Debug>:/MTd>$<$<NOT:$<CONFIG:Debug>>:/MT>`
[16:52:09] <TinoDidriksen> Ew. I want nothing to do with that, if I can help it. That's definitely where I'd use if()
[16:52:17] <very_sneaky> not sure if that helps much - it does do de-dup so perhaps that could save you some verbosity
[16:55:21] <ville> very_sneaky: generator expressions are an unreadable mess
[16:55:42] <very_sneaky> i'm sure good syntax highlighting would help
[16:56:02] <very_sneaky> actually, speaking of which, is there a language server for cmake? I haven't been able to find anything
[16:57:32] <TinoDidriksen> I use generator expressions in one place, and it makes sense there: https://github.com/GrammarSoft/cg3/blob/main/src/CMakeLists.txt#L190
[16:58:27] <ville> i'll allow it
[16:58:48] <ville> that's about the limit which is readable
[16:59:41] <TinoDidriksen> I would never use them for inline branches to toggle flags. I would find another way.
[17:00:06] <TinoDidriksen> Same reason ?: is discouraged.
[17:01:20] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:12:34] <ville> in c++ the rules for ?: are bit silly. i bet everyone here would get something wrong with regards to them
[17:13:46] <ville> but i wouldn't shy away from ?: just because. i'd say don't nest them and you've pretty reasonable guide for their usage
[17:16:22] <TinoDidriksen> Don't nest and all parts should be simple. Though these days lambdas satisfy the places where you'd "want" to nest or make it complex.
[17:22:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[17:22:59] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Ping timeout: 256 seconds)
[17:24:49] <PJBoy> are the rules for ?: silly?
[17:25:21] <PJBoy> converting to the common type is a technical limitation
[17:25:33] <PJBoy> and they have the correct right association
[17:35:51] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Ping timeout: 276 seconds)
[17:36:37] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[17:40:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:14] *** ChanServ sets mode: +v npaperbot
[17:43:54] *** Joins: ethrl (~ethereal@user/doforlove33)
[17:45:09] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:b165:3b1b:f1f6:f4de) (Ping timeout: 268 seconds)
[17:46:02] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:b165:3b1b:f1f6:f4de)
[17:46:05] *** Joins: seninha (~seninha@user/seninha)
[17:47:04] <ville> you can't for example return from the 2nd or 3rd expressions, but you can throw: http://coliru.stacked-crooked.com/a/5833343e14898e92
[17:50:26] <ville> i can't recall all the grievances i've have had about the rules over the years off the top of my head
[17:53:08] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[17:57:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:57:16] *** Joins: pulse (~pulse@user/pulse)
[18:00:31] <PJBoy> it *is* bizarre that you can throw
[18:00:45] <PJBoy> but that's more of a grievance with throws being expressions
[18:01:33] <PJBoy> http://eel.is/c++draft/expr.throw
[18:02:38] <PJBoy> actually nah I take that back
[18:02:47] <PJBoy> ?: still does have special treatment for throw expressions
[18:03:03] <PJBoy> { true ? f() : true; } void f(){} // as given by this error message
[18:03:03] <geordi> error: second operand to the conditional operator is of type 'void', but the third operand is neither a throw-expression nor of type 'void'
[18:04:54] *** Quits: aniketgm (~Aniket@49.36.109.81) (Read error: No route to host)
[18:13:35] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[18:15:11] <ville> the throw part is fine. it's pretty self-evident what's going to happen. not allowing a return is the bizarre part
[18:16:11] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:84eb:b2e:7b61:4002)
[18:25:10] <john99> someone know some good post or blog for learn when or how use constexpr?
[18:26:38] *** Joins: aniketgm (~Aniket@49.36.107.251)
[18:29:39] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:31:31] <ville> john99: not sure there is much to it. you stick it to functions when you're forced to. otherwise you ignore it
[18:33:01] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:33:17] <ville> the committee made the unfortunate choice that things need marking to be applicable in certain compile time contexts, so in "theory" you should mark everything constexpr to be "future proof", but that's just too annoying
[18:34:22] <ville> so instead you'll end up playing whack-a-mole and sticking constexpr on things as need pops up based on practice
[18:34:38] <TinoDidriksen> And because constexpr is kinda optional there's now also consteval.
[18:34:48] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[18:34:57] <TinoDidriksen> Ah well, they parted.
[18:37:22] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:41:53] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:43:02] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[18:46:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:46:54] *** Joins: Colt (~Colt@user/colt)
[18:49:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:50:19] *** Joins: Colt (~Colt@user/colt)
[18:50:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:52:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:52:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[18:53:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:56:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:56:30] *** Joins: Colt (~Colt@user/colt)
[19:03:07] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[19:04:32] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[19:05:06] *** Joins: Colt (~Colt@user/colt)
[19:05:56] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[19:06:37] <veverak> ville: is there something preventing changing this in the future?
[19:07:02] <veverak> I mean, to make it so that compiler cna something consider constexpr without the user marking it that way
[19:10:20] *** Joins: seninha (~seninha@user/seninha)
[19:12:07] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[19:20:44] <ville> veverak: on the surface of it i guess it could be possible. but i am sure there are some non-obvious details given the size of c++
[19:21:03] <veverak> I was wondering whenever they are :D
[19:21:06] <veverak> *there are
[19:22:34] *** Quits: ethrl (~ethereal@user/doforlove33) (Ping timeout: 268 seconds)
[19:23:11] *** Joins: andreasbuhr (~quassel@p548dd430.dip0.t-ipconnect.de)
[19:23:11] *** Quits: andreasbuhr (~quassel@p548dd430.dip0.t-ipconnect.de) (Client Quit)
[19:23:43] <ville> if you were willing to throw away all the current rules and just say let's make new rules that allow "everything" to be compile-time executable then you probably arrive at the: let's have a VM
[19:24:24] *** Joins: ethrl (~ethereal@user/doforlove33)
[19:26:27] <veverak> that was not intended
[19:26:48] <veverak> I don't mind that there will be rules for what can be considered constexpr
[19:26:59] <ville> i do. makes no sense to have them
[19:26:59] <veverak> I just wonder if you as code have to mark it that way
[19:27:47] <ville> of course a general vm defined by the standard would have its own limitations, but at least you could just program regular c++
[19:34:58] *** Joins: Hercules (~Hercules@user/hercules)
[19:38:59] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[19:43:37] <Alipha> veverak: there indeed seems to be no reason why you have to manually mark functions constexpr. It would make more sense to just have the compiler figure out if a function is constexpr when you actually use it in a constexpr context
[19:43:53] <Alipha> And error if it's not
[19:44:02] <veverak> yeah, that is what I was thinkin of
[19:44:09] <rpav> that would be nice
[19:44:32] <veverak> hmmm
[19:44:39] <veverak> maybe the part that constexpr implies inline?
[19:45:15] <rpav> i think constexpr functions have to also behave correctly non-constexpr, and saying constexpr doesn't actually get you anything other than optional constexpr-ness
[19:45:31] <rpav> (which i thought was the rationale for "why are we doing this")
[19:45:35] <veverak> rpav: nope, it also gets you inline
[19:46:03] <rpav> well since saying _inline_ _also_ doesn't seem to have a downside, maybe that ought to be implied too?
[19:48:19] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[19:48:40] <Alipha> !inline
[19:48:41] <nolyc> The inline specifier was historically intended to be a code inlining hint. However, it has a semantic effect; functions marked inline can be defined in every TU in which they are used (as long as the definitions are identical), making headers the appropriate place to define them if they are used in multiple TUs.
[19:49:42] <LordKalma> I'd say that factoid should be reversed now
[19:49:45] <rpav> so again what would "every function implicitly inline, in the C++-sense or multiple declarations, not the sane-person sense of 'actually inlining'" have as a downside
[19:49:54] <Alipha> I think you'd prefer it, whenever possible, to have the linker give a "multiple definitions" error if you accidentally define two different functions/variables with the same name
[19:50:42] *** Quits: jsbach (~jsbach@2a01:c22:a859:bd00:86e7:715a:dd44:ada7) (Quit: Leaving)
[19:50:53] <rpav> i'm not sure why i'd prefer that, except if they were different declarations, which is a crapshoot as it is
[19:51:30] <Alipha> rpav: yes, I meant if they have different function bodies.
[19:51:36] <rpav> i would definitely prefer not to compile a large project only to have it fail on the link step because i forgot to write "inline," forcing me to start over
[19:51:56] <rpav> Alipha: that would be orthogonal, and _should_ (but isn't afaik) already be a guarantee
[19:52:09] <PJBoy> constexpr marks that a function is guaranteed to be constant expression compatible
[19:52:15] <Alipha> rpav: it's currently UB
[19:52:31] <rpav> Alipha: right, so basically now we have nothing _and_ we have to rebuild if we forget 'inline'
[19:52:32] <PJBoy> if you let the compiler figure that out, you'd never know if a function is markedly constant expression compatible or not
[19:52:50] <Alipha> PJBoy: documentation :-)
[19:52:53] <PJBoy> it also limits what C++ you can use, and detects non stdlib UB
[19:52:58] <LordKalma> "The inline specifier (contrary to the popular belief about inlining in the compiler sense), serves to mark that a function can be defined in many TUs (as long as the definitions are identical). This usually happens via multiple header includes, so this is the place to define them. The nuanced effect of this is making the definition available in the TUs the function is used, therefore indirectly helping compiler inlining."
[19:53:02] <PJBoy> documentation is unenforcable
[19:53:03] <rpav> instead, let's have "the linker can just handle it" _plus_ "also detects ODR violations"
[19:53:22] <PJBoy> also yeah constexpr means inline, that's a big limitation
[19:54:10] <PJBoy> nolyc, no, inline is The inline specifier (contrary to the popular belief about inlining in the compiler sense), serves to mark that a function can be defined in many TUs (as long as the definitions are identical). This usually happens via multiple header includes, so this is the place to define them. The nuanced effect of this is making the definition available in the TUs the function is...
[19:54:11] <nolyc> PJBoy: The operation succeeded.
[19:54:11] <PJBoy> ...used, therefore indirectly helping compiler inlining
[19:54:15] <PJBoy> :/
[19:54:31] <LordKalma> hahahahaha
[19:54:54] *** Joins: proller (~p@178.34.150.67)
[19:54:57] <PJBoy> nolyc, no, inline is The inline specifier was historically intended to be a code inlining hint. However, it has a semantic effect; functions marked inline can be defined in every TU in which they are used (as long as the definitions are identical), making headers the appropriate place to define them if they are used in multiple TUs
[19:54:58] <nolyc> PJBoy: The operation succeeded.
[19:55:01] <PJBoy> (revert)
[19:55:36] <LordKalma> missing a final full stop
[19:55:57] <PJBoy> IRC doesn't deserve full stops
[19:56:28] *** Joins: Hercules` (~Hercules@user/hercules)
[19:56:34] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[19:58:16] <Alipha> rpav: you can't have the linker handle it, unfortunately. The asm generated from multiple TUs may actually end up being different. For instance, if foo calls bar and you call foo from two different TUs, one where the definition of bar is available and one where the definition isn't, then bar may get inlined within one of foo's definitions but not the other
[19:59:02] *** Quits: Hercules (~Hercules@user/hercules) (Ping timeout: 240 seconds)
[19:59:09] <Alipha> That's a little sucky actually. The linker just picks one definition, which may not be the optimal definition
[19:59:14] <rpav> Alipha: this assumes the compiler can't store hashes and actual AST and have the linker do actual comparison
[19:59:14] *** Quits: aniketgm (~Aniket@49.36.107.251) (Read error: No route to host)
[19:59:29] *** Quits: Hercules` (~Hercules@user/hercules) (Client Quit)
[20:00:35] *** Joins: aniketgm (~Aniket@49.36.107.251)
[20:00:48] <Alipha> rpav: that's a possibility. Seems like you could get some false positives with macros, but seems less likely, I'd think
[20:00:59] <rpav> if we _can't_ define a function that can validly compare a definition from TUs, then the rule itself makes C++ invalid
[20:01:33] <rpav> Alipha: macros would be irrelevant .. you'd be comparing AST / token type trees
[20:03:03] <rpav> like changing certain token _values_ doesn't violate ODR i think (e.g. variable names?) but that's all something that ought to be straightforward to manage .. i mean, i think some linkers already do this don't they?
[20:03:41] <ville> https://groups.google.com/a/isocpp.org/g/std-discussion/c/nrAu_YbCbYM/m/0eQsx6ip1DwJ
[20:04:16] <Alipha> rpav: you could have a macro that expands INT to int in one TU and expands to int32_t in another TU. I'm unsure if that violates ODR officially or not
[20:04:27] <ville> so because compilers suck, they require the keyword rather than make the compilers not suck
[20:04:44] <rpav> ville: that seems like an excuse based on current compiler design
[20:04:52] <ville> yes
[20:05:22] <rpav> (not that that's unusual ... tons of concessions have happened to ease compiler implementation, but i guess that's life)
[20:06:07] <Alipha> PJBoy brought up the statement of intent argument, which I do actually mostly agree with, even though I argued against it ;-)
[20:06:20] <PJBoy> pretty sure compilers can figure out if a function is constexpr-able
[20:06:21] <rpav> Alipha: i _think_ that would, but then this would detect it .. though i guess hashing might technically not be sufficient
[20:06:26] <PJBoy> so I rule out that argument
[20:06:47] <PJBoy> constexpr specifier notably *not* being required for compile time evaluation
[20:07:17] <PJBoy> it's *purely* an indicator for the programmer with some effects on the grammar
[20:07:55] *** Joins: Colt (~Colt@user/colt)
[20:09:10] <PJBoy> same as const in that regard
[20:09:28] <PJBoy> the compiler can figure out that you don't call any const methods and pretend that an object should be const
[20:10:02] <PJBoy> but then you'd end up calling some non const method on it at some point and end up breaking all your code that happened to depend on that object happening to be const
[20:10:02] <LordKalma> EXPLICIT THIS PLZ
[20:10:29] <PJBoy> it's better to have the const and constexpr guarantees spelled out and enforced
[20:10:49] <PJBoy> explicit this what?
[20:12:55] *** Joins: plastico (~plastico@neomutt/plastico)
[20:12:56] *** Joins: pingpongball (~pingpongb@user/pingpongball)
[20:12:59] <PJBoy> explicit deez nuts?
[20:21:55] <LordKalma> explicit `this` *facepalm*
[20:22:20] <PJBoy> what about it to be explicit?
[20:22:30] <rpav> o
[20:22:31] <ville> he wants it to be required to find members
[20:22:35] <ville> this-> is way too verbose. a leading-. would suffice
[20:22:46] <rpav> i've seen entire codebases with `this->` everywhere
[20:22:54] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:23:37] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[20:23:41] <Alipha> Is there a clang-tidy for that?
[20:24:05] <PJBoy> this-> actually has a semantic effect in templates
[20:24:05] <LordKalma> npaperbot, search finding this
[20:24:05] <npaperbot> Nothing found for: finding, this
[20:24:10] <LordKalma> npaperbot, search this
[20:24:10] <npaperbot> P1190R0: [Evolution, Library Evolution] I did not order this! Why is it on my bill? <https://wg21.link/p1190r0> (by David Stone) (2018-08-06)
[20:24:10] <npaperbot> Also: P0847R7, P0847R6, P0847R5, P0847R4, P0847R2, P0847R1, P0847R0, P0806R2, P0806R1, P0806R0, P0637R0, P0409R2, P0409R1, P0409R0, P0033R1, P0033R0, P0018R3, P0018R2, P0018R1, P0018R0, N2439, N2377, N1821, D0847R3, ... (27 in total)
[20:24:16] <PJBoy> so I would imagine clang-tidy doesn't bother with this
[20:24:41] <LordKalma> PJBoy, I was talking about that proposal where you'd pass `this` explicitely in methods
[20:24:55] <PJBoy> uniform call syntax?
[20:25:11] <PJBoy> or the deducing this proposal?
[20:25:21] <LordKalma> deducing this I think
[20:25:27] <LordKalma> npaperbot, search deducing this
[20:25:27] <npaperbot> P0847R7: [Core] Deducing this <https://wg21.link/p0847r7> (by Barry Revzin, Gašper Ažman, Sy Brand, Ben Deane) (2021-07-14) (Related: https://wg21.link/p0847r7/github)
[20:25:27] <npaperbot> Also: P0847R6, P0847R5, P0847R4, P0847R2, P0847R1, P0847R0, D0847R3
[20:25:33] <PJBoy> that one got merged into C++23
[20:25:52] <LordKalma> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p0847r7.html#name-lookup-candidate-functions
[20:25:57] <LordKalma> void foo(this X const&);
[20:25:58] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:26:04] <LordKalma> good
[20:26:20] <PJBoy> yeah that's interesting
[20:26:54] <PJBoy> I've never wanted it before, but I can see where it'd be useful
[20:27:30] <LordKalma> you might have a struct/class that would be better passed by value to its members
[20:27:33] <rpav> actually
[20:28:05] <PJBoy> I think it's more useful for being able to having forwarding references to your class type
[20:28:08] <rpav> nope wouldn't help
[20:28:10] <LordKalma> *to its member functions
[20:28:31] <rpav> i was thinking that might be useful for 'auto-consting' functions but i don't think so
[20:28:41] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 245 seconds)
[20:28:48] <rpav> you'd need an explicit `this` with an _automatic_ const-ness
[20:29:07] <PJBoy> it'd be useful for those operator[] overloads where you have const and non-const to consider
[20:29:27] <rpav> or maybe it can with a template?
[20:29:50] <rpav> PJBoy: only if the same function can be written _by the compiler_ both ways on demand .. which i guess requires a template
[20:29:58] <Alipha> Using the "explicit this" syntax to also implement c#'s extension methods would also be nice. (ie, have a non-member function that can be called like a member function)
[20:30:17] <PJBoy> `S::operator(this auto&& self) { if constexpr (std::is_const_v<decltype(self)>) return std::as_const(data); else return data; }` for example
[20:30:18] <rpav> but the `<Self> .. this Self&&` seems to get thta?
[20:30:42] <rpav> well, add copy_const ;)
[20:32:06] <rpav> err, const_carry i guess i called it, like const_carry_t<Self>(v)
[20:32:21] <PJBoy> copy_const would be cool
[20:32:37] <PJBoy> and it's easy to write
[20:32:41] <rpav> very easy
[20:33:14] <rpav> though i added is_const so that's a couple extra lines, but `const_carry_t<Self>::is_const` might be handy
[20:33:33] <rpav> imagine map with conditionally-const operator[]
[20:33:48] <PJBoy> you mean the way it should be
[20:33:52] <PJBoy> -_-
[20:33:55] <rpav> basically
[20:34:11] <PJBoy> I don't see any reason to make const map not support operator[]
[20:34:18] <rpav> though tbh i'm not sure _exactly_ what the best outcome woudl be, except returning pointers
[20:34:38] *** Quits: ethrl (~ethereal@user/doforlove33) (Ping timeout: 260 seconds)
[20:35:06] <rpav> m["foo"]->bar or *m["foo"] would probably have been less of a mistake, though it _is_ highly useful for non-const to insert
[20:35:45] <rpav> actually those returning a lifetime-extended "action object" would be nice but i'm not sure C++ has enough syntax sugar to make that nice
[20:38:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b0df:3a77:10f5:563e)
[20:39:30] <rpav> also utterly unrelated to anything except what i'm currently working on, "type bridging" would be such a better term than the (notably informal) way "type erasure" is used by some C++ people
[20:41:38] <rpav> dynamic-vs-static is sortof C++-analogous to like, the confusion of lisp "times," and without a strong sense of "this happens at X or Y, think of what code must be generated to support each" it can be a struggle to figure out why like, get<N>(tuple) can't _trivially_ be get(n, tuple)
[20:45:49] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[20:51:52] *** Quits: aniketgm (~Aniket@49.36.107.251) (Read error: No route to host)
[20:57:01] *** Joins: aniketgm (~Aniket@49.36.107.251)
[21:05:03] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[21:06:01] *** Joins: rajkosto (~rajkosto@79-101-216-201.dynamic.isp.telekom.rs)
[21:10:37] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[21:11:15] *** Quits: pingpongball (~pingpongb@user/pingpongball) (Quit: Client closed)
[21:23:26] *** Joins: yomon (~yomon@79.115.213.171)
[21:24:59] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 250 seconds)
[21:32:25] *** Joins: troller (~p@178.34.150.67)
[21:34:11] *** Quits: proller (~p@178.34.150.67) (Read error: Connection reset by peer)
[21:38:07] *** Quits: troller (~p@178.34.150.67) (Ping timeout: 256 seconds)
[21:40:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:15] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:15] *** ChanServ sets mode: +v npaperbot
[21:45:38] *** Joins: pulse (~pulse@user/pulse)
[21:50:33] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[21:52:48] *** Joins: troller (~p@178.34.150.67)
[21:53:21] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:54:02] *** Quits: yomon (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[21:55:13] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[21:58:17] *** Quits: troller (~p@178.34.150.67) (Ping timeout: 240 seconds)
[22:01:54] *** Joins: yomon (~yomon@79.115.213.171)
[22:03:37] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[22:03:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[22:06:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:09:50] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[22:10:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:13:18] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[22:13:23] *** Quits: rajkosto (~rajkosto@79-101-216-201.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[22:14:16] *** Quits: aniketgm (~Aniket@49.36.107.251) (Quit: leaving)
[22:14:57] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[22:17:07] *** Joins: rajkosto (~rajkosto@93-87-176-118.dynamic.isp.telekom.rs)
[22:17:52] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[22:17:55] *** Joins: segnior (segnior@user/segnior)
[22:18:21] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:21:42] *** Joins: ferdna (~ferdna@user/ferdna)
[22:22:38] *** Quits: rajkosto (~rajkosto@93-87-176-118.dynamic.isp.telekom.rs) (Ping timeout: 268 seconds)
[22:23:20] *** Joins: troller (~p@178.34.150.67)
[22:23:53] *** Quits: urdh (~urdh@user/urdh) (Ping timeout: 256 seconds)
[22:28:37] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[22:31:55] *** Joins: rajkosto (~rajkosto@77-46-180-100.dynamic.isp.telekom.rs)
[22:32:47] *** Joins: magla (~gelignite@55d4171c.access.ecotel.net)
[22:41:18] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:41:37] *** Joins: urdh (~urdh@user/urdh)
[22:41:40] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[22:43:40] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Client Quit)
[22:50:00] *** Joins: xkuru (~xkuru@user/xkuru)
[22:59:45] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b0df:3a77:10f5:563e) (Quit: Quit)
[23:02:01] *** Joins: Burgundy (~yomon@79.115.213.171)
[23:02:47] *** Quits: yomon (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[23:05:25] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[23:08:16] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 268 seconds)
[23:16:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:1145:9ae9:835c:2c31)
[23:16:58] *** tyle is now known as leonardus
[23:21:37] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[23:30:34] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[23:31:37] *** Quits: troller (~p@178.34.150.67) (Ping timeout: 240 seconds)
[23:31:46] *** Quits: rajkosto (~rajkosto@77-46-180-100.dynamic.isp.telekom.rs) (Quit: Leaving)
[23:34:54] *** Joins: namo (~nomo@95.87.208.95)
[23:43:20] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:52:40] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 268 seconds)
[23:54:19] <xkoncek> i still don't understand what mechanism Java uses to keep its interfaces stable even when rearranging methods and fields
[23:54:59] <xkoncek> since i highly doubt there is a string lookup each time a virtual method is invoked
