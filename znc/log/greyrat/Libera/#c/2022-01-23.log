[00:00:06] *** Quits: tech_exorcist_ (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:00:17] *** Joins: rgrinberg (~textual@187.223.115.174)
[00:01:03] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[00:02:59] *** Joins: curunir (~curunir@cpe-65-25-87-245.neo.res.rr.com)
[00:03:22] <tusko> Very often women will approach me like "Excuse me, I couldn't help but noticed you writing C here alone. Are you here alone?"
[00:04:26] <ChoHag_> Are they selling C-shells by the sea shore?
[00:04:26] *** Joins: sabry (~sabry@197.37.33.107)
[00:05:25] *** chiselfu1e is now known as chiselfuse
[00:06:55] *** Quits: sabry (~sabry@197.37.33.107) (Client Quit)
[00:07:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:07:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:07:25] *** Joins: wroathe (~wroathe@user/wroathe)
[00:10:55] *** Joins: yamchah2_ (~yamchah2@user/yamchah2)
[00:11:01] *** Quits: curunir (~curunir@cpe-65-25-87-245.neo.res.rr.com) (Quit: curunir)
[00:12:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:12:50] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[00:13:02] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 240 seconds)
[00:13:02] *** yamchah2_ is now known as yamchah2
[00:14:22] *** Joins: curunir (~curunir@cpe-65-25-87-245.neo.res.rr.com)
[00:15:08] *** Quits: curunir (~curunir@cpe-65-25-87-245.neo.res.rr.com) (Client Quit)
[00:18:16] *** Joins: y0m0n (~NA@86.121.143.206)
[00:19:37] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[00:20:35] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[00:21:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[00:21:50] <sokan> sham1: there's an xkcd for everything
[00:22:07] <sokan> I will always love https://xkcd.com/1782/
[00:22:08] <candide> Title of sokan's link: xkcd: Team Chat
[00:23:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:25:37] *** Quits: y0m0n (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[00:26:03] *** Quits: adip (~adip@deo188.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[00:30:53] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-167-81df4dec - https://znc.in)
[00:31:44] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:31:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[00:32:13] *** Joins: kuoi (~kuoi@109.175.166.61)
[00:33:27] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[00:34:04] *** Joins: magla (~gelignite@55d49afb.access.ecotel.net)
[00:34:37] *** Joins: Burgundy (~NA@86.121.143.206)
[00:36:16] *** Joins: adip (~adip@deo188.neoplus.adsl.tpnet.pl)
[00:38:03] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-33.dsl.bell.ca)
[00:38:40] *** Quits: bick (~kotaman@94.46.203.147) (Ping timeout: 250 seconds)
[00:39:04] *** Joins: Satin (uid193953@user/Seten)
[00:40:23] *** Joins: bick (~kotaman@94.46.203.147)
[00:44:22] *** Quits: bebyx (~Thunderbi@user/bebyx) (Remote host closed the connection)
[00:44:41] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[00:45:27] *** Joins: Telvana (~capo@user/telvana)
[00:46:21] *** Joins: fredd (~fredd@user/fredd)
[00:49:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[00:51:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[00:52:57] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[00:53:10] *** Quits: cryptonector (~nico@24.28.108.183) (Remote host closed the connection)
[00:53:51] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:53:56] <sokan> Next semester I'm so going to spam #perl :
[00:54:09] <sokan> s/:/":/"
[00:56:39] *** Quits: mahmutov_ (~mahmutov@37.155.46.200) (Ping timeout: 256 seconds)
[01:01:21] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[01:01:56] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[01:02:19] <sokan> http://dpaste.com/9TSPB8BUK (this be my code)http://dpaste.com/H4AJQR2VW (this be my file). In the file in line 2018 there is the number 186. How can I make it in my program so that when the user inserts any number (from the 2) that is greater than 186, the program stops and outputs "This ATOM does not exist"?
[01:02:57] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 240 seconds)
[01:03:56] *** Quits: bick (~kotaman@94.46.203.147) (Quit: Lost terminal)
[01:04:03] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[01:05:32] *** Quits: marcj (~marc@199.167.158.211) (Ping timeout: 250 seconds)
[01:07:14] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-895f-8d94-0789-85b9.res6.spectrum.com)
[01:07:24] *** Joins: marcj (~marc@199.167.158.211)
[01:08:22] *** Joins: davros (~davros@host86-184-180-214.range86-184.btcentralplus.com)
[01:09:26] <sokan> And I did it! :D
[01:09:59] *** Joins: joomla5 (uid527699@id-527699.uxbridge.irccloud.com)
[01:11:38] <sokan> http://dpaste.com/CX2GUBAX3 (in case there is some better way to do this :P)
[01:13:08] <pragma-> atom_id is awfully big for a stack variable
[01:13:45] <pragma-> then again stacks are quite big nowadays
[01:15:01] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: bbl)
[01:17:17] *** Joins: kurahaupo (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au)
[01:18:53] *** Joins: tavares (~tavares@user/tavares)
[01:19:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:21:04] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[01:21:20] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[01:23:05] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:23:21] *** Joins: inlight (~inlight@157.42.200.153)
[01:23:21] *** Quits: inlight (~inlight@157.42.200.153) (Changing host)
[01:23:21] *** Joins: inlight (~inlight@user/inlight)
[01:24:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[01:29:10] * sokan shrugs
[01:29:17] <sokan> No clue what is big and what is not XD
[01:29:56] *** Quits: fredd (~fredd@user/fredd) (Read error: Connection reset by peer)
[01:30:56] *** Joins: seninha (~seninha@user/seninha)
[01:34:19] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[01:35:40] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:36:23] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[01:37:48] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[01:41:41] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:46:08] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[01:47:00] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Remote host closed the connection)
[01:50:30] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[01:54:47] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:54:55] *** Joins: crashrep (~crashrep@user/crashrep)
[01:56:32] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[01:58:42] *** Quits: alch (~alch@151.38.188.243) (Read error: Connection reset by peer)
[01:59:10] *** Quits: AlbertoGP (~AlbertoGP@p57a9ae96.dip0.t-ipconnect.de) (Quit: Leaving)
[01:59:23] *** Quits: magla (~gelignite@55d49afb.access.ecotel.net) (Quit: Stay safe!)
[02:01:55] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:02:02] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[02:02:41] *** Joins: alch (~alch@151.36.179.23)
[02:04:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Quit: Quit)
[02:05:37] *** Quits: g0z (~gauze@entropy.tmok.com) (Quit: BitchX-1.2.1-397-g8072aea -- just do it.)
[02:09:52] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[02:14:27] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:14:27] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:14:27] *** Joins: wroathe (~wroathe@user/wroathe)
[02:14:53] <axon> what would be the correct syntax here for the temporary buffer: `id = strcpy(char[strlen(id)], id)`?
[02:15:30] <axon> I know I could use `strdup` to clone it, but was wondering how it could be done on the stack, without declaring an intermediary buffer
[02:17:29] *** Quits: PublicWifi (~PublicWiF@user/publicwifi) (Ping timeout: 256 seconds)
[02:20:04] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:20:18] *** Joins: Torr (~Torr@user/torr)
[02:21:32] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.6)
[02:23:29] <veltas> axon: In C99+ `id = strcpy((char[strlen(id)]){0}, id)`, and the buffer exists for the rest of the block
[02:23:46] <veltas> That is a compound literal
[02:23:59] <sham1> I'd do strlen(id) + 1
[02:24:08] <veltas> Yes that too!
[02:24:19] <nomagno> What
[02:25:22] <nomagno> Couldn't you be wasting a lot of space?
[02:25:39] <veltas> Always the danger with VLAs
[02:26:12] <nomagno> Couldn't you just use sizeof()?
[02:27:04] <ski> not if `id' isn't an array
[02:27:14] <veltas> id appears to be a pointer
[02:27:20] <nomagno> Ah
[02:27:24] <nomagno> Then yeah
[02:27:28] <clarity> veltas: First constraint of compound literals: >  The type name shall specify an object type or an array of unknown size, but not a variable length array type.
[02:27:31] <veltas> The example isn't that clear but the main thing I think axon was after was the compound literal syntax
[02:28:01] <axon> veltas: that's correct, I was wondering what the syntax would be
[02:28:17] <axon> `id` is a *char
[02:28:22] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:28:23] <veltas> So you can't do this with a variable length array axon, only if you know what size you want in advance
[02:28:25] <axon> sorry, char*
[02:28:29] <sham1> char *
[02:28:36] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[02:28:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[02:28:39] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[02:28:48] <nomagno> Is there any technical issue against passing a VLA to a function without losing any information?
[02:28:55] *** Quits: chomwitt (~chomwitt@2a02:587:dc03:8b00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[02:29:04] <veltas> Don't understand the question nomagno
[02:29:09] <nomagno> You can pass a pointer, or a struct that wraps over a fixed array
[02:29:30] <ski> or a pointer to the array (and possibly also its length)
[02:29:35] <nomagno> But you can pass a VLA as a function parameter in such a way sizeof() returns the zie of the VLA
[02:29:39] <sham1> Yeah, you can do something like: void foo(size_t arr_size, type (*arr)[arr_size]) {}
[02:29:41] <nomagno> can't*
[02:29:41] *** Quits: Torr (~Torr@user/torr) ()
[02:30:12] <ski> then `sizeof (*arr)' should work
[02:30:36] *** Joins: PublicWifi (~PublicWiF@user/publicwifi)
[02:30:43] <sham1> ,cc void foo(size_t arr_size, int (*arr)[arr_size]) { printf("%zu", sizeof(*arr)); } foo(4, int[4]{0});
[02:30:58] <nomagno> sham1: Im not dure func(int param, int arr[param])
[02:31:04] <candide> sham1: error: expected expression before 'int'
[02:31:05] <nomagno> Actually works
[02:31:17] <nomagno> Does sizeof() work properly with such an arrary?
[02:31:26] <sham1> ,cc void foo(size_t arr_size, int (*arr)[arr_size]) { printf("%zu", sizeof(*arr)); } foo(4, &(int[4]){0});
[02:31:45] <candide> sham1: No output.
[02:31:53] <sham1> Really?
[02:31:56] <nomagno> Why is it an array of pointers?
[02:32:05] <sham1> It's a pointer to array
[02:32:20] <nomagno> Why is it a pointer to an array?
[02:32:24] <nomagno> Can't it just be an array?
[02:32:25] <sham1> You can't do it otherwise
[02:32:34] <nomagno> Ah, pointer decay kicks in
[02:32:38] <ski> ,cc void foo(const size_t arr_size,int (*arr)[arr_size]) { printf("%zu",sizeof *arr); } foo(4,&(int[4]){0});
[02:32:42] <candide> ski: 16
[02:32:51] <sham1> BS
[02:32:57] *** Quits: pizdets (~pizdets@183.182.110.154) (Ping timeout: 240 seconds)
[02:33:03] <nomagno> Adds up, assuming int is 32 bits
[02:33:10] <nomagno> Wait-
[02:33:11] <nomagno> What?
[02:33:18] <nomagno> Huh
[02:33:21] <nomagno> WTF
[02:33:24] <sham1> What the heck is different between my snippet and ski's snippet except that arr_size is a const size_t
[02:33:31] <ski> huh .. not too sure
[02:33:40] <nomagno> C has a really weird system going on with arrays
[02:33:43] *** Joins: pizdets (~pizdets@183.182.111.1)
[02:33:55] <sham1> pragma-: fix your bot!
[02:33:59] <veltas> ,cc void foo(size_t arr_size, int (*arr)[arr_size]) { printf("%zu", sizeof *arr); } foo(4, &(int[4]){0});
[02:34:00] <clarity> sham1: candide doesn't like you using unnecessary parentheses with sizeof >:)
[02:34:02] <candide> veltas: 16
[02:34:26] <sham1> ,cc void foo(size_t arr_size, int (*arr)[arr_size]) { printf("%zu", sizeof *arr); } foo(4, &(int[4]){0});
[02:34:30] <candide> sham1: 16
[02:34:35] <veltas> deja vu
[02:34:38] <sham1> ,cc void foo(size_t arr_size, int (*arr)[arr_size]) { printf("%zu", sizeof(*arr)); } foo(4, &(int[4]){0});
[02:34:41] <candide> sham1: 16
[02:34:43] <clarity> :(
[02:34:44] <nomagno> That is BS
[02:34:47] <sham1> I don't even
[02:34:51] <clarity> I do odd
[02:34:58] <pragma-> sham1: que?
[02:35:08] <sham1> candide was being odd
[02:35:17] <candide> s﻿ham1, What is that supposed to mean?
[02:35:24] <sham1> Above it showed that I got no output for that exact input I did
[02:35:27] <sham1> And now it does
[02:35:37] <veltas> candide: You know what it means you oddball
[02:35:38] <nomagno> But the output seems wrong
[02:35:46] <pragma-> sham1: Oh, it doesn't like compound return types.
[02:35:46] <candide> I know what it means you oddball? Why, thanks.
[02:35:59] <pragma-> Make a typedef of it.
[02:36:18] <sham1> <sham1> ,cc void foo(size_t arr_size, int (*arr)[arr_size]) { printf("%zu", sizeof(*arr)); } foo(4, &(int[4]){0});
[02:36:23] <sham1> There's no compound return here
[02:36:24] <nomagno> There's no compound return type though
[02:36:38] <pragma-> Oh.
[02:36:44] <pragma-> ,cc paste
[02:36:49] <candide> pragma-: https://0x0.st/oofD.txt
[02:36:53] *** Quits: cosimone (~user@93-47-231-147.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:36:54] <clarity> oof
[02:37:05] <pragma-> Seems fine.
[02:37:44] <sham1> Yes it does. Yet a couple of minutes ago that didn't output the 16
[02:37:58] <nomagno> Hm, oh right it's an int array
[02:38:02] <ski> nomagno : can't pass arrays as parameters
[02:38:02] <sham1> Well anyway, that's how one passes an array to a function with stuff
[02:38:09] <nomagno> It's 4 32 bit ints
[02:38:23] <sham1> Well, pointer to array with dynamically calculated size information
[02:38:26] <ski> (`structs' containing arrays work, though)
[02:38:31] <sham1> Variably sized types
[02:38:42] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[02:38:45] <veltas> pragma-: See "23:01 < candide> sham1: No output."
[02:39:05] <nomagno> yeah but structs don't contain VLAs
[02:39:36] <nomagno> Is it necessarily wrong if I've been doing int myfunc(int arr[4])?
[02:39:46] <veltas> No
[02:40:02] <ski> hm, i guess `void foo(size_t n,struct { int arr[n]; } s);' won't work
[02:40:03] <nomagno> Of course the array isn't going to preserve size information
[02:40:06] <nomagno> But else I think its fine
[02:40:15] <veltas> You really can't get away with learning C and not knowing the array parameter caveat
[02:40:23] <veltas> That's my 2 cents
[02:40:25] <sham1> If you do that, you might as well do int myfunc(int art[static 4])
[02:40:41] <ski> nomagno : `int myfunc(int arr[4])' is not passing an array. that simply means `int myfunc(int *arr)'
[02:40:51] <nomagno> ski: I know
[02:41:00] <veltas> ski: And might as well not do that because compilers don't care and hoomans usually don't understand
[02:41:12] <veltas> And not all compilers will support the syntax as well.....
[02:41:18] <nomagno> So, is int myfunc(int arr[static 4]) any different?
[02:41:26] <nomagno> Oh it is an extension
[02:41:28] <nomagno> Apparently!
[02:41:30] <nomagno> ?
[02:41:33] <clarity> Not an extension
[02:41:34] <clarity> c99
[02:41:34] <veltas> It's in the standard
[02:41:44] <clarity> Says it must have at least 4 elements
[02:42:00] <sham1> ,english int myfunc(int arr[4]);
[02:42:04] <candide> sham1: Declare `myfunc` as a function taking `arr` as an array of 4 elements of int and returning int.
[02:42:04] <nomagno> Oh at least
[02:42:05] <pragma-> It's an optimization hint to the compiler. The array is still a pointer.
[02:42:09] <nomagno> Not ideal, but seems useful
[02:42:12] <sham1> ,english int myfunc(int arr[static 4]);
[02:42:13] <candide> sham1: Declare `myfunc` as a function taking `arr` as an array with optimization hint to provide access to the first element of 4 elements of int and returning int.
[02:42:17] <veltas> Whereas with "myfunc(int arr[4])" the 4 means nothing to the compiler at all
[02:42:34] <veltas> It's just a hint to the programmer if anything
[02:42:35] <sham1> The 4 without static or const is just a human thing
[02:42:47] <sham1> Although same could be said for const anyway
[02:43:06] <veltas> Not really though
[02:43:16] <nomagno> Yeah, but is it required to be part of the type signature when an unrelated error arises?
[02:43:17] <nomagno> Just curious
[02:43:24] <pragma-> veltas: s/programmer/compiler/, no? The compiler makes use of the hint, doesn't it?
[02:44:05] <sham1> Without static?
[02:44:16] <pragma-> there's no hint without static!
[02:44:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[02:44:19] <sham1> If so, I don't see why one would have it in the first place
[02:44:26] <nomagno> const isn't a hint, modifying a const variable better be severely punished!
[02:44:30] <veltas> I didn't write static pragma-
[02:44:34] <nomagno> On implementations that allow for it, anyways
[02:44:39] <veltas> But also compilers don't use it I believe
[02:44:59] <veltas> The compiler that uses the size hint may cast the first stone
[02:45:41] <nomagno> I don't really understand GCC's diacarded qualifier warning when passing non-const to a function that takes const
[02:45:49] <nomagno> It's a non-issue isn't it?
[02:45:54] <veltas> It depends
[02:46:36] <veltas> nomagno: Are you writing up some examples from here and "const correcting" them?
[02:46:55] <fizzie> I don't think there's a warning for the case when it's a non-issue (passing a `T *` value to a function declared to take a `const T *`).
[02:47:01] <veltas> No there isn't
[02:47:38] <nomagno> veltas: Hm, no, why?
[02:47:51] <veltas> Just projecting
[02:47:55] <nomagno> veltas: No there isn't in relation to what?
[02:48:08] <veltas> In relation to the previous message
[02:48:31] <veltas> "No there isn't [a warning...]"
[02:48:48] <nomagno> I have gotten it in such a context
[02:48:58] <veltas> Example please
[02:49:02] <nomagno> Passing char * to function that takes const char *
[02:49:08] <nomagno> Uh ...
[02:49:13] <nomagno> Example is my codebase
[02:49:46] <nomagno> Let me look up the line
[02:49:55] <veltas> I doubt it was actually char * to const char *
[02:52:00] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[02:52:51] <sham1> inb4 const char * const
[02:53:05] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac)
[02:53:13] <nomagno> https://gitea.com/Nomagno/Half-World/src/branch/master/src/core/hwvm/hwasm.c
[02:53:16] <nomagno> Line 79
[02:53:37] <nomagno> Its the inverse
[02:53:38] <nomagno> Dammit
[02:53:55] <nomagno> It was strtok
[02:54:00] <sham1> ew
[02:54:01] <nomagno> Makes sense :P
[02:54:22] <veltas> Normality restored
[02:54:40] <nomagno> I mean, yeah in this case it makes sense
[02:54:58] <sham1> What is this: https://gitea.com/Nomagno/Half-World/src/branch/master/src/core/hwvm/hwasm.c#L87
[02:55:01] <nomagno> strok is not supposed to touch the input
[02:55:09] <sham1> Why are you just not using the NULL macro
[02:55:29] <nomagno> sham1: I promise I have a good reason
[02:55:36] <sham1> Oh strtok will touch your input in nasty ways
[02:55:40] <nomagno> ... Which is, specifically, that I'm not using libc for this project
[02:55:46] <nomagno> Which isn't that great a reason
[02:55:53] <veltas> NULL is freestanding tho
[02:55:56] <sham1> You could still use the freestanding stuff
[02:56:07] <veltas> hence "isn't that great a reason"
[02:56:14] <nomagno> Which header is it in again?
[02:56:23] <veltas> Multiple, but stddef.h
[02:56:28] <veltas> is freestanding
[02:56:41] <sham1> stddef.h is the canonical one IIRC
[02:56:44] <nomagno> Yes, I include stddef.h
[02:56:49] <nomagno> This must predate that
[02:56:50] <nitrix> ,c11 FOOTNOTE.66
[02:56:51] <candide> http://www.iso-9899.info/n1570.html#FOOTNOTE.66 The macro NULL is defined in <stddef.h> (and other headers) as a null pointer constant; see 7.19.
[02:57:23] <nomagno> wwreq.h includes stddef.h, yes
[02:57:26] <nomagno> I'll swap it out
[02:57:36] <nomagno> hwreq.h*
[02:57:53] <veltas> For example locale.h defines NULL as well
[02:57:58] <sham1> But yeah. At least the stock strtok places '\0' after the tokens it finds
[02:58:20] <sham1> Which is just one of the reasons I'm not a fan
[02:58:21] <nomagno> Is that not a requirement?
[02:58:58] <veltas> strtok is quite old-fasioned, and rarely good enough for what you want
[03:00:15] <nomagno> I don't have many other alternatives unless I replace my nostdlib version with a reentrant version I find on the internets:tm:
[03:00:18] <veltas> That's why it's one of my favourite standard library functions
[03:00:33] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[03:00:55] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[03:01:07] <sham1> ,c11 7.23.5.8p4
[03:01:08] <candide> No such section '7.23.5.8' in C11 Draft Standard (n1570).
[03:01:09] *** Joins: Flash__ (~basti@lfbn-rou-1-163-11.w83-114.abo.wanadoo.fr)
[03:01:34] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:d190:13e6:b518:cdac) (Quit: Quit)
[03:01:36] <kit-ten> if i have a single-cored processor and i make a multi threaded program would i still need to deal with simultaneous writing to a var and other fun multi threaded goodies
[03:01:37] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[03:01:43] <sham1> Really?
[03:02:22] <sham1> The strtok function then searches from there for a character that is contained in the current separator string. If no such character is found, the current token extends to the end of the string pointed to by s1, and subsequent searches for a token will return a null pointer. If such a character is found, it is overwritten by a null character, which terminates the current token.  The strtok function saves a pointer to the following character, from which the
[03:02:22] <sham1> next search for a token will start.
[03:02:48] <sham1> So yeah, can't be const
[03:02:53] <veltas> kit-ten: Yes, but you'd see race conditions less sometimes (making them harder to catch!)
[03:03:10] <sham1> Also a neat detail
[03:03:20] <sham1> The strtok function is not required to avoid data races. The implementation shall behave  as if no library function calls the strtok function.
[03:03:34] <sham1> The gift that keeps on bloody giving
[03:03:38] <fizzie> sham1: It's 7.24 in C11, not 7.23.
[03:03:47] <kit-ten> veltas how fun
[03:03:50] <fizzie> 7.23 is for <stdnoreturn.h>.
[03:03:55] *** Joins: constxd (~brad@142.167.170.88)
[03:04:10] <sham1> Well then my PDF is wronf
[03:04:26] <veltas> strtok() is fantastic, engineering at its finest
[03:04:33] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[03:04:53] *** Joins: chenqisu12 (~bhca7d@183.217.201.21)
[03:05:04] *** Quits: chenqisu12 (~bhca7d@183.217.201.21) (Read error: Connection reset by peer)
[03:05:19] <fizzie> Hmm, I wonder if 7.23 is the shortest entire chapter.
[03:05:21] <fizzie> ,c11 7.23
[03:05:21] <candide> http://www.iso-9899.info/n1570.html#7.23 [_Noreturn <stdnoreturn.h>] 1 The header <stdnoreturn.h> defines the macro noreturn which expands to _Noreturn.
[03:05:26] <fizzie> That's all of it.
[03:05:45] <sham1> I tend to just write my own tokenizer stuff, where I just get returned a struct that describes the string span
[03:05:54] <sham1> With actually re-entrant state even
[03:05:59] <veltas> That's legit
[03:06:36] <nomagno> As you can see, I just wrote a tokenizer wrapper over strtok
[03:06:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[03:06:52] <sham1> Tokenizing is (mostly) just regular languages so it's not that bad
[03:06:56] <nitrix> Just checked my INCITS+ISO+IEC+9899-2011, it's also 7.24 in the official published standard, matching the draft candide has.
[03:07:04] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[03:07:23] <nomagno> My format is very simple
[03:07:25] <sham1> I must have an older draft then because mine shows 7.23 for string.h
[03:08:09] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:08:17] <nomagno> "TABLE\n\tKEY VAL\n\tSUBTABLE\n\t\tKEY VAL\n\t\tSKDY SCAL\n..."
[03:08:42] <nomagno> Very simple stuff
[03:08:47] <sham1> Very
[03:08:53] <veltas> sham1: Yeah me too, my draft doesn't have <stdnoreturn.h>
[03:08:58] <veltas> What a shame
[03:09:45] <veltas> Imagine buying the standard
[03:09:59] <nitrix> Ideally you want the latest draft just before the standard publication.
[03:10:34] <veltas> That's what I thought I had, apparently not
[03:10:37] <nitrix> veltas, 50$ isn't that bad for a programming language you use everyday.
[03:10:42] <fizzie> Does it say N1570 on it?
[03:10:43] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[03:10:49] <sham1> Well, I now downloaded the latest C2011 draft into my phone
[03:10:57] <veltas> nitrix: It's bad for a document I can sort-of get for free
[03:11:07] <nomagno> Though as you can see I do check against specific bytes for ASCII ' ', '\n', '\t', and '_'
[03:11:13] <nomagno> Which makes it a nice portable binary format
[03:11:23] <nomagno> And not encoding-dependant
[03:11:25] <nitrix> veltas, Pardon me, but you don't seem to be competently getting it for free.
[03:11:26] <sham1> I was apparently using N1256 which was old indeed
[03:12:01] <veltas> And yet I've competently freed it for getting
[03:14:07] <fizzie> Yeah, N1256 isn't even C11. It's C99 + TC1/2/3, and in it chapter 7.23 is <time.h>; <string.h> is 7.21 in that one.
[03:14:41] *** Quits: Akuli (~Akuli@82-203-165-119.bb.dnainternet.fi) (Quit: Akuli)
[03:14:52] <sham1> I'm too much of a cheapskate to spend almost 200 Euros on the C2018 standard for example. The draft works fine for me
[03:15:44] <veltas> http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1570.pdf
[03:16:08] <sham1> Yes
[03:16:23] <nitrix> That's the one the channel mostly uses. Except in an HTML version.
[03:16:37] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.6) (Ping timeout: 240 seconds)
[03:16:59] <nomagno> I use N1256 I think yeah
[03:17:04] <nomagno> but I use it as C99 reference
[03:17:11] <veltas> The only reason I had an older one is because I downloaded a draft before C11 was even published
[03:17:26] <sham1> 210 Euros from the national standards organisation when the VAT is included. Nice
[03:17:35] <veltas> So I certainly didn't think it was "C11" at the time because it didn't exist when I downloaded it
[03:17:47] <nitrix> sham1, What? No. https://webstore.ansi.org/standards/incits/incitsisoiec989920112012
[03:18:15] <sham1> https://sales.sfs.fi/en/index/tuotteet/ISO/ISO/ID9998/9/684367.html.stx
[03:18:28] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-236-121.pa.qld.optusnet.com.au)
[03:18:57] <sham1> But I guess it would be cheaper to buy it from America
[03:18:59] <nitrix> Don't buy it on Finnish Standards Association SFS then?
[03:19:23] *** Quits: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net) (Quit: Leaving.)
[03:19:24] <veltas> I think they generally only expect institutions and companies to actually buy the standard, which is why the price is higher than would seem reasonable
[03:19:37] <sham1> Yeah
[03:19:42] *** Quits: joomla5 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[03:19:47] <sham1> And the drafts work fine
[03:20:13] <fizzie> You should buy it from https://webstore.iec.ch/publication/63478 because paying in CHF is a sign of quality.
[03:20:15] <candide> Title of fizzie's link: ISO/IEC 9899:2018 | IEC Webstore
[03:20:17] *** Quits: kurahaupo (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[03:20:18] <fizzie> It's like getting a Swiss watch.
[03:20:22] * nomagno is still mad about signed integer arithmetic in C2x
[03:20:39] <veltas> nomagno: I'll bite, what about it?
[03:20:53] <sham1> 2023 is the year of checked arithmetic
[03:20:53] <nomagno> veltas: Oh, the fact it's not fully defined
[03:21:07] <nomagno> - Mandate 2's complement
[03:21:17] <nomagno> - Overflow is still a thing
[03:21:23] <nomagno> - ????
[03:21:30] *** Joins: Atque (~Atque@user/atque)
[03:21:36] <veltas> I'm glad they've mandated 2's complement
[03:21:40] <sham1> - Profit from sale of standards apparently
[03:21:43] <nitrix> nomagno, The C2x is slated to be C23, unless there's a big surprise to the agenda.
[03:22:00] <nomagno> nitrix: You remember how we started the decade?
[03:22:10] <veltas> That's what they said about C10 and C98
[03:22:16] <nomagno> I'll call it C23 when it's C23
[03:22:18] <nomagno> :)
[03:22:49] <nitrix> The committee members already call it C23 in their documents.
[03:22:53] <sham1> What's that, literal nuclear war? Oh damn it, the C standard process is pushed back
[03:23:13] <nomagno> Like, what is supposed to be undefined/implementation-defined about signed integer wraparound at this point?
[03:23:23] <nomagno> Wether the CPU explodes when it happens?
[03:23:28] <fizzie> Gotta think of those systems with trapping two's-complement integer arithmetic, you know.
[03:23:32] <nomagno> That's some very weird systems the C committee is supporting
[03:23:46] <nomagno> fizzie: Uh... none, I assume
[03:23:49] <veltas> Actually why do I act like I care about the standard at all, I really don't. They should add whatever stupid features they want, I won't be able to use it for decades anyway
[03:24:12] <edk> well, i imagine defining integer overflow will slow most correct programs down
[03:24:22] <edk> i wonder if anyone has tried to quantify that
[03:24:36] <fizzie> MIPS `ADD` instruction traps on overflow. (But it also has a variant that doesn't, `ADDU`, which I think is already what C compilers use for signed integers, so I don't think that's been the motivation.)
[03:25:00] <nomagno> edk: How so? Defining integer overflow would mean saying "yeah, when the counter overflows, it overflows"
[03:25:02] <nomagno> "it doesn't explode"
[03:25:06] <nitrix> veltas, Can you not hate on the work of people trying to align everyone's goals into something cohesive?
[03:25:18] <veltas> we already have a cohesive language though
[03:25:21] <sham1> I suppose it's just WG14 not wanting to rock the boat too much, even though they are mandating 2's complement
[03:25:35] <edk> nomagno: which would mean the compiler can no longer assume it doesn't overflow
[03:25:42] <nomagno> This is already what happens, you know, with mechanical and electrical systems
[03:26:16] <nitrix> veltas, "I won't be able to use it for decades anyway". Of course, because you have the mentality to stick to older standards and use obsolete compilers.
[03:26:23] <veltas> committees are committees
[03:26:35] <veltas> It's not about compiler support or my mentality
[03:26:35] *** Quits: dudek (~dudek@185.150.236.105) (Read error: Connection reset by peer)
[03:26:38] <sham1> Just ban signed arithmetic, ez
[03:26:49] <nomagno> nitrix: It's not a mentality thing, rather a genuine support requirement
[03:27:03] <veltas> It's because I work with other hoomans and not all of them will understand, I don't really want to force people to learn stuff unless it's super helpful, most of it isn't
[03:27:22] <fizzie> N2412, the two's-complement proposal that got integrated into the C23 drafts, does mention that "C++ goes much beyond what is presented here" including fully defining it. "WG14 has not yet foudn consensus for these points, so we leave them as they are in the current specification." http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2412.pdf
[03:27:55] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[03:27:59] <nitrix> veltas, Because they're defeatists like you. My personal projects and my work is all done with C18 and we keep up with the language's evolution.
[03:28:05] <nomagno> I'm sorry but it's not ambiguous what might happen when the thingy overflows/underflows anymore
[03:28:17] <edk> it doesn't matter whether it's ambiguous
[03:28:30] <veltas> nitrix: Well you're making all sorts of assumptions there, I can tell you though they're not defeatists. They just don't care about C as much as you
[03:28:33] <nomagno> It's a ring with edges -127 and 127.
[03:28:35] <sham1> Can we actually get signed chars with no trap representations? Please?
[03:28:46] <edk> -127. yeah...
[03:28:53] <nomagno> Uh
[03:28:55] <nomagno> Well, for chars
[03:28:58] <edk> signed chars don't have trap representations
[03:29:02] <nomagno> For 8-bit chares
[03:29:12] <nomagno> chars*
[03:29:13] <nomagno> For 8-bit signed chars*
[03:29:28] <sham1> Well, making it so that one can have -128 in a signed char portably
[03:29:31] <sham1> To clarify
[03:29:42] <nomagno> it's...
[03:29:49] <nomagno> -128 doesn't fit in an 8-bit char though
[03:29:53] <nitrix> veltas, You devote most of your life working, the least you can do is to care about it and be proud of your achievements.
[03:30:00] <sham1> nomagno: yes it does
[03:30:13] <veltas> nitrix: I have to admit I care about C more than they do, and I don't even care that much. It's just a tool, we all focus on different things
[03:30:14] <nomagno> sham1: Not on a 2's complement one
[03:30:17] <nomagno> only on some of them
[03:30:23] <sham1> 0b1000'0000
[03:30:35] <sham1> That's -128 on twos complement
[03:30:39] <fizzie> ,cc printf("%d..%d", CHAR_MIN, CHAR_MAX);
[03:30:42] <candide> fizzie: -128..127
[03:30:52] <nomagno> Huh...
[03:30:55] <nomagno> Yes, that seems correct
[03:30:59] <nomagno> my bad
[03:31:15] <nomagno> It's not portable right now because 1's complement and sign bit are still options
[03:31:17] <nomagno> with 2's complement, it will be portable
[03:31:17] <nomagno> probably
[03:31:26] <edk> anyway, quibbling about how two's complement works aside, just the fact that it's well-defined according to the standard means compilers can no longer use it to prove that things don't happen
[03:31:36] <rsjw> maybe we should all start storing our array indexes as negative numbers so they get greater range
[03:31:38] *** Joins: cryptonector (~nico@24.28.108.183)
[03:31:41] <sham1> -2^(n-1) to 2^(n-1)-1 is the range of an n-bit twos complement representation
[03:32:16] <nomagno> sham1: Yeah seems correct
[03:32:34] <nomagno> I just learned recently that a "complement" is a very well defined mathematical concept
[03:32:38] <nomagno> Didn't know where it came from until now
[03:33:05] <rsjw> it's likely several very well defined mathematical concepts
[03:33:13] <sham1> Or in fancier notation, [-2^(n-1), 2^(n-1) - 1)
[03:33:29] <sham1> Twos complement is literally just the modulo ring
[03:33:41] <rsjw> set complement, bitwise complement, etc
[03:33:42] <nomagno> Yeah
[03:34:13] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:34:26] <nomagno> Practically speaking, a software layer for twos complement would be insanely cheap
[03:34:48] <sham1> ~n + 1
[03:34:59] <sham1> ,parens ~n + 1
[03:35:01] <candide> sham1: (~n) + 1
[03:35:05] <sham1> Good
[03:35:19] <nomagno> In my architecture, for inversion of address 0: xor 0 =FF; add 0 =1
[03:35:25] <sham1> ñ + 1
[03:35:43] <nomagno> Yeah
[03:35:48] <edk> n̄?
[03:35:55] <sham1> Works too
[03:36:03] <nomagno> In this case I'm doing a xor with all bits set to 1
[03:36:08] <nomagno> cuz a not instruction is wasteful
[03:36:58] <nomagno> edk: What's that?
[03:37:14] <fizzie> Ooh, there's a good future-standard feature request, allow the use of U+0303 COMBINING TILDE so that if you have `unsigned x;` or whatnot, you can write x̃ for the bitwise complement.
[03:37:21] <nomagno> Oh, it's an n with a box on top
[03:37:25] <nomagno> ... what does that mean?
[03:37:27] <edk> an n and a U+0304 COMBINING MACRO
[03:37:29] <edk> N
[03:37:37] *** Quits: Flash__ (~basti@lfbn-rou-1-163-11.w83-114.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[03:37:47] <edk> fizzie: that's wonderful
[03:38:23] <sham1> Just integrate full LaTeX mathematics stuff into the syntax, we're going symbolic!
[03:38:30] <nomagno> What's this combining macro?
[03:38:32] <nomagno> How can I use it in my keyboard?
[03:38:40] <edk> combining macron
[03:38:43] <fizzie> Sadly, there seems to be no combining exclamation mark. But along those lines, maybe ¡x could be the equivalent of !!x.
[03:38:52] <edk> but a U+0305 COMBINING OVERLINE would have been more appropriate
[03:38:52] <zwr> please no
[03:38:53] <rsjw> like the cookie?
[03:38:53] <nomagno> Is it related to the 'compose key' I keep hearing about?
[03:38:54] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[03:39:11] <edk> if you have a compose sequence to type that character then you could use your keyboard to type it yes
[03:39:20] <edk> i imagine there are other ways to make it if you don't
[03:39:37] <nomagno> Yeah but it's annoying otherwise
[03:39:47] <nomagno> Hm, time to configure XFCE to accept a compose key
[03:39:49] <sham1> \frac{a}{b} instead of a/b
[03:39:53] <fizzie> Also, the conditional operator with the ? substituted by ‽ (an interrobang) would invert the condition.
[03:40:07] <veltas> nomagno: That is why two's complement was dominant in my opinion, because you don't even need hardware support for it for most basic operations. It is identical to unsigned for fixed size add,sub,mul.
[03:40:12] <edk> i can type it as <Compose> \ =
[03:40:15] <edk> i don't know if i have an overline
[03:40:28] <edk> oh, \ \ =. neat
[03:40:57] <veltas> nomagno: So even if a hardware platform is one's complement, for example, then as long as it also supports unsigned arith you get cheap two's complement arith too, as you say
[03:41:01] <sham1> How many unicode combining marks can we add with semantic meaning before we just get Zalgo the language
[03:41:56] <ski>   ‼x
[03:42:11] <sham1> ⚛️++ never forget
[03:42:21] <sham1> Damn it Perl 6/Raku
[03:42:50] *** Quits: kit-ten (~u0_a391@2600:380:5e25:ea83:54af:a6af:3485:3b02) (Ping timeout: 250 seconds)
[03:42:51] <ski>   ⧺i
[03:43:12] <apotheon> Raku should be deep 6ed.
[03:44:05] *** kit_ten is now known as kit-ten
[03:44:34] <sham1> 1️⃣0️⃣*️⃣9️⃣
[03:45:27] <edk> veltas: you do need special hardware for two's complement multiply, btw
[03:45:49] <veltas> I said fixed size
[03:46:55] <edk> as opposed to?
[03:48:28] <veltas> i32xi32=i32 is identical to u32xu32=u32
[03:49:00] <nomagno> Ugh
[03:49:04] <nomagno> Why are there so many keys?
[03:49:25] <nomagno> I need to map a dead key, a compose key, and god knows what more to be able to type that
[03:49:33] <nomagno> My layout isn't supposed to do this!
[03:50:57] <zwr> good reason to ban non ascii characters in your source files
[03:51:01] *** Quits: plastico (~plastico@neomutt/plastico) (Remote host closed the connection)
[03:51:14] *** Quits: dreamcat4 (uid157427@id-157427.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:51:28] <nomagno> Yeah that proposal seems weird to me
[03:51:38] <nomagno> the C character set has been small and elegant since before written history
[03:51:51] <nomagno> Let's keep it that way
[03:52:22] *** Joins: plastico (~plastico@neomutt/plastico)
[03:52:55] *** Joins: Torr (~Torr@user/torr)
[03:54:29] <edk> veltas: well yes, but i32xi32 doesn't actually = an i32
[03:55:43] <zwr> it does in C
[03:55:48] <edk> yeah :(
[03:55:56] *** Joins: viduthalai (~think@75.178.143.37)
[04:00:03] *** Joins: mixfix41 (~homefame@user/mixfix41)
[04:00:37] *** Quits: viduthalai (~think@75.178.143.37) (Client Quit)
[04:00:37] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[04:00:54] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[04:03:35] *** Joins: viduthalai (~think@75.178.143.37)
[04:03:48] *** viduthalai is now known as trisqueluser
[04:05:23] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca)
[04:06:29] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 256 seconds)
[04:09:58] *** Quits: rgrinberg (~textual@187.223.115.174) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:10:26] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:10:59] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[04:12:31] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:13:52] *** Joins: Wulf (~Wulf@user/wulf)
[04:13:57] *** Joins: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41)
[04:14:02] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 250 seconds)
[04:14:04] <owensjrw> Good evening all.
[04:14:23] <owensjrw> Why does this code come out 1 instead of -1?
[04:14:38] <owensjrw> #include <stdio.h> int main(void){ int x = 4; int *p = &x; int *t = p++; printf("%ld\n", p - t);}
[04:16:18] <veltas> edk: Well if your platform's unsigned multiply keeps the full precision you can truncate, which is cheap. The point is more that two's complement is always economical
[04:16:53] <crashrep> owensjrw: i think your printf may be subtracting the value of the memory address instead of the value that you get from de-refrencing it
[04:17:12] <crashrep> did you try `printf("stuff", *p - *t)`?
[04:18:20] <crashrep> actually, scratch that, i misread what your code is doing
[04:18:22] <owensjrw> I have not, it was a code bit on a challenge question I choose -1 and got it wrong, so I wrote it out compiled it an it came up 1. I was not understanding the why.
[04:18:55] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:19:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[04:19:51] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[04:20:44] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[04:21:07] <crashrep> ok, i understand why...it's because on the line `int *t = p++`, (where the address of t is set to p++), the value of p is increased by one _after_ it is refrenced to be assigned to t
[04:21:23] *** Joins: nitrix (~nitrix@user/nitrix)
[04:21:29] <crashrep> if you changed p++ to ++p then it would print 0
[04:22:09] *** Quits: tavares (~tavares@user/tavares) (Ping timeout: 256 seconds)
[04:22:26] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:23:08] <owensjrw> but address 00 - address 01 should be -1 right?
[04:23:30] <crashrep> no, when that happens, after the command is run t=4 and p=5
[04:23:36] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:23:58] *** Joins: liba (~liba@user/liba)
[04:24:10] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bbl)
[04:24:24] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[04:25:23] <fizzie> If you do the post-decrement manually, what you end up with is `int x = 4; int *p = &x; int *t = p; p++;`, meaning after the fact, t will point to &x and p will point to &x+1. So p - t -> (&x+1)-&x -> 1.
[04:25:31] <fizzie> s/post-dec/post-inc/, ugh.
[04:26:08] <caze> owensjrw: I have no idea why you think it should be -1.
[04:26:46] *** Joins: Viewday114 (~Viewday@user/viewday)
[04:27:13] *** Joins: Torr (~Torr@user/torr)
[04:27:24] <owensjrw> Guess I was going with p = address of x then t = address of x+1
[04:28:07] <crashrep> yeah, using p++ as a value is super weird, i was surprised when i learned about that too, along with ++p
[04:28:35] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:28:35] *** Viewday114 is now known as Viewday11
[04:28:57] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[04:29:33] <owensjrw> Thanks ya'll. Have a great evening. Have to go watch the 49ers pull out a miracle now.
[04:29:40] <pragma-> y'all!
[04:29:48] <crashrep> cya owensjrw
[04:30:01] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[04:30:22] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[04:32:40] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[04:35:18] *** Joins: coruja (~coruja@user/coruja)
[04:35:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[04:36:37] *** Quits: coruja (~coruja@user/coruja) (Client Quit)
[04:37:39] *** Quits: katsuragi (katsuragi@tilde.institute) (Ping timeout: 256 seconds)
[04:38:20] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[04:41:28] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[04:43:07] *** Joins: coruja (~coruja@user/coruja)
[04:43:19] *** Joins: karakedi (~eAC53C340@user/karakedi)
[04:44:17] *** Quits: Zenton (~user@user/zenton) (Remote host closed the connection)
[04:47:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[04:47:58] *** Quits: coruja (~coruja@user/coruja) (Client Quit)
[04:48:23] *** Joins: natewrench (~Soce1964@2603-7080-0b00-c89a-a818-f894-9d05-ca6d.res6.spectrum.com)
[04:48:25] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[04:49:33] *** Quits: natewrench (~Soce1964@2603-7080-0b00-c89a-a818-f894-9d05-ca6d.res6.spectrum.com) (Read error: Connection reset by peer)
[04:49:37] *** Joins: Zenton (~user@user/zenton)
[04:49:51] *** Joins: natewrench (~Soce1964@2603-7080-0b00-c89a-a818-f894-9d05-ca6d.res6.spectrum.com)
[04:49:56] *** Joins: coruja (~coruja@user/coruja)
[04:51:02] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:51:21] *** Quits: natewrench (~Soce1964@2603-7080-0b00-c89a-a818-f894-9d05-ca6d.res6.spectrum.com) (Read error: Connection reset by peer)
[04:53:17] *** Quits: coruja (~coruja@user/coruja) (Client Quit)
[04:54:05] *** Joins: coruja (~coruja@user/coruja)
[04:55:45] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:55:46] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[04:57:51] *** Joins: gargus (~user@125-209-154-224.tpgi.com.au)
[04:57:55] *** moose` is now known as moose
[04:58:52] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:01:45] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:02:57] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[05:05:04] *** Joins: mixfix41 (~homefame@user/mixfix41)
[05:09:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[05:09:54] *** Joins: crashrep (~crashrep@user/crashrep)
[05:10:48] *** Quits: nicode (~nic@2607:f2c0:9479:8500:c440:bb6b:d308:6307) (Ping timeout: 250 seconds)
[05:14:46] *** Joins: vysn (~vysn@user/vysn)
[05:15:52] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:15:54] *** Joins: katsuragi (katsuragi@tilde.institute)
[05:16:01] *** Joins: Rounin (~david@84.212.130.215)
[05:17:35] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:20:20] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[05:20:45] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[05:22:06] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[05:22:21] *** Quits: BCMM (~BCMM@user/bcmm) (Quit: Konversation terminated!)
[05:24:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[05:25:37] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:27:35] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[05:29:31] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca)
[05:32:11] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[05:32:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-895f-8d94-0789-85b9.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:32:37] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca) (Remote host closed the connection)
[05:33:57] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[05:39:01] *** Joins: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4)
[05:39:13] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[05:41:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[05:43:03] *** Joins: ferdna (~ferdna@user/ferdna)
[05:44:41] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:45:44] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[05:47:08] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[05:47:12] *** Joins: tavares (~tavares@187.19.212.26)
[05:47:17] *** Quits: tavares (~tavares@187.19.212.26) (Changing host)
[05:47:17] *** Joins: tavares (~tavares@user/tavares)
[05:47:51] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[05:54:36] *** Joins: justache (~justache@user/justache)
[05:57:10] *** Quits: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[05:58:08] *** Joins: Alhazred_ (~Alhazred@86.106.74.42)
[05:58:18] *** Quits: alch (~alch@151.36.179.23) (Read error: Connection reset by peer)
[05:58:55] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[06:00:45] *** Quits: Alhazred (~Alhazred@86.106.74.37) (Ping timeout: 256 seconds)
[06:01:19] *** Quits: dangrenier83 (~pi@user/dangrenier83) (Ping timeout: 256 seconds)
[06:01:44] *** Joins: linguist (~autistic@user/linguist)
[06:02:00] *** Quits: linguist (~autistic@user/linguist) (Client Quit)
[06:02:18] *** Joins: linguist (~autistic@user/linguist)
[06:03:02] *** Quits: Alhazred_ (~Alhazred@86.106.74.42) (Quit: leaving)
[06:03:11] *** Joins: alch (~alch@151.36.142.70)
[06:03:13] *** Joins: Akiva (~Akiva@user/Akiva)
[06:03:21] *** Joins: Alhazred (~Alhazred@86.106.74.42)
[06:03:34] *** Joins: dangrenier83 (~nil@user/dangrenier83)
[06:08:57] *** Quits: kts (~kts@103.73.237.127) (Ping timeout: 240 seconds)
[06:13:37] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[06:14:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:18:26] *** Quits: gargus (~user@125-209-154-224.tpgi.com.au) (Quit: Leaving)
[06:18:57] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[06:20:32] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[06:20:46] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[06:21:50] *** Joins: gce108 (~gce@user/gce108)
[06:26:52] *** Quits: tavares (~tavares@user/tavares) (Remote host closed the connection)
[06:28:13] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[06:32:37] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:34:25] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[06:36:57] *** Joins: EdFletcher (~PKD@user/edfletcher)
[06:41:15] *** Joins: Betal_ (~Betal@user/betal)
[06:42:02] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 240 seconds)
[06:42:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:44:24] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-236-121.pa.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[06:45:15] *** Joins: kurahaupo (~kurahaupo@pa49-182-40-226.pa.qld.optusnet.com.au)
[06:48:41] *** Joins: h4zel (~h4zel@user/h4zel)
[06:50:39] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:54:21] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:07] *** Quits: cgar (~cgar@072-187-006-075.res.spectrum.com) (Quit: leaving)
[06:56:32] *** Joins: remavas (~Remavas@user/remavas)
[06:56:54] *** Quits: remavas (~Remavas@user/remavas) (Client Quit)
[07:00:27] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Ping timeout: 256 seconds)
[07:00:43] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[07:07:01] *** Joins: fe23 (~fe23@2409:8a34:461:9470:243e:b641:395d:993d)
[07:07:18] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:11:53] *** Joins: g0z (gauze@entropy.tmok.com)
[07:23:02] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[07:26:47] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[07:27:02] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:27:43] *** Quits: torstenvl (~torstenvl@2601:14b:200:1e9c:ec74:83cf:9126:6a4f) (Quit: Leaving...)
[07:28:30] *** Quits: h4zel (~h4zel@user/h4zel) (Quit: WeeChat 2.8)
[07:29:43] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:42:49] *** Joins: Colt (~Colt@user/colt)
[07:44:53] *** Quits: asen (~asen@2408:821b:618:1a0:2cc1:43d3:3642:45c4) (Quit: Leaving)
[07:49:40] *** Quits: sokan (~sokan@2a02:587:9e01:f300:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[07:50:01] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:52:26] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:56:25] *** Joins: Darkcoal (~user@130.164.163.44)
[07:59:15] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[08:03:57] *** Joins: Nutte35 (~Nutte@202.153.82.57)
[08:08:39] *** Quits: trisqueluser (~think@75.178.143.37) (Quit: Konversation terminated!)
[08:10:51] *** Joins: gco (~gco@2601:647:4c80:2424:803b:b5e5:67bc:45cd)
[08:11:16] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[08:15:05] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[08:18:16] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[08:20:35] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[08:22:08] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[08:22:23] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[08:27:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:32:08] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[08:33:45] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:37:24] *** Joins: crashrep (~crashrep@user/crashrep)
[08:48:00] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[08:48:28] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[08:48:46] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[08:49:13] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Max SendQ exceeded)
[08:49:46] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[08:51:53] *** Quits: Darkcoal (~user@130.164.163.44) (Ping timeout: 256 seconds)
[08:52:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:52:53] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[08:53:50] *** Joins: Darkcoal (~user@130.164.163.44)
[08:58:37] *** Joins: raym (~raym@user/raym)
[09:00:04] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[09:00:11] *** Joins: Lumia (~Lumia@208.64.158.255)
[09:00:24] *** Joins: seninha (~seninha@user/seninha)
[09:01:13] *** Quits: linguist (~autistic@user/linguist) (Remote host closed the connection)
[09:02:36] *** Joins: Atque (~Atque@user/atque)
[09:04:14] *** Joins: linguist (~autistic@user/linguist)
[09:10:13] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[09:10:21] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:10:22] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[09:11:12] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[09:11:24] *** Quits: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net) (Quit: Leaving.)
[09:19:40] *** Joins: crashrip (~crashrep@user/crashrep)
[09:19:51] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[09:24:18] *** Joins: lleo (~leo@89-200-7-2.mobile.kpn.net)
[09:26:54] *** Quits: p0g0 (~p0g0@216.211.153.38) (Ping timeout: 250 seconds)
[09:28:06] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[09:30:12] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[09:35:15] *** Joins: thelma (uid509475@id-509475.lymington.irccloud.com)
[09:35:34] *** Joins: loganlee (~Thunderbi@user/loganlee)
[09:36:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:37:27] *** Quits: gco (~gco@2601:647:4c80:2424:803b:b5e5:67bc:45cd) (Quit: ZZZzzz…)
[09:37:59] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:42:48] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[09:44:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[09:45:06] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[09:46:08] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[09:46:09] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[09:46:30] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[09:47:36] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:57:37] *** Parts: rsjw (~quassel@user/rsjw) ()
[09:58:11] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[09:58:43] *** Quits: alch (~alch@151.36.142.70) (Read error: Connection reset by peer)
[09:59:15] *** Quits: Lumia (~Lumia@208.64.158.255) (Quit: ,-)
[10:02:38] *** Joins: alch (~alch@151.36.214.164)
[10:08:51] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:11:10] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[10:12:26] *** Quits: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net) (Quit: Leaving.)
[10:12:53] *** ai is now known as nukedclx
[10:27:28] *** Joins: missogra (~missogra@dynamic-095-112-109-193.95.112.pool.telefonica.de)
[10:27:57] *** Quits: crashrip (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[10:28:00] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 250 seconds)
[10:31:30] *** nate is now known as Guest8125
[10:31:30] *** Quits: Guest8125 (NBishop@o.apocaleaps.com) (Killed (calcium.libera.chat (Nickname regained by services)))
[10:31:47] *** Joins: synapt (~NBishop@o.apocaleaps.com)
[10:35:04] *** Quits: ashley_ (~ashley@ool-44c6903d.dyn.optonline.net) (Quit: ashley_)
[10:38:11] *** synapt is now known as nate
[10:40:46] *** Joins: selk (~selkfoste@user/selkfoster)
[10:46:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:48:24] *** Joins: mahmutov_ (~mahmutov@37.155.46.200)
[10:50:32] *** Quits: selk (~selkfoste@user/selkfoster) ()
[10:59:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:01:15] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:03:05] *** Joins: terminalpusher (~terminalp@2a01:586:2a30:1:d3c4:1c64:1e25:f0f2)
[11:03:23] *** Quits: terminalpusher (~terminalp@2a01:586:2a30:1:d3c4:1c64:1e25:f0f2) (Remote host closed the connection)
[11:04:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:05:42] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 250 seconds)
[11:06:09] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[11:06:19] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:07:28] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:10:03] *** Quits: foul_owl (~kerry@94.140.8.106) (Ping timeout: 250 seconds)
[11:10:08] *** Quits: missogra (~missogra@dynamic-095-112-109-193.95.112.pool.telefonica.de) (Quit: Leaving)
[11:11:31] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: leaving)
[11:12:22] *** Joins: leo__ (~leo@89-200-7-2.mobile.kpn.net)
[11:15:26] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[11:15:27] *** Quits: lleo (~leo@89-200-7-2.mobile.kpn.net) (Ping timeout: 256 seconds)
[11:16:53] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:21:37] *** Quits: leo__ (~leo@89-200-7-2.mobile.kpn.net) (Ping timeout: 240 seconds)
[11:24:03] *** Joins: foul_owl (~kerry@174-21-143-101.tukw.qwest.net)
[11:30:39] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[11:30:46] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:30:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[11:32:09] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:33:01] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[11:33:28] *** Joins: aradesh (~aradesh@user/aradesh)
[11:46:41] *** vinleod is now known as vdamewood
[11:52:13] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:52:32] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:f83e:378c:1afc:a9b5) (Ping timeout: 240 seconds)
[12:00:58] *** Quits: jkotra (~jkotra@117.98.208.88) (Quit: The Lounge - https://thelounge.chat)
[12:01:33] *** Joins: jkotra (~jkotra@117.98.208.88)
[12:01:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[12:02:34] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[12:04:33] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:05:00] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[12:08:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[12:09:29] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:11:52] *** Joins: diophantoz (~diophanto@user/diophantoz)
[12:12:59] *** Joins: chomwitt (~chomwitt@2a02:587:dc03:8b00:12c3:7bff:fe6d:d374)
[12:14:12] *** Joins: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr)
[12:15:08] *** Quits: chomwitt (~chomwitt@2a02:587:dc03:8b00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[12:20:59] *** Quits: mahmutov_ (~mahmutov@37.155.46.200) (Ping timeout: 256 seconds)
[12:24:05] *** Joins: Burgundy (~NA@86.121.143.206)
[12:24:29] *** Quits: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[12:24:45] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[12:25:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[12:26:45] *** Joins: coruja (~coruja@user/coruja)
[12:27:07] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:27:07] *** Joins: inlight (~inlight@157.42.246.147)
[12:27:07] *** Quits: inlight (~inlight@157.42.246.147) (Changing host)
[12:27:07] *** Joins: inlight (~inlight@user/inlight)
[12:28:11] *** Joins: bick (~kotaman@94.46.203.147)
[12:29:08] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:34:30] *** Joins: sokan (~sokan@85.73.227.185)
[12:37:42] *** Joins: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr)
[12:39:23] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:41:16] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[12:47:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[12:48:10] *** Joins: tboehme (~tboehme@p200300ce1710ed434a9bf556c35070f0.dip0.t-ipconnect.de)
[12:49:34] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:50:02] *** Quits: tboehme (~tboehme@p200300ce1710ed434a9bf556c35070f0.dip0.t-ipconnect.de) (Client Quit)
[12:52:13] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:7dea:a064:ef4b:9600)
[12:55:32] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e160:8c45:e86d:6d90) (Ping timeout: 240 seconds)
[12:56:27] *** Beastie is now known as beastie
[13:00:19] *** Joins: soul-d (~uknown@user/soul-d)
[13:02:07] *** Joins: loganlee (~Thunderbi@user/loganlee)
[13:04:33] <axon> can a macro be defined to check the result of an expression and to bail if null/return in-place the expression result if non-null?
[13:05:19] <axon> `char *ex = NOT_NULL(NULL)` - this bails
[13:05:33] *** Joins: Flash__ (~basti@lfbn-rou-1-163-11.w83-114.abo.wanadoo.fr)
[13:05:35] <dave0> not like that
[13:05:37] <axon> `char *ex = NOT_NULL("this is fine")` - ex == "this is fine"
[13:06:05] <axon> can't be done since `if` is a statement?
[13:06:09] <dave0> the closest is assert() but it doesn't work like that
[13:06:26] <dave0> char *ex = "this is fine"; assert(ex != NULL);
[13:06:27] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:06:34] <dave0> but it's not compile time, assert() is run time
[13:06:47] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[13:07:19] <dave0> and assert can be turned off, so that would remove the check, which you may not want
[13:07:37] <axon> I see
[13:09:06] <dave0> axon: hmm let me think about it more
[13:09:27] <axon> alright, I'm checking `assert`s definition
[13:10:03] <dave0> an expression that triggers a compile error if it's NULL
[13:10:22] <dave0> maybe
[13:10:45] <scaramanga> https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html
[13:10:46] <dave0> sorry i can't think of a way.. maybe someone else knows a trick but not me :-/
[13:11:42] <scaramanga> #define NOT_NULL(x) ({if ((x) == NULL) { return; } x; })
[13:12:26] <axon> scaramanga: would the result of `x` be stored somewhere between the check and the return?
[13:12:58] <axon> (oh, just had a look at the link you provided)
[13:12:59] <scaramanga> if optimisations are enabled it should work as you expect, check godbolt
[13:13:12] <scaramanga> if you're concerned about double evaluation of side-effects in x, then you can use a variable
[13:13:29] <axon> alright, cool
[13:13:30] <axon> thank you both
[13:13:33] <scaramanga> #define NOT_NULL(x) ({typeof(x) _x = (x); if (_x == NULL) { return; } _x; })
[13:13:35] <scaramanga> or whatever
[13:13:37] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[13:13:49] <scaramanga> nps, yw
[13:14:32] *** Quits: bick (~kotaman@94.46.203.147) (Quit: leaving)
[13:14:43] *** Joins: bick (~kotaman@94.46.203.147)
[13:18:21] <dave0> is static_assert a thing?
[13:18:37] <dave0> eh i don't know how to use it
[13:19:14] <dave0> ,cc char *ex = 0; static_assert(ex != NULL);
[13:19:16] <candide> dave0: error: expression in static assertion is not constant
[13:19:39] <dave0> yep. no idea how to use it
[13:20:09] <veltas> ,cc char test[] = "hi"; static_assert(sizeof test < 5);
[13:20:14] <candide> veltas: no output: test = "hi"
[13:20:20] <veltas> ,cc char test[] = "hi"; static_assert(sizeof test > 5);
[13:20:21] <candide> veltas: error: static assertion failed
[13:20:44] <scaramanga> yeah, it came in with C11
[13:21:25] <ChoHag_> It can only trigger a compile-time error if it knows of the NULL value at compile time.
[13:21:31] <scaramanga> it's actually called _Static_assert in the syntax, and there's a macro for it called static_assert, so you can #undef it to get your namespace back
[13:22:08] <scaramanga> said macro in assert.h
[13:22:12] <ChoHag_> You can #define thing(foo) ((foo) == NULL ? abort(##foo) : (foo))
[13:23:25] <scaramanga> i think you can't do: #define thing(foo) __builtin_constant_p(foo) ? static_assert(foo) : assert(foo)
[13:23:26] <scaramanga> :)
[13:24:08] <scaramanga> maybe i'm wrong
[13:26:23] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[13:27:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:28:28] <dave0> i searched for   __attribute__((nonnull))    and it's nearly something
[13:28:48] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[13:28:55] <dave0> if instead of a macro, you used a function, you might be able to make it complain if the argument is null
[13:29:11] <scaramanga> sadly nonnull doesn't work like that
[13:29:21] <scaramanga> what it actually ends up doing is removing any NULL checks
[13:29:33] <dave0> oohh
[13:29:38] <scaramanga> you only get a warning if you pass NULL directly
[13:30:03] <scaramanga> not sure if it's still the case, but i was using that attribute a lot on a codebase and it actually bit me in the ass for that reason
[13:30:20] <scaramanga> but was back in the gcc8 or gcc9 days i guess
[13:30:51] *** Quits: thelma (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[13:31:20] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:25:3430:6d5f:c01)
[13:31:31] <dave0> so many "it would be nice if..." 's
[13:32:00] <scaramanga> #define thing(foo) if ( __builtin_constant_p(foo) ) { static_assert(foo); } else { assert(foo); }
[13:32:12] <scaramanga> aha, static_assert is a statement not an expression, that's the problem with using it in a ternary
[13:32:17] <scaramanga> yeah
[13:32:18] *** Quits: beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.3)
[13:32:25] <scaramanga> sorry to say it but... rust :D
[13:34:02] <ChoHag_> (check(foo) ? (static_assert(foo), 0) : assert(foo))
[13:34:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[13:37:42] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[13:37:56] *** Joins: Beastie (~lcu@user/thebeastie)
[13:38:10] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[13:38:31] *** Beastie is now known as beastie
[13:38:37] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:39:38] <scaramanga> ChoHag_, doesn't seem to do it...
[13:39:46] <axon> scaramanga: hmm, still having some issues: https://clbin.com/4Tp9d
[13:39:49] <scaramanga> https://godbolt.org/z/8r7rs598c
[13:39:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[13:40:06] <axon> does `typeof` determine the return type of an expression without evaluating it?
[13:40:15] <axon> such that `exp` is only evaluated once in that example?
[13:40:30] <ChoHag_> {...} is not an expression so the result of the ternary will be dropped.
[13:40:43] <scaramanga> yeah, pretty sure it does
[13:41:25] <sham1> axon: yes
[13:41:52] <sham1> Since the type information of the expression is of course something you know at compile time
[13:42:02] *** Joins: seninha (~seninha@user/seninha)
[13:42:39] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[13:43:04] *** Quits: Betal_ (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:44:50] <axon> using the definition in that example, I keep getting `error: void value not ignored as it ought to be` when I assign the result of NOT_NULL to a variable
[13:45:35] <ChoHag_> That's because NOT_NULL evaluates to {...} which is not an expression, or is one with a void value.
[13:46:28] <scaramanga> axon, https://godbolt.org/z/4EGE6xGEq
[13:47:03] <scaramanga> not sure why that fixes it
[13:47:18] <scaramanga> a ternary can't be the return expression of an expression-statement maybe?
[13:47:27] <axon> ChoHag_: that should work, though, according to this: https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html
[13:47:43] <scaramanga> can't be, it's in the example
[13:47:52] <scaramanga> #define maxint(a,b) \
[13:47:52] <scaramanga>   ({int _a = (a), _b = (b); _a > _b ? _a : _b; })
[13:47:54] <scaramanga> yea that's an example
[13:48:25] <scaramanga> maybe because one branch of the ternary is noreturn
[13:48:46] <scaramanga> or void return type, yeah
[13:48:52] <scaramanga> without a noreturn annotation perhaps
[13:49:20] <dave0> i use min and max a fair bit, it'd be nice in the standard library
[13:49:47] <dave0> it'd probably break a lot of code cos they're common names
[13:50:17] <scaramanga> yeah, it's exactly becuase die(...) has return type void, and even __attribute__((noreturn)) won't fix it
[13:50:43] <scaramanga> which is interesting
[13:50:54] <scaramanga> https://godbolt.org/z/bGdK7c8rf
[13:51:21] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[13:51:34] <axon> I see, that makes sense
[13:51:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[13:51:42] <axon> so I suppose there mustn't be any confusion about the return type: it can only be of one type
[13:52:06] <dave0> you can work around that with _Generic
[13:52:58] <dave0> it's getting complicated
[13:53:06] <axon> yep, it is!
[13:53:12] <axon> scaramanga: yeah, should've provided an example using godbolt, thanks for that
[13:53:12] <scaramanga> hehe, well, it's easy to just not use the ternary, he can just use an if statement there :)
[13:54:15] <scaramanga> but that's an intersting fact of ternaries that even if one arm is noreturn, then the types of both arms still need to match if you expect to use the result(?)
[13:54:18] <scaramanga> if that's the right explanation
[13:54:44] <scaramanga> it's like one of those trick question to throw in to a job interview
[13:55:27] <axon> I forget the details, but doesn't Rust have something similar with the never (!) primitive type?
[13:55:52] <axon> https://doc.rust-lang.org/std/primitive.never.html
[13:55:53] <candide> Title of axon's link: never - Rust
[13:57:56] <scaramanga> oh, that's interesting, noreturn is actually like a type
[13:58:02] <scaramanga> python has something like it, too
[13:58:55] *** Quits: alch (~alch@151.36.214.164) (Read error: Connection reset by peer)
[13:58:56] <scaramanga> https://docs.python.org/3/library/typing.html#typing.NoReturn
[13:59:11] <scaramanga> it's kind of poorly documented but it has very similar uses and effects
[13:59:14] <scaramanga> during type checking
[14:00:03] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:00:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[14:00:39] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:02:09] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[14:02:22] <sham1> _Noreturn
[14:02:57] *** Joins: alch (~alch@151.36.209.223)
[14:03:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:03:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[14:04:55] <scaramanga> sham1, _Noreturn works the same as __attribute__((noreturn)), and it doesn't cause the type of thing to coerce to any type
[14:05:27] <sham1> That is true
[14:05:32] <sham1> Although it's also not needed
[14:05:34] <scaramanga> tho i guess it would be nice if it did
[14:09:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[14:10:15] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:11:07] *** Joins: plastico (~plastico@neomutt/plastico)
[14:16:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:16:31] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:17:49] *** Lord_of_Life_ is now known as Lord_of_Life
[14:21:09] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[14:21:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[14:23:16] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:27:49] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[14:32:48] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:33:33] *** Joins: csrf (~csrf@user/csrf)
[14:33:57] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[14:34:43] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[14:34:44] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:36:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[14:37:21] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:42:51] *** Joins: liba (~liba@user/liba)
[14:43:31] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[14:44:21] *** Quits: etchi (~A@195.198.128.15) (Quit: Leaving)
[14:45:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[14:50:46] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 268 seconds)
[14:55:57] *** Quits: Nutte35 (~Nutte@202.153.82.57) (Ping timeout: 240 seconds)
[14:56:53] *** Joins: Nutte35 (~Nutte@202.153.81.146)
[15:05:34] *** Joins: Atque (~Atque@user/atque)
[15:09:53] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[15:11:52] *** Joins: BCMM (~BCMM@user/bcmm)
[15:14:40] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[15:15:46] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[15:16:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[15:18:11] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:20:51] *** Joins: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483)
[15:22:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[15:23:02] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[15:23:11] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[15:23:16] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:23:27] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[15:24:07] *** Joins: haliucinas (~haliucina@5.20.153.21)
[15:26:17] *** Joins: etchi (~A@195.198.128.15)
[15:29:15] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[15:31:57] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[15:32:18] *** Joins: BSaboia (~bsaboia@187.19.139.6)
[15:34:59] *** Quits: kurahaupo (~kurahaupo@pa49-182-40-226.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[15:35:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:18] *** Joins: constxd (~brad@142.167.170.88)
[15:36:48] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[15:36:56] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:11] *** Quits: BSaboia (~bsaboia@187.19.139.6) (Quit: This computer has gone to sleep)
[15:39:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:40:52] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:45:38] *** Joins: Klinda (~superleag@user/klinda)
[15:55:01] *** Joins: nicode (~nic@2607:f2c0:93a9:8b00:e586:2ab6:c288:c808)
[15:58:30] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[16:00:55] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[16:06:36] *** Joins: mahmutov_ (~mahmutov@37.155.46.200)
[16:07:31] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[16:07:56] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[16:08:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:15:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[16:15:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:16:14] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[16:20:54] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:22:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:23:52] *** Joins: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374)
[16:25:51] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[16:26:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[16:27:12] *** Joins: liba (~liba@user/liba)
[16:27:17] *** Joins: thelma (uid509475@id-509475.lymington.irccloud.com)
[16:28:26] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[16:28:37] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:31:00] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[16:32:39] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[16:39:55] *** Quits: nicode (~nic@2607:f2c0:93a9:8b00:e586:2ab6:c288:c808) (Ping timeout: 268 seconds)
[16:40:58] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:41:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[16:42:30] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[16:48:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[16:48:52] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[16:51:19] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[16:51:38] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[16:52:12] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: brb)
[16:55:35] *** Joins: notzmv (~zmv@user/notzmv)
[16:57:01] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:57:57] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[17:00:31] *** Joins: magla (~gelignite@55d42e32.access.ecotel.net)
[17:01:36] *** Joins: luizfrds (~Luiz@152.250.243.147)
[17:01:45] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:05:19] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[17:09:57] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[17:10:00] *** Quits: raym (~raym@user/raym) (Remote host closed the connection)
[17:10:25] *** Karyon_ is now known as Karyon
[17:10:31] *** Quits: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483) (Remote host closed the connection)
[17:10:51] *** Joins: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483)
[17:13:21] *** Joins: vysn (~vysn@user/vysn)
[17:16:47] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[17:18:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[17:19:24] *** Joins: raym (~raym@user/raym)
[17:19:35] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[17:21:47] *** Joins: shivesh (~shivesh@user/shivesh)
[17:22:37] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[17:24:31] *** Joins: puke (~puke@user/puke)
[17:26:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:26:37] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[17:28:05] *** Joins: nyah (~nyah@94.6.71.219)
[17:30:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 268 seconds)
[17:30:40] *** Joins: kurahaupo (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au)
[17:30:49] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:31:55] *** Joins: pulse (~pulse@user/pulse)
[17:32:09] *** Joins: FragByte_ (~christian@user/fragbyte)
[17:32:17] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[17:32:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[17:34:14] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[17:35:02] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 240 seconds)
[17:35:02] *** FragByte_ is now known as FragByte
[17:36:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:37:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:40:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[17:40:48] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[17:42:02] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[17:47:49] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[17:48:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[17:49:34] *** Quits: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[17:50:09] *** Joins: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374)
[17:52:30] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[17:54:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[17:54:24] *** Joins: strajder (~strajder@user/strajder)
[17:54:37] *** Quits: mahmutov_ (~mahmutov@37.155.46.200) (Ping timeout: 240 seconds)
[17:54:45] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[17:55:19] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[17:56:32] *** Quits: pucara (~i@host14.181-1-101.telecom.net.ar) (Quit: Lost terminal)
[17:57:19] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[17:58:50] *** Quits: alch (~alch@151.36.209.223) (Read error: Connection reset by peer)
[17:59:05] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[18:02:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[18:03:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:03:19] *** Joins: alch (~alch@151.36.201.194)
[18:03:26] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 250 seconds)
[18:03:27] *** Quits: ornxka (~ornxka@user/ornxka) (Ping timeout: 256 seconds)
[18:03:50] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[18:04:10] *** Joins: ornxka (~ornxka@user/ornxka)
[18:07:12] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:14:08] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[18:18:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:6c38:610a:dd57:a9dc)
[18:18:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:6c38:610a:dd57:a9dc) (Changing host)
[18:18:20] *** Joins: skapata (~Skapata@user/skapata)
[18:18:22] *** Joins: Atque (~Atque@user/atque)
[18:18:33] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[18:19:12] *** Joins: mahmutov_ (~mahmutov@37.155.46.200)
[18:20:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[18:21:25] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[18:23:57] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[18:24:28] *** Joins: kts (~kts@103.73.237.191)
[18:26:14] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[18:27:17] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 240 seconds)
[18:29:35] *** Joins: Satin (uid193953@user/Seten)
[18:30:55] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 268 seconds)
[18:34:07] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[18:35:11] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[18:35:42] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[18:36:17] *** Quits: mahmutov_ (~mahmutov@37.155.46.200) (Ping timeout: 240 seconds)
[18:36:59] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[18:37:30] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:38:33] *** Joins: mahmutov_ (~mahmutov@5.176.28.231)
[18:38:33] *** Quits: raym (~raym@user/raym) (Quit: leaving)
[18:41:02] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[18:45:06] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[18:45:22] *** Joins: constxd (~brad@142.167.170.88)
[18:45:34] *** Joins: ferdna (~ferdna@user/ferdna)
[18:47:55] *** Quits: pyook (~pyook@user/puke) ()
[18:47:58] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[18:48:56] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 250 seconds)
[18:51:27] *** Joins: raym (~raym@user/raym)
[18:51:40] *** Joins: inlight (~inlight@157.42.246.147)
[18:51:40] *** Quits: inlight (~inlight@157.42.246.147) (Changing host)
[18:51:40] *** Joins: inlight (~inlight@user/inlight)
[18:52:44] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[18:55:58] *** Quits: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se) (Read error: Connection reset by peer)
[18:58:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[19:00:37] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:6978:fe33:30af:ede6)
[19:01:11] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[19:01:11] *** Joins: inlight (~inlight@157.42.246.147)
[19:01:11] *** Quits: inlight (~inlight@157.42.246.147) (Changing host)
[19:01:11] *** Joins: inlight (~inlight@user/inlight)
[19:01:38] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[19:02:57] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[19:03:16] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[19:04:34] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Read error: Connection reset by peer)
[19:04:58] *** Quits: Flash__ (~basti@lfbn-rou-1-163-11.w83-114.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[19:05:40] *** Quits: kurahaupo (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au) (Remote host closed the connection)
[19:05:56] *** Joins: kurahaupo (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au)
[19:06:42] *** Quits: ornxka (~ornxka@user/ornxka) (Ping timeout: 250 seconds)
[19:08:25] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[19:09:57] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[19:11:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[19:12:04] *** Joins: rsjw (~rsjw@user/rsjw)
[19:12:18] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[19:14:13] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[19:14:42] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 268 seconds)
[19:19:10] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[19:20:08] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 250 seconds)
[19:20:22] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[19:21:14] *** Quits: Darkcoal (~user@130.164.163.44) (Quit: Darkcoal)
[19:22:47] *** Joins: mmohammadi9812 (~Mohammad@2.178.202.163)
[19:23:17] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[19:23:20] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[19:23:47] *** Joins: hanzo (uid532183@user/hanzo)
[19:24:57] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[19:24:57] *** Joins: epony (epony@user/epony)
[19:28:27] *** Quits: kurahaupo (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[19:28:39] *** Quits: kplant (~kplant@user/kplant) (Quit: _)
[19:28:55] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:30:07] *** Quits: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093) (Quit: You have been kicked for being idle)
[19:30:43] *** Joins: joomla5 (uid527699@id-527699.uxbridge.irccloud.com)
[19:30:51] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:31:28] *** Joins: kplant (~kplant@user/kplant)
[19:31:29] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[19:31:53] *** Joins: Flash___ (~basti@lfbn-rou-1-163-11.w83-114.abo.wanadoo.fr)
[19:32:31] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:33:32] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:33:36] *** Quits: etchi (~A@195.198.128.15) (Read error: Connection reset by peer)
[19:39:51] *** Joins: ornxka (~ornxka@user/ornxka)
[19:40:21] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[19:42:31] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[19:43:01] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[19:44:50] *** Quits: kit-ten (~u0_a391@2603-6010-a141-6fa3-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Ping timeout: 250 seconds)
[19:45:05] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[19:45:42] *** Quits: kit (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com) (Ping timeout: 250 seconds)
[19:46:23] *** Quits: beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.4)
[19:49:32] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[19:49:51] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:50:12] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[19:50:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:51:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:52:11] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:52:21] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Client Quit)
[19:52:40] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[19:52:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:53:05] *** Quits: Nutte35 (~Nutte@202.153.81.146) (Read error: Connection reset by peer)
[19:53:10] *** Joins: remavas (~Remavas@user/remavas)
[19:54:17] *** Quits: BCMM (~BCMM@user/bcmm) (Quit: Konversation terminated!)
[19:55:22] *** Joins: Beastie (~lcu@user/thebeastie)
[19:55:37] *** Quits: remavas (~Remavas@user/remavas) (Client Quit)
[19:56:03] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:02:37] *** Joins: mixfix41 (~homefame@user/mixfix41)
[20:03:01] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[20:03:08] *** Quits: thelma (uid509475@id-509475.lymington.irccloud.com) ()
[20:04:06] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[20:07:30] *** Quits: Beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.4)
[20:08:09] *** Joins: Beastie (~lcu@user/thebeastie)
[20:08:56] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:10:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[20:11:19] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[20:13:54] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 268 seconds)
[20:15:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[20:16:47] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[20:20:27] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:23:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[20:24:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:24:50] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[20:24:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:24:50] *** Joins: wroathe (~wroathe@user/wroathe)
[20:25:35] *** Quits: ornxka (~ornxka@user/ornxka) (Quit: WeeChat 3.4)
[20:27:01] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[20:28:30] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[20:28:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[20:29:28] *** Joins: Jackii (~Jackiii@93-41-0-232.ip79.fastwebnet.it)
[20:29:39] <Jackii> hello
[20:30:02] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[20:31:02] *** Quits: austin__ (~austin@pool-74-96-213-156.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[20:31:23] <Jackii> I have a void* parameter that could be 2 different compatible structs, how could I define it ?
[20:31:43] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[20:33:17] <Jackii> void func( void* strc ) { printf("%s", strc.name); }
[20:33:30] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[20:33:50] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[20:34:01] <Jackii> I should define in some way strc
[20:34:57] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:35:02] <markand> you usually cast inside the function as the appropriate type
[20:36:03] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[20:36:23] <sham1> If the two structs are compatible, why not have a common part and then the difference as two distinct structs
[20:36:40] *** Joins: lleo (~leo@89-200-7-2.mobile.kpn.net)
[20:37:23] *** Joins: kit-ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[20:38:10] *** Quits: magla (~gelignite@55d42e32.access.ecotel.net) (Quit: Stay safe!)
[20:38:23] <boreas> Jackii: you could define a union comprising the two structs
[20:38:50] <Jackii> how ?
[20:39:38] *** Joins: Akuli (~Akuli@87-94-108-141.bb.dnainternet.fi)
[20:39:38] <markand> union { struct a {}; struct b {}; }
[20:41:31] *** Joins: pert (~pert@fsf/member/pert)
[20:42:37] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:46:57] *** Quits: mmohammadi9812 (~Mohammad@2.178.202.163) (Ping timeout: 240 seconds)
[20:47:02] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[20:47:07] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:47:25] <edk> it's often possible to restructure things so that your structs are struct a { struct common x; ... } and struct b { struct common x; ... } and your void * becomes a struct common * which is either &a.x or &b.x
[20:47:39] <kurahaupo_> Jackii: struct common { int i; char *name;}; struct type_a { struct common common; float x; }; struct type_b { struct common common; unsigned long long y;}; void func(struct common *p) { printf("%s\n", p->name);  }
[20:47:56] <edk> oh hey kurahaupo and i had the exact same idea
[20:48:05] <kurahaupo_> snap
[20:48:16] <edk> anyway, that doesn't always work, but when it does it's much more obviously correct, doesn't rely on any special rules
[20:50:03] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[20:50:08] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[20:50:50] <Jackii> ...
[20:52:30] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[20:52:40] *** Joins: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com)
[20:53:43] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[20:56:46] <Jackii> i cant typedef 2 types to the same alias?
[20:58:16] *** Joins: pert (~pert@fsf/member/pert)
[20:58:39] *** Quits: pert (~pert@fsf/member/pert) (Remote host closed the connection)
[20:58:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[20:59:09] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:59:39] *** Quits: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com) (Remote host closed the connection)
[21:00:03] *** Joins: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com)
[21:00:22] <markand> of course you can
[21:01:38] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[21:01:57] *** Joins: cousteau (~cousteau@user/cousteau)
[21:01:58] *** Joins: AlbertoGP (~AlbertoGP@p57a9ae96.dip0.t-ipconnect.de)
[21:02:57] *** Quits: Beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.4)
[21:03:05] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[21:05:18] <Jackii> can I ?
[21:06:09] *** Quits: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com) (Remote host closed the connection)
[21:08:02] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 250 seconds)
[21:08:03] *** Joins: pert (~pert@fsf/member/pert)
[21:10:22] *** Joins: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com)
[21:10:24] *** Quits: fe23 (~fe23@2409:8a34:461:9470:243e:b641:395d:993d) (Quit: fe23)
[21:11:37] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[21:11:38] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:11:40] *** Joins: korg815 (~korg815@user/korg815)
[21:12:56] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[21:13:25] <Jackii> no i cant
[21:14:50] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[21:15:30] <rsjw> you can typedef two aliases to the same type
[21:15:40] *** Quits: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com) (Remote host closed the connection)
[21:15:43] *** Joins: banc- (banc@gateway/vpn/airvpn/banc)
[21:16:05] *** Joins: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com)
[21:16:12] <rsjw> I'm not saying that will help you with your problem though
[21:16:17] *** Quits: kts (~kts@103.73.237.191) (Quit: Konversation terminated!)
[21:17:06] *** Joins: stonkey (~stonkey@user/stonkey)
[21:17:17] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 240 seconds)
[21:17:37] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[21:17:55] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:18:57] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[21:21:40] *** Quits: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com) (Remote host closed the connection)
[21:22:51] *** Joins: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com)
[21:23:09] *** Quits: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com) (Remote host closed the connection)
[21:23:40] *** Joins: ornxka (~ornxka@user/ornxka)
[21:24:02] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:25:23] *** Joins: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com)
[21:25:39] *** Quits: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com) (Remote host closed the connection)
[21:30:57] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Ping timeout: 240 seconds)
[21:31:36] *** Joins: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de)
[21:31:42] *** Quits: rcoote (~rcoote@ip-176-198-113-232.hsi05.unitymediagroup.de) (Client Quit)
[21:37:46] <Jackii> a uninitialized member of a struct will take memory ?
[21:38:16] <Wulf> Jackii: that depends on your OS. Assume it does.
[21:38:40] *** Quits: lleo (~leo@89-200-7-2.mobile.kpn.net) (Quit: institute budget)
[21:40:37] <cousteau> Jackii: in principle, declared variables take up memory the moment they are created, and stop taking memory (or rather, the memory they take can no longer be accessed and may be overwritten) when they cease to exist
[21:41:28] <cousteau> in the case of automatic variables, they "start to exist" when they are declared, even if they're not initialized -- they'll have a position in memory and you'll be able to write to that memory
[21:42:05] <cousteau> in the case of static variables, they start existing at the beginning of the program and stop existing at the end
[21:42:16] *** Joins: magla (~gelignite@55d42e32.access.ecotel.net)
[21:43:28] *** Quits: magla (~gelignite@55d42e32.access.ecotel.net) (Read error: Connection reset by peer)
[21:43:39] *** Joins: magla (~gelignite@55d42e32.access.ecotel.net)
[21:43:42] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[21:45:19] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[21:46:39] *** Joins: hlauk (~hlauk@176.33.108.116)
[21:47:59] *** Quits: EtherNet (~ethernet@user/ethernet) (Quit: WeeChat 3.5-dev)
[21:50:34] <Jackii> ok thanks
[21:50:45] *** Quits: Jackii (~Jackiii@93-41-0-232.ip79.fastwebnet.it) (Quit: Leaving)
[21:55:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:57:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:58:07] *** Joins: nicode (~nic@2607:f2c0:93a9:8b00:5166:d484:415f:54b7)
[21:58:57] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[22:00:07] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 256 seconds)
[22:00:53] *** Quits: alch (~alch@151.36.201.194) (Ping timeout: 256 seconds)
[22:00:56] *** Joins: Beastie (~lcu@user/thebeastie)
[22:01:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[22:02:11] *** Joins: ashley_ (~ashley@ool-44c6903d.dyn.optonline.net)
[22:02:25] *** Parts: ashley_ (~ashley@ool-44c6903d.dyn.optonline.net) ()
[22:02:41] *** Joins: alch (~alch@mi-18-20-237.service.infuturo.it)
[22:03:06] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:03:41] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:03:54] *** Quits: aighearach_ (~paris@c-71-63-160-210.hsd1.or.comcast.net) (Quit: Leaving)
[22:04:01] *** Joins: aighearach (~paris@user/aighearach)
[22:05:10] *** Joins: EtherNet (~ethernet@user/ethernet)
[22:08:33] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca)
[22:09:08] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 250 seconds)
[22:09:24] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[22:12:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[22:13:19] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[22:14:08] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:14:51] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[22:15:46] *** Joins: crashrep (~crashrep@user/crashrep)
[22:15:57] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[22:16:20] *** Joins: inlight (~inlight@157.42.246.147)
[22:16:20] *** Quits: inlight (~inlight@157.42.246.147) (Changing host)
[22:16:20] *** Joins: inlight (~inlight@user/inlight)
[22:16:39] *** Quits: soapsudsxx_ (~soapsudsx@141.193.188.140) (Read error: Connection reset by peer)
[22:16:51] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[22:22:03] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:22:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:23:03] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:23:34] *** Quits: Torr (~Torr@user/torr) ()
[22:23:45] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:24:15] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[22:24:30] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[22:24:30] *** Joins: mixfix41 (~homefame@user/mixfix41)
[22:29:34] <tusko> if space has not been allocated for a static variable, did it ever really exist?
[22:30:00] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Remote host closed the connection)
[22:30:37] <twkm> i'll ask a tree.
[22:30:39] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Changing host)
[22:30:39] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[22:31:20] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[22:31:40] *** Quits: hlauk (~hlauk@176.33.108.116) (Quit: Leaving)
[22:31:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:33:19] <cousteau> twkm: I think most implementations of malloc use those; you could ask them
[22:34:07] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[22:34:15] <cousteau> if a binary tree gets balanced in the heap and there's no one to hear it, does it make any noise?
[22:34:21] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:35:33] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:35:35] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[22:35:42] *** Joins: immibis (~hexchat@62.156.144.218)
[22:36:13] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Client Quit)
[22:36:33] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[22:36:41] <chiselfuse> can i get an int and two pointers to int with `int x, *y, *z;`?
[22:37:35] <ChoHag_> Not only can you, you must.
[22:37:48] *** Quits: nullptr_ (~nullptr@user/nullptr/x-2182142) (Quit: ZNC - http://znc.in)
[22:38:37] *** Joins: nullptr| (~nullptr@user/nullptr/x-2182142)
[22:38:41] <chiselfuse> and thus, i shall
[22:45:04] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:31] *** Quits: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net) (Quit: Leaving.)
[22:47:25] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:48:02] *** Joins: mmohammadi9812 (~Mohammad@188.210.110.121)
[22:48:04] <cousteau> chiselfuse: don't listen to ChoHag_; you definitely shouldn't.  But yes you can
[22:48:22] <cousteau> but mixing different types on a single declaration seems intentionally confusing
[22:48:51] <ChoHag_> Don't think of them as different then.
[22:48:55] <cousteau> int a, *b, c[3], *d[4], (*e)[5], f(void);
[22:49:10] <ChoHag_> Two views of three variables of the same type.
[22:49:25] *** Joins: Nutte35 (~Nutte@202.153.81.146)
[22:49:26] <ChoHag_> Two types of view, except I didn't want to re-use the word type :P
[22:49:27] <cousteau> the variables you are declaring DO have different types though
[22:49:32] <cousteau> which are x, y, and z
[22:49:39] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:49:57] <cousteau> you're not declaring *y nor *z, just saying that y and z will point to ints, but you're not declaring those ints
[22:50:40] *** Joins: BSaboia (~bsaboia@187.19.139.6)
[22:51:32] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:52:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[22:52:24] <chiselfuse> i see
[22:53:04] <chiselfuse> cousteau: what's the order of operators in `*d[4]`?
[22:53:15] <cousteau> ,paren *d[4]
[22:53:16] <candide> cousteau: *(d[4])
[22:53:44] <ChoHag_> I find it helps not to think of the label in the source code (ie. x, y, z in this case) as "being" the variable but some sort of ephemeral reference to it.
[22:54:00] <cousteau> so `int *d[4];` means "declare `d` so that `*d[whatever]` is an int"
[22:54:00] <chiselfuse> ,paren (*e)[5]
[22:54:00] <chiselfuse> huh?
[22:54:01] <candide> chiselfuse: (*e)[5]
[22:54:26] <ChoHag_> "int y" doesn't "declare a variable called y"; some space will be allocated which, between you, me and the compiler, we'll give this irrelevant label.
[22:54:41] <cousteau> ChoHag_: I kinda get your point... but I'd never declare conceptually different things on a single declaration; it feels wrong
[22:54:55] <ChoHag_> Oh good because I meant x.
[22:56:04] <chiselfuse> all our nicks start with c in this chat, including the bot and channel name
[22:56:13] <cousteau> haha
[22:56:16] <ChoHag_> I probably wouldn't call them x, y or z. Some single-letter variables are good for "whatever this means in this small scope" but in general more descriptive variable names are helpful.
[22:56:17] <cousteau> chiselfuse: int *d[4] means that d[4] points to an int
[22:56:25] <ChoHag_> eg. int x, *yp, *zp;
[22:56:35] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:221:6bff:fe3b:cee4)
[22:56:41] <ChoHag_> (Assuming these are co-ordinates of some sort, or something more verbose ideally)
[22:56:43] <cousteau> and int (*e)[5] means that e points to an array
[22:57:28] <cousteau> chiselfuse: basically you use the same associativity rules when declaring variables and when using them
[22:57:28] <ChoHag_> Yo I heard you like "C"...
[22:57:36] *** Quits: carlavilla (~carlavill@2a0c:5a84:320d:6900:221:6bff:fe3b:cee4) (Client Quit)
[22:57:51] <cousteau> so int *d[4]; is the same as int *(d[4]);
[22:57:52] <chiselfuse> the guy who just joined and quit too...
[22:58:08] <cousteau> you can even use superfluous parentheses: int (x);
[22:58:37] <ChoHag_> There's lots of things you _can_ do in C.
[22:58:57] <cousteau> int(x(double(y))) is just an ugly way of writing int x(double y) that will confuse the hell out of a programmer
[22:59:03] *** Quits: mmohammadi9812 (~Mohammad@188.210.110.121) (Ping timeout: 256 seconds)
[22:59:03] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[22:59:28] <cousteau> ChoHag_: yeah right... didn't want to imply that you *should* do that
[22:59:41] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:59:44] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[23:00:06] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a)
[23:00:53] <cousteau> it gets funnier in C++, where int(x) can mean different things depending on the context
[23:01:40] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[23:02:18] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[23:03:01] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[23:03:39] *** Joins: crashrep (~crashrep@user/crashrep)
[23:04:20] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[23:05:02] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[23:05:17] <chiselfuse> cousteau: what's the difference between `int **d;` and `int *d[4]`;
[23:05:24] <pragma-> you'd think after C++'s whole fiasco with ambiguous parse of << in templates, they'd think more carefully about their grammar.
[23:05:36] <libh> Dynamic memory allocation like malloc is only meant for arrays? If I write a normal function, would allocating memory for it be pointless?
[23:05:55] <pragma-> C++ 2003 or so was the last good C++. It's just weird bloated complicated junk now.
[23:05:59] <ChoHag_> chiselfuse: In practical terms not a great deal except.
[23:06:49] <pragma-> I'd be very fucking surprised if anybody could write a new C++ compiler from scratch nowadays. Only the existing C++ compilers that have grown over the decades are capable of being conformant.
[23:07:00] <edk> the array one can't be assigned to, has an array type, reserves space for 4 int *s
[23:07:12] <cousteau> chiselfuse: one is a pointer to a pointer, the other is an array of pointers
[23:07:14] <edk> the pointer one can be assigned to, has a pointer type, reserves space for one int **
[23:08:14] <cousteau> libh: you can use malloc for single variables too.  Whether or not it's pointless depends on the particular case
[23:08:32] <libh> Such as?
[23:09:05] <cousteau> an example that comes to mind is creating a variable that is very large, and you usually don't want those to be automatic variables
[23:09:31] <ChoHag_> malloc is not "for" anything except "allocating memory" (that isn't on the stack). What you use it for and how much is entirely up to you.
[23:09:45] <libh> But a function, a regular function, will be automatically allocated and freed when being used and done with?
[23:09:47] <cousteau> another one is linked lists, but at this point I think that linked lists were just devised as a counter-example for stuff rather than actually something useful
[23:09:59] <cousteau> ...then again, binary trees probably use that too
[23:10:09] <ChoHag_> No a function is called. The variables it declares will be allocated when it is entered and "lost" when it's left.
[23:10:37] <cousteau> libh: the function doesn't get "created"; it is already there in the program
[23:10:48] <ChoHag_> Memory which is not declared but allocated via malloc will *not* be lost when the function is left but the variable pointing to it might be.
[23:10:49] <cousteau> it's part of the program
[23:11:00] <pragma-> Or you simply might want the object to outlive the function.
[23:11:15] <ChoHag_> Yeah that's the "entirely up to you" part.
[23:11:17] <pragma-> (so you can return a pointer to it)
[23:11:51] <pragma-> Oh, ChoHag_ started to cover that case. I was still scrolled up a bit, reading cousteau's messages.
[23:12:28] <cousteau> libh: so basically you can't allocate a function, if that's what you were asking
[23:12:42] <pragma-> first class functions when?
[23:12:46] <cousteau> you can only allocate objects, and functions are not objects
[23:12:48] <ChoHag_> When you use lisp.
[23:13:47] <libh> Thanks cousteau, keeping a mental note that only variables and arrays can be allocated.
[23:14:12] <ChoHag_> But that's not what anyone said.
[23:14:15] <ChoHag_> *Memory* is allocated.
[23:14:20] <axon> I think what ChoHag_ said earlier is more apt, that "memory can be allocated"
[23:14:24] <ChoHag_> You may use it to hold variables or arrays if you wish.
[23:14:25] <cousteau> C doesn't see functions as chunks of binary data occupying some space in memory (even if they are that under the hood).  Although you can have "pointers to functions", but that's about it.
[23:14:28] *** Quits: Akuli (~Akuli@87-94-108-141.bb.dnainternet.fi) (Quit: Akuli)
[23:14:47] <cousteau> libh: arrays are variables
[23:14:50] <libh> This might take me a bit to really understand manual memory management after so long without doing so in other languages like python.
[23:15:05] *** Joins: Akuli (~Akuli@87-94-108-141.bb.dnainternet.fi)
[23:15:13] <ChoHag_> There's no other practical reason to learn C really.
[23:15:17] <chiselfuse> From getaddrinfo(3): ```service  sets the port in each returned address structure.  If this argument is a service name (see services(5)), it is translated to the corresponding port number.  This argument can also be specified as a decimal number, which is simply converted  to  binary.```
[23:15:22] <chiselfuse> ```int getaddrinfo(... , const char *restrict service, ...)``` So if I want to specify it as decimal do I pass an int or an int * or what?
[23:15:42] <cousteau> but yeah, "memory is allocated" is more correct.  You allocate memory that will be able to store an object, and you can write the value/content of that object to that memory.  But you can't write functions in C
[23:15:46] <cousteau> (at run time)
[23:16:03] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:16:17] *** Quits: crashrep (~crashrep@user/crashrep) (Read error: Connection reset by peer)
[23:16:39] *** Joins: crashrep (~crashrep@user/crashrep)
[23:16:41] <libh> Wait, if I can allocate memory for a variable, why then use static at all?
[23:16:57] <chiselfuse> Or did they mean passing it as a name of a service vs number, still as string?
[23:16:59] <cousteau> they serve different purposes
[23:17:21] <cousteau> `static` will mean the variable will always be there; `malloc()` will create a new variable
[23:17:37] <axon> chiselfuse: I think that's what they mean, yes; passing "ssh" or "22" would likely be equivalent
[23:18:26] <cousteau> also, `static` doesn't take time; calling `malloc()` takes some time
[23:18:54] <chiselfuse> axon: was there a function to get a service name from number or something like that? or do I have to use sprintf?
[23:19:01] <ChoHag_> libh: Think of there being 3 areas of memory: One for global/static variables, one for function-declared variables which exist on the stack, and the heap.
[23:19:10] <ChoHag_> malloc allocates space in the heap.
[23:19:52] <pert> chiselfuse: I think you're looking for getprotobynumber()
[23:20:18] *** Quits: BSaboia (~bsaboia@187.19.139.6) (Quit: This computer has gone to sleep)
[23:20:22] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[23:20:29] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[23:20:39] <axon> chiselfuse: there's also getservbyname(3) and getservbyport(3)
[23:20:41] <pert> sorry, I think I'm wrong, I think I meant getservbyport()
[23:21:21] <ChoHag_> Globals and statics are allocated by the compiler/linker. The stack is a run-time affair.
[23:21:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca)
[23:22:17] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 256 seconds)
[23:22:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[23:22:50] *** Quits: Nutte35 (~Nutte@202.153.81.146) (Read error: Connection reset by peer)
[23:23:02] *** Joins: Nutte35 (~Nutte@202.153.81.146)
[23:24:09] *** Quits: Nutte35 (~Nutte@202.153.81.146) (Read error: Connection reset by peer)
[23:24:23] <chiselfuse> a bit off-topic but what database are they talking about in getservent(3)? /etc/services?
[23:24:43] <ChoHag_> Yes.
[23:24:52] <ChoHag_> See services(5).
[23:24:58] <chiselfuse> they also say "A connection is opened to the database if necessary."
[23:25:33] <ChoHag_> It might be backed by one.
[23:25:33] <fizzie> A "decimal number" kind of must be a string, because an `int` wouldn't be in any meaningful way "decimal".
[23:25:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:25:55] <ChoHag_> /etc/nsswitch.conf on linux iirc.
[23:26:42] <chiselfuse> if i'm just looking to loop int's as port numbers and pass them to getaddrinfo(), that getservbyport() would be too stupid to use, right?
[23:28:19] <chiselfuse> well, yeah, they do say that i can use decimal, so be it
[23:28:44] *** Quits: carlavilla (~carlavill@2a0c:5a84:320d:6900:21f:16ff:fe0f:275a) (Remote host closed the connection)
[23:30:24] <axon> you could go over the file yourself, bypassing those getserv* functions, but you'd probably end up doing the same parsing work it's already doing
[23:30:30] <fizzie> Not all numbers have service entries, necessarily, so if you want a traditional portscan type of a thing, better stick with numbers.
[23:30:53] <ChoHag_> The whole point of the database is to map names to/from numbers.
[23:31:01] <ChoHag_> If you only care about the numbers why use the database?
[23:35:19] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[23:35:19] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-173.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:35:44] <chiselfuse> yea correct :)
[23:35:48] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[23:36:49] *** Joins: kexec (~kexec@user/kexec)
[23:38:10] *** Joins: p0g0 (~p0g0@216.211.153.38)
[23:38:14] * APic grins magically.
[23:42:17] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[23:42:35] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[23:42:55] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[23:44:23] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[23:44:53] *** n1000_ is now known as n1000
[23:45:06] *** Quits: kit-ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Read error: Network is unreachable)
[23:45:18] *** Joins: kit-ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[23:45:24] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[23:45:57] *** Beastie is now known as beastie
[23:47:51] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[23:47:57] *** Quits: mahmutov_ (~mahmutov@5.176.28.231) (Ping timeout: 240 seconds)
[23:49:16] <chiselfuse> what's a good identifier for a var to store a temporary return value indicating success/failure?
[23:49:31] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[23:49:43] <pragma-> chiselfuse: THIS_IS_SPARTA
[23:49:55] *** Joins: korg815 (~korg815@user/korg815)
[23:50:43] <chiselfuse> pragma-: perfection, except that since it's all caps, it might get confused as a #define... shame
[23:50:45] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[23:51:38] <axon> `bool ok`?
[23:51:48] <Wulf> chiselfuse: pick names from this channel, e.g. "pragma_", "Wulf" or "chiselfuse".
[23:51:58] <pragma-> I haven't been pragma_ in years!
[23:52:11] <Wulf> pragma-: sorry, you're a syntax error.
[23:52:12] <pragma-> "Wulf42"
[23:52:33] <pragma-> or was it just 4
[23:52:56] <chiselfuse> HaMsTeRs isn't too bad either
[23:53:15] <pragma-> axon: very Rusty
[23:53:21] <Wulf> pragma-: both I guess
[23:53:54] <axon> goish, too
[23:54:04] <axon> `if _, ok := fn(); ok { .. }`
[23:54:21] <chiselfuse> oh god what is that?
[23:54:45] <pragma-> Yeah, option types are neat. Just inconsistent how different languages use them. Haskell has Maybe/Just. Rust has Err/Ok.
[23:55:27] * kit-ten stays weary of Wulf
[23:55:30] *** Quits: Akuli (~Akuli@87-94-108-141.bb.dnainternet.fi) (Quit: Akuli)
[23:55:37] <pragma-> well, actually, Rust is None/Some.
[23:55:37] <chiselfuse> can i `if (x=func() == 0) or do i have to quote x=func()?
[23:55:48] <pragma-> Err/Ok is for the result type.
[23:55:51] <pragma-> But anyway!
[23:56:05] <Wulf> chiselfuse: depends on your expectations
[23:56:17] <axon> yep, the other one's the Option enum
[23:56:22] <chiselfuse> Wulf: lol isn't it obvious
[23:56:28] *** Joins: mahmutov_ (~mahmutov@5.176.28.231)
[23:56:30] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:56:33] <fizzie> ,parens x=func() == 0
[23:56:35] <candide> fizzie: x = (func() == 0)
[23:56:36] <Wulf> chiselfuse: you could use the comma operator. if (x = func(), x == 0)
[23:56:39] *** Joins: Betal (~Betal@user/betal)
[23:56:55] <chiselfuse> Wulf: huh?
[23:57:04] <chiselfuse> looks like a function call
[23:57:19] <chiselfuse> what even is that
[23:57:21] <Wulf> chiselfuse: yes, func is a function, and it's called.
[23:57:32] <chiselfuse> Wulf: no XD
[23:57:39] <fizzie> ,c11 6.5.17p2
[23:57:39] <candide> http://www.iso-9899.info/n1570.html#6.5.17p2 [Comma operator] The left operand of a comma operator is evaluated as a void expression; there is a sequence point between its evaluation and that of the right operand. Then the right operand is evaluated; the result has its type and value.114) FOOTNOTE.114 A comma operator does not yield an lvalue.
[23:57:54] *** Joins: Akuli (~Akuli@87-94-108-141.bb.dnainternet.fi)
[23:58:19] <axon> sweet
[23:59:24] <chiselfuse> that feels so alien to read though in c, was it designed for this use?
[23:59:51] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
