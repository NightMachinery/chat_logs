[00:00:00] <b0nn> heh, if it does - have a guess how they do it :)
[00:02:28] *** Joins: marius_m (~marius_m@84.211.92.9)
[00:06:04] *** Quits: mnlwldr (~mnlwldr@dynamic-077-181-105-100.77.181.pool.telefonica.de) (Quit: Before calling me, ask yourself ... Is it textable?)
[00:06:48] *** Quits: andlabs (~andlabs@172.102.12.197) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:12:48] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[00:13:07] *** Joins: cobber (~protorom@i59F67AF2.versanet.de)
[00:17:58] *** Quits: cobber (~protorom@i59F67AF2.versanet.de) (Client Quit)
[00:18:46] <_mikey> that's just how the ServeMux works. it first looks for a match, and if nothing matches it looks for a path that has a matching prefix. so as long as "/" is defined in a handler, that's what a request falls back on when nothing matches.
[00:20:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:20:48] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[00:26:26] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[00:27:17] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Client Quit)
[00:29:45] *** Quits: eroux (~eroux@102-65-81-186.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:31:19] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:35:24] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[00:44:54] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[00:46:08] *** Quits: ekathva (~ekathva@n3k05e951yzy0eo5x-1.v6.elisa-mobile.fi) (Quit: Leaving)
[00:46:14] <b0nn> https://github.com/gorilla/mux/blob/master/route.go#L174
[00:46:42] <b0nn> I was thinking, that (effectively) the more routes you have, the slower the search
[00:47:07] <b0nn> which made me wonder why they don't hash the path, before the query
[00:49:04] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:51:47] *** Joins: fling (~fling@user/fling)
[00:53:30] *** Quits: monoxane (~monoxane@user/monoxane) (Quit: Ping timeout (120 seconds))
[00:53:54] *** Joins: monoxane (~monoxane@user/monoxane)
[01:00:20] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Quit: Leaving)
[01:09:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[01:16:36] *** Joins: LtHummus (~lthummus@174-21-20-149.tukw.qwest.net)
[01:27:54] *** Joins: cobber (~protorom@213.240.182.67)
[01:33:47] *** Quits: alwyn (~alwyn@user/alwyn) (Ping timeout: 250 seconds)
[01:34:36] *** Quits: hugbubby (~hugbubby@49.207.199.223) (Ping timeout: 240 seconds)
[01:34:51] *** Joins: hugbubby (~hugbubby@49.207.199.223)
[01:35:05] *** Quits: The_Loko (~The_Loko@86.127.255.193) (Quit: Leaving)
[01:38:50] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:42:12] *** Quits: hugbubby (~hugbubby@49.207.199.223) (Ping timeout: 240 seconds)
[01:45:00] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 252 seconds)
[01:46:50] *** Joins: andlabs (~andlabs@70.107.171.168)
[01:50:39] *** Quits: cobber (~protorom@213.240.182.67) (Quit: cobber)
[01:50:39] *** Joins: easbarba (~user@2804:1b2:80:171:419f:96dd:efe2:3a4c)
[01:56:10] *** Joins: Atque (~Atque@user/atque)
[01:58:52] *** Joins: llorllale (~llorllale@198.98.119.85)
[01:59:21] *** Quits: faceonkeyboard (~faceonkey@anquietas.itsh.dev) (Quit: Bridge terminating on SIGTERM)
[02:02:24] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 250 seconds)
[02:04:27] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:05:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:07:06] *** Joins: sentriz (~sentriz@109.255.139.98)
[02:09:06] *** Joins: faceonkeyboard (~faceonkey@anquietas.itsh.dev)
[02:09:57] *** Joins: rcernin (~rcernin@124.190.132.36)
[02:10:17] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:1d61:6202:da16:ab6d) (Quit: Client closed)
[02:11:24] *** Joins: Jigsy (~Jigsy@user/jigsy)
[02:11:40] *** Quits: tristero (~nobody@user/tristero) (Quit: WeeChat 3.4)
[02:33:48] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 240 seconds)
[02:35:29] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[02:38:55] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[02:42:45] *** Quits: marius_m (~marius_m@84.211.92.9) (Ping timeout: 252 seconds)
[02:51:00] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[02:54:13] *** Quits: sentriz (~sentriz@109.255.139.98) (Remote host closed the connection)
[02:54:22] *** Joins: sentriz (~sentriz@109.255.139.98)
[03:09:16] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[03:19:31] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[03:19:47] *** Joins: tristero (~quassel@user/tristero)
[03:20:46] *** Joins: Preddy (~Preddy@92.44.103.122)
[03:24:43] *** Joins: crashrep (~crashrep@user/crashrep)
[03:25:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:29:06] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:35:06] *** Joins: hanzo (uid532183@user/hanzo)
[03:35:17] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 240 seconds)
[03:36:26] *** Joins: k8yun (~k8yun@user/k8yun)
[03:44:02] *** Joins: SuperLag (~akulbe@user/superlag)
[03:48:31] *** Joins: bluedust (~bluedust@117.222.190.30)
[03:48:41] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:48:41] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[03:49:11] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[03:50:15] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[03:52:03] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[03:53:36] *** Quits: bluedust (~bluedust@117.222.190.30) (Ping timeout: 272 seconds)
[04:10:12] *** Quits: Preddy (~Preddy@92.44.103.122) (Quit: Leaving)
[04:24:58] *** Joins: ac5tin (~ac5tin@user/ac5tin)
[04:30:33] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 252 seconds)
[04:31:52] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:35:28] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:05:10] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[05:11:36] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[05:23:54] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[05:24:34] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[05:29:02] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:dc8:485e:3bf:3ede)
[05:34:46] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:dc8:485e:3bf:3ede) (Quit: WeeChat 3.4)
[05:35:11] *** Joins: rcernin (~rcernin@124.190.132.36)
[05:36:33] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:37:01] *** Joins: christophergray (~christoph@186.151.40.100)
[06:06:03] *** Joins: mreiss (~mreiss@104-59-120-249.lightspeed.sntcca.sbcglobal.net)
[06:09:26] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:20:01] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[06:23:11] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[06:29:50] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:39:06] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[06:39:21] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[06:39:28] *** Joins: koken (~Guest11@dynamic-acs-72-23-39-147.zoominternet.net)
[06:45:22] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:46:12] *** Joins: nitrix (~nitrix@user/nitrix)
[06:47:09] *** Quits: koken (~Guest11@dynamic-acs-72-23-39-147.zoominternet.net) (Quit: Client closed)
[06:48:35] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[06:50:51] *** Quits: mreiss (~mreiss@104-59-120-249.lightspeed.sntcca.sbcglobal.net) (Quit: mreiss)
[06:51:00] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[06:55:21] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:55:47] *** Joins: nitrix (~nitrix@user/nitrix)
[06:56:37] *** Joins: k8yun (~k8yun@user/k8yun)
[06:58:30] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 252 seconds)
[07:05:21] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[07:05:57] *** Joins: nitrix (~nitrix@user/nitrix)
[07:10:21] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[07:10:56] *** Joins: nitrix (~nitrix@user/nitrix)
[07:16:09] <bq> Hey I have a bit of old software that has to be built under ancient go 1.9.7 and it's pulling in golang.org/x/crypto/ed25519. But then this includes crypto/ed25519 which causes go get to fail with: `package crypto/ed25519: unrecognized import path "crypto/ed25519" (import path does not begin with hostname)`
[07:17:00] <bq> Any clue what trick I can do to get this old thing building like it used to, short of upgrading go?
[07:20:21] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[07:20:54] *** Joins: nitrix (~nitrix@user/nitrix)
[07:21:44] <andlabs> you can go through the git repo history to find a contemporary version of the x/crypto package
[07:22:42] <andlabs> https://cs.opensource.google/go/x/crypto
[07:23:41] <bq> Oh ok. And then I guess I could pin it back with the old Gopkg.toml
[07:24:21] <andlabs> 1.9 might predate gopkg.toml
[07:24:40] <andlabs> ...what package is this anyway, an internal one?
[07:25:21] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[07:26:19] *** Joins: nitrix (~nitrix@user/nitrix)
[07:26:55] <bq> It's an old version of gnatsd, in an old Yocto build hence I'm not up to the risky task of upgrading go quite yet
[07:27:35] <bq> really just a steaming pile that someone's dumped on my lap :)
[07:28:33] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:30:21] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[07:30:46] *** Joins: nitrix (~nitrix@user/nitrix)
[07:32:08] *** Joins: bluedust (~bluedust@117.222.190.30)
[07:35:21] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[07:36:39] <bq> andlabs, thanks, I pinned it back to something semi-random from 2019 when I knew this to work, and it seems to build now
[07:54:54] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[07:58:55] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[08:21:27] *** Joins: hugbubby (~hugbubby@49.207.199.223)
[08:28:02] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[08:30:10] *** Quits: c10l (~c10l@user/c10l) (Quit: See ya! o/)
[08:30:25] *** Joins: c10l (~c10l@user/c10l)
[08:31:02] *** Joins: morph (~morph@31.134.244.23)
[08:36:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:40:14] *** Quits: morph (~morph@31.134.244.23) (Quit: leaving)
[08:40:34] *** Joins: morph (~morph@31.134.244.23)
[08:41:58] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:44:13] *** Joins: k8yun (~k8yun@user/k8yun)
[08:44:15] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[08:44:17] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 250 seconds)
[08:46:34] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[08:48:34] *** Joins: cskr (~cskr@49.207.213.182)
[08:56:38] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:59:12] *** Joins: ekathva (~ekathva@n3k04mk1g2jsn5ncy-1.v6.elisa-mobile.fi)
[09:04:28] *** Quits: kn1007 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[09:04:49] *** Joins: kn1007 (~kn100@wireguard/tunneler/kn100)
[09:11:44] *** Joins: bluedust_ (~bluedust@103.161.144.138)
[09:13:40] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[09:14:21] *** Quits: bluedust (~bluedust@117.222.190.30) (Ping timeout: 252 seconds)
[09:15:24] *** Quits: normen (~normen@p200300d717235c00b05bd584a5866fd3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:19:20] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[09:21:30] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[09:22:51] *** Joins: purpleidea (~james@user/purpleidea)
[09:27:14] *** Quits: cskr (~cskr@49.207.213.182) (Remote host closed the connection)
[09:27:39] *** Joins: cskr (~cskr@49.207.213.182)
[09:29:32] *** Quits: cskr (~cskr@49.207.213.182) (Client Quit)
[09:31:41] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[09:33:48] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 240 seconds)
[09:35:17] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:42:09] *** Joins: normen (~normen@p200300d717235c002420c2ef5d6b6aae.dip0.t-ipconnect.de)
[09:46:00] *** Joins: purpleidea (~james@user/purpleidea)
[09:58:06] *** Joins: shka (~herr@109.231.0.226)
[09:59:16] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[10:10:26] *** Quits: remote (~self@user/hackers) (Ping timeout: 272 seconds)
[10:11:01] *** Joins: remote (~self@user/hackers)
[10:12:42] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[10:15:30] *** Joins: off^ (~off@50.235.176.163)
[10:15:48] *** Quits: hugbubby (~hugbubby@49.207.199.223) (Ping timeout: 240 seconds)
[10:18:00] *** Joins: hugbubby (~hugbubby@49.207.202.200)
[10:22:25] *** Joins: bluedust (~bluedust@117.204.143.79)
[10:24:05] *** Joins: jpw (~jpw@user/jpw)
[10:25:18] *** Quits: bluedust_ (~bluedust@103.161.144.138) (Ping timeout: 252 seconds)
[10:28:33] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:36:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[10:37:40] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[10:38:35] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:38:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:50:13] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[10:50:20] *** Joins: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru)
[10:57:36] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[11:05:39] *** Quits: morph (~morph@31.134.244.23) (Quit: leaving)
[11:10:36] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[11:12:30] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 272 seconds)
[11:14:47] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:16:52] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:19:12] *** Quits: hugbubby (~hugbubby@49.207.202.200) (Ping timeout: 252 seconds)
[11:21:10] *** Joins: hugbubby (~hugbubby@49.207.227.217)
[11:26:19] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 256 seconds)
[11:26:47] *** Joins: R2robot (~R2robot@user/r2robot)
[11:32:12] *** Quits: bluedust (~bluedust@117.204.143.79) (Remote host closed the connection)
[11:32:57] *** Joins: bluedust (~bluedust@103.161.144.138)
[11:33:18] *** Joins: mrig (~mrig@user/mrig)
[11:33:24] *** Quits: remote (~self@user/hackers) (Ping timeout: 272 seconds)
[11:34:20] *** Joins: remote (~self@user/hackers)
[11:34:30] *** Joins: rendar (~rendar@user/rendar)
[11:42:20] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[11:43:32] *** Quits: remote (~self@user/hackers) (Ping timeout: 272 seconds)
[11:44:44] *** Joins: remote (~self@user/hackers)
[11:54:50] *** Joins: khyr0n_ (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799)
[11:54:59] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799) (Read error: Connection reset by peer)
[12:02:52] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:11:22] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[12:16:20] *** Joins: jinsl (~jinsl@180.88.96.21)
[12:17:27] *** Joins: marius_m (~marius_m@80.91.33.151)
[12:20:45] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 250 seconds)
[12:25:13] *** Joins: evanextreme (~evanextre@2604:4080:1000:8150:7950:a9e:9213:5d03)
[12:26:46] *** Joins: bluedust_ (~bluedust@117.204.143.79)
[12:27:21] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:28:18] *** Joins: kinlo (~peter@user/kinlo)
[12:29:36] *** Quits: bluedust (~bluedust@103.161.144.138) (Ping timeout: 252 seconds)
[12:31:06] *** Joins: Kohe (~Kohe@46.12.76.236.dsl.dyn.forthnet.gr)
[12:36:00] *** Quits: evanextreme (~evanextre@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: Heading out, seeya!)
[12:36:45] *** Joins: evanextreme (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[12:36:46] *** Quits: Kyros (~kyros@user/kyros) (Quit: ZNC 1.8.2 - https://znc.in)
[12:37:05] *** Joins: Kyros (~kyros@user/kyros)
[12:41:41] *** Quits: Suzumiya (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 256 seconds)
[12:42:23] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[12:46:29] *** Joins: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[12:48:25] *** Joins: alwyn (~alwyn@user/alwyn)
[12:48:30] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[12:48:30] *** Quits: SoF (~skius@user/skius) (Quit: Ping timeout (120 seconds))
[12:48:30] *** Quits: skyfall (~skyfall@user/skyfall) (Quit: Ping timeout (120 seconds))
[12:48:42] *** Joins: skyfall (~skyfall@user/skyfall)
[12:48:48] *** Joins: m5zs7k_ (aquares@web10.mydevil.net)
[12:48:55] *** Joins: SoF (~skius@user/skius)
[12:53:56] *** Quits: evanextreme (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:54:17] *** Joins: absc (~absc@81.31.144.28)
[12:55:17] *** Joins: evanextreme (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[12:56:09] *** Joins: ricci (~ricci@31.187.110.131)
[12:57:21] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[12:57:46] *** m5zs7k_ is now known as m5zs7k
[13:01:52] *** evanextreme is now known as evanextreme[away
[13:01:52] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:09] *** Joins: evanextreme (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[13:03:14] *** evanextreme is now known as evanextreme[away
[13:04:24] *** Quits: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03) (Client Quit)
[13:07:15] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[13:09:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:14:16] *** Joins: aLeSD (~aLeSD@80.169.85.234)
[13:15:09] *** Quits: jinsl (~jinsl@180.88.96.21) (Quit: Client closed)
[13:17:04] <aLeSD> hi all
[13:17:51] *** Joins: aLeSD[m] (~alambicco@2001:470:69fc:105::1:452a)
[13:18:23] *** Quits: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru) (Ping timeout: 250 seconds)
[13:20:26] <marius_m> aLeSD: hi
[13:21:03] *** Quits: remote (~self@user/hackers) (Remote host closed the connection)
[13:22:03] <aLeSD> how could I profile my golang executable ? I'd like to know where is the execution more stressful points
[13:22:21] *** Joins: cvemys (~amir@user/cvemys)
[13:22:30] *** Quits: cvemys (~amir@user/cvemys) (Quit: WeeChat 3.4)
[13:23:46] *** Joins: cvemys (~amir@user/cvemys)
[13:24:47] *** Joins: eroux (~eroux@102-65-81-186.ftth.web.africa)
[13:24:56] <marius_m> pprof is a good starting point, browse this doc here: https://github.com/google/pprof/blob/master/doc/README.md
[13:25:14] <marius_m> then again, depends what "stressful" means in your context
[13:25:22] *** Joins: remote (~self@user/hackers)
[13:25:43] <aLeSD> I want to understand why my app is slow
[13:25:43] <albertito> aLeSD: https://go.dev/blog/pprof is a good starting point
[13:26:19] <aLeSD> thanks all
[13:27:09] <albertito> aLeSD: if it's a long-running app, you can do "live" profiling via net/http/pprof; it's covered in that post but only at the very end
[13:28:42] *** Joins: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru)
[13:31:49] <aLeSD[m]> ping
[13:32:01] *** Quits: aLeSD (~aLeSD@80.169.85.234) (Quit: Leaving)
[13:44:35] *** Quits: bluedust_ (~bluedust@117.204.143.79) (Remote host closed the connection)
[13:48:11] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[13:51:07] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[14:07:04] *** Joins: iateadonut (~dan@121.177.17.154)
[14:08:41] *** Joins: bluedust (~bluedust@117.204.143.79)
[14:24:16] *** Quits: cvemys (~amir@user/cvemys) (Quit: WeeChat 3.4)
[14:36:58] *** Joins: xse_ (~xse@user/xse)
[14:37:31] *** Quits: xse (~xse@user/xse) (Ping timeout: 256 seconds)
[14:37:36] *** xse_ is now known as xse
[14:40:44] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[14:42:09] *** Joins: rendar (~rendar@user/rendar)
[15:06:12] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 240 seconds)
[15:09:37] *** Joins: walterwhip (~www@user/walterwhip)
[15:21:40] *** Joins: cobber (~protorom@213.240.182.67)
[15:23:24] *** Quits: hugbubby (~hugbubby@49.207.227.217) (Ping timeout: 240 seconds)
[15:26:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:768b:56a2:a787:5841) (Ping timeout: 240 seconds)
[15:26:28] *** Quits: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru) (Ping timeout: 272 seconds)
[15:27:12] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5d07:4fd9:1d9:2b23)
[15:34:03] *** Joins: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru)
[15:35:07] *** Quits: dalan6 (~dalan@59-102-63-107.tpgi.com.au) (Quit: dalan6)
[15:35:20] *** Joins: hugbubby (~hugbubby@49.207.199.147)
[15:35:34] *** Joins: dalan62 (~dalan@59-102-63-107.tpgi.com.au)
[15:41:49] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[15:44:49] *** Quits: ekathva (~ekathva@n3k04mk1g2jsn5ncy-1.v6.elisa-mobile.fi) (Quit: Leaving)
[15:46:48] *** Joins: anon__ (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net)
[15:47:15] <cobber> learning from other people's code... I'm just looking through "exitcode" https://github.com/carlmjohnson/exitcode/blob/master/code.go
[15:47:24] <cobber> is thiat an example of "good practice" or is this code being "too clever"?
[15:47:37] <cobber> specifically: var _ Coder = coder{}
[15:47:37] <cobber> type coder struct {
[15:47:38] <cobber> 	error
[15:47:39] <cobber> 	int
[15:47:40] <cobber> }
[15:48:24] <cobber> (sorry - copy/paste didn't work as expected)
[15:48:45] *** Quits: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru) (Ping timeout: 250 seconds)
[15:49:11] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 250 seconds)
[15:54:46] *** Joins: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru)
[15:56:12] *** Quits: walterwhip (~www@user/walterwhip) (Ping timeout: 240 seconds)
[16:02:04] <fizzie> The `var _ Foo = bar{}` part of that is a "standard" way of compile-time asserting that the type `bar` implements the interface `Foo`, at least.
[16:02:21] <fizzie> https://go.dev/doc/effective_go#blank_implements "Don't do this for every type that satisfies an interface, though. By convention, such declarations are only used when there are no static conversions already present in the code, which is a rare event."
[16:03:29] <cobber> hmmm... for me it looks like it's being used as a static / singleton
[16:04:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:04:30] <fizzie> It's not. There's no way to refer back to the blank identifier (_); it doesn't have a name.
[16:04:31] <cobber> or maybe not... *slightly confused*
[16:04:50] <fizzie> The Effective Go link (under "Interface checks") explains what it's for.
[16:05:07] <cobber> (I'm just reading it now...)
[16:07:26] <fizzie> The assignment verifies that the concrete type `coder` implements the interface `Coder`, so that if you had made a mistake e.g. in spelling method names (say put in `ExitCode` in the interface on line 12, but `Exitcode` in the implementation on line 51) there would be a build-time error, instead of it just silently compiling but not working as intended.
[16:08:06] <cobber> so it's basically an error check / assertion - ah!
[16:09:24] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 240 seconds)
[16:12:19] <cobber> OK the code makes sense now... but my brain needs a new coffee :-) thanks!
[16:17:44] *** Joins: kinlo (~peter@user/kinlo)
[16:17:47] *** Quits: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru) (Ping timeout: 250 seconds)
[16:35:27] *** Quits: normen (~normen@p200300d717235c002420c2ef5d6b6aae.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:54:58] *** Joins: kayprish (~kayprish@cable-24-135-254-227.dynamic.sbb.rs)
[16:55:45] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[16:56:12] <hugbubby> I keep getting these "too many open files" error despire (I think) closing tcp connections and using a sync.Pool to track them.
[16:56:34] *** Joins: riv (river@tilde.team/user/river)
[16:56:36] <riv> hey
[16:56:42] <riv> https://pkg.go.dev/flag I was looking at the way this works
[16:57:10] <riv> it doesn't seem like the best API for command line flags, any one else agree? are there alternatives?
[17:02:08] <cobber> the flag package is intentionally minimal - there are plenty of 3rd party packages... see https://pkg.go.dev/search?q=flag
[17:02:54] <riv> are any of them good?
[17:02:56] <cobber> also, cobra / viper seems to have a lot of traction: https://github.com/spf13/cobra  https://github.com/spf13/viper
[17:03:04] <riv> oh cool
[17:03:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[17:03:15] <cobber> not sure, I'm still learning
[17:03:36] <riv> those look great ty!
[17:05:11] *** Joins: arkurious (~arkurious@user/arkurious)
[17:07:48] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[17:10:28] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Read error: Connection reset by peer)
[17:14:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:27:00] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[17:28:52] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:29:20] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:33:32] *** Joins: xsteadfastx (~marv@94.31.99.245)
[17:39:32] <hugbubby> \q
[17:39:35] *** Quits: hugbubby (~hugbubby@49.207.199.147) (Quit: leaving)
[17:47:42] *** Quits: anon__ (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net) (Ping timeout: 272 seconds)
[17:48:20] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 272 seconds)
[17:49:57] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:690a:d027:b8ea:dcab)
[17:51:23] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:5c57:7f45:b808:8adb) (Ping timeout: 250 seconds)
[17:53:24] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 240 seconds)
[17:54:51] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:690a:d027:b8ea:dcab) (Ping timeout: 250 seconds)
[18:04:42] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[18:07:30] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6)
[18:15:14] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6)
[18:16:57] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:95ea:d1ff:55f2:9ea6) (Ping timeout: 250 seconds)
[18:18:42] <cobber> godoc in a module dir works great, but is there a way to run godoc so that it includes all of my dev modules? (e.g. GOROOT for standard packages plus all modules found under the current dir, e.g. ~/dev/go/experiments/....)
[18:27:21] <siXy> cobber: Try export GO111MODULE=auto and see if that helps?
[18:28:12] <mort> for some reason, grpc is having trouble connecting over 4g
[18:28:45] <mort> a subconn hits the 20s authentication handshake timeout twice, before immediately connecting on the third try
[18:29:17] <mort> other stuff like curl and ping has no issue for the whole 40ish second duration
[18:36:55] <cobber> siXy:hmmm... lots of 3rd party package but none from my directories :-(
[18:41:06] <siXy> cobber: Are the packages you want it to find actually in your GOPATH? Because that's not the default gopath (and also gopath is mostly deprecated but happily not entirely)
[18:41:46] <siXy> If they aren't you might get somewhere by messing with -index_path. Check the docs for more: https://pkg.go.dev/golang.org/x/tools/cmd/godoc
[18:43:44] <cobber> nope... my gopath has all the go modules etc from the 'net - I have an extra tree of dirs (outside GOPATH, GOROOT etc) for my experiments and side projects...
[18:44:04] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Ping timeout: 272 seconds)
[18:44:27] <cobber> i.e.: my dev directory has projects in all kinds of languages, C, C++, perl, JS/HTML, etc.
[18:45:01] *** Joins: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net)
[18:45:47] <cobber> -index_path? do you mean -index_files ?
[18:46:18] <siXy> Yeah, sorry. You might be able to get that to work - not certain, haven't tried.
[18:46:43] <fizzie> I've not actually tried to run it locally, but pkgsite allegedly allows you to specify a bunch of modules. Cf. https://pkg.go.dev/golang.org/x/pkgsite/cmd/pkgsite
[18:46:55] <siXy> The go tooling doesn't really support what you're doing - it's not designed for you to have other random dirs of code scattered about the FS
[18:47:35] <fizzie> (You'd still have to give it a list of modules, probably, but I guess that could be just a matter of a `find -name go.mod` + some mangling.)
[18:48:11] <cobber> fizzie - yep... just found pkgsite a few minutes ago... dl...
[18:48:34] <siXy> If that does work and you want something a bit more permanent you might be able to get mlocate to feed pkgsite an up to date list of modules
[18:48:44] <fizzie> (It's the pkg.go.dev interface, so it would also look different.)
[18:50:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:51:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[18:51:54] <cobber> ??? I can't install pkgsite - where's the git repo? git clone https://cs.opensource.google/go/x/pkgsite balks 'not a git repo'
[18:52:29] <fizzie> That's just the source-browser.
[18:52:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:53:13] <cobber> sure... but I need a repo to install it from, don't I? Can't see a repo link anywhere :-(
[18:53:16] <fizzie> The canonical name would be "golang.org/x/pkgsite/cmd/pkgsite", which I imagine you should be able to just `go install ...@latest` without cloning anything.
[18:54:01] <cobber> ah... go install golang.org/x/pkgsite/cmd/pkgsite@latest looks promising...
[18:54:17] <fizzie> Anyway, if you do need the Git repository too, I think that's https://go.googlesource.com/pkgsite
[18:54:17] <cobber> thanks
[18:54:49] <siXy> There's also a github mirror if it's being a pain.
[18:55:26] <siXy> I wonder if the team that makes this would accept a copy-pastable git-clone thing in the links dropdown....
[18:56:17] <cobber> I just found a github link in https://cs.opensource.google/go/x/pkgsite/+/master:
[18:57:01] <siXy> yeah. I'm gonna go ask them if they'd accept a git-clone thing in links, as this isn't as discoverable as it should be.
[18:57:27] <cobber> :thumb-up:
[18:58:33] <cobber> *sigh* "note: module requires Go 1.18" fail
[18:59:33] <pyzozord> cna someone recommend some good talk / lecture about golang?
[19:02:37] <seebs> cobra/viper has a lot of traction, but having used them some, i sort of dislike them now.
[19:04:14] <cobber> seebs: too complicated?
[19:04:21] <seebs> roughly, yeah.
[19:04:34] <seebs> hard to cleanly debug
[19:06:37] <cobber> siXy / fizzie: thanks... pkgsite wants go 1.18, I've got 1.17 and the repo has no tags so no idea which version might work - thanks for the tips... I'lll just go back to godoc in my module dir and be happy with what I have :-)
[19:07:12] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:11:31] <siXy> cobber: It tells you which commit to grab for 1.17
[19:11:48] <siXy> specifically: 4d836c6a652cde92f433967680dfd6171a91ec12
[19:12:06] <cobber> "it tells me"??
[19:14:09] <braxas> is there some way I can work with windows paths on linux through path/filepath ?
[19:14:40] <siXy> cobber: It's written nearish the top of https://cs.opensource.google/go/x/pkgsite/
[19:15:47] <cobber> true - missed it
[19:15:52] <cobber> still fails :-(
[19:16:45] <braxas> I'm guessing not really
[19:17:39] <cobber> pyzozord: have you tried the go tour? https://tour.golang.org
[19:18:22] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Quit: Leaving)
[19:19:58] <cobber> siXy: looks like pkgsite is linux-only - seems to want /proc/meminfo
[19:20:34] <siXy> braxas: Not that I know of - all the bits you'd want to mess with are const. I think you might have to roll your own, sadly.
[19:23:37] <fizzie> Heh, sounds like running pkgsite is going kind of how I pessimistically expected it to go... it's definitely a lot bulkier thing to contemplate running locally than godoc.
[19:25:46] <cobber> btw: I just discovered that IF you include other modules in your go.mod file - godoc does include them under 3rd party
[19:26:09] <cobber> even seemss to follow replace directives
[19:26:18] <cobber> +1
[19:26:18] <fizzie> Yes, it's supposed to include the "build list".
[19:26:52] <pyzozord> cobber: yes I'm going through it, thanks
[19:26:55] <fizzie> So I guess you could theoretically have a single "docs" module that just "uses" everything else, just for godoc-running purposes.
[19:28:02] <cobber> not the worst idea...  a small script should suffice... :-)
[19:30:56] *** Quits: marius_m (~marius_m@80.91.33.151) (Ping timeout: 272 seconds)
[19:31:29] <aLeSD[m]> do you know any module that provide a cache for the queries to sql ?
[19:33:12] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:33:51] *** Quits: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net) (Remote host closed the connection)
[19:34:25] <aLeSD[m]> do  you know any module that provide a cache for the queries to sql ?
[19:34:56] *** Joins: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net)
[19:36:19] *** Quits: christophergray (~christoph@186.151.40.100) (Quit: WeeChat 3.4)
[19:37:08] <aLeSD[m]> I think it is not possible ...
[19:39:29] *** Quits: torin (~torin@user/torin) (Ping timeout: 250 seconds)
[19:39:55] *** Joins: lidless (lidless@user/lidless)
[19:42:27] <lidless> Hi folks. What library would you recommend for automating a webflow to get an auth token?
[19:42:33] <lidless> trying to avoid a headless browser
[19:45:29] *** Quits: redlegion (sid429547@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[19:45:48] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:46:12] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Ping timeout: 240 seconds)
[19:46:29] *** Joins: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net)
[19:46:29] *** Quits: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net) (Changing host)
[19:46:29] *** Joins: torin (~torin@user/torin)
[19:47:01] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[19:47:03] *** Joins: redlegion (sid429547@id-429547.ilkley.irccloud.com)
[19:53:38] *** Quits: yaraju (~yaraju@user/yaraju) (Quit: Leaving)
[19:58:16] *** Quits: mncheckm (~mncheck@193.224.205.254) (Ping timeout: 245 seconds)
[19:58:24] *** Quits: kayprish (~kayprish@cable-24-135-254-227.dynamic.sbb.rs) (Ping timeout: 252 seconds)
[20:00:52] *** Joins: icebattle (~wayne@S010600fc8ddfd2b3.vc.shawcable.net)
[20:03:20] <pyzozord> i think that's against their terms
[20:03:38] <pyzozord> if you mean https://webflow.com/
[20:04:19] <siXy> aLeSD[m]: As long as you have a half decent database it will already have a query cache.
[20:05:09] *** Joins: mncheck (~mncheck@193.224.205.254)
[20:09:49] *** Parts: iateadonut (~dan@121.177.17.154) ()
[20:10:43] <seebs> if you are caching SQL queries, i want to ask you to do a thing that may seem weird: first, check whether you have suitable indexes and they're actually getting used
[20:11:15] <seebs> i say this because i once encountered a production outage caused by someone adding a caching layer to a database before adding indexes, as a result of which they were caching operations that took 40-50 seconds, instead of having the operations take 10-100ms.
[20:14:50] *** Joins: shtirlic (~shtirlic@95-55-120-109.dynamic.avangarddsl.ru)
[20:20:45] <aLeSD[m]> ok. Thanks
[20:25:19] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[20:34:35] <lidless> pyzozord: web flow. not someone that made that buzzword their company name
[20:34:42] *** Quits: andlabs (~andlabs@70.107.171.168) (Ping timeout: 252 seconds)
[20:34:51] <lidless> fasthttp seems okay so far
[20:35:24] <pyzozord> what do you mean by "web flow"?
[20:35:57] <pyzozord> I am no aware of a term "web flow"
[20:36:42] <pyzozord> also to my defence you did write it as one word
[20:37:26] <pyzozord> do you just mean "web traffic"?
[20:38:38] <lidless> A work flow in the web
[20:38:50] <lidless> go to a page, enter info, submit, get cookies, send those to another page
[20:38:52] <lidless> it's... a web flow
[20:39:18] <pyzozord> that's... the first time I see someone use those words together to mean that
[20:39:25] <lidless> ok
[20:39:37] *** Joins: andlabs (~andlabs@70.107.171.168)
[20:39:56] <pyzozord> selenium is the most popular for browser automation
[20:41:57] <pyzozord> but making http post requests should be pretty straightforward if not built in, the only trick is to manage cookies
[20:42:22] <lidless> I'm new to Go and am just learning fasthttp as well. It seems okay. and yes - managing the session is a little meh
[20:44:52] <pyzozord> https://pkg.go.dev/net/http it has the http.Get and htt.Post and some cookie functions too
[20:44:57] <pyzozord> and it's built into go
[20:47:05] <pyzozord> it even has the cute "CookieJar" that probably manages to cookies for you
[20:47:07] <pyzozord> https://pkg.go.dev/net/http/cookiejar#example-New
[20:47:31] *** Joins: sagax (~sagax_nb@user/sagax)
[20:48:04] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[20:50:15] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[20:50:38] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:52:00] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[21:02:18] *** Joins: evanextreme[away (~evan@2604:4080:1000:8150:7950:a9e:9213:5d03)
[21:05:22] <lidless> nice :) ty!
[21:06:59] *** Quits: andlabs (~andlabs@70.107.171.168) (Read error: Connection reset by peer)
[21:07:22] *** Joins: andlabs (~andlabs@70.107.171.168)
[21:08:11] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[21:09:08] *** Joins: arinov_ (~arinov@213.194.126.155)
[21:18:47] *** Joins: masoudd (~masoudd@user/masoudd)
[21:19:37] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[21:22:19] *** Joins: crashrep (~crashrep@user/crashrep)
[21:29:28] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Remote host closed the connection)
[21:42:02] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[21:45:02] <pyzozord> is stuff.(type) common expression?
[21:45:09] *** Joins: normen (~normen@p200300d717235c002420c2ef5d6b6aae.dip0.t-ipconnect.de)
[21:45:13] <pyzozord> is there any other way to get stuff's type?
[21:46:54] *** Joins: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722)
[21:50:24] <fizzie> `stuff.(type)` isn't really an expression, it's special syntax for a type switch.
[21:50:32] <fizzie> Assuming that's literally the keyword `type` in there.
[21:50:38] <pyzozord> yes
[21:50:56] <pyzozord> can you write something else in there instead of "type"?
[21:51:06] <pyzozord> does this work only for type _switch_?
[21:51:19] <fizzie> The keyword `type` works only for type switch. It's part of the syntax.
[21:51:43] <fizzie> Types aren't first-class things you could use in expressions in general. (Except as mediated by the "reflect" package.)
[21:52:33] <fizzie> You can write a type name in there, but then it's a type assertion, which is a different thing altogether, and doesn't "return" a type.
[21:55:52] <pyzozord> hmm, but type information lives in runtime right?
[21:58:44] <fizzie> Ye-es, broadly speaking, sure. And you could argue type switches and type assertions are a special case of reflection too.
[22:02:39] <siXy> pyzozord: Go is a statically typed langauge. If you find yourself not knowing the type of stuff commonly, that's not a good sign. In general you should already know what the type is because it's an int, or a defined struct, or something.
[22:03:36] <pyzozord> siXy: right but type switch is clearly a dynamic type condition
[22:03:42] <siXy> If you have no idea what the type of foo is, it's unlikely you're likely to be able to do much sensible with it. It's rare that a sensible application has a random var full of cruft that might be an int, might be a map, might be a string etc.
[22:04:26] <pyzozord> I'm asking because I'm watching https://www.youtube.com/watch?v=IKoSsJFdRtI
[22:04:46] <pyzozord> I'm paused at 3:07
[22:05:21] <fizzie> Type switches (and assertions) are both things you can only do on interface-typed values, which is the most common case where you don't necessarily know the concrete type of a thing. But most of the time you don't need to care either; that's why you had the interface.
[22:07:45] <siXy> That's one of the few times where you might do that sort of construction in a reasonable application. Sometimes it's kind of unavoidable that you might have an error and there's a bunch of things that could be wrong, which you want to handle differently.
[22:08:12] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:08:13] *** Joins: dr0n (~nabromov@176.26.119.61)
[22:08:35] <siXy> It's still not super common - mostly if you have an error, there's basically two options - it's a retryable error, so you should do that, or it's a fatal one which means you have to give up, with some sort of log for the unhappy user.
[22:08:49] <pyzozord> oh right interface has runtime information 2-tuple of "what interface type this variable has" and "what concrete type this variable has", right?
[22:09:03] <pyzozord> s/interface has/variable of interface type/
[22:10:04] <fizzie> Also that point at 3:07 is in the "deciding with errors before 1.13" chapter, it'll (hopefully) go on to describe how the "errors" package means less explicit type switching in "user" code.
[22:10:15] *** Quits: Latrina (~Latrina@user/latrina) (Read error: Connection reset by peer)
[22:10:59] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:11:37] <siXy> I just checked - it gets to the new errors stuff around 4:30ish
[22:12:02] <pyzozord> yeah yeah it does
[22:12:06] <pyzozord> but I want to udnerstand old stuff first
[22:12:17] <pyzozord> because this can be used in other situations too
[22:12:50] *** Joins: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net)
[22:12:50] *** Quits: Latrina (~Latrina@cpc138118-hatf10-2-0-cust296.9-3.cable.virginm.net) (Changing host)
[22:12:50] *** Joins: Latrina (~Latrina@user/latrina)
[22:13:36] <siXy> Very rarely.
[22:13:57] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 240 seconds)
[22:14:02] <pyzozord> yeah I'm digging deep, I want to know the neuances :)
[22:14:08] <pyzozord> nuances*
[22:22:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:28:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[22:30:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[22:31:00] *** Joins: crashrep (~crashrep@user/crashrep)
[22:35:49] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[22:36:03] *** Joins: rvalue (~rvalue@user/rvalue)
[22:43:02] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[22:44:32] *** Joins: popey1 (~popey@ubuntu/member/popey)
[22:46:33] *** Quits: popey (~popey@ubuntu/member/popey) (Ping timeout: 256 seconds)
[22:46:33] *** popey1 is now known as popey
[22:50:52] <pjs> if I'm pushing to a repo, and want to update a project that depends on that repo to @latest, is there a way to force go to do that? seems like "go get ...@latest" uses the latest cached version on "go servers" (hah, assuming, no idea here). And it takes a few hours before it's refreshed
[22:51:52] <bookworm> set the module proxy to direct
[22:53:00] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[22:53:09] <pjs> bookworm: thank you
[22:59:18] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--ce.oracle-ocna.com)
[23:08:51] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799)
[23:09:02] *** Quits: khyr0n_ (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799) (Read error: Connection reset by peer)
[23:10:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:10:05] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:14:25] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[23:23:42] <fizzie> FWIW, you can also poke the proxy by requesting the missing version explicitly (as in, `go get ...@version`), which should get it to the proxy within a minute or so. But if you're just pushing commits "continuously" without tagging them with versions, then skipping the proxy is probably the way to go.
[23:24:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[23:24:30] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[23:25:36] <fizzie> (Unless you're not interested in actually pushing to a remote repository but just want to develop two related things together on a single machine, in which case maybe the new multi-module workspace mode is even better.)
[23:26:29] <bookworm> if it's just two you can simply use a replace directive in one of them, no need for workspaces
[23:28:04] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[23:29:34] <fizzie> Well, yes, but then you end up accidentally committing the replace directive into the repository.
[23:30:51] *** Quits: bluedust (~bluedust@117.204.143.79) (Remote host closed the connection)
[23:31:27] *** Joins: bluedust (~bluedust@103.161.144.138)
[23:34:12] <b0nn> You can use a --modfile to specify a mod file that contains things that you do not want to be used in prod IIRC
[23:42:36] <b0nn> https://github.com/golang/go/blob/5fd8c9b5c5a0348317e49e6c58e34b9a6e00e91a/src/cmd/go/internal/work/build.go#L126
[23:52:24] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[23:52:42] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:9980:28d:a4a3:60f) (Ping timeout: 252 seconds)
[23:56:41] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:57:24] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--ce.oracle-ocna.com) (Ping timeout: 240 seconds)
[23:57:54] *** Joins: mickey8 (~user@user/mickey)
