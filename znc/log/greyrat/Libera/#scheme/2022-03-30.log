[00:02:19] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[00:02:48] *** Joins: badkins (~badkins@136.56.92.199)
[00:07:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:08:05] *** Joins: mnieper (~user@2a02:810d:440:adc:34d0:253f:511e:65ed)
[00:13:15] <jcowan> Zipheir: "Correctness is clearly the prime quality" has a counterargument:  "Here is a large batch application with about 1000 bugs.  Would you rather fix all the bugs or make it run 1000 times faster?"
[00:14:43] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[00:15:49] <ChoHag> 1000000 more bugs? What's not to like?
[00:17:12] *** Joins: badkins (~badkins@136.56.92.199)
[00:17:38] <sham1> Of course the ideal would be that in the process of making it faster you can also squash the bugs
[00:18:58] <ChoHag> 1000000000 more bugs?
[00:23:36] <Zipheir> jcowan: The question, of course, is whether there's a correct subprogram that you can rely on for a quick job or if it's totally broken.
[00:24:09] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[00:24:28] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[00:24:32] <Zipheir> So it could be seen as dodging the point: no one wants to use a program that is never correct.
[00:25:02] <ChoHag> People use Windows.
[00:25:17] <Zipheir> But a correct branch in a buggy hole can be useful (we all use such things, after all).
[00:25:26] <Zipheir> s/hole/whole/
[00:26:16] <Zipheir> ChoHag: Well, it must get some things right some of the time, then!
[00:27:56] <ChoHag> It's extremely good at extracting money out of people.
[00:28:37] <Zipheir> Where Meyer's wrong is in his black-or-white idea of correctness, I think.
[00:28:43] <Zipheir> Hah, there we go.
[00:37:10] <Zipheir> jcowan: What do you think of the way SRFI 232 is handling nullary curried procedures these days?
[00:38:44] <amazigh> I just received a newsletter about 'iron software triangle' that they compare to "iron triangle" of project management: "cheap, fast, good", see https://buttondown.email/hillelwayne/archive/the-software-iron-triangle/
[00:39:32] <amazigh> correctness is not feature creep.
[00:39:39] <ChoHag> If they say that triangle's made of iron t hey're lying.
[00:39:49] <amazigh> ^^'
[00:40:00] <amazigh> I wonder why they use the iron metaphor
[00:40:38] <ChoHag> Marketing doesn't have to make sense.
[00:40:39] <amazigh> in french, we use just the expression "the triangle of project management"
[00:41:22] <jcowan> Zipheir: At this point I don't know what to think
[00:41:23] <amazigh> according to the article performance, complexity and correctness form a triangle
[00:42:02] <amazigh> similar to the iron triangle
[00:42:24] <Zipheir> amazigh: Interesting post, though it's kind of half-baked, as the author says.
[00:42:30] <amazigh> yep
[00:42:53] <ChoHag> Curried Null? Is that like Stone Soup?
[00:43:06] <Zipheir> (curried () 4) => 4
[00:43:22] <amazigh> (the linked article called 'edge-case poisoining' is also interesting)
[00:43:28] <Zipheir> As opposed to the Hemann semantics, which is (curried () 4) => (lambda () 4)
[00:44:29] <amazigh> does 'curried return a procedure' an invariant?
[00:44:38] <Zipheir> No.  That's the big change.
[00:44:50] <amazigh> I mean, is that supposed to be the case?
[00:45:13] <amazigh> yes it is a big change. I will read the rational of mnieper 
[00:47:04] <dpk> ooh, an error in the R7RS small spec
[00:47:26] <jcowan> That link on edge-case poisoning is excellent: it gives me a label for various Scheme changes that I have been resisting.  For example, generators can't generate an EOF object, C strings can't contain NUL, etc. etc.
[00:47:28] <dpk> oh, wait, no
[00:47:40] <jcowan> aw, I was hoping you had found one
[00:47:51] <dpk> no, not an error, just a confusing thing
[00:48:04] <jcowan> well, go on, tell us
[00:48:47] <dpk> the <cond clause> definition in the formal grammar at the end includes (<test>) without any expressions, but that is not explicitly mentioned in the syntax section of the definition of cond in 4.2.1
[00:49:18] <dpk> but it's implicitly included because ... matches zero expressions, and there's the paragraph "If the selected ⟨clause⟩ contains only the ⟨test⟩ and no ⟨expression⟩s, then the value of the ⟨test⟩ is returned as the result."
[00:49:35] <dpk> so, Zipheir, you can leave out ‘=> values’ from your ‘any’ implementation
[00:50:21] <Zipheir> dpk: !!
[00:50:28] <amazigh> clearly
[00:50:28] <Zipheir> Why have I never noticed that...
[00:50:38] <dpk> it's news to me as well
[00:52:24] <Zipheir> dpk: Thanks for sharing it.
[00:54:09] <jcowan> oh, and filenames that are not interpretable as strings is a third case
[00:56:07] <mnieper> Where's the edge-case poisoning link?
[00:56:21] <dpk> https://buttondown.email/hillelwayne/archive/edge-case-poisoning/
[00:56:39] <dpk> linked from the thing above about the iron triangle
[00:56:56] <mnieper> dpk: Thanks, I will read it!
[00:58:32] <Zipheir> It's an interesting read.
[01:01:32] <mnieper> As far as generators or strings are concerned, my interpretation is probably opposite to jcowan's.
[01:01:41] <amazigh> "a simpler version of the data and algorithm that a newcomer can read to understand the gist of things" that something I read several times but never seen in the real word 
[01:10:42] <amazigh> paraphrasing: having a product solving a simplified problem where newcomers can learn the basics, and where experienced devs can prototype stuff.
[01:10:53] <amazigh> IDK how that applies to R7RS.
[01:11:02] <Zipheir> I think that was in the context of showing that your simplified model is a good one.
[01:11:42] <Zipheir> "having a product solving a simplified problem where newcomers can learn the basics"  Doesn't that describe literally every text on computer science?
[01:12:23] <amazigh> yes, but where I read it, they recommend to have the production code base, and in another repository have a that said simplified product.
[01:12:42] <Zipheir> The edge-case poisoning post?
[01:13:20] <Zipheir> I guess it's a similar idea.
[01:13:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:14:29] <Zipheir> amazigh: The important thing is to show that the simplified thing has a meaningful relation to the "production" thing.
[01:14:48] <Zipheir> Otherwise it's just a conceptual bait-and-switch trick.
[01:14:53] <mnieper> Zipheir: One issue with SRFI 232 remains, but which cannot be fixed (easily): The application of zero values to a (curried) procedure should do nothing. Given a curried procedure (f a b c d) and only curried lambdas internally should do the same as ((f a b) c d) and also as (((f a b)) c d) and thus also as (((f a b) c d)). 
[01:15:18] <mnieper> Unfortunately it doesn't because evaluating a non-procedure value in the form (x) is an error.
[01:15:36] <Zipheir> mnieper: I agree.
[01:16:47] <mnieper> That's one of the reasons why I think that Scheme is not yet ready for something like SRFI 232 (and I am not sure whether it should be ready for it one day, but that's a different thing). 
[01:17:40] <Zipheir> Wait, I don't quite understand.  If f is defined as stated, then (((f a b)) c d) is the same as (f a b c d), etc.
[01:17:53] <Zipheir> ((((f)))) is just f.
[01:18:32] <mnieper> Nope. As soon as you have as many arguments that a non-procedure (curried) value is returned, you will get an error.
[01:18:33] <Zipheir> Unless the SRFI doc says otherwise?  But I think it's correct.
[01:18:48] <Zipheir> Ah, I see.
[01:19:53] <Zipheir> Yeah, that would be very hard to fix indeed.  Implicitly wrapping the body in a curried procedure would just create an infinite regress.
[01:20:21] <mnieper> Hemann promises a bit more (regarding the beauty of his idea) than is possible in Scheme.
[01:20:32] <mnieper> You can do it in Racket by rebinding #%app.
[01:21:43] <mnieper> Racket is probably the better platform for such language experiments, at least nowadays, because it is much more configurable (so they can advertise it as a language platform).
[01:22:48] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[01:22:49] <Zipheir> OK, thanks, I'll think about ways that could be solved or mitigated.  I'm not very sanguine about it, though.
[01:22:51] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:23:09] <mnieper> As far as SRFI 232 is concerned, you may just want to add it as a comment that we can't get all invariants we want (so have "poisoned edge cases" :)).
[01:23:34] <mnieper> I currently don't see how to solve it either.
[01:23:50] <Zipheir> Yeech.  "Use caution when handling the poisoned edge cases."
[01:24:15] <mnieper> Well, here we have a very simple model but we can't implement it.
[01:24:45] <mnieper> In the article, it started with a simple model being implemented.
[01:24:57] <mnieper> :)
[01:26:02] <Zipheir> Yes.  Oh well.
[01:30:47] *** Quits: mnieper (~user@2a02:810d:440:adc:34d0:253f:511e:65ed) (Remote host closed the connection)
[01:41:07] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[01:42:34] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[01:44:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:46:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:49:28] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[01:53:37] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Client Quit)
[01:54:48] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[01:58:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:58:42] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[01:59:38] <theseb> do you agree that at least a good sized subset of python can be converted easily into scheme/lisp?  (Someone once said python = lisp w/o the parens)
[02:02:37] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 240 seconds)
[02:05:07] *** Joins: hashfunc32 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[02:08:46] *** Joins: seninha (~seninha@user/seninha)
[02:11:35] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[02:11:44] *** Joins: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:16:23] <amazigh> theseb: because python function-scoped... no.
[02:16:47] <amazigh> theseb: because python is function-scoped... no.
[02:17:39] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[02:18:15] *** Quits: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[02:20:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:24:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[02:25:10] <Zipheir> theseb: It's really very different.  JavaScript is, for example, more Lispy than Python, IMO.
[02:26:17] <Zipheir> theseb: And yeah, as amazigh notes, you'd have to implement function-level scope, so the translator would have to do some hoisting.
[02:26:50] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[02:38:55] <sham1> The person that said that Python is basically lisp without parentheses is wrong. Python for its part feels quite distinct 
[02:39:35] <sham1> s/person that said/person who told you/
[02:39:49] <Zipheir> theseb is gone.  But yeah, it's a wild comparison.
[02:40:16] <sham1> Ah. That's what I get for turning off join and part messages
[03:04:25] *** Quits: hashfunc32 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 256 seconds)
[03:07:59] *** Quits: Zipheir (~wcm@98.4.178.27) (Quit: BIAB)
[03:12:43] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:19:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:24:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:30:12] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:9d51:935f:1ea:d159) (Quit: Leaving)
[03:40:29] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:44:31] *** Joins: badkins (~badkins@136.56.92.199)
[03:47:53] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:49:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[03:49:38] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[04:53:52] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 246 seconds)
[04:54:34] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Quit: leaving)
[04:55:05] *** Joins: badkins (~badkins@136.56.92.199)
[04:59:28] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[05:10:26] *** Quits: m455 (~m455@user/m455) (Remote host closed the connection)
[05:16:00] *** Joins: m455 (~m455@user/m455)
[05:17:24] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 272 seconds)
[05:23:31] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:29:18] *** Joins: badkins (~badkins@136.56.92.199)
[05:34:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[05:36:40] *** Joins: badkins (~badkins@136.56.92.199)
[05:44:47] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[05:50:28] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:51:35] *** Joins: zacque (~zacque@1.32.90.32)
[06:06:06] *** Joins: badkins (~badkins@136.56.92.199)
[06:06:41] <Duns_Scrotus> The python lisp comparison is from the early 2000s when everything else was c or c++ or java
[06:06:53] <Duns_Scrotus> People repeat it 20 years later
[06:07:06] <gwatt> sham1: idk, looking in the logs reveals loooong stretches of nothing but join/part
[06:10:31] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[06:23:49] *** Quits: schulze (~schulze@dynamic-077-000-186-208.77.0.pool.telefonica.de) (Ping timeout: 246 seconds)
[06:36:34] *** Joins: hashfuncd36 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[06:40:42] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[06:40:56] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[06:43:06] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Client Quit)
[06:44:10] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[06:44:15] *** alMalsamo is now known as lumberjack123
[07:01:47] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[07:06:00] *** Quits: hashfuncd36 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[07:06:57] *** Joins: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[07:10:15] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:16:16] *** Quits: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 260 seconds)
[07:17:11] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[07:29:18] *** Joins: badkins (~badkins@136.56.92.199)
[07:33:59] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[07:43:15] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[07:44:33] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[07:55:57] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 240 seconds)
[07:58:33] *** Joins: aeka (~aeka@user/hiruji)
[08:24:28] *** Joins: livoreno (~livoreno@user/notzmv)
[08:24:45] *** Joins: gproto23 (~gproto23@user/gproto23)
[08:25:06] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:25:11] *** Joins: [deleted] (~livoreno@user/notzmv)
[08:26:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:26:59] *** Joins: seninha (~seninha@user/seninha)
[08:27:12] *** Joins: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[08:34:04] *** Joins: notzmv (~zmv@user/notzmv)
[08:42:57] *** Quits: choas (~lars@ppp-188-174-61-49.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[08:44:28] *** Joins: choas (~lars@ppp-188-174-56-11.dynamic.mnet-online.de)
[08:54:37] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[09:01:29] *** Quits: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 250 seconds)
[09:06:20] *** Joins: badkins (~badkins@136.56.92.199)
[09:10:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:55:24] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (Quit: ZNC - https://znc.in)
[10:09:11] *** Joins: teiresias (~chris@blvuug/founder/teiresias)
[10:18:25] *** Joins: hashfunc1f63 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[10:23:44] *** Quits: hashfunc1f63 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[10:38:07] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[10:38:20] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[10:39:25] <mdhughes> Ha, he asked over in #lisp (which has function scoping, sort of) and they can't do generators.
[10:40:13] <mdhughes> (which, you can do generators in any lang, but it requires more work than it may be worth)
[10:41:44] <mdhughes> But my Python-is-not-Scheme is that Python's import mechanism is very un-Schemey, objects are un-Schemey, massive reliance on growable lists.
[10:46:24] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:49:08] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 260 seconds)
[10:49:32] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[11:07:20] *** Joins: badkins (~badkins@136.56.92.199)
[11:11:55] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[11:38:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:40:56] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4.1)
[11:43:55] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[11:46:05] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Client Quit)
[12:10:34] *** Joins: s-liao (~s-liao@101.86.164.158)
[12:26:32] <Duns_Scrotus> Does python have a conditional expression
[12:29:02] <mdhughes> y if x else z
[12:30:35] <mdhughes> Yes, it's the worst choice they could've made. The rationale and voting for it was deranged. https://peps.python.org/pep-0308/
[12:39:44] <sham1> IIRC that's a thing from Perl
[12:40:46] <sham1> Oh wait, perl actually does the ?: thing
[12:50:19] <Duns_Scrotus> So that’s lispy even though it’s not what the “python is a lisp” people meant 20 years ago
[13:24:15] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[13:30:07] <mdhughes> It's not lispy, it's explicitly a C-like construct, but Guido rejected the majority that preferred sane orders, and chose the awkward syntax.
[13:31:19] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[13:33:28] <sham1> It'd make sense if they had the word "otherwise" as an alternative keyword for else
[13:33:33] <sham1> "x if y otherwise z"
[13:36:46] <fizzie> Clearly they should've gone with `<cond> if <true> else <false> then` to make the Forth programmers feel at home.
[13:55:38] *** Joins: civodul (~user@guix/contributor/civodul)
[14:03:42] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Ping timeout (120 seconds))
[14:23:15] *** Joins: seninha (~seninha@user/seninha)
[14:24:17] <ns12> Who is Ben Bitdiddle? Is he an expert like Alyssa P. Hacker?
[14:46:55] *** Joins: badkins (~badkins@136.56.92.199)
[14:51:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[14:57:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:57:38] *** Joins: gproto23_ (~gproto23@user/gproto23)
[15:04:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[15:06:19] *** Joins: aeth (~aeth@user/aeth)
[15:12:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:13:10] *** Joins: seninha (~seninha@user/seninha)
[15:14:10] <amazigh> I read Eva Luator is the elder of all
[15:15:46] <Franciman> :)
[15:23:55] *** Quits: mala (~mala@user/malaclyps) (Ping timeout: 260 seconds)
[15:24:18] <ns12> Louis Reasoner is the worst programmer in Microshaft. I am wondering where Ben Bitdiddle stands in the hierarchy.
[15:25:23] <Duns_Scrotus> mdhughes: I guess I think of it as lispy because I work in a language without a conditional expression at all and it’s one of the things I miss
[15:25:43] <Duns_Scrotus> Totally forgot how many languages have ternary
[15:28:46] <dpk> what language is that? Fortran 77?
[15:29:52] <fizzie> Go, maybe.
[15:30:11] <fizzie> (As a kinda-popular language with no conditional expressions.)
[15:30:25] <dpk> really, Go has no ternary operator?
[15:30:28] <fizzie> Really.
[15:30:55] <dpk> just to annoy everyone, i assume
[15:31:17] <fizzie> https://go.dev/doc/faq#Does_Go_have_a_ternary_form "The reason ?: is absent from Go is that the language's designers had seen the operation used too often to create impenetrably complex expressions. The if-else form, although longer, is unquestionably clearer. A language needs only one conditional control flow construct."
[15:31:41] <dpk> ah, protecting the stupid programmer from themselves
[15:31:45] <fizzie> Whether you buy into that is a different matter, but it's not an *entirely* illogical argument.
[15:31:57] <dTal> The purpose of Go is the empower the reader by constraining the writer
[15:32:04] <dTal> *is to
[15:32:22] <dpk> "doctor, it hurts when i do this!" / "hmm, we need to amputate so you can't do that"
[15:32:24] <dTal> Python was designed along similar philisophical lines and ended up wildly popular
[15:32:48] <dTal> *philosophical, ugh, I embarrass myself today
[15:38:17] <ChoHag> It's because Pike's an arrogant opinionated arsehole.
[15:38:31] <ChoHag> "I found it hard so you shouldn't be able to do it at all."
[15:39:31] <ChoHag> I can sense a few other decades-old feuds being settled in Go too.
[15:46:55] <amazigh> ternary if considered harmful
[15:48:51] <ChoHag> Hmm "A language needs only one conditional control flow construct ... Go by Example: Switch. Switch statements express conditionals across many branches."
[15:52:31] <amazigh> select is also some kind of conditional
[15:52:40] <Franciman> yes ChoHag 
[15:52:55] <Franciman> select is proably the single Golang feature i like
[15:53:03] <amazigh> why?
[15:53:30] <Franciman> because it lets me express wait patterns across multiple sources in neat ways
[15:53:52] <ChoHag> But but but only one conditional control flow construct!
[15:54:13] <Franciman> i suggest go gets rid of switch and just keeps select!
[15:55:02] <amazigh> re go's select look at https://www.youtube.com/watch?v=pf4VbP5q3P0
[15:56:28] <Franciman> amazigh: oh sure
[15:56:34] <Franciman> i'm just saying it's the only thing i like in go
[15:56:36] <amazigh> in the video they recommend to read 'Concurrent Programming in ML' John H. Reppy
[15:56:36] <Franciman> lol
[15:56:48] <amazigh> I just say it is related :)
[15:56:48] <Franciman> not that it's the only thing go has that other lack :P
[15:56:52] <Franciman> oh ohh
[15:56:54] <Franciman> thanks
[15:57:15] <amazigh> s/they/the presenter/g!
[16:10:27] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:17:43] <sham1> I struggle to think of switch and select as conditional control flow structures 
[16:19:28] <sham1> I mean, switch-case is more akin to a very primitive pattern matching system, while select, um, selects between channels and blocks if nothing's coming and if one doesn't have a default
[16:20:17] <ChoHag> For and while loops then.
[16:21:37] <sham1> I mean, obviously go needs tail call optimization and then getting rid of both for and while ;)
[16:24:18] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 272 seconds)
[16:25:30] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:25:56] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:46:36] *** Joins: Zipheir (~wcm@98.4.178.27)
[16:46:36] *** Quits: Zipheir (~wcm@98.4.178.27) (Client Quit)
[16:59:12] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[16:59:25] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:02:53] *** Quits: rx80 (~quassel@user/rx80) ()
[17:04:13] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[17:05:04] *** Joins: rx80 (~quassel@user/rx80)
[17:12:30] *** Joins: schulze (~schulze@dynamic-077-006-048-098.77.6.pool.telefonica.de)
[17:17:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[17:18:39] *** Joins: aeth (~aeth@user/aeth)
[17:19:27] *** Quits: schulze (~schulze@dynamic-077-006-048-098.77.6.pool.telefonica.de) (Quit: zzz)
[17:19:43] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[17:22:45] *** Joins: badkins (~badkins@136.56.92.199)
[17:23:05] *** Joins: mala (~mala@user/malaclyps)
[17:27:25] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[17:30:45] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[17:36:04] <amazigh> select is has the same behavior as for-loop with cond inside it
[17:36:22] <amazigh> select is passive wait, unlike the for-loop
[17:37:03] <amazigh> switch is if that are nested like cond?
[17:55:41] *** Joins: badkins (~badkins@136.56.92.199)
[18:14:36] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[18:17:00] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:17:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:19:55] *** Joins: seninha (~seninha@user/seninha)
[18:27:43] *** Joins: badkins (~badkins@136.56.92.199)
[18:30:57] <wasamasa> https://www.openwall.com/lists/oss-security/2022/03/28/3
[18:31:05] <wasamasa> make sure to update your bundled zlib copies
[18:31:09] * wasamasa stares at chez
[18:33:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:36:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:42:42] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[18:43:33] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Quit: ZNC - https://znc.in)
[18:44:39] *** Joins: wasamasa (~wasamasa@chicken/contributor/wasamasa)
[18:54:51] <amazigh> sham1: re select as conditional: in english it can be explained: (select x y z) will execute the first one that is ready (I guess you know that), the condition is that it is ready.
[18:56:01] <amazigh> We will not have those kind of convo when Scheme Machine will be a thing :)
[18:57:18] *** Joins: seninha (~seninha@user/seninha)
[18:57:42] <leah2> wasamasa: easiest way is to remove them from chez i think :p
[19:02:54] <wasamasa> I bet this is for windows compatibility or something other stupid
[19:13:42] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:14:07] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:19:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:19:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:32:30] *** Joins: badkins (~badkins@136.56.92.199)
[19:33:17] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[19:51:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 260 seconds)
[19:59:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:59:28] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[20:20:13] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[20:21:31] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[20:28:08] *** Joins: karlosz (~karlosz@47.151.136.69)
[20:53:38] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:56:31] *** Joins: TCZ (~tcz@ip-91.246.66.101.skyware.pl)
[21:00:56] *** Joins: badkins (~badkins@136.56.92.199)
[21:01:08] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:07:24] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 272 seconds)
[21:08:52] *** Quits: kori (kori@dfg.rocks) (Quit: zzz)
[21:10:41] *** Joins: kori (kori@dfg.rocks)
[21:11:20] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:11:58] *** Quits: kori (kori@dfg.rocks) (Changing host)
[21:11:58] *** Joins: kori (kori@user/kori)
[21:17:56] *** Joins: eddof13 (~textual@189.178.17.205)
[21:30:46] *** Joins: badkins (~badkins@136.56.92.199)
[21:31:13] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a5a4:d9a1:a057:3848)
[21:31:14] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a5a4:d9a1:a057:3848) (Changing host)
[21:31:14] *** Joins: skapata (~Skapata@user/skapata)
[21:34:28] *** Quits: TCZ (~tcz@ip-91.246.66.101.skyware.pl) (Quit: Leaving)
[21:35:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[21:35:29] *** Joins: badkins (~badkins@136.56.92.199)
[21:40:49] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[21:41:24] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:55:21] *** Joins: badkins (~badkins@136.56.92.199)
[22:04:11] *** Quits: Lysandros (~Lysandros@user/lysandros) (Quit: taking a week off, have fun)
[22:04:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[22:04:22] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[22:04:52] *** Joins: badkins (~badkins@136.56.92.199)
[22:08:19] <amazigh> a pico r7rs @ https://github.com/jrincayc/r7rs-pico-spec
[22:09:16] <m455> that's cool!
[22:09:55] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[22:32:20] *** Joins: badkins (~badkins@136.56.92.199)
[22:42:10] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:42:18] *** Joins: badkins (~badkins@136.56.92.199)
[22:49:31] *** Joins: saorge (~saorge@ns378138.ip-5-196-67.eu)
[23:29:09] *** Quits: eddof13 (~textual@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:30:33] *** Joins: seninha (~seninha@user/seninha)
[23:34:14] *** Joins: eddof13 (~textual@189.178.17.205)
[23:39:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
