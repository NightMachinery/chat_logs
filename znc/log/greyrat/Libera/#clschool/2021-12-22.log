[01:05:17] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:05:48] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[01:06:49] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:37:43] *** Joins: dre (~dre@2001:8003:c932:c301:48f3:b0e:431e:dad8)
[02:04:00] *** Joins: Oladon (~olad@98.43.81.226)
[03:06:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:42:06] *** Joins: beach` (~user@2a01:cb19:150:3400:33eb:15c9:ffbb:3421)
[03:46:29] *** Quits: beach (~user@2a01:cb19:150:3400:8e6:4e:833f:a4f0) (Ping timeout: 250 seconds)
[03:48:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:30:14] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[04:31:28] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[04:57:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:58:11] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:07:49] *** Quits: dre (~dre@2001:8003:c932:c301:48f3:b0e:431e:dad8) (Ping timeout: 240 seconds)
[05:28:02] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:54:47] *** Joins: dre (~dre@2001:8004:44f0:c7c7:adf0:5cb6:eb4d:dd60)
[06:05:22] *** Quits: dre (~dre@2001:8004:44f0:c7c7:adf0:5cb6:eb4d:dd60) (Quit: Leaving)
[06:23:54] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[06:52:17] *** Quits: sts-q (~sts-q@212.53.219.167) (Ping timeout: 240 seconds)
[06:58:38] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[07:02:57] *** Joins: sts-q (~sts-q@91.200.108.177)
[07:12:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:19:59] *** beach` is now known as beach
[07:30:35] <beach> Good morning everyone! 
[08:05:23] *** Joins: Oladon (~olad@98.43.81.226)
[08:07:28] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[08:38:34] *** Joins: shka (~herr@109.231.0.226)
[09:16:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:33:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:39:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[09:59:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:34:41] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:07:39] <lisp123> I am finding as I use CLOS more, I am gravitating towards creating more and more (sub)classes. Is that normal?
[11:08:45] <lisp123> It basically has the effect of delaying certain decisions to lower levels of the algorithm. For example, I may previously have used an MVB to return two values, which can then be utilised by the calling function
[11:10:02] <beach> Hard to say in general.  It depends a lot on the exact problem. 
[11:10:25] <lisp123> But now I am gravitating towards housing those values within a class, which I will subclass to allow the result to be passed into a generic function & hence specialised
[11:11:22] <lisp123> So instead of, for example, a COND statement in the calling function, I would turn that calling function into a generic function, and the class object returned by the inner function will force a particular method to be dispatched
[11:12:25] <beach> That sounds "normal".
[11:12:33] <lisp123> beach: Thanks, yes there does not seem to be a clear appropriate way (i.e. thus it depends on the problem). I am spending more and more of time on thinking about how to structure the code vs. actually writing it
[11:13:05] <lisp123> By "normal", do you mean returning a class object vs. multiple return values?
[11:13:14] <beach> Oh, THAT is normal. :)  I.e., thinking about how to structure the code.
[11:13:33] <beach> Every good programmer does that, but unfortunately, most programmers are not very good.
[11:14:22] <beach> lisp123: Yes, that's usually a better idea, but again, it depends.  Multiple values are cheaper than allocating a standard object.
[11:14:58] <beach> ... so in a tight loop where performance is critical, the decision may be different.
[11:15:01] <lisp123> :) Working through CLIM was a revelation, I got to thank you for keep reminding people that it is an excellent example of a large code base. It was very hard at first, but once I figured out how it was working, I realised how much easier it was to read (given that CLIM implements a complex GUI system which would be very difficult to read in any other style)
[11:15:50] <lisp123> beach: Great, thanks. I will start with the expensive approach and can fine tune later if ever needed (premature optimisation and all that)
[11:15:55] <beach> Yes, reading the CLIM specification is how I understood CLOS.
[11:19:02] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:35:01] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (Ping timeout: 240 seconds)
[11:43:42] *** Joins: treflip (~user@user/treflip)
[11:50:08] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[12:00:21] <pjb> lisp123: basically, in an OO application, when you have to add a feature or a kind of object to be processed, you should not have to hack right and left, but instead just write one or two sub-classes with a few very specific methods.  If you can do that, then it means your OO app is correctly structured, with the right abstract classes and general methods.
[12:02:09] <lisp123> pjb: Thanks, that's a good principle to keep in mind. Right now I'm doing a lot of code revisions so I don't think I'm there yet :(
[12:02:39] <lisp123> But hopefully I get there soon!
[12:02:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[12:04:38] *** Joins: aeth (~aeth@user/aeth)
[12:22:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:29:57] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (Quit: WeeChat 3.0)
[12:39:34] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[13:19:30] *** Joins: dre (~dre@2001:8003:c932:c301:4bc5:1b72:1f27:b67f)
[14:16:31] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[15:27:40] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:32:50] *** Quits: dre (~dre@2001:8003:c932:c301:4bc5:1b72:1f27:b67f) (Quit: Leaving)
[16:00:17] *** Quits: shka (~herr@109.231.0.226) (Read error: Connection reset by peer)
[16:03:58] *** Joins: shka (~herr@109.231.0.226)
[16:07:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:16:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:20:23] <rotateq> hm i had this with qwnavery recently, he produced first (mapcar 1+ (1 2 3)) then i told him we're not scheme and then (mapcar '1+ '(1 2 3)). i suggested (mapcar #'1+ '(1 2 3)), so when to better use what?
[17:20:54] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:71e0:c4bf:d866:f951)
[17:23:01] <rotateq> so when i think about also when one has a lexical symbol, then its symbol-function is also bindable
[17:24:07] <rotateq> again, the deep details of specification :)
[17:24:25] <rotateq> where I'm not sure I mean
[17:42:12] <lisp123> The Clim docs state: A protocol class is an “abstract” class with no slots and no methods (except perhaps for some default methods), and exists only to indicate that some subclass obeys the protocol.
[17:42:17] <lisp123> But also: Whenever a class inherits from a protocol class or returns true from the protocol predicate, the class must implement methods for all of the generic functions that make up the protocol.
[17:43:15] <lisp123> Actually ignore me :) I got confused between generic function and method
[17:43:31] <rotateq> no lisp123 
[17:43:40] <rotateq> but can't help you out
[17:45:11] <lisp123> rotateq: Hey rotateq, how's it going
[17:45:52] <rotateq> oh the quotated things rotate, you know
[17:46:16] <rotateq> I'm still teaching qwnavery in parallel (over xmpp and sometimes jitsi)
[17:46:47] <lisp123> Nice
[17:47:23] <rotateq> yes it's fun
[17:47:58] <rotateq> but often i have him to remember, the basics, also because they don't seem to have learned much in highschool, which is now over
[17:48:09] <rotateq> he's a good padawan :)
[17:48:49] <rotateq> are you still located from work in dubai?
[17:49:10] <lisp123> Oh he is young, the future generation of lispers
[17:49:22] <lisp123> Yes, but I'm moving home to Sydney in a couple of months for good
[17:49:25] <rotateq> yes 18 now, but I'm not much older
[17:50:14] <lisp123> Future world domination from both of you ;)
[17:50:27] <rotateq> some good people not much older than me are way longer in business, so I shouldn't give up on me
[17:51:12] <rotateq> lisp123: yes but i don't think to build replicators (like in Stargate) which then eat up galaxies
[17:51:14] <beach> rotateq: 'name and #'name may designate different functions, but for standard functions like 1+, they designate the same one.
[17:51:16] <rotateq> or Skynet :)
[17:51:22] <rotateq> hello beach
[17:51:36] <rotateq> yes okay i see
[17:52:18] <beach> There is also a performance difference sometimes.  In case of 'name, there may be a call to FDEFINITION at run time.
[17:52:25] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[17:52:50] <rotateq> and that is "worse"?
[17:53:12] <beach> Only if you care about a small performance penalty.  Usually it doesn't matter.
[17:53:37] <rotateq> Ah no, not in the first place, more about intention.
[17:53:59] <beach> It is almost always better in that respect to use #'name.
[17:54:09] <rotateq> :)
[17:59:04] <lisp123> rotateq: What have you covered with qwanvery so far?
[17:59:06] <rotateq> as I also like more to write (funcall #'(lambda (x) ...) ...) instead of what would work just ((lambda (x) ...) ...). but okay LAMBDA is a macro that produces the function object anyway
[17:59:29] <rotateq> lisp123: few this and that, now a few months and with weeks of pauses
[17:59:32] <lisp123> ^ I used to do that too, but now I do (lambda ) without the #'
[17:59:53] <rotateq> first to learn important symbols to build up from, like PUSH, POP, CONS
[18:00:11] <rotateq> ah okay
[18:00:24] <lisp123> Nice
[18:00:36] <rotateq> yes and some mathematical things
[18:00:54] <rotateq> he now started also project euler
[18:01:04] <lisp123> Good stuff
[18:01:52] <rotateq> yes but also stuff that he can understand for now, not too much (just sometimes to shock)
[18:02:55] <rotateq> it wasn't so good, he solved problems 1 and 2, then instantly wanted to solve the most recent, and called it "trivial".
[18:03:10] <lisp123> I made that mistake before
[18:03:47] <rotateq> I meant I want to save him from making a fool of himself. This has happened to me often enough, but I can live with it.
[18:04:12] <rotateq> yes lisp123 and even now just 58 solved it, that's a sign how hard it can be
[18:04:34] <lisp123> Yep
[18:05:00] <rotateq> he even doesn't know yet what coprime means and that is in the first line ^^
[18:05:14] <rotateq> but don't get me wrong, i learned also much from him
[18:05:50] <rotateq> beach: We had that, CHAR-DIGIT-P returns the value when it's a digit and NIL if not. I didn't know that.
[18:24:40] <beach> Why are you telling me this?
[18:26:06] <beach> Speaking of which, I have been told quite frequently lately in #commonlisp and #sicl that I am saying wrong things in my utterances, so I think I'll restrict my remarks and answers to #clschool for the time being.
[18:26:59] <rotateq> öhm
[18:27:31] <rotateq> we just wondered that it is this way and then thought "when we now could ask beach or someone of the other ..."
[18:28:15] <beach> I think I understand. 
[18:35:24] <lisp123> beach: That would be a shame, you are usually nearly always right but it must be tiring to always have to encourage to be more precise
[18:36:52] <beach> That's not the problem.  It seems to have become a sport by experienced lispers do disagree with me.  Just for the hell of it, it appears.  And I don't appreciate that.
[18:37:05] <beach> s/do/to/
[18:37:33] <lisp123> Sorry to hear that
[18:37:52] <beach> Yeah, me too.  But it's fine.  I'll take appropriate action.
[18:38:22] *** Joins: makomo (~makomo@user/makomo)
[18:49:37] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[18:52:03] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[19:02:46] <beach> lisp123: We can do better than the Lisp machine, on stock hardware even.  But it will take some time.  And I am sure I have said this before.
[19:04:17] <lisp123> beach: Yes :)
[19:13:31] <lisp123> I was thinking more from the perspective of an alternate reality where Lisp took over during the 90s vs. other languages. I was reading a post yesterday by Kent Pitman (timely to rotateq's comment about time machines) on some of the mindset at the time, relevant quote being:
[19:14:31] <lisp123> "...Many people spent a big chunk of their lives investing in this dream and it didn't pan out quite as we wish...We owe it to the losers in these little skirmishes to make sure that, if nothing else, the good ideas are not lost along with the framework. And we do not accomplish that by defining that there was nothing lost. That's both callous to those who worked hard on these other things and short-sighted to the future, which might one day c
[19:14:31] <lisp123> are about the things that got lost."
[19:15:05] <lisp123> It's a bit tangential to all of the discussions, but I always wondered why so many people who pioneered Lisp in the 80s/90s sort of disappeared from it afterwards
[19:15:40] <lisp123> But that quote stuck out to me as a possible reason
[19:16:14] <White_Flame> it's all about funding
[19:16:31] <White_Flame> when there was funding, people did great things.  when funding dried up, they worked elsewhere
[19:16:32] <beach> Yeah, people had to make a living. 
[19:17:24] <lisp123> I guess
[19:17:30] <White_Flame> these sorts of projects take multiple great people with time dedicated to it
[19:17:56] <White_Flame> now, if it weren't tied to the hardware, I think things might have been a lot different
[19:18:06] <lisp123> I was hoping they would do something as a hobby at least
[19:18:11] <White_Flame> and even the alpha vlm etc stuff still is emulating the lisp hardware platform
[19:18:34] <White_Flame> (at least from teh symbolics end of things, which is my biggest retrospective familiarity)
[19:19:42] <lisp123> It wasn't Common Lisp right (it was a predecessor?)
[19:20:19] <White_Flame> right, though I believe most or even all the lisp machines did get CL support
[19:20:24] <lisp123> Ah I see
[19:20:34] <White_Flame> the hardware was pre-CL
[19:20:39] <rotateq> lisp123: it took over since long ago, but just in the back like a puppet player who plays the strings :D the others can believe their myths still and think they're ahead
[19:21:49] <White_Flame> what took over?
[19:22:02] <rotateq> don't take me too seriously :)
[19:22:18] <White_Flame> I'd have to be able to parse it before I could take it seriously or not ;)
[19:22:51] <rotateq> ideas are powerful and the things they influence depend on those
[19:24:36] <rotateq> and the ideas that are powerful are those who can stand the test of time
[19:25:09] <White_Flame> so many ideas were lost from the general mainframe world as well
[19:25:36] <White_Flame> and we only have clunky, half-baked versions of them remaining in things like virtual machines
[19:25:48] <rotateq> yes and also with the internet ideas and knowledge still gets lost, but the pseudo-knowledge and things no one really needs, grow
[19:26:03] <White_Flame> and heck, look at engelbart's ideas etc.  people use pale imitations to get the buzzword clout and market from there
[19:26:27] <rotateq> do you have a link to read up what it is?
[19:27:01] <White_Flame> you can start here: https://www.youtube.com/watch?v=yJDv-zdhzMY
[19:27:23] <White_Flame> there's plenty of others distingushing what he was talking about compared to what we end up getting
[19:27:51] <rotateq> hmm
[19:37:16] *** Quits: treflip (~user@user/treflip) (Quit: I'll be back soon)
[19:39:19] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:46:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:47:55] *** Joins: treflip (~user@user/treflip)
[19:54:37] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[20:01:55] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[20:17:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:36:17] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[20:43:18] *** Joins: nimiux_ (~nimiux@freeshell.de)
[20:44:22] *** Quits: nimiux_ (~nimiux@freeshell.de) (Client Quit)
[20:46:15] *** Joins: nimiux_ (~nimiux@freeshell.de)
[20:49:24] *** Quits: nimiux_ (~nimiux@freeshell.de) (Client Quit)
[20:51:35] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:52:38] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[20:53:35] *** Quits: chealjo (~nimiux@freeshell.de) (Quit: leaving)
[20:56:23] *** Joins: chealjo (~nimiux@freeshell.de)
[21:00:53] *** Quits: chealjo (~nimiux@freeshell.de) (Client Quit)
[21:01:51] *** Joins: chealjo (~nimiux@freeshell.de)
[21:02:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:02:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:27:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:29:38] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 260 seconds)
[21:29:45] *** Joins: aeth_ (~aeth@user/aeth)
[21:29:45] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[21:29:48] *** aeth_ is now known as aeth
[21:36:35] *** Joins: Oladon (~olad@98.43.81.226)
[21:36:54] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[21:41:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:55:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:55:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:55:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:04:21] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:15:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:43:57] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[22:53:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:55:57] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[23:09:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:09:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:13:02] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[23:21:16] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[23:22:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:24:01] *** Joins: aeth (~aeth@user/aeth)
[23:27:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:32:13] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:41:42] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 260 seconds)
[23:52:48] <CodeBitCookie[m]> Hello Everyone!
[23:53:11] <CodeBitCookie[m]> Is there a way to delete an instance of an object?
[23:53:26] <CodeBitCookie[m]> I am asking because I want to delete an object in McCLIM.
[23:54:23] <rotateq> UIOP has some symbol NUKE-SYMBOL as I saw recently :D
[23:58:16] <CodeBitCookie[m]> I am trying that out now.
[23:59:57] <rotateq> but okay, in some way making the thing unbound so the garbage collector can catch it
