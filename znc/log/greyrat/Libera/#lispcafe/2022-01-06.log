[00:38:13] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[00:47:37] *** Quits: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[01:18:03] *** jm is now known as jmorrison_
[01:29:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[01:35:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:38:28] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (Quit: Gateway shutdown)
[02:18:32] <hayley> A bit late but the AMD presentation was pretty light on details on Zen 4. It clocks at 5GHz while playing a game. It has a funny looking case. Right then, guess I will buy one. /s
[02:18:55] <sm2n> Does it have red lights that make it go faster though?
[02:19:13] <hayley> Didn't see any.
[02:19:43] <sm2n> not getting my money
[02:19:51] <gilberth> Hmm, could one add any? Maybe that's an extra?
[02:21:03] <selwyn> gilberth: more of an essential
[02:21:29] * hayley looks through list of demands for new CPU
[02:21:58] <selwyn> new cpu manifesto
[02:22:08] <hayley> - 256 bit vector unit - NonBlockingHashMap probe in one instruction - hardware transactional memory
[02:25:48] <sm2n> here I am complaining about no avx2
[02:26:04] <sm2n> and you say that
[02:26:47] <hayley> Zen 1 has AVX2 but it runs 256 bit ops through the 128 bit vector unit twice.
[02:27:01] <hayley> ...like the Z80 did with its 4 bit ALU IIRC
[02:27:23] <sm2n> https://github.com/marcoheisig/sb-simd/issues/17
[02:27:24] -ixelp- SIGILL when compiling and loading · Issue #17 · marcoheisig/sb-simd · GitHub
[02:28:17] <hayley> Huh, SB-SIMD runs AVX2 at compile time?
[02:28:37] <sm2n> apparently
[02:28:48] <hayley> I know I got SIGILL when I did AVX2 detection in 42nd-at-threadmill wrong, but that was at runtime. Maybe it's constant folding or something.
[02:40:55] *** Joins: luis9 (~luis@lisp/luis)
[02:43:16] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 268 seconds)
[02:43:16] *** luis9 is now known as luis
[02:52:00] <hayley> gilberth: "Only devs working on os kernels would need to worry about assembler these days." Guess we're safe from having to diddle the SBCL compiler.
[02:53:20] <gilberth> You're safe, hayley. I have no intentions to use SBCL, or even diddle with its innards.
[02:53:54] <hayley> c.f. https://twitter.com/StevenGreen31/status/1478867831596875776
[02:54:45] <semz> > And then there is this really tricky issue of what to do in the case where code is compiled on a machine with AVX2, then save-lisp-and-die'd, and moved to a machine without AVX2.
[02:54:49] <semz> Isn't this already a problem?
[02:54:58] <hayley> Yes.
[02:55:01] <semz> Or does SBCL deliberately avoid extensions
[02:55:46] <selwyn> gilberth: why don't you use sbcl
[02:57:02] <gilberth> selwyn: I never liked it, that's because. Especially not its I-wanna-be-a-batch-compiler mentality.
[02:58:09] <drakonis> idgi
[02:58:40] <gilberth> And then I didn't trust its multi-processing^Wthreading for a long time. But that is history.
[03:01:12] <drakonis> hayley: regarding zen4, i'm excited to get a new cpu now :V
[03:02:53] <drakonis> heck, a lappy with zen4 would be a godsend
[03:03:09] <drakonis> also rdna 3 is apparently also releasing alongside zen4
[03:03:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:03:47] <drakonis> chiplet gpus ahoy.
[03:05:54] * hayley just saw "Modern software stinks, look what they did with a 6502" and has to remind everyone how simple a 6502 is.
[03:06:25] <gilberth> I just feel more comfortable with CCL. It gets less on my nerves with complaining all the time. The compiler is faster and I made the experience that the GC is snappier. I know its internals better. And the Objective C bridge rocks, and its FFI rocks. I don't need to write any FFI definitions to begin with.
[03:06:40] <drakonis> agreed that modern software is terrible
[03:06:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[03:07:02] <drakonis> but then, you also have modern hardware to contend with
[03:07:13] <hayley> If you want to write a good compiler for x86-64, then have fun with that, I guess.
[03:07:35] <gilberth> For what it's worth, I also never really liked CMUCL. It's a relationship like I have with Linux. I don't like it, but it's the best we have (had).
[03:07:51] <selwyn> do you like any implementation
[03:07:53] <hayley> You don't have caches, pipelining(?), branch prediction, superscalar execution, register renaming, etc. Much simpler to make optimal code for a 6502.
[03:08:27] <hayley> And there are probably fewer micro-architectures for 6502 than x86-64, so less variance in what you are optimising for.
[03:09:52] <gilberth> selwyn: Are you asking me? Yes, I like CCL, I grew fond of it. Prior to that I used CMUCL and prior to that ACL, which I liked, too.
[03:10:36] <drakonis> how long did the 6502 last?
[03:10:48] <hayley> I mean, sure modern software can be shit, but comparing to olde machines is unfair.
[03:11:00] <drakonis> wow this chip is very old
[03:11:01] <drakonis> woah.
[03:11:24] <gilberth> Still made last I looked.
[03:11:24] <hayley> You can complain about the bare minimum work, but the maximum is way larger than it used to be.
[03:11:35] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:11:37] <gilberth> As is the Z80.
[03:12:05] <drakonis> oldie but goodie.
[03:12:27] <hayley> I thought the lectures I attended on executing machine code were getting excessively complicated, but they are still too simple.
[03:12:51] <semz> complaining that hardware is getting too complex for its own good is valid imo
[03:13:16] <drakonis> https://github.com/ruricolist/vernacular wow this is neat.
[03:13:17] -ixelp- GitHub - ruricolist/vernacular: Module system for languages that compile to Common Lisp
[03:13:41] <gilberth> hayley: Don't be misled. Generating good code for those kind of CPUs is hard in a different way. Compilers for the once popular 8051 aren't exactly dumb. While you can write a compiler for a RISC load/store architecture by the book.
[03:13:48] <hayley> People have suggested deep learning for basic block positioning and instruction scheduling, and found they actually work. IOW we are fucked.
[03:14:43] <hayley> Sure, instruction selection is a pain in the ass. FWIW you get both kinds of pain with x86-64.
[03:15:43] <hayley> You still have to put the bits to shift by in CL.
[03:16:08] <sm2n> Yeah but what are the compile times like?
[03:16:13] <gilberth> I believe deep learning could be applied to even more in a compiler. Any meaningful optimization is like applying some transformation on the code. Doing that transformations is easy, recognizing when it is worth the effort, is not and eventually would need a heuristic.
[03:17:04] <selwyn> whats the verdict on superoptimisers
[03:17:31] <gilberth> I see parallels to automatic theorem proving and even chess playing.
[03:18:00] <hayley> Given deep learning is used to guide Cyc and playing Go, sure.
[03:19:05] <gilberth> As is: If you have infinite time, automatic theorem proving is easy. We don't, so we need a guessimate on which moves to make would make sense and bring us nearer to a solution. ML is good for guessimates.
[03:20:40] <gilberth> I don't particular like ML though, but I already had the hunch that ML could be helpful in automatic theorem proving in like '93 or so.
[03:20:47] <hayley> "Agreed. A good algorithm expressed in a high level language can outperform a poor algorithm written in assembler." Dammit, that wasn't what I was saying.
[03:20:57] <gilberth> At a time I still was into that kind of things.
[03:21:13] <hayley> I'm trying to say that writing good assembler (or a program that generates assembler) is damn hard, and failing at it.
[03:22:17] <hayley> You can write the same algorithm, and minute differences that aren't due to algorithms matter. e.g. GCC and SBCL with DFA hot loops.
[03:22:44] <gilberth> Yep, and a good compiler usually can do better than a human can. This was a different story with dumb compilers and predictive constant execution times of instructions.
[03:23:27] <hayley> (https://twitter.com/nodefunallowed/status/1478866402459095040 and replies. Not working for me today.)
[03:23:36] <semz> I have this nagging feeling that ML is a kind of poisoned offering that will have really bad long term effects on the field.
[03:23:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[03:23:37] <gilberth> However, I say, you need a good understanding about how CPUs work (and thus some exposure to assembly) if you are after the last cycles.
[03:24:14] <semz> It's really good for approximations, but you gain basically no understanding into the structure of the problem, or even of how to make something "intelligent"; all you maybe get is how to make more approximations
[03:24:35] <selwyn> well
[03:24:38] <gilberth> semz: Yeah, it's a hype. It's sold as the savior, neglecting different solutions.
[03:24:42] <hayley> That's what we're doing with compilers anyway.
[03:25:02] <hayley> Beyond a point, optimisation requires guessing or having trade secrets.
[03:25:17] <gilberth> Yes, as I said.
[03:25:18] <selwyn> if you play go with the deep learning algorithm, you can extract insight simply from the way it plays
[03:25:52] *** Joins: aeth (~aeth@user/aeth)
[03:25:54] <selwyn> plausible that an ai compiler could discover optimisations that compiler writers haven't thought of yet (a longer shot perhaps)
[03:26:02] <gilberth> You have to answer e.g. "Is it worth inlining this function?" No easy answer to that.
[03:26:58] <sm2n> I am expecting "AI-powered" cloud compilers to something people use in the next decade
[03:27:06] <gilberth> And this applies to all levels. "Which register is better for this value?" "Which value to spill here?" "Move this block here or there?"
[03:27:27] <sm2n> It's entirely possible that microsoft will singlehandedly make people pay for compilers again
[03:27:41] * semz reaches for his barf bag
[03:27:42] <hayley> ICC time
[03:27:46] <gilberth> Each of this transformations are trivial. Deciding which one to apply is the hard part.
[03:28:07] <hayley> "But Hayley, ICC is just LLVM with secret sauce now"
[03:28:43] <sm2n> People are already moving their entire development environments online
[03:28:49] <sm2n> See codespaces, etc
[03:29:43] <sm2n> If they extend that with "upgrade your codespace for faster code with our patented AI Cloud compiler", a lot of people would jump for it
[03:30:14] <Alfr> gilberth, exhaustive search and profile ... It's only 2^n possibilities, who cares that we won't get and answer before the Sun turns to embers as long as the binary is optimal. ;)
[03:30:27] <gilberth> And you could tolerate something looking worse initially, if at the end of day, because of say ranges of values sth could assume, it gets way better or could even disappear entirely. Like: Inlining too aggressively isn't good. But when what you inline is say (if (zerop x) 1 (.... real much work ...)) and you find that 'x' always is zero, you inline. That's not obvious initially.
[03:30:46] <hayley> "Never really bothered to worry about code optimisation though. I was happy if the code it generated ran at all."
[03:31:10] <hayley> I'd say this guy got off lucky by not optimising, but he did still write a compiler.
[03:32:43] <hayley> But I can seriously claim that a 12 line diff made some application code 70% faster. You can keep adding more hacks until the cows come home.
[03:32:46] <gilberth> Alfr: At times I wonder. Millions of copies of the very same software run around the world. Can't there be some kind "cloud" profiling. Gathering data from millions of computers. Perhaps even shipping slightly differently compiled binaries to each user, answering one of those questions "Should do frob here or not" differently and measure?
[03:33:26] <gilberth> Google works that way. Amazon works that way. FB works that way. And Tiktok works that way. Why can't compilers do that?
[03:33:52] <semz> Because compilers can't ship a new copy on every execution.
[03:34:04] <hayley> GDPR notices in your compiler warnings?
[03:34:14] <Alfr> gilberth, I wouldn't trust that not to leak information.
[03:34:17] <gilberth> semz: They could. In theory.
[03:34:43] <semz> I guess you could rig something like Gentoo up that way
[03:34:52] <semz> but most people install binaries
[03:35:00] <semz> and probably wouldn't be very happy to download these every time
[03:35:48] <gilberth> Alfr: That's a different issue. And my web browser leaks far more sensitive and meaningful information. As long as the business model of the software vendor is not selling ads, there would be no incentive to identify a single user.
[03:35:55] *** Joins: aeth_ (~aeth@user/aeth)
[03:36:01] <Alfr> gilberth, not in the sense that the programs generated directly exfiltrate data but in the detailed timing information for certain functions may let you deduce its input.
[03:36:01] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[03:36:03] *** aeth_ is now known as aeth
[03:36:23] <gilberth> semz: People are happy with their software constantly downloading updates^Wdowngrades.
[03:36:49] <sm2n> Telemetry already exists
[03:37:13] <semz> yeah I didn't really look at this from the POV of the average user
[03:37:35] <sm2n> There is nothing stopping this from happening other than interest, and how annoying it is to relink things on the fly on major OS
[03:38:10] <sm2n> There also has to be sufficient incentive to do it (which I do not think exists)
[03:38:16] <semz> Most OSes already do dynamic linking so that probably wouldn't be too much of an issue. Could pregenerate the various .sos
[03:38:39] <sm2n> Yes, but reloading once the program is already open is error-fraught
[03:38:43] <gilberth> Alfr: There are ways around this. You don't need detailed timing information. In the most extreme case a single performance figure might be suffice. Like e.g. Google measures how long you stay on one of its search results. Or shops measure a conversion rate for different web-designs.
[03:38:52] <semz> I still feel obligated to say that if I ever caught a program do this it'd probably land on my shitlist for all time
[03:38:58] <Alfr> sm2n, hot replacing functions?
[03:39:03] * Alfr look at CL.
[03:39:06] <sm2n> semz: Of course
[03:39:15] <sm2n> Alfr: CL is the exception that makes the rule
[03:39:28] <gilberth> All I said is: I could think this could work. Or think Microsoft. Microsoft could implement that easily. Windows updates itself all the time anyway.
[03:40:01] <sm2n> I suppose any software that bundles a separate autoupdater program and does telemetry already has all the infrastructure in place
[03:40:10] <sm2n> So... most major programs people use on windows
[03:41:49] <gilberth> Yes, and most people don't care at all.
[03:41:58] <sm2n> gilberth: Good thing you don't work for Google, or it's entirely possible that Chrome could be doing this already
[03:42:18] <gilberth> The other could turn to open software. Nothing new actually.
[03:42:30] <Alfr> gilberth, so randomly generate and dish out binaries, let them run some benchmark, collect some aggregated statistics and then feed this data into a machine learning algorithm? And after you've collected sufficiently many samples, hope that you can query the model for an optimal compilation strategy?
[03:43:11] <sm2n> I could see this plugging into the nix/guix build cache
[03:43:38] <sm2n> You just have to specify the permutation as part of the build, and then people can opt into it
[03:44:01] <sm2n> It's not a huge issue if builds remain reproducible, and people audit them sufficiently often
[03:44:15] <gilberth> Alfr: That's the idea. Just like Google applies noise to its search result ordering. Or Youtube does with recommendations, or Amazon does with web-design shipping differently coloured buttons, placed buttons, etc. Tweak a bit and measure how successful that is.
[03:44:45] <sm2n> You would have to do some work on where telemetry is actually desirable though, probably on a per-application basis
[03:45:16] <sm2n> (I don't see myself opting into sending telemetry though)
[03:46:33] <gilberth> Software telemetry already exists. Even in debian with its opt-in popularity contest. Firefox also asked me if it may send some statistics. Steam does it.
[03:47:23] <sm2n> Yeah, I explicitly avoid or turn all of that off on my devices.
[03:47:32] <gilberth> With all those cloud applications, telemetry is right there all the time.
[03:48:20] <gilberth> sm2n: That's fine. I don't like that either nor do I advocate that. E.g. I would never trust an Android phone here.
[03:49:28] <gilberth> All I say is that I believe that software vendors could optimize their software that way. With millions, if not billions of copies run worldwide on a variety of devices.
[03:50:08] <sm2n> Big Data Profile Guided Optimization
[03:50:23] <gilberth> :)
[04:31:57] * hayley uploaded an image: (439KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/mcWaOhohnDivDosFwGQDnrnn/gm_eagconstruct_v20005.jpg >
[04:31:59] * hayley at metaverse Walmart, anyone want anything
[04:36:41] * selwyn can't compete with the metaverse hot dogs
[04:37:02] <selwyn> it's over for the little guy
[04:39:55] <sm2n> https://meatverse.dev/
[04:39:56] -ixelp- meat
[04:40:42] <hayley> Someone thought to make the computer cases in gmod break when they catch fire, and there are even hard drive gibs.
[04:41:23] <drakonis> the zuck has been getting chonkyy
[04:41:58] <selwyn> i thought he was losing weight last time i saw
[04:42:47] <sm2n> We are talking about Meat Chonkerberg
[04:46:57] * gilberth notes that "Zuckerberg" means "Mountain of sugar".
[04:47:53] <gilberth> Or pile.
[04:49:53] <hayley> selwyn: Here you go
[04:49:55] * hayley uploaded an image: (459KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/texcIsXOUoWxzZrJIAtdLnhK/gm_eagconstruct_v20008.jpg >
[04:50:37] <sm2n> could I get a solaris
[04:50:57] <drakonis> that's hot!
[04:57:43] <GreaseMonkey> i wonder what the oldest metaverse would be, i suspect it would be whatever the heck that variant of a MUD is
[04:57:43] <GreaseMonkey> a mush
[04:57:44] <drakonis> moo?
[04:57:44] <drakonis> hellomoo or something?
[04:57:44] <selwyn> hayley: incredible
[04:57:44] <drakonis> hellmoo
[04:57:44] <sm2n> also, habitat
[04:57:44] <selwyn> i love to cook them on an open flame, gives the buns a  tasty black char
[04:57:44] <sm2n> the I think MUD is the earliest
[04:57:44] <sm2n> MOO literally means MUD, object oriented
[04:57:44] <sm2n> it came later
[04:57:44] <sm2n> about a decade later in fact
[04:57:44] <sm2n> Richard Bartle brags about it a lot in his books
[04:57:44] <drakonis> neat
[04:57:44] <drakonis> i didn't know that's what it meant
[04:58:05] <sm2n> they can be pretty insufferable to read, though there are interesting things to learn there
[04:59:00] <sm2n> If you're interested in this stuff, go read Designing Virtual Worlds, and Habitat Chronicles
[04:59:20] <sm2n> there is actually quite a bit of interesting computing history there
[04:59:52] <sm2n> for example, capability based security, distributed objects, all come up
[05:05:10] <Alfr> gilberth, I think "mountain" is good, unless you're into miniatures.
[05:09:28] <selwyn> the last surviving mud will be that furry scripting backend the web company has to use
[05:10:25] <gilberth> Alfr: Well, mountain is the literal meaning. But you also could use "Berg" in to refer to a pile of things in metaphorical speaking. When I think of "Zuckerberg" I think of "A [huge] pile of sugar", like I do with "Wäscheberg" = "A pile of clothes".
[05:15:21] *** Joins: notzmv (~zmv@user/notzmv)
[05:18:10] <Alfr> I yield.
[05:22:25] <selwyn> https://news.ycombinator.com/item?id=29777336
[05:22:25] -ixelp- You can do that in almost any language, though. There was a furry who worked as ... | Hacker News
[05:22:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:26:22] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[05:27:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[05:27:43] <epony> so, which is it then, feceberg or fakebulk
[05:30:12] <semz> selwyn: what the fuck
[05:38:59] <selwyn> hilarious
[05:41:01] *** Quits: wheelsucker (~user@2600:8801:8c26:7f00::2f04) (Read error: Connection reset by peer)
[05:41:14] *** Joins: wheelsucker (~user@2600:8801:8c26:7f00::2f04)
[06:23:33] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[07:02:20] <hayley> https://www.youtube.com/watch?v=eszZfu_1JM0
[07:02:20] -ixelp- David Bowie - Look Back In Anger (Official Video) - YouTube
[07:13:44] <sm2n> woah, <https://github.com/golang/go/issues/19623#issuecomment-1003787340>
[07:13:45] -ixelp- proposal: spec: change int to be arbitrary precision · Issue #19623 · golang/go · GitHub
[07:13:59] <sm2n> they are learning?
[07:14:57] <hayley> BIGNUM Strikes Again
[07:15:11] <hayley> https://www.youtube.com/watch?v=u-JDl5IeDIY
[07:15:12] -ixelp- Bigmouth Strikes Again (2017 Master) - YouTube
[07:28:29] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:29:44] <dave0> maw
[07:29:52] <ck_> hez
[07:30:03] <dave0> hi ck_ 
[07:31:01] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[07:31:30] <ck_> tell me a nice story. what's the temperature where you are?
[07:31:32] *** Joins: rogersm (~rogersm@90.166.180.250)
[07:32:07] <dave0> it's warm
[07:32:16] <dave0> i got back from my walk and i'm sweating
[07:32:28] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[07:32:30] <dave0> cool story
[07:32:51] <moon-child> ck_: it's freezing
[07:32:52] *** Joins: rogersm (~rogersm@90.166.180.250)
[07:32:58] <moon-child> my dishsoap congealed
[07:33:15] <moon-child> and I had to walk through the snow to get to the grocery store
[07:33:19] <ck_> moon-child: yes it is, but I asked australia because I wanted to imagine
[07:33:32] <moon-child> too bad
[07:33:41] <moon-child> you get to hear about canada :)
[07:33:44] <ck_> why is it too bad?
[07:35:14] <moon-child> you used words such as 'but', 'I wanted', and 'nice story' which indicate disappointment
[07:36:00] <sm2n> Wow I was not expecting another canadian here
[07:36:12] <sm2n> moon-child: I am getting increasingly disturbed
[07:36:14] <moon-child> sm2n: sup ;o
[07:36:24] <moon-child> sm2n: I know, right?  Tell me you're at least not in vancouver
[07:36:31] <sm2n> no, thankfully
[07:36:34] <ck_> the 'but' referred to the earlier part of the sentence, and the temperature over here. nothing else
[07:37:48] <ck_> is this an accurate representation of you two then? https://www.youtube.com/watch?v=Nr_TKlXf344
[07:37:48] -ixelp- Welcome to Hoth. First time? - YouTube
[07:40:10] <sm2n> nah, everything is within walking distance here
[07:41:07] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:54:01] *** Joins: semz (~none@user/semz)
[08:03:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Killed (NickServ (GHOST command used by dave69)))
[08:04:00] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:06:53] <ck_> I see. so this must be dave0s mood https://i.pinimg.com/originals/8e/af/27/8eaf279d02d983cf3deee2523c437314.gif
[08:14:09] <dave0> far out
[08:14:29] <dave0> where'd you find that? he looks comatose
[08:16:25] <moon-child> https://www.smbc-comics.com/comics/164140554220220105after.png
[08:16:29] <moon-child> god plays dice with the universe
[08:52:42] <hayley> gilberth: I get 2.86 Gchar/s using SIMD to handle loops in the DFA.
[08:52:47] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[08:54:35] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:55:44] <gilberth> hayley: For [0-9]+x[0-9]+ ?
[08:55:49] <hayley> Yes.
[08:56:27] <gilberth> I have seen 2.8GC/s w/o SIMD with gcc.
[08:56:44] <hayley> You unrolled, right?
[08:57:04] <gilberth> Yes, fourfold.
[08:57:59] <gilberth> And I keep a lookahead char.
[08:58:26] * hayley wonders if it'd be better with a 256-bit vector unit, rather than a Z80.
[09:00:11] <gilberth> That is I say ch = la; la = *p++; if (ch > .. ) ...; // This buys a bit of speed.
[09:00:16] <hayley> Currently I just have https://github.com/telekons/one-more-re-nightmare/blob/simd-loops/Code/SIMD/loop.lisp
[09:00:17] -ixelp- one-more-re-nightmare/loop.lisp at simd-loops · telekons/one-more-re-nightmare · GitHub
[09:00:29] <hayley> I see, yes.
[09:02:11] <hayley> .oO("4x faster than Rust regex means you haven't started optimising.")
[09:03:01] <moon-child> still only halfway to memory saturation
[09:03:38] <gilberth> How about to throw more cores at it?
[09:04:04] <moon-child> just how large of a file are you grepping?
[09:04:09] <gilberth> Anyhow, I doubt SIMD would buy me much with a scanner.
[09:04:43] <moon-child> gilberth: didn't you suggest it could be worthwhile for e.g. comments, strings, symbols?
[09:05:14] <moon-child> 'is any of the next n characters a "/\n/separator?  No, skip all of them'
[09:06:36] <gilberth> moon-child: We see. Depends on the setup costs to get into SIMD. And the overshoot. I mean, I assume to multiple characters are processed at a time with SIMD, aren't they?
[09:08:19] <moon-child> overshoot is negligible, probably.  I mean, the whole point of simd that actually doing the work is cheap; the problem is figuring out what work you have to do and how the different things you work on relate to each other
[09:09:15] <moon-child> I bet it's worth it for comments, at the very least.  Symbols, strings, numbers are frequently pretty short
[09:09:22] <gilberth> Well, can SIMD prioritize one of my IF branches? Can it do a binary search?
[09:10:41] <gilberth> moon-child: For a JSON pissing contest, string literal parsing time is a thing. But then you need to do hashing, too.
[09:11:39] <gilberth> But as one of professors at uni kept saying: You win, when you don't interleave scanning work with parsing work.
[09:12:20] <gilberth> This was true, even with single-CPU^Wcore systems.
[09:13:06] <moon-child> binary search: sure
[09:13:49] <moon-child> prioritise one if branch: better, it can do multiple if branches at once :D
[09:14:11] <gilberth> Yeah, and that is superfluous work.
[09:14:29] <moon-child> why?
[09:15:06] <gilberth> Anyhow, prioritizing buys me nothing. Binary search is faster even for a small set of classes to discriminate upon.
[09:15:32] <gilberth> moon-child: You said "multiple if branches at once". That's more than one branch.
[09:15:59] <moon-child> sure.  But that doesn't mean it's slower
[09:16:34] <gilberth> Or put otherwise: O(log n) is better than O(n) the larger n gets.
[09:17:13] <moon-child> you're still only checking O(1) branches at a time.  And you can still binary search.  So I don't see the problem
[09:17:25] <gilberth> SIMD pushes the break-even further up, as it need less time for one operation.
[09:18:35] <gilberth> moon-child: I don't see how you could run multiple binary searchs in parallel with SIMD. Without doing work for the non-taken part, that is.
[09:19:02] <gilberth> But perhaps there are clever tricks.
[09:26:26] <moon-child> hmm, I think you may be right.  You can flatten the tree a bit.  But I don't think that actually nets you fewer branches
[09:31:44] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[10:11:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:36:31] <moon-child> https://www.reddit.com/r/lisp/comments/rw4qv1/delivering_an_application_in_cl_wo_source/hraf7d5/  poor stassats
[10:36:32] -ixelp- Delivering an application in CL w.o. source : lisp
[10:40:13] <sm2n> what does this have to do with stassats?
[10:41:02] <moon-child> https://i.redd.it/b8g4jihu4gx71.png
[10:42:41] <sm2n> hahahaha
[10:51:50] <sm2n> but... embedded 32bit arm boards have enough ram to spare for sbcl?
[10:52:08] <sm2n> I thought they were usually unnecessarily constrained
[11:05:20] <hayley> They do, but no one wants to work on threads on 32 bit ARM.
[11:26:01] <sm2n> oh, actually I use threads on armhf, but with ecl
[12:21:42] *** Quits: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr) (Read error: Connection reset by peer)
[12:23:32] *** Joins: notzmv (~zmv@user/notzmv)
[12:38:40] <epony> nor with threats in 3 AM
[12:39:45] <epony> or alarm v6 as they are colloquially called
[12:42:39] <epony> SBSAv6 when?  https://en.wikipedia.org/wiki/Server_Base_System_Architecture
[12:45:24] <epony> https://en.wikipedia.org/wiki/ARM_architecture#64/32-bit_architecture
[12:49:10] <epony> they lack mmu/mmio but you lack processes so.. best-in-show
[12:52:47] *** Joins: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr)
[13:06:01] <pl> sm2n: also, there's issue of what arm32 actually means... Cause Cortex-R is listed as ARM and can have substantial resources, but AFAIK is Thumb-only 
[13:09:02] <hayley> https://twitter.com/nodefunallowed/status/1479024641049968646
[13:12:06] * hayley replaces "days since hayley linked Henry Baker" sign
[13:17:40] <dave0> anonymous has a point
[13:17:55] <dave0> things got spectacularly slow
[13:19:08] <dave0> also
[13:19:14] <dave0> baker from the garbage collector?
[13:19:22] <hayley> Right.
[13:19:42] <hayley> https://plover.com/~mjd/misc/hbaker-archive/letters/CACM-DubiousAchievement.html is a classic, and https://plover.com/~mjd/misc/hbaker-archive/letters/CACM-FactoringRedundancy.html also mostly on point.
[13:19:43] -ixelp- "Dubious Achievement", Comm. of the ACM 34, 4 (April 1991), 18.
[13:21:09] <hayley> (But I disagree with Henry that "reusability requirements" decrease reliability. At worst, attributing any reduced reliability to reuse is shooting the messenger, would someone exercise different code paths in a given module. Then the module is broken, not the idea of reuse IMO.)
[13:40:38] *** Joins: kevingal (~quassel@37.228.202.92)
[13:50:07] <MichaelRaskin> hayley: resuability prompts you to extend spec beyond where you have ready guidance from current application for deciding on specifying corner cases, though
[13:50:32] <hayley> Sure.
[13:54:00] <hayley> But you could have the same issue with one application, if you find you need to change your use of the module too.
[13:56:52] <MichaelRaskin> You have better chances to respec properly
[13:57:13] <MichaelRaskin> Not a guarantee, sure, but somewhat better chances
[13:58:33] <hayley> Also true. But corner cases should fail by ASSERT, in the style of the start of Factoring Redundancy.
[14:00:25] <MichaelRaskin> That assumes you have succeeded to specify those corner cases correctly
[14:01:01] <hayley> Touche.
[14:07:28] <ck_> neat visualization -- https://covid19.colorado.gov/data ("Overall Proportion ov Variants of Concern")
[14:07:29] -ixelp- COVID-19 data | Colorado COVID-19 Updates
[14:36:57] *** Quits: wheelsucker (~user@2600:8801:8c26:7f00::2f04) (Ping timeout: 240 seconds)
[15:08:36] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:42:53] <selwyn> til about fcc frequency auctions
[15:43:39] <selwyn> disappointed they are not conducted by a man with a hammer in a packed hall of engineers
[15:45:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:50:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[16:07:45] <ck_> yeah that was a big deal for 5g in the eu a while back, wasn't it
[16:09:37] <ck_> the german agency in charge of it reports, for an auction in 2019 and frequencies in the band 2GHz .. 3.6GHz: "Die Auktion endete nach 497 Runden bei 6.549.651.000 €."
[16:09:40] <ck_> 'easy money'
[16:28:50] <selwyn> https://www.youtube.com/watch?v=ULeDlxa3gyc
[16:28:51] -ixelp- Harry Enfield - Loadsamoney (Doin' Up the House) - YouTube
[16:33:42] <ck_> lol
[16:34:44] <ck_> 2 second abba sample, probably cost lods of emone as well
[16:42:00] <selwyn> it certainly did
[16:58:26] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:58:43] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[17:03:19] *** Joins: treflip (~user@user/treflip)
[17:51:02] *** Joins: Darzen (~Darzen@2600:6c5e:2b7f:a3cd:946d:73cb:4e37:8f8b)
[18:11:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:16:31] <dave0> nite all
[18:17:50] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:20:55] <Alfr> Good morning.
[18:26:33] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:32:21] <ck_> how are you doing
[18:34:11] <Alfr> ck_, I'm fine, thank you.
[18:34:19] <Alfr> ck_, what about you?
[18:34:57] <ck_> "weary, but not hopeless"
[18:35:07] <Alfr> of?
[18:35:24] *** Quits: Darzen (~Darzen@2600:6c5e:2b7f:a3cd:946d:73cb:4e37:8f8b) (Ping timeout: 268 seconds)
[18:35:47] <ck_> it's just a general feeling, nothing specific I could address. Waiting on spring I guess
[18:35:58] <ck_> which hemisphere are you on?
[18:36:02] <selwyn> we can agree that google search is not what it used to be but i feel youtube search is similarly declining without comment
[18:36:37] <Alfr> ck_, the one where it's currently cold.
[18:36:42] <ck_> yeah, me too
[18:46:28] <selwyn> #lispcafe has good southern hemisphere representation
[18:50:16] <White_Flame> needs moar antarctica tho
[18:51:00] <ck_> .. while they're still alive! (horror movie acoustic sting)
[19:51:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[19:53:16] <drakonis> southern hemisphere representation you say?
[20:03:23] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 256 seconds)
[20:05:06] <ck_> metal gear??
[20:14:06] <ck_> drakonis: so, will you be needing that sun for much longer?
[20:15:25] <drakonis> maybe
[20:23:48] <ck_> how is aequatorial representation in here?
[20:25:11] <Alfr> Almost certainly zero.
[20:37:30] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a965:2f8a:47ef:cba2)
[20:41:39] <ck_> sometimes loke is in here
[20:45:57] <Alfr> ck_, I highly doubt that he directly lives on the equator.
[20:46:03] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[20:47:55] <ck_> ? he lives in singapore, is that not close enough
[20:49:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[20:51:33] <ck_> or maybe you're saying he's not a zero-width person living on a mathematical line,
[20:51:38] <ck_> and we may never know
[20:52:11] <Alfr> Yeah, something like that.
[20:53:00] <ck_> how do you find out if people you're talking to are in a compatible mood to yours? impossibru
[20:54:16] <Alfr> ck_, just assume they're not?
[20:55:37] <ck_> yes. but that's not really an answer to the question
[20:56:42] <Alfr> ck_, was that a general question or were you specifically asking me?
[20:57:11] <ck_> it was a rethorical question
[20:57:27] <Alfr> ... and there's that. ;)
[21:04:31] <moon-child> 'All long-lived programs are either implemented in dynamic languages,1 or eventually Greenspun themselves into subverting static programming languages to create a dynamic system (e.g., Unix process trees). The latter approach isn’t a bad idea'
[21:04:45] <moon-child> PILLOW
[21:05:57] <ck_> hmm.
[21:06:02] * ck_ .oO( amibiosornot.com )
[21:36:25] *** Joins: aeth_ (~aeth@user/aeth)
[21:36:30] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[21:36:33] *** aeth_ is now known as aeth
[21:46:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[21:50:38] *** Joins: epony (epony@user/epony)
[22:16:17] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:35:57] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:35:57] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[22:38:05] *** Quits: jmorrison_ (~jm@pool-74-104-177-164.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[22:42:07] *** Quits: aeth (~aeth@user/aeth) (Quit: Reconnecting)
[22:42:18] *** Joins: aeth (~aeth@user/aeth)
[22:53:26] *** Joins: aeth_ (~aeth@user/aeth)
[22:53:42] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:53:47] *** aeth_ is now known as aeth
[22:59:13] *** Joins: notzmv (~zmv@user/notzmv)
