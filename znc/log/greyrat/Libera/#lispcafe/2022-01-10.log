[00:07:35] *** Joins: dra (~dra@2a04:4540:6400:2900:f9af:31e3:2a01:bf6b)
[00:07:37] <dra> Hello!
[00:47:14] <hayley> https://www.youtube.com/watch?v=2YHU4Z_oOz0
[00:47:14] -ixelp- Slowcar to China - YouTube
[01:03:29] <selwyn> shka: it can happen
[01:06:54] <selwyn> why does it make it hard to connect?
[01:26:41] <White_Flame> Is there any symbolics channel here on libera? #bolix moved to oftc
[01:27:34] <hayley> ##symbolics2 clearly
[01:27:53] <hayley> (It is not)
[01:28:20] <selwyn> the fucker thinks it isn't facebook
[01:33:49] *** Joins: rogersm (~rogersm@90.166.180.250)
[01:37:33] *** Quits: rogersm (~rogersm@90.166.180.250) (Client Quit)
[01:52:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:53:23] *** Quits: dra (~dra@2a04:4540:6400:2900:f9af:31e3:2a01:bf6b) (Quit: Leaving)
[01:53:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:58:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[01:59:02] <hayley> https://www.youtube.com/watch?v=fVmLyladBy8
[01:59:02] -ixelp- How self-powered flashing phone stickers worked (with schematic) - YouTube
[02:21:03] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Ping timeout: 256 seconds)
[02:43:21] <hayley> https://yakshav.es/the-patron-saint-of-yakshaves/
[02:43:21] -ixelp- Donald Knuth - The Patron Saint of Yak Shaves
[02:44:33] <hayley> "The first is LaTeX by Leslie Lamport. Lamport is a very productive researcher, famous for research in formal methods through TLA+ and also known laying groundwork for many distributed algorithms" TLA+ was released in the 90s, and almost everything on temporal logic before then. But sure.
[02:45:46] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[02:47:38] *** Joins: notzmv (~zmv@user/notzmv)
[02:54:32] <pl> what's wrong with the description?
[02:55:44] <hayley> TLA+ is a specification language made in 1999. Lamport was doing research in temporal logic since 1980, and most distributed and concurrent algorithms he made were long before 1999.
[02:56:01] <pl> TLA spans 1990-2002
[02:56:04] <pl> for Lamport
[02:56:29] <hayley> Temporal logic ≠ temporal logic of actions ≠ TLA+. Fun, isn't it?
[02:56:44] <pl> and "laying groundwork for many distributed algorithms" is probably simplest way you can describe his work from 1978-1985 or so
[02:56:53] <pl> (i.e. the stuff he got Turing award for)
[02:57:31] <hayley> Right. But it wasn't "through TLA+" as I read it. That's years too late.
[02:57:45] <pl> hayley: and it wasn't formal methods
[02:58:12] <hayley> The causality arrow is the wrong way around - research in temporal logic led to TLA+, TLA+ didn't lead to research in temporal logic.
[02:58:20] <pl> TLA+ is most known thanks to formal methods, not temporal logic itself, and his pre-TLA work wasn't heavy on formal logic
[02:58:33] <pl> hayley: you're assuming causality arrow where there's none
[02:58:49] <hayley> Well, okay.
[02:58:55] <pl> probably because you know way more than intended recipient of the text, or even the author ;)
[02:59:28] <hayley> Not if I'm claiming things are formal methods when they're not.
[02:59:38] <pl> the average hacker news goer knows TLA+ as part of formal methods thing and might know that it's used extensively at Amazon
[03:00:11] <pl> and TLA+ *is* a formal specification and part of formal methods in general
[03:01:00] <pl> grokking that it involves temporal logic probably starts when people learn to use it ;)
[03:01:19] <hayley> Right.
[03:02:43] <hayley> But I'm pretty sure the motivation for the temporal logic of actions was in failing to use vanilla temporal logic for specifying systems.
[03:02:44] * pl knows the feeling, consider that even well educated people unless they are part of very small minority only ever got "lies to children" version of how a plane flies
[03:08:23] <hayley> I guess I am not too sure of what "formal methods" and "formal logic" refer to here. But e.g. "Sometimes" is Sometimes "Not Never" turns temporal logic into first order logic and sets. 
[03:10:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[03:15:02] <mfiano> I just had to school a Go expert on...Go semantics.
[03:15:13] <mfiano> After using it for a mere few days.
[03:15:28] <hayley> mfiano: Have you seen <https://ijdykeman.github.io/ml/2017/10/12/wang-tile-procedural-generation.html>?
[03:15:29] -ixelp- Procedural Worlds from Simple Tiles
[03:16:10] <mfiano> Yeah
[03:17:00] <mfiano> Wang tile sets are very cool.
[03:17:13] <mfiano> I used Wang 2e2c in a recent procgen demo
[03:19:47] <mfiano> Anyway, it turns out Go has some rather familiar semantics when a variable shadows one of the same name in an outer block. They behave like dynamic variables!
[03:20:33] <mfiano> Sadly though, the specification is too ambiguous in the areas I needed to really drive my proof home.
[03:20:53] <mfiano> But it is clear as day for the 2 implementations of Go.
[03:23:36] <mfiano> In related news, I really like Go, but I no longer have a use for it.
[03:24:34] <mfiano> I wanted to leverages its new generics for something, but it turns out, it is rather limited, and I would have to resort to runtime dispatch and lots of slow type reflection, due to the fact that it doesn't allow parameterization on anything but types.
[03:25:03] <mfiano> Which means nothing like "const generics" in Rust, or the equivalent in C++. You can't be generic over an array's size for example.
[03:25:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:26:58] <drakonis> mfiano: i hear you run freebsd
[03:27:06] <mfiano> Yes
[03:28:05] <drakonis> i'm starting out a guix/nix reimplementation in cl and i plan to make it possible to actually run it in OSes beyond the usual stuff
[03:28:21] <mfiano> I'm not a fan of neither, but good luck.
[03:28:25] <drakonis> i'm not much of a freebsd user to actually make it work properly with it
[03:28:27] <mfiano> either?
[03:28:28] <drakonis> wanted pointers
[03:28:30] <mfiano> (too tired)
[03:28:43] <drakonis> but this is a month in the future at best
[03:28:53] * hayley passes drakonis NULL
[03:29:00] <drakonis> i'm also aiming for uh
[03:29:19] <drakonis> not needing to sacrifice the whole install to have it manage the system
[03:29:35] <drakonis> wanted to make it flexible enough to be used standalone for multiple situations
[03:29:49] <mfiano> I can't really give any advice without more information, and still probably can't, because I stopped caring about Linux a few months ago.
[03:29:50] <drakonis> also linux/mac/windows i guess?
[03:29:55] <drakonis> i see, that's fair
[03:31:58] <mfiano> Catie should be around in here tomorrow. She runs Linux and FreeBSD and might have some ideas.
[03:33:14] <drakonis> why don't you like nix or guix?
[03:33:23] <drakonis> i want to hear about it
[03:34:03] <mfiano> Because it's too much of a hassle to create stateless environments for very stateful things like CL development (among many others).
[03:34:19] <mfiano> and I don't exactly see the benefit when there is ZFS and Boot Environments
[03:34:24] <drakonis> that's something i want to address
[03:35:12] <mfiano> FreeBSD addresses all this better.
[03:35:16] <mfiano> Without the mess.
[03:35:46] <drakonis> you can certainly use them together for deployment
[03:35:54] <drakonis> but sure
[03:36:15] <mfiano> guix/nix is for people that have way too much time on their hands. I'm old and like to get work done, and I get all of their benefits with FreeBSD.
[03:37:36] <drakonis> though the declarativeness is by far the nicest thing
[03:39:31] <mfiano> I'm happy you found something that works for you. And also, good luck with this project of yours!
[03:39:41] <drakonis> thank you
[03:41:12] <mfiano> I told myself I will be getting back to Lisp tomorrow after a long break. Hopefully I don't get distracted.
[03:41:32] <mfiano> and not only Lisp, but graphics development, after a crazy long break.
[03:41:55] <mfiano> It took about 6 months for some inklings to fully form :)
[03:42:43] *** Joins: notzmv (~zmv@user/notzmv)
[03:43:46] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[03:51:18] <drakonis> nice.
[04:13:16] <Aurora_v_kosmose> Huh. Ambrevar's blog is gone. :/ Damn my blog now has deadlinks.
[04:18:07] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[04:21:36] <drakonis> wait, really?
[04:21:51] <drakonis> wonder what happened
[04:22:16] <Aurora_v_kosmose> You and me both.
[04:22:22] <drakonis> https://gitlab.com/ambrevar/ambrevar.gitlab.io/-/commit/dc58a1667b2b06d18ec5c275affd0fd94f0dcd01
[04:22:24] <drakonis> oof
[04:22:50] <Aurora_v_kosmose> It's not the most instructive of commit messages.
[04:23:11] <drakonis> yes.
[04:23:38] <drakonis> well, i kept a clone
[04:24:41] <Aurora_v_kosmose> Yeah, it had been a while since I last pulled though, so I'm glad it was still around in that form.
[04:25:09] <Aurora_v_kosmose> I had interest in it both for its content and for the "how to do make a decent-looking org-mode blog" reference.
[04:40:31] <hayley> https://www.youtube.com/watch?v=cgPe1ZUYR10
[04:40:32] -ixelp- Mustard Sausage - YouTube
[04:44:13] <selwyn> tbh i still don't really understand how planes fly
[04:44:49] <selwyn> i got a basic fluid dynamic explanation of how some airfoils work under simplifying assumptions
[04:45:02] <selwyn> i assume there is yet more to it
[04:46:55] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b923:8538:9f72:8140) (Remote host closed the connection)
[04:49:50] <hayley> gilberth: CS-80 recreation when https://www.youtube.com/watch?v=_poihkLM5Go
[04:49:51] -ixelp- Synth Wizards Episode 9: Holy Grail: The Yamaha CS-80 - YouTube
[04:51:35] <hayley> One clone: "The DIY kit can be picked up for as little as $349 (increasing to $999) and the fully assembled version for $1,199 USD, which will increase to a total price is $3749 with a free worldwide shipping."
[04:51:38] <hayley> Must be a lot of soldering.
[05:04:00] <hayley> The site said $999 DIY or $1,199 assembled. Oh well. 
[05:05:47] <gilberth> hayley: Does it run Lisp? And what makes you believe that this is a lot of soldering? How many joints would that be?
[05:07:42] <hayley> It's a synthesizer, and the original CS-80 had 16 oscillator daughterboards.
[05:08:34] <selwyn> many dollaridoos
[05:11:11] <selwyn> gilberth: but can it run crysis
[05:12:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f755:55d9:216b:76f6) (Ping timeout: 240 seconds)
[05:44:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[05:45:24] <hayley> It can only run Blade Runner.
[05:45:33] <hayley> https://en.wikipedia.org/wiki/Blade_Runner_(1997_video_game)
[05:48:57] <contrapunctus> lol
[05:52:21] <hayley> https://twitter.com/Riv_Incognito/status/1480038669549457411 "That's 65% more bullet per bullet!"
[05:55:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:56:22] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[06:01:32] *** Joins: sunarch (uid526836@user/sunarch)
[07:02:11] <gilberth> hayley: Would you be so kind and test that Rust RE engine with "(a|ab)(ba|a)" on "aba"?
[07:02:38] <hayley> What are you expecting? It to work?
[07:02:58] <gilberth> I want to see what semantics they implement.
[07:03:42] <drakonis> has burntsushi actually replied?
[07:03:48] <hayley> Nope.
[07:04:02] <drakonis> wow
[07:04:15] <drakonis> what a disappointment
[07:04:33] <gilberth> This is my litmus test for POSIX versus Perl semantics.
[07:04:50] * hayley waits for cargo build to rebuild everything.
[07:05:17] <hayley> gilberth: Some(Captures({0: Some("aba"), 1: Some("a"), 2: Some("ba")}))
[07:05:26] <gilberth> \1 = (0,2) => POSIX; \1 = (0,1) => Perl
[07:06:04] <gilberth> So it's not POSIX. Or broken, glibc fails here, too.
[07:06:06] <hayley> Perl of course.
[07:07:09] <gilberth> I'll extract the cases, where PCRE differ from POSIX. We could see, if it is at least consistent or just buggy as glibc.
[07:07:09] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Quit: Quit)
[07:07:24] <gilberth> libpcre is correct by definition.
[07:08:25] <hayley> An excellent definition.
[07:08:54] <gilberth> re2 has a POSIX option. But it still has odd semantics and does not even adhere to the POSIX syntax.
[07:10:09] <gilberth> hayley: To be fair, within the Perl documentation, you find a proper specification of the PCRE semantics.
[07:28:37] <hayley> https://www.youtube.com/watch?v=hsZqXdPZb8s
[07:28:38] -ixelp- Tomita Planets - Mars, The Bringer of War - YouTube
[07:31:05] <contrapunctus> https://jabjab.de:5443/upload/a75f5b15713067434614f6d0c986f536c301cf7e/gpeDF8Z0xIXgXuJ0W84mf8vXBFlkXYowHN7ItwY9/hYgSpWMkSwK5lRTuxKpuNg.jpg
[07:31:16] <contrapunctus> hayley: Unixheads and cat-v.orgists be like ^
[07:31:50] <contrapunctus> .o(and suckless, and ...)
[07:34:59] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:37:05] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:42:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:49:45] *** Joins: semz (~none@user/semz)
[07:58:31] *** Joins: notzmv (~zmv@user/notzmv)
[07:59:25] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[07:59:48] *** Joins: johnjaye (~pi@154.6.152.74)
[08:55:29] <moon-child> java valhalla thingy: 'it was not yet [in 1995] known how to get away with “everything is an object” and still offer reasonable numeric performance'
[08:55:53] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[08:56:21] <hayley> What no Craig Chambers PhD thesis does to a mf
[08:56:49] <hayley> (Alternately, Spice Lisp or something similarly olde with numerics)
[09:03:02] *** Joins: Alfr (~Alfr@user/alfr)
[09:03:22] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:05:19] <Aurora_v_kosmose> Ambrevar seems to still be active going by their gitlab activity
[09:05:25] <Aurora_v_kosmose> Most curious
[09:07:38] *** Joins: Alfr (~Alfr@user/alfr)
[09:08:23] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:15:22] <hayley> "Nix is a giant step forward in operating system research. Not only does it address most of the criticism of Unix (including those found in the Unix Haters Handbook)..." -- ambrevar
[09:15:25] <hayley> A most interesting quote.
[09:53:48] <gilberth> Somehow, I have the feeling that most people implementing REs implement something which reports just any random match, not caring for which match they report.
[09:54:37] <gilberth> And I wonder, whether the Perl semantics are an accident.
[09:55:36] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:56:50] <gilberth> More homework for me. I ought to figure out how EcmaScript's RE's are specified.
[09:57:21] <moon-child> when a grammar has the potential to match multiple matches, that is called ambiguous
[09:57:30] <moon-child> perhaps people approach regex the same way
[09:58:39] <gilberth> moon-child: The grammar might be ambiguous, but both POSIX and Perl specify exactly and precise, which of the multiple possible matches are to be reported.
[10:00:12] <moon-child> yes, I understand.  Just providing a potential reason why implementations behave the way they do
[10:00:37] <dave0> maw
[10:01:31] <gilberth> Yeah, this is my point. Some behave so random, that it is hard to tell, if that are bugs or not. You can tell, when the library documents its semantics, but many don't.
[10:02:00] <gilberth> dave0: Hello dave0!
[10:02:13] <dave0> hey gilberth :-)
[10:04:55] <gilberth> lex(1) for instance also is well defined. Granted, it has no submatch addressing, but ambiguous matches still arise as you match many REs in parallel. It won't be a proper tool for writing a scanner for some programming language, when the resulting programming language would depend on the mood of whoever implemented your lex(1).
[10:06:53] <gilberth> [lex(1) also has this "trailing context", which nobody besides me ever implemented correctly. Doesn't change that it is specified.]
[10:21:20] <gilberth> moon-child: It's a little different with REs as with grammars. Say you want to match either "[0-9]+" or "[0-9A-F]+h", that is a decimal number or a hexadecimal number with a 'h' suffix. It's useful to have specified semantics here to have the "[0-9A-F]+h" to match when the input is "1234h". With POSIX you could say "[0-9]+|[0-9A-F]+h", the longest match win. Do the same with Perl, you get a match for only "1234".
[10:22:35] <hayley> https://www.youtube.com/watch?v=1r9lSa_9TKg
[10:22:36] -ixelp- Sherlock Holmes - YouTube
[10:22:38] <gilberth> You often face pattern like this and perhaps tweak it until it magically works. Replace the RE engine, which doesn't care at all about semantics, your code may break all of the sudden.
[10:22:48] * moon-child nods
[10:29:58] <gilberth> Furthermore, I believe that most people seek PCRE for all the syntactic sugar and not for the semantics. The latter I of which I kind of dispise personally.
[10:32:54] <hayley> Hm. I guess as I'm not planning on doing a PCRE implementation, I can close the issue someone made?
[10:33:45] <hayley> OTOH they just asked for "CL-PPCRE compatible functions" and I don't really have an opinion on how the interface to DFAs should work.
[10:34:29] <gilberth> Begins with that the CL-PPCRE API is not particular good.
[10:35:52] <gilberth> I mean, why passing vectors back, when we have multiple values?
[10:37:42] <gilberth> It's dangerous business anyway, as it won't be a drop-in replacement anyway.
[10:37:48] <hayley> You only get multiple value lists if you want to jam things into a sequence for later use.
[10:38:32] <gilberth> ?
[10:38:43] <hayley> brb, dinner.
[10:41:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:46:59] <hayley> Back.
[10:47:55] <dave0> hayley: i had quiche for dinner!
[10:48:16] <hayley> So, CL-PPCRE and one-more-re-nightmare call a "continuation" function with a match. The former is all CPS, due to naively running regular expressions, whereas the latter calls a function for each match. (I never found a reason to do anything more specialised.)
[10:48:19] <hayley> dave0: I had some pie.
[10:48:30] <dave0> hayley: nice
[10:49:11] <gilberth> hayley: Oh, we are concerned about the colour of functions again.
[10:49:26] <hayley> Each interface function like FIRST-MATCH or ALL-MATCHES has a specific continuation function. The former just does (return-from first-match match-vector), whereas the latter cooks up a list of matches. By using a result vector, this design is "polymorphic" over the number of submatches.
[10:50:04] <hayley> How would I achieve it with multiple values? Either I'd need a specific function per submatch count (probably not that bad, admittedly), or I'd need MULTIPLE-VALUE-LIST, VALUES-LIST, that sorta thing, and we'd be consing up crap again.
[10:50:33] <hayley> gilberth: Not really. The code I generate is basically a MAP-RESULTS function.
[10:50:57] <gilberth> hayley: You compile your DFA, don't you?
[10:51:04] <hayley> Yes.
[10:51:18] <gilberth> And, where is the problem then?
[10:52:01] <hayley> Continuation functions are not specialised to the number of submatches used, so I can't use multiple values without consing up some more crap.
[10:52:51] <gilberth> I don't get you. Why not just call the continuation with all the start/end positions as arguments?
[10:53:39] <hayley> That's what I did when I didn't have submatching. But now I do have submatching, and then the argument count would be variable if I included registers as arguments.
[10:54:12] <gilberth> And? What is the problem with a variable argument count? CL supports that fine.
[10:54:23] <hayley> &rest conses up a list.
[10:54:56] <gilberth> I don't need to use &rest.
[10:55:56] <hayley> ...well, the same also goes for returning multiple values from your matcher function, I can't remember what your calling convention is like. But then, what should ALL-MATCHES do? It ends up making a sequence of something representing each match.
[10:55:58] <gilberth> I mean, when I write some program and want to seek for ([0-9]+)x([0-9]+), I know exactly how many subgroups there are.
[10:56:44] <gilberth> hayley: Well, when I want ALL-MATCHES, just call my continuation. It's then my consing, not yours.
[10:57:11] <hayley> So I'd need to specialise the interface functions (to some extent) to handle a specific number of subgroups. Sure.
[10:58:25] <gilberth> But then I am not a greper, I want to use REs to inspect if some string matches some RE (anchored most of the time) and extract parts. Those are strings are small and the overhead becomes important, too.
[10:59:17] <gilberth> hayley: You don't need to specialize anything. Just put (FUNCALL CONT <register-1> ... <register-n>) in there and you are set.
[10:59:30] <hayley> What should the continuation be then?
[10:59:49] <gilberth> Whatever the user wants to do with the match.
[11:00:09] <hayley> ok, the user provides a continuation. I don't really have that.
[11:00:23] <hayley> The closest is DO-MATCHES, but that destructures the vector.
[11:01:30] <pl> hayley: pretty sure SPICE Lisp didn't do any OOP for numerics? 
[11:01:34] <gilberth> Or for single match, I find it more convenient to say (multiple-value-bind (start end width-start width-end height-start height-end) (match "([0-9]+)x([0-9]+)" string) (when start ....)) than to poke at it with AREF.
[11:02:24] <hayley> pl: Still, numbers were uniformly "objects" and didn't have their own type or anything.
[11:02:41] <hayley> I don't think there was any CLOS, looking through the archive.
[11:02:50] <gilberth> More convenient still is: (with-match ((and (= width "[0-9]+") "x" (= height "[0-9]+") string) #| width, height here bound to the match |# ...)
[11:03:28] <pl> Well, I haven't looked in the source, but the descendant code doesn't seem to have much OOP there 
[11:05:40] <gilberth> Or if you prefer Perl syntax: "(?<width>[0-9]+)x(?<height>[0-9]+)" Or just plain "([0-9]+)x([0-9]+)" and go with $1 and $2 being bound to the submatches.
[11:14:07] <gilberth> But then my application is not wading hay but turning some string into some data which makes sense and perhaps validate the input.
[11:39:31] *** Quits: johnjaye (~pi@154.6.152.74) (*.net *.split)
[11:39:31] *** Quits: makomo (~makomo@user/makomo) (*.net *.split)
[11:39:31] *** Quits: amazigh (~amirouche@user/amirouche) (*.net *.split)
[11:39:32] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[11:39:32] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[11:39:32] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (*.net *.split)
[11:39:32] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (*.net *.split)
[11:39:33] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[11:39:33] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[11:39:33] *** Quits: nworb (~zbrownm]@2001:470:69fc:105::1:33db) (*.net *.split)
[11:39:33] *** Quits: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com) (*.net *.split)
[11:39:34] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[11:39:34] *** Quits: hayley (~theemacss@user/hayley) (*.net *.split)
[11:39:34] *** Quits: iquites (sid77830@id-77830.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: gko (~user@user/gko) (*.net *.split)
[11:39:35] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[11:39:35] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[11:39:36] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[11:39:36] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[11:39:36] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[11:39:36] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[11:39:37] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[11:39:37] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[11:39:37] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[11:39:37] *** Quits: sp (~sp@user/susam) (*.net *.split)
[11:39:39] *** Quits: sirufer (68f46fc7c3@user/sirufer) (*.net *.split)
[11:39:39] *** Quits: mala (~mala@user/malaclyps) (*.net *.split)
[11:39:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[11:39:40] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[11:39:40] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[11:39:40] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[11:39:40] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[11:39:40] *** Quits: susam (~susam@user/susam) (*.net *.split)
[11:39:41] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[11:39:41] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[11:39:41] *** Quits: epony (~epony@user/epony) (*.net *.split)
[11:39:41] *** Quits: kakuhen (~kakuhen@user/kakuhen) (*.net *.split)
[11:39:42] *** Quits: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[11:39:42] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[11:39:42] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[11:39:42] *** Quits: APic (apic@apic.name) (*.net *.split)
[11:39:42] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[11:39:42] *** Quits: drakonis (drakonis@user/drakonis) (*.net *.split)
[11:39:42] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[11:39:42] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[11:39:43] *** Quits: eschaton (~eschaton@li541-49.members.linode.com) (*.net *.split)
[11:39:43] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[11:39:43] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[11:39:43] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[11:39:44] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[11:39:44] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[11:39:45] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[11:39:45] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[11:51:58] *** Joins: shka (~herr@109.231.0.226)
[11:51:58] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[11:51:58] *** Joins: johnjaye (~pi@154.6.152.74)
[11:51:58] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[11:51:58] *** Joins: amazigh (~amirouche@user/amirouche)
[11:51:58] *** Joins: aeth (~aeth@user/aeth)
[11:51:58] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[11:51:58] *** Joins: sp (~sp@user/susam)
[11:51:58] *** Joins: epony (~epony@user/epony)
[11:51:58] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[11:51:58] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[11:51:58] *** Joins: hayley (~theemacss@user/hayley)
[11:51:58] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:51:58] *** Joins: sepanko (~sepanko@user/sepanko)
[11:51:58] *** Joins: nworb (~zbrownm]@2001:470:69fc:105::1:33db)
[11:51:58] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[11:51:58] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[11:51:58] *** Joins: minion (~minion@common-lisp.net)
[11:51:58] *** Joins: mzan (~quassel@mail.asterisell.com)
[11:51:58] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[11:51:58] *** Joins: elflng (~elflng@5.28.137.182)
[11:51:58] *** Joins: lonjil (~quassel@user/lonjil)
[11:51:58] *** Joins: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com)
[11:51:58] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[11:51:58] *** Joins: gko (~user@user/gko)
[11:51:58] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[11:51:58] *** Joins: mala (~mala@user/malaclyps)
[11:51:58] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[11:51:58] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[11:51:58] *** Joins: susam (~susam@user/susam)
[11:51:58] *** Joins: zacts (~zacts@user/zacts)
[11:51:58] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[11:51:58] *** Joins: sm2n (ae95cb1267@user/sm2n)
[11:51:58] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[11:51:58] *** Joins: easye (~user@oxi.slack.net)
[11:51:58] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[11:51:58] *** Joins: trn (jhj@sourcehut/user/trn)
[11:51:58] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[11:51:58] *** Joins: selwyn (~selwyn@user/selwyn)
[11:51:58] *** Joins: taeaad (~taeaad@user/taeaad)
[11:51:58] *** Joins: copec (~copec@schrodbox.unaen.org)
[11:51:58] *** Joins: APic (apic@apic.name)
[11:51:58] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[11:51:58] *** Joins: drakonis (drakonis@user/drakonis)
[11:51:58] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[11:51:58] *** Joins: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de)
[11:51:58] *** molybdenum.libera.chat sets mode: +o gilberth
[11:51:58] *** Joins: eschaton (~eschaton@li541-49.members.linode.com)
[11:51:58] *** Joins: nckx (~nckx@tobias.gr)
[11:51:58] *** Joins: phoe (~phoe@user/phoe)
[11:51:58] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[11:51:58] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[11:51:58] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[11:51:58] *** Joins: ChanServ (ChanServ@services.libera.chat)
[11:51:58] *** molybdenum.libera.chat sets mode: +o ChanServ
[11:52:06] *** Quits: epony (~epony@user/epony) (Max SendQ exceeded)
[11:52:10] *** Joins: epony (~epony@user/epony)
[13:10:10] <hayley> gilberth: According to <https://community.arm.com/support-forums/f/architectures-and-processors-forum/8510/accelerating-pcre-regex-matching-with-data-prefetch-on-arm-cortex-a7> prefetching might help too.
[13:10:10] -ixelp- Accelerating PCRE regex matching with data prefetch on ARM Cortex-A7 - Architectures and Processors forum - Support foru [...]
[13:13:11] * hayley needs a regex compilation bibliography. Looking up "regex compilation" just tells you how to use libraries.
[13:25:45] *** Joins: treflip (~user@user/treflip)
[13:28:41] *** Joins: random-nick (~random-ni@87.116.181.150)
[13:49:41] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[14:07:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:10:34] <epony> ARE when? (arm regular extensions)
[14:10:57] <epony> we have BRE, ERE, PCRE.. ARE missing still
[14:11:13] <epony> (lets call these JRE for now)
[14:13:05] <epony> https://en.wikipedia.org/wiki/Regular_expression#Standards oups, no such standard \D[one]
[14:35:56] <sham1> x86RE
[14:36:41] <epony> x96 when?
[14:42:47] <epony> technically that set of microprocessors and instruction sets (opcodes) for them started in 1976/1978 with a 10 year future plan
[14:44:49] <epony> you know it's not the instruction sets that matter, at all, it's the miniaturisation and integration and complex processor blocks, so the work on regular expressions is more like "trying to copy some old design with a new name" and does not really matter (at all)
[14:49:08] <epony> so you need the VLIW expressions, if you want to make a dent on modern times (and it would be the 90ies version)
[14:49:35] <hayley> gilberth: Well, that ole Rust regex does a binary search over an array which works like an isum. Guess you don't write that many ranges in regexen? The only issue is still handling \w or . where you have to deal with Unicode.
[14:50:09] <epony> https://en.wikipedia.org/wiki/Very_long_instruction_word#Implementations
[14:54:17] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[14:59:27] <epony> https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures#Instruction_sets
[15:03:44] <epony> the number of produced units and their power usage efficiency and instructions per second is missing here:
[15:03:45] <epony> https://en.wikipedia.org/wiki/Comparison_of_CPU_microarchitectures
[15:04:08] <epony> so have to use this to match it:
[15:04:10] <epony> https://en.wikipedia.org/wiki/Million_instructions_per_second#Timeline_of_instructions_per_second
[15:05:57] <epony> so from theoreticl to production to commercialisation to programming.. why are we still in academic pre-history class?
[15:08:37] <epony> https://en.wikipedia.org/wiki/Graphics_processing_unit#Sales
[15:26:44] <epony> "Apple could not be reached for comment"  --Ryzen.
[15:30:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[15:33:49] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[15:35:43] <moon-child> 'Async is just threads with slightly different tradeoffs.'
[15:35:46] <moon-child> hayley: pls comment
[15:36:11] <hayley> You have posted cringe, prepare to blow latency guarantees
[15:36:38] * hayley is trying to play Wordle but can't think of many five letter words.
[15:37:21] <moon-child> egrep '^.{5}$' /usr/share/dict/words?
[15:37:50] <hayley> Sure.
[15:43:36] *** Joins: kevingal (~quassel@37.228.202.92)
[15:45:37] <hayley> I can come up with 4 letter words, then add -s to the end, but it's a crap strategy.
[15:50:41] *** Joins: Alfr (~Alfr@user/alfr)
[16:13:38] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 256 seconds)
[16:30:32] <selwyn> i wonder what is involved with proposing an experiment for the jwst
[16:31:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687)
[16:31:33] <ck_> where would you like to look?
[16:32:33] <selwyn> idk
[16:32:42] <selwyn> i am really not much of an astrophysicist lol
[16:34:30] <ck_> maybe the better question would've been "when would you like to look"
[16:37:22] <White_Flame> point it at the giant yet-to-be-discovered (or installed) space mirror and look into our past
[16:37:53] <selwyn> it would be very chill to simply order a masterpiece of engineering what to do and collect the data
[16:38:00] <selwyn> much better than building your own experiment
[16:40:22] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[16:40:42] <selwyn> > 458 gigabits of data per day for the length of the mission
[16:40:44] <selwyn> wow
[16:44:21] <ck_> "galaxy-class definition"
[16:47:17] <edgar-rft> once I saw a samsung galaxy with my naked eyes!
[16:52:40] <ck_> did it look like a small monolith?
[17:13:03] * ck_ .oO( https://www.youtube.com/watch?v=cHWs3c3YNs4 )
[17:22:05] <shka> selwyn: megapixels
[17:23:19] <White_Flame> 458Gb/day = 700kB/sec
[17:23:41] <White_Flame> not bad for space comms
[17:30:43] <selwyn> it is a lot of data to process
[17:41:08] *** Joins: johnjaye (~pi@154.6.152.74)
[17:43:57] *** Joins: notzmv (~zmv@user/notzmv)
[17:52:48] <pl> selwyn: there's an user manual available online
[17:53:02] <pl> And ones proposals ultimately go into a common lisp application 
[17:53:26] <selwyn> serious?
[18:14:43] <ck_> I saw the manual posted too, https://jwst-docs.stsci.edu/ , but the lisp is news to me as well
[18:14:44] -ixelp- JWST User Documentation Home - JWST User Documentation
[18:15:39] <ck_> regarding languages, I only found this : /  https://news.ycombinator.com/item?id=19737663
[18:15:40] -ixelp- James Webb Telescope will run a proprietary JS interpreter by a bankrupt company | Hacker News
[18:27:01] <ck_> selwyn: "The Astronomer's Proposal Tool (APT) is a stand-alone GUI-based software package used by proposers to write, validate, and submit proposals for the James Webb Space Telescope." and it looks like it uses jwt. probably an in-joke
[18:31:01] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:4856:a4ca:ca7b:cdae)
[18:42:38] <shka> jwt? i will let that slide this time around :P
[19:28:29] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[19:51:57] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:4856:a4ca:ca7b:cdae) (Ping timeout: 240 seconds)
[20:03:45] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[20:07:10] <phoe> "And ones proposals ultimately go into a common lisp applicatio"
[20:07:15] <phoe> pl: could you elaborate?
[20:07:59] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[20:08:04] <pl> JWST uses the modified version of the application used to schedule time on Hubble 
[20:08:16] <pl> Which was also modified to operate two other space observatories 
[20:08:24] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:09:12] <pl> This application started out on TI Explorer lisp machines, and was later ported using AllegroCL on Unix 
[20:12:37] <pl> APT and related tools prepare the input data which is used by the scheduling operators 
[20:19:07] <phoe> I see
[20:20:15] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:20:18] <shka> that is a cool trivia to know
[20:20:46] <shka> pl: thanks, you are a well of cool historical nuggets
[20:21:15] <pl> Legacy of misspent youth 
[20:23:53] <shka> don't be bitter about that
[20:23:58] <shka> it's ok to be nerd
[20:25:22] <pl> I'm not very bitter about it
[20:29:22] <pl> But I could have used it better 
[20:29:41] <pl> (I feel the negative after-effects every day) 
[20:33:49] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[20:34:53] *** Joins: OlCe (~user@lfbn-nic-1-109-134.w2-15.abo.wanadoo.fr)
[20:43:11] <ck_> what do you mean by that
[20:45:11] <pl> Stunted social skills, actual physical issues (brain over matter can turn ugly), could have enjoyed my youth more, suicidal depression, etc etc
[20:45:33] <pl> Also, could use a brain that worked when it should instead of being great at remembering random trivia 
[20:46:58] <ck_> I can relate to many if not most of those things. how old are you if I may ask?
[20:47:52] <pl> To surprise of many, not that old (launches wolfram alpha to calculate his age) 
[20:48:33] <pl> ... will be 33 this in few months 
[20:48:58] <pl> (wasn't joking about wolfram alpha) 
[20:49:36] <ck_> the tragic thing about time is of course that no matter how well-meaning any advice is, you can mostly only appreciate it after it is already too late
[20:50:10] <ck_> I'm a few years older than you, and can definitely feel at home with the "could have used it better" thought
[20:51:29] <ck_> there's something I want to say but can't really express in a succinct way unfortunately
[20:51:30] <shka> pl: I am older, dude. :P
[20:52:30] <pl> shka: so? A lot of older dudes seem to carry less baggage XD 
[20:53:01] <shka> just want to point out: life have not ended
[20:53:06] <shka> *has
[20:53:38] <shka> there is a chance to rectify mistakes, everyda
[20:53:50] <shka> which I will do now
[20:54:11] <shka> gonna watch some Lower Decks on the treadmill ;-)
[20:54:29] <pl> Heh 
[20:54:57] <shka> season 2 any good?
[20:55:08] <pl> In my case, the amount of breakage feels a bit daunting and the first derivative of it is unfortunately positive 
[20:56:49] <shka> well, i have a somewhat similar story to tell, but it's ok
[20:57:12] <shka> i even accepted being forever alone, i kinda like being a single 
[20:58:42] <shka> and for 20-something years i was weak and frail, but with a commitment toward physical fitness I managed to correct that
[20:59:23] <shka> it is difficult to know what is important, but that's fine
[20:59:28] <shka> that is the life
[21:01:32] <gilberth> Ok. What is buggy here? I have identical sources, which don't use much of libc. It runs fine with Linux and macos. It behaves differently with FreeBSD.
[21:02:26] <gilberth> BTW That was quick. I installed that FreeBSD some minutes ago. Compiled my program => Some bug exposed.
[21:09:23] <drakonis> is it building against which libc?
[21:10:10] <gilberth> I build against -lc, which I believe is not glibc with FreeBSD.
[21:10:57] <drakonis> which cl implementation?
[21:11:15] <gilberth> I was after testing FreeBSD's regex(3). But my code in question does not use that from libc, but my own.
[21:11:27] <gilberth> drakonis: It's C.
[21:11:33] <drakonis> oh
[21:11:47] <drakonis> its probably a libc difference then
[21:12:22] <drakonis> i suppose it is that age old thing where freebsders talk about how freebsd is not linux or something
[21:12:50] <gilberth> I don't use much of libc. And the program behaves, just reports false results in rare cases. I fear that might be either my bug, or a gcc bug.
[21:12:50] <drakonis> its not very helpful, sadly.
[21:12:58] <drakonis> gcc or llvm?
[21:13:09] <drakonis> freebsd defaults to the latter
[21:13:13] <drakonis> unless you explicitly install gcc
[21:14:17] <drakonis> it is hardly helpful
[21:14:34] *** Joins: makomo (~makomo@user/makomo)
[21:14:35] <gilberth> Oops, I use cc and not gcc. Thanks.
[21:16:17] <gilberth> Ok. Switching the compiler changes nothing. Good.
[21:16:47] <drakonis> are you depending on any other library besides libc?
[21:17:08] <gilberth> No.
[21:17:37] <drakonis> okay, it has to be something related to libc or kernel behavior
[21:17:39] <gilberth> I fear that might be my own bug. I use qsort(3).
[21:18:02] <gilberth> Kernel is not relevant here.
[21:18:18] <shka> https://www.trektoday.com/news/191104_02.shtml <- I think that she is mine type of gal.
[21:18:33] <gilberth> malloc(3) might be, when I have a glitch there and by luck got away with glibc and whatever macos uses.
[21:18:58] <drakonis> there's a different malloc algorithm here
[21:19:04] <drakonis> its jemalloc?
[21:20:08] <gilberth> Well, something is buggy. It might well be my code. But: I disabled free(3) and the bug persists.
[21:22:16] <gilberth> I need a break.
[21:22:43] <gilberth> drakonis: Thanks so far!
[21:23:33] <drakonis> np
[21:28:12] <gilberth> Puh! It's not my code. *relief*
[21:30:27] <drakonis> what's the cause?
[21:33:56] <gilberth> I have no clue. I run the RE test suite from AT&T, which is horrible code. I have my own RE implementation, which is for testing and not for production. When I run the test with that test driver by AT&T I get a wrong match reported. When I run that test case w/o the test driver, my engine reports the correct result.
[21:34:05] <gilberth> This is a mystery.
[21:35:33] <gilberth> This happens with three of a total of 2538 tests.
[21:37:47] <gilberth> A Heisenbug. I like those.
[21:41:49] <epony> it's probably going to be demystified by a compiler flag
[22:11:46] <gilberth> Got it! It was qsort(3). Somehow I assumed a stable sort and somehow I got away with glibc and macos libc havving a stable qsort(3) by accident. My bad.
[22:12:27] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[22:13:39] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:18:17] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[22:55:31] <selwyn>  https://www.youtube.com/watch?v=FSF2OSafDWU
[22:55:31] -ixelp- Orangutang driving golf cart like it's miami vice - YouTube
[23:22:45] <Aurora_v_kosmose> > 'Async is just threads with slightly different tradeoffs.' | Can't you implement Async purely with coroutines or green threads?
[23:25:40] <aeth> but the problem is that it's impossible to predict. async is just a convenient way to do threads,
[23:27:49] <White_Flame> different languages & styles reuse the term "async" in all sorts of different ways.  the word on its own without context is meaningless
[23:27:54] <aeth> async is good for networking when you can't predict anything anyway
[23:28:07] <pl> VMS/WinNT style async requires no threads 
[23:28:08] <White_Flame> when asking specific questions like this
[23:28:41] <pl> Which does evented processing and optionally interrupt-based 
[23:29:05] <Aurora_v_kosmose> White_Flame: Fair point.
[23:43:57] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:4856:a4ca:ca7b:cdae)
