[00:08:17] *** domhnall is now known as llanhmod
[00:08:37] *** Joins: blackout69 (~blackout6@net-31-156-75-64.cust.vodafonedsl.it)
[00:19:02] *** Joins: jgee (~jgee@186.80.49.20)
[00:21:14] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[00:24:25] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:25:10] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:26:03] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[00:26:54] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[00:30:09] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[00:30:15] *** Joins: rpkilby_ (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:31:04] *** Quits: jgee (~jgee@186.80.49.20) (Quit: The Lounge - https://thelounge.chat)
[00:34:51] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[00:42:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:45:08] *** Quits: blackout69 (~blackout6@net-31-156-75-64.cust.vodafonedsl.it) (Quit: Leaving.)
[00:46:15] *** Joins: blackout69 (~blackout6@net-31-156-75-64.cust.vodafonedsl.it)
[00:46:51] *** Quits: rpkilby_ (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 268 seconds)
[00:52:01] *** Joins: Gudddu (~Guddu@190.84.88.92)
[00:55:16] *** Quits: Guddu (~Guddu@190.84.88.92) (Ping timeout: 268 seconds)
[00:58:58] *** Quits: piscvau (~odile@alyon-653-1-142-5.w90-42.abo.wanadoo.fr) (Quit: Leaving)
[01:04:47] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[01:05:05] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[01:18:46] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[01:18:56] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Quit: leaving)
[01:22:39] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[01:39:31] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[01:45:00] *** Joins: jgee (~jgee@186.80.49.20)
[01:47:41] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[01:50:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:52:35] *** Joins: fikran (~fikran@user/fikran)
[01:56:01] <Gudddu> Are there any case studies of usage of django rest framework in production environment with millions of api hits? :-)
[01:56:04] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[01:57:15] *** Joins: amalgameate (~noname@rrcs-64-183-178-66.sw.biz.rr.com)
[01:59:45] <amalgameate> hi, i'm having a peculiar problem with my Django app.  recently, around ~100 times a day, i see the following error: "OperationalError: could not connect to server: Connection timed out".  upon inspecting the traceback, it seems like Django is failing to connect to my RDS postgres server.  the odd thing is, i have ~100 active connections to my Django server going at any given time, and this error only
[01:59:51] <amalgameate> happens intermittently (100 erroring requests per day & ~100K non-erroring request per day).  does anyone know what might be causing this?
[02:00:26] <amalgameate> the traceback i get is: https://gist.github.com/boxbeatsy/dd5d623f8f71339c4f4e08480c574a0e
[02:03:51] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:03:51] *** ChanServ sets mode: +v EvilDMP
[02:04:58] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[02:08:16] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:08:16] *** ChanServ sets mode: +v EvilDMP
[02:11:35] <FunkyBob> amalgameate: python 2??
[02:12:03] <FunkyBob> if it's a timeout, i'd be talking to AWS
[02:12:17] <FunkyBob> (not that I expect you'd get much out of them)
[02:13:59] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:14:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:14:55] <amalgameate> FunkyBob: yep python 2.7.  ok, i'll try filing a support ticket with RDS to see if they have any insights. ty ty.
[02:15:20] <FunkyBob> also, look into upgrading to ... a supported version
[02:15:22] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:15:38] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:18:50] <amalgameate> ya.....been on the to-do list....for a long time :X
[02:19:20] <FunkyBob> the longer you wait, the harder it gets :/
[02:21:55] *** Quits: Kalov (~Thunderbi@179.56.68.20) (Quit: Kalov)
[02:29:25] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[02:30:19] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[02:33:22] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:34:00] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:38:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[02:39:34] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:41:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:41:01] *** ChanServ sets mode: +v EvilDMP
[02:41:02] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[02:41:58] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 265 seconds)
[02:44:23] *** Quits: blackout69 (~blackout6@net-31-156-75-64.cust.vodafonedsl.it) (Ping timeout: 265 seconds)
[02:51:09] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:55:20] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[02:55:38] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:56:58] *** Quits: CodenameTim (~CodenameT@154.21.114.194) (Ping timeout: 252 seconds)
[03:06:16] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:07:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:09:18] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[03:13:34] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[03:17:43] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 268 seconds)
[03:22:05] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:22:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:27:48] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[03:36:13] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 268 seconds)
[03:52:40] <frozensoil> hi all, I have a list of dictionaries and a query set. For each entry in the list of dicts, I would want to check if it exists in the queryset and if so return the value (from the queryset). Is there a simple way to do this?
[03:53:14] <frozensoil> there's an id key in the list of dictionaries that exists within the query set values
[03:54:46] *** Quits: jgee (~jgee@186.80.49.20) (Quit: The Lounge - https://thelounge.chat)
[04:00:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[04:01:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:01:57] *** Joins: fikran (~fikran@user/fikran)
[04:06:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[04:12:24] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:30:18] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:31:01] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:31:41] *** Quits: gitly (~gitly@148.252.133.74) (Ping timeout: 265 seconds)
[04:33:29] *** Joins: gitly (~gitly@85.255.234.215)
[04:35:50] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[04:44:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:45:50] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[04:46:08] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[05:00:28] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:01:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:04:42] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[05:06:00] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[05:06:49] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:19:05] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:26:56] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:27:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:29:12] *** Quits: gitly (~gitly@85.255.234.215) (Ping timeout: 265 seconds)
[05:30:47] *** Joins: gitly (~gitly@85.255.236.1)
[05:32:09] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[05:36:36] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[05:38:51] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[05:56:12] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Quit: Leaving)
[06:03:54] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[06:05:49] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[06:09:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[06:11:20] *** Joins: fikran (~fikran@user/fikran)
[06:14:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:19:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[06:29:54] <schinckel> frozensoil: You may want to iterate through the queryset and build a dict with the keys you'll be searching using: {x.key: x for x in queryset}
[06:30:05] <schinckel> Then you can get them.
[06:30:38] <schinckel> It depends on how big your queryset is - you could filter it to only those with a given set of keys first.
[06:31:01] <schinckel> queryset = queryset.filter(key__in=data.keys())
[06:36:34] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[06:36:53] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[06:49:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:49:18] *** Joins: shangxiao (~davids@124.187.193.187)
[06:54:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[07:07:31] *** Joins: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com)
[07:09:57] *** Joins: audiocat (~audio@2603-8081-1800-6a6f-ee32-c9a4-2f90-9021.res6.spectrum.com)
[07:11:06] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:15:15] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:27:03] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[07:45:39] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[07:46:19] *** Joins: rob4226 (~Thunderbi@136.144.35.61)
[07:47:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:55:41] <shangxiao> I have a "change password" form that has a clean_old_password() method to validate the user's current password with `user.check_password()`. Is there a validator that does the same thing?
[08:02:32] <bparker> don't think so
[08:02:58] <bparker> there's validators for common passwords and similarity to other fields of the user's account (name, email etc.), but not one that checks the existing password
[08:03:14] <bparker> https://docs.djangoproject.com/en/3.2/topics/auth/passwords/#enabling-password-validation
[08:03:52] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 265 seconds)
[08:12:09] <FunkyBob> shangxiao: since it would need access to use User instance anyway... not sure how that could work
[08:16:50] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[08:18:38] <shangxiao> yes that's a good point
[08:18:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[08:19:10] <shangxiao> this project has a middleware that sets the request globally, so could probably write our own
[08:20:36] *** Joins: fikran (~fikran@user/fikran)
[08:26:54] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[08:27:12] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[08:42:31] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[08:42:50] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[08:44:05] *** Quits: Gudddu (~Guddu@190.84.88.92) (Quit: Leaving)
[08:45:27] *** Joins: stormbytes (~textual@ool-18e4a56c.dyn.optonline.net)
[08:52:30] *** Quits: audiocat (~audio@2603-8081-1800-6a6f-ee32-c9a4-2f90-9021.res6.spectrum.com) (Ping timeout: 260 seconds)
[09:24:42] *** Quits: Elzington (~Elzington@68.235.43.173) (Ping timeout: 260 seconds)
[09:29:34] *** Joins: Elzington (~Elzington@68.235.43.62)
[09:48:36] *** Joins: djapo (~archangel@user/djapo)
[09:50:39] *** Quits: rob4226 (~Thunderbi@136.144.35.61) (Quit: rob4226)
[09:51:11] *** Joins: sandeepk (~sandeepk@202.14.122.202)
[10:02:19] *** Quits: pipapipapipo (~peppbel@076-083-166-225.res.spectrum.com) (Remote host closed the connection)
[10:07:12] <serafeim> hello friends
[10:09:24] <shangxiao> hi
[10:12:22] *** Joins: kostkon_ (~kostkon@athedsl-282775.home.otenet.gr)
[10:13:58] *** Quits: kostkon (~kostkon@2a02:587:a107:1506:914f:cfda:fee9:ced5) (Ping timeout: 268 seconds)
[10:17:26] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[10:17:44] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[10:28:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[10:29:58] *** Joins: fikran (~fikran@user/fikran)
[10:31:38] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[10:31:44] *** Joins: thiras (~thiras@user/thiras)
[10:47:28] <CapnKernel> Hello.  I want to use Multi-table inheritance: https://docs.djangoproject.com/en/3.2/topics/db/models/#multi-table-inheritance
[10:47:58] <CapnKernel> If I've retrieved a model instance of the base class, is there a way to promote that to the apprpriate derived model?
[10:50:01] <CapnKernel> It's possible to get a child model instance by accessing the lower case form of the child class off the base class (.restaurant in the django docs link given above)
[10:50:29] <CapnKernel> And it would be possible to iterate over the possible child types looking for an accessor that didn't result in an exception
[10:50:41] <CapnKernel> But it seems a bit gross.
[10:50:55] <CapnKernel> Is there a recommended way of easily getting a child of the right type?
[10:51:06] <shangxiao> CapnKernel: I believe the term you're looking for is "downcasting", the last time I did this there were 2 or 3 libraries that did this for you. One sec I'll find them...
[10:51:33] <shangxiao> ah this was one: https://django-polymorphic.readthedocs.io/en/stable/
[10:51:57] <CapnKernel> Thank you!
[10:52:11] <shangxiao> I think this also downcasted: https://django-model-utils.readthedocs.io/en/latest/
[10:52:44] <serafeim> i would recommend to double think before using multi-table inheritance
[10:53:23] <serafeim> or any other trickery that ain't backed up properly by sql
[10:53:55] <CapnKernel> I agree that inheritance isn't the architectural savior we were taught it would be.
[10:56:31] *** Quits: kostkon_ (~kostkon@athedsl-282775.home.otenet.gr) (Remote host closed the connection)
[10:56:42] <CapnKernel> shangxiao, æ„Ÿè°¢æ‚¨, they both look really useful.
[11:19:57] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 268 seconds)
[11:37:18] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[11:47:37] <serafeim> hello, do i need to do something special in order to make sure that my mysql database will *only* use innodb ?
[11:52:38] <serafeim> shoud i add an init command as proposed here: https://djangosaur.tumblr.com/post/357759467/django-transaction-mysql-engine-innodb ?
[11:56:21] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[12:04:58] <serafeim> hi ? nobody's using mysql ?
[12:05:28] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[12:07:37] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi)
[12:14:13] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[12:14:25] *** Quits: jasonbraganza (~jasonbrag@user/jasonbraganza) (Quit: Au revoir â€¦)
[12:16:00] <shangxiao> serafeim: mysql? not many people I know use it nowdays
[12:16:06] <serafeim> ha ha
[12:16:13] <serafeim> yes me neither but i've got an old project
[12:16:17] *** Joins: jasonbraganza (jasonbraga@user/jasonbraganza)
[12:16:32] <shangxiao> that init command seems like it's something to follow up on
[12:17:36] <shangxiao> ah I remember using myisam in my first jobb... lol no foreign keys
[12:18:00] <shangxiao> serafeim: anyway here's the docs on storage engines: https://docs.djangoproject.com/en/3.2/ref/databases/#storage-engines
[12:19:05] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:19:09] *** Joins: audiocat (~audio@2603-8081-1800-6a6f-3d26-a8b1-a13c-41db.res6.spectrum.com)
[12:21:29] *** Quits: stormbytes (~textual@ool-18e4a56c.dyn.optonline.net) (Ping timeout: 265 seconds)
[12:24:47] <FunkyBob> ruh-roh
[12:24:52] <FunkyBob> CapnKernel is looking to use MTI?
[12:26:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:26:04] *** ChanServ sets mode: +v EvilDMP
[12:26:37] <FunkyBob> morning, EvilDMP
[12:26:48] <EvilDMP> Hi!
[12:27:08] <EvilDMP> Don't tell me my machine was doing *the thing* again.
[12:27:38] <EvilDMP> FunkyBob ^
[12:27:50] <CapnKernel> FunkyBob: Don't tell anyone.
[12:28:05] <CapnKernel> I think it's the first time in eight years of Django
[12:28:54] <FunkyBob> EvilDMP: the flapping thiing?  not that I noticed
[12:32:25] <FunkyBob> CapnKernel: what is the problem you hope to use them to solve?
[12:37:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[12:39:21] *** Joins: fikran (~fikran@user/fikran)
[12:40:53] <EvilDMP> Time to hit the road, those Spanish mountains aren't going to climb themselves.
[12:41:03] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:41:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:41:23] *** ChanServ sets mode: +v EvilDMP
[12:41:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[12:48:54] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[13:02:35] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[13:04:15] <CapnKernel> FunkyBob: Got four model subclasses, 80% of the fields are common between them.
[13:11:48] <serafeim> i actually have bitten the bullet and am upgrading my mysql 5.1 to mariadb 10.5
[13:17:18] <shangxiao> now just bite the bullet for upgrading to postgres :P
[13:23:02] *** Joins: Atque (~Atque@user/atque)
[13:23:32] *** Joins: rber (~raphael@user/rber)
[13:25:59] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[13:26:37] *** Joins: Atque (~Atque@user/atque)
[13:28:26] *** Joins: thiras (~thiras@user/thiras)
[13:29:06] *** Joins: safwan (uid93576@id-93576.ilkley.irccloud.com)
[13:29:06] *** Joins: _bladez_ (~bladez@user/bladez/x-6019614)
[13:31:02] <FunkyBob> CapnKernel: so why MTI? why not just related models?
[13:43:35] <nedbat> does anyone know if I can run django on dreamhost without passenger?
[13:48:11] *** Parts: _bladez_ (~bladez@user/bladez/x-6019614) (Leaving)
[13:48:48] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[13:48:58] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[13:59:38] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[14:00:11] <FunkyBob> nedbat: well, they seem to suggest they suport FastCGI... whch, iirc, uWSGI talks
[14:01:30] <nedbat> FunkyBob: i don't know how to use that in their shared hosting environment   /me is n00b
[14:02:45] <nedbat> FunkyBob: though uwsgi talks about it specifically: https://uwsgi-docs.readthedocs.io/en/latest/tutorials/dreamhost.html so there is hope
[14:04:25] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:05:11] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[14:05:20] <CapnKernel> FunkyBob: By "related models", do you mean something Django specific, or the general idea of a bunch of stuff?
[14:05:50] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:08:09] *** Joins: Przemo (~Przemo@091192076232.gdansk.vectranet.pl)
[14:08:19] <Przemo> Good morning!
[14:09:55] <Przemo> I have question. I am looking for a solution for my pythn application - email when exception occurs. I found out that Django has that functionality but I couldn't find in the code how is it written and where is it used. Can you help me or send me some articles about that?
[14:10:36] <FunkyBob> nedbat: i've never really looked at dreamhost... why them, specifically?
[14:10:44] <FunkyBob> CapnKernel: I mean models with 1to1 or fkey relations
[14:10:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[14:10:52] <nedbat> FunkyBob: it's just where my stuff is hosted.
[14:11:33] <FunkyBob> Przemo: from memory django does it via the logging system
[14:12:19] <nedbat> FunkyBob: i have a link to your tinbrain.net tut about digitalocean, and may make that leap some day
[14:12:26] <FunkyBob> https://docs.djangoproject.com/en/3.2/topics/logging/#id4
[14:12:43] <FunkyBob> nedbat: should work fine for most any VPS service
[14:13:58] <Przemo> FunkyBob Can u show part of code?
[14:14:57] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:16:42] <FunkyBob> Przemo: as the docs I linked you to show, it's in django.utils.log.AdminEmailHandler
[14:17:13] <CapnKernel> FunkyBob: I roll with the "light views, heavy models" school
[14:17:19] <FunkyBob> https://github.com/django/django/blob/main/django/utils/log.py#L79
[14:17:25] <FunkyBob> CapnKernel: ok?
[14:17:38] <CapnKernel> Because 80% of the fields are the same, 80% of the business logic is the same for the subclasses
[14:17:51] <CapnKernel> Putting that logic in the base class is just DRY
[14:19:25] *** Quits: gitly (~gitly@85.255.236.1) (Ping timeout: 265 seconds)
[14:21:07] *** Joins: gitly (~gitly@185.69.144.142)
[14:24:24] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:26:24] <FunkyBob> CapnKernel: still doesn't answer why you wouldn't have them as separate models
[14:26:31] <FunkyBob> with a common shared model
[14:26:40] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:26:45] <CapnKernel> The shared model is the base
[14:27:06] <GinFuyou> also models doesn't have to inherit from models
[14:27:18] <CapnKernel> Yeah I considered mixins too
[14:27:20] <FunkyBob> CapnKernel: yes, but what benefit is inheritance giving you?
[14:27:26] <FunkyBob> you've already run into one pain point
[14:27:31] <CapnKernel> polymorphism
[14:27:48] <CapnKernel> Life is pain.  The question is, which road involves less pain
[14:27:53] <FunkyBob> yes
[14:27:58] <FunkyBob> and I'm trying to s teer you away from pain
[14:28:04] <FunkyBob> but you seem dead set on t hat path anyway
[14:28:06] <CapnKernel> Thanks FunkyBob
[14:28:13] <CapnKernel> But the pain is now in the rear vision mirror
[14:28:16] *** audiocat is now known as audioduck
[14:28:23] <FunkyBob> the pain you've found so far, that is
[14:28:43] <CapnKernel> That was momentary, thanks to a nice module and shangxiao's help
[14:28:48] <CapnKernel> It's gravy from now on
[14:28:52] <FunkyBob> lots of people reach for MTI with gross misconceptions about what it will do for them
[14:29:09] <CapnKernel> I'm in total agreement
[14:29:45] <CapnKernel> I'm aware of the perils of inheritance.  25 years ago my job was writing CORBA code.  https://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture
[14:29:57] <CapnKernel> OMG the inheritance diamonds were a nightmare
[14:30:06] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[14:30:13] <FunkyBob> it's not inheritance per se I'm worried about
[14:30:21] <FunkyBob> it's MTI, and specifically in Django
[14:30:56] <CapnKernel> And I well remember the "composition over inheritance" advice at the start of the "Gang of Four" design patterns book.  https://python-patterns.guide/gang-of-four/composition-over-inheritance/
[14:31:54] <FunkyBob> still unrelated to my concerns
[14:32:15] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[14:33:00] <shangxiao> I think Funky is talking about single-table inheritance?
[14:33:43] <FunkyBob> no
[14:33:53] <FunkyBob> that's not a thing built into django
[14:33:58] <CapnKernel> Originally I did have a "type" field in the model, and then bunches of fields within the model that were or weren't relevant depending on the value of the "type" field
[14:34:22] <shangxiao> abstract=True
[14:34:25] <CapnKernel> In other words, each row in the table had all the fields evenif they didn't need them
[14:34:34] <CapnKernel> I'm not using abstract = True
[14:35:59] <CapnKernel> Just want to check, abstract = True would give me duplication in the db, and then I couldn't iterate over the one table and pull up subclasses.
[14:36:13] <CapnKernel> I'm happy with how it turned out
[14:36:30] <FunkyBob> so now you have Parent, and Child1, Child2, etc.... how will your system react when a given Parent has more than one Child?
[14:38:10] <CapnKernel> Hmm?
[14:38:23] <CapnKernel> By parent/child, do you mean one table having an fk to another table?
[14:38:32] <CapnKernel> Or in a subclass sense?
[14:39:17] <FunkyBob> well, since you're going the mti path... there's not a lot of difference,
[14:39:23] <FunkyBob> though it'll be a 1to1 field from child to parent
[14:39:27] <CapnKernel> To take what you've said literally, I have a base class derived from models.Model, and four subclasses derived from the base class
[14:39:35] <FunkyBob> but what will it do when Parent has ChildA and a ChildB record?
[14:40:17] <CapnKernel> Yep, Django has autocreated 1_to_1 fields in the derived classes which link to the base class table.
[14:40:31] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[14:40:37] <FunkyBob> yes
[14:40:42] <FunkyBob> that's what happens in MTI
[14:40:44] <CapnKernel> If I have two rows, one of type ChildA (pk=1), and one of ChildA (pk=2)
[14:40:51] <FunkyBob> no
[14:41:12] <FunkyBob> what Parent pk=1 has a child in BOTH ChildA _AND_ ChildB tables?
[14:41:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:41:23] <CapnKernel> Then there will be two rows in the base table, and the childA table will have a row with pk=1, and the childB table will have a row with pk=2
[14:41:30] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[14:41:39] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[14:41:49] <FunkyBob> what will your system do
[14:42:01] <FunkyBob> when there is a ChildB and a ChildA referring to the same Parent record?
[14:42:07] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:42:31] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[14:43:13] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[14:43:16] <CapnKernel> Then the db would be in an invalid state
[14:43:28] <CapnKernel> And I don't think Django will create records in that way
[14:43:28] <FunkyBob> not as far as the DB is concerned
[14:43:32] <FunkyBob> yse it will
[14:43:38] <CapnKernel> It will?
[14:44:23] <FunkyBob> it can
[14:44:35] <FunkyBob> certainly, there's nothing in the DB to stop it
[14:46:10] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[14:46:10] <FunkyBob> remember those gross misconceptions I mentioned?
[14:46:12] <FunkyBob> this is one of them
[14:46:42] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[14:46:46] *** Joins: blackout69 (~blackout6@net-93-70-196-199.cust.vodafonedsl.it)
[14:46:57] *** vdamewood is now known as Guest6509
[14:46:57] *** Quits: Guest6509 (~vdamewood@fedora/vdamewood) (Killed (copper.libera.chat (Nickname regained by services)))
[14:46:57] *** vinleod is now known as vdamewood
[14:47:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[14:48:20] <CapnKernel> FunkyBob: I'm playing around with creating subclass records in admin.  The pk of the new subclasses matches the pk of the base class (thus skipping pks in the subclass that have been used by other subclasses)
[14:48:45] *** Joins: fikran (~fikran@user/fikran)
[14:50:24] <FunkyBob> yes, it won't happen easily... but every time I've used mti, it's ended up happening
[14:52:01] <shangxiao> perhaps what's needed is the fk on the base table... ie one for each child table
[14:52:26] <shangxiao> that way at least you can do row-level check constraints to enforce a single child
[14:53:11] <shangxiao> which could be emulated manually :P
[14:53:35] <CapnKernel> And I just tried to .get() an instance of the subclass in python, and changed the .pk to an arbitrary value, then .save()d the subclass.  This should create a new row with the new id, leaving the old row untouched.
[14:53:55] <CapnKernel> Changing subclass.pk had no effect.
[14:54:00] *** Quits: Przemo (~Przemo@091192076232.gdansk.vectranet.pl) (Ping timeout: 256 seconds)
[14:54:29] <CapnKernel> I also changed a field that lives in the base class, and that field saved ok, according to the db dump
[14:54:41] <CapnKernel> So at the moment, everything works just how I expect.
[14:55:00] <CapnKernel> But FunkyBob, I can't discount "every time I've used mti, it's ended up happening" because you so know what you're doing
[14:55:32] <CapnKernel> I'm using it how it says to use it.
[14:55:46] <CapnKernel> Which says to me that the django code might have a bug: It works for simple cases and light loads, but has bugs
[14:59:48] <FunkyBob> it happens through various means... often migrations or other efforts
[15:00:05] <FunkyBob> it really rarely brings enough benefit for the magic involved
[15:01:56] <CapnKernel> I'm hearing you
[15:02:07] <CapnKernel> I'm thinking of one scenario where it could come badly unstuck
[15:02:16] <CapnKernel> And that is operating on an instance of the base class
[15:03:38] <CapnKernel> So I'll make sure I always faff with instances of the derived classes
[15:26:33] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[15:34:08] *** Joins: thiras (~thiras@user/thiras)
[15:40:42] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi)
[15:42:44] <schinckel> CapnKernel: I've used django-model-utils and .select_subclasses() with good effect for MTI.
[15:43:08] <schinckel> Also taught the admin to deal with only subclasses (using that, and then some trick for creating new ones).
[15:43:39] <schinckel> Still is the potential for the conflicts FunkyBob outlined above, but it's mostly been worth it in our case.
[15:44:37] <schinckel> (Although we do have a couple of FKs that I wish had been on the parent record, even though they would have to be nullable. Would have potentially made some things easier, but could have made other things a whole lot harder)
[15:44:43] *** Quits: saschi (~saschi@user/saschi) (Quit: WeeChat 2.7.1)
[15:44:46] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:45:00] <schinckel> Certainly a better approach than the previous one, which was just to use JSON blobs for all of the fields for each "subclass".
[15:46:20] <schinckel> https://schinckel.net/2016/04/30/multi-table-inheritance-and-the-django-admin/ was possibly how I ended up doing it, actually.
[15:48:16] <schinckel> FWIW, we have 2208 instances across about 30 different subclasses.
[15:49:31] <schinckel> When you go into the admin you get a single select with the subclasses (and a couple of fields that are on the parent model), and then making a selection reloads the page with the subclass selected (and all of the fields on that model).
[15:49:45] <schinckel> In practice though, we don't use the admin for creation of these instances.
[15:51:31] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:52:11] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[15:58:16] <CapnKernel> schinckel: Yeah, I've gone down the JSONField route before.  Sigh.
[15:58:35] <CapnKernel> Nice
[15:59:06] <CapnKernel> I'm not planning on making admin pages visible to the customer or end users.
[15:59:13] <CapnKernel> I have on some jobs, but not this one
[15:59:26] <CapnKernel> I'd have to add too many rules
[16:00:02] <CapnKernel> FunkyBob: schinckel: shangxiao: Thank you for your help and advice.
[16:03:41] *** Parts: blackout69 (~blackout6@net-93-70-196-199.cust.vodafonedsl.it) ()
[16:03:42] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[16:06:41] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[16:09:54] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[16:14:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[16:25:25] *** Joins: saorge (~saorge@ns378138.ip-5-196-67.eu)
[16:27:55] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[16:28:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:30:28] *** Quits: safwan (uid93576@id-93576.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:30:39] <serafeim> any idea why this query: https://dpaste.org/Sy1X is not working ? it  says  "Unkown column "apa.old_process_id" in where clause"
[16:31:50] <serafeim> it seems that i can't use the `apa` alias inside the nested query ?
[16:40:56] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:45:46] *** Quits: audioduck (~audio@2603-8081-1800-6a6f-3d26-a8b1-a13c-41db.res6.spectrum.com) (Ping timeout: 268 seconds)
[16:56:30] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[16:58:07] *** Joins: fikran (~fikran@user/fikran)
[17:00:25] *** Joins: dez (uid92154@user/dez)
[17:10:10] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[17:14:20] *** Joins: Atque (~Atque@user/atque)
[17:40:06] *** Joins: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi)
[17:44:09] *** Quits: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:02:02] *** Joins: CodenameTim (~CodenameT@154.21.23.5)
[18:03:46] *** Joins: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi)
[18:07:46] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[18:08:48] *** Quits: mattil (~mattil@dzy2p1qqlqb0lv7by3y-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[18:08:59] *** Quits: shangxiao (~davids@124.187.193.187) (Quit: WeeChat 3.2.1)
[18:11:27] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:16:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[18:21:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:25:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[18:28:42] *** Joins: thiras (~thiras@user/thiras)
[18:29:32] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:30:47] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[18:31:25] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:36:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[18:36:46] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Ping timeout: 260 seconds)
[18:47:13] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:49:24] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:56:36] *** Joins: pro_z (~pro_z@37.214.66.151)
[19:05:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[19:07:29] *** Joins: fikran (~fikran@user/fikran)
[19:10:26] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[19:18:08] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[19:24:10] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:28:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[19:29:15] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[19:31:10] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[19:35:52] *** Quits: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net) (Quit: leaving)
[19:36:28] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[19:51:18] <amalgameate> hi, i'm getting intermittent "connection timed out" errors from my Django web app which uses a postgres backend hosted on RDS.  the weird thing is that whenever one dyno gets the timeout error, my other dynos hum along just fine (so it doesn't seem like the database is actually going offline).  does anyone know what could be the cause of this?  my web app reuses connections for up to 500s, and my RDS
[19:51:24] <amalgameate> app doesn't time out idle connections until they're 1 day old, so taht doesn't seem to be the problem.
[19:54:28] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[19:58:50] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:59:15] *** Joins: iomari891 (~iomari891@129.205.113.2)
[20:05:34] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0f7-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:09:43] *** Joins: JordiGH (~jordi@user/jordigh)
[20:09:49] <JordiGH> Do you users also call the admin "the django"?
[20:09:53] <JordiGH> *your
[20:13:26] <GinFuyou> No, I usually call... admin
[20:13:51] <GinFuyou> ?
[20:14:21] <GinFuyou> not sure what exactly you are asking about
[20:15:35] *** Quits: iomari891 (~iomari891@129.205.113.2) (Read error: Connection reset by peer)
[20:16:09] *** Joins: iomari891 (~iomari891@129.205.113.2)
[20:23:51] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 268 seconds)
[20:29:15] <CodenameTim> amalgameate: Is it the error that indicates that it can't connect to the full RDS url and the message asks if something is listening on the proper port?
[20:31:52] <CodenameTim> If so, try setting the `PGCONNECT_TIMEOUT` environment variable. I've been running into this issue for a month now. I have a heroku support ticket open. They said it has something to do with noisy neighbors on the server causing issues. The other proposed resolution of theirs was to run `heroku ps:stop <dyno>.<index>`, but that wasn't working so well for me recently.
[20:32:32] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:33:10] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:36:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:37:11] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:38:50] *** Quits: iomari891 (~iomari891@129.205.113.2) (Ping timeout: 265 seconds)
[20:40:49] *** Joins: iomari891 (~iomari891@129.205.113.2)
[20:45:02] *** Quits: sandeepk (~sandeepk@202.14.122.202) (Remote host closed the connection)
[20:45:03] *** Joins: spaceone (~spaceone@wc1.wechall.net)
[20:45:20] *** Quits: iomari891 (~iomari891@129.205.113.2) (Client Quit)
[20:45:58] <spaceone> hi, i am trying to do a manage.py sqlmigrate myapp foo but get the following exception. what can be the problem?
[20:46:16] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[20:46:30] <spaceone> https://bpa.st/TBTA
[20:48:14] <GinFuyou> what is "foo" actually?
[20:49:49] <spaceone> the migration name
[20:51:04] <GinFuyou> You have a migration like named like that? Though for me it doesn't raises an error
[20:51:42] <GinFuyou> Also... python 2.7... ehhh
[20:51:52] <spaceone> the migration is called 0004_auto_20210907_1050
[20:52:19] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:52:30] <spaceone> well, i just want to migrate to py3 but can only do this if i execute the migrations
[20:52:49] <GinFuyou> Not sure how those two are related
[20:53:14] <spaceone> there are conflicting api changes so i have to execute the raw sql statements for the migration
[20:53:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:53:42] <GinFuyou> Update python \ django and then do migrations
[20:53:44] *** Joins: iomari891 (~iomari891@129.205.113.2)
[20:53:57] <spaceone> does not work
[20:54:12] <spaceone> the old tables uses not python3 compatible libraries
[20:54:22] <spaceone> s/tables/models/
[20:55:01] <GinFuyou> I see
[20:55:21] <GinFuyou> What about sqlmigrate appname 0004 ?
[20:55:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:56:02] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:56:10] <GinFuyou> It's suspicious that tuple has str and unicode items in it
[20:56:52] <spaceone> 0004 raises the same error
[20:57:18] <spaceone> KeyError: ('myapp', u'0004_auto_20210907_1050')
[21:00:08] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:01:57] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:03:18] <amalgameate> CodenameTim: yea, that's exactly the error!  do you by any chance know what the default value for PGCONNECT_TIMEOUT is if you don't set it?  my research is telling me that the default is to wait infinitely (https://www.postgresql.org/docs/9.1/libpq-connect.html#LIBPQ-CONNECT-CONNECT-TIMEOUT) which seems to be less error proned than setting a nominal value?
[21:04:19] <amalgameate> our backend is hosted on RDS so our fix may be a bit different.  i've also been looking into a PIP package called django-dbconn-retry which attempts to monkeypatch psycopg2 to retry connecting to the db twice before throwing an operational error
[21:05:25] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 265 seconds)
[21:10:44] *** Quits: iomari891 (~iomari891@129.205.113.2) (Ping timeout: 265 seconds)
[21:10:59] <spaceone> the error was that there existed a squashed migration ^^
[21:11:08] <spaceone> which replaces that one
[21:13:22] <spaceone> but i have a follow up error: https://bpa.st/GB6A â†’ any hint what could be the reason?
[21:13:38] *** Quits: CodenameTim (~CodenameT@154.21.23.5) (Ping timeout: 265 seconds)
[21:13:52] <spaceone> "ValueError: The field Foo.result was declared with a lazy reference to 'django_celery_results.taskresult', but app 'django_celery_results' isn't installed."
[21:14:13] <spaceone> the app should be installed, the tables exists, migrations already ran
[21:14:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[21:15:59] <spaceone> ah, it seems the `makemigrations` created invalid dependencies
[21:16:52] *** Joins: fikran (~fikran@user/fikran)
[21:18:19] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:27:22] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 268 seconds)
[21:41:33] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[21:42:51] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[21:59:19] *** Joins: jess (~jess@libera/staff/jess)
[22:01:10] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[22:03:19] *** Joins: CodenameTim (~CodenameT@154.21.28.89)
[22:04:29] <CodenameTim> amalgameate: Late me know how that goes for you. I may try that. https://forum.djangoproject.com/t/retrying-database-connections/9647
[22:06:22] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:08:46] <CodenameTim> Let*
[22:16:06] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 260 seconds)
[22:22:07] *** Joins: node1 (~node1@user/node1)
[22:23:15] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[22:23:38] *** Joins: node1 (~node1@user/node1)
[22:23:54] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:24:09] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[22:24:34] *** Quits: node1 (~node1@user/node1) (Max SendQ exceeded)
[22:25:06] *** Joins: node1 (~node1@user/node1)
[22:26:12] *** Quits: node1 (~node1@user/node1) (Max SendQ exceeded)
[22:26:46] *** Joins: node1 (~node1@user/node1)
[22:27:00] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:28:28] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[22:28:53] *** Joins: node1 (~node1@user/node1)
[22:30:08] *** Quits: node1 (~node1@user/node1) (Max SendQ exceeded)
[22:30:44] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[22:30:47] *** Joins: node1 (~node1@user/node1)
[22:31:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[22:31:58] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[22:32:17] *** Joins: node1 (~node1@user/node1)
[22:33:34] *** Quits: node1 (~node1@user/node1) (Max SendQ exceeded)
[22:34:49] *** Joins: node1 (~node1@user/node1)
[22:36:00] *** Quits: node1 (~node1@user/node1) (Max SendQ exceeded)
[22:41:43] *** Joins: iomari891 (~iomari891@129.205.113.2)
[22:44:49] <amalgameate> CodenameTim: yep, our connection errors have stopped since i pushed that PIP package to production an hour ago.  we were seeing ~20 errors per hour, so it's pretty clear it's fixed.
[22:44:57] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:44:57] *** ChanServ sets mode: +v EvilDMP
[22:47:33] <amalgameate> i'm still looking for the root cause of the networking issue so we can avoid the monkeypatch.  we run on performance-l dynos (which i think don't run on shared resources?), so i'm not sure i buy that it's just noisy neighbors.
[22:47:38] <CodenameTim> Interesting. I haven't seen connection errors pop up since setting the timeout value (4s as an initial value) and I was getting 30s timeouts on the requests.
[22:48:22] <CodenameTim> You're correct. They indicated that using performance dynos should be immune to the noisy neighbor idea, but I wasn't entirely sold on that explanation given the env variable.
[22:48:46] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[22:49:27] <amalgameate> you guys host your database on heroku right?  do you by any chance know if the PGCONNECT_TIMEOUT env variable would apply to heroku apps that use a DB hosted on AWS (i.e. RDS)?
[22:51:14] <amalgameate> i think for our RDS setup, i may have to adjust settings.py instead of simply adding a config var.  still trying to figure it out, but will definitely test your solution too.
[22:51:58] <CodenameTim> Yes we do. Yes `PGCONNECT_TIMEOUT` does appear to work with psycopg2.
[22:53:19] <amalgameate> perfect, ty!
[22:55:46] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[22:57:01] <CodenameTim> You're welcome
[22:58:25] *** Joins: stdout (~stdout@216.163.21.11)
[23:01:35] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[23:03:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:11:27] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:11:52] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:11:52] *** ChanServ sets mode: +v EvilDMP
[23:12:14] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:12:33] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:12:33] *** ChanServ sets mode: +v EvilDMP
[23:13:01] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:13:30] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:13:30] *** ChanServ sets mode: +v EvilDMP
[23:13:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:13:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:14:36] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:14:36] *** ChanServ sets mode: +v EvilDMP
[23:14:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:15:10] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:15:10] *** ChanServ sets mode: +v EvilDMP
[23:15:23] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:15:56] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:15:56] *** ChanServ sets mode: +v EvilDMP
[23:16:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:17:07] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:17:22] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:17:43] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:17:43] *** ChanServ sets mode: +v EvilDMP
[23:17:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:18:48] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:18:48] *** ChanServ sets mode: +v EvilDMP
[23:19:17] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:19:36] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:19:36] *** ChanServ sets mode: +v EvilDMP
[23:20:06] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:24:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[23:26:12] *** Joins: fikran (~fikran@user/fikran)
[23:31:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:31:02] *** ChanServ sets mode: +v EvilDMP
[23:31:48] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[23:32:01] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Client Quit)
[23:39:51] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:41:28] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:41:28] *** ChanServ sets mode: +v EvilDMP
[23:53:37] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:57:56] *** Joins: Jhin (~Jhin@2a02:a317:e042:7a80:2d80:f417:6676:8feb)
