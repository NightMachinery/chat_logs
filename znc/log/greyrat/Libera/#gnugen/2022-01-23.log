[00:01:03] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[00:05:25] *** chiselfu1e is now known as chiselfuse
[00:13:45] <Orbstheorem> I have a envfile I dumped some time and have been using since by sourcing it `. some-env`:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/bd7c79ed57e8bf0473f6f21696cffc407e11dc57)
[03:25:48] <Orbstheorem> I think I have a routing loop :S
[03:35:17] <Notkea> you or Salt?
[03:41:09] <Orbstheorem> Me.
[03:41:31] * Orbstheorem uploaded an image: (86KiB) < https://libera.ems.host/_matrix/media/r0/download/orbstheorem.ch/mGyjVtBqyCXdfSkmRoetNcer/image.png >
[03:42:14] <Orbstheorem> My guess is due to this
[03:42:15] * Orbstheorem uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/orbstheorem.ch/JVzVjoykpQKjGfMJLosQCrBe/image.png >
[03:58:08] <Orbstheorem> Nevermind...
[03:58:15] <Orbstheorem> I'm just sleep deprived, I mistyped an ip...
[03:58:28] <Orbstheorem> `10.13.255.5` is my old server -.-
[03:58:56] * Orbstheorem was about to pull up his kprobles...
[03:58:58] * Orbstheorem  * was about to pull out his kprobles...
[03:59:49] <Orbstheorem> Fun fact: the greenzz server uses the public address to register a user.
[04:00:34] <Orbstheorem> So, it was hitting my server on the netherlands, where I had an incorrect DNAT address.
[04:01:28] <Orbstheorem> So, when the package arrived at Minerva, it was routed into the bridge because it comes over a trusted link.
[04:02:33] <Orbstheorem> And the package would make it to the container, but then the container would try to respond and Minerva would just drop the response from the container, because the firewall doesn't allow it to talk to anybody else than Heimdaalr.
[04:03:41] <Orbstheorem> But I misread `10.13.255.5` (Hellendaal over Bifrost) and confounded it with `10.231.255.5` (Greenzz container on Minerva).
[04:03:53] <Orbstheorem> So, I thought I had a routing loop.
[04:04:07] <Orbstheorem> But it was just firewall behaving as expected c:
[04:04:19] <Orbstheorem> Orbstheorem: Anyway, back to this.
[04:04:37] <Orbstheorem> So, since the packages were being silently discarded, the client was waiting
[04:04:39] <Orbstheorem> And waiting
[04:04:45] <Orbstheorem> And timed out once every 20min
[04:05:16] <Orbstheorem> But since the influxdb client and the server RPC are asynchronous, the only symptom would be that clients (the android app) were unable to register new accounts.
[04:05:48] <Orbstheorem> The RPC would process everything else, but that single service (since I have 1 worker for talking to influx).
[04:06:57] <Orbstheorem> And ofc, successive attempts to create accounts would also be stalled, until the client times-out, but since the transport (websocket) is still connected, it would just trigger an invalid state exception, which in the client was managed locally within the theadscope of the widged that invoked the method over RPC.
[04:07:36] <Orbstheorem> So, the error in the client was something like 'Cannot perform this action at the moment'.
[04:07:45] <Orbstheorem> Which is a pretty good error.
[04:08:33] <Orbstheorem> But absolutely none of the messages made me think where the problem may be coming from.
[04:08:36] <Orbstheorem> I guess I should have added better logging to the influxdb agent on the server.
[04:08:50] <Orbstheorem> (The influxdb agent is used exclusively for user management atm.)
[04:14:19] * Orbstheorem uploaded an image: (705KiB) < https://libera.ems.host/_matrix/media/r0/download/orbstheorem.ch/xYXvevWWdtUxuvcCjNNsEmBH/image.png >
[04:14:23] <Orbstheorem> It's alive \o/
[04:15:38] <Orbstheorem> s/packages/packets/
[12:30:09] *** Quits: sunyibo[m] (~dorschgnu@2001:470:69fc:105::f0f) (Quit: You have been kicked for being idle)
[13:17:01] <artectrex[m]> How would I go about using docker images on nix?
[13:17:11] <artectrex[m]> in a nix-y way
[13:19:39] <artectrex[m]> for example, there's a jellyfin service on nix, but I don't trust it, how would I put the jellyfin `docker run` command in my nix config?
[14:03:58] <Orbstheorem> https://gitlab.com/roosemberth/dotfiles/-/blob/master/nix/machines/containers/powerflow.nix
[14:39:32] <artectrex[m]> Oh that looks not too bad
[14:39:59] <artectrex[m]> I'd found out about the virtualisation.oci-containers thingies but the documentation really isn't what it should be
[15:25:13] <artectrex[m]> <Orbstheorem> "https://gitlab.com/roosemberth/..." <- It's weird you can put :latest in there, I thought it was supposed to be the same everytime you "redeploy" a config (or whatever the term is)
[15:44:32] <Orbstheorem> Docker (and OCI containers  for that matter) have no notion of an artifact or archive, rather the ecosystem is more oriented towards solving stuff at runtime. While you could export the layers into some non standard dump, this is not done by the module. The only thing it does is to run at runtime whatever imagwe you specify; ideally we'd like to do it at build time and then hash the output, but nothing has been done about this.
[15:46:18] <artectrex[m]> https://ixmatus.net/articles/hocker-nixos-docker.html
[15:46:29] <Orbstheorem> Another problem is that images are not hash or content adressable: the ecosystem is used to modifying images without notice, so it would be a pain to maintain fixed output derivations.
[15:46:42] <Orbstheorem> artectrex[m]: !lufituaeB
[15:52:51] <Orbstheorem> Also, ofc it's haskell xD
[15:53:15] * Orbstheorem wants to try it out
[22:34:46] *** Quits: ChanServ (ChanServ@services.libera.chat) (shutting down)
[22:35:19] *** Joins: ChanServ (ChanServ@services.libera.chat)
[22:35:19] *** erbium.libera.chat sets mode: +o ChanServ
[23:25:11] <typedef[m]1> Quelqu'un pourrait me remettre dans le channel du comité d'ailleurs, comme mon dendrite est décédé?
[23:27:10] <artectrex[m]> Non je fais que confiance aux davids qui s'appellent admin
[23:28:50] <Orbstheorem> "Davids"
[23:29:21] <Orbstheorem> Do you know any other ids?
[23:29:46] <typedef[m]1> Je suis pas un bon admin j'ai cassé mon serveur :(
[23:30:01] <typedef[m]1> Ou il s'est cassé tout seul, plutôt
[23:30:02] <Orbstheorem> * any other [ids, * ids](https://en.wikipedia.org/wiki/Id,_ego_and_super-ego#Id)?
[23:30:27] <Orbstheorem> typedef[m]1: Pas grave, c'est comme ça que l'on apprend.
[23:30:46] * typedef[m]1 laughs in overwriting LUKS headers
