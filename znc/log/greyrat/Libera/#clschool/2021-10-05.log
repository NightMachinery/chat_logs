[00:07:50] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[00:09:59] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[00:10:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:11:46] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (Client Quit)
[00:12:11] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[00:14:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:31:21] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[00:39:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:44:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:55:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:23:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:28:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:45:54] *** Joins: macaw63 (~macaw@176.221.120.196)
[01:48:50] *** Quits: macaw (~macaw@176.221.120.196) (Ping timeout: 256 seconds)
[01:53:04] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[01:53:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:56:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:56:38] *** Quits: macaw63 (~macaw@176.221.120.196) (Quit: Client closed)
[02:21:52] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[02:23:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:27:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:42:22] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:51:09] *** Quits: CptKirk (~CptKirk@165.237.199.143) (Ping timeout: 256 seconds)
[03:04:54] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[03:05:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[03:05:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[03:06:07] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:10:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:14:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:26:05] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[03:32:07] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[03:33:54] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:36:59] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[03:41:17] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[03:41:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:44:09] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:53:56] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:13:56] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:16:59] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[04:21:53] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:22:53] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[04:23:26] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:25:01] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[04:25:01] *** Joins: greaser|q (greaser@user/greasemonkey)
[04:25:04] *** greaser|q is now known as GreaseMonkey
[04:25:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:29:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:38:52] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:39:34] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[04:41:29] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:42:37] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[04:50:25] <abrantesasf> Hi! Please, is "Common LISP: A Gentle Introduction to Symbolic Computation", by David Touretzky, a good book for a Lisp beginner like me?
[04:54:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:58:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:10:24] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[05:22:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:25:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:35:07] <hendursaga> It's not exactly an advanced book..
[05:36:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[05:37:30] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:48:11] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[05:52:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:56:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:56:19] *** Quits: sts-q (~sts-q@212.53.219.226) (Ping timeout: 252 seconds)
[05:59:01] *** Joins: sts-q (~sts-q@212.53.219.168)
[06:16:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:28:00] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[06:51:59] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[06:52:35] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:57:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[07:20:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:36:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:36:26] <lisp123> Is there a way to add a default value to a slot in a structure (DEFSTRUCT)?
[07:37:24] <lisp123> I can do it via a function around (make-....) but wanted to see if it was a slot option
[07:39:18] <beach> Isn't that what SLOT-INITFORM does in the description of DEFSTRUCT?
[07:39:48] <beach> I mean, I never use DEFSTRUCT, but I just whipped up the Common Lisp HyperSpec page and saw this meta-variable. 
[07:39:50] <White_Flame> (defstruct foo a (b 3)) defaults B to 3
[07:39:56] <White_Flame> and A to NIL, implicitly
[07:40:20] <lisp123> beach & White_Flame: Thanks. The CLHS was hard to follow
[07:42:15] <White_Flame> there's also (defstruct (foo (:constructor make-foo (a &optional (b 3))) a b) which reuses the function parameter options
[07:42:37] <White_Flame> just for completeness sake ;)  Obviously the slot definition one is simpler
[07:44:06] <beach> lisp123: I do recommend against the use of DEFSTRUCT, though.  Unless you have extreme performance issues.
[07:44:26] <beach> lisp123: And then, only if you can make sure using DEFSTRUCT will help.
[07:44:35] <lisp123> White_Flame: Thanks! Very confusing but the earlier option I can follow. Do you know how to add a doc string to defstruct?
[07:45:27] <lisp123> beach: I wanted to use structures as keys to a hash table via equalp, if I did it via a class it would be a custom-hash-table I believe, but this is also for learning
[07:45:49] <White_Flame> the docstring is right in the top description: defstruct name-and-options [documentation] {slot-description}*
[07:46:03] <White_Flame> same syntax as function docstrings
[07:46:34] <beach> lisp123: I see.
[07:46:52] <lisp123> White_Flame: Oh thanks
[07:48:40] <lisp123> beach: Also I read that equalp doesn't recursively look at components unless they are of the basic types, so at some point I just should come up with a framework to convert my classes so that their printed representation are unique, a reader macro to read them from REPL and finally a custom-hash-table based on the printed representation of classes (or just use strings at keys)
[07:49:00] <White_Flame> well, equalp compares components with equalp
[07:49:12] <White_Flame> also note that equalp ignores case of strings, which is a real problem, IMO
[07:50:56] <lisp123> White_Flame: You are right...thanks for flagging
[07:52:24] <beach> lisp123: When I occasionally have strange keys like that, I transform them into lists. 
[07:53:58] <White_Flame> depending on what you're doing, hashtables of hashtables isn't the end of the world, either
[07:54:07] <lisp123> beach: Interesting, thanks
[07:57:15] <lisp123> White_Flame: True
[07:57:44] <lisp123> Is there a way to add documentation strings for slots? Might be just me, but the CLHS page for defstructs is hard to read..
[07:58:42] <White_Flame> hmm, I dont' think so
[07:59:14] <lisp123> White_Flame: Thanks!
[08:03:46] <lisp123> Have to jet, White_Flame & beach, thanks for your help. I might just bite the bullet and learn how to use CL-CUSTOM-HASH-TABLES to be able to add hash tables with classes as keys, lack of documentation is too much a killer (either I write a custom hash table or a custom documentation for slots, the former seems more useful for the long term)
[08:04:18] <White_Flame> depending on the size of your table, you might want to use some simpler alist/plist solution first
[08:04:59] <White_Flame> complex hashtable keys do have a lot of potential issues
[08:05:15] <lisp123> White_Flame: Will be large (10,000+ easily)
[08:06:05] <White_Flame> or as beach mentioned, list-based compound keys instead of struct/obj-based
[08:06:19] <lisp123> But I take your point. A few trade offs to be made and consider.
[08:07:06] <lisp123> AH, I GET IT now! Yes that could work, have the components as elements of a list
[08:07:20] <White_Flame> yep
[08:08:02] <lisp123> Thanks both!
[08:08:09] <White_Flame> np
[08:10:45] <mfiano> defstruct slots are just functions, so just use #'(setf documentation)
[08:11:32] <mfiano> Not that by default there are both reader and writer functions
[08:11:48] <mfiano> Note*
[08:14:08] <beach> lisp123: Slots are implementation details and usually don't deserve any documentation.  Comments are the preferred way of communicating with the people who need to know about slots.
[08:21:07] <lisp123> beach: Got it thanks
[08:22:02] <lisp123> mfiano: Thanks good to know (although now I have abandoned structures again), but good to know
[08:22:50] <mfiano> Yes, structures shouldn't be used 99% of the time.
[08:22:58] <mfiano> Maybe even more than that :)
[08:29:07] <lisp123> :)
[08:29:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[09:27:13] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[09:40:20] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:26:12] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[10:45:51] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:26:03] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[11:36:01] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:42:30] *** Joins: selwyn (~selwyn@user/selwyn)
[11:42:40] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[11:54:23] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[11:54:37] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:55:00] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[11:59:33] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:17:51] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:53:40] *** Joins: random-nick (~random-ni@87.116.183.117)
[13:05:59] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[13:40:08] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 246 seconds)
[14:17:55] *** Joins: selwyn (~selwyn@user/selwyn)
[15:01:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:14:33] *** Joins: abrante5 (~abrantesa@2804:18:5025:37a5:2:1:4e6f:b180)
[15:17:29] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Ping timeout: 264 seconds)
[15:34:47] *** Quits: abrante5 (~abrantesa@2804:18:5025:37a5:2:1:4e6f:b180) (Read error: Connection reset by peer)
[15:36:34] *** Joins: abrantesasf (~abrantesa@189.50.14.58)
[15:49:41] *** Joins: makomo (~makomo@user/makomo)
[16:24:48] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[16:38:09] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Quit: ERC (IRC client for Emacs 26.3))
[16:59:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:00:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[17:01:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:02:50] *** Joins: Josh_2 (~user@37.25.47.130)
[17:32:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:35:25] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[17:38:29] *** Joins: makomo (~makomo@user/makomo)
[17:48:39] *** pjb is now known as Guest8892
[17:48:59] *** Quits: Guest8892 (~pjb@user/pjb) (Ping timeout: 246 seconds)
[17:49:32] *** Joins: pjb (~pjb@user/pjb)
[17:54:22] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:19:58] *** Quits: abrantesasf (~abrantesa@189.50.14.58) (Ping timeout: 252 seconds)
[18:21:05] *** Joins: macaw (~macaw@176.221.120.196)
[18:25:16] *** Joins: abrante19 (~abrantesa@177.79.117.129)
[18:40:23] *** Joins: thrig (~thrig@65.113.153.50)
[18:45:17] *** Quits: abrante19 (~abrantesa@177.79.117.129) (Read error: Connection reset by peer)
[18:45:35] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[19:05:59] *** Joins: abrante49 (~abrantesa@2804:18:5025:37a5:2:1:4e6f:b180)
[19:08:22] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Ping timeout: 252 seconds)
[19:09:56] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[19:10:34] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[19:18:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:26:42] *** Quits: abrante49 (~abrantesa@2804:18:5025:37a5:2:1:4e6f:b180) (Read error: Connection reset by peer)
[19:27:54] *** Joins: abrantesasf (~abrantesa@189.50.14.58)
[19:33:19] <Arcsech> What's the 1% where structs are preferable?
[19:33:27] <Arcsech> (or less than 1% as you note)
[19:34:11] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:34:36] <beach> When your implementation avoids an indirection compared to standard objects, AND, your application needs extreme performance, AND it can be shown that your application spends a significant amount of time in indirections to get to the slots of standard objects.
[19:35:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[19:35:26] <thrig> games, probably
[19:35:33] <beach> The first item is probably true for most current implementations, but won't be true for SICL.  The other two happen very rarely.
[19:35:53] <Arcsech> That's roughly what I figured, thanks. Basically structs are mostly useful over classes for optimization
[19:36:31] <beach> thrig: There is a tendency to over-estimate your need for performance, and use it as an excuse to apply low-level optimizations.
[19:37:12] *** Joins: aeth (~aeth@user/aeth)
[19:38:42] <thrig> otoh someone tried "objects! everywhere!" in a test suite like Java does and, lo, it was hella slow
[19:45:57] <edgar-rft> the ineresting thing would be to test if it was faster or slower than the same program written in java :-)
[19:46:33] <thrig> it was mentioned in some review of test suites for lisp. I went with fiveam and skipped the OO ones
[19:51:09] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:51:11] <edgar-rft> The programming paradigm (OOP, functional, imperative, whatever) should be choosen depending on the problem and the possibly best-fitting algorithm. Common Lisp even allows you to use all together in the same program, but what makes sense is on the programmer to choose. Using braindeadly one specific paradigm only because others say so rather seldom gives good results :-)
[19:52:46] *** Joins: makomo (~makomo@user/makomo)
[19:59:08] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:59:47] *** Joins: dra (~dra@2a04:4540:6407:9700:9579:ff72:bd33:3a9b)
[20:01:26] <beach> thrig: There is a spectrum though between "objects everywhere" and "objects nowhere".
[20:02:15] <beach> Plus, I am not convinced that current Java implementations have good algorithms for method dispatch.
[20:03:39] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[20:03:43] *** Joins: makomo_ (~makomo@user/makomo)
[20:04:27] <beach> thrig: And another typical situation is that, the same people who go for the nastiest code in the name of performance, are often the ones who have no idea how to design efficient data structures. 
[20:10:40] <pjb> Arcsech: beach: often we use defstruct because it's a more concise form to define entities.  In that case, it may be preferable to use a macro that has a similar syntax, but will expand to defclass and other forms. for example: https://github.com/informatimago/lisp/blob/master/common-lisp/cesarum/utility.lisp#L895
[20:12:14] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:12:55] <pjb> Arcsech: in general, instead of using defstruct or defclass, you may want to define your own macro to define entities in your problem domain.  define-entity
[20:25:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:34:45] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[20:35:16] *** Joins: hendursa1 (~weechat@user/hendursaga)
[20:50:05] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[21:07:01] *** Quits: dra (~dra@2a04:4540:6407:9700:9579:ff72:bd33:3a9b) (Quit: Leaving)
[21:21:54] *** Joins: selwyn (~selwyn@user/selwyn)
[21:29:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:29:46] *** Joins: random-nick (~random-ni@87.116.183.117)
[21:36:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[21:38:20] *** Joins: aeth (~aeth@user/aeth)
[21:42:20] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:42:47] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:46:58] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:05:58] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:08:40] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:11:29] <White_Flame> another fringe advantage might be memory footprint, if you have bajillions of 1 to 2 slot classes which are mostly used for stronger typing of your data; the structs could be a word or two smaller, which can be a significant percentage of the footprint at such small object sizes
[23:12:55] <White_Flame> *bajillions of instances of
[23:14:49] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:19:50] <lisp123> White_Flame: True
[23:20:49] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:29:05] <copec> I'm a perpetual novice++, but I use the most generalized constructs available and take the attitude that if I have to implement something lower level for performance, then it should be abstracted into a DSL where I can hide the optimization details anyways
[23:29:59] <copec> The primary optimization should be readability
[23:31:52] <lisp123> copec: I think that approach makes sense
[23:35:18] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:39:09] <copec> lisp123, When I was looking into it out of curiosity the game engine people like to use structs with :type of a vector or vector based type specifier
[23:39:11] <copec> which makes sense
[23:41:56] <lisp123> Interesting (but makes sense)
[23:59:10] *** Quits: abrantesasf (~abrantesa@189.50.14.58) (Ping timeout: 250 seconds)
