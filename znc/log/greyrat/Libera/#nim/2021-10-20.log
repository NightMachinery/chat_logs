[00:20:59] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[00:27:59] <CyberTailor> how to package nim software using distribution's native package manager?
[00:28:08] <CyberTailor> portage in particular
[00:33:32] *** Joins: rockcavera (~rc@192.12.113.192)
[00:33:32] *** Quits: rockcavera (~rc@192.12.113.192) (Changing host)
[00:33:32] *** Joins: rockcavera (~rc@user/rockcavera)
[00:36:24] <CyberTailor> i hope to find some documentation on this topic
[00:37:16] <FromDiscord> <Elegantbeef> It's a native binary so it should be similar to C/C++ no?
[00:37:37] <FromDiscord> <Elegantbeef> I've never packaged for a package manager so probably blissfully wrong
[00:43:37] <CyberTailor> it's similar only in simple compiler invocations
[00:47:12] <FromDiscord> <Elegantbeef> Yea i dont know anything so just assumed prebuilt binaries like apt
[00:56:21] <FromDiscord> <Slava0135> In reply to @exelotl "mathematically it makes no": in Java math.sign (or something) returns -1/1 as far as i remember
[00:57:02] *** Joins: Aherin (~jhjacobs8@e247093.upc-e.chello.nl)
[00:57:14] <Aherin> Nice!
[00:57:50] <FromDiscord> <Slava0135> ok it's called signum
[00:58:03] <FromDiscord> <Jan81> Even nicer!
[00:58:17] <FromDiscord> <Slava0135> tho it works on Double
[00:58:56] <FromDiscord> <Slava0135> why would you need a signum function that returns 0
[00:59:27] <FromDiscord> <Slava0135> because you can just compare for 0
[00:59:37] <FromDiscord> <Slava0135> if you really need
[01:00:57] <FromDiscord> <Slava0135> ~~it's free~~
[01:03:13] <FromDiscord> <Elegantbeef> Calculating direction of a vector
[01:03:28] <FromDiscord> <konsumlamm> because 0 is neither positive nor negative
[01:04:31] <FromDiscord> <Slava0135> true but
[01:05:33] <FromDiscord> <Elegantbeef> Exactly to me sign or signum is normalization of a 1D vector
[01:05:34] <FromDiscord> <Elegantbeef> `0` is a valid output of "no movement"
[01:08:14] <FromDiscord> <Slava0135> in normalization basically you divide each coordinate by length of the vector
[01:08:29] <FromDiscord> <Slava0135> 0/0
[01:08:41] <FromDiscord> <Slava0135> ~~world crashed~~
[01:09:28] <FromDiscord> <Slava0135> 0/0 can be any number
[01:09:59] <FromDiscord> <Slava0135> 0/0=x -> 0=0x
[01:10:51] <FromDiscord> <Elegantbeef> Well that's one method of normalization
[01:11:26] <FromDiscord> <Elegantbeef> Normalization can be thought as getting the direction of a vector
[01:11:36] <FromDiscord> <Slava0135> in float there is positive and negative zero
[01:12:33] <FromDiscord> <Elegantbeef> so really you're just getting `-` `+` or nothing 😛
[01:19:52] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[01:23:22] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:29:20] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Quit: Konversation terminated!)
[01:38:46] <FromDiscord> <exelotl> thoughts on `qsgn` (quick sign) for the version that only returns -1 or 1?
[01:41:08] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[01:56:20] <FromDiscord> <impbox [ftsf]> sgn1
[01:56:25] <FromDiscord> <impbox [ftsf]> sgn0
[01:56:34] <FromDiscord> <impbox [ftsf]> Makes more sense to me
[01:57:01] <FromDiscord> <impbox [ftsf]> Postfix is better since you already know you're looking for a sgn function
[02:14:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[02:16:25] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:18:20] *** Joins: vicfred (~vicfred@user/vicfred)
[02:29:00] *** Quits: supakeen (~user@python/site-packages/supakeen) (Ping timeout: 258 seconds)
[02:38:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[02:38:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:48:45] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[02:48:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[02:51:48] *** Gustavo6046_ is now known as Gustavo6046
[03:06:44] *** Joins: supakeen (~user@python/site-packages/supakeen)
[03:20:40] <FromDiscord> <demotomohiro> sig
[03:22:23] <FromDiscord> <demotomohiro> sgn± if you allow to use unicode in identifer
[03:25:38] <FromDiscord> <impbox [ftsf]> I find I usually want sgn to return 0 for 0 input when doing gameplay stuff
[03:25:56] <FromDiscord> <juan_carlos> `(sic)` operator. 🤣
[03:59:45] *** Joins: xet7 (~xet7@user/xet7)
[04:23:59] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:24:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[04:26:46] *** Gustavo6046_ is now known as Gustavo6046
[04:35:56] *** Quits: Egeon (~kaliyuga@c-76-22-110-235.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[04:37:25] *** Joins: Egeon (~kaliyuga@2601:601:200:5b30:ab21:ed09:ae59:d58d)
[04:46:25] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:47:11] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[04:49:26] *** Gustavo6046_ is now known as Gustavo6046
[05:09:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[05:10:41] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:44:22] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[05:47:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:06:59] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:27:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[06:28:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:50:41] <FromDiscord> <Rika> In reply to @exelotl "hmm I just noticed": sgn looks like a heaviside step that goes into the negative instead of 0
[07:05:32] <FromDiscord> <geekrelief> Anyone know how I can get the my custom pragma type? https://play.nim-lang.org/#ix=3Cgo
[07:09:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[07:09:27] <FromDiscord> <Elegantbeef> Copy the code and dont return a tuple
[07:09:56] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:11:28] <FromDiscord> <geekrelief> In reply to @Elegantbeef "Copy the code and": Sorry I don't follow.  What code? What tuple?
[07:12:12] <FromDiscord> <Elegantbeef> in 1.6 this will work https://play.nim-lang.org/#ix=3Cgq
[07:12:44] <FromDiscord> <Elegantbeef> The `getCustomPragmaVal` gets a tuple of `(key: val)` weirdly
[07:13:39] <FromDiscord> <geekrelief> oh, ok, thx
[07:14:05] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Cgr
[07:15:37] <FromDiscord> <Elegantbeef> Soo that `p.len == 2` should actualyl be `p.len == 2 or (p.len  == 3 and ($(p[^1]).endsWith(":type")) ` or something more sane
[07:16:15] <FromDiscord> <geekrelief> I'm not familiar with this syntax `cp: typed{nkSym}` does that mean `cp` is a NimNode of kind `nnkSym` or something?
[07:16:33] <FromDiscord> <Elegantbeef> `cp` is typed but will only match if it's a symbol
[07:16:46] <FromDiscord> <Elegantbeef> It's apart of the experimental pattern matching for macros
[07:16:57] <FromDiscord> <Elegantbeef> Actually it might be more than just for macros
[07:17:06] <FromDiscord> <Elegantbeef> But it allows you to do specific operations in specific cases
[07:17:30] <FromDiscord> <geekrelief> is that covered in the docs?
[07:17:37] <FromDiscord> <Elegantbeef> Experimental yes
[07:17:49] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual_experimental.html#term-rewriting-macros-pattern-operators
[07:18:37] <FromDiscord> <Elegantbeef> term rewriting and pattern matching is quite powerful stuff 😀
[07:19:14] <FromDiscord> <Elegantbeef> But yea make an issue or PR for this issue for this
[07:19:30] <FromDiscord> <geekrelief> ok
[07:19:32] <FromDiscord> <geekrelief> thanks
[07:20:02] <FromDiscord> <Elegantbeef> No problem, the latter fix i mentioned is probably preferable, might be able to do `p[1].symKind == nskType` instead
[07:21:52] <FromDiscord> <Elegantbeef> yea the sym way might be better
[07:21:59] <FromDiscord> <Elegantbeef> Less error prone 😀
[07:22:13] <FromDiscord> <Elegantbeef> I guess i'm assuming you're making a PR and not just an issue 😛
[07:23:28] <FromDiscord> <Elegantbeef> Also you'll be happy to know i've actually started on writing tests for nimscripter, so bigrewrite is almost actually released 😀
[07:24:56] <FromDiscord> <geekrelief> In reply to @Elegantbeef "I guess i'm assuming": I just made an issue.  I need to look at the code more closely.  It's my first time using custom pragmas, and it's getting late for me.
[07:26:41] <FromDiscord> <Elegantbeef> Yea i've pretty much never used them
[07:30:22] <FromDiscord> <geekrelief> I'll create a PR tomorrow.  Thanks beef! 😄
[07:31:00] <FromDiscord> <Elegantbeef> No problem, really like that `{.all.}` easy fixes, though still think if i see it in any actual code i'll cry
[07:31:53] <FromDiscord> <Elegantbeef> Also where's pmunch, we need 1.6 on playground!
[07:33:26] <FromDiscord> <geekrelief> In reply to @Elegantbeef "No problem, really like": That is nice.
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:12] <FromDiscord> <impbox [ftsf]> {.all.} sounds dreamy for working around library issues
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:01] <FromDiscord> <Elegantbeef> Yea, i'm using the privateaccess part for getting around private fields in nimscripter
[07:37:06] <FromDiscord> <Elegantbeef> Quite a bit of power with it
[08:00:05] <FromDiscord> <dilawar (Dilawar Singh)> Any `pathlib` (python) like  library in nim? I looking for cross-platform way to handle filesystem paths.
[08:01:00] <FromDiscord> <Rika> `os`
[08:01:10] <FromDiscord> <Elegantbeef> `std/os` 😛
[08:01:59] <FromDiscord> <Rika> `beef you little piece of sh`
[08:02:12] <FromDiscord> <dilawar (Dilawar Singh)> Thanks. I wanted to make sure that std/os is good enough.
[08:02:26] <FromDiscord> <Elegantbeef> It does have the wonderful little `/` operator
[08:02:40] <FromDiscord> <dilawar (Dilawar Singh)> You never know if there is a better option in the wild \:)
[08:03:14] <FromDiscord> <Elegantbeef> The compiler does have typesafe path library, if that's your sort of tea
[08:05:47] <FromDiscord> <dilawar (Dilawar Singh)> I always prefer typesafe addon in my tea 😉. Thanks for info.
[08:10:45] <FromDiscord> <geekrelief> In reply to @Elegantbeef "I guess i'm assuming": created a PR thanks! https://github.com/nim-lang/Nim/pull/19021  Looking forward to the nimscripter update!
[08:11:46] <FromDiscord> <Elegantbeef> Speaking of nimscripter i'm still questioning the usage of `Option[Interpreter]` might move to an exception only version just for consistency across the board
[08:13:06] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[08:16:12] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:23:52] <FromDiscord> <Rika> balls deep in result types, bet you wont
[08:24:29] <FromDiscord> <Elegantbeef> Lol
[08:40:33] <NimEventer> New Nimble package! opencolor - Nim bindings for Open color, see https://github.com/Double-oxygeN/opencolor.nim
[08:49:39] <NimEventer> New thread by Nnahito: Continuous use of parseJson causes software crash, see https://forum.nim-lang.org/t/8518
[09:04:13] *** Joins: andinus (andinus@tilde.institute)
[10:22:43] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[10:24:07] *** Joins: |smlckz| (smlckz@user/smlckz)
[10:29:24] *** Joins: Yardanico_ (~quassel@2a01:4f8:c2c:df22::2)
[10:33:47] *** Joins: tiorock (~rc@192.12.113.197)
[10:33:47] *** Quits: tiorock (~rc@192.12.113.197) (Changing host)
[10:33:47] *** Joins: tiorock (~rc@user/rockcavera)
[10:33:47] *** rockcavera is now known as Guest3786
[10:33:48] *** Quits: Guest3786 (~rc@user/rockcavera) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[10:33:48] *** tiorock is now known as rockcavera
[10:39:50] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Yardanico (~quassel@2a01:4f8:c2c:df22::2) (Ping timeout: 260 seconds)
[10:47:26] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[11:07:55] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:24:48] <PMunch> @Yardanico, tried out Sciter in Futhark yet?
[11:25:14] <FromDiscord> <Yardanico> Sorry, not yet, didn't really touch my PC at all in the last few days
[11:25:42] <PMunch> No worries :) I'm just considering to write a small article on Futhark, and I wanted to know if it worked or not :)
[11:26:00] <FromDiscord> <Elegantbeef> Pmunch playground needs updated to 1.6 😛
[11:26:28] <FromDiscord> <Elegantbeef> Or does it do that automagically?
[11:26:33] <PMunch> Hmm, that should've been done automatically..
[11:26:55] <PMunch> It should, but it shouldn't take it more than about an hour I think..
[11:27:45] <PMunch> I mean I've been using Futhark myself for multiple projects already and it's working great! But Sciter is quite different from the things I've been wrapping
[12:18:42] <PMunch> @Elegantbeef, apparently the new Nim version fails to build: /build/Nim/lib/pure/random.nim(221, 11) Error: invalid argument for: high
[12:23:34] <PMunch> Seems like it was caused by using the old csources repo and not csources_v1
[12:23:43] <PMunch> Are the new csources backwards compatible?
[12:24:54] <PMunch> Ah, and build.sh is gone..
[12:25:02] <PMunch> So my script can't be backwards compatible any longer..
[12:25:05] <PMunch> Well that sucks..
[12:25:28] <|smlckz|> where did it go? ;P
[12:27:20] <PMunch> Ah never mind, it was there I think, I was just cd-ing into the wrong directory
[12:44:18] <FromDiscord> <Hamid Bluri> hey, is there any examples of using `Lock` in Nim?
[12:48:29] <FromDiscord> <Hamid Bluri> In reply to @Rika "`beef you little piece": piece of `shell`
[12:50:28] <NimEventer> New thread by Vsajip: Debugging a SIGSEGV, see https://forum.nim-lang.org/t/8519
[12:53:36] <FromDiscord> <Rika> Is there a reason many people don’t opt for using Status’ serialisation library?
[12:54:43] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:57:36] <FromDiscord> <Hamid Bluri> `status-im` ?
[13:03:22] <FromDiscord> <tandy> what does it mean when someone defines a proc like so? `proc search[T, U](x: T, needle: U): union(U | None) =`
[13:03:37] <FromDiscord> <tandy> the `[]` bit before taking parameters
[13:03:43] <FromDiscord> <Elegantbeef> a generic procedure
[13:04:02] <FromDiscord> <tandy> i see, so the types T, U are generic
[13:04:13] <FromDiscord> <Elegantbeef> Yes
[13:04:21] <FromDiscord> <Elegantbeef> Well generic params
[13:04:26] <FromDiscord> <Elegantbeef> The entire proc is generic
[13:04:43] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#generics
[13:11:28] <FromDiscord> <Hamid Bluri> beef do you know how can i use locks in nim?
[13:11:37] <FromDiscord> <Hamid Bluri> any examples?
[13:11:44] <FromDiscord> <Hamid Bluri> or articles
[13:11:49] <FromDiscord> <Elegantbeef> Using thread locks?
[13:11:55] <FromDiscord> <Hamid Bluri> yes
[13:12:50] <FromDiscord> <Elegantbeef> Small example https://nim-lang.org/docs/threads.html#examples
[13:13:22] <FromDiscord> <Hamid Bluri> thank u
[13:13:28] <FromDiscord> <Elegantbeef> I can also give a small explanation that they're just for preventing threads from accessing resources at the same time so you jut lock/unlock them where an edge case could occur
[13:13:42] <FromDiscord> <Elegantbeef> Aside from that i cannot help much, especially as i'm about to go to sleep, sorry
[13:14:30] <FromDiscord> <Hamid Bluri> it's 13:14 here : D it was really helpful
[13:14:47] <FromDiscord> <Elegantbeef> It's almost 4 am
[13:14:47] <FromDiscord> <Elegantbeef> I'm a terrible human
[13:55:01] <FromDiscord> <impbox [ftsf]> But a great beef
[14:17:07] <FromDiscord> <dilawar (Dilawar Singh)> Is there a way to install a package to non-standard directory using`nimble`? Like `--prefix` option in `pip`?
[14:19:12] <PMunch> !eval echo NimVersion
[14:19:16] <NimBot> 1.6.0
[14:19:16] <PMunch> @Elegantbeef ^
[14:19:43] <PMunch> @dilawar_(Dilawar_Singh), --nimbleDir probably
[14:20:21] <FromDiscord> <Yardanico> @PMunch it won't work if you use underscores, instead you can just use the part of a name IIRC
[14:20:29] <FromDiscord> <Yardanico> try just with @dilawar , I think it should work
[14:20:39] <FromDiscord> <Yardanico> ah, nvm, they're from matrix so even that wouldn't work
[14:21:54] <PMunch> Oh right, I've set up my HexChat to extract the username from FromDiscord messages and replace FromDiscord with the nick. Since IRC names can't have spaces it replaces those with underscores
[14:22:11] <PMunch> So to me you all look like IRC users again now :)
[14:22:51] <PMunch> Except that I get a message like: "@Yardanico (someone@discord.server) has joined" the first time someone talks in the Discord room
[14:23:05] <FromDiscord> <Yardanico> interesting
[14:25:23] <PMunch> Haven't made it change the colour though, so it still uses the FromDiscord nick colour. But it's a start
[14:36:09] <FromDiscord> <geekrelief> In side of a macro, is there a way to get more information about a NimNode that is a typedesc?  I have a macro that receives a proc with a custom pragma that takes a typedesc.  I want to check if that typedesc is for a proc.
[14:37:04] <FromDiscord> <Rika> What?
[14:37:57] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3ChH
[14:38:16] <FromDiscord> <geekrelief> I want to be sure `foo` is a proc and not an object
[14:38:39] <FromDiscord> <geekrelief> (edit) "https://play.nim-lang.org/#ix=3ChH" => "https://play.nim-lang.org/#ix=3ChI"
[14:39:37] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3ChJ
[14:40:06] <FromDiscord> <geekrelief> This is for C interop where `foo` and `bar` are imported types.
[14:40:51] *** Quits: ozzz (~oz@46.49.41.80) (Remote host closed the connection)
[14:46:33] <FromDiscord> <haxscramper> you have a macro that does `macro zzz(a: proc(typedesc))`?
[14:46:38] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3ChN
[14:47:48] <FromDiscord> <geekrelief> In reply to @haxscramper "you have a macro": more like `macro zzz(a: proc(){.customPragma.})`
[14:48:06] <FromDiscord> <geekrelief> (edit) "proc(){.customPragma.})`" => "proc(){.customPragma:typedesc.})`"
[14:49:56] <FromDiscord> <haxscramper> I don't think the `tm_type: tm_the_truth_create_types` part is going to be stored in typedesc information anywhere
[14:50:01] <FromDiscord> <haxscramper> certainly not in a type
[14:50:19] <FromDiscord> <haxscramper> you might have a chance if you accept `typed` node, symbol for the proc you defined
[14:50:26] <FromDiscord> <haxscramper> and then `getTypeInst/getTypeImpl/getType`
[14:50:35] <FromDiscord> <haxscramper> basically somehow original definition of the proc
[14:51:00] <FromDiscord> <haxscramper> But even with these `getTypeXXX` I don't really know how to do this
[14:51:19] <FromDiscord> <haxscramper> but with `typedecs[]` it is almost guaranteed to be impossible, since `tm_type: tm_the_truth_create_types` is not a part of the type
[14:51:26] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3ChP
[14:51:36] <FromDiscord> <geekrelief> Basically the `nnkProcTy` part
[14:52:10] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3ChQ
[14:52:49] <FromDiscord> <geekrelief> Yeah, I'm afraid I couldn't find anything in `std/macros` to get more info.
[14:53:00] <NimEventer> New Nimble package! xidoc - A consistent markup language, see http://xidoc.nim.town/
[15:06:56] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3ChX
[15:07:07] <FromDiscord> <geekrelief> (edit) "https://play.nim-lang.org/#ix=3ChX" => "https://play.nim-lang.org/#ix=3ChY"
[15:07:18] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3ChZ
[15:10:41] <FromDiscord> <geekrelief> Yeah with that I can check the kind of the third child to see if it's a proc
[15:11:05] <FromDiscord> <lenis> Does anyone know the state of incremental compilation? Importing a large module in nim 1.6.0 still adds seconds to the compile time for every change
[15:11:28] <FromDiscord> <haxscramper> IC is delayed with no concrete release date
[15:11:33] <FromDiscord> <Yardanico> In reply to @lenis "Does anyone know the": there was some work done on it, but it's still not complete and not default
[15:12:15] <FromDiscord> <lenis> That's unfortunate 😦
[15:18:02] <FromDiscord> <haxscramper> I'm not sure what would be the aim of 1.8 release
[15:18:18] <FromDiscord> <haxscramper> 2021 was supposed to be the year of tooling, at least I remember talks about this
[15:18:41] <FromDiscord> <haxscramper> arc/orc is for 2.0 since they are not ABI compatible
[15:18:53] <FromDiscord> <haxscramper> https://forum.nim-lang.org/t/7983
[15:19:35] <FromDiscord> <haxscramper> probably some of the features that are currently experimental
[15:19:55] <FromDiscord> <haxscramper> like concepts, IC, lazy compilation, or something else
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:50:10] <FromDiscord> <exelotl> it's nice to see that view types are a little more usable now, looking forward to them becoming stable
[15:58:19] <FromDiscord> <exelotl> I have really mixed feelings about custom numeric literals lol
[15:58:34] <FromDiscord> <Rika> Why
[15:59:04] <FromDiscord> <exelotl> `fp(1/32)` is way nicer than `1'fp/32`
[15:59:26] <FromDiscord> <haxscramper> but compare it to fp(1) vs 1'fp
[15:59:42] <FromDiscord> <Rika> You can use both anyway
[15:59:52] <FromDiscord> <haxscramper> you'know usual use case is `<lit>'<suffix>`
[15:59:56] <FromDiscord> <Rika> It’s not like you’re forced to use literals
[16:00:26] <FromDiscord> <haxscramper> also those are two distinct operations
[16:00:32] <FromDiscord> <haxscramper> divide 1'fp by 432
[16:00:35] <FromDiscord> <haxscramper> and turn 1/32 into fp
[16:00:41] <FromDiscord> <haxscramper> whatever fp is
[16:01:06] <FromDiscord> <exelotl> Fixed point number with 8 bits of precision
[16:01:09] <FromDiscord> <Rika> Probably fixed point
[16:01:12] <FromDiscord> <exelotl> Ye
[16:01:22] <FromDiscord> <impbox [ftsf]> floppy point
[16:01:25] <FromDiscord> <exelotl> It just feels weird mixing the two approaches just to save a single character where previously there was 1 uniform approach
[16:01:32] <FromDiscord> <Rika> Though that makes it ambiguous with “floating point” given they both start with f
[16:01:56] <FromDiscord> <impbox [ftsf]> 1.0'x for fiXed?
[16:02:12] <FromDiscord> <Rika> Also can be confused with hexadecimal
[16:02:14] <FromDiscord> <impbox [ftsf]> 1.0'8.8
[16:02:20] <FromDiscord> <impbox [ftsf]> For 8.8 fixed?
[16:02:20] <FromDiscord> <exelotl> Yeah x makes me think of hex lol
[16:02:26] <FromDiscord> <Rika> Just use “fix” IMO but whatever that’s besides the point
[16:02:47] <FromDiscord> <impbox [ftsf]> I guess you can't use numbers as the name
[16:02:53] <FromDiscord> <Rika> Custom number literals are useful for numbers that can’t be represented by any built in number types like for big integers
[16:03:02] <FromDiscord> <Yardanico> exactly
[16:03:03] <FromDiscord> <impbox [ftsf]> 1.0'fix8
[16:06:40] <FromDiscord> <lbart> hi!↵I was away from nim last months, but I miss Nim 🙂↵Have the tools evolved (I'm thinking about code coverage and static analysis. DrNim IIRC?)
[16:08:52] <FromDiscord> <haxscramper> no, not really. Current release was mostly focused on library and core language improvements, not so much on tooling
[16:09:42] <PMunch> Ooh, fixed point literals would be super neat
[16:10:33] <PMunch> And cool, I was just able to use Futhark to wrap Gtk3 and WebKitGtk in order to have a Gtk application which loads a website
[16:10:58] <FromDiscord> <Rika> Cool
[16:13:16] <PMunch> All the wrapping is being done fully automatically, I just tell it which header files I wanted to import, rewrote some sample code to use nil instead of NULL and removed some semicolons and bish bash bosh there's my application
[16:16:08] <FromDiscord> <konsumlamm> In reply to @exelotl "It just feels weird": the point is not to save characters, the point is to have nicer syntax for custom number literals (1/32 is no literal btw), so that you can for example have bigint literals (which would need strings otherwise, since the numbers can be arbitrarily large)
[16:19:20] <FromDiscord> <exelotl> oh yeah sorry, I don't mean in general, just in my own project where I was already using `fp()` everywhere 😅
[16:25:48] <FromDiscord> <Rika> as ive said
[16:25:50] <FromDiscord> <Rika> you dont need to use it
[16:43:44] *** Quits: andinus (andinus@tilde.institute) (Remote host closed the connection)
[16:44:57] *** Joins: arkurious (~arkurious@user/arkurious)
[17:07:52] <NimEventer> New post on r/nim by PMunch: Is Nim a Transpiler?, see https://reddit.com/r/nim/comments/qc11b8/is_nim_a_transpiler/
[17:08:33] <FromDiscord> <Yardanico> finally, an article
[17:08:46] <PMunch> Finally?
[17:09:27] <FromDiscord> <Yardanico> yes, about nim + "transpiler"
[17:09:57] <PMunch> Ah yes, I wrote it yesterday after someone asked the question for the millionth time :P
[17:10:09] <PMunch> Figured we needed an article we could just link to
[17:10:27] <FromDiscord> <Yardanico> make a forum thread too
[17:10:38] <FromDiscord> <Yardanico> and post on HN :DD
[17:12:55] <PMunch> That sounds like a nice way to get a really nice bikeshedding discussion going :P
[17:13:27] <NimEventer> New thread by PMunch: Is Nim a Transpiler?, see https://forum.nim-lang.org/t/8520
[17:13:48] <supakeen> well it's easy, you don't need to read the article
[17:13:54] <supakeen> any article with a question as a headline can be ansewred with 'no'
[17:14:24] <FromDiscord> <haxscramper> Is 1+1=2
[17:14:24] <FromDiscord> <haxscramper> Is 1+1=2?
[17:14:36] <FromDiscord> <tandy> lol
[17:14:55] <FromDiscord> <haxscramper> And also articles with "what/where/when/why" etc.
[17:14:57] <FromDiscord> <haxscramper> "why do X?"
[17:15:05] <FromDiscord> <haxscramper> and the answer is "no"
[17:16:20] <FromDiscord> <Rika> ??
[17:16:21] <FromDiscord> <Rika> "why use nim?" "no" what?
[17:17:35] <FromDiscord> <Yardanico> In reply to @haxscramper "And also articles with": so in your opinion "Why Nim is not a transpiler" is a better title than "Is Nim a transpiler?"
[17:17:43] <FromDiscord> <Yardanico> i still don't quite get your messages :D
[17:18:22] <FromDiscord> <haxscramper> Need to put this on hn to get the real pointless discussion started
[17:22:34] <FromDiscord> <Rika> please dont
[17:22:41] <FromDiscord> <Rika> im at my limit for today
[17:22:44] <FromDiscord> <Rika> tomorrow is fine
[17:23:15] <FromDiscord> <haxscramper> no, I won't do this of course, because that's the last think I really need
[17:23:23] <PMunch> Too late @Rika: https://news.ycombinator.com/item?id=28930684
[17:23:53] <FromDiscord> <Rika> man
[17:24:17] <FromDiscord> <Rika> its almost tomorrow, ill just not read it for now
[17:24:24] <FromDiscord> <Rika> no comments yet so yeah thatll be fun
[17:27:30] <FromDiscord> <Yardanico> 🍿
[17:27:59] <FromDiscord> <Rika> now im fucking nervous god this is gonna be a shitshow
[17:28:17] <FromDiscord> <Yardanico> why are you nervous
[17:29:16] <FromDiscord> <juan_carlos> I remember when someone said that Nim is a C preprocessor...
[17:29:29] <FromDiscord> <Rika> i mean
[17:29:47] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[17:29:48] <FromDiscord> <Rika> In reply to @Yardanico "why are you nervous": dunno, just am
[17:30:05] <FromDiscord> <Yardanico> just don't be nervous then :P
[17:30:17] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[17:32:06] *** Joins: Vladar (~Vladar@46.162.2.53)
[17:32:53] <FromDiscord> <Rika> lol
[17:33:54] <PMunch> @juan_carlos, yeah it's not exactly obvious why it isn't at first glance :P
[17:34:07] <PMunch> But I mean that's how C++ started out *shrugs*
[17:34:59] <FromDiscord> <Yardanico> don't tell anyone that C++ was a "transpiler" in the past
[17:36:04] <FromDiscord> <enthus1ast> "No this lang ist just a transpiler, it can't keep up with my magicx haxx0r skills"
[17:36:39] <PMunch> Oh well, I've gotta go. Have fun with the HN post :P
[17:36:40] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[17:37:25] <FromDiscord> <Yardanico> 9 points already
[17:37:31] <FromDiscord> <Yardanico> time to get my popcorn
[17:38:04] <tk> http://ix.io/3Cjc - is there any way to get the expected behaviour? The documentation claims that conversions between the base type and subrange will be implicit but not that conversions between subranges (even if they have the same range) will be implicit. Is there some way to get strict primitive type subtyping in nim?
[17:40:07] <FromDiscord> <enthus1ast> a = 6 ?
[17:40:22] <FromDiscord> <enthus1ast> is not in the range[0..5]
[17:40:30] <tk> It's commented. That's not what the issue is.
[17:40:50] <tk> The unexpected code is at the bottom. The last 4 lines.
[17:40:53] <FromDiscord> <enthus1ast> "# Does not compile as expected"
[17:41:07] <FromDiscord> <enthus1ast> oh man i must read \:D
[17:41:07] <tk> Right... It doesn't compile, which makes sense.
[17:41:23] <FromDiscord> <Rika> why would these not compile?
[17:41:25] <FromDiscord> <Rika> i mean
[17:41:30] <FromDiscord> <Rika> why would last four be unexpected
[17:41:35] <FromDiscord> <Rika> A and B are aliases
[17:41:42] <FromDiscord> <Rika> if you want them to be different use `distinct`
[17:41:52] <tk> Are they? Where does it say that a type defined the same is the same type?
[17:42:22] <FromDiscord> <Rika> one moment
[17:42:26] <FromDiscord> <Rika> internet slow
[17:42:35] <tk> Okay, I had not gotten so far as to reaching distinct. This does indeed solve my problem.
[17:42:36] <FromDiscord> <enthus1ast> yes that also hit me, once, did also not follow araqs explanation back then
[17:43:12] <tk> cool, thanks!
[17:43:51] <tk> Aside from not having a standard and some other issues relating linking nim is basically the perfect C replacement so far.
[17:45:22] <FromDiscord> <geekrelief> In reply to @tk "Are they? Where does": https://nim-lang.github.io/Nim/manual.html#type-relations-type-equality
[17:45:47] <tk> okay, thanks
[17:45:58] <FromDiscord> <enthus1ast> this enables the tuple i guess?
[17:46:09] <FromDiscord> <geekrelief> yeah
[17:46:10] <FromDiscord> <enthus1ast> tuple behaviour
[17:51:46] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[17:52:35] *** Quits: LyndsySimon (sid34452@id-34452.lymington.irccloud.com) (Ping timeout: 264 seconds)
[17:52:52] <FromDiscord> <haxscramper> 9 comments 21 points
[17:52:55] <FromDiscord> <haxscramper> here we ggo
[17:53:50] *** Joins: notchris (sid181145@hampstead.irccloud.com)
[17:54:21] *** Joins: LyndsySimon (sid34452@id-34452.lymington.irccloud.com)
[17:57:33] <FromDiscord> <Rika> nooooo
[17:58:46] <FromDiscord> <Rika> this one by ivanbakel
[17:58:47] <FromDiscord> <Rika> i like it
[18:32:43] <FromDiscord> <dom96> Good point by k about gatekeeping
[18:33:46] <FromDiscord> <Rika> i like that too
[18:34:02] <FromDiscord> <Rika> also the reply from modernmech
[18:34:11] <FromDiscord> <dom96> also this https://news.ycombinator.com/item?id=28931264
[18:34:27] <FromDiscord> <Rika> `In actual usage, the main difference between a compiler and a transpiler is usually the speaker's affiliation with JS communities.`
[18:34:29] <FromDiscord> <Rika> lmfao
[18:34:40] <FromDiscord> <dom96> really the title of PMunch's blog post should be "The word transpiler is stupid"
[18:36:57] <FromDiscord> <dom96> some very interesting historical insight in there
[18:40:37] <FromDiscord> <Rika> yeah im not hating the responses as much as i thought i would
[18:44:55] <FromDiscord> <reilly> Can I echo the capacity of a cstring?
[18:46:11] <FromDiscord> <haxscramper> cstring does not have capacity
[18:46:28] <FromDiscord> <haxscramper> cstring is a C string for C backed, and Js string for Js backend
[18:46:31] <FromDiscord> <haxscramper> "common" string
[19:00:28] <FromDiscord> <reilly> sent a long message, see http://ix.io/3CjU
[19:01:34] <FromDiscord> <reilly> I also can't just pass in a string, because no matter the string's capacity (`newStringOfCap()`), entering a single character immediately crashes due to illegal storage access. It ends up implicitly converted to a cstring anyway.
[19:03:11] <FromDiscord> <Yardanico> In reply to @reilly "Okay, well, I'm using": hmm
[19:04:04] <FromDiscord> <Yardanico> @reilly I think the nim definition is a bit wrong in this case then
[19:04:22] <FromDiscord> <Yardanico> if igInputTextWithHint itself creates a string, you should probably pass pointer to a buffer to it
[19:05:26] <FromDiscord> <Yardanico> lemme try to do it myself
[19:06:52] <FromDiscord> <reilly> For the record, if I pass in `buf` as `""` and `buf_size` as some arbitrary number, it will still crash when typing a single character.
[19:07:09] <FromDiscord> <Rika> use string
[19:07:45] <FromDiscord> <Rika> then `str[0].addr.cstring` and `capacity` that you explicitly allocated with `newstringofcap` i guess?
[19:08:01] <FromDiscord> <Rika> maybe no need [0].addr
[19:08:09] <FromDiscord> <Rika> think `str.cstring` is right, i dont know
[19:08:51] <FromDiscord> <Yardanico> no that won't work
[19:09:03] <FromDiscord> <reilly> Nim implicity converts the string to a cstring anyway.
[19:09:10] <FromDiscord> <Yardanico> In reply to @reilly "Nim implicity converts the": that behaviour is deprecated
[19:09:13] <FromDiscord> <Rika> i dont think it does in the future
[19:09:13] <FromDiscord> <Rika> yes
[19:09:17] <FromDiscord> <Yardanico> In reply to @Yardanico "no that won't work": ah actually it will, yeah, if the bufSize is correct
[19:09:23] <FromDiscord> <Yardanico> @reilly
[19:09:28] <FromDiscord> <Yardanico> works for me
[19:09:31] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3CjW
[19:09:43] <FromDiscord> <reilly> In reply to @Yardanico "that behaviour is deprecated": I know it's deprecated, that's why I'm trying to avoid it 😛
[19:10:01] <FromDiscord> <Rika> the implicit convert is deprecated, the explicit is not
[19:10:08] <FromDiscord> <Yardanico> exactly
[19:10:34] <FromDiscord> <Rika> my english a bit weird right now, probably because i just did some japanese stuff
[19:11:31] <FromDiscord> <reilly> I'm noticing that `sizeof(s)` always returns 8, which is not very helpful...
[19:11:51] <FromDiscord> <Yardanico> In reply to @reilly "I'm noticing that `sizeof(s)`": it returns the size of the reference to the string data which is 8 and is correct, yes
[19:11:57] <FromDiscord> <Yardanico> check `s.len`
[19:12:05] <FromDiscord> <Rika> careful with len for cstring
[19:12:05] <FromDiscord> <Yardanico> oh yeah, actually, that code is a bit wrong
[19:12:17] <FromDiscord> <Rika> len for cstring is not constant time
[19:12:39] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3CjZ
[19:12:46] <FromDiscord> <Yardanico> with newString the string itself will _always_ be 128 chars so you'll have to strip
[19:12:54] <FromDiscord> <Yardanico> and you won't know if the spaces were done by the user or not
[19:13:07] <FromDiscord> <Rika> whats wrong with ofcap?
[19:13:11] <FromDiscord> <Yardanico> it doesn't work
[19:13:13] <FromDiscord> <Rika> does it just not work?
[19:13:28] <FromDiscord> <Rika> i need to test
[19:13:33] <FromDiscord> <Yardanico> well of course, because .len is 0
[19:13:53] <FromDiscord> <Rika> i see
[19:14:04] <FromDiscord> <Rika> the issue is because internal len is not updated i feel
[19:14:07] <FromDiscord> <Yardanico> one way is to do manual allocation I guess
[19:14:11] <FromDiscord> <Yardanico> @Rika yes, but that's not possible to do really
[19:14:14] <FromDiscord> <Rika> yes
[19:14:15] <FromDiscord> <Rika> i know
[19:14:36] <FromDiscord> <Rika> really think you need to do manual alloc/create
[19:14:44] <FromDiscord> <Rika> i recommend create tho
[19:15:28] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Ck0
[19:15:35] <FromDiscord> <Yardanico> and len changes correctly
[19:15:41] <FromDiscord> <Yardanico> because all other bytes are null
[19:15:47] <FromDiscord> <Rika> because len is not internal
[19:15:55] <FromDiscord> <Rika> rather not internally stored
[19:16:10] <FromDiscord> <Rika> its recomputed every call so no need to update anything
[19:16:43] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3Ck1
[19:16:47] <FromDiscord> <Yardanico> and of course you can define a callback for the input change event in imgui
[19:16:57] <FromDiscord> <Rika> damn double cstring just to make sure
[19:17:02] <FromDiscord> <Yardanico> In reply to @Rika "damn double cstring just": ah yeah :D
[19:17:12] <FromDiscord> <Yardanico> (edit) "https://play.nim-lang.org/#ix=3Ck1" => "https://play.nim-lang.org/#ix=3Ck2"
[19:17:16] <FromDiscord> <Rika> ah yes the cstring is made of cstring
[19:24:14] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[19:24:15] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[19:24:37] <FromDiscord> <reilly> Cool, that does work. Not super intuitive, but I'll get over it.
[19:26:36] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3Ck5
[19:26:52] *** Gustavo6046_ is now known as Gustavo6046
[19:31:30] <FromDiscord> <Yardanico> because ImGuiInputTextFlags
[19:31:40] <FromDiscord> <Yardanico> that's not related to nim, it's imgui-specific stuff
[19:31:46] <FromDiscord> <Yardanico> e.g. for callback to fire on edits you have to use CallbackEdit
[19:32:11] <FromDiscord> <Yardanico> `  igInputTextWithHint("", "duration", data, 9, CallbackEdit, cb)`
[19:32:14] <FromDiscord> <Yardanico> for example
[19:32:59] <FromDiscord> <Yardanico> https://github.com/ocornut/imgui/blob/master/imgui.h#L989↵https://github.com/nimgl/imgui/blob/master/src/imgui.nim#L327
[19:33:15] <FromDiscord> <Yardanico> you'll have to read the original imgui sources plenty :P
[19:38:05] <FromDiscord> <reilly> You have to tell ImGui that you want to use your callback? That's wack.
[19:39:01] <FromDiscord> <IsaacPaul> That's because there are a ton of different reasons for a callback
[19:39:17] <FromDiscord> <Yardanico> exactly, so the default is None
[19:39:28] <FromDiscord> <IsaacPaul> granted, they should ask for a reason when setting up the callback
[19:39:35] <FromDiscord> <Yardanico> In reply to @IsaacPaul "granted, they should ask": they do
[19:39:38] <FromDiscord> <IsaacPaul> oh
[19:39:48] <FromDiscord> <Yardanico> ImGuiInputTextFlags
[19:39:56] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/900415545239810068/unknown.png
[19:40:06] <FromDiscord> <Yardanico> this is both for setting up parameters of the input field and for callbacks
[19:41:13] <FromDiscord> <IsaacPaul> I see it now `..., flags: ImGuiInputTextFlags = 0.ImGuiInputTextFlags, ...`↵lol
[19:41:49] <FromDiscord> <reilly> In reply to @IsaacPaul "That's because there are": That makes enough sense, actually.
[19:48:40] <FromDiscord> <IsaacPaul> Using a literal to hold all the options is an interesting way of doing things... ↵I would at least use an abstraction over it..
[19:50:03] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3Ckd
[19:50:25] <FromDiscord> <Yardanico> wait you don't need to do this
[19:50:27] <FromDiscord> <Yardanico> just do `or`
[19:50:37] <FromDiscord> <Yardanico> `CharsDecimal or CallbackEdit` for example
[19:50:47] <FromDiscord> <Yardanico> nim's `or` already works as bit or for integers
[19:51:05] <FromDiscord> <reilly> Then why have `bitor()`? 🤨
[19:52:35] <FromDiscord> <IsaacPaul> bitor is probably inferring the wrong type. Make it explicit?
[19:54:41] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3Cke
[19:54:49] <FromDiscord> <Yardanico> what about `CharsDecimal or CallbackEdit`
[19:57:25] <FromDiscord> <Rika> In reply to @reilly "Then why have `bitor()`?": some people prefer it
[19:57:29] <FromDiscord> <Rika> its more explicit
[19:58:09] <FromDiscord> <Rika> it should work, odd that it doesnt
[19:58:35] <FromDiscord> <reilly> In reply to @Yardanico "what about `CharsDecimal or": `or` has no implementation for enums, so I have to include `ord()`. This still isn't enough though, as there's still a type mismatch between this expression (int literal) vs the argument type (`ImGuiInputTextFlags`).
[19:58:57] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Ckl
[19:58:59] <FromDiscord> <Rika> enums are arguably not something to be `or`ed but thats another discussion
[19:59:25] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3Ckm
[20:01:28] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3Ckp
[20:01:56] <FromDiscord> <Rika> oh
[20:01:58] <FromDiscord> <Rika> remove the generic then
[20:02:25] <FromDiscord> <Rika> AHHHH
[20:02:28] <FromDiscord> <Rika> I GET IT
[20:02:31] <FromDiscord> <reilly> But this is exactly what I was doing before...
[20:02:44] <FromDiscord> <reilly> w/o the generic, I mean.
[20:02:47] <FromDiscord> <Rika> i get it
[20:02:57] <FromDiscord> <IsaacPaul> maybe its passing a function pointer?
[20:02:58] <FromDiscord> <Rika> the or of the two enums is not itself a valid enum
[20:03:13] <FromDiscord> <reilly> But it's not supposed to be a valid enum.
[20:03:19] <FromDiscord> <Rika> the wrapper is simply wrong
[20:03:36] <FromDiscord> <Rika> In reply to @reilly "But it's not supposed": it has to be if you want to convert it to the type
[20:04:11] <FromDiscord> <Rika> the wrapper is wrong, there should be an `ImGuiInputTextFlag = enum ...` and an `ImGuiInputTextFlags = set[ImGuiInputTextFlag]` or so
[20:04:33] <FromDiscord> <IsaacPaul> ah makes sense
[20:05:23] <FromDiscord> <Rika> of course, this has some issues too in some case
[20:05:24] <FromDiscord> <Rika> (edit) "case" => "cases"
[20:05:34] <FromDiscord> <reilly> But just a few lines earlier, I'm doing the same thing with ImGuiWindowFlags. That expression evaluates to `8230`, but there's no valid enum for that... Unless the result just can't be greater than the maximum enum value?
[20:06:17] <FromDiscord> <Rika> ah
[20:06:18] <FromDiscord> <Rika> yes
[20:06:21] <FromDiscord> <Rika> thats perfect
[20:06:26] <FromDiscord> <Rika> yes thats the proper issue
[20:06:34] <FromDiscord> <Yardanico> In reply to @reilly "But just a few": the Nim definition is wrong, it can be bigger than the biggest enum value
[20:06:56] <FromDiscord> <Rika> then what is the issue?
[20:06:57] <FromDiscord> <Yardanico> i mean the arguments of the C function aren't exactly correct
[20:07:58] <FromDiscord> <Yardanico> `  igInputTextWithHint("", "duration", data, 9, ord(CharsDecimal) or ord(CallbackEdit), cb)` this works fine if you change the function definition to `proc igInputTextWithHint(label: cstring, hint: cstring, buf: cstring, buf_size: uint, flags: int = 0, callback: ImGuiInputTextCallback = nil, user_data: pointer = nil): bool {.importc: "igInputTextWithHint".}`
[20:08:10] <FromDiscord> <Yardanico> so it's an int and not ImGuiInputTextFlags
[20:08:23] <FromDiscord> <Yardanico> so as I said, it's yet another issue of the wrapper itself
[20:09:33] <FromDiscord> <reilly> But the arguments for creating a window do use ImGuiWindowFlags... `flags: ImGuiWindowFlags = 0.ImGuiWindowFlags`
[20:09:41] <FromDiscord> <reilly> So, what's the difference?
[20:10:41] <FromDiscord> <Yardanico> In reply to @reilly "So, what's the difference?": if it works, it works by an accident because the values aren't bigger than the biggest value in the enum
[20:10:45] <FromDiscord> <Yardanico> so nim allows it to compile
[20:10:53] <FromDiscord> <Yardanico> as I said, the wrapper definition for this function is wrong
[20:10:58] <FromDiscord> <Yardanico> and for all others that take Flags types too
[20:17:48] <Mister_Magister> man i really gotta learn async
[20:17:51] <Mister_Magister> idk how it works
[20:17:54] <NimEventer> New thread by JPLRouge: Min 1.6 help --passc:-flto  problème, see https://forum.nim-lang.org/t/8521
[20:17:55] <Mister_Magister> i just do waitfor
[20:18:01] <Mister_Magister> or await
[20:20:41] <FromDiscord> <Yardanico> waitFor is for global-level code, you mainly use it to start your async code
[20:20:53] <FromDiscord> <Yardanico> and you use `await` to wait for a completion of an async proc from another async proc
[20:21:18] <Mister_Magister> ye ye but i just gotta learn how to use async
[20:22:56] <FromDiscord> <Rika> you can almost think of `await` as "wait for this proc to finish, feel free to do some other stuff in the mean time
[20:23:40] <Mister_Magister> i know whats await and waitfor lol
[20:24:52] <FromDiscord> <Rika> then whats the issue
[20:31:58] <NimEventer> New thread by Sensanaty: Runtime Regex string replacing, see https://forum.nim-lang.org/t/8522
[20:38:51] <Mister_Magister> would someone be so kind as to remind me how do you type base in nim? like 0x10
[20:40:46] <Mister_Magister> 0b
[20:40:49] <Mister_Magister> 0x works too
[20:41:50] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3CkF
[20:41:53] <FromDiscord> <reilly> (edit) 
[20:42:50] <Mister_Magister> i just love using $ its like being super lazy just slap $ and boom its a string
[20:42:58] <FromDiscord> <Rika> !eval echo 0o777
[20:43:04] <NimBot> 511
[20:43:35] <Mister_Magister> thank @reilly
[20:48:44] <Mister_Magister> ha, i made udp server/client to discover at which ip address is the server
[20:50:15] <Mister_Magister> https://gist.github.com/Michal-Szczepaniak/6f7319c686aaaab1a6a0d273153e7936 feel free to judge me
[20:51:43] <FromDiscord> <dom96> Mister_Magister: what do you want to learn about async?
[20:51:47] <Mister_Magister> also, why can't i put - in file name
[20:51:57] <FromDiscord> <Yardanico> because - is not a valid character for a nim identifier
[20:51:58] <Mister_Magister> @dom96 how does it work, how to use it, how to make async stuff
[20:52:04] <FromDiscord> <Yardanico> and module names must be nim identifiers
[20:52:07] <FromDiscord> <Yardanico> (edit) "and module names must be ... nim" 03added "valid"
[20:52:55] <Mister_Magister> like, i want to have one program to have one TCP server for communication and one UDP server for discovering TCP server, and i assume i could make them both ASYNC and just do stuff when each of them receives some data
[20:53:10] <Mister_Magister> otherwise i have to use threads
[20:57:50] <FromDiscord> <enthus1ast> then "UDP server for discovering TCP server" could mean that you want to do ip multicast?
[20:58:24] <FromDiscord> <enthus1ast> if yes, then you could have a look at\: https://github.com/enthus1ast/nimMulticast
[20:58:42] <Mister_Magister> not multicast
[20:58:59] <Mister_Magister> also, i fail to find file name naming guidelines
[20:59:38] <FromDiscord> <enthus1ast> then idk what you mean \:)
[21:04:43] <FromDiscord> <dom96> yes, you should be able to have two servers using async
[21:05:02] <FromDiscord> <dom96> but why use UDP for discovery?
[21:08:23] <FromDiscord> <reilly> In reply to @Mister_Magister "also, i fail to": File names just have to be valid Nim identifiers. `file-name` is not a valid identifier because it would not be parsed as a single token, but as `file`, `-`, `name` ("file minus name").
[21:08:40] <Mister_Magister> oh
[21:08:43] <Mister_Magister> interesting
[21:08:53] <Mister_Magister> @dom96 why not
[21:09:25] <FromDiscord> <reilly> `file_name` is valid, because the underscore character is not used for anything else and causes no ambiguity.
[21:09:36] <Mister_Magister> mhm
[21:12:15] <FromDiscord> <enthus1ast> if you do not use multi/broadcast udp is not needed imho "for discovery", but idk what you're doing, maybe it is.↵One think to keep in mind for udp is that the os cannot tell you if there was someone listening, but for tcp it can
[21:13:12] <Mister_Magister> ofc its broadcast
[21:13:14] <FromDiscord> <enthus1ast> so your application must respond with something
[21:13:18] <Mister_Magister> how would you want to discover it otherwise
[21:13:23] <Mister_Magister> and for broadcast you need udp
[21:13:47] <Mister_Magister> you can't do tcp over broadcast
[21:14:06] <FromDiscord> <enthus1ast> i do not now what "it" is, but you can also do multicast for discovering, thats what i meant
[21:15:01] <FromDiscord> <enthus1ast> @dom96\: is 1.6 already installable via choosenim?
[21:15:11] <FromDiscord> <enthus1ast> latest version is see is 1.4.8
[21:15:13] <NimEventer> New post on r/nim by al_earner: The virus issue, see https://reddit.com/r/nim/comments/qc6hsz/the_virus_issue/
[21:15:38] <FromDiscord> <reilly> In reply to @enthus1ast "<@132595483838251008>\: is 1.6 already": Should be, that's what I did.
[21:16:03] <FromDiscord> <reilly> Make sure you're also using the latest version of choosenim: `choosenim update self`
[21:16:25] <FromDiscord> <enthus1ast> a↵choosenim update stable ↵it is
[21:16:43] <Mister_Magister> One question, https://nim-lang.org/docs/asyncnet.html there is proc serve() {.async.} = but i fail to see why is it being executed? asynCheck just adds callback if it fails right?
[21:17:15] <Mister_Magister> or is it because its calling that function it adds to "list of asyncs to process"
[21:17:37] <FromDiscord> <enthus1ast> this example could have use waitFor
[21:17:54] <FromDiscord> <enthus1ast> instead of asyncCheck and runForever
[21:17:56] <Mister_Magister> ye but i wanna keep it async
[21:18:04] <Mister_Magister> waitFor breaks asyncness
[21:18:09] <FromDiscord> <enthus1ast> it still is async
[21:18:10] <FromDiscord> <enthus1ast> no
[21:18:12] <Mister_Magister> yhes
[21:18:22] <FromDiscord> <enthus1ast> not it does not
[21:18:32] <FromDiscord> <enthus1ast> you do not call waitFor INSIDE an async proc
[21:18:53] <Mister_Magister> i mean this code sure but if you were to extend it then waitfor would break tihngs
[21:18:56] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3CkJ
[21:19:05] <Mister_Magister> for example if you wanted to add second serve function
[21:19:50] <Mister_Magister> but ye it doesn't answer my question anyway
[21:21:20] <FromDiscord> <enthus1ast> asynCheck registers the proc to the global dispatcher
[21:21:29] <FromDiscord> <enthus1ast> and runForever runs the async loop
[21:21:47] <Mister_Magister> yee thats what i thought
[21:21:48] <Mister_Magister> thank
[21:22:50] <FromDiscord> <enthus1ast> and if you wanna do your own loop,↵just call poll() every so often
[21:23:10] <Mister_Magister> another question, doesn't infinite loop inside async function break its asyncness?
[21:23:13] <FromDiscord> <enthus1ast> could do this in a eg. gui callback or so
[21:23:28] <FromDiscord> <enthus1ast> you must have a await somewhere
[21:23:37] <FromDiscord> <enthus1ast> eg ↵await sleepAsync(1\_000)
[21:23:43] <Mister_Magister> ah
[21:23:51] <Mister_Magister> await will allow other futures to run
[21:23:56] <FromDiscord> <enthus1ast> yes
[21:24:03] <Mister_Magister> i slowly begin to understand the async
[21:24:15] <Mister_Magister> will try to rewrite my discover example from before into async
[21:39:17] <Mister_Magister> HA IT WORKS
[21:39:20] <Mister_Magister> i love async now
[21:39:23] <Mister_Magister> i finally get it
[21:39:30] <Mister_Magister> thank you guys
[21:40:15] <FromDiscord> <Rika> In reply to @enthus1ast "asynCheck registers the proc": No, merely calling the async proc will register it afaik
[21:40:56] <Mister_Magister> asyncCheck registers callback in case of exception
[21:40:59] <Mister_Magister> thats what docs say
[21:41:24] <FromDiscord> <enthus1ast> yes you're right Rika
[21:44:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[21:44:38] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[21:46:19] <Mister_Magister> dang i wrote entire client code and it compiled and ran without issue
[21:46:22] <Mister_Magister> holy shite
[21:46:28] <Mister_Magister> you love when that happens
[21:47:40] <Mister_Magister> guys you can be proud of me i understood spirit of async https://gist.github.com/Michal-Szczepaniak/71593051595331bbcbae62a4ce19fb90
[21:47:53] *** Gustavo6046_ is now known as Gustavo6046
[21:48:01] <Mister_Magister> now i have tcp server and udp discovery server without threads
[21:52:32] <Mister_Magister> is it okay to use nonasync methods inside async methods?
[21:54:10] <FromDiscord> <Yardanico> yes, but be aware that if they're CPU intensive they block the whole thread
[21:54:18] <FromDiscord> <Yardanico> so all other background async tasks won't run
[21:55:13] <Mister_Magister> oki
[21:58:09] <Mister_Magister> async simplifies so many things for me
[22:14:04] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3Cl4
[22:15:15] <FromDiscord> <Yardanico> In reply to @jmgomez "hey guys, so Im": you should compile your nim app with --debugger:native
[22:18:29] <FromDiscord> <RattleyCooper> Anybody have a list of the 15 new stdlib modules that were added?
[22:18:36] <FromDiscord> <RattleyCooper> (edit) "added?" => "added for 1.6?"
[22:18:52] <FromDiscord> <Yardanico> In reply to @RattleyCooper "Anybody have a list": https://github.com/nim-lang/Nim/blob/version-1-6/changelogs/changelog_1_6_0.md#new-and-deprecated-modules
[22:18:56] <FromDiscord> <jmgomez> In reply to @Yardanico "you should compile your": Right, I was doing that
[22:19:07] <FromDiscord> <Yardanico> the blog article shows the link for the full changelog at the bottom
[22:19:09] <FromDiscord> <RattleyCooper> In reply to @Yardanico "https://github.com/nim-lang/Nim/blob/version-1-6/ch": thanks!
[22:20:27] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3Cl6
[22:20:43] <FromDiscord> <Yardanico> well, -d:debug does nothing and what do you mean "doesn't map symbols well"?
[22:21:06] <FromDiscord> <Yardanico> i mean, it wouldn't be perfect because both Nim and the C compiler optimize a lot of unused stuff away
[22:21:11] <FromDiscord> <jmgomez>  https://media.discordapp.net/attachments/371759389889003532/900456129165930536/unknown.png
[22:21:26] <FromDiscord> <Yardanico> and what type is `people`?
[22:21:30] <FromDiscord> <Yardanico> for example
[22:21:52] <FromDiscord> <jmgomez> In reply to @Yardanico "well, -d:debug does nothing": Oh, I just found the cmd line in a repo example
[22:22:02] <FromDiscord> <Yardanico> also, are you sure that nim-gdb is loaded?
[22:22:06] <FromDiscord> <Yardanico> check the debug console
[22:22:10] <FromDiscord> <Yardanico> it should show "Loading Nim Runtime support"
[22:23:36] <FromDiscord> <jmgomez> sent a code paste, see https://play.nim-lang.org/#ix=3Cl8
[22:23:40] <FromDiscord> <Yardanico> and yeah, to be honest nim-gdb and nim native debugging isn't really well tested
[22:24:03] <FromDiscord> <Yardanico> In reply to @jmgomez "This is the whole": you need to point miDebuggerPath to nim-gdb
[22:24:10] <FromDiscord> <Yardanico> so full path to the script
[22:24:45] <FromDiscord> <jmgomez> it uses cwd isnt? It is able to pick the target from there without anything else
[22:25:07] <FromDiscord> <jmgomez> Are there any alternatives to debug that I can try out?
[22:30:28] <FromDiscord> <reilly> In reply to @Mister_Magister "async simplifies so many": I was looking at something unrelated and found the exact rules for what counts as an identifier in Nim:↵https://nim-lang.org/docs/manual.html#lexical-analysis-identifiers-amp-keywords
[22:33:10] <FromDiscord> <jmgomez> Magically now works, the strings arent displayed as hex anymore
[22:34:06] <Mister_Magister> @reilly i'm not sure why you pinging me
[22:36:10] <FromDiscord> <reilly> > also, why can't i put - in file name↵You asked about it earlier and I gave a half-answer, but I happened to find the actual specification in case you're interested.
[22:36:35] <Mister_Magister> ah yes
[22:36:38] <Mister_Magister> thanks
[22:37:03] <FromDiscord> <rainbowasteroids> does anyone know how I should turn a seq of bytes/chars into a unicode string?
[22:37:52] <FromDiscord> <leorize> depends on the type of unicode you're looking for
[22:38:05] <FromDiscord> <leorize> if it's utf-8 then just use your byte stream as is
[22:38:35] <FromDiscord> <leorize> if you need utf-16 to deal with windows then winim has widestrings iirc
[22:38:39] <FromDiscord> <enthus1ast> you must know the source encoding, then you can encode it in any other encoding
[22:39:56] <FromDiscord> <Yardanico> In reply to @leorize "if you need utf-16": nim stdlib itself has that :)
[22:40:07] <FromDiscord> <rainbowasteroids> this is what the ID3 docs say\:> All Unicode strings use 16-bit unicode 2.0 (ISO/IEC 10646-1\:1993, UCS-2). Unicode strings must begin with the Unicode BOM ($FF FE or $FE FF) to identify the byte order.
[22:40:07] <FromDiscord> <Yardanico> https://nim-lang.org/docs/widestrs.html
[22:40:11] <FromDiscord> <Yardanico> not exactly well documented
[22:40:48] <FromDiscord> <Yardanico> In reply to @rainbowasteroids "this is what the": I think https://github.com/treeform/encode should work well enough for you
[22:40:54] <FromDiscord> <Yardanico> its simple enough]
[22:40:55] <FromDiscord> <Yardanico> (edit) "enough]" => "enough"
[22:42:07] <FromDiscord> <Yardanico> `fromUTF16LE` specifically
[22:47:54] <FromDiscord> <Yardanico> ah sorry just `fromUTF16` since it reads the byte marker by itself
[23:27:06] <FromDiscord> <treeform> byte order marker is so annoying, but my function will deal with it.
[23:43:25] <FromDiscord> <juan_carlos> BOM go Boom
