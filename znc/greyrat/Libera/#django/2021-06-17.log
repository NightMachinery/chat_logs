[00:00:02] <GinFuyou> #7 doesn't look quite right, since link verification view (page) is not supposed to be a form page. And user update page doesn't know about validation link handling
[00:00:43] <GinFuyou> at the moment only saving email is not working, or something else?
[00:01:22] *** Quits: browniebroke (uid501792@id-501792.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:02:20] <wallbroken> at the moment i do not receive the email verification
[00:02:41] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 272 seconds)
[00:03:33] <GinFuyou> well, you have email.send() line, at I guess it worked for registration
[00:03:48] <wallbroken> i do receive an error
[00:05:36] *** Quits: y04nn (~y04nn@81.17.24.204) (Ping timeout: 268 seconds)
[00:07:24] *** Quits: jpic_ (~jpic@82.142.9.26) (Quit: leaving)
[00:07:27] <GinFuyou> So, you are waiting for invitation to share it?
[00:07:40] *** Joins: jpic (~jpic@82.142.9.26)
[00:07:54] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[00:08:23] *** Joins: thiras (~thiras@user/thiras)
[00:09:15] <wallbroken> 'token': default_token_generator.make_token(self.object),
[00:09:23] <wallbroken> context must be a dict rather than str.
[00:11:28] <wallbroken> https://dpaste.org/pCtr
[00:12:55] *** Joins: jpic (~jpic@82.142.9.26)
[00:13:16] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[00:13:31] *** Joins: jpic (~jpic@82.142.9.26)
[00:15:03] <GinFuyou> wallbroken, what is 'uid' in line 25?
[00:15:36] <GinFuyou> error appears to be about it, rather than line it points to
[00:17:23] <wallbroken> so, what can i do?
[00:17:41] <GinFuyou> remove it probably?
[00:18:07] <GinFuyou> render_to_string expects context as second argument it appear, now it's third
[00:19:28] <wallbroken> GinFuyou: NoReverseMatch at /accounts/userupdate/
[00:19:28] <wallbroken> Reverse for 'activate' with keyword arguments '{'uidb64': '', 'token': 'aocva0-89f8b50e1f04ae2ff05fc87574df4eb5'}' not found. 1 pattern(s) tried: ['accounts/activate/(?P<uidb64>[^/]+)/(?P<token>[^/]+)/$']
[00:20:14] <GinFuyou> have you changed url in email template?
[00:20:44] <wallbroken> http://{{ domain }}{% url 'activate' uidb64=uid token=token %}
[00:21:03] <wallbroken> it will become http://{{ domain }}{% url 'activate' token=token %}    ???
[00:21:22] <GinFuyou> no, why it would be 'activate', we are changing email
[00:21:25] *** Quits: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net) (Ping timeout: 244 seconds)
[00:21:36] <GinFuyou> it would be name of pattern for email change view
[00:21:48] <GinFuyou> confirm_mail_change()
[00:21:59] <GinFuyou> that will only use token
[00:22:39] <wallbroken> http://{{ domain }}{% url confirm_mail_change() token=token %}    ???
[00:22:43] <wallbroken> not valid, right?
[00:23:06] <wallbroken> https://dpaste.org/SXWt
[00:23:13] <wallbroken> thiese are url lines i have
[00:23:48] <GinFuyou> so, add one for confirm_mail_change view
[00:23:59] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[00:24:01] <GinFuyou> same as for activate but without uid part
[00:24:26] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[00:25:00] <wallbroken> path('userupdate/confirm/', confirm_mail_change(), name="email_change"),
[00:25:08] <wallbroken> ok?
[00:25:37] <GinFuyou> no
[00:25:52] <wallbroken> do i need as_view() ?
[00:26:47] <GinFuyou> no. But it has 2 other things it's different thing from activate one aside of removal of uid part
[00:27:45] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48)
[00:27:50] <wallbroken> path('userupdate/confirm/<token>/', confirm_mail_change, name="email_change"),
[00:27:52] <wallbroken> ok?
[00:28:25] <GinFuyou> Yes, now it looks right
[00:28:48] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[00:28:58] <GinFuyou> now email template should have url tag for this name
[00:29:06] <GinFuyou> *name of this pattern
[00:29:37] <wallbroken> AttributeError at /accounts/userupdate/
[00:29:37] <wallbroken> 'str' object has no attribute 'get'
[00:30:27] <wallbroken> now i receive the email, but if i click on the link i get: "Email is not found in session, please open this link in same browser you've used to request change."
[00:31:01] <wallbroken> https://dpaste.org/Mcj8
[00:31:39] <GinFuyou> Ok, that is correct now. I think I mentioned about four times we yet have to save email. As easy solution I proposed session, it should be one more line
[00:31:41] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 252 seconds)
[00:32:49] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[00:32:50] <GinFuyou> https://dpaste.org/HCtU#L22 self.request.session['new_email'] = new_email
[00:33:04] *** Quits: Guest (~textual@a89-152-234-147.cpe.netcabo.pt) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[00:34:39] <wallbroken> AttributeError at /accounts/userupdate/
[00:34:39] <wallbroken> 'str' object has no attribute 'get'
[00:35:09] <wallbroken> and same erro on clicking on the link: Email is not found in session, please open this link in same browser you've used to request change.
[00:35:49] <rannnn8888> GinFuyou hard ask explain i can return for pk the page and create json to the page ?
[00:35:50] <GinFuyou> wait, where first error happens?
[00:36:20] <wallbroken> after clicking "submit" on the form page
[00:36:24] <wallbroken> https://dpaste.org/zMY8
[00:37:26] <GinFuyou> ah it probably needs redirect()
[00:37:35] <GinFuyou> let me check
[00:39:10] <GinFuyou> yes, https://dpaste.org/HCtU#L36 change to redirect(self.get_success_url())
[00:40:20] <wallbroken> return redirect(self.get_success_url())
[00:40:21] <wallbroken> this?
[00:41:15] <GinFuyou> yes
[00:42:10] <wallbroken> Email is not found in session, please open this link in same browser you've used to request change.
[00:42:18] <wallbroken> this is what i get when i click on the email
[00:42:25] <wallbroken> email link
[00:43:49] <GinFuyou> show the updated view
[00:44:47] <wallbroken> https://dpaste.org/vYi7
[00:46:57] <GinFuyou> Looks correct, have you tried submitting form again?
[00:48:18] <wallbroken> yes
[00:49:07] <GinFuyou> and you open confirmation link in same browser and device?
[00:49:28] <wallbroken> yes
[00:50:52] <rannnn8888> GinFuyou my problem i want return temptle page and json bakend to each name , i need make one json with all the data ? its not be hard load the data from here ?
[00:50:53] <wallbroken> tried again. same result
[00:51:13] <GinFuyou> https://dpaste.org/vYi7#L50 add print(request.session) It should work by now
[00:52:08] <GinFuyou> rannnn8888, you can load whatever you want with ajax and json
[00:53:33] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:54:36] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[00:55:13] <wallbroken> https://dpaste.org/fabW
[00:56:29] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net)
[00:57:33] <GinFuyou>  print(request.session.items()) that one should show real data
[00:59:41] <wallbroken> GinFuyou: dict_items([])
[01:00:25] *** Joins: rje_ (~rje@50.54.137.153)
[01:00:56] <GinFuyou> are you sure you are logged in when confirming? It shouldn't be completely empty
[01:01:15] <wallbroken> no, i'm not logged in
[01:01:37] <wallbroken> because after sending the form, it logs me out because password update is needed
[01:01:52] <wallbroken> the form needs a password update, i cannot leave new password field empty
[01:02:04] <GinFuyou> erm what?
[01:02:19] <GinFuyou> Well that the issue why confirmation doesn't work
[01:03:04] <wallbroken> ok, and the workaround is?
[01:03:34] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[01:03:38] <GinFuyou> don't logout
[01:03:48] *** Joins: knbk_ (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[01:03:54] *** Quits: rje (~rje@50.54.137.153) (Ping timeout: 264 seconds)
[01:04:55] <wallbroken> GinFuyou: i just explained why it logs me out
[01:05:11] *** Parts: teut (~teut@182.69.85.39) ()
[01:05:18] <wallbroken> and i also tried clicking the link after logging me again
[01:05:23] <wallbroken> but it's the same
[01:05:28] <GinFuyou> I didn't really get the reason
[01:05:29] *** Joins: djacobs (~IceChat95@109.133.171.241)
[01:05:52] <GinFuyou> And there is no other workaround. You need a different storage\approach
[01:06:27] <wallbroken> is not possible to make a template just to update email?
[01:06:36] <GinFuyou> Well, views would be pretty much the same. except for both request.session lines
[01:06:48] <GinFuyou> template?
[01:07:04] <wallbroken> in my current template, i have a complete management form
[01:07:09] <wallbroken> to update username, password, email
[01:07:23] <wallbroken> and whe i open it, a password change is needed to go "submit"
[01:07:33] <wallbroken> it's clear what the problem is?
[01:07:49] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[01:07:50] *** Joins: bambanxx (~bambanx@181-163-34-186.baf.movistar.cl)
[01:07:59] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 252 seconds)
[01:08:00] *** Quits: bambanxx (~bambanx@181-163-34-186.baf.movistar.cl) (Read error: Connection reset by peer)
[01:08:00] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[01:08:34] <rannnn8888> GinFuyou i dont can make this way in django ? https://dpaste.org/DiJ8
[01:08:58] *** Joins: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net)
[01:09:14] <wallbroken> https://www.dropbox.com/s/67e6lsrl5vdczs5/untitled.png?dl=0
[01:09:26] <wallbroken> as you can see, i need to change the password
[01:09:38] <wallbroken> even if i just want to change the email only
[01:09:53] <wallbroken> so, when i click submit, the password is changed and i am no more logged in
[01:10:07] <wallbroken> but i also tried logging me in before clicking the confirmation link
[01:10:17] <wallbroken> but i get the same error
[01:10:22] <GinFuyou> It doesn't matter. You must not logout
[01:10:24] <wallbroken> and the email is changed
[01:10:42] <wallbroken> the mail should not change until i click on the confirmation link
[01:10:56] <wallbroken> GinFuyou: yes, but it's clear why it logs out?
[01:11:02] <wallbroken> i tried to explain
[01:11:12] <wallbroken> but i'm not sure i explained it in a good way
[01:12:01] <GinFuyou> Well, if you want to logout you have to use different email storage. Add it to user model, or separate model with o2o to user
[01:12:18] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[01:12:48] <GinFuyou> Or remove requirement to change password, since it doesn't really appear to make sense
[01:13:17] <wallbroken> how to remove the requirement to change password?
[01:13:23] <wallbroken> i don't really need it
[01:14:20] <GinFuyou> show me the UserUpdateForm code.
[01:16:50] <wallbroken> https://dpaste.org/7Ozx
[01:22:17] *** Quits: ChOcO-Bn (~choco@user/choco-bn) (Ping timeout: 252 seconds)
[01:22:22] *** Joins: ChOcO-Bn (~choco@user/choco-bn)
[01:24:19] *** Joins: samuele (~samuele@151.16.40.36)
[01:24:23] <samuele> hi
[01:24:46] <samuele> how can I order the results in the queryset of a m2m relation by a field of the through model?
[01:24:58] <GinFuyou> wallbroken, add this to the form https://dpaste.org/0ACs
[01:25:31] <GinFuyou> replace\update __init__
[01:25:49] <samuele> I have a model ExamProgress, a model Exam, a Question model, and a ExamCompletedQuestionsThroughModel, and I'm doing: completed_questions.all().order_by("examcompletedquestionsthroughmodel__ordering") but it's not really ordering anything (ordering is a field in the through model)
[01:26:15] <GinFuyou> rannnn8888, what is the problem with it?
[01:26:20] <samuele> it's self.completed_questions.all().order_by("examcompletedquestionsthroughmodel__ordering"), I forgot the "self"
[01:26:34] <wallbroken> GinFuyou: ValidationError is undefined
[01:26:38] <wallbroken> what do i need to import?
[01:26:48] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[01:27:07] *** Joins: danielshorten (~danielsho@d198-53-97-50.abhsia.telus.net)
[01:27:22] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[01:27:40] <GinFuyou> wallbroken, from django.core.exceptions import ValidationError
[01:28:13] <danielshorten> Hi channel!
[01:29:14] <danielshorten> I noticed psycopg2-binary 2.9 was released very recently.  We're experiencing timezone-related issues in Django after upgrading.  Any reports of this?
[01:30:09] <wallbroken> GinFuyou: the template still asks for password
[01:30:11] <samuele> okay ignore my question, I'm an idiot
[01:30:36] <GinFuyou> wallbroken, it should only ask for old one for confirmation
[01:31:50] <wallbroken> no
[01:31:56] <wallbroken> it asks also for the new one
[01:32:59] <GinFuyou> Does it show error on submit (field required) or it does prevent submit (browser-side check?)
[01:34:08] <wallbroken> it shows error
[01:34:24] <wallbroken> under textbox, it tells me the field is needed
[01:34:45] <GinFuyou> show the updated form. code looks correct
[01:35:01] <samuele> is there a way I can get the entry in `current_question` at the END of the queryset, in this query? https://dpaste.org/X467
[01:35:35] <samuele> note that the order_by only applies to the queryset of the first Q object, as it's a m2m field with a through model, so it's ignored by the entry in current_question
[01:36:11] <samuele> I'd like to have a way to have all the entries in the first part of the query at the beginning of the queryset, and `current_question` (if it exists) at the end
[01:36:24] <wallbroken> GinFuyou: https://dpaste.org/AZzz
[01:38:12] *** Quits: Crovax31 (~quassel@2a01:e0a:85:33d0:7c99:4d96:4572:39ea) (Ping timeout: 244 seconds)
[01:38:33] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[01:40:43] <samuele> anybody has an idea?
[01:42:05] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[01:42:45] *** Joins: teut (~teut@182.69.85.39)
[01:43:06] <teut> model._meta.get_fields()    gives an extra field  id
[01:43:11] <teut> how to avoid it?
[01:44:40] <GinFuyou> wallbroken, everything looks OK, do you render fields manually maybe?
[01:44:58] <wallbroken> yes
[01:45:06] <wallbroken> can we render just the email field?
[01:45:08] <GinFuyou> (well I can see where undeclared var error could be, but we are not hitting it)
[01:45:12] <wallbroken> in a separate page?
[01:45:46] <GinFuyou> Yes. With a new form and view
[01:46:32] <GinFuyou> teut, if it returns a list - pop it?
[01:46:46] <teut> that I always have to do
[01:46:50] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[01:47:24] <wallbroken> GinFuyou: and what if we want to make tha password change not mandatory?
[01:47:33] <wallbroken> without creating a new template
[01:48:38] <GinFuyou> my code should solve it. Have to debug it if it doesn't work
[01:48:57] <GinFuyou> https://dpaste.org/0ACs#L3,4 marks fields as non-required
[01:49:12] <GinFuyou> maybe someone else could spot something I missed
[01:49:38] <GinFuyou> in case you template doesn't set required attribute manually
[01:50:00] <GinFuyou> Maybe it something about password input widget... but I doubt that
[01:50:21] <wallbroken> GinFuyou: i you need to make some test for debugging, i can do it.
[01:51:09] <GinFuyou> well, check rendered html for new password inputs then
[01:52:30] <wallbroken> https://dpaste.org/A1Bf
[01:53:03] <teut> You can use filters and excludes     <---   https://github.com/chrisdev/django-pandas/
[01:53:05] <teut> how?
[01:53:23] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 244 seconds)
[01:53:35] <teut> how to exclude some field?
[01:54:24] <teut> Uploaded file: https://uploads.kiwiirc.com/files/b85a89872ba2790693032e8d4e531521/pasted.txt
[01:55:08] <GinFuyou> wallbroken, hm, I can see required is only on old password so it should be working
[01:55:09] <teut> this is my model and I want to exclude   `user` (this field is being used to get all transaction entries of  the user)
[01:55:36] <teut> and I also need the get_total_price()   as a field
[01:55:59] <GinFuyou> wallbroken, what exactly is the error you get on submit?
[01:57:45] <wallbroken> GinFuyou: now it works
[01:57:50] <wallbroken> but there is a problem
[01:58:02] <GinFuyou> now?
[01:58:03] <wallbroken> it is  changing the mail even if i do not click on the verification link
[01:58:04] <wallbroken> yes
[01:58:13] <wallbroken> i cleaned all the browser cache
[01:58:17] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[01:59:02] <GinFuyou> weird
[01:59:05] <GinFuyou> but whatever
[01:59:14] <FunkyBob> https://twitter.com/kenshirriff/status/1405214185244356612
[01:59:18] <FunkyBob> oops, wrong window
[01:59:38] <GinFuyou> hm, so it sets email immediately? I guess could be reference issue
[02:00:25] <wallbroken> yes, in the update form it sets
[02:00:33] <wallbroken> but if i use the password_reset form
[02:00:35] <GinFuyou> ah, or self.object is already updated I guess
[02:00:38] <wallbroken> it still keeps the old one
[02:00:46] <teut> FunkyBob can you help now?
[02:01:17] *** Quits: danielshorten (~danielsho@d198-53-97-50.abhsia.telus.net) (Quit: Client closed)
[02:02:39] *** Joins: bobmight57 (~bobmight5@202-153-212-80.ca99d4.syd.static.aussiebb.net)
[02:03:12] <samuele> nvm I figured it out myself
[02:03:13] <GinFuyou> wallbroken, try this https://dpaste.org/OL3e
[02:03:41] <wallbroken> where exactly?
[02:03:54] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 264 seconds)
[02:04:35] <GinFuyou> https://dpaste.org/HCtU#L14
[02:06:41] <wallbroken> it still loads the unconfirmed one
[02:10:16] <GinFuyou> print(f"'{new_email}' - '{current_email}' {current_email is new_email}")
[02:11:48] <wallbroken> it does not print anything
[02:11:59] *** Quits: knbk_ (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 244 seconds)
[02:12:55] <wallbroken> GinFuyou: https://dpaste.org/aTgo
[02:12:59] <wallbroken> this is the view now
[02:13:20] <GinFuyou> but sends the mail?
[02:13:46] *** Quits: samuele (~samuele@151.16.40.36) (Quit: Konversation terminated!)
[02:13:47] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 272 seconds)
[02:15:06] <wallbroken> no
[02:15:41] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[02:16:32] <GinFuyou> but it did before
[02:16:48] <wallbroken> AttributeError at /accounts/userupdate/
[02:16:48] <wallbroken> 'UserUpdate' object has no attribute '_meta'
[02:17:26] <wallbroken> https://dpaste.org/8C6m
[02:17:31] <wallbroken> no idea what's happening
[02:17:36] <GinFuyou> so you didn't change mail before
[02:18:14] <GinFuyou> Nah this is clearly my mistake, it's not in the form so line 15 doesn't need `._meta` part
[02:21:17] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 244 seconds)
[02:21:23] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 272 seconds)
[02:24:14] <wallbroken> GinFuyou: i receive the email
[02:24:36] <GinFuyou> what about email change and prints
[02:24:53] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[02:24:54] <wallbroken> https://dpaste.org/s3Ft
[02:25:05] *** Quits: Lauxley (~lauxley@2a01:e34:ec55:2700:bded:26c2:753c:1969) (Remote host closed the connection)
[02:25:51] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[02:25:51] <GinFuyou> that's for confirm view, and it looks OK, new_email is there
[02:26:44] <wallbroken> well, but the email is changed before clicking the confirmation link?
[02:27:29] <GinFuyou> so, what first view prints?
[02:28:33] <wallbroken> 'aaa@gmail.com' - 'bbb@hotmail.com' False
[02:30:52] <tm007> FunkyBob:
[02:30:58] <tm007> Cool stuff
[02:32:24] *** Quits: teut (~teut@182.69.85.39) (Quit: Connection closed)
[02:33:36] <GinFuyou> wallbroken, https://dpaste.org/cXxo#L try like that. Everything looks correct. Not sure if it was not before changes even
[02:35:43] *** Quits: ironm (~devops@2a02:1205:34f8:5120:5604:a6ff:fe8a:d50d) (Remote host closed the connection)
[02:36:41] <wallbroken> GinFuyou: ok, now looks ok
[02:36:46] <wallbroken> let me do some cross testing
[02:37:05] <GinFuyou> well, I didn't change any logic I believe?
[02:37:08] <wallbroken> GinFuyou: a question: i need a check to know if the email address hasn't been used by some other account
[02:37:22] <GinFuyou> only debug code
[02:37:28] <tm007> GinFuyou: interesting thought with refresh_from_db
[02:37:30] <wallbroken> yes, but no idea.
[02:37:50] <GinFuyou> wallbroken, I don't think so, if email field is unique form will check it
[02:38:06] <wallbroken> ok, there is a problem
[02:38:09] <wallbroken> i update to a new email
[02:38:19] <wallbroken> but if i send a password reset to the old email
[02:38:22] <wallbroken> it still sends it
[02:38:44] <wallbroken> i expected it should tell me "not existing mail"
[02:39:02] <tm007> try with an email that doesn't exist
[02:39:08] <tm007> in your db
[02:39:20] <wallbroken> it still sends
[02:39:29] <GinFuyou> Yeah, I guess it needs additional check if you change password and email at same time. One probably doesn't want it anyway
[02:42:23] <wallbroken> check wer
[02:42:30] <wallbroken> password_reset is a django form
[02:43:07] *** Joins: audiocat (~audio@2603-8081-1800-0062-c574-3dd0-68c8-791e.res6.spectrum.com)
[02:44:27] *** Joins: jpic_ (~jpic@82-64-233-31.subs.proxad.net)
[02:45:54] *** Quits: jpic (~jpic@82.142.9.26) (Ping timeout: 264 seconds)
[02:47:12] <GinFuyou> wallbroken, could try this as a workaround https://dpaste.org/7uG4#L3,4,1,26,27,28
[02:49:26] *** Joins: jpic (~jpic@82.142.9.26)
[02:49:30] *** Quits: jpic_ (~jpic@82-64-233-31.subs.proxad.net) (Ping timeout: 240 seconds)
[02:52:22] <wallbroken> GinFuyou: https://dpaste.org/UxRO
[02:52:24] <wallbroken> correct?
[02:53:13] <GinFuyou> yes
[02:53:26] <GinFuyou> oops
[02:53:30] <wallbroken> We've emailed you instructions for setting your password, if an account exists with the email you entered. You should receive them shortly.
[02:53:31] <wallbroken> If you don't receive an email, please make sure you've entered the address you registered with, and check your spam folder.
[02:53:35] <GinFuyou> except new_password2
[02:53:48] <wallbroken> it still sends emails on not existing addresses
[02:54:04] <GinFuyou> not `password1` but `new_password1`
[02:54:05] <tm007> why not use this: if password1 and password2 and password1 != password2
[02:54:23] <GinFuyou> 1/2 doesn't matter much
[02:54:43] <wallbroken> if 'email' in self.changed_data and 'new_password1' in self.changed_data:
[02:54:48] <GinFuyou> yes
[02:54:53] <GinFuyou> try like that
[02:55:20] <wallbroken> same
[02:55:45] <GinFuyou> what happens in what case?
[02:56:32] <wallbroken> if i try to recover a not existing mail from password_recover form
[02:56:48] <wallbroken> the form says that a recover link is sent to that address
[02:56:59] <wallbroken> i expected "not existing email" error
[02:57:30] <GinFuyou> Wait, how it does relates to change email mechanic we were just working on?
[02:58:17] <wallbroken> is not related, in fact i want to ask you what are you trying to solve in the update view
[02:59:20] <GinFuyou> Oh, OK when you said "there is a problem" I thought it was about this view
[02:59:45] <wallbroken> no
[03:00:02] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[03:00:09] <wallbroken> so, now do i rollback all those improvement you made me do in last steps?
[03:00:39] <GinFuyou> Well, last addition was fine anyway I think. You don't want to change password and email, mess up and not be able to recover
[03:01:00] <wallbroken> ok
[03:01:11] <wallbroken> the problem is about password_recover form
[03:02:06] *** Quits: finnx (~sheppards@2600:1702:1ae0:930:96da:9147:f849:1b31) (Ping timeout: 264 seconds)
[03:04:24] *** Quits: jpic (~jpic@82.142.9.26) (Quit: leaving)
[03:04:40] *** Joins: jpic (~jpic@82.142.9.26)
[03:04:53] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[03:04:54] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[03:05:35] *** Joins: jpic (~jpic@82.142.9.26)
[03:05:47] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 268 seconds)
[03:08:07] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[03:08:22] *** Joins: jpic (~jpic@82.142.9.26)
[03:10:25] *** Quits: jpic (~jpic@82.142.9.26) (Client Quit)
[03:10:40] *** Joins: jpic (~jpic@82.142.9.26)
[03:11:20] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[03:13:54] *** Parts: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) ()
[03:16:12] *** Joins: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net)
[03:21:06] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 240 seconds)
[03:21:10] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[03:26:57] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[03:27:55] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[03:29:06] *** Quits: ras_manny (~ras_manny@196.24.141.56) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:39:35] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[03:40:30] <wallbroken> do you think it's a bug that password_reset does not check if it's an existing mail?
[03:41:00] <PaulWay[w]> A bug in what?
[03:41:20] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[03:43:54] <wallbroken> in system form
[03:44:34] *** Joins: clemente (~Daniel@balticom-142-72-136.balticom.lv)
[03:44:44] <PaulWay[w]> What system form?
[03:44:48] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[03:47:07] <wallbroken> password_reset
[03:49:00] <wallbroken> path('accounts/', include('django.contrib.auth.urls'))
[03:49:09] <wallbroken> it is here
[03:49:27] <wallbroken> https://docs.djangoproject.com/en/3.2/topics/auth/default/
[03:49:51] <PaulWay[w]> What do you mean by 'existing mail'?
[03:51:47] <wallbroken> email already existing in the database
[03:57:20] <PaulWay[w]> How would it know that?
[03:57:42] <wallbroken> checking the database, obviously
[03:57:55] <wallbroken> if that email is associated to some account
[03:59:58] <PaulWay[w]> Right, sorry, thought this was an email you were sending out, not an email address.
[04:00:53] <PaulWay[w]> Right, so in that page you linked there's this line: "If the email address provided does not exist in the system, this view wonâ€™t send an email, but the user wonâ€™t receive any error message either. This prevents information leaking to potential attackers."
[04:01:01] <PaulWay[w]> That seems to answer your question.
[04:12:42] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 240 seconds)
[04:14:59] *** Quits: mxp (~mxp@82.98.30.69) (Ping timeout: 252 seconds)
[04:18:26] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[04:19:56] *** Quits: brownan (~brownan@136.56.137.143) (Ping timeout: 252 seconds)
[04:23:42] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[04:26:37] *** Joins: mxp (~mxp@82.98.30.69)
[04:28:29] <wallbroken> PaulWay[w]: great, thank you
[04:45:35] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[04:56:48] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 244 seconds)
[04:57:18] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 264 seconds)
[05:00:00] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[05:01:54] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[05:21:53] <wallbroken> now that the project is finished. may I ask you somebody of you to help me understanding django?
[05:22:31] <PaulWay[w]> What do you want to know?
[05:22:43] <PaulWay[w]> Glad to hear it's finished!  All working?
[05:23:16] <wallbroken> yes, looks like now works quite well
[05:23:29] <wallbroken> i'd like to know what a view specifically does
[05:23:56] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[05:24:22] <wallbroken> i know that there is a distinction between view class and function view
[05:24:52] <wallbroken> and a view class can have inside of it some method
[05:26:38] <nedbat> wallbroken: you are asking now what a view does?
[05:26:50] <wallbroken> yes
[05:27:53] <nedbat> wallbroken: i don't mean to sound harsh, but you've gone about this all wrong.
[05:28:19] <wallbroken> nedbat: do you know what a view does?
[05:28:30] <PaulWay[w]> Have you heard of the "Model View Controller" idea?
[05:28:44] <wallbroken> let me search on google
[05:28:58] <PaulWay[w]> nedbat: he probably knows what it is in code, but not how it fits together conceptually.
[05:29:14] <PaulWay[w]> wallbroken: you already know the model bit - that's a Django model.
[05:29:20] <PaulWay[w]> It's a model of the data you're storing.
[05:29:27] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[05:29:36] <wallbroken> yes
[05:29:44] <PaulWay[w]> The "View" is the method of representing that data.  In Django that's a template; in DRF it's a serializer.
[05:30:15] <PaulWay[w]> The "Controller" is the code that works out what data to retrieve, and which view to present it in.
[05:30:23] <PaulWay[w]> Confusingly, Django calls this a "view".
[05:30:59] <PaulWay[w]> That's what a 'view' is in Django: the code for each 'view' of data in your system.
[05:31:20] <PaulWay[w]> Does that all make sense so far, at the simplest level
[05:31:21] <PaulWay[w]> ?
[05:31:48] <wallbroken> is not quite clear "is the method of rapresenting that data"
[05:32:37] <PaulWay[w]> What I mean by that is: the view is the code that gets data from the models, and represents it to the user using the template.
[05:33:01] <PaulWay[w]> The view code may make decisions about what the user can see, or how they see it.
[05:33:16] <PaulWay[w]> It may need to pull together data from multiple models.
[05:33:21] <PaulWay[w]> With me now?
[05:34:00] <wallbroken> yes, it's like a database query?
[05:34:21] <wallbroken> select * from table where condition1; condition2....
[05:34:27] <PaulWay[w]> At a very simple level, yes, but a view is much more than just the query.
[05:34:33] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 272 seconds)
[05:36:23] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[05:36:48] <PaulWay[w]> You can probably see from the code you've written in your own views that they do more than just perform queries.
[05:37:31] <wallbroken> yes, it handles request/responses
[05:37:36] <PaulWay[w]> Yep.
[05:37:41] <PaulWay[w]> What else do they do?
[05:37:44] <wallbroken> so they are not just a way to rapresenting data
[05:39:20] <PaulWay[w]> Yes!
[05:39:35] <PaulWay[w]> That's why they're called 'controllers' in the MVC concept.
[05:40:01] <wallbroken> and they does not get the data just from the model
[05:40:02] <PaulWay[w]> Because they really 'control' the user's interaction with the website.
[05:40:09] <wallbroken> but also from an http request
[05:40:13] <PaulWay[w]> Yes to that too.
[05:40:39] <PaulWay[w]> Does that help you understand what a view is in Django?
[05:40:57] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[05:41:04] <wallbroken> yes
[05:41:05] <wallbroken>  dispatch(self, request, *args, **kwargs):
[05:41:08] <wallbroken> here
[05:41:22] <wallbroken> you see that there are *args, **kwargs
[05:41:27] <PaulWay[w]> Yep.
[05:41:27] <wallbroken> what do they are?
[05:41:36] <PaulWay[w]> Ahh, now that's an interesting question :-)
[05:41:59] <wallbroken> in C * is a special character used to resolve an address reference
[05:42:11] <PaulWay[w]> The stars there are Python specific mark-up.
[05:42:26] <wallbroken> it's not the same as in C language?
[05:42:31] <PaulWay[w]> So in C, you know how you can have some functions that can take a variable number of parameters?
[05:42:41] <wallbroken> yes
[05:43:04] <PaulWay[w]> And you then have a kind of special 'varargs' system of handling them, but the function definition has to have '...' as an argument?
[05:43:34] <wallbroken> now i don't remember specifically
[05:43:46] <PaulWay[w]> The '...' being a special C mark-up that says 'you'll get multiple arguments here, deal with it'.
[05:43:50] <bparker> the wallbroken saga continues
[05:43:58] <PaulWay[w]> bparker: indeed.
[05:44:00] <PaulWay[w]> We're learning.
[05:44:07] <wallbroken> bparker: grab some pop corn
[05:44:16] <bparker> but are you getting paid is the question /s
[05:45:18] <wallbroken> PaulWay[w]: ok, i did get what * is
[05:45:22] <PaulWay[w]> So in Python, if you have a function that you want to take a variable number of arguments, you put a * before any variable name in its argument list and Python will stuff all the spare arguments to that function into a list and put that list in that argument.
[05:45:29] <wallbroken> function(*args)
[05:45:52] <PaulWay[w]> (That's why *args = short for arguments).
[05:45:54] *** Quits: clemente (~Daniel@balticom-142-72-136.balticom.lv) (Ping timeout: 240 seconds)
[05:46:08] <PaulWay[w]> Since Python also takes keyword arguments, it has another special mark-up to take keywords as a dictionary - that's **kwargs.
[05:46:14] <PaulWay[w]> Make sense?
[05:46:17] <wallbroken>       for number in args
[05:46:30] <wallbroken>      output * number
[05:46:38] <wallbroken>        return output
[05:46:42] <wallbroken> so if i use that function
[05:46:58] <wallbroken> function(2, 2, 2)
[05:47:05] <wallbroken> i'll get 8
[05:47:07] <wallbroken> right?
[05:47:17] <PaulWay[w]> Well, excusing a lot of the actual niceties of Python, yes.
[05:47:31] <PaulWay[w]> It's worth playing around with this in a small program to get used to it.
[05:47:33] <wallbroken> and in the case of double star?
[05:47:35] <wallbroken> **
[05:47:52] <PaulWay[w]> Then you get a dictionary with any keyword arguments.
[05:48:04] <wallbroken> ok
[05:48:21] <PaulWay[w]> in `def fun(**kwargs):`, 'kwargs' is a dictionary.
[05:48:33] <wallbroken> so
[05:48:34] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user-registration/shoes/views.py#L36
[05:48:36] <wallbroken> for example here
[05:48:55] <wallbroken> we are defining a method of ShoeListView class
[05:48:56] <PaulWay[w]> fun(moon=1, stars=2, sun=3) will have kwargs={'moon': 1, 'stars': 2, 'sun': 3}
[05:49:29] <PaulWay[w]> Yep.
[05:49:30] <wallbroken> dispatch method takes as input
[05:49:47] <wallbroken> self, request, *args, **kwargs)
[05:50:17] <wallbroken> why we need *args in this case?
[05:51:11] *** Quits: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net) (Quit: Client closed)
[05:51:41] <PaulWay[w]> Here's the overview: dispatch is a method of ListView that does the work of handling this request.
[05:52:10] <PaulWay[w]> The ListView's dispatch method can be called with a range of arguments, from within Django, depending on the circumstances.
[05:52:11] <FunkyBob> being a GENERIC view, it cant' know how many arguments will be passed to the view from url routing.
[05:52:26] <PaulWay[w]> We don't know what those arguments are, or if they're listed or keyword arguments.
[05:52:54] <PaulWay[w]> So '*args, **kwargs' catches all the arguments given to ShoeListView's dispatch() method.
[05:53:16] <bparker> the ones that aren't already named
[05:53:17] <PaulWay[w]> Then the same notation (kind of in reverse, at least in my head) stuffs them back into the argument list to the ListView's dispatch() method.
[05:53:51] <PaulWay[w]> Yes.  The ones that are named within the method declaration are handled by Python first, and then everything else is stuffed into args and kwargs.
[05:54:16] <PaulWay[w]> Then when we call super().dispatch() we give it `*args, **kwargs`.
[05:54:20] <wallbroken> in my way of thinking, i see a method as something that takes some input and gies some output
[05:54:29] <wallbroken> in this case the input are: the request
[05:54:29] <PaulWay[w]> That's correct.
[05:54:40] <wallbroken> the list of args, and the list of dicts
[05:55:21] <wallbroken> the return returns "request" (why?, is it the same as the input?)
[05:56:39] <wallbroken> but have a look to the code. i think that when i declare a method in a class, you'd expect that the metod would be used by the instance object of that class
[05:56:43] <wallbroken> and, where is it?
[05:57:32] <PaulWay[w]> It's used within Django.
[05:57:42] <PaulWay[w]> Django understands how to use GenericViews such as ListView.
[05:58:02] <PaulWay[w]> And deep down in the machinery of Django, it calls the `dispatch` method.
[05:58:05] <wallbroken> so it's called "dispatch" for a functional reason?
[05:58:35] <PaulWay[w]> It's called `dispatch` because that sounds more elegant and refined than 'execute' or 'go' or 'do_stuff'.
[05:58:38] <PaulWay[w]> :-D
[05:59:10] <wallbroken> so, django will create an instance of the ShoeListView class and inside of it will use that method?
[05:59:14] <PaulWay[w]> Yep.
[05:59:31] <FunkyBob> well, the function created by .as_view() creates the instance
[05:59:38] <PaulWay[w]> Now, when you graduate from using generic views, you'll find your view methods actually getting called :-)
[06:01:17] <bparker> I'm old school, I still use one plain method for both GET/POST, no class-based views
[06:01:23] <FunkyBob> i still say CBGV only confuse new users and obfuscate what's going on for them
[06:01:47] <PaulWay[w]> Yes.  I agree.
[06:02:00] <wallbroken> why sometimes is used a view class, and why sometimes is used a view function?
[06:02:11] <bparker> personal preference
[06:02:15] <FunkyBob> because some things you want to do are handled by the generic views
[06:02:17] <FunkyBob> and some aren't
[06:02:20] <PaulWay[w]> This is why I'm working on https://github.com/PaulWay/django-viewsets
[06:02:28] <bparker> the class way wasn't introduced until later in django's life IIRC
[06:02:34] <bparker> some people still use the old way
[06:02:47] <FunkyBob> class-based generic views are far nicer than the old generic views
[06:03:00] <FunkyBob> but how django itself handles views hasn't changed
[06:03:06] <PaulWay[w]> Because generic views are single-endpoint and I want the 'entire path in one view class' idea that DRF uses.
[06:03:14] <wallbroken> from shoes.forms import ShoeForm, ShoeImageFormSet, ShoeImageInlineFormset, ShoeOrderForm, BrandForm, CartAddForm, UrgentAddForm, ShoeCartsForm, ShoeFavouriteForm, modelformset_factory
[06:03:17] <FunkyBob> there's actually no explicit support in the core of it for class-based views
[06:03:19] <wallbroken> this can be simply:
[06:03:24] <wallbroken> from shoes.forms import *
[06:03:26] <wallbroken> ?
[06:03:29] <bparker> sometimes
[06:03:36] <bparker> but it can create circular dependencies
[06:03:46] <FunkyBob> yes, but "import *" is discouraged because it can import more than you realise
[06:04:04] <wallbroken> ok
[06:04:14] <bparker> if you're in models.py and you import forms.*, but forms.py also imports models.py... whoops
[06:04:15] <wallbroken> now, if i want to analyze the entire flow:
[06:04:21] <wallbroken> i open an url
[06:04:29] *** Joins: Guddu (~Guddu@117.222.80.236)
[06:04:33] <wallbroken> the url is triggered by a url statement in urls.py
[06:04:52] <wallbroken> that url statement will create the instance of a generic class view
[06:04:53] <wallbroken> right?
[06:05:16] <bparker> depends on what the url statement is
[06:05:33] <bparker> it could point to a single function
[06:05:37] <bparker> or a class, or a generic view
[06:05:51] <bparker> class-based view*
[06:05:59] <wallbroken> for example, when i open my website, i will reach the root level
[06:06:01] <wallbroken> path('', ShoeListView.as_view()),
[06:06:02] <wallbroken> this
[06:06:22] <wallbroken> so, ShoeListView.as_view() will create an instance of that view class
[06:07:11] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[06:07:32] <wallbroken> class ShoeListView(LoginRequiredMixin, ListView):
[06:07:36] <wallbroken> needs two arguments
[06:07:46] <wallbroken> but when i create the instance i'm not passing any argument
[06:07:51] <FunkyBob> wallbroken: no
[06:07:52] <FunkyBob> no
[06:07:57] <FunkyBob> as_view does not create the instance
[06:08:05] <FunkyBob> it returns a view function that will create the instance
[06:08:16] <FunkyBob> [yes, it's a little confusing at first]
[06:08:25] <wallbroken> 3:29:31 AM - FunkyBob: well, the function created by .as_view() creates the instance
[06:08:29] <FunkyBob> yes
[06:08:34] <FunkyBob> the function created by as_view()
[06:08:41] <FunkyBob> calling as_view returns a new function
[06:08:47] <FunkyBob> _that_ function is the one that creates the instance
[06:08:50] <FunkyBob> _that_ function is the view function
[06:09:29] <FunkyBob> https://github.com/django/django/blob/main/django/views/generic/base.py#L48
[06:09:51] <FunkyBob> In terchnical terms View.as_view is a "view function factory"
[06:10:14] <bparker> like the infamous RequestProcessorFactoryFactory
[06:10:35] <wallbroken> ok, so as_view() creates a new function which create the instance of the view class
[06:10:45] <wallbroken> but the question is: the view class needs 2 arguments
[06:10:50] <wallbroken> who is passing them?
[06:10:57] <bparker> classes do not have arguments
[06:11:00] <FunkyBob> the url matching machinery
[06:11:06] <wallbroken> of there is a class overloading?
[06:11:13] <FunkyBob> calls the view function
[06:11:45] <FunkyBob> https://github.com/django/django/blob/main/django/views/generic/base.py#L61-L69
[06:12:02] <FunkyBob> that's the view function it creates... it creates the class isntance, then calls dispatch
[06:12:06] <bparker> class Foo(One, Two) <- this One, Two are other classes that we want to derive from, this is called multiple inheritance in C++
[06:13:14] <wallbroken> LoginRequiredMixin, ListView
[06:13:23] <FunkyBob> wallbroken: they are parent classes
[06:13:24] <FunkyBob> not arguments
[06:13:29] <wallbroken> ok
[06:13:44] <wallbroken> you already told me some time ago
[06:13:48] <wallbroken> now i remember
[06:14:27] <wallbroken> ok, when the istance of the class view is created, all the method inside of ti are executed?
[06:14:32] <wallbroken> in which order?
[06:14:47] <FunkyBob> no
[06:14:49] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[06:14:53] <FunkyBob> dispatch() is called
[06:14:55] <FunkyBob> in this case
[06:15:07] <wallbroken> it's the first triggered method?
[06:15:10] <FunkyBob> the default implementation of that works out what to call based on the HTTP Method of the request
[06:15:18] <FunkyBob> https://github.com/django/django/blob/main/django/views/generic/base.py#L69
[06:15:28] <FunkyBob> https://github.com/django/django/blob/main/django/views/generic/base.py#L93-L101
[06:16:18] <wallbroken> ok
[06:16:27] <FunkyBob> this is, of course, covered here - https://docs.djangoproject.com/en/3.2/topics/class-based-views/intro/
[06:17:34] <wallbroken> so, when do i need to create a view class to handle a request, the first method i need to implement is dispatch()
[06:17:43] <FunkyBob> never
[06:17:51] <FunkyBob> no, you do not need to implement dispatch
[06:18:05] <FunkyBob> that's why you sub-class an existing view class...
[06:18:13] <FunkyBob> so you don't have to reimplement what's already done
[06:18:15] <FunkyBob> otherwise, what's the point?
[06:18:39] <FunkyBob> it seems you are having a hard time, still, with understanding inheritance
[06:19:30] <FunkyBob> the reason for creating class-based generic views is classes make it easy to say "I want something that works like that, but a little different"
[06:19:57] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user-registration/shoes/views.py#L36
[06:19:59] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[06:20:04] <wallbroken> here i'm defining a method
[06:20:15] <wallbroken> i'm not inheriting anything
[06:20:21] <FunkyBob> yes, because you want to do that work no matter if it's a GET or POST or whatever...
[06:20:27] <FunkyBob> yuou fucking well are
[06:20:32] <FunkyBob> class ShoeListView(LoginRequiredMixin, ListView):
[06:20:38] <FunkyBob> your class inherits from those two others
[06:20:39] <FunkyBob> AND
[06:20:43] <FunkyBob>         return super().dispatch(request, *args, **kwargs)
[06:20:50] <FunkyBob> you finish by using the parent classes dispatch method
[06:21:08] <wallbroken> ok, but i did not get the first part
[06:21:15] <wallbroken> 3:50:21 AM - FunkyBob: yes, because you want to do that work no matter if it's a GET or POST or whatever...
[06:21:16] <FunkyBob> which 'first part'?
[06:21:26] <FunkyBob> lines 37-38
[06:21:31] <FunkyBob> extra work to be done in that view
[06:22:12] <FunkyBob> as explained before, dispatch() figures out if this is a GET, POST, DELETE or whatever request... and calls t he right method for that
[06:22:14] <wallbroken> if the method who is doing the work is from the parent class, why i'm refining the same one in the child class?
[06:22:29] <FunkyBob> because you want it to do things differently
[06:22:37] <FunkyBob> can you not see in that code it's doing more?
[06:23:36] <wallbroken> wait
[06:23:51] <wallbroken> you just told that dispatch() is used to discriminate between POST and GET
[06:23:58] <FunkyBob> yes
[06:24:20] <wallbroken> now, from what i read inside of that method definition, it wants GET requests
[06:24:26] <FunkyBob> no
[06:24:34] <FunkyBob> you mean because it references request.GET?
[06:24:39] <wallbroken> yes
[06:24:47] <FunkyBob> that's a poor naming choice we're sort of stuck with
[06:25:01] <FunkyBob> request.GET contains the parsed query string data... that is, everything after the ? in the url
[06:25:27] <wallbroken> like a dictionary?
[06:25:50] <FunkyBob> like that, but a littl more complex because querystrings allow multiple values for a single key
[06:26:12] <wallbroken> also dictionary
[06:26:16] <wallbroken> they are called arrays
[06:26:20] <FunkyBob> no
[06:26:27] <FunkyBob> PHP calls them Array
[06:26:50] <wallbroken> well, going back to the topic
[06:26:51] <FunkyBob> associative array is another name...
[06:27:20] <wallbroken> request.GET contains the url string parsed data
[06:27:22] <wallbroken> ok
[06:28:09] <wallbroken> is still not clear why we're defining a dispatch() in the child class but then we return something using the dispatch() parent class
[06:28:28] <PaulWay[w]> Because you're setting properties of self in that child class's method.
[06:29:13] <FunkyBob> wallbroken: in this case, as I've said... you want that work done no matter if it's a GET or a POST request
[06:29:30] <FunkyBob> if you wanted it only on aGET request, you'd typically write it into the get method
[06:29:37] <FunkyBob> for instance
[06:30:01] <FunkyBob> so that method overrides the default, sets up those form instances, then says "ok, do the original dispatch"
[06:30:19] <wallbroken> so, if we don't care if it's post or get, we shouldn't use dispatch() at all
[06:30:30] <FunkyBob> huh?
[06:30:36] <FunkyBob> how do you figure that?
[06:30:38] <wallbroken> because it's purpose is to discriminate between the request
[06:31:00] <FunkyBob> yes... it gets called first... then it decides whether to call get() or post() or delete() or put() or whatever
[06:31:20] <FunkyBob> you have no choice... it gets called.. as you saw in the as_view() generated view I showed you
[06:32:10] <wallbroken> it gets called? WE are calling it
[06:32:13] <wallbroken> return super().dispatch(request, *args, **kwargs)
[06:32:25] <FunkyBob> _your_ dispatch gets called by the view function
[06:32:34] <FunkyBob> does its setup work... then calls t he original dispatch
[06:32:44] <FunkyBob> which dispatches the request to the right handler method
[06:33:28] <FunkyBob> super() is how you access the super-class... the class(es) you're inheriting from
[06:33:57] <wallbroken> yes, and the super class dispatch() method can't be directly called?
[06:34:37] <FunkyBob> well, not since you've defined your own dispatch method on your class
[06:34:47] <wallbroken> if you don't define a new dispatch method, the one in the super class will be called
[06:34:49] <wallbroken> or no?
[06:34:53] <FunkyBob> yes
[06:35:12] <FunkyBob> it might help to think of your class as an "overlay" on the methods and properties of the parents
[06:35:28] <wallbroken> ok, so, if i remove my own dispatch metod, do you think it will work?
[06:35:59] <FunkyBob> for ShoeListView?  doesn't it need self.filter_form and self.order_form set?
[06:36:13] <FunkyBob> looking at the code, yes it does
[06:36:24] <wallbroken> yes
[06:36:31] <FunkyBob> however
[06:36:32] <wallbroken> but it can be done after dispatch
[06:36:40] <FunkyBob> it doesn't look like it handles a POST
[06:36:49] <FunkyBob> so it could be moved into get() or somewhere later in the process
[06:37:20] *** Quits: bobmight57 (~bobmight5@202-153-212-80.ca99d4.syd.static.aussiebb.net) (Ping timeout: 250 seconds)
[06:37:36] <wallbroken> so, that method declaration is completely pointless
[06:37:53] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 272 seconds)
[06:38:13] <FunkyBob> no, it does its job well
[06:38:21] <FunkyBob> it could be done differently.
[06:38:27] <FunkyBob> but that doesn't make it pointless
[06:38:43] <wallbroken> so, let's move on.
[06:38:57] <wallbroken> dispatch returns a post, get, delete, update
[06:38:58] <wallbroken> right?
[06:39:18] <wallbroken> with parsed querystring
[06:39:20] <FunkyBob> it returns what calling one of those returns
[06:39:32] <FunkyBob> it figures out which one to call, and calls it
[06:39:41] <FunkyBob> https://github.com/django/django/blob/main/django/views/generic/base.py#L93-L101
[06:39:47] <FunkyBob> it's a really short function
[06:40:22] <wallbroken> so, if the request is a get, it returns a get
[06:40:27] <wallbroken> if it's a post, it returns a post?
[06:40:51] <FunkyBob> it doesn't "return a get"
[06:41:02] <FunkyBob> it calls the get() method, and returns whatever that method returns
[06:42:12] <wallbroken> ok but
[06:42:13] <wallbroken> self.filter_form = ShoeForm(request.GET)
[06:42:22] <wallbroken> when i'm passing request.GET inside of ShoeForm
[06:42:31] <wallbroken> i'm coming through dispatch() ?
[06:43:30] <FunkyBob> I don't understand the question
[06:43:38] <FunkyBob> that line of code is in the dispatch method on your view class, yes.
[06:44:18] <FunkyBob> it happens when your dispatch method is called.
[06:44:53] <wallbroken> yes i know
[06:45:09] <wallbroken> but i'm not getting the utility of dispatch()
[06:49:55] <FunkyBob> of your one? or the default one?
[06:50:18] <wallbroken> can I ask you both?
[06:50:39] <FunkyBob> your one does what the default one does... but creates those two form class instances first
[06:50:58] <FunkyBob> the default one... as you can see from the code I linked you to... calls the appropriate class method for the HTTP Method
[06:51:03] <FunkyBob> read the code
[06:51:08] <FunkyBob> it's tiny and clear and commented
[06:52:16] <FunkyBob> if it's a HTTP GET, it calls self.get()
[06:52:29] <FunkyBob> this makes it easier when writing a view to write code for handling different HTTP methods
[06:53:50] *** Quits: iomari891 (~iomari891@197.210.77.213) (Ping timeout: 268 seconds)
[06:54:05] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[06:54:21] *** Quits: LuxuryMode (uid91005@id-91005.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[06:55:27] <FunkyBob> as always, if there's a line in there you don't understand, say so...
[06:59:01] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[07:01:04] <wallbroken> well, i don't think i did get. can you tell me what could be a dispatch() input and it's output?
[07:01:15] <wallbroken> i'm referring to parent class dispatch()
[07:02:03] <FunkyBob> you can see it right there
[07:02:22] <FunkyBob> it gets passed the request, and any arguments matched from the url pattern
[07:02:28] <FunkyBob> just like a view function would be
[07:02:44] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48) (Ping timeout: 252 seconds)
[07:06:39] <wallbroken> self.filter_form = ShoeForm(request.GET)
[07:06:42] <wallbroken> but WHY
[07:06:48] <wallbroken> here i'm not parsing the request
[07:07:03] <wallbroken> and i point to get request just adidng .GET to the request object?
[07:07:22] <wallbroken> here i did not used dispatch to manage the get request
[07:07:32] <FunkyBob> that creates a ShoeForm instance, passing to it the data passed in the querystring from the request
[07:07:34] <wallbroken> do you get what my perplexity is?
[07:07:42] <FunkyBob> and saves the newly created class instance  onto self
[07:08:01] <wallbroken> yes but see the argument of ShoeForm()
[07:08:06] <wallbroken> it is request.GET
[07:08:06] <wallbroken> ok?
[07:08:09] <FunkyBob> as I explained before request.GET has nothing to do with it being a HTTP GET request
[07:08:22] *** Joins: finnx (~sheppards@2600:1702:1ae0:930:2734:d7d7:c526:9d51)
[07:08:23] *** Quits: Adamantike (~adamantik@201.254.79.28) (Quit: The Lounge - https://thelounge.chat)
[07:08:25] <wallbroken> and that is the point i'm trying to understand
[07:08:29] <FunkyBob> it is a container of the parsed querystring data
[07:09:02] <FunkyBob> no matter which HTTP method is used, the URL can have ?foo=bar  in it..
[07:09:11] <FunkyBob> request.GET parses that into a more useful container
[07:09:20] <FunkyBob> well, request parses it, and makes it available as request.GET
[07:09:28] <FunkyBob> again, as I said, a poor choice of name.
[07:10:04] <wallbroken> ok, and that is a different thing from this: https://dpaste.org/JFah
[07:10:28] <FunkyBob> that is looking at what the HTTP verb is.
[07:10:49] <FunkyBob> then seeing if there's a method of the same name [lower cased] on this class
[07:10:53] <FunkyBob> if so, it calls it
[07:11:00] <FunkyBob> if not, it uses its default error handler method
[07:11:12] <FunkyBob> well, method-not-allowed handler method
[07:11:32] <wallbroken> request.method.lower() it the part that takes in charge the identification of the request?
[07:12:05] <FunkyBob> as you've seen in your other code, you can use request.method to see if this is a GET, POST, DELETE, or whatever other HTTP method request
[07:12:17] <FunkyBob> so they take that string and lower-case it (using .lower())
[07:12:51] <FunkyBob> and when i say "your other code", I mean places like https://github.com/ClaudioViti/lookbook/blob/multi-user-registration/shoes/views.py#L253
[07:13:13] <wallbroken> and it's the same as dispatch() ?
[07:13:36] <FunkyBob> huh?
[07:13:43] <wallbroken> dispatch is identificating the type of the request, right?
[07:14:22] <FunkyBob> yes
[07:14:30] <FunkyBob> that's what request.method tells you
[07:14:46] <FunkyBob> https://docs.djangoproject.com/en/3.2/ref/request-response/#django.http.HttpRequest.method
[07:16:19] <FunkyBob> back in 20mins... walk time
[07:26:11] *** Quits: ChOcO-Bn (~choco@user/choco-bn) (Quit: bye)
[07:26:24] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[07:30:54] <FunkyBob> back
[07:33:07] <wallbroken> ok, I'm still trying to understand how could be useful dispatch()
[07:33:11] <wallbroken> i don't get the point
[07:33:55] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[07:34:50] <FunkyBob> of dispatch in general?
[07:35:15] <FunkyBob> what's not to understand... it calls get() or post() or whatever if they exist... and otherwise calls the handler that generates a 405 status
[07:35:51] <FunkyBob> [note, this is why I said you shouldn't be using class-based views yet... they only add complexity and confusion for you]
[07:36:32] <wallbroken> it calls get(), post() to do what?
[07:36:42] <FunkyBob> to handle the request... to generate the response
[07:36:58] <FunkyBob> remember the definition of a view?
[07:37:17] <wallbroken> a way of rapresenting data?
[07:37:21] <FunkyBob> no
[07:37:24] <FunkyBob> not in django
[07:37:49] <FunkyBob> it's a function that accepts a request, and returns a response.
[07:38:04] <FunkyBob> specifically a HttpRequest instance, and a HttpResponse (or sub-class) instance.
[07:38:15] <wallbroken> oh yes i remember this definition
[07:38:35] <FunkyBob> so, the view function that as_view() created has called on dispatch() to generate the response
[07:38:51] <FunkyBob> dispatch by default calls the method matching the HTTP method ... to generate the response
[07:39:00] <FunkyBob> it _dispatches_ the request to the appropriate handler
[07:39:34] <wallbroken> ok
[07:39:50] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[07:39:54] <FunkyBob> it's the main entry point to request handling in a class-based View
[07:41:17] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:52:06] <wallbroken> a question: actually my project works in the following way:
[07:52:24] <wallbroken> an "admin" user can add/manage/remove items
[07:53:01] <wallbroken> the "base" users can just seee the items bounded to their account
[07:53:20] <wallbroken> an item can belong to multiple users
[07:54:08] <wallbroken> the base users cannot add/delete/remove items
[07:54:56] <wallbroken> my idea is that the base user should have the possibility to add items, and edit/delete those items that are bounded exclusively to their account
[07:55:38] <FunkyBob> edit/delete the items?  or edit/delete that the items are 'owned' by them?
[07:55:53] <wallbroken> let me show an example
[07:55:58] <wallbroken> we have 3 items
[07:56:06] <wallbroken> item1, item2, item3
[07:56:17] <wallbroken> item 1 is bounded to Bob, John, Sarah
[07:56:35] <wallbroken> item2 is bounded to Bob, item 3 is bounded to bob and Sarah
[07:56:56] <wallbroken> what i want to do is:
[07:57:24] <wallbroken> Bob can see item1 and item3
[07:57:29] *** Joins: mihael (~mihael@49.145.68.35)
[07:57:38] <wallbroken> Bob can see and edit/remove item2
[07:57:54] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 240 seconds)
[07:58:05] <FunkyBob> so here I'm trying to clarify what you mean by 'edit'
[07:58:08] <wallbroken> John can see item1 but he can't see item2 and item3
[07:58:17] <FunkyBob> by 'remove' I assume you mean it's not longer 'bound' to him
[07:58:36] <FunkyBob> but what is 'edit' in this context?
[07:59:10] <wallbroken> "edit" means modifying the fields from managent form i already have
[07:59:48] <wallbroken> the idea is: users can modify/remove items that are EXCLUSIVELY bounded to them
[07:59:49] <FunkyBob> stop saying "management form" like it's a thing
[08:00:08] <FunkyBob> you mean to edit the Item itself/
[08:00:09] <FunkyBob> ?
[08:00:32] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user-registration/shoes/views.py#L275
[08:00:35] <FunkyBob> so t hey can edit any field on the Item, or remove it from their "list of things I can edit" ... but can't add new ones
[08:00:35] <wallbroken> this is it
[08:01:08] <wallbroken> they can add new ones
[08:01:13] <FunkyBob> fine, but you're bleeding into implementation...
[08:01:28] <wallbroken> the shared items can be edited/deleted ONLY by the admin user
[08:01:33] <wallbroken> like it's currently
[08:01:34] <FunkyBob> but you
[08:01:40] <FunkyBob> you just said anyone 'bound' to the item can edit it
[08:02:10] <wallbroken> there are some item that are in common
[08:02:20] <FunkyBob> or are you saying that _currently_ onl the admin can edit them?  and you want to change this?
[08:02:22] <wallbroken> and some other that belongs to one single suer
[08:02:29] <wallbroken> yes
[08:02:37] <FunkyBob> then be specific and explicit about t hat
[08:02:39] <wallbroken> now the admin manages them all
[08:02:53] <wallbroken> the single users can't do anything
[08:02:55] <FunkyBob> you keep assuming everyone else thinks like you do... despite all the evidence to the contrary
[08:02:58] <wallbroken> just view and order items
[08:03:25] <FunkyBob> so you want to make it so users can edit any items they 'own'
[08:03:37] <wallbroken> yes
[08:03:55] <FunkyBob> sounds like the Item needs an 'owners' M2M field... and the edit page needs to filter by that if the user is not admin
[08:04:30] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user-registration/shoes/models.py#L130
[08:06:34] <FunkyBob> are you trying to imply that that's what your user field is for?
[08:07:49] <wallbroken> tha user field is to bound each item to some user
[08:08:12] <wallbroken> between user and item there is N:N relationship
[08:08:33] <FunkyBob> a Many-to-Many, yes
[08:08:51] *** Joins: iomari891 (~iomari891@197.210.77.229)
[08:11:04] <wallbroken> so, i need to create a new view because i want a "manage mode" of the page
[08:11:23] <wallbroken> in the sense of if i go in manage mode, i will see the "add/edit/remove" buttons in the page
[08:11:51] <wallbroken> for admin i just used is_staff in the template
[08:12:18] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 264 seconds)
[08:16:43] <wallbroken> do you think i need a new view?
[08:17:02] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[08:18:28] <FunkyBob> so... do  you have an existing view to edit those items?
[08:19:08] <wallbroken> https://github.com/ClaudioViti/lookbook/blob/multi-user-registration/shoes/views.py#L275
[08:19:18] <FunkyBob> a "yes' or "no" will do
[08:19:24] <wallbroken> yes
[08:19:43] <FunkyBob> ok, but there's nothing in that view to limit who can edit it, so lng as they're logged in
[08:20:17] <wallbroken> exactly
[08:20:23] <wallbroken> because that view is used by admin
[08:20:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:20:38] <wallbroken> who, by definition, can act anything
[08:20:40] <FunkyBob> so you're only limiting it now by not telling people it exists
[08:20:48] <FunkyBob> bsically
[08:20:55] <FunkyBob> basically
[08:21:19] <FunkyBob> you hide the link behind {% if user.is_admin %}
[08:21:34] <wallbroken> yes
[08:22:17] <FunkyBob> you don't need a new view, but I'd make sure that view limits who can use it.
[08:22:41] <FunkyBob> and the most common way is to limit which Shoe records the get_object_or_404 can select
[08:22:54] <FunkyBob> this would be a simple change if it weren't for the is_admin override
[08:23:10] <FunkyBob> it's only a little more complex because of that
[08:23:34] <FunkyBob> if it were only for "Shoes owned by t he user" you could use get_object_or_404(Shoe, user=request.user, pk=pk)
[08:24:57] <wallbroken> FunkyBob: a specific requirement:
[08:25:15] <wallbroken> the basic user's page itself must not show edit/delete/add buttons
[08:25:28] <wallbroken> it must just show "enter management mode" button
[08:25:46] <wallbroken> and in that, i should see all of those buttons
[08:25:57] <wallbroken> and obviously, only the items that can be managed
[08:26:28] <wallbroken> and the manageable items are those who are exclusively bounded to the current user
[08:26:50] <wallbroken> so, i guess i need a new url
[08:26:59] <wallbroken> which is pointing to a new view
[08:27:21] <wallbroken> which basically must be the same as the ShoeList view but with some user filtering
[08:27:30] <wallbroken> do you agree with me?
[08:27:44] <FunkyBob> it would be easier to manage if "management" views were separate from other views,
[08:28:11] <wallbroken> but i need a different item filtering
[08:28:31] <wallbroken> in the management view i should filter items by user
[08:28:39] <FunkyBob> unless they're a super user
[08:28:53] <wallbroken> yes, but in that case, the actual setup is fine
[08:29:07] <FunkyBob> so back to hte view we were discussing
[08:29:21] <FunkyBob> it helps if you know that get_object_or_404 can accept a queryset, not just a model, as the first argument
[08:29:54] <FunkyBob> so you can default to the full set of shoes, and if not user.is_admin:  filter the set for that user only... then pass the queryset to get_object_or_404
[08:30:11] <wallbroken> no
[08:30:16] <FunkyBob> no?
[08:30:25] <FunkyBob> you rally can
[08:30:29] <FunkyBob> really can, even
[08:31:05] <wallbroken> well, remember i said that an user can see in the normal mode also items shared with some other users?
[08:31:18] <FunkyBob> yes?
[08:31:42] <wallbroken> ONLY in "manage mode" we must show only the exclusive owned object
[08:31:55] <wallbroken> because they are only the items the user can manage
[08:32:10] <FunkyBob> ok. doesn't change what I'm saying about the edit view
[08:32:20] <FunkyBob> sounds more like an issue for the list view
[08:33:00] <wallbroken> so you want to change the edit view in order to filter the owned items?
[08:33:17] <FunkyBob> I'm saying you should make the edit view restrict who can edit what.
[08:33:19] <FunkyBob> currently you don't
[08:33:46] <wallbroken> but i also have the admin user
[08:33:51] <FunkyBob> currently if I know the shoe pk (which I can read from the URL) ... I can edit it, so long as I'm logged in
[08:33:55] <FunkyBob> yes, you mentioned that
[08:33:56] <wallbroken> who can edit anything he want
[08:33:59] <FunkyBob> yes
[08:34:05] <FunkyBob> and I'm trying to explain how to handle that
[08:34:10] <FunkyBob> once again it seems you're not reading what I say
[08:34:47] <wallbroken> remember that i need to act on 3 views
[08:34:50] <wallbroken> add, edit, remove
[08:35:01] <FunkyBob> yes, but for now I'm trying to focus only on one of them
[08:35:27] <FunkyBob> it doesn't matter how any of the others work... if I can just plug in the URL for the edit page and it will let me
[08:36:11] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[08:36:27] <wallbroken> https://dpaste.org/rfR8#L23
[08:36:30] <FunkyBob> there's an anti-pattern called "security through obscurity"
[08:36:46] <FunkyBob> you're pretending your system is secure just because you don't show a link to the edit page
[08:37:11] <FunkyBob> right... that's the version I said you could use IFF you didn't need the is-admin override
[08:37:30] <wallbroken> 6:06:30 AM - FunkyBob: there's an anti-pattern called "security through obscurity"
[08:37:30] <wallbroken> 6:06:46 AM - FunkyBob: you're pretending your system is secure just because you don't show a link to the edit page
[08:37:37] <wallbroken> i was thinking about this problem some time ago
[08:37:40] <FunkyBob> I then went on to explain how you could change it to support admin
[08:37:50] <wallbroken> but it's the best i can reach using my knowledge
[08:37:51] <wallbroken> sorry
[08:38:04] <FunkyBob> I'm trying to expand your knowlege
[08:38:12] <FunkyBob> but it's tough going, because you seem to ignore most of what I say
[08:39:09] <wallbroken> well, sometimes things makes hard, and i need to apply more effort
[08:39:22] <FunkyBob> or ask more questions
[08:39:24] <wallbroken> well, that's the only change i need in edit_shoe view?
[08:40:05] <FunkyBob> 03:17 < FunkyBob> it helps if you know that get_object_or_404 can accept a queryset, not just a model, as the first argument
[08:40:08] <FunkyBob> 03:17 < FunkyBob> so you can default to the full set of shoes, and if not user.is_admin:  filter the set for that user only... then pass the queryset to get_object_or_404
[08:43:51] <wallbroken> yes but i cannot add is_admin in the view
[08:44:02] <FunkyBob> add it?
[08:44:12] <FunkyBob> it's a property of the user
[08:44:19] <wallbroken> generally i used it in the template
[08:44:22] <FunkyBob> which is passed to you on the request object
[08:44:25] <wallbroken> to hide parts/buttons
[08:44:30] <FunkyBob> we're not talking about buttons
[08:44:38] <FunkyBob> we're talking about rejecting access to the view entirely
[08:45:13] <wallbroken> ok, i did get what your idea is
[08:45:36] <wallbroken> well, let me try to implement
[08:45:43] <wallbroken> now we have shoe = get_object_or_404(Shoe, user=request.user, pk=pk)
[08:45:49] <wallbroken> the first argument is the model
[08:45:53] <FunkyBob> correct
[08:46:04] <wallbroken> you just tld that it cann accept a queryset instead of model
[08:46:09] <FunkyBob> but when user.is_admin ... you don't want to apply the user=request.user filtering
[08:46:14] <FunkyBob> yes, I did
[08:46:39] <wallbroken> so i can make somethin like:
[08:46:47] <wallbroken> if user.is_admin
[08:47:05] <wallbroken>     parameter = queryset(...)
[08:47:21] <wallbroken> shoe = get_object_or_404(parameter, user=request.user, pk=pk)
[08:47:35] <wallbroken> else
[08:47:43] <wallbroken>     parameter = Shoe
[08:47:53] <wallbroken> do you think it would make sense?
[08:47:56] <FunkyBob> close
[08:48:23] <FunkyBob> as I described above, I would start with the whole set, and if the user is _not_ admin then filter by user
[08:48:24] <wallbroken> the else part is before the get_object statement obviously
[08:49:02] <wallbroken> "the whole set" ?
[08:49:03] <FunkyBob> so... queryset = Shoe.objects.all() ;  if not request.user.is_admin: queryset = queryset.filter(user=request.user)
[08:50:14] <dodobrain> holy moly.. i didnt know this was a daily drill that happens here
[08:50:16] <dodobrain> haha
[08:50:31] <FunkyBob> dodobrain: fire drill?
[08:50:41] <dodobrain> no, the wallbroken drill!
[08:50:50] <FunkyBob> ah...heh
[08:50:56] <dodobrain> :D
[08:51:00] <FunkyBob> dodobrain: well, you have to admire their persistence
[08:51:03] <wallbroken> https://dpaste.org/HNCg
[08:51:28] <FunkyBob> wait... image view?
[08:51:33] <dodobrain> that i do, and it appears to be genuine (unless its something like a long con or whatever the heck they call it)
[08:51:35] *** Parts: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) ()
[08:51:44] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 268 seconds)
[08:51:56] <wallbroken> FunkyBob: bad point
[08:53:28] <dodobrain> is wallbroken trying to understand python/django by going through a completed project from someone else or is this something they have written themselves (i'm a little terrified as how this would have happened)
[08:53:35] <wallbroken> FunkyBob: https://dpaste.org/LTux
[08:53:49] <FunkyBob> dodobrain: no, they're trying to build a project from scratch
[08:53:57] <FunkyBob> but so far have refused to do any tutorials.
[08:54:06] <dodobrain> whats with all the shoe business ?
[08:54:20] <FunkyBob> wallbroken: almost, but you don't want the user=request.user in get_object_or_404 any more...
[08:54:38] <wallbroken> ok
[08:54:49] <FunkyBob> since that's conditionally applied to the queryset already
[08:56:03] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[08:56:20] <wallbroken> ok
[08:56:22] <wallbroken> i did that
[08:56:47] <wallbroken> now?
[08:57:02] <FunkyBob> now... that view will 404 if someone who's not allowed to tries to edit that record
[08:57:19] <FunkyBob> next step is to show/hide links to the edit page as appropriate
[09:01:18] <wallbroken> CSRF token missing or incorrect.
[09:01:21] <wallbroken> 403
[09:02:04] <FunkyBob> sounds like you POSTed a form but forgot to include the {% csrf_token %}
[09:02:56] <wallbroken> 'User' object has no attribute 'is_admin'
[09:03:21] <FunkyBob> ...
[09:03:21] <wallbroken> i'm logged as admin
[09:04:06] <FunkyBob> oh, oops, it's is_superuser
[09:04:12] <FunkyBob> https://docs.djangoproject.com/en/3.2/ref/contrib/auth/#django.contrib.auth.models.User.is_superuser
[09:05:44] <wallbroken> well, it looks like is it also allowing me in editing shared items
[09:05:49] <wallbroken> this should be forbidden
[09:06:14] <FunkyBob> "looks" how?
[09:08:49] <wallbroken> i can access to edit form for a shared shoe end edit a field
[09:08:58] <wallbroken> this must be forbidden
[09:09:11] <FunkyBob> so you're not logged in as a superuser?
[09:09:18] <FunkyBob> you said you're logged in as admin
[09:09:25] <FunkyBob> you said admin should be able to edit everything
[09:09:26] <FunkyBob> so...
[09:09:28] <FunkyBob> I'm confused
[09:10:52] <wallbroken> i'm not logged in as admin
[09:10:57] <wallbroken> i'm logged it as a basic user
[09:11:13] <FunkyBob> 03:51 < wallbroken> i'm logged as admin
[09:11:37] <wallbroken> how to see the current user i'm logged it?
[09:11:43] <wallbroken> *with
[09:12:09] <FunkyBob> display it in your template... or visit admin, if is_staff is set
[09:12:58] <wallbroken> You are authenticated as ccc, but are not authorized to access this page. Would you like to login to a different account?
[09:13:07] <wallbroken> ok, i'm authenticated as basic user
[09:13:23] <wallbroken> so, there is something isn't working
[09:13:34] <FunkyBob> ok
[09:13:40] <FunkyBob> and that user has no related Shoe records?
[09:13:47] <FunkyBob> via the user field, that is
[09:14:44] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Ping timeout: 252 seconds)
[09:15:05] <wallbroken> i have two items
[09:15:16] <wallbroken> both are related to current user
[09:15:28] <wallbroken> but one of them is in sharing with another user
[09:17:19] <wez> woah, you two have been at it for a while, are you closer to a resolution?
[09:17:51] *** Quits: mihael (~mihael@49.145.68.35) (Quit: Client closed)
[09:18:32] <FunkyBob> wez: yeah... am about to call it a day
[09:18:54] <dodobrain> i dunno man.. i feel like (regardless of covid), i should get on a plane and then give FunkyBob a hug
[09:19:22] <wez> :)
[09:19:31] <dodobrain> has this been going on for days / weeks  months?
[09:19:42] <FunkyBob> we're past one month at least
[09:19:47] <dodobrain> lawl
[09:20:02] *** Quits: jgee (~jgee@186.80.49.20) (Read error: Connection reset by peer)
[09:20:13] <FunkyBob> honestly, I've lost track
[09:20:41] *** Joins: jgee (~jgee@186.80.49.20)
[09:21:01] <dodobrain> is it becoming a habit? do to check if wallbroken is online when you open up the channel in the morning? :p
[09:23:07] <wallbroken> FunkyBob: so, have you an idea of what the problem is?
[09:24:06] <dodobrain> wallbroken, hes finished his quota for today .. continue tomorrow? :)
[09:24:25] <FunkyBob> wallbroken: no... I might need you to write down more clearly the logic of who can edit what
[09:24:54] <FunkyBob> dodobrain: honestly, most of the time I try to avoid it... but today it was clear wallbroken was making solid efforts at understanding some basics
[09:25:01] <FunkyBob> something I've repeatedly t old them they need to grasp
[09:25:02] <wallbroken> it's simple
[09:25:11] <dodobrain> "simple"
[09:25:29] <wallbroken> if an item belongs to more than 1 user, NOBODY of them can edit that item
[09:25:40] <FunkyBob> ok, THAT was the missing bit
[09:25:51] <dodobrain> i dont think you had that check in the code lol
[09:26:02] <FunkyBob> no, it's not
[09:26:07] <wallbroken> if an item is bounded to only single user, that user can do whatever he wants
[09:26:20] <wallbroken> now it's clear?
[09:26:28] <FunkyBob> you'd need to exclude any Shoe that has more than one related user....
[09:26:53] <FunkyBob> so... something like annotate(user_count=Count('user')).filter(user_count=1)
[09:27:44] <wallbroken> where?
[09:27:53] <FunkyBob> when constructing the queryset
[09:28:15] <wallbroken>  queryset = queryset.filter(user=annotate(user_count=Count('user')).filter(user_count=1))
[09:29:10] *** Joins: mihael (~mihael@49.145.68.35)
[09:29:35] <FunkyBob> ... no
[09:29:47] <FunkyBob> annotate is a queryset method
[09:30:01] <FunkyBob> but you can combine both of the filter() calls
[09:30:51] <wallbroken> queryset = queryset.annotate(user_count=Count('user')).filter(user_count=1)
[09:31:11] <FunkyBob> yes, but you still need the other filter clause
[09:31:20] <FunkyBob> stop copy'n'pasting code you don't understand
[09:31:24] <FunkyBob> if you don't understand it... ASK
[09:31:33] <FunkyBob> about the 1000th time I've told you that
[09:32:12] <wallbroken> wait, i need to import Count()
[09:32:13] <wallbroken> from django.db.models import Count
[09:32:14] <wallbroken> ok
[09:32:35] <wallbroken> you told me that annotate is a queryset method
[09:32:44] <wallbroken> so i've made like that
[09:32:45] <FunkyBob> yes
[09:32:50] <FunkyBob> i didn't tell you what it does
[09:33:10] <wallbroken> 7:00:01 AM - FunkyBob: but you can combine both of the filter() calls
[09:33:13] <wez> wallbroken: queryset.annotate(...)
[09:36:15] <wallbroken> FunkyBob: what do i need to do?
[09:37:04] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48)
[09:37:52] <wallbroken> yes, with shared object i get 404
[09:38:10] <FunkyBob> right
[09:40:19] *** Joins: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net)
[09:41:11] <wallbroken> now i do the same for delete?
[09:41:39] <bin4ry> I'm trying to run a program in celery, but can't seem retrieve the instance or execute sleep afterwards, anyone know why? -- https://dpaste.org/psZY/slim
[09:42:06] <FunkyBob> wallbroken: if you want delete to use the same logic... yes.
[09:42:43] <wallbroken> then i need to make that i can see only editable items
[09:43:40] <dodo> bin4ry: first guess.. remote connection times out. do you have logging?
[09:43:58] *** Quits: mihael (~mihael@49.145.68.35) (Quit: Client closed)
[09:44:14] <bin4ry> dodo: I tried running a worker with debug, seems like after the `driver=webdriver` (the connect command), nothing gets executed afterwards
[09:44:32] <dodo> bin4ry: do you have logging?
[09:44:59] <dodo> bin4ry: wait, so you're running it in the foreground?
[09:45:28] <bin4ry> dodo: I'm running a celery worker on foreground for debugging purpose.
[09:45:45] <dodo> bin4ry: i'd set a connection timeout and see what happens
[09:46:37] <bin4ry> dodo: https://dpaste.org/rU53/slim you can see here that ForkPoolWorker no longer run anymore command after the webdriver.Remote()
[09:46:55] <bin4ry> dodo: timeout in task, or webdriver do you mean?
[09:47:07] <dodobrain> nani???
[09:47:10] <dodo> bin4ry: how can i see that?
[09:47:20] <dodo> bin4ry: timeout in the webdriver connection
[09:47:21] <dodobrain> theres more of us!
[09:47:46] <bin4ry> dodo: in fact after a while like 3mins, I actually get kicked out by webdriver automatically.
[09:47:53] *** Quits: jgee (~jgee@186.80.49.20) (Read error: Connection reset by peer)
[09:48:02] <dodo> bin4ry: how can you tell?
[09:48:31] <bin4ry> dodo: the log will tell.. wait it just happened
[09:48:32] *** Joins: jgee (~jgee@186.80.49.20)
[09:48:58] <bin4ry> dodo: https://dpaste.org/wjfR/slim so the question is, why doesn't the task code snippet get executed
[09:49:12] <dodo> bin4ry: because the connection never succeeds
[09:49:26] <bin4ry> dodo: i have vnc watching my selenium, in fact the website is opened
[09:49:31] <dodo>  File "/srv/app/apps/jobs/task.py", line 59, in start_verification
[09:49:38] <bin4ry> dodo: if I run this code using pure python, it gets exited properly
[09:49:43] <dodo> bin4ry: then whatever selenium does times out i guess
[09:49:53] <dodo> yeah selenium.common.exceptions.TimeoutException: Message: java.util.concurrent.TimeoutException
[09:52:23] *** Joins: Gudddu (~Guddu@117.222.80.236)
[09:55:26] *** Quits: Guddu (~Guddu@117.222.80.236) (Ping timeout: 252 seconds)
[10:02:49] <bin4ry> dodo: hmmm its weird I see that connection actually get re-established after driver.quit()
[10:09:05] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:09:10] *** Joins: mihael (~mihael@49.145.68.35)
[10:13:57] <dodobrain> FunkyBob, you still around?
[10:16:22] <mihael> I've deployed a Django App on  Elastic Beanstalk. When opening the site though, there are issues retrieving resources from S3: GET https://app-bucket.s3.amazonaws.com/rest_framework/css/bootstrap-tweaks.css net::ERR_ABORTED 400 (Bad Request). Anyone knows how to resolve this?
[10:16:43] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 268 seconds)
[10:17:54] <serafeim> hello friends
[10:23:06] *** Quits: sbmsr (~pi@104-6-130-18.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 264 seconds)
[10:25:28] *** Quits: Gudddu (~Guddu@117.222.80.236) (Read error: Connection reset by peer)
[10:43:26] *** Joins: Crovax31 (~quassel@2a01:e0a:85:33d0:d86b:82fc:cfdd:e54a)
[10:47:21] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[10:49:50] *** Joins: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d)
[10:53:51] <FunkyBob> dodobrain: barely
[10:54:15] <dodobrain> ah i almost forgot what i wanted to ask
[10:54:18] <FunkyBob> ok
[10:55:14] <dodobrain> does django allow forms to be created to represent an object and its foreignkey relational objects ?
[10:55:14] <bin4ry> Oh god.. its selenium version problem all along
[10:55:54] <dodobrain> i.e. single to ask/edit the author details and also book details at the same time
[10:56:10] <dodobrain> bin4ry, are you sure it wasnt the webdriver version?
[10:56:46] <bin4ry> dodobrain: I bumped selenium from 3.140 to 3.141 now the driver can close properly..
[10:56:57] <bin4ry> Can't believe I spent 10 hrs in this
[10:57:33] <FunkyBob> mihael: it really depends on why it's giving a 400.. perhaps check in the s3 console to see if it's publicly accessible
[10:58:22] <dodobrain> FunkyBob, for the purposes of this question lets assume that every book can have only 1 author. so my question is then this: if i end up "deleting"/"removing" a book from the form/frontend, whats the best way to process it on the view ?
[11:01:17] <FunkyBob> not sure I understand
[11:03:25] *** Quits: sbmsr (~pi@2600:1700:63d0:4830:7dbf:92d8:fd42:235d) (Read error: Connection reset by peer)
[11:05:48] <dodobrain> say you build out a form. Author: Funky [Edit], Books [Add+]: Book1 [Edit][Del]  Book2 [Edit][Del]
[11:07:18] <PaulWay[w]> Mmmmm?
[11:09:04] <FunkyBob> ok?
[11:09:36] <wez> ?
[11:10:12] *** Joins: mattil (~mattil@87-95-2-115.bb.dnainternet.fi)
[11:10:24] *** Quits: mattil (~mattil@87-95-2-115.bb.dnainternet.fi) (Remote host closed the connection)
[11:10:41] <dodobrain> yeah i'm prolly trying to confuse myself while trying to confuse you guys :)
[11:11:49] <dodobrain> anyway, the idea is that those Books (Book1, Book2, etc.) could be real django models or virtual properties with a schema defined on the backend and delivered with the form
[11:13:25] *** Joins: mattil (~mattil@dzcmq5zynz1gzmdpcpk-4.rev.dnainternet.fi)
[11:13:28] *** Quits: mattil (~mattil@dzcmq5zynz1gzmdpcpk-4.rev.dnainternet.fi) (Remote host closed the connection)
[11:14:02] *** Joins: mattil (~mattil@airio.portalify.com)
[11:14:05] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 252 seconds)
[11:14:25] <dodobrain> and the current backend view when it receives the form result thats been annotated with which subforms are newly added and which subforms have been deleted is going through a hairy processor that adds/deletes the model backed properties and any non-model backed properties are saved (or edited due  to deletion) as json blobs
[11:15:37] *** Joins: Trieste (~T@user/pilgrim)
[11:15:52] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[11:16:18] <PaulWay[w]> You can have forms that aren't related to a model.  But it sounds like you're still confused as to what you're doing in there.
[11:17:59] <dodobrain_> im trying to find a good example here.. maybe Book is a django model with name and yearpublished fields. and Author is a django model with name, books (via fk) and a jsonfield called `otherprops`
[11:18:48] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[11:19:08] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 244 seconds)
[11:19:09] <dodobrain_> now as part of the form, one could supply a schema for say the `citieslivedin` property which has a schema like {city: text, country: text}
[11:22:05] *** Joins: Tas-sos (~Tas-sos@ppp079167217163.access.hol.gr)
[11:22:39] <dodobrain_> so the current backend has a very weird way it cleans the non-model backed virtual fields
[11:22:44] <dodobrain_> and theres a stupid bug in there
[11:23:01] <dodobrain_> and i'm just about ready to tell them the whole thing needs to be nuked
[11:23:33] <dodobrain_> i think the idea is good, but the desing of the implementation and the implementation itself is quite bad
[11:24:55] *** Joins: gillzon (~gillzon@2-249-139-174-no288.tbcn.telia.com)
[11:25:15] <gillzon> Is it possible to get SQL Create statements from migrations?
[11:26:20] <PaulWay[w]> manage.py sqlmigrate
[11:32:04] *** Quits: jpic (~jpic@82.142.9.26) (Ping timeout: 268 seconds)
[11:34:25] *** Joins: mattil (~mattil@dzcmq5zynz1gzmdpcpk-4.rev.dnainternet.fi)
[11:36:28] *** Quits: mattil (~mattil@dzcmq5zynz1gzmdpcpk-4.rev.dnainternet.fi) (Remote host closed the connection)
[11:44:23] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:46:50] *** Quits: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net) (Ping timeout: 244 seconds)
[11:51:13] *** Joins: Rikem (~mike@user/rikem)
[11:54:03] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[11:54:05] *** Joins: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net)
[12:08:35] *** Joins: mattil (~mattil@dzcmq4-mwh84qyp04b8-4.rev.dnainternet.fi)
[12:09:06] *** Quits: mattil (~mattil@dzcmq4-mwh84qyp04b8-4.rev.dnainternet.fi) (Remote host closed the connection)
[12:09:48] *** Joins: mattil (~mattil@airio.portalify.com)
[12:20:40] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 268 seconds)
[12:20:43] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48) (Ping timeout: 264 seconds)
[12:23:53] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[12:26:47] *** Quits: Reventlov (~remy@user/reventlov) (Quit: WeeChat 2.3)
[12:35:23] *** Joins: mattil (~mattil@dzcmq4-mwh84qyp04b8-4.rev.dnainternet.fi)
[12:37:26] *** Joins: pbgc (~textual@a89-152-234-147.cpe.netcabo.pt)
[12:41:48] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:43:18] *** Joins: slav0nic (slav0nic@python.su)
[12:44:30] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[12:44:35] *** Quits: mattil (~mattil@dzcmq4-mwh84qyp04b8-4.rev.dnainternet.fi) (Ping timeout: 272 seconds)
[12:46:09] *** Joins: wattux (~wattux@212.51.23.106)
[12:48:37] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi)
[12:48:47] *** Joins: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef)
[12:52:39] *** Quits: Tas-sos (~Tas-sos@ppp079167217163.access.hol.gr) (Ping timeout: 244 seconds)
[12:54:50] *** Joins: ChOcO-Bn (~choco@user/choco-bn)
[12:56:36] *** Joins: dodobrain__ (~dodobrain@user/dodobrain)
[12:56:54] *** Joins: mattil (~mattil@87-95-2-115.bb.dnainternet.fi)
[12:59:30] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[13:01:27] *** Joins: clemente (~Daniel@balticom-142-72-136.balticom.lv)
[13:05:39] *** Quits: mattil (~mattil@87-95-2-115.bb.dnainternet.fi) (Remote host closed the connection)
[13:06:26] *** Joins: mattil (~mattil@87-95-2-115.bb.dnainternet.fi)
[13:10:00] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[13:11:03] *** Quits: mattil (~mattil@87-95-2-115.bb.dnainternet.fi) (Remote host closed the connection)
[13:11:17] *** Joins: mattil (~mattil@87-95-2-115.bb.dnainternet.fi)
[13:15:21] *** Joins: browniebroke (uid501792@id-501792.tinside.irccloud.com)
[13:16:42] *** Quits: Trieste (~T@user/pilgrim) (Ping timeout: 240 seconds)
[13:18:45] *** Joins: Trieste (T@user/pilgrim)
[13:22:14] *** Quits: mattil (~mattil@87-95-2-115.bb.dnainternet.fi) (Remote host closed the connection)
[13:23:25] *** Joins: mattil (~mattil@airio.portalify.com)
[13:24:37] *** Joins: gillzon_ (~gillzon@91.132.138.220)
[13:25:32] *** Quits: mihael (~mihael@49.145.68.35) (Ping timeout: 250 seconds)
[13:27:23] *** Quits: gillzon (~gillzon@2-249-139-174-no288.tbcn.telia.com) (Ping timeout: 268 seconds)
[13:27:28] *** Joins: teut (~teut@182.69.85.39)
[13:28:23] <teut> Uploaded file: https://uploads.kiwiirc.com/files/4dca7f52adea461e3c8f9f52e69cc6f3/pasted.txt
[13:28:55] <teut> how to get the value of that function, as a field while using   .objects.all()?
[13:29:18] <teut> or just map to to the iterator
[13:30:15] <teut> https://groups.google.com/g/django-users/c/HYy4HqAQExk/m/aokIYdcoCAAJ
[13:31:16] <FunkyBob> you mean the total price?
[13:31:47] <FunkyBob> you could annotate(total_price=F('num_shares') * F('price_per_share')) and then access obj.total_price
[13:32:15] <teut> can you see my google group post?
[13:32:18] <FunkyBob> even better, if you add total_price as a @cached_property it can be set by the query, or calculated on the fly
[13:32:34] <teut> that is something what I wanted
[13:32:39] <FunkyBob> _why_ is it undesirable?
[13:32:44] <teut> checking the docs
[13:32:59] *** Quits: pbgc (~textual@a89-152-234-147.cpe.netcabo.pt) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[13:33:12] <teut> annotate(total_price=F('num_shares') * F('price_per_share'))     this is hard coding
[13:33:22] <FunkyBob> hard coding the field names?
[13:33:32] <FunkyBob> wait... where is get_output_field from? you mention it in the question  it's not in the code
[13:33:33] <teut> hard coding the formula
[13:33:50] <FunkyBob> yes, well, the formula is hard coded in  your get_total_price method too
[13:34:24] <teut> ya but I m using that function in the view
[13:34:31] <teut> in the template and other places
[13:34:48] *** Joins: pbgc (~textual@a89-152-234-147.cpe.netcabo.pt)
[13:34:49] <FunkyBob> and I'm offering you a clean alternative that covers both cases
[13:34:50] <teut> change in one place would change it everywhere and that is desirable
[13:35:08] <teut> yes i m checking cached_property just a sec
[13:35:38] <FunkyBob> https://dpaste.org/EVk5
[13:35:47] <FunkyBob> it's from django.utils.functional iirc
[13:35:53] <FunkyBob> though python has its own version now, too
[13:36:27] <FunkyBob> it works like @property but saves  the result of the first time you call it
[13:36:32] *** Quits: justBull (~justache@user/justache) (Read error: Connection reset by peer)
[13:36:44] <FunkyBob> but like a regular attribute it can also bet set
[13:37:01] <FunkyBob> in  your case it's no big deal... calling it doesn't do a DB hit or any hard work
[13:37:05] <teut> ya but why waste memory
[13:37:06] <FunkyBob> but if it did... it could be a big win
[13:37:11] <teut> yes
[13:37:21] <teut> if the formula was complicated
[13:37:24] <FunkyBob> well, it doesn't really use much, since setting it sets  the value in obj.__dict__ as normal
[13:38:06] *** Joins: justBull (~justache@user/justache)
[13:39:26] <Kim^J> teut: Waste memory?
[13:39:44] <Kim^J> You are aware which language and runtime you're using right? xD
[13:40:22] <teut> yes Kim^J  , but I would prefer python's easy syntax over  speed
[13:40:42] <teut> and django which handles many security loopholes
[13:40:50] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 268 seconds)
[13:42:20] <teut> https://docs.djangoproject.com/en/3.2/_modules/django/utils/functional/
[13:42:41] <Kim^J> What I'm saying is that your concerns over memory usage for this property are silly.
[13:42:43] <teut> quite strange FunkyBob I could only search it in blogs
[13:43:14] <teut> ok, but if the formula is bigger than it could be useful
[13:43:26] <teut> and there will be millions of rows
[13:43:33] <teut> billions rather
[13:43:49] <Kim^J> You won't render millions nor billions of rows.
[13:43:56] <teut> no
[13:44:08] <teut> ok that makes sense now
[13:44:41] <teut> but yet how will, that rendering matter if I save that as a field
[13:46:15] <Kim^J> Why save it as a field? That's not the suggested solution.
[13:46:26] <teut> then?
[13:46:32] <teut> arent you saying this?
[13:46:45] <FunkyBob> no field
[13:46:58] <teut> not you FunkyBob , they
[13:47:08] <FunkyBob> i didn't see kim suggest a field, either
[13:47:16] <dodobrain__> cached_property is *not* saved as a field
[13:47:28] <teut> ya but where is in the docs
[13:47:32] <dodobrain__> wait, maybe he is talking about someone else on the goog groups post or something ?
[13:48:07] <teut> whatever , utimate thing is  catched_property should be used
[13:48:20] *** dodobrain__ is now known as dodobrain
[13:48:22] <FunkyBob> https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.functional.cached_property
[13:48:34] <teut> https://django-treasures.readthedocs.io/en/latest/cached_property.html here is it
[13:48:35] <dodobrain> `ultimate`! lol
[13:48:51] <FunkyBob> it's mentioned in a few places, in fact
[13:48:59] <teut> from django.utils.functional import catched_property    autocomplete gave this
[13:49:27] <dodobrain> i'm going to assume that `catched_property` is your typo here instead of in the code
[13:50:09] <teut> yes, spelling mistake sorry
[13:53:09] <teut> transactions = TransactionEntry.objects.filter(user=user).values_list()      how to now say the manager to include  it?
[13:53:13] *** Joins: mihael (~mihael@2001:4454:29d:cb00:eb7c:153c:b1ef:58e5)
[13:54:14] <FunkyBob> include which?
[13:54:34] <teut> include that cached+property
[13:54:37] <teut> _*
[13:55:12] <FunkyBob> you can't, you used values_list so you don't get model instances back
[13:55:16] <FunkyBob> you'd have to use annotate them
[13:55:35] <FunkyBob> of course, if its _only_ in tempaltes you could still use annotate and just call it get_total_wotsit
[13:55:36] <teut> friends = cached_property(get_friends, name='friends')  docs say this
[13:56:00] <teut> Uploaded file: https://uploads.kiwiirc.com/files/ee1e7a30f6a536e4ac93e21127f6e9cf/pasted.txt
[13:56:29] <teut> I renamed in the template etc  this function call
[13:56:59] <FunkyBob> doesn't matter... you used values_list
[13:57:08] <FunkyBob> so you do't have model classes... so the cached_property is gone
[13:58:07] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[13:58:48] <teut> .annotate(total+price=??)
[13:58:54] <teut> total_price*
[13:59:47] <FunkyBob> .annotate(total_proces=F('num_shares') .... etc
[13:59:55] <FunkyBob> yeah, that will make it show on the results of values_list
[13:59:57] *** Quits: pbgc (~textual@a89-152-234-147.cpe.netcabo.pt) (Ping timeout: 268 seconds)
[14:00:47] <teut> .annotate(total_price=cached_property(total_price, name='total_price'))
[14:00:52] <teut> should this be ok?
[14:02:29] <teut> https://bpa.st/ISZQ  like this
[14:03:54] *** Quits: iomari891 (~iomari891@197.210.77.229) (Ping timeout: 240 seconds)
[14:05:04] <teut> caching will create problems it seems  @property will be good
[14:06:35] *** Joins: iomari891 (~iomari891@197.210.53.216)
[14:08:02] *** Joins: mattil (~mattil@dzcmq57hrmr1s6pbk7y-4.rev.dnainternet.fi)
[14:08:28] *** Quits: mattil (~mattil@dzcmq57hrmr1s6pbk7y-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:08:40] *** Joins: mattil (~mattil@dzcmq57hrmr1s6pbk7y-4.rev.dnainternet.fi)
[14:08:55] *** Quits: saschi (~saschi@user/saschi) (Read error: Connection reset by peer)
[14:09:30] *** Quits: audiocat (~audio@2603-8081-1800-0062-c574-3dd0-68c8-791e.res6.spectrum.com) (Ping timeout: 240 seconds)
[14:09:32] *** Joins: saschi (~saschi@user/saschi)
[14:10:57] <teut> Using the cached_property decorator, we can minimize the impact of these requests on our example application.
[14:11:04] <teut> I didnt even ask for this
[14:13:23] *** Quits: mattil (~mattil@dzcmq57hrmr1s6pbk7y-4.rev.dnainternet.fi) (Ping timeout: 252 seconds)
[14:13:31] *** Quits: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net) (Ping timeout: 268 seconds)
[14:14:23] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:16:27] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:16:36] <teut> abyways can you help with yesterday's problem FunkyBob?
[14:16:40] <teut> anyways*
[14:21:03] *** Joins: Lauxley (~lauxley@2a01:e34:ec55:2700:fcb9:cc43:e4f2:d4af)
[14:23:23] *** Quits: clemente (~Daniel@balticom-142-72-136.balticom.lv) (Ping timeout: 268 seconds)
[14:24:12] <Lauxley> Hey does anyone know if it's possible to join once a duplicated subquery using the ORM? something like that https://dpaste.org/0omL
[14:25:59] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Read error: Connection reset by peer)
[14:33:59] *** Quits: teut (~teut@182.69.85.39) (Quit: Connection closed)
[14:38:29] *** Joins: GiLgAmEzH (~gilgamezh@186.19.69.139)
[14:39:26] <jor> Lauxley: sounds like you could just use a reverse relation from group to user to avoid subqueries in your case.
[14:41:41] <Lauxley> jor, not sure I understand
[14:43:13] <jor> Lauxley: Q(groups__user=user) | Q(course__groups__user=user) (depends on how you called the reverse relation from Group to User though)
[14:44:11] <Lauxley> ok let me try that
[14:45:11] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[14:50:21] <Lauxley> jor, it seems to work thanks
[14:52:45] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[14:57:11] *** Joins: thiras (~thiras@user/thiras)
[15:02:02] <mihael> FunkyBob It doesn't need to publicly available right since it is just being served by my apap
[15:02:30] <mihael> I can run the collectstatic just fine though
[15:05:14] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:10:53] <FunkyBob> mihael: your app doesn't serve static content... that's for the web server [or in your case, it seems, 3
[15:10:56] <FunkyBob> s3
[15:15:39] <mihael> Hmmm, so I should make my bucket public?
[15:16:49] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:20:09] <mihael> This is ffrustrating, I made my bucket public even created CORS with * origin to allow GET requests, but I still get the 400 error
[15:24:18] <Lauxley> Do you guys have the same experience than me: adding subqueries in a listing to lower the amount of queries makes the sql time skyrocket (basically doing exactly the same thing as the example in the docs)
[15:24:43] *** Joins: kezabelle (~kezabelle@cpc119866-nrwh12-2-0-cust31.4-4.cable.virginm.net)
[15:24:52] <Lauxley> I mean https://docs.djangoproject.com/en/3.2/ref/models/expressions/#subquery-expressions
[15:26:32] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[15:33:41] *** Joins: clemente (~Daniel@balticom-142-72-136.balticom.lv)
[15:38:29] *** Quits: kezabelle (~kezabelle@cpc119866-nrwh12-2-0-cust31.4-4.cable.virginm.net) (Remote host closed the connection)
[15:40:30] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 264 seconds)
[15:42:22] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[15:43:01] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi)
[15:43:02] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[15:56:08] *** Quits: rannnn8888 (~rannnn888@bzq-79-181-172-10.red.bezeqint.net) (Quit: Client closed)
[15:57:03] *** Joins: wattux (~wattux@212.51.23.106)
[16:06:45] *** Joins: kezabelle (~kezabelle@cpc119866-nrwh12-2-0-cust31.4-4.cable.virginm.net)
[16:12:13] *** Joins: nemexis (~nemexis@193-62-201-31.ftth.glasoperator.nl)
[16:18:39] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 272 seconds)
[16:21:41] *** Joins: Trieste (~T@user/pilgrim)
[16:22:11] *** Joins: gillzon (~gillzon@2-249-139-174-no288.tbcn.telia.com)
[16:23:16] *** Joins: dez (uid92154@user/dez)
[16:23:30] *** Quits: gillzon_ (~gillzon@91.132.138.220) (Ping timeout: 240 seconds)
[16:24:33] <moldy> Lauxley: not in general, but depending on your schema, the contents in the database, your exact query, that can happen, yes.
[16:27:34] *** Quits: mihael (~mihael@2001:4454:29d:cb00:eb7c:153c:b1ef:58e5) (Quit: Client closed)
[16:30:35] *** Joins: rowbots (~dirgeable@h69-129-115-197.arvdco.broadband.dynamic.tds.net)
[16:32:41] *** Joins: brownan (~brownan@136.56.137.143)
[16:33:47] *** Joins: mihael (~mihael@2001:4454:29d:cb00:eb7c:153c:b1ef:58e5)
[16:43:12] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[16:54:44] *** Joins: ras_manny (~ras_manny@196.24.141.56)
[16:56:15] *** Joins: aleray (~ali@62.4.154.182)
[16:58:30] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[16:59:00] <aleray> hi, I'm trying to overide the radioselect widget template but I can't manage. I did so for SelectMultiple and it worked, so I tried to override the forms/widgets/radio.html template but I see no change. I'm using Django 2.2 along with Wagtail/Wagtail Streamforms (which relies on Dj widgets). Any clue?
[16:59:24] *** Quits: ras_manny (~ras_manny@196.24.141.56) (Ping timeout: 268 seconds)
[17:09:18] *** Quits: thoas_ (~thoas@167.71.76.85) (Quit: leaving)
[17:15:59] *** Quits: iomari891 (~iomari891@197.210.53.216) (Ping timeout: 252 seconds)
[17:17:27] *** Joins: iomari891 (~iomari891@197.210.76.164)
[17:25:58] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:27:19] <aleray> seems like it has to do with settings.FORM_RENDERER
[17:31:35] *** Quits: iomari891 (~iomari891@197.210.76.164) (Ping timeout: 268 seconds)
[17:32:16] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi)
[17:33:50] *** Joins: iomari891 (~iomari891@197.210.53.216)
[17:34:04] <aleray> Ok got it. I found how to change widget templates site-wide, but it also affect the admin
[17:34:26] <aleray> Is there a way to prevent the admin from beeing affected?
[17:36:47] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[17:38:46] *** Joins: zcheng3 (~zcheng3@d198-53-38-251.abhsia.telus.net)
[17:44:10] *** Joins: Adamantike (~adamantik@201.254.79.28)
[17:45:09] *** Quits: kezabelle (~kezabelle@cpc119866-nrwh12-2-0-cust31.4-4.cable.virginm.net) (Quit: Leaving...)
[17:52:40] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[18:02:27] *** Joins: larssg (~textual@89.239.212.110.dhcp.fibianet.dk)
[18:05:47] <pathos> mihael: I don't know much about AWS permissions, but I know you can have a different access control on files than on the bucket, eg. a public bucket with private files. So maybe look out for that?
[18:06:37] *** Quits: gcbirzan (~gcbirzan@user/gcbirzan) (Ping timeout: 268 seconds)
[18:08:20] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 244 seconds)
[18:12:28] <moldy> mihael, pathos: 400 is usually not because of permissions, iirc
[18:12:41] <moldy> do you get an error message in the response body?
[18:12:58] *** Quits: djacobs (~IceChat95@109.133.171.241) (Quit: Friends help you move. Real friends help you move bodies.)
[18:13:41] <mihael> moldy No errors, it's just when I open my site, it's not being rendered properly, I go to console and I see that resources are not being retrieved properly, with 400 error
[18:14:10] <moldy> mihael: and the 400 is coming from S3? in the network tab you can view the response body.
[18:16:52] <mihael> hmmm, I can't seem to find where I can find the response body in the network tab
[18:19:33] <moldy> mihael: in my firefox, it's to the right
[18:20:08] <moldy> mihael: https://i.ibb.co/4YVjh9M/Screenshot-20210617-154923.png next to "Parameter" ("Antwort")
[18:21:49] <mihael> https://imgbb.com
[18:22:24] *** Quits: nemexis (~nemexis@193-62-201-31.ftth.glasoperator.nl) ()
[18:22:28] <mihael> https://ibb.co/XDdvXW5
[18:28:26] <mihael> moldy https://ibb.co/Ypnh9w3 i'm getting the 400 error as you can see in the consoe
[18:28:28] <mihael> console*
[18:31:54] *** Quits: aleray (~ali@62.4.154.182) (Ping timeout: 268 seconds)
[18:31:57] <moldy> mihael: do you see more details if you click on a single request?
[18:32:13] <moldy> also, do the request with curl or such and see what happens
[18:34:56] <mihael> I tried opening the link, and it gives me an error https://ibb.co/Jcz6xsc
[18:36:49] <mihael> S3's url indicates: https://elasticbeanstalk-ap-east-1-238321475629.s3.ap-east-1.amazonaws.com/rest_framework/css/bootstrap-theme.min.css
[18:38:38] <mihael> I don't know if  AWS should automatically redirect it since in the console, the `s3.ap-east-1` part is missing on the links
[18:44:16] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[18:49:14] <moldy> hmm, i'd probably google that error message
[18:49:40] <GinFuyou> hm, is OrderedDict indexable?
[18:50:27] <GinFuyou> ... I mean, I want to ordered_dict.get_by_index(42) instead of [key]
[18:52:25] *** Joins: mihael51 (~mihael@2001:4454:29d:cb00:eb7c:153c:b1ef:58e5)
[18:52:41] <moldy> GinFuyou: i'm afraid you have to iterate over the keys to find the index
[18:52:42] *** Quits: mihael (~mihael@2001:4454:29d:cb00:eb7c:153c:b1ef:58e5) (Ping timeout: 250 seconds)
[18:53:30] <mihael51> moldy sorry got disconnected, I can't seem to retrieve history from web.libera.chat
[18:53:38] <GinFuyou> I guess so. Well, at point I need it I may just cast it to list
[18:54:22] *** Quits: iomari891 (~iomari891@197.210.53.216) (Read error: Connection reset by peer)
[19:00:03] *** Joins: iomari891 (~iomari891@197.210.52.159)
[19:09:43] *** Joins: audiocat (~audio@2603-8081-1800-0062-da2a-56e6-92b0-31dc.res6.spectrum.com)
[19:10:59] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[19:13:50] *** Quits: iomari891 (~iomari891@197.210.52.159) (Ping timeout: 268 seconds)
[19:14:22] *** Quits: mihael51 (~mihael@2001:4454:29d:cb00:eb7c:153c:b1ef:58e5) (Ping timeout: 250 seconds)
[19:15:35] *** Joins: iomari891 (~iomari891@197.210.52.159)
[19:23:42] *** Quits: iomari891 (~iomari891@197.210.52.159) (Ping timeout: 268 seconds)
[19:27:06] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Quit: brylie)
[19:28:07] *** Joins: iomari891 (~iomari891@197.210.52.10)
[19:28:08] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[19:28:22] *** Quits: crowbar (~user@user/crowbar) (Remote host closed the connection)
[19:45:59] *** Quits: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef) (Ping timeout: 244 seconds)
[19:49:36] *** Quits: chris34 (~chris34@ubuntuusers/webteam/chris34) (Ping timeout: 244 seconds)
[19:51:03] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:56:51] *** Joins: mbryant (~mbryantms@1612740-v109.1116-static.plfdilaa.metronetinc.net)
[20:03:56] <moldy> is anyone using drf-spectacular? does it work with you with Serializer / BaseSerializer classes?
[20:04:07] <moldy> i am getting errors that seem to indicate it only supports ModelSerializer
[20:12:23] *** Joins: crowbar (~user@user/crowbar)
[20:18:13] *** Joins: djacobs (~IceChat95@109.133.171.241)
[20:21:45] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[20:22:02] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[20:23:28] *** Joins: argento (~argent0@168-227-96-53.ptr.westnet.com.ar)
[20:31:09] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[20:32:29] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[20:34:18] *** Joins: cnk (~anonymous@047-229-073-217.res.spectrum.com)
[20:35:48] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[20:36:28] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 268 seconds)
[20:43:03] *** Joins: xkuru (~xkuru@user/xkuru)
[20:44:36] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 268 seconds)
[20:45:24] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 244 seconds)
[20:49:42] *** Quits: cnk (~anonymous@047-229-073-217.res.spectrum.com) (Quit: cnk)
[20:49:53] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0ec-147.dhcp.inet.fi) (Quit: Leaving)
[20:59:59] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[21:17:01] *** Quits: sadg (~odd@45.83.220.210) (Quit: WeeChat 3.0.1)
[21:25:15] *** Quits: larssg (~textual@89.239.212.110.dhcp.fibianet.dk) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:36:18] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[21:39:53] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[21:41:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[21:44:49] *** Quits: iomari891 (~iomari891@197.210.52.10) (Ping timeout: 272 seconds)
[22:03:41] *** Joins: JordiGH (~jordi@user/jordigh)
[22:03:53] <JordiGH> I need to delete about a million users created by a spammer.
[22:04:12] <JordiGH> The .delete() method takes too long because Django does its Pythony thing of looking up dependencies.
[22:04:24] <JordiGH> I can just do a manual DROP in the database, right?
[22:04:38] <JordiGH> Postgres should be able to cascade everything correctly, I think.
[22:21:28] *** Joins: DillonB07 (~DillonB07@cpc123410-leic20-2-0-cust892.8-1.cable.virginm.net)
[22:22:20] *** Joins: diverdude (~undodre@216.201.150.178)
[22:22:30] *** Quits: audiocat (~audio@2603-8081-1800-0062-da2a-56e6-92b0-31dc.res6.spectrum.com) (Ping timeout: 264 seconds)
[22:22:46] *** Quits: DillonB07 (~DillonB07@cpc123410-leic20-2-0-cust892.8-1.cable.virginm.net) (Client Quit)
[22:23:07] *** Joins: DillonB07 (~DillonB07@cpc123410-leic20-2-0-cust892.8-1.cable.virginm.net)
[22:27:38] *** Quits: DillonB07 (~DillonB07@cpc123410-leic20-2-0-cust892.8-1.cable.virginm.net) (Ping timeout: 250 seconds)
[22:34:39] *** Joins: DillonB07 (~DillonB07@cpc123410-leic20-2-0-cust892.8-1.cable.virginm.net)
[22:37:09] *** Quits: Lauxley (~lauxley@2a01:e34:ec55:2700:fcb9:cc43:e4f2:d4af) (Remote host closed the connection)
[22:40:07] *** Joins: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef)
[22:42:30] *** Quits: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef) (Client Quit)
[22:42:33] <ChkDigit> JordiGH: DELETE FROM will be better to you than DROP.
[22:42:45] *** Joins: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef)
[22:44:41] *** Quits: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef) (Client Quit)
[22:44:51] *** Joins: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef)
[22:46:32] <JordiGH> ChkDigit: Why?
[22:47:15] <ChkDigit> DROP will drop your tables, not remove the rows.
[22:47:26] <ChkDigit> Well, table...
[22:47:53] <ChkDigit> I suppose it will remove the rows by virtue of the table being gone...
[22:51:01] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:51:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Client Quit)
[22:52:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:52:32] *** Joins: teut (~teut@182.69.85.39)
[22:52:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Client Quit)
[22:52:57] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:53:06] <teut> using memcache  , my page gets cached and the get method is not run
[22:53:12] <teut> how to avoid this?
[22:53:34] <teut> when does the cache  exactly refresh or updates?
[22:53:43] <teut> refreshes*
[22:53:45] *** Quits: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) (Quit: Leaving.)
[22:53:55] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Client Quit)
[22:54:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:54:44] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[22:56:24] *** Joins: wattux (~wattux@2a02:810a:1140:4b6c::f428)
[22:58:37] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[23:05:08] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[23:06:25] *** Joins: moonwhisper (~tyler.lub@99-152-114-229.lightspeed.sntcca.sbcglobal.net)
[23:09:54] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 264 seconds)
[23:12:30] *** Joins: dodobrain_ (~dodobrain@user/dodobrain)
[23:17:37] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Quit: brylie)
[23:18:53] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:19:44] *** Joins: dodobrain__ (~dodobrain@user/dodobrain)
[23:21:17] <teut> <button class="btn btn-dark" formaction="/general?page={{ page_obj.next_page_number }}">next</button>    is this wrong?
[23:21:36] <teut> I m getting this -> Page not found (404)
[23:23:35] *** Quits: dodobrain_ (~dodobrain@user/dodobrain) (Ping timeout: 268 seconds)
[23:24:05] <teut> http://127.0.0.1:8000/general?page=2   I just noticed this url is what I got in the address bar
[23:35:10] *** Quits: browniebroke (uid501792@id-501792.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[23:39:54] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[23:40:12] *** Quits: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) (Quit: Leaving.)
[23:41:21] *** Quits: emiel (~emiel@2001:981:f73:1:f1b3:24d8:fe26:a3ef) (Ping timeout: 272 seconds)
[23:53:07] <JordiGH> ChkDigit: Oh god haha, yes, drop from.
[23:53:11] <JordiGH> delete from
[23:53:20] <JordiGH> But the cascading right?
[23:58:15] *** Quits: GiLgAmEzH (~gilgamezh@186.19.69.139) (Ping timeout: 268 seconds)
