[00:09:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:14:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[00:41:36] *** Parts: edrx (~Eduardo@2804:56c:d2f8:7700:b6a7:98b4:cce:283a) (Killed buffer)
[00:52:47] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[00:53:11] *** Joins: shka (~herr@109.231.0.226)
[01:20:39] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:21:57] *** Quits: dra (~dra@2a04:4540:6409:9600:3465:7864:114:561c) (Quit: Leaving)
[02:11:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:16:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[04:13:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:17:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[05:00:10] *** Joins: copec_ (~copec@schrodbox.unaen.org)
[05:00:15] *** Joins: antoszka_ (sid528518@id-528518.uxbridge.irccloud.com)
[05:00:15] *** Joins: pedro-delfino_ (sid507296@id-507296.helmsley.irccloud.com)
[05:00:30] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[05:02:43] *** Joins: |3b|` (bbb@user/3b/x-2324788)
[05:03:03] *** Joins: ogamita`` (~t@hubble.informatimago.com)
[05:03:45] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[05:03:53] *** Joins: greaser|q (greaser@antihype.space)
[05:04:21] *** Joins: White__Flame (~quassel@user/white-flame/x-6930243)
[05:05:32] *** Joins: antoni (~antoni@rozalia.antoszka.pl)
[05:09:05] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: pedro-delfino (sid507296@id-507296.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 240 seconds)
[05:09:06] *** copec_ is now known as copec
[05:09:06] *** antoszka_ is now known as antoszka
[05:09:06] *** pedro-delfino_ is now known as pedro-delfino
[05:09:06] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: ogamita` (~t@hubble.informatimago.com) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: |3b| (bbb@user/3b/x-2324788) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[05:10:06] *** Joins: epony (~epony@user/epony)
[05:12:15] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:16:04] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[05:16:16] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[05:19:31] *** Joins: Jing (~hedgehog@115.207.57.60)
[05:20:07] *** Quits: Jing (~hedgehog@115.207.57.60) (Client Quit)
[06:14:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:15:55] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[06:15:55] *** Joins: greaser|q (greaser@user/greasemonkey)
[06:16:58] *** greaser|q is now known as GreaseMonkey
[06:19:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[06:27:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:26:43] *** Quits: sts-q (~sts-q@212.53.219.230) (Ping timeout: 256 seconds)
[07:31:20] <beach> Good morning everyone! 
[07:35:19] *** Joins: sts-q (~sts-q@91.200.108.233)
[07:37:09] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[07:44:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:00:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:08:25] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Remote host closed the connection)
[08:44:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[09:46:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:50:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[11:09:18] <seok-> what does s0 after numbers mean ?
[11:11:15] <beach> It's an exponent marker.  Look in the glossary for that term.
[11:15:16] <beach> Rather the `s' is the exponent marker.
[11:17:12] <beach> seok-: Did you find it?
[11:17:25] <beach> seok-: Did it make sense?
[11:17:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:36:43] *** Quits: epony (~epony@user/epony) (Quit: QUIT)
[11:38:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:38:21] *** Joins: epony (epony@user/epony)
[11:41:14] <beach> seok-: Hello?
[11:45:21] <beach> seok-: It would help a lot to get some feedback, like "What is a glossary?", "Which glossary are you talking about?", "I found the glossary, but not the term, what page is it on?", "I found the term in the glossary, but I don't understand it, can you be more precise?", "What is a floating-point number?"
[11:47:50] <lisp123> Looks like he/she has dissapeared
[11:48:13] <rotateq> IRC is patient. :)
[11:50:05] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[12:01:04] <lisp123> *patiently waits for lispOS*
[12:01:23] <rotateq> lisp123: do it :)
[12:01:36] <beach> lisp123: It will happen faster if you help.
[12:02:15] <lisp123> Unfortunately my skills are insufficient, but if there's anything I can help with, I would be happy to
[12:04:40] <beach> You brush up your skills and then you help.
[12:06:28] <lisp123> Is there a particular area I should focus on? I'm basically only programming in Lisp, but sounds like this would require a different skillset
[12:07:13] <rotateq> I think many things come together like in other domain knowledge requiring software.
[12:07:48] <lisp123> Yeah its a lot of different stuff :(
[12:08:19] <beach> lisp123: Almost everything is and will be programmed in Common Lisp.  
[12:08:51] <rotateq> But lisp123, see it positively, it's never hard to become better like me in anything. :)
[12:09:17] <lisp123> rotateq: I am getting a bit better, slowly but surely :)
[12:09:22] <rotateq> beach: When in Land of Lisp, do as the aliens do. :)
[12:10:58] <lisp123> beach: Hmm so I guess just focus on applications written fully in CL right. And leave all the lower-level stuff to the experts
[12:11:14] <lisp123> As long as its fully written in CL, then it could be useful in the future
[12:11:16] <lisp123> ?
[12:11:24] <rotateq> Oh lisp123, you still think it can't be low level? :P
[12:11:43] <lisp123> No as in someone else writes that :P
[12:12:04] <rotateq> Yes, your program does it.
[12:12:12] <beach> lisp123: Low-level stuff will usually be in the code generator of the compiler, also written in Common Lisp.
[12:12:27] <beach> lisp123: But yeah, focusing on applications would be a good thing.
[12:12:43] <rotateq> And good algorithms and data structures.
[12:12:56] <beach> lisp123: Like an email program, a figure editor, etc.
[12:13:13] <lisp123> Got it. I will do that
[12:13:16] <rotateq> Independently if it will be a "normal" computer or quantum, bio or whatever.
[12:13:32] <beach> lisp123: A calendar program inspired by Google Calendar would be great.
[12:13:45] <rotateq> Oh good to know!
[12:14:05] <beach> It can be a very simple program indeed, using McCLIM to display stuff.
[12:14:16] <lisp123> beach: Good Idea, I can take that and also intermix some org mode concepts into it
[12:14:23] <rotateq> Yes we can learn for design and popularity reasons from the big (in just money and user number terms) ones.
[12:14:29] <beach> lisp123: Sounds good.
[12:15:49] <beach> Basically, a calendar program is just a collection of events, some of which are repeated at some interval.  Displaying a day, week, or month, is just a matter of traversing the collection and determining which events apply to that day, week, or month.
[12:15:51] <beach> Very simple.
[12:16:17] <rotateq> And maybe if McCLIM gets some day additionally a visual clicky-and-pully interface too like the GUI builder in Delphi/Visual Studio/Eiffel that could make it more popular and "wow that stuff is so great".
[12:16:57] <rotateq> beach: It reminds me I wanted to tackle with the Doomsday algorithm by John Conway some time. :)
[12:17:56] <lisp123> beach: I think so too. It's a good example program to write, and also works pretty cool with presentation types
[12:18:17] <beach> Exactly!
[12:20:54] *** Joins: shka (~herr@109.231.0.226)
[12:21:12] <rotateq> lisp123: funny line from a cool animation movie "Oh you may be a villain, but not a super one." "What's the difference?" "PRESENTATION!"
[12:30:26] <lisp123> rotateq: Heh :)
[12:34:26] <rotateq> beach: And then having meta-information for types of events like "those two types shouldn't be layed on the same day" and the system gives warning.
[12:36:03] <beach> Let's do it one step at a time.
[12:36:38] <rotateq> Yes of course.
[12:36:58] <beach> This is Common Lisp, so applications are not frozen when compiled and linked, the way they are in a static programming language. 
[12:37:29] <beach> So a lot of functionality could be had by sticking it in an initfile like ~/.calendarrc 
[12:37:52] <beach> And if the internal API is exposed, then the user can add arbitrary functionality that way. 
[12:38:21] <lisp123> Smart idea, keep it extensible
[12:38:37] <lisp123> Does Mezzano use McCLIM?
[12:38:55] <rotateq> Yes like in summer someone showed me how to design things with KiCAD but he said often he's annoyed by some things in its GUI behavior. I was about to say with McCLIM we could now adjust this live while it runs. *duck*
[12:39:47] <beach> I believe McCLIM runs on Mezzano, but I don't know whether all Mezzano applications use it. 
[12:41:10] <lisp123> I see
[12:42:10] <rotateq> lisp123: http://turtleware.eu/posts/You-dont-need-a-backend-to-use-CLIM.html
[12:43:54] <rotateq> Hm a graphical level builder for a small game I have in mind I would definitely do with McCLIM, but to as many I know use Windows to play, I maybe for the final game would use SDL for the rendering.
[12:45:01] <pjb> lisp123: have a look at: https://gitlab.com/informatimago/cl-suggested-projects
[12:45:11] <rotateq> Hi pjb :)
[12:46:26] <lisp123> pjb: Nice list
[12:46:48] <rotateq> i should create for me finally a gitlab or bitbucket account as there will be things which i don't want on github
[12:47:02] <pjb> A calendar program is already in the list, but not specified yet.  Patches to the list are accepted, including references to implementations of those projects.
[12:47:39] <lisp123> Got it
[12:48:34] <pjb> lisp123: note that we want to select the planet too. Mars already has several calendars!
[12:49:06] <lisp123> pjb: Well for Common Lisp, it definitely wouldn't be appropriate just to restrict to Earth ;)
[12:49:22] <rotateq> even not to mention making holidays in another galaxy
[12:52:48] <seok-> beach : yes I found it in the glossary :) it's an exponent marker for short floats
[12:52:53] <seok-> sorry I fell asleep !
[12:54:16] <rotateq> And when I type "1.3l0" it seems to fall to a "1.3d0" (in SBCL) :]
[12:54:39] <pjb> rotateq: indeed, an implementation may implement only a subset of the float subtypes.
[12:54:41] <White__Flame> I think SBCL only has 2 fundamental float types
[12:55:21] <rotateq> CLISP has arbitrary precision floats as I read (which of course come at a cost) and computable-reals package by stylewarning too.
[12:55:55] <pjb> http://www.lispworks.com/documentation/HyperSpec/Body/t_short_.htm
[12:55:55] <rotateq> White__Flame: yes, the 'f0' and 'd0'
[12:56:50] <rotateq> pjb: Could you point me again to your well documented file which we had some weeks ago with the COMEFROM?
[12:56:53] *** White__Flame is now known as White_Flame
[12:58:07] <rotateq> In C# (shrug) there's this 'Decimal' number type with 128bit.
[12:58:25] <White_Flame> all you really need is rationals
[12:58:46] <White_Flame> every machine "floating point" value is exactly expressable as a rational
[12:58:53] <rotateq> of course, for also not loosing information too fast
[12:59:07] <White_Flame> and rationals express many numbers that floats can't
[12:59:34] <rotateq> some older teacher recommended this 'Decimal' stuff as a reason for banking institutions that it's then precise enough, what a shame
[13:00:29] <rotateq> "But no I don't want 0,33$ from my account, I want 1/3$."
[13:00:30] <White_Flame> well, if it's exactly precise to base 10 (which floats aren't), then cool
[13:00:49] <White_Flame> but of course most places deal with whole pennies, or whatever $0.0001 are called again
[13:01:01] <rotateq> no 'Decimal' is just broader floats, what i said, what a shame
[13:01:01] <pjb> rotateq: http://paste.lisp.org/display/151257
[13:01:09] <White_Flame> rotateq: wat
[13:01:13] <pjb> It's funny that google doesn't find it…
[13:01:33] <rotateq> yes it's again also shamely named, i also thought it in the first place
[13:02:13] <rotateq> pjb: Thank you, I'll save it now to not bother you again. :)
[13:02:53] <White_Flame> the docs appear to say that it's a base10 float
[13:03:13] <White_Flame> https://docs.microsoft.com/en-us/dotnet/api/system.decimal?view=net-6.0
[13:03:31] <rotateq> lel okay
[13:03:54] <White_Flame> "The binary representation of a Decimal number consists of a 1-bit sign, a 96-bit integer number, and a scaling factor used to divide the integer number and specify what portion of it is a decimal fraction. The scaling factor is implicitly the number 10, raised to an exponent ranging from 0 to 28."
[13:04:05] <pjb> rotateq: the criticism on goto is that it doesn't make it clear what is the pre-condition after a goto label: we don't see easily all the goto leading to that label (notably when there are computed gotos), so we cannot easily gather all the conditions from those gotos.
[13:04:54] <pjb> rotateq: comefrom is an ironic solution to that problem: since at the point of the come from, we cannot come from another point, we can easily find the condition that was at the origin of the come from point.
[13:05:19] <White_Flame> cross referencing isn't a big deal, if the code isn't dead text
[13:05:53] <pjb> Anyways, in most programs, the pre- and post-conditions are T almost everywhere…
[13:06:15] <rotateq> possible horror film movie title "FORTRAN V: The return of unlimited GOTO"
[13:07:29] <rotateq> White_Flame: then the other guy didn't knew it so well either (again) when he talked about it. when it will come up some day again I'll look more deeply
[13:08:49] <rotateq> nice pjb. in Pascal one has to even declare which symbols are to be intended labels
[13:19:24] <rotateq> pjb: one can also start and build up those other with continuations
[13:19:30] <rotateq> or not?
[13:25:58] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[13:26:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:30:45] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:dc72:6181:1705:c2cc)
[13:31:16] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:29:53] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[14:31:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:36:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:57:14] <rotateq> pjb: some people predict black holes connect to different locations, but maybe they're some kind of GOTO entry points for the universe
[15:09:10] <pjb> yes.
[15:19:42] <rotateq> and then white holes like COMEFROM :)
[15:24:59] <rotateq> and someday when aliens decided humanity matured enough they'll show us what we need and how to change with CL local properties of reality as it runs
[15:44:44] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:46:35] <rotateq> there is no function that gives back the REALPART and IMAGPART of a complex number respectively as a multiple values form, or is there?
[15:47:28] *** Joins: domovod (~domovod@176.196.122.197)
[15:55:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:59:25] <pjb> rotateq: there is: (lambda (c) (values (realpart c) (imagpart c)))
[15:59:44] <rotateq> you clever man!
[16:02:38] <rotateq> and i wasn't too specific, i meant as a symbol in the standard :)
[16:03:03] <rotateq> s/too specific/specific enough
[16:27:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:57:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:59:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:35:54] <seok-> I want to ignore out of bounds subscript error for aref'ing arrays
[18:35:57] <seok-> https://pastebin.com/xenj1G5X
[18:36:03] <seok-> is this not how I achieve this ?
[18:36:30] <seok-> I thought the symbol for this error is subscript-out-of-bounds
[18:39:13] <beach> What made you think that?  There is no such symbol in the CL package.
[18:39:46] <seok-> I wrote a test function like this (defun test () (handler-case (aref x 6 6) (error (c) c))) 
[18:40:03] <seok-> and it returned conditions:subscript-out-of-bounds
[18:40:38] <beach> That must be an implementation-specific symbol then, because there is no such thing in the CL package. 
[18:40:59] <seok-> maybe. this is on lispworks
[18:41:07] <seok-> which symbol do I want for this error ?
[18:41:50] <beach> Maybe that's the symbol you want, but you need to use the right package for it.
[18:43:17] <seok-> so the error symbols are different for every implementation ?
[18:43:59] <beach> My suspicion is that this condition (not "error symbol") is a subclass of a standard one.  Perhaps CELL-ERROR? 
[18:46:11] <seok-> ok it works with conditions:subscript-out-of-bounds but not cell-error
[18:47:23] <beach> Then use that I guess.  The thing is that AREF is not required to signal a condition when the index is out of bounds, so it is not specified what condition will be signaled if the implementation decides to do it.
[18:47:39] <seok-> oh interesting
[18:47:49] <beach> That's why I started WSCL.
[18:48:05] <seok-> so aref is not portable in this case
[18:48:29] <beach> Correct.
[18:49:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:50:33] <beach> https://github.com/s-expressionists/wscl/blob/main/wscl-issues/proposed/aref-accessor-dimension-error
[18:50:44] <beach> seok-: ^
[18:51:19] <beach> Oh, try TYPE-ERROR.  That's what SBCL does.
[18:52:04] <seok-> nope doesnt work on lispworks
[18:52:29] <beach> Anyway, from the "issue", you can see what the problem is.
[18:52:53] <seok-> how complete is wscl ? looks like a lot of work
[18:52:56] <seok-> yeah
[18:53:38] <beach> Not complete at all, and I fully expect it to be released in several stages. 
[18:55:06] <beach> But, yes, a lot of work.  
[19:07:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:13:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[20:00:53] *** Joins: artchad (~user@public-gprs230031.centertel.pl)
[21:25:10] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:dc72:6181:1705:c2cc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:28:19] *** Joins: treflip (~user@user/treflip)
[21:58:29] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:14:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:23:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:25:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:28:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:52:32] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[22:52:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:53:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[23:09:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:34:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
