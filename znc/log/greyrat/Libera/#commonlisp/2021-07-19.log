[00:00:11] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[00:02:07] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:27:43] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[00:29:17] *** Joins: hafat (~hafat@95.70.168.45)
[00:30:56] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 255 seconds)
[00:35:31] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[00:37:42] *** Quits: hafat (~hafat@95.70.168.45) (Quit: Leaving)
[00:38:07] *** Joins: hafat (~hafat@95.70.168.45)
[00:46:35] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[00:50:24] *** Joins: lisp123mobile (~lisp123mo@91.73.113.100)
[00:52:34] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[00:52:45] *** Quits: lisp123mobile (~lisp123mo@91.73.113.100) (Remote host closed the connection)
[00:57:36] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[01:05:50] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[01:15:06] <aeth> Personally, I use permissive licenses for CL stuff where I'd consider the GPL in other languages because I want to encourage people to use CL. YMMV.
[01:15:36] <jfb4> aeth: that's a slippery slope
[01:15:39] <aeth> and MIT license mainly because most CL code is MIT...
[01:16:31] <aeth> jfb4: I mean, if someone has to load up ECL to interface with some big, proprietary C/C++ program because they really, REALLY want to use my code, I consider that a win for CL.
[01:17:13] *** Joins: lisp123mobile (~lisp123mo@91.73.113.100)
[01:17:36] *** Quits: lisp123mobile (~lisp123mo@91.73.113.100) (Remote host closed the connection)
[01:18:29] *** Joins: lisp123mobile (~lisp123mo@91.73.113.100)
[01:19:10] *** Quits: lisp123mobile (~lisp123mo@91.73.113.100) (Remote host closed the connection)
[01:23:02] <lotuseater> good point aeth
[01:23:42] <lotuseater> so how was that, if it were GPL it couldn't be used with the proprietary thing?
[01:29:50] <aeth> You could use LGPL but idk how it would interact with being embedded as part of ECL, rather than as a separate C/C++ library
[01:29:54] <edgar-rft> it *can* be used with proptietary code but only when the proprietary code is laid open, too, what in practice is very unlikely to happen :-)
[01:30:07] <aeth> But always make sure that your code runs in ECL even if you never use it, at least imo
[01:30:18] <aeth> Because if a C programmer really, really wants your code, they're going to have to use ECL
[01:34:45] <jackdaniel> I have it fixed, but here comes an interesting (to me) fail: (loop for key in keys for pos = (position key head) collect (lambda (elt pos body)))
[01:35:14] <jackdaniel> (lambda () (elt pos body))
[01:35:52] <jackdaniel> because pos is modified destructively by loop, all collected lambdas will see the same pos value
[01:36:08] <jackdaniel> a fix is to replace lambda with (let ((pos pos)) (lambda () …))
[01:36:29] <jackdaniel> good night \o
[01:51:32] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Quit: Quit)
[01:51:46] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[01:56:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[01:59:23] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[02:00:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:02:24] *** Quits: gaqwas (~john@dynamic-077-009-191-197.77.9.pool.telefonica.de) (Ping timeout: 258 seconds)
[02:04:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:09:36] *** Joins: Bike (~Bike@71.69.170.70)
[02:09:36] *** ChanServ sets mode: +o Bike
[02:10:13] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[02:16:53] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[02:17:21] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[02:19:03] *** Joins: PuercoPop (~user@190.237.88.161)
[02:21:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:26:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[02:35:07] *** Quits: frgo (~frgo@p200300deef181d0031e33461748926d3.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:35:36] <lotuseater> How can I correctly define a readermacro in lexical-scope of a DEFMACRO? is clear what I mean?
[02:35:36] *** Joins: frgo (~frgo@p200300deef181d00e071b07f093d0062.dip0.t-ipconnect.de)
[02:36:17] <lotuseater> for defining special readtime at compiletime
[02:38:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[02:40:43] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:43:26] *** Joins: selwyn (~selwyn@user/selwyn)
[02:44:09] <lotuseater> eg I want such construct like (vec! [1,2,3]) expanded as (make-array 3 :initial-contents '(1 2 3)). but ok, VEC! would be enough as a function there. the point is I thought about when one wants the readmacro for #\[ just being activated as the macro/function starts
[02:45:06] <pjb> lotuseater: you want to read: http://www.nhplace.com/kent/PS/Ambitious.html
[02:45:15] <pjb> lotuseater: hint: put a reader macro on #\(
[02:46:07] <lotuseater> yes I know (set-macro-character #\[ (get-macro-character #\)) you mean that?
[02:46:36] <Bike> you can't define a reader macro limited to a particular lexical context.
[02:46:56] <Bike> unless you override the entire reader, which is probably where a macro on ( is leading
[02:47:06] <Bike> the reader doesn't know anything about macros.
[02:47:07] <pjb> lotuseater: no, I mean #\(
[02:47:29] <lotuseater> because I understand it by now that the reader looks at everything before compiling, so if #\[ is not in the toplevel defined an error occurs
[02:47:34] <pjb> lotuseater: go read the reference!!!
[02:47:49] <lotuseater> I'll do!
[02:48:04] <lotuseater> Bike: that's also good advice :)
[02:48:06] <pjb> I mean the Ambitious url above.
[02:48:45] <pjb> vec! cannot be a function since it will interpret the text until the closing parenthesis differently.
[02:49:04] <pjb> vec! need to be something that works at read-time.
[02:49:39] <pjb> For that, you need to write a reader macro for #\( that will see that the operator is vec! and dispatch to some read-time parser.
[02:49:49] <lotuseater> pjb: thx didn't know this site yet
[02:50:10] <lotuseater> hehe yes ok now I get what you intend to tell me
[02:52:05] <lotuseater> yesterday in the late evening I played with defining one for lambdas with #\\ so eg \x y . (+ x y) => (lambda (x y) (+ x y))
[02:53:01] <pjb> or use λ
[02:53:11] <pjb> configure xmodmap to get it easy, or emacs.
[02:53:29] <lotuseater> yes I wanted but must configure my keyboard :D
[02:54:05] <pjb> (global-set-key (kbd "A-l") (lambda () (interactive) (insert "λ")))  A-l --> λ
[02:54:21] <lotuseater> or having it as in Haskell (the left side): \x y -> (+ x y)
[02:54:34] <pjb> Haskell is inferior..
[02:55:18] <lotuseater> haha yes :D but much superior to other stuff
[02:55:32] <pjb> Yes, there are worse languages.
[02:56:55] <lotuseater> or those Clojurists which are still enslaved to the JVM. but that's much opiniated and so offtopic :)
[02:57:41] <lotuseater> the tip with emacs is helpful, I still know not much about that all to configure right (but use is most times)
[02:58:09] <lotuseater> the "A" in "A-l" is what key?
[03:01:51] <pjb> Alt
[03:02:32] <lotuseater> hm here that's "M" for the meta key
[03:02:48] <pjb> You can use xmodmap to map M and A to different keys.
[03:03:22] <pjb> On a 105-key PC keyboard,  you have 3 modifiers on the left and 4 on the right of the space bar.
[03:04:15] <pjb> So: Hyper- Alt- Meta- SPC Meta- Alt- Super- Hyper-
[03:04:15] <lotuseater> my Windows key is at the moment configured to type the APL symbol set :D
[03:15:30] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:21:22] *** Quits: silasfox (~sbv@165.56.184.219) (Ping timeout: 258 seconds)
[03:22:49] <jcowan> In any case, there is no existing CL implementation under the full GPL except CLISP, and that does not impose the GPL on your code (per the FSF's GPL FAQ)
[03:24:12] *** Quits: raeda__ (~raeda@72.49.219.33) (Quit: Leaving)
[03:24:26] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 255 seconds)
[03:25:17] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:26:42] <aeth> also, by the FSF's writings on the LGPL and Java, the LGPL (no need for the LLGPL) should be compatible with CL as long as the LGPLed files are user-replaceable (like Java's JAR files), e.g. as separate loaded FASLs
[03:27:29] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[03:27:30] <aeth> and the implementation files certainly should fall under that, so the LGPL also would work
[03:27:30] <lotuseater> my head bums from that :D
[03:27:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[03:27:55] <aeth> s/the implementation/the Lisp implementation (compiler or interpreter)/
[03:27:57] <moon-child> aeth: java doesn't have macros, though
[03:28:21] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:28:36] *** Quits: easye (~user@oxi.slack.net) (Remote host closed the connection)
[03:28:45] <aeth> moon-child: right, it does make packaging awkward because you'd have to load FASLs via something like ASDF, rather than building an all-in-one binary
[03:28:58] <aeth> otherwise you'd have issues with macros or inline functions in dependencies
[03:29:05] <moon-child> if my code is closed-source, and I use an LGPL'd macro, the result of that macro is output in my code.  Changing the content of the macro won't change my code
[03:29:44] <aeth> You would have to recompile the dependent files if the dependencies' FASLs are replaced, like QL:QUICKLOAD does, but unlike what packaged Lisp binaries tend to do
[03:30:01] <aeth> So LGPL does restrict how to deploy your Lisp code
[03:31:38] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[03:43:22] *** Quits: lotuseater (~user@p200300e787091b00387e7f8a32e5e786.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:43:36] <etimmons> Doesn't the LGPL say that small enough macros (<10 lines, IIRC) don't make the object file that uses them a derivative work?
[03:44:11] <etimmons> It's annoying that the language is so specific to C
[03:44:49] <etimmons> But that does suggest that trivial macros don't really limit how you distribute your closed source executable
[03:45:40] *** Joins: akoana (~ah@user/akoana)
[03:45:42] <etimmons> (other than the aforementioned requirement to allow people to swap out the LGPL'ed fasls)
[03:46:04] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:46:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[03:47:01] <aeth> etimmons: well, yes, the language is C-specific, but https://www.gnu.org/licenses/lgpl-java.html
[03:47:02] *** Alfr is now known as Guest4290
[03:47:02] *** Quits: Guest4290 (~Alfr@user/alfr) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[03:47:07] *** Joins: Alfr (~Alfr@user/alfr)
[03:47:25] <aeth> "FSF's position has remained constant throughout: the LGPL works as intended with all known programming languages, including Java. Applications which link to LGPL libraries need not be released under the LGPL. Applications need only follow the requirements in section 6 of the LGPL: allow new versions of the library to be linked with the application; and allow reverse engineering to debug this."
[03:48:25] <aeth> Considering that they have 2 Common Lisps (CLISP, GCL), 3 Schemes (Guile, Kawa, MIT), and at least 1 other (elisp), "all known programming languages" has to apply to Lisps
[03:48:36] <aeth> (well, GNU has them, not the FSF)
[03:49:16] <aeth> of course, a license is how courts interpret it, not how the FSF interprets it
[03:49:53] *** Joins: cjb (~cjb@user/cjb)
[03:51:53] <etimmons> aeth: yeah, I've seen that. I was mostly bemoaning the language with respect to macros
[03:52:14] <etimmons> Because if memory serves, that save section also mentions header files
[03:52:32] <etimmons> *same
[03:59:00] *** Quits: pve_ (~pve@87-93-248-238.bb.dnainternet.fi) (Quit: leaving)
[04:11:19] *** Joins: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com)
[04:19:41] *** Joins: Oladon (~olad@98.43.81.226)
[04:20:22] *** Joins: dsk (~dsk@user/dsk)
[04:23:36] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[04:24:40] *** Joins: igemnace (~ian@user/igemnace)
[04:39:10] *** Joins: zacts (~zacts@user/zacts)
[04:40:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[04:50:17] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[04:54:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:59:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:22:20] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:32:52] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 255 seconds)
[05:38:47] *** Joins: Bike (~Bike@71.69.170.70)
[05:38:47] *** ChanServ sets mode: +o Bike
[06:01:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:04:52] *** Joins: derelict (~derelict@user/derelict)
[06:06:42] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[06:16:20] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[06:26:01] *** Joins: zacts (~zacts@user/zacts)
[06:26:23] *** Quits: tyson2 (~user@cpeb4fbe4e04394-cmf0f249001100.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[07:08:18] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Read error: Connection reset by peer)
[07:19:48] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[07:19:56] *** Joins: prxq_ (~quassel@x4dbd2995.dyn.telefonica.de)
[07:23:38] *** Quits: prxq (~quassel@x4dbe79cd.dyn.telefonica.de) (Ping timeout: 258 seconds)
[07:32:22] <beach> Good morning everyone!
[07:33:05] <zacts> yo beach
[07:38:19] <beach> lotuseater: I use BSD (it could have been MIT too) for let's say three reasons.
[07:38:27] <beach> 1. As jackdaniel pointed out, there is unfortunately a lot of aversion against GPL-like licenses, and it seems to be very bad in the Common Lisp community.
[07:38:31] <beach> 2. I want SICL modules to be used by other implementations, no matter what license those implementations have chosen to use.
[07:38:32] <beach> 3. Code like that of SICL is not unique in that other code bases do the same thing, so there is less need to protect it.  I think the FSF has some special exceptions for language processors.
[07:44:29] *** Quits: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca) (Remote host closed the connection)
[07:45:47] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[07:46:16] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[07:47:07] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[07:49:22] *** Joins: peterhil (~peterhil@mobile-access-b04801-219.dhcp.inet.fi)
[07:52:01] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[07:53:56] *** Joins: Oladon (~olad@98.43.81.226)
[07:55:04] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 258 seconds)
[07:55:49] *** Quits: ggoes (~gregf@user/ggoes) (Quit: WeeChat 2.3)
[07:59:39] *** Joins: ggoes (~gregf@user/ggoes)
[08:23:25] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 255 seconds)
[08:24:28] *** Quits: PuercoPop (~user@190.237.88.161) (Remote host closed the connection)
[08:40:13] *** Joins: derelict (~derelict@user/derelict)
[08:56:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:00:18] *** Joins: raeda (~raeda@72.49.219.33)
[09:01:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[09:11:44] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:13:27] <susam> Good morning, beach!
[09:13:30] <susam> Good morning, everyone!
[09:14:36] <kakuhen> hi
[09:16:04] *** Joins: Oladon (~olad@98.43.81.226)
[09:26:18] *** Joins: Simponic (~Simponic@144.39.236.169)
[09:26:45] <Simponic> Hey does anyone know of a websocket api that has ssl?
[09:29:30] *** Parts: akoana (~ah@user/akoana) ()
[09:30:00] *** Quits: ChanServ (ChanServ@services.libera.chat) (shutting down)
[09:30:24] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Remote host closed the connection)
[09:30:45] *** Joins: ChanServ (ChanServ@services.libera.chat)
[09:30:45] *** sodium.libera.chat sets mode: +o ChanServ
[09:30:45] *** ChanServ sets mode: +o beach
[09:34:57] *** beach sets mode: -o beach
[09:42:28] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:46:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:55:53] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:59:21] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[10:00:40] *** Joins: gaqwas (~john@dynamic-077-004-049-139.77.4.pool.telefonica.de)
[10:02:55] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[10:10:51] <kakuhen> Is there a particular reason why CCL uses colons in filepaths in its internals?
[10:11:15] <kakuhen> for instance, you will see a lot of calls like (ensure-directory-pathname "ccl:foo;")
[10:11:32] <kakuhen> is this some relic from the classic mac os days or is there something meaningful with this convention?
[10:14:22] <beach> clhs 19.3.1
[10:14:22] <specbot> Syntax of Logical Pathname Namestrings: http://www.lispworks.com/reference/HyperSpec/Body/19_ca.htm
[10:14:43] <beach> kakuhen: Maybe it is the "host marker"?
[10:14:43] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:17:32] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[10:18:34] <kakuhen> That seems correct, but I'm not entirely sure. In the function CREATE-IDE-BUNDLE, for instance, you have a string SOURCE defined as "ccl:cocoa-ide;ide-contents;". This corresponds to .../ccl/cocoa-ide/ide-contents on my actual drive.
[10:18:45] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[10:18:54] <kakuhen> Is this supposed to be a platform-agnostic way of handling filepaths?
[10:20:40] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[10:20:54] <conjunctive> Hello, has anyone worked with lisp-binary? Trying to understand how I should represent padding in this DSL.
[10:31:24] *** Joins: spiaggia (~user@2a01:cb19:150:3400:4858:e428:9417:15c2)
[10:35:37] *** Joins: shka (~herr@109.231.62.239)
[10:41:35] *** Joins: pjb (~pjb@user/pjb)
[10:46:58] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 255 seconds)
[10:47:27] *** Joins: amb007 (~a_bakic@246.104.204.77.rev.sfr.net)
[10:49:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[11:07:01] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:17:28] *** Joins: ems (~ems@2a02:a318:813a:d880:24e6:6f27:1fd7:966f)
[11:23:27] <kakuhen> oh I found something interesting in CCL's implementation of USER-HOMEDIR-PATHNAME
[11:23:43] <kakuhen> supplying a host is optional, but they also ignore it entirely
[11:25:04] <kakuhen> Doesn't this break the standards? The hyperspec states the function "determines the pathname that corresponds to the user's home directory on host," but CCL always ignores the host.
[11:25:21] *** Joins: Oladon (~olad@98.43.81.226)
[11:28:51] *** Quits: gaqwas (~john@dynamic-077-004-049-139.77.4.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:28:58] *** Quits: amb007 (~a_bakic@246.104.204.77.rev.sfr.net) (Ping timeout: 258 seconds)
[11:30:12] *** Joins: amb007 (~a_bakic@222.147.204.77.rev.sfr.net)
[11:30:30] <shka> kakuhen: it is fine as far as standard goes
[11:30:51] *** Quits: spiaggia (~user@2a01:cb19:150:3400:4858:e428:9417:15c2) (Remote host closed the connection)
[11:45:04] *** Quits: amb007 (~a_bakic@222.147.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:45:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:53:02] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[11:54:16] *** Joins: Oladon (~olad@98.43.81.226)
[11:56:29] *** Joins: treflip (~user@95.79.32.99)
[12:00:00] *** Joins: pve (~pve@188-67-217-41.bb.dnainternet.fi)
[12:01:15] *** Joins: analognoise1 (~analognoi@2600:8801:8c26:9e00:cdb0:ec42:cea0:b1e2)
[12:02:11] *** Quits: analognoise (~analognoi@83.136.182.93) (Ping timeout: 245 seconds)
[12:02:37] *** Joins: easye (~user@oxi.slack.net)
[12:04:51] *** Quits: pve (~pve@188-67-217-41.bb.dnainternet.fi) (Ping timeout: 265 seconds)
[12:05:01] *** Joins: pve (~pve@188-67-188-203.bb.dnainternet.fi)
[12:06:43] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[12:07:32] *** Joins: Oladon1 (~olad@98.43.81.226)
[12:10:29] *** Quits: Oladon (~olad@98.43.81.226) (Ping timeout: 255 seconds)
[12:13:29] <pjb> kakuhen: note that this is not pathname hosts, but network hosts.  Since there is absolutely nothing specified making the link between pathnames and network, it really lies entirely into implementation specific domain.
[12:14:03] <kakuhen> I see, that makes things even more mysterious to me now
[12:14:32] *** Quits: analognoise1 (~analognoi@2600:8801:8c26:9e00:cdb0:ec42:cea0:b1e2) (Ping timeout: 255 seconds)
[12:15:59] <pjb> kakuhen: but even assuming an implementation that would deal with some kind of network file system.  With most network file system in use nowadays (say, NFS and Samba, possibly various cloud FS, such as DropBox, iCloud, etc), you don't get to choose on what host your user-homedir-pathname is on.  This is the local system that decides, and your home path is always relative to the local file system, even if it's remotely mounted.
[12:23:29] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:23:56] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:27:10] *** Quits: isekaijin (~pyon@user/pyon) (Quit: WeeChat 3.2)
[12:29:55] <shka> yeah, it is essentially the same as the version
[12:30:29] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[12:30:43] <pjb> Who manages irclog.tymoon.eu ? Who should I ask to add #ccl to the logs?
[12:31:07] <shka> it was expected that file system would become feature rich i guess
[12:31:21] <shka> but the opposite has become the trend
[12:32:00] <beach> pjb: That would be Shinmera.
[12:36:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:38] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:43] <pjb> beach: thanks.
[12:45:15] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[12:54:06] *** Quits: Oladon1 (~olad@98.43.81.226) (Quit: Leaving.)
[12:57:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:58:38] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:01:04] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 255 seconds)
[13:01:16] *** Lord_of_Life_ is now known as Lord_of_Life
[13:01:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:35:21] *** Quits: markasoftware (~quassel@107.161.26.124) (Ping timeout: 240 seconds)
[13:39:44] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (Ping timeout: 252 seconds)
[13:39:57] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[13:54:10] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 255 seconds)
[13:55:05] *** Joins: selwyn (~selwyn@user/selwyn)
[13:58:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:03:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:15:30] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:17:44] *** Quits: peterhil (~peterhil@mobile-access-b04801-219.dhcp.inet.fi) (Ping timeout: 268 seconds)
[14:20:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:33:16] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[14:33:59] *** Joins: Guest2577 (~Guest25@202.47.45.215)
[14:35:03] *** Quits: frgo (~frgo@p200300deef181d00e071b07f093d0062.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:35:30] *** Joins: frgo (~frgo@p200300deef181d00e071b07f093d0062.dip0.t-ipconnect.de)
[14:42:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:42:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:43:53] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:46:43] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:51:21] *** Joins: peterhil (~peterhil@mobile-access-b04801-219.dhcp.inet.fi)
[14:52:01] *** Joins: tyson2 (~user@70.54.112.49)
[14:57:34] *** Quits: Guest2577 (~Guest25@202.47.45.215) (Quit: Client closed)
[15:00:46] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 265 seconds)
[15:01:21] *** Joins: amb007 (~a_bakic@238.147.204.77.rev.sfr.net)
[15:01:39] *** Joins: xach (~xach@user/xach)
[15:01:39] *** ChanServ sets mode: +o xach
[15:04:33] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[15:10:22] *** Joins: lisp123_ (~lisp123@45.130.83.212)
[15:12:50] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[15:14:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[15:20:57] *** Quits: amb007 (~a_bakic@238.147.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:21:04] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:25:18] *** Quits: lisp123_ (~lisp123@45.130.83.212) (Remote host closed the connection)
[15:48:31] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[15:52:34] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net)
[15:57:42] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[16:00:10] *** Joins: hafat (~hafat@95.70.168.45)
[16:13:11] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net) (Quit: Client closed)
[16:21:25] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: akanouras (~akanouras@user/akanouras) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: caz (~caz@2001:470:69fc:105::b9fc) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[16:21:28] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Quit: Bridge terminating on SIGTERM)
[16:24:17] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[16:28:11] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:6811:93df:76a2:f686)
[16:29:23] <pve> Hi, can someone speak about how systems were loaded in CL back in the day? I know there was MK:DEFSYSTEM, but was it used right from the start, or did people just have ad-hoc solutions before it emerged? Did lisps before CL have their own defsystems?
[16:29:25] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[16:29:25] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[16:29:25] *** Joins: akanouras (~akanouras@user/akanouras)
[16:29:25] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[16:29:26] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[16:29:32] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[16:29:32] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[16:29:32] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[16:29:45] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[16:29:52] *** Joins: caz (~caz@2001:470:69fc:105::b9fc)
[16:30:40] <xach> pve: i've seen a number of old projects with a file named something like load.lisp that has a script that loads the software.
[16:30:56] <pve> xach: yes! I've seen that too!
[16:31:05] *** Joins: PuercoPop (~user@190.237.88.161)
[16:31:13] <xach> sometimes as simple as (dolist (file '(<list of files>)) (load file))
[16:31:13] <pve> that's kinda what I meant with "ad-hoc solutions"
[16:31:20] <Duuqnd> I know Symbolics had their own DEFSYSTEM thing so I'm guessing before ASDF there were lots of DEFSYSTEM implementations.
[16:31:43] *** Joins: cuz (~user@2601:182:cc02:8b0:5d77:6ee9:7f95:9dca)
[16:32:09] <xach> pve: have you read kmp's paper on it?
[16:32:31] <pve> xach: I don't think so..
[16:32:39] <xach> http://www.nhplace.com/kent/Papers/Large-Systems.html is the one i mean
[16:32:57] <pve> xach: thank you
[16:33:35] <pve> that looks very relevant
[16:33:48] <jackdaniel> the standard mentions (as deprecated) interfaces require and provide that are meant to load "modules" (whatever that means :)
[16:34:39] <mfiano> I remember using something like clbuild (?) or something or another before QL existed/was popular
[16:34:55] <pve> there was asdf-install at least
[16:35:01] <xach> clbuild was a way to get things - it didn't introduce a new way to things, it used asdf
[16:35:06] <jackdaniel> so this is deprected in its inception mechanism for loading programs composed of multiple (or one) files
[16:35:07] <xach> a new way to "load" things
[16:35:54] <jackdaniel> there was also sbt that was part of ecl at some point of time (years before I've used it)
[16:36:22] * xach thinks back to "clornucopia" and "mudballs"
[16:36:38] <jackdaniel> I think that it was authored by Giuseppe Attardi
[16:45:28] *** Joins: lisp123 (~lisp123@45.130.83.212)
[16:51:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 255 seconds)
[17:00:16] *** Joins: pve_ (~pve@188-67-182-130.bb.dnainternet.fi)
[17:01:02] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[17:03:32] *** Quits: pve (~pve@188-67-188-203.bb.dnainternet.fi) (Ping timeout: 265 seconds)
[17:04:46] *** Quits: lisp123 (~lisp123@45.130.83.212) (Ping timeout: 255 seconds)
[17:05:28] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:09:33] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 250 seconds)
[17:10:00] *** Joins: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0)
[17:17:57] *** pve_ is now known as pve
[17:28:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[17:29:33] *** Parts: hafat (~hafat@95.70.168.45) (Leaving)
[17:31:20] *** Joins: dsk (~dsk@user/dsk)
[17:31:32] *** Quits: PuercoPop (~user@190.237.88.161) (Remote host closed the connection)
[17:32:15] *** Joins: Bike (~Glossina@71.69.170.70)
[17:32:15] *** ChanServ sets mode: +o Bike
[17:39:25] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[17:41:04] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[17:52:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:00:43] *** Quits: peterhil (~peterhil@mobile-access-b04801-219.dhcp.inet.fi) (Ping timeout: 258 seconds)
[18:04:19] *** Joins: silasfox (~sbv@165.56.186.101)
[18:04:41] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[18:06:30] *** Joins: aeth (~aeth@user/aeth)
[18:07:46] *** Quits: cuz (~user@2601:182:cc02:8b0:5d77:6ee9:7f95:9dca) (Ping timeout: 255 seconds)
[18:09:07] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:18:52] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:19:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:22:31] *** Joins: zacts (~zacts@user/zacts)
[18:23:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:26:45] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 252 seconds)
[18:28:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[18:30:41] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[18:30:52] *** Joins: zacts (~zacts@user/zacts)
[18:31:35] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[18:34:18] *** Joins: zacts (~zacts@user/zacts)
[18:35:17] *** sander is now known as sndr
[18:39:29] *** Joins: cuz (~user@38.140.58.234)
[18:53:00] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[18:55:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:00:04] *** Quits: tyson2 (~user@70.54.112.49) (Quit: ERC (IRC client for Emacs 27.2))
[19:03:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[19:06:55] *** Joins: peterhil (~peterhil@mobile-access-b04801-219.dhcp.inet.fi)
[19:06:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[19:35:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:37:06] *** Joins: aeth (~aeth@user/aeth)
[19:47:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[19:47:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:51:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:51:18] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[19:52:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:53:23] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:53:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:54:29] <lisp123> What is a good way to deal with out of order program flow?
[19:55:12] <lisp123> For example, consider I have a loop that keeps running until a condition is met - at that point I want to run another test with the value of the condition, if that test fails, I want to return to the original loop and keep running
[19:55:16] <jackdaniel> barriers? thread joins? semaphores? condition variables?
[19:55:20] <lisp123> I'm thinking of using restarts here?
[19:56:13] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 255 seconds)
[19:56:59] <beach> That doesn't sound like "out of order" to me.
[19:57:15] <jackdaniel> (loop (if (and condition (funcall foo condition)) (return) (do-it))
[19:57:21] <lisp123> Sorry I don't know these terms that well
[19:57:58] *** Joins: hafat (~hafat@95.70.168.45)
[19:58:01] <jackdaniel> converserly (loop until (and condition (funcall foo condition)) do (do-it))
[19:58:23] <beach> Yeah, something like that.  Ordinary control flow.
[19:59:07] *** Quits: hafat (~hafat@95.70.168.45) (Client Quit)
[20:00:23] <lisp123> For example, say I have a calling function that calls the loop you just mentioned, I want to return control to it (with a certain value) to continue on its way (and if it fails, then come back to the loop)
[20:00:31] *** Joins: hafat (~hafat@95.70.168.45)
[20:00:49] <lisp123> I guess I could just do what you have, and pass the "state" through each time
[20:00:58] <Bike> don't think of it as "come back". you can just not leave the loop in the first place. that's how jackdaniel's code works.
[20:01:14] <jackdaniel> resuming execution is easy with delimited continuations
[20:01:32] *** Parts: hafat (~hafat@95.70.168.45) ()
[20:02:07] <lisp123> Bike: ah okay, I understand a bit better. But still, all the information in the calling function would need to be passed down into the loop so that it can 'funcall' the calling function again with this information
[20:02:32] <Bike> it's possible you could use conditions and restarts
[20:02:39] <lisp123> That's what I was thinking
[20:03:01] <lisp123> Wanted to check if there was a particularly canonical way before I went down both routes
[20:03:04] <Bike> for what you described at first i think that would be overcomplicated but i don't know the shape of your code
[20:03:48] *** Joins: tyson2 (~user@70.54.112.49)
[20:04:41] *** Joins: dsk (~dsk@user/dsk)
[20:04:58] <lisp123> I have a list of conditions that I need to check / calculate, with some conditions being 'dependent' on the values of earlier conditions in the list - hence once I get a value for a particular condition, I want to test the remaining conditions to see if they work, if not, continue the search for the correct value
[20:05:26] *** Joins: zacts (~zacts@user/zacts)
[20:05:35] <lisp123> So basically a list of search processes, where I want to store the search paths as well, not just the values found by the searches
[20:05:49] *** Joins: markasoftware (~quassel@107.161.26.124)
[20:06:06] <shka> lisp123: perhaps you simply want to have lazy-evaluated values?
[20:06:42] <shka> because it kinda sounds like it
[20:07:42] *** Joins: derelict (~derelict@user/derelict)
[20:08:14] <lisp123> shka: thanks, I will now read that
[20:08:47] <shka> i mean, it is not "supported" in CL, but you can achieve it with closures
[20:12:55] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 268 seconds)
[20:13:08] *** Joins: amb007 (~a_bakic@238.147.204.77.rev.sfr.net)
[20:13:36] <lisp123> There seems to be a package called "clazy" for it in CL
[20:19:08] <mfiano> lisp123: No, the package name is LAZY
[20:19:44] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:20:40] <lisp123> mfiano: Thanks I found it now on GitHub
[20:21:24] <lisp123> I will have a think. jackdaniel's solution is the cleanest / easiest to follow, perhaps I should start with that for now and worry about optimisation later
[20:21:26] <shka> yes, there is, but you can do the same on your own
[20:22:09] <lisp123> shka: yes it seems very straightforward (as in the lines of code are not many - not the concepts - that's very magical :-))
[20:22:36] <mfiano> It's not on GitHub
[20:22:47] <jackdaniel> https://plaster.tymoon.eu/view/2556#2556 :)
[20:22:52] <lisp123> https://github.com/massung/lazy
[20:22:55] <mfiano> It's also not in Quicklisp dist due to non-conforming code
[20:22:56] <jackdaniel> lexically scoped lazy values
[20:23:06] <lisp123> jackdaniel: thanks <3 :)
[20:23:19] <mfiano> lisp123: That is not the software you originally, mentioned: clazy
[20:23:27] <jackdaniel> that's more a hack, I've just  found it  amusing to write
[20:23:28] <mfiano> clazy's package is "lazy"
[20:24:06] <jackdaniel> that's some clazy naming
[20:24:16] <mfiano> I think maybe you are using the wrong terminology when you speak of projects, systems, or packages.
[20:25:32] <lisp123> mfiano: i found the source material here also https://common-lisp.net/project/clazy/
[20:26:05] <mfiano> That's different
[20:27:15] <lisp123> oh okay
[20:27:32] <lisp123> There's also one on QL, I assume that is the one you are mentioning
[20:27:52] <lisp123> so three packages with the same name :D
[20:28:02] <mfiano> I didn't mention one. You did
[20:28:13] <mfiano> I was correcting your use of the word "package"
[20:28:18] <mfiano> A system is not a package
[20:28:37] <mfiano> You might be confusing a lot of people around here when you speak of a "package" but mean a "system"
[20:30:15] <lisp123> Ok, sorry about that
[20:30:18] <jackdaniel> here's a version without warnings: https://plaster.tymoon.eu/view/2557#
[20:31:53] <lisp123> jackdaniel: thanks <3 Saved straight into my utilities.lisp file
[20:32:20] * jackdaniel gives a yada yada public domain blessing
[20:36:48] <mfiano> lisp123: A package is a collection of symbol objects. There are N packages in a system. A system is a collection of ASDF manifests. There are M systems per project. A project is a collection of code, usually in the form of a Git repository, and is what Quicklisp tracks.
[20:37:20] <jackdaniel> xach: can quicklisp handle fossil repositories?
[20:40:50] *** Quits: AnimalCl1 (~AnimalCla@208.66.176.26) (Ping timeout: 256 seconds)
[20:42:35] <lisp123> jackdaniel: what is a fossil repository? old ones from the 90s?
[20:43:42] <lisp123> mfiano: Thanks, I was aware of the terms, but I don't use ASDF much at all, so I have been using package more generally. Anyways I'll be careful in the future
[20:46:15] *** Quits: cuz (~user@38.140.58.234) (Remote host closed the connection)
[20:46:34] *** Joins: cuz (~user@38.140.58.234)
[20:59:00] <manicennui> lisp123: Fossil is another source control tool.
[20:59:06] <manicennui> Combined with a bunch of other functionality.
[20:59:46] <manicennui> I'm forgetting which popular project is associated with fossil.
[21:00:05] <manicennui> https://www.fossil-scm.org/home/doc/trunk/www/index.wiki
[21:00:34] <lisp123> manicennui: thanks :)
[21:01:03] <manicennui> Ah, same author as SQLite.
[21:01:32] <lisp123> A genius he is
[21:04:10] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 255 seconds)
[21:05:36] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[21:15:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:15:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:20:05] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[21:20:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[21:26:23] <lucerne> I am seeing some unexpected output in the stderr of one of my scripts, beginning with `#= REPL\[213]:1 =#`. Any idea what could have caused it?
[21:28:26] *** Quits: ems (~ems@2a02:a318:813a:d880:24e6:6f27:1fd7:966f) (Quit: Konversation terminated!)
[21:31:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:32:00] *** Quits: markasoftware (~quassel@107.161.26.124) (Ping timeout: 252 seconds)
[21:38:26] *** Joins: markasoftware (~quassel@107.161.26.124)
[21:41:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:42:14] *** Joins: francogrex (~user@2a02:a03f:60a9:fd00:789e:71d0:1c0e:58ad)
[21:43:42] <francogrex> Hi, I am trying this "optimized" function but it doesn't deliver at fib n > 43, is there a C long long equivalent (not bignum)? (defun fib (n)    (declare (optimize (speed 3) (safety 0))  	   (type fixnum n))    (if (<= n 1)        1        (the fixnum (+ (fib (1- n))           (fib (- n 2))))))
[21:44:05] <francogrex> sorry for inlining the funx here but ever since lisppaste died...
[21:45:05] <jackdaniel> I think that a part of your problem comes from the fact that you compute same values too many times
[21:46:10] <jackdaniel> you can have a performant recursive version, but then you need to either memoize results are build from the bottom (not from the top)
[21:46:10] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[21:47:55] *** Joins: AnimalCl1 (~AnimalCla@208.66.176.26)
[21:56:00] <jackdaniel> i.e when you want to go from the bottom: http://turtleware.eu/static/paste/0f7ed93a-fib.lisp.txt
[21:56:41] *** Joins: lotuseater (~user@p200300e787091b003889257b48e44f36.dip0.t-ipconnect.de)
[21:57:48] <jackdaniel> (fib 44) total run took little over 7ms
[21:58:35] <jackdaniel> (and for bigger values most of the time will take printing the number, not the actual computaiton)
[21:58:45] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[22:00:29] *** Joins: domovod (~domovod@89.113.137.108)
[22:03:09] <xach> jackdaniel: not at the moment, but adding new source control systems is generally fairly easy due to the Power of CLOS and a protocol for "upstream source" objects.
[22:03:49] <jackdaniel> I see, thanks
[22:05:26] <francogrex> jackdaniel: excellent. thanks. I guess
[22:06:11] <francogrex> I guess I was looking at the wring code here; the not optimized: https://github.com/drujensen/fib
[22:06:20] <francogrex> s/wring/wrong
[22:08:16] <jackdaniel> the memoized version assumes that n is max 99 and that be easily beat in cl
[22:09:15] <francogrex> they should really choose other functions to benchmark than those that can be done with magic tricks like this one
[22:09:28] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:10:00] <jackdaniel> and the version with labels does not put rec in the tail position, so even when the implementation can support tail call optimization, it won't (because it can't)
[22:10:47] <francogrex> jackdaniel: I know, both lisp codes in the "optimized" there fail, badly written I guess
[22:10:56] <francogrex> yours is the one
[22:19:56] <jackdaniel> well, almost, it doesn't handle fib(0), but fixing that is an excercise for the reader ,)
[22:21:49] <jackdaniel> also a memoized version: http://turtleware.eu/static/paste/cf23cbe0-fib.lisp.txt
[22:22:12] * jackdaniel feels like a github copilot (without loundering the foss code bit though)
[22:22:25] <jackdaniel> and with a very slow network connection
[22:22:37] <ck_> future historians will name us as a civilization that values this particular series very highly
[22:22:46] <ck_> "used for ritual purposes"
[22:24:17] <jackdaniel> laundering*
[22:27:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:29:38] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[22:32:17] *** Quits: peterhil (~peterhil@mobile-access-b04801-219.dhcp.inet.fi) (Ping timeout: 268 seconds)
[22:34:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[22:35:03] <francogrex> jackdaniel: I liked your first version better, despite the fib 0 thing
[22:38:56] *** Joins: akoana (~ah@user/akoana)
[22:38:57] *** Joins: derelict (~derelict@user/derelict)
[22:42:23] <jackdaniel> :)
[22:42:27] <francogrex> I should try to use mardown in my code
[22:43:38] <francogrex> + connection to github sucks
[22:44:20] <White_Flame> francogrex: this pastebin works, and is hosted by one of our own
[22:44:22] <White_Flame> https://plaster.tymoon.eu/edit
[22:45:20] <francogrex> White_Flame: great
[22:49:03] *** Joins: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr)
[22:51:09] *** Quits: AnimalCl1 (~AnimalCla@208.66.176.26) (Quit: WeeChat 3.0.1)
[22:51:24] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[22:56:48] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-A413-dynamic.midco.net)
[23:02:42] *** Quits: domovod (~domovod@89.113.137.108) (Ping timeout: 255 seconds)
[23:03:35] *** Joins: domovod (~domovod@89.113.143.221)
[23:06:37] *** Quits: OlCe (~user@lfbn-nic-1-123-149.w2-15.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[23:15:29] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[23:16:53] *** Joins: d_run (sid83858@id-83858.stonehaven.irccloud.com)
[23:17:55] *** Quits: amb007 (~a_bakic@238.147.204.77.rev.sfr.net) (Ping timeout: 268 seconds)
[23:22:29] *** Quits: francogrex (~user@2a02:a03f:60a9:fd00:789e:71d0:1c0e:58ad) (Remote host closed the connection)
[23:25:55] *** Quits: raeda (~raeda@72.49.219.33) (Quit: Leaving)
[23:32:35] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[23:32:39] *** Quits: domovod (~domovod@89.113.143.221) (Quit: WeeChat 3.2)
[23:33:34] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:37:22] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-A413-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[23:41:14] *** Joins: pjb (~pjb@user/pjb)
[23:46:29] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[23:48:44] *** Joins: pjb (~pjb@user/pjb)
