[00:00:46] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:03:29] *** Joins: kiril (~kiril@85.91.153.163)
[00:04:30] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[00:07:11] *** Quits: normen (~normen@pd9eec557.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[00:08:26] <dostoyevsky2> One thing about k8s that irritated me was that worker nodes would spent like 10% cpu at constantly querying the masters for changes to the database... wouldn't it be much better if the master were to tell the workers when data has been changed?  Or is there a particular reason why each worker should constantly query the master?
[00:08:38] <b0nn> dammit, I'm /supposed/ to be downloading me some decent AWS skillz, but that discussion on regexp engines led me to https://rust-leipzig.github.io/regex/2017/03/28/comparison-of-regex-engines/ According to Wikipedia Go uses the RE2 engine - so I'm now wondering if the Hyperscan can be coerced into Go
[00:08:51] <b0nn> https://github.com/intel/hyperscan
[00:09:54] <b0nn> dostoyevsky2: workers polling vs master driving an event? (I'd prefer the latter, but it would require the workers to register and send keepalives I think)
[00:10:28] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:12:24] *** Joins: kiril (~kiril@85.91.153.163)
[00:13:44] <dostoyevsky2> b0nn: does RE2 have a JIT?   I wonder if there is any language where regexp can come close to v8 where they JIT them... and RE performance is crucial for the browser's rendering performance
[00:14:35] <b0nn> According to the Rustacean's comparisons, RE2 is faster than PCRE-JIT
[00:14:36] <dostoyevsky2> but ripgrep is the fastest grep but burntsushi said it's not even jitting
[00:15:12] <b0nn> So, the fastest is Hyperscan, then RE2, then PCRE-JIT
[00:17:08] <b0nn> But, the second graph the engines had scores assigned because one bad family of matches would kill an engines performance, and in that graph Hyperscan is the clear winner, but PCRE-JIT is second equal with Rust's regex engine, and RE2 a distant 5th
[00:17:17] <b0nn> 4th*
[00:20:29] <b0nn> https://xkcd.com/356/
[00:21:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[00:22:38] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-130.dsl.bell.ca) (Quit: Client closed)
[00:22:52] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 265 seconds)
[00:23:34] *** Joins: mambang (~mambang@user/mambang)
[00:23:49] *** Joins: fikran (~fikran@user/fikran)
[00:25:49] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[00:26:47] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[00:26:59] <dostoyevsky2> b0nn: Since RE2 already has a c++ interface it's probably not difficult to implement a Hyperscan api as well... but some semantics might be different..
[00:29:35] *** Quits: nostalgia (~nostalgia@69.51.171.201) (Ping timeout: 260 seconds)
[00:36:16] *** Joins: normen (~normen@pd9eec557.dip0.t-ipconnect.de)
[00:45:09] <pinky_> is there anything that would copy exported struct fields that match in name and type from one struct to another?
[00:45:34] <pinky_> in a method of my struct i was unmarshalling directly into the struct, but now i wanted to add a validation method that gates writing the values
[00:46:06] <pinky_> so like make a new of my same type struct, unmarshal into it, check error, and then the copy of the values
[00:46:17] *** Quits: mambang (~mambang@user/mambang) (Remote host closed the connection)
[00:46:29] <pinky_> copy from temp struct to one that the method is actually "running in", and then discard temp
[00:46:34] <pinky_> so values can be validated
[00:46:46] *** Joins: Torr (~Torr@user/torr)
[00:47:00] <pinky_> or maybe i could just do it in a custom unmarshaller
[00:47:26] <b0nn> uhh why not make the validation a part of a copy
[00:48:53] <pinky_> hrm, i guess because not everything needs to be validated
[00:48:56] *** Joins: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge)
[00:48:59] <pinky_> didn't think of that somehow but ..
[00:49:31] <pinky_> annoying to have to have another place you have to add to if you add a new struct member
[00:50:56] <pinky_> cause you mostly have like real.a = temp.a
[00:51:29] <pinky_> but then maybe you have if temp.blah > 1024 {} else { real.blah = temp.blah }
[00:54:22] <rawtaz> b0nn: =D
[00:54:40] <rawtaz> xkcd never gets old, ever
[00:56:22] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:57:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:02:00] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[01:02:01] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[01:02:16] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[01:04:49] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:05:06] *** Joins: mickey8 (~user@user/mickey)
[01:07:32] *** Quits: mickey8 (~user@user/mickey) (Client Quit)
[01:07:53] *** Joins: mickey8 (~user@user/mickey)
[01:08:19] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[01:10:30] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[01:11:08] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:e91e:9a76:d6:dc58)
[01:11:33] *** Joins: kiril (~kiril@85.91.153.163)
[01:17:01] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:17:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[01:21:08] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[01:22:43] <pinky_> and theres no way to swap the pointer of a struct to a new struct from inside a method on that struct? lol..
[01:22:53] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5)
[01:23:10] <pinky_> so i was going to unmarshal into a temporary struct and then if the validate is good, throw that away and unmarshal into the struct the method runs in
[01:23:25] <pinky_> but the data could change in between, i'd use a mutex, but it's viper
[01:23:29] <pinky_> i'm using the viper unmarshal
[01:23:52] <pinky_> so if the on config change handler happens to hit and viper reloads the config file between the first unmarshal and the second
[01:27:14] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:29:42] *** Joins: rcernin (~rcernin@124.190.139.235)
[01:35:23] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[01:44:19] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[01:45:49] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[01:46:55] *** Joins: k0ta (~k0ta@103.108.94.37)
[01:48:35] *** Quits: internut (~internut@2601:280:4e00:7b70:a568:10c3:b3b2:8633) (Remote host closed the connection)
[01:49:17] *** Joins: internut (~internut@2601:280:4e00:7b70:a568:10c3:b3b2:8633)
[01:53:26] *** Quits: internut (~internut@2601:280:4e00:7b70:a568:10c3:b3b2:8633) (Ping timeout: 245 seconds)
[01:54:56] *** Quits: cync_ (~blah@192.180.187.81.in-addr.arpa) (Quit: bye!)
[01:55:39] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:57:56] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-130.dsl.bell.ca)
[01:58:15] *** Joins: hexfive (~eric@50.35.83.177)
[01:58:15] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-130.dsl.bell.ca) ()
[02:00:56] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com)
[02:01:01] <pinky_> https://github.com/spf13/viper/blob/b1fdc47b0d05b6af898a3d50aefd62c5825a17fe/viper.go#L1059
[02:01:05] <pinky_> how does this wrapper do anything?
[02:04:55] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 252 seconds)
[02:06:05] <fizzie> I feel like maybe the comment's just stale. It looked different originally: https://github.com/spf13/viper/commit/c975dc1
[02:06:54] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0.1)
[02:07:39] <seebs> yeah, that seems plausible.
[02:07:44] <pinky_> ahh :)
[02:08:02] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[02:09:10] <awmv> How do I write this in a docker-compose.yaml? https://go-acme.github.io/lego/dns/porkbun/
[02:09:27] *** Quits: aberrant (~aberrant@c-69-251-113-165.hsd1.va.comcast.net) (Quit: Lost terminal)
[02:10:46] *** Joins: internut (~internut@2601:280:4e00:7b70:1cf5:4852:ec7a:54ff)
[02:13:06] <pinky_> and of course mapstructure has no decoder hook that is post weakly typed conversion
[02:14:16] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 245 seconds)
[02:15:06] *** Quits: internut (~internut@2601:280:4e00:7b70:1cf5:4852:ec7a:54ff) (Ping timeout: 245 seconds)
[02:15:52] *** Joins: SJrX (~sjr@s0106302303dfb018.vf.shawcable.net)
[02:16:52] *** Quits: rek2 (~ReK2@47.62.9.10) (Quit: WeeChat 3.3)
[02:18:41] *** Joins: rek2 (~ReK2@47.62.9.10)
[02:18:44] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:26:23] *** Joins: gggpkm (~gggpkm@172.105.122.124)
[02:31:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[02:33:01] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[02:33:12] *** Joins: fikran (~fikran@user/fikran)
[02:35:00] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[02:37:58] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:43:17] <pinky_> from a reflect.Type I wonder if theres a simple way to just get the struct which was input to reflect
[02:45:02] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[02:45:36] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:50:25] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:06:51] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[03:07:41] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 265 seconds)
[03:07:55] <bpalmer> pinky_: you mean, given t := reflect.TypeOf(v) , you want something that gives you back v, when given t?
[03:08:29] <KirkMcDonald> You can get a new zero value of the type.
[03:08:45] <KirkMcDonald> But it does not retain the specific value which was passed to TypeOf.
[03:08:55] <dostoyevsky2> Is there something that would let me have a peak at binary data when I do log.Printf() ... I tried %s %v but they seem to just garble my screen
[03:09:14] <fizzie> "%x" on a []byte.
[03:09:41] <fizzie> Prints it in hex. Or "%q" if it's mostly text.
[03:10:54] <dostoyevsky2> Ah, %q looks interesting!
[03:12:15] <pinky_> bpalmer: yeah, or i can also do it with a reflect.Value maybe?
[03:12:57] <pinky_> so these here are the options https://github.com/mitchellh/mapstructure/blob/v1.4.2/mapstructure.go#L171-L197
[03:13:10] <pinky_> I was hoping to abuse one of these to validate my data and return an error if it fails
[03:13:39] <pinky_> i can at least as a map, that would be easy
[03:13:42] <pinky_> but it would be ugly
[03:15:52] *** Joins: Torr (~Torr@user/torr)
[03:19:22] <bpalmer> pinky_: if you have a v := reflect.Value(i) for some i of type T , you can get back the original i with  v.Interface().(T)
[03:20:12] <bpalmer> sorry, that should be v := reflect.ValueOf(i)
[03:21:09] *** Quits: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:21:15] <pinky_> ah thanks! so that is what i was doing but the to value in those hooks is not yet populated with mapstructure
[03:21:21] <pinky_> only values pre-unmarshalling were there
[03:21:32] <pinky_> but i just realized something stupid, i have the map i can call mapstructure.Decode to decode it where i want
[03:21:38] <pinky_> testing :)
[03:29:37] *** r0bby is now known as r0bby[m]
[03:29:44] *** r0bby[m] is now known as r0bby
[03:31:34] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:32:24] *** r0bby is now known as r0bby[m]_
[03:32:44] *** r0bby[m]_ is now known as r0bby[m]
[03:32:46] *** r0bby[m] is now known as r0bby
[03:42:42] *** Quits: normen (~normen@pd9eec557.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:43:43] *** Joins: normen (~normen@p200300d7170f9f00651fa27be01d80f5.dip0.t-ipconnect.de)
[03:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:47:36] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:54:15] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:e91e:9a76:d6:dc58) (Quit: Client closed)
[03:59:09] *** Joins: internut (~internut@2601:280:4e00:7b70:1cf5:4852:ec7a:54ff)
[03:59:24] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 265 seconds)
[04:02:36] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[04:03:08] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Client Quit)
[04:03:35] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[04:04:54] *** Quits: internut (~internut@2601:280:4e00:7b70:1cf5:4852:ec7a:54ff) (Ping timeout: 268 seconds)
[04:09:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-4481-c071-7b13-a796.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:21:00] *** Joins: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com)
[04:27:22] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 252 seconds)
[04:31:18] *** Quits: adip (~adip@aedv46.neoplus.adsl.tpnet.pl) (Ping timeout: 265 seconds)
[04:32:43] *** Quits: jespada (~jespada@host196.190-3-30.dynamic.telmex.net.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:33:12] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a)
[04:33:30] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[04:35:49] *** Joins: arinov (~arinov@213.194.126.155)
[04:36:14] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[04:38:12] *** Quits: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a) (Ping timeout: 268 seconds)
[04:40:01] *** Joins: frost (~frost@59.71.244.189)
[04:40:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[04:41:16] *** Quits: frost (~frost@59.71.244.189) (Remote host closed the connection)
[04:42:33] *** Joins: fikran (~fikran@user/fikran)
[04:48:13] *** Joins: Player001 (~Player001@2600:6c54:7e00:1a19:f0ca:556e:dcc6:b559)
[04:49:21] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[05:05:00] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[05:05:34] *** Quits: kochchef (~quassel@80.146.255.46) (Remote host closed the connection)
[05:06:40] *** Joins: kochchef (~quassel@80.146.255.46)
[05:15:13] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a)
[05:16:15] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[05:17:40] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[05:21:05] *** Quits: hornhack (~hackingho@user/hackinghorn) (Ping timeout: 265 seconds)
[05:34:43] *** Quits: zkanda (~zkanda@box.makean.art) (Quit: The Lounge - https://thelounge.chat)
[05:35:22] *** Joins: zkanda (~zkanda@box.makean.art)
[05:37:09] *** Joins: frost (~frost@59.71.244.189)
[05:39:28] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:41:46] *** Joins: internut (~internut@2601:280:4e00:7b70:1cf5:4852:ec7a:54ff)
[05:45:56] *** Quits: internut (~internut@2601:280:4e00:7b70:1cf5:4852:ec7a:54ff) (Ping timeout: 245 seconds)
[05:51:46] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:53:23] *** Quits: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[05:58:55] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:01:25] *** Quits: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a) (Ping timeout: 252 seconds)
[06:10:29] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[06:12:22] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 252 seconds)
[06:14:21] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[06:18:02] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[06:19:26] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:24:04] *** Quits: Player001 (~Player001@2600:6c54:7e00:1a19:f0ca:556e:dcc6:b559) (Quit: Client closed)
[06:24:16] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 245 seconds)
[06:25:01] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 252 seconds)
[06:29:40] *** Quits: voidnoir0_ (uid343973@id-343973.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:49:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[06:51:53] *** Joins: fikran (~fikran@user/fikran)
[06:56:50] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:09:05] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 264 seconds)
[07:20:40] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[07:23:40] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:24:53] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:25:07] *** Quits: shtirlic (~shtirlic@95-55-26-134.dynamic.avangarddsl.ru) (Read error: Connection reset by peer)
[07:26:46] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[07:27:36] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[07:34:23] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:34:26] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:35:26] *** Joins: silbermm (~silbermm@user/ahappydeath)
[07:36:14] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[07:39:41] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[07:54:40] *** Quits: yelnah (~felix@203.221.122.90) (Ping timeout: 252 seconds)
[07:55:38] *** Joins: yelnah (~felix@2001:44b8:3084:172:6f0:21ff:fe3c:d4d7)
[08:01:05] *** Quits: LiftLeft (~LiftLeft@191.96.185.95) (Ping timeout: 268 seconds)
[08:06:08] *** Joins: yolo_ (~xxiao@159.89.184.51)
[08:09:01] *** Quits: yelnah (~felix@2001:44b8:3084:172:6f0:21ff:fe3c:d4d7) (Ping timeout: 252 seconds)
[08:10:54] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[08:22:41] *** Joins: yelnah (~felix@2001:44b8:308c:ca:6f0:21ff:fe3c:d4d7)
[08:26:45] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[08:29:49] *** Joins: silbermm (~silbermm@user/ahappydeath)
[08:34:16] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[08:37:28] *** Joins: silbermm (~silbermm@user/ahappydeath)
[08:41:46] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[08:48:17] *** Joins: internut (~internut@2601:280:4e00:7b70:1cf5:4852:ec7a:54ff)
[08:51:24] *** Joins: internut_ (~internut@2601:280:4e00:7b70:6984:165d:ff1a:a6c5)
[08:52:07] *** Joins: mei6 (~mei@user/mei)
[08:53:06] *** Quits: internut (~internut@2601:280:4e00:7b70:1cf5:4852:ec7a:54ff) (Ping timeout: 268 seconds)
[08:55:46] *** Quits: internut_ (~internut@2601:280:4e00:7b70:6984:165d:ff1a:a6c5) (Ping timeout: 252 seconds)
[08:57:55] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[08:59:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[09:01:13] *** Joins: fikran (~fikran@user/fikran)
[09:02:00] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[09:03:43] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[09:04:19] *** Joins: mooff (mooff@awful.cooking)
[09:06:21] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Ping timeout: 245 seconds)
[09:09:47] *** Quits: mei6 (~mei@user/mei) (Quit: mei6)
[09:10:59] *** Joins: mei6 (~mei@user/mei)
[09:17:27] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5)
[09:19:37] <novns> there should be a way to access one of returned values without intermediate assignments
[09:21:32] <novns> like instead of   a, _ := A();  bla(a);   just use   bla(A().1);  or something
[09:22:25] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[09:25:33] <b0nn> yuck
[09:34:46] *** Joins: cskr (~cskr@49.207.195.140)
[09:36:56] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 246 seconds)
[09:45:57] <novns> and the mighty ternary operator, I miss it so much
[09:47:26] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[09:49:57] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[09:51:02] *** Joins: ItsNotGoodName7 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[09:52:36] *** Quits: ItsNotGoodName (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[09:52:36] *** ItsNotGoodName7 is now known as ItsNotGoodName
[10:01:42] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:02:41] *** Joins: marcel5 (~marcel@user/marcel)
[10:02:44] *** Joins: finnb3 (~finnb@51.15.63.237)
[10:03:24] *** Joins: dreistadt_ (sid501648@id-501648.lymington.irccloud.com)
[10:03:44] *** Joins: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[10:03:55] *** Joins: justHaunt1 (~justache@user/justache)
[10:04:21] *** Joins: kiril (~kiril@85.91.153.163)
[10:04:54] *** Quits: dreistadt (sid501648@lymington.irccloud.com) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: crazymax (~crazymax@user/crazymax) (Ping timeout: 245 seconds)
[10:04:54] *** dreistadt_ is now known as dreistadt
[10:04:54] *** Quits: alm (~alm@user/alm) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: marcel (~marcel@user/marcel) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: zwindl (~abc@user/abc) (Ping timeout: 245 seconds)
[10:04:54] *** marcel5 is now known as marcel
[10:04:54] *** Quits: justHaunt (~justache@user/justache) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: eau (~chat@user/eau) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: finnb (~finnb@51.15.63.237) (Ping timeout: 245 seconds)
[10:04:54] *** Quits: sam1 (~sam1@molly.millions.slask.me) (Ping timeout: 245 seconds)
[10:04:56] *** justHaunt1 is now known as justHaunt
[10:04:56] *** finnb3 is now known as finnb
[10:05:16] *** Joins: alm (~alm@user/alm)
[10:05:17] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[10:05:46] *** Joins: eau (~chat@user/eau)
[10:06:08] *** Joins: Techcable (~Techcable@168.235.93.147)
[10:06:56] *** Joins: sam1 (~sam1@molly.millions.slask.me)
[10:08:39] *** Joins: abc_ (~abc@user/abc)
[10:13:34] *** Joins: hikhvar796073809 (~thelounge@x4db36a31.dyn.telefonica.de)
[10:13:48] *** Quits: cskr (~cskr@49.207.195.140) (Quit: Leaving)
[10:20:22] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:30:07] *** Joins: Ergo^ (~ergo@91.238.59.144)
[10:33:02] *** Joins: me-sudoer-dentne (~me-sudoer@2405:204:53ab:d5ed:583f:8b00:175b:9f05)
[10:34:38] *** Joins: haircode (~haircode@62.196.189.80.dyn.plus.net)
[10:37:56] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[10:39:57] <seebs> i miss the ternary operator, but i will say, i do not miss working on code written by other people that used it, and "other people" includes "me, yesterday"
[10:40:29] <shiroyasha> I don't know, conditional operator seems like an ugly hack to me. If I'm going to have `if` expressions, I'd rather have them with the same syntax as `if` statements.
[10:40:57] <shiroyasha> Instead of one syntax for an `if` statement, and a different syntax for a broken `if` expression.
[10:41:52] <seebs> the benefit of it is it sometimes allows writing a thing much more tersely, the disadvantage is that then i have to spot it when reading or not understand what's happening
[10:42:00] <seebs> especially once there's side-effects
[10:43:43] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[10:48:36] *** imm__ is now known as imm_
[10:49:47] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[10:49:59] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[10:50:46] *** Joins: silbermm (~silbermm@user/ahappydeath)
[10:57:58] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[10:59:13] *** Joins: jackneill (~jackneill@86ff58b3.dsl.pool.telekom.hu)
[11:00:04] *** Quits: jackneilll (~jackneill@20014C4E18017D00FE52B94114BC6F4A.dsl.pool.telekom.hu) (Ping timeout: 252 seconds)
[11:02:19] *** Quits: gpeskens_ (~gpeskens@62.251.31.165) (Ping timeout: 265 seconds)
[11:02:30] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[11:08:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:10:02] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:10:34] *** Joins: fikran (~fikran@user/fikran)
[11:10:39] *** Joins: gpeskens (~gpeskens@62.251.31.165)
[11:13:13] *** Quits: andlabs (~andlabs@70.107.171.168) (Read error: Connection reset by peer)
[11:13:51] *** Joins: andlabs (~andlabs@70.107.171.168)
[11:14:00] *** Joins: kiril (~kiril@85.91.153.163)
[11:16:26] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:19:21] *** Joins: kiril (~kiril@85.91.153.163)
[11:21:17] *** Quits: gpeskens (~gpeskens@62.251.31.165) (Remote host closed the connection)
[11:21:39] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[11:22:18] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:878d:201b:f134:6dcd)
[11:22:37] <Awoobis> I wouldnt mind if expressions
[11:22:54] <Awoobis> even x := if z { a } else { b }
[11:23:19] *** Joins: silbermm (~silbermm@user/ahappydeath)
[11:23:45] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[11:25:33] <KirkMcDonald> Just steal Python's: x := a if z else b
[11:27:31] <Awoobis> I dont like the loss of braces
[11:27:31] *** Quits: tdaeayusr^^ (~tdaeayusr@70.166.66.234) (Ping timeout: 252 seconds)
[11:27:34] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[11:27:41] <Awoobis> though the braces are also quite obtuse
[11:27:56] <deniska> go has ternary expressions, they just look like this: map[bool]string{true: "first", false: "second"}[1 > 2]
[11:28:11] <KirkMcDonald> deniska: Except a bool isn't an integer.
[11:28:12] <shadowchaser> very readable
[11:28:13] <Awoobis> yep nope thats horrifying
[11:28:21] <KirkMcDonald> Oh, it's a map, derp.
[11:28:26] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Quit: mikoto-chan)
[11:28:34] <Awoobis> I've written functions to do x or y before
[11:28:36] <KirkMcDonald> Too used to seeing Python's version of that, heh.
[11:28:40] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Ping timeout: 252 seconds)
[11:29:03] <Awoobis> oh I can do some cursed python with that; [first, second][int(1 > 2)]
[11:29:14] <Awoobis> or I guess a tuple would be better for that
[11:29:15] <KirkMcDonald> You don't even need the int() call in that one.
[11:29:20] <Awoobis> I couldnt remember
[11:29:24] <deniska> in python bools are ints \o/
[11:29:41] <KirkMcDonald> Because of Reasons.
[11:30:29] <Awoobis> `0 but true`
[11:30:46] <Awoobis> that will forever be the most horrifying thing I know about perl
[11:31:09] <deniska> I should try perl some day
[11:39:31] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[11:39:37] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[11:42:04] *** Joins: mickey8 (~user@user/mickey)
[11:42:29] *** Joins: kiril (~kiril@85.91.153.163)
[11:45:18] <novns> Perl was nice in 90s
[11:47:08] <novns> but the code you just wrote became unreadable the next day
[11:47:27] <novns> *becomes
[11:48:45] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[11:49:11] <bookworm> s/day/second/
[11:49:29] <novns> some my Perl scripts are still in use after 20 years
[11:52:14] *** Joins: silbermm (~silbermm@user/ahappydeath)
[11:56:35] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 246 seconds)
[11:58:41] *** Parts: xrj (~av@2a01:4f8:c17:7cba::1) (Leaving)
[12:00:38] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[12:09:05] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 264 seconds)
[12:10:14] *** Joins: jpw (~jpw@user/jpw)
[12:14:23] <deniska> sounds like how code behaves
[12:18:58] *** Joins: tdaeausr^ (~tdaeausr@70.166.66.234)
[12:19:59] *** Joins: kinlo (~peter@user/kinlo)
[12:20:28] *** Quits: ddevault (e7b4bb6755@2604:bf00:710:0:5054:ff:feea:5006) (Changing host)
[12:20:28] *** Joins: ddevault (e7b4bb6755@sourcehut/staff/ddevault)
[12:20:48] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:21:01] *** Quits: ac5tin (~ac5tin@user/ac5tin) (Quit: WeeChat 3.2.1)
[12:23:11] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5) (Ping timeout: 265 seconds)
[12:28:43] *** Quits: haircode (~haircode@62.196.189.80.dyn.plus.net) (Quit: Konversation terminated!)
[12:38:32] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[12:41:50] *** Joins: PortableDave (~portabled@194-193-148-202.tpgi.com.au)
[12:45:28] *** Parts: jla (~jordi@tao.ddns.jazztel.es) ()
[12:46:23] *** Quits: PortableDave (~portabled@194-193-148-202.tpgi.com.au) (Ping timeout: 265 seconds)
[12:56:06] *** Joins: hornhack (~hackingho@user/hackinghorn)
[12:58:51] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 245 seconds)
[12:59:41] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[13:01:04] *** Quits: hornhack (~hackingho@user/hackinghorn) (Ping timeout: 252 seconds)
[13:02:00] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[13:07:47] *** Joins: normen_ (~normen@2a00:20:701f:dc04:4005:85ee:9fb4:a6ce)
[13:09:05] *** Quits: normen (~normen@p200300d7170f9f00651fa27be01d80f5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[13:09:07] *** normen_ is now known as normen
[13:09:31] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[13:09:34] *** Joins: gggp (~gggp@123.113.176.77)
[13:09:58] *** Quits: gggp (~gggp@123.113.176.77) (Client Quit)
[13:10:17] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:14:08] *** Joins: normen_ (~normen@p200300d7173d5a00d0f99975aa9f6eb2.dip0.t-ipconnect.de)
[13:14:16] *** Quits: normen (~normen@2a00:20:701f:dc04:4005:85ee:9fb4:a6ce) (Ping timeout: 252 seconds)
[13:14:20] *** normen_ is now known as normen
[13:14:38] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Ping timeout: 246 seconds)
[13:18:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[13:18:25] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[13:18:50] *** Quits: normen (~normen@p200300d7173d5a00d0f99975aa9f6eb2.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[13:19:55] *** Joins: fikran (~fikran@user/fikran)
[13:20:26] *** Joins: normen (~normen@p200300d7173da500d92b1b2288ee7846.dip0.t-ipconnect.de)
[13:20:52] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:23:01] *** Quits: adip (~adip@aedv46.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[13:23:44] *** Joins: kiril (~kiril@85.91.153.163)
[13:26:21] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 245 seconds)
[13:38:21] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:39:37] *** Quits: gpeskens (~gpeskens@2001:985:7aa4:1:878d:201b:f134:6dcd) (Remote host closed the connection)
[13:40:28] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[13:40:34] *** Quits: pvalenta (~petr@mail.open-system.cz) (Quit: ZNC - https://znc.in)
[13:41:01] *** Joins: kiril (~kiril@85.91.153.163)
[13:42:23] *** Joins: pvalenta (~petr@mail.open-system.cz)
[13:43:15] *** Quits: pvalenta (~petr@mail.open-system.cz) (Client Quit)
[13:43:57] *** Joins: pvalenta (~petr@mail.open-system.cz)
[13:44:41] *** Quits: mika (~mika@odysseus.grml.info) (Quit: grml.org)
[13:47:11] *** Quits: chpar (~chpar@209.107.101.201) (Ping timeout: 245 seconds)
[13:49:41] *** Quits: transacid (~transacid@transacid.de) (Ping timeout: 245 seconds)
[13:50:01] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:52:04] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:54:17] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:56:40] *** Joins: transacid (~transacid@transacid.de)
[13:57:19] *** Joins: kiril (~kiril@85.91.153.163)
[14:02:09] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:a545:61cf:6fee:5b9f)
[14:04:05] *** Joins: bkircher (~bkircher@46.183.103.8)
[14:21:04] *** me-sudoer-dentne is now known as dvorak
[14:26:33] *** dvorak is now known as me-sudoer-dentne
[14:29:54] *** Joins: normen_ (~normen@p200300d717401d004c50ffa707d9dca4.dip0.t-ipconnect.de)
[14:31:38] *** Quits: normen (~normen@p200300d7173da500d92b1b2288ee7846.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[14:31:40] *** normen_ is now known as normen
[14:31:47] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:e91e:9a76:d6:dc58)
[14:33:04] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[14:33:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[14:34:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[14:36:13] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 252 seconds)
[14:43:19] *** Quits: bkircher (~bkircher@46.183.103.8) (Ping timeout: 252 seconds)
[14:43:40] *** Joins: xiongxin (~quassel@113.116.224.79)
[14:44:52] *** Joins: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de)
[14:46:23] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:e91e:9a76:d6:dc58) (Quit: Client closed)
[14:46:52] *** Joins: silbermm (~silbermm@user/ahappydeath)
[14:49:20] *** Quits: hikhvar796073809 (~thelounge@x4db36a31.dyn.telefonica.de) (Quit: The Lounge - https://thelounge.chat)
[14:50:13] *** Quits: xiongxin (~quassel@113.116.224.79) (Read error: Connection reset by peer)
[14:51:11] *** Joins: xiongxin (~quassel@113.116.224.79)
[14:51:37] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[14:53:21] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[14:56:07] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:a545:61cf:6fee:5b9f) (Ping timeout: 240 seconds)
[14:56:56] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[15:00:08] *** Quits: xiongxin (~quassel@113.116.224.79) (Ping timeout: 265 seconds)
[15:00:21] *** Joins: xiongxin (~quassel@113.116.224.79)
[15:01:37] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[15:01:46] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Ping timeout: 245 seconds)
[15:04:17] *** Joins: kiril (~kiril@85.91.153.163)
[15:07:32] *** Quits: tdaeausr^ (~tdaeausr@70.166.66.234) (Remote host closed the connection)
[15:07:45] *** Joins: arinov (~arinov@31.142.50.8)
[15:08:45] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[15:15:34] *** Quits: eau (~chat@user/eau) (Quit: bleh!)
[15:21:52] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:22:58] *** Joins: eau (~chat@user/eau)
[15:23:20] *** Joins: Atque (~Atque@user/atque)
[15:26:19] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[15:26:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[15:29:16] *** Joins: fikran (~fikran@user/fikran)
[15:29:32] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:e91e:9a76:d6:dc58)
[15:34:26] *** Joins: CoolerX (~CoolerX@user/coolerx)
[15:35:29] *** Joins: silbermm (~silbermm@user/ahappydeath)
[15:51:47] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[15:51:53] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 250 seconds)
[15:53:39] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:e91e:9a76:d6:dc58) (Quit: Client closed)
[15:55:00] *** Joins: bkircher (~bkircher@46.183.103.8)
[15:55:38] *** Joins: emcconville (~emcconvil@c-98-222-200-8.hsd1.il.comcast.net)
[15:56:33] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[16:02:57] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[16:04:24] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 265 seconds)
[16:04:34] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[16:05:15] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 260 seconds)
[16:09:08] *** Joins: mika (~mika@odysseus.grml.info)
[16:09:41] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Ping timeout: 264 seconds)
[16:15:02] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 265 seconds)
[16:18:06] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:18:56] *** Joins: jespada (~jespada@2803:9800:9842:7a62:c52b:2a1d:b7c2:2b5a)
[16:19:59] *** Joins: dsrt^ (~dsrt@70.166.66.234)
[16:23:31] *** Joins: normen_ (~normen@p200300d71743f600b83040461333a5b1.dip0.t-ipconnect.de)
[16:24:30] *** Quits: normen (~normen@p200300d717401d004c50ffa707d9dca4.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:27:50] *** Quits: normen_ (~normen@p200300d71743f600b83040461333a5b1.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[16:29:04] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[16:29:49] *** Joins: normen_ (~normen@p200300d717441500c1aa52b98f4004c8.dip0.t-ipconnect.de)
[16:31:34] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[16:34:32] *** normen_ is now known as normen
[16:35:46] <krux02> is there a go library to call a C compiler and get error messages as a list? Or do I call gcc on the command line and use regular expression to filter out the error messages?
[16:36:32] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[16:39:12] *** Joins: kiril (~kiril@85.91.153.163)
[16:40:11] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:41:03] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[16:43:46] *** Quits: bkircher (~bkircher@46.183.103.8) (Ping timeout: 252 seconds)
[16:44:33] <deniska> iirc compilation errors are somewhat standardized
[16:44:41] <deniska> at least when it comes to file names and line numbers
[16:46:48] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[16:46:59] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:47:17] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a8be-5e8c-f3b4-9539.res6.spectrum.com)
[16:47:20] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:e91e:9a76:d6:dc58)
[16:50:10] <leitz> Did "go get xyz", and it installed in $GOPATH/pkg/mod. "go vet" can't find a "go.mod" file, and the package. What do I need to read to figure this out?
[16:50:38] *** Joins: alzgh (~alzgh@user/alzgh)
[16:51:21] <leitz> The package has a go.mod file.
[16:52:23] <leitz> The import statement was:      _ "github.com/go-sql-driver/mysql"
[16:53:05] *** Parts: cmagina (sid286142@user/cmagina) ()
[16:55:47] *** Quits: normen (~normen@p200300d717441500c1aa52b98f4004c8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:55:52] *** Joins: normen_ (~normen@p54b3407d.dip0.t-ipconnect.de)
[16:57:25] *** Quits: frost (~frost@59.71.244.189) (Quit: Connection closed)
[17:01:55] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 252 seconds)
[17:01:55] *** Quits: martinkennelly_ (~martinken@84.203.20.92) (Ping timeout: 265 seconds)
[17:04:32] *** normen_ is now known as normen
[17:07:10] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:09:23] *** Joins: CoolerX (~CoolerX@user/coolerx)
[17:09:41] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:12:11] *** Joins: normen_ (~normen@p200300d7174546008c8cfce491bce79f.dip0.t-ipconnect.de)
[17:12:13] *** Quits: normen (~normen@p54b3407d.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[17:12:17] *** normen_ is now known as normen
[17:12:58] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[17:13:22] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:13:50] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[17:14:19] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:15:46] *** Joins: LiftLeft (~LiftLeft@37.19.197.194)
[17:16:39] <leitz> More detailed info:   https://gist.github.com/LeamHall/e07a90320dc5f6737f4253509e72f23b
[17:17:58] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[17:22:19] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Ping timeout: 252 seconds)
[17:25:37] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:25:57] *** Quits: normen (~normen@p200300d7174546008c8cfce491bce79f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:26:49] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:27:08] <siXy> leitz: looks like you may have missed go mod init
[17:27:23] <leitz> siXy, in the working directory?
[17:27:29] *** Joins: normen (~normen@p200300d717459300f17a9c56ea71920e.dip0.t-ipconnect.de)
[17:27:30] <siXy> and maybe some other stuff. have a look at https://go.dev/blog/using-go-modules
[17:27:34] <sztanpet> start here https://golang.org/doc/code
[17:27:52] *** Quits: jackneill (~jackneill@86ff58b3.dsl.pool.telekom.hu) (Remote host closed the connection)
[17:28:17] <leitz> sztanpet, telling someone to read a lot before doing anything will chase away a lot of great contributors.
[17:29:04] <leitz> Does that help our community?
[17:29:17] <sztanpet> why is it written down if nobody will read it?
[17:29:49] <siXy> leitz: sztanpet's link is much more concise than mine, and explains clearly what you need to do - why is reading it from a link so much worse than reading it on irc?
[17:31:08] <sztanpet> leitz the answer to your problem is not a one-line fix i can just tell you
[17:31:28] <leitz> siXy, the link sztanpet is great, but is "How to Write Go Code". I'm trying to solve a specific question as a way to build motivation to continue learning how to write Go code.
[17:33:02] <sztanpet> you might be jumping in at the deep-end, we have to reverse-engineer our way through what you havent done to know the exact issue you are facing
[17:34:15] <leitz> sztanpet, I believe you, and apologize for not knowing more. What I'm writing used to work, but Go has progressed and I haven't caught up yet.
[17:34:44] *** brooks85 is now known as brooks
[17:36:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:36:41] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:37:27] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:e91e:9a76:d6:dc58) (Quit: Client closed)
[17:38:37] *** Joins: fikran (~fikran@user/fikran)
[17:42:54] <siXy> You don't need to apologise for not knowing things. But the most effective way of fixing the gap is to read the info in that link. The most common form of answer you're going to get when asking about how do I do <x> in any programming language is a link to the relevent docs - that's just how it works, and you're gonna need to deal with that I'm afraid.
[17:46:15] *** Joins: Diego (~textual@user/diego)
[17:49:30] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:50:39] *** Joins: tar_xvf_ (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[17:51:05] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Ping timeout: 264 seconds)
[18:12:23] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Read error: Connection reset by peer)
[18:12:33] <leitz> Understood. I'm going to take a break and have a late breakfast with the wife, and then come back to this.
[18:12:43] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[18:13:18] <leitz> The "fix" isn't a one-line error I made, but a transition in Go that I haven't learned yet. So I need to back up, learn, and then move forward.
[18:14:47] *** Quits: fentanyl (~ryan@user/sapi01) (Quit: leaving)
[18:15:00] <leitz> The last time I wrote Go was almost exactly two years ago.
[18:15:13] <leitz> Modules were just being talked about, IIRC.
[18:25:42] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:28:49] *** Quits: xiongxin (~quassel@113.116.224.79) (Ping timeout: 252 seconds)
[18:29:01] *** Joins: xiongxin (~quassel@113.116.224.79)
[18:29:41] *** Quits: gggpkm (~gggpkm@172.105.122.124) (Ping timeout: 245 seconds)
[18:32:19] *** Joins: nostalgia (~nostalgia@69.51.171.201)
[18:38:10] *** Quits: dsrt^ (~dsrt@70.166.66.234) (Ping timeout: 252 seconds)
[18:38:29] *** Joins: dsrt^ (~dsrt@70.166.66.234)
[18:45:57] *** Joins: martinkennelly_ (~martinken@84.203.20.92)
[18:48:01] *** Quits: me-sudoer-dentne (~me-sudoer@2405:204:53ab:d5ed:583f:8b00:175b:9f05) (Quit: Leaving)
[18:51:51] *** Joins: CoolerY (~CoolerX@user/coolerx)
[18:55:13] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[18:55:46] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[18:56:57] *** Joins: silbermm (~silbermm@user/ahappydeath)
[19:01:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:01:33] *** Quits: Torr (~Torr@user/torr) (Read error: Connection reset by peer)
[19:02:43] *** Joins: Torr (~Torr@user/torr)
[19:03:53] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[19:05:40] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[19:09:16] *** Quits: xiongxin (~quassel@113.116.224.79) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:09:27] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Remote host closed the connection)
[19:09:39] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[19:12:01] *** Quits: CoolerY (~CoolerX@user/coolerx) (Ping timeout: 268 seconds)
[19:13:32] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[19:23:06] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[19:27:16] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:36:50] *** Joins: CoolerY (~CoolerX@user/coolerx)
[19:37:23] *** Quits: CoolerY (~CoolerX@user/coolerx) (Client Quit)
[19:42:33] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:42:53] *** Joins: amolith (~amolith@nixnet/founder/amolith)
[19:44:00] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[19:46:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[19:47:58] *** Joins: fikran (~fikran@user/fikran)
[19:52:25] <novns> a weird question
[19:52:28] <novns> https://play.golang.org/p/DI8Oa_NvmTq
[19:52:58] <novns> it shows hex-encoded sha256 sum for "1"
[19:53:27] <novns> but  echo -n 1 | sha256sum  shows a different checksum
[19:54:01] <novns> and  echo -n 1 | openssl dgst -sha256  shows it too
[19:55:10] <novns> hex.EncodeToString acts the same as fmt.Sprintf("%x",
[19:55:28] <novns> am I doing something wrong?
[19:59:18] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[20:00:33] <novns> even lengths are 1 byte different
[20:02:45] *** Joins: arinov (~arinov@31.142.50.8)
[20:06:25] <novns> ok, it should be sha256.Sum256
[20:06:49] <novns> .New.Sum() works somehow different
[20:06:58] <novns> *  .New().Sum() works somehow different
[20:10:24] <zsnes> uh..hmm
[20:11:45] <dragonmaster> Looks like New() returns a hash object and Sum() returns just the hash
[20:12:01] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[20:12:13] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Remote host closed the connection)
[20:12:39] <novns> but the hash is different
[20:12:47] <novns> I'm not sure why
[20:21:07] <siXy> novns: Because it isn't doing what it looks like it's doing. If you want to use sha254.New(), you then want to write to it, then call sum: https://play.golang.org/p/afuWcdmrEWk
[20:21:45] <novns> siXy, oh thank
[20:21:46] <j416> novns: Sum doesn't take data for hashing it takes something to append
[20:21:47] <novns> siXy, oh thanks
[20:22:11] <j416> prepend*
[20:22:16] <j416> (append to)
[20:22:56] <j416> there's also https://pkg.go.dev/crypto/sha256@go1.17.2#Sum256
[20:23:33] <novns> j416, yes, that's what I need actually
[20:23:39] <novns> thanks
[20:24:01] <novns> I have to sleep more
[20:24:11] <siXy> what you see in the first example is []byte{49, <the sha256sum of nil>}
[20:25:46] <siXy> It's kind of confusing and counter intuitive - there are actually good reasons why it's done this way, but the end result isn't great IMO
[20:25:48] <leitz> How open are the golang.org/doc folks to suggestions? Is there a repository?
[20:26:04] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[20:26:59] <novns> leitz, https://github.com/golang/go/issues?q=is%3Aopen+is%3Aissue+label%3ADocumentation
[20:27:16] <leitz> novns, thanks!
[20:35:06] *** Joins: iain (~iain@user/mrig)
[20:36:25] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Ping timeout: 252 seconds)
[20:36:33] *** Joins: klunk (~klunk@user/klunk)
[20:36:47] *** Joins: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[20:36:56] *** Joins: silbermm (~silbermm@user/ahappydeath)
[20:44:31] *** iain is now known as mrig
[20:45:05] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[20:46:52] *** Quits: klunk (~klunk@user/klunk) (Quit: Client closed)
[20:49:18] *** Quits: Diego (~textual@user/diego) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:50:47] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Ping timeout: 264 seconds)
[20:54:59] *** Quits: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Ping timeout: 264 seconds)
[20:56:51] *** Joins: gspbirel56 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[20:58:01] *** Joins: hornhack (~hackingho@user/hackinghorn)
[21:00:10] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:00:40] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 252 seconds)
[21:11:08] *** Joins: neurocyte0132889 (~neurocyte@45.14.189.246)
[21:11:08] *** Quits: neurocyte0132889 (~neurocyte@45.14.189.246) (Changing host)
[21:11:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:20:35] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[21:21:39] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[21:30:57] *** Joins: me-sudoer-dentne (~me-sudoer@2405:204:53ab:d5ed:583f:8b00:175b:9f05)
[21:31:43] *** Quits: me-sudoer-dentne (~me-sudoer@2405:204:53ab:d5ed:583f:8b00:175b:9f05) (Client Quit)
[21:34:46] <dostoyevsky2> Isn't go predestined for something like aws lambda.. because compiled code has such a quick startup time, and you also don't really need any additional libraries in your container, if they are all in go
[21:35:11] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[21:39:49] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a8be-5e8c-f3b4-9539.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:41:04] <dostoyevsky2> So basically a Dockerfile could look something like "COPY binary /app\nCMD /app"
[21:43:46] <Yukkuri> is there any way to extend go library packge (also gaining access to private types and fields) other than copying all the library sources?
[21:43:52] <ikke> no
[21:45:17] <siXy> dostoyevsky2: A lot of my go containers are FROM scratch, with often nothing much besides ca-certificate bundle and the binary itself
[21:45:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[21:47:19] *** Joins: fikran (~fikran@user/fikran)
[21:47:32] <Yukkuri> aha, aparently there is a way to gaing access using go:linkname
[21:53:47] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 240 seconds)
[21:58:10] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[21:58:45] *** Joins: ugjka (~ugjka@ugjka.net)
[22:01:03] <seebs> that lets you access things, but it does not let you "extend" them, and generally code that is doing things with stuff like `go:linkname` is Unstable At Best.
[22:03:11] *** Quits: noord (~noord@user/noord) (Remote host closed the connection)
[22:18:41] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a8be-5e8c-f3b4-9539.res6.spectrum.com)
[22:19:27] <leitz> In "How to write Go Code" (https://golang.org/doc/code), under "Your first program", when doing "go mod init example/user/hello", the 'example/user/hello' bit is just establishing a namespace for the module. Is that a correct perception?
[22:27:58] <siXy> leitz: It's the package name. Normally that's going to be github.com/leitz/cowsay or similar
[22:28:20] <ikke> siXy: you mean module name?
[22:31:18] *** Joins: chpar (~chpar@node-1w7jra2bl9lr0bh7i7hujaig8.ipv6.telus.net)
[22:31:43] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[22:33:05] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[22:33:50] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[22:34:56] <siXy> module path technically. But I'm trying to phrase it in familiar terms for someone who hasn't used modules before. Yes _technically_ it's the module path, but that's a good enough explanation for now.
[22:37:11] *** Quits: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e) (Ping timeout: 245 seconds)
[22:38:37] <leitz> ikke, siXy knows I'm brand new to the module/package thing.   ;)
[22:39:07] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[22:39:40] <ikke> Just be aware that there is a distinction (a module can consist of multiple packages)
[22:39:47] <ikke> but you are right that it's used as a namespace
[22:41:02] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[22:43:35] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 264 seconds)
[22:46:23] *** Joins: moook (~moook@wsip-70-164-104-167.sd.sd.cox.net)
[22:49:54] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:bce9:c0f9:a5eb:98ed)
[22:53:22] *** Joins: rcernin_ (~rcernin@124.190.139.235)
[22:54:41] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:bce9:c0f9:a5eb:98ed) (Ping timeout: 245 seconds)
[22:55:57] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a8be-5e8c-f3b4-9539.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:02:23] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[23:02:36] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[23:06:42] *** Quits: mei6 (~mei@user/mei) (Quit: mei6)
[23:14:30] *** Joins: internut (~internut@2601:280:4e00:7b70:a820:ea82:9ec5:ae0e)
[23:18:54] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 268 seconds)
[23:22:03] *** Joins: arcatech (~arcatech@user/arcatech)
[23:22:52] <leitz> My brain has melted. But I have been successful:    https://github.com/LeamHall/connect_mariadb/blob/master/connect_mariadb.go
[23:24:16] *** Quits: moook (~moook@wsip-70-164-104-167.sd.sd.cox.net) (Quit: Client closed)
[23:31:02] <novns> leitz, using Scan can be boring and uncomfortable in templates for example
[23:31:52] <leitz> novns, good url/book for Golang and sql based DBs? The tutorials I referenced seemed to stop at the basics.
[23:32:23] <novns> leitz, that's why I use my own chained functions where you can set destination once and every Next does scan for you
[23:32:36] <novns> https://github.com/novns/sumbur/blob/master/db/rows.go
[23:32:53] <novns> it's for postgresql, but you'll get the idea
[23:34:25] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[23:34:51] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[23:35:04] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Remote host closed the connection)
[23:37:03] <novns> leitz, and https://github.com/novns/sumbur/blob/master/db/db.go for database routines
[23:38:54] <novns> (db *DB) Query  doesn't execute the query itself, just sets up the Rows object
[23:39:24] <novns> because it would get stuck in context otherwise
[23:40:43] <novns> with Fields() you can set destinations, and Next() executes the query if called or the first time, and does Scan inside on every call
[23:40:51] *** Parts: Jackal-o-lantern (~quassel@173.195.145.98) (~Called off to Sentinal the Sand Temple~)
[23:41:56] <novns> and Get() is a shortcut for setting destinations, getting a single Row and closing the query
[23:45:37] *** Quits: nostalgia (~nostalgia@69.51.171.201) (Ping timeout: 252 seconds)
[23:45:51] <novns> leitz, and most of methods return the object itself do you can call them in chain, like db.Query(query, args...).Get(&destination)
[23:50:06] *** Quits: dansan (~daniel@75.81.148.51) (Remote host closed the connection)
[23:50:34] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 252 seconds)
[23:53:24] *** Joins: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net)
[23:54:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[23:56:40] *** Joins: fikran (~fikran@user/fikran)
