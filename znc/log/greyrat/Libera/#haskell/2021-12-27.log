[00:02:03] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:07:08] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:12:06] *** Quits: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 260 seconds)
[00:12:16] *** Joins: pavonia (~user@user/siracusa)
[00:18:50] *** Quits: amk (~amk@109.255.169.126) (Read error: Connection reset by peer)
[00:19:26] *** Joins: amk (~amk@109.255.169.126)
[00:21:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[00:22:46] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[00:25:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 240 seconds)
[00:27:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[00:27:42] *** Quits: stilgart (~Christoph@chezlefab.net) (Remote host closed the connection)
[00:27:45] *** Quits: enikar (~enikar@user/enikar) (Quit: WeeChat 3.0)
[00:28:44] *** Joins: enikar (~enikar@user/enikar)
[00:32:50] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[00:33:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[00:34:01] *** Joins: cheater (~Username@user/cheater)
[00:36:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:40:53] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[00:41:36] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[00:42:09] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[00:42:21] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:43:32] *** Quits: enikar (~enikar@user/enikar) (Quit: WeeChat 3.3)
[00:45:17] *** Joins: acidjnk (~acidjnk@p200300d0c7271e72b97741cdfe77e27f.dip0.t-ipconnect.de)
[00:51:33] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:53:37] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[00:55:32] *** Quits: zer0bitz (~zer0bitz@196.244.192.56) (Ping timeout: 240 seconds)
[00:57:22] *** Joins: Akiva (~Akiva@user/Akiva)
[01:00:14] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:10:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[01:12:37] *** Joins: zmt00 (~zmt00@user/zmt00)
[01:12:41] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[01:21:22] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[01:24:07] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:34:08] <zero> can someone quickly explain `some` and `many` from Control.Applicative?
[01:34:23] <EvanR> :t some
[01:34:24] <lambdabot> Alternative f => f a -> f [a]
[01:34:27] <EvanR> :t many
[01:34:28] <lambdabot> Alternative f => f a -> f [a]
[01:36:28] <EvanR> :t (<|>)
[01:36:28] <lambdabot> Alternative f => f a -> f a -> f a
[01:36:57] <geekosaur> they're meant for parsers and not very meaningful outside of that context
[01:37:11] <geekosaur> "some" is roughly a regexp +, "many" a regexp "*"
[01:38:49] <geekosaur> Applicative and Alternative are good for context free parsers, hence their inclusion
[01:39:41] <zero> :t some (Just 7)
[01:39:42] <lambdabot> Num a => Maybe [a]
[01:39:51] <zero> > some (Just 7)
[01:39:53] <lambdabot>  *Exception: <<loop>>
[01:39:56] <zero> ?
[01:40:24] <geekosaur> as I said, it's not very useful if not used in a parser
[01:40:30] <EvanR> > Just 7 <|> Just 9
[01:40:32] <lambdabot>  Just 7
[01:40:35] <geekosaur> the instances for Maybe, lists, etc. are kinda sad
[01:40:35] <EvanR> > Nothing <|> Just 9
[01:40:37] <lambdabot>  Just 9
[01:40:54] <zero> geekosaur: ok
[01:41:23] <geekosaur> well, maybe the one for lists since a list has the option of being a stream of tokens
[01:41:33] <geekosaur> Maybe is pretty useless for this though
[01:42:10] <geekosaur> basically it's only useful when the concept of "one or more" (some) or "zero or more" (many) applies, whereas Maybe is "zero or one"
[01:43:55] <geekosaur> so "some" and "many" can't rationally do anything for Maybe, so they bottom out
[01:46:43] *** Joins: deadmarshal (~deadmarsh@95.38.116.71)
[01:46:43] *** Joins: Pickchea (~private@user/pickchea)
[01:47:21] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[01:48:13] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:48:47] <EvanR> <|> for List seems to just do ++
[01:50:57] *** Quits: deadmarshal (~deadmarsh@95.38.116.71) (Ping timeout: 240 seconds)
[01:52:12] *** Joins: wroathe (~wroathe@user/wroathe)
[01:54:46] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 260 seconds)
[01:54:47] *** Quits: xff0x (~xff0x@2001:1a81:538d:1a00:d7e1:e1de:38a1:c28f) (Ping timeout: 268 seconds)
[01:55:33] *** Joins: xff0x (~xff0x@2001:1a81:538d:1a00:2c7a:ecf1:d00f:a986)
[02:01:54] *** Joins: vysn (~vysn@user/vysn)
[02:03:17] <dsal> Also <> -- many options if you like variety
[02:03:37] <EvanR> "haskell has too many operators"
[02:04:35] <Taneb> We've got less than the other language family where "monad" is a term of the art (APL/J etc where a monad is a verb with one argument)
[02:04:55] <dsal> I was refactoring and had <-=<< and was like... That should do somehing...
[02:05:16] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[02:05:27] *** Joins: web-50 (~web-50@185.202.32.108)
[02:06:54] <web-50> Is it a good practice to learn Abstract algebra and category theory with haskell? because I have heard definition of certain functions in haskell are not the same as what we theoretically learn in our courses.
[02:07:27] <dsal> Learning lots of different things lots of different ways is the only good practice.
[02:07:33] <dsal> Most mechanisms will lie to you.
[02:08:02] <sshine> web-50, that's a pretty open-ended question. you can learn abstract algebra if you like abstract algebra, and you'll find some concepts from there in Haskell, and you can go nuts with that, or you can code Haskell without doing much other than Functor, Monoid and Monad. :-P
[02:08:07] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[02:08:50] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[02:08:55] <EvanR> even then, you may never see any Monad other than IO
[02:09:16] <sshine> EvanR, you'd avoid lists, too? ;)
[02:09:23] <sshine> EvanR, and even Maybe? ;)
[02:09:43] <EvanR> rarely used list monad as such
[02:09:47] <web-50> what about theorem provers like lean? isn't it better to start with that?
[02:10:06] <sshine> web-50, that depends on your assumptions.
[02:10:07] <EvanR> haskell can't prove theorems so that won't help much
[02:10:27] <EvanR> at best you'll be frustrated at how illogical it is
[02:10:53] *** Quits: xff0x (~xff0x@2001:1a81:538d:1a00:2c7a:ecf1:d00f:a986) (Ping timeout: 252 seconds)
[02:11:01] <EvanR> haskell is for general purpose programming
[02:11:36] <web-50> can you recommend some valuable repos which uses haskell effectively to show its value compared to other languages?
[02:11:46] *** Joins: xff0x (~xff0x@2001:1a81:538d:1a00:d6e3:ac9b:2d1c:a9e)
[02:12:18] <dsal> That's not really how it works.
[02:12:49] <sshine> web-50, I think some of the more popular haskell projects outside of the Haskell bubble are: Pandoc, ShellCheck, git-annex
[02:12:52] <dsal> I have software that I've written in Haskell where Haskell made it *much* easier than implementations that exist in other languages, but I'm not sure how easy it is to see that from just looking at repos.
[02:13:02] <hpc> simulavr is haskell too
[02:14:07] <sshine> web-50, if you are more into theorem proving, you could also look into Agda2.
[02:14:37] <web-50> yea, agda also quite cool
[02:14:50] <dsal> I'm not completely convinced I could write software in Agda.
[02:15:01] <monochrom> There is a book "The Haskell Road to Logic, Math and Programming". But I haven't taken a look.
[02:15:16] <EvanR> agda is actually pretty good
[02:15:18] <sshine> dsal, I'm convinced that I could write Agda code that generated Haskell code as part of its proving.
[02:15:55] <sshine> dsal, now maybe there's a core of your Haskell codebase that you'd like proven invariants about, rather than property tests.
[02:16:19] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:16:25] * geekosaur programs in Haskell without knowing any of that advanced math…
[02:16:32] * sshine too
[02:16:36] * hpc too
[02:16:58] * sshine took part in an Agda workshop earlier this year, and it mostly consisted of placing 'refl' in the right places. :-D
[02:17:25] <EvanR> sorry I can't help but math (but it's not strictly necessary for haskell)
[02:18:09] <geekosaur> I've picked up a little bit *from* Haskell, but that's mostly from sitting around in here when the mathy types start talking
[02:18:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[02:18:26] <geekosaur> otherwise I know a little number theory
[02:18:33] <web-50> what I'm thinking is lean is also programming language and we can do alot with it because it's based on c++. google also has a training for haskell but I can't see much serious usage to fulfill my CV specially in favor of my theoretical knowledge to make something very cool as open-source
[02:19:01] <EvanR> lean is implemented in C++? 
[02:19:14] <web-50> yes
[02:19:20] <EvanR> how does that help 
[02:19:28] <monochrom> I don't think it matters.
[02:20:01] <monochrom> I know a statically typed, type-inferred programming language implemented in Lisp.
[02:20:03] <geekosaur> there's a C++ bot written in Haskell; that doesn't matter either
[02:20:52] <monochrom> And said programming language was in fact basically the opposite of Lisp on all fronts.
[02:21:13] <monochrom> Said programming language was just an old version of SML today.
[02:21:18] <geekosaur> for that matter there's a Haskell written in C (Hugs)
[02:22:07] <geekosaur> you can write anything in anything (turing equivalent) if you put your mind to it; that doesn't prove much
[02:22:58] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[02:23:13] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:23:18] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[02:23:20] *** Joins: Nolrai2 (~Nolrai2@73.240.1.39)
[02:24:24] *** Joins: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net)
[02:27:49] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[02:27:54] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[02:29:26] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:29:33] <sshine> web-50, it sounds like you want to give Lean a go.
[02:30:23] <web-50> yea, they have very good community too
[02:34:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:34:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:34:56] *** Joins: wroathe (~wroathe@user/wroathe)
[02:36:40] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:39:27] <Nolrai2> Lean is very cool.
[02:39:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:39:46] <Nolrai2> Is getting hmatrix to work on windows hard?
[02:40:37] <Nolrai2> The "matrix" libray is 1-indexed which is just painful to use.
[02:45:42] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:46:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:50:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[02:57:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[02:58:06] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[02:59:40] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:00:30] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.120)
[03:02:49] *** Quits: Alex_test (~al_test@178.34.160.99) (Ping timeout: 256 seconds)
[03:03:37] *** Quits: AlexZenon (~alzenon@178.34.160.99) (Ping timeout: 240 seconds)
[03:03:57] *** Quits: AlexNoo (~AlexNoo@178.34.160.99) (Ping timeout: 240 seconds)
[03:04:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Remote host closed the connection)
[03:06:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:06:49] *** zero is now known as zzz
[03:07:21] *** AlexNoo_ is now known as AlexNoo
[03:08:26] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[03:08:35] *** Joins: Alex_test (~al_test@178.34.163.120)
[03:09:06] *** Joins: AlexZenon (~alzenon@178.34.163.120)
[03:11:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[03:12:17] *** Quits: python476 (~user@88.160.31.174) (Ping timeout: 250 seconds)
[03:19:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:19:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:19:18] *** Joins: wroathe (~wroathe@user/wroathe)
[03:21:49] *** Joins: aallen (~aallen@072-182-074-253.res.spectrum.com)
[03:22:42] *** Quits: Guest|70 (~Guest|70@c-24-6-12-87.hsd1.ca.comcast.net) (Quit: Ping timeout (120 seconds))
[03:32:49] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:33:25] <EvanR> is there any state of the art on implicit configurations I'm not aware of... is reflection still the latest for that
[03:37:03] *** Quits: max22- (~maxime@2a01cb088335980093d703d768803864.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:37:29] <iphy> EvanR: https://github.com/iphydf/hs-cimple/commit/19e45c13acbaea04182674ec6be1db9f23369975
[03:38:46] <iphy> EvanR: so now I have Fix around everything, how can I put attributes on it?
[03:39:22] <iphy> I removed the Attr node
[03:39:26] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[03:40:06] <iphy> I guess I'll need something like Fix but with another property on it
[03:40:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[03:40:34] <iphy> can TraverseAst be made to work on any arbitrary Fix-like type?
[03:40:58] <iphy> maybe the Fix-like object needs a class that unwraps it
[03:41:17] <iphy> this will be a puzzle for another day :)
[03:43:16] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[03:48:49] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[03:49:37] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 240 seconds)
[03:53:12] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[03:53:56] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[03:54:52] <iphy> EvanR: I'm not sure what this refactoring bought me, what did I get for free?
[03:54:56] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[03:55:43] <iphy> can TraverseAst be automatic now?
[03:56:40] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Quit: fBNC - https://bnc4free.com)
[03:57:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[03:59:14] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 252 seconds)
[04:01:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[04:07:56] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:10:07] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[04:13:04] *** Joins: seiryn (~seiryn@2a01cb040147e000e4dbf764ff30bd96.ipv6.abo.wanadoo.fr)
[04:14:46] *** Quits: acidjnk (~acidjnk@p200300d0c7271e72b97741cdfe77e27f.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:18:34] <iphy> EvanR: what would a function look like that adds attributes to an existing AST wrapped in Fix?
[04:22:52] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[04:32:33] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[04:32:49] *** Quits: Nolrai2 (~Nolrai2@73.240.1.39) (Quit: Client closed)
[04:39:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:40:43] *** Quits: aallen (~aallen@072-182-074-253.res.spectrum.com) (Ping timeout: 256 seconds)
[04:41:49] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:47:56] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:57:40] *** Quits: Alleria (~textual@user/alleria) (Quit: Textual IRC Client: www.textualapp.com)
[04:59:55] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[05:00:24] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[05:00:32] *** Joins: falafel__ (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com)
[05:01:35] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[05:03:22] <energizer> "broadcast vs map" https://julialang.org/blog/2017/01/moredots/#broadcast_vs_map is there a function like broadcast in haskell?
[05:04:17] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 240 seconds)
[05:04:17] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 240 seconds)
[05:06:24] <dsal> energizer: I don't know Julia.  Can you describe what you're trying to do?
[05:06:39] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[05:06:40] <energizer> dsal: this is just idle curiosity
[05:07:21] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[05:07:41] <dsal> Well, sure, but I don't understand what broadcast is meant to do and don't have enough background in julia to figure out what it's trying to do.
[05:09:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[05:09:24] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[05:13:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[05:17:37] *** Quits: falafel__ (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com) (Ping timeout: 240 seconds)
[05:20:47] *** Quits: arahael (~arahael@203.158.51.1) (Quit: WeeChat 3.1)
[05:26:59] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:27:59] <Lycurgus> int-e, how did you get 208.94.116.26 for lyah dot com?
[05:30:23] <Lycurgus> in any case, it having been gone for sure for several days and with that (nearlyfreespeech) as the last hosting
[05:31:26] <Lycurgus> accepting author has moved on, doesn't care with > 80% confidence
[05:32:39] <Lycurgus> with the complementary (< 20%) likelihood the author will bring back at his expense
[05:37:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:39:10] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:39:22] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[05:47:34] *** Joins: machinedgod (~machinedg@24.105.81.50)
[05:47:44] *** Joins: drewr (~drew@user/drewr)
[05:47:52] *** Joins: AlexNoo_ (~AlexNoo@178.34.163.120)
[05:47:56] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[05:47:57] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[05:48:41] <EvanR> iphy, maybe Fix (AttrF `Compose` ExprF)
[05:48:48] *** Quits: AlexNoo (~AlexNoo@178.34.163.120) (Read error: Connection reset by peer)
[05:54:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[06:01:55] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[06:04:23] <otherwise> foldl starts at the left side of a list, and moves to the right through the list?
[06:05:01] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[06:05:49] <geekosaur> both foldl and foldr do. (you can't start at the "right end" of a list, and the notion is incompatible with foldr being able to handle infinite lists)
[06:06:03] <geekosaur> foldl left-associates; foldr right-associates
[06:06:12] <geekosaur> > foldr f z [a,b,c]
[06:06:13] <lambdabot>  f a (f b (f c z))
[06:06:18] <geekosaur> > foldl f z [a,b,c]
[06:06:19] <lambdabot>  f (f (f z a) b) c
[06:07:29] <geekosaur> if anything, left associativity means it's foldl that "starts at the right", as shown there
[06:09:18] <dsal> otherwise: foldr works with infinite lists.  It’s a good default when you don’t care
[06:10:45] <dsal> > foldr (\x o -> 3) 5 [11..]
[06:10:47] <lambdabot>  3
[06:11:29] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[06:12:06] <geekosaur> foldr works more naturally with lists because they're right-associative to begin with
[06:12:11] <geekosaur> % :info (:)
[06:12:11] <yahb> geekosaur: type [] :: * -> *; data [] a = ... | a : [a]; -- Defined in `GHC.Types'; infixr 5 :
[06:13:38] *** Parts: BrokenClutch (~pioneer@2804:d41:c2a7:d800:e627:b00b:2c62:134) ()
[06:14:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[06:19:20] *** Quits: xff0x (~xff0x@2001:1a81:538d:1a00:d6e3:ac9b:2d1c:a9e) (Ping timeout: 268 seconds)
[06:20:59] *** Joins: xff0x (~xff0x@2001:1a81:53c9:5600:a4b4:57a2:f2c0:c793)
[06:21:31] *** Quits: seiryn (~seiryn@2a01cb040147e000e4dbf764ff30bd96.ipv6.abo.wanadoo.fr) (Quit: WeeChat 3.3)
[06:21:32] <otherwise> implementing map with foldr:
[06:21:42] <otherwise> > let mapFoldr f xs = foldr (\x acc -> f x : acc) [] xs in mapFoldr (+1) [1..5]
[06:21:44] <lambdabot>  [2,3,4,5,6]
[06:22:01] <EvanR> with eager evaluation, foldr would cause f c z to "happen first", in foldl f z a "happens first", as shown with those expansions from lambdabot
[06:22:23] <otherwise> then with foldr:
[06:22:25] <otherwise> > let mapFoldl f xs = foldl (\acc x -> f x : acc) [] xs in mapFoldl (+1) [1..5]
[06:22:26] <lambdabot>  [6,5,4,3,2]
[06:22:34] <otherwise> it is reversed
[06:22:36] <EvanR> with lazy evaluation it's neither of those
[06:23:42] <otherwise> hmm okay, i'll mull it over
[06:24:22] <EvanR> in particular the expansions don't properly explain the operational aspect of foldl
[06:24:29] <EvanR> (lazy version)
[06:25:06] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[06:26:06] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[06:28:48] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:29:17] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[06:30:55] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[06:34:42] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:06] <iphy> EvanR: hm interesting
[06:39:46] <otherwise> how do I make ghci do:
[06:39:48] <otherwise> > foldl f z [a,b,c]
[06:39:49] <lambdabot>  f (f (f z a) b) c
[06:40:19] <xsperry> :t foldl f z [a,b,c]
[06:40:20] <lambdabot> Expr
[06:40:24] <xsperry> @hoogle Expr
[06:40:25] <lambdabot> Test.Tasty.Patterns.Types data Expr
[06:40:25] <lambdabot> module Text.Parsec.Expr
[06:40:25] <lambdabot> module Text.ParserCombinators.Parsec.Expr
[06:40:26] <otherwise> import Data.lambdabot or something?
[06:44:50] <xsperry> it is a separate library, but I can't recall its name.
[06:46:19] <otherwise> after doing "import Text.ParserCombinators.Parsec.Expr" now my prelude is "Prelude Text.ParserCombinators.Parsec.Expr> "
[06:46:45] <otherwise> and :browse gives something new
[06:47:00] <xsperry> no that isn't it, Parsec is a parsing package
[06:47:43] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:48:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:51:36] <dsal> > f [Expr]
[06:51:36] <otherwise> dsal foldl does not work on infinite lists because there is not an element to start moving left from (last item in the list)? I hope thats the case cause it makes sense to me.
[06:51:38] <lambdabot>  error:
[06:51:38] <lambdabot>      • Data constructor not in scope: Expr
[06:51:38] <lambdabot>      • Perhaps you meant variable ‘expr’ (imported from Debug.SimpleReflect)
[06:51:49] <dsal> Simple reflect
[06:52:18] <dsal> otherwise: yeah, you can see it in the expansion above
[06:52:36] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:53:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[06:53:17] *** Joins: Rum (~bourbon@user/rum)
[07:04:00] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:04:00] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:04:00] *** finn_elija is now known as FinnElija
[07:04:06] <iphy> EvanR: "well at least you get map and fold for free" <- where is map?
[07:06:15] <jackson99> otherwise, did you figure out list of functions issue you had earlier today?
[07:10:27] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[07:10:56] <int-e> lyxia: I googled for a cached DNS query (since there are websites that do DNS queries)
[07:11:23] <int-e> oh no
[07:11:37] <int-e> that was for Lycurgus who left
[07:11:59] <otherwise> jackson99 no
[07:12:33] <jackson99> :t map (*) [1,2,3,4]
[07:12:33] <lambdabot> Num a => [a -> a]
[07:12:35] <otherwise> I still don't know how to use take on (map (*) [0..5])
[07:12:37] <otherwise>  or any list
[07:12:52] <jackson99> > map ($10) (map (*) [1,2,3,4])
[07:12:53] <lambdabot>  [10,20,30,40]
[07:12:54] <otherwise> I can get it to evaluate the head of a list
[07:13:13] <otherwise> hmm
[07:13:15] <jackson99> or with lambda
[07:13:23] <jackson99> > map (\f -> f 10) (map (*) [1,2,3,4])
[07:13:25] <lambdabot>  [10,20,30,40]
[07:13:35] <jackson99> or you can just do:
[07:13:58] <jackson99> > map (*10) [1,2,3,4]
[07:14:00] <lambdabot>  [10,20,30,40]
[07:14:11] <jackson99> unless the goal was specifically to build a list of functions for some reason
[07:16:59] <otherwise> okay, i'll see if I can not make take work on (map (*) [0..])
[07:18:18] *** Joins: aallen (~aallen@072-182-074-253.res.spectrum.com)
[07:18:45] <otherwise> > let funList = map (*) [0..] in take 3 (map ($10) funList)
[07:18:46] <lambdabot>  [0,10,20]
[07:18:58] <otherwise> dear god. that took hours to make work
[07:19:06] <otherwise> 100's of failed attempts
[07:19:21] <otherwise> thank you dearly
[07:20:12] *** Quits: aallen (~aallen@072-182-074-253.res.spectrum.com) (Client Quit)
[07:22:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[07:22:54] <otherwise> > let funList n m = take n (map ($m) (map (*) [0..])) in funList 10 3
[07:22:55] <lambdabot>  [0,3,6,9,12,15,18,21,24,27]
[07:23:13] <otherwise> awwww, how refreshing
[07:23:54] <jackson99> do you know what $ is?
[07:24:36] <otherwise> precedence demoter
[07:24:45] <jackson99> > let funList n m = take n (map (*m) [0..])) in funList 10 3
[07:24:46] <otherwise> or something like that
[07:24:47] <lambdabot>  <hint>:1:42: error: parse error on input ‘)’
[07:24:51] <jackson99> > let funList n m = take n (map (*m) [0..]) in funList 10 3
[07:24:53] <lambdabot>  [0,3,6,9,12,15,18,21,24,27]
[07:24:57] <jackson99> no need for double map
[07:26:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[07:26:46] <otherwise> right, but that is skipping the whole notion of "I have a list of partial application functions, how do I enter it and evaluate the function"
[07:27:16] <otherwise> I agree, for that line of code, skipping the map (*) is the logical thing to do
[07:27:35] <iphy> EvanR: https://github.com/TokTok/hs-cimple/blob/master/src/Language/Cimple/Pretty.hs#L389-L397 how would something like this work with foldFix?
[07:27:45] <jackson99> use a lambda then, easier to understand than $, since you don't seem to know what $ is
[07:28:07] <otherwise> But I was approaching as if I had a preexisting [(0*), (1*), ..] and then using take on it
[07:28:16] <otherwise> haha
[07:28:16] <iphy> https://github.com/iphydf/hs-cimple/blob/fix/src/Language/Cimple/Pretty.hs#L387-L395 <- here is the Fix version
[07:28:54] *** Quits: td_ (~td@94.134.91.110) (Ping timeout: 260 seconds)
[07:28:59] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[07:30:00] <jackson99> that's not a knock on you, $ is confusing at first
[07:30:13] <dsal> :src ($)
[07:30:18] <dsal> @src ($)
[07:30:18] <lambdabot> f $ x = f x
[07:30:24] *** Joins: td_ (~td@muedsl-82-207-238-094.citykom.de)
[07:30:35] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[07:30:49] *** Joins: mbuf (~Shakthi@122.178.203.86)
[07:32:58] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[07:32:59] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:33:28] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[07:33:38] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:34:57] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:37:11] <otherwise> When I try to read :doc in ghci, all the @ symbols throw me off, what do they mean, or better yet, how to I translate it into an english sentence? the same way I'd translate 3+2 into Three plus two, for ex...
[07:37:47] <dsal> I've never used that feature.  I should try it.
[07:38:14] <dsal> Oh, it's just haddock stuff.
[07:38:52] <otherwise> > :doc $
[07:38:53] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[07:38:56] <c_wraith> Yeah, that's a major issue with :doc right now
[07:39:09] <dsal> % :doc ($)
[07:39:09] <yahb> dsal:  Application operator. This operator is redundant, since ordinary; application @(f x)@ means the same as @(f '$' x)@. However, '$' has; low, right-associative binding precedence, so it sometimes allows; parentheses to be omitted; for example:; > f $ g $ h x = f (g (h x)); It is also useful in higher-order situations, such as @'map' ('$' 0) xs@,; or @'Data.List.zipWith' ('$') fs xs@.; Note th
[07:39:18] <c_wraith> there needs to be some effort made in rendering haddock to plain text
[07:39:25] <otherwise> its probably better that way, it would just blow up the chat with lots of lines
[07:39:41] <otherwise> oh, there it is
[07:40:03] <otherwise> yea, all those @ symbols!
[07:40:07] <c_wraith> otherwise: haddock uses @ to start and end inline code formatting
[07:40:13] <c_wraith> they don't mean anything
[07:41:22] <c_wraith> or rather, they don't mean anything as code, because they're markup.  Not code.  They're rendering instructions that :doc ignores and decides to print instead
[07:42:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:42:48] <c_wraith> Same as the ' around identifiers - haddock for "generate a link to this symbol"
[07:43:12] <otherwise> got it
[07:43:50] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[07:50:51] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[07:51:04] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[07:51:58] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:52:45] <otherwise>  jackson99 and c_wraith thank you :)
[07:55:58] *** Quits: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net) ()
[07:56:55] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[08:00:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:00:27] *** Joins: deadmarshal (~deadmarsh@95.38.116.71)
[08:08:30] *** Joins: zebrag (~chris@user/zebrag)
[08:10:07] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[08:10:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:19:09] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[08:19:12] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:19:39] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[08:20:14] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[08:22:53] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.4)
[08:24:02] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[08:25:09] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[08:29:04] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[08:30:17] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:30:19] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: leaving)
[08:30:34] *** Joins: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net)
[08:30:34] *** Quits: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net) (Changing host)
[08:30:34] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[08:34:05] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[08:34:27] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[08:35:17] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[08:36:06] *** Joins: jinsun (~quassel@user/jinsun)
[08:37:35] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[08:40:12] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[08:44:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[08:50:50] <EvanR> iphy, map is Functor
[08:53:18] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: Lost terminal)
[08:54:02] *** Joins: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net)
[08:54:02] *** Quits: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net) (Changing host)
[08:54:02] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[08:56:02] <[itchyjunk]> :i
[08:56:04] <[itchyjunk]> :o
[08:56:41] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[08:59:50] <jackson99> % :i Functor
[08:59:50] <yahb> jackson99: type Functor :: (* -> *) -> Constraint; class Functor f where; fmap :: (a -> b) -> f a -> f b; (<$) :: a -> f b -> f a; {-# MINIMAL fmap #-}; -- Defined in `GHC.Base'; instance [safe] Functor m => Functor (WriterT w m) -- Defined in `Control.Monad.Trans.Writer.Lazy'; instance [safe] Functor m => Functor (StateT s m) -- Defined in `Control.Monad.Trans.State.Lazy'; instance [safe] Functor m => Func
[09:01:04] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[09:01:30] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:03:40] *** Joins: alfonsox (~quassel@103.92.42.104)
[09:04:45] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[09:05:30] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Ping timeout: 260 seconds)
[09:06:06] <alfonsox> is learnyouhaskell.com down ?
[09:06:45] *** Joins: otherwise (~otherwise@2601:602:880:90f0:7490:2afa:37a4:523b)
[09:06:59] <dsal> I've heard resolution complaints today.
[09:07:36] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:08:00] <jackson99> it is down
[09:08:08] <jackson99> but you can read it in here. https://web.archive.org/web/20211204094509/http://learnyouahaskell.com/
[09:09:44] <alfonsox> learnyouahaskell.com’s server IP address could not be found. This is what I am getting in chrome.
[09:10:14] <alfonsox> Thank you @jackson99. I'll use web.archive for now.
[09:12:27] <alfonsox> Anyone have authors email ? bonus at learnyouahaskell dot com ( mentioned at site), but not sure if email will reach to him due to name resolution error.
[09:19:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:19:26] <EvanR> maybe it's time for the next learn you a haskell xD
[09:21:03] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[09:26:30] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:35:26] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:35:26] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:35:26] *** Joins: wroathe (~wroathe@user/wroathe)
[09:37:49] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[09:37:49] *** Joins: nattiestnate (~nate@182.3.37.200)
[09:38:46] <otherwise> Are you writing EvanR ?
[09:39:13] <otherwise> big public irc book reveal?
[09:39:48] <EvanR> I can't justify that, I don't know enough haskell
[09:40:26] <EvanR> Besides, I think learning haskell would be better as an old school text adventure (with graphics)
[09:41:31] <otherwise> Yes, I agree about that format, that should be the next standard. I think haskell.org homepage tutorial is a very rudimentary version of that. It is good and could be expanded creatively
[09:42:04] <EvanR> as always the key is collecting the proper exercises
[09:43:50] <otherwise> well the storyline would somewhat dictate that. As long as you keep to the story line, the exercises would just fall in place. (easier said than realized...)
[09:45:08] <EvanR> one of the two is much harder to come up with
[09:46:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:49:24] <otherwise> hmm, I just realized all the haskell I've done is dealing with lists. Is there a way to write a nXm matrix?
[09:49:35] <EvanR> reflection has a weird side effect... if you have a top level thing that is like foo :: Given MyConfig => Other -> Stuff, then :t foo won't work in ghci. Though foo will still work "if used" correctly
[09:49:59] <EvanR> no instance for Given MyConfig
[09:50:13] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[09:50:20] <dsal> You could do something along the lines of AoC, but suggest particular things for the solution.
[09:50:41] <EvanR> otherwise, I've done a few of those. Also available in libraries
[09:50:58] <dsal> otherwise: There are arrays with arbitrary indexes and Data.Vector.  And probably countless actual matrix libraries.
[09:52:51] <dsal> I end up using Maps a lot.
[09:53:57] <EvanR> specifically "n x m" matrix is kind of calling for the n and m to be in the type, which you can do
[09:54:28] <EvanR> and would be great
[09:55:03] <EvanR> the blog "graphical linear algebra" makes you really want those in the type
[09:56:12] <EvanR> if you're doing graphics maybe you can get away assuming everything is 4x4
[09:56:32] *** Joins: notzmv (~zmv@user/notzmv)
[09:58:41] *** Joins: farzad (~farzad@5.121.10.41)
[10:00:36] <otherwise> let split (x:xs) = if length xs < 7 then [] else (take 7 (x:xs)): split (tail xs) in split [1..21]
[10:00:41] <otherwise> > let split (x:xs) = if length xs < 7 then [] else (take 7 (x:xs)): split (tail xs) in split [1..21]
[10:00:43] <lambdabot>  [[1,2,3,4,5,6,7],[3,4,5,6,7,8,9],[5,6,7,8,9,10,11],[7,8,9,10,11,12,13],[9,10...
[10:01:01] <otherwise> oh its too big..
[10:01:27] <otherwise> > let split (x:xs) = if length xs < 3 then [] else (take 3 (x:xs)): split (tail xs) in split [1..15]
[10:01:29] <lambdabot>  [[1,2,3],[3,4,5],[5,6,7],[7,8,9],[9,10,11],[11,12,13]]
[10:01:45] <EvanR> chunksOf 3
[10:02:00] <xerox> > takeWhile (not . null) . unfoldr (Just . splitAt 4) $ [1..10]
[10:02:02] <lambdabot>  [[1,2,3,4],[5,6,7,8],[9,10]]
[10:02:27] <EvanR> > chunksOf 3 [1..15]
[10:02:28] <lambdabot>  [[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15]]
[10:03:18] <otherwise> chunksOf is not in my ghci
[10:03:34] <EvanR> I think it's from a package... called split
[10:03:49] <EvanR> that is apparently loaded
[10:08:38] <dsal> @hoogle chunksOf
[10:08:39] <lambdabot> Data.Sequence chunksOf :: Int -> Seq a -> Seq (Seq a)
[10:08:39] <lambdabot> Data.Sequence.Internal chunksOf :: Int -> Seq a -> Seq (Seq a)
[10:08:39] <lambdabot> Data.Text chunksOf :: Int -> Text -> [Text]
[10:11:14] <EvanR> Data.List.Split
[10:16:44] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[10:17:45] <otherwise> > let mapIn = map (1 -) (head (split[1..15]))
[10:17:47] <lambdabot>  <no location info>: error:
[10:17:47] <lambdabot>      not an expression: ‘let mapIn = map (1 -) (head (split[1..15]))’
[10:18:06] <EvanR> in what
[10:18:54] <otherwise> I dont think it would work anyway cause I forgot lambdabot doesnt know what I defined as split
[10:19:09] <EvanR> yeah
[10:22:17] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:23:07] *** Joins: fef (~thedawn@user/thedawn)
[10:26:47] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[10:28:13] <otherwise> is it offensive that Haskell is not on codeacademy?
[10:30:10] *** Joins: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com)
[10:31:02] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[10:32:16] <EvanR> They have two columns of 7 languages. Making 3 columns of 5 languages may be too much to ask for their web design
[10:32:28] <dsal> That looks like a vocational thing.
[10:32:37] <dsal> Not learning to be better, but learning to make money.
[10:32:54] <EvanR> code academy is who's making the money here
[10:33:43] <otherwise> is haskell for poor people?
[10:34:08] <EvanR> it's for anyone who is interested
[10:36:15] <dsal> Haskell is for making blockchains and NFTs.
[10:36:37] <dsal> It's just generally a great language that makes programming fun and easy.
[10:37:01] <dsal> It's used in a few different industries, but it's best when it's not industry specific.
[10:37:04] <EvanR> I just appointed dsal VP of sales and marketing for haskell
[10:37:16] <dsal> haha
[10:37:52] <EvanR> You just have a really good attitude and strong reality distortion field
[10:38:03] <dsal> Sounds right.
[10:38:09] <otherwise> Cardano is using haskell, apparently for blockchain tech
[10:38:16] <dsal> I've had a lot of large codebases, though.
[10:38:23] <otherwise> alluded by VP of sales
[10:38:49] <dsal> otherwise: Yeah.  A friend of mine into that stuff tried to pull me in a while back for smart contracts and stuff.  It was horrifying.  I told him they needed people with Haskell experience.  Now it's a brain drain as they suck in all the people with haskell experience.
[10:39:07] <dsal> Getting a job doing Haskell that's *not* blockchain related is a bit harder now.
[10:40:36] <dsal> Of course, that's assuming you *want* that kind of job.  Knowing Haskell makes you a better programmer in general.  I did a lot of non-Haskell professional programming while doing all my personal projects in Haskell.
[10:41:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:42:01] *** Joins: enikar (~enikar@user/enikar)
[10:42:48] <otherwise> interesting
[10:43:19] <EvanR> knowing C is also good. Also not on code academy
[10:43:31] <EvanR> also hard to get a job in
[10:43:55] <dibblego> it's way easier
[10:44:25] <dibblego> There were about 5 jobs using Haskell in the world. It was easy to make 10 more. Today, don't even have to make them.
[10:46:10] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[10:49:11] *** Quits: nattiestnate (~nate@182.3.37.200) (Ping timeout: 256 seconds)
[10:49:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:51:44] *** Joins: nattiestnate (~nate@182.3.37.200)
[10:51:48] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[10:54:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[10:54:59] *** Joins: vglfr (~vglfr@88.155.28.231)
[10:56:33] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:07:12] <otherwise> trying to implement last, using foldl1, with an edge condition that returns [] if an infinite list is input.... https://paste.tomsmeding.com/xmlgcXmF
[11:07:45] <dibblego> you won't
[11:08:05] <otherwise> not possible?
[11:08:14] <dibblego> you going to count to infinity to check?
[11:08:23] <otherwise> if i have to
[11:08:29] <dibblego> ok, I'll wait
[11:08:33] <otherwise> done
[11:09:09] <dibblego> I've gone to a party while I wait, but if I were a type-checker instead...
[11:09:35] *** Quits: vglfr (~vglfr@88.155.28.231) (Quit: Quit)
[11:09:47] *** Joins: vglfr (~vglfr@88.155.28.231)
[11:11:07] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[11:12:12] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[11:13:21] *** Joins: jinsun (~quassel@user/jinsun)
[11:15:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[11:17:47] *** Quits: nattiestnate (~nate@182.3.37.200) (Ping timeout: 268 seconds)
[11:20:06] *** Joins: nicbk (~nicbk@user/nicbk)
[11:20:09] <nicbk> #openbsd
[11:21:02] *** Joins: coolnickname (uid531864@user/coolnickname)
[11:27:14] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[11:27:14] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:30:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[11:30:00] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:30:31] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[11:30:54] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:31:32] *** Joins: vysn (~vysn@user/vysn)
[11:32:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[11:33:05] *** Quits: phma (phma@2001:5b0:211c:1148:9e4d:7400:733a:b6f1) (Read error: Connection reset by peer)
[11:33:17] *** Quits: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com) (Ping timeout: 240 seconds)
[11:33:32] *** Joins: phma (phma@2001:5b0:211c:1148:bf01:ab8f:863f:c9a8)
[11:36:05] *** Joins: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com)
[11:41:38] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:43:17] *** Joins: talismanick (~talismani@2601:644:8500:8350::94b)
[11:43:51] <talismanick> Is there a resource for "minimal Nix" (just enough needed to manage Haskell packages), or do I need to learn it in full?
[11:47:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:54:44] *** Joins: nattiestnate (~nate@182.3.37.200)
[11:54:57] *** Quits: n3rdy1 (~n3rdy1@2601:281:c780:a510:84eb:b2e:7b61:4002) (Ping timeout: 240 seconds)
[11:57:22] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:01:50] *** Quits: farzad (~farzad@5.121.10.41) (Remote host closed the connection)
[12:02:00] *** Joins: Nate[m]12 (~m52957mat@2001:470:69fc:105::1:591a)
[12:03:22] *** Quits: snake (~snake@user/snake) (Quit: Quitting)
[12:04:17] *** Joins: farzad (~farzad@5.121.10.41)
[12:06:31] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[12:08:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[12:11:53] *** Joins: jespada (~jespada@87.74.33.157)
[12:12:01] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
[12:12:55] *** Joins: snake (~snake@user/snake)
[12:13:21] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:18:16] *** Joins: altern (~Sergii@altern.corbina.com.ua)
[12:20:06] <altern> Hi! How to properly convert the list of files into a recursive record in Haskell? https://stackoverflow.com/questions/70490845/how-to-properly-convert-the-list-of-files-into-a-recursive-record-in-haskell
[12:20:15] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:27:18] *** Joins: acidjnk (~acidjnk@p200300d0c7271e72b97741cdfe77e27f.dip0.t-ipconnect.de)
[12:27:51] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:30:20] <int-e> https://nitter.fdn.fr/gone_things/status/1475245068994838528#m
[12:30:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[12:38:32] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[12:47:42] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:42] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:45] *** allbery_b is now known as geekosaur
[12:52:18] *** Quits: nattiestnate (~nate@182.3.37.200) (Read error: Connection reset by peer)
[12:53:00] *** Joins: nattiestnate (~nate@182.2.164.13)
[12:57:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:57:22] *** Joins: KvL (~KvL@user/KvL)
[13:02:15] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[13:05:11] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[13:05:35] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[13:06:51] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:09:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-9993-a5d6-8c3d-400e.res6.spectrum.com) (Ping timeout: 240 seconds)
[13:12:06] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[13:12:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:15:13] <otherwise> I'm trying Day 1 at adventofCode, and the provided input is a large list of numbers, stacked in a vertical collumn, but haskell cannot read it as a list. I managed to add a comma at the end of each number in vim, but I can't get vim to delete the line break in front of every number at one, to make all numbers be on the same line. Any tips?
[13:16:18] <Rembane> :i lines 
[13:16:22] <Rembane> Meh
[13:16:23] <Rembane> :t lines 
[13:16:24] <lambdabot> String -> [String]
[13:16:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[13:16:36] <Rembane> > lines "1\n2\n3\n4"
[13:16:37] <lambdabot>  ["1","2","3","4"]
[13:16:54] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 276 seconds)
[13:27:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:28:59] *** Quits: nattiestnate (~nate@182.2.164.13) (Ping timeout: 256 seconds)
[13:32:33] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:46:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[13:49:46] *** Joins: jinsun__ (~quassel@user/jinsun)
[13:50:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[13:51:37] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[13:53:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:55:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[13:55:04] *** Lord_of_Life_ is now known as Lord_of_Life
[13:56:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[13:56:41] *** Joins: Rum (~bourbon@user/rum)
[13:57:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[14:01:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 240 seconds)
[14:02:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[14:10:27] *** Joins: rito_ (~rito_gh@45.112.243.219)
[14:12:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:13:48] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[14:16:17] *** Joins: nattiestnate (~nate@182.2.164.13)
[14:17:02] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[14:17:39] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[14:18:17] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:18:44] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[14:21:03] *** Quits: nattiestnate (~nate@182.2.164.13) (Read error: Connection reset by peer)
[14:23:10] *** Joins: nattiestnate (~nate@114.122.107.243)
[14:23:59] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[14:28:45] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[14:28:58] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[14:31:19] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[14:33:53] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[14:36:17] *** Joins: acode (~acode@151.65.31.181)
[14:36:53] *** Quits: nattiestnate (~nate@114.122.107.243) (Quit: WeeChat 3.4)
[14:37:13] *** Joins: nattiestnate (~nate@114.122.105.227)
[14:39:27] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[14:40:12] <acode> Following up on a discussion from a few days ago, has anyone figured out what happened to the learn you a haskell website?
[14:41:49] <geekosaur> still only conjecture, no definitive answer
[14:42:06] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[14:42:22] <iphy> https://github.com/iphydf/hs-cimple/blob/fix/src/Language/Cimple/Pretty.hs#L498-L502 how would one express this using recursion-strategies or data-fix?
[14:42:59] <acode> I see. Hopefully it'll be back
[14:43:17] *** Quits: vglfr (~vglfr@88.155.28.231) (Ping timeout: 252 seconds)
[14:47:09] *** Quits: acidjnk (~acidjnk@p200300d0c7271e72b97741cdfe77e27f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[14:47:28] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[14:50:37] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[14:51:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:52:20] *** Joins: jinsun (~quassel@user/jinsun)
[14:52:31] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[14:52:37] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.3)
[14:52:52] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[14:53:37] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 240 seconds)
[14:53:40] *** AlexNoo_ is now known as AlexNoo
[14:55:12] *** Joins: noddy (~user@user/noddy)
[14:55:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[14:57:02] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 252 seconds)
[14:57:48] *** Joins: KvL (~KvL@user/KvL)
[14:59:07] *** Quits: KvL (~KvL@user/KvL) (Client Quit)
[15:00:53] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:02:51] *** Joins: max22- (~maxime@2a01cb08833598007287589cfe6298ed.ipv6.abo.wanadoo.fr)
[15:04:50] *** Joins: KvL (~KvL@user/KvL)
[15:05:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[15:07:19] *** Quits: web-50 (~web-50@185.202.32.108) (Quit: Client closed)
[15:08:23] *** Quits: max22- (~maxime@2a01cb08833598007287589cfe6298ed.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[15:10:36] *** Joins: __monty__ (~toonn@user/toonn)
[15:10:45] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[15:10:45] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[15:10:45] *** Joins: wroathe (~wroathe@user/wroathe)
[15:13:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:13:42] *** Joins: zer0bitz (~zer0bitz@185.112.82.230)
[15:15:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[15:16:48] *** Joins: vglfr (~vglfr@88.155.28.231)
[15:18:09] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[15:18:56] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[15:23:14] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 268 seconds)
[15:24:54] <otherwise> do you use vim (in terminal) or something else for writing haskell programs?
[15:25:17] <iphy> I use vim in terminal
[15:25:20] <xerox> me too
[15:25:37] <iphy> vscode is pretty good these days though
[15:26:32] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:27:08] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:27:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[15:27:49] <otherwise> I dont have a lot of experience, but I use vim in terminal, although it is a little daunting cause there are so many quick commands. I see other people in videos now and again and they are blazing through their code jumping around like a rabbit... kind of a steep learning curve to get proficient
[15:29:18] * Vq uses Emacs in X11
[15:30:53] <Vq> I don't use that many fancy features for Haskell development though.
[15:31:24] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[15:31:40] <Vq> Just plain haskell-mode + stylish-haskell on save.
[15:34:10] *** Quits: KvL (~KvL@user/KvL) (Quit: KvL)
[15:35:12] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:35:50] <otherwise> hmm Emacs eh
[15:37:33] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[15:38:55] <otherwise> https://paste.tomsmeding.com/0qa2v50r
[15:39:48] <otherwise> interested in feedback, especially regarding the stupid long list. There must be a better way to deal with it.
[15:40:20] <otherwise> from AoT, day 1 part 1
[15:42:16] <otherwise> maybe the long list can live in a separate .hs file, and the main.hs file calls the list file? I haven't done anything like that yet...
[15:42:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:43:51] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:47:16] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:48:21] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[15:51:52] <alfonsox> write input to .txt file
[15:53:04] <alfonsox> use "getContents" to read input file.
[15:55:06] *** Joins: neceve (~quassel@2.26.93.228)
[15:57:26] <otherwise> alfonsox i'll give that a try now
[16:00:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[16:00:59] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[16:01:01] *** Quits: m1dnight (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[16:01:38] *** Joins: m1dnight (~christoph@christophe.dev)
[16:03:00] *** Joins: max22- (~maxime@2a01cb0883359800eadee1731c9704da.ipv6.abo.wanadoo.fr)
[16:04:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 240 seconds)
[16:05:47] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 250 seconds)
[16:06:17] <xerox> :t \x y f g h -> do { x' <- f x; y' <- g y; h x' y' }
[16:06:18] <lambdabot> Monad m => t1 -> t2 -> (t1 -> m t3) -> (t2 -> m t4) -> (t3 -> t4 -> m b) -> m b
[16:06:24] <xerox> :t \x y f g h -> do { h <*> f x <*> g y }
[16:06:25] <lambdabot> Applicative f => t1 -> t2 -> (t1 -> f a1) -> (t2 -> f a2) -> f (a1 -> a2 -> b) -> f b
[16:06:44] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[16:06:52] <xerox> is there a way to use the second style but achieving the first's objective, with a h :: _ -> _ -> m r
[16:08:38] <tomsmeding> :t \x y f g h -> do { h <$> f x <*> g y
[16:08:39] <lambdabot> error:
[16:08:39] <lambdabot>     parse error (possibly incorrect indentation or mismatched brackets)
[16:08:42] <tomsmeding> :t \x y f g h -> do { h <$> f x <*> g y }
[16:08:43] <lambdabot> Applicative f => t1 -> t2 -> (t1 -> f a1) -> (t2 -> f a2) -> (a1 -> a2 -> b) -> f b
[16:09:09] <alfonsox> otherwise - readFile would be better. Check Files and Stream section on https://web.archive.org/web/20211102000749/http://learnyouahaskell.com/input-and-output#files-and-streams
[16:10:06] <tomsmeding> :t \x y f g h -> join (h <$> f x <*> g y)
[16:10:07] <lambdabot> Monad m => t1 -> t2 -> (t1 -> m a1) -> (t2 -> m a2) -> (a1 -> a2 -> m a3) -> m a3
[16:11:12] *** Joins: Flow (~none@gentoo/developer/flow)
[16:11:22] <xerox> tomsmeding: alright :)
[16:11:42] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:11:46] <tomsmeding> feels like join (fmap f x) should be simplifiable
[16:12:23] <xerox> @pl \f x -> join (fmap f x)
[16:12:23] <tomsmeding> oh but it's not, it's join (fmap f x <*> y)
[16:12:23] <lambdabot> (=<<)
[16:12:39] <xerox> @pl \f x y -> join (fmap f x <*> y)
[16:12:39] <lambdabot> (((join .) . (<*>)) .) . fmap
[16:12:45] <xerox> 🤮
[16:12:46] <tomsmeding> useful :p
[16:13:12] <xerox> :t liftM2
[16:13:13] <lambdabot> Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
[16:13:16] <xerox> this also is just pure
[16:13:56] <tomsmeding> not quite, right?
[16:14:06] <xerox> yeah I mean just r not m r
[16:14:17] <tomsmeding> liftM2 = \f x y -> f <$> x <*> y, if the Applicative and Monad instances agree
[16:14:30] <xerox> :t (>=>)
[16:14:31] <lambdabot> Monad m => (a -> m b) -> (b -> m c) -> a -> m c
[16:14:33] <tomsmeding> so your thing is also join (liftM2 h (f x) (g y))
[16:14:44] <xerox> yup
[16:16:25] <tomsmeding> :t \x y f g h -> f x >>= (g y >=> h)
[16:16:26] <lambdabot> Monad m => t1 -> t2 -> (t1 -> m a) -> (t2 -> a -> m b1) -> (b1 -> m b2) -> m b2
[16:16:32] <tomsmeding> not sure that makes it better :p
[16:16:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:17:07] <tomsmeding> oh it's wrong
[16:18:13] <tomsmeding> >=> doesn't help
[16:18:45] * tomsmeding remembers using liftM always in my early haskell adventures; then I discovered it's just fmap
[16:18:56] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:19:06] <hpc> eventually you discover it's just (<$>) :D
[16:19:36] <tomsmeding> :p yeah I did that at roughly the same time
[16:20:01] <tomsmeding> 'input <- map (map read) . lines <$> getContents' for the win
[16:20:09] <tomsmeding> with some 'words' in between
[16:20:24] <hpc> using straight "fmap" reminds me too much of common lisp, somehow
[16:20:40] <hpc> where you have to worry about what's a real function, what's a macro, everything is annoyingly prefix, etc etc
[16:20:55] <hpc> not really sure why that's where my mind goes, but i always prefer (<$>) because of it
[16:20:58] *** Joins: ksqsf (~user@134.209.106.31)
[16:21:23] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[16:21:37] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[16:21:55] <otherwise> alfonsox thanks I'll look at that. I think I'm actually just going to continue with LYAH instead, because that is the next section for me anyway :) After that I'll come back and see if I can replace the gargantuan list into a separate txt file that I can call into an [Int}.
[16:22:44] *** Joins: jespada (~jespada@87.74.33.157)
[16:22:53] <hpc> speaking of lyah, the website is still down :(
[16:23:21] <otherwise> my PDF is still going strong
[16:23:52] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[16:24:10] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[16:24:25] <otherwise>  Yeah I was in the thick of the contents when it just shut down. Hopefully it is a sign of some upgrades to come! (probably not)
[16:24:39] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 256 seconds)
[16:25:08] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[16:28:46] <[itchyjunk]> I have a non haskell question, are there FP languages without GC?
[16:29:12] <hpc> hmm, lyah is cc by-nc-sa, maybe it can be rehosted on haskell.org?
[16:29:24] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[16:29:37] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-236.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[16:29:55] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:34:23] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 252 seconds)
[16:37:36] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[16:39:26] *** Joins: acidjnk (~acidjnk@p200300d0c7271e72b97741cdfe77e27f.dip0.t-ipconnect.de)
[16:39:58] <ksqsf> [itchyjunk]: iirc ATS seems to claim to support GC-free FP, but I haven't tried it yet
[16:41:21] <[itchyjunk]> Apparently I don't know what GC is. Some say scoped memory management implied GC others say it doesn't. ;_;
[16:41:40] <[exa]> [itchyjunk]: there is a naive super-inefficient implementation of the GCless FP (all copies are deep copies, including the copies of closures/thunks)
[16:42:13] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[16:42:57] <[exa]> [itchyjunk]: most of the MM magic is about dodging by sharing some of the structures while being able to guess when it's safe to free the structure, usually by just tracking everything with a GC
[16:43:58] *** Parts: eyJhb (~eyJhb@user/eyjhb) (WeeChat 3.3)
[16:44:14] <ksqsf> [itchyjunk]: btw what is 'scoped memory management'? do you mean C++-style RAII?
[16:44:57] *** Quits: dsrt^ (~dsrt@207.5.54.6) (Remote host closed the connection)
[16:45:06] <[itchyjunk]> It was in response to "does C has GC?" it was "no, it only has scoped memory management"
[16:47:24] <[itchyjunk]> I had never though of it but it does make sense that you'ed be making deep copies as an alternative 
[16:47:33] <[exa]> [itchyjunk]: if you allocate all resources in strictly nested regions, the memory management can be easily done with a stack-like structure, which is precisely what C does for "simple" variables
[16:47:50] <[itchyjunk]> ah
[16:47:51] <[exa]> (malloc() and free() doesn't count here, these are kinda "external" to the core language)
[16:49:44] <[exa]> C++ RAII kinda follows the same principle even with allocations of these "external" structures using malloc/new free/delete, the stack only retains a "handle", usually some kind of a wrapped pointer that can deallocate itself
[16:49:49] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Quit: WeeChat 3.3)
[16:50:13] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-119.elisa-laajakaista.fi)
[16:50:49] <[exa]> with the usual FP that involves lots of functions being passed around, the ability to hide super-complex things in thunks makes the stack-style memory management quite useless
[16:52:18] <[exa]> there are ways to statically analyze lots of FP and compile it down to stack code, but these usually aren't general and it's technically much easier to go the dynamic way with garbage collection
[16:52:53] <tomsmeding> [itchyjunk]: https://github.com/carp-lang/Carp/ exists; kind of functional
[16:57:35] <tomsmeding> [itchyjunk]: if you have a strict language without mutation (haskell is neither :p), reference counting is sufficient. Some count RC as a GC, and it kind of is, but it's impact on program execution is of a very different nature than stop-the-world GCs
[16:58:00] <tomsmeding> iirc python has RC, but including some kind of cycle detection because (due to mutation) you can create cyclic data structures in python
[16:58:34] <[itchyjunk]> Oh, is this why there is a hard limit for number of recursion in py?
[16:58:56] <tomsmeding> no that's just control stack size, unrelated :p
[16:59:02] <[itchyjunk]> hmmmmm
[16:59:03] <[itchyjunk]> lol
[16:59:07] <tomsmeding> (if you're talking about function recursion)
[16:59:12] <acode> What does RC stand for?
[16:59:16] <tomsmeding> reference counting
[16:59:41] <acode> Thanks, time to do some googling
[17:00:13] *** Quits: farzad (~farzad@5.121.10.41) (Quit: Leaving)
[17:00:37] <[itchyjunk]> if you have no pointer pointing to a datastructure in memory, you can free that part of memory - i think it's something like that
[17:00:39] * [itchyjunk] googles too
[17:00:56] <tomsmeding> RC (without additional cycle detection) fails in a lazy language or in a language with mutable elements (haskell's IORef is enough, even apart from laziness), because RC cannot handle reference cycles; the members of the cycle would keep each other alive
[17:01:51] <tomsmeding> [itchyjunk]: yeah, the idea is that every time you throw away a reference to an object, you decrement a counter on the object; if that decrement yields zero, deallocate the object (and recursively handle the references contained therein, if any)
[17:02:47] <tomsmeding> with RC, "GC time", and when "GC" runs, is fully deterministic if your program is deterministic
[17:03:25] <[itchyjunk]> hmm
[17:03:40] <tomsmeding> but some stop-the-world GC algorithms have the advantage that they only need to iterate over _live_ memory at each world pause; in contrast, RC needs to perform action on every object that becomes dead (and additionally needs to keep all those reference counters up to date)
[17:03:59] <tomsmeding> so RC is not necessarily more efficient in terms of throughput than stop-the-world mark-and-sweep
[17:04:03] <ksqsf> RC usually has lower latency but also has lower throughput; I always prefer traing GCs
[17:04:10] <ksqsf> tracing *
[17:04:11] <tomsmeding> but it may be more predictable
[17:04:19] <tomsmeding> what ksqsf says
[17:05:02] <[itchyjunk]> hmm why is it lower throughput?
[17:05:03] <tomsmeding> ksqsf: tracing GC is what stop-the-world that traverses only live memory, right? i.e. what GHC has
[17:05:13] <tomsmeding> [itchyjunk]: in the end, in total, RC needs to do more work
[17:05:22] <tomsmeding> because of all the reference count updating
[17:05:27] <[itchyjunk]> ah
[17:05:53] <tomsmeding> and if you time a GC pause right, when the working memory is low, that GC only has to traverse the live memory (i.e. a small set if you're lucky), freeing all the dead memory in O(1)
[17:06:33] <tomsmeding> so, tracing is O(live memory), while RC is O(reference mutations + dead memory), I _think_ (may be missing stuff)
[17:07:30] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:18:56] *** Joins: jinsun (~quassel@user/jinsun)
[17:19:27] <int-e> tomsmeding: There's a fun tweak for RC where for every decrease of a reference count, you free a constant number of items from a to-free list (and maybe put new ones on the list), which has real-time properties if each memory item has a bounded number of pointers... essentially you free stuff lazily, smoothing what would otherwise be an amortized cost.
[17:21:01] *** Quits: max22- (~maxime@2a01cb0883359800eadee1731c9704da.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:25:23] <tomsmeding> int-e: oh that's neat, indeed relies on objects having a bounded number of references
[17:25:33] <tomsmeding> s/having/containing/, less ambiguous
[17:29:24] *** Joins: tito (tito@tilde.team)
[17:31:50] *** Joins: drewr (~drew@user/drewr)
[17:37:58] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[17:40:00] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[17:41:43] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[17:42:04] *** Joins: ksqsf (~user@2001:da8:d800:611:dc11:dfaa:95da:b93d)
[17:42:04] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[17:42:14] *** Joins: sagax (~sagax_nb@user/sagax)
[17:42:37] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:42:59] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:47:27] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[17:47:50] *** Quits: ksqsf (~user@2001:da8:d800:611:dc11:dfaa:95da:b93d) (Read error: Connection reset by peer)
[17:48:09] *** Joins: ksqsf (~user@134.209.106.31)
[17:49:48] *** Quits: sleblanc (~sleblanc@user/sleblanc) (Quit: Leaving)
[17:50:10] *** Joins: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se)
[17:52:14] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[17:54:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:55:09] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:55:17] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[17:56:43] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[18:01:49] <iphy> is there a better way to write this? https://github.com/iphydf/hs-cimple/blob/fix/src/Language/Cimple/Diagnostics.hs#L43-L140
[18:03:41] *** Joins: drewr (~drew@user/drewr)
[18:10:39] *** Joins: max22- (~maxime@2a01cb0883359800b3fa5d9958932079.ipv6.abo.wanadoo.fr)
[18:12:02] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:12:02] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:12:02] *** Joins: wroathe (~wroathe@user/wroathe)
[18:13:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:14:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[18:16:39] *** Parts: coot (~coot@89-64-85-93.dynamic.chello.pl) ()
[18:17:07] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[18:17:28] <pavonia> iphy: I used to use uniplate in such situations. Not sure if this is still a thing today
[18:17:59] <iphy> Neil Mitchell 2006-2020
[18:18:02] <iphy> looks like yes
[18:18:18] <iphy> Uploaded by NeilMitchell at 2020-11-07T19:53:43Z
[18:18:45] <pavonia> Yeah, but GHC has greater support for generics today. Maybe there's somthing better already built-in
[18:19:27] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[18:20:15] *** Quits: altern (~Sergii@altern.corbina.com.ua) (Ping timeout: 256 seconds)
[18:20:28] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:20:46] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[18:21:07] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[18:21:16] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[18:22:00] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[18:22:04] <tomsmeding> fairly sure you can do that with generics, but not sure how easy that is compared to just giving up and writing this out :p
[18:25:27] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:29:17] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:31:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:34:26] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[18:35:28] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[18:35:55] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[18:36:15] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[18:37:06] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:42:26] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[18:43:34] *** Joins: drewr (~drew@user/drewr)
[18:44:22] <tomsmeding> pavonia: bit of a mess but it does seem to work https://paste.tomsmeding.com/bIGQNN1J
[18:45:17] <tomsmeding> ah but it only works if 'lexeme' does not have [] as its outer type
[18:45:22] <tomsmeding> because of the hacky overlapping instances
[18:46:47] <tomsmeding> but you should be able to prevent that from going wrong by fmapping a newtype wrapper over the lexeme
[18:47:39] *** Joins: neurocyte0132889 (~neurocyte@IP-092119008132.dynamic.medianet-world.de)
[18:47:39] *** Quits: neurocyte0132889 (~neurocyte@IP-092119008132.dynamic.medianet-world.de) (Changing host)
[18:47:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:47:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[18:48:14] *** Joins: fef (~thedawn@user/thedawn)
[18:48:17] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:48:29] <pavonia> iphy: ^
[18:48:31] <tomsmeding> oh it does work!
[18:48:42] <tomsmeding> I just forgot to update the type ascription in 'main' :)
[18:50:17] <tomsmeding> concats' :: NodeF a [a] -> [a] ; concats' = concats
[18:50:20] <tomsmeding> easier
[18:50:43] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[18:50:47] <tomsmeding> presumably uniplate makes stuff easier, but never worked with that :P
[18:51:08] *** Joins: fef (~thedawn@user/thedawn)
[18:51:29] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:f129:8ed3:b1ff:82ed)
[18:52:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:56:17] <otherwise> ... that seems like a lot of code to print ['a'..'g']
[18:56:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:57:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[18:58:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[19:01:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[19:02:01] *** Joins: ksqsf (~user@134.209.106.31)
[19:03:04] <tomsmeding> yes
[19:03:20] <tomsmeding> but it works for any value of 'Char', and also if you add more constructors to the data type ;)
[19:03:57] *** Joins: drewr (~drew@user/drewr)
[19:05:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 240 seconds)
[19:06:37] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[19:08:40] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[19:09:22] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 260 seconds)
[19:09:57] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:10:37] *** Joins: MoC (~moc@user/moc)
[19:12:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[19:14:01] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:14:01] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:14:01] *** Joins: wroathe (~wroathe@user/wroathe)
[19:14:26] *** Joins: bontaq (~user@static-108-32-49-96.pitbpa.fios.verizon.net)
[19:14:27] <int-e> tomsmeding: Oh you went down that path too... I ended up with  https://paste.tomsmeding.com/6mEKw6Ur
[19:15:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:15:46] <int-e> (so ugly)
[19:15:51] <tomsmeding> int-e: why INCOHERENT and not OVERLAPPING? :p
[19:16:08] <int-e> because they *are* incoherent
[19:16:21] <iphy> tomsmeding: nice
[19:16:36] *** Quits: acidjnk (~acidjnk@p200300d0c7271e72b97741cdfe77e27f.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[19:16:42] <iphy> lexeme is always something that's not a list
[19:16:46] <int-e> if u = v, Fold2_Base u v u and Fold2_Base u v v produce different behavior
[19:16:49] <iphy> (e.g. it's never String)
[19:17:31] <int-e> tomsmeding: it's a side effect of dealing with two types rather than one
[19:18:11] <int-e> And I don't like it. But it seems to work. Make of that what you will...
[19:18:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[19:19:11] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[19:19:34] <int-e> This means, btw, that manually inlining `fold2` is dangerous.
[19:19:46] *** Joins: ksqsf (~user@134.209.106.31)
[19:23:34] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:23:55] <tomsmeding> int-e: interesting
[19:24:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[19:25:16] <tomsmeding> oh yeah I didn't add support for Maybe
[19:26:05] <tomsmeding> but that's easy, the types show the way :D
[19:26:54] <int-e> tomsmeding: the [a] and (Maybe a) instances are merely OVERLAPPING though
[19:27:01] <tomsmeding> yeah
[19:29:52] <mjrosenb> is there a definition of what makes instances incoherent or overlapping? I've never ran into either before.
[19:30:08] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (Quit: You have been kicked for being idle)
[19:30:43] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[19:31:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[19:31:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[19:31:02] <tomsmeding> mjrosenb: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/exts/instances.html#overlapping-instances
[19:31:04] *** Joins: fef (~thedawn@user/thedawn)
[19:31:24] <tomsmeding> if you want all the details :p
[19:31:36] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[19:31:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[19:31:37] *** Quits: xff0x (~xff0x@2001:1a81:53c9:5600:a4b4:57a2:f2c0:c793) (Ping timeout: 240 seconds)
[19:32:35] *** Joins: xff0x (~xff0x@2001:1a81:53c9:5600:a16a:4242:194d:2615)
[19:38:01] *** Joins: ksqsf (~user@134.209.106.31)
[19:38:15] <iphy> tomsmeding: https://github.com/iphydf/hs-cimple/blob/fix/src/Language/Cimple/Diagnostics.hs#L44
[19:38:24] <iphy> https://github.com/iphydf/hs-cimple/blob/fix/src/Language/Cimple/Flatten.hs
[19:39:09] *** Joins: mario_ (~mario@31.147.205.13)
[19:39:51] <tomsmeding> iphy: might not need a separate instance for Maybe [a], right?
[19:40:10] <tomsmeding> the Maybe and OVERLAPPABLE [] instances should cover that
[19:40:11] <tomsmeding> but nice!
[19:40:27] <tomsmeding> _might_ want some comments :p
[19:40:29] <iphy> https://www.irccloud.com/pastebin/rsBXUD6Q/
[19:40:34] <iphy> tomsmeding: yeah, soon :)
[19:40:57] <tomsmeding> oh heh
[19:41:26] <tomsmeding> replace the 'instance GenConcatsFlatten (Maybe a) a' with 'instance GenConcatsFlatten b a => GenConcatsFlatten (Maybe b) a'
[19:41:38] <tomsmeding> perhaps also OVERLAPPABLE
[19:41:47] <tomsmeding> (in case 'a' is ever Maybe something)
[19:42:30] <iphy> yeah
[19:42:39] <iphy> it's never Maybe something, so this works
[19:42:41] <tomsmeding> I mean, this also works
[19:42:51] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 245 seconds)
[19:43:12] <iphy> https://github.com/iphydf/hs-cimple/blob/fix/src/Language/Cimple/Flatten.hs#L46
[19:44:45] <tomsmeding> yay
[19:44:56] *** Joins: Guest|88 (~Guest|88@79.171.77.255)
[19:45:19] *** Quits: Guest|88 (~Guest|88@79.171.77.255) (Client Quit)
[19:47:10] *** Quits: xff0x (~xff0x@2001:1a81:53c9:5600:a16a:4242:194d:2615) (Ping timeout: 268 seconds)
[19:47:46] *** Joins: xff0x (~xff0x@2001:1a81:53c9:5600:de59:5c41:aa07:4876)
[19:55:31] *** Joins: ksqsf (~user@134.209.106.31)
[19:57:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:57:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:57:46] *** Joins: wroathe (~wroathe@user/wroathe)
[19:57:56] <iphy> lexeme will always be either Lexeme String, Lexeme Text, or some other atomic type (never List or Maybe or another functor)
[20:00:33] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[20:00:44] <geekosaur> String is a list
[20:00:47] <geekosaur> not atomic
[20:01:10] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 260 seconds)
[20:01:56] <tomsmeding> geekosaur: Lexeme String != String
[20:02:36] <tomsmeding> iphy: still you can fmap a newtype wrapper over the thing to ensure that the root type is always that newtype wrapper, so that it can never go wrong even if someone does something stupid later on
[20:02:56] <tomsmeding> not sure if 'fmap' is the right thing here though
[20:03:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[20:03:29] *** Parts: spoofer (~spoofer@64.185.111.205) ()
[20:04:00] *** Joins: xsperry (~xs@user/xsperry)
[20:04:53] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:13:20] *** Joins: ksqsf (~user@134.209.106.31)
[20:13:40] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[20:14:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:16:42] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:17:06] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[20:17:57] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 240 seconds)
[20:19:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:19:28] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:19:28] *** Joins: wroathe (~wroathe@user/wroathe)
[20:19:43] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[20:20:09] *** Joins: Bartol_ (~Bartol@user/Bartol)
[20:21:19] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[20:21:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[20:21:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:22:53] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:23:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[20:23:50] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:25:20] <mjrosenb> should emacs with hls be able to compile things without invoking haskell-compile?
[20:29:53] *** Quits: nattiestnate (~nate@114.122.105.227) (Read error: Connection reset by peer)
[20:31:32] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[20:33:43] *** Joins: haask (~askham@92.234.0.237)
[20:34:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:37:20] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[20:37:25] <haask> In this year of 2021, is it possible to take an existing Stack project (say, a REPL for some language) and compile it to run clientside in a browser? I understand the options to be GHCJS (no Stack support), Haste (no TemplateHaskell support), Reflex - any other option I'm overlooking before I go down the rewrite-for-GHCJS rabbithole?
[20:37:33] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[20:37:54] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[20:38:58] *** Joins: nattiestnate (~nate@114.122.105.227)
[20:39:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[20:39:47] *** Quits: ubert (~Thunderbi@p548c8cd6.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:40:22] *** mario_ is now known as spaceseller
[20:41:38] *** Quits: mbuf (~Shakthi@122.178.203.86) (Quit: Leaving)
[20:43:02] <iphy> tomsmeding: this is good enough now :) Flatten is used internally only
[20:43:19] <iphy> thanks btw
[20:43:40] <tomsmeding> iphy: <3
[20:46:37] *** Quits: alfonsox (~quassel@103.92.42.104) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:47:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[20:48:28] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:54:28] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[20:55:08] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[20:58:53] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[21:01:24] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[21:02:17] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[21:02:59] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:03:34] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[21:04:50] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[21:05:33] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[21:05:56] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[21:07:32] *** Joins: ksqsf (~user@134.209.106.31)
[21:08:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81) (Ping timeout: 252 seconds)
[21:10:24] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 268 seconds)
[21:10:36] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[21:10:36] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[21:10:36] *** Joins: turlando (~turlando@user/turlando)
[21:11:24] *** Joins: Sgeo (~Sgeo@user/sgeo)
[21:12:08] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 252 seconds)
[21:16:55] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[21:22:05] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:23:41] *** Quits: bontaq (~user@static-108-32-49-96.pitbpa.fios.verizon.net) (Ping timeout: 252 seconds)
[21:23:41] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:24:51] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[21:26:07] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:26:14] <lyxia> Can I use cabal to compile a single file that depends on packages? `cabal exec ghc` complains that I don't have a cabal.project...
[21:30:58] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[21:31:42] <EvanR> it's possible to use ghc with the flags for those packages
[21:31:59] <EvanR> but would be nice if cabal did that
[21:38:15] *** Joins: nicbk (~nicbk@user/nicbk)
[21:38:16] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:41:59] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:43:22] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:44:00] <sm> I think stack scripts can compile themselves (to an executable you can reuse) but cabal scripts can't
[21:45:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:47:58] *** Quits: nattiestnate (~nate@114.122.105.227) (Quit: WeeChat 3.4)
[21:48:17] *** Joins: nattiestnate (~nate@114.122.106.227)
[21:48:52] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[21:49:00] *** Quits: xff0x (~xff0x@2001:1a81:53c9:5600:de59:5c41:aa07:4876) (Ping timeout: 240 seconds)
[21:51:56] *** Joins: econo (uid147250@user/econo)
[21:54:37] *** Joins: ksqsf (~user@134.209.106.31)
[21:54:58] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[21:55:31] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:56:05] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[21:58:59] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[21:59:31] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 245 seconds)
[22:01:37] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:6043:aa58:f99b:e1b)
[22:04:38] <iphy> I've refactored my pretty printer to use foldFix. I needed to communicate information from a deeper layer upwards, so I made it part of the accumulator. is that the right way to do this? https://github.com/iphydf/hs-cimple/blob/fix/src/Language/Cimple/Pretty.hs#L28
[22:04:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:11:16] *** Quits: spaceseller (~mario@31.147.205.13) (Quit: Leaving)
[22:11:17] *** Joins: xff0x (~xff0x@2001:1a81:53c9:5600:de59:5c41:aa07:4876)
[22:12:05] <EvanR> oh man you can go nuts with pretty printing by mapping each item to nested boxes, each of which carries format info and color!
[22:12:32] <EvanR> to be interpreted by yet another layer of (over)engineering
[22:12:33] *** Joins: Everything (~Everythin@37.115.210.35)
[22:12:37] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:13:25] *** Joins: ksqsf (~user@134.209.106.31)
[22:13:53] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[22:14:03] <EvanR> at least it would be monomorphic
[22:14:45] <monochrom> In general, rendering engines are like that. Pretty printing is just a special case.
[22:15:31] <monochrom> You can regain polymorphism by unifying pretty printing, polygon rendering, ray tracing, and path tracing. >:)
[22:17:26] <EvanR> in before someone claims that it's very important to distinguish different kinds of syntax by their material properties, mirror, plastic, rubblepile
[22:18:04] <monochrom> Syntax texturing \∩/
[22:18:10] <EvanR> (the docs for google filament are pretty cool)
[22:18:22] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:18:51] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 268 seconds)
[22:19:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:20:17] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:20:27] <zincy> How does parametric polymorphism fall short of dependent functions. Take cons :: a -> [a] -> [a]   
[22:20:42] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[22:21:01] <zincy> Is it because you cant cons a Int onto a [Bool] ?
[22:21:43] <monochrom> I don't understand the question.
[22:21:44] <zincy> By dependent function I mean something like this in Lean 
[22:21:46] <zincy> constant cons   : Π α : Type u, α → list α → list α 
[22:22:04] <EvanR> you can't cons an Int onto a [Bool] with dependent functions either
[22:22:13] <EvanR> type error
[22:22:20] <geekosaur> you can't write a function which can do a differrent thing depending on what a is
[22:22:31] <geekosaur> dependent functions can
[22:22:39] <zincy> Is that not what a dependent function allows you to do?
[22:22:49] <EvanR> not exactly like that
[22:22:56] <geekosaur> Haskell's cons is polymorphic but has to do the same thing regardless of a
[22:23:07] <monochrom> cons is a confusing example because it will turn out to be parametric even in a non-parametric language.
[22:23:22] <monochrom> Please choose a truly non-parametric example.
[22:23:55] <EvanR> that cons in lean example isn't really dependent
[22:24:07] *** Joins: altern (~Sergii@altern.corbina.com.ua)
[22:24:32] <zincy> ugh I am asking confused questions
[22:24:42] <zincy> I should probably just read a book on type theory
[22:24:43] *** Quits: nattiestnate (~nate@114.122.106.227) (Read error: Connection reset by peer)
[22:25:21] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:25:40] <EvanR> the overused example is a list whose type contains its length... vect
[22:25:59] <EvanR> then cons updates that length
[22:26:27] <zincy> Which makes cons in that case a dependent function right
[22:27:23] <monochrom> Not convinced it gets closer. "a -> V n a -> V (n+1) a" is still parametric in both a and n.
[22:28:10] <zincy> Whats the link between being parametric and dependent?
[22:28:22] <EvanR> yeah it's still polymorphic
[22:28:33] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:28:35] *** Quits: max22- (~maxime@2a01cb0883359800b3fa5d9958932079.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[22:28:47] *** Joins: max22- (~maxime@2a01cb0883359800c465105b4f1dcedd.ipv6.abo.wanadoo.fr)
[22:29:06] <monochrom> I don't know of a link. But I know parametricity.
[22:29:34] <monochrom> I don't expect a link either. Links are overrated.
[22:30:35] <EvanR> you can't get a proper dependent type without using the name of one of the parameters later in the type after its introduced
[22:30:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:30:56] *** Joins: ksqsf (~user@134.209.106.31)
[22:30:57] <EvanR> which pi and sigma let you do
[22:32:12] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[22:32:21] <zincy> Yeah was just reading about pi and sigma
[22:32:33] *** Quits: EvanR (~EvanR@user/evanr) (Remote host closed the connection)
[22:32:53] *** Joins: EvanR (~EvanR@user/evanr)
[22:33:05] <EvanR> Pi (n : Int) -> (if even n then Bool else Char)
[22:33:25] *** Quits: max22- (~maxime@2a01cb0883359800c465105b4f1dcedd.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:33:52] <EvanR> silly example but you can do actual cool things with it
[22:34:43] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:35:35] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 250 seconds)
[22:36:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:36:26] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[22:36:39] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 250 seconds)
[22:36:42] <zincy> So can I do Pi (n : int) -> (if even n then A else B)
[22:38:04] <EvanR> more likely Pi (n : Int) -> f n where f : Int -> Type and could do that
[22:39:05] <EvanR> jargon for f could be "an indexed family of types"
[22:39:32] *** Joins: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net)
[22:39:58] <zincy> Is Type just like a type parameter?
[22:40:04] <EvanR> no
[22:40:15] <EvanR> Type is the type of types
[22:40:23] <EvanR> like Int : Type
[22:40:55] <zincy> So is this because there is no instantiation to do?
[22:41:14] <zincy> f 1 and f 2 can return different types
[22:41:22] <zincy> or have I mean
[22:41:23] <EvanR> if you had a parameter of type Type, passing in a type is like instanciation in haskell
[22:42:00] <EvanR> yes
[22:42:52] <EvanR> in this case f always returns a Type though
[22:43:05] <zincy> So is it a bit like existential types in haskell but on the value level
[22:44:15] *** Quits: yauhsien (~yauhsien@61-231-42-148.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[22:44:19] <zincy> returning Type from a function means the consumer of the function picks a different type for every value applied to f
[22:44:30] <zincy> Sort of existentially maybe 
[22:44:42] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:44:44] <EvanR> Sigma is how you express existential types with dependent types
[22:44:53] <EvanR> which also involves this Type family thing
[22:45:42] <zincy> So with sigma values don't determine the result type
[22:46:03] <EvanR> they do
[22:46:26] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:46:36] <EvanR> Sigma (n : Int, if even n then Char else Bool)
[22:46:50] <iphy> EvanR: yes, you can go nuts, but I also want it to be readable code
[22:46:56] <EvanR> the type of the snd component depends on the value of n
[22:47:43] *** Quits: deadmarshal (~deadmarsh@95.38.116.71) (Ping timeout: 256 seconds)
[22:49:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[22:50:31] <zincy> Ok so each value is mapped to a choice of multiple types
[22:52:10] <EvanR> so (0,'a') (1,False) (2,'z') (3,True) are values of that sigma type
[22:52:54] <EvanR> when the second component is not a boring value but evidence of some property, it gets more interesting
[22:53:28] <EvanR> Sigma (n : Int, Even n)
[22:53:58] <EvanR> has values (0,<proof term>) (2,<other proof term>) ..., but not (1, <impossible>)
[22:54:41] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:55:23] <EvanR> Even n are all different Types so you need dependent types for this
[22:56:11] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[22:58:31] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:00:05] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[23:02:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b417:46a:3118:ab81)
[23:02:30] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[23:05:41] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[23:07:51] *** Joins: snake (~snake@user/snake)
[23:09:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[23:10:29] <zincy> Oh nice 
[23:10:41] <zincy> EvanR: What is Even n  ?
[23:13:10] <EvanR> a type
[23:13:31] <EvanR> carefully designed to represent the fact that n is even
[23:13:48] <EvanR> (if and only if it is)
[23:15:18] <EvanR> types are propositions, values are the proofs
[23:15:25] <EvanR> if any
[23:16:04] *** Joins: max22- (~maxime@2a01cb0883359800f5f346d928347cfb.ipv6.abo.wanadoo.fr)
[23:16:12] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:16:55] *** Joins: ksqsf (~user@134.209.106.31)
[23:19:11] <zincy> ok thanks
[23:19:36] <zincy> I am guessing that I wont pick this up by reading and will have to actually play around with a dependently typed language
[23:19:43] <EvanR> yeah
[23:19:59] <zincy> Then I will be able to ask well formed questions
[23:21:56] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 252 seconds)
[23:23:44] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:35:19] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 268 seconds)
[23:36:03] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[23:38:29] *** Joins: juhp (~juhp@128.106.188.82)
[23:39:47] *** Joins: aner (~aner@static.219.128.itcsa.net)
[23:39:54] *** Quits: aner (~aner@static.219.128.itcsa.net) (Client Quit)
[23:40:22] *** Joins: argento (~argento@static.219.128.itcsa.net)
[23:42:07] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 268 seconds)
[23:45:28] *** Joins: Flow (~none@gentoo/developer/flow)
[23:47:47] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (Ping timeout: 256 seconds)
[23:48:57] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 240 seconds)
[23:48:58] *** Quits: haask (~askham@92.234.0.237) (Remote host closed the connection)
[23:49:47] *** Joins: haask (~harry@143.47.228.49)
[23:54:41] *** Quits: haask (~harry@143.47.228.49) (Changing host)
[23:54:41] *** Joins: haask (~harry@user/haask)
