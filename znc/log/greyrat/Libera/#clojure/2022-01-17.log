[00:02:04] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:09:59] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[00:16:09] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[01:02:02] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[01:05:58] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[01:06:37] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 240 seconds)
[01:38:03] *** Joins: matty_ma2 (~matt@185.226.144.22)
[01:48:12] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 250 seconds)
[01:51:20] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[01:57:49] *** Joins: joe_colben (~joe____co@185.190.112.211)
[02:19:02] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[02:30:02] *** Quits: matty_ma2 (~matt@185.226.144.22) (Ping timeout: 240 seconds)
[02:31:00] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[02:35:32] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[02:40:51] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[02:47:32] *** Joins: matty_ma2 (~matt@185.226.144.21)
[02:52:02] *** Quits: matty_ma2 (~matt@185.226.144.21) (Ping timeout: 240 seconds)
[03:03:41] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[03:11:14] *** Joins: matty_ma2 (~matt@185.226.144.20)
[03:17:45] *** Quits: matty_ma2 (~matt@185.226.144.20) (Ping timeout: 256 seconds)
[03:22:17] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[03:22:35] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:44:03] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[03:46:04] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[03:50:14] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[03:55:02] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[04:22:28] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 250 seconds)
[04:23:01] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[04:30:42] *** Quits: RedNifre (~michael@dslb-002-203-247-052.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[04:31:34] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[04:32:45] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:37:15] *** Joins: matty_ma2 (~matt@185.226.144.21)
[04:41:32] *** Quits: matty_ma2 (~matt@185.226.144.21) (Ping timeout: 240 seconds)
[04:54:09] *** Joins: RedNifre (~michael@dslb-188-100-021-126.188.100.pools.vodafone-ip.de)
[04:59:17] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[05:04:04] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[05:09:35] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[05:12:45] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[05:12:59] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[05:15:10] *** Joins: matty_ma2 (~matt@185.226.144.22)
[05:19:35] *** Quits: matty_ma2 (~matt@185.226.144.22) (Ping timeout: 256 seconds)
[05:19:58] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[05:21:42] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Client Quit)
[05:22:17] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[05:25:19] *** Joins: matty_ma2 (~matt@185.226.144.21)
[05:33:28] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[05:38:02] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[05:58:40] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 250 seconds)
[06:08:15] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[06:13:32] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[06:13:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:18:26] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[06:24:38] *** Joins: tuborgman (~tuborgman@pool-108-16-29-206.phlapa.fios.verizon.net)
[06:25:47] *** Quits: tuborgman (~tuborgman@pool-108-16-29-206.phlapa.fios.verizon.net) (Client Quit)
[06:26:02] *** Joins: tuborgman (~tuborgman@pool-108-16-29-206.phlapa.fios.verizon.net)
[06:28:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:37:40] *** Quits: matty_ma2 (~matt@185.226.144.21) (Ping timeout: 250 seconds)
[06:38:59] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[06:41:57] *** Joins: matty_ma2 (~matt@185.226.144.22)
[06:44:01] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[07:06:54] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[07:11:59] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[07:15:25] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[07:16:40] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[07:16:52] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:19:16] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[07:22:24] *** Joins: jespada (~jespada@87.74.36.188)
[07:24:24] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:31] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:28:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:46:59] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[07:51:51] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[07:59:33] *** Joins: mbuf (~Shakthi@223.178.78.253)
[08:11:51] *** Quits: matty_ma2 (~matt@185.226.144.22) (Ping timeout: 256 seconds)
[08:13:06] *** Joins: matty_ma2 (~matt@185.226.144.21)
[08:20:17] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[08:24:53] *** Quits: RedNifre (~michael@dslb-188-100-021-126.188.100.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[08:25:27] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[08:26:20] *** Joins: RedNifre (~michael@dslb-188-100-021-050.188.100.pools.vodafone-ip.de)
[08:53:01] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:53:33] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[08:58:30] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[08:59:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:02:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:22:31] *** Quits: matty_ma2 (~matt@185.226.144.21) (Ping timeout: 256 seconds)
[09:26:00] *** Joins: puchka (~marius@165.73.240.46)
[09:26:14] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[09:30:34] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 250 seconds)
[09:31:02] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[09:37:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:58:37] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[10:03:30] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[10:11:59] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (Ping timeout: 256 seconds)
[10:13:42] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[10:35:24] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[10:40:02] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[10:46:50] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:08:01] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[11:08:23] *** Joins: shiranaihito (~textual@219.84.234.129)
[11:08:54] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[11:08:55] *** Quits: shiranaihito (~textual@219.84.234.129) (Read error: Connection reset by peer)
[11:09:13] *** Joins: shiranaihito (~textual@219.84.234.129)
[11:12:32] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[11:14:34] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:17:23] *** Joins: struchu (~struchu@62.87.192.114)
[11:18:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[11:20:19] *** Quits: shiranaihito (~textual@219.84.234.129) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:29:16] *** Joins: shiranaihito (~textual@2001-b011-4000-1727-05ce-9909-dee5-9cb8.dynamic-ip6.hinet.net)
[11:33:38] *** Quits: shiranaihito (~textual@2001-b011-4000-1727-05ce-9909-dee5-9cb8.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[11:40:57] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[11:44:55] *** Joins: shiranaihito (~textual@2001-b011-4000-3aae-4de8-a921-f57d-820e.dynamic-ip6.hinet.net)
[11:46:03] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[11:54:56] *** Joins: lewisje (~lewisje@72.49.207.113)
[11:55:01] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:56:30] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[11:59:57] *** Joins: MajorBiscuit (~MajorBisc@c-001-020-016.client.tudelft.eduvpn.nl)
[12:00:06] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:00:37] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[12:14:24] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[12:22:36] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[13:19:09] *** Joins: matty_ma2 (~matt@185.226.144.22)
[13:23:32] *** Quits: matty_ma2 (~matt@185.226.144.22) (Ping timeout: 240 seconds)
[13:28:13] *** Quits: EsoAlgo4 (~EsoAlgo@152.70.142.52) (Ping timeout: 240 seconds)
[13:39:07] *** Joins: joe_colben (~joe____co@185.190.112.211)
[14:06:36] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[14:36:40] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: :x)
[14:45:22] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Read error: Connection reset by peer)
[14:57:37] *** Joins: lunik1 (~lunik1@37.205.14.203)
[15:32:57] *** Joins: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl)
[15:55:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:59:03] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[16:02:57] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[16:18:33] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[16:30:20] *** Joins: matty_ma2 (~matt@185.226.144.22)
[16:34:22] *** Quits: piotrts (~piotrts@188.146.235.26.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 250 seconds)
[16:37:49] *** yason_ is now known as yason
[16:38:28] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[16:43:15] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[16:54:46] *** Quits: jespada (~jespada@87.74.36.188) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:09:31] *** Joins: oscurochu (~oscurochu@37.120.215.102)
[17:10:32] *** Quits: matty_ma2 (~matt@185.226.144.22) (Ping timeout: 240 seconds)
[17:13:48] *** Quits: oscurochu (~oscurochu@37.120.215.102) (Ping timeout: 250 seconds)
[17:14:26] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[17:26:14] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[17:32:51] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[17:32:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:38:02] *** Quits: dfreeman (~dfreeman@user/dfreeman) (Ping timeout: 240 seconds)
[17:48:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:50:48] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[17:56:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:58:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[18:01:37] *** Joins: seschwar (~seschwar@user/seschwar)
[18:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:03:37] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:03:48] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[18:05:06] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: The Lounge - https://thelounge.chat)
[18:07:15] *** Joins: henry40408 (~henry4040@175.181.155.165)
[18:08:32] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 240 seconds)
[18:11:02] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[18:11:22] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[18:13:32] *** Joins: struchu (~struchu@62.87.192.114)
[18:14:58] <aphyr> I have also tried to become a structural editing person and failed, like... twice now
[18:15:44] <aphyr> Some of this is undoubtedly vim muscle memory, but I found that like... my code *often* went through meaningful periods of structural incoherence when I was reorganizing things
[18:16:05] <aphyr> pulling stuff from inside a let binding into the binding vector, for instance
[18:19:13] <sobel> yes. sometimes i break things so i have to fix them.
[18:19:57] <ridcully> given some trivial example, this does not even involve e.g. paredit?
[18:20:15] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[18:20:25] *** Joins: struchu (~struchu@62.87.192.114)
[18:21:05] <sobel> i'm not familiar enough with the different edit modes by name, but paredit might not be strong enough to get in my way
[18:21:11] <ridcully> i use `ca(` or `caf` (where it think the f comes from paredit) to replace the inner thing.  and then paste it in the let binding
[18:21:52] *** Quits: struchu (~struchu@62.87.192.114) (Client Quit)
[18:21:54] <leah2> same, i edit lisp code for 20 years without more tooling than automatic indentation and parenthesis highlighting
[18:22:09] <leah2> the different brackets in clojure make it a bit harder tho, tbh
[18:22:38] *** Joins: struchu (~struchu@62.87.192.114)
[18:24:00] <ridcully> the only things i use from paredit is basically to wrap things with some sort of parens, then sometimes slurping barfing when i messed up or moving a form around.
[18:26:10] <ridcully> the other things are basically passive: opening some sort of parens ins editmode adds the closing paren at the end.  or if you just `dd` somewhere it only rips out the form without breaking other closing parens
[18:26:14] *** Joins: lunik13 (~lunik1@37.205.14.203)
[18:26:51] <sobel> ok, i think my real target is "sexp-aware" not structured edit.
[18:28:13] *** Quits: lunik1 (~lunik1@37.205.14.203) (Ping timeout: 256 seconds)
[18:28:13] *** lunik13 is now known as lunik1
[18:40:28] <leah2> i hate automatic paren insertion :p
[18:40:57] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[18:41:13] <sobel> i like rainbow highlighting
[18:42:09] <sobel> my ideal sexp editor would fisheye-lens the focused sexp, and probably to a lesser extent, a few layers of surrounding nest
[18:45:27] <leah2> style question: what's the best way to bind a sequence (in fact, a vector) to a variable and run some code if it's nonempty?
[18:47:01] <ridcully> leah2: i hate this feature with a gusto everywhere, where its enabled by default and turn it off, because it only works half of the time properly.  but with vim-paredit it just works.  is it foolproof?  no.  there is input where it just is confused (e.g. in AOC one day a map with all the paren chars was needed this was a "don't touch" form
[18:47:13] <opqdonut> leah2: (when (seq x) ...) is the idiom for doing something if x is nonempty
[18:47:29] <opqdonut> leah2: sooo I guess you could do (when-let [x (seq ...)] ...) unless you need x to be an actual vector
[18:47:43] <ridcully> when-let or  some-> maybe?
[18:47:43] <leah2> opqdonut: i dont in this case i think
[18:48:04] <leah2> but i wonder if using the return value of seq makes code inefficient
[18:48:18] <opqdonut> I guess it doesn't since it's such a widespread idiom
[18:48:24] <leah2> the other possibility is (let [x ...] (when-not (empty? x) ...))
[18:48:34] <opqdonut> clj-kondo is always telling me to refactor my (when-not (empty? x) ...)
[18:48:38] <leah2> ok
[18:48:44] <opqdonut> which I'd prefer TBH
[18:48:50] <leah2> that has the benefit of keeping the type of x tho
[18:48:52] <opqdonut> but I just roll with the idiom since it makes people happy
[18:57:14] <TimMc> aphyr: Pulling stuff from the let body into the binding is just a couple keystrokes. Ah, but *which* couple keystrokes...
[18:57:51] <aphyr> Yeah, it was stuff like... oh, you have to insert a _ before the form, *then* you can move it up
[18:58:00] <aphyr> and you have to grab two forms in order to do that move
[18:58:04] <TimMc> It did take me a while to use structural editing in an effective way.
[18:58:34] <TimMc> M-x paredit-convolute-sexp is my favorite.
[18:58:46] <aphyr> whereas, like... ESC dd UP UP p CTRL-LEFT i _ SPACE is super fast for me
[18:58:47] <TimMc> Like, you have an if inside a let, but you want it to be the other way around? BAM.
[19:01:38] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[19:02:37] <TimMc> What do you mean about having to grab two forms?
[19:03:02] <TimMc> Your structural editor was insisting on an even number of forms in bindings?
[19:03:28] <aphyr> I think so
[19:03:32] *** Quits: shiranaihito (~textual@2001-b011-4000-3aae-4de8-a921-f57d-820e.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[19:03:39] <aphyr> But it's been like nine years, I don't remember super well
[19:03:48] <TimMc> That sounds unpleasant, and I'm glad paredit doesn't do that.
[19:04:07] <aphyr> I was also using paredit under vim, so maybe I'm totally wrong about this
[19:04:27] <TimMc> Yeah, could have very different behavior.
[19:04:32] <aphyr> I *do* remember trying to use it exclusively for two weeks, becoming incredibly frustrated, and giving up--I was probably twice as fast without structural editing
[19:04:40] <aphyr> and like, I just don't *make* structural errors that often
[19:04:53] <aphyr> it wasn't really getting me any safety I didn't already have, if that makes sense
[19:05:41] <TimMc> Well, for me it's mostly about reorganizing code I've just written.
[19:05:58] <aphyr> Same, yeah
[19:06:19] <TimMc> The paren-balancing thing is kind of incidental.
[19:06:51] <TimMc> And paren-enforcement without using structural editing commands does sound unpleasant!
[19:07:01] <aphyr> Oh, I was using structural editing commands
[19:07:10] <aphyr> They were just a royal pain in the ass haha
[19:07:24] <TimMc> Oh, no, I was responding to what other people were saying above.
[19:07:35] <aphyr> Ah, gotcha :)
[19:08:05] <aphyr> I should give it another shot--structural editing is one of those things that Deeply Appeals to my nerd brain
[19:08:24] <aphyr> it feels like it *should* be better
[19:08:34] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[19:08:34] <TimMc> Were you trying to learn it at the same time as Clojure itself?
[19:08:51] <aphyr> Naw, I was maybe... 3 years in by that point.
[19:08:54] <TimMc> ah, OK
[19:08:56] <aphyr> I'd written Riemann already
[19:09:48] <aphyr> But also I started with Vim in like, the mid-1990s, so my computer habits are Very Fixed
[19:10:38] <TimMc> I think I learned it not *too* many years after learning my first Powerful Editor (emacs).
[19:10:41] <aphyr> it's weird talking to my dad and realizing that though he's a kernel person writing C and I'm a Weird Abstract Lisp Person we use *exactly* the same wall-of-xterms + vim flow
[19:11:49] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[19:12:03] *** Joins: jespada (~jespada@87.74.36.188)
[19:12:22] <tatsumaru> hey guys, why is it that (let [x 3]) requires a vector to bind a name to a value while (def x 3) doesn't?
[19:12:48] <TimMc> Probably because let can take a whole list of bindings.
[19:13:00] <TimMc> and so it needs to be delimited from the body
[19:13:27] <TimMc> (let [x 1, a 2] (println "hi there") (+ a x))
[19:13:49] <TimMc> If you didn't have that vector, there wouldn't be a way to tell the bindings from the body.
[19:14:35] <tatsumaru> ah I see, thanks
[19:17:27] <TimMc> In other Lisps, you would not only delimit the bindings from the body, but even each name-value pait separately. Something like this: (let ((x 1) (a 2)) (println "hi there") (+ a x)) -- Clojure is I think unusual in doing away with those inner wrappers.
[19:17:41] <TimMc> s/pait/pair/
[19:31:51] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[19:31:56] *** Joins: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca)
[19:35:53] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:36:13] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[19:41:47] *** Joins: matty_ma2 (~matt@185.226.144.20)
[19:54:25] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[20:22:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:24:03] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:34:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:34:17] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:50:10] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:54:02] *** Joins: joe_colben (~joe____co@185.190.112.211)
[21:11:29] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[21:30:42] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:31:11] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:43:05] <technomancy> I think trying to stuff structural editing into a character-centric editor is kind of a shitty compromise
[21:43:26] <technomancy> like ... it's still a lot better than no structural editing but a long way off from what the ideal could be
[21:51:52] <puchka> n/exit
[21:52:08] <Solid> no
[21:52:09] <puchka> Sorry
[21:52:12] <Solid> you are trapped here forever
[21:52:25] <puchka> :D
[21:52:38] <puchka> Going to zZZZZz
[21:52:43] <Solid> good night :]
[21:52:57] *** Quits: MajorBiscuit (~MajorBisc@c-001-020-016.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:53:28] <v3ga> xD 
[21:53:29] <puchka> Solid: good ... :)
[21:53:34] *** Quits: puchka (~marius@165.73.240.46) (Quit: leaving)
[21:58:05] <tatsumaru> hey guys I'm struggling to understand what's going on here, can I get a little explanation: https://paste.rs/qFF 
[21:58:17] <tatsumaru> what is being bound to what
[21:59:11] <tatsumaru> I think dalmatian-list is being destructured, but I don't get how a vector is being called at the end
[21:59:38] <v3ga> Cruella de Vil did it =( 
[21:59:58] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[22:00:04] <tatsumaru> yeah, apparently she's into clojure
[22:00:05] <wink> that's pretty bad code imho
[22:00:19] <wink> reusing vars is fine, but not on the same line a double destructure
[22:01:05] <Solid> wink: it's not reusing vars I think? it's just returning [pongo dalmatians]
[22:01:15] <wink> see, I'm not sure!
[22:01:36] <wink> it's destructuring and then ignoring it?
[22:02:17] <tatsumaru> just to clarify dalmatian-list is already defined
[22:02:38] <Solid> it's destructuring and then re-assembling it in a slightly different way
[22:03:00] <technomancy> [:a :b :c :d] -> [:a [:b :c :d]]
[22:03:03] <technomancy> that's all it does
[22:03:08] <Solid> (let [[a & b] [1 2 3]] [a b]) ; => [1 (1 2)]
[22:03:56] <tatsumaru> oh I get it, I didn't know you can call for multiple values with a vector
[22:04:09] <technomancy> what does that mean?
[22:04:19] <technomancy> the point of vectors is to contain multiple values
[22:04:43] <tatsumaru> yeah but I didn't know you could use them with let to call for values
[22:05:05] <tatsumaru> don't worry I am just an idiot
[22:05:15] <wink> I misplaced a ] when reading. see, my head already hurt before :P
[22:13:42] <tatsumaru> what does it mean for a function call to be expensive? requiring a lot of cpu time?
[22:14:52] <ridcully> it could also mean it calls a result from over a modem line
[22:17:13] <ridcully> it is a relative term.  but it'd say, that it means it takes several magnitudes longer to get a result than from your regular functions
[22:18:08] <ridcully> it could also mean excessive resource use (e.g. RAM - only 2-3 concurrent calls can be made or else your process gets OOMkilled)
[22:18:52] <tatsumaru> I see, thanks
[22:19:40] <Para> These days in the cloud age a broken rescaler function for the cluster can also get literally expensive... :)
[22:21:06] <ridcully> yeah it's a broad term.  and also things just can become expensive.  e.g. some db deciding, that a sequential scan now is "optimal"
[22:25:19] <wink> tatsumaru: if it's in the context of laziness it could also mean that it's doing more work than it must. for example (take 3 some-list), then if the list is "each number is one higher than the last" you don't need to compute more than 3 
[22:26:07] <wink> (kind of a hypothetical example though)
[22:30:49] *** Quits: mbuf (~Shakthi@223.178.78.253) (Quit: Leaving)
[22:34:26] *** Joins: joe_colben (~joe____co@185.190.112.211)
[22:35:09] <tatsumaru> wink: can you elaborate please - isn't take 3 computing only 3 anyway?
[22:35:48] <sobel> only from a lazy sequence
[22:36:07] <sobel> (point being, that's why lazy is good)
[22:37:26] <Para> http://www.tianxiangxiong.com/2016/11/05/chunking-and-laziness-in-clojure.html
[22:37:38] <Para> tatsumaru: have a look at that --^
[22:41:31] <wink> thanks. because no I can't right now. and maybe I should shut up today :P
[22:46:04] *** Quits: wink (fhtagn@user/wink) (Quit: Off to see the wizard.)
[22:46:54] *** Joins: wink (fhtagn@user/wink)
[22:51:02] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 240 seconds)
[22:54:26] *** Parts: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca) (ERC (IRC client for Emacs 26.3))
[22:59:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:01:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:12:11] *** Joins: struchu (~struchu@staticline-31-183-167-34.toya.net.pl)
[23:20:19] *** Joins: dfreeman (~dfreeman@user/dfreeman)
[23:29:19] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[23:37:53] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:39:58] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[23:47:56] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[23:52:21] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[23:53:20] *** Quits: matty_ma2 (~matt@185.226.144.20) (Ping timeout: 250 seconds)
[23:57:27] *** Joins: joe_colben (~joe____co@185.190.112.211)
