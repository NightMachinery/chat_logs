[00:17:34] *** Quits: bcasiello__ (~bcasiello@066-189-087-112.biz.spectrum.com) (Read error: Connection reset by peer)
[00:34:54] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:58:39] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 268 seconds)
[01:22:22] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[01:24:12] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:26:19] <pjb> kagevf: note: (mapcar (function funcall) (loop for i below 3 collect (let ((i i)) (flet ((foo () i))  (function foo))))) #| --> (0 1 2) |# 
[01:28:16] <pjb> kagevf: so here, (function foo) returns a closure. But the closure is actually created inside flet, by an expansion to something like (function (lambda () (block foo i)))  but this is hidden because flet/labels are special operators ;-)
[01:31:04] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[01:36:05] <kagevf> pjb: I know (let) is a special form, but it could be defined as defmacro, right? is the only reason to make it a special form a performance consideration?
[01:36:18] <kagevf> I mean "with defmacro" not "as"
[01:43:40] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[01:43:47] <pjb>  kagevf: yes. the distinction between macros and special forms is not very meaningful in CL.  The only thing is that operators marked as special forms don't have to provide a macro to explain their meaning.  If an implementation implements the other CL macros as special forms, it would have to keep a macro definition for code walkers.
[01:56:24] <kagevf> pjb: makes sense, thank you
[02:09:34] *** Joins: Oladon (~olad@98.43.81.226)
[02:55:53] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[03:12:45] *** Quits: minion (~minion@common-lisp.net) (Killed (NickServ (GHOST command used by minion1)))
[03:13:14] *** Joins: minion (~minion@common-lisp.net)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[03:17:40] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[04:33:52] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:57:18] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 268 seconds)
[05:08:34] <kagevf> lisp123: that SO link you posted earlier was asked by the person who writes this blog: http://langnostic.inaimathi.ca/ ... there are a lot of CL posts on there! :)
[05:09:57] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 256 seconds)
[06:05:59] *** Joins: Oladon (~olad@98.43.81.226)
[06:18:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[06:35:18] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:53:51] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[06:58:45] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 256 seconds)
[06:59:48] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[07:07:35] *** Quits: sts-q (~sts-q@91.200.108.171) (Ping timeout: 264 seconds)
[07:14:14] *** Joins: sts-q (~sts-q@212.53.219.212)
[07:27:50] <beach> kagevf: There is no such thing as "a lambda" in Common Lisp, as pjb tried to explain. 
[07:50:06] <lisp123> kagevf: Nice digging up! Will read
[08:01:15] <lisp123> beach: Question for you
[08:01:30] <beach> Sure, go ahead!
[08:02:08] <lisp123> (good morning also!). Someone told me this: I was fascinated by your choice of uninterned symbols as slot names. But after some thought I realized I would never do that in actual code. If you reinitialize that class, you'll lose all the slot values in existing objects. 
[08:02:34] <lisp123> I did a quick test and it seems to be true. Is there something we are missing?
[08:02:59] <beach> That's "normal"...
[08:03:34] <beach> Because by "reinitializing" is probably meant loading from source code.
[08:03:50] <beach> So then the reader is involved, and the reader will create a different symbol each time the form is read.
[08:04:08] <beach> So the old slot will disappear and there will be a new one with a new name. 
[08:05:10] <lisp123> I see, that's interesting
[08:05:45] <beach> There is another "inconvenience" with that idea.  If you ever want to refer to the same slot in a subclass, you can't. 
[08:06:05] <beach> ... like to add an initarg or something like that.
[08:06:49] <beach> Well, I said, "you can't", but of course you can if you saved the slot name in some variable.  But if you just let the reader read the source code, you get a different symbol, so a different slot name.
[08:07:52] <lisp123> I see. But I guess the advantages (code clarity) outweight the disadvantages? And its probably a bad idea to encourage reinitializing classes
[08:07:59] <lisp123> outweigh*
[08:08:02] <beach> You can do (defparameter *slot-name* '#:hello) and then (defclass c1 ((#.*slot-name* ...))) (defclass c2 (c1) ((#.*slot-name* ...)))
[08:08:30] <beach> Er, you reinitialize classes all the time. 
[08:08:48] <beach> Each time you load your (slightly modified) system with ASDF, you reinitialize it.
[08:10:02] <lisp123> I think I got confused then...I thought it was a good idea to use uninterned symbols for slot names
[08:10:31] <lisp123> But I misread things I see
[08:10:37] <beach> Who told you that?
[08:11:16] <lisp123> I was just reading some comments on #commonlisp before but I read them wrongly
[08:11:29] <lisp123> Better fix up all my code now! :)
[08:11:54] <beach> I think I started a trend to name the slots with an initial % character.
[08:12:29] <beach> Just because the slot and the accessor usually have "the same name".  But I want to export the accessor name and not the slot name.
[08:13:15] <lisp123> I will do that. Yep, exactly for what you just said - it confuses a lot of people who just start with CL so it will help them
[08:13:18] <lisp123> Thanks!
[08:13:36] <beach> So then, client code would have to look like package::%slot-name to refer to the slot, and that's two "danger" markers there, the :: and the %.
[08:14:21] <lisp123> Yep, makes sense
[08:14:28] <beach> But you can also go with the advice that Xach provides, which is that any ue of SLOT-VALUE or WITH-SLOTS is a "danger". 
[08:14:49] <beach> And then you can just go ahead and give the slot the same name as the accessor.
[08:16:36] <lisp123> Got it, thanks
[08:16:40] <beach> Sure.
[08:17:38] <beach> In my own code, I never refer to slots except to name them as above.  I always use an accessor, because that's the protocol way of accessing information, whereas a slot is an implementation detail that can change. 
[08:18:42] <lisp123> I am the same. Luckily it seems to be primary style so I was already used to doing that before I knew why
[08:19:29] <lisp123> It took me a while to figure out that accessors were different to slots
[08:27:34] <beach> lisp123: I am curious, what "dialect" of English do you speak?
[08:28:07] <beach> "different to" is common in Australasia, and in parts of the UK.
[08:28:38] <beach> Maybe in South Africa, I don't know.
[08:29:37] <beach> A relatively recent trend in north America is "different than".
[08:29:57] <beach> But I always say "different from" and "similar to".
[08:31:37] <lisp123> beach: Australian (I am returning home to Australia in February), but there must be some US influences in there too
[08:32:11] <lisp123> That's very interesting that "different to" is not used elsewhere!
[08:32:16] <beach> I see.  I am fascinated by dialects.
[08:32:29] <beach> Where do you currently live?
[08:32:34] <lisp123> Dubai
[08:32:44] <beach> I see.
[08:33:34] <lisp123> I wanted to come to the Lisp event in March before I left this part of the world, but alas leaving early
[08:33:53] <lisp123> Perhaps the year after if I can schedule some holidays around that
[08:33:55] <beach> Yes, I see. 
[08:34:09] <beach> Have you spent much time in Europe before?
[08:35:05] <lisp123> Unfortunately not much, even though I am quite close. I have only been to London & Barcelona. I would like to do proper tour of Europe and it seems like an amazing place to live also
[08:35:30] <beach> It is.
[08:36:19] <beach> Though we (me and my (admittedly small) family) found New Zealand to be very nice as well.  But we never had to deal with their social protection system, so I don't know about that one. 
[08:37:22] <beach> France (where we live) apparently has the best health-care system in the world.  Said by Americans and not by the French themselves. 
[08:38:14] <lisp123> I have heard that a few times in Dubai too. Everyone tells me its the best. And health care is so important that its key quality of life factor.
[08:38:22] <beach> Yeah.
[08:38:38] <lisp123> My parents are quite old and Australia has good health care too. So it made sense to return there for the time being
[08:38:50] <beach> Sure.
[08:40:56] <beach> In the US, both insurance and health-care services are private.  In most other places both are public.  In France, insurance is public and service is mixed.  So people do what they do best.  The government pays, and the private provide the care.  
[08:40:57] <beach> But this is never mentioned in the debate in the US.  The example they show is always "everything public" often with long waiting times as a result 
[08:42:24] <lisp123> That's a very interesting model (I didn't know that). Does seem like a good way to do it
[08:42:44] <beach> Also hugely expensive. :)
[08:42:53] <beach> But that's not my problem :)
[08:42:58] <lisp123> :)
[08:43:45] <lisp123> It's really nice of France to look after its population like that
[08:43:51] <beach> It is.
[08:44:12] <beach> And they also look after people who are not citizens, like me. :)
[08:45:01] <lisp123> They are getting a lot in return from high quality computer science innovations ;)
[08:45:57] <beach> Sure.  And they don't have much choice.  I am a citizen of the European Union, so we are basically all living in the same country. 
[08:47:20] <beach> But people outside Europe don't seem to understand much of that. 
[08:47:33] <lisp123> I see, that is interesting. I didn't know that
[08:48:04] <lisp123> I just thought it related to passports and work visas (having never looked at the topic at all)
[08:48:37] <beach> It is much more integrated than that. 
[08:49:42] <lisp123> I see
[08:49:43] <beach> There are no borders.  We arrive in the domestic part of the airport if we go to a different EU (or rather, Shengen) country. 
[08:51:11] <lisp123> That makes it very nice to live in Europe. Perhaps one day I can
[08:51:13] <beach> Nations are fairly artificial in Europe anyway.  There are at least four cultures and languages in France.  Probably the same in Spain, Switzerland, ...
[08:52:25] <lisp123> Yes, that's true (and also true in places like the _united_ states - each state is like a country, to a lesser degree of course)
[08:52:38] <beach> Right.
[08:55:34] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[09:00:35] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 256 seconds)
[09:56:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[10:57:17] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[11:02:22] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 268 seconds)
[11:52:32] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:57:19] *** Joins: treflip (~user@95.79.32.99)
[12:59:01] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[13:04:11] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 265 seconds)
[13:42:13] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[14:48:13] *** Joins: random-nick (~random-ni@87.116.180.220)
[14:58:47] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[15:32:28] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[16:04:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:26:12] *** Quits: treflip (~user@95.79.32.99) (Quit: ERC (IRC client for Emacs 27.2))
[18:22:52] *** Joins: vats (~vats@103.158.91.169)
[19:01:41] *** Joins: paule32 (~paule32@user/paule32)
[19:13:53] *** Joins: thrig (~thrig@207.108.197.156)
[19:15:45] *** Quits: vats (~vats@103.158.91.169) (Remote host closed the connection)
[19:27:33] *** Joins: vats (~vats@103.158.91.169)
[19:58:09] *** Joins: Josh_2 (~user@37.25.47.130)
[20:05:03] *** Quits: vats (~vats@103.158.91.169) (Ping timeout: 268 seconds)
[20:21:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:23:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:26:43] *** Joins: Oladon (~olad@98.43.81.226)
[21:21:42] *** Quits: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com) (Ping timeout: 260 seconds)
[21:36:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:57:05] *** Joins: Jacobis9000 (~jonaholuf@host86-174-205-15.range86-174.btcentralplus.com)
[21:58:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:12:01] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:45:05] *** Quits: defb (~defb@user/defb) (Read error: Connection reset by peer)
[23:06:06] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[23:24:39] *** Joins: nacelle (~oO@wireguard/tunneler/nacelle)
[23:25:28] *** Quits: phossil (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[23:28:39] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
