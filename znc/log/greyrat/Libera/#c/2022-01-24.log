[00:00:01] <pragma-> chiselfuse: yes. instead of something like if((c == getchar()) != EOF) it looks nicer to write if (c = getchar(), c != EOF)
[00:00:16] <fizzie> Approximately nobody seems to do it, though.
[00:00:19] <pragma-> I fat-fingered the first example but...
[00:00:32] <chiselfuse> it's like doing x = func(); if (x==0), though
[00:01:37] <fizzie> More useful in a `while` loop's controlling expression.
[00:03:00] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[00:03:15] <chiselfuse> can i use it in c89?
[00:03:17] <Wulf> while (c = getchar(), c != EOF && c != '\n') { }
[00:03:23] <Wulf> chiselfuse: yup
[00:04:09] <fizzie> `while ((c = getchar()) != EOF && c != '\n') ...` is equally valid though. Just less... symmetric.
[00:04:09] *** Quits: Cyp (~cyp@213.237.88.120) (Excess Flood)
[00:04:13] *** Quits: mahmutov_ (~mahmutov@5.176.28.231) (Ping timeout: 256 seconds)
[00:04:34] *** Joins: Cyp (~cyp@213.237.88.120)
[00:04:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[00:05:12] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[00:05:19] *** Joins: humky_ (~humky@user/humky)
[00:06:34] <fizzie> The one place where people *do* seem to deign to use the comma expression is the third expression of a `for` statement, when they have two or more things to update.
[00:07:47] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[00:08:14] *** Quits: humky (~humky@user/humky) (Ping timeout: 268 seconds)
[00:11:13] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[00:11:38] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[00:11:40] *** Joins: stonkey (~stonkey@user/stonkey)
[00:12:59] <sham1> The comma operator always looks weird IMO
[00:13:53] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[00:15:35] <kplant> thanks, i hate it
[00:17:43] <sham1> I sort of wish that C had this thing from C++ where one could do `if (int c == getchar(); c != EOF && c != 0)`. Would also be more useful with loops although it's more like a for-loop
[00:17:53] <rsjw> you could also do #include <iso646.h> while (c = getchar(), c != EOF and c != '\n') { }
[00:18:14] <sham1> It's one of the features they hit the nail on
[00:23:57] *** Joins: john99 (~john99@138.246.103.34.bc.googleusercontent.com)
[00:24:38] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[00:27:34] <chiselfuse> what's a good variable type choice to store an internet port number 0 to 65535 so that's 16 bits, do i go with uint16?
[00:28:10] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[00:28:45] <pert> chiselfuse: if you're on a POSIX system, you could use in_port_t (which will probably be included by one of your headers anyway), which is an alias for uint16_t
[00:29:07] <chiselfuse> nice, thanks
[00:29:09] <pert> it's defined in netinet/in.h
[00:31:56] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[00:32:06] <john99> ummm, someone work with proc or oracle libraries? i have a nasty bug and i have 0 idea how solve
[00:32:36] <john99> ==3164361==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f8abd6230df bp 0x7ffe1579fef0 sp 0x7ffe1579feb0 T0) in LdiDateFromArray (/bustools/oracle/product/19.3.0/lib/libclntshcore.so.19.1+0x2d40de)
[00:33:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:34:08] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:34:18] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 250 seconds)
[00:35:53] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[00:38:17] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:40:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:40:50] *** Joins: humky__ (~humky@user/humky)
[00:41:09] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[00:42:57] *** Quits: humky_ (~humky@user/humky) (Ping timeout: 240 seconds)
[00:43:33] *** Joins: vboykox (~user@95.134.21.207)
[00:43:45] <vboykox> hi
[00:44:18] <pragma-> sham1: wait what, C++ can do that?
[00:44:30] <pragma-> I mean, I pretty much stopped following C++ since C++2003 or whatever it was, but wow.
[00:45:16] <pragma-> why
[00:45:39] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[00:45:40] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[00:46:18] *** Joins: humky_ (~humky@user/humky)
[00:46:54] <pragma-> does it have different semantics from the comma operator?
[00:47:15] <sham1> pragma-: for convenience. For example `if (auto *ptr = something(); ptr) { /* ptr != nullptr here */ } else { ptr == nullptr here }` With the caveat that one shouldn't use raw pointer and blah blah blah
[00:47:39] <sham1> I think the comma operator has the same semantics there but I could be mistaken
[00:48:01] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[00:48:57] *** Quits: humky__ (~humky@user/humky) (Ping timeout: 240 seconds)
[00:49:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:50:19] *** Joins: humky__ (~humky@user/humky)
[00:53:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:53:22] *** Quits: humky_ (~humky@user/humky) (Ping timeout: 250 seconds)
[00:54:17] *** Quits: humky__ (~humky@user/humky) (Remote host closed the connection)
[01:01:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[01:03:29] *** Joins: cmbrnt (~cmbrnt@static.106.104.76.144.clients.your-server.de)
[01:03:32] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:25:3430:6d5f:c01) (Ping timeout: 240 seconds)
[01:11:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:12:37] *** Quits: kit-ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Ping timeout: 240 seconds)
[01:14:15] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[01:16:16] *** Joins: kit-ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[01:18:18] <chiselfuse> what's the difference between inet_aton() and inet_pton(), they look exactly the same
[01:18:20] *** Parts: linguist (~autistic@user/linguist) (The Lounge - https://thelounge.chat)
[01:19:40] <chiselfuse> except that one handles both ipv6 and ipv4
[01:20:08] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[01:20:26] *** Joins: useretail (~useretail@185.132.19.151)
[01:20:35] *** Quits: Satin (uid193953@user/Seten) (Quit: busy studying etc)
[01:20:55] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 256 seconds)
[01:21:11] <ChoHag_> Probably that.
[01:21:23] <ChoHag_> Did you check their manpages?
[01:21:59] <chiselfuse> ChoHag_: yes
[01:23:08] <chiselfuse> looks like a mess, also is this stuff deprecated in favor of getaddrinfo() and the addrinfo struct? it looks like it, but you get less control too
[01:24:46] *** Joins: graywolf (~wolf@user/graywolf)
[01:26:49] *** Quits: magla (~gelignite@55d42e32.access.ecotel.net) (Quit: Stay safe!)
[01:29:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:31:37] *** Quits: Telvana (~capo@user/telvana) (Ping timeout: 240 seconds)
[01:33:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[01:33:41] *** Joins: CodeAgain (~codeagain@services.bruno.today)
[01:35:06] <twkm> as an aside, avoid inet_*, use get*info instead.
[01:36:26] *** Joins: thelma (uid509475@id-509475.lymington.irccloud.com)
[01:37:06] <fizzie> getaddrinfo with AI_NUMERICHOST|AI_NUMERICSERV in hints.ai_flags and the same address family in hints.ai_family shouldn't be all that different from inet_pton, except you have to dig the struct in_addr or struct in6_addr (if you really only need that) out of the sockaddr result.
[01:37:36] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:38:29] <fizzie> Another difference between inet_aton and inet_pton is that POSIX standardized inet_pton, but never got around to doing it for inet_aton. And the POSIX specification of inet_pton with AF_INET only supports the "a.b.c.d" form, and not the lesser-used "a.b.c", "a.b" and "a" forms of decimal IPv4 addresses.
[01:38:31] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:40:04] <chiselfuse> fizzie: Do  you mean that inet_aton does support the short forms of decimal IPv4?
[01:40:32] <fizzie> I think it usually does, yes.
[01:40:53] *** Quits: CodeAgain (~codeagain@services.bruno.today) (Changing host)
[01:40:53] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[01:42:01] <chiselfuse> twkm: Could you give reasons as to why?
[01:42:15] <chiselfuse> preferring get*info over inet_* i mean
[01:42:47] <sham1> Well get*info is newer for one, better supported
[01:42:50] <twkm> partly so you don't need special code for each ip address type.
[01:43:21] <sham1> Also that
[01:43:34] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[01:43:40] <sham1> get*info handles IPv4 and IPv6 without much effort at all
[01:43:40] <axon> ,paren ++*b
[01:43:41] <candide> axon: ++(*b)
[01:43:53] <chiselfuse> i see
[01:43:59] <sham1> I don't know what I expected from the ,paren with that
[01:44:14] <fizzie> `(++*)b`, of course.
[01:44:16] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:44:57] <axon> now that you put it like that, haha
[01:45:26] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[01:45:50] *** Joins: PortableDave (~portabled@203.87.67.190)
[01:46:03] <sham1> Ah yes, the famous case of preincrementing the dereference operator itself, and making it so that it dereferences two pointer indirections
[01:46:41] *** Quits: Akuli (~Akuli@87-94-108-141.bb.dnainternet.fi) (Quit: Akuli)
[01:47:03] <sham1> But yeah, *b++ is a bit trickier
[01:47:11] <sham1> ,parens *b++
[01:47:12] <candide> sham1: *(b++)
[01:47:23] <sham1> I usually use parentheses for clarity no matter what with that
[01:47:39] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[01:47:47] <sham1> So it's either (*b)++ or *(b++) in code for me
[01:48:55] <zwr> I have a bad habit of avoiding parentheses by just looking up the operator order, I need to stop doing that...
[01:49:47] <sham1> I tend to put parentheses on things that are "obvious" even when it's redundant. Must be the lisper in me
[01:50:01] <axon> `++*b` to me reads like "get the value at *b and increment it", but what I want is "increment the pointer and then get the value" :shrug:
[01:50:18] <sham1> *++b
[01:50:40] <sham1> ,parens *++b
[01:50:41] <candide> sham1: *(++b)
[01:50:45] <axon> so *(++b) is alright too
[01:50:50] <sham1> So yeah that does it
[01:50:51] <tusko> *(b+1)
[01:51:01] <sham1> *(b+=1)
[01:51:08] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:51:14] <sham1> That's the equivalent effect
[01:51:27] <tusko> I def prefer *(++b)
[01:51:29] <axon> I see, I misplaced those parens in my ,paren call
[01:51:29] <sham1> Well, equivalent to what is wanted
[01:51:37] <tusko> that's how you would write it if you were elite
[01:52:09] *** Joins: malina (~malina@user/malina)
[01:53:53] <sham1> C has a lot more precedence blunders so this isn't all that bad
[01:54:25] <sham1> For example, a & b == c is a & (b == c) instead of the more intuitive (a & b) == c
[01:54:38] <sham1> ,parens a & b == c
[01:54:39] <candide> sham1: a & (b == c)
[01:54:52] <sham1> Need to check so I'm not accidentally lying
[01:55:30] *** Joins: BSaboia (~bsaboia@187.19.139.6)
[01:55:43] <tusko> ,parens why were they making covid19 in a lab?
[01:55:44] <candide> tusko: Error: <input>:1:5: before: were
[01:55:58] * tusko smh
[01:56:04] <axon> oh, wait, I was attempting this: `*b = *++b`, and I don't think it can be done that way
[01:56:19] <axon> basically, get the next `char` and continue
[01:56:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:56:33] <sham1> Yeah, can't do that
[01:56:40] <axon> "unexpected access and modification"
[01:56:42] <tusko> axon you need parentheses both for good form and for sanity
[01:57:47] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[01:58:32] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.4)
[01:58:36] <CodeAgain> Hello! Could anyone recommend me some foss tool to analyse the code and point out potential security problems? I'm working on a quite old and huge project and I've found out that there's A LOT of codes with potential buffer overflows, for instance
[01:59:16] <sham1> You need *b = *(b+1); b++;
[01:59:20] <tusko> CodeAgain, commit the changes you want to see in the world.
[01:59:26] <sham1> axon: ^
[01:59:47] <sham1> ASan
[01:59:55] <sham1> Valgrind
[01:59:59] <sham1> CodeAgain: ^
[02:00:06] <CodeAgain> tusko by that you mean it's unlikely that I find something?
[02:00:32] <axon> sham1: yep, assign first and then modify/increment
[02:00:34] <axon> thanks
[02:00:44] <CodeAgain> sham1 valgrind does that?
[02:00:49] <tusko> CodeAgain, nothing that I know of. Usually it seems like seasoned eyes catch those things
[02:01:15] <tusko> salted, crusty eyes
[02:01:20] <CodeAgain> I thought it worked on runtime
[02:01:42] *** Quits: alch (~alch@mi-18-20-237.service.infuturo.it) (Ping timeout: 268 seconds)
[02:02:43] <sham1> You can only really know at runtime
[02:03:01] *** Joins: alch (~alch@151.82.71.153)
[02:03:02] <sham1> But you could also look into static analysis like with clang-tidy or stuff
[02:03:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:03:52] <sham1> But yeah, static analysis won't catch everything. It's undecidable
[02:04:01] <pert> I like cppcheck, despite the name it works for C
[02:04:18] *** Joins: CodePoint (~BitShift@2600:1700:3070:3790:2c60:a960:306:b346)
[02:04:20] <sham1> Clearly it's just the C preprocessor check /s
[02:06:41] *** Joins: WingTillDie (~quassel@2001-b400-e2db-1da8-4062-cd4e-8589-7aec.emome-ip6.hinet.net)
[02:07:32] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[02:07:51] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:07:59] *** Quits: AlbertoGP (~AlbertoGP@p57a9ae96.dip0.t-ipconnect.de) (Quit: Leaving)
[02:08:20] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[02:11:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:11:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:11:40] *** Joins: wroathe (~wroathe@user/wroathe)
[02:12:46] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[02:12:49] *** Joins: NotApplicable (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com)
[02:13:26] *** NotApplicable is now known as Kit
[02:13:27] <CodeAgain> I think static analysis would be a great start to catch like most stuff
[02:13:38] <CodeAgain> pert I'll give a try, thanks
[02:16:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[02:17:01] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[02:18:38] *** Quits: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483) (Quit: Leaving)
[02:19:04] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[02:21:57] *** Quits: BSaboia (~bsaboia@187.19.139.6) (Quit: This computer has gone to sleep)
[02:23:18] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[02:23:28] <john99> ufff, 2 hours of my life to the trash thnks to oracle
[02:24:16] <john99> PROC is the worst doumented software i saw in long time for big projects
[02:27:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:28:46] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[02:30:35] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[02:31:02] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[02:33:30] *** Quits: pizdets (~pizdets@183.182.111.1) (Ping timeout: 250 seconds)
[02:33:51] *** Joins: pizdets_ (~pizdets@183.182.110.153)
[02:36:17] *** Quits: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[02:40:26] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:42:38] *** Joins: liba (~liba@user/liba)
[02:44:37] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:46:57] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[02:49:23] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[02:49:57] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[02:50:15] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[02:55:43] *** Quits: bick (~kotaman@94.46.203.147) (Quit: Lost terminal)
[02:55:53] *** Joins: sargon (~sargon@188.250.185.117)
[02:56:43] *** Quits: sargon (~sargon@188.250.185.117) (Remote host closed the connection)
[02:57:42] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:01:17] *** Joins: SymbioticFemale (~Symbiotic@user/SymbioticFemale)
[03:02:40] *** Joins: Akiva (~Akiva@user/Akiva)
[03:04:57] *** Joins: notzmv (~zmv@user/notzmv)
[03:06:36] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:07:47] *** Quits: CodePoint (~BitShift@2600:1700:3070:3790:2c60:a960:306:b346) (Quit: Never gonna give you up, never gonna let you down...)
[03:08:57] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[03:13:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:14:32] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:17:06] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[03:19:02] *** Joins: crashrep (~crashrep@user/crashrep)
[03:19:38] *** Joins: seninha (~seninha@user/seninha)
[03:22:45] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:23:18] *** Joins: constxd (~brad@142.167.170.88)
[03:23:26] *** Quits: john99 (~john99@138.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[03:23:42] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[03:25:46] *** Quits: crashrep (~crashrep@user/crashrep) (Max SendQ exceeded)
[03:26:07] *** Joins: crashrep (~crashrep@user/crashrep)
[03:28:41] *** Joins: gco (~gco@2601:647:4c80:2424:803b:b5e5:67bc:45cd)
[03:30:09] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:33] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:32:09] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Read error: Connection reset by peer)
[03:34:32] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:35:17] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[03:35:37] *** Quits: malina (~malina@user/malina) (Ping timeout: 240 seconds)
[03:37:10] *** Joins: AmR (~AmREiSa@156.199.9.4)
[03:38:58] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (K-Lined)
[03:42:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:43:40] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 250 seconds)
[03:44:32] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 250 seconds)
[03:45:01] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:45:03] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:47:03] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[03:48:18] *** Joins: pyook (~pyook@user/puke)
[03:51:15] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[03:54:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:55:05] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[03:59:04] *** Joins: ethrl (~ethereal@user/doforlove33)
[04:00:31] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Ping timeout: 256 seconds)
[04:01:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:02:53] *** Joins: xiongxin (~Thunderbi@2409:8954:38c4:44c4:53d0:6eda:c8cd:506c)
[04:03:46] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:03:54] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[04:04:14] *** Quits: ethrl (~ethereal@user/doforlove33) (Quit: WeeChat 2.8)
[04:05:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (K-Lined)
[04:06:30] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[04:07:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:07:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:07:21] *** Joins: wroathe (~wroathe@user/wroathe)
[04:07:30] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 268 seconds)
[04:08:39] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[04:09:35] *** Quits: moog (~moog@107.77.244.61) (Ping timeout: 256 seconds)
[04:09:56] *** Joins: dgjhdgj2 (~sdfgsdfg@user/sdfgsdfg)
[04:10:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:10:51] *** Joins: Soni (~quassel@autistic.space)
[04:11:05] *** Quits: dgjhdgj2 (~sdfgsdfg@user/sdfgsdfg) (K-Lined)
[04:12:07] *** Joins: moog (~moog@107.126.53.97)
[04:12:46] *** Joins: Wulf (~Wulf@user/wulf)
[04:14:19] *** Parts: rsjw (~rsjw@user/rsjw) ()
[04:16:52] *** Quits: bud (~bud@user/bud) (Quit: Leaving.)
[04:17:26] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:17:49] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[04:28:33] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[04:28:34] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:29:37] *** Quits: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:33:57] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Ping timeout: 240 seconds)
[04:38:17] *** Quits: xiongxin (~Thunderbi@2409:8954:38c4:44c4:53d0:6eda:c8cd:506c) (Ping timeout: 240 seconds)
[04:38:33] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[04:39:07] *** Quits: PortableDave (~portabled@203.87.67.190) (Quit: WeeChat 3.3)
[04:40:49] *** Joins: constxd (~brad@142.167.170.88)
[04:41:03] *** Quits: gco (~gco@2601:647:4c80:2424:803b:b5e5:67bc:45cd) (Quit: ZZZzzz…)
[04:41:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:43:28] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Ping timeout: 250 seconds)
[04:44:53] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[04:49:38] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:51:17] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[04:54:17] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[04:54:49] *** Joins: xiongxin (~Thunderbi@120.197.198.189)
[04:54:50] *** Joins: Lumia (~Lumia@208.64.158.255)
[04:55:29] *** Quits: kst`` (~user@cpe-70-95-182-43.san.res.rr.com) (Remote host closed the connection)
[04:55:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:55:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[04:57:15] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[04:57:58] *** Joins: vicfred (~vicfred@user/vicfred)
[05:00:25] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[05:01:55] *** Quits: Flash___ (~basti@lfbn-rou-1-163-11.w83-114.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[05:04:11] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Ping timeout: 256 seconds)
[05:04:55] *** Joins: xiongxin1 (~Thunderbi@120.197.198.177)
[05:06:15] *** Quits: xiongxin (~Thunderbi@120.197.198.189) (Ping timeout: 256 seconds)
[05:06:15] *** xiongxin1 is now known as xiongxin
[05:09:34] *** Quits: xiongxin (~Thunderbi@120.197.198.177) (Client Quit)
[05:09:51] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[05:10:23] *** Joins: novns (~novns@user/novns)
[05:14:14] *** Quits: WingTillDie (~quassel@2001-b400-e2db-1da8-4062-cd4e-8589-7aec.emome-ip6.hinet.net) (Ping timeout: 250 seconds)
[05:15:06] *** Joins: WingTillDie (~quassel@2001-b400-e2db-1da8-f9e5-e949-9fe0-1fb9.emome-ip6.hinet.net)
[05:15:19] *** Joins: Telvana (~capo@user/telvana)
[05:19:02] *** Joins: Flash___ (~basti@lfbn-rou-1-163-11.w83-114.abo.wanadoo.fr)
[05:19:29] *** Quits: constxd (~brad@142.167.170.88) (Ping timeout: 256 seconds)
[05:19:52] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[05:20:20] *** Joins: malloy (~jimery@116.30.223.163)
[05:21:36] *** Quits: WingTillDie (~quassel@2001-b400-e2db-1da8-f9e5-e949-9fe0-1fb9.emome-ip6.hinet.net) (Ping timeout: 250 seconds)
[05:21:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[05:22:45] *** Quits: Flash___ (~basti@lfbn-rou-1-163-11.w83-114.abo.wanadoo.fr) (Client Quit)
[05:24:55] *** Joins: vysn (~vysn@user/vysn)
[05:25:18] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[05:25:33] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[05:30:23] *** Quits: joomla5 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:31:54] *** Joins: WingTillDie (~quassel@2001-b400-e2db-1da8-f9e5-e949-9fe0-1fb9.emome-ip6.hinet.net)
[05:33:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[05:35:52] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[05:37:37] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[05:39:59] *** Joins: Guest38 (~Guest38@202.81.231.204)
[05:43:55] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[05:44:09] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:48:05] *** Joins: Atque (~Atque@user/atque)
[05:48:59] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:55:03] *** Joins: ncrowl (~ncrowl@c-fda770d5.022-170-6c756e3.cust.ownit.se)
[05:55:16] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[05:55:33] *** Quits: nmi (~deflected@user/deflected) (Ping timeout: 256 seconds)
[05:57:35] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[05:59:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[06:01:17] *** Quits: alch (~alch@151.82.71.153) (Ping timeout: 240 seconds)
[06:02:51] *** Joins: constxd (~brad@142.167.170.88)
[06:03:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:04:03] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:04:03] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 256 seconds)
[06:04:36] *** Joins: korg815 (~korg815@user/korg815)
[06:04:48] *** Joins: fe23 (~fe23@2409:8a34:461:9470:8d6d:3934:6ca4:2666)
[06:06:56] *** Joins: skapata (~Skapata@user/skapata)
[06:07:52] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:11:46] *** Joins: vicfred_ (~vicfred@user/vicfred)
[06:11:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:13:37] *** Quits: Lumia (~Lumia@208.64.158.255) (Ping timeout: 240 seconds)
[06:14:02] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 250 seconds)
[06:15:55] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[06:16:02] *** Joins: Authenticity (~integrity@194.5.49.34)
[06:17:20] *** Joins: alex11 (~alex11@user/alex11)
[06:23:50] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[06:32:57] *** Quits: banc- (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:33:13] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[06:35:40] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[06:39:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:39:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[06:39:41] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Client Quit)
[06:42:17] *** Joins: ferdna (~ferdna@user/ferdna)
[06:42:42] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[06:43:54] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[06:44:05] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[06:44:12] *** Joins: Lumia (~Lumia@208.64.158.255)
[06:44:23] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[06:45:11] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[06:45:27] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[06:45:31] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[06:46:22] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[06:48:17] *** Quits: Lumia (~Lumia@208.64.158.255) (Ping timeout: 240 seconds)
[06:49:55] *** Joins: Administrator (~Administr@124.64.22.89)
[06:52:37] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:43] *** Administrator is now known as Guest2303
[06:53:21] *** Joins: alch (~alch@mi-18-52-100.service.infuturo.it)
[06:54:46] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Ping timeout: 250 seconds)
[06:55:07] *** Joins: monchi (~joints@143.198.92.132)
[06:56:38] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[06:58:27] *** Quits: Authenticity (~integrity@194.5.49.34) (Changing host)
[06:58:27] *** Joins: Authenticity (~integrity@user/sdfgsdfg)
[06:58:56] *** Joins: nuxil (~nuxil@141.195.51.213)
[07:00:21] *** Joins: Administrator_ (~Administr@124.64.22.89)
[07:00:26] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:01:19] *** Quits: Guest38 (~Guest38@202.81.231.204) (Quit: Connection closed)
[07:01:54] *** Joins: monchi_ (~joints@143.198.92.132)
[07:02:16] *** Joins: Guest38 (~Guest38@202.81.231.204)
[07:03:16] *** Quits: monchi (~joints@143.198.92.132) (Remote host closed the connection)
[07:03:33] *** Quits: Guest2303 (~Administr@124.64.22.89) (Ping timeout: 256 seconds)
[07:03:37] *** Joins: Lumia (~Lumia@208.64.158.255)
[07:05:01] *** Quits: Authenticity (~integrity@user/sdfgsdfg) (Quit: You attract the wrong things if you have no sense of who you are)
[07:06:01] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:06:47] *** monchi_ is now known as monchi
[07:08:20] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[07:09:01] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com)
[07:17:09] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 256 seconds)
[07:18:19] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[07:20:38] *** Joins: Administrator__ (~Administr@124.64.22.89)
[07:21:01] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[07:21:10] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[07:21:37] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Ping timeout: 240 seconds)
[07:22:04] *** Quits: moog (~moog@107.126.53.97) (Remote host closed the connection)
[07:22:37] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[07:23:19] *** Joins: bud (~bud@user/bud)
[07:23:35] *** Quits: Administrator_ (~Administr@124.64.22.89) (Ping timeout: 256 seconds)
[07:23:49] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[07:24:09] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[07:25:27] *** Joins: bbju (~bbju@103.144.149.220)
[07:25:48] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[07:25:54] *** Quits: Lumia (~Lumia@208.64.158.255) (Quit: ,-)
[07:26:14] *** Quits: bbju (~bbju@103.144.149.220) (Client Quit)
[07:26:35] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:28:08] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[07:31:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:32:44] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[07:33:25] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.4)
[07:33:45] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[07:35:35] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:23] *** bravespear|2 is now known as Ranhir
[07:38:08] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[07:39:39] *** Quits: n1000 (~n1000@user/n1000) (Quit: bbl)
[07:43:35] *** Joins: gco (~gco@2601:647:4c80:2424:803b:b5e5:67bc:45cd)
[07:44:12] *** vinleod is now known as vdamewood
[07:45:07] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[07:45:32] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[07:45:41] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[07:45:52] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:46:25] *** Ranhir is now known as Ranhir|NotHere
[07:46:33] *** Ranhir|NotHere is now known as Ranhir
[07:46:40] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[07:47:30] *** Joins: deflected (~deflected@user/deflected)
[07:48:55] *** Joins: n1000 (~n1000@user/n1000)
[07:59:42] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[07:59:45] *** Joins: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d)
[08:00:54] *** Joins: doric (~doric@24.210.188.186)
[08:01:21] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:01:49] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: You attract the wrong things if you have no sense of who you are)
[08:02:17] *** Quits: deflected (~deflected@user/deflected) (Ping timeout: 240 seconds)
[08:02:45] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[08:03:10] *** Joins: Rounin (~david@84.212.130.215)
[08:03:35] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[08:04:21] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:05:24] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:c17:d8ca:f795:73f0) (Ping timeout: 250 seconds)
[08:05:32] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[08:07:37] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:09:21] *** Joins: Nutte35 (~Nutte@202.153.81.146)
[08:11:28] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Ping timeout: 250 seconds)
[08:12:30] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au)
[08:12:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[08:14:07] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[08:15:09] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[08:15:22] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[08:17:00] *** Joins: Neutron7 (~stillnoob@96.73.191.185)
[08:17:35] *** Quits: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d) (Quit: Leaving)
[08:17:48] *** Joins: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d)
[08:21:01] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[08:21:24] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[08:30:28] *** Quits: nyah (~nyah@94.6.71.219) (Quit: leaving)
[08:30:37] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[08:32:02] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[08:32:08] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[08:34:37] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Ping timeout: 240 seconds)
[08:34:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:40:25] <nuxil> man i hate Cmake. whoever invented it should be hanged by his balles.
[08:40:29] <nuxil> ups wrong channel.
[08:43:41] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[08:44:02] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[08:44:04] <bud> https://www.kitware.com/bill-hoffman/ :'(
[08:44:27] <nuxil> thanks. time for a manhunt :p
[08:44:30] <nuxil> just kidding :D
[08:44:59] <NRK[m]> death to Cmake!
[08:46:10] <NRK[m]> in minecraft*
[08:47:32] <bud> https://0x0.st/oow6.png
[08:49:13] <nuxil> what is this? are you watching cmake tutorials ?
[08:49:29] <bud> it was linked on the bill-hoffman page
[08:50:16] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[08:51:03] <NRK[m]> kek, i forgot they've disabled dislikes on yooutube
[08:52:55] <nuxil> heh. yea.
[08:53:11] <pony> nice
[08:53:17] *** Joins: Hickey_z (~zzy@user/Hickey-z/x-8824799)
[08:53:17] *** Quits: Nutte35 (~Nutte@202.153.81.146) (Ping timeout: 240 seconds)
[08:55:14] *** Quits: scaramanga (~scara@1.239.35.120) (Read error: Connection reset by peer)
[08:56:51] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[08:58:27] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[09:04:47] *** Quits: gco (~gco@2601:647:4c80:2424:803b:b5e5:67bc:45cd) (Quit: ZZZzzz…)
[09:04:59] *** Joins: indigaz (~Indigaz@user/indigaz)
[09:05:47] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:06:45] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[09:08:25] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Ping timeout: 256 seconds)
[09:09:17] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 240 seconds)
[09:09:57] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[09:10:20] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[09:11:33] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[09:12:05] *** Joins: Darkcoal (~user@130.164.162.247)
[09:13:57] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[09:13:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[09:15:35] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Ping timeout: 256 seconds)
[09:16:40] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[09:18:28] *** Joins: Telvana2 (~capo@user/telvana)
[09:18:51] *** Quits: Telvana (~capo@user/telvana) (Read error: Connection reset by peer)
[09:21:36] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[09:21:52] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[09:26:02] *** Quits: WingTillDie (~quassel@2001-b400-e2db-1da8-f9e5-e949-9fe0-1fb9.emome-ip6.hinet.net) (Ping timeout: 240 seconds)
[09:26:37] *** Quits: bud (~bud@user/bud) (Ping timeout: 240 seconds)
[09:27:18] *** Quits: indigaz (~Indigaz@user/indigaz) (Quit: The Lounge - https://thelounge.chat)
[09:31:17] *** Joins: deflected (~deflected@user/deflected)
[09:31:34] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:32:47] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[09:34:15] *** Joins: m4v (~znc@ubuntu/member/m4v)
[09:35:02] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[09:38:13] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[09:40:59] *** Joins: bud (~bud@user/bud)
[09:43:51] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[09:52:48] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[09:54:19] *** Parts: bionade24 (~bionade24@2a03:4000:33:45b::1) (Communi 3.6.0 - http://communi.github.com)
[09:54:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[09:56:51] *** Quits: constxd (~brad@142.167.170.88) (Quit: WeeChat 3.3)
[09:57:12] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[09:59:00] *** Joins: kurahaupo (~kurahaupo@pa49-182-135-128.pa.qld.optusnet.com.au)
[10:04:08] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:05:52] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[10:06:35] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-253-5.pa.qld.optusnet.com.au)
[10:06:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:09:02] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[10:09:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[10:09:46] *** Quits: kurahaupo (~kurahaupo@pa49-182-135-128.pa.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[10:09:54] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:14:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:14:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:14:46] *** Joins: wroathe (~wroathe@user/wroathe)
[10:19:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:19:59] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[10:20:37] *** Joins: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374)
[10:26:22] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:26:37] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Read error: Connection reset by peer)
[10:28:34] *** Joins: kurahaupo (~kurahaupo@pa49-197-232-208.pa.qld.optusnet.com.au)
[10:29:17] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-253-5.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[10:31:04] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[10:35:25] *** Telvana2 is now known as Telvana
[10:36:00] *** Joins: Nutte35 (~Nutte@202.153.81.146)
[10:40:13] *** Quits: Nutte35 (~Nutte@202.153.81.146) (Ping timeout: 256 seconds)
[10:42:39] *** Joins: scaramanga (~scara@1.239.35.120)
[10:44:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:46:07] <sham1> cmake is actually very irritating to use, although I'll be honest, I'd rather use cmake than autotools
[10:47:51] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-234-166.pa.qld.optusnet.com.au)
[10:47:58] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:49:17] *** Quits: kurahaupo (~kurahaupo@pa49-197-232-208.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[10:50:05] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Remote host closed the connection)
[10:51:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[10:53:30] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:54:12] *** Quits: alch (~alch@mi-18-52-100.service.infuturo.it) (Read error: Connection reset by peer)
[10:55:49] <dave0> cmake is 15 meg while regular make is 200k
[10:58:01] *** Joins: iomari891 (~iomari891@105.112.138.38)
[10:58:46] *** Joins: alch (~alch@151.82.76.194)
[10:58:52] <sham1> Well cmake does an entirely different thing than regular make. Indeed, cmake generates things that can then be used by cmake
[10:58:55] <sham1> Err, regular make
[10:59:02] <sham1> cmake generates Makefiles is the point
[10:59:19] <ChoHag_> You could just use make on its own.
[10:59:41] <sham1> If I wanted to do that, I'd use redo
[10:59:52] *** Quits: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d) (Quit: Leaving)
[10:59:56] <sham1> Because I don't really like make
[11:00:19] <ChoHag_> It's often poorly understood, yes.
[11:03:06] *** Joins: kurahaupo (~kurahaupo@pa49-197-33-177.pa.qld.optusnet.com.au)
[11:03:38] <markand> POSIX make is fine for simple projects
[11:04:20] <markand> but once you need portability you're pretty much on your own
[11:05:57] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-234-166.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[11:08:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[11:08:54] *** Quits: n1000 (~n1000@user/n1000) (Quit: bbl)
[11:09:09] *** Joins: diophantoz (~diophanto@user/diophantoz)
[11:09:58] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[11:10:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:10:42] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[11:11:10] *** Joins: n1000 (~n1000@user/n1000)
[11:13:33] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[11:14:35] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 256 seconds)
[11:14:47] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[11:15:52] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[11:17:30] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[11:21:35] *** Quits: bud (~bud@user/bud) (Ping timeout: 256 seconds)
[11:27:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[11:31:06] *** Joins: NEYi (~NEYi@109.251.216.38)
[11:31:28] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[11:32:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:32:46] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[11:32:53] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[11:33:33] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[11:35:33] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Ping timeout: 256 seconds)
[11:36:55] *** Joins: loganlee (~Thunderbi@user/loganlee)
[11:37:29] *** Joins: fengdaolong (~fengdaolo@58.48.87.13)
[11:40:52] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:47:24] *** Joins: Hickey_z_ (~zzy@60.176.151.15)
[11:47:58] *** Joins: aradesh (~aradesh@user/aradesh)
[11:48:01] <NRK[m]> posix make only works when you have all your sources in the same directory
[11:49:26] *** Quits: Hickey_z (~zzy@user/Hickey-z/x-8824799) (Ping timeout: 250 seconds)
[11:53:23] *** Joins: Hickey_z (~zzy@58.100.228.244)
[11:53:23] *** Quits: Hickey_z (~zzy@58.100.228.244) (Changing host)
[11:53:23] *** Joins: Hickey_z (~zzy@user/Hickey-z/x-8824799)
[11:54:12] *** Quits: Hickey_z_ (~zzy@60.176.151.15) (Ping timeout: 250 seconds)
[11:55:01] *** Joins: Red (~Red@97.109-247-81.customer.lyse.net)
[11:56:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:58:53] <sham1> Or different directories
[11:59:04] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: You attract the wrong things if you have no sense of who you are)
[11:59:20] <NRK[m]> out of source builds are painful in posix make. though you can hack it together.
[12:02:43] *** Quits: thelma (uid509475@id-509475.lymington.irccloud.com) ()
[12:02:45] <NRK[m]> i'd much rather use GNU make at that point. ability to do `obj/%.o: src/%.c` is pretty nice
[12:03:17] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[12:07:51] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[12:12:27] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[12:12:32] <caze> Just write your own script.
[12:13:58] *** Quits: Guest38 (~Guest38@202.81.231.204) (Remote host closed the connection)
[12:14:38] *** Joins: exz (~exezin@oods.net)
[12:15:49] <sham1> Yeah, out-of-source is annoying, but in-source works fine
[12:17:34] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-7d62-2d2-3a32-97de.fixed6.kpn.net)
[12:22:03] *** Quits: Administrator__ (~Administr@124.64.22.89) (Quit: Leaving)
[12:23:07] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:26:21] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:26:37] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:27:41] *** Quits: alch (~alch@151.82.76.194) (Ping timeout: 256 seconds)
[12:28:20] <markand> NRK[m], nope
[12:29:37] *** Joins: alch (~alch@151.68.147.84)
[12:30:25] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[12:30:48] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[12:31:52] *** Joins: lleo (~leo@89-200-7-2.mobile.kpn.net)
[12:35:42] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[12:36:53] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[12:37:30] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:38:12] *** Quits: lleo (~leo@89-200-7-2.mobile.kpn.net) (Read error: Connection reset by peer)
[12:39:50] *** Joins: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483)
[12:40:54] *** Joins: xor0xFF (~john@2601:248:600:2c2:616c:60c9:9ec8:604c)
[12:51:40] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[12:51:57] *** Joins: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr)
[12:52:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[12:53:25] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it) (Ping timeout: 240 seconds)
[13:08:19] *** Quits: domve (~dom@user/domve) (Ping timeout: 268 seconds)
[13:08:24] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:11:23] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:13:09] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:13:53] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:54] *** Joins: remavas (~Remavas@user/remavas)
[13:15:05] <NRK[m]> markand: how do you do out of source build with POSIX make?
[13:15:30] *** Joins: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d)
[13:17:18] <markand> this is not the same question as your first statement, I was responding to the "all your sources in the same directory" which, this is not true though
[13:21:14] <NRK[m]> i didn't mean "only works" literally.
[13:21:43] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[13:22:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:22:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:22:03] *** Joins: wroathe (~wroathe@user/wroathe)
[13:23:36] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[13:23:47] *** Quits: vboykox (~user@95.134.21.207) (Ping timeout: 256 seconds)
[13:24:54] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-39-77.pa.qld.optusnet.com.au)
[13:25:13] *** Joins: vboykox (~user@20-56-134-95.pool.ukrtel.net)
[13:26:34] *** Joins: MajorBiscuit (~MajorBisc@c-001-025-008.client.tudelft.eduvpn.nl)
[13:26:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:27:19] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:27:47] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[13:27:57] *** Quits: kurahaupo (~kurahaupo@pa49-197-33-177.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[13:29:05] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[13:30:28] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:31:55] *** Joins: kish` (~aqua@user/aqua)
[13:33:37] *** Quits: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d) (Ping timeout: 240 seconds)
[13:34:06] *** Joins: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d)
[13:34:11] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[13:34:44] *** Quits: liba (~liba@user/liba) (Ping timeout: 250 seconds)
[13:35:10] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[13:35:28] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[13:36:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:36:48] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[13:38:01] *** Joins: complexnumber (~brett@59-102-21-42.tpgi.com.au)
[13:38:03] *** Parts: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) ()
[13:38:37] *** Quits: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d) (Ping timeout: 240 seconds)
[13:39:38] *** Joins: luizfrds (~Luiz@152.250.243.147)
[13:40:27] *** Quits: remavas (~Remavas@user/remavas) (Quit: WeeChat 2.8)
[13:41:14] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[13:41:24] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:41:37] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[13:44:32] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 240 seconds)
[13:48:19] *** Joins: seninha (~seninha@user/seninha)
[13:52:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:52:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:52:51] *** Joins: wroathe (~wroathe@user/wroathe)
[13:53:09] *** Joins: stonkey (~stonkey@user/stonkey)
[13:57:17] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:57:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:59:49] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[14:00:28] *** Joins: marlboro (~i.am@user/marlboro)
[14:06:58] *** Joins: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it)
[14:10:18] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[14:11:24] <jemius> The magic tool SonarQube tells me that the compiler might optimize a call to memset() away. Is that true, might that happen? I would not expect it when programming C. The philosophy is: The programmer has control
[14:12:34] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[14:13:44] <fizzie> Sure, if it can show that it does not affect the observable behavior. For example, if you memset a local variable that's never referred to.
[14:13:46] *** Joins: malina (~malina@user/malina)
[14:14:45] <jemius> fizzie, than it is meaningless, of course. But if I set some memory area to 0 of which other threads still have references, removing the call would be quite deadly
[14:15:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:15:42] <bookworm> only if they do something with the ref
[14:15:59] <bookworm> only having a pointer is not an observable behavior
[14:16:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:16:20] *** Joins: domve (~dom@2605:6400:30:f922:1337::)
[14:16:20] *** Quits: domve (~dom@2605:6400:30:f922:1337::) (Changing host)
[14:16:20] *** Joins: domve (~dom@user/domve)
[14:17:31] <NRK[m]> jemius: i think that's what happened with openssl
[14:17:33] <fizzie> It can't just *randomly* remove `memset` calls, though. But it might remove a `memset` that's trying to zero out some sensitive data that you're not going to *use*, but don't want remaining in memory either just in case it's accessed due to a bug.
[14:18:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:18:28] <fizzie> There's a C23 proposal to standardize `memset_explicit` for that sort of scenarios: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2897.htm
[14:18:41] <NRK[m]> where compiler optimized away their memset 0 call because that memory was never read again.
[14:18:43] <dave0> i've seen gcc turn something like this:   int array[10]; memset(array, 0, sizeof(array)); printf("%d ", array[5]);    into    mov [array+5*4],0
[14:18:52] <jemius> there is already memset_s as an extension
[14:19:12] <dave0> still with the printf, but only array[5] set to zero
[14:19:30] <bookworm> https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/yang
[14:19:31] <candide> Title of bookworm's link: Dead Store Elimination (Still) Considered Harmful | USENIX
[14:19:31] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[14:19:39] <jemius> Premature Optimization is the root of all evil, as Knuth has said
[14:19:53] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.4) (Ping timeout: 256 seconds)
[14:20:16] <fizzie> GCC turns that into `printf("%d ", 0);` and forgets about the array completely.
[14:20:23] <libh> I'm very happy knowing I understand the point of pointers, before I didn't understand call by value only makes a copy of the value and you need pointers in a function that swaps numbers to have an actual effect on the original value.
[14:20:33] <dave0> fizzie: ooh okay that's one step better
[14:21:05] <jemius> dunno, would it not be better to change compilers' behavior not to change such things, instead of introducing new functions? IMO you use C because you want direct control, without magic things happening behind your back
[14:21:33] <dave0> magic things improves benchmark scores
[14:21:36] <NRK[m]> you can disable optimizations if you wish, -O0
[14:22:27] <dave0> NRK[m]: do you know of anyone who does that even for releases? purposely use -O0 perhaps because the code is dodgy?
[14:22:34] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.135)
[14:22:35] <NRK[m]> recently read a gcc bug report where someone was complaining the compiler removed his `if (a + 100 < a)` check for signed overflow.
[14:22:56] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.135) (Max SendQ exceeded)
[14:23:20] <jemius> dave0, I guess those are the people who enter their bios to overclock the cpu, as well ^^
[14:23:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.135)
[14:23:37] <dave0> is it always broken c code if turning on optimizations breaks it?
[14:23:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:23:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:23:38] *** Joins: wroathe (~wroathe@user/wroathe)
[14:23:46] <NRK[m]> the gcc maintainers ofcourse didn't care, "it's ub, your code is broken. we care more about performance than correctly compiling existing code" and suggested the INT_MAX trick to detect overflow before it occured.
[14:24:23] <dave0> bad code? uh-huh bad compiler
[14:24:28] <NRK[m]> what i found funny is that they claimed to be caring about performance while suggesting less performant alternative.
[14:24:56] <bookworm> isn't the point of unsigned that you do get defined wrap around?
[14:25:07] <bookworm> why is that UB?
[14:25:29] <NRK[m]> i explicitly said `signed`
[14:25:52] <bookworm> ah, reading comprehension lacks coffee, sorry
[14:25:54] <jemius> NRK[m], the more I learn about how work is done internally at gnu the more scared I become. Comparing musl and glibc is like day and night
[14:26:30] <NRK[m]> it's hard to even find the definition of their functions in glibc
[14:26:37] <NRK[m]> it's all hidden behind 50 macos
[14:26:40] <NRK[m]> macros*
[14:26:56] <jemius> Drew wrote a funny article about that https://drewdevault.com/2020/09/25/A-story-of-two-libcs.html
[14:27:19] <NRK[m]> though, u cannot deny that their shit is performant.
[14:27:32] <jemius> glibc segfaults when you pass an invalid number to isalnum() :D
[14:27:56] <NRK[m]> sounds like skill issue
[14:28:34] <dave0> jemius: it may be a very stupid rule when it comes to the ctype.h functions
[14:28:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:28:49] <jemius> Dunno people... whenever I hear the word "performance" at work I get angry. We have DSP guys, they may talk about performance. But userspace programmers who talk about microseconds... dunno
[14:29:00] <dave0> jemius: you must cast the parameter to isalnum isalpha isdigit etc. to an unsigned char
[14:29:17] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Ping timeout: 240 seconds)
[14:29:35] <dave0> jemius:   char a = 'something'; if(isalpha(a)) { ... }    is an error.. it must be   if(isalpha((unsigned char)a)) { ... }
[14:30:06] <dave0> i can't think of anything stupider
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:20] *** Joins: Burgundy (~NA@86.121.143.206)
[14:30:23] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:31:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[14:31:33] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: You attract the wrong things if you have no sense of who you are)
[14:32:16] <dave0> isalpha doesn't work for char
[14:32:44] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:53] <dave0> i mean it's UB if you forget to close your double quotes, but character type macros not working on characters??
[14:33:42] <jemius> Most people agree that strings are the most broken thing about C. But no one has so far succeeded in providing something better at the same abstraction level
[14:34:15] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[14:34:35] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:58] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[14:36:43] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:36:57] *** Quits: domve (~dom@user/domve) (Ping timeout: 240 seconds)
[14:36:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[14:38:26] *** Quits: complexnumber (~brett@59-102-21-42.tpgi.com.au) (Remote host closed the connection)
[14:39:50] *** Joins: shivesh (~shivesh@user/shivesh)
[14:40:11] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:40:29] *** Joins: domve (~dom@107.189.3.177)
[14:40:29] *** Quits: domve (~dom@107.189.3.177) (Changing host)
[14:40:29] *** Joins: domve (~dom@user/domve)
[14:41:02] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[14:42:21] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:42:51] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[14:44:22] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[14:44:26] *** Joins: acm1pt (~netadm666@45.178.2.0)
[14:48:11] *** Joins: cursey (~cursey@user/cursey)
[14:50:37] *** Joins: constxd (~brad@142.167.170.88)
[14:50:47] *** Joins: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d)
[14:52:04] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.135) (Remote host closed the connection)
[14:52:23] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[14:53:17] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[14:54:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:54:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:54:25] *** Joins: wroathe (~wroathe@user/wroathe)
[14:58:19] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.135)
[14:58:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:59:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:59:48] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:04:57] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[15:04:57] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 240 seconds)
[15:05:51] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:06:20] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Remote host closed the connection)
[15:11:39] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Ping timeout: 268 seconds)
[15:13:19] *** acm1pt is now known as admred2018
[15:19:18] *** admred2018 is now known as lucho666
[15:23:41] <fizzie> dave0: It's "just" following the same convention as getchar/putchar, of representing characters as "unsigned char converted to int, or EOF".
[15:23:45] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[15:24:08] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:24:37] <fizzie> It does make simple character-by-character getchar loops (slightly) more convenient.
[15:24:41] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-39-77.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[15:24:44] *** Joins: kts (~kts@103.73.237.245)
[15:25:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:25:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:25:12] *** Joins: wroathe (~wroathe@user/wroathe)
[15:28:07] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[15:29:04] <dave0> it's rubbish
[15:29:13] <fizzie> FWIW, pretty sure glibc does cater for misusing the <ctype.h> functions and works correctly from CHAR_MIN to UCHAR_MAX, by making the table lookup with an offset. It's just completely invalid numbers that it will crash on.
[15:29:52] <dave0> fizzie: how hard would it be to put a cast in glibc instead of pushing the burden to the programmer?
[15:30:12] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[15:30:18] <dave0> are we benchmarking glibc isalpha?
[15:30:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:31:20] *** Joins: jiploading (~vjipac@user/vjipac)
[15:31:59] <sham1> RE: strings: Pascal has their AnsiString thing which stores the length of the string in a byte before the actual content. It has the length limitation C strings don't have, but it also has an explicit length which is neat. And it can of course be had in C: typedef struct AnsiString { uint8_t len; char data[]; } AnsiString;
[15:32:05] <fizzie> Strictly, it would be incorrect to cast because it would treat EOF equivalent to some `unsigned char` value.
[15:32:34] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[15:33:08] <dave0> fizzie: that's a trivial test before you cast
[15:33:36] <dave0> ,cc printf("%ld ", (long)isalpha(EOF));
[15:33:39] <candide> dave0: 0
[15:34:10] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[15:34:14] <fizzie> Both Go strings and C++ std::string_view's are essentially a (pointer, length) pairs that are passed by value, that seems to me to be the right way of dealing with strings.
[15:34:15] <dave0> if(c==EOF)return 0;c&=UCHAR_MAX;
[15:34:24] <dave0> yeah a tuple
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:54] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:36:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:25] *** Joins: alex11 (~alex11@user/alex11)
[15:38:07] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:40:02] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[15:41:37] *** Quits: jiploading (~vjipac@user/vjipac) (Ping timeout: 240 seconds)
[15:42:03] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2022/01/23 UTC) 64 Bit)
[15:42:23] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:42:53] *** Quits: kts (~kts@103.73.237.245) (Quit: Konversation terminated!)
[15:43:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:46:07] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:46:09] *** Quits: pyook (~pyook@user/puke) (Remote host closed the connection)
[15:48:25] *** Joins: pyook (~pyook@user/puke)
[15:49:09] *** Quits: coruja (~coruja@user/coruja) (Quit: WeeChat 3.4)
[15:49:26] *** Joins: coruja (~coruja@user/coruja)
[15:49:29] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:e928:2d70:ece:df34)
[15:50:59] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[15:51:40] *** Joins: kts (~kts@103.73.237.245)
[15:53:14] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[15:53:57] <libh> I'm just experimenting around with memory management in C, I found an example online that successfully allocated and used 1 GB of memory. But is using memset dangerous? Like how get() is dangerous? https://paste.debian.net/hidden/9c7f1e5c/
[15:54:10] <sham1> fizzie: that's also how Rust handles its &str which are just string slices. So yeah, it does make sense to have strings be data plus length. C is a bit late for this but other languages can learn from it
[15:54:38] <sham1> libh: memset isn't dangerous
[15:54:52] *** Quits: kts (~kts@103.73.237.245) (Client Quit)
[15:55:00] <sham1> Unlike gets, which I'm assuming you're referring to, memset cannot go over the length specified in its parameters
[15:55:47] <libh> I didn't understand at first that malloc only reserves memory, it doesn't actually use the memory it reserves. So I'm learning from experimentation on how to actually use the memory I reserve.
[15:57:23] <libh> I hear a lot of he said she said that so and so function is dangerous, so I wanted a second opinion if this was fact or fiction.
[15:57:45] <fizzie> Functions don't kill people, C programmers calling functions kill people.
[15:57:52] <ChoHag_> memset is not inherently dangerous.
[15:58:02] *** Quits: omegatron (~some@p5484973e.dip0.t-ipconnect.de) (Quit: Power is a curious thing.It can be contained, hidden, locked away,and yet it always breaks free.)
[15:58:08] <ChoHag_> You are responsible for giving it pointers and ranges which are valid.
[15:58:11] <ChoHag_> That's where the danger lies.
[15:58:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:58:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:58:12] *** Joins: wroathe (~wroathe@user/wroathe)
[15:58:27] <libh> Thanks ChoHag_, memset is a tool and tools can be used improperly.
[15:59:28] <dave0> you have to pay attention to the irrelevant
[16:00:04] <sham1> Meanwhile gets is straight up dangerous and impossible to use safely
[16:00:08] <sham1> And thus it was removed
[16:00:58] <dave0> sprintf is another bad one
[16:01:04] <dave0> lucky there is snprintf now
[16:01:09] <libh> why is sprintf bad?
[16:01:31] <dave0> it's almost impossible to determine the amount of memory it needs in advance
[16:01:48] <sham1> Not just almost
[16:02:08] <libh> Any other functions I should avoid at all costs other than gets() and sprintf()?
[16:02:09] <sham1> Straight up impossible unless your usage is very trivial
[16:02:15] <sham1> scanf
[16:02:15] <fizzie> In unrelated news, `size_t mem_size = 1024 * 1024 * 1024;` is slightly concerning. Since ints tend to be at least 32 bits, it does work in practice, but if you go any steps bigger, it'll start to go wrong.
[16:02:22] <fizzie> ,cc -w size_t mem_size = 2 * 1024 * 1024 * 1024; printf("%zu", mem_size); // not 2 gigabytes
[16:02:24] <candide> fizzie: 18446744071562067968
[16:02:51] <ChoHag_> libh: printf et al do no (run-time) checking of their arguments.
[16:03:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[16:03:05] <ChoHag_> They will happily try to print an integer as if it's a pointer to a string, for example.
[16:03:07] <sham1> They can't
[16:03:26] <libh> I thought the compiler will warn me if I use the wrong format for printf.
[16:03:40] <ChoHag_> Modern compilers do a good job of that but it's unwise to rely on it.
[16:03:49] <dave0> libh: there's nuance.. it's a bit like goto .. people have different opinions
[16:04:01] <libh> I personally like printf.
[16:04:39] <ChoHag_> I like goto.
[16:04:50] <sham1> I like goto for the right things
[16:04:59] <ChoHag_> But it's like seasoning. Goes south fast.
[16:05:00] <dave0> libh: it makes your job a little easier if you always use printf to output stuff, even if you can do it with a different function
[16:05:28] <dave0> libh: printf is worthwhile to learn in detail.. there's lots of options
[16:05:49] *** Guest1252 is now known as robyndrake
[16:05:52] *** robyndrake is now known as robyn
[16:06:02] *** Quits: robyn (~robyndrak@154.16.118.240) (Changing host)
[16:06:02] *** Joins: robyn (~robyndrak@user/robyndrake)
[16:06:09] <dave0> of course i cast everything to int and only use %d   :-p
[16:06:09] <ChoHag_> printf is extremely useful for debugging. eg. foo = malloc(...); printf("%x.\n", foo);
[16:06:25] <sham1> "%" PRIu64
[16:06:28] <libh> Thing with printf is that I'm so used to printf that I just can't use anything else for stdout.
[16:06:42] <ChoHag_> That's probably good enough for now.
[16:06:42] <sham1> puts
[16:06:43] <dave0> libh: nothing wrong with that
[16:06:58] <dave0> it's consistent
[16:09:47] <axon> is there a tool/library that can dump the contents of any type (struct, array, array of structs, etc.) to stdout?
[16:10:33] <sham1> You'd need to generate it, but no
[16:10:43] <sham1> I don't think there is a tool
[16:12:08] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:12:09] <libh> axon, maybe this will work? https://stackoverflow.com/questions/49076036/print-an-array-of-structs-c
[16:12:25] *** Joins: liba (~liba@user/liba)
[16:14:03] <axon> oh, but that's doing it by hand; I was after something more like `dump(my_array_of_structs)` :)
[16:14:36] <libh> Yeah I don't think such a function exists. You'll have to hack together something yourself.
[16:15:38] <axon> I imagine the reason for its non-existence is the lack of runtime introspection
[16:15:50] <libh> Also, you could try this simpler example axon. https://stackoverflow.com/questions/41304497/print-the-structure-fields-and-values-in-c
[16:16:18] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:e928:2d70:ece:df34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:20:34] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:e928:2d70:ece:df34)
[16:22:51] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[16:24:13] <Learath2> well the only solution to that problem isn't runtime introspection, Rust e.g. handles that at compile time
[16:24:36] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:e928:2d70:ece:df34) (Client Quit)
[16:25:10] <twkm> i worry you aren't learning c from a good resource axon.
[16:25:38] *** Joins: HaMsTeRs (~Thunderbi@210.3.213.4)
[16:26:09] <libh> I use C because higher level languages like python are just boring after using C for a while.
[16:26:27] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Ping timeout: 256 seconds)
[16:28:37] <chiselfuse> i want to take a conditional path only if both ONE and TWO aren't defined, can I do   `#ifndef ONE TWO`  ?
[16:28:39] *** Quits: alch (~alch@151.68.147.84) (Read error: Connection reset by peer)
[16:28:44] *** Atque is now known as hammond
[16:28:55] *** hammond is now known as Atque
[16:29:33] <twkm> no.
[16:29:41] <chiselfuse> then how do i do it?
[16:30:24] <twkm> there are two ways, one involving a logical operator the other using nesting.
[16:30:43] <chiselfuse> could you show me both please?
[16:30:45] <APic> lol
[16:31:01] <APic> ,o0(Please do my Homework)
[16:31:10] <candide> A﻿Pic, Yes.
[16:31:37] <chiselfuse> i have 20kbps internet, browsing web for answers takes very long sorry :P
[16:32:07] <APic> Use lynx or w3m or links2
[16:32:12] <sham1> #if ONE && TWO
[16:32:16] <sham1> Well
[16:32:22] <sham1> #if defined(ONE) && defined(TWO)
[16:32:44] <chiselfuse> plus captchas don't even load because of the speed so i have to use garbage search engines
[16:32:58] *** Quits: hinata (~hinata@2405:204:9512:682d:ace9:ca9e:83a2:95d) (Quit: Leaving)
[16:33:03] *** Joins: alch (~alch@151.34.193.117)
[16:33:06] <chiselfuse> could i also do:
[16:33:08] <APic> Poor You 😉
[16:33:18] <chiselfuse> #ifdef ONE
[16:33:24] <X-Scale> chiselfuse: install lynx
[16:33:25] <chiselfuse> #elif TWO
[16:33:32] <chiselfuse> #endif
[16:33:33] *** Joins: bkhl_ (~bkhl@user/bkhl)
[16:33:35] <chiselfuse> ?
[16:33:43] <sham1> #elsifdef
[16:34:04] <sham1> #elifdef
[16:34:15] <sham1> Although keep in mind that it only exists in C2023
[16:34:16] <chiselfuse> X-Scale: i use it already, but google doesn't allow me to search there
[16:34:23] *** Quits: bkhl (~bkhl@user/bkhl) (Ping timeout: 256 seconds)
[16:34:48] <sham1> So you'd have to do #ifdef ONE\n #elif defined(TWO)\n #endif if you're targeting older stuff
[16:35:29] *** bkhl_ is now known as bkhl
[16:36:05] <chiselfuse> looks funny, idk if i'm doing something the wrong way after all
[16:37:59] <chiselfuse> sham1: why wouldn't #ifdef ONE && TWO  work?
[16:38:14] <chiselfuse> looks inconsistent
[16:38:30] <NRK[m]> don't search the web for this type of stuff. just use the gcc manual.
[16:38:49] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:38:52] <sham1> chiselfuse: because that's for when you want to test whether the values of ONE and TWO are truthy
[16:38:57] <twkm> playing 20 questions are a terrible way to learn c.
[16:38:58] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[16:38:59] <sham1> Instead of them being defined
[16:39:02] <NRK[m]> chiselfuse: https://gcc.gnu.org/onlinedocs/cpp/Index-of-Directives.html#Index-of-Directives
[16:39:34] <chiselfuse> NRK[m]: heh, i went looking in gcc(3)
[16:39:46] <sham1> Yeah, GNU man-pages are sad
[16:39:49] <chiselfuse> gcc(1)*
[16:39:57] <sham1> If you need docs, you look at the info-pagss
[16:39:58] <twkm> gnu prefers info.
[16:40:01] <axon> twkm: "i worry you aren't learning c from a good resource"
[16:40:04] <axon> why would you say that?
[16:40:11] <sham1> Of course they do, it's their own format
[16:40:21] <NRK[m]> info pages are cursed
[16:40:48] <twkm> you seem to think there might be some magical function, rather than having learned that you would have to write it.
[16:41:12] <NRK[m]> ,oO( q to quit, that's all i need to know about info-pages )
[16:41:25] <chiselfuse> < sham1> chiselfuse: because that's for when you want to test whether the values of ONE and TWO are truthy
[16:41:31] <chiselfuse> this makes no sense to me
[16:41:34] <axon> twkm: there could be a magical tool that parses the files and keeps track of what and where it's defined
[16:41:42] <axon> as someone else said, the compiler could do that
[16:41:50] <axon> and expose some magical function
[16:42:27] *** Quits: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483) (Ping timeout: 276 seconds)
[16:42:34] <chiselfuse> sham1: so I use #ifdef ONE && TWO not to check if they are if(DEF)ined, but to check if they are truthy?
[16:42:37] *** Joins: Keikai (~fedalio@45.156.31.141)
[16:42:41] *** Parts: Keikai (~fedalio@45.156.31.141) ()
[16:42:54] <sham1> You can't do #ifdef ONE && TEO
[16:43:14] *** Quits: dsrt^ (~dsrt@207.182.73.202) (Remote host closed the connection)
[16:43:16] <sham1> You have to use #if defined(ONE) && defined(TWO)
[16:43:25] *** Joins: r_n_d (~r_n_d@gateway/tor-sasl/rnd/x-30212483)
[16:43:51] *** Quits: |smlckz| (smlckz@user/smlckz) (Ping timeout: 250 seconds)
[16:43:58] <chiselfuse> NRK[m]: well thankfully that website you gave is light enough :)
[16:44:07] <axon> after half a century since C's inception, I would expect someone to have put some effort into building that, but that doesn't seem to be the case
[16:44:49] <sham1> axon: how would it know what type you're feeding into the dump function
[16:44:52] <NRK[m]> what are you trying to do, debug?
[16:45:21] *** Joins: |smlckz| (smlckz@user/smlckz)
[16:45:22] <chiselfuse> NRK[m]: no, just writing different compile paths
[16:45:27] <axon> sham1: same way `typeof` does, I guess
[16:45:44] <dave0> you can sorta use gdb to print structures
[16:45:48] <NRK[m]> not you, axon.
[16:45:53] <sham1> So it can't be a function in that case. Good to know
[16:45:59] <dave0> does it have to be in c?
[16:46:35] <axon> sham1: yeah, it wouldn't have to be a function; whatever works
[16:46:49] <sham1> Your best bet would be to generate the dumping procedures for your types
[16:47:26] <axon> NRK[m]: yeah, was asking if there was a way to dump a struct at runtime without having to write the printfs yourself
[16:47:36] *** Quits: lucho666 (~netadm666@45.178.2.0) (Quit: lucho666)
[16:48:20] <NRK[m]> well, there's plenty of debuggers. use one of them.
[16:48:43] <NRK[m]> printf debugging is inefficient unless you have a really good clue on where things are going wrong.
[16:48:51] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:139:4310:8132:8de8)
[16:50:24] <axon> yup
[16:50:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:aa5f:93ea:3b88:5ff5)
[16:50:44] <chiselfuse> sham1: is there a way to negate that? like   `#if !(defined(ONE) && defined(TWO)` or do i just let the body empty and use an #else?
[16:50:51] <sham1> I tend to use both debuggers and printf-debugging depending on the situation. Some bugs disappear if one attaches a debugger and those are just fun
[16:51:13] <sham1> chiselfuse: what you posted works, you just use the logical NOT
[16:51:53] <sham1> Or if one wants to use De Morgan, #if !defined(ONE) || !defined(TWO)
[16:52:02] <twkm> or.  hmm.
[16:52:06] <chiselfuse> sham1: but yours looks nicer
[16:52:08] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R/2R->0)
[16:52:25] <dave0> chiselfuse: ! will work
[16:55:09] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[16:56:36] <sham1> Some bugs are also fun when you do stuff like -O3 and then it's like "oh, gotta write this some other way so it's not so UB-ey or whatever". Gotta just hope that one has a Sufficiently Smart Compiler™ so said code can be optimized properly
[16:57:53] <NRK[m]> i just default at -Ofast
[16:58:57] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:58:57] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[16:58:59] <sham1> That also works. Anything that can break badly written code is good. Including UBSan a bit
[17:05:29] *** Joins: thelma (uid509475@id-509475.lymington.irccloud.com)
[17:07:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[17:07:24] *** Quits: thelma (uid509475@id-509475.lymington.irccloud.com) (Client Quit)
[17:09:15] *** Joins: thelma (uid509475@id-509475.lymington.irccloud.com)
[17:12:18] *** Joins: bnchs__ (~bnchs@160.177.34.97)
[17:13:03] <bnchs__> is it faster to equally compare a 4-char string with another 4-char string, by casting the 4-char string as a 32-bit integer
[17:14:14] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[17:14:58] <scaramanga> check it on godbolt
[17:15:05] <scaramanga> depends on the target architecture of course
[17:15:14] <scaramanga> but generally, yes, it probably is
[17:15:32] <scaramanga> faster than strcmp i assume u mean
[17:15:38] <NRK[m]> pretty sure that's undefined behavior
[17:16:01] <scaramanga> not if it's properly aligned(?)
[17:16:17] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[17:16:19] <NRK[m]> and don't bother with such optimizations, glibc has optimized asm for most stuff.
[17:16:32] *** Joins: marlboro (~i.am@191.248.124.154)
[17:16:32] *** Quits: marlboro (~i.am@191.248.124.154) (Changing host)
[17:16:32] *** Joins: marlboro (~i.am@user/marlboro)
[17:16:40] *** Quits: thelma (uid509475@id-509475.lymington.irccloud.com) ()
[17:16:53] <bnchs__> yes
[17:17:03] <zwr> compilers can do fun things https://godbolt.org/z/z4PqProdd
[17:17:07] <sham1> Well it can also be UB even if the stuff is aligned
[17:17:12] <bnchs__> casting string as 32-bit interger vs strcmp
[17:18:14] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[17:18:36] <sham1> Because while pointers to char are not going to alias, you can't necessarily use a pointer to uint32_t
[17:19:09] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[17:19:12] <sham1> Since the original object wasn't an array of uint32_t
[17:20:12] <mar77i> ...so you end up writing dealiasing and spend more time moving data around than doing something worthwhile. I've been there :)
[17:21:14] <scaramanga> idk, i've used such techiques as SWAR with strings to good effect in optimising stuff, and glibc does it too
[17:21:42] <sham1> If you want to do this properly, you'd use the appropriate function from the libc like strstr if you're looking for 4 character blocks or memcpy'ing into a uint32_t
[17:21:45] <scaramanga> such stuff is practically the whole point of C at this stage :)
[17:22:18] <scaramanga> provided sth exists, of course, sometimes you are implementing things which are original
[17:22:21] <sham1> Or well, strcmp in this case is the more appropriate function
[17:26:26] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[17:27:10] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[17:28:13] *** Quits: fengdaolong (~fengdaolo@58.48.87.13) (Ping timeout: 256 seconds)
[17:29:01] <dave0> scaramanga: the usual way is write it first, then if it's too slow, find the slow parts, then optimize
[17:31:10] *** Red is now known as Redfoxmoon
[17:31:24] *** Joins: Nutte35 (~Nutte@202.153.81.234)
[17:32:15] <sham1> Let the knife do the work, or in other words, don't try to outsmart the compiler with optimization. Co-operate with the compiler by providing certain hints that enable aggressive optimization and stuff like SIMD with intrinsics as needed (of course this requires feature guards)
[17:32:23] <scaramanga> yeah, like you may find out the slow parts are stepping through byte by byte doing string comparisons, and that in the vast majority of cases the string is the same thing, so maybe you speed it up by fast-pathing that common case, or using SSE4.2 string instructions etc.
[17:32:53] <fizzie> There's also memcmp, if you want the semantic equivalent to the int32 comparison (i.e., just compare 4 bytes without caring about '\0's) but without worrying about the casts.
[17:33:01] *** Joins: Klinda (~superleag@user/klinda)
[17:33:32] <sham1> Related, I'd wish that there was a memmem, as there is in some libc implementations as an extension
[17:33:33] <scaramanga> yea, tbh, compiler can be pretty good at converting memcmps or strcmp against a const to the instructions you'd hope for
[17:33:56] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[17:34:29] <fizzie> Identical generated code from memcmp and the cast: https://godbolt.org/z/YTze4qKoj
[17:35:05] <fizzie> (Not for strcmp or strncmp, of course, since it's very much not the same operation.)
[17:36:13] <sham1> Yeah, the compiler is smart with this stuff because it knows the semantics
[17:37:33] *** Joins: nyah (~nyah@94.6.71.219)
[17:38:16] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[17:38:47] *** Joins: kit_ten (~u0_a391@2600:380:5e28:3b67:fd80:df22:a2b5:9a5)
[17:39:37] *** Quits: vboykox (~user@20-56-134-95.pool.ukrtel.net) (Ping timeout: 240 seconds)
[17:39:48] <dave0> the slow parts might have nothing to do with fiddling with strings
[17:42:32] *** Redfoxmoon is now known as Red
[17:42:32] *** Quits: kit-ten (~u0_a391@2603-6010-a103-1f2e-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Ping timeout: 240 seconds)
[17:43:38] *** Joins: bbju (~bbju@103.144.149.220)
[17:43:53] *** Quits: pyook (~pyook@user/puke) (Ping timeout: 256 seconds)
[17:45:54] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:53:41] <bnchs__> whats the best x86_64 optimizations
[17:54:04] <sham1> The compiler knows, you don't need to worry about it
[17:54:15] <the_lanetly_052> Hi, which IDE is the best for C development (with easy LSP integration without creating some setting files)?
[17:54:39] <sham1> C doesn't really need a full IDE IME
[17:54:43] <gjvc> bnchs__ -O3
[17:55:11] <bnchs__> but what about for hash implementations and stuff
[17:55:18] <sham1> gjvc: I'd also add something like -march=native and such to enable better instructions than the baseline
[17:56:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:56:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:56:32] *** Joins: wroathe (~wroathe@user/wroathe)
[17:58:49] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[18:00:32] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:03:26] *** Joins: kts (~kts@103.73.237.234)
[18:03:39] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Client Quit)
[18:03:44] * markand uses vim 
[18:03:46] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[18:03:55] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[18:04:00] <markand> + ctags and :make = get the job done
[18:04:49] <sham1> ctags work wonders
[18:04:50] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[18:05:00] <sham1> There's also GNU Global if one wants more fluff
[18:06:16] <cassepipe> Hi all. I have a question concerning the pthread POSIX API. The man says that pthread_detach() makes a thread release its resources when it terminates. But what are those resources, does it mean what has been malloced in the thread will be automatically freed ? Or am I dreaming ?
[18:06:17] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[18:06:28] *** Joins: moog (~moog@107.126.53.225)
[18:06:46] <markand> no
[18:08:15] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:08:19] <sebag> yes, ctags is good, it can be excercised to get also quite uncommon information, like the current function where cursor is
[18:09:57] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[18:10:25] <cassepipe> I love the -t option for vim in a project. Zsh can also autocomplete tags from the ctags file in your repo. Quite neat when you remember the function name but you don't remember in which file it is.
[18:11:13] <sham1> Of course zsh does that
[18:11:26] <sham1> I shouldn't even be surprised at this point
[18:12:32] <twkm> cassepipe: resources related to threading, whatever they might be though it includes at least the thread return value.
[18:14:17] <markand> there is also cscope which is orthogonal to ctags, adds more information like call stack hierarchy
[18:15:00] *** Quits: bkhl (~bkhl@user/bkhl) (Quit: ZNC - https://znc.in)
[18:16:02] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 268 seconds)
[18:17:02] <cassepipe> twkm: Not sure I understand. Would you be kind enough to elaborate ?
[18:17:58] <twkm> threading might have overhead.  if allocated detaching arranges for that storage to be freed.
[18:17:59] <cassepipe> twkm: Does it entail freeing the memory passed via pointer via the pthread_create call ?
[18:18:05] <twkm> never.
[18:18:47] <twkm> malloc'd storage can only be released by a call to free.
[18:19:53] <cassepipe> twkm: Then there's no magical freeing of resources when a detached thread terminates. It only means whatever memory the thread api needs to run that thread. Right ?
[18:19:54] <twkm> if the threading internals used malloc then free is called when you join.  if you detach the thread itself will call free when it exits.
[18:20:33] <NRK[m]> markand: i prefer cscope
[18:20:37] <cassepipe> twkm: Haha so there is indeed some freeing happening when the thread terminates : What it has allocated
[18:20:43] <twkm> NEVER.
[18:21:16] <axon> `man isalpha`, heh
[18:21:26] <markand> cassepipe, pthread_detach only cleanups kernel resources and what pthread_t belongs to, for short
[18:21:36] <twkm> ugh, kernel.
[18:21:47] <cassepipe> twkm: Oh sorry. I misread. The threading <internals>. Ok thanks
[18:22:16] <cassepipe> markand: Makes sense. In C nothing is free.
[18:22:21] <twkm> similar to not threading.
[18:22:32] <markand> cassepipe, exactly
[18:22:36] <twkm> allocated storage remains allocated until free is called.
[18:22:46] <cassepipe> twkm: Got it. Thanks very much.
[18:22:56] <twkm> you're welcome.
[18:28:01] *** Quits: stonkey (~stonkey@user/stonkey) (Read error: Connection reset by peer)
[18:28:16] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[18:28:21] *** Joins: stonkey (~stonkey@user/stonkey)
[18:29:17] *** Quits: stonkey (~stonkey@user/stonkey) (Max SendQ exceeded)
[18:29:46] *** Joins: stonkey (~stonkey@user/stonkey)
[18:30:42] *** Quits: stonkey (~stonkey@user/stonkey) (Max SendQ exceeded)
[18:31:10] *** Joins: stonkey (~stonkey@user/stonkey)
[18:31:18] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[18:32:17] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[18:33:53] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:34:45] *** Joins: cmburn (~cmburn@c-107-4-141-134.hsd1.mn.comcast.net)
[18:35:53] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:39:03] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[18:39:27] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:39:58] *** Joins: seninha (~seninha@user/seninha)
[18:41:19] *** Quits: bnchs__ (~bnchs@160.177.34.97) (Ping timeout: 256 seconds)
[18:42:29] *** Joins: dj_pi (~dj_pi@d4-50-214-166.col.wideopenwest.com)
[18:44:37] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:44:56] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[18:44:59] *** Joins: seninha (~seninha@user/seninha)
[18:47:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:49:51] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[18:54:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:56:07] *** Joins: bkhl (~bkhl@user/bkhl)
[19:00:36] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:05:08] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:e928:2d70:ece:df34)
[19:05:24] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[19:08:17] *** Quits: malina (~malina@user/malina) (Ping timeout: 240 seconds)
[19:09:43] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:e928:2d70:ece:df34) (Client Quit)
[19:14:37] *** Quits: kit_ten (~u0_a391@2600:380:5e28:3b67:fd80:df22:a2b5:9a5) (Ping timeout: 240 seconds)
[19:15:23] *** Joins: kit_ten (~u0_a391@2600:380:5e28:3b67:fd80:df22:a2b5:9a5)
[19:16:17] <axon> why does the second example (see main) here fail? https://godbolt.org/z/Wz5z8dx8n
[19:17:46] *** Joins: pulse (~pulse@user/pulse)
[19:17:48] <clarity> You're modifying a string literal
[19:17:50] <sham1> axon: you're trying to modify a string literal
[19:17:54] <sham1> It ain't happenin'
[19:19:39] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:20:26] <axon> alright, thanks
[19:20:49] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[19:21:38] *** Quits: Nutte35 (~Nutte@202.153.81.234) (Read error: Connection reset by peer)
[19:22:37] *** Quits: dld (~davidlowr@2601:197:600:1210:88d:2354:617:54b5) (Ping timeout: 240 seconds)
[19:22:42] *** Joins: Nutte35 (~Nutte@202.153.81.234)
[19:23:44] *** Joins: dld (~davidlowr@73.61.8.28)
[19:24:01] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[19:24:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:24:26] *** Quits: EtherNet (~ethernet@user/ethernet) (Ping timeout: 250 seconds)
[19:24:44] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[19:26:33] *** Joins: EtherNet (~ethernet@user/ethernet)
[19:28:43] *** Quits: dld (~davidlowr@73.61.8.28) (Ping timeout: 256 seconds)
[19:29:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[19:30:05] *** Joins: dld (~davidlowr@2601:197:600:1210:5064:96c:65f6:1d79)
[19:35:23] *** Quits: marlboro (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R/2R->0)
[19:37:04] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: reboot)
[19:40:54] *** Quits: fe23 (~fe23@2409:8a34:461:9470:8d6d:3934:6ca4:2666) (Quit: fe23)
[19:44:37] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[19:44:55] <Macuser> Can't I just use some static counter variable to skip a certain amount of characters and \n for each line of a file I want to read?
[19:45:02] <Macuser> I don't want to do it all at once with a while loop and fgets
[19:45:24] <Macuser> i come from Python where things like this are super easy/straightforward
[19:45:42] <Macuser> it seems I'd want to use fseek
[19:46:06] <sokan> How can I check " : " character in scanf?
[19:48:39] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Remote host closed the connection)
[19:48:52] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[19:49:50] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:54:15] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:54:57] *** Joins: khanred (~khanred@user/khanred)
[19:59:48] *** Parts: khanred (~khanred@user/khanred) (Leaving)
[20:02:29] <Macuser> i have no idea what to do
[20:09:10] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[20:09:27] *** Joins: System_Error (~SystemErr@user/systemerror)
[20:09:29] <clarity> If you have a pointer to your line, you can just increment it to point past the characters you want to skip
[20:10:19] <clarity> (Assuming you're talking about the beginning of the line)
[20:13:19] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[20:14:08] *** Joins: cpuid (~cpuid@co5.at)
[20:14:08] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[20:14:08] *** Joins: cpuid (~cpuid@user/cpuid)
[20:16:06] <Macuser> clarity well I just want to get each the 4 characters in each line once every time this function executes
[20:16:37] <Macuser> it's a CSV of "TRUE" or "FALSE" on each line. each time the function runs I want to go to the next line and get/store the contents in a variable, repeat
[20:16:54] <ChoHag_> FALSE is 5 characters.
[20:17:10] <ChoHag_> ""s add two more.
[20:18:39] *** Joins: seninha (~seninha@user/seninha)
[20:20:24] <caze> Macuser: How do you know how far to fseek?
[20:21:55] <Macuser> well each line only has 4 characters
[20:22:01] <Macuser> oops
[20:22:04] <Macuser> you're right
[20:22:18] <Macuser> well shit
[20:22:38] <caze> Just use fgets.
[20:22:44] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:23:25] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 240 seconds)
[20:23:58] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-818b-1b0f-f97f-b922.res6.spectrum.com) (Remote host closed the connection)
[20:24:17] <Macuser> caze but how
[20:24:30] <caze> What problem are you trying to solve?
[20:24:30] <Macuser> every single website I read shows fgets used in a while loop to read the entire file at once
[20:24:41] <Macuser> let me repeat myself.
[20:25:10] <ChoHag_> Don't do that, we have logs.
[20:25:12] <caze> No don't repeat yourself.
[20:25:14] <ChoHag_> Say something different.
[20:25:19] <Macuser> I'm trying to read a CSV file that has TRUE or FALSE on each line. I need this specific function in a C program to read a line once and make a decision based on the value, then move to the next line for the next time the function is called
[20:25:26] <Macuser> is that any better?
[20:25:29] <caze> Your initial explanation is insufficient, so don't just repeat it.
[20:25:58] *** Joins: Trashlord (~trash@user/trashlord)
[20:26:02] <caze> <Macuser> every single website I read shows fgets used in a while loop to read the entire file at once
[20:26:05] <sham1> Do the lines have arbitrary length
[20:26:06] <caze> That is not correct.
[20:26:07] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) ()
[20:26:18] <caze> Or rather, extremely unlikely.
[20:26:21] <Macuser> sham1 it's either TRUE or FALSE
[20:26:25] <ChoHag_> Have you considered grep?
[20:26:32] <Macuser> caze it's true. they all go to EOF
[20:26:35] *** Quits: Nutte35 (~Nutte@202.153.81.234) ()
[20:26:48] <caze> Macuser: But they do not read the entire file at once.
[20:26:49] <Macuser> i've only seen grep used in command line environment, not inside a C program
[20:26:49] <sham1> awk before grep for this I'd say
[20:26:57] <Macuser> caze in one go..?
[20:27:09] <caze> Macuser: No.
[20:27:09] <Macuser> without stopping
[20:27:27] <ChoHag_> fork and exec a child to run grep in.
[20:27:39] <ChoHag_> Or awk, if you wish.
[20:27:42] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[20:27:44] <Macuser> sorry have no idea what that means.
[20:28:09] <caze> Macuser: Let me say this another way, you've misunderstood the examples you've seen.
[20:28:19] <ChoHag_> You haven't explained why you want to do this in the most inappropriate manner (in C).
[20:28:19] <fizzie> Macuser: Even if all the examples do it, *you* don't need to. Every time you call `fgets`, it reads one line from the stream. You don't have to put it directly inside a `while (fgets(...) != NULL)` loop if you don't want to.
[20:28:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:7565:d4ee:7344:b4a0)
[20:28:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:7565:d4ee:7344:b4a0) (Changing host)
[20:28:32] *** Joins: skapata (~Skapata@user/skapata)
[20:28:39] <ChoHag_> You already know python. It would seem sensible to use that.
[20:28:48] *** Quits: alch (~alch@151.34.193.117) (Read error: Connection reset by peer)
[20:29:01] <Macuser> fizzie that's what I'm asking, how can I create a counter variable of some sort to keep incrementing the line it reads
[20:29:09] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[20:29:11] <Macuser> ChoHag_ but I need it to work in a C program.
[20:29:13] <caze> Macuser: fgets already does that.
[20:29:19] <Macuser> oh forreal?
[20:29:20] *** Joins: magla (~gelignite@55d4d2c6.access.ecotel.net)
[20:29:25] *** Quits: MarcoFe (~marcofe@93-36-164-204.ip61.fastwebnet.it) (Quit: Konversation terminated!)
[20:29:29] <Macuser> fgets doesn't keep going back to the start?
[20:29:34] <sham1> No
[20:29:34] <caze> Macuser: Yes. You've misunderstood the examples you've looked at.
[20:29:38] <sham1> Of course it doesn't
[20:29:43] <Macuser> well then this is EZ PZ
[20:29:49] <fizzie> ,cc void f(FILE *f) { char line[10]; fgets(line, sizeof line, f); puts(strcmp(line, "TRUE\n") == 0 ? "yes" : "no"); }  f(stdin); f(stdin); f(stdin);  -stdin=TRUE\nFALSE\nTRUE
[20:29:52] <candide> fizzie: yes no yes
[20:29:53] <caze> Macuser: I can repeat myself if you want.
[20:30:31] <fizzie> Streams are... streams. They don't "go back to the start" on their own.
[20:30:32] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 240 seconds)
[20:30:34] <ChoHag_> Yes, but why?
[20:30:40] <Macuser> here i'll post my code now
[20:30:45] <Macuser> one sec.
[20:30:58] <libh> Is casting malloc necessary? int *ptr = malloc(whatever) gives me an error about invalid initialization, but int *ptr = (int *)malloc(whatever) works without issue. Is that bad practice to do the 2nd one?
[20:31:09] <sham1> ,mallocidiom
[20:31:10] <candide> T *p = malloc(sizeof *p) is more robust than T *p = malloc(sizeof (T)) because sizeof *p will always be the correct size of T and it prevents unnecessarily repeating the T (DRY principle). If sizeof (T) is used and later one of the T's is changed there will be a mismatch. T *p = malloc(sizeof *p) is more concise and easier to read, especially when T is a compound type.
[20:31:12] <sham1> Err
[20:31:18] <caze> libh: Are you using C++?
[20:31:36] <Macuser> https://bpa.st/RQ2Q
[20:31:42] <libh> No, I'm not using C++, but the 2nd example works while the first one fails.
[20:31:51] <Macuser> line 26 is where it starts.
[20:32:01] <sham1> Sounds like C++ to me if the first one fails
[20:32:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:32:05] *** Joins: Trashlord (~trash@user/trashlord)
[20:32:21] *** Joins: alch (~alch@151.68.209.205)
[20:32:25] <caze> >strtok
[20:32:27] <fizzie> libh: If you got an error about converting an integer to a pointer, then it's likely you've forgotten to include a header, and it's very wrong to do the cast.
[20:32:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[20:32:39] <sham1> aaaaaaaaaaaa
[20:32:39] *** Joins: Nutte35 (~Nutte@202.153.81.234)
[20:32:41] <libh> Give me a second, I'll paste what I'm doing.
[20:33:12] <fizzie> (Preferrably also quote errors instead of just saying "an error".)
[20:33:27] *** Joins: BSaboia_ (~bsaboia@187.19.136.30)
[20:34:13] <sham1> People in general need to learn to ask better questions. It's not just a programming thing, but a life thing
[20:34:24] <Macuser> caze ?
[20:34:30] <pony> hi
[20:34:39] *** Joins: lleo (~leo@89-200-7-2.mobile.kpn.net)
[20:34:47] <caze> Macuser: WHy are you using strtok?
[20:34:49] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:5f13:9db7:2f2:5748)
[20:35:16] <Macuser> because it's a .csv
[20:35:22] <Macuser> using ',' deliminator
[20:36:08] <libh> Okay, I tried my example again, it worked without issue as long as I used int, but if I used char for example https://paste.debian.net/hidden/46489275/ it fails. This is the error originally.
[20:36:26] <caze> Macuser: Does the line start with a comma?
[20:36:30] <fizzie> libh: That's because you're initializing an array, not a pointer.
[20:36:36] <Macuser> caze I don't believe so no
[20:36:56] <caze> Macuser: Do you need to do anything with the remainder of the line?
[20:36:59] <fizzie> libh: `char *aa[50]` is an array of 50 elements of type `char *`. It doesn't make sense to initialize it from `malloc(100)`.
[20:37:16] <libh> Thanks fizzie, I feel silly now.
[20:37:25] <libh> So malloc shouldn't be used for arrays then?
[20:37:30] <caze> You can't assign to arrays, either.
[20:38:02] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[20:38:03] <Macuser> caze nope I just need the TRUE or FALSE
[20:38:28] <fizzie> You can use malloc "for arrays" in the sense that you can use malloc to allocate storage for an array, and then have a pointer that points into that array. But you don't use malloc for `char *aa[50];` any more than you would use malloc for `int arr[10];`.
[20:38:42] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[20:38:46] <NRK[m]> u most likely want strchr then
[20:39:09] <Macuser> what do you mean I can't assign to arrays? I don't see anything wrong with lines 29 or 30
[20:39:28] <caze> Macuser: Are "TRUE" and "FALSE" the only possibilities?
[20:39:31] <Macuser> yes
[20:39:38] <fizzie> libh: You could do `char *aa = malloc(100);` to make aa[0] to aa[99] denote valid `char` objects, or you could use `char (*aa)[50] = malloc(100);` to make aa[0] and aa[1] denote two valid `char[50]` objects.
[20:39:50] *** Joins: malina (~malina@user/malina)
[20:39:59] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[20:40:34] *** Joins: crashrep (~crashrep@user/crashrep)
[20:40:49] <libh> What again is the () supposed to mean to the compiler in char (*aa)[50]?
[20:41:03] <fizzie> It means `aa` is a pointer to an array, rather than an array of pointers.
[20:41:22] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[20:41:29] <fizzie> A plain `char *aa[50];` is interpreted as `char *(aa[50]);`.
[20:42:08] <libh> I see. Thank you.
[20:42:52] <fizzie> (Though pointers *to* an array are not used particularly often. Usually when you have an array of T, you use a `T*` that points to the array's first element.)
[20:43:57] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[20:44:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:53d8:218c:4a2e:e687) (Ping timeout: 268 seconds)
[20:44:25] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5d44:edfe:270d:6900)
[20:44:39] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 256 seconds)
[20:45:09] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[20:47:09] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Remote host closed the connection)
[20:47:20] <Macuser> nothing with arrays is even going on
[20:47:21] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[20:47:21] <Macuser> it's all strings
[20:47:38] <ChoHag_> There's no such thing as strings.
[20:47:44] <fizzie> That was an entirely different conversation.
[20:47:46] <ChoHag_> You have arrays of bytes.
[20:48:04] *** Quits: bbju (~bbju@103.144.149.220) (Quit: Client closed)
[20:48:56] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 250 seconds)
[20:48:57] <sokan> character array and string are 2 different things or the same?
[20:49:23] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.155)
[20:49:33] <ChoHag_> Reread what I just wrote.
[20:50:08] *** Joins: Trashlord (~trash@user/trashlord)
[20:50:12] <fizzie> ,cc 7.1.1.p1
[20:50:14] <candide> fizzie: error: too many decimal points in number
[20:50:20] <fizzie> Whoops, an extra dot.
[20:50:23] <fizzie> ,cc 7.1.1p1
[20:50:24] <candide> fizzie: Same output.
[20:50:34] <fizzie> ...and the wrong command. Wow.
[20:50:37] <fizzie> ,c11 7.1.1p1
[20:50:39] <candide> http://www.iso-9899.info/n1570.html#7.1.1p1 [Definitions of terms] A string is a contiguous sequence of characters terminated by and including the first null character. The term multibyte string is sometimes used instead to emphasize special processing given to multibyte characters contained in the string or to avoid confusion with a wide string. A pointer to a string is a pointer to its initial (lowest a... <truncated; https://0x0.st/ozFM.txt>
[20:50:42] <fizzie> Computers: they're hard.
[20:51:36] <caze> Macuser: https://ideone.com/dTN1fC#stdout
[20:52:04] <caze> sokan: A string is a data format that is contained in a char array type.
[20:52:44] <sokan> caze: thanks.
[20:52:48] <caze> sokan: Comma separated values are also a data format, but I've never heard of anyone thinking that CSVs are a type.
[20:53:23] <sokan> I'm asking because our prof told us that we could save a sequence as a string or as a char array
[20:53:29] <sokan> and that seemed a little weird
[20:53:43] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.155) (Ping timeout: 256 seconds)
[20:54:06] <Learath2> "sequence"?
[20:54:17] <caze> Yes, because I can only imagine that by "string" he meant string literal, but you can't "save" to those.
[20:54:24] <Macuser> caze reading, thx
[20:54:31] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[20:54:48] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[20:55:02] <ChoHag_> Whenever C talks about a string, it's talking about an array of chars.
[20:55:18] *** Quits: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[20:55:27] <caze> An array of chars containing data in a particular format.
[20:55:32] <ChoHag_> C strings are very slightly more special, eg. they should have a '\0' at the end and the compiler can treat string literals specially.
[20:56:18] <axon> what's the difference between `char s[] = "my string"` and `char *s = "my string"`?
[20:56:51] <caze> axon: The former creates two arrays, the latter creates one array and one pointer.
[20:57:01] <ChoHag_> Uh no.
[20:57:23] <crashrep> i'm pretty sure those act the same, except that you can't reassign the first one
[20:57:34] <crashrep> like for int main you can have []argv or *argv
[20:57:50] <ChoHag_> In the former s is a pointer to a mutable fix-size array bytes pre-filled with the string, in the latter it's a mutable pointer to immutable memory which otherwise is initialised to look the same.
[20:58:25] <caze> ChoHag_: In the former example, s is an array, not a pointer.
[20:58:37] <ChoHag_> Same thing.
[20:58:43] <Learath2> ?
[20:58:51] *** Joins: raym_ (~raym@user/raym)
[20:58:55] <caze> ChoHag_: lol
[20:58:58] <Macuser> perfect caze
[20:59:01] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[20:59:06] <Macuser> easy and straightforward. thank you
[20:59:10] <axon> ChoHag_: I see, interesting gotcha
[20:59:19] <sokan> Learath2: http://dpaste.com/2XTU4JMR2
[20:59:26] <caze> axon: ChoHag_ is incorrect.
[20:59:27] <sokan> skip the first line
[20:59:38] <caze> axon: Pointers and arrays are not the same thing.
[20:59:46] <Kerr> speaking of int main, I'm processing args to my program like for(blah..) { if(strcmp(argv[i], "-aflag") { dosomething; continue} [more if's] } is there a better pattern to follow than this?
[20:59:57] *** Quits: Nutte35 (~Nutte@202.153.81.234) (Ping timeout: 240 seconds)
[21:00:08] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:00:41] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 268 seconds)
[21:00:42] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[21:01:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:01:54] <caze> axon: In the first example, s is an array, specifically, a char[10]. The appearance of a string literal is used to initialize an array of static storage duration and length sufficient to contain the sequence (plus the null terminator). This is an anonymous array. The contents of this array are used to initialize the elements of the array s that you have declared. You have two arrays.
[21:02:29] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[21:02:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:02:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:03:14] *** Joins: csrf (~csrf@user/csrf)
[21:03:15] <caze> axon: In the latter, the appearance of the string literal again triggers the creation of the same anonymous array. However, you've declared s to be a pointer, and for initialization, s points to the first element of the anonymous array created to contain the string literal itself. You've created an array, and a char pointer that points into that array.
[21:04:15] <caze> axon: Notably, it is undefined to modify the contents of the anonymous array that contains the string literal sequence. That is why it is undefined to modify what s points at in the latter example.
[21:04:30] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:05:10] <caze> axon: But in the first example, since s is its own array that merely contains a copy of the anonymous array created for the string literal, modifying it is not undefined. It's just a normal array.
[21:05:16] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:05:18] <axon> caze: any particular reason why an intermediary anonymous array is used in the first case?
[21:05:30] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:05:39] <caze> axon: It is used in both cases.
[21:06:06] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[21:06:08] <ChoHag_> So that the difference between s and s can be nitpicked over.
[21:06:26] *** Joins: pulse (~pulse@user/pulse)
[21:06:47] <caze> axon: The difference is in the first example, since the array doesn't have an identifier, and you don't have a pointer to the array, (essentially, you have no aliases to refer to the array) it immediately becomes "lost" after you've used it.
[21:07:14] <caze> ChoHag_: Please be quiet.
[21:07:36] <caze> ChoHag_: If you're not interested in actual discussion, just be quiet.
[21:07:40] *** Joins: kit-ten (~u0_a391@64.85.173.130)
[21:07:44] <ChoHag_> Sorry mother.
[21:08:13] <caze> ChoHag_: It's pretty harmful to say stuff like arrays and pointers are the same.
[21:08:47] <ChoHag_> If you say so.
[21:09:02] *** Quits: dj_pi (~dj_pi@d4-50-214-166.col.wideopenwest.com) (Ping timeout: 240 seconds)
[21:09:18] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 250 seconds)
[21:09:41] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:10:54] <zwr> one detail that is nice to be aware of is that with pointers you have a sentinel value you can use, NULL
[21:11:13] <axon> it's interesting how this is such a high-level construct and yet how its implementation is so counterintuitive
[21:11:23] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[21:11:24] <zwr> so if you ever need a sentinel switch from using indexing to using a pointer
[21:11:28] *** Quits: kit_ten (~u0_a391@2600:380:5e28:3b67:fd80:df22:a2b5:9a5) (Ping timeout: 250 seconds)
[21:12:03] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 256 seconds)
[21:12:17] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[21:14:37] <ka80> Kerr: For processing command line arguments, you might look at getopt()
[21:15:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:15:25] <caze> axon: It's easy enough to remember the rule that you *can* modify the first one, but you *cannot* modify the second one. There is a consistent explanation for why, and most people are unaware of it.
[21:15:40] <axon> caze: why is it UB to modify the anonymous array through the pointer in the second case?
[21:16:06] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Ping timeout: 268 seconds)
[21:17:12] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[21:17:46] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:17:54] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.155)
[21:18:13] <caze> axon: So if you use the string "my string" in more than one place, the compiler implementor has the option to use the same array for all the places that reference the same string literal.
[21:18:21] *** Joins: Trashlord (~trash@user/trashlord)
[21:18:22] *** Joins: badsektor (~badsektor@user/badsektor)
[21:18:33] <axon> oh... got it!
[21:19:00] <caze> axon: Let's say you have: char *a = "my string"; char *b = "my string"; a[0] = 'X'; puts(b);
[21:19:20] <caze> axon: It would be weird and unexpected for that to output "Xy string".
[21:19:34] <axon> yeah, hmm, but then wouldn't the compiler be able to pick up on that and make copies?
[21:19:45] <caze> axon: It can, and it is an option.
[21:20:12] <caze> axon: But in general, the C specification is geared towards making the compiler writer's job easier.
[21:20:39] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[21:20:52] <axon> I see
[21:21:26] <caze> axon: And also making it easy to create a fast programs with little overhead.
[21:21:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-025-008.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:21:52] <caze> Err, translate fast programs.
[21:22:06] <caze> But it shifts the burden on the programmer to know what they're doing.
[21:22:37] <axon> caze: how might I look that compiler option up? what keywords/topics describe this difference between char[]/char* = "literal"?
[21:22:50] *** Joins: prussianblue (~ghostpant@101.128.64.26)
[21:23:07] *** Parts: prussianblue (~ghostpant@101.128.64.26) ()
[21:23:22] <caze> axon: For the spec to *require* implementors to make separate copies "my string" would be overstepping a philosophical bound that they've been following for decades.
[21:23:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:23:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:23:51] *** Joins: wroathe (~wroathe@user/wroathe)
[21:23:54] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:24:13] <caze> axon: In the spec?, it mainly comes from:
[21:24:22] <caze> ,c11 6.4.5p7
[21:24:22] <candide> http://www.iso-9899.info/n1570.html#6.4.5p7 [String literals] It is unspecified whether these arrays are distinct provided their elements have the appropriate values. If the program attempts to modify such an array, the behavior is undefined.
[21:24:28] <caze> Oops.
[21:24:28] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.155) (Ping timeout: 250 seconds)
[21:24:32] <caze> ,c11 6.4.5p6
[21:24:33] <candide> http://www.iso-9899.info/n1570.html#6.4.5p6 [String literals] In translation phase 7, a byte or code of value zero is appended to each multibyte character sequence that results from a string literal or literals.78) The multibyte character sequence is then used to initialize an array of static storage duration and length just sufficient to contain the sequence. For character string literals, the array elem... <truncated; https://0x0.st/-fZV.txt>
[21:24:46] *** Quits: puke (~puke@user/puke) (Quit: puke)
[21:24:58] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[21:25:01] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[21:25:35] <caze> axon: As far as the difference between char *s and char s[], well you're declaring two different types. They're as different as int *i and float *i.
[21:25:38] *** Joins: System_Error (~SystemErr@user/systemerror)
[21:26:13] <caze> How you initialize the variable does not change the type that you declared for that variable.
[21:26:56] *** Joins: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37)
[21:27:01] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[21:28:21] <axon> I've just started playing around with C, but I do remember it always being presented as if they're the same thing and, to be honest, I have a hard time not regarding them as such
[21:28:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:29:04] *** Joins: prussianblue (~ghostpant@101.128.64.26)
[21:29:12] <caze> axon: Their sizes are different. Two things that do not have the same size cannot possibly be the same thing.
[21:29:17] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 240 seconds)
[21:30:04] <caze> axon: There is a distinction between an object's type, and the type when the object's name is used in an expression.
[21:30:30] <axon> oh, in the sense that `char s[] = "123"` is 3 bytes wide and a pointer is 8 or whatever?
[21:30:55] <caze> axon: It's 4, because you have to include the '\0' character.
[21:30:57] *** Quits: raym_ (~raym@user/raym) (Ping timeout: 240 seconds)
[21:31:03] <caze> axon: But that is the gist of it.
[21:31:21] <axon> I see
[21:31:23] <caze> axon: Often, when a variable is used in an expression, its type gets converted to some other type.
[21:31:51] <caze> axon: For instance, float pi = 3.14; int i = pi;
[21:31:56] *** Joins: raym (~raym@user/raym)
[21:32:19] <caze> The object pi is a float, but in the expression used to initialize i, its value is converted to an int value.
[21:32:40] <caze> That does not mean the pi object itself is converted. Only its value as used in that expression is converted.
[21:32:53] <caze> It's the same thing with arrays.
[21:33:13] <caze> char array[10]; char *p = array;
[21:33:57] <axon> so a pointer is just another way of accessing the array?
[21:34:01] <caze> Object array has type char[10], but when in the expression used to initialize p, its value is converted to char *.
[21:34:23] <caze> Yes, the convention is that you access an array by using a pointer to the array's first element.
[21:34:52] *** Parts: prussianblue (~ghostpant@101.128.64.26) ()
[21:35:18] *** Quits: kts (~kts@103.73.237.234) (Quit: Konversation terminated!)
[21:35:27] <axon> but doesn't that go the other way around, too? e.g., char *s = strdup("some string"); s[0] == 's', etc.?
[21:35:35] *** Joins: kuber (~kuber@97-113-209-119.tukw.qwest.net)
[21:35:40] <caze> That is why you have the rule where in many cases, an object's name used in an expression is automatically converted to a pointer to the array's first element.
[21:35:43] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[21:36:14] <caze> axon: That is another example where you have an anonymous array, and a pointer that points into the array.
[21:36:34] *** Joins: karakedi (~eAC53C340@user/karakedi)
[21:36:54] <axon> I guess I should stop thinking of them as strings and start regarding them as arrays of bytes
[21:37:03] <axon> that end with a NUL byte
[21:37:37] <caze> axon: For example, if you just have malloc(10); on a line by itself, the storage for 10 bytes is allocated, and then immediately lost. Or "leaked".
[21:37:55] <axon> yup
[21:38:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:38:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:38:01] *** Joins: wroathe (~wroathe@user/wroathe)
[21:39:36] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[21:40:43] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:44:05] <axon> caze: that was very helpful; it clarified some things I've stumbled over and couldn't make sense of
[21:44:08] <axon> thanks a lot
[21:44:55] *** Joins: Betal (~Betal@user/betal)
[21:46:51] *** Quits: Darkcoal (~user@130.164.162.247) (Quit: Darkcoal)
[21:47:17] *** Quits: khaledzz (~Adium@156.213.21.185) (Ping timeout: 240 seconds)
[21:47:36] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[21:48:18] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[21:49:27] <caze> axon: np btw I should mention that everything I just said is the semantics of the language. It's not a literal requirement for the compiler to follow.
[21:50:03] <caze> axon: If the compiler can prove that you cannot tell the difference whether or not an anonymous array is created for the string "my string", it's not required to make one.
[21:51:05] <caze> axon: For instance, if you do char s[] = "my string"; since you have no pointer to the string literal array, and it is immediately lost after being used to initialize the array s, the compiler doesn't have to literally make the second array.
[21:52:01] <caze> axon: This is what makes optimization possible. But the things I explained are the semantics of the language nonetheless, and optimizations are not supposed to break the semantics of the language.
[21:52:27] *** Joins: Akiva (~Akiva@user/Akiva)
[21:53:20] <munkis>  < enum a{x=1; y; z}; printf("%d"a.z)
[21:53:25] <munkis> ,cc enum a{x=1; y; z}; printf("%d"a.z)
[21:53:27] <candide> munkis: error: expected ',' or '}' before ';' token
[21:53:39] <munkis> ,cc enum a{x=1; y; z} b; printf("%d"b.z)
[21:53:40] <candide> munkis: Same output.
[21:54:11] *** Quits: kit-ten (~u0_a391@64.85.173.130) (Read error: Connection reset by peer)
[21:54:32] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[21:54:33] <munkis> of course II foorgot how to declare an enumerator :(
[21:54:36] *** Joins: kit-ten (~u0_a391@64.85.173.130)
[21:54:45] <munkis> ,cc enum a{x=1, y, z} b; printf("%d"b.z)
[21:54:46] <candide> munkis: error: expected ')' before 'b'
[21:54:58] <munkis> ,cc enum a{x=1, y, z}; printf("%d"a.z)
[21:54:59] <candide> munkis: error: expected ')' before 'a'
[21:55:08] <munkis> ,cc enum a{x=1, y, z}; printf("%d",a.z)
[21:55:10] <candide> munkis: error: 'a' undeclared
[21:55:17] <munkis> ,cc enum a{x=1, y, z} b; printf("%d",b.z)
[21:55:19] <candide> munkis: error: request for member 'z' in something not a structure or union
[21:55:37] *** Joins: liba (~liba@user/liba)
[21:55:50] <munkis> ,cc enum a{x=1, y, z}; printf("%d",z)
[21:55:53] <candide> munkis: 3
[21:55:56] <munkis> hooray
[21:56:02] <munkis> ,cc enum a{x=1, y, z=x}; printf("%d",z)
[21:56:04] <candide> munkis: 1
[21:56:07] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[21:56:27] <munkis> is that last line portable?
[21:59:10] *** Quits: HaMsTeRs (~Thunderbi@210.3.213.4) (Quit: HaMsTeRs)
[21:59:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f)
[22:01:38] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:02:02] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[22:04:05] <fizzie> Yes. Well, as far as the standard goes. C11 6.2.1p7: "Each enumeration constant has scope that begins just after the appearance of its defining enumerator in an enumerator list."
[22:04:16] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[22:04:20] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 250 seconds)
[22:04:39] <fizzie> So `x` is in scope just after the `x=1`, and can be used when defining the value of `z`.
[22:04:51] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.167)
[22:07:17] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.135) (Ping timeout: 268 seconds)
[22:07:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:09:03] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[22:10:59] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 268 seconds)
[22:12:27] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[22:13:17] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Ping timeout: 240 seconds)
[22:15:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:15:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:15:46] *** Joins: wroathe (~wroathe@user/wroathe)
[22:18:09] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:18:23] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 268 seconds)
[22:19:16] *** Joins: Nutte35 (~Nutte@202.153.82.40)
[22:19:43] *** Joins: Darkcoal (~user@130.164.162.247)
[22:20:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:21:16] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Quit: Leaving)
[22:23:11] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:27:42] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:28:04] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[22:28:15] *** Joins: carlavilla (~carlavill@2a0c:5a84:320d:6900:221:6bff:fe3b:cee4)
[22:28:29] *** Joins: kish` (~aqua@user/aqua)
[22:29:32] *** Joins: dj_pi (~dj_pi@d4-50-214-166.col.wideopenwest.com)
[22:29:35] *** Quits: kuber (~kuber@97-113-209-119.tukw.qwest.net) (Quit: leaving)
[22:30:47] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:31:36] *** Joins: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:c575:4066:faea:7830)
[22:32:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:447b:43e0:477e:ac6f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:32:02] *** Joins: freep (~freepppp@46.246.189.172.dsl.dyn.forthnet.gr)
[22:35:06] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:6978:fe33:30af:ede6) (Ping timeout: 250 seconds)
[22:35:58] *** Quits: Nutte35 (~Nutte@202.153.82.40) (Ping timeout: 250 seconds)
[22:36:37] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:37:36] *** Joins: Trashlord (~trash@user/trashlord)
[22:38:51] *** Joins: Nutte35 (~Nutte@202.153.82.40)
[22:39:04] *** Quits: Nutte35 (~Nutte@202.153.82.40) (Read error: Connection reset by peer)
[22:42:31] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[22:45:03] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:20] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: bbl)
[22:47:13] *** Joins: Haxxa (~Haxxa@125-253-30-218.ip4.superloop.com)
[22:47:54] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[22:50:51] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[22:51:08] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-7d62-2d2-3a32-97de.fixed6.kpn.net) (Ping timeout: 250 seconds)
[22:51:09] <libh> For anyone familiar with both SDL2 and GTK, can GTK be used to make a game similar to how SDL2 can?
[22:52:40] <megaTherion> maybe but I dont think GTK would be a great choice
[22:53:02] <megaTherion> depends what exacly you need...
[22:53:13] <megaTherion> GTK is for windows and you just dont need those in games
[22:54:33] *** Quits: carlavilla (~carlavill@2a0c:5a84:320d:6900:221:6bff:fe3b:cee4) (Read error: Connection reset by peer)
[22:55:10] <ChoHag_> They solve different problems. Gtk is primarily for making widgets interactive in a UI while SDL is for drawing generally (and other media-related concerns).
[22:55:20] <sham1> You can do something where you use GTK for certain GUI stuff like settings and such. I've seen that design for some emulators
[22:55:31] <sham1> While having the actual game stuff appear with SDL
[22:55:36] <ChoHag_> Usually Gtk might be used to create a window that SDL draws into.
[22:56:33] *** Joins: vboykox (~user@20-56-134-95.pool.ukrtel.net)
[22:57:10] *** Joins: mahmutov_ (~mahmutov@5.176.28.231)
[22:58:32] <gera> Or cairo
[22:59:22] <sham1> I don't know if I'd use cairo for games though
[23:00:36] *** Joins: puke (~puke@user/puke)
[23:00:57] *** Quits: kit-ten (~u0_a391@64.85.173.130) (Ping timeout: 240 seconds)
[23:02:51] <libh> I want to use GTK to have a consistent environment and plus it's an absolute PITA to make stuff like dialog windows or menu bars in SDL2. Though I can't really find any concrete examples of GTK being used for games other than some card games or snake games.
[23:04:00] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[23:04:08] <sham1> You can make your actual game window in SDL, and then do things like the dialogues in GTK
[23:09:10] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:09:45] *** Joins: kit-ten (~u0_a391@64.85.173.130)
[23:10:24] <markand> that would be quite strange
[23:11:36] *** Quits: lleo (~leo@89-200-7-2.mobile.kpn.net) (Quit: institute budget)
[23:13:09] <megaTherion> libh: if you even want to have dialog windows or menu bars, if its all just GLX then well...
[23:13:52] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[23:15:45] *** Joins: kit_ten (~u0_a391@2600:380:886b:ff6b:20c0:d6e2:b860:cf0d)
[23:15:52] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[23:16:44] *** Joins: pucara (~i@host14.181-1-101.telecom.net.ar)
[23:17:45] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:18:57] *** Quits: kit-ten (~u0_a391@64.85.173.130) (Ping timeout: 240 seconds)
[23:21:41] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[23:21:58] <libh> I could just do an extremely simple exec for opening zenity on linux and whatever I do to open a file dialog on windows. Close enough.
[23:24:55] <libh> And also embed SDL into GTK. So I guess problem solved with SDL2.
[23:26:31] <sham1> You can certainly try
[23:27:30] *** Joins: malina (~malina@user/malina)
[23:30:38] *** Joins: Filystyn_ (~piotr@095160035009.warszawa.vectranet.pl)
[23:30:48] *** pony is now known as no-n
[23:31:12] <ChoHag_> libh: I think you might have more pressing concerns.
[23:31:32] <ChoHag_> Weren't you trying to get buffered I/O to work this morning?
[23:32:28] <libh> Buffered IO? I don't remember doing that. You mean the char array from earlier? I was just playing around and had a question why something wasn't working.
[23:32:40] <ChoHag_> You were trying to do line-based parsing.
[23:32:59] <ChoHag_> The fact that you don't know you were doing buffered I/O only adds to my concerns.
[23:33:14] <libh> Okay, I honestly have no memory of doing line based parsing.
[23:33:34] <libh> There was another guy here called liba, so you might have mistaken him for me.
[23:34:21] <ChoHag_> Wasn't it you with TRUE/FALSE in a csv file?
[23:34:31] <libh> Oh. I wasn't that guy. It was someone else.
[23:34:40] <libh> You mistaken me for someone else.
[23:34:43] <ChoHag_> Oh? My mistake.
[23:34:50] <libh> It's all good.
[23:35:28] <ChoHag_> Well carry on then.
[23:35:46] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[23:35:52] *** Joins: seninha (~seninha@user/seninha)
[23:36:07] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[23:37:31] <liba> libh: It wasn't me either.
[23:37:56] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[23:40:37] *** Quits: Darkcoal (~user@130.164.162.247) (Quit: Darkcoal)
[23:42:10] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:43:06] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.188)
[23:44:45] *** Quits: Nutte35 (~Nutte@27.114.187.37) ()
[23:44:57] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[23:47:48] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.188) (Ping timeout: 268 seconds)
[23:48:46] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (Ping timeout: 250 seconds)
[23:48:55] *** Quits: finsternis (~X@23.226.237.192) (Quit: Changing server)
[23:49:19] *** Joins: finsternis (~X@23.226.237.192)
[23:49:27] *** Joins: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[23:49:48] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:51:33] *** Parts: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Leaving)
[23:52:40] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[23:53:52] *** Quits: rgrinberg (~textual@2806:101e:7:2b:4d0:6ff9:1790:ff37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:57:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:57:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:57:35] *** Joins: wroathe (~wroathe@user/wroathe)
