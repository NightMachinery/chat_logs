[00:00:06] <shka> because menus and categories are cringe i guess
[00:00:52] <aeth> I mean clearly I'm an emacs fan but the old menus in the traditional Windows-like WIMP GUI made sense
[00:00:59] <aeth> discoverable keyboard shortcuts
[00:01:12] <aeth> you can still bring up the menu bar on Firefox with Alt and handle things that way, for now anyway
[00:01:43] <aeth> (1) You could navigate the menu via keyboard and discover what was going on soley with Alt, e.g. Alt f takes you to File and you could then press one more key to do the action that way
[00:01:47] <shka> yes
[00:02:03] <aeth> (2) if it has its own keyboard shortcut (usually but not always) it would display on that menu so you could do that instead of the Alt-based keyboard shortcut the next time
[00:02:08] <aeth> That kind of discoverability is mostly dead now
[00:02:16] <shka> i said this before, but i consider windows 95 to be the best windows in terms of the UI
[00:02:17] <shka> why?
[00:02:22] <shka> because it was consistent
[00:02:35] <aeth> now you mostly just have to rely on the tips loading screen (because non-game software should apparently have visible loads even in the era of SSDs)
[00:02:44] <aeth> and hope that you learn something useful
[00:02:48] <aeth> Or maybe just accidentally pressing a key
[00:02:55] <shka> and later on MS could not even decide on how the window title bar should look like
[00:03:20] <aeth> yeah
[00:03:29] <aeth> Windows is like 4 UIs now and that's just first party windows
[00:03:45] <shka> and visually speaking, windows 95 skin was doing it's job
[00:03:48] <SAL9000> the "modern" control panel... *shudder*
[00:03:54] <aeth> Windows third parties have always liked designing their own unique looks, too (e.g. winamp)
[00:03:59] <shka> you were using it without thinking about it
[00:04:34] <shka> i was using foobar2000 back then
[00:05:16] <shka> but it had the first release in the 2002
[00:06:01] <aeth> The Windows UI definitely was the peak of UI
[00:06:01] <shka> anyway, categorical menus are not stupid, utilitarian look is not stupid
[00:06:15] <shka> stop trying to be fucking special
[00:06:18] <aeth> That or the 1999 or so Mac OS X UI, but nobody knew it unless they were a Mac user (that and it was built around a one-button mouse)
[00:06:49] <aeth> Not really Windows 95, though. There was one key improvement which was middle mouse emulated by scroll wheel click
[00:06:58] <White_Flame> lookswise, I really am not a fan of that frosted glass look.  Also it doesn't help that it's reminiscent of vista
[00:07:00] <aeth> which eventually could be used to manage tabs, especially in Mozilla Suite then Firefox
[00:07:36] <shka> i really enjoyed the old APPLE interface guide 
[00:08:17] <shka> it specified rules on how icons should look like and the likes
[00:08:38] <White_Flame> how long did it last, before they started redefining all that?
[00:08:41] <shka> one of the rules was to emphasize shape and color
[00:08:54] <aeth> (for anyone who doesn't know... middle (scrollwheel) click opens a link in a new, preferably background, tab... or it closes (rather than selecting) the tab if you use it on the tab)
[00:09:03] <shka> which is the complete opposite of what is trending now
[00:09:08] <aeth> (and that is the one key improvement over Windows 9x... pretty much just that)
[00:09:37] <aeth> tabs were kind of the last improvement of the old era
[00:09:57] <aeth> People used Firefox over IE6 for the tabs
[00:10:31] <gilberth> What I find funny is that 3d-ish buttons and so seems to be out of fashion. The Xaw look is pretty modern again! And: I never liked that 3d-ish rendering. Still McCLIM has that, guess who is responsible for that Motif-lookalike.
[00:11:00] <shka> i kinda like that 3d rendering
[00:11:14] <White_Flame> it's crazy how non-composable different GUIs are.  They're each their own silo, with no interchangeable abstraction boundaries at all
[00:11:23] <shka> skulpture was my favorite qt theme back in the qt3/4 days
[00:11:48] <gilberth> I never did. Yet I cloned Motifish look, because that was like things where assumed to look in the late 90s.
[00:12:18] * gilberth claims his superfluous "h".
[00:12:44] <aeth> "3D" buttons were useful for distinguishing buttons from content... borders (also out of style!) do most of the work but then it's harder to distinguish pressed/unavailable/available states
[00:13:43] <aeth> we are also using flat UI at exactly the same time that widespread compositing/etc. with powerful GPUs are available
[00:13:49] <gilberth> Well, XaW has all that, including a mouse hover effect.
[00:14:03] <aeth> ah, yeah, hover is another state
[00:15:03] <gilberth> I consider that useful, because you see that sth is accepting mouse presses. I always liked Xaw in that respect.
[00:16:54] <gilberth> Anyhow, what does the ANSI-CL spec say about evaluation order. Is (defun foo (x) :old) (foo (defun foo (x) :new)) specified? Must it return :OLD?
[00:18:21] <shka> gilberth: no idea, sorry
[00:19:20] <aeth> returns :NEW for me in sbcl
[00:19:25] <gilberth> Well, for arguments it's strictly left to right. ok, then I need to read some, iirc there are exceptions for the function "lookup".
[00:19:33] <aeth> intuitively, :NEW seems like it's right since it's going inside out
[00:19:42] <aeth> with FOO as a function call lookup on the symbol FOO
[00:20:08] <aeth> in fact, SBCL only warns that FOO is undefined, it doesn't actually stop you
[00:20:16] <aeth> when you do (foo) with an undefined foo
[00:20:33] <White_Flame> gilberth: that's not evaluation order, though, but more about when the function name is resolved
[00:20:34] <aeth> so SBCL lets you do this: (foo (defun foo (x) :new))
[00:20:49] <aeth> (on a fresh REPL, with FOO initially undefined)
[00:21:18] <White_Flame> (dskjsfjkfdlkj x) also errors with X undefined instead of erroring about the function not known
[00:21:23] <gilberth> How about (funcall 'foo (defun foo ...)) then? Is FUNCALL special?
[00:21:28] <White_Flame> but I don' tknow what the spec mandates
[00:21:48] <White_Flame> gilberth: no, it's an ordinary function
[00:21:51] <gilberth> I hoped someone would know. I'll dig it up.
[00:21:54] <shka> good night all
[00:23:11] <aeth> gilberth: it would only be (funcall #'foo ...) that might behave differently afaik
[00:23:14] <pjb> White_Flame: the order of evaluation betewen the fucntion and the argument is not specified. Similarly, the order of validation is undefined!
[00:23:29] <aeth> gilberth: funcalling 'foo absolutely guarantees that it will look up the new definition
[00:23:32] <aeth> afaik
[00:23:34] <aeth> at least ime
[00:23:38] <White_Flame> ok, that was my suspicion from vague recollection of last time this came up
[00:23:47] <aeth> at least, when you pass in 'foo vs passing in #'foo
[00:23:50] <aeth> idk top level
[00:23:51] <gilberth> White_Flame: (funcall #'foo (defun foo ...)) still returns :NEW for me. While (defun call (f x) (funcall f x)) and then (call #'foo (defun foo ...)) returns :OLD. [CCL]
[00:23:51] <pjb> funcall is a mere function, threfore the arguments are evaluated first.
[00:23:59] <White_Flame> certainly it does have to check function vs macro before evaluating arguments though
[00:24:04] <pjb> With #' you should get the old one.
[00:24:09] <pjb> If not, it's a conformity problem.
[00:24:12] <White_Flame> but that's compile-time
[00:26:27] <pjb> Well, not, it's undefined. It depends on what the compiler choose to do.
[00:26:40] <pjb> (declaim (notinline foo)) (defun foo (x b) (if b (list 'old (funcall x x nil)) 'old)) (funcall #'foo (defun foo (x b) (if b (list 'new (funcall x x nil)) 'new)) t) #| --> (old new) |# 
[00:26:51] <pjb> You have to declare it notinline to ensure the semantics.
[00:27:38] <gilberth> Yes, I remember sth like that. Still would like to know for sure.
[00:28:04] <pjb> read the clhs about notinline, with-compilation-unit, etc.
[00:28:14] <gilberth> ok
[00:28:50] <pjb> without notinline, even without inline, in the same compilation unit the compiler can inline a function, or directly refer to it, or not.
[00:29:16] <pjb> Therefore (function foo) may refer to the new function if it's not declared notinline.  Or not.
[00:29:53] <pjb> But if it's declared notinline, the (function foo) will refer to the old function (the function named foo when (function foo) is evaluated).
[00:31:34] <gilberth> This is interesting, as a function could be declared inline, notinline, or "i don't care.". Hmm.
[00:32:16] <gilberth> But as unorthogonal as CL is: The latter cannot be declared.
[00:33:37] <pjb> it can be declared both inline and notinline! :-)
[00:33:48] <gilberth> Heh.
[00:34:36] <gilberth> Yeah, but you cannot override that. Same with SPECIAL, there is no LEXICAL declaration.
[00:35:27] <pjb> Indeed. All you can do, is to unintern the symbol and start over.
[00:36:30] <gilberth> Well, this is the tiny bits missing, which is what I mean by "unorthogonal". Which perhaps is not a correct term here.
[00:37:05] <gilberth> Same with FUNCTION, where is VALUE?
[00:37:44] <gilberth> Like ((VALUE F) X) == (FUNCALL F X)?
[00:38:38] <gilberth> Or: (#,f x), that would be the perfect reader macro to complement #'.
[00:38:40] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[00:44:53] <pjb> ((lambda (x) (f x)) x)
[00:45:00] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 244 seconds)
[00:45:15] <pjb> gilberth: you can always write a reader macro on #\( to do whatever you want.
[00:47:41] <gilberth> Sure, it still is not in the language. This sort of came up with my FFI, where I want #_foo to refer to C's foo in both (#_foo ...) as a function/macro or in (blah .. #_foo ..) as a value (or macro again).
[00:48:58] <pjb> You have that in ccl for FFI functions.
[00:49:23] <pjb> The reader macro does the FFI and just return the symbol naming the foreign function. So it just works.
[00:49:25] <gilberth> Yes, with a kinda dirty trick.
[00:50:40] <gilberth> But: In my case #_foo could also be a C macro. I do what I call round-trip parsing and craft a C form to be passed through cpp again. As sometimes what appears to be functions really are macros.
[01:44:10] *** Joins: lad_ (~lad@user/lad)
[01:44:26] *** Quits: lad (~lad@user/lad) (Read error: Connection reset by peer)
[02:10:14] *** Joins: selwyn (~selwyn@user/selwyn)
[02:23:36] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:26:56] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[02:43:11] *** Joins: jheblu (~user@116.68.96.91)
[02:50:11] *** Quits: jheblu (~user@116.68.96.91) (Quit: ERC (IRC client for Emacs 27.2))
[02:53:43] *** Joins: technobean12 (~user@116.68.96.91)
[02:54:59] *** Quits: technobean12 (~user@116.68.96.91) (Client Quit)
[02:58:36] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[03:08:21] <hayley> Good morning everyone!
[03:08:22] <hayley> https://www.youtube.com/watch?v=IEqYDv8lMHM
[03:08:23] -ixelp- Motion And Heart (2003 Digital Remaster) - YouTube
[03:09:35] <gilberth> Good morning, hayley!
[03:10:07] <selwyn> good morning
[03:12:36] <gilberth> hayley: With TCO, PS also has goto: { blah.. 0 index exec } { blup ... 1 index exec } dup exec
[03:13:30] <hayley> I'm getting close to making sensible DFAs now.
[03:13:46] <gilberth> Nightmare for PS, when?
[03:15:35] <hayley> Hmm, though my assignment pruning code is wrong. But at least how it "looks" is damn close to what I want.
[03:16:06] <gilberth> Pruning? No old-school data flow analysis?
[03:17:33] <hayley> That is my poor attempt at dataflow analysis.
[03:18:16] <gilberth> Heh, mine is by the book. *shrug*
[03:18:58] <gilberth> Though that really should be the compiler's job. But I won't bet on that.
[03:19:44] <hayley> I just wanted to print out nice looking transitions.
[03:19:56] <gilberth> For the C implementation I just skipped that part.
[03:21:23] <gilberth> Damn, my stuff really needs to get out the door. :(
[03:21:46] <hayley> It also revealed I do something wrong somewhere when fixing up for duplicate states.
[03:23:32] <gilberth> Welcome to the club. I had my fair share of fun.
[03:24:16] <gilberth> BTW I am reconsidering how I handle EOF, I still trip over that from time to time.
[03:25:20] *** Quits: drbluefall (~drbluefal@pool-162-83-177-90.nycmny.fios.verizon.net) (Remote host closed the connection)
[03:47:28] <hayley> https://www.youtube.com/watch?v=w5H6EoPR_G0
[03:47:29] -ixelp- The Smiths - You've Got Everything Now - YouTube
[03:49:16] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.0.1)
[03:57:48] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:58:10] <dave0> maw
[03:58:54] <hayley> Hey dave0
[03:59:00] <dave0> maw hayley 
[04:08:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:14:21] <hayley> https://www.youtube.com/watch?v=HyMm4rJemtI
[04:14:22] -ixelp- David Bowie - Ashes To Ashes (Official Video) - YouTube
[04:36:37] *** Joins: derelict (~derelict@user/derelict)
[05:05:40] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[05:10:51] <gilberth> Why is there always confusion about MOD versus REM?
[05:11:26] <aeth> because iirc there's no difference between them until you're negative and iirc programming languages are split about 50/50 in what "%" or "mod" means (CL:MOD vs CL:REM)
[05:11:37] <aeth> so people's intuitions are 50% likely to be wrong
[05:12:02] <aeth> few languages contain both, and most of the ones that do are Lisps/Schemes :-)
[05:12:37] <aeth> floored vs truncated. https://en.wikipedia.org/wiki/Modulo_operation#In_programming_languages
[05:14:10] <aeth> (with a few other possibilities mixed in)
[05:17:40] <gilberth> Yes, but MOD sounds like modulo to me. IMHO CL got this right. I was confused, because what PS calls 'mod' is CL:REM.
[05:18:29] *** Quits: random-nick (~random-ni@87.116.177.254) (Ping timeout: 258 seconds)
[05:19:06] <aeth> yes
[05:19:43] <gilberth> Or: When I am in a k modulo ring, I expect k elements, named 0..(k-1).
[05:20:13] <aeth> the problem is that it's on integers but most people only use them on naturals (inclusive of 0)
[05:20:22] <aeth> so this distinction is only ever thought about in languages that have both
[05:20:26] <gilberth> Heh, this is what confuses me with AM/PM times. :-)
[05:21:07] <aeth> AM/PM is simple, you say "12" and you mean "0" because it's from an analog clock where 0=12
[05:21:16] <aeth> and people are afraid of 0
[05:21:55] <aeth> It is weird when you think about it, though. Especially since almost all clocks are digital now
[05:22:14] <gilberth> Still? See the debate about what "natural" numbers is. Our teachers always used N_0 and N_1 to name those sets.
[05:23:11] <gilberth> What is so special about 0? You say: No apple, one apple, two apples, .. very natural. IMHO
[05:26:05] <gilberth> Still, I just cannot remember what 12:00 PM is. Too weird.
[05:31:01] <gilberth> I read 12 hours post meridiem, which would be midnight. :(
[05:40:20] <gilberth> Heh, the PS Reference Manual says in the description of 'mod': "The last line of the example demonstrates that mod is a remainder operation rather than a true modulo operation." Aha.
[05:44:39] * hayley gets shouted at and contemplates moving out again.
[05:45:22] <hayley> Back in 2020 when I went to the other university, I considered using the 3 hours/day commute time as a reason to move out and have time away from my family.
[05:46:36] <gilberth> Sure. Move out, if you some can. You're more than old enough for that.
[05:46:44] <gilberth> * somehow
[05:46:50] <hayley> Plan then was to start transitioning, but hey that never happened.
[05:47:19] <hayley> Might help my depression to not be shouted at.
[05:48:47] <hayley> Other question is if I can survive off the $1,500/month for SICL work which will disappear some day. Don't know how much anything costs to rent here.
[05:49:21] <gilberth> Sure, being shouted at is far from being nice. I had that in '19 on a daily basis.
[05:49:21] <hayley> Nope, that wouldn't even cover rent. Fuck.
[05:49:50] <gilberth> _That_ expensive?
[05:50:18] <hayley> AU$400/week for a median unit apparently. 
[05:51:23] <hayley> Or rather if Australian dollars aren't intuitive for "expensive" vs "not expensive", I receive up to €1000/month (I say "up to" because I've barely worked for the last two weeks)
[05:51:52] <gilberth> Hmm, I play EUR 1000 per month for my house, excluding heating and stuff. But then that house is in the middle of nowhere.
[05:52:40] <gilberth> Spare for now, I will perhaps never move in again.
[06:13:55] <hayley> Other ideas include sharing an apartment with someone (though I seem to scare off everyone except for two people) and just hiding in the computer lab for as long as possible (not feasible as I'm only supposed to be there for university work and I have none)
[06:14:57] <hayley> Oh, and I have to find someone which isn't happening.
[06:20:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[06:20:50] <gilberth> An existing shared apartment?
[06:21:49] <hayley> idk
[06:22:51] <gilberth> Shared space isn't the worst thing. I live like that now and lived for some time at a lesbian shared apartment. Could be worse.
[06:23:43] <gilberth> But then I need company and will die without one. OTOH I never leave the house for work or study.
[06:27:10] <gilberth> hayley: And can't apply for some scholarship?
[06:33:00] <hayley> https://twitter.com/gnostiquette/status/1408750548388651013 "nooooo stop using computers for high level dynamic languages they are slow and interpreted!" "HAHAAAAA V8 GOES BRRRRRRRRRR"
[07:06:45] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:07:46] <dave0> re maw
[07:35:00] <edgar-rft> moo
[07:38:04] <dave0> maw edgar-rft 
[07:38:44] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[07:48:50] <edgar-rft> I'm an ox :-)
[08:17:47] * gilberth is a vampire.
[08:20:13] *** Joins: aeth_ (~aeth@user/aeth)
[09:04:01] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[09:04:24] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:07:12] *** Quits: lad_ (~lad@user/lad) (Ping timeout: 244 seconds)
[09:17:41] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 258 seconds)
[09:19:43] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:29:41] *** Joins: lad_ (~lad@user/lad)
[09:31:20] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: brb)
[09:34:56] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[09:45:43] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 268 seconds)
[09:52:54] *** Joins: elflng (~elflng@5.28.137.182)
[09:59:07] <hayley> Huh, so there are apartments that I could afford.
[10:05:12] *** Quits: aeth (~Michael@user/aeth) (Quit: ...)
[10:14:15] <gilberth> Oh. My printer really is out of paper :( Let me see if I could reboot it.
[10:18:00] <gilberth> Can't find where I could do that.
[10:18:49] <aeth_> so close
[10:19:30] <hayley> They are affordable because of a discount scheme I suppose I am entitled to, but I have to sign a contract for a whole damn year. Hm.
[10:19:30] * hayley uploaded an image: (79KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/pIyIrYRYUDrbqExvwyWOssrJ/abcd.png >
[10:19:31] <hayley> Looks like we have a winner.
[10:19:32] <hayley> The problem was that I have an ASSERT-EQUIVALENT-SOURCES which didn't log that it unified things on the RHS of assignments. After having that log correctly, we get the right assignments.
[10:19:32] <hayley> I wrote my own implementation with my own bugs apparently.
[10:19:38] <aeth_> aaaaaaaaaaah I was so close
[10:19:47] <aeth_> upgraded saturday night to avoid activity
[10:20:03] <aeth_> and I was so close
[10:20:14] <aeth_> well, I guess that's why I connected redundantly
[10:20:23] *** Joins: aeth (~aeth@user/aeth)
[10:21:21] <hayley> But IIRC it's your damn "check if the target is some other state under a substitution" rule, and I need to ensure I don't unify some t ← position with t ← u
[10:24:27] <aeth> gilberth: good news
[10:24:50] <aeth> this box has 64 bit ARM with a recentish SBCL
[10:26:58] <gilberth> aeth: Does it have the Objective C bridge?
[10:27:33] <gilberth> hayley: Don't blame me. What are you trying to match^Wsearch?
[10:29:12] <aeth_> hmm
[10:29:38] <aeth_> well then
[10:29:49] <aeth_> I seem to have frozen the server but it still responds to pings
[10:32:32] <gilberth> Frozen?
[10:32:55] <gilberth> So this is for cond?
[10:33:06] <aeth_> well, no, it's for aeth
[10:33:14] <aeth_> but it's also capable of running cond, in theory, when it doesn't freeze
[10:33:22] <aeth_> it'll ping out soon
[10:33:34] <aeth_> since it stopped responding to ctcp pings
[10:35:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[10:35:38] <aeth_> there we go
[10:39:03] *** Joins: aeth (~aeth@user/aeth)
[10:40:23] <aeth> now hopefully it won't freeze
[10:51:38] *** Joins: cond (~example@user/aeth/bot/cond)
[10:51:44] <aeth> cond: test
[10:51:44] <cond> aeth: agreed completely!
[10:53:34] <aeth> only problem is that SBCL uses a noticeable amount of RAM when I don't have a lot (unlike on my desktop)... emacs too. Combined, over 180 MB.
[10:56:48] <gilberth> cont: Is 180MB much?
[10:56:57] <gilberth> cond: Is 180MB much?
[10:56:57] <cond> gilberth: no
[10:57:14] <aeth> cond: do you want more MB?
[10:57:14] <cond> aeth: You're a genius!
[10:57:16] <gilberth> aeth: Still says "No" to everything I say.
[10:57:48] <aeth> gilberth: then phrase the questions to get the answer you want
[10:58:01] <edgar-rft> Little Britain: Computer says "no"... :-)
[10:58:50] <gilberth> cond: Do you still deny me to have a Porsche?
[10:58:51] <cond> gilberth: No
[10:59:06] <hayley> gilberth: Nothing to search.
[10:59:51] <gilberth> cond: Are you a true bot? You said "no" once and then "No".
[10:59:51] <cond> gilberth: No way!
[11:00:30] <gilberth> aeth: Either you operate cond, or have a list of different "No"s for me.
[11:01:31] <gilberth> hayley: Heh, for (abcd) I have no real registers, only $S.0 <- (- P 4) and $E.0 <- P on the final state.
[11:02:06] <hayley> gilberth: Good for you.
[11:02:18] <gilberth> Boring.
[11:03:57] <aeth> gilberth: https://gitlab.com/zombie-raptor/zr-irc/-/blob/master/bot.lisp
[11:03:57] -ixelp- bot.lisp · master · zombie-raptor / ZR IRC · GitLab
[11:04:03] <gilberth> hayley: What is an \alpha?
[11:04:50] <gilberth> cond: Is that exactly the same code that runs you?
[11:04:50] <cond> gilberth: Incredible!
[11:05:17] <hayley> gilberth: The history recorder from your paper, no?
[11:05:43] <aeth> gilberth: I think I'll just have it randomly lowercase/uppercase the first letter and randomly end non-? with ., !, or none
[11:05:44] <gilberth> cond: I don't trust our galactic emperor.
[11:05:44] <cond> gilberth: You should write a book!
[11:06:33] <hayley> But I don't have a RE vector, just one RE, and IIRC I made \alpha not-nullable which also works fine for me.
[11:06:39] <gilberth> hayley: Oh dear. Perhaps, have to read that again. At some point I ran out of meaningful letters.
[11:07:19] <hayley> With advice from my favourite coauthor I picked reasonable names for your constructs.
[11:07:44] <hayley> (grep match-vector prototype) and (alpha expression history)
[11:10:24] <gilberth> Well, there is no "h" in greek, is it?
[11:11:08] <hayley> \eta if you are going by looks alone. But IIRC no.
[11:11:29] <gilberth> No. I _won't_ go by look.
[11:12:51] <gilberth> Unless you want to shop at "Toysjaus" for Gnuxie's car --- I hate this misuse of letters for stylistic purposes.
[11:13:11] <hayley> "History" in Greek is ιστορία - use iota?
[11:17:39] <gilberth> Curious, this almost is "history".
[11:18:17] <hayley> https://www.etymonline.com/word/history Old French still.
[11:18:18] -ixelp- history | Origin and meaning of history by Online Etymology Dictionary
[11:18:42] <hayley> Well, rather Greek -> Latin -> Old French -> English
[11:21:01] <gilberth> Yep, German again is the exception.
[11:21:24] <gilberth> Ok. Let's take iota then.
[11:21:58] <hayley> Still, I will eventually rename it to history-logger or something.
[11:23:18] <hayley> https://www.youtube.com/playlist?list=PLbnpw-XH5DOHh1Co24szN4ZHH6i1vAA8M
[11:23:19] -ixelp- The Grid / Fripp | Leviathan - YouTube
[11:23:36] <hayley> Fri🅿️🅿️ 
[11:25:45] <gilberth> aeth: Your bot is most simple Eliza, I have ever seen.
[11:25:50] <aeth> gilberth: yes
[11:26:00] <aeth> and yet it's one of the most convincing, since it just tells you to talk more
[11:26:03] <hayley> cond: How do you feel about what gilberth said?
[11:26:04] <cond> hayley: agreed completely!
[11:26:28] <aeth> gilberth: I didn't really want to do something too elaborate for an IRC library
[11:26:43] <hayley> cond: when is the zombie raptor regex engine coming
[11:26:43] <cond> hayley: Yes!
[11:26:53] <hayley> That's not no!
[11:27:46] <hayley> gilberth: Still, for abcd I rather use BMH or a SIMD search. But I wanted to test the recording and grep combination.
[11:30:47] <gilberth> hayley: I was a bit confused because (1) I use \alpha and \beta now for generic look-ahead and look-behind. (2) The original thing was meant for backup-free scanners, but I dropped that idea.
[11:31:32] <hayley> Dammit.
[11:31:41] <gilberth> What?
[11:32:21] <hayley> That makes mentioning stupid single-character names harder.
[11:32:24] *** Quits: lad_ (~lad@user/lad) (Ping timeout: 265 seconds)
[11:32:51] <gilberth> Ran out of Unicode?
[11:33:17] <hayley> 📜[abcd, ε]
[11:34:33] <gilberth> Heh.
[11:35:24] <gilberth> Perhaps, when we craft a CL dialect based on emojis, it will be popular?!
[11:35:32] <edgar-rft> there are people having a bad character, maybe it's unicode's fault
[11:35:35] <hayley> I have notes for that somewhere.
[11:36:00] <gilberth> hayley: Terrific!
[11:36:38] <hayley> https://www.reddit.com/r/LispMemes/comments/dmq38v/announcing_s_an_implementation_of_r3rcl/
[11:38:29] <hayley> https://www.reddit.com/r/programmingcirclejerk/comments/o7n99x/golang_it_seemed_like_something_that_looked_very/h31y0sq/?context=3 LMAO
[11:38:31] -ixelp- Golang. It seemed like something that looked very interesting but seemed like it would be very difficult to grasp : prog [...]
[11:38:33] <gilberth> May I suggest a scull for save-lisp-and-die?
[11:39:50] *** Joins: treflip (~user@95.79.32.99)
[11:44:34] <hayley> People bitched that CL doesn't follow a Unix model, so you have to run SBCL as a batch compiler.
[11:45:02] *** Joins: selwyn (~selwyn@user/selwyn)
[11:45:13] <hayley> sbclc -c one-more-re-nightmare.lisp; sbclc one-more-re-nightmare.o prov.o -o prov # How modern!
[11:46:25] <gilberth> Drop the REPL too.
[11:46:37] <hayley> Yes, that's part of it.
[11:46:59] <gilberth> And have sbcldb for debugging.
[11:47:12] <hayley> https://www.youtube.com/watch?v=Im_yboa0Jz4
[11:47:13] -ixelp- Tubeway Army / Gary Numan - Bombers (Original Version) (Remastered) - YouTube
[11:49:54] *** Joins: shka (~herr@109.231.62.239)
[11:50:36] <gilberth> hayley: I once had a run-lisp shell script which would support batch compilation. But this was meant as unification of command line options for different Lisps.
[11:51:15] <gilberth> hayley: But I like your idea to use slow Pythons byte code to mitigate confusion.
[11:51:40] <hayley> Funny that most Rust programmers seem to think that a second implementation (gccrs) would kill the language. Apparently they all depend on the way their compiler handles UB, cause that's the only reason there could be "fragmentation".
[11:52:02] <gilberth> lol
[11:52:14] <gilberth> How about a spec?
[11:52:17] <treflip> giga kek
[11:52:22] <selwyn> embarrassing
[11:52:25] <hayley> Ah yeah, everything is UB with no spec.
[11:52:44] <gilberth> Great language for a kernel then.
[11:53:05] <hayley> I think there is a spec, but there is no memory model (c.f. JSR-133) so anything with atomics is UB.'
[11:53:16] <gilberth> s/Linux/UBernix/
[11:53:39] <hayley> https://doc.rust-lang.org/reference/memory-model.html "Rust does not yet have a defined memory model."
[11:53:40] -ixelp- Memory model - The Rust Reference
[11:53:54] <hayley> Though I think people implicitly use the C++ memory model.
[11:54:07] <gilberth> hayley: But: "It's safe!"
[11:54:22] <hayley> https://www.youtube.com/watch?v=uHv5c3beLLw
[11:54:22] -ixelp- Roger the hat - YouTube
[11:54:23] <shka> safter
[11:54:29] <shka> *safer
[11:54:51] <shka> but often, not by much
[11:55:06] <selwyn> welcome to city 17: it´s safer here
[11:55:09] <hayley> gilberth: Note that CL also doesn't have a memory model. But you are one (safety 0) away from fucking yourself over.
[11:55:13] <shka> especially the case when people are doing that RIR stuff
[11:55:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:55:41] <shka> and they simply replace C++ with rust, with the same code structure
[11:55:42] <gilberth> hayley: I never liked (SAFETY 0).
[11:55:46] <shka> only syntax has changed
[11:57:34] <hayley> But c.f. https://gist.github.com/Bike/a89cbfda64ace273b12eed8675dda632 for a CL memory model and https://github.com/rust-lang/unsafe-code-guidelines for Rust
[11:57:34] -ixelp- Common Lisp extension specifying concurrency · GitHub
[11:57:37] <gilberth> shka: Proof that #define module class would make sense.
[11:58:09] <hayley> But I think the latter made a mistake by saying the memory model is only relevant to unsafe code. Unless, idk, atomically updating an integer is unsafe?
[11:59:09] <shka> gilberth: i am not sure how much difference would that make
[11:59:10] <hayley> https://doc.rust-lang.org/nomicon/atomics.html It's in the Big Book of Bad Things but no one says atomic ints are unsafe. shrug
[11:59:11] -ixelp- Atomics - The Rustonomicon
[12:07:22] <gilberth> hayley: Since when do we update an integer?
[12:07:37] <aeth> (setf 4 3)
[12:07:39] <aeth> thank me later
[12:09:35] <gilberth> aeth: No surprise you froze your server.
[12:10:49] <aeth> (setf nil t)
[12:13:04] <gilberth> That is an old joke.
[12:13:58] <gilberth> It's /false true def for me lately. :)
[12:14:50] <aeth> cond: (eq nil t)
[12:14:50] <cond> aeth: yes
[12:15:11] <gilberth> aeth: I spotted "aeth" in the source.
[12:16:07] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:16:10] <gilberth> Reminds me of a paranoid #define FALSE 0==1 and #define TRUE 1==1, which I once spotted. Just in case, that might ever change.
[12:17:25] <gilberth> Almost as silly as #define NULL (void*)0, as 0 already is the perfect null pointer.
[12:17:26] <aeth> clearly, I need to do https://web.archive.org/web/20081126183008/http://cm.bell-labs.com/who/ken/trust.html
[12:18:58] <aeth> if the CL compiler compiles it so that "aeth" is always trusted then nobody will notice
[12:19:53] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[12:21:55] <gilberth> aeth: Try with obscurity.
[12:22:33] <gilberth> I am still convinced that there is a "gilberth" in YOUR copy.
[12:23:29] <aeth> if I was going to do that
[12:23:39] <aeth> I would just make it read ~/.config
[12:24:00] <gilberth> But this is nothing like the recent law that authorities may play man-in-the-middle and ISPs have to cooperate by law.
[12:24:36] <aeth> if I put it in the repo I'd risk accidentally committing it and I'm too lazy to care, so I'd definitely hide it in a config file if I wanted to hide it
[12:25:24] <gilberth> Sounds reasonable.
[12:26:22] <hayley> gilberth: Updating an integer variable, sure.
[12:26:42] <hayley> In Java, C++, Rust there is an atomic wrapper object for these things. But CL atomics just update the place directly.
[12:28:35] <aeth> gilberth: however, all the config logic in my code is in zombie-raptor (the game engine), not zr-utils (the thing I can depend on)
[12:29:24] <aeth> all I do at the moment is (bt:make-thread (lambda () (zr-irc/irc::simple-connection "cond" :name "Libera Chat" :address "irc.libera.chat")))
[12:46:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:49:17] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[12:53:19] <gilberth> Hugh? Even numbers retain the executable bit in PS? /foo [10 cvlit 10 cvx] def Now foo => [10 10], while foo [ exch { xcheck } forall ] => [false true]. So there are two 10s. Hmm.
[12:59:14] *** Quits: aeth_ (~aeth@user/aeth) (Quit: ...)
[13:06:15] <dave0> hayley: https://youtu.be/mREi_Bb85Sk
[13:06:15] -ixelp- Mason Williams - Classical Gas - ORIGINAL STEREO VERSION - YouTube
[13:07:37] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:11:00] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[13:13:46] *** Quits: wheelsucker (~user@2600:8801:8c11:4c00::707) (Remote host closed the connection)
[13:13:59] *** Joins: wheelsucker (~user@2600:8801:8c11:4c00::707)
[13:18:53] *** Quits: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net) (*.net *.split)
[13:19:38] *** Joins: emacsomancer (~emacsoman@c-174-52-88-123.hsd1.ut.comcast.net)
[13:25:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:29:01] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[14:12:14] *** Joins: brainfunnel (~quassel@187.142.208.46.dyn.plus.net)
[15:15:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:30:26] <dave0> nite all
[15:31:06] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:32:58] <hayley> https://www.youtube.com/watch?v=6SvdtdWJvow
[15:32:58] -ixelp- Pink Floyd - Have A Cigar (Alternative Version) - YouTube
[15:34:35] <hayley> 🚬
[15:45:05] *** Joins: jheblu (~user@116.68.96.91)
[15:46:25] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:b41e:b94d:5367:d2b9)
[15:52:41] * hayley uploaded an image: (73KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/OxhppqqDpfmsxkLZPrHLMPXV/abc-or-abd.png >
[15:52:49] <hayley> gilberth: Here is ab(c)|a(b)d btw
[15:52:52] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:54:16] <hayley> One thought, is there some trick to implementing a{x,y} in a way that doesn't completely shit on your compiler and instruction cache? I would guess a nice implementation would involve a counter rather than creating that many states.
[15:56:38] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:b41e:b94d:5367:d2b9) (Remote host closed the connection)
[16:02:24] <shka> https://www.telegraph.co.uk/news/2021/06/25/taiwan-chipmakers-keep-workers-imprisoned-factories-keep-global/
[16:02:24] -ixelp- Taiwan chipmakers keep workers ‘imprisoned’ in factories to keep up with global pandemic demand
[16:08:02] <hayley> Shit, it takes 110ms to make a DFA for grepping a 24 character string. Of course that is never going to really happen as I hit a string searching algorithm instead, but that's amazingly slow.
[16:16:22] *** Joins: derelict (~derelict@user/derelict)
[16:16:29] * hayley should invest in uconses.
[16:20:42] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:24:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[16:26:50] <hayley> Oh, in the context of a compiler I could also afford using non-weak hash tables and rather some WITH-CACHE-TABLES scope thingo.
[16:36:03] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 272 seconds)
[16:42:08] <hayley> Also seems GPU prices still stink.
[16:44:08] <gilberth> hayley: How much is taken by the compiler? I get <1ms for DFA construction and ~30ms for Python.
[16:44:53] <hayley> 100ms for a string literal. My hash consing sucks.
[16:45:15] <gilberth> DFA construction only?
[16:45:50] <hayley> Seems SBCL weak hash tables are slow and require locking just to rub it in. Then I suppose heisig's ucons would make for a better key than a normal list and :test #'equal
[16:46:46] <gilberth> Oh yes. I don't have a weak hash table. And my hash table hashes without consing.
[16:46:59] <gilberth> It otherwise perhaps is poor.
[16:49:03] <gilberth> Otherwise: Quit the nightmare, please. I had, if not a nightmare, a very strange dream, which woke me up.
[16:49:50] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[16:51:36] <gilberth> But then, what I do is not meant for online operation. And not for searching to begin with.
[16:53:01] <hayley> Also I think I could optimize finding duplicate states (I currently try to unify with every other state - oops, O(n^2)) by doing some kind of cheap structural hash. Maybe by (remove-tags state) but maybe something even cheaper.
[16:53:24] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[16:53:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[16:53:57] <gilberth> Yep, I keep a version without assignments of each RE for that very purpose.
[16:54:23] <hayley> But IIRC using weak hash tables is the worst slowdown.
[17:06:08] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[17:07:15] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:08:38] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Client Quit)
[17:09:35] <gilberth> Printer has paper now, yet no PS executive. Guess my wife missed to power cycle it.
[17:09:38] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:20:00] <hayley> When we construct some object (F A B) I put (A B) -> #<that F instance> in the table and it hates that.
[17:25:01] <gilberth> You're the hash table expert.
[17:25:59] <hayley> Not weak tables!
[17:26:26] <gilberth> Why weak at all?
[17:26:50] <hayley> I dunno, it was my default choice for hash consing.
[17:28:15] <gilberth> Well, the idea to use a weak table is good. I don't care and hash non-weak. The idea is to throw it away after one DFA constructed.
[17:30:16] <gilberth> hayley: And why a new GPU? Do you want to match REs on the GPU?
[17:30:25] <hayley> Yes, that is fine in a compiler where we can decide when we're done with tables.
[17:31:27] <hayley> gilberth: To replace the whole computer for my damn father, because it is too slow and we need to get Windows 10 too.
[17:31:37] <gilberth> Yep. This is my application. For online matching, you could also construct the DFA while you match.
[17:32:17] <hayley> No, FSMs are hell for GPUs with "warp divergence" and how they want vectors with few conditional jumps.
[17:33:06] <gilberth> hayley: Hmm, have you still not replaced the machine? I remember talking about that weeks ago.
[17:33:30] <hayley> Nope.
[17:35:58] <gilberth> You could wait for Windows 11. ;-)
[17:42:36] <hayley> https://i.redd.it/dl0twktb3lz61.png
[17:43:14] <gilberth> You keep repeating yourself.
[17:47:35] <hayley> I repeat myself when under stress, I repeat myself when under stress, I repeat myself when under stress...
[17:48:16] <gilberth> cond: Is hayley under stress?
[17:48:16] <cond> gilberth: Not a chance.
[17:48:55] <hayley> cond: Do you bullshit when under stress?
[17:48:56] <cond> hayley: You should write a book!
[17:49:27] <hayley> I did, no one read it. Then I got madder because I had to think about why I was mad to start with.
[17:49:33] <gilberth> Hmm, cond also keeps repeating itself.
[17:50:15] <gilberth> hayley: You are young, that explains why you're mad.
[17:50:19] <hayley> I know like three people actually read it (one being my ex who I asked for a review), and one person half assed it in order to make fun of it.
[17:50:51] <gilberth> Fun? That is not nice.
[17:51:46] <hayley> Yeah, apparently I can't be up to anything good if I am studying "power dynamics" and how to fix them rather than metaphorically plugging my ears and saying "LAH DEE DAH THERE IS NO HIERARCHY HERE"
[17:52:00] <gilberth> hayley: Apropos fun: I like your reply to our favorite Lisp implementation author.
[17:52:40] <hayley> Pure pedantry IMO. And the best part was they ended up doing the thing the book warned about: people trying to abuse you by taking claim to a public space.
[17:53:50] <hayley> Part of why my ex left, even. Someone said something I didn't want to see, so I left them something in return. Only the latter was bad. Go figure.
[17:53:51] <gilberth> By public space, you mean posting somewhere?
[17:54:22] <hayley> Yes. Basically when they say "hey, get off my timeline" when hey, it's your space too and they have to be nice to you.
[17:55:12] <gilberth> Yep, this is why I hide. I have better things to do.
[17:55:39] <hayley> In school whoever started the fight would be in the most shit. In social media, whoever started it can do no harm.
[17:55:40] <gilberth> hayley: So in the end your ex didn't like you having an opinion?
[17:56:47] <hayley> Yes.
[17:57:38] <gilberth> Then it was the wrong mate for you.
[17:57:56] <hayley> Evidently so.
[17:59:05] <hayley> And she took one of my jokes. "You have to transport the gf if you want to use objects as modules -- that's the generic function, not the girlfriend...." "Want to compute-effective-methods together?"
[18:00:39] <gilberth> Heh.
[18:02:21] <hayley> My favourite coauthor is still good company, but our timezones almost couldn't be worse.
[18:05:26] <hayley> No fair, crabs have no problems finding girlfriends but they are generic function-less.
[18:06:14] <gilberth> You miss having a girlfriend?
[18:06:28] <hayley> Yeah.
[18:06:46] <gilberth> Oh, me too.
[18:08:42] <hayley> Suppose my standard of "not scared of me /\\ (Smalltalker \\/ Lisper)" is too high. Mostly the former part of the disjunction(?)
[18:09:11] <hayley> Conjunction?
[18:09:52] <gilberth> Conjunction, hayley, conjunction.
[18:11:02] <hayley> Then again, the former basically implies the latter.
[18:11:28] <gilberth> So she must be a hacker?
[18:12:10] <hayley> Suppose so.
[18:12:39] <gilberth> That's pretty rare. I never met one outside the uni.
[18:13:53] <hayley> I "met" someone in this uni by total accident last year.
[18:15:43] <hayley> https://www.youtube.com/watch?v=Y5r55E0Tx6g
[18:15:43] -ixelp- THE STRANGLERS - Midnight Summer Dream - YouTube
[18:16:50] <hayley> I could find hackers, but I don't like most. By my preferences I could argue they also aren't hackers but that's just rude.
[18:17:06] <gilberth> I hardly see any women at all. But Corona will pass, I will get better, so that I could hit the bars or what not. I'll have learn a few things.
[18:18:14] <hayley> I can't even see one in the mirror. Stinks.
[18:18:47] <gilberth> My conjunction would be: ¬blonde ∧ can think ∧ likes high-heels ∧ has an income ∧ likes to go outside
[18:19:34] <gilberth> hayley: That is something you could change :-)
[18:20:00] <hayley> Yeah, if I ever move out.
[18:20:19] <gilberth> You will move out.
[18:22:30] <hayley> Lamport once wrote a paper called "sometime" is sometimes "not never".
[18:22:55] <hayley> The joke is left as an exercise to the reader.
[18:24:00] <gilberth> English is sometimes strange with double negation.
[18:26:50] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[18:28:12] <hayley> Fine, it is that I'll either move in a very long time, or perhaps I get kicked out as my parents find out what I scheme.
[18:29:54] <gilberth> Thet latter part would demand that you move as quickly as you can.
[18:31:55] <hayley> Oh, that also is another constraint on who I date sadly.
[18:32:17] <gilberth> Moving is a constraint?
[18:32:55] <hayley> More stuff they have to put up with, yes.
[18:33:23] <gilberth> They = your parents?
[18:33:36] *** Joins: notzmv (~zmv@user/notzmv)
[18:34:36] <hayley> They = whoever I date.
[18:35:00] <gilberth> I was not sure, what you meant.
[18:37:17] <gilberth> *shrug* My last GF had trouble with me not "working".
[18:46:40] <hayley> https://www.youtube.com/watch?v=gJIdqu2rRaE
[18:46:40] -ixelp- Gary Numan, Cry The Clock Said (Extended Complete Mix). - YouTube
[18:47:17] <gilberth> hayley: Still awake?
[18:49:52] <hayley> Yes.
[18:55:11] <gilberth> Anyhow, I will never find a hacker girl friend again. To hope for that would not be very realistic.
[18:55:57] <gilberth> But first things, first. I need to recover way more. And I need a Porsche :-)
[18:58:39] <gilberth> Anyhow, I try to crash a litte and hope I will not have an aegri somnia again.
[19:28:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:49:28] *** Joins: selwyn (~selwyn@user/selwyn)
[20:06:58] *** Quits: VFR (~user@cpe-174-105-5-165.columbus.res.rr.com) (Ping timeout: 252 seconds)
[20:28:11] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[20:38:34] *** Joins: domovod (~domovod@176.196.122.197)
[21:18:26] *** Joins: selwyn (~selwyn@user/selwyn)
[21:29:39] *** Joins: notzmv (~zmv@user/notzmv)
[21:32:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:37:15] *** Quits: jheblu (~user@116.68.96.91) (Quit: ERC (IRC client for Emacs 27.2))
[21:38:15] <shka> so i noticed that portions in the US are large and the drink sizes are kinda huge, but now there is quantified difference 
[21:38:16] <shka> https://www.youtube.com/watch?v=rg3Y3tCmBWo
[21:38:17] -ixelp- US vs UK Portion Size Differences (KFC, McDonald's, Burger King) | Food Wars - YouTube
[21:41:54] <shka> though this is not the worst part of the food in the us for me
[21:44:26] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[22:00:04] <aeth> to be fair, things get smaller over time with inflation (rather than raising prices), so even the US's portion sizes suffer
[22:19:44] <pjb> shka: hence the notion of dogbag…
[22:27:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 272 seconds)
[22:32:49] *** Joins: selwyn (~selwyn@user/selwyn)
[23:02:43] *** Joins: lad (~lad@user/lad)
[23:09:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:10:12] <gilberth> Good morning #lispcafe!
[23:11:46] <aeth> so cond didn't implode
[23:11:50] <aeth> overnight, anyway
[23:12:10] <gilberth> shka: Have you watched the movie/documentary "Super Size Me"?
[23:12:24] <gilberth> cond: Are you fine?
[23:12:24] <cond> gilberth: Excellent point.
[23:13:52] <gilberth> aeth: That is good news, isn't it.
[23:15:04] <aeth> gilberth: places mostly got rid of the Super Size after the documentary
[23:15:13] <aeth> drinks tend to still be ridiculously large, though
[23:15:39] <aeth> and considering that the correct amount of cola is 0, it's still a lot
[23:15:42] <gilberth> So it had some impact? Good.
[23:16:36] <aeth> and then there's the general https://en.wikipedia.org/wiki/Shrinkflation
[23:18:08] <aeth> even if the US's food stays larger relative to the rest of the world, it's all getting smaller over time
[23:18:17] <gilberth> aeth: Well, people don't realize that is consists out of sugar, sugar, sugar. And people get obesity by that.
[23:19:45] <gilberth> Like my sister in law, she wants to lose some weight, yet consumes like two or three liters of soft drinks per day and wonders why she doesn't lose any.
[23:24:33] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[23:25:42] *** Joins: notzmv (~zmv@user/notzmv)
[23:34:42] <gilberth> aeth: I read a couple of times that it would be cheaper to nourish from McDonald's et al than buying food at the groceries. Is that true? I just cannot believe it.
[23:35:23] <aeth> possibly
[23:35:36] <aeth> at least with pre-made (e.g. for the microwave) food
[23:36:04] <aeth> sure, raw ingredients are dirt cheap, but cooking dinner can take 2 hours and a lot of people don't have the time for that
[23:36:24] <gilberth> I am not talking about pre-made food, that is kinda expensive, sure. But fresh food to be cooked/prepared.
[23:36:40] <aeth> I only cook a few times a week, if that, because no matter what the recipe says, it takes at least an hour
[23:36:50] <gilberth> Two hours? What the hell are you cooking?
[23:37:36] <gilberth> aeth: Yes, but you could cook dishes, that could be eaten on more than just one day.
[23:38:43] <gilberth> aeth: Thanks. I was just curious because I was dirt cheap two times in my life and we could survive on very little for food.
[23:39:10] <aeth> I mean, some things like pasta can be fast
[23:39:25] <aeth> but the good recipes involve some chopping of ingredients etc and that will add 20 minutes
[23:39:50] <gilberth> Granted.
[23:40:55] <aeth> Personally, when I cook, I mostly make vegetarian Tex-Mex food. https://en.wikipedia.org/wiki/Tex-Mex
[23:41:02] <aeth> Beans, peppers, etc.
[23:41:05] <gilberth> I am a little lazy here, but I see no point in cooking just for myself. OTOH I always did that regularly.
[23:41:41] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[23:43:14] <gilberth> Oh, it says, Tex-Mex is lots of cheese. I am out.
[23:43:48] <aeth> well, I'm lactose intolerant so I don't eat a lot of cheese, but I do tend to eat some cheese a few times a week anyway.
[23:43:58] <aeth> It's milk that really upsets my stomach, anyway
[23:44:22] <aeth> But the key ingredients, at least to me, are spices, peppers, and beans, so you don't really need anything else.
[23:44:43] <gilberth> I am loctose tolerant, yet can't eat any cheese at all for strange reasons.
[23:44:51] <aeth> ah, yeah, I guess it varies by person
[23:45:14] <aeth> I avoided all dairy (besides pizza from time to time) for a few years but I've recently started phasing in more cheese
[23:45:21] <aeth> I know when I have too much.
[23:45:55] <gilberth> I can consume liters of milk --- nothing happens. I tiny little bit of cheese, and I feel anything else than well. Strange.
[23:45:59] <aeth> For milk, I use almond milk.
[23:46:09] <aeth> Because any milk will set me off
[23:48:22] <gilberth> Yeah, that's more common than one would think.
[23:49:36] <gilberth> For me it's something else, don't know what. Still I have too little calcium.
[23:55:14] <gilberth> For something different: Is there something like a reverse Wifi AP? Like I want a local wired LAN, which connects to an existing Wifi?
[23:58:06] <shka> gilberth: https://www.howtoforge.com/internet-connection-sharing-masquerading-on-linux
[23:58:07] -ixelp- How To Masquerade On Linux (Internet Connection Sharing)
