[00:01:09] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:14:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[00:16:54] *** Joins: fikran (~fikran@user/fikran)
[00:21:58] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 256 seconds)
[00:22:36] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[00:23:08] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:23:08] *** ChanServ sets mode: +v EvilDMP
[00:38:45] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75)
[00:50:34] *** Joins: totvs (~sidj@user/sidj)
[00:53:14] *** Quits: sidj (~sidj@user/sidj) (Ping timeout: 260 seconds)
[00:54:23] *** Quits: mad_moses (~mad_moses@2a02:6d40:2349:6f01:b8c3:2952:dab3:e046) (Quit: Leaving)
[00:58:14] *** Quits: totvs (~sidj@user/sidj) (Ping timeout: 256 seconds)
[01:03:44] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[01:05:07] *** Joins: sidj (~sidj@user/sidj)
[01:07:45] *** Quits: audiobirb (~audio@user/audio) (Remote host closed the connection)
[01:08:01] *** Joins: audiobirb (~audio@user/audio)
[01:09:01] *** Quits: jgee (~jgee@186.80.49.20) (Quit: The Lounge - https://thelounge.chat)
[01:10:34] *** Joins: jgee (~jgee@186.80.49.20)
[01:11:10] *** Quits: jgee (~jgee@186.80.49.20) (Client Quit)
[01:12:37] *** Joins: jgee (~jgee@186.80.49.20)
[01:23:55] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:29:43] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[01:31:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:33:01] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 245 seconds)
[01:40:36] *** Joins: dre (~dre@2001:8003:c932:c301:e788:c1b2:43c3:18c)
[01:41:51] *** Joins: audiobirb (~audio@user/audio)
[01:42:06] *** Quits: jgee (~jgee@186.80.49.20) (Quit: The Lounge - https://thelounge.chat)
[01:43:24] *** Joins: jgee (~jgee@186.80.49.20)
[01:43:43] *** Quits: dre (~dre@2001:8003:c932:c301:e788:c1b2:43c3:18c) (Remote host closed the connection)
[01:43:46] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:43:46] *** ChanServ sets mode: +v EvilDMP
[01:47:38] *** Joins: dre (~dre@2001:8003:c932:c301:c5de:7260:cf6e:da0c)
[02:10:24] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[02:22:52] *** Joins: gcain (~gcain@158.140.192.201)
[02:24:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[02:25:42] <gcain> Could someone please tell me why MyPy complains about this: https://dpaste.org/pj1X
[02:26:15] *** Joins: fikran (~fikran@user/fikran)
[02:27:22] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:27:46] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[02:27:47] <dodo> gcain: did you remove type hint comments from the paste?
[02:28:27] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[02:31:17] <gcain> dod: no, the code pretty much looks exactly like that. If I add type hints such as `permission_classes:List = [IsAuthenticated,]` I get the same error.
[02:39:40] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[02:41:11] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 264 seconds)
[02:42:23] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 264 seconds)
[02:45:59] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[02:49:39] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:53:34] *** Joins: w0rp_ (~w0rp@w0rp.com)
[02:54:41] *** Quits: w0rp (w0rp@2a01:7e00::f03c:91ff:fedb:589) (Ping timeout: 245 seconds)
[02:54:41] *** w0rp_ is now known as w0rp
[02:56:36] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[03:08:17] *** Joins: anddam (~anddam@user/anddam)
[03:09:54] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[03:10:08] *** Joins: explore (uid233125@hampstead.irccloud.com)
[03:10:45] *** Quits: dre (~dre@2001:8003:c932:c301:c5de:7260:cf6e:da0c) (Quit: Leaving)
[03:11:02] *** Joins: dre (~dre@2001:8003:c932:c301:c5de:7260:cf6e:da0c)
[03:19:18] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:28:24] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[03:33:04] *** Joins: Atque (~Atque@user/atque)
[03:34:25] *** Joins: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[03:44:14] *** Joins: yanchai (~yanchai@222.127.97.162)
[03:47:35] *** Parts: yanchai (~yanchai@222.127.97.162) ()
[03:52:31] *** Joins: yanchai (~yanchai@124.6.141.226)
[03:55:27] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[03:55:30] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:58:17] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[03:58:39] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[04:01:14] <dre> Hey guys
[04:01:41] <dre> happy monday
[04:05:13] <dre> is there a way I can define the "get_queryset" for this? https://docs.djangoproject.com/en/3.2/topics/db/managers/#from-queryset
[04:06:15] <schinckel> You can define a custom manager with get_queryset, and then use `CustomManager.from_queryset(QuerySet)()`, I think.
[04:06:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:06:55] <dre> I've tried but it doesn't work https://dpaste.org/1yP2#L2
[04:07:24] <dre> wait, CustomManager.from_qs(QuerySet) ?
[04:07:35] <schinckel> Yup.
[04:07:51] <dre> so change to line 2 in my dpaste?
[04:08:46] <dre> alternatively, can I do something like objects = models.Manager.from_qs(MyCustomQS)(get_queryset=MyCustomQS.unrevoked)
[04:08:50] <dre> I don't know if that'd work xD
[04:08:52] <dre> but it's pretty uck
[04:09:42] <dre> the code convention is to make custom querysets and call manager.from_qs, not so much to make custom managers, but i guess it doesn't matter.
[04:12:30] *** Joins: anddam (~anddam@user/anddam)
[04:15:39] <dre> schinckel, something like this ye? https://dpaste.org/qhqJ#
[04:15:45] <dre> I'm tryin it
[04:16:23] <schinckel> Yeah. It's a bit cumbersome, but sometimes you need to do stuff like that.
[04:16:33] <schinckel> I tend to have all queryset methods on querysets, rather than managers.
[04:16:43] <schinckel> Let me just have  look through my own custom managers and see what I do with them.
[04:17:45] <schinckel> Yep, I seem to only subclass Manager just to get a custom get_queryset()
[04:18:50] <schinckel> (In my case, it's often to always add a select_related(), instead of filter. There can be issues with filtering the default queryset, because then you can't get to all objects)
[04:21:06] <dre> oh cool nice
[04:22:03] <dre> yeah idk weird cases but ehhh. we've got to try and make the "default" option as reasonable as possible. I don't think we'd ever want to have "revoked" things coming up in code; but I digress.
[04:22:09] <dre> thanks for the help schnickel
[04:22:33] <dre> it would've been nice if there was a way to do this in the regular Manager.from_qs method..
[04:23:01] <dre> I wonder if that'd be suitable enough for me to open a PR about it........ and then do my `objects = models.Manager.from_qs(MyCustomQS)(get_queryset=MyCustomQS.unrevoked) ` approach
[04:23:33] <schinckel> I'm not sure that would even work - MyCustomQS.unrevoked is an unbound method.
[04:26:08] <dre> good point..      default_qs = 'string_method_name'    /shrug
[04:26:55] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:33:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[04:35:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:35:36] *** Joins: fikran (~fikran@user/fikran)
[04:38:16] *** Joins: audiobirb (~audio@user/audio)
[04:41:37] *** Joins: righthand (~righthand@2401:de00:f003:1044:a81a:67f4:a9dc:6e80)
[04:42:18] *** Joins: mimmy (~mimmy@45.14.195.121)
[04:50:48] *** Quits: gcain (~gcain@158.140.192.201) (Remote host closed the connection)
[04:51:54] *** Joins: gcain (~gcain@158.140.192.201)
[04:53:02] <gcain> Could someone please tell me why MyPy complains about this: https://dpaste.org/pj1X
[04:57:16] <schinckel> gcain: I'm guessing permission_classes is a tuple in the parent class.
[04:58:06] <gcain> schinckel: thanks, I'll test that quickly and see.
[04:59:56] <gcain> It gives exactly the same error when I run mypy.
[05:01:48] <gcain> If I run `type(generics.ListAPIView.permission_classes)` I get list, which is why I made the permission_classes a list.
[05:02:05] <schinckel> I was just guessing ;)
[05:02:24] <gcain> I was happy to try it, because I don't understand the error at all.
[05:08:08] *** Quits: yanchai (~yanchai@124.6.141.226) (Ping timeout: 256 seconds)
[05:18:41] *** Quits: explore (uid233125@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:21:21] *** Quits: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 245 seconds)
[05:24:54] *** Joins: yanchai (~yanchai@124.6.141.226)
[05:27:46] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[05:28:53] <PaulWay[w]> gcain: is AnalysisViewBase derived from MyViewBase?
[05:29:28] <PaulWay[w]> In DRF in my experience permissions_classes should be a list.
[05:29:47] <PaulWay[w]> No harm in defining a list as [foo,] AFAICS.
[05:31:08] <PaulWay[w]> What do you define your 'DEFAULT_PERMISSIONS_CLASSES' to in your settings?
[05:35:19] <gcain> PaulWay[w]: DEFAULT_PERMISSIONS_CLASSES comes back as a list both from my settings but also from the generic class I'm using too.
[05:36:04] <gcain> It seems like anything I declare in my base class and then try override raises this error if its also in one of the other derived classes.
[05:36:23] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 264 seconds)
[05:36:34] <gcain> So anything like, queryset, serializer_class, even values from my own classes.
[05:37:15] <gcain> But I can't move the other, in this case, DRF class up to my base class, because other derived classes use different ones depending on their context.
[05:53:47] <PaulWay[w]> OK.  Just as a check, are you marking the base class as abstract?
[06:10:27] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[06:12:30] *** Joins: explore (uid233125@hampstead.irccloud.com)
[06:19:17] *** Quits: gcain (~gcain@158.140.192.201) (Remote host closed the connection)
[06:26:03] *** Joins: gcain (~gcain@158.140.192.201)
[06:26:25] <gcain> PaulWay[w]: sorry, my internet is flakey here. No, I am not masking the base class as abstract.
[06:26:48] <gcain> I'm not sure I would really call it an abstract class, it's just a convenience thing for common elements.
[06:27:07] <gcain> Maybe the convention is wrong to start with...
[06:43:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[06:44:57] *** Joins: fikran (~fikran@user/fikran)
[06:47:47] *** Quits: mimmy (~mimmy@45.14.195.121) (Ping timeout: 264 seconds)
[06:53:49] *** Joins: mimmy (~mimmy@45.14.195.121)
[07:31:51] *** Quits: pjs (~pjs@user/pjs) (Read error: Connection reset by peer)
[07:32:06] *** Joins: pjs (~pjs@user/pjs)
[07:37:14] *** Quits: ktosiek (~ktosiek@li1810-126.members.linode.com) (Quit: Ping timeout (120 seconds))
[07:37:32] *** Joins: ktosiek (~ktosiek@li1810-126.members.linode.com)
[07:40:36] *** Quits: righthand (~righthand@2401:de00:f003:1044:a81a:67f4:a9dc:6e80) (Ping timeout: 256 seconds)
[07:50:46] *** Quits: yanchai (~yanchai@124.6.141.226) (Ping timeout: 256 seconds)
[07:52:19] *** Quits: sidj (~sidj@user/sidj) (Quit: Leaving)
[08:18:41] *** Quits: explore (uid233125@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:24:46] *** Quits: mimmy (~mimmy@45.14.195.121) (Ping timeout: 256 seconds)
[08:45:16] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75) (Ping timeout: 268 seconds)
[08:47:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:52:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:54:17] *** Joins: fikran (~fikran@user/fikran)
[09:12:11] <dre> it's so wild to me
[09:12:17] <dre> that this causes a recursion error: https://dpaste.org/sj2c
[09:12:44] <dre> Manager.get_queryset -> self.unrevoked -> manager.get_queryset -> ...
[09:12:52] <dre> how can I stop it?
[09:13:25] <dre> should "get_queryset" just be the self.exclude() call ?
[09:14:56] <FunkyBob> perhaps put unrevoked onto a custom queryset, and as_manager from that?
[09:15:20] <FunkyBob> I suspect the manager exclude() is calling self.get_queryset first...
[09:15:26] <FunkyBob> [of course, if we could see the traceback...]
[09:15:34] <dre> yeah it is FunkyBob
[09:17:11] <dre> FunkyBob, the issue with "as_manager" is that I wanted a "default" queryset
[09:17:26] <FunkyBob> ?
[09:17:50] <dre> so my_model.objects.all() # would only be the unrevoked (as per the qs)
[09:18:02] <dre> I didn't want to allow people to get revoked objects.
[09:18:10] <FunkyBob> ...yes?
[09:18:25] <FunkyBob> what has this to do with as_manager and "default" queryset?
[09:19:01] <dre> ok ; so my question is, if I make the queryset, it doesn't use the "get_queryset" function, and the objects.all() returns everything.
[09:19:21] <dre> so how would I make it unrevoked() by default ?
[09:19:51] <FunkyBob> does it?  or are you conflating queryset and manager?
[09:20:00] <FunkyBob> MyModel.objects is a manager
[09:21:37] <dre> ah, I was using "objects = models.Manager.from_queryset(MyCustomQS)()"    not something like "objects = MyCustomQS.as_manager()" ?
[09:23:55] <dre> OH right, I think I've found it, I need super().get_queryset()
[09:23:57] <dre> @FunkyBob,
[09:24:25] <dre> https://docs.djangoproject.com/en/3.2/topics/db/managers/#modifying-a-manager-s-initial-queryset
[09:26:29] <dre> well i can't name things unrevoked at that point but eh it's fine Idk
[09:28:46] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[09:33:20] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 256 seconds)
[09:36:13] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:36:15] *** Joins: dor (~erg@78.11.12.207)
[09:40:34] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[09:46:44] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:56:13] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[10:05:11] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 264 seconds)
[10:16:17] <serafeim> hello friends
[10:28:39] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[10:28:39] *** Quits: urth (~urth@geertswei.nl) (*.net *.split)
[10:28:39] *** Quits: newdimension (~newdimnes@user/newdimension) (*.net *.split)
[10:28:39] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[10:28:39] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[10:28:39] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[10:28:39] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[10:28:39] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[10:28:39] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[10:28:40] *** Quits: SeeM (~SeeM@153.ip-54-38-53.eu) (*.net *.split)
[10:28:40] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[10:28:48] *** Joins: shodan45 (~quassel@107.161.22.155)
[10:28:54] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[10:28:56] *** Joins: SeeM (~SeeM@153.ip-54-38-53.eu)
[10:28:56] *** Joins: urth (~urth@geertswei.nl)
[10:29:15] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[10:29:17] *** Joins: beanzilla (beanzilla@user/beanzilla)
[10:29:19] *** Joins: newdimension (~newdimnes@user/newdimension)
[10:29:22] *** Joins: Byteflux (~byte@byteflux.net)
[10:29:49] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[10:33:33] *** Joins: mrwick (~mrwick@user/mrwick)
[10:34:22] *** Quits: Wooble (~Wooble@107.170.27.240) (*.net *.split)
[10:34:22] *** Quits: anorthall_ (~anorthall@user/anorthall) (*.net *.split)
[10:34:22] *** Quits: dang`r`us (~eismann@pg.afoo.at) (*.net *.split)
[10:34:22] *** Quits: crowbar (~crowbar@user/crowbar) (*.net *.split)
[10:34:23] *** Quits: derelict (derelict@user/derelict) (*.net *.split)
[10:34:23] *** Quits: jrabbit (~jack@user/jrabbit) (*.net *.split)
[10:34:48] *** Joins: crowbar (~crowbar@user/crowbar)
[10:34:50] *** Joins: jrabbit (~jack@user/jrabbit)
[10:34:57] *** Joins: derelict (~derelict@user/derelict)
[10:35:04] *** Joins: dang`r`us (~eismann@pg.afoo.at)
[10:35:27] *** Joins: anorthall_ (~anorthall@user/anorthall)
[10:35:28] *** Joins: Wooble (~Wooble@107.170.27.240)
[10:42:19] *** Joins: explore (uid233125@hampstead.irccloud.com)
[11:01:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[11:03:39] *** Joins: fikran (~fikran@user/fikran)
[11:14:44] *** Quits: gcain (~gcain@158.140.192.201) (Remote host closed the connection)
[11:24:14] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[11:34:36] *** Joins: pycode (~pycode@2001:b07:5d28:551:d5e6:9fbc:c344:bd2f)
[11:51:04] *** Joins: Tas-sos (~Tas-sos@ppp046176221197.access.hol.gr)
[11:59:52] *** Quits: ktosiek (~ktosiek@li1810-126.members.linode.com) (Quit: The Lounge - https://thelounge.chat)
[12:02:13] *** Joins: righthand (~righthand@2401:de00:f003:1044:a81a:67f4:a9dc:6e80)
[12:06:04] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[12:09:14] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:10:39] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[12:20:47] <pycode> hello everybody
[12:22:33] <pycode> how can i check if a form(inside a formset) is deleted?
[12:22:54] <pycode> with "deleted" i mean that it has DELETE checkbox = 'on'
[12:27:42] *** Quits: FurCoatStarlette (FurCoatSta@159.196.89.115) (Remote host closed the connection)
[12:30:20] *** Quits: code1 (~code1@2001:470:69fc:105::c807) (Quit: You have been kicked for being idle)
[12:34:45] <carloratm> Hi all, I am trying to write a selenium testcase, here is the code: https://rentry.co/s768n
[12:36:02] <carloratm> The second time cities queryset is empty, I don't know why (please see the print statement). any idea?
[12:36:33] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:36:52] <explore> is it possible to configure Rust websites so that.. users who are logged in via a django site can seamlessly click over to a Rust-site and maintain their logged-in-ness? is that.. i don't know what i am asking lol
[12:37:18] *** Joins: luischi (~luigi@80.30.201.209)
[12:40:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:40:47] *** ChanServ sets mode: +v EvilDMP
[12:43:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[12:49:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:49:04] *** ChanServ sets mode: +v EvilDMP
[12:51:01] *** Joins: C1sco_Boy (~C1sco_Boy@165.225.81.102)
[13:04:30] *** Joins: Rikem (~mike@user/rikem)
[13:06:53] *** Joins: brsc2909 (~Thunderbi@109.255.244.60)
[13:10:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[13:12:59] *** Joins: fikran (~fikran@user/fikran)
[13:18:00] <carloratm> oh, I am using TransactionTestCase under the hood, so I got my tables truncated.
[13:21:58] <carloratm> this is a possible solution: https://docs.djangoproject.com/en/3.2/topics/testing/overview/#rollback-emulation
[13:35:04] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:35:37] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:36:58] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi)
[13:38:56] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:40:08] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[13:51:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:02:18] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:02:46] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi)
[14:20:42] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:21:38] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[14:23:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:23:20] *** ChanServ sets mode: +v EvilDMP
[14:38:04] *** Joins: mad_moses (~ps@2a02:810b:f3f:f0d0:d250:99ff:fe86:b052)
[14:38:04] <mad_moses> Why there is no redis support for Django? Is Memcached still the best?
[14:39:00] <bparker> https://github.com/jazzband/django-redis sorry what?
[14:39:02] *** Quits: brsc2909 (~Thunderbi@109.255.244.60) (Quit: brsc2909)
[14:45:49] <mad_moses> I know there are third party packages. But why is django not supporting this out of the box. Are there any drawbacks in using redis?
[14:47:46] <mad_moses> https://docs.djangoproject.com/en/4.0/releases/4.0/ Redis support will come in 4.0
[14:52:48] *** Joins: _ganapathi_ (~ganapathi@115.97.240.119)
[14:54:26] <_ganapathi_> am using django apscheduler. basically want to disable Debug to False to avoid memory leak and other concern but want to print some output using logger. anybody suggest me the way to do it. if i disable debug then completely no output from logger.
[15:08:15] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:16:51] *** Quits: pycode (~pycode@2001:b07:5d28:551:d5e6:9fbc:c344:bd2f) (Ping timeout: 268 seconds)
[15:18:03] *** Joins: vlt (~dm@157.230.21.14)
[15:20:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[15:22:20] *** Joins: fikran (~fikran@user/fikran)
[15:46:40] *** Joins: slavfox_ (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[15:47:32] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Ping timeout: 260 seconds)
[15:47:32] *** slavfox_ is now known as slavfox
[15:52:03] *** Quits: explore (uid233125@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:00:13] *** Joins: Atque (~Atque@user/atque)
[16:08:54] *** Quits: luischi (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[16:32:41] <GinFuyou> _ganapathi_, fix your logger? Django is not supposed to run in production with debug on, and there is no rule that without it logging doesn't work
[16:40:01] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:41:14] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi)
[16:41:17] <_ganapathi_> am not saying debug supposed to on in production.
[16:41:38] <_ganapathi_> some information need to log which i considered as information instead of debug
[16:42:23] <_ganapathi_> using django default logger.
[16:42:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:46:23] <moldy> _ganapathi_: showing your logging config might help
[16:49:47] *** Quits: C1sco_Boy (~C1sco_Boy@165.225.81.102) (Quit: Client closed)
[16:50:08] <_ganapathi_> settings.py  - DEBUG = False.
[16:50:29] <_ganapathi_> logging.basicConfig(format='[%(asctime)s] %(levelno)s' \                '(%(process)d) %(module)s: %(message)s', level=logging.INFO)
[16:50:34] <_ganapathi_> thats it.
[16:52:23] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[16:53:38] *** Joins: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[16:59:52] *** Quits: righthand (~righthand@2401:de00:f003:1044:a81a:67f4:a9dc:6e80) (Quit: Client closed)
[17:09:25] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:10:39] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[17:12:34] *** Joins: Ergo^ (~ergo@91.238.59.144)
[17:12:52] *** Joins: pycode (~pycode@2001:b07:5d28:551:cde:90af:5fe0:7ada)
[17:17:09] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[17:29:31] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:29:46] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:30:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[17:31:41] *** Joins: fikran (~fikran@user/fikran)
[17:34:05] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 250 seconds)
[17:44:39] *** Joins: slav0nic (slav0nic@python.su)
[17:46:08] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[17:50:11] *** Joins: pyrrhus (~pyrrhus@user/pyrrhus)
[17:52:40] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:53:38] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi)
[17:56:32] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:85bc:764e:7689:fb9f)
[17:56:56] *** Parts: _ganapathi_ (~ganapathi@115.97.240.119) ()
[18:00:19] *** Quits: dor (~erg@78.11.12.207) (Quit: Leaving)
[18:01:09] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Read error: Connection reset by peer)
[18:01:45] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[18:02:30] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0c0-17.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:03:31] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[18:06:57] *** Joins: mimmy (~mimmy@72.142.88.18)
[18:14:14] <dminuoso> Hi. What's the usual way to assert that my templates generate valid HTML?
[18:19:46] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:22:23] <dodo> dminuoso: i've used django-html-validator which has a test client that passes output to a validator
[18:22:38] *** Joins: Atque (~Atque@user/atque)
[18:23:05] <dodo> hm, looks pretty abandoned now though
[18:25:13] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[18:25:58] <Wooble> if people actually wanted valid html, xhtml would have stuck :)
[18:26:11] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 265 seconds)
[18:28:48] <dodo> it's not about pleasing random people but not having bugs due to browser quirks and what not
[18:28:50] <dminuoso> Your logic deduction skills are flawless and convinced me, clearly I dont want html.
[18:28:56] <dminuoso> /s
[18:29:10] *** Joins: mimmy (~mimmy@72.142.88.18)
[18:29:41] <dminuoso> It's just damn surprising browsers dont have this built in.
[18:32:06] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[18:36:24] <Wooble> I used to use a browser that did but it was so long ago I can't even remember what it was called.
[18:36:46] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[18:43:51] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:01:30] <lelouche22> Hi, I am a beginner on Django and I need help on my django 2.2 application.
[19:01:30] <lelouche22> I have virtual machines and schedules with a manytomany relationship.
[19:01:31] <lelouche22> I am trying to create a new schedule but I have an error.
[19:01:31] <lelouche22> Basically in my schedule creation form in a column I display the list of VMs. So we can select which machine to assign a schedule.
[19:01:32] <lelouche22> But what I would like is to display in another column the existing schedules, like this(Picture):https://ibb.co/2dvTzXc
[19:01:32] <lelouche22> I tried with a raw query, It's display well, but When I tried to send my form an error occured.
[19:01:33] <lelouche22> My traceback = https://dpaste.org/p9SQ
[19:01:33] <lelouche22> My models = https://dpaste.org/FwFe
[19:01:34] <lelouche22> My code = https://dpaste.org/ZsNZ
[19:01:34] <lelouche22> Working with no schedule = https://dpaste.org/KrxR
[19:01:35] <lelouche22> is there another way to do what I want with a queryset ?
[19:08:39] *** Joins: brsc2909 (~Thunderbi@109.255.244.60)
[19:11:37] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 265 seconds)
[19:11:51] *** Joins: xkuru (~xkuru@user/xkuru)
[19:18:44] <GinFuyou> lelouche22, what are you choices vars?
[19:19:16] <GinFuyou> Also vms probably should be (Multiple)ModelChoiceField, not simple choice field
[19:19:19] *** Joins: Matthias1 (~Matthias1@casewireless10.cwru.edu)
[19:21:23] <lelouche22> GinFuyou you mean what is vm_sche_list  in vms ?
[19:21:30] <GinFuyou> choices are iterable of two-tuple, by look of it, you have something else
[19:21:36] <GinFuyou> yeah, probably that
[19:22:36] <lelouche22> GinFuyou it's my liste look at https://dpaste.org/ZsNZ#L26,27
[19:22:46] <lelouche22> list*
[19:24:01] <GinFuyou> I can't easily imagine what is the result of it. From the code and error message I suspect it's incorrect format
[19:26:41] *** Joins: mimmy (~mimmy@72.142.88.18)
[19:28:03] <lelouche22> GinFuyou look to this : https://dpaste.org/GZDm#L20
[19:29:02] <lelouche22> GinFuyou  first it's gives me a tulp and after this line a my list https://dpaste.org/GZDm#L14
[19:30:44] <lelouche22> GinFuyou  the first element is my Vm and the second is my Shedule(s)
[19:31:27] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (Quit: ZNC - http://znc.in)
[19:33:11] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[19:33:56] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (Client Quit)
[19:34:52] <GinFuyou> well, it's lists of three, and choices expected of two
[19:35:18] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[19:39:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[19:40:49] <lelouche22> GinFuyou hm ok I there a way to fix that ? maybe with an example ?
[19:40:58] <lelouche22> is*
[19:41:02] *** Joins: fikran (~fikran@user/fikran)
[19:42:44] <GinFuyou> yes, make it two element
[19:43:48] <GinFuyou> I'm not sure what you wanted to get here
[19:45:34] <GinFuyou> e.g. I don't quite see how list of vms corresponds to form and list of schedules.
[19:45:42] <GinFuyou> Sounds like a formset maybe
[19:46:03] <GinFuyou> and ofc, generally you don't need raw queries for it
[19:46:53] <GinFuyou> modelform(set)s can do most things automaticallly
[19:47:34] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Ping timeout: 268 seconds)
[19:49:00] *** Quits: Matthias1 (~Matthias1@casewireless10.cwru.edu) (Remote host closed the connection)
[19:49:38] *** Joins: ironbeard (~geoffrey@130-45-89-178.dyn.grandenetworks.net)
[19:50:25] <lelouche22> GinFuyou ok but how can you do a group_concat with a queryset ?
[19:50:29] <ironbeard> Is it possible to change the queryset of a ModelChoiceField when initializing the form in the view? (similiar to setting initial=)
[19:53:15] <GinFuyou> lelouche22, not sure, but what for?
[19:53:18] <lelouche22> ironbeard yeah I can see but I will end up with the same one I did with the raw queries
[19:53:39] <GinFuyou> ironbeard, self.fields['field'].queryset perhaps?
[19:53:41] <lelouche22> ironbeard with same probleme*
[19:54:16] *** Joins: kostkon_ (~androirc@2a02:1388:8b:e9a8:dd9:6fd1:65a0:83c9)
[19:56:10] <ironbeard> GinFuyou: that can be done in the form.Form's __init__ method..but I want to do something like `context = {'form': MyForm(initial={'field': 'initial_value', 'queryset': Model.objects.filter(my_query)})}`
[19:56:47] <GinFuyou> ironbeard, then pass queryset to form init args
[19:57:44] <ironbeard> GinFuyou, good point..going to try that now thanks :)
[20:00:08] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:00:35] <ironbeard> wait, but the queryset is field specific, so I'm not sure how I'd pass that when itializing the form
[20:01:53] *** Quits: kostkon_ (~androirc@2a02:1388:8b:e9a8:dd9:6fd1:65a0:83c9) (Ping timeout: 265 seconds)
[20:01:56] <ironbeard> MyForm(queryset=Model.queryset.filter(q)) won't work because it's not obvious which field the queryset goes to. I'm doubtful that MyForm(fields['fieldname'].queryset=Model.objects.filter(q)) would work, since it's not a initial kwarg
[20:02:29] <GinFuyou> I mean make it a kwarg. Then handle it in init
[20:03:49] <ironbeard> ohh, gotcha gotcha. Thanks :)
[20:10:49] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:11:25] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:11:36] *** Joins: Matthias1 (~Matthias1@caseguest.CWRU.Edu)
[20:11:42] *** Quits: Matthias1 (~Matthias1@caseguest.CWRU.Edu) (Remote host closed the connection)
[20:12:11] *** Joins: Matthias1 (~Matthias1@macbookgamma.STUDENT.CWRU.Edu)
[20:14:39] <pycode> i have a string with html
[20:14:49] <pycode> how can i print that string and interpret the HTML
[20:14:50] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Ping timeout: 256 seconds)
[20:14:50] <pycode> ?
[20:23:38] <GinFuyou> I guess you mean that you don't want tags to be escaped
[20:24:02] <GinFuyou> string must be marked as safe either in template, or when prepared in python
[20:24:16] *** Quits: ironbeard (~geoffrey@130-45-89-178.dyn.grandenetworks.net) (Quit: WeeChat 2.3)
[20:24:43] <GinFuyou> https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#std:templatefilter-safe
[20:25:04] <GinFuyou> in python I usually use format_html from utils
[20:26:03] *** Joins: lelouche22 (~lelouche2@h178.cornut.fr)
[20:28:31] *** Joins: Matthia__ (~Matthias1@caseguest.CWRU.Edu)
[20:31:45] *** Quits: Matthias1 (~Matthias1@macbookgamma.STUDENT.CWRU.Edu) (Ping timeout: 250 seconds)
[20:32:13] *** Joins: lelouche2277 (~lelouche2@88.170.67.207)
[20:32:36] <pycode> gin
[20:32:43] <pycode> {% autoescape off %}
[20:32:46] <pycode> done!
[20:35:14] *** Quits: lelouche22 (~lelouche2@h178.cornut.fr) (Ping timeout: 256 seconds)
[20:37:52] <GinFuyou> for a string? strange choice
[20:40:56] <pycode> GinFuyou, why?
[20:41:06] <pycode> it is basically the content of a textarea (an editor)
[20:41:09] <pycode> imust show the html too
[20:41:22] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[20:41:29] *** Quits: rvgate (~rvgate@user/rvgate) (Ping timeout: 250 seconds)
[20:42:53] *** Joins: mimmy (~mimmy@72.142.88.18)
[20:49:57] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:53:35] *** Quits: rje (~rje@50.35.241.164) (Quit: My computer has gone to sleep. ZZZzzz…)
[20:54:43] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[20:55:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:55:38] *** Quits: lelouche2277 (~lelouche2@88.170.67.207) (Ping timeout: 256 seconds)
[21:04:14] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 265 seconds)
[21:06:32] <pycode> GinFuyou, i wonder why you said strange choice, it is a template the user can change
[21:06:40] <pycode> it is a model for a quote
[21:06:46] <pycode> so the user can edit it
[21:07:01] <pycode> and if he adds <br> <p> i should interpret
[21:07:01] <pycode> it
[21:07:35] <GinFuyou> Especially for user you want to be very careful what you allow to be unescaped
[21:07:56] <GinFuyou> preferably, don't use html for user input
[21:08:03] <pycode> GinFuyou, how can i unescaped <br> and <p> only
[21:08:08] <pycode> ?
[21:08:38] <GinFuyou> bleach, different markup language
[21:08:54] <GinFuyou> encode linebreaks
[21:10:03] <pycode> ok
[21:11:06] <GinFuyou> If you allow user to input any html, they use <script> and inject all kind of nasty things
[21:11:39] <pycode> it is just for admin panel it is not open to every user
[21:13:24] <GinFuyou> that's better, but still good security consideration
[21:13:36] <pycode> yes you are right
[21:20:45] *** Joins: Matthias1 (~Matthias1@macbookgamma.STUDENT.CWRU.Edu)
[21:23:45] *** Quits: Matthia__ (~Matthias1@caseguest.CWRU.Edu) (Ping timeout: 250 seconds)
[21:25:54] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:27:58] *** Joins: mimmy (~mimmy@72.142.88.18)
[21:32:11] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 264 seconds)
[21:39:23] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:41:30] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 256 seconds)
[21:45:42] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[21:46:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:48:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[21:49:26] *** Quits: Matthias1 (~Matthias1@macbookgamma.STUDENT.CWRU.Edu) (Ping timeout: 256 seconds)
[21:50:23] *** Joins: fikran (~fikran@user/fikran)
[21:52:05] *** Joins: rje (~rje@65.141.156.170)
[21:56:10] *** Joins: rje_ (~rje@65.141.156.170)
[21:58:40] *** Joins: Matthias1 (~Matthias1@casewireless02.CWRU.Edu)
[21:58:51] *** Quits: rje (~rje@65.141.156.170) (Ping timeout: 250 seconds)
[21:59:17] *** Joins: explore (uid233125@hampstead.irccloud.com)
[22:03:00] *** Joins: djapo (~archangel@user/djapo)
[22:04:16] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:08:05] *** Joins: mimmy (~mimmy@72.142.88.18)
[22:23:56] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[22:27:29] *** Joins: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it)
[22:29:45] *** Quits: pycode (~pycode@2001:b07:5d28:551:cde:90af:5fe0:7ada) (Ping timeout: 268 seconds)
[22:36:08] *** Joins: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[22:37:31] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[22:38:58] *** Quits: dkliban (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 265 seconds)
[22:44:47] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[22:49:10] *** Joins: audiobirb (~audio@user/audio)
[23:02:07] *** Quits: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 250 seconds)
[23:08:03] *** Joins: sidj (~sidj@user/sidj)
[23:17:03] *** Quits: Matthias1 (~Matthias1@casewireless02.CWRU.Edu) (Remote host closed the connection)
[23:20:13] *** Joins: Matthias1 (~Matthias1@casewireless02.CWRU.Edu)
[23:20:41] *** Quits: Matthias1 (~Matthias1@casewireless02.CWRU.Edu) (Remote host closed the connection)
[23:20:56] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 268 seconds)
[23:25:15] *** Quits: audiobirb (~audio@user/audio) (Remote host closed the connection)
[23:25:33] *** Joins: audiobirb (~audio@user/audio)
[23:27:55] *** Joins: mimmy (~mimmy@72.142.88.18)
[23:32:15] *** Joins: sumbru (~sumbru@109.185.158.131)
[23:51:09] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 268 seconds)
[23:57:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[23:59:44] *** Joins: fikran (~fikran@user/fikran)
