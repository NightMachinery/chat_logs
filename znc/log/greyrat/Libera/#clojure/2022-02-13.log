[00:01:10] <TimMc> Ah... it's there in Java 8.
[00:01:17] <TimMc> Some bit-rot there.
[00:01:54] <TimMc> "It was inherently unsafe (see stop() for details), and furthermore could be used to generate exceptions that the target thread was not prepared to handle."
[00:02:16] <seebs> i call dibs on reporting it if it's not already reported... how do bug tracker?
[00:02:52] <z3t0_alt> yauhsien, sure thank you :)
[00:03:10] <seebs> hmm. there is a jira tracker for clojure. but i do not seem to have permissions to file bugs.
[00:03:25] <TimMc> So, it should be... (clojure.repl/set-break-handler! (fn [_] (.stop (Thread/currentThread)))) -- but then it doesn't work?
[00:03:26] <seebs> oh maybe i should allow atlassian to run a few gigabytes of javascript
[00:03:37] <z3t0_alt> So I am building a reagent frontend app in cljs, and am trying to setup the routing.
[00:03:38] <z3t0_alt> I am following a reagent template that sets up routing with: reitit, accountant and clerk
[00:03:38] <TimMc> Yeah, go for it, if you can figure out their bugtracker. :-P
[00:04:19] <z3t0_alt> I am having some trouble understanding what each of these libraries are doing.
[00:04:19] <z3t0_alt> From what I understand, reitit sets up the routes to data mapping, accountant preserves history and clerk fixes some issues with SPA navigation
[00:04:57] <z3t0_alt> What I can't figure out is which library I should be using to cause a page change. For example I want to change to the login page, which library would have the function I am looking for?
[00:04:57] <z3t0_alt> Thanks :)
[00:06:18] <z3t0_alt> I think accountant has what I want, but I'm just having a bit of trouble figuring it out.
[00:06:19] <z3t0_alt> Basing this on "Accountant also lets you navigate the app to a new URL directly, rather than through <a> tags."
[00:07:48] <yauhsien> wow, closh the bash-like shell https://news.ycombinator.com/item?id=15600928
[00:09:41] <seebs> hmm. answer is, i can create a jira account, but that account doesn't get access to that bug tracker. hmm.
[00:10:36] <seebs> the web page says anyone can submit a bug report, once they've created an account, but maybe it is acting up.
[00:11:03] <TimMc> https://github.com/clojure/clojure/blob/master/CONTRIBUTING.md says to instead use https://ask.clojure.org/
[00:11:42] <seebs> ahh. bitrot in the docs
[00:12:12] <TimMc> so now you have two bugs to file
[00:13:51] <TimMc> (clojure.repl/set-break-handler! (fn [msg] (throw (Error. msg)))) does something maybe slightly more useful -- actually stops the thread!
[00:14:17] <TimMc> No guarantee it will stop all threads, though...
[00:16:43] <seebs> https://twitter.com/yoo_hoo_yoo/status/1491587482890080257
[00:17:40] <TimMc> speaking of GBs of JS
[00:21:20] <yauhsien> z3t0_alt: in my understanding, for SPA, page navigation is a case of page change, then it must be using clerk.
[00:23:52] <yauhsien> z3t0_alt: thought in accountant there is (accountant/configure-navigation!) for navigation and it's also a case of page change.
[00:23:53] <TimMc> seebs: Funny, sometimes (fn [_] (.stop (Thread/currentThread))) as the thread-stopper works, and sometime it doesn't. May have been leftover state in my REPL some of the times it didn't work, though.
[00:24:40] <seebs> it's plausible to me that it doesn't work because of the same underlying thing that made them take the 1ary out
[00:26:42] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:27:36] <TimMc> It seems like the unary stop has a special problem of allowing you to put *any* Throwable in there.
[00:46:25] <Para> seebs: Kinda late here but JVM doesn't have TCO so at best Clojure could emulate it. So it probably wasn't worth the effort. Scala does it (dunno exact mechanics there) but it feels very janky.
[00:50:07] <z3t0_alt> thanks yauhsien, the navigation function did it!
[00:50:18] <z3t0_alt> Also, a basic question but, are clojure namespaces not allowed to have "-" characters?
[00:50:33] <z3t0_alt> I tried googling about it, but search engines don't do well with dash characters
[00:50:56] <Para> Nope, but there's a bit of conversion going - the file has to have underscores in its name.
[00:51:25] <Para> So my.dashed-namespace -> my/dashed_namespace.clj{csxr}
[00:51:55] <Para> https://clojure.org/guides/learn/namespaces
[00:52:00] <cyberbanjo> cljr and cljx? Which are those
[00:52:19] *** Joins: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net)
[00:52:37] <Para> old stuff :)
[00:53:04] <cyberbanjo> ahh ty
[00:53:27] <Para> cljx is pre-cljc: https://github.com/lynaghk/cljx and cljr is not official, but you might bump into it with eg. https://clojure.org/guides/reader_conditionals
[00:53:29] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[00:56:29] <yauhsien> z3t0_alt: a learning guide said that you may use "-" character in a namespace, but the symbol will be mapped to underscore.
[00:58:07] <seebs> "TCO"?
[00:58:23] <seebs> ahh, tail-call optimization. that makes sense.
[00:58:45] <seebs> i was thinking, and i think i figured out why i've bounced so hard off lisps before
[00:59:02] <seebs> my usual experience of asking about lisps is that i'm told that macros are the best thing ever and can do amazing things no other language can do, and i ask for an example
[00:59:11] <Para> Macros are like the worst thing ever.
[00:59:28] <seebs> so i get ten lines of parentheses with a few letters scattered in them, and i say "is that a macro?" and they say "no, it's two macros, the first three lines are a helper macro that make the rest of it a line shorter to save space and make it clearer"
[00:59:31] <Para> In Clojure land the two rules of macros are 1) don't 2) if you can create a function to fill your need, create a function
[01:00:06] <Para> (steering away from this absolutes are for the 0,01% of cases where they're actually useful, and obviously core macros don't count)
[01:00:11] <seebs> and eventually they explain that what this does is, and as a non-lisp user i probably can't even comprehend the brilliance, it takes a thing which has a value, and evaluates that value, and then increments the value and stores the *new* value such that a future reference will see a value one higher, but then the *expression* yields the *previous* value
[01:00:22] <seebs> and this, because it was done with a macro, is a thing that Cannot Be Done In Any Other Language
[01:01:23] <seebs> and i say "uh okay?" and then they tell me they can actually do it in five more lines of code if they use the y-combinator.
[01:01:47] <seebs> and i give up and go back to writing C or something because at least i know *why* it sucks
[01:02:05] <Para> All meta programming in fact is quite terrible in practice, and takes great discpline to do correctly. Both Ruby and Groovy have metaclasses and a lot of weird and cool and useful stuff has been made with them - Ruby on Rails is in fact mostly just an additional API on top of Ruby - but the ugly backside is that if there's any undefined behavior anywhere, it will explode.
[01:02:23] <seebs> yeah
[01:02:26] <yauhsien> I won't follow any "don't" saying.
[01:02:35] <seebs> i love rails until i try to use it
[01:02:42] <cyberbanjo> I <3 Ruby on Rails if anything it gives me hope for metaprogramming
[01:03:00] <technomancy> it's like Lua's rules of optimization: 1) Don't do it. 2) (for experts only) Don't do it *yet*.
[01:03:04] <seebs> one of the prize-winners in Friendly Community for me was a time i had some problem with rails, so i went to a rails channel, and i described my problem, and what i was trying to do, and what i'd found already by searching and tried and how it had failed
[01:03:27] <seebs> and someone gave me a lmgtfy link to the search terms that linked to basically an entire page of links i'd already read and some of which i'd mentioned reading
[01:04:00] <lagash> sarcasm detected!
[01:04:23] <Para> I think in one of many Rich' talks he's mentioned about some optimizations he's tried to do to Clojure which he ended up rolling back since JIT did them better during runtime :)
[01:04:27] <seebs> i spend a lot of my time doing things where it actually IS worth a day or two of my time to try to trim a few percent off something, and i spend a lot of time being upset about how bad programmers are about performance. and i *still* give the "don't do it" advice for optimizing because mostly it'll just make things worse
[01:04:50] <z3t0_alt> Para , yauhsien thanks that makes sense!
[01:05:21] <technomancy> seebs: because people will know to ignore that advice when they should
[01:05:24] <seebs> my personal least favorite: "for i := 0; i <= 1020; i += 4", because if i did "for i := 0; i < 1021; i += 4" it was noticably slower
[01:05:32] <yauhsien> errr, stop being Rich's baby. he talked; you think.
[01:05:38] <Para> Macros are like waving an actual light saber - you're not a jedi, in fact Force isn't even real, now your leg is cut.
[01:06:18] <seebs> i will generally follow a "don't" saying for production code, but will ignore them when playing around so that, when the time comes, i got most of the early mistakes out on practice legs
[01:06:34] <Para> yauhsien: Anyone claiming they can do better than JIT with optimizations deserves a bucket on their head for a bit :) It's fine to try, as long you measure, but it probably won't produce anything useful.
[01:06:55] <Para> And of course learning and messing about is all about doing the nonsensical thing.
[01:07:15] <yauhsien> err... some this, and some that, always be like waving some light sabers. 
[01:07:46] <technomancy> I wrote my thoughts on macros here; not clojure-specific tho https://fennel-lang.org/macros
[01:08:07] <Para> But, speaking of light sabers, gonna watch an episode of Clone Wars and then hit the bed ->
[01:08:07] <yauhsien> if some word is just a note, don't tell that like it's a guideline.
[01:08:25] <Para> (kids' show about casual war crimes in tech fantasy world, yay)
[01:08:53] <seebs> it's a pretty good guideline, though
[01:10:14] <seebs> speaking of things you shouldn't do, is there a good way in clojure to do things similar to ruby's .method_missing, e.g., catch undefined symbols and define them right as the fact that they're undefined is becoming a problem?
[01:10:35] <seebs> i guess "good" is probably not the right word
[01:10:52] <yauhsien> by talking about the "guideline," I would like to share some experience of mine.
[01:12:26] <yauhsien> you know, in Taipei, Taiwan, there is a special guideline about MRT escalators.
[01:12:32] <technomancy> seebs: clojure really wants everything to be defined up front. closest you can do is multimethods which can decide a lot at runtime.
[01:12:59] <technomancy> not being able to do method missing is like ... one of my favorite things about clojure.
[01:13:28] <yauhsien> "All people entering the escalator should be standing toward the right part, and leaving the left way for free walking."
[01:14:58] <yauhsien> the guideline were followed by people for decades, even after some years we all know that's a wrong way to treat escalators about balancing and mechanism problems.
[01:15:34] <cyberbanjo> wrong way?
[01:15:52] <yauhsien> but Taipei people are so weird, they do like following guidelines without thinking about those.
[01:18:31] <Para> Rules and guidelines are for people who do not yet understand why they exist; and even then, the insight gained usually justifies why it exists and has persisted over generations.
[01:18:41] <Para> (fwiw, all Finns do queue and stand on right side as well)
[01:19:02] <Para> The more banal version is the "All regulations are written in blood.", which they mostly are.
[01:19:37] <seebs> yeah. and sometimes they don't actually work to solve the problem, but usually there *was* a problem.
[01:21:26] <yauhsien> and I as a person living in Taipei, I think they are ridiculous, such as when people standing in a line, they tend to keep a regular way, that one is always standing right after another so they form a straight line, even the end of the line squeeze to a wall backward, or the line long into a toilet.
[01:23:39] <yauhsien> and some day when I tried to stand in the left way of a escalator, someone, a foreigner to us Taipei, who he may be an American or of other nation, taught me that keep-left-way-clear guideline.
[01:24:00] <yauhsien> mad men, mad guideline.
[01:25:20] <seebs> i have seen that protocol before for cases where some people will want to move faster than others, so having a protocol that admits some people going faster and other people to not bother and also not block the path seems handy
[01:25:57] <yauhsien> then, I would like to read some macro-prevention note on a book rather than to hear the so-called "no macro until brah" talking again and again. boring talk.
[01:27:19] <yauhsien> "light saber," huh? so, do you use the force?
[01:34:21] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[01:34:21] *** Quits: glider (~glider@user/glider) (Quit: ZNC - https://znc.in)
[01:36:37] <seebs> it's probably a metaphor
[01:37:32] <ridcully_> checked my clojure books, what they have to say about macros
[01:37:42] <sobel> around here, we say regulations are written in blood and repealed by Republicans
[01:37:46] <ridcully_> clojure applied does not even have the word defmacro in the text
[01:38:23] <ridcully_> joy of clojure has a list of rules of thumbs for macros and the first rule is: don't write a macro if a function will do
[01:38:47] <sobel> this one weirde olde tippe has saved me from ever writing my first macro
[01:39:04] <seebs> on the one hand, i'm sure i'll write lots of macros
[01:39:09] <seebs> on the other hand i was once an IOCCC judge
[01:40:42] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[01:41:23] <sobel> hehe
[01:41:39] <sobel> i enjoy a piece of code shaped like a locomotive sometimes
[01:42:21] *** Joins: glider (~glider@user/glider)
[01:43:01] <sobel> also i enjoy a piece of code that contains its source, as a string, which it can write to disk, compile, then spawn
[01:44:29] <sobel> i don't know if it qualifies as a regret, but i'm at least slightly lamed out that i learned way more from ridiculous and/or ridiculously defective code than from the good stuff
[01:46:15] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[01:50:20] *** Joins: unyu (~pyon@user/pyon)
[01:54:10] *** Quits: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru) (Ping timeout: 260 seconds)
[02:01:28] <seebs> no, i think that's normal or even inevitable. you have to know the shape of the space and you can't explore a shape fully by only seeing one side of it
[02:06:09] <sobel> yeah, i suppose there may have been some imposter's syndrome at work when i felt convinced that better programmers had some inside track on gaining more or better experience for the same time spent
[02:07:55] *** Quits: nivekuil (~nivekuilc@2001:470:69fc:105::d57e) (Bad user info)
[02:08:12] <seebs> there's definitely ways to gain more experience for a given amount of time spent, but a big part of that is "do some amount of crazy stuff". ask questions. chase anomalies down.
[02:08:51] <seebs> best learning usually means playing, not "studying", and being *engaged*, and being out at the limits of your ability when you can.
[02:09:49] <seebs> it's exceptionally important to be open to and comfortable with "failure" when learning, and not regarding "this didn't work" as "therefore i'm bad and did things wrong". if you're not having things fail in ways you don't understand while trying to learn a thing, you're not getting the best possible learning experience.
[02:10:02] <seebs> that's how you *find out* what you don't understand yet and what questionns you should be asking!
[02:10:28] *** Joins: seabass (~seabass@user/seabass)
[02:12:47] <seabass> Hello! I'm trying to work through a tricky problem I have in trying to use a library. I'd love to hear any suggestions! The issue is this: the library provides a command which returns an instance of a stateful network connection. That function takes a reference to a callback function, which is called when the network sends some specific data. However, I need the callback function to send data *back* - so 
[02:12:53] <seabass> the callback function must know which connection to send back through.
[02:13:19] <seabass> What would be the best way of making some kind of 'self' which the callback function could understand?
[02:13:40] <TimMc> technomancy: My preferred phrasing of it is "don't write macros until you can explain why you shouldn't write them". (Not perfect advice either, of course.)
[02:15:01] <TimMc> seabass: Hmm, so the callback isn't called with a reference to the connection?
[02:15:43] <seabass> TimMc: oh, it might be - this library doesn't have any documentation so I'd have to check the source code
[02:16:17] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:16:46] <TimMc> If not, you might have to do something weird with a promise.
[02:17:32] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[02:18:05] <seabass> oh nice, it does, TimMc! Thanks for the suggestion :)
[02:18:44] <TimMc> phew
[02:19:00] <TimMc> Because my other suggestion smelled a bit like deadlocks. :-)
[02:19:48] <seabass> lol, I've certainly had enough of those in my kernel's audio modules!
[02:26:39] <seabass> It's certainly much easier to test these kind of stateful connections now that I'm using the 'Reloaded' Clojure workflow ( https://cognitect.com/blog/2013/06/04/clojure-workflow-reloaded )
[02:54:29] <Frozenlock> `defonce` can bring you 90% there
[02:55:25] <Frozenlock> (defonce conn (connect-to-the-damn-DB))
[02:56:57] <seabass> Frozenlock: thanks; I'll make sure to look into that. I recollect that it's similar to CL's defvar?
[02:59:07] <Frozenlock> I think so, if I correctly understood what I just read about defvar.
[02:59:21] <Frozenlock> ,(doc defonce)
[03:00:08] <Frozenlock> Uh... We no longer have a bot?
[03:00:58] <seabass> botless :o
[03:01:55] <goodger> the bot did not survive the move to liberachat
[03:08:15] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[03:31:38] <goodger> offtopic note: I have spent the last hour trying to find definitive advice on bathroom electricity, which should really be quite easy. the IEC wants €170 ($195) for the 22-page document that everyone cites
[03:33:51] *** Quits: z3t0_alt (~z3t0@146.71.14.98) (Quit: Connection closed)
[03:40:43] <technomancy> great opportunity for someone who wants a learning project
[03:40:54] <technomancy> maybe seebs can code us one =)
[03:55:02] <goodger> wouldn't it be easier to just bring back the old one?
[03:55:23] *** Joins: yoonkn (~user@175.197.208.79)
[04:07:37] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[04:38:32] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:41:11] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[05:27:34] <seebs> rather than try to process this i'm just going to assume you want someone to code you a 22-page document on bathroom electricity
[05:28:45] <sobel> that sounds like the path of least resistance to me
[05:30:02] <seebs> ugh
[05:30:33] <seebs> a bot doesn't sound super hard, except for the general philosophical problems of "how am i supposed to interact with an IRC network" and "how do I appeal bans"
[05:31:26] <sobel> i'd get started on the ban-appealing code first
[05:32:13] <sobel> it's just sorta umbrella code, you're gonna want it whenever you build a bot
[06:18:35] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[06:25:50] <seebs> so, i assume that ,(doc defonce) would have just done the equivalent of (doc defonce) at a REPL prompt. but also presumably with some kind of protection against hostile users.
[06:35:39] <TimMc> seebs: IRC interaction is easy. Sandboxing is also needed, but I think you can just grab that as a library now. And I think hiredman had a script set to restart clojurebot every 15 minutes to clear broken state.
[06:36:12] <TimMc> I think the IRC-interaction part was running in a separate process (separate machine?) from the code eval, too.
[06:37:01] <seebs> that makes sense
[06:37:53] <seebs> me: i should figure out how to actually build projects larger than what's fun to type in a repl.
[06:38:02] <seebs> next chapter of Clojure from the Ground Up: lein new scratch
[06:42:34] *** Quits: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 260 seconds)
[06:42:59] *** Joins: v3gajerusalem (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[06:48:02] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Quit: ERC (IRC client for Emacs 26.3))
[06:53:22] <seebs> anyway, got the hardest part done, which is picking a name i don't instantly hate
[06:53:46] <seebs> ("acceptance", because it's a thing that provides clojure.)
[07:04:59] <TimMc> I've been pretty happy with gfrlog's method: (format "lib-%04d" (inc (rand-int 10000)))
[07:29:22] *** Joins: Harlin_ (~DonQixote@75-163-174-136.clsp.qwest.net)
[07:31:49] *** Quits: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net) (Ping timeout: 240 seconds)
[07:37:30] <seebs> if the name doesn't have some sort of pun in it, i'm never gonna be happy
[08:22:24] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:24:04] *** Joins: shiranaihito_ (~textual@220-133-46-51.hinet-ip.hinet.net)
[08:26:37] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Ping timeout: 240 seconds)
[09:37:35] <seebs> does clojure use java's hashmaps? like, if i put a net.URL in a map, does it do the insane "look up hostname to get IP address" thing?
[09:40:13] <v3gajerusalem> test
[09:41:25] *** Joins: mbuf (~Shakthi@117.96.194.162)
[09:44:42] <ggb> Clojure's built in maps are one of the persistent data structures created for the language, array-map tries, not Java hashmaps.
[09:46:02] <seebs> oh good
[09:46:45] <seebs> i occasionally see people complaining about things that they don't want to have to explain to their kids, but honestly, i'd much rather try to explain the last 50 years of gender and sexuality academia than have to explain net.URL in hashmaps again
[09:46:54] <seebs> ... the kid asked and gosh that was a lot to go over
[09:47:06] <seebs> had to start with explaining hash maps in general, etc
[09:47:56] <ggb> Actually, I should be more specific - eventually the maps are a persistent trie structure. At small sizes, there are different underlying implementations for some of the data structures.
[09:49:18] <ggb> I think it's a skip-list for small maps? Maybe something else too at an intermediate size?
[09:49:57] <seebs> that makes sense.
[09:51:09] <ggb> I believe you said you prefer not-video, but I'm not aware of a text version for this. Here's a two-part overview of Clojure data structures with Rich Hickey and he talks about the persistent data structures and underlying implementations for things.
[09:51:10] <ggb> https://www.youtube.com/watch?v=ketJlzX-254
[09:51:24] <ggb> Not the deepest of technical dives, but a pretty good overview.
[09:52:38] *** Joins: Deepfriedice (~Deepfried@159.196.13.158)
[09:52:54] <ggb> Part 1 is atomic data types. Part 2 is collections: https://www.youtube.com/watch?v=sp2Zv7KFQQ0
[09:53:22] <ggb> The docs definitely cover the same material, but there's additional detail in the videos.
[09:53:59] <seebs> as long as i don't have to worry about accidentally triggering one of the stupidest data structure choices i've seen in my life i'm happy
[09:54:06] <ggb> (:
[09:55:01] <seebs> apparently the default of "user defines hash function" in the java hashmaps also leads to them having to support converting to a btree for a bucket if the hash function is bad
[09:55:14] <seebs> but the net.URL thing is the one that i just gibbered at when i first heard about it
[10:04:31] <v3gajerusalem> so i'm toying aroung with reitit and coercion via malli.  can someone where i'm goofing as far as dealing with using the uuid to delete a record? I had it working fine without coercion https://gist.github.com/cyberoctopi/0bcace3dfdea7305416da35eed5f7cff
[11:24:30] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:34:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[11:38:21] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[11:51:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[11:56:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[12:11:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[12:14:11] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[12:25:13] *** Quits: mbuf (~Shakthi@117.96.194.162) (Remote host closed the connection)
[12:26:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[12:30:38] *** Quits: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net) (Quit: Leaving)
[12:35:06] <v3gajerusalem> oh...
[12:43:19] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[12:48:22] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[12:51:14] *** Joins: SR-71 (~user@user/SR-71)
[13:03:22] <v3gajerusalem> {:id uuid} 
[13:15:51] *** Joins: mbuf (~Shakthi@117.96.194.162)
[13:17:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[13:22:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 256 seconds)
[13:32:36] *** Joins: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net)
[13:41:03] *** Joins: jespada (~jespada@87.74.36.188)
[13:50:01] *** Joins: seschwar (~seschwar@user/seschwar)
[13:50:41] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[13:55:17] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[14:05:08] *** Joins: yauhsien_ (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net)
[14:08:48] *** Quits: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[14:18:59] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[14:27:17] *** Quits: Deepfriedice (~Deepfried@159.196.13.158) (Quit: Leaving)
[15:27:36] *** Joins: uncleyear (~ian@pppoe.178-66-157-18.dynamic.avangarddsl.ru)
[15:27:53] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[16:59:57] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[17:00:32] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[17:01:40] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[17:06:31] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[17:08:14] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Remote host closed the connection)
[17:09:02] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[17:18:24] *** Joins: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com)
[17:24:22] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[17:47:42] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[17:49:00] <tatsumaru> has anyone toyed around with elixir? isn't it redundant in the face of clojure? clojure already has all the main features that elixir advocates such as concurrency, immutability etc?
[17:50:54] <ridcully_> well targets the beamvm instead of the jvm
[17:51:15] <tatsumaru> yeah I know, but isn't the whole point of beam vm to solve concurrency 
[17:51:17] <sobel> i finally bothered to publish the postgresql tools i use for dynamic sql. they have not changed in 8 years, so i'd say they're stable and/or complete for a purpose. https://bitbucket.org/matt_dot_hudson/pg_tool_functions/src/main/
[17:51:22] <ridcully_> also there is at least one clojureish dialect for beam
[17:51:38] <sobel> (same code i shared in a series of termbin URLs the other day)
[17:54:24] *** Joins: yazi (~yazi@user/yazi)
[17:56:01] <ridcully_> beam/erlang also focuses on horizontal scaling, HA
[17:56:10] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 272 seconds)
[18:18:32] <Para> sobel: yay!
[18:22:14] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[18:22:28] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[18:22:38] <sobel> pls enjoy ;)
[18:22:47] <sobel> and DRY out that database
[18:27:03] <sobel> there's a pattern i like and use a lot that's granted a syntax/performance boost when implemented using postgresql's DISTINCT ON
[18:27:26] <sobel> it also goes by group-wise min (or group-wise max)
[18:29:56] <sobel> it's good for a niche case i call immutable tables: you keep a timestamptz column, and when you select you select DISTINCT ON (primary key), GROUP BY your (actual not synthetic) primary key, ORDER BY the timestamptz column, to get the "current" row(s)
[18:30:22] <sobel> newer INSERTs will hide older rows from that DISTINCT ON query
[18:30:41] <sobel> row-versioning the expensive way
[18:31:15] <Para> I've _just_ did that myself in a thing as well.
[18:31:16] <sobel> that's the one nugget missing from the tools library
[18:31:45] <Para> The downside of that pattern is that column sorts get a bit wonky, especially if you have computed columns, but nothing incredibly terrible.
[18:32:01] <Para> a bit of nesting and hiding crimes :-)
[18:32:20] <sobel> as long as they stay hidden enough!
[18:34:43] <sobel> BTW, the library i extracted these from did a bit more work inside tools.lookup_table and others: it inserted the parameters into config tables so any of these template objects could be conveniently deleted and replaced by sql.
[18:35:17] <Para> related https://martinfowler.com/eaaDev/timeNarrative.html + https://martinfowler.com/articles/bitemporal-history.html
[18:35:20] <sobel> if i needed anything like that today, i would keep it as a strict outer shell around the current set of functions
[18:35:32] <sobel> ah yes, it is that
[18:36:32] <sobel> i might be looking at postgresql's period type for validity windows
[18:36:37] <sobel> or interval
[18:37:54] <Para> Yep, that'd be interval. Although the queries don't necessarily need that, as the latest is usually endtime=NULL :)
[18:38:21] <Para> Ensuring that would need a post update check though.
[18:38:42] <Para> or wth it was called, I'm kinda drowsing off right now because of my medication :)
[18:40:32] <sobel> hehe
[18:40:46] <sobel> yeah, that part seems somewhat implementation-specific but i might template out the rest
[18:58:43] <sobel> hm, looks like i have some older stuff for queueing index creation. we were refactoring a large database without downtime.
[18:59:31] <sobel> over half this code is catering to the londiste replication system, which predates native replication support
[19:00:02] <sobel> what a gigantic pain in the everything. i sure don't miss londiste!
[19:00:10] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[19:07:23] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[19:19:03] *** Quits: mbuf (~Shakthi@117.96.194.162) (Quit: Leaving)
[19:22:57] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[19:25:05] <aphyr> Gosh cljdoc.org has gotten nice!
[19:25:50] *** Quits: shiranaihito_ (~textual@220-133-46-51.hinet-ip.hinet.net) (Ping timeout: 256 seconds)
[19:55:51] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[19:57:11] *** Joins: seschwar (~seschwar@user/seschwar)
[20:03:10] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[20:05:12] *** Joins: silasfox (~sbv@p200300cec72d2e00cb324c6b06d6efd2.dip0.t-ipconnect.de)
[20:28:39] *** Joins: puchka (~marius@165.73.240.253)
[20:35:41] *** Quits: puchka (~marius@165.73.240.253) (Quit: leaving)
[21:02:13] *** Quits: silasfox (~sbv@p200300cec72d2e00cb324c6b06d6efd2.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:11:14] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 272 seconds)
[21:20:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[21:23:49] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:24:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[21:48:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[21:58:57] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[22:01:55] *** Joins: jespada (~jespada@87.74.36.188)
[22:04:08] *** Quits: super-pizza-cat (~super-piz@h184-61-213-185.wtfrwi.broadband.dynamic.tds.net) (Quit: Leaving)
[22:23:26] *** Quits: dadinn (~dadinn@host86-134-44-43.range86-134.btcentralplus.com) (Ping timeout: 272 seconds)
[22:23:30] *** Joins: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net)
[22:25:15] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-c0be-54b3-db2c-85e9.res6.spectrum.com)
[22:25:57] *** Quits: yauhsien_ (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:26:21] *** Joins: yauhsien_ (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net)
[22:28:29] *** Joins: kreved (~user@185.253.183.54)
[22:28:37] *** Quits: yauhsien (~Yau-Hsien@61-231-32-103.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:42:51] *** Joins: struchu (~struchu@staticline-31-183-168-194.toya.net.pl)
[22:43:32] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[22:44:08] <tatsumaru> guys do you think the "nocode" thing is just a passing fad or it will become a wordpress-like thing with a solid market for prototyping and validating business ideas rapidly?
[22:46:09] <Frozenlock> What's the "nocode" thing?
[22:49:05] <seebs> there's a few
[22:49:09] <tatsumaru> Frozenlock: it's a term for a series of app which allow non-technical people to prototype and design apps by explaining them with flowcharts rather than code aka visual scripting.
[22:49:25] <seebs> i used one of them in 1989
[22:49:40] <seebs> i think we're a lot closer to making them viable now, but i'm not sure how far it goes
[22:49:51] <tatsumaru> i think it's like a dreamweaver for making apps 
[22:50:15] <seebs> that said: https://github.com/kelseyhightower/nocode <-- i also like this one
[22:51:27] <tatsumaru> seebs: that's even more next level than whitespace
[22:53:58] <seebs> the style guide has been added since i last looked at it
[22:53:59] <seebs> much better
[23:04:23] <Para> low/no code is current business trend of "we don't need programmers anymore!"
[23:04:49] <Para> We're in that point of this iteration again, just like with VR was the previous one, SPAs the step before that... :)
[23:05:20] <Para> It'll take another 3 to 5 years for everyone to realize that just because a tool allows for no-code solution, using that tools requires someone who's effectively still a programmer.
[23:06:16] <seebs> i recently saw a newspaper article from the 1990s on how people were worried that there'd be no programming jobs in a few years
[23:07:27] <Para> Yeah, we've been here before.
[23:07:47] <Para>  “The thing that hath been, it is that which shall be; and that which is done is that which shall be done: and there is no new thing under the sun.”
[23:08:01] <Frozenlock> That's why we need OIDC. To keep people employed.
[23:08:12] <Para> I'm old enough to remember about 3-4 iterations of all these things so far.
[23:09:12] <Para> For job safety it was ingenious to allow twitter to design a software ecosystem, but yeah, it's not really moving anything onwards, just a lot of reinventing :)
[23:09:24] <seebs> it can be super frustrating watching things change incrementally, and not always in good directions, but i still think that overall i'm pretty happy with a lot of changes
[23:09:50] <seebs> but i could do with more people being open to the idea that people who have seen this before may have ideas about it
[23:09:54] <Para> Another way to think about it is that despite all the tries to change the course, the iceberg cares not for your unsinkability.
[23:10:37] <Para> But then again I subscribe to the optimistic nihilism school of thought... :)
[23:10:53] <Para> And in fairness there are some pretty neat tools in the low-code space.
[23:11:13] <seebs> i love the story (probably fake) about the ship yelling at someone to change their course, and saying how large their ship was, and the response is "i'm a lighthouse"
[23:12:08] <seebs> aww snopes says it's fake :(
[23:13:59] <Para> This one's pretty neat example https://retool.com/
[23:15:27] <seebs> yeah. like, i'm actually hopeful about some of this stuff helping us replace work programmers hate with work programmers love.
[23:16:06] <seebs> hey, unrelated to anything about the language, etc., but: how's the job market for clojure devs, especially entry-level? like, not "experienced programmer new at clojure", but like, "no prior work experience"?
[23:16:34] <seebs> especially, and i recognize this affects the answer a lot probably, "smart but not healthy and may not be able to handle the rigors of full-time".
[23:18:06] <Para> What I've observed is that Clojure is now used for entry-level career-changer programmes at least here in Finland. Doesn't guarantee everyone will be doing Clojure for the foreseeable future, but it's not a strict 100%/0% drop either.
[23:18:45] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek_caan)
[23:19:10] <Para> For the past 4-5 years almost all major software consultancies and other big companies have setup their "junior trainee academy apprenticeship" whatever program with the whole goal of going through the masses of able people who are looking into switching careers.
[23:19:18] <Para> ...in Finland, that is, of course.
[23:20:06] <seebs> i know a surprisingly large number of disabled people who would be perfectly reasonable programmers if this did not require having a degree and good first-impression social skills and the ability to sit in an office for the same 40 hours every week
[23:20:10] <Para> But the whole industry is struggling to find good people as a whole, so it's kinda hard to assess objectively.
[23:20:13] <seebs> i keep trying to figure out a way to do something about this
[23:20:29] <Para> :) https://www.vincit.fi/en/software-development-450-words-per-minute/
[23:21:08] <Para> That post doesn't say it directly but he's a Clojure developer.
[23:21:51] <seebs> cool
[23:23:55] <Para> And yeah, disabilities is an interesting topic to add into this whole employment problem as a whole.
[23:24:08] <Para> There's so many forms and ranks and levels.
[23:24:17] <seebs> basically for historical reasons my social circle has a *stunningly* large number of people with some degree of PTSD or whatever, and they just... basically *can't* interact with most of the system.
[23:24:48] <seebs> and i periodically try to think of something that would help, and mostly don't succeed
[23:25:22] <tatsumaru> Most of the industry is comprised of useless companies which should be disbanded (e.g. the 3287th food delivery app that wants to steal the users of the 3286th food delivery app because it's orange). once these companies get disbanded there will be plenty of programmers for the companies that are actually adding value.
[23:25:46] <Para> To some extent, yes.
[23:26:01] <tatsumaru> or rather it will become apparent that much less programmers are actually needed than it was believed previously
[23:26:37] <seebs> i dunno, i suspect that there's always gonna be stuff that could use programmers floating around
[23:26:49] <seebs> it's just that right now a lot of the money is not focused on them doing anything useful
[23:27:12] <Para> Also sometimes employment to specific company can make one less employable. I've heard some murmurs about ex FAANG employees, for example.
[23:27:30] <Para> But those are the kind of talks I'm not having with anyone important.
[23:28:05] <Para> And in general really dangerous waters; if employment to company X can "taint" a person, then what happens?
[23:28:12] <seebs> yeah
[23:28:27] <seebs> i'm sure you could find a work history that would make me Very Distrustful
[23:28:41] <seebs> if your last three employers were the KKK, Stormfront, and ICE, i'm gonna have *concerns*.
[23:28:49] <tatsumaru> well is it really that dangerous? you can just omit it from your CV if it's that detrimental, unless you are entered in some evil blacklist CEOs pass around.
[23:29:05] <seebs> "how do you explain this gap in your resume?" "it was then that i carried you."
[23:29:42] <tatsumaru> listen if an HR is really that stupid to ask this question then they deserve to be lied to, so I will just stretch the other positions to fill in the gap.
[23:30:04] <tatsumaru> or just enter something like "Upwork - Freelancer"
[23:30:42] <tatsumaru> great companies generally shouldn't care about where you've worked, but what you've accomplished or how you think
[23:30:55] <Para> I have one gap in my CV, from years ago. Basically when it was still in relevant year so that someone would ask, I would just say "took a breather year after school to relax and figure out what to do next, which is why I started BBA studies the next year"
[23:31:12] <tatsumaru> Would you not hire Werner von Braun as an engineer because he was employed by the third reich?
[23:31:25] <Para> I honestly don't even remember at this point how much truth there was in that, the story fit the slot and turned it into a positive even like some stereotypical CV hacker :)
[23:31:51] <Para> Can't say, I have no idea what kind of personality he has.
[23:31:54] *** Joins: kipz (~kipz@home.kipz.org)
[23:32:02] <tatsumaru> precisely
[23:32:37] <Para> It's amazing how easily people bring in their worst natural qualities out in job interviews, btw. I guess the stress of the moment helps with that.
[23:32:45] <tatsumaru> He actually didn't want to do anything with the war, he was just really fascinated by rockets.
[23:32:59] <Para> Not saying everyone has a bad side to hide, but those that do seem to also have a blind spot for it and let it come out :)
[23:33:14] <Para> So were the founders of JPL :)
[23:33:16] <tatsumaru> Once he emigrated in the USA he created the Saturn V which is to this day in top 3 of greatest and most significant rockets ever designed.
[23:33:39] <tatsumaru> what is JPL?
[23:34:32] <Para> Jet Propulsion Laboratory
[23:35:13] <Para> https://www.businessinsider.com/nasa-jpl-founding-story-the-martian-2015-10
[23:36:43] <tatsumaru> lol
[23:37:27] <tatsumaru> cool story
[23:37:53] <Para> History is mostly just banging things together. We've just gotten really good at it.
[23:38:59] <Para> still my favorite fan theory about Star Trek/United Federation of Planets https://imgur.com/gallery/wpZ4w
[23:39:15] <TimMc> seebs: Thank you, if I ever get an interviewer unsavvy enough to ask that question, I'm gonna be able to exit that interview in *style*.
[23:42:24] <tatsumaru> recruiters are some of the most important people in a company, if they are idiots this means the person who hired them doesn't realize that which means he's an idiot too and you can trace that all the way back to the ceo and founders therefore the company is shit too
[23:42:36] *** Quits: struchu (~struchu@staticline-31-183-168-194.toya.net.pl) (Quit: WeeChat 3.3)
[23:43:36] <tatsumaru> I've ignored red flags several times in my career either out of ignorance or desperation. It never works out.
[23:46:00] <Para> Yeah, HR needs to know what kind of culture is being built.
[23:46:06] <Para> Seen both good and bad.
[23:46:25] * Solid feels obliged to link https://www.youtube.com/watch?v=voRB4JenjqA
[23:49:02] <seebs> https://www.youtube.com/watch?v=QEJ9HrZq7Ro
[23:49:10] <seebs> ... hah
[23:49:21] <seebs> i should have checked whether someone else already linked it
[23:50:20] <tatsumaru> kind of debate-style demagoguery type of humor but still a funny
[23:50:32] <tatsumaru> s/a//
[23:50:52] <TimMc> I did recently pass up a job opening because after I submitted my resume I discovered that the CEO used to be... the CEO of Uber.
[23:50:55] <TimMc> nope nope nope
[23:51:04] <seebs> oh hey i'm in that imgur link about star trek's origin story
[23:51:12] <seebs> man that was a long time ago
[23:51:37] <tatsumaru> TimMc: I recently passed up a job because I realized I was the CEO of Uber and that's a no-no for me.
[23:51:45] <seebs> there are definitely people/companies out there i would be super reluctant to work for, or with. but also different people have different boundaries.
[23:54:27] <tatsumaru> I empathize with people who work for companies they personally don't believe in. Some countries don't even have a single company worth working for but people still have to survive. It's important however to have a plan to escape the meaningless grind.
[23:55:51] <TimMc> seebs: Specifically in this case it made me wonder if the company was doing something unethical.
[23:56:25] <TimMc> tatsumaru: For me this is really "if I have a choice, I am obligated to choose the more ethical employer".
[23:56:44] <TimMc> If someone's in a pinch, I can only side-eye their choices so much...
[23:57:04] <tatsumaru> TimMc: yes I agree.
[23:58:24] *** Quits: kreved (~user@185.253.183.54) (Ping timeout: 256 seconds)
