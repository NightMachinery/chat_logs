[00:00:08] <EvanR> even if it did document stuff having a way to verify is good lol
[00:00:45] <Profpatsch> like, as far as I can see vector has like 10 benchmarks
[00:01:02] <Profpatsch> So what does that tell me
[00:01:09] <Profpatsch> lol https://github.com/haskell/vector/issues/229
[00:01:12] <tomsmeding> and if you checked and you found something interesting, that may be a good opportunity for a PR to vector :)
[00:02:13] <Profpatsch> I just can’t build any trust in such a fundamental library
[00:02:40] <Profpatsch> So I won’t use it because stuff is advertised but there’s no way to use it without falling down a rabbit hole
[00:03:00] <EvanR> I'm using vector right now for audio and no rabbit hole
[00:03:12] <EvanR> (because not having any performance problems yet)
[00:03:36] <Profpatsch> e.g. with Vec in rust I can be sure that it’s optimized to death
[00:03:51] <Profpatsch> And the performance will be pretty obvious and is documented liberally
[00:04:30] <EvanR> in general using haskell and caring about the compiled code at the same time is a step up in effort
[00:04:46] <tomsmeding> Profpatsch: is the purpose of you talking about this here, trying to get someone to do something about it? Or something else?
[00:07:23] <tomsmeding> also, something else: you note the reverse . fromListN pattern in aeson. Did you notice that this is a (potential) problem in a benchmark? Or is this premature optimisation? ;)
[00:07:42] <tomsmeding> though I'm all for premature optimisation if it's fun
[00:07:50] <Profpatsch> tomsmeding: No, just trying to figure out whether I should use Vector for a parser I’m writing
[00:08:00] <tomsmeding> instead of?
[00:08:43] <Profpatsch> Just returning a []. And going down the rabbit hole of checking how aeson does it, and figuring out that everything is kinda undocumented and it’s not easy to see why things are done
[00:09:09] <tomsmeding> as in, you're parsing a list value?
[00:09:44] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0) (Remote host closed the connection)
[00:09:48] <Profpatsch> For example https://github.com/haskell/aeson/commit/2f24e555d86a36fdda6d4cad79976004b382ab3b
[00:09:55] <Profpatsch> This is a commit touching the aeson parser liberally
[00:10:12] <tomsmeding> I think that depends a lot on how you're parsing that value and how you're going to use the value. If you know in advance how long the list is going to be, and it's going to be kept around / accessed randomly, go for vector for sure, regardless of whether the fusion rules actually do anything or not
[00:10:14] <Profpatsch> with no commit description
[00:10:16] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0)
[00:10:18] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[00:10:35] <Profpatsch> which introduces the change to how Vector is used
[00:10:51] <tomsmeding> if you don't know the length in advance, you can't do much better than returning a list, perhaps postfixed with a fromList -- but that doesn't need to be done by your parser
[00:10:58] <Profpatsch> I guess I’m just complaining how shitty the code quality of even very basic libraries is
[00:11:05] <tomsmeding> but that all assumes your parser is building the list trivially by consing
[00:11:25] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:11:55] <tomsmeding> Profpatsch: "shitty" is kind of unkind to the people that do the hard work. :) I do agree that more documentation about performance, and investigation into performance, would be quite beneficial.
[00:12:08] <Profpatsch> So what I gather is that if I have a sequence of a known list, I should use Vector
[00:12:14] <tomsmeding> But I'm 100% sure this is because of a lack of manpower
[00:12:15] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0) (Remote host closed the connection)
[00:12:24] <Profpatsch> tomsmeding: No, sorry, if you do a major change to a base library, you better document what you are doing.
[00:12:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0)
[00:12:29] <Profpatsch> Otherwise it’s just shitty code.
[00:12:38] <EvanR> oh man, X Y problems
[00:13:03] <EvanR> you can't figure out how to write a parser so the library vector sucks xD
[00:13:05] <tomsmeding> Profpatsch: if you have a sequence of known length, and you're going to do more to it than just traverse it once
[00:13:20] <tomsmeding> and it's long
[00:13:26] <tomsmeding> if it's short then it doesn't matter anyway
[00:13:38] <c_wraith> Profpatsch: ? that change is pretty obvious. take advantage of known lengths, move the bytestring unescaping to C
[00:14:05] <c_wraith> Profpatsch: it's just a performance tweak.
[00:14:15] <c_wraith> Profpatsch: and that's what the patch description says
[00:15:11] <tomsmeding> Profpatsch: and note that these considerations that I gave are still independent on whether vector's fusion rules actually do anything :)
[00:15:31] <Profpatsch> I’m not going to argue about this lol, I just think we should do better.
[00:15:53] <tomsmeding> "we" should indeed. And someone's gotta pay for that -- either with money or with time
[00:15:55] <Profpatsch> Take that as you will
[00:16:15] <tomsmeding> and people are hard at work at fixing that, not least at the Haskell Foundation :)
[00:16:49] <c_wraith> I mean, I don't see anything bad here.  Maybe it's not utopian, but it's better than average.
[00:17:06] <c_wraith> And I don't mean average for Haskell.  I mean average for software development.
[00:17:21] <dsal> aeson does seem to be quite near the most popular library on hackage, but it would be nice if they used the tools a bit better.
[00:19:10] *** Joins: pfurla (~pfurla@201.17.118.230)
[00:22:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:22:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:26:04] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Remote host closed the connection)
[00:26:16] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[00:26:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[00:26:41] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[00:26:59] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:26:59] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0) (Remote host closed the connection)
[00:28:39] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:28:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:28:58] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e180970d7f4a6232670.dip0.t-ipconnect.de)
[00:31:17] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:35:34] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[00:36:11] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:37:51] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:38:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:39:04] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[00:40:26] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Remote host closed the connection)
[00:40:41] *** Quits: imdoor (~imdoor@balticom-142-78-50.balticom.lv) (Remote host closed the connection)
[00:41:49] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[00:43:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[00:43:52] *** Quits: axeman (~quassel@2a02:8109:a3c0:b10:c575:40eb:1f86:4317) (Remote host closed the connection)
[00:44:31] *** Quits: sayola (~vekto@dslb-092-072-095-186.092.072.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[00:44:34] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:44:55] <boxscape> How do I include newlines in a CPP pragma?
[00:45:37] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[00:45:38] <boxscape> s/pragma/macro
[00:45:51] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0)
[00:46:27] <boxscape> Wait I think I remember now
[00:46:33] <boxscape> it's not possible and you have to work around it with {;}
[00:46:57] *** Joins: sayola (~vekto@dslb-092-072-095-186.092.072.pools.vodafone-ip.de)
[00:47:44] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:48:45] <tomsmeding> yeah impossible, that's also a thing in C
[00:49:11] <boxscape> okay, thanks for confirming
[00:49:26] <tomsmeding> though in C there's IIRC nothing that needs actual hard newlines, except CPP macros, which you can't generate from CPP macros anyway :)
[00:49:36] <boxscape> right, good point
[00:49:54] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0) (Remote host closed the connection)
[00:49:55] *** Quits: FarzadBekran_ (~FarzadBek@185.212.51.70) (Remote host closed the connection)
[00:50:41] <boxscape> :/ I can't use a macro here anyway because recursion is not allowed
[00:50:59] *** Joins: cjb (~cjb@user/cjb)
[00:51:04] <tomsmeding> just iterate the preprocessor over your file!
[00:51:14] <tomsmeding> then it becomes turing complete :)
[00:51:17] <tomsmeding> also: templatehaskell
[00:51:42] <boxscape> TH seems like too much effort
[00:51:50] <tomsmeding> can relate
[00:52:11] <boxscape> realistically there should be a way to just use a regular Haskell function to remove the code duplication here, but I can't figure it out https://paste.tomsmeding.com/ei7jlZip
[00:52:38] <c_wraith> the duplication in the instances?
[00:52:48] <boxscape> no, in genericEscape and genericUnescape
[00:52:55] <boxscape> I'm trying to combine them into one function
[00:53:02] <boxscape> main problem is I need (Typeable (Parsed a)) or (Typeable a) in the local function, and I can't get that if I don't know which one of them I need
[00:53:13] <c_wraith> because the instances have some unnecessary code duplication in them. :P
[00:53:36] <boxscape> yeah, that's because they are simplified here :)
[00:53:42] <boxscape> they don't have any duplication in the actual code
[00:54:55] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[00:55:06] <boxscape> though I've only tried combining the two on the actual code, I should probably try it on the simplified code
[00:55:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[00:55:40] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[00:55:46] <c_wraith> the simplified code seems like you could probably RankNTypes your way through it
[00:56:35] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:00:01] <hololeap> @unmtl [StateT s m a]
[01:00:01] <lambdabot> [StateT s m a]
[01:00:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:00:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:00:27] *** Joins: wroathe (~wroathe@user/wroathe)
[01:00:33] <hololeap> @unmtl StateT s (Writer w) a
[01:00:33] <lambdabot> s -> (a, s, w)
[01:00:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:04:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[01:06:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:07:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:07:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0)
[01:07:51] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:08:04] <boxscape> this is about how far I get :/  https://paste.tomsmeding.com/mGzaUClb
[01:08:15] <boxscape> just no idea how I could fulfill that constraint
[01:11:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:11:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:13:29] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:13:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:14:41] *** Quits: Guest76 (~Guest76@wireless-student-pt10-183-60.lut.ac.uk) (Quit: Client closed)
[01:18:39] <hololeap> @hoogle (Monad m, Monoid a) => [StateT s m a] -> StateT [s] m a
[01:18:39] <lambdabot> No results found
[01:21:03] <hololeap> :t StateT . (\l ss -> sequenceA <$> sequenceA (l <*> ss)) . fmap runStateT :: (Monad m, Monoid a) => [StateT s m a] -> StateT [s] m a
[01:21:04] <lambdabot> (Monad m, Monoid a) => [StateT s m a] -> StateT [s] m a
[01:21:31] <hololeap> i'm a bit surprised this doesn't exist on hoogle
[01:21:39] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[01:23:10] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:23:22] <hololeap> maybe this would be easier with the zoom optic
[01:25:04] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[01:26:14] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Ping timeout: 252 seconds)
[01:26:15] *** Quits: justSleigh (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[01:26:47] *** Quits: xsperry (~xs@user/xsperry) ()
[01:27:24] <boxscape> tomsmeding: turns out I *can* use a CPP macro, I just have to supply the name of the function as well so I can call that name recursively instead of the macro itself
[01:27:59] *** Joins: justSleigh (~justache@user/justache)
[01:28:26] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0) (Remote host closed the connection)
[01:29:26] *** Joins: emf (~emf@2620:10d:c090:400::5:3b6)
[01:29:35] <boxscape> I'll just keep a comment saying "Fun challenge: Try to do this using a polymorphic function instead of a macro" in the code to nerdsnipe innocent passers-by
[01:30:09] <Rembane> "How to lower the efficiency of your team in one simple step."
[01:30:09] *** Joins: xsperry (~xs@user/xsperry)
[01:32:00] <boxscape> :) luckily I'm doing this in a one-man team and I've already nerdsniped myself so now I'm immune
[01:32:27] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0)
[01:34:15] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[01:34:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:35:27] <Rembane> Sweet! :)
[01:35:56] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[01:38:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:38:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:40:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:40:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:40:26] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[01:42:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:42:24] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:44:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:44:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:45:30] *** Joins: jakalx (~jakalx@base.jakalx.net)
[01:48:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:48:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:50:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:50:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:54:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:54:48] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:56:05] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:57:39] *** Parts: Lycurgus (~juan@98.4.112.204) ()
[01:58:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[02:00:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:01:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:01:28] *** Quits: jakzale (6291399afa@2604:bf00:561:2000::1e4) (Changing host)
[02:01:28] *** Joins: jakzale (6291399afa@user/jakzale)
[02:03:51] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:04:50] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[02:06:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:07:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:07:20] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[02:07:32] *** Quits: max22- (~maxime@2a01cb08833598006b46964008321399.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:08:47] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[02:10:48] *** Joins: notzmv (~zmv@user/notzmv)
[02:11:20] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 252 seconds)
[02:11:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[02:11:50] *** Joins: kennyd (~bc8165b6@83.167.180.121)
[02:11:59] *** Joins: pavonia (~user@user/siracusa)
[02:13:20] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:15:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:15:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:16:39] *** Quits: emf (~emf@2620:10d:c090:400::5:3b6) (Ping timeout: 252 seconds)
[02:17:35] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4508:9275:13c9:2a0) (Remote host closed the connection)
[02:18:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:18:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:18:52] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:20:02] *** Joins: emf (~emf@2620:10d:c090:400::5:3b6)
[02:22:35] *** Joins: vgtw_ (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[02:23:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[02:23:59] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (Ping timeout: 256 seconds)
[02:24:58] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:28:44] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[02:29:49] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[02:31:06] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[02:41:57] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6)
[02:43:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[02:49:39] *** Quits: emf (~emf@2620:10d:c090:400::5:3b6) (Ping timeout: 252 seconds)
[02:49:40] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[02:54:03] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[02:58:27] *** Quits: jkaye (~jkaye@2601:281:8300:7530:3bdb:266b:f9cc:b3bc) (Ping timeout: 252 seconds)
[02:59:26] *** Joins: AlexNoo__ (~AlexNoo@178.34.163.11)
[03:01:23] *** Quits: AlexZenon (~alzenon@178.34.151.83) (Ping timeout: 252 seconds)
[03:02:29] *** Quits: Alex_test (~al_test@178.34.151.83) (Ping timeout: 252 seconds)
[03:02:47] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[03:03:02] *** Quits: AlexNoo_ (~AlexNoo@178.34.151.83) (Ping timeout: 252 seconds)
[03:05:10] <Axman6> anyone know what the state of the are for anonymous sum types is? Are there any that don't need linear time to discriminate?
[03:05:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:05:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:05:16] *** Joins: wroathe (~wroathe@user/wroathe)
[03:06:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk)
[03:06:49] *** Joins: AlexZenon (~alzenon@178.34.163.11)
[03:06:55] <Axman6> I remember there being a PR for generica-sop which did that I think...
[03:06:55] *** Joins: Alex_test (~al_test@178.34.163.11)
[03:09:24] <jackdk> I believe DeriveGeneric instances aim to balance the tree of `:+:`s  but I haven't gone looking for libs that guarantee logtime discriminatino
[03:10:45] *** Joins: chenqisu12 (~chenqisu1@183.217.201.63)
[03:11:04] <Axman6> The case I'm interested in would probably involve an anonymous sum type with hundreds of cases, so constant time wouldbe pretty important (I'm wanting to use it with the discrimination package... but that might actually be useful in making things linear... hmmm)
[03:11:43] <Axman6> https://github.com/well-typed/generics-sop/pull/129/files#diff-73d5674c9c5f0908d8b3ad84b68e7345f1c9aca30b0ede39b6a6505fe85f71d3 is the change to generica-sop I was interested in
[03:13:16] <Axman6> and https://github.com/well-typed/generics-sop/pull/129/files#diff-73d5674c9c5f0908d8b3ad84b68e7345f1c9aca30b0ede39b6a6505fe85f71d3R464 would also be very useful here too...
[03:14:08] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[03:15:29] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[03:16:41] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[03:17:56] <boxscape> Axman6: maybe an unboxed sum could work?
[03:18:13] <Axman6> hmm, that's a possibility
[03:18:23] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[03:24:55] <jackdk> Does anyone know if there are good adapters that get you generic-lens style accessors for the structures generated by the large-record package? I'm hacking on a package with many very large records, and would like to get the compilation time down while supporting both `lens` and `optics`
[03:26:51] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[03:27:36] <Axman6> is that package related to https://youtu.be/GkoQbJofm1A?
[03:27:47] <Axman6> uh, not that one
[03:28:00] <jackdk> https://well-typed.com/blog/2021/10/large-records-part-2/
[03:28:14] <Axman6> https://youtu.be/XXPWVPquYvw
[03:30:32] <Axman6> Answer is: tes
[03:30:35] <Axman6> yes*
[03:30:57] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:31:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:40:34] *** Joins: adelon (~adelon@user/adelon)
[03:40:44] *** Quits: adelon (~adelon@user/adelon) (Client Quit)
[04:03:34] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[04:06:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:07:09] *** Joins: gzj (~GZJ0X@216.24.178.99.16clouds.com)
[04:07:40] *** Joins: GZJ0X_ (~GZJ0X@216.24.178.99.16clouds.com)
[04:08:37] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[04:08:42] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[04:11:42] *** Quits: GZJ0X_ (~GZJ0X@216.24.178.99.16clouds.com) (Client Quit)
[04:11:43] *** Quits: gzj (~GZJ0X@216.24.178.99.16clouds.com) (Ping timeout: 256 seconds)
[04:12:53] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 252 seconds)
[04:13:26] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 252 seconds)
[04:20:37] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:22:47] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e180970d7f4a6232670.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:23:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:38e1:73a2:ce5d:fb32)
[04:26:36] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:bde9:c3fb:c9c:3dee) (Ping timeout: 245 seconds)
[04:33:13] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[04:34:40] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:40:34] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:41:21] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[04:44:36] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[04:45:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[04:50:12] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[04:51:48] <boxscape> is there a way to prevent cabal repl from exiting when you hit Ctrl-C?
[04:52:38] <geekosaur> not portably :(
[04:53:05] <boxscape> hm okay
[04:53:25] <boxscape> is there a non-portable way?
[04:54:05] <geekosaur> on a posix system cabal could SIG_IGN SIGINT while running ghci. on windows there's no way to do this at all, iirc
[04:54:47] <boxscape> If I'm understanding correctly that POSIX solution is something that cabal would have to implement, rather than a solution I as a user could use?
[04:55:02] <geekosaur> this would probably require rewiring how cabal runs subprocesses completely, since it would have to use the posix subprocess interfaces to do this
[04:55:14] <boxscape> okay
[04:55:41] <boxscape> interestingly there is an issue from 7 years ago that claims it was fixed https://github.com/haskell/cabal/issues/1610
[04:55:53] <boxscape> s/7/8
[04:57:06] <geekosaur> mrr. wonder if it's a regression, and if so was it introduced by trying to improve windows support
[04:57:12] *** Quits: burnsidesLlama (~burnsides@dhcp168-020.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[04:57:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[04:57:50] <boxscape> it's also entirely that it works on linux, I actually went into this thinking I need a linux solution because I'm on WSL2, but then I realized I'm calling the windows cabal from the WSL2 terminal at the moment
[04:58:25] <geekosaur> that would make sense. there is very little provided on windows for ctrl-c handling
[04:58:38] <boxscape> hm, right
[04:58:38] <geekosaur> which is why I said "not portably"
[05:00:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:00:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:01:02] *** Quits: chenqisu12 (~chenqisu1@183.217.201.63) (Remote host closed the connection)
[05:01:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[05:04:50] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:08:41] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 245 seconds)
[05:11:40] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[05:12:30] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:14:14] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:22:28] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (Remote host closed the connection)
[05:36:17] <nfd> dsal: sorry for ghosting your question last night; had/have my client misconfigured on this channel
[05:36:37] <nfd> (lexeme was supposed to eat trailing spaces and tabs, and does)
[05:37:58] *** Parts: nfd (~nfd@user/nfd) ()
[05:38:02] *** Joins: nfd (~nfd@user/nfd)
[05:41:16] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:41:26] *** Joins: wei2912 (~wei2912@116.88.103.128)
[05:41:49] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[05:45:16] <dsal> nfd: yeah, just wondering how you defined it. It used to confuse me/lead to bugs
[05:46:50] *** Joins: deadmarshal (~deadmarsh@95.38.119.139)
[05:47:13] *** Joins: stevenxl (~stevenlei@174.128.182.152)
[05:51:09] *** Quits: deadmarshal (~deadmarsh@95.38.119.139) (Ping timeout: 252 seconds)
[05:55:11] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:58:52] *** Quits: xff0x (~xff0x@2001:1a81:5227:8600:e134:3a0d:618c:1205) (Ping timeout: 268 seconds)
[06:00:21] *** Joins: xff0x (~xff0x@2001:1a81:5269:5600:e5f5:ee22:f6bb:9023)
[06:00:41] <nfd> i actually *did* have a bug due to my exact definition consuming newlines
[06:01:40] *** Quits: zincy (~tom@2a00:23c8:970c:4801:8164:4807:4ccb:62f3) (Remote host closed the connection)
[06:01:45] *** Quits: tom_ (~tom@2a00:23c8:970c:4801:8164:4807:4ccb:62f3) (Remote host closed the connection)
[06:01:47] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[06:01:48] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[06:02:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:04:42] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[06:06:51] *** Joins: hololeap (~hololeap@user/hololeap)
[06:10:34] *** Joins: genieliu (~genieliu@103.37.140.24)
[06:15:39] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[06:21:41] *** Quits: Techcable_ (~Techcable@168.235.93.147) (Ping timeout: 268 seconds)
[06:32:39] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[06:34:42] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:35:29] *** Joins: hololeap (~hololeap@user/hololeap)
[06:36:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[06:36:47] *** Joins: sagax (~sagax_nb@user/sagax)
[06:38:27] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 252 seconds)
[06:48:36] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:49:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:51:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f767:b15a:e5b1:96f0) (Ping timeout: 268 seconds)
[06:52:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b36c:1fc0:956d:d06c)
[06:58:41] *** Quits: renzhi (~xp@2607:fa49:6500:b100::5cef) (Ping timeout: 268 seconds)
[06:59:43] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 252 seconds)
[07:01:23] *** Joins: mbuf (~Shakthi@122.178.240.120)
[07:03:00] *** Joins: genieliu_ (~genieliu@103.37.140.24)
[07:03:59] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 256 seconds)
[07:04:07] *** Quits: td_ (~td@muedsl-82-207-238-182.citykom.de) (Ping timeout: 252 seconds)
[07:05:55] *** Joins: td_ (~td@muedsl-82-207-238-027.citykom.de)
[07:07:08] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:07:08] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:07:08] *** finn_elija is now known as FinnElija
[07:10:13] *** Quits: _xor (~xor@72.49.199.147) (Ping timeout: 256 seconds)
[07:11:49] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[07:17:49] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[07:19:03] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:22:22] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[07:22:53] *** Quits: kennyd (~bc8165b6@83.167.180.121) (Quit: CGI:IRC (Session timeout))
[07:37:36] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:39f3:76e9:9ca1:32bd)
[07:40:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:38e1:73a2:ce5d:fb32) (Ping timeout: 252 seconds)
[07:41:57] *** Quits: genieliu_ (~genieliu@103.37.140.24) (Ping timeout: 256 seconds)
[07:42:44] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:55:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[07:59:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[08:04:28] *** Joins: Techcable (~Techcable@168.235.93.147)
[08:10:19] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[08:13:31] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[08:14:56] *** Joins: genieliu (~genieliu@103.37.140.38)
[08:14:56] *** Quits: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Ping timeout: 245 seconds)
[08:15:46] *** Quits: darchite` (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Ping timeout: 268 seconds)
[08:17:43] *** Joins: deadmarshal (~deadmarsh@95.38.119.139)
[08:20:01] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 252 seconds)
[08:25:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:25:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:25:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:25:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[08:28:46] *** Joins: on^ (~on@68.101.58.90)
[08:32:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:42:04] *** Quits: deadmarshal (~deadmarsh@95.38.119.139) (Quit: ZNC 1.8.2 - https://znc.in)
[08:43:12] *** Joins: deadmarshal (~deadmarsh@95.38.119.139)
[08:44:57] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:48:13] *** Joins: famubu (~famubu@user/famubu)
[08:48:56] *** Joins: genieliu (~genieliu@103.37.140.24)
[08:49:03] <famubu> Hi. Can we say that 'Monad ⊂ Applicatives ⊂ Functors'?
[08:49:12] <famubu> I was trying to learn about monads.
[08:49:20] <sclv> yes, that's correct
[08:49:27] <famubu> Thanks. :)
[08:49:43] *** Quits: deadmarshal (~deadmarsh@95.38.119.139) (Ping timeout: 252 seconds)
[08:51:55] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:53:55] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 256 seconds)
[08:56:28] *** Quits: DigitalKiwi (~kiwi@192.241.157.119) (*.net *.split)
[08:56:28] *** Quits: jrm (~jrm@156.34.187.65) (*.net *.split)
[08:56:28] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[08:56:28] *** Quits: nurupo (~nurupo.ga@user/nurupo) (*.net *.split)
[08:56:28] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (*.net *.split)
[08:56:28] *** Quits: _\_ (~o@user/ding) (*.net *.split)
[08:56:28] *** Quits: kaol_ (~kaol@94-237-42-30.nl-ams1.upcloud.host) (*.net *.split)
[08:56:28] *** Quits: adium (adium@user/adium) (*.net *.split)
[08:56:28] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[08:56:28] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[08:56:29] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[08:56:29] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[08:56:29] *** Quits: Aleksejs (~Aleksejs@haskell.lv) (*.net *.split)
[08:56:29] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[08:56:29] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[08:56:29] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[08:56:29] *** Quits: td_ (~td@muedsl-82-207-238-027.citykom.de) (*.net *.split)
[08:56:29] *** Quits: mbuf (~Shakthi@122.178.240.120) (*.net *.split)
[08:56:29] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b36c:1fc0:956d:d06c) (*.net *.split)
[08:56:29] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[08:56:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (*.net *.split)
[08:56:29] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6) (*.net *.split)
[08:56:29] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[08:56:29] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[08:56:29] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[08:56:29] *** Quits: sayola (~vekto@dslb-092-072-095-186.092.072.pools.vodafone-ip.de) (*.net *.split)
[08:56:29] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (*.net *.split)
[08:56:29] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (*.net *.split)
[08:56:29] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[08:56:29] *** Quits: Erutuon (~Erutuon@user/erutuon) (*.net *.split)
[08:56:29] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[08:56:29] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (*.net *.split)
[08:56:29] *** Quits: aeka (~hiruji@user/hiruji) (*.net *.split)
[08:56:29] *** Quits: Unhammer (~Unhammer@user/unhammer) (*.net *.split)
[08:56:29] *** Quits: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de) (*.net *.split)
[08:56:29] *** Quits: sander (~sander@user/sander) (*.net *.split)
[08:56:29] *** Quits: Stotteren (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net) (*.net *.split)
[08:56:29] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[08:56:29] *** Quits: quintasan (~quassel@quintasan.pl) (*.net *.split)
[08:56:29] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[08:56:30] *** Quits: orcus (~orcus@user/brprice) (*.net *.split)
[08:56:30] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[08:56:30] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[08:56:30] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[08:56:30] *** Quits: bsima (~bsima@2604:a880:400:d0::19f1:7001) (*.net *.split)
[08:56:30] *** Quits: tinwood (~tinwood@canonical/tinwood) (*.net *.split)
[08:56:30] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (*.net *.split)
[08:56:30] *** Quits: ystael (~ystael@user/ystael) (*.net *.split)
[08:56:30] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[08:56:30] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[08:56:30] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[08:56:30] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[08:56:30] *** Quits: xacktm (xacktm@user/xacktm) (*.net *.split)
[08:56:30] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (*.net *.split)
[08:56:30] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (*.net *.split)
[08:56:30] *** Quits: dyniec (~dyniec@mail.dybiec.info) (*.net *.split)
[08:56:30] *** Quits: gawen (~gawen@user/gawen) (*.net *.split)
[08:56:30] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[08:56:30] *** Quits: bgamari (~bgamari@2001:470:e438::1) (*.net *.split)
[08:56:30] *** Quits: anderson (~ande@user/anderson) (*.net *.split)
[08:56:30] *** Quits: hiredman (~hiredman@frontier1.downey.family) (*.net *.split)
[08:56:30] *** Quits: piele (~piele@tbonesteak.creativeserver.net) (*.net *.split)
[08:56:30] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[08:56:30] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (*.net *.split)
[08:56:30] *** Quits: OscarH_ (~OscarH@90.201.86.195) (*.net *.split)
[08:56:30] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (*.net *.split)
[08:56:30] *** Quits: wrengr (~wrengr@34.133.83.34.bc.googleusercontent.com) (*.net *.split)
[08:56:30] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (*.net *.split)
[08:56:30] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[08:56:30] *** Quits: moats (~oats@user/oats) (*.net *.split)
[08:56:30] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[08:56:30] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (*.net *.split)
[08:56:30] *** Quits: nek0 (~nek0@nek0.eu) (*.net *.split)
[08:56:30] *** Quits: arkeet (~arkeet@moriya.ca) (*.net *.split)
[08:56:30] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[08:56:30] *** Quits: AlexNoo__ (~AlexNoo@178.34.163.11) (*.net *.split)
[08:56:31] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (*.net *.split)
[08:56:31] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[08:56:31] *** Quits: johnjay (~pi@154.6.152.74) (*.net *.split)
[08:56:31] *** Quits: Megant (megant@user/megant) (*.net *.split)
[08:56:31] *** Quits: eyJhb (~eyJhb@user/eyjhb) (*.net *.split)
[08:56:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[08:56:31] *** Quits: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net) (*.net *.split)
[08:56:31] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[08:56:31] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (*.net *.split)
[08:56:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[08:56:31] *** Quits: ishutin (~ishutin@178-164-208-88.pool.digikabel.hu) (*.net *.split)
[08:56:31] *** Quits: puke (~puke@user/puke) (*.net *.split)
[08:56:31] *** Quits: monochrom (trebla@216.138.220.146) (*.net *.split)
[08:56:31] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[08:56:31] *** Quits: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com) (*.net *.split)
[08:56:31] *** Quits: jeffz (~user@lambda.xen.prgmr.com) (*.net *.split)
[08:56:31] *** Quits: siers (~ij@user/ij) (*.net *.split)
[08:56:31] *** Quits: caubert (~caubert@136.244.111.235) (*.net *.split)
[08:56:31] *** Quits: glider (~glider@user/glider) (*.net *.split)
[08:56:31] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[08:56:31] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[08:56:31] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (*.net *.split)
[08:56:31] *** Quits: heath (~heath@user/heath) (*.net *.split)
[08:56:31] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[08:56:31] *** Quits: zopsi (~zopsi@irc.dir.ac) (*.net *.split)
[08:56:31] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[08:56:31] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[08:56:31] *** Quits: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de) (*.net *.split)
[08:56:31] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[08:56:31] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (*.net *.split)
[08:56:31] *** Quits: spoofer (~spoofer@64.185.111.205) (*.net *.split)
[08:56:31] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (*.net *.split)
[08:56:32] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (*.net *.split)
[08:56:32] *** Quits: matijja (~matijja@193.77.181.201) (*.net *.split)
[08:56:32] *** Quits: spoonm (spoonm@inaba.spoonm.org) (*.net *.split)
[08:56:32] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (*.net *.split)
[08:56:32] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[08:56:32] *** Quits: sajith (~sajith@user/sajith) (*.net *.split)
[08:56:32] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[08:56:32] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[08:56:32] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[08:56:32] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (*.net *.split)
[08:56:32] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (*.net *.split)
[08:56:32] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[08:56:32] *** Quits: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (*.net *.split)
[08:56:32] *** Quits: sebeko (uid530526@id-530526.helmsley.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: shiraeeshi[m] (~shiraeesh@2001:470:69fc:105::1:77) (*.net *.split)
[08:56:32] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (*.net *.split)
[08:56:32] *** Quits: d34df00d (~d34df00d@2600:1700:8c60:3a10::48) (*.net *.split)
[08:56:32] *** Quits: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203) (*.net *.split)
[08:56:32] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[08:56:32] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[08:56:32] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (*.net *.split)
[08:56:32] *** Quits: AkechiShiro (~licht@2a01:e0a:5f9:9681:1473:3dff:fe42:56a9) (*.net *.split)
[08:56:32] *** Quits: hubvu (sid495858@user/hubvu) (*.net *.split)
[08:56:32] *** Quits: koz (~koz@121.99.240.58) (*.net *.split)
[08:56:32] *** Quits: davean (~davean@davean.sciesnet.net) (*.net *.split)
[08:56:32] *** Quits: drdo (~drdo@roach0.drdo.eu) (*.net *.split)
[08:56:32] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (*.net *.split)
[08:56:32] *** Quits: tritlo (sid58727@user/tritlo) (*.net *.split)
[08:56:33] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[08:56:33] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (*.net *.split)
[08:56:33] *** Quits: iteratee_ (~kyle@162.218.222.107) (*.net *.split)
[08:56:33] *** Quits: Ranhir (~Ranhir@157.97.53.139) (*.net *.split)
[08:56:33] *** Quits: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[08:56:33] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[08:56:33] *** Quits: SIben (~SIben@ns3106586.ip-5-135-191.eu) (*.net *.split)
[08:56:33] *** Quits: shane (~shane@ana.rch.ist) (*.net *.split)
[08:56:33] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (*.net *.split)
[08:56:33] *** Quits: ridcully (~ridcully@p508ac9bf.dip0.t-ipconnect.de) (*.net *.split)
[08:56:33] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[08:56:33] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (*.net *.split)
[08:56:33] *** Quits: idnar (sid12240@debian/mithrandi) (*.net *.split)
[08:56:33] *** Quits: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: ProofTechnique (sid79547@5.254.36.60) (*.net *.split)
[08:56:33] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[08:56:33] *** Quits: jackdk (sid373013@cssa/jackdk) (*.net *.split)
[08:56:33] *** Quits: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com) (*.net *.split)
[08:56:33] *** Quits: gnyeki (~gnyeki@user/gnyeki) (*.net *.split)
[08:56:33] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[08:56:33] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: integral (sid296274@user/integral) (*.net *.split)
[08:56:33] *** Quits: aria (sid380617@lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: systemfault (sid267009@uxbridge.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: truckasaurus (sid457088@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: gmc_ (sid58314@ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: nrr__ (sid20938@lymington.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: cln (sid336875@ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: bbhoss (sid18216@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: agander_m (sid407952@tinside.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: alinab (sid468903@helmsley.irccloud.com) (*.net *.split)
[08:56:33] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[08:56:33] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (*.net *.split)
[08:56:33] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[08:56:33] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[08:56:33] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (*.net *.split)
[08:56:33] *** Quits: ddb (~ddb@ipv6two.tilde.club) (*.net *.split)
[08:56:33] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[08:56:33] *** Quits: ozzloy (~ozzloy@ozzloy.lifeafterking.org) (*.net *.split)
[08:56:33] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[08:56:33] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[08:56:33] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[08:56:33] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[08:56:33] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (*.net *.split)
[08:56:33] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (*.net *.split)
[08:56:33] *** Quits: alex[m]121 (~alexchete@2001:470:69fc:105::1:1001) (*.net *.split)
[08:56:33] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (*.net *.split)
[08:56:33] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (*.net *.split)
[08:56:33] *** Quits: ts2 (~ts@46.101.20.9) (*.net *.split)
[08:56:33] *** Quits: cjay- (cjay@nerdbox.nerd2nerd.org) (*.net *.split)
[08:56:33] *** Quits: Clint (~Clint@user/clint) (*.net *.split)
[08:56:33] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (*.net *.split)
[08:56:34] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[08:56:34] *** Quits: p3n (~p3n@217.198.124.246) (*.net *.split)
[08:56:34] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (*.net *.split)
[08:56:34] *** Quits: wagle (~wagle@quassel.wagle.io) (*.net *.split)
[08:56:34] *** Quits: forell (~forell@user/forell) (*.net *.split)
[08:56:34] *** Quits: dysfigured (~dfg@li490-89.members.linode.com) (*.net *.split)
[08:56:34] *** Quits: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[08:56:34] *** Quits: cfebs (~cfebs@user/cfebs) (*.net *.split)
[08:56:34] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[08:56:34] *** Quits: martin02 (~silas@141.84.69.76) (*.net *.split)
[08:56:34] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[08:56:34] *** Quits: robbert-vdh (~robbert@robbertvanderhelm.nl) (*.net *.split)
[08:56:34] *** Quits: blades (~blades@204.48.29.163) (*.net *.split)
[08:56:34] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[08:56:34] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[08:56:34] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[08:56:34] *** Quits: haritz (~hrtz@user/haritz) (*.net *.split)
[08:56:34] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (*.net *.split)
[08:56:34] *** Quits: PotatoHatsue (~berberman@2001:470:69fc:105::b488) (*.net *.split)
[08:56:34] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[08:56:34] *** Quits: chizil[m] (~chizilmat@2001:470:69fc:105::1:34ab) (*.net *.split)
[08:56:34] *** Quits: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799) (*.net *.split)
[08:56:34] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (*.net *.split)
[08:56:34] *** Quits: Movedtosridoneem (~sridmatri@2001:470:69fc:105::1c2) (*.net *.split)
[08:56:34] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[08:56:34] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (*.net *.split)
[08:56:34] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[08:56:34] *** Quits: robertm (robertm@lattice.rojoma.com) (*.net *.split)
[08:56:34] *** Quits: _________ (~nobody@user/noodly) (*.net *.split)
[08:56:34] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[08:56:34] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (*.net *.split)
[08:56:34] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (*.net *.split)
[08:56:35] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (*.net *.split)
[08:56:35] *** Quits: PHO` (~pho@akari.cielonegro.org) (*.net *.split)
[08:56:35] *** Quits: yin (~z@user/zero) (*.net *.split)
[08:56:35] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[08:56:35] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[08:56:35] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[08:56:35] *** Quits: choucavalier (~choucaval@peanutbuttervibes.com) (*.net *.split)
[08:56:35] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[08:56:35] *** Quits: jespada (~jespada@87.74.37.56) (*.net *.split)
[08:56:35] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[08:56:35] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (*.net *.split)
[08:56:35] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (*.net *.split)
[08:56:35] *** Quits: benjamin[m]12 (~benjaminm@2001:470:69fc:105::1:3f2f) (*.net *.split)
[08:56:35] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[08:56:35] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (*.net *.split)
[08:56:35] *** Quits: mcfilib (sid302703@user/mcfilib) (*.net *.split)
[08:56:35] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[08:56:35] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[08:56:35] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[08:56:35] *** Quits: berberman (~berberman@user/berberman) (*.net *.split)
[08:56:35] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (*.net *.split)
[08:56:35] *** Quits: sm (~sm@plaintextaccounting/sm) (*.net *.split)
[08:56:35] *** Quits: Tisoxin (~ikosit@user/ikosit) (*.net *.split)
[08:56:35] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[08:56:35] *** Quits: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405) (*.net *.split)
[08:56:35] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (*.net *.split)
[08:56:35] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (*.net *.split)
[08:56:35] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[08:56:35] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[08:56:35] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (*.net *.split)
[08:56:35] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (*.net *.split)
[08:56:35] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[08:56:35] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[08:56:35] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (*.net *.split)
[08:56:35] *** Quits: biberu (~biberu@user/biberu) (*.net *.split)
[08:56:35] *** Quits: canta (~canta@user/canta) (*.net *.split)
[08:56:35] *** Quits: bah (~bah@l1.tel) (*.net *.split)
[08:56:35] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[08:56:35] *** Quits: feetwind (~mike@user/feetwind) (*.net *.split)
[08:56:35] *** Quits: alp (~alp@mail.fmap.fr) (*.net *.split)
[08:56:35] *** Quits: guibou (~guibou@mail.fmap.fr) (*.net *.split)
[08:56:35] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (*.net *.split)
[08:56:35] *** Quits: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045) (*.net *.split)
[08:56:35] *** Quits: Tavi[m] (~factoidde@2001:470:69fc:105::1:819) (*.net *.split)
[08:56:35] *** Quits: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7) (*.net *.split)
[08:56:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[08:56:36] *** Quits: Igloo (~ian@matrix.chaos.earth.li) (*.net *.split)
[08:56:36] *** Quits: Flow (~none@gentoo/developer/flow) (*.net *.split)
[08:56:36] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (*.net *.split)
[08:56:36] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[08:56:36] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (*.net *.split)
[08:56:36] *** Quits: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f) (*.net *.split)
[08:56:36] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[08:56:36] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[08:56:36] *** Quits: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[08:56:36] *** Quits: thedward[m] (~thedwardm@2001:470:69fc:105::f79) (*.net *.split)
[08:56:36] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (*.net *.split)
[08:56:36] *** Quits: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248) (*.net *.split)
[08:56:36] *** Quits: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a) (*.net *.split)
[08:56:36] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (*.net *.split)
[08:56:36] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (*.net *.split)
[08:56:36] *** Quits: clever (~clever@99.192.114.98) (*.net *.split)
[08:56:36] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (*.net *.split)
[08:56:36] *** Quits: APic (apic@apic.name) (*.net *.split)
[08:56:36] *** Quits: riatre (~quassel@2001:310:6000:f::5198:1) (*.net *.split)
[08:56:36] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[08:56:36] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (*.net *.split)
[08:56:36] *** Quits: andjjj23 (~irc@107.170.228.47) (*.net *.split)
[08:56:36] *** Quits: noddy (~user@user/noddy) (*.net *.split)
[08:56:36] *** Quits: edr (~edr@user/edr) (*.net *.split)
[08:56:36] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[08:56:36] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[08:56:36] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[08:56:36] *** Quits: polux (~polux@51.15.169.172) (*.net *.split)
[08:56:36] *** Quits: dy (~dy@user/dy) (*.net *.split)
[08:56:36] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[08:56:36] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[08:56:36] *** Quits: ajb (~ajb@cupid.whatbox.ca) (*.net *.split)
[08:56:36] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[08:56:36] *** Quits: std_mutex[m] (~stdmutexm@2001:470:69fc:105::1:4534) (*.net *.split)
[08:56:36] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[08:56:36] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[08:56:36] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[08:56:37] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (*.net *.split)
[08:56:37] *** Quits: cigsender (~cigsender@74.124.58.162) (*.net *.split)
[08:56:37] *** Quits: enikar (~enikar@user/enikar) (*.net *.split)
[08:56:37] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[08:56:37] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: jmct_ (sid160793@id-160793.tinside.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: astra` (sid289983@user/amish) (*.net *.split)
[08:56:37] *** Quits: amir (sid22336@user/amir) (*.net *.split)
[08:56:37] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (*.net *.split)
[08:56:37] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[08:56:37] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[08:56:37] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[08:56:37] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (*.net *.split)
[08:56:37] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[08:56:37] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (*.net *.split)
[08:56:37] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[08:56:37] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[08:56:37] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (*.net *.split)
[08:56:37] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (*.net *.split)
[08:56:37] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[08:56:37] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (*.net *.split)
[08:56:37] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (*.net *.split)
[08:56:37] *** Quits: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311) (*.net *.split)
[08:56:37] *** Quits: ocramz[m] (~ocramzmat@2001:470:69fc:105::1:35b0) (*.net *.split)
[08:56:37] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (*.net *.split)
[08:56:37] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (*.net *.split)
[08:56:37] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (*.net *.split)
[08:56:37] *** Quits: OndejSkup[m] (~mimivxmat@2001:470:69fc:105::c300) (*.net *.split)
[08:56:37] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (*.net *.split)
[08:56:37] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[08:56:37] *** Quits: oxytocat (~alloca@user/suppi) (*.net *.split)
[08:56:37] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (*.net *.split)
[08:56:37] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (*.net *.split)
[08:56:37] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[08:56:37] *** Quits: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2) (*.net *.split)
[08:56:37] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[08:56:37] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (*.net *.split)
[08:56:37] *** Quits: deni (~deni@user/deni) (*.net *.split)
[08:56:37] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[08:56:37] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[08:56:37] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[08:56:38] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[08:56:38] *** Quits: L29Ah (~L29Ah@wikipedia/L29Ah) (*.net *.split)
[08:56:38] *** Quits: boxscape (~boxscape@user/boxscape) (*.net *.split)
[08:56:38] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (*.net *.split)
[08:56:38] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (*.net *.split)
[08:56:38] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[08:56:38] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: dpratt__ (sid193493@id-193493.helmsley.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (*.net *.split)
[08:56:38] *** Quits: platz (~platz@user/platz) (*.net *.split)
[08:56:38] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[08:56:38] *** Quits: mrckndt (~mrckndt@user/mrckndt) (*.net *.split)
[08:56:38] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[08:56:38] *** Quits: tired (~tired@user/tired) (*.net *.split)
[08:56:38] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (*.net *.split)
[08:56:38] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (*.net *.split)
[08:56:38] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (*.net *.split)
[08:56:38] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (*.net *.split)
[08:56:38] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (*.net *.split)
[08:56:38] *** Quits: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb) (*.net *.split)
[08:56:38] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (*.net *.split)
[08:56:38] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[08:56:38] *** Quits: jmtd (jon@dow.land) (*.net *.split)
[08:56:38] *** Quits: hiato (~op_4@user/op-4/x-9116473) (*.net *.split)
[08:56:38] *** Quits: df (~ben@justworks.xyz) (*.net *.split)
[08:56:38] *** Quits: w1gz (~do@159.89.11.133) (*.net *.split)
[08:56:38] *** Quits: acro (~acro@user/acro) (*.net *.split)
[08:56:38] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[08:56:38] *** Quits: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com) (*.net *.split)
[08:56:38] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[08:56:38] *** Quits: relrod (~relrod@redhat/ansible.staff.relrod) (*.net *.split)
[08:56:38] *** Quits: smorgasbord (buggy@user/smorgasbord) (*.net *.split)
[08:56:38] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[08:56:38] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[08:56:38] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[08:56:39] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[08:56:39] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[08:56:39] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[08:56:39] *** Quits: In0perable (~PLAYER_1@fancydata.science) (*.net *.split)
[08:56:39] *** Quits: Square (~a@user/square) (*.net *.split)
[08:56:39] *** Quits: mht-wtf (~mht@mht.wtf) (*.net *.split)
[08:56:39] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[08:56:39] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[08:56:39] *** Quits: nf (~n@monade.li) (*.net *.split)
[08:56:39] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (*.net *.split)
[08:56:39] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (*.net *.split)
[08:56:39] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (*.net *.split)
[08:56:39] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[08:56:39] *** Quits: soft (~soft@2001:470:69fc:105::c75) (*.net *.split)
[08:56:39] *** Quits: asdofindia-m (~akshaymat@2001:470:69fc:105::831) (*.net *.split)
[08:56:39] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (*.net *.split)
[08:56:39] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (*.net *.split)
[08:56:39] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (*.net *.split)
[08:56:39] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[08:56:39] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (*.net *.split)
[08:56:39] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (*.net *.split)
[08:56:39] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (*.net *.split)
[08:56:39] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (*.net *.split)
[08:56:39] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (*.net *.split)
[08:56:39] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (*.net *.split)
[08:56:39] *** Quits: root1 (root@2600:3c02::f03c:92ff:fe1a:c779) (*.net *.split)
[08:56:39] *** Quits: |beowulf| (1000@sourcemage/mage/beowulf) (*.net *.split)
[08:56:39] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[08:56:39] *** Quits: absence (~absence@hildring.pvv.ntnu.no) (*.net *.split)
[08:56:39] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[08:56:39] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[08:56:39] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[08:56:39] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[08:56:39] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (*.net *.split)
[08:56:39] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[08:56:39] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[08:56:40] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[08:56:40] *** Quits: stilgart_ (~Christoph@chezlefab.net) (*.net *.split)
[08:56:40] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[08:56:40] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[08:56:40] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[08:56:40] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (*.net *.split)
[08:56:40] *** Quits: jassob (~jassob@h-98-128-166-172.NA.cust.bahnhof.se) (*.net *.split)
[08:56:40] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (*.net *.split)
[08:56:40] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (*.net *.split)
[08:56:40] *** Quits: quantum (~quantum@user/quantum/x-8556232) (*.net *.split)
[08:56:40] *** Quits: siraben (~siraben@user/siraben) (*.net *.split)
[08:56:40] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (*.net *.split)
[08:56:40] *** Quits: acco[m] (~accotedom@2001:470:69fc:105::1:3236) (*.net *.split)
[08:56:40] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (*.net *.split)
[08:56:40] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (*.net *.split)
[08:56:40] *** Quits: kosmikus[m] (~andresloe@2001:470:69fc:105::95d) (*.net *.split)
[08:56:40] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (*.net *.split)
[08:56:40] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (*.net *.split)
[08:56:40] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (*.net *.split)
[08:56:40] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (*.net *.split)
[08:56:40] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (*.net *.split)
[08:56:40] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[08:56:40] *** Quits: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy) (*.net *.split)
[08:56:40] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[08:56:40] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[08:56:40] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[08:56:40] *** Quits: noctuks (dzDZscEp9m@user/noctux) (*.net *.split)
[08:56:40] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[08:56:40] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[08:56:40] *** Quits: mrus (~mrus@149.28.224.172) (*.net *.split)
[08:56:40] *** Quits: wanko (~wanko@51.15.4.226) (*.net *.split)
[08:56:40] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[08:56:40] *** Quits: Cajun (~Cajun@user/cajun) (*.net *.split)
[08:56:40] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[08:56:40] *** Quits: hololeap (~hololeap@user/hololeap) (*.net *.split)
[08:56:40] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (*.net *.split)
[08:56:40] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[08:56:40] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[08:56:41] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (*.net *.split)
[08:56:41] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[08:56:41] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (*.net *.split)
[08:56:41] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (*.net *.split)
[08:57:02] *** Joins: geekosaur (~geekosaur@069-135-003-034.biz.spectrum.com)
[08:58:04] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[08:58:04] *** Joins: td_ (~td@muedsl-82-207-238-027.citykom.de)
[08:58:04] *** Joins: mbuf (~Shakthi@122.178.240.120)
[08:58:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b36c:1fc0:956d:d06c)
[08:58:04] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[08:58:04] *** Joins: hololeap (~hololeap@user/hololeap)
[08:58:04] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[08:58:04] *** Joins: AlexNoo__ (~AlexNoo@178.34.163.11)
[08:58:04] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6)
[08:58:04] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:58:04] *** Joins: notzmv (~zmv@user/notzmv)
[08:58:04] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[08:58:04] *** Joins: jakalx (~jakalx@base.jakalx.net)
[08:58:04] *** Joins: xsperry (~xs@user/xsperry)
[08:58:04] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[08:58:04] *** Joins: sayola (~vekto@dslb-092-072-095-186.092.072.pools.vodafone-ip.de)
[08:58:04] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[08:58:04] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[08:58:04] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[08:58:04] *** Joins: Cajun (~Cajun@user/cajun)
[08:58:04] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:58:04] *** Joins: econo (uid147250@user/econo)
[08:58:04] *** Joins: sebeko (uid530526@id-530526.helmsley.irccloud.com)
[08:58:04] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[08:58:04] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[08:58:04] *** Joins: cheater (~Username@user/cheater)
[08:58:04] *** Joins: johnjay (~pi@154.6.152.74)
[08:58:04] *** Joins: Megant (megant@user/megant)
[08:58:04] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[08:58:04] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:58:04] *** Joins: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net)
[08:58:04] *** Joins: kmein (~weechat@user/kmein)
[08:58:04] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[08:58:04] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[08:58:04] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[08:58:04] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:58:04] *** Joins: ishutin (~ishutin@178-164-208-88.pool.digikabel.hu)
[08:58:04] *** Joins: 078AACR81 (~d34df00d@2600:1700:8c60:3a10::48)
[08:58:04] *** Joins: puke (~puke@user/puke)
[08:58:04] *** Joins: shiraeeshi[m] (~shiraeesh@2001:470:69fc:105::1:77)
[08:58:04] *** Joins: aeka (~hiruji@user/hiruji)
[08:58:04] *** Joins: Unhammer (~Unhammer@user/unhammer)
[08:58:04] *** Joins: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de)
[08:58:04] *** Joins: std_mutex[m] (~stdmutexm@2001:470:69fc:105::1:4534)
[08:58:04] *** Joins: monochrom (trebla@216.138.220.146)
[08:58:04] *** Joins: sander (~sander@user/sander)
[08:58:04] *** Joins: Stotteren (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net)
[08:58:04] *** Joins: juri_ (~juri@178.63.35.222)
[08:58:04] *** Joins: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5)
[08:58:04] *** Joins: quintasan (~quassel@quintasan.pl)
[08:58:04] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[08:58:04] *** Joins: bliminse (~bliminse@host86-162-147-196.range86-162.btcentralplus.com)
[08:58:04] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[08:58:04] *** Joins: orcus (~orcus@user/brprice)
[08:58:04] *** Joins: siers (~ij@user/ij)
[08:58:04] *** Joins: acidsys (~LSD@2.lsd.systems)
[08:58:04] *** Joins: mniip (mniip@libera/staff/mniip)
[08:58:04] *** Joins: jeffz (~user@lambda.xen.prgmr.com)
[08:58:04] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[08:58:04] *** Joins: |beowulf| (1000@sourcemage/mage/beowulf)
[08:58:04] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[08:58:04] *** Joins: nek0 (~nek0@nek0.eu)
[08:58:04] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[08:58:04] *** Joins: caubert (~caubert@136.244.111.235)
[08:58:04] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[08:58:04] *** Joins: tinwood (~tinwood@canonical/tinwood)
[08:58:04] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[08:58:04] *** Joins: ystael (~ystael@user/ystael)
[08:58:04] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[08:58:04] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[08:58:04] *** Joins: glider (~glider@user/glider)
[08:58:04] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[08:58:04] *** Joins: remexre (~remexre@user/remexre)
[08:58:04] *** Joins: haskl (~haskl@user/haskl)
[08:58:04] *** Joins: oats (~thomas@user/oats)
[08:58:04] *** Joins: xacktm (xacktm@user/xacktm)
[08:58:04] *** Joins: carbolymer (~carbolyme@dropacid.net)
[08:58:04] *** Joins: heath (~heath@user/heath)
[08:58:04] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[08:58:04] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[08:58:04] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[08:58:04] *** Joins: zopsi (~zopsi@irc.dir.ac)
[08:58:04] *** Joins: Teacup (~teacup@user/teacup)
[08:58:04] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[08:58:04] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[08:58:04] *** Joins: dyniec (~dyniec@mail.dybiec.info)
[08:58:04] *** Joins: gawen (~gawen@user/gawen)
[08:58:04] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:58:04] *** Joins: bgamari (~bgamari@2001:470:e438::1)
[08:58:04] *** Joins: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de)
[08:58:04] *** Joins: anderson (~ande@user/anderson)
[08:58:04] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[08:58:04] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[08:58:04] *** Joins: spoofer (~spoofer@64.185.111.205)
[08:58:04] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[08:58:04] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[08:58:04] *** Joins: piele (~piele@tbonesteak.creativeserver.net)
[08:58:04] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[08:58:04] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[08:58:04] *** Joins: OscarH_ (~OscarH@90.201.86.195)
[08:58:04] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[08:58:04] *** Joins: boxscape (~boxscape@user/boxscape)
[08:58:04] *** Joins: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203)
[08:58:04] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[08:58:04] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[08:58:04] *** Joins: matijja (~matijja@193.77.181.201)
[08:58:04] *** Joins: wrengr (~wrengr@34.133.83.34.bc.googleusercontent.com)
[08:58:04] *** Joins: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045)
[08:58:04] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[08:58:04] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[08:58:04] *** Joins: Tavi[m] (~factoidde@2001:470:69fc:105::1:819)
[08:58:04] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[08:58:04] *** Joins: Deewiant (~deewiant@2001:470:69fc:105::2fd3)
[08:58:04] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[08:58:04] *** Joins: alex[m]121 (~alexchete@2001:470:69fc:105::1:1001)
[08:58:04] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[08:58:04] *** Joins: moats (~oats@user/oats)
[08:58:04] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[08:58:04] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[08:58:04] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[08:58:04] *** Joins: jinsun_ (~jinsun@user/jinsun)
[08:58:04] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[08:58:04] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[08:58:04] *** Joins: arkeet (~arkeet@moriya.ca)
[08:58:04] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[08:58:04] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[08:58:04] *** Joins: Magnus[m] (~magthetch@2001:470:69fc:105::d1a7)
[08:58:04] *** Joins: spoonm (spoonm@inaba.spoonm.org)
[08:58:04] *** Joins: auri (~quassel@fsf/member/auri)
[08:58:04] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[08:58:04] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[08:58:04] *** Joins: chronon (~chronon@user/chronon)
[08:58:04] *** Joins: Xe (~cadey@tailscale/xe)
[08:58:04] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[08:58:04] *** Joins: mstruebing (~maex@2001:41d0:8:93c7::1)
[08:58:04] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[08:58:04] *** Joins: cigsender (~cigsender@74.124.58.162)
[08:58:04] *** Joins: enikar (~enikar@user/enikar)
[08:58:04] *** Joins: PHO` (~pho@akari.cielonegro.org)
[08:58:04] *** Joins: fluxit (~fluxit@techsmix.net)
[08:58:04] *** Joins: DigitalKiwi (~kiwi@192.241.157.119)
[08:58:04] *** Joins: sajith (~sajith@user/sajith)
[08:58:04] *** Joins: yin (~z@user/zero)
[08:58:04] *** Joins: nonzen (~nonzen@user/nonzen)
[08:58:04] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[08:58:04] *** Joins: jrm (~jrm@156.34.187.65)
[08:58:04] *** Joins: dextaa (~DV@user/dextaa)
[08:58:04] *** Joins: _\_ (~o@user/ding)
[08:58:04] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[08:58:04] *** Joins: urdh (~urdh@user/urdh)
[08:58:04] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[08:58:04] *** Joins: AkechiShiro (~licht@2a01:e0a:5f9:9681:1473:3dff:fe42:56a9)
[08:58:04] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[08:58:04] *** Joins: lieven (~mal@ns2.wyrd.be)
[08:58:04] *** Joins: meejah (~meejah@rutas.meejah.ca)
[08:58:04] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[08:58:04] *** Joins: Rembane (~Rembane@li346-36.members.linode.com)
[08:58:04] *** Joins: kaol_ (~kaol@94-237-42-30.nl-ams1.upcloud.host)
[08:58:04] *** Joins: landonf (landonf@mac68k.info)
[08:58:04] *** Joins: Hafydd (~Hafydd@user/hafydd)
[08:58:04] *** Joins: hubvu (sid495858@user/hubvu)
[08:58:04] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[08:58:04] *** Joins: adium (adium@user/adium)
[08:58:04] *** Joins: n3t (n3t@user/n3t)
[08:58:04] *** Joins: nckx (~nckx@tobias.gr)
[08:58:04] *** Joins: koz (~koz@121.99.240.58)
[08:58:04] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[08:58:04] *** Joins: mcglk (~mcglk@131.191.49.120)
[08:58:04] *** Joins: benjamin[m]12 (~benjaminm@2001:470:69fc:105::1:3f2f)
[08:58:04] *** Joins: davean (~davean@davean.sciesnet.net)
[08:58:04] *** Joins: jespada (~jespada@87.74.37.56)
[08:58:04] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[08:58:04] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[08:58:04] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[08:58:04] *** Joins: Moyst_ (~moyst@user/moyst)
[08:58:04] *** Joins: lagash (lagash@lagash.shelltalk.net)
[08:58:04] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[08:58:04] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[08:58:04] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:58:04] *** Joins: sudden (~cat@user/sudden)
[08:58:04] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[08:58:04] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[08:58:04] *** Joins: jmct_ (sid160793@id-160793.tinside.irccloud.com)
[08:58:04] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[08:58:04] *** Joins: mcfilib (sid302703@user/mcfilib)
[08:58:04] *** Joins: astra` (sid289983@user/amish)
[08:58:04] *** Joins: amir (sid22336@user/amir)
[08:58:04] *** Joins: obviyus (sid415299@user/obviyus)
[08:58:04] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[08:58:04] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[08:58:04] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[08:58:04] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[08:58:04] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[08:58:04] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[08:58:04] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[08:58:04] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[08:58:04] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[08:58:04] *** Joins: tritlo (sid58727@user/tritlo)
[08:58:04] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[08:58:04] *** Joins: degraafk (sid71464@id-71464.lymington.irccloud.com)
[08:58:04] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[08:58:04] *** Joins: smorgasbord (buggy@user/smorgasbord)
[08:58:04] *** Joins: bsdbandit (~bwell@users.757.org)
[08:58:04] *** Joins: platz (~platz@user/platz)
[08:58:04] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[08:58:04] *** Joins: Square (~a@user/square)
[08:58:04] *** Joins: mht-wtf (~mht@mht.wtf)
[08:58:04] *** Joins: ts2 (~ts@46.101.20.9)
[08:58:04] *** Joins: Igloo (~ian@matrix.chaos.earth.li)
[08:58:04] *** Joins: cjay- (cjay@nerdbox.nerd2nerd.org)
[08:58:04] *** Joins: Clint (~Clint@user/clint)
[08:58:04] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[08:58:04] *** Joins: sshine (~simon@hubris.eta.solutions)
[08:58:04] *** Joins: p3n (~p3n@217.198.124.246)
[08:58:04] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[08:58:04] *** Joins: wagle (~wagle@quassel.wagle.io)
[08:58:04] *** Joins: forell (~forell@user/forell)
[08:58:04] *** Joins: dysfigured (~dfg@li490-89.members.linode.com)
[08:58:04] *** Joins: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at)
[08:58:04] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[08:58:04] *** Joins: cfebs (~cfebs@user/cfebs)
[08:58:04] *** Joins: ellie (~ellie@user/ellie)
[08:58:04] *** Joins: remedan (~remedan@balak.me)
[08:58:04] *** Joins: martin02 (~silas@141.84.69.76)
[08:58:04] *** Joins: abraham (~abraham@143.244.185.86)
[08:58:04] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[08:58:04] *** Joins: vito (sid1962@user/vito)
[08:58:04] *** Joins: lechner (~lechner@debian/lechner)
[08:58:04] *** Joins: iteratee_ (~kyle@162.218.222.107)
[08:58:04] *** Joins: Ranhir (~Ranhir@157.97.53.139)
[08:58:04] *** Joins: Flow (~none@gentoo/developer/flow)
[08:58:04] *** Joins: mrckndt (~mrckndt@user/mrckndt)
[08:58:04] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[08:58:04] *** Joins: stilgart_ (~Christoph@chezlefab.net)
[08:58:04] *** Joins: a1paca_ (~a1paca@user/a1paca)
[08:58:04] *** Joins: raoul (~raoul@95.179.203.88)
[08:58:04] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[08:58:04] *** Joins: tafa (~tafa@user/tafa)
[08:58:04] *** Joins: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[08:58:04] *** Joins: drewolson (~drewolson@user/drewolson)
[08:58:04] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[08:58:04] *** Joins: SIben (~SIben@ns3106586.ip-5-135-191.eu)
[08:58:04] *** Joins: shane (~shane@ana.rch.ist)
[08:58:04] *** Joins: nf (~n@monade.li)
[08:58:04] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[08:58:04] *** Joins: ridcully (~ridcully@p508ac9bf.dip0.t-ipconnect.de)
[08:58:04] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[08:58:04] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[08:58:04] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[08:58:04] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[08:58:04] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[08:58:04] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[08:58:04] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[08:58:04] *** Joins: idnar (sid12240@debian/mithrandi)
[08:58:04] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[08:58:04] *** Joins: bw (sid2730@user/betawaffle)
[08:58:04] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[08:58:04] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[08:58:04] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[08:58:04] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[08:58:04] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[08:58:04] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[08:58:04] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[08:58:04] *** Joins: ProofTechnique (sid79547@5.254.36.60)
[08:58:04] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[08:58:04] *** Joins: jackdk (sid373013@cssa/jackdk)
[08:58:04] *** Joins: catern (~sbaugh@cpe-98-7-229-235.nyc.res.rr.com)
[08:58:04] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[08:58:04] *** Joins: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f)
[08:58:04] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[08:58:04] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[08:58:04] *** Joins: Philonous (~Philonous@user/philonous)
[08:58:04] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[08:58:04] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[08:58:04] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[08:58:04] *** Joins: integral (sid296274@user/integral)
[08:58:04] *** Joins: aria (sid380617@lymington.irccloud.com)
[08:58:04] *** Joins: systemfault (sid267009@uxbridge.irccloud.com)
[08:58:04] *** Joins: truckasaurus (sid457088@helmsley.irccloud.com)
[08:58:04] *** Joins: jonrh (sid5185@ilkley.irccloud.com)
[08:58:04] *** Joins: gmc_ (sid58314@ilkley.irccloud.com)
[08:58:04] *** Joins: nrr__ (sid20938@lymington.irccloud.com)
[08:58:04] *** Joins: cln (sid336875@ilkley.irccloud.com)
[08:58:04] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[08:58:04] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[08:58:04] *** Joins: bbhoss (sid18216@tinside.irccloud.com)
[08:58:04] *** Joins: agander_m (sid407952@tinside.irccloud.com)
[08:58:04] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[08:58:04] *** Joins: tureba (~tureba@tureba.org)
[08:58:04] *** Joins: megaTherion (~therion@unix.io)
[08:58:04] *** Joins: robbert-vdh (~robbert@robbertvanderhelm.nl)
[08:58:04] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[08:58:04] *** Joins: blades (~blades@204.48.29.163)
[08:58:04] *** Joins: pierrot (~pi@user/pierrot)
[08:58:04] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[08:58:04] *** Joins: maerwald (~maerwald@user/maerwald)
[08:58:04] *** Joins: hexology (~hexology@user/hexology)
[08:58:04] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[08:58:04] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[08:58:04] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[08:58:04] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[08:58:04] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[08:58:04] *** Joins: ozzloy (~ozzloy@ozzloy.lifeafterking.org)
[08:58:04] *** Joins: c_wraith (~c_wraith@adjoint.us)
[08:58:04] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[08:58:04] *** Joins: xerox (~edi@user/edi)
[08:58:04] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[08:58:04] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[08:58:04] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[08:58:04] *** Joins: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec)
[08:58:04] *** Joins: xstill- (xstill@fimu/xstill)
[08:58:04] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[08:58:04] *** Joins: tabemann (~tabemann@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[08:58:04] *** Joins: haritz (~hrtz@user/haritz)
[08:58:04] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[08:58:04] *** Joins: jassob (~jassob@h-98-128-166-172.NA.cust.bahnhof.se)
[08:58:04] *** Joins: tired (~tired@user/tired)
[08:58:04] *** Joins: berberman (~berberman@user/berberman)
[08:58:04] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[08:58:04] *** Joins: Deide (~deide@user/deide)
[08:58:04] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[08:58:04] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[08:58:04] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[08:58:04] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[08:58:04] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[08:58:04] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[08:58:04] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[08:58:04] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[08:58:04] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[08:58:04] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[08:58:04] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[08:58:04] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[08:58:04] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[08:58:04] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[08:58:04] *** Joins: Tisoxin (~ikosit@user/ikosit)
[08:58:04] *** Joins: psydroid (~psydroid@user/psydroid)
[08:58:04] *** Joins: siraben (~siraben@user/siraben)
[08:58:04] *** Joins: sm (~sm@plaintextaccounting/sm)
[08:58:04] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[08:58:04] *** Joins: PotatoHatsue (~berberman@2001:470:69fc:105::b488)
[08:58:04] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[08:58:04] *** Joins: kadoban (~kadoban@user/kadoban)
[08:58:04] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[08:58:04] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[08:58:04] *** Joins: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311)
[08:58:04] *** Joins: thedward[m] (~thedwardm@2001:470:69fc:105::f79)
[08:58:04] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[08:58:04] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[08:58:04] *** Joins: tomku[m] (~tomkumozi@2001:470:69fc:105::1:2fcb)
[08:58:04] *** Joins: acco[m] (~accotedom@2001:470:69fc:105::1:3236)
[08:58:04] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[08:58:04] *** Joins: JoelMcCracken[m] (~joelmccra@2001:470:69fc:105::8405)
[08:58:04] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[08:58:04] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[08:58:04] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[08:58:04] *** Joins: kosmikus[m] (~andresloe@2001:470:69fc:105::95d)
[08:58:04] *** Joins: OndejSkup[m] (~mimivxmat@2001:470:69fc:105::c300)
[08:58:04] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[08:58:04] *** Joins: ocramz[m] (~ocramzmat@2001:470:69fc:105::1:35b0)
[08:58:04] *** Joins: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248)
[08:58:04] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[08:58:04] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[08:58:04] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[08:58:04] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[08:58:04] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[08:58:04] *** Joins: Movedtosridoneem (~sridmatri@2001:470:69fc:105::1c2)
[08:58:04] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[08:58:04] *** Joins: asdofindia-m (~akshaymat@2001:470:69fc:105::831)
[08:58:04] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[08:58:04] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[08:58:04] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[08:58:04] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[08:58:04] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[08:58:04] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[08:58:04] *** Joins: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a)
[08:58:04] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[08:58:04] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[08:58:04] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[08:58:04] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[08:58:04] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[08:58:04] *** Joins: chizil[m] (~chizilmat@2001:470:69fc:105::1:34ab)
[08:58:04] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[08:58:04] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[08:58:04] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[08:58:04] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[08:58:04] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[08:58:04] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[08:58:04] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[08:58:04] *** Joins: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799)
[08:58:04] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[08:58:04] *** Joins: clever (~clever@99.192.114.98)
[08:58:04] *** Joins: PigDude (~PigDude@159.203.16.199)
[08:58:04] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[08:58:04] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:58:04] *** Joins: robertm (robertm@lattice.rojoma.com)
[08:58:04] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[08:58:04] *** Joins: _________ (~nobody@user/noodly)
[08:58:04] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[08:58:04] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[08:58:04] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[08:58:04] *** Joins: litharge (litharge@libera/bot/litharge)
[08:58:04] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[08:58:04] *** Joins: Trattue (~Trattue@152.70.182.158)
[08:58:04] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[08:58:04] *** Joins: ringo__ (~ringo@157.230.117.128)
[08:58:04] *** Joins: oxytocat (~alloca@user/suppi)
[08:58:04] *** Joins: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy)
[08:58:04] *** Joins: samebchase (~thelounge@51.15.68.182)
[08:58:04] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[08:58:04] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[08:58:04] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[08:58:04] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[08:58:04] *** Joins: APic (apic@apic.name)
[08:58:04] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[08:58:04] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[08:58:04] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[08:58:04] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[08:58:04] *** Joins: opqdonut (opqdonut@pseudo.fixme.fi)
[08:58:04] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:04] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[08:58:04] *** Joins: andjjj23 (~irc@107.170.228.47)
[08:58:04] *** Joins: noddy (~user@user/noddy)
[08:58:04] *** Joins: biberu (~biberu@user/biberu)
[08:58:04] *** Joins: canta (~canta@user/canta)
[08:58:04] *** Joins: edr (~edr@user/edr)
[08:58:04] *** Joins: ldlework (~hexeme@user/hexeme)
[08:58:04] *** Joins: reda_ (~reda@user/reda)
[08:58:04] *** Joins: tomku (~tomku@user/tomku)
[08:58:04] *** Joins: polux (~polux@51.15.169.172)
[08:58:04] *** Joins: bah (~bah@l1.tel)
[08:58:04] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[08:58:04] *** Joins: feetwind (~mike@user/feetwind)
[08:58:04] *** Joins: alp (~alp@mail.fmap.fr)
[08:58:04] *** Joins: guibou (~guibou@mail.fmap.fr)
[08:58:04] *** Joins: dy (~dy@user/dy)
[08:58:04] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[08:58:04] *** Joins: statusfailed (~statusfai@statusfailed.com)
[08:58:04] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[08:58:04] *** Joins: shachaf (~shachaf@user/shachaf)
[08:58:04] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[08:58:04] *** Joins: jmtd (jon@dow.land)
[08:58:04] *** Joins: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2)
[08:58:04] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[08:58:04] *** Joins: hiato (~op_4@user/op-4/x-9116473)
[08:58:04] *** Joins: df (~ben@justworks.xyz)
[08:58:04] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[08:58:04] *** Joins: deni (~deni@user/deni)
[08:58:04] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[08:58:04] *** Joins: jocke-l (jocke-l@a.x0.is)
[08:58:04] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[08:58:04] *** Joins: w1gz (~do@159.89.11.133)
[08:58:04] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[08:58:04] *** Joins: L29Ah (~L29Ah@wikipedia/L29Ah)
[08:58:04] *** Joins: acro (~acro@user/acro)
[08:58:04] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[08:58:04] *** Joins: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com)
[08:58:04] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[08:58:04] *** Joins: relrod (~relrod@redhat/ansible.staff.relrod)
[08:58:04] *** Joins: lisq (~quassel@lis.moe)
[08:58:04] *** Joins: tristanC (~tristanC@user/tristanc)
[08:58:04] *** Joins: exarkun (~exarkun@user/exarkun)
[08:58:04] *** Joins: root1 (root@2600:3c02::f03c:92ff:fe1a:c779)
[08:58:04] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[08:58:04] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[08:58:04] *** Joins: absence (~absence@hildring.pvv.ntnu.no)
[08:58:04] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[08:58:04] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[08:58:04] *** Joins: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[08:58:04] *** Joins: byorgey (~byorgey@155.138.238.211)
[08:58:04] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[08:58:04] *** Joins: SoF (~skius@user/skius)
[08:58:04] *** Joins: swistak (~swistak@185.21.216.141)
[08:58:04] *** Joins: noctuks (dzDZscEp9m@user/noctux)
[08:58:04] *** Joins: elcaro (~anonymous@45.32.191.75)
[08:58:04] *** Joins: Vq (~vq@90-227-195-41-no77.tbcn.telia.com)
[08:58:04] *** Joins: mrus (~mrus@149.28.224.172)
[08:58:04] *** Joins: wanko (~wanko@51.15.4.226)
[08:58:04] *** Joins: ChanServ (ChanServ@services.libera.chat)
[08:58:04] *** strontium.libera.chat sets mode: +o ChanServ
[08:58:13] *** Quits: koolazer (~koo@user/koolazer) (Max SendQ exceeded)
[08:58:15] *** Quits: on^ (~on@68.101.58.90) (Max SendQ exceeded)
[08:58:15] *** Quits: shailangsa (~shailangs@host86-186-142-82.range86-186.btcentralplus.com) (Max SendQ exceeded)
[08:58:24] *** Quits: AndrewYu (~andrew@user/andrewyu) (Max SendQ exceeded)
[08:58:26] *** Quits: wolfshappen (~waff@irc.furworks.de) (Max SendQ exceeded)
[08:58:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Max SendQ exceeded)
[08:58:26] *** Quits: 078AACR81 (~d34df00d@2600:1700:8c60:3a10::48) (Excess Flood)
[08:58:27] *** Quits: zopsi (~zopsi@irc.dir.ac) (Max SendQ exceeded)
[08:58:28] *** Joins: AndrewYu (~andrew@user/andrewyu)
[08:58:28] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[08:58:36] *** Joins: koolazer (~koo@user/koolazer)
[08:58:52] *** geekosaur is now known as Guest1121
[08:58:57] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Ping timeout: 256 seconds)
[08:59:20] *** Joins: on^ (~on@68.101.58.90)
[08:59:21] *** Quits: litharge (litharge@libera/bot/litharge) (Remote host closed the connection)
[08:59:24] *** Joins: litharge (litharge@libera/bot/litharge)
[08:59:28] *** Joins: wolfshappen (~waff@irc.furworks.de)
[08:59:50] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[09:00:02] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (Ping timeout: 240 seconds)
[09:00:05] *** Quits: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f) (Ping timeout: 250 seconds)
[09:00:06] *** Quits: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248) (Ping timeout: 250 seconds)
[09:00:06] *** Quits: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a) (Ping timeout: 250 seconds)
[09:00:39] *** Quits: glider (~glider@user/glider) (Ping timeout: 256 seconds)
[09:00:47] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 268 seconds)
[09:01:16] *** Quits: carbolymer (~carbolyme@dropacid.net) (Remote host closed the connection)
[09:01:26] *** Joins: glider (~glider@user/glider)
[09:01:53] *** Joins: carbolymer (~carbolyme@dropacid.net)
[09:02:37] *** Joins: hook54321 (sid149355@user/hook54321)
[09:04:17] *** Joins: iammrinal0[m] (~iammrinal@2001:470:69fc:105::1:2248)
[09:04:54] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[09:04:59] *** Joins: ppseafield[m] (~elementpp@2001:470:69fc:105::1:250a)
[09:05:01] *** Joins: fsckskye[m] (~kmatrixth@2001:470:69fc:105::1:3b2f)
[09:06:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:07:33] *** Quits: Hafydd (~Hafydd@user/hafydd) (*.net *.split)
[09:07:33] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[09:07:33] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[09:07:33] *** Quits: In0perable (~PLAYER_1@fancydata.science) (*.net *.split)
[09:07:33] *** Quits: Square (~a@user/square) (*.net *.split)
[09:07:33] *** Quits: mht-wtf (~mht@mht.wtf) (*.net *.split)
[09:07:33] *** Quits: remedan (~remedan@balak.me) (*.net *.split)
[09:07:33] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[09:07:33] *** Quits: nf (~n@monade.li) (*.net *.split)
[09:07:33] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (*.net *.split)
[09:07:33] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (*.net *.split)
[09:07:33] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (*.net *.split)
[09:07:33] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[09:07:33] *** Quits: soft (~soft@2001:470:69fc:105::c75) (*.net *.split)
[09:07:33] *** Quits: asdofindia-m (~akshaymat@2001:470:69fc:105::831) (*.net *.split)
[09:07:33] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (*.net *.split)
[09:07:33] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (*.net *.split)
[09:07:33] *** Quits: utk (~utk@2001:470:69fc:105::1:2fe0) (*.net *.split)
[09:07:33] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[09:07:33] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (*.net *.split)
[09:07:33] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (*.net *.split)
[09:07:33] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (*.net *.split)
[09:07:33] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (*.net *.split)
[09:07:33] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (*.net *.split)
[09:07:33] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (*.net *.split)
[09:07:33] *** Quits: root1 (root@2600:3c02::f03c:92ff:fe1a:c779) (*.net *.split)
[09:07:33] *** Quits: |beowulf| (1000@sourcemage/mage/beowulf) (*.net *.split)
[09:07:33] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[09:07:34] *** Quits: absence (~absence@hildring.pvv.ntnu.no) (*.net *.split)
[09:07:34] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[09:07:34] *** Quits: kawpuh (~kawpuh@66.42.81.80) (*.net *.split)
[09:07:34] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[09:07:34] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[09:07:34] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (*.net *.split)
[09:07:34] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[09:07:40] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[09:07:42] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[09:07:42] *** Joins: byorgey (~byorgey@155.138.238.211)
[09:07:44] *** Joins: PigDude (~PigDude@159.203.16.199)
[09:07:47] *** Joins: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[09:07:50] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[09:07:51] *** Joins: drewolson (~drewolson@user/drewolson)
[09:07:53] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[09:07:54] *** Joins: root1 (root@2600:3c02::f03c:92ff:fe1a:c779)
[09:07:55] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[09:08:05] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[09:08:05] *** Joins: Hafydd (~Hafydd@owlchat.newnet.net)
[09:08:07] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[09:08:09] *** Joins: |beowulf| (1000@gabilgathol.bandrate.org)
[09:08:12] *** Quits: Hafydd (~Hafydd@owlchat.newnet.net) (Signing in (Hafydd))
[09:08:12] *** Joins: Hafydd (~Hafydd@user/hafydd)
[09:08:17] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[09:08:19] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[09:08:24] *** Joins: SoF (~skius@user/skius)
[09:08:26] *** Joins: remedan (~remedan@balak.me)
[09:08:31] *** Joins: nf (~n@monade.li)
[09:08:43] *** |beowulf| is now known as Guest2359
[09:09:30] *** Joins: yauhsien_ (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[09:09:34] *** Joins: asdofindia-m (~akshaymat@2001:470:69fc:105::831)
[09:10:21] *** Joins: Square (~a@user/square)
[09:10:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[09:11:24] *** Joins: genieliu (~genieliu@103.37.140.38)
[09:11:29] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[09:12:13] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[09:12:14] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[09:13:16] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[09:14:07] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[09:15:15] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[09:15:21] *** Quits: yauhsien_ (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[09:15:45] *** Quits: xff0x (~xff0x@2001:1a81:5269:5600:e5f5:ee22:f6bb:9023) (Ping timeout: 252 seconds)
[09:16:14] *** Joins: kadoban (~kadoban@user/kadoban)
[09:16:28] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[09:16:36] *** Joins: xff0x (~xff0x@2001:1a81:5269:5600:c51f:ff7b:f3d8:91b6)
[09:16:37] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[09:16:46] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[09:16:47] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[09:16:53] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[09:16:56] *** Joins: utk (~utk@2001:470:69fc:105::1:2fe0)
[09:17:15] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[09:18:06] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[09:19:01] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 240 seconds)
[09:20:28] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[09:20:28] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[09:20:28] *** Quits: stilgart_ (~Christoph@chezlefab.net) (*.net *.split)
[09:20:28] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[09:20:28] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[09:20:28] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[09:20:28] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (*.net *.split)
[09:20:28] *** Quits: jassob (~jassob@h-98-128-166-172.NA.cust.bahnhof.se) (*.net *.split)
[09:20:28] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (*.net *.split)
[09:20:28] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (*.net *.split)
[09:20:28] *** Quits: quantum (~quantum@user/quantum/x-8556232) (*.net *.split)
[09:20:28] *** Quits: siraben (~siraben@user/siraben) (*.net *.split)
[09:20:28] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (*.net *.split)
[09:20:28] *** Quits: acco[m] (~accotedom@2001:470:69fc:105::1:3236) (*.net *.split)
[09:20:28] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (*.net *.split)
[09:20:28] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (*.net *.split)
[09:20:28] *** Quits: kosmikus[m] (~andresloe@2001:470:69fc:105::95d) (*.net *.split)
[09:20:28] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (*.net *.split)
[09:20:28] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (*.net *.split)
[09:20:28] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (*.net *.split)
[09:20:28] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (*.net *.split)
[09:20:28] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (*.net *.split)
[09:20:28] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[09:20:28] *** Quits: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy) (*.net *.split)
[09:20:29] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[09:20:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[09:20:29] *** Quits: swistak (~swistak@185.21.216.141) (*.net *.split)
[09:20:29] *** Quits: noctuks (dzDZscEp9m@user/noctux) (*.net *.split)
[09:20:29] *** Quits: elcaro (~anonymous@45.32.191.75) (*.net *.split)
[09:20:29] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[09:20:29] *** Quits: mrus (~mrus@149.28.224.172) (*.net *.split)
[09:20:29] *** Quits: wanko (~wanko@51.15.4.226) (*.net *.split)
[09:20:36] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[09:20:37] *** Joins: wanko (~wanko@51.15.4.226)
[09:20:37] *** Joins: elcaro (~anonymous@45.32.191.75)
[09:20:40] *** Joins: swistak (~swistak@185.21.216.141)
[09:20:42] *** Joins: stilgart (~Christoph@chezlefab.net)
[09:20:46] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[09:20:51] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[09:20:51] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[09:20:51] *** Joins: jassob (~jassob@h-98-128-166-172.NA.cust.bahnhof.se)
[09:20:52] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[09:20:56] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[09:20:59] *** Joins: noctuks (RIj3X4Rlia@karif.server-speed.net)
[09:21:04] *** Joins: bw (sid2730@user/betawaffle)
[09:21:06] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[09:21:10] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[09:21:14] *** Joins: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy)
[09:21:14] *** Quits: noctuks (RIj3X4Rlia@karif.server-speed.net) (Signing in (noctuks))
[09:21:14] *** Joins: noctuks (RIj3X4Rlia@user/noctux)
[09:21:18] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[09:21:19] *** Joins: obviyus (sid415299@id-415299.uxbridge.irccloud.com)
[09:21:22] *** Quits: obviyus (sid415299@id-415299.uxbridge.irccloud.com) (Changing host)
[09:21:22] *** Joins: obviyus (sid415299@user/obviyus)
[09:21:27] *** Joins: raoul (~raoul@95.179.203.88)
[09:21:30] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[09:21:36] *** Joins: mrus (~mrus@149.28.224.172)
[09:21:50] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[09:22:15] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[09:22:21] *** Quits: stevenxl (~stevenlei@174.128.182.152) (Ping timeout: 252 seconds)
[09:22:40] *** Joins: siraben (~siraben@user/siraben)
[09:23:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[09:23:18] *** Joins: a1paca (~a1paca@user/a1paca)
[09:23:28] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[09:23:28] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[09:25:44] *** Joins: Vq (~vq@90-227-195-41-no77.tbcn.telia.com)
[09:26:38] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[09:26:41] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[09:26:42] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[09:26:43] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[09:26:44] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[09:26:45] *** Joins: acco[m] (~accotedom@2001:470:69fc:105::1:3236)
[09:26:46] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[09:26:46] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[09:26:47] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[09:28:26] *** Joins: genieliu (~genieliu@103.37.140.24)
[09:29:09] *** Joins: kosmikus[m] (~andresloe@2001:470:69fc:105::95d)
[09:29:31] *** Joins: fef (~thedawn@user/thedawn)
[09:30:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:30:16] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[09:31:37] *** Joins: deadmarshal (~deadmarsh@95.38.119.139)
[09:35:53] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[09:37:32] *** Quits: xff0x (~xff0x@2001:1a81:5269:5600:c51f:ff7b:f3d8:91b6) (Ping timeout: 240 seconds)
[09:38:15] *** Joins: shailangsa (~shailangs@host86-186-142-82.range86-186.btcentralplus.com)
[09:38:49] *** Joins: xff0x (~xff0x@2001:1a81:5269:5600:91e5:b69c:2cfa:3fc5)
[09:42:43] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:46:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[09:46:33] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[09:46:37] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:49:58] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[09:50:29] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[09:50:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[09:51:59] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[09:53:14] *** Quits: xff0x (~xff0x@2001:1a81:5269:5600:91e5:b69c:2cfa:3fc5) (Ping timeout: 265 seconds)
[09:54:00] *** Joins: xff0x (~xff0x@2001:1a81:5269:5600:a7f2:d756:85f3:34a8)
[09:55:21] *** Quits: deadmarshal (~deadmarsh@95.38.119.139) (Ping timeout: 252 seconds)
[09:55:38] *** Joins: deadmarshal (~deadmarsh@95.38.229.189)
[09:58:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[10:06:31] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:11:30] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[10:15:53] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[10:19:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[10:22:31] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:9dad:b7eb:58e3:98e6) (Quit: gone to sleep. ZZZzzz…)
[10:29:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[10:32:25] *** Joins: michalz (~michalz@185.246.204.40)
[10:36:28] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[10:37:56] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[10:40:01] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:6993:39fb:9bc8:e953)
[10:40:07] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 265 seconds)
[10:43:23] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:39f3:76e9:9ca1:32bd) (Ping timeout: 252 seconds)
[10:45:05] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[10:45:40] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[10:49:09] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[10:50:33] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[10:53:39] *** Quits: deadmarshal (~deadmarsh@95.38.229.189) (Ping timeout: 265 seconds)
[10:55:47] *** Joins: genieliu (~genieliu@103.37.140.38)
[10:56:39] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[11:00:10] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:01:06] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[11:01:18] *** Joins: deadmarshal (~deadmarsh@95.38.229.189)
[11:04:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:04:27] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:04:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:06:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:06:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:07:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:08:26] *** Quits: xff0x (~xff0x@2001:1a81:5269:5600:a7f2:d756:85f3:34a8) (Ping timeout: 268 seconds)
[11:08:39] *** Joins: notzmv (~zmv@user/notzmv)
[11:09:15] *** Joins: xff0x (~xff0x@2001:1a81:5269:5600:2d41:b802:44a7:1f0c)
[11:09:52] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[11:10:39] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:14:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:15:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:16:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:17:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:17:29] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[11:20:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[11:22:23] *** Quits: famubu (~famubu@user/famubu) (Ping timeout: 256 seconds)
[11:22:42] *** Joins: chele (~chele@user/chele)
[11:23:07] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:23:25] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:23:56] *** Joins: jtomas (~jtomas@212.117.18.99)
[11:24:22] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[11:25:33] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Ping timeout: 252 seconds)
[11:25:41] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:26:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:29:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:34:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:36:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:36:55] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:37:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:38:13] *** Quits: deadmarshal (~deadmarsh@95.38.229.189) (Ping timeout: 240 seconds)
[11:38:30] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:41:07] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[11:41:09] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:6538:452b:466b:b6bb)
[11:43:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:43:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:45:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:45:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:49:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:56:25] *** Joins: cfricke (~cfricke@user/cfricke)
[11:59:06] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[11:59:26] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[12:01:32] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:02:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:11:03] *** Quits: coolnickname (~coolnickn@73.194.7.51.dyn.plus.net) (Ping timeout: 256 seconds)
[12:12:08] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:12:34] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:12:39] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:13:33] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[12:13:56] <senoraraton> Are there settings for cabal that I can change the default program Main.hs that it creates?
[12:14:35] <merijn> senoraraton: Yes
[12:14:45] <merijn> Or rather, I guess it depends what you mean? :p
[12:15:11] <merijn> Do you mean change "what is the main module?" or "change the contents of the generated one?"
[12:15:42] <senoraraton> I don't want it to print "Hello, Haskell!" I want it to print "Hack the Planet!"
[12:16:20] <senoraraton> The one that Cabal generates.  It would also be nice to rename the app directory to src.
[12:16:30] <merijn> Pretty sure you can't change that. Also pretty sure that seems rather pointless?
[12:17:35] *** Joins: yauhsien (~yauhsien@2402:7500:4e5:d897:1821:b278:c264:a86f)
[12:17:45] <senoraraton> I have my reasons.
[12:18:06] * dminuoso stares
[12:18:24] <dminuoso> Feel free to fork cabal, and make the modifications.
[12:18:38] <merijn> Pretty much that, yeah
[12:18:42] <arahael> Or write a wrapper.
[12:18:57] <merijn> I doubt there's any interest to integrate anything like that into cabal-install
[12:18:57] <arahael> (Pretty much as stack did)
[12:19:21] <dminuoso> In the grand scheme of things, setting up a project is a one-time thing that occurs relatively rarely.
[12:19:40] <dminuoso> I'd rather the cabal maintainers spend their previous time on features that are relevant to the actual workload of haskell development.
[12:19:56] <senoraraton> Well, it is quite clear that you and I have different priorties!
[12:20:00] <dminuoso> It is.
[12:20:05] *** Joins: famubu (~famubu@14.139.174.50)
[12:20:15] <dminuoso> s/previous/precious/
[12:21:41] <lortabac> senoraraton: at my previous job we had our own scaffolding scripts, since we used microservices we created new projects quite often
[12:22:05] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:22:09] <lortabac> senoraraton: it's probably easier than forking cabal
[12:23:07] <merijn> I mean, you can just manually modify the generated files however you want, turn them into some kinda "template repo" and just use that to initialise projects instead of cabal-install...
[12:23:15] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[12:24:16] <lortabac> merijn: yes, that's more or less what we did, plus a bash script to replace the name and a couple of settings
[12:26:20] <senoraraton> I wrote a bash script that just does the cabal setup, then it replaces the text.  Was fairly trivial, I mostly wanted to know about cabal settings and if it was configurable.
[12:26:47] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Quit: Lost terminal)
[12:27:33] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 256 seconds)
[12:29:05] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:29:52] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[12:30:09] *** Quits: PotatoHatsue (~berberman@2001:470:69fc:105::b488) (Quit: You have been kicked for being idle)
[12:30:09] *** Quits: Deewiant (~deewiant@2001:470:69fc:105::2fd3) (Quit: You have been kicked for being idle)
[12:30:33] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:30:33] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[12:31:25] *** Quits: jtomas (~jtomas@212.117.18.99) (Ping timeout: 240 seconds)
[12:32:43] *** Joins: jtomas (~jtomas@212.117.18.99)
[12:38:53] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:42:08] *** Joins: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi)
[12:45:54] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[12:47:42] *** Quits: Guest1121 (~geekosaur@069-135-003-034.biz.spectrum.com) (Remote host closed the connection)
[12:48:04] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:49:32] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:49:49] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:53:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:56:18] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[13:05:29] *** Quits: on^ (~on@68.101.58.90) (Remote host closed the connection)
[13:07:51] *** Quits: yauhsien (~yauhsien@2402:7500:4e5:d897:1821:b278:c264:a86f) (Ping timeout: 252 seconds)
[13:09:38] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[13:09:39] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:10:02] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 240 seconds)
[13:10:39] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[13:12:19] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[13:14:49] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[13:15:59] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[13:18:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:22:02] *** Joins: dsrt^ (~dsrt@68.101.58.90)
[13:23:37] *** Joins: robosexual (~spaceoyst@5.167.241.206)
[13:26:21] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:28:14] <merijn> hmm
[13:28:44] <merijn> Is there something that somehow combines mapM and intercalate to run something in between each element? I guess not...
[13:29:25] <dminuoso> https://hackage.haskell.org/package/monadlist-0.0.2/docs/Control-Monad-ListM.html#v:intercalateM
[13:29:28] <dminuoso> Mmm
[13:29:31] <dminuoso> Should be easy to carve out. :)
[13:29:46] <dminuoso> Also
[13:29:48] <dminuoso> https://hackage.haskell.org/package/semigroupoids-5.3.6/docs/Data-Semigroup-Foldable.html#v:intercalateMap1
[13:30:05] <dminuoso> Given that semigroupoids is so ubiquitous, you might have access to that already.
[13:30:29] <dminuoso> Ah, but its for Foldable1 only
[13:30:54] <merijn> hmm
[13:31:22] <dminuoso> merijn: Id just use sequence + intercalate
[13:31:25] <merijn> I'm happy with none of this >.> Maybe I'll just do map + intercalate followed by sequence
[13:31:28] <dminuoso> Plus some map
[13:31:32] <dminuoso> Yeah
[13:32:26] <dminuoso> Optics question, I want something like `itoFold :: IxFold i s a -> Fold s (i, a)`, does that exist?
[13:34:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:34:34] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e18cc88fab5aa5aa2cc.dip0.t-ipconnect.de)
[13:34:46] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:34:53] <merijn> Wait, it's intersperse, not intercalate :p
[13:34:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[13:35:41] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[13:36:49] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 252 seconds)
[13:38:34] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:39:01] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:39:53] *** Lord_of_Life_ is now known as Lord_of_Life
[13:41:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[13:42:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:42:57] <merijn> ugh...I had a neat combinator for unioning a bunch of maps while checking for duplicates
[13:42:58] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[13:43:07] <merijn> But I can't find it in my own code >.>
[13:45:01] *** Quits: jtomas (~jtomas@212.117.18.99) (Ping timeout: 240 seconds)
[13:45:37] *** Quits: xff0x (~xff0x@2001:1a81:5269:5600:2d41:b802:44a7:1f0c) (Ping timeout: 252 seconds)
[13:46:27] *** Joins: xff0x (~xff0x@2001:1a81:5269:5600:97b6:69e2:8ab7:379a)
[13:47:39] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[13:49:05] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[13:50:14] <[exa]> merijn: it's probably `traverse` anyway
[13:50:44] <merijn> Naah, sequence + fold + unionWith or something along those lines
[13:51:07] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 252 seconds)
[13:51:59] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:52:20] <merijn> dminuoso: ah, fuck, map + intersperse doesn't work
[13:52:35] <merijn> dminuoso: Because it's parsers
[13:52:49] <merijn> And I don't care about the interspersed type
[13:54:12] <merijn> The alternative is some form of map that modifies "all but the last" element of a list :\
[13:54:20] <merijn> Why this gotta be so ugly? >.<
[13:55:21] <dminuoso> merijn: why doesnt that work?
[13:55:34] <merijn> dminuoso: Because the intersperse parser is the wrong type
[13:55:57] <dminuoso> Huh?
[13:56:18] <merijn> dminuoso: I have a bunch of parser to run (in a list) and wanna run another one in between each
[13:56:23] <merijn> So, kinda like, sepBy
[13:56:54] <merijn> Except, sepBy doesn't work because I have a specific, finite few parsers to run, not arbitrarily many repeats
[13:57:25] <merijn> So I guess I have to hand-write some custom sepBy-like combinator :\
[13:58:43] <merijn> Well, I guess I was already doing that, but there seems to be no elegant/convenient way :\
[13:59:09] <halides>  https://paste-bin.xyz/20684 why do i need to paren the z-2?
[13:59:50] <merijn> halides: Because prefix function application is higher precedence then operators
[14:00:35] <merijn> halides: How else would you distinguish '(f z) - (2 3)' from 'f (z-2) 3' or any other bracketing you can think off?
[14:01:23] <halides> ok, so just precedence, thanks :-)
[14:01:27] *** Joins: jtomas (~jtomas@212.117.18.99)
[14:02:42] *** Quits: maerwald (~maerwald@user/maerwald) (Quit: gone)
[14:03:23] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[14:04:40] *** Joins: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:04:46] *** Quits: maerwald (~maerwald@mail.hasufell.de) (Changing host)
[14:04:46] *** Joins: maerwald (~maerwald@user/maerwald)
[14:04:46] *** Joins: darchitect (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[14:05:06] <darchitect> greetings
[14:08:14] *** Joins: xsebek (~xsebek@217.196.215.202)
[14:09:23] <xsebek> Does anyone know how to get power function for the "matrix" in linear package?
[14:10:01] <xsebek> I am looking for V n (V n a) -> Int -> V n (V n a) that would be like the ^ from Prelude
[14:15:00] <xsebek> The Num instance only multiplies elements pair wise, but not the "matrix" :/
[14:16:50] <jackdk> xsebek: first answer would be to build something out of `(!*!)` using iterated mutliplication, then rewrite with repeated squaring. Let me see if I can find a better answer
[14:18:04] <phaazon> anyone has an input for AoC day 4?
[14:18:12] <phaazon> (and expected output)
[14:20:34] <xsebek> jackdk: that is what I did for AoC today, but getting it for free would be nice :)
[14:21:01] *** Joins: genieliu (~genieliu@103.37.140.38)
[14:21:11] <jackdk> I don't have a better answer for you sorry
[14:21:15] *** Joins: Guest|46 (~Guest|46@188.27.78.223)
[14:22:22] <dminuoso> Is there some extension that lets me have two classes with duplicate method names in the same file?
[14:22:23] *** Quits: Guest|46 (~Guest|46@188.27.78.223) (Client Quit)
[14:23:02] * [exa] tries googling for -XOverloadedOverlads
[14:23:15] <dminuoso> Reason Im asking is Im generating classy lenses with optics, and I have something like `data Foo ...` and `data Bar = { foo :: Foo ... }` in the same file, and generating classy lenses for both will cause both generated classes to have some `foo` method
[14:24:07] <xsebek> jackdk: thanks anyway, I just wanted to make sure I did not miss something obvious :)
[14:25:49] *** Quits: genieliu (~genieliu@103.37.140.38) (Ping timeout: 240 seconds)
[14:29:20] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[14:33:21] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 256 seconds)
[14:34:30] *** Joins: genieliu (~genieliu@103.37.140.24)
[14:36:19] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[14:41:10] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[14:41:28] *** Joins: xkuru (~xkuru@user/xkuru)
[14:41:47] *** Quits: jtomas (~jtomas@212.117.18.99) (Ping timeout: 265 seconds)
[14:48:54] *** Joins: ubert (~Thunderbi@p200300ecdf0ba2cae6b318fffe838f33.dip0.t-ipconnect.de)
[14:49:57] <dminuoso>     • An_AffineTraversal cannot be composed with A_Lens
[14:50:01] <dminuoso> Mmm.
[14:50:52] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:51:15] <dminuoso>     • An_AffineTraversal cannot be composed with An_AffineTraversal
[14:51:20] <dminuoso> Wonderful, I think Im tripping up optics here
[14:52:20] *** Quits: darchitect (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Remote host closed the connection)
[14:52:33] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[14:53:25] *** Quits: xsebek (~xsebek@217.196.215.202) (Ping timeout: 240 seconds)
[14:55:38] *** Joins: darchitect (~darchitec@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[14:56:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:56:51] <darchitect> hey guys, do you think "TheHaskellBook" is the best book on haskell ?
[14:57:09] <darchitect> in terms of a full grasp of the language, not just beginner stuff ..
[14:58:08] <dminuoso> No.
[14:58:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:58:25] <dminuoso> I dont think "the best book" exists on any given subject.
[14:58:43] <dminuoso> Books target particular audiences, and opinions tend to vary.
[14:58:47] <darchitect> yeah, of course, you're right 
[14:59:28] <darchitect> I guess I meant -> the best book for the language details as an overall "bible" similar to the "C++ Language" by Stroustrup
[14:59:39] <darchitect> or the "C_Progrmaming_Language" 
[14:59:50] <dminuoso> There's no bible in Haskell
[15:00:02] <dminuoso> Well, for language details, look at the Haskell Report
[15:00:19] <dminuoso> Compared to C or C++, it's a very approachable and readable language standard.
[15:00:27] <dminuoso> Even for beginners it can work
[15:00:58] <dminuoso> But that will not teach you about how to solve problems or idiomatic solutions to problems.
[15:00:59] <darchitect> makes sense
[15:01:24] <dminuoso> There's a select few popular picks in niche topics
[15:01:24] <darchitect> I also find a big blog "What I wish I knew.." etc.. 
[15:01:30] <darchitect> that + the report will do for now I gues
[15:01:47] *** Joins: kuribas (~user@ptr-25vy0i7z7uknhuz4b8c.18120a2.ip6.access.telenet.be)
[15:01:53] <dminuoso> Like, for type level programming Thinking with Types by Sandy Maguire is received relatively well by the Haskell community
[15:02:29] <dminuoso> But whether type level programming is a good idea is another topic altogether.
[15:02:56] <dminuoso> darchitect: to me personally, browsing GHC source code helped me get a lot of ideas. :)
[15:03:00] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[15:03:04] <dminuoso> Few things beat the real world experience.
[15:03:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:03:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:04:53] <darchitect> dminuoso: true that
[15:05:12] <kuribas> IMO type level programming is over used, and proper abstractions (Applicative/Monoid/...) underused.
[15:08:15] <kuribas> darchitect: if you "really" want to do type level programming, look at dependent types.
[15:08:27] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:09:33] <kuribas> In the end, a Type Family is just a type level function.
[15:09:35] <dminuoso> kuribas: I think you're talking orthogonally to the subject of the discussion.
[15:09:36] <Rembane> Idris and Agda are more ergonomic for type level programming than Haskell is. 
[15:09:46] * Rembane joins the orthogonals 
[15:09:52] <kuribas> dminuoso: could be, I just jumped in and I miss context :)
[15:10:02] <dminuoso> kuribas: I just brought up that book to talk about a book, this isn't even about type level programming.
[15:10:10] <darchitect> thanks guys, I am a bit on the imperative side of the spectrum in terms of mindset atm, but I will look into it 
[15:10:18] <kuribas> dminuoso: oh right
[15:10:42] <darchitect> I love haskell 
[15:10:53] <dminuoso> darchitect: For learning Haskell, I'm personally quite fond of CIS194 (both Joachim Breitners version as well as Brent Yorgeys)
[15:11:00] <darchitect> but it does take its time to get to grips with 
[15:11:04] <dminuoso> So depending on what kind of list you're building, perhaps add it as well.
[15:11:11] <dminuoso> CIS194 generally is well regarded as well
[15:11:19] *** Quits: famubu (~famubu@14.139.174.50) (Ping timeout: 256 seconds)
[15:11:29] <kuribas> it seems to be missing transformers...
[15:11:29] <dminuoso> It's a different approach than The Haskell Book, as its a uni course, but with well designed examples that build up on each other
[15:11:43] <Rembane> darchitect: Also! Remember that you can come back here and ask questions! :)
[15:13:12] <dminuoso> • A_Lens cannot be composed with A_Lens
[15:13:18] <dminuoso> Hah, this is the perfect one now!
[15:13:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:13:50] <darchitect> maaate I think CIS194 is exactly what I'm looking for
[15:14:08] <kuribas> darchitect: one of the biggest advantages of learning FP is getting rid of global state.
[15:14:13] *** Joins: jtomas (~jtomas@212.117.18.99)
[15:14:22] <kuribas> darchitect: you can use the FP mindset also when programming in imperative languages.
[15:14:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:14:40] <kuribas> In our company, all our java code uses immutability by default.
[15:15:00] <kuribas> It makes everything easier to reason about.
[15:15:02] <darchitect> kuribas: yeah deffinitely, I work as an ML engineer atm and have used partial functions (currying) in many occasions (to the amazement of colleagues :) )
[15:16:08] <dminuoso> By ML engineer, do you mean it in the sense of SML? Or machine learning?
[15:18:21] <darchitect> machine learning
[15:18:40] <darchitect> we do most things in Python as you may presume
[15:18:48] <darchitect> we do most things in Python as you may have guessed *
[15:19:43] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:19:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:20:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:22:02] *** Quits: shailangsa (~shailangs@host86-186-142-82.range86-186.btcentralplus.com) ()
[15:25:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:25:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:28:37] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:28:46] <Logio> functional programming in Python tends to make me feel like I'm in a cargo cult, hoping for correctness to emerge from the heavens 
[15:29:41] <Logio> "if a use @dataclass here, a type annotation there, and curry my functions, then maybe some day my programs will be composable"
[15:30:01] <Logio> but they never are in Python :(
[15:30:06] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:30:42] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[15:30:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:31:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:31:08] *** Quits: Hecate (~mariposa@user/hecate) (Remote host closed the connection)
[15:31:10] <kuribas> and lambda's are broken in Python
[15:32:29] <sshine> broken?
[15:33:33] <kuribas> like you cannot do statements in lambdas.
[15:33:45] <sshine> Logio, composability isn't as valuable in languages that don't allow for high-level AST transforms, I think... otherwise I'm sure the extra wrapping causes eventual overhead that people will argue is bad.
[15:34:15] *** Joins: aman (~aman@user/aman)
[15:34:28] <kuribas> It's just like Python puts arbitrary limitations on things, and calls it "discipline".
[15:35:10] <kuribas> And then has counter productive community standards.
[15:35:12] <sshine> Logio, I seem to recall that even OCaml programmers will historically not use the composition operator (but I think the mentality has somewhat changed with flambda).
[15:35:26] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[15:35:53] <sshine> kuribas, I suppose it does require discipline to be both arbitrary and consistent. :-P
[15:36:07] <kuribas> sshine: that's one way to look at it :)
[15:37:07] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[15:39:39] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 252 seconds)
[15:41:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:42:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:47:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:48:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:42] *** Joins: pfurla (~pfurla@201.17.118.230)
[15:53:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:53:32] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:53:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:56:00] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[15:57:04] *** Joins: rembo10 (~rembo10@remulis.com)
[15:59:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[15:59:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:00:16] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:00:51] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[16:05:43] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:07:01] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[16:09:00] *** Joins: famubu (~famubu@14.139.174.50)
[16:09:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[16:10:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:12:18] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:13:01] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[16:18:51] <merijn> hmm, Vector doesn't have a modify function that returns the old value?
[16:23:06] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[16:23:35] <[exa]> why such function though?
[16:23:49] *** Joins: unyu (~pyon@user/pyon)
[16:23:50] <dminuoso> glguy: Question, is there a particular reason config-schema uses * rather than -?
[16:24:33] <merijn> [exa]: For the same reason nearly all Var/Ref types have one? Because an "update and get old (and/or new) value" is very useful?
[16:24:49] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[16:24:59] <[exa]> you mean for MVector?
[16:25:12] <dminuoso> modify f (New p) = New (do { v <- p; f v; return v })
[16:25:18] <dminuoso> Seems like you can trivially build your own
[16:25:22] <merijn> Well, any vector, really
[16:25:26] <merijn> dminuoso: Well yes
[16:25:34] <merijn> but I don't want to if I don't have too >.<
[16:26:11] *** Joins: hololeap (~hololeap@user/hololeap)
[16:26:15] <merijn> dminuoso: It seems weird to have 'modifyM :: Vector a -> (a -> a) -> m ()', it's strictly less useful than the one returning 'm a'
[16:27:19] <hpc> also not naming it modifyM_ makes it hard to add the return-y version
[16:28:03] <merijn> In general there doesn't seem to be an "update a single value" function for immutable vector, which is also annoying
[16:29:02] <merijn> The closest thing is 'modify :: Unbox a => (forall s. MVector s a -> ST s ()) -> Vector a -> Vector a'
[16:29:36] *** Quits: famubu (~famubu@14.139.174.50) (Changing host)
[16:29:36] *** Joins: famubu (~famubu@user/famubu)
[16:29:38] <merijn> I just wanna increment a single index and get the result >.>
[16:30:47] <merijn> Have to manually index, then do bulk update, bah
[16:30:51] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[16:31:50] <[exa]> merijn: for mutable vector there is `exchange` but not sure if that's there for normal vectors
[16:33:11] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:41:39] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:43:17] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[16:44:02] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[16:47:26] *** Joins: darchite` (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[16:47:45] <darchite`> test
[16:48:58] *** Joins: ub (~Thunderbi@p200300ecdf0ba2ca3910be5e8791151b.dip0.t-ipconnect.de)
[16:49:15] <yushyin> passed
[16:49:22] <pragma-> how do you know?
[16:49:57] <yushyin> crystal ball
[16:51:15] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:51:27] *** Joins: __monty__ (~toonn@user/toonn)
[16:56:18] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:6538:452b:466b:b6bb) (Quit: WeeChat 2.8)
[16:56:22] <InternetCitizen> I was doing aoc day 4 and when it came to part 2 I wanted to use State to keep the last winning board and its drawn number as s 
[16:57:34] *** AlexNoo__ is now known as AlexNoo
[16:57:36] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 265 seconds)
[16:57:37] <InternetCitizen> does this sound like a good use of State or are there better ways of exressing this? The other options was just to construct the list of winning boards recursively and call last at the end
[16:59:33] <merijn> I'll let you know when my slacker ass finishes part 1 of day 4 xD
[17:00:40] <InternetCitizen> hahaha
[17:01:08] <merijn> \o/ it worked the first time!
[17:01:21] <merijn> Well, second time, because I didn't read carefully, but close enough
[17:01:37] <InternetCitizen> sweet, I had put a && instead of || 
[17:01:52] <InternetCitizen> took me a good couple of mins to realize
[17:01:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:02:23] <merijn> I did the product of unmarked squares, instead of product of last number and sum of unmarked squares :p
[17:02:49] <InternetCitizen> oh
[17:03:34] <merijn> I guess you could use State, but tbh, the 2nd one (like the first) seems a fairly straightforward fold
[17:03:50] <aplainzetakind> My Python implementation of the same solution for today is faster than the Haskell implementation. Is this normal because numpy is basically C or what?
[17:04:17] <merijn> aplainzetakind: That's impossible to say without seeing what your Haskell looks like
[17:04:44] <maerwald> naive python is sometimes faster than naive Haskell, but not that often
[17:04:46] <InternetCitizen> merijn: problem is I couldn't get it to work :Y I'm not too sure how State works that's why I wanted to jump on it
[17:04:52] <geekosaur> and other details, e.g. -fllvm on m1 macs will be slower than ncg on other platforms
[17:05:07] <aplainzetakind> merijn: https://gitlab.com/aplainzetakind/aoc2021/-/blob/master/Haskell/lib/AoC2021/Day06.hs
[17:05:11] <merijn> InternetCitizen: the best way to understand State is to reimplement it yourself, tbh
[17:05:21] <merijn> oh, I can't look at that xD
[17:05:27] <merijn> Spoilers :p
[17:05:39] <aplainzetakind> merijn: :)
[17:05:56] <merijn> InternetCitizen: https://gist.github.com/merijn/098106abd45c940dab09
[17:06:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[17:06:30] <merijn> InternetCitizen: Homework for understanding State is: Fill in the missing pieces :p
[17:07:06] <maerwald> aplainzetakind: how did you run the code?
[17:07:47] <maerwald> in ghci doesn't count
[17:08:09] <aplainzetakind> maerwald: Ran the executable built with cabal build -O2
[17:08:20] <aplainzetakind> And the measurement is done by criterion.
[17:08:22] <geekosaur> -O2 is not always an optimization
[17:08:52] <InternetCitizen> merijn: this is what I got https://paste.tomsmeding.com/m3lqvu7x
[17:08:59] <aplainzetakind> geekosaur: Sometimes it's counterproductive?
[17:09:03] <geekosaur> yes
[17:09:14] <aplainzetakind> Hmm.
[17:10:00] <geekosaur> usually it's no better than -O / -O1, sometimes it's worse
[17:11:15] <aplainzetakind> Is -O1 always an optimization then?
[17:11:20] <geekosaur> yes
[17:11:38] <merijn> InternetCitizen: That's missing a lot of context :)
[17:11:51] <geekosaur> -O1 is the optimizations that are well tested and work fairly well. -O2 is "optimizations" that sometinmes are optimizations but often aren't
[17:12:14] *** Joins: simendsjo (~user@84.211.91.241)
[17:12:26] <geekosaur> ghc manual strongly recommends -O1 last I checked, unless you have good reason to think the optimizations in -O2 will help your code
[17:12:50] <maerwald> have never seen O2 slowing down code, but I also don't test for that very often
[17:13:04] <aplainzetakind> Anyway, Same result with -O1.
[17:13:16] <geekosaur> it's not that common, like I said earlier usually it's no better than -O1
[17:14:22] <geekosaur> iirc the optimizations in -O1 are known to not have pessimal edge cases, the ones in -O2 have such cases
[17:14:36] <geekosaur> but also have other edge cases where they speed things up significantly
[17:15:13] *** Quits: jtomas (~jtomas@212.117.18.99) (Remote host closed the connection)
[17:15:36] <merijn> InternetCitizen: My (as usual) overengineered solution for day 4: https://github.com/merijn/AdventOfCode/blob/master/Day4.hs
[17:17:07] *** Quits: genieliu (~genieliu@103.37.140.24) (Ping timeout: 256 seconds)
[17:17:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:19:07] <geekosaur> but the real hit you take is -O2 takes a lot longer to compile, so you really want to benchmark to see if that extra hit is worth any gains you might get
[17:23:47] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 252 seconds)
[17:24:49] *** Joins: cheater (~Username@user/cheater)
[17:26:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[17:29:14] *** Quits: darchite` (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c) (Remote host closed the connection)
[17:30:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Ping timeout: 252 seconds)
[17:33:59] *** Joins: stevenxl (~stevenlei@174.128.182.55)
[17:36:34] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[17:36:51] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[17:37:40] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1572:52e4:1190:1c22)
[17:39:13] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[17:41:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[17:41:30] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[17:41:55] *** Joins: xkuru (~xkuru@user/xkuru)
[17:44:02] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[17:45:38] *** Joins: xsperry (~xs@user/xsperry)
[17:47:30] <__monty__> merijn: Where's the microbenchmarks though? : )
[17:48:02] <merijn> __monty__: Microbenchmarks are way to hard to do :p
[17:49:21] <dminuoso> Is there some more expressive way to write this small monadic code? https://gist.github.com/dminuoso/64e95c5284ca4a5bc7d81d93d349ddab
[17:50:18] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[17:50:48] <dminuoso> -- whenF :: Functor f => Bool -> (a -> a) -> f a -> f a
[17:50:54] <dminuoso> This would seem a bit awkward for a one-offf
[17:53:12] <geekosaur> yeh, I can think of ways to shorten it but I'm not sure they're clearer
[17:54:38] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 265 seconds)
[17:54:40] <dminuoso> The other idea Im playing with is making a separate `buildNodeSingleArpNd__ pr = fillArpNdVlanInterfaces <$> buildNodeSingle__ pr` binding, and then just write `if r then buildNodeSingleArpNd__ prec else buildNodeSingle__ prec`
[17:54:43] *** Joins: genieliu (~genieliu@111.193.167.10)
[17:54:56] <dminuoso> It's a bit longer but feels a bit more readable
[17:54:58] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Quit: Leaving)
[17:56:13] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[17:56:50] <byorgey> (if r then fmap fillArpNdVlanInterfaces else id) (buildNodeSingle__ prec)  ?
[17:57:17] <byorgey> dunno if that's better, just an idea
[17:58:17] <geekosaur> that was the main one I was thinking of. as I said, not sure it's more readable
[17:58:56] <byorgey> depends who's reading it I guess.
[17:59:01] *** Quits: famubu (~famubu@user/famubu) (Ping timeout: 240 seconds)
[17:59:34] <dminuoso> Oh I have a cunning plan!
[17:59:43] <kuribas> dminuoso: I like: whenMono :: Monoid m => Bool -> m -> m
[18:00:04] <dminuoso> https://gist.github.com/dminuoso/b3b77ce2e30f8b923b3c24eeeca9407f  geekosaur, byorgey. What do you think?
[18:00:22] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:00:24] <byorgey> oooooh, shiny
[18:00:48] <byorgey> dminuoso: I like it
[18:00:53] <kuribas> > let whenMono True m = m; whenMono False _ = mempty in \b f -> appEndo (whenMono b (Endo f))
[18:00:55] <lambdabot>  error:
[18:00:55] <lambdabot>      • No instance for (Typeable a0)
[18:00:55] <lambdabot>          arising from a use of ‘show_M87810610666469311768’
[18:01:00] <kuribas> :t let whenMono True m = m; whenMono False _ = mempty in \b f -> appEndo (whenMono b (Endo f))
[18:01:00] <lambdabot> Bool -> (a -> a) -> a -> a
[18:01:01] <geekosaur> I kinda don't like the duplication, but I'm not sure it's worth factoring away
[18:01:50] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[18:02:20] <dminuoso> You have to opt for the lesser evil here I think.
[18:02:54] <byorgey> :t let whenMono True m = m; whenMono False _ = mempty in \b -> fmap . appEndo . whenMono b . Endo
[18:02:55] <lambdabot> Functor f => Bool -> (b -> b) -> f b -> f b
[18:03:04] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[18:03:13] *** Joins: hololeap (~hololeap@user/hololeap)
[18:03:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[18:03:44] <dminuoso> kuribas: Well, I really want a whenMonoM then, so I can write `whenMonoM (has_fun_flag FunArpNdSuppress) buildNodeSingle__`
[18:03:51] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:04:20] <dminuoso> Though, the Endo is real overkill here.
[18:04:39] <dminuoso> At the end this is just the whenF I mentioned earlier
[18:04:46] <dminuoso> With just an overly elaborate implementation
[18:05:49] <kuribas> I wouldn't bother with something that trivial.
[18:06:06] <kuribas> Whatever comes up first is fine IMO.
[18:06:25] <kuribas> A bit of duplication cannot hurt.
[18:08:12] *** Joins: InternetCitizen (~fuzzypixe@tchebychev.ensimag.fr)
[18:09:55] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[18:13:00] *** Quits: InternetCitizen (~fuzzypixe@tchebychev.ensimag.fr) (Ping timeout: 265 seconds)
[18:18:43] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[18:18:50] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[18:18:57] *** Joins: slack1256 (~slack1256@191.125.99.212)
[18:19:11] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:19:49] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[18:20:18] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:20:18] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:20:18] *** Joins: wroathe (~wroathe@user/wroathe)
[18:21:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[18:21:30] *** Joins: max22- (~maxime@2a01cb0883359800374d9426cde47cad.ipv6.abo.wanadoo.fr)
[18:22:02] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:22:38] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[18:22:52] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:24:36] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[18:25:05] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e18cc88fab5aa5aa2cc.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[18:25:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:27:36] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[18:29:40] *** Quits: slack1256 (~slack1256@191.125.99.212) (Read error: Connection reset by peer)
[18:29:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:31:17] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[18:31:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:32:31] <hskpractice> is there any way to completely wipe the HLS caches? 
[18:33:08] <maerwald> ~/.cache/ghcide/
[18:33:26] <maerwald> or ~/.cache/hie-bios/
[18:33:29] <maerwald> I'm not sure
[18:33:44] <maerwald> tools get constantly renamed
[18:35:30] *** Joins: slack1256 (~slack1256@191.125.99.212)
[18:35:50] *** Joins: xsperry (~xs@cpe-188-129-101-182.dynamic.amis.hr)
[18:35:52] *** Quits: xsperry (~xs@cpe-188-129-101-182.dynamic.amis.hr) (Changing host)
[18:35:52] *** Joins: xsperry (~xs@user/xsperry)
[18:36:54] <boxscape> Hmm I'm writing a library that converts Haskell source code to Template Haskell and I'm wondering if there's any value in having a pure function `String -> Exp` instead of only functions in Q like `String -> Q Exp`
[18:37:03] <boxscape> both are very doable, though the latter is internally a bit cleaner
[18:37:03] <hskpractice> :) thanks, maerwald
[18:37:20] *** Joins: Hecate (~mariposa@163.172.211.189)
[18:37:44] *** Quits: Hecate (~mariposa@163.172.211.189) (Changing host)
[18:37:44] *** Joins: Hecate (~mariposa@user/hecate)
[18:37:52] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[18:40:54] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:40:54] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:40:54] *** Joins: wroathe (~wroathe@user/wroathe)
[18:42:40] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[18:45:12] <vaibhavsagar[m]> boxscape: `String -> Exp` is strictly more general, so if you only have one IMO it should be that one
[18:45:25] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[18:45:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[18:46:29] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:47:14] <boxscape> hmm, the difference is that with `String -> Exp` the names are dynamically bound once you use the Exp, whereas with `String -> Q Exp` I could look up the real names while constructing the Exp (and so you could figure out which package etc. they are from once it's constructed), so it's not strictly more general in that sense. Although you could always have a function `Exp -> Q Exp` that converts the first kind into the second...
[18:47:16] <dminuoso> boxscape: How do you make fresh names without Q?
[18:47:56] <boxscape> dminuoso: they're not fresh, I'm using mkName, so they're bound to whatever's around once you use the Exp
[18:48:21] <dminuoso> Ahh
[18:48:24] <dminuoso> Right
[18:49:08] <dminuoso> boxscape: Uh, but doesnt that thing already exist in form of `String -> Q Exp`?
[18:49:15] *** Quits: genieliu (~genieliu@111.193.167.10) (Ping timeout: 265 seconds)
[18:49:31] <dminuoso> I distinctly remember being able to feed GHCi with just arbitrary strings to figure out the TH representation equivkly
[18:49:37] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:50:00] <boxscape> dminuoso: As far as I can tell you have to write a wrapper around to be able to use it outside of GHCi, which is what I'm doing
[18:50:10] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:50:30] <dminuoso> % runQ [d| instance Functor [] where |] >>= print
[18:50:30] <yahb> dminuoso: [InstanceD Nothing [] (AppT (ConT GHC.Base.Functor) (ConT GHC.Types.[])) []]
[18:50:37] <dminuoso> % :t runQ [d| instance Functor [] where |]
[18:50:37] <yahb> dminuoso: Quasi m => m Language.Haskell.TH.Lib.Internal.Decs
[18:50:50] <boxscape> right, you didn't supply a String there though, you supplied a TH bracket
[18:51:42] <dminuoso> I wonder, is there no quasiquoter hidden inside that might be exported?
[18:52:15] <dminuoso> % runQ [| x + x |] >>= print
[18:52:15] <yahb> dminuoso: InfixE (Just (UnboundVarE x)) (VarE GHC.Num.+) (Just (UnboundVarE x))
[18:52:36] <boxscape> more or less what I'm doing is taking a string, wrapping it in "[d|...|]" or some other bracket, and then spinning up a GHC monad to parse that String and interpret it into template haskell
[18:52:45] <boxscape> with some AST massaging to prevent it from complain about names it can't find
[18:52:52] <dminuoso> Ah, without actual TH being invoked you mean
[18:52:54] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[18:52:56] <dminuoso> This is cute
[18:53:01] <boxscape> right
[18:53:23] <dminuoso> I do something similar in one of our projects, except its with haskell-src-exts-qq and using a quasiquoter
[18:53:39] <dminuoso> Benefit is being able to capture outside identifiers in the QQs
[18:54:05] <dminuoso> It's for module-level code generation
[18:54:29] <boxscape> something similar is also provided by haskell-src-meta - my main idea here was to see if I could use GHC's parser instead of relying on haskell-src-exts
[18:54:44] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:56:04] <dminuoso> Nice to know about haskell-src-meta
[18:56:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:58:13] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 240 seconds)
[19:00:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[19:00:38] *** Joins: zebrag (~chris@user/zebrag)
[19:01:58] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[19:03:17] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[19:03:48] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[19:03:57] *** Quits: stevenxl (~stevenlei@174.128.182.55) (Quit: leaving)
[19:04:17] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[19:05:58] <boxscape> Hm I think I can actually put in a reasonably nice way to abstract over the two approaches, so I suppose I'll provide both
[19:13:58] *** Joins: famubu (~famubu@14.139.174.50)
[19:15:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:22:51] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[19:24:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[19:26:56] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[19:27:54] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:28:08] <myShoggoth> HF Office Hours will start in an hour: https://www.twitch.tv/myshoggoth
[19:28:49] *** Quits: alx741 (~alx741@186.178.109.217) (Ping timeout: 252 seconds)
[19:28:56] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[19:30:26] * dminuoso idly notes that the impression of joining and almost randomly putting in a weblink without an immediately clear reference that this is on-topic is almost fishy.
[19:30:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:30:59] <dminuoso> But thanks for the headsup, myShoggoth.
[19:31:19] <maerwald> why would that need a reference?
[19:31:23] <merijn> Whoo!
[19:31:29] <merijn> Finally caught up with AoC again :p
[19:31:32] <cigsender> you kinda have to know HF means Haskell Foundation :p
[19:31:35] <dminuoso> ^-
[19:31:39] <cigsender> merijn: nice! :)
[19:31:42] <merijn> Right, so who had questions about Day 6 again? :p
[19:33:06] * geekosaur was thinking "twitch.tv/myshoggoth" does not look very official
[19:33:22] <dminuoso> That as well. :)
[19:33:38] <cigsender> i was worried it was going to take forever until i realized i could keep track of how many were at each stage instead of the stage of each fish :p
[19:34:03] <dminuoso> myShoggoth: So perhaps a haskell.foundation/twitch link might give a better first impression! :)
[19:34:13] <dminuoso> Or /stream or some such
[19:34:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[19:34:39] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:35:01] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:35:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:35:18] <merijn> aplainzetakind: So, I took a look at your day 6 and I'm pretty sure I know why it's slower
[19:35:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:36:01] <merijn> cigsender: Same revelation for me, yeah :p
[19:36:36] <merijn> "no answer in 5s...*think*...oh, this is going to run me out of memory..."
[19:36:59] <merijn> The new one is effectively instant, despite using immutable vectors :p
[19:37:21] <maerwald> dminuoso complaining about links today... :o
[19:37:34] <dminuoso> maerwald: Im in no way complaining.
[19:37:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[19:37:49] <maerwald> that's a lvlup for nitpicking :p
[19:38:13] <dminuoso> If you call giving constructive criticism a complaint, so be it. Not interested in arguing with you.
[19:38:14] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[19:38:37] <geekosaur> ^
[19:39:58] <Hecate> cigsender: hi <3
[19:41:41] *** Quits: wei2912 (~wei2912@116.88.103.128) (Quit: Lost terminal)
[19:43:05] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[19:43:05] *** Joins: alx741 (~alx741@186.178.108.139)
[19:43:42] <cigsender> salut Hecate <3
[19:43:54] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[19:44:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:45:40] <cigsender> merijn: i used a map, but got the wrong answer the first try by using deleteFindMin instead of manually popping 0
[19:46:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:46:09] <cigsender> mistakenly assumed there'd always be some ready :p
[19:46:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:47:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:48:21] *** Joins: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x)
[19:49:11] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 265 seconds)
[19:50:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:51:34] <merijn> cigsender: You coulda used minView which returns the smallest key and the map with it removed
[19:51:56] <merijn> ah, yeah
[19:52:00] <merijn> I see what you mean :)
[19:52:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[19:52:35] <merijn> cigsender: I channeled my inner HPC spirit and realised that "arrays are the universal data structure" :p
[19:53:10] <merijn> All problems are unboxed Vector problems! https://github.com/merijn/AdventOfCode/blob/master/Day6.hs
[19:53:18] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:53:58] <aplainzetakind> merijn: I just saw what you wrote. So what is it?
[19:55:08] <merijn> aplainzetakind: So, casual glance at Data.Matrix shows it's just using Vector with hand-rolled operations on it
[19:55:17] <merijn> aplainzetakind: You used numpy for the python version?
[19:55:49] *** Quits: mbuf (~Shakthi@122.178.240.120) (Quit: Leaving)
[19:55:52] <aplainzetakind> merijn: https://gitlab.com/aplainzetakind/aoc2021/-/blob/master/Python/aoc2021/days/day06.py
[19:55:55] <aplainzetakind> Yep.
[19:55:59] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:56:06] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:56:30] <merijn> numpy uses BLAS/LAPACK for its matrix operations, which are libraries with decades worth of optimisation and vectorisation for matrix computations, which will outperform some hand-rolled matrix math on vectors any time
[19:56:36] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[19:56:58] <aplainzetakind> And surely there's an equivalent Haskell library?
[19:57:07] <merijn> hmatrix provides BLAS/LAPACK bindings
[19:57:32] <merijn> Although the matrix solution seems rather overcomplicated for day 6. At least for me :p
[19:57:57] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:58:14] <aplainzetakind> It's pretty short. I first wrote a map solution and this one is simpler imo.
[19:58:58] <merijn> aplainzetakind: Have a look at mine a few lines back :)
[20:01:42] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:01:56] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[20:02:14] *** Quits: CiaoSen (~Jura@p200300c9570204002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[20:03:39] <aplainzetakind> merijn: For some reason I never use Vector... It never occurs to me that it exists.
[20:04:22] <aplainzetakind> merijn: How long does this one take for both parts?
[20:05:17] <merijn> aplainzetakind: Eh, when I run it it's instant, so I'd have to time it somehow :p
[20:05:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:06:04] <merijn> time report 0.02s real time, 0.002s usertime
[20:06:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[20:06:52] <aplainzetakind> time doesn't get much faster than that I suppose.
[20:06:59] <aplainzetakind> s/get/report
[20:07:16] <merijn> I mean, you can always get it faster, but doesn't seem worth the bother :p
[20:08:26] <aplainzetakind> merijn: Would you care to also diagnose why https://gitlab.com/aplainzetakind/aoc2021/-/blob/master/Haskell/lib/AoC2021/Day05.hs is slower than https://gitlab.com/aplainzetakind/aoc2021/-/blob/master/Python/aoc2021/days/day05.py
[20:08:34] *** Lord_of_Life_ is now known as Lord_of_Life
[20:10:41] *** Quits: robosexual (~spaceoyst@5.167.241.206) (Quit: Konversation terminated!)
[20:10:43] <merijn> aplainzetakind: Lots of lists, which are always bad for performance due to the large number of indirections and the multiset approach is probably not super cheap either
[20:11:15] <merijn> aplainzetakind: How long does it take?
[20:11:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:12:36] <Franciman> how does haskell's garbage collector deal with data alignment?
[20:12:42] <Franciman> does it use a uniform alignment for all types?
[20:12:54] <Franciman> like it knows that the biggest alignment is 16bytes and alignes everything to 16 bytes?
[20:13:03] <merijn> My day5 isn't instant (0.3s), but it's fast enough (and stupid, I literally end up parsing the input twice)
[20:13:04] <Franciman> or is it more into having different regions for different alignment requests?
[20:14:01] <merijn> Franciman: I mean, you can just "overallocate" to make sure you've got space to get whatever alignment you need
[20:14:13] <merijn> Franciman: Although I wager most things are simply 4 or 8 byte aligned
[20:14:18] <aplainzetakind> merijn: This is also something like 0.3s. But what bugs me is that it's literally the same algorithm and Python ends up faster.
[20:14:46] <Franciman> yes allocating a bool with 16 byte alignment is a nice idea lol
[20:14:53] <Franciman> I keep thinking about it
[20:15:00] <merijn> aplainzetakind: The problem is that python's "lists" are arrays. They are dense memory objects, which means lots of cache hits
[20:15:20] <merijn> aplainzetakind: Whereas linked lists are kinda bad in terms of caching
[20:15:21] <Franciman> who cares about 128bit integers
[20:15:25] <merijn> aplainzetakind: Also, how are you timing them?
[20:16:18] <merijn> Franciman: It doesn't seem like a big problem? I mean, at worst you waste a handful of bytes the few times something has a weird alignment requirement
[20:16:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:16:46] <Franciman> eh so you mean, do 8byte alignment, which is common
[20:16:48] <merijn> aplainzetakind: splitOn and read are also gonna be rather terrible performance
[20:16:53] <Franciman> and in the rare occasion you need an int128, you just pad a lot
[20:17:00] <Franciman> that's not bad yeah
[20:17:13] <merijn> Franciman: I don't see why int128 would need a lot of padding, tbh
[20:17:21] <Franciman> it needs 8bytes padding
[20:17:32] <Franciman> to make sure it ends on 16bytes aligned address
[20:17:35] <Franciman> but only sometines
[20:17:44] <merijn> Franciman: What makes you think it needs to be 16 byte aligned?
[20:17:44] <Franciman> sometimes you are lucky and already are on 16bytes aligned addresses
[20:17:48] <Franciman> my C compiler
[20:17:50] <Franciman> ^^
[20:17:54] <merijn> AFAIK no current CPUs support native 128bit accesses anyway
[20:18:29] <geekosaur> I think 16 byte alignment only applies to code, not data?
[20:18:36] <merijn> Franciman: Ah, see, but now your question is mixing 2 things. "How does GHC's GC handle alignment" and "How should I handle alignment as specified by the C spec" :p
[20:18:36] <geekosaur> most things are 8 byte aligned
[20:19:04] <merijn> Franciman: GHC only has to worry about what the CPU will handle (which will generally be 4/8 byte alignment for word accesses)
[20:19:09] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 265 seconds)
[20:19:22] <Franciman> long double in C on my architecture requires 16byte alignment
[20:19:22] *** Quits: ubert (~Thunderbi@p200300ecdf0ba2cae6b318fffe838f33.dip0.t-ipconnect.de) (Quit: ubert)
[20:19:22] *** ub is now known as ubert
[20:19:28] <merijn> 128bit numbers would be handled in software anyway, 'cos no 128bit hardware currently
[20:19:36] <Franciman> I see, thanks
[20:19:38] <Franciman> nice
[20:19:44] *** Joins: ubert1 (~Thunderbi@p200300ecdf0ba2ca8fd37040f9dc92fe.dip0.t-ipconnect.de)
[20:19:48] <merijn> Franciman: Right, but is that a *C* requirement or a *CPU* requirement? :)
[20:19:58] <merijn> because GHC only has to worry about the latter
[20:20:45] <merijn> aplainzetakind: Also, whenever you wonder about performance and you see String. You should already assume that's bad :)
[20:20:48] <Franciman> now I wonder why C requires this
[20:21:14] <Franciman> but that's for another channel :D
[20:21:16] <Franciman> thanks merijn 
[20:21:21] <geekosaur> uses the same alignment for code and data?
[20:21:38] <merijn> C (at least partially) specifies memory layout of data structures and data
[20:21:44] <aplainzetakind> merijn: I thime them like so: https://gitlab.com/aplainzetakind/aoc2021/-/blob/master/Haskell/bench/Main.hs
[20:22:00] <merijn> The Haskell Report specifies, essentially, nothing about memory layout, so the compiler can do whatever it wants :p
[20:22:52] <merijn> aplainzetakind: With absolutely no promises about what happens: I wonder if using readFile from Data.Text and changing your solutions to use Text will help
[20:23:04] <Franciman> the nice thing about self managed mamory and editable compiler without a PhD is that you can do your own statistics and update the situation as you wish
[20:23:21] <aplainzetakind> merijn: I'll try to leave parsing out of the benchmarking ans see if that's the choke point.?
[20:23:50] <aplainzetakind> In the meantime, what would be a better choice than MultiSet for this purpose?
[20:24:03] <merijn> aplainzetakind: I just used "Map Point Int" :p
[20:24:17] <Franciman> unfortunately every compiler reaches a point where it requires advanced knowledge unfortunately
[20:24:25] <merijn> aplainzetakind: You can check it in my repo :)
[20:25:40] <Franciman> but until that point I'm gonna enjoy it
[20:25:47] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:26:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:27:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:28:14] *** Joins: emf (~emf@cpe-174-109-36-85.nc.res.rr.com)
[20:30:09] *** Joins: emf_ (~emf@2620:10d:c090:400::5:6c88)
[20:31:43] *** Quits: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 265 seconds)
[20:33:18] *** Quits: emf (~emf@cpe-174-109-36-85.nc.res.rr.com) (Ping timeout: 268 seconds)
[20:35:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:36:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:37:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:45:50] <phaazon> anyone can send me an input.txt for day4 of AoC, if anyone has one? jle` are you around? :)
[20:46:17] <phaazon> I have reviewed my algorithm 40 times, which works on part 1 fully and the sample of part 2, so I don’t get it
[20:48:13] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Read error: Connection reset by peer)
[20:48:20] *** Joins: synthmeat1 (~synthmeat@user/synthmeat)
[20:48:31] <aplainzetakind> phaazon: https://dpaste.com//5GVUFPAGC
[20:48:45] <aplainzetakind> If a paste is fine
[20:49:39] <phaazon> it is, thanks
[20:49:53] <phaazon> aplainzetakind: have you solved it?
[20:49:56] <phaazon> what are the expected values?
[20:51:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:51:09] <phaazon> hm, I get 0 for that one too, so I guess I still have something wrong anyway
[20:51:44] <aplainzetakind> 65325 and 4624
[20:52:10] <yin> is there something like `class Acyclic t where leaves :: t a -> [a]` ? 
[20:52:57] <phaazon> this is super weird
[20:53:05] <aplainzetakind> phaazon: Maybe going through the paste some newlines get borked or something, I'd check if it parses fine first.
[20:53:21] <phaazon> because my algorithm makes sense, it’s just a simple exclusion variation of the first algorithm
[20:53:23] <geekosaur> :t toList
[20:53:24] <lambdabot> Foldable t => t a -> [a]
[20:53:30] <phaazon> I’m a bit confused
[20:53:53] <geekosaur> yin, how does that differ from toList on a tree that happens to be an acyclic graph?
[20:54:33] <phaazon> aplainzetakind: I think there might be a rule or something I missed
[20:54:40] <phaazon> because the trace for the sample looks exactly like what I want
[20:54:42] <phaazon> https://gist.github.com/phaazon/dddc750231502c371847cc5150294ebe
[20:54:51] <phaazon> but for the actual input, I end up with a 0 score
[20:55:19] <yin> geekosaur: toList gives you all the nodes?
[20:55:27] <yin> i want only the leaves
[20:55:45] <yin> so it has t be both acyclic and directed
[20:56:04] *** Joins: pfurla (~pfurla@201.17.118.230)
[20:56:19] <c_wraith> due to laziness, it's *really* hard to guarantee a data type is acyclic in haskell
[20:57:33] *** Quits: emf_ (~emf@2620:10d:c090:400::5:6c88) (Ping timeout: 252 seconds)
[20:57:53] <yin> c_wraith: well... s/acyclic/infinite , technically
[20:57:57] <c_wraith> But in general, I've used lenses for that sort of thing. Given a lens to get all the children of the current node and a lens to get the value you want, there are combinators to turn that into "get all the leaves"
[20:58:00] <aplainzetakind> phaazon: ¯\_(ツ)_/¯ 
[20:58:20] <aplainzetakind> phaazon: Do you have the trace for the actual run?
[21:00:08] *** Joins: emf (~emf@2620:10d:c090:400::5:6c88)
[21:00:23] <raehik> :t _1
[21:00:24] <lambdabot> (Field1 s t a b, Functor f) => (a -> f b) -> s -> f t
[21:00:42] <raehik> ^ On GHCi 9.2, the following displays:
[21:00:54] <raehik> Field1 s t a b => Lens s t a b
[21:01:03] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:01:23] <raehik> did :t stop expanding type synonyms in GHC 9.2? I can't find specific detail in the changelogs
[21:02:08] <c_wraith> type synonyms have a history of changing how they're displayed frequently
[21:02:12] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[21:03:01] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[21:03:04] <c_wraith> eta expanding it removes the type synonym!
[21:03:44] <raehik> any command to give GHCi to do that? (none of this is a complaint or problem, just interesting)
[21:04:44] <c_wraith> I just checked to see if there's a :t! analogous to :k! and it does not seem to exist
[21:04:57] <raehik> yeah, neither anything in :help
[21:05:40] <raehik> I prefer this way but amusingly it broke doctests in generic-lens
[21:05:44] <phaazon> aplainzetakind: yes, I also display the boards
[21:05:47] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:06:45] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[21:06:54] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:07:15] <phaazon> the trace makes sense
[21:07:18] <c_wraith> phaazon: note that 0 is a number that can be called (at least in some inputs). If you return that as the last number called in the last board, the score will be zero
[21:07:35] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[21:07:37] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:07:41] <phaazon> at least for the sample
[21:07:57] <phaazon> c_wraith: I use -1
[21:08:03] <phaazon> https://gist.github.com/phaazon/bbbec07d81fb6a05aeb860ac7822b05d
[21:09:04] <c_wraith> phaazon: I mean it's valid for the output to be 0, given completely correct code. It probably isn't, but it's valid.
[21:10:00] <phaazon> https://gist.github.com/phaazon/edbf57cf390643ebbcafde0783a3a8b2
[21:10:05] <phaazon> the input’s output
[21:10:07] <phaazon> it’s… weird
[21:10:25] <phaazon> like the score of the second
[21:10:44] <phaazon> but yeah, since I multiply by 0…
[21:11:08] <c_wraith> phaazon: ok, something is definitely wrong.  look at line 450, for example
[21:11:12] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[21:11:20] <c_wraith> phaazon: you played until the board was blacked out entirely.  that's going too long
[21:11:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:11:32] <c_wraith> phaazon: there was definitely a bingo before the blackout
[21:12:13] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[21:12:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:12:57] <phaazon> I don’t understand how that can happen given I exclude a board at the first win
[21:14:45] <dsal> When I've got stuck on stuff like this, I've written unit tests for the code I was pretty sure was right.
[21:14:46] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:14:48] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:bc10:5f40:71cb:b3b6)
[21:15:00] <c_wraith> well, evidence shows that the test isn't quite working right
[21:15:10] <c_wraith> so... time to figure out why
[21:17:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:6993:39fb:9bc8:e953) (Ping timeout: 240 seconds)
[21:17:33] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::9788)
[21:17:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:17:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:20:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:20:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:21:47] <EvanR> yeah if your code is split into small functions, and you "verified" each function on the repl, then the whole thing can't be wrong xD
[21:21:50] <EvanR> (YMMV)
[21:23:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:23:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:23:44] <dsal> I wrote most of my bugs in the obviously correct parts of the code.
[21:24:32] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[21:25:07] <phaazon> c_wraith: it’s that kind of puzzles where I’m sure I just didn’t understand a hidden rule
[21:25:15] <phaazon> I have that with all AoC
[21:25:19] <phaazon> https://gist.github.com/phaazon/13fdd3bf646dde2ee6153cc25d4507a0
[21:25:25] <phaazon> this test all passes
[21:25:43] <c_wraith> I couldn't be bothered to write complicated code to test whether the game had ended for day 4. so I doubled the size of the problem in exchange for making the test and the calling process much easier.
[21:26:57] <phaazon> I don’t think it matters that much, because of the exclusion thing
[21:27:09] <phaazon> if I have excluded everything, it will just be spinning loops until the end of the numbers
[21:27:14] <phaazon> (and I keep the last score in memory)
[21:27:16] <phaazon> so 
[21:27:25] <phaazon> :shrug:
[21:29:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:29:29] <c_wraith> the ones running to blackout are the real mystery
[21:29:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:30:26] <c_wraith> because that implies they didn't stop at any of the previous horizontal or vertical checks.
[21:31:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Remote host closed the connection)
[21:31:53] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[21:31:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[21:32:16] <c_wraith> but it sounds like you did the whole problem differently than I did - it sounds like you're running the boards in lockstep. in that case, you need to check for accidental crosstalk between tests
[21:32:57] <dsal> Yeah, I just ran all of them in parallel.
[21:34:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[21:35:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:35:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[21:35:49] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[21:35:52] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[21:38:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:38:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:40:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:40:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:42:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:42:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:42:59] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[21:44:13] *** Quits: pfurla (~pfurla@201.17.118.230) (Quit: gone to sleep. ZZZzzz…)
[21:44:19] <c_wraith> phaazon: I have a hypothesis, based on what you said: you're still sending moves to boards that have already won in some cases - ie, your exclusion isn't excluding as much as you hoped
[21:45:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[21:46:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:48:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:48:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:49:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:49:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:49:10] *** Joins: wroathe (~wroathe@user/wroathe)
[21:49:25] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 240 seconds)
[21:50:04] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:51:02] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:51:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:52:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:53:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[21:54:12] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[21:55:00] <phaazon> c_wraith: what do you mean?
[21:55:08] <phaazon> whenever a board wins, I put its index in an exclusion set
[21:55:16] <phaazon> and then will never update the board again / check it
[21:55:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:56:00] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[21:56:08] <c_wraith> well, boards that have already won keep getting played. so either your win detection is buggy or your exclusion set is buggy.
[21:56:26] <c_wraith> and I'm willing to bet it's the latter
[21:56:39] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[21:57:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[21:57:57] <dsal> phaazon: I play each board independently, so there's no kind of exclusion set.
[21:57:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:58:03] <dsal> The nice thing is that you can do them all in parallel.
[21:58:19] <dsal> `catMaybes $ parMap rseq go boards`
[21:59:05] <phaazon> c_wraith: keep getting played?
[21:59:08] <phaazon> what does that mean?
[21:59:13] <phaazon> a board can win several times?
[21:59:25] <c_wraith> well, did you look at your output?
[21:59:39] <c_wraith> there are boards in there which have a lot of wins
[21:59:54] <c_wraith> clearly they had squares marked off after they had already won
[22:00:01] <c_wraith> otherwise that couldn't happen
[22:00:09] <dsal> If you have the concept of an exclusion set, then you have the possibility of that not working the way you think it does.
[22:00:23] <dsal> If you just play a single board until it completes and then don't have the ability to touch it again, then you can't write that bug.
[22:00:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:00:48] <EvanR> yeah there are ways that are simpler than others, and if we insist on them, we lose biodiversity xD
[22:01:00] <phaazon> I don’t get your point dsal 
[22:01:01] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:01:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:01:16] <phaazon> I tried both ideas
[22:01:17] <EvanR> let the special solutions live
[22:01:19] <phaazon> (keep playing them, etc.)
[22:02:04] <phaazon> once a board wins (i.e. it has either one row or one column), we shouldn’t include it anymore in the mark algorithm because it’s already won
[22:02:15] <phaazon> if not, then that’s the kind of « hidden rules » I mentioned above about AoC
[22:03:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[22:03:20] <c_wraith> my point is that you know your code is wrong, and yet keep arguing that it's right
[22:03:49] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[22:03:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:04:13] <c_wraith> you know it's wrong. you have evidence as to the form of it's incorrectness, based in the trace you posted
[22:04:18] <c_wraith> *its
[22:04:22] <phaazon> that’s what I did 
[22:04:25] <phaazon> and the tests are all green
[22:04:33] <c_wraith> then the tests are wrong
[22:04:49] <c_wraith> (tests being wrong is the main problem with tests)
[22:04:55] <EvanR> phaazon, regardless of if a board keeps playing, the "rules" for that day want to know who won first or last
[22:05:03] <EvanR> so it technically doesn't matter if you keep them going
[22:05:04] <phaazon> I’m not saying it’s right, I’m saying I don’t get what’s wrong 
[22:05:28] <c_wraith> I've already told you, it's either the win detection or the exclusion mechanism
[22:05:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:05:43] <c_wraith> those are the two places the cover the symptoms
[22:05:52] <phaazon> if the win detection was bugged, I guess I wouldn’t have passed part 1a, 1b and 2a
[22:05:56] <phaazon> (both input and samples)
[22:06:05] <phaazon> so I guess it’s the exclusion mechanism
[22:06:10] <EvanR> it's interesting to go back and figure out why a bug didn't mess up part 1 xD
[22:06:10] <phaazon> but yet it still passes the sample
[22:06:15] <EvanR> I had that several times
[22:06:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk)
[22:06:28] <phaazon> my algorithm is pretty simple
[22:06:47] <phaazon> I just do the same as part 1 but as soon as a board wins, I place its index in a set and updates the winning score
[22:07:06] <EvanR> my algorithm is pretty simple, alas IRC doesn't have enough margin space for it
[22:07:36] <c_wraith> it's almost certain the bug is outside the code you're testing
[22:08:07] <merijn> How are you detecting wins?
[22:08:18] <c_wraith> it's in code coordinating the action, rather than the units you have tested
[22:08:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:09:35] <merijn> I'm curious what the code looks like
[22:09:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b)
[22:11:06] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[22:12:02] <c_wraith> well, it's in rust. which is probably why phaazon hasn't just posted it to ask for a review. :)
[22:12:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-017.wadham.ox.ac.uk) (Ping timeout: 265 seconds)
[22:14:08] <EvanR> oof
[22:14:30] <EvanR> this isn't the AoC help channel or the rust channel xD
[22:14:40] <geekosaur> there is always -offtopic
[22:15:28] <EvanR> hard to understand bugs in your code is why haskell lol
[22:15:28] <phaazon> merijn: I check columns (any…all…==-1) and rows
[22:16:23] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 252 seconds)
[22:17:06] <merijn> There's an AOC channel too, no?
[22:17:17] <c_wraith> I didn't see one on this server
[22:17:30] <c_wraith> maybe it stayed on freenode(
[22:18:10] <dsal> There are three here I'm in
[22:18:16] <EvanR> #adventofcode
[22:18:25] <dsal> #adventofcode-{,help,spoilers}
[22:18:30] <c_wraith> i wonder why that didn't show up in my search
[22:18:41] *** Parts: halides (halides@imases.biss.ee) ()
[22:19:21] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:20:36] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:22:03] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:23:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:25:43] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[22:28:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:29:55] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[22:31:43] *** Quits: max22- (~maxime@2a01cb0883359800374d9426cde47cad.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[22:33:45] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[22:34:22] <maerwald> anyone tried haskell on void linux?
[22:36:24] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:36:44] *** Joins: jinsun (~quassel@user/jinsun)
[22:38:11] <dsal> void linux?  That sounds absurd
[22:39:51] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:40:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:40:28] <maerwald> why?
[22:41:08] <geekosaur> bad joke
[22:41:17] <geekosaur> :t absurd
[22:41:18] <lambdabot> Void -> a
[22:41:54] <maerwald> well
[22:41:55] <maerwald> https://github.com/void-linux/void-packages/issues/11718
[22:41:59] <maerwald> there's the first one
[22:44:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:44:18] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:44:56] <janus> lambdadog gets it working on nix in the end
[22:46:08] <geekosaur> I'm still of the opinion haskeline should try libncurses if libtinfo isn't found
[22:46:34] *** Quits: deadmarshal (~deadmarsh@95.38.114.2) (Ping timeout: 265 seconds)
[22:46:53] <sm> could someone remind me of the repo that keeps stack.yaml's for newer GHCs ?
[22:47:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:47:22] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[22:47:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:48:54] <maerwald> what stack.yamls?
[22:49:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:49:47] <sm> stack.yaml's for newer GHCs, that aren't on stackage.org yet
[22:50:02] <maerwald> stack.yaml are project files
[22:50:09] <maerwald> do you mean this? https://github.com/commercialhaskell/stackage-content/blob/master/stack/stack-setup-2.yaml
[22:50:46] *** Quits: connrs (~connrs@user/connrs) (Quit: ZNC 1.8.2 - https://znc.in)
[22:51:17] <sm> no, but that looks like it will do (I want GHC 9.2.1, and it looks like stack setup knows how to install that)- thanks
[22:52:02] *** Quits: famubu (~famubu@14.139.174.50) (Remote host closed the connection)
[22:53:01] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[22:53:31] <phaazon> I found my bug
[22:53:45] *** Joins: deadmarshal (~deadmarsh@95.38.114.2)
[22:54:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:54:48] <phaazon> it was… a single keyword :)
[22:55:10] <phaazon> and it was indeed a cornercase that wasn’t mentioned in the « rules », so I needed an assumption here
[22:55:15] <geekosaur> didn't someone mention having a && instead of a || earlier?
[22:55:31] <phaazon> it was a while needed instead of a if :)
[22:55:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:57:11] <DigitalKiwi> so it's fitting that my website https://mostlyabsurd.com features haskell then lol
[22:59:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:00:27] *** Joins: econo (uid147250@user/econo)
[23:01:03] <maerwald> https://mostlyabsurd.com/pieces/2020/02/05/agdaboi-matte-5x7/ looks fluffy
[23:02:43] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:02:43] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[23:03:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:03:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:03:32] *** Joins: tfeb (~tfb@88.98.95.237)
[23:05:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:06:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:06:27] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[23:06:37] <tomsmeding> h/urlse
[23:06:40] <tomsmeding> .... sorry
[23:10:36] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[23:13:15] *** Joins: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net)
[23:13:51] *** Joins: max22- (~maxime@2a01cb08833598003eb627eec416786c.ipv6.abo.wanadoo.fr)
[23:15:54] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[23:16:57] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[23:17:22] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[23:17:37] *** Quits: yauhsien (~yauhsien@61-231-32-247.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[23:19:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:23:16] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (Quit: ZNC 1.8.2 - https://znc.in)
[23:24:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[23:25:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:26:51] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[23:31:28] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:32:15] *** nickdaly is now known as nickdaly-away
[23:34:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:34:40] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:34:40] *** Joins: wroathe (~wroathe@user/wroathe)
[23:35:05] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:36:48] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:18] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 268 seconds)
[23:39:13] <Midjak> Hello on a fold expression with a function which return a bool is lazyness apply and stop as soon as function returns false ?
[23:39:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:40:26] <monochrom> Yes for foldr.
[23:40:46] <monochrom> But your question wording is very vague.
[23:40:56] *** Joins: darchite` (~user@2a00:23c6:3584:df00:7dec:bf13:8fa:748c)
[23:41:22] <xsperry> > foldr (||) True (True : undefined)
[23:41:24] <lambdabot>  True
[23:41:58] <monochrom> For example, xsperry's example shows that the answer to your worded question can be "no" because you need to s/false/true/
[23:43:01] <monochrom> Evidently, "a function which return a bool" is much broader than the one single function you have in mind. (So why didn't you spell it out? What's there to conceal?)
[23:44:01] <Midjak> well it's not easy to express this. In `foldl (\acc elem -> even elem && acc) True [5, 2, 4]` is this expression evaluate `even 2 && False` ?
[23:45:25] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 240 seconds)
[23:45:25] *** Quits: Vajb (~Vajb@nalkaylds2h97nzof-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[23:45:38] <Midjak> I am expecting this stop on first element of the list
[23:45:49] <Midjak> I am not sure however
[23:46:01] <monochrom> That expands to: ((even 5 && even 2) && even 4) && True
[23:46:10] <monochrom> It will not stop early.
[23:46:15] <kuribas> > foldl (\acc elem -> even elem && acc) True [5, undefined, 4]
[23:46:16] <lambdabot>  *Exception: Prelude.undefined
[23:46:20] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[23:46:26] *** Joins: cyphase (~cyphase@user/cyphase)
[23:46:35] <kuribas> > foldl (\acc elem -> even elem && acc) True [5, 2, undefined]
[23:46:37] <lambdabot>  *Exception: Prelude.undefined
[23:46:49] <Midjak> hummm ok...
[23:46:56] <monochrom> Perhaps the more important skill is to know how to expand foldl (\acc elem -> even elem && acc) True [5, 2, 4]
[23:46:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:47:41] <xsperry> > foldr (\elem acc -> even elem && acc) True [5, 2, undefined]
[23:47:42] <lambdabot>  False
[23:48:02] <Midjak> what is this undefined ?
[23:48:10] <merijn> :t undefined
[23:48:11] <lambdabot> a
[23:48:23] <xsperry> undefined is everything and nothing :)
[23:48:25] <geekosaur> undefined just throws an exception
[23:48:27] <kuribas> > foldl (\acc elem -> even elem && acc) True [undefined, 2, 4]
[23:48:28] <lambdabot>  *Exception: Prelude.undefined
[23:49:11] <kuribas> > foldl (\acc elem -> even elem && acc) True [undefined, undefined, 3]
[23:49:11] <Midjak> I mean does I need that for my purpose ?
[23:49:13] <lambdabot>  False
[23:49:14] *** Joins: cfricke (~cfricke@user/cfricke)
[23:49:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:e52b:eca6:e736:3c6b) (Remote host closed the connection)
[23:49:35] <geekosaur> no, it's just being used ot prove/disprove early stopping
[23:49:41] <kuribas> monochrom: that evaluates to ((even 4 && even 2) && even 5) && True
[23:49:44] <merijn> tbh, any use of undefined besides examples of strictness is probably a mistake
[23:49:52] <geekosaur> since if it stops early then undefined won't be evaluated and won't throw an exception
[23:49:54] <Midjak> ah ok geekosaur 
[23:50:02] <kuribas> it does stop early
[23:50:07] <kuribas> but from the right.
[23:50:12] <Midjak> ah ok
[23:50:41] <Midjak> why from the right ?
[23:50:50] <kuribas> foldl is the reverse of foldr.
[23:50:51] <merijn> I dislike this terminology of "from the right" and "from the left" when discussing folds, it's usually confusing and ambiguous
[23:50:58] <merijn> kuribas: Is it?
[23:51:16] <merijn> Arguably wouldn't, like, scanr be the reverse? :p
[23:51:23] <Midjak> l is for left en r ids for right no ?
[23:51:25] <geekosaur> the l/r in foldl/foldr is aboout associativity, not direction of evaluation
[23:51:31] <kuribas> merijn: reverse direction
[23:51:33] <Midjak> ok
[23:51:49] <geekosaur> > foldl f z [a,b,c]
[23:51:50] <lambdabot>  f (f (f z a) b) c
[23:51:51] <monochrom> even 4 (even 2 && (even 5 && True)).  All of us were wrong.
[23:51:54] <merijn> kuribas: I think "direction" is a bad term for what you see, though. See geekosaur's comment
[23:51:55] <geekosaur> > foldr f z [a,b,c]
[23:51:56] <lambdabot>  f a (f b (f c z))
[23:52:12] <kuribas> monochrom: ah right :)
[23:52:14] <merijn> kuribas: "left associative" vs "right associative" is less ambiguous than "from the left" or "from the right"
[23:52:28] <kuribas> merijn: true
[23:52:40] <monochrom> "from left" and "from right" are OK in Scheme and SML. Haskell laziness made them weird.
[23:52:43] <merijn> Which directions (due to flawed human brains) tend to also imply evalation orders
[23:52:57] <merijn> s/Which/Since
[23:52:59] <Midjak> ok is the reason why foldr function is \x acc -> .. and in foldl \acc x -> ..
[23:53:13] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[23:53:18] <DigitalKiwi> foldLeft/foldl => FL => For Loop; foldRight/foldr => fR => constructor Replacement
[23:53:25] <monochrom> No reason. Arbitrary decision.
[23:53:42] <Midjak> ok ok
[23:54:01] <kuribas> > foldl (\acc elem -> even elem && acc) True [5::Expr, 2, 4]
[23:54:02] <lambdabot>  False
[23:54:13] <Midjak> this kind o rules are very hard for a newbie :-)
[23:54:29] <xsperry> there's a reason. see on what side is z (which is acc) used in foldl, vs foldr
[23:54:31] <kuribas> > foldl (\acc elem -> f elem && acc) True [5::Expr, 2, 4]
[23:54:32] <lambdabot>  error:
[23:54:32] <lambdabot>      • No instance for (FromExpr Bool) arising from a use of ‘f’
[23:54:33] <lambdabot>      • In the first argument of ‘(&&)’, namely ‘f elem’
[23:54:36] <xsperry> > foldl f z [a,b,c]
[23:54:38] <lambdabot>  f (f (f z a) b) c
[23:54:39] <xsperry> > foldr f z [a,b,c]
[23:54:41] <lambdabot>  f a (f b (f c z))
[23:54:50] <merijn> Midjak: True. But what helps a lot is "staring at the respective types a long time"
[23:54:53] <monochrom> What you should dislike is the simpleton mindset that just because a mental model works for your echo chamber, it works universally.
[23:55:02] <DigitalKiwi> now do infinite lists
[23:55:28] <merijn> Midjak: Taking a pen & paper and mentally working out what the fold types turn into without your specific function(s) can also be very educational
[23:55:43] <monochrom> And of course, also beware of the perfectionist mindset: just because a model breaks somewhere, it can't work in a suitable echo chamber.
[23:56:26] <merijn> monochrom: I don't recall whether it was TaPL or some other book, but one of them in the preface mentioned that early chapters would essentially "lie for educational convenience" :p
[23:56:59] <monochrom> Yeah, that's the best attitude.
[23:57:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[23:57:08] *** Quits: aman (~aman@user/aman) (Ping timeout: 265 seconds)
[23:57:17] <EvanR> the docs for vector foldl and foldr literally say "from left to right" and "from right to left" (not necessarily in that order)
[23:57:22] <EvanR> still boggling
[23:57:29] <merijn> The goal of models is to usefully predict results of actions. Many people underrate the value of  an untrue, but useful to beginners model
[23:57:41] <monochrom> For vector, that is a correct model.
[23:57:51] <merijn> EvanR: For vector that is sensible, because operations are generally strict
[23:57:57] <monochrom> In fact, the actual code probably does exactly that, no more no less.
[23:58:04] <EvanR> uh which operations? xD
[23:58:21] <EvanR> the traversal or the visitor
[23:58:42] <EvanR> i don't see why e.g. toList should be strict
[23:58:44] <merijn> EvanR: traversals for sure, since the whole traversal goes at once when the new vector is forced
[23:58:51] <Midjak> merijn, what do you mind by "what helps a lot is "staring at the respective types a long time"
[23:58:56] <Midjak> *mean
[23:58:59] <merijn> :t foldl
[23:59:00] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[23:59:06] <merijn> hmm
[23:59:11] <merijn> :t Data.List.foldl
[23:59:12] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[23:59:17] <merijn> oi!
[23:59:25] <merijn> :t Data.OldList.foldl
[23:59:27] <lambdabot> error:
[23:59:27] <lambdabot>     Not in scope: ‘Data.OldList.foldl’
[23:59:27] <lambdabot>     Perhaps you meant one of these:
[23:59:36] <merijn> pfft, I give up :p
[23:59:47] <EvanR> that is the type I internalized 
[23:59:52] <EvanR> what were you looking for
