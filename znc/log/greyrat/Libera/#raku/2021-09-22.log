[00:13:26] *** Quits: stoned75 (~seb@78.203.129.116) (Ping timeout: 252 seconds)
[00:43:00] *** Joins: [Coke] (~coke@cpe-104-228-9-26.nycap.res.rr.com)
[00:43:00] <[Coke]> .
[01:01:23] *** Joins: codesections (~codesecti@codesections.com)
[04:57:14] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[04:57:32] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[04:59:12] *** Server sets mode: +nt 
[05:36:15] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:36:15] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:36:16] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:37:12] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[06:37:18] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[06:51:48] *** Joins: frost (~frost@59.71.243.104)
[06:55:26] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:04:04] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[08:04:04] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:04:04] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:04:04] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:04:04] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:04:04] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[08:04:24] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[08:05:11] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[08:05:30] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:05:47] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[08:05:47] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:06:27] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[08:06:33] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[08:38:49] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:47:41] *** Quits: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de) (Ping timeout: 252 seconds)
[08:51:08] *** Joins: dustinm` (~dustinm@static.38.6.217.95.clients.your-server.de)
[09:04:40] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:05:17] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[09:05:24] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[09:06:46] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[09:32:39] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:53:24] *** Joins: ufobat (~martin@dynamic-095-118-027-197.95.118.pool.telefonica.de)
[10:06:17] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[10:06:17] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[10:07:17] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[10:36:01] <CIAvash> m: sub f ($a, :$b) { dd $a, $b; }; say &f.assuming(1, :b(2)).signature
[10:36:01] <camelia> rakudo-moar ba15173fd: OUTPUT: «(:$b)␤»
[10:36:15] <CIAvash> is this a bug or expected behavior?
[10:38:40] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:39:02] <moon-child> m: m: sub f ($a, :$b) { dd $a, $b; }; &f.assuming(1, :b(2))(b => 3)
[10:39:02] <camelia> rakudo-moar ba15173fd: OUTPUT: «1␤3␤»
[10:39:19] <moon-child> you can still override the 'b'
[10:41:21] <CIAvash> I know, I'm just asking if that is a bug, because I was expecting `$b` to be removed from the signature, just like `$a`
[10:42:04] <moon-child> yes, and I'm explaining why it's not.  And optional key arguments are still part of the signature
[10:42:20] <moon-child> s/And/because
[10:42:26] <moon-child> you've assumed that b is 2, but you can still revisit that assumption later
[10:45:51] <CIAvash> that doesn't explain why it's not a bug (at least to me), that's just explaining the current behavior
[10:46:29] <CIAvash> m: sub f ($a, :$b!) { dd $a, $b; }; say &f.assuming(1, :b(2)).signature.params # not really optional
[10:46:29] <camelia> rakudo-moar ba15173fd: OUTPUT: «(:$b)␤»
[10:48:41] <moon-child> why do you say 'not really optional'?
[10:48:59] <moon-child> and why do you expect b to be removed from the signature?
[10:51:43] <CIAvash> because that one is not optional(notice the `!` after `:$b`). and because it was applied to the function. Otherwise what's the point of partially applying functions.
[10:53:20] <moon-child> now that you've supplied a default value for b, it has become optional
[10:54:16] <moon-child> m: sub f ($a, :$b!) { dd $a, $b; }; my &g = &f.assuming(1, :b(2)); say &f.signature.params; say &g.signature.params; g(); g(:b(3))
[10:54:16] <camelia> rakudo-moar ba15173fd: OUTPUT: «($a :$b!)␤1␤(:$b)␤2␤1␤3␤»
[10:54:53] <moon-child> hmm, the output seems to have been interleaved
[10:54:54] <moon-child> m: sub f ($a, :$b!) { dd $a, $b; }; my &g = &f.assuming(1, :b(2)); say &f.signature.params; say &g.signature.params; g(); g(:b(3))
[10:54:54] <camelia> rakudo-moar ba15173fd: OUTPUT: «($a :$b!)␤1␤(:$b)␤2␤1␤3␤»
[10:55:04] <CIAvash> It's not about optional parameters, but about named ones
[10:55:16] <CIAvash> m: sub f ($a, $b?) { dd $a, $b; }; say &f.assuming(1, 2).signature
[10:55:16] <camelia> rakudo-moar ba15173fd: OUTPUT: «()␤»
[10:55:49] <moon-child> yes, I understand
[10:56:39] <moon-child> that doesn't clarify what problem you have with the current scheme
[10:58:11] <moon-child> https://github.com/Raku/roast/blob/master/S06-currying/named.t#L29  does this clarify anything?
[11:01:30] <CIAvash> that clarifies that it's not a bug, but it's still unexpected to me.
[11:04:50] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[11:04:52] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[11:05:10] <moon-child> so you expect that, given sub f(:$a) { }, &f.assuming(:a(7))(:a(8)) should be illegal?
[11:06:07] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[11:08:31] <CIAvash> yes, in other words, I expect the applied named parameter to be removed from the signature of the new function. Maybe my expectation is wrong, I don't know.
[11:09:42] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[11:10:18] *** Joins: tejr (~tejr@user/tejr)
[11:17:55] <moon-child> CIAvash: hmm, intuitively that didn't make sense to me, and I think I figured out a solid justification
[11:18:28] <moon-child> given sub f(*@args) { @args }, &f.assuming(5, 6)(7, 8) will be [5, 6, 7, 8]
[11:18:53] <moon-child> similarly, given sub f(*%args) { %args }, &f.assuming(a => 5)(b => 7) will be %(a => 5, b => 7)
[11:19:37] <moon-child> so then, sub f(*%args) { %args<a> } would behave differently from sub f(:$a) { $a }, which would be inconsistent
[11:23:49] <CIAvash> the difference is that the `.count` of functions with slurpy params is `Inf`, so you can never fully apply parameters. But you can with named params.
[11:25:29] <moon-child> m: sub f(*%args) {}; &f.count.say
[11:25:29] <camelia> rakudo-moar ba15173fd: OUTPUT: «0␤»
[11:25:48] <moon-child> regardless, it would be inconsistent
[11:30:38] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Read error: Connection reset by peer)
[11:30:48] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Read error: Connection reset by peer)
[11:31:11] <CIAvash> yeah, `.count` returns the number of positional arguments. still, doesn't make sense to me.
[11:34:13] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[11:37:30] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[11:37:42] *** Joins: tejr (~tejr@user/tejr)
[11:39:06] *** Joins: lichtkind (~lichtkind@p200300d0a704f069846ca33d6302fb9a.dip0.t-ipconnect.de)
[11:40:29] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[11:42:30] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[11:42:30] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[11:45:16] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:8173:355d:3407:7897) (Ping timeout: 252 seconds)
[11:52:26] *** Quits: lichtkind (~lichtkind@p200300d0a704f069846ca33d6302fb9a.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:59:06] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[12:02:19] <SmokeMachine> CIAvash: I agree... that doesn't make much sense... if you provided :b, it should have been removed from the new signature.
[12:02:33] <SmokeMachine> at least in my mind
[12:04:16] * moon-child still finds the current behaviour obviously correct...¯\_(ツ)_/¯
[12:05:59] <SmokeMachine> .assuming is providing a new default value for named parameters, that's not what .assuming should be doing, it should provide a value, not a default value
[12:06:20] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[12:06:35] *** Quits: TempIRCLogger__ (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[12:06:36] *** Joins: ufobat_ (~martin@dynamic-095-118-027-197.95.118.pool.telefonica.de)
[12:06:51] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[12:07:04] <moon-child> why 'should' that be what it does?
[12:07:15] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Read error: Connection reset by peer)
[12:07:15] *** Joins: [Coke]_ (~coke@cpe-104-228-9-26.nycap.res.rr.com)
[12:07:15] *** Quits: unixcat64 (hyperreal@fedora/hyperreal) (Quit: Ping timeout (120 seconds))
[12:07:15] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[12:07:25] <SmokeMachine> it should, in my mind at least...
[12:07:26] *** Joins: sena_kun (~koto@94.142.239.45)
[12:07:26] *** Joins: unixcat647 (hyperreal@envs.net)
[12:07:27] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Client Quit)
[12:07:39] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[12:08:00] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Read error: Connection reset by peer)
[12:08:53] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[12:09:01] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[12:09:06] *** Quits: [Coke] (~coke@cpe-104-228-9-26.nycap.res.rr.com) (Ping timeout: 265 seconds)
[12:09:16] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[12:09:19] <SmokeMachine> `Returns a Callable that implements the same behavior as the original, but has the values passed to .assuming already bound to the corresponding parameters.`, it doesn't say it changes the default value of parameters, but it values already bound
[12:09:25] *** Joins: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[12:09:35] *** Quits: ufobat (~martin@dynamic-095-118-027-197.95.118.pool.telefonica.de) (Ping timeout: 265 seconds)
[12:09:50] <SmokeMachine> (https://docs.raku.org/routine/assuming)
[12:10:17] <moon-child> what do you think about this?
[12:10:29] <moon-child> m: sub f(:$x) { say $x }; f(x => 7, x => 8)
[12:10:30] <camelia> rakudo-moar ba15173fd: OUTPUT: «8␤»
[12:10:53] <SmokeMachine> moon-child: that makes sense...
[12:11:13] <moon-child> my mental model of assuming is that &f.assuming(a)(b) is the same as f(a, b)
[12:14:14] <SmokeMachine> I see that differently... in my mind, `f(x => 7, x => 8)` "colapses" when adding both on "the same hash". `.assuming` is returning a new function, and :x was already provided, so it shouldn't have :x on its signature... but I can accept the f(x => 7, x => 8) argument... do not agree, but accept...
[12:33:11] <CIAvash> m: sub f ($a, $b = 2) {}; say &f.assuming(1).signature
[12:33:11] <camelia> rakudo-moar ba15173fd: OUTPUT: «($b?)␤»
[12:33:44] <CIAvash> I don't know how to feel about this one either, it loses the default value
[12:34:57] <moon-child> that's probably an oversight that will be corrected with rakuast
[12:37:55] *** Joins: lichtkind (~lichtkind@p200300d0a704f069919f89f8f9a33f0a.dip0.t-ipconnect.de)
[13:01:20] *** Joins: eseyman (~manu@lfbn-idf1-1-2271-214.w92-151.abo.wanadoo.fr)
[13:05:24] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[13:15:40] <Voldenet> .assuming is cool, but there's little reason to use it over plain lambdas
[13:15:57] <Voldenet> m: sub f ($a, $b = 2) { state $c = $a }; (&f.assuming(1))() for ^10; say now - BEGIN now
[13:15:58] <camelia> rakudo-moar ba15173fd: OUTPUT: «0.308274192␤»
[13:16:09] <Voldenet> m: sub f ($a, $b = 2) { state $c = $a }; ->{ f(1) }() for ^10; say now - BEGIN now
[13:16:09] <camelia> rakudo-moar ba15173fd: OUTPUT: «0.009272104␤»
[13:18:53] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[13:53:08] *** Joins: holyghost (~holyghost@109.136.39.83)
[14:00:10] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:00:26] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[14:12:41] *** Joins: JimmyZ (~JimmyZ@106.4.0.16)
[14:18:34] *** Quits: JimmyZ (~JimmyZ@106.4.0.16) (Quit: Connection closed)
[14:57:45] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[15:06:47] *** Joins: JimmyZ (~JimmyZ@106.4.0.16)
[15:33:09] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:34:19] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:35:18] <SmokeMachine> Voldenet: that's a reason I like the idea of `-> $a -> $b { $a + $b }` be equivalent of `-> $a { -> $b { $a + $b } }`
[15:40:51] <discord-raku-bot> <Nemokosch#9980> what's the difference? the brackets?
[15:41:41] <SmokeMachine> yes, but it makes it easier to read blocks returning blocks...
[15:42:49] <SmokeMachine> and if can be deeper: `-> $a -> $b, $c -> $d -> $e? { ... }`
[15:44:13] <SmokeMachine> it would be equivalent to `-> $a { -> $b, $c{  -> $d { -> $e? { ... } } } }`
[15:44:37] <SmokeMachine> sorry: `-> $a { -> $b, $c { -> $d { -> $e? { ... } } } }`
[15:49:11] <SmokeMachine> (I want to try to make a module implementing this anytime soon...)
[16:05:13] <grondilu> lizmat: is this https://github.com/lizmat/Slang-Subscripts/blob/main/lib/Slang/Subscripts.rakumod still supposed to work?
[16:07:01] <grondilu> oh nevermind it does seem to work
[16:15:07] <lizmat> it did last time I checked ?  :-)
[16:25:34] <grondilu> "===SORRY!===
[16:25:38] <grondilu> Invalid to edge 0 in NFA statelist"
[16:25:57] <grondilu> I have no idea what that^ means
[16:32:04] <Xliff> sub publish-slang (\S) { $*LANG.define_slang: 'MAIN', $*LANG.slang_grammar('MAIN').^mixin: S; }
[16:32:13] <Xliff> ^^ Why is that NOT a good idea?
[16:32:39] <lizmat> grondilu: /me neither
[16:34:19] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:34:19] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:51:42] *** Quits: JimmyZ (~JimmyZ@106.4.0.16) (Quit: Connection closed)
[17:26:22] <Voldenet> SmokeMachine: that syntax sounds good at first, but I thought about that and I'm sure that stack trace would not be too informative about currying (either too verbose or too terse)
[17:26:33] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:58eb:18c2:2e8a:75fa)
[17:27:12] <Voldenet> m: sub f ($a) { }; sub curry(&f) { my @x; my sub curry(|c) { return f(|@x) unless c.elems; @x.push(|c); &curry }}; curry(&f)(); 
[17:27:12] <camelia> rakudo-moar ba15173fd: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in sub f at <tmp> line 1␤  in sub curry at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[17:27:17] <Voldenet> m: sub f ($a) { }; sub curry(&f) { my @x; my sub curry(|c) { return f(|@x) unless c.elems; @x.push(|c); &curry }}; curry(&f)(1)(); 
[17:27:18] <camelia> rakudo-moar ba15173fd: ( no output )
[17:30:39] <Voldenet> this lies about which `curry` is it, but it's kind of more informative I believe
[17:33:04] <SmokeMachine> Voldenet: I go to get it… what would be the difference? People already do `my &add = -> $a { -> $b { $a +$b } }` (at least I do…) what would that syntax change besides being more readable?
[17:35:14] <Voldenet> m: sub f ($a, $b) { }; my $x = -> $a { -> $b { f($a) } }; $x(1)(2)
[17:35:15] <camelia> rakudo-moar ba15173fd: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[17:35:33] <Voldenet> stack trace here is not too informative about where the actual bug is
[17:36:05] <Voldenet> in larger codebase it's nice to have good stack traces
[17:36:07] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[17:36:43] <SmokeMachine> But independently of that people already do that
[17:38:44] <SmokeMachine> Having a “special” syntax for that would make it easier to give a better error, I suppose…
[17:41:55] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:43:52] <SmokeMachine> m: my &add := -> $a { -> $b { $a + $b } }; my &incr := add 1; incr() # error
[17:43:53] <camelia> rakudo-moar ba15173fd: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»
[17:44:45] <SmokeMachine> Would that be possible to show the “variable” name on that error?
[17:47:04] <Voldenet> it sounds hacky to do
[17:49:49] <Voldenet> Nested function syntax overall is a nice idea for partial application, because it's more expressive
[17:54:57] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[18:15:16] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:15:36] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:19:30] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:19:49] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:21:29] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:21:48] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:23:28] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:23:47] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:25:27] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:25:46] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:27:58] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:28:18] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:34:32] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:34:52] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:36:32] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:36:51] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:37:06] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[18:38:46] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:39:05] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:40:45] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:41:04] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:41:37] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[18:43:18] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:43:37] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:45:17] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:45:36] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:47:35] *** gordonfish- is now known as gordonfish
[18:49:32] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:49:51] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[18:53:46] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:06:39] <Geth> ¦ doc/non-scalar-twigils: c0f7ca3906 | (Daniel Sockwell)++ | doc/Language/variables.pod6
[19:06:39] <Geth> ¦ doc/non-scalar-twigils: Add indexing and crossrefs
[19:06:39] <Geth> ¦ doc/non-scalar-twigils: 
[19:06:39] <Geth> ¦ doc/non-scalar-twigils: This adds additional index entries for various twigils and links to
[19:06:39] <Geth> ¦ doc/non-scalar-twigils: the Sigil section rather than repeating that content when describing
[19:06:39] <Geth> ¦ doc/non-scalar-twigils: using sigils and twigils together.
[19:06:39] <Geth> ¦ doc/non-scalar-twigils: review: https://github.com/Raku/doc/commit/c0f7ca3906
[19:22:52] *** [Coke]_ is now known as [Cke
[19:22:57] *** [Cke is now known as [Coke]
[19:33:18] *** Quits: keutoi (~keutoi@157.47.34.219) (Remote host closed the connection)
[19:34:52] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:35:05] <Geth> ¦ doc: 803d861930 | (Daniel Sockwell)++ (committed by Juan Julián Merelo Guervós) | doc/Language/variables.pod6
[19:35:06] <Geth> ¦ doc: Describe non-$ sigils with twigils
[19:35:06] <Geth> ¦ doc: 
[19:35:06] <Geth> ¦ doc: This commit describes and indexes non-$ sigils with the ^ and : twigils.
[19:35:06] <Geth> ¦ doc: 
[19:35:06] <Geth> ¦ doc: Closes #3953
[19:35:06] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/803d861930
[19:35:07] <Geth> ¦ doc: 775f37fc9b | (Daniel Sockwell)++ (committed by Juan Julián Merelo Guervós) | doc/Language/variables.pod6
[19:35:09] <linkable6> Link: https://docs.raku.org/language/variables
[19:35:09] <Geth> ¦ doc: Add indexing and crossrefs
[19:35:10] *** Joins: tejr (~tejr@user/tejr)
[19:35:11] <Geth> ¦ doc: 
[19:35:13] <Geth> ¦ doc: This adds additional index entries for various twigils and links to
[19:35:15] <Geth> ¦ doc: the Sigil section rather than repeating that content when describing
[19:35:16] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:35:17] <Geth> ¦ doc: using sigils and twigils together.
[19:35:19] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/775f37fc9b
[19:35:50] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[19:36:31] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[19:42:25] <Geth> ¦ doc: jubilatious1 self-assigned Deciding whether (for example) `@^` is a twigil, or rather a sigil followed by a twigil... https://github.com/Raku/doc/issues/3966
[20:02:14] *** Quits: ens__ (~ens@yoke.ch0wn.org) (Quit: leaving)
[20:11:13] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 252 seconds)
[20:37:49] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[21:09:09] *** Quits: dac (~dcx@user/dac) (Quit: ZNC 1.8.2 - https://znc.in)
[21:13:57] <codesections> Any thoughts on whether this is a bug? 
[21:14:00] <codesections> m: sub f(Any $a) { $a := 'nope'; $a }; say f 'yep'
[21:14:00] <camelia> rakudo-moar ba15173fd: OUTPUT: «nope␤»
[21:15:12] <codesections> I've been trying to wrap my head around that (and similar questions) for a bit now (see https://stackoverflow.com/questions/69231506/what-are-the-rules-for-re-binding ) and I still am not sure what the rules for re-binding are _supposed_ to be
[21:26:49] *** Joins: dcx (~dcx@user/dac)
[21:32:43] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:49:29] *** Joins: immediate (~immediate@94.235.193.214)
[22:02:51] *** Quits: immediate (~immediate@94.235.193.214) (Quit: Connection closed)
[22:03:07] *** Quits: dcx (~dcx@user/dac) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[22:03:16] *** Joins: notna (~Thunderbi@2a02:2455:361:9e00:95ce:e591:af59:ed39)
[22:16:59] *** Joins: dcx (~dcx@user/dac)
[22:17:50] *** Quits: ufobat_ (~martin@dynamic-095-118-027-197.95.118.pool.telefonica.de) (Ping timeout: 252 seconds)
[22:24:07] *** Joins: immediate (~immediate@94.235.193.214)
[22:34:24] *** Quits: immediate (~immediate@94.235.193.214) (Quit: Connection closed)
[22:35:47] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:43:50] *** Joins: stoned75 (~seb@78.203.129.116)
[22:45:25] *** Quits: notna (~Thunderbi@2a02:2455:361:9e00:95ce:e591:af59:ed39) (Quit: notna)
[23:06:07] *** Joins: immediate (~immediate@94.235.193.214)
[23:07:26] *** Quits: immediate (~immediate@94.235.193.214) (Client Quit)
