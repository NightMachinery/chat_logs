[00:01:34] *** Joins: epolanski (uid312403@id-312403.brockwell.irccloud.com)
[00:05:05] *** Quits: fulldecent (~textual@2603:301d:2601:700:556a:d5a3:a46a:4bfa) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:06:27] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[00:16:28] *** Joins: daoumilseitek (~daoumilse@164.96.146.77.rev.sfr.net)
[00:17:44] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[00:17:45] <da_wunder> lall-: spa have been there several years already
[00:21:56] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Ping timeout: 255 seconds)
[00:30:23] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[00:32:41] *** Quits: totenkoph (~scythe@gateway/tor-sasl/totenkoph) (Ping timeout: 244 seconds)
[00:35:49] *** Joins: judah (~judah@rrcs-74-87-190-146.west.biz.rr.com)
[00:36:14] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: IceChat - Keeping PC's cool since 2000)
[00:41:56] *** Quits: genom (~g@37.214.48.142) (Remote host closed the connection)
[00:50:28] *** Quits: judah (~judah@rrcs-74-87-190-146.west.biz.rr.com) (Quit: leaving)
[00:52:01] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[01:04:08] *** Quits: magla (~gelignite@55d41815.access.ecotel.net) (Quit: Stay safe!)
[01:10:35] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 252 seconds)
[01:15:25] *** Joins: brickfat (~brickfat@user/brickfat)
[01:42:54] *** Quits: daoumilseitek (~daoumilse@164.96.146.77.rev.sfr.net) (Quit: Leaving)
[01:47:28] *** Joins: judah (~judah@rrcs-74-87-190-146.west.biz.rr.com)
[01:56:07] *** Quits: judah (~judah@rrcs-74-87-190-146.west.biz.rr.com) (Read error: Connection reset by peer)
[01:59:41] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[02:05:26] <BadAdviceCat> NCS_One, one can look at SPA as a competing alternative to the POST/REDIRECT/GET approach: https://en.wikipedia.org/wiki/Post/Redirect/Get
[02:06:44] <BadAdviceCat> Sometimes, php scripts are made in such a way so that each time a Post request is used, a redirect is immediately used, to prevent duplicate Post request, as described in the Wikipedia link.
[02:07:42] <BadAdviceCat> SPA does not have this problem, because one can just make it so that after a request, Javascript can disable the form until the Post request is handled. It's more elegantly done in my opinion.
[02:09:20] <BadAdviceCat> SPA can also be seen as a gate-way drug, and a convenient excuse to also use Javascript to improve UX in how forms are handled (Such as client side input validation.) - Access to many modern JS libraries because why not? Easily obtainable via the use of npm package manage (Like PHP's composer.)
[02:12:08] <BadAdviceCat> The primary downside to SPA is that whenever the URL to your website (SPA) is published on social media sites such as facebook/discord, the URL will not generate additional info/preview of the website since it relies on content to already be rendered, and you won't get that with Javascript (Well, you sorta can via Server-side Rendering of SPA, but that's another rabbit hole that you need to take the time to navigate on your own via google. Google "
[02:12:09] <BadAdviceCat> SSR" and "javascript" keywords together)
[02:12:28] *** Quits: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 258 seconds)
[02:13:03] <NCS_One> right, been reading a little about it
[02:14:54] <NCS_One> also, reactjs, angular, svelte, lit and web components
[02:16:00] <NCS_One> I'm trying to decide wether to use SPA or MPA on my new project
[02:16:55] <BadAdviceCat> Using SPA, one doesn't have to use the Flash Message technique. Such as this basically ( https://tinyurl.com/7suwua8c : Basically, temporarily storing application state/data in session BEFORE redirect, then we can use that data AFTER the redirect ) - Since javascript can naturally just store this application state/data within the web browser as basic normal regular ole js variables.
[02:20:35] <BadAdviceCat> NCS_One, you can start right away by first installing npm. https://nodejs.org/en/download/current/ (On ubuntu: sudo apt-get install npm) - THen you should be able to execute the npx command that appears here: https://reactjs.org/docs/create-a-new-react-app.html#create-react-app
[02:20:38] <epolanski> is there something I can read about PHP's architecture? I'm interested into what happens when my server gets a request for a .php file if it has php enabled. My understanding is that files ending with .php get parsed by a php parser and this in turn returns html. This is clear but I was curious to read/see something more in-depth
[02:21:24] <BadAdviceCat> And then execute the npm command that will fetch you optional packages that you might be interested in using for your project. For example: https://react-hook-form.com/
[02:21:28] <__adrian> epolanski: that depends on the sapi you're using (e.g., php-fpm, mod_php, etc.). it has basically nothing to do with php itself.
[02:21:45] <epolanski> what's the sapi
[02:21:49] <__adrian> server api
[02:21:56] <__adrian> e.g., php-fpm, mod_php, etc.
[02:22:09] <epolanski> how do I know which one I'm using, from my server configuration?
[02:22:09] <__adrian> the thing you install on your webserver to run php
[02:22:34] <__adrian> well, presumably you installed it. or you can ask your webhost/sysadmin if not.
[02:22:38] <BadAdviceCat> epolanski, SAPI is the tool that your webserver will use for the sole purpose of executing PHP.
[02:23:04] <BadAdviceCat> mod_php is used by Apache web server. Apache web server can also use php-fpm.
[02:23:29] <Sammitch> the http server receives _a request_ and may optionally hand it over to a CGI worker that may or may not be PHP based on configuration that may or may not include decisisions based on arbitrary file extensions contained in the request, and than CGI process returns output that may or may not be HTML
[02:23:47] <epolanski> how do I know which one I'm using, all I see in httpd configuration is this: LoadModule php7_module /usr/local/opt/php@7.4/lib/httpd/modules/libphp7.so
[02:24:33] <__adrian> there's php_sapi_name(). i think it's listed in phpinfo() but not sure ottmh
[02:24:47] <BadAdviceCat> It's listed in phpinfo() too.
[02:24:58] <Sammitch> that apache with a PHP module loaded, so mod_php
[02:25:15] <epolanski> it's weird tho having to find out through phpinfo at runtime
[02:25:39] <__adrian> you don'
[02:25:40] <epolanski> when all I did was install through brew and modify an httpd config
[02:25:43] <__adrian> you don't _have to_
[02:25:55] <__adrian> like i said, presumably you'd know because you installed it
[02:25:59] *** Joins: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net)
[02:26:23] <__adrian> if you don't, then runtime is the easiest way to explain over irc
[02:27:04] <epolanski> how would I know
[02:27:05] <epolanski> https://formulae.brew.sh/formula/php
[02:27:28] <epolanski> there's no reference to no php-fpm or mod_php here
[02:27:40] <Blondie101010> epolanski:  you're right...  no one can expect you to know anything, but you should learn though
[02:27:50] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[02:28:06] <BadAdviceCat> epolanski, generally, as a web server admin, one of 3 will happen: 1. You've installed the SAPI to your web server yourself, explicitly/manually; 2. You won't have a clue what got installed, but you are happy that PHP works with the web server and it doesn't matter, goal obtained; or 3. You've done #1 or #2 before, and by experience, you know which is installed.
[02:28:11] <epolanski> insert obi wan kenobi meme: "that's why I' here"
[02:28:51] <Sammitch> epolanski: you might want to consider that you've got up to 4 questions bound up in this: 1. How does HTTP work? 2. How does a given HTTP server handle requests? eg: handing data over to a CGI process like PHP 3. How does PHP interface with HTTP servers via CGI? 4. How does PHP itself work as a script runtime?
[02:28:53] <__adrian> quick google implies (but not conclusively) that brew install php uses fpm
[02:29:04] <__adrian> BUT that's not necessarily consistent with the config file you mentioned
[02:29:09] <BadAdviceCat> Bluntly speaking, there is nothing more to it. This is one of those Either you Install it yourself, and THEN know.... OR, read the server configuration/run phpinfo to know it.
[02:29:13] <Blondie101010> epolanski:  you need to find out how to use your computer, including how to see what is installed, where the config files are, what ports are open
[02:29:29] <__adrian> there are many ways to install php. it's an os/package question more than a php question.
[02:30:03] <BadAdviceCat> epolanski, intentionally go to a 404 web page on your website, it might expose some info about what you have installed. Generally, there really is no other way to learn it, other than what we already told you.
[02:30:10] <Sammitch> each of those questions have in-depth answers, and 2/3 have wildly varying answers depending on the flavor of HTTP server you're using
[02:30:14] <Blondie101010> that said, a desktop OS is never a good choice for a web server
[02:30:19] <Sammitch> ^
[02:30:21] <BadAdviceCat> (By learn, I mean "Discovering Which SAPI you are using")
[02:30:26] <__adrian> i'd ask on a mac/brew channel
[02:30:37] <__adrian> that's the best bet at finding out how brew does it.
[02:31:23] <epolanski> Sammitch: thanks I know the first 2. As for the other questions, this is all very interesting but not mentioned in php docs. it just gives you few links to install php but there I can't see all of these infos about CGIs, sapis, etc
[02:31:26] <Blondie101010> brew is meant to install things blindly/seamlessly, but operating a webserver requires a minimum of understanding way beyond the base install
[02:31:37] <__adrian> someone here might use brew and know, but that's not me  :)  brew was better than straight macos but i didn't find it enjoyable at all
[02:32:17] <Blondie101010> epolanski:  because PHP is a programming language / engine, not your OS or webserver
[02:32:30] <Blondie101010> you need to know how to set up your OS and webserver
[02:32:39] <__adrian> "...but not mentioned in php docs"  // right - like i said, it's not a php thing. it's a how-you-installed-(or-your-os/distro-packaged) it thing.
[02:32:59] <epolanski> I don't need to operate a web server just to understand those various concepts you've written and was asking if there was some general resource that explained how PHP runs and is compiled/parsed where in various places
[02:33:02] <__adrian> i know this seems like a disconnect and might not be what you expect from other languages, esp. web languages
[02:33:23] <__adrian> "how PHP runs and is compiled/parsed where in various places"  this _depends on how you installed it_.
[02:33:30] <__adrian> it really does.
[02:33:45] <__adrian> php is not in charge of running itself and handling web requests.
[02:33:52] <epolanski> it is, you would not see a C reference that doesn't say that C gets compiled to assembly and then machine code e.g. regardless of which compiler you use
[02:34:00] <Blondie101010> epolanski:  do you have a php-fpm process running?
[02:34:50] <Blondie101010> what ports have listeners on them?
[02:35:09] <Blondie101010> if you can't answer those 2 questions, you have a LOT to learn or need someone to do things for you
[02:35:50] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:36:03] <Blondie101010> but again, don't install this on your MacOS, set up a Linux VM
[02:37:18] <epolanski> why would I
[02:37:39] <__adrian> because maybe that's how you're running php
[02:39:07] <epolanski> what's the issue with that, I am not planning to deploy anything, I don't see no issues into running php on my platform
[02:39:35] <Sammitch> epolanski: as I mentioned earlier, you asked a _very_ broad question
[02:39:53] <__adrian> if it's just for messing around, it's probably fine. but be aware it's differnt than if you were trying to develop something for actual use
[02:40:29] <Sammitch> if you want to know how HTTP servers talk to PHP, the general answer is: CGI https://en.wikipedia.org/wiki/Common_Gateway_Interface
[02:41:17] <Sammitch> the more modern/better version being FastCGI https://en.wikipedia.org/wiki/FastCGI
[02:41:19] <BadAdviceCat> epolanski, https://www.slideshare.net/ircmaxell/php-under-the-hood-dpc - Maybe this will help.
[02:43:14] <epolanski> this is interesting BadAdviceCat
[02:44:26] <epolanski> thanks all for your answers you've given me lots of useful things to look at, much appreciated
[02:45:01] <__adrian> np
[02:45:58] <BadAdviceCat> epolanski, 1. Web server (example apache); 2. Web server module (fast cgi); 3. SAPI (example: php-fpm) - In 3 steps, php is executed. - To understand what goes on in step #3, read up about opcode/opcache ( https://v3b4d4f5.rocketcdn.me/wp-content/uploads/1/wp-rocket-opcache-execute-code.png )
[02:49:08] <BadAdviceCat> https://stitcher.io/blog/preloading-in-php-74 then there is preloading which PHP has available, which can alter the step of what occurs in step #3. There is also https://stitcher.io/blog/php-8-jit-setup
[02:49:36] <BadAdviceCat> JIT, another separate feature, check the clickable links in that article to learn more about PHP's JIT.
[02:50:26] <epolanski> ok I'm starting to grasp things here
[02:51:16] <epolanski> so, e.g. on my system if I run `php -v` I get PHP 7.3.11 (cli) (built: Jun  5 2020 23:50:40) ( NTS )
[02:51:39] <__adrian> in that case, your sapi is php-cli
[02:53:54] <__adrian> this is another note that a lot of people miss - when you run php in your terminal, this is NOT the same as the php that your webserver runs
[02:54:23] <epolanski> if I "run" from my editor index.php I get from phpinfo: Built-in HTTP server
[02:55:24] <epolanski> that's on port 3000, if I check the same file on port 8080 (the one configured in apache), I get "Apache 2.0 Handler"
[02:56:04] <__adrian> that's  php -S
[02:56:37] <__adrian> the cli server. it's fine for your IDE to povide linting, etc., but not for much else.
[02:56:51] <epolanski> so I basically have 3 different php processes running right? cli, built in server and the apache one
[02:57:18] <__adrian> it's likely your ide is using your php-cli
[02:57:27] <__adrian> though it could be using a second install.
[02:57:35] <epolanski> ok clear
[02:58:00] <epolanski> and these processes are just programs that parse php right? this is clear
[03:02:10] <Blondie101010> guess we could say that
[03:02:31] <__adrian> conceptually
[03:02:36] <__adrian> sorry, work is pulling at me
[03:03:03] <epolanski> why "conceptually?"
[03:03:52] <epolanski> are those different than node processes running js and interfacing with some other apis?
[03:04:19] <Blondie101010> what processes are you talking about exactly?
[03:05:54] <Blondie101010> if you installed node, then sure you should see its process, but that is not even closely related to PHP
[03:07:00] <epolanski> some program has to parse php and interact with the external world
[03:07:14] <Blondie101010> that's php
[03:07:46] <Blondie101010> as mentioned, it depends on the SAPI which includes php-fpm, the modphp, php cli, etc
[03:08:24] <Blondie101010> what defines the SAPI is what it interfaces to (shell, webserver, etc)
[03:09:17] <Blondie101010> a good installation will have different configuration files for each SAPI
[03:11:44] <Sammitch> epolanski: the key difference between a PHP app and something like a node app is that the node processes are persistent, and PHP is not.
[03:12:34] <Sammitch> in the simplest terms, a PHP process created and destroyed within the scope of a single HTTP request.
[03:13:04] <epolanski> ok so some external program, apache or cli or ngi or whatever uses some api the so called sapi, to interface itself via a sapi module to some other program that does the php interpretation and running (like the zend engine) which uses the sapi module to communicate back with the external program
[03:13:07] <epolanski> is that correct?
[03:13:42] <epolanski> Sammitch: I guess that's the reason why I only have one php process open, but 3 different programs consuming php
[03:14:05] <epolanski> (the open, persistent one is php -S)
[03:14:16] <epolanski> the others are run on demand
[03:14:27] <Sammitch> yes, that's just PHP pretending to be an HTTP server
[03:15:36] <Sammitch> in a proper deployment you might have "hot" workers spun up waiting for requests, but at the end of the request they're recycled or otherwise returned to a "blank" state
[03:15:58] <epolanski> this is all very interesting
[03:16:47] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:17:35] <Sammitch> you _can_ make PHP a persistent, daemon-style service, but it's not particularly common to do so, and PHP isn't particularly well-suited for it
[03:18:32] <Blondie101010> well that's a personal choice
[03:19:28] <Sammitch> it's a whole other argument that's best not started at the moment :P
[03:19:50] <biberu> it's already been had ^^
[03:19:59] <Sammitch> *restarted
[03:21:25] <__adrian> that's all pretty objectively true
[03:21:48] <__adrian> the "personal choice" is whether you're going to do it anyway
[03:22:20] <Sammitch> the map says "here be dragons" but there's no fence to stop you going there
[03:22:30] <__adrian> might be fine, but probably n ot, if you're new to the idea
[03:22:44] <__adrian> especially* if
[03:23:54] <epolanski> thank you all, you've been tremendously helpful, even googling I cannot find so easily all of these "architectural" aspects of php. Found some information by googling stuff about the zend engine, I'll check more tomorrow
[03:23:59] <epolanski> thank you all for the information
[03:24:08] <epolanski> goodnight
[03:43:44] *** Quits: lall- (~alek@2403:6200:88a2:63d4:39ca:d3f8:46de:e4ec) (Quit: 42)
[03:48:27] *** Joins: Ox151 (~user@user/ox151)
[03:50:21] <Ox151> Hi, i am trying to run my php script from the cli but it doesnt seem to interpret it, it just prints out the script directly. Is there a part I am missing? I am guessing its simply php -f main.php is all you need to do,but it seems to not be working.
[03:53:48] <__adrian> you don't need to use -f (you can just do the filename)
[03:53:59] <__adrian> if it's printing the code, first guess is you didn't start with  <?php
[03:55:24] <Ox151> yeah.... it was that. I was under the impression a php script didnt need those defined if running from cli. And when I initally was debugging, I tried <? but that didnt work and I didnt bother using <?php
[03:55:31] <Ox151> thank you
[03:56:01] <Sammitch> short open tags were removed recently, always use <?php
[03:56:07] <__adrian> <? is a "short tag" - whether it's considered an opening tag depends on your ini settings. in general, people don't recommend enabling shorttags
[03:56:35] <__adrian> hm
[03:56:42] <__adrian> i didn't know there were removed in 8. cool
[03:56:52] <__adrian> *they
[03:56:58] <__adrian> good riddance imo  :p
[04:05:56] *** Quits: Viper-7 (~viper7@irc.viper-7.com) (Excess Flood)
[04:06:57] <s17> i heart short tag
[04:07:03] <s17> <3
[04:08:06] <s17> in general, shorttag is not recommended on low resource machine
[04:08:29] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[04:09:04] <__adrian> ...
[04:16:50] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[04:17:14] *** Joins: justache (~justache@user/justache)
[04:17:48] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[04:19:10] *** Joins: totenkoph (~scythe@gateway/tor-sasl/totenkoph)
[04:20:07] *** Joins: ferdna (~ferdna@user/ferdna)
[04:23:49] *** Parts: ash_worksi (~ash_m@user/ash-m/x-3292451) ()
[04:28:12] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 272 seconds)
[04:51:12] <BadAdviceCat> ...
[04:52:20] * Sammitch grabs his ten foot pole and shoves that comment back out into the river.
[05:00:06] *** Joins: P1RATEZ (piratez@user/p1ratez)
[05:09:37] *** Joins: Rockwood (~Rocky@user/rocky)
[05:12:57] <Rockwood> o/
[05:22:24] *** Quits: genomc (uid245282@id-245282.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[05:27:39] *** Quits: epolanski (uid312403@id-312403.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[05:30:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:34:11] *** Joins: vlm (~vlm@user/vlm)
[05:40:55] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Remote host closed the connection)
[05:49:58] <TML> s17: in general, shorttag is not recommended - full stop
[05:51:32] *** Joins: Viper-7 (~viper7@irc.viper-7.com)
[06:21:26] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[06:39:39] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 258 seconds)
[06:40:13] *** zerobeholder is now known as ZeroBeholder
[06:50:13] *** ZeroBeholder is now known as zerobeholder
[07:05:55] *** Joins: khanred (~khanred@user/khanred)
[07:06:03] <khanred> .clear
[07:06:06] <khanred> sorry
[07:24:54] *** Quits: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[07:25:29] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[07:32:09] *** Quits: khanred (~khanred@user/khanred) (Quit: Leaving)
[07:37:37] *** Joins: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net)
[07:44:44] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 255 seconds)
[07:45:08] *** Quits: P1RATEZ (piratez@user/p1ratez) (Remote host closed the connection)
[07:53:06] <Rockwood> oops
[07:55:32] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 255 seconds)
[08:00:56] *** Quits: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 255 seconds)
[08:01:49] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[08:03:39] *** Joins: Rockwood (~Rocky@user/rocky)
[08:05:01] *** Joins: Rockwood_ (~Rocky@user/rocky)
[08:07:56] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 252 seconds)
[08:12:15] *** zerobeholder is now known as ZeroBeholder
[08:14:12] *** Joins: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net)
[08:22:23] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[08:31:06] *** Joins: stenno (~stenno@user/stenno)
[08:32:03] <xisop> is there a psr code style standard that a new project should strive to follow?
[08:32:29] <xisop> let's say in an ideal world, i'm starting from scratch, what psr standard or code style document should i follow?
[08:32:38] *** Joins: FatBoyXPC (~FatBoyXPC@user/fatboyxpc)
[08:35:38] *** ZeroBeholder is now known as zerobeholder
[08:35:59] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[08:41:53] *** Quits: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net) (Ping timeout: 255 seconds)
[08:47:38] <Blondie101010> xisop:  you're referring to PSR-12, but do note that those decisions were taken by those on that committee and not everything *anyone* says is perfect or garanteed better than your own judgment and experience
[08:48:40] <xisop> Blondie101010: right i get that. i'm just looking at what's modern
[08:55:53] <Blondie101010> I have no concrete complaint on psr-12, but my only psr goto is psr-4
[08:56:09] <Blondie101010> that one is brilliant
[08:56:20] <Rockwood_> bye cya
[08:57:48] *** Quits: Rockwood_ (~Rocky@user/rocky) (Quit: The Time is Over)
[09:07:10] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 268 seconds)
[09:23:51] *** Joins: dlundgren_ (~dlundgren@wsip-72-215-185-7.sb.sd.cox.net)
[09:25:13] *** Joins: stenno (~stenno@user/stenno)
[09:26:47] *** Quits: dlundgren (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 258 seconds)
[09:26:47] *** dlundgren_ is now known as dlundgren
[09:30:02] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 255 seconds)
[09:30:37] *** Joins: stenno (~stenno@user/stenno)
[09:30:38] *** Joins: genomc (uid245282@id-245282.stonehaven.irccloud.com)
[09:35:23] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[09:51:15] *** Joins: dlundgren_ (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net)
[09:53:38] *** Quits: dlundgren (~dlundgren@wsip-72-215-185-7.sb.sd.cox.net) (Ping timeout: 252 seconds)
[09:53:39] *** dlundgren_ is now known as dlundgren
[09:54:12] *** Quits: totenkoph (~scythe@gateway/tor-sasl/totenkoph) (Quit: totenkoph)
[10:03:10] *** Joins: brickfat (~brickfat@user/brickfat)
[10:17:49] *** Joins: ecso (~ecso@2600:6c4e:a00:340::1905)
[10:24:45] *** Joins: stenno (~stenno@user/stenno)
[10:29:50] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[10:30:41] *** Quits: Ox151 (~user@user/ox151) (Quit: ERC (IRC client for Emacs 27.2))
[10:37:55] *** Joins: stenno (~stenno@user/stenno)
[10:42:22] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[10:49:21] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:50:29] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[11:01:11] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Ping timeout: 252 seconds)
[11:19:38] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[11:19:42] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[11:21:46] *** Quits: congratulated (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 246 seconds)
[11:22:39] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[11:26:49] *** Joins: congratulated (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[12:10:06] *** Joins: pk004 (~pk004@user/pk004)
[12:17:47] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[12:38:02] *** Joins: pycode (~pycode@2001:b07:5d28:551:94a7:8b08:6e08:452a)
[12:46:41] *** Joins: brickfat (~brickfat@user/brickfat)
[12:48:33] *** Quits: joo (~joo@jodb.mikjaer.com) (Quit: leaving)
[13:04:44] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[13:06:58] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 272 seconds)
[13:19:41] *** Joins: MICROburst1 (~Thunderbi@dynamic-089-014-222-085.89.14.pool.telefonica.de)
[13:21:46] *** Quits: MICROburst (~Thunderbi@x4dbf288a.dyn.telefonica.de) (Ping timeout: 240 seconds)
[13:21:46] *** MICROburst1 is now known as MICROburst
[13:26:53] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[13:39:19] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:44:53] *** Joins: Warped (~Warped@user/warped)
[13:48:06] <TernaryOperator> My opinion on PSR-12 is "pick a standard, I pretty much don't care, just pick and stick to it" it smooths so much minutiae that is irrelevant, it's one of the things go got absolutely right with gofmt
[13:51:42] *** Joins: entuland (~entuland@user/entuland)
[14:05:27] <xisop> i remembered that phpcs can fix up my code without me really having to worry about it, so i'm using that
[14:20:46] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[14:21:51] *** Quits: supernovah (~supernova@mail.ijk.nz) (Remote host closed the connection)
[14:26:03] *** Joins: phlixi (~phlixi@tmo-080-223.customers.d1-online.com)
[14:49:32] *** Quits: pycode (~pycode@2001:b07:5d28:551:94a7:8b08:6e08:452a) (Ping timeout: 255 seconds)
[14:56:38] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Read error: Connection reset by peer)
[15:20:36] <TernaryOperator> aye, phpcs/phpcbf with PSR-12 is the default for all my projects at this point
[15:21:14] <TernaryOperator> just run all the dev tooling in docker containers and every project has "foo/docker" so anyone else can just do `docker run --rm phpcs` and it's all correct and working
[15:21:54] <TernaryOperator> also eliminates a lot of bullshit around different devs having different versions of different things (and smooths out the horseshit with things like npm been non-idempotent)
[15:22:06] <TernaryOperator> since everything everywhere is running node:14.whatever not "node installed on different OS"
[15:53:11] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[15:54:32] *** Joins: Ducki (~ducki@user/ducki)
[15:55:48] *** Quits: Ducki_ (~ducki@user/ducki) (Ping timeout: 250 seconds)
[16:00:26] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[16:17:17] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:20:51] *** Joins: pycode (~pycode@2001:b07:5d28:551:81d0:621c:8a3b:bd6d)
[16:29:25] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Ping timeout: 246 seconds)
[16:30:41] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[16:32:48] *** Quits: BadAdviceCat (~BadAdvice@user/badadvicecat) (Client Quit)
[16:40:13] *** Joins: piers (~piers@82-71-0-184.dsl.in-addr.zen.co.uk)
[16:53:30] *** Joins: BadAdviceCat (~BadAdvice@user/badadvicecat)
[16:54:25] *** Joins: hans (~hans@telia-59082b-193.connect.netcom.no)
[16:56:13] <hans> how do i class C{const FOO=1;function f(){echo "a{$this::FOO}bc";}} ? does quotationmarks support member consts?
[16:58:53] <Blondie101010> https://3v4l.org
[16:59:03] <Blondie101010> faster to test than make a question with it
[17:01:39] <hans> Blondie101010, not helpful. i've tried a variety of different ways, but haven't found anything that works. "{$this::FOO}" "{$this->FOO}" "{$self::foo}"  - my best guess so far is that quotation marks doesn't support class constants
[17:02:21] <Blondie101010> I agree that you were not helpful to yourself by not giving your actual situation
[17:03:30] <stenno> the quotation marks do not care what you interpolate
[17:03:33] <TernaryOperator> hans: off the top of my head you can't do it with class constants, so use sprintf instead
[17:03:49] <stenno> wait what
[17:04:02] <Blondie101010> also note that a *class* constant does not belong to *$this*
[17:04:27] <BadAdviceCat> hans, you can't do Constants in strings using {} syntax.
[17:04:39] <stenno> what?
[17:04:40] <stenno> what not?
[17:04:53] <BadAdviceCat> It create an ambiguity.
[17:05:21] <stenno> hmm..
[17:05:57] <hans> Blondie101010, actually $this has full access to the current object's class constants through :: , eg $this::CON works fine
[17:06:08] <Blondie101010> not actually sure it's really ambiguous but it is not supported
[17:06:19] <stenno> bizarre-ish
[17:07:28] <TernaryOperator> it works but it's not typically a good idea, you'd want self::FOO or Thing::FOO, $this::FOO doesn't make much sense if you think about it, a constant is invariant across all objects of that class
[17:08:17] <BadAdviceCat> hans, So anyway, you're stuck with doing: "STRING". $this::something ."STRING";
[17:08:41] <hans> right, not happy about it but gotcha
[17:08:42] <TernaryOperator> or sprintf which is often more readable
[17:08:57] <hans> personal preference really
[17:08:57] <TernaryOperator> especially with a good editor/IDE that highlights each var as you focus the cursor on it
[17:09:13] <TernaryOperator> it's a personal preference unless you are on my team then we use sprintf
[17:09:26] <TernaryOperator> *insert Dredd I AM THE LAW meme*
[17:10:13] <BadAdviceCat> cartman-i-am-the-law.png
[17:10:14] <Blondie101010> I find that requirement a little bit harsh
[17:10:34] <Blondie101010> you must work with a lot of juniors
[17:10:38] <hans> speaking of, is php's printf binary-safe? can you do printf("%s", "\x00foobar") without corruption?
[17:10:49] <TernaryOperator> Blondie101010: I would as well but you should see some of the monstrosities that result otherwise, You can't always rely on the good taste of some devs ;)
[17:11:29] <stenno> is binary safety of C functions still an issue in modern PHP versions?
[17:11:33] <BadAdviceCat> hans, !+tias
[17:11:33] <php-bot> hans, [TIAS] Try It And See. If you want to know if or how something works, try it first. "Testing Is Absolutely Simple"
[17:11:36] <TernaryOperator> and there is a benefit in having a consistent way everywhere for readability since the dev reading it doesn't have to mentally parse two different ways of solving the same thing
[17:11:37] <hans> it is
[17:11:45] <stenno> i thought they handled that in PHP5 or so
[17:11:47] <stenno> blep
[17:11:51] <Blondie101010> true, but in my experience, proper code reviews and leadership can handle most...  those it doesn't work with are free to find another job
[17:12:12] <hans> stenno, no (a few rare exceptions; for example, Exception's string is non-binary-safe iirc)
[17:12:17] <BadAdviceCat> Blondie101010, but but... What if I dun wanna?
[17:12:49] <TernaryOperator> Blondie101010: heh, thats how we arrived at "just use sprintf", I kept rewriting their monstrosities in CR's until they just defaulted to sprintf then I updated our code guidelines
[17:12:55] <BadAdviceCat> What if I can make them accommodate for me and my needs?!
[17:12:59] <TernaryOperator> I find as a lead "show don't tell" works 99% of the time
[17:13:10] <TernaryOperator> but I reserve the right to that 1% if it devolves into a bunfight
[17:14:28] <hans> stenno, vast majority is binary safe these days, but check the notes section here https://www.php.net/manual/en/function.error-log.php
[17:14:52] <Blondie101010> that is not the same thing at all
[17:14:53] *** Joins: Naktibalda_ (~Naktibald@88.135.22.17)
[17:15:14] <Blondie101010> the string is sent as is but the logging can not accomodate the content you give it
[17:15:34] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 268 seconds)
[17:17:51] <hans> Blondie101010, not true. $ php -r 'ini_set("error_log","test.log");error_log("\x00abc");'; cat test.log  [09-Jul-2021 12:47:42 UTC]
[17:18:41] <Blondie101010> you just showed what we both agreed doesn't work
[17:19:05] <hans> it's an on-disk file, an on-disk-file can accomodate binary data
[17:19:26] <BadAdviceCat> hans, under which charset? :D
[17:20:01] <hans> all of them
[17:20:37] <Blondie101010> hans:  look at PHP's code for error_log()...  do you see anything breaking the string there?  obviously not!
[17:21:01] <Blondie101010> it is sent as is
[17:21:12] <hans> Blondie101010, i haven't looked at the code, but i have tested it, and it's definitely not sent as is
[17:21:14] <Blondie101010> which implies that it breaks on \0
[17:21:24] <Blondie101010> how else would it work?
[17:22:25] <BadAdviceCat> hans, basically. That means... It's written as-is. But when you open the file up using a text editor, it's going to look glitch as hell.
[17:22:32] <BadAdviceCat> Hella glitchy.
[17:22:35] <Blondie101010> that's not it
[17:22:45] <__adrian> "stenno> is binary safety of C functions still an issue in modern PHP versions?"  when php says "binary-safe" it mainly means that it does not consider any possible charsets when it does {whatever it does}.
[17:23:07] <Blondie101010> inside a php process, strings are represented as byte sequences of a specified length, but that's not the case for the rest of the OS
[17:24:03] <__adrian> (yes, php doesn't have the binary safety issues C does.)
[17:24:06] <hans> BadAdviceCat, here is the file opened as a hex editor, the null byte and the abc behind it is definitely not present: https://i.imgur.com/Dmuc47p.png
[17:24:14] <hans> s/as a/in a/
[17:24:54] <Blondie101010> sure, it's on spec, and the warning is there in case you don't understand how things work
[17:25:06] <Blondie101010> so no bug and no way to change that
[17:25:20] <stenno> __adrian: where 0-byte as string terminator would be ASCII charset?
[17:25:52] <Blondie101010> stenno:  not a charset thing, and no sane charset allows \0
[17:25:53] <__adrian> no, that would be C behavior
[17:26:28] <__adrian> because C needs to know where the string ends; whereas php already knows where it ends (because it knows the length)
[17:26:36] <hans> Blondie101010, unfortunately UTF8 allows \0... legal UTF8 can contain \0
[17:26:45] <hans> i fking hate it, but its true
[17:27:14] <Blondie101010> I have a slight doubt about that, but no time to dig into it right now
[17:27:19] <TernaryOperator> all of this could have been avoided if we'd replaced C (or just done what Pascal did and set the first byte as the length of the string) :D
[17:27:56] <Blondie101010> TernaryOperator:  sure, and then we would have suffered variable lenght prefixes
[17:28:01] <hans> > Modified UTF-8 (MUTF-8) originated in the Java programming language. In Modified UTF-8, the null character (U+0000) uses the two-byte overlong encoding 11000000 10000000 (hexadecimal C0 80), instead of 00000000 (hexadecimal 00).[65] Modified UTF-8 strings never contain any actual null bytes but can contain all Unicode code points including U+0000,[66] which allows such strings (with a null byte appended) to be processed by traditional
[17:28:02] <hans> null-terminated string functions. All known Modified UTF-8 implementations also treat the surrogate pairs as in CESU-8.
[17:28:08] *** Quits: Akimb (~Akimb@78-58-31-17.static.zebra.lt) (Read error: Connection reset by peer)
[17:28:37] <__adrian> utf-8 can contain nulls but they're not really "characters"
[17:28:41] <biberu> Blondie101010: nah, standard pascal strings can only be 255 bytes long ;)
[17:28:51] <Blondie101010> hans:  you just again showed something that doesn't match your statement
[17:29:27] <Blondie101010> that quote shows that using \0 in a charset is a worldwide problem that was eliminated
[17:29:30] <TernaryOperator> yep, and for a lot of cases that would be fine, alternatively just don't use NUL as a delimiter
[17:29:47] <__adrian> s/delimiter/terminator/
[17:29:52] <TernaryOperator> I think Rust gets it right (but they have the benefit of hindsight) just use a Vector of UTF-8 type for strings
[17:30:01] <TernaryOperator> yeah, terminator
[17:30:42] *** Naktibalda_ is now known as Naktibalda
[17:30:51] <Blondie101010> "I'll be back"
[17:31:23] <__adrian> if anyone is still talking about the original issue (where writing to the file stopped at \0) that's likely an OS issue. php said "write this" and the OS saw the \0 midway through and said "oh ur done"
[17:31:39] <Blondie101010> exactly what I said
[17:31:41] <TernaryOperator> ^
[17:31:48] <__adrian> sorry, i didn't read everything
[17:32:44] <__adrian> i didn't read that part, for example, where anyone explained why it was necessary to write a null byte
[17:33:39] <Blondie101010> that wasn't clearly mentioned as hans showed he knows C, though it doesn't reflect on his interpretation of the situation
[17:34:30] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:43:14] *** Joins: freeman_h1 (~freeman_h@2a02:c7f:fc54:ba00:cd5e:49b3:6c28:3f9a)
[17:44:23] *** Joins: nuala (~nuala@user/nuala)
[17:50:25] <hans> not sure i showed i know C, but yes i do. (even have C code running on mars ^^ libcurl contributor~)
[17:51:51] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[17:52:11] *** Joins: biberu (~biberu@user/biberu)
[17:53:52] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (Quit: ZNC - http://znc.in)
[17:54:10] *** Quits: freeman_h1 (~freeman_h@2a02:c7f:fc54:ba00:cd5e:49b3:6c28:3f9a) (Remote host closed the connection)
[17:54:12] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[17:54:24] *** Quits: Ducki (~ducki@user/ducki) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[17:54:44] *** Joins: Ducki (~ducki@user/ducki)
[17:54:45] *** Quits: noord (~noord@user/noord) (Quit: ZNC 1.8.2 - https://znc.in)
[17:55:23] *** Quits: silverwhitefish (~hidden@47.202.102.10) (Remote host closed the connection)
[17:55:26] *** Quits: catbeard (~noise@user/catbeard) (Ping timeout: 252 seconds)
[17:55:52] *** Joins: silverwhitefish (~hidden@47.202.102.10)
[17:56:24] *** Joins: catbeard (~noise@user/catbeard)
[17:56:36] *** Joins: noord (~noord@user/noord)
[17:57:17] *** Quits: infernix (~nix@spirit.infernix.net) (Quit: ZNC - http://znc.sourceforge.net)
[18:00:00] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[18:01:41] *** Quits: hans (~hans@telia-59082b-193.connect.netcom.no) (Ping timeout: 255 seconds)
[18:02:41] *** Quits: AMG (ghebo@user/amg) (Quit: Quit)
[18:02:51] *** Joins: infernix (nix@2a02:22a0:bbb1:d500::2)
[18:12:05] *** Joins: jamea (~jamea77@187.185.190.209)
[18:12:14] <jamea> hi all anya dvice why get this error: https://paste.debian.net/1203903/
[18:13:03] <stenno> because you don't have permission to open that file
[18:13:07] <stenno> like the error says
[18:13:35] *** Quits: piers (~piers@82-71-0-184.dsl.in-addr.zen.co.uk) (Ping timeout: 252 seconds)
[18:13:57] <stenno> so make sure the user executing that script has the appropriate permissions
[18:14:40] <jamea> which user? www-data
[18:15:00] <stenno> the user executing your script
[18:15:10] <stenno> dunno how your setup is
[18:15:23] *** Joins: freeman_h1 (~freeman_h@2a02:c7f:fc54:ba00:cd5e:49b3:6c28:3f9a)
[18:15:39] <jamea> is a php progrm
[18:15:41] <stenno> if you are using apache with mod_php and the apache user is www-data, then it will be www-data
[18:16:15] <stenno> but that is something only you can know
[18:18:35] <jamea> here more info: https://paste.debian.net/1203905/
[18:21:23] <stenno> so you are using mod_php and not php-fmp ?
[18:21:25] <stenno> fpm*
[18:23:00] <stenno> jamea: what does 'sestatus' give?
[18:23:47] <stenno> might be a SElinux issue
[18:27:06] *** Joins: piers (~piers@82-71-0-184.dsl.in-addr.zen.co.uk)
[18:27:30] <jamea> -su: sestatus: command not found
[18:27:50] <stenno> hm
[18:28:17] <stenno> no idea then
[18:30:25] <jamea> -su: getenforce: command not found
[18:30:27] <jamea> also
[18:30:32] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:33:38] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 255 seconds)
[18:38:47] *** Quits: jamea (~jamea77@187.185.190.209) (Ping timeout: 252 seconds)
[18:44:46] *** Joins: dlundgren_ (~dlundgren@utm1.ctic-inc.com)
[18:47:27] *** Quits: dlundgren (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 268 seconds)
[18:47:27] *** dlundgren_ is now known as dlundgren
[19:00:20] *** Joins: jamea77 (~jamea77@187.185.190.209)
[19:00:35] <jamea77> how to know  if i use: mod_php or php-fpm
[19:01:13] <AllenJB> Check the "Server API" in phpinfo() from a web request
[19:03:48] <biberu> jamea77: what distro are you on?
[19:04:46] <jamea77> PRETTY_NAME="Debian GNU/Linux 9 (stretch)"
[19:05:29] <jamea77> Server API	Apache 2.0 Handler
[19:05:33] <jamea77> PHP Version 7.0.33-0+deb9u10
[19:08:00] <biberu> is the file locked by another process?
[19:08:20] <jamea77> i think use mod_php
[19:08:21] <jamea77> core mod_so mod_watchdog http_core mod_log_config mod_logio mod_version mod_unixd mod_access_compat mod_alias mod_auth_basic mod_authn_core mod_authn_file mod_authz_core mod_authz_host mod_authz_user mod_autoindex mod_deflate mod_dir mod_env mod_filter mod_mime prefork mod_negotiation mod_php7 mod_reqtimeout mod_setenvif mod_status
[19:09:28] <jamea77> biberu AllenJB can read: https://paste.debian.net/1203905/
[19:09:29] <jamea77> ?
[19:16:48] <biberu> jamea77: it looks like mod_php, yes, and it looks like apache is running as www-data. phpinfo should show the user too, not sure if those can be different when using mod_php
[19:17:03] <biberu> jamea77: did you check if the file is locked?
[19:19:12] <AllenJB> Are any restrictions being applied from outside of PHP itself (chrooting or permissions restrictions, perhaps enforced by selinux or systtemd?)
[19:19:35] <AllenJB> *systemd
[19:19:45] <stenno> no selinux
[19:33:42] *** Quits: jamea77 (~jamea77@187.185.190.209) (Read error: No route to host)
[19:41:28] *** Joins: dibber (~dibber@c-73-14-187-235.hsd1.co.comcast.net)
[19:49:14] *** Joins: delboy1978uk (~delboy197@d51a484d1.access.telenet.be)
[20:02:22] *** Quits: delboy1978uk (~delboy197@d51a484d1.access.telenet.be) (Quit: delboy1978uk)
[20:09:25] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[20:20:30] *** Quits: genomc (uid245282@id-245282.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[20:35:07] *** Quits: bodiccea_ (~bodiccea@user/bodiccea) (Ping timeout: 246 seconds)
[20:36:26] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[20:39:22] *** Quits: phlixi (~phlixi@tmo-080-223.customers.d1-online.com) (Ping timeout: 240 seconds)
[20:40:43] *** Joins: phlixi (~phlixi@aftr-62-216-205-24.dynamic.mnet-online.de)
[20:49:04] *** Joins: Rockwood (~Rocky@user/rocky)
[20:50:53] *** Quits: pycode (~pycode@2001:b07:5d28:551:81d0:621c:8a3b:bd6d) (Ping timeout: 255 seconds)
[20:52:01] *** Joins: dlundgren_ (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net)
[20:53:35] *** Quits: dlundgren (~dlundgren@utm1.ctic-inc.com) (Ping timeout: 255 seconds)
[20:53:35] *** dlundgren_ is now known as dlundgren
[21:04:59] *** Joins: genomc (uid245282@id-245282.stonehaven.irccloud.com)
[21:15:11] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 255 seconds)
[21:20:58] *** Quits: piers (~piers@82-71-0-184.dsl.in-addr.zen.co.uk) (Ping timeout: 240 seconds)
[21:27:35] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[21:28:02] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:32:40] *** Joins: pmercado (~pmercado@186.107.41.92)
[21:34:03] *** Quits: \mSg (~mSg@user/msg/x-0285936) (Remote host closed the connection)
[21:34:29] *** Joins: \mSg (~mSg@user/msg/x-0285936)
[21:38:24] <pmercado> Hi, how is supposed to be increased execution time in a php file? I think I have problems with nginx rather than php: I already have changed php.ini max_execution_time value, and now I get nginx gateway error, nginx logs say "connection reset by peer" and php logs say "execution timed out (69.389415 sec), terminating". Current max_execution_time value is 300.
[21:38:58] <__adrian> you need to configure nginx to wait at least as long as you want php to run
[21:39:08] <__adrian> BUT that's an absurdly long time for a web request
[21:39:40] <__adrian> you should not be doing anything during a web request that takes more than a couple seconds
[21:39:49] <__adrian> (maybe you need a job queue?)
[21:41:40] *** Joins: Phil-Work (~phil@62.3.100.20)
[21:44:20] *** Quits: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[21:44:47] <pmercado> __adrian: yep, currently developing with a trashed platform, project manager understood that he need an inhouse team
[21:54:36] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: I couldn't repair your brakes, so I made your horn louder.)
[21:57:11] *** Joins: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net)
[22:13:26] *** Joins: genom (~g@37.214.38.41)
[22:16:03] *** Joins: stenno (~stenno@user/stenno)
[22:47:24] <Sammitch> if I'm iterating over a UTF string like `$c = mb_substr($in, $i, 1, 'UTF-16LE')` is there to keep track of the byte position in the input string aside from converting $c back to the source encoding and counting the bytes?
[22:49:12] <Byteflux> Sammitch: not sure I follow the question. If you're doing string manipulation with mb_* functions, you should assume character positions and not byte positions.
[22:50:11] <__adrian> there's no "converting encoding"
[22:50:21] <Sammitch> I'm writing a stream filter, so I need both.
[22:50:22] <__adrian> but otherwise, yes, you just count the bytes
[22:50:59] <Sammitch> I need to know my position in the input in case the bucket ends in the middle of a codepoint
[22:55:04] <Byteflux> Sammitch: strlen($c) is the byte length which you can use to offset the position, is that what you want?
[22:56:02] <Sammitch> god dammit.
[22:56:15] <Sammitch> thank you for pointing out my obvious stupidity.
[22:57:28] <Byteflux> no worries, encodings drive me mad too
[22:58:56] <Sammitch> I actually like dealing with encodings, probably because it's one very narrow area of expertise where I get to have an inflated ego about it :3
[23:28:22] *** Quits: freeman_h1 (~freeman_h@2a02:c7f:fc54:ba00:cd5e:49b3:6c28:3f9a) (Read error: Connection reset by peer)
[23:30:50] *** Quits: LuKaRo (~LuKaRo@p200300dfa714f1881c4e96891ae58782.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[23:36:20] *** Joins: LuKaRo (~LuKaRo@p57b15425.dip0.t-ipconnect.de)
[23:36:45] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 256 seconds)
[23:36:57] *** Joins: goddard (~goddard@user/goddard)
[23:37:07] <goddard> so what is if($variable) equivelent to
[23:37:19] <goddard> if its not boolean
[23:37:33] <goddard> is that also true or false if empty or not?
[23:39:36] *** Joins: poseidon (~broseidon@users.757.org)
[23:39:42] <poseidon> I want to create a program that runs downloads some CVS data from various places and stores it in a database. Is there a better way than setting up a server with a cronjob that runs a .php file?
[23:41:13] <goddard> no
[23:41:20] <goddard> that is the best way
[23:42:56] <TinoDidriksen> PHP + cron would work fine.
[23:43:52] <goddard> crontab -e
[23:43:59] <goddard> @hourly
[23:44:07] <goddard> @daily
[23:44:25] *** Joins: FightingFalcon (~sdasavcsg@user/fightingfalcon)
[23:53:21] <Sammitch> goddard: https://www.php.net/manual/en/types.comparisons.php
[23:53:33] *** Joins: delboy1978uk (~delboy197@109.132.42.202)
[23:53:58] <Sammitch> whatever $variable is it will be non-strictly juggled to boolean
[23:56:18] <Sammitch> but if($variable) is usually just indicative of laziness and is prone to error
