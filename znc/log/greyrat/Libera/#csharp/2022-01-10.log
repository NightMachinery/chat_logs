[00:05:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[00:06:24] *** Quits: dontyouloveshort (~PeterPan@vmd85231.contaboserver.net) (Read error: Connection reset by peer)
[00:11:37] *** Quits: viaSanctus (~viaSanctu@user/viasanctus) (Quit: Connection closed)
[00:15:24] <irwiss>  https://www.reddit.com/r/ProgrammerHumor/comments/rzp5it/was_searching_for_calculator_project_in_github/
[00:15:44] <irwiss> someone's homework no doubt :P
[00:35:09] *** Joins: ravindUwU (~ravindUwU@user/ravinduwu)
[00:43:17] *** Quits: kobo (~kobo___@c-d02b225c.029-1613-6f72651.bbcust.telenor.se) (Ping timeout: 240 seconds)
[00:44:17] <ravindUwU> Hiya 👋!
[00:45:24] <ravindUwU> So I've got 2 EF models `Parent { ...; ICollection<Child> Children; }` and `Child { ...; Parent parent; }`. To serve a list of Parents with Children, I've simply served the items in db.Parents.Include((p) => p.Children).
[00:45:28] <ravindUwU> The issue is that navigation properties are JSON-serialised, which means `Parent` entities are repeated in children.
[00:45:38] <ravindUwU> My understanding is that this is solved by making separate "DTO"s that include only the properties needed... is that correct? 🤔
[00:46:23] <ravindUwU> So in this case, a ChildDTO without the Parent navigation prop, and a ParentDTO with a list of ChildDTOs?
[01:01:14] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[01:14:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:22:39] <Nasp> Yes
[01:27:36] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[01:35:29] <ravindUwU> Nasp, thanks!
[01:35:52] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 256 seconds)
[01:37:02] *** Quits: ravindUwU (~ravindUwU@user/ravinduwu) (Quit: KTHXBAI)
[01:49:16] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[01:52:20] *** Joins: Lukky_ (~Lukky@modemcable248.39-20-96.mc.videotron.ca)
[01:53:26] *** Quits: Lukky (~Lukky@modemcable248.39-20-96.mc.videotron.ca) (Ping timeout: 256 seconds)
[02:03:21] *** Joins: exvicesindaco_ (~exvicio@host-79-54-77-176.retail.telecomitalia.it)
[02:04:37] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Ping timeout: 256 seconds)
[02:04:46] *** exvicesindaco_ is now known as exvicesindaco
[02:07:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[02:19:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:45:14] *** Quits: exvicesindaco (~exvicio@host-79-54-77-176.retail.telecomitalia.it) (Quit: Going offline, see ya! (www.adiirc.com))
[03:27:20] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[03:28:01] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[03:28:04] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[03:41:53] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:52:49] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[04:00:34] <_Shurik_> oy
[04:01:22] <_Shurik_> Just upgraded to 64GB ram.  Anyone needs DDR4-2600 8Gig 4 modules for cheap?
[04:04:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[04:10:08] *** Joins: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[04:13:15] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[04:20:40] <bkool> _Shurik_, wow, that's nice. I've been fine with 16GB for far.
[04:20:43] <bkool> what did you upgrade from?
[04:26:46] *** Joins: Fairy (~Fairy@ti0004a400-0210.bb.online.no)
[04:39:10] <bpmedley> _Shurik_ : Is the ram needed for VMs or something else?
[04:40:23] <_Shurik_> bkool: from 32 to 64
[04:41:01] *** Quits: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[04:41:07] <_Shurik_> bpmedley: no, just crap eats up mem quickly
[04:41:17] <bpmedley> Hope the system is running better now
[04:46:25] <_Shurik_>  oh yeah
[04:50:00] *** Joins: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com)
[04:54:05] *** Joins: Guest71 (~Guest71@bras-base-toroon0817w-grc-38-184-146-189-197.dsl.bell.ca)
[05:03:33] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[05:54:00] *** Joins: Lazenca (~lazenca@user/lazenca)
[06:01:26] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:09:37] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Quit: leaving)
[06:29:49] *** Quits: Fairy (~Fairy@ti0004a400-0210.bb.online.no) (Ping timeout: 256 seconds)
[06:57:08] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[06:57:33] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[06:59:20] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:03:31] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:03:36] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:12:07] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:12:38] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:14:29] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:16:20] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[07:16:42] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:18:58] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:19:26] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:21:16] *** Quits: Guest71 (~Guest71@bras-base-toroon0817w-grc-38-184-146-189-197.dsl.bell.ca) (Quit: Client closed)
[07:29:49] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:30:19] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:30:32] *** Quits: Kalroth (~Kalroth@knas.io) (Quit: Nooo...)
[07:35:03] *** Joins: learningc (~IceChat95@modemcable253.161-226-192.mc.videotron.ca)
[07:36:34] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:37:07] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:39:52] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[07:40:59] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[07:44:37] *** Quits: bin101_ (~bin101@user/bin101) (Ping timeout: 256 seconds)
[07:48:56] *** Joins: bin101 (~bin101@user/bin101)
[08:05:47] *** Joins: Kalroth (~Kalroth@knas.io)
[08:06:53] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:07:40] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:08:21] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:09:17] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:09:19] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[08:11:38] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:11:45] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:12:00] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:12:15] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:13:44] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:13:58] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:15:38] *** Joins: Jantz (~IceChat95@2407:7000:8d04:100:2009:c7d3:533:666c)
[08:15:46] *** Quits: Jantz (~IceChat95@2407:7000:8d04:100:2009:c7d3:533:666c) (Excess Flood)
[08:19:59] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:20:15] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:21:36] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:22:40] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:22:54] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:26:12] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:27:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[08:28:12] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:28:34] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:35:03] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[08:45:47] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:46:04] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:52:40] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:52:49] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:55:34] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[08:55:41] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[08:57:34] *** Quits: Cecen (~Cecen@cpe-23-242-10-17.socal.res.rr.com) (Ping timeout: 260 seconds)
[08:59:00] *** Quits: learningc (~IceChat95@modemcable253.161-226-192.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:07:11] *** Joins: Assault (~Assault@87-95-55-3.bb.dnainternet.fi)
[09:21:39] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[09:32:57] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[09:33:06] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[09:43:22] <ap5> Herlo and good morningz
[09:51:24] <ap5> So Postgres only implement three of the four isolation levels, have ON CONFLICT DO UPDATE and have MVCC on by default. I like it!!
[09:54:34] <sysRPL> hi
[10:00:12] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Read error: Connection reset by peer)
[10:03:17] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:03:31] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[10:05:32] <tsujp> I have an AsyncPageable, is there a way to return the entire list of pages of this? I can enumerate and loop each page but what I need is instead the entire list
[10:05:42] <tsujp> Should I just enumerate and page and construct my own list and return it?
[10:06:08] <tsujp> By entire list of pages I meant "entire list of the pages contents so I don't have to page through it but can enumerate each item directly"
[10:06:47] *** Joins: kobo (~kobo___@92.34.43.208)
[10:23:47] *** Joins: MaNa2k (~MaNa2k@224.81-166-66.customer.lyse.net)
[10:24:01] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:24:07] *** Quits: MaNa2k (~MaNa2k@224.81-166-66.customer.lyse.net) (Read error: Connection reset by peer)
[10:24:07] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:26:03] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:26:17] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:29:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[10:30:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:33:21] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:33:42] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[10:40:13] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 240 seconds)
[10:41:03] *** Joins: cliluw (~cliluw@47.147.73.223)
[10:43:53] <jmer> morning
[10:44:42] <ap5> jmer, i have converted to postgres
[10:44:44] <ap5> sorry
[10:44:50] <jmer> WHy sorry?
[10:44:53] <ap5> :D
[10:44:59] <jmer> I think that would bring me joy as well
[10:45:22] <ap5> I need to apologise to someone that also like SQL
[10:45:34] <jmer> ... how come?
[10:45:34] <ap5> My wife doesn't git it
[10:45:36] <jmer> lol
[10:46:03] <jmer> If I had to pay for licenses I would probably pick pgsql as well xD
[10:46:10] <ap5> :D
[10:46:27] <jmer> soo many places SQL server is just used as a glorified excel sheet
[10:46:33] <ap5> + it comes with so much fun out of the bag, that you dont need to configure
[10:46:41] <ap5> Oh yis
[10:47:11] <jmer> or even worse, someone decides to put a SQL Server Express in production...
[10:47:39] <jmer> Just using SQL Server Express in production is adding heaps of technical debt to your project/product with very little effort.
[10:48:50] <ap5> Clearly no one does that
[10:48:53] <ap5> i mean
[10:48:57] <jmer> ...
[10:48:58] <ap5> :D
[10:49:00] <ap5> HAHAHAHA
[10:49:37] <jmer> We use SQL Server express to "save money"...
[10:49:44] <jmer> is a sentence I've heard too often
[10:50:39] <ap5> :)
[10:53:22] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[10:53:23] <jmer> I really should drive to the office and get my laptop upgraded.
[10:53:31] <jmer> then I could also pick up my christmas gift
[10:53:46] <ap5> Good idea
[10:53:49] <bpmedley> ap5 : Is it Postgres on Linux or Windows?
[10:54:00] <ap5> bpmedley, linux
[10:54:19] <ap5> I can feel that there is a difference. Tell me the details :D
[10:54:28] <bpmedley> Cool, what distro did you choose?
[10:55:06] <bpmedley> I have very little Windows experience with Postgres.  I have a bit with Linux and Postgres.
[10:55:16] <ap5> bpmedley, we have a department for choosing that. I dont know what they run their k8s clusters on
[10:55:22] <bpmedley> Neat
[10:55:32] <ap5> But for personal use, I use NixOS
[10:56:49] <ap5> I have a Ubuntu server, that i want to install a single node k8s on with postgres. I am in the loop of figuring out how to install Postgres as a "sidecar" to the k8s. I dont want it running in the cluster
[10:56:49] <bpmedley> That's cool.  NixOS looks interesting from a tooling and experimenting perspective.
[10:57:38] <ap5> bpmedley, i love the fact that i have my entire system set up in a config. I use it on a laptop and a desktop. It is pretty neat keeping those two N'Sync
[10:57:56] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[10:58:14] <bpmedley> Sounds badass.  So, you can experiment with multiple different environments with ease..
[10:58:26] <ap5> bpmedley, if you are interested: https://gitlab.com/mslot/dees
[10:58:56] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:59:55] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:00:39] <ap5> bpmedley, yes and so i can try Argo etc. I actually want somewhat what i have with NixOS: gitops on a few small projects i run
[11:04:34] <tsujp> An Azure API unfortunately only has a method (in C#) to create a single resource at a time, is there a canonical way I can batch these together or am I forced to enumerate a lit of things to create a call said API one-by-one?
[11:05:37] <ap5> tsujp, what do you mean by "Azure API"?
[11:05:38] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:05:59] <tsujp> In this case Azure's API for Security Rules within a Network Security Grou[
[11:06:07] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:06:09] <tsujp> has a method CreateOrUpdateAsync which takes a _single_ SecurityRule
[11:06:21] <tsujp> if I want to make 10.. I need to call CreateOrUpdateAsync which... sucks
[11:06:21] <ap5> Ah. The REST API
[11:06:25] <tsujp> Yeah
[11:06:41] <ap5> I dont think i ever have stumpled upon batching
[11:06:57] <ap5> But it is quite some time since i last used it
[11:12:53] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:14:21] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:14:35] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:16:22] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:17:23] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:23:49] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 240 seconds)
[11:26:23] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:26:29] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[11:26:48] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[11:39:30] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (*.net *.split)
[11:39:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[11:39:30] *** Quits: cliluw (~cliluw@47.147.73.223) (*.net *.split)
[11:39:31] *** Quits: kobo (~kobo___@92.34.43.208) (*.net *.split)
[11:39:31] *** Quits: bin101 (~bin101@user/bin101) (*.net *.split)
[11:39:31] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (*.net *.split)
[11:39:31] *** Quits: Lukky_ (~Lukky@modemcable248.39-20-96.mc.videotron.ca) (*.net *.split)
[11:39:31] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (*.net *.split)
[11:39:31] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (*.net *.split)
[11:39:31] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[11:39:31] *** Quits: The_Coolest (~art@77.125.16.73) (*.net *.split)
[11:39:31] *** Quits: canton7 (~canton7@about/csharp/canton7) (*.net *.split)
[11:39:31] *** Quits: MichaelLong (~ml@user/michaellong) (*.net *.split)
[11:39:32] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[11:39:32] *** Quits: Diablo-D3 (foobar@exelion.net) (*.net *.split)
[11:39:32] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[11:39:32] *** Quits: del (~bleh@mail.sigterm.eu) (*.net *.split)
[11:39:32] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (*.net *.split)
[11:39:32] *** Quits: Slade (~user@user/slade) (*.net *.split)
[11:39:32] *** Quits: Inge (~inge@51.15.60.125) (*.net *.split)
[11:39:32] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[11:39:32] *** Quits: edcba (~edcba@user/edcba) (*.net *.split)
[11:39:33] *** Quits: Citillara[m] (~citillara@user/citillara) (*.net *.split)
[11:39:33] *** Quits: Kog|Work (~kog@about/csharp/kog) (*.net *.split)
[11:39:33] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:39:33] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:39:33] *** Quits: MapMan (mapman@user/mapman) (*.net *.split)
[11:39:33] *** Quits: Miles8of9 (~obrien@93-34-146-223.ip50.fastwebnet.it) (*.net *.split)
[11:39:33] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[11:39:33] *** Quits: firewyre (~firewyre@pool-71-184-153-62.bstnma.fios.verizon.net) (*.net *.split)
[11:39:33] *** Quits: irwiss (~irwiss@user/irwiss) (*.net *.split)
[11:39:33] *** Quits: Nasp (uid12131@user/nasp) (*.net *.split)
[11:39:33] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (*.net *.split)
[11:39:33] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[11:39:33] *** Quits: shadowchaser (~Shadowcha@liox.eu) (*.net *.split)
[11:39:34] *** Quits: [ins4ne] (~ins4ne]@user/ins4ne/x-5207303) (*.net *.split)
[11:39:34] *** Quits: pandem (pandem@hilla.kapsi.fi) (*.net *.split)
[11:39:34] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[11:39:34] *** Quits: moop (sid799@user/moop) (*.net *.split)
[11:39:34] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[11:39:34] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[11:39:35] *** Quits: flagrama (sid145621@id-145621.hampstead.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2) (*.net *.split)
[11:39:35] *** Quits: KNERD (~KNERD@user/knerd) (*.net *.split)
[11:39:35] *** Quits: awygle (~quassel@2604:a880:2:d0::5380:3001) (*.net *.split)
[11:39:35] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (*.net *.split)
[11:39:35] *** Quits: Brett[Air] (~Brett@124.148.79.4) (*.net *.split)
[11:39:35] *** Quits: BSaboia (~bsaboia@177.37.198.83) (*.net *.split)
[11:39:35] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[11:39:35] *** Quits: pazof (paul@70.90.62.94.rev.vodafone.pt) (*.net *.split)
[11:39:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[11:39:35] *** Quits: nate (NBishop@o.apocaleaps.com) (*.net *.split)
[11:39:35] *** Quits: Dash (~Dash@lan.ox.rs) (*.net *.split)
[11:39:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[11:39:36] *** Quits: Rudde (~rudde@netboot.io) (*.net *.split)
[11:39:36] *** Quits: ap5 (~inf@static.63.103.181.135.clients.your-server.de) (*.net *.split)
[11:39:36] *** Quits: _Shurik_ (~pi@user/shurik/x-1325422) (*.net *.split)
[11:39:36] *** Quits: brianonymous (~int19h@user/brianonymous) (*.net *.split)
[11:39:36] *** Quits: Nighthawk (~LiberaCha@185.162.124.173) (*.net *.split)
[11:39:36] *** Quits: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406) (*.net *.split)
[11:39:36] *** Quits: ecool (~ecool@user/ecool) (*.net *.split)
[11:39:37] *** Quits: EternalMan (~Belgarath@user/belgarath) (*.net *.split)
[11:39:37] *** Quits: Carko_ (~Darko@84-255-241-35.static.t-2.net) (*.net *.split)
[11:39:37] *** Quits: argoneus (~argoneus@argoneus.com) (*.net *.split)
[11:39:37] *** Quits: mannu (mannu@wodanaz.se) (*.net *.split)
[11:39:37] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[11:39:37] *** Quits: Kalroth (~Kalroth@knas.io) (*.net *.split)
[11:39:38] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (*.net *.split)
[11:39:39] *** Quits: ki9a (~knowitall@about/csharp/ki9a) (*.net *.split)
[11:39:40] *** Quits: Andrio (Andrio@idlerpg/player/Andrio) (*.net *.split)
[11:39:40] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (*.net *.split)
[11:39:41] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (*.net *.split)
[11:39:41] *** Quits: ern (~ern@user/ern) (*.net *.split)
[11:39:41] *** Quits: SKull (~SKull@beast.darktemple.ch) (*.net *.split)
[11:39:41] *** Quits: bobo (~bobo@irc.webirc.eu) (*.net *.split)
[11:39:41] *** Quits: BSaboia[m] (~bsaboiama@2001:470:69fc:105::1:6247) (*.net *.split)
[11:39:41] *** Quits: ki9d (~ckchatcar@2001:470:69fc:105::4897) (*.net *.split)
[11:39:41] *** Quits: WillPittenger (~willpitte@2001:470:69fc:105::1bf) (*.net *.split)
[11:39:42] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (*.net *.split)
[11:39:42] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[11:39:42] *** Quits: Forgetfwrk_Lion (~Forgetwrk@220-244-3-190.tpgi.com.au) (*.net *.split)
[11:39:42] *** Quits: Telgareith (~Telgareit@user/telgareith) (*.net *.split)
[11:39:42] *** Quits: Slide-O-Mix (~slide@user/slide-o-mix) (*.net *.split)
[11:39:42] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[11:39:42] *** Quits: dahlia2 (~dahlia@2607:5300:60:1c26::1) (*.net *.split)
[11:39:43] *** Quits: hussam (~hussam@user/hussam) (*.net *.split)
[11:39:43] *** Quits: jstoker (jstoker@user/jstoker) (*.net *.split)
[11:39:44] *** Quits: jessicant (~jessica@static.172.234.251.148.clients.your-server.de) (*.net *.split)
[11:39:44] *** Quits: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com) (*.net *.split)
[11:39:44] *** Quits: luetm (sid505021@helmsley.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: shurane (sid132556@id-132556.helmsley.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[11:39:45] *** Quits: MatthiasVance (sid21828@about/csharp/matthiasvance) (*.net *.split)
[11:39:45] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (*.net *.split)
[11:39:45] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[11:41:38] *** Quits: Assault (~Assault@87-95-55-3.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[11:41:38] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[11:51:55] *** Joins: gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:c0db:293e:adcb:4126)
[11:51:55] *** Joins: biberu (~biberu@user/biberu)
[11:51:55] *** Joins: Assault_ (~Assault@87-95-55-3.bb.dnainternet.fi)
[11:51:55] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[11:51:55] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:51:55] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:51:55] *** Joins: cliluw (~cliluw@47.147.73.223)
[11:51:55] *** Joins: kobo (~kobo___@92.34.43.208)
[11:51:55] *** Joins: Kalroth (~Kalroth@knas.io)
[11:51:55] *** Joins: bin101 (~bin101@user/bin101)
[11:51:55] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[11:51:55] *** Joins: Lukky_ (~Lukky@modemcable248.39-20-96.mc.videotron.ca)
[11:51:55] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[11:51:55] *** Joins: Brett[Air] (~Brett@124.148.79.4)
[11:51:55] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[11:51:55] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[11:51:55] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[11:51:55] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:51:55] *** Joins: The_Coolest (~art@77.125.16.73)
[11:51:55] *** Joins: canton7 (~canton7@about/csharp/canton7)
[11:51:55] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[11:51:55] *** Joins: MichaelLong (~ml@user/michaellong)
[11:51:55] *** Joins: pazof (paul@70.90.62.94.rev.vodafone.pt)
[11:51:55] *** Joins: greenbagels (~gb@user/greenbagels)
[11:51:55] *** Joins: Diablo-D3 (foobar@exelion.net)
[11:51:55] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[11:51:55] *** Joins: del (~bleh@mail.sigterm.eu)
[11:51:55] *** Joins: edr (~edr@user/edr)
[11:51:55] *** Joins: nate (NBishop@o.apocaleaps.com)
[11:51:55] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[11:51:55] *** Joins: Dash (~Dash@lan.ox.rs)
[11:51:55] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:51:55] *** Joins: Slade (~user@user/slade)
[11:51:55] *** Joins: BSaboia[m] (~bsaboiama@2001:470:69fc:105::1:6247)
[11:51:55] *** Joins: Citillara[m] (~citillara@user/citillara)
[11:51:55] *** Joins: ki9d (~ckchatcar@2001:470:69fc:105::4897)
[11:51:55] *** Joins: Rudde (~rudde@netboot.io)
[11:51:55] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[11:51:55] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[11:51:55] *** Joins: hussam (~hussam@user/hussam)
[11:51:55] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[11:51:55] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[11:51:55] *** Joins: moop (sid799@user/moop)
[11:51:55] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[11:51:55] *** Joins: pandem (pandem@hilla.kapsi.fi)
[11:51:55] *** Joins: [ins4ne] (~ins4ne]@user/ins4ne/x-5207303)
[11:51:55] *** molybdenum.libera.chat sets mode: +v canton7
[11:51:55] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[11:51:55] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[11:51:55] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[11:51:55] *** Joins: Nasp (uid12131@user/nasp)
[11:51:55] *** Joins: irwiss (~irwiss@user/irwiss)
[11:51:55] *** Joins: firewyre (~firewyre@pool-71-184-153-62.bstnma.fios.verizon.net)
[11:51:55] *** Joins: Miles8of9 (~obrien@93-34-146-223.ip50.fastwebnet.it)
[11:51:55] *** Joins: tabakhase (tabakhase@user/tabakhase)
[11:51:55] *** Joins: MapMan (mapman@user/mapman)
[11:51:55] *** Joins: celphi (sid97751@user/celphi)
[11:51:55] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:51:55] *** Joins: Kog|Work (~kog@about/csharp/kog)
[11:51:55] *** Joins: KNERD (~KNERD@user/knerd)
[11:51:55] *** Joins: awygle (~quassel@2604:a880:2:d0::5380:3001)
[11:51:55] *** Joins: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2)
[11:51:55] *** Joins: flagrama (sid145621@id-145621.hampstead.irccloud.com)
[11:51:55] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[11:51:55] *** Joins: mannu (mannu@wodanaz.se)
[11:51:56] *** Joins: argoneus (~argoneus@argoneus.com)
[11:51:56] *** Joins: Carko_ (~Darko@84-255-241-35.static.t-2.net)
[11:51:56] *** Joins: EternalMan (~Belgarath@user/belgarath)
[11:51:56] *** Joins: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406)
[11:51:56] *** Joins: Nighthawk (~LiberaCha@185.162.124.173)
[11:51:56] *** Joins: ecool (~ecool@user/ecool)
[11:51:56] *** Joins: brianonymous (~int19h@user/brianonymous)
[11:51:56] *** Joins: _Shurik_ (~pi@user/shurik/x-1325422)
[11:51:56] *** Joins: ap5 (~inf@static.63.103.181.135.clients.your-server.de)
[11:51:56] *** Joins: ki9a (~knowitall@about/csharp/ki9a)
[11:51:56] *** Joins: bobo (~bobo@irc.webirc.eu)
[11:51:56] *** Joins: SKull (~SKull@beast.darktemple.ch)
[11:51:56] *** Joins: ern (~ern@user/ern)
[11:51:56] *** Joins: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[11:51:56] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[11:51:56] *** Joins: Andrio (Andrio@idlerpg/player/Andrio)
[11:51:56] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[11:51:56] *** Joins: jessicant (~jessica@static.172.234.251.148.clients.your-server.de)
[11:51:56] *** Joins: jstoker (jstoker@user/jstoker)
[11:51:56] *** Joins: Slide-O-Mix (~slide@user/slide-o-mix)
[11:51:56] *** Joins: Telgareith (~Telgareit@user/telgareith)
[11:51:56] *** Joins: Forgetfwrk_Lion (~Forgetwrk@220-244-3-190.tpgi.com.au)
[11:51:56] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[11:51:56] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[11:51:56] *** Joins: dahlia2 (~dahlia@2607:5300:60:1c26::1)
[11:51:56] *** Joins: deepy (deepy@user/deepy)
[11:51:56] *** Joins: MatthiasVance (sid21828@about/csharp/matthiasvance)
[11:51:56] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[11:51:56] *** Joins: shurane (sid132556@id-132556.helmsley.irccloud.com)
[11:51:56] *** molybdenum.libera.chat sets mode: +vvv Kog|Work ki9a MatthiasVance
[11:51:56] *** Joins: luetm (sid505021@helmsley.irccloud.com)
[11:51:56] *** Joins: edcba (~edcba@user/edcba)
[11:51:56] *** Joins: Byteflux (~byte@byteflux.net)
[11:51:56] *** Joins: Inge (~inge@51.15.60.125)
[11:51:56] *** Joins: ChanServ (ChanServ@services.libera.chat)
[11:51:56] *** molybdenum.libera.chat sets mode: +o ChanServ
[11:52:08] <tsujp> rip every question I asked getting spammed out :'(
[11:52:11] <biberu> tsujp: it depends on how you configured your di and what that method does
[11:52:55] <tsujp> The way I have to do this is as follows: (1) call the azure REST API to create some resources, and then (2) list resources and delete all except the ones I just created (no I cannot use an ARM template in this case)
[11:53:13] <tsujp> I have now this working but I rely on the caller of the service that implements (1) and (2) maintaining the state of things to delete
[11:53:23] *** Quits: nate (NBishop@o.apocaleaps.com) (Ping timeout: 256 seconds)
[11:53:28] <tsujp> I feel like this state should be part of the actual DI class itself
[11:53:41] <biberu> (phone)
[11:53:43] <tsujp> So that the caller can just go "CreateTheStuff()"
[11:53:46] *** Joins: nate (NBishop@o.apocaleaps.com)
[11:55:37] <MatthiasVance> Regarding your question if it's a new instance.. that depends on how you have registered it. The Microsoft docs on that are really good
[11:56:32] <MatthiasVance> tsujp: ^
[11:56:56] <tsujp> I register it in startup services `services.AddScope<IInterface, IClass>();`
[11:57:00] <tsujp> where services is IServiceCollection
[11:57:18] <MatthiasVance> Yes, so why did you choose Scoped?
[11:57:47] <tsujp> Right, so each request gets its own object instance
[11:58:10] <tsujp> AddSingleton would be shared
[11:58:31] <MatthiasVance> Correct
[11:58:51] *** Joins: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz)
[11:58:55] *** Quits: Jantz (~IceChat95@118-93-132-243.dsl.dyn.ihug.co.nz) (Excess Flood)
[12:01:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:03:27] *** Joins: MaNa2k (~MaNa2k@109.247.79.178)
[12:03:29] *** Quits: gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:c0db:293e:adcb:4126) (Quit: WeeChat 3.2)
[12:04:10] *** Joins: gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:c0db:293e:adcb:4126)
[12:06:49] <biberu> tsujp: if i understand you correctly you'd prefer it if the caller didn't have to remember the state?
[12:06:57] <tsujp> Correct
[12:07:21] <biberu> tsujp: in that case, note that it's that the service being stateful that introduces a risk of using it incorrectly
[12:07:48] <tsujp> yeah that's what i'm also concerned about _but_ I think in this case it's a tradeoff no?
[12:08:01] <tsujp> Either the caller manages the state and things are basically static in the services side
[12:08:05] <biberu> you can choose a middle ground
[12:08:14] <tsujp> What would that look like?
[12:08:38] <biberu> e.g. the service could return a box with all the details needed for the next step in the operation
[12:09:02] <biberu> the caller wouldn't have to look inside or modify that box at all, only forward it to where it's needed
[12:10:31] <biberu> that gives you both the ability to safely share the service / can't misuse it between requests, and the compiler can now check that you aren't performing steps in the wrong order
[12:11:02] <tsujp> I'll try and do that
[12:11:25] <biberu> a) service.Bar(); service.Foo(); // oups, should've called Foo before Bar, the compiler can't help you
[12:11:34] <tsujp> I'm thinking something like `CreateListOfTasks` gives back a list of tasks which are then given to `CreateResources` which takes in that list of tasks
[12:11:41] <tsujp> That about right?
[12:12:11] <biberu> b) var fooBox = service.Foo(); service.Bar(fooBox); // state forwarded by the caller, can no longer call Bar before Foo
[12:14:11] <biberu> sure, that sounds fine
[12:14:42] <Nasp> tsujp:  Did you have shared state, or didn't want shared state
[12:14:54] <Nasp> And it takes 45 seconnds? How big is that list of roles to get
[12:15:22] <tsujp> No shared state, no other request is going to use this its just that within one request the orchestration required to produce the effect is complicated because the REST API Azure has for this doesn't allow batching
[12:15:39] <tsujp> Long because I was `await`ing each task, im swapping it over to WaitAll
[12:15:49] <tsujp> but part of that WaitAll is now constructing state before WaitAll is called
[12:15:56] <tsujp> Whereas before it was just a method that takes a collection and loops it
[12:16:05] <Nasp> But how big is the list
[12:16:11] <tsujp> Like 3 big
[12:16:14] <tsujp> ;)
[12:16:38] <tsujp> It's probably a combination of my network speed or whatever but in any case I don't want it doing 1 (wait) 1 (wait)
[12:16:51] <Nasp> You shouldn't use waitall
[12:17:00] <Nasp> You need to use WhenAll
[12:17:09] <tsujp> Okay
[12:17:14] <Nasp> Yeah but if the list is huge it doesn't necessarily help to do it like that
[12:17:30] <Nasp> Like if it's a list of 10k requests you need to make
[12:17:40] <Nasp> You need to consider what happens if you gets blocked
[12:17:47] <tsujp> It's never going to be that big, realistically the highest (and we enforce this) is about 100
[12:18:23] <tsujp> Yeah so this is a REST API right (1) request comes in "make these resources) (2) gets to controller (3) controller calls this service (4) this service has a DI configuration service to handle this
[12:18:36] <tsujp> What goes on to effect the request made in (1) is you first create the requested items
[12:18:42] <tsujp> then delete all others that weren't requested
[12:18:51] <tsujp> so you need to enumerate every existing item via AsyncPageable
[12:19:00] <Nasp> Ahh yeaha okay 100 is nothing
[12:19:02] <Nasp> So 3 big :D
[12:19:04] <tsujp> Deletion and creation can only be done one at a time, the Azure REST API does not have batching here
[12:19:26] <Nasp> Is it going to be called often or just once?
[12:19:29] <tsujp> All of this _stuff_ needs to be as simple to use as possible by (4)
[12:19:36] <Nasp> I'm wondering the need for one request to split into 100
[12:19:36] <tsujp> It's customer facing so I imagine semi-often
[12:19:48] <tsujp> because it cannot be batched
[12:19:52] <tsujp> the azure api has no batch
[12:19:55] <tsujp> delete 1 rule or create 1 rule
[12:19:58] <tsujp> no delete N rules
[12:20:01] <tsujp> no create N rules
[12:20:08] <Nasp> So it's an action a user makes?
[12:20:13] <tsujp> yes
[12:20:24] <Nasp> Ahh thought it was like for getting the users roles or something
[12:21:27] <tsujp> Ye
[12:21:33] <tsujp> Can I have two types of requests going at once?
[12:21:46] <tsujp> Can I have my create rules happening at the same time as my delete rules?
[12:21:57] <Nasp> Sure
[12:21:58] <tsujp> I would use threading for that?
[12:21:58] <MatthiasVance> You can do everything you want
[12:22:51] <Nasp> Have you tested the speed when doing it with WhenAll?
[12:22:59] <biberu> tsujp: can you enqueue this work to be handled by some background worker?
[12:23:01] <Nasp> Also is that really about 1 sec per request
[12:23:17] <Nasp> biberu:  Not if it's a rest call and his users wants the response
[12:23:28] <Nasp> Then he needs to redo it for some async polling
[12:23:44] <biberu> yeah
[12:23:57] <Nasp> Not that i'm against it, just that it requires a bit more work
[12:24:02] <Nasp> I actually prefer it that way
[12:24:20] <biberu> just raising an idea, might not fit or be too much work to be worth it
[12:24:42] <tsujp> I don't really want the client sitting here for 50 seconds becaue the calls to the Azure REST are taking forever or because there are naturally a lot to perform, adding rules can happen at the same time as deleting rules so I'd like that to be the case
[12:24:42] <biberu> generally uncomfortable with long running http requests
[12:24:59] <tsujp> ill try a WaitAll thing now, so much code commented etc
[12:25:20] <biberu> especially if they're blocking server resources, like WaitAll
[12:25:51] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[12:27:10] <Nasp> biberu:  And staggered http requests
[12:27:22] <Nasp> tsujp:  WhenAll
[12:28:29] <tsujp> Okay sec testing the original version with await still works
[12:30:47] *** Joins: diophantoz (~diophanto@user/diophantoz)
[12:31:19] <tsujp> 1 minute 45 seconds request time sweet jesus
[12:31:45] <tsujp> (azure is creating or deleting an actual resource so im 99% sure their api will block response until thats done because its REST)
[12:31:53] <tsujp> hence my desire for maximum concurrency
[12:31:56] <tsujp> ok now for the WhenAll
[12:32:55] <Nasp> What kind of r esource
[12:33:00] <Nasp> As in a resource group?
[12:33:12] <tsujp> security rule in a network security group
[12:33:25] <ap5> Well, if you have a parent --> child relation, and you are adding the child, sometimes Azure want to add some data to the parent, so they can't really be done in parallel, because they need to await each other
[12:33:35] <Nasp> tsujp: await WhenAll(tasks=
[12:33:46] <Nasp> Ahh network
[12:34:25] <tsujp> and enumerating existing rules can only be done via their AsyncPageable API
[12:34:30] <tsujp> which is an expensive operation
[12:35:10] <Nasp> Well resources are slow
[12:35:16] <tsujp> ok WhenAll time
[12:35:18] <Nasp> Remember those rules needs to be written to the network card
[12:35:40] <Nasp> So they don't want it to be async on their side i assume, they want when the request is done those rules should be created
[12:35:40] <ap5> Yeah, so that is why they can't be done parallel :)
[12:35:48] <tsujp> yeah indeed but im hesitant to tell the client "ok its good" before _actually_ creating them in-case there is a problem
[12:35:48] <Nasp> If it's firewall rules
[12:36:38] <Nasp> tsujp:  But you could do a "creating / pending state"
[12:36:50] <Nasp> Because you can still run into a problem where half the rules succeed and the other fails :D
[12:37:01] <tsujp> Unfortunately not in this case
[12:37:16] <tsujp> higher up PM wants the API a certain way, and that way is: call it and it returns the rules created
[12:37:31] <tsujp> id prefer if it was: call it and it returns a GUID status object u can poll or whatever, or evena  webhook callback
[12:37:50] <tsujp> but nope this way the response to the client must be the set security rules
[12:38:00] <Nasp> Yeah you could put it in a pending state with a list of each rule
[12:38:05] <tsujp> and the best way of having a correct response is to actually wait for them to be set vs just relying on input validation etc
[12:38:06] <Nasp> And then mark then green as each are created
[12:38:10] <Nasp> That also makes retrying easier
[12:38:21] <tsujp> sure but.. cannot because that's not the spec here
[12:39:23] <Nasp> So you have try catch around this and return the succeeded rules, or fetch them again from the api?
[12:44:49] <tsujp> I return the list they gave me if there are no problems and for each one that fails remove it from the list to return
[12:44:55] <tsujp> sec trying out a few things in addition to WhenAll
[12:45:06] <tsujp> and by sec i means a few minutes / tens of mnutes
[12:45:41] <MatthiasVance> This is Interactive Real-time Chat, you better hurry...
[12:45:42] <MatthiasVance> ;p
[12:46:01] <Nasp> tsujp:  It shouldn't take you long to change it to whenAll
[12:46:53] <Nasp> I hate selenium tests :/
[12:47:13] <Nasp> OH well found my bug atleast `Could not load type 'Microsoft.Extensions.Logging.Abstractions.Internal.NullScope' from assembly 'Microsoft.Extensions.Logging.Abstraction` :(
[12:49:28] <tsujp> Okay I shaved off 45 seconds by caching the AsyncPageable because it's not going to change during the requests lifetime since this request is the only thing that can actually change that resource
[12:49:43] <tsujp> Now onto whenall
[12:49:51] <Nasp> Ahh so the get to begin with takes 45 as well?
[12:49:54] <Nasp> Or both combined?
[12:55:17] <tsujp> originally 1 min 45 all up request start to end
[12:55:25] <tsujp> cache AsyncPageable total 1 min e2e
[12:55:30] <tsujp> WaitAll down to 45 seconds e2e
[13:04:28] *** Joins: Babbage (Babbage@94.11.27.96)
[13:07:23] <MaNa2k> ubisoft really needs to do some refactoring to their game code, because ac unity eats gpu like its nothing
[13:08:04] <MaNa2k> that damn game is from 2014, and i get like 100% load on my gtx 1660 ti
[13:08:30] <MatthiasVance> Your 1660 is ALSO from 2014?
[13:08:31] <MatthiasVance> ;p
[13:09:42] <ki9d> restsharp seems to break signatures often
[13:20:27] <ap5> :D
[13:28:10] *** Quits: mikrosis (~mikrosis@dynamic-046-114-175-218.46.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[13:33:55] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[13:38:21] <Babbage> morning!
[13:39:17] <MatthiasVance> hello!
[13:39:26] <ap5> Babbage, herlrloo
[13:56:13] <Babbage> \o_ :)
[14:11:10] <irwiss> https://www.reddit.com/r/funny/comments/s0ej20/experts_recommend_keeping_your_daily_rituals_even/
[14:11:44] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:65bb:c31d:f4b5:273e) (Quit: Textual IRC Client: www.textualapp.com)
[14:12:56] <MaNa2k> MatthiasVance, my 1660 ti is from 2019ish
[14:13:16] <MaNa2k> its comparable to 1070ti i think
[14:15:50] <MaNa2k> MatthiasVance, my cpu is r7 5800x. the funny thing is forza horizon 5 works smooth like butter. both cpu and gpu usage is below 30%
[14:19:16] *** Quits: gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:c0db:293e:adcb:4126) (Quit: WeeChat 3.2)
[14:20:01] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[14:22:32] *** Joins: gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:b9fd:fcdd:a577:b51b)
[14:24:14] <MatthiasVance> ah
[14:28:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[14:29:30] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2cdf:da3e:72d8:7f8f)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:36:30] <tsujp> Oh yeah btw all as follow up: im really dumb and forgot you can specify IP ranges up to 4000 times for a single security rule in azure
[14:36:35] <tsujp> so i binned multiple rules
[14:36:47] <tsujp> Classic overlook 1 tiny thing and go off on a completely unworkable tangent
[14:36:51] <tsujp> Please tell me this happens to others
[14:36:56] <tsujp> Happens to me like once a week
[14:41:33] <MatthiasVance> tsujp: Happens when I go through all the possible solutions in my head, find a nice workable one but then later for some reason pick another one
[14:41:36] <MatthiasVance> xD
[14:41:56] <MatthiasVance> And then I'm like: Ehh, wait, I knew there was a better solutiun
[14:45:35] <MaNa2k> anyone here tied implementing  payment status flows. Its a pain in the ass
[14:45:40] <MaNa2k> *tried
[14:46:29] <MaNa2k> basically the part where you have to keep track of all the invoices part, and update paidamount based on status from erp
[14:46:40] <MatthiasVance> Been there, done that
[14:47:02] <MaNa2k> one little error, and its a nightmare to try fix that
[14:47:05] <MatthiasVance> Why?
[14:47:20] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:48:40] <MaNa2k> well the way we have implemented it is like so,  theres erpA where we get the data bases on lastRun datetimestamp, and a DB that keeps track of the invoices that are paid, remaining amount.So lets say something goes wrong, then we have to somehow backtrack
[14:48:56] <MaNa2k> and rerun it, but only to find out that the status changaes from day to day
[14:49:35] <MatthiasVance> yes lol
[14:49:52] <MaNa2k> im kind of oversimplifing it, but its more compicated then that
[14:50:02] <MatthiasVance> Sounds like an issue in the implementation
[14:50:12] <MatthiasVance> If it doesn't allow you to do deal with errors in a sane way
[14:50:54] *** Quits: MaNa2k (~MaNa2k@109.247.79.178) (Read error: Connection reset by peer)
[14:51:04] *** Joins: MaNa2k (~MaNa2k@109.247.79.178)
[14:51:54] <MaNa2k> well i was oversimplifying it, its much more complex then that. We are basically doing lots of lookups from different tables to get all the info we need for a invoice
[14:53:21] <MatthiasVance> Yes
[14:53:22] <MatthiasVance> Logically
[14:53:36] <MatthiasVance> Still, if you can't deal with errors the solution needs tweaking
[14:54:09] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[15:00:46] <MaNa2k> MatthiasVance, its not about the errors. they we can easily fix. but when we need to startup this flow again, its a nightmare due to the state has changed
[15:00:55] <MatthiasVance> Yes that's what I mean
[15:00:58] <MatthiasVance> That's *exactly* what I mean
[15:01:09] <MatthiasVance> You can't recover from errors
[15:01:19] <MaNa2k> MatthiasVance, so how do you deal with this kind of problem?
[15:01:44] <MaNa2k> i was actually thinking about saving the db state for x amount of months back
[15:02:04] <MaNa2k> in case of down time
[15:02:14] <MatthiasVance> Wait, you don't have audit logs / events for invoices?
[15:02:31] <MaNa2k> audit logs? whats that
[15:02:40] <MaNa2k> we have normal logs that we push
[15:04:27] <MatthiasVance> That's why I said "/ events"
[15:04:38] <MatthiasVance> Audit logs = who did what when
[15:05:05] <MaNa2k> MatthiasVance, ah that, well since we are pulling the invoices from an erpA which is external service, we have no control
[15:06:25] <MaNa2k> basically we pull data from erpA about invoice status. We are mass-updating payment status in our db. then we crate a list and update erpB.
[15:06:34] <MaNa2k> both erpA and erpB are external services
[15:06:44] <MaNa2k> we only own the db, and the integration betweeen
[15:12:49] <MatthiasVance> Okay so what kind of errors are you dealing with?
[15:13:17] <tsujp> I have a public endpoint with a DTO, in the controller I need to transform that DTO in a new type that the service backing the controller expects. Do I use a private DTO for this or should I just use a POCO?
[15:15:57] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[15:25:44] *** Quits: Dash (~Dash@lan.ox.rs) (Quit: Tatty bye)
[15:27:15] *** Joins: Dash (~Dash@arthur.lan.ox.rs)
[15:29:23] <MaNa2k> MatthiasVance, no errors actually, just dates not matching and stuff like that
[15:34:56] <MatthiasVance> That's an error right, if stuff doesn't match
[15:34:57] <MatthiasVance> :P
[15:34:59] <MatthiasVance> That's why you're fixing it
[15:35:23] <MatthiasVance> I'm talking from a functional POV
[15:43:34] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:48:19] *** Quits: Dash (~Dash@arthur.lan.ox.rs) (Quit: Tatty bye)
[15:49:47] *** Joins: Dash (~Dash@arthur.lan.ox.rs)
[16:00:14] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[16:03:01] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:07:49] *** Quits: Brett[Air] (~Brett@124.148.79.4) (Ping timeout: 256 seconds)
[16:20:28] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[16:23:36] *** Joins: Sora (~Guest@static.82.113.12.49.clients.your-server.de)
[16:24:02] *** Joins: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554)
[16:24:35] *** Quits: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554) (Changing host)
[16:24:35] *** Joins: tmm88 (~tmm88@user/tmm88)
[16:24:57] *** Quits: Sora2 (~Guest@static.82.113.12.49.clients.your-server.de) (Ping timeout: 240 seconds)
[16:26:14] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[16:28:56] *** Quits: diophantoz (~diophanto@user/diophantoz) (Ping timeout: 256 seconds)
[16:45:04] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Client closed)
[16:54:41] *** Joins: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554)
[16:54:48] *** Quits: tmm88 (~tmm88@2001:8a0:ff48:1500:b82a:6e08:74e1:6554) (Changing host)
[16:54:48] *** Joins: tmm88 (~tmm88@user/tmm88)
[16:59:43] <tsujp> Hey can I get a sanity check here please
[16:59:57] <Guest78> nope, fresh out of sanity
[16:59:59] *** Guest78 is now known as jonp
[17:00:18] <tsujp> if I have a list of say 5 subnets in CIDR format and I want to check if any overlap that algorithm is a 5! (5 factorial) check right?
[17:00:22] <ap5> tsujp, nope. I am insane AF
[17:00:34] <tsujp> Check if index 4 overlaps with 3 or 2 or 1 or 0; then check if 3 overlaps with 2 or 1 or 0 etc?
[17:01:59] <tsujp> Does that sound about right?
[17:03:18] <MaNa2k> MatthiasVance, basically what needs to be done is, we somehow need to save the state of the db before every time we run the paymentstatus flow, then if an error occurs, and after we fix it, we need to trick the system in thinking that we are running the same process again back in time from the same point where the error occured
[17:03:54] <Andrio> tsujp, that's O(n²).
[17:03:58] *** Joins: Alexthek1d (~Alexthek1@p5b3aeb74.dip0.t-ipconnect.de)
[17:04:04] <Andrio> Not O(n!).
[17:08:37] *** Quits: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net) (Ping timeout: 240 seconds)
[17:08:39] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Client closed)
[17:09:24] <tsujp> How is it O(n^2) I did a 5-element array by hand and got 14 operations
[17:09:38] <tsujp> select a check b c d e then select b check c d e and so forth
[17:10:00] <MatthiasVance> MaNa2k: Yes, use events instead of "dumb updates"
[17:10:13] <MatthiasVance> So you can revert the event stream for one or more invoices and reapply new ones
[17:10:35] <tsujp> forgot to tag you Andrio check messages immediately above Matthias'
[17:10:55] <Andrio> tsujp, 5! is way higher than that.
[17:11:07] <tsujp> Yeah no I dun goofed it's not 5! at all
[17:11:15] <tsujp> but I also don't see how it's O(n^2)
[17:12:29] <Andrio> That 14 is (n - 1)²/2 + 3(n - 1)/2
[17:12:43] <Andrio> which is in O(n²)
[17:13:49] *** Quits: Assault_ (~Assault@87-95-55-3.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[17:14:57] <Nasp> MaNa2k:  Are you saving a bad state?
[17:15:58] *** Quits: pingec (~pingo@84-255-226-67.static.t-2.net) (Ping timeout: 256 seconds)
[17:17:09] <MaNa2k> nasp, we have this stupid integration where theres 2 erps systems that needs to sync paymentstatus. and ofc we have made this, and we also keep the status on payment in our db. but when something goes wrong, and we fix the problem and want to start the integration again, its a nightmare to get it in sync again
[17:19:52] <Nasp> What is an example of what can go wrong
[17:20:43] <MaNa2k> Nasp, its not about what can go wrong, its about if it goes wrong, how the fuck we can start the system again by keeping it in sync. i have a few ideas though
[17:20:48] <MatthiasVance> Use events
[17:20:53] <Nasp> Message queue?
[17:20:56] <Nasp> Like retry it an hour after
[17:21:06] <MaNa2k> MatthiasVance, you keep telling me these thigs, but i have no clue what those are.
[17:21:12] <MaNa2k> got any link to a GUID :P
[17:21:13] <MatthiasVance> MaNa2k: Then ask questions? :)
[17:21:16] <Nasp> You've never used events?
[17:21:32] <MaNa2k> Nasp, what events? in what context
[17:21:46] <Nasp> Well message based systems in general
[17:22:04] <MaNa2k> Nasp, ah, well we get our data from a graphql server
[17:22:10] <MaNa2k> its in json format
[17:22:19] <MaNa2k> basically mass data in single requesst
[17:23:56] <Nasp> Yes?
[17:24:09] <Nasp> And you try to mass upadte it ?
[17:24:15] <Nasp> to an external system
[17:26:10] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 256 seconds)
[17:26:18] <ap5> MaNa2k, use Kafka, and replay the events
[17:26:44] <MaNa2k> wtf is kafka
[17:27:00] <ap5> Event streaming
[17:27:10] <MaNa2k> ap5, i have no clue what that is
[17:27:14] <ap5> Ok :)
[17:27:18] <MaNa2k> are you talking about service bus messesge ?
[17:27:21] <MaNa2k> or maybe webhooks ?
[17:27:29] <Nasp> Kafka seems a bit overkill
[17:27:34] <Nasp> Yes  a message bus
[17:27:36] <ap5> It really does, Nasp :D
[17:27:39] <MatthiasVance> MaNa2k: No, storing your data as events instead of updating rows in DB
[17:27:43] <Nasp> Rabbitmq would be a lot easier
[17:27:46] <MatthiasVance> As in, historical records
[17:28:00] <ap5> But the "just install kafka" joke fell to the ground when he didn't know about Kafka :D
[17:28:01] <Nasp> I get a bit nervous when i stumble upon code like this `Html.Raw(Regex.Replace(text, @"\*\*([^*]*?)\*\*", string.Format("<{0}>$1</{0}>", replaceTag)))`
[17:28:02] <Nasp> And no texts
[17:28:13] <MaNa2k> ah, well we arent using service bus. we have a timertrigger that requests messages from a graphql server. its slightly like REST
[17:28:18] <Nasp> We just swithed some of our code to kafka
[17:28:33] <Nasp> So do you get 1000 payment statuses
[17:28:34] <ap5> But again, using an event stream for this, actually is a good fit
[17:28:36] <MaNa2k> anyway, got to run. cya
[17:28:39] <Nasp> And then try to push those to another system?
[17:28:56] <Nasp> tests*
[17:29:19] <MaNa2k> Nasp, well first we same them to our db, then we figure out which invoice is paid, then we sync those to the other system
[17:30:14] <Nasp> And then that external system breaks?
[17:30:15] <Nasp> Or yours
[17:30:32] <tsujp> Given a start IP and an end IP is there a nice C# lib to enumerate all IPs inbetween
[17:30:41] <edcba> so basically you have some "invoice paid" event but you don't really have it so it's a pain to get to that state again
[17:34:23] <Nasp> tsujp:  Try IPNetwork
[17:34:30] <Nasp> Although i dont believe it has the numeraiton
[17:34:33] <Nasp> Else there are libs for it
[17:34:33] <tsujp> It's range calculations are wrong
[17:34:40] <Nasp> It is?
[17:34:48] <Nasp> Are you sure
[17:35:04] <tsujp> Give it 1.2.3.8/30 and tell it to put that into CIDR and it says the useable IPs are 1.2.3.9 and 1.2.3.10 which is wrong
[17:35:14] *** Quits: MaNa2k (~MaNa2k@109.247.79.178) (Ping timeout: 256 seconds)
[17:35:16] <tsujp> the useable IPs are actually 1.2.3.8 - 1.2.3.11
[17:38:26] <edcba> well isn't there broadcast and network addresses ?
[17:38:49] <edcba> ie that's why it removes 2 ?
[17:40:52] <tsujp> Ah yep that'll be it derp there's a ListIpAddresses that lists all
[17:41:19] <tsujp> However there is one more thing I am pretty sure it cannot do (for realsies this time) is enumerate IPs between a literal range
[17:41:28] *** Joins: viaSanctus (~viaSanctu@user/viasanctus)
[17:41:38] <tsujp> The only way I can see is to get it to try and guess the CIDR first and in the case the range cannot be represented with CIDR it definitely breaks
[17:42:51] <tsujp> I'm trying to see if there's a way it spits out combinations of CIDR because it only spits out 1 as far as I can see, here's an example:
[17:44:29] <tsujp> Yeah so if you want to get the CIDR for range 1.2.3.4 to 1.2.3.6 it gives u CIDR 1.2.3.4/30 which is right but too big
[17:44:47] <tsujp> it SHOULD be 1.2.3.4/31 and 1.2.3.6/32
[17:45:01] <tsujp> Instead it returns the smallest single CIDR that contains the rather
[17:45:05] <tsujp> contains the range*
[17:45:22] <tsujp> Rather than N smallest-possible CIDRS which combined represent the range, checking if it can do that now but I don't see anything yet
[17:52:00] <MatthiasVance> Time for a break!
[17:52:12] <tsujp> You?
[17:52:21] <MatthiasVance> Definitely, you too?
[17:52:23] <viaSanctus> everyone
[17:52:29] <tsujp> I wish
[17:52:31] <viaSanctus> world needs a break
[17:52:53] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:34] *** Joins: xsperry (~xs@user/xsperry)
[18:01:18] *** Quits: Alexthek1d (~Alexthek1@p5b3aeb74.dip0.t-ipconnect.de) (Quit: Leaving)
[18:07:32] <Nasp> `By default, RazorEngine will not encode values to be HTML safe, there are reasons for that`
[18:07:37] <Nasp> Why do people make libs like that
[18:09:59] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[18:10:15] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[18:17:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2cdf:da3e:72d8:7f8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:27:23] <jonp> "performance"?
[18:27:31] <_Shurik_> hola
[18:30:58] <Nasp> jonp:  In the name of performance we disabled all security?
[18:31:09] <jonp> yes?
[18:31:41] <Nasp> Well if  security isn't a problem, sure
[18:32:00] <Nasp> I can also disable TLS while i'm at it to save those precious cycles
[18:32:50] <_Shurik_> Yeah, I'm surprised too that there is no built-in HTML sanitizing available
[18:38:37] <tsujp> I must say, I've done some good flailing around today
[18:39:04] <MatthiasVance> tsujp: Hands in the air 🤷‍♂️
[18:39:07] <MatthiasVance> 🏃‍♂️
[18:41:44] *** Joins: jamea (~jamea@10.189-202-213.bestelclientes.com.mx)
[18:45:19] <tsujp> How often would you say you lot come up with a solution, get to the end of implementing the solution, and then go "well, this is terrible" and realise there is a better way then. Beit some very small assumption which turned out to be false, or just by virtue of having implemented one _thing_ and going "ah these components aren't needed anymore" etc
[18:45:21] <tsujp> I'd say it happens to me (at my day job) at least once a day
[19:03:13] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:05:30] *** Joins: Shariff (~UserNick@starbase26.connected.by.freedominter.net)
[19:05:42] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[19:05:55] <Shariff> Hey there
[19:06:20] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[19:06:39] <Shariff> How do I show the actual changes made to a file that is picked up by FileSystemWatcher change event? I can't seem to find anything on how to see the actual change, rather than being just notified that the file was changed...
[19:23:58] <irwiss> https://i.redd.it/9tc0ug0hlva81.jpg
[19:24:39] <MatthiasVance> Yeah, don't open images from IRC at work
[19:24:52] <MatthiasVance> Or embed them.. =)
[19:25:22] <irwiss> i mean it's a buff dude using a laptop in meme format, not sure if that's somehow offensive at your work :P
[19:25:41] <MatthiasVance> Looking at buff dudes without shirts ..
[19:25:47] <MatthiasVance> Meme format is age bound :P
[19:25:51] <MatthiasVance> It's fine for my work lol
[19:26:49] <irwiss> i don't think i worked anywhere where anyone would do anything other than giggle if you look at meme like this during the "break" time :P
[19:26:58] <MatthiasVance> Sure, true
[19:28:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[19:33:42] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[19:34:04] *** Joins: diophantoz (~diophanto@user/diophantoz)
[19:38:44] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[19:45:53] <MatthiasVance> Ah, damn the themes in VS don't differentiate between different things, they all look the same in F#
[19:51:09] *** Joins: Alexthek1d (~Alexthek1@p5b3aeb74.dip0.t-ipconnect.de)
[19:51:35] <MatthiasVance> I mean the default themes do, just not the ones I had added
[19:53:50] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:00:42] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[20:04:22] *** Joins: pingo (~pingo@84-255-226-67.static.t-2.net)
[20:05:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:21:28] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[20:28:28] *** Quits: Alexthek1d (~Alexthek1@p5b3aeb74.dip0.t-ipconnect.de) (Quit: Leaving)
[20:28:31] *** Quits: Babbage (Babbage@94.11.27.96) (Remote host closed the connection)
[20:30:55] *** Joins: learningc (~IceChat95@modemcable253.161-226-192.mc.videotron.ca)
[20:33:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:43:17] <tsujp> Hmm how can I get an IList property on this class when it doesn't have a setter
[20:44:01] <tsujp> I could do the thing where you go `new Foo { SomeProperty = "the value"; }` (I forgot the name of this syntax) but in the case of an IList it won't take me literally passing it like that
[20:44:06] <tsujp> and it doesn't have AddRange
[20:44:18] <tsujp> Am I forged to enumerate the source list to Add to the destination one?
[20:48:48] <edcba> construct a new list maybe
[20:54:01] <Suchiman> tsujp: yeah, or add an AddRange extension method over IList :P (AddRange enumerates internally over the source anyway)
[20:55:14] <Suchiman> tsujp: IIRC you could also do `new Foo { SomeIList = { "A", "B", "C" } }` (notice how there's no new between SomeIList and `= {` which means use the existing value and .Add to it)
[20:56:54] <tsujp> "A property without a setter or inaccessible setter cannot be assigned to" in the case of the latter message
[20:57:03] <tsujp> I just manually `foreach`'d and `Add`ed them
[20:57:25] <tsujp> IIRC IList could be implemented by not-a-list hence why it doesn't have AddRange
[20:57:40] <tsujp> Adding an extension method in this case I cbf doing unless I need to do this again
[20:57:51] *** llanhmod is now known as Guest4223
[20:57:51] *** Quits: Guest4223 (~developer@user/domhnall/x-2887755) (Killed (tantalum.libera.chat (Nickname regained by services)))
[20:58:04] *** Joins: llanhmod_ (~developer@user/domhnall/x-2887755)
[21:06:13] *** Quits: Shariff (~UserNick@starbase26.connected.by.freedominter.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:12:50] *** Quits: simius (~simius@user/simius) (Ping timeout: 256 seconds)
[21:13:50] <jonp> tsujp: what's the original code?
[21:14:57] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:15:09] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:15:43] *** Joins: Assault (~Assault@87-95-55-3.bb.dnainternet.fi)
[21:21:27] *** Joins: simius (~simius@user/simius)
[21:26:29] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[21:26:37] *** Quits: gandhibobandhi (~gandhibob@2a02:8109:86c0:4a40:b9fd:fcdd:a577:b51b) (Ping timeout: 240 seconds)
[21:27:10] <MatthiasVance> https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/
[21:33:58] <MatthiasVance> A bit old news, but I didn't know about it yet
[21:34:02] <MatthiasVance> (like a few days)
[21:34:35] <MichaelLong> what's up with people nowadays...
[21:35:49] <Diablo-D3> yeah but
[21:35:51] <Diablo-D3> its nodejs
[21:35:54] <Diablo-D3> so who cares I guess?
[21:36:14] *** Quits: malt (~malt@user/malt) (Quit: WeeChat 2.8)
[21:37:20] *** Joins: malt (~malt@user/malt)
[21:41:17] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 240 seconds)
[21:42:18] <MatthiasVance> Definitely not those 21M projects depending on it?
[21:42:31] <MatthiasVance> That now can't serve their users xD
[21:43:29] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:44:37] *** Quits: learningc (~IceChat95@modemcable253.161-226-192.mc.videotron.ca) (Ping timeout: 240 seconds)
[21:45:41] <MatthiasVance> That's probably not true, because if this doesn't show up in testing you have other problems :P
[21:47:18] <Ameisen> I am quite confused.
[21:47:31] <Ameisen> https://pastebin.com/izcixUXa
[21:47:49] <Ameisen> if I use the delegate created with the first set, I get results that suggest that the 'type' parameter isn't what I'm passing.
[21:47:55] <Ameisen> If I use the delegate created in the second set, it works fine
[21:48:04] <Ameisen> as far as I can tell, they should be entirely equivalent.
[21:48:13] <Ameisen> The first is also what the compiler generates for a similer passthrough
[21:53:51] *** Quits: jamea (~jamea@10.189-202-213.bestelclientes.com.mx) ()
[21:54:04] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:59:55] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[22:03:06] <biberu> MatthiasVance: i read something about a home fire, if so he may have been under a lot of stress
[22:04:08] <MatthiasVance> biberu: Yeah :(
[22:04:51] <biberu> https://www.reddit.com/r/node/comments/rwp0ab/author_of_fakerjs_deletes_the_entire_repo/
[22:04:57] <biberu> although...
[22:05:14] <Nasp> The allocated column in benchmark dotnet, is that really per operation?
[22:06:19] <Nasp> Hmm yup it is
[22:22:32] *** Quits: simius (~simius@user/simius) (Ping timeout: 256 seconds)
[22:24:04] *** Joins: simius (~simius@user/simius)
[22:33:58] *** Quits: cliluw (~cliluw@47.147.73.223) (Remote host closed the connection)
[22:34:26] *** Joins: cliluw (~cliluw@47.147.73.223)
[22:34:31] *** Quits: cliluw (~cliluw@47.147.73.223) (Remote host closed the connection)
[22:34:56] *** Joins: cliluw (~cliluw@47.147.73.223)
[22:35:00] *** Quits: cliluw (~cliluw@47.147.73.223) (Remote host closed the connection)
[22:35:25] *** Joins: cliluw (~cliluw@47.147.73.223)
[22:35:30] *** Quits: cliluw (~cliluw@47.147.73.223) (Remote host closed the connection)
[22:35:55] *** Joins: cliluw (~cliluw@47.147.73.223)
[22:36:00] *** Quits: cliluw (~cliluw@47.147.73.223) (Remote host closed the connection)
[22:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:47:08] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:54:22] *** Joins: Fiji (~Fiji@user/fiji)
[22:59:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[23:01:43] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[23:02:21] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[23:08:03] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:10:18] <sysRPL> i was at `ihop` the pancake restaurant yesterday and no one was eating there
[23:11:26] <sysRPL> after having been in there for about 10 minutes a couple comes in and are told they can sit anywhere they like. they decide to pick the booth right against ours
[23:11:42] <jonp> some people be dumb
[23:12:35] <sysRPL> i thought, wow we're in a pandemic and you have the entire place to choose from, and you choose to sit right next to us. wtf is the matter with you?
[23:12:57] <jonp> the miss the company of others?
[23:13:22] <sysRPL> then these people look at the menu and have to ask the waitress, "what's a crêpe"?
[23:13:34] <jonp> *that* is fair
[23:13:42] <jonp> Americans? familiar with French food? lol?
[23:14:17] <sysRPL> you think it's fair a 50+ year old couple doesn't know what a crêpe is?
[23:14:36] <jonp> *I* didn't know what a fucking crepe was until ~5 years ago
[23:14:41] <jonp> so YES, i think that's fair
[23:14:50] <sysRPL> how old are you ballpark?
[23:14:54] <jonp> 40s
[23:18:35] <sysRPL> here's a bit of knowledge ...
[23:18:53] <jonp> i m stupid?
[23:18:54] <sysRPL> science ponders questions which may never be answered
[23:19:16] <sysRPL> religion preaches answers which may never be questioned
[23:19:40] <jonp> i mean, some like to *think* that…
[23:19:59] <sysRPL> i don't think you're stupid
[23:20:00] <jonp> but there's tons of Christian history of those questioning church doctrine and NOT being burned at the stake
[23:20:23] <jonp> not as much as we might like
[23:20:26] <jonp> (Gallileo, anyone?)
[23:20:31] <jonp> but more than "none"
[23:21:02] <jonp> Newton wasn't thrown out of the church, for example.  (afaik?)
[23:21:46] <sysRPL> newton was a strong proponent of the church
[23:21:57] <jonp> right
[23:22:06] <sysRPL> morality is doing what is right no matter what you are told
[23:22:18] <sysRPL> religion is doing what you are told no matter what is right
[23:22:36] <jonp> many would argue that you can't be moral w/o religion
[23:22:38] <jonp> i don't agree
[23:22:43] <jonp> but i have friends who do
[23:23:11] <brianonymous> morality is too subjective.. so many deaths directly related to 'greater goods'
[23:23:53] <jonp> how many deaths is "acceptable" to keep the economy going, in this world of COVID-19?
[23:23:55] <jonp> HHOS?
[23:24:39] <sysRPL> a god who know all and created this version of the universe knowing everything that would happen in it is responsible for everything that has or will happen, and everything happens as he destined it to happen
[23:24:42] <brianonymous> probably the wrong question
[23:25:00] <jonp> brianonymous: it's a terrible question
[23:25:25] <jonp> …and yet it's a question that was implicitly asked in April 2020, with many claiming "meh, it's fine if the old die so long as we don't hurt the economy!"
[23:25:29] <jonp> (paraphrasing, of course)
[23:25:44] <jonp> and is still being implicitly asked today
[23:25:52] <sysRPL> so god is responsible for people using his name as the reason to fly airplanes loaded full of passengers into building tall buildings
[23:26:33] <sysRPL> because this is the universe god choose to create ... the universe where people fly planes into buildings
[23:26:47] <sysRPL> science lets us build airplanes
[23:26:59] <sysRPL> religion makes us fly them into building
[23:29:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[23:29:07] <sysRPL> it's either that or god is something made up that man created to explain things
[23:29:31] <sysRPL> i'll go with the later
[23:35:35] *** Joins: learningc (~IceChat95@modemcable253.161-226-192.mc.videotron.ca)
[23:38:41] *** Joins: dan01 (~dan01@2a02:2f0f:320f:8200:282a:7d42:f2e6:d641)
[23:39:04] *** Quits: dan01 (~dan01@2a02:2f0f:320f:8200:282a:7d42:f2e6:d641) (Client Quit)
[23:39:06] <ki9a> wow
[23:39:15] <ki9a> religion and politics
[23:39:19] <ki9a> never a good idea.
[23:39:22] <jonp> now we just need flying saucers
[23:39:34] *** Joins: sebbu (~sebbu@user/sebbu)
[23:39:35] <ki9a> Go to greece?
[23:39:45] <ki9a> they throw around plates and saucers
[23:40:27] <sysRPL> does anyone here use npm?
[23:41:12] <sysRPL> i had a very bad impression of it a while back and my suspicions were somewhat confirmed by an article i read recently
[23:42:48] <sysRPL> i wanted to try writing a simple service using npm and typescript some time ago (years) and went through the basics of setting up a minimal project
[23:44:10] <sysRPL> i noticed how much seemingly random crap the setup pulled into various folders and subfolders and other dependencies to just get started with a minimal project
[23:45:24] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[23:45:26] <sysRPL> at the time i started looking through all the crap npm had pulled in and thought to myself, is this all really that necessary? i also thought it was just pulling in random crap `because``
[23:46:49] <sysRPL> recently i was reading about this and other similar problems -> https://www.bleepingcomputer.com/news/security/dev-corrupts-npm-libs-colors-and-faker-breaking-thousands-of-apps/
[23:46:58] <MatthiasVance> Every time I ask a chicken a question they run away.. seems they don't like to be grilled.
[23:47:33] <sysRPL> MatthiasVance: that's why i bake them
[23:49:02] <MatthiasVance> Where do you source the marihuana from?
[23:49:13] <MatthiasVance> Baked chicken
[23:54:11] *** Quits: Assault (~Assault@87-95-55-3.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[23:54:21] *** Joins: dan01 (~dan01@2a02:2f0f:320f:8200:282a:7d42:f2e6:d641)
[23:58:54] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
