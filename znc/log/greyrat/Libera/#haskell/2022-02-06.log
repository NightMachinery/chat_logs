[00:00:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:01:13] *** Quits: rando25892 (~homefame@user/rando25892) (Ping timeout: 256 seconds)
[00:01:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:01:27] *** Joins: fendor__ (~fendor@212095005025.public.telering.at)
[00:02:02] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[00:02:22] *** Joins: rando25892 (~homefame@user/rando25892)
[00:04:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:05:11] *** Quits: fendor_ (~fendor@91.141.79.239.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[00:07:31] *** Quits: gaff (~gaff@49.207.224.13) (Remote host closed the connection)
[00:08:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[00:09:39] * ski idly ponders optics as a query (and modification) language
[00:11:26] <Rembane> ski: Like xpath?
[00:11:45] <ski> maybe. or SQL
[00:12:27] <ski> (someone mentioned "yes well, \"drilling\" for values insome some deeply nested structure will always require some code" in another channel)
[00:16:40] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[00:17:39] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 256 seconds)
[00:18:05] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[00:18:20] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[00:20:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[00:22:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:28:00] *** Quits: fendor__ (~fendor@212095005025.public.telering.at) (Read error: Connection reset by peer)
[00:28:06] *** Joins: fendor_ (~fendor@91.141.79.239.wireless.dyn.drei.com)
[00:29:06] *** Quits: tired (~tired@user/tired) (Quit: /)
[00:30:41] *** Quits: tommd (~tommd@67-42-147-226.ptld.qwest.net) (Ping timeout: 256 seconds)
[00:33:23] *** Joins: Pickchea (~private@user/pickchea)
[00:36:01] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[00:36:14] *** Joins: tired (~tired@user/tired)
[00:38:01] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[00:39:25] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[00:46:11] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:49:53] *** Quits: tired (~tired@user/tired) (Quit: /)
[00:50:31] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[00:51:25] *** Joins: tired (~tired@user/tired)
[00:53:57] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 240 seconds)
[00:56:22] *** Joins: coot (~coot@213.134.190.95)
[01:01:12] *** Quits: coot (~coot@213.134.190.95) (Client Quit)
[01:03:08] <Inst> can Haskell be considered type-level programming + pure functional programming?
[01:03:19] <Inst> I'm getting the feeling that the type-level programming is as important or more so than the pure functional programming
[01:03:40] <Inst> functional programming is a system of support and restraint, i.e, TCO, first-class functions
[01:03:49] <Inst> immutability by default
[01:04:14] <EvanR> is type level programming different from functional programming?
[01:04:26] <monochrom> I would pin those descriptions on individual programs not the whole language.
[01:05:08] <Inst> i'm just trying to see whether it's a valid to say "you know you're a Haskeller when the first thing you do when you learn a new language is look up the type system"
[01:05:19] <maerwald> EvanR: there's functional programming without types, so yes
[01:05:30] <Inst> lisp, i assume?
[01:05:46] <monochrom> Are you a "journalist"? Only someone who has magazine article due is desperate enough to ask those generic hearsay questions.
[01:06:03] <EvanR> "you know you're a haskell when" sounds like a hilarious jeff foxworthy show
[01:06:09] <EvanR> haskeller
[01:06:42] *** Joins: polyphem (~rod@2a02:810d:840:8754:3d7:e2e3:b5c3:df83)
[01:06:53] <Inst> but is it valid / good practice to learn new languages starting from the type system?
[01:07:08] <monochrom> Depends on the language?
[01:07:28] <monochrom> OK I'm outta here.
[01:07:31] <Inst> sorry
[01:07:35] *** Parts: Inst (~delicacie@2601:6c4:4080:3f80:44dc:4b88:2c8a:316d) (Leaving)
[01:09:06] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[01:09:29] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[01:10:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:10:42] <EvanR> if you like type level programming go check out some dependently typed languages, at least. There's probably other kinds of languages with type level programming nicer than haskell out there too
[01:10:53] <monochrom> They left :)
[01:11:14] * EvanR realizes they are talking to an empty patch of wall
[01:11:20] <maerwald> yeah... any language that doesn't chaotically retro-fit dependent types will be a smoother experience
[01:11:28] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:44dc:4b88:2c8a:316d)
[01:11:43] <Inst> or someone who's still monitoring via matrix, but actually left for monochrom's sensitivity
[01:11:48] <maerwald> lol
[01:11:57] *** Parts: Inst (~delicacie@2601:6c4:4080:3f80:44dc:4b88:2c8a:316d) (Leaving)
[01:12:01] <sm> when talking to Inst.. be ready for sudden moves in any direction :)
[01:12:02] <geekosaur> oy
[01:12:52] <monochrom> And after all these months I'm pretty sure their core interest is beating around the bush and mincing words, not actual investigations.
[01:13:37] <maerwald> did they apply for scotland yard?
[01:13:46] <Inst[m]> i, at least, will know if i'm completely full of shit by october
[01:13:58] <EvanR> a good skill to have
[01:16:46] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[01:16:48] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:17:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Remote host closed the connection)
[01:18:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[01:20:32] *** Joins: cynomys (~cynomys@user/cynomys)
[01:26:47] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[01:30:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[01:31:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:31:48] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:31:56] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:33:23] *** Joins: cuz (~user@50.226.229.246)
[01:34:02] *** Joins: cuz` (~user@50.226.229.246)
[01:37:13] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[01:37:53] *** Quits: cuz (~user@50.226.229.246) (Ping timeout: 256 seconds)
[01:43:16] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[01:43:57] *** Quits: fendor_ (~fendor@91.141.79.239.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[01:46:05] *** Joins: etale (~user@2600:8802:2105:7100:721c:e7ff:feda:ed41)
[01:58:07] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:58:23] *** Quits: cuz` (~user@50.226.229.246) (Remote host closed the connection)
[01:58:30] *** Joins: cuz` (~user@50.226.229.246)
[01:59:18] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:09:01] *** Quits: enyc (~enyc@user/enyc) (Ping timeout: 240 seconds)
[02:13:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Remote host closed the connection)
[02:14:41] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:3911:f302:476a:5d4c)
[02:15:38] <hololeap> Inst[m]: one thing to keep in mind is that the the type system only exists before the program is compiled. it's purely logic that exists inside GHC, so you could think of it as another language, in a way
[02:16:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:17:01] *** Quits: maxime_ (~maxime@2a01cb08833598005be65fcb4fda67db.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:17:33] <hololeap> for instance, some knuckleheads have written a way to solve the n-queens problem purely in the type system. when it's taken that far, it seems to me like a seperate language
[02:19:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:22:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[02:33:38] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:33:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:33:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:33:48] *** Joins: wroathe (~wroathe@user/wroathe)
[02:34:03] <janus> hololeap: i can't pull in your PR since I am not a maintainer of happstack-server :P i am just interested
[02:34:17] <janus> stepcut (jeremy shaw) is the maintainer
[02:34:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:35:25] <Inst[m]> <hololeap> "for instance, some knuckleheads..." <- i'm guessing to learn type-level programming, prolog etc might be a better choice?
[02:35:45] <Inst[m]> as opposed to idris, agda, scala?
[02:37:07] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:3911:f302:476a:5d4c) (Quit: Leaving)
[02:37:09] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:37:14] <geekosaur> prolog's not really type level programming. neither is scala. if you're becoming comfortable with haskell then idris may be of interest
[02:37:25] <geekosaur> but there is no one way to approach type systems
[02:37:33] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:38:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:38:09] <geekosaur> just as there's no one "type system"
[02:39:06] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[02:39:17] <Inst[m]> i'm just looking for the high ground, it's the primary argument for my interest in haskell
[02:39:24] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[02:39:33] <geekosaur> I don't understand "high ground"
[02:39:51] *** Quits: emad (~emad@156.214.198.176) (Quit: Leaving)
[02:40:05] <Inst[m]> i.e, have the most sophisticated abstractions, so even if i don't end up using the language,everything else is now easy
[02:40:15] *** Joins: emf (~emf@2620:10d:c090:400::5:ab3f)
[02:40:23] <Inst[m]> apparently Abstract Data Types can be used to implement quotient types
[02:40:31] <Inst[m]> which are dual to dependent types, apparently
[02:42:19] *** Quits: xff0x (~xff0x@2001:1a81:525e:1300:ccb2:578e:6a32:bac8) (Ping timeout: 250 seconds)
[02:42:38] <hololeap> hm, homotopy type theory? :p
[02:42:56] <Inst[m]> not something i'm familiar with, so monochrom's claim is correct
[02:43:03] <Inst[m]> i'm just rushing to try to get a basic understanding of everything hard
[02:43:06] *** Joins: xff0x (~xff0x@2001:1a81:525e:1300:8c6b:7d96:3a83:c2cd)
[02:43:12] <hololeap> I'm not familiar with it either... not very many people are
[02:44:07] <hololeap> from what I understand it's like a crazy mix of topology and type theory, and I don't know either of those :p
[02:45:28] * geekosaur knows a very little bit of both and assumes he'd be completely lost if he tried to poke at HoTT
[02:45:49] <geekosaur> s/both/either/ perhaps
[02:46:10] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[02:46:22] <sclv> geekosaur: you'd be surprised!
[02:46:41] <hololeap> Inst[m]: if you're looking for more accessible theory, you might be interested in bartosz milewski's stuff
[02:47:05] <Inst[m]> oh wait
[02:47:05] <Inst[m]> https://homotopytypetheory.org/book/
[02:47:13] <Inst[m]> is this the stuff that's purportedly unreadable even with a PhD?
[02:47:29] <sclv> its accessible if you go slowly
[02:47:43] <geekosaur> "a" Ph.D.? I'd imagine it depends on which
[02:47:49] <sclv> it doesn't make programming haskell easier though. its just really neat math!
[02:48:08] <geekosaur> so not so different from CT in that regard?
[02:48:17] <sclv> arguably, yes :-)
[02:48:34] <monochrom> OOP used to be a PhD thing, too.
[02:49:15] <sclv> considering fancier abstractions are more "advanced" is not a good approach, in my experience
[02:49:21] <sclv> they just let you do different things
[02:49:26] <monochrom> 400 years ago, only PhDs were taught the quadratic formula.
[02:49:34] <sclv> and they don't substitute for knowing the details of the specific things they abstract
[02:49:55] <Hecate> < monochrom> OOP used to be a PhD thing, too. // And then Java brought it to the masses by deforming it beyond recognition
[02:49:58] <Hecate> :D
[02:50:15] <sclv> i.e. you can formulate group theory as a special case of category theory. but just because a group can be presented as a category doesn't mean that knowing a textbook full of category theory helps you understand the classification of finite simple groups
[02:50:32] <sclv> it helps with some things for sure, but its no substitute!
[02:51:02] <monochrom> The deformation also took a few PhDs and research papers to truly understand, too.
[02:51:28] <monochrom> Not to mention the multiple engineering-inclined PhDs to make Java run faster.
[02:51:36] <monochrom> or run with less memory
[02:51:44] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[02:54:10] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:54:25] <monochrom> And recall that it took Wadler, not some software "engineer", to figure out Java Generics.
[02:55:13] <ski> Hecate : yea, it's what usually happens
[02:56:33] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:56:55] <ski> Inst[m] : some parts of Prolog (or logic programming in general) is helpful for understanding type systems, sure. also, it helps round out your understanding of different programming paradigms
[02:57:12] <ski> (Prolog is dynamically typed, btw)
[02:57:19] <monochrom> Just 50 years ago, replacing goto by loops and if-then-else was an "impractical academic pipe dream".
[02:57:45] * ski idly ponders the invention of the subroutine
[02:57:47] <monochrom> (look for "Dijkstra structured programming")
[02:57:52] *** Joins: zebrag (~chris@user/zebrag)
[02:59:08] <maerwald> monochrom: I had an odd moment yesterday while coding bash and I wished it had goto
[03:00:19] <monochrom> Which one do you prefer?  An exception system.  BASIC's "on error goto".
[03:00:27] <sprout_> goto is useful
[03:00:45] <sprout_> I think you want both
[03:00:46] <monochrom> Between a rock and a hard place :)
[03:01:12] <sprout_> I have it in my lexer (I think that's the only place) but also in my bytecode
[03:01:13] <maerwald> programming is a conspiracy to make us forget goto
[03:01:54] <sprout_> both do (naive) pattern matching so I guess goto naturally arises there
[03:02:07] <sprout_> or rather,  conditional jumps
[03:03:27] <ski>        The term "flexibility" is usually used to denote the existence of a range of choices available to a programmer or implementor -- the more choices, the greater the flexibility.  Flexibility is sometimes referred to as "generality".  Because it is frequently presented in the desirable terms, "delaying binding of virtual objects to their realizations,"
[03:03:40] <ski>   increased flexibility has generally been considered a fatted calf of great succulence, sought voraciously and in the hope that the increased complexity that invariably attends it can be kept under control.  In recent years, the wisdom of this quest has been called into question, for flexibility without discipline appears contrary to the plans of the god of reliability.
[03:03:50] <ski>   (An automobile with independent steering mechanisms for both front wheels is more flexible but less disciplined than an ordinary one.  It is mainly of metaphysical interest, offensive to the god of safe highways.)
[03:03:54] <ski>   -- "Sacrificing the calf of flexibility on the altar of reliability",Peter J. Denning,1976,<http://dl.acm.org/ft_gateway.cfm?id=807704&type=pdf>
[03:04:56] <monochrom> OTOH independent steering for all 4 wheels is actually useful.
[03:05:18] <ski> if they're all coordinated with each other in an intelligent way :)
[03:05:37] <monochrom> One of those times when the middle ground is worse than both extremes.
[03:05:51] <Inst[m]> iirc, yes, byd, parallel parking via computer
[03:06:00] <Inst[m]> they were promising a car like that a while back
[03:06:05] <ski> the (short, three pages) paper goes on to talk about reliability, correctness, flexibility, mentioning patterns in the past like assembly vs. high-level (like BCPL,C), batch vs. interactive, relational vs. network, &c.
[03:06:06] <Inst[m]> can i ask a question about how haskell-built .exes work?
[03:06:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[03:06:29] <Inst[m]> don't ask to ask
[03:06:34] <monochrom> The Freedom Convoy demands independent steering of all 18 wheels! >:)
[03:06:56] <geekosaur> at what level? the high level view is https://en.wikipedia.org/wiki/Graph_reduction
[03:07:06] <Inst[m]> i'll just put it out there: haskell built exes are independent of path variables, right? especially if it's just a simple program made out of a few putStrLn and getChars, right?
[03:07:37] *** Joins: deadmarshal (~deadmarsh@95.38.114.160)
[03:07:39] <geekosaur> the low level view of that is https://www.microsoft.com/en-us/research/wp-content/uploads/1992/04/spineless-tagless-gmachine.pdf
[03:08:33] <geekosaur> they're independent if they don't use data files and don't use ghc-api (which is more or less all of ghc linked into your program and requires its whole installation to be available)
[03:09:01] <Inst[m]> define data-files
[03:09:03] <geekosaur> even if it uses data files you have some control over it, although I haven't looked at recent versions of how that works
[03:09:17] <Inst[m]> primitive ghc "filename" of crap simple program
[03:09:41] <Inst[m]> only module used is system.io and only extension is strict
[03:09:48] <geekosaur> then you don't care
[03:10:21] <geekosaur> no pathnames and you can just copy the exe around (although I don't know offhand what dlls it might require)
[03:10:29] <geekosaur> <-- not really a windows person
[03:10:38] <Inst[m]> files generated were .hi, .hs, .o, .exe
[03:10:48] <geekosaur> I know on unixlikes the default is to link statically so a program is pretty much self-contained
[03:10:56] <hololeap> anyone have a clue what this `-i` is doing here in doctest? https://github.com/dhall-lang/dhall-haskell/blob/master/dhall/doctest/Main.hs#L51
[03:11:00] <Inst[m]> i guess winio is effectively a black art
[03:11:09] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[03:11:13] <monochrom> By default GHC on Windows is even more static than GHC on Linux.
[03:11:19] <geekosaur> the .hi and .o files are intermediates you probably don't need to hold on to
[03:11:38] <Inst[m]> so, if the file was compiled while winio was still returning the expected behavior
[03:11:46] <geekosaur> if you have multiple source files then you might want to keep them in your dev environment to save on recompiling everything when you only change one file
[03:11:50] <Inst[m]> i should go badger the #powershell folks some more
[03:12:11] *** Quits: deadmarshal (~deadmarsh@95.38.114.160) (Ping timeout: 256 seconds)
[03:13:45] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[03:13:48] <geekosaur> hololeap, it's a module include path. you'd have to ask the Dhall dev(s) for more detail than the comment
[03:13:59] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[03:15:55] <geekosaur> Inst[m], I don't know what dependencies the ghc RTS has on Windows. Said dependencies might include registry entries or something in msys2 which might now be confused because installing HP installed a separate msys2 which might have been left around
[03:16:15] <geekosaur> and I'd expect mixing things between different msys2 installations to cause problems
[03:16:22] <Inst[m]> thanks for trying
[03:16:24] <geekosaur> that said, I'm just guessing
[03:16:30] <maerwald> someone once said we should have one msys2 per GHC xD
[03:16:31] <Inst[m]> possible it's the different msys2 that might have created the issue
[03:17:54] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:18:25] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[03:22:53] <hololeap> geekosaur: thanks. do you know if this is documented anywhere? I can't seem to find it.
[03:24:08] <geekosaur> it appears to be using (passing on?) ghc options so https://downloads.haskell.org/ghc/latest/docs/html/users_guide/flags.html#finding-imports
[03:25:33] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 276 seconds)
[03:30:05] <geekosaur> and there's even an example usage of doctest which uses -i that way (toward the end of https://hackage.haskell.org/package/doctest readme)
[03:32:34] <hololeap> geekosaur: oh, thanks. interesting that the github readme doesn't include that
[03:33:15] <geekosaur> which github readme? I pulled it from doctest's, since it's running doctest as a function instead of a program
[03:33:34] <geekosaur> shortly above "Doctest in the wild"
[03:34:02] <hololeap> https://github.com/sol/doctest#readme
[03:34:22] <hololeap> I just did a CTRL+F search for "-i" and didn't see anything that looked relevant
[03:37:40] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[03:39:27] <geekosaur> interesting. yep, looks like thta whole subsection is missing from the github readme
[03:40:20] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Client Quit)
[03:44:34] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[03:46:17] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:50:11] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[03:53:45] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:58:19] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[03:59:18] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[04:10:20] *** Joins: unyu (~pyon@user/pyon)
[04:16:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Remote host closed the connection)
[04:27:24] <Inst[m]> btw
[04:27:28] <Inst[m]> if anyone wants to see how bizarre my current winio behavior is:
[04:27:29] <Inst[m]> https://pastebin.com/8G6WD6MU
[04:28:41] <geekosaur> that's multiple ghci-s running in the same terminal
[04:28:56] <geekosaur> not supposed to happen these days, but…
[04:29:43] <geekosaur> check the taks manager and kill all ghci or ghc processes you find running, then try again
[04:29:48] <geekosaur> *task
[04:31:51] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:33:39] *** Joins: jao (~jao@68.235.43.173)
[04:35:14] <Inst[m]> yeah, i know
[04:35:15] <Inst[m]> it's insane
[04:36:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[04:36:34] *** Joins: burnsidesLlama (~burnsides@client-8-65.eduroam.oxuni.org.uk)
[04:37:03] *** Quits: etale (~user@2600:8802:2105:7100:721c:e7ff:feda:ed41) (Quit: ERC (IRC client for Emacs 27.1))
[04:40:34] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:40:55] *** Quits: burnsidesLlama (~burnsides@client-8-65.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[04:41:12] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:44:18] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[04:44:29] <romesrf> o/
[04:47:20] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:56] *** Joins: etale (~user@2600:8802:2105:7100:721c:e7ff:feda:ed41)
[04:49:15] *** Parts: etale (~user@2600:8802:2105:7100:721c:e7ff:feda:ed41) ()
[04:50:38] *** Joins: etale (~user@2600:8802:2105:7100:721c:e7ff:feda:ed41)
[04:51:01] *** Parts: etale (~user@2600:8802:2105:7100:721c:e7ff:feda:ed41) ()
[04:52:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622)
[04:58:37] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Ping timeout: 240 seconds)
[05:03:12] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[05:06:06] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[05:06:23] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[05:28:25] *** Joins: ellie (~ellie@user/ellie)
[05:32:30] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[05:35:06] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[05:35:24] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[05:35:40] *** Quits: leungbk (~brian@cpe-142-129-149-172.socal.res.rr.com) (Quit: Lost terminal)
[05:37:01] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:44:37] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[05:47:35] *** Joins: califax- (~califax@user/califx)
[05:48:11] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[05:51:09] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:51:09] *** califax- is now known as califax
[05:56:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 256 seconds)
[05:57:28] *** Quits: jao (~jao@68.235.43.173) (Remote host closed the connection)
[05:58:40] *** Joins: d34df00d (~d34df00d@2600:1700:8c60:3a10::48)
[05:58:55] <d34df00d> Hi!
[05:59:01] <d34df00d> Exceptions question!
[05:59:54] <d34df00d> Supose I write a server thread that `forever` reads a line from a socket and does something with it. If the line fails to be read, or if the handler throws an exception, I want to log it, ignore it and run the handler on the next lines.
[06:00:22] <d34df00d> But I don't want to ignore things I shouldn't ignore, like killing the thread.
[06:00:40] <d34df00d> How to write this "ignore any exception except the ones that shouldn't be ignored"?
[06:01:43] <d34df00d> What comes to mind is having more specific handlers for AsyncException/SomeAsyncException which rethrow, and log/ignore the rest.
[06:02:45] *** Quits: mmhat (~mmh@55d44844.access.ecotel.net) (Ping timeout: 256 seconds)
[06:03:06] *** Joins: rusrushal13 (~rusrushal@2409:4056:108:9c3b:d7fd:94d2:1ba2:efdd)
[06:03:21] <d34df00d> But I'm not sure if that's right.
[06:06:17] *** Quits: xff0x (~xff0x@2001:1a81:525e:1300:8c6b:7d96:3a83:c2cd) (Ping timeout: 240 seconds)
[06:06:17] <ski> d34df00d : maybe define your own kind of exception, and catch only that ?
[06:07:00] <d34df00d> ski: I want to also be able to catch whatever non-total Prelude functions throw, or maybe some arbitrary third-party library throws.
[06:07:19] <ski> (or if you can quantify exactly which exceptions you want to catch, do that)
[06:08:04] <d34df00d> I don't really know in advance.
[06:08:17] *** Joins: xff0x (~xff0x@2001:1a81:52c7:8c00:1f7f:998e:5249:4548)
[06:08:22] <d34df00d> Think of it as really "a catch-all exception handler at the top of a server loop".
[06:08:45] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[06:09:35] <ski> @wiki Error vs. Exception
[06:09:35] <lambdabot> https://wiki.haskell.org/Error_vs._Exception
[06:09:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[06:10:07] <ski> @hoogle catchJust
[06:10:07] <lambdabot> Control.Exception catchJust :: Exception e => (e -> Maybe b) -> IO a -> (b -> IO a) -> IO a
[06:10:07] <lambdabot> Control.Exception.Base catchJust :: Exception e => (e -> Maybe b) -> IO a -> (b -> IO a) -> IO a
[06:10:07] <lambdabot> Control.Monad.Catch catchJust :: (MonadCatch m, Exception e) => (e -> Maybe b) -> m a -> (b -> m a) -> m a
[06:10:24] <ski> if you know which exceptions you don't want to catch, you could opt out of those, using ^
[06:11:29] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[06:11:30] <d34df00d> That makes sense. What things I don't want to catch, though? I know about AsyncException, but is there anything else?
[06:12:57] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[06:14:12] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:15:02] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[06:22:29] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[06:28:50] *** Joins: xsperry (~xs@user/xsperry)
[06:31:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:32:14] <jackdk> better to catch only the things you know you want. The easiest way to do this is to never write anything that throws, and propagate your errors with constructs like ExceptT. If you use library functions that can throw, immediately wrap the exceptions you care about into Either or Maybe
[06:33:55] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[06:35:37] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[06:36:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:36:59] *** Quits: cuz` (~user@50.226.229.246) (Ping timeout: 256 seconds)
[06:39:34] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:39:36] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Remote host closed the connection)
[06:39:53] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[06:40:32] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[06:40:44] *** Joins: dajoer (~david@user/gvx)
[06:40:46] *** Quits: rusrushal13 (~rusrushal@2409:4056:108:9c3b:d7fd:94d2:1ba2:efdd) (Quit: Client closed)
[06:46:45] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:9d25:f887:d801:3464)
[06:47:14] <Inst> btw
[06:47:34] <Inst> who was asking about N+k patterns?
[06:47:58] <Inst> it's still doable, just do nested function definitions, i.e, you use a where pattern
[06:48:11] <Inst> but i think it was already discussed the last time
[06:48:41] <Inst> fun (n+k) = .... is now fun n = iFun (n+k) where iFun = ....
[06:53:59] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:54:53] *** Joins: rembo10 (~rembo10@remulis.com)
[06:55:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:55:37] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:55:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:55:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:55:51] *** Joins: wroathe (~wroathe@user/wroathe)
[06:56:35] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[07:05:09] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[07:05:10] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[07:05:13] *** allbery_b is now known as geekosaur
[07:05:55] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[07:07:16] *** Joins: jao (~jao@68.235.43.173)
[07:07:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:07:52] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (Quit: pie_)
[07:09:37] *** Quits: td_ (~td@muedsl-82-207-238-241.citykom.de) (Ping timeout: 256 seconds)
[07:11:28] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[07:11:33] *** Joins: td_ (~td@muedsl-82-207-238-099.citykom.de)
[07:11:37] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:9d25:f887:d801:3464) (Ping timeout: 240 seconds)
[07:13:09] <ski> Inst[m] : that's, almost, the opposite
[07:14:01] <ski> (almost, because an n+k pattern only matches non-negatives)
[07:14:38] *** Joins: cuz` (~user@50.226.229.246)
[07:19:15] *** Quits: cuz` (~user@50.226.229.246) (Ping timeout: 256 seconds)
[07:22:10] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[07:22:27] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[07:24:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:26:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:33:08] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:33:55] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[07:47:34] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:65d0:53d1:d25a:5705)
[07:53:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:56:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:57:11] *** Joins: fef (~thedawn@user/thedawn)
[07:59:46] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 250 seconds)
[08:07:59] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[08:12:43] *** Joins: Akiva (~Akiva@user/Akiva)
[08:12:58] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:16:48] *** Joins: deadmarshal (~deadmarsh@95.38.114.160)
[08:19:17] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[08:19:21] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[08:19:45] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:20:48] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[08:25:57] *** Quits: emf (~emf@2620:10d:c090:400::5:ab3f) (Ping timeout: 240 seconds)
[08:27:36] *** Joins: emf (~emf@2620:10d:c090:400::5:ab3f)
[08:28:28] *** Joins: gaff (~gaff@49.207.221.138)
[08:32:28] *** Joins: Sgeo (~Sgeo@user/sgeo)
[08:35:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[08:40:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:40:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:40:22] *** Joins: wroathe (~wroathe@user/wroathe)
[08:43:41] *** Quits: jao (~jao@68.235.43.173) (Ping timeout: 256 seconds)
[08:55:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:00:48] *** Joins: ld86 (~ld86@host86-151-221-50.range86-151.btcentralplus.com)
[09:01:02] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:02:22] *** Quits: ld86 (~ld86@host86-151-221-50.range86-151.btcentralplus.com) (Client Quit)
[09:04:41] *** Joins: meer (~delicacie@2601:6c4:4080:3f80:99ec:65c9:5423:af7b)
[09:06:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:65d0:53d1:d25a:5705) (Ping timeout: 240 seconds)
[09:06:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:08:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:10:17] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[09:12:17] *** Joins: etale (~user@2600:8802:2105:7100:721c:e7ff:feda:ed41)
[09:12:42] *** Quits: etale (~user@2600:8802:2105:7100:721c:e7ff:feda:ed41) (Client Quit)
[09:14:40] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[09:17:51] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:19:09] *** Quits: deadmarshal (~deadmarsh@95.38.114.160) (Ping timeout: 256 seconds)
[09:23:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:24:05] <meer> `/join #powershell
[09:24:11] *** meer is now known as Inst
[09:24:49] *** Quits: pierrot (~pi@user/pierrot) (Read error: Connection reset by peer)
[09:25:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:25:58] *** Joins: pierrot (~pi@user/pierrot)
[09:31:40] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:d8d5:ad63:210:577a)
[09:34:27] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:36:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:41:04] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:a45b:6ac9:43c1:2d7f) (Remote host closed the connection)
[09:41:19] *** Joins: akegalj (~akegalj@93-138-103-111.adsl.net.t-com.hr)
[09:46:38] *** Quits: gaff (~gaff@49.207.221.138) (Remote host closed the connection)
[09:48:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:50:05] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[09:50:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:52:20] *** Joins: deadmarshal (~deadmarsh@95.38.114.160)
[09:52:51] *** Joins: glguy (x@libera/staff/glguy)
[09:53:18] *** Joins: Everything (~Everythin@37.115.210.35)
[09:54:17] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[09:54:36] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:55:19] *** Joins: mbuf (~Shakthi@122.178.180.184)
[10:04:29] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[10:13:03] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:19:19] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:19:43] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:19:56] *** Joins: gaff (~gaff@49.207.223.219)
[10:22:24] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[10:22:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[10:22:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:24:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:25:50] *** Quits: gaff (~gaff@49.207.223.219) (Remote host closed the connection)
[10:27:11] *** Joins: gaff (~gaff@49.207.223.219)
[10:27:27] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[10:32:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:35:21] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[10:37:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[10:37:58] *** Quits: gaff (~gaff@49.207.223.219) (Quit: Bye ...)
[10:38:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[10:39:20] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:41:19] *** Joins: alfonsox (~quassel@103.87.57.95)
[10:44:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:47:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:49:31] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:51:25] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[10:56:56] *** Joins: fendor (~fendor@178.115.78.100.wireless.dyn.drei.com)
[10:56:59] *** Quits: thebnq (~bnq@herrokitty.com) (Remote host closed the connection)
[10:57:11] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:10:06] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:10:28] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:15:17] *** Joins: thebnq (~bnq@66-37-19-52.phx.onelemur.com)
[11:15:25] *** Quits: thebnq (~bnq@66-37-19-52.phx.onelemur.com) (Remote host closed the connection)
[11:17:27] *** Joins: thebnq (~bnq@66-37-19-52.phx.onelemur.com)
[11:19:32] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:23:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[11:27:07] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[11:40:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:40:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:40:13] *** Joins: wroathe (~wroathe@user/wroathe)
[11:40:31] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[11:40:39] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[11:41:44] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c18f:7483:538b:1622) (Remote host closed the connection)
[11:42:11] *** Quits: akegalj (~akegalj@93-138-103-111.adsl.net.t-com.hr) (Remote host closed the connection)
[11:45:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:45:31] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Ping timeout: 250 seconds)
[11:55:15] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:55:59] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[11:58:47] *** Joins: enoch (~enochthec@115-188-140-207-vdsl.sparkbb.co.nz)
[11:58:47] *** Quits: enoch (~enochthec@115-188-140-207-vdsl.sparkbb.co.nz) (Changing host)
[11:58:47] *** Joins: enoch (~enochthec@user/enochthechronoco)
[12:00:37] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:99ec:65c9:5423:af7b) (Ping timeout: 240 seconds)
[12:02:52] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 250 seconds)
[12:04:57] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[12:05:46] *** Quits: enoch (~enochthec@user/enochthechronoco) (Quit: Igloo IRC: https://iglooirc.com)
[12:11:33] <absentia> is `fromEnum` known to be poorly performant?
[12:12:08] <sm> is it practical to build static binaries with stack yet ?
[12:12:46] *** Joins: xkuru (~xkuru@user/xkuru)
[12:23:33] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[12:28:26] <sm> does anyone know what this yesod / aeson error is about ? https://paste.tomsmeding.com/B9qeYo3n/raw/1 . Here's the yesod code, how did calling M.lookup on an Object ever work ? M is Data.HashMap.Strict
[12:28:27] * sm sent a haskell code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/21fc49443d4049b795911dbe3627a3bd29083634
[12:28:55] <vaibhavsagar[m]> It works if you use the latest Aeson 
[12:29:23] <vaibhavsagar[m]> Since they changed the default to be `Map` instead of `HashMap`
[12:30:41] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:30:43] <sm> vaibhavsagar: thanks! so yesod should be requiring aeson >= ... 2.0.1.0 ?
[12:30:56] <sm> https://hackage.haskell.org/package/aeson-2.0.3.0/changelog is not super informative
[12:31:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[12:31:59] <vaibhavsagar[m]> > Make `ordered-keymap` on by default 
[12:32:00] <lambdabot>  <hint>:1:14: error: parse error on input ‘-’
[12:32:11] <vaibhavsagar[m]> You're right that it's not informative 
[12:32:49] <vaibhavsagar[m]> I made a bunch of noise when I learned about it but everyone mostly quietly adapted 
[12:33:55] <sm> actually this error comes when building with aeson 2.0.3.0 (latest)
[12:34:33] <sm> yesod probably needs aeson < 2.0.1.0 then 
[12:34:57] <sm> thanks for making noise. Normally I am insulated from these things by stackage
[12:36:41] *** Joins: Erutuon (~Erutuon@user/erutuon)
[12:37:24] *** Joins: max22- (~maxime@2a01cb0883359800496a3dbe523e6e7d.ipv6.abo.wanadoo.fr)
[12:40:09] * sm wonders why aeson did that. Usually I see the reverse change
[12:41:03] <c_wraith> It guaranteed it would perform well no matter what inputs it receives
[12:41:30] <c_wraith> unordered-containers has had some cases pop up where behavior can be forced to O(n^2)
[12:42:02] <sm> interesting
[12:42:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81)
[12:42:18] <c_wraith> hashing is not the magic bullet people seem to think it is
[12:46:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81) (Ping timeout: 250 seconds)
[12:48:16] <Rembane> It's still fun though. Python had similar problems in their hashing algorithms some years ago. They solved it by adding a random salt for every Python interpreter session.
[12:55:57] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[12:59:38] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 250 seconds)
[13:01:17] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Ping timeout: 256 seconds)
[13:02:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[13:04:33] *** Joins: fr33domlover (~fr33@31.210.181.138)
[13:05:36] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:07:22] <jackdk> aeson-2.0 has the new KeyMap type, so if you code to that interface you code should be portable between KeyMap = HashMap and KeyMap = Map. In theory.
[13:08:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:10:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:11:18] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[13:16:54] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[13:17:57] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[13:23:16] <sm> yes that was it, current yesod needs aeson < 2
[13:29:43] *** Joins: chir4gm (~chirag@user/chir4gm)
[13:29:54] <chir4gm> How do I modify the search path for ghc
[13:29:56] <chir4gm> ?
[13:30:39] <chir4gm> I am trying to build a package from source (I don't know any haskell), and I can't seem to get ghc to find the libraries installed in /usr/lib
[13:30:48] <chir4gm> I am on arch, if that is of any relevance
[13:31:47] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[13:33:32] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[13:34:09] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[13:36:00] <chir4gm> guys?
[13:38:56] <Rembane> chir4gm: Do you need to recompile the package all the time or will a binary suffice? Because if you can get a binary and use it it's probably easier than the alternatives.
[13:39:14] <chir4gm> I can't really
[13:39:21] <chir4gm> I do need to compile it from source
[13:39:38] <chir4gm> Is there any way to modify ghc'c search path?
[13:39:43] <chir4gm> *ghc's
[13:39:57] *** Quits: fr33domlover (~fr33@31.210.181.138) (Ping timeout: 240 seconds)
[13:43:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:44:06] <Rembane> Cool, then I recommend you to uninstall ghc and all other Haskell related packages. And then install stack using the instructions on stackage.org and compile the project with stack. Does the project have a stack.yml file? 
[13:45:04] <ephemient> either use stack or ghc+cabal from ghcup; system ghc and libraries are generally not recommended for building anything other than the distro's own packages
[13:46:13] <ephemient> archlinux in particular only provides dynamic libraries but because the ABI isn't stable, anything you build with the system's packages will break on every upgrade
[13:47:58] <absentia> keep your local pacman tree free of as much haskell as possible
[13:48:04] <absentia> it is poorly maintained and hellish during upgrades
[13:49:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[13:50:23] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[13:51:00] <ephemient> I don't know if "poorly maintained" is fair, afaik they have automation to convert cabal versions to pacman build files automatically and that generally works. but it's only usable for archlinux's own packages because everything gets revbumped at once
[13:51:32] <ephemient> chir4gm: tl;dr if you're on archlinux, do *not* build your own haskell binaries using the system's haskell packages
[13:51:51] <chir4gm> https://github.com/B-Lang-org/bsc
[13:51:57] <chir4gm> This is what I am trying to build
[13:52:03] <chir4gm> the aur package fails
[13:52:12] <chir4gm> So, what do I do here?
[13:54:29] *** Joins: burnside_ (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[13:54:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[13:54:43] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[13:55:03] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:55:22] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:55:33] <ephemient> https://github.com/B-Lang-org/bsc/blob/main/INSTALL.md has some info about using ghcup/cabal, but it's trying to use the pre-v2 world…
[13:56:07] <ephemient> but it should basically work
[13:57:29] <ephemient> I feel like the whole project is crazy for using its own recursive Makefile-based build instead of cabal, but that's not something you're gonna be able to fix yourself
[14:00:55] *** Joins: ardell (~ardell@user/ardell)
[14:01:41] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[14:04:16] *** Joins: Everything (~Everythin@37.115.210.35)
[14:05:46] *** Parts: Everything (~Everythin@37.115.210.35) ()
[14:06:21] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Ping timeout: 250 seconds)
[14:06:57] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[14:07:57] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[14:12:47] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Ping timeout: 252 seconds)
[14:12:54] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[14:15:52] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[14:18:34] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[14:25:30] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:25:58] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[14:26:26] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:26:43] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[14:26:57] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[14:27:39] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:27:43] *** Lord_of_Life_ is now known as Lord_of_Life
[14:28:57] *** Joins: Erutuon (~Erutuon@user/erutuon)
[14:29:36] *** Joins: __monty__ (~toonn@user/toonn)
[14:29:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[14:30:23] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Ping timeout: 250 seconds)
[14:30:26] *** Joins: amk (~amk@109.255.169.126)
[14:31:05] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:39:25] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:39:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Quit: WeeChat 2.8)
[14:48:11] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[14:50:31] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:52:44] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:53:47] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[14:55:38] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Read error: Connection reset by peer)
[14:55:46] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[14:55:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:57:43] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (Quit: WeeChat 3.0)
[14:57:43] *** Joins: CHUD (~CHUD@dhcp6353.kent.ac.uk)
[14:59:09] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Ping timeout: 256 seconds)
[15:01:32] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:02:17] *** Joins: rtsn (~nstr@user/rtsn)
[15:10:26] *** Joins: MochizukisLastTh (~Mochizuki@112-68-46-13f1.osk2.eonet.ne.jp)
[15:11:03] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Ping timeout: 256 seconds)
[15:12:52] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[15:13:41] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[15:25:07] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[15:26:21] *** Joins: oscuroch_ (~oscurochu@097-096-050-227.res.spectrum.com)
[15:27:36] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:c32:f815:8539:fe9a)
[15:30:21] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[15:30:37] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:32:04] *** Quits: CHUD (~CHUD@dhcp6353.kent.ac.uk) (Remote host closed the connection)
[15:33:08] *** Quits: mbuf (~Shakthi@122.178.180.184) (Quit: Leaving)
[15:36:03] *** Quits: max22- (~maxime@2a01cb0883359800496a3dbe523e6e7d.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[15:39:01] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[15:39:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[15:39:22] *** Joins: RFV (~Thunderbi@187.red-88-13-186.dynamicip.rima-tde.net)
[15:40:58] *** Quits: burnside_ (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Remote host closed the connection)
[15:40:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:41:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[15:42:20] *** Joins: CHUD (~CHUD@dhcp6353.kent.ac.uk)
[15:42:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:45:22] *** Quits: CHUD (~CHUD@dhcp6353.kent.ac.uk) (Remote host closed the connection)
[15:45:44] *** Joins: CHUD (~CHUD@dhcp6353.kent.ac.uk)
[15:46:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[15:46:21] *** Joins: oem22 (xyz@151.30.129.165)
[15:47:33] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[15:51:05] *** Quits: oem22 (xyz@151.30.129.165) (Quit: Going offline, see ya! (www.adiirc.com))
[15:51:50] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Ping timeout: 260 seconds)
[15:52:37] *** Quits: oscuroch_ (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 240 seconds)
[15:55:48] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[15:57:11] *** Joins: hololeap (~hololeap@user/hololeap)
[15:57:45] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[15:58:42] *** Joins: oem (Username@151.30.129.165)
[15:59:20] *** Quits: CHUD (~CHUD@dhcp6353.kent.ac.uk) (Quit: Client closed)
[15:59:32] *** Quits: oem (Username@151.30.129.165) (Client Quit)
[16:00:07] <absentia> `type Foo = Int; type Bar = Char; data Foobar = Foobar Foo Bar deriving (Eq, Read, Show)
[16:00:17] *** Quits: emf (~emf@2620:10d:c090:400::5:ab3f) (Ping timeout: 240 seconds)
[16:00:17] *** Joins: jespada (~jespada@87.74.36.188)
[16:00:25] <absentia> `f (Foobar f b) = (f - 1, fromEnum b - 97)`
[16:00:38] <absentia> does anything stick out here as to why this may perform poorly
[16:01:19] *** Quits: RFV (~Thunderbi@187.red-88-13-186.dynamicip.rima-tde.net) (Quit: RFV)
[16:01:35] <absentia> profiling reveals i'm spending a lot of time in `f`, not sure if it's because the implementation is poor or if I'm just hammering it that often
[16:02:42] *** Joins: emf (~emf@163.114.132.4)
[16:02:44] <absentia> that should probably be `f (Foobar foo bar) = (foo - 1, fromEnum bar - 97)`
[16:03:30] <Rembane> absentia: What's the bigger algorithm? Something Fibonacci-series-definition like?
[16:03:47] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[16:04:35] <absentia> Rembane: this is a utility function for converting between different systems of indexing into a bitboard
[16:04:45] <absentia> probably i should just use one representation
[16:04:47] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:04:51] <maerwald> ephemient: I don't think it's crazy
[16:04:54] <absentia> because it's used everywhere
[16:05:24] <absentia> is `fromEnum` known to be slow? or tuple construction?
[16:05:35] <absentia> i find haskell performance baffling to reason about
[16:07:10] <Rembane> absentia: Got it. Then it shouldn't be that slow. How many times is the function called?
[16:08:00] <maerwald> ephemient: afair it's also possible to make it work with v2-install
[16:09:10] <ephemient> yeah you can get cabal to write an env file right?
[16:10:16] <absentia> Rembane: tens of millions of times
[16:10:27] * absentia shrugs
[16:10:48] <absentia> going by the "entries" in a `stack test --profile` generated `.prof`
[16:10:57] <absentia> 14% of time spent here
[16:11:30] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:11:50] <absentia> those tens of millions of calls/entries are only 10% of all entries
[16:13:03] <absentia> `fromEnum` for `Char` appears to just be `ord`
[16:13:08] <absentia> which I can't imagine being slow, but...
[16:13:38] <absentia> wish I could get deeper call trees in the profile
[16:14:21] <Rembane> absentia: It could be slow if laziness bites you. Laziness is hard to reason about though so I usually fail at that reasoning. What happens if you replace the tuple with a custom data type using bang patterns? Do things go faster? 
[16:14:53] * absentia googles for a bang patterns refresher
[16:15:04] <absentia> never had to actually optimize haskell or care about laziness before so here goes
[16:15:24] <absentia> oh god, the lack of night mode
[16:15:26] <absentia> it burns!
[16:16:34] * Rembane hands absentia sun glasses
[16:17:56] <absentia> > eliminating thunks from an inner loop
[16:17:57] <lambdabot>  error:
[16:17:58] <lambdabot>      Variable not in scope:
[16:17:58] <lambdabot>        eliminating
[16:17:58] <absentia> sounds right
[16:18:05] <absentia> bad lambdabot :|
[16:20:26] <Andrew> > (\x -> x x)(\x -> x x)
[16:20:28] <lambdabot>  error:
[16:20:28] <lambdabot>      • Occurs check: cannot construct the infinite type: t0 ~ t0 -> t
[16:20:28] <lambdabot>      • In the first argument of ‘x’, namely ‘x’
[16:24:24] <maerwald> ephemient: I just checked the link... there are instructions for v2-install already
[16:24:43] *** Quits: deadmarshal (~deadmarsh@95.38.114.160) (Ping timeout: 256 seconds)
[16:26:38] <absentia> Rembane: wew, even without a custom data type and just using BangPatterns (as in `f (Foobar !f !b)`) resulted in over 50% speedup
[16:26:57] *** Joins: deadmarshal (~deadmarsh@95.38.112.249)
[16:26:59] <absentia> less alloc too, which I guess is because of the smaller number of thunks in memory?
[16:27:24] <absentia> 1s wall clock speedup
[16:27:28] <Rembane> absentia: Sweet! Yes, not as much bookkeeping is needed. Thunks are lightweight, but there is some process around them.
[16:28:01] <Rembane> absentia: Also, tuples are lazy, which I forgot to mention.
[16:28:17] <absentia> I was just googling for strict tuples
[16:28:24] <absentia> because I'm still noticing 20% of alloc coming from that fn
[16:36:31] <maerwald> that looks like StrictData may help already
[16:36:58] <maerwald> as in `Foobar !f !b` indicates that
[16:37:34] <maerwald> despite people here rambling about that extension
[16:39:09] *** Joins: CHUD (~CHUD@dhcp636F.kent.ac.uk)
[16:39:22] *** Joins: fr33domlover (~fr33@31.210.181.138)
[16:43:38] *** Joins: yauhsie__ (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[16:45:47] <absentia> Rembane: daaaaaaaaamn, that function has now fallen off the top cost centre summary
[16:45:53] <absentia> by converting everything to Data.Strict.Tuple
[16:45:57] <absentia> thanks very much for the help
[16:46:17] <absentia> that's another 1s of wall time shaved off this suite
[16:46:58] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:47:37] *** Quits: fr33domlover (~fr33@31.210.181.138) (Ping timeout: 256 seconds)
[16:49:13] <Rembane> absentia: Awesome! :D No worries.
[16:53:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[16:55:32] *** Joins: x_kuru (~xkuru@user/xkuru)
[16:56:57] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[16:58:28] *** Joins: burnside_ (~burnsides@dhcp168-015.wadham.ox.ac.uk)
[16:58:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-015.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[17:00:07] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[17:00:25] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[17:00:45] *** Joins: fr33domlover (~fr33@31.210.181.138)
[17:08:41] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[17:11:02] *** Joins: RFV (~Thunderbi@187.red-88-13-186.dynamicip.rima-tde.net)
[17:13:58] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Ping timeout: 260 seconds)
[17:15:51] *** Quits: CHUD (~CHUD@dhcp636F.kent.ac.uk) (Quit: Client closed)
[17:28:37] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[17:29:01] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[17:29:14] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[17:29:57] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 240 seconds)
[17:33:37] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[17:43:02] *** Joins: RFV1 (~Thunderbi@187.red-88-13-186.dynamicip.rima-tde.net)
[17:43:57] *** Quits: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[17:44:30] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: leaving)
[17:44:31] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[17:45:39] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[17:45:42] *** Quits: RFV (~Thunderbi@187.red-88-13-186.dynamicip.rima-tde.net) (Ping timeout: 260 seconds)
[17:45:42] *** RFV1 is now known as RFV
[17:46:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81)
[17:46:40] *** Quits: fr33domlover (~fr33@31.210.181.138) (Quit: fr33domlover)
[17:47:54] *** Quits: yauhsie__ (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:49:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:50:50] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81) (Ping timeout: 250 seconds)
[17:54:17] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[17:56:35] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[17:57:27] <absentia> now if only i could optimize docker container size
[17:57:33] <absentia> my god stack builder images are enormous
[17:57:36] <absentia> almost 5 gb!
[17:57:46] <Hecate> yes
[17:57:47] <absentia> s/container/image
[17:58:09] <absentia> they won't even build on my container provider
[17:58:13] <absentia> runs out of memory
[17:58:26] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:59:14] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[18:01:26] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[18:01:26] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[18:01:27] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[18:01:29] *** allbery_b is now known as geekosaur
[18:03:30] *** Quits: RFV (~Thunderbi@187.red-88-13-186.dynamicip.rima-tde.net) (Quit: RFV)
[18:06:27] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:14:11] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:16:17] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::80f1) (Ping timeout: 240 seconds)
[18:22:00] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[18:30:54] *** Joins: CHUD (~CHUD@dhcp636F.kent.ac.uk)
[18:35:27] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[18:40:58] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[18:40:58] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[18:40:58] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[18:46:55] *** Quits: EvanR (~EvanR@user/evanr) (Remote host closed the connection)
[18:47:14] *** Joins: EvanR (~EvanR@user/evanr)
[18:50:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:53:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:54:08] *** Joins: ardell (~ardell@user/ardell)
[18:55:04] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[18:59:53] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:01:16] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:01:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[19:03:29] *** Joins: slit13 (~slit13@2a02:2f0b:b50c:7e00:3ffb:8f5b:b927:cbd9)
[19:04:39] *** Quits: slit13 (~slit13@2a02:2f0b:b50c:7e00:3ffb:8f5b:b927:cbd9) (Client Quit)
[19:05:27] *** Quits: wyrd_ (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:10:07] <maerwald> absentia: unpacked
[19:10:53] <maerwald> ~2GB of those will be from GHC
[19:14:17] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[19:16:17] *** Quits: xff0x (~xff0x@2001:1a81:52c7:8c00:1f7f:998e:5249:4548) (Ping timeout: 240 seconds)
[19:16:36] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::80f1)
[19:17:28] *** Joins: xff0x (~xff0x@2001:1a81:52c7:8c00:f773:af87:1684:89e3)
[19:23:05] *** Joins: jao (~jao@static-68-235-44-10.cust.tzulo.com)
[19:25:05] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:26:06] <DigitalKiwi> https://grahamc.com/blog/nix-and-layered-docker-images
[19:27:34] <DigitalKiwi> Zhttps://christine.website/blog/i-was-wrong-about-nix-2020-02-10
[19:28:43] <albet70> what's the point to make a new type? like newtype StateRefT s m a = StateRefT (ReaderT (IORef s) m a), just use ReaderT (IORef s) m a isn't enough?
[19:28:56] *** Quits: Andrew (~andrew@user/AndrewYu) (Quit: Leaving)
[19:29:14] *** Joins: Andrew (~andrew@user/AndrewYu)
[19:29:56] *** Quits: Andrew (~andrew@user/AndrewYu) (Client Quit)
[19:30:08] *** Joins: Andrew (Andrew@user/AndrewYu)
[19:30:21] <sshine> albet70, 1) to make your abstraction opaque, 2) to avoid the type class instances of what it aliases to, and consequently, so you can give it new type class instances without having them propagate back to the type they alias.
[19:30:25] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Quit: You have been kicked for being idle)
[19:30:49] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[19:33:12] <sshine> albet70, for example: https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Monoid.html#t:Product
[19:34:13] <sshine> albet70, you could say 'instance Monoid Int where ...', but this isn't the only well-defined Monoid instance on Int. so you invent a wrapper for that particular instance.
[19:34:44] <sshine> albet70, I guess in your case, it is mostly to make the abstraction opaque.
[19:35:52] <albet70> "🟢 sshine :albet70, I guess in your case, it is mostly to make the abstraction opaque.", but abstraction opaque just make people not easy to read
[19:36:13] <sshine> i.e. hide the implementation. not sure it's always preferrable. some people have that in an .Internal module so that you can refer to the ReaderT without the wrapper, but not make a commitment to that implementation in front of all who rely on the package.
[19:36:43] <sshine> albet70, not just. also makes people not start to rely on the implementation in ways you don't want.
[19:41:14] <albet70> sshine, newtype CoroutineT r m a = CoroutineT {runCoroutineT' :: ContT r (StateT [CoroutineT r m ()] m) a} this type is too difficult to understand
[19:42:22] <albet70> just ContT r (StateT [ContT r m ()] m) a isn't enough?
[19:42:31] <geekosaur> that's not because it's a newtype, it's because Cont is your favorite nightmare come to life
[19:43:18] <albet70> I don't know how the people make this non-readable type
[19:44:18] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:44:40] <albet70> and it's a recursive type?
[19:45:02] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[19:45:09] <albet70> haskell support recursive type?
[19:45:43] <geekosaur> sure. I mean, list is a recursive type
[19:45:56] <vaibhavsagar[m]> yes
[19:45:58] <geekosaur> Trees are recursive types
[19:46:17] <albet70> "geekosaur :sure. I mean, list is a recursive type", what's the function type when the function returns itself?
[19:46:56] <geekosaur> data List a = Nil | Cons a (List a) -- with base case, even
[19:47:09] <vaibhavsagar[m]> for lists, an example is `tail`, which has the type signature `[a] -> [a]`
[19:47:29] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[19:47:35] <geekosaur> the base case for the `CoroutineT` type is an empty list of recursive `CoroutineT`s
[19:48:15] <absentia> a tree of coroutine transformers?
[19:48:17] <absentia> welcome to hell
[19:48:35] <geekosaur> hencemy initial comment about nightmares
[19:49:24] <albet70> "geekosaur :the base case for the `CoroutineT` type is an empty list of recursive `CoroutineT`s", it doesn't say the m is []
[19:49:48] <geekosaur> it doesn't have to, it says it's a list. lists can be empty
[19:49:48] <absentia> albet70: `m` is a type-level variable, `[]` is a term-level constructor
[19:49:49] <albet70> oh, the whole CoroutineT is []
[19:49:54] <geekosaur> it didn't say it's a NonEmpty
[19:51:14] <albet70> so recursive type with a base case can be expressed in haskell, right?
[19:51:21] <absentia> absolutely
[19:51:34] <geekosaur> yes. as can recursive types with no base case (this is often used for streams)
[19:51:40] <albet70> function return itself doesn't have a base case, can't it?
[19:54:20] <geekosaur> I don't understand the question, sorry
[19:55:20] <albet70> if a function return itself, could it be expressed?
[19:55:37] <ski> "the base case for the `CoroutineT` type is an empty list of recursive `CoroutineT`s" -- no, the list doesn't occur covariantly/positively
[19:55:59] <ski> albet70 : with a recursive type, sure
[19:56:51] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:57:01] *** Joins: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972)
[19:57:34] <albet70> "🟢 ski :albet70 : with a recursive type, sure", in js, f = _ => f, what's its type?
[19:58:09] <ski> albet70 : `result where result = a -> result'
[19:58:29] <albet70> f _ = f
[19:58:38] <ski> you can try this, in `ocaml -rectypes', it allows cyclic types (equi-recursive types)
[19:58:47] <ski>   newtype Munch a = MkMunch (a -> Munch a)
[19:58:53] <ski>   munch :: a -> Munch a
[19:59:01] <ski>   munch _ = MkMunch munch
[19:59:22] <albet70> fixed point...
[20:01:30] <ski> "a tree of coroutine transformers?" -- no. a coroutine action is a function that accepts a list of coroutine actions, and produces a new such list, together with a result value
[20:01:31] <albet70> then what value has this type?
[20:01:43] <ski> which type ?
[20:01:50] <albet70> "ski : newtype Munch a = MkMunch (a -> Munch a)", this
[20:02:01] <ski> e.g. `MkMunch munch' has type `Munch a'
[20:03:03] <ski> you could say `fix (MkMunch . const)', if you prefer
[20:03:39] <ski> of course, `Munch a' is a pretty useless type ..
[20:04:13] <ski> (i guess you could define `Munch a -> [a] -> b')
[20:04:26] <ski> (or s/[a]/Stream a/)
[20:05:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217)
[20:06:30] <albet70> ski what do u think what's the benefit to make a new type to wrap? like newtype StateRefT s m a = StateRefT (ReaderT (IORef s) m a), just use ReaderT (IORef s) m a isn't enough?
[20:07:38] <ski> for base case for `CoroutineT r m a', you'll be provided already with a list of coroutines. so, you could simply return those, or ignore them (returning an empty list). but it's not just "empty list" is *the* base case, since you're always provided with such a list. you could reverse the list, e.g. ..
[20:08:21] <ski> albet70 : i think sshine already answered that
[20:09:00] <albet70> yes...
[20:09:01] <ski> (i was about to answer at the time, but sshine already covered it well)
[20:13:24] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 250 seconds)
[20:18:35] *** Joins: zebrag (~chris@user/zebrag)
[20:20:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:21:06] *** Quits: romesrf (~romes@2001:8a0:dd9e:2c00:fd1b:fa:a17:a972) (Quit: WeeChat 3.4)
[20:21:49] *** Quits: CHUD (~CHUD@dhcp636F.kent.ac.uk) (Remote host closed the connection)
[20:21:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:21:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:21:51] *** Joins: wroathe (~wroathe@user/wroathe)
[20:24:37] *** Quits: alfonsox (~quassel@103.87.57.95) (Remote host closed the connection)
[20:25:59] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:26:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:31:52] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:32:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:33:20] <sshine> > let f x = f in f 0
[20:33:22] <lambdabot>  error:
[20:33:22] <lambdabot>      • Occurs check: cannot construct the infinite type: t1 ~ p0 -> t1
[20:33:22] <lambdabot>      • In the expression: let f x = f in f 0
[20:33:42] <sshine> albet70, so that's something you can't do.
[20:34:40] <sshine> albet70, this function would have the type 'a -> (a -> (a -> ...))'
[20:34:54] <sshine> albet70, but as long as it recurses on its values, that's fine :)
[20:34:55] <ski> <ski> albet70 : `result where result = a -> result'
[20:35:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:35:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:35:13] *** Joins: wroathe (~wroathe@user/wroathe)
[20:38:19] *** Quits: Alex_test (~al_test@94.233.241.94) (Quit: ;-)
[20:38:32] *** Quits: AlexZenon (~alzenon@94.233.241.94) (Quit: ;-)
[20:38:41] *** Quits: AlexNoo (~AlexNoo@94.233.241.94) (Quit: Leaving)
[20:39:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:41:10] *** Quits: derelict (derelict@user/derelict) (Quit: bye)
[20:41:44] *** Joins: derelict (derelict@user/derelict)
[20:42:45] *** Joins: econo (uid147250@user/econo)
[20:44:33] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[20:49:02] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[20:49:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81)
[20:49:35] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[20:50:00] <texasmynsted> I have been looking around hackage... I tried jacinda, which is fun, but I am still looking for awk alternatives for parsing whole files.
[20:50:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:51:06] <texasmynsted> I have files in various formats that I am looking for a handful of items. I think the next thing I will try is `replace-megaparsec`. 
[20:51:20] <texasmynsted> What would you suggest I take a look at?
[20:51:44] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:51:45] <texasmynsted> Oh one of my key criteria is zero regular expresions. 
[20:52:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:52:53] <texasmynsted> Jacinda is fun but does use regular expressions. I think there must be (many) raw Haskell solutions?
[20:53:51] *** Joins: cuz` (~user@23-30-167-57-static.hfc.comcastbusiness.net)
[20:53:51] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[21:00:34] <hololeap> texasmynsted: what about just megaparsec?
[21:01:38] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:8900:f68f:743:8461)
[21:02:19] <hololeap> the thing about parser combinators is that you can break the parsing down into small pieces and then recombine them. it's a really nice interface IMO.
[21:03:39] <hololeap> megaparsec is good for whole files, attoparsec is probably better for parsing streams
[21:04:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217) (Remote host closed the connection)
[21:05:32] *** Joins: fef (~thedawn@user/thedawn)
[21:05:41] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:07:59] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[21:08:49] <absentia> why megaparsec over parsec?
[21:09:05] <absentia> is one not galaxy scale enough?
[21:10:02] <absentia> we only produce interstellar certified software
[21:11:25] <hololeap> from what I've read, megaparsec is faster. it is more flexible with what types it can handle. tbh, I haven't used parsec in a while, so I could be off-base here, but it seems to me megaparsec supercedes parsec
[21:11:46] <absentia> i see
[21:12:31] <hololeap> https://hackage.haskell.org/package/megaparsec#megaparsec-vs-parsec
[21:12:53] <absentia> > more powerful combinators
[21:12:54] <lambdabot>  error:
[21:12:54] <lambdabot>      • Variable not in scope: more :: t0 -> t1 -> t
[21:12:54] <lambdabot>      • Perhaps you meant ‘mode’ (imported from Text.PrettyPrint.HughesPJ)erro...
[21:13:00] <absentia> that's saying quite a lot, parsec is already choc full of them
[21:13:14] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[21:17:44] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:18:47] *** Joins: maxime_ (~maxime@2a01cb08833598006800cd803015c082.ipv6.abo.wanadoo.fr)
[21:20:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217)
[21:21:19] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[21:21:34] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[21:22:44] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:24:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:24:38] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:24:57] *** Quits: emf (~emf@163.114.132.4) (Ping timeout: 240 seconds)
[21:27:03] *** Joins: k8yun_ (~k8yun@198-48-158-40.cpe.pppoe.ca)
[21:27:15] *** Joins: emf (~emf@2620:10d:c090:400::5:ab3f)
[21:27:42] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[21:30:20] *** Quits: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217) (Remote host closed the connection)
[21:30:37] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[21:30:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:30:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:30:51] *** Joins: wroathe (~wroathe@user/wroathe)
[21:30:57] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[21:35:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:36:06] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:36:52] *** Quits: cuz` (~user@23-30-167-57-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[21:36:54] *** Joins: k8yun__ (~k8yun@24.244.29.99)
[21:39:57] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[21:40:29] *** Quits: k8yun_ (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 250 seconds)
[21:42:03] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[21:45:20] *** Joins: flinner (~flinner__@user/flinner)
[21:45:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:47:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:47:52] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:d8d5:ad63:210:577a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:48:11] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[21:48:51] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[21:49:39] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:50:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:51:29] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[21:52:04] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[21:52:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[21:53:16] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[21:54:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:54:42] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:55:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:55:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:56:02] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:57:42] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[22:00:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[22:00:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:01:26] <texasmynsted> okay, I will also try just Megaparsec for the whole file. The problem I see is that while they data I am looking for will always be in the file, it may not always be in the same place.
[22:02:07] <texasmynsted> Maybe that does not matter.
[22:03:24] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[22:06:00] <texasmynsted> as for the parsec flavours, I just picked megaparsec to eliminate one choice, heh.
[22:06:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:07:26] <sm> good choice
[22:07:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:07:58] <sm> don't neglect its excellent docs
[22:09:04] <texasmynsted> I just wish I could find a page somewhere with a kind of hello-world for parsing an entire "unstructured" file.
[22:09:06] <sm> and, be patient: parser combinators are easy to get started with but it takes a little while to learn how to use them effectively for larger parsers
[22:09:40] <texasmynsted> my use case is a replacement for awk
[22:10:03] <texasmynsted> Quickly search through a file looking for the 3-5 things I need.
[22:10:12] <sm> do you want to build one, or just use one ? does it have to be written in haskell ?
[22:11:38] <sm> did you see https://hackage.haskell.org/package/haskell-awk and https://hackage.haskell.org/package/hwk ?
[22:11:42] <texasmynsted> I would use one but _reason_ I am doing it is that I want to avoid regular expressions, and leverage/learn/keep-skills-sharp FP techniques
[22:12:13] <texasmynsted> oh yeah... Let me check that out.
[22:12:47] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4)
[22:13:33] <texasmynsted> :-)
[22:13:47] <texasmynsted> That might be just the thing for this use case. 
[22:13:50] <texasmynsted> Thank you
[22:13:56] <sm> np
[22:14:04] <sshine> absentia, one thing I like about Megaparsec (there's more than one thing) is Mark's redesign of makeExprParser: https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators-Expr.html#v:makeExprParser
[22:14:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81) (Remote host closed the connection)
[22:16:25] <hololeap> texasmynsted: for parsing a file where the structure may be rearranged, the chioce function (aka asum) is what you want to use
[22:16:52] <hololeap> *choice
[22:17:02] <texasmynsted> asum? is that a megaparsec thing.
[22:17:14] <ski> @index asum
[22:17:14] <lambdabot> Data.Foldable
[22:17:39] <hololeap> no, it's an Alternative thing. choice is from parser-combinators
[22:17:41] <ski> @type asum
[22:17:42] <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
[22:18:10] <texasmynsted> oh :-) 
[22:18:14] <hololeap> choice is just a different (better IMO) name for asum
[22:18:20] <texasmynsted> I see Mark mentions it here also -> https://markkarpov.com/tutorial/megaparsec.html
[22:18:53] <ski> @type foldr (<|>) empty
[22:18:54] <lambdabot> (Foldable t, Alternative f) => t (f a) -> f a
[22:19:33] <texasmynsted> ooh I see
[22:19:52] <hololeap> texasmynsted: if you give me an example of some input and what you want to extract, I can show you an example of how to parse it with megaparsec
[22:20:04] <texasmynsted> Okay, I suppose parsing an unstructured file should be no big deal then
[22:20:05] <ski> `choice' is more specific to a particular way of thinking about `Alternative'
[22:21:24] <texasmynsted> "BILLING PERIOD" and "Total:" and "Date:" 
[22:22:34] * ski 'sn't sure what "unstructured" would mean, in this context
[22:23:52] <texasmynsted> What I mean is that these are PDF files that I scrape the text out of. They are largely handwritten so while one person may use the same field names, they may not always be in the same place. 
[22:24:03] <texasmynsted> There might be comments, descriptions, questions, etc.
[22:24:43] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[22:24:52] <hololeap> is there any structure to what the "BILLING PERIOD" format is, for example?
[22:24:59] <texasmynsted> There is no enforced semantics; these are not JSON, YAML, CSV, XML, etc.
[22:25:38] <texasmynsted> The billing period is plain text after the key "BILLING PERIOD" in all caps.
[22:25:55] <texasmynsted> It is the rest of the line
[22:25:57] <ski> mhm
[22:26:25] <texasmynsted> This flexibility makes this more . . . fun
[22:27:07] <hololeap> ok, but is the plain text billing period format consistent, or can it be anything?
[22:27:11] <texasmynsted> another piece of this is there are many sources of these documents. Each source has the same key fields but they are described differently. 
[22:27:49] <texasmynsted> So once I build a parser for one source, I will need to build another one for the second source, and so on.
[22:28:33] <texasmynsted> I have another problem like this that I want to prime myself to solve. The other problem is like this but far more complicated. 
[22:29:16] <texasmynsted> Using a parser combinator lib I should be able to re-use some of my work from prior parsers. (I would hope.)
[22:31:17] <texasmynsted> hololeap: it can be anything.
[22:31:40] <texasmynsted> Mostly it is like Jan 1 - Jan 15
[22:32:00] <texasmynsted> For my purposes, this is fine.
[22:32:15] <texasmynsted> So long as I capture it, I am good.
[22:33:05] <texasmynsted> I am going to populate a CSV with the data. It is fine for this if the fields are not machine readable. 
[22:33:26] <texasmynsted> Just the right data in the right place, most of the time.
[22:35:24] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[22:36:07] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:38:57] *** Quits: deadmarshal (~deadmarsh@95.38.112.249) (Ping timeout: 240 seconds)
[22:42:05] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:42:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:dcf9:b60:3266:d217)
[22:44:52] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:49:42] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:51:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:56:45] *** Parts: eugen[m] (~eugenrahr@2001:470:69fc:105::1:a153) ()
[23:00:15] *** Joins: AlexNoo (~AlexNoo@94.233.241.94)
[23:00:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:1dc4:f5c4:a458:81)
[23:01:17] <energizer> if i have a B of As and I want an A of Bs, like list of tuples -> tuple of lists, is there a name for that operation in general?
[23:02:03] *** Joins: Topsi (~Tobias@dyndsl-095-033-093-001.ewe-ip-backbone.de)
[23:02:12] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[23:02:39] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:03:45] <monochrom> traverse comes close but it comes with conditions.
[23:03:49] <monochrom> @type traverse
[23:03:50] <lambdabot> (Traversable t, Applicative f) => (a -> f b) -> t a -> f (t b)
[23:03:55] <monochrom> Err, sequence
[23:03:56] <awpr> traverse or distribute, depending on whether you want to stitch together many of the inner type or extract many "slices" from the outer type.  caveat: "lists of tuple*s*" doesn't fit well into either of these
[23:03:59] <monochrom> @type sequence
[23:04:00] <lambdabot> (Traversable t, Monad m) => t (m a) -> m (t a)
[23:04:07] <awpr> err, sequence or distribute :D
[23:05:55] <hololeap> texasmynsted: this is what I came up with. I haven't tested it: https://dpaste.com/CQC3SHWGK
[23:05:55] <energizer> @type distribute
[23:05:56] <lambdabot> error:
[23:05:56] <lambdabot>     • Variable not in scope: distribute
[23:05:56] <lambdabot>     • Perhaps you meant ‘distrib’ (imported from Control.Lens)
[23:06:25] <energizer> @type distrib
[23:06:26] <lambdabot> (Conjoined p, Functor f) => p a b -> p (f a) (f b)
[23:06:48] <energizer> that doesnt look related 
[23:06:51] <awpr> "lists of tuples" specifically in the form of `[(a, b)]` and `([a], [b])` is actually unzip, which doesn't map to either of them
[23:06:58] *** Quits: k8yun__ (~k8yun@24.244.29.99) (Quit: Leaving)
[23:07:10] <awpr> it's not; https://hackage.haskell.org/package/distributive-0.6.2.1/docs/Data-Distributive.html#t:Distributive
[23:09:30] <awpr> `sequence` is like: iterate through the outer structure according to `Traversable`, and glue together all the inner structures according to their `Applicative`
[23:09:30] <awpr> `distribute` is like: create a version of the inner structure from thin air by its `Distributive`, and populate it by extracting slices of the outer structure with its `Functor`
[23:10:38] *** Quits: flinner (~flinner__@user/flinner) (Ping timeout: 250 seconds)
[23:11:05] <awpr> you can turn the list-of-tuples thing into something Distributive-shaped by using `data Pair a = Pair a a` instead, and then `distribute :: [Pair a] -> Pair [a]`
[23:13:19] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:14:11] <texasmynsted> hololeap: Thank you!
[23:15:10] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:15:26] <texasmynsted> That really helps. I will try this out. One bit I found is that there is a large variation on the amount of whitespace between the key, like "Total:", and the value.
[23:16:17] <texasmynsted> I see you throw out a space with _ <- space. 
[23:18:49] <texasmynsted> So I will simply need to find a way to ignore any number of spaces. This is fairly simple to describe with regexp. I will checkout skipManyTill and your `takeUntilEOL`.
[23:19:44] <sshine> texasmynsted, is this Parsec, Megaparsec, or something third?
[23:20:38] <monochrom> "many space" throws out a lot of spaces. "some space" too.
[23:21:33] <monochrom> But I thought you didn't want regexes.
[23:21:36] <texasmynsted> Megaparsec
[23:21:38] *** Parts: Sqaure (~a@user/square) (Leaving)
[23:21:51] <texasmynsted> I do not want regexes
[23:23:33] <hololeap> texasmynsted: space from Text.Megaparsec.Char throws out any number of spaces
[23:23:44] *** Joins: alp (~alp@user/alp)
[23:24:00] <texasmynsted> I see --> https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Applicative.html#v:some
[23:24:05] <hololeap>  > Skip zero or more white space characters.
[23:24:20] <texasmynsted> hololeap: Oh okay.
[23:24:53] <texasmynsted> :-) This looks like it is going to a great learning experience! Thank you!
[23:25:30] <hololeap> well, it doesn't throw it out normally, but it does when you use `_ <- space`
[23:25:47] <texasmynsted> got it 
[23:25:55] *** Joins: AlexZenon (~alzenon@94.233.241.94)
[23:26:00] <texasmynsted> It is capturing it to the hole 
[23:26:00] *** Joins: Alex_test (~al_test@94.233.241.94)
[23:26:02] <texasmynsted> _ 
[23:26:10] <hololeap> oh wait... no it _does_ throw it out
[23:26:21] <hololeap> so `_ <- space` is unnecessary
[23:26:23] <hololeap> https://hackage.haskell.org/package/megaparsec-9.2.0/docs/Text-Megaparsec-Char.html#v:space
[23:26:39] <hololeap> it could just be `space`
[23:26:54] <hololeap> either way works
[23:26:55] <texasmynsted> :-) Cool!
[23:26:59] <absentia> @type (>>=)
[23:27:00] <lambdabot> Monad m => m a -> (a -> m b) -> m b
[23:27:02] <absentia> @type (>>)
[23:27:03] <lambdabot> Monad m => m a -> m b -> m b
[23:27:16] <monochrom> "_ <-" is probably written by people who turn on -Wall -Werror
[23:27:20] <absentia> notice in the continuation how the value of type `a` is not provided
[23:27:29] <absentia> you just throw away the result of the previous monadic action
[23:27:50] <hololeap> monochrom: -Wall is how I got into that habit :)
[23:27:59] <absentia> why is that -Wall
[23:28:26] <absentia> you're not binding the monadic value which might be a typo?
[23:28:35] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[23:29:57] <absentia> i clearly did not read the previous discussion
[23:31:29] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[23:33:03] *** Joins: hyiltiz (~quassel@31.220.5.250)
[23:33:34] <hololeap> absentia: https://downloads.haskell.org/ghc/8.10.6/docs/html/users_guide/using-warnings.html#ghc-flag--Wunused-do-bind
[23:33:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[23:34:19] <absentia> hololeap: thanks, figured it would be something like that
[23:34:19] *** Joins: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net)
[23:34:36] <hololeap> but I guess it's not actually in -Wall, at least not in this version of GHC
[23:34:44] * absentia checks his compiler flags
[23:35:05] <absentia> hmmmm
[23:35:23] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:35:46] *** Quits: alp (~alp@user/alp) (Ping timeout: 245 seconds)
[23:35:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:36:31] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:36:41] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:04] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4) (Remote host closed the connection)
[23:37:05] <hololeap> often times I'll use -Weverything and then disable warnings I don't want, ala https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
[23:38:41] *** Quits: yauhsien (~yauhsien@61-231-25-133.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[23:38:53] <absentia> I have negative ints out of unsigned range warnings
[23:38:58] <absentia> I can't remember if these are mistakes or evil bit sorcery
[23:45:48] <energizer> awpr: is it fair to say, in the language of "data-oriented design", distribute is like array of struct -> struct of array and sequence is like struct of array -> array of struct
[23:47:10] <absentia> @type sequence
[23:47:11] <lambdabot> (Traversable t, Monad m) => t (m a) -> m (t a)
[23:47:23] <absentia> energizer: in some sense yes you are inverting the structure
[23:47:34] <absentia> but you need not fix yourself to `struct` or `array`
[23:47:36] <hololeap> distribute needs the inner functor to be Distributive, which means it has to be isomorphic to (Reader r)
[23:47:49] <absentia> anything traversable and monadic
[23:48:26] <absentia> "i have a structure of monadic actions. traverse the entire structure, execute each action, and give me a monadic action that returns a structure of the results"
[23:48:39] *** Joins: Akiva (~Akiva@user/Akiva)
[23:49:10] <monochrom> And Reader r is isomorphic to "arrays with index type r" :)
[23:49:12] <awpr> as other people have said, that drops all the generality of both functions and reduces them to one; but beyond that, that's only true if "array" and "struct" mean the same thing and "distribute" and "traverse" turn out to be the same function
[23:49:30] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[23:49:43] <hololeap> in practice Distributive usually means something with a single constructor and a single type variable, like Identity, Sum, Product, etc
[23:49:44] <monochrom> https://link.springer.com/chapter/10.1007/978-3-662-54434-1_21
[23:50:15] <awpr> ("struct" -> would have to have all fields of the same type; and "array" would have to be fixed-length with the zip-style Applicative instance)
[23:51:06] <absentia> (if it helps think of "monadic action" as "computation")
[23:51:20] <absentia> a serial computation, a parallel computation, a non-determinstic computation...
[23:51:30] <awpr> more generally structs with diverse field types would not be applicable to either sequenceA or distribute, and sequenceA would take variable-length lists to their cartesian products
[23:51:36] <EvanR> does any of this have to do with representable functors... I should learn what representable functors are about
[23:51:41] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[23:52:04] <awpr> yes, Distributive and Representable are different expressions of the same concept
[23:52:10] <hololeap> yeah "isomorphic to (Reader r)" is the definition of a representable functor
[23:52:20] <energizer> "Categorically every Distributive functor is actually a right adjoint, and so it must be Representable endofunctor and preserve all limits. This is a fancy way of saying it is isomorphic to (->) x for some x."
[23:52:24] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:68f0:cbbd:5b77:19e4)
[23:52:36] <monochrom> Yes. F is representable iff there is an object r such that there is natural isomorphism between F and Reader r.
[23:53:44] <hololeap> ^ precise
[23:54:02] <EvanR> I see
[23:54:15] <monochrom> And the people who say "Naperian" instead will say that r is the logarithm of F because r->x is like x^r and you're looking at "F(x) = x^r, I want to find r".
[23:54:34] <EvanR> I see
[23:56:11] <EvanR> sum types, product types, exponential types, log types xD
[23:56:23] <monochrom> Now see my link to the nice Gibbons paper that uses this and Traversable to explain APL :)
[23:56:39] <EvanR> I saw the naperian functors papers a while back was cool 
[23:56:48] <EvanR> didn't know how it linked into anything I already knew, until now
[23:56:56] <awpr> incidentally the "Naperian" presentation is the one that lets you use it as "struct-of-vectors" -> "vector-of-structs"
[23:57:40] <EvanR> *so basically it's just a container* hides
[23:58:18] <awpr> statically-shaped container (not necessarily finite) is actually a pretty good intuition for Representables IMO
[23:58:51] <EvanR> (also, r -> _ considered as a container, if it didn't already make sense, this is how it makes sense)
[23:59:10] *** Joins: PokeyCat (~PokeyCat@cpe-24-55-0-112.austin.res.rr.com)
[23:59:31] <monochrom> I go the last step and say <monochrom> And Reader r is isomorphic to "arrays with index type r" :)
[23:59:47] <monochrom> array.  Accept no substitute!
