[00:00:10] <aeth> I've been waiting for ages to be able to use a Lisp in the browser instead of JS, but they're taking their time with Wasm/etc. and the primary interest seems to be to get Rust to run in the browser because JS is the blessed scripting language because they collectively spent millions (billions?) to make JS fast
[00:01:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[00:02:11] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[00:02:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:03:30] <edgar-rft> aeth: there once was a browser fully implemented in elisp (stupidly forgotten its name)
[00:03:58] <Irvise> eww?
[00:04:04] <aeth> I think Emacs has 2-3 web browsers
[00:04:07] <aeth> Because that's the Emacs way
[00:04:08] <Irvise> There is Nyxt for Lisp...
[00:04:42] <aeth> There's nothing stopping you from having Lisp in the web browser as a language. Google tried to add Dart once. Microsoft tried to add VBA once, too.
[00:04:50] <Irvise> aeth: WASMER got initial support for Lisp: https://wasmer.io/posts/wasmer-2.1
[00:05:00] <Irvise> Someone just has to put on the work however...
[00:05:08] <aeth> But you'd either have to compile to JS/Wasm as a compatibility layer for nearly everyone (the Dart way) or not care about other browsers (which won't work unless you're IE5/IE6)
[00:05:30] <aeth> (At least, I think IE tried to add VBA)
[00:05:37] <Irvise> Most languages just xcompiler to JS/WASM, see Dart, Kotlin, Rust, Go...
[00:06:09] <Irvise> Oh, you got there first.
[00:06:20] <edgar-rft> older than eww, it was so terribly slow that you were fallen asleep before it opened a page
[00:06:30] <aeth> Irvise: You can't do a full Lisp in WASM, especially Common Lisp. No support for CL-style conditions, for one.
[00:06:43] <aeth> also, I think WASM is 32-bit which... kind of complicates the whole fixnum thing
[00:06:47] <drakonis> roll your own browser engine in lisp
[00:07:33] <Irvise> I think it is mostly due to support. Ada-WASM cannot do tasking because the WASM tasking system is still not implemented, not because it just cannot... I think there is always work to be done at the base level.
[00:07:38] <aeth> with 64 bit, you can encode integers as doubles or w/e but you don't really need to bother. fixnums are big enough for all practical purposes. You can get up to 62-63 bits (x86-64 SBCL), and possibly the full 64-bits with restrictions (like type declarations in CL)
[00:07:58] <aeth> with 32-bit, you absolutely notice fixnums
[00:08:15] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Remote host closed the connection)
[00:08:16] <aeth> so if WASM uses 32-bit integers, a sign of an embedded/mobile-first world, then it hinders effective Lisping
[00:08:34] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[00:08:35] <sham1> Well WASM has both 32 and 64 bit integers
[00:08:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[00:08:52] <aeth> oh, maybe that was added from the initial proposal or maybe I read that proposal wrong
[00:08:58] <aeth> I guess it makes sense now that ARM 64 is commonplace
[00:09:49] *** Joins: Akiva (~Akiva@user/Akiva)
[00:10:03] *** Parts: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (ERC (IRC client for Emacs 28.0.50))
[00:10:15] <aeth> SBCL's fixnum approach seems good enough for most practical purposes, even though SBCL is one of the few Lisps that does it. It uses one bit to signify that it's a fixnum, so it can express 62-bit unsigned or 63-bit signed (because fixnums are signed). And it can even express 64-bit signed/unsigned without going into bignum territory with the right kind of hints to the compiler.
[00:10:23] <Irvise> Most systems are 64 nowdays... Even RISCV has a lot of push for 64bit CPUs... 32 bit is left for very light microcontrollers/small cpus...
[00:10:57] <aeth> with 32-bit, you notice the fixnum limitations and with 16-bit you have to come up with a different way to do it...
[00:12:15] <aeth> The only potential performance issue with 64-bit CL is boxed doubles, but there are ways to work around that... basically making your own mutable box with arrays-of-doubles. Schemes could function similarly if they optimized that way.
[00:14:06] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 260 seconds)
[00:15:11] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[00:16:05] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[00:17:32] <aeth> Irvise: I'm just glad that WASM is (apparently) 64-bit now
[00:20:59] <Irvise> aeth: yup, it has 64bit primitives: https://webassembly.github.io/spec/core/syntax/values.html
[00:21:21] <Irvise> I know nothing regarding WASM. I am not a webby guy tbf.
[00:22:33] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 252 seconds)
[00:22:39] <amazigh> aeth: \o/
[00:26:14] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[00:30:20] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[00:32:45] *** Quits: cosimone` (~user@93-47-228-207.ip115.fastwebnet.it) (Remote host closed the connection)
[00:34:53] *** Joins: cosimone (~user@93-47-228-207.ip115.fastwebnet.it)
[00:45:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:49:47] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[00:50:29] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[00:51:18] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[00:51:46] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:55:27] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:58:14] *** Joins: slyrus_ (~slyrus@192-184-223-165.static.sonic.net)
[00:59:29] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 250 seconds)
[01:02:31] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 252 seconds)
[01:04:22] <amazigh> speaking of security I learned this week about zero knowledge password proof, it is at least 5 years old and noboody use it
[01:04:31] <amazigh> sorry backlogged a bit
[01:05:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:07:20] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[01:07:28] <jcowan> For the 90s web there is links and dillo, though I have had trouble building dillo on my Mac because it needs OpenSSL 1.0
[01:08:07] <jcowan> links -g isn't pretty, but it's very reasonable for bypassing JS-based paywalls
[01:09:28] *** Joins: Akiva (~Akiva@user/Akiva)
[01:10:34] *** Joins: cjb (~cjb@user/cjb)
[01:14:08] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:14:34] *** Quits: MaghOz (~maghoz@2001:4bc9:801:f399:540d:f952:207a:4) (Quit: WeeChat 3.3)
[01:17:10] *** Joins: yewscion (~yewscion@52.94.133.128)
[01:17:24] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[01:22:13] *** Quits: jurov (~jurov@rev-81-92-255-39.radiolan.sk) (Ping timeout: 240 seconds)
[01:26:53] <GreaseMonkey> IE definitely tried to add VBA, as well as ActiveX for actual VB
[01:27:06] <GreaseMonkey> well OK, maybe not VBA, more VBScript
[01:27:39] <GreaseMonkey> and then of course there were HTA files which were great if you wanted to give someone the KaK worm
[01:31:05] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:7b0f:c244:d389:4409)
[01:32:54] *** Quits: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a) (Remote host closed the connection)
[01:33:24] *** Quits: krid (~krid@102-10-133-N4.customer.vsm.sh) (Ping timeout: 256 seconds)
[01:35:06] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:35:14] *** Joins: monkey_ (~user@181.114.17.106)
[01:36:04] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:41:15] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:7b0f:c244:d389:4409) (Ping timeout: 256 seconds)
[01:42:11] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[01:43:21] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[01:46:09] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:52:14] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[02:11:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:13:08] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 268 seconds)
[02:13:47] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[02:16:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[02:17:18] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 260 seconds)
[02:23:12] *** Quits: adot (~adot@2a0c:5bc0:40:2e25:348d:ed26:5298:67f1) (Ping timeout: 256 seconds)
[02:29:03] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[02:40:25] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 252 seconds)
[02:40:25] *** Quits: strajder (~strajder@user/strajder) (Quit: signing out for tonight.)
[02:47:39] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fe:b9ee:6dc1:1fc5:370f:e834) (Read error: Connection reset by peer)
[02:48:55] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:03:53] *** Quits: cosimone (~user@93-47-228-207.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[03:05:43] *** Quits: trip_fandango (~tripfanda@5.29.44.90) (Ping timeout: 252 seconds)
[03:11:40] *** Joins: zbrown[m] (~zbrownsys@2001:470:69fc:105::1:4e81)
[03:12:00] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[03:15:22] *** Joins: ThC27 (ThC27@gateway/vpn/protonvpn/thc27)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[03:17:54] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[03:29:38] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Read error: Connection reset by peer)
[03:30:07] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[03:31:16] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Remote host closed the connection)
[03:31:31] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[03:32:53] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[03:34:04] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 265 seconds)
[03:36:31] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[03:45:49] *** Quits: dmc00 (~dmc@47.186.241.232) (Ping timeout: 240 seconds)
[03:46:06] *** Joins: dmc00 (~dmc@47.186.241.232)
[03:46:13] *** Quits: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39) (Ping timeout: 240 seconds)
[03:46:37] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[03:46:37] *** Joins: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39)
[03:48:15] *** Quits: cranium (~cranium@user/cranium) (Ping timeout: 250 seconds)
[03:49:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[04:02:25] *** Joins: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net)
[04:05:06] *** Joins: pjb (~pjb@user/pjb)
[04:09:00] *** Quits: VincentVega (~user@212.97.4.7) (Remote host closed the connection)
[04:13:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:17:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[04:38:56] *** Joins: adot (~adot@2a0c:5bc0:40:2e25:c82e:f248:1224:8430)
[04:42:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:50:48] *** Quits: adot (~adot@2a0c:5bc0:40:2e25:c82e:f248:1224:8430) (Quit: Client closed)
[04:52:28] *** Quits: cjb (~cjb@user/cjb) (Read error: Connection reset by peer)
[04:53:29] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[04:57:13] *** Joins: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl)
[04:58:22] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[05:00:18] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[05:03:47] *** Quits: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[05:04:20] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[05:04:30] *** Joins: dim (~dimlibera@212.85.154.83)
[05:13:32] *** Quits: random-nick (~random-ni@87.116.160.199) (Ping timeout: 240 seconds)
[05:22:51] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[05:40:21] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[05:45:48] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[05:46:02] *** Joins: madage (~madage@user/madage)
[05:58:52] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[06:02:15] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[06:14:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:19:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[06:19:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[06:20:40] *** Joins: aeth (~aeth@user/aeth)
[06:54:29] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[06:58:43] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[07:03:19] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[07:04:46] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 260 seconds)
[07:09:07] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:11:02] *** Joins: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net)
[07:53:22] *** Joins: livoreno (~livoreno@user/notzmv)
[08:07:39] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Quit: Client quit)
[08:08:05] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[08:10:22] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:43:59] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[08:46:32] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[08:48:59] *** Parts: unixlisp (~unixlisp@111.37.115.35) ()
[08:52:22] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[08:54:37] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[08:56:29] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: Lost terminal)
[08:57:44] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:11:41] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[09:14:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:35dd:94ed:cb4d:1568)
[09:14:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:35dd:94ed:cb4d:1568) (Changing host)
[09:14:13] *** Joins: skapata (~Skapata@user/skapata)
[09:27:04] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:29:17] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[09:31:05] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Client Quit)
[09:31:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:32:06] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[09:33:17] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[09:35:04] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[09:35:28] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[09:37:08] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[09:37:34] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[09:37:59] <unixlisp> how to input list data that later may be modified by pop or setf,  list copy-list copy-alist copy-tree? 
[09:39:39] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[09:40:02] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[09:41:26] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[09:41:48] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[09:42:33] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[09:43:18] *** Joins: Jing (~hedgehog@125.106.89.200)
[09:45:44] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[09:46:16] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[09:47:07] <moon-child> unixlisp: yeah, all of those sound good
[09:48:16] <moon-child> if it is an alist then COPY-LIST will not allow you to mutate the individual entries (but will allow you to add or remove entries)
[09:49:27] <moon-child> regarding setf, if you mean to reassign a lexical variable (as in (setf foo bar)) you do not need any special affordances.  If you mean something like (setf (car some-list) whatever) then you do need to ensure mutability
[09:51:48] <unixlisp> setf as (setf car) (setf cdr) (setf nth)
[09:52:05] <moon-child> ok
[09:52:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:53:31] <unixlisp> but most codes i see, just use quote. maybe they do not want you to modify it such way.
[09:55:11] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[09:55:35] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[09:56:41] <moon-child> right
[09:56:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[09:59:20] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[09:59:43] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:01:24] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[10:01:46] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:04:04] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[10:04:53] *** Joins: letto (~letto@188.26.158.104)
[10:05:54] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Quit: Leaving...)
[10:07:36] *** Quits: blihp (~phil@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[10:07:57] *** Quits: ThC27 (ThC27@gateway/vpn/protonvpn/thc27) (Ping timeout: 268 seconds)
[10:09:00] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[10:10:34] *** Joins: Akiva (~Akiva@user/Akiva)
[10:12:22] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[10:12:47] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:12:53] *** Joins: ThC27 (ThC27@gateway/vpn/protonvpn/thc27)
[10:14:33] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[10:14:58] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:16:38] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[10:17:01] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[10:18:41] *** Quits: unixlisp (~unixlisp@111.37.115.35) (Remote host closed the connection)
[10:19:03] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:20:44] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[10:21:07] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:22:48] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[10:23:12] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:24:43] *** Joins: shka (~herr@109.231.0.226)
[10:27:06] *** Quits: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) (Remote host closed the connection)
[10:27:29] *** Joins: unixlisp (~unixlisp@111.37.115.35)
[10:29:51] *** Quits: Jing (~hedgehog@125.106.89.200) (Read error: Connection reset by peer)
[10:31:00] *** Parts: unixlisp (~unixlisp@111.37.115.35) ()
[10:31:33] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[10:34:31] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[10:35:30] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[10:36:04] *** Quits: remexre (~remexre@user/remexre) (Remote host closed the connection)
[10:38:30] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 260 seconds)
[10:39:30] *** Joins: galex-713 (~quassel@galex-713.eu)
[10:47:11] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Remote host closed the connection)
[10:50:34] *** Joins: humasect (~humasect@2001:1970:57e0:4100::9e43)
[10:50:48] *** Joins: remexre (~remexre@user/remexre)
[10:56:40] <unixlisp> list walking is faster than adjustable vector for sbcl ccl allegro lispworks.
[10:57:15] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 250 seconds)
[10:58:50] <unixlisp> also faster than vector except specialized functions for sbcl.
[10:59:05] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:00:20] <unixlisp> do you think list is slow?
[11:00:35] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[11:01:50] <unixlisp> know nothing about cost. https://github.com/svetlyak40wt/array-performance
[11:02:48] <humasect> pattern match ? 
[11:04:29] <unixlisp> destructuring-bind ?
[11:05:04] *** Joins: evocatus (~evocatus@91.211.251.87)
[11:05:51] <humasect> cons list, p list, a list
[11:07:15] <unixlisp> their trivia package
[11:07:29] <unixlisp> there is
[11:07:57] <humasect> yeah
[11:09:29] <unixlisp> https://github.com/guicho271828/trivia/
[11:09:37] *** Quits: ThC27 (ThC27@gateway/vpn/protonvpn/thc27) (Ping timeout: 268 seconds)
[11:10:51] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 268 seconds)
[11:11:12] *** Joins: ThC27 (~ThC27@130.95.254.47)
[11:12:44] <humasect> wonderful 
[11:15:22] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 256 seconds)
[11:15:46] *** Joins: luis (~luis@lisp/luis)
[11:15:46] *** ChanServ sets mode: +o luis
[11:22:51] *** Joins: cranium (~cranium@user/cranium)
[11:34:13] *** Joins: thomasb06 (~thomasb06@leat141.unice.fr)
[11:34:32] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[11:35:24] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:38:16] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Read error: Connection reset by peer)
[11:38:22] *** Joins: humasect_ (~humasect@2001:1970:57e0:4100::9e43)
[11:38:58] *** Joins: heisig (~heisig@p508b527e.dip0.t-ipconnect.de)
[11:41:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:41:27] *** Quits: ghard (~user@2a02:a210:52c:4980:b809:cd44:e4b3:f82a) (Ping timeout: 250 seconds)
[11:41:41] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:46:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[11:48:00] *** Joins: cosimone (~user@93-47-231-203.ip115.fastwebnet.it)
[11:48:34] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:49:10] *** humasect_ is now known as humasect
[11:56:17] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:7cbd:b57b:3147:6649)
[12:05:00] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10fe:b9ee:741f:eb5:2176:fbda)
[12:08:20] *** Joins: krid (~krid@102-10-133-N4.customer.vsm.sh)
[12:08:28] *** Quits: ThC27 (~ThC27@130.95.254.47) (Quit: ThC27)
[12:08:37] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:7cbd:b57b:3147:6649) (Ping timeout: 240 seconds)
[12:08:54] *** Joins: evocatus_ (~evocatus@213.193.2.105)
[12:09:30] *** Quits: evocatus_ (~evocatus@213.193.2.105) (Remote host closed the connection)
[12:10:34] *** Joins: trip_fandango (~tripfanda@2a00:a040:19e:72a1:a542:f04b:8398:d144)
[12:11:54] *** Quits: evocatus (~evocatus@91.211.251.87) (Ping timeout: 268 seconds)
[12:12:05] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:15:13] *** Quits: heisig (~heisig@p508b527e.dip0.t-ipconnect.de) (Quit: Leaving)
[12:23:16] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[12:23:47] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:bde5:121e:162b:ec8a)
[12:29:33] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:36:42] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Remote host closed the connection)
[12:37:09] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[12:43:23] *** Joins: notzmv (~zmv@user/notzmv)
[12:48:32] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 240 seconds)
[12:49:18] *** Joins: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:50:03] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:50:34] *** Quits: cosimone (~user@93-47-231-203.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[12:56:25] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[13:04:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[13:08:35] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[13:08:55] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[13:08:57] *** Joins: wasa (~wasamasa@chicken/contributor/wasamasa)
[13:08:58] *** teiresias2 is now known as teiresias`
[13:09:04] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Killed (NickServ (GHOST command used by childlikempress)))
[13:09:05] *** Joins: snits_ (~quassel@ip98-179-76-75.ph.ph.cox.net)
[13:09:10] *** childlikempress is now known as moon-child
[13:09:15] *** Quits: teiresias (~chris@blvuug/founder/teiresias) (Killed (NickServ (GHOST command used by teiresias`)))
[13:09:22] *** teiresias` is now known as teiresias
[13:10:13] *** Joins: russell-1 (~russell@knod.personaltelco.net)
[13:10:19] *** Joins: cdegroot_ (~quassel@209.5.238.85)
[13:10:22] *** Joins: selwynning (~selwyn@user/selwyn)
[13:10:28] *** Joins: macaw_name-taken (~macaw@77-255-134-52.adsl.inetia.pl)
[13:10:44] *** Joins: ft_ (~ft@shell.chaostreff-dortmund.de)
[13:10:50] *** Joins: fourier_ (~fourier@customer-89-255-226-149.stosn.net)
[13:11:20] *** Joins: ramus_ (~ramus@75.172.171.166)
[13:11:22] *** Joins: gdd1 (~gdd@129.199.146.230)
[13:11:24] *** Joins: jackdani1l (~jack@turtleware.eu)
[13:11:27] *** Joins: xgqtd (~xgqt@gentoo/developer/xgqt)
[13:11:37] *** Joins: ryanbw1 (~ryanbw@mab.sdf.org)
[13:11:51] *** Server sets mode: +nt 
[13:12:16] *** Joins: weinholt` (weinholt@h-37-123-132-162.A785.priv.bahnhof.se)
[13:16:44] *** Quits: shka (~herr@109.231.0.226) (*.net *.split)
[13:16:44] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (*.net *.split)
[13:16:44] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (*.net *.split)
[13:16:44] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (*.net *.split)
[13:16:44] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (*.net *.split)
[13:16:44] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[13:16:44] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[13:16:44] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (*.net *.split)
[13:16:44] *** Quits: cdegroot (~quassel@209.5.238.85) (*.net *.split)
[13:16:44] *** Quits: Gromboli (~Gromboli@user/gromboli) (*.net *.split)
[13:16:44] *** Quits: ASau (~user@lmpc.drb.insel.de) (*.net *.split)
[13:16:44] *** Quits: DKordic (~DKordic@178-222-18-232.dynamic.isp.telekom.rs) (*.net *.split)
[13:16:44] *** Quits: fourier (~fourier@customer-89-255-226-149.stosn.net) (*.net *.split)
[13:16:45] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[13:16:45] *** Quits: weinholt (weinholt@h-37-123-132-162.A785.priv.bahnhof.se) (*.net *.split)
[13:16:45] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[13:16:45] *** Quits: zenptr (~zenptr@user/zenptr) (*.net *.split)
[13:16:45] *** Quits: tephra (~tephra@pagefault.se) (*.net *.split)
[13:16:45] *** Quits: aap (~aap@yoshi.squoze.net) (*.net *.split)
[13:16:45] *** Quits: saorge (~saorge@ns378138.ip-5-196-67.eu) (*.net *.split)
[13:16:45] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[13:16:45] *** Quits: nydel (~nydel@mab.sdf.org) (*.net *.split)
[13:16:45] *** Quits: ramus (~ramus@75.172.171.166) (*.net *.split)
[13:16:45] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[13:16:45] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (*.net *.split)
[13:16:45] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[13:16:45] *** Quits: russell-- (~russell@knod.personaltelco.net) (*.net *.split)
[13:16:45] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[13:16:45] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (*.net *.split)
[13:16:45] *** Quits: macaw (~macaw@77-255-134-52.adsl.inetia.pl) (*.net *.split)
[13:16:45] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[13:16:45] *** Quits: tetrahedron (~derelict@user/derelict) (*.net *.split)
[13:16:46] *** Quits: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com) (*.net *.split)
[13:16:46] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[13:16:46] *** ultera- is now known as ultera
[13:16:46] *** ft_ is now known as ft
[13:21:27] *** Joins: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com)
[13:21:51] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[13:21:51] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[13:21:51] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[13:21:51] *** Joins: Gromboli (~Gromboli@user/gromboli)
[13:21:51] *** Joins: gabc (~gabc@user/gabc)
[13:21:51] *** Joins: zenptr (~zenptr@user/zenptr)
[13:21:51] *** Joins: tephra (~tephra@pagefault.se)
[13:21:51] *** Joins: aap (~aap@yoshi.squoze.net)
[13:21:51] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[13:22:30] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[13:22:57] *** Joins: Colt (~Colt@user/colt)
[13:23:31] *** Joins: nydel (~nydel@mab.sdf.org)
[13:25:30] *** weinholt` is now known as weinholt
[13:25:45] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[13:31:13] *** Joins: shka (~herr@109.231.0.226)
[13:32:19] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:42:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:45:02] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:45:06] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:47:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[13:47:56] *** Lord_of_Life_ is now known as Lord_of_Life
[13:48:07] *** Joins: VincentVega (~user@212.97.0.109)
[13:59:36] *** Joins: strajder (~strajder@user/strajder)
[14:02:56] *** Joins: VincentV` (~user@212.97.0.109)
[14:04:48] *** Quits: VincentVega (~user@212.97.0.109) (Ping timeout: 256 seconds)
[14:06:13] *** jackdani1l is now known as jackdaniel
[14:06:20] *** Quits: jackdaniel (~jack@turtleware.eu) (Changing host)
[14:06:20] *** Joins: jackdaniel (~jack@user/jackdaniel)
[14:06:20] *** ChanServ sets mode: +o jackdaniel
[14:10:32] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:18:20] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[14:18:31] *** Quits: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[14:19:36] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[14:21:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:22:01] *** wasa is now known as wasamasa
[14:41:09] *** Joins: ThC27 (ThC27@gateway/vpn/protonvpn/thc27)
[14:46:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:51:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[14:53:56] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[14:57:39] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[14:58:25] *** Quits: strajder (~strajder@user/strajder) (Ping timeout: 250 seconds)
[14:59:55] *** Quits: VincentV` (~user@212.97.0.109) (Ping timeout: 250 seconds)
[15:07:44] *** Quits: humasect (~humasect@2001:1970:57e0:4100::9e43) (Quit: Leaving...)
[15:11:43] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[15:12:06] *** Quits: trip_fandango (~tripfanda@2a00:a040:19e:72a1:a542:f04b:8398:d144) (Read error: Connection reset by peer)
[15:13:38] *** Joins: trip_fandango (~tripfanda@5.29.44.90)
[15:13:43] *** Joins: rain3 (~rain3___@79.115.252.154)
[15:27:50] *** Joins: mokulus (~mokulus@user/mokulus)
[15:29:44] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:30:01] *** Joins: random-nick (~random-ni@87.116.181.93)
[15:34:47] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[15:39:36] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[15:49:48] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[15:50:02] *** Quits: mokulus (~mokulus@user/mokulus) (Ping timeout: 240 seconds)
[15:55:09] *** Joins: mokulus (~mokulus@user/mokulus)
[15:56:05] *** Quits: mokulus (~mokulus@user/mokulus) (Client Quit)
[15:56:31] *** Joins: strajder (~strajder@user/strajder)
[15:58:45] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[16:00:09] *** Joins: strajder_ (~strajder@user/strajder)
[16:00:42] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Remote host closed the connection)
[16:01:55] <unixlisp> About 1976, EMACS and VI born, now we have CL emacs: climacs hemlock lem. Lem is quite usable. Anyone use it?
[16:02:09] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[16:02:09] *** Quits: strajder_ (~strajder@user/strajder) (Client Quit)
[16:02:26] *** Joins: strajder (~strajder@user/strajder)
[16:03:21] <wasamasa> if you have to ask
[16:03:48] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:bde5:121e:162b:ec8a) (Quit: Client closed)
[16:03:49] <unixlisp> you use it?
[16:03:55] <wasamasa> nah
[16:04:22] <unixlisp> use what editor?
[16:04:41] <wasamasa> the GNU one
[16:04:45] <wasamasa> it runs all the packages I want
[16:05:08] <unixlisp> the most popular
[16:05:17] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e138:977f:7375:1046)
[16:05:17] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e138:977f:7375:1046) (Changing host)
[16:05:17] *** Joins: skapata (~Skapata@user/skapata)
[16:11:18] *** Quits: ThC27 (ThC27@gateway/vpn/protonvpn/thc27) (Quit: ThC27)
[16:21:43] *** Joins: livoreno (~livoreno@user/notzmv)
[16:21:45] <White_Flame> unixlisp: btw, (list 1 2 3) creates a new list every time it's evaluated, so that would  be safely mutable.  '(1 2 3) is a literal and is not safely mutable
[16:22:29] <White_Flame> however, push/pop do not mutate any cons cells, so that's safe to use on literal lists
[16:23:02] <White_Flame> many list functions have 2 versions, a copying form and a mutating form, and the former are definitely more used
[16:24:19] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[16:31:59] <unixlisp> pop "writes the cdr of the list back into the place" not mutate the cons cell.
[16:36:06] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:37:32] <unixlisp> white_Flame: in practice I remember mutate a defparameter var (quote ( ... )), do not cause any problem. maybe the optimise setting or other things matter?
[16:41:22] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:41:39] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:43:01] <White_Flame> it may not cause specific problems for one particular usage, but it's still generally problematic
[16:43:03] <unixlisp> oh, no. (pop (car '((0 1)) => ((0)) muted this list
[16:43:13] <White_Flame> that's not a mutation
[16:43:21] <White_Flame> oh wait, no you're right
[16:43:45] <wasamasa> the argument of pop should be something settable, no
[16:43:52] <wasamasa> like the name of a variable
[16:44:27] <unixlisp> Destructive function SB-KERNEL:%RPLACA called on constant data
[16:44:43] <White_Flame> yep
[16:46:02] <unixlisp> strange! (setf (car '((0 1))) 2) sbcl do not warn.
[16:48:05] <unixlisp>  ccl do not warn (pop (car '((0 1)) and (setf (car '((0 1))) 2) not surprise
[16:48:11] <White_Flame> it might constant fold that moreso than POP, but still yeah it's weird that it misses that warning
[16:48:13] <jackdaniel> (car <whatever>) /is a place/
[16:48:44] <White_Flame> the warning isn't mandated by the spec
[16:48:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:48:52] <jackdaniel> the problem is that you chart the undefined behavior territory, because you modify the place with data which modification causes undefined consequences
[16:49:45] <jackdaniel> an example of such undefined consequence is coalascing literals - say you have (defparameter a '(1 2 3)) (defparameter b '(1 2 3)) - the compiler may coalasce both, so when you modify the list stored in a, b will be "magically" changed too
[16:50:02] <jackdaniel> another example of undefined consequence is a dragon flying out of your console and eating your nose
[16:50:35] <White_Flame> or formatting your hard drive, or sending threatening emails to your respective head of state
[16:51:23] <jackdaniel> it may be compared to typing random letters in the terminal, who knows whether they are not 'sudo rm -rf /'
[16:51:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:51:48] <jackdaniel> can you do that? certainly
[16:51:57] <jackdaniel> is it a good idea? not really
[16:52:39] <phadthai> so in this particular case, because it's undefined, in some implementations you might get a crash, in another an exception, in another it might just work, or not warn and not result in intended results
[16:53:29] <unixlisp> "undefined" gray field
[16:53:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[16:54:31] <phadthai> and it gives the opportunity to the implementation to optimize with constant static data
[16:55:21] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:56:18] <unixlisp> yes. just i can not say for immuted number, such as complex number.
[16:56:38] <jackdaniel> do you mean immutable?
[16:56:45] <unixlisp> yes.
[16:56:56] <jackdaniel> what can not you say for immutable number?
[16:57:50] <unixlisp> people say that is silly to mute immutable number.
[16:58:01] <jackdaniel> mutate, not mute
[16:58:12] <jackdaniel> how can you mutate a number object in common lisp?
[16:58:13] <unixlisp> sorry. mutate
[16:58:46] <jackdaniel> what does it mean to mutate a number 4? or 4 + 3i (semantically)?
[16:59:08] <unixlisp> I can't, just suppose a implementation to improve performance at some specific situation.
[16:59:18] <jackdaniel> I don't understand
[17:00:05] <jackdaniel> internally the implementation may shuffle the memory to cons new objects i.e for bignums, but from the programmer perspective it doesn't matter unless they run out of the memory
[17:00:48] <sham1> Numbers are always constants. Although with stuff like bignums you *could* mutate the underlying store if you can prove that your particular bignum instance only has one reference. But that's not feasible most of the time
[17:02:22] <unixlisp> if for extreme performance, a implementation mutate number (not break any other thing), is it possible?
[17:02:48] <sham1> If it's not observable outside? Sure
[17:03:16] <sham1> But you need to prove that property
[17:03:21] <unixlisp> and it is standard comforming!
[17:04:02] <White_Flame> no it's not
[17:04:16] <sham1> Again, I don't see why the standard would care if the side-effect is not observable
[17:04:18] <White_Flame> if you mutate numbers, you're outside the spec
[17:04:20] <jackdaniel> you both speak nonsense; the implementation may change underlying memory, but what constitues a number is the observable behavior.
[17:05:30] <White_Flame> I think this is more about user code changing underlying memory?
[17:06:55] <jackdaniel> by the way, I find it hard to believe that unixlisp is not trolling (especially that this was explained to him three or four times already based on commonlisp logs)
[17:07:19] <White_Flame> it also seems that there's a bit of language barrier, so who knows
[17:07:31] <White_Flame> but the spec vs not spec questions do get nonsensical regardless
[17:08:49] <unixlisp> Well. I have an exchange about this topic with Kent Pitman. Are you interested?
[17:09:25] <White_Flame> only portions of it which might clarify your questions
[17:16:35] <unixlisp> just a viewport. "To your actual question, I think immutability intends that something not be mutated, but it has different uses even in the literature."
[17:16:57] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:17:53] <unixlisp> "In some contexts, the absence of operators that say they will mutate something is enough to call something mutable. In others, there has to be some guard."
[17:19:51] <unixlisp> "But the standard is pretty clear on that it's not protecting you from doing things that it has not promised, and it has pretty clearly not promised a specific behavior even if it has suggested numbers cannot be mutated."
[17:20:21] <White_Flame> yeah, that's pretty much what's been said here
[17:22:25] <unixlisp> "The general advice I give, and that others do, is that if you are writing an implementation, try to avoid situations that will surprise users. And if you are writing code you want to port, expect implementors to surprise you. That leaves a healthy gray area in between."
[17:23:05] <White_Flame> are your questions about the implementation or about user code?  it sounds like your questions were about user code
[17:24:30] <phoe> what's the actual problem though? an implementation is allowed to do anything as long as the CL semantics are preserved, so it can do whatever mutative trickery it wants to under the hood as long as the program behaves according to the standard's expectations
[17:24:49] <phoe> so an answer to "if for extreme performance, a implementation mutate number (not break any other thing), is it possible?" is "yes, as long as CL semantics aren't broken"
[17:26:17] <unixlisp> highly favor this viewport (I think so)
[17:26:26] <phoe> as long as CL stays CL, everything else goes
[17:27:01] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[17:28:16] <unixlisp> "And so test suites for languages tend not to create reports saying "this implementation passed" so much as "this behavior requires explanation or defense". There is no judge but the market as to whether the defense is good."
[17:28:23] <phoe> but then again, as a user of CL code you shouldn't need to care and as a programmer of CL code you only should care if your code is too slow for whatever reason and you need to dive into implementation-specific optimization to squeeze out some more performance
[17:28:35] <phoe> unixlisp: why all the quotes though
[17:28:48] <unixlisp> from Kent.
[17:29:18] <phoe> that's "from whom" and not "why" though
[17:30:25] <yitzi> unixlisp: I suggest you look at ansi-test for what is actually tested and the error reports generated. There is much behavior that is explicitly specified so "implementations" can actually be non-conforming.
[17:30:28] <phoe> like, there's a lot of discussion but I've failed to find and grasp the concrete topic so far
[17:31:42] <jackdaniel> the main theme is "how many people can I troll with meekly-obstinate attitude given enough time", and the answer is: a lot
[17:32:03] <phoe> oh, so similar as in #sbcl a while ago
[17:33:06] <unixlisp> "but my understanding is that most standards do not come accompanied > > by a test for conformance or not, and that the reasons are not just the > > pragmatics that such tests are hard to write, but more importantly there > > is a fear that some company (or in this sense you should assume I mean > > also individuals or groups providing open source software as a kind of > > generalized company for discussion purposes here) might fee
[17:33:27] <unixlisp> s/>>//
[17:33:49] <phoe> unixlisp: *why* do you post this
[17:35:23] <contrapunctus> phoe: long time no see!
[17:35:29] <phoe> contrapunctus: <3
[17:35:39] <phoe> yes, been a while
[17:37:35] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:37:43] <unixlisp> phoe: I want to better understand spec.
[17:38:29] <phoe> unixlisp: the CL specification provides no operators that can modify a number object. that's why in standard CL all numbers are immutable, because there are no standard ways to mutate them
[17:39:28] <phoe> like, the value 2 is going to stay a 2 forever - you can only replace it for a different one, e.g. by calling (+ 2 2) and then SETFing some place to remove the old immutable 2 and install a brand new immutable 4 in its place.
[17:40:15] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[17:40:22] <phoe> of course it doesn't mean that the implementations do it this way, they likely just stuff that 2 in a register and call some sorta MUL assembly operation on it - but that's already not the level of CL spec, just "an implementation detail"
[17:42:06] <unixlisp> yes. such implementation must be not comforming to spec?
[17:42:13] <phoe> what do you mean, not conforming to the spec
[17:42:34] <phoe> all implementations I know do it this way, and they all conform to the specification
[17:42:58] <phoe> the specification says that (let ((x 2)) (setf x (* x 2)) x) must return 4
[17:43:00] <phoe> that's all
[17:43:08] <phoe> it's up to the implementation to define how that works under the hood
[17:43:57] <phoe> unless stated otherwise, the specification talks about the *language*, not about implementations of that language
[17:44:10] <yitzi> I think it would be quite entertaining if there was only one zero constant and one was allowed to mutate it. Mutating `pi` could also be very useful. ;)
[17:44:26] <phoe> ah yes, (setf pi 3) and life is much simpler
[17:45:36] <yitzi> Exactly. Ramanujan's formulas could converge in a signal round!
[17:45:45] <unixlisp> in sum the standard is really flexible.
[17:46:23] <phoe> about how CL can or should be implemented? yes, it's flexible in this regard
[17:47:12] <unixlisp> "Standards are first and foremost an exercise in antitrust law"
[17:49:30] <phoe> in particular, the CL standard does not care if your processor does native multiplication, escapes to a method call of another language, sends a RPC call to another machine, or sends a question to Amazon Mechanical Turk reading "help! how much is 2 + 2?"
[17:49:39] <phoe> as long as (let ((x 2)) (setf x (* x 2)) x) returns 4, then CL semantics are preserved
[17:49:58] <phoe> s/2 + 2/2 * 2/
[17:51:48] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:55:29] *** Joins: xiews (~wxie@101.93.21.97)
[17:56:47] <unixlisp> thank for all to help me to understand this "silly" problem. 
[17:57:26] <phoe> it's not really silly when you look from the perspective of "what does it really mean to «conform»"
[17:58:13] *** Joins: monkey_ (~user@181.114.17.106)
[18:02:22] <unixlisp> CL is really tolerable somewhat, Multi-paradigm, tons of UB.
[18:08:50] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[18:09:20] <unixlisp> "... might feel disparaged." implement it. Thank for you again to help me.
[18:13:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[18:13:50] *** Joins: thevishy (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69)
[18:13:51] <unixlisp> complement it.
[18:14:48] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[18:18:29] <phoe> no problem
[18:23:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:23:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:27:21] *** Quits: thomasb06 (~thomasb06@leat141.unice.fr) (Remote host closed the connection)
[18:33:34] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 260 seconds)
[18:34:10] *** Joins: amb007 (~a_bakic@180.36.22.93.rev.sfr.net)
[18:44:05] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:50:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:52:22] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[18:57:02] *** Quits: xiews (~wxie@101.93.21.97) (Ping timeout: 252 seconds)
[19:04:43] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[19:08:59] *** Quits: amb007 (~a_bakic@180.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[19:10:11] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:15:36] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[20:04:58] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[20:05:38] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Quit: Client closed)
[20:06:43] *** Quits: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[20:08:01] *** Joins: cosimone (~user@93-47-231-203.ip115.fastwebnet.it)
[20:09:14] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:16:51] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:bde5:121e:162b:ec8a)
[20:20:51] *** Joins: MaghOz (~maghoz@2001:4bc9:821:d3f2:540d:f952:207a:2)
[20:22:59] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[20:28:18] *** Joins: VincentVega (~user@212.97.0.109)
[20:29:17] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[20:31:24] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:31:35] *** Quits: peterhil__ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:31:44] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10ec:1646:741f:eb5:2176:fbda)
[20:32:02] *** Joins: gareppa (~gareppa@user/gareppa)
[20:32:34] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[20:32:47] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[20:34:27] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:34:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10fe:b9ee:741f:eb5:2176:fbda) (Ping timeout: 250 seconds)
[20:36:06] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Quit: Returning to Simulacron-1)
[20:50:56] *** Quits: trip_fandango (~tripfanda@5.29.44.90) (Quit: WeeChat 3.3)
[20:52:20] *** Joins: tripfandango (~tripfanda@5.29.44.90)
[20:56:47] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[21:03:26] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[21:03:53] *** macaw_name-taken is now known as macaw
[21:04:10] *** ryanbw1 is now known as ryanbw
[21:09:46] *** Joins: makomo (~makomo@user/makomo)
[21:23:50] *** Joins: Akiva (~Akiva@user/Akiva)
[21:25:15] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:28:40] *** Joins: [deleted] (~livoreno@user/notzmv)
[21:30:29] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[21:38:16] <edgar-rft> hi [deleted], who deleted you?
[21:38:43] *** Joins: josemanuel (~josemanue@user/josemanuel)
[21:44:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[22:01:15] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:02:55] *** Quits: russell-1 (~russell@knod.personaltelco.net) (Changing host)
[22:02:55] *** Joins: russell-1 (~russell@user/russell/x-2065287)
[22:03:16] *** russell-1 is now known as russell--
[22:06:04] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:11:36] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:12:42] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:18:57] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[22:31:27] *** Quits: mmk2410 (~mmk2410@user/mmk2410) (Quit: ZNC - https://znc.in)
[22:32:14] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[22:42:46] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 260 seconds)
[22:44:38] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:46:31] *** Joins: galex-713 (~quassel@galex-713.eu)
[22:46:45] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10ec:1646:741f:eb5:2176:fbda) (Read error: Connection reset by peer)
[22:47:17] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5d34:adba:2092:1fba)
[22:57:56] *** Joins: Lycurgus (~juan@98.4.112.204)
[23:01:47] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5d34:adba:2092:1fba) (Ping timeout: 250 seconds)
[23:03:08] *** Joins: VincentV` (~user@212.97.0.109)
[23:04:37] *** Quits: VincentVega (~user@212.97.0.109) (Ping timeout: 250 seconds)
[23:05:25] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[23:12:50] *** Joins: mokulus (~mokulus@user/mokulus)
[23:15:39] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[23:17:07] *** Joins: nature (~nature@45.32.235.173)
[23:20:17] *** Joins: monkey_ (~user@181.114.17.106)
[23:20:45] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5d34:adba:2092:1fba)
[23:26:14] *** Joins: kevingal (~quassel@2001:770:c0:401:2d47:2f9b:c1be:64a0)
[23:28:59] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[23:35:53] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5d34:adba:2092:1fba) (Ping timeout: 252 seconds)
[23:43:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[23:50:33] *** Quits: rain3 (~rain3___@79.115.252.154) (Ping timeout: 250 seconds)
[23:52:00] *** Quits: krl_ (~krl@h-158-174-122-239.A357.priv.bahnhof.se) (Quit: Leaving...)
