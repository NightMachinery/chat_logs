[00:00:41] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[00:05:08] *** Quits: aspic (~shifty~~~@ppp121-44-117-75.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[00:05:24] *** Joins: aspic (~shifty~~~@ppp121-44-111-223.syd-gls-har-bras38.tpg.internode.on.net)
[00:12:24] *** Joins: proller (~p@2a02:6b8:b081:a405::1:1c)
[00:12:52] *** Quits: anthk_ (~anthk_@92.176.105.30) (Ping timeout: 265 seconds)
[00:18:49] *** Joins: YaoNai (~YaoNai@user/yaonai)
[00:19:55] *** Quits: proller (~p@2a02:6b8:b081:a405::1:1c) (Ping timeout: 260 seconds)
[00:26:02] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[00:32:21] *** Joins: whynot (~whynot@37.73.63.44)
[00:32:45] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 260 seconds)
[00:33:04] <jaggz> can we just do the things that bring us closer to inner peace, balance, and harmony with our true nature and identity?  it's not like the apple seed is like, "maybe I want to be a barber.. or a comedian.. hmm.. "
[00:33:40] <jaggz> find your ghabeliat.. (it's like.. capability placed within circumstance)
[00:36:16] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 252 seconds)
[00:50:24] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[00:57:56] *** Joins: gast0n (~g4570n@user/gast0n)
[01:07:20] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[01:08:22] *** Joins: proller (~p@2a02:6b8:b081:8801::1:6)
[01:11:41] <kiwiroy> gchristensen: There's Mojo::JWT and a PR on OAuth2 plugin for mojo to implement OIDC if you're using mojo.
[01:14:45] *** Quits: proller (~p@2a02:6b8:b081:8801::1:6) (Ping timeout: 260 seconds)
[01:27:24] *** Joins: proller (~p@80.240.216.69)
[01:27:42] *** Quits: aspic (~shifty~~~@ppp121-44-111-223.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[01:28:29] *** Joins: aspic (~shifty~~~@ppp121-44-115-16.syd-gls-har-bras39.tpg.internode.on.net)
[01:36:46] * GumbyPAN CPAN Upload: Smartcat-App-0.0.11 by TARAS https://metacpan.org/release/TARAS/Smartcat-App-0.0.11
[01:37:25] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[01:37:52] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[01:43:40] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[01:44:38] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[01:53:17] *** Joins: utis (~utis@84.208.165.160)
[01:55:23] *** Quits: utis (~utis@84.208.165.160) (Client Quit)
[02:00:52] <ens> hey folks i want to generate password hashes in perl that are in the same format as the shadowfile (for hashes like $1.......)
[02:01:14] <ens> a number of sources say to use crypt() but some pass 3 args and some pass a modified salt and neither of those seemed to work for me
[02:01:22] <ens> any chance someone knows a module or the proper way to do this?
[02:01:48] * GumbyPAN CPAN Upload: Tk-Text-SuperText-0.12 by ASB https://metacpan.org/release/ASB/Tk-Text-SuperText-0.12
[02:01:49] <huf> LeoNerd: you're the sort of person to know the proper name. what's the bit of a pair of glasses that sits on your nose?
[02:02:01] <ens> bridge
[02:02:07] <huf> bridge? two bridges?
[02:02:13] <ens> maybe not
[02:02:19] <huf> i mean the slipper bits
[02:02:35] *** Quits: EGD (~egd@user/egd) ()
[02:03:15] <huf> the bridge sounds like the bit of frame between the lenses
[02:04:17] <xenu> huf: https://pimcore.cdnsbg.com/eyeglasses-parts.png
[02:04:31] <huf> terrible name.
[02:04:46] <huf> i'll accept it as a lesser alternative to slippers.
[02:05:07] <huf> temples is pretty bad too, those are the stems surely...
[02:05:08] <ens> ah yes, so basically i need to generate md5 hashes in passwd format
[02:06:01] <huf> so anyway, the slippers are of the devil and i am so happy my current frame doesnt have them :D
[02:06:09] <huf> i've have bent them all out of shape like 3 times already
[02:06:49] * GumbyPAN CPAN Upload: MooX-PDL-Role-Proxy-0.07 by DJERIUS https://metacpan.org/release/DJERIUS/MooX-PDL-Role-Proxy-0.07
[02:07:55] *** Quits: magla (~gelignite@55d4c46b.access.ecotel.net) (Quit: Stay safe!)
[02:12:33] *** Quits: johnjay (~pi@192.142.100.34) (Read error: Connection reset by peer)
[02:12:59] <LeoNerd> Ahyeah those rubbery bits that are always terrible and wobbly
[02:13:03] <LeoNerd> I don't know their name
[02:13:20] <LeoNerd> But I do agree with your assessment that I'm the sort of person *likely* to have known it
[02:13:30] *** Joins: johnjay (~pi@192.142.100.34)
[02:15:10] <huf> :)
[02:15:21] <huf> apparently they're nose pads and i dont think that's an acceptable name
[02:15:28] <huf> and also why do frames even have it
[02:15:43] <huf> their only function is to get bent and then you spend 3 weeks seething
[02:15:56] <huf> until you get them bent back to juuust the correct position
[02:15:57] <huf> or not
[02:16:04] <huf> maybe they break off
[02:16:06] <huf> FUN STUFF
[02:16:50] * GumbyPAN CPAN Upload: Mojo-Pg-4.26 by SRI https://metacpan.org/release/SRI/Mojo-Pg-4.26
[02:20:46] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[02:26:08] <ology> What is the difference, besides "5 characters", between $c->req->param('foo') and $c->param('foo') ? One is a param of the request object and one is of the controller itself? 
[02:26:21] <ology> in mojo
[02:26:23] *** Quits: whynot (~whynot@37.73.63.44) (Quit: leaving)
[02:27:58] * ology reads https://docs.mojolicious.org/Mojolicious/Controller#param
[02:32:55] *** Quits: randir (~randir@95-25-59-33.broadband.corbina.ru) (Read error: Connection reset by peer)
[02:33:21] *** Joins: randir (~randir@95-25-59-33.broadband.corbina.ru)
[02:34:03] <Grinnz> $c->param accesses a combined parameter set of request params, uploads, and placeholders
[02:34:35] <Grinnz> $c->req->param is just more specific
[02:36:15] *** Quits: EvanCarroll (~ecarroll@46.196.88.53) (Remote host closed the connection)
[02:41:16] <ens> thanks i got it. just needed to pass $1$ as the salt to crypt()
[02:43:19] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[02:47:09] *** Quits: zacts (~zak@user/zacts) (Quit: leaving)
[02:47:13] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:49:55] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[02:50:12] <ether> I avoid $c->param because of its lack of specificity
[02:51:34] <ether> $c->param also accesses stash variables
[02:52:39] <ether> it could be a feature, if you want to support both  GET /foo/:bar/baz and GET /foo/baz?bar=<value> in the same controller sub, but I've seen where that goes, and what you get after a few years is a mess
[02:52:45] *** Quits: a6502_ (~wieger@stofzuiger.a6502.net) (Ping timeout: 260 seconds)
[02:53:10] *** Joins: a6502_ (~wieger@stofzuiger.a6502.net)
[02:56:01] <Grinnz> yeah, better to be explicit in what you expect and support
[02:56:40] *** Joins: Su-Shee_ (~Susanne@p4ffc7efa.dip0.t-ipconnect.de)
[02:58:22] *** Quits: Su-Shee (~Susanne@p4ffc7219.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:03:07] *** Joins: proller (~p@2a02:6b8:b081:1208::1:21)
[03:04:46] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 252 seconds)
[03:11:12] *** Joins: laidback_01 (~laidback_@206.214.234.238)
[03:14:04] *** Joins: dsrt^ (~dsrt@68.101.54.227)
[03:15:59] *** Joins: Manderson_ (~manderson@45.40.80.170)
[03:16:20] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[03:17:15] *** Quits: proller (~p@2a02:6b8:b081:1208::1:21) (Ping timeout: 260 seconds)
[03:17:59] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[03:21:24] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:22:54] <ology> Grinnz / ether : Thanks! :)
[03:23:09] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:23:56] *** Quits: aspic (~shifty~~~@ppp121-44-115-16.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[03:25:33] *** Joins: aspic (~shifty~~~@ppp121-44-115-16.syd-gls-har-bras39.tpg.internode.on.net)
[03:26:40] *** Joins: gast0n (~g4570n@user/gast0n)
[03:30:30] *** Quits: subie (~subie@2601:4c0:4080:bc0:cdf3:ce00:5388:6a4e) (Quit: Leaving)
[03:31:22] *** Quits: aspic (~shifty~~~@ppp121-44-115-16.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[03:31:23] *** Quits: japh (~scp1@user/japh) (Read error: Connection reset by peer)
[03:31:33] *** Joins: tejr (~tejr@user/tejr)
[03:33:55] *** Joins: pizdets_ (~pizdets@183.182.115.101)
[03:33:57] *** Quits: pizdets (~pizdets@183.182.110.162) (Ping timeout: 265 seconds)
[03:34:42] *** Joins: subie (~subie@2601:4c0:4080:bc0:ec67:7fc0:2351:c8bb)
[03:40:27] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[03:41:55] *** Joins: japh (~scp1@host-95-192-87-149.mobileonline.telia.com)
[03:41:56] *** Quits: japh (~scp1@host-95-192-87-149.mobileonline.telia.com) (Changing host)
[03:41:56] *** Joins: japh (~scp1@user/japh)
[03:43:19] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[03:46:01] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[03:46:34] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[03:46:59] * GumbyPAN CPAN Upload: BoardStreams-v0.0.23 by KARJALA https://metacpan.org/release/KARJALA/BoardStreams-v0.0.23
[04:08:30] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[04:10:09] *** Joins: Manderson (~manderson@45.40.80.170)
[04:11:04] <toddr> Does anyone know off the top of their head what would influence localtime to give a different WDAY for a specific epoch?
[04:11:11] <toddr>  perl -E'my @f = localtime(1514764800); say $f[6]'
[04:11:22] <toddr> I'm getting 0 or 1 depending on what system I'm on.
[04:11:51] <Grinnz> it's localtime, so the system timezone would affect it
[04:12:18] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[04:13:14] <LeoNerd> If you wanted it in UTC, perhaps you wanted gmtime()
[04:15:23] *** Joins: Manderson_ (~manderson@45.40.80.170)
[04:17:13] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[04:19:18] <toddr> hrm. that's a good point. thanks!
[04:22:03] * GumbyPAN CPAN Upload: Test-Mock-LWP-Distilled-0.001_03 by SKINGTON https://metacpan.org/release/SKINGTON/Test-Mock-LWP-Distilled-0.001_03
[04:22:45] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:26:16] *** Joins: Manderson (~manderson@45.40.80.170)
[04:29:02] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[04:30:41] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[04:31:42] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 245 seconds)
[04:32:40] *** Quits: cptaffe (~connor@2600:1700:f08:1110:c843:5621:bfb6:7631) (Ping timeout: 252 seconds)
[04:34:02] *** Joins: Manderson_ (~manderson@45.40.80.170)
[04:36:02] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[04:39:45] *** Quits: mteo (francis@user/francis) (Quit: rb)
[04:40:19] *** Joins: Manderson (~manderson@45.40.80.170)
[04:41:10] *** Joins: mteo (francis@user/francis)
[04:42:34] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[04:53:30] <simcop2387> just a heads up, it'll take me a few days to track it down but somebody may have found a bug in the eval server.  either that or something else happened to it.  was giving some users issues with free memory and double freed pointers until it was restarted.  so something happened that might have been some kind of exploit to it.  i may owe somebody a drink
[04:53:57] <simcop2387> if you did it and can show how (before i figure it out in logs) then it'd be immensely helpful
[04:54:22] <simcop2387> likely though it's just some weird local effect from an apt upgrade or some other misbehavior though
[04:55:42] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:58:31] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 252 seconds)
[04:59:26] *** Quits: Manderson (~manderson@45.40.80.170) (Read error: Connection reset by peer)
[04:59:43] *** Joins: Manderson (~manderson@45.40.80.170)
[05:01:09] <buu> Somedays I really appreciate good error messages: "Can't locate object method "apacheStatus" via package "Generic::Exception::Template""
[05:03:21] *** Joins: Manderson_ (~manderson@45.40.80.170)
[05:05:17] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[05:10:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:14:12] *** Joins: __Manderson (~manderson@45.40.80.170)
[05:17:17] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[05:25:25] *** Joins: semeion (~semeion@user/semeion)
[05:40:56] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[05:45:49] *** Joins: Manderson (~manderson@45.40.80.170)
[05:47:54] *** Joins: krismatrix (~krismatri@38.80.149.51)
[05:48:18] *** Quits: __Manderson (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[05:48:42] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[05:50:43] *** Quits: Su-Shee_ (~Susanne@p4ffc7efa.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:52:35] *** Joins: Su-Shee (~Susanne@p4ff4955b.dip0.t-ipconnect.de)
[05:53:47] *** Joins: semeion (~semeion@user/semeion)
[05:54:44] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[05:54:46] *** semeion is now known as mnemonic
[05:58:17] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:04:47] <madduck> A sub in Perl usually starts out with "my ($arg1, $arg2) = @_", and I understand that if the sub is called with an array as argument, e.g. foo(@arr), then the array is unpacked and split onto $arg1 and $arg2. Can I prevent this somehow?
[06:05:19] <madduck> Case in point: I want a function like this: debug($text, $log), i.e. take the $text, and a boolean whether to $log.
[06:06:00] <madduck> The problem is that when I now pass Data::Dumper($one, $two) to the debug function, since the Dumper function returns an array, the $log boolean is never passed.
[06:07:13] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:07:14] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:08:45] <xenu> "my @foo = ($arg1, $arg2); func(@foo)" and "func($arg1, $arg2)" are 100% equivalent
[06:08:49] <xenu> i don't understand your problem
[06:10:13] <xenu> (well, 99%, if there's a prototype it might be different, but overwhelming majority of functions doesn't have a prototype)
[06:10:56] <madduck> xenu: yeah, and in the presence of a function that returns a variable number of elements like Dumper, that is just terrible.
[06:11:43] <madduck> debug(Dumper("one"), 0) is fine ($log == 0), but debug(Dumper("one", "two"), 0) is not, because $log will be the Dump of "two"
[06:12:14] *** Joins: Croran_tb (~Thunderbi@2601:601:1880:7780::fd39)
[06:13:03] <xenu> ah, that's your problem
[06:13:40] <xenu> Data::Dumper::Dumper is context sensitive, if you call it like this: scalar(Dumper $foo)
[06:13:43] <xenu> you will get a single string
[06:14:09] <madduck> just have to remember that all the time.
[06:14:11] <madduck> :( 
[06:14:12] <xenu> alternatively, a more universal solution is join('', Dumper(1,2))
[06:14:56] <aquanight> madduck: debug(scalar Dumper("one",= "two"), 0)
[06:15:10] <aquanight> oh like xenu already said
[06:15:19] <aquanight> you can also use unary +
[06:15:52] <xenu> yet another solution would be sub debug :prototype($$) { ... } but i'm not a fan of it
[06:16:21] <xenu> that will force both arguments to scalar context
[06:18:44] <aquanight> yeah it's a bit of "action at a distance"
[06:18:57] <xenu> or you could make a Dumper() wrapper that always returns a string, because imo that's the real problem
[06:19:03] <xenu> it's weird that Dumper() returns a list
[06:19:24] *** Quits: Croran_tb (~Thunderbi@2601:601:1880:7780::fd39) (Quit: Croran_tb)
[06:19:27] <madduck> okay, thanks for that. reassuring. I will work around it one way or another
[06:19:41] <xenu> or you can never call it with multiple arguments :P
[06:19:53] *** Joins: Croran_tb (~Thunderbi@2601:601:1880:7780::fd39)
[06:19:59] <xenu> i.e. Dumper([$var1,$var2]) instead of Dumper($var1,$var2)
[06:21:06] <aquanight> but honestly perl's hardly the first language to allow the definition to create silent effects on the call site
[06:21:16] <aquanight> C++ does that shit all the time with implicit conversions
[06:21:52] <aquanight> you would THINK they don't anything nontrivial but nothing technically stops someone from setting up an implicit conversion that erases the universe
[06:22:13] *** Joins: ominionx (~ominionx@6.sub-174-250-40.myvzw.com)
[06:23:20] <aquanight> so honestly half the time I get annoyed when people are all "literally never use prototypes". THe shit madduck is dealing with is like one of the things it was practically made for.
[06:23:29] <xenu> my favourite thing in C++ is implicit object construction, you can pass an initializer list instead of an object as a function argument
[06:23:32] <xenu> it's weird
[06:23:54] <aquanight> well I mean you're setting the constructor arguments
[06:23:58] <madduck> my favourite thing about any programming language is when there is no implicit behaviour ever
[06:24:11] <aquanight> madduck: good luck finding one honestly
[06:24:29] <aquanight> everything north of assembler has at least some "spooky action" which may or may not be at a distance
[06:25:36] <aquanight> I mean, if we define "implicit behavior" as "anything that's not written in your own source code" just the very first thing a program does (entering main()) is implicit behavior
[06:26:50] <madduck> C++ is pretty good.
[06:28:48] <Croran_tb> madduck: Forth is pretty good for that
[06:29:11] *** Quits: Croran_tb (~Thunderbi@2601:601:1880:7780::fd39) (Quit: Croran_tb)
[06:33:05] *** Quits: gryphn (~gryphn@154.9.128.26) (Quit: kthxbye)
[06:34:52] <xenu> aquanight: you say i'm setting the constructor arguments, i say i'm passing std::initializer_list, it's ambiguous!
[06:35:17] <aquanight> xenu: well yeah there's initializer_list too if the function actually WANTS that type as its argument
[06:35:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:36:21] <xenu> this is especially confusing when there are two constructors, one that takes initializer_list and one that doesn't
[06:37:55] <dngor> "pretty good" is not "perfect".
[06:38:02] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:38:17] <madduck> also the fact that a return from within a foreach … each %hash function leaves the iterator is a massive gotcha. :( 
[06:38:38] <aquanight> xenu: yup, the joy that is "copy list initialization"
[06:39:33] <aquanight> madduck: yeah each() is tricky to use properly if you aren't in full control of the target hash]
[06:40:07] <aquanight> on the one hand, most people just use keys for that reason. On the other, I'm annoyed there's not a good way to have the same incremental iteration (rather than slurping the keys) in a safe way that I know of.
[06:40:22] *** Quits: johnjay (~pi@192.142.100.34) (Ping timeout: 252 seconds)
[06:40:49] <aquanight> on the other hand I'm fairly sure perl has copy-on-write keys so doing keys() on even a large hash shouldn't be complete ass
[06:41:01] <madduck> "while (my $i = each %hash) { if … { return "found"; } }" should not have different results if I call it twice in a row, and yet it does because the second time, the hash is searched from midfield.
[06:41:25] <aquanight> madduck: this only apples if %hash exists outside the funct
[06:41:30] <xenu> thankfully the main use of each() will be provided by much saner multiple-variables for
[06:41:33] <dngor> Because the iterator is intrinsic to the hash in Perl. Because I'm sure very good reasons.
[06:41:41] <xenu> in 5.36
[06:41:57] <xenu> for my($k, $v) (%hash) { ... }
[06:42:10] <madduck> aquanight: I don't see what that should have any relevance. It's definitely in violation of the principle of least surprise
[06:42:22] <aquanight> madduck: use keys in void context to force-reset each
[06:42:24] <madduck> okay good to know xenu, thanks!
[06:42:28] *** Joins: johnjay (~pi@192.142.100.34)
[06:42:37] <aquanight> e.g. keys %hash; while (my $i = each %hash) { ... }
[06:42:46] <madduck> ok
[06:43:11] <madduck> and for an array?
[06:43:13] <aquanight> xenu: remind me: does foreach do incremental iteration?
[06:43:19] <aquanight> madduck: are you using each on an array?
[06:43:29] <madduck> yes
[06:43:32] <aquanight> ... why.
[06:43:36] <madduck> because I want an index as well
[06:43:46] <xenu> 'incremental iteration'?
[06:43:49] <aquanight> for (my $i = 0; $i < scalar @array; ++$i) { ... }
[06:43:52] <madduck> while (my ($i, $match) = each @DATALEVEL_KEYWORDS) {
[06:44:03] <aquanight> xenu: keys %hash slurps the entire hash's keys
[06:44:08] <madduck> aquanight: yuk! ;) 
[06:44:19] <aquanight> madduck: fine
[06:44:27] <aquanight> madduck: for my $i (0 .. $#array)
[06:45:00] <xenu> for (@bar) is definitely special cased not to create a list. but i'm not sure how it works with tied arrays
[06:45:03] <xenu> and i'm not sure about hashes
[06:45:47] <aquanight> madduck: but if you really must
[06:46:01] <aquanight> madduck: keys @array; in void context would work the same
[06:46:14] <dngor> Why have `each ARRAY` if nobody likes when you use it?
[06:46:22] <aquanight> but understand that keys @array is literally exactly (0 .. $#array)
[06:46:44] <aquanight> you know
[06:46:53] <aquanight> I could understand keys/values/each with an array making sense
[06:47:06] <aquanight> if delete $array[4] had a meaningful effect other than just being the same as 'undef'
[06:47:31] *** Joins: kanliot (~anliot@2600:6c5c:7000:500:a4f6:ad95:6edb:bd8d)
[06:47:36] *** Joins: anliot_ (~anliot@2600:6c5c:7000:500:a4f6:ad95:6edb:bd8d)
[06:47:36] <aquanight> I mean you'd have to still have an empty space in the AV
[06:47:41] <timeless> jaggz: any particular reason you tagged me earlier?
[06:47:48] <aquanight> but maybe it's a null pointer instead of SV_undef
[06:47:54] <aquanight> so then keys/each skip over it
[06:48:17] <aquanight> perlbot: sweval my @x = (1..10); delete $x[4]; [ keys @x ]
[06:48:18] <perlbot> aquanight: [0,1,2,3,4,5,6,7,8,9]
[06:48:48] <dngor> aquanight: You should be iterating backwards if you're splicing elements out of an array anyway.
[06:48:58] <aquanight> this isn't the same as splicing
[06:49:24] <aquanight> but it would be largely pointless, keys/each still has to walk the array to see what indexes to skip over, so might as well make perl do it
[06:49:35] <aquanight> s/perl/the $& code/
[06:50:05] <jaggz> timeless
[06:50:13] <timeless> yes?
[06:50:20] <jaggz> oops.. shoot.  that was supposed to be in my scrollback search field :)
[06:50:31] <jaggz> timeless, I think it was just a word I used :)
[06:51:00] <timeless> ah
[06:51:04] <timeless> that happens
[06:51:09] * timeless returns to lurking
[06:51:43] <jaggz> :)
[06:56:59] *** Joins: Manderson_ (~manderson@45.40.80.170)
[06:59:22] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[07:12:59] <genio> If someone's got a free second, I need an idiot check on using GH secrets in Actions: https://github.com/p5-salesforce/WWW-Salesforce/blob/newTests/.github/workflows/macos.yml#L38-L44
[07:13:00] <Paperbot_> Link title(s): [ WWW-Salesforce/macos.yml at newTests · p5-salesforce/WWW-Salesforce · GitHub ]
[07:13:24] <genio> It's not actually seeing the variables in the workflows
[07:14:40] <madduck> literally 8 minutes later, this came in: https://twitter.com/_PatrickSutton/status/1435792272109473793 — timeless, are you stalking me? ;) 
[07:14:41] <Paperbot_> Patrick Sutton 🔺 (@_PatrickSutton) 15m53s ago in reply to @martinkrafft #1435791792243310593: Timeless
[07:17:40] *** Joins: qpq4 (~textual@47.188.117.13)
[07:20:12] <kiwiroy> genio: looks like it is https://github.com/p5-salesforce/WWW-Salesforce/runs/3551428447?check_suite_focus=true#step:7:6
[07:20:13] <Paperbot_> Link title(s): [ update the environment location · p5-salesforce/WWW-Salesforce@5282990  · GitHub ]
[07:21:22] <genio> kiwiroy: That wasn't working before, either. You can tell they're not there because the host isn't showing in the diag here: https://github.com/p5-salesforce/WWW-Salesforce/runs/3551428447?check_suite_focus=true#step:7:97  
[07:21:23] <Paperbot_> Link title(s): [ update the environment location · p5-salesforce/WWW-Salesforce@5282990  · GitHub ]
[07:21:29] <genio> unless I'm missing what you're trying to point out
[07:22:05] <kiwiroy> just looking at the .t files.
[07:24:24] <kiwiroy> So they get filtered by github actions to protect yourself leaking secrets.
[07:24:34] <kiwiroy> the logs that you see there.
[07:25:44] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 250 seconds)
[07:25:48] <genio> I thought I only read that they do that in the workflows themselves, if you print it out in a step or something. 
[07:25:51] <kiwiroy> change  https://github.com/p5-salesforce/WWW-Salesforce/blob/5282990cc15c1104cceacee9227806d9a8511c5a/t/WWW-Salesforce.t#L26 to reverse the string.
[07:25:52] <Paperbot_> Link title(s): [ WWW-Salesforce/WWW-Salesforce.t at 5282990cc15c1104cceacee9227806d9a8511c5a · p5-salesforce/WWW-S... ]
[07:27:36] *** Joins: aspic (~shifty~~~@ppp121-44-103-29.syd-gls-har-bras38.tpg.internode.on.net)
[07:28:21] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[07:29:09] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[07:36:06] *** Joins: __Manderson (~manderson@45.40.80.170)
[07:36:11] <kiwiroy> There are limits to their redaction https://docs.github.com/en/actions/reference/encrypted-secrets?query=#limits-for-secrets but generally it is done https://docs.github.com/en/actions/reference/encrypted-secrets?query=#accessing-your-secrets
[07:36:12] <Paperbot_> Link title(s): [ Encrypted secrets - GitHub Docs ] [ Encrypted secrets - GitHub Docs ]
[07:38:28] <timeless> madduck: heh, no.
[07:39:11] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[07:39:11] *** Quits: Adura (~Adura@user/adura) (Ping timeout: 252 seconds)
[07:39:31] <timeless> genio: if github knows something is a secret, they'll mask it
[07:39:54] <timeless> you can do something like `echo $SFDC_USER | wc -c`
[07:41:11] *** Quits: anliot_ (~anliot@2600:6c5c:7000:500:a4f6:ad95:6edb:bd8d) (Quit: Leaving)
[07:41:11] *** Quits: kanliot (~anliot@2600:6c5c:7000:500:a4f6:ad95:6edb:bd8d) (Quit: Leaving)
[07:42:21] <madduck> echo -n in this case recommended, or you count the final \n, and also: echo $#SFDC_USER
[07:42:40] <madduck> almost like PERL! ;) 
[07:43:22] *** Quits: aspic (~shifty~~~@ppp121-44-103-29.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[07:44:08] *** Joins: aspic (~shifty~~~@ppp121-44-106-103.syd-gls-har-bras38.tpg.internode.on.net)
[07:44:09] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:44:40] <genio> Ugh. Lost network connectivity. Looks like y’all are right and I was just too hung up on the fact that it wasn’t printed in the results and not on the fact that if it actually got that far, the values were present
[07:45:04] <genio> <- idiot
[07:45:34] *** Joins: Manderson_ (~manderson@45.40.80.170)
[07:48:32] *** Quits: __Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[07:55:55] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[08:00:42] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Client Quit)
[08:04:57] *** Joins: krismatrix (~krismatri@38.80.149.51)
[08:17:39] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[08:18:08] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[08:28:44] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:30:55] *** Quits: Martchus (~martchus@2a01:c23:c4f2:1f00:d250:99ff:fe49:3cce) (Ping timeout: 252 seconds)
[08:30:57] *** Joins: Martchus_ (~martchus@dynamic-095-114-124-072.95.114.pool.telefonica.de)
[08:36:15] *** Joins: ueberall (ueberall_l@user/ueberall)
[08:39:04] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[08:40:09] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Ping timeout: 276 seconds)
[08:41:20] *** Quits: randir (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[08:47:56] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 252 seconds)
[08:50:10] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[09:06:38] *** Joins: randir (~randir@93.159.239.42)
[09:11:32] * GumbyPAN CPAN Upload: App-ansifold-1.1101 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-ansifold-1.1101
[09:12:46] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[09:16:49] *** Joins: Manderson (~manderson@45.40.80.170)
[09:18:54] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[09:27:41] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[09:27:42] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Read error: Connection reset by peer)
[09:27:53] *** Quits: perldoc (~perldoc@2603-6080-3108-088d-18fc-1230-0f1a-2f6b.res6.spectrum.com) (Read error: Connection reset by peer)
[09:28:07] *** Quits: kaitlyn (~kaitlyn@user/kaitlyn) (Quit: Ping timeout (120 seconds))
[09:28:20] *** Joins: kaitlyn (~kaitlyn@user/kaitlyn)
[09:28:33] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[09:29:03] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[09:29:34] *** Joins: perldoc (~perldoc@2603-6080-3108-088d-18fc-1230-0f1a-2f6b.res6.spectrum.com)
[09:29:44] *** Joins: R2robot (~R2robot@user/r2robot)
[09:31:55] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:31:55] *** Joins: Manderson_ (~manderson@45.40.80.170)
[09:34:08] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[09:35:00] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:35:57] *** Quits: aspic (~shifty~~~@ppp121-44-106-103.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[09:36:15] *** Joins: aspic (~shifty~~~@ppp121-44-112-199.syd-gls-har-bras39.tpg.internode.on.net)
[09:36:22] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:36:58] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:38:46] *** Quits: elein (~elein@142-254-54-114.dsl.dynamic.fusionbroadband.com) (Ping timeout: 250 seconds)
[09:38:59] *** Joins: gloin_ (~gloin@user/gloin)
[09:39:10] *** Quits: gloin (~gloin@user/gloin) (Ping timeout: 240 seconds)
[09:47:17] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[09:47:55] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[09:48:46] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:49:01] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:51:37] * GumbyPAN CPAN Upload: SNMP-Info-3.78 by OLIVER https://metacpan.org/release/OLIVER/SNMP-Info-3.78
[09:56:48] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:09:15] *** Joins: Manderson (~manderson@45.40.80.170)
[10:12:06] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[10:18:28] *** Joins: Manderson_ (~manderson@45.40.80.170)
[10:20:54] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[10:22:05] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:28:47] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:8ce1:c48d:4442:203d) (Ping timeout: 245 seconds)
[10:34:24] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:34:57] *** Joins: mattil (~mattil@airio.portalify.com)
[10:38:23] *** Joins: Manderson (~manderson@45.40.80.170)
[10:41:13] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[10:42:53] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:45:10] *** Quits: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com) (Ping timeout: 240 seconds)
[10:52:09] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[10:52:49] *** Joins: tobybl (~tobybl@208.193.115.87.dyn.plus.net)
[10:55:14] *** Quits: riceandbeans (~zach@user/riceandbeans) (Ping timeout: 265 seconds)
[10:55:53] *** Joins: riceandbeans (~zach@user/riceandbeans)
[11:03:55] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[11:03:58] *** Joins: horsepatat (~horsepata@212.3.197.253)
[11:04:12] *** Quits: ShorTie (~ShorTie@112.sub-72-108-77.myvzw.com) (Ping timeout: 245 seconds)
[11:05:19] *** Joins: ShorTie (~ShorTie@112.sub-72-108-77.myvzw.com)
[11:07:38] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 260 seconds)
[11:10:28] *** Joins: zyweo (~Svew@user/zyweo)
[11:16:12] *** Quits: aspic (~shifty~~~@ppp121-44-112-199.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[11:18:51] *** Quits: mnemonic (~semeion@user/semeion) (Quit: WeeChat 3.2)
[11:19:24] *** Quits: Manderson (~manderson@45.40.80.170) (Read error: Connection reset by peer)
[11:19:55] *** Joins: Manderson (~manderson@45.40.80.170)
[11:20:01] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:20:48] *** Joins: shlomif (~shlomif@87.68.240.100.adsl.012.net.il)
[11:29:32] *** Quits: ShorTie (~ShorTie@112.sub-72-108-77.myvzw.com) (Ping timeout: 265 seconds)
[11:30:27] *** Joins: ShorTie (~ShorTie@112.sub-72-108-77.myvzw.com)
[11:40:08] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[11:43:15] *** Joins: EvanCarroll (~ecarroll@46.196.88.53)
[11:52:44] *** Quits: Linux77 (~Linux7_7@186.233.182.237) (Ping timeout: 252 seconds)
[11:54:36] *** Joins: Croran_ (~Croran@c-73-118-179-18.hsd1.wa.comcast.net)
[11:55:47] <shlomif> hi all! can anyone help with this cpanm / Dancer2 issue: https://github.com/PerlDancer/Dancer2/issues/1631 ?
[11:55:49] <Paperbot_> Link title(s): [ "cpanm --reinstall Dancer2" fails the tests due to "Can't locate WWW/Form/UrlEncoded.pm in @INC (... ]
[11:55:53] *** Quits: Croran_ (~Croran@c-73-118-179-18.hsd1.wa.comcast.net) (Client Quit)
[11:56:52] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[11:57:13] *** Joins: Linux77 (~Linux7_7@186.233.182.237)
[11:57:18] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[11:58:03] <EvanCarroll> Suonds like they failed to put WWW::Form::UrlEncoded in their MANIFEST
[11:58:11] <EvanCarroll> or rather Makefile
[11:58:58] *** Joins: furrymcgee (~devuan@31.179.186.66)
[11:59:00] <EvanCarroll> do you have WWW/Form/UrlEncoded.pm on your system at all?
[12:00:08] *** Joins: ueberall (ueberall_l@user/ueberall)
[12:00:56] <EvanCarroll> shlomif: https://github.com/PerlDancer/Dancer2/issues/1631
[12:00:56] <Paperbot_> Link title(s): [ "cpanm --reinstall Dancer2" fails the tests due to "Can't locate WWW/Form/UrlEncoded.pm in @INC (... ]
[12:01:02] <EvanCarroll> shlomif: commented on the ticket
[12:05:06] *** Quits: wally53 (~wally53@2601:192:100:1175:a96b:ec3c:1f3f:f023) (Remote host closed the connection)
[12:05:09] <EvanCarroll> Dancer2 is not very active.
[12:05:55] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:09:57] *** Joins: Manderson_ (~manderson@45.40.80.170)
[12:12:16] <shlomif> EvanCarroll: thanks! i presume i don't have it
[12:12:32] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[12:20:19] *** Joins: Manderson (~manderson@45.40.80.170)
[12:22:18] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[12:22:22] *** Joins: NeoCron (~NeoCron@p200300c4cf1c95007f0aa1e4d57a6222.dip0.t-ipconnect.de)
[12:23:29] *** Joins: Croran_ (~Croran@c-73-118-179-18.hsd1.wa.comcast.net)
[12:24:47] <EvanCarroll> if you're just getting started, I would suggest Mojo.
[12:26:53] * GumbyPAN CPAN Upload: App-Netdisco-2.049005 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.049005
[12:28:44] *** Quits: zyweo (~Svew@user/zyweo) (Quit: co co)
[12:31:37] *** Joins: Manderson_ (~manderson@45.40.80.170)
[12:32:07] <shlomif> EvanCarroll: yes. however, the app is already written, and i cannot figure out how  to make the mojo port compatible w Plack::Test: https://github.com/shlomif/app-notifier/commit/8f5a1593148322b772170458ddb7ee0178958520
[12:32:08] <Paperbot_> Link title(s): [ convert-service-to-Mojolicious: doesn't work · shlomif/app-notifier@8f5a159 · GitHub ]
[12:34:26] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[12:43:59] *** Joins: choroba (~E.Choroba@88.146.255.106)
[12:45:12] <EvanCarroll> Not sure what Plack::Test does, but Mojo has it's own self-service testing framework.
[12:45:21] <EvanCarroll> Plack kind of sucks.
[12:45:41] <EvanCarroll> At least for modern stuff.
[12:49:07] *** Joins: fwg (~fwg@user/fwg)
[12:52:14] <shlomif> EvanCarroll: ah, i see your PoV
[12:54:55] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[13:03:04] *** Quits: rewt (~default@user/rewt) (Ping timeout: 252 seconds)
[13:03:49] *** Joins: rewt (~default@user/rewt)
[13:04:27] *** Joins: icedjava37 (~icedjava3@ppp046177149155.access.hol.gr)
[13:11:58] * GumbyPAN CPAN Upload: SReview-0.8.0 by WOUTER https://metacpan.org/release/WOUTER/SReview-0.8.0
[13:12:42] *** Quits: johnjay (~pi@192.142.100.34) (Ping timeout: 260 seconds)
[13:13:40] *** Joins: johnjay (~pi@192.142.100.34)
[13:14:14] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[13:18:44] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[13:23:41] *** Quits: Croran_ (~Croran@c-73-118-179-18.hsd1.wa.comcast.net) (Quit: leaving)
[13:25:25] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[13:30:07] *** Joins: Manderson (~manderson@45.40.80.170)
[13:32:18] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[13:32:29] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:35:07] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 245 seconds)
[13:36:09] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[13:36:40] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[13:36:42] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 245 seconds)
[13:38:00] *** Quits: tobybl (~tobybl@208.193.115.87.dyn.plus.net) (Remote host closed the connection)
[13:38:12] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[13:40:55] *** Joins: tobybl (~tobybl@208.193.115.87.dyn.plus.net)
[13:42:41] *** Quits: Croran (~quassel@2601:601:1880:7780::fd39) (Quit: Croran)
[13:55:27] *** Joins: Manderson_ (~manderson@45.40.80.170)
[13:55:34] *** Joins: Croran (~Croran@c-73-118-179-18.hsd1.wa.comcast.net)
[13:57:26] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[13:59:29] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:59:49] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[14:01:58] <EvanCarroll> shlomif: Plack does not support websockets.
[14:02:04] <EvanCarroll> Which Dancer2 uses.
[14:02:27] <EvanCarroll> So as a foundation for a webframework, it's dated.
[14:02:58] *** Joins: Manderson (~manderson@45.40.80.170)
[14:03:08] <EvanCarroll> I guess you could argue the whole perl ecosystem is a bit dated though, as none of it supports http2/http3 but whatever. at least mojo supports web sockets.
[14:05:26] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[14:08:33] <Botje> is http2 on the backend really prevalent, though?
[14:11:35] <Botje> I wager almost all production systems have a http2 reverse proxy sending regular http1 to its backends.
[14:12:18] <Botje> although you could save a bit of traffic/memory by sending http2 over cleartext
[14:18:26] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Quit: Lost terminal)
[14:22:21] <EvanCarroll> wut
[14:22:23] <EvanCarroll> lol
[14:22:25] <EvanCarroll> clearly not.
[14:25:00] *** Joins: Peppaq (~quassel@2001:470:1f0b:751:9969:cab2:540c:201)
[14:25:07] *** Quits: Peppard (~quassel@2001:470:1f0b:751:f924:bb47:9aec:9c91) (Ping timeout: 245 seconds)
[14:27:06] <xq> not supporting websockets seems like a feature
[14:29:07] <xq> and http2 is not consistently better than plain http, while being significantly more complex
[14:29:07] *** Joins: WinterStar (~IceLight@user/icelight)
[14:30:49] <EvanCarroll> not sure where you're getting your data, I'm going to go with "no"
[14:32:44] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:34:19] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:35:05] *** Joins: csrf (~csrf@user/csrf)
[14:35:07] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[14:40:55] <xq> https://www.nginx.com/blog/7-tips-for-faster-http2-performance/
[14:40:57] <Paperbot_> Link title(s): [ 7 Tips to Improve HTTP2 Performance | NGINX ]
[14:41:36] <xq> 1) Very low RTTs (0–20 ms) – There is virtually no difference between HTTP/1.x, HTTP/2, and HTTPS.
[14:41:46] <xq> 2) High RTTs (300 ms and up) – HTTP/1.x is faster than HTTP/2, which is faster than HTTPS.
[14:42:12] <xq> https://www.nginx.com/wp-content/uploads/2015/10/1stpaint.png
[14:43:28] <EvanCarroll> So you're going to site an article that's over six years old about a benchmark for an experimental technology...
[14:43:42] <xq> as opposed to?
[14:44:44] <EvanCarroll> any of the very detailed papers by cloudflare, or the write ups by hapi/koa/node/haskell/go that actually have along-side benchmarkable modern implementations of http2 and http1.
[14:45:42] <xq> until there are some URLs let's go with "no"
[14:47:11] <EvanCarroll> I mean http1 doesn't support header compression, prioritization and requires parsing text. Arguing that it's not consistantly faster is pretty hard to swallow. It's not perfect, http/3 is better, but I wouldn't shrug it off. There is a reason why it was invented and why every big player is using it.
[14:47:40] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 252 seconds)
[14:47:44] <EvanCarroll> https://www.cloudflare.com/learning/performance/http2-vs-http1.1/
[14:47:44] <Paperbot_> Link title(s): [ HTTP/2 vs. HTTP/1.1: How do they affect web performance? | Cloudflare ]
[14:48:29] <EvanCarroll> https://imagekit.io/demo/http2-vs-http1
[14:48:30] <Paperbot_> Link title(s): [ HTTP/2 vs HTTP/1.1 - Performance Comparison ]
[14:48:37] <EvanCarroll> (that one you can see in your browser)
[14:53:25] *** Joins: Manderson_ (~manderson@45.40.80.170)
[14:55:55] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[15:00:30] *** Quits: horsepatat (~horsepata@212.3.197.253) (Ping timeout: 260 seconds)
[15:01:15] *** Joins: pj (~pj@ghettoforge/pj)
[15:02:26] *** Joins: aspic (~shifty~~~@ppp121-44-112-199.syd-gls-har-bras39.tpg.internode.on.net)
[15:04:07] *** Joins: Manderson (~manderson@45.40.80.170)
[15:06:20] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[15:15:23] *** Joins: Manderson_ (~manderson@45.40.80.170)
[15:16:06] *** Joins: horsepatat (~horsepata@212.3.197.253)
[15:17:46] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[15:21:30] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[15:27:27] *** Joins: Adura (~Adura@user/adura)
[15:29:59] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) (Quit: Leaving...)
[15:41:03] <Botje> EvanCarroll: what did you mean by "clearly not" in reply to me?
[15:41:55] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:41:56] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:42:24] <Altreus> xq: websockets bad?
[15:47:10] <xq> Altreus: complexity bad
[15:52:48] *** Joins: jdltouraine_ (~jdltourai@44.229-131-109.adsl-dyn.isp.belgacom.be)
[15:53:18] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[15:53:56] *** Quits: jdltouraine_ (~jdltourai@44.229-131-109.adsl-dyn.isp.belgacom.be) (Read error: Connection reset by peer)
[15:54:14] <Altreus> that sounds like an attempt to make things simpler than possible
[15:55:03] *** Joins: jdltouraine_ (~jdltourai@44.229-131-109.adsl-dyn.isp.belgacom.be)
[15:55:53] *** Quits: jdltouraine_ (~jdltourai@44.229-131-109.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[15:56:10] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 260 seconds)
[15:56:15] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[15:57:11] *** Quits: randir (~randir@93.159.239.42) (Quit: Leaving...)
[16:00:17] *** Joins: randir (~randir@93.159.239.42)
[16:02:08] *** Joins: fwg (~fwg@user/fwg)
[16:02:37] *** Joins: randir_ (~randir@95-25-59-33.broadband.corbina.ru)
[16:06:05] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 260 seconds)
[16:06:40] *** Quits: Croran (~Croran@c-73-118-179-18.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[16:10:20] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[16:16:18] * GumbyPAN CPAN Upload: AI-Perceptron-Simple-1.03 by ELLEDNERA https://metacpan.org/release/ELLEDNERA/AI-Perceptron-Simple-1.03
[16:16:18] * GumbyPAN CPAN Upload: Data-Properties-1.07 by JV https://metacpan.org/release/JV/Data-Properties-1.07
[16:19:02] *** Joins: Adoi (~Adoi@user/adoi)
[16:19:05] *** Joins: Adois (~Adoi@user/adoi)
[16:20:14] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:21:04] *** Joins: proller (~p@yarmarka-gw.kis.ru)
[16:23:03] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:26:39] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:28:14] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 260 seconds)
[16:28:50] *** Quits: proller (~p@yarmarka-gw.kis.ru) (Ping timeout: 252 seconds)
[16:29:13] *** Joins: proller (~p@2a02:6b8:b081:8804::1:15)
[16:31:12] *** Quits: aspic (~shifty~~~@ppp121-44-112-199.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[16:31:25] <shlomif> EvanCarroll: i see your PoV again
[16:31:57] *** Joins: aspic (~shifty~~~@ppp121-44-106-35.syd-gls-har-bras38.tpg.internode.on.net)
[16:35:14] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[16:38:28] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:39:26] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[16:39:36] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:41:35] *** Joins: pj (~pj@ghettoforge/pj)
[16:44:35] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[16:45:02] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Quit: Lost terminal)
[16:45:20] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[16:45:20] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[16:51:21] * GumbyPAN CPAN Upload: Mojolicious-Plugin-Text-Minify-v0.1.0 by RRWO https://metacpan.org/release/RRWO/Mojolicious-Plugin-Text-Minify-v0.1.0
[16:56:22] * GumbyPAN CPAN Upload: Mojolicious-Plugin-Text-Minify-v0.1.1 by RRWO https://metacpan.org/release/RRWO/Mojolicious-Plugin-Text-Minify-v0.1.1
[16:57:59] *** Quits: horsepatat (~horsepata@212.3.197.253) (Ping timeout: 252 seconds)
[16:59:15] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[17:06:30] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 260 seconds)
[17:10:08] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[17:11:24] * GumbyPAN CPAN Upload: URI-Fast-0.54_01 by JEFFOBER https://metacpan.org/release/JEFFOBER/URI-Fast-0.54_01
[17:12:35] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 260 seconds)
[17:14:37] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[17:18:43] *** Joins: pj (~pj@ghettoforge/pj)
[17:20:01] *** Joins: horsepatat (~horsepata@212.3.197.253)
[17:21:49] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:23:24] *** Quits: horsepatat (~horsepata@212.3.197.253) (Read error: Connection reset by peer)
[17:24:24] *** Quits: aspic (~shifty~~~@ppp121-44-106-35.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:25:04] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:25:09] *** Joins: aspic (~shifty~~~@ppp121-44-102-81.syd-gls-har-bras38.tpg.internode.on.net)
[17:28:35] *** Joins: Croran (~Croran@71.231.214.173)
[17:29:33] *** Joins: locsmif (~none@user/locsmif)
[17:30:11] <locsmif> Hi all. Stupid question, but ... Can someone verify that what I say is visible?
[17:30:53] <locsmif> Nobody responds to my questions any more and I'm wondering if my questions are either too obscure or it's just idlers not responding, or...
[17:31:33] *** Quits: Su-Shee (~Susanne@p4ff4955b.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[17:32:49] <alh> Yes you are visible.
[17:33:12] *** Joins: Su-Shee (~Susanne@p4ff49c7d.dip0.t-ipconnect.de)
[17:34:08] <Altreus> must be too obscure then!
[17:34:24] <alh> I haven't seen a question from you in ages though 
[17:35:04] <shlomif> locsmif: hi
[17:35:50] <shlomif> locsmif: i see what you said
[17:35:58] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:36:25] *** Quits: pflanze (~pflanze@2001:1a88:19e:4500:48e8:b44:69ef:471d) (Ping timeout: 252 seconds)
[17:36:26] * GumbyPAN CPAN Upload: Mojolicious-Plugin-Text-Minify-v0.2.0 by RRWO https://metacpan.org/release/RRWO/Mojolicious-Plugin-Text-Minify-v0.2.0
[17:36:33] <choroba> By replying to the question, we kind of ruined the joke.
[17:36:34] <locsmif> thanks :)
[17:37:04] <locsmif> Yeah I figured that could happen, but then I was gambling on such a joke being impossible to spontaneously coordinate in a large channel :P
[17:37:24] <Altreus> it was definitely a risk using this channel
[17:37:30] <locsmif> It was, sorry
[17:37:44] <locsmif> But this is my favourite channel I guess
[17:37:47] <Altreus> don't apologise; we're the one who ruined the joke
[17:37:51] <Altreus> ones
[17:38:48] *** Quits: Adois (~Adoi@user/adoi) (Ping timeout: 265 seconds)
[17:38:48] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 265 seconds)
[17:42:13] <EvanCarroll> Botje: re: I wager almost all production systems have a http2 reverse proxy sending regular http1 to its backends.
[17:42:13] *** Quits: proller (~p@2a02:6b8:b081:8804::1:15) (Ping timeout: 260 seconds)
[17:42:16] <EvanCarroll> Botje:  I imagine on the basis of CloudFlare alone you'd be right to state that the majority of HTTP2 is done at the very least through a reverse proxy, but certainly there are an asston of http2 frameworks now.
[17:42:54] <EvanCarroll> And a lot of modern development is done on them, and they're in production.
[17:46:27] * GumbyPAN CPAN Upload: Bitcoin-Crypto-1.001 by BRTASTIC https://metacpan.org/release/BRTASTIC/Bitcoin-Crypto-1.001
[17:46:27] * GumbyPAN CPAN Upload: GraphQL-Plugin-Convert-OpenAPI-0.21 by ETJ https://metacpan.org/release/ETJ/GraphQL-Plugin-Convert-OpenAPI-0.21
[17:49:35] <genio> ooof. six hours to fail. https://github.com/p5-salesforce/WWW-Salesforce/runs/3551428490?check_suite_focus=true  I gotta find a way to be nicer to GH Actions
[17:49:36] <Paperbot_> Link title(s): [ update the environment location · p5-salesforce/WWW-Salesforce@5282990  · GitHub ]
[17:51:18] *** Quits: randir_ (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[17:51:28] * GumbyPAN CPAN Upload: Spreadsheet-ReadSXC-0.35 by CORION https://metacpan.org/release/CORION/Spreadsheet-ReadSXC-0.35
[18:02:02] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[18:04:13] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:04:31] <Botje> EvanCarroll: fair enough. I shall s/almost all/a majority of/
[18:06:44] *** Joins: bit4bit (~bit4bit@190.128.123.78)
[18:07:51] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Killed (NickServ (GHOST command used by norkle__)))
[18:10:12] *** Joins: chenxuezhao (~chenxuezh@120.244.238.36)
[18:12:40] *** Joins: tobybl_ (~tobybl@208.193.115.87.dyn.plus.net)
[18:14:38] *** Quits: tobybl (~tobybl@208.193.115.87.dyn.plus.net) (Ping timeout: 260 seconds)
[18:21:12] *** Martchus_ is now known as Martchus
[18:22:10] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[18:22:45] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[18:27:09] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[18:34:24] *** Joins: randir (~randir@95-25-59-33.broadband.corbina.ru)
[18:37:30] *** Quits: Kulrak (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au) (Remote host closed the connection)
[18:37:44] *** Joins: Kulrak (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au)
[18:40:51] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[18:41:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[18:47:29] *** Joins: Manderson (~manderson@45.40.80.170)
[18:48:28] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[18:48:44] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:48:53] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[18:49:22] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[18:50:12] *** Joins: Manderson_ (~manderson@45.40.80.170)
[18:50:37] *** Joins: gryphn (~gryphn@154.9.128.26)
[18:52:25] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[18:57:28] *** Quits: fwg (~fwg@user/fwg) (Quit: so long and thanks for all the fish.)
[18:57:34] *** Quits: Peppaq (~quassel@2001:470:1f0b:751:9969:cab2:540c:201) (Ping timeout: 260 seconds)
[18:59:37] *** Joins: Manderson (~manderson@45.40.80.170)
[18:59:39] *** Joins: Peppard (~quassel@dynamic-095-117-067-232.95.117.pool.telefonica.de)
[19:01:46] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[19:02:25] *** Quits: ShorTie (~ShorTie@112.sub-72-108-77.myvzw.com) (Ping timeout: 265 seconds)
[19:03:22] *** Joins: ShorTie (~ShorTie@112.sub-72-108-77.myvzw.com)
[19:03:52] *** Joins: Manderson_ (~manderson@45.40.80.170)
[19:05:08] *** Joins: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net)
[19:05:58] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[19:07:40] <Grinnz> EvanCarroll: https://github.com/mojolicious/mojo/issues/423 lots of reading if you want to find out why mojo doesn't support it yet
[19:07:42] <Paperbot_> Link title(s): [ HTTP/2 and HTTP/3 · Issue #423 · mojolicious/mojo · GitHub ]
[19:10:02] <leitz> For those who do functional programming, I'm studying the "map" concept and reading "Grokking Simplicity". Does this seem to be going in the right direction?    https://gist.github.com/LeamHall/6004544ab2269ca99fb31000f0cb5414
[19:10:03] <Paperbot_> Link title(s): [ mymap.pl · GitHub ]
[19:10:30] <shlomif> leitz: hi
[19:10:53] <Grinnz> `&$fun ($data)` should be `$fun->($data)`
[19:11:02] *** Joins: tlaxkit (~hexchat@170.253.47.137)
[19:11:36] * GumbyPAN CPAN Upload: Gimp-2.35 by ETJ https://metacpan.org/release/ETJ/Gimp-2.35
[19:12:16] *** Parts: pragma- (~chaos@user/pragmatic-chaos) (Bye!)
[19:12:56] <shlomif> leitz: map generally applies the callback to each element of the list in turn
[19:13:25] <leitz> Grinnz, thanks! The book uses JS for explaining the concepts, this is the first time I've dove into sub references.
[19:14:02] *** Joins: magla (~gelignite@55d42fe3.access.ecotel.net)
[19:14:03] <Grinnz> basically the & sigil should only be used immediately preceded by \ for taking a code reference
[19:14:12] <Grinnz> or in the defined or exists functions, which don't call the sub
[19:14:41] <shlomif> perlbot: sweval: sub add5{return 5 + shift} [map { add5($_) } 200. 900, 31]
[19:14:42] <perlbot> shlomif: Number found where operator expected at (IRC) line 1, near "200. 900" 	(Missing operator before  900?) ERROR: syntax error at (IRC) line 1, near "200. 900" 
[19:14:54] <shlomif> perlbot: sweval: sub add5{return 5 + shift} [map { add5($_) } 200, 900, 31]
[19:14:55] <perlbot> shlomif: [205,905,36]
[19:15:19] *** Joins: Manderson (~manderson@45.40.80.170)
[19:16:33] <Altreus> leitz: yes and no
[19:17:13] <Altreus> leitz: Your idea that something should look like  « my @list = map something, @other_list »   is sound
[19:17:24] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[19:17:36] <Altreus> leitz: your implementation of mymap, however, doesn't really do anything
[19:17:41] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:18:18] <Altreus> leitz: it's currently just "call this with this", which only adds a layer that does nothing
[19:18:24] <peder> it does something, but not map
[19:18:48] <Altreus> leitz: all the *other* functions are doing map operations, so you want to be thinking about what they're all doing similarly
[19:18:59] <Altreus> leitz: hint: it's the loop
[19:19:18] <Altreus> s/all/both/
[19:20:22] <shlomif> Altreus++
[19:21:07] <Altreus> :)
[19:23:12] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[19:23:13] *** Joins: gast0n (~g4570n@user/gast0n)
[19:23:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[19:23:50] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:24:26] * leitz studies some more...
[19:25:53] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[19:26:29] *** Quits: chenxuezhao (~chenxuezh@120.244.238.36) (Ping timeout: 252 seconds)
[19:28:19] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:30:45] <leitz> Altreus, does mymap2.pl look better?   https://gist.github.com/LeamHall/6004544ab2269ca99fb31000f0cb5414
[19:30:45] <Paperbot_> Link title(s): [ mymap.pl · GitHub ]
[19:31:03] *** Joins: YaoNai (~YaoNai@user/yaonai)
[19:32:23] *** Joins: Manderson (~manderson@45.40.80.170)
[19:33:11] <peder> much ;)
[19:35:14] <peder> leitz: you could also use my($fun,@data) = @_, and call it without the \ before @, as in mymap(\&add_5, @list)
[19:35:49] <peder> or use my($fun) = shift; and use @_ insted of @data
[19:35:50] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 260 seconds)
[19:36:09] *** Joins: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[19:36:25] *** Joins: thrig (~thrig@65.113.153.50)
[19:37:14] <peder> though, that last one could potentially modify the original array if $fun modifies it's parmeter
[19:37:44] *** Joins: Adoi (~Adoi@user/adoi)
[19:37:45] *** Joins: mattil (~mattil@87-92-181-207.rev.dnainternet.fi)
[19:39:45] <leitz> peder, yeah. I'm trying to make copies, as that seems to be a thing for FP.  :)
[19:40:08] <leitz> Eventually I'll know more, and be better able to decide which path to take.
[19:40:26] <peder> yes, often better to make copies when unsure ;)
[19:41:28] *** Joins: Manderson_ (~manderson@45.40.80.170)
[19:43:42] * GumbyPAN CPAN Upload: WebService-Postex-0.003 by WATERKIP https://metacpan.org/release/WATERKIP/WebService-Postex-0.003
[19:43:42] *** Quits: mattil (~mattil@87-92-181-207.rev.dnainternet.fi) (Ping timeout: 265 seconds)
[19:43:42] *** Joins: proller (~p@2a02:6b8:b081:a406::1:b)
[19:43:42] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 260 seconds)
[19:43:42] *** Quits: Andrew (~andrew@user/andrewyu) (Ping timeout: 250 seconds)
[19:44:27] *** Joins: AndrewYu (~andrew@user/andrewyu)
[19:45:28] *** Quits: tobybl_ (~tobybl@208.193.115.87.dyn.plus.net) (Quit: Leaving...)
[19:47:16] *** Joins: tobybl (~tobybl@208.193.115.87.dyn.plus.net)
[19:49:47] <Altreus> leitz: nice, that's the exact way map works!
[19:49:52] <Altreus> (in principle)
[19:50:45] <Altreus> peder is right that a way to protect yourself from side-effects is valuable
[19:50:56] <Altreus> perl itself doesn't give you that protection though
[19:51:26] <Altreus> observe that with line 22, your $fun could return zero values, and thus your output list could be shorter than your input list
[19:51:34] <Altreus> It could also return multiple!
[19:51:41] <Altreus> This is also true of perl's map
[19:52:41] <leitz> The book I'm reading breaks the concept into "map", "filter", and "reduce". I think Perl's map does all three.
[19:52:56] *** Quits: locsmif (~none@user/locsmif) (Remote host closed the connection)
[19:53:24] <leitz> In this case, the "map" returns a list the same size as the original.
[19:53:29] <peder> not sure what reduce really does, but i guess "filer" would be a bit like perls grep
[19:53:37] <peder> *"filter"
[19:53:43] <Altreus> perl has no core reduce
[19:53:46] <thrig> map can also grep
[19:53:48] <choroba> See List::Util for reduce
[19:53:57] <Altreus> but yes, map can filter, but so does grep
[19:55:45] <Altreus> by core reduce I mean at the same level as map, not as in core modules
[19:56:09] <leitz> From the book, "reduce() accumulates a value while iterating over an array."  So my $total = reduce(1,2,3,4);, "$total" would be 10.
[19:56:12] <leitz> IIUC.
[19:56:24] <peder> ah, reduce as in reduce(+, 1, 2, 3, 4, ...) => 1+2+3+4+...
[19:56:33] <Altreus> that's right
[19:56:34] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 265 seconds)
[19:57:17] <peder> i'm crazy and does that one with eval and join ;)
[19:57:22] <leitz> Sounds like. I've used map and grep before, but didn't really understand them. More "keyboard monkey and Perl book" than coder.
[19:58:37] <peder> grep is a bit like map, just return the inputs to the function if the function returns true
[19:59:21] <peder> like in grep { $_ > 5 } 1..10 gives you 6..10
[20:00:27] <peder> a bit easier to understand than writing it with map, as in map { $_ > 5 ? $_ : () } 1..10
[20:00:41] <Grinnz> sweval: use List::Util 'reduce'; reduce { $a + $b } 1, 2, 3, 4
[20:00:43] <perlbot> Grinnz: 10
[20:01:10] *** Quits: proller (~p@2a02:6b8:b081:a406::1:b) (Ping timeout: 260 seconds)
[20:01:17] <peder> sweval: map { $_ > 5 ? $_ : () } 1..10
[20:01:18] <perlbot> peder: 5
[20:01:21] <Grinnz> peder: with a very few exceptions, string eval is an indication you're unnecessarily introducing vulnerabilities
[20:01:59] <peder> Grinnz: oh yes :)  You should be extremely aware of what you give to eval ;)
[20:02:17] <Grinnz> more, you should ask what you can do instead of using eval :P
[20:02:29] *** Joins: chenxuezhao (~chenxuezh@120.244.238.36)
[20:02:31] <Altreus> they did say "I'm crazy"
[20:03:22] <Grinnz> leitz: reduce isn't inherently summing, that's just one application of it, the List::Util docs say more about it
[20:03:43] <Grinnz> leitz: it applies some arbitrary operation to return a single result, and does that again for each successive item
[20:03:54] <LeoNerd> See also this one, if you're on a modern-ish (post 5.16) perl:  https://metacpan.org/pod/List::Keywords#reduce
[20:03:54] <Paperbot_> Link title(s): [ List::Keywords - a selection of list utility keywords - metacpan.org ]
[20:04:00] <LeoNerd> It's faster, just generally better
[20:04:27] <choroba> e.g. you can emulate join "" with reduce { $a . $b }
[20:04:29] <Grinnz> leitz: in some ways you could see reduce as a scalar version of map
[20:05:01] *** Quits: jdltouraine (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 252 seconds)
[20:05:05] <Grinnz> instead of ultimately returning a new list, it ultimately returns one value
[20:05:30] <leitz> Grinnz, understood. reduce returns a single value after iteration. Probably better than saying it's just an accumulator.  :)
[20:05:55] *** Quits: icedjava37 (~icedjava3@ppp046177149155.access.hol.gr) (Quit: Catch you later =))
[20:06:03] <choroba> accumulator is just a shorter term for the same thing
[20:06:39] <Grinnz> if you know the technical definition of it already, sure :P
[20:07:11] *** Quits: chenxuezhao (~chenxuezh@120.244.238.36) (Ping timeout: 265 seconds)
[20:08:04] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:2593:695d:ffd5:76a0)
[20:09:13] <leitz> Well, this morning I started with a "read about map", and now I are done it. It's a good day.
[20:09:53] <Altreus> accumulator is a shorter word for reduce?
[20:10:22] <thrig> it appears sooner in the dictionary so takes less time to find
[20:10:58] <Altreus> ah, shorter according to cmp
[20:10:59] <LeoNerd> reduce is really just  my $accum = shift @list; $accum = func($accum, $_) for @list; return $accum;
[20:11:09] <Grinnz> Altreus: shorter than the description of what reduce does
[20:11:40] <Altreus> it accumulates!
[20:11:42] <Altreus> yes you're right
[20:11:56] <huf> reduce is what you do to fortifications
[20:12:17] <thrig> and the sauce
[20:13:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[20:13:38] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[20:14:29] *** Quits: gce108 (~gce@user/gce108) (Remote host closed the connection)
[20:15:01] *** Joins: gce108_ (~gce@64-250-5-223.gvec.net)
[20:15:29] *** Quits: johnjay (~pi@192.142.100.34) (Read error: Connection reset by peer)
[20:15:44] <leitz> And at the salad bar, hopefully.
[20:15:55] <leitz> Did you hear about the food fight in culinary class?
[20:16:08] <leitz> Thyme flies when you're having fun.
[20:16:29] <huf> no war but class war
[20:16:31] *** Joins: amnesiac (~amnesiac@2601:646:4104:29b0:f352:e42f:d32:a7ca)
[20:20:23] *** Joins: johnjay (~pi@192.142.100.34)
[20:21:15] *** Joins: chenxuezhao (~chenxuezh@120.244.238.36)
[20:25:43] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[20:25:46] *** Quits: chenxuezhao (~chenxuezh@120.244.238.36) (Ping timeout: 260 seconds)
[20:26:26] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 252 seconds)
[20:26:46] *** Joins: proller (~p@2a02:6b8:b081:a408::1:22)
[20:33:52] *** Quits: aspic (~shifty~~~@ppp121-44-102-81.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[20:34:49] *** Joins: aspic (~shifty~~~@ppp121-44-117-230.syd-gls-har-bras39.tpg.internode.on.net)
[20:34:58] *** Joins: txtsd (~txtsd@user/txtsd)
[20:40:30] <Altreus> Fruit flies like a banana
[20:40:50] *** Quits: proller (~p@2a02:6b8:b081:a408::1:22) (Ping timeout: 260 seconds)
[20:41:44] * GumbyPAN CPAN Upload: Path-Iterator-Rule-1.015 by DAGOLDEN https://metacpan.org/release/DAGOLDEN/Path-Iterator-Rule-1.015
[20:41:49] <thrig> pretty sure banana has more "n" in it
[20:42:29] <Altreus> actually it's a better source of K
[21:04:02] *** Quits: Su-Shee (~Susanne@p4ff49c7d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:05:40] *** Joins: Su-Shee (~Susanne@p4ffc7fca.dip0.t-ipconnect.de)
[21:07:17] *** Joins: diskin (~diskin@87.117.50.121)
[21:08:37] *** Joins: Adoi (~Adoi@user/adoi)
[21:09:10] *** Quits: gggpkm (~gggpkm@111-251-126-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[21:15:05] *** Joins: fstd (~fstd@xdsl-78-34-124-42.nc.de)
[21:15:20] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 265 seconds)
[21:15:50] *** Quits: fstd (~fstd@xdsl-78-34-124-42.nc.de) (Remote host closed the connection)
[21:23:15] *** Joins: fstd (~fstd@xdsl-78-34-124-42.nc.de)
[21:28:36] *** Quits: tobybl (~tobybl@208.193.115.87.dyn.plus.net) (Remote host closed the connection)
[21:33:26] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 260 seconds)
[21:38:59] *** Joins: Martchus_ (~martchus@dynamic-077-002-051-192.77.2.pool.telefonica.de)
[21:39:58] *** Quits: fstd (~fstd@xdsl-78-34-124-42.nc.de) (Ping timeout: 260 seconds)
[21:40:08] *** Quits: Martchus (~martchus@dynamic-095-114-124-072.95.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[21:46:09] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[21:46:30] *** Joins: pj (~pj@ghettoforge/pj)
[21:48:45] *** Joins: Manderson (~manderson@45.40.80.170)
[21:50:54] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[21:51:06] *** Quits: Manderson_ (~manderson@45.40.80.170) (Ping timeout: 265 seconds)
[21:53:42] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[21:53:42] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[21:54:45] *** Joins: Manderson_ (~manderson@45.40.80.170)
[21:54:50] *** Quits: pizdets_ (~pizdets@183.182.115.101) (Ping timeout: 250 seconds)
[21:55:12] *** Joins: pizdets (~pizdets@183.182.111.101)
[21:55:32] *** Quits: Manderson (~manderson@45.40.80.170) (Ping timeout: 252 seconds)
[21:56:34] *** Quits: lucs (~lucs@user/lucs) (Ping timeout: 240 seconds)
[21:57:46] *** Joins: lucs (~lucs@user/lucs)
[21:59:19] *** Joins: fstd (~fstd@xdsl-87-79-158-186.nc.de)
[22:01:02] *** Joins: semeion (~semeion@user/semeion)
[22:02:46] *** Quits: fstd (~fstd@xdsl-87-79-158-186.nc.de) (Remote host closed the connection)
[22:03:11] *** Joins: fstd (~fstd@xdsl-87-79-158-186.nc.de)
[22:09:19] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[22:09:34] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:10:05] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:10:16] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Client Quit)
[22:10:35] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:13:21] *** Joins: anthk_ (~anthk_@92.176.105.30)
[22:13:44] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[22:14:41] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[22:15:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[22:15:55] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[22:20:28] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[22:28:13] *** Joins: seand (~seand@69.54.142.196)
[22:33:37] *** Quits: shlomif (~shlomif@87.68.240.100.adsl.012.net.il) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[22:36:55] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 260 seconds)
[22:36:58] *** Quits: buZz (~buzz@sky.thebigblue.tk) (Ping timeout: 240 seconds)
[22:37:21] *** Quits: ominionx (~ominionx@6.sub-174-250-40.myvzw.com) (Remote host closed the connection)
[22:37:44] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[22:37:52] <vanfanel64> Inspired by someone running perlbot code showing floats, double, and I think long double representations the other day, I wonder, why are those types still using only 4 or so bytes for float, 8 or so for double, and 12 or 16 or so for long double (and if I am not mistaken, of those 12 or 16, only 10 is used and the rest is padding) ? Why not something like simply 8 or so bytes for the integer part, and another 8 or so for the faction part?
[22:38:22] *** Joins: WinterStar (~IceLight@user/icelight)
[22:39:36] <vanfanel64> The integer part could handle the signed-ness like a regular int/long type, and fraction part could reserve a bit or two for handling decimals that go on infinitely, like 1/3, etc. Or something like that.
[22:40:08] <vanfanel64> Is CPU float math what has been keeping everyone using the same old types that have been around since the 90s or so?
[22:42:17] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[22:43:15] <vanfanel64> With something like I wrote above, it would be handled with integer math, taking account take and give on the integer side as the fraction side changes (like 2.8 + 0.4 -> fraction side incremented by to two, integer side incremented by one.) I would imagine reserved bits on the fraction part or so being for the exponent.
[22:43:17] *** Joins: ominionx (~ominionx@173-25-110-118.client.mchsi.com)
[22:44:28] <vanfanel64> Or just maybe treating is as a left-justified number. So faction part being 1234, would be interpreted as .1234 when combined with the integer part.
[22:44:58] <vanfanel64> In  fact I seem to remember some math libraries doing something like this. Maybe Math::BigFloat does that?
[22:45:25] <huf> if we're going to actually do something about this, i'd rather have primitives that can keep track of their error
[22:45:35] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[22:45:35] <vanfanel64> That would be nice
[22:46:19] <vanfanel64> I guess what really baffles me is why the bigest float types in common computing is still stuck as 80-bits
[22:46:35] <huf> probably because nobody really cares
[22:47:10] <vanfanel64> I would think people working with 3D models and games would care if they could have a lot more precision than a measily 10 bytes
[22:47:16] <huf> 80bits is enough to hide buggy implementations of money for example
[22:47:17] <huf> for the most part
[22:47:18] <huf> :D
[22:47:34] <vanfanel64> Has not thought about that aspect to be honest
[22:48:26] <vanfanel64> When it comes to computers, money always has a way to win over, errrm, logic
[22:49:01] *** Joins: chenxuezhao (~chenxuezh@120.244.238.36)
[22:49:27] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Remote host closed the connection)
[22:52:02] *** Quits: Manderson_ (~manderson@45.40.80.170) (Remote host closed the connection)
[22:52:14] *** Joins: Manderson_ (~manderson@45.40.80.170)
[22:54:34] *** Quits: chenxuezhao (~chenxuezh@120.244.238.36) (Quit: Leaving...)
[22:56:28] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 252 seconds)
[22:58:10] *** Joins: semeion (~semeion@user/semeion)
[22:59:07] *** Joins: wilk (~wilk@afpm148.neoplus.adsl.tpnet.pl)
[22:59:07] *** Quits: wilk (~wilk@afpm148.neoplus.adsl.tpnet.pl) (Changing host)
[22:59:07] *** Joins: wilk (~wilk@user/wilk)
[23:01:41] *** Joins: buZz (~buzz@sky.thebigblue.tk)
[23:03:54] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[23:04:39] <xenu> floats trade precision for flexibility and small size, 8-byte double can represent numbers from ~-(2^1023) to 2^1023, compared to +/- ~2^63 in case of integers
[23:05:14] <xenu> also the systems you're describing were invented decades *before* floats, floats are a relatively new invention
[23:06:25] <simcop2387> well ieee754 floats anyway
[23:09:17] <xenu> i should've said 'thousands of years' because fixed-point is so obvious people were using it on paper
[23:10:01] <xenu> with abacuses or something
[23:10:10] <simcop2387> vanfanel64: surprisingly most things don't ever need more than the 64bit doubles, or the 80bit x87 fpu sizes.  even for physics simulations, it's because the sizes are just nuts when you think about them.  quads are basically the end for 99.999999% of real world problems
[23:12:03] <xenu> in machine learning they're using minifloats, 24-, 16- or even 8-bit
[23:12:05] <simcop2387> with a quad you have enough precision to do something like every transaction on earth, doing currency exchanges, down to the millionth or billionth of a cent and not lose any meaningful precision due to rounding.
[23:13:04] <simcop2387> yea and those are different not for rounding really but for speed in hardware imolementation.  since they need to do so many
[23:19:30] *** Joins: mmohammadi9812 (~Mohammad@ip232.ip-51-222-214.net)
[23:20:33] <vanfanel64> simcop2387, ok, I understand, but why then do Math::BigFloat and other libraries exist?
[23:23:07] *** Joins: pizdets_ (~pizdets@183.182.115.101)
[23:23:14] <Grinnz> Math::BigFloat can represent 0.1 precisely, binary floats cannot
[23:23:32] *** Quits: pizdets (~pizdets@183.182.111.101) (Ping timeout: 252 seconds)
[23:23:46] <simcop2387> because sometimes it's easier to go to that precision adhoc and only pay the cost where you need it.  and if you pay it then it might as well be good.  along with what grinnz said.  different bases
[23:24:18] <Grinnz> Math::BigRat is even better for simple stuff like that though, and can represent 1/3 precisely where none of hte other options can
[23:24:43] <Grinnz> just gotta not be tied to decimal output to use it
[23:30:10] <gordonfish> Grinnz: There is also https://metacpan.org/pod/Number::Fraction
[23:30:10] <Paperbot_> Link title(s): [ Number::Fraction - Perl extension to model fractions - metacpan.org ]
[23:32:19] <vanfanel64> Wait, why is it so hard to represent one decimal digit with binary floats? I would have thought one place wouldn't require much precision
[23:35:19] <gordonfish> sweval: my $f = 'f'; my $p = pack $f, 0.1; [ unpack($f => $p), join ' ', map uc, unpack '(H2)*', $p ];
[23:35:20] <perlbot> gordonfish: ["0.100000001490116","CD CC CC 3D"]
[23:35:33] <gordonfish> sweval: my $f = 'd'; my $p = pack $f, 0.1; [ unpack($f => $p), join ' ', map uc, unpack '(H2)*', $p ];
[23:35:34] <perlbot> gordonfish: ["0.1","9A 99 99 99 99 99 B9 3F"]
[23:35:46] <gordonfish> sweval: my $f = 'D'; my $p = pack $f, 0.1; [ unpack($f => $p), join ' ', map uc, unpack '(H2)*', $p ];
[23:35:47] <perlbot> gordonfish: ["0.1","00 D0 CC CC CC CC CC CC FB 3F 00 00 00 00 00 00"]
[23:35:56] <huf> infinitely repeating decimals are hard to store in finite space
[23:35:59] <Grinnz> vanfanel64: it's not about the place but the fact that 1/10 cannot be represented perfectly in binary
[23:36:00] <huf> well, thingimals
[23:36:12] <Grinnz> vanfanel64: or more specifically, 1/5
[23:36:35] <gordonfish> simcop2387: I see perlbot is back to normal. What was with all the 'free(): invalid pointer' and OOM! errors? Contaminated memory?
[23:37:04] <Grinnz> vanfanel64: trying to represent 1/3 as 0.3333333333 is analogous
[23:37:35] *** semeion is now known as mnemonic
[23:37:50] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Ping timeout: 252 seconds)
[23:41:26] *** Quits: mmohammadi9812 (~Mohammad@ip232.ip-51-222-214.net) (Killed (NickServ (GHOST command used by mohammadi9812m!~Mohammad@2.178.201.78)))
[23:41:52] *** Joins: mmohammadi9812 (~Mohammad@2.178.201.78)
[23:42:03] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000084 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000084
[23:46:27] *** Quits: aspic (~shifty~~~@ppp121-44-117-230.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[23:48:02] <gordonfish> basheval: c 'printf("%g", 1.0/5.0);'
[23:48:03] <perlbot> gordonfish: 0.2
[23:48:29] <gordonfish> basheval: c 'printf("%g", 0.1);'
[23:48:30] <perlbot> gordonfish: 0.1
[23:53:19] <huf> c?
[23:53:41] <huf> oh, c.
[23:58:50] <xq> simcop2387: what other compilers does basheval  have?
[23:59:58] *** Quits: seand (~seand@69.54.142.196) (Ping timeout: 260 seconds)
