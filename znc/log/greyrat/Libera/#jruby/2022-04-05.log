[00:24:41] <headius> good afternoon
[00:42:09] <headius> Gaurish Sharma: I am in the office now and looking at your issue
[01:01:00] <GaurishSharma[m]> Thank you!
[01:02:49] <headius> Gaurish Sharma: I just added a comment... I can't get JDBC to work in any case without having the jar file on the command line... just requiring it does not work
[01:03:01] <headius> do you have any environment variable that might be causing the driver to be loaded at startup?
[01:03:18] <headius> I will add some suggestions for further investigation on the issue
[01:08:11] <headius> enebo: do you remember any tricks for getting jdbc drivers to work with a simple require? We have not had someone go directly at the JDBC APIs in a while
[01:08:51] <headius> Gaurish Sharma: Another option for you would be to use a Ruby database API like Sequel rather than using JDBC directly, since they will take care of loading the driver appropriately.
[01:36:09] *** Joins: demon36[m] (~demon36ma@2001:470:69fc:105::dc32)
[01:36:26] <headius> demon36: I am trying to figure out when the linking of the `native` method happens
[01:37:02] <headius> if it is lazy then we can add a new function and only use it when it works
[01:37:26] <headius> if it causes the whole class to fail to load then we need a separate class as I described in chat
[01:38:04] <headius> recently I did add something to the native binary (special varargs handling from newer libffi) but I was able to pack it into an existing API as bit flags
[01:38:27] <demon36[m]> so u avoided having to create new builds ?
[01:38:46] <headius> for that case, yes, because no new functions were added
[01:39:15] <demon36[m]> ah
[01:39:39] <demon36[m]> dropping prebuilt binaries from the release is not an option right ?
[01:40:13] <headius> not really... users could build their own but for us to work out of the box we need to ship a binary for each supported platform
[01:40:38] <headius> there's been work to get qemu/docker set up to do all platform builds but not to automate that completely
[01:40:44] <headius> and that only supports linux on those platforms
[01:40:59] <demon36[m]> i remember u telling me that
[01:41:07] <headius> so until we have a solution that can build every platform we need to be able to incrementally add things
[01:41:15] <demon36[m]> its not really a simple thing
[01:41:22] <headius> yeah
[01:41:36] <headius> in the past we have just had users rebuild for us but it is not reliable
[01:41:49] <headius> I would say rebase your PR and we can see if it fails fast or slow
[01:42:01] <headius> if it fails slow we can work around the old binaries and fall back to old logic
[01:42:02] <demon36[m]> will, ofc you have more knowledge about who exactly uses the library, but I would suggest dropping platforms that the team does not have access too
[01:42:10] <demon36[m]> so that we can liberate the jffi library
[01:42:23] <headius> for 2.0 that might be the right option
[01:42:33] <headius> and any new platform would need someone to contribute a way to build it automatically
[01:42:41] <demon36[m]> yes
[01:42:59] <demon36[m]> so, rebasing itself is not a big deal, but what will happen next ?
[01:43:23] <headius> it might also make sense to publish the native platforms in separate maven artifacts so you can just pull the platform you need, and if it is not available you see it right away
[01:43:47] <headius> so after you rebase we will see whether we can load Foreign without error if that native method is not available
[01:44:08] <headius> if we can load Foreign and it only fails when we try to call those new functions, then we can just fall back at that point
[01:44:16] <headius> you PR is pretty small so it is a good test
[01:45:09] <demon36[m]> playing on that level with maven is not sth i can help with sadly
[01:45:58] <demon36[m]> yes but again im disliking that optional fallback method
[01:46:12] <demon36[m]> thoughts from anyone ?
[01:46:33] <headius> others may chime in different times of day
[01:46:46] <headius> let's just take it a step at a time and see how it behaves after a rebase
[01:47:10] <demon36[m]> ok
[01:47:54] <headius> I guess I would ask you to consider whether it is worth waiting until we can fix the build problem to get this feature... or if it is better to get the feature in place with fallbacks for now
[01:49:24] <demon36[m]> so jffi's master does not build ?
[02:25:41] <headius> I just mean the problem building the native binary for all platforms
[02:25:58] <demon36[m]> yea
[02:26:42] <demon36[m]> feeling like doing the fallback method now could be a waste
[03:09:13] <headius> Then we would need to tackle the 2.0 library building and loading first
[03:09:42] <headius> We need and want that to happen but that's obviously more work
[04:31:42] <demon36[m]> so what's the plan?
[04:32:07] <demon36[m]> establish the automated cross compile environment ?
[06:22:03] <headius> I guess so!
[13:36:38] <demon36[m]> it appears github has action for linux, windows and mac, aren't these enough for 2.0
[15:32:11] <headius> None of them are arm64 so that's one issue
