[00:00:06] <Bike> c++ exceptions are basically slow by design (as they are in practice implemented), so, yeah
[00:00:43] <shka> mmm
[00:01:00] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[00:01:24] <shka> Bike: maybe you are bored and want to explain how c++ exceptions implementation is different from exceptions in lisp?
[00:01:29] <shka> ;-)
[00:02:11] <shka> if not, that's fine
[00:03:16] <Bike> lisp implementations usually cons a bit on the stack to indicate the presence of exit points and cleanup blocks to the unwinder
[00:04:00] <Bike> C++ implementations instead record information about exit points and cleanup blocks in the executable file
[00:05:00] <Bike> the good part of that is that it means no consing whatsoever. the bad part is that getting that information becomes orders of magnitude slower
[00:05:11] <shka> this is because C++ follows the "0 overhead compared to C" approach?
[00:05:35] <Bike> it's "zero-cost exception handling", yeah. i don't know if that's conceived relative to C or anything
[00:06:28] <shka> iirc the running gag in C++ community is that C++ exceptions are 0 cost, unless you actually want to use it
[00:06:46] <White_Flame> I always balk at that description.  The handling is very expensive.  It's when exceptions aren't fired/handled that it's zero cost
[00:07:04] <shka> White_Flame: yeah, that's why it is funny :D
[00:07:18] <shka> Bike: thanks for explanation, much appreciated!
[00:07:26] <White_Flame> (parallel typing plus lag here :) )
[00:07:45] <Bike> "C++ exceptions are 0 cost unless you actually want to use them" is exactly right
[00:07:59] <Bike> it's very, very slow. we spent months in clasp trying to work around it
[00:08:27] <Bike> it even screws up parallelism, since the unwinder might have to walk loaded shared objects to find the code, and that's lock protected
[00:08:39] <shka> there should be other such statements in C++
[00:08:41] <shka> like
[00:09:00] <shka> "C++ programs compile very quickly, unless you try to actually compile"
[00:09:04] <Bike> and the only intelligible advice we got from C++ people was "don't throw exceptions"
[00:09:16] <shka> yeah, they are like that sadly
[00:09:36] <shka> disabling exceptions is actually pretty common approach in the C++ land
[00:09:47] <Bike> or "throw less exceptions", which is pretty much what we're doing, because we can't make C++ faster
[00:10:00] <jcowan> Given that most actual problems in C++ code don't throw exceptions but are just UB, there is a point to that.
[00:10:18] <shka> i am not sure if this is actually true
[00:10:27] <Bike> we have it set up to use setjmp/longjmp instead which we can, which works much faster, but probably isn't supported by wasm
[00:10:29] <shka> it may be true for performance critical stuff
[00:10:34] <Bike> (i mean, neither are exceptions, yet, as far as i understand)
[00:11:14] <White_Flame> every C++ project always has an exact subset of the language that they agree to use
[00:11:17] <jcowan> Also, it is false that exceptions are zero-cost, because every one of them bloats your code, which squeezes more out of cache
[00:11:47] <White_Flame> It's almost architecturally impossible to actually use all of C++ in one codebase
[00:12:04] <shka> yeah, C++ features are simply mutually incompatible
[00:12:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:12:30] <shka> not strictly i guess, but in practice
[00:13:11] <lotuseater> shka: sounds like bad design, again
[00:13:20] <Bike> jcowan: yeah, that's true. we haven't really noticed since we do actually use exceptions and that's so much worse :/
[00:13:21] <shka> i would argue that it is
[00:13:59] <shka> C++ with all the templates stuff can become really, really, really good example of code bloat anyway
[00:14:07] *** Quits: cage (~cage@dynamic-adsl-78-15-41-207.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:14:42] <lotuseater> or not just shooting easily in the foot like with C but instead rip of the whole leg at once
[00:15:18] <shka> shooting in the foot, but with grenade launcher
[00:15:31] <lotuseater> :D
[00:15:39] <White_Flame> #commonc++opinions
[00:16:19] <copec> I like objects
[00:17:10] <lotuseater> eatable objects
[00:19:33] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:25:59] <copec> Bike: It seems like it would have almost been easier to make a binary translator for Dr Meister to suck his C++ libraries into a CL image rather then to suck CL into C++
[00:26:15] <copec> but, clasp is super cool
[00:26:24] <shka> if that would be even possible...
[00:26:38] <shka> templates, templates everywhere
[00:27:21] <copec> Someone has to file those taxes
[00:28:25] <copec> I come from an aspect of someone who has used dtrace fairly often and has the debug symbols
[00:29:17] <copec> and then I see stuff like high level emulation binary translation for video games, and wonder if you could parse and translate a binary library into a usable lisp library
[00:29:26] <copec> licensing aside
[00:29:59] <shka> i mean, perhaps
[00:30:25] <shka> but the thing is, C++ libraries currently in use really need that code generation templates offer
[00:30:38] <shka> in fact a lot of scientific libraries are just headers
[00:31:09] <shka> so there is no SO file that you can simply load
[00:31:26] <copec> That makes sense
[00:31:31] <shka> i think that this is why clasp even is what it is
[00:31:38] <shka> Bike: correct me please if i am wrong
[00:32:07] <Bike> there are certainly plenty of header only libraries
[00:32:19] <Bike> another thing is a desire to be able to actually use C++ object definitions
[00:32:33] <shka> hm
[00:32:34] <Bike> e.g. in clasp you can define lisp classes that have a C++ class as a superclass
[00:32:49] <Bike> so they work normally with slot-value and stuff, but you can also sling them at C++ functions expecting the superclass
[00:32:53] <shka> you could introspect c++ objects using inspector?
[00:33:06] <Bike> Inspector?
[00:33:31] <shka> like a slime inspector
[00:33:39] <shka> or the one beach made
[00:33:40] *** Quits: silasfox (~user@xdsl-84-44-182-29.nc.de) (Ping timeout: 240 seconds)
[00:34:25] <Bike> well, all i mean is that information isn't in C++ object files so much
[00:34:27] <shka> regardless, yeah, ability to simply use C++ as it was CL is appealing
[00:36:55] <shka> Bike: how do you feel about the progress with clasp in the 2021?
[00:37:30] <Bike> how do i feel about it? well, i'm hoping to soup up the compiler, mainly. nothing directly c++ related
[00:38:15] <shka> well, i meant, do you think you progress slower or faster then you have anticipated?
[00:38:19] <copec> How is the overall clasp performance these days?
[00:38:31] <copec> In terms of program execution
[00:39:06] <shka> haha
[00:39:13] <shka> this turns into Q&A session
[00:39:23] <shka> Bike: sorry about that
[00:39:33] <Bike> it's fine
[00:39:45] <Bike> well, basically making a good optimizing compiler turns out to be hard
[00:39:47] <copec> You guys should host an online clasp symposium
[00:39:53] <yitzi> As a user of clasp the performance has improved dramatically over the last year and half. But as Bike said there are certain things you have to be careful about like signals.
[00:40:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:41:02] <shka> yitzi: wow, do you use clasp for something interesting?
[00:41:36] <yitzi> I work with drmeister and Bike sometimes on the cando stuff.
[00:41:52] <shka> oh, cool
[00:42:08] <yitzi> Mostly on the JupyterLab side of things.
[00:42:19] <copec> I'd love to see clasp tied into unreal engine for all sorts of direct parametric generation fun
[00:43:22] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:44:02] <copec> Someone that knows what they are doing should get on that
[00:45:30] <copec> drmeister needs to view them molecules in VR
[00:48:49] <yitzi> drmeister uses ngl via ngl-clj generally for 3d. ngl-clj is a lisp widget for ngl (3d molecules) that I wrote for juyter lab.
[00:50:57] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:54:18] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 260 seconds)
[00:57:34] *** Quits: gaqwas (~john@dynamic-077-002-107-064.77.2.pool.telefonica.de) (Ping timeout: 260 seconds)
[01:02:57] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[01:10:09] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:15:46] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:18:13] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[01:26:39] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[01:26:40] *** Quits: vats (~vats@103.70.83.191) (Ping timeout: 252 seconds)
[01:32:42] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[01:33:56] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:40:28] *** Joins: Oladon (~olad@98.43.81.226)
[01:46:30] <jcowan> One reason langs with a C FFI rarely have a C++ FFI are header-only libs (there are many others, from overloading to exceptions themselves
[01:47:33] *** Joins: nature (~nature@mail.blazebone.com)
[01:50:27] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:51:53] *** Joins: Steeve (~steve@user/steeve)
[01:55:39] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:55:50] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 268 seconds)
[01:56:36] <mfiano> C++ can't even interface with itself :)
[01:58:38] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:06:02] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:25:33] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:32:03] *** Quits: frgo (~frgo@p200300deef0cee0098fe35624283c586.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:32:30] *** Joins: frgo (~frgo@p200300deef0cee002cc65253b45c2e0a.dip0.t-ipconnect.de)
[02:32:40] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[02:35:10] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[02:39:16] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[02:40:08] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-102A-static.midco.net)
[02:40:15] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:42:57] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1023-static.midco.net) (Ping timeout: 245 seconds)
[02:44:48] *** Quits: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-102A-static.midco.net) (Remote host closed the connection)
[02:48:11] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:50:28] *** Joins: keir (~keir@user/keir)
[02:51:52] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102A-static.midco.net)
[02:55:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:56:48] <lotuseater> mfiano: So kind of itself younger sibling "No, I don't want to play with them!" :D
[03:01:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:01:53] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[03:02:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:02:28] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[03:04:36] *** Quits: pve (~pve@87-93-229-225.bb.dnainternet.fi) (Quit: leaving)
[03:12:17] *** Joins: EdLin (~quassel@user/edlin)
[03:24:21] *** Quits: VincentVega (~user@212.241.25.220) (Ping timeout: 265 seconds)
[03:27:18] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:34:06] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[03:35:44] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[03:45:32] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[03:45:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:47:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:56:24] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:56:33] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:59:20] *** Joins: Guest85 (~Guest85@97-118-72-33.hlrn.qwest.net)
[04:03:33] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[04:06:07] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[04:07:53] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:11:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 252 seconds)
[04:14:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:32:01] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[04:33:02] *** Joins: Oladon (~olad@98.43.81.226)
[04:51:08] <moon-child> jcowan: as far as I know, the only languages that interface directly with c++ without compiling to it are d and raku.  Are there any other notable ones?
[04:51:25] * jcowan shrugs
[04:51:43] <jcowan> I have no idea
[05:03:07] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[05:25:54] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[05:30:12] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[05:56:22] <Guest85> how do I call format such that it actually returns the formatted string
[05:56:24] <Guest85> rather than printing?
[05:56:38] <Guest85> (format nil "...~d..." 3) is not doing it
[05:57:27] <moon-child> (defparameter *x* (format nil "...~d..." 3)) *x* #| --> "...3..." |#
[05:57:43] <moon-child> need more context
[05:58:10] <Guest85> hmm
[05:58:12] *** Joins: ln43 (~ln43@user/ln43)
[05:58:14] <Guest85> must be doing something else wrong then
[05:59:36] <ln43> Hi all, i'm using Portacle on windows and quicklisp to load closer-mop but it does not seems to work since when i do closer-mop: and press tab there are not completions for the symbols exprted by that pachage
[05:59:56] <ln43> package... so, is there any possible solution, please?
[06:01:46] <ln43> and to be sure i tryied to replicate the example in clcookbook (https://lispcookbook.github.io/cl-cookbook/clos.html) but whitout success using that system
[06:02:11] <ln43> so ... i would like to use it in order to install sicl and without maybe i can't procede further
[06:02:24] <ln43> that is why i'm asking for clarification
[06:03:18] <Guest85> is there a @phantomics here?
[06:03:31] <lotuseater> no still not
[06:05:30] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[06:05:49] *** Joins: karlosz (~karlosz@12.196.174.98)
[06:07:53] <ln43> is there a way to remove closrer-mop with quicklisp and then try to reinstall it (maybe from github)?
[06:09:01] *** Quits: karlosz (~karlosz@12.196.174.98) (Client Quit)
[06:09:05] <ln43> really i can't figure out how to proceed and a possible way to solve the issue: closer-mop in my case seems that doesn't works ...
[06:09:17] *** Joins: karlosz (~karlosz@12.196.174.98)
[06:10:31] <moon-child> rm -rf ~/quicklisp/dists/quicklisp/software/closer-mop*
[06:12:44] <ln43> yes i'm trying to reboot again sicl but the issue is that a symbol that should be required and it's defined inside that package is not available during the sicl boot
[06:13:01] <ln43> and quickloading closer-mop there is no error
[06:13:29] <ln43> but again, it seems like doesn't export symbols
[06:13:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:14:16] *** Joins: lottaquestions (~nick@2607:fa49:503f:6400:7dd7:d517:44dd:3f44)
[06:14:57] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:15:20] *** Joins: srhm (~srhm@user/srhm)
[06:17:40] <ln43> ERROR while evaluating compile-time side effect:
[06:17:41] <ln43>  The name "DIRECT-SLOT-DEFINITION" does not designate any package.
[06:17:53] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:18:01] <ln43> mmh
[06:20:27] <ln43> anyway yes moon-child, i will try to delete the actual package and reinstall it but after inspection of the package's folder everythong seems ok... do you know if there is any other way to have closer-mop working ?
[06:20:39] <ln43> *everything
[06:21:06] *** Joins: srhm (~srhm@user/srhm)
[06:25:20] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:26:13] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:26:41] *** Joins: srhm (~srhm@user/srhm)
[06:28:36] <ln43> ok but i see sb-mop:direct-slot-definition, so why?
[06:31:18] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:31:22] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 252 seconds)
[06:31:38] *** Joins: srhm (~srhm@user/srhm)
[06:31:45] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[06:34:40] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[06:35:42] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[06:38:03] <ln43> ok thanks moon-child, after reinstallation seems like magically it works
[06:39:24] *** Quits: keir (~keir@user/keir) (Quit: keir)
[06:45:49] *** Quits: d4ryus (~d4ryus@ppp-188-174-50-104.dynamic.mnet-online.de) (Ping timeout: 252 seconds)
[06:47:43] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[06:52:15] *** Joins: Guest92 (~Guest92@97-118-72-33.hlrn.qwest.net)
[06:54:57] <Guest92> any april users?
[06:56:13] <Guest92> how can someone use a compiler macro so that it is not evaluated at compile time?
[06:56:33] <moon-child> Guest92: what are you trying to do?
[06:57:13] <Guest92> so (april:april-load ...) is a compile-time macro, I inserted it within a let block, but it is not evaluated when I call the function which houses the let block
[06:57:28] <Guest92> but it is reevaluated when I recompile
[06:57:30] <Guest92> this is super annoying
[06:58:30] <Guest92> as it means I can't just call the funciton, I have to compile it each time
[06:58:43] <Guest92> I suppose my own macro is in order which evaluates the other macro at runtime?
[06:58:44] <Guest92> Idk
[06:58:57] *** Joins: d4ryus (~d4ryus@ppp-188-174-90-103.dynamic.mnet-online.de)
[06:59:27] <moon-child> ah, I see.  A macro is very different from a compiler macro
[07:00:19] <White_Flame> in that case, the macro might be calling some other utility function which actually does the work.  you should see if you could call that function instead
[07:00:33] *** Parts: EdLin (~quassel@user/edlin) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:00:34] <moon-child> ^
[07:01:02] <White_Flame> it's very handy for loader tools to work at compile-time, to capture any compilation errors right away as opposed to waiting for runtime, which is why it's written that way
[07:02:26] <Guest92> right, but this makes any sort of workflow absolutely monstrous
[07:02:42] <Guest92> I have to modify my apl file, switch to the lisp buffer, compile, switch to slime buffer, test the function
[07:02:47] <Guest92> its arduous
[07:04:50] *** Joins: phantomics (~phantomic@71-218-230-231.hlrn.qwest.net)
[07:05:11] <saturn2> you can use eval or macro-function to evaluate a macro at any time
[07:05:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[07:06:58] *** Joins: Oladon (~olad@98.43.81.226)
[07:07:48] <Guest92> (eval (april:april-load ...)))
[07:07:48] <lotuseater> ohai phantomics :)
[07:07:49] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[07:07:51] <Guest92> doesn't work
[07:07:56] <phantomics> hey lotuseater
[07:07:58] <lotuseater> oh noez
[07:08:00] <Guest92> phantomics hello
[07:08:06] <Guest92> I was just talking about you ;)
[07:08:09] <saturn2> Guest92: you need to quote the argument to eval
[07:08:19] <phantomics> Guest92: uh oh
[07:08:38] <Guest92> @saturn2 I see
[07:08:48] <lotuseater> saturn2: i thought if maybe a EVAL-WHEN could help (if really needed)
[07:08:55] <Guest92> phantomics I'm an apler, but trying to get the hang of working with april
[07:09:06] <Guest92> figuring out what my workflow should be
[07:09:14] <saturn2> lotuseater: well, the author(s) of april could use eval-when to make it work the way Guest92 expected
[07:09:28] <phantomics> Guest92 how's it going? Any questions?
[07:09:49] <Guest92> phantomics loads. Nested array model? or flat array model? or based array model? or...
[07:10:01] <Guest92> I can't seem to pass a list into april
[07:10:15] <Guest92> (april:april-c "myfn" '(some list))
[07:10:26] <lotuseater> cause a list is a list?
[07:10:37] <moon-child> Guest92: based, like cl
[07:10:41] <Guest92> right, but that could be ⊂"some" "list"
[07:10:42] <phantomics> They're based arrays in the sense that Marshall Lochbaum describes
[07:10:49] <lotuseater> it works on vectors, arrays, strings
[07:10:51] <phantomics> Because the arrays are native CL arrays
[07:11:03] <phantomics> April doesn't work on lists, it expects arrays
[07:11:13] <Guest92> ah
[07:11:27] <Guest92> I guess that makes sense now that you say it like that in the context of CL
[07:11:29] <moon-child> (my own implementation also uses that array model, which I didn't realise until I compared it to dyalog and dzaima and got strange results.  I was somewhat gratified to find april behaved the same way!)
[07:11:45] <phantomics> However, you could have something that operates on lists if you pass the lists within an array and then use the :store-fn option to store a function within April that works on lists
[07:11:49] <lotuseater> Guest92: this gives you #0A#("some" "list") :)
[07:11:57] <Guest92> based does seem to be the "programmerly" mental model
[07:12:11] <Guest92> @phantomics is there a way to pass arguments to (april:april-load ...)
[07:12:27] <Guest92> though that's probably not what I want
[07:12:31] <phantomics> moon-child: in what places have you found April's arrays behaving differently from Dyalog?
[07:12:44] <phantomics> Guest92 let me see...
[07:12:45] <Guest92> Dyalog uses the nested model
[07:13:42] <moon-child> phantomics: one second, I will try to find it
[07:13:50] <phantomics> The underlying model is different but the behavior should be similar, since I automatically do some types of postprocessing to emulate Dyalog's behavior
[07:14:08] <mfiano> Where is AMOP's #'class-direct-methods defined? I don't see it defined in the book or in closer-mop.
[07:14:15] <phantomics> Guest92: you should be able to pass the same (with ...) parameters to (april-load) that you do to (april)
[07:14:30] <moon-child> hmm, that might be it.  Perhaps I was using an older version?  I seem to recall that ⍴0⌷(1 2)3  was ⍬ in dyalog, but ,2 in april
[07:14:36] <moon-child> but am no longer able to reproduce that
[07:15:16] <phantomics> Yes, in older versions there were inconsistencies in the array model
[07:15:46] <phantomics> I've made many changes in the last year, including those
[07:16:52] <lotuseater> phantomics: I was curious how you are the last days since we queried recently, so good you're back. :)
[07:17:00] <moon-child> ~inconsistencies.  Personally, I find the 'nested' approach less consistent.  Especially for things like /
[07:17:33] <phantomics> Been busy with work and getting some last to-dos checked before a new April release
[07:17:43] <phantomics> Just today I got this working: 0 1 {o←⍤ ⋄ {o←⍥⋄1}⍣⍺⊢0 ⋄ 1 +o- ⍵}¨2
[07:17:50] <phantomics> Which I was told couldn't be done with a compiler
[07:17:53] <moon-child> (indeed, sometimes I think boxes may actually be ideal.  If it was good enough for sharp...)
[07:17:56] <moon-child> phantomics: haha, nice
[07:18:00] <lotuseater> I thought so, you're very productive.
[07:18:37] <lotuseater> lel who told you so?
[07:18:46] <moon-child> phantomics: curious, do you also handle changing nameclasses?
[07:19:07] <Guest92> phantomics looks like there's some K in your APL?
[07:19:30] <phantomics> Guest92: yes, you can use K-style if-statements like $[1;2;3] -> 2
[07:19:34] <Guest92> $[cond1;x1;cond2;x2;default]
[07:19:38] <phantomics> But guards are now supported as well
[07:19:43] <moon-child> also {[parameters]body}
[07:19:44] <Guest92> ooo, docs?
[07:19:49] <Guest92> also how do you recommend I use docs?
[07:19:54] <Guest92> do you allow multiline dfns?
[07:20:00] <Guest92> is lexical scope implemented?
[07:20:05] <Guest92> array's of functions?
[07:20:16] <phantomics> Guest92: The only docs for it now are here: https://github.com/phantomics/april#unique-language-features-in-april
[07:20:21] <lotuseater> Guest92: easy easy :) one thing at a time
[07:20:27] <phantomics> Multiline defns are allowed
[07:20:33] <phantomics> But first-class functions are not yet
[07:20:48] <Guest92> but targeted to be supported?
[07:21:20] <phantomics> Maybe, or I may just try writing a BQN compiler since first-class functions are native to that lang and I could port all the April function impls over
[07:22:28] <phantomics> Scoping is the same as in Dyalog, when you assign a var inside a defn it's lexically scoped but you can do for example x←⊢1 to modify a variable outside a defn
[07:22:42] <moon-child> bqn has nice semantics but the syntax is :/
[07:22:59] <Guest92> Dyalog shadows each name, so basically each new assignment creates its own scope
[07:23:05] <moon-child> phantomics: you mean x∘←1?
[07:23:16] <Guest92> that's changed I believe in v18
[07:23:23] <phantomics> I mean x⊢←1
[07:23:32] <lotuseater> I should go to sleep, goodnight all. :)
[07:23:32] <moon-child> ah, that works too :)
[07:23:38] <moon-child> night lotus
[07:23:40] <phantomics> Night lotuseater, talk later
[07:23:56] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[07:24:22] <lotuseater> yes hopefully
[07:24:23] <Guest92> phantomics I guess what I meant by lexical scoping, are full clojures supported, because they are not in dyalgo
[07:24:43] <hayley> s/j/s/
[07:24:50] *** Joins: karlosz (~karlosz@12.196.174.98)
[07:24:54] <phantomics> Guest92 what would an example be?
[07:24:55] <lotuseater> but okay I think when I'm awake again you're sleeping the next hours.
[07:25:49] <phantomics> You can see a good sample of what's supported in the April demo source files like this one: https://github.com/phantomics/april/blob/master/demos/dfns/array/array.apl
[07:27:04] <Guest92> Oh that's excellnt
[07:27:07] <phantomics> One of the main differences to be aware of it that in user-defined operators, you use an underlined character like ⍹ to use the right operand as a value, and ⍵⍵ to use it as a function
[07:27:25] <phantomics> Handling the operands as either operands or functions is a real pain when compiling
[07:27:42] <phantomics> *either values or functions
[07:27:55] <phantomics> Since I'm not interpreting everything JIT
[07:28:31] <moon-child> apl\3000 had a jit compiler
[07:28:40] <phantomics> Guest92 other files: https://github.com/phantomics/april/blob/master/demos/dfns/numeric/numeric.apl https://github.com/phantomics/april/blob/master/demos/dfns/graph/graph.apl
[07:28:45] <moon-child> that could handle changing nameclasses at runtime, w/o a hitch
[07:29:19] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:29:34] <phantomics> btw moon-child what did you mean by changing nameclasses? Workspaces?
[07:30:39] <moon-child> no, name class.  As in x←5⋄f←{x⍵}⋄x←+
[07:31:00] <moon-child> (name class is one of: noun verb adverb conjunction)
[07:31:49] <phantomics> Gotcha, that behavior is undefined, afaik it will work in some situations but break in others
[07:32:04] <moon-child> :/
[07:32:27] <phantomics> Nameclasses are handled by accounting of symbols in a lexer postprocessing stage that happens after the lexer converts characters to tokens but before those tokens are fed to the compiler
[07:33:01] <Guest92> so why april, and not a standalone? How "serious" is april? As in is it yet another APL toy or does it have a longer term agenda?
[07:33:13] <phantomics> But f←{x⍵}⋄x←+ should work without x←5
[07:33:13] <beach> Good morning everyone!
[07:33:18] <phantomics> Morning beach
[07:33:37] <Guest92> any larger applications dependant upon april?
[07:33:56] <phantomics> My goal is for April to be a professional-grade tool, not a toy. I'm using it in a hardware startup currently.
[07:34:24] <Guest92> wow
[07:34:25] <phantomics> April's biggest advantages are interoperability with CL and extensibility
[07:35:45] <Guest92> any emergent interop patterns yet revealed themeselves?
[07:35:53] <phantomics> For instance, check out the comment at the bottom of https://github.com/phantomics/april/blob/master/spec.lisp
[07:36:29] <phantomics> You'll see the syntax for extending April's idiom with a new function, you can make a function or operator out of any Unicode symbol you like, as well as customizing the grammar patterns and utilities
[07:36:43] <hayley> I'm starting to think I need an APL implementation so I don't lose my mind in data science classes. So the best move would clearly be to use cl4py and April to embed APL in Python.
[07:36:53] <moon-child> haha
[07:37:32] <phantomics> As far as interop patterns, I'm often writing CL functions that wrap around an (april-c) call
[07:37:38] <Guest92> there's also the pynapl dyalog library
[07:37:48] <Guest92> hayley ↑↑
[07:38:11] <phantomics> There's a lot of depth to interop I have yet to explore via the :store-fn parameter
[07:38:11] <Guest92> phantomics so you're not using april-load much?
[07:38:21] <hayley> The other thing is that I need to write code in "Python", so downloading a language implementation manually is out of the question.
[07:38:28] <phantomics> Guest92: I use it sometimes for bigger pieces of code that merit their own file
[07:38:38] <Guest92> ah
[07:39:00] <Guest92> so what is your development cycle for such functions when april-load needs a recompile?
[07:39:17] <Guest92> (eval '(april-load...)) seems to do the trick, idk if I want that though
[07:39:36] <lotuseater> it can also be greatly seen and used as kind of a very powerful DSL to shorten code even more :)
[07:39:45] <phantomics> Often I'll just eval the (april-load) form with C-x C-e
[07:40:09] <phantomics> hayley: cl4py also calls an external Lisp so that wouldn't work either right?
[07:40:21] <hayley> phantomics: Yeah, unfortunately.
[07:40:50] <phantomics> I don't get why vector langs don't dominate in data science, they're vastly superior to any alternative for the field
[07:40:57] <saturn2> phantomics: you should probably make april-load expand to (eval-when (:compile-toplevel :execute) ...) rather than doing the work directly in the macro function
[07:42:14] <hayley> One fun example was counting the even numbers in an array. Should I write +/2|array or [x % 2 for x in array].count(0)? At least in Lisp we get COUNT-IF and EVENP.
[07:42:20] <phantomics> saturn2: thanks, I'll look into that
[07:44:28] <moon-child> cl doesn't even have many good tools for tacit programming.  I think the only thing I'm regularly able to do point-free is  :key #'c*r  and similar.  But no compose, hook, partially apply, ...
[07:44:30] <hayley> I'd also like a better relational algebra library too; Pandas seems to be picky about the order of operations sometimes. And apparently it gets too slow with mere thousands of rows.
[07:44:47] <Guest92> phantomics I don't understand why the concept of a general programming notation is not dominating computer science in general
[07:44:58] <hayley> Using Pandas makes me like SQL, which is really saying something.
[07:45:03] <Guest92> array programming languages tend to not be able to differentiate between the notation and notation on arrays
[07:45:05] <moon-child> actually lcompose/rcompose I don't think any language has except for j
[07:45:08] <Guest92> which to me is kind of annoying
[07:45:27] <Guest92> moon-childif you're talking about trains, BQN and APL have trains
[07:45:47] <moon-child> Guest92: the arrays are an essential aspect of the notation.  https://www.reddit.com/r/apljk/comments/p4je0e/j_can_look_like_apl_vscode/h94ldvf/
[07:45:49] <Guest92> and I implemented functional trains in ngn/k
[07:45:58] <phantomics> One annoying shortcoming in APL is the inability to specify a matrix in code without really hackneyed syntax like x⍪←1 2 3 ⋄ x⍪←4 5 6
[07:46:15] <Guest92> moon-childI knw that's the dogma from the iversonian camp, but I think a generalized programming notation is the benefit of APL, not MERELY the arrays
[07:46:19] <moon-child> Guest92: I distinguish left compose from right compose.  ((lcompose f g) x y) ←→ (f (g x) (g y)).  Whereas ((rcompose f g) x y) ←→ (f (g x y))
[07:46:22] <phantomics> But with April you can specify the matrix in CL like #2A((1 2 3)(4 5 6)) and then pass it into April
[07:46:50] <Guest92> (f (g x y)) is just `f g x y` in APL
[07:47:41] <Guest92> and (f (g x) (g y)) is just `x ((g⊣) f (g⊢)) y ` in  dyalog
[07:47:57] <Guest92> and bqn has that implicitly with ...
[07:48:24] <Guest92> g⊸f⟜g
[07:49:00] <moon-child> so, not as a first-class combinator, but something you have to implement yourself
[07:49:07] <Guest92> but there's also explicit "atop" in bqn so you can do f○
[07:49:07] <Guest92> g
[07:49:23] <phantomics> atop also exists in APL as ⍤
[07:49:30] <Guest92> in v18, yes
[07:49:37] <phantomics> And April
[07:49:46] <moon-child> obviously these are trivial to implement in any language with combinators.  The question is, are those combinators primitive?
[07:49:55] <Guest92> in k
[07:50:04] <Guest92> I implemented forks, and atops just are normal k
[07:50:23] <Guest92> https://codeberg.org/ndrogers/kpl/src/commit/58aa17d06c03d10ff8abc006263efce62c106037/apl.k#L75
[07:50:42] <moon-child> yes.  Again, they can be trivially implemented in most languages.  But they are not built in to most languages.  That's all.
[07:50:42] <Guest92> avg:(+/;÷;
[07:51:03] <Guest92> avg:(+/;÷;≢:); (⍤⍳10) avg
[07:51:11] <Guest92> sorry for the typo :C
[07:51:38] <Guest92> moon-child I understand what you mean, Dyalog has many features of J because Roger Hui works for Dyalog now
[07:51:43] <moon-child> yes
[07:52:23] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:54:14] <lotuseater> if they can pay him :)
[07:54:23] <beach> minion: memo for ln43: I think I introduced the problem you observed without noticing it, and then pushed the changes.  So another pull would have fixed it.
[07:54:24] <minion> Remembered. I'll tell ln43 when he/she/it next speaks.
[08:09:18] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[08:10:03] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[08:18:10] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:24:42] *** Joins: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net)
[08:30:38] *** Joins: semz (~none@user/semz)
[08:39:32] *** Parts: akoana (~ah@user/akoana) (Leaving)
[08:45:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:47:02] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[08:47:31] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[09:26:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[09:37:44] *** Joins: lisp123 (~lisp123@45.130.83.212)
[09:38:23] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[09:42:19] *** Quits: lisp123 (~lisp123@45.130.83.212) (Ping timeout: 265 seconds)
[09:45:48] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:45:55] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[09:47:03] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:51:52] *** Joins: shka (~herr@109.231.62.239)
[10:02:51] *** Joins: gaqwas (~john@dynamic-077-002-072-042.77.2.pool.telefonica.de)
[10:06:53] <Guest92> so I'm trying to define a package which depends on libraries and I want to then execute a primary function as a scrip
[10:07:04] <Guest92> anyone have a link to a demo or docs how I might do taht?
[10:07:35] <Guest92> i have an .asd file that has a :depends-on, and then I try to call a `sbcl --script file.lisp` that is mentioned in my .asd, but I don't think thats it
[10:08:54] <beach> I think you mean that you are trying to define a "system" rather than a "package", no?
[10:09:03] <Guest92> I dont actually know
[10:09:18] <Guest92> all I know is my script depends on a `ql:quickload`-ed library
[10:09:35] <beach> Systems are defined using ASDF whereas packages are defined using DEFPACKAGE.
[10:09:37] <Guest92> I want to execute the program programmatically
[10:12:44] <White_Flame> --script skips your .sbclrc init stuff, so quicklisp won't be loaded
[10:13:11] <White_Flame> you could do `sbcl --eval '(ql:quickload "my-thing")' `
[10:13:42] <White_Flame> or --load a small file which does a quickload & execution of your main entry
[10:14:41] <White_Flame> CL has a history as an OS, and thus plays much better with the repl than external launching, though you can generate full executables
[10:15:02] <White_Flame> the scripting environment hasn't taken off that much, though there are some utilities to help launch from various OS's cmdlines
[10:16:17] <Guest92> is that "mything.asd"?
[10:16:29] <beach> Yeah, I never start Common Lisp programs from the OS command line.
[10:16:36] <Guest92> :C
[10:16:45] <Guest92> but I need to execute the program under another programs control...
[10:16:47] <White_Flame> which 'that'?
[10:17:17] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:17:47] <White_Flame> oftentimes to accomplish that, you'll build an executable image from the lisp that the other program can launch.  That avoids portability issues
[10:18:16] <White_Flame> (portability between different CL implementations, launching from different users, etc, not OS portability ofc)
[10:18:41] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[10:18:45] <White_Flame> or, you have the lisp running as a server, and it receives requests from other programs
[10:19:00] <White_Flame> but certainly you can make a little scripting solution that works for your exact use environment setup
[10:19:09] <White_Flame> *user environment setup
[10:19:28] <White_Flame> which would probably be sbcl --eval
[10:19:38] <White_Flame> or sbcl --load
[10:20:24] <White_Flame> or sbcl --script, if your .lisp script file does (load "~/.sbclrc") as its first thing
[10:21:53] <White_Flame> the various options affect if the debugger is launched, does it automatically exit, etc
[10:21:56] <Guest92> I don't have  an sbclrc
[10:21:59] <Guest92> I have a .asd file
[10:22:06] <White_Flame> then how do you use quicklisp?
[10:22:15] <White_Flame> that's usually loaded via your .sbclrc
[10:22:44] <Guest92> um
[10:22:52] <Guest92> idk I set all that up ages ago
[10:23:04] <White_Flame> heh, well it's there, and it needs to be loaded for ql to function
[10:23:30] <White_Flame> does quickloading your .asd system from the repl work normally?
[10:24:32] <White_Flame> either it needs to be symlinked from ~/quicklisp/local-projects/, or added to your asdf:*central-registry* to be visible by default
[10:28:55] <Guest92> ah, so defpackage, then in-package, then the code I need with a (cl-user::exit) at the end does what I need
[10:29:02] <Guest92> its kind of a lot to just run a program
[10:30:38] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 260 seconds)
[10:31:02] <Guest92> `sbcl --load file.lisp` is the ticket
[10:31:14] <Guest92> with (cl-user::exit)
[10:31:18] <Guest92> but holy cow that is really a lot of stuff
[10:32:33] <rain3> just sbcl --load file.lisp and put the code in it and that should do
[10:35:56] <rain3> file.lisp: (defun main () (ql:quickload :your-app) (app:do-stuff) (sb-ext:exit))            sbcl --load file.lisp --eval "(main)"
[10:37:46] *** Quits: Guest92 (~Guest92@97-118-72-33.hlrn.qwest.net) (Ping timeout: 256 seconds)
[10:37:46] *** Quits: Guest85 (~Guest85@97-118-72-33.hlrn.qwest.net) (Ping timeout: 256 seconds)
[10:40:20] <saturn2> you can also use sbcl as a script interpreter
[10:40:32] <saturn2> with a shebang line
[10:42:44] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[10:43:34] *** Joins: amb007 (~a_bakic@0.135.22.93.rev.sfr.net)
[10:45:35] *** Joins: vats (~vats@103.70.83.191)
[11:06:55] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 268 seconds)
[11:11:14] *** Joins: selwyn (~selwyn@user/selwyn)
[11:18:14] *** Joins: pve (~pve@178-55-124-183.bb.dnainternet.fi)
[11:20:07] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[11:20:27] *** Joins: srhm (~srhm@user/srhm)
[11:30:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[11:32:14] *** Quits: amb007 (~a_bakic@0.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:33:17] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:34:27] *** Quits: gaqwas (~john@dynamic-077-002-072-042.77.2.pool.telefonica.de) (Ping timeout: 265 seconds)
[11:36:30] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[11:40:16] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[11:40:37] *** Joins: srhm (~srhm@user/srhm)
[11:47:07] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[11:49:36] *** Joins: _Posterdati_ (~posterdat@host-79-43-209-252.retail.telecomitalia.it)
[11:51:22] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[11:58:07] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:04:27] *** Joins: heisig (~heisig@109.190.253.15)
[12:18:34] *** Joins: lottaquestions_ (~nick@2607:fa49:503f:6400:7dd7:d517:44dd:3f44)
[12:20:18] *** Quits: lottaquestions (~nick@2607:fa49:503f:6400:7dd7:d517:44dd:3f44) (Ping timeout: 260 seconds)
[12:28:15] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[12:28:40] *** Joins: makomo_ (~makomo@user/makomo)
[12:31:19] *** Quits: heisig (~heisig@109.190.253.15) (Remote host closed the connection)
[12:31:38] *** Joins: heisig (~heisig@109.190.253.15)
[12:36:51] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:2cb3:8945:1c5c:6ee2)
[12:49:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[12:52:16] *** Quits: vats (~vats@103.70.83.191) (Ping timeout: 265 seconds)
[12:52:58] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[13:11:46] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[13:17:01] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[13:30:42] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:37:50] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:38:44] *** Joins: srhm (~srhm@user/srhm)
[13:41:04] <lisp123_> What new concepts are taught in AMOP that are not an application of Macros or other basic programming concepts?
[13:41:59] <loke[m]> lisp123_: object orientation.
[13:43:40] <lisp123_> Could you expand on that?
[13:43:58] <lisp123_> Is it in terms of redefining the rules of CLOS?
[13:44:01] <rudi> programmable objects
[13:44:14] <rudi> an API to redefine rules of CLOS, yes
[13:45:03] <rudi> but in the end, it's all macros and basic programming concepts ... I don't know what to tell you except to look at the table of contents and introduction chapter :)
[13:45:32] <lisp123_> Because (from my very rudimentary understanding), objects can be represented by closures - so I get that CLOS etc. are well refined object oriented systems, but is there any new programming concepts in AMOP? I only say this because eveyrbody says its one of the best books in CL, I have a copy but haven't started reading
[13:45:56] <ecraven> there are valuable concepts that are more complex than closures...
[13:45:56] <lisp123_> I read the foreword / introduction chapter
[13:46:08] <loke[m]> Possibly, but I don't understand the question. AMOP is about topics which are absolutely not just functions and macros. It's about object orientation, and a specific implementation of it based on generic functions.
[13:46:34] <ecraven> this is the same as saying "I understand assembly language, does any other language add anything useful beyond that"? and the answer is (for probably any language): yes, there are valuable new things to be learned ;)
[13:47:07] <lisp123_> ecraven: Fair enough :D
[13:48:07] <ecraven> CLOS offers a very interesting model of extending object orientation in various directions. for example, generic functions are a very useful concept (which is not very widespread outside of a few specific languages)
[13:48:17] <loke[m]> ecraven: Unless the language is Python. Then no.
[13:48:38] <lisp123_> loke[m]: Okay, so basically there's a lot more to object orientation, which I seem to be missing, hence I don't fully get why its not "more advanced" version of the basic concepts I've learnt so far
[13:48:57] <ecraven> loke[m]: fortunately, I haven't had to deal with python in detail, I haven't seen anything I didn't see in other languages too
[13:48:57] <lisp123_> Perhaps thats the missing link in my understanding
[13:49:16] <ecraven> Lisp, APL, Forth, Prolog, that's the type of language that I'm thinking about ;)
[13:49:32] <ecraven> well, what *have* you learned so far?
[13:49:50] <lisp123_> Well I equated OO to closures for the most part
[13:49:57] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:50:10] <ecraven> closures might be an implementation technique for OO, but the concepts are unrelated to closures
[13:50:28] <loke[m]> lisp123_: That would be more akin to structures
[13:50:40] <loke[m]> `struct` in C is basically a container of values, which can be emulated uing a closure.
[13:50:44] <loke[m]> s/uing/using/
[13:52:59] <lisp123_> Hmmm ok
[13:53:16] <lisp123_> loke[m]: Yes that's right
[13:54:18] <loke[m]> In fact, in CLOS, the ability to arrange members (called slots) in classes is probably the least interesting aspect of it.
[13:55:16] <loke[m]> People should probably learn CLOS by using generic functions and the standard datatypes. and look at defclass later.
[13:56:04] <lisp123_> I naively viewed generic functions as a massive COND table
[13:57:14] <lisp123_> What stood out to me in the intro of AMOP was this - "Rather than supplying the user with a fixed, single point in the space of all language designs and implementations, we would instead support a region of possible designs within that overall space"
[13:57:47] <lisp123_> So I figured the status of the book as one of the very best in CL came from that, and hence the original question
[13:59:11] <loke[m]> lisp123_: I'm currently implementing some code in Kotlin which does not have generic functions, and trust me, the when-tables I have to create for every single function is ridiculous. While it's certainly possible to replicate the behaviour using essentially if-statements everywhere, it's similar to arguing that you don't need support for floating point numbers because you can just use NAND.
[13:59:12] <lisp123_> Like the above sentence to me sounds more than just a very good book on OO, but rather something even more fundamental to all of computer science
[14:01:19] <rudi> it describes ways of subclassing classes, slots, generic functions, etc., and implement different behaviors when you use such a class, call such a function, etc.
[14:01:40] <rudi> hence the "meta" in its title - it's programming your OO system to do stuff
[14:01:53] <lisp123_> I see
[14:03:52] <lisp123_> So looks my takeaways are - OO is a much important concept than just its surface level definitions and (b) taking an OO approach to writing programs in the sense of 'Metaobjects' is profoundly better than the basic approach we get taught first in terms of everything is just building upon procedures and functions
[14:04:46] <_death> lisp123_: it is about introducing points of extension for the user (application programmer) so that a variety of decisions can be made.. it is done in a principled way to allow for efficiency and consistency in the face of different extensions.. the usual choice would've been to disallow extension (closed systems)
[14:06:28] <lisp123_> _death: Thanks for that. Do you have examples of extensions? Is that something like evaluation order (e..g for functions evaluate all arguments before the function)
[14:06:44] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[14:07:07] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[14:09:21] <rudi> lisp123_: is this for homework?
[14:09:39] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Client Quit)
[14:09:49] <loke[m]> lisp123_: Why don't you just read the book?
[14:10:18] <_death> lisp123_: the AMOP book has examples.. for example it's easy to write an object browser (an example of MOP giving means of introspection) or a system allowing persistent instances.. being able to change the evaluation order is also a good example, if you apply MOP principles to your evaluator (the Paepcke book I mentioned has a paper about this)
[14:11:03] <lisp123_> _death: Thanks for that, very useful
[14:11:18] <beach> I think everyone missed the totally essential part of the AMOP namely that it implements CLOS using CLOS.
[14:13:39] <beach> Or, even more "meta", it defines the behavior of CLOS using a CLOS program.
[14:14:32] <lisp123_> That seems very cool
[14:15:14] <beach> This aspect is what makes Common Lisp bootstrapping interesting, to me at least.  It means that the best way to describe how Common Lisp works is that it is the result of executing Common Lisp code.  And then the best way of implementing Common Lisp is by extension actually executing some Common Lisp code.  Which is exactly how we do it in SICL bootstrapping.
[14:17:51] <lisp123_> That sort of sounds like an advanced (compound?) version of how lisp is said to be/have a meta circular evaluator?
[14:18:16] <_death> it's another turtle in the chain :)
[14:18:44] <beach> Yes, but the typical metacircular evaluator is only concerned with ordinary functions, and it doesn't handle classes.
[14:18:59] <lisp123_> (if lisp allows for primitives to be evaluated meta circurlarly, then MOP/CLOS is for compound objects)
[14:19:24] <lisp123_> Okay, that's pretty cool and I guess what I was after in terms of what's special about AMOP
[14:19:39] <beach> I wouldn't say that.  As many pointed out, generic dispatch is very useful for built-in classes as well, like numbers.
[14:20:50] *** Joins: selwyn (~selwyn@user/selwyn)
[14:21:07] <lisp123_> Understood
[14:21:25] <beach> Now, at the end of the book, and also in their PCL implementation, they tweak the otherwise metacircular code to make it operational.  As it turns out, it is already operational, provided you execute it in a host Common Lisp system with an existing CLOS implementation.  Which is what we do in SICL bootstrapping.
[14:22:35] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:23:14] <lisp123_> Nice, I will keep an eye out for that when I get to that
[14:23:22] <beach> So we can evaluate forms like (defclass t () () (:metaclass built-in-class)) and (defclass standard-class (...) ...)
[14:24:21] <lisp123_> Within an existing CLOS implementation right?
[14:24:51] <lisp123_> So you define your own SICL implementation, and then run it within an existing CLOS implementation?
[14:24:57] <beach> In the first stage of bootstrapping, yes.  But then it executes itself.
[14:25:04] <beach> No, not at all.
[14:25:25] <beach> I mean, we do during bootstrapping, but the result is a new system.
[14:25:26] <lisp123_> And afterwards, somebody else can create their own implementation by redefining CLOS in your SICL implementation?
[14:25:50] <beach> I am not sure what that means.
[14:26:18] <beach> Someone else can just do what I did and they will have their own CLOS implementation.
[14:26:26] <_death> AMOP taught me that (most of) CLOS is simple and elegant, even if production-quality implementations and some corners are hairy
[14:26:49] *** Quits: heisig (~heisig@109.190.253.15) (Remote host closed the connection)
[14:26:56] <beach> As I wrote in one of my papers, the entire chapter "Living with circularity" is not necessary.
[14:27:08] *** Joins: heisig (~heisig@109.190.253.15)
[14:28:06] <beach> _death: Sure, but most warts are due to their assumption that CLOS is going to be added to a pre-ANSI Common Lisp implementation.   We fixed those warts.
[14:29:15] <_death> beach: that's great.. I've yet to read the CLOS implementation in SICL
[14:29:52] <beach> That won't teach you much, as my (defclass t... example shows.  The tough part is bootstrapping.
[14:30:28] <lisp123_> beach: I figured it would be somehow "better" to bootstrap from SICL than from another implementation, even if they could just simply repeat what you did
[14:31:00] <beach> lisp123_: Possibly, since we have first-class global environments.
[14:31:49] *** Quits: heisig (~heisig@109.190.253.15) (Remote host closed the connection)
[14:32:05] *** Quits: frgo (~frgo@p200300deef0cee002cc65253b45c2e0a.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:32:09] *** Joins: heisig (~heisig@109.190.253.15)
[14:32:17] <beach> _death: Well, there is also stuff like generic dispatch, which is an implementation detail, but an important one for performance.
[14:32:32] *** Joins: frgo (~frgo@p200300deef0cee002cc65253b45c2e0a.dip0.t-ipconnect.de)
[14:33:30] <lisp123_> Okay, so my conclusion are as follows. (1) Book on Algorithms -> Teaches basic, primitive ideas of how to code directly with hardware & how to write efficient code. (2) SICP -> Teaches the value of abstraction and building compound objects / higher order functions etc. (and various discussions on that), AMOP -> Teaches the value of organising software / implementations in an 'object' style and the various considerations for that (i.e. for l
[14:33:30] <lisp123_> arge projects, this organisational advantage of OO code should not be discounted and regarded just as a set of procedures / macros over the basic primitives)e value of organising software / implementations in an 'object' style and the various considerations for that (i.e. for large projects, this organisational advantage of OO code should not be discounted and regard
[14:33:33] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:34:09] <lisp123_> (sorry some text accidentally got copied twice in the above)
[14:34:20] <_death> beach: right, some of the hair in production-quality implementations is due to making things efficient
[14:36:35] <lisp123_> ( rudi & loke[m] - no not for homework, just wanted to have a quick summary in my head as I went about reading things. I will hopefully get to reading AMOP soon, saving it for a nice holiday)
[14:36:57] <_death> beach: I meant that, e.g., Closette was a simple program and it shows a simplified CLOS.. other treatments implementing CLOS-like object systems are too far away from it
[14:40:34] <beach> Yes, I see.
[14:40:49] * beach vanishes to fix lunch for his favorite coauthor. 
[14:40:56] <mfiano> lisp123_: Object orientation covers more ground in CLOS than class-centric OO languages. Generic functions, which are represented by class metaobjects, form the primary way of [re]defining behavior, and this system is integrated into the core of the language. AMOP is a nice book for all of the reasons already mentioned. It is however, a technical book, and the writing style and number of errors
[14:40:59] <mfiano> is not very good. The content though is excellent.
[14:46:11] <lisp123_> mfiano: Thanks for that. Yes, it was a bit hard to read so I put it off for just now. It does seem like I need to have more appreciation for generic functions than I have thus far, so that's one of my takeways
[14:47:18] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:48:01] *** Joins: amb007 (~a_bakic@16.135.22.93.rev.sfr.net)
[14:48:12] <mfiano> I didn't have an appreciation for generic functions or the rest of CLOS until I actually started working on my own projects.
[14:49:19] *** Quits: heisig (~heisig@109.190.253.15) (Remote host closed the connection)
[14:49:38] *** Joins: heisig (~heisig@109.190.253.15)
[14:52:09] <mfiano> Playing around with generic functions to see how they work, even if it's just using the "on-stage" (AMOP metaphor) interface, and then integrating them into a real project, is also eye-opening.
[14:53:53] <lisp123_> I had some experience when I was writing some card games in Swift (for example a generic sort function which then is specialised on which type of cards one is using or what are the rules of the particular game) - that was definitely a great experience for me
[14:55:28] <lisp123_> I moved away from CLOS recently, but now I think that was just because I designed the objects badly
[14:55:34] <lisp123_> So I will revisit
[14:55:37] <mfiano> I am not familiar with that language, but generic functions in CL, even without getting into meta-stuff, is very flexible, with auxiliary methods, method-combination, etc
[14:57:07] <lisp123_> One thing that tripped me up with axuiliary methods was that they didn't have access to lexical scope
[14:57:35] <lisp123_> within the main method or other auxiliary methods -> but now that I have learnt macros, I can implement that myself
[14:59:09] <mfiano> Well, :around methods are for when you need to replace the primary method, which can optionally call out to the primary method, so you can lexically bind it's result and refer to it
[14:59:09] *** Quits: amb007 (~a_bakic@16.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:59:22] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:59:23] <mfiano> You can also call the next applicable method from primary methods
[14:59:33] *** Joins: notzmv (~zmv@user/notzmv)
[15:00:51] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:01:01] <lisp123_> I struggled with :around, I will have a look at that again - thanks!
[15:01:51] <mfiano> Well unlike :before and :after that runs before or after the primary method, an around method _replaces_ the primary method...the return value of the around method is used.
[15:02:05] <mfiano> But, you can still call what would have been the original primary method
[15:02:54] *** Quits: heisig (~heisig@109.190.253.15) (Quit: Leaving)
[15:02:55] <mfiano> The optional calling is done with #'call-next-method
[15:03:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[15:03:32] <mfiano> This is a very powerful concept for extending new behaviors
[15:05:17] <Shinmera> ? it doesn't replace the primary method. It goes around all of the other methods, including :befores and :afters
[15:06:35] <mfiano> I guess that was worded poorly. I was referring to this official passage: "An around method specifies code that is to be run instead of other applicable methods, but which might contain explicit code which calls some of those shadowed methods (via call-next-method)."
[15:07:46] <lisp123_> Thanks! I will play around with #'call-next-method now
[15:08:08] <lisp123_> Is the order :before :around :after?
[15:08:32] <mfiano> ::clhs 7.6.6.2
[15:08:33] <Colleen> Clhs: section 7.6.6.2 http://www.lispworks.com/documentation/HyperSpec/Body/07_ffb.htm
[15:08:38] <mfiano> That is enlightening
[15:09:11] <lisp123_> Thanks mfiano
[15:09:48] <Shinmera> lisp123_: https://upload.wikimedia.org/wikipedia/commons/4/43/Method-combination.png
[15:10:43] <rain3> https://lispcookbook.github.io/cl-cookbook/clos.html "Think of it as an onion, with all the :around methods in the outermost layer, :before and :after methods in the middle layer, and primary methods on the inside."
[15:11:19] <hayley> "Method combinations are like ogres."
[15:16:57] <antoszka> lol
[15:18:57] <lisp123_> Thanks Shinmera & rain3, very useful
[15:18:59] <lotuseater> haha I definitely know where this is coming from :D
[15:21:12] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 268 seconds)
[15:34:42] *** Joins: hendursaga (~weechat@user/hendursaga)
[15:39:57] *** Joins: Everything (~Everythin@37.115.210.35)
[15:42:07] *** Joins: heisig (~heisig@109.190.253.15)
[15:44:38] *** Quits: heisig (~heisig@109.190.253.15) (Client Quit)
[15:45:46] *** Joins: vats (~vats@103.70.83.191)
[15:50:40] *** Quits: vats (~vats@103.70.83.191) (Ping timeout: 240 seconds)
[15:55:06] *** Joins: vats (~vats@103.70.83.191)
[16:01:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:01:39] <lisp123_> I am having issues copying a vector which has a fill pointer, and then doing vector-push-extend on the new vector
[16:01:44] <lisp123_> Any tips?
[16:02:12] <lotuseater> so it's also an adjustable vector?
[16:02:18] <lisp123_> yes
[16:02:47] <lotuseater> did you use COPY-SEQ ? I have to try out
[16:02:57] <lisp123_> I did
[16:03:21] <lotuseater> so hmm what does clhs say about it?
[16:03:22] <lisp123_> Looks like I may need to manually copy and not use copy-seq
[16:03:49] *** Joins: yitzi (~yitzi@172.98.105.250)
[16:03:56] <lisp123_> If sequence is a vector, the result is a fresh simple array of rank one that has the same actual array element type as sequence.
[16:04:13] <lotuseater> yes I was about to paste it ^^
[16:04:18] *** Quits: vats (~vats@103.70.83.191) (Ping timeout: 260 seconds)
[16:04:25] <lisp123_> looks like the :adjustable property doesn't get copied across, but I don't see particular mention of that above?
[16:04:33] <lisp123_> Is that the "rank 1" bit?
[16:04:53] <lisp123_> ah the "simply array"
[16:06:17] <lotuseater> so write yourself a COPY-VECTOR or so which checks if it has fill-pointer and/or is adjustable
[16:07:35] <lisp123_> thanks
[16:07:56] <lotuseater> like you want and need it :)
[16:08:16] <lisp123_> :)
[16:09:14] *** Joins: Duuqnd (~Duuqnd@185.201.174.78)
[16:12:23] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[16:13:17] *** Joins: X-Scale` (~ARM@92.250.99.192)
[16:16:06] <lotuseater> and also with just a fill-pointer it's not a simple-vector indeed
[16:16:29] *** Quits: X-Scale (~ARM@46.50.0.45) (Ping timeout: 268 seconds)
[16:16:29] *** X-Scale` is now known as X-Scale
[16:18:01] <lisp123_> I see
[16:18:10] <lisp123_> I created my first vector today :)
[16:18:29] <lisp123_> #efficient-programming #nomorelists
[16:18:54] <lotuseater> yesterday I asked something in #clojure and the discussion went to that someone said "pattern matching 100% doesn't belong in a library, it's a 'fundamental' feature" ○_∘
[16:20:13] <jackdaniel> same goes for parsing json, essential language feature
[16:20:16] <jackdaniel> and mp3, I forgot about mp3
[16:20:22] <lotuseater> right right
[16:21:12] <lotuseater> with sentences like that someone shows well how less things are really understood
[16:22:45] <jackdaniel> it is not that wiring a functionality in a library make its users comprehend the topic more compared to a built in feature
[16:23:12] <lotuseater> lisp123_: please don't assume lists as inefficient
[16:23:34] <hayley> I really don't like non-extensible pattern matchers, which so happen to usually be inbuilt pattern matchers.
[16:23:37] <lisp123_> lotuseater: No, of course not :) Just in the right places, vectors are better
[16:24:25] <lotuseater> yes just because something *looks* like "built-in" whereelse cause you're locked out from the beginning doesn't mean it really is
[16:24:36] <lotuseater> lisp123_: i know
[16:24:51] <hayley> To a zeroth approximation, a modular pattern matcher would let you provide any accessor functions to destructure an object.
[16:25:27] <lotuseater> yeah having that in the macro which turns it on is even nicer too :)
[16:25:57] <hayley> Of course, Clojure programmers shy at encapsulation and the use of data structures which aren't persistent vectors and maps, so it is a non-issue for them.
[16:27:34] <hayley> Extensible pattern matching is how DEFINE-TYPE in <https://github.com/telekons/one-more-re-nightmare/blob/master/Code/re-types.lisp> works for example.
[16:27:49] <lotuseater> and even more, it's a thing you don't want to have in a real language spec, cause there are too much possibilities and variations, like with regular expressions in general
[16:28:50] <hayley> Once I wrote that pattern matching and hash tables seemed like old ideas, but for which people can't stop inventing new implementations of. So I wouldn't want to maintain a pattern matcher really.
[16:28:53] <jackdaniel> I doubt that this would make a strong point when comparing clojure with commonlisp (which has quite a few "wired" behaviors, most notably for sequences)
[16:29:20] <jackdaniel> maybe not "most notably", but "for example"
[16:29:58] <hayley> .oO(Everything I don't like is anti-modular: the hayley's guide to language features)
[16:30:03] <jackdaniel> you can't loop operators, map operators etc etc
[16:30:23] <jackdaniel> s/can't/can't extend/
[16:31:06] <rain3> Shinmera: I'd like to port https://github.com/rainthree/manardb to windows , this mmap layer is almost fine: https://github.com/Shinmera/mmap/blob/master/windows.lisp#L222  but its api accepts only pathnames , not file descriptors, while the code that has to be ported calls open-file then mmap on the descriptor . Do you allow me to clone your code and modify it as I want , or would you prefer me to fork then submit pull
[16:31:06] <rain3> requests? (in this case I will have to bother you about changes and you may not agree to the changes I want to make and we will waste time)
[16:33:24] <Shinmera> rain3: It seems like it would be simpler to me to change the code you're porting to just use the mmap library instead of open-file and mmap separately.
[16:34:22] <rain3> maybe, but would that be correct ? to make it work with a 'too' high-level api?
[16:34:32] <Shinmera> why would it be "too high level"
[16:36:23] <Shinmera> The mmap api does return the fd (kinda) in its second argument, so if you absolutely need it for something you can get it from there, too.
[16:36:44] <Shinmera> err, second return value
[16:39:02] <rain3> ok I will give it a try
[16:42:07] <mfiano> lisp123_: alexandria:copy-array
[16:44:58] <lotuseater> mfiano: so the copy-vector could be left for them as an exercise :)
[16:45:15] <mfiano> Hmm?
[16:45:35] <lotuseater> hmm?
[16:46:09] <mfiano> I don't understand your comment. A vector is an array
[16:46:20] <lotuseater> so that lisp123_ works through it but also is aware of a general function in a lirary which does it
[16:46:40] <lotuseater> of course
[16:47:09] <mfiano> I see
[16:48:28] *** Joins: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net)
[16:51:55] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 252 seconds)
[16:52:20] <lotuseater> lisp123_: chapter 5 in Common Lisp recipes could also be good for you now
[16:55:58] *** Quits: john-a-carroll (~john-a-ca@host-92-28-178-6.as13285.net) (Quit: Ping timeout (120 seconds))
[16:57:02] <lisp123_> lotuseater: Thanks for the tip, will check it out
[16:57:40] <lisp123_> mfiano: Thanks, I'm trying to avoid alexandria as much as possible (minimise code dependency surface)
[16:58:14] <rain3> Shinmera: by "too high level" I meant that it does two things (1. opening a file , 2. mmapping it) , so in the original code to accommodate to that, at this line for example https://github.com/rainthree/manardb/blob/5d8fc843057b70e831ca1bfc4912ae2b24ab73d4/src/mtagmap.lisp#L168  I will have to do an extra remap (or munmap + mmap for systems that don't have remap) . It can be done, but another way would be to make a separate
[16:58:14] <rain3> layer library (in which I may steal/inspire few lines from yours)  that also has open-file exposed in the public api, along with other apis (that don't have anything to do with mmap)
[16:58:15] <lotuseater> you shouldn't do so
[16:59:03] <rain3> *an extra remap before truncating the file because it will be already mmapped and truncate won't work before first remapping with the new length
[17:07:09] <Shinmera> rain3: It must do two things in order to stay properly portable across systems. The semantics of opening a file and mapping are quite different on windows vs unix.
[17:08:11] <Shinmera> I don't much see the point of exposing the fd myself.
[17:08:30] <Shinmera> There isn't really anything to do with it once things have been mapped.
[17:26:35] *** Joins: cage (~cage@dynamic-adsl-78-15-41-207.clienti.tiscali.it)
[17:27:03] *** Joins: didi (~user@user/didi)
[17:27:43] <didi> Should GETHASH be faster for hash tables with test EQL than EQUAL?
[17:29:33] <hayley> Well, for the key objects for which EQUAL and EQL hash tables are equivalent, EQUAL conceptually calls EQL. So EQL might be faster?
[17:30:44] *** Joins: Bike (~Glossina@71.69.170.70)
[17:30:44] *** ChanServ sets mode: +o Bike
[17:31:01] <didi> So let's go a step further: Should GETHASH be faster for hash tables with test EQL and testing integers than with test EQUAL and testing strings?
[17:32:25] <hayley> Now it depends on if EQ would work; are the integers fixnums and are EQUAL string keys EQ (possibly by some other interning)?
[17:32:59] <didi> hayley: oic. Lots of IFs. Thank you.
[17:33:52] <hayley> If one is true but the other isn't, the true one will be faster. If both are true, they're probably the same. If neither is true, no one knows.
[17:34:17] <didi> Thank you, hayley.
[17:34:25] <hayley> Sure.
[17:36:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:43:27] <fitzsim> stylewarning: I'm working through intro-to-coalton.md
[17:43:48] <fitzsim> I think the do-notation example has a typo in the result comment
[17:44:11] <fitzsim> but in trying to prove it, I'm not how to print the resulting list
[17:44:47] <fitzsim> I think the third element should be 4+3
[17:45:31] <fitzsim> I'm trying: (coalton (fromSome "" (index xs 2)))
[17:45:48] <fitzsim> and I get back a coalton function-entry
[17:46:33] <fitzsim> I'm not sure how to resolve the value there (or just print it as 4+3)
[17:51:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:13:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[18:15:11] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:16:08] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[18:27:26] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[18:33:40] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[18:34:45] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2)
[18:37:59] *** Joins: mariari (~mariari@user/mariari)
[18:40:10] *** Quits: Duuqnd (~Duuqnd@185.201.174.78) (Ping timeout: 268 seconds)
[18:45:34] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[18:49:34] *** Joins: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-102A-static.midco.net)
[18:52:43] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102A-static.midco.net) (Ping timeout: 268 seconds)
[19:00:37] *** Joins: Devon (~devon@50-201-94-142-static.hfc.comcastbusiness.net)
[19:12:22] *** Quits: Devon (~devon@50-201-94-142-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[19:12:35] *** Joins: cranium (~cranium@user/cranium)
[19:26:52] <pjb> didi: the difference implied by the test is foremost a difference of hash function.
[19:27:25] <pjb> didi: basically a eql hash-table will use as hash value either the address of the object, or (if a moving gc is used), a unique ID.
[19:28:18] <pjb> didi: while with an equal hash-table, for objects where that makes a difference, the hash-function will have to process the object value (eg. make an sum of some of the hash of the slots in a vector or list).
[19:28:48] <didi> pjb: oic. So I'm guessing there will be a difference in performance.
[19:28:49] <pjb> didi: but this is what lets you use them as key, so you do want this difference!
[19:32:40] <pjb> eg. if your keys are numbers, then equal uses eql which tests if the numbers are of same type and = ; but if your keys are string then equal uses (every 'equal str1 str2) to test each character. O(n)…  Sometimes you may want to use a hash-table :test eql with strings, but in general you don't, you want the :test equal.
[19:32:47] <pjb> so the question of performance is irrelevant!
[19:33:15] <didi> oic Thanks.
[19:41:38] <doyougnu> Hi all, does anyone have a reference or link to get started on NixOS? I'm getting errors when looking for foreign libs like libssl.so
[19:48:07] <dualinverter[m]> What are you trying to do? doyougnu
[19:49:54] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[19:58:07] <doyougnu> dualinverter[m]: trying to install hutchentoot.
[20:00:05] *** Joins: cosimone (~user@93-44-187-145.ip98.fastwebnet.it)
[20:02:51] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[20:03:14] <doyougnu> I was just seeing if there was anyone else in here that used NixOS. I found some NixOS related posts about it, looks like PACKAGE_CONFIG_PATH needs to refer to where nixos stores binaries
[20:05:43] <dualinverter[m]> doyougnu:  I am pretty new to common-lisp, am not using any packages so far; but this flake file works without problems:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/c755c59039ee186f1a6a9dc98f018ce91ee78e71)
[20:07:29] <etimmons> doyougnu: Doesn't actually answer your question, but if you don't really need SSL support in hunchentoot you can push :hunchentoot-no-ssl to *features* before loading it
[20:07:34] <doyougnu> dualinverter[m]: thanks for the input. I'll toy around with some derivations. I suspect i'll have to wrap SLIME in a nix-shell to get it working.
[20:24:45] *** Quits: yitzi (~yitzi@172.98.105.250) (Quit: Leaving)
[20:24:46] *** Joins: nature (~nature@mail.blazebone.com)
[20:30:09] *** Quits: _Posterdati_ (~posterdat@host-79-43-209-252.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[20:31:49] *** Joins: _Posterdati_ (~posterdat@host-79-43-209-252.retail.telecomitalia.it)
[20:33:04] *** Quits: _Posterdati_ (~posterdat@host-79-43-209-252.retail.telecomitalia.it) (Excess Flood)
[20:41:56] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[20:42:54] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[20:50:19] *** Joins: _Posterdati_ (~posterdat@host-79-43-209-252.retail.telecomitalia.it)
[20:58:06] *** Joins: eddof13 (~textual@200.52.90.10)
[21:06:27] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:14:59] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[21:16:53] *** Joins: yitzi (~yitzi@172.98.105.250)
[21:19:40] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:25:07] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[21:25:18] *** Joins: amb007 (~a_bakic@16.135.22.93.rev.sfr.net)
[21:32:24] *** Joins: vats (~vats@103.70.83.191)
[21:36:54] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:45:59] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:46:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:47:44] *** Quits: random-nick (~random-ni@87.116.165.220) (Quit: quit)
[21:51:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[21:54:07] *** Joins: trriplex (~trriplex@user/trriplex)
[21:58:04] *** Joins: random-nick (~random-ni@87.116.181.5)
[22:07:32] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[22:08:16] *** Joins: srhm (~srhm@user/srhm)
[22:23:25] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:25:17] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:27:58] *** Quits: trriplex (~trriplex@user/trriplex) (Ping timeout: 252 seconds)
[22:29:17] *** Quits: eddof13 (~textual@200.52.90.10) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:31:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:35:48] <akater[m]> Should (map-into #(0 0 0) #'identity) error?  SBCL errors here due to invalid number of arguments but it does not error e.g. on (map-into #(0 0 0) #'identity nil nil).
[22:35:49] *** Quits: amb007 (~a_bakic@16.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:36:57] <Bike> identity takes the wrong number of arguments, so it's undefined behavior, i think
[22:37:30] <_death> you shouldn't pass a literal there
[22:37:34] <mfiano> result sequence shouldnt be a literal
[22:37:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[22:38:26] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Remote host closed the connection)
[22:38:37] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:39:48] <scymtym> (map-into … … nil nil) does not call the function. (map-into (vector 1 2 3) #'identity '(1) '(2)) signals an error due to wrong number of arguments
[22:40:21] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[22:40:32] <mfiano> identity takes 1 argument, so should be given 1 sequence
[22:41:06] <scymtym> but i don't think the compiler is supposed to figure that out without calling the function
[22:42:45] <akater[m]> Oh I get it.
[22:43:01] <didi> And yet, apparently it tries to apply.
[22:43:07] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:43:09] <akater[m]> CL-USER> (flet ((f () (random 3))) (map-into (list 0 0 0) #'f))
[22:43:09] <akater[m]> (0 2 2)
[22:43:29] <didi> Try evalling (map-into (make-list 10) #'identity).
[22:44:12] <akater[m]> Sorry, silly mistake.
[22:45:23] <didi> If one follows the backtrace, it evals `(apply really-fun args)' inside `map-into'.
[22:45:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:49:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:50:42] <akater[m]> didi: See the example above.
[22:51:37] *** Joins: eddof13 (~textual@200.52.90.10)
[22:51:46] <akater[m]> Elements are set to successive values of (funcall f).  That's what should indeed happen.
[22:52:12] <didi> akater[m]: #'f doesn't accept arguments; #'identity does. The surprise, for me, is that `map-into' applies the function even if there is not sequence.
[22:52:19] <didi> s/not/no
[22:52:20] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:52:33] *** Quits: eddof13 (~textual@200.52.90.10) (Client Quit)
[22:53:31] *** Joins: eddof13 (~textual@200.52.90.10)
[22:53:43] <didi> It makes sense, tho.
[22:54:38] <pjb> counting starts at 0.
[22:55:32] <pjb> akater[m]: there's no point in naming a function with f !!! Use lambda: (map-into (make-list 3) (lambda () (random 3))) #| --> (2 2 2) |#
[22:56:17] <pjb> didi: (map-into (make-list 3) (constantly 42)) #| --> (42 42 42) |#
[22:56:39] <didi> Sure sure.
[22:57:40] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[23:02:33] <akater[m]> pjb: there is a point: e.g. we were able to say “f takes no arguments”.
[23:08:00] *** Joins: trriplex (~trriplex@user/trriplex)
[23:08:15] *** Quits: trriplex (~trriplex@user/trriplex) (Remote host closed the connection)
[23:11:54] *** Quits: vats (~vats@103.70.83.191) (Ping timeout: 265 seconds)
[23:14:37] *** Quits: yitzi (~yitzi@172.98.105.250) (Remote host closed the connection)
[23:17:40] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[23:18:17] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 268 seconds)
[23:18:40] *** Quits: cosimone (~user@93-44-187-145.ip98.fastwebnet.it) (Ping timeout: 265 seconds)
[23:27:41] *** Quits: didi (~user@user/didi) (Remote host closed the connection)
[23:28:59] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 268 seconds)
[23:30:27] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:31:31] *** Quits: eddof13 (~textual@200.52.90.10) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:32:30] *** Joins: eddof13 (~textual@200.52.90.10)
[23:37:30] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:41:17] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:41:53] *** Joins: gaqwas (~john@dynamic-077-002-072-042.77.2.pool.telefonica.de)
[23:43:01] *** Quits: hirez (~hirez@104.128.237.40) (Quit: Later)
[23:43:40] *** Joins: hirez (~hirez@104.128.237.40)
[23:50:30] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 260 seconds)
[23:52:52] *** Quits: frgo (~frgo@p200300deef0cee002cc65253b45c2e0a.dip0.t-ipconnect.de) (Quit: Leaving...)
[23:55:50] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Quit: bibi!)
