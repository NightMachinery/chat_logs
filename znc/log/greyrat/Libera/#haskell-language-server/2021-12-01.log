[00:06:08] <anton-latukha[m]> No need for `cabal.project`.... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d07e8eeacbdbe4a8e3db495bcc58815aa6be6a02)
[00:06:23] <anton-latukha[m]> * option project-wide (for that project part).
[00:07:16] <anton-latukha[m]> But in `cabal.project` that is also possible:
[00:07:16] <anton-latukha[m]> https://cabal.readthedocs.io/en/3.4/cabal-project.html#package-configuration-options
[00:08:23] <anton-latukha[m]> It is all while `{-# COMPLETE con_1, ..., con_n #-}` is a recommended way.
[00:09:51] <anton-latukha[m]> It is easier to ensure code totality through complete patterns, then to pretend pattern & bottom bugs do not exist.
[00:10:25] <nf> ghc-options is what i did initially
[00:10:39] <anton-latukha[m]> s/It is easier to ensure code totality through complete patterns, then to pretend pattern & bottom bugs do not exist./It is easier to ensure code totality through complete patterns, then to pretend incomplete patterns & bottom sinc bugs do not exist./
[00:11:02] <nf> i don't want to convince the compiler my pattern is complete, i just want to disable the warning
[00:11:33] <nf> maybe this is the line that enables all warnings https://github.com/haskell/hie-bios/blob/master/src/HIE/Bios/Ghc/Check.hs#L78
[00:22:35] <anton-latukha[m]> Well, at this point we arrived at something & my proficiency ran-out.
[00:29:01] <anton-latukha[m]> jneira: can we simplify / redesign the storing of cache? As I have difficulty elegantly sliding `deps` into the picture of above code prioritizaition. Currently there are  `deps` `build` & `bench` stages fight in one cache prioritization queue & I have question why that is the case, why for example to cache `bench` - but that is not my question to ask. While if to cache some `bench` artifacts - that probably should be
[00:29:01] <anton-latukha[m]> done separately, as currently logs are cached. The only thing we need there - is to split the caching into separate caching steps that cache particular `path`s.
[00:35:56] <anton-latukha[m]> If cache stores:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/c8fd58fb0d21d975852623d15c3d534d1c6913a4)
[00:36:19] <anton-latukha[m]> s/dependencies/build dependency storage/
[01:07:05] <mpickering> nf: What is the warning you want to disable?
[01:12:12] <nf> -Wno-incomplete-patterns
[01:14:52] *** Joins: libertyprime (~libertypr@203.211.73.21)
[01:18:11] *** Quits: libertyprime (~libertypr@203.211.73.21) (Client Quit)
[01:25:19] *** Joins: libertyprime (~libertypr@203.211.73.21)
[01:26:19] <jneira[m]> adamCS: i think there is enough useful info to open an issue about, we could comment there how to trace the cause
[01:27:48] <adamCS> jneira[m]: Okay!  I'll try to open the issue tomorrow.  Maybe we can track it down from the crashing when I try to restart.
[01:32:23] <jneira[m]> anton-latukha: not sure if i am understanding it, do you think each workflow should have its own cache? tbh i dont remember why we used those keys
[01:33:28] <jneira[m]> * its own completely separated cache? tbh
[01:35:23] <jneira[m]> i think the idea was each workflow could use the cache from the other one as fallback?
[01:35:42] <jneira[m]> as a good part of deps will be shared
[01:41:57] <anton-latukha[m]> I currently consider https://github.com/haskell/haskell-language-server/pull/2419 MVP.
[01:41:58] <anton-latukha[m]> Currently it has a commit that shows the builds working inside PR. After approval I need to remove that PR trigger commit.
[01:49:03] *** Quits: libertyprime (~libertypr@203.211.73.21) (Quit: leaving)
[02:33:48] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[02:34:01] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[03:30:03] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (*.net *.split)
[03:30:04] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[03:32:25] *** Joins: carbolymer (~carbolyme@dropacid.net)
[04:10:36] *** Joins: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz)
[05:23:47] *** Quits: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz) (Ping timeout: 252 seconds)
[05:39:59] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[08:24:28] *** Quits: jade (jade@lfcode.ca) (Quit: meow)
[08:26:18] *** Joins: jade (jade@lfcode.ca)
[08:29:21] *** Quits: jade (jade@lfcode.ca) (Client Quit)
[08:29:50] *** Joins: jade (~jade@lfcode.ca)
[09:28:03] *** Joins: arrowd (~arr@2.93.55.66)
[09:30:07] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Quit: leaving)
[10:54:11] *** Joins: hololeap (~hololeap@user/hololeap)
[11:57:51] *** Joins: libertyprime (~libertypr@203.211.73.21)
[12:00:31] *** Quits: libertyprime (~libertypr@203.211.73.21) (Client Quit)
[12:45:26] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[13:31:48] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[13:34:56] *** Joins: hololeap (~hololeap@user/hololeap)
[13:46:51] <juhp> I finished building hls-1.5.1 for Fedora in https://copr.fedorainfracloud.org/coprs/petersen/haskell-language-server/
[13:47:31] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[13:57:57] <jneira[m]> nice!
[13:58:49] <jneira[m]> @juhp following our ghc deprecation policy, ghc-8.10.5 will be deprecated for 1.6.0, i guess linux distros still use it?
[13:59:43] <jneira[m]> will be hard to ping package maintainers to try to upgrade to 8.10.7?
[14:05:07] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[14:06:23] *** Joins: hololeap (~hololeap@user/hololeap)
[14:26:34] *** Joins: juhp (~juhp@128.106.188.82)
[14:54:53] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[16:05:49] *** Quits: arrowd (~arr@2.93.55.66) ()
[17:11:09] <anton-latukha[m]> +====
[17:11:09] <anton-latukha[m]> Anybody who knows, and again @jneira most probably:
[17:11:09] <anton-latukha[m]> HLS has increased GitHub CI limits. What is the size of the cache pool, sill 10Gb or more & what number?
[17:11:09] <anton-latukha[m]> As in the caching strategy the pool size is a determining factor.
[17:14:11] <maerwald> the HLS release version doesn't match the HLS cabal version (again)
[17:14:23] <maerwald> https://github.com/haskell/haskell-language-server/blob/0b74792b5168312aebb3f46fbcfbca0f78a00c22/haskell-language-server.cabal#L4
[17:14:35] <maerwald> https://github.com/haskell/haskell-language-server/releases/tag/1.5.1
[17:25:08] <jneira[m]> hmm will note we have to change it in for 1.6.0 
[17:31:48] *** Joins: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz)
[17:36:31] <anton-latukha[m]> @jneira so I would know - what is your timezone - do you ever sleep? üòÅ
[17:36:31] <anton-latukha[m]> Also https://github.com/haskell/haskell-language-server/runs/4381921093?check_suite_focus=true shows further changes to the caching are needed. On merge `fkirc/skip-duplicate-actions` skipped regeneration & current new PR does not find cache. Neither it was finding one before, but ... situation is currently seems a bit overengineeared here.
[17:36:31] <anton-latukha[m]> I would go re-read the GitHub docs on chaching & look at some articles to refresh details & would work on the situation.
[17:36:45] <anton-latukha[m]> s/chaching/caching/
[17:36:56] *** Quits: libertyprime (~libertypr@118-92-79-43.dsl.dyn.ihug.co.nz) (Ping timeout: 252 seconds)
[17:45:11] *** Joins: arrowd (~arr@2.93.55.66)
[17:46:37] <anton-latukha[m]>  * @jneira so I would know - what is your timezone - do you ever sleep? üòÅ... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e61be034f8a53a75c7a4e1bcf68522d51d621473)
[17:50:50] <anton-latukha[m]> Well, I need to ask to merge https://github.com/haskell/haskell-language-server/pull/2426 asap.
[17:55:56] <anton-latukha[m]> > The cache is scoped to the key and branch. The default branch cache is available to other branches.
[17:55:56] <anton-latukha[m]> That is the key statement. So `master` cache indeed should stay intact almost at all costs.
[17:59:45] <anton-latukha[m]> It may be said that the first priority is to store & share all build artifacts of `master` before thinking about caching inside PRs.
[18:24:17] *** Joins: shapr` (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:26:10] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[19:15:01] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Ping timeout: 252 seconds)
[19:24:31] *** shapr` is now known as shapr
[19:25:53] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[20:55:46] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Ping timeout: 256 seconds)
[21:03:59] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[22:09:18] <jneira[m]> > <@anton-latukha:matrix.org> @jneira so I would know - what is your timezone - do you ever sleep? üòÅ... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/885b4630e1723237431967a89b02aea772cdf6ce)
[22:10:40] <jneira[m]> > <@anton-latukha:matrix.org> > The cache is scoped to the key and branch. The default branch cache is available to other branches.
[22:10:40] <jneira[m]> > 
[22:10:40] <jneira[m]> > That is the key statement. So `master` cache indeed should stay intact almost at all costs.
[22:10:40] <jneira[m]> but why we have to remove the build on master commits?
[22:10:51] <jneira[m]>  * yeah less time than i should :-P , i am in CET
[22:11:03] <anton-latukha[m]> Well, I went so far into CI refactoring today, that I might as well: https://github.com/haskell/haskell-language-server/issues/2422
[22:12:54] <jneira[m]> afaiu from your quote cache are isolated with this flow: master -> base branch (master almost always) -> pr branch
[22:13:48] <anton-latukha[m]> jneira[m]: That meant that cache building in the PRs should not depleate the cache pool with may lead for removal of `master` branch cache - & the `master` branch cache should always be present in the cache pool.
[22:15:01] <jneira[m]> ah due to cache size limit
[22:15:38] <jneira[m]> github increased out concurrent jobs limit, not sure about hte cache size
[22:16:41] <anton-latukha[m]> But as far as docs explain it - pool quota should happen only if contributor does PRs from the internal branch in the repo. As if contributor builds from a fork - docs allude that that cache counts into 10G storage quote of a fork. But really only internal GitHub code knows the truth of how GitHub counts cache quota.
[22:18:01] <jneira[m]> but the build on master commit is, well, in master scope, what is the difference with building it with cron? sorry if i am missing something obvious i cant see right now
[22:21:27] <anton-latukha[m]> <jneira[m]> "github increased out concurrent..." <- In the new PR I addressed the cache situation, the size of caches should drop 2-3 times & effectivity should increase. `-bench-` cache essentially stored the same things the second time. & sources take up ~40% of the cache & they were stored both in `*-build-*` & `*-bench-*` - so that is essentially ~1*0.5*0.6 reduction.
[22:22:15] <anton-latukha[m]> s/In the new PR I addressed the cache situation, the size of caches should drop 2-3 times & effectivity should increase. `-bench-` cache essentially stored the same things the second time. & sources take up ~40% of the cache & they were stored both in `*-build-*` & `*-bench-*` - so that is essentially ~1*0.5*0.6 reduction./In the new PR I addressed the cache situation, the size of caches should drop 2-3 times &
[22:22:15] <anton-latukha[m]> effectivity should increase. `-bench-` cache essentially stored the same things the second time. & sources take up ~40% of the cache & they were stored both in `*-build-*` & `*-bench-*` - so that is essentially ~(1 - 0.5*0.6)=70% size reduction./
[22:22:34] <anton-latukha[m]> s/In the new PR I addressed the cache situation, the size of caches should drop 2-3 times & effectivity should increase. `-bench-` cache essentially stored the same things the second time. & sources take up ~40% of the cache & they were stored both in `*-build-*` & `*-bench-*` - so that is essentially ~1*0.5*0.6 reduction./In the new PR I addressed the cache situation, the size of caches should drop 2-3 times &
[22:22:34] <anton-latukha[m]> effectivity should increase. `-bench-` cache essentially stored the same things the second time. & sources take up ~40% of the cache & they were stored both in `*-build-*` & `*-bench-*` - so that is essentially ~(1 - 0.5*0.6)=70% size decrease./
[22:22:58] <anton-latukha[m]> Also, as sources took 40% & all binary caches stored pretty much the same thing - I created a separate cache for sources. & then understood that `~/.cabal/packages` can be shared between all OSes & GHC versions.
[22:23:59] <anton-latukha[m]> As:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/a7810997c66e2e2dcc4f0ec85de1169208fe2bb5)
[22:25:13] <anton-latukha[m]> In other words Cabal source code storage can be reused between all OS & GHC runs.
[22:25:59] <anton-latukha[m]> (& I just understood that depending it on hash would be a bad idea, it should depend on the Hackage revision used)
[22:30:54] <anton-latukha[m]> There are `snapshot.json` & ` timestamp.json` in the same directory, which is a chicken & the egg problem (to retrieve cache the timestemp must be known, which would be known after cache retrieval).
[22:37:51] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[22:38:21] *** Joins: hololeap (~hololeap@user/hololeap)
[22:43:41] <anton-latukha[m]> +====
[22:43:41] <anton-latukha[m]> I stumbled into this question several times:
[22:43:41] <anton-latukha[m]> How to get the `index-state` timestamp from Cabal?
[22:43:41] <anton-latukha[m]> How at all to output the basic config information from it, as path to `store` path to `packages` & the current Hackage revision in use.
[22:44:12] <anton-latukha[m]>  * +====
[22:44:15] <anton-latukha[m]> I stumbled into this question several times:
[22:44:20] <anton-latukha[m]> How to get the `index-state` timestamp from Cabal?
[22:45:13] <anton-latukha[m]> How to output the basic Cabal environment config information, like:
[22:45:19] <anton-latukha[m]> * path to `store`
[22:45:26] <anton-latukha[m]> * path to `packages`
[22:45:37] <anton-latukha[m]>   * the current Hackage revision in use
[23:16:23] *** Quits: arrowd (~arr@2.93.55.66) ()
[23:17:50] <jneira[m]> for paths a way could be set CABAL_DIR to a known location
[23:18:46] <jneira[m]> idk about index-state, it is shown if you do a cabal update but, well, you update it
[23:20:25] <jneira[m]> but we have the hackage index set in the cabal.project, so we could read it from the file 
[23:25:09] <anton-latukha[m]> I asked in the Cabal/Hackage channel &:
[23:25:13] <anton-latukha[m]> https://matrix.to/#/!VeTpfwcnSnUZwjyccf:libera.chat/$bYl7eDY2N_urSUVGZlXlrTb3V1C02y-NHtKILbA1kW4?via=libera.chat&via=matrix.org&via=chreekat.net
[23:26:13] <jneira[m]> <jneira[m]> "but the build on master commit..." <- it is to avoid redundant builds?
[23:32:03] <anton-latukha[m]> <jneira[m]> "it is to avoid redundant builds?" <- Caching the current `master` & the Hackage state is the most important thing in the caching. For reassurance running the build once a day is cheap, if the time-based idempotency happens somewhere in the project configuration stack, as for exampe if some internal config would get unpinned Hackage timestamp. If the HLS project configs would be idempotent - once a day build
[23:32:03] <anton-latukha[m]> run can be removed of course.
[23:35:21] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 252 seconds)
[23:35:36] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Remote host closed the connection)
[23:38:10] *** Joins: juhp (~juhp@128.106.188.82)
