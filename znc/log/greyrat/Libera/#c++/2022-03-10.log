[00:00:01] <PJBoy> the container_operable is a bit more sophisticated than the container concept, so we might have jumped a step >_>
[00:00:05] <Guest54> imMute no worries, thanks. But I think passing optional<string>, like Query("Insert to set, %c = %s", colName, colValue) where colValue is optional<string> is definitely UB right? I can't tell from the code if it handles that case
[00:00:39] <imMute> Guest54: that example wouldn't compile I don't think
[00:01:10] <Guest54> it does compile:)  I'm a bit surprised too, and it's literally the example I described
[00:01:24] <PJBoy> oh you know what
[00:01:25] <imMute> I'm not seeing a ctor for Query that takes 3 arguments
[00:01:32] <PJBoy> I assumed you wrote printf rather than query
[00:01:52] <PJBoy> in that case, yeah it is possible that query can deal with an optional string correctly
[00:02:02] <PJBoy> provided it's not a variadic function
[00:02:16] <imMute> oh wait, I see it now: https://github.com/facebook/squangle/blob/main/squangle/mysql_client/Query.h#L552
[00:02:29] <imMute> PJBoy: it's not variadic, it uses parameter packs
[00:02:42] <PJBoy> yup, so that stands a chance of being OK
[00:02:56] <imMute> Guest54: not necessarily UB, but it depends on how the library defines "%s" and whether string_view fits into that
[00:03:46] <Guest54> imMute hmm I see thanks folks for helping:)  I'll browse the lib a bit more to see if I can find how it interprets %s
[00:04:21] <imMute> it should be in the documentation for the Query class
[00:05:27] <PJBoy> there's docs at the top of the file
[00:05:47] <PJBoy> it's not clear though
[00:06:12] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[00:06:20] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[00:06:43] *** Joins: bindu (~bindu@user/bindu)
[00:06:49] <Guest54> yep I do some extracting of values in the code https://github.com/facebook/squangle/blob/main/squangle/mysql_client/Query.h#L452
[00:07:22] <PJBoy> yeah, definitely looks like optionals and strings are designed to work
[00:08:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[00:15:05] *** Joins: magla (~gelignite@d5367992.access.ecotel.net)
[00:16:03] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:19:28] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:19:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[00:19:42] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[00:20:58] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[00:24:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[00:27:13] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[00:29:45] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[00:33:20] *** Joins: KAHR-Alpha_ (~Alpha@2a01cb0d024a660019779ab8472b4c0f.ipv6.abo.wanadoo.fr)
[00:33:37] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:35:54] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[00:36:04] *** Joins: xkuru (~xkuru@user/xkuru)
[00:38:29] <Alipha> quartz: much of the purpose of concepts is simply documenting what operations your parameters must support, and to give cleaner error messages when you try to pass in a parameter which doesn't support those operations.  yes, you're writing a generic sum function, but even though it's generic, it won't work with ALL types. if you have `typename Container` as the template parameter, the `typename` specifies it'll
[00:38:31] <Alipha> work for all types, but it doesn't. if you pass in `5` as the Container, then you'll get an error, e.g.: https://godbolt.org/z/3Gd8hqja3 Which, look at that error message. That's a completely confusing error message.
[00:39:22] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:2f9c) (Quit: Client closed)
[00:41:21] <Alipha> whereas this is a little nicer: https://godbolt.org/z/xadcbbsT6
[00:42:12] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[00:45:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:48:38] *** Joins: unyu (~pyon@user/pyon)
[00:49:28] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[00:55:15] *** Quits: nuh^ (~nuh@50.232.121.75) (Remote host closed the connection)
[00:57:57] *** Joins: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de)
[00:58:58] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 272 seconds)
[00:59:56] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:3148:cd0b:417b:6958)
[01:00:57] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:05:00] *** Quits: magla (~gelignite@d5367992.access.ecotel.net) (Quit: Stay safe!)
[01:08:07] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:08:36] *** Quits: nq (~nq@82.78.21.171) (Ping timeout: 256 seconds)
[01:11:35] *** Joins: nq (~nq@82.78.21.171)
[01:14:26] *** Quits: VIle` (~Vile@73.182.253.255) (Read error: Connection reset by peer)
[01:17:29] *** Joins: VIle` (~Vile@73.182.253.255)
[01:18:37] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:18:48] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[01:19:04] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:19:16] *** Joins: sweetsymph_ (uid509475@id-509475.lymington.irccloud.com)
[01:19:51] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:3148:cd0b:417b:6958) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:20:28] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:23:00] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:3148:cd0b:417b:6958)
[01:26:47] *** Joins: xkuru (~xkuru@user/xkuru)
[01:27:33] <zz> https://wandbox.org/permlink/zWwmPzCxVxXxWmDZ  can people see this? I'm just getting a freak Javascript error
[01:31:56] *** Joins: slidercrank (~slidercra@user/slidercrank)
[01:32:30] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:35:06] <CarloWood> I see it
[01:35:43] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[01:36:08] *** Joins: Guest7498 (~Guest@host202.190-137-39.telecom.net.ar)
[01:36:19] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[01:36:29] <PJBoy> I see it on my chrome variants
[01:38:12] *** Quits: Nutcrawler (~sergio@217-180-232-30.sycmilaa.metronetinc.net) (Read error: Connection reset by peer)
[01:38:55] *** Joins: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at)
[01:39:26] *** Joins: blackout69 (~blackout6@37.183.230.121)
[01:43:37] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:44] *** ChanServ sets mode: +v npaperbot
[01:45:46] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:49:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[01:49:58] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[01:52:37] *** KAHR-Alpha_ is now known as KAHR-Alpha
[01:52:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:52:53] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a660019779ab8472b4c0f.ipv6.abo.wanadoo.fr) (Changing host)
[01:52:53] *** Joins: KAHR-Alpha (~Alpha@aether/dev/KAHR-Alpha)
[01:54:07] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:54:31] *** Quits: proller (~p@2a02:6b8:b081:b65c::1:b) (Ping timeout: 245 seconds)
[01:54:56] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:56:20] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[01:59:51] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[02:00:41] *** Joins: hashfunce9c (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:01:10] *** Joins: xkuru (~xkuru@user/xkuru)
[02:03:02] <zz> Well then I can ask.. with B not having a virtual dtor, that looks dangerous, doesn't it
[02:03:28] *** Quits: talisein_ (~talisein@user/talisein) (Quit: WeeChat 3.5-dev)
[02:03:37] *** Quits: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at) (Ping timeout: 240 seconds)
[02:06:01] <imMute> without the virtual dtor it "smells" to me, but I think make_unique remembers which dtor to call, so it should be safe I think??
[02:06:08] <imMute> or is it shared_ptr that remembers...
[02:06:27] <zz> shared_ptr would remember, but unique_ptr has the unique_ptr<B,D> D argument
[02:07:07] <imMute> ah right.  so no, that doesn't sound safe
[02:07:45] *** Joins: proller (~p@80.240.216.69)
[02:07:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:12:01] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:12:26] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:13:48] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[02:15:04] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[02:15:37] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[02:17:14] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[02:17:25] *** Quits: x_kuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[02:18:32] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:18:34] <evangeline> I have the following code https://godbolt.org/z/6anYv1fjj: I need to extend Barn to add the name of the barn to it (I can use whatever I want, but Barn must not change - backwards compatibility). The problem is that Barn is actually a variable length object, so if I inherit "BarnName : Barn", then BarnName variables will still reference part of the Barn object (the variable part). Is there any way to extend it - I guess adapter is not a good option here?
[02:20:32] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[02:24:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[02:27:25] <evangeline> I mean a decorator pattern, which is more for keeping the functionality and adding additional functionality (in regards to behavior). However I have to preserve the memory layout ... something like serialization/deserialization code. Not sure if there is any pattern that I can use ...
[02:28:46] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:29:02] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:3148:cd0b:417b:6958) (Ping timeout: 240 seconds)
[02:29:53] *** Quits: hashfunce9c (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[02:30:46] * imMute runs away from that code.
[02:30:59] *** Joins: proller (~p@2a02:6b8:b081:4::1:26)
[02:31:09] <evangeline> imMute, I know ...
[02:31:21] <imMute> good luck though!
[02:32:18] <evangeline> imMute, what if I was able to change even the Barn class, how would you do it with supporting variable num of IDs
[02:32:29] <kalven> wtf
[02:32:45] *** Quits: pizdets (~pizdets@183.182.110.6) (Ping timeout: 252 seconds)
[02:34:01] *** Joins: pizdets (~pizdets@183.182.114.253)
[02:34:01] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[02:40:54] <evangeline> imMute, if I don't use inheritance, this works: https://godbolt.org/z/4YW17Yc5q (it's ugly)
[02:43:15] <evangeline> imMute, can I use any programming principle here to make it better?
[02:46:04] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[02:46:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:46:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[02:46:31] *** Joins: ferdna (~ferdna@user/ferdna)
[02:49:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:49:46] *** Joins: nope__ (~maxwell@c-98-34-36-32.hsd1.il.comcast.net)
[02:50:10] <nope__> how would I go about forcefully bringing a window to the front in Xlib, even if a window I didn't create is currently focused?
[02:50:11] <nope__> ik that interfacing with xlib directly (and forcing a popup instead of asking the WM to make your app flash-y in the taskbar) is frowned upon, but not doing so would kinda defeat the purpose of my application
[02:52:06] *** Joins: badone (~badone@209.132.189.152)
[02:54:26] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:56:29] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[02:59:04] *** Joins: edman007 (~edman007@user/edman007)
[02:59:40] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d59b:7225:122:f855) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:01:03] <edman007> Hi, so I'm tyring to make a template for a class that holds some other class, and I can extend it in a generic way to have different implementations, but I'm getting a problem that I guess I don't understand why, this is my test case: https://pastebin.com/NxCFKvhe and I get 'error: cannot convert ‘Factory<Mod, Controller>*’ to ‘Factory<ModType, A<ModType> >*’ in assignment'
[03:01:31] <edman007> and I guess why can't it convert, Mod is derived from ModType, and Controller is derived from A<ModType>
[03:02:33] <edman007> so shouldn't `Factory<ModType, A<ModType> >* f = new Factory<Mod, Controller>();` be legal?
[03:03:22] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[03:08:24] <zz> template parameters don't convert from Derived to Base
[03:08:28] <zz> like arguments do.
[03:11:47] *** Quits: blackout69 (~blackout6@37.183.230.121) (Quit: Leaving.)
[03:15:49] <edman007> thanks
[03:18:12] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[03:18:16] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:aaa1:59ff:fe3c:ddb4) (Ping timeout: 245 seconds)
[03:20:30] *** Joins: ElPresidente (~ElPreside@172-125-150-28.lightspeed.tukrga.sbcglobal.net)
[03:22:10] *** Quits: Guest7498 (~Guest@host202.190-137-39.telecom.net.ar) (Remote host closed the connection)
[03:22:52] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[03:24:57] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[03:26:48] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[03:31:58] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[03:32:58] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[03:37:09] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:37:38] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[03:38:50] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:43:21] *** Quits: reset (~reset@user/reset) (Quit: reset)
[03:43:26] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 260 seconds)
[03:45:35] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[03:46:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:47:29] *** Joins: cheater (~Username@user/cheater)
[03:48:31] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[03:48:31] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Write error: Connection reset by peer)
[03:48:31] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Write error: Connection reset by peer)
[03:48:31] *** Quits: bindu (~bindu@user/bindu) (Write error: Connection reset by peer)
[03:48:31] *** Quits: kevr (~kevr@user/kevr) (Write error: Connection reset by peer)
[03:48:31] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Write error: Connection reset by peer)
[03:48:31] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Write error: Connection reset by peer)
[03:48:31] *** Quits: teepee (~teepee@openscad/teepee) (Write error: Connection reset by peer)
[03:48:31] *** Quits: spithash (~spithash@user/spithash) (Write error: Connection reset by peer)
[03:48:36] *** Quits: andreasbuhr (~quassel@p549db5f7.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:48:56] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Ping timeout (120 seconds))
[03:49:04] *** Quits: foobaz2124846 (~foobaz212@152.37.103.80) (Quit: Ping timeout (120 seconds))
[03:49:09] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[03:49:19] *** Joins: teepee (~teepee@openscad/teepee)
[03:49:22] *** Joins: foobaz2124846 (~foobaz212@152.37.103.80)
[03:49:25] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[03:49:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[03:49:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:49:57] *** Joins: fullstop (~fullstop@user/fullstop)
[03:50:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:50:27] *** Joins: kevr (~kevr@user/kevr)
[03:50:45] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:50:54] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[03:50:54] *** Joins: bindu (~bindu@user/bindu)
[03:50:56] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[03:51:08] <fullstop> Hi all.  I'm working on a template class (this is for an assignment -- I'm not looking for answers just trying to understand!) and I'm trying to overload the indirection operator and I want to handle the const case.
[03:51:27] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[03:51:39] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:51:50] <fullstop> I can define the method just fine: const T& operator*() const; .. but I can't seem to find any sort of call which will choose that overloaded method.
[03:52:39] <fullstop> .. so I'm starting to question my g++ version, although I suspect that this is unlikely to be the problem.
[03:53:18] *** Joins: spithash (~spithash@user/spithash)
[03:53:33] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[03:53:44] <zz> overload with what, though
[03:54:09] *** Joins: unyu (~pyon@user/pyon)
[03:54:41] <fullstop> zz: the other variant, T& operator*() works as expected; T x = *obj;
[03:55:34] <fullstop> If we take a step back, what I'm really asking is what sort of syntax would use a const indirection operator?
[03:55:34] *** Quits: lowden (~shugo@ctrl-c.club) (Quit: WeeChat 3.0.1)
[03:56:18] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:56:45] <zz> https://wandbox.org/permlink/ZnnkOEWzpFNuVXOl  I don't see the problem with const-overloading
[03:58:01] <fullstop> zz: give me a minute to look that over.  Thanks for the response!
[03:59:44] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:02:12] *** Joins: talisein (~talisein@user/talisein)
[04:04:17] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:04:44] <fullstop> got it, thanks zz.
[04:08:18] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[04:11:24] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[04:12:29] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:14:43] <fluter> hi,
[04:15:01] <fluter> i'm having a crash in a range for loop, is there a way to get current index in gdb?
[04:15:21] *** Joins: xkuru (~xkuru@user/xkuru)
[04:15:29] <fluter> for(auto &e : myVector) { ... } how to get the index in the vector when the crash happened?
[04:18:07] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[04:18:53] <zz> size_t idx = &e - myVector.data();
[04:21:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:21:32] <fluter> sorry in gdb?
[04:21:41] <fluter> it says cann't evaluate inline function
[04:22:14] *** Joins: walterwhip (~www@user/walterwhip)
[04:23:46] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[04:24:30] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 260 seconds)
[04:25:11] *** sweetsymph_ is now known as sweetsymph
[04:25:21] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[04:25:22] *** Quits: foobaz2124846 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:25:29] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[04:25:56] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Max SendQ exceeded)
[04:26:25] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[04:28:02] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Max SendQ exceeded)
[04:28:30] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[04:28:32] *** Joins: jplejacq (~jplejacq@68.71.169.160)
[04:28:41] *** Parts: jplejacq (~jplejacq@68.71.169.160) ()
[04:30:57] *** Quits: proller (~p@2a02:6b8:b081:4::1:26) (Ping timeout: 240 seconds)
[04:31:07] *** Quits: nope__ (~maxwell@c-98-34-36-32.hsd1.il.comcast.net) (Quit: Konversation terminated!)
[04:32:08] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:32:55] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:33:38] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:33:38] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:33:52] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[04:33:53] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[04:36:15] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[04:36:22] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[04:38:29] *** Quits: yhirose3 (~yhirose3@user/yhirose3) (Quit: WeeChat 2.8)
[04:41:21] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:41:21] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:41:28] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[04:42:55] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[04:43:21] *** Joins: teepee (~teepee@openscad/teepee)
[04:45:02] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[04:46:16] *** Joins: Betal (~Betal@user/betal)
[04:48:02] *** Joins: ymwm__ (~yingmanwu@117.26.69.144)
[04:50:16] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:51:11] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[04:53:40] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[04:56:18] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[04:58:42] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[05:06:07] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:11:24] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[05:16:50] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-1c52-7a09-75d4-5be2.res6.spectrum.com) (Remote host closed the connection)
[05:18:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[05:18:57] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 240 seconds)
[05:19:27] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Remote host closed the connection)
[05:26:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:26:40] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[05:31:00] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 240 seconds)
[05:33:26] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Read error: Connection reset by peer)
[05:35:44] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[05:36:58] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[05:37:25] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:5a9:1bfd:dfd5:df91)
[05:37:25] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:5a9:1bfd:dfd5:df91) (Changing host)
[05:37:25] *** Joins: skapata (~Skapata@user/skapata)
[05:37:56] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[05:39:44] *** Joins: frost (~frost@user/frost)
[05:41:59] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 256 seconds)
[05:42:15] *** Joins: xiongxin (~Thunderbi@223.104.63.14)
[05:43:07] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[05:43:46] *** Joins: npaperbot2 (~npaperbot@dodecahedron.m-ou.se)
[05:44:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[05:48:34] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[05:50:17] *** Joins: Greasebee (~Greasebee@pool-71-190-150-251.nycmny.fios.verizon.net)
[05:50:33] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:51:48] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[05:54:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[05:54:44] *** Joins: Posterdati (~posterdat@user/Posterdati)
[05:55:01] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:00:08] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[06:00:21] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[06:03:29] *** Joins: fldme (~fldme@178.49.152.42)
[06:04:49] *** Joins: Billiard_ (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com)
[06:05:37] *** Quits: Billiard_ (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com) (Remote host closed the connection)
[06:05:47] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:05:54] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[06:06:04] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[06:06:07] *** Quits: Billiard (~jordan@gateway/vpn/pia/billiard) (Ping timeout: 256 seconds)
[06:06:21] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:06:34] *** Joins: Billiard (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com)
[06:09:50] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:16:37] *** Joins: Inline__ (~Inline@p200300cd470c9c002556fbf58fa37daf.dip0.t-ipconnect.de)
[06:18:39] *** Quits: kst (~user@cpe-70-95-182-43.san.res.rr.com) (Remote host closed the connection)
[06:18:58] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[06:19:02] *** Quits: Inline (~Inline@p200300cd4709fe0020393da7e35c629b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:23:00] *** Joins: zer0x (~zer0x@58.186.217.233)
[06:24:13] *** Quits: KAHR-Alpha (~Alpha@aether/dev/KAHR-Alpha) (Ping timeout: 240 seconds)
[06:25:17] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:28aa:e73d:ee36:3353)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:31:38] *** Quits: Billiard (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:32:16] *** Joins: Billiard (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com)
[06:33:55] *** Joins: unyu (~pyon@user/pyon)
[06:35:01] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[06:43:11] *** Quits: xiongxin (~Thunderbi@223.104.63.14) (Ping timeout: 256 seconds)
[06:44:08] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[06:44:22] *** Parts: v4mp (~v4mp@user/v4mp) ()
[06:44:25] *** Joins: smeso (~smeso@user/smeso)
[06:45:46] *** Quits: fldme (~fldme@178.49.152.42) (Quit: Client closed)
[06:46:19] *** Quits: randm (~randm@2001:19f0:5:1de9:5400:3ff:fe98:1bdd) (Quit: Leaving.)
[06:46:56] *** Joins: randm (~randm@mx.rayprimus.com)
[06:50:50] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:50:50] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[06:51:59] *** Quits: millido (~millido@84.210.150.128) (Read error: Connection reset by peer)
[06:52:57] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 240 seconds)
[06:54:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:54:31] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[06:55:02] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:28aa:e73d:ee36:3353) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:57:52] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[06:58:43] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:28aa:e73d:ee36:3353)
[07:00:45] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:05:57] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5c5f:ad85:d2cd:496f)
[07:07:37] *** Joins: millido (~millido@84.210.150.128)
[07:08:36] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[07:08:44] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[07:09:32] <cytokine_storm>     for(int j=0;j<3;j++){
[07:09:32] <cytokine_storm>       cout << get<j>(tuple) <<endl;
[07:09:32] <cytokine_storm>  
[07:09:33] <cytokine_storm> }
[07:09:48] <cytokine_storm> i cannot do that
[07:10:17] <cytokine_storm> but i can do    cout << get<0>(tuple) <<endl;
[07:10:22] <cytokine_storm>    cout << get<1>(tuple) <<endl;
[07:10:29] <cytokine_storm>    cout << get<2>(tuple) <<endl;
[07:10:31] <cytokine_storm> why
[07:13:13] <kalven> cytokine_storm: because the numeric argument has to be a compile time constant
[07:20:35] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:21:24] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Ping timeout: 240 seconds)
[07:28:46] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[07:29:03] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[07:30:03] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:31:28] *** Quits: Billiard (~jordan@2603-6000-9803-8ab5-0000-0000-0000-065a.res6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[07:32:17] *** Joins: Billiard (~jordan@cpe-75-87-214-101.new.res.rr.com)
[07:34:04] *** Quits: nostar (~nostar@68.51.221.108) (Quit: Leaving)
[07:37:33] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:39:02] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:40:32] *** Quits: sreve (~quassel@p549d7045.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:41:08] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[07:41:18] *** Joins: sreve (~quassel@p4ff44e9b.dip0.t-ipconnect.de)
[07:43:37] *** Joins: avesatanas[m] (~avesatana@2001:470:69fc:105::1:d083)
[07:45:58] <Alipha> !paste
[07:45:59] <nolyc> Paste your test case to https://godbolt.org/ or http://coliru.stacked-crooked.com/ or https://wandbox.org/ or another pastebin that can compile code. Do _not_ paste to the channel. See the testcase checklist at http://eel.is/c++/testcase
[07:46:08] <Alipha> Oh, he left
[07:51:32] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:e8b:fc82:bd93:1271:89aa:cd6e)
[07:51:36] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:52:38] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:28aa:e73d:ee36:3353) (Ping timeout: 250 seconds)
[07:54:30] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 260 seconds)
[07:55:09] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:55:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:56:02] *** Quits: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi) (Ping timeout: 256 seconds)
[07:56:39] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[07:57:53] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7)
[07:58:03] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[07:58:17] *** Joins: rgrinberg (~textual@187.223.141.66)
[08:00:08] *** Quits: Billiard (~jordan@cpe-75-87-214-101.new.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[08:00:43] *** Joins: Billiard (~jordan@cpe-75-87-214-101.new.res.rr.com)
[08:00:52] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 250 seconds)
[08:02:30] *** Quits: zer0x (~zer0x@58.186.217.233) (Remote host closed the connection)
[08:02:48] *** Joins: zer0x (~zer0x@58.186.217.233)
[08:02:51] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[08:06:45] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:07:37] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:12:07] *** Joins: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi)
[08:12:38] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[08:12:58] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[08:14:18] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[08:15:20] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[08:19:05] *** Joins: comment_system[m (~commentsy@2001:470:69fc:105::1:ca7a)
[08:21:54] <comment_system[m> which is faster (emplace or insert)
[08:26:28] *** Joins: s1b1 (~s1b1@user/s1b1)
[08:26:28] <Alipha> comment_system[m: if you don't already have an object of the type that you need to insert, then emplace is potentially faster
[08:28:28] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[08:29:03] *** Joins: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-134-170.cust.tzulo.com)
[08:29:08] <cytokine_storm> kalven: thanks
[08:29:58] <comment_system[m> Alipha: got it thank you
[08:34:57] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7) (Ping timeout: 240 seconds)
[08:36:14] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[08:39:11] *** Quits: AssKoala (~asskoala@user/asskoala) (Read error: Connection reset by peer)
[08:39:22] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[08:39:23] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[08:39:23] *** Joins: AssKoala (~asskoala@user/asskoala)
[08:40:30] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[08:40:45] *** Joins: kevr (~kevr@user/kevr)
[08:41:56] <Alipha> comment_system[m: if you already have an object of the element type, then I'd expect them to both be the same speed, as they'd both just copy/move the object.
[08:46:28] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Ping timeout: 256 seconds)
[08:47:16] *** Quits: Greasebee (~Greasebee@pool-71-190-150-251.nycmny.fios.verizon.net) (Quit: Client closed)
[08:47:53] *** Joins: v4mp (~v4mp@user/v4mp)
[08:51:19] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[08:52:05] *** Joins: hinata (~hinata@157.33.96.125)
[08:52:17] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:53:40] *** Quits: ckdCreations (~ckdCreati@147.55.130.33) (Read error: Connection reset by peer)
[08:53:59] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[08:55:52] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[08:55:54] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 250 seconds)
[08:56:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[08:57:57] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[08:58:04] *** Quits: emerent (~quassel@p200300cd5743c360ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:59:03] *** Joins: emerent (~quassel@p200300cd5743c375ba27ebfffed28a59.dip0.t-ipconnect.de)
[09:02:34] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:dac9:5fc4:5126:1fdf)
[09:07:11] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:07:12] *** Quits: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-134-170.cust.tzulo.com) (Quit: Leaving)
[09:07:36] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[09:11:28] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[09:16:15] *** Quits: majors (~majors@user/majors) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[09:17:30] *** Joins: majors (~majors@user/majors)
[09:25:16] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[09:26:19] *** nortoh_ is now known as nortoh
[09:26:19] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[09:26:19] *** Joins: nortoh (~nortoh@user/nortoh)
[09:28:06] *** Joins: xiongxin (~Thunderbi@223.104.63.14)
[09:29:26] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[09:32:29] *** Quits: les (znc@user/les) (Ping timeout: 250 seconds)
[09:32:38] *** Joins: blackbeard420_ (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[09:32:49] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Read error: Connection reset by peer)
[09:33:06] *** Joins: les (znc@user/les)
[09:39:07] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:39:37] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:43:23] *** Quits: cytokine_storm (~user@user/cytokine-storm/x-1083107) (Ping timeout: 256 seconds)
[09:43:38] *** Quits: npaperbot2 (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:45] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:45] *** ChanServ sets mode: +v npaperbot
[09:50:41] *** Joins: Dumbledore (~Prof_Dumb@2409:4042:4d9d:f98e:dfa6:7b7c:6002:97f5)
[09:52:57] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:e8b:fc82:bd93:1271:89aa:cd6e) (Ping timeout: 240 seconds)
[09:53:00] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:53:01] *** Quits: zer0x (~zer0x@58.186.217.233) (Ping timeout: 256 seconds)
[09:53:04] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[09:54:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:56:40] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:58:07] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:58:53] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:dac9:5fc4:5126:1fdf) (Quit: Leaving)
[10:00:00] *** Quits: Dumbledore (~Prof_Dumb@2409:4042:4d9d:f98e:dfa6:7b7c:6002:97f5) (Quit: Leaving)
[10:02:20] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d9d:f98e:858b:e740:1937:c061)
[10:02:20] *** Quits: xiongxin (~Thunderbi@223.104.63.14) (Read error: Connection reset by peer)
[10:03:42] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[10:05:19] *** Joins: wolf2k_huh (~wolfman20@2600:1700:3211:4140:91da:df90:ed86:cbbf)
[10:06:56] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:08:46] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:09:00] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:09:00] *** Quits: wolf2k_ouch (~wolfman20@2600:1700:3211:4140:5466:554d:d1cb:c430) (Ping timeout: 240 seconds)
[10:09:36] *** Joins: the_lanetly_052_ (~the_lanet@194.135.166.251)
[10:10:49] *** Quits: the_lanetly_052_ (~the_lanet@194.135.166.251) (Max SendQ exceeded)
[10:11:50] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:12:05] *** Joins: the_lanetly_052_ (~the_lanet@194.135.168.203)
[10:12:42] *** Quits: v4mp (~v4mp@user/v4mp) ()
[10:12:52] *** Quits: the_lanetly_052_ (~the_lanet@194.135.168.203) (Max SendQ exceeded)
[10:14:34] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.203)
[10:15:09] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.203) (Max SendQ exceeded)
[10:15:38] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.251)
[10:16:25] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.251) (Max SendQ exceeded)
[10:18:12] *** Quits: rgrinberg (~textual@187.223.141.66) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:18:44] *** Joins: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at)
[10:24:33] *** Joins: zer0x (~zer0x@58.186.217.233)
[10:25:00] *** Joins: xkuru (~xkuru@user/xkuru)
[10:25:06] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[10:25:19] *** Quits: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at) (Ping timeout: 256 seconds)
[10:32:15] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[10:32:55] *** Joins: rgrinberg (~textual@2806:101e:7:20ec:a0ff:ed0f:a27c:5f4)
[10:34:06] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[10:35:58] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[10:36:28] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:36:35] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[10:38:31] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[10:39:25] *** Quits: hinata (~hinata@157.33.96.125) (Quit: Leaving)
[10:39:29] *** Joins: xiongxin (~Thunderbi@223.104.63.14)
[10:41:18] *** Quits: xiongxin (~Thunderbi@223.104.63.14) (Read error: Connection reset by peer)
[10:41:25] *** Joins: karakedi (~eAC53C340@user/karakedi)
[10:42:38] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[10:44:10] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[10:48:14] *** Quits: rgrinberg (~textual@2806:101e:7:20ec:a0ff:ed0f:a27c:5f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:50:07] *** Quits: vqueiroz (uid340368@id-340368.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:50:30] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[10:53:43] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:56:26] *** Joins: ferdna (~ferdna@user/ferdna)
[10:56:35] *** Joins: Payam98 (~Payam@138.106.57.131)
[10:57:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:00:59] *** Joins: namkeleser (~namkelese@101.175.104.107)
[11:01:06] <namkeleser> What are the best resources to learn C++?
[11:03:03] *** Joins: zer0x_ (~zer0x@58.186.217.233)
[11:03:17] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[11:04:40] *** Joins: BluesBoy (~bboy@user/bluesboy)
[11:06:20] *** Quits: zer0x (~zer0x@58.186.217.233) (Ping timeout: 272 seconds)
[11:07:15] *** Joins: jsbach (~jsbach@62.218.23.188)
[11:09:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2879:e478:9b7d:e873)
[11:12:40] *** Quits: jsbach (~jsbach@62.218.23.188) (Ping timeout: 272 seconds)
[11:13:54] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d9d:f98e:858b:e740:1937:c061) (Quit: Leaving)
[11:15:37] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[11:17:43] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Quit: xiongxin)
[11:18:02] *** Joins: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd)
[11:19:04] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[11:20:52] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[11:22:27] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:24:37] *** Joins: jsbach (~jsbach@62.218.23.190)
[11:26:08] *** Quits: ac_slater (~ac_slater@c-73-221-73-144.hsd1.wa.comcast.net) (Quit: WeeChat 3.4)
[11:26:35] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:27:37] <Payam98> namkeleser https://isocpp.org/get-started
[11:28:18] <Payam98> Reading a book gives you garantee that you will understand c++ well.
[11:28:26] <fluter> hi, i'm using std::vector::emplace_back for a customized type
[11:28:34] <Payam98> It goes for all programming languages. I say do not just look tutorials
[11:28:44] <TinoDidriksen> !give namkeleser basics
[11:28:46] <nolyc> namkeleser: Books, references, tutorials, for all levels of learning: https://isocpp.org/get-started ; https://isocpp.org/faq ; https://learncpp.com/ ; http://stackoverflow.com/q/388242 ; https://github.com/isocpp/CppCoreGuidelines ; https://cppreference.com/
[11:28:50] <fluter> but i found that the copy ctor still called while using emplace_back
[11:28:52] <fluter> why?
[11:29:04] <TinoDidriksen> Is the type actually movable?
[11:29:21] <fluter> i thought with emplace_back the object is constructed inplace and no copy needed
[11:29:32] <fluter> TinoDidriksen: how do i know it's movable?
[11:29:49] <TinoDidriksen> Paste the emplace_back call.
[11:29:51] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:30:32] <fluter> d_store.emplace_back(item, anno);
[11:30:55] <fluter> class MyType { std::string item; TypeFoo anno; ... }
[11:30:57] <TinoDidriksen> Oh, that should indeed go straight in.
[11:31:00] *** Quits: geeknix (~pi@2001:e68:5432:eb65:88fb:443:e2f4:157e) (Ping timeout: 240 seconds)
[11:31:30] <fluter> MyType has a non-default ctro MyType(const std::string&, const TypeFoo& );
[11:32:00] <fluter> TinoDidriksen: i confirmed this, when i insert an abort() in copy ctor, program crashes :S
[11:32:05] <fluter> TinoDidriksen: what am i doing wrong?
[11:32:30] *** Joins: rendar (~rendar@user/rendar)
[11:34:19] <TinoDidriksen> abort() is a tad heavy-handed. You can just set a breakpoint and run it in the debugger. But you must still ensure the type is movable, because resizing the vector moves all the elements.
[11:34:29] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:34:48] <TinoDidriksen> And emplace_back may cause a resize, even if the inserted element is not itself copied.
[11:35:41] <fluter> how can i verify, if i call reserve with enough size, would it avoid the copy?
[11:35:46] <fluter> let me try
[11:35:54] <TinoDidriksen> It should.
[11:35:57] *** Joins: Electron (~ElectronA@user/electronapps)
[11:36:36] *** Quits: xiongxin (~Thunderbi@2409:8955:3814:27a3:ce1a:87d5:3e79:e6cd) (Ping timeout: 240 seconds)
[11:37:08] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:37:24] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2879:e478:9b7d:e873) (Ping timeout: 240 seconds)
[11:38:15] <fluter> oh yes!
[11:38:25] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Ping timeout: 256 seconds)
[11:38:29] <fluter> indeed, i call d_store.reserve with a big number, copy ctro is not called now :D
[11:38:35] <fluter> thanks! TinoDidriksen
[11:39:27] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:39:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:cc2e:1c42:2403:ca71)
[11:40:15] <ville> fluter: http://www.eelis.net/c++draft/class.copy.ctor#8 and http://www.eelis.net/c++draft/class.copy.assign#4
[11:40:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:41:05] <ville> fluter: further you want to make sure your move operations to be noexcept for std::vector to take advantage of them
[11:41:57] <fluter> ville: ok, so how can i know if a type is moveable or not?
[11:42:11] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[11:42:16] <ville> fluter: by spending lot of time starting at it
[11:42:20] <ville> staring
[11:42:34] <fluter> :O
[11:42:37] <TinoDidriksen> You can implement the move-ctor.
[11:43:52] <fluter> i read there is rule of 5 or sth, if i implement move-ctor explcitely, i would have to implement a few others, is this understanding correct?
[11:43:57] <ville> as in c++ sucks. you can't. you either spend lot of time looking at the type and the types of its subobjects. or you define the operations in the class your self, but that then changes the kind of type it is
[11:44:06] *** Quits: Electron (~ElectronA@user/electronapps) (Ping timeout: 260 seconds)
[11:44:32] *** Joins: geeknix (~pi@2001:e68:5432:2980:281e:46e1:b91e:3c1c)
[11:44:37] *** Joins: aLeSD (~aLeSD@139.47.114.114)
[11:44:51] <ville> fluter: yes the rule of # are somewhat alright starting points
[11:45:05] <fluter> ok
[11:45:38] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[11:46:13] <fiesh> your non-default ctor seems wonky in case one of its two arguments or both are sink arguments... you probably want to pass by value and then move
[11:46:26] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[11:47:14] *** Quits: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi) (Ping timeout: 256 seconds)
[11:49:09] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:50:59] <ville> fluter: by staring at the type i mean if the type doesn't explicitly specify the copy and move operations either by implementing them or deleting them, you have to remember the above rules and then also go though everys subobject the type has. defaulting them doesn't "do anything". the operations still may end up implicitly deleted
[11:51:51] <fluter> ville: yes got it.
[11:52:01] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d9d:f98e:858b:e740:1937:c061)
[11:52:12] <fluter> If only there is a tool or api that tell use the answer !
[11:52:16] <fluter> :P
[11:52:18] *** Joins: xiongxin (~Thunderbi@223.104.63.14)
[11:52:37] <ville> you can always write tests for these things, but that's more boileprlate
[11:53:08] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[11:54:01] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:54:09] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[11:54:26] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[11:56:02] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 240 seconds)
[11:56:14] <ville> also with the recent change in c++20 if you try to make it easier to see about copy and move operations you're now then forced to write boilerplate for ctors that just initialize members
[11:56:38] <ville> so somehow the committee found a way to add more boilerplate
[11:57:38] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[11:58:49] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:01:55] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[12:02:01] *** Joins: andreasbuhr (~quassel@p548dd8b0.dip0.t-ipconnect.de)
[12:03:05] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:10:56] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[12:12:12] *** Joins: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi)
[12:13:52] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[12:14:02] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:14:18] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[12:26:54] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[12:31:21] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7)
[12:34:25] *** Joins: aakashi2001 (~aakashi20@103.61.255.12)
[12:34:25] *** Quits: aakashi2001 (~aakashi20@103.61.255.12) (Changing host)
[12:34:25] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[12:35:44] *** Joins: cosimone (~user@93.55.99.69)
[12:42:43] *** Joins: W_ (~W@90.242.170.58)
[12:44:04] <W_> If I have a namespace: namespace monkey { void dance(); }; is there a way I can also have a function void monkey()?
[12:44:16] <zz> "using namespace monkey;" ?
[12:44:47] <W_> No.
[12:45:14] <W_> outside of the namespace I mean.
[12:45:38] <W_> so namespace monkey and void money would be in the same scope.
[12:45:38] *** Joins: undephin3d (~undephin3@158.181.73.150)
[12:46:29] <zz> static constexpr auto x = ns::y; might work, but it's not quite the same
[12:47:16] <W_> alright, thanks.
[12:51:45] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Quit: Leaving)
[12:53:17] *** Joins: ivii (~ivan@user/ivii)
[12:54:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:55:29] *** Quits: zer0x_ (~zer0x@58.186.217.233) (Ping timeout: 256 seconds)
[12:56:31] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[12:58:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[13:01:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:01:44] *** Joins: DomD10 (~DomD10@102.176.65.36)
[13:07:33] *** Parts: DomD10 (~DomD10@102.176.65.36) ()
[13:12:29] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:25] *** Joins: aakashi2001 (~aakashi20@103.61.255.12)
[13:13:25] *** Quits: aakashi2001 (~aakashi20@103.61.255.12) (Changing host)
[13:13:25] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[13:14:31] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Max SendQ exceeded)
[13:14:59] *** Joins: aakashi2001 (~aakashi20@103.61.255.12)
[13:14:59] *** Quits: aakashi2001 (~aakashi20@103.61.255.12) (Changing host)
[13:14:59] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[13:15:16] *** Joins: DomD10 (~DomD10@102.176.65.36)
[13:16:10] *** Quits: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi) (Ping timeout: 272 seconds)
[13:16:25] *** Quits: xiongxin (~Thunderbi@223.104.63.14) (Quit: xiongxin)
[13:18:09] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:18:09] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:21:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[13:23:53] *** Joins: jokoon (~eio@2a01:e0a:542:e160:ed19:5274:4d1:dce0)
[13:27:34] *** Quits: DomD10 (~DomD10@102.176.65.36) (Ping timeout: 272 seconds)
[13:28:24] <ville> zz: he wanted: namespace moneky{} void monkey();
[13:29:34] *** Joins: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi)
[13:31:16] <ville> W_: short and wrong answer: no
[13:31:36] <ville> W_:   you can do: namespace nn {} namespace mm { void nn() {} } using namespace mm; but then referring to the identifier "nn" becomes ambiguous
[13:32:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[13:32:44] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:32:51] <ville> so in the end you still have to qualify it
[13:33:18] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:34:55] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[13:35:30] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:35:57] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:36:21] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[13:36:22] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[13:36:26] *** Quits: jokoon (~eio@2a01:e0a:542:e160:ed19:5274:4d1:dce0) (Quit: Leaving)
[13:36:32] *** Quits: bebyx (~Thunderbi@user/bebyx) (Client Quit)
[13:36:44] *** Joins: ivii (~ivan@user/ivii)
[13:36:46] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:37:19] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Quit: Leaving)
[13:43:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:46] *** ChanServ sets mode: +v npaperbot
[13:46:12] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d9d:f98e:858b:e740:1937:c061) (Remote host closed the connection)
[13:46:17] *** Joins: Tempesta (~Tempesta@user/tempesta)
[13:46:30] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 268 seconds)
[13:49:33] *** Joins: wakeup (~wakeup@user/wakeup)
[13:50:24] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[13:55:24] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:56:37] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:58:40] *** Joins: aakashi2001 (~aakashi20@103.61.255.12)
[13:58:40] *** Quits: aakashi2001 (~aakashi20@103.61.255.12) (Changing host)
[13:58:40] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[13:59:09] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[14:00:10] *** Joins: zer0x_ (~zer0x@58.186.217.233)
[14:02:18] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:02:51] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[14:06:29] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:08:54] *** Joins: aakashi2009 (~aakashi20@user/aakashi2001)
[14:09:37] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:17:38] *** Joins: hiroshi_ (~freedom@ge-19-120-112.service.infuturo.it)
[14:18:00] *** Joins: tmm88 (~tmm88@user/tmm88)
[14:18:53] *** Quits: jsbach (~jsbach@62.218.23.190) (Remote host closed the connection)
[14:19:09] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.251)
[14:20:59] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[14:22:15] *** Quits: aakashi2009 (~aakashi20@user/aakashi2001) (Remote host closed the connection)
[14:25:03] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7) (Remote host closed the connection)
[14:25:32] *** Joins: unknow (~i.am@user/marlboro)
[14:25:58] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7)
[14:26:26] *** gentooclimax is now known as climax
[14:30:44] *** climax is now known as gentooclimax
[14:34:44] *** Joins: jsbach (~jsbach@62.218.23.190)
[14:38:15] *** Joins: Burgundy (~NA@86.121.143.206)
[14:41:51] <evangeline> Can I somehow use reinterpret_cast in the using statement: https://godbolt.org/z/nesczj3cz ?
[14:42:58] <evangeline> I would like a pointer to DataArray, but without the template parameter SIZE, because the structure already holds the size, so I would like to use only PDataArray.
[14:50:05] *** Quits: hiroshi_ (~freedom@ge-19-120-112.service.infuturo.it) (Quit: hiroshi_)
[14:50:51] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 256 seconds)
[14:55:15] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:19a5:18c2:1f3c:54f3)
[14:56:04] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:56:15] <Billiard> evangeline, why not just get a pointer to the data and pass that around or whatever?
[14:56:28] <Billiard> seems like you're fighting the type system for no reason
[14:59:43] <evangeline> Billiard, I need a pointer to the DataArray, because that will be serialized and sent over the network ...
[15:00:02] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[15:00:03] <Billiard> zero-sized arrays are forbidden, so if your question is "is this legal?", then no. :P
[15:02:19] <Billiard> templatify your serializing function?
[15:03:57] <evangeline> Billiard, so it will receive the template<size_t N> as well '
[15:03:57] <evangeline> ?
[15:03:58] *** Joins: unyu (~pyon@user/pyon)
[15:04:39] <Billiard> evangeline, yeah
[15:04:56] *** Quits: ymwm__ (~yingmanwu@117.26.69.144) (Read error: Connection reset by peer)
[15:09:24] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[15:09:45] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 268 seconds)
[15:12:07] *** Joins: ymwm (~yingmanwu@117.26.69.144)
[15:13:48] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:14:03] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[15:14:04] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[15:14:16] *** Quits: ymwm (~yingmanwu@117.26.69.144) (Max SendQ exceeded)
[15:14:42] *** Joins: ymwm (~yingmanwu@117.26.69.144)
[15:18:30] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Quit: Leaving)
[15:18:51] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:18:51] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:21:39] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[15:27:21] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[15:28:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:29:33] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:e8b:fc82:9f37:dc3a:bd21:819f)
[15:29:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:34:34] *** Joins: rando25892 (~atler@user/rando25892)
[15:34:35] *** Joins: proller (~p@2a02:6b8:b081:b644::1:1)
[15:36:43] *** Quits: rando25892 (~atler@user/rando25892) (Read error: Connection reset by peer)
[15:37:47] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:38:07] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:39:48] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Ping timeout: 252 seconds)
[15:40:08] *** Joins: ondrej008 (uid311009@id-311009.lymington.irccloud.com)
[15:42:25] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:43:17] *** Quits: cosimone (~user@93.55.99.69) (Ping timeout: 240 seconds)
[15:48:03] *** Quits: proller (~p@2a02:6b8:b081:b644::1:1) (Ping timeout: 252 seconds)
[15:48:17] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7) (Remote host closed the connection)
[15:48:31] *** Joins: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7)
[15:56:49] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:59:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[16:01:30] *** Quits: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi) (Quit: aagfg)
[16:01:45] *** Joins: artok (~azo@mobile-access-b04863-82.dhcp.inet.fi)
[16:01:48] *** Quits: tmm88 (~tmm88@user/tmm88) (Ping timeout: 252 seconds)
[16:02:57] *** Quits: hinata (~hinata@2409:4042:e8e:2dda:c5d4:af5b:d129:b2a7) (Ping timeout: 240 seconds)
[16:05:16] *** Joins: ironman_ (~ironman@49.36.53.158)
[16:05:48] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[16:07:18] *** Joins: pkal (~pkal@2a01:4f8:1c1c:bd2c::1)
[16:08:10] *** Parts: pkal (~pkal@2a01:4f8:1c1c:bd2c::1) (Killed buffer)
[16:10:58] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[16:12:28] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[16:13:56] <zz> https://wandbox.org/permlink/Xm6MuKhCDvDHbpWx  what's the deal here, what am I missing
[16:16:40] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:23:46] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[16:23:59] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[16:24:11] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[16:26:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:26:51] *** Joins: ville (~ville@user/ville)
[16:28:18] <CarloWood> Missing in C++ : static_cast from member variable pointer to containing class.
[16:29:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:29:45] <CarloWood> I suppose I could put it in a private (protected?) base class.. but that's a lot of work to get something as simple as this :/.
[16:31:16] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:31:51] <CarloWood> I wonder if one can write this oneself...  struct A {}; struct B { int foo; A a; }; void A::f() { static_containing_class_cast<B*>(this); }
[16:32:44] <zz> CarloWood: well, there's the containerof approach https://paste.opensuse.org/69783243
[16:33:09] <CarloWood> You also need to tell it that 'this' is 'a' I guess - just even pass the offset yourself...
[16:33:15] *** Joins: pulse (~pulse@user/pulse)
[16:34:41] <CarloWood> zz: yeah, that is exactly what I meant :)
[16:34:46] *** Joins: ymwm_ (~yingmanwu@110.85.121.251)
[16:35:58] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:e8b:fc82:9f37:dc3a:bd21:819f) (Remote host closed the connection)
[16:36:17] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:e8b:fc82:ab30:625:9257:4e5)
[16:37:37] *** Quits: ymwm (~yingmanwu@117.26.69.144) (Ping timeout: 256 seconds)
[16:38:13] <T`aZ> CarloWood: this is a design nightmare, dont do that crap
[16:38:38] <T`aZ> yes, the linux kernel is doing that. It is still crap design.
[16:38:41] <CarloWood> Why not?
[16:38:55] <T`aZ> you are now linking A and B together
[16:39:55] <T`aZ> in your example, only B should know about A.
[16:40:00] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:40:22] <CarloWood> Actually - they know about eachother. They are defined in the same file.
[16:40:38] <T`aZ> but now A *requires* to be a part of a B. That requirement is *not* part of the definition of A. It's crap
[16:40:53] <CarloWood> It is
[16:42:34] <CarloWood> Hmm
[16:42:42] <CarloWood> Maybe not
[16:42:45] *** Joins: magla (~gelignite@55d4843f.access.ecotel.net)
[16:43:40] <InPhase> CarloWood: Consider a parent set in a constructor.
[16:43:42] <T`aZ> seriously, just dont. use the proper type everytime. Never assume type A is contained into type B. because if you do, then you should not have an A in the first place, but a B::*A thingy
[16:44:03] <InPhase> CarloWood: And then be explicit with the expected behavior for the rule of 3/5 items.
[16:44:24] <CarloWood> I have a class with a private destructor because you aren't allowed to create it anywhere else but on the heap and it manages its own lifetime.  Then I wanted to use boost::serialization to serialize it to disk and that doesn't compile because that apparently makes a copy? At least, wanted access to the destructor :/
[16:45:16] <CarloWood> So I did split up the class in the part that needs to be serialized (which has a normal destructor) and the part that has a private destructor, and the first class as a member now.
[16:45:51] <CarloWood> But yeah... if boost makes a temporary copy of the member then it is no longer true that it is contained
[16:48:17] <CarloWood> I am going to investigate why on Earth boost wants this destructor to exist - making a copy is unacceptable anyway.
[16:48:33] <CarloWood> And if it doesn't make a copy - then this is possible.
[16:54:22] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 256 seconds)
[16:57:29] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:58:39] *** ironman_ is now known as ironman
[16:59:41] *** Quits: ironman (~ironman@49.36.53.158) (Quit: Leaving)
[17:00:42] <fiesh> in my experience, types that are going to be serialized should hold data, ideally have no user defined functions at all (except the serialization)... having a seemingly complicated class with special rules about its lifetime and what not directly be serializable and deserializable seems very weird to me
[17:01:10] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:01:56] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:19a5:18c2:1f3c:54f3) (Quit: Konversation terminated!)
[17:01:59] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:e8b:fc82:ab30:625:9257:4e5) (Quit: Leaving)
[17:04:31] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:05:33] <InPhase> CarloWood: In the meantime, investigate why you are trying to access the parent pointer of a class you intent to serialize.  Why not reverse the logic and pass the outer class type in where you need to access the outer class?
[17:05:43] <InPhase> s/intent/intend/
[17:06:31] <InPhase> CarloWood: Presumably you are not serializing a pointer value to a containing class, as that sounds pretty sketchy.
[17:06:34] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[17:06:55] *** Joins: LucaTM (~LucaTM@user/lucatm)
[17:07:57] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:12:42] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: Lost terminal)
[17:13:24] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[17:15:24] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:7445)
[17:16:03] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c42a:2dad:bcf1:880f)
[17:16:03] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c42a:2dad:bcf1:880f) (Changing host)
[17:16:03] *** Joins: skapata (~Skapata@user/skapata)
[17:16:18] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[17:16:30] <CarloWood> Seems to me that the real problem is/was that boost wants access to calling delete on the object that it serializes even though it never uses that under normal circumstances.
[17:16:40] *** Quits: blackbeard420_ (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Quit: ZNC 1.8.2 - https://znc.in)
[17:16:51] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[17:17:00] <CarloWood> If I delete the copy constructor there is no problem.
[17:17:07] <CarloWood> So, it does not make copies.
[17:19:51] *** Joins: adlternative (~adl@117.32.216.71)
[17:23:15] *** Quits: adlternative (~adl@117.32.216.71) (Client Quit)
[17:24:43] <GyrosGeier> smart pointer?
[17:27:11] <CarloWood> zz: that macro results in a warning though :(.  I can't accept warnings in my code :\
[17:27:15] <CarloWood> vulkan/pipeline/PipelineCache.cxx:69:37: warning: offset of on non-standard-layout type 'task::PipelineCache' [-Winvalid-offsetof]
[17:27:38] <CarloWood> I don't even know it means :/.
[17:27:52] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:29:45] *** Joins: wakeup (~wakeup@user/wakeup)
[17:30:52] <CarloWood> Oh well - turns out offsetof is totally useless. task::PipelineCache is the schoolbook example of a difficult class... virtual functions, multiple inheritance, the works.
[17:31:53] <CarloWood> Lemme explain what I want - maybe someone has a bright idea...
[17:32:12] *** Quits: ymwm_ (~yingmanwu@110.85.121.251) (Ping timeout: 240 seconds)
[17:32:39] *** Joins: ymwm_ (~yingmanwu@110.85.121.251)
[17:33:21] <CarloWood> I will have several classes that need to be serialized to disk and read back. This is complex stuff and I want to do that in a safe way using file locks etc. Therefore I want to use a generalized API that I can use for all of them.
[17:33:50] *** Joins: rando25892 (~homefame@user/rando25892)
[17:34:04] <zz> yeah you can't use offsetof in nonstandard layouts (by the standard)
[17:34:26] <CarloWood> I picked that interface to be boost::serialization for obvious reasons.  Hence, this class "PipelineCache" is to be written to disk and loaded from disk using the code "archive & object".
[17:34:38] *** Quits: wakeup (~wakeup@user/wakeup) (Client Quit)
[17:35:16] <CarloWood> Here 'object' will be a type that contains the unique pointer to a vulkan handle for the pipeline cache.
[17:35:50] <CarloWood> Serialization thereof is non-trivial of course - it needs access to the underlaying "Logical Device".
[17:36:38] <CarloWood> Boost serialization can call a member function 'object' - which is the best you can get for access to more data (like that pointer to the logical device).
[17:37:16] <CarloWood> Lets say, object has type Object.  Then archive & object will call Object::load and Object::save.
[17:38:03] <CarloWood> Thus, each of these two functions needs to know what the logical device is... And I can do that by also adding a LogicalDevice* to class Object.
[17:38:28] *** Joins: wakeup (~wakeup@user/wakeup)
[17:38:35] <CarloWood> However - Object is *always* member of task::PipelineCache, which is defined as:
[17:38:57] <CarloWood> class PipelineCache : public AIStatefulTask, public vulkan::pipeline::CacheData { vulkan::PipelineCache m_pipeline_cache;
[17:39:09] <CarloWood> where `m_pipeline_cache` is the object.
[17:39:31] <CarloWood> And `vulkan::pipeline::CacheData` *already* contains a pointer to the LogicalDevice.
[17:40:17] <CarloWood> It just pains me to add another pointer to `vulkan::PipelineCache` because that means that I have two such pointers in the same object :P
[17:41:00] <CarloWood> So, I want to be able to access vulkan::pipeline::CacheData::m_logical_device from vulkan::PipelineCache::load/save
[17:42:42] <CarloWood> Of course I thought about removing the LogicalDevice* from CacheData and have task::PipelineCache simply access the logical device from it's member m_pipeline_cache instead of CacheData - but you'll understand that that is not really possible - since CacheData is an object used as a part of another API that simply needs access to the logical device too.
[17:43:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:46] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:46] *** ChanServ sets mode: +v npaperbot
[17:44:32] <CarloWood> Seems I'm stuck with having to add the same pointers to a lot of objects all over the place :/.  A *lot* of code needs access to their logical device - and using object orientation that seems to mean that I have to give each of those objects its own LogicalDevice pointer :/.  Very annoying and not good advertisement for OO
[17:47:37] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[17:47:40] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[17:48:14] <CarloWood> Bah - I am going back to condensing vulkan::PipelineCache into task::PipelineCache and call serialization on that object. That way I will have direct access it in load and save.  The access to the private destructor can actually be solved by adding `friend class boost::serialization::access;` to it
[17:48:24] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[17:49:00] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:53:02] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 240 seconds)
[17:53:14] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[17:58:10] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:58:29] *** Joins: unyu (~pyon@user/pyon)
[18:01:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[18:03:29] *** Joins: pulse (~pulse@user/pulse)
[18:07:34] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[18:08:08] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 272 seconds)
[18:11:50] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Client Quit)
[18:13:42] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:14:18] *** Inline__ is now known as Inline
[18:16:11] *** Joins: oakyy (~oaky@h-155-4-161-203.A518.priv.bahnhof.se)
[18:23:38] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:19a5:18c2:1f3c:54f3)
[18:25:05] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[18:25:24] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[18:25:54] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[18:26:58] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 2.8)
[18:28:37] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[18:29:43] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[18:29:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[18:30:05] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[18:32:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:33:53] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[18:37:21] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:37:51] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:39:29] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[18:45:30] *** Quits: ymwm_ (~yingmanwu@110.85.121.251) (Ping timeout: 272 seconds)
[18:49:36] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[18:53:18] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[18:53:46] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:56:53] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[18:58:52] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:02:12] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[19:02:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:07:19] *** Quits: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:07:47] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 268 seconds)
[19:12:26] *** Quits: zer0x_ (~zer0x@58.186.217.233) (Remote host closed the connection)
[19:12:26] *** Joins: Guest5410 (~Guest54@2620:10d:c092:400::4:7445)
[19:12:45] *** Joins: zer0x_ (~zer0x@58.186.217.233)
[19:14:13] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:19:27] *** Joins: proller (~p@2a02:6b8:b081:b71c::1:23)
[19:23:30] *** zz is now known as anyone
[19:37:01] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 245 seconds)
[19:41:45] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[19:41:46] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.251) (Quit: Leaving)
[19:42:54] *** Quits: proller (~p@2a02:6b8:b081:b71c::1:23) (Ping timeout: 252 seconds)
[19:45:02] *** Quits: zer0x_ (~zer0x@58.186.217.233) (Ping timeout: 272 seconds)
[19:46:56] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 272 seconds)
[19:50:06] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:54:50] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[19:55:20] *** Joins: zenstoic (uid461840@id-461840.hampstead.irccloud.com)
[19:58:34] *** Parts: Burgundy (~NA@86.121.143.206) ()
[19:59:34] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:00:30] *** Quits: Payam98 (~Payam@138.106.57.131) (Quit: Client closed)
[20:01:21] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:03:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[20:06:09] *** Quits: Guest5410 (~Guest54@2620:10d:c092:400::4:7445) (Ping timeout: 256 seconds)
[20:06:09] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:7445) (Ping timeout: 256 seconds)
[20:10:28] *** Joins: toulene (~toulene@user/toulene)
[20:11:43] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[20:15:07] *** Joins: off^ (~off@50.232.121.75)
[20:17:08] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Read error: Connection reset by peer)
[20:17:27] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[20:17:52] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[20:18:22] *** Joins: savolla (~quassel@95.10.239.22)
[20:18:39] *** Quits: rando25892 (~homefame@user/rando25892) (Ping timeout: 252 seconds)
[20:22:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[20:24:31] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[20:24:42] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[20:24:45] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:7445)
[20:25:19] *** Joins: muffin_storm (~muffin_st@user/muffin-storm/x-3740471)
[20:25:39] *** Joins: ymwm_ (~yingmanwu@110.85.121.251)
[20:26:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[20:26:56] *** Quits: savolla (~quassel@95.10.239.22) (Remote host closed the connection)
[20:27:57] *** Joins: jetchisel (jetchisel@user/jetchisel)
[20:32:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:36:11] *** Quits: ymwm_ (~yingmanwu@110.85.121.251) (Remote host closed the connection)
[20:37:54] *** Joins: gareppa (~gareppa@user/gareppa)
[20:39:19] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:40:56] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 250 seconds)
[20:47:10] *** Joins: rgrinberg (~textual@187.223.141.66)
[20:49:24] <Alipha> evangeline: proper serialization code wouldn't care about the layout of DataArray anyway. what you *should* be doing during serialization is taking each of your int members and writing them out individually as an array of bytes, using bit arithmatic, as illustrated here: https://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html
[20:50:51] <Guest54> "so the computer's byte order shouldn't matter to you one bit."
[20:50:52] <Guest54> lol
[20:52:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:59:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:00:05] <Alipha> Guest54: indeed. i wrote this little header-only library for integer types: https://github.com/alipha/cpp/blob/master/endian/endian.hpp
[21:01:05] <Guest54> Alipha I liked the word choice of "one bit":)
[21:01:31] <Guest54> I am pretty dumb sorry lol
[21:02:16] <ashafq> Alipha: Shouldn't you test if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__ for those functions?
[21:02:30] <Alipha> Guest54: ah, yes
[21:02:36] <Alipha> ashafq: nope. doesn't need to
[21:02:59] <Alipha> ashafq: again, that's the point of the article ^
[21:03:42] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:04:13] <ashafq> I see
[21:04:43] <Alipha> `x & 0xff` is the lowest byte, regardless of endian. for a 32-bit int, `x >> 24` is the highest byte, etc.
[21:06:50] <ashafq> True
[21:06:51] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:06:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:07:36] <ashafq> I was thinking about something else with magic headers
[21:08:35] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:09:25] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:09:56] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[21:12:12] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:13:16] *** Quits: rgrinberg (~textual@187.223.141.66) (Read error: Connection reset by peer)
[21:14:24] *** Joins: rgrinberg (~textual@187.223.141.66)
[21:18:54] *** Quits: ville (~ville@user/ville) (Quit: ville)
[21:19:01] *** Quits: baltazar (~baltazar@176-241-40-35.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:19:35] *** Quits: mitch0 (~mitch@176-241-40-35.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:20:20] *** Quits: off^ (~off@50.232.121.75) (Remote host closed the connection)
[21:20:35] *** Joins: baltazar (~baltazar@178-164-184-5.pool.digikabel.hu)
[21:21:09] *** Joins: ville (~ville@user/ville)
[21:21:17] *** Joins: mitch0 (~mitch@178-164-184-5.pool.digikabel.hu)
[21:21:57] *** Quits: meandrain (~meandrain@2a02:2f0e:f70f:6e00:cd89:fba2:a689:f803) (Ping timeout: 240 seconds)
[21:22:24] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[21:24:19] *** Joins: pah (~pah@user/pah)
[21:26:51] *** Quits: malloy (~jimery@116.30.220.175) (Read error: Connection reset by peer)
[21:28:03] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) ()
[21:33:14] *** Joins: malloy (~jimery@116.30.221.173)
[21:36:45] *** Quits: magla (~gelignite@55d4843f.access.ecotel.net) (Quit: Stay safe!)
[21:38:39] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[21:40:16] *** Quits: rgrinberg (~textual@187.223.141.66) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:42:29] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:7445) (Ping timeout: 256 seconds)
[21:43:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:47] *** ChanServ sets mode: +v npaperbot
[21:44:30] *** Quits: andreasbuhr (~quassel@p548dd8b0.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:47:26] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 245 seconds)
[21:47:41] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:50:57] *** Quits: Tokamak (~Tokamak@172.58.188.132) (Ping timeout: 240 seconds)
[21:52:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[21:52:18] *** Joins: savolla (~quassel@95.10.239.22)
[21:52:18] *** Quits: savolla (~quassel@95.10.239.22) (Client Quit)
[21:53:24] *** Joins: ik (uid540109@id-540109.uxbridge.irccloud.com)
[22:00:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:02:37] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:03:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:03:45] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[22:06:57] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[22:14:16] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[22:16:28] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[22:19:50] *** Joins: sobkas (~sobkas@95.175.17.217)
[22:23:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[22:27:34] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[22:27:40] *** Quits: W_ (~W@90.242.170.58) (Remote host closed the connection)
[22:27:45] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:30:49] *** Quits: Inline (~Inline@p200300cd470c9c002556fbf58fa37daf.dip0.t-ipconnect.de) (Quit: Leaving)
[22:31:26] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[22:33:28] *** Joins: Inline (~Inline@p200300cd470c9c002556fbf58fa37daf.dip0.t-ipconnect.de)
[22:35:29] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[22:35:30] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[22:35:30] *** Joins: Teukka (~teukka@user/Teukka)
[22:36:49] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:37:32] *** Joins: bindu (~bindu@user/bindu)
[22:49:52] *** Quits: zenstoic (uid461840@id-461840.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:52:07] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[22:56:59] *** Quits: anyone (~filler@a4.inai.de) (Remote host closed the connection)
[23:01:06] *** Joins: Markow (~Markow@176.122.215.103)
[23:01:14] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:04:07] *** Joins: proller (~p@80.240.216.69)
[23:04:28] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:04:39] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:07:56] *** Joins: anyone (~filler@a4.inai.de)
[23:12:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:23:51] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[23:24:29] *** Quits: kenantu (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:26:04] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[23:26:33] *** Joins: magla (~gelignite@55d4843f.access.ecotel.net)
[23:27:04] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[23:29:07] *** Joins: lxsameer (lxsameer@user/lxsameer)
[23:31:03] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc6-git-38f80f4-Pogorze-Karpackie-CUSTOM-KERNEL)
[23:32:48] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[23:34:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:36:06] *** Joins: xkuru (~xkuru@user/xkuru)
[23:38:41] *** Joins: proller (~p@2a02:6b8:b081:b510::1:d)
[23:39:03] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[23:40:55] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (Quit: ZNC 1.8.2 - https://znc.in)
[23:46:41] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[23:50:02] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[23:54:20] *** Joins: off^ (~off@50.232.121.75)
