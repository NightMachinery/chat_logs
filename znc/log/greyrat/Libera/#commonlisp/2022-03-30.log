[00:05:19] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[00:05:19] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[00:05:41] *** Joins: specbot (~specbot@common-lisp.net)
[00:06:18] *** Joins: minion (~minion@common-lisp.net)
[00:09:36] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[00:10:46] *** Joins: yauhsien_ (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[00:10:52] *** Quits: yauhsien (~yauhsien@61-231-25-68.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[00:11:40] *** Joins: wacki (~wacki@87.123.132.171)
[00:26:22] *** Quits: yauhsien_ (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:26:23] *** Joins: akoana (~ah@user/akoana)
[00:27:22] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[00:27:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[00:32:35] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[00:35:47] *** Joins: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net)
[00:37:30] *** Quits: ssafar (~simon@c-73-158-251-170.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[00:39:30] *** Joins: ssafar (~simon@c-73-158-251-170.hsd1.ca.comcast.net)
[00:39:53] <dbotton>  _death what exactly is "woke up.. 2 hours later, "what have I done?" https://i.imgur.com/YGG9Hyh.png" ?
[00:40:49] <dbotton> is that a clim lip api using clog?
[00:40:55] <dbotton> clim like
[00:42:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:43:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[00:45:26] *** Lord_of_Life_ is now known as Lord_of_Life
[00:45:51] *** Joins: lisp123 (~lisp123@143.238.171.43)
[00:47:00] <_73> Is there anyway to compare clos objects with equalp or must I define my own equality method? For example I expected to get back T where I got NIL in this example: http://dpaste.com/2NN9E3K5N
[00:51:24] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:55:32] <dbotton> It doesn’t make much sense for equal or equalp to work on an object since it can’t predict what would make them equal
[00:56:33] <dbotton> Ie you have to define your own function
[00:56:38] <_73> Wouldn't two objects be equal if all of their slots are equal?
[00:56:57] <dbotton> Why should they?
[00:57:09] <_death> dbotton: it is mcclim with a baby (2 hours old ;) clog backend.. clim is built to be extensible, and in this case one can implement some protocols in order to receive drawing commands from it and pass them to clog, and perhaps one day the other way around, to get input events from clog and pass them to clim
[00:57:32] <dbotton> Cool
[00:57:49] <_73> dbotton: I see, but maybe as a generic way to test equality. EQUALP works for structs this way though.
[00:59:23] <_death> dbotton: as you can see the drawing is not perfect.. it could take some work to properly implement such a backend, and I'm not sure I'll ever get to it
[00:59:26] <dbotton> I hear ya.
[00:59:47] <dbotton> _73 I hear ya.
[01:00:15] <dbotton> _death still that is very cool
[01:00:56] <dbotton> Is it using the canvas?
[01:01:06] <_death> dbotton: scymtym has a more mature backend that uses websockets as well
[01:01:11] <_death> yes
[01:01:52] <dbotton> Would be nicer if could use html primitives instead
[01:02:01] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[01:02:04] <dbotton> That is the same issue with gtk
[01:02:19] <dbotton> You just end up with a vlc like product
[01:02:52] <_death> one could extend clim in a different way, so that instead native controls will be used
[01:03:26] <dbotton> Is there documentation on making such an extension
[01:04:13] <_death> dbotton: I think jackdaniel is working on it.. but there's also the existing material in the mcclim manual, the clim specification, and the various backends already written
[01:04:25] <_death> including a "null backend"
[01:04:32] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:05:16] *** Quits: parjanya (~esb@2804:14c:1ad:9351:f031:6833:afb4:4712) (Remote host closed the connection)
[01:05:49] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 240 seconds)
[01:06:32] *** Joins: trumae (~trumae@2804:18:4823:8f75:1:0:f7ff:8e4f)
[01:06:33] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[01:08:46] <_death> _73: equalp is just an arbitrary comparison operator.. I doubt you care for a result like (progn (defstruct foo bar) (equalp (make-foo :bar "Hi") (make-foo :bar "hI")))
[01:10:06] <_death> _73: may want to check out http://www.nhplace.com/kent/PS/EQUAL.html
[01:10:35] <_73> _death: thanks Ill check it out. I also found - https://github.com/alex-gutev/generic-cl/
[01:10:39] *** Quits: trumae (~trumae@2804:18:4823:8f75:1:0:f7ff:8e4f) (Ping timeout: 250 seconds)
[01:10:56] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[01:11:30] <_death> well, in my opinion you should first read the KMP article.. then you may be in a good position to form an opinion about that project..
[01:11:43] <_73> ok I will
[01:13:01] *** Quits: wacki (~wacki@87.123.132.171) (Quit: Leaving.)
[01:13:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:14:02] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[01:14:53] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[01:22:02] <_death> though I should mention that the issue KMP brings up is not the only one.. an equality predicate is usually expected to behave like a mathematical function, not something that could one day return some other result given identical arguments
[01:28:14] *** Quits: kpoeck (~kpoeck@2a01:598:92b2:79c8:79e9:8fca:18a1:c8de) (Quit: Client closed)
[01:29:13] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[01:29:59] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[01:30:02] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[01:30:21] *** Joins: specbot (~specbot@common-lisp.net)
[01:30:58] *** Joins: minion (~minion@common-lisp.net)
[01:37:27] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:37:30] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[01:38:49] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 250 seconds)
[01:39:31] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[01:44:05] *** Quits: admich (~user@ip-159-80.sn-213-198.clouditalia.com) (Remote host closed the connection)
[01:44:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[01:46:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:52:22] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[01:52:29] *** Joins: trumae (~trumae@45.170.74.100)
[01:58:27] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:59:48] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[02:00:06] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5cd:5a00:d3fe:883)
[02:01:47] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11f4:18d8:b50a:f612:ed28:f1e3)
[02:02:37] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 240 seconds)
[02:05:03] *** Joins: hashfunc32 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[02:05:29] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5cd:5a00:d3fe:883) (Ping timeout: 256 seconds)
[02:07:07] <hashfunc32> is there a way to specify to the lisp printer that i want a newline after every list?
[02:07:27] <hashfunc32> for example, in pseudo-code:
[02:08:14] <hashfunc32> (PPRINT 'PRINT-NEWLINE-AFTER-EVERY-LIST '((1 2 3) (4 5 6)))
[02:08:20] <hashfunc32> =>
[02:08:31] <hashfunc32> ((1 2 3)
[02:08:36] <hashfunc32>  (4 5 6))
[02:11:07] *** Quits: ssafar (~simon@c-73-158-251-170.hsd1.ca.comcast.net) (Ping timeout: 246 seconds)
[02:12:46] <Krystof> (let ((x '((1 2 3) (4 5 6)))) (pprint-logical-block (nil x :prefix "(" :suffix ")") (loop for xs on x for e = (car xs) do (write e) when (cdr xs) do (pprint-newline :mandatory))))
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:10] *** Joins: ssafar (~simon@c-73-158-251-170.hsd1.ca.comcast.net)
[02:14:38] <rotateq> hm honestly I didn't deal with all those pprint functions yet directly. just FORMAT which calls them
[02:15:29] <rotateq> so I know what to do to go on filling my standard symbol holes piece by piece :)
[02:15:42] <Krystof> you can do ^ that in format, too
[02:16:07] <rotateq> yes
[02:16:08] <Krystof> it's probably something like "~@<~W~^~:_~@:>"
[02:16:14] <rotateq> :D
[02:16:29] <Krystof> (it's basically that, but I reserve the right to have all the modifiers to the directives completely wrong
[02:16:53] <rotateq> in FORMAT there are still some directives not fully discovered for me, a big DSL
[02:17:04] <Krystof> ~@< ~@:> = pprint-logical-block; ~W = write; ~^ = stop if no more elements; ~_ = pprint-newline
[02:18:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:18:14] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:18:15] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[02:20:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:21:18] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:23:05] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:99c6:8d11:6785:3de3)
[02:24:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[02:27:58] *** Parts: _73 (~user@pool-96-233-64-53.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[02:39:59] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 260 seconds)
[02:40:08] *** Quits: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9) (Ping timeout: 252 seconds)
[02:40:58] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 272 seconds)
[02:44:12] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[02:45:42] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11f4:18d8:b50a:f612:ed28:f1e3) (Ping timeout: 260 seconds)
[02:49:02] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[02:50:15] <Shinmera> _death: Alloy backend for McClim or vice-versa when? :)
[02:54:31] *** Quits: trumae (~trumae@45.170.74.100) (Ping timeout: 246 seconds)
[02:56:43] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 256 seconds)
[02:58:39] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[03:04:00] *** Quits: adlai (~adlai@80.244.243.194) (Read error: Connection reset by peer)
[03:04:16] *** Joins: adlai (~adlai@80.244.243.194)
[03:04:25] *** Quits: hashfunc32 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 256 seconds)
[03:09:36] *** Joins: Posterdati (~posterdat@user/Posterdati)
[03:19:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:21:38] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[03:23:10] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[03:24:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:24:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:26:57] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[03:29:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[03:29:27] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 260 seconds)
[03:39:38] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[03:44:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[03:44:06] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 245 seconds)
[03:48:05] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[03:49:18] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[03:56:09] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[03:56:19] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:57:17] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[04:07:49] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:99c6:8d11:6785:3de3) (Remote host closed the connection)
[04:10:29] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[04:16:57] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 256 seconds)
[04:18:43] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[04:23:21] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[04:24:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:24:24] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[04:42:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[04:47:24] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 240 seconds)
[04:47:38] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[04:50:21] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[04:53:09] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:53:31] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 246 seconds)
[04:53:52] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 246 seconds)
[04:54:21] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[04:55:19] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[04:56:51] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:57:26] *** Joins: dre (~dre@2001:8003:c932:c301:55ad:378d:2c99:f745)
[05:02:03] *** Joins: Bike (~Bike@71.69.170.70)
[05:02:20] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[05:04:39] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[05:36:20] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Quit: WeeChat 3.4.1)
[05:37:26] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 260 seconds)
[05:37:38] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:38:17] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[05:43:09] *** Joins: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04)
[05:43:25] *** Quits: eddof13 (~eddof13@2806:102e:12:64:8553:23df:507a:ff04) (Client Quit)
[05:45:38] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:51:35] *** Joins: zacque (~zacque@1.32.90.32)
[05:54:33] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[05:58:40] *** Joins: trumae (~trumae@45.170.74.100)
[06:01:06] *** Joins: Bike (~Bike@71.69.170.70)
[06:04:55] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[06:07:18] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[06:20:29] *** Joins: Posterdati (~posterdat@user/Posterdati)
[06:23:54] *** Joins: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[06:26:19] *** Quits: Inline__ (~Inline@p200300cd470f690069ffd8a9e8710708.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:26:54] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[06:31:15] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:36:31] *** Joins: hashfuncd36 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[06:39:08] *** Joins: Posterdati (~posterdat@user/Posterdati)
[06:40:33] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[06:43:06] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Client Quit)
[06:53:21] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[06:55:47] *** Quits: trumae (~trumae@45.170.74.100) (Ping timeout: 260 seconds)
[06:58:06] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[07:04:08] *** Quits: trumae_ (~trumae@45.170.74.100) (Read error: Connection reset by peer)
[07:06:00] *** Quits: hashfuncd36 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[07:06:53] *** Joins: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[07:16:16] *** Quits: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 260 seconds)
[07:29:46] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[07:30:01] *** Joins: Bike (~Bike@71.69.170.70)
[07:31:04] <beach> Good morning everyone!
[07:37:03] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[07:37:48] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[07:43:24] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[07:50:58] *** Joins: semz_ (~semz@user/semz)
[07:53:33] *** Quits: semz (~semz@user/semz) (Ping timeout: 260 seconds)
[08:24:29] *** Joins: livoreno (~livoreno@user/notzmv)
[08:25:06] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:25:11] *** Joins: [deleted] (~livoreno@user/notzmv)
[08:26:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:27:22] *** Joins: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[08:28:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:28:47] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:29:59] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:30:24] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[08:30:53] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:32:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:32:51] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:34:56] *** Joins: notzmv (~zmv@user/notzmv)
[08:38:10] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:39:13] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[08:44:18] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[09:01:29] *** Quits: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 250 seconds)
[09:03:13] *** Joins: jeosol (~jeosol@user/jeosol)
[09:04:32] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:20:25] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[09:21:02] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Quit: The Lounge - https://thelounge.chat)
[09:22:36] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[09:28:02] *** Quits: akoana (~ah@user/akoana) (Ping timeout: 260 seconds)
[09:32:29] *** Joins: VarunA (~VarunA@2402:3a80:775:d7a5:f999:2901:9623:2724)
[09:33:25] <VarunA> Hey Guys.. check out http://ht3.org - A search engine I made for non-mainstream-media non-monetized tech related sites! I'm looking for feedback and suggestions..
[09:33:46] <VarunA> Also see the rationale here: http://ht3.org/more
[09:40:05] <VarunA> Also try searching with the in-depth option.. that gives better results for smaller and more general queries
[09:41:29] <beach> How is this related to the topic of this channel?
[09:43:01] <beach> VarunA: How is this related to the topic of this channel?
[09:43:08] <VarunA> beach: I would think something like this: http://ht3.org/?search_terms=lisp&page=1&subword=on&in_depth=on would be of interest to lispers..
[09:43:41] <VarunA> I use cl for a lot of things and i find new and interesting things on ht3 that i dont find on google.. so i thought i'd share..
[09:44:36] <beach> Yeah, well, this channel is very strict on being on topic, so unless your code is written in Common Lisp, I am afraid it is very much off topic.
[09:44:41] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[09:45:12] <VarunA> beach: part of it is: the logic that selects which sites to index is written in cl.. the frontend and the search index querying is node
[09:45:36] <beach> Can you post that code to a paste site, please?
[09:45:52] <VarunA> haha
[09:46:01] <beach> Why is that funny?
[09:46:11] <VarunA> no! im not sharing how i made the engine.. its easy to manipulate the results.. you'd ask google for pagerank?
[09:47:07] <beach> I am now more convinced than ever that your stuff is off topic.  I suggest you try some other channels to push it.
[09:47:31] <VarunA> ok thats your opinion. i'd like to hear it from others as well.. isnt that fair?
[09:49:06] <beach> Not really.  We can't have hundreds of people vote on each off-topic subject.  My guess is that you will be kicked if you continue.
[09:49:44] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[09:50:18] <VarunA> how about not a hundred. how about 3?
[09:50:37] <beach> I have said enough.
[09:50:56] <VarunA> good
[10:11:54] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[10:18:22] *** Joins: hashfunc1f63 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[10:23:44] *** Quits: hashfunc1f63 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[10:39:18] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:44:15] <Shinmera> This is an IRC network about open source software. If your software isn't open source, it's not only off-topic in this channel in specific, but in general.
[10:46:24] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:57:50] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[11:00:52] <beach> Shinmera: Thanks for pointing that out.  I wasn't sure about the network policy, but I now looked it up.
[11:03:43] *** Joins: Algernon69 (~Algernon6@2a04:cec0:11f4:18d8:b8f2:424f:eeae:6855)
[11:08:46] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9dda:4bff:cdb5:90b8) (Ping timeout: 260 seconds)
[11:09:35] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[11:16:27] *** Joins: akoana (~ah@user/akoana)
[11:36:30] *** Joins: euandreh (~euandreh@191.181.59.160)
[11:46:40] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:46:46] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Client Quit)
[11:49:15] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:51:49] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[11:52:59] *** Quits: ssafar (~simon@c-73-158-251-170.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[11:53:31] *** Quits: akoana (~ah@user/akoana) (Ping timeout: 246 seconds)
[11:54:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:02:19] *** Quits: VarunA (~VarunA@2402:3a80:775:d7a5:f999:2901:9623:2724) (Ping timeout: 260 seconds)
[12:02:34] *** Joins: shka (~herr@109.231.3.55)
[12:10:34] *** Joins: s-liao (~s-liao@101.86.164.158)
[12:38:57] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:43:41] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[12:47:43] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[13:15:51] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 256 seconds)
[13:21:07] *** Joins: nature (~nature@mail.blazebone.com)
[13:26:59] *** Quits: lispy (~lispy@82.212.115.165) (Quit: Client closed)
[13:34:04] *** Joins: Josh_2 (~user@197.184.168.137)
[13:34:39] <Josh_2> Good morning all
[13:34:47] <Josh_2> Is there a library for aiding with creating nested hash tables?
[13:35:38] <Josh_2> Actually there might be a better datastructure
[13:37:18] <Josh_2> I have a client, a product id, a currency and then finally the price. If I was using hash-tables I would store a hash for client, hash for product, hash for currency and then finally the price would have an object
[13:39:03] <Josh_2> Is there a more applicable datastructure for this? Perhaps in the future I will store these in postgres but for now I am just using ram, maybe I can just make a list because its only temporary anyway
[13:39:42] <jackdaniel> Josh_2: it depends on how you access these "tuples" and how many there are
[13:39:55] <Josh_2> There could be thousands
[13:40:15] <Josh_2> there wont be many clients, or many products, but there would be lots of prices stored under currencies
[13:40:54] <jackdaniel> and why don't you make a currency part of the price? is it that there is one product with single currency with multiple prices?
[13:41:19] *** semz_ is now known as semz
[13:41:19] <Josh_2> Yes, lots of prices under a single currency
[13:41:22] <Josh_2> lots of currencies
[13:41:52] <jackdaniel> and how will you access things? i.e when you want to read a price, then what will you do? (read-price <fill-the-gap-please>)
[13:42:14] <jackdaniel> or, perhaps (map-prices <fill-the-gap-please>)
[13:42:52] <Josh_2> (read-price <client> <product> currency quantity) -> Hopefully a price object, if not then have to make one
[13:43:10] <Josh_2> s/quantity/price
[13:43:41] <jackdaniel> OK, then make a hash table with a test #'equal where keys are (list <client> <product> <currency>) that maps to a price
[13:44:00] <jackdaniel> and then (defun read-price (...) (* quantity (gethash … …)))
[13:44:29] <Josh_2> I didn't know I could use lists as keys
[13:44:33] <jackdaniel> I mean there are certainly more clever solutions, but are they worth considering?
[13:44:44] <jackdaniel> (make-hash-table :test #'equal) should do
[13:47:59] *** Quits: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net) (Remote host closed the connection)
[13:48:20] <jackdaniel> fun fact: many implementations allow extending hash tables with arbitrary test functions (but that require additional definitions i.e for computing keys)
[13:48:49] <jackdaniel> that said standard mentinos only eq, eql, equal and equalp
[13:52:54] <jackdaniel> http://turtleware.eu/static/paste/7aa410fc-youre-welcome.jpeg
[13:58:58] <Josh_2> Thanks :)
[14:03:42] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Ping timeout (120 seconds))
[14:09:17] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[14:09:55] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[14:15:49] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:16:53] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[14:19:44] *** Joins: hayley (~theemacss@user/hayley)
[14:21:13] *** Quits: dre (~dre@2001:8003:c932:c301:55ad:378d:2c99:f745) (Quit: Leaving)
[14:21:23] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:21:37] *** Joins: wacki (~wacki@87.123.136.47)
[14:23:02] <hayley> I'm trying to define a pattern for the Trivia pattern matcher that would help me have a nicer way of testing some property of a value. It works, but I get full warnings saying "failed to infer the type from test (HAS-TAGS-P ?)" which indicates I'm doing something wrong.
[14:23:24] <hayley> Anything look off with <https://plaster.tymoon.eu/view/3009>? I can only guess that GUARD1 is the wrong pattern for this.
[14:29:41] *** Joins: usermain (~usermain@fixed-187-190-158-31.totalplay.net)
[14:30:18] <hayley> Something like (trivia:match 2 ((satisfies evenp) 'even)) also produces full warnings. And I don't see why it's an issue, given there just isn't a Common Lisp type representing the values that satisfy EVENP. It's not my problem, though I recall the Quicklisp tests will not accept code that generates full warnings when compiled, and I'm trying to clean up one-more-re-nightmare for submission to Quicklisp.
[14:34:08] <jackdaniel> if that's the only goal, then perhaps you could muffle the condition locally
[14:34:48] <hayley> It's not the only goal. But I would like to turn some calls into TRIVIA.NEXT:NEXT into more precise patterns.
[14:39:20] *** Joins: ssafar (~simon@c-73-158-251-170.hsd1.ca.comcast.net)
[14:40:20] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[14:40:29] <rotateq> maybe via a compiler macro?
[14:41:13] <_death> hayley: if I understand it correctly, it tries to infer the type of X from the expression (not (has-tags-p x)) in the case where the expression returns true or false.. it has an "unary-function" inference rule that fumbles around with the name HAS-TAGS-P, stripping the -P and looking for the type HAS-TAGS.. since there's no such type, it gives up on inference.. then there's a decision to warn about it..
[14:41:21] <hayley> Don't see how it'd help here.
[14:42:01] <flip214> hayley: which SBCL version? karlosz has done some type inference work over the last 2-3 weeks, IIRC.
[14:42:03] <jackdaniel> (deftype has-tags () t) or something
[14:43:14] <_death> maybe post a request for a more customizable approach to warnings, or at least the use of a proper condition type for it
[14:43:41] <hayley> _death: Right. I don't think it's a very good decision, but I can't fix it, and I can't see a way around.
[14:43:58] <hayley> jackdaniel: I guess. But that's nasty. And then it could conclude that the type of X matching (not (has-tags-p X)) is NIL.
[14:44:43] * jackdaniel is only pattern (ke ke) matching (not unlike eliza and minion)
[14:46:01] <hayley> Hm, maybe I could write the (somewhat metacircular) definition (deftype has-type () (satisfies has-type-p)) which would be sound.
[14:46:47] <hayley> But, again, I don't think giving a full warning for failing to infer types is good behaviour, and I don't feel like "pandering" to it.
[14:48:27] <_death> can create a patch with a proper condition type
[14:49:54] <hayley> Sure. I'd need two, since the type-i library signals a warning of type WARNING, and then Trivia should (optionally) muffle that warning.
[14:51:04] *** Joins: akoana (~ah@user/akoana)
[14:51:08] <_death> the muffling could happen in your program.. then you can write a single patch
[14:53:22] <hayley> Trivia makes extensive use of nested macros to compile, so I'd need to muffle every nested macroexpansion. And, still, I don't think it's good default behaviour to expect every predicate to correspond to a type (that isn't a SATISFIES type).
[14:54:23] <_death> well, fumbling with the names to infer types may be a bad decision in itself
[14:57:21] <_death> you could also add your own inference rule ;)
[15:04:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[15:06:19] *** Joins: aeth (~aeth@user/aeth)
[15:12:40] *** Joins: pjb (~pjb@user/pjb)
[15:14:11] *** Joins: VarunA (~VarunA@58.146.106.91)
[15:15:05] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:16:20] *** Joins: kevingal (~quassel@149.157.107.109)
[15:18:21] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:20:57] *** Quits: kevingal (~quassel@149.157.107.109) (Ping timeout: 260 seconds)
[15:21:26] *** Joins: kevingal (~quassel@2001:770:c0:401:c44c:2364:15bc:7df8)
[15:21:59] <hayley> Again, there is nothing useful to infer; the predicates I want to use have no correspondence with the Common Lisp type system.
[15:22:21] <hayley> ...nor any type system which doesn't have refinement or dependent types, even.
[15:26:17] *** Quits: Algernon69 (~Algernon6@2a04:cec0:11f4:18d8:b8f2:424f:eeae:6855) (Ping timeout: 250 seconds)
[15:26:19] *** Joins: phantomics (~phantomic@71-218-229-123.hlrn.qwest.net)
[15:31:39] <hayley> I wrote an issue: <https://github.com/guicho271828/trivia/issues/133>
[15:33:00] <_death> I mean something like (type-i::define-inference-rule my-rule (test) (if (typep test '(cons (eql has-tags-p))) '((typep type-i::? 't)) nil))
[15:34:17] <hayley> Well, I guess that'd work.
[15:53:47] *** Quits: usermain (~usermain@fixed-187-190-158-31.totalplay.net) (Ping timeout: 260 seconds)
[15:54:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:54:44] *** Joins: lisp123 (~lisp123@143.238.171.43)
[15:57:42] *** Quits: Brucio-61 (~Brucio-61@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[15:58:27] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[15:59:51] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[16:04:07] *** Joins: prokhor (~Prokhor@46-22-24-242-dynamic-cpe.cust.swissbackbone.net)
[16:10:27] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:17:10] *** Joins: razetime (~quassel@117.254.35.251)
[16:22:56] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:30:33] *** Joins: treflip (~user@user/treflip)
[16:31:02] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:31:32] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[16:31:41] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[16:31:57] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[16:32:08] *** Joins: Brucio-61 (~Brucio-59@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[16:33:48] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a4e5:994e:ce63:7d6e)
[16:42:55] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11f4:18d8:dc27:fab8:25dc:abe5)
[16:47:13] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a4e5:994e:ce63:7d6e) (Ping timeout: 256 seconds)
[17:15:10] *** Quits: razetime (~quassel@117.254.35.251) (Ping timeout: 246 seconds)
[17:17:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[17:18:39] *** Joins: aeth (~aeth@user/aeth)
[17:22:37] *** Joins: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it)
[17:27:33] *** Joins: Bike (~Glossina@71.69.170.70)
[17:30:11] *** Joins: razetime (~quassel@117.254.35.196)
[17:31:45] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[17:32:41] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:33:16] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[17:38:16] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[17:43:21] *** Joins: lisp123 (~lisp123@143.238.171.43)
[17:44:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[17:48:14] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 260 seconds)
[17:58:23] <Josh_2> Has anyone written a nonce value into a script html tag with Spinnert?
[17:58:26] <Josh_2> spinneret*
[18:04:51] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[18:14:04] *** Joins: Krystof (~user@81.174.155.115)
[18:14:36] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[18:16:47] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11f4:18d8:dc27:fab8:25dc:abe5) (Quit: Leaving)
[18:17:00] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:20:09] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Quit: ERC (IRC client for Emacs 26.3))
[18:28:26] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 272 seconds)
[18:30:02] <cage> Hi! Are there some commands, functions or tool to detect memory leaks for a program compiled with SBCL?
[18:33:21] <beach> It is hard to even define a memory leak in Common Lisp, no?
[18:34:12] <_death> there's the allocation profiler (aprof.lisp in sbcl source tree)
[18:34:32] <_death> it's easy to create a memory leak if you hold references to objects you don't need
[18:35:02] <beach> Yes, but how would a tool determine that you don't need those objects?
[18:35:30] <_death> it helps you determine what those objects are and who might hold a reference
[18:35:36] <Bike> sbcl also has the search-roots extension function to see what's keeping an object alive.
[18:35:57] <Bike> but yeah, i'm not sure a tool to detect memory leaks makes sense, being application dependent
[18:38:35] *** Joins: treflip (~user@user/treflip)
[18:41:38] <beach> _death: So you mean, given an object that you think should be GC-ed but isn't, find out where it is referenced from?
[18:41:53] *** Quits: VarunA (~VarunA@58.146.106.91) (Quit: Leaving...)
[18:42:39] <cage> thanks to you all for your help!
[18:42:42] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[18:42:52] <Bike> yeah. that's not really detecting a memory leak, but it's something you might want to do once you've identified one
[18:42:55] <Bike> and it's what search-roots is for
[18:44:00] <_death> it can tell you how many instances of particular types you have.. so if you have lots of objects of a particular type that shouldn't really be you know where to look for the problem
[18:44:26] <_death> well, sometimes ;)
[18:44:30] <cage> i am using drakma to make several http request and i suspect there something leaking around that, maybe is something related to FFI and TLS, but these are only guesses so far
[18:47:33] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[18:54:04] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[18:55:02] *** Joins: treflip (~user@user/treflip)
[19:02:27] <cage> for example i was not closing socket in some functions and this was, of course, a problem
[19:05:27] <random-nick> wouldn't those objects have finalizers on them?
[19:07:20] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:11:51] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[19:14:00] *** Joins: kpoeck (~kpoeck@business-176-095-230-162.static.arcor-ip.net)
[19:15:31] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[19:16:19] *** Joins: treflip (~user@user/treflip)
[19:16:51] <lagash> random-nick: as in, they "clean up" after themselves..?
[19:19:05] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:20:19] *** Quits: treflip (~user@user/treflip) (Client Quit)
[19:21:56] *** Joins: eugercek (~user@user/eugercek)
[19:21:57] *** Quits: kpoeck (~kpoeck@business-176-095-230-162.static.arcor-ip.net) (Quit: Client closed)
[19:24:18] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[19:24:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[19:27:01] *** Lord_of_Life_ is now known as Lord_of_Life
[19:29:44] <CodeBitCookie[m]> Hello Everyone!
[19:29:57] <cage> random-nick: drakma can returns a stream after starting an http request, then the caller is in charge of close the stream, i failed to do that :(
[19:30:01] <cage> CodeBitCookie[m]: hi!
[19:31:21] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:31:29] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[19:31:38] *** Joins: lisp123 (~lisp123@143.238.171.43)
[19:33:17] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[19:36:13] *** Quits: razetime (~quassel@117.254.35.196) (Ping timeout: 240 seconds)
[19:36:13] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 246 seconds)
[19:36:21] *** Joins: kpoeck (~kpoeck@business-176-095-230-162.static.arcor-ip.net)
[19:44:45] *** Joins: razetime (~quassel@117.254.35.251)
[19:45:58] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[19:54:03] *** Joins: yewscion (~yewscion@72-21-196-66.amazon.com)
[20:13:04] *** Quits: razetime (~quassel@117.254.35.251) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:16:25] *** Joins: usermain (~usermain@fixed-187-190-158-31.totalplay.net)
[20:21:36] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[20:22:36] *** Quits: kpoeck (~kpoeck@business-176-095-230-162.static.arcor-ip.net) (Quit: Client closed)
[20:28:00] *** Joins: karlosz (~karlosz@47.151.136.69)
[20:29:32] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[20:32:06] *** Joins: razetime (~quassel@117.254.35.251)
[20:35:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[20:36:27] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:42:01] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:42:53] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[20:49:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:52:45] *** Joins: jack_rabbit (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[20:53:10] *** Joins: kpoeck (~kpoeck@tmo-100-19.customers.d1-online.com)
[20:53:58] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[20:54:00] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:54:02] *** Quits: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 260 seconds)
[20:54:07] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:01:33] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[21:06:44] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[21:07:24] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 272 seconds)
[21:07:54] *** Joins: Inline__ (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[21:08:22] *** Quits: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[21:08:30] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:09:21] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (Read error: Connection reset by peer)
[21:09:50] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 260 seconds)
[21:10:33] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[21:10:34] *** ChanServ sets mode: +o fe[nl]ix
[21:11:20] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:12:53] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[21:16:57] *** scymtym_ is now known as scymtym
[21:18:02] *** Joins: eddof13 (~textual@189.178.17.205)
[21:18:25] *** Quits: yewscion (~yewscion@72-21-196-66.amazon.com) (Ping timeout: 246 seconds)
[21:19:52] *** Joins: lisp123 (~lisp123@143.238.171.43)
[21:21:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[21:23:39] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:24:20] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 252 seconds)
[21:24:48] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[21:26:09] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:31:52] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[21:32:33] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 260 seconds)
[21:33:52] *** Quits: razetime (~quassel@117.254.35.251) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:47:55] *** Joins: orestarod (~orestarod@2a02:2149:8a3f:4a00:ac3e:fdb9:cec1:9bb9)
[21:49:41] *** Joins: attila_lendvai (~alendvai@2a02:ab88:7509:f780:ed82:a496:f55:e07b)
[22:04:58] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[22:37:29] *** Joins: Oddity (~Oddity@user/oddity)
[22:44:13] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[22:46:50] *** Quits: usermain (~usermain@fixed-187-190-158-31.totalplay.net) (Ping timeout: 252 seconds)
[22:51:10] *** Joins: usermain (~usermain@fixed-187-190-158-31.totalplay.net)
[22:58:13] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:02:36] *** Joins: morganw (~user@80.225.24.132)
[23:08:11] *** Joins: lisp123 (~lisp123@143.238.171.43)
[23:12:18] *** Quits: kpoeck (~kpoeck@tmo-100-19.customers.d1-online.com) (Ping timeout: 250 seconds)
[23:12:48] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 272 seconds)
[23:16:55] *** Joins: lisp123 (~lisp123@143.238.171.43)
[23:21:25] *** Quits: lisp123 (~lisp123@143.238.171.43) (Ping timeout: 250 seconds)
[23:22:58] *** Quits: kevingal (~quassel@2001:770:c0:401:c44c:2364:15bc:7df8) (Remote host closed the connection)
[23:24:13] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Remote host closed the connection)
[23:24:49] *** Joins: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net)
[23:27:45] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:29:09] *** Quits: eddof13 (~textual@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:29:47] *** Quits: yauhsien (~yauhsien@61-231-60-85.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[23:34:08] *** Joins: eddof13 (~textual@189.178.17.205)
[23:37:04] *** Joins: karlosz (~karlosz@hub.hrl.com)
[23:45:47] *** Quits: cage (~cage@dynamic-adsl-94-34-56-60.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:46:36] *** Quits: usermain (~usermain@fixed-187-190-158-31.totalplay.net) (Ping timeout: 245 seconds)
