[18:16:48] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[18:16:48] *** Server sets mode: +Fcnt 
[18:20:37] <john99> yep
[18:20:46] <john99> a bad include
[18:20:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[18:21:18] <rpav> o.O
[18:21:19] <john99> ofu
[18:21:28] <john99> XD
[18:21:41] <rpav> unless the include had a conflicting declaration of your function
[18:21:57] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:22:00] <john99> gcc if the function is not defined assume int
[18:22:11] <rpav> yea
[18:22:19] <rpav> aren't you compiling with warnings heh
[18:22:20] <john99> i ahve very old code and i cannot enable nearly any check
[18:22:24] <rpav> :(
[18:22:40] <john99> in fact the warning logs is thousand s of lines
[18:23:08] <TinoDidriksen> Surely most of them are trivial to fix, even grep+sed fixable...
[18:23:10] <john99> and -Werror=implicit-conversion is not posible becouse the code do that continiously
[18:23:42] <rpav> implicit conversion isn't the issue, you want whatever warns about undeclared functions
[18:23:44] <john99> probably.i i am in that, but i didnt have time to fiz all :(
[18:23:51] <john99> same
[18:24:25] <john99> rpav: same, the code have files of > 20K loc sometimes is very crazy
[18:24:41] <john99> a lot of unused functions
[18:24:55] <john99> anyway
[18:24:58] <john99> my problems
[18:25:03] <john99> i will fix with time
[18:25:12] <john99> ty :)  for the help
[18:28:54] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:30:28] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:34:23] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[18:34:23] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:37:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[18:39:34] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:43:31] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:50:28] <ezzieyguywuf> so, if I do `char str[] = "hello";`, then `str` is a `char*`, right? because it is a pointer to the address of the first element of the array
[18:50:39] <ezzieyguywuf> or is it `const char*`?
[18:50:55] <imMute> ezzieyguywuf: no, it's a char[].  which turns into a char* if you even breathe on it.
[18:51:32] <ezzieyguywuf> lol, interesting
[18:51:37] <rpav> yeah it's annoyingly syntaxed
[18:51:41] <ezzieyguywuf> yea very much so
[18:51:54] <ezzieyguywuf> this tripped me up in an interview over the summer, and I'm trying to brush up for an upcoming interview
[18:52:19] <ezzieyguywuf> if i do `char* ptr = str;` the compiler is happy
[18:52:34] <ezzieyguywuf> but is the `char[]` coerced into a `char*` or something?
[18:52:34] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:53:00] <imMute> the array is converted into a pointer, yes.
[18:53:01] <rpav> like it's "useful" that if you say `str` it looks like `char*` but really str refers to a very specific place in memory, and does not hold a pointer in any way
[18:53:49] <rpav> given `T x[] = ...;` saying `x` is like saying `&x[0]`
[18:54:06] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[18:54:10] <ezzieyguywuf> how does `const` play into it? as rpav is explaining, since `char[]` is a specific place in memory, something like `str++` is illegal.
[18:54:32] <ezzieyguywuf> rpav: ah, that is a useful way to think about it.
[18:54:47] <rpav> if you say `char x[] = "..."` then you get a `const char* const` i think
[18:54:55] <rpav> err
[18:55:01] <ezzieyguywuf> except `T* ptr = &x[0]; ptr++;` _is_ legal
[18:55:12] <ezzieyguywuf> rpav: lol yea this part trips me up!
[18:55:14] <rpav> no just `const char*` probably but `x` is "const"
[18:55:15] <imMute> ezzieyguywuf: because ptr is a pointer to the array.
[18:55:57] <urdh> isn't decaying string literals to char*/char[] deprecated these days?
[18:56:16] <imMute> urdh: what are you supposed to use as the type then?
[18:56:17] <ezzieyguywuf> hrm, so maybe I should consider `T x[] = ..;` the `x` here as something like a constant. like 1. I can't 1++ b/c 1 is 1
[18:56:30] <urdh> imMute: const char*?
[18:56:40] <rpav> << sizeof(X); struct X { char c[2]; }; // think of it this way
[18:56:40] <geordi> 2
[18:56:48] <imMute> urdh: ah, I thought you were implying a different type entirely
[18:57:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:57:36] <urdh> { char* tmp = "oh no"; } // yeah don't do this
[18:57:36] <geordi> error: ISO C++ forbids converting a string constant to 'char*'
[18:57:39] <rpav> e.g. X is not a struct of a char* that is "automatically allocated and pointed at" a char[2], it's 2 chars, `c[0]` and `c[1]`
[19:00:10] <ezzieyguywuf> what would the sizeof be if it WAS a struct of char*?
[19:00:18] <ezzieyguywuf> 128?
[19:00:29] <rpav> it wouldn't be a struct of char*
[19:00:37] <rpav> err
[19:00:38] <ezzieyguywuf> I'm saying, if you defined such a struct
[19:00:44] <rpav> i read that as "array of char*"
[19:01:01] <ezzieyguywuf> << sizeof(X); struct X{ char* a; char* b};
[19:01:01] <geordi> error: expected ';' at end of member declaration (fix known)
[19:01:09] <ezzieyguywuf> << sizeof(X); struct X{ char* a; char* b;};
[19:01:09] <geordi> 16
[19:01:20] <ezzieyguywuf> so each pointer is 8...bytes?
[19:01:23] <ezzieyguywuf> ahh yea, so 64-bits
[19:01:29] *** Quits: Meteorhead (~Meteorhea@165.225.77.51) (Quit: Client closed)
[19:02:04] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:02:31] <ezzieyguywuf> this is good stuff, I need to know this!
[19:02:35] <rpav> << sizeof(X); struct X { char* c = new char[2]; };
[19:02:35] <geordi> 8
[19:03:05] <ezzieyguywuf> yea that totally makes sense
[19:03:16] <ezzieyguywuf> could be as big as you want
[19:03:19] <ezzieyguywuf> << sizeof(X); struct X { char* c = new char[2000]; };
[19:03:19] <geordi> 8
[19:03:52] <ezzieyguywuf> I should draw out the memory for each of these, I think that will help
[19:04:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[19:05:44] <rpav> C++ is still very "valuey" and it helps to think of what/where those values are
[19:05:51] <rpav> also helps with optimization stuff later but
[19:06:05] *** Joins: dld (~davidlowr@2601:197:600:1210:5c78:4bcc:82fe:593c)
[19:09:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:13:02] <ezzieyguywuf> so, does every memory address point to a single byte of memory?
[19:13:13] <ezzieyguywuf> or maybe my real question is: is RAM just an array of bytes?
[19:13:25] <Haohmaru> it depends
[19:13:42] <imMute> ezzieyguywuf: memory is byte-addressed, yes.
[19:14:08] <imMute> there are *some* styems that aren't, but those are largely embedded only and you may never come into contact with them.
[19:14:19] <ezzieyguywuf> gotcha
[19:14:21] <Haohmaru> unless you do ;P~
[19:14:29] <baltazar> hi! when can a class be used as a parameter of a constexpr function?
[19:14:45] <ezzieyguywuf> is a 'row' of memory just a single byte though? that seems wrong
[19:14:45] <Haohmaru> a class?
[19:14:55] <baltazar> I mean an instance of a class
[19:14:56] <ezzieyguywuf> I feel like it's some exponent of 2 like 8 or 16
[19:14:56] <Haohmaru> do you mean an instance of a class/struct/whatever?
[19:15:28] <imMute> ezzieyguywuf: memory arrangement depends on the type of memory in use.  it largely doesn't matter for programmers though - just think of it as one big array of bytes
[19:15:38] <Haohmaru> {} struct X {int a;}; constexpr void func(X x) {}
[19:15:38] <geordi>  
[19:15:53] <ezzieyguywuf> i think it matters when you start looking at optimizing stuff and cache hits/misses etc
[19:16:00] <ezzieyguywuf> I g2r anyway though my interview is soon
[19:16:20] <baltazar> Haohmaru: yes that does work, but once I try to use its value, my compiler just says it's not a constant expression
[19:16:22] <imMute> ezzieyguywuf: the exact memory arrangement doesn't matter for those things though.  just cache utilization.
[19:16:43] <Haohmaru> baltazar because the instance of the class/struct must be also a constexpr
[19:17:03] <Haohmaru> { X x; func(x); } struct X {int a;}; constexpr void func(X x) {}
[19:17:03] <geordi>  
[19:17:16] <baltazar> Haohmaru: I haven't even called the function yet
[19:17:30] <Haohmaru> uhm, okay, got a testcase?
[19:17:40] <baltazar> {} struct X {int a;}; constexpr int func(X x) { return x.a; }
[19:17:40] <geordi>  
[19:17:54] <baltazar> hm
[19:18:25] <Haohmaru> which version of C++ are you using?
[19:18:41] <baltazar> C++20
[19:18:49] <Haohmaru> that sounds new enough
[19:18:57] *** Joins: mjack (~mjack3@45.118.158.24)
[19:19:00] <Haohmaru> got a better testcase?
[19:19:47] <Haohmaru> { X b; int eee = func(b); } struct X {int a;}; constexpr int func(X x) { return x.a; }
[19:19:47] <geordi>  
[19:19:53] <Haohmaru> { X b; constexpr int eee = func(b); } struct X {int a;}; constexpr int func(X x) { return x.a; }
[19:19:53] <geordi> error: the value of 'b' is not usable in a constant expression
[19:19:59] <Haohmaru> there's your error probably
[19:20:06] <Haohmaru> { constexpr X b; constexpr int eee = func(b); } struct X {int a;}; constexpr int func(X x) { return x.a; }
[19:20:06] <geordi> error: uninitialized 'const b'
[19:20:16] <baltazar> ah, it might be similar
[19:20:20] <Haohmaru> now just initialize b
[19:20:37] <baltazar> {} struct X {int a;}; constexpr int func(X x) { constexpr int b = x.a + 1; return b; }
[19:20:37] <geordi> error: 'x' is not a constant expression
[19:20:44] <baltazar> yep, this is what I tried to do
[19:20:51] <baltazar> but I guess it works fine if b is not constexpr
[19:20:59] <Haohmaru> uhm
[19:21:17] <baltazar> I just assumed that the arguments of constexpr functions would be constexpr?
[19:21:18] <Haohmaru> wait, you're using constexpr inside of the constexpr function?
[19:21:34] <baltazar> yes
[19:21:36] <Haohmaru> a constexpr function can turn into a runtime function!
[19:21:49] <Haohmaru> unless you force it to be ran at compile time
[19:21:49] <mjack> I am new to C++ and only know python can anyone suggest me any best place where i can learn c++ quite fastly ???
[19:21:56] <baltazar> yes, there's my error then
[19:22:35] <baltazar> thanks!
[19:22:50] <mjack> I am new to C++ and only know python can anyone suggest me any best place where i can learn c++ quite fastly ???
[19:23:02] <Haohmaru> mjack first, don't repeat
[19:23:05] <mjack> anyone please i want to learn it fastly
[19:23:16] <Haohmaru> you have like 10 minutes to learn it?
[19:23:44] <Haohmaru> where's the rush here
[19:23:53] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:24:04] <Haohmaru> !learncpp
[19:24:05] <nolyc> Haohmaru: Error: "learncpp" is not a valid command.
[19:24:05] <mjack> not 10min means yep i can devote more time but actually i know python so i did want to read those basic concepts
[19:24:10] <mjack> like that
[19:24:20] *** Quits: john99 (~john99@170.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[19:24:28] <Haohmaru> well, afaik, C++ is quite different from snek script ;P~
[19:24:37] <Haohmaru> so maybe you need to go thru some of the basics
[19:25:19] <Haohmaru> now, if you knew C then maybe you could skip some of the basics since C++ originally started from C.. but boy has it changed since then
[19:25:19] <mjack> Yea So is there any suggestion you want to give about from where i study??
[19:25:45] <mjack> I know little bit basics od C
[19:25:48] <Haohmaru> do you like books?
[19:25:51] <Haohmaru> (coz i don't)
[19:26:03] <mjack> Actually No :)
[19:26:10] <Haohmaru> this maybe? https://www.learncpp.com/
[19:26:31] <mjack> let me checkk it
[19:27:20] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:58f6:9256:95ca:a08d)
[19:27:24] <Haohmaru> be aware that (IMO) one doesn't simply ever reach the level where you can say "i know C++"
[19:27:37] <Haohmaru> it's too big, and you don't need to know everything
[19:27:52] <PJBoy> +1 learncpp
[19:27:52] <mjack> Yea i know that but i want to know its basics
[19:28:10] <Haohmaru> then this website is probably gonna be decent
[19:28:14] <Haohmaru> ask if you get stuck
[19:28:17] <mjack> so that i can make some automate programs to automate my work
[19:28:37] <mjack> Definetly @Haohmaru
[19:28:42] <mjack> Thankyou !!!!
[19:28:47] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:29:16] <Haohmaru> PJBoy recently learned C++ from there, he is now nearly sensei level ;P~
[19:29:24] <PJBoy> exactly
[19:29:35] <Haohmaru> i ask him when i get stuck
[19:29:40] <mjack> Yea now i am also starting from here
[19:30:06] <PJBoy> I wonder if the guy deleted my unsigned int comment
[19:30:21] <malinus> never 5 get the guy who said "I can learn C++ in 2 days top because I already know java (been working with java for 2years!!!! :O)"
[19:30:59] <PJBoy> he hasn't, wow
[19:31:07] <Haohmaru> and he was never seen since then
[19:31:09] <mjack> i have been working in python since 1 years
[19:32:15] <Haohmaru> i started from mIRC, learning C++ after that was.. difficult
[19:32:31] <Haohmaru> particularly learning the types, because in mIRC everything is "text"
[19:32:37] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:35:58] *** Joins: Guest6821 (~Guest@host74.190-137-39.telecom.net.ar)
[19:37:51] *** Quits: mjack (~mjack3@45.118.158.24) (Quit: Leaving)
[19:38:03] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Quit: Leaving)
[19:38:03] <Haohmaru> and then pointers, arrays, and dynamic memory
[19:38:44] <Haohmaru> i never really learnt std:: except for a little bit of cout/cin, fstream, string
[19:38:50] <Haohmaru> untill recently
[19:46:42] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[19:50:24] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:50:24] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:50:39] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:58:30] *** Quits: magla (~gelignite@55d41a29.access.ecotel.net) (Quit: Stay safe!)
[20:12:13] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:14:27] *** Joins: Christ0pher (~anunnaki@c-174-54-139-228.hsd1.pa.comcast.net)
[20:21:14] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:25:21] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[20:33:46] <greyrat> I want to run `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON` in a subdir, to not clutter my root directory. How do I make clangd find these files? As a last resort, I can just symlink the needed the files from the subdir to the root dir, but I don't know which of them is needed.
[20:33:46] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:33:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:37:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:42:48] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:43:04] <ezzieyguywuf> imMute: when you say "cache utilization" you mean "is my memory in cache"? doesn't it also matter if my data are adjacent in memory versus in disparate locations?
[20:43:26] <ezzieyguywuf> and at some point doesn't the size of a "row" of memory (I guess in cache?) come into the equation as well, i.e. how big a "row" is?
[20:43:27] <imMute> "is my *data* in cache"
[20:43:36] <ezzieyguywuf> imMute: lol yes.
[20:43:50] <imMute> the size / arrangement of cache matters for cache perf, yes.  but not main memory really
[20:44:22] *** Joins: magla (~gelignite@55d41a29.access.ecotel.net)
[20:44:23] <imMute> certain access patterns are better and worse for main memory, sure, but if you optimize for cache perf you'll be using main memory effectively too
[20:44:59] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:46:31] *** Quits: vin (~vin@user/crash) (Ping timeout: 252 seconds)
[20:46:43] <cq-work> greyrat: you copy it sadly.
[20:46:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[20:46:56] <cq-work> Or symlink it if your OS allows it.
[20:47:20] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:47:48] <cq-work> There may be a way to specify the actual location in recent days though, so I guess look for that first.
[20:47:49] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:47:54] <LordKalma> greyrat, general advice: it's best to have the build directory be sibling to the source dir, not inside it
[20:48:03] <LordKalma> but that said, clangd needs the file at the root of the project
[20:48:16] <LordKalma> well, technically anywhere in a -parent level-
[20:49:22] <LordKalma> https://github.com/ruilvo/aether_explorer/blob/master/CMakeLists.txt#L110
[20:49:25] <LordKalma> personally I do this
[20:53:01] <hnOsmium0001> pretty sure clangd has an argument to specify the directory to search for compile_commands.json
[20:53:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[20:53:33] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:54:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[20:54:29] <hnOsmium0001> > --compile-commands-dir=<string> - Specify a path to look for compile_commands.json. If path is invalid, clangd will look in the current directory and parent paths of each source file
[20:54:31] <hnOsmium0001> this one
[20:54:57] <hnOsmium0001> although most LSP implementations don't allow you to specify this, I've only used it under Sublime Text LSP where it is possible
[20:56:50] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:59:05] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:03:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[21:05:07] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[21:08:12] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:12:54] <ville> most is a bold claim
[21:14:14] <ville> emacs lsp-mode let's you specify the command line arguments used to start clangd. not saying anyone should use emacs. far from it
[21:18:08] <LordKalma> you can pass arguments on vscode clangd too
[21:18:59] *** Quits: proller (~p@2a02:6b8:0:51e:4dcf:5a2e:df9d:133a) (Ping timeout: 264 seconds)
[21:19:21] <greyrat> Is `compile_commands.json` the only file clangd needs? I symlinked it, but it still didn't work.
[21:19:35] <greyrat> (I am using emacs, so I can specify the args easily.)
[21:19:46] <LordKalma> ironic
[21:19:48] <LordKalma> but yes, it is
[21:19:49] <rpav> greyrat: yeah but define "doesn't work"
[21:20:31] <rpav> i mean, most probably your symlink is broken
[21:20:43] <rpav> or in the wrong place i guess
[21:20:44] <greyrat> rpav: It said it couldn't find the boost library when I used the symlink. (It works fine when I run `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .` on the root dir.)
[21:21:07] <greyrat> Hmm. I'll try making an abs path symlink and see.
[21:21:14] <cq-work> Is your code-base compiling fully when generating that compile_commands.json file?
[21:21:33] <rpav> greyrat: well compile_commands.json or link needs to be in whatever (projectile-project-root) says
[21:21:41] <cq-work> If you go to compile and it fails to find boost then, trying to find boost from the resulting compile_commands.json will result in the same.
[21:21:51] <rpav> it doesn't need to be absolute but it should resolve of course ;)
[21:21:55] <greyrat> cq-work: I don't understand your question. I am very new to c. Can you tell me what in the cmake's output are you looking for?
[21:22:08] <greyrat> Or I can just put the whole output of `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .` in a pastebin.
[21:22:29] <rpav> ok that's going to be my new one, "what the the _cmake's output_ are you saying?!"
[21:22:38] <cq-work> I'm saying you need to build your project completely for compile_commands.json to work.
[21:22:59] <rpav> cq-work: what you shouldn't
[21:23:15] <rpav> excepting Qt or hypothetical other frameworks which generate .cpp/.h but that's pretty rare
[21:23:22] <rpav> but then you only need partial build
[21:23:31] <cq-work> Yes, you should, especially if your project is failing to build. You need to make sure that it can successfully find all headers and resolve those errors.
[21:23:38] <rpav> oh
[21:23:47] <rpav> yeah .. you should do that to start
[21:23:52] <cq-work> If your compilation fails, your compile_commands.json is going to fail, it's really that simple.
[21:24:09] <rpav> ultimately if your config is actually right, you don't need to build to make compile_commands.json work, but it is a basic first test
[21:24:12] <rpav> yeah
[21:24:28] <greyrat> Okay, recreating the symlink and restarting emacs, everything seems to work. 
[21:24:29] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:25:25] <greyrat> BTW, does anyone know how to use cpp with emacs-jupyter (or any other way to use it with org-babel)?
[21:26:02] *** Joins: Leone (~Leo@216.154.21.17)
[21:26:09] <rpav> probably the emacs know-how here is more limited than #emacs
[21:26:20] <rpav> but c++ there might be more limited ;/ ;)
[21:27:09] <cq-work> I mean, I'm using Windows personally but if not that, then Linux.
[21:27:29] <rpav> sortof orthogonal to emacs really; i use emacs both places for most consistent cross-platform environment
[21:27:52] <rpav> my first emacs use was actually on OS/2 🤔
[21:27:55] * cq-work drops dead from the unending laughter he caused himself with his perfected joke.
[21:27:59] <rpav> ah those were .. days
[21:28:43] <rpav> oh right the "emacs is an OS#!@" thing, is just a bit silly these days when everything else is like, electron
[21:33:03] <rpav> du -h emacs/ => 118MB ; du -h VSCode-linux-x64 => 291MB
[21:33:07] <rpav> guess which does more out of the box ;)
[21:33:25] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:33:57] <rpav> though to be fair magit isn't included in emacs, and you really want to download that and a couple other packages
[21:34:20] <LordKalma> getting a compilation database from cmake *does not* require building anything even
[21:34:22] <rpav> but the builtin stuff probably isn't worse than vscode, just uglier
[21:34:29] <LordKalma> you get it at the end of the configuration
[21:34:37] <rpav> no but it _may_ refer to things that don't exist yet
[21:34:54] <LordKalma> maybe, but still
[21:34:57] <rpav> yeah
[21:35:19] <rpav> but making sure you can actually build without error is a good first step to debugging whether it works
[21:36:43] <vdamewood> LordKalma: Re: "it's best to have the build directory be sibling to the source dir, not inside it" Got any sources? I got into an argument about this and the only thing I could come up with was that it contaminated your source control.
[21:36:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:36:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:36:54] *** ChanServ sets mode: +v npaperbot
[21:38:22] <rpav> i've tried sibling builds and they're a huge pita
[21:38:22] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:38:40] <rpav> ignore files can take care of 'build/'
[21:39:00] <cq-work> Why are they huge pita?
[21:39:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: No Ping reply in 180 seconds.)
[21:39:46] <cq-work> If anything, that's how they're supposed to work, it's been recommended for decades at this point I feel like.
[21:39:54] <rpav> because it's generally easy to keep track of the root of your project, but as soon as you break out of that and start juggling multiple top-level directories a lot of things that are easy to take for granted become .. well, a juggle
[21:40:11] <rpav> i've never really seen it recommended
[21:40:20] <cq-work> It's recommended all the time on the mailing lists.
[21:40:21] <rpav> out of _source_ builds, sure, but that's not the same as out of _tree_
[21:40:55] <cq-work> What?
[21:40:58] <rpav> a `build/` subdirectory (or subdirs.. i use a subdirectory of $ROOT/build/ for every build type) counts as "out of source"
[21:41:18] <rpav> i.e. you don't have generated makefiles living next to your .cpp
[21:41:24] <cq-work> Eh... that's not generally what that means.
[21:41:27] <rpav> yes it is
[21:41:43] <cq-work> I mean, believe what you want.
[21:41:43] *** Quits: andreasbuhr (~quassel@p548dded5.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:41:50] <rpav> the main purpose there is it's vastly easier to clean and doesn't depend on a perfectly configured make script to do so
[21:42:34] <rpav> otherwise there's not a lot of reason afaict, but maybe someone has encountered other pitfalls
[21:44:18] <cq-work> https://gitlab.kitware.com/cmake/community/-/wikis/FAQ#out-of-source-build-trees
[21:44:26] <rpav> yeah well https://cgold.readthedocs.io/en/latest/tutorials/out-of-source.html others don't ;)
[21:45:52] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[21:45:59] <cq-work> I guess we're going to just ignore what a source tree means now, alright.
[21:46:00] <vdamewood> well, one reason I use out-of-tree builds personally is because my source code is on a read-only network share.
[21:46:01] <rpav> https://mesonbuild.com/Using-multiple-build-directories.html
[21:47:28] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:47:59] <ville> greyrat: lsp-mode, i am presuming you're using that, not clangd understand when the compile_commands.json changes, so you need to restart the clangd process emacs launched
[21:48:05] <ville> err lsp-mode launched
[21:48:32] <rpav> vdamewood: yeah there are definitely reasons
[21:48:49] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3485:4754:8937:91cd)
[21:48:49] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3485:4754:8937:91cd) (Changing host)
[21:48:49] *** Joins: skapata (~Skapata@user/skapata)
[21:49:05] <ville> greyrat: you can do: (define-key lsp-mode-map (kbd "C-<return> <delete>") #'lsp-restart-workspace) or so
[21:49:52] <rpav> lsp-restart-workspace already ought to be M-l w r
[21:50:08] <rpav> or i guess whatever the lsp prefix key is, followed by `w r`
[21:50:23] <rpav> i can never remember what i've custom bound or not ;/
[21:51:58] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[21:52:17] <ville> the default binds for any addons are complete nonsense. never bother even looking at them
[21:53:50] *** Joins: RoKenn (~RoKenn@2001:a61:34f2:df01:405b:3ac5:780d:208b)
[21:53:50] *** Quits: RoKenn (~RoKenn@2001:a61:34f2:df01:405b:3ac5:780d:208b) (Changing host)
[21:53:50] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:54:02] <rpav> ah lsp-command-map, and yeah i bound it to M-l mostly because it was probably otherwise not taken by something useful
[21:54:35] <cart_man> Lets say I have a MAP<string, uint32_t> MyList;  now I want to perform two functions sequentially on this list BUT the trick is I want to later be able to add another function on the same MAP accept I dont want to call any of the functions seperately. So in other words something like a for loop of std::vecto<functions> that will run on the map. Will that be the correct solution?
[21:54:53] <rpav> what
[21:55:06] <rpav> oh you want to compose functions
[21:55:18] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[21:55:32] <rpav> there are lots of options, "pipe"-style syntaxes can make it nice
[21:55:45] *** Joins: eck (~root@user/eck)
[21:55:48] <rpav> lambdas are a trivial option
[21:55:59] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:56:42] <cart_man> rpav: How would you insert Lamdas into an array of vec?
[21:56:54] <rpav> auto myfn = [](int i) { return i+1; }; auto additional = [&](int i) { return myfn(i) + 2; }; auto subtractional = [&](int i) { return additional(i)-8; }; ...
[21:56:58] <cart_man> rpav: I might be over thinking this test
[21:57:09] <rpav> i mean you could also make a vector of functions but maybe don't be set on that
[21:57:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:57:30] <cart_man> rpav: But then I have to call each individually
[21:57:34] <cart_man> if O dont use the vector
[21:57:35] <rpav> if you want a user-configurable list of functions then sure, maybe vector<function<T(T)>>
[21:57:38] <cart_man> I`
[21:57:52] <rpav> cart_man: but you don't, you're not reading the bodies ;)
[21:58:04] <rpav> you just have to call subtractional(i) and it calls all the rest itself; they're composed via lambda
[21:58:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:58:48] <cart_man> rpav: I see but then Ihave to bake the "new" function I am writing into my last Lambda every time I add one?
[21:58:48] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:58:54] <rpav> if you do like `auto x = fn | fn2;` and later you might do `auto y = x | fn3;` or whatever if you have a neat pipeline framework to compose using that syntax
[21:59:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:59:21] <rpav> cart_man: it depends on your needs; don't over-generalize
[21:59:57] <rpav> if you need this like once or twice and you spend 200 hours building a framework to do it, you lost 199.99 hours
[22:00:23] <cart_man> rpav: Yea I get that
[22:00:25] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:00:48] <cart_man> Its just this test is so vague I am not quite sure what they are looking for. So paralysis by analysis comes to mind but
[22:01:10] <cart_man> If you take the problem on simple ways it just seems to simple and trivial
[22:01:17] <cart_man> So I am guessing there is more to it
[22:02:59] <rpav> test? o.O
[22:04:13] <rpav> i would go with lambdas in the case that the above statement is vaguely in line with what the test says; if thye call it wrong then they're wrong
[22:05:15] <rpav> although it's unclear what "i don't want to call any of the functions separately" really means, since clearly one must call all of the functions at some point, and at least one function "separately" (either the head of the chain, or each function in the vector)
[22:05:21] <cart_man> rpav: So this -> std::vector<function<void(std::map<string, uint32_t>)>>  ?
[22:05:46] <cart_man> rpav: Yea I meant sequentially but not actually written out
[22:05:55] <rpav> probably map& .. i mean, not the answer i'd give but maybe it's what they want 🤷
[22:05:59] <cart_man> soo not like Func1() ; Func2() ; Func3() etc
[22:06:32] <rpav> definitely not how i'd do it in practice outside of some really odd case
[22:06:35] <cart_man> rpav: Where void is the return tupe and std::map&  is the parameter of the functions?
[22:06:45] <cart_man> rpav: I totally get that
[22:06:47] <rpav> sure
[22:07:04] <cart_man> rpav: I will make 3 versions of the same thing cause honeslty I have no idea what they want in that regard so
[22:07:07] <cart_man> they can then choose lol
[22:07:28] <rpav> like it's not really a wrong answer, but it's unclear how much you have to meta this
[22:07:30] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:08:50] <cart_man> rpav: unclear is def the keyword there
[22:08:55] <rpav> e.g. you could have a function<T&(T&)> head_fn; and everytime you want to append to the chain, head_fn = [=](T& v) { return do_thing(head_fn(v)); }; or whatnot
[22:09:11] <rpav> assuming do_thing returns T& of course
[22:12:02] <cart_man> rpav: Yea that was my initial idea. However wouldn't I have to push it.
[22:12:03] *** Quits: ville (~ville@212-149-214-47.bb.dnainternet.fi) (Read error: Connection reset by peer)
[22:12:06] <cart_man> Ohh its not a vectpr
[22:12:08] <cart_man> hmmm
[22:12:56] <rpav> vectpr<T>, a linked list
[22:12:56] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:15:49] *** Joins: ville (~ville@212-149-214-47.bb.dnainternet.fi)
[22:17:08] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[22:17:17] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/d13f785de1dc47c60a63fd3fade57777/pasted.txt
[22:17:42] <Ronalds_Mazitis_> I included math.h in my opengl programm
[22:17:59] <Ronalds_Mazitis_>  g++ TRY.cpp -o gl -lGL -lGLU -lglut
[22:18:04] <Ronalds_Mazitis_> I compile it like this
[22:18:17] <Ronalds_Mazitis_> for some reason math functions don't get recognised
[22:19:27] *** Quits: mfc_ (~mfc@user/mfc) (Remote host closed the connection)
[22:20:25] <ville> c does not have a function called "max"
[22:21:02] <cart_man> rpav: btw what should "function" in -> std::vector<function<void(std::map<string, uint32_t>)>>    be?
[22:21:26] <Ronalds_Mazitis_> C  library math does not have that?
[22:21:32] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:21:57] <ville> yes, c has functions called fmax and fmaxf
[22:22:36] <ville> c++ defines std::max() in the algorithm header
[22:22:51] <cart_man> rpav: Is it the one I get from #include <functional> ?  std::function ?
[22:23:27] <Ronalds_Mazitis_> I get these errors
[22:23:31] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/1cfef08e4474d723abca91dc974dec4e/pasted.txt
[22:23:40] <Ronalds_Mazitis_> the code is
[22:23:45] <Ronalds_Mazitis_> float i,e,s,o,g,k=.01;for(o++;i++<1e2;g+=fmax(k,e*.2)){vec3 p=vec3((FC.xy-.6*r)/r.y*g+r/r*rotate2D(t+g*.5)*.5,g+t/.3);e=.3-dot(p.xy,p.xy);for(s=2.;s<2e2;s/=.6)p.yz*=rotate2D(s),e+=abs(dot(sin(p*s+t*s*.2)/s,p-p+1.));o+=o.w*min(e*o+(sin(vec4(1,2,3,1)-p.z*.3)*.6-.4),k)*k;}
[22:23:48] <rpav> cart_man: in that case std::function is knda your only bet yeah
[22:23:58] <ville> Ronalds_Mazitis_: your code is unreadable
[22:24:13] <Ronalds_Mazitis_> yeah, I am using it from web, it's not mine, but it should work
[22:24:29] <Ronalds_Mazitis_> I think I just need to make sure things are defined and functions are usable
[22:25:07] <ville> well good luck with that
[22:25:17] <Ronalds_Mazitis_> trust me, it has really good visual appeal
[22:25:24] <CarloWood> It doesn't look like that works to me.
[22:25:27] <Ronalds_Mazitis_> if You crack this one, You might like it yourself
[22:25:35] <CarloWood> float o; for (o++;  <-- UB?
[22:25:55] <Ronalds_Mazitis_> yeah, well the dude that posted this was not very precise on twitter
[22:26:10] <ville> CarloWood: they are initalized to .01
[22:26:20] <rpav> compiling and running random code posted on twitter sounds like a recipe for success and security
[22:26:40] <CarloWood> ville: seriously? I'd think only k is initialized
[22:26:40] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:26:47] <Ronalds_Mazitis_> yeah, I like to live in danger
[22:26:56] <ville> CarloWood: no the initialization of k returns k, then that gets...
[22:27:39] <CarloWood> { float a,b=0.012345; cout << a; }
[22:27:40] <geordi> warning: 'a' is used uninitialized
[22:27:56] <CarloWood> Thank God, I am not going crazy :/
[22:28:05] <ville> oh wait , not =
[22:28:22] <rpav> CarloWood: well, you still might be; consider you read the above and immediately recognized UB
[22:28:39] <cart_man> What is that std:: call you can make to execute a function pointer more elegantly ?
[22:29:02] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[22:30:53] <Alipha> Eh, `fptr()` works fine. You don't have to dereference the function pointer first (ie, `(*fptr)()` is unnecessary)
[22:31:21] <ville> CarloWood: std::invoke() ?
[22:31:33] <ville> err cart_man
[22:32:01] <cart_man> ville: Ye thats it
[22:32:02] <cart_man> thanks
[22:33:54] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[22:35:34] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:36:20] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:40:32] <Ronalds_Mazitis_> that code is helluva, wthell is FC
[22:40:35] <Ronalds_Mazitis_> in it
[22:41:00] <Ronalds_Mazitis_> yeah twitter programmers are geniuses
[22:41:28] <Ronalds_Mazitis_> float i,e,s,o,g,k=.01;for(o++;i++<1e2;g+=fmax(k,e*.2)){float vec3, p=vec3((FC.xy-.6*r)/r.y*g+r/r*rotate2D(t+g*.5)*.5,g+t/.3);e=.3-dot(p.xy,p.xy);for(s=2.;s<2e2;s/=.6)p.yz*=rotate2D(s),e+=abs(dot(sin(p*s+t*s*.2)/s,p-p+1.));o+=o.w*min(e*o+(sin(vec4(1,2,3,1)-p.z*.3)*.6-.4),k)*k;}
[22:41:46] <Alipha> "geniuses"
[22:42:11] <cq-work> I mean, that is pretty nifty but it's in that form probably because it went through some obfuscation/minification tool.
[22:42:12] <Ronalds_Mazitis_> I am lazy to read what I wrote anyway
[22:42:17] <Alipha> But is that why it's formatted horribly? To fit in a tweet?
[22:42:59] <cq-work> I used to work with a group that did this because it sped up GLSL parsing times supposedly and to act as a form of obfuscation against people just stealing it.
[22:43:17] <cq-work> Honestly, it was a fairly dumb idea. It made almost no difference.
[22:44:12] <cq-work> It's like how Javascript uses minification or how Minecraft purposefully and maliciously obfuscates their code like a bunch of assholes.
[22:44:32] *** Joins: great_taste (~great_tas@190.32.235.20)
[22:46:36] *** Quits: malloy (~jimery@116.30.223.211) (Ping timeout: 250 seconds)
[22:47:02] <cart_man> rpav:  Soo ... this actually runs in wandbox and COUTS but doesnt do the same when I compile and run locally ? --> https://wandbox.org/permlink/CanWr5xThiL9yPjO
[22:47:10] <cart_man> Localy I compile with c++17
[22:47:23] <cart_man> Ok on the wandbox as well
[22:47:47] *** Joins: malloy (~jimery@116.30.223.211)
[22:51:10] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[22:51:41] <rpav> i don't know? (why are you using old style for for functions though)
[22:52:05] <rpav> oh i know
[22:52:09] <rpav> you're running it from the commandline
[22:52:16] <rpav> that's the difference
[22:52:26] <rpav> (and you don't print a newline)
[22:53:14] <cart_man> I am now thogugh
[22:53:29] <cart_man> https://wandbox.org/permlink/gwTavKE7nEX81P87
[22:53:53] <rpav> what does it do locally?
[22:54:04] <rpav> err
[22:54:24] <rpav> oh no misread
[22:54:51] *** Joins: proller (~p@80.240.216.69)
[22:54:55] <cart_man> rpav: Locally it does not print anything
[22:55:01] <cart_man> maybe default optemizing?
[22:55:04] <cart_man> optimizing`
[22:55:36] <rpav> i forget how map::insert works and maybe something else is weird dunno
[22:55:37] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:55:56] <rpav> this is why god gave us godbolt
[22:56:27] <rpav> what is your local compiler?
[22:58:23] *** Joins: Ivii (~Ivyy@2001:a61:1304:3a01:31dd:8799:859e:bfc7)
[22:58:26] <Alipha> cart_man: you don't initialize spec_index
[22:58:46] <cart_man> OMG
[22:58:49] <cart_man> what a noob
[22:58:57] <cart_man> So weird how wanbox works ?
[22:59:22] <cart_man> im just tired
[22:59:23] <cart_man> going to bed now
[22:59:24] <Alipha> I'm really surprised there's no warning
[22:59:30] <cart_man> Thanks for the help thouigh
[22:59:38] <rpav> sheesh
[22:59:43] <rpav> always use range based for ;/ ;)
[23:00:03] <kalven> seems like clang warns
[23:00:18] <Alipha> Funny. You get the warning if you turn on optimizations
[23:00:19] <rpav> i should have -fsanitize=undefined on godbolt too
[23:00:53] <ville> !give Alipha -Wall
[23:00:55] <nolyc> Alipha: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[23:01:07] <ville> Alipha: there's a reason that -O2 is there
[23:01:09] <rpav> hrm, i don't seem to get ubsan output on godbolt
[23:02:54] <rpav> https://godbolt.org/z/83nbdzc77 <- slightly simpler code, sadly still cout
[23:03:13] <ville> perhaps should replace the -O2 with -Og
[23:04:37] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:06:43] *** Quits: Ivii (~Ivyy@2001:a61:1304:3a01:31dd:8799:859e:bfc7) (Remote host closed the connection)
[23:10:26] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[23:12:31] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[23:15:17] *** Quits: magla (~gelignite@55d41a29.access.ecotel.net) (Quit: Stay safe!)
[23:19:18] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:19:18] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:19:19] <Ronalds_Mazitis_> Uploaded file: https://uploads.kiwiirc.com/files/d53273075114457bb9096879f42dcdb9/pasted.txt
[23:19:38] <Ronalds_Mazitis_> error: request for member ‘xy’ in ‘FC’, which is of non-class type ‘float’
[23:19:49] <Ronalds_Mazitis_> float vec3, FC, p=vec3((FC.xy-.6*r)
[23:20:05] <RandomReader> as I mentioned yesterday, this isn't C++, and these snippets have context
[23:20:07] <RandomReader> talk to those people, not here
[23:21:10] <Ronalds_Mazitis_> maybe FC is not float
[23:21:26] <Ronalds_Mazitis_> FC.xy is sub
[23:24:08] *** Joins: lionrouge_ (~evocatus@84.51.113.13)
[23:24:16] <RandomReader> what part of "it's not C++" is unclear to you?
[23:24:33] *** Quits: lionrouge_ (~evocatus@84.51.113.13) (Remote host closed the connection)
[23:27:00] *** Joins: evocatus_ (~evocatus@84.51.113.13)
[23:27:08] <LiaoTao> RandomReader, What if you squint just hard enough and then alias gcc to g++? :P
[23:27:23] <RandomReader> still no
[23:27:32] <RandomReader> it's a shader language, so specific compiler and environment
[23:27:46] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:27:55] <RandomReader> there's no C++ compiler that's going to do what he wants here
[23:28:06] <LiaoTao> Oh, I just assumed it was C because I don't click random links
[23:28:24] <LiaoTao> My bad!
[23:28:27] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 258 seconds)
[23:28:32] <RandomReader> yeah completely out of context it certainly looks like it could be
[23:28:42] <RandomReader> which I think is part of the problem, it's from tweets that lack context
[23:31:22] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:58f6:9256:95ca:a08d) (Remote host closed the connection)
[23:31:45] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[23:34:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[23:34:18] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:cc23:1494:cd22:f9fe)
[23:39:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[23:41:03] *** Joins: proller (~p@2a02:6b8:b081:8821::1:19)
[23:42:15] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:47:07] *** Quits: Guest6821 (~Guest@host74.190-137-39.telecom.net.ar) (Read error: Connection reset by peer)
[23:48:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:50:58] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:cc23:1494:cd22:f9fe)
[23:51:36] <whupdup> that got me thinking, on a mostly unrelated note, it's possible to make a union of structs to represent most swizzles, right
[23:51:57] <whupdup> I say most because I'm pretty sure you can do vec2().yyyy
[23:53:28] *** Quits: evocatus_ (~evocatus@84.51.113.13) (Quit: Leaving)
[23:53:35] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[23:54:05] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:cc23:1494:cd22:f9fe) (Ping timeout: 260 seconds)
