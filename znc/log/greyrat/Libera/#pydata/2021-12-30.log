[00:10:16] <mefistofeles> Arrinao: can't you use the dtype keyword?
[00:10:37] <Arrinao> that will just show me the types no?
[00:11:04] <Arrinao> it's datetime64 I know it already
[00:13:00] <mefistofeles> dtype={'DOB': datetime64}
[00:13:02] <mefistofeles> or something like that
[00:14:37] <Arrinao> that doesn't do anything
[00:14:51] <Arrinao> I need the datetime to show like a datetime
[00:15:02] <Arrinao> in like iso format
[00:15:06] <mefistofeles> ah, so it's a representation thing
[00:15:12] <mefistofeles> hmmm
[00:15:24] <mefistofeles> well, you probably don't want datetime64 then
[00:15:49] <mefistofeles> but some processing of that
[00:15:55] <mefistofeles> and make it a string
[00:16:34] <Arrinao> I mean I know you can do this in to_json with the date_format parameter
[00:17:05] <Arrinao> but read_json() should have something similar to translate it
[00:18:02] <mefistofeles> Arrinao: ok, what's your code? for creating and reading the json
[00:18:07] <mefistofeles> and the contents of the json, hopefully
[00:18:16] <mefistofeles> because, as before, this depends on inputs/outputs
[00:20:01] <Arrinao> a sec
[00:22:29] <Arrinao> https://dpaste.com/65DWUG8ZZ
[00:23:40] <mefistofeles> Arrinao: what about the json?
[00:24:08] <Arrinao> I don't understand what youre asking?
[00:24:16] <mefistofeles> the contents of the json file
[00:24:18] <mefistofeles> how are the dates there
[00:24:38] <Arrinao> they are the same
[00:24:43] <Arrinao> just in this stupid format
[00:24:56] <Arrinao> or maybe you mean something else and I don't get it still :D
[00:25:56] <Arrinao> the first print is of the excel, the second of the json; the data is the same
[00:26:58] <mefistofeles> Arrinao: please share a sample of the contents of the json file, specially for the DOB column
[00:27:10] <Arrinao> ok
[00:27:38] <Arrinao> {"year":{"0":2010,"1":2011,"2":2012},"day":{"0":15,"1":16,"2":17},"month":{"0":10,"1":11,"2":12},"DOB":{"0":1287100800000,"1":1321401600000,"2":1355702400000}}
[00:29:14] <mefistofeles> ok, I guess the problem is in the to_json
[00:29:24] <mefistofeles> I guess json doesn't have datetimes as supported types 
[00:29:48] <Arrinao> ahhh
[00:29:57] <mefistofeles> but you can definitely make it output an ISO formatted string
[00:30:07] <mefistofeles> and save that in the json
[00:30:11] <Arrinao> through to_datetime?
[00:30:41] <Arrinao> (I meant with to_datetime my english sucks sometimes) :D
[00:30:45] <mefistofeles> Arrinao: no, with to_json
[00:31:03] <Arrinao> Yes I know that, with date_format parameter
[00:31:30] <Arrinao> I was just wondering if I get the data in this format in json, if it's there a way to convert it
[00:31:57] <Arrinao> maybe via some alternate thingy? like the dt.strftime() you suggested earlier?
[00:32:58] <mefistofeles> I guess that's in epoch format
[00:33:01] <mefistofeles> so you would have to convert to iso
[00:33:12] <mefistofeles> Arrinao: yes, that one should work
[00:38:53] <Arrinao> that's gonna require some hack :/
[00:39:26] <Arrinao> I can't do pd.read_json('C:/Users/Martin/dates.json').dt.strftime('%Y//%M//%d')
[00:40:34] <Arrinao> and I can't do pd.to_datetime() with dt.strftime() either, because I can't specify a format 
[00:45:37] <mefistofeles> to_json
[00:45:41] <mefistofeles> has parameters for that
[00:49:02] <Arrinao> wait so youre suggesting using read_json first, then to_json with date_format arg and then read_json again?
[00:49:48] <mefistofeles> hm no, but not sure what's your problem now anyways xD
[00:50:38] <Arrinao> well imagine you get the data in json with this epoch format
[00:51:00] <Arrinao> you use read_json and find it out
[00:51:03] <Arrinao> now what
[00:51:38] <Arrinao> like I said I know to_json has date_format, but it's not relevant here
[00:51:53] <mefistofeles> oh, if you get it like that
[00:51:58] <mefistofeles> you just change the format as you want it
[00:52:05] <Arrinao> :D
[00:52:06] <Arrinao> how?
[00:52:12] <mefistofeles> fro epoch to wahtever format
[00:52:15] <mefistofeles> *from
[00:52:27] <mefistofeles> as I said earlier
[00:52:30] <Arrinao> read_json has some parameter for that?
[00:53:39] <mefistofeles> not sure, probably not
[00:54:02] <mefistofeles> but strftime is easy and flexible enough for this task
[00:54:19] <Arrinao> I tried it and it doesn't work with dataframe object
[00:54:40] <Arrinao> pd.read_json('C:/Users/Martin/dates.json').dt.strftime('%Y//%M//%d') doesn't work
[00:55:27] <mefistofeles> yes, because that's not a series but a dataframe
[00:55:31] <mefistofeles> dt is for series
[00:55:45] <Arrinao> ahh
[00:55:48] <Arrinao> let me try :D
[00:55:49] <mefistofeles> how would it know what column to apply it?
[00:55:53] <mefistofeles> :)
[00:55:55] <Arrinao> true
[00:56:57] <Arrinao> Can only use .dt accessor with datetimelike values
[00:57:04] <Arrinao> you were right
[00:57:14] <Arrinao> json doesn't support datetimes
[00:58:09] <Arrinao> but isn't there something to change these huge numbers into datetime values without them actually being datetimelike?
[00:59:08] <mefistofeles> yes, strings
[00:59:25] <mefistofeles> hence strftime :P
[01:02:14] <Arrinao> mefistofeles: so you mean change it to strings and then apply .strftime?
[01:02:41] <mefistofeles> not, the other way around I'd guess
[01:03:06] <mefistofeles> I mean, strftime already returns strings
[01:03:45] <Arrinao> can't use the Series
[01:03:51] <Arrinao> so I guess some for-loop?
[01:04:16] <mefistofeles> why not?
[01:04:25] <mefistofeles> I mean, why can't you use Series?
[01:05:49] <Arrinao> because 'Series' object has no attribute 'strftime'
[01:05:58] <Arrinao> d=pd.read_json('C:/Users/Martin/dates.json')
[01:05:58] <Arrinao> print(d)
[01:05:58] <Arrinao> d['DOB'].strftime('%Y//%M//%d')
[01:06:03] <mefistofeles> Arrinao: we've been through this before
[01:06:06] <mefistofeles> dt.strftime
[01:06:15] <Arrinao> I can't use dt.strftime either
[01:06:20] <mefistofeles> why not?
[01:06:27] <Arrinao> Can only use .dt accessor with datetimelike values
[01:06:44] <mefistofeles> oh, because you are reading incorrectly from the json
[01:06:54] <mefistofeles> that's why I suggested dtype form the start
[01:07:48] <Arrinao> is the dtype supposed to be an argument for read_json?
[01:08:06] <mefistofeles> yes, check the docs
[01:08:22] <Arrinao> d=pd.read_json('C:/Users/Martin/dates.json', dtype={'DOB': 'datetime64'})
[01:08:22] <Arrinao> print(d)
[01:08:22] <Arrinao> d['DOB'].dt.strftime('%Y//%M//%d')
[01:08:22] <Arrinao> print(d)
[01:08:29] <Arrinao> still getting Can only use .dt accessor with datetimelike values
[01:09:32] <mefistofeles> well, you didn't use it correctly
[01:09:36] <mefistofeles> np.datetime64 
[01:09:49] <mefistofeles> not a string
[01:10:02] <Arrinao> I did what you suggested at the beginning :D
[01:10:23] <Arrinao> name np is not defined
[01:10:25] <mefistofeles> you can also just change the dtype of the series on demand
[01:10:30] <mefistofeles> whatever works :)
[01:10:35] <mefistofeles> np is numpy
[01:10:46] <Arrinao> ah ok
[01:11:39] <Arrinao> but even with np imported I'm still getting Can only use .dt accessor with datetimelike values :'(
[01:12:39] <Arrinao> d=pd.read_json('C:/Users/Martin/dates.json', dtype={'DOB': np.datetime64})
[01:12:39] <Arrinao> print(d)
[01:12:39] <Arrinao> d['DOB'].dt.strftime('%Y//%M//%d')
[01:12:39] <Arrinao> print(d)
[01:12:43] <Arrinao> what did I do wrong?
[01:29:54] <mefistofeles> Arrinao: what's the output of d['DOB'].dtype ?
[01:30:35] <Arrinao> int64
[01:31:27] <Arrinao> the arg doesn't seem to work for some reason
[01:31:42] <mefistofeles> yeah, convert it after reading the json
[01:33:54] <Arrinao> with astype?
[01:34:27] <mefistofeles> I guess, yes
[01:35:38] <Arrinao> huh
[01:35:39] <Arrinao> The 'datetime64' dtype has no unit. Please pass in 'datetime64[ns]' instead
[01:36:42] <Arrinao> when I pass it like that, I'm getting 'ns' is not defined
[01:42:31] <Arrinao> https://github.com/pandas-dev/pandas/issues/34928
[01:42:33] <Arrinao> :DDDDDDDDDDDDDD
[01:51:56] <mefistofeles> LOL
[01:51:59] <mefistofeles> pandas sucks xD
[01:52:01] * mefistofeles hides
[01:58:01] *** Joins: palasso (~palasso@user/palasso)
[03:13:01] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[03:46:31] *** Quits: Arrinao (~Arrinao@102.61.broadband3.iol.cz) (Read error: Connection reset by peer)
[06:19:39] *** Quits: nojeffrey (~nojeffrey@110-175-56-191.static.tpgi.com.au) (Quit: WeeChat 2.8)
[06:29:58] *** Joins: nojeffrey (~nojeffrey@110-175-56-191.static.tpgi.com.au)
[07:28:17] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[08:27:03] *** Quits: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[08:29:39] *** Joins: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de)
[08:33:15] *** Quits: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[09:45:14] *** Quits: kir0ul5 (~kir0ul@89.234.141.147) (Remote host closed the connection)
[09:46:10] *** Joins: kir0ul5 (~kir0ul@89.234.141.147)
[10:12:20] *** Joins: trace987 (~trace@ip5b42963a.dynamic.kabel-deutschland.de)
[12:10:33] *** Joins: palasso (~palasso@user/palasso)
[15:17:50] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[15:18:09] *** Joins: palasso (~palasso@user/palasso)
[17:15:10] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[23:07:57] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 240 seconds)
[23:13:54] *** Joins: Arrinao (~Arrinao@102.61.broadband3.iol.cz)
[23:16:31] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[23:57:02] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[23:59:06] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
