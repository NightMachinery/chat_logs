[01:01:03] *** Joins: makomo (~makomo@user/makomo)
[01:03:09] *** Quits: rogersm (~rogersm@90.166.180.250) (Remote host closed the connection)
[01:05:18] *** Joins: rogersm (~rogersm@90.166.180.250)
[01:07:09] *** Quits: CrashTestDummy (~CrashTest@ool-ad020ec7.dyn.optonline.net) (Quit: Leaving)
[01:09:31] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 245 seconds)
[01:11:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:41:41] <kakuhen> good morning
[01:43:16] <edgar-rft> finally someone who realizes that 10 pm makes a great morning :-)
[02:03:12] *** Parts: buoy49 (sid386684@id-386684.uxbridge.irccloud.com) ()
[02:07:42] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[02:12:32] *** ec_ is now known as ec
[02:40:58] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Remote host closed the connection)
[02:42:47] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[02:43:20] *** Joins: dre (~dre@2001:8003:c932:c301:70ee:1824:1d7e:5401)
[03:07:01] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[03:07:28] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:08:49] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[03:09:23] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:10:49] <hayley> Come to #elsleaks for top ELS leaks
[03:13:57] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:30:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:35:24] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:36:32] *** Joins: rogersm (~rogersm@90.166.180.250)
[03:40:53] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 252 seconds)
[03:51:55] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:15:49] *** Quits: dre (~dre@2001:8003:c932:c301:70ee:1824:1d7e:5401) (Ping timeout: 240 seconds)
[04:56:14] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 260 seconds)
[05:09:42] *** Joins: random-nick (~random-ni@87.116.167.125)
[05:14:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 252 seconds)
[05:28:54] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[05:29:57] *** Quits: X-Scale (~ARM@46.50.5.55) (Ping timeout: 256 seconds)
[05:29:57] *** X-Scale` is now known as X-Scale
[05:32:16] <drakonis> lol i just found out that moarvm has resumable exceptions
[05:32:29] <drakonis> this is a surprisingly beautiful thing
[05:33:39] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[05:35:34] *** Joins: aeth (~aeth@user/aeth)
[05:37:51] *** Joins: rogersm (~rogersm@90.166.180.250)
[05:40:13] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[05:42:02] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 240 seconds)
[05:45:19] *** Joins: X-Scale` (~ARM@89.214.146.25)
[05:45:34] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[05:45:50] *** X-Scale` is now known as X-Scale
[05:46:49] * hayley uploaded an image: (84KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/PZizeOzQemvpFrZHPqKmykAS/20220322_120536_thumbnail_1200.jpg >
[05:47:00] <hayley> They asked for proof that I had a cat and a Handbook.
[05:50:31] <Catie> Would you please tell your cat I love them?
[05:53:01] <hayley> Can do.
[05:53:22] <gilberth> hayley: Of what significance is the banana? And who is they?
[05:53:42] <hayley> gilberth: The banana is for scale, and "they" are some people from university.
[05:55:32] <gilberth> Oh. Is having a cat some requirement for your degree? Curious. And scale? Why? Don't they know how large the book is? And scale 2.0? Is that an EU standard banana for defined size? Questions, questions, and more questions.
[05:56:23] <hayley> 1. No. 2. Probably not. 3. No, that's the joke
[05:57:04] <gilberth> Do I have to laugh now?
[05:57:18] <hayley> One person said they were bored before a class. Another said to come meet them in another building. I said to meet me at my house, cause I don't have classes, but I have two cats and a Handbook.
[05:57:26] <hayley> gilberth: When you put it that way, I'd rather you didn't.
[05:59:35] <gilberth> Ah, I see. Perhaps it's because I don't have a cat that I don't have friends coming to my house. Can't be the handbook for I own one. That's better than borrowing. Or is that the trick?
[06:00:27] <hayley> Well, I've borrowed the book for like 8 months now. I basically own it, cause no one else would borrow it, so it gets extended indefinitely.
[06:00:54] <hayley> I intend to hold it until I graduate, at which point student dept will be significantly greater than the cost to buy another copy.
[06:01:01] <hayley> *student debt, with a b
[06:01:21] <gilberth> And ... wait a second .. size does matter? Hmm.
[06:01:44] <gilberth> So you can keep the book as long as nobody else asks for it? That's nice.
[06:01:52] <hayley> Yes.
[06:02:13] <hayley> I heard drmeister did the same thing for the Art of the Metaobject Protocol, but he said that if he had to return the book, he would hire whoever borrowed it.
[06:02:37] <gilberth> Heh.
[06:03:16] <hayley> Instead, I bought a copy after because my old university lost the book and took a week to find it. Which let me make a picture with two copies of the book.
[06:03:23] <hayley> https://i.redd.it/k1ebgpl6r5161.jpg
[06:04:16] <gilberth> What are two copies good for? Keep one upstairs and one downstairs?
[06:04:30] <hayley> For making a sandwich.
[06:04:47] <hayley> Gnuxie once said that "you put the AMOP either side of someones head and make a sandwich"
[06:05:14] <gilberth> A pity, I was hoping for a meta sandwich.
[06:05:31] <mfiano> gilberth: network question for you (or anyone that knows)
[06:05:54] <hayley> The GC Handbook is a little more expensive than AMOP. But I can probably stomach it, would I find a job eventually.
[06:06:22] <gilberth> You know what, hayley, perhaps because of Zuckerberg's capture of the term "meta" that book may become popular. That would finally be a good thing coming from him.
[06:06:31] <hayley> lol
[06:07:00] <hayley> "Bear Grylls Survival Skills Handbook Collection Series 10 Books Collection Set" Yes, I wanted that handbook. And they want $400 for shipping from the UK.
[06:08:03] <mfiano> Is it possible to query a root domain, such as example.com, for all of its DNS records? I was told this might be intentionally not possible. `dig example.com` for example, will only show the A record for example.com, not any CNAME records on it. You would need `dig www.example.com` for that record.
[06:08:12] <gilberth> For the GC handbook? This must be what? EUR 300 or so?
[06:08:28] <hayley> Seems closer to €100.
[06:08:34] <kakuhen> that reminds me i want to start reading the MOP textbook
[06:08:39] <kakuhen> but im not sure if it'd even be helpful for me
[06:08:53] <hayley> mfiano: I think that is intentionally not possible, yes.
[06:09:07] <kakuhen> but it's also the perfect time to learn common lisp properly now that i'm working on something that kinda requires me to write non-stupidly-designed code
[06:09:19] <gilberth> hayley: Google says EUR 268.69. There is your favorite number inside.
[06:09:22] <mfiano> hayley: Ok thanks.
[06:10:18] <hayley> But, if you really want, you can try brute forcing. Theoretically, there could be a server I want to target, with a www domain, and a ftp domain, and the www domain is protected but not ftp.
[06:10:36] <moon-child> gilberth: not only that, it still has it if you round
[06:10:52] <kakuhen> not if you round with bias towards negative infinity
[06:11:18] <moon-child> round, not truncate
[06:11:29] <gilberth> hayley: Which is expensive --- I get a quote by amazon.de saying EUR 102,40 including shipping and VAT.
[06:11:34] <moon-child> (well, I guess truncate is round towards 0; still)
[06:11:34] <hayley> Worse, that server theoretically only reads the header with the proxied IP address, and doesn't authorise that CloudFlare sent the header. So theoretically I could send my own header, and spoof using any IP I like.
[06:11:35] <gilberth> moon-child: Indeed.
[06:11:37] <kakuhen> moon-child: what i described counts as rounding
[06:11:40] <hayley> But this is totally theoretical and I didn't do it!
[06:11:43] <kakuhen> and what i described is not equivalent to truncate
[06:11:55] <moon-child> yeah
[06:11:59] <moon-child> BUT
[06:12:06] <moon-child> round to nearest bias towards even
[06:12:08] <moon-child> is the way
[06:12:32] <gilberth> Well, in Germany when you round in business you have to use (truncate (+ x 1/2)) by law.
[06:13:20] <moon-child> then 268.69 would still round to 269
[06:13:53] <kakuhen> assuming 268.69 includes tax, yes ;)
[06:13:57] <gilberth> Sure. And that is surprising given that hayley asked for that. Coincidence?
[06:15:04] <gilberth> kakuhen: It includes tax, prices quoted to private persons always include VAT. Shipping for books must be free by law. So that's the final price you have to pay.
[06:15:19] <moon-child> shipping for books must be free?
[06:15:21] <moon-child> ;o
[06:15:24] <kakuhen> wow, i am jealous of that law
[06:15:41] <kakuhen> in the US you are given pre-tax prices, always, and you have for shipping & handling
[06:15:49] <gilberth> moon-child: Book need to sell for a fixed price. And from that follows that shipping must be free.
[06:16:09] <kakuhen> japan is only one step above the US, in the sense that prices are often quoted with tax included -- but you still pay for shipping (unless you purchase at a physical bookstore)
[06:16:23] <gilberth> moon-child: That is, for new books, you never find two different prices from different retailers.
[06:17:13] <gilberth> kakuhen: Which also implies that they cannot be discount for books. Are you still jealous?
[06:18:18] <kakuhen> yes, because i rarely buy books on discount anyway
[06:18:53] <gilberth> I often buy used books. And to used books this law does not apply.
[06:20:56] <gilberth> Otherwise books are relatively expensive here. For prose we often bought the English original not only for it being an original but also because of the price. You don't notice with science and/or text books though as they are expensive no matter what.
[06:21:25] <kakuhen> yeah, i rarely purchase textbooks (thanks, libgen)
[06:22:39] <gilberth> kakuhen: There are two kind of stores I may not enter unless I want to become poor quick. One category is book stores and the other is stores for shoes.
[06:22:46] <kakuhen> haha
[06:23:04] <gilberth> I really don't want to know what the total money is I spend on books.
[06:23:11] <kakuhen> most of the money i spend on books is on shitty light novels that sell for ¥500 (tax included)
[06:23:16] <kakuhen> so i think i dont spend much
[06:23:33] <gilberth> That would be what in USD or EUR?
[06:23:34] <kakuhen> otherwise i have someone's lovely scan  from libgen
[06:23:58] <kakuhen> approximately $5 USD (with error of about 20 cents), so approximate 4.20 euros (with even worse error)
[06:24:23] <hayley> Books for work are tax deductible here. But I first have to pay tax.
[06:24:30] <gilberth> That's cheap. But actually I don't buy nor read novels anymore.
[06:25:21] * hayley thinks the report from esrap parse failures could do with algebraic simplification.
[06:25:26] <gilberth> hayley: Well, here too. But it would hard to justify to the tax office that I need CS books for the kind of businesses I do.
[06:25:27] <moon-child> 'heavy' novels are more expensive
[06:25:47] <moon-child> eur:usd is only 1:1.2 these days?  That is closer to 1 than I thought
[06:25:50] <hayley> "While parsing TWO-EXPRESSIONS. Expected: the character $ or the character & ..... or anything but the character $ or the character & ..."
[06:25:57] <kakuhen> if somebody decides to reprint the MOP textbook, I'll gladly overspend for it
[06:25:59] <moon-child> oh wow only 1.1 apparently
[06:26:27] <gilberth> kakuhen: It's 1:1.10. Thanks to the war we have in Europe.
[06:26:34] <hayley> The negated set at the end also includes some more, like close parens, but still A \/ ¬(A \/ B) can be simplified to ¬B
[06:26:52] <moon-child> oh that hurt eur too?
[06:27:04] <kakuhen> it seems so
[06:27:11] <kakuhen> i'm looking at fx charts right now, and it seems my mind was stuck in 2018
[06:27:25] <kakuhen> in my mind i still have internalized 1:1.25 for EUR/USD
[06:28:20] <kakuhen> and for jpy i blindly assume 100 since the risk in assuming 100 is that your exchange rate is as high as 130, lol
[06:28:26] <gilberth> Well, actually it isn't bad for me as the stocks I own are traded in USD.
[06:28:44] <moon-child> wait what
[06:28:56] <moon-child> apparently 100¥ is only 83¢us atm
[06:29:08] <kakuhen> for instance, jpy spot seems to be approximately 120 right now; at the start of the year, it was around 100
[06:29:16] <kakuhen> so now's a good time for me to purchase a ton of books from japan
[06:29:53] <kakuhen> of course, when individuals actually exchange currency, they do not get the spot rate
[06:30:12] <kakuhen> they obtain spot minus whatever-commission-the-magical-middle-man-charges
[06:30:16] <kakuhen> i.e. somewhere around 115
[06:37:21] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[06:38:55] *** Joins: mala (~mala@user/malaclyps)
[06:43:27] <hayley> https://mas.to/@nodefunallowed/107997061557037017 I still don't understand this GC alignment chart
[06:43:27] -ixelp- Hayley Patton: "@xgqt@fosstodon.org still not really making sense…" - mas.to
[06:43:37] *** Joins: dre (~dre@2001:8003:c932:c301:c38d:68f8:7c3:7e20)
[06:50:42] * hayley still struggles to get the font data out of an old Squeak source file.
[06:51:37] <hayley> There's one line that says "self size: 12 fromLiteral: '<binary gunk>'" and I can't find much to it. At least you could make out characters if you squinted at binary dumps of Genera fonts, which let me pull out the pixelated Times and Eurostile fonts.
[06:55:37] * hayley pokes around https://smalltalkzoo.thechm.org/HOPL-Squeak.html and finds StrikeFont>>readFromStrike2Stream: has a nicely written parser she can copy.
[07:17:48] *** Joins: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[07:19:56] *** Quits: Inline (~Inline@p200300cd4709f600befffe6df48235ec.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:40:54] *** Joins: susam_ (~susam@user/susam)
[07:41:06] *** Joins: elflng_ (~elflng@5.28.137.182)
[07:41:29] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[07:41:29] *** Quits: ixelp (~ixelp@p5492d317.dip0.t-ipconnect.de) (*.net *.split)
[07:41:29] *** Quits: susam (~susam@user/susam) (*.net *.split)
[07:44:12] <hayley> There is, of course, a bespoke run-length encoding compression format for the font data. Maybe I should just convince Squeak to dump the bitmap for me.
[07:47:37] <gilberth> Heh, you want to extract the Squeak fonts?
[07:54:08] <hayley> Pedantically, a font from Smalltalk-80 (I think) that someone made working in Squeak, and that's the only version I can find.
[07:55:44] <gilberth> Hmm, I always wanted to do the reverse and convert my beloved 6x13 to something the CADR likes.
[08:00:55] <hayley> Hm, I got nothing by trying to extract the bitmap. Maybe I should tell Squeak to bit-blit the bitmap to the screen.
[08:01:43] <hayley> There's also a writeBMPFileNamed: method. Probably easier to use that.
[08:01:52] <gilberth> Is it fixed width?
[08:02:10] <hayley> Variable. This is Smalltalk.
[08:02:29] <gilberth> And how do you plan to get at the metrics?
[08:03:27] * hayley uploaded an image: (2KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/XNZzQTLhUdWBUXWbUDdzwZpV/_cream.bmp >
[08:03:42] <hayley> I managed to parse the header and metrics, but I gave up when I found out the font file uses its own compression format for the bitmap.
[08:04:24] * moon-child spots capital pi, sigma, omega
[08:04:39] <moon-child> also ellipse, surprising
[08:04:48] <gilberth> What is the rabbit doing there? Is there an Unicode code point for it?
[08:04:53] <moon-child> and em and en dash?
[08:05:19] <moon-child> I don't see the point of such characters in a fixed-width font (and presumably there was nothing to be compatible with)...
[08:05:27] <hayley> Also note that ^ is ↑ and _ is ←
[08:05:32] <moon-child> oh, also beta
[08:06:15] <kakuhen> is it possible to both record and play an audio stream within ffmpeg
[08:06:16] <gilberth> Last night I wondered, if ASCII had two code points for <minus sign> and <dash> would it be custom to write identifiers with dashes as we do with Lisp?
[08:06:46] <hayley> Now I have to remember how I made a TTF or something from the bitmap for Genera. I think I dumped another font format, then converted it.
[08:06:56] <kakuhen> right now i have VLC with an mp3 stream opened, and ffmpeg in separate window recording the same stream, pretty clunky set up; guess it's something i can add as a feature to my lisp media player in the far future
[08:07:13] <hayley> BDF most likely.
[08:07:13] <kakuhen> but first i need to make a non-retarded bytestream class
[08:07:48] <kakuhen> my current setup has a reader object with an underlying-stream slot, but that slot is a class variable, not instance variable
[08:08:16] <kakuhen> so my current decoders for flac and mu-law cant run in separate threads (so no multiple track decoding etc.)
[08:09:02] <hayley> "Unhandled BMP bitcount 1" Good job, CL-PNG.
[08:09:27] <gilberth> Reminds me. This was in the 90s. We had an English dictionary application for Win 3.1. I wanted to have the dictionary as a plain text file. I didn't figure out the file format it used. So I wrote an application, which would inject the proper mouse and keyboard events into the message queue to make that application display one page after another. I look at the frame buffer and match the characters with the given font.
[08:09:36] <hayley> I just converted it to PNG so that I could use it. sigh
[08:09:39] * moon-child wonders whether that is bitmap or basic multilingual plane
[08:09:47] <gilberth> It took me a few days to run this hack through all the dictionary.
[08:09:51] <hayley> Bitmap.
[08:10:39] <kakuhen> huh, vlc is able to automatically readjust stream titles, but mpv isn't
[08:11:00] <kakuhen> seems strange because an mp3 stream has no reason to communicate metadata a second time
[08:11:14] <kakuhen> so i guess vlc is just sending requests as if to restart the entire playback
[08:11:42] <gilberth> Then when back to X11, I could select a word, choose "lookup" from the root menu and have the translation displayed. The word would be entered into a vocabulary list for my flash card trainer. At times I miss that.
[08:13:06] <kakuhen> oh that reminds me another thing i wanted to do in common lisp was uh
[08:13:11] <kakuhen> an epwing parser
[08:13:48] <kakuhen> the format isn't as bad as JMDict thankfully (i.e. a giant xml blob)
[08:14:12] <kakuhen> but nonetheless going to be an interesting challenge since you'd have to shuffle around unicode everywhere in CL
[08:16:26] <kakuhen> oh and gilberth  if you miss the days of having to map bitmaps to characters
[08:16:41] <kakuhen> epwing dictionaries often use bitmaps to write out characters not provided by the text encoding
[08:16:56] <kakuhen> i have no idea how one even begins to handle that case if you want to search for words in an epwing dictionary
[08:17:41] <gilberth> kakuhen: No, I miss the dictionary look up and put into the vocabulary trainer loop.
[08:17:57] <kakuhen> ah
[08:19:16] <gilberth> This would be very handy. See any word you don't know. You look it up anyway and you then collect a list of exactly the words, you don't know yet. Trying to memorize them without a trainer is a slow process. Especially, when the brain thinks .oO(I could look it up anytime why bother memorizing?)
[08:30:39] <hayley> "FONT -xerox-cream-medium-r-normal--15-150-75-75-p-80-iso10646-1" seems legit
[08:32:04] <gilberth> Cool. Will you share it?
[08:32:30] <hayley> Once I manage to generate a real BDF file.
[08:32:50] <gilberth> Yours is only imaginary?
[08:33:18] <hayley> No, it is not valid BDF apparently.
[08:33:20] *** Joins: semz_ (~semz@user/semz)
[08:36:09] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[08:37:53] <moon-child> https://twitter.com/__phantomderp/status/1506094618043195395  lol
[08:38:39] <hayley> Protected account now. welp
[08:39:22] <gilberth> "You’re unable to view this Tweet because this account owner limits who can view their Tweets."
[08:39:51] <hayley> Hm, this tool keeps barfing that I am missing properties. But my old Times.bdf didn't have them.
[08:39:54] <moon-child> oh oop
[08:40:05] <moon-child> '"Derp, why are you trying to put Unicode in C, and not just going straight into C++?"  Well, the gamdevs hate C++, so if I put it in C maybe their premiere conference will finally have Unicode support.'
[08:40:42] * hayley continues looking for fonts
[08:40:43] <moon-child> gameshits can't text
[08:40:58] <hayley> *font converting programs on her disk
[08:41:21] <moon-child> fontforge
[08:41:22] <moon-child> ?
[08:42:12] <hayley> I forget how well FontForge fared with BDF fonts.
[08:42:25] <moon-child> https://redd.it/tjssob  somebody gets it
[08:42:40] <hayley> Well, something is wrong with my font when I see it in FontForge.
[08:42:54] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/mVpYNVUiRGLqShYzbagZRuCl/bruhcha.jpg >
[08:43:11] <hayley> (Not an effect system, but an object capability system, still.)
[08:43:28] <moon-child> close enough tho
[08:44:03] <hayley> Looks like I encoded my bits backwards.
[08:48:03] * hayley uploaded an image: (45KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/FkVktbyseFcdhRbDlHostwCn/Screenshot_2022-03-22_15-17-54.png >
[08:49:10] <hayley> The problem here is that I cannot generate a TTF from FontForge.
[08:49:34] <moon-child> there's bitmap ttf?
[08:50:05] <hayley> Good question.
[08:50:09] <moon-child> I mean, can trace a blocky outline as easily as a curvy one, but would need some kind of no-aa hint otherwise it would look like crap
[08:50:23] <hayley> Seems so. And I do have to disable AA in GIMP to make it work.
[08:50:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[08:52:15] <moon-child> hmm maybe you wouldn't need to turn off aa.  Depends on sampling methodology.  And everybody's sampling methodology is crap (plus fp error)
[08:52:39] <qhong> Why most environments still use separate character type? Why not just use symbols?
[08:53:03] <qhong> Then SYMBOL-NAME will give a sequence of symbols, extra meta-circularity 
[08:54:08] <hayley> Maclisp is that way ---->
[08:55:22] <moon-child> qhong: I did that in my apl
[08:55:38] <moon-child> the shape of an array is represented as itself, internally; it's not treated specially like in other apls
[08:55:46] <moon-child> ,1 is its own shape, and everything can be built from there
[08:56:13] <moon-child> err, is represented as an array.  Obviously nothing other than ,1 is a fixed point
[08:59:52] * hayley uploaded an image: (1KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/rrGOJYNrzZxfbSYXMiczLcRT/Screenshot_2022-03-22_15-29-43.png >
[08:59:59] <hayley> Not quite there yet. /me wonders what's up with everything
[09:00:53] <moon-child> ahh yeppp have definitely written that bug once or twice before
[09:01:05] <moon-child> weird that some characters are fine, though
[09:01:46] <hayley> If I had to guess, the ones that don't work take multiple bytes per scanline.
[09:02:01] <moon-child> but wrong access to bitmap text is weirdly distinctive.  Like writing a line editor (which I've done probably 3-4 times now)
[09:02:47] <hayley> But FontForge manages to render them all. Hm.
[09:04:29] <hayley> Producing a TTF file with FontForge generates a font which renders nothing in GIMP though. So I guess I need to trace the bitmaps.
[09:10:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:17:41] *** Quits: dre (~dre@2001:8003:c932:c301:c38d:68f8:7c3:7e20) (Quit: Leaving)
[09:19:27] * hayley uploaded an image: (9KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/XXKRfhyjpaPMEDJCuOfxnMAx/elephant-talk.png >
[09:19:38] <hayley> Seems the path tracer barfed on the letter I.
[09:21:55] * hayley posted a file: (14KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/yvLmBJOXFFrrePLduIZowIko/CreamNormal.ttf >
[09:21:56] * hayley posted a file: (28KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ouhAEEITqAxvOjgQWDBsaDqy/cream.bdf >
[09:24:02] <notzmv> hi hayley 
[09:24:03] <notzmv> ouo
[09:24:09] <hayley> ouo
[09:31:43] <notzmv> wdyt of julia hayley 
[09:31:59] *** Joins: semz (~semz@user/semz)
[09:32:08] <hayley> https://www.youtube.com/watch?v=M2irYat2wf4
[09:32:32] * hayley uploaded an image: (18KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/JbvJaszmWfHXHpwTEPsdWnAV/Screenshot_2022-03-22_16-02-20.png >
[09:32:35] <hayley> Here it is rendering some code.
[09:33:13] *** Joins: dre (~dre@2001:8003:c932:c301:c38d:68f8:7c3:7e20)
[09:33:17] <hayley> Emacs doesn't know how to handle variable width fonts, but it just happens to get close enough to look okay here.
[09:33:19] <notzmv> y-you code in a non-monospace font
[09:33:26] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 252 seconds)
[09:33:42] *** Quits: dre (~dre@2001:8003:c932:c301:c38d:68f8:7c3:7e20) (Remote host closed the connection)
[09:34:00] <hayley> I literally just finished converting it from Squeak sources, after a year of trying to figure out how, like 20 minutes ago. Let me celebrate.
[09:34:15] <notzmv> I mean I'm down for doing these memes in cl but I don't think I can get people on board with it so easily :p
[09:34:40] <notzmv> that's real dank tho hayley
[09:35:19] <hayley> I'll unironically use this font if there's a way to make Emacs behave with proportional fonts.
[09:35:22] <notzmv> are you gonna publish that code? I'm interested
[09:35:45] <notzmv> ye the font is cute but variable width is so annoying :œ
[09:36:05] <hayley> The code I screenshotted? It's just https://github.com/telekons/one-more-re-nightmare/blob/master/Code/DFA-construction/derivative.lisp
[09:36:17] <notzmv> oh right
[09:36:22] <notzmv> I didn't think lol
[09:38:59] *** Joins: rogersm (~rogersm@90.166.180.250)
[09:39:55] <hayley> "why are you coding in comic sans"
[09:40:16] <hayley> "u uncultured swine"
[09:41:14] <notzmv> ur saying it not me :^)
[09:42:42] <hayley> Someone asked me why I was using Comic Sans.
[09:43:25] <hayley> https://twitter.com/mala/status/1506136810069512193 lmao
[09:43:57] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 268 seconds)
[09:48:50] <hayley> "Danny O'Brien added you to their List I nod in agreement"
[09:54:57] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[09:55:28] <hayley> https://lists.gnu.org/archive/html/emacs-devel/2018-03/msg00127.html Oh boy, I can make variable pitch indents work.
[09:56:42] * hayley uploaded an image: (11KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/qLYWYAQPhfkuENGVOeDgtsZN/Screenshot_2022-03-22_16-25-53.png >
[09:57:37] <kakuhen> is that the genera font or
[09:58:14] <hayley> One of the Smalltalk fonts. Genera used monospace for code still.
[09:58:21] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[09:59:11] <moon-child> how baroque
[10:00:00] <hayley> The way this code works is quite clever, actually. It copies parts of higher lines and makes them the same colour as the background, giving you the perfect indent.
[10:00:18] * hayley uploaded an image: (3KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/ZGaspoaXesJDcikRJbkeMrzc/Screenshot_2022-03-22_16-30-05.png >
[10:04:36] <qhong> what's people's thought on CLOS style multimethod? It looks too artificial and bloated to add to the core language IMO, but idk what should be added then
[10:05:13] <qhong> (practically I find multimethod more pleasant to use than message passing)
[10:05:14] <hayley> I wouldn't agree with "artificial" or "bloated". But if you have funcallable instances, they could be a library feature.
[10:05:59] <qhong> hayley: and you need to be able to upgrade existing non-multimethod functions. So I guess one need Allegro style real FWRAPPER
[10:06:31] <qhong> FWRAPPER is pretty simple, so probably good to include in core language
[10:07:12] <hayley> Hm. I think you could upgrade just by adding a new default method that calls the old function. But then, what does a later DEFUN do?
[10:08:14] <hayley> Is there some way to make Emacs run a hook after opening a buffer?
[10:08:31] <qhong> hayley: IMO there are too many free parameters in a multimethod system. What's the set of specializers, what's the precedence order, etc. Compare to an ordinary lambda function, just a single beta-reduction rule
[10:08:32] <kakuhen> buffer-list-update-hook
[10:08:56] <kakuhen> then you can search if a buffer you want is in the list and do something if so
[10:09:16] <qhong> hayley: Probably need to preserve object identity. But I will have BECOME so that will work. But as you said, what does DEFUN do
[10:09:57] <qhong> hayley: So far FWRAPPER is the best option I see. It can be viewed as a general but simple facility for any open/extensible function
[10:10:06] <hayley> I see. I just want every buffer to have this VARIABLE-PITCH-INDENT ... eh, it doesn't work interactively though. Shit.
[10:11:25] <qhong> Another question: is the additional indirection (beside symbol indirection) through function object necessary?
[10:12:00] <qhong> If you add method a generic function, any user, regardless they use #'function or 'function, will be able to see the change
[10:12:14] <hayley> Would I write new code, it will not line up. Maybe I can work out an incremental version, idk.
[10:13:14] <qhong> If you use FWRAPPER or whatever magic you come up with that doesn't preserve object identity, users that do 'function will see the change, but users of #'function will see the old function object
[10:13:32] <qhong> Is any of the two behavior better as a default?
[10:16:35] * moon-child still wonders why we need funcallable-standard-instances rather than just (defmethod funcall ((x my-funcallable-standard-instance) ...) ...)
[10:16:44] <moon-child> ;)
[10:17:09] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[10:18:35] <qhong> moon-child: what is FUNCALL then? (Well, if you want CLOS built-in then FUNCALL is just STANDARD-GENERIC-FUNCTION, but that makes core language 42x bigger)
[10:19:41] <moon-child> (defmethod funcall ((x (eql #'funcall)) ...) ...)
[10:20:18] <hayley> Well, running the function after every update isn't too awful. It's a bit slow, but bearable for typing still. And I'm given a range which is updated, so I could do something incremental surely.
[10:20:22] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[10:23:07] <hayley> If I open sbcl/src/runtime/gencgc.c, it's awful. Quite bearable for files I write still.
[10:26:40] <hayley> SICL's Compiler/MIR-to-LIR/Register-allocation/allocate-registers-for-instructions.lisp is pretty choppy, and I did write a fair amount of that. sigh
[10:28:27] <kakuhen> i have a possible non-sensical question
[10:29:12] <kakuhen> so i'm in a situation where an object contains a "header object," and i want to be able to refer to slots in the header within a method of the contaning object
[10:29:33] <kakuhen> this is simple, (let ((foo (bar-accessor (header obj))) ...)
[10:29:56] <kakuhen> i can obviously bind "header" to (header obj) and simply do (bar-accessor header) (baz-accessor header)
[10:30:11] <kakuhen> or I can implement these generic functions for the containing object
[10:30:49] <kakuhen> i guess in the end i want inheritance but without actually  being a subclass of the header object
[10:30:53] <moon-child> (defclass obj (header) )?
[10:30:56] <kakuhen> is that possible for a select few slots lol
[10:31:05] <hayley> Nope.
[10:31:30] <kakuhen> guess i'll stick with header accessor then
[10:31:34] <moon-child> could use a macro to generate the accessors
[10:31:57] <kakuhen> i dont want inheritance because most of the information in the header object is not meant to be used by the object that contains it anyway
[10:32:13] <kakuhen> with the exception of 2-3 (out of like 10) slots
[10:32:28] <kakuhen> i guess i can make the header and container both share a superclass that gives access to these slots
[10:32:39] <moon-child> but then you would be duplicating the state
[10:32:44] <kakuhen> true
[10:32:59] <moon-child> and keeping state in sync is hard
[10:33:12] <kakuhen> yeah i guess the simplest method here is to continue doing (bar-accessor (header obj))
[10:33:27] <kakuhen> and if i invoke (header obj) too much then bind it to header and use that repeatedly
[10:35:01] <kakuhen> unrelated story, but I heard there was an ELS talk about getting performance close to C in CL
[10:35:20] <kakuhen> when the recording of the talk is uploaded, feel free to ping me with it
[10:36:29] <moon-child> ;;;;;;;;'pp;['
[10:36:34] <moon-child> gah
[10:48:57] <gilberth> hayley: Hurray, variable pitch indent some twenty years later than I once hacked that for epoch. Otherwise: That font looks quite baroque.
[10:50:41] <gilberth> Speaking of which. Is there a trick to make Emacs recognize certain strings and display them with different glyphs? Like e.g. mapping "->" to "→"? Using a different font for a wider arrow even? Adjusting the width so that it matches "->"?
[10:51:53] <qhong> kakuhen: I'm exploring the idea of environment = object. It sounds to me that under this framework, what you need is just exported definition vs internal definition of an environment
[10:52:21] *** Joins: gko (~user@user/gko)
[10:52:26] <qhong> your object = environment X, your header object = an environment Y imported/chained by environment X
[10:52:28] <aeth> kakuhen: you can make CL almost as fast as C, with a huge caveat of SIMD, which is where most of the benchmarks are done and won these days for languages
[10:52:53] <moon-child> sb-simd?
[10:53:13] <qhong> I'm not quite sure about the design of exported vs internal definitions of an environment, though. Should this separation exist, instead of just making everything exported/public?
[10:53:24] <moon-child> gilberth: 'mapping "->" to "→"' I hate when environments do that.  But look up 'ligatures'
[10:53:45] <aeth> moon-child: it's not really complete support afaik
[10:53:52] <moon-child> aeth: it's not?
[10:54:14] <gilberth> moon-child: Well, I don't like it when they do it without my consent.
[10:54:16] <qhong> I think instruction set is there, but no good auto-vectorizer
[10:54:40] <moon-child> auto vectorization sure, but auto vectorization isn't where 'benchmarks are done and won'
[10:54:44] <moon-child> auto vectorization is gravy
[10:54:53] <hayley> gilberth: https://www.emacswiki.org/emacs/PrettySymbol
[10:55:47] <gilberth> Hmm, aren't there TTF libraries for CL? Can I use these to craft a special font, which has "->" as a real ligature. And match the width, so that indention is not disturbed?
[10:56:08] <hayley> I suspect I can make the indenter incremental enough by making it only work on the enclosing top level form, or more precisely, the between closest lines with no indentation before and after.
[10:56:16] <hayley> idk, I did ye olde (ql:system-apropos "TTF") and got nothing before.
[10:56:23] <gilberth> hayley: Hey, it names my example! That was quick. :-)
[10:56:26] <moon-child> I think I saw some 'cl-ttf'
[10:57:10] <hayley> gilberth: Also, legend has it that font was too regular for comfortable consumption, since most of the curves look the same (e.g. in a, c, d the c shape is identical).
[10:57:16] <gilberth> Wasn't there something starting with "z". Or do I confuse things?
[10:57:39] <hayley> Ah, zpb-ttf
[10:59:13] <hayley> Hm, this font has a few bugs (for use in a Lisp environment). Single quote is tiny. And I realise vertical bar was also messed up by a broken path tracer.
[10:59:32] <kakuhen> <aeth> "kakuhen: you can make CL..." <- i see, i've seen projects like napa-fft which look amazing, but i also dont understand a single line of code in them
[10:59:49] <hayley> I write code that writes SIMD code.
[11:00:02] <kakuhen> nicee
[11:00:24] <kakuhen> in the far future i'll need to write a dct that is not textbook definition (hence naive and very slow)
[11:00:33] <kakuhen> but i dont know shit about computers, so writing simd code is out of the question for me.
[11:00:58] <hayley> https://github.com/telekons/one-more-re-nightmare/blob/master/Code/SIMD/code-generation.lisp
[11:01:25] <kakuhen> (assert (not (null prefix)) () "Why /even bother/ with a zero-length prefix?")
[11:01:31] <kakuhen> based error message
[11:02:07] <kakuhen> in my flac decoder, i do not support resampling from esoteric rates like 696969 Hz
[11:02:14] <kakuhen> my error message for that is "stop being stupid"
[11:02:26] <hayley> My favourite is "Made too many states - either your regular expression is too complicated, or one-more-re-nightmare is broken. (Either way, you're not going to get this compiled any time soon.)"
[11:02:42] <hayley> I might remove it if someone shows me that they are patient enough to wait for SBCL to compile a DFA with a thousand states.
[11:03:23] <kakuhen> oh speaking of length zero things
[11:03:26] <aeth> moon-child: now, it might have changed in the years since I checked, but I don't think you can really do SIMD without asm on SBCL
[11:03:32] <kakuhen> i should probably check for zero-length frames in my decoder lol
[11:03:42] <kakuhen> i think for now it just skips over the frame
[11:04:00] <moon-child> aeth: it has changed.  E.G. https://github.com/marcoheisig/sb-simd/blob/master/examples/sum.lisp
[11:04:05] <kakuhen> but if not i guess i can make a funny remark like "this is more likely to generate a CVE in quicktime, not here"
[11:04:18] <hayley> lol
[11:05:12] <hayley> Pedantically, heisig wrote both the example and SB-SIMD. But indeed someone else can use SB-SIMD without writing assembler themselves.
[11:06:27] <hayley> Reminds me that I still need to implement feedback for deciding to SIMD through loops or not. The idea does not spark joy for me, but it's probably the best move, since * in a RE does not tell you how many iterations you expect to take.
[11:06:56] <hayley> Getting it right is worth some 30% of performance. It's already good, but 30% more is better.
[11:07:40] <hayley> Geoff Langdale is on my ass: https://twitter.com/geofflangdale/status/1506155415113203712
[11:08:54] <moon-child> 'Eventually you wind up taking conditional branches - the final indignity'
[11:09:01] <moon-child> branches and--worse--stinking loops!
[11:09:49] <kakuhen> i love branching
[11:10:08] <qhong> Question: How do environment/module based (rather than package based) system deal with symbol name clashing?
[11:10:13] * hayley wonders if she should end one tweet with "That conditionally branches, but...." before continuing in another
[11:10:36] <qhong> Without a package system, symbol name is global. If symbol is then used for any serious matter (like, naming a slot), then it can clash
[11:10:56] <aeth> moon-child: I'm not sure what the data representation is there
[11:11:19] <aeth> what you'd probably want for benchmark-winning SIMD is static-vectors (manual alloc/free) with arbitrary offsets (memory dense if you have more than one simd array)
[11:11:59] <moon-child> who cares about manual vs automatic alloc/free?
[11:12:49] <hayley> I did it: https://twitter.com/nodefunallowed/status/1506158856191496194
[11:14:15] <aeth> moon-child: micro-optimized numeric code cares
[11:14:29] <moon-child> why?
[11:14:30] <aeth> I mean, technically you can just memleak at the end and have the OS GC for you
[11:14:36] <moon-child> the numeric code doesn't care how its buffer is allocated
[11:16:18] <hayley> Well, as well as the Schmitt trigger, I could also maintain a maximum number of changes to allow. If the flag doesn't settle down after 1000 flips, then we are screwed, and OMRN should silently weep and stick to one.
[11:18:53] <aeth> moon-child: cache-wise, it needs to be dense, though
[11:19:08] <moon-child> sure
[11:19:15] <moon-child> so?
[11:19:18] <aeth> doesn't really matter if it's GCed or not, yes, because you can just recycle it manually by just replacing array elements
[11:19:27] * hayley gets a notification
[11:19:40] <hayley> What I expected: Geoff Langdale making fun of me for branching
[11:19:43] <aeth> but it does matter that it's allocated at once... old SBCL used to just have SIMDs as 4-length things, idk if it's still the same
[11:19:46] <hayley> What I got: Someone thinks Cream looks like Papyrus
[11:20:03] <aeth> moon-child: i.e. [ x y z w | x y z w | x y z w | x y z w | ... ]
[11:20:07] <hayley> aeth: You can load SIMD vectors out of arrays.
[11:20:18] <moon-child> ^
[11:20:31] <hayley> And you probably want to do that. Sure, SBCL can give you boxed SIMD packs, just like it can give you boxed double floats. Do you want those? Probably not.
[11:20:38] <kakuhen> so im reading the MOP book finally and uh
[11:20:52] <kakuhen> i realized how closette is slowly but surely being defined in terms of itself
[11:20:52] <moon-child> yeah, the vectors aren't accessed indirectly, if that's the issue
[11:21:04] <kakuhen> so i decided to search "bootstrapping CLOS" and i landed at a hacker news discussion about closos...
[11:21:08] <kakuhen> and i found this gem
[11:21:13] <kakuhen> >The Common Lisp standard is brilliant. If your new Lisp is designed by anything less than a committee with people like Kent Pitman, Guy Steele, and Richard P. Gabriel, chances are that you will end up with something worse.
[11:21:37] <kakuhen> i dont think i will ever understand how the hell anyone can manage to bootstrap CLOS into existence
[11:23:46] <hayley> heisig at it again. But AMOP tells you how to bootstrap CLOS.
[11:24:42] <kakuhen> i guess i must read to the end then
[11:25:51] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[11:26:11] <hayley> Yep!
[11:26:17] <dave0> maw hayley 
[11:26:24] <hayley> maw dave0
[11:29:49] * hayley begins commiting sacrilege, and modifies ' to be larger.
[11:30:57] <kakuhen> just out of curiosity
[11:30:57] <kakuhen> hayley: how much of closette can i expect to be similar in implementation to a real CLOS implementation
[11:31:12] <kakuhen> i suppose i can answer that myself by just opening up l1-clos.lisp in ccl but uh i decided to ask anyway
[11:31:35] <kakuhen> i notice little discussion is being provided to the canonicalize-... stuff, so i assume that is where the bulk of differences end up in
[11:32:28] <hayley> Hm. I think ABCL uses a modified Closette, but Portable Common Loops is more common (and more commonly brutally optimised).
[11:32:35] <kakuhen> i see
[11:32:40] <kakuhen> i got confused at first at how :accessor was macroexpanded to add both a reader and writer for a given slot, but then i realized canonicalize-defclass-options seems to take care of that 
[11:32:57] <hayley> Obligatory SICL comment: it's all new in SICL.
[11:33:04] <hayley> :)
[11:33:05] <kakuhen> based 
[11:33:42] <kakuhen> that reminds me, i eventually want to get my pure cl decoders running in mezzano
[11:34:02] <kakuhen> if i can somehow pull that off, then closos will have some nice ffi-free code for audio stuff
[11:34:42] <kakuhen> but the biggest issue i see right now is first learning how the audio server (if any) works in mezzano; i think last time i checked, it did provide something that looks a lot like ac97
[11:35:26] <kakuhen> oh hda, oops
[11:36:27] <kakuhen> https://github.com/froggey/Mezzano/blob/master/drivers/intel-hda.lisp#L854-L855
[11:36:33] <kakuhen> the magical solution to all race conditions
[11:37:59] * hayley uploaded an image: (1KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/LgZIxzLzFRAdNobIwZvSzXTy/Screenshot_2022-03-22_18-07-52.png >
[11:38:07] <hayley> My two changes to Cream to make it usable for Lisp, I guess.
[11:38:20] <hayley> SLEEP, the Ultimate Synchronisation Primitive
[11:40:30] <kakuhen> duct tape of race conditions
[11:41:27] <kakuhen> oh wow, closette is used by mezzano
[11:42:10] <hayley> Oh, the other thing, I like having ~ be in the middle. In fact, I designed the message pattern matcher in decentralise2 to allow ~ so that you could have "kebab-case" wildcards. Since _ is evil.
[11:42:36] <qhong> moon-child: unironically, I think (defmethod funcall) is a good idea. Or maybe (define apply (let ((old-apply apply)) ...))
[11:43:02] <qhong> moon-child:  And this can work nicely with FWRAPPER. I think this used to be called *APPLYHOOK*
[11:44:19] <qhong> Best way to find good idea: If people 60 years ago were doing it and people now aren't doing it, it's a good idea
[11:44:20] <moon-child> you can do the 'define apply' thing in s7.  Can even do (define define ...)
[11:44:29] <moon-child> qhong: :D yes
[11:45:22] <qhong> moon-child: plain redefinition has its own problem, e.g. how to revert to previous state, how to resolve interaction between multiple redefiners. But I think FWRAPPER solves them
[11:45:50] * hayley uploaded an image: (2KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/XQwvBCQMTKxvfvAHFZvumeyB/Screenshot_2022-03-22_18-15-37.png >
[11:45:50] <moon-child> what is fwrapper?
[11:46:28] <qhong> moon-child: https://franz.com/support/documentation/10.1/doc/fwrappers-and-advice.htm
[11:46:57] <qhong> Basically a minimal :around advice facility, that you can build other things on
[11:47:19] <moon-child> I was going to say that it sounds like :around methods :P
[11:48:22] <qhong> moon-child: still a bit different from CLOS :around method — it is named. But you can have your whole CLOS multi method as a library that provides an FWRAPPER, I guess
[11:50:04] <qhong> 1. (fwrap apply clos) 2. enjoy funcallable-instance
[11:50:41] <qhong> 3. turns out funcallable-instance sucks 4. (funwrap apply clos)
[11:52:20] <moon-child> Q. why do we need funcallable standard instances anyway, when we have closures?
[11:52:42] <kakuhen> they're useful
[11:52:55] <kakuhen> in a now dead 2d game i was working on with a friend, i was tasked with implementing something pretty tricky
[11:52:58] <qhong> moon-child: on systems that sucks, closures are opaque
[11:53:05] <hayley> You can't diddle inside a closure, but you can diddle a funcallable standard instance.
[11:53:14] <kakuhen> in short, i had to be able to alter the slots of a character class, subject to variable conditions, and then appropriate restore "prior" slot values
[11:53:20] <kakuhen> a funcallable-standard-class helped a lot here
[11:53:20] <moon-child> hayley: you can diddle, but only indirectly
[11:53:32] <kakuhen> funcallable-standard-object*
[11:53:33] <moon-child> (let* ((x 5) (f (lambda () x))) (incf x) (funcall f))
[11:53:58] <qhong> moon-child: so you can't add new information or inspect or modify a closure. And you have to make the bit that you want to inspect or modify some explict slots of the funcallable instance
[11:54:25] <qhong> or using let over lambda, ofc
[11:54:45] <qhong> ah, and another bit, UPDATE-INSTANCE-FOR-REDEFINED-CLASS
[11:55:22] <qhong> but honestly I agree funcallable-instance is not the ideal way to do it. I'd like fully inspectable closure and BECOME instead
[11:55:37] <kakuhen> basically, effects on a character resulted in the character-class being dynamically mixed-in with "effects," which were funcallable-standard-objects, and computing the slot of a character would then compose through all of these objects and plug in the initial slot of each character
[11:56:15] <kakuhen> my friend then created a really simple but pretty powerful messaging system, that'd let us add and remove effects depending on conditions in the game
[11:56:44] <kakuhen> e.g. some effects should only be valid during fights on odd numbered rounds
[11:56:50] <kakuhen> but in any case persist for n turns
[11:57:24] <kakuhen> the messaging system is what let us do that, and then using funcallable objects let me find a way to avoid having to cache any prior slot values and make effects nothing but function composition
[11:58:43] <kakuhen> the only ugly part about my approach is that accessors now lie to the programmer
[11:58:58] <kakuhen> you had to invoke an "effective-slot-value" method on characters to obtain accurate readings of their statistics
[11:59:22] <kakuhen> but i think this can be remedied by just creating a mixin and somehow make CLOS dispatch on that 
[12:00:37] * kakuhen uploaded an image: (159KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/MvaPFgbejuXPPGqgAHGyxqWL/image.png >
[12:00:45] <kakuhen> hayley: your favorite number conveniently starts the ugliness in my effects implementation
[12:00:59] <hayley> 🎉
[12:02:34] <hayley> Hm, if I zoom in Emacs, the spacing between characters doesn't get larger. But it looks kinda neat.
[12:02:40] * hayley uploaded an image: (3KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/lQigCbKUTKOvNuXeYoicTivx/Screenshot_2022-03-22_18-32-17.png >
[12:05:05] * kakuhen uploaded an image: (401KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/gtdSkHVkvQhDJpWOxYnxXxlx/image.png >
[12:05:13] <kakuhen> ok i guess my 9-month-old code is not the best
[12:05:26] <kakuhen> i forgot i did a gross thing to let me plug in a character instead of invoking accessors on a character each time lol
[12:05:36] <kakuhen> that way i can compose functions and pass in a character, and you magically get a number at the end
[12:05:53] <kakuhen> iirc my rationale 9 months ago was "we can't trust the programer to use the right accessor each time"
[12:05:57] <moon-child> o god o fuck
[12:06:00] <moon-child> that frobnication is unironic
[12:07:58] <kakuhen> i promise my flac decoder has somewhat saner design
[12:08:52] * kakuhen uploaded an image: (237KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/YaQFumhHNwhUQdGIibfBMmYR/image.png >
[12:08:56] <kakuhen> now you know why i was asking about "headers" and stuff earlier...
[12:09:27] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[12:10:50] <SAL9000> do those rainbow () actually help you? I tried them a while back and ended up relying on indentation + highlight-near-point anyway...
[12:11:06] <selwyn> i like them because they look pretty
[12:11:14] <hayley> Usually only when the indentation is FUBARed.
[12:11:26] <selwyn> they do help with spotting unbalanced parens
[12:11:36] <hayley> I just turn them on occasionally. It also lets me make "gay Emacs" jokes.
[12:11:39] <SAL9000> heh
[12:11:49] <SAL9000> unbalanced parens is an interesting use-case
[12:11:52] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:11:57] <kakuhen> hayley: you will love my emacs theme then
[12:12:00] <moon-child> I think it helps, but it's not a gamechanger or anything
[12:12:00] <selwyn> well, they can happen, right
[12:12:00] <kakuhen> it actually produces a full rainbow
[12:12:05] <hayley> :O
[12:12:09] <SAL9000> I think I saw somewhere a mode on one of the other paren-highlighters which would specifically mark unbalanced ones only
[12:12:14] * kakuhen uploaded an image: (8KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/AsvNuxISpSYczqVvWhoMmZQh/image.png >
[12:12:20] <hayley> beautiful
[12:12:23] <moon-child> imo the main use for syntax highlighting is to make text easier to scan.  It would be similarly effective if it coloured randomly
[12:13:22] <SAL9000> you have a point, but on the other hand, having e.g. "the comments are always gray" helps scanning too, no?
[12:13:25] <kakuhen> SAL9000: they help my eyes quickly determine the scope of parens
[12:13:31] <kakuhen> but i agree they do not add much benefit, besides appearence
[12:13:40] <kakuhen> i use rainbow-parens nowadays because i am too lazy to edit my init.el
[12:13:48] <SAL9000> :-)
[12:13:56] <qhong> your code is hard to scan because it is written in aLphAbeTiC wRitING sYsTEM
[12:14:05] <SAL9000> tl;dr I land more in the camp of "if you need help to determine paren scope, you should break the lines up more"
[12:14:19] <selwyn> well
[12:14:21] <moon-child> qhong: your _prose_ is hard to scan for the same reason
[12:14:50] <selwyn> i agree that i look at the colours usually only after something has gone wrong
[12:14:53] <selwyn> but things do go wrong
[12:15:07] <selwyn> so this is a legitimate use case
[12:15:09] <ck_> https://www.dangermouse.net/esoteric/piet/helloworld-mondrian-big.png
[12:15:16] <ck_> "I only look at the pictures"
[12:15:18] <moon-child> imo highlighting the brace matching the one under the cursor is much more significant than rainbow braces
[12:15:32] <selwyn> and it helps diagnose how the code is wrong
[12:16:03] <selwyn> moon-child: i would say so as well
[12:17:45] <qhong> Which is basically highlighting the S-expr under focus, aka approximating a real editor using a character array editor
[12:18:06] <kakuhen> i break up lines when i cross 100 characters in a single line, but otherwise i keep to single line 
[12:18:30] <moon-child> qhong: indeed
[12:18:40] <moon-child> all this syntax stuff drives me nuts sometimes
[12:19:28] *** Joins: shka (~herr@109.231.3.55)
[12:19:31] <kakuhen> i have show-parens enabled too
[12:19:40] <kakuhen> and also smartparens-strict-mode enabled
[12:20:16] <kakuhen> it helps me from writing unbalanced expressions really well, but it's dangerous when i begin to write lisp on a blackboard...
[12:20:38] <kakuhen> because i am too used to smartparens-strict-mode writing for me, so to speak.
[12:22:32] <qhong> draw boxes on the blackboard instead
[12:24:00] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Read error: Connection reset by peer)
[12:25:17] * hayley uploaded an image: (0KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/nbNKOvnaWLrDNRBJJZWBpfVv/Screenshot_2022-03-22_18-55-06.png >
[12:25:19] <hayley> kakuhen: here u go
[12:26:09] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[12:27:19] <kakuhen> nice rainbow-parens 
[12:27:38] <kakuhen> i feel like you can post this on some programming humor subreddit and it may be upvoted
[12:28:06] <hayley> Well, I can't do r/programmerhumor. Maybe r/lispmemes
[12:28:17] <selwyn> are you banned
[12:28:36] <qhong> imagine
[12:28:38] <kakuhen> more like it'll quickly devolve into "emacs vs vim" war if she mentions an emacs plugin in the title
[12:28:58] <kakuhen> or perhaps banned, who knows
[12:29:14] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[12:29:14] <hayley> selwyn: No, I just don't like r/programmerhumor.
[12:29:59] <hayley> https://www.reddit.com/r/LispMemes/comments/tjxvek/unforseen_uses_of_rainbowdelimitersmode/
[12:30:07] <Duuqnd> r/programmerhumor is just the same shitty set of jokes over and over
[12:30:16] <SAL9000> kakuhen: add a mention of evil-mode and then everything will be balanced again (parens and otherwise)
[12:30:18] <selwyn> classic reddit
[12:30:31] <hayley> r/proggithumor would just see parens and then people would go full on mouth-frothing.
[12:31:14] <kakuhen> assert(is_something(nested(stuff))); this is fine
[12:31:24] <kakuhen> (assert (something? (nested stuff))) OMG TOO MANY PARENS
[12:32:08] <hayley> APL 🤝 Smalltalk 🤝 Forth 🤝 Lisp
[12:32:18] <hayley> fuck mathematical notation imo
[12:33:04] *** Quits: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[12:40:50] <moon-child> maths notation is fine
[12:41:20] <moon-child> I mean, sure, it has problems.  But I think it is good at what it does
[12:45:03] <semz> It's worth keeping in mind that the point of math notation is to communicate something to a human reader, not a computer.
[12:45:06] <semz> Although sometimes it fails to do even that.
[12:45:11] * semz glares at the paper he's reading
[12:46:11] <moon-child> lol
[12:46:50] <moon-child> one of the motivations for apl was to be sufficiently unambiguous as to be expressible unambiguously to a computer
[12:48:15] <moon-child> I'm not sure the extent to which it succeeded.  It's a reasonably successful programming language, but nobody uses it for math.  Proof in apl relies on meta-notation: x ←→ y asserts that x and y are the same.  IMO it is possible to do better: !y asserts that y is true; on a computer implementation, that's just a normal function that throws if y is not true
[12:48:34] <selwyn> i learnt recently about an apl dialect that gets used all the time in finance
[12:48:43] <moon-child> all the apl dialects get used all the time in finance
[12:48:48] <selwyn> oh
[12:48:57] <hayley> SQL? It even has outer maps.
[12:48:58] * hayley ducks
[12:49:19] <moon-child> historical niches.  Forth: embedded; lisp: ai; apl: finance; ml: academia; cobol: business
[12:52:27] <dave0> c++?
[12:53:02] <moon-child> c++ was later
[12:53:10] <selwyn> https://en.wikipedia.org/wiki/Q_(programming_language_from_Kx_Systems)
[12:53:41] <moon-child> k programmers get paid hella money
[12:53:46] <selwyn> i've been asked to explain 'why is it so weird'
[12:53:53] <moon-child> also k itself is like super expensive
[12:53:56] <moon-child> order of $200k I think
[12:54:13] <selwyn> so this q language is a sequel to k
[12:54:22] <selwyn> the developer keeps on reinventing his language
[12:54:37] <moon-child> q is like an addon library for k
[12:54:44] <selwyn> oh
[12:54:46] <selwyn> do you use it?
[12:55:07] <moon-child> no
[12:55:40] <moon-child> I may start working on a competing product soon, though
[12:58:20] <selwyn> cool
[13:02:25] <SAL9000> $200k for a programming language? O_O
[13:04:06] <selwyn> such is finance
[13:05:07] <moon-child> that may be an underestimate
[13:05:20] <moon-child> also have bs licensing clauses like charging per core and you're not allowed to distribute benchmarks
[13:09:35] <SAL9000> blah
[13:10:13] <selwyn> how and why can't you distribute benchmarks
[13:13:12] <SAL9000> I'm guessing that distributing benchmarks would be a step towards being compared with competing implementations or competing languages, both of which would loosen the monopoly's grip
[13:13:14] <SAL9000> can't have that
[13:13:17] <hayley> DeWitt clauses.
[13:13:50] <hayley> It's protection against a shitty benchmark basically slandering the company in theory. In practise, what SAL9000 said.
[13:14:13] <hayley> But there's a meta-comparison where you can assume anyone who explicitly doesn't have such a clause is more confident that they have a better product.
[13:16:17] <hayley> moon-child: phoe said pixels are squares in #els2022
[13:24:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:26:21] <moon-child> hayley: can you make me an alvy ray smith 'fucking cringe bro' meme, I'm lazy
[13:26:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:27:58] <kakuhen> <moon-child> "historical niches.  Forth..." <- that reminded me for the mahjong utility i was writing
[13:28:09] <kakuhen> one of my friends was about to write an AI for playing mahjong
[13:28:15] <kakuhen> literally doing classical AI but in lisp
[13:28:28] <hayley> moon-child: Only "fucking cringe bro"?
[13:28:40] <moon-child> idk the 'you have posted [...]' thing
[13:28:43] <kakuhen> thankfully we did not get to that point... I know nothing about AI and basic stuff in mahjong are already tedious to turn into algorithms
[13:28:44] <moon-child> I'm not a meme expert
[13:29:09] <moon-child> kakuhen: I think prolog is in vogue for that sort of thing these days.  But White_Flame knows more than I do
[13:30:02] * hayley uploaded an image: (217KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/IjVaQMtEbwlcwjNOPLXispoD/alvy-ray-smith.jpg >
[13:32:03] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:32:34] <moon-child> :D
[13:34:10] <qhong> is s-expr made of vectors acceptable?
[13:34:35] <qhong> I'm looking at the type definition of my core interpreter, there's cons and vec. That's too bloat, have to yeet one
[13:35:48] <moon-child> cons is just a two-element vec
[13:35:50] <moon-child> ez
[13:36:43] <qhong> makes sense. my naive vec implementation use an extra word for length though
[13:37:05] <qhong> so maybe special case short vec...
[13:40:59] <qhong> moon-child: but seriously, what's the reason against using vec instead of cons as the "basic" data structure?
[13:41:16] <qhong> the only reason I can see is shared-tail, but I don't think it's strictly necessary
[13:44:51] <pjb> qhong: a vector is a s-expr that evaluates to itself.
[13:44:55] <pjb> #(foo) --> #(foo)
[13:45:15] *** Joins: mgl (~mgl@2a00:79e0:4a:203:b0ad:72bc:14d2:c731)
[13:46:02] <qhong> pjb: I can make my interpreter view it as application instead, #(+ 1 2) => 3 (and ofc I will change the reader so that it is written as (+ 1 2) => 3, then yeet CONS completely)
[13:46:10] <pjb> qhong: actually: s-expr := atom | list of s-expr .
[13:46:21] <pjb> qhong: it's not a good idea.
[13:46:32] <qhong> pjb: why?
[13:47:00] <pjb> qhong: almost all s-expressions are already valid forms in lisp… Making more be valid, let the compiler detect fewer programmer errors.
[13:47:25] <|3b|> does #(aref #(aref #(1) 0) 0) evaluate to 1 or AREF or a vector?
[13:47:29] <qhong> pjb: I'm considering not having CONS at all, and use vector in place of lisps
[13:47:43] <qhong> pjb: it will be written (aref (aref '(1) 0) 0)
[13:47:47] <pjb> you would have to write:  #(aref #(aref '#(1) 0) 0)
[13:48:07] <qhong> it's an error btw
[13:48:11] <|3b|> you need to distinguish function application from vector literals, or else you can't have vector literals
[13:48:26] <|3b|> and if you can't have vector literals, then do whatever you want :)
[13:48:27] <qhong> |3b|: I will have quote
[13:48:37] <pjb> qhong: it's possible. See for example ACL2, which doesn't have vectors, only lists (but actually it has vectors in the implementation of lists).
[13:48:43] <qhong> |3b|: it's the same as what we do with CONS in a CONS centric evaluator
[13:49:11] <qhong> I do see some problems. CDR and CONS is handy for constructing forms
[13:49:12] *** Joins: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr)
[13:49:33] <pjb> qhong: ACL2 is a theorem prover, so it knows the equivalence between a list and a vector.
[13:49:38] <|3b|> yeah, building macros was next place where it might matter
[13:49:59] <qhong> |3b|: I think both CONS and VEC can be used to make an quasiquote
[13:50:00] <pjb> qhong: (cdr foo) == (subseq foo 1) but without copying…
[13:50:01] <|3b|> though if you have some other powerful primitives aside from list manipulation it might be OK
[13:50:52] <|3b|> yeah, explicit quote might be enough for my first question
[13:51:04] <qhong> pjb: I see, basically VEC can have eqv to CONS and CDR, but with lots of copying
[13:51:05] <pjb> qhong: (defmethod .cdr ((v vector)) (make-array (1- (length v)) :displaced-to v :displaced-index-offset 1))
[13:51:28] <pjb> only we should have (eq (.cdr v) (.cdr v)) …
[13:51:39] <pjb> So you'd have to intern the displaced arrays…
[13:51:59] <qhong> how essential is (eq (.cdr v) (.cdr v))?
[13:52:45] <pjb> It's a fundamental semantic aspect of lisp. The question is how many program depend on this part of the semantics.  
[13:52:50] <pjb> Perhaps a lot, perhaps not.
[13:53:19] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[13:53:20] <qhong> pjb: yes my question is "how many", or I'm happy to change it to a subjective version, "how much you want"
[13:54:20] <pjb> qhong: basically, you could scan the sources in the ql libraries, for occurences of (cdr foo) … (cdr foo) instead of (let ((c (cdr foo))) c … c)
[13:54:44] <moon-child> #(aref #(aref #(quote #(1)) 0) 0)
[13:54:53] <pjb> In programs where you have (cdr foo) … (cdr foo), it is probable it expects (eq (cdr foo) (cdr foo)).
[13:55:10] <qhong> pjb: and if it contains mutation...
[13:55:17] <pjb> exactly.
[13:55:43] <qhong> There's another direction btw. what about yeeting VEC and have controllable CDR coding
[13:56:13] <qhong> so (CONS CAR CDR &optional RESERVED-SPACE), and you know the next RESERVED-SPACE counts of CONSes will result in continuous list
[13:56:20] <qhong> and make NTH O(1) on continuous list
[13:56:53] <pjb> qhong: have a look at ACL2.  
[13:56:54] <|3b|> what are you optimizing for?
[13:57:13] <qhong> |3b|: smaller core language
[13:57:20] <|3b|> speed, space, implementation developer time, familiarity to users of some particular dialect of lisp?
[13:58:23] <qhong> I'm from physics background and I like to unify things
[13:58:23] <|3b|> do you mean "core language" in the somewhat silly sense of "just N special operators", or are you including the parts of the library that can't be sanely written without the library?
[13:58:51] <qhong> |3b|: I am
[14:03:01] <hayley> https://twitter.com/geofflangdale/status/1506196341416132612
[14:06:41] * |3b| thinks it is reasonable to unify them, and cons is a 2 element vector, but like in physics we ignore relativity for things happening at walking speed, so keep cons ops like we keep newtonian physics :)
[14:07:38] <|3b|> instead of trying to build some data structure that lets you map any set of subsequences of vectors into a single vector, which is what you get from "unifying" shared cons structure with arrays
[14:07:59] <|3b|> (or instead of wasting performance on doing lisp list-processing on chains of 2-element vectors)
[14:11:19] <qhong> |3b|: I see that's a solution. Most Lisp already waste performance on 2-element vectors, so no need to worried that. I just need one single VEC type that has special representation for small-sized VEC (so that it doesn't waste an extra word for length)
[14:12:33] <qhong> The other solution, figuring out a good CDR coding, is also very attractive to me, which seem able to turn slow CONS based Lisp code fast for free
[14:17:53] <|3b|> but to some extent, if you are making a toy lisp, do whatever sounds interesting/logical/easy :) if the reasons other people had for not doing that still apply when combined with whatever other changes you made, then you will eventually figure that out and can fix it
[14:18:05] <kakuhen> i love prog1 so much
[14:18:18] <kakuhen> my friend makes fun of me for unironically using prog1 and prog2 but they are handy macros
[14:19:18] <|3b|> why wouldn't you use prog1?
[14:19:29] <moon-child> prog1 rox
[14:19:35] <kakuhen> apparently there used to be a typo in the hyperspec involving prog1 and prog2 and it became a joke amongst people
[14:19:57] * |3b| doesn't use prog2 much, but if it fits, that's what it is there for
[14:20:39] <qhong> PROG is also good. The standard should remove LET
[14:23:47] <|3b|> yeah, prog2 in hyperspec is still specified to behave like prog1 except for requiring at least 2 forms in body. implementations don't implement that though :)
[14:26:23] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 268 seconds)
[14:26:28] *** Joins: kevingal (~quassel@92.51.199.18)
[14:30:41] <qhong> I heard that some Lisp Machine support O(1) NTH on CDR coded lists. Anyone know how it is done?
[14:31:33] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[14:32:21] <shka> no idea
[14:32:25] <qhong> specifically, how it knows the distance to the end of the continuous list? I guess they can store it in the pointer because address space is small and word is long, but good to know if there's cleverer way
[14:32:49] <pjb> when you support cdr-coded lists, a cons cell may always contain several cdr. So you must test for the number of cdr slots, and index them.
[14:33:13] <shka> perhaps some kind of tag to know if a cons cell is shared between lists?
[14:33:40] <qhong> but finding out the number of remaining cdr slots is an O(N) linear scan?
[14:34:09] <pjb> cons cells become variable length objects. The length is stored somewhere, and the number of cdr slots can be computed from this length.
[14:34:31] <pjb> So O(1).
[14:35:01] <qhong> pjb: what if I CDRed that CONS? The pointer now points to the middle of the object, and there's neither way to find out the end nor the start of the object
[14:35:12] <shka> well, you could in theory have pointer in the CDR slot that points not into the next cell directly, but instead to some memory block holding cons cells of the sole list owning 
[14:35:19] <pjb> qhong: no, in that case the cons was split.
[14:36:11] <pjb> qhong: erase that.
[14:36:38] <shka> so if you, let's say call MAKE-LIST 1024 you are in fact getting wasteful array
[14:36:47] <pjb> qhong: I mean if you have a pointer inside the cons vector, then you have to offset it from the start of the cons object.
[14:36:48] <shka> that pretends to be a list
[14:37:14] <qhong> shka: doesn't look wasteful to me. saves half of the space actually
[14:37:43] <qhong> pjb: so you mean the pointer stores a base+offset instead of pointing to the cell directly? Then there will be a limit on the size of the cons cell
[14:37:55] <qhong> (or variable-length cons object, whatever you call it)
[14:39:12] <pjb> qhong: I'm not sure. It would be worth it to refer to the original documentation or source code.
[14:39:45] <pjb> http://www.faqs.org/faqs/lisp-faq/part2/section-9.html
[14:44:41] <pjb> qhong: so yes, it seems that in the original implementations, they didn't use an object-size, and instead used the tags in the sequence of car slots. (this is useful when you point inside the object to the nth car).  So nth and nth-cdr would still have to be iterative.
[14:45:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:46:02] <pjb> qhong: now, if you have a memory model where you store the size of the objects, and if you can easily find the object base address (and its size) from a pointer in the middle of it (perhaps the pointer is a base + offset compound), then you can more easily treat cdr-coded cells as vectors.
[14:47:03] <pjb> qhong: note that the original system (with tags) let you cut short a cdr-coded list: (setf (cdr (butlast list n)) nil) would just change a tag in the middle to CDR-NIL
[14:47:16] *** Joins: notzmv (~zmv@user/notzmv)
[14:47:51] <pjb> qhong: notice also how they remark that it didn't save much time or space anyways.
[14:50:03] <pjb> qhong: you can try to see how often you use LIST LIST* MAKE-LIST (or MAKE-SEQUENCE 'list) COPY-LIST or COPY-SEQ instead of building the list incrementally.
[14:56:27] <qhong> pjb: I see, it looks like a hard problem to both O(1) NTH and O(1) RPLACD
[14:57:28] <qhong> pjb: there is a way to do effective CDR coding even if one is building the list incrementally. Basically, reserve extra unused space when CONSing a new list, and subsequent CONSes on the list use the reserved space
[14:59:27] <shka> qhong: or just use arrays 
[15:00:06] <shka> a lot of lisp internals are list heavy, but that is not that huge portion of modern lisp application anymore
[15:00:06] <qhong> shka: having both vector and linked-list is too much bloat for my taste :(
[15:00:18] <shka> huh? why?
[15:00:43] <qhong> the interface for a vector seems like a strict subset of linked list
[15:00:59] <hayley> Not in terms of time complexity.
[15:01:00] <selwyn> the interfaces are kind of messed up for historical reasons
[15:01:21] <qhong> shka: now it's unfortunate that the naive implementation linked-list has worse complexity, but I'm trying to see if it can be fixed
[15:03:10] <shka> qhong: the main practical difference between lists and vectors is that lists are suited for immutability 
[15:05:08] <qhong> shka: actually if I only support immutable operation on list, it's quite easy to get the same time complexity as vector
[15:05:20] <qhong> shka: most problems come from RPLACD
[15:05:33] <shka> mmmm no...
[15:05:48] <shka> anyway, that's why you have both 
[15:05:55] <shka> both are useful 
[15:23:20] *** Joins: lisp123 (~lisp123@143.238.164.103)
[15:37:30] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:42:38] <hayley> BANNED from the European Lisp Symposium chat gang
[15:42:59] <shka> cool
[15:43:11] <shka> how you did that?
[15:43:29] <shka> btw, is ELS recorded somewhere?
[15:43:41] <shka> i know that this proved challenging in the past
[15:44:08] <easye> shka: there is a link in #els2022 for yesterday's recording.
[15:44:20] <shka> ow amazing
[15:44:34] <easye> In general, recording has not been a problem:  just the editing into discrete parts.
[15:44:56] <shka> ha, go into stream, beach being on stage
[15:45:04] <shka> that's els, all right
[15:47:37] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[15:50:00] *** Joins: razetime (~quassel@117.254.35.226)
[15:50:44] <kakuhen> there are recording of yesterday's ELS?
[15:50:55] <kakuhen> i guess it's time to find the links for the ulisp talk, and the performance one
[15:54:41] <easye> kakuhen: again, I think there is a link in the #els2022 channel to yesterday's talk.
[15:54:57] <kakuhen> i see
[15:56:28] <shka> god damn russians
[15:56:41] <shka> now they jam GPS over the Baltic sea
[15:56:59] <shka> but can't be bothered to do electronic warfare over the Ukraine
[15:57:11] <shka> just amazing
[16:01:08] <pjb> qhong: have a look at ACL2: it has only lists.
[16:01:20] <pjb> qhong: more precisely, list API; it has vectors internally.
[16:02:26] *** Quits: razetime (~quassel@117.254.35.226) (Remote host closed the connection)
[16:04:03] *** Quits: kevingal (~quassel@92.51.199.18) (Ping timeout: 256 seconds)
[16:07:12] *** Joins: razetime (~quassel@117.254.35.226)
[16:11:29] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[16:13:38] *** Joins: kevingal (~quassel@92.51.199.18)
[16:25:09] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:27:41] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[16:28:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:33:43] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[16:35:36] *** Joins: aeth (~aeth@user/aeth)
[16:39:36] <hayley> https://www.youtube.com/watch?v=Im3JzxlatUs
[16:48:54] * selwyn can't decide what to do today
[16:50:47] <ck_> selwyn: https://www.youtube.com/watch?v=vi1s6kBTkZU
[16:51:01] <selwyn> :)
[16:52:32] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[16:52:49] <qhong> just found a hypothetical way to break my hypothetical language: (setf (cons? '(1)) #f)
[16:55:21] <edgar-rft> I think that's hypothetically bad
[16:57:35] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[17:00:22] <ck_> edgar-rft: I looked at some aluminium cases like you suggested, the give me a bad vibe. maybe a childhood memory or something. what do you think about soft toolbags?
[17:06:04] <edgar-rft> ck_: it mainly depends on *where* you want to work with it, on outoor construction you need un-crushable watertight cases, if you carry your tools around a lot you need heavy durable stuff that's easy to clean when it gets dirty, at home you can use whatever you like best.
[17:07:09] <sham1> qhong: and this is why you don't make booleans into places
[17:09:48] <ck_> edgar-rft: thanks for the insight
[17:11:01] *** Quits: kevingal (~quassel@92.51.199.18) (Ping timeout: 240 seconds)
[17:11:36] <hayley> gilberth: Geoff Langdale (of Hyperscan fame): "Submatches and derivatives put you in pretty fast company. I'm too meat-headed - or burned by too many crazy patterns that don't determinize cleanly at scale (or at all). At least the latter is how I justify my anti-intellectualism."
[17:12:13] <edgar-rft> ck_: at home I already used an old shoe box for my tools :-)
[17:12:43] <ck_> yeah, I just put most of mine into an old first-aid box
[17:12:54] <hayley> He suggested using the number of elements in an isum to guess how many times a loop would go through, but I suspect that implicitly assumes that iteration probabilities are independent, and as classical compiler hackers we generally assume that to be wrong.
[17:13:10] <ck_> was surprised how well that fit, coming from that clunky metal toolbox I mentioned the other day
[17:13:33] <hayley> (I mean, we assume Pr(branch taken | taken before) > Pr(taken | not taken) i.e. iterations are dependent.)
[17:14:17] <edgar-rft> ck_: I have several old first-aid boxes with left-over screws and other small crap :-)
[17:23:35] <qhong> idea: if we make eq? a generic function, then is-a? is simply eq? (except it becomes symmetric, but probably still usable)
[17:24:05] <qhong> Then (define (cons? x) (eq? x <cons>))
[17:24:12] <qhong> looks incredible!
[17:28:04] <semz> But '(foo . bar) is not the type cons, it is just _a_ cons. What does genericism have to do with it?
[17:28:20] <semz> Are types not values in your system?
[17:28:49] <qhong> semz: I have a prototype based object system
[17:29:09] <|3b|> so (eq? <cons> <type>) or something?
[17:29:13] <qhong> '(foo . bar) will delegate to <cons>
[17:29:33] <qhong> |3b|: yes, you get it!
[17:30:09] <|3b|> then (eq? x z), (eq? y z), (not (eq? x y)))?
[17:31:02] <qhong> oops, I see this whole thing doesn’t work now
[17:31:18] <qhong> If everything end up delegating to <object> then they will all eq
[17:34:16] <|3b|> and looking up <object> in a hash or map or whatever always matches everything
[17:39:01] *** Joins: Jaen (~jaen@2001:470:69fc:105::15f4)
[17:42:28] *** Quits: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[17:50:08] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[17:50:15] *** Joins: robin_ (~robin@user/terpri)
[17:50:27] *** Quits: razetime (~quassel@117.254.35.226) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:07:23] *** Joins: OlCe (~user@lfbn-nic-1-262-219.w90-116.abo.wanadoo.fr)
[18:26:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:34:29] *** Joins: kevingal (~quassel@92.51.199.18)
[18:49:44] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:49:49] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[19:00:55] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[19:01:14] *** Joins: robin_ (~robin@user/terpri)
[19:06:33] *** Quits: Brucio-61 (~Brucio-21@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[19:07:42] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[19:08:46] *** Quits: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:09:16] *** Joins: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[19:12:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:48:54] *** Joins: razetime (~quassel@117.254.35.226)
[19:55:25] *** Joins: Brucio-61 (~Brucio-21@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[20:01:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:10:31] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[20:32:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:33:05] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[20:33:28] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:00:59] *** Quits: mgl (~mgl@2a00:79e0:4a:203:b0ad:72bc:14d2:c731) (Ping timeout: 256 seconds)
[21:09:17] *** Quits: kevingal (~quassel@92.51.199.18) (Remote host closed the connection)
[21:10:24] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:17:57] *** Quits: razetime (~quassel@117.254.35.226) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:31:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[21:40:14] <Aurora_v_kosmose> https://lists.archlinux.org/pipermail/arch-dev-public/2016-October/028405.html Would lazy-loading being disabled lead to uncompressed binary CL software now requiring its whole size in memory anyway, rather than just mmapping it?
[21:40:56] <Aurora_v_kosmose> ...Does sbcl even use libc?
[21:41:14] <Aurora_v_kosmose> nvm it does.
[21:42:40] <Aurora_v_kosmose> Anyway, my question pertains to compressed binaries requiring full in-memory loading for decompression & running, whereas uncompressed currently only loads into memory what it actually needs. 
[21:42:42] <Lycurgus> this is a standard thing
[21:42:47] <Lycurgus> with sbcl in particular
[21:42:57] <Lycurgus> where the memory isn't actually allocated
[21:43:24] <Lycurgus> but the charge has been accepted by the OS so there's a report
[21:43:56] <Lycurgus> common with ghc which like reguests like gigs by default
[21:44:13] <Lycurgus> but doesn't actually get till it uses it
[21:44:40] <Lycurgus> (said sbcl but meant ghc)
[21:44:41] <Aurora_v_kosmose> Yeah. I realized partway through asking that I didn't get how it worked well-enough to properly ask my question.
[21:45:07] <Aurora_v_kosmose> I'm not sure if just touching libc is enough, or if it's specifically compiling something with gcc that would do it. 
[21:45:09] <Lycurgus> if that's the case closer examination of actual memory use will show it
[21:46:04] <Lycurgus> s/which like requests/which preallocates/
[21:46:50] <Aurora_v_kosmose> A lot of the protections for those other languages don't really make sense with languages like CL where live modification is an intentional feature & working environment.
[21:47:01] <Aurora_v_kosmose> But the fact sbcl compiles to native makes it all the more confusing.
[21:47:20] <Lycurgus> what's the cl implementation?
[21:47:37] <Aurora_v_kosmose> I mainly work with sbcl.
[21:47:38] <Lycurgus> oh sbcl
[21:48:08] <Lycurgus> yeah i don't expect it would do more than it was compiled for, did you set a custom heap size
[21:48:50] <Lycurgus> the thing I was talking about is actually kinda antithetical to lisp implementations but not full on fp things like haskell
[21:48:57] <Aurora_v_kosmose> I did not. I was wondering if that sort of gcc/libc setting would contaminate my stuff, as I had stopped using compressed binaries for sbcl output when I found out about the lazy mmap-ing feature.
[21:49:31] <Lycurgus> the standard sbcl is fairly small, I usually override it on build
[21:49:39] <Lycurgus> *standard sbcl heap
[21:49:40] <Aurora_v_kosmose> Volatile memory is a lot more scarce and precious than non-volatile.
[21:49:49] <Lycurgus> to at least 4G
[21:50:19] <Lycurgus> default is 1G iirc
[21:50:28] <Aurora_v_kosmose> So once I figured out that compressing binaries meant you had to load the whole thing & not just mmap I stopped doing so.
[21:51:07] <Lycurgus> is it an embedded app oder?
[21:51:19] <Aurora_v_kosmose> oder?
[21:51:26] <Lycurgus> or whatever
[21:51:47] <Lycurgus> searching for reasons to compress the binary
[21:52:11] <Aurora_v_kosmose> Just general resource conscientiousness, and lack of funds to just buy a 1TB memory workstation and ignore the problem.
[21:52:18] <Lycurgus> beyond what the default for the os loader, coff, etc would do
[21:52:24] <Lycurgus> ah
[21:53:08] <Aurora_v_kosmose> I got used to taking care of my resources a lot when I was on a 4GB netbook when the standard was shifting to >=8GB
[21:53:10] <Lycurgus> 1TB of RAM would still be extravagant
[21:53:18] <Lycurgus> even in 2022
[21:53:28] <Aurora_v_kosmose> Indeed.
[21:53:44] <Lycurgus> not on a mainframe ofc
[21:54:36] <Aurora_v_kosmose> And since btrfs supports transparent compression, not compressing the binaries themselves + mmap preventing spurious volatile memory use gives me something along the best of both worlds.
[21:54:59] <Aurora_v_kosmose> I get on-disk savings and in-memory savings.
[21:55:38] <Aurora_v_kosmose> Well, I say mmap but I don't actually remember the specific mechanisms which are used by sbcl.
[21:55:52] <Aurora_v_kosmose> I just remember it only actually loads what it needs from uncompressed binaries.
[22:03:07] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:35:31] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[22:37:27] <pl> Uncompressed are lazy mapped I think, *usually*
[22:44:36] *** Joins: treflip (~user@user/treflip)
[23:03:14] <phoe> there is a post-ELS chat at https://meet.jit.si/els2022 if anyone feels like joining
[23:19:05] *** Quits: treflip (~user@user/treflip) (Quit: Quit)
[23:33:16] <ck_> is it still going on?
[23:33:39] <drakonis> the chat?
[23:33:45] <ck_> yes
[23:33:48] <drakonis> yes
[23:33:59] <drakonis> still got people here
[23:37:00] <SAL9000> Duuqnd: I've taken down my REP now :) Sorry! I saw you were trying to GHOST it and it reconnected every time...
[23:37:31] <Duuqnd> Oh, so that's what was happening! I thought Libera was doing something weird.
[23:38:21] <Duuqnd> Also, it turns out that CL REP works fine with Libera now, no idea if anything changed or not but I guess that's neat.
[23:38:24] <SAL9000> Duuqnd: https://pastebin.com/exAYJL0p
[23:40:35] <Aurora_v_kosmose> els?
[23:40:49] <Aurora_v_kosmose> Emacs Lisp Symphorium?
[23:41:04] <SAL9000> European Lisp Symposium
[23:41:10] <Aurora_v_kosmose> Ah, thanks.
[23:45:26] <sham1> An Emacs Lisp symposium would be interesting
[23:45:43] <SAL9000> we did have some Emacs Lisp talks too
