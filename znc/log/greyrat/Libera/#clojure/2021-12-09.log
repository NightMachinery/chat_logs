[00:08:17] <ridcully> two killer features with maps: being able to have anything as keys (day 8: keep your sets of chars as keys), being able to use the map as function (day 8: (map solution numbers) and be half there).  and destructuring with maps is nice too
[00:22:31] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:29:57] *** Quits: uncleyea1 (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Remote host closed the connection)
[00:31:06] *** Parts: tatsumaru (~tatsumaru@78.83.244.47) ()
[00:31:15] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[00:35:01] *** Joins: libertyprime (~libertypr@203.211.78.24)
[00:44:07] *** Joins: matty_matt (~matt@135.129.244.71)
[00:48:12] *** Quits: libertyprime (~libertypr@203.211.78.24) (Quit: leaving)
[00:55:22] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 256 seconds)
[01:21:52] *** Quits: seabass (~seabass@user/seabass) (Quit: leaving)
[01:22:40] *** Joins: schmudde (~schmudde@216.169.6.249)
[01:26:29] *** Joins: matty_matt (~matt@135.129.244.71)
[01:30:13] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[01:30:53] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[01:31:05] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 265 seconds)
[01:42:31] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[01:51:02] *** Quits: jespada (~jespada@87.74.37.56) (Ping timeout: 240 seconds)
[01:53:49] *** Joins: jespada (~jespada@87.74.33.157)
[02:01:48] *** Joins: matty_matt (~matt@135.129.244.71)
[02:02:55] *** Joins: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz)
[02:06:56] <goodger> third killer feature: passing around pointers to virtually identical maps thousands of times instead of using global state
[02:18:51] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[02:40:11] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:05:49] *** Quits: op2 (~op2@user/op2) (Ping timeout: 240 seconds)
[03:10:42] *** Quits: to-hu (~Thunderbi@p57b5aa80.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:26:13] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[03:29:01] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 240 seconds)
[03:37:29] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:07:37] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 268 seconds)
[04:08:09] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[04:12:37] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 240 seconds)
[04:19:34] <ridcully> well you could use an def-ed atom if you don't like the ability to write tests for pure functions
[04:20:04] <mwnaylor> re: hash-maps; from the books I've read, best practice is to use keywords as keys. That said, 2021 Advent of Code would tend to lead to numbers or strings as keys.
[04:21:56] <ridcully> (namespaced) keywords make good map keys... but in the end you can put anything immutable
[04:22:46] <ridcully> and there is no shame in just using strings... "keyworddizing" outside of the clojureworld is basically an anti-pattern
[04:24:14] *** Joins: matty_matt (~matt@135.129.244.71)
[04:37:17] <mwnaylor> For a given solution set, string and Numrber are good hash-map keys. BUT, do it for private implementations, or for public, document the hell out of it or wrap the implementation in abstractions so the consumer has no idea what type the key are.
[04:39:59] <ridcully> while it may work, most consumers would expect the same type for keys and values
[04:43:19] <sobel> is there a "who's using clojurescript" list? i need something external to point at. this consulting firm is taking a vaguely patronizing approach to my "short list" of frontend technologies which include cljs
[04:43:51] <sobel> doesn't need to be comprehensive, but it would be great if it had a household brand or two on it
[05:05:10] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[05:07:29] <mwnaylor> Same type for keys and values? What do you mean by that?
[05:16:30] *** Joins: schmudde (~schmudde@216.169.6.249)
[05:29:30] <jeaye> sobel: Electronic Arts
[05:29:39] <jeaye> (second largest gaming company in the world)
[05:29:51] *** Quits: libertyprime (~libertypr@125-239-52-43-fibre.sparkbb.co.nz) (Ping timeout: 265 seconds)
[05:31:24] <jeaye> There's this: https://clojure.org/community/companies
[05:31:33] <jeaye> Haven't seen the same for CLJS
[05:31:57] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:32:12] <jeaye> And I haven't had anyone add EA yet. I'd probably need approval for that.
[05:38:28] <sobel> ah that's perfect
[05:39:25] <sobel> tyvm
[06:35:06] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 265 seconds)
[06:59:40] *** Joins: matty_matt (~matt@135.129.244.71)
[07:03:09] *** Joins: libertyprime (~libertypr@203.211.78.24)
[08:09:53] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[08:14:40] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 265 seconds)
[08:15:41] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 252 seconds)
[08:15:47] *** Joins: mbuf (~Shakthi@122.178.122.215)
[08:32:34] *** Joins: matty_matt (~matt@135.129.244.71)
[08:35:27] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 265 seconds)
[08:36:35] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 252 seconds)
[08:37:01] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 240 seconds)
[08:38:23] *** Joins: matty_matt (~matt@135.129.244.71)
[08:40:51] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:42:37] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 240 seconds)
[08:50:00] *** Joins: libertyprime (~libertypr@222-154-245-111.adsl.xtra.co.nz)
[08:54:03] *** Quits: libertyprime (~libertypr@222-154-245-111.adsl.xtra.co.nz) (Client Quit)
[09:33:49] *** Quits: schmudde (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[09:51:35] *** Joins: matty_matt (~matt@135.129.244.71)
[09:56:09] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 252 seconds)
[10:10:43] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[10:15:14] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[10:19:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:da4:9ec6:5ef5:74d6) (Ping timeout: 268 seconds)
[10:28:23] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:28:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:41:52] *** Quits: ihabunek (~ihabunek@bezdomni.net) (Ping timeout: 256 seconds)
[10:41:52] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 256 seconds)
[10:42:53] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[10:42:53] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[10:42:53] *** Joins: turlando (~turlando@user/turlando)
[10:43:00] *** Quits: runejuhl (~runejuhl@user/runejuhl) (Ping timeout: 256 seconds)
[10:43:42] *** Joins: ihabunek1 (~ihabunek@bezdomni.net)
[10:45:49] *** Joins: struchu (~struchu@staticline-31-183-181-165.toya.net.pl)
[10:52:34] *** Joins: struchu1 (~struchu@staticline-31-183-181-165.toya.net.pl)
[10:54:37] *** Quits: struchu (~struchu@staticline-31-183-181-165.toya.net.pl) (Ping timeout: 268 seconds)
[10:55:57] *** Joins: runejuhl (~runejuhl@user/runejuhl)
[11:00:41] *** Quits: dale (dale@user/dale) (Ping timeout: 252 seconds)
[11:01:57] *** Joins: dale (dale@user/dale)
[11:03:51] *** Joins: matty_matt (~matt@135.129.244.71)
[11:04:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[11:06:09] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:08:30] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 256 seconds)
[11:22:54] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[11:29:48] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:32:55] <ridcully> mwnaylor: i mean the keys are of one type and the values are of the same or another.  but nothing mandates that and you can do what you want.  like putting your socks in the fridge ;)
[11:41:28] *** Joins: libertyprime (~libertypr@118-92-83-78.dsl.dyn.ihug.co.nz)
[11:54:11] *** Joins: shiranaihito (~textual@2001-b011-0006-1e12-71c3-ab49-da7d-a4db.dynamic-ip6.hinet.net)
[12:11:35] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[12:13:10] *** Joins: op2 (~op2@user/op2)
[12:14:01] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:918b:ecd9:869:3108) (Ping timeout: 252 seconds)
[12:15:22] *** Quits: libertyprime (~libertypr@118-92-83-78.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[12:16:13] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[12:37:11] *** Joins: libertyprime (~libertypr@203.211.78.24)
[12:46:32] *** Joins: archenoth (~archenoth@S0106889e6827f474.cg.shawcable.net)
[12:48:12] *** Quits: shiranaihito (~textual@2001-b011-0006-1e12-71c3-ab49-da7d-a4db.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:52:06] *** Quits: archenoth (~archenoth@S0106889e6827f474.cg.shawcable.net) (Ping timeout: 265 seconds)
[12:52:48] *** Joins: matty_matt (~matt@135.129.244.71)
[12:56:23] *** Joins: shiranaihito (~textual@2001-b011-0006-1e12-71c3-ab49-da7d-a4db.dynamic-ip6.hinet.net)
[12:57:25] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 265 seconds)
[13:07:15] *** Joins: to-hu (~Thunderbi@p57b5aa80.dip0.t-ipconnect.de)
[13:32:13] *** Quits: Trieste (~T@user/pilgrim) (Ping timeout: 240 seconds)
[13:33:39] *** Joins: Trieste (T@user/pilgrim)
[13:46:21] *** Joins: vollcheck (~vollcheck@093105011126.gdansk.vectranet.pl)
[13:46:58] <vollcheck> hey, is there anybody willing to help with AoC in clojure? I wrote a solution but it seems to be wrong
[13:49:53] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[13:56:49] <ridcully> vollcheck: if you can share the problem in a repo or a paste site, I am sure someone will
[13:58:13] <vollcheck> nvm, found the bug by myself - I was looking for `(apply min points)` in todays challenge but didn't realize that need to check if the number is 9, then min from [9 9 9] is 9 which gives me false positive
[13:59:27] <vollcheck> oh, I have one question: how can I rewrite swapping atom as global storage for the points in nested for loop: https://github.com/vollcheck/aoc/blob/master/y2021/day09/core.clj#L30
[14:03:28] *** Quits: shiranaihito (~textual@2001-b011-0006-1e12-71c3-ab49-da7d-a4db.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:06:13] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 252 seconds)
[14:07:07] <ridcully> not an answer, but a warning (without looking at the code): it's very unlikely you need an atom for aoc.  this sounds like you are doing imperative style programming in the guise of clojure
[14:08:00] <vollcheck> yes, I do :P the reason behind that is just I haven't found other way to store the important points in nested `for` loop
[14:08:28] <ridcully> for is not a loop.  it's a list comprehension
[14:09:09] <ridcully> the first problems you might see here is, that for is lazy.  so if no one ever consumes that result, you will never see the swap called
[14:10:24] <vollcheck> so should I rather go for `loop`? how then can I remain the result from the nested loop?
[14:10:42] <ridcully> what you want to do instead is to write your code so your functions ideally take some arguments and return some result (with immutable data structures this is a pure function)
[14:12:27] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[14:15:28] <ridcully> i dont have started with day8 and i dont want to see spoilers... so i only glanced.  it looks as if you want to filter something here (whether its tube?) - so you can use for with :when; or you can use filter
[14:15:44] <vollcheck> okay htanks
[14:16:12] <vollcheck> just wondering how to persist the information that i'm in the nth row of nth column
[14:16:19] <vollcheck> but will tinker with it
[14:16:58] <ridcully> for me the shift to functional programming was way harder when learning clojure than dealing with e.g. the syntax.  some things are named like the things you know... but are different
[14:17:12] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[14:19:58] <vollcheck> yesss, in python it'd so easy to just process the matrix
[14:20:16] <vollcheck> but as you wrote, it's a shift of thinking
[14:30:02] <ridcully> python has also a list comprehension iirc (i remember the details).  so it's quite likely you did there, what for is supposed to do
[14:33:47] <ridcully> so (i am making this up!  no clue about the right syntax) this `[x,y] for y in range(w), for x in range(w)` is `(for [y (range w) x (range w)] [x y])` in clojure (but it's lazy... the python version i'd guess is eager?)
[14:36:08] <rovanion> I There are two variants in python. List comprehensions `[x/2 for x in range(10)]` are eager while generator comprehensions `(x/2 for x in range(10))` are lazy.
[14:36:35] <rovanion> Though barely anything in the standard library is capable of consuming lazy sequences so generators are of limited use.
[14:37:47] <vollcheck> thanks, I know that as I come from Python background
[14:40:34] *** Quits: struchu1 (~struchu@staticline-31-183-181-165.toya.net.pl) (Quit: WeeChat 3.3)
[14:40:48] *** Joins: struchu (~struchu@staticline-31-183-181-165.toya.net.pl)
[14:41:49] *** Joins: matty_matt (~matt@135.129.244.71)
[14:46:28] *** Quits: vollcheck (~vollcheck@093105011126.gdansk.vectranet.pl) (Remote host closed the connection)
[14:46:40] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 256 seconds)
[14:49:14] *** Joins: matty_matt (~matt@135.129.244.71)
[14:53:53] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 252 seconds)
[14:56:17] *** Joins: vollcheck (~vollcheck@093105011126.gdansk.vectranet.pl)
[15:13:26] *** Quits: mbuf (~Shakthi@122.178.122.215) (Quit: Leaving)
[15:35:24] *** Joins: matty_matt (~matt@135.129.244.71)
[15:36:36] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:9a0:b063:c52e:debb)
[16:08:27] *** Joins: Techcable (~Techcable@168.235.93.147)
[16:13:19] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[16:13:47] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:14:05] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:17:54] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[16:31:01] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 240 seconds)
[16:32:01] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 265 seconds)
[16:34:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:cd28:ecf9:b8a2:d95a)
[16:44:43] *** Joins: shiranaihito (~textual@2001-b011-4000-1183-78ec-649b-c902-f0bc.dynamic-ip6.hinet.net)
[17:12:47] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[17:15:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:18:21] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:19:58] *** Quits: vollcheck (~vollcheck@093105011126.gdansk.vectranet.pl) (Quit: Leaving)
[17:20:33] *** Joins: libertyprime (~libertypr@203.211.78.24)
[17:21:24] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:21:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:22:46] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 265 seconds)
[17:22:53] *** Joins: matty_matt (~matt@135.129.244.71)
[17:30:38] *** Joins: xsperry (~xs@user/xsperry)
[17:37:25] *** Joins: schmudde (~schmudde@216.169.6.249)
[17:42:48] *** Joins: wnh (~user@user/wnh)
[18:06:32] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[18:07:53] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[18:14:12] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[18:16:37] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 240 seconds)
[18:19:10] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 256 seconds)
[18:33:21] *** Quits: struchu (~struchu@staticline-31-183-181-165.toya.net.pl) (Quit: WeeChat 3.3)
[18:36:05] *** Joins: neirac_ (~neirac@pc-122-191-45-190.cm.vtr.net)
[18:36:09] *** Joins: struchu (~struchu@staticline-31-183-181-165.toya.net.pl)
[18:40:58] *** Quits: struchu (~struchu@staticline-31-183-181-165.toya.net.pl) (Client Quit)
[18:46:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:cd28:ecf9:b8a2:d95a) (Ping timeout: 268 seconds)
[18:52:33] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[18:54:36] *** Quits: shiranaihito (~textual@2001-b011-4000-1183-78ec-649b-c902-f0bc.dynamic-ip6.hinet.net) (Ping timeout: 265 seconds)
[18:59:08] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Remote host closed the connection)
[19:00:58] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[19:01:18] *** Joins: nighcoder (~ciumbi@206.176.143.59)
[19:02:48] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[19:08:53] *** Quits: nighcoder (~ciumbi@206.176.143.59) (Remote host closed the connection)
[19:11:04] *** Joins: nighcoder (~ciumbi@206.176.143.59)
[19:13:50] *** Joins: matty_matt (~matt@135.129.244.71)
[19:15:17] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1b4:2cec:47c3:871e)
[19:24:37] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 240 seconds)
[19:26:08] *** Joins: libertyprime (~libertypr@203.211.78.24)
[19:26:28] *** Joins: seschwar (~seschwar@user/seschwar)
[19:27:28] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 265 seconds)
[19:28:06] *** Joins: matty_matt (~matt@135.129.244.71)
[19:31:20] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[19:47:46] *** Quits: matty_matt (~matt@135.129.244.71) (Ping timeout: 265 seconds)
[19:51:15] *** Quits: to-hu (~Thunderbi@p57b5aa80.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:53:30] *** Quits: turbofail (~user@157-131-95-100.fiber.dynamic.sonic.net) (Read error: Connection reset by peer)
[20:48:28] *** Quits: neirac_ (~neirac@pc-122-191-45-190.cm.vtr.net) (Ping timeout: 268 seconds)
[21:19:25] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 240 seconds)
[21:35:51] *** Quits: gko (~user@user/gko) (Remote host closed the connection)
[21:36:59] *** Joins: gko (~user@user/gko)
[21:45:42] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[21:51:11] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 245 seconds)
[22:04:28] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[22:08:10] *** Quits: Ragnor (~Ragnor@user/ragnor) (Quit: leaving)
[22:08:24] *** Joins: Ragnor (~Ragnor@user/ragnor)
[22:08:56] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
[22:19:56] *** Quits: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca) (Remote host closed the connection)
[22:37:57] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[22:42:44] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 265 seconds)
[22:54:10] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Remote host closed the connection)
[22:55:18] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[23:12:19] <mwnaylor> Silly me, got tired of mapping first over nested collecitions, so I implemented flat-map. Then I started poking around with C-c C-d d and found the documentation for mapcat. In clojure.core since 1.03
[23:13:52] *** Quits: faxmodem (~faxmodem@82-65-124-102.subs.proxad.net) (Quit: so long and thanks for all the fish)
[23:15:19] *** Joins: faxmodem (~faxmodem@82-65-124-102.subs.proxad.net)
[23:17:38] <mwnaylor> Is there a Clojure best practice for representing a 2-d matrix? I'v used both {[row col] va} and {row {col val}} structures. Since I see that clojure.core contains get-in, assoc-in, and update-in, I'm leaning toward using nested maps in the future.
[23:19:19] <lunik1> If I'm limited to the core library I usually use a vector of vectors
[23:21:51] <mwnaylor> lunik1: In that case, what function would you use for getting/setting values in the nested vectors data structure?
[23:22:06] <mwnaylor> s/function/functions/
[23:22:54] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[23:23:01] <lunik1> remember, clojure vectors are associative :)
[23:23:12] *** Quits: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru) (Remote host closed the connection)
[23:23:35] <jeaye> mwnaylor: get-in
[23:23:52] <jeaye> I'd also use nested vectors.
[23:25:49] *** Joins: uncleyear (~ian@pppoe.178-66-158-210.dynamic.avangarddsl.ru)
[23:29:00] <mwnaylor> jeaye: Good call with get-in. Documentation shows it's good for many variations. A vector containing hash-maps or a hash-map of vectors
[23:31:37] *** Quits: op2 (~op2@user/op2) (Ping timeout: 252 seconds)
[23:33:27] <mwnaylor> What I like about nested hash-maps is the ability to model a sparse matrix. Example, the game Battleship. Vectors of vectors would require all 100 grid units to place the ships. In comparison, the nested hash-map implementation would only need 17 entries to track the placement ships.
[23:48:26] *** Joins: geenvoud (~geenvoud@user/geenvoud)
[23:52:18] <jeaye> Yep.
[23:53:26] *** Quits: geenvoud (~geenvoud@user/geenvoud) (Ping timeout: 252 seconds)
