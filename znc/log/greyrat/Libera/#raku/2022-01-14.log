[00:35:01] *** Quits: qorg11 (~lain@2605:6400:c022:fa04:1312:1337:0:beef) (Ping timeout: 240 seconds)
[00:36:41] *** Joins: qorg11 (~lain@2605:6400:c022:fa04:1312:1337:0:beef)
[01:10:48] *** Quits: hasrthur_ (~hasrthur@45.89.88.214) (Remote host closed the connection)
[01:57:56] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Excess Flood)
[01:58:09] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[02:26:12] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Excess Flood)
[02:26:24] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[02:34:03] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[02:43:48] <tonyo> japhb: preventing an echo from a keystroke
[02:54:25] <japhb> tonyo: If you're talking about entering a password, with either no echo, or some random character(s), Terminal::LineEditor can do that.  If you're talking about reading individual keystrokes, there are a couple modules with that capability (including the intermediate-level classes within Terminal::LineEditor).
[02:54:48] <tonyo> how does terminal::lineeditor do that?
[02:55:42] <tonyo> fez does it, it's a trivial problem between modern win/osx/linux but it's not necessarily trivial beyond that
[02:55:57] <tonyo> also, talking about grabbing individual chars
[02:56:10] <japhb> Oh, as soon as it starts accepting input, it is in "raw" input mode, so that it can handle any keystrokes and map them appropriately.  So choosing to print something different from the key pressed is trivial.
[02:57:28] <japhb> The code in Terminal::LineEditor is based on my work in https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print/RawInput.pm6 and https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print/DecodedInput.pm6
[02:57:35] <japhb> though somewhat modernized
[02:57:59] <tonyo> where is the bit that actually prevents echo?
[02:58:32] <japhb> I am also continuing to work on that in order to make it easier to subclass -- I now have a version locally that allows a combination of mouse input, keyboard input, and CLI and full-screen TUI interfaces.
[02:58:46] <japhb> tonyo: As soon as you go raw.  Here, lemme find the lines
[02:59:20] <japhb> https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print/RawInput.pm6#L16
[02:59:40] <japhb> Term::termios's makeraw helper
[02:59:43] <tonyo> oh, so it's Term::termios
[02:59:58] <tonyo> need to interview someone, going to look trace that down afterwards
[03:00:48] <tonyo> that rpg demo is cool
[03:00:53] <japhb> OK.  Here's the newer variation of the code, in the following two methods: https://github.com/japhb/Terminal-LineEditor/blob/main/lib/Terminal/LineEditor/RawTerminalInput.rakumod#L272
[03:01:08] <japhb> :-)  You should see the current version.  :-)
[03:07:00] <tonyo> this is what i was looking for
[03:07:02] <tonyo> https://github.com/krunen/term-termios/blob/master/src/myhelper.c
[03:10:23] *** Quits: lichtkind_ (~lichtkind@p200300d0a70950c274aa9c3d86b23af1.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:11:18] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[03:12:05] <japhb> Ah, OK.  Interesting.
[03:15:37] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Ping timeout: 256 seconds)
[03:18:57] <elcaro> I can't seem to make an `our` scoped variable a Proxy. Is this a known limitation?
[03:24:04] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 250 seconds)
[03:27:41] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:30:18] <elcaro> nvm... found a work around... bind the Proxy to `OUR::{'$varname'}`
[03:36:32] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:38:27] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:38:28] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:38:28] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[04:38:49] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[04:38:50] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[04:39:07] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[04:39:08] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[04:39:24] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[04:39:39] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[04:40:01] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[04:41:05] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[04:41:08] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:41:10] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[04:41:13] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[04:43:41] *** Joins: rir_ (~rir@2601:192:8601:280:514a:af9f:99df:c694)
[04:45:51] *** Quits: rir_ (~rir@2601:192:8601:280:514a:af9f:99df:c694) (Client Quit)
[05:15:53] *** Joins: frost (~frost@user/frost)
[05:31:26] <elcaro> I can dynamically define a module sub like so `OUR::{"&$name"} := sub { ... }`, but can I define multi sub's?
[05:38:53] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[05:40:17] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[05:40:35] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[05:40:51] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[06:06:45] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:19:39] *** Joins: frost (~frost@user/frost)
[06:38:34] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[06:38:47] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[06:40:13] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[07:11:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[07:39:43] *** Joins: frost (~frost@user/frost)
[07:41:14] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[07:48:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[08:12:51] *** Quits: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1) (Ping timeout: 245 seconds)
[08:13:06] *** Joins: mtj (quasselcor@2400:8902::f03c:91ff:fe93:b7f1)
[08:26:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b997:c1f9:27c:1247) (Ping timeout: 250 seconds)
[09:26:33] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:26:33] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:27:01] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[09:27:31] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:27:36] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[09:27:50] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[09:29:00] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[09:29:17] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:29:41] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[09:29:43] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[09:37:53] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:39:33] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:53:43] <samebchase> Hi, I need some assistance with Red. I've described the problem here: https://github.com/FCO/Red/issues/543
[09:54:11] <moon-child> SmokeMachine: 
[10:03:06] *** Joins: razetime (~quassel@49.207.203.87)
[10:03:06] *** Quits: razetime (~quassel@49.207.203.87) (Client Quit)
[10:27:26] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[10:28:27] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[10:28:36] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[10:29:12] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[10:29:39] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[10:39:48] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:41:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[11:03:37] *** Joins: razetime (~quassel@49.207.203.87)
[11:11:05] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:11:44] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Remote host closed the connection)
[11:12:06] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:16:53] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 256 seconds)
[11:17:21] *** Joins: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at)
[11:28:57] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[11:35:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:41:11] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[11:41:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[11:44:20] *** Joins: frost (~frost@user/frost)
[11:45:37] *** Quits: razetime (~quassel@49.207.203.87) (Ping timeout: 256 seconds)
[11:49:11] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:49:48] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (Read error: Connection reset by peer)
[11:49:59] *** Joins: moon-child (~moon-chil@cardinal.elronnd.net)
[11:55:19] *** Joins: frost (~frost@user/frost)
[12:04:55] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:26:00] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[12:29:21] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[13:04:39] *** Joins: lichtkind_ (~lichtkind@p200300d0a70950c274aa9c3d86b23af1.dip0.t-ipconnect.de)
[13:13:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:26:52] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[13:35:04] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Ping timeout: 250 seconds)
[13:47:07] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:3863:cfe8:507d:8d05)
[13:47:23] *** Joins: razetime (~quassel@49.207.203.87)
[13:48:17] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:cb2:cb45:7a07:3d72) (Ping timeout: 240 seconds)
[14:28:44] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:29:42] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[14:44:09] <tbrowder> wish i could help, but i have my own problems this morning  :-(
[14:45:40] * lizmat wishes tbrowder strength
[14:46:48] <tbrowder> thnx, i'm getting a weird error about Mu while iterating over an array.
[14:50:07] <tbrowder> the algo is like this: while @a.elems { say @a.tail.value // ''; @a.pop}
[14:51:15] <tbrowder> at some point i get this error which i will show in a minute (i forgot to note it)....
[14:52:42] <tbrowder> "No such method 'value' for invocant of type Mu"
[14:53:17] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849)
[14:54:16] <tbrowder> i think i need to put a test higher up...gotta run. but does anyone know if Larry or Damian will be in Houston?
[15:17:35] <lizmat> say @a.pop.value // "" while @a.elems
[15:17:58] <lizmat> pop returns the last value... so no need to do a .tail
[15:34:17] <tbrowder> ok, thnx
[15:37:42] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:40:15] *** Quits: razetime (~quassel@49.207.203.87) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:40:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:50:11] *** Joins: lichtkind__ (~lichtkind@p200300d0a70950c074aa9c3d86b23af1.dip0.t-ipconnect.de)
[15:51:13] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:52:37] *** Quits: lichtkind_ (~lichtkind@p200300d0a70950c274aa9c3d86b23af1.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:43:34] *** Quits: lichtkind__ (~lichtkind@p200300d0a70950c074aa9c3d86b23af1.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:44:37] *** Joins: lichtkind (~lichtkind@p200300d0a7289d5374aa9c3d86b23af1.dip0.t-ipconnect.de)
[17:17:21] *** Quits: abraxxa (~ahartmai@tsa-tc-flod.t-systems.at) (Remote host closed the connection)
[17:33:09] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[17:37:23] *** Quits: ecocode (~ecocode@2001:41d0:1:6a74::1) (Quit: ZNC 1.6.4 - http://znc.in)
[17:38:39] *** Joins: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[17:42:11] *** Joins: ecocode (~ecocode@2001:41d0:1:6a74::1)
[18:22:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:37:33] *** Quits: ecocode (~ecocode@2001:41d0:1:6a74::1) (Quit: ZNC 1.6.4 - http://znc.in)
[18:42:10] *** Joins: ecocode (~ecocode@ks39550.kimsufi.com)
[18:52:12] *** Joins: frost (~frost@user/frost)
[19:06:32] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:16:00] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:6113:2671:c33c:ef4a)
[19:30:12] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Quit: You have been kicked for being idle)
[19:31:29] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Read error: Connection reset by peer)
[19:31:46] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[19:52:54] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[20:07:19] *** Joins: wingfold (~wingfold@173.38.117.92)
[20:17:59] *** Joins: wingfold_ (~wingfold@c-69-245-16-139.hsd1.tn.comcast.net)
[20:19:34] *** Quits: wingfold_ (~wingfold@c-69-245-16-139.hsd1.tn.comcast.net) (Remote host closed the connection)
[20:20:51] *** Quits: wingfold (~wingfold@173.38.117.92) (Quit: Connection closed)
[20:23:43] *** Joins: wingfold (~wingfold@c-69-245-16-139.hsd1.tn.comcast.net)
[20:33:17] <samebchase> Hi, I have a Red model, in which a column is of the Json type, and can be null in some situations. When I fetch the rows, I get the "Use of uninitialized value element of type Any in string context." message printed on the console, seems to be coming from https://github.com/FCO/Red/blob/master/lib/Red/Type/Json.pm6#L5 where from-json is called on
[20:33:17] <samebchase> the Nil value.
[20:33:36] <samebchase> What can I do here, to prevent this from being printed. I'm trying various default values, but no luck so far.
[20:34:25] <lizmat> I have no idea, perhaps try the #red channel?
[20:35:07] <samebchase> wow, didn't know
[20:35:12] <samebchase> joining it
[20:37:07] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Read error: Connection reset by peer)
[20:37:29] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[20:45:43] <tonyo> fez has had more than 40k downloads
[20:46:04] <lizmat> wow
[20:55:16] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[20:55:23] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[20:55:44] <japhb> Nice!
[20:56:07] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[20:56:14] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[20:56:22] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[20:56:29] *** Joins: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net)
[20:58:47] <patrickb> tonyo: Is that # of modules downloaded from the fez eco, or # of downloads of fez itself?
[20:59:10] <tonyo> from the fez eco
[20:59:18] <patrickb> k
[21:11:48] *** Quits: Altai-man (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:13:28] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:13:57] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[21:15:16] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 250 seconds)
[21:17:50] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:25:40] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 250 seconds)
[21:27:01] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:35:31] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:50a3:2009:e1f1:2849) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:36:15] *** Quits: wingfold (~wingfold@c-69-245-16-139.hsd1.tn.comcast.net) (Ping timeout: 256 seconds)
[21:36:54] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:10:07] <patrickb> c: my %h = a => [1,2]; my @b = %h<a>; dd @b;
[22:10:09] <committable6> patrickb, ¦my: «Cannot find this revision (did you mean “nom”?)»
[22:10:20] <patrickb> m: my %h = a => [1,2]; my @b = %h<a>; dd @b;
[22:10:20] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [[1, 2],]␤»
[22:12:29] <patrickb> How is this mechanic called? (Arrays coming out of hashes need to be slipped to be iterated or assigned.)
[22:13:21] <patrickb> Is that documented? I've been unable to find any hint about this in the docs.
[22:17:55] <ugexe> its the same as my @a = $[1,2]; my @b = @a;
[22:19:00] <ugexe> dunno about the vernacular though
[22:20:49] <patrickb> m: my @a = 1, 2; my %h = a => @a; my @b = %h<a>; dd @b;
[22:20:49] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [[1, 2],]␤»
[22:23:42] <patrickb> I'm unsure which bit of information I need to remember to not be confused the next time I want to iterate a list I've pulled out of a Hash.
[22:25:18] <tonyo> i just think of it as `my @x = ` always surrounds its args with []..
[22:25:31] <tonyo> m: my @a = 1,2,3; dd @a;
[22:25:32] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @a = [1, 2, 3]␤»
[22:25:38] <patrickb> m: my @a = 1,2; my %h = :@a; say $_ for %h<a>;
[22:25:39] <camelia> rakudo-moar 7dc3add84: OUTPUT: «[1 2]␤»
[22:25:57] <patrickb> my @a = 1,2; say $_ for @a;
[22:25:58] <evalable6> patrickb, rakudo-moar 7dc3add84: OUTPUT: «1␤2␤»
[22:26:06] <lizmat> the list in the hash is itemized, and that's why it won't iterate
[22:26:47] <lizmat> m: my %h = a => [1,2]; my @b = %h<a><>; dd @b
[22:26:48] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [1, 2]␤»
[22:27:07] <lizmat> m: my %h = a => [1,2]; my @b = @%h<a>; dd @b
[22:27:07] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [Failure.new(exception => X::AdHoc.new(payload => "Type List does not support associative indexing."), backtrace => Backtrace.new)]␤»
[22:27:14] <lizmat> m: my %h = a => [1,2]; my @b = @(%h<a>); dd @b
[22:27:14] <camelia> rakudo-moar 7dc3add84: OUTPUT: «Array @b = [1, 2]␤»
[22:28:12] <patrickb> So the basic rule to remember is that I always have to put a "|" before a hash access if I want to get the list/array out the same as I put it in.
[22:28:53] <patrickb> Is that a good rule to remember? Or is the actual thing to be aware of something else?
[22:29:19] * patrickb tries to grasp the deeper concept.
[22:30:27] <ugexe> if you don't care about copying just using binding
[22:30:56] <ugexe> m: my %h = a => [1,2]; my @b := %h<a>; dd @b;
[22:30:56] <camelia> rakudo-moar 7dc3add84: OUTPUT: «[1, 2]␤»
[22:34:36] *** Joins: thundergnat (~steve@2601:80:8600:2543:2129:3fcf:f399:9779)
[22:35:44] <thundergnat> m: sub plural ($x, $n) { $x ~ ($n - 1 ?? 's' !! '') }; say "$_ { plural 'dog', $_ }" for ^3;
[22:35:45] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤0 dogs␤1 dog␤2 dogs␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<->' (line 1)␤»
[22:36:14] <thundergnat> ?? There's no dead code there.
[22:36:43] <thundergnat> bisectable: old=2021.10 new=HEAD sub plural ($x, $n) { $x ~ ($n - 1 ?? 's' !! '') }; say "$_ { plural 'dog', $_ }" for ^3;
[22:36:45] <bisectable6> thundergnat, Bisecting by output (old=2021.10 new=7dc3add) because on both starting points the exit code is 0
[22:36:50] <bisectable6> thundergnat, bisect log: https://gist.github.com/344e42bec8bed2259de7b78852b29973
[22:36:50] <bisectable6> thundergnat, (2021-12-16) https://github.com/rakudo/rakudo/commit/71c62e7c1121c19e7c486de5f56d0e7d13855ce1
[22:36:59] <ugexe> well it did qualify it with "potential"
[22:37:07] <patrickb> ugexe, tonyo, lizmat: Thanks for your explanations and examples. Let's see how long I'll remember this.
[22:37:54] <thundergnat> Hmm. I think that code needs a little more tweaking. 
[22:38:03] <lizmat> hmmm... I wonder if it would make sense to make a SlippyHash module, that would automatically turn any List into a Slip, and every hash into a Slip of Pairs
[22:38:36] <tonyo> thundergnat: it looks ilke that's being interpreted as `sub plural ($x, $n) { $x ~ ($n - (1 ?? 's' !! '')) }`
[22:38:47] <thundergnat> It now warns for anything that treats an integer like a boolean.
[22:38:49] <lizmat> thundergnat: how about $x ~ ('s' if $n != 1) 
[22:38:57] <tonyo> but it's working correctly ^
[22:39:05] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:39:20] <thundergnat> m: say 3 % 1 ?? 'odd' !! 'even'
[22:39:21] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤even␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<%>' (line 1)␤»
[22:39:43] <lizmat> mL sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m dog
[22:39:46] <thundergnat> That broke about 15 - 20 scripts I have out in the wild.
[22:39:47] <lizmat> m: sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m dog
[22:39:47] <camelia> rakudo-moar 7dc3add84: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    dog used at line 1. Did you mean 'log'?␤␤»
[22:39:58] <lizmat> m: sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m 'dog'
[22:39:59] <camelia> rakudo-moar 7dc3add84: OUTPUT: «dog␤»
[22:40:02] <lizmat> m: sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m 'dog',2
[22:40:03] <camelia> rakudo-moar 7dc3add84: OUTPUT: «dogs␤»
[22:40:06] <lizmat> m: sub m($x,$n = 1) { $x ~ ('s' if $n != 1) }; say m 'dog',0
[22:40:06] <camelia> rakudo-moar 7dc3add84: OUTPUT: «dogs␤»
[22:40:24] <thundergnat> The problem is with the bogus warning on ternaries.
[22:40:42] <thundergnat> m: say 3 % 1 ?? 'odd' !! 'even'
[22:40:42] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤even␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<%>' (line 1)␤»
[22:41:01] <thundergnat> There is no dead code there. ^^
[22:41:35] <thundergnat> And that worked without warnings until https://github.com/rakudo/rakudo/commit/71c62e7c1121c19e7c486de5f56d0e7d13855ce1
[22:41:38] <lizmat> m: say # % 1
[22:41:38] <camelia> rakudo-moar 7dc3add84: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 # % 1␤Other potential difficulties:␤    Unsupported use of bare "say".  In Raku please use: .say if you meant␤    to call it as a method on $_, or …»
[22:41:42] <lizmat> m: say 3 % 1
[22:41:42] <camelia> rakudo-moar 7dc3add84: OUTPUT: «0␤»
[22:42:14] <thundergnat> Its the ternary
[22:42:31] <lizmat> thundergnat: please make an issue for it...  so that we can revert before 2022.01
[22:46:05] <Voldenet> m: my $rows = 2; my $columns = 5; my $vertical = True; say(10 % $vertical ?? $columns !! $rows)
[22:46:05] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤2␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<%>' (line 1)␤»
[22:46:30] <Voldenet> there could be uses for this warning
[22:47:26] <Voldenet> m: say (3 % 1) ?? 'odd' !! 'even'
[22:47:26] <camelia> rakudo-moar 7dc3add84: OUTPUT: «even␤»
[22:50:39] <ugexe> code is either dead or its not
[22:51:00] <lizmat> .oO( only when you look at it :-)
[22:53:06] <Voldenet> well, the original case from the commit `"a = " ~ $a ?? "true" !! "false"` is certainly not containing any dead code
[22:56:19] <Voldenet> m: class Uh { }; multi infix:<~>(Str $a, Uh $b){  };my $a = Uh.new; say "a = " ~ $a  ?? "true" !! "false"
[22:56:20] <camelia> rakudo-moar 7dc3add84: OUTPUT: «false␤»
[22:58:11] <Voldenet> m: class Uh { }; multi infix:<~>(Str $a, Uh $b){  }; my $a = "ok"; say "a = " ~ $a  ?? "true" !! "false"
[22:58:11] <camelia> rakudo-moar 7dc3add84: OUTPUT: «true␤»
[22:58:37] <Voldenet> …i'm quite sure this fix doesn't work as expected
[23:04:00] <moon-child> m: my $a = "ok"; say "a = " ~ ($a ?? "true" !! "false")
[23:04:00] <camelia> rakudo-moar 7dc3add84: OUTPUT: «a = true␤»
[23:04:24] <moon-child> it parenthesizes as ("a = " ~ $a) ?? "true" !! "false"
[23:04:35] <moon-child> I think master has a warning for that
[23:04:52] *** tinita_ is now known as tinita
[23:05:03] <moon-child> oh, you know about that.  I need to read more than 1 line of scrollback
[23:05:12] <moon-child> sorry
[23:10:49] <thundergnat> m: say 3 %% 2 ?? 'even' !! 'odd'
[23:10:50] <camelia> rakudo-moar 7dc3add84: OUTPUT: «odd␤»
[23:10:59] <thundergnat> m: say 3 % 2 ?? 'odd' !! 'even'
[23:10:59] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤odd␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<%>' (line 1)␤»
[23:11:51] <thundergnat> It only seems to warn about expressions that aren't explicitly a boolean
[23:12:13] <thundergnat> issue filed: https://github.com/rakudo/rakudo/issues/4719
[23:12:22] <MasterDuke> yes, that's what this conditional is trying to do https://github.com/rakudo/rakudo/commit/71c62e7c1121c19e7c486de5f56d0e7d13855ce1#diff-825a09f6993c1c5393a98e85d638a3e21cf40b650b44af0592519fdcaa296f32R1523
[23:13:16] <MasterDuke> if anyone has an idea for how to tighten it up i'm all ears
[23:15:58] <thundergnat> MasterDuke: I'm not against the warning in principle, but it kind of spoils some DWIMery I tend to lean on. See the Issue I filed for links to multiple script in the wild this affects. 
[23:17:04] <MasterDuke> well, it also exposes a *completely* unrelated bug, so it's at least likely to get reverted before the next release
[23:17:47] <MasterDuke> m: my $v = 3; my $sign = $v +> 31 ?? -1 !! 1; say $sign
[23:17:48] <camelia> rakudo-moar 7dc3add84: OUTPUT: «(signal SEGV)»
[23:18:57] <MasterDuke> happens in the optimizer in the code i added, but the fault lies somewhere else
[23:19:33] <Voldenet> m: my $a = 2.rand.Int; say "a = " ~ $a ?? "true" !! "false";
[23:19:33] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤true␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<~>' (line 1)␤»
[23:20:38] <Voldenet> i think it only makes sense to warn in case: Str ~ Str ?? … !! …
[23:21:06] <Voldenet> or even Str ~ … ?? … !! …
[23:22:35] <MasterDuke> it isn't a property of the operands, but the operator
[23:22:46] <MasterDuke> m: my $a = 2.pick; say 1 ~ $a ?? "odd" !! "even"
[23:22:47] <camelia> rakudo-moar 7dc3add84: OUTPUT: «WARNINGS for <tmp>:␤odd␤Potential dead code, the '?? !!' is gobbling up the result of the '&infix:<~>' (line 1)␤»
[23:23:22] <thundergnat> Voldenet: opinions differ. https://rosettacode.org/wiki/I_before_E_except_after_C#Raku  <-- This was written by TimToady more than 7 years ago and now warns 
[23:25:17] <MasterDuke> where's the warning (i thought it would be the last line, but it isn't)
[23:26:12] <Voldenet> If that's the property of the operator then ~ can always warn
[23:29:20] <thundergnat> MasterDuke: Argh. It is the last line, but the version I was looking at uses string concatenation rather than the comma separated list. So that one isn't in the wild. Red herring.
[23:37:04] *** Quits: thundergnat (~steve@2601:80:8600:2543:2129:3fcf:f399:9779) (Quit: Leaving)
[23:52:10] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:52:39] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[23:54:58] <discord-raku-bot> <Anton Antonov#7232> Is the #red channel I have reachable with Discord?
[23:58:35] <lizmat> gfldex might know
