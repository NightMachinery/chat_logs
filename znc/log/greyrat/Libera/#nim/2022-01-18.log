[00:02:46] <arkanoid> Patitotective, qt + nimqml?
[00:03:22] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:3c25:ad98:c04c:c39d) (Remote host closed the connection)
[00:03:41] <FromDiscord> <Patitotective> when you say qt, do you mean actual c++ code?
[00:04:05] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:a3ad:4353:89f0:7a35)
[00:09:49] <FromDiscord> <01> what's your favorite framework for making native android apps?
[00:11:03] <FromDiscord> <Patitotective> In reply to @01 "what's your favorite framework": ~~kivy~~
[00:11:20] <FromDiscord> <01> nice
[00:11:29] <FromDiscord> <01> i don't meet a lot of people who use Kivy
[00:11:40] <FromDiscord> <Patitotective> actually i dont make mobile applications
[00:12:19] <FromDiscord> <Patitotective> but kivy seems the best mobile framework for python, dont know for nim
[00:13:22] <FromDiscord> <01> i'm not really asking in context of nim tbh
[00:13:40] <FromDiscord> <01> as i don't expect any viable framework for nim, maybe something that compiles to JS, but that's hardly "native"
[00:13:59] <FromDiscord> <Patitotective> gintro?
[00:15:00] <FromDiscord> <Elegantbeef> There are always webviews
[00:15:26] <FromDiscord> <Patitotective> https://github.com/Niminem/Neel
[00:18:16] <FromDiscord> <Elegantbeef> Ehh that uses chrome as a library
[00:19:08] <FromDiscord> <Elegantbeef> https://github.com/marcomq/nimview doesnt rely on chrome
[00:21:29] <FromDiscord> <Patitotective> also how is https://github.com/nim-lang/ui going? doesnt seem too active
[00:22:44] <FromDiscord> <HuskyHacks> Where can I find information on the linking options? Is there official documentation on static linking vs dynamic linking?
[00:25:43] <FromDiscord> <mratsim> In reply to @HuskyHacks "Where can I find": https://nim-lang.org/docs/nimc.html#dynliboverride‚Üµ‚Üµstatic means embedding the dependency in the app, dynamic means linking against the system DLL or .so (you can read any C documentation)
[00:26:02] <FromDiscord> <HuskyHacks> excellent, thank you for the ref
[00:36:20] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (Quit: Leaving.)
[00:45:20] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[00:54:26] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[00:56:40] <FromDiscord> <auxym> In reply to @Patitotective "also how is https://github.com/nim-lang/ui": The wrapped library itself is considered "mid-alpha" by its own readme and last commit was a year ago: https://github.com/andlabs/libui. I'd use wxnim personally...
[01:07:12] *** Joins: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com)
[01:07:23] <FromDiscord> <inv> I have a question: I have type T = object = a: byte, b: int‚Üµthen I have let v = seq[T]‚Üµ‚ÜµI want to make a template I can pass field name and to make smth like for example sum of fields a on the `v`. But I cannot find any good way - just to generate smth like sumA and sumB function, which does not look good
[01:18:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MC2
[01:20:41] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[01:20:43] <FromDiscord> <Elegantbeef> @inv\: There you go
[01:25:06] *** Quits: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com) (Remote host closed the connection)
[02:04:51] <FromDiscord> <sigkill> sent a code paste, see https://play.nim-lang.org/#ix=3MCg
[02:05:52] <FromDiscord> <Elegantbeef> They already do
[02:06:07] <FromDiscord> <Elegantbeef> But they're only predictable with `--gc:arc` or `--gc:orc`
[02:06:17] <FromDiscord> <sigkill> the doc describes them as upcoming
[02:06:20] <FromDiscord> <sigkill> is it just out of date?
[02:06:47] <FromDiscord> <Elegantbeef> the "new runtime" is  used with arc/orc so yes
[02:06:58] <FromDiscord> <Elegantbeef> Though the new runtime isnt defaulted yet so maybe not
[02:07:12] <FromDiscord> <mratsim> In 1.6 they are the default
[02:07:18] <FromDiscord> <mratsim> no?
[02:07:32] <FromDiscord> <mratsim> In reply to @Elegantbeef "But they're only predictable": also --gc:destructors üòâ
[02:08:02] <FromDiscord> <mratsim> In reply to @sigkill "the doc describes them": that was written 2 years ago.
[02:08:25] <FromDiscord> <Elegantbeef> is the new runtime defaulted in 1.6?‚Üµ(@mratsim)
[02:08:34] <NimEventer> New thread by Elcritch: Should constructors be `newObject` or `initObject`?, see https://forum.nim-lang.org/t/8819
[02:09:10] <FromDiscord> <sigkill> sent a long message, see http://ix.io/3MCi
[02:09:37] <FromDiscord> <mratsim> In reply to @Elegantbeef "is the new runtime": destructors are, as are seq and strings backed by destructors
[02:10:12] <FromDiscord> <Elegantbeef> Orc is arc + cycle collector
[02:10:38] <FromDiscord> <Elegantbeef> Hence the `O` indicating a cycle üòõ
[02:12:10] <FromDiscord> <mratsim> sent a long message, see http://ix.io/3MCj
[02:12:33] <FromDiscord> <mratsim> (edit) "http://ix.io/3MCj" => "http://ix.io/3MCk"
[02:12:54] <FromDiscord> <mratsim> (edit) "http://ix.io/3MCk" => "http://ix.io/3MCl"
[02:14:12] <FromDiscord> <mratsim> You can implement your own refcounting scheme, including with that elision like this:‚Üµ‚Üµhttps://github.com/mratsim/weave/blob/master/weave/cross_thread_com/flow_events.nim#L173-L201
[02:14:23] <FromDiscord> <mratsim> (edit) "scheme," => "scheme (say you need atomic refcounting),"
[02:25:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[02:48:17] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:51:47] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[04:04:55] *** Quits: ormiret (sid314108@id-314108.lymington.irccloud.com) (Ping timeout: 268 seconds)
[04:05:02] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:05:20] *** Joins: msirabella (~bnc@user/mjsir911)
[04:06:11] *** Quits: mjsir911 (~bnc@user/mjsir911) (Ping timeout: 268 seconds)
[04:06:19] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:06:47] *** Quits: Yardanico (~quassel@user/yardanico) (Ping timeout: 268 seconds)
[04:06:49] *** Joins: ormiret (sid314108@id-314108.lymington.irccloud.com)
[04:06:54] *** Joins: Yardanico_ (~quassel@2a01:4f8:c2c:df22::2)
[04:07:35] <NimEventer> New post on r/nim by OptimizedGarbage: Experience with Dr. Nim or other correctness-assurance techniques?, see https://reddit.com/r/nim/comments/s6js59/experience_with_dr_nim_or_other/
[04:10:08] <FromDiscord> <Rika> if you're writing a game you dont need formal proving id say......
[04:10:36] <FromDiscord> <Rika> though it certainly isnt a "do not"
[04:10:46] <FromDiscord> <Rika> just kinda a big time consumer
[04:17:51] *** Quits: krux02_ (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:27:40] <FromDiscord> <Patitotective> In reply to @auxym "The wrapped library itself": üëç
[04:41:52] <FromDiscord> <Patitotective> any clue?
[04:41:52] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MCN
[04:42:35] <FromDiscord> <Elegantbeef> There is no `wxnim` module
[04:42:42] <FromDiscord> <Elegantbeef> you want `import wxnim/wx`
[04:44:09] <FromDiscord> <Patitotective> Oh, thanks üôÉ
[04:45:59] *** Quits: NimEventer (~NimBot@78.47.140.224) (Remote host closed the connection)
[04:46:41] *** Joins: NimEventer (~NimBot@78.47.140.224)
[04:54:19] <FromDiscord> <congusbongus> I think if you use VSCode with nim extension it can autocomplete imports
[04:55:53] <FromDiscord> <Rika> nope
[05:36:18] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[05:36:31] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[05:44:38] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MCW
[05:45:39] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator/blob/master/src/slicerator.nim#L37-L40
[05:46:26] <FromDiscord> <Patitotective> üëç
[05:54:19] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[05:56:02] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:56:02] *** neurocyte0917090 is now known as neurocyte091709
[06:03:24] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[06:07:43] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:23:35] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:30:12] *** Joins: ejjfunky (~ejjfunky@125.164.21.65)
[07:15:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[07:17:18] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:21:48] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[07:23:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:51:56] <FromDiscord> <huantian> oh that's probably better than .reversed huh‚Üµunless one day reversed is lazy
[07:52:10] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:52:24] <FromDiscord> <Elegantbeef> It'll never be since it returns a sequence
[08:06:56] *** Quits: Figworm (FiggyWitIt@user/figworm) (Remote host closed the connection)
[08:08:07] *** Joins: Figworm (FiggyWitIt@user/figworm)
[08:17:02] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:53:51] <FromDiscord> <evoalg> slicerator ftw!
[08:55:03] <FromDiscord> <Elegantbeef> 100% of my users say the same, though you're 100% of my users üòõ
[09:08:24] <FromDiscord> <Rika> I‚Äôd probably use it IF I WERE PROGRAMMING
[09:36:01] *** Quits: ejjfunky (~ejjfunky@125.164.21.65) (Ping timeout: 256 seconds)
[09:53:42] <FromDiscord> <Elegantbeef> Shame would be a lot cooler if you were
[09:58:19] *** Joins: neocron (~NeoCron@p200300c4cf1b4400f695d81d4d068b5c.dip0.t-ipconnect.de)
[10:00:32] *** Quits: Doraemon (~NeoCron@p200300c4cf146c0091a78f8614b30205.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:20:57] <FromDiscord> <Rika> Aw shucks too bad I‚Äôm wasting my time
[10:56:01] *** Joins: PMunch (~PMunch@user/pmunch)
[11:35:15] <arkanoid> I really think arraymancer/datamancer should switch it's underlying memory model to apache arrow
[11:35:53] <arkanoid> All mayor data manipulation players are going in that direction
[11:43:38] <FromDiscord> <that_dude> What is it using right now, and how can I read about the differences?
[11:44:09] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[11:45:53] *** Quits: Figworm (FiggyWitIt@user/figworm) (Remote host closed the connection)
[11:58:04] <arkanoid> that_dude, the apache arrow model is described in it's own site. From what I know, the "numerical" based arrays are 1:1 between ArrayMancer <> Numpy <> Arrow, but strings are different among the three. Pandas now has a new "string[arrow]" type to use arrow memory model for strings, but Arraymancer doesn't do that and works with pointers
[11:58:40] <arkanoid> this piece of code works with --gc:refc but doesn't compile with --gc:arc, can you tell me how to fix? https://play.nim-lang.org/#ix=3ME7
[11:59:00] <FromDiscord> <Rika> Maybe worth pinging mratsim
[11:59:52] <arkanoid> Rika: https://play.nim-lang.org/#ix=3ME7
[11:59:54] <arkanoid> ups
[11:59:59] <arkanoid> Rika: https://github.com/mratsim/Arraymancer/issues/417#issuecomment-593155129
[12:01:45] <FromDiscord> <Rika> Ah I see
[12:01:59] <FromDiscord> <Rika> I‚Äôm not math enough to get into it
[12:03:40] <arkanoid> polars (rust), cudf (nvidia), pandas (python) .... https://arrow.apache.org/overview/
[12:15:02] *** Joins: Figworm (FiggyWitIt@user/figworm)
[12:16:00] *** Joins: jjido (~Denis@94.9.124.97)
[12:20:57] <NimEventer> New thread by Giaco: Setting finalizer on object hierarchy won't compile with --gc:arc, see https://forum.nim-lang.org/t/8820
[12:24:50] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[12:34:50] <FromDiscord> <mratsim> In reply to @arkanoid "I really think arraymancer/datamancer": The standard data layout is DLPack: https://github.com/dmlc/dlpack
[12:35:05] <FromDiscord> <mratsim> Arraymancer layout is compatible with Numpy, PyTorch and Tensorflow
[12:36:11] <arkanoid> mratsim, my experiments shows that that is true only for numerical data, but not string-based one, correct?
[12:37:13] <FromDiscord> <mratsim> With the Laser backend change at least at a low-level supports passing buffer in zero-copy mode between Arraymancer and others framework, to import a buffer you just need to set memowner to false: https://github.com/mratsim/Arraymancer/blob/master/src/arraymancer/laser/tensor/datatypes.nim#L38-L40
[12:37:47] <FromDiscord> <mratsim> In reply to @arkanoid "<@570268431522201601>, my experiments shows": It's not possible for strings. Memory representation of strings in Nim is different from C or Python
[12:39:44] <arkanoid> but wouldn't be possible to adopt arrow memory model for strings in Arraymancer? Numpy can do that: https://arrow.apache.org/docs/python/numpy.html
[12:41:08] <arkanoid> currently, working with strings dataset locks nim datascience experience into limited set of tools
[12:41:28] <FromDiscord> <mratsim> Sure, but there are very few algorithms that makes sense for strings in Arraymancer. It's more for Datamancer.
[12:42:27] <arkanoid> sure, I'm talking about Arraymancer as Tensor for Datamancer
[12:44:24] <arkanoid> I've already succeeded in zero-copy passing from arraymancer -> numpy -> arrow (looking for link right now) but that's just for numerical data. When I work with datasets, I always have some string labels somewhere
[12:44:31] <FromDiscord> <mratsim> I think the best would be to create a package for the core memory representation, Call it "I took an arrow in the nim" and Have Arraymancer only have the algorithm.
[12:46:00] <arkanoid> here https://github.com/SciNim/scinim/issues/8#issuecomment-991844883
[12:46:02] <FromDiscord> <Rika> LOL
[12:46:47] <FromDiscord> <mratsim> Either you wrap C/C++ like we did with flambeau https://github.com/SciNim/flambeau/blob/master/flambeau/raw/bindings/rawtensors.nim‚Üµ‚ÜµOr since it seems like Arrow is a versioned spec, you implement the spec from scratch.
[12:48:27] <arkanoid> well, there's https://arrow.apache.org/docs/format/CDataInterface.html, then arrow exposes C api via gobject and I've successfully wrapped it automatically with futhark https://github.com/PMunch/futhark/issues/6#issuecomment-986969310, but there's also manual wrapping https://nimble.directory/search?query=arrow
[12:51:04] <FromDiscord> <mratsim> It seems like a simple enough format to implement in a separate lib from scratch
[12:51:14] <FromDiscord> <mratsim> the spec goes into physical layout details like https://arrow.apache.org/docs/format/Columnar.html#fixed-size-list-layout
[12:51:31] <FromDiscord> <mratsim> We just need a library name cc @Vindaar @Clonkk .
[12:51:50] <FromDiscord> <mratsim> and time.
[12:52:25] <FromDiscord> <Rika> ~~Skynim~~
[12:52:33] <FromDiscord> <mratsim> lol
[12:52:36] <FromDiscord> <mratsim> Archer
[12:52:45] <FromDiscord> <mratsim> or if there is a "Archer king" we pick that name
[12:53:02] <FromDiscord> <Elegantbeef> Sterling
[12:53:18] <FromDiscord> <Elegantbeef> Someone get the sterling reference please
[12:53:30] <FromDiscord> <amadan> phrasing
[12:53:40] <FromDiscord> <amadan> or do we not do that anymore?
[12:53:41] <FromDiscord> <Rika> Apollo? It‚Äôs a common name of course
[12:53:42] <FromDiscord> <Elegantbeef> Ehhh
[12:54:02] <FromDiscord> <Rika> Oh sweet ‚ÄúApollo stays the serpent Python‚Äù
[12:54:03] <FromDiscord> <Rika> Lmfao
[12:54:14] <FromDiscord> <Rika> Slays
[12:54:16] <FromDiscord> <Clonkk> A native implementation of the Arrow specs would be dope‚Üµ(@mratsim)
[12:54:19] <FromDiscord> <Rika> I typed stays and I don‚Äôt know why
[12:54:35] <FromDiscord> <Elegantbeef> Just call it fletching cause it gets scinim where they want to go
[12:54:35] <arkanoid> Narrow
[12:55:15] <FromDiscord> <Elegantbeef> Damn ark with the genius "add the first letter of Nim to the word" üòõ
[12:55:43] <PMunch> Narkanoid
[12:55:49] <FromDiscord> <Clonkk> Quiver ? Fleche (to follow Flambeau footstep of french wordplay) ?‚Üµ(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[12:55:59] <FromDiscord> <Rika> Narco xd
[12:56:02] <FromDiscord> <Elegantbeef> He's not a nark
[12:56:10] <FromDiscord> <Rika> Quiver is a common name
[12:56:19] <FromDiscord> <Rika> I believe Apache has something named that
[12:56:37] <FromDiscord> <Clonkk> Go full meta then and call it `U+02192`
[12:56:51] <FromDiscord> <Clonkk> (unicode for right arrow)
[12:56:52] <arkanoid> reminds me Narc knight https://www.youtube.com/watch?v=CEdv1VEaogA
[12:57:16] <FromDiscord> <Rika> In reply to @Clonkk "Go full meta then": Very catchy name
[12:57:31] <FromDiscord> <Rika> Hey do you use that library with numbers for a name
[12:57:34] <FromDiscord> <Clonkk> Simple to remember as well
[12:57:40] <PMunch> Haha :P
[12:58:35] <FromDiscord> <Rika> Lul Arrowmancer
[12:58:50] <FromDiscord> <Clonkk> rofl
[12:59:08] <FromDiscord> <Clonkk> Isn't it a bit old to add "-mancer" to everything \:D
[12:59:09] <PMunch> Hmm, I'm generalising the AVR stuff from Badger. I want to create a framework/library for this, but I'm struggling with a name
[12:59:25] <FromDiscord> <Rika> I mean wasn‚Äôt it supposed to integrate with Arraymancer
[12:59:28] <PMunch> I could call the framework Badger, and the keyboard firmware Badger-board or something
[13:00:58] <FromDiscord> <evoalg> I thought of a name but realized it was too cupid to mention
[13:01:55] <FromDiscord> <Clonkk> Call it `dart` like a small arrow, I'm sure noone has ever done that
[13:02:02] <FromDiscord> <Clonkk> No confusion possible here
[13:02:36] <arkanoid> PMunch: you can always go get some inspiration from old flash times https://www.youtube.com/watch?v=hGlyFc79BUE
[13:02:42] <FromDiscord> <mratsim> Or bolt
[13:03:31] <PMunch> arkanoid, the framework is called badger badger badger badger badger badger badger badger badger badger
[13:03:40] <PMunch> And the keyboard is called mushroom
[13:03:41] <arkanoid> make sense
[13:04:04] <arkanoid> and let me guess python api
[13:04:30] <FromDiscord> <evoalg> @mratsim you said "If you don't use sequences, strings and ref types, there is no garbage to collect" ... so if I only use arrays and such, could I use --gc=none? (remember you're talking to a baby who doesn't understand a lot)
[13:04:48] <FromDiscord> <Elegantbeef> Yes
[13:04:55] <FromDiscord> <Elegantbeef> I guess exceptions aswell
[13:05:08] <FromDiscord> <evoalg> would that make it possible faster?
[13:05:20] <FromDiscord> <Elegantbeef> Allocations generally arent the reason programs are slow
[13:05:23] <arkanoid>  also closures I guess, but unsure
[13:05:24] <FromDiscord> <Elegantbeef> Dumb allocations are
[13:06:00] <FromDiscord> <evoalg> so gc doesn't really slow things down much huh?
[13:06:30] <FromDiscord> <Elegantbeef> `ref`, `seq`,  `closure`, `string` exceptions, are all the things that are heap allocated and create garbage, i'm sure i'm missing stuff
[13:06:45] <FromDiscord> <evoalg> ahhhhhh
[13:06:52] <FromDiscord> <Elegantbeef> Well it can slow down but generally the issue isnt the GC as much as not reusing memory or designing the code intelligently
[13:07:08] <FromDiscord> <Elegantbeef> Aside from the allocation a seq and an array are going to be the same speed to iterate over
[13:07:34] <FromDiscord> <evoalg> oh!
[13:08:44] <FromDiscord> <Elegantbeef> The issue with reference over value type is generally do to the cache locality, `ref` throws values all over the heap so when you're iterating over them you have to go back to ram more often
[13:08:51] <FromDiscord> <Elegantbeef> And going back to ram vs. cache is slooooow
[13:08:56] <PMunch> The greatest speed increase is definitely in designing your program and algorithms
[13:09:16] <FromDiscord> <mratsim> In reply to @PMunch "The greatest speed increase": Nope, it's when you do no work üòâ
[13:09:38] <PMunch> Well if you're not doing work you're not getting anything done, so speed is 0
[13:09:43] <FromDiscord> <mratsim> no work > carefully designed work > accidentally quadratic
[13:09:43] <FromDiscord> <Elegantbeef> You're right, make all programs happen at compile time and cache every possible state!
[13:10:09] <FromDiscord> <mratsim> sometimes the only thing you can do is waiting (for the users, for the network, ...)
[13:10:22] <FromDiscord> <mratsim> async/await makes progress by waiting
[13:10:39] <FromDiscord> <mratsim> that's why you can handle millions of async tasks on a single CPU
[13:11:16] <FromDiscord> <Elegantbeef> "I dont get it my game's FPS is so low"‚Üµ"Have you tried giving inputs more often"üòõ
[13:11:20] <PMunch> Yeah async is really neat if your code spends most of its time sitting around waiting for hardware
[13:11:46] <PMunch> Hmm, that could be an interesting game concept
[13:12:14] <PMunch> The faster you type the higher the framerate, and typing is somehow the core input
[13:12:33] <PMunch> I guess it would be similar to SuperHot though
[13:12:58] <FromDiscord> <Elegantbeef> Superhot meets typing of thedead
[13:13:16] <PMunch> Typing of the Dead?
[13:13:34] <FromDiscord> <Elegantbeef> https://en.wikipedia.org/wiki/The_Typing_of_the_Dead
[13:13:49] <FromDiscord> <Elegantbeef> Arcade shooter turned into keyboard instruction
[13:14:09] <FromDiscord> <Clonkk> I propose a remake of Speed about a programmer who has a bomb in his computer and if he stops typing below a certain speed the bomb explode
[13:14:11] <FromDiscord> <mratsim> In reply to @evoalg "<@!570268431522201601> you said "If": it depends on what you want to do, if you want to avoid having to use NimMain when you use Nim as DLL, yes avoid those types and also top-level variable (i.e. wrap everything in a function)
[13:14:35] <FromDiscord> <Elegantbeef> Yea that's going right over Evo's head
[13:14:44] <FromDiscord> <evoalg> that's right üòâ
[13:14:57] <FromDiscord> <evoalg> I realized I shouldn't have asked the question
[13:14:58] <FromDiscord> <mratsim> so what do you want to do?
[13:15:04] <FromDiscord> <Elegantbeef> Evo is new to system programming in general
[13:15:10] <FromDiscord> <mratsim> meh, only way to learn is by asking questions
[13:15:16] <FromDiscord> <mratsim> to Google at least
[13:15:38] <FromDiscord> <Elegantbeef> Evo just wants to not write unoptimized code that he learned to write from python, but he should ask a profiler instead of sages üòõ
[13:15:59] <FromDiscord> <mratsim> oh, don't worry about GC then?
[13:16:04] <FromDiscord> <mratsim> (edit) "then?" => "then."
[13:16:23] <FromDiscord> <Clonkk> Yeah the rules is usually "if you don't understand GC, then don't worry about GC"
[13:16:25] <FromDiscord> <evoalg> ok ... I won't worry üôÇ
[13:17:16] <FromDiscord> <mratsim> GC is for squeezing the last 10%.
[13:17:17] <FromDiscord> <Elegantbeef> My rule is "If it's slow profile it, if it's not carry on until it is" üòõ
[13:17:42] <FromDiscord> <Elegantbeef> GC's get a bad wrap but they're nice generally
[13:17:51] <FromDiscord> <Clonkk> So... Make it work, then make it fast, then make it work after breaking everything to make it fast \:D ?
[13:18:02] <FromDiscord> <mratsim> basically, avoid quadratic behavior and then you're in good shape.
[13:18:04] <FromDiscord> <Elegantbeef> Yes
[13:18:45] <FromDiscord> <Elegantbeef> You left out "avoid sequtils for iterating"‚Üµ(@mratsim)
[13:19:08] <FromDiscord> <mratsim> When I need iteration, I write my own for loops üòâ
[13:19:24] <FromDiscord> <evoalg> or use slicerator ftw!
[13:19:46] <FromDiscord> <mratsim> Or https://github.com/numforge/loop-fusion
[13:19:53] <FromDiscord> <Elegantbeef> There we go üòõ
[13:20:12] <FromDiscord> <Elegantbeef> Fuck that's hard to read
[13:20:19] <FromDiscord> <Elegantbeef> `  forZip i, x in var a, y in b, z in c:` ah yes
[13:20:50] <FromDiscord> <Elegantbeef> I have my new dumb `chain` macro which probably isnt much better `for i, x in chain a.items.filter(i > a.len div 2).map(x  10):` but alas
[13:20:56] <FromDiscord> <mratsim> or zero-copy views: https://github.com/mratsim/constantine/blob/master/research/kzg_poly_commit/strided_views.nim#L219-L245
[13:21:24] <FromDiscord> <Elegantbeef> Depending what we're getting views into ... just use `[]` iterators
[13:21:56] <FromDiscord> <mratsim> I need to reverse, split or take 1 out of 2 very big integers.
[13:22:22] <FromDiscord> <Elegantbeef> Yea i just make toys so i dont need anything fancy
[13:22:51] <FromDiscord> <mratsim> that' the fancy part: https://github.com/mratsim/constantine/blob/master/research/kzg_poly_commit/strided_views.nim#L29
[13:22:56] <FromDiscord> <mratsim> (edit) "that'" => "that's"
[13:23:06] <FromDiscord> <mratsim> `lent UncheckedArray[T]`
[13:23:07] <FromDiscord> <Elegantbeef> I recall talking about it prior
[13:24:24] *** Quits: jjido (~Denis@94.9.124.97) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[13:26:52] <FromDiscord> <evoalg> yay I can capture ctrl-c ... https://stackoverflow.com/questions/54713213/how-do-i-handle-ctrl-c-interrupt-in-nim
[13:27:09] <FromDiscord> <Elegantbeef> Imagine if you couldnt üòõ
[13:27:49] <FromDiscord> <Rika> Vim would be infinitely easier to exit
[13:28:16] <FromDiscord> <Elegantbeef> Hey all modern vim walks you out
[13:29:54] <arkanoid> mratsim, how did you became so skilled in low lever data handling? Academic background or else?
[13:30:01] <FromDiscord> <Rika> If it has a prompt telling me how to properly exit, why can‚Äôt it just‚Ä¶ exit
[13:30:55] <FromDiscord> <Clonkk> What ?! Quitting is super easy `sudo pkill -9 vim`, boom you're done‚Üµ(@Rika)
[13:30:56] <FromDiscord> <Elegantbeef> I'm not UI-ologist‚Üµ(@Rika)
[13:31:36] <FromDiscord> <Rika> In reply to @Clonkk "What ?! Quitting is": Not in list of sudoers, incident reported, yada yada
[13:32:01] <FromDiscord> <mratsim> In reply to @arkanoid "<@570268431522201601>, how did you": I was bored.
[13:32:12] <FromDiscord> <Elegantbeef> I think you just kick the PC until the PSU cuts off
[13:32:15] <FromDiscord> <evoalg> at least vim gives you two different ways to exit
[13:32:36] <FromDiscord> <evoalg> oh three ways thx to beefy
[13:33:18] <FromDiscord> <mratsim> @arkanoid, @Clonkk @Vindaar ,‚Üµ‚ÜµSeems like Arrow is columnar only, i.e. it doesn't really support multidimensional Tensor: https://arrow.apache.org/docs/format/Other.html
[13:33:32] <FromDiscord> <Rika> I mean you could just wait for cosmic rays to kill vim with a memory error
[13:34:24] <FromDiscord> <mratsim> So you should be able to export/import with zero-copy but I can't use it for matrix or deep learning stuff.
[13:34:49] <FromDiscord> <evoalg> In reply to @Rika "I mean you could": as long as you have non-parity ram?
[13:34:55] <FromDiscord> <Clonkk> Well that sucks‚Üµ(@mratsim)
[13:35:15] <FromDiscord> <Rika> In reply to @evoalg "as long as you": Most don‚Äôt AFAIK, thanks Intel
[13:35:27] <FromDiscord> <Clonkk> Reminds me of the xkcd about the butterfly effect‚Üµ(@Rika)
[13:35:40] <FromDiscord> <Rika> They had a comic about it, huh
[13:35:44] <FromDiscord> <mratsim> In reply to @Clonkk "Well that sucks (<@570268431522201601>)": I do think it's a better data structure for dataframes though.
[13:36:02] <FromDiscord> <Clonkk> https://imgs.xkcd.com/comics/real_programmers.png‚Üµ(@Rika)
[13:36:12] <FromDiscord> <mratsim> representing nulls when you have an integer dataframes, or stuff that mixes integer and strings is such a pain.
[13:36:33] <FromDiscord> <mratsim> which is why I prefer to deal with deep learning üòâ
[13:36:45] <FromDiscord> <Rika> Emacs has the dumbest chord combo sometimes ngl
[13:36:50] <FromDiscord> <Rika> Can‚Äôt get used to it
[13:37:18] <FromDiscord> <Rika> I‚Äôll be honest I have a harder time exiting Emacs than Vim
[13:37:19] <FromDiscord> <Clonkk> Yeah I'm mainly concerned about numerical Tensor‚Üµ(@mratsim)
[13:37:46] <FromDiscord> <Clonkk> Well that's how on purpose because emacs wants you to do everything inside it‚Üµ(@Rika)
[13:37:59] <arkanoid> Clonkk, without string manipulation, you're keeping a lot of science application outside nim domain
[13:38:01] <FromDiscord> <mratsim> In reply to @Clonkk "Yeah I'm mainly concerned": for numerical tensor the standard is DLPack which is the same repr as Numpy, Pytorch, tensorflow
[13:38:02] <FromDiscord> <Elegantbeef> Emacs is an OS not a editor
[13:38:24] <FromDiscord> <Clonkk> Yeah, it's just not my personal use case‚Üµ(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[13:38:41] <FromDiscord> <mratsim> In reply to @arkanoid "<@805869905320214558>, without string manipulation,": sure but you don't need 3D strings manipulation.
[13:38:41] <FromDiscord> <Clonkk> I don't disagree
[13:39:02] <FromDiscord> <mratsim> which is Arraymancer domain, say when dealing with colored images.
[13:39:18] <arkanoid> mratsim, see Apache Arrow Tensor https://arrow.apache.org/docs/format/Other.html
[13:39:30] <FromDiscord> <mratsim> The page is empty
[13:39:35] <FromDiscord> <mratsim> there is no format for tensors.
[13:39:56] <arkanoid> empty? I see it with multiple devices
[13:40:11] <FromDiscord> <Rika>  https://media.discordapp.net/attachments/371759389889003532/932939917632348160/IMG_6167.png
[13:41:17] <FromDiscord> <mratsim> There is no format, <tensor body> doesn't tell me how to make that compatible with other implementations
[13:41:43] <FromDiscord> <Rika> Ah that‚Äôs what you mean
[13:42:02] <FromDiscord> <Elegantbeef> Yea it's a nothing burger without cheese
[13:42:13] <FromDiscord> <Elegantbeef> We give it padding, then wave our hands vaguely
[13:42:49] <FromDiscord> <Rika> I assume it‚Äôs as the prose says
[13:42:56] <FromDiscord> <Rika> Columnar spec with the change
[13:43:55] <FromDiscord> <Elegantbeef> > tensor (multidimensional array) stored as Binary values and having serialized metadata indicating the data type and shape of each value. This could be JSON like {'type'\: 'int8', 'shape'\: [4, 5]} for a 4x5 cell tensor
[13:44:33] <FromDiscord> <mratsim> yes but that's for IPC, there is no description of an in-memory representation.
[13:45:07] <arkanoid> it must be somewhere, arrow is made for interop
[13:45:26] <arkanoid> here's the C api (gobject based) for Tensor https://arrow.apache.org/docs/c_glib/arrow-glib/GArrowTensor.html
[13:45:34] <FromDiscord> <mratsim> And their columnar representation doesn't support Arraymancer use-cases.
[13:46:46] <FromDiscord> <mratsim> that's the same repr as Arraymancer. It doesn't seem to support null values or a mix of strings and ints and floats for example.
[13:47:13] <FromDiscord> <mratsim> so Arraymancer should be compatible with Arrow Tensor.
[13:47:41] <FromDiscord> <xx_ns> In reply to @Rika "If it has a": the same reason Ctrl-C doesn't close bash or zsh or any other interactive shell you're in
[13:47:48] <FromDiscord> <xx_ns> vim is also interactive, just like a shell
[13:48:11] <FromDiscord> <Rika> And plenty of other interactive programs do actually close with control+c
[13:48:40] <FromDiscord> <Rika> The shell idea is understandable, it‚Äôs the last program you want to close in a terminal
[13:48:54] <FromDiscord> <xx_ns> then those programs are incorrectly programmed üôÇ
[13:49:20] <FromDiscord> <xx_ns> if i press Ctrl-C, i want my half-completed command to be erased, not the entire shell closing
[13:49:29] <FromDiscord> <Rika> Then there are a majority more incorrect programs than ‚Äúcorrect‚Äù ones I assume
[13:49:54] <FromDiscord> <Rika> Where did you get this convention anyway
[13:50:55] <FromDiscord> <xx_ns> i mean that's just how programs which provide a shell (like bash, zsh, vim, etc) work
[13:51:05] <FromDiscord> <xx_ns> if my shell exited after i press ctrl-c, i would be so mad
[13:51:45] <FromDiscord> <Elegantbeef> Let's take the pragmatic approach that ctrl + C should behave like `:q` in vim
[13:51:53] <FromDiscord> <mratsim> In reply to @arkanoid "here's the C api": Internally it's just that: https://github.com/apache/arrow/blob/36791327fabb0a137bb448dc10aeefa745640cf6/c_glib/arrow-glib/tensor.cpp‚Üµ‚ÜµIt's pretty much this at the core: https://github.com/mratsim/Arraymancer/blob/master/src/arraymancer/laser/tensor/datatypes.nim
[13:51:55] <FromDiscord> <Elegantbeef> That way we can say it will warn you of work needing to be saved
[13:54:24] <arkanoid> mratsim: so you think Arraymancer 1D Tensor -> Apache Arrow Array, Arraymancer 2D+ Tensor -> Apache Arrow Tensor ? 
[13:55:29] <FromDiscord> <mratsim> Datamancer -> Apache Arrow, Arraymancer -> Numpy/PyTorch/Tensorflow compatible repr like today.
[13:55:45] <FromDiscord> <mratsim> and glue for conversion
[13:56:41] <arkanoid> mratsim, but aren't Datamancer columns Arraymancer Tensors? Sorry if this sounds too naive, just asking
[13:57:08] <FromDiscord> <xx_ns> In reply to @Rika "Then there are a": also idk what you mean by this - i just tested, and pretty much all of the interactive programs i use regularly like vim, midnight commander, nmtui etc do not exit on ctrl-c
[13:57:09] <FromDiscord> <mratsim> They are, but they support multiple backends
[13:57:23] <FromDiscord> <xx_ns> even in the linux kernel's `make menuconfig`, ctrl-c does not exit by default
[13:57:39] <FromDiscord> <Rika> Maybe I‚Äôm misremembering then
[13:58:02] <FromDiscord> <Rika> I still don‚Äôt know why you would have each program exit a different way from every other program
[13:58:16] <FromDiscord> <mratsim> or I'm confusing with the other dataframe package
[13:58:36] <FromDiscord> <mratsim> anyway I think Arrow would be a better backend than Arraymancer cc @Vindaar
[13:58:52] <arkanoid> ok, but if I fill a Datamancer dataset in future Arrow mode, will I be able to run Arraymancer ops on single columns just like now?
[13:58:57] <FromDiscord> <mratsim> just for dealing with mixed data and nulls
[13:59:38] <FromDiscord> <mratsim> No because algorithms must take into account nulls and mixed values (string in a int column) so need to be adapted anyway
[14:00:02] <FromDiscord> <mratsim> if the datatype however is consistent yes
[14:00:03] <arkanoid> got it, I guess the differences are just like from pandas to numpy
[14:00:19] <arkanoid> btw, the pandas roadmap is filled with arrow references https://pandas.pydata.org/docs/development/roadmap.html#apache-arrow-interoperability
[14:00:26] <FromDiscord> <mratsim> you can use fromBuffer and point to the memory buffer of Datamancer/Arrow.
[14:00:33] <arkanoid> and pandas dtype string[arrow] already works
[14:01:45] <FromDiscord> <mratsim> basically, while at a high-level DataFrames and Tensors look similar. Tensors mostly deal with numerical types (except for text analysis but in that case characters are converted to integers)
[14:01:57] <FromDiscord> <xx_ns> In reply to @Rika "I still don‚Äôt know": again, that's just the convention for most interactive programs. I think why vim gets most of the heat for it is because `$EDITOR` is set to `vi` or `vim` on most distros by default
[14:02:10] <FromDiscord> <xx_ns> which, now that i think about, doesn't even make sense because even `nano` doesn't exit with ctrl-c!
[14:02:15] <FromDiscord> <mratsim> there are many special stuff that require special dance in dataframes.
[14:02:27] <FromDiscord> <Rika> In reply to @xx_ns "again, that's just the": I am fine with it not being C-c, I mean why are they all different in the end
[14:02:53] <FromDiscord> <Rika> In reply to @xx_ns "which, now that i": It shows how to at the bottom at all times
[14:02:55] <FromDiscord> <xx_ns> i mean `q` is the most used convention but there are exceptions
[14:03:16] <FromDiscord> <Rika> Vim does too but at the middle and it disappears if you type a bit and people are inattentive
[14:03:18] <arkanoid> mratsim, sure, I see each array/tensor as single dataframe column
[14:03:25] <FromDiscord> <Clonkk> From what I read, `GArrowTensor` could perfectly well be implemented as a `TensorConcept`‚Üµ(@mratsim)
[14:03:26] <FromDiscord> <xx_ns> In reply to @Rika "Vim does too but": vim shows it if you hit ctrl-c
[14:03:28] <FromDiscord> <xx_ns> since forever i think
[14:03:39] <FromDiscord> <xx_ns> i use neovim personally so i'm not too sure on that
[14:03:41] <FromDiscord> <Rika> Ah yeah that too but noobs don‚Äôt know of C-c either
[14:03:46] <FromDiscord> <xx_ns> or plain vi on embedded devices
[14:03:52] <FromDiscord> <Rika> Which is why they get flak
[14:04:03] <FromDiscord> <Rika> And probably a bit of bandwagoning effect too
[14:04:27] <FromDiscord> <xx_ns> well, "noobs" shouldn't be using `vi` üòÅ  and if they do get stuck, it's a quick crash course for them
[14:04:38] <arkanoid> mratsim, sure I've already experienced fromBuffer usage here: https://github.com/SciNim/scinim/issues/8#issuecomment-990573363, for numerical buffers zero-copy Arraymancer <-> Numpy <-> Arrow already seems to work
[14:05:02] <FromDiscord> <xx_ns> In reply to @xx_ns "well, "noobs" shouldn't be": anyways this topic is more suited for #offtopic probably
[14:05:02] <FromDiscord> <Clonkk> Dataframe column can change size while Tensor base element are always of the same size usually‚Üµ(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[14:05:11] <FromDiscord> <mratsim> sent a long message, see http://ix.io/3MEL
[14:05:20] <FromDiscord> <Rika> In reply to @xx_ns "anyways this topic is": I don‚Äôt think we should continue it anyway
[14:05:23] <FromDiscord> <xx_ns> same
[14:06:24] <FromDiscord> <Elegantbeef> Battling to the death would've been cooler
[14:06:38] <FromDiscord> <mratsim> https://tenor.com/view/game-of-thrones-i-demand-a-trial-by-combat-tyrion-lannister-gif-16328126
[14:06:43] <arkanoid> Whats the advantage of Arrow vs DLPack? Why apache went from first to second?
[14:06:53] <FromDiscord> <mratsim> Apache went both.
[14:07:14] <FromDiscord> <mratsim> Arrow for DataFrames, DLPack for deep learning / multidimensional arrays / tensors
[14:08:07] <FromDiscord> <mratsim> DLPack doesn't need to deal with mixed datatypes (float+int+string), DLPack doesn't need to deal with empty values, and AFAIK it doesn't need to deal with strings.
[14:08:32] <FromDiscord> <mratsim> but it has to deal with multidimensional arrays.
[14:09:48] <FromDiscord> <mratsim> I think here it's important to specialize and provide glue between stuff.
[14:10:00] <arkanoid> I've worked a lot with pandas, and afaik each column (pd.Series) is a numpy array or ndarray with single dtype, can't fit multiple types in same column. But you can have null/mask
[14:10:55] <FromDiscord> <mratsim> you can fit multiple types, it just become "object" and use Python dynamic dispatch. Which you can't do in C/C++/Rust/Nim.
[14:11:10] <FromDiscord> <mratsim> they use that to good profit for null values
[14:11:21] <FromDiscord> <mratsim> that's why Apache Arrow validity map is interesting.
[14:11:40] <FromDiscord> <mratsim> it avoids dynamic dispatch in the common case of mixing integer + some missing.
[14:12:47] <FromDiscord> <mratsim> but asume you have integers and some missing, you can't use Arraymancer sum anymore unless you 0 the missing stuff. But in that case you can't use product, unless you "1" the missing stuff.
[14:13:16] <FromDiscord> <mratsim> so even algorithms need to be specialized to Apache Arrow/Dataframe specificities
[14:13:52] <arkanoid> in all my experience with multiple datasets and fixing datascience work written by non-programmers (been working in research lab for years) I've found almost zero Python Objects used as Dataframe cells, but yeah, lots of sparse Dataframes with nulls
[14:14:44] <FromDiscord> <mratsim> obviously you didn't get Excel data, where people are supposed to put a scale from 1 to 10 and suddenly you get "I took an arrow in the knee"
[14:14:45] <arkanoid> with pandas if you try to apply function to Series with nulls, you have first to replace them, or remove them, or impute them
[14:15:48] <FromDiscord> <mratsim> The worse being time field. Sometimes it's formatted as unix epoch, someties you get a random string.
[14:16:22] <FromDiscord> <Clonkk> unsanitized user input is hell to handle‚Üµ(@mratsim)
[14:16:41] <FromDiscord> <mratsim> so for data cleaning it's important to support mixed datatypes, which fortunately Arrow provide (except maybe on GPU)
[14:17:10] <arkanoid> well, the only reason python datascience world is live and kicking, is because numpy is forcing some static typing into python scripts, forcing order into chaos
[14:17:20] <FromDiscord> <Rika> In reply to @Clonkk "unsanitized user input is": Thank you for the idea: dataset from hell
[14:17:41] <FromDiscord> <Clonkk> Name of oyur punk rock band ?‚Üµ(@Rika)
[14:17:48] <FromDiscord> <Rika> Hey no lmfao
[14:18:53] <FromDiscord> <Clonkk> Well it was either that or your lastest thriller where a datascientist uses excel to solve murder
[14:19:32] <arkanoid> my experience is that pandas is used more for preprocessing "dirty" original data. Load dataset as is into pandas, turn strings into types, handle nulls, name columns -> start doing science
[14:19:44] <FromDiscord> <Rika> Imagine a world where every data set was denormal
[14:20:16] <FromDiscord> <Rika> No ID numbers, extra columns used for arrays, etc
[14:20:37] <FromDiscord> <mratsim> sent a long message, see http://ix.io/3MES
[14:22:35] <arkanoid> I think it would be really sweet. But what about strings? If Datamancer goes Arrow, it would be able to handle string data, but then a non-null string column would not be able to be converted zero copy to Arraymancer
[14:23:20] <arkanoid> btw, rust users uses polar, that based or arrow too > https://docs.rs/polars/latest/polars/
[14:24:51] <arkanoid> Arraymancer currently uses nim strings as element, am I right?
[14:27:18] <FromDiscord> <evoalg> I'm glad I found this to capture ctrl-c https://stackoverflow.com/questions/54713213/how-do-i-handle-ctrl-c-interrupt-in-nim ... because when I look at https://nim-lang.org/docs/system.html#setControlCHook%2Cproc%29 it doesn't have an example and I would have been stuck. It seems a lot of things in system & manual for Nim don't have examples, and it forces babies like me to ask questions on here (which is something I've never had to do wit
[14:28:28] <FromDiscord> <mratsim> In reply to @arkanoid "Arraymancer currently uses nim": yes
[14:29:02] <FromDiscord> <mratsim> In reply to @arkanoid "I think it would": It can. Arraymancer is generic other the type.
[14:29:08] <FromDiscord> <mratsim> (edit) "other" => "over"
[14:29:39] <FromDiscord> <mratsim> If the Apache Arrow String has public proc, at least for `$` you can store them in an Arraymancer Tensor.
[14:29:53] <arkanoid> but with copy
[14:29:58] <FromDiscord> <mratsim> no
[14:30:50] <FromDiscord> <mratsim> you just hand the `buffer: ptr UncheckedArray[ArrowBuffer]` to Arraymancer
[14:32:01] <arkanoid> well, that would make Datamancer + Arrow a perfect marriage, and Arraymancer would still be capable to do all the low level superspeedy black magic it curretly does when dealing with multidimensional numerical tensors!
[14:32:02] <FromDiscord> <mratsim> basically, copy is necessary only for ownership.
[14:32:30] <FromDiscord> <mratsim> ownership is necessary with Nim strings/sequences or GC-ed types.
[14:32:52] <FromDiscord> <mratsim> or if the original owner disappears and delete its memory.
[14:34:10] <arkanoid> yeah I throw my zero-copy interop experiments to valgrind to double check this
[14:35:07] <FromDiscord> <mratsim> When I said, Arraymancer can be just the algorithm, I mean this: https://github.com/mratsim/constantine/blob/master/research/kzg_poly_commit/strided_views.nim‚Üµ‚ÜµThis is a "strided view" for monodimensional arrays.‚ÜµIt only neds memory to be valid while it processes it.
[14:35:17] <FromDiscord> <mratsim> (edit) "neds" => "needs"
[14:36:14] <FromDiscord> <mratsim> This is a generalization of openarrays ;).
[14:37:54] <arkanoid> yeah I've rolled my own views on seqs for a side project, too
[14:39:08] <FromDiscord> <mratsim> so do you want to tackle implementing the Arrow format?
[14:39:33] <arkanoid> btw, I'd really happy to be able to load and preprocess science data via nim Datamancer, and them once it is in shape pass it to Arraymancer ad tensor for real work
[14:41:35] <FromDiscord> <Clonkk> If you want to tackle a Nim arrow implementation we can add you to the scinim Team if you're interested‚Üµ(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[14:44:05] <arkanoid> do you mean building wrappers to Arrow C api, or reimplement pyarrow memory model structures in pure nim?
[14:45:48] <FromDiscord> <mratsim> In reply to @arkanoid "do you mean building": implementing in pure Nim.‚ÜµI've looked at the spec and it seems like the same amount of work to do any of those.
[14:46:14] <FromDiscord> <Clonkk> Ideally the second one as native implementation are often easier to work with but I can live with a good wrapper
[14:46:37] <FromDiscord> <mratsim> I'm sure people wants to ingest CSV at compile-time üòâ
[14:47:03] <FromDiscord> <mratsim> the issue with the first one is distributing the C files along in Nimble.
[14:47:16] <FromDiscord> <mratsim> does it work well in Flambeau btw?
[14:47:44] <FromDiscord> <mratsim> For example BLAS on Windows is just hell.
[14:48:34] <FromDiscord> <Clonkk> The distribution of the shared library ? So far I haven't had any issue, it's just super slow to download torch on installation. If you mean in general, it still need works to have a higher level API easy to use‚Üµ(@mratsim)
[14:49:30] <FromDiscord> <Clonkk> That said we could use a way to distribute artifacts with Nimble
[14:51:31] <arkanoid> a third option would be to use futhark to build C bindings automatically at compile time and build nim wrapper on it
[14:52:17] <arkanoid> sure I think a 100% nim implementation over stable Arrow C interface would allow compile time magic
[14:54:28] <FromDiscord> <Clonkk> Well you'd still to distribute the source code that Futhark needs as input ? At which point I don't really see the benefit of distributing C source file and wrapping them each compile vs just distributing the Nim generated file‚Üµ(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[14:57:33] <arkanoid> well, you surely can distribute the generated nim file, but the original idea behind futhark afaik was to make it transparent and follow C api changes. What futhark need is -dev package installed and the equivalent info given by "pkg-config --cflags --libs arrow-glib"
[15:00:57] <arkanoid> in my experience, it takes a couple of seconds to generate nim bindings for C interface, and it caches the result to avoid doing that a second time if hash of the sources doesn't change. PMunch is the man here
[15:02:00] <arkanoid> can nim do foreign function call at compile time?
[15:02:54] <PMunch> Thank you, I'm so glad you like Futhark :) And yes you are correct, the idea was to build against the same library as you would if you where writing a C program. If you have a different version installed then Nim won't just silently assume an old version and introduce potential bugs.
[15:03:02] <PMunch> arkanoid, no, that's why I wrote Opir
[15:03:26] <PMunch> Opir is compiled and links against Clang, then Futhark calls Opir to actually do the C file parsing
[15:04:50] <arkanoid> yeah offline Opir -> json, compile time json -> futhark -> nim
[15:05:34] <PMunch> Yup
[15:06:16] <PMunch> The idea was that Futhark should be able to react to things defined in your project, however this is done mostly with a lot of `when defined` statements.
[15:06:46] <PMunch> It does allow you to do things like a renaming/retyping callback proc and other such things though
[15:09:21] <arkanoid> yes, I've used that feature a couple of times when futhark didn't wrote the correct thing. It happens on const/enums
[15:11:04] <PMunch> Yeah there are a couple known weaknesses
[15:11:14] <PMunch> Hopefully I can iron out most of them after FOSDEM
[15:11:50] <arkanoid> apart from that, I never had a showstopper so far. The only one time I though it was one, it ended up being a nim regression
[15:12:15] <FromDiscord> <hugogranstrom> A C wrapper is better than no wrapper, but a pure Nim arrow package would be the best. Windows is awful when it comes to getting -dev packages and such.
[15:13:38] <arkanoid> I do agree, and I also consider it doable but I fear not having enough low level knowledge to build it with same quality as other scinim packages. I may try, I'm interested in learning, but I will require support and patience on your side
[15:17:48] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:a3ad:4353:89f0:7a35) (Quit: adigitoleo)
[15:18:52] <FromDiscord> <vindaar> Seems like I've missed a lot these last couple of hours. Introducing a Arrow as a storage backend for Datamancer shouldn't be too much work, if the basic Arrow allocators are there. But it would certainly require us to use `fromBuffer` to hand the data to an Arraymancer tensor. Otherwise we end up missing things like `forEach` and add a few Arraymancer primitives (things like `concat` etc. that are used when resizing columns for example).
[15:19:17] <FromDiscord> <hugogranstrom> Quality-wise you can be rest assured you won't be too low, trust me üòâ If it works, it works. As simple as that üòÑ‚Üµ(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[15:20:43] <FromDiscord> <vindaar> So a separate `ArrowArray` thing that is used as a full replacement to the current Arraymancer.Tensor is a bit more work.Ideally of course we already want to have our concepts like `TensorConcept`, `VectorLikeConcept` etc. to have fully separate types (no `fromBuffer` needed), but still reuse most of the existing arraymancer, etc. code ü•∞
[15:22:47] <FromDiscord> <vindaar> (I'd vote for a pure Nim version too though)
[15:23:55] <FromDiscord> <Vindaar> In reply to @mratsim "We just need a": @mratsim already thinking about the important things, I see
[15:25:01] <arkanoid> point is: I basically know zero about the internals of Datamancer/Arraymancer, but if you say that I can start playing with Arrow data structures for nim without knowing them in advance, I'm in
[15:28:49] <FromDiscord> <vindaar> Internals about Datamancer / Arraymancer we can answer. Yeah, just start from the basic of implementing `type ArrowArray` (or whatever it may be called) according to the spec. That's needed anyway. Once that is implemented we worry about introducing it as a Datamancer backend!
[15:29:22] <FromDiscord> <vindaar> what's your github name again?
[15:31:13] <arkanoid> me: https://github.com/arkanoid87
[15:32:23] <FromDiscord> <vindaar> ah, thanks
[15:33:06] <FromDiscord> <vindaar> you have an invitiation
[15:37:03] <arkanoid> thanks!
[15:52:12] <FromDiscord> <mratsim> In reply to @vindaar "Seems like I've missed": forEach needs special handling of missing values in a DataFrame package anyway no?
[15:53:33] <FromDiscord> <mratsim> also was forEach made public?It's backend agnostic and the main difficulty of forEach is dealing with multidimension, arrows is straightforward regarding that: https://github.com/mratsim/Arraymancer/blob/61188413abb269471ff5cbf4b9326ddd3c2a38c7/src/arraymancer/laser/strided_iteration/foreach.nim
[15:53:40] <FromDiscord> <mratsim> no "import tensor"
[15:55:17] <FromDiscord> <vindaar> well, `forEach` itself doesn't really care about missing values etc. If one has missing values in a `float` column, they are just NaN and it's up to whatever the user does whether that's a problem or not. If it's an `object` column, we use a regular `for` loop anyway
[15:55:59] <FromDiscord> <vindaar> ah, indeed. Didn't think about that as we have it as part of the arraymancer repo nowadays‚Üµ(@mratsim)
[15:56:20] *** Joins: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21)
[15:57:25] <FromDiscord> <mratsim> I think Datamancer can just use a for loop for everything. For parallelization, I'll think it over but I happen to have written so many threadpools in the past 2 years, maybe I'll be able to write them eyes closed xD
[15:58:19] <FromDiscord> <vindaar> sure, it could
[15:58:34] <FromDiscord> <vindaar> but as `forEach` works and is here, I don't see why not \:P
[15:59:36] <arkanoid> I fear that adding arrow for you is an easy task, so easy that my effor would end up just being a toy compared to what you would do in 10 mins
[15:59:39] <FromDiscord> <mratsim> well I'm not the one maintaining Datamancer üòâ :p
[16:00:19] <FromDiscord> <mratsim> I think it's a weekend task at least not the IPC stuff, just the data format.
[16:00:37] <FromDiscord> <mratsim> There might be some time spent figuring out the unions and strings and lists
[16:00:44] <FromDiscord> <vindaar> arkanoid "easy" is a very relative term. It may or may not be hard, but I agree with mratsim. It's at least a weekend project
[16:01:19] <FromDiscord> <vindaar> If it really was easy and little work, I would have done it already, btw (as arrow came up a few times before)
[16:01:42] <arkanoid> probably me again and again :P
[16:01:49] <FromDiscord> <mratsim> I don't think it's hard inthe sense that the specs spells out stuff quite clearly.
[16:02:56] <FromDiscord> <vindaar> not only you ;)
[16:03:00] <FromDiscord> <mratsim> I would do stuff with seq first, and then for the ptr UncheckedArray (otherwise no zero-copy possible and not compatible with C) we can figure that out later.
[16:08:48] <FromDiscord> <enthus1ast> in a macro, how can i get the object type implementation of a ref object
[16:09:33] <FromDiscord> <enthus1ast> on an object type i can just call\: ty.getTypeImpl()   , but on a ref this returns\: ref Foo2\:ObjectType
[16:10:07] <FromDiscord> <enthus1ast> i want to get the referenced object type details
[16:19:09] <FromDiscord> <mratsim> In reply to @enthus1ast "i want to get": You sacrifice a goat to sigmatch.nim
[16:22:00] <FromDiscord> <mratsim> I think this works for ref objects: https://github.com/status-im/nim-stew/blob/8a405309c660d1ceca8d505e340850e5b18f83a8/stew/shims/macros.nim#L184
[16:23:58] <FromDiscord> <enthus1ast> puh
[16:24:16] <FromDiscord> <enthus1ast> thank you @mratsim  will have a look
[16:25:59] <FromDiscord> <mratsim> In reply to @enthus1ast "thank you <@570268431522201601> ": feel free to vent here once done: https://github.com/nim-lang/RFCs/issues/44
[16:27:07] <FromDiscord> <mlokis> Would someone listen to my idea of algorithm? I usually find flaws when i talk about my idea.
[16:30:41] <FromDiscord> <mratsim> In reply to @mlokis "Would someone listen to": don't ask to ask, just ask üòâ
[16:31:20] <FromDiscord> <01> ye, just go ahead
[16:36:03] <FromDiscord> <mlokis> sent a long message, see https://paste.rs/H19
[16:41:57] *** Joins: rockcavera (~rc@192.12.112.202)
[16:41:57] *** Quits: rockcavera (~rc@192.12.112.202) (Changing host)
[16:41:57] *** Joins: rockcavera (~rc@user/rockcavera)
[16:44:13] <FromDiscord> <mlokis> I came up with an idea that owner of the item should be the deepest dependency it has, so if you have modules `[a, b, c, d]` and connections `[a<-b, a<-c, b<-d, c<-d]` and you have tuple of `(i, j, k)` instantiated from `d` where `[i from a, j from b, k from b]`. Since there are no cyclic dependency allowed, either `b` nor `c` can possibly reuse the tuple. So we have two lowest dependencies and ownership of tuple will be taken by `d`.
[16:44:46] <FromDiscord> <mlokis> (edit) "b]`." => "c]`."
[16:48:27] <FromDiscord> <mlokis> @01 @mratsim  is this explanation good? Does it make sense?
[16:49:29] <FromDiscord> <01> no clue
[16:50:41] <FromDiscord> <mlokis> In reply to @01 "no clue": i had one fundamental mistake here now its edited. Still nothing?
[16:52:15] <FromDiscord> <mratsim> so some kind of shortest path?
[16:52:25] <FromDiscord> <mlokis> no
[16:52:36] <FromDiscord> <mratsim> makes sense for me. That's what I do for task dependencies.
[16:52:48] <FromDiscord> <mlokis> finding shortest path is not a problem
[16:53:35] <FromDiscord> <mratsim> Ah no sorry, I randomize the owner: https://github.com/mratsim/weave/blob/master/weave/cross_thread_com/flow_events.nim#L54-L57
[16:53:35] <FromDiscord> <mlokis> question is that lets say you make a change in `b`, you have to have guarantee that it has ownership of all types that depend on it
[16:54:10] <FromDiscord> <mratsim> so you have a direct acyclic graph?
[16:54:11] <FromDiscord> <mlokis> and that no two objects have ownership of same item
[16:54:21] <arkanoid> I have to handle a "not null-terminated string", not sure if handle it as a cstring and them remove the last byte, or go UncheckedArray[cchar]
[16:54:23] <FromDiscord> <mratsim> a tree if no cycle
[16:54:42] <FromDiscord> <mratsim> In reply to @arkanoid "I have to handle": seq[byte]
[16:54:48] <FromDiscord> <mratsim> or seq[char]
[16:55:04] <arkanoid> but I am writing a C interface
[16:55:10] <FromDiscord> <mratsim> if you use a cstring or a string you'll have a read past buffer at one point
[16:55:28] <FromDiscord> <mratsim> then openarray[char]
[16:55:38] <FromDiscord> <mratsim> that's converted to pointer+len
[16:55:47] <arkanoid> it's not an argument, but an object field
[16:56:41] <FromDiscord> <mratsim> cstring as fields will likely lead you to point to invalid memory. I would use ptr UncheckedArray[char]
[16:57:50] <FromDiscord> <mratsim> string processing in C requires to rewrite the whole stdlib anyway because relying on `\n` is just hyper inefficient
[16:57:59] <arkanoid> yeah, I went the same way. Thanks. Is there difference from char and cchar here?
[16:58:20] <FromDiscord> <mratsim> I don't know cchar
[16:58:32] <FromDiscord> <mratsim> there is already signed char and unsigned char so shrug
[16:58:48] <arkanoid> cchar* {.importc: "char", nodecl.} = char
[16:59:01] <arkanoid> in system.nim
[16:59:06] <FromDiscord> <mratsim> char is fine.
[16:59:55] <FromDiscord> <mlokis> nim being transpiler makes everything so weird
[17:00:16] <FromDiscord> <enthus1ast> ü§™
[17:01:11] <PMunch> ...
[17:01:45] <FromDiscord> <mlokis> i think i isolated what the algorithms inputs and outputs should be so am gonna prot it in python and see.
[17:02:16] <arkanoid> if nim is a transpiler, also gcc and clang are a transpilers
[17:03:05] <FromDiscord> <enthus1ast> please no transpiler / compiler discussion again...
[17:03:38] <FromDiscord> <mlokis> In reply to @arkanoid "if nim is a": i don't think transpiling into ir that is designed for it and some programming language is quite same thing
[17:03:52] <FromDiscord> <mlokis> (edit) "In reply to @arkanoid "if nim is a": i don't think transpiling into ir that is designed for it and some programming language is quite ... same" 03added "the"
[17:03:53] <arkanoid> sorry, I never experienced such a discussion before here, I'll just say: badger badger mushroom
[17:04:58] <FromDiscord> <mlokis> why cant we play nim here
[17:05:39] <FromDiscord> <mlokis> am pretty sure you can make nim minigame with discord bot
[17:06:55] <FromDiscord> <mlokis> sent a code paste, see https://paste.rs/Dc3
[17:07:45] <FromDiscord> <Rika> OH BOY
[17:07:53] <FromDiscord> <Rika> SOMEONE RESET THE TRANSPILER DAYS COUNTER
[17:08:17] <NimEventer> New thread by Planetis: How to modify and redistribute software written with MIT license?, see https://forum.nim-lang.org/t/8822
[17:08:20] <PMunch> Haha, we should add that to NimBot :P
[17:09:13] <PMunch> By the way: https://peterme.net/is-nim-a-transpiler.html
[17:11:05] <FromDiscord> <enthus1ast> core wars with nim script would be awesome \:)
[17:11:16] <FromDiscord> <Rika> that would be hard
[17:11:28] <FromDiscord> <Rika> i mean i cant imagine how it would work
[17:12:26] <FromDiscord> <enthus1ast> yeah must be a little different, but the idea of let two (or more) nimscripts fight each other is tempting
[17:13:52] <PMunch> Core wars?
[17:14:02] <PMunch> Who's maintaining NimBot?
[17:14:31] <PMunch> And is the code public?
[17:15:38] <FromDiscord> <Rika> https://en.wikipedia.org/wiki/Core_War
[17:15:48] <FromDiscord> <Rika> cool little minigame pitting programs against each other
[17:16:26] <FromDiscord> <Rika> ok so what if
[17:16:32] <FromDiscord> <Rika> redcode nim backend
[17:16:50] <FromDiscord> <enthus1ast> or vm
[17:17:19] <FromDiscord> <enthus1ast> ah backend so that i can run on the MARS?
[17:17:19] <PMunch> Ah I see
[17:17:24] <FromDiscord> <Rika> or idk maybe just a program that can generate from nim-subset code
[17:38:18] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[17:38:35] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[17:45:08] <arkanoid> mratsim, sorry for the naive question, but I'm unsure if I should write Arrow structs with manual memory management in mind (ptr instead of ref), or say in nimland and avoid unsafe
[17:49:31] <arkanoid> s/say/stay
[17:50:51] <arkanoid> I mean, the api says "It is intended for the base structure to be stack- or heap-allocated by the consumer. In this case, the producer API should take a pointer to the consumer-allocated structure."
[17:51:28] *** Joins: arkurious (~arkurious@user/arkurious)
[17:52:05] <arkanoid> the way I handle this depends on the requirements of the consumer, or generally the intended nim software design
[18:06:35] <FromDiscord> <mratsim> In reply to @arkanoid "<@570268431522201601>, sorry for the": If we want them to zero-copy into CuDF and other stuff from the Python ecosystem or C++ (say if gradient boosted trees package accept Arrow format) need to use the same in-memory representation as Apache Arrow, so manual memory management
[18:06:57] <FromDiscord> <mratsim> but that can be easily changed later.
[18:07:11] <arkanoid> ok, thanks, going into manual mode then
[18:08:25] <FromDiscord> <mratsim> I would go with Nim mode at first, layout the stuff. And then consider which libraries it's best to be compatible with (say CuDF, pandas/Dask?)
[18:08:43] <FromDiscord> <mratsim> and then look at those library what do they do with the arrow buffer we pass to them
[18:09:02] <FromDiscord> <mratsim> do they take ownership and in that case they need malloc-ed stuff from us.
[18:12:49] <szahid> is there something like "void" or none? 
[18:14:01] <FromDiscord> <mratsim> sent a code paste, see https://play.nim-lang.org/#ix=3MG4
[18:14:30] <FromDiscord> <mratsim> just an example, I don't have the full spec in my head.
[18:15:16] <FromDiscord> <mratsim> when we need to do manual memory management we can figure out what to replace ref ArrowDF if it's even needed
[18:15:27] <FromDiscord> <mratsim> and the buffer
[18:15:30] <FromDiscord> <Rika> In reply to @szahid "is there something like": in what context? yes there is void
[18:18:55] <arkanoid> mratsim: the docs clearly says that the consumer has to allocate memory on heap or stack and pass a pointer of it to the producer, that is responsible of filling it. On release, the consumer calls release on the struct he owns and then the producer chains all the release recursively until done
[18:25:59] <arkanoid> in manual mode would be "var foo: ArrowArray (or malloc if heap is desired); createArray(foo.unsafeAddr); foo.release", in nim mode would be completely different
[19:12:28] <FromDiscord> <01> anyone here knows Haxe?
[19:12:50] <FromDiscord> <01> is there a more widely adopted language than Haxe, that's meant to be compiled to a lot of targets?
[19:13:11] <FromDiscord> <Rika> why are you asking here
[19:13:13] <FromDiscord> <Rika> in a nim discord
[19:14:01] <FromDiscord> <enthus1ast> @01\: you could try nim
[19:14:03] <FromDiscord> <enthus1ast> \:)
[19:14:22] <FromDiscord> <01> sorry
[19:14:28] <FromDiscord> <01> i thought i did it on off-topic
[19:14:46] <FromDiscord> <Rika> well what's stopping you from using nim
[19:15:00] <FromDiscord> <01> small ecosystem
[19:15:05] <FromDiscord> <01> nothing else really
[19:16:42] <FromDiscord> <Rika> would you fancy rust or go
[19:16:49] <FromDiscord> <Rika> or zig i dunno
[19:16:54] <FromDiscord> <01> go is large, which is great
[19:17:06] <FromDiscord> <01> but a lot of interface{}
[19:17:06] <FromDiscord> <Rika> but?
[19:17:11] <FromDiscord> <01> from experience
[19:17:14] <FromDiscord> <Rika> yes
[19:17:18] <FromDiscord> <01> also poor support for fp
[19:17:19] <FromDiscord> <enthus1ast> c  / c++
[19:17:29] <FromDiscord> <enthus1ast> large mature eco system
[19:17:41] <FromDiscord> <01> ehh, yea, no
[19:17:49] <FromDiscord> <01> no standardized package manager/build tool
[19:17:50] <FromDiscord> <Rika> i would not wish such upon even my enemies
[19:17:51] <FromDiscord> <01> big time pass
[19:17:54] *** Quits: toothlessgear (2c15493d69@user/toothlessgear) (Remote host closed the connection)
[19:17:54] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[19:18:08] <FromDiscord> <01> C/C++ is a mess imo
[19:18:24] <arkanoid> C++ is, C well, less
[19:18:27] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[19:18:35] <FromDiscord> <Rika> not much less
[19:18:42] *** Joins: toothlessgear (2c15493d69@user/toothlessgear)
[19:18:45] <arkanoid> yeah, but yet 
[19:20:53] <FromDiscord> <enthus1ast> think c++ got a package manager recently
[19:20:59] <FromDiscord> <01> they have it sure
[19:21:04] <FromDiscord> <01> just not a standardized one
[19:21:06] <FromDiscord> <01> afaik
[19:21:15] <FromDiscord> <01> Conan, and whatever Microsoft made
[19:21:40] <FromDiscord> <01> vcpkg, whatever that is
[19:22:19] <FromDiscord> <enthus1ast> i still can recommend nim, the eco system is not too bad, if something is missing you could quickly write it yourself, or wrap a library. I personally can live quite good with nim
[19:24:36] <FromDiscord> <Rika> if you cant get over the issues of other languages' ecosystem then ignore it first and weigh the other issues
[19:24:52] <FromDiscord> <01> wdym
[19:26:18] <FromDiscord> <Rika> if the ecosystem of each language arent "desirable" one way or another, look at the other stuff
[19:27:05] <FromDiscord> <enthus1ast> What do you miss?
[19:27:10] <FromDiscord> <01> ecosystem is just about the most important part though
[19:27:42] <FromDiscord> <Rika> yes, but you cannot make a decision on it at all
[19:27:43] <FromDiscord> <Rika> so ignore it
[19:40:29] <FromDiscord> <mratsim> In reply to @arkanoid "<@570268431522201601>: the docs clearly": let's move to the #science channel, are you in it?
[19:41:26] <arkanoid> do you mean #nim-science?
[19:42:50] <arkanoid> well, maybe you're no talking about irc
[19:44:55] <FromDiscord> <Rika> yes
[19:45:00] <FromDiscord> <Rika> they mean in discord
[19:46:03] <arkanoid> never used discord in my life, worth trying? I'm too old for this new stuff
[19:47:02] <FromDiscord> <Rika> no
[19:47:17] <FromDiscord> <Rika> stay on irc if you have no issues with it
[19:48:39] <arkanoid> configuring discord, let's try
[19:48:51] <FromDiscord> <Rika> hes a goner..
[19:49:10] <arkanoid> ?
[19:50:05] <FromDiscord> <Arkanoid> yo
[20:03:40] <FromDiscord> <Rika> hello
[20:29:41] <FromDiscord> <Patitotective> Is there another _npeg_ indentation example? https://github.com/zevv/npeg/blob/master/misc/indent.nim does not success (`ok=false`) and it doesn't actually capture the data into a table
[20:42:28] <FromDiscord> <gnu+linux user> In reply to @demotomohiro "You need to write": thonkuu
[21:11:44] <arkanoid> is it just me that once imported nimpy I got `.` template polluting the scope and I cant call normal nim procs anymore?
[21:25:52] <PMunch> Hmm, is there a way I can define something like `const ext* = <something>` so that `import ext/implementation` would import `implementation` from what `ext` was defined as?
[21:32:31] <PMunch> I guess I could create dummy files in `ext` which imported based on the same rule..
[21:32:39] <PMunch> But that seems a bit tedious..
[21:33:27] <nrds> <06Prestige99> Hey PMunch, have you been running into issues with nimsuggest while using nimlsp recently?
[21:33:58] <PMunch> Nothing in particular comes to mind
[21:34:09] <PMunch> But my nimlsp might be compiled from an old version of Nim
[21:34:29] <nrds> <06Prestige99> I've opened https://github.com/nim-lang/Nim/issues/19371 think it's been broken since 1.6.2
[21:34:38] <nrds> <06Prestige99> but I haven't heard of others having the same problem so far
[21:37:32] <FromDiscord> <demotomohiro> Create a macro that takes `ext: static[string]` and produce`import ext/implementation` statement?
[21:37:57] <PMunch> Prestige, full disclosure I barely use any of the NimLSP features :P
[21:38:54] <nrds> <06Prestige99> D:
[21:39:44] <PMunch> @demotomohiro, well yes, I could always create a `importImplementation` macro which expanded to `import ext/implementation`
[21:40:37] <PMunch> But I want the user code to look like `import mylibrary; import ext/implementation` and mylibrary would then define `ext` in a way that the second import works
[21:40:39] <nrds> <06Prestige99> It's just the diagnostics which are having issues, which are reported by nimsuggest. So likely just a nimsuggest bug
[21:40:49] <nrds> <06Prestige99> or multiple nimsuggest bugs
[21:42:07] <PMunch> I could create all the files I want to define in a folder name `ext` which then imported mylibrary and then essentially turned into an include for whatever file I want, but that means I have to create all the files as dummies..
[21:43:52] <PMunch> Prestige, it definitely looks like a nimsuggest bug
[21:47:37] <nrds> <06Prestige99> well at least I'm not crazy
[21:47:55] <nrds> <06Prestige99> hopefully someone looks into this before 2.0 lol
[21:48:49] <PMunch> Have you tried running a bisect on it?
[21:50:12] <nrds> <06Prestige99> Not yet, just tried different nim versions and found it started after 1.4.8
[21:52:15] <nrds> <06Prestige99> I was going to bisect it but couldn't get nim to compile, will have to mess around with it a bit
[21:56:42] <PMunch> I wish there was an auto-bisect script shipped with Nim
[21:57:08] <PMunch> I had one that I used previously, but I think I've lost it..
[22:01:38] *** Quits: cyraxjoe (~joe@2806:109f:13:79ff:201:2eff:fe80:7df4) (Ping timeout: 252 seconds)
[22:02:11] *** Joins: cyraxjoe (~joe@2806:109f:13:9f03:201:2eff:fe80:7df4)
[22:20:27] <PMunch> Ugh..
[22:20:55] <PMunch> Seriously, why can't I import the `os` module to use it in a macro when I'm compiling against AVR
[22:21:02] <PMunch> Such a stupid limitation..
[22:37:19] <PMunch> Is there a way to have a package specific config file?
[22:38:01] <PMunch> I would like to have a config.nims file for my package that gets used when the package is used
[22:38:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[22:45:48] <PMunch> There really should be a way to import a module only for use in macros
[22:45:53] <PMunch> Like `static: import os`
[22:58:08] <arkanoid> if I have an object attribute and a function taking that object with same name, and I want to keep them as is, how can I tell nim to call the function istead of getting the attribute?
[22:58:58] <PMunch> By using parenthesis
[22:59:54] <arkanoid> doesn't seem to work. I actually have an iterator named like an attribute of the object it iterates
[23:02:23] <PMunch> Hmm, curious
[23:02:27] <PMunch> I mean you can call it
[23:02:42] <PMunch> Like so: https://play.nim-lang.org/#ix=3MHL
[23:03:53] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[23:04:21] <PMunch> Oh great.. You can't put an include in a `when compiles` statement either..
[23:04:40] <PMunch> So I can't hackily test if a file exists that way..
[23:13:11] <PMunch> So I can't import os and check if a file exists, because of a stupid limitation. And I can't try to include the file and check if that compiles because of some stupid limitation.
[23:16:07] <PMunch> And I can't patch the os module from my library to use my own version instead.
[23:16:41] <PMunch> And copying the stuff in the os module doesn't work because it relies on the compiler to override the implementation, and that is done on a per-module basis
[23:19:54] <FromDiscord> <Patitotective> Are there some alternatives to _npeg_?
[23:20:13] <PMunch> @Patitotective, what are you looking for?
[23:20:24] <FromDiscord> <Patitotective> offside-rule
[23:20:31] <FromDiscord> <Patitotective> (edit) "offside-rule ... " 03added "(indentation matters)"
[23:20:53] <PMunch> You should be able to do that with npeg, no?
[23:21:41] <FromDiscord> <Patitotective> The _npeg_ example of indentation is poor so I don't know how to implement it
[23:22:15] <FromDiscord> <Patitotective> (edit) "it" => "a fully functional indentation parser"
[23:22:32] <PMunch> And instead of trying to figure it out you're looking for another parser which magically handles indentation?
[23:22:58] <FromDiscord> <Patitotective> In reply to @PMunch "And instead of trying": Both, meanwhile I'm reading this https://michaeldadams.org/papers/layout_parsing_2/LayoutParsing2-2014-haskell-authors-copy.pdf
[23:24:29] <PMunch> Hmm, if I remember my npeg right I think you basically need to have a matcher that matches zero or more "  " at the beginning of your line, and then in the match you pass that and your state object to a procedure which counts the length of that match and figures out where it goes
[23:25:14] <NimEventer> New Nimble package! servclip - Manage your clipboard remotely, see https://gitlab.com/lurlo/servclip
[23:26:34] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3MHR
[23:27:39] <PMunch> Not quite sure I understand what you mean
[23:28:56] <FromDiscord> <Patitotective> In the example https://github.com/zevv/npeg/blob/master/misc/indent.nim there is only one level indentation, what happens with two or more?
[23:29:06] <FromDiscord> <Patitotective> (edit) "level indentation," => "indentation level,"
[23:32:58] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:33:30] <FromDiscord> <Patitotective> In reply to @PMunch "Not quite sure I": Should I share an example?
[23:42:27] <PMunch> It should work fine
[23:44:24] <PMunch> Hmm, it fails to match properly thought
[23:44:27] <PMunch> though*
[23:44:32] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 240 seconds)
[23:45:43] <FromDiscord> <Patitotective> Also I would like to see the implementation to generate an actual table, but I guess it's kinda complex because it requires object variants
[23:45:48] <PMunch> I mean p.match(data).ok returns false
[23:48:11] <PMunch> It seems to fail on the `* !1` condition, that's strange
[23:49:02] <FromDiscord> <Patitotective> Maybe because it `&indentIn` and `&('\n'  indentOut)`?
[23:49:14] <FromDiscord> <Patitotective> (edit) "Maybe because it `&indentIn` and `&('\n'  indentOut)`? ... " 03added "(Doesn't consume the indentation)"
[23:49:19] <FromDiscord> <Patitotective> (edit) "indentOut)`?" => "indentOut)`" | "indentation)" => "indentation)?"
[23:49:24] <FromDiscord> <Patitotective> (edit) "(Doesn't" => "(doesn't"
[23:50:46] <PMunch> Hmm, that might be it
[23:52:41] <PMunch> Yeah, that seems to be it
[23:53:06] <FromDiscord> <Patitotective> And the solution is to remove the `&`, or?
[23:53:18] <PMunch> No, that makes it fail much earlier
[23:56:14] <PMunch> It almost handles two layers of indentation
[23:56:44] <FromDiscord> <Patitotective> In reply to @PMunch "It almost handles two": Why almost?
[23:57:03] <PMunch> You can't drop two levels at the same time
[23:57:31] <PMunch> This works: http://ix.io/3MI3
[23:57:40] <PMunch> But remove the "t=10" statement and it fails
