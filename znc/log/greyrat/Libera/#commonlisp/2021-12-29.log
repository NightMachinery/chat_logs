[00:01:07] *** Quits: nature (~nature@45.32.235.173) (Quit: leaving)
[00:07:31] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:11:02] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[00:27:52] *** Quits: xsperry (~xs@user/xsperry) ()
[00:33:14] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[00:42:23] *** hayley is now known as no-defun-allowed
[00:44:18] *** no-defun-allowed is now known as hayley
[00:55:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:07:56] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Remote host closed the connection)
[01:08:21] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[01:09:15] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Client Quit)
[01:09:28] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[01:18:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:22:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:28:19] <phoe> Xach: where can I file bugs for vecto?
[01:29:57] *** Joins: Algernon666 (~Algernon6@88.124.69.179)
[01:30:28] <phoe> oh, I see, there's a github repository not linked in the main readme.
[01:33:27] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e1:639c:485e:1cbd:31d4:31ad)
[01:33:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:36:29] *** Quits: varjag (~user@188.95.247.249) (Quit: ERC (IRC client for Emacs 28.0.50))
[01:37:19] *** Quits: Algernon666 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[01:43:29] <scymtym> phoe: at some point using McCLIM's raster image backend might become easier :) (but admittedly, the output quality would be worse since image patterns not sampled with bicubic interpolation at the moment)
[01:45:20] <phoe> scymtym: you can grab some of my bicubic code if you feel like it
[01:45:30] <phoe> (if it makes anything easier, that is)
[01:46:09] <scymtym> i have something planned for sampling pattern, so it might come in handy, thanks
[01:46:17] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[01:47:41] <phoe> OK - feel free to use the stuff from my PR; imago uses LLGPL just like McCLIM so there shouldn't be any license incompatibility
[01:50:25] <scymtym> yeah
[01:59:58] *** Joins: notzmv (~zmv@user/notzmv)
[02:22:49] <phoe> ...holy cow
[02:23:17] <phoe> I composed my code for rotating simple bitmaps with the bicubic interpolation method from resizing
[02:23:25] <phoe> I got bicubic rotation for free!
[02:23:30] * phoe parties
[02:23:58] *** Joins: amb007 (~a_bakic@109.245.225.179)
[02:24:59] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[02:25:39] *** Joins: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs)
[02:31:27] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[02:33:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Ping timeout: 240 seconds)
[02:40:43] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:78:1d7b:130a:7a28)
[02:40:44] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e1:639c:485e:1cbd:31d4:31ad) (Read error: No route to host)
[02:41:18] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e1:639c:e531:d354:8b2a:42b9)
[02:42:02] *** Joins: Oladon (~olad@98.43.81.226)
[02:45:00] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:78:1d7b:130a:7a28) (Ping timeout: 240 seconds)
[02:53:35] *** Quits: dnaeon (~dnaeon@user/dnaeon) (Ping timeout: 250 seconds)
[02:53:58] *** Quits: pve (~pve@188-67-159-68.bb.dnainternet.fi) (Quit: leaving)
[02:57:02] *** Joins: pjb (~pjb@user/pjb)
[03:04:19] *** Quits: cosimone (~user@93-47-231-248.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[03:08:09] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Quit: Quit)
[03:08:25] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[03:13:31] *** Quits: Xach (~xach@user/xach) (Ping timeout: 250 seconds)
[03:15:26] *** Joins: igemnace (~ian@user/igemnace)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[03:17:36] *** Joins: Jing (~hedgehog@2604:a840:3::1067)
[03:19:15] *** Joins: Xach (~xach@66-63-89-62.static.suscom-maine.net)
[03:22:59] *** Joins: beach` (~user@2a01:cb19:150:3400:c341:38a2:d2af:9009)
[03:23:52] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e1:639c:e531:d354:8b2a:42b9) (Read error: Network is unreachable)
[03:27:02] *** Quits: beach (~user@2a01:cb19:150:3400:33eb:15c9:ffbb:3421) (Ping timeout: 240 seconds)
[03:31:24] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[03:32:38] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[03:39:26] *** Quits: rito_ (~rito_gh@45.112.243.151) (Ping timeout: 268 seconds)
[03:41:22] *** Joins: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl)
[03:45:44] *** lisper29 is now known as vibs29
[03:49:39] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Quit: disconnected)
[03:49:58] *** vibs29 is now known as lisper29
[03:50:50] *** Joins: eddof13 (~textual@2600:4040:4029:5000:4123:cda2:78c0:609c)
[04:21:46] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:34:10] <Spawns_Carpeting> how can I apply a function passed into a function on a variable?
[04:34:22] <Spawns_Carpeting> for some reason I am getting an error "undefined function 1"
[04:34:41] <Spawns_Carpeting> the variable the function is working on is 1
[04:35:08] <Spawns_Carpeting> https://bpa.st/FAAA
[04:35:16] <Spawns_Carpeting> i tried using funcall as well
[04:35:53] <hayley> (funcall fn e)?
[04:35:59] <hayley> The same goes for (funcall p e)
[04:37:20] <Spawns_Carpeting> oh yeah it does work, i must have messed it up by putting a quote on the p
[04:37:24] <Spawns_Carpeting> thanks
[04:42:03] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[04:42:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:43:28] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[04:49:43] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[04:50:58] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:59:26] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[05:01:07] *** Quits: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) (Remote host closed the connection)
[05:04:53] *** Quits: amb007 (~a_bakic@cable-94-189-168-59.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[05:05:21] *** Quits: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[05:05:42] *** Joins: amb007 (~a_bakic@109.245.225.179)
[05:07:56] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[05:08:32] *** Joins: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs)
[05:08:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[05:10:11] *** Quits: fazz234234368 (~fazz23423@c-73-235-104-195.hsd1.ca.comcast.net) (Quit: Connection closed)
[05:17:40] *** Joins: jpl01 (~user@2001:16b8:49f8:1200:911a:cfc1:87a3:5d36)
[05:25:08] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[05:25:12] <hobo> say I wanted to hack at croatoan. I'd like to fork/clone the repo on github and have my current project use that one instead of what quicklisp has. what's a good way of going about doing that?
[05:29:30] <trocado> clone into local-projects or somewhere else where adsf can find it and run (ql:register-local-projects)
[05:32:50] *** Quits: eddof13 (~textual@2600:4040:4029:5000:4123:cda2:78c0:609c) (Quit: Textual IRC Client: www.textualapp.com)
[05:33:04] <trocado> actually ql:*local-project-directories* will show you the expected directories
[05:34:58] *** Joins: eddof13 (~textual@2600:4040:4029:5000:40a7:771f:cdfd:21ff)
[05:42:51] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650) (Ping timeout: 245 seconds)
[05:48:25] <hobo> does asdf use local projects first over distributions?
[05:50:08] <dbotton> hobo, yes
[05:50:14] <hobo> perfect
[05:50:18] <hobo> thank you, trocado and dbotton
[05:51:10] <dbotton> if it previously compiled a version from a distribution you may need to clear out the old one first
[05:51:27] <dbotton> at least I have noticed that on occasion
[05:53:21] <dbotton> (asdf:system-source-directory 'your-stuff) to see directory that your-stuff is being pulled from
[05:57:46] <hobo> awesome, thank you
[05:59:57] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[06:08:19] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:09:27] *** Quits: jpl01 (~user@2001:16b8:49f8:1200:911a:cfc1:87a3:5d36) (Remote host closed the connection)
[06:29:16] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[06:30:41] *** Quits: green__ (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 250 seconds)
[06:50:00] *** Joins: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[06:52:53] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[07:04:39] *** Joins: asen_ (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[07:05:17] *** Quits: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Read error: Connection reset by peer)
[07:15:23] *** beach` is now known as beach
[07:19:15] <ns12> Does anyone know how I can configure ASDF to ignore a single directory in /usr/share/common-lisp/source/? I want to ignore /usr/share/common-lisp/source/cl-asdf/ because it contains a version of ASDF that is older than the one bundled in my version of SBCL.
[07:20:23] <mfiano> That seems like attacking the wrong problem.
[07:20:33] *** Joins: kotshie (~kotshie@68.72.208.140)
[07:21:06] <ns12> I want to ignore it otherwise ASDF will always complain: WARNING: You are using ASDF version 3.3.5 (probably from (require "asdf") or loaded by quicklisp) and have an older version of ASDF 3.3.4 registered at #P"/usr/share/common-lisp/source/cl-asdf/asdf.asd".
[07:21:17] <mfiano> Instead, figure out why it is there. Also from what I understand, ASDF will refuse to ever downgrade itself.
[07:23:03] <ns12> mfiano: It's there because the administrator has installed it. The administrator has installed it because it is used by other people. Only I have an upgraded version of SBCL that happens to bundle a newer version of ASDF.
[07:24:57] <mfiano> I think that is an unfortunate mistake of theirs. Perhaps worth discussion.
[07:25:33] <ns12> mfiano: Who does "theirs" refer to? The authors of ASDF?
[07:25:41] <mfiano> The administrator
[07:26:41] *** Quits: karlosz (~karlosz@136.56.98.53) (Ping timeout: 256 seconds)
[07:28:23] <ns12> mfiano: I don't think it's a bad decision. In Ubuntu 20.04, SBCL is version 2.0.1, which bundles an old version of ASDF. cl-asdf in Ubuntu 20.04 is version 3.3.4, which is newer than the one bundled in SBCL 2.0.1 (which is why cl-asdf was installed by the administrator). I have SBCL 2.1.9, which bundles ASDF 3.3.5.
[07:28:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:29:08] *** Joins: Oladon (~olad@98.43.81.226)
[07:29:18] <mfiano> I think it's always a mistake to install ASDF systems globally, especially ASDF.
[07:30:13] <ns12> What's the recommended method then?
[07:31:15] <beach> Good morning everyone!
[07:31:18] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[07:31:25] <mfiano> If you need to upgrade asdf, do it locally as to not interfere with other users. Besides, other users may very well expect their code to behave as it would on the consumers of the code's machines, ie; what SBCL ships.
[07:32:46] <ns12> mfiano: Okay. From what I understand, you suggest two methods: (1) use the ASDF that comes with SBCL, or (2) let each user manually add ASDF to their ~/common-lisp/ directory.
[07:32:48] <mfiano> You can check the ASDF manual on how to modify the ASDF registry's search path per-user. Then you can install your new asdf there for yourself.
[07:34:46] <mfiano> As for 1) I suggest that as the default, so users can opt-in to upgrading.
[07:34:59] <ns12> mfiano: Thank you. I have already read the manual. I didn't find anything obvious for modifying the registry search path to exclude /usr/share/common-lisp/source/cl-asdf/, hence my questions.
[07:35:19] <ns12> Okay. I will try to convince the administrator to uninstall cl-asdf.
[07:36:11] <mfiano> There may be a solution if you cannot convince them, but I don't know how.
[07:37:52] <ns12> Alternatively, I could just disregard ASDF's warning message, since it has no material effect on the execution of programs.
[07:38:17] <mfiano> Or you could muffle the specific condition that is signalled from your sbclrc
[07:38:39] <mfiano> But I think that is just ignoring the problem and may do more harm than good.
[07:42:10] <ns12> beach: Good morning!
[07:43:00] <Spawns_Carpeting> is "let" in common lisp implemented as a macro that expands to a lambda?
[07:43:07] <ns12> mfiano: Thank you. I will experiment with ASDF's registry search path configurations a little more.
[07:43:19] <Bike> Spawns_Carpeting: not usually, no
[07:43:25] <ns12> Spawns_Carpeting: Isn't that an implementation detail?
[07:43:33] <Spawns_Carpeting> I suppose it would be ns12
[07:43:35] <Bike> it would be an implementation detail
[07:43:56] <Spawns_Carpeting> i am curious if impling it as a macro is common though
[07:44:11] <mfiano> ns12: Sure
[07:44:31] <Nilby> ns12: It's probably on debian, where if I remember right sbcl requires cl-asdf so you probably can't get rid of it, but you can just run sbcl with --no-sysinit and load your own asdf and quicklisp.
[07:45:07] <Spawns_Carpeting> i am asking because I am at the point of implementing let inside of my personal lisp (which is not common lisp exactly but follows a little bit)
[07:45:44] <Bike> Spawns_Carpeting: it is not common. common lisp has more complex semantics about variable binding than scheme, so the macro definition would not be as straightforward.
[07:45:49] <mfiano> I don't think it is common
[07:46:08] <mfiano> I wouldn't want to see that implementation when I macroexpand-all
[07:46:11] <Spawns_Carpeting> do you think I should try to do what scheme does for my language then?
[07:46:26] <Spawns_Carpeting> simple is a goal just for the sake of not getting stuck and giving up
[07:46:40] *** Quits: kotshie (~kotshie@68.72.208.140) (Quit: kotshie)
[07:46:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:47:01] <ns12> Nilby: What does --no-sysinit do? SBCL man page says "Do not load a system-wide initialization file". But the default /etc/sbclrc file is essentially blank.
[07:47:11] <Bike> Spawns_Carpeting: i don't see any reason not to.
[07:47:31] <Alfr> ns12, make sure the directory is not listed in asdf:*central-registry* that's always searched before the source-registry is consulted.
[07:48:16] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[07:48:21] <ns12> Alfr: asdf:*central-registry* is NIL since I am not using that method to add search paths.
[07:49:40] <Spawns_Carpeting> thats strange to have sbclrc blank
[07:49:48] <ns12> mfiano: "I wouldn't want to see that implementation when I macroexpand-all" - Why not? Is it because of inefficiency?
[07:49:57] <Alfr> ns12, just wanted to mention it, in case that asdf you want to get rid of advertises itself using that method. But since it's nil, all is well. :)
[07:50:26] <ns12> Spawns_Carpeting: My /etc/sbclrc only contains two lines:
[07:50:29] <ns12> ;;; -*- lisp -*-
[07:50:34] <ns12> ;;; System-wide startup file for sbcl
[07:51:13] <mfiano> ns12: Personal preference. I think the LET syntax is easier to read, and Common Lisp is different than Scheme.
[07:51:18] <Spawns_Carpeting> mine sets some variables and then loads "/etc/common-lisp/gentoo-init.lisp"
[07:51:47] <Spawns_Carpeting> the comment says it sets up ASDF2
[07:56:01] <ns12> Nilby: https://packages.debian.org/bullseye/sbcl lists no cl-asdf dependency. Perhaps it was in an older version of Debian?
[07:56:23] <beach> We hit an interesting issue when we tried to implement LET with LAMBDA, namely that (let ((&rest 234) (x 345)) ...) is not the same as ((lambda (&rest x) ...) 234 345)
[07:57:13] <Spawns_Carpeting> is defun implemented as a lambda?
[07:57:28] *** Joins: kotshie (~kotshie@68.72.208.140)
[07:57:35] <Spawns_Carpeting> i was thinking in my lisp/scheme thing it would be a lambda set to a symbol
[07:57:51] <beach> Spawns_Carpeting: DEFUN is essentially (setf (fdefinition <name>) (lambda (...) ...))
[07:58:27] <Spawns_Carpeting> thats about what I was thinking yeah, thats pretty darn cool
[07:59:07] <beach> But I don't know what you mean by "set to a symbol".
[07:59:19] <Nilby> ns12: Yes, that was probably for an older version.
[08:00:58] <ns12> Nilby: Ah too bad. That means I can't use the --no-sysinit method, since it gives no effect when the system-wide initialization file does not do anything.
[08:01:03] *** Joins: semz (~none@user/semz)
[08:01:41] <Nilby> I guess the asdf is probably probably coming from the sbcl contrib
[08:02:41] <ns12> https://github.com/sbcl/sbcl/tree/sbcl-2.1.9/contrib/asdf
[08:09:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:13:37] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[08:17:48] <Nilby> ns12: I guess asdf won't downgrade, so you can just do the typical wanring muffling
[08:19:25] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 268 seconds)
[08:28:55] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:29:28] <Nilby> I wonder how many people use the complicated asdf configuration file setup
[08:34:17] *** Joins: dre (~dre@2001:8003:c932:c301:e3ff:3fa1:c907:2ee4)
[08:38:27] *** Quits: eddof13 (~textual@2600:4040:4029:5000:40a7:771f:cdfd:21ff) (Quit: Textual IRC Client: www.textualapp.com)
[08:55:12] *** Joins: Oladon (~olad@98.43.81.226)
[08:58:55] *** Joins: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4)
[09:09:10] *** Quits: asen_ (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Read error: Connection reset by peer)
[09:09:24] *** Joins: asen_ (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[09:12:57] *** Joins: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net)
[09:18:42] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[09:20:33] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:26:14] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:31:13] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:35:29] *** Joins: alfonsox (~quassel@103.92.42.90)
[09:42:28] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Read error: Connection reset by peer)
[09:42:46] *** Joins: taiju (~taiju@215.185.218.133.dy.bbexcite.jp)
[09:44:18] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Quit: ERC (IRC client for Emacs 27.1))
[09:46:57] *** Quits: taiju (~taiju@215.185.218.133.dy.bbexcite.jp) (Ping timeout: 240 seconds)
[09:49:27] *** Quits: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:51:00] *** Joins: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4)
[10:03:05] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[10:04:55] *** Joins: notzmv (~zmv@user/notzmv)
[10:05:37] *** Quits: eddof13 (~textual@2600:4040:4029:5000:b8ad:3a64:4453:45f4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:06:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:17:07] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[10:29:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[10:30:27] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:30:27] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Read error: Connection reset by peer)
[10:38:16] *** Quits: dre (~dre@2001:8003:c932:c301:e3ff:3fa1:c907:2ee4) (Quit: Leaving)
[10:40:15] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca)
[10:40:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:46:26] <ns12> How do I download the IRC logs for this channel?
[10:47:29] <jackdaniel> I think that tymoon.eu doesn't have option to download logs
[10:47:35] <jackdaniel> Shinmera: is that correct? ^
[10:49:20] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[10:52:23] <mfiano> whitequark does
[10:54:05] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 256 seconds)
[10:55:31] <ns12> mfiano: https://libera.irclog.whitequark.org/commonlisp/index/ gives 401 Authorization Required.
[10:56:18] <ns12> Perhaps I am using the wrong protocol?
[10:57:57] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-49-142-112-220-24.dsl.bell.ca) (Ping timeout: 240 seconds)
[11:03:15] <Shinmera> jackdaniel: It does, though you need to manually iterate over time regions. https://irclog.tymoon.eu/api/chatlog/get?server=libera&channel=%23commonlisp&format=rendered
[11:03:37] <Shinmera> Using the from/to arguments to the above.
[11:04:35] <mfiano> ns12: Then wget -mpk -np http://libera.irclog.whitequark.org/commonlisp/
[11:10:45] <jackdaniel> Shinmera: I see, thanks
[11:13:21] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[11:15:30] *** Quits: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net) (Quit: karlosz)
[11:23:25] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[11:24:03] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 250 seconds)
[11:26:12] *** Joins: amk (~amk@109.255.169.126)
[11:48:37] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[11:49:24] *** Joins: rgherdt_ (~rgherdt@ip5f5af447.dynamic.kabel-deutschland.de)
[11:54:14] *** Joins: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net)
[11:58:14] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[12:04:02] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:07:56] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[12:07:59] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 252 seconds)
[12:11:30] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:12:25] *** Joins: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11)
[12:15:59] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[12:18:16] *** Joins: epony (epony@user/epony)
[12:25:58] *** Quits: karlosz (~karlosz@76-204-58-159.lightspeed.rlghnc.sbcglobal.net) (Quit: karlosz)
[12:26:50] *** Quits: asen_ (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Quit: Leaving)
[12:27:26] <unixlisp> That is what someones want from CLOS: (create-instance 'foo nil (:slot0 (list 0))) (:slot1 1))) (create-instance 'bar foo (:slot1 2)))  (g-value bar :slot0) => (0) implemented in KR more than 30 years ago.
[12:31:33] <unixlisp> (create-instance 'foo nil (:slot0 (list 0)) (:slot1 1)) (create-instance 'bar foo (:slot1 2))
[12:37:56] <phoe> huh?
[12:38:11] <phoe> what's 'foo, what's NIL in that context?
[12:38:24] <unixlisp> instance
[12:39:35] <phoe> I don't get it - where was the class FOO defined? are we using classes at all?
[12:40:29] <phoe> why is NIL in that syntax?
[12:40:32] <phoe> which code is that from?
[12:40:33] <jackdaniel> phoe: kr is a mambo jumbo used by garnet to microoptimize instance access in early 90' - whether it did optimize it is questionable. either way I wouldn't engage in this discussion (based on prior experience)
[12:40:49] <phoe> jackdaniel: oh! thanks for the context
[12:40:56] <unixlisp> phoe: foo bar both are prototype, there are no class/instance difference.
[12:41:46] <phoe> unixlisp: oh, so a prototype-based object system
[12:42:09] <unixlisp> yeah
[12:43:22] <unixlisp> (eq (g-value foo :slot0) (g-value bar :slot0))  => T
[12:45:31] *** Joins: pve (~pve@87-93-199-246.bb.dnainternet.fi)
[12:45:41] *** Joins: pjb (~pjb@user/pjb)
[12:45:48] <unixlisp> unlike class, values of slots may be inherited.
[12:48:04] <phoe> I now know of KR, COrbit, and sheeple as prototype object systems available in CL - whereas sheeple is available in QL for sure
[12:48:48] <unixlisp> they are all usable.
[12:50:15] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 256 seconds)
[12:50:59] <beach> But they are distinct from CLOS, so I think "That is what someones want from CLOS" is a strange thing to say.
[12:52:15] <beach> I mean, CLOS is a thing.  It has documentation, and a specification.  So it makes no sense to "want <something> from CLOS" that is not in that specification.
[12:53:15] <unixlisp> yes. It does not exit in CLOS.
[12:53:18] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[12:53:35] <unixlisp> different OO model.
[12:53:41] <beach> I think we knew that.
[12:53:45] <hayley> Well, the designers of CLOS weren't very Self-ish.
[12:54:01] <beach> Heh.
[12:58:27] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:954d:e862:3eb8:da67)
[13:03:42] <unixlisp> That kind of OO prototype-based has a very early root in AI: Actor, Frame, etc.
[13:05:14] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[13:12:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[13:13:11] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:19:39] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[13:22:01] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[13:23:56] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[13:29:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:32:53] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[13:33:33] <phoe> is there any kind of ARRAY-OPERATIONS or similar trick that I can use to "rotate" a 2D array by 90/180/270 degrees?
[13:34:51] <phoe> Example behavior that I am thinking of, #2A((1 0 0) (2 0 0) (3 0 0)) → #2A((0 0 0) (0 0 0) (1 2 3))
[13:40:53] <jackdaniel> fun fact: this is one of the excercises in ansi common lisp  (pg book)
[13:41:25] <phoe> :(
[13:41:33] <phoe> I know, I'd simply like to avoid reinventing the wheel
[13:41:37] <pjb> phoe: https://termbin.com/m6ib
[13:41:39] <jackdaniel> https://common-lisp.net/project/cl-graph/documentation/cl-mathstats-package/index.html
[13:42:25] <phoe> jackdaniel: pjb: I forgot to note that I'm looking for a pre-existing operator (or composition of them) in order to reuse it, rather than writing my own
[13:42:58] * phoe investigates mathstats
[13:43:00] <pjb> Well, the CL version is: https://termbin.com/rz7x ; the previous one was the emcs lisp version.
[13:43:37] <jackdaniel> phoe: I'm not certain it has it, but exported symbols include degrees (and most importantly, the function transpose-matrix)
[13:44:40] <phoe> jackdaniel: judging by the docs alone, degrees are useful for conversion between radians and degrees (these functions are available) and... nothing more? hm
[13:45:31] <MichaelRaskin> Degrees are also useful for making sense when printed out
[13:45:43] <phoe> also, transposition is useful, but only for the 180° case (unless I miss some simple trick)
[13:46:40] <jackdaniel> 90° + reflection I believe
[13:48:22] <phoe> oh wait, yes - I transposed across the wrong diagonal in my mind
[13:48:33] <phoe> ...still, I need a reflection operator now :D
[13:55:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:56:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:57:16] *** Lord_of_Life_ is now known as Lord_of_Life
[14:13:46] *** Joins: rito_ (~rito_gh@45.112.243.151)
[14:26:50] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[14:40:04] *** Joins: varjag (~user@188.95.247.249)
[14:43:40] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[14:44:55] *** Joins: mingus (~jan-magnu@auth-147-138.anyconnect.uib.no)
[14:56:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:08:53] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:954d:e862:3eb8:da67) (Ping timeout: 268 seconds)
[15:11:28] *** Joins: VincentVega (~user@212.97.4.33)
[15:12:49] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[15:17:44] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 252 seconds)
[15:32:35] *** Quits: Jing (~hedgehog@2604:a840:3::1067) (Remote host closed the connection)
[15:33:48] *** Joins: Jing (~hedgehog@125.105.9.103)
[15:35:29] *** Quits: Jing (~hedgehog@125.105.9.103) (Client Quit)
[15:38:59] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:41:33] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[15:43:25] <mfiano> phoe: You would need to know if that matrix is composed of column or row vectors.
[15:44:15] <phoe> mfiano: I think the only thing that is going to differ in that case is the sign of the degree integer
[15:44:43] <mfiano> You really don't want to be using degrees for such computations.
[15:46:05] <mfiano> It also depends if you want to do a local space rotation or not
[15:46:27] <phoe> mfiano: I think you're overcomplicating my problem
[15:48:08] <phoe> for 2D arrays the four possibilities for the rotation I am thinking of is #2A((1 2 3) (4 5 6) (7 8 9)) and #2A((7 4 1) (8 5 2) (9 6 3)) and #2A((9 8 7) (6 5 4) (3 2 1)) and #2A((3 6 9) (2 5 8) (1 4 7))
[15:48:32] <mfiano> Well to answer your question, for a 2D array/matrix rotation it is just multiplying a rotation matrix denoting a rotation around the Z axis by an Euler angle, but your existing matrix.
[15:48:33] <phoe> for more dimensions you need to specify the axis
[15:48:53] <mfiano> s/but/by/
[15:49:11] <mfiano> Right, a 2D has a hard-coded Z axis for the matrix to multiply yopurs by
[15:49:27] <mfiano> Not that matrix multiplication is not comutative though - order is important.
[15:49:30] <mfiano> Note*
[15:53:27] <phoe> yes, a 3D array will have three axes that you can make 90° rotations in, and so on
[15:53:40] <phoe> might be tricky to get this working for an arbitrary number of arrays, but it should be doable
[15:54:41] <mfiano> I think you mean a 4x4 2d array
[15:58:29] <mfiano> A series of axis rotations in N-space requires a 2D array of size NxN. If you want to encode position, scale, and rotation, it's N+1xN+1. The former is a rotation matrix. The latter is a transformation matrix.
[15:58:35] <mfiano> The algorithm is very simple though.
[15:59:28] <phoe> no, I actually mean a 3D array - it's possible to do a rotation of e.g. a Rubik's cube by 90° in three axes
[15:59:39] <ck_> maybe this is a joke going over my head, but mfiano is talking about linear algebra and phoes question sounds to me like a different kind of rotation
[15:59:55] <phoe> I think so, too
[16:00:03] <mfiano> Maybe I am confused then. a Rubik's cube is a 3-dimensional object fwiu
[16:00:09] <jackdaniel> just wait, with time there'll be the 4th dimension
[16:02:34] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[16:03:28] <phoe> mfiano: https://github.com/bendudson/array-operations/issues/33
[16:05:57] *** Joins: ldb (~user@user/ldb)
[16:06:30] <mfiano> Your question is asking about a 2D, and provides examples of a 3 dimensional rotation about the Z axis.
[16:06:44] <mfiano> But as to not confuse either of us any more, I will leave it at that.
[16:07:10] *** Quits: mingus (~jan-magnu@auth-147-138.anyconnect.uib.no) (Ping timeout: 260 seconds)
[16:07:11] <phoe> oh - I understand what you mean now
[16:09:30] <mfiano> if you want the non-mathy solution: https://github.com/mfiano/syntex/blob/master/src/wfc/kernel.lisp#L35-L103
[16:10:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[16:10:38] *** Joins: puchacz (~puchacz@cpc96912-walt25-2-0-cust541.13-2.cable.virginm.net)
[16:11:36] <puchacz> hi, what's the best and portable way to create variables when experimenting in REPL please? defparameter creates a special, and I can accidentally interfere with (let ...) forms in my program, whereas setq gives warnings in sbcl.
[16:11:52] <puchacz> like say in Matlab, you can write x = []; y = 7; etc.
[16:11:58] <phoe> defparameter + earmuffs
[16:12:01] <ldb> unixlisp: you can have a try on CommonORBIT which is a message passing style OOP package implemented in CL. Some paid Lisps still provide Zetalisp style Flavors, that is also message passing based.
[16:12:36] <puchacz> phoe - and eye blinders...
[16:12:39] <phoe> puchacz: (defvar *foo* ...)
[16:12:46] <mfiano> puchacz: sbcl has defglobal, and there is a portable interface with the global-vars system in quicklisp
[16:12:48] <phoe> or s/defvar/defparameter/
[16:13:00] <mfiano> if you want a true toplevel non-special global
[16:13:22] <puchacz> mfiano - yes, this is what I want
[16:13:33] <puchacz> thanks guys, trying
[16:14:10] <puchacz> oki, this #<SYSTEM global-vars / global-vars-20141106-git / quicklisp 2020-07-15>
[16:14:12] <puchacz> cheers
[16:14:35] <mfiano> Yes, check the readme. It is pretty useful.
[16:15:55] <mfiano> i would recommend following their advice and using a new earmuff style though
[16:16:07] <mfiano> i think the readme suggests -foo-, but i use =foo=
[16:16:25] <puchacz> they say (setf -y- 6)
[16:16:35] <jackdaniel> I wouldn't have thought that merging two numbers with two ranges will give me so much headache, do I miss something obvious? here is the code: https://plaster.tymoon.eu/view/2806#2806
[16:16:47] <mfiano> yeah hyphen. i use #\= because it stands out more in a kebab-case language
[16:16:48] <hayley> I think SBCL uses double earmuffs, and I did something similar once.
[16:17:25] <phoe> Online Lisp Meeting #13 announced - https://www.reddit.com/r/lisp/rr7ffe/
[16:17:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[16:17:52] <puchacz> ouch "An attempt to rebind a global variable properly results in a compiler error." - not like Matlab
[16:17:54] <phoe> jackdaniel: could you give some example input and output?
[16:18:07] <phoe> puchacz: that's why earmuffs are suggested
[16:18:21] <puchacz> how do I use earmuffs:)  ?
[16:18:35] <jackdaniel> sure: (merge-branches 1 2 3 8 6 20) -> (1 20)
[16:18:58] <jackdaniel> because 1 and 2 are adjacent to the range 3, 8 and the range 3, 8 and the range 6, 20 overlap
[16:18:58] <phoe> *foo* ; the asterisks at the beginning and end are called earmuffs in the Lisp world
[16:19:09] <puchacz> ah
[16:19:27] <puchacz> and they look like special variables, so better to use =foo= or -foo- indeed
[16:19:43] <phoe> yes
[16:20:45] <jackdaniel> and, for example (merge-branches-1 0 2 5 9 10 20) will yield (nil nil) because they can't be merged into a single range
[16:20:49] <jackdaniel> all arguments are always integers
[16:20:50] <mfiano> It would be pretty disastrous if you didn't use these markings and in some LET binding you tried re-using a dynamic variable as a lexical one...
[16:21:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:21:18] <puchacz> yes
[16:21:20] <puchacz> cheers :)
[16:23:25] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[16:23:41] <phoe> jackdaniel: let me check if I understand this correctly - in (merge-branches 1 2 3 8 6 20) the actual input are numbers 1 and 2, and ranges [3..8] and [6..20]?
[16:24:03] <jackdaniel> yes
[16:24:05] <phoe> I'm trying to understand the API
[16:24:23] <phoe> OK - and the numbers are some sort of indexes into the respective ranges?
[16:26:47] <jackdaniel> no, it is just after constructing a tree this (sub-)function tries to reduce it by connecting adjacent leafs
[16:27:53] <puchacz> guys, can I use it like this? (define-symbol-macro setg global-vars:define-global-parameter)
[16:27:53] <jackdaniel> each node stores values COMMON and MERGED
[16:28:07] <puchacz> setg is shorter than the whole name
[16:28:07] <phoe> puchacz: nope
[16:28:24] <phoe> `(defmacro setg (&rest stuff) `(global-vars:define-global parameter ,@stuff))
[16:28:29] <jackdaniel> MERGED is a single number (not adjacent with MERGED) and MERGED is two numbers representing the range
[16:28:46] <puchacz> phoe: no first quote I take?
[16:28:47] <jackdaniel> s/MERGED is a single/COMMON is a single/
[16:29:35] <jackdaniel> so when two nodes are to be merged there are two ranges and two numbers (that potentially may connect both ranges) i.e [1..4] 5 6 [7..8]
[16:29:36] <phoe> puchacz: you'll need the first quote
[16:30:16] <phoe> jackdaniel: OK, so the first number is not adjacent to the first range, and the second number is not adjacent to the second range
[16:30:42] <puchacz> phoe: why? isn't it a normal macro to be put in a file somewhere?
[16:30:58] <puchacz> the quote before `(defmacro ...) looks weird
[16:31:09] <jackdaniel> exactly
[16:31:15] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[16:31:30] <phoe> puchacz: you want (setg -foo- 42) to expand into (gv:d-g-p -foo- 42)
[16:31:35] <jackdaniel> I mean - the function seems to work fine (and I'll test it further later), just this algorithm is quite lengthy
[16:31:51] <phoe> puchacz: if you don't quote it, then your macroexpander function will execute that code
[16:31:59] <phoe> and you most likely do *not* want that
[16:32:01] <jackdaniel> I would have thought (given the problem description) that it is enough to solve it with a nested loop and voila :)
[16:32:12] <puchacz> phoe - you put quote before (defmacro
[16:32:18] <phoe> oh wait
[16:32:23] <phoe> oh goodness, I did not notice it
[16:32:32] <phoe> yes, this one is not necessary :D sorry
[16:32:40] <puchacz> sure:)  thanks
[16:33:12] <phoe> jackdaniel: are the numbers or ranges nullable? it seems so from the source code
[16:33:23] <puchacz> IF sbcl was not so loud about warnings, could I just use setf / setq?
[16:33:43] <phoe> puchacz: it's undefined behavior in standard CL, and generally not advised
[16:33:49] <puchacz> oki
[16:33:51] <jackdaniel> yeah, they are
[16:34:26] <phoe> OK, that's one source of complication
[16:35:37] <mfiano> puchacz: Yes, it is undefined behavior. You're lucky SBCL does the right thing but warns you about the problem. Other implementations may do anything else at all
[16:36:24] <phoe> they usually do the right thing™, whatever it means, for compatibility with older lisps
[16:36:42] <mfiano> I guess "expected" is a better term
[16:36:51] <phoe> sure
[16:38:12] <unixlisp> ldb: CORBIT is very early, I have played with it, but have not found the applications about it. KR is intuitive, interesting and has a big GUI application available.
[16:38:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:42:01] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[16:45:47] <ns12> Hi, why is it MAKUNBOUND instead of MAKEUNBOUND? Isn't it weird that "E" is missing?
[16:46:21] <beach> ns12: For hysterical raisins.
[16:47:26] <ns12> From which Lisp did Common Lisp inherit this weird spelling?
[16:47:31] <ldb> ns12: it's because maclisp uses that name
[16:47:35] <engblom> I is it possible to make a truly standalone binary? Now I have compile by first doing (ql:quickload :foo)(asdf:make :foo) and it will create a binary. However this binary still somehow depennds on sbcl as when sbcl updates I have to recompile.
[16:48:14] <ldb> for SBCL you need to attach the "kernel" to executable
[16:48:20] <beach> engblom: No, you will always need the operating system to run it, unless you are using Mezzano or Movitz.
[16:48:40] <VincentVega> ns12: Haven't you ever heard of the great tribal African leader and a philosopher Makunbo Und?
[16:48:44] <engblom> beach: I meant a standalone that is not dependent on if sbcl is installed or updated.
[16:48:53] <random-nick> but calling it MAKE-UNBOUND would make it sound like a constructor function
[16:48:58] <random-nick> like MAKE-INSTANCE
[16:48:59] <engblom> ldb: How do I attach the kernel when compiling?
[16:49:01] <beach> engblom: Then there is an option to SBCL for creating such a thing.
[16:49:19] <ns12> VincentVega: ???
[16:49:41] <VincentVega> unixlisp: could you please check your pms?
[16:49:50] <ldb> engblom: set :executable option to t when save-lisp-and-die
[16:50:15] <ns12> random-nick: Makes sense. At least a little sense.
[16:50:24] <beach> ns12: Be grateful they did not also import "haulong" and "haipart".
[16:50:41] <ns12> What is that?
[16:50:50] <beach> More MacLisp functions.
[16:50:53] <VincentVega> ns12: beach is referring to the great chinese revolutionists
[16:53:56] <ns12> beach: I see. Those are funny spellings. https://www.maclisp.info/pitmanual/bits.html#15.5.1
[16:54:34] <beach> ns12: Just like MAKUNBOUND, yes.
[16:55:32] <pjb> That said, it's not justified on the length of the symbol name: (length "MAKEUNBOUND") #| --> 11 |#   this would not take more space than MAKUNBOUND or less than MAKE-UNBOUND.
[16:57:40] <ldb> but would make less typing
[16:58:17] <ldb> people didn't have tab completion that time
[16:58:30] <pjb> ldb: makunbound is more pronounceable than makeunbound.
[16:59:33] <ns12> It's the second decade of the 21st century and yet SBCL has no tab completion.
[16:59:48] <pjb> ns12: use emacs+slime for that!
[16:59:51] <pjb> or rlwrap.
[17:00:20] <pjb> It's the 5th decade of unix, each tool does what it does, and doesn't try to do what the other tools do.
[17:00:28] <ns12> I don't use Emacs. I have been programming lisp for years without Emacs.
[17:00:39] <pjb> whatever
[17:00:55] <engblom> ns12: What do you use?
[17:01:23] <ldb> ns12: use McCLIM's Listener for that!
[17:01:46] <ldb> unless you don't use unixs
[17:01:55] <ns12> engblom: In /bin/sh, I type "sbcl", then I press the Enter key.
[17:01:57] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[17:02:49] <ldb> holy morries
[17:03:14] <ns12> ldb: Is McCLIM's Listener suitable for daily use? Or is it still in beta or something like that?
[17:03:55] <ldb> It's close enough to what you can get on a Lisp Machine, and way better than /bin/sh
[17:04:28] <beach> ns12: SBCL doesn't do that because it relies on other modules for it, like SLIME.
[17:04:45] <beach> ns12: That's just sane modularity and code factoring.
[17:05:38] <jackdaniel> ugly as the algorithm is, it does the job it seems -- https://imgur.com/SdpGLqS.png
[17:06:08] <ns12> I have tried rlwrap before, but it doesn't really do "tab completion" since it doesn't know about Common Lisp. For example, if I type "MAKUNB", rlwrap is not going to magically insert "MAKUNBOUND" when I press Tab ...
[17:06:49] <ns12> jackdaniel: What's that? The McCLIM Listener?
[17:07:37] <jackdaniel> well, tentatively yes, but the prime feature of this screenshot is the visualisation of the new fast generic function dispatch for ecl
[17:08:19] <jackdaniel> (i.e minimizing the optimal split if it is possible to merge branches)
[17:08:34] <ldb> ns12: there's one more thing you can try if you don't get GUI, (ql:quickload "linedit")
[17:08:49] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[17:10:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80::a2)
[17:10:48] <ns12> ldb: I don't use quicklisp either... I'm starting to think that I am highly unconventional. Anyway, in Guix it is "guix install sbcl-linedit".
[17:11:23] <ns12> Then in the REPL, do something like (asdf:load-system :linedit).
[17:13:01] <ns12> Further instructions: https://github.com/sharplispers/linedit
[17:13:24] <unixlisp> There is an old sbcl-readline, also cl-readline, cl-repl or use LEM.
[17:13:37] * ldb donno a reason for using guix/nix execpt to use Haskell
[17:13:55] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:71e0:c4bf:d866:f951) (Remote host closed the connection)
[17:14:15] <ns12> ldb: I use Guix mostly for the Common Lisp libraries ...
[17:14:19] *** Quits: puchacz (~puchacz@cpc96912-walt25-2-0-cust541.13-2.cable.virginm.net) (Quit: Client closed)
[17:14:22] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:71d0:995f:9252:5bc7)
[17:15:15] *** Parts: unixlisp (~unixlisp@2409:8a3c:5400:9ff0:fe08:4aff:fe66:ec11) ()
[17:17:57] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[17:19:38] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[17:19:48] <phoe> jackdaniel: https://plaster.tymoon.eu/view/2807#2807
[17:20:02] <phoe> basic unit tests included, but please expand on them
[17:21:35] <phoe> jackdaniel: I assume that a number X is equivalent to a range [X..X]
[17:23:39] <phoe> and this is possibly optimizable further, e.g. to bail out of MERGE-RANGES early if the outer loop fails to merge anything
[17:23:44] *** Joins: miique (~miique@181.46.139.166)
[17:25:45] <jackdaniel> thanks, I'll consider replacing the code I have
[17:27:32] <phoe> sure - I basically tried to throw out a lot of assumptions like "number1 is not adjacent to range1" and so on, then treated all numbers as ranges, then tried to merge ranges in a loop
[17:27:42] <phoe> the "throw out a lot of assumptions" step is dangerous though
[17:28:00] <phoe> so please check if this code still does what you want
[17:28:29] <jackdaniel> I'm more concerned whether it doesn't cons more and is slower - these assumptions were used among other things to optimize it
[17:28:31] <phoe> (and I threw them out because I though they're unnecessary, in the end we're just merging ranges here)
[17:28:31] <beach> ns12: It is amazing that you don't absolutely hate programming in Common Lisp, or in any language for that matter.  I can't imagine why anyone would make choices that slow down the development by as much as you must endure on a daily basis.
[17:29:37] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[17:29:49] <phoe> jackdaniel: oh! that's a possibility with my code - %MERGE has a single LIST call, MERGE-RANGES has a COPY-SEQ call, MERGE-RANGES-AND-NUMBERS has a MAPCAR and a LIST call
[17:30:20] <beach> It drives me crazy when I forget to start a CLIM application in a separate thread, thereby depriving me of the minibuffer display of the lambda list for the operators that I use.
[17:30:51] <engblom> 15:43  * ldb donno a reason for using guix/nix execpt to use Haskell
[17:31:02] <jackdaniel> beach: use (clim:find-application-frame 'frame-name) instead of (clim:run-frame-top-level …)
[17:31:32] <jackdaniel> as a side benefit if the application frame is already started, then unless explicitly told it will raise it instead of creating another one
[17:31:33] <beach> jackdaniel: I just meant that I forget to type :NEW-PROCESS T.
[17:31:43] <engblom> I use nixos, not because of nix itself, but because now I have a single configuration file I can copy a new system whenever I update to a new computer and in a few minutes I have an identical setup.
[17:31:46] <_death> beach: maybe make it T by default?
[17:31:59] <ns12> beach: I normally have three terminal windows open when I program in Common Lisp. In one window is an SBCL REPL that I use for evaluating small snippets. In another window is Vim where I write Common Lisp. The third window is for running code using "sbcl --script ...".
[17:32:04] <beach> _death: Yes, that's anther thing I keep forgetting.
[17:32:41] <beach> ns12: So why don't you have Vim do the TAB completion for you?
[17:33:27] <ns12> beach: It is the REPL (first window) that has no good tab completion.
[17:33:54] <Xach> phoe: email i guess, or github
[17:33:58] <beach> ns12: So why don't you run the REPL through the Vim equivalent of SLIME so that Vim can do the TAB completion for you?
[17:37:33] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[17:37:50] *** Joins: Bike (~Glossina@71.69.170.70)
[17:37:50] *** ChanServ sets mode: +o Bike
[17:39:21] <ns12> beach: Is there such a thing? Many years ago, the Vim equivalents of SLIME were all buggy. Nowadays, I think they are all still in beta. I will look again, but I'm not optimistic.
[17:39:47] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[17:40:23] <beach> ns12: Well, I was assuming that you would choose tools that are adapted to the task at hand.  I am not using Vim so I don't know what is available.  But if it doesn't have an equivalent, it is perhaps not the right tool for Common Lisp programming.
[17:42:08] *** Joins: nature (~nature@45.32.235.173)
[17:42:14] <beach> ns12: I mean, it seems a bit strange to choose a tool that doesn't have a decent REPL and then complain that SBCL is not filling in the gaps of the tools you have chosen.
[17:42:15] <ns12> Actually, I feel pretty comfortable with my current setup. I have used Emacs + SLIME in the past but it is just not for me. I really tried to like it.
[17:42:40] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[17:42:59] <beach> ns12: You can use whatever tools you like, but to complain about SBCL not doing something that is not its job seems a bit strange then.
[17:43:04] <ns12> I am comparing SBCL to something like CLISP, which comes with line editing keybindings out of the box.
[17:43:18] <beach> I am sorry to hear that it does that.
[17:43:30] <Xach> there is a library linedit that adds line editing
[17:43:43] <ns12> beach: Interesting opinion. Why do you think that?
[17:43:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::a2) (Ping timeout: 240 seconds)
[17:44:14] <beach> ns12: Like I said, modularity and code factoring.  That should be a separate tool or module, independent of the Common Lisp implementation.
[17:45:22] <beach> ns12: Already there is way too much duplicated effort between different Common Lisp implementations, and to add GUI-like features to each one would make the situation even worse.
[17:45:27] <jackdaniel> given that the standard mentions repl, debugger and even editing (with a function ed) it is a shame that most implementations provide very primitive tooling
[17:46:28] <jackdaniel> perhaps in the future they could be packaged with portable libraries though, that would make all satisfied I suppose
[17:48:25] <Xach> I found out why I couldn't reach quicklisp.org a few days ago - my ISP had blocked my hosting provider for some unrelated malicious SIP attacks originating from my hosting company's subnet. Resolved now.
[17:48:55] <Xach> It truly affected only me (and any Lispers who share my small ISP)
[17:49:11] <VincentVega> ns12: slimv, even ~5 years back, had a decent REPL and I don't remember running into trouble. It was all actually a quite streamlined setup. I did switch to emacs later though (but without minding this particular purpose).
[17:50:02] <ns12> Thanks. I'll take a look at slimv again.
[17:50:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:51:03] <ns12> jackdaniel: Unfortunately, ED does not work out of the box in SBCL.
[17:51:37] <jackdaniel> my point exactly
[17:51:42] <ns12> It seems to require setting *ED-FUNCTIONS* before ED can be used ...
[17:51:46] <jackdaniel> but there are hooks
[17:52:05] <_death> Xach: wow.. how did you figure out that this was the issue?
[17:52:26] <Xach> _death: I emailed my ISP and said "why can't I reach my colocated server from my home connection?" and they found and fixed the problem.
[17:52:46] <jackdaniel> so in principle you coild augument the implementation with better tooling (i.e prepackaged)
[17:52:52] <Xach> (I used to work there, but I did not need to use any inside connections to resolve it.)
[17:53:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:54:29] <_death> Xach: a black swan in bofh lake
[17:54:30] <unixlisp> cl-repl is fancy.
[17:54:36] <ns12> jackdaniel: ED does seem to work in CLISP for files and user-defined functions.
[17:56:16] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[17:56:39] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[17:58:22] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[17:58:49] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:00:30] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:03:39] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:05:19] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:06:24] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:06:34] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:06:54] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:07:29] <phoe> jackdaniel: if you'd like me to optimize this, what are the types of the numbers in your situation? ub32?
[18:07:39] <phoe> or something else?
[18:10:16] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:11:37] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:13:18] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:13:40] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:15:21] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:16:11] <jackdaniel> phoe: I'll manage, thanks
[18:16:26] <phoe> OK - I think that you can use MERGEABLEP and %MERGE on your own and then control what and how gets consed on your own; maybe even update %MERGE to use VALUES rather than LIST
[18:16:46] <phoe> this should give you zero allocation
[18:19:17] <jackdaniel> I don' t consider my version unacceptably ugly, I was womdering whether I dont miss some obvious algorithm
[18:19:44] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:20:20] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 252 seconds)
[18:22:00] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:25:38] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:27:19] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:29:26] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:31:07] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:31:23] <phoe> after re-reading it twice I don't think you missed anything
[18:31:44] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:33:54] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:34:55] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:36:36] *** Quits: unixlisp (~unixlisp@111.37.113.212) (Remote host closed the connection)
[18:38:27] *** Joins: unixlisp (~unixlisp@111.37.113.212)
[18:38:57] *** Parts: unixlisp (~unixlisp@111.37.113.212) ()
[18:42:02] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[18:44:07] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:46:57] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[18:49:31] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[19:07:41] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[19:11:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:23:14] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[19:24:02] <nij-> Hello! I find myself repeatedly pouring the slot values out from instances. I can write a macro to resolve that. But just curious if such macro has been built-in to CL? Like this: https://bpa.st/LEMQ
[19:25:08] <beach> clhs with-slots
[19:25:09] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_w_slts.htm
[19:25:26] <nij-> Brilliant! Thanks :)
[19:25:30] <beach> But you should not use slot values in the first place.
[19:25:43] <beach> Slots are implementation details, and it is better to use slot accessors, and...
[19:25:44] <yitzi> clhs with-accessors
[19:25:44] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/m_w_acce.htm
[19:25:49] <beach> Exactly.
[19:26:19] <nij-> Gotcha beach. And yitzi: Wow even better! Thanks :)))
[19:27:09] <yitzi> There is a WITH-SLOTS, but stay away from it unless you have good reason. As beach points out.
[19:28:26] <nij-> So beautiful.
[19:28:54] <beach> nij-: Slot names are used basically so that the same slot is identified when you want to supply more information about a slot in a subclass, and so that the same slot is referred to when the class is redefined.
[19:29:09] <beach> nij-: For all application code, it is better to use slot accessors.
[19:29:51] <beach> nij-: Accessors have the additional advantage that they can be replaced by "calculating" generic functions without any changes to client code.
[19:30:33] <beach> nij-: And you can use them in mapping functions, etc, etc.
[19:32:29] <yitzi> And the :before, :after and :around methods are useful if you are doing network comms, serialization or some strange slot allocation strategy.
[19:33:13] <yitzi> All probably rare examples, though. :)
[19:35:53] <beach> The main argument is that slots are implementation details and should be "visible" unless absolutely necessary, like for the cases I mentioned above.
[19:36:05] <beach> er
[19:36:15] <beach> should not be visible
[19:36:57] * beach is exhausted after a long day of doing silly admin tasks. 
[19:38:41] *** Joins: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[19:43:38] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[19:45:59] <nij-> Thanks :) I'm educated!
[19:46:55] <beach> Great!
[19:51:50] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[19:56:02] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[19:56:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[19:56:54] *** Joins: treflip (~user@user/treflip)
[20:11:24] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[20:14:01] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (Ping timeout: 250 seconds)
[20:20:44] *** Joins: ajoberstar (~user@97-116-72-197.mpls.qwest.net)
[20:23:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:5d5c:8c41:79c4:9b80) (Ping timeout: 250 seconds)
[20:25:11] *** Joins: rotateq (~user@185.66.193.48)
[20:27:16] *** Joins: euandreh (~euandreh@191.181.59.160)
[20:28:31] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[20:30:05] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[20:33:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:38:43] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[20:42:05] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[20:43:04] *** Joins: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl)
[20:44:00] *** Quits: alfonsox (~quassel@103.92.42.90) (Remote host closed the connection)
[20:49:53] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 268 seconds)
[20:53:38] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[20:56:15] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[20:59:45] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 268 seconds)
[21:07:58] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:12:38] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:18:21] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[21:20:45] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[21:24:56] *** Joins: trocado (~uiop9@bl18-243-251.dsl.telepac.pt)
[21:29:17] *** Quits: trocado (~uiop9@bl18-243-251.dsl.telepac.pt) (Ping timeout: 240 seconds)
[21:34:00] *** Quits: varjag (~user@188.95.247.249) (Read error: Connection reset by peer)
[21:40:31] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:00:45] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[22:05:31] *** Joins: Oladon (~olad@98.43.81.226)
[22:15:46] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[22:17:05] *** Quits: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs) (Ping timeout: 250 seconds)
[22:17:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[22:17:12] *** Joins: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs)
[22:19:36] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[22:20:59] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 250 seconds)
[22:21:17] *** Quits: amb007 (~a_bakic@cable-94-189-186-183.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[22:21:42] *** Joins: amb007 (~a_bakic@109.245.225.179)
[22:22:17] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[22:24:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:31:05] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[22:34:29] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[22:37:26] *** Quits: ajoberstar (~user@97-116-72-197.mpls.qwest.net) (Ping timeout: 245 seconds)
[22:39:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:41:23] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[22:44:09] <alcaeus> Hi all, what's the best way to sum elements of a sublist for a setf statement? Currently I'm using "(setf x (eval `(+ ,@(subseq l 0 4))))" It works, just checking for good form.
[22:46:06] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[22:46:26] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[22:46:59] <NotThatRPG> alcaeus: EVAL is to be avoided whenever possible. Suggest you use REDUCE here instead.
[22:49:27] <alcaeus> NotThatRPG Thank you!
[22:49:28] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[22:49:57] *** Joins: amb007 (~a_bakic@87.116.175.30)
[22:50:08] <NotThatRPG> alcaeus: NP
[22:50:51] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3707:eaf0::a3b)
[22:52:11] *** Quits: amb007 (~a_bakic@87.116.175.30) (Read error: Connection reset by peer)
[22:52:54] *** Joins: amb007 (~a_bakic@87.116.175.40)
[22:52:55] <Alfr> alcaeus, how about? (reduce #'+ sequence-here :start 0 :end 4)
[22:55:52] <Alfr> alcaeus, just be weary when your (sub-)sequence has less than 2 elements, then you really want to read its description carefully.
[22:57:09] *** Quits: amb007 (~a_bakic@87.116.175.40) (Ping timeout: 256 seconds)
[22:58:17] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3707:eaf0::a3b) (Ping timeout: 240 seconds)
[22:58:19] *** Joins: amb007 (~a_bakic@109.245.225.179)
[23:02:40] *** Quits: amb007 (~a_bakic@109.245.225.179) (Read error: Connection reset by peer)
[23:03:29] *** Joins: amb007 (~a_bakic@87.116.175.48)
[23:06:23] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:08:22] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[23:15:02] *** Joins: trocado- (~uiop9@bl18-243-251.dsl.telepac.pt)
[23:25:44] <alcaeus> Alfr: That makes a lot more sense than using subseq, thanks. Also my problem calls for exactly 4 elts so I will spend some time with the hyperspec per your suggestion.
[23:33:31] *** Joins: foxfromabyss (~foxfromab@2a01:c22:a4a9:d200:c166:a367:e0ab:b41d)
[23:35:06] <foxfromabyss> Hello :)  I am sorry if this is an easily google-able question, but here is it: i created a lisp project with `quickproject`, and want to add a dependency to the project. do I do that manually to the .asd file? Would love to know what the most popular way is
[23:40:52] <rotateq> in you DEFSYSTEM form you can have a keywords option with :depends-on
[23:41:48] <rotateq> like here for example: https://github.com/quil-lang/qvm/blob/master/qvm.asd
[23:42:00] <rotateq> or do you mean depending on project files?
[23:42:25] <trocado-> foxfromabyss: I edit the .asd file
[23:45:45] *** Joins: karlosz (~karlosz@136.56.98.53)
[23:46:03] *** Joins: Josh_2 (~user@37.25.47.130)
[23:46:26] <Josh_2> Evening
[23:46:33] <rotateq> hey Josh_2
[23:47:27] <Josh_2> I need to configure my deployed lisp system using a human readable file, is there a library around for this?
[23:47:50] <rotateq> what do you have upto now?
[23:48:10] <Josh_2> Nothing, I am just using globals within my image, but I need to configure those globals with a human readable file
[23:49:35] <Josh_2> Certain info like port numbers, domain names, api keys etc etc need to be either configured from like a .json or something
[23:51:20] <Josh_2> or xargs perhaps and just saved within bknr
[23:53:53] <Josh_2> I guess I can just use a plist and export/import as json
[23:54:06] <Josh_2> Was just hoping a tool already existed for this, save me reinventing the wheel
[23:54:50] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[23:55:09] *** Joins: paul0 (~paul0@user/paul0)
[23:56:33] <foxfromabyss> trocado- thanks :P  rotateq i was referring to :depends-on keyword(not sure if the term is correct) makes sense, thanks!
[23:56:36] *** Joins: dlowe (~dlowe@user/dlowe)
[23:56:56] <NotThatRPG> Josh_2: Yes, it seems like there should be a config file parser library out there somewhere, but I don't know of one off-hand.
[23:59:19] <rotateq> yay
