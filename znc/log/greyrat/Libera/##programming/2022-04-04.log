[00:00:55] <kee> You can still lock something, call a subroutine, and lock yourself into a box.
[00:01:03] *** Quits: eXistenZ (~biskit@bzq-109-64-230-51.red.bezeqint.net) (Quit: Leaving)
[00:01:21] <kee> That's easier to do by using non-Future-safe locks with futures.
[00:01:35] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[00:01:38] <kee> Many kinds of deadlocks are still possible.
[00:01:48] <kee> I guess "race conditions" was the wrong word.
[00:02:27] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[00:02:42] <xythercoder> q
[00:02:56] <kee> qu
[00:03:24] <xythercoder> Wrongly typed
[00:04:18] <kee> Strongly typed or weakly typed?
[00:04:18] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[00:04:26] <flaqoniun> struct MutexGuard<'a, T> {   wtf is 'a supposed to mean
[00:04:43] <kee> It's a lifetime!
[00:04:53] <kee> It means the length of time that the guard is guarding for.
[00:05:04] *** Quits: xythercoder (~xythercod@49.37.43.214) (Remote host closed the connection)
[00:05:07] <flaqoniun> 'a seconds
[00:05:09] <flaqoniun> or minutes?
[00:05:12] <kee> Amount of code.
[00:05:25] <kee> Like "until the end of the function" or something.
[00:05:30] <kee> "Until line 43", stuff like that.
[00:05:42] <kee> Lifetimes are hierarchical.
[00:05:45] <flaqoniun> so like, GOTO for lockings?
[00:05:53] <kee> Not really.
[00:05:55] <kee> More like {}s.
[00:06:06] <flaqoniun> what does 'a mean then
[00:06:08] <flaqoniun> if they use {}
[00:06:11] <kee> It's the name of the lifetime.
[00:06:12] *** Quits: allegorical_ (~guest@2607:fea8:33e0:65c:244f:576a:a328:a376) (Ping timeout: 240 seconds)
[00:06:36] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[00:06:49] <kee> 'a has to be a bigger lifetime than the lifetime of the mutex guard.
[00:07:50] <flaqoniun> oh its like a compiler hint?
[00:08:43] <kee> Sort of.
[00:08:55] <kee> In the same way that everything is a compiler hint.
[00:09:27] <flaqoniun> i mean what use could it have? i can't think anything up yet
[00:09:32] <flaqoniun> scanning the blogosphere...
[00:09:36] <kee> Rust guesses at lifetimes when you're writing code, but you still need lifetime parameters in your types.
[00:09:49] <kee> flaqoniun: It means you can guarantee that certain things outlive other things.
[00:09:57] <kee> e.g. the MutexGuard outlives the mutex it's guarding.
[00:10:15] <kee> So it doesn't need special code to handle the case where somebody destroys the Mutex while there's a MutexGuard for it; that's a compiler error.
[00:10:23] <flaqoniun> you could do that with a scope block
[00:10:53] <flaqoniun> are teams of coders passing around lifetime blocks though? that's terrifying
[00:11:18] *** Joins: Pickchea (~private@user/pickchea)
[00:11:19] *** Quits: entbsagtc^ (~entbsagtc@c-24-99-107-170.hsd1.ga.comcast.net) (Ping timeout: 260 seconds)
[00:11:59] <jeaye> flaqoniun: If you have two input params which are references, how long do you know each of them will be alive? Can you store a one of them inside the other? i.e. void foo(vector<int*> &v, int *b), how long does the value at b live? Can I put it in v safely?
[00:12:10] <kee> That's what lifetimes are.
[00:12:13] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[00:12:32] *** Joins: wildo (~lain6141@202.180.111.143)
[00:12:52] <jeaye> flaqoniun: With Rust, you can tag each of these params with a lifetime and the compiler will fill in the rest. It will make sure that you don't try to hang onto something longer than you'll be able to.
[00:13:07] <jeaye> flaqoniun: In C or C++, this would be undefined behavior. In Rust, it's caught at compile-time.
[00:13:36] <jeaye> https://doc.rust-lang.org/rust-by-example/scope/lifetime.html
[00:13:36] <bayaz> Title: Lifetimes - Rust By Example 
[00:13:49] <flaqoniun> so like a reference counter?
[00:13:52] <flaqoniun> i'm so lost
[00:13:55] <kee> Not really. It's at compile time.
[00:14:00] <kee> It's like scopes.
[00:14:07] <flaqoniun> you can't count references at compile time?
[00:14:12] <kee> You can't, not really.
[00:14:15] <flaqoniun> lol
[00:14:16] <kee> Well, I suppose you can.
[00:14:17] *** Quits: rodrigaes (~trace@user/trace) (Quit: Leaving)
[00:14:20] <kee> But not runtime references.
[00:14:32] <kee> Lifetimes aren't reference counting, though.
[00:14:35] <jeaye> No, not a reference counter. Scope tracking across automatic and dynamic scopes.
[00:14:59] <kee> Imagine you inserted {s and }s everywhere you possibly could in the program.
[00:15:08] <kee> Each of those {} pairs could be a lifetime.
[00:15:25] <jeaye> It's not about counting; it's about measuring relative lifetimes so you can know what you can do with any value. Reference counting doesn't give you that.
[00:15:47] <kee> Lifetimes are hierarchical: every lifetime is either smaller than or bigger than every other lifetime.
[00:15:58] <kee> (Or equal, I suppose, but then it would be the same lifetime, not another lifetime.)
[00:16:09] *** Joins: kakysha_ (~kakysha@user/kakysha)
[00:16:11] *** Joins: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[00:16:21] <jeaye> flaqoniun: If you want to understand better, check out the docs I linked. It shows, visually, how this works.
[00:17:15] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[00:18:29] *** Quits: Psybur (~Psybur@2600:1003:b12f:917d:c456:4602:f034:984a) (Read error: Connection reset by peer)
[00:18:42] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Remote host closed the connection)
[00:18:49] *** Joins: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net)
[00:19:06] <flaqoniun> thanks for the link but it's unreadable in my browser.  i'll just slowly make my way through this https://www.possiblerust.com/pattern/naming-your-lifetimes
[00:20:20] *** Quits: dodo (~dodo@user/dodo) (Quit: dodo)
[00:20:24] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f750:a200:f9d1:c665:a064:ac5a)
[00:20:45] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:854:307a:efd:ab95)
[00:20:55] <jeaye> It doesn't even require JS. How is it unreadable?
[00:21:07] <jeaye> Are you using elinks or something?
[00:21:13] <flaqoniun> the source is unreadable too
[00:21:19] *** Joins: dodo (~dodo@user/dodo)
[00:21:42] <jeaye> You mean the Rust code is unreadable?
[00:21:45] *** shiza is now known as Prints
[00:21:51] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:d960:d98a:f624:8ef) (Ping timeout: 256 seconds)
[00:22:57] *** Prints is now known as shiza
[00:22:58] <jeaye> It has 4 lines of actual code. `fn main()`, `let i = 3;`, `let borrow1 = &i;` and `println!`. Anyone who knows C or a dialect will be able to read this.
[00:23:01] <flaqoniun> nevermind  i found the chunk in view source that is plain text
[00:23:26] <jeaye> ok...
[00:23:35] <kee> The Rust websites are unreadable in Dillo. I have no idea why.
[00:23:42] <kee> They just don't load. None of them.
[00:23:43] <jeaye> What is Dillo?
[00:23:47] <kee> A web browser.
[00:23:54] <flaqoniun> it has to be intentional, unless nobody test their sites anymore
[00:24:05] <flaqoniun> "everyone uses chrome why test anything"
[00:24:29] <jeaye> Works fine on Firefox.
[00:24:48] <jeaye> With JS disabled, too
[00:25:38] <jeaye> Nobody is targeting you Dillo users; they just don't know you exist.
[00:27:14] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[00:27:37] <kee> I haven't worked out why Rust sites don't work.
[00:27:46] <kee> cargo doc works fine.
[00:27:56] <kee> But the Rust websites literally don't even begin loading.
[00:28:36] *** Joins: vicfred (~vicfred@user/vicfred)
[00:29:42] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[00:29:45] <jeaye> Just checked. The site actually reads well in elinks, too.
[00:30:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[00:30:37] <jeaye> Sounds like a Dillo problem.
[00:30:46] <kee> It probably is. But most sites are fine.
[00:31:31] <GeDaMo> Does Dillo generate any errors?
[00:32:31] <kee> Nope.
[00:32:36] <kee> It just doesn't do anything.
[00:33:03] <kee> Nav_open_url: new url='https://docs.rs/'
[00:33:06] <kee> And that's all she wrote.
[00:34:29] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:35:21] *** Joins: magla (~gelignite@55d411d7.access.ecotel.net)
[00:37:48] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:68ab:7cf8:3696:b641:b09d) (Ping timeout: 240 seconds)
[00:38:54] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[00:39:06] *** Joins: hololeap (~hololeap@user/hololeap)
[00:39:17] *** Joins: BASHitup (~richard@user/yippeekaiyay)
[00:40:22] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[00:41:41] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[00:45:05] *** Quits: Haxxa (~Haxxa@202-65-73-230.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:52] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f750:a200:f9d1:c665:a064:ac5a) (Ping timeout: 260 seconds)
[00:46:32] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:46:39] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Remote host closed the connection)
[00:47:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:48:27] *** Joins: resamvi (~resamvi@user/resamvi)
[00:48:31] *** Joins: Haxxa (~Haxxa@202-65-73-230.ip4.superloop.com)
[00:49:19] *** Lord_of_Life_ is now known as Lord_of_Life
[00:49:23] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[00:50:43] *** Quits: duuude (~user@user/duuude) (Ping timeout: 260 seconds)
[00:51:21] *** Joins: dunkeln (~dunkeln@117.239.204.226)
[00:51:21] *** Quits: dunkeln (~dunkeln@117.239.204.226) (Changing host)
[00:51:21] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[00:52:51] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[00:53:28] <pyzozord> IEEE 754 defines two NaN values. Now I wonder is there IEEE standard for two's complement and does it have NaNs too
[00:54:24] <vdamewood> pyzozord: No, and no.
[00:54:33] <vdamewood> And what are the two NaN values?
[00:54:49] <pyzozord> a "quiet nan" and a "signaling nan" apparently
[00:55:34] <oldlaptop> Ain't much to two's complement integers to standardize
[00:55:47] <oldlaptop> what would they say, "a 32-bit int has 32 bits"?
[00:56:11] <Decker> sounds like proposing a 2's compliment float
[00:56:17] <pyzozord> wait so 0.0/0.0 yields a floating point NaN but 0/0 int triggers a hardware interrupt that is a handled as software signal send by the os to the program?
[00:56:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[00:57:01] *** Joins: pmercado (~pmercado@190.22.83.12)
[00:57:13] <vdamewood> Well, you could also cause a triple fault if you integer divide by zero without setting up a handler in the OS.
[00:57:19] *** Joins: kaph (~kaph@151.35.76.11)
[00:57:57] *** Quits: tj123_ (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Remote host closed the connection)
[00:58:01] <vdamewood> (A triple fault causes the system to reboot.)
[00:58:04] *** Joins: dudek (~dudek@185.150.236.127)
[00:58:05] *** Joins: nshirelaptop (~nshire@user/nshire)
[00:58:10] <pyzozord> I bet that that "signaling nan" triggers similiar interruput and signal like int 0/0
[00:58:14] *** Joins: tj123_ (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[00:58:29] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-35d1-5cea-e5cb-89b0.inf6.spectrum.com)
[01:00:18] <vdamewood> I doubt it since interrupts are handled by the CPU and floats are handled by the FPU.
[01:00:26] <nomagno> How can I ask more directly when I need reassurance and/or feedback on some tech-related decision
[01:00:45] <pyzozord> vdamewood: how would that look like? If you don't set up handler for division by zero the default os handler would kick in and kill your process
[01:00:53] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[01:00:55] *** Quits: kakysha_ (~kakysha@user/kakysha) (Read error: Connection reset by peer)
[01:01:02] *** Joins: kakysha (~kakysha@user/kakysha)
[01:01:02] <nomagno> I find myself trying to nudge the discussion into considering the pros-and-cons of my proposed idea but I just end up looking like an idiot, I think
[01:01:08] <vdamewood> pyzozord: Well, like I said, what if the OS didn't setup a handler?
[01:01:11] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-a49d-ba0a-a00c-69aa.inf6.spectrum.com) (Ping timeout: 245 seconds)
[01:01:20] <pyzozord> vdamewood: I guess you would need to set up your own handler and do more divisions by zero in there? And how does hardware count "three" divisions by zero?
[01:02:08] <pyzozord> three unhandled with any time gap between?
[01:02:37] <littlebobeep> What is this article even saying: https://www.theregister.com/2022/03/23/c_not_a_language/
[01:02:40] <vdamewood> pyzozord: No, a tripple fault happens when you get a fault while trying to ressolve another fault while trying to resolve yet another fault.
[01:02:46] <nomagno> Is division by zero always resulting in zero too breaking a change for algorithms?
[01:03:04] <vdamewood> triple*
[01:03:15] <littlebobeep> I read the article but it does not do a good job at explaining how C is not a programming language
[01:03:23] <pyzozord> vdamewood: ooh I see. How does processor know I am trying to resolve a fault?
[01:03:24] <nomagno> It's clearly mathematically speaking false, but it seems like a decent enough default if the OS needs to assign something
[01:03:41] *** Joins: kakysha_ (~kakysha@user/kakysha)
[01:03:49] <kee> nomagno: A good compiler should prevent you from ever reaching that point.
[01:04:03] <vdamewood> pyzozord: Its state changes. I don't remember if there's a flag or something, but at the least it probably tries to run an interrupt handler.
[01:04:22] <pyzozord> vdamewood: got it, thanks
[01:04:40] <pyzozord> so maybe like handler for an interruput that causes another interruput and that three times
[01:05:18] <pyzozord> and processor needs to know when interrupt is being handled I guess because it needs to return where it was after the interrupt was handled
[01:05:25] <nomagno> kee: It's pretty clear we're talking about the actual machine code level, or close to it
[01:05:28] <nomagno> ... I THINK
[01:05:38] <nomagno> At least insofar as the OS needs to do something
[01:06:02] <kee> You can treat 0 in division by zero as INT_MAX + 1
[01:06:07] <vdamewood> littlebobeep: Well, now you know how to spot bullshit.
[01:06:13] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 240 seconds)
[01:06:15] <kee> Then 0 is a meaningful thing to return.
[01:07:37] <oldlaptop> littlebobeep: The thesis would be easier to understand (and therefore have significantly reduced trolling efficacy and be much less likely to go viral and get picked up by such outlets as the Register
[01:07:38] <flaqoniun> littlebobeep: "C is the lingua franca of programming. We must all speak C, and therefore C is not just a programming language anymore - it's a protocol that every general-purpose programming language needs to speak "  -- https://gankra.github.io/blah/c-isnt-a-language/   link from that page 
[01:07:48] *** Quits: BASHitup (~richard@user/yippeekaiyay) (Quit: WeeChat 2.8)
[01:07:52] <oldlaptop> *) if it said "C is not *just* a programming language anymore"
[01:07:54] <pyzozord> vdamewood: I kind of believe that wasn't a honest question
[01:08:10] <vdamewood> pyzozord: It was an honest answer.
[01:08:10] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[01:08:28] *** Joins: pavonia (~user@user/siracusa)
[01:08:32] <pyzozord> I know, undeserved ;)
[01:08:59] <vdamewood> pyzozord: Oh, oops. I misread what you said.
[01:09:02] *** Joins: duuude (~user@user/duuude)
[01:09:19] <littlebobeep> flaqoniun: Yeah I just found the gankra page I am reading it now
[01:09:51] <pyzozord> vdamewood: this link comes up as second on google for "c is not a language" and I have the first link already visited
[01:10:29] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[01:10:32] <pyzozord> anyway, I'm gone
[01:11:06] *** Joins: allegorical (~guest@2607:fea8:33e0:65c:39ea:530b:c05a:2e69)
[01:11:31] <vdamewood> pyzozord: Bye, gone.
[01:11:59] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[01:12:31] *** Quits: LuKaRo (~LuKaRo@p4fc32a2c.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[01:15:24] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:19:55] *** Joins: Crucifyy (~crucifyy@2601:300:8100:ec80:1d85:8708:c60a:2580)
[01:19:58] *** Quits: urnebes (~urnebes@2605:8d80:66e:8c6:932e:7b85:a741:229e) (Read error: Connection reset by peer)
[01:20:32] *** Joins: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[01:21:24] <beaky> cant we change the lingua franca to be javascript or python instead a more pythonic language
[01:21:29] *** Joins: Likorn (~Likorn@c114-150.icpnet.pl)
[01:22:13] <ProfSimm> beaky: we have no lingua franca in computing I think
[01:22:20] *** Joins: cx (~cx@user/cx)
[01:22:50] <bomb> I refuse to touch JavaScript for the rest of my life.
[01:22:57] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:22:58] <beaky> but i like javascript
[01:23:21] <bomb> lucky times for you
[01:23:36] <ProfSimm> bomb: by year 2100 hardware will be implemented to run JS directly
[01:24:10] <ProfSimm> bomb: the so-called "eh-whatever" architecture
[01:24:19] <bomb> ProfSimm probably earlier
[01:24:27] <bomb> there were Java CPUs
[01:24:47] <ProfSimm> bomb: there will be some struggles before that. Microsoft will be pushing for .NET CPUs
[01:25:06] <ProfSimm> Mozilla will show a Rust CPU at an expo and no one will hear abotu it again
[01:25:16] <bomb> ProfSimm nah, Microsoft isn't that big on .NET or C#. they're heavily invested in TypeScript though
[01:25:35] <ProfSimm> bomb: more heavily invested in TS than .NET?!
[01:25:36] <bomb> Mozilla would be lucky to be alive by 2030
[01:25:42] <bomb> ProfSimm that's right
[01:25:46] <ProfSimm> bomb: eh come on
[01:26:00] <ProfSimm> bomb: TypeScript is a nice effort but not comparable to .NET
[01:26:22] <bomb> it's not about which tech is better, it's Microsoft's strategies I'm talking
[01:26:31] <ProfSimm> bomb: what is their strategy about it
[01:26:41] <bomb> TS in C# out
[01:26:50] *** Quits: cx (~cx@user/cx) (Client Quit)
[01:26:59] <ProfSimm> I don't understand if we're still takin' the piss or not
[01:27:16] <bomb> I'm talking the truth
[01:27:21] <ProfSimm> :/
[01:30:14] <ProfSimm> bomb: if we can be serious I think they have TypeScript for 2 reasons: 1) to familiarize web devs with the Microsoft dev platforms, VS Code etc. then Visual Studio. 2) To write apps for the web, which are important now (like Office 265)
[01:30:17] <ProfSimm> 365*
[01:30:46] <ProfSimm> JS is great for a browser, compared to .NET it's a toy
[01:31:01] *** Joins: quartz (~quartz@user/quartz)
[01:31:03] <ProfSimm> Heck even Java is a bit on the toy side compared to .NET
[01:31:24] <bomb> Java runs the world
[01:31:30] <ProfSimm> It runs a lot of stuff
[01:31:35] <ProfSimm> Well but JS also does
[01:31:45] <ProfSimm> We're talking about platform capabilitie
[01:31:47] <ProfSimm> s
[01:31:49] <bomb> Microsoft is a giant C++ shop, and they make money from cloud, which is where TypeScript needed
[01:31:56] <ProfSimm> OK
[01:32:56] *** Quits: peteyboy_ (~peteyboy1@199.157.133.37.dynamic.jazztel.es) (Ping timeout: 272 seconds)
[01:33:51] <bomb> few attempts to make .NET more important at Microsoft failed, and they obviously blamed .NET
[01:34:03] <bomb> Windows Vista was one of them
[01:34:40] <bomb> it's more about politics than technicality.
[01:35:18] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[01:37:02] <bomb> personally, Java and C# are my favorite languages.
[01:37:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:38:09] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[01:39:41] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[01:39:41] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[01:39:41] *** Joins: resamvi (~resamvi@user/resamvi)
[01:39:46] <ProfSimm> bomb: .NET is as important as Microsoft wants it to be. They've decided to bind most APIs to Windows. Xamarin is a subset.
[01:39:48] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Read error: Connection reset by peer)
[01:40:03] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 256 seconds)
[01:40:03] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[01:40:17] <Decker> xamarin was another thing MS bought
[01:40:27] <Decker> it wasn't all that great when it was standalone
[01:41:20] *** Joins: jazzy (~jaziz@user/jaziz)
[01:41:42] <bomb> yeah Xamarin is still meh
[01:42:22] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[01:43:09] *** Joins: norayr (376bc34bfc@37.252.78.253)
[01:44:23] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[01:44:23] *** Joins: dunkeln (~dunkeln@14.139.121.55)
[01:44:24] *** Quits: dunkeln (~dunkeln@14.139.121.55) (Changing host)
[01:44:24] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[01:44:59] *** Joins: Alipha (~AliphaX@user/alipha)
[01:45:28] *** Parts: Alipha (~AliphaX@user/alipha) (WeeChat 1.0.1)
[01:47:18] *** Quits: Crucifyy (~crucifyy@2601:300:8100:ec80:1d85:8708:c60a:2580) (Remote host closed the connection)
[01:48:03] *** Joins: crucifyy (~crucifyy@2601:300:8100:ec80:1d85:8708:c60a:2580)
[01:49:35] *** Quits: duuude (~user@user/duuude) (Ping timeout: 252 seconds)
[01:52:52] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Remote host closed the connection)
[01:53:00] *** Quits: geeknix (~pi@2001:e68:5432:716a:e867:9342:8ac3:7cf7) (Ping timeout: 240 seconds)
[01:53:08] *** Joins: duuude (~user@user/duuude)
[01:53:11] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[01:53:37] *** Quits: crucifyy (~crucifyy@2601:300:8100:ec80:1d85:8708:c60a:2580) (Remote host closed the connection)
[01:55:59] *** Joins: Crucifyy (~crucifyy@2601:300:8100:ec80:1d85:8708:c60a:2580)
[01:56:30] *** Joins: LuKaRo (~LuKaRo@p4fc32a2c.dip0.t-ipconnect.de)
[01:56:59] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 246 seconds)
[01:57:25] *** Joins: auk (auk@gateway/vpn/protonvpn/auk)
[01:59:06] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Remote host closed the connection)
[01:59:25] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[01:59:29] *** Quits: user51 (~user51@77.124.35.94) (Remote host closed the connection)
[01:59:44] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:01:24] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Remote host closed the connection)
[02:01:43] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[02:02:23] *** Quits: monr0e (~monr0e@mail.vixen.international) (Ping timeout: 260 seconds)
[02:02:55] *** Joins: tvenissat (~cockeye@2600:1700:6f73:a490:baca:3aff:fe81:61fa)
[02:04:13] *** Joins: kakysha_ (~kakysha@user/kakysha)
[02:05:03] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[02:05:15] *** Joins: dstein64- (~dstein64@dannyadam.com)
[02:05:57] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[02:07:17] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 240 seconds)
[02:07:17] *** dstein64- is now known as dstein64
[02:09:32] *** Joins: geeknix (~pi@2001:e68:5432:518e:7d14:5ca5:9ed8:f278)
[02:10:18] *** Quits: Alleria (~textual@user/alleria) (Ping timeout: 272 seconds)
[02:11:43] *** Quits: nshirelaptop (~nshire@user/nshire) (Ping timeout: 260 seconds)
[02:12:57] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Ping timeout: 260 seconds)
[02:14:34] <duuude> how is Java a toy language compare to .NET?
[02:14:40] <duuude> ProfSimm
[02:14:56] *** Joins: wakeup (~wakeup@user/wakeup)
[02:15:10] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[02:16:24] <entropygain> bomb: what signals that MSFT is more invested in typescript than C#?
[02:20:36] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Remote host closed the connection)
[02:20:55] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[02:22:13] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:23:18] *** Joins: kaph (~kaph@151.35.76.11)
[02:24:21] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:24:30] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:25:44] *** Joins: Alleria (~textual@user/alleria)
[02:25:45] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[02:25:45] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[02:25:47] *** Joins: kaph (~kaph@151.35.76.11)
[02:28:03] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[02:28:03] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[02:28:03] *** Joins: resamvi (~resamvi@user/resamvi)
[02:29:22] *** Quits: learner36 (~learner36@2607:fea8:129f:c220:9406:ea6c:f7b0:cb3f) (Remote host closed the connection)
[02:29:23] *** Joins: wakeup (~wakeup@user/wakeup)
[02:30:33] *** Quits: Crucifyy (~crucifyy@2601:300:8100:ec80:1d85:8708:c60a:2580) (Remote host closed the connection)
[02:32:13] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[02:34:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:35:03] *** Joins: xa0s (~xa0s@mab.sdf.org)
[02:35:28] *** Quits: jazzy (~jaziz@user/jaziz) (Remote host closed the connection)
[02:41:05] *** Quits: tvenissat (~cockeye@2600:1700:6f73:a490:baca:3aff:fe81:61fa) (Remote host closed the connection)
[02:41:31] <ProfSimm> duuude: C# is quite a lot ahead in areas like: async/fibers, hosting multiple languages with distinct semantics (not as a hack like Scala/Clojure/Kotlin does it), directly working with memory (think pointer algebra, but typesafe and overflow safe), compact SoA and AoS without "boxing" primitives, and so on
[02:41:50] <ProfSimm> duuude: I meant .NET above , not C# specifically, but applies to C# too
[02:41:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:42:08] <ProfSimm> duuude: I'll also throw in LINQ because data is important.
[02:42:41] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:43:32] <Decker> .NET is slow compared to C and manually managed object lifetimes.  
[02:43:41] <Decker> but speed that's important is TTM not execution.
[02:43:44] *** Quits: magla (~gelignite@55d411d7.access.ecotel.net) (Quit: Stay safe!)
[02:43:46] *** Joins: Satin (uid193953@user/Seten)
[02:44:06] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[02:44:51] *** Joins: kaph (~kaph@151.35.76.11)
[02:45:19] *** Quits: Psybur (~Psybur@c-76-123-45-25.hsd1.va.comcast.net) (Ping timeout: 260 seconds)
[02:45:37] *** Quits: duuude (~user@user/duuude) (Ping timeout: 250 seconds)
[02:45:38] *** Joins: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba)
[02:46:12] <ProfSimm> Decker: I don't think it's slow, although of course one could dig up examples. C is needed because: 1) cross-platform 2) ABI compat 3) bootstrapping code /you don't want runtimes and GC there/ and kernel code
[02:46:24] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[02:46:36] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-35d1-5cea-e5cb-89b0.inf6.spectrum.com) (Ping timeout: 240 seconds)
[02:46:37] <Decker> ProfSimm simd
[02:46:44] <ProfSimm> Decker: .NET can be however much faster than JVM because of the native structs/values, i.e. inline, compact in memory, memory locality
[02:46:52] <ProfSimm> Decker: what about simd
[02:46:57] <abraham> Hello
[02:47:16] <Decker> there's a lack of it - you can't lay out structures in memory ... (well you sort of can with a lot of code)
[02:47:39] <Decker> automatic object lifetime tracking is expensive... 
[02:48:38] *** Quits: newwebdev13 (~newwebdev@78.135.91.44) (Remote host closed the connection)
[02:48:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[02:50:39] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Remote host closed the connection)
[02:50:59] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[02:51:45] *** Joins: freakazoid333 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com)
[02:51:46] *** Quits: kaph (~kaph@151.35.76.11) (Read error: Connection reset by peer)
[02:52:30] *** Quits: Leone (~Leo@216.154.4.77) ()
[02:53:31] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:54:40] *** Quits: znedw54419 (~znedw@home.znedw.com) (Quit: Ping timeout (120 seconds))
[02:54:43] <bomb> ProfSimm C#'s reified generics are full of problems compared to Java's erased generics, which aren't perfect either. for example, it makes .NET difficult to target for other languages compared to JVM, which enjoy Clojure, Scala, Kotlin, JavaScript, Python, Groovy, and several minor ones
[02:54:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:55:01] *** Joins: znedw54419 (~znedw@home.znedw.com)
[02:56:50] <ProfSimm> bomb: you can always erase generics in .NET, it has dynamic types
[02:57:54] <bomb> Java has dynamic types for 5 years
[02:58:07] <bomb> type inference, to be precise
[02:58:53] *** Joins: YourNick (~YourNick1@178-222-24-139.dynamic.isp.telekom.rs)
[02:59:02] <ProfSimm> bomb: inference and dynamic types are different things. 
[02:59:08] <bomb> async/await isn't a good programming model, and they consume the same amount of memory like traditional threads
[02:59:15] <ProfSimm> bomb: I mean basically things having type Object
[02:59:30] <bomb> moreover Java is going to have coroutines
[02:59:44] <ProfSimm> bomb: they don't consume the same amount of memory as threads... there's literally no thread
[02:59:57] *** Quits: YourNick (~YourNick1@178-222-24-139.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[02:59:57] <ProfSimm> bomb: yes it's going to have and I'm waiting for them. And they never come
[03:00:09] *** Joins: YourNick (~YourNick1@178-222-24-139.dynamic.isp.telekom.rs)
[03:00:17] *** Quits: YourNick (~YourNick1@178-222-24-139.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[03:01:29] <bomb> ProfSimm because Java is used 100 times more than C#, you can't just throw new features into the language like Microsoft can
[03:02:21] *** Joins: zaher (~zaher@37.48.159.74)
[03:03:11] <bomb> ProfSimm about async/await, you're confusing C++'s with C#'s. async/await in C# occupies the same amount of space as threads
[03:03:48] *** Quits: Akuli (~Akuli@87-94-109-69.bb.dnainternet.fi) (Quit: Akuli)
[03:04:17] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[03:05:07] *** Joins: joev (~joev@user/joev)
[03:06:15] *** Quits: Likorn (~Likorn@c114-150.icpnet.pl) (Quit: WeeChat 3.4.1)
[03:07:29] <littlebobeep> bomb: What does JavaScript and Python have to do with JVM?
[03:07:44] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[03:08:00] *** Quits: pipapipapibo (~pipapipap@c-67-160-123-241.hsd1.wa.comcast.net) (Remote host closed the connection)
[03:09:07] <bomb> littlebobeep he claimed .NET is capable of hosting multiple languages while JVM can't
[03:09:19] *** Joins: freakazoid343 (~matt@35.136.233.205)
[03:10:21] <kee> JVM can totally host multiple languages.
[03:10:28] *** Quits: Tazy (~Tazmainia@2001:1c02:1708:6800:9405:725b:6125:a200) (Quit: Leaving)
[03:10:33] <kee> It's effortful to cram them into the Java object model, but it's always possible.
[03:10:49] <kee> Oh, but ProfSimm said that.
[03:11:16] <bomb> it's much less work than targeting CLR
[03:11:23] *** Quits: freakazoid333 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com) (Ping timeout: 250 seconds)
[03:11:51] <bomb> reified generics forces languages to comply C# semantics
[03:12:22] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[03:12:37] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:12:40] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Ping timeout: 250 seconds)
[03:12:48] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[03:13:32] *** Quits: dudek (~dudek@185.150.236.127) (Quit: Leaving)
[03:13:44] <littlebobeep> bomb: Okay I do not know about JVM hosting multiple languages where can I read about this?
[03:14:12] *** Quits: jaysicks (~jaysicks@91-82-251-185.pool.digikabel.hu) (Remote host closed the connection)
[03:14:49] <bomb> littlebobeep for reference kind of stuff, here JVM docs: https://docs.oracle.com/javase/specs/jvms/se17/html/index.html
[03:14:50] <bayaz> Title: The Java? Virtual Machine Specification 
[03:15:10] <bomb> littlebobeep for more practicality, I'm going to read this one: https://craftinginterpreters.com/
[03:15:11] <bayaz> Title: One moment, please... 
[03:15:23] *** Quits: freeworld (~freeworld@chello085216193138.chello.sk) (Ping timeout: 246 seconds)
[03:15:36] <kee> bayaz: Cloudflare strikes again!
[03:15:45] <bomb> littlebobeep I don't know about the content yet, but he uses Java to write a scripting language interpreter and parser. don't know if he makes use of JVM at all
[03:15:51] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[03:15:52] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[03:15:52] *** Joins: resamvi (~resamvi@user/resamvi)
[03:16:31] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[03:16:46] <ProfSimm> bomb: doesn't make sense because async/await is literally running in the same thread
[03:17:06] <ProfSimm> bomb: and it's used with APIs which in many cases are natively async
[03:17:21] <ProfSimm> bomb: WinRT is all async for ex.
[03:17:40] <Decker> by message dispatch
[03:17:46] *** Joins: DasBrain (~DasBrain@user/dasbrain)
[03:17:54] <Decker> hooray for a core message loop for communicating with tasks
[03:18:10] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[03:18:55] *** Quits: swp (~Thunderbi@143.176.249.0) (Ping timeout: 260 seconds)
[03:20:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[03:21:15] *** Quits: DasBrain_ (~DasBrain@user/dasbrain) (Ping timeout: 260 seconds)
[03:21:50] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[03:23:43] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[03:24:24] *** Quits: Enitin (~Enitin@82.180.145.230) (Remote host closed the connection)
[03:24:40] *** Joins: Enitin (~Enitin@82.180.145.230)
[03:25:13] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:25:49] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[03:28:13] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[03:29:11] <bomb> ProfSimm I don't know WinRT. does it use Windows fibers?
[03:31:24] <bomb> ProfSimm async/await exists as an upgrade to cumbersome callbacks, but for doing "real word" stuff you still need threads, which C# async/await also fire when needed
[03:31:24] *** Joins: duuude (~user@user/duuude)
[03:31:36] <kee> So it's green threading?
[03:31:40] <bomb> probably making use of smart thread pooling mechanism
[03:32:01] *** Joins: godSend23 (~sjWiz@2600:1700:e840:6c30:3937:6d93:27b0:3899)
[03:32:07] <bomb> .NET threads are green threads yeah, not OS threads
[03:32:09] <ProfSimm> bomb: async/await doesn't spawn any threads
[03:32:09] <godSend23> hey all
[03:32:14] <bomb> has its own scheduler
[03:32:41] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[03:32:46] <bomb> ProfSimm except it does, it just not visible to us
[03:32:51] <ProfSimm> bomb: no, it doesn't
[03:32:57] <ProfSimm> bomb: as in full stop it doesn't
[03:33:01] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[03:33:20] <bomb> ProfSimm you're basically incorrect
[03:33:20] <kee> It doesn't in any language I've ever used, but are you sure C# isn't the one exception?
[03:33:27] *** Quits: pizdets (~pizdets@183.182.115.164) (Ping timeout: 260 seconds)
[03:33:43] *** Joins: pizdets_ (~pizdets@183.182.115.90)
[03:34:02] <Decker> well... if you count green threads as threads, which is just a schedule for message queue dispatch
[03:34:14] <ProfSimm> bomb: https://blog.stephencleary.com/2013/11/there-is-no-thread.html
[03:34:14] <bayaz> Title: There Is No Thread 
[03:34:42] <ProfSimm> Decker: bomb said async/await takes as much RAM as spawning threads, so we can assume they don't mean green threads
[03:35:31] *** Parts: godSend23 (~sjWiz@2600:1700:e840:6c30:3937:6d93:27b0:3899) (Leaving)
[03:35:40] <ProfSimm> A green thread is not a thread at all.
[03:36:36] <kee> There aren't green threads, either.
[03:36:37] <ProfSimm> bomb, https://moviecultists.com/does-await-create-a-new-thread-c
[03:36:38] <bayaz> Title: Does await create a new thread c#? 
[03:36:40] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[03:36:46] <bomb> ProfSimm I don't have time to read that article, but the title is utter nonsense. threads (.NET threads) are created seamlessly in the background when you use async/await
[03:36:48] <kee> It's bog-standard co-routine async.
[03:36:59] <kee> bomb: I've read enough of the article to know you're wrong.
[03:37:04] *** Quits: Blackajack_ (~Blackajac@user/Blackajack) (Ping timeout: 272 seconds)
[03:37:15] <kee> Didn't take long. (The article could be lying, but it makes a lot of bold, easily-verifiable claims…
[03:37:18] <kee> )
[03:37:28] <ProfSimm> bomb: Windows has recently added so many async APIs, that if you tell them they spawn threads they'll laugh in your face.
[03:37:56] <bomb> so many
[03:38:06] <bomb> cool
[03:38:21] <bomb> so what was async/await doing BEFORE?
[03:38:42] <kee> The async / await wasn't the thing spawning threads.
[03:38:43] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 260 seconds)
[03:39:22] <ProfSimm> bomb: async/await is not doing anything. Can you bridge a thread (or a task in a pool) through it? Yes. You can bridge anything async through it. But async itself doesn't spawn threads, doesn't maintain pools of threads, and Windows APIs of last decade almost don't block the thread, so need no threads.
[03:40:05] <ProfSimm> If it doesn't block the thread, why make a thread? It makes no sense.
[03:40:13] <bomb> <bomb> ProfSimm async/await exists as an upgrade to cumbersome callbacks, but for doing "real word" stuff you still need threads, which C# async/await also fire when needed
[03:40:15] <bomb> <bomb> probably making use of smart thread pooling mechanism
[03:40:35] <bomb> you need to work on reading comprehension before getting into C#
[03:40:44] <ProfSimm> bomb: and that's wrong what you said
[03:40:49] <ProfSimm> And still is
[03:40:57] <bomb> you're repeating what I said
[03:41:02] <kee> Can you both assume good faith here? (And by "both" I mean bomb.)
[03:41:13] <ProfSimm> bomb: now you need to do some reading comprehension
[03:41:14] <kee> It reads to me like ProfSimm is saying something slightly different to you, bomb.
[03:41:19] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 260 seconds)
[03:41:30] <ProfSimm> bomb: I said you CAN wire a thread through async. I didn't say that's what Windows IO does
[03:41:38] <ProfSimm> bomb: and it doesn't
[03:41:38] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[03:41:42] <flaqoniun> c# is bloatware
[03:42:26] <ProfSimm> You can use async to call another server too. Doesn't mean async needs to spawn new server to do everything.
[03:42:29] <ProfSimm> There's a difference...
[03:42:41] <arahael> async/await likely doesnt work as you expect - in c# it will implicitly set up a state machine designed for tracking all these asynchroniously.  i have a book somewhere at work explaining it.
[03:43:00] <arahael> you really need to not second guess that state machine.
[03:43:34] *** Quits: fragment4 (~pulsian@host86-161-210-209.range86-161.btcentralplus.com) (Quit: leaving)
[03:43:44] *** Quits: zaher (~zaher@37.48.159.74) (Ping timeout: 246 seconds)
[03:44:10] <kee> Coöperative multitasking (async/await) is the only place so far I've seen state machines actually be the right way to do it.
[03:44:44] <ProfSimm> kee: I don't know why people start talking about state machines in this context. Technically your entire program is a state machine, always has been.
[03:44:50] <arahael> yeah just c# has a hidden state machine that is non-intuative for me as i am used to having it be somewhat explicit.
[03:44:53] *** Joins: fragment4 (~pulsian@host86-161-210-209.range86-161.btcentralplus.com)
[03:45:01] <kee> arahael: It's not implicit.
[03:45:21] <arahael> kee: in c# it is.  and very different to f#'s implementation.
[03:45:32] <arahael> or at least it was 5 years ago when i was using it.
[03:45:36] <kee> Is C#'s implementation the same as Rust's?
[03:45:42] <arahael> kee: no.
[03:45:58] <epony> Borland vs Netscape
[03:46:15] <epony> or much rather Microsoft vs Mozilla
[03:46:26] <epony> why would they have much in common..
[03:46:36] <epony> they are arch enemies
[03:46:39] <kee> Because Rust's way is very close to the obvious way.
[03:46:47] *** Joins: zaher (~zaher@37.48.159.74)
[03:47:00] <kee> Does anyone have a good explanation of how C# does it?
[03:47:01] <epony> as much as Netscape is a language design studio..
[03:47:44] <ProfSimm> kee: do you know how generators work in Python or JS
[03:47:47] <arahael> kee: actually it might well be similae but i need to look into it more - this article i just found is intriguing: https://www.matthewathomas.com/programming/2021/09/16/async-await-csharp-rust.html
[03:47:48] <bayaz> Title: Async and Await in C# vs Rust - Matthew A. Thomas 
[03:47:50] <kee> ProfSimm: I do.
[03:47:55] <ProfSimm> kee: well that's it
[03:47:56] <arahael> *similar
[03:47:58] <kee> Hm.
[03:48:02] <kee> Yeah, that's the same as Rust's.
[03:48:08] <kee> It's an explicit state machine.
[03:48:22] <kee> When you right `await`, it does a Python `yield from`.
[03:48:26] <epony> async is supposedly library tooling rather than language constructs
[03:48:26] <kee> s/right/write/
[03:48:42] <arahael> kee: we might differ as to what "explicit" means, i find python's implementation very different.
[03:48:49] <kee> Eventually, miles down the call stack, something says "I can't go any more".
[03:48:54] <kee> So then that bubbles up.
[03:49:04] <kee> And then the executor executes the next pending task.
[03:49:09] <epony> that's more likely to be "attacked" by a concurrent (first) design language (that golang tries to be)
[03:49:32] <kee> arahael: The details vary.
[03:49:40] <kee> But the state machine is nearly identical.
[03:49:51] <epony> but again, nothing changes that to be a library, rather than language feature, since microprocessors do not have the support for that functionality, that golang and others are inventing as "threading" variations
[03:50:14] <arahael> kee: when i say "explicit", i mean that the programmer explicitly sets up the concurrency model and any pools required, and explicitly evaluates or triggers the async methods from which they explicitly request a future from.
[03:50:21] <epony> I would really not be concerned with implementation details, unless I was working on the library of the language itself..
[03:51:06] <kee> arahael: The pools and stuff is just the async executor.
[03:51:14] <kee> It's probably explicit, if you try hard enough.
[03:51:19] <arahael> kee: C# and javascript's async/await model (which is very very different to even C#) are both implicit to me.
[03:51:23] <epony> and then again, event programming methodologies might be more reasonable, since you have interrupt mechanisms in hardware and memory registers and what not, to get the "real" support (or pretend it is there)
[03:51:54] <epony> the rest is purely speculative separation of various threading and not really getting separate hardware features used in them
[03:52:06] <kee> arahael: You don't need any thread pools or whatever.
[03:52:07] <ProfSimm> I have no idea what you mean by implicit/explicit, but I'll assume you mean native/emulated.
[03:52:07] <epony> so.. software details mostly
[03:52:11] <kee> JavaScript doesn't have thread pools; it's completely singlethreaded.
[03:52:16] <arahael> kee: depends on the concurrency model.
[03:52:26] <kee> arahael: No, JavaScript doesn't have thread pools.
[03:52:29] <kee> Full stop.
[03:52:36] <kee> ServiceWorkers can't be used to implement thread pools, not really.
[03:52:40] <ProfSimm> JS has spaghetti stacks.
[03:52:51] <kee> ProfSimm: What's a spaghetti stack?
[03:52:53] <ProfSimm> Or something of the sort. 
[03:53:13] <arahael> kee: c#'s async/await can use multiple threads.  javascript does have threads, but you're right javascript's async model is fully single threaded.
[03:53:26] <epony> embeddable languages are like that.. have to be small and minimal and somewhat restricted to be unable to operate as full stack independent languages
[03:53:32] *** Quits: Tangent-Man (~Tang3nt-M@mutantalien.plus.com) (Ping timeout: 246 seconds)
[03:53:39] <ProfSimm> kee: it's like a tree where children point to parents instead of parents to children. Branching stack. Means a function can suspend, and preserve its state and resume later.
[03:53:45] <epony> and they still get filled up like that over the years, only never ever being solid and stable from the get go
[03:53:50] <ProfSimm> kee: while meanwhile you run other things
[03:53:55] <ProfSimm> kee: continuations in short
[03:54:11] <kee> JS doesn't really have that.
[03:54:16] <kee> It just has closures.
[03:54:29] <kee> If it really had spaghetti stacks, you'd get stack overflows really… oh.
[03:54:37] <kee> I've perhaps been doing it all wrong.
[03:54:44] <arahael> kee: JS implementations might, though. this is what i am hinting at when i say something is implicit.
[03:54:58] <epony> https://en.wikipedia.org/wiki/Async/await#History
[03:54:58] <bayaz> Title: Async/await - Wikipedia 
[03:55:21] <ProfSimm> It really doesn't matter much if JS has it, or it's a source code transform. The former is bit faster, and that's it.
[03:55:39] <ProfSimm> You may have seen how TypeScript did async before JS had it
[03:55:54] <kee> JS has always had async.
[03:56:01] <arahael> kee: no, it didnt :)
[03:56:04] <kee> You can implement Promises in pure JS.
[03:56:05] <ProfSimm> :/
[03:56:13] <kee> Pure ES5.
[03:56:15] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 260 seconds)
[03:56:16] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Remote host closed the connection)
[03:56:18] <ProfSimm> kee: we're talking about "async" not about Promises
[03:56:20] <epony> https://en.wikipedia.org/wiki/Coroutine#Comparison_with
[03:56:20] <bayaz> Title: Coroutine - Wikipedia 
[03:56:29] <kee> async's implemented using promises, though?
[03:56:34] <ProfSimm> kee: it is
[03:56:34] <arahael> kee: you're betraying your age a bit here!  javascript was around long before ES5.
[03:56:48] <kee> arahael: I'm aware, but I can't remember when they invented events.
[03:56:53] <kee> Pretty sure it was the first version.
[03:56:58] <kee> But I'm not 100% sure, so ES5 it is.
[03:57:00] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[03:57:04] <ProfSimm> We're not talking about this.
[03:57:22] <ProfSimm> We're talking about awaiting an event in the middle of your async function
[03:57:30] <ProfSimm> Now about calling an event handler
[03:57:37] <ProfSimm> Not*
[03:57:48] <kee> foo(); var x = await bar(); baz(x);
[03:57:52] <kee> This is equivalent to:
[03:58:00] <kee> foo(); bar.then(baz);
[03:58:35] <ProfSimm> kee: except after await you don't necessarily have a convenient closure only
[03:58:36] <beaky> adhoc do notation
[03:58:38] <epony> basically, it's a single SP.. "In order to implement general-purpose coroutines, a second call stack must be obtained, which is a feature not directly supported by the C language. A reliable (albeit platform-specific) way to achieve this is to use a small amount of inline assembly to explicitly manipulate the stack pointer during initial creation of the coroutine."
[03:58:40] <kee> I don't see how this is implicit. The await keyword is veeery clear about what it's doing.
[03:58:50] <kee> ProfSimm: But it can always be converted into one.
[03:58:57] <ProfSimm> kee: of course it can
[03:59:06] <kee> So… I don't see where the implicitness comes in.
[03:59:18] <ProfSimm> kee: from the fact you don't have to convert it and make a callback mess
[03:59:25] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[03:59:27] <kee> The state machine is just as explicit as a callback mess, though.
[03:59:46] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[03:59:46] <ProfSimm> kee: in JS it's not a "state machine" per se, it's just suspendable functions.
[03:59:48] <kee> That's what the await keyword means.
[03:59:53] <arahael> kee: we're talking at a differenr degree of abstraction i think.
[03:59:56] <kee> ProfSimm: It's as much of a state machine as the Rust implementation.
[04:00:05] <ProfSimm> kee: great.
[04:00:08] <kee> Just Rust does the magic at compile time and JS does it at runtime.
[04:00:18] <kee> Well, JS does it at compile time too, probably.
[04:00:25] <ProfSimm> As I said earlier it doesn't matter much
[04:00:35] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com)
[04:00:46] <kee> Not to your original point, no, but I think we've got a consensus that you were right about that. :-)
[04:01:01] <ProfSimm> kee: JS does it via runtime support as it's more efficient, but you can emulate it 1:1 without runtime support as TypeScript did, and C# does
[04:01:16] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[04:01:17] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) (Client Quit)
[04:01:33] <ProfSimm> And Rust, I suppose also, because Rust has to interop with C ABI
[04:01:40] <kee> No, that's not right at all.
[04:01:51] <ProfSimm> What isn't
[04:01:54] <kee> It's only more efficient in JS because JS doesn't let you do stack frame magic natively.
[04:02:08] <arahael> ProfSimm: only at the abi boundaries.
[04:02:09] <ProfSimm> Dunno what that means but
[04:02:19] <kee> What TypeScript did before the await keyword.
[04:02:24] <ProfSimm> arahael: well, that might be anywhere no
[04:02:24] <kee> That's slower than runtime support.
[04:02:28] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[04:02:30] <kee> What Rust does doesn't need runtime support.
[04:02:42] <arahael> ProfSimm: true enough!
[04:03:09] <ProfSimm> kee: it ideally needs it, but Rust doesn't have the luxury.
[04:03:32] <arahael> infound c# implicitness frustrating at the boundary - especially when i lot of legacy async void crap.
[04:03:38] <arahael> *i found...
[04:03:40] *** Quits: freakazoid343 (~matt@35.136.233.205) (Ping timeout: 272 seconds)
[04:04:12] <kee> ProfSimm: How would a runtime make things better?
[04:04:23] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 260 seconds)
[04:04:25] <arahael> c#'s implementation *really* likes it when it can return a Task<> under the hood.
[04:05:49] *** Quits: bomb (~bomb@user/bomb) (Quit: ‎)
[04:05:53] <epony> "There's no official support for await/async in the C language yet. Some coroutine libraries such as s_task simulate the keywords await/async with macros."
[04:06:03] <epony> https://en.wikipedia.org/wiki/Event-driven_programming#Common_uses
[04:06:03] <bayaz> Title: Event-driven programming - Wikipedia 
[04:06:17] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[04:06:17] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[04:06:17] *** Joins: resamvi (~resamvi@user/resamvi)
[04:08:06] <epony> https://en.wikipedia.org/wiki/Interrupt#Performance
[04:08:07] <bayaz> Title: Interrupt - Wikipedia 
[04:08:09] *** Quits: Donitz (~Donitz4@88-115-149-215.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[04:08:12] <arahael> epony: i really wouldnt bother with such things in C.
[04:08:45] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 256 seconds)
[04:08:45] <ProfSimm> kee: we have a stack. It can't do coroutines. So functions that need to act as ones need to be broken apart into separate functions, and their shared state thrown on the heap. You can see how this is not ideal
[04:08:50] *** Joins: Donitz (~Donitz4@88-115-149-215.elisa-laajakaista.fi)
[04:09:39] <epony> https://en.wikipedia.org/wiki/Scheduling_(computing)#Scheduling_disciplines
[04:09:40] <bayaz> Title: Scheduling (computing) - Wikipedia 
[04:10:00] *** Quits: dislabled (~dislabled@115.229.164.82.customer.cdi.no) (Ping timeout: 272 seconds)
[04:10:34] <nomagno> epony: I literally just finished making a preemptive scheduler you're going to love
[04:10:40] <nomagno> https://termbin.com/dmzv
[04:10:41] <bayaz> Type: text/plain; charset=utf-8 
[04:10:47] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[04:10:52] <ProfSimm> kee: in contrast, if we support it natively, control can leave a function and come back any time, with no additional work
[04:10:54] <nomagno> You terminate all your lines with '$' instead of ';' now
[04:10:56] <kee> ProfSimm: But you can turn that whole "shared state" thing into a state machine.
[04:11:09] <ProfSimm> kee: what do you think a state machine is anyway
[04:11:14] <kee> You probably don't need unbounded stack space.
[04:11:20] <ProfSimm> kee: it's bunch of function slices and heap allocations
[04:11:21] <kee> It can be a finite state machine, which is just a Sized type.
[04:11:41] <ProfSimm> kee: and jump tables if you're unlucky
[04:11:50] <kee> No, a state machine is a mathematical abstraction: a pretty fundamental representation of what a computation is.
[04:12:12] <ProfSimm> kee: I mean why do you use this phrase for async functions
[04:12:13] <kee> Depending on what the code looks like, you can implement it more efficiently than a bunch of function slices and heap allocations.
[04:12:19] <kee> ProfSimm: Because somebody else did.
[04:12:21] <ProfSimm> kee: everything is a state machine in the general sense
[04:12:24] <kee> I don't use that phrase for async functions.
[04:12:37] <ProfSimm> Anyway
[04:12:56] *** Quits: nsk_nyc (~nsk_nyc@network45-238-142-host-234.inethn.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:13:11] <ProfSimm> I actually don't like async/await. It's firmly in the "better than nothing" category
[04:13:29] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com) (Read error: Connection reset by peer)
[04:13:37] <ProfSimm> Coroutines should be native and the default. But as we see with Java it ain't so easy
[04:14:09] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com)
[04:14:42] <kee> Coroutines can't do unlimited recursion.
[04:14:58] <kee> You will always have to represent them as a pointer to a stack on the heap, ultimately.
[04:15:14] <kee> And you don't need a runtime to do that! Linux supports that, as I think you argued before.
[04:15:19] <ProfSimm> Not sure why you think that
[04:15:33] <ProfSimm> I haven't argued what Linux supports
[04:15:48] <ProfSimm> kee: do you know how continuations work
[04:15:58] <kee> I do.
[04:16:06] <kee> ProfSimm: I mean yesterday or the day before.
[04:16:09] <ProfSimm> kee: they enable TCO which means infinite recursion, they also enable coroutines
[04:16:15] <ProfSimm> So, no problem there
[04:16:21] <kee> TCO doesn't mean infinite recursion.
[04:16:29] <kee> It means you can do looping using a return statement.
[04:16:42] <arahael> kee: semantics.
[04:16:45] <CalimeroTeknik> and TCE is when the language guarantees it :)
[04:16:51] <ProfSimm> kee: it's not just about looping
[04:17:01] <ProfSimm> kee: you don't have to call *yourself* you know
[04:17:03] <kee> arahael: No, unlimited recursion can have branches.
[04:17:15] *** Joins: zaher_ (~zaher@37.48.144.143)
[04:17:29] <ProfSimm> kee: so continuations then allow that. Problem solved
[04:17:34] <arahael> kee: unlimited is as good as infinite in almost all cases.
[04:17:40] <kee> ProfSimm: They don't.
[04:17:47] <ProfSimm> kee: uh huh
[04:17:51] <kee> Naïve Fibonacci.
[04:18:09] <kee> You will stack overflow calculating f(1000000000000000000000) that way.
[04:18:23] <kee> TCO only works if you're returning the result of the function.
[04:18:38] <kee> return f(n-1) + f(n-2); can only be optimised a little with TCO; it still requires recursion.
[04:18:51] <InPhase> Coroutines are mostly a cheap hack to avoid thinking about threading architectures.  I'm not a big fan of them, as they are an in-between thing that doesn't scale well.
[04:18:57] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[04:18:59] <ProfSimm> kee: continutations actually have no concept of returning from a function
[04:19:12] <kee> You mean continuation-passing style?
[04:19:33] <dTal> I always thought "naive" fibbonacci was the simple iterative one (that works in constant space and linear time) and the double recursive one was the "enlightened" one that managed to be worse in every way
[04:19:39] <epony> https://en.wikipedia.org/wiki/Process_state#Running
[04:19:39] <bayaz> Title: Process state - Wikipedia 
[04:19:41] <arahael> kee: depends on what younmean by "style" ;)
[04:19:44] <ProfSimm> I mean continuations. If you use them, every call is a tail call :P
[04:19:59] <kee> Oh, that's just semantics.
[04:20:05] <epony> "There is at most one running process per CPU or core."
[04:20:14] <kee> For naïve Fibonacci, you're still keeping a stack. You're just keeping it somewhere else.
[04:20:15] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[04:20:21] <kee> I don't see why we can't call that a call stack.
[04:20:29] *** Quits: zaher (~zaher@37.48.159.74) (Ping timeout: 246 seconds)
[04:20:45] <OverCoder> `Content-Type` header can be easily spoofed
[04:20:48] <ProfSimm> kee: the problem is not that we keep a stack, but that we keep state in general. Obviously state can't be "infinite"
[04:20:51] <epony> how efficiently you're wasting that resource, means.. you must have interleaving of your "general" threading model
[04:20:54] <OverCoder> how do I validate an uploaded file is actually, for example, audio
[04:20:55] <arahael> kee: yeah, lets get rid of the stack... put it all on the heap instead ;)
[04:20:58] <OverCoder> Is there really a reliable way to do that?
[04:21:09] <ProfSimm> anyway ttyl
[04:21:10] <OverCoder> How do bigger companies handle this
[04:21:13] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[04:21:18] <Decker> OverCoder there's usually signature bytes at the start
[04:21:20] <kee> OverCoder: There is not. They just… don't handle it.
[04:21:28] <OverCoder> hm
[04:21:30] <arahael> OverCoder: badly ;)
[04:21:37] <kee> YouTube re-encodes everything, which drops the quality.
[04:21:47] <kee> But it does mean you can't smuggle non-audiovisual data files in.
[04:21:53] <OverCoder> so you're basically saying I could upload a PDF to YouTube?
[04:22:03] <OverCoder> at least finish the request that is, even if reencoding fails
[04:22:11] <Decker> it'llprobably reject it since the signature doens't match anything it knows to process
[04:22:15] <epony> pretending your application to be a scheduler system is not realistic, it's simply.. running in some part of the available time (sharing) on a CPU core (some CPUs provide HW thread support though)
[04:22:23] <Decker> you could use OBS and record you scrolling through the PDF
[04:22:31] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[04:22:35] <OverCoder> aha
[04:23:06] <kee> If you upload a modified PDF that tricks YouTube into thinking it's a video file, it'll re-encode it.
[04:23:08] <epony> so these async and coroutine constructs are just in application "interleaving"
[04:23:16] <kee> So you will end up with garbage data that doesn't look like a PDF any more.
[04:23:30] *** Joins: dislabled (~dislabled@115.229.164.82.customer.cdi.no)
[04:23:34] <kee> But it does, when interpreted as a video, look similar to the original file you uploaded (when interpreted as a video).
[04:23:41] <kee> So this destructive operation is okay.
[04:24:38] <Decker> which I'm sure the data in the pdf don't make the video codec very happy... I guess you could say you encoded raw frames? and just use it as rgb bytes?
[04:24:42] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:24:50] <kee> Google has thought of all of this.
[04:25:03] <kee> Decker: Those raw frames are lossy-compressed. Have fun reversing that!
[04:25:25] <Decker> expand it and make the patches very wide and duplicated across frames
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:25:48] <Decker> but at that point you're just encoding a pdf to video anyway and it's still very far
[04:26:05] <Decker> what's with the fascination of making an A look like a B?
[04:26:31] <kee> OverCoder: So you see, there's no way of doing what you asked how to do.
[04:26:38] <kee> But what is the reason you wanted to do that?
[04:26:41] <PlanckWalk> You could probably hide another type of file's data in video data in some encoding that isn't utterly destroyed by lossy video compression, but it won't also be PDF format.
[04:26:46] <OverCoder> kee, I actually found this https://www.npmjs.com/package/file-type
[04:26:47] <bayaz> Title: file-type 
[04:26:51] <kee> OverCoder: Unreliable.
[04:26:53] <OverCoder> which at least checks the file header
[04:26:55] <OverCoder> yes
[04:26:55] <kee> I can spoof it.
[04:26:59] <OverCoder> but better than Content-Type
[04:27:08] <kee> Beware malicious payloads.
[04:27:15] <Decker> content-type usually just mirrors extension
[04:27:24] <kee> Somebody might upload an image that buffer-overflows something.
[04:27:25] <OverCoder> I'm angry
[04:27:28] <kee> They might upload a PHP file.
[04:27:29] <OverCoder> why is this not solved
[04:27:33] <kee> Because it's impossible!
[04:27:43] <OverCoder> buffer-overflows- WAIT
[04:28:00] <OverCoder> does that mean I can upload a 10000 gigapixel small image to my app and crash it
[04:28:05] <OverCoder> ok
[04:28:08] <kee> That's one possibility.
[04:28:15] * OverCoder is angrier
[04:28:17] <kee> Or it might be more subtle.
[04:28:18] <OverCoder> I have a question
[04:28:30] <OverCoder> is there some kind of cheatsheet to secure file uploads
[04:28:36] <kee> Not that I know of.
[04:28:38] <kee> It's a hard problem.
[04:28:38] <OverCoder> it sounds like there's way too many possibilities to explode things
[04:28:41] <OverCoder> ok
[04:28:53] <kee> What I do is just learn all of the many, many possibilities.
[04:29:03] <kee> OverCoder: What's your threat model?
[04:29:08] <PlanckWalk> If you treat them as raw blobs then it's a lot more secure than interpreting them.
[04:29:11] <OverCoder> what do you mean
[04:29:26] <OverCoder> PlanckWalk, I mean yes but they'll eventually be interpreted by front-ends
[04:29:37] <PlanckWalk> Yeah, but someone else's front end probably :)
[04:30:04] <OverCoder> that does not sound nice for the end user
[04:30:13] <PlanckWalk> If you want to allow uploading images and using them in your site, then ... yeah, that's not easy to keep sane.
[04:30:25] <PlanckWalk> Unless you only allow a very very limited set of formats.
[04:31:14] <InPhase> And of course then there is disallowed image content for valid images.
[04:31:47] <PlanckWalk> Yes
[04:32:18] <InPhase> Steganographic data packing is the least of concerns for a file upload site, considering the magnitude of the bad-images problem.
[04:32:27] <OverCoder> brb hacking former company i worked for
[04:32:36] <kee> If you let people upload arbitrary images, re-encode them.
[04:32:48] <kee> Here is how you re-encode the image:
[04:32:57] <PlanckWalk> ... and put strict resource limits on re-encoding.
[04:32:59] <kee> • Spin up a virtual machine.
[04:33:14] <kee> • Inside the virtual machine, run a bytecode interpreter.
[04:33:36] <kee> • On this bytecode interpreter, run an algorithm for outputting the width, height, then raw bytes of the image.
[04:33:36] <OverCoder> should a smol application do anything about this
[04:33:44] <OverCoder> I work on a pre-MVP product for a client
[04:33:48] <OverCoder> should I really do this for them
[04:33:49] <kee> Oh, then don't bother.
[04:33:49] <OverCoder> sounds overkill
[04:33:54] <kee> What's your threat model?
[04:33:56] <InPhase> brb making a python program to QR-code my evil data so I can store it on OverCoder's site.
[04:34:03] <OverCoder> but at the same time I can just kill their website in 1 file upload
[04:34:10] <kee> Can you?
[04:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[04:34:15] <OverCoder> probably
[04:34:17] <kee> You'd have to find a security vulnerability.
[04:34:17] <OverCoder> upload a gigapixel image
[04:34:18] <OverCoder> done
[04:34:24] <kee> That would surely be a large image.
[04:34:28] <OverCoder> nope
[04:34:29] <kee> Just add a threshold for the image file size.
[04:34:30] <PlanckWalk> Not a large file though!
[04:34:43] <kee> As has been said before, make it the client's problem.
[04:34:44] <OverCoder> 3.5 MiB is allowed for an image
[04:34:45] <epony> yeah, complicate the model of nesting as much as you like, you still get one and the same core to run your instructions sequentially
[04:34:50] <OverCoder> surely 1 gigapixel of white fits
[04:35:02] <kee> Firefox can display that image without crashing.
[04:35:08] <kee> I checked it. :-)
[04:35:24] <kee> So long as you don't unpack it to a bitmap, you'll be fine.
[04:35:53] <InPhase> kee: What was the RAM consumption on that?
[04:36:04] <OverCoder> "Here is a PNG image of 6,132,534 bytes (5.8 MB) and 225,000 × 225,000 pixels (50.625 gigapixels)"
[04:36:08] <epony> applications running in GPUs are probably your most interesting concern, after applications running on your NICs and BMCs
[04:36:12] <OverCoder> "which, if uncompressed and represented as a pixel buffer of 3 bytes per pixel, takes about 141.4 GB."
[04:36:16] <OverCoder> this isn't far from 3.5 MiB
[04:36:20] <kee> InPhase: Small.
[04:36:30] <kee> Less than 1% of Firefox's allocated memory, by my guesstimate.
[04:36:34] *** Quits: spacenautx (~spacenaut@user/spacenautx) (Quit: WeeChat 3.4.1)
[04:36:41] <OverCoder> kee, literally how
[04:36:42] <InPhase> kee: I guess they optimized for that as a safeguard.
[04:36:44] <kee> It didn't crash anything, which is amazing considering loading a webpage crashes Firefox more often than now.
[04:36:47] <kee> s/now/not
[04:36:57] <OverCoder> 1 gigapixel image should be 4 GB of ARGB bitmap in your RAM
[04:36:59] *** Quits: pmercado (~pmercado@190.22.83.12) (Quit: Konversation terminated!)
[04:37:06] <kee> OverCoder: It decodes a small chunk, then downsamples, then does the next.
[04:37:14] <OverCoder> O
[04:37:21] *** Joins: pmercado (~pmercado@190.22.83.12)
[04:37:26] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[04:37:29] <kee> Which is much cleverer than your server will be.
[04:37:32] <kee> So just don't decode on your server.
[04:37:40] <kee> Web browsers are used to not trusting websites.
[04:37:59] <OverCoder> ok
[04:38:00] <PlanckWalk> You can have a 100 kB image file which decompresses to petabytes
[04:38:04] <OverCoder> what about mobile app
[04:38:07] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:38:14] <OverCoder> I even use a third party library to display images
[04:38:20] *** Quits: joev (~joev@user/joev) (Ping timeout: 246 seconds)
[04:38:23] <PlanckWalk> (and will crash Firefox)
[04:38:26] <OverCoder> PlanckWalk, yes
[04:38:57] <kee> OverCoder: What's your threat model?
[04:39:03] <PlanckWalk> At least it only crashes that one rendering process, and not all the windows.
[04:39:05] <OverCoder> https://github.com/korczis/big-png/blob/master/spark.png
[04:39:06] <bayaz> Title: big-png/spark.png at master ? korczis/big-png 
[04:39:13] <kee> Who will attack your site?
[04:39:22] <OverCoder> kee, probably nobody for now
[04:39:26] *** Joins: joev (~joev@user/joev)
[04:39:43] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Client Quit)
[04:39:43] <flaqoniun> which process crashes if you serve a gzip bomb
[04:39:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:40:23] <kee> OverCoder: Don't worry about it for an MVP.
[04:40:31] <kee> Just write it down as “list of problems with the MVP”.
[04:40:40] <OverCoder> kee, that's what I thought I'd do
[04:40:55] *** Quits: mithrin (~mithrin@188-167-233-152.dynamic.chello.sk) (Quit: Leaving)
[04:41:10] <OverCoder> I'm having so many doubts now about every application I ever developed lol
[04:41:25] <InPhase> I can't get anything to crash on that spark.png image.  Everything refuses to load it politely.
[04:41:29] *** Quits: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 246 seconds)
[04:41:38] <kee> InPhase: Me too.
[04:41:41] <InPhase> "Insufficient memory to store a 225000 by 225000 image; try exiting some applications to reduce memory usage"
[04:41:49] <OverCoder> what
[04:41:52] <OverCoder> which image viewer is this
[04:41:56] <kee> OverCoder: Congratulations on your doubts!
[04:41:59] <Decker> nice :)
[04:42:01] <InPhase> I tried gliv and eog.
[04:42:02] <OverCoder> kee, it's actually marvelous
[04:42:06] <kee> Soon you'll develop unhealthy coping mechanisms.
[04:42:10] <kee> Try to hold that off as long as possible.
[04:42:17] <OverCoder> marvelous that I now know about this stuff
[04:42:22] <Decker> that doesn't mean that it didn't at some point have an issue
[04:42:40] <kee> OverCoder: My unhealthy coping mechanism is trying to revolutionise the entire field of CS, in order to fix these problems.
[04:42:40] <Decker> it's pretty simple to go 'oh okay allocte X, for each row...' 
[04:42:53] <OverCoder> NO
[04:42:59] <OverCoder> gimp was about to kill my computer
[04:43:15] <OverCoder> "EEEEeEeek! 2 GeglBuffers leaked" in the terminal too lol
[04:43:20] <Decker> it's just flushing swap :)
[04:43:22] <InPhase> It's really close.  I have 128GB to work with, and that image is 189GB.
[04:43:27] <kee> OverCoder: Run echo 1 | sudo tee /proc/sys/kernel/sysrq
[04:43:38] <OverCoder> what does
[04:43:39] <kee> That will enable the Alt+{PrintScr, F} command.
[04:43:47] <OverCoder> (x) doubt
[04:43:51] <kee> (Also, it'll enable all the other sysrq keys; be careful.)
[04:44:02] <kee> Hold alt, press print screen, then F after running that command.
[04:44:17] <kee> Kills the most memory-hogging process. (Probably. Might kill something else, instead. It's a bit random, though usually correct.)
[04:44:25] <OverCoder> ok
[04:44:29] <OverCoder> remembered that
[04:44:31] <kee> K kills the current X session.
[04:44:34] <kee> Not sure about any of the others.
[04:44:37] <OverCoder> not let's try something other than GIMP
[04:44:38] <InPhase> Trying gimp.
[04:44:41] <kee> K is enabled by default, F needs to be enabled manually.
[04:44:46] <kee> (On Debian, anyway.)
[04:45:02] <OverCoder> bye InPhase
[04:45:13] <InPhase> Progress bar is at 50%.
[04:45:32] <InPhase> 75%...
[04:45:52] <kee> InPhase: How do you have so much RAM?
[04:46:00] <OverCoder> Ristretto Image Viewer just hanged the CPU
[04:46:09] <OverCoder> (or was doing something before I felt like closing it)
[04:46:10] <InPhase> 64GB of physical RAM, 64GB of nvme that is pretty fast.
[04:46:40] <OverCoder> ok conclusion is
[04:46:46] <OverCoder> I need VMs to secure file uploads
[04:46:56] <InPhase> Progress bar got to 100% and it's thinking about it a bit...
[04:46:58] <OverCoder> good news is Docker can probably help
[04:47:18] <flaqoniun> meh
[04:47:22] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 272 seconds)
[04:47:26] *** Quits: norayr (376bc34bfc@37.252.78.253) (Ping timeout: 246 seconds)
[04:47:29] <InPhase> Hmm.  gimp is only at 34GB so far.
[04:48:00] <flaqoniun> file conversion is simple enough, you could make a new user account, chroot and seccomp if ur scared
[04:48:08] *** Quits: antranigv (~antranigv@37.252.78.252) (Ping timeout: 260 seconds)
[04:48:15] *** Joins: yiggityswaps (~yoyojambo@2806:108e:18:68ab:2c11:5120:5e46:16a1)
[04:48:19] *** Joins: antranigv_ (~antranigv@37.252.78.252)
[04:48:59] <flaqoniun> in a disabled netns
[04:49:04] <kee> flaqoniun: Then what happens if it performs a rowhammer attack?
[04:49:10] <kee> Oops, now it has access to kernel memory.
[04:49:28] <flaqoniun> lol buy real memory not cheap garbage
[04:49:45] <kee> You know, DDR4 is pretty vulnerable to it.
[04:49:57] <flaqoniun> sounds like faulty hardware
[04:49:59] <kee> But I do get your point. All consumer RAM is faulty.
[04:50:09] <flaqoniun> ECC memory?
[04:50:10] <kee> Curse you Intel, and your fight against consumer EEC.
[04:50:15] <kee> s/EEC/ECC/
[04:50:22] <kee> Error Errecting Codes
[04:50:24] <InPhase> gimp is churning on 1.5 cores and hovering around 36GB.  It needed a spare 30GB for the file-png process it used to open it, but that process has terminated and it's just down to gimp's 36GB that it's processing...  It sure is slow though.
[04:51:03] *** Quits: wauterboi (~wauterboi@185.65.135.160) (Ping timeout: 260 seconds)
[04:52:12] <flaqoniun> VM won't prtect you from rowhammer either
[04:52:12] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[04:52:20] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 246 seconds)
[04:52:23] <flaqoniun> so i dont know maybe give up on computing if ur scared
[04:52:38] <InPhase> VMs also don't protect you from real hammers.
[04:52:44] <kee> An unoptimised bytecode machine will protect you from rowhammer
[04:52:54] <flaqoniun> through magic and voodoo spells?
[04:52:57] <kee> Yeah!
[04:53:07] <kee> Basically by being slow enough that you can't do rowhammer. :-)
[04:53:09] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[04:53:13] <flaqoniun> oh, lol!
[04:53:41] <kee> And if you have a supervisor waiting in the wings for the bytecode machine to do something wrong, and immediately kill it.
[04:53:51] <kee> And also, prove your bytecode machine correct.
[04:54:02] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[04:54:03] <InPhase> This is the most boring image file open I've done in decades.  It's still processing.
[04:54:20] <kee> And why not add some explosives to the motherboard while you're at it?
[04:54:28] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[04:54:42] <kee> How to kill an infohazard? BOMBS.
[04:57:10] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[04:57:13] *** Joins: resamvi (~resamvi@user/resamvi)
[04:57:22] *** Joins: flaqoniun (~F@32.211.211.39)
[04:57:43] <InPhase> Oh hey!  spark.png opened successfully.  It needed about 64GB free to process the open in gimp, but then it leveled out to a mild 39.2GB.
[04:57:44] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:57:50] <InPhase> It turns out, spark.png is blue.
[04:58:08] <kee> InPhase: Even when you zoom in?
[04:58:39] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[04:58:50] <InPhase> Oh.  :)  In the middle in red it says, "Sorry, our princess is in another pixmap".
[04:59:58] *** Joins: nsk_nyc (~nsk_nyc@45.238.142.234)
[05:00:07] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[05:01:35] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[05:01:39] <InPhase> gimp reports that it is 267.5GB of image data, but by some magic it requires less than that to work with it.
[05:01:55] <Decker> it might do some RLE internally
[05:03:01] <kee> GIMP has to use some kind of magic compression.
[05:03:06] <kee> It supports undos.
[05:06:11] <InPhase> Well, that pointless exercise clearly justified all the money spent on that RAM.
[05:06:24] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[05:08:14] *** Joins: qaph (~weechat@user/qaph)
[05:08:19] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[05:09:37] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[05:11:05] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 256 seconds)
[05:11:07] *** qaph is now known as kron
[05:13:50] *** Quits: kusanagi_ (~kusanagi@user/kusanagi) (Read error: Connection reset by peer)
[05:15:10] *** Joins: kusanagi (~kusanagi@user/kusanagi)
[05:16:51] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Remote host closed the connection)
[05:18:24] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 272 seconds)
[05:18:29] *** Quits: steam (~steam@user/steam) (Remote host closed the connection)
[05:22:26] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[05:25:22] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 272 seconds)
[05:25:52] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[05:26:57] *** Quits: antranigv_ (~antranigv@37.252.78.252) (Ping timeout: 256 seconds)
[05:27:15] *** Joins: antranigv (~antranigv@37.252.78.252)
[05:31:55] *** Joins: erase (~erase@user/erase)
[05:34:34] *** Joins: kusanagi_ (~kusanagi@user/kusanagi)
[05:35:11] *** Quits: kusanagi (~kusanagi@user/kusanagi) (Ping timeout: 260 seconds)
[05:35:30] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 272 seconds)
[05:35:49] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:37:43] *** Quits: jamea (~jamea@177.239.82.103) (Ping timeout: 260 seconds)
[05:38:30] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:39:56] *** Joins: rcesptro_ (~rcesptro@180.246.14.92)
[05:39:56] *** Quits: zaher_ (~zaher@37.48.144.143) (Ping timeout: 272 seconds)
[05:39:59] *** Joins: vicfred (~vicfred@user/vicfred)
[05:40:02] *** Quits: rcesptro (~rcesptro@36.74.170.47) (Ping timeout: 260 seconds)
[05:41:36] *** Joins: beachpeach (~beachpeac@89-212-17-146.static.t-2.net)
[05:41:56] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[05:46:30] *** Joins: resamvi (~resamvi@user/resamvi)
[05:49:23] *** Joins: vysn (~vysn@user/vysn)
[05:50:36] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[05:51:03] *** Joins: Matt|home (~matt@adsl-74-233-58-147.mia.bellsouth.net)
[05:53:25] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[05:56:12] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[05:58:26] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[05:58:47] *** Quits: Matt|home (~matt@adsl-74-233-58-147.mia.bellsouth.net) (Read error: Connection reset by peer)
[05:59:13] *** Joins: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:00:11] *** Quits: erase (~erase@user/erase) (Remote host closed the connection)
[06:00:33] *** Joins: erase (~erase@user/erase)
[06:03:05] <beachpeach> is constexpr const char* const in any way different than const char* const ?
[06:04:15] <beachpeach> (in C++)
[06:04:38] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:04:39] *** Quits: rcesptro_ (~rcesptro@180.246.14.92) (Quit: ZNC 1.8.2 - https://znc.in)
[06:04:59] *** Joins: rcesptro (~rcesptro@180.246.14.92)
[06:08:51] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[06:09:31] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[06:11:12] <epony> see https://en.wikipedia.org/wiki/Zip_bomb  Apr04 0108<PlanckWalk> You can have a 100 kB image file which decompresses to petabytes
[06:11:13] <bayaz> Title: Zip bomb - Wikipedia 
[06:11:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 246 seconds)
[06:11:32] *** Joins: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net)
[06:11:49] *** Joins: veek (~veek@117.192.18.22)
[06:12:43] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[06:13:53] *** Quits: audio (~audio@user/audio) (Ping timeout: 260 seconds)
[06:15:36] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[06:16:34] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[06:17:00] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Remote host closed the connection)
[06:17:38] *** Joins: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[06:20:01] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[06:20:23] <phogg> I always keep a zip bomb handy. You never know when you might want one. Just one of many fun pranks.
[06:20:24] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[06:20:27] *** Quits: Inline (~Inline@p200300cd473cee00b1553510cacfa527.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:21:23] <epony> so did the late John McAffee
[06:23:25] <epony> https://en.wikipedia.org/wiki/ReDoS#Description
[06:23:25] <bayaz> Title: ReDoS - Wikipedia 
[06:26:37] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[06:27:23] *** Quits: fragment4 (~pulsian@host86-161-210-209.range86-161.btcentralplus.com) (Quit: leaving)
[06:27:41] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Quit: Leaving)
[06:28:22] <GiverOfDomains> Never knew about that
[06:28:22] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[06:28:23] <GiverOfDomains> Thanks
[06:28:33] <epony> time for a Regex4j moment of fixing things during that wholly holy montholy
[06:28:41] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpvtp4t2avkkz1n.ipv6.telus.net) (Ping timeout: 245 seconds)
[06:30:14] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[06:32:08] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 260 seconds)
[06:33:01] <epony> https://en.wikipedia.org/wiki/Denial-of-service_attack#Application_layer_attacks  "In December 2021, following the Log4Shell security vulnerability, a second vulnerability in the open source Log4j library was discovered which could lead to application layer DDoS attacks."
[06:33:01] <bayaz> Title: Denial-of-service attack - Wikipedia 
[06:33:47] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[06:33:53] *** Quits: beachpeach (~beachpeac@89-212-17-146.static.t-2.net) (Quit: Client closed)
[06:33:57] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:33:59] *** Quits: duuude (~user@user/duuude) (Ping timeout: 260 seconds)
[06:34:36] <smallville7123_> how does a union of bool and char behave ?      for example  union B { bool b; char c; }; B u; u.c = 'g'; // what is the value of u.b ?
[06:35:28] *** Quits: JanC (~janc@user/janc) (Ping timeout: 260 seconds)
[06:35:34] <flaqoniun> in C?
[06:35:41] <Decker> it's technically UB.  
[06:35:42] <flaqoniun> bool is int size iirc
[06:35:55] <Decker> it's probably true if not zero
[06:36:23] <Decker> you're only allowed to access union members you set... with any guarantees.  that's why there's usually a tag with the uniion inidicating the type
[06:36:48] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[06:36:48] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[06:36:48] *** Joins: resamvi (~resamvi@user/resamvi)
[06:36:49] <smallville7123_> in C
[06:36:58] <Decker> right
[06:37:02] <smallville7123_> assuming sizeof(bool) == sizeof(char)
[06:37:07] *** Joins: duuude (~user@user/duuude)
[06:37:12] <Decker> undefined
[06:37:52] <smallville7123_> hmm ok
[06:38:02] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Ping timeout: 246 seconds)
[06:38:53] <smallville7123_> can i use a uint8_t[2] as a valid storage for uint16_t provided correct casting?
[06:38:58] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[06:40:28] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:4001:9352:57b2:6a00)
[06:41:06] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[06:41:17] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[06:42:07] <Decker> https://godbolt.org/z/8fcdTGTjz smallville7123_ 
[06:42:08] <bayaz> Title: Compiler Explorer - C (x86-64 gcc 11.2) 
[06:42:36] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[06:42:44] <Decker> smallville7123_ you could, but deepnding on endianness migth also not be well defined
[06:42:55] <smallville7123_> ok
[06:43:13] <smallville7123_> how so?
[06:43:24] <Decker> becuase 0x1234 != 0x3412
[06:43:47] <Decker> why are you trying to use hacks instead of specifying what you mean?
[06:44:06] *** Joins: Pixi (~Pixi@user/pixi)
[06:44:45] *** Joins: Cashlin (~hp@user/cashlin)
[06:45:59] <flaqoniun> hmmi  must have gotten confused at some point in the past, sizeof a boolean variable is 1 byte, but sizeof(false) is 4
[06:46:15] <flaqoniun> because its defined as an integer i guess
[06:47:24] *** Joins: NeoFAT32 (~UserNick@user/NeoFAT32)
[06:47:42] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[06:47:42] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 260 seconds)
[06:48:21] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:49:10] <flaqoniun> unless its a printf bug
[06:49:19] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[06:49:23] <epony> you can classify these questions as cast fails
[06:49:31] *** Joins: flaqoniun (~F@32.211.211.39)
[06:50:33] <epony> and that's the trivial variant, not even machine dependent or endianness freakterfacts
[06:50:43] *** Joins: Gallomimia (~Gallomimi@d75-152-217-169.abhsia.telus.net)
[06:51:03] <epony> just plain "don't"s (plural)
[06:51:13] <Decker> aye
[06:51:24] <Decker> just beause you can doesn't mean you must
[06:51:32] <Decker> or should
[06:52:10] *** Joins: Soni (~quassel@autistic.space)
[06:53:35] *** Quits: wonko-th1-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[06:54:12] <epony> on a more general note, if you're dealing with a faulty compiler that does not make that obvious or you have to pass special toggles to your compiler to allow you to jump on gardening tools with both feet.. it's probably not a recommended pattern
[06:54:48] <epony> (embedded programming is weird)
[06:55:35] <smallville7123_> Decker: when can that happen?
[06:55:38] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[06:56:01] <Decker> smallville7123_ when it's on a endian of system you didn't start on
[06:56:12] <smallville7123_> as the only case i can think of is serialization and deserialization
[06:56:35] <smallville7123_> Decker: and when it is on the same system?
[06:56:52] <epony> also you have off by one error because of the two's compliment
[06:56:52] <Decker> it'll probably give you the result you expect
[06:57:00] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:854:307a:efd:ab95) (Ping timeout: 240 seconds)
[06:57:07] <Decker> if it was a negative value sure
[06:57:10] *** Joins: hololeap (~hololeap@user/hololeap)
[06:58:10] *** Quits: coaxing (~coaxing@user/coaxing) (Quit: WeeChat 3.4.1)
[06:58:12] *** Quits: erase (~erase@user/erase) (Remote host closed the connection)
[07:02:41] *** Joins: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[07:07:02] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[07:09:31] *** Quits: nitro_ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net) (Ping timeout: 250 seconds)
[07:09:43] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[07:10:00] *** Joins: nitro_ (~nitro_@c-73-165-183-88.hsd1.pa.comcast.net)
[07:10:32] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[07:11:48] <smallville7123_> how does a union set a value of a higer size? eg union A : { int8_t a; int64_t b; }
[07:12:23] <smallville7123_> for example, if A.a is set would A.b contain mostly garbage data?
[07:12:35] <smallville7123_> how does a union set a value of a higer size? eg union A : { int8_t a; int64_t b; } A;       for example, if A.a is set would A.b contain mostly garbage data?   *
[07:12:51] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:12:55] <smallville7123_> contain 56 bits of garbage data?   *
[07:13:09] <flaqoniun> it's like a void *
[07:13:36] <flaqoniun> a and b are just different "views" of the memory
[07:13:41] *** Quits: Nact (~l@host-149-154-244-25.dynamic.voo.be) (Quit: Konversation terminated!)
[07:13:55] <smallville7123_> would A.b contain 56 bits of garbage data and 8 bits of valid data?
[07:15:45] <flaqoniun> the only valid one is the one you set
[07:16:45] <flaqoniun> sometimes you will find a type-id next to the union to avoid this problem
[07:21:25] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[07:23:05] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Remote host closed the connection)
[07:23:59] <Decker> might as well just cst the original memory to the structure it's supposed to be. rather than moving bytes through some converter that doesnt' really work or do anything anyway
[07:24:14] *** Joins: dunkeln (~dunkeln@157.32.218.150)
[07:24:14] *** Quits: dunkeln (~dunkeln@157.32.218.150) (Changing host)
[07:24:14] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[07:25:33] *** Quits: trace987 (~trace@user/trace) (Remote host closed the connection)
[07:26:13] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Ping timeout: 260 seconds)
[07:26:24] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[07:26:24] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[07:26:24] *** Joins: resamvi (~resamvi@user/resamvi)
[07:26:41] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 246 seconds)
[07:29:15] *** Joins: dunkeln_ (~dunkeln@14.139.121.55)
[07:30:21] *** Joins: spine-o-saurus (~violator@2602:cf:7677:980c:67af:3546:eae7:9d7)
[07:30:30] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Read error: Connection reset by peer)
[07:30:49] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[07:32:14] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[07:34:33] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[07:36:12] *** Joins: password2 (~password8@user/password2)
[07:39:39] *** Quits: Cashlin (~hp@user/cashlin) (Quit: Konversation terminated!)
[07:41:09] *** Quits: tj123_ (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Quit: Leaving)
[07:41:10] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[07:42:11] *** Quits: yiggityswaps (~yoyojambo@2806:108e:18:68ab:2c11:5120:5e46:16a1) (Quit: Leaving)
[07:42:33] *** Quits: dunkeln_ (~dunkeln@14.139.121.55) (Ping timeout: 260 seconds)
[07:43:21] *** Joins: yoyojambo (~yoyojambo@2806:108e:18:68ab:2c11:5120:5e46:16a1)
[07:43:54] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[07:44:51] *** Joins: dunkeln (~dunkeln@157.32.218.150)
[07:44:51] *** Quits: dunkeln (~dunkeln@157.32.218.150) (Changing host)
[07:44:51] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[07:50:59] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 260 seconds)
[07:52:28] *** Quits: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net) (Ping timeout: 260 seconds)
[07:53:28] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:55:23] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 246 seconds)
[07:57:58] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[07:58:00] *** Quits: RedNifre (~RedNifre@dslb-002-206-059-217.002.206.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[07:59:46] *** Joins: favadi (~favadi@2001:ee0:4081:6914:dc0f:7886:2653:eb92)
[08:01:07] *** Joins: kaph (~kaph@pa-18-166-251.service.infuturo.it)
[08:04:38] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[08:04:38] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[08:04:52] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Read error: Connection reset by peer)
[08:05:25] *** Quits: auk (auk@gateway/vpn/protonvpn/auk) (Quit: Leaving)
[08:06:05] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[08:08:42] *** Joins: dunkeln (~dunkeln@157.119.207.150)
[08:08:43] *** Quits: dunkeln (~dunkeln@157.119.207.150) (Changing host)
[08:08:43] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[08:08:54] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[08:10:59] *** Joins: RedNifre (~RedNifre@dslb-002-203-026-038.002.203.pools.vodafone-ip.de)
[08:15:06] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Ping timeout: 272 seconds)
[08:15:32] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[08:15:32] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[08:15:32] *** Joins: resamvi (~resamvi@user/resamvi)
[08:17:07] *** Quits: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 260 seconds)
[08:18:24] *** Joins: wauterboi (~wauterboi@185.65.135.160)
[08:18:37] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[08:19:49] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[08:20:01] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:21:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:22:18] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[08:22:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:23:01] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[08:23:03] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[08:24:38] *** Quits: smallville7123_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[08:25:08] *** Quits: soapsudsxx (~soapsudsx@209.221.40.154) (Ping timeout: 260 seconds)
[08:26:55] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-701e-df04-66e4-7123.inf6.spectrum.com) (Ping timeout: 256 seconds)
[08:33:33] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[08:34:48] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[08:37:18] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[08:39:03] *** Quits: pmercado (~pmercado@190.22.83.12) (Ping timeout: 256 seconds)
[08:39:08] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 246 seconds)
[08:40:23] <sonny> What are the common number types used in programming languages?
[08:40:37] <knusbaum> like integers and floats?
[08:41:13] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[08:41:19] <Decker> complex, vector2,3,4d, matrices, quaternions
[08:41:37] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[08:41:39] <sonny> yeah, but more specific. Terms like bignum, fixedpoint, etc
[08:41:52] <sonny> bcd ...
[08:41:55] *** Joins: Jong (~Jong@184-99-74-148.boid.qwest.net)
[08:42:04] <knusbaum> signed integers, unsigned integers, floating point, double precision floating point, complex
[08:42:17] <knusbaum> Less common would be ratios, bignums, BCD
[08:42:19] *** Joins: fe23 (~fe23@2409:8a34:465:ec80:5822:254e:7c4b:3f7)
[08:42:27] <sonny> ratios?
[08:42:33] <knusbaum> rationals
[08:42:39] <Decker> a/b
[08:42:41] <sonny> hmm, thanks
[08:43:02] <sonny> I want to learn more about number representation in programming languages
[08:43:14] <flaqoniun> don't forget the long double floats
[08:43:15] <sonny> How would a/b be done?
[08:43:16] <Decker> that's just base 2
[08:43:21] <Decker> 2 integers
[08:43:22] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[08:43:24] <knusbaum> sonny, usually just two integers
[08:43:34] <sonny> oh
[08:43:36] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[08:43:51] <knusbaum> You can perform math operations on them without actually dividing 
[08:43:55] <knusbaum> and retain precision
[08:44:03] <knusbaum> Depending on how big your integers are
[08:44:13] <sonny> flaqoniun I get why C has silly container types, but not other languages
[08:44:15] <knusbaum> Lots of ratios use bignums to keep precision high
[08:44:26] <knusbaum> sonny, what silly container types?
[08:44:54] <sonny> `long long`, `long double` etc
[08:45:08] <knusbaum> You mean typedef aliases?
[08:45:10] <sonny> it makes more sense to let the programmer define a range
[08:45:13] <Decker> various precision specifications
[08:45:27] <Decker> precision more than range
[08:45:39] <knusbaum> They go by standard sizes commonly available on hardware. 
[08:45:46] <knusbaum> So 8 bits, 16 bits, 32 bits, 64 bits.
[08:45:56] <sonny> int: -2^32 .. (2^32)-1 etc
[08:46:03] <knusbaum> Although some C types have variable width
[08:46:15] <knusbaum> depending on impl or arch
[08:46:29] *** Quits: Jong (~Jong@184-99-74-148.boid.qwest.net) (Ping timeout: 246 seconds)
[08:46:43] <sonny> what if you just want sometype: 4 .. 3
[08:47:02] <sonny> forgot the minus
[08:47:16] <Decker> what's that? bit width? bit position?
[08:47:25] <sonny> bit width
[08:47:43] <Decker> how would the compiler know when an expression is evaluated which size to use?
[08:47:48] <knusbaum> bit width -4 .. 3?
[08:48:00] <sonny> Also, why modular arithmetic is so common?
[08:48:08] <sonny> if width means range
[08:48:18] <sonny> otherwise I'm not sure what you mean
[08:48:25] <knusbaum> Because it's useful in algorithms and it's how hardware commonly implements integers.
[08:48:26] <Decker> width is number of bits
[08:49:00] <sonny> knusbaum sure, but any example at least?
[08:49:07] <Decker> times
[08:49:43] <sonny> +, * will both underflow/overflow
[08:50:11] <knusbaum> sonny, hash tables for instance
[08:50:17] <sonny> ok
[08:50:36] <sonny> hash tables are pretty important
[08:51:47] <sonny> knusbaum, hardware doesn't have to, it could just truncate everything
[08:52:04] <knusbaum> It could, but it doesn't
[08:52:29] <knusbaum> All the hardware I know of wraps.
[08:52:36] <knusbaum> Which means it's the common case
[08:53:20] <knusbaum> Although you can't rely on that behavior always, depending on the language. C for instance, you can't
[08:54:06] <Decker> except then you can by implementation... the c languagae itself prefers not tos pecify to leave it open to implementation/hardware requirements
[08:54:16] <sonny> iirc C doesn't specify anything about overflow/underflow?
[08:54:26] <sonny> ah I see
[08:54:27] *** Joins: lunarkitty (uid501895@user/pyra)
[08:54:29] <Decker> so while it might make nasal demons; probably it's just wrapping sanely
[08:54:41] *** Joins: seifeslimene_ (~seifeslim@197.2.10.72)
[08:54:58] <knusbaum> Maybe for machine-word-sized integers.
[08:54:59] <sonny> Decker: thoughts on 2C requirement in the upcomming C2XX
[08:55:15] <knusbaum> It happens that incrementing a char won't always wrap
[08:55:23] <knusbaum> If the compiler decides to use wider instructions
[08:55:27] <Decker> oh I think it's fine.  that's what the world went with anyway
[08:55:38] *** Quits: seifeslimene (~seifeslim@102.156.121.226) (Ping timeout: 272 seconds)
[08:55:39] <Decker> it's been a very long time since 1's compliment integer ALUs have been produced
[08:55:42] <sonny> heh, yeah
[08:55:55] <knusbaum> Ok, I'm off. See you all.
[08:55:59] <sonny> night
[08:56:21] <sonny> sign and magnitude is pretty easy, but 2C is barely more difficult
[08:57:56] <Decker> it's actually more advantageous for queues and wrapping... 
[08:58:07] <Decker> 0 -1... 
[08:59:18] <sonny> queues yeah, that's good application if you can control the range
[08:59:34] <sonny> unless you are used to having large queues/rings
[09:00:21] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[09:00:22] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[09:00:22] *** Joins: resamvi (~resamvi@user/resamvi)
[09:02:45] <sonny> looks like it has a lot of applications for crypto
[09:02:53] <Decker> 'it'
[09:02:57] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[09:02:59] <Decker> cycles?
[09:03:13] <sonny> modular arithmetic
[09:03:25] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[09:04:43] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[09:05:01] <Decker> 'tensors' as defined by tensorflow is modular arithemtic... taking a flat array and folding it into N dimensional blocks
[09:06:09] <sonny> interesting, that is like the reshape function in APL
[09:06:16] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[09:06:33] <sonny> I think this topic is called numerics
[09:08:10] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[09:10:25] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[09:12:11] *** Quits: kaph (~kaph@pa-18-166-251.service.infuturo.it) (Read error: Connection reset by peer)
[09:12:27] *** Joins: kaph (~kaph@151.82.171.171)
[09:13:10] <sonny> Why do scientists like to code in C++?
[09:14:04] <flaqoniun> i thought they used FORTRAN
[09:14:47] <sonny> That seems to reign supreme as well
[09:17:07] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Remote host closed the connection)
[09:17:33] *** Joins: NeoFAT32 (~UserNick@118.179.224.74)
[09:17:39] <sonny> unsigned integers are my new favourite datatype :-)
[09:19:14] <sonny> Is char signed or unsigned in C?
[09:19:39] *** Quits: Inline__ (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:20:20] *** Quits: password2 (~password8@user/password2) (Ping timeout: 272 seconds)
[09:20:51] *** Joins: Jaami (~Jaami@182.185.193.214)
[09:20:59] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:22:49] *** Quits: yoyojambo (~yoyojambo@2806:108e:18:68ab:2c11:5120:5e46:16a1) (Quit: Leaving)
[09:22:56] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[09:22:56] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[09:22:56] *** Joins: resamvi (~resamvi@user/resamvi)
[09:29:22] <sonny> What does "the exponent is a biased value" mean wrt the floating point format?
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:31:08] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Quit: xff0x)
[09:31:08] *** Quits: NeoFAT32 (~UserNick@118.179.224.74) (Remote host closed the connection)
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:35:43] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.167)
[09:36:58] *** Quits: resamvi (~resamvi@user/resamvi) (Quit: resamvi)
[09:38:33] *** Joins: NeoFAT32 (~UserNick@user/NeoFAT32)
[09:38:35] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[09:38:40] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[09:39:14] *** stella is now known as aoei
[09:39:22] *** Quits: favadi (~favadi@2001:ee0:4081:6914:dc0f:7886:2653:eb92) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:39:59] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[09:40:14] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[09:41:24] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[09:42:28] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[09:43:05] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[09:44:13] *** Joins: favadi (~favadi@2001:ee0:4081:6914:1d4d:d1da:d234:eef0)
[09:44:32] *** Quits: Jaami (~Jaami@182.185.193.214) (Quit: Nettalk6 - www.ntalk.de)
[09:51:34] <sonny> heh, Java really doesn't have unsigned integral types
[09:53:17] *** Joins: password (~password@user/password2)
[09:56:32] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[09:56:34] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[09:59:19] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[10:00:14] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 272 seconds)
[10:01:01] *** Joins: trace987 (~trace@user/trace)
[10:02:07] *** Joins: xythercoder (~xythercod@2409:4062:2290:d111::1922:68a4)
[10:04:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:09:08] *** Joins: bomb (~bomb@user/bomb)
[10:09:19] <ProfSimm> sonny: it's refreshing not to have to bother which is which. Annoying when working with identifiers though.
[10:09:44] <bomb> domo arigato mr roboto
[10:09:48] <bomb> don't you ever sleep?
[10:10:14] <sonny> ProfSimm you can do that by removing implicit conversions
[10:10:24] <ProfSimm> bomb: I'm busy working on my reading comprehension of C#
[10:10:46] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:11:16] <sonny> How is null supposed to be used?
[10:11:30] <sonny> It makes sense as a sentinel value, but that's about it
[10:11:30] <bomb> ProfSimm lol good luck with passive aggression
[10:11:59] *** Quits: nsk_nyc (~nsk_nyc@45.238.142.234) (Ping timeout: 256 seconds)
[10:12:21] <sonny> I've heard of optional types but I am not sure what they are for
[10:12:36] <ProfSimm> Not passive, and not aggression.
[10:13:32] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 272 seconds)
[10:13:44] <ProfSimm> sonny:     users.get(id) <-- no such id. What do? Well, you can throw. But in some cases, that's not pragmatic (say this was part of a bigger data structure you're getting and there not being user is normal)
[10:14:29] <sonny> you can search before retrieving
[10:14:50] <sonny> or you can return false etc
[10:15:30] <Decker> null's a good false when it's an object
[10:15:45] <sonny> hmm
[10:15:53] <sonny> fair
[10:16:26] <sonny> though if you are talking about JS, you can just return false
[10:16:45] <Decker> I'd still return null
[10:17:01] <Decker> if it's otherwise an object,string or array...
[10:17:06] <Decker> false if the alternative is true
[10:17:16] <Decker> 0 if the altenrative is a number 
[10:17:21] <sonny> what is true in JS?
[10:17:23] <bomb> try returning 403 FORBIDDEN
[10:17:29] <Decker> !false
[10:17:45] <Decker> it's a primitive of type boolean
[10:17:58] <sonny> hmm
[10:18:02] <Decker> typeof(true) 'boolean'
[10:18:23] <Decker> true+true=2
[10:18:29] <sonny> what!?
[10:18:33] <Decker> :)
[10:18:37] <sonny> I'm done
[10:18:46] <Decker> ya for logicals should use & and | and not math
[10:20:07] *** Joins: anonymous1 (~guest@149.28.142.187)
[10:20:32] <ProfSimm> Decker: + and * work fine as | and & :P
[10:20:53] <Decker> ProfSimm not when true+true=2... it works for a while but 4B cases later and you get a false
[10:20:53] <sonny> In Scheme, it's #t (symbol for true) or any other object that is not #f
[10:21:15] *** Quits: xythercoder (~xythercod@2409:4062:2290:d111::1922:68a4) (Ping timeout: 260 seconds)
[10:21:21] <ProfSimm> In this context 0 is false and not 0 is true
[10:21:27] <ProfSimm> So it works no
[10:21:31] <epony> however
[10:21:33] <Decker> for a while
[10:21:37] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Read error: Connection reset by peer)
[10:21:38] <epony> in reality true is 1
[10:21:40] <ProfSimm> Decker: while for a while
[10:21:46] <ProfSimm> why*&
[10:21:53] <epony> and there is no 2 in boolean
[10:22:13] <sonny> what if it's 1 and 2 :P
[10:22:14] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[10:22:15] <Decker> there's no ` in boolean either technially
[10:22:29] <ProfSimm> Hm.
[10:22:30] <sonny> boolean only requires symbols
[10:22:34] <Decker> C's boolean type though is true=true+true  (not 2 in any way)
[10:22:40] <epony> it's also known as normal high or normal low technically
[10:22:52] <epony> depending on the logic family
[10:23:04] <Decker> that's more an EE view :)
[10:23:30] <epony> ternary logic is rarely used for control branches and similar, not as operational logic
[10:24:22] *** Joins: Jong (~Jong@2620:10d:c090:400::5:6efd)
[10:24:26] <ProfSimm> Decker: you saying "null is false for objects" and me not having false in my language made me realize, I should eliminate null.
[10:24:36] <epony> it's electronics engineering for digital signals in logic circuitry
[10:24:48] <Decker> ProfSimm ya
[10:25:22] *** Joins: xythercoder (~xythercod@2401:4900:3e9a:2e0e::e34:c0b7)
[10:25:24] <epony> in software you can use whatever you want / like and can get away with, given you make sacrifices and trade-offs
[10:25:53] <ProfSimm> Decker: I don't understand why you think math for bool works for a while tho
[10:26:01] <ProfSimm> Decker: anything * 0 is 0
[10:26:22] <ProfSimm> Decker: the only problem would be negative numbers I guess
[10:26:36] <ProfSimm> true | true -> -1  + 1 = 0
[10:26:36] *** Joins: Blackajack (~Blackajac@user/Blackajack)
[10:26:54] <Decker> ProfSimm 0xFFFFFFFF + true  = false
[10:26:58] <ProfSimm> Eh
[10:27:06] <epony> but in hardware there is a certain machine dependent / machine specific implementation and the software programs it at the machine programming instructions, which internally operate at well known principles in simple and non-disclosed functional blocks when implemented without technical specification of internal design
[10:27:09] <Decker> exactly ... it works 'for a while'
[10:27:13] <bomb> 33 + 77 = 100
[10:27:26] <Decker> eventually +1 = -1 and -1+1 = 0
[10:27:35] <ProfSimm> Decker: I submit hypothesis no one in the world would run into this if bools worked like that
[10:27:36] <Decker> eventually x+1 = -1 
[10:28:09] <Decker> ProfSimm *sigh* so there's these semephore objects in UNIX.  They have a 'undo' flag or usage count or something
[10:28:12] *** Joins: rsx (~dummy@ppp-188-174-137-251.dynamic.mnet-online.de)
[10:28:37] <epony> some crazy person is blamed for that
[10:28:41] <Decker> so when the program crashes it can 'unwind' this was kept in a 16 bit counter... at 32768 times, the usage counter wrapps to 0 and the semaphore is unlocked and 2 threads run at once
[10:28:59] <Decker> the guy was like 'semaphores don't do that'
[10:29:20] <Decker> and I walked out.  I just have no tolierance for deliberate ignorance in the face of evidence.
[10:31:15] <Decker> it really shouldn't have been an issue - it was always +1 lock -1 unlock... and any internal counters should have been 0... but it's one of those cases where +1 N times IS an issue... 
[10:31:21] <sonny> what does he expect that they do?
[10:32:10] <ProfSimm> Decker: well I wouldn't seriously suggest people use + and * for bool
[10:32:16] <Decker> *shrug* the semaphores are system objects that exist after the program exist... so he expected whatever the program did to it to be undone and left whatever it was in the first plae
[10:32:23] <ProfSimm> Decker: but I find the fact they correspond notable
[10:32:46] <Decker> ProfSimm that's what you have to do in YOLOL until you unlock advanced chips :) (1>x)+(3<y)
[10:32:55] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 260 seconds)
[10:32:59] <bomb> what is YOLOL?
[10:33:19] <ProfSimm> Decker: it's like matrices are not 2D, vectors are not 1D and scalars are not 0D. It's more like:    0D - bool, 1D - scalar, 2D - vector, etc.
[10:33:26] <Decker> it's this bsaic like langauge in Starbase
[10:33:31] *** Joins: Enitin (~Enitin@82.180.145.225)
[10:33:36] <Decker> https://www.starbasegame.com/
[10:33:37] <bayaz> Title: Starbase 
[10:33:52] <Decker> it runs 1 per 200ms... or 5hz 
[10:34:23] <Decker> though many operations can happen on a single line... so it's a little hard to measure effective rates
[10:34:31] <Decker> (1 line per 200ms)
[10:36:56] <ProfSimm> Decker: do you think booleans are the "0D"
[10:37:07] <Decker> :)
[10:37:08] <ProfSimm> Decker: if you don't understand what I mean, get some DMT and come back :P
[10:37:19] <smallville7123> does anyone know of an online C compiler which compiles and runs for both LE and BE
[10:37:33] <ProfSimm> I'm jk, I don't condone DMT use and never tried it.
[10:37:33] <Decker> ProfSimm lets go with yes.  It either is or isn't. 
[10:37:38] <ProfSimm> I'm just naturally stupid
[10:37:51] <Decker> and has no measurable character or magnitude if it is
[10:39:01] <ProfSimm> Decker: I had a dream once, where there was nothing. And then the nothingness "I exist", "no I don't don't exist", "I exist", and as points in space started flickering in those boolean states and interacting, they start bending, twirling, and forming more complex structures.
[10:39:33] <ProfSimm> Decker: At the beginning were booleans.
[10:39:56] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[10:40:02] <Decker> https://github.com/d3x0r/SACK/blob/master/src/games/dekware/syscore/story.h  /story command :) 
[10:40:03] <bayaz> Title: SACK/story.h at master ? d3x0r/SACK 
[10:40:25] <Decker> there were cookies :)
[10:41:23] <ProfSimm> Decker: this could only be improved if the Elf got a Cookie Consent dialog from the Void
[10:41:38] <Decker> haha ya it was sorta pre2k that it was written
[10:41:40] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[10:41:55] <epony> https://en.wikipedia.org/wiki/C_data_types#stdbool.h
[10:41:56] <bayaz> Title: C data types - Wikipedia 
[10:42:11] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[10:42:20] <sonny> smallville7123 LE, BE?
[10:42:48] *** Quits: Enitin (~Enitin@82.180.145.225) (Ping timeout: 260 seconds)
[10:42:56] <smallville7123> little endian and big endian
[10:43:08] <epony> https://en.wikipedia.org/wiki/Boolean_algebra#Applications_2
[10:43:08] <bayaz> Title: Boolean algebra - Wikipedia 
[10:43:12] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[10:43:24] <sonny> try godbolt
[10:44:20] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[10:44:20] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[10:44:33] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[10:45:43] <smallville7123> i cannot execute any ARM nor PowerPC nor MIPS
[10:46:23] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[10:46:42] <ProfSimm> Decker: a scalar needs to "scale" relative to something, so it implies, in my opinion, an extra dimension
[10:47:06] <Decker> well implies a dimension
[10:47:34] <Decker> or dimensions have metrics
[10:48:30] <ProfSimm> Implies a dimension yes
[10:48:48] <ProfSimm> So why do we call matrices 2D and vectors 1D
[10:49:15] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 260 seconds)
[10:49:16] <ProfSimm> Is. Wrong.
[10:50:52] <Decker> eh not really they're laid out along a scalar line... a vector along 1 .. matrix along 2... there's probably point inbetween the numbers too at like 1.5? :)
[10:50:57] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Read error: Connection reset by peer)
[10:51:37] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[10:51:50] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[10:53:45] <ProfSimm> Decker: yes but turns out scalars are lines as well
[10:54:10] <ProfSimm> Decker: think like height map making a mountain in a 3D modeling software.
[10:54:15] <ProfSimm> Is it 2D or 3D
[10:54:17] <epony> article of the day, today April 4th (404):  https://en.wikipedia.org/wiki/Logic_gate
[10:54:17] <bayaz> Title: Logic gate - Wikipedia 
[10:54:39] <ProfSimm> Decker: the height map is a 2D image of scalars
[10:54:49] <ProfSimm> making a 3D mountain
[10:55:07] <ProfSimm> Not any 3D object though
[10:55:09] <Decker> morelike 2.5 - fails to be able to support tunnels
[10:55:10] <ProfSimm> It's complicated
[10:55:14] <ProfSimm> Sure
[10:55:59] <ProfSimm> Decker maybe there are more hidden dimensions that could make your tunnels ;-)
[10:56:22] <ProfSimm> Decker: something about rotation etc :P dunno, that's your area
[10:56:53] <smallville7123> if (littleEndian) for (int i = 0; i < s; i++) array[i] = tmp[i];
[10:56:54] <smallville7123> else for (int i = s-1; i >= 0; i--) array[i] = tmp[i];
[10:56:56] <smallville7123> is this correct?
[10:57:18] <Decker> inet_hton and ntoh functions :)
[10:57:33] <Decker> smallville7123 why not just avoid all the FUD and go with LE only?  
[10:58:10] <Decker> BE is only an optional feature on some GP processors and you're probably not ging to run on anything with a dediciated BE processor otherwise
[10:58:11] <smallville7123> cus i need to correctly serialize my input into my byte array
[10:58:11] *** Joins: palasso (~palasso@user/palasso)
[10:58:39] <smallville7123> and in particular Android is BE while desktop is LE
[10:58:49] <Decker> it's LE too
[10:58:53] <Decker> it has  BE option
[10:59:08] <smallville7123> yea
[10:59:26] <Decker> which isn't used... except by specific applications for their own purposes not to operate in
[10:59:38] <epony> it's actually LE
[10:59:49] <epony> and some newer chips bi-endian
[11:00:24] *** Quits: kaph (~kaph@151.82.171.171) (Ping timeout: 272 seconds)
[11:00:30] <epony> plus, it's a feature of the hardware, not the OS, which can be machine independent
[11:01:44] <ProfSimm> Decker: in the height map, we have a grid of scalars, what if we make a grid of booleans. This could be seen as a vector of scalars, where we take lines of booleans and treat them as bits encoding a scalar
[11:01:46] <epony> https://en.wikipedia.org/wiki/ARM_architecture_family "Bi (little as default)"
[11:01:46] <bayaz> Title: ARM architecture family - Wikipedia 
[11:02:55] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[11:02:59] *** Joins: jaysicks (~jaysicks@91-82-251-185.pool.digikabel.hu)
[11:03:00] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[11:03:10] <Decker> smallville7123 so it's really not something you're likely to need to worry about... the last big endian machines were made in 60's (or was it 80? it was an evennumber)
[11:03:15] <epony> Little is more useful for compute blocks, Big is more useful for networking blocks..
[11:03:22] <ProfSimm> Decker: this also means would treat the heightmap as a rank 3 tensor of booleans, so you can have tunnels.
[11:03:27] <Decker> big is useful in wide math operations
[11:03:32] <ProfSimm> we could*
[11:03:37] *** Quits: alexmac22347 (~alexmac22@user/alexmac22347) (Ping timeout: 240 seconds)
[11:03:55] <Decker> ProfSimm only if you add layers
[11:04:16] <ProfSimm> Decker: well my point is a scalar value is layers of booleans: 111011010110
[11:04:30] <Decker> eh sure
[11:04:57] <epony> https://en.wikipedia.org/wiki/Endianness#Newer_architectures
[11:04:57] <bayaz> Title: Endianness - Wikipedia 
[11:05:12] <epony> "Solely big-endian architectures include the IBM z/Architecture and OpenRISC."
[11:05:32] <smallville7123> also IOS is BE
[11:05:32] <ProfSimm> Decker: I'm implying there's some fundamental link between a scala and a binary representation of it. Woo woo.
[11:05:39] <ProfSimm> scalar*
[11:06:11] <Decker> ProfSimm but the dimensionality comes in the relation of 0 dimensional things... that there s a 0 and 1 next to each other - the edge forms the dimensino
[11:06:57] <sonny> What is a sealed record?
[11:07:00] <ProfSimm> Decker: yes, it can't be just a grid. But that's more complicated to think about. Goes into relativity maybe
[11:07:01] <Decker> and there's a topology viewpoint that dimensions are just in the connecteness of the points.
[11:07:29] <ProfSimm> Decker: space is just things that are connected
[11:07:55] <ProfSimm> Decker: unclear why they connect to 3D :P maybe some energy balance
[11:08:09] <ProfSimm> Maybe it averages to 3D and it's not 3D in general
[11:08:11] <Decker> sonny depends on the context... sealed criminal records mean they can't be seen... signed and sealed records with a user finger print make sure the data can't be changed
[11:08:46] <sonny> wrt a programming language
[11:08:46] <Decker> sealed JS records as in Object.seal() just means you can't remove or add properties to the record, but you can change the values
[11:08:56] <sonny> ok
[11:09:27] *** Quits: Lochnair (~Lochnair@wireguard/contributor/lochnair) (*.net *.split)
[11:09:27] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (*.net *.split)
[11:09:27] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[11:09:27] *** Quits: segnior (segnior@user/segnior) (*.net *.split)
[11:09:27] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (*.net *.split)
[11:09:27] *** Quits: bloodElk (~bloodElk@user/bloodelk) (*.net *.split)
[11:09:27] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (*.net *.split)
[11:09:27] *** Quits: raczka3 (~raczka@dedicated-aid6.rev.nazwa.pl) (*.net *.split)
[11:09:27] *** Quits: aa_ (~aa_@is.ready-to.party) (*.net *.split)
[11:09:27] *** Quits: beencubed_ (~beencubed@209.131.238.248) (*.net *.split)
[11:09:27] *** Quits: lord4163 (~lord4163@81-233-183-142-no86.tbcn.telia.com) (*.net *.split)
[11:09:27] *** Quits: Malin (lounge@pirate.pt) (*.net *.split)
[11:09:27] *** Quits: Vesryn (~vesryn@user/vesryn) (*.net *.split)
[11:09:27] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (*.net *.split)
[11:09:27] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[11:09:27] *** Quits: tofran55 (~tofran@bl15-47-228.dsl.telepac.pt) (*.net *.split)
[11:09:27] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:09:27] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (*.net *.split)
[11:09:27] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[11:09:27] *** Quits: joj_ (~joj@45.76.142.39) (*.net *.split)
[11:09:27] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[11:09:27] *** Quits: [work]hassoon (hassoon@user/hassoon) (*.net *.split)
[11:09:27] *** Quits: entropygain (levitate@user/entropygain) (*.net *.split)
[11:09:27] *** Quits: lf94 (~lf94@user/lf94) (*.net *.split)
[11:09:27] *** Quits: nisstyre (wes@user/nisstyre) (*.net *.split)
[11:09:27] *** Quits: Irishmanluke (~luke@50-116-44-236.ip.linodeusercontent.com) (*.net *.split)
[11:09:27] *** Quits: crackerjack (~crackerja@pear.bnc4free.com) (*.net *.split)
[11:09:27] *** Quits: neonrex (~jbrubake@user/jbrubake) (*.net *.split)
[11:09:27] *** Quits: madprops (hj8oijo@user/madprops) (*.net *.split)
[11:09:27] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[11:09:27] *** Quits: void09 (~void@150.230.21.57) (*.net *.split)
[11:09:27] *** Quits: ninjabanjo (~ninjabanj@107.150.45.163) (*.net *.split)
[11:09:27] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[11:09:28] *** Quits: avery (sid501608@id-501608.uxbridge.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: digdilem (~digdilem@rolf.yuss.org) (*.net *.split)
[11:09:28] *** Quits: locutus (~locutus@user/locutus) (*.net *.split)
[11:09:28] *** Quits: timmot (~timmot@207.148.85.201) (*.net *.split)
[11:09:28] *** Quits: boycott (~boycott@user/boycott) (*.net *.split)
[11:09:34] *** Joins: Irishmanluke (~luke@50-116-44-236.ip.linodeusercontent.com)
[11:09:34] *** Joins: locutus (~locutus@107.174.27.214)
[11:09:36] *** Joins: [work]hassoon (~hassoon@triton.blinkenshell.org)
[11:09:38] *** Joins: segnior (segnior@user/segnior)
[11:09:39] *** Joins: madprops (~hj8oijo@li628-159.members.linode.com)
[11:09:42] *** Joins: joj (~joj@jojeee.xyz)
[11:09:42] *** Joins: aa_ (~aa_@is.ready-to.party)
[11:09:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 250 seconds)
[11:09:47] *** Joins: lf94 (~lf94@user/lf94)
[11:09:47] *** Joins: InPhase (~InPhase@openscad/inphase)
[11:10:00] *** Joins: nisstyre (wes@2600:3c00::f03c:91ff:fe69:7f3d)
[11:10:03] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[11:10:05] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[11:10:05] *** Quits: madprops (~hj8oijo@li628-159.members.linode.com) (Changing host)
[11:10:05] *** Joins: madprops (~hj8oijo@user/madprops)
[11:10:05] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[11:10:08] *** Joins: TallonRain (sid214799@2a03:5180:f:2::3:470f)
[11:10:08] *** Joins: entropygain (levitate@2600:3c01::f03c:91ff:fecc:c443)
[11:10:11] *** Joins: Malin (lounge@pirate.pt)
[11:10:14] *** Joins: raczka3 (~raczka@dedicated-aid6.rev.nazwa.pl)
[11:10:20] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[11:10:26] *** Quits: TallonRain (sid214799@2a03:5180:f:2::3:470f) (Changing host)
[11:10:26] *** Joins: TallonRain (sid214799@user/tallonrain)
[11:10:36] *** Joins: joji (~jojo@86.4.72.180)
[11:10:37] *** Joins: avery (sid501608@2a03:5180:f:5::7:a768)
[11:10:37] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Quit: Le Soleil ne se couche pas !)
[11:10:55] *** Joins: RazielZ (~Raziel@user/raziel)
[11:10:55] *** Joins: OverCoder (~OverCoder@user/overcoder)
[11:11:03] *** Joins: bloodElk (~bloodElk@user/bloodelk)
[11:11:06] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[11:11:10] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[11:11:12] *** Joins: Karyon (~Karyon@user/karyon)
[11:11:13] *** Joins: crackerjack (crackerjac@pear.bnc4free.com)
[11:11:14] *** Joins: void09 (~void@150.230.21.57)
[11:11:14] *** Joins: Vesryn (~vesryn@user/vesryn)
[11:11:18] *** Quits: Raziel (~Raziel@user/raziel) (Killed (NickServ (GHOST command used by RazielZ)))
[11:11:19] *** RazielZ is now known as Raziel
[11:11:24] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:11:28] *** Joins: lord4163 (~lord4163@81-233-183-142-no86.tbcn.telia.com)
[11:11:51] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[11:11:55] *** Joins: neonrex (~jbrubake@user/jbrubake)
[11:12:13] *** Quits: veek (~veek@117.192.18.22) (Quit: Leaving)
[11:12:14] *** Joins: boycott (~boycott@166.ip-149-56-46.net)
[11:12:15] *** Quits: boycott (~boycott@166.ip-149-56-46.net) (Changing host)
[11:12:15] *** Joins: boycott (~boycott@user/boycott)
[11:12:57] <ProfSimm> I don't understand why we have free/seal etc.
[11:13:02] <ProfSimm> freeze*
[11:13:06] *** Joins: ninjabanjo (~ninjabanj@107.150.45.163)
[11:13:11] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (*.net *.split)
[11:13:11] *** Quits: wrongt (~wrongt@user/wrongt) (*.net *.split)
[11:13:11] *** Quits: austincheney (~austinche@104-54-57-132.lightspeed.rcsntx.sbcglobal.net) (*.net *.split)
[11:13:11] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[11:13:11] *** Quits: benji (~benji@user/benji) (*.net *.split)
[11:13:11] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (*.net *.split)
[11:13:11] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:13:12] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (*.net *.split)
[11:13:12] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[11:13:12] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: Bou (sid274843@user/bou) (*.net *.split)
[11:13:12] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[11:13:12] *** Quits: kawaiimaria (sid530182@id-530182.tinside.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: Kingsy (~chris@kingsy.co.uk) (*.net *.split)
[11:13:12] *** Quits: octav1a (~quassel@173.195.145.98) (*.net *.split)
[11:13:12] *** Quits: Athas (athas@sigkill.dk) (*.net *.split)
[11:13:12] *** Quits: mannu (mannu@wodanaz.se) (*.net *.split)
[11:13:12] *** Quits: adrian17 (~adrian17@thehyper.space) (*.net *.split)
[11:13:12] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[11:13:12] *** Quits: jan6 (jan6@tilde.team/user/jan6) (*.net *.split)
[11:13:12] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:13:12] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[11:13:15] <sonny> immutability
[11:13:18] *** Joins: octav1a (~quassel@173.195.145.98)
[11:13:18] *** Joins: Kingsy (~chris@kingsy.co.uk)
[11:13:19] <password> HANG ON
[11:13:19] *** Joins: kawaiimaria (sid530182@id-530182.tinside.irccloud.com)
[11:13:22] <ProfSimm> Immutability is great
[11:13:24] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[11:13:26] *** Joins: wrongt (~wrongt@is.here.for-some.fun)
[11:13:28] <ProfSimm> But this is a very odd way of doing it
[11:13:28] *** Joins: adrian17 (~adrian17@thehyper.space)
[11:13:29] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[11:13:29] *** Joins: Bou (sid274843@user/bou)
[11:13:29] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[11:13:30] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[11:13:31] *** Joins: mannu (mannu@wodanaz.se)
[11:13:41] *** Joins: Athas (athas@2a01:7c8:aaac:1cf:112c:dc15:b959:356)
[11:13:44] *** Joins: vito (sid1962@user/vito)
[11:13:48] *** Joins: Emil (~emil@emil.fi)
[11:13:59] *** Joins: Exa (exa@irc.moe)
[11:14:04] *** Joins: austincheney (~austinche@2600:1700:70e1:14b8:f982:507a:283b:3df9)
[11:14:04] *** Quits: xythercoder (~xythercod@2401:4900:3e9a:2e0e::e34:c0b7) (Read error: Connection reset by peer)
[11:14:04] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[11:14:05] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:14:07] *** Quits: wrongt (~wrongt@is.here.for-some.fun) (Changing host)
[11:14:07] *** Joins: wrongt (~wrongt@user/wrongt)
[11:14:08] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[11:14:08] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[11:14:08] *** Joins: benji (~benji@user/benji)
[11:14:14] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[11:14:15] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[11:14:27] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[11:14:45] *** Joins: timmot (~timmot@207.148.85.201)
[11:14:46] *** Joins: koolazer (~koo@user/koolazer)
[11:14:49] <epony> these two graphics have two mistakes each, while retaining correctness of representation are both wrong and also inaccurate
[11:14:51] <epony> https://en.wikipedia.org/wiki/Endianness#Overview
[11:14:51] <bayaz> Title: Endianness - Wikipedia 
[11:15:50] <epony> memory growth should be drawn going up, and.. digits growth should be drawn going left
[11:15:57] *** Quits: Gallomimia (~Gallomimi@d75-152-217-169.abhsia.telus.net) (Read error: Connection reset by peer)
[11:16:08] *** Quits: nisstyre (wes@2600:3c00::f03c:91ff:fe69:7f3d) (Quit: WeeChat 3.4)
[11:16:11] *** Joins: bomb_ (~bomb@user/bomb)
[11:16:17] *** Joins: nisstyre (wes@user/nisstyre)
[11:16:18] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[11:16:27] <epony> the way memory is drawn is a stack not memory
[11:16:59] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpyotkbeu1hy1qf.ipv6.telus.net)
[11:17:15] *** Quits: bomb (~bomb@user/bomb) (Ping timeout: 240 seconds)
[11:17:21] <sonny> The exponentiation operator works only with floating-point types. -- Why is this a good idea?
[11:17:28] *** Joins: monr0e (~monr0e@host-81-179-96-15.static.as13285.net)
[11:17:37] *** bomb_ is now known as bomb
[11:18:30] <epony> sonny, less overflows
[11:18:31] <ProfSimm> sonny: where
[11:18:33] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[11:18:51] <sonny> ProfSimm: In F#
[11:19:04] <sonny> epony: I guess
[11:19:22] <epony> FPUs are dealing with exponent notation ;-)
[11:19:23] *** Joins: NeoFAT32 (~UserNick@user/NeoFAT32)
[11:19:36] <ProfSimm> Seems like a case of "integers are for bit mangling and identifiers anyway"
[11:19:38] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:4001:9352:57b2:6a00) (Quit: My iMac has gone to sleep. ZZZzzz…)
[11:20:01] <epony> counters, arithmetic
[11:20:01] <ProfSimm> Real math needs real numbers.
[11:20:16] <sonny> that's not a floating point xD
[11:20:19] <epony> registers
[11:20:28] <ProfSimm> sonny: shh, make the pun work it
[11:20:41] <epony> everything is interegers ;-)
[11:20:49] <epony> you just pretend you store floats
[11:21:06] <sonny> integer seems to always be 32 bit, and nice it has error on overflow
[11:21:09] *** Joins: alexmac22347 (~alexmac22@192.157.105.82)
[11:21:21] <epony> depends on the machine and word size
[11:21:32] *** Joins: xythercoder (~xythercod@2401:4900:3e9a:2e0e::e34:c0b7)
[11:21:33] <epony> (and data model)
[11:22:13] <epony> https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models
[11:22:13] <bayaz> Title: 64-bit computing - Wikipedia 
[11:22:23] <epony> it's different on 32bit machines
[11:24:24] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:24:43] <arash> Hello, I didn't use OOP, I always worked with functional programming for 1 year as a freelancer, then i accept a job in a company and i find out WOW I tortured myself so so much because of avoid doing OOP for projects. Again, I'm working as a freelancer, how i prevent such problems in the future?
[11:24:47] <epony> ProfSimm, there is even an article for your favourite data structures  https://en.wikipedia.org/wiki/Data_model#Data_structure
[11:24:47] <bayaz> Title: Data model - Wikipedia 
[11:24:56] *** Joins: nsk_nyc (~nsk_nyc@45.238.142.234)
[11:25:20] <password> OOPs
[11:25:36] <arash> procedural programming*
[11:25:42] <ProfSimm> epony: what's my favorite data structure
[11:25:58] <epony> ProfSimm, a lisp ;-)
[11:26:09] <ProfSimm> eh
[11:26:11] <ProfSimm> :)
[11:28:11] *** Quits: wauterboi (~wauterboi@185.65.135.160) (Ping timeout: 246 seconds)
[11:28:30] <epony> fast forward wordings  https://en.wikipedia.org/wiki/Word_(computer_architecture)#Table_of_word_sizes
[11:28:31] <bayaz> Title: Word (computer architecture) - Wikipedia 
[11:29:24] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[11:29:47] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[11:31:02] <epony> https://en.wikipedia.org/wiki/Integer_(computer_science)#Common_integral_data_types
[11:31:03] <bayaz> Title: Integer (computer science) - Wikipedia 
[11:32:13] *** Quits: yawkat (~yawkat@cats.coffee) (Ping timeout: 256 seconds)
[11:33:20] <ProfSimm> epony: I have a new favorite structure, spaghetti stacks
[11:33:33] <ProfSimm> epony: it's a like a tree, but the links go in reverse
[11:33:35] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 260 seconds)
[11:34:10] <epony> actually you have it in reverse now, so you're thinking of sphaghetti hanging off real trees
[11:34:58] <epony> typically data structure trees are drawin with the root up as.. spaghetting hanging on nails
[11:35:30] <epony> which is silly as trees grow up and their root is also a tree underground
[11:36:41] <ProfSimm> epony: a tree that grows to heaven has roots going to hell
[11:36:52] *** Joins: freeworld (~freeworld@chello085216193138.chello.sk)
[11:39:17] *** Joins: aradesh (~aradesh@user/aradesh)
[11:39:37] *** Quits: bomb (~bomb@user/bomb) (Remote host closed the connection)
[11:39:44] *** Joins: bomb_ (~bomb@user/bomb)
[11:40:47] *** bomb_ is now known as bomb
[11:41:32] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Quit: Client closed)
[11:42:12] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[11:42:30] <epony> https://pmac-agpc.ca/sites/default/files/Tree.jpg
[11:42:31] <bayaz> Type: image/jpeg Size: 908.6 kB 
[11:42:53] *** Quits: oldmagic (~oldmagic@user/oldmagic) (Ping timeout: 260 seconds)
[11:43:22] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:48:18] <epony> as seen on https://en.wikipedia.org/wiki/Tree_swing_cartoon ; https://www.businessballs.com/amusement-stress-relief/tree-swing-cartoon-pictures-early-versions/ ; https://www.businessballs.com/amusement-stress-relief/tree-swing-cartoons-new-versions/
[11:48:19] <bayaz> Title: Tree swing cartoon - Wikipedia 
[11:48:22] <bayaz> Title: Tree Swing Cartoon Pictures (early versions) 
[11:48:22] <bayaz> Title: Tree Swing Cartoons (New Versions) 
[11:49:44] <ProfSimm> epony: don't you think how weird trees are. They're symmetric radial crystals that grow deliberately so their center is on the boundary between ground and air (or water)
[11:52:27] <epony> "organic life-forms that look like lightning rods"
[11:52:37] <epony> they are superb ;-)
[11:52:45] <epony> https://en.wikipedia.org/wiki/Continual_improvement_process#Kaizen
[11:52:45] <bayaz> Title: Continual improvement process - Wikipedia 
[11:53:03] *** Joins: Rounin (~david@84.212.130.215)
[11:55:56] *** Quits: fragment (~fragment@109.252.103.236) (Quit: Leaving)
[11:57:26] *** Quits: xythercoder (~xythercod@2401:4900:3e9a:2e0e::e34:c0b7) (Quit: Quit)
[12:00:58] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:02:16] <ProfSimm> epony: lightning rods, life forms and crystals are all examples of the same phenomenon of a self-replicating/propagating pattern
[12:05:27] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[12:09:42] *** Joins: palasso (~palasso@user/palasso)
[12:10:59] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:11:09] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[12:11:17] *** Joins: xythercoder (~xythecode@157.41.159.127)
[12:12:38] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.167) (Ping timeout: 246 seconds)
[12:13:12] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:13:12] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Client Quit)
[12:13:31] *** Joins: peteyboy1 (~peteyboy1@199.157.133.37.dynamic.jazztel.es)
[12:15:41] *** Joins: user51 (~user51@77.124.35.94)
[12:16:15] <pyzozord> is there a proper word for "singlize"?
[12:16:33] <bomb> singularize?
[12:17:03] <pyzozord> "unify" is not bad, anything better?
[12:17:14] *** Joins: norayr (376bc34bfc@37.252.78.253)
[12:18:24] <bomb> unify and singularize have different meanings
[12:19:47] *** Quits: r0073rr0r (~MyH3e@user/r0073rr0r) (Ping timeout: 260 seconds)
[12:20:21] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[12:22:01] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Quit: Le Soleil ne se couche pas !)
[12:22:39] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[12:22:58] *** Quits: nsk_nyc (~nsk_nyc@45.238.142.234) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:23:13] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[12:23:15] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Read error: Connection reset by peer)
[12:23:31] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[12:28:56] *** Joins: the_lanetly_052 (~the_lanet@194.135.152.167)
[12:31:33] *** Joins: jazzy (~jaziz@user/jaziz)
[12:35:17] *** Quits: the_lanetly_052 (~the_lanet@194.135.152.167) (Ping timeout: 268 seconds)
[12:36:13] *** Joins: Klinda (~superleag@user/klinda)
[12:36:28] *** Quits: xythercoder (~xythecode@157.41.159.127) (Quit: Konversation terminated!)
[12:40:13] <epony> synthesize, distill, postulate, derive, produce, generate, syncretise
[12:40:33] <epony> "instill"
[12:41:01] <bomb> just say "get shit together" lol
[12:41:39] *** Quits: bomb (~bomb@user/bomb) (Quit: o/)
[12:41:48] <epony> generalise
[12:42:42] <epony> isolate
[12:43:44] <epony> [RECOGNISE]
[12:49:42] <pyzozord> oh syncretize is not bad
[12:49:50] <pyzozord> others don't really make sense in this context
[12:50:21] <pyzozord> the context is I had separate builds for one application for each environment, and I changed it all to one general build for all environments
[12:51:27] <pyzozord> how did you find these words?
[12:51:36] <epony> merge
[12:51:48] <epony> I "sampled" them from my mental projections..
[12:52:08] <pyzozord> merge, unify, syncretize are great yeah
[12:52:21] <pyzozord> ok, smartass :P
[12:52:22] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[12:52:58] <epony> https://www.google.com/search?tbm=isch&q="singlize"
[12:52:59] <bayaz> Title: Google Images 
[12:54:36] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[12:55:11] <pyzozord> I bet the "mental projects" are some thesaurus online
[12:55:28] <pyzozord> *projections
[12:55:56] <epony> converging https://en.wikipedia.org/w/index.php?search=grand+unified+theory+of+everything
[12:55:58] <bayaz> Title: grand unified theory of everything - Search results - Wikipedia 
[12:56:57] *** Quits: monr0e (~monr0e@host-81-179-96-15.static.as13285.net) (Remote host closed the connection)
[12:57:26] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Read error: Connection reset by peer)
[12:57:38] <pyzozord> Imagine commit message "converged build environments"
[12:57:41] *** Joins: monr0e (~monr0e@mail.vixen.international)
[12:57:43] <pyzozord> looks so stupid :P
[12:58:06] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[12:58:09] <pyzozord> and only makes people confused about what you actually did there
[12:58:29] *** Parts: norayr (376bc34bfc@37.252.78.253) (Error from remote client)
[12:58:38] <epony> better than "infused profusely incompatible technological debt inflationary fallout"
[12:59:55] *** Joins: martinthewildpig (~martinthe@2a02:a03f:d8ee:9d00:b0cc:2c18:3131:fb47)
[12:59:59] <pyzozord> might as well make the commit message "look at me! I'm so smart! https://www.youtube.com/watch?v=ls5BFzuxGw4"
[13:00:18] *** Quits: favadi (~favadi@2001:ee0:4081:6914:1d4d:d1da:d234:eef0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:00:36] *** Joins: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[13:00:36] *** Quits: zwr (~zwr@2804:d45:b966:fb00:855e:197b:3580:2fd7) (Ping timeout: 240 seconds)
[13:00:50] <epony> just type "combine application environments"
[13:01:12] <pyzozord> yeah combine is not bad either
[13:01:27] *** Joins: zwr (~zwr@2804:d45:b966:fb00:85c1:b367:ef69:3db5)
[13:02:09] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-2e842b-161.dhcp.inet.fi)
[13:02:27] *** Joins: operateur (~My_user_n@91.143.220.230)
[13:02:31] <pyzozord> although combine kind of brings an image of a layer cake to mind, all the layers are still kind of discrete
[13:04:00] <pyzozord> But that's nitpicking, combine is good too
[13:04:37] <epony> https://en.wikipedia.org/wiki/Minimalist_program#Basic_operations
[13:04:37] <bayaz> Title: Minimalist program - Wikipedia 
[13:05:09] <DnzAtWrk> https://www.theverge.com/2020/5/7/21250300/eu-cookie-consent-policy-updated-guidelines-cookie-wall
[13:05:10] <bayaz> Title: The EU is trying to fix its abysmal cookie consent policy 
[13:05:21] <DnzAtWrk> By refusing to see the real issue
[13:05:34] <DnzAtWrk> site-specific cookie consent was a terrible idea
[13:05:39] <deniska> "Hippity hoppity, reduced the build environment monstrosity"
[13:07:41] *** Joins: favadi (~favadi@2001:ee0:4081:6914:1092:3801:21dd:5670)
[13:07:46] *** Joins: norayr (376bc34bfc@37.252.78.253)
[13:08:05] <pyzozord> lol :D
[13:08:08] *** Parts: norayr (376bc34bfc@37.252.78.253) (Error from remote client)
[13:08:14] <password> LOL deniska
[13:08:29] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[13:08:30] <pyzozord> I think this is how I will write all my commits from now on
[13:08:43] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:08:56] <pyzozord> it's gonna be poetry in commit logs
[13:09:18] *** Joins: plastico (~plastico@neomutt/plastico)
[13:09:45] <epony> in regular formalised grammar  https://en.wikipedia.org/wiki/Chomsky_hierarchy#Type-3_grammars
[13:09:45] <bayaz> Title: Chomsky hierarchy - Wikipedia 
[13:10:02] <deniska> Roses are red, violets are blue, I felt bad writing this code, let the god help you
[13:10:17] <pyzozord> I wonder if they can fire you for limericks in commit messages
[13:10:32] <pyzozord> especially if you get stubborn and refuse to write any other commit messages
[13:10:40] <epony> use offensive ones for double dare
[13:11:07] <pyzozord> no offensive ones are stupid, it's digital equivalent of spraying walls with slurs
[13:11:26] <epony> "DNA"
[13:11:28] <deniska> Well, the message should be descriptive of what's inside
[13:11:36] <deniska> "bad code" is not descriptive :)
[13:11:53] <deniska> you may as well just say "contains code"
[13:12:13] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[13:13:03] *** Quits: Blackajack (~Blackajac@user/Blackajack) (Quit: Leaving)
[13:13:15] <epony> s/batcode/baitcoat/g
[13:13:43] *** Joins: yawkat (~yawkat@cats.coffee)
[13:15:40] *** Quits: spine-o-saurus (~violator@2602:cf:7677:980c:67af:3546:eae7:9d7) (Quit: Ostensible error.)
[13:16:01] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:17:36] <epony> all of these are not good enough, you have to use descriptive ones, like "combine separate builds for each environment into one general build for all environments"
[13:18:26] <epony> and include some tech detail if you can, so someone can really know what the commits contain and be able to reproduce them if these get lost
[13:18:35] <pyzozord> I did "unify app environment builds", but I'm not fully happy with it
[13:19:25] <epony> it's on your todo list / specification / feedback and this is the tech version of it indicating your change set
[13:19:56] <pyzozord> no we actually generate public changelog form commit messages
[13:21:31] <epony> commit messages are exactly like comments in program sections, this time for a superset of sections changed
[13:22:05] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[13:22:58] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpyotkbeu1hy1qf.ipv6.telus.net) (Remote host closed the connection)
[13:24:26] *** Quits: wildo (~lain6141@202.180.111.143) (Quit: leaving)
[13:25:45] *** Joins: kakysha_ (~kakysha@user/kakysha)
[13:26:58] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:27:30] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[13:27:31] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[13:28:15] <epony> you can have one with "any sufficiently advanced humour is indistinguishable from reality" as in https://en.wikipedia.org/wiki/Indistinguishable_from_magic#Variants_of_the_third_law
[13:28:15] <bayaz> Title: Clarke's three laws - Wikipedia 
[13:31:35] <pyzozord> lol "Any sufficiently advanced troll is indistinguishable from a genuine kook"
[13:31:47] <pyzozord> what is kook
[13:32:31] <pyzozord> any sufficiently advanced nonesense is indistinguishable form sense
[13:35:10] <DnzAtWrk> any sufficiently advanced bug is indistinguishable from true maleficence
[13:37:13] *** Quits: saribro (~swinnenb@user/swinnenb) (Ping timeout: 260 seconds)
[13:40:59] *** Quits: freeworld (~freeworld@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[13:41:19] *** Joins: freeworld (~freeworld@chello085216193138.chello.sk)
[13:41:35] *** Quits: Athas (athas@2a01:7c8:aaac:1cf:112c:dc15:b959:356) (Quit: ZNC 1.8.2 - https://znc.in)
[13:41:45] *** Joins: Athas (athas@2a01:7c8:aaac:1cf:6914:1dfa:1871:fc52)
[13:41:55] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[13:43:17] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[13:45:15] <merijn> pyzozord: kook is a slang term for crazy person
[13:46:17] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[13:47:55] <pyzozord> oh I see, it makes even more sense now
[13:55:42] *** Joins: babubhai (~babubhai3@14.139.122.120)
[13:56:13] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[13:58:31] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[13:59:42] *** Joins: humanface (~humanface@20014C4E1C514C0000744A49CF99D587.dsl.pool.telekom.hu)
[14:00:41] *** Joins: xythercoder (~xythecode@157.41.159.127)
[14:02:56] <epony> hear the fine nuances of melody  https://en.wikipedia.org/wiki/King_Midas#Ears_of_a_Donkey
[14:02:57] <bayaz> Title: Midas - Wikipedia 
[14:03:24] *** Quits: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net) (Quit: reboot and fsck)
[14:03:50] <DnzAtWrk> Denysius is a swell god
[14:04:10] <DnzAtWrk> and I'm not just saying that because my name literally means follower of Denysius
[14:04:50] <DnzAtWrk> who doesn't like wine
[14:05:31] *** Joins: suss` (~user@user/suss)
[14:06:04] *** Joins: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net)
[14:06:21] <arahael> *Totally irrelevant factoid*: Kook is also a palindrome.
[14:06:58] *** Quits: suss (~user@user/suss) (Ping timeout: 260 seconds)
[14:09:09] *** Quits: martinthewildpig (~martinthe@2a02:a03f:d8ee:9d00:b0cc:2c18:3131:fb47) (Quit: Client closed)
[14:10:48] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[14:11:31] *** Joins: lisp123 (~lisp123@143.238.171.43)
[14:13:00] <pyzozord> DnzAtWrk: who?
[14:13:21] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[14:13:21] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[14:13:21] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[14:13:29] <DnzAtWrk> the greek god of wine and excess, who ironically gave Midas his power
[14:14:05] <pyzozord> you mean DIONYSOS?
[14:14:24] <DnzAtWrk> the spellchecker didn't kick it 
[14:14:26] <pyzozord> or sus, https://en.wikipedia.org/wiki/Dionysus
[14:14:26] <bayaz> Title: Dionysus - Wikipedia 
[14:14:42] <pyzozord> wasn't just wine an excess, it was orgy
[14:15:08] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[14:15:21] <pyzozord> but not just not just sex, they had a different meaning for orgy, spiritual, kind of like in a trans I think
[14:16:00] <DnzAtWrk> kinda like wiccans
[14:16:02] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[14:16:12] <pyzozord> I like DENYsuis tho lol
[14:16:27] <pyzozord> but makes more sense to call him ALLOWsuis tho
[14:16:53] <Raziel> or like a bunch of drunk dudes watching their favorite sports match and getting all touchy while insisting there is definitely nothing homosexual occurring at any point
[14:17:01] <Raziel> actually, that does sound very ancient greece
[14:17:34] *** Joins: rtypo (~alex@user/rtypo)
[14:17:48] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[14:18:05] <pyzozord> There was another god, one that was about logic and temperance etc I forget his name
[14:18:09] <DnzAtWrk> it's not gay unless the gladius touch
[14:18:11] <Raziel> speaking of ancient things that never change, apparently the first recorded "walks into a bar" joke is from ancient sumeria
[14:19:17] <pyzozord> but both were had stupid things, was it euclid or pythagoras that made a religion with stupid superstitions on top of the math
[14:19:27] *** Quits: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net) (Quit: trying again...)
[14:19:52] <pyzozord> I forget, I didn't study this at all, just reading things casually and rarely
[14:20:30] <DnzAtWrk> do you mean the god of etomylogy?
[14:20:41] <DnzAtWrk> the one which... socrates I think, spoke to in a dream
[14:20:49] <pyzozord> no, I don't think so
[14:20:58] <pyzozord> never heard about a god of etymology
[14:20:58] <Raziel> lots of what we'd now call scientists were also philosophers and religious back then
[14:21:04] <DnzAtWrk> ah, that was Hermes
[14:21:16] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[14:21:22] <DnzAtWrk> Hermes was kinda meta
[14:21:47] <GeDaMo> https://en.wikipedia.org/wiki/List_of_knowledge_deities
[14:21:47] <bayaz> Title: List of knowledge deities - Wikipedia 
[14:22:21] *** Joins: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net)
[14:23:49] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[14:25:38] *** Quits: Visne (~Visne@dhcp-077-248-174-092.chello.nl) (Ping timeout: 246 seconds)
[14:27:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:27:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[14:27:52] *** Quits: favadi (~favadi@2001:ee0:4081:6914:1092:3801:21dd:5670) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:28:02] <user51> https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/pearls-2.pdf
[14:28:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:28:18] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[14:28:48] <user51> i like mcilroy's solution
[14:29:01] <user51> search for 'tr -'
[14:29:47] <pyzozord> I looked in the book but can't find it, sorry
[14:30:35] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[14:32:03] *** Joins: Visne (~Visne@dhcp-077-248-174-092.chello.nl)
[14:32:39] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:34:55] *** Quits: monr0e (~monr0e@mail.vixen.international) (Ping timeout: 268 seconds)
[14:36:37] *** Quits: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net) (Quit: trying yet again...)
[14:38:17] <DnzAtWrk> insert the firstborn child
[14:38:19] <DnzAtWrk> hail science
[14:40:44] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[14:41:05] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 248 seconds)
[14:42:15] *** Joins: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net)
[14:43:33] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 268 seconds)
[14:44:11] <epony> https://en.wikipedia.org/wiki/Timeline_of_historic_inventions#1970s
[14:44:12] <bayaz> Title: Timeline of historic inventions - Wikipedia 
[14:45:34] *** Joins: LargeEggFinger (~LargeEggF@2a01:4b00:84bf:ec00:3d9a:9754:878c:594d)
[14:47:07] *** Quits: LargeEggFinger (~LargeEggF@2a01:4b00:84bf:ec00:3d9a:9754:878c:594d) (Client Quit)
[14:49:01] *** Quits: babubhai (~babubhai3@14.139.122.120) (Remote host closed the connection)
[14:49:43] *** Joins: cursey (~cursey@user/cursey)
[14:49:52] *** Joins: babubhai (~babubhai3@14.139.122.120)
[14:50:14] *** Quits: magla (~gelignite@d5365b83.access.ecotel.net) (Read error: Connection reset by peer)
[14:50:22] <epony> https://en.wikipedia.org/wiki/Extreme_ultraviolet_lithography#Resource_requirements
[14:50:23] <bayaz> Title: Extreme ultraviolet lithography - Wikipedia 
[14:50:33] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[14:52:28] *** Quits: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net) (Quit: once more, with feeling!)
[14:52:49] *** Quits: Geolykt (~Geolykt@94.46.93.245) (Ping timeout: 256 seconds)
[14:53:37] *** magla is now known as jellyknight
[14:54:11] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 256 seconds)
[14:55:23] *** Quits: raym (~raym@user/raym) (Ping timeout: 246 seconds)
[14:57:18] *** Joins: furrykef (~furrykef@ip68-229-192-239.ok.ok.cox.net)
[14:58:30] *** Quits: humanface (~humanface@20014C4E1C514C0000744A49CF99D587.dsl.pool.telekom.hu) (Quit: Client closed)
[14:58:59] *** Joins: humanface (~humanface@20014C4E1C514C0000744A49CF99D587.dsl.pool.telekom.hu)
[15:02:50] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-2e842b-161.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:02:56] *** Joins: DnzAtWrk2 (~DnzAtWrk@1091.pc.puv.fi)
[15:03:06] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[15:04:50] *** Joins: Jaami (~Jaami@182.185.193.214)
[15:04:50] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Ping timeout: 246 seconds)
[15:05:51] *** Joins: DnzAtWrk (~DnzAtWrk@1091.pc.puv.fi)
[15:07:34] *** Joins: favadi (~favadi@2001:ee0:4081:6914:b4b8:b6ed:140c:b302)
[15:07:45] *** Quits: DnzAtWrk2 (~DnzAtWrk@1091.pc.puv.fi) (Ping timeout: 248 seconds)
[15:08:14] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[15:10:26] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[15:11:18] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:13:28] *** Joins: raym (~raym@user/raym)
[15:14:22] *** Quits: jaysicks (~jaysicks@91-82-251-185.pool.digikabel.hu) (Ping timeout: 272 seconds)
[15:18:08] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:19:55] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[15:22:41] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[15:23:22] *** Joins: kakysha_ (~kakysha@user/kakysha)
[15:24:00] *** Joins: Twipply (~Twipply@user/twipply)
[15:25:41] *** Joins: kakysha (~kakysha@user/kakysha)
[15:26:47] *** Joins: dunkeln (~dunkeln@157.119.207.150)
[15:26:47] *** Quits: dunkeln (~dunkeln@157.119.207.150) (Changing host)
[15:26:47] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[15:27:11] *** Joins: jaysicks (~jaysicks@62-165-243-204.pool.digikabel.hu)
[15:27:57] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[15:28:01] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 248 seconds)
[15:28:45] *** Joins: jinsun (~jinsun@user/jinsun)
[15:30:48] *** Joins: img (~img@user/img)
[15:31:52] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[15:32:13] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[15:32:13] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[15:32:49] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 248 seconds)
[15:33:34] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:33:50] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:34:31] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[15:35:03] *** Quits: _mantra (~mantra@216.73.163.81) (Ping timeout: 260 seconds)
[15:35:23] *** Joins: mantra (~mantra@216.73.163.24)
[15:35:38] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[15:37:21] *** Quits: joji (~jojo@86.4.72.180) (Quit: Leaving)
[15:41:35] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Ping timeout: 246 seconds)
[15:42:47] *** Joins: lisp123 (~lisp123@143.238.171.43)
[15:42:47] *** Quits: geeknix (~pi@2001:e68:5432:518e:7d14:5ca5:9ed8:f278) (Ping timeout: 260 seconds)
[15:44:22] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[15:44:35] *** Joins: coaxing (~coaxing@user/coaxing)
[15:44:55] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:45:04] *** Joins: babubhai12 (~babubhai3@14.139.122.120)
[15:47:11] *** suss` is now known as suss
[15:47:53] *** Quits: babubhai (~babubhai3@14.139.122.120) (Ping timeout: 246 seconds)
[15:49:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:52:29] *** Joins: dunkeln (~dunkeln@117.239.210.100)
[15:52:29] *** Quits: dunkeln (~dunkeln@117.239.210.100) (Changing host)
[15:52:29] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[15:53:11] *** Quits: cliluw (~cliluw@47.147.77.43) (Read error: Connection reset by peer)
[15:54:17] *** Quits: DnzAtWrk (~DnzAtWrk@1091.pc.puv.fi) (Ping timeout: 260 seconds)
[15:54:32] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 246 seconds)
[15:54:53] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[15:55:59] *** Joins: cliluw (~cliluw@47.147.77.43)
[15:55:59] *** Quits: cliluw (~cliluw@47.147.77.43) (Remote host closed the connection)
[15:56:01] *** Quits: babubhai12 (~babubhai3@14.139.122.120) (Remote host closed the connection)
[15:56:15] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[15:56:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:57:11] *** Joins: babubhai12 (~babubhai3@14.139.122.120)
[15:57:26] *** Joins: cliluw (~cliluw@47.147.77.43)
[16:00:04] *** Joins: geeknix (~pi@2001:e68:5432:af1f:781b:3d59:e4b7:2808)
[16:02:30] *** Quits: rsx (~dummy@ppp-188-174-137-251.dynamic.mnet-online.de) (Ping timeout: 272 seconds)
[16:03:43] *** Quits: cliluw (~cliluw@47.147.77.43) (Ping timeout: 268 seconds)
[16:05:16] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[16:06:27] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[16:07:06] *** Joins: cliluw (~cliluw@47.147.77.43)
[16:11:21] *** Joins: Leone (~Leo@216.154.4.77)
[16:11:41] *** Quits: cliluw (~cliluw@47.147.77.43) (Ping timeout: 246 seconds)
[16:11:43] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 260 seconds)
[16:11:48] *** Joins: monr0e (~monr0e@mail.vixen.international)
[16:13:36] *** Joins: cliluw (~cliluw@47.147.77.43)
[16:13:36] *** Quits: cliluw (~cliluw@47.147.77.43) (Remote host closed the connection)
[16:14:51] *** Joins: rsx (~dummy@ppp-188-174-150-203.dynamic.mnet-online.de)
[16:15:02] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[16:15:14] *** Joins: cliluw (~cliluw@47.147.77.43)
[16:15:22] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[16:15:34] *** Quits: Jaami (~Jaami@182.185.193.214) (Quit: Nettalk6 - www.ntalk.de)
[16:15:58] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:18:35] *** Joins: tccki (~tccki@box.webslate.co.nz)
[16:18:47] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[16:19:09] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[16:19:45] *** Quits: cliluw (~cliluw@47.147.77.43) (Ping timeout: 248 seconds)
[16:20:17] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Ping timeout: 248 seconds)
[16:21:13] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Ping timeout: 256 seconds)
[16:22:52] *** Quits: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 260 seconds)
[16:23:29] *** Quits: xythercoder (~xythecode@157.41.159.127) (Quit: Konversation terminated!)
[16:26:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[16:26:31] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[16:27:02] *** Joins: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[16:30:03] <arkanoid> Hello! I'm looking for a solution that may well already be out there but I don't know the name. It's an unlimited buffer. I need a piece of software to deploy on both ends of an unreliable connection, and have a producer filling the buffer on one side, and have the software trying to push all data on the other side (best effort) without losing any data, deleting on the source once it happens
[16:30:46] <arkanoid> If the connection fails, the buffer just waits and retry later on. No data should be lost
[16:30:51] <GeDaMo> TCP?
[16:31:28] <merijn> eh
[16:31:36] <merijn> unlimited buffers are a pretty bad idea :)
[16:31:38] <arkanoid> TCP is part of the solution, yes, it doesn't handle the buffer and the retry
[16:31:49] <merijn> You want fixed size buffers to backpropagate pressure
[16:32:02] <merijn> Else you will get yourself into real trouble in the future
[16:32:16] *** Joins: jianwu (~jianwu@softbank126088036030.bbtec.net)
[16:32:25] <arkanoid> If buffer becomes full, it deletes old contents
[16:32:42] *** Quits: suss (~user@user/suss) (Ping timeout: 268 seconds)
[16:32:51] <merijn> "best effort" and "without losing any data" sounds pretty contradictory too?
[16:33:17] <arkanoid> TCP is best effort, and it doesn't lose any data
[16:34:09] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 248 seconds)
[16:35:43] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:37:00] <arkanoid> I was thinking about using an sqlite as buffer, but then I realize that the process acting as producer and the one acting as consumer (pulling from db, pushing to network) would be two writers at the same time on same sqlite and that would be pretty bad
[16:37:47] <arkanoid> Redis can't be used as I need disk storage, not memory
[16:37:53] *** Joins: duuude (~user@user/duuude)
[16:37:58] <Jong>  I'm trying to find the median of two sorted arrays. Can't I perform a binary search on the shorter array and just step in the opposite direction in the longer array?    So if I step -32 in the shorter array, I step +32 in the longer array.  That way the # of elements left of pivot points are == to # of elements right of pivots. If that condition is kept while binary searching eventually the median will be zero'd in.  Isn't this a good
[16:37:58] <Jong>  strategy?
[16:38:51] *** Joins: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[16:41:19] <EdFletcher> arkanoid: Redis absolutely can persist to disk, a couple different ways actually 
[16:41:47] <arkanoid> EdFletcher:  I guess it's not its main use
[16:41:47] <EdFletcher> arkanoid: https://redis.io/docs/manual/persistence/ 
[16:41:49] <bayaz> Title: Redis persistence 
[16:42:04] <merijn> arkanoid: What's the rate of writing, though? multiple writers on sqlite is only a performance issue (i.e. they block each other, so two high write loads = bad)
[16:42:09] <EdFletcher> arkanoid: True, Redis is not a database so it’s not it’s primary use 
[16:42:19] <merijn> If writes are fairly slow it's not a problem
[16:43:47] <arkanoid> Writes are very fast: storing live buffers from sensor 12/15 write operations per second. And if I put a consumer on the other side it would be same amount
[16:44:25] <arkanoid> Also buffers are quite large. 100KB each
[16:44:27] *** Quits: lisp123 (~lisp123@143.238.171.43) (Remote host closed the connection)
[16:45:00] *** Quits: Psybur (~Psybur@2601:5c9:4201:3220:19c2:a1cd:6600:38ba) (Ping timeout: 240 seconds)
[16:45:24] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:40b6:f130:dc39:e36c)
[16:48:44] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 272 seconds)
[16:49:26] *** Quits: babubhai12 (~babubhai3@14.139.122.120) (Read error: Connection reset by peer)
[16:50:40] *** Joins: suss (~suss@user/suss)
[16:50:42] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Read error: Connection reset by peer)
[16:51:26] *** Joins: Atque (~Atque@user/atque)
[16:51:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 248 seconds)
[16:53:50] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[16:53:56] *** Joins: Guest69 (~Guest69@ip68-105-113-105.sd.sd.cox.net)
[16:54:47] <pyzozord> sounds like a dynamic queue backed by disk or something like that?
[16:55:50] *** Joins: Tazy (~Tazmainia@2001:1c02:1708:6800:69aa:9de:e851:cacd)
[16:56:15] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:40b6:f130:dc39:e36c) (Ping timeout: 250 seconds)
[16:56:26] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[16:57:42] <merijn> I mean, 12/15 writes per second is kinda slow, tbh :p
[16:57:52] <pyzozord> merijn: how do normally pipes backpropagate pressure? I think in posix systems kernel just freezes the process that was writing to the pipe, until there is more space in that pipe
[16:57:57] <merijn> Why are the producer and consumer both doing writes?
[16:58:14] <merijn> pyzozord: I mean "freezing the producer" is backpropagation :p
[16:58:30] <pyzozord> I guess but only one level right?
[16:58:39] <merijn> pyzozord: The problem with unlimited buffers is that if a producers produces data faster than it's consumed, then you get infinite memory blowup
[16:58:44] <pyzozord> what happens if that frozen process was reading from another pipe too
[16:58:50] <merijn> Well, infinite until linux starts randomly killing stuff
[16:59:05] <merijn> pyzozord: Then that pipe fills up and *that* writer gets frozen too
[16:59:22] <pyzozord> oh I see, it fills up because the frozen process won't read from it
[16:59:36] <merijn> pyzozord: i.e. if consumers in a pipeline can't consume fast enough, eventually the producers will get frozen until consumer has caughtup
[16:59:39] <merijn> pyzozord: yeah
[17:00:14] <pyzozord> so freezing the process seems now like the only solution, are there other methods of backpropagation?
[17:00:15] <merijn> Most systems are better of halting than blowing up, which is why backpropagation is generally better
[17:00:27] *** Joins: jamea (~jamea@177.239.82.103)
[17:00:48] <merijn> pyzozord: non-blocking writes will report a failure in the writer, instead of freezing, then you can do something else in the process and try writing again later
[17:00:51] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[17:01:03] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[17:01:27] <merijn> Where "something else" is (potentially) "fire off a loud pager alert about a process being blocked" if the system (in theory) shouldn't block
[17:01:49] *** Quits: favadi (~favadi@2001:ee0:4081:6914:b4b8:b6ed:140c:b302) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:02:33] *** Joins: dunkeln (~dunkeln@117.239.210.100)
[17:02:34] *** Quits: dunkeln (~dunkeln@117.239.210.100) (Changing host)
[17:02:34] *** Joins: dunkeln (~dunkeln@user/dunkeln)
[17:04:03] *** Quits: Cyp (~cyp@213.237.84.236) (Excess Flood)
[17:04:33] *** Joins: Cyp (~cyp@213.237.84.236)
[17:07:33] *** Joins: dunkeln_ (~dunkeln@157.32.219.77)
[17:07:44] *** Quits: dunkeln (~dunkeln@user/dunkeln) (Ping timeout: 272 seconds)
[17:08:18] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[17:08:18] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[17:08:54] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:10:28] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[17:11:30] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[17:11:37] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[17:13:45] <fweht> whats a cheap way to randomly distribute N points in a given rectangle without letting them come too near to each other?  what i did was first distribute them uniformly, then search for the pair with the smallest distance and reposition them (again uniformly), repeat for a fixed number, is this stupid?
[17:17:06] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 268 seconds)
[17:18:52] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Ping timeout: 260 seconds)
[17:19:45] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:bc18:8fba:1417:6198)
[17:21:09] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[17:21:40] *** Quits: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 272 seconds)
[17:22:06] *** Joins: favadi (~favadi@2001:ee0:4081:6914:150a:69:b924:d81d)
[17:23:19] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[17:23:59] *** Joins: Paramecium (~P.bursari@103.100.175.170)
[17:24:20] *** Joins: urnebes (~urnebes@2605:8d80:66d:7f05:fe0f:8396:3dfe:c12c)
[17:26:42] <pyzozord> fweht: chop it into small pieces put points randomly in each piece
[17:26:48] <pyzozord> I mean the same amount of points
[17:27:40] <pyzozord> fweht: here is a lot about similar problems https://caseymuratori.com/blog_0011
[17:27:40] <bayaz> Title: The Nebraska Problem 
[17:28:01] <pyzozord> fweht: I think this one is more specific to your problem https://caseymuratori.com/blog_0013
[17:28:02] <bayaz> Title: Assorted grass system features 
[17:28:23] <fweht> pyzozord: thank you!
[17:29:08] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[17:29:41] *** Joins: wedr (~tom_mai78@pool-108-20-128-8.bstnma.fios.verizon.net)
[17:29:46] *** Joins: Atque (~Atque@user/atque)
[17:30:55] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:bc18:8fba:1417:6198) (Ping timeout: 250 seconds)
[17:31:10] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[17:31:30] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[17:31:47] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[17:32:07] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[17:32:17] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[17:36:17] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:38:36] *** Quits: dld (~davidlowr@2601:197:600:1210:295d:ca2a:3a31:19f2) (Ping timeout: 240 seconds)
[17:39:13] *** Quits: Twipply (~Twipply@user/twipply) (Ping timeout: 248 seconds)
[17:39:24] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[17:40:31] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[17:41:38] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 260 seconds)
[17:42:20] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[17:42:45] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[17:42:45] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:42:47] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[17:42:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:44:11] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[17:45:08] *** Quits: favadi (~favadi@2001:ee0:4081:6914:150a:69:b924:d81d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:47:12] *** Quits: dunkeln_ (~dunkeln@157.32.219.77) (Quit: Lost terminal)
[17:48:38] *** Quits: zmotaj (~zmotaj@user/zmotaj) (Ping timeout: 260 seconds)
[17:50:29] *** Joins: pmercado (~pmercado@190.22.83.12)
[17:50:42] <arkanoid> pyzozord:  maybe your naming is right. Surely is a queue
[17:51:11] <arkanoid> merijn:  both producer and consumer are writers
[17:51:50] <arkanoid> You have a process that fills the queue from raw data source, and another that empty it according to network availability. Both insert and delete are write operations
[17:52:33] <arkanoid> So the queue/buffer must support concurrent writings 
[17:54:54] <edgar-rft> yeah, let's play some arkanoid :-)
[17:55:14] *** Quits: kaivai (~kaivai@user/kaivai) (Ping timeout: 272 seconds)
[17:56:13] <DevAntoine> Hello
[17:56:34] <DevAntoine> How would you handle rabbitmq's exchange renaming without losing messages?
[17:56:36] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[17:56:42] *** Joins: tinhatcat (~Thunderbi@2620:103:a000:2201:8ebf:b39b:1976:95a0)
[17:57:19] *** Joins: zmotaj (~zmotaj@user/zmotaj)
[17:58:58] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Read error: Connection reset by peer)
[17:59:17] *** Joins: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba)
[18:02:36] *** Joins: morte_ (~user@181.114.17.106)
[18:02:54] *** Joins: kaivai (~kaivai@user/kaivai)
[18:03:23] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[18:03:47] *** Quits: jamea (~jamea@177.239.82.103) (Ping timeout: 260 seconds)
[18:03:50] *** Joins: bartwe_ (bartwe_@77-172-76-187.fixed.kpn.net)
[18:04:57] *** Joins: favadi (~favadi@2001:ee0:4081:6914:6d64:7204:ba68:25cc)
[18:05:31] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[18:06:26] *** Quits: Psybur (~Psybur@2603:3021:2541:80c1:19c2:a1cd:6600:38ba) (Ping timeout: 268 seconds)
[18:07:31] *** Joins: newwebdev13 (~newwebdev@78.135.91.54)
[18:08:13] *** Quits: tinhatcat (~Thunderbi@2620:103:a000:2201:8ebf:b39b:1976:95a0) (Quit: tinhatcat)
[18:08:33] *** Joins: tinhatcat (~Thunderbi@2620:103:a000:2201:8ebf:b39b:1976:95a0)
[18:08:45] *** Quits: tinhatcat (~Thunderbi@2620:103:a000:2201:8ebf:b39b:1976:95a0) (Client Quit)
[18:09:00] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:b416:f658:9e23:6472)
[18:09:13] <Jong> I notice binary search implementations track low and high points. Isn't it possible to perform binary search by just tracking the midpoint and step size?
[18:09:14] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:b416:f658:9e23:6472) (Read error: Connection reset by peer)
[18:09:26] *** Joins: Psybur (~Psybur@35.sub-174-244-245.myvzw.com)
[18:09:53] <Jong> like for searching 100 element, start at index 50 with step size of 25. 
[18:10:41] <PlanckWalk> Yes, being much more careful with what happens to odd sizes.
[18:11:03] <Jong> Thanks for confirming that
[18:11:58] <wedr> DevAntoine, ask on Stack Overflow, that is a domain-specific question.
[18:14:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:14:22] *** Quits: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Quit: xff0x_)
[18:16:14] *** Joins: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[18:18:22] *** Joins: NTSYSTEM (~NTSYSTEM@gateway/vpn/pia/ntsystem)
[18:20:13] *** Quits: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Client Quit)
[18:23:00] *** Joins: kakysha (~kakysha@user/kakysha)
[18:23:06] *** Joins: Mi2020 (~Mi@197.49.176.208)
[18:23:28] *** Joins: Twipply (~Twipply@user/twipply)
[18:23:55] *** Parts: Mi2020 (~Mi@197.49.176.208) ()
[18:24:13] *** Quits: favadi (~favadi@2001:ee0:4081:6914:6d64:7204:ba68:25cc) (Ping timeout: 250 seconds)
[18:26:11] *** Joins: jamea (~jamea@200.68.140.14)
[18:27:04] *** Quits: coaxing (~coaxing@user/coaxing) (Quit: WeeChat 3.4.1)
[18:27:12] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:8ce9:3c97:9d00:e7b3) (Read error: Connection reset by peer)
[18:30:03] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[18:30:11] *** Joins: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com)
[18:30:36] *** Quits: fe23 (~fe23@2409:8a34:465:ec80:5822:254e:7c4b:3f7) (Ping timeout: 240 seconds)
[18:31:30] *** Joins: fe23 (~fe23@2409:8a34:465:ec80:5822:254e:7c4b:3f7)
[18:33:22] *** Joins: dld (~davidlowr@107.126.253.180)
[18:35:49] *** Quits: wodencafe (wodencafe@woden.cafe) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[18:36:05] *** Joins: wodencafe (wodencafe@woden.cafe)
[18:37:39] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:b9e8:a9f4:c78b:2abc)
[18:38:41] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[18:39:07] *** Quits: dld (~davidlowr@107.126.253.180) (Ping timeout: 268 seconds)
[18:39:53] *** Joins: JanC (~janc@user/janc)
[18:40:37] *** Joins: dld (~davidlowr@107.126.253.180)
[18:41:00] *** Quits: newwebdev13 (~newwebdev@78.135.91.54) (Quit: Leaving)
[18:41:35] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Ping timeout: 268 seconds)
[18:42:49] *** Joins: Likorn (~Likorn@c114-150.icpnet.pl)
[18:43:09] *** Joins: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[18:45:58] *** Joins: Cyp_ (~cyp@213.237.84.236)
[18:46:23] *** Quits: Cyp (~cyp@213.237.84.236) (Ping timeout: 260 seconds)
[18:50:09] <beaky> yes im thinking of using binary search on my succinct radix trie implementation in rust to help boost search speed but i thought maybe linear search with simd is faster and more cache friendly and also easier to implement
[18:50:16] *** Quits: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Quit: xff0x_)
[18:50:39] *** Joins: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[18:51:12] <beaky> because binary search is infamous for being hard to write correct implementations of like jon bentley's programming pearls had binary search since the 70s and was mocking implementations that were incorrect but then 30 years later it was found out that that binary search implementation too was incorrect and had a sublte bug or something
[18:51:36] <beaky> so i would not trust a binary search implementation unless it had a formal proof certified in coq
[18:53:41] <davve> do both and compare
[18:55:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:55:32] <edgar-rft> sounds like a case of binary search paranoia
[18:56:59] <Ali_A> I mean the only problem I know with binary search is (low + high)/2 can overflow when you do low+high
[18:57:00] <Ali_A> so people suggest
[18:57:00] <Ali_A> (low + (high - low)/2)
[18:57:04] *** Joins: Geolykt (~Geolykt@94.46.93.245)
[18:57:21] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[19:01:38] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Client Quit)
[19:03:02] *** Quits: Cyp_ (~cyp@213.237.84.236) (Quit: Konversation terminated!)
[19:03:15] <Stefan26> haha
[19:04:03] *** Joins: Cyp_ (~cyp@213.237.84.236)
[19:04:48] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[19:04:58] *** Joins: Akiva (~Akiva@user/Akiva)
[19:05:28] *** Quits: Psybur (~Psybur@35.sub-174-244-245.myvzw.com) (Remote host closed the connection)
[19:05:37] *** Joins: swp (~Thunderbi@143.176.249.0)
[19:05:54] *** Joins: Psybur (~Psybur@75.145.205.201)
[19:06:20] *** Quits: dld (~davidlowr@107.126.253.180) (Ping timeout: 246 seconds)
[19:08:47] *** Quits: swp (~Thunderbi@143.176.249.0) (Client Quit)
[19:09:04] <GeDaMo> Yeah, I think that was the bug in Jon Bentley's version
[19:09:57] <GeDaMo> https://en.wikipedia.org/wiki/Binary_search_algorithm#Implementation_issues
[19:09:58] <bayaz> Title: Binary search algorithm - Wikipedia 
[19:10:31] *** Joins: swp (~Thunderbi@143.176.249.0)
[19:10:38] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Quit: The Lounge - https://thelounge.chat)
[19:12:05] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:13:13] *** Quits: urnebes (~urnebes@2605:8d80:66d:7f05:fe0f:8396:3dfe:c12c) (Read error: Connection reset by peer)
[19:13:14] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[19:13:34] <pyzozord> oh I never thought of the integer overflow, I have to really think about integer overflow for every addition I see
[19:13:45] *** Quits: Cyp_ (~cyp@213.237.84.236) (Excess Flood)
[19:13:52] <pyzozord> I don't remember much from binary search, only that it's full of OBOE
[19:14:04] *** Joins: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[19:14:17] *** Joins: Cyp_ (~cyp@213.237.84.236)
[19:14:53] <bartwe_> the out of range is only an issue if the index sizing is not of the same size as pointers
[19:15:02] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[19:15:27] *** Quits: jellyknight (~gelignite@d5365b83.access.ecotel.net) (Quit: Stay safe!)
[19:16:33] <bartwe_> if they are the same size it only happens if the elements are single byte sized and fill the entire heap, but because it would be sorted using the heap would not be the way to go anyways
[19:17:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[19:17:30] <InPhase> Ali_A: Or on a modern computer you can just use 64 bit unsigned integers, and avoid arrays with more than 9223372036854775809 elements.
[19:17:46] <jamea> hi wich cell phone recomend me buy: budget: 400 to 650 dlls  256 space, 8 or 12 gb ram, snapdragon, dual sim, global, REAL Imei, fast charge, thanks
[19:17:58] <kee> InPhase: That kinda defeats the point of binary search, though.
[19:18:06] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:18:48] <kee> jamea: Nokia sells some decent ones. I'm sure you'll be able to add more RAM.
[19:18:56] <InPhase> jamea: You're paying for a phone with DLLs?
[19:19:05] <kee> And a few hours of charging lasts a few weeks.
[19:19:18] <jamea> InPhase with Dollars or Gold
[19:19:24] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:19:27] <pyzozord> InPhase: that assumes though that the binary search was on an array, it maybe a search for a scalar value
[19:19:34] <kee> jamea: Which country's dollar?
[19:20:23] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[19:20:25] <InPhase> jamea: I don't understand half of your units, but the Pixel 5a is a top-rate phone at a modest price.  I'd recommend checking it.
[19:20:45] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[19:21:15] *** Joins: hqdruxn08_ (~hqdruxn08@user/hqdruxn08)
[19:21:36] <kee> 256 space is just one byte.
[19:21:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[19:22:00] *** Joins: Inline (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de)
[19:22:03] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[19:22:15] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[19:22:36] <pyzozord> I think it's $400-$650, 256Mb ssd (?), 8-12Gb, snapdragon chipset. I don't understand "global" and "real imei". Are there fake imei?
[19:22:42] *** Joins: jsmooth (~quassel@user/jsmooth)
[19:22:45] <InPhase> pyzozord: Typically that would be a double then.  But I suppose there are a few edge cases where you would need an extremely large integer for that.
[19:22:46] <pyzozord> 8-12Gb ram
[19:23:28] <jamea> InPhase thanks
[19:23:34] <jamea> kee Mexico
[19:23:44] <pyzozord> InPhase: is it that no matter the integer size, the same problem occurs? if my min and my max are both close to the end of the range, it will overflow
[19:23:58] <InPhase> jamea: Well my 5a from the U.S. worked fine for me in Mexico, if that helps.
[19:24:03] <jamea> 256GB
[19:24:04] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:24:38] *** Joins: vitali64 (~vitali64@user/vitali64)
[19:24:38] <pyzozord> wow do they sell now 256gb smartphones for $500?
[19:24:56] *** Joins: coaxing (~coaxing@user/coaxing)
[19:25:00] *** Quits: hqdruxn08 (~hqdruxn08@user/hqdruxn08) (Ping timeout: 240 seconds)
[19:25:05] <InPhase> 500 Mexican dollars does not get you a lot of phone though...
[19:25:32] <jamea> InPhase 400 or 650 dollars americans
[19:25:49] <InPhase> That would be more like it for a phone of that scope.
[19:26:07] <pyzozord> lol my laptop has 120 gb
[19:26:17] <pyzozord> and it's reall more then enough
[19:26:30] <InPhase> 256GB of phone storage is probably overkill for almost anything.
[19:26:31] <merijn> InPhase: I mean doubles can overflow too and, more importantly, lose precision for big values
[19:26:56] <merijn> Doubles cannot accurately represent all integers above 2^53
[19:26:59] <InPhase> merijn: When your doubles overflow, it's time to buy a smaller universe so your numbers stop getting so large.
[19:27:16] <merijn> So if you math requires numbers between 2^53 and 2^64 you cannot use doubles
[19:27:20] <jamea> InPhase wich model you use?
[19:27:38] *** Joins: Citillara (~userid@user/citillara)
[19:27:38] <jamea> if possible have amazon link? only see pixel 6 at $999 dollars
[19:28:12] <merijn> The Nokia android phones are pretty good mid-price phones
[19:28:13] <pyzozord> jamea: use https://www.gsmarena.com/compare.php3
[19:28:14] <bayaz> Title: Compare phones, smartphones, tablets - GSMArena.com 
[19:28:29] <pyzozord> oh nevermind it's for compare not for search
[19:28:33] <InPhase> jamea: The 5a is $449 from google, which is where I bought it:  https://store.google.com/product/pixel_5a_5g_specs?hl=en-US
[19:28:34] *** Joins: dld (~davidlowr@2620:6e:6000:2900:38c1:e5a4:b065:9eb3)
[19:28:35] <bayaz> Title: Pixel 5a with 5G Tech Specs 
[19:28:40] <pyzozord> anyway once you find few models use gsmarena to compare them
[19:29:17] <merijn> I bought a Nokia 7.2 for, what, 350 euro or so? Specs are overkill for anything except, like, 3D games on your phone or some shit I don't care about :p
[19:29:39] <InPhase> jamea: I don't think there are any configurable options.  The case comes in one color I think, which is pretty reasonable considering everyone sane puts a case on a phone anyway.
[19:29:45] <jamea> pyzozord thanks
[19:30:17] <jamea> InPhase thanks searching in google store
[19:30:31] <jamea> merijn i ll check and comapre
[19:31:03] <jsmooth> Anyone in U.S. and familiar with House Bill 3816?
[19:31:17] <pyzozord> merijn: not bad price. Yeah I guess you went luxury route
[19:31:33] <pyzozord> I got redmi 5a for $92
[19:31:38] <InPhase> jamea: I didn't have the 5a for long.  Maybe 6 months or so, but I had the Pixel 3 since it was first released, so I trust that line of phones pretty well now.
[19:31:41] <merijn> pyzozord: I had cheap phones where I had to uninstall apps to have the space to install updates
[19:31:42] <pyzozord> that was like 4 years ago
[19:31:58] <pyzozord> I'm planning to root mine
[19:32:08] <merijn> pyzozord: I had a number of requirements: 1) long support cycle for android updates (security), 2) a ton of space, 3) fingerprint reader
[19:32:28] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:33:30] <pyzozord> these phones, they literally have specs similar to my computer
[19:34:02] <InPhase> jsmooth: That sounds like the sort of bill that will never pass.
[19:34:27] <pyzozord> I think they mobile cpus are still much weaker computationally than laptops, and laptops than desktops
[19:34:33] <jsmooth> I can't be sure of the point of the bill
[19:35:00] *** Quits: chomwitt (~chomwitt@2a02:587:dc1b:d600:c3a8:b4dc:b642:1f2) (Ping timeout: 240 seconds)
[19:35:16] <coaxing> pyzozord: yeah, is weird to think most peoples instagram machine is more powerful than my dev setup 
[19:35:23] <coaxing> and they buy a new one every year.
[19:35:36] <kee> That's not most people.
[19:35:46] <kee> Most people don't buy high-end phones.
[19:36:14] <kee> It's closer to 5% of people.
[19:36:39] <pyzozord> as programmers we probably are more in the tech enthusiast circles
[19:36:45] <pyzozord> so there might be a bias
[19:36:54] <kee> Not all tech enthusiasts are rich.
[19:37:11] <coaxing> kee: really? i live in very poor area and i still dont know anyone who doesnt have a new iphone or something similar
[19:37:31] <pyzozord> standard corpo dweller's arsenal includes an iphone and fake glasses
[19:37:42] <kee> coaxing: I know a few people with a two / three-year-old iPhone.
[19:37:50] <kee> Which is still a fairly high-end piece of kit.
[19:37:59] <kee> But “buy a new one every year” is bizarre.
[19:38:27] <kee> And I'm in a fairly wealthy area.
[19:38:38] <jamea> InPhase google store y search: "pixel" and not result
[19:38:47] *** Parts: jsmooth (~quassel@user/jsmooth) ()
[19:38:50] <akselmo> Ewaste goes brrrrr
[19:38:54] <coaxing> kee: they don't buy it outright. they are paying 28 bucks a month and when it ends they get the new one.
[19:39:14] <coaxing> kee: or from what ive seen thats how the phone companies mainly sell phones nowadats
[19:39:26] <kee> $336 to rent an iPhone for a year.
[19:39:35] <kee> That's not a brilliant deal.
[19:39:47] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:40:01] <pyzozord> depends what you include in the calculation
[19:40:08] *** Quits: rcesptro (~rcesptro@180.246.14.92) (Read error: Connection reset by peer)
[19:40:21] <coaxing> i agree, it's retarded, and i dont know anyone irl who doesn't purchase their phones that way. 
[19:40:30] <kee> It's 30% of the price of a new iPhone, but you can't sell the phone on afterwards.
[19:40:39] <kee> So it's 30% of the price of a new iPhone, in the toilet.
[19:40:53] <kee> And you don't have the flexibility of not getting a new iPhone next year.
[19:40:54] <pyzozord> if it includes social status with peer pressure, it just might be a "lifesaving" option :P
[19:41:05] <kee> Get. Better. Friends.
[19:41:29] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[19:41:29] <pyzozord> it's easier to rent iphones and feel cool
[19:41:41] <coaxing> Friends are a coping mechanism
[19:41:47] <Bou> The nice thing about everyone buying new phones every year is that there's plenty of 1 year old phones around
[19:42:02] <Bou> I never buy phones I just wait til my friends do
[19:42:24] <pyzozord> coaxing: rather a survival mechanism, deeply rooted one too :P
[19:43:27] *** Joins: rcesptro (~rcesptro@180.246.14.92)
[19:44:55] <CalimeroTeknik> e-waste
[19:45:24] *** Quits: rcesptro (~rcesptro@180.246.14.92) (Read error: Connection reset by peer)
[19:45:36] <Bou> I hope the EU hurries with the right to repair thing, glueing phones shut so we can't replace the battery should be illegal
[19:45:44] *** Joins: password2 (~password8@user/password2)
[19:46:02] <InPhase> jamea: Well I gave you the direct link to the Pixel 5a.  If it doesn't show up for you, maybe they do not sell direct to your region.  I don't know what to advise you there in terms of how to get things in your area.
[19:46:40] *** Joins: babubhai (~babubhai3@14.139.122.120)
[19:47:12] <pyzozord> right to repair is an amazing movement, and much needed too
[19:47:20] <pyzozord> lest the corpos eat us alive
[19:47:34] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[19:48:01] *** Quits: Inst (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[19:48:31] <jamea> yes i know... but when click on it not say anything i think because i am on .mx
[19:48:33] *** Joins: rcesptro (~rcesptro@2001:448a:50e1:9076:7cdb:eecd:de3e:930a)
[19:48:55] *** Quits: Filohuhum (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[19:49:09] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[19:49:20] *** Joins: NeoFAT32 (~UserNick@user/NeoFAT32)
[19:49:30] *** Joins: sabry (~sabry@197.37.228.236)
[19:49:35] *** Joins: xkuru (~xkuru@user/xkuru)
[19:51:17] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[19:52:46] *** Quits: Citillara (~userid@user/citillara) (Remote host closed the connection)
[19:55:44] *** Quits: babubhai (~babubhai3@14.139.122.120) (Quit: Leaving)
[19:59:42] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[20:01:08] *** Quits: operateur (~My_user_n@91.143.220.230) (Ping timeout: 268 seconds)
[20:03:18] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[20:03:48] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 272 seconds)
[20:04:19] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:04:49] *** Quits: Paramecium (~P.bursari@103.100.175.170) (Ping timeout: 248 seconds)
[20:06:37] *** Quits: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Quit: xff0x_)
[20:08:32] *** Joins: xff0x_ (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[20:08:33] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 248 seconds)
[20:09:50] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:13:58] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[20:14:42] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[20:15:10] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[20:15:18] *** Quits: ivanf (~ivan@user/ivanf) (Quit: Textual IRC Client: www.textualapp.com)
[20:15:52] *** Quits: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:16:43] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[20:21:17] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[20:21:27] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[20:21:38] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:21:44] *** Joins: eddof13 (~textual@2806:102e:12:64:251a:7d9c:896a:90df)
[20:21:49] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Remote host closed the connection)
[20:22:12] *** Joins: operateur (~My_user_n@178-221-69-32.dynamic.isp.telekom.rs)
[20:22:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:23:26] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 272 seconds)
[20:24:53] *** Joins: Kechen (~Kechen@130.43.180.50)
[20:26:32] *** Joins: magla (~gelignite@d5365b83.access.ecotel.net)
[20:26:34] *** xff0x_ is now known as xff0x
[20:26:43] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 260 seconds)
[20:26:44] *** Joins: en7ropy (~en7ropy@185.187.243.161)
[20:26:49] *** Quits: operateur (~My_user_n@178-221-69-32.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[20:28:05] *** Quits: sabry (~sabry@197.37.228.236) (Quit: Client closed)
[20:30:26] *** Joins: operateur (~My_user_n@178-221-69-32.dynamic.isp.telekom.rs)
[20:31:35] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[20:32:20] *** Joins: newwebdev13 (~newwebdev@78.135.91.54)
[20:34:15] <pyzozord> what how can I program smooth transition from blue to red?
[20:34:28] <pyzozord> with yellow in the middle
[20:35:13] *** Quits: operateur (~My_user_n@178-221-69-32.dynamic.isp.telekom.rs) (Ping timeout: 248 seconds)
[20:35:20] <kee> Congratulations pyzozord! You have stumbled upon the confusing hell that is colour spaces!
[20:35:22] <pyzozord> I'm thinking maybe I can use YCbCr and just scale Cb and Cr linearly at the same time
[20:35:28] <ProfSimm> pyzozord: there are few formulas, some more accurate to physics and gamma. But if you want a nice yellow, look up HSV transform
[20:35:45] *** Quits: Psybur (~Psybur@75.145.205.201) (Ping timeout: 248 seconds)
[20:35:51] <pyzozord> but YCbCr seems kind of, mot perfect for this looking at https://en.wikipedia.org/wiki/File:YCbCr-CbCr_Scaled_Y50.png
[20:35:52] <bayaz> Title: File:YCbCr-CbCr Scaled Y50.png - Wikipedia 
[20:36:17] <ProfSimm> pyzozord: actually you may do an additive transition
[20:36:34] <pyzozord> ugh damn, looks like golang doesn't have hsv built in
[20:36:40] <ProfSimm> Eh it's easy
[20:37:31] <ProfSimm> Yellow is more green to red BTW but you can tweak it however you want
[20:38:31] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:a90a:7e3:97e4:e639)
[20:39:06] <pyzozord> so I could scale it red to blue
[20:39:18] <kee> pyzozord: Just draw a Bézier curve through the RGB colour space. It's close enough.
[20:39:19] <pyzozord> and mix ing green to the mid point
[20:39:44] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com)
[20:40:04] <ProfSimm> BTW is it just me or green and blue kinda look similar?
[20:40:08] <pyzozord> never made a bezier curve :P I know there is some super easy method with lerps for it
[20:40:26] <Decker> ProfSimm just you
[20:40:29] <ProfSimm> TIL I'm color blind
[20:40:38] <ProfSimm> Anyway I differentiate them fine
[20:40:44] <ProfSimm> But they KINDA look similar
[20:40:47] <ProfSimm> Green is brighter tho
[20:41:19] <kee> They're as different as green and red, to me.
[20:41:22] <ProfSimm> Decker: no one sees colors as another person. We can never know
[20:41:25] <kee> Well, sliightly less different.
[20:41:33] <ProfSimm> kee: haa!
[20:41:35] <ProfSimm> Yes!
[20:41:47] <ProfSimm> kee: this means I'm not co... no wait it means you're ALSO color blind
[20:41:56] <kee> No, they're only very very slightly less different.
[20:42:00] <ProfSimm> ;-)
[20:42:17] <ProfSimm> Well if I seen green sky and blue forest I'd definitely be wtf
[20:42:22] *** Joins: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net)
[20:42:23] <kee> They're still very different.
[20:42:23] <kee> Green and blue are about as different as green and orange.
[20:42:28] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-8d1d-0261-6422-184a.inf6.spectrum.com) (Ping timeout: 260 seconds)
[20:42:36] *** Quits: freeworld (~freeworld@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[20:42:39] <ProfSimm> kee: green and orange are opposite colors 
[20:42:42] <ProfSimm> :/
[20:42:52] <kee> Green and blue are approximately that different to me.
[20:43:28] *** Joins: Matt|home (~matt@adsl-74-233-58-147.mia.bellsouth.net)
[20:43:57] <ProfSimm> Imagine you wake up one day and there's a fourth primary color
[20:43:58] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[20:44:18] <kee> There is.
[20:44:27] <kee> There are tetrachromats. Compared to them, everyone is colour blind.
[20:45:03] <kee> They have an extra axis distinguishing between red-green and yellow.
[20:45:11] <kee> To us, red-green looks like the same colour as yellow.
[20:45:20] <ProfSimm> kee: that's neat
[20:45:22] <pyzozord> that's trouble, how do I H = H/60° in golang
[20:45:26] <kee> (Unless there are any tetrachromats in here?)
[20:45:44] <pyzozord> H = 60/360 * H ?
[20:45:45] <ProfSimm> kee: it means for those people pyzozord can't do a transition with yellow as displays have no yellow to them
[20:45:56] *** Joins: acoooo (~acoooo@adsl-165-132-187.teol.net)
[20:46:04] <kee> Well, I could've labelled them the other way around.
[20:46:14] <kee> yellow and pure-yellow or something.
[20:46:15] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[20:46:30] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[20:46:33] <ProfSimm> kee: mixing two spikes on the frequency chart is less deserving of a name than actual yellow
[20:46:40] <kee> And yet.
[20:46:56] <kee> The people who came up with the name "yellow" were describing the thing that happens when you mix the two spikes on the frequency chart.
[20:47:45] <ProfSimm> kee: the weirdest color is purple
[20:48:04] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[20:48:11] <ProfSimm> kee: and you can kinda see it, it feels weird. Inverted. Because it is
[20:48:11] <kee> The weirdest colour is gold.
[20:48:16] <kee> Gold is not a colour.
[20:48:24] <ProfSimm> Right
[20:48:26] <kee> It's just so blatantly not.
[20:48:27] <kee> Same with silver.
[20:48:35] <kee> They're just shiny-yellow and shiny-grey, but we see them as colours.
[20:48:39] <ProfSimm> Well materials have their kinda feel
[20:48:51] *** Quits: acoooo (~acoooo@adsl-165-132-187.teol.net) (Client Quit)
[20:48:57] <ProfSimm> kee: as colors, Gold is just an orangey shade of yellow
[20:49:04] *** Joins: acoooo (~acoooo@adsl-165-132-187.teol.net)
[20:49:06] <kee> It's not, though.
[20:49:18] <ProfSimm> kee: it was described as red in old books
[20:49:22] <kee> https://en.wikipedia.org/wiki/File:Gold_nugget_(Australia)_4_(16848647509).jpg
[20:49:23] <bayaz> Title: File:Gold nugget (Australia) 4 (16848647509).jpg - Wikipedia 
[20:49:25] <ProfSimm> Because ancient people are stupid
[20:49:26] <kee> Wait, really?
[20:49:33] <ProfSimm> kee: yes
[20:49:36] <kee> That doesn't look orangey to me.
[20:49:37] *** Quits: acoooo (~acoooo@adsl-165-132-187.teol.net) (Client Quit)
[20:49:45] <kee> It's only orangey when it reflects a brown thing.
[20:49:59] <ProfSimm> kee: brown is dark orange.
[20:50:09] <kee> But if it reflects a neutral grey, it looks yellow.
[20:50:09] <ProfSimm> kee: brown is even less a color :P
[20:50:10] <pyzozord> looks yellow to me, not gold
[20:50:14] <kee> If you stop it being shiny, it looks less yellow.
[20:50:22] <pyzozord> might be my screen though
[20:50:24] <kee> pyzozord: That's a lump of gold. Of course it's gold!
[20:50:35] <ProfSimm> Brown is in fact literally not a color
[20:50:46] <kee> "Brown" is a failing of English.
[20:50:51] *** Joins: independent56 (~independe@2.25.26.98)
[20:50:54] <kee> Other languages divide it up into more than one colour, which is more sensible.
[20:51:13] <ProfSimm> I know what god looks like, and that, sir and maams, is fake gold.
[20:51:28] <kee> You know what god looks like‽ Amazing.
[20:51:35] <ProfSimm> Oops
[20:51:41] <kee> This is far more important than our discussion about gold.
[20:51:48] <kee> Please, tell us more. :-)
[20:51:54] <ProfSimm> kee: god is amazing, but mostly brown
[20:51:54] *** Joins: kusanagi (~kusanagi@user/kusanagi)
[20:52:16] * kee takes notes
[20:52:18] <kee> Go on.
[20:52:25] <ProfSimm> kee: he's binary
[20:52:34] <pyzozord> yeah this hsl stuff is too hard for me
[20:52:39] <ProfSimm> And has no gender but that's my habit
[20:52:46] <ProfSimm> pyzozord: look up the formulas
[20:52:51] <kee> pyzozord: Wait until you see CIE L*a*b!
[20:53:26] *** Quits: kusanagi_ (~kusanagi@user/kusanagi) (Ping timeout: 246 seconds)
[20:53:37] <pyzozord> what's that color space used by big movies?
[20:54:14] <kee> A cinema.
[20:54:23] <pyzozord> https://www.youtube.com/watch?v=7z_EIjNG0pQ
[20:54:24] <bayaz> Title: High Dynamic Range Color Grading and Display in Frostbite 
[20:54:58] *** Joins: sabry (~sabry@197.37.228.236)
[20:55:48] <pyzozord> https://en.wikipedia.org/wiki/ICtCp I guess
[20:55:48] <bayaz> Title: ICtCp - Wikipedia 
[20:56:06] *** Quits: suss (~suss@user/suss) (Quit: Connection closed)
[20:56:52] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[20:56:59] *** Joins: flaqoniun (~F@32.211.211.39)
[20:58:27] <pyzozord> Ah I meant this https://en.wikipedia.org/wiki/Academy_Color_Encoding_System
[20:58:28] <bayaz> Title: Academy Color Encoding System - Wikipedia 
[20:59:04] <pyzozord> that would take at least few months of study to get a foothold in this world
[20:59:07] <pyzozord> of colors
[20:59:09] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[20:59:13] *** Quits: Kechen (~Kechen@130.43.180.50) (Ping timeout: 248 seconds)
[21:00:03] *** Joins: martinthewildpig (~martinthe@2a02:a03f:d8ee:9d00:d156:7928:3fcf:230d)
[21:00:36] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:00:48] *** Joins: crimes (~crimes@S0106848dc7ea6963.vc.shawcable.net)
[21:01:22] *** Joins: kariosfox (~kariosfox@87.116.234.22)
[21:02:08] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Ping timeout: 250 seconds)
[21:03:27] *** Quits: crimes (~crimes@S0106848dc7ea6963.vc.shawcable.net) (Client Quit)
[21:06:20] *** Joins: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[21:07:03] *** Quits: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 256 seconds)
[21:07:53] *** Joins: urnebes (~urnebes@2605:8d80:649:e4b4:4018:e61f:e2bd:f3e3)
[21:07:55] *** Joins: altoid (~altoid@157.45.9.224)
[21:09:55] *** Quits: altoid (~altoid@157.45.9.224) (Client Quit)
[21:10:01] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpzhrjfcgw2b8an.ipv6.telus.net)
[21:13:56] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[21:14:19] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Remote host closed the connection)
[21:14:39] <beaky> i love lisp
[21:15:05] <beaky> but i also love rust why must i pick and choosoe between 2 languages i like cant i just use 1 language that is the best for everything
[21:15:13] <flaqoniun> more than the IBM360 ?
[21:15:23] <beaky> yes maybe i should port lisp to ibm 360
[21:15:42] *** Quits: sabry (~sabry@197.37.228.236) (Quit: Client closed)
[21:16:24] <pyzozord> beaky: you don't have to pick either, you can have both. It's called haskell
[21:16:54] <flaqoniun> ports haskell to the z80 after you do lisp
[21:17:24] <GeDaMo> After SectorLisp, SectorHaskell! :P
[21:17:40] <pyzozord> well, except I'm not sure if haskell has that very cool lispy property of meta-language, whatever it's called in cs
[21:19:43] <GeDaMo> https://en.wikipedia.org/wiki/Homoiconicity
[21:19:44] <bayaz> Title: Homoiconicity - Wikipedia 
[21:20:07] <pyzozord> oh nice, thanks
[21:20:30] *** Quits: NTSYSTEM (~NTSYSTEM@gateway/vpn/pia/ntsystem) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:20:42] <GeDaMo> I couldn't remember the name either :P
[21:21:05] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 248 seconds)
[21:22:39] *** Quits: kee (~wizzwizz4@user/wizzwizz4) (Read error: Connection reset by peer)
[21:22:47] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:23:13] <flaqoniun> lol fedora devs complaining on twitter about nvidia drivers. like IBM doesn't have a giant legal department to sue those scallywags into submission?
[21:23:13] *** Joins: kee (~wizzwizz4@user/wizzwizz4)
[21:23:39] *** Joins: suss (~user@user/suss)
[21:24:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:24:49] <ProfSimm> flaqoniun: why do fedora complain
[21:25:16] <flaqoniun> https://twitter.com/mattdm/status/1510664957465178118
[21:25:19] <ProfSimm> Haskell is nice, no homo
[21:25:34] <flaqoniun> because their drivers are trash, why else
[21:27:02] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:27:18] *** Joins: wauterboi (~wauterboi@185.65.135.160)
[21:28:08] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:a90a:7e3:97e4:e639) (Read error: Connection reset by peer)
[21:28:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:29:12] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:e08e:f00b:6e6c:53d5)
[21:29:32] <pyzozord> here is my final color transition https://imgur.com/a/13kIYwo :P
[21:31:19] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[21:31:37] *** Joins: JanC (~janc@user/janc)
[21:31:37] *** Joins: nsk_nyc (~nsk_nyc@network45-238-142-host-234.inethn.net)
[21:31:42] <ProfSimm> pyzozord: that's a transition of blue to red through yellow?
[21:33:43] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[21:35:23] <pyzozord> ProfSimm: yes, if you squint your eyes hard enough :P
[21:35:49] *** Joins: Alex123 (~Adium@lib-07-subnet-138.rdns.cenic.net)
[21:36:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[21:38:16] *** Quits: urnebes (~urnebes@2605:8d80:649:e4b4:4018:e61f:e2bd:f3e3) (Read error: Connection reset by peer)
[21:38:19] *** Quits: rsx (~dummy@ppp-188-174-150-203.dynamic.mnet-online.de) (Quit: rsx)
[21:38:22] *** Joins: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[21:38:31] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:42:21] *** Joins: nvmd (~weechat@user/nvmd)
[21:42:44] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:46:40] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:3600:aabd:edaf:cb83:4282)
[21:48:33] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:d52e:866a:6f3a:60a1)
[21:49:15] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[21:50:07] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[21:50:51] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[21:51:18] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[21:56:33] *** Quits: LuKaRo (~LuKaRo@p4fc32a2c.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[22:05:11] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:06:00] <Jong> What was that famous guy in the netherlands that Google hired to code the Chromium kernel?
[22:06:08] <Jong> What was his name?
[22:07:03] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[22:07:16] *** Joins: flaqoniun (~F@32.211.211.39)
[22:07:47] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[22:07:56] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[22:11:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:11:27] *** Joins: LuKaRo (~LuKaRo@p200300dfa72b1d372a0e3d5e954163f2.dip0.t-ipconnect.de)
[22:12:06] *** Quits: NeoFAT32 (~UserNick@user/NeoFAT32) (Remote host closed the connection)
[22:12:36] *** Joins: NeoFAT32 (~UserNick@118.179.224.74)
[22:13:24] *** Joins: bomb (~bomb@user/bomb)
[22:13:53] *** Quits: NeoFAT32 (~UserNick@118.179.224.74) (Remote host closed the connection)
[22:14:03] *** Quits: stagas (~stagas@2a02:587:c4b4:ded5:fbc0:150e:4fd8:be99) (Ping timeout: 260 seconds)
[22:17:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:18:13] *** Quits: Psybur (~Psybur@2600:1003:b1a3:2343:e08e:f00b:6e6c:53d5) (Ping timeout: 250 seconds)
[22:20:39] *** Joins: Psybur (~Psybur@75.145.205.201)
[22:22:13] *** Quits: duuude (~user@user/duuude) (Ping timeout: 260 seconds)
[22:22:34] <pyzozord> what's wrong with this svg? http://bpa.st/6KFA
[22:22:36] <bayaz> Title: View paste 6KFA 
[22:23:01] <GeDaMo> Single point?
[22:23:35] *** Joins: duuude (~user@user/duuude)
[22:24:01] <pyzozord> you mean single quote? I think that shouldn't be a problem. That's how GOPL book does it
[22:24:48] <kee> Single quote isn't valid XML.
[22:25:04] <kee> Your book is wrong.
[22:25:12] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[22:25:15] *** Quits: Psybur (~Psybur@75.145.205.201) (Ping timeout: 256 seconds)
[22:25:23] <pyzozord> lol
[22:25:31] <pyzozord> https://validator.w3.org/check passes
[22:25:33] <bayaz> Title: Validation Results - W3C Markup Validator 
[22:25:51] <pyzozord> who's wrong now :P
[22:25:52] <kee> It's valid HTML.
[22:25:56] <GeDaMo> I mean all the coordinates are the same? Or am I reading it wrong?
[22:26:10] <kee> Doesn't make it valid XML. SVG is an XML format.
[22:26:12] <pyzozord> "This document was successfully checked as XML!"
[22:26:16] <kee> Huh.
[22:26:43] <kee> No way. It is valid‽
[22:26:45] <pyzozord> GeDaMo: ooh damn, you are right
[22:26:50] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[22:27:00] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[22:27:22] *** Joins: Pixi (~Pixi@user/pixi)
[22:27:25] <pyzozord> kee: there is some lesson here hidden for you :P
[22:27:51] <kee> pyzozord's books are right. I should listen to pyzozord's books.
[22:28:30] <pyzozord> kee: nah, just... you know, maybe check first or something
[22:28:52] <pyzozord> hubris kills people
[22:29:05] *** Quits: bwieder53 (~bwieder@216.106.142.65) (Read error: Connection reset by peer)
[22:29:08] <pyzozord> if it doesn't it's not good anyway :P
[22:29:24] <Sqaure> when you do ssh tunnelling with "ssh -L localport:dest:remoteport user@gateway" i use 2 shells. One for creating the tunnel and one for using the tunnel. Can i instead do it in one line? 
[22:29:44] *** Joins: beachpeach (~beachpeac@89-212-17-146.static.t-2.net)
[22:30:58] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:31:10] *** Joins: bwieder53 (~bwieder@216.106.142.65)
[22:34:01] *** Joins: Tangent-Man (~Tang3nt-M@mutantalien.plus.com)
[22:34:03] <oldlaptop> pyzozord: I prefer to learn "XML is evil evil evil evil evil evil".
[22:35:23] <kee> Apparently I've been working with a buggy XML parser. The more you know.
[22:35:25] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:35:26] <oldlaptop> also, what on earth even generates a polygon like that?
[22:35:48] *** Quits: Tangent-Man (~Tang3nt-M@mutantalien.plus.com) (Remote host closed the connection)
[22:36:13] *** Joins: Tangent-Man (~Tang3nt-M@mutantalien.plus.com)
[22:36:15] <oldlaptop> Maybe there's some rule that XML parsers get to treat ''-attributes as invalid if the moon's in the right phase
[22:38:20] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[22:38:47] <pyzozord> I think the problem is that the coords are all the same, I broke something
[22:39:43] <oldlaptop> It's certainly not a very sensible polygon
[22:39:43] <GeDaMo> How did you generate this file?
[22:40:08] <oldlaptop> It's not all that sensible to have a zillion of the same polygon on top of each other either
[22:40:28] *** Joins: Psybur (~Psybur@75.145.205.201)
[22:41:00] <beachpeach> If you developed a portable application that runs on Linux and is contained within a single binary executable, is it wrong if you also keep config alongside in a .conf file for portability sake?
[22:41:26] <beachpeach> I'm getting rather negative responses from #linux about it
[22:42:02] *** Quits: password2 (~password8@user/password2) (Ping timeout: 260 seconds)
[22:43:15] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 260 seconds)
[22:43:17] <oldlaptop> Why would you do $PWD/beachpeachapp.conf instead of $HOME/.beachpeachapp.conf?
[22:43:37] <pyzozord> I had this example from the book http://bpa.st/ZYQQ, and an exercise to make it into a web server http://bpa.st/KP4A
[22:43:39] <bayaz> Title: View paste KP4A 
[22:43:55] <beachpeach> I'm imagining a use case where I keep the application on a thumb drive and use it across many machines with the same config file
[22:45:23] <oldlaptop> That could make sense. Is it more sensible to make that non-default behavior, somehow? (For example, perhaps it looks for ~/.beachpeachapp.conf first, then $PWD/.beachpeachapp second)
[22:45:28] *** Joins: scottg489 (~scottg489@ec2-35-166-103-119.us-west-2.compute.amazonaws.com)
[22:45:37] <pyzozord> beachpeach: lots of programs have multiple places where they check for config files, checking for a config file in pwd is quite common
[22:45:39] <oldlaptop> Or perhaps the other way around, if applicable.
[22:46:17] <beachpeach> I want the config to transfer across different computers, so it only has to be configured once and it should (in theory) work elsewhere
[22:47:54] <independent56> Is multithreading an illusion? May it use the same CPU for the same things, just like seperate programs?
[22:49:16] <sonny> no it's not an illusion
[22:50:13] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[22:50:51] <pyzozord> independent56: concurrent vs parallel
[22:51:32] <independent56> Ah, thanks.
[22:51:35] <GeDaMo> Often threads can be waiting for things like I/O
[22:51:39] <independent56> I knew there were two approaches.
[22:52:13] *** Quits: vitali64 (~vitali64@user/vitali64) (Ping timeout: 240 seconds)
[22:52:30] <independent56> If you had a CPU with one core, would multithreading work?
[22:52:39] <beachpeach> yes it would
[22:52:45] <beachpeach> Via time slicing
[22:52:46] <oldlaptop> beachpeach: The reason (I'll assume?) ##linux is hot and bothered is that it's sort of against the least-surprise principle for a program not to honor the ~/.foo convention (or one of its more "modern" siblings, $XDG_CONFIG_HOME or something)
[22:53:05] <independent56> That's what i meant by an illusion. It takes the threads and exectues them at different time
[22:53:28] *** Joins: hololeap_ (~hololeap@user/hololeap)
[22:53:30] <pyzozord> yes, that's concurrency
[22:53:48] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:53:49] <oldlaptop> If you just look under $PWD first, though, it'll behave both as you want (if you've created your "portable" configuration file) and as someone else might expect (creating and using a dotfile)
[22:54:00] <pyzozord> single core still can have multiple hardware threads though, or hyperthreading (which are less harware but also not fully software)
[22:54:09] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[22:54:15] *** Joins: vitali64 (~vitali64@user/vitali64)
[22:54:37] <pyzozord> concurrency is juggling, multiple balls, parallelism is having multiple hands
[22:54:42] *** Quits: DasBrain (~DasBrain@user/dasbrain) (Killed (NickServ (GHOST command used by DasBrain_)))
[22:54:44] <beachpeach> oldlaptop: They seem to give me ideological rather than rational answers. My app already contains default config, but the question is where it stores it upon first run. It could output to ~/.myappconf but then it wouldn't be portable. Or it could output to pwd, provided it has access
[22:54:48] *** Joins: DasBrain_ (~DasBrain@user/dasbrain)
[22:55:11] <oldlaptop> I am somewhat curious as to the circumstances in which a static linux binary on a USB drive like that is useful, though. (As opposed to a windows executable.)
[22:55:20] <beachpeach> oldlaptop: Mostly the problem is I'm porting this app from Windows and it's common practice (or at least, it used to be) to store everything in one program folder. Then you can simply transfer this folder without install to any computer and it will work out of the box
[22:55:25] <oldlaptop> It's less surprising for it to output the default configuration as a dotfile.
[22:55:44] <kee> beachpeach: It should look in the current working directory, but it should otherwise store it in a file in ~/.config or something.
[22:55:50] <oldlaptop> It's increasingly actually common practice in Windows-land to use %APPDATA% or %APPDATA_LOCAL% or whatever they call it.
[22:55:53] <kee> That way, you can configure it for portable use.
[22:56:02] <kee> oldlaptop: %APPDATA% is correct.
[22:56:20] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 260 seconds)
[22:56:28] <beachpeach> It's less useful in my case. It's an application that setups a custom environment on a target machine. So you configure it on a single machine, then you can apply that config to many other machines, while also being able to hand-tune specifics for that target machine
[22:56:49] *** Quits: fe23 (~fe23@2409:8a34:465:ec80:5822:254e:7c4b:3f7) (Quit: fe23)
[22:57:14] <beachpeach> Anyway, I'll work through it. TY all for answers
[22:57:58] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Quit: Leaving)
[22:58:05] <independent56> Is functional programming just making a lot of functions and using no classes?
[22:58:11] <independent56> I am so confused
[22:58:31] <GeDaMo> Classes are not essential to programming :P
[22:58:37] <pyzozord> independent56: essentially yes, watch this https://www.youtube.com/watch?v=3VQ382QG-y4
[22:58:38] <beachpeach> independent56: Functional programming is mainly about passing functions to other functions
[22:58:38] <bayaz> Title: Lambda Calculus - Fundamentals of Lambda Calculus & Functional Programming in JavaScript 
[22:58:56] <independent56> Running functions from functions?
[22:59:16] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:59:17] <independent56> I'll watch the lecture when i have time, likely in an hour or so.
[22:59:19] <pyzozord> the most important is that you can pass functions as arguments to other functions
[22:59:46] <pyzozord> and can access arguments from parent functions
[23:00:48] <independent56> Is that the same as doing functiona(functionb(argument)) ?
[23:00:48] <pyzozord> actually i haven't considered lambda calculus in terms of binding, is it static binding, is it early/late static binding... Need to think about that
[23:01:24] *** Joins: Akuli (~Akuli@87-94-108-212.bb.dnainternet.fi)
[23:02:30] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[23:02:39] *** Quits: seifeslimene_ (~seifeslim@197.2.10.72) (Quit: Konversation terminated!)
[23:02:47] *** Joins: Auron (Auron956@user/auron)
[23:02:52] *** Joins: seifeslimene_ (~seifeslim@197.2.10.72)
[23:02:56] *** Quits: beachpeach (~beachpeac@89-212-17-146.static.t-2.net) (Quit: Client closed)
[23:03:10] <pyzozord> grr what's wrong with my code
[23:03:14] *** Joins: Blackajack (~Blackajac@user/Blackajack)
[23:03:53] <independent56> You haven't commented out the entire file yet :p
[23:05:16] <edgar-rft> it was written by *you*
[23:05:48] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[23:06:42] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:06:55] <sonny> independent56 functional programming is just using functions (as defined in math)
[23:07:01] <vdamewood> Hi, people etc.
[23:07:12] <vdamewood> My meterstick rules!
[23:07:59] * oldlaptop glares at vdamewood
[23:08:01] <independent56> so you define functions as name(arguments) = aguments+operators :p
[23:08:02] <sonny> it's like procedural programming but they try to avoid side effects and have stuff like referential transparency
[23:08:10] <pyzozord> ah, i got a zero
[23:08:18] * vdamewood smiles at oldlaptop.
[23:08:34] <pyzozord> multiplying by zero does tend to give not a lot of result
[23:08:41] <sonny> so imagine procedural but everything is immutable basically
[23:08:51] <independent56> Intresting
[23:09:49] <sonny> in procedural, you can store a procedure in a memory location, in functional you can deal with them at a more abstract level
[23:10:04] *** Joins: Thedarkb-Desktop (~Thedarkb@78.141.240.26)
[23:10:14] <sonny> just like how math functions can take functions as arguments etc
[23:10:23] <oldlaptop> independent56: "Functional programming" is fairly ill-defined. Important concepts include the idea of functions as first-class citizens (meaning you can pass them as arguments to other functions, perhaps store them in variables and such things), and the idea of a "function" as not an imperative procedure (like a "function" in C or Javascript or Python usually is), but a "black box" that just produces a value when you plug one (or more) values into
[23:10:23] <oldlaptop>  it.
[23:10:32] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[23:10:34] <pyzozord> ah, yes. Setting paramters AFTER the computation was already done, migh yield a zero
[23:10:51] <oldlaptop> Functions are more like functions in high-school algebra class than what languages like C or Python call "functions".
[23:12:23] *** Quits: Thedarkb1-Deskto (~Thedarkb@92.40.196.0.threembb.co.uk) (Ping timeout: 246 seconds)
[23:13:19] <oldlaptop> In particular, that kind of "pure" function, that just gives you a value back, isn't supposed to have "side effects", it shouldn't change anything about anything - just return a value.
[23:13:26] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 250 seconds)
[23:14:47] *** Quits: martinthewildpig (~martinthe@2a02:a03f:d8ee:9d00:d156:7928:3fcf:230d) (Quit: Client closed)
[23:14:56] <oldlaptop> But people will say a construct is "functional" even if there aren't any pure functions like that involved. Java's "lambda" syntactic sugar, for example, is said to be a "functional" feature because it lets you (appear to) pass code as an argument to a function.
[23:15:53] <sonny> Java lambda is for inner classes
[23:17:03] *** Joins: eXistenZ (~biskit@bzq-109-64-230-51.red.bezeqint.net)
[23:17:13] <oldlaptop> It's syntactic sugar for anonymous inner classes, yes. Kind of sad, really. (Or hilarious, depending on your point of view.)
[23:18:27] <sonny> yeah it's misleading
[23:18:43] <sonny> but that's typical of Java (Oracle) I guess
[23:19:01] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d)
[23:21:05] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 248 seconds)
[23:21:09] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[23:22:23] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[23:22:54] <ProfSimm> sonny: oldlaptop: lamdbas are not anon classes, they're methods
[23:23:01] <ProfSimm> But this is irrelevant
[23:23:21] <ProfSimm> objects are functions, functions are methods, it's all the same with 2-3 sets of syntaxes
[23:23:45] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:84f3:9cd1:2f26:201d) (Ping timeout: 248 seconds)
[23:33:05] *** Joins: berkhan (~berkhan@159.146.43.242)
[23:33:19] <pyzozord> cansomeone explain how lines 52 and 53 work? http://bpa.st/WFMQ
[23:33:21] <bayaz> Title: View paste WFMQ 
[23:34:02] *** Joins: beachpeach (~beachpeac@89-212-17-146.static.t-2.net)
[23:34:21] <beaky> nice is that go
[23:34:30] <pyzozord> why x-y or x+y, why cos30 or sin30
[23:34:41] <pyzozord> beaky: yeah that's go
[23:35:11] <pyzozord> I understand width/2 and hieght/2 that's just offset by half of width or height to center
[23:35:19] <flaqoniun> isometric, i'd think it would be 45 degrees?
[23:35:24] <pyzozord> I understand *xyscale, that's just a scaling factor
[23:35:50] <GeDaMo> https://en.wikipedia.org/wiki/Isometric_projection
[23:35:50] <bayaz> Title: Isometric projection - Wikipedia 
[23:36:24] <pyzozord> right, specifically I don't understand this https://en.wikipedia.org/wiki/Isometric_projection#Mathematics
[23:36:24] <bayaz> Title: Isometric projection - Wikipedia 
[23:36:26] *** Joins: suss` (~user@user/suss)
[23:36:40] <GeDaMo> I was god at technical drawing at school but I've forgotten all of it :/
[23:37:05] <pyzozord> hmm I guess I don't understand rotation matrices? I used them once last year for AoC
[23:37:35] *** Quits: suss (~user@user/suss) (Ping timeout: 246 seconds)
[23:37:35] *** Quits: morte_ (~user@181.114.17.106) (Ping timeout: 268 seconds)
[23:37:51] <GeDaMo> Er, I was good :P
[23:38:12] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[23:38:12] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[23:38:12] *** Joins: tane (~tane@user/tane)
[23:38:52] * pyzozord pictures gedamo with an geometrical aureola
[23:39:51] <pyzozord> ugh I guess this is too advanced for me, I need to really learn linear algebra to get this
[23:39:55] <beachpeach> What is the best way to provide help/documentation files for a cross-platform application? HTML? PDF? Plaintext?
[23:39:58] <pyzozord> but I feel like this is the key to 3d graphics
[23:40:02] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Remote host closed the connection)
[23:40:11] *** Quits: trace987 (~trace@user/trace) (Remote host closed the connection)
[23:40:25] <vdamewood> beachpeach: how will your audience read the documentation?
[23:40:25] <ProfSimm> beachpeach: depends.
[23:40:35] *** Joins: trace987 (~trace@user/trace)
[23:40:47] <pyzozord> because the perspective projection is just x and y by z. further things are the closer they are togeher
[23:40:52] <beachpeach> Clicking "Help" in the menu, presumably vdamewood
[23:40:57] <ProfSimm> beaky: PDF is annoying for screens. So prefer something that can produce html/pdf/text for you
[23:41:10] <vdamewood> beachpeach: HTML
[23:41:14] <beachpeach> Thanks
[23:42:17] <beachpeach> I thought there might be something more standardized but most applications use either plaintext or HTML
[23:43:01] <flaqoniun> oh its not 45 degrees to give a height perspective?
[23:44:31] *** Joins: jjt (jjt@user/jjt)
[23:45:44] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:46:13] *** Quits: jjt (jjt@user/jjt) (Remote host closed the connection)
[23:46:50] *** Quits: geeknix (~pi@2001:e68:5432:af1f:781b:3d59:e4b7:2808) (Ping timeout: 268 seconds)
[23:48:43] <beachpeach> cmake --install can automatically be configured to deploy documentation and other relevant files, right? The docs are super confusing, especially to a Windows user
[23:49:54] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 272 seconds)
[23:50:03] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[23:50:13] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[23:51:16] *** Quits: Likorn (~Likorn@c114-150.icpnet.pl) (Quit: WeeChat 3.4.1)
[23:51:59] <bomb> beachpeach both PDF and HTML if possible
[23:52:23] *** Joins: resamvi (~resamvi@smtp.jacob-computer.de)
[23:52:23] *** Quits: resamvi (~resamvi@smtp.jacob-computer.de) (Changing host)
[23:52:23] *** Joins: resamvi (~resamvi@user/resamvi)
[23:52:49] <bomb> beachpeach https://www.sphinx-doc.org/en/master/
[23:52:49] <bayaz> Title: Overview ? Sphinx documentation 
[23:54:38] <beachpeach> bomb: That looks good, thank you!
[23:55:13] <beachpeach> I was just looking for some kind of framework for docs
[23:55:22] <beachpeach> But not autogenerated ones
[23:55:26] *** Joins: operateur (~My_user_n@178-221-69-32.dynamic.isp.telekom.rs)
[23:57:07] <bomb> beachpeach many people read the docs in Markdown in a text editor, so they can convert it to HTML/PDF and host anywhere
[23:57:19] *** Quits: Psybur (~Psybur@75.145.205.201) (Ping timeout: 268 seconds)
[23:58:56] *** Quits: Visne (~Visne@dhcp-077-248-174-092.chello.nl) (Ping timeout: 246 seconds)
[23:58:57] *** Joins: Psybur (~Psybur@2600:1003:b1a3:2343:f1fc:41cc:1190:cfb8)
[23:58:59] *** Joins: independent_ (~independe@2.25.26.98)
[23:59:09] <flaqoniun> ohhh   so all faces of the cube are equal
[23:59:29] *** Joins: Visne (~Visne@dhcp-077-248-174-092.chello.nl)
