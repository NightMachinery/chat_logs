[00:00:03] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[00:00:25] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[00:02:26] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Remote host closed the connection)
[00:05:00] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:05:18] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:06:59] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:07:18] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:07:50] <remexre> if I'm getting a segfault in FFI code in a largish haskell program, is there a good way to get a haskell stack trace from it?
[00:09:31] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:09:49] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:10:06] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:10:48] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:13:30] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:13:48] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:15:29] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:15:47] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:17:35] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:17:53] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:18:17] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:19:00] *** Quits: vicfred_ (~vicfred@user/vicfred) (Quit: Leaving)
[00:19:35] *** Joins: vicfred (~vicfred@user/vicfred)
[00:22:30] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[00:22:39] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:24:07] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[00:24:33] *** Joins: pavonia (~user@user/siracusa)
[00:27:49] <geekosaur> not really
[00:28:23] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[00:28:34] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[00:30:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:30:52] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[00:31:15] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[00:33:07] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:35:18] *** Joins: acidjnk (~acidjnk@p200300d0c7049f37592e4ec9ecef3fab.dip0.t-ipconnect.de)
[00:35:57] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[00:37:52] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:38:11] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:39:52] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:39:58] *** Quits: anon04088520 (~anon04088@host-92-19-97-204.as13285.net) (Remote host closed the connection)
[00:40:10] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:40:37] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:a396:9946:d0cf:5cc0)
[00:40:43] *** Quits: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru) (Read error: Connection reset by peer)
[00:40:50] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:40:50] *** Joins: elkcl (~elkcl@broadband-37-110-156-162.ip.moscow.rt.ru)
[00:42:25] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[00:43:01] *** Quits: srk (~sorki@user/srk) (Ping timeout: 250 seconds)
[00:43:12] *** Joins: nattiestnate (~nate@202.138.250.10)
[00:46:22] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:46:40] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:48:21] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[00:48:39] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[00:50:00] *** Joins: son0p (~ff@181.136.122.143)
[00:58:47] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:59:24] *** Quits: InstX1 (~Liam@2601:6c4:4080:3f80:109e:5fbc:2ca5:978d) (Ping timeout: 240 seconds)
[01:00:18] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[01:00:23] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[01:01:42] *** Joins: emf (~emf@8.46.76.75)
[01:01:56] *** Quits: emf (~emf@8.46.76.75) (Remote host closed the connection)
[01:03:56] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[01:04:14] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[01:04:32] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:04:52] *** Joins: emf (~emf@8.46.76.75)
[01:05:23] *** Joins: coot (~coot@213.134.190.95)
[01:05:30] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:05:32] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:07:54] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[01:08:12] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[01:09:53] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[01:10:11] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[01:11:52] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[01:12:10] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:13:22] *** Quits: nattiestnate (~nate@202.138.250.10) (Quit: WeeChat 3.4)
[01:14:40] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:16:21] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[01:16:39] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[01:16:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[01:16:59] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[01:17:16] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[01:17:46] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[01:17:51] *** Quits: liz_ (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Remote host closed the connection)
[01:18:38] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[01:19:01] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:19:13] <int-e> maerwald[m]: Hmm Endo and "wasted intellectual energy" -- how else do you get foldr from fold (or foldMap)? You /need/ an auxiliary monoid, and that monoid happens to be function composition, which is Endo. Unless your plan is to get rid of the Foldable abstraction and go back to lists? I could get behind that... especially for teaching.
[01:20:46] <maerwald> I didn't argue against Endo as an implementation detail
[01:21:04] *** Quits: emf (~emf@8.46.76.75) (Quit: emf)
[01:21:04] <maerwald> just that using it in your own code can look confusing, depending on how you use it
[01:21:23] <int-e> maerwald[m]: Or maybe you want a DList based toList / foldr on list, hmm. But on the library level you'll end up implementing a `build` variant of `toList`, and why not inline that, and after a few steps you'll end up with what's there.
[01:21:39] *** Joins: emf (~emf@8.46.76.75)
[01:21:46] <maerwald> I mean, it's really not that complicated
[01:21:52] <maerwald> just allows some funny obfuscation
[01:22:34] <int-e> It's definitely not something I understood at a glance the first time I saw it, so yes, it costs intellectual energy. I'm just not convinced it's wasted :)
[01:22:40] <maerwald> and the docs could give a more interesting example
[01:23:16] <int-e> (I already knew about Endo and foldMap, so the #. caused me far more trouble.)
[01:23:52] <int-e> @src foldr
[01:23:52] <lambdabot> foldr f z []     = z
[01:23:52] <lambdabot> foldr f z (x:xs) = f x (foldr f z xs)
[01:24:19] <int-e> And I knew that it was supposed to do this on lists...
[01:24:47] <int-e> But I definitely treat it as an implementation detail.
[01:27:10] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[01:27:28] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[01:28:11] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[01:28:54] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[01:30:38] <int-e> I guess I'd only call it obfuscation if it wasn't dictated by necessity (need a monoid (hence the use of Endo), and it's performance critical (justifying the use of #.))
[01:33:59] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Ping timeout: 256 seconds)
[01:35:12] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[01:35:16] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Client Quit)
[01:36:50] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:60e1:b35d:75ca:9100)
[01:37:29] *** Quits: michalz (~michalz@185.246.204.65) (Remote host closed the connection)
[01:38:27] *** Joins: emf_ (~emf@2620:10d:c090:400::5:9013)
[01:38:36] *** Quits: emf (~emf@8.46.76.75) (Ping timeout: 240 seconds)
[01:40:48] *** Joins: srk (~sorki@user/srk)
[01:41:30] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[01:41:42] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[01:42:15] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-e891-6e71-97ff-c3d7.res6.spectrum.com)
[01:45:40] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:46:12] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[01:47:49] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (Remote host closed the connection)
[01:47:55] *** Quits: srk (~sorki@user/srk) (Ping timeout: 256 seconds)
[01:48:04] *** Joins: InstX1 (~Liam@c-98-208-218-119.hsd1.fl.comcast.net)
[01:48:11] <dsamperi> Plutus Playground was not available recently (bad certificate) and now it is up, but the Hello World example leads to "Validation failed." Most of the tutorial videos are months or years old,yet Playground was introduced in January 2022 I think. Current Status?
[01:51:07] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[01:51:50] <dsamperi> My bad, I was not logged in. The Plutus Playground Hello World example seems to work.
[01:53:39] *** Joins: InstX1_ (~Liam@2601:6c4:4080:3f80:d810:4ede:3443:87a)
[01:56:33] *** Joins: emf (~emf@8.46.76.75)
[01:56:50] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 272 seconds)
[01:57:05] *** Quits: emf_ (~emf@2620:10d:c090:400::5:9013) (Read error: Connection reset by peer)
[01:57:32] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[01:58:06] *** Quits: InstX1 (~Liam@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[01:59:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Remote host closed the connection)
[02:00:05] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[02:01:03] *** Quits: emf (~emf@8.46.76.75) (Remote host closed the connection)
[02:01:16] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[02:01:17] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:01:49] *** Joins: emf (~emf@8.46.76.75)
[02:02:48] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:08:23] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:60e1:b35d:75ca:9100) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:08:50] *** Quits: MironZ (~MironZ@nat-infra.ehlab.uk) (Remote host closed the connection)
[02:09:04] *** Joins: MironZ (~MironZ@nat-infra.ehlab.uk)
[02:14:17] *** Quits: InstX1_ (~Liam@2601:6c4:4080:3f80:d810:4ede:3443:87a) (Ping timeout: 240 seconds)
[02:16:13] *** Joins: anon04088520 (~anon04088@host-92-19-97-204.as13285.net)
[02:18:56] <anon04088520> any idea how to make it print on a new line? https://paste.tomsmeding.com/gGqLXof2 and also how I can add spaces between the characters during input
[02:19:52] <romesrf> anon04088520: we were talking b4, you should check again how it was said in class to do the getGuess n attempts
[02:22:36] *** Quits: emf (~emf@8.46.76.75) (Quit: emf)
[02:23:00] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-e891-6e71-97ff-c3d7.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:24:55] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[02:25:08] <geekosaur> https://paste.tomsmeding.com/0dbUOwGG is a way to do it but possibly not what you should be using
[02:25:12] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[02:25:47] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 252 seconds)
[02:26:12] <anon04088520> I'm reviewing a lecture on it 
[02:28:04] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[02:28:41] <geekosaur> oh, I forgot to change getChar back to getChar'
[02:29:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:31:08] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[02:33:34] <anon04088520> ok
[02:34:17] *** Joins: InstX1_ (~Liam@2601:6c4:4080:3f80:b5e9:14a0:500e:3e39)
[02:36:01] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[02:37:04] *** Quits: Topsi (~Tobias@dyndsl-095-033-017-136.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[02:37:59] *** Joins: mreh (~mreh@2a00:23c7:2803:ef00:d01b:c280:b64b:b893)
[02:39:19] *** mreh is now known as mreh_
[02:40:14] <mreh_> What is there difference between the types in this error message?
[02:40:14] <mreh_> Couldn't match type ‘[S.PhotoT (QExpr Postgres s0)]’
[02:40:15] <mreh_>                      with ‘forall s'. [S.PhotoT (QExpr Postgres s')]’
[02:40:57] <hpc> rank
[02:40:59] <mreh_> Is the s not the same in all the elements in the list?
[02:41:44] <hpc> s0 is part of a larger scope than s'
[02:42:10] <hpc> s' is introduced right at the list, and s0 is introduced somewhere further out that's not communicated in that error
[02:45:18] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:45:59] <mreh_> I can't work out where s' is introduced, all the functions I'm using to construct values of S.PhotoT... all have forall s. in their type.
[02:46:26] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[02:48:20] <hpc> s' is introduced by that forall right there in the error
[02:48:30] <hpc> :P
[02:50:33] *** Joins: daemonises (uid545329@id-545329.uxbridge.irccloud.com)
[02:53:39] *** Quits: acidjnk (~acidjnk@p200300d0c7049f37592e4ec9ecef3fab.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:01:15] *** Quits: mreh_ (~mreh@2a00:23c7:2803:ef00:d01b:c280:b64b:b893) (Ping timeout: 256 seconds)
[03:02:32] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 240 seconds)
[03:06:57] *** Joins: stefan-_ (~cri@42dots.de)
[03:09:01] *** Quits: anon04088520 (~anon04088@host-92-19-97-204.as13285.net) (Remote host closed the connection)
[03:09:18] *** Joins: anon04088520 (~anon04088@host-92-19-97-204.as13285.net)
[03:10:58] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[03:13:43] *** Quits: anon04088520 (~anon04088@host-92-19-97-204.as13285.net) (Ping timeout: 256 seconds)
[03:14:51] *** Quits: fluxit (~fluxit@techsmix.net) (Quit: Bye!)
[03:15:37] *** Joins: anon04088520 (~anon04088@host-92-19-97-204.as13285.net)
[03:19:35] *** Parts: texasmynsted (~texasmyns@99.96.221.112) (WeeChat 3.4)
[03:19:57] *** Quits: anon04088520 (~anon04088@host-92-19-97-204.as13285.net) (Ping timeout: 256 seconds)
[03:20:51] *** Joins: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net)
[03:22:09] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:23:47] <worldhelloworld> Really struggling to conceptualize folds when traversing a list - could barely define a takeWhile in terms of foldr, but can't for the life of me, conceptualize a dropWhile in terms of fold :(
[03:25:25] <dminuoso> Can you share your version of takeWhile perhaps?
[03:25:32] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[03:25:32] <worldhelloworld> Sure
[03:25:50] <worldhelloworld> `takeWhile'' f = foldr (\x acc -> if f x then x:acc else []) []`
[03:27:26] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:a396:9946:d0cf:5cc0) (Remote host closed the connection)
[03:31:31] <worldhelloworld> scanr helped a bit with coming up with the definition, but for dropWhile finding it difficult .... been 3 days now lol
[03:32:20] *** Joins: liz_ (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
[03:34:59] <Axman6> worldhelloworld: so, acc can be a function, it doesn't have to be another list, so you can pass arguments to it. if you could pass in whether you've finished dropping and then not drop any more that might work
[03:35:27] <Axman6> (this isn't a function I've written myself, at least not for a very long time so not too sure about that)
[03:37:04] <worldhelloworld> @Axman6 `acc` is the accumulator - the one which holds the result after successive operations in fold ..... it's already inside the anonymous function .... not sure what you mean
[03:37:04] <lambdabot> Unknown command, try @list
[03:37:30] *** Joins: worldhelloworld1 (uid543174@id-543174.helmsley.irccloud.com)
[03:37:42] <geekosaur> try not thinking of it as an accumulator but as a state which sometimes gets used as an accumulator
[03:38:46] <Axman6> yes, acc can have any type you want
[03:38:55] <liz_> :t foldr
[03:38:56] <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
[03:39:10] <Axman6> % :t foldr @[]
[03:39:11] <yahb> Axman6: (a -> b -> b) -> b -> [a] -> b
[03:39:47] <liz_> so b can be any type you like, including a function
[03:40:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:42:56] <geekosaur> it can also for example be a tuple, if you need to carry around moe than one thing
[03:43:09] <geekosaur> *more
[03:43:50] <liz_> i sometimes use tuples for simple state which is then discarded by whatever function is using the fold
[03:46:30] <liz_> i had an [Int] -> [Int] fold that used a tuple, bin2int = fst $ foldr (\b (n,pow) -> (n+b*pow,2*pow)) (0,1)
[03:48:28] <worldhelloworld> I am not sure how to think of it in terms of state tbh - I don't think the hutton book has such examples that I can remember  
[03:50:51] <worldhelloworld> but if one were to think in terms of accumulators, just for curiosity, is the dropWhile easy to grasp? Or am I struggling more than normal? Just trying to gauge my understanding
[03:50:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:51:44] <janus> what are people's opinions on upgrading packages in anticipation of the release of a dependency? for example, does it make sense to make a package compatible with ghc 9.2 even though it relies on cryptonite?
[03:52:08] <janus> i could appreciate the argument that since it hasn't actaully been run, one shouldn't claim compatibility
[03:53:20] <hpc> if you think only in terms of the semantics of the version numbers, it's a valid thing to do
[03:53:27] <hpc> i personally wouldn't do it, for the very reason you mention
[03:53:59] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[03:54:02] <janus> for cryptonite, there are PRs open that patch cryptonite to make it compatible. but when i see people overriding dependencies in comitted code, it makes me cringe
[03:54:33] *** Quits: InstX1_ (~Liam@2601:6c4:4080:3f80:b5e9:14a0:500e:3e39) (Ping timeout: 250 seconds)
[03:54:34] <hpc> maybe you can test against those PRs?
[03:54:36] <janus> i don't like comitting references to "replaced" dependencies because that code becomes stale as soon as the "real" upgrade happens
[03:55:08] <hpc> if the PRs would be a minor version bump i think you're in the clear
[03:55:25] <janus> hpc: what do you mean by testing? i am referring to stuff like this https://github.com/aesiniath/http-streams/pull/130/files
[03:55:31] <hpc> and if it breaks after you can make your own updates to fix it
[03:56:05] <hpc> build it yourself with those PRs merged in, and test against that
[03:56:12] <hpc> however you test your package
[03:56:42] <janus> right, i also think that it is a useful compromise to test with source-repository-package, but *not* commit that override
[03:56:43] <hpc> a "what-if" build of the dependencies, as it were
[03:57:18] <janus> my problem is that the PR description then becomes more complicated, since you have to explain to the repo owner how to 'override' the dependency and the anticipation and so on...
[03:57:43] <hpc> only if they want to use those PRs
[03:58:09] <hpc> otherwise the constraints of the released cryptonite package prevent using 9.2 anyway i assume?
[03:58:49] <hpc> so pre-loosening the constraints doesn't break things in the now
[03:58:51] <janus> yeah, the currently released cryptonite is unbuildable on 9.2 due to it's dependency on memory/foundation
[03:58:56] <hpc> and this testing is just to prove it won't break things in the future
[03:59:26] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Read error: Connection reset by peer)
[03:59:35] <janus> it becomes even more involved with CI integration, because i speculate that some people don't want to merge code that isn't being exercised in CI
[03:59:39] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[03:59:53] <janus> so they wouldn't merge a bytestring bump that allows 0.11 until 9.2 is exercised on CI...
[04:02:25] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[04:03:02] <janus> hpc: what do you mean by "only if they want to use those PRs"? let's say the PR allows bytestring 0.11. would 'using the PR' mean compiling with GHC 9.2? and you're saying it could be allowed by the bounds even though overriden dependencies are not committed?
[04:04:09] <worldhelloworld> The way that book describes fold is in two ways 1) Replacing the cons operator by the function 2) The accumulator value method , taking the head and processing recursively ....... Is there another way to think about folds?
[04:04:29] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[04:04:33] <hpc> janus: it would mean they did the same thing you did
[04:04:49] <hpc> doing their own build of that dependency with some stuff changed from what's on hackage
[04:05:23] *** alMalsamo is now known as lumberjack123
[04:06:08] <hpc> (which you don't need to support in your package, they're taking on the making-it-work burden themselves when they do that)
[04:07:18] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 272 seconds)
[04:07:23] *** Joins: tommd (~tommd@97-120-41-123.ptld.qwest.net)
[04:08:23] <monochrom> There is no other way. In fact the second way is just a lousier way to say the first.
[04:09:04] <hpc> worldhelloworld: the first way generalizes way better too
[04:09:06] <hpc> :t maybe
[04:09:07] <lambdabot> b -> (a -> b) -> Maybe a -> b
[04:09:19] <hpc> worldhelloworld: maybe is just "replacing the Just" and "replacing the Nothing"
[04:09:25] <hpc> :t either
[04:09:26] <lambdabot> (a -> c) -> (b -> c) -> Either a b -> c
[04:09:28] <hpc> etc
[04:09:40] <monochrom> The first way though still has the problem of leaving it ambiguous what happens to infinite list.
[04:10:18] <hpc> it's not ambiguous
[04:10:39] <hpc> it just does whatever an infinite chain of that function would do
[04:10:45] <monochrom> Well, I was being charitable.
[04:10:53] <hpc> :P
[04:11:03] <Axman6> worldhelloworld: is this homework?
[04:11:06] *** Quits: ishutin (~ishutin@92-249-150-139.static.digikabel.hu) (Ping timeout: 272 seconds)
[04:11:20] <Axman6> the dropWhile thing
[04:11:33] <monochrom> Read literally, it implies that if you have infinitely many cons, then there is infinitely much work to be done.
[04:11:37] <worldhelloworld> @axman6 - no trying to solve it for myself, got done with Uni way back 
[04:11:37] <lambdabot> Unknown command, try @list
[04:11:52] <Axman6> ok, great, means we can be a bit more helpful
[04:12:13] <monochrom> which is incompatible with how things unfold (pun!) in Haskell
[04:12:16] *** Joins: ishutin (~ishutin@92-249-193-65.pool.digikabel.hu)
[04:13:09] <hpc> monochrom: that is only the case strictly speaking (more pun!)
[04:13:33] <worldhelloworld> the problem I have trying to conceptualise fold with replacing cons (:) operator  is how does one know which side of the cons operator goes where in ... say an anonymous function (\a b -> do something)
[04:13:56] <hpc> worldhelloworld: give that lambda a name - say, f
[04:14:10] <hpc> worldhelloworld: now you have your list, a : (b : c)
[04:14:11] <Axman6> @msg lambdabot > let everySecond xs = (foldr (\a acc keep -> if keep then a : acc (not keep) else acc (not keep)) (\_keep -> []) xs) True in everySecond [1..10]
[04:14:11] <lambdabot> Not enough privileges
[04:14:14] <Axman6> uh
[04:14:23] <monochrom> x:xs = (:) x xs.  Replace that (:) there.  Not ambiguous.
[04:14:28] <hpc> worldhelloworld: after you fold, it becomes a `f` (b `f` c)
[04:14:38] <Axman6> Well good thing I got that right on the first try!
[04:14:44] <Axman6> > let everySecond xs = (foldr (\a acc keep -> if keep then a : acc (not keep) else acc (not keep)) (\_keep -> []) xs) True in everySecond [1..10]
[04:14:46] <lambdabot>  [1,3,5,7,9]
[04:14:53] <monochrom> Therefore, after replacement, (\a b -> do something) x xs.  You do the math.
[04:15:11] *** Joins: unyu (~pyon@user/pyon)
[04:15:23] <Axman6> worldhelloworld: here's an example of using foldr where acc is a function
[04:15:49] <Axman6> :t foldr `asAppliedTo` (\a acc keep -> if keep then a : acc (not keep) else acc (not keep))
[04:15:50] <lambdabot> Foldable t => (a -> (Bool -> [a]) -> Bool -> [a]) -> (Bool -> [a]) -> t a -> Bool -> [a]
[04:16:11] <monochrom> Err "x:xs" is a bad example.
[04:16:12] <Axman6> % :t foldr @[] `asAppliedTo` (\a acc keep -> if keep then a : acc (not keep) else acc (not keep)) -- to make the type a little simpler
[04:16:12] <yahb> Axman6: ; <interactive>:1:11: error: Variable not in scope: asAppliedTo :: ((a0 -> b0 -> b0) -> b0 -> [a0] -> b0) -> (a1 -> (Bool -> [a1]) -> Bool -> [a1]) -> t
[04:16:42] <monochrom> x : y : z : [] = (:) x ((:) y ((:) z [])).  Replace all those (:)s there.
[04:17:02] <Axman6> urgh - mniip can we get asAppliedTo, asTypeOf etc added to yahb? they're so useful in here
[04:17:39] <monochrom> (\a b -> do something) x ((\a b -> do something) y ((\a b -> do something) z ???))...)  where ??? is whatever replaces [].
[04:18:30] <dibblego> (:) is right-associative, add parens if it helps
[04:18:43] <hpc> worldhelloworld: by the way, take all of these examples and put them into a file and format it
[04:19:02] <hpc> irc is not an ideal medium for these sorts of code snippets
[04:19:25] *** Joins: GIngeh (~GIngeh@203.62.28.64)
[04:19:27] <hpc> (formatting will probably include breaking out parts of it and giving them names)
[04:19:28] <worldhelloworld> good idea ... my brain is unable to process it right now 
[04:19:44] <hpc> (names make all code better, even if they're just a b c)
[04:20:59] <worldhelloworld> yea, easier to understand for the mental model
[04:21:02] <GIngeh> @pl (\target -> listToMaybe . map (\[x,y] -> (x,y)) . filter (\x -> sum x == target) . combinations 2)
[04:21:02] <lambdabot> (line 1, column 33):
[04:21:02] <lambdabot> unexpected "["
[04:21:02] <lambdabot> expecting pattern
[04:22:16] <GIngeh> @pl \target -> listToMaybe . map (\ [x,y] -> (x,y)) . filter (\x -> sum x == target) . combinations 2
[04:22:16] <lambdabot> (line 1, column 33):
[04:22:16] <lambdabot> unexpected "["
[04:22:16] <lambdabot> expecting pattern
[04:22:49] *** Joins: cynomys (~cynomys@user/cynomys)
[04:23:25] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[04:23:36] <geekosaur> you can't really make that part pointfree
[04:23:37] <Axman6> > let everySecond xs = (foldr (\a acc keep -> if keep then a : acc (not keep) else acc (not keep)) (\_keep -> []) {- <- this is acc -}  xs {- <- this provedes each a -}) True {- <- this is the inital keep -} in everySecond [1..10] -- worldhelloworldthis might be useful to study, with comments added now
[04:23:39] <lambdabot>  [1,3,5,7,9]
[04:24:10] <worldhelloworld> It's funny because i picked up the recursive cases really fast, but folds just got to me
[04:24:19] <worldhelloworld> hmm will note it down
[04:24:31] <Axman6> @pl \target -> listToMaybe . map (\ xs -> (xs!!0,xs!!1)) . filter (\x -> sum x == target) . combinations 2 -- hack for pl?
[04:24:31] <lambdabot> ((listToMaybe . map (liftM2 (,) (!! 0) (!! 1))) .) . (. combinations 2) . filter . (. sum) . (==)
[04:25:03] *** Joins: vysn (~vysn@user/vysn)
[04:25:04] <geekosaur> maybe hork instead of hack :þ
[04:25:12] <liz_> lambdabot can do eta reduction? :o
[04:25:20] <geekosaur> then again hat describes most of pl's output
[04:26:04] <Axman6> worldhelloworld: the thing to take note of is the function we give to foldr here is taking three things: the current value in the list, what to do next, and some state that is uses, and passes on, to decide what to do with this particular a
[04:26:09] <monochrom> If you understand recursion, you can understand foldr by using recursion to reinvent it yourself.
[04:26:39] <hpc> to some extent, foldr /is/ recursion for lists
[04:26:43] <Axman6> liz_: pl is short for pointless, a pun on making things pointfree, because it often doesn't improve code at all
[04:27:02] <GIngeh> oh lord
[04:27:04] <hpc> but that's a whole other thing ;)
[04:27:06] <GIngeh> yeah I'm not gonna bother trying to use that
[04:27:07] <Axman6> hpc: to some extent, or it is univeral?
[04:27:10] <dibblego> > foldr (++) [] [[1,2,3], [4,5,6]] -- insert (++) in every (:) and [] in []
[04:27:12] <lambdabot>  [1,2,3,4,5,6]
[04:27:22] <worldhelloworld> @monochrom thanks for making me feel I don't even understand recursion :P 
[04:27:22] <lambdabot> Unknown command, try @list
[04:27:23] <hpc> Axman6: to the entire extent :P
[04:27:28] <Axman6> :)
[04:27:50] *** GIngeh is now known as Gingeh
[04:27:59] *** Quits: Gingeh (~GIngeh@203.62.28.64) (Quit: Client closed)
[04:28:22] <geekosaur> we call it "pl" ("pointless") for a reason :)
[04:28:32] <hpc> worldhelloworld: if it makes you feel better, the entire field of math doesn't even understand real numbers
[04:28:34] <geekosaur> and even so that's one of ts cleaner outputs
[04:28:41] <geekosaur> *its
[04:28:50] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[04:28:54] <geekosaur> oh they left already
[04:29:00] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[04:29:17] <liz_> it sounds very funny then
[04:29:22] *** Joins: alp (~alp@user/alp)
[04:29:31] <hpc> you're further in the weeds here than hardly any programmer ever gets
[04:29:43] <hpc> but they're really cool weeds
[04:29:50] <monochrom> Hell I think most people understand recursion less than they think.
[04:30:04] <jackdk> I understand recursion as much as I understand recursion
[04:30:23] <monochrom> I recently proved that well-founded induction justifies well-founded recursive definitions.
[04:30:29] *** Joins: cynomys (~cynomys@user/cynomys)
[04:30:34] <worldhelloworld> hpc not sure what that means about real numbers, but I presume it must be something fancy
[04:31:09] <monochrom> I think I found out that no matter how you dice it, some kind of choice axiom is needed.
[04:31:13] <worldhelloworld> monochrom am I a case in point? 
[04:31:14] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[04:31:14] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:31:47] <geekosaur> you have more justification than "most people", I suspect
[04:31:50] <hpc> worldhelloworld: just that fundamental math is deceptively tricky
[04:32:00] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[04:32:06] <Axman6> > let takeEnd n0 xs = fst $ foldr  (\a (ys,n) -> if n <= 0 then (ys, n) else (a:ys, n-1)) ([],n0) xs in takeEnd 3 [1..10]
[04:32:08] <lambdabot>  [8,9,10]
[04:32:09] <worldhelloworld> fair enough
[04:32:10] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[04:32:10] *** Joins: cynomys (~cynomys@user/cynomys)
[04:32:12] <monochrom> I checked a set theory textbook, it handwaved away the involvement of choice, as in, it avoided saying that choice is needed.
[04:32:20] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[04:32:28] <monochrom> I feel like the authors were not aware.
[04:32:43] <liz_> in my experience, the axiom of choice only comes up in extremely rigorous texts
[04:32:57] <monochrom> By extension, if certain authors of a certain set theory textbook were not aware, perhaps a lot of mathematicians neither.
[04:33:03] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[04:33:18] <hpc> worldhelloworld: there's a joke that real analysis should be called complex analysis due to how difficult it is and how many problems aren't solvable
[04:33:30] *** Joins: cynomys (~cynomys@user/cynomys)
[04:33:39] <hpc> worldhelloworld: and complex numbers should be called rational numbers because they have so many fewer edge cases
[04:33:42] <hpc> etc etc
[04:33:52] <hpc> (the whole numeric hierarchy gets renamed)
[04:33:53] <worldhelloworld> haha that sounds funny, even though I'm unable to understand the depths of it
[04:34:00] <liz_> complex analysis is no cakewalk either though x_x
[04:34:27] <hpc> heh, yeah
[04:34:33] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[04:34:52] <Axman6> hypercomplex analysis
[04:35:15] <hpc> my formal learning ended just before linear algebra
[04:35:31] <hpc> partially due to bad teachers and partially due to bad teaching
[04:35:48] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[04:35:48] <worldhelloworld> how did you manage to be self taught as much?
[04:36:02] <hpc> i wasn't able to independently figure out what the actual fundamental stuff was, and all the classes ever did was drill how to solve eigenvectors and such
[04:36:12] <liz_> i have a masters degree in maths and i still struggle with real/complex analysis a lot
[04:36:34] <hpc> worldhelloworld: when i started college i tried learning python after being stuck with java all through HS
[04:36:44] <hpc> quickly realized i was too stupid for python, and learned haskell instead
[04:36:55] <hpc> it was way easier, ghc does a lot of thinking for me
[04:37:01] <geekosaur> this sounds like me :þ
[04:37:02] <hpc> then i just followed the concepts
[04:37:20] <hpc> people say things here, i google them, follow wikipedia links, mess with them in ghci, and ask questions
[04:37:41] <worldhelloworld> I, unfortunately, learned python a bit, now I am trying to unlearn it to learn haskell - it's more difficult
[04:37:59] <hpc> yeah, try unlearning java sometime, it's even harder
[04:38:12] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::45ee)
[04:38:15] <worldhelloworld> :)
[04:38:19] <hpc> it took me a month to get to an irc bot that could echo back what i sent it
[04:38:20] <geekosaur> except I have some baggage like never quite trusting myself at math because of some horrific early "schooling"
[04:38:47] <liz_> this is interesting to hear about, because my introduction to haskell was quite formal; a professor recommended it to me while we were discussing semigroup theory
[04:39:08] <hpc> and then it barely worked at that, i think the early versions could only run for a few days at a time before getting memory-killed
[04:39:42] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[04:40:10] <monochrom> I recommend "Linear Algebra Done Right" for a non-computational, putting-the-algebra-back-into-linear-algebra explanation of linear algebra.
[04:40:36] <hpc> 3b1b was what finally got linear algebra's concepts in my head
[04:40:43] <hpc> but by then it was too late to feel like anything but work
[04:40:47] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:40:48] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[04:40:52] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 272 seconds)
[04:41:04] <worldhelloworld> monochrom - how approachable is it for someone out of touch with academics?
[04:41:35] <worldhelloworld> hpc whats 3b1b?
[04:41:48] <hpc> https://www.youtube.com/c/3blue1brown
[04:41:57] <monochrom> For example, transpose is really defined by an adjunction.  <T v, w> = <v, (transpose T) w>
[04:41:57] <worldhelloworld> oh that channel  - got it
[04:42:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 240 seconds)
[04:42:40] <monochrom> It also has a no-matrix proof that eigenthings exist.
[04:42:51] <monochrom> Hell, no-determinant too.
[04:43:11] <hpc> ooh, nice
[04:43:17] <hpc> i hated calculating those
[04:43:24] <hpc> even computers hate calculating thoses
[04:43:43] *** Joins: da39a3ee5e6b4b0d (~textual@171.5.29.46)
[04:43:56] <hpc> it's like the math version doing lines on the chalkboarad for detention
[04:44:48] <worldhelloworld> I'm afraid I havent read as much as you guys, couldn't even read Gilbert Strang .... but someday
[04:45:00] <hpc> i haven't read gilbert strang :P
[04:45:36] <worldhelloworld> I assumed it's a good book so many/most must have
[04:46:50] <liz_> if you ever wanted to dip your toes in more formal theory, then
[04:46:53] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:46:54] <liz_> whoops, mispressed enter
[04:47:26] <liz_> I. N. Herstein's "Topics in Algebra" has good sections on vector spaces and linear transformations
[04:48:37] <worldhelloworld> Interesting .... I am too rusty, that sounds like something rigourous, hopefully in due time
[04:48:41] <worldhelloworld> thanks though
[04:52:17] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:55:07] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[04:55:29] *** Joins: alp (~alp@user/alp)
[04:58:08] <romesrf> night everyone
[04:58:12] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[04:59:02] <worldhelloworld> nighty
[04:59:37] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:3065:9fc7:d58e:fc3e) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[05:00:04] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:3065:9fc7:d58e:fc3e)
[05:00:44] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:598a:8b0b:9405:6e26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:04:01] *** Quits: da39a3ee5e6b4b0d (~textual@171.5.29.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:05:35] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[05:15:16] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[05:15:33] *** Joins: img (~img@user/img)
[05:16:07] *** Quits: tommd (~tommd@97-120-41-123.ptld.qwest.net) (Ping timeout: 256 seconds)
[05:30:45] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[05:31:10] *** Quits: gentauro (~gentauro@user/gentauro) (Ping timeout: 256 seconds)
[05:31:54] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:3065:9fc7:d58e:fc3e) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[05:32:29] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:3065:9fc7:d58e:fc3e)
[05:33:22] *** Joins: unyu (~pyon@user/pyon)
[05:33:48] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:37:30] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e)
[05:37:45] *** Joins: gentauro (~gentauro@user/gentauro)
[05:47:15] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:48:36] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[05:51:50] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Quit: WeeChat 2.8)
[05:53:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:53:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:53:44] *** Joins: wroathe (~wroathe@user/wroathe)
[05:55:11] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[06:04:02] *** Quits: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net) (Ping timeout: 256 seconds)
[06:04:20] *** Joins: x_kuru (~xkuru@user/xkuru)
[06:05:19] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[06:07:06] *** Joins: caildddddt^ (~cailddddd@50.232.121.75)
[06:07:30] *** Joins: cheater1__ (~Username@user/cheater)
[06:07:34] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:4154:7a97:7f52:6596) (Remote host closed the connection)
[06:07:38] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 272 seconds)
[06:07:39] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[06:07:45] *** cheater1__ is now known as cheater
[06:07:51] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:8cff:8f3a:46d8:f6ed)
[06:08:34] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[06:11:06] *** Quits: liz (~liz@2a00:23c5:9680:501:f2d5:bfff:fe6a:5af4) (Remote host closed the connection)
[06:11:42] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[06:11:58] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[06:18:03] *** Joins: aeka` (~aeka@pool-100-4-208-71.albyny.fios.verizon.net)
[06:18:06] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 260 seconds)
[06:19:00] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[06:21:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[06:22:10] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[06:25:53] *** Joins: merijn (~merijn@c-001-002-007.client.esciencecenter.eduvpn.nl)
[06:27:54] *** Quits: aeka` (~aeka@pool-100-4-208-71.albyny.fios.verizon.net) (Ping timeout: 260 seconds)
[06:34:44] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[06:38:07] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:3065:9fc7:d58e:fc3e) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[06:38:17] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 256 seconds)
[06:38:21] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:39:46] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[06:55:06] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[06:58:08] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[06:58:26] *** Quits: merijn (~merijn@c-001-002-007.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:04:19] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Remote host closed the connection)
[07:04:37] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[07:11:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:12:53] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:05] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:18:50] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[07:21:37] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:22:25] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[07:23:02] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Client Quit)
[07:24:41] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Remote host closed the connection)
[07:24:59] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[07:25:01] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[07:25:18] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[07:25:35] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[07:29:17] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[07:29:46] *** Joins: emf_ (~emf@2620:10d:c090:400::5:8ba5)
[07:31:28] *** Quits: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[07:32:27] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[07:32:43] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[07:32:59] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:35:56] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[07:40:02] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:41:55] *** Joins: mbuf (~Shakthi@122.174.51.86)
[07:47:46] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:50:07] *** Quits: liz_ (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Quit: Leaving)
[07:50:16] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[07:54:52] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 250 seconds)
[07:55:17] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::45ee) (Ping timeout: 240 seconds)
[07:58:35] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[07:59:04] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Ping timeout: 256 seconds)
[08:03:17] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[08:05:13] *** Quits: caildddddt^ (~cailddddd@50.232.121.75) (Remote host closed the connection)
[08:06:13] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: leaving)
[08:06:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:06:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:06:51] *** Joins: wroathe (~wroathe@user/wroathe)
[08:13:47] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[08:16:38] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[08:23:45] *** Quits: worldhelloworld1 (uid543174@id-543174.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[08:29:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:30:02] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e)
[08:40:10] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[08:42:37] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (Ping timeout: 240 seconds)
[08:43:26] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Ping timeout: 272 seconds)
[08:44:34] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[08:44:42] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[08:53:34] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 272 seconds)
[08:55:10] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[08:58:35] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[09:03:56] *** Joins: bahamas (~lucian@84.232.140.52)
[09:05:40] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:10:34] *** Quits: ajb (~ajb@cupid.whatbox.ca) (Quit: bye)
[09:11:26] *** Quits: res0nat0r08 (~Fletch@dia.whatbox.ca) (Quit: The Lounge - https://thelounge.chat)
[09:11:48] *** Joins: coot (~coot@213.134.190.95)
[09:15:39] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[09:15:47] *** Joins: kaph (~kaph@151.47.91.217)
[09:16:01] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:19:47] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[09:22:25] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:22:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:23:14] *** Joins: nattiestnate (~nate@202.138.250.13)
[09:29:24] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[09:31:02] *** Quits: nattiestnate (~nate@202.138.250.13) (Quit: WeeChat 3.4)
[09:31:12] *** Quits: emf_ (~emf@2620:10d:c090:400::5:8ba5) (Quit: emf_)
[09:32:43] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[09:32:48] *** Joins: kaph_ (~kaph@151.47.91.217)
[09:33:32] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[09:33:38] *** Quits: kaph (~kaph@151.47.91.217) (Read error: Connection reset by peer)
[09:37:21] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Ping timeout: 256 seconds)
[09:39:14] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:43:20] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[09:43:25] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:43:44] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:45:25] *** Joins: deadmarshal_ (~deadmarsh@95.38.114.14)
[09:49:39] *** Joins: kaph__ (~kaph@151.35.204.82)
[09:52:25] *** Quits: kaph__ (~kaph@151.35.204.82) (Read error: Connection reset by peer)
[09:52:28] *** Quits: kaph_ (~kaph@151.47.91.217) (Ping timeout: 272 seconds)
[10:00:24] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Remote host closed the connection)
[10:00:42] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[10:02:37] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:05:00] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Remote host closed the connection)
[10:05:17] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[10:09:07] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[10:13:55] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Remote host closed the connection)
[10:14:12] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[10:28:42] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[10:29:11] *** Quits: deadmarshal_ (~deadmarsh@95.38.114.14) (Quit: ZNC 1.8.2 - https://znc.in)
[10:29:34] *** Joins: deadmarshal_ (~deadmarsh@95.38.114.14)
[10:30:23] *** Joins: res0nat0r08 (~Fletch@dia.whatbox.ca)
[10:33:27] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[10:36:51] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[10:39:24] *** Quits: akurilin_ (uid322841@id-322841.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[10:47:02] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[10:48:05] *** Quits: beka (~beka@104.193.170.240) (Remote host closed the connection)
[10:48:33] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:48:43] *** Joins: beka (~beka@104.193.170.240)
[10:48:46] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[10:49:24] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:50:45] *** Joins: FragByte (~christian@user/fragbyte)
[10:51:35] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[10:52:27] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:53:11] *** Joins: fendor (~fendor@178.115.53.79.wireless.dyn.drei.com)
[10:53:51] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[11:00:22] *** Quits: mbuf (~Shakthi@122.174.51.86) (Quit: Leaving)
[11:00:34] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:02:04] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[11:02:58] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[11:11:11] *** Joins: alp (~alp@user/alp)
[11:14:39] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:17:50] *** Joins: michalz (~michalz@185.246.204.93)
[11:25:03] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:26:28] *** Quits: deadmarshal_ (~deadmarsh@95.38.114.14) (Ping timeout: 256 seconds)
[11:30:47] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[11:30:48] *** Joins: acidjnk (~acidjnk@p200300d0c7049f27690562e0ba62f824.dip0.t-ipconnect.de)
[11:32:44] *** Joins: deadmarshal_ (~deadmarsh@95.38.114.14)
[11:33:39] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:48:27] *** Joins: jespada (~jespada@85.255.234.169)
[11:49:57] *** Quits: mncheck (~mncheck@193.224.205.254) (Quit: Leaving)
[11:50:39] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:55:15] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[11:55:28] *** Joins: drdo (~drdo@roach0.drdo.eu)
[11:59:43] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:3240:c699:b7eb:e5b0)
[12:00:24] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[12:01:35] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:8cff:8f3a:46d8:f6ed) (Remote host closed the connection)
[12:04:28] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[12:05:12] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[12:05:52] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[12:06:08] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:06:23] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[12:07:23] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:15:28] *** Quits: pranshukhandal (pranshukha@envs.net) (Quit: the lounge - https://webirc.envs.net)
[12:15:28] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[12:16:03] *** Joins: Topsi (~Tobias@dyndsl-095-033-088-239.ewe-ip-backbone.de)
[12:18:06] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:18:23] *** Joins: sus (zero@user/zeromomentum)
[12:18:24] *** Joins: pranshukhandal (~ghost@envs.net)
[12:19:38] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[12:20:17] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[12:23:57] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[12:28:01] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[12:30:06] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: You have been kicked for being idle)
[12:30:31] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[12:30:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[12:30:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[12:33:28] *** Joins: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[12:36:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[12:39:35] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (Remote host closed the connection)
[12:41:05] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[12:41:34] *** Joins: ccntrq (~Thunderbi@2a01:c22:9102:c100:80c3:8f62:e3ae:6455)
[12:42:47] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:598a:8b0b:9405:6e26)
[12:48:10] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:49:10] *** Quits: ishutin (~ishutin@92-249-193-65.pool.digikabel.hu) (Ping timeout: 272 seconds)
[12:50:14] *** Joins: ishutin (~ishutin@87-97-30-219.pool.digikabel.hu)
[12:51:28] *** Joins: kuribas (~user@ptr-25vy0i8r77cynr1cb5v.18120a2.ip6.access.telenet.be)
[12:51:31] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[12:52:11] <kuribas> Does correctness and simplicity even go together?
[12:52:54] <kuribas> I have been looking to solve this problem: in lisp (clojure) we can put a specification in data, then create the functionality by interpreting the data (for example a specification of an API).
[12:52:58] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:53:23] <kuribas> Doing this in haskell is easy.  The problem is proving consistency.
[12:53:53] <kuribas> You'll end up with something like servant, which is hardly simple...
[12:54:22] <kuribas> Or you need to use GADTs to have stronger consistency garantees.
[12:54:36] <kuribas> And hashmaps are easy to work with in clojure, records in haskell aren't very flexible.
[12:56:51] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e)
[12:57:05] <kuribas> The thing is, doing these things is all possible, but doing it with "simple" haskell seems nearly impossible.
[13:01:50] <kuribas> Or maybe better to not "prove" consistency, but write a lot of tests?
[13:02:31] <kuribas> probably "not consistent haskell" is still better than clojure.
[13:03:30] *** Quits: jespada (~jespada@85.255.234.169) (Ping timeout: 268 seconds)
[13:08:13] <kuribas> I found two solutions: higher kinded records, manipulating them using generic "magic".
[13:08:34] <kuribas> Or going to idris, where types can be data, and data can be types.  That makes manipulating types much easier.
[13:12:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Remote host closed the connection)
[13:13:46] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:14:07] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[13:15:25] <romesrf> good morning
[13:17:04] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[13:17:13] *** Quits: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Ping timeout: 256 seconds)
[13:17:24] <kuribas> morning
[13:18:32] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[13:18:38] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[13:21:40] *** Joins: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net)
[13:22:46] *** Joins: jespada (~jespada@148.252.132.235)
[13:23:42] *** Joins: ehammarstrom_ (~ehammarst@62-20-203-39-no182.tbcn.telia.com)
[13:23:47] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:24:01] *** Quits: ehammarstrom (~ehammarst@62-20-203-39-no182.tbcn.telia.com) (Ping timeout: 256 seconds)
[13:24:03] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:26:57] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[13:28:27] *** Joins: kaph (~kaph@151.37.169.201)
[13:29:38] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 252 seconds)
[13:30:00] *** Joins: agumonkey (~user@88.163.231.79)
[13:31:23] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[13:33:57] *** Joins: phma (phma@2001:5b0:210b:8f48:791b:849d:7db1:84dd)
[13:35:07] *** Quits: kaph (~kaph@151.37.169.201) (Ping timeout: 256 seconds)
[13:35:44] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[13:40:44] *** Joins: mncheck (~mncheck@193.224.205.254)
[13:43:15] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:44:37] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:44:41] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e)
[13:46:13] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e) (Client Quit)
[13:46:45] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e)
[13:48:25] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:50:24] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:55:11] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[13:56:11] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 245 seconds)
[13:57:10] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:00:26] *** Joins: __monty__ (~toonn@user/toonn)
[14:00:51] *** Quits: jespada (~jespada@148.252.132.235) (Ping timeout: 268 seconds)
[14:02:55] *** Joins: Erutuon (~Erutuon@user/erutuon)
[14:03:02] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[14:04:19] *** Joins: jespada (~jespada@148.252.132.235)
[14:06:28] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[14:06:50] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[14:11:22] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:13:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[14:14:49] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:17:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Ping timeout: 240 seconds)
[14:21:01] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[14:22:55] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[14:25:56] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:598a:8b0b:9405:6e26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:26:34] *** Quits: rembo10 (~rembo10@main.remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[14:27:24] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:598a:8b0b:9405:6e26)
[14:27:28] *** Joins: rembo10 (~rembo10@main.remulis.com)
[14:27:29] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[14:28:51] *** Joins: worldhelloworld1 (uid543174@id-543174.helmsley.irccloud.com)
[14:28:53] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[14:29:12] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[14:29:36] *** Quits: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net) (Quit: Leaving)
[14:29:50] *** Joins: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net)
[14:31:55] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[14:31:56] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[14:34:30] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-bdd9-2653-5498-c104.res6.spectrum.com)
[14:35:13] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-bdd9-2653-5498-c104.res6.spectrum.com) (Client Quit)
[14:36:50] *** Quits: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net) (Ping timeout: 272 seconds)
[14:38:35] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:40:27] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[14:40:32] *** Joins: srk (~sorki@user/srk)
[14:40:42] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[14:42:57] *** Joins: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[14:43:56] *** Quits: yauhsien (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:44:45] <tomsmeding_> kuribas: proving correctness is always hard
[14:44:50] *** tomsmeding_ is now known as tomsmeding
[14:45:06] <tomsmeding> or at least, nobody has found a way yet to easily prove correctness of nontrivial programs
[14:45:26] <kuribas> perhaps correctness is a vague name
[14:45:33] <kuribas> I prefer "consistency".
[14:45:43] <tomsmeding> s/correctness/any nontrivial behavioural property/
[14:45:58] <kuribas> As in, I have a (API) specification, and I want to ensure the program implements this specification.
[14:46:05] <tomsmeding> same thing
[14:46:23] <kuribas> Or a database schema, and the SQL is correct WRT to that schema.
[14:46:38] <tomsmeding> that is easier, because sql is a more limited language than haskell
[14:47:19] <kuribas> It's subtly different, because I don't prove the program implements the business logic correctly.
[14:47:26] <kuribas> I just prove it is consisten with itself.
[14:47:32] <kuribas> Though possible wrong.
[14:47:52] *** Joins: fendor_ (~fendor@178.165.181.170.wireless.dyn.drei.com)
[14:47:56] <tomsmeding> it's still a nontrivial property about the behaviour of the program
[14:48:04] <kuribas> yeah
[14:48:19] <tomsmeding> "In computability theory, Rice's theorem states that all non-trivial semantic properties of programs are undecidable."
[14:48:38] <tomsmeding> it's hard, and humans have the impressive ability to write proofs for some of those properties
[14:48:43] <tomsmeding> but we haven't found a way yet to make that much easier
[14:48:55] <kuribas> Still, is it so hard to prove, this server implements this API specification?
[14:49:04] <kuribas> servant does it, but clumsily.
[14:49:20] <tomsmeding> in general, yes; if your program has specific structure that you can exploit (e.g. in the types), then that helps
[14:49:55] <tomsmeding> in particular, with a strong enough type system, you can encode the proof in the types, so that any total program that has that type does the right thing
[14:50:14] <tomsmeding> which is a fairly extreme case of "if your program has specific structure, it's easier"
[14:50:28] *** Quits: fendor (~fendor@178.115.53.79.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[14:50:34] <tomsmeding> PL people very much like the approach, but it's not the only approach
[14:50:57] <kuribas> What I like to aim for is not "correct" business logic, but transparent and consistent business logic.
[14:51:23] <kuribas> In a sense that what business logic the program implements is easy to see from the code.
[14:51:29] <tomsmeding> you also have stuff like Why3, where you (write the program in their dialect of ocaml and) annotate pre- and post-conditions and loop invariants, and it tries to use an SMT solver to prove stuff
[14:51:31] *** Joins: vglfr (~vglfr@88.155.96.35)
[14:51:50] <tomsmeding> true, maybe "correct" is a too-loaded term for this
[14:52:02] <tomsmeding> but for me, what you say falls into the same bucket
[14:52:15] <kuribas> Right, but that's "after the fact" proving.
[14:52:23] <tomsmeding> whether the specification is external, or if it's another part of your program, same thing
[14:52:24] <kuribas> You write some code or algorithm, then you prove it correct.
[14:52:28] <tomsmeding> yes
[14:52:42] <kuribas> It seems easier to make something correct by construction.
[14:52:46] <tomsmeding> as distinct from the dependent-types encode-the-proof-in-the-type-system approach
[14:54:08] <kuribas> Technically haskell is a subset of dependent-types.
[14:54:12] <tomsmeding> my point is, your observation that it's hard is not surprising :p
[14:54:12] <tomsmeding> yes
[14:54:13] <Hecate> hohai
[14:54:42] <kuribas> "Integer" is just a proposition that the value behaves like a mathematical integer
[14:54:56] <tomsmeding> Hecate: hi :)
[14:56:02] *** Joins: aeka (~aeka@pool-100-4-208-71.albyny.fios.verizon.net)
[14:56:10] <kuribas> And the HM inference engine just proofs that it does.
[14:56:26] <kuribas> tomsmeding: yeah, I guess it's non-trivial.
[14:56:30] <Hecate> are we on the propositions as types / programs as proof discussion?
[14:56:36] <Hecate> tomsmeding: hello you :)
[14:56:51] <kuribas> tomsmeding: it's just, clojure doesn't feel very satisfying, though there good ideas in there.
[14:57:51] <tomsmeding> Hecate: this started the discussion https://ircbrowse.tomsmeding.com/day/lchaskell/today?id=463224#trid463224
[14:58:02] <Hecate> > Does correctness and simplicity even go together?
[14:58:04] <lambdabot>  <hint>:1:50: error:
[14:58:04] <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
[14:58:04] <Hecate> oh oh oh
[14:58:07] <Hecate> good question
[14:58:10] <Hecate> I have a short answer
[14:58:13] <Hecate> no and yes
[14:58:37] <Hecate> no: Being correct implies that you need to forgo a simplistic world view and take care of the sharp edges of your model
[14:59:05] <Hecate> yes: Having correct foundations mean that you have to do less work in your program to maintain correctness
[14:59:27] <Hecate> also read: Complexity has to live somewhere: https://ferd.ca/complexity-has-to-live-somewhere.html
[14:59:47] * Rembane builds house for complexity
[15:00:18] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 260 seconds)
[15:00:39] <Hecate> following this aphorism, we can indeed state that correctness is complex to nail, but having it live in your compiler rather than as an external library or, worse, to be manually verified by the user, makes thing simpler for downstream users
[15:01:09] <Hecate> now if you truly want a yes XOR no answer, you need to ask the question of costs and benefits
[15:01:27] <Hecate> at which scale of users is it more economic to have correctness upstreamed?
[15:01:45] <Hecate> if you're five cave dwellers using a lisp interpreter written in Forth, maybe not
[15:02:07] <Hecate> if you're 200k people around the globe and your language promotes correctness of thinking and implementation, then yeah sure
[15:02:51] <Hecate> any question? :p
[15:03:27] <maerwald> I never had the impression that Haskell promotes correctness. Correctness is usually something rather low-level that only in a few domains coincides with the type system.
[15:03:57] <maerwald> So not only is "simplicity" underspecified, but so is "correctness"
[15:04:41] <maerwald> what promotes correctness is usually the compiler, not the language, or the base libraries
[15:04:41] <Hecate> maerwald: on my side, I'd say that the expressivity of Haskell and some of its type-level feature enable you to achieve more correctness when representing a business domain
[15:05:06] <Hecate> for example, the ability to have Word16 for port numbers instead of Integer
[15:05:06] <Hecate> :)
[15:05:20] <Franciman> Hecate: maybe you can subsume your no, yes answer by talking about correctness with respect to a model
[15:05:28] <maerwald> Hecate: expressivity introduces complexity, too
[15:05:43] <Franciman> now if the model is to be accurate of reality, then it is going to probably be very wild and hard
[15:06:02] <Hecate> Franciman: ah well, the best questions attract the best answers, and general questions usually attract "it depends" as an answer :)
[15:06:04] <maerwald> so the most correct way to build something is usually not a turing complete language
[15:06:11] <maerwald> but the *most* restrictive way
[15:06:17] <Hecate> maerwald: everything introduces complexity, see https://ferd.ca/complexity-has-to-live-somewhere.html
[15:06:32] <Hecate> I don't think this is a valid deterrent :p 
[15:06:52] <maerwald> the more you constrain expressivity, the less ways of expressing the wrong thing you have
[15:07:15] <Hecate> but then you deport complexity elsewhere, downstream
[15:07:19] <maerwald> but that means you want your primitives to express something meaningful, but not have many of those primitives
[15:07:31] <maerwald> so you could say horizontal vs vertical complexity
[15:07:37] <c_wraith> the solution must be as complex as the problem, yes. But that puts a lower bound on complexity that little software approaches.
[15:07:48] <Hecate> that's why I don't like the argument of building "simple", "minimal" language. It just means a tonne of boilerplate downstream while the compiler authors are wanking over their LoC count
[15:07:59] <c_wraith> Most software has a lot of complexity it doesn't need to
[15:08:36] *** Joins: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net)
[15:08:50] <maerwald> There are only two ways to build correct systems: 1. DSL that carry proofs, 2. everything else with manual proofs
[15:09:05] <maerwald> both things exist
[15:09:27] <maerwald> and Haskell is only used in the first and to a lesser degree
[15:10:54] <Hecate> yeah I'm not saying Haskell produces correct programs by construction
[15:11:01] <Hecate> it's not a prover
[15:11:03] <Hecate> but it help
[15:11:04] *** Joins: yauhsien (~Yau-Hsien@61-231-43-120.dynamic-ip.hinet.net)
[15:11:05] <Hecate> *helps
[15:11:09] <kuribas> maerwald: correctness automatically implies less "wiggle room".
[15:11:19] <kuribas> I guess that's why a lot of people don't like it.
[15:11:55] <maerwald> Hecate: depends on the domain
[15:12:04] <kuribas> It gives you the feeling you have less flexibility.
[15:12:14] <kuribas> But I think the flexibility is just different, not less.
[15:12:21] <maerwald> I have more confidence in rust, when doing low-level stuff with posix APIs
[15:12:54] <maerwald> but rust is so verbose, my fingers hurt afterwards
[15:14:12] *** Quits: vglfr (~vglfr@88.155.96.35) (Ping timeout: 272 seconds)
[15:14:18] <maerwald> Haskell is just more pleasure to code
[15:14:18] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[15:14:28] <maerwald> and pleasure is more important than correctness to me
[15:14:52] <maerwald> pleasure also affects productivity
[15:15:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[15:15:48] <tomsmeding> maerwald: s/correctness/proven correctness/ ?
[15:17:14] <maerwald> tomsmeding: hmm... 
[15:17:22] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[15:17:39] <maerwald> I mean, typescripts type system isn't really *correct*, yet it's pleasure (unless you hit those few corner cases)
[15:19:10] *** Quits: glguy (x@libera/staff/glguy) (Read error: Connection reset by peer)
[15:19:13] <maerwald> I rarely need proven correctness
[15:19:29] *** Joins: glguy (x@libera/staff/glguy)
[15:20:31] <tomsmeding> isn't typescript's type system more like "as long as you don't do x,y,z dumb thing, it's type-safe"?
[15:20:35] <maerwald> yeah
[15:20:47] <maerwald> which is fine most of the time
[15:20:48] <tomsmeding> it's a partial correctness proof then
[15:20:50] <tomsmeding> yeah
[15:21:17] <tomsmeding> as long as you don't use unsafeCoerce and friends, Haskell is also pretty strong
[15:21:58] <tomsmeding> the existence of ways to still make bugs doesn't make measures to prevent lots of bugs bad
[15:22:42] <maerwald> I'm not satisfied with IO stuff in Haskell. It's either naive (most of base), has odd custom abstractions (process package) or incomplete bindings (unix package)
[15:23:20] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:24:14] <maerwald> other languages have more thoughtful stdlibs
[15:24:49] <maerwald> that's the "correctness" I care about
[15:25:19] <tomsmeding> because your non-IO code is clear enough that you don't need any extra assurance?
[15:25:35] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[15:27:59] <maerwald> IO is the hardest
[15:28:06] <tomsmeding> in your application domain
[15:28:21] <maerwald> I've not yet seen a domain where it isn't
[15:28:26] <tomsmeding> compilers?
[15:28:33] <tomsmeding> I know, unimaginative example
[15:29:02] <tomsmeding> a compiler doesn't do a lot of interesting IO, barring TH handling in GHC I guess
[15:29:47] <maerwald> tomsmeding: What happens when you compile a file?
[15:30:07] <tomsmeding> you read the file, read some more files, and write an output file
[15:30:08] <maerwald> first you read it, then you produce artifacts, what if you ctrl+c during that... will the object file be deleted?
[15:30:10] <maerwald> etc. etc.
[15:30:24] <maerwald> you see this happening with cabal breaking it's dist-newstyle/ dir
[15:30:42] <tomsmeding> true, there is more stuff than a simple programmer would see at first glance
[15:31:00] <tomsmeding> but I think it's less complex than ghc's simplification engine
[15:31:40] <tomsmeding> and producing broken compilation artifacts if someone ^C's the compilation is annoying, but not as destructive as quiet miscompilation
[15:35:23] <tomsmeding> (but of course, I'm biased)
[15:35:57] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[15:36:23] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[15:36:23] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[15:36:23] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[15:37:48] *** Quits: int-e (~noone@int-e.eu) (Remote host closed the connection)
[15:38:28] <maerwald> the RTS is all IO, allocation, primops, ...
[15:39:15] *** Joins: int-e (~noone@int-e.eu)
[15:43:15] <tomsmeding> also true, so there's both
[15:43:20] *** Quits: jinsun__ (~jinsun@user/jinsun) (Ping timeout: 272 seconds)
[15:43:49] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[15:43:59] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[15:46:00] <maerwald> another example... if you look at the ouroboros consensus protocol of cardano, it's all very heavy type level Haskell code. But what's really difficult is that all this blockchain foo is distributed IO actions
[15:46:27] <maerwald> and very few people can reason about it
[15:51:21] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[15:51:35] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[15:53:03] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[15:55:53] *** Quits: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) (Ping timeout: 256 seconds)
[15:55:54] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[15:57:12] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[15:57:29] *** Joins: agumonkey (~user@88.163.231.79)
[15:57:35] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[16:03:00] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:03:59] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[16:04:40] *** Joins: thevishy (~Nishant@49.37.242.151)
[16:08:34] *** Joins: anon04088520 (~anon04088@host-92-19-98-150.as13285.net)
[16:15:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[16:17:58] *** Joins: bahamas (~lucian@84.232.140.52)
[16:19:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Ping timeout: 240 seconds)
[16:20:00] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:20:20] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[16:22:36] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:25:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:26:27] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[16:29:23] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[16:29:28] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[16:29:45] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[16:32:25] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:112d:add3:9747:500f)
[16:35:25] *** Parts: anon04088520 (~anon04088@host-92-19-98-150.as13285.net) ()
[16:35:59] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:39:13] <ProfSimm> FP is flawed because immutability of a piece of state or code is an assumption that's always wrong in the long term. 
[16:40:20] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[16:42:11] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:44:00] <hpc> that's like saying types are flawed because in the long term everything's a string
[16:44:49] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[16:44:54] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[16:45:16] *** Joins: jinsun (~jinsun@user/jinsun)
[16:45:28] <ProfSimm> hpc: yes. Except I wouldn't say string.
[16:45:47] <ProfSimm> hpc: in the long term everything's an actor.
[16:46:23] <hpc> and all the world's a staging environment? :D
[16:47:48] <maerwald> everything's an actor suspiciously sounds like Java
[16:48:12] <hpc> actors are more a smalltalk thing
[16:48:18] <hpc> in java everything's a bean
[16:48:23] <hpc> and in erlang everything's a process
[16:49:34] *** Quits: gnyeki (~gnyeki@user/gnyeki) (Quit: leaving)
[16:50:28] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[16:50:42] <ProfSimm> hpc: I'd say Erlang's the most apt implementation of actors we have so far.
[16:50:50] <ProfSimm> Process = actor.
[16:51:05] <hpc> probably yeah
[16:51:16] <ProfSimm> That said Erlang processes are internally functional
[16:51:28] <ProfSimm> But they're small so it's kinda manageable
[16:52:44] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[16:52:59] <ProfSimm> Something I don't understand
[16:53:09] <ProfSimm> Functional programming often uses CSP in compilers
[16:53:18] <ProfSimm> But how does functional reduction work in CPS
[16:53:23] <ProfSimm> CPS sorry not CSP
[16:53:42] <ProfSimm> If CPS is all about calling things, what are we "reducing"
[16:54:44] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e)
[16:56:50] <kuribas> ProfSimm: you change the state, but don't mutate it.
[16:57:06] <kuribas> ProfSimm: you just update it.
[16:57:15] <kuribas> ProfSimm: it's the same result, but without mutation.
[17:01:26] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[17:04:01] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[17:05:47] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 252 seconds)
[17:05:56] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[17:06:16] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[17:07:34] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 272 seconds)
[17:07:45] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:6da2:b132:dfcb:fb0e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:08:11] <ProfSimm> kuribas: change and mutate mean the same thing
[17:08:35] *** Joins: Pickchea (~private@user/pickchea)
[17:11:18] <kuribas> ProfSimm: change by replacing it.
[17:11:31] <kuribas> Using a state monad or IORef.
[17:11:36] <kuribas> But you don't mutate the contents.
[17:11:52] <kuribas> It actually make concurrency much easier.
[17:12:43] *** Quits: acidjnk (~acidjnk@p200300d0c7049f27690562e0ba62f824.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:12:59] *** Joins: jespada (~jespada@148.252.132.235)
[17:14:50] <ProfSimm> kuribas: replacing it implies you're taking something from a place, and putting something else in its place
[17:14:54] <ProfSimm> kuribas: you mutated the place
[17:15:34] <kuribas> For IORef yes.
[17:15:38] <kuribas> For State, no.
[17:15:54] <kuribas> The effect is the same though.
[17:16:31] <kuribas> Especially in a concurrent setting, not mutating the content is an important distinction.
[17:17:05] <ProfSimm> kuribas: creating a copy with a change is not the same as changing.
[17:17:23] <ProfSimm> kuribas: also in concurrent setting you can still mutate, just use linear types
[17:17:39] <kuribas> linear types are overrated.
[17:17:41] <ProfSimm> kuribas: the abstractions Haskell provides is a bit like a way to avoid implementing linear types
[17:18:01] <kuribas> at least when I tried them in idris.
[17:18:40] <ProfSimm> kuribas: are they. a linear typeis mutable. If you have a continuous block of memory of 2MB and you want one byte changed in it, you just change it. How you do that in Haskell
[17:19:05] <kuribas> you don't.
[17:19:10] <ProfSimm> Great
[17:19:29] <ProfSimm> Well in that case linear types are not overrated :)
[17:19:42] <kuribas> Or use a vector with ST.
[17:19:51] <kuribas> Or whatever suits the problem.
[17:19:54] <ProfSimm> Doesn't match the requirements
[17:20:06] <ProfSimm> Rust uses linear types, and it's both concurrently safe, and can write kernel code.
[17:20:11] <kuribas> I don't know your requirements.
[17:20:25] <ProfSimm> kuribas: well it was: block of 2MB memory, change a byte
[17:20:35] <kuribas> I know that on a SSD, changing one byte will copy 4MBs of data.
[17:20:53] <ProfSimm> I think you mean 4k
[17:20:55] <kuribas> ProfSimm: that's an impementation detail, not a requirement.
[17:21:00] <merijn> I mean, you just use "Ptr Word8" and IO
[17:21:02] <ProfSimm> That's because storage devices are block devices
[17:21:05] <kuribas> right, 4k.
[17:21:41] <merijn> ProfSimm: I mean, you can literally just use the same approach as C and allocate a pointer to 2MB of bytes and update any arbitrary byte
[17:21:45] <kuribas> ProfSimm: change one byte in 2MB of memory is not a requirement, it's one possible solution for some problems.
[17:21:54] <ProfSimm> kuribas: however SSD doesn't map its contents linearly, it's about locality
[17:22:29] <kuribas> So first, I'd like to know what problem you need to solve.  And as merijn says, if needed you can just use IO.
[17:22:33] <ProfSimm> kuribas: the problem is locality in general
[17:23:01] <ProfSimm> Replacing Earth when you have to turn on the light is not pragmatic. Even if you reuse most parts
[17:23:33] <kuribas> I'd say, the problem in general if making programs which are easy to reason about, easy to maintain, etc...
[17:24:02] <ProfSimm> Working with Lenses is not easy to reason about. 
[17:24:05] <kuribas> So if you need to optimize for performance, I'd first look for architectural and algorithmic changes.
[17:24:36] <kuribas> Optimizing cache locality is onely a late change.
[17:25:09] <kuribas> However, speaking generally.  For some problems (matrix operations, linear algebra) it could be important.
[17:25:25] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 256 seconds)
[17:26:57] <kuribas> ProfSimm: I'd go for immutability by default, only if it is really not possible, use mutation.
[17:27:07] *** Quits: xff0x (~xff0x@dslb-094-222-029-254.094.222.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[17:27:47] <kuribas> Just responding to your "FP is flawed" argument, I don't mean immutable works for every problem.
[17:27:54] <ProfSimm> kuribas: sure
[17:28:08] <kuribas> But often we make immutable abstractions which actually mutate "under the hood", like bytestrings.
[17:28:13] <kuribas> or bytestring builders.
[17:28:30] <kuribas> You use them as if they are immutable, but under the hood they just fill buffers mutably.
[17:28:33] <ProfSimm> kuribas: I think immutability is a "local assumption" that's wrong in a wider scale. So a language should basically allow this recursive approach to immutability.
[17:29:28] <ProfSimm> kuribas: i.e. "in this moment right now, x y z are immutable" then you get out of this context, they're linear and mutable, but a b c are immutable. You get out in a wider context, a b c are linear and mutable.
[17:29:36] <ProfSimm> kuribas: so you can kinda work at the right level
[17:30:18] <ProfSimm> Haskell implements half of that
[17:30:29] <ProfSimm> Hides the other half in the runtime, and IO and what not
[17:30:40] <ProfSimm> If it make it explicit, I think it'd be even more powerful
[17:31:39] <kuribas> I don't know, I have yet to see the advantage of linear types.  But I heared they work well in rust, which is on my list of languages to learn :)
[17:31:56] <kuribas> I guess affine types they are called?
[17:32:56] *** Joins: off^ (~off@50.232.121.75)
[17:32:58] <kuribas> however rust is not haskell, haskell is not rust
[17:33:10] *** Joins: kadoban (~kadoban@user/kadoban)
[17:33:20] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[17:33:28] <ProfSimm> kuribas: yes affine means used at most once, linear exactly once. But it's the same idea.
[17:33:54] <ProfSimm> kuribas: in Rust you can make a single mutable borrow, OR multiple immutable borrows. The latter half is kinda like Haskell
[17:33:59] *** Joins: ystael (~ystael@user/ystael)
[17:34:14] <ProfSimm> kuribas:  but if you get back your immutable borrows, now you can mutate the thing, before you reshare it immutably. 
[17:34:22] <ProfSimm> kuribas: it's kinda like State/IO if you squint
[17:34:25] <kuribas> right
[17:34:26] <ProfSimm> But made explicit
[17:37:21] *** Joins: neurocyte0917090 (~neurocyte@IP-045014190241.dynamic.medianet-world.de)
[17:37:22] *** Quits: neurocyte0917090 (~neurocyte@IP-045014190241.dynamic.medianet-world.de) (Changing host)
[17:37:22] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[17:37:58] *** Quits: worldhelloworld (~c1utt4r@vmi275462.contaboserver.net) (Ping timeout: 272 seconds)
[17:39:15] *** Joins: xff0x (~xff0x@dslb-094-222-029-254.094.222.pools.vodafone-ip.de)
[17:41:31] <ProfSimm> kuribas: rust is not haskell, and rust does a lot of things i wish Haskell doesn't, but I feel there's core idea that could scale from the kernel to math proofs to scripting. If we get it right, we won't need 1000 languages
[17:42:41] *** Joins: bahamas (~lucian@84.232.140.52)
[17:43:24] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[17:45:12] *** Joins: jespada (~jespada@148.252.132.235)
[17:47:17] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[17:48:17] <geekosaur> uh
[17:48:40] <geekosaur> ob https://xkcd.com/927/
[17:49:54] <maerwald> that's the most prominent fallacy of programmers talking about programming languages... they only talk about technical properties
[17:50:28] <geekosaur> and in any case different languages often make meeting specific requirements easier while making others harder. for example, Ive worked with real time control languages, they workvery wellfor that but areless than idea for generalcomputation
[17:51:10] <geekosaur> something like matlab or octave is very good for matrix related math but lousy for anything else
[17:51:31] <geekosaur> similarly r/s and plotting/charts/data relationships
[17:52:18] <geekosaur> sql's a great database access language but worthless for anything else; conversely anything other than just packaging up an sql query to access a databaseis painful in other languages
[17:53:04] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[17:53:29] <maerwald> it's like saying english is the best language, because it has the most words
[17:54:23] <geekosaur> pl/I tried to be a do-everything language. it was less than successful
[17:54:27] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[17:55:42] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[17:56:57] <kuribas> geekosaur: well, hasure thinks SQL is great for graphql APIs
[17:57:44] <maerwald> I think we should accept that even programming languages have cultural context and that personal preferences of ergonomics and pleasure may be far more important than technical properties
[17:57:52] <geekosaur> ^
[17:58:17] <geekosaur> and corporate preferences and contexts
[17:58:58] <ProfSimm> maerwald: I'd be fine if English became the only language
[17:59:08] <ProfSimm> maerwald: in fact, I strongly would prefer it
[17:59:24] <geekosaur> lotsof others would disagree
[17:59:30] <ProfSimm> They're wrong.
[18:00:29] <ProfSimm> geekosaur: a good language would permit DSLs for specific purposes.
[18:00:45] <kuribas> ProfSimm: Ik geef de voorkeur aan nederlands :)
[18:01:10] <ProfSimm> geekosaur: imagine the world if you could only write libraries in C, because only C supports the C ABI
[18:01:15] <geekosaur> that was PL/I-think
[18:01:17] <geekosaur> it failed
[18:01:37] <geekosaur> hey, that was largely true for a couple decades
[18:01:47] *** Quits: off^ (~off@50.232.121.75) (Remote host closed the connection)
[18:02:01] <ProfSimm> geekosaur: so we're happy now when many languages use the same ABI right
[18:02:20] <ProfSimm> geekosaur: I wanna move the bar up. Everyone uses the same basic language, and everything is a DSL in it
[18:02:28] <geekosaur> because of the historical accident that C compilers were for a while moe readily available to programmers than expensive then-"mainstream" languages
[18:02:49] <geekosaur> again, that was PL/I-think
[18:03:28] <geekosaur> you end up with a huge ungainly language that's nearly impossible to compile and get reasonable performance out of
[18:03:41] <geekosaur> (this might even sound familiar to some people…)
[18:04:25] *** Joins: kongsheng (~kongsheng@71.28.228.142)
[18:06:12] <kongsheng> Hello. I have a mathematical model which consists of a semigroup (or magma). It's a set with a binary operation defined by a table. What kind of background reading do I need to code this in haskell? I know absolutely nothing about programming computers.
[18:06:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:7f03:8b0:a81c:56d7) (Ping timeout: 240 seconds)
[18:06:43] *** Joins: jinsun__ (~jinsun@user/jinsun)
[18:07:06] <romesrf> how can I ask for a function type here?
[18:09:24] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 240 seconds)
[18:12:13] <romesrf> auto reply: geekosaur answered elsewhere, it's just :t
[18:12:15] <romesrf> :t id
[18:12:16] <lambdabot> a -> a
[18:14:08] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[18:17:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[18:17:30] *** Joins: jespada (~jespada@148.252.132.235)
[18:21:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Ping timeout: 240 seconds)
[18:22:44] *** Joins: bahamas (~lucian@84.232.140.52)
[18:24:25] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (Remote host closed the connection)
[18:27:00] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[18:30:20] <siers> what are some cool uses of bijections/invertible functions? I suppose you could compose a bunch of them together to achieve something quite magical
[18:32:30] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:33:02] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[18:33:07] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[18:33:48] *** Quits: ishutin (~ishutin@87-97-30-219.pool.digikabel.hu) (Ping timeout: 252 seconds)
[18:34:03] <siers> % :t (1, "x", [()]) -- I think this should work, romesrf 
[18:34:03] <yahb> siers: Num a => (a, String, [()])
[18:34:44] <siers> if you meant in IRC, specifically
[18:35:27] *** Joins: ishutin (~ishutin@87-97-82-131.pool.digikabel.hu)
[18:35:54] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[18:37:24] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[18:37:42] <kuribas> kongsheng: the interesting question is, what do you want to do with it?
[18:37:57] <kuribas> why do you want to code it?
[18:39:19] <kuribas> haskell has a Semigroup typeclass
[18:40:38] <kongsheng> kuribas: I want to start with a set {x,y} as well as a binary operation that is defined by a table. The binary operation is not associative by nature. I want to code it because the semigroup represents a thing in the real world, and I need a framework for testing whether the abstract mathematics works physically.
[18:41:41] <kuribas> isn't a semigroup supposed to be associative?
[18:42:30] <kongsheng> OH! Sorry! I am actually starting with something called a Magma instead of a semigroup.
[18:42:39] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:42:41] <kongsheng> Dang.
[18:42:47] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[18:44:00] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[18:47:30] <kongsheng> Basically, what I want to do is start with a set {x,y} and this binary operation. I need an operator * to represent the binary operation. So I can symbolically do things like x*y*x*x etc. I am building a second function which depends on the first. The third function depends on the first two. The operators are ~ and +. So then I can build
[18:47:31] <kongsheng> expressions like x*y + ~x*y + ~x*~y. Given one of these expressions. I want to instantiate an object where the set {x,y} has been made more concrete with {0,1}. Then I need to build expressions i.e. ~(x*y + ~x*~*y) but have an option to evaluate them with the instantiated, concrete set.
[18:48:50] <kongsheng> But the problem is that I know nothing about haskell or programming, and my initial set with binary operation is non-associative.
[18:48:51] <sclv> so a magma has no laws to verify
[18:49:25] <kongsheng> The only law is that the operation remained closed, I think. That must be checked.
[18:49:26] <sclv> the rest is straightforward if you know haskell, but i don't think its something that you can learn how to do if you don't really learn the language first
[18:49:44] *** Quits: nisstyre (~wes@user/nisstyre) (Quit: WeeChat 3.2.1)
[18:50:11] <sclv> if you encode your magma as a datatype (rather than just associating it to some subset of the naturals) then it will be definitionally closed
[18:50:32] <sclv> and even otherwise, its easy enough to read off by hand from the "multiplication table" if it is
[18:50:43] <kongsheng> Cool. I can probably do it in Mathematica but I don't have the money and would rather keep this study as Haskell as possible since it has theoretical underpinnings to Computer Science.
[18:51:36] <siers> sclv, what do you mean by "associating it to some subset of the naturals"?
[18:51:51] <kongsheng> Yea I see what  you mean. I kind of want to build a skeleton Magma and then build a particular Magma with my binary operation and set.
[18:52:00] <kongsheng> But hey thanks for giving me some ideas.
[18:52:19] <sclv> so the most straightforward thing in haskell is to not do that, but to define a specific datatype for each particular magma
[18:52:28] <sclv> or semigroup, or monoid
[18:52:33] <sclv> and again -- doing it for a magma seems pointless
[18:52:34] <siers> Wouldn't a typeclass for the magma be appropriate? I assume not, otherwise you (sclv) would've suggested it.
[18:52:56] <kongsheng> Ok. So use datatype logic instead of Object Oriented logic?
[18:53:21] <sclv> then, as siers suggested, you can make that datatype an instance of the appropriate typeclass
[18:53:51] <sclv> then you auto-derive some insteances and can use something like https://hackage.haskell.org/package/quickcheck-classes-0.6.5.0/docs/Test-QuickCheck-Classes.html to generate and run testcases for the properties you want
[18:54:06] <kongsheng> Hmm, maybe I don't need a skeleton framework at all, since like you said, all I have to do is check closure by the mult table.
[18:54:17] <sclv> but again, doing things this way requires knowing some haskell, otherwise you will get confused very quickly
[18:54:51] <kongsheng> Cool. I will do some reading and some more headwork.
[18:56:30] <kongsheng> The mathematics is more primitive than Boolean algebra and Logic, but my research group is trying to find out if we can start with this particular Magma and reach a turing complete device.
[18:56:47] <sclv> this isn't working with a general AST of your expressions btw, just letting you evaluate them directly
[18:57:46] <sclv> if you want to build an expression syntax tree to programmatically manipulate them, then you can do that too. there are lots of examples of this. the first i found on a google (idk if its good or not, just the first i found on a google) is something like https://john.cs.olemiss.edu/~hcc/csci450/ELIFP/Ch42/42_Abstract_Syntax.html
[18:58:02] <shapr> > let ones = 1 : ones in take 5 ones
[18:58:03] <lambdabot>  [1,1,1,1,1]
[18:58:05] <kongsheng> ok thank you. I am writing all this down by the way.
[19:01:06] <kuribas> kongsheng: you can try macsyma, which is a free mathematica alternative.
[19:01:29] <kuribas> kongsheng: if you want to prove mathematical things, a dependently typed language could be better, like agda or idris.
[19:02:17] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:112d:add3:9747:500f) (Ping timeout: 240 seconds)
[19:03:28] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[19:03:58] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[19:04:25] *** Joins: bahamas (~lucian@84.232.140.52)
[19:05:17] *** Joins: jz99_ (~jz99@pa49-186-65-17.pa.vic.optusnet.com.au)
[19:05:18] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:05:42] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:8c26:e871:cea5:bbc0)
[19:06:40] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[19:06:47] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 252 seconds)
[19:07:09] *** Quits: jz99_ (~jz99@pa49-186-65-17.pa.vic.optusnet.com.au) (Remote host closed the connection)
[19:07:42] <sclv> if they don't even know haskell yet, sending them down the road to a dependently typed language is Not Good Advice
[19:07:53] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[19:08:18] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:08:31] <kuribas> sclv: why not?  There is a lot of DT teaching material which is self contained.
[19:08:44] <kuribas> Do DT languages assume haskell knowledge?
[19:08:47] <sclv> i won't argue. i'll just say that it requires a lot more ramp up
[19:08:57] <sclv> this person said they had virtually no programming background full stop
[19:09:17] <sclv> and they were looking to do computational checks not proofs
[19:09:32] <kuribas> I don't disagree, but I thought that idris or agda are more mathy...
[19:10:28] <sclv> they're suited for being proof assistants. doing symbolic computation and generated verification is very much in the haskell wheelhouse
[19:10:42] <sclv> not all maths is formal theorem proving!!!
[19:11:23] <juri_> not all math is formal theorem proving.. yet.
[19:11:39] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[19:11:58] <siers> what kind of symbolic computation is haskell good at? how does that work even
[19:12:04] <siers> or what is meant by that
[19:12:41] <geekosaur> > foldr (*) z [a,b,c] -- looks symbolic to me :þ
[19:12:42] <lambdabot>  a * (b * (c * z))
[19:12:46] <sclv> i mean that haskell is an excellent language for creating and manipulating ASTs -- what is commonly known as "computer algebra"
[19:14:57] <siers> geekosaur, hm
[19:15:06] <kuribas> surprising no CAS are written in haskell.
[19:15:41] <geekosaur> @hackage simple-reflect -- siers
[19:15:41] <lambdabot> https://hackage.haskell.org/package/simple-reflect -- siers
[19:16:12] <siers> nice
[19:16:24] <kuribas> that cannot even rewrite or simplify expressions.
[19:17:12] <geekosaur> true, but it shows the possibilities. and I'd suspect something more capable could be written. I have no idea why it hasn't yet, unlessit's just that it already exists elsewhere
[19:17:17] <siers> how was 1+2*(3+4) captured?
[19:17:28] <siers> yeah, the examples within illustrate what was meant by symbolic computation
[19:18:00] <polyphem> geekosaur: is that term rewriting (foldr example)  possible also in ghci or is it a lambdabot feature ?
[19:18:17] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[19:18:23] <kuribas> polyphem: it's just a library
[19:18:31] <geekosaur> see the hackage library I pointed to
[19:18:45] <geekosaur> \you could install it, import Debug.SimpleReflect into ghci, and go nuts
[19:19:02] <geekosaur> you do need to use a few tricks to keep it from getting confused though
[19:19:16] <geekosaur> > foldr (*) (0::Expr) [a,b,c,d]
[19:19:17] <lambdabot>  a * (b * (c * (d * 0)))
[19:19:29] <siers> what's Expr?
[19:19:31] <geekosaur> well I should have used 1 but then (*) is a placeholder
[19:19:35] <geekosaur> it just looks nicer infix
[19:19:40] <siers> ah, just some data type that implements Num?
[19:19:48] <geekosaur> Expr is the type simple-reflect uses internally to do this
[19:19:59] <geekosaur> it implenments Num and a number of other typeclasses
[19:20:01] <siers> how does it load 0 into Expr?
[19:20:14] <siers> by some function by implementing Num?
[19:20:23] <geekosaur> that just means it has a Num instance, so fromInteger works
[19:20:31] <polyphem> how does it not freak out , with all those free (undefined) variables
[19:20:46] <siers> that's probably lambdabot magic
[19:20:47] <polyphem> s/variables/bindings/ :)
[19:21:00] <geekosaur> (remember that any literal number has `fromInteger` or `fromRational` wrapped around it automatically to allow it to be any Num or Fractional instance as appropriate
[19:21:11] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[19:21:19] <geekosaur> there's no lambdabot magic there, just the Expr type
[19:21:43] <geekosaur> and the library binding all the single letter names to Expr or related types
[19:21:46] <geekosaur> :t a
[19:21:47] <lambdabot> Expr
[19:21:47] <siers> geekosaur, I knew what implementing Num means :P but right, obviously it's fromInteger
[19:21:50] <geekosaur> :t f
[19:21:50] <lambdabot> FromExpr a => a
[19:21:52] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:22:00] <siers> I just thought there's more to it, but no
[19:22:16] <geekosaur> nothing else to it, just abusing Num a lot :)
[19:23:27] <geekosaur> and Show instances
[19:25:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e5ea:1ffe:3a64:8fa7)
[19:25:09] <polyphem> i see , thanks
[19:26:41] <siers> I read TAPL a bit and I remember seeing the semantical rules to compute a value from a term... kind of eye opening to see them written out
[19:27:07] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[19:30:29] <siers> and those rules immediately spring into mind upon seeing the reduction example in simple-reflect
[19:30:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e5ea:1ffe:3a64:8fa7) (Ping timeout: 250 seconds)
[19:31:05] *** Joins: nisstyre (wes@user/nisstyre)
[19:37:00] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 240 seconds)
[19:40:12] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[19:42:39] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:44:43] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:45:45] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[19:45:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:46:57] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:47:06] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:3240:c699:b7eb:e5b0) (Quit: WeeChat 2.8)
[19:47:12] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[19:50:36] <briandaed> quick question regarding Hackage/Stackage, I see that all LTSes from 16.31 to 18.27 use network-3.1.1.1 which is deprecated - why?
[19:51:33] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:51:38] *** Quits: worldhelloworld1 (uid543174@id-543174.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:52:39] <merijn> Presumably because not everything in the snapshots was updated to work with newer versions of network yet?
[19:54:53] <briandaed> ok, sounds reasonably
[19:56:19] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:56:43] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 256 seconds)
[19:57:26] <geekosaur> I don't think they update snapshots actually, they just release new ones
[19:58:42] <jneira[m]> iirc it was deprecated due to a bug affecting cabal and msys with a relatively new version of autoconf
[19:59:06] <jneira[m]> they released a patched version 3.1.1.2 and deprecated .1
[19:59:38] <jneira[m]> but it is not affecting stack it seems so 🤷
[20:00:09] <jneira[m]> but I guess the lts would work with 3.1.1.2
[20:01:14] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[20:01:18] <geekosaur> stack controls its version of msys so presumably can avoid the issue
[20:02:17] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[20:02:19] <briandaed> next is 3.1.2.0 and looks a lot happened there https://hackage.haskell.org/package/network-3.1.2.0/changelog
[20:02:51] *** Quits: incertia (~incertia@207.98.163.88) (Quit: ZNC 1.7.5 - https://znc.in)
[20:03:49] <geekosaur> and immutability of LTSes is important for reproducible builds, which is one of stack's "selling points"
[20:04:17] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[20:05:00] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:05:14] <geekosaur> (to be clear the scare quotes are only because you're "selling" something that's for free, not because I'm casting aspersions on it)
[20:05:23] <briandaed> again sounds reasonably, but if there is a bug in compiler or library, the only way to fix it is to use newer LTS or use some hacked version provieded in extra-deps...
[20:05:52] <kuribas> couldn't you implement unlift EitherT using exceptions?
[20:06:12] *** Joins: incertia (~incertia@207.98.163.88)
[20:06:25] <geekosaur> true, but they do a lot of testing to avoid that. at some point it may let something slipthrough though, in which case they may need a way to deprecate resolvers
[20:06:42] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7859:22cf:713c:fe6e)
[20:07:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:09:28] <briandaed> then I'm cursed, one week and I encountered https://github.com/haskell-crypto/cryptonite/issues/329 and then https://github.com/haskell/network/issues/438 , LTS-16.31, pity there is no summary which LTSes are used most frequently by commercial projects, similarly to some android version - market share stats
[20:17:05] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[20:17:14] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[20:18:08] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Quit: The Lounge - https://thelounge.chat)
[20:18:09] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:7859:22cf:713c:fe6e)
[20:18:47] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[20:18:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[20:20:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[20:20:46] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7859:22cf:713c:fe6e) (Ping timeout: 245 seconds)
[20:21:27] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[20:21:30] *** Quits: Cheery (~cheery@7-239-179-185.static.tentacle.fi) (Ping timeout: 250 seconds)
[20:21:40] *** Joins: Cheery (~cheery@7-239-179-185.static.tentacle.fi)
[20:22:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:22:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Remote host closed the connection)
[20:22:36] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Client Quit)
[20:22:46] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:23:43] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[20:25:22] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[20:26:00] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[20:26:17] *** Joins: raym (~raym@user/raym)
[20:26:37] *** Quits: jinsun__ (~jinsun@user/jinsun) (Ping timeout: 240 seconds)
[20:27:44] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:31:40] *** Quits: nisstyre (wes@user/nisstyre) (Quit: WeeChat 3.4)
[20:31:41] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:598a:8b0b:9405:6e26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:32:01] *** Joins: nisstyre (wes@user/nisstyre)
[20:35:14] *** Joins: agumonkey (~user@2a01:e0a:8f9:d3e0:b117:81a8:33f6:93e7)
[20:35:54] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 252 seconds)
[20:35:56] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:36:08] *** Quits: ishutin (~ishutin@87-97-82-131.pool.digikabel.hu) (Ping timeout: 256 seconds)
[20:36:27] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[20:37:57] *** Joins: ishutin (~ishutin@84-236-21-25.pool.digikabel.hu)
[20:38:55] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[20:39:05] *** Joins: mmhat (~mmh@55d49be1.access.ecotel.net)
[20:42:18] *** Joins: toulene_ (~toulene@user/toulene)
[20:43:55] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:44:48] *** Quits: toulene_ (~toulene@user/toulene) (Remote host closed the connection)
[20:45:32] *** Joins: jinsun (~jinsun@user/jinsun)
[20:46:45] *** Quits: Arsen (arsen@managarm/dev/Arsen) (Quit: Quit.)
[20:47:24] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[20:49:04] *** Quits: ccntrq (~Thunderbi@2a01:c22:9102:c100:80c3:8f62:e3ae:6455) (Remote host closed the connection)
[20:51:05] *** Joins: coot (~coot@213.134.190.95)
[20:52:00] *** Quits: bjobjo (~bjobjo@user/bjobjo) (Quit: leaving)
[20:57:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[20:57:52] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:58:29] *** Joins: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net)
[20:58:36] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[21:00:55] <maerwald> don't use cryptonite
[21:01:56] <briandaed> hard to avoid that, a lot of libraries use it already
[21:02:42] <maerwald> well, then use different libraries
[21:03:26] <maerwald> wrt the network issue, it seems no one opened a ticket on the warp issue tracker
[21:04:11] <maerwald> but yeah... just today we were talking about correctness and haskell, which is rather confusing given that so many libraries use sloppy and unverified cryptolibraries
[21:04:12] <briandaed> yeah, also checked that
[21:04:38] <maerwald> not even audited
[21:08:33] <janus> maerwald: why would someone open a ticket on the warp issue tracker? doesn't seem like it forbids 3.1.2.0? what is the issue with warp?
[21:09:01] <janus> kazu says that warp 3.3.5 has fixed the gracefulClose issue
[21:10:19] *** Joins: econo (uid147250@user/econo)
[21:10:46] <maerwald> janus: because of https://github.com/haskell/network/issues/438#issuecomment-784771757
[21:11:08] *** Joins: analognoise (~analognoi@185.229.59.233)
[21:14:58] *** Quits: jespada (~jespada@148.252.132.235) (Read error: Connection reset by peer)
[21:18:53] <Hecate> briandaed: it is indeed hard to avoid. Fortunately there are alternatives that are emerging, if you have a direct need for cryptography primitives. You can always ask questions on #haskell-cryptography about this. :)
[21:21:28] *** Joins: notzmv (~zmv@user/notzmv)
[21:22:17] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:24:13] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[21:24:25] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:598a:8b0b:9405:6e26)
[21:24:51] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[21:25:06] *** Joins: bontaq` (~user@165.1.205.23)
[21:26:01] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[21:26:35] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[21:27:36] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[21:27:48] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[21:28:02] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[21:28:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[21:29:14] <briandaed> Hecate: thx, joined
[21:30:21] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[21:30:48] *** Joins: bontaq`` (~user@ool-45779fe5.dyn.optonline.net)
[21:31:36] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[21:32:24] *** Joins: toulene (~toulene@user/toulene)
[21:32:49] *** Quits: bontaq` (~user@165.1.205.23) (Ping timeout: 256 seconds)
[21:35:38] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:37:56] *** Joins: xkuru (~xkuru@user/xkuru)
[21:39:00] *** Quits: raym (~raym@user/raym) (Remote host closed the connection)
[21:39:16] *** Quits: ishutin (~ishutin@84-236-21-25.pool.digikabel.hu) (Ping timeout: 272 seconds)
[21:40:17] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:40:26] *** Joins: ishutin (~ishutin@87-97-88-220.pool.digikabel.hu)
[21:41:00] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[21:41:18] *** Joins: unyu (~pyon@user/pyon)
[21:41:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:42:10] *** Joins: raym (~raym@user/raym)
[21:42:46] *** Quits: kongsheng (~kongsheng@71.28.228.142) (Quit: Client closed)
[21:43:12] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[21:43:34] *** Joins: kongsheng (~kongsheng@71.28.228.142)
[21:46:03] *** Joins: alp (~alp@user/alp)
[21:47:55] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:49fc:dd14:62fe:1d6f)
[21:49:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Remote host closed the connection)
[21:49:46] *** Joins: emf (~emf@2620:10d:c090:400::5:33d6)
[21:53:03] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:55:22] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[22:00:20] *** Quits: kuribas (~user@ptr-25vy0i8r77cynr1cb5v.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[22:02:01] *** Joins: bontaq``` (~user@165.1.205.23)
[22:02:50] *** Quits: bontaq`` (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[22:07:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[22:07:47] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[22:09:40] *** Quits: bontaq``` (~user@165.1.205.23) (Ping timeout: 272 seconds)
[22:11:14] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[22:16:25] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[22:16:33] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[22:16:33] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[22:16:33] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[22:16:38] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[22:27:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[22:27:42] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:30:10] *** Quits: loonycyborg (loonycybor@wesnoth/developer/loonycyborg) (Quit: ZNC - http://znc.sourceforge.net)
[22:30:26] *** Joins: loonycyborg (loonycybor@wesnoth/developer/loonycyborg)
[22:30:43] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[22:32:36] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[22:32:53] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[22:33:26] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:35:32] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[22:35:56] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:36:56] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[22:39:19] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[22:39:34] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:39:39] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c)
[22:42:30] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[22:47:45] <Unicorn_Princess> is there an easy way to get ghcup to upgrade all the things to the latest version? ghcup install ghc 9.2.2 for each is tedious
[22:48:02] *** Joins: desantra (~skykanin@user/skykanin)
[22:48:14] *** Joins: vicfred (~vicfred@user/vicfred)
[22:48:55] <geekosaur> I don't think it has an "all" option. I just use ghcup tui and hit "i" on the things I want to install
[22:50:02] <Unicorn_Princess> then i guess i will suffer
[22:50:12] *** Quits: deadmarshal_ (~deadmarsh@95.38.114.14) (Ping timeout: 272 seconds)
[22:50:25] <janus> Unicorn_Princess: what do you mean with "for each"? the ghc version is independent of the other versions
[22:50:42] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[22:50:51] <geekosaur> I presume that means ghc, cabal, stack, etc.
[22:50:56] <Unicorn_Princess> i mean ghcup handles ghc, cabal, stack, the lsp..
[22:52:41] *** Joins: coot (~coot@213.134.190.95)
[22:52:44] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 250 seconds)
[22:54:46] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:58:26] *** Joins: Akiva (~Akiva@user/Akiva)
[22:59:39] <monochrom> "ghcup install" understands the "latest" tag.
[23:00:13] <monochrom> The default is "recommended" this is why the default is not "latest".
[23:00:20] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 272 seconds)
[23:00:52] <geekosaur> for thing in ghcup ghc stack cabal; do ghcup install $thing latest; done # hls is installed with ghc
[23:02:49] <geekosaur> oh I'm wrong, so add hls to the list
[23:02:52] <geekosaur> sorry
[23:03:06] <geekosaur> wsd thinking of the hls-powered epithet
[23:03:07] <monochrom> :)
[23:04:08] *** Joins: sceptttre (~sceptttre@2603-6011-df05-84ab-dcd9-3721-0281-3545.res6.spectrum.com)
[23:04:43] *** Quits: sceptttre (~sceptttre@2603-6011-df05-84ab-dcd9-3721-0281-3545.res6.spectrum.com) (Quit: Client closed)
[23:04:47] <geekosaur> qactually I wonder if ghcup install works for itselfor if you have to use upgrade
[23:04:52] *** Joins: agumonke` (~user@88.163.231.79)
[23:05:07] <monochrom> Defaulting to "recommended" not "latest" works great for me and my students. It is the prudent thing to do and it is not tedious, my students and I do not suffer.
[23:05:22] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:d43:5e37:69e3:551c) (Remote host closed the connection)
[23:05:39] <geekosaur> in particular there is no hls yet for ghc 9.2.2
[23:05:57] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[23:05:57] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Remote host closed the connection)
[23:06:12] <geekosaur> and unless you need some new feature, 8.10.7 works fine
[23:06:17] *** Quits: agumonkey (~user@2a01:e0a:8f9:d3e0:b117:81a8:33f6:93e7) (Ping timeout: 240 seconds)
[23:07:10] <monochrom> "ghcup install ghcup" shows an error message that suggests that ghcup is confused. :)
[23:07:57] <monochrom> The error messages and warnings says something along the line of "to install ghc, say ghcup install ghc"
[23:08:27] <geekosaur> just saw that :)
[23:08:42] <monochrom> So yeah it has to be "ghcup upgrade".
[23:08:48] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[23:09:04] <geekosaur> ghcup upgrade; for thing in hls ghc stack cabal; do ghcup install $thing latest; done
[23:09:48] <monochrom> ghcup installs those who don't install themselves >:)
[23:10:11] <monochrom> (Sorry I have been hairsplitting set theory lately!)
[23:10:25] <geekosaur> hm, could use ghcup list to extract the list of things to install, but it includes ghcup…
[23:10:54] <Unicorn_Princess> ghcup tui is very pleasant, thanks geekosaur 
[23:11:31] <monochrom> It may be more robust to extract from "ghcup install --help" instead, under the "available commands" heading.
[23:12:19] <monochrom> or "ghcup list --help" and look for the "[-t|--tool <ghc|cabal|hls|stack>]"
[23:12:21] <geekosaur> but harder to sewd/awk :þ
[23:12:31] <geekosaur> *sed
[23:12:46] <monochrom> sewk and awek :)
[23:14:17] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[23:15:28] *** Quits: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com) (Remote host closed the connection)
[23:16:40] *** Quits: briandaed (~root@109.95.142.93.r.toneticgroup.pl) (Quit: leaving)
[23:17:59] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:23:52] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[23:24:39] *** Joins: worldhelloworld (~c1utt4r@164.68.96.37)
[23:25:29] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:598a:8b0b:9405:6e26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:25:37] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:26:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:27:21] <maerwald> `ghcup install ghcup` will end up trying to install a GHC with the version 'ghcup'
[23:27:34] <monochrom> Oh heh
[23:27:40] <maerwald> becaus `ghcup install <ver>` is the legacy form of installing GHC
[23:27:45] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a)
[23:27:55] <maerwald> which is kept for compatibility
[23:27:58] <geekosaur> figured it was something like that
[23:28:13] <monochrom> Yeah I forgot that the parser could be trying "since ghcup is not a 'command' it must be a 'version/tag'"
[23:28:23] *** Lord_of_Life_ is now known as Lord_of_Life
[23:28:50] <worldhelloworld> unrelated question - what free irc client is there that has a history of conversations even when you are disconnected? there is so much to learn from this group .... I tried irccloud, but that's paid ... any free versions?
[23:28:51] <monochrom> as opposed to "parse error: ghcup is not a valid command"
[23:29:37] <maerwald> much more confusing is this: `ghcup install lol-8.10.7`
[23:29:55] <monochrom> See the /topic line for a volunteer's log website.
[23:30:12] <Unicorn_Princess> worldhelloworld, what do you mean history when disconnected? like, that you can access your logs from when you were connected, even if you're not currently connected?
[23:30:15] <maerwald> it will parse 'lol' as an arch-triple, because we support compiling cross-ghc, but it's ignored for install commands
[23:30:37] <monochrom> If you really want to do your own recording, consider an "irc bouncer" so you have a background process that connects 24/7
[23:30:41] <Unicorn_Princess> or do you mean that will show you channel chat history even for times when you weren't connected?
[23:31:16] <monochrom> (and the background process also serves as a proxy for your IRC client"
[23:31:35] <worldhelloworld> Unicorn_Princess ... yes something like that - irccloud used to have a history of missed cconversations, current one i'm trying , hexchat, doesn't
[23:32:14] <Unicorn_Princess> is there any reason i shouldn't stick OverloadedRecordDot and DuplicateRecordFields in .cabal's default-extensions and pretend haskell is sane?
[23:32:27] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[23:32:43] <sclv> for a given project? no. have fun with them!
[23:32:47] <monochrom> OverloadedRecordDot is not sane.
[23:33:02] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[23:33:07] <sclv> i mean i don't like it either, but if you do, just use it freely and see how it goes
[23:33:20] <Unicorn_Princess> worldhelloworld, alas, as monochrom said, you will need something to connect to the channel in your stead and maintain a history. irc does not support offline history syncing
[23:33:53] <monochrom> IRC servers don't record for you because they don't serve ads.
[23:33:54] <Unicorn_Princess> that something is called an "irc bouncer" in the lingo
[23:34:12] <sclv> the ircbrowse link in the channel description still maintains up to date logs
[23:34:15] <monochrom> (or sell your credit card number to strangers)
[23:34:15] <Unicorn_Princess> (and that's where my knowledge ends)
[23:34:18] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:34:22] <sclv> so you can just browse those too
[23:34:23] <worldhelloworld> Hmmm yes, the logs are one way, unfortunately not very interactive
[23:34:29] <Unicorn_Princess> monochrom, what's not sane about overloadedrecorddot?
[23:35:00] <monochrom> Cargo culting C, C++, and Java syntax is not sane.
[23:35:25] <monochrom> I guess it was Algol syntax.
[23:35:56] <Unicorn_Princess> i'll leave you to your personId, cowId, catId, dogId, etcId then :P
[23:36:23] <sclv> ugh... that's terrible. Now, on the other hand, id_person, id_cow, id_cat, now that's great!
[23:36:24] <monochrom> No I'm OK with for example SML's choice which is # IIRC.
[23:36:24] <worldhelloworld> Pardon my ignorance, but what does the term "cargo culting" mean? Or is it some dismissive reference to a rusty language monochrom ?
[23:36:55] <monochrom> Blindly mimicking things.
[23:37:13] <geekosaur> see the pacific island cargo cults post-ww2
[23:37:26] <worldhelloworld> ok, thanks - googling now
[23:37:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:37:40] <geekosaur> there are IRC clients like quassel which involve a bouncer component which stays connected, but that assumes you have some way for them to stay connected
[23:37:40] <monochrom> For example "I saw other people doing pair programming, I must do the same! I don't ask why. I don't ask suitability to my context."
[23:37:53] <geekosaur> otherwise, yes, you'd have to pay to have someone stay connected for you
[23:38:25] <geekosaur> there's also matrix but I don't know if that's free either
[23:38:55] <worldhelloworld> geekosaur , so if I have a cloud machine - is it easy to stay connected and then read it on another machine? I'd imagine it sounds a bit complicated to configure
[23:39:13] <geekosaur> quassel would configure it for you
[23:39:26] <geekosaur> otherwise you'd have to set up something like znc manually
[23:39:28] <worldhelloworld> thats true monochrom - follow the herd :)
[23:39:36] *** Quits: ishutin (~ishutin@87-97-88-220.pool.digikabel.hu) (Ping timeout: 272 seconds)
[23:40:02] <worldhelloworld> ok will read if quassel fits my needs, configuring manually is a pain
[23:40:02] <sclv> i believe i first became familiar with cargo cults from the classic Niven sci fi novel Dream Park
[23:40:15] <monochrom> Unicorn_Princess, there are several sane choices.  Use . for function composition, choose some other symbol for record selection.  Or, use . for record selection, choose some other symbol for function composition.  Using the same symbol for both is the insane one.
[23:40:39] <geekosaur> dot does too many things already and it shows
[23:40:46] <monochrom> FWIW SML chooses o for function composition, # for record selection.
[23:40:51] <geekosaur> > [False..True] -- nope
[23:40:52] *** Joins: ishutin (~ishutin@84-236-40-230.pool.digikabel.hu)
[23:40:52] <lambdabot>  error:
[23:40:52] <lambdabot>      Not in scope: ‘False..’
[23:40:52] <lambdabot>      No module named ‘False’ is imported.error:
[23:41:14] <Hecate> pity not everyone has easy access to ∘ on their keyboard
[23:41:47] <monochrom> And SML was defined long before unicode existed.
[23:42:15] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[23:42:24] <ski> SML's `#foo' also nicely differentiates between the field name, and the field accessor function
[23:42:27] <Hecate> that being said I'd have also (|>) and (<|) 
[23:42:34] *** Joins: worldhelloworld2 (~quassel@vmi275462.contaboserver.net)
[23:42:38] <monochrom> But we can still debate which one is more nighmarish, "g o h" or "g `o` h" :)
[23:42:40] <Hecate> ski: don't we have that with overloaded labels nowadays?
[23:42:51] <Hecate> monochrom: the second one has a funny face though
[23:43:10] <Hecate> ( `o`) .oO(hello)
[23:45:50] *** Joins: simendsjo (~user@84.211.91.241)
[23:47:27] <monochrom> SML has the nice uniformity that tuples are records too, (x,y,z) is the record {1=x, 2=y, 3=z} using 1, 2, 3 as field names.
[23:47:50] <ski> Hecate : well, you'd need `NoFieldSelectors', too
[23:47:51] <monochrom> So #2 works for all of: (x,y), (x,y,z), (x,y,z,t), ...
[23:49:00] *** Quits: agumonke` (~user@88.163.231.79) (Remote host closed the connection)
[23:49:37] *** Joins: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net)
[23:52:46] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8) (Remote host closed the connection)
[23:52:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:8852:a14c:a420:3fd8)
[23:54:10] *** Quits: yauhsien_ (~yauhsien@61-231-43-120.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[23:54:30] *** Joins: unyu (~pyon@user/pyon)
[23:55:04] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[23:57:51] *** Joins: zincy_ (~zincy@host86-160-236-152.range86-160.btcentralplus.com)
[23:58:46] <Hecate> ski: I think NoFieldSelectors is good
