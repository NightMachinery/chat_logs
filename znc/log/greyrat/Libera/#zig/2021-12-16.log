[00:02:50] *** Quits: frmdstryr (~jrm@172.58.206.251) (Ping timeout: 268 seconds)
[00:04:40] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Quit: No Ping reply in 180 seconds.)
[00:05:12] *** Joins: damxsa (~damx@2001:16a2:ce8a:800:e3e7:2a55:7b19:ad28)
[00:05:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:06:25] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[00:12:45] *** Joins: frmdstryr (~jrm@172.58.206.251)
[00:16:43] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[00:20:40] <andrewrk> hm I had an answer for terminalpusher
[00:20:43] <andrewrk> oh well
[00:24:08] <slowjo> andrewrk you could still answer it for other lurkers like me ;)
[00:24:32] <andrewrk> an example of an interface that has comptime dispatch is Reader and Writer
[00:24:51] <andrewrk> these are nice in a way, but they also force you to use anytype parameters to accept a stream, which is a downside
[00:25:06] <andrewrk> also you can't store it in a struct field
[00:26:30] *** Quits: koakuma (~koakuma@user/koakuma) (Ping timeout: 260 seconds)
[00:27:01] <slowjo> hm
[00:27:52] <slowjo> Is it just historical that those interfaces use comptime dispatch? Or was it an active decision?
[00:29:24] <andrewrk> kind of an experiment
[00:29:51] <companion_cube> it's still time to revert it, isn't it? :)
[00:29:52] <andrewrk> for Reader/Writer, the downside of *runtime* dispatch is that the error set has to become fixed
[00:30:07] <andrewrk> https://github.com/ziglang/zig/issues/764
[00:30:30] <Arnavion> It also proliferates the type parameters. Eg if some struct wants has N fields that both have internal allocations, it would either need to have N allocator type parameters which would be a PITA to type, or enforce all fields only use one allocator which is unnecessarily limiting
[00:31:09] <Arnavion> For something as common as allocating, it makes sense to erase the type
[00:31:46] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[00:33:00] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[00:34:23] <slowjo> > fixed error set
[00:34:34] <andrewrk> e.g. for Allocator we have error{OutOfMemory}
[00:34:51] <slowjo> i don't know what i'm talking about, but couldn't the error set itself be some kind of runtime interface?
[00:35:36] <companion_cube> andrewrk: another  thing #764 makes hard is to have runtime choice of stream
[00:35:54] <companion_cube> like, choosing whether you use a GZipStream or FileStream or … depending on a CLI flag
[00:36:10] <companion_cube> (you can do an ad-hoc wrapper but that's a bit of a pity when there's an interface for it!)
[00:37:10] <companion_cube> idk what the equivalent of what rust does would be (rust has either a template approach, no dynamic dispatch; or a dynamic `&mut dyn Writer`; both use the same interface)
[00:37:45] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[00:41:09] *** Joins: koakuma (~koakuma@user/koakuma)
[00:49:12] *** Quits: damxsa (~damx@2001:16a2:ce8a:800:e3e7:2a55:7b19:ad28) (Quit: Leaving)
[00:51:33] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:52:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[01:20:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610) (Ping timeout: 260 seconds)
[01:35:11] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:36:34] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:36:46] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801)
[01:36:46] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801) (Client Quit)
[01:36:53] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 250 seconds)
[01:36:53] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:37:29] *** Joins: Arnavion (arnavion@user/arnavion)
[01:38:19] *** Quits: xackus_ (~xackus@218x.knc.pl) (Ping timeout: 256 seconds)
[01:43:37] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[01:50:37] *** Quits: yelnah (~felix@2001:44b8:3082:ad:6f0:21ff:fe3c:d4d7) (Ping timeout: 240 seconds)
[01:52:24] *** Joins: yelnah (~felix@2001:44b8:3084:172:6f0:21ff:fe3c:d4d7)
[01:53:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 260 seconds)
[01:56:17] *** Quits: noracodes (~quassel@2604:a880:2:d0::2299:a001) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:56:36] <Arnavion> There's no way I can use a std.PriorityQueue with a compareFn that requires a sort context, is there? Well, other than stuffing the context inside every T
[01:57:02] *** Joins: noracodes (~quassel@2604:a880:2:d0::2299:a001)
[02:15:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e)
[02:31:01] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[02:32:43] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[02:33:35] *** Joins: DarkPlutonium (~DarkUrani@stdrand.com)
[02:34:32] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (Ping timeout: 252 seconds)
[02:36:28] <andrewrk> Arnavion, PriorityQueue should be changed to accept a compare function that has a context parameter
[02:37:12] <Arnavion> Cool, I'll look into making that change
[02:44:24] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[02:44:45] <ISO-4683-1> Hello, so I was reading https://pithlessly.github.io/allocgate.html when I was wondering like some other redditor why Zig's allocators even need dynamic dispatch. To quote: "Why does Zig mandate dynamic dispatch for allocators anyway? What would be wrong with static dispatch, like how HashMap takes its Context? Under that system there would be no virtual method calls at all, unless you opted in to
[02:44:51] <ISO-4683-1>  them."
[02:46:06] <ISO-4683-1> Hello, so I was reading https://pithlessly.github.io/allocgate.html when I was wondering like some other redditor why Zig's allocators even need dynamic dispatch. To quote: "Why does Zig mandate dynamic dispatch for allocators anyway? What would be wrong with static dispatch, like how HashMap takes its Context? Under that system there would be no virtual method calls at all, unless you opted in to
[02:46:12] <ISO-4683-1>  them."
[02:46:15] <ISO-4683-1> Hello, so I was reading https://pithlessly.github.io/allocgate.html when I was wondering like some other redditor why Zig's allocators even need dynamic dispatch. To quote: "Why does Zig mandate dynamic dispatch for allocators anyway? What would be wrong with static dispatch, like how HashMap takes its Context? Under that system there would be no virtual method calls at all, unless you opted in to
[02:46:21] <ISO-4683-1>  them."
[02:48:39] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 252 seconds)
[02:53:49] *** Joins: scj (~scj@m83-185-33-250.cust.tele2.se)
[03:06:37] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[03:13:20] *** Joins: notzmv (~zmv@user/notzmv)
[03:18:02] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[03:18:36] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[03:30:03] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: noracodes (~quassel@2604:a880:2:d0::2299:a001) (*.net *.split)
[03:30:03] *** Quits: nvmd (~nvmd@user/nvmd) (*.net *.split)
[03:30:03] *** Quits: breavyn_ (~breavyn@user/breavyn) (*.net *.split)
[03:30:03] *** Quits: dfrey (~dfrey@172.103.152.101) (*.net *.split)
[03:30:04] *** Quits: dbuckley (~dbuckley@2601:182:c77f:c13b:ae1f:6bff:fe6c:d455) (*.net *.split)
[03:30:04] *** Quits: marcj (~marc@205.175.215.25) (*.net *.split)
[03:30:04] *** Quits: af (~af@awalgarg.me) (*.net *.split)
[03:30:04] *** Quits: rektide (~rektide@eldergods.com) (*.net *.split)
[03:30:04] *** Quits: yeti (~username@user/yeti) (*.net *.split)
[03:30:04] *** Quits: pusewic|away_ (sid2036@id-2036.lymington.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: coder_kalyan (2c72974719@user/coderkalyan) (*.net *.split)
[03:30:04] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:04] *** Quits: psnszsn (7fe6b73f65@user/psnsn) (*.net *.split)
[03:30:04] *** Quits: fleg (dfbb34cb39@user/fleg) (*.net *.split)
[03:30:04] *** Quits: leon-p (1b22ab9492@2604:bf00:561:2000::18c) (*.net *.split)
[03:30:04] *** Quits: gjnoonan (cb73e0a324@2604:bf00:561:2000::e) (*.net *.split)
[03:30:04] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (*.net *.split)
[03:30:04] *** Quits: powerofzero (c2b6947721@2604:bf00:561:2000::225) (*.net *.split)
[03:30:04] *** Quits: weslem (32012e016f@2604:bf00:561:2000::12f) (*.net *.split)
[03:30:04] *** Quits: rycwo (dbdb4a3e7b@sourcehut/user/rycwo) (*.net *.split)
[03:30:04] *** Quits: ManDeJan (3da94070ba@user/mandejan) (*.net *.split)
[03:30:04] *** Quits: andrea (3f138254b4@2604:bf00:561:2000::38) (*.net *.split)
[03:30:04] *** Quits: patrick (224fa09e8b@fsf/member/patrick) (*.net *.split)
[03:30:04] *** Quits: rslabbert (91146de1f6@2604:bf00:561:2000::240) (*.net *.split)
[03:30:04] *** Quits: philipwhite (062636b2b0@2604:bf00:561:2000::227) (*.net *.split)
[03:30:04] *** Quits: lizog (75b54f24ba@2604:bf00:561:2000::14d) (*.net *.split)
[03:30:04] *** Quits: utzig (d5d7f726e3@2604:bf00:561:2000::71) (*.net *.split)
[03:30:04] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[03:30:04] *** Quits: wozeparrot (~wozeparro@user/wozeparrot) (*.net *.split)
[03:30:04] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (*.net *.split)
[03:30:04] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[03:30:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[03:30:05] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (*.net *.split)
[03:30:05] *** Quits: shurane (sid132556@id-132556.helmsley.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: ashn (~ashn@2601:45:8080:6160::57a5) (*.net *.split)
[03:30:05] *** Quits: w1ke (~w1ke@user/w1ke) (*.net *.split)
[03:30:05] *** Quits: Biolunar (~bio@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[03:30:05] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[03:30:05] *** Quits: slothby (~JoshAshby@irc.isin.space) (*.net *.split)
[03:30:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[03:30:06] *** Quits: Bonstra (~Bonstra@val.bonstra.fr.eu.org) (*.net *.split)
[03:30:06] *** Quits: luuk (~luuk@user/luuk) (*.net *.split)
[03:30:06] *** Quits: danderson (~dave@tailscale/danderson) (*.net *.split)
[03:30:06] *** Quits: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com) (*.net *.split)
[03:30:06] *** Quits: s-ol_ (~s-ol@s-ol.nu) (*.net *.split)
[03:30:06] *** Quits: novakane (ca74a093b3@user/novakane) (*.net *.split)
[03:30:06] *** Quits: slind (e19c209508@2604:bf00:561:2000::17a) (*.net *.split)
[03:30:06] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[03:30:06] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[03:30:14] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[03:30:16] *** Joins: andrea (3f138254b4@2604:bf00:561:2000::38)
[03:30:16] *** Joins: philipwhite (062636b2b0@2604:bf00:561:2000::227)
[03:30:16] *** Joins: patrick (224fa09e8b@fsf/member/patrick)
[03:30:25] *** Joins: leon-p (1b22ab9492@2604:bf00:561:2000::18c)
[03:30:25] *** Joins: rslabbert (91146de1f6@2604:bf00:561:2000::240)
[03:30:29] *** Joins: fleg (dfbb34cb39@user/fleg)
[03:30:29] *** Joins: gjnoonan (cb73e0a324@2604:bf00:561:2000::e)
[03:30:35] *** Joins: yeti (~username@p4fdb0846.dip0.t-ipconnect.de)
[03:30:37] *** Joins: pusewic|away_ (sid2036@id-2036.lymington.irccloud.com)
[03:30:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:30:42] *** Joins: psnszsn (7fe6b73f65@user/psnsn)
[03:30:42] *** Joins: wozeparrot (~wozeparro@bras-base-okvlon0102w-grc-54-76-64-140-29.dsl.bell.ca)
[03:30:44] *** Joins: dfrey (~dfrey@172.103.152.101)
[03:30:45] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[03:30:45] *** Joins: shurane (sid132556@id-132556.helmsley.irccloud.com)
[03:30:47] *** Joins: luuk (~luuk@88.202.167.37)
[03:30:53] *** Joins: rycwo (dbdb4a3e7b@sourcehut/user/rycwo)
[03:30:53] *** Joins: powerofzero (c2b6947721@2604:bf00:561:2000::225)
[03:30:55] *** Joins: ashn (~ashn@2601:45:8080:6160::57a5)
[03:30:56] *** Joins: breavyn (~breavyn@220-245-56-167.tpgi.com.au)
[03:31:00] *** Joins: lanodan (~lanodan@82-64-66-195.subs.proxad.net)
[03:31:11] *** Joins: hendi (sid489601@2a03:5180:f:2::7:7881)
[03:31:14] *** Quits: yeti (~username@p4fdb0846.dip0.t-ipconnect.de) (Changing host)
[03:31:14] *** Joins: yeti (~username@user/yeti)
[03:31:23] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[03:31:27] *** Joins: weslem (32012e016f@2604:bf00:561:2000::12f)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:37] *** Quits: luuk (~luuk@88.202.167.37) (Changing host)
[03:31:37] *** Joins: luuk (~luuk@user/luuk)
[03:31:48] *** Quits: breavyn (~breavyn@220-245-56-167.tpgi.com.au) (Changing host)
[03:31:48] *** Joins: breavyn (~breavyn@user/breavyn)
[03:31:52] *** Joins: utzig (d5d7f726e3@2604:bf00:561:2000::71)
[03:32:00] *** Joins: slind (e19c209508@2604:bf00:561:2000::17a)
[03:32:06] *** Joins: lizog (75b54f24ba@2604:bf00:561:2000::14d)
[03:32:11] *** Joins: greaser|q (greaser@antihype.space)
[03:32:13] *** Joins: leah2 (~leah@vuxu.org)
[03:32:23] *** lanodan is now known as Guest2803
[03:33:01] *** Joins: danderson (~dave@63.81.90.235)
[03:33:13] *** Joins: Bonstra (~Bonstra@val.bonstra.fr.eu.org)
[03:33:21] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:33:44] *** Joins: w1ke (~w1ke@user/w1ke)
[03:33:45] *** Joins: dbuckley (~dbuckley@2601:182:c77f:c13b:6a24:69d7:c054:80c3)
[03:33:56] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[03:33:56] *** Joins: greaser|q (greaser@user/greasemonkey)
[03:33:59] *** greaser|q is now known as GreaseMonkey
[03:34:15] *** Joins: noracodes (~quassel@2604:a880:2:d0::2299:a001)
[03:34:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:34:22] *** Joins: novakane (ca74a093b3@user/novakane)
[03:34:28] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[03:34:28] *** Joins: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com)
[03:34:36] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[03:34:50] *** Joins: ManDeJan (3da94070ba@user/mandejan)
[03:34:58] *** Joins: coder_kalyan (2c72974719@user/coderkalyan)
[03:35:01] *** Joins: marcj (~marc@205.175.215.25)
[03:35:11] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[03:35:14] *** Joins: s-ol (~s-ol@s-ol.nu)
[03:35:15] *** Joins: rektide (~rektide@eldergods.com)
[03:35:36] *** Joins: koolazer (~koo@user/koolazer)
[03:36:17] *** Joins: livoreno (~livoreno@user/notzmv)
[03:36:26] *** Joins: af (~af@awalgarg.me)
[03:36:54] <andrewrk> ISO-4683-1, here's the conversation that happened right before you joined: https://clbin.com/r6iyi
[03:36:56] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[03:40:30] *** Joins: ebb (ebb@user/ebb)
[03:51:54] <ISO-4683-1> oh my
[03:52:13] <ISO-4683-1> i'm sorry about that, i was fighting with my paste function :|
[03:52:37] <ISO-4683-1> how it ended up here is beyond me though
[03:52:54] <ISO-4683-1> thanks for the reply regardless :)
[04:00:06] *** Parts: ISO-4683-1 (~ISO-4683-@user/isodt) (that was rather embarassing, I'll test elsewhere.)
[04:03:23] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 256 seconds)
[04:06:35] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:18:51] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[04:19:21] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[04:25:47] *** Quits: scj (~scj@m83-185-33-250.cust.tele2.se) (Quit: Client closed)
[04:25:57] *** Joins: hiljusti (~hiljusti@c-73-59-99-126.hsd1.wa.comcast.net)
[04:26:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[04:26:28] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:36:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[04:39:29] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:fcfc:de6a:5826:a17a) (Read error: Connection reset by peer)
[04:39:48] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:fcfc:de6a:5826:a17a)
[04:40:27] *** Joins: rgrinberg (~textual@187.223.209.106)
[04:43:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:54:31] *** Quits: hiljusti (~hiljusti@c-73-59-99-126.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[04:59:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[05:03:40] *** Quits: arkurious (~arkurious@user/arkurious) (Read error: Connection reset by peer)
[05:04:07] *** Joins: arkurious (~arkurious@user/arkurious)
[05:05:51] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:08:42] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[05:08:58] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[05:11:45] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Client Quit)
[05:12:54] *** Joins: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f)
[05:18:15] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[05:19:35] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[05:20:07] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[05:21:00] *** Joins: livoreno (~livoreno@user/notzmv)
[05:22:14] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:fcfc:de6a:5826:a17a) (Read error: Connection reset by peer)
[05:22:58] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17)
[05:25:28] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[05:36:22] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Read error: Connection reset by peer)
[05:36:49] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[05:40:00] *** Joins: moog (~moog@107.126.48.93)
[05:40:25] *** Quits: moog_ (~moog@107.126.48.93) (Ping timeout: 250 seconds)
[05:46:20] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17)
[05:47:09] *** Quits: st4ll1 (~st4ll1@vm37095.cs.easyname.systems) (Ping timeout: 250 seconds)
[05:48:27] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:49:17] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17) (Ping timeout: 240 seconds)
[05:49:34] *** cr1901_ is now known as cr1901
[06:05:15] *** Quits: moog (~moog@107.126.48.93) (Remote host closed the connection)
[06:05:37] *** Joins: moog (~moog@107.126.48.93)
[06:10:35] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[06:11:17] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:20:21] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[06:20:51] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[06:24:04] *** Quits: moog (~moog@107.126.48.93) (Remote host closed the connection)
[06:30:29] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 250 seconds)
[06:35:25] <andrewrk> Debian Jessie extended LTS ends in June 2022. That's exciting because it means our default minimum Linux version bumps up to 4.9
[06:37:30] *** Quits: frmdstryr (~jrm@172.58.206.251) (Ping timeout: 268 seconds)
[06:40:46] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[06:48:06] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Read error: Connection reset by peer)
[06:48:32] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[06:49:29] *** Quits: rgrinberg (~textual@2806:101e:7:6946:a169:dd6b:ff9a:4d8f) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:21:06] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[07:21:34] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:45:29] *** Joins: slothby (~JoshAshby@irc.isin.space)
[07:47:32] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[07:55:29] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:10:03] *** Joins: rgrinberg (~textual@187.223.209.106)
[08:12:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:20:12] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:45:02] <andrewrk> https://clbin.com/UGFOb can anyone tell me what the hell are these first 8 lines of this inline asm doing? this is post-preprocessed output
[08:45:10] <andrewrk> gcc accepts it; clang rejects it with "unknown directive"
[08:54:02] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[08:54:19] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[09:04:50] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[09:05:21] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[09:10:59] *** Parts: cCCCCcccccCCc (~b@user/ccccccccccccc) (Leaving)
[09:17:06] *** Quits: squeek502 (~squeek502@user/squeek502) (Ping timeout: 260 seconds)
[09:18:11] *** Joins: squeek502 (~squeek502@user/squeek502)
[09:23:19] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[09:23:50] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[09:27:23] <discipulus> andrewrk according to the comments, they are local symbols: https://stackoverflow.com/questions/21757968/what-is-the-meaning-of-l-xebx-1-in-uclibc-syscalls-h-for-i386
[09:37:57] *** Joins: aKriJcz (~jirka@mail.tcz.cz)
[09:51:17] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[10:12:54] *** Joins: ur5us (~ur5us@203.86.198.200)
[10:20:49] <discipulus> Used for shuffling registers around https://sourceware.org/legacy-ml/libc-help/2010-04/msg00011.html
[10:24:04] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[10:24:31] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[10:27:49] <andrewrk> discipulus, thanks! I solved the problem in https://github.com/ziglang/zig/pull/10339/commits/6a45fe9a5ffd251eae013e28aa06eb0542ed6f23
[10:30:34] *** Joins: Vexu (~Thunderbi@188.117.20.105)
[10:33:02] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa01) (Ping timeout: 240 seconds)
[10:39:54] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa01)
[10:56:44] *** Joins: hspak3 (~hspak@user/hspak)
[10:58:58] *** Quits: hspak (~hspak@user/hspak) (Ping timeout: 268 seconds)
[10:58:58] *** hspak3 is now known as hspak
[11:24:40] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[11:25:11] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[11:34:06] *** Joins: zakora (~zakora@2001:14ba:a0f4:3d00:21aa:b6aa:2bcc:1d84)
[11:37:53] *** Joins: jonas_ (~textual@55867b35.cust.multi.fi)
[11:45:13] *** Quits: dfrey (~dfrey@172.103.152.101) (Ping timeout: 256 seconds)
[11:48:34] <Franciman> hi 
[11:48:48] <ikskuh> huhu
[11:49:02] <Franciman> i still don't understand why len_align arg is useful
[11:49:13] <Franciman> while calling Allocator.alloc
[11:49:21] <ikskuh> because len_align might be different from ptr_align
[11:49:38] <Franciman> why?
[11:50:20] <Franciman> what's the use of aligning the length?
[11:51:08] <ikskuh> this is for allocators that cannot alloc granular tems
[11:51:24] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:51:32] <ikskuh> for example, a page allocator can only alloc in 4k granularity
[11:51:54] <ikskuh> thus, if you pass in 4096 as len-align, you get either 0, 4096, 8192, … bytes returned
[11:53:10] <Franciman> uhm
[11:53:16] <Franciman> ok, I am still confused lol
[11:53:18] <Franciman> but thanks
[11:53:23] <Franciman> i will think about this
[11:54:14] <Franciman> i mean, the doc says if len_align = 0
[11:54:38] <Franciman> you get exactly len bytes. so... why align?
[11:55:47] <ikskuh> because you might don't care about the actual length
[11:56:04] <ikskuh> think ArrayList, ArenaAllocator, ...
[11:56:11] <ikskuh> they dn't care if they get *exactly* 20 byte
[11:56:20] <ikskuh> it might be totally okay to get 200 byte as well
[11:56:34] <ikskuh> exact allocation might fragment the heap more than "at least"
[11:56:37] <ikskuh> (afk)
[11:58:35] <Franciman> ok what I don't understand is that when I provide a len_align, I also have to provide a len already aligned to len_align
[11:58:39] <Franciman> so what's the use of len align? lol
[11:59:38] *** Joins: dfrey (~dfrey@172.103.152.101)
[12:06:19] <andrewrk> if the allocator is going to give you possibly more than you asked for, it has to know your alignment requirements
[12:06:44] <andrewrk> an integer does not also communicate the required alignment of said integer
[12:06:51] <andrewrk> for example the value 8 might only have a required alignment of 4
[12:07:03] <Franciman> isn't ptr_align enough for that?
[12:09:44] <andrewrk> you would probably use sizeof for len_align and alignof for the ptr_align
[12:10:10] <andrewrk> that said this whole mechanism might be not worth it. I want to investigate if the extra interface complexity is warranted
[12:14:37] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 240 seconds)
[12:20:17] <Franciman> thanks
[12:22:35] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:25:29] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[12:25:52] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[12:27:01] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa01) (Ping timeout: 245 seconds)
[12:46:17] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa01)
[12:52:58] *** Joins: chgr (~ek@nat-91-137-16-17.net.encoline.de)
[13:08:44] *** Quits: raghavgururajan (9fd51d1ea8@user/raghavgururajan) (Remote host closed the connection)
[13:13:51] *** Joins: scj (~scj@m83-185-33-250.cust.tele2.se)
[13:13:58] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa01) (Quit: wallace dozed off)
[13:14:46] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:14:49] *** Joins: bindu_ (~bindu@user/bindu)
[13:16:36] *** bindu_ is now known as bindu
[13:17:09] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa07)
[13:22:03] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:22:19] *** Joins: bindu (~bindu@user/bindu)
[13:26:36] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[13:26:50] *** Quits: zakora (~zakora@2001:14ba:a0f4:3d00:21aa:b6aa:2bcc:1d84) (Ping timeout: 252 seconds)
[13:27:09] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[13:36:57] *** Quits: tomku (~tomku@user/tomku) (Read error: Connection reset by peer)
[13:39:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:42:12] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:44:04] *** Joins: scj83 (~scj@m83-185-33-250.cust.tele2.se)
[13:44:18] *** Quits: scj83 (~scj@m83-185-33-250.cust.tele2.se) (Client Quit)
[13:53:07] *** Joins: tomku (~tomku@user/tomku)
[13:53:47] *** Quits: cot (~kiedtl@kisslinux/kiedtl) (Ping timeout: 252 seconds)
[14:02:59] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[14:03:06] *** Joins: zakora (~zakora@dzd6d6yj1bhywfzv6-bxt-3.rev.dnainternet.fi)
[14:03:09] *** Joins: leah2 (~leah@vuxu.org)
[14:05:43] *** Quits: zakora (~zakora@dzd6d6yj1bhywfzv6-bxt-3.rev.dnainternet.fi) (Client Quit)
[14:10:31] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[14:10:44] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:15:10] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17) (Remote host closed the connection)
[14:15:28] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17)
[14:19:07] *** Quits: scj (~scj@m83-185-33-250.cust.tele2.se) (Quit: Client closed)
[14:23:10] *** Joins: Guest38 (~Guest38@p200300f03f2903006d2e35de8286c83a.dip0.t-ipconnect.de)
[14:25:17] *** Quits: Vexu (~Thunderbi@188.117.20.105) (Ping timeout: 240 seconds)
[14:26:13] *** Quits: Guest38 (~Guest38@p200300f03f2903006d2e35de8286c83a.dip0.t-ipconnect.de) (Client Quit)
[14:31:52] *** Joins: earnestly (~earnest@user/earnestly)
[15:05:07] *** Quits: semarie (~semarie@user/semarie) (Quit: WeeChat 3.2.1)
[15:14:49] *** Quits: Nulo (~Nulo@user/nulo) (Ping timeout: 250 seconds)
[15:21:30] *** Joins: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801)
[15:28:54] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[15:29:20] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:42:02] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[15:42:13] <jemius> Hi, folks
[15:49:40] *** Joins: Nulo (~Nulo@user/nulo)
[15:55:01] *** Joins: Vexu (~Thunderbi@188.117.20.105)
[15:56:36] *** Joins: semarie (~semarie@user/semarie)
[16:04:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:05:57] *** Quits: Nulo (~Nulo@user/nulo) (Ping timeout: 240 seconds)
[16:09:37] *** Quits: rbino (~rbino@rbino.com) (Quit: ZNC - http://znc.in)
[16:09:51] *** Joins: rbino (~rbino@rbino.com)
[16:09:58] *** Joins: frmdstryr (~jrm@172.58.206.251)
[16:27:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[16:28:37] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[16:38:17] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[16:59:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[17:10:42] *** Joins: lumo_e (~enrico@151.29.48.90)
[17:19:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:19:51] *** Joins: trainsley69 (~trainsley@c83-252-9-240.bredband.tele2.se)
[17:32:10] *** Joins: arkurious (~arkurious@user/arkurious)
[17:50:06] *** Joins: scj (~scj@m83-185-33-250.cust.tele2.se)
[17:50:35] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[17:51:02] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[17:53:54] *** Joins: hanna (65c0ed9340@user/hanna)
[17:54:16] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:03:04] *** Quits: chgr (~ek@nat-91-137-16-17.net.encoline.de) (Quit: WeeChat 3.3)
[18:03:42] *** Quits: Vexu (~Thunderbi@188.117.20.105) (Quit: Vexu)
[18:05:41] *** Quits: aKriJcz (~jirka@mail.tcz.cz) (Remote host closed the connection)
[18:08:45] *** Joins: moog (~moog@107.242.124.157)
[18:13:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[18:22:07] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[18:24:51] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:27:54] <jemius> Do I see this right: Zig's main mechanism to deal with memory-problems is using `defer` to call cleanup-routines?
[18:29:22] <companion_cube> defer and errdefer, yes
[18:29:49] *** Joins: phaleth (~phaleth@user/phaleth)
[18:31:17] *** Quits: frmdstryr (~jrm@172.58.206.251) (Ping timeout: 240 seconds)
[18:36:42] <ifreund> jemius: defer/errdefer are a general solution to resource management, not just memory management
[18:37:29] <ifreund> by "memory problems" it sounds like you're asking more about how to catch use-after-free errors and the like, the general purpose allocator in the standard library can do this
[18:39:43] <jemius> hm, sounds interesting.
[18:40:13] <jemius> I'm on the eternal search for something as simple as C but a bit better in some regards
[18:42:07] *** Joins: notzmv (~zmv@user/notzmv)
[18:52:57] <ifreund> jemius: that's about how I see Zig personally, the language complexity is certainly in the same order of magnitude as C and there are a bunch of nice improvements
[18:54:30] *** Quits: Guest2803 (~lanodan@82-64-66-195.subs.proxad.net) (Quit: WeeChat 3.3)
[18:54:38] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[18:55:33] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[19:00:21] <jemius> ifreund, will be interesting whether Zig will be able to resist mushrooming
[19:00:27] *** DarkPlutonium is now known as DarkUranium
[19:02:06] *** Joins: xackus_ (~xackus@218x.knc.pl)
[19:02:08] <ikskuh> mushrooming?
[19:03:22] <Franciman> growing of many satellite projects
[19:03:24] <Franciman> i believe
[19:03:25] <jemius> sprawling. Collecting lots of features. C++ing
[19:03:27] <ifreund> ikskuh: complexity increasing without bound, e.g. C++
[19:03:28] <Franciman> ah
[19:03:45] <ikskuh> ah
[19:03:47] <Franciman> imho the simple solution is allowing people to easily hack on the compiler and the language spec
[19:04:03] <ifreund> jemius: the core team has every intention of essentially entering a feature freeze with Zig 1.0
[19:04:03] <ikskuh> i think a lot of the core team agrees that less features are better
[19:04:15] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[19:04:16] <jemius> IMO if you don't have a dictator who says "No!" all the time, mushrooming is inevitable
[19:04:23] <Franciman> jemius: nope this is false
[19:04:35] <ifreund> I agree with jemius :P
[19:04:40] <Franciman> you just have to let everybody hack on the compiler and have their own versions
[19:04:41] <ikskuh> luckily we have this dictator *grin*
[19:04:50] <Franciman> the objective of the language must be to be customizable
[19:04:50] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[19:05:09] <ifreund> huh no?
[19:05:12] <ikskuh> nah
[19:05:16] <jemius> Franciman, ok, that is a point. A reason why C is quite sane is that all the compilers force each other to be sane
[19:05:17] <ifreund> that's absolutely not an objective of zig
[19:05:26] <Franciman> ifreund: sorry bad english
[19:05:28] <Franciman> I mean
[19:05:30] <Franciman> it's not necessary
[19:05:30] <ifreund> https://lobste.rs/s/xphmg5/interfacing_with_zig_bdfl_run_project
[19:05:35] <Franciman> you can also go the opposite way
[19:05:38] <Franciman> than freezing
[19:05:42] <Franciman> let me rephrase
[19:05:47] <Franciman> either you have a dictator
[19:05:48] <ikskuh> freezing is a very good idea though
[19:05:50] <ikskuh> i want this
[19:05:51] <ifreund> jemius: people gave a few examples of non-BDFL run "simple" languages in that thread
[19:05:53] <ikskuh> i want it very much
[19:05:55] <Franciman> or the language is meant to be constantly customized
[19:06:18] <Franciman> i just say that it's not necessary to have dictators to survive mushrooming
[19:07:33] <ikskuh> ifreund: have you seen my question related to C library shipping?
[19:08:45] <Franciman> jemius: are you a language designer?
[19:09:29] <ifreund> ikskuh: I don't think you can compile a shared library that is libc agnostic
[19:09:44] <ikskuh> for windows, i can
[19:09:55] <ikskuh> but for others, i thought i'd better ask someone who knows
[19:10:01] <ifreund> you can probably target a very old glibc version and it will be compatible with all more recent versions
[19:10:04] <ifreund> and same with musl
[19:10:04] <jemius> Franciman, ha, never! Designing a language is a whole different level man... it's like trying to become a musician: You are going to suck agains the titans and your songs will be downloaded 20 times on Spotify compared to the Titans. That's how it is here, Dennis Ritchie has a hard left hook
[19:10:13] <ikskuh> musl doesn't have symbol versioning, right?
[19:10:18] <ifreund> nope
[19:10:31] <Franciman> jemius: 20 times is gold, my music gets 1 download, from my mother, because I take her phone and listen to them
[19:10:50] <jemius> ^^
[19:11:25] <jemius> There is a certain open source hacker who will soon find out that his new super secret language is going to get ignored. At least that is what I would bet on
[19:11:38] <Franciman> that's for sure
[19:11:46] <Franciman> but C is not the last world on the subject by far
[19:12:15] <jemius> "last world on the subject" ?
[19:12:57] <ikskuh> ifreund: what about static libraries? assuming i don't use libc, it will just work, right?
[19:13:09] <ikskuh> when i use libc, i should again target old glibc?
[19:14:48] <Franciman> jemius: yes i mean it's not hard to do better than C, it's hard to do something new
[19:15:22] *** Quits: xackus_ (~xackus@218x.knc.pl) (Read error: Connection reset by peer)
[19:15:32] *** Joins: xackus (~xackus@218x.knc.pl)
[19:15:35] <jemius> Franciman, oh that statement rises and falls with the definition of the word "better". I mean people try to improve on C since 40 years
[19:15:56] <Franciman> and they succeeded many times :P
[19:16:31] <jemius> There is this quote by Dennis Ritchie I believe about Linux: "Unix delayed OS-developement by 10 years and Linux by 20 years". I think he meant that because of these systems no one is trying out new things
[19:16:47] <Franciman> do you program in Haskell?
[19:17:01] <jemius> It's like with distros: Everyone is like "let's do a debian derivate". So with langs: Let's try a C but without broken Strings
[19:17:18] <jemius> Franciman, I had a course in the first semester of Uni back in the day
[19:17:57] <Franciman> imho haskell has many things that C lets you cry upon
[19:18:07] <Franciman> now ok, for system low level programming C is still best
[19:18:12] <Franciman> but haskell is really good for a lot of other things
[19:18:26] *** Joins: tane (~tane@user/tane)
[19:23:44] *** Joins: frmdstryr (~jrm@172.58.206.251)
[19:38:28] *** Joins: kiedtl (~kiedtl@kisslinux/kiedtl)
[19:39:23] *** Joins: pkap (~pkap@193.32.127.239)
[19:40:14] *** Quits: koakuma (~koakuma@user/koakuma) (Quit: Leaving.)
[19:41:07] *** Joins: nyah (~nyah@94.6.71.219)
[19:48:10] <ifreund> ikskuh: if you don't link libc, you could do either
[19:49:15] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:6193:6520:6307:8663)
[19:49:15] <ifreund> though this would be inefficent, as you then have e.g. a duplicate allocator implementation in your library which then almost certainly gets linked into someone else's larger program using libc
[19:51:30] <ifreund> I'm not 100% if static libraries are any different from dynamic libraries with regards to this, I suspect they aren't
[19:51:49] <ifreund> you need to build them against the proper version of libraries you want to link
[19:52:57] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17) (Ping timeout: 240 seconds)
[19:54:27] *** Quits: pkap (~pkap@193.32.127.239) (Quit: Client closed)
[20:00:24] *** Joins: pkap (~pkap@193.32.127.239)
[20:01:40] *** Joins: mla (~mla@162.253.176.229)
[20:07:57] *** Quits: frmdstryr (~jrm@172.58.206.251) (Ping timeout: 240 seconds)
[20:09:09] *** Joins: frmdstryr (~jrm@172.58.206.251)
[20:20:04] *** Quits: tgschultz (UserNick@047-034-058-084.res.spectrum.com) (Quit: Going offline, see ya! (www.adiirc.com))
[20:20:26] *** Joins: tgschultz (UserNick@047-034-058-084.res.spectrum.com)
[20:21:07] *** Joins: lovekr08 (~lovekr08@171.144.93.209.dyn.plus.net)
[20:42:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:45:23] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[20:54:10] *** Quits: jonas_ (~textual@55867b35.cust.multi.fi) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:57:25] *** Quits: pkap (~pkap@193.32.127.239) (Quit: Client closed)
[20:57:45] *** Quits: anb1 (~anb@user/anb) (Ping timeout: 268 seconds)
[21:08:37] *** Joins: pkap (~pkap@193.32.127.239)
[21:08:44] *** Quits: lovekr08 (~lovekr08@171.144.93.209.dyn.plus.net) (Quit: Leaving)
[21:38:44] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[21:41:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:46:06] <ikskuh> ugh
[21:46:12] <ikskuh> that doesn't sound nice
[21:46:37] *** Quits: xackus (~xackus@218x.knc.pl) (Ping timeout: 240 seconds)
[21:47:04] <ikskuh> i'll make some experiments
[21:47:16] <ikskuh> ubuntu 16.04 should be a good test target *grin*
[21:49:52] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[21:55:03] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Read error: Connection reset by peer)
[21:55:09] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[21:57:07] *** Joins: ur5us (~ur5us@203.86.198.200)
[22:15:53] *** Joins: chgr (~ek@nat-91-137-16-17.net.encoline.de)
[22:16:37] *** Joins: rgrinberg (~textual@187.223.209.106)
[22:18:03] *** Quits: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de) (Quit: anthon)
[22:18:32] *** Quits: pkap (~pkap@193.32.127.239) (Quit: Client closed)
[22:18:32] *** Joins: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de)
[22:27:14] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:37:00] <ikskuh> ifreund: i think i can get around all libc dependencies and make standalone libs by using page allocation directly *thinking*
[22:43:51] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:49:16] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[22:53:42] *** Quits: ur5us (~ur5us@203.86.198.200) (Ping timeout: 268 seconds)
[22:57:14] *** Quits: duck2 (~duck2@146.185.156.161) (Quit: Ping timeout (120 seconds))
[22:58:07] *** Joins: duck2 (~duck2@146.185.156.161)
[22:58:19] *** Quits: notapenguin (~ryu@2804:14d:5680:8a2c:75cf:7f59:516a:b801) (Quit: WeeChat 3.3)
[23:09:50] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[23:11:52] *** Quits: scj (~scj@m83-185-33-250.cust.tele2.se) (Quit: Client closed)
[23:15:39] *** Quits: chgr (~ek@nat-91-137-16-17.net.encoline.de) (Quit: WeeChat 3.3)
[23:37:37] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 240 seconds)
[23:46:35] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[23:52:49] *** Joins: lumo_e (~enrico@151.29.48.90)
[23:53:29] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[23:58:17] *** Joins: marler8997_ (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[23:59:04] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[23:59:37] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
