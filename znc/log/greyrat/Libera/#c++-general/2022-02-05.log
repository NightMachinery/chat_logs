[00:01:13] <pepperoni> working with templates and figured overloading constructors was better than other ways of optional args, anyone see what's wrong here ... https://coliru.stacked-crooked.com/a/73c91b44048ce0e5
[00:02:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:04:17] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:f02b:1d66:81c4:7595) (Quit: Konversation terminated!)
[00:06:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:10:02] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4) (Quit: Quit)
[00:13:20] <rpav> pepperoni: you probably want a template constructor and/or deduction guide
[00:14:53] <Alipha> pepperoni: so, with Net<G>, T=G. what's U?
[00:15:14] <pepperoni> Alipha: sorry, T and U are types, they should be G and M
[00:15:58] <Alipha> pepperoni: so if U is not specified, you want U to be M? so Net<G> is the same as Net<G,M>?
[00:16:28] <pepperoni> more like ... https://coliru.stacked-crooked.com/a/9212a02edcbdada7
[00:17:53] <Alipha> pepperoni: you're still not specifying what U is. template arguments aren't optional. you said Net takes template arguments T and U
[00:18:19] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:20:44] <Alipha> `template<typename T, typename U> class Net` is specifying Net is a class template with arguments T and U. the template arguments relate to the class, not to the constructors
[00:22:27] <pepperoni> ok, I think I see what you're saying.
[00:23:36] <pepperoni> initially, the idea is that T is G and U is an M
[00:23:47] <Alipha> pepperoni: so you want this Net class to be able to either hold one member variable, _g, or hold two member variables, _g and _m?
[00:23:59] <pepperoni> yes
[00:24:21] <rpav> "yes" ;)
[00:24:33] <rpav> oh, it _was_ maybe yes-or-no
[00:24:38] <pepperoni> rather, initialized with one variable, or two variables.
[00:25:17] <pepperoni> if I initialize with G, then I pass the M in later ... or I initial with T and M
[00:25:43] <pepperoni> s/with T and M/G and M
[00:26:09] <Alipha> pepperoni: kind of odd, but perhaps: https://coliru.stacked-crooked.com/a/e80bd98087830609
[00:26:20] <pepperoni> I want to initialize with G and make M optional
[00:27:09] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[00:27:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:27:36] *** Joins: jokoon (~eio@2a01:e0a:542:e160:60a3:ee15:b13d:6bd9)
[00:29:40] <pepperoni> Alipha: ok, so, Net is much larger and that seems like a lot of duplication of other members (which I didn't show to get to the point of the problem) by having two Net classes
[00:30:47] *** Quits: Guest36 (~Guest36@res388d-128-61-91-234.res.gatech.edu) (Ping timeout: 256 seconds)
[00:31:34] <Alipha> pepperoni: c++ doesn't have "optional data members". if you have `U _m;`, there's no way to say _m doesn't exist (well, there's some trickery with inheritance...)
[00:31:56] <Alipha> pepperoni: another direction: https://coliru.stacked-crooked.com/a/453e6d90fb0d7aaf
[00:33:07] <Alipha> oh, i forgot to remove the comment on line 17
[00:33:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4)
[00:34:11] <pepperoni> should this work with std::optional<> being passed in as the second argument to the Net() constructor?
[00:37:27] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[00:38:31] <sonny> Has anyone had success with MSBuild on a non windows platform?
[00:39:18] <Alipha> pepperoni: you're focusing on the constructors, but the constructors is really a minor problem. if you "don't specify" what U is, then what type does the _m member variable have?
[00:40:17] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:42:06] <Shell> til msbuild exists on non Windows platforms
[00:47:09] <Hello71> .net core^Wlinux^Wmultiplatform
[01:03:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:05:43] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[01:07:03] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:08:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:09:06] *** Joins: jsbach (~jsbach@2a01:c23:6469:4c00:a24a:db6c:c9a:28fd)
[01:12:09] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[01:14:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:15:37] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Ping timeout: 240 seconds)
[01:15:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:17:51] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[01:18:03] *** Parts: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) ()
[01:27:18] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[01:27:32] *** Quits: robod34 (~Username@79.113.227.62) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:29:53] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[01:31:28] *** Quits: pepperoni (~pepperoni@172.58.99.50) (Read error: Connection reset by peer)
[01:32:05] *** Joins: pepperoni (~pepperoni@172.58.99.50)
[01:35:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[01:35:35] *** Joins: markong (~kvirc@213.146.188.203)
[01:39:36] *** Quits: jokoon (~eio@2a01:e0a:542:e160:60a3:ee15:b13d:6bd9) (Quit: Leaving)
[01:39:56] <ashafq> Can anyone please point me to C++ move semantics with abstract base classes?
[01:40:34] <ashafq> I have no idea why C++ has to make something trivial so hard ‚òπÔ∏è
[01:41:07] <Alipha> ashafq: you generally don't end up copying or moving polymorphic objects themselves. you might have a std::unique_ptr<Base> and then you'd move that unique_ptr around
[01:41:16] *** Quits: skapata (~Skapata@user/skapata) (Quit: ƒúis.)
[01:41:40] <ashafq> Alipha: I have a base class which is derived in multiple class
[01:42:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:09] *** ChanServ sets mode: +v npaperbot
[01:42:12] <rpav> to move polymorphic objects you need something polymorphic to do moving
[01:42:17] <ashafq> Let me see if I can share some code without giving out too much info.
[01:42:57] <rpav> err and like Alipha alluded to, this would be rarely possible anyway
[01:43:44] <rpav> like you could i think, but you'd need a fairly intricate memory management situation .. is it even worth the trouble
[01:45:22] <Alipha> i can't even come up with an example where you'd want to move polymorphic objects themselves and not simply "move" pointers to them. wanting to copy polymorphic objects is somewhat common, in which case, you add a virtual clone() function
[01:45:32] <rpav> yeah
[01:45:39] <rpav> like.. garbage collection? ;)
[01:45:50] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 250 seconds)
[01:46:31] <Alipha> well. actually, i do "polymorphic moving" in my poly_obj utility class
[01:46:41] <rpav> qt has some annoyingly unmovable/uncopyable classes, maybe some of those, but probably qt is just broken as hell
[01:47:17] <rpav> Alipha: is it a polymorphic value container?
[01:47:47] <rpav> like _that's possible_, it's just .. the uses are rare and probably dubious
[01:47:49] <Alipha> rpav: yeah: https://github.com/alipha/cpp/tree/master/poly_obj
[01:47:53] <rpav> Alipha: cool
[01:48:15] <ashafq> trying to type up something quick
[01:48:20] <ashafq> sorry about the delay
[01:48:29] <rpav> i have an `any` that does svo but i'm not sure it supports polymorphism
[01:49:05] <rpav> ü§î i'm not even sure i finished that or if it was just curiosity at some point actually
[01:52:45] <ashafq> Alipha: https://godbolt.org/z/93jx947dh
[01:53:13] <ashafq> that's how I have it now, but the real codebase has templates ‚òπÔ∏è
[01:53:58] <ashafq> Is that a really shitty design?
[01:57:02] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2133:2367:93c2:891d)
[01:57:49] <ashafq> Alipha: I think the issue is that I have an atomic member in the base class
[01:58:06] <ashafq> Alipha: how do I handle this?
[01:58:49] <ashafq> Why can't you move an atomic?
[01:59:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[02:00:05] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Quit: flush)
[02:00:21] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[02:03:29] <Alipha> ashafq: i don't know, but you can write a move constructor and move operator= for your class that does Base(Base &&other) : my_atomic(other.my_atomic.load()) {}
[02:03:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:04:20] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:05:10] <ashafq> *sigh*
[02:07:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:07:42] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[02:12:16] *** Joins: hexingb (~hexingb@36.155.28.147)
[02:20:41] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:25:51] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: No route to host)
[02:31:01] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[02:35:35] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:44:21] *** Joins: proller (~p@80.240.216.69)
[02:45:41] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:45:43] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:49:08] *** Joins: epony (epony@user/epony)
[02:50:02] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 240 seconds)
[02:52:14] *** Joins: cq-work (~Z_Lund@user/cq-work)
[02:55:07] *** Quits: andreasbuhr (~quassel@p5dcf991b.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:55:17] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 256 seconds)
[02:59:23] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[03:04:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:04:43] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:08:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:08:25] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:10:48] *** Joins: hexingb (~hexingb@36.155.28.147)
[03:27:35] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[03:29:32] *** Joins: cq-work (~Z_Lund@user/cq-work)
[03:30:59] *** Quits: magla (~gelignite@d5361383.access.ecotel.net) (Quit: Stay safe!)
[03:31:45] *** Joins: Xardas (~Xardas@149.233.51.127)
[03:38:33] <computerquip> Is there any way to force cast an ABI compatible type to another type?
[03:38:56] <computerquip> Particularly one that can be exposed as part of a C API
[03:39:12] <computerquip> I'd imagine there would be ODR violations there...
[03:39:52] <computerquip> Was hoping I could get https://ned14.github.io/outcome/experimental/c-api/ to work but it seems mighty unfriendly.
[03:41:54] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:49:49] <Alipha> reinterpret_cast?
[03:51:37] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[03:52:32] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (Remote host closed the connection)
[03:53:39] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:19e7:ade0:dc6f:5dab)
[03:53:39] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:19e7:ade0:dc6f:5dab) (Changing host)
[03:53:39] *** Joins: skapata (~Skapata@user/skapata)
[03:54:25] <antto> #define nice_cast reinterpret_cast
[03:54:28] <hnOsmium0001[m]> memcpy could also work, but it may induce an unwanted cost
[03:55:01] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[03:55:24] <hnOsmium0001[m]> if you don't care about strict aliasing, you can probably also reinterpret_cast a pointer
[03:58:04] *** Joins: cq-work (~Z_Lund@user/cq-work)
[04:02:32] <ville> computerquip: no
[04:03:14] <ville> having said that if you're shoving it off to a c function just go for it
[04:04:27] <computerquip> Well, to clarify that point, I'm implementing a C API using C++ and the C++ code was wanting to return the above result type so a caller from C could use it.
[04:04:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:05:07] <computerquip> I was hoping to return it by value but perhaps that isn't so great.
[04:05:25] <ville> if you can stomach it, then option is having the compatible types in a union
[04:07:00] <ville> through a union you can read the common initial sequence of structs, which in this case would be the full thing since they presumably have matching members
[04:08:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:14:29] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:615c) (Quit: Leaving)
[04:16:42] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[04:19:37] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 240 seconds)
[04:20:40] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:23:37] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[04:24:00] *** Quits: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de) ()
[04:24:14] *** Joins: seninha (~seninha@user/seninha)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:27:44] <yolo> https://echorand.me/posts/clean_up_variable_attribute/  so gcc|clang has this dtor for c since 2014 but I just heard about it
[04:28:15] <yolo> seems very powerful and definitely underrated
[04:29:51] <kalven> there's a proposal to add 'defer' to C
[04:30:24] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:33:40] *** Joins: hexingb (~hexingb@36.155.28.147)
[04:33:56] <yolo> g++ honors all c11|c17|c18 new features by the way, if anything 'defer' it will be c2x something then, 'defer' will be even nicer
[04:34:41] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[04:35:08] <yolo> c does have constructor|destructor but only at main() level, kind of like init() and atexit()
[04:35:45] <kalven> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2895.htm
[04:36:23] *** Joins: cq-work (~Z_Lund@user/cq-work)
[04:37:41] <RandomReader> yolo are you wanting to be in ##C, or just not familiar with the C++ approaches to accomplish the same things?
[04:38:11] <RandomReader> (the discussion is fine, it's just starting to look like you'd rather be doing a platform-specific version of C or something)
[04:38:13] <yolo> RandomReader: 90% of my time is c++ these days, i was in ##C before but not recently
[04:38:36] <yolo> it's the exception stuff made me relook at C since last night, that's about it
[04:38:41] <RandomReader> ah ok
[04:39:35] *** Quits: emerent (~quassel@p200300cd57044366ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:39:55] *** Joins: emerent (~quassel@p200300cd570443b6ba27ebfffed28a59.dip0.t-ipconnect.de)
[04:40:25] <InPhase> yolo: I maybe missed it in the earlier discussion, but what platform was it that you were working on where the exceptions were a problem in the first place?
[04:45:17] *** Quits: jsbach (~jsbach@2a01:c23:6469:4c00:a24a:db6c:c9a:28fd) (Ping timeout: 240 seconds)
[04:47:37] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[04:48:57] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[04:50:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:51:46] *** gentooclimax is now known as climax
[04:59:00] <yolo> InPhase: a systemc(pure c++) that can live with exceptions, a fpga board(digilent cora arm board) that I need develop a few control applications and I now consider using C for that, nothing in particular, just throwing exceptions on those little boards that who knows taking how long to unwind making me a bit uneasy.
[04:59:51] <yolo> the only thing i miss there is ctor|dtor but i think i'm good now.
[05:00:47] <yolo> not a show stopper but want to add some "new" stuff to old c
[05:05:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:05:51] <InPhase> An FPGA board with C++?  Do you mean one of the ones with an embedded processor?
[05:06:32] <InPhase> I never heard of converting C++ to an FPGA circuit layout.  That sounds challenging.
[05:09:15] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:11:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[05:13:02] *** Emet-Selch is now known as Azem
[05:14:37] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 240 seconds)
[05:16:42] *** Joins: cq-work (~Z_Lund@user/cq-work)
[05:16:57] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 240 seconds)
[05:17:20] *** Joins: hexingb (~hexingb@2409:8902:78c2:6568:358e:499e:2c1d:22ad)
[05:21:15] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[05:23:01] *** Joins: cq-work (~Z_Lund@user/cq-work)
[05:24:01] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:25:56] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:27:27] <yolo> InPhase: no sorry, it has 500MB memory with ARM9 cpu runs linux, but the app is to control something in near-real-time
[05:27:36] <yolo> s/no sorry/no,sorry/
[05:28:07] <yolo> it has FPGA that we can do some IO mux
[05:29:54] <InPhase> What timescale of real-time?
[05:30:39] <yolo> realtime is not about time scale, it's about must-be-on-time, for this case, it's milliseconds
[05:31:09] <yolo> anyways i must limit C subject here :)
[05:32:14] <InPhase> Milliseconds is a lot of cycles for an ARM9 running Linux.  Did you try benchmarking with exceptions?  That sounds easy to hit.
[05:33:36] <InPhase> You'll miss if you are deallocating massive complicated things on stack unwinding, but, presumably by design you wouldn't do that.
[05:34:25] <InPhase> s/deallocating/destructing/
[05:35:49] <RandomReader> you can usually control what throws fairly well, if that's the concern
[05:38:46] <RandomReader> ...skimming back over the earlier question, you're concerned about stdlib specifically? I would think there are other concerns before you even get to exceptions in that sense
[05:38:47] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:ae38:59b7:e480:2e71)
[05:40:05] <RandomReader> e.g. many of the exception flows come from dynamic allocation handling, but that has no time bounds in a generic sense, so I'd expect you'd want better control over that .. and once you get that control, you also control exactly what throws and when
[05:40:24] <RandomReader> it should be similar for most of the exceptions in stdlib in general: there's usually a way to avoid them ever occurring
[05:40:31] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:ae38:59b7:e480:2e71) (Client Quit)
[05:40:47] <RandomReader> but I'd expect the primary concern to be about the operations you're trying to do in the first place, whether they're sufficiently constrained for your needs
[05:41:28] <RandomReader> exceptions themselves you can measure like InPhase mentioned, at which point they'll probably end up as a tool you can use if you choose to
[05:41:53] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:5cf4:74f6:864:eeb4)
[05:42:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:10] *** ChanServ sets mode: +v npaperbot
[05:42:41] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[05:43:14] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:44:20] *** Joins: cq-work (~Z_Lund@user/cq-work)
[05:44:59] <RandomReader> maybe put another way, the *language* has exceptions, which should be just another tool and not something you have to explicitly avoid
[05:45:23] <RandomReader> the *library* probably doesn't meet your constraints everywhere, but that isn't about exceptions
[05:51:44] <InPhase> And generally tight code sections should also not throw exceptions unless things are already failing.
[05:52:18] <InPhase> Exceptions are mostly about what you do when things are already going wrong.
[05:56:00] <yolo> will benchmark it sometime indeed, thanks!
[05:56:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:492b:bea1:e3dc:aaab)
[05:56:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:492b:bea1:e3dc:aaab) (Changing host)
[05:56:06] *** Joins: skapata (~Skapata@user/skapata)
[05:58:36] *** Joins: ferdna (~ferdna@user/ferdna)
[06:05:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:07:37] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:08:05] *** Joins: artok_ (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[06:09:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:10:37] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 240 seconds)
[06:12:37] *** Quits: hexingb (~hexingb@2409:8902:78c2:6568:358e:499e:2c1d:22ad) (Ping timeout: 240 seconds)
[06:13:09] *** Joins: hexingb (~hexingb@111.30.224.20)
[06:13:50] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[06:13:57] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 240 seconds)
[06:19:03] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d142:9ff8:db64:1336) (Ping timeout: 256 seconds)
[06:19:21] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:24:09] *** Quits: hexingb (~hexingb@111.30.224.20) (Ping timeout: 256 seconds)
[06:24:32] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:26:27] *** Joins: seninha (~seninha@user/seninha)
[06:32:39] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:37:56] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:41:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:58b3:64eb:a057:2f5c)
[06:43:45] <AmR> I need some function like printf and wprintf but can work with "" And L""
[06:47:11] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[06:49:50] *** Joins: sunny933 (~sunny93@wireguard/tunneler/sunny93)
[06:50:27] *** Quits: zoraj (~zoraj@209.126.81.159) (Quit: ZNC - https://znc.in)
[06:51:25] *** Quits: sunny93 (~sunny93@wireguard/tunneler/sunny93) (Ping timeout: 240 seconds)
[06:51:25] *** sunny933 is now known as sunny93
[06:51:38] *** Joins: zoraj (~zoraj@209.126.81.159)
[06:52:35] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[06:53:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:58b3:64eb:a057:2f5c) (Ping timeout: 256 seconds)
[06:54:05] <RandomReader> there isn't one in the standard library .. it's a difficult problem in general because of encodings
[06:54:09] <RandomReader> what's your use case?
[06:55:12] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:58:43] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 256 seconds)
[06:58:47] *** Joins: adeliktas3 (~adeliktas@i59F5FC83.versanet.de)
[07:00:17] *** Quits: adeliktas (~adeliktas@i59F52850.versanet.de) (Ping timeout: 240 seconds)
[07:00:17] *** adeliktas3 is now known as adeliktas
[07:06:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:06:56] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:09:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[07:09:57] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 250 seconds)
[07:11:42] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:20:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[07:24:28] <AmR> RandomReader: I want make #if UNICODE use wpartinf #else use printf
[07:24:39] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:448e:2f95:fd23:bf53)
[07:28:39] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[07:30:39] *** Joins: cq-work (~Z_Lund@user/cq-work)
[07:34:11] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[07:39:56] *** Joins: df00z (~df00z@cpe-104-229-40-4.rochester.res.rr.com)
[07:40:19] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[07:41:58] *** Joins: cq-work (~Z_Lund@user/cq-work)
[07:42:17] <df00z> hey - Is shared_ptr the best option for implementing like an observer pattern?¬† Whereas I have a pure virtual interface class.¬† I'm building a library that provides the same API for web sockets between webassembly and Windows\Linux native.
[07:42:49] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[07:43:08] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:43:25] <df00z> I want to pass to a websocket class a listener class for event handling, basically.¬† It's working fine.¬† I am wondering if there's a better way.¬†¬† Probably not.¬† I am just used to reference counting in python\java where it's basically the default of what its doing behind the scenes
[07:44:43] <Alipha> df00z: so you're thinking you should give the listener class a std::shared_ptr<websocket>?
[07:45:24] <df00z> websocket class a lshared_ptr<WebSocketEventListener>
[07:45:37] <df00z> Other way around, basically.
[07:46:33] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[07:46:57] <Alipha> df00z: is WebSocketEventListener a base class?
[07:46:58] <df00z> I do have it working.¬† C bindings to javascript and back in Emscripten is a bit funky but not too bad.
[07:47:04] <df00z> Nah, a pure virtual class
[07:47:19] <df00z> so the person using the library would make a class that inherits that class and implement the event listeners
[07:47:36] <df00z> It's identical to how Java event listeners work I guess
[07:47:53] <df00z> Just have seen the pattern, it works well, I like it.
[07:48:16] *** Joins: cq-work (~Z_Lund@user/cq-work)
[07:48:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[07:49:22] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:52:19] <Alipha> df00z: so, the person using the library would make a Foo class that implements WebSocketEventListener. the person would create a Foo object, give it to the WebSocket object and tell the WebSocket to start sending messages to the Foo object. then at some point, the person would want to stop listening for events and remove the Foo object from the WebSocket?
[07:52:35] <df00z> Exactly
[07:53:11] <df00z> shared_ptr sounds reasonable.¬†¬† WebSocket is owning a reference to it.
[07:53:23] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:53:44] <Alipha> df00z: erhm. actually, it seems like the person is the "owner" of the Foo object. it's the person who wants to decide when to create the Foo object and how long to keep it around for
[07:54:43] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[07:55:23] <df00z> I mean sure.¬†¬†¬† And I can't think of where or why one might want to do it on heap and not stack.
[07:55:29] <df00z> Which is why I was like hrm is shared_ptr right
[07:56:01] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[07:56:05] <Alipha> df00z: i actually think WebSocket should have a WebSocketEventListener*, not a std::shared_ptr<WebSocketEventListener>
[07:56:34] *** Joins: cq-work (~Z_Lund@user/cq-work)
[07:56:40] <df00z> Is that a good practice in modern C++?¬†¬† If the pointer goes out of scope or gets deleted...there's no protection
[07:57:05] <df00z> weak_ptr, or the dev should remember to unset the listener....or let both go out of scope
[07:58:24] <Alipha> presumably the WebSocketEventListener should know who it's registered to and its destructor should unregister itself from the WebSocket
[07:59:01] <df00z> Honestly that would work.
[07:59:16] <df00z> Thanks.¬† Didn't think of that.
[07:59:45] <Alipha> df00z: it's actually very rare to use std::shared_ptr. there's almost always a single "user" who's responsible for deleting the object
[08:00:59] <Alipha> and raw pointers are fine and are common in c++. it's just you should never have to manually delete objects yourself. "non-owning" raw pointers are fine
[08:01:30] <df00z> Ah, really?¬† I'm very OK with that.
[08:04:13] <df00z> I usually don't do circular references like that unless they are necessary.¬†¬† Ie this case the observer would know of the observable which is not what I'm used to in that pattern from other languages
[08:04:15] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:448e:2f95:fd23:bf53) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[08:04:38] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:448e:2f95:fd23:bf53)
[08:05:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:448e:2f95:fd23:bf53) (Client Quit)
[08:06:02] <df00z> Thanks!
[08:06:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:06:57] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[08:06:59] <Alipha> np
[08:07:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[08:07:55] *** Joins: Xardas (~Xardas@149.233.51.127)
[08:08:52] *** Joins: cq-work (~Z_Lund@user/cq-work)
[08:10:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:24:33] *** Joins: hexingb (~hexingb@117.136.55.67)
[08:27:40] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:34:50] <AmR> What is bad in this " https://godbolt.org/z/zdr84WfsK "?
[08:40:13] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:44:33] <Alipha> interesting. switching between printf and wprintf has bizarre behavior. i don't know enough about it to explain it: https://godbolt.org/z/Yv6aYPnc1
[08:44:53] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[08:46:10] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[08:50:21] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[08:52:07] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:00:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:01:10] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[09:01:31] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:03:59] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[09:06:47] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[09:07:21] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[09:07:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:07:42] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:07:42] *** gentooclimax is now known as climax
[09:07:53] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[09:10:04] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4) (Quit: Quit)
[09:10:11] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[09:11:08] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:11:19] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:12:57] *** Quits: hexingb (~hexingb@117.136.55.67) (Ping timeout: 240 seconds)
[09:14:41] *** Joins: cq-work (~Z_Lund@user/cq-work)
[09:16:53] *** Quits: climax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[09:20:37] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 240 seconds)
[09:22:32] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[09:22:59] *** Joins: cq-work (~Z_Lund@user/cq-work)
[09:42:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:10] *** ChanServ sets mode: +v npaperbot
[09:46:48] <very_sneaky> Alipha: seems like one disables the other
[09:46:52] <very_sneaky> strange
[10:00:47] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[10:03:36] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:07:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:11:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:16:43] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[10:18:17] *** Joins: cq-work (~Z_Lund@user/cq-work)
[10:37:39] *** Joins: callq (~callq@2409:4062:2e9e:2081:816d:3026:9fb1:625b)
[10:47:39] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[10:49:49] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[10:52:59] *** Joins: cq-work (~Z_Lund@user/cq-work)
[10:59:19] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:59:35] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[11:00:01] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[11:08:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:09:25] *** Quits: artok_ (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[11:11:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:13:09] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[11:15:26] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[11:16:17] *** Quits: amit_ (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf) (Ping timeout: 240 seconds)
[11:19:58] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[11:22:54] *** Joins: xkuru (~xkuru@user/xkuru)
[11:24:17] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 240 seconds)
[11:25:26] <RandomReader> IIRC the standard streams get set based on first type used
[11:26:06] <RandomReader> because it's an unbounded stream and the encoding sequences are stateful (in general), there aren't any boundaries it can switch on
[11:27:47] *** Joins: toverna (~uni@2.95.60.140)
[11:30:17] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Ping timeout: 240 seconds)
[11:34:17] <RandomReader> C11: http://port70.net/~nsz/c/c11/n1570.html#7.21.2p4
[11:34:56] <RandomReader> hm, I wonder if C++ has an equivalent to fwide
[11:37:35] *** Quits: toverna (~uni@2.95.60.140) (Quit: Konversation terminated!)
[11:38:20] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[11:42:31] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[11:43:55] <RandomReader> oh it doesn't need them, all the iostreams are typed .. duh
[11:44:17] *** Joins: cq-work (~Z_Lund@user/cq-work)
[11:44:46] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[11:49:17] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 240 seconds)
[11:51:36] *** Joins: cq-work (~Z_Lund@user/cq-work)
[12:00:57] *** Joins: Simplar (~Simplar@188.163.93.241)
[12:04:03] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[12:04:33] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[12:05:22] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[12:06:57] *** Quits: callq (~callq@2409:4062:2e9e:2081:816d:3026:9fb1:625b) (Ping timeout: 240 seconds)
[12:07:56] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b85b:7732:789a:17bc)
[12:08:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:12:19] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:12:25] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b85b:7732:789a:17bc) (Ping timeout: 250 seconds)
[12:21:08] *** Joins: robod34 (~Username@79.113.227.62)
[12:30:27] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[12:31:31] <antto> !fact
[12:31:32] <nolyc> antto: Types describe objects, references, or functions.
[12:34:06] *** Joins: szymon (~ugh@5.253.206.218)
[12:35:13] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[12:36:54] *** Joins: cq-work (~Z_Lund@user/cq-work)
[12:40:16] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[12:40:32] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:43:09] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[12:45:13] *** Joins: cq-work (~Z_Lund@user/cq-work)
[12:51:11] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:51:13] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[12:51:26] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:51:57] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:cb1b:59a4:8a8b:230c) (Remote host closed the connection)
[12:52:01] *** Joins: teepee (~teepee@openscad/teepee)
[12:52:56] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:c6dd:f827:618b:869d)
[12:56:14] *** Quits: Kerr (~quassel@2601:602:ce00:c8d0:c6dd:f827:618b:869d) (Remote host closed the connection)
[12:57:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5c57:f5a0:9c0c:92b3)
[13:09:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:13:05] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[13:36:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:37:03] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:37:17] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2133:2367:93c2:891d) (Ping timeout: 240 seconds)
[13:42:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:10] *** ChanServ sets mode: +v npaperbot
[13:53:31] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[13:53:54] *** Joins: DSpider (~DSpider@82.79.237.46)
[13:55:21] *** Joins: rg (~r-g@163.172.90.106)
[13:55:44] *** Joins: proller (~p@80.240.216.69)
[13:56:35] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[13:57:08] *** Joins: cq-work (~Z_Lund@user/cq-work)
[14:01:37] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 250 seconds)
[14:03:26] *** Joins: cq-work (~Z_Lund@user/cq-work)
[14:08:13] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:09:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:13:35] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:15:15] <xkoncek> did static_vector not make it into stdlib?
[14:16:17] *** Joins: Kerr (~quassel@2601:602:ce00:c8d0:1f10:2cdc:eae4:98d8)
[14:16:20] <LordKalma> nope
[14:23:39] *** Joins: zen_coder (~zen_coder@141.113.64.75)
[14:25:59] <antto> static_vector?
[14:27:30] <antto> !static_vector
[14:27:31] <nolyc> antto: Error: "static_vector" is not a valid command.
[14:27:40] <LordKalma> there's one in boost
[14:27:50] *** Joins: MatSharrow (~matthew@53.115.9.51.dyn.plus.net)
[14:28:17] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[14:28:22] <antto> as if i drink boost::coffee every morning
[14:29:43] <LordKalma> https://www.boost.org/doc/libs/1_78_0/doc/html/container/non_standard_containers.html#container.non_standard_containers.static_vector
[14:31:11] *** Joins: hexingb (~hexingb@36.155.28.147)
[14:37:35] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[14:40:01] *** Joins: kilitary (~kilitary@188.242.187.4)
[14:40:49] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[14:41:35] *** Joins: kevr (~kevr@user/kevr)
[14:46:12] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[14:46:42] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[14:47:32] *** Quits: p-i- (~Ohmu@2403:6200:8978:7ad7:d1c7:ded6:188d:580e) (Quit: Leaving...)
[14:49:17] *** Quits: szymon (~ugh@5.253.206.218) (Ping timeout: 256 seconds)
[14:53:35] *** Quits: zen_coder (~zen_coder@141.113.64.75) (Quit: Konversation terminated!)
[14:53:50] *** Joins: zen_coder (~zen_coder@141.113.64.75)
[14:59:05] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[15:04:55] *** Joins: Simplar (~Simplar@188.163.93.241)
[15:05:12] *** Quits: Simplar (~Simplar@188.163.93.241) (Client Quit)
[15:05:49] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3444:f67f:24ed:5c4c:c6be)
[15:10:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:14:13] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:21:40] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Quit: boo)
[15:21:57] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[15:29:04] *** Joins: markong (~kvirc@213.146.188.203)
[15:29:17] *** micronnn is now known as micronn
[15:32:37] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 250 seconds)
[15:34:45] *** Joins: cq-work (~Z_Lund@user/cq-work)
[15:37:42] *** Joins: seninha (~seninha@user/seninha)
[15:45:07] *** Joins: lucho666 (~admred201@45.178.2.1)
[15:45:14] *** Joins: benicocamela (~admred201@45.178.2.1)
[15:45:27] *** Quits: benicocamela (~admred201@45.178.2.1) (Remote host closed the connection)
[15:47:25] *** Quits: pepperoni (~pepperoni@172.58.99.50) (Read error: Connection reset by peer)
[15:47:43] *** Joins: pepperoni (~pepperoni@172.58.99.50)
[15:48:17] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:50:40] *** Quits: kilitary (~kilitary@188.242.187.4) (Read error: Connection reset by peer)
[15:52:11] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[15:55:00] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: Connection reset by peer)
[16:01:53] *** Joins: Uswald (~leandre@2a04:cec0:119c:a4fe:eddf:c883:bc96:ae22)
[16:01:53] *** Quits: Uswald (~leandre@2a04:cec0:119c:a4fe:eddf:c883:bc96:ae22) (Changing host)
[16:01:53] *** Joins: Uswald (~leandre@user/Uswald)
[16:04:05] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 256 seconds)
[16:04:27] *** Joins: hexingb (~hexingb@180.212.210.25)
[16:07:18] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 250 seconds)
[16:07:46] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[16:10:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:14:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:23:01] *** Quits: hexingb (~hexingb@180.212.210.25) (Ping timeout: 256 seconds)
[16:38:18] *** Joins: Simplar (~Simplar@188.163.93.241)
[16:39:08] *** Joins: pulse (~pulse@user/pulse)
[16:44:38] *** Joins: chris64 (~chris@user/chris64)
[16:46:38] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[16:48:00] *** Joins: hexingb (~hexingb@180.212.210.25)
[16:54:54] *** Quits: pepperoni (~pepperoni@172.58.99.50) (Read error: Connection reset by peer)
[16:55:26] *** Joins: pepperoni (~pepperoni@172.58.99.50)
[16:58:57] <pulse> the official cmake tutorial is borderline useless
[16:59:31] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:178:7edf:7ae2:b6e7)
[16:59:31] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:178:7edf:7ae2:b6e7) (Changing host)
[16:59:31] *** Joins: skapata (~Skapata@user/skapata)
[16:59:34] <pulse> idk how you can mess up a tutorial this badly
[17:04:59] *** Joins: mono_jamoon (~mono_jamo@117.200.234.87)
[17:08:21] *** Quits: hexingb (~hexingb@180.212.210.25) (Ping timeout: 256 seconds)
[17:10:09] *** Joins: plastico (~plastico@neomutt/plastico)
[17:11:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:11:40] *** Quits: MatSharrow (~matthew@53.115.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[17:14:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:17:33] *** Joins: hexingb (~hexingb@36.155.28.147)
[17:18:00] *** Quits: pepperoni (~pepperoni@172.58.99.50) (Read error: Connection reset by peer)
[17:18:25] *** Joins: pepperoni (~pepperoni@172.58.99.50)
[17:23:25] *** Joins: kilitary (~kilitary@188.68.215.221)
[17:28:17] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 256 seconds)
[17:30:38] *** Quits: markong (~kvirc@213.146.188.203) (Read error: Connection reset by peer)
[17:31:17] *** Quits: kilitary (~kilitary@188.68.215.221) (Ping timeout: 240 seconds)
[17:33:23] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[17:35:27] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:38:11] <mono_jamoon> Hi guys, I am a bit new to Cpp. Was thinking about going through an Open Source Project or a YouTube series (regarding an end to end project) which is easy to build/run/debug
[17:38:31] <mono_jamoon> Problem is that there are a lot of open source projects & very few of them are standalone cpp
[17:38:52] <mono_jamoon> I found this during my search: https://github.com/David-Haim/concurrencpp
[17:39:02] <mono_jamoon> Seems to be easy to build and run.
[17:39:24] <pulse> you can always just make your own projects
[17:40:24] <mono_jamoon> True. With existing projects I would be able to see how Cpp tools are leveraged & (maybe) learn some good coding practices as well.
[17:41:00] <pulse> sure
[17:41:05] <pulse> you should probably combine both approaches
[17:42:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:10] *** ChanServ sets mode: +v npaperbot
[17:43:44] <mono_jamoon> Does any open source project come to mind which I could clone, build and debug?
[17:45:46] <pulse> the problem is that every C++ project does its own unique thing for building, debugging, file hierarchy etc
[17:45:53] <pulse> there's no single standard practice
[17:46:20] <pulse> basically, you might want to look at several projects
[17:46:48] *** Quits: sonOfRa (sonOfRa@user/sonofra) (Remote host closed the connection)
[17:48:03] <mono_jamoon> Understood
[17:48:13] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[17:48:22] *** Joins: callq (~callq@92.119.19.230)
[17:52:02] *** Joins: kilitary (~kilitary@188.68.215.221)
[17:52:11] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[17:53:56] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:54:26] *** Quits: Cyp (~cyp@213.237.88.120) (Read error: Connection reset by peer)
[18:01:05] *** Joins: Cyp (~cyp@213.237.88.120)
[18:03:05] *** Quits: kilitary (~kilitary@188.68.215.221) (Ping timeout: 256 seconds)
[18:10:57] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[18:11:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:15:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:19:48] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:29:50] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[18:37:40] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:38:58] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 250 seconds)
[18:40:17] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Read error: Connection reset by peer)
[18:40:39] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[18:41:04] *** Joins: cq-work (~Z_Lund@user/cq-work)
[18:41:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:48:35] *** Joins: x_kuru (~xkuru@user/xkuru)
[18:49:19] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 256 seconds)
[18:50:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[18:54:52] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:55:22] *** Joins: markong (~kvirc@213.146.188.203)
[19:00:00] *** Joins: ipe (~ipe@d4z1v1bknl0mm2j9464-4.rev.dnainternet.fi)
[19:04:29] *** Joins: amit_ (~amit@2601:445:447f:a2f6:5ef4:eeef:ce07:ccaf)
[19:08:15] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[19:09:46] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[19:10:23] *** Joins: cq-work (~Z_Lund@user/cq-work)
[19:12:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:16:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:26:57] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[19:28:42] *** Joins: cq-work (~Z_Lund@user/cq-work)
[19:30:01] *** Quits: tlophd_becky__ (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Quit: Leaving)
[19:30:42] *** Joins: Miyu (~hackkitte@94.31.104.136)
[19:32:33] *** Joins: jsbach (~jsbach@2a01:c23:64ed:9900:3a00:ede3:d41a:ce11)
[19:33:34] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 250 seconds)
[19:35:47] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[19:37:37] *** Miyu is now known as hackkitten
[19:38:19] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[19:39:57] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:49:06] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[19:52:17] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 240 seconds)
[19:57:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:00:46] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[20:05:51] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:06:16] <xkoncek> antto: do you happen to know the equation or the process in general, which applies to sounds that happen far away? like is it some sort of low-pass filter?
[20:07:57] <antto> tricky topic
[20:08:14] <antto> multiple things would happen..
[20:11:07] <antto> sound waves thru air.. iirc the high frequencies would get attenuated, the overal energy, and then there's the delay (speed of sound), possibly reverberation..
[20:12:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:13:24] <xkoncek> yeah, so i assume all the frequencies get absorbed, but higher ones get absorbed faster
[20:14:38] <antto> yeah but don't quote me on that
[20:16:05] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:16:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:21:21] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[20:22:25] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:23:00] *** Joins: cq-work (~Z_Lund@user/cq-work)
[20:25:48] <leonardus> Is there any best resource I should look at for common C++ pitfalls?
[20:25:59] <leonardus> It seems like it's very easy to do something "the wrong way" in C++
[20:26:12] <LordKalma> no
[20:26:18] <LordKalma> everybody will have slightly different best practices
[20:26:23] <LordKalma> that said
[20:26:27] <LordKalma> watch cppcon talks :=
[20:26:41] *** Quits: AssKoala (~asskoala@user/asskoala) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[20:26:58] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[20:26:58] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[20:26:58] *** Joins: AssKoala (~asskoala@user/asskoala)
[20:27:05] <ville> leonardus: wrong way according to the language rules?
[20:27:09] <TinoDidriksen> Look at C code, then don't do it like that.
[20:27:48] <LordKalma> savage
[20:27:48] <sbrothy> if you come from C be wary of taking idioms with you.
[20:28:36] <leonardus> ville: Wrong way according to, for example, performance. Off the top of my head, using a vector instead of a list when doing a lot of inserting/deleting in the middle
[20:28:57] <TinoDidriksen> You'd be surprised. Often a vector is still better in that case.
[20:28:59] <leonardus> I am still new to C++ but that's something I learned to know
[20:29:11] <leonardus> TinoDidriksen: really?
[20:29:32] <leonardus> When should a list be used?
[20:29:34] <LordKalma> depends on the ratio of deletion+insertion/transversal
[20:29:42] <LordKalma> when said ratio is really big
[20:29:49] <ville> leonardus: when you measure it beats vector
[20:29:50] <LordKalma> and by big it means "you measured it to be relevant"
[20:30:23] <LordKalma> leonardus, everybody here will insist that before you measured nothing is better than anything else
[20:30:26] <TinoDidriksen> The cost of list in other areas often outweighs the cost of vector-middle-manipulation.
[20:30:29] <ville> leonardus: to solve 93.62% of problems all you need is a dynamic array and hash table types. that's it
[20:30:44] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:b2c7:8af1:1d8:3fe4)
[20:30:44] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:b2c7:8af1:1d8:3fe4) (Changing host)
[20:30:44] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:30:59] <ville> for the remaining 8.94% of cases you write something custom
[20:31:03] <leonardus> Anyway that's what I mean with pitfalls/best practices
[20:31:20] <LordKalma> it's like people hardcore lock free queues and they end up being worse than just adding a mutex
[20:31:26] <LordKalma> before you measure, nothing is better
[20:31:40] <LordKalma> *like when people code hardcore
[20:31:50] <ville> leonardus: well it's not really c++ specific. be a good engineer
[20:31:58] <LordKalma> yap
[20:32:18] <LordKalma> in terms of language stuff, lean the idioms, like RAII, most notability
[20:32:29] <LordKalma> RAII is *the* defining feature of C++ I'd argue
[20:33:06] <leonardus> Ok
[20:33:15] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 256 seconds)
[20:33:23] <leonardus> Is Effective C++ a good book to read?
[20:34:51] <ville> suppose it's not the worst
[20:36:33] <ville> i'd argue no book is bad to read. it's bad to read any book with out your thinking cap on
[20:36:44] <LordKalma> indeed
[20:37:01] <ville> even if book teaches horrible things, it's still good to read if you recognize it
[20:37:54] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:39:31] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:40:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[20:40:47] <rpav> probably "is this book good/bad" is more shorthand for "does this book teach terrible things i should be aware of while reading it if i choose to do so"
[20:41:19] <rpav> and/or "is this book obtuse or otherwise poorly-written" ü§î
[20:41:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:45:02] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[20:46:16] *** Joins: sigma_ (~sigma@164.215.206.157)
[20:47:17] <ville> that's a tricky one. i'd say "modern c++ design" is a good book, but i wouldn't put anything from it into use
[20:47:33] <LordKalma> I read professional C++
[20:47:40] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[20:47:47] <ville> (been over a decade since i last looked at it, so i can't exactly remember what's in it)
[20:47:53] <LordKalma> it's decent but then it goes on to bang about micro-service architectures which.. whatever
[20:48:29] <rpav> heh hopping between JS and C++ is mildly confusing at times... for/of or for/: or let or auto or Math.abs or std::abs
[20:48:50] <rpav> i wonder if there are any natural languages close enough people confuse them when speaking/writing
[20:52:28] *** Joins: andreasbuhr (~quassel@p549dbd79.dip0.t-ipconnect.de)
[20:52:47] *** Quits: andreasbuhr (~quassel@p549dbd79.dip0.t-ipconnect.de) (Client Quit)
[20:55:06] <sigma_> hi, i have qustion : if sorting doesnt matter i can write a map with two thread in the same time? like t1 is writting and t2 can allocate a memory. i think we cant but i need to be sure.
[20:55:40] *** Quits: mono_jamoon (~mono_jamo@117.200.234.87) (Quit: Leaving)
[20:55:50] <rpav> std::map? sorting _does_ matter but is sortof orthogonal to whether it's threadsafe, which it isn't
[20:58:53] <sigma_> yes, i think this not safe becuase map allocate in dynamic memory and every time can be change, but on thats time t1 is writing. thats right? we get error?
[20:59:40] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[21:02:45] <ville> data races are just undefined behaviour. anything can happen as a result. no errors need to be emitted
[21:06:21] *** Joins: ethrl (~ethereal@user/doforlove33)
[21:06:55] <sigma_> :)
[21:10:28] <Hello71> nasal demons incoming
[21:12:02] *** Quits: ethrl (~ethereal@user/doforlove33) (Quit: WeeChat 2.8)
[21:13:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:16:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:24:18] *** Joins: kilitary (~kilitary@188.68.215.221)
[21:27:53] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4)
[21:34:27] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[21:36:19] *** Joins: cq-work (~Z_Lund@user/cq-work)
[21:37:17] *** Quits: zen_coder (~zen_coder@141.113.64.75) (Ping timeout: 240 seconds)
[21:40:36] <rpav> sigma_: more that map rearranges its internal structure on insert/delete
[21:40:45] <rpav> dynamic allocations are threadsafe
[21:41:39] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Remote host closed the connection)
[21:42:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:05] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[21:42:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:11] *** ChanServ sets mode: +v npaperbot
[21:42:57] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[21:44:38] *** Joins: cq-work (~Z_Lund@user/cq-work)
[21:48:43] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[21:50:42] *** Joins: rajkosto (~rajkosto@93-86-127-103.dynamic.isp.telekom.rs)
[21:51:02] *** Quits: pepperoni (~pepperoni@172.58.99.50) (Read error: Connection reset by peer)
[21:51:07] *** Quits: kilitary (~kilitary@188.68.215.221) (Ping timeout: 256 seconds)
[21:51:28] *** Joins: pepperoni (~pepperoni@172.58.99.50)
[21:52:54] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 260 seconds)
[21:54:57] *** Joins: cq-work (~Z_Lund@user/cq-work)
[21:57:25] *** Joins: ferdna (~ferdna@user/ferdna)
[22:02:13] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 256 seconds)
[22:04:16] *** Joins: cq-work (~Z_Lund@user/cq-work)
[22:12:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[22:13:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:16:10] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[22:17:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[22:19:24] *** Joins: xkuru (~xkuru@user/xkuru)
[22:26:09] <Alipha> sigma_: for everything in std, unless otherwise noted, if a thread is writing to a std object/container, no other thread can read or write at the same time
[22:26:55] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:27:38] *** Joins: x_kuru (~xkuru@user/xkuru)
[22:28:31] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[22:28:41] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[22:28:48] <Alipha> leonardus: the CppCoreGuidelines will tell you best practices... which is the opposite of pitfalls, but perhaps still helpful
[22:30:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:31:39] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Quit: leaving)
[22:34:11] *** Joins: Uswald (~leandre@2a01cb040075f900607ca9235dcc5cbc.ipv6.abo.wanadoo.fr)
[22:34:11] *** Quits: Uswald (~leandre@2a01cb040075f900607ca9235dcc5cbc.ipv6.abo.wanadoo.fr) (Changing host)
[22:34:11] *** Joins: Uswald (~leandre@user/Uswald)
[22:35:09] *** Joins: kilitary (~kilitary@82.148.25.66)
[22:36:13] <Alipha> ... std::list<T> really needs a function that takes a T* and returns an iterator to that element. Then std::list would be useful
[22:39:33] *** Joins: capjack[m] (~raffaem@2001:470:69fc:105::393)
[22:51:10] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[22:54:05] <xkoncek> but then you can just go the other way around and store list iterators instead of pointers
[22:56:05] *** Quits: autark (~autark@ti0048a400-0869.bb.online.no) (Read error: Connection reset by peer)
[22:56:17] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[22:59:54] *** Joins: Azem (~haise01@user/haise01)
[23:01:11] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[23:03:17] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 240 seconds)
[23:13:55] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:14:31] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[23:17:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[23:21:50] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:22:38] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:26:05] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[23:34:39] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[23:37:07] <Alipha> xkoncek: the idea is that objects can remove themselves from the list by using `this` to get an iterator. Sure, the object could store an iterator to itself, but that seems rather silly when it's completely feasible to just use `this`
[23:37:44] <xkoncek> yes, just like many things that ought to...
[23:41:25] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 250 seconds)
[23:42:19] *** Joins: pulse (~pulse@user/pulse)
[23:44:07] *** Joins: cq-work (~Z_Lund@user/cq-work)
[23:44:37] <sbrothy> I see "#pragma once" has some advantages. It may just be me. It's deeply ingrained in me to start a header with #include guards tho.
[23:45:07] <sbrothy> wiki says "less code" but really...
[23:46:07] <pulse> i use both because i am cool
[23:46:42] <sbrothy> hah. maybe its just a long time ago i worked on a really big projec t
[23:47:33] <sbrothy> yeah. all my functions aer lambdas because thats how c++ should look
[23:49:17] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 240 seconds)
[23:49:18] <sbrothy> also ovreloading the comma operator is a given :)
[23:49:43] <sbrothy> preferrable in a macro somewhere
[23:50:05] <sbrothy> time to go home and sleep i think
[23:52:08] <Alipha> sbrothy: unfortunately, then compile errors are crap because they just say "lambda" instead of a function name
[23:52:26] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 245 seconds)
[23:52:32] <sbrothy> yeah. debugging would be really fun
[23:52:35] *** Quits: kilitary (~kilitary@82.148.25.66) (Ping timeout: 252 seconds)
[23:52:41] <sbrothy> lots of overtime
[23:52:43] *** Joins: cq-work (~Z_Lund@user/cq-work)
[23:53:05] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[23:54:46] <sbrothy> std::map<boost::uuids::uuid, std::function<void(void*)>> all_my_functions;
[23:55:15] <sbrothy>  //TODO: buy rope
[23:58:21] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
