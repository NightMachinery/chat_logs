[00:01:54] *** Quits: henistein (~henistein@2001:8a0:fcbd:d801:43ad:587b:4327:a09a) (Quit: Client closed)
[00:24:04] <Klinda> same notes, same drawings
[00:24:18] <Klinda> now I understand why this is a bad course
[00:25:41] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[00:48:12] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Read error: Connection reset by peer)
[00:51:18] *** Joins: henistein (~henistein@2001:8a0:fcbd:d801:43ad:587b:4327:a09a)
[00:53:56] *** Joins: cslr (~cslr@85-76-34-233-nat.elisa-mobile.fi)
[01:24:30] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:25:04] <dostoyevsky2> Klinda: what university are you going to?
[01:36:04] <tomeaton17> My applied machine learning course is based on the book learning from data http://amlbook.com/ which is an excellent book.
[01:36:05] <SigmoidFroid> ⇒  Learning From Data - A Short Course
[01:39:15] <mefistofeles> tomeaton17: that ones seems very basic, is that only introductory?
[01:40:14] <tomeaton17> mefistofeles yes that was the first module to introduce learning. further modules go into a lot more depth.
[01:41:24] <mefistofeles> ok, I see
[01:41:47] <mefistofeles> I mean, it can be pretty hard if you go into the details, but I wouldn't expect an *applied* ML course to dive into tat
[01:41:50] <mefistofeles> *that
[01:42:59] <tomeaton17> I would say that it goes reasonably in depth. we did skip the proof of the VC generalisation bound however
[01:50:36] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:54:34] *** Quits: henistein (~henistein@2001:8a0:fcbd:d801:43ad:587b:4327:a09a) (Quit: Client closed)
[01:55:06] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:56:35] <Klinda> dostoyevsky2: italian one
[01:56:59] <Klinda> thanks tomeaton17 does it talk about logistic regression?
[01:57:49] <tomeaton17> Klinda yes that is covered.
[01:58:53] <Klinda> but do you have to pay it?
[01:59:46] <tomeaton17> I got a copy from the university library
[02:03:43] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[02:08:32] *** Joins: cslr2 (~cslr2@85-76-34-233-nat.elisa-mobile.fi)
[02:14:00] *** Quits: cslr2 (~cslr2@85-76-34-233-nat.elisa-mobile.fi) (Ping timeout: 268 seconds)
[02:32:31] *** Joins: cslr2 (~cslr2@85-76-34-233-nat.elisa-mobile.fi)
[02:55:15] *** Joins: shoky_ (uuuggg@141.226.193.67)
[02:58:02] *** Quits: shoky (uuuggg@141.226.193.67) (Ping timeout: 252 seconds)
[03:00:58] *** Quits: cslr2 (~cslr2@85-76-34-233-nat.elisa-mobile.fi) (Ping timeout: 260 seconds)
[03:05:19] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 265 seconds)
[03:07:09] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[03:15:19] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:33:33] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[03:36:38] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 268 seconds)
[03:53:35] *** Quits: Celelibi (celelibi@user/celelibi) (Ping timeout: 252 seconds)
[04:02:33] *** Joins: Celelibi (celelibi@user/celelibi)
[04:16:52] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[04:54:03] *** Joins: henistein (~henistein@2001:8a0:fcbd:d801:43ad:587b:4327:a09a)
[05:02:23] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[05:02:49] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[06:16:57] *** Quits: henistein (~henistein@2001:8a0:fcbd:d801:43ad:587b:4327:a09a) (Quit: Client closed)
[06:20:58] *** Quits: SiegeLord (~sl@user/siegelord) (Quit: WeeChat 2.8)
[06:23:16] *** Joins: SiegeLord (~SiegeLord@user/siegelord)
[07:13:58] *** Quits: akevinhuang (~thekevinh@user/thekevinhuang) (Ping timeout: 260 seconds)
[07:19:59] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:06:14] *** Quits: SiegeLord (~SiegeLord@user/siegelord) (Read error: Connection reset by peer)
[09:15:04] *** Joins: SiegeLord (~sl@user/siegelord)
[09:47:39] *** Joins: manti7 (~manti7@176.10.104.94)
[10:35:47] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 264 seconds)
[10:42:15] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[11:22:52] *** Joins: palasso (~palasso@user/palasso)
[12:00:42] *** Joins: Klinda (~superleag@user/klinda)
[12:13:14] <Klinda> hello, what is the softmax function with theta and the input data matrix?
[12:23:37] <Klinda> softmax =  np.exp(np.dot(theta, scores))/sum(np.exp(np.dot(theta,scores), axis=0) I wrote thissoftmax =  np.exp(np.dot(scores, theta))/sum(np.exp(np.dot(scores,theta), axis=0)
[12:23:53] <Klinda> ups :D
[12:55:50] *** Quits: SiegeLord (~sl@user/siegelord) (Quit: WeeChat 2.8)
[13:54:37] <HuntsMan> you have the equation right there
[14:06:23] *** Joins: hygl (uid16621@id-16621.tinside.irccloud.com)
[14:34:47] *** Joins: Hunts (~hunts@p4fc9a453.dip0.t-ipconnect.de)
[14:35:14] *** Quits: HuntsMan (~hunts@p4fc9a9b4.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[14:45:31] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:21:01] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[15:31:09] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[16:00:14] *** Joins: CountryNerd (~CountryNe@184.53.0.253)
[16:14:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:21:29] *** Joins: akevinhuang (~thekevinh@user/thekevinhuang)
[16:24:02] *** Joins: akevinhuang2 (~thekevinh@user/thekevinhuang)
[16:26:57] *** Quits: akevinhuang (~thekevinh@user/thekevinhuang) (Ping timeout: 256 seconds)
[17:25:10] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[17:40:49] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:42:08] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567363-170.dhcp.inet.fi)
[17:49:38] *** Joins: DnzAtWrk3 (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[17:52:31] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567363-170.dhcp.inet.fi) (Ping timeout: 256 seconds)
[18:09:17] *** Quits: DnzAtWrk3 (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:10:45] *** Joins: DnzAtWrk3 (~DnzAtWrk@mobile-access-567363-170.dhcp.inet.fi)
[18:16:03] *** Quits: hygl (uid16621@id-16621.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[18:17:41] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi)
[18:20:16] *** Quits: DnzAtWrk3 (~DnzAtWrk@mobile-access-567363-170.dhcp.inet.fi) (Ping timeout: 256 seconds)
[18:22:04] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[18:41:10] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56734f-209.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:10:49] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[19:13:08] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[19:20:08] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 268 seconds)
[19:27:12] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:35:02] *** Joins: DnzAtWrk (~DnzAtWrk@88-115-149-152.elisa-laajakaista.fi)
[19:39:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:00:04] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Ping timeout: 256 seconds)
[20:39:29] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:48:35] *** Quits: Samian (~s@user/samian) (Read error: Connection reset by peer)
[21:06:29] *** Joins: trace987 (~trace@91.66.153.65)
[21:08:34] *** Joins: SiegeLord (~sl@user/siegelord)
[21:34:24] *** Joins: Samian (~s@user/samian)
[21:41:18] *** Quits: CountryNerd (~CountryNe@184.53.0.253) (Read error: Connection reset by peer)
[22:06:25] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[22:11:42] <Klinda> it's this how you compute the loss cross-entropy: p = softmax() loss = - np.sum(y_onehot * np.log(p))
[22:11:55] <Klinda> ?
[22:12:06] <Klinda> if you have a lot of 1 the loss is high
[22:13:28] <Klinda> what does it mean ?
[22:52:54] *** Joins: causative (~halberd@user/causative)
[23:39:20] <Samian> has anyone here used cudnn ?
[23:39:43] <Samian> cudnnMultiHeadAttnForward in particular
[23:42:56] *** Joins: amazoniantoad (~jrand@pool-71-114-43-42.washdc.fios.verizon.net)
[23:43:53] <amazoniantoad> I'm trying to change the input shape of one arbitrary layer to the input shape of another arbitrary layer (I'm swapping the layers of two different neural networks). But I get an error Dimensions must be equal, but are 55 and 24 for '{{node dense_2/MatMul}} = MatMul[T=DT_FLOAT, transpose_a=false, transpose_b=false](Placeholder, dense_2/MatMul/ReadVariableOp)' with input shapes: [?,55], [24,41].
[23:44:28] <amazoniantoad> Can someone explain to me through an example how I could change the input dimensions to match the input dimensions of the layer that's being swapped out
[23:45:03] <Samian> what language? what library?
[23:48:42] <amazoniantoad> python, tensorflow
[23:48:49] <amazoniantoad> so far my solution is this
[23:49:09] <amazoniantoad> https://pastebin.com/raw/PnSrugph
[23:49:10] <SigmoidFroid> ⇒  (: No title)
[23:50:05] <amazoniantoad> brb
[23:50:08] *** Quits: amazoniantoad (~jrand@pool-71-114-43-42.washdc.fios.verizon.net) (Quit: Leaving)
[23:57:44] <Samian> you probably want something like this: gSliced = Lambda(lambda g : g[:,int(0/16):int(dim1/128),int(0/16):int(dim2/128),:])(c)
[23:57:54] <Samian> that's just a random example I copied and pasted from code I wrote long ago
[23:58:36] <Samian> The output, gSliced in my example, should match the dimensions of the next layer
[23:58:53] <Samian> the input, c, can be any dimension
[23:59:32] <Samian> hah amazoniantoad left right before he got his answer
