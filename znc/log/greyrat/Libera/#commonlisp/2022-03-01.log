[00:22:19] *** Joins: hashfunc32 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[00:24:25] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:31:01] <gjvc> is there a favoured library for filename manipulation that includes stem/suffix extraction as a provided function ?
[00:32:19] <mfiano> asdf has uiop built in to it for pathname stuff.
[00:32:34] <mfiano> Which means you already have it!
[00:32:40] <gjvc> hooray
[00:32:43] <gjvc> looking
[00:37:25] <Xach> common lisp has a nice set of pathname manipulation functions.
[00:37:55] <Xach> pathname-name, pathname-type, enough-namestring, merge-pathnames, etc are quite useful.
[00:38:13] <Xach> make-pathname ... :defaults, *default-pathname-defaults*
[00:40:08] *** Joins: notzmv (~zmv@user/notzmv)
[00:43:58] <gjvc> thank you Xach
[00:44:11] <gjvc> could someone correct my error on this loop? https://pastebin.com/NHikL7vn
[00:44:21] <gjvc> (PROGN (FORMAT T "%A%~" FILENAME)) found where keyword expected getting LOOP clause after WHEN
[00:44:58] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:45:07] <gjvc> (iterating over a directory to load a bunch of xml files)
[00:48:20] <Catie> You gotta have a DO in there before PROGN
[00:49:15] <Bike> also, don't actually need the progn. "do (format ...)" is fine
[00:49:21] <Bike> also, that's not actually a good format string
[00:50:03] <gjvc> Catie: ah! dammit
[00:50:16] <Catie> gjvc: That one trips me up a lot too!
[00:54:08] <gjvc> Bike: got the ~ and % mixed up in my head ... :-)
[00:54:56] <gjvc> fixed! https://pastebin.com/mm7EWnK2
[00:56:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:58:54] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 260 seconds)
[00:59:51] <gjvc> path-string library looks useful
[01:03:01] *** Parts: gw1 (g-w1@2600:3c03::f03c:92ff:fe2f:c92f) (bye)
[01:04:55] *** Joins: aartaka (~aartaka@5.1.53.226)
[01:05:38] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:07:37] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:11:08] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[01:12:22] *** Quits: aartaka (~aartaka@5.1.53.226) (Ping timeout: 272 seconds)
[01:12:55] *** Joins: aartaka (~aartaka@188.66.33.173)
[01:13:49] *** Quits: aartaka (~aartaka@188.66.33.173) (Read error: Connection reset by peer)
[01:14:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:14:39] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[01:14:41] *** Joins: aartaka (~aartaka@5.1.53.226)
[01:19:20] *** Quits: aartaka (~aartaka@5.1.53.226) (Ping timeout: 272 seconds)
[01:19:40] *** Joins: aartaka (~aartaka@5.1.53.226)
[01:31:00] *** Quits: aartaka (~aartaka@5.1.53.226) (Ping timeout: 240 seconds)
[01:31:22] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:42:41] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[01:44:20] *** Joins: mepy (~mepy@37.100.156.164)
[01:44:21] *** Quits: mepy (~mepy@37.100.156.164) (Remote host closed the connection)
[01:45:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:46:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:46:54] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[01:47:58] *** Joins: dra (~dra@2a04:4540:641b:4800:95e:e5:2d2a:e79d)
[01:50:33] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[01:51:55] *** Quits: dirtcastle (~dirtcastl@103.43.203.230) (Ping timeout: 268 seconds)
[01:51:55] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:52:13] *** Joins: dirtcastle (~dirtcastl@2409:4072:6e8a:8540:88e4:3bff:fecc:e177)
[01:58:26] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[02:00:14] *** Joins: rtoy1 (~Thunderbi@98.51.32.60)
[02:02:13] *** Quits: rtoy (~Thunderbi@98.51.32.60) (Ping timeout: 240 seconds)
[02:02:13] *** rtoy1 is now known as rtoy
[02:03:56] *** Quits: eugercek` (~user@31.223.43.20) (Remote host closed the connection)
[02:04:12] *** Joins: eugercek (~user@user/eugercek)
[02:04:26] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[02:05:37] *** Quits: rtoy (~Thunderbi@98.51.32.60) (Quit: rtoy)
[02:08:32] *** Quits: dirtcastle (~dirtcastl@2409:4072:6e8a:8540:88e4:3bff:fecc:e177) (Ping timeout: 240 seconds)
[02:10:17] *** Joins: dirtcastle (~dirtcastl@2409:4072:6e8a:8540:ecfa:77ff:fe36:d4ca)
[02:11:14] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:13:14] *** Joins: dmgk (~dmgk@user/dmgk)
[02:14:00] * gjvc edges closer to enlightenment
[02:14:17] *** Quits: dirtcastle (~dirtcastl@2409:4072:6e8a:8540:ecfa:77ff:fe36:d4ca) (Ping timeout: 240 seconds)
[02:14:47] *** Joins: dirtcastle (~dirtcastl@2409:4072:6e8a:8540:98ac:77ff:fe78:5a04)
[02:14:48] *** Quits: dirtcastle (~dirtcastl@2409:4072:6e8a:8540:98ac:77ff:fe78:5a04) (Client Quit)
[02:18:50] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[02:35:55] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[02:38:15] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[02:39:25] *** Quits: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Ping timeout: 240 seconds)
[02:41:24] *** Quits: hashfunc32 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[02:41:53] *** Joins: akoana (~ah@user/akoana)
[02:41:56] *** Joins: cognemo (~cognemo@cpe-46-164-14-20.dynamic.amis.net)
[02:44:04] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[02:51:48] *** Quits: cognemo (~cognemo@cpe-46-164-14-20.dynamic.amis.net) (Ping timeout: 272 seconds)
[02:53:40] *** Joins: cognemo (~cognemo@cpe-92-37-82-231.dynamic.amis.net)
[02:55:58] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:57:30] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[03:02:11] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[03:08:39] *** Quits: dra (~dra@2a04:4540:641b:4800:95e:e5:2d2a:e79d) (Remote host closed the connection)
[03:08:45] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[03:09:43] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:13:08] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[03:29:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:32:32] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Remote host closed the connection)
[03:33:40] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:33:41] *** Quits: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[03:34:33] *** Joins: robin (~robin@user/terpri)
[03:38:24] *** Quits: zachel (~zachel@user/zachel) (Read error: Connection reset by peer)
[03:38:47] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:42:08] *** Joins: zachel (~zachel@user/zachel)
[03:45:32] *** Joins: c (~o@2600:1700:94c0:69a0::44)
[03:45:33] *** Quits: c (~o@2600:1700:94c0:69a0::44) (Client Quit)
[03:45:54] *** Joins: c (~o@2600:1700:94c0:69a0::44)
[03:46:45] *** Quits: c (~o@2600:1700:94c0:69a0::44) (Client Quit)
[03:52:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[03:54:26] *** Joins: Common-Lisp (~Common-Li@104-58-112-202.lightspeed.bcvloh.sbcglobal.net)
[03:55:13] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 250 seconds)
[03:55:37] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:00:45] *** Joins: Oladon (~olad@98.43.81.226)
[04:01:59] *** Joins: zacque (~zacque@1.32.81.194)
[04:02:12] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[04:16:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[04:33:03] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[04:33:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:39:55] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:53:55] *** Joins: s-liao81 (~s-liao@101.86.96.21)
[04:55:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:55:51] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[04:58:48] *** Quits: s-liao81 (~s-liao@101.86.96.21) (Client Quit)
[05:09:23] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:22:35] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 240 seconds)
[05:22:55] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[05:30:26] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:41:38] *** Joins: Bike (~Bike@71.69.170.70)
[06:11:00] *** Quits: sloanr (~user@97-127-41-123.mpls.qwest.net) (Ping timeout: 240 seconds)
[06:17:18] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[06:20:24] *** Joins: Inline__ (~Inline@p200300cd470d31009f2917ead5869a68.dip0.t-ipconnect.de)
[06:22:37] *** Quits: Inline (~Inline@p200300cd4715f5002bb20ed77dab6816.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:29:52] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[06:31:53] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[06:41:44] *** Joins: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a)
[06:44:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:47:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:22:57] <neominimum> How do you personally make it obvious what the architecture of your projects are? I feel like the only way to define an explicit layered architecture between code modules is to create a new system, as simply defining a new namespace with defpackage doesn't give any hints as to where in the architecture it sits unless one creates a package naming convention.
[07:22:57] <neominimum>  e.g., `PROJECT/RUNTIME` re-exports `PROJECT/LAYER-ZERO/RUNTIME-INTERFACE`, which may import `PROJECT/LAYER-ONE/CONTROLLER` or another layer-two module, etc.
[07:22:57] <neominimum> I guess even creating a new system and using`:depends-on` to declare dependencies may hide the architecture without support from some tooling. Would it be considered odd to create a system for a single file, single defun module to denote it's relationship between other modules?
[07:23:20] *** Joins: sbodin (~Android@185.12.224.124)
[07:24:42] <beach> I tend to divide the code into "modules", where each module is in a separate directory, has a separate ASDF system definition, and a separate package.
[07:26:57] <beach> So a "module" has at least three files, the .asd file, the package(s).lisp file, and at least one file with code in it that has (in-package #:module-package) in the beginning.
[07:27:30] <beach> ... and Good morning everyone!
[07:31:17] *** Joins: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca)
[07:31:18] <neominimum> beach: I recall looking through cluffer and finding the organisation of the modules to be very understandable. I was wondering if I should attempt a similar method. Good morning to you!
[07:32:11] <beach> I see.
[07:32:28] <neominimum> I think it was similar to what you just outlined above.
[07:32:47] <beach> Yes it is.
[07:39:59] *** Quits: Tallund (~Tallund@cbl-24-104-171-134.yyz.frontiernetworks.ca) (Quit: Client closed)
[07:41:17] <dbotton> are there any tools for seeing what objects are slated for gc, what memory foot prints are etc I want to be able to see life spans of objects etc
[07:42:05] <Bike> the most basic tool is the cl:room function, which will probably give you a breakdown of memory usage
[07:42:18] <dbotton> thanks
[07:42:34] <dbotton> I feel insecure with gc
[07:42:52] <beach> If you could see what objects are dead, they wouldn't be dead.
[07:43:16] <dbotton> I spent my life with carefully watching my code etc so just want to feel nice and fuzzy
[07:46:44] <neominimum> I tried once to work out the memory footprint of some compound objects I had, but I found that, sbcl at least, won't follow references when tallying up the slots as it could lead to infinite recursion(?), not 100% on that but I gave up on trying to figure out if it was possible.
[07:48:07] <beach> neominimum: Right, because you would then get the class of the object, all the superclasses and subclasses, all the methods of all the generic functions that apply to any of those classes, etc.
[07:49:24] <beach> Most of those things are shared between a large number of objects, so it would be strange to count it as the memory footprint of a single object.
[07:50:12] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Remote host closed the connection)
[07:51:24] *** Quits: waleee (~waleee@h-178-174-193-77.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[07:53:34] <Bike> it might conceptually be one object in your application, but the implementation doesn't know that
[07:53:43] <Bike> detailed metrics on memory usage could be kind of neat, though
[07:53:49] <neominimum> beach: Ok, I see. I wonder though if there is a way to only consider certain aspects of the object like only a few slots or something, but then declaring that would be a manual process for each class of object if that were even possible. I really have know idea how the object system works under the hood though so anything I say is simply wishful thinking.
[07:53:55] <Bike> another thing you can use is the profiler; i believe sbcl's at least has a memory tracking mode
[07:54:28] *** Joins: luna-is-here (~quassel@ip-095-223-058-048.um35.pools.vodafone-ip.de)
[07:55:42] *** Joins: semz_ (~semz@user/semz)
[07:56:04] <beach> neominimum: I don't know.  I have never found it relevant to consider the space used by anything other than the object itself, and that space is pretty much determined by the slots of its class and its superclasses.
[07:58:39] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[08:00:36] *** semz_ is now known as semz
[08:05:07] <dbotton> are there any situations that are likely to create "memory" leaks in CL to watch out for?
[08:05:41] <dbotton> (beyond foreign functions)
[08:07:01] <beach> Definitely!  Consider a gap buffer, i.e. a vector where only some elements are considered "live".  When you remove an element from the gap buffer, you must set the element to something "neutral" like NIL or 0.
[08:08:58] <semz> Symbol pollution is another pitfall if you intern symbols from untrusted sources (e.g. turning JSON keys into keywords)
[08:09:53] <semz> since the interned symbols remain reachable through the package
[08:10:12] <dbotton> so keyword package even worse I assume
[08:10:37] <edgar-rft> also old natural language processing programs from the 1980s interned lots of unnecessary symbols
[08:10:39] <dbotton> so using dbi would create but minimal
[08:11:11] <semz> The keyword package is usually the affected one
[08:11:38] <neominimum> beach: IIRC I had a highly concurrent workload where the memory growth was killing sbcl (my fault in the way I structured the release of the object creation and ensuing function calls). The object was a proxy that held objects, that held other objects, so a nested structure. And I was unsure about how to manually add up the space used by all the objects without making a mistake.
[08:11:38] <neominimum> I only needed it so I could reason about the memory growth characteristics, but I did consider whether it would be possible to use that information to automate the release of parts of a parallel computation in a way that maximised resource usage while not exhausting the heap.
[08:11:43] <semz> usually not a problem in common use, but when you can have a malicious party on the other end, it's a DoS vector
[08:13:32] <beach> neominimum: The basic rule is that you should set a slot to some neutral value when you no longer need the object it contains.
[08:18:57] <dbotton> If I store a lambda from inside a defun in a hash, it and local vars that it referenced will not be gc'd correct?
[08:19:24] *** Quits: sbodin (~Android@185.12.224.124) (Remote host closed the connection)
[08:19:24] <dbotton> (I am sorry if a foolish question)
[08:20:57] <neominimum> beach: Yes, this is probably getting a little OT, but the only problem was that all of the proxy objects were still needed as as none of processes that used them had finished their part of the computation yet. As effectively they were operating in lockstep and creating a lot of junk (well, message sends) as they went (again my fault for structuring the computation that way).
[08:22:52] *** Joins: sbodin (~Android@185.12.224.111)
[08:22:53] <dbotton> I just realized that I think I was overly concerned with leaving the scope of functions and that somehow the lambda and allocations in those functions could be gc'd
[08:22:55] <neominimum> To be clear, being able to just query the foot print of the proxy object wasn't going to fix the issue, but I did need the information to start to reason about how I might fix it.
[08:27:41] <Bike> dbotton: it's kind of the point of automatic memory management that you don't need to worry about when things are freed (unless you are doing optimization maybe). if there is any way for you to get at an object, it will not be gc'd. nothing will be deleted out from under you.
[08:29:27] <Josh_2> Good morning
[08:31:46] *** Joins: sbodin_ (~Android@188.170.193.241)
[08:33:27] *** Quits: sbodin (~Android@185.12.224.111) (Ping timeout: 256 seconds)
[08:49:12] *** Quits: sbodin_ (~Android@188.170.193.241) (Quit: -a- Connection Timed Out)
[08:49:24] *** Joins: sbodin (~Android@188.170.193.241)
[08:53:26] *** Quits: Bike (~Bike@71.69.170.70) (Ping timeout: 272 seconds)
[08:54:20] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[08:57:45] <beach> dbotton: There is no such thing as "a lambda".  There is "lambda expression" and "function" (resulting form the evaluation of a lambda expression".  It is usually not relevant how a function is created, using LAMBDA, DEFUN, MAKE-INSTANCE, or something else.
[08:58:09] <dbotton> appreciated
[09:07:00] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[09:09:26] *** Joins: robin (~robin@user/terpri)
[09:13:42] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[09:13:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Write error: Connection reset by peer)
[09:13:42] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Read error: Connection reset by peer)
[09:13:42] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Read error: Connection reset by peer)
[09:16:08] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:16:24] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[09:16:35] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[09:18:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:22:51] <dbotton> this conversation touched 50 files... There was no point in me keeping an extra thread open to prevent local variables going out of scope to a lambda expression
[09:23:30] <dbotton> That was a decision from a year ago only 2 or 3 months in to lisp
[09:23:57] <beach> Is Common Lisp the first language you use that has automatic memory management?
[09:24:03] <dbotton> yes
[09:24:35] <dbotton> Well some java but nothing major
[09:24:56] <dbotton> But also first time dealing with closures
[09:25:04] <beach> I see.
[09:25:16] <dbotton> well outside of downward closures
[09:25:46] <dbotton> So let over lambda is new
[09:26:09] <beach> Interesting.
[09:26:32] <dbotton> That was the reason for keeping the thread, I was afraid the local variables going out of scope would be potential issues
[09:26:32] <beach> I think this is the first time I hear about someone having this model in mind of how things work.
[09:26:47] <beach> Yes, I understand.
[09:27:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:27:50] <dbotton> I think any one with out lisp experience would likely run in to this issue
[09:28:04] <beach> Though I guess this model is consistent with how C++ works.
[09:28:37] <dbotton> sorry which model, let over lambda?
[09:29:05] <beach> The model that a live object could be reclaimed by the GC just because a variable that has that object as a value goes out of scope.
[09:29:55] <dbotton> Right can happen easily in C++
[09:30:16] <dbotton> Well sans the gc
[09:31:21] <dbotton> So throw gc in and you make defensive assumptions
[09:31:51] <dbotton> I figured if I was wrong I could just remove the "run" function later as I just did
[09:32:22] <dbotton> Most expect that GUIs have a run loop, so seemed natural.
[09:32:45] <dbotton> Now that I know there is no need, no need to give a false impression there was one.
[09:34:00] <dbotton> There is no event loops etc in CLOG. New events coming from the browser launch threads that you can run in parallel or synchronized
[09:36:49] <dbotton> I still left the ability to leave that creation thread for those that want to run code post disconnect of the browser
[09:37:50] <dbotton> like to databases etc
[09:38:03] <dbotton> sorry - disconnect from databases etc
[09:38:41] *** Quits: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a) (Quit: Leaving)
[09:48:04] <masinter> i imagine common lisp is better learned from the inside out
[09:48:39] <masinter> you have to clear your mind of any thoughts about allocating storage
[09:48:52] <masinter> like with JavaScript
[09:49:25] <dbotton> I changed my approach after realizing how different lisp is
[09:50:14] <masinter> javascript is very lispy
[09:50:37] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[09:50:37] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Write error: Connection reset by peer)
[09:50:37] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Write error: Connection reset by peer)
[09:50:37] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Read error: Connection reset by peer)
[09:50:46] <masinter> not in any of the details but the attitude about memory
[09:50:51] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:50:52] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[09:50:54] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:50:57] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[09:51:21] <masinter> for novices -- until you want performant code
[09:52:31] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[09:53:47] <masinter> #lispcafe
[09:55:07] <edgar-rft> performant code is offtopic in #commonlisp :-)
[09:55:13] <dbotton> I was at the time seeing the gc as another thread that could affect objects not bound to symbols and not properly seeing that let over lambda is part of the scope of the lambda expression
[09:58:17] *** Joins: alfonsox (~quassel@103.87.57.104)
[10:24:56] *** Joins: rotateq (~rotateq@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[10:33:38] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[10:33:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:58:40] *** Quits: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:13:43] <flip214> it's about time that ELS registration opens...
[11:14:47] <rotateq> I can be there online. :)  And in 2 years maybe also in persona.
[11:22:21] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[11:26:01] *** Quits: zacque (~zacque@1.32.81.194) (Quit: Goodbye :D)
[11:26:29] *** Joins: frgo (~frgo@2a01:4f8:172:fe06:d4b0:ba4d:add:514b)
[11:30:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[11:31:33] *** Parts: rotateq (~rotateq@ip-078-094-235-194.um19.pools.vodafone-ip.de) ()
[11:33:57] *** Joins: treflip (~user@user/treflip)
[11:39:47] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:41:35] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:56:46] *** Joins: shka (~herr@109.231.3.55)
[11:58:28] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[12:02:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[12:04:42] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[12:05:37] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:07:38] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[12:09:41] *** Joins: eugercek (~user@user/eugercek)
[12:11:02] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 272 seconds)
[12:11:17] *** Joins: amb007 (~a_bakic@205.105.204.77.rev.sfr.net)
[12:17:53] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[12:19:04] *** Joins: hashfunc1930 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[12:20:01] *** Joins: MajorBiscuit (~MajorBisc@c-001-025-058.client.tudelft.eduvpn.nl)
[12:21:23] <hashfunc1930> why is this form ... `(A B C ,(apply #'values '((D) (E) (F)))) ... not returning ... (A B C (D) (E) (F)) ...? instead it returns ... (A B C (D))
[12:22:03] <_death> why should it?
[12:23:39] *** Quits: sbodin (~Android@188.170.193.241) (Quit: -a- Connection Timed Out)
[12:24:03] *** Joins: sbodin (~Android@188.170.193.241)
[12:24:46] <hashfunc1930> _death: because ... (apply #'values '((D) (E) (F))) ... evaluates to (D) (E) (F)
[12:25:18] <_death> the backquote form is basically equivalent to (list 'a 'b 'c (apply #'values ...))
[12:28:56] <hashfunc1930> _death: ok, i understand. then why don't the elements (E) and (F) also get put into the list? is there an evaluation/CL rule that i'm not fully comprehending?
[12:28:58] <|smlckz|> what had happened to clisp?
[12:29:01] <_death> when an expression returns multiple values and the receiving end is not prepared to handle them specially, only the primary value is used
[12:29:40] <_death> you can use ,@ to splice elements of a list
[12:30:31] <_death> clhs 3.1.7
[12:30:31] <specbot> Return Values: http://www.lispworks.com/reference/HyperSpec/Body/03_ag.htm
[12:32:28] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:33:04] <edgar-rft> the following code would work: `(A B C ,(multiple-value-list (apply #'values '((D) (E) (F))))) except that it's overcompliated nonsesne :-)
[12:33:35] <_death> edgar-rft: it also wouldn't return the result desired by hashfunc1930
[12:34:03] <_death> the only ways to splice are ,@ and ,. (and you should never use the latter)
[12:34:04] <edgar-rft> oh, true, thanx _death
[12:35:00] <_death> well, there's also . ,foo I guess ;)
[12:35:56] <_death> (which wouldn't work inside vectors)
[12:40:19] <hashfunc1930> _death: edgar-rft: ok thanks ya'll. i learned something
[12:44:12] *** Quits: amb007 (~a_bakic@205.105.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[12:44:50] *** Joins: amb007 (~a_bakic@52.148.22.93.rev.sfr.net)
[12:51:57] <flip214> multiple-value-list _and_ ,@ is required to get all of D E F into the result... or (list* 'A 'B 'C (m-v-l (apply ...)))
[12:53:17] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[12:53:53] *** Quits: amb007 (~a_bakic@52.148.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[12:54:20] *** Joins: amb007 (~a_bakic@210.13.23.93.rev.sfr.net)
[12:57:37] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[12:58:37] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[12:59:31] <pjb> |smlckz|: nothing special. Basically, the authors/maintainers grow old, and cannot spend as much time on the maintenance as previously, so releases and issue corrections take more time.  The same is occuring to ccl apparently.  We just need new maintainers.
[13:11:12] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[13:11:23] *** Joins: amk (~amk@109.255.169.126)
[13:14:34] *** Joins: waleee (~waleee@h-178-174-193-77.NA.cust.bahnhof.se)
[13:14:54] *** Quits: hashfunc1930 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 250 seconds)
[13:15:39] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 272 seconds)
[13:17:30] *** Joins: v88m (~Xiro@213.87.134.118)
[13:25:48] *** Quits: waleee (~waleee@h-178-174-193-77.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[13:28:36] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:33:49] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[13:34:08] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:34:54] *** Joins: igemnace (~ian@user/igemnace)
[13:40:01] *** Quits: v88m (~Xiro@213.87.134.118) (Ping timeout: 256 seconds)
[13:58:28] *** Joins: kevingal (~quassel@149.157.114.33)
[14:03:02] *** Quits: kevingal (~quassel@149.157.114.33) (Ping timeout: 240 seconds)
[14:03:09] *** Joins: kevingal (~quassel@2001:770:c0:401:488e:8cf8:8d59:f91c)
[14:04:12] *** Quits: frgo (~frgo@2a01:4f8:172:fe06:d4b0:ba4d:add:514b) (Remote host closed the connection)
[14:06:16] <beach> pjb: Also, code factoring between implementations would help.
[14:11:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:18:03] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Quit: Leaving)
[14:18:17] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[14:20:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:22:10] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:37:47] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:38:54] *** Joins: dirtcastle (~dirtcastl@103.43.203.225)
[14:47:46] *** Joins: sbodin56 (~sbodin@37.29.119.118)
[14:53:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:03:35] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[15:14:27] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:15:47] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:19:11] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[15:26:41] *** Quits: sbodin56 (~sbodin@37.29.119.118) (Quit: Client closed)
[15:35:41] *** Joins: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de)
[15:37:03] *** Parts: sbodin (~Android@188.170.193.241) ()
[15:40:19] *** Joins: dlowe (~dlowe@user/dlowe)
[15:45:34] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[15:48:16] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 272 seconds)
[15:49:14] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[15:53:47] <Xach> dbotton: clog does not build today due to a bogus FORMAT call. Too few arguments (0) to FORMAT " limit ~A": requires at least 1. in clog-data.lisp
[15:56:19] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 256 seconds)
[15:57:35] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[15:58:11] <dbotton> Checking. My bad
[16:06:29] <dbotton> fixed
[16:08:19] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[16:12:45] *** Joins: random-nick (~random-ni@87.116.176.196)
[16:17:43] <dbotton> thank you much
[16:26:33] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:45:29] *** Quits: alfonsox (~quassel@103.87.57.104) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:10:29] *** Joins: v88m (~Xiro@213.87.132.63)
[17:11:08] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:16:24] *** Joins: Bike (~Glossina@71.69.170.70)
[17:19:08] *** Quits: v88m (~Xiro@213.87.132.63) (Ping timeout: 252 seconds)
[17:21:19] *** Joins: v88m (~Xiro@213.87.163.51)
[17:25:44] *** Quits: v88m (~Xiro@213.87.163.51) (Ping timeout: 252 seconds)
[17:26:07] *** Joins: v88m (~Xiro@213.87.132.63)
[17:27:24] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:29:52] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[17:30:41] *** Quits: v88m (~Xiro@213.87.132.63) (Ping timeout: 252 seconds)
[17:39:49] *** Joins: occ (~occ@user/occ)
[17:46:04] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 272 seconds)
[17:47:04] *** Joins: zacque (~zacque@1.32.81.194)
[17:47:15] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[17:50:16] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[18:06:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[18:13:20] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:16:32] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[18:25:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[18:27:14] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 272 seconds)
[18:33:27] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:42:00] *** Joins: poldy (~dbane@user/poldy)
[18:44:41] *** Inline__ is now known as Inline
[18:50:21] *** Joins: notzmv (~zmv@user/notzmv)
[18:50:36] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:52:53] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[18:59:12] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[19:02:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:02:56] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[19:05:02] *** Quits: zacque (~zacque@1.32.81.194) (Quit: Goodbye :D)
[19:07:29] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[19:07:46] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:19:00] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[19:33:18] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[19:34:35] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[19:39:25] *** Joins: pjb (~pjb@user/pjb)
[19:50:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[19:54:50] *** Joins: eugercek (~user@user/eugercek)
[19:56:19] *** Joins: morganw (~user@80.225.24.132)
[19:56:37] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[20:01:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:03:50] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Remote host closed the connection)
[20:04:13] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[20:05:20] *** Joins: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl)
[20:09:53] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:11:53] *** Joins: notzmv (~zmv@user/notzmv)
[20:18:04] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 272 seconds)
[20:20:55] *** Joins: patrice (~patrice@user/patrice)
[20:20:58] *** Joins: rotateq (~user@p200300e787143500a6f16de1b1c2e823.dip0.t-ipconnect.de)
[20:26:53] *** Joins: treflip (~user@95.79.32.99)
[20:28:01] *** Joins: epony (epony@user/epony)
[20:34:15] *** Quits: poldy (~dbane@user/poldy) (Ping timeout: 256 seconds)
[20:38:17] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[20:58:57] <dbotton> Are there any documents out there that discuss optimizing lisp code for speed, etc? best practices in commercial settings?
[20:59:46] <rotateq> dbotton: Yees there are some I know. So you mastered yet writing correct and well readable code? :)
[21:01:21] <dbotton> My code is extremely readable, and correct with in the bounds of our human ability
[21:01:41] <White_Flame> the biggest speed issue is avoiding runtime type dispatches
[21:01:50] <rotateq> oh how long do you now do CL? that sounds very advanced then
[21:02:00] <White_Flame> so type declarations, safety 0, etc will get you into C speed
[21:02:41] <White_Flame> also, learn enough asm to be able to read disassemblies
[21:02:54] <dbotton> I have no issue with asm
[21:03:23] <rotateq> dbotton: Great, so I can't wait to learn from your code when something comes up next time. :)
[21:03:55] <rotateq> tchniques like memoization can also give you improvements
[21:04:38] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 250 seconds)
[21:05:12] <dbotton> Please do, you will find some of clog's idioms interesting even though I am still learning more of lisp's 40 years of development rotateq teaches you that language matters least
[21:05:38] <jdz> White_Flame: say no to SAFETY 0.  And never advice inexperienced people to do it.
[21:05:47] <jdz> *advise
[21:05:57] <dbotton> And that if I am asking about optimizations it is probably not to soup up a loop writing to a web page...
[21:06:02] <jackdaniel> safety 0 speed 3 and you'll end adding up characters with floats
[21:06:26] <White_Flame> not if your code didn't complain at default safety/speed
[21:06:32] <jackdaniel> so you'll get speed and /safety/ of C
[21:06:34] <White_Flame> (and you had full coverage etc)
[21:06:38] <White_Flame> right
[21:06:47] <jdz> White_Flame: the code may stay the same, but the inputs might change.
[21:06:51] <dbotton> Right that is what I am looking to understand, ie what the various settings mean practicialy etc
[21:06:59] <jdz> And inputs always change.
[21:07:01] <jackdaniel> and as we all know, safety is a key marketing point for (not using) C
[21:07:22] <dbotton> And last thing I want is to be doing that
[21:07:53] *** Joins: Fare (~fare@70-90-15-201-BusName-pa.panjde.hfc.comcastbusiness.net)
[21:08:06] <dbotton> So is there some document that discuss for example those settings? And of course things like White_Flame pointed out type disptach at runtime etc
[21:08:06] * jackdaniel has restrict policy on sbcl for safety 3, debug 3 and speed 1
[21:09:01] <White_Flame> dbotton: the spec leaves a lot of room for implementations to do lots or little with those, so it's not very specific
[21:09:28] <jdz> I once wrote a series of blog posts which touched on optimization.
[21:09:29] <White_Flame> but in practice, adding 2 numbers without the implementation being certain that they're both floats, fixnums (with a fixnum result), etc will result in a full/expensive function call instead of a single addition instruction
[21:09:41] <dbotton> jdz have link?
[21:10:09] <jdz> dbotton: https://blog.jonis.lv/ (the ones about Brian's brain).
[21:10:58] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[21:11:33] <jdz> dbotton: Some links may not work (I moved the articles from Google platform), so if there's something that should be working and isn't just let me know.
[21:12:10] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Remote host closed the connection)
[21:14:57] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[21:23:14] <Xach> it's very implementation-specific as well
[21:23:30] <Xach> what works on sbcl might not work on xbcl or ybcl.
[21:24:57] <jdz> Sure.  And now looking at the articles again, I see I've tried to be honest, and just show the approach I took to tackle the problem, not some generic "you do this and your programs will beat C out of the water".
[21:26:30] <jdz> Also, it was a long time ago, I'm a different person now!
[21:28:23] *** Quits: Fare (~fare@70-90-15-201-BusName-pa.panjde.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[21:30:06] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[21:30:07] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[21:30:07] *** Joins: tane (~tane@user/tane)
[21:31:28] <jgart> `(handler-bind ((check-failure #'print-html-check-failure))
[21:31:28] <jgart>   (check-cell-valid-number "7123.45.6"))`
[21:31:47] <jgart> My thinking/understanding of the above is that if check-cell-valid-number signals a check-failure then print-html-check-failure is executed.
[21:31:51] <jgart> Is this how the execution flow works in the above code?
[21:32:06] <jgart> Any advice is much appreciated
[21:32:16] *** Joins: lispy (~lispy@user/lispy)
[21:32:23] *** Quits: kevingal (~quassel@2001:770:c0:401:488e:8cf8:8d59:f91c) (Ping timeout: 256 seconds)
[21:32:33] <jdz> Advice about what?  What you said looks accurate to me.
[21:35:22] <Bike> jgart: print-html-check-failure will be called with the check-failure condition as an argument, and then, if it doesn't return, the signal will continue propagating and possibly end up in the debugger/etc
[21:44:42] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[21:47:48] <jgart> jdz, s/advice/clarification or confirmation
[21:48:03] <jgart> jdz, Bike, thanks!
[21:49:17] <jgart> Bike, "the signal will continue propagating" is hazy for me but I imagine you mean propagating through the stack?
[21:49:54] <jdz> Yes, up the call chain.
[21:50:36] <jdz> I don't think "stack" is mentioned anywhere in the spec (but don't quote me on that).
[21:51:13] <jdz> Nope, it is mentioned in multiple places.
[21:51:34] <jdz> Mostly in the context of "stack-allocation" though.
[21:51:57] <Bike> not through the control stack, exactly
[21:52:20] <Bike> for example, if check-cell-valid-number uses SIGNAL, and PRINT-HTML-CHECK-FAILURE does not transfer control, SIGNAL will just return normally after calling PRINT-HTML-CHECK-FAILURE
[21:52:47] <Bike> Assuming there aren't any other handlers in play
[22:01:35] *** Joins: eugercek (~user@user/eugercek)
[22:05:17] <_death> dbotton: I assume you're talking about optimization in the context of clog, which doesn't strike me as computation heavy.. what do you seek to achieve that's currently not good enough?
[22:06:15] <dbotton> No. Is more for other projects and ideas
[22:06:56] <jgart> Bike, here's the definition of check-cell-valid-number if you're curious https://git.genenetwork.org/jgart/cl-qc/src/branch/master/qc.lisp#L25
[22:07:22] <dbotton> Although I do want to make sure that CLOG functions when compiled in different settings
[22:07:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:08:00] <dbotton> So _death_ yes and no
[22:08:14] <jgart> What's missing from me being able to run automated tests from the CLI on this project? https://git.genenetwork.org/jgart/cl-qc/src/branch/master/run-tests.lisp
[22:09:25] <jgart> So far I have that file called run-tests.lisp and I'd like to call something like `sbcl --load run-tests.lisp` to run the tests in the test.lisp file.
[22:10:03] <dbotton> But CLOG I can certainly squeeze some more performance, but the major changes will be in local apps when I couple more tightly the browser and cut out http in the middle for those apps
[22:10:37] <jgart> I currently get the following if I try to run `sbcl --load run-tests.lisp`:
[22:10:41] <jgart> `The name "QC" does not designate any package.`
[22:10:41] <_death> dbotton: optimize declarations don't change semantics, so if your code doesn't do nasty things, it should work the same
[22:11:05] *** Joins: AlexImmortell[m] (~alexbluef@2001:470:69fc:105::1:1c68)
[22:11:08] <jgart> What might be my mistake here? Any help is much appreciated.
[22:11:58] <Bike> jgart: you have (in-package #:qc) before loading the qc system, which presumably defines the qc package
[22:12:32] <random-nick> optimize declarations might be changing semantics on sbcl? for example not throwing an error when the standard specifies it should
[22:12:49] <random-nick> but those things happen when you have invalid type declarations, afaik
[22:13:17] <dbotton> _death, I assume it will make no difference especially since CLOG doesn't do anything funky
[22:15:12] <jgart> Bike, Thanks! This worked: https://bpa.st/DCKA
[22:15:26] <Bike> jgart: you may not even need the in-package
[22:15:40] <jgart> ah ok, let me try
[22:15:58] <jgart> yup works!
[22:15:59] *** Quits: amb007 (~a_bakic@210.13.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:16:05] <jgart> THNX!
[22:16:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:16:19] <jgart> Bike, Any other changes that you think I should make to that file?
[22:16:28] <jgart> the run-tests.lisp, that is
[22:17:10] <Bike> i mean, it's pretty short, probably fine. i guess you can just do (uiop:quit) instead of specifying the 0, but it doesn't seem important
[22:17:48] <jgart> ah ok! I've done stuff like that for elisp code as well
[22:18:02] <jgart> makes sense :)
[22:18:04] <jgart> thanks
[22:18:34] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[22:18:44] <jgart> Bike, what do you think of the directory/project structure I have for https://git.genenetwork.org/jgart/cl-qc
[22:18:59] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[22:20:54] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 250 seconds)
[22:25:12] *** Quits: Psybur (~Psybur@mobile-166-170-32-247.mycingular.net) (Remote host closed the connection)
[22:28:27] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[22:31:49] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:32:25] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:34:02] <Bike> seems fine. i mean, you only have one source file anyway, looks like
[22:35:47] <jgart> Bike, I was thinking of moving the conditions to a separate file. wdyt?
[22:35:54] <jgart> Or maybe doesn't matter
[22:37:35] <Bike> with that little code, i wouldn't sweat it
[22:40:28] *** Quits: MajorBiscuit (~MajorBisc@c-001-025-058.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[22:42:27] <jgart> Ok, thanks. More code will be coming soon but I'll worry about it then.
[22:43:47] <jgart> This library will be used in a web UI (spinneret, ningle, clack) to display csv lint checks for uploaded data to the user in the browser in the form of an html table
[22:44:36] <jgart> Now I just need to hook up the functions to the web UI for a basic demo
[23:01:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:06:30] *** Joins: Oladon (~olad@98.43.81.226)
[23:12:08] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:14:58] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[23:16:40] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[23:18:11] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[23:21:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:21:37] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:24:24] *** Lord_of_Life_ is now known as Lord_of_Life
[23:26:31] *** Quits: dirtcastle (~dirtcastl@103.43.203.225) (Ping timeout: 256 seconds)
[23:28:17] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[23:28:52] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:30:21] *** Quits: jgart (16dd2205e4@irc.cheogram.com) (Ping timeout: 245 seconds)
[23:30:30] *** Joins: jgart (16dd2205e4@irc.cheogram.com)
[23:31:11] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 245 seconds)
[23:32:12] *** Joins: Fare (~fare@static-98-111-186-157.phlapa.fios.verizon.net)
[23:34:22] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[23:35:13] *** Quits: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de) ()
[23:36:37] *** Quits: Fare (~fare@static-98-111-186-157.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[23:37:07] *** Joins: kpoeck (~kpoeck@2a01:598:92b0:b9a8:dc4b:3e3b:bf48:bdea)
[23:39:06] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[23:39:42] *** Quits: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:40:00] *** Quits: lonjil (~quassel@user/lonjil) (Remote host closed the connection)
[23:40:05] *** Joins: dim (~dimlibera@212.85.154.83)
[23:41:08] *** Joins: lonjil (~quassel@user/lonjil)
[23:50:16] *** Quits: adlai (~adlai@80.244.243.194) (Read error: Connection reset by peer)
[23:50:34] *** Joins: adlai (~adlai@80.244.243.194)
[23:54:03] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[23:54:26] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[23:54:54] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[23:56:06] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
