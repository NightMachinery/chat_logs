[00:06:08] <gilberth> <http://clim.rocks/gilbert/bounding-rectangle-confusion.png> ;the red rectangles are the bounding rectangles drawn for debugging. Note how the extended output stream computes them as typographic, while the raw DRAW-TEXT* yields the graphical bounding rectangle.
[00:06:29] <gilberth> lotuseater: Don't hold your breath. I don't care about that.
[00:07:05] <lotuseater> okay
[00:07:37] <lotuseater> looks very nice
[00:07:48] <gilberth> Then you really want, just run TeX and be set.
[00:07:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:08:02] <gilberth> lotuseater: It's an utter mess, didn't you recognize?
[00:08:51] <lotuseater> hm no I don't. I'm not you.
[00:09:04] <lotuseater> but you can explain
[00:09:37] <gilberth> It the bounding box of "for" fit for redraw?
[00:10:51] <gilberth> Would I remove the output record for just "for", the left curly descender would stick on the display. Or when repainted, it won't get repainted and cut off.
[00:11:38] <lotuseater> ok
[00:12:01] <gilberth> And when I hate one thing, then it's redraw glitches.
[00:12:59] <lotuseater> with McCLIM I also realized some glitching, gives others an additional point for "oh no that can't be good"
[00:14:13] <gilberth> There is no excuse for those. Once my bounding rectangles are correct, it can't happen, by design.
[00:14:36] <lotuseater> :)
[00:15:10] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f4a8:187b:951a:2344) (Remote host closed the connection)
[00:30:46] * edgar-rft uses FFI to talk with aliens
[00:31:18] <lotuseater> edgar-rft: those aliens, they're everywhere!
[00:32:40] <edgar-rft> lotuseater: are you an alien? I'm asking because you seem to talk to me :-)
[00:33:53] <lotuseater> no I'm not
[00:34:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:34:14] <lotuseater> but I wait on this green card for the land of lisp
[00:38:19] <lotuseater> but often I feel being born 50-150 years too early or too late
[00:42:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:55:47] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[00:55:50] <pjb> A lot of people make the error of choosing their birth date on the epoch they prefer, instead of calibrating their birth to live in the echo they prefer during their adult life.
[00:56:24] <pjb> For me, 1964 was clearly the best, the apogee of humanity.  
[00:57:16] <lotuseater> so you're born then? :)
[00:57:24] <pjb> Yes :-)
[00:57:40] <lotuseater> okay I'm not so experienced :/
[00:58:36] <pjb> If you were to be born in 30 years, anyway you wouldn't choose to birth on Earth, but rather on Mars…
[00:58:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:59:22] <pjb> It will jostle at the gate; SpaceX should really send there a lot of women!
[01:01:36] <lotuseater> or choosing for my genpool
[01:02:10] <lotuseater> oh yes, women are crucial
[01:02:28] <lotuseater> hm i hope this word choosing was correct
[01:06:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:08:55] <gilberth> <http://clim.rocks/gilbert/bounding-rectangles-with-less-mess.png> Note how the line still is constructed according to typographic bounds, while the bounding boxes cover the pixels. "for" and "Thanks" overlap now.
[01:09:41] <gilberth> As well as "the" and " bounding".
[01:13:00] <lotuseater> yes
[01:18:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:25:53] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:29:45] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 248 seconds)
[01:47:50] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:01:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:12:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:35:37] *** Joins: humasect (~humasect@2001:1970:57e0:4100::8142)
[02:39:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 272 seconds)
[02:41:26] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 268 seconds)
[02:42:44] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:08:18] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f064:e8e7:95bb:fe9a)
[03:08:19] <hayley> Alfr: Yes.
[03:08:19] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f064:e8e7:95bb:fe9a) (Read error: Connection reset by peer)
[03:11:41] <hayley> So, rather for 2p1c we have 467 states, 241 being distinct. Lucky I didn't try to graph it :)
[03:14:29] <hayley> The general case is that we do the best we can, given however many producers can fail. So I guess I should generalise to n producers, and have an arbitrary number of them fail.
[03:18:34] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 258 seconds)
[03:18:47] *** Joins: edgar-rft (~edgar-rft@109.193.249.223)
[03:27:24] <gilberth> Fun! This bug, that the OS delays all my waiting massively still is there: <http://clim.rocks/gilbert/broken-macos.txt>.
[03:28:05] <humasect> oh no
[03:30:43] <gilberth> I wonder, if there is a secret API to turn that of. Like I found 'CPSStealKeyFocus', which is what Terminal.app uses to have focus-follows-pointer.
[03:32:04] <gilberth> nm(1) was to my rescue there, they could named it differently.
[03:36:08] <gilberth> But perhaps this pacing macOS does there is considered a feature and no bug. It also could apply to read(2) being delayed by seconds. It kicks in when (1) you are a GUI application and (2) that application was idle for a brief period of time. Ironically it wakes immediately, when it receives some pointer motion events e.g.
[03:41:36] *** Quits: humasect (~humasect@2001:1970:57e0:4100::8142) (Quit: Leaving...)
[03:41:45] <kakuhen> gilberth: what clim backend are you using
[03:42:02] <kakuhen> i'm curious to see if i get the same results, on os x 10.15.7 with ccl 1.12.1
[03:43:00] * hayley gets another bill for university.
[03:44:29] <gilberth> kakuhen: It says: #.(CLIM:FIND-PORT :SERVER-PATH '(:COCOA)). The issue is also present with at least 10.10 and older versions of CCL. It has nothing to do with CCL itself.
[03:45:13] <kakuhen> im only asking because im getting a different backend it seems
[03:45:22] <kakuhen> #<CLX-TTF-PORT :HOST "private/tmp/com.apple.launchd.68ipz9VKDP/org.xquartz" :DISPLAY-ID 0 #x30200671069D>
[03:45:35] <gilberth> kakuhen: I said (find-port) so that the process will do (#_TransformProcessType psn #$kProcessTransformToForegroundApplication). Which is the same thing as what happens, when you say (require :cocoa) to launch the [useless] IDE.
[03:46:20] <gilberth> All is fine as long as the process stays a "shell process".
[03:47:57] <hayley> https://www.youtube.com/watch?v=MEl0Chq36lc
[03:47:58] -ixelp- Your Silent Face (2015 Remaster) - YouTube
[03:48:27] <hayley> Is it only the UI thread, or all threads?
[03:50:16] <kakuhen> gilberth: here's what I get http://0x0.st/-JVs.txt
[03:50:28] <gilberth> kakuhen: I long ago tried to work around that by having another process send me data on pipe or killing me. Nothing got me out of that deep sleep state. However Terminal.app is prompt to react on data appearing on the pseudo tty device, so there must be some way around this.
[03:50:28] <kakuhen> the UI is loaded, but I guess running it in SLY might change something
[03:51:26] <gilberth> That's straight on the terminal? No Emacs involved?
[03:52:15] <kakuhen> I'll try from terminal now
[03:52:29] <kakuhen> you're using the default terminal right? not iTerm or anything fancy
[03:52:47] <gilberth> Yes, Terminal.app
[03:54:25] <hayley> https://www.youtube.com/watch?v=BHXRerTIUow
[03:54:26] -ixelp- Scar (Remastered 2002) - YouTube
[03:54:49] *** Quits: edgar-rft (~edgar-rft@109.193.249.223) (Ping timeout: 248 seconds)
[03:54:50] <gilberth> kakuhen: AH, you also got 4.6s or so.
[03:55:17] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:55:18] <gilberth> kakuhen: And you could take McCLIM out of the equation. I am not using it.
[03:55:39] <kakuhen> in the terminal ive iterated thrice and still not gotten the 4.6s thing
[03:55:40] <kakuhen> which is interesting
[03:56:02] <kakuhen> for now it's varying between 0.10000 - 0.14000s
[03:56:15] <gilberth> Which is bad enough.
[03:56:55] <kakuhen> ok I got a stupidly large result i'll post results again
[03:56:56] <gilberth> As I said: w/o transforming to a "foreground" aka GUI process, all is as you would expect.
[03:57:12] * hayley wonders if going from process to language isolation changes software licensing. Is everything now GPLed?
[03:58:07] <hayley> If I load Netfarm, is everything CSLed?
[03:58:11] <kakuhen> http://0x0.st/-JVi.log
[03:59:08] *** Quits: random-nick (~random-ni@87.116.177.228) (Ping timeout: 268 seconds)
[03:59:22] <gilberth> I see 9.4s. I get like 10s, which is easily mistaken for 0.1.
[03:59:35] <kakuhen> yeah
[03:59:47] <gilberth> kakuhen: Thanks! Good to know, that I am not the only one seeing this annoying behaviour.
[03:59:48] <kakuhen> for a while it was staying in a narrow band; then out of nowhere 9.4s
[04:01:07] <gilberth> To take CCL out of the equation I may craft a pure ObjC application to verify that this is a general feature.
[04:03:12] <gilberth> But I tried select^Wpoll, alarm, and what not. It all behaves just like that. It appeared somewhen at 10.10 or so. As I have 10.7 up until 11.5.1 I could test.
[04:06:31] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:10:32] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:10:52] <dave0> maw
[04:13:07] <hayley> Hey dave0
[04:13:47] <dave0> hi hayley 
[04:18:03] <gilberth> kakuhen: OK. macOS 10.8.5 is fine. macOS 10.9.5 and later is not. And using CCL 1.7 doesn't change a thing compared to CCL 1.12.
[04:18:19] <gilberth> Hello dave0!
[04:18:29] <kakuhen> yeah -- i didnt expect ccl to be the problem, but nonetheless i try it out on latest version
[04:18:39] <dave0> maw gilberth !
[04:19:36] <gilberth> kakuhen: I just wanted to check. When I'm bored I'll try to write some vanilla app using just ObjC and see.
[04:21:30] <gilberth> dave0: More space! Great! As my wife agreed to order me a 37" or so 3840x1600 curved screen. I only need a desk now.
[04:25:20] <dave0> far out my eye sight couldn't handle that
[04:25:59] * hayley uploaded an image: (9KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/BGIvHWeCxIUQJhvYduPdUqPo/rm.png >
[04:26:02] <hayley> "rm looks like a slightly longer m"
[04:30:16] <dave0> hummm
[04:30:42] <hayley> Not with that font, evidently.
[04:51:39] <gilberth> kakuhen: Ok. A plain ObjC application exposes the very same behaviour.
[04:51:56] <hayley> https://www.youtube.com/watch?v=e-cAc1AwfAw
[04:51:56] -ixelp- Rich Folks Hoax - YouTube
[04:52:03] <kakuhen> gilberth: epic
[04:52:16] <kakuhen> ironic how this issue seems to have started v10.9
[04:52:40] <kakuhen> that's around the time they decided to start shilling swift and attempt rewriting things with it
[04:54:24] <hayley> Dear Swift: if it is fast why is the compiler slow and why did you have to bring in David Ungar to beat it into bearable compile times 
[04:55:26] <kakuhen> my favorite feature of swift is how it has a worse subtyping problem than julia
[04:55:53] <kakuhen> + is overloaded 27 times, and based on how swift does type checks, concatenating three strings requires something like 27^3 operations
[04:56:24] <kakuhen> oh and apparently the latest mac os beta has a bug in time machine where %@ is not being interpreted as a string formatter lol
[04:56:37] <kakuhen> so users on forums are reporting a mysterious file named "%@"
[04:58:13] <hayley> 27^3? I could imagine...well, 27^2 for the first +, then I guess another 27^2 for the second. But if the other types are known, why does it need to search all possible combinations?
[05:02:41] <dave0> time for a walk! bbl
[05:02:42] <Alfr> To show that there are not two applicable rules in which case it should fail?
[05:02:50] <Alfr> hayley, ^
[05:03:31] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[05:05:00] <hayley> Hm, that could still be done. You'd build up a index map going from e.g. the LHS type to all possible methods with the LHS type. Then filter on the RHS and you have the same list of applicable methods.
[05:09:26] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:09:30] <Qwnavery> join #lisp
[05:11:30] <Alfr> hayley, yes. (But in this case it's easier to code the exhaustive search.)
[05:12:02] <lotuseater> Qwnavery: you mean #commonlisp? :)
[05:12:16] <Qwnavery> lotuseater: I'm in both, ok?
[05:12:18] <Qwnavery> lol
[05:12:27] <hayley> Yes, but with 27^2 combinations for a not-uncommon operation, I hope someone implemented such an optimization.
[05:12:40] <lotuseater> there's #lisp on libera? for more generic stuff?
[05:12:47] <Qwnavery> lotuseater: yes.
[05:12:52] <lotuseater> ah
[05:12:57] <Qwnavery> more people in #lisp then in #commonlisp
[05:13:15] <lotuseater> or if spoken out in another way you get "Come on, Lisp!"
[05:13:28] <Qwnavery> there's #scheme, #emacs, #racket?
[05:13:40] <lotuseater> i think so
[05:13:49] <Qwnavery> #lispcafe is home now though.
[05:14:04] <Qwnavery> :)
[05:14:20] <lotuseater> don't know how rigorous other channels are with the ontopic policy
[05:14:29] <hayley> #lisp if you don't know what Lisp is, #commonlisp for the ANSI-standardised language, #lispcafe for both
[05:16:52] <lotuseater> one social worker who's around 60 now told me back then he learned ANSI COBOL
[05:17:23] <hayley> https://www.youtube.com/watch?v=PcsumKaIXEs
[05:17:24] -ixelp- Gary Numan (London 1981) [07]. The Aircrash Bureau - YouTube
[05:17:32] <lotuseater> hmpf
[05:17:59] <hayley> lotuseater: the new Write in C song
[05:18:08] <Alfr> And since about half a day #lisp seems to try to define homoiconicity ...
[05:18:10] <lotuseater> oh
[05:18:26] <lotuseater> do they also say "lisp is dead and buried"?
[05:19:16] <Qwnavery> time to try and figure out what cons, mapcar, car, cdr and the like do...
[05:19:53] <hayley> Alternately, https://www.youtube.com/watch?v=FTuVB5-19FE
[05:19:54] -ixelp- Crash - YouTube
[05:20:11] <hayley> Alternately alternately, cause you won't get a clean crash: https://www.youtube.com/watch?v=XSvH78ZYqmc
[05:20:12] -ixelp- This Wreckage - YouTube
[05:20:24] <lotuseater> and Linus Torvalds claims nothing better than C
[05:20:36] <gilberth> kakuhen: <http://clim.rocks/gilbert/sleepy-sleep.main.m.txt> Source. Sorry, I don't know how to tar up an Xcode project properly. App bundle: <http://clim.rocks/gilbert/sleepy-sleep.app.tar.gz> it prints on stdout, start with ./sleepy-sleep.app/Contents/MacOS/sleepy-sleep from a terminal.
[05:20:57] <hayley> Must suck to be Linus.
[05:21:15] <lotuseater> Alfr: everytime I mention this word to someone I hope this person doesn't think it's about homosexual cities
[05:21:42] <gilberth> kakuhen: lol, about that %@ bug.
[05:21:51] <kakuhen> https://forums.macrumors.com/attachments/screenshot-2021-07-19-at-09-48-53-jpg.1808234/
[05:21:55] <kakuhen> here's a screenshot
[05:22:02] * hayley doesn't know how to tar up a TLA+ project properly. Though you should get the idea just from the one source file.
[05:22:15] <kakuhen> what's with apple and string formatting bugs these back few weeks
[05:22:15] <lotuseater> hayley: why do you mean?
[05:22:27] <kakuhen> first the %p%s%s%n SSIDs bricking iPhone's wifi firmware, and now this
[05:22:49] <lotuseater> but yes I think he invests much nerves in people preventing driving Linux to a bad direction
[05:22:51] <hayley> lotuseater: Well, it wouldn't really, I mean you probably make a lot of money, but ethically that's pretty dirty.
[05:23:38] <lotuseater> the money he gets from Red Hat?
[05:24:43] <gilberth> kakuhen: String formatting only? I had my fair share of fun to draw just some coloured text. Worked with views, not with bitmaps, or PDF. Got null pointer from inside their API. With later versions both is consistent, but broken IMHO. And don't get me started on the memory management.
[05:24:53] <lotuseater> Arena 3 reminds me of this funny browser game Thing Thing Arena 3
[05:25:17] <kakuhen> gilberth: i'm old enough to remember when NSGarbageCollector was a thing, and you could've sped up your programs by ensuring your methods did not being with "re"
[05:25:18] <gilberth> kakuhen: I'll figure out tomorrow how to tar up a xcode project for others to build.
[05:25:26] <kakuhen> anyway im gonna run your test program soon
[05:25:26] <hayley> https://www.youtube.com/watch?v=Ob9AHXuIEjI
[05:25:27] -ixelp- Down in the Park (Live London 1980) - YouTube
[05:25:46] <kakuhen> dod not begin with "re"*
[05:25:49] <kakuhen> did* agh
[05:26:21] <gilberth> I am too new to NextStep^WMacOS to know NSGarbageCollector.
[05:26:34] <Qwnavery> is there a CL lib for clim to do maps?
[05:26:36] <kakuhen> Objective-C used to have a conservative garbage collector
[05:26:46] <kakuhen> (it's now deprecated in favor of ARC since 2012 or so)
[05:27:35] <kakuhen> anyway, the garbage collector would kick in if you ever retain'd or release'd, and if your method began with "re", the obj-c runtime would compare each character to see if you were going to call retain/release or not.
[05:27:52] <gilberth> Really? What a pity. This would explain why a particular #/release would crash on one version and not doing it would leak on another. It perhaps didn't matter in old times.
[05:27:57] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[05:28:35] <lotuseater> Qwnavery: could you explain your question?
[05:29:10] <Qwnavery> lotuseater: A library to interface and display maps and geodata.
[05:29:41] <lotuseater> I think you first want to learn about car, cdr, mapcar etc
[05:29:56] *** Joins: montxero (~user@149.167.149.74)
[05:29:58] <gilberth> kakuhen: Thank you alot. After all, this motivated me to this single page ObjC example, so that nobody could point to CCL.
[05:30:45] <hayley> Cocoa on CLOSOS when
[05:31:01] <kakuhen> might be easier to get gnustep on there heh
[05:32:17] <gilberth> Who wants Cocoa? How about just CLIM?
[05:32:31] <gilberth> Is GnuStep even free?
[05:32:42] <hayley> (subseq "GnuStep" 0 3)
[05:32:57] <hayley> https://www.youtube.com/watch?v=ilxhV3y3-uo
[05:32:58] -ixelp- Who Wants the World - YouTube
[05:33:39] <gilberth> Right, it has "Gnu" in it's name. So I guess not.
[05:33:49] <kakuhen> gilberth: for now im getting normal-ish times for usleep, but i'll see if i can get the huge delay when i do things on the GUI
[05:34:50] <gilberth> I have it running on another desktop and get ~4s. It's damn non-deterministic.
[05:35:05] <gilberth> 10.09s
[05:35:51] <gilberth> I am tired. I'll make it print the times in the window tomorrow.
[05:36:01] <lotuseater> good idea
[05:36:15] <gilberth> Could we get it into the App Store? :-)
[05:37:01] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[05:37:40] <gilberth> I'll do as I do. My autoflush thread does (sleep 1/60) and sends an event to the event loop. It is stalled, too.
[05:37:45] <kakuhen> http://0x0.st/-JWO.png
[05:38:02] <kakuhen> im still not getting the crazy values i observed elsewhere
[05:38:07] <kakuhen> will keep running
[05:38:19] <kakuhen> oh wow, speak of the devil
[05:38:23] <kakuhen> usleep(100000) took 0.392414s
[05:38:58] <kakuhen> usleep(100000) took 8.755708s
[05:38:58] <gilberth> Ok. Not as worse as my. Still way off.
[05:39:01] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[05:39:02] <kakuhen> ok there we go
[05:39:10] <gilberth> 8.7s. Ok.
[05:39:29] <kakuhen> And now I just got one that took 4.5s
[05:39:51] <kakuhen> seems to be getting worse overtime -- now i have one that took 9s
[05:39:51] <gilberth> You want a help dialog?
[05:40:01] <kakuhen> no, i was just opening as many modals as i could
[05:40:10] <gilberth> ok
[05:40:11] <kakuhen> in hopes of nudging the thing to delay
[05:40:35] <kakuhen> well, it took about 2-3 minutes before I got these crazy results
[05:40:39] <kakuhen> will post a full log soon
[05:41:29] <kakuhen> http://0x0.st/-JWY.log
[05:41:35] <gilberth> I get them after a minute or so. But this is 10.10.5
[05:42:21] <gilberth> kakuhen: Thanks again. I feel relief now.
[05:42:28] <kakuhen> yeah -- all my testing was done on 10.15.7
[05:42:30] <kakuhen> and np
[05:43:24] <gilberth> Funny looking font name of yours. I can't identify a single glyph.
[05:45:50] * hayley realises she added a precondition in the model that doesn't actually happen, and found another fucking race.
[05:46:28] <gilberth> hayley: Get a race CAR.
[05:47:03] <hayley> Okay, it happens as I ended up scheduling two things to run at once, which doesn't work here. So I just need to drop the later one, as per usual.
[05:47:18] <lotuseater> i will go sleep too
[05:48:04] <lotuseater> night
[05:48:06] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[05:48:20] <hayley> Right, back to normal with no bugs. But now there are 266 distinct states and 523 states all up.
[05:48:32] <kakuhen> gilberth: btw if you want to distribute the xcode project -- one way to do so "securely" is by just giving us the main source, a minimal info.plist, and the nib file; everything else is convenient to have, but not necessary
[05:50:10] * hayley begins splitting up what she believes aren't atomic reads and writes.
[05:51:27] <gilberth> kakuhen: Ok.
[05:51:45] <kakuhen> here's an example of what a "minimal" info.plist would look like
[05:52:02] <kakuhen> http://0x0.st/-JW6.plist
[05:53:06] <gilberth> Terrific. As I still have a developer account and have no idea, what would leak otherwise.
[05:53:10] <kakuhen> but honestly it's just easier to remove any signing you may have set by default, save the project, then just zip the xcodeproj folder
[05:53:12] *** Joins: clothespin_ (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[05:53:21] <kakuhen> your signatures shouldn't leak
[05:53:35] <kakuhen> but if you do not remove the default codesigning stuff in the xcodeproj, then others will fail to build since the codesign stage will fail
[05:53:44] <kakuhen> and they'll have to manually disable codesigning etc etc
[05:54:17] <gilberth> Sure. But I have no idea and am cautious.
[05:54:27] <kakuhen> yeah dw about it
[05:54:36] <kakuhen> I was able to compile the app bundle with just the main.m anyway :)
[05:54:41] <kakuhen> i just had to borrow your MainMenu.nib heh
[05:55:03] <gilberth> Sure. It's all empty essentially.
[05:56:10] <gilberth> I could have done without a .nib. But then I used Xcode on purpose here, so that nobody could state, that that would not be the usual way.
[06:01:15] *** Quits: nirnam (~nirnam@1.46.13.87) (Ping timeout: 268 seconds)
[06:08:36] <hayley> Up to 568 states, 291 distinct.
[07:28:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[08:20:36] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:20:53] <dave0> re maw
[08:22:33] *** Joins: nirnam (~nirnam@1.46.140.64)
[08:40:09] *** Joins: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net)
[08:47:34] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:30:42] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[09:35:59] *** Joins: nihaal (~nihaal@117.96.193.218)
[09:44:12] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 258 seconds)
[10:19:51] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:50:34] *** Joins: derelict (~derelict@user/derelict)
[11:23:09] *** Quits: lad (~lad@user/lad) (Ping timeout: 268 seconds)
[11:28:02] *** Joins: shka (~herr@109.231.62.239)
[11:34:31] *** Joins: makomo (~makomo@user/makomo)
[12:14:04] <hayley> https://www.falstad.com/pong/ A circuit-level Pong simulator.
[12:14:05] -ixelp- Pong
[12:29:00] <hayley> https://www.youtube.com/watch?v=fibz9Z0IXYA White_Flame Red_Light
[12:29:01] -ixelp- Red Frame/White Light (2003 Digital Remaster) - YouTube
[13:30:32] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[14:14:09] *** Joins: lad (~lad@user/lad)
[14:22:48] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[14:31:21] *** Joins: random-nick (~random-ni@87.116.179.82)
[14:35:28] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[14:38:23] <hayley> https://www.youtube.com/watch?v=u1ZvPSpLxCg
[14:38:23] -ixelp- Tears For Fears - Mad World (Official Music Video) - YouTube
[14:54:20] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:06:35] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Quit: ZNC 1.8.2 - https://znc.in)
[15:08:26] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[16:15:45] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[16:17:37] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[16:18:23] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:35:33] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[17:08:43] * hayley says JITs were invented in dynamic languages and no one complains.
[17:09:37] * hayley then says that most of the backends of compilers look the same, and JITs make assumptions and have to deoptimize, so the engineering effort is similar independent of language spec, and gets downvoted a bunch. Makes sense.
[17:10:15] <hayley> I mean, they really are just control flow graphs with some inlined stuff, and some not inlined stuff. There's no magic after you strip it all out.
[17:38:13] <shka> uh
[17:38:41] <shka> does anybody know here if simply replacing ' with '' in postgres prevents SQL injection?
[17:38:44] <shka> in a string
[17:42:45] <pjb> Probably not. There's: https://www.postgresql.org/docs/current/libpq-exec.html#LIBPQ-EXEC-ESCAPE-STRING
[17:42:46] -ixelp- PostgreSQL: Documentation: 13: 33.3. Command Execution Functions
[17:43:00] <hayley> I can't read with a variable width font, is it a double quote or two single quotes?
[17:43:08] <pjb> and there are not only string literals, there's a bunch of other escaping functions.
[17:43:18] <pjb> two single quotes.
[17:43:42] <pjb> "foo'bar" --> "foo''bar" --(lisp-to-sql)--> 'foo''bar'
[17:44:28] <pjb> Otherwise "foo',select do_something_bad()"  --(lisp-to-sql)--> 'foo',select do_something_bad()
[17:45:46] <edgar-rft> I've heard that JIT is a registered religious organization in Japan.
[17:46:57] <pjb> :-)
[17:47:05] <pjb> TLAs are heavily overloaded.
[17:47:25] <pjb> IIRC, a few years ago I checked, and they were all used. (26*26*26).
[17:47:59] <hayley> The APL paper called it a dynamic incremental compiler.
[17:48:19] <hayley> Use it in a kernel and you get a Dynamic Incrementally Compiling Kernel (DICK).
[17:48:26] <lotuseater> hayley: which paper exactly?
[17:49:34] <hayley> I am on a phone but it is for APL\3000.
[17:51:03] <edgar-rft> Let's all become members of the TLA  True Love Academy :-)
[17:51:36] <lotuseater> okay I'll search for it
[17:51:49] <hayley> Funny they only mentioned tracing JITs when the method at a time ones (e.g. Java, Self) are pretty comprehensible.
[17:51:58] <dave0> nite all
[17:52:05] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:52:49] <hayley> To a 0th approximation, the idea is to start with pretty dumb IR, then insert fast paths for the easy stuff like fixnum addition, then remove slow paths which type inference finds unreachable.
[17:53:15] <lotuseater> what does IR stand for?
[17:53:28] <edgar-rft> infrared
[17:53:28] <hayley> intermediate representation
[17:53:38] * hayley called it
[17:54:50] <edgar-rft> you can use it to get a dick
[17:54:55] <lotuseater> oki :)
[17:56:10] <hayley> Still though, the idea isn't hard when presented this way. You just desugar to get to most of a mundane language, and then the usual tricks apply.
[18:00:02] <hayley> And if you are not Apple or Google you are not getting too much time to hack compilers, so I'd ignore the big compilers and what they do, and just settle for the important easy stuff.
[18:23:24] *** Joins: selwyn (~selwyn@user/selwyn)
[19:01:33] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[19:02:00] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[19:08:35] <gilberth> Good morning #lispcafe!
[19:09:16] <lotuseater> good morning
[19:09:18] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[19:09:55] <edgar-rft> Is there any particular reason why you think that this morning is good?
[19:11:38] <gilberth> Frankly: No. I'll see whether it's good. But this greeting could be understood as a wish.
[19:12:01] <edgar-rft> Maybe it has something to do with the people you hang around with that you have such unrealistic expectations.
[19:12:37] <gilberth> Hang around? There aren't many to hang around with.
[19:13:45] <edgar-rft> The users list says that there are you plus 75 others.
[19:14:20] <gilberth> Most which are silent. And at least one is a bot.
[19:14:38] <edgar-rft> That might be me :-)
[19:15:25] <lotuseater> not me
[19:16:25] * gilberth is too stupid to use the interface builder of Xcode.
[19:16:46] * lotuseater also
[19:18:36] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:22:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[19:24:02] <gilberth> And this version works different from the one I used years ago.
[19:24:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:25:00] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:25:23] <gilberth> Actually I never liked interface builders of any kind. DEFINE-APPLICATION-FRAME is way easier.
[19:29:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:40:09] <edgar-rft> gilberth, it's the other way around: XCode is for iDiots, you're too intelligent!
[19:41:47] <gilberth> Perhaps, it really makes me feel like an iDiot. Well, I used to be somewhat competent, but that is just too long ago.
[19:43:21] <gilberth> Anyhow, it seems like once you're a GUI application you can't wait with a timeout. Well, you can, but the timeout is set to a minimum of 10s (on my machine). Blocking on sth seems to work though. And it's per thread somehow.
[19:45:04] <gilberth> The only solution I came up with so far is to fork(2) and have a child process send sth over a pipe. It could be a "sleep server". Applications sends a sleep request and the sleep server would ping back when due.
[19:50:42] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[19:57:37] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:08:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:10:00] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:19:23] <pjb> gilberth: it's not stupidity, but as a programmer, you want UI to be generated from code.  https://www.hackingwithswift.com/read/8/2/building-a-uikit-user-interface-programmatically  By the way, there's a new DSL to do just that even more easily with Swift, IIRC.
[20:19:44] *** Quits: nihaal (~nihaal@117.96.193.218) (Quit: nihaal)
[20:19:52] <pjb> gilberth: Right, SwiftUI: https://www.hackingwithswift.com/quick-start/swiftui
[20:21:56] <pjb> Generated UI are not new either, but given the GUI toolboxes we had earlier, the coarse bitmap screens (and black-and-white, no gray, at that), and the crude fonts and renderers, generated GUI didn't often look good.  So it was rather justified to have Interface Builders, to let the designers fine-tune the positionning of GUI elements (along with the localisation!).
[20:22:55] <pjb> But nowadays we have more AI in libraries, higher resolutions, better front and more sophisticated ("beautiful"?) renderer, and it should be possible again to generate the GUI from a declarative experssion.  Now, of course, NOT from xml like with Android… erk!
[20:23:52] <pjb> (but in general, Android GUI built from xml are "good enough", just not as pretty).  And Apple sells pretty and fashion (never forget that!).
[20:29:40] <gilberth> pjb: Perhaps. And after some 30 years or more since "invention" we have this constraint layouts, which are nice to work with as long as you stear clear from the interface builder, which makes it a real pain to edit.
[20:30:26] <gilberth> pjb: And yes, with say a 640x480 screen, no antialiasing and only 16 colours, you may want to work a bit more pixel based of sorts.
[20:30:26] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[20:30:47] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[20:42:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:44:50] <gilberth> Ok. When I don't use stdout for output, but an NSTextView, it takes longer to get into the sleepy mode. But it's still there.
[20:45:26] <gilberth> Especially, when you don't look. That is, the application is on another desktop.
[20:47:50] <gilberth> And then I get pretty constant 10.1s, when asking to sleep for 100ms. Are 10s added?
[20:51:15] *** Joins: selwyn (~selwyn@user/selwyn)
[20:53:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:11:21] <gilberth> Ok. With Big Sur it takes longer to trigger this stalling when using the GUI for output, and hence essentially sending events to the main event loop. OTOH when using just the tty for output, that version triggers this dormant state after less than a minute. *sigh*
[21:12:58] *** Joins: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com)
[21:14:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:25:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:36:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:04:22] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:07:37] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[22:07:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:18:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:23:38] *** Joins: selwyn (~selwyn@user/selwyn)
[22:30:03] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:33:28] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[22:41:47] *** Joins: notzmv (~zmv@user/notzmv)
[22:47:40] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:52:46] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:00:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:29:06] *** Joins: selwyn (~selwyn@user/selwyn)
[23:48:08] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
