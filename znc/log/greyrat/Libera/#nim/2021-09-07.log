[00:03:18] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[00:04:24] *** Joins: flynn (~mcbloch@user/flynn)
[00:07:03] <FromDiscord> <aleclarson> aww man, i thought `dumpTree` would print the AST after macros were applied \:(
[00:11:53] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[00:12:06] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[00:18:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[00:36:25] <FromDiscord> <Elegantbeef> Like i said @aleclarson `untyped` macros do not expand, you'd want `expandMacros`
[00:38:46] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[00:39:09] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[00:42:44] <FromDiscord> <aleclarson> yeah that occurred to me, i'm just disappointed is all \:P
[00:42:56] <FromDiscord> <Elegantbeef> you can also compile with `--expandMacro:yourMacroName`
[00:43:34] <FromDiscord> <aleclarson> cool thx for the tip
[00:53:55] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[00:54:12] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[01:18:07] <FromDiscord> <tandy> is there a convienient way to get the difference between two seqs?
[01:22:01] <FromDiscord> <Recruit_main707> can you give an example?
[01:23:09] <FromDiscord> <tandy> seqA = [1, 2, 3]‚ÜµseqB = [1, 2]difference = [3]
[01:23:12] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[01:24:17] <FromDiscord> <Recruit_main707> what about this:‚Üµvar a = @[1, 3, 2]‚Üµvar b = @[1, 2] difference = @[3] ?
[01:24:44] <FromDiscord> <Recruit_main707> or difference = @[3, 2]
[01:25:47] <FromDiscord> <tandy> this yeah‚Üµ(@Recruit_main707)
[01:25:55] <FromDiscord> <tandy> i sort the lists first any
[01:26:19] <FromDiscord> <tandy> because i do an assert to check if they are equal
[01:27:24] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[01:27:40] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[01:28:49] <FromDiscord> <aleclarson> is there a shorthand for converting an iterator to seq?
[01:29:04] <FromDiscord> <Recruit_main707> there is a toSeq function i think
[01:29:20] <FromDiscord> <aleclarson> sweet thx
[01:29:26] <FromDiscord> <Elegantbeef> `import std/strutils`
[01:29:39] <FromDiscord> <Elegantbeef> `toseq(yourItem.iteratorName)`
[01:29:51] <FromDiscord> <Recruit_main707> thanks beef
[01:30:07] <FromDiscord> <Elegantbeef> In stable you cannot use `toSeq` with the method call syntax so for a table it's like `toSeq(table.values)` not ideal but nor is converting an iterator to a seq üòõ
[01:30:57] *** Quits: userj (~userjjjj@user/userj) (Ping timeout: 245 seconds)
[01:33:03] <FromDiscord> <Recruit_main707> sent a code paste, see https://play.nim-lang.org/#ix=3y9q
[01:33:34] <FromDiscord> <tandy> i wrote a function that did this, but it didnt work i think‚Üµ(@Recruit_main707)
[01:33:51] <FromDiscord> <Recruit_main707> sent a code paste, see https://play.nim-lang.org/#ix=3y9r
[01:34:00] <FromDiscord> <Elegantbeef> Lol i'm tired and wrote `strutils` i meant sequtils @aleclarson
[01:34:33] <FromDiscord> <aleclarson> i noticed \:P‚Üµis `toSeq` faster, or just a macro for `for..in`?
[01:34:53] <FromDiscord> <Elegantbeef> it's just a macro
[01:34:59] <FromDiscord> <Elegantbeef> Not like you can do anything faster since iterators can be anything
[01:35:39] <FromDiscord> <Recruit_main707> tandy: i just tried that function on the playground, maybe you did something wrong, try with that and ping me if something fails
[01:35:43] <FromDiscord> <Elegantbeef> Ideally you dont convert to seq unless you really need to
[01:35:53] <FromDiscord> <aleclarson> ofc \:)
[01:36:32] <FromDiscord> <Recruit_main707> im gonna ask again since it got burried in all this: does someone know if i can make c2nim ignore errors?
[01:37:16] <FromDiscord> <Elegantbeef> recruit really making me feel bad i've never used c2nim üòõ
[01:41:07] <FromDiscord> <Elegantbeef> Anyone got some nice "X should compile, but doesnt"?
[01:54:22] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[01:55:29] *** Joins: flynn (~mcbloch@user/flynn)
[01:57:37] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[01:57:56] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[02:12:44] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[02:13:03] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[02:27:18] <FromDiscord> <chicken mcnuggets> hey
[02:27:31] <FromDiscord> <chicken mcnuggets> how would i go about converting a uint16 to a big endian
[02:32:34] <NimEventer> New thread by Argl: Behavior of {.global.} variable for assigning to const, see https://forum.nim-lang.org/t/8402
[02:35:22] <FromDiscord> <aleclarson> to convert `ptr int` to `int`, do i need to cast, or is there a safer way?
[02:36:21] <FromDiscord> <aleclarson> oh wait, it's `[]` isnt it
[02:37:41] <FromDiscord> <Recruit_main707> yep
[02:37:49] <FromDiscord> <Recruit_main707> well, it depends
[02:37:57] *** Quits: max22- (~maxime@2a01cb0883359800f259119bb9ba011d.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:38:12] <FromDiscord> <Recruit_main707> do you want the integer representation of the pointer or the integer the pointer points to
[02:38:43] <FromDiscord> <aleclarson> the latter
[02:38:51] <FromDiscord> <Recruit_main707> then yes
[02:39:44] <FromDiscord> <aleclarson> so apparently i can't pass a `var Thing` to a proc that takes `Thing`?‚Üµ> 'cursor' is of type <var Cursor> which cannot be captured as it would violate memory safety
[02:40:25] <FromDiscord> <Recruit_main707> can you send a code snippet
[02:40:34] <FromDiscord> <Elegantbeef> Sounds like you're using a closure and attempting to closure a var parameter
[02:42:12] <FromDiscord> <aleclarson> In reply to @Elegantbeef "Sounds like you're using": oh yep ur right
[02:42:31] <FromDiscord> <aleclarson> what do?
[02:42:37] <NimEventer> New thread by SFR0815: Destroying ref objects, see https://forum.nim-lang.org/t/8403
[02:42:58] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[02:42:58] <FromDiscord> <aleclarson> i guess cache it in a `let` first
[02:43:18] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[02:45:02] <FromDiscord> <aleclarson> oh jeez‚Üµ> '=copy' is not available for type <Cursor>; requires a copy because it's not the last read of 'cursor'
[02:46:02] <FromDiscord> <aleclarson> here's a repro‚Üµhttps://play.nim-lang.org/#ix=3y9A
[02:46:14] <FromDiscord> <aleclarson> oh wait no it's not
[02:47:05] <FromDiscord> <aleclarson> https://play.nim-lang.org/#ix=3y9B
[02:47:20] <FromDiscord> <aleclarson> ‚òùÔ∏è  that's with the first error
[02:47:20] <FromDiscord> <Elegantbeef> well `var T` is a mutable reference, so if the closure can outlive the reference issues can occur, you can use a `ptr T` instead, but you need to know that may be unsafe
[02:49:35] <FromDiscord> <aleclarson> ah ok makes sense
[02:50:54] *** Quits: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se) (Quit: ZNC - http://znc.in)
[02:51:15] <FromDiscord> <Elegantbeef> This isnt exactly what you want but you can make your own closure like object https://play.nim-lang.org/#ix=3y9D
[02:51:32] <FromDiscord> <aleclarson> so if i use `arg: ptr T`, i can deref that into a `let` to avoid a copy?
[02:51:42] <FromDiscord> <aleclarson> (edit) "`let`" => "`var`"
[02:51:54] *** Joins: koltrast (~koltrast@h77-53-57-114.cust.a3fiber.se)
[02:52:27] <FromDiscord> <Elegantbeef> Yes you can do https://play.nim-lang.org/#ix=3y9E
[02:52:40] <FromDiscord> <Elegantbeef> It's unsafe though üòÄ
[02:52:56] <FromDiscord> <Elegantbeef> Well probably unsafe üòÄ
[02:52:57] <FromDiscord> <aleclarson> right, once the var's scope exits, it's a null ptr
[02:53:05] <FromDiscord> <Elegantbeef> It's not a null ptr
[02:53:09] <FromDiscord> <Elegantbeef> It's a dangling pointer
[02:53:18] <FromDiscord> <aleclarson> tomato tomato
[02:53:23] <FromDiscord> <Elegantbeef> Those are two vastly different things
[02:54:08] <FromDiscord> <Elegantbeef> a dangling pointer points to where memory was, and dereferencing it can cause silent issues, a nil pointer points to the start of the program and derferencing just causes a crash
[02:54:35] <FromDiscord> <aleclarson> gotcha
[02:57:25] <FromDiscord> <aleclarson> no way to prevent the dangling pointer without a copy?
[02:58:06] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[02:58:11] <FromDiscord> <aleclarson> oh `GC_ref` would work, yes?
[02:58:13] <FromDiscord> <Elegantbeef> Well you're safe if you dont let the closure outlive the `t`
[02:58:17] <FromDiscord> <Elegantbeef> but that's not enforced, but with borrow checker would be
[02:58:19] <FromDiscord> <Elegantbeef> No
[02:58:22] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[02:59:06] <FromDiscord> <Elegantbeef> `Thing` is a stack allocated object, therefore when this exists scope `t` no longer exists and a pointer to `t` is just in the stack somewhere
[02:59:41] <FromDiscord> <Elegantbeef> You can use `Thing = ref object`
[03:00:02] <FromDiscord> <Elegantbeef> This makes it safe to capture since the GC knows you're referencing the value
[03:00:10] <FromDiscord> <aleclarson> why can't the closure capture its scope?
[03:00:37] <FromDiscord> <Elegantbeef> No clue what you mean
[03:00:48] <FromDiscord> <aleclarson> ok i just got confused for a sec
[03:02:28] <FromDiscord> <Elegantbeef> Also for yet another variation, this is valid https://play.nim-lang.org/#ix=3y9G
[03:02:28] <FromDiscord> <aleclarson> how do I convert a variable of type `T` to `ref T`  (where `T` is an `object`) without changing type `T`
[03:02:40] <FromDiscord> <Elegantbeef> \`var a = new T
[03:03:25] <FromDiscord> <Elegantbeef> To put it lightly there are many ways to do this all
[03:03:27] <FromDiscord> <Elegantbeef> You can also do `PThing = ref object` but that's less idiomatic
[03:03:39] <FromDiscord> <Elegantbeef> well inside a type def
[03:07:09] <FromDiscord> <aleclarson> does `ref T` imply `var ref T`?
[03:07:34] <FromDiscord> <aleclarson> (edit) "does `ref T` ... imply`ref" 03added "as an argument type" | "`var ref" => "`ref var"
[03:07:43] <FromDiscord> <Elegantbeef> no `var ref T` is a mutable pointer `ref T` is just mutable fields
[03:10:12] <FromDiscord> <aleclarson> i edited my message to be `ref var T` but i guess your chat client doesn't receive edits?
[03:10:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3y9K
[03:10:42] <FromDiscord> <Elegantbeef> Alternatively i'm just bad at readint
[03:10:43] <FromDiscord> <Elegantbeef> Alternatively i'm just bad at reading
[03:11:36] <FromDiscord> <aleclarson> anything's possible i guess \:P
[03:12:04] <FromDiscord> <Elegantbeef> `ref var T` doesnt make any sense
[03:12:48] <FromDiscord> <Elegantbeef> `var T` is a mutable reference(which can be stack allocated), `ref var T` is a heap reference to a mutable reference...
[03:13:12] <FromDiscord> <aleclarson> i didn't mean it literally, but good to know
[03:15:16] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3y9L
[03:15:24] <FromDiscord> <aleclarson> rather, point to `t` and keep it alive
[03:15:33] <FromDiscord> <Elegantbeef> Nope since it's stack allocated
[03:15:52] <FromDiscord> <Elegantbeef> you cannot convert a stack allocated variable to a GC managed one
[03:16:34] <FromDiscord> <aleclarson> so basically, i can't keep a local variable alive without copying or it being a `ref object`
[03:16:48] <FromDiscord> <Elegantbeef> Well that's what a local variable means
[03:16:54] <FromDiscord> <aleclarson> in reality, the latter is still copying, but just the pointer
[03:17:06] <FromDiscord> <Elegantbeef> a local variable is only alive as long the scope exists
[03:17:30] <FromDiscord> <Elegantbeef> That's by design of a the stack, it expands per stack frame requirements then shrinks when leaving that frame
[03:17:50] <FromDiscord> <aleclarson> i think javascript does some magic where local variables referenced by a closure will be kept on the stack
[03:18:24] <FromDiscord> <Elegantbeef> I mean all of JS is references isnt it?
[03:18:34] <FromDiscord> <Elegantbeef> So it's not a stack/heap difference it's all heap
[03:18:36] <FromDiscord> <aleclarson> ah, so that's the trick \:P
[03:20:07] <FromDiscord> <aleclarson> so i guess defaulting to `ref object` (when writing new types) is the smarter choice, and then use `object` only if you know you'll never need a closure to access it
[03:20:39] <FromDiscord> <Elegantbeef> Well possibly for you
[03:20:54] <FromDiscord> <Elegantbeef> Refs are used when you need ref semantics, which this falls under
[03:23:37] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3y9M
[03:27:33] <FromDiscord> <Elegantbeef> The lambda lifting seems to be smart enough to copy when it makes sense
[03:27:37] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3y9O
[03:27:57] <FromDiscord> <Elegantbeef> Not really
[03:28:24] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[03:28:39] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[03:29:27] <FromDiscord> <Elegantbeef> Considering there is no way presently to ensure that the captured `i` doesnt outlive the first `i` it makes sense to error since internally `var int` is really `ptr int`
[03:30:24] <FromDiscord> <Elegantbeef> in the case where the variable is declared in a scope above the closure procedure it reasons it's safe to copy/refer to it as it's not a `var int` it's an `int` i guess, so it copies it
[03:30:35] <FromDiscord> <Elegantbeef> Unless it's a global then it refers to it seems
[03:31:07] <FromDiscord> <Elegantbeef> If you want to get into the nitty gritty of closures https://nim-lang.github.io/Nim/intern.html#code-generation-for-closures
[03:39:56] <FromDiscord> <Recruit_main707> How could i create no ordinal sets?
[03:40:02] <FromDiscord> <Recruit_main707> non
[03:40:10] <FromDiscord> <Elegantbeef> what do you mean?
[03:40:30] <FromDiscord> <Elegantbeef> `import std/sets`?
[03:42:12] <FromDiscord> <Recruit_main707> ok, but i actually need to interop with c++ sets, is there any wrapper out there?
[03:43:35] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[03:43:42] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[03:43:54] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b016:723d:fc9f:63a9:639e:eb87) (Quit: Leaving)
[03:44:47] <FromDiscord> <Recruit_main707> cppstl doesnt seem to have it :/
[03:46:22] <FromDiscord> <Recruit_main707> `CppSet[T] {.importcpp: "std::set".} = object`‚Üµi hope this is enough to make the compiler happy lol
[03:58:36] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[03:58:55] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[04:00:07] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:07:33] *** Joins: vicfred (~vicfred@user/vicfred)
[04:08:34] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:09:41] *** Joins: flynn (~mcbloch@user/flynn)
[04:13:44] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[04:14:00] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[04:29:19] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:30:25] *** Joins: flynn (~mcbloch@user/flynn)
[05:00:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[05:01:32] *** Joins: flynn (~mcbloch@user/flynn)
[05:10:38] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[05:10:53] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[05:34:19] <FromDiscord> <shadow.> sent a code paste, see https://paste.rs/oXA
[05:34:34] <FromDiscord> <shadow.> (edit) "https://play.nim-lang.org/#ix=3yai" => "https://play.nim-lang.org/#ix=3yah"
[05:34:44] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:34:47] <FromDiscord> <shadow.> (edit) "https://play.nim-lang.org/#ix=3yah" => "https://play.nim-lang.org/#ix=3yaj"
[05:34:48] <FromDiscord> <shadow.> (edit) "https://play.nim-lang.org/#ix=3yaj" => "https://play.nim-lang.org/#ix=3yak"
[05:38:46] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Quit: Leaving)
[05:38:48] <FromDiscord> <shadow.> got it, `(emoji | 1)`
[05:40:43] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[05:42:19] *** Joins: neurocyte0 (~neurocyte@212.232.84.187)
[05:42:19] *** Quits: neurocyte0 (~neurocyte@212.232.84.187) (Changing host)
[05:42:19] *** Joins: neurocyte0 (~neurocyte@user/neurocyte)
[05:44:22] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:44:22] *** neurocyte0 is now known as neurocyte
[05:46:06] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:21:55] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[06:22:10] *** Joins: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca)
[07:15:07] *** Quits: watzon (~watzon@136.36.149.145) (Ping timeout: 252 seconds)
[07:20:09] *** Joins: watzon (~watzon@136.36.149.145)
[07:32:07] *** Quits: watzon (~watzon@136.36.149.145) (Ping timeout: 245 seconds)
[08:20:04] <FromDiscord> <retkid> is there anyway to use nim to generate dependency free python
[08:20:14] <FromDiscord> <retkid> using nim as frontend and python as a backend
[08:24:49] <FromDiscord> <aleclarson> relatively how much faster is incremental compilation?
[08:24:56] <FromDiscord> <Rika> Much
[08:25:17] <FromDiscord> <Rika> Proportional to the amount of code you have to compile
[08:25:46] <FromDiscord> <retkid> i've been thinking about incremental compilation as a concept for like 8 months now and didn't know what its called
[08:26:04] <FromDiscord> <aleclarson> ur welcome \:)
[08:26:15] <FromDiscord> <retkid> "why dont they just keep 90% of the bytecode and just like snip back the differences"
[08:26:17] <FromDiscord> <Rika> In reply to @retkid "is there anyway to": What does this menac
[08:26:19] <FromDiscord> <Rika> Mean
[08:26:36] <FromDiscord> <aleclarson> i want to use it, but i'm using choosenim.‚Üµis there a guide for building nim yourself?
[08:26:40] <FromDiscord> <Rika> In reply to @retkid ""why dont they just": Because it‚Äôs complex
[08:27:00] <FromDiscord> <Rika> In reply to @aleclarson "i want to use": What is the issue? You can install devel using it
[08:27:17] <FromDiscord> <aleclarson> and that has incremental flag enabled?
[08:27:24] <FromDiscord> <retkid> In reply to @Rika "Because it‚Äôs complex": well yea compilation is a lot more complicated than that
[08:27:30] <FromDiscord> <Elegantbeef> you do `--ic:on` with the compiler
[08:27:32] <FromDiscord> <retkid> but just an id
[08:27:33] <FromDiscord> <Rika> Probably not actually I haven‚Äôt checked
[08:27:34] <FromDiscord> <retkid> (edit) "id" => "idea"
[08:28:44] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3yaB
[08:28:47] <FromDiscord> <Elegantbeef> Well choosenim doesnt allow you to build danger üòõ
[08:28:55] <FromDiscord> <retkid> I kinda want an archive attached to a nim executable where nim acts as the entry point and executes the code via an entry point
[08:28:58] <FromDiscord> <Elegantbeef> may want to do `choosenim update devel`
[08:29:13] <FromDiscord> <retkid> i kinda regret ever programming this in python
[08:29:29] <FromDiscord> <retkid> but its not wroth it to rewrite it
[08:29:35] <FromDiscord> <retkid> (edit) "wroth" => "worth"
[08:29:36] <FromDiscord> <Elegantbeef> choosenim uses nightlies so you'll be a few commits behind but nothing bad with regards to IC
[08:30:30] <FromDiscord> <aleclarson> i dont see `--ic` on this page‚Üµhttps://nim-lang.org/docs/nimc.html
[08:30:32] *** Quits: auxym (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[08:30:38] <FromDiscord> <Elegantbeef> Well that's stable
[08:30:42] <FromDiscord> <Elegantbeef> So... makes sense üòõ
[08:30:52] <FromDiscord> <aleclarson> mm yiss
[08:31:30] <FromDiscord> <Elegantbeef> Also doesnt appear in the compiler docs right now either
[08:32:00] <FromDiscord> <Elegantbeef> ah seems `--ic:on` might be a shortcut for `--incremental`
[08:36:00] <FromDiscord> <aleclarson> >     Error:  You are working with an old version of Nimble cache repository.‚Üµ>      Hint:  Please delete your "/Users/alec/.nimble" directory.‚Üµ‚ÜµI did as it said, and now I have no `nimble` command üòê
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:25] <FromDiscord> <Elegantbeef> Well your nimble file was probably there
[08:36:26] <FromDiscord> <Rika> Ugh
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:31] <FromDiscord> <Rika> Uhh 
[08:36:41] <FromDiscord> <Rika> Yeah a lot of things are there
[08:37:09] <FromDiscord> <aleclarson> luckily i alias `rm` to move to trash
[08:37:36] <FromDiscord> <aleclarson> what do i delete instead
[08:47:31] <FromDiscord> <aleclarson> deleting `~/.nimble/{nimbledata.json,pkgs}` worked
[08:52:07] <FromDiscord> <aleclarson> what in gods name‚Üµ>     Error:  File exists‚Üµ>         ... Additional info: ("../pkgs/nimterop-0.6.13-a93246b2ad5531db11e51de7b2d188c42d95576a/nimterop/loaf", "/Users/alec/.nimble/bin/loaf")
[08:52:12] <FromDiscord> <aleclarson> on `nimble install`
[08:52:41] <FromDiscord> <Elegantbeef> You're installing something that needs nimterop it's attempting to build loaf and it exists
[08:53:33] <FromDiscord> <aleclarson> oh just gotta delete `~/.nimble/bin/loaf`
[08:54:01] <FromDiscord> <Elegantbeef> Swear there needs to be something that gives nimble a fresh start cause i've had a few issues similar to this
[08:56:52] <FromDiscord> <aleclarson> maybe i'm crazy, but i'd prefer a `npm` like approach, where local packages install into `node_modules` and bin files into `node_modules/.bin`
[08:57:22] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[08:59:38] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[08:59:38] <FromDiscord> <aleclarson> no chance for conflict between `.nimble` files
[08:59:38] <FromDiscord> <aleclarson> although the deduplication of global cache is nice
[08:59:38] <FromDiscord> <Elegantbeef> There still isnt presently
[09:00:37] <FromDiscord> <aleclarson> oh weird, in some cases the symlink in `~/.nimble/bin` is replaced just fine‚Üµ> Warning: Symlink already exists in /Users/alec/.nimble/bin/napibuild. Replacing.
[09:00:50] <FromDiscord> <aleclarson> probably cuz i linked in a local clone manually
[09:08:40] <FromDiscord> <no name fits> What's the standard practice for making an `object` into a `ref object`? I'm aware I have to copy the `object` into the new `ref`, but what's the best way to go about that?
[09:09:38] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3yaG
[09:10:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3yaI
[09:10:23] <FromDiscord> <no name fits> Thanks!
[09:11:15] *** Quits: mahlon (~mahlon@martini.nu) (*.net *.split)
[09:11:53] *** Joins: mahlon (~mahlon@martini.nu)
[09:19:56] <FromDiscord> <œÄœÑ (pi man)> sent a code paste, see https://play.nim-lang.org/#ix=3yaJ
[09:20:20] <FromDiscord> <Elegantbeef> the sequence is mutable but the objects are not?
[09:20:50] <FromDiscord> <œÄœÑ (pi man)> yea
[09:22:01] <FromDiscord> <Elegantbeef> There is no built in way that i know of, you'd need your own API over the collection
[09:22:23] <FromDiscord> <œÄœÑ (pi man)> hmm, ok
[09:26:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3yaO
[09:27:14] *** Quits: andinus (andinus@tilde.institute) (*.net *.split)
[09:27:15] *** Quits: pjzz (~pjz@place.org) (*.net *.split)
[09:27:15] *** Quits: systemdsucks (~systemdsu@user/systemdsucks) (*.net *.split)
[09:27:36] *** Joins: systemdsucks (~systemdsu@user/systemdsucks)
[09:27:46] *** Joins: pjzz (~pjz@place.org)
[09:27:47] *** Joins: andinus (andinus@tilde.institute)
[09:38:10] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[09:39:16] *** Joins: flynn (~mcbloch@user/flynn)
[10:10:02] *** Joins: max22- (~maxime@2a01cb0883359800332c1af3aa4fc5cd.ipv6.abo.wanadoo.fr)
[11:10:39] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:15:03] *** Joins: xet7 (~xet7@user/xet7)
[11:18:14] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[11:33:48] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[11:34:51] *** Joins: xet7 (~xet7@user/xet7)
[11:40:44] *** Joins: userj (~userjjjj@user/userj)
[12:30:37] <NimEventer> New thread by Miran: Nim 1.6.0 RC1, see https://forum.nim-lang.org/t/8404
[12:31:37] <FromDiscord> <impbox [ftsf]> omg 1.6
[12:31:47] <FromDiscord> <impbox [ftsf]> is there a summary of what's different between 1.4->1.6?
[12:32:28] <PMunch> Not for the RC it seems
[12:34:26] <FromDiscord> <Elegantbeef> @impbox [ftsf]\: https://github.com/nim-lang/Nim/blob/devel/changelog.md
[12:38:11] <FromDiscord> <fae> My first Nim package, and first time doing FFI with C <https://github.com/farism/flex> plz b gentle
[12:38:35] <FromDiscord> <fae> I'm glad I picked a relatively simple library for my first attempt
[12:38:39] <FromDiscord> <Elegantbeef> "please be gentle" means what "code review please" üòõ
[12:39:18] <FromDiscord> <fae> it means if you happen to look at it don't be surprised if I have done stuff that makes no sense üòÑ
[12:40:57] <PMunch> Hmm, build failed: http://ix.io/3ybd
[12:44:36] <FromDiscord> <Elegantbeef> Well fae i do want to point out you do not need to set the first enum to `= 0` it's by default üòÄ
[12:45:46] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Ping timeout: 252 seconds)
[12:45:55] <FromDiscord> <Elegantbeef> Also you dont need `importC` if the nim name is the same as the C name, i'll stop giving unasked for suggestions eventually
[12:45:56] <FromDiscord> <Elegantbeef> Same issue here pmunch
[12:46:52] <FromDiscord> <fae> every suggestion is (implicitly) asked for, best way to learn
[12:53:23] <FromDiscord> <fae> if i try to remove the pragma i get a syntax error saying implementation expected
[12:54:28] <FromDiscord> <Elegantbeef> i forgot to say you dont need the string name
[12:54:28] <FromDiscord> <Elegantbeef> you need importC, but not the string after
[12:54:58] <FromDiscord> <fae> gotcha, string is just to map it to a diff name
[12:54:59] <FromDiscord> <fae> ty
[12:55:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[12:56:05] <FromDiscord> <impbox [ftsf]> @fae looks awesome!
[12:56:17] <FromDiscord> <impbox [ftsf]> would be great for game ui
[12:56:45] <FromDiscord> <impbox [ftsf]> it's not locked to any specific drawing api right?
[12:57:04] <FromDiscord> <fae> no
[12:57:09] <FromDiscord> <fae> it just returns rects
[12:57:28] <FromDiscord> <impbox [ftsf]> sweet
[12:57:32] <FromDiscord> <fae> i happen to be using sdl2 here but i want to try out pixie
[13:02:00] <FromDiscord> <fae> there is also this <https://github.com/mvenditto/nim-yoga> which is kind of the same thing but pretty old and yoga is c++
[13:02:26] <FromDiscord> <fae> was happy to find a pure c lib that did the same thing, granted it doesnt have all the features/performance of yoga
[13:02:58] <FromDiscord> <Elegantbeef> The next step is to make it pure nim üòõ
[13:04:04] <FromDiscord> <fae> so I thought about porting yoga to Nim at one point to learn Nim better, but that is a pretty lofty undertaking lol
[13:12:44] <NimEventer> New thread by Jasonfi: Reading stream data only when there is data available, see https://forum.nim-lang.org/t/8405
[13:14:55] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[13:27:48] <FromDiscord> <zidsal> https://forum.nim-lang.org/t/8404 is there a list of changes in nim 1.6.0 RC1 yet? or do i need to crawl through git commits?
[13:28:00] <FromDiscord> <zidsal> nevermind I should scroll up and read discord
[13:28:04] <FromDiscord> <Yardanico> you can always just read the changelog
[13:28:15] <FromDiscord> <Yardanico> but ofc for all fixed issue you'll have to wait for release
[13:28:20] <FromDiscord> <Yardanico> (edit) "issue" => "issues"
[13:28:32] <FromDiscord> <zidsal> ya I just saw that post by elegant now I look foolish!
[13:31:23] <FromDiscord> <Rika> There was a unary slice operator??
[13:31:27] <FromDiscord> <Yardanico> In reply to @Rika "There was a unary": ofc?
[13:31:46] <FromDiscord> <Yardanico> and not "was", it still is there
[13:31:51] <FromDiscord> <Yardanico> it was simply deprecated for 1.6
[13:32:27] <FromDiscord> <Rika> What do you mean of course no one seems to have ever talked about it
[13:33:02] <FromDiscord> <Yardanico> well, I certainly used it on code-golf.io for shortening nim code
[13:33:28] <FromDiscord> <zidsal> sent a code paste, see https://play.nim-lang.org/#ix=3ybl
[13:34:01] <FromDiscord> <Rika> Here marks the conversion of Nim to APL
[13:34:33] <FromDiscord> <Yardanico> well, it'll need an experimental flag specifically passed to the compiler :)
[13:34:41] <FromDiscord> <Yardanico> but yeah, I hope people don't overuse it too much
[13:34:53] <FromDiscord> <zidsal> too late, I'm already making PR to nico,
[13:35:27] <FromDiscord> <Yardanico> but what about backwards compatibility?!
[13:35:48] <FromDiscord> <zidsal> you mean you don't want an api as easy as ‚äó‚òÖ9
[13:41:13] <FromDiscord> <Rika> > deprecated any‚ÜµNice
[13:44:06] <FromDiscord> <Yardanico> there's also an great thing for noSideEffect fans not mentioned in the changelog - https://github.com/nim-lang/Nim/pull/18418/ :)
[13:44:15] <FromDiscord> <Yardanico> a
[13:44:49] <FromDiscord> <haxscramper> yeah, it is strange that changelog does not mention compilation error changes, at least ones that are so noticeable
[13:45:02] <FromDiscord> <Yardanico> In reply to @haxscramper "yeah, it is strange": because the PR authors didn't add them :P
[13:45:03] <FromDiscord> <haxscramper> also there is a fix, finally for invalid discriminant value
[13:45:19] <FromDiscord> <haxscramper> now it shows the value
[13:45:20] <FromDiscord> <Yardanico> you (or me, or someone else) can make a PR adding those things to the changelog
[13:51:56] <FromDiscord> <haxscramper> We also need to find some smart person and ask for correct names for some operators - `"‚àô ‚àò √ó ‚òÖ ‚äó ‚äò ‚äô ‚äõ ‚ä† ‚ä° ‚à© ‚àß ‚äì ¬± ‚äï ‚äñ ‚äû ‚äü ‚à™ ‚à® ‚äî"`, like `‚äî ‚ä† ‚ä°` "the crossed square operator" is probably not correct nmae
[13:52:13] <FromDiscord> <haxscramper> This is all domain-specific, but at last something google-able would be nice
[13:59:20] <FromDiscord> <pointystick> Are the Unicode names any use for this? https://www.compart.com/en/unicode/block/U+2200
[14:00:22] <FromDiscord> <Yardanico> @haxscramper it's called "squared times" :P
[14:00:48] <FromDiscord> <Yardanico> a star is just a star though ("black star")
[14:01:15] <FromDiscord> <haxscramper> I can use unicode search as well, yes
[14:01:47] <FromDiscord> <haxscramper> But for some reason I doubt that it is just called "square times" and not "multipicative someting-something" when it is actually used
[14:03:11] <FromDiscord> <Yardanico> oh!
[14:03:15] <FromDiscord> <Yardanico> apparently you can use wiktionary for that
[14:03:15] <FromDiscord> <Yardanico> https://en.wiktionary.org/wiki/%E2%8A%A0
[14:03:20] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/884733063072997376/unknown.png
[14:03:22] <FromDiscord> <Yardanico> "Free multiplicative convolution"
[14:11:51] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ybx
[14:13:37] <FromDiscord> <haxscramper> (edit) "https://play.nim-lang.org/#ix=3ybx" => "https://play.nim-lang.org/#ix=3yby"
[14:13:45] <FromDiscord> <haxscramper> Or use SCF for ‚àà to `in`
[14:21:15] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:22:20] *** Joins: flynn (~mcbloch@user/flynn)
[14:44:30] <arkanoid> I feel like being on the wrong side of the river. I've never used 2 of the 8 modules imported by prelude. 2 of the most "common modules" are unknown to me after months of nim
[14:45:30] <FromDiscord> <Yardanico> i never use prelude
[14:45:44] <FromDiscord> <Yardanico> it's nice for some really quick prototyping, but I prefer to specify imports right away
[14:46:44] <arkanoid> yeah I do prefer that too, but not using parseutils or parseopt makes me feed excluded from the prelude party
[14:47:02] <arkanoid> s/feed/feel
[14:47:34] <FromDiscord> <haxscramper> `parseutils, parseopt` are not really common
[14:47:39] <FromDiscord> <haxscramper> `times` is very specific
[14:47:46] <FromDiscord> <haxscramper> https://github.com/nim-lang/RFCs/issues/398#issuecomment-891762652
[14:48:12] <FromDiscord> <haxscramper> it seems like this is a prelude-for-something-like-command-line-application
[14:49:03] <FromDiscord> <haxscramper> `options` is more common than
[14:49:47] <FromDiscord> <Yardanico> yeah, I'd agree, parseutils isn't common
[14:50:04] <FromDiscord> <Yardanico> parseopt might be common for CLI apps if you want to use a pure-stdlib solution, otherwise there are things like cligen, docopt, argparse, etc
[14:50:23] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ybM
[14:50:34] <FromDiscord> <haxscramper> in `hmisc` I have multiple preludes
[14:50:40] <FromDiscord> <haxscramper> For unit testing, for CLI apps
[14:50:45] <FromDiscord> <haxscramper> And plan to add a couple more
[14:53:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:53:56] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:54:30] *** Joins: flynn (~mcbloch@user/flynn)
[15:04:22] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:04:43] *** Joins: arkurious (~arkurious@user/arkurious)
[15:05:29] *** Joins: flynn (~mcbloch@user/flynn)
[15:12:41] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:13:48] *** Joins: flynn (~mcbloch@user/flynn)
[15:17:19] <arkanoid> prelude is a lie!
[15:18:44] <arkanoid> I'd really like to read something about error handling patterns/strategies/tecniques. I'm puzzled about exceptions vs options
[15:19:45] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:20:33] <arkanoid> I've been using exceptions basically all my life, except recently where I've been pushing some pure code and some monads into imperative programming. Point is that even if I feel that options is the "way to go", it also feels much harder than exceptions to deal with and I tend to produce messy verbose code. I'd like to fix that
[15:20:50] *** Joins: flynn (~mcbloch@user/flynn)
[15:23:34] <FromDiscord> <haxscramper> I don't think there are any writeups about error handling strategies, or at least I don't know of any that are nim-specific.
[15:23:53] <FromDiscord> <haxscramper> But I would recommend to stop worrying and just use exceptions
[15:24:19] <FromDiscord> <haxscramper> Default to exceptions, and use options where you want to explicitly communicate optionality of the value
[15:24:44] <arkanoid> Dr. Strangelove approves
[15:45:10] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 260 seconds)
[15:48:20] *** Joins: flynn (~mcbloch@user/flynn)
[16:10:44] <FromDiscord> <Recruit_main707> sent a code paste, see https://play.nim-lang.org/#ix=3yc6
[16:30:40] *** Quits: max22- (~maxime@2a01cb0883359800332c1af3aa4fc5cd.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:33:39] <FromDiscord> <Recruit_main707> and can `=destroy`, `=copy`, etc be methods?
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:41] *** Parts: Zevv (~Zevvvvv@185.238.131.12) ()
[16:43:51] <FromDiscord> <Yardanico> ofc not :)
[16:43:58] <FromDiscord> <Yardanico> (not on nim side)
[16:52:03] <FromDiscord> <Recruit_main707> do you mean the destroy function?
[16:52:07] <FromDiscord> <Recruit_main707> or the method?
[16:53:08] <arkanoid> I'm wrapping this sprintf like C function, not sure how to use cstring in this context https://www.genivia.com/doc/guide/html/group__group__fault.html#gafc9d67060889f7243381299047f0e8e6
[16:53:19] <FromDiscord> <Rika> wrapping == always use cstring...
[16:53:42] <arkanoid> Rika, what do you mean?
[16:54:18] <FromDiscord> <Rika> if you're wrapping, always use cstring instead of string. or what do you mean? cstring is equivalent to char  in c
[16:54:32] <FromDiscord> <Rika> size_t -> csize
[16:55:07] <FromDiscord> <Recruit_main707> csize_t apparently csize is deprecated
[16:55:15] <FromDiscord> <Rika> oh huh really
[16:55:16] <FromDiscord> <Rika> okay
[17:03:22] <arkanoid> didn't know there was a csize_t
[17:06:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[17:08:21] <FromDiscord> <Recruit_main707> when static linking a library `foo.lib`, i should do `--passL:foo.lib` and `--dynlibOverride:foo`? i dont understand what does dynlibOverride expect, the static lib name?
[17:09:42] <arkanoid> Recluit_main707: best option is using dymlib pragma, less optimal option is using passL
[17:10:16] <arkanoid> dynlibOverride is used for other purposes
[17:10:31] <arkanoid> wait, I misread, you wrote static
[17:10:55] <arkanoid> so you should use link pragma: https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-link-pragma
[17:11:33] <arkanoid> I'm lazy and I'm using passL actually to static link my app
[17:12:07] <arkanoid> {.passL:"-Lout -l:libonvifclient.a -l:libgsoapssl.a -l:libssl.a -l:libcrypto.a -l:libz.a -l:libm.a".}
[17:17:48] <FromDiscord> <Yardanico> In reply to @Recruit_main707 "when static linking a": dynlibOverride is used when you want to statically link libraries that Nim uses as dynamic ones by default
[17:17:49] <FromDiscord> <Yardanico> e.g. OpenSSL
[17:17:58] <FromDiscord> <Yardanico> I mean nim stdlib
[17:19:24] <FromDiscord> <Recruit_main707> ok, thanks
[17:56:39] <arkanoid> Yardanico, but what if I don't use --d:ssl switch but I do {.passL: "-l:libssl.a -l:libcrypto.a -l:libz.a -l:libm.a".}, do I still need to use dynlibOverride?
[17:57:09] <FromDiscord> <Yardanico> no, but then SSL support in httpclient will be disabled and it won't use these statically linked libs
[17:57:36] <arkanoid> got it, thanks
[18:14:05] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[18:30:37] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:45:42] <FromDiscord> <gabreal> Hello hello everyone
[18:45:46] <FromDiscord> <gabreal> üëã
[18:46:30] <FromDiscord> <Rika> i do not recall your former name
[18:46:37] <FromDiscord> <gabreal> Avatarfighter üôÇ
[18:46:54] <FromDiscord> <gabreal> what‚Äôs good rika
[18:46:56] <FromDiscord> <Rika> did you get tired of fighting avatars
[18:47:02] <FromDiscord> <gabreal> a bit :p
[18:47:35] <FromDiscord> <gabreal> its tough having that username since the 2nd grade you know sometimes you got to spice things up
[18:48:07] <nrds> <06Prestige99> ay gabreal
[18:48:52] <FromDiscord> <gabreal> sup prestige üôÇ
[18:49:38] <nrds> <06Prestige99> Just work, dealing with database nonsense :P hbu?
[18:50:47] <FromDiscord> <gabreal> porting my program to cps it‚Äôs been a bit rough on the learning curve
[18:53:42] <nrds> <06Prestige99> hard to work with? I haven't seen much about cps yet
[18:54:06] <FromDiscord> <Rika> its a concept that is hard to wrap your head around
[18:54:12] <FromDiscord> <Yardanico> In reply to @gabreal "porting my program to": curious - any reason you want cps specifically?
[18:54:19] <FromDiscord> <Yardanico> or just to play around?
[18:54:45] *** Joins: maxime_ (~maxime@2a01cb0883359800de1604fd61332a1a.ipv6.abo.wanadoo.fr)
[18:54:49] <FromDiscord> <gabreal> cps needs more real usage to improve so I‚Äôm learning it
[18:55:33] <FromDiscord> <gabreal> It‚Äôs also extremely light on resources for me atm much lighter than my nim async and goroutine versions of my bot
[18:55:53] <FromDiscord> <gabreal> Idk it has some advantages to me that are valuable
[18:56:08] <FromDiscord> <Yardanico> is your code open?
[18:56:17] <FromDiscord> <gabreal> No sadly I am selling my program
[18:56:36] <FromDiscord> <gabreal> im just trying to find weird behavior/complain abt things that should be easier
[18:56:48] <FromDiscord> <gabreal> one complaint i have is the lack of for loops though that is a nim bug afaik
[18:57:40] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[18:57:42] <FromDiscord> <gabreal> Prestige: It is a bit hard to wrap my head around how to structure everything :p
[18:58:09] <FromDiscord> <Hamid Bluri> where is docs for nim devel?
[18:58:18] <FromDiscord> <Yardanico> https://nim-lang.github.io/Nim/
[18:58:22] <FromDiscord> <Hamid Bluri> thanks
[18:59:06] <FromDiscord> <Yardanico> In reply to @gabreal "No sadly I am": do you use http/https? if yes, I guess you had to write http client code supporting cps yourself?
[18:59:07] <FromDiscord> <Rika> In reply to @gabreal "No sadly I am": mans moved up in the world
[18:59:09] *** Joins: vicfred (~vicfred@user/vicfred)
[18:59:11] *** Quits: vicfred (~vicfred@user/vicfred) (Client Quit)
[18:59:11] <FromDiscord> <Rika> im still here doing jack
[18:59:59] <FromDiscord> <gabreal> In reply to @Yardanico "do you use http/https?": Yeah I am still implementing my httpclient
[19:00:06] <nrds> <06Prestige99> gabreal hopefully it improves with time
[19:00:12] <FromDiscord> <Yardanico> In reply to @gabreal "Yeah I am still": maybe you can at least open source that part in the future? :P
[19:00:20] <FromDiscord> <gabreal> ofc ofc
[19:00:28] <FromDiscord> <Yardanico> did you start from the normal httpclient source?
[19:00:35] <FromDiscord> <Yardanico> or decided to write your own from ground up?
[19:00:43] <FromDiscord> <gabreal> No I have different needs than what httpclient can provide :p
[19:00:50] <FromDiscord> <Yardanico> huh
[19:01:35] <FromDiscord> <gabreal> Im not sure how to explain it lol
[19:02:07] <FromDiscord> <gabreal> I needed a real cookie jar, better header handling, ability to stream bytes manually and greater proxy support
[19:02:10] <FromDiscord> <Rika> are you still making that thing we tried
[19:02:12] <FromDiscord> <gabreal> Yeah
[19:02:16] <FromDiscord> <Rika> i see
[19:02:22] <FromDiscord> <Yardanico> üëÄ?
[19:02:25] <FromDiscord> <gabreal> Since December üò©
[19:02:36] <FromDiscord> <Rika> damn that was a while back
[19:02:36] <FromDiscord> <Yardanico> crypto trading bot? :D
[19:02:40] <FromDiscord> <gabreal> Nah ahah
[19:02:42] <FromDiscord> <Rika> lets say its that
[19:02:44] <FromDiscord> <Rika> its close enough
[19:02:50] <FromDiscord> <Yardanico> hmMmm
[19:02:51] <FromDiscord> <gabreal> ^
[19:02:56] <FromDiscord> <gabreal> not at all crypto related tho
[19:03:01] <FromDiscord> <gabreal> it is a bot :p
[19:03:09] <FromDiscord> <Rika> and its technically for trading
[19:03:12] <FromDiscord> <gabreal> ^
[19:03:15] <FromDiscord> <Yardanico> is the bot itself in so-called "grey zone"? ü§î
[19:03:22] <FromDiscord> <gabreal> yeah
[19:03:26] <FromDiscord> <Rika> yessir
[19:03:32] <FromDiscord> <Yardanico> now im curious
[19:03:41] <FromDiscord> <Rika> yards in on it bet
[19:03:43] <FromDiscord> <Rika> i kid
[19:03:53] <FromDiscord> <gabreal> it‚Äôs been really fun making it ngl I‚Äôve been ripping apart antibots like they are nothing
[19:04:10] <FromDiscord> <Rika> lmao
[19:04:16] <FromDiscord> <Rika> thats pretty cool
[19:04:38] <FromDiscord> <gabreal> right ahah
[19:08:13] <arkanoid> you said that "char *" is cstring, correct?
[19:08:40] <FromDiscord> <Hamid Bluri> what is `Example: cmd: -r:off` in the docs? and what it does?
[19:09:25] <FromDiscord> <Rika> arkanoid yes why
[19:09:30] <FromDiscord> <Rika> it should be so afaik
[19:10:01] <FromDiscord> <Yardanico> In reply to @hamidb80 "what is `Example: cmd:": you can ignore it, it's runnableExamples-specific
[19:10:09] <FromDiscord> <Yardanico> means that the specified example code shouldn't run when being tested
[19:10:59] <FromDiscord> <Yardanico> by default runnableExamples will get compiled and run, but with that flag nim doc will only check that it compiles
[19:12:46] <arkanoid> Rika: I'm dealing with SIGSEGV when I try to call this wrapped function this way: https://play.nim-lang.org/#ix=3ycJ 
[19:14:09] <arkanoid> do you see any error in my wrapper proc or on how I am calling it?
[19:15:50] <FromDiscord> <Rika> it doesnt seem wrong, maybe do `s[0].addr` instead though (but i believe that should be unnecessary...)
[19:16:42] <FromDiscord> <Yardanico> that's actually pretty really important @Rika
[19:16:50] <FromDiscord> <Yardanico> also implicit cstring conversion is now deprecated in nim
[19:16:55] <FromDiscord> <leorize> and the string should be allocated with `newString` then truncated
[19:17:07] <FromDiscord> <Rika> In reply to @Yardanico "also implicit cstring conversion": ah it is?
[19:17:19] <FromDiscord> <Rika> i see
[19:17:23] <FromDiscord> <Rika> okay then it is necessary]
[19:17:36] <FromDiscord> <leorize> if you allocate it with newStringOfCap, the length will be 0 and when you expand the buffer, Nim will zero out the buffer
[19:18:22] <FromDiscord> <leorize> you only have to explicitly convert it, no need for addr‚Üµ(@Yardanico)
[19:18:42] <FromDiscord> <Anuke> is this PR as exciting as it sounds? <https://github.com/nim-lang/Nim/pull/18818>
[19:18:50] <FromDiscord> <Yardanico> yes, have you read the RFC?
[19:18:56] <FromDiscord> <Yardanico> also there's some technical discussion in #internals
[19:19:09] <FromDiscord> <Yardanico> https://github.com/nim-lang/RFCs/issues/416 is the RFC
[19:22:04] <arkanoid> leorize, correct, now it works. len vs cap, makes a lot of sense
[19:22:34] <arkanoid> but string -> cstring implicit conversion works on 1.4.8
[19:23:17] <FromDiscord> <Yardanico> I didn't say it doesn't work anymore, I said it's _deprecated_ now in devel and will be in 1.6
[19:23:25] <FromDiscord> <Yardanico> the compiler will show a warning
[19:24:03] <FromDiscord> <Anuke> In reply to @Yardanico "yes, have you read": yeah
[19:24:32] <FromDiscord> <Anuke> does it speed up compilation at the moment?
[19:25:00] <FromDiscord> <Yardanico> it's still in the implementation phase
[19:25:15] <FromDiscord> <Yardanico> and compilation speedup is not the main the focus of that feature :)
[19:25:47] <FromDiscord> <Yardanico> @Anuke if you want you can compile nim from that PR and check it yourself
[19:25:59] <FromDiscord> <Anuke> right, I'm just curious if it really does "massively speed up compilation times"
[19:26:18] <FromDiscord> <Anuke> In reply to @Yardanico "<@!123539225919488000> if you want": I'll take a look at some point
[19:26:28] <FromDiscord> <Yardanico> In reply to @Anuke "right, I'm just curious": well, of course it will speedup time
[19:26:37] <arkanoid> actually I'm not getting that warning
[19:26:43] <FromDiscord> <Yardanico> are you on devel?
[19:26:46] <FromDiscord> <Yardanico> or 1.6rc ?
[19:26:49] <FromDiscord> <Yardanico> (edit) "1.6rc" => "1.6rc1"
[19:27:20] <FromDiscord> <Yardanico> @Anuke it's about being "lazy", so the compiler won't have to check (or at least that will be configurable) code that is not used
[19:27:45] <FromDiscord> <Yardanico> so even if you import a module with a lot of procs, the compiler will only semcheck (check that they are actually allowed to compile) those that you actually use
[19:28:18] <FromDiscord> <Yardanico> @arkanoid as I said, that warning is there in devel and will be in 1.6, it's not in 1.4.8
[19:28:26] <FromDiscord> <Yardanico> from https://github.com/nim-lang/Nim/blob/devel/changelog.md "A dangerous implicit conversion to cstring now triggers a [CStringConv] warning. This warning will become an error in future versions! Use an explicit conversion like cstring(x) in order to silence the warning."
[19:28:51] <arkanoid> ok ok, sorry
[19:30:26] <FromDiscord> <Anuke> related question: I saw this mentioned in the 1.6 RC thread, but with no apparent solution - when I `choosenim devel`, it fails with‚Üµ`Command: ./bin/nim c koch: nim-#devel/config/nim.cfg(16, 1) Error: invalid command line option: '--hint'`
[19:30:37] <FromDiscord> <Anuke> how do I solve this?
[19:31:24] <FromDiscord> <Yardanico> In reply to @hamidb80 "even with administration access": exit vscode
[19:32:05] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3ycY
[19:32:09] <FromDiscord> <Hamid Bluri> sent a code paste, see https://paste.rs/Al4
[19:32:13] <FromDiscord> <Hamid Bluri> im not in vscode
[19:32:21] <FromDiscord> <Yardanico> close whatever text editor you use
[19:32:32] <FromDiscord> <Yardanico> for nim
[19:32:39] <FromDiscord> <Hamid Bluri> use opened powershell individually
[19:32:42] <FromDiscord> <Yardanico> windows doesn't allow you to replace files of running .exe files -> vscode or some other code editor uses nimsuggest -> you're trying to update nim (including nimsuggest) while nimsuggest exe is running -> windows issues this "access is denied" error
[19:32:51] <FromDiscord> <Yardanico> at least that's how it was in my experience before
[19:32:52] <arkanoid> what are the most promising features coming to nim/libs in near future (horizon couple of years)? What are you working on? Please generate hype! I'm only aware or CPS
[19:34:03] <FromDiscord> <Yardanico> the feature anuke linked above
[19:34:04] <FromDiscord> <Yardanico> also ic
[19:35:34] <arkanoid> the lazy symbol semantic checking?
[19:35:43] <FromDiscord> <Hamid Bluri> In reply to @arkanoid "the lazy symbol semantic": yep
[19:37:09] <FromDiscord> <Hamid Bluri> do you think is it even possible in a compiled time programming language you have green threads or schedulers? something like what elixir does
[19:37:17] <FromDiscord> <Hamid Bluri> (edit) "you" => "to"
[19:37:45] <arkanoid> what is ic?
[19:38:39] <FromDiscord> <Rika> incremental compilation
[19:38:40] <nrds> <06Prestige99> incremental compilation
[19:38:47] <FromDiscord> <Rika> will speed up nim compilation by a good amount
[19:48:33] <FromDiscord> <leorize> see the disruptek/cps project‚Üµ(@Hamid Bluri)
[19:50:25] <arkanoid> thanks
[19:52:58] <FromDiscord> <konsumlamm> In reply to @hamidb80 "do you think is": it's definitely possible (why wouldn't it?), Haskell has that for example
[19:55:01] <FromDiscord> <aleclarson> this happened during `nimble install` with nim devel‚Üµ> Error: internal error: getTypeDescAux(tyEmpty)‚Üµ> No stack traceback available‚Üµ> To create a stacktrace, rerun compilation with './koch temp c <file>', see https://nim-lang.github.io/Nim/intern.html#debugging-the-compiler for details
[19:56:33] <FromDiscord> <aleclarson> some sort of type-checking bug?
[19:57:51] <FromDiscord> <aleclarson> i don't get why it can't at least print the node location
[19:59:55] <FromDiscord> <aleclarson> what file should i run `./koch temp c` on if i don't know which file failed
[20:00:46] <FromDiscord> <aleclarson> also, does choosenim even make `koch` available to me?
[20:01:32] <FromDiscord> <Rika> yes
[20:01:36] <FromDiscord> <Rika> on that last qn
[20:03:03] <FromDiscord> <aleclarson> not seeing it in `~/.nimble/bin`
[20:03:54] <FromDiscord> <Rika> wont be there
[20:04:00] <FromDiscord> <Rika> will be in choosenim/toolchains
[20:05:13] <FromDiscord> <aleclarson> found it thx
[20:05:29] <FromDiscord> <aleclarson> how can i check the nim version from a `.nim` script?
[20:06:02] <FromDiscord> <haxscramper> https://nim-lang.org/docs/system.html#NimMajor
[20:06:25] <FromDiscord> <aleclarson> does that report `devel` or is there another property for that
[20:06:33] <FromDiscord> <aleclarson> nvm
[20:09:02] <FromDiscord> <Rika> devel versions are always odd
[20:09:17] <FromDiscord> <Rika> (only applies to minor and patch versions
[20:11:38] <FromDiscord> <aleclarson> is it possible to run `nimble install` with koch?
[20:11:44] <FromDiscord> <aleclarson> (edit) "koch?" => "`koch temp`?"
[20:11:50] <FromDiscord> <aleclarson> (edit) "run" => "force" | "with" => "to use"
[20:12:05] <FromDiscord> <Rika> no
[20:13:42] <FromDiscord> <aleclarson> how about make `nimble install` log every `.nim` file it's compiling as it goes. `--verbose` doesn't do it unfortunately
[20:13:50] <FromDiscord> <aleclarson> (edit) "goes." => "goes?‚Üµ"
[20:14:16] <FromDiscord> <aleclarson> sry should've done `--help` first
[20:14:24] <FromDiscord> <aleclarson> (edit) "first" => "before asking"
[20:15:35] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3ydf
[20:16:09] <FromDiscord> <aleclarson> In reply to @aleclarson "how about make `nimble": sadly, `--debug` doesn't help either
[20:18:01] <FromDiscord> <haxscramper> Are you trying to solve some specific issue or this is a suggestion?
[20:18:19] <FromDiscord> <aleclarson> In reply to @aleclarson "this happened during `nimble": I'm solving this issue
[20:19:03] <FromDiscord> <Hamid Bluri> hey
[20:19:41] <FromDiscord> <Hamid Bluri> is there any way to get informaton from `.nimble` file
[20:19:44] <FromDiscord> <Hamid Bluri> ?
[20:20:28] <FromDiscord> <Hamid Bluri> a want a parser for `.nimble` files in other words
[20:21:35] <FromDiscord> <Hamid Bluri> (edit) "?" => "does stdlib have that?"
[20:24:42] *** Quits: maxime_ (~maxime@2a01cb0883359800de1604fd61332a1a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:25:31] *** Joins: max22- (~maxime@2a01cb088335980060aa426106dec0f1.ipv6.abo.wanadoo.fr)
[20:29:41] *** Joins: maxime_ (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:32:45] *** Quits: max22- (~maxime@2a01cb088335980060aa426106dec0f1.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[20:35:11] <arkanoid> do you know any avlib based video player project written in nim?
[20:35:20] <arkanoid> I mean libav
[20:37:23] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3ydo
[20:51:58] <arkanoid> is it possible to load .so shared libs from same dir of executable without having to wrap it in a LD_LIBRARY_PATH context?
[20:52:50] *** Quits: maxime_ (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Quit: Leaving)
[20:55:46] <arkanoid> something like https://nehckl0.medium.com/creating-relocatable-linux-executables-by-setting-rpath-with-origin-45de573a2e98
[21:11:19] *** Joins: max22- (~maxime@2a01cb0883359800554e78e897c895d5.ipv6.abo.wanadoo.fr)
[21:17:24] <FromDiscord> <Hamid Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3ydA
[21:18:11] <FromDiscord> <Hamid Bluri> sent a code paste, see https://paste.rs/ipW
[21:28:19] <FromDiscord> <OffenseTeacher> Before I jump into this rabbit hole, do you guys think it is feasible to start renaming everything with the term "nim" inside generated .c file before compilation to avoid the binary being recognized as a Nim executable? Notably "NimMainModule", "NimMainInner", "NimMain", etc
[21:34:54] <FromDiscord> <fae> @Hamid Bluri you could take a look at https://nim-lang.org/docs/parsecfg.html
[21:41:51] <FromDiscord> <Rika> In reply to @OffenseTeacher "Before I jump into": Why
[22:01:02] <FromDiscord> <haxscramper> In reply to @hamidb80 "`lines` iterator doesn't work": `lines` opens file for reading
[22:01:26] <FromDiscord> <haxscramper> `readFile().splitLines()` first reads whole file and then splits it
[22:01:40] <FromDiscord> <haxscramper> But it uses `readFile()` that was made available at CT as well
[22:08:49] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[22:38:19] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[22:39:31] *** Joins: xet7 (~xet7@user/xet7)
[22:43:52] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[22:44:53] *** Joins: xet7 (~xet7@user/xet7)
[22:46:31] <FromDiscord> <dom96> In reply to @hamidb80 "a want a parser": you should call `nimble dump` in practically all cases
[22:46:44] <FromDiscord> <haxscramper> `nimble dump --json`
[22:47:28] <FromDiscord> <dom96> In reply to @aleclarson "I'm solving this issue": I left a comment on your issues
[22:47:32] <FromDiscord> <haxscramper> In reply to @hamidb80 "a want a parser": https://haxscramper.github.io/hnimast/nimble_aux.html#parsePackageInfo%2Cstring%2CAbsFile
[22:49:20] <FromDiscord> <haxscramper> But `nimble dump --json` is probably good enough as well
[22:50:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[22:51:39] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[22:53:51] *** Joins: xet7 (~xet7@user/xet7)
[23:05:35] *** Quits: max22- (~maxime@2a01cb0883359800554e78e897c895d5.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[23:11:06] <FromDiscord> <JSONBash> can we expect in depth documentation on ARC/ORC in terms of how to use, what is different etc... but at a digestable level for non compiler/every day dev people?
[23:18:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1)
[23:27:40] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[23:27:56] *** Joins: xet7 (~xet7@user/xet7)
[23:38:29] <FromDiscord> <haxscramper> --gc:arc
[23:38:31] <FromDiscord> <haxscramper> Done
[23:39:16] <FromDiscord> <haxscramper> From what I can tell you just enable different GC, and unless you are doing some interop or something like that you don't have to be concerned with internal details
[23:39:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:f1cc:d5ea:e86d:e5c1) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[23:45:05] *** Joins: max22- (~maxime@2a01cb08833598001355d88e505fa1ae.ipv6.abo.wanadoo.fr)
[23:50:07] <FromDiscord> <JSONBash> isn't there new 'sink' and 'lent' keywords? and isn't thread and memory different?
[23:50:47] <FromDiscord> <JSONBash> i read that passing/moving/copying variable between threads is different now (from thread local heaps)
