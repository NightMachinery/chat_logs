[00:00:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:32:04] <selwyn> how does org mode compare to jupyter for literate programming?
[00:32:16] <selwyn> i always disliked having the baggage of the browser to carry around
[00:45:55] <mfiano> I forgot who helped me with setting up the Compose key in Linux last week, but I am experiencing really crazy results all of a sudden. I need help :(
[00:52:56] <Inline> i don't use a compose key
[00:53:38] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:53:51] * hayley continues selling optimistic stack allocation
[00:54:41] <hayley> "What if you allocate a whole bunch on the stack and have to compute addresses? Then it would be slower." "Than what? We can't do this with static stack allocation at all, so a comparison there is useless."
[00:55:06] <mfiano> I don't either, or at least I don't think I do. This is very weird that it got me to go buy a new keyboard yesterday, but I'm still having a problem.
[00:55:32] <mfiano> I got rid of the Compose key shortly after, as Emacs/Vim input methods suffice.
[00:55:48] <mfiano> But something very strange is going on with X11 that seems Compose-key related
[00:59:03] <mfiano> If I have multiple X windows open, let's say a shell terminal emulator and Emacs, if I switch focus from 1 to the other, the problem exists for the first keystroke. Pressing >> for example emits », but pressing >>>> emits »>>. ?? emits ¿, etc. The first key event for a newly focused window gets "swallowed" expecting some chord.
[00:59:10] <mfiano> Does that make sense to anyone at all?
[00:59:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[01:00:45] <mfiano> It _only_ happens when giving keyboard focus to a window, and only for the first character typed. It is very annoying researching a topic in my web browser and going to write code to implement it.
[01:01:02] <mfiano> It's almost un-usable and I don't even know what I should be looking for.
[01:20:52] <ck_> mfiano: what does xev say about your inputs?
[01:21:36] <mfiano> xev -event keyboard shows this when pressing >> https://gist.github.com/mfiano/3aa5540f9d7d5eb28b100b378714b6ef
[01:21:36] -ixelp- xev.txt · GitHub
[01:22:55] <ck_> are you changing focus by mouseclick or keyboard input?
[01:23:40] <mfiano> I am using a tiling window manager and it happens with either method
[01:24:06] <ck_> that's weird
[01:24:15] <mfiano> I have focus follows mouse, so no click actually
[01:24:53] <ck_> so which key emits code 133? I'm unfamiliar
[01:25:14] <mfiano> It seems automatic.
[01:25:31] <mfiano> I mean if I type >> I get 133 if its the first event for that focus
[01:25:36] <mfiano> If I type ?? I do also
[01:25:40] <mfiano> Maybe Shift then
[01:25:55] <mfiano> Nope
[01:26:07] <mfiano> I get strange characters just typing "ss"
[01:26:41] <ck_> could it be that you configured your compose key to be locking?
[01:26:47] <mfiano> xmodmap -pke|grep Multi_key
[01:26:47] <mfiano> keycode 133 = Multi_key NoSymbol Multi_key
[01:26:51] <mfiano> Hmmm
[01:27:15] <ck_> shot in the dark, but try "xmodmap -e 'remove Lock = Multi_key'"
[01:28:00] <mfiano> No help there
[01:28:28] <ck_> have you tried remapping 133 already?
[01:28:52] <mfiano> No, my xmodmap looks like this:
[01:29:18] <mfiano> cat .config/xorg/xmodmap
[01:29:18] <mfiano>        File: .config/xorg/xmodmap
[01:29:18] <mfiano>    1   clear lock
[01:29:18] <mfiano>    2   keycode 66 = F13
[01:29:27] <mfiano> i just remap capslock
[01:30:39] <ck_> well, something sets 133 to Multi_key and that seems close to the root issue
[01:31:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:32:04] <mfiano> Right. Let me see if my the root shell process is at fault here. Logging out completely, or might as well reboot.
[01:32:12] <mfiano> Be back in a few
[01:32:31] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[01:34:38] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[01:36:49] <mfiano> ck_: It fixed itself heh
[01:36:53] <mfiano> Thanks :)
[01:37:35] <ck_> sure. what's the moral lesson here?
[01:37:49] <ck_> maybe "reboot first, buy keyboard second"
[01:37:57] <mfiano> uptime is vanity
[01:38:17] <ck_> you could've unbound keycode 133 as well, you know
[01:38:47] <mfiano> Well the keyboard I was using had problems anyway
[01:38:51] <mfiano> I needed a new one
[01:39:03] <ck_> I see. what did you buy?
[01:39:07] <mfiano> I was getting a lot of dmesg errors saying my keyboard was faulty :)
[01:39:46] <mfiano> A cheap rubber dome one as this is for remote use on the couch (I have a few computers in my house; my main desk gets a mechboard for sure :))
[01:41:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[01:41:26] <mfiano> My main objective for a new keyboard was wireless, and not bluetooth as that tech is absolute crap, so got a regular RF one. The keyboard I was using had a 20ft usb cable, and it may be the case the keyboard is fine and the cable is bad, but I did try another cable I had and had similar issues.
[01:42:28] <mfiano> My RF trackball mouse works halfway across my house, so I wanted something that wasn't going to drop keys. Sometimes after a long day of coding I like to just chill on the couch and IRC or whatnot
[01:43:04] <mfiano> The new one, albeit a crap rubber dome keyboard, works for that use case.
[01:43:21] <ck_> I see
[01:58:26] *** Quits: Posterdati (~posterdat@host-79-17-4-141.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[02:10:23] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[02:11:26] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[02:12:20] *** Joins: Posterdati (~posterdat@host-79-17-4-141.retail.telecomitalia.it)
[02:40:05] <pjb> Developer's resume with fake buzzwords gets 90% replies, the actual one gets 0% <https://twitter.com/Coding_Career/status/1454293034179317764>
[02:40:05] <pjb> LOL
[02:43:18] <hayley> Sitting on #sicl: 100% hire rate
[02:57:23] *** Quits: X-Scale (~ARM@83.223.251.139) (Ping timeout: 264 seconds)
[02:57:45] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[02:58:55] *** X-Scale` is now known as X-Scale
[03:08:50] * hayley spots that TeX happily justifies inline equations, and it looks like crap.
[03:15:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:20:17] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[03:22:18] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[03:22:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[03:29:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:30:25] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:31:17] * hayley now wonders what PPRINT-LOGICAL-BLOCK is called in LaTeX.
[03:32:05] <hayley> Say, if I have <S, E, C, D> and I break before the D, then D should be indented to line up with the S.
[03:33:33] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[03:39:21] <hayley> Apparently there is none, and you are supposed to add line breaks and indentation yourself.
[03:44:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:56:05] <hayley> Now Firefox believes that overflow-x: auto; means that it should add scroll bars if it overflows vertically.
[03:59:01] <gilberth> Have uou set overflow-y, too?
[03:59:47] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b384:bd52:ad64:846c) (Ping timeout: 264 seconds)
[04:00:03] <hayley> Apparently only overflow-y: clip; causes it to hide the scroll bars.
[04:00:16] * hayley remembers she was supposed to be doing the practise statistics test. Thanks CSS.
[04:01:29] <gilberth> It's called "hidden".
[04:11:21] *** Quits: random-nick (~random-ni@87.116.179.142) (Ping timeout: 245 seconds)
[04:40:33] <hayley> Oh well, I have had lunch, so it is time to do the practise exam.
[04:41:10] * hayley looks and there is no practise exam. Must have imagined it.
[04:47:59] <hayley> Back to arguing about stack allocation then. Oh, and it's not as if the number of cache misses isn't proportional to the objects allocated regardless of allocation strategy, either. Can't win unless you free even earlier.
[04:51:08] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[04:52:51] <hayley> https://m1el.github.io/refterm-hash/ lol
[04:52:51] -ixelp- How (Not) to Design a Hash Function – m1el – Byte Juggling
[04:57:35] <hayley> "This is an important and commendable effort, since the vast majority of software performs tens to thousands of times slower than it can.[citation needed]"
[05:00:36] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[05:01:54] *** Joins: mfiano (user@2600:3c03::f03c:91ff:fe7a:6d7f)
[05:02:06] *** Quits: mfiano (user@2600:3c03::f03c:91ff:fe7a:6d7f) (Read error: Connection reset by peer)
[05:06:19] *** Joins: mfiano (user@2600:3c03::f03c:91ff:fe7a:6d7f)
[05:15:02] *** ec_ is now known as ec
[05:21:17] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[05:23:47] *** Quits: vats (~vats@103.158.91.51) (Ping timeout: 264 seconds)
[05:39:38] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 260 seconds)
[06:22:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:23:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:26:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[06:42:50] <hayley> Apparently people have moved from Roblox to gmod.
[06:50:39] <hayley> ...because Roblox has been down for 2 days somehow.
[07:06:31] <gilberth> Something is not quite right here. Why am I the only one who ever cleans the kitchen up? Do I look like a house-wife?
[07:08:43] * hayley squints
[07:09:23] <gilberth> Squint harder.
[07:11:17] * hayley checks prior quiz results
[07:11:34] <hayley> Student answer: "The minimum number of times she needs to run her algorithm is 44" Expected answer: "The minimum number of times she needs to run her algorithm is 45"
[07:11:42] <hayley> Someone rounded it funny.
[07:13:05] <gilberth> There is no canonical way to round. But can I run an algorithm a fractional number of times?
[07:13:30] <hayley> I assume the minimum must be rounded up.
[07:13:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:14:50] <gilberth> Can the minimum be fractional? And yes, you would round up in this case.
[07:15:18] <gilberth> Milady, PPRINT for HTML, when?
[07:15:23] <hayley> We compute the number of times that a program has to run for some comparison of timing results to be statistically significant.
[07:15:45] <gilberth> Ah ok.
[07:15:55] <hayley> I can't seem to get a PPRINT in LaTeX; I need to wrap a machine transition but one of the tuple elements is too long.
[07:16:11] <hayley> So I get <S, E, C, <newline>D> and the D lines up with the < which is wrong.
[07:17:10] <gilberth> Yes, and you can't do with CSS either. For both LaTeX and HTML you would need to hack that. But the former isn't really supposed to adjust to different width.
[07:17:58] <gilberth> I have the same issue with function signatures in HTML documentation. As I want to wrap so that e.g. keyword arguments line up.
[07:18:13] <hayley> I could pprint using something like &lt;<div style="display: inline-block;">S, E, C, D&gt;</div>
[07:18:26] <gilberth> My defun.sty assumes manual breaks and alignment with a \= and \>.
[07:19:31] <gilberth> hayley: Not quite. Try with say. 'foo bar baz &optional blah blup &key here there dont-know' If you find a solution, tell me.
[07:19:48] <hayley> Er, but then the div goes onto the next line, rather than appearing next to the < and indenting.
[07:20:49] <gilberth> hayley: Yep.
[07:20:54] <hayley> I think I tried something with flex box once.
[07:21:14] <hayley> The "<" is one element, then "S, E, C, D>" is another which takes the rest of the width.
[07:21:16] <gilberth> Well, I tried a couple of times and failed.
[07:21:33] <hayley> But I am SOL because I also need to be portable with LaTeX; in the end, I want the same markup for HTML and TeX.
[07:21:39] <gilberth> hayley: That's what a table could do.
[07:22:06] <hayley> Yes, but then a screen reader or other scraper thinks it's a table, and it is not.
[07:22:31] * hayley writes "display: flex;" and it works instantly. The hell?
[07:23:40] <gilberth> The problem I am having is the two sections &optional and &key and they should either be all in one line, or broken so that the "&optional" is on the same line still as the required parameters, with all the optionals lining up vertically. The "&key" should line up with "&optional". Can't see a way to do that.
[07:24:20] <hayley> Right. I also struggled to get TeX to prioritise one place to break when I had multiple.
[07:25:16] <hayley> But see <http://output.jsbin.com/masevosexo> (yes, that is an automatically generated ID) for a display: flex hack. Though I use KaTeX to draw TeX in the browser, so this is worthless ironically.
[07:25:17] -ixelp- JS Bin
[07:25:42] <gilberth> Yep. I will perhaps when I am bothered enough, write some JS to do it. I am not concerned with LaTeX, because (1) it's static and (2) I don't like it because of that for online reading.
[07:26:43] <hayley> One day I want a dead tree copy of my documentation, so I have TeX output too.
[07:30:32] <hayley> https://www.youtube.com/watch?v=7EGCDg40CDk premieres in like 11 minutes.
[07:30:33] -ixelp- [YTP] Night of the Living JOJ - YouTube
[07:36:38] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[07:37:12] <gilberth> What CSS somehow misses is having priorities for breaks.
[07:37:59] <gilberth> hayley: Well, when there were a proper CSS -> paper typesetter, you could have both.
[07:39:56] * hayley uploaded an image: (214KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/tBOaNxAScchSZODKCBtiwARY/Screenshot_2021-10-31_15-17-08.png >
[07:40:57] <hayley> Currently my TeX output looks like this. The HTML output looks nice, but feels a bit kludgy (because it is).
[07:41:09] <gilberth> Heh.
[07:41:41] <hayley> https://cal-coop.gitlab.io/netfarm/documentation/Netfarm_script_machine.html#%28part._.Control_flow%29 C-f call-method for the same text.
[07:41:42] -ixelp- 5 Netfarm script machine
[07:41:55] <gilberth> However my dream Lisp Listener would reflow PPRINT when resized and have presentations for "..." and "#" to dynamically expand those.
[07:43:45] <gilberth> Hayley: When I make it too narrow, I get horizontal scrollbars :-(
[07:45:05] *** Quits: semz (~none@user/semz) (Ping timeout: 264 seconds)
[07:45:15] <hayley> KaTeX also doesn't seem to care about max-width. So I have to kludge that too :(
[07:45:27] <hayley> Not that making it narrow would be very readable.
[07:53:47] *** Joins: ln43 (~ln43@user/ln43)
[07:54:48] <ln43> Good morning everyone!
[07:56:13] <hayley> Good morning beach!
[07:56:24] <gilberth> hayley: And on my personal war for better typesetting, I suggest P { line-height: 1.2; }
[07:57:07] <hayley> I can't see the difference, what did I set line height to?
[07:57:10] *** Joins: semz (~none@user/semz)
[07:57:35] <hayley> I already have line-height: 1.2 apparently
[07:57:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[07:57:51] <gilberth> hayley: Well, when all the single regions have all their own horizontal scroll bar I find that pretty unusable. Sure, you can't typeset it as narrow as you want, but relying on the overall horizontal scrollbar for the browser pane would be fine.
[07:58:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:58:43] <hayley> Then the text overflows the "paper" in the centre of the screen. If I put scroll bars on that paper, then the rest of the text will overflow.
[07:59:43] <gilberth> hayley: Curious. I see a difference, when I add <style>P { line-height: 1.2; } </style> to HEAD and toggle it on and off in the inspector. It's subtle. But I notices a few lines that had a different line-height as the other in the very same P, but not with the extra rule. Let me see, if I can find that again.
[07:59:46] <ln43> for plots actualy i prefer dots using a variable timestep since this it's for me helpful to visualize the locations where it's requires more time to converge within a given tolerance
[08:00:04] <ln43> ok but only in that case otherwise lines are just fine
[08:02:41] <gilberth> hayley: "We used to preserve [...]" in "10: tail-call", first line. w/o my line-height, the first line is slightly taller.
[08:02:57] <hayley> Right.
[08:03:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[08:04:02] <hayley> Does it bother you that much?
[08:04:18] * hayley still has a maths exam to prepare for...somehow, and a programming assignment.
[08:07:55] <gilberth> hayley: <http://clim.rocks/gilbert/screenshot-netfarm-1.png> and <http://clim.rocks/gilbert/screenshot-netfarm-2.png>
[08:09:01] <gilberth> Notice the little P { line-height: 1.2; } rule. I marked the text to make the glitch more visible.
[08:09:27] <hayley> I see.
[08:09:35] <hayley> It's much more tiny on my end.
[08:10:11] <gilberth> hayley: I had my text zoom adjusted. Hmm.
[08:11:00] * hayley starts to wonder if book.css is now dead code.
[08:11:39] <hayley> Must be, as there's no comment by some GB there.
[08:12:52] <gilberth> Strange. Without text zoom, I get this: <http://clim.rocks/gilbert/screenshot-netfarm-3.png>
[08:13:26] * hayley really wonders where the vertical scrollbars come from now.
[08:14:51] <gilberth> Your pivot is not set right for the left and right overall margins. Main text is too narrow now. When I make the browser window a tad bit narrower, it flips to not so large margins and is fine.
[08:15:14] <hayley> There should be a rule for .CenteredContainer with overflow-x: auto; overflow-y: clip;
[08:15:57] <hayley> brb
[08:16:19] <gilberth> hayley: With scrollbars, you have this general problem: When you add horizontal scrollbars, they eat vertical space too, so you need vertical scrollbars, too. This is quite tricky to handle, when you do want to implement that as part of a GUI toolkit.
[08:20:11] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 264 seconds)
[08:24:41] <ln43> practically speacking i was considering a cooling problem (a sort of quenching) but i should take into account the contribute to latent heat due to the phase change togheter with the sensible heat
[08:26:57] <ln43> now the problem is that does not exists a realiable source of data for the proprieties of the material since it's mostly an alloy and then not a pure substance
[08:27:18] <ln43> and nothing... this is discouraging of course
[08:43:24] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[08:57:14] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[09:05:33] <aeth> I've never hated Facebook more than now because they're going to ruin the word "meta" just like the word "minion" got ruined.
[09:26:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:27:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:38:13] <gilberth> Minion? /me lives on the dark side of the moon.
[09:39:20] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:39:46] <dave0> maw
[09:40:12] <moon-child> gilberth: some movie
[09:41:20] <gilberth> moon-child: Then this is why I don't know it, it's very seldom that I ever watch a movie.
[09:42:26] <moon-child> nor I.  Some television shows are ok, but movies...eh
[09:42:55] <gilberth> I never watch TV. I don't even own one.
[09:44:12] <gilberth> I am TV-free for 28 years now.
[09:44:20] <moon-child> I don't have _a_ tv.  Just sometimes watch tv shows
[09:45:24] <gilberth> My cousin though watches TV^WNetflix all day. He is a professional watcher.
[09:46:02] <moon-child> wow
[09:46:34] <dave0> "couch potato"
[09:47:39] <gilberth> Comes from when all you eat is sausages and chips. The latter are made from potatos, right?
[09:48:04] <dave0> lol yes
[09:50:27] <gilberth> To be fair, he is not doing well. Depression. And it won't go away.
[09:51:10] <moon-child> vicious cycle, kind of
[09:51:35] <gilberth> Of course it is.
[09:53:18] <gilberth> And you can't really help. But then, I suffer from my own issues.
[09:53:48] <gilberth> At least I am kinda productive here.
[09:54:30] <gilberth> I only need to get over my damn release-phobia.
[10:00:50] <hayley> gilberth: Well, idk then. Overflows look bad, scrollbars look bad, and I can't convince KaTeX to wrap apparently.
[10:01:56] <contrapunctus> gilberth: whatcha working on?
[10:02:26] <gilberth> hayley: Sounds like you have no luck then, sorry.
[10:02:58] <hayley> Apparently MathJax does know about line wrapping, so I should check if this rendering package can use that. But it'd also require a small matter of engineering to "port" CSS across.
[10:03:21] <dave0> https://www.abc.net.au/radio/sydney/live/
[10:03:22] -ixelp- ABC Radio Sydney Live Audio - ABC Radio
[10:03:28] <dave0> they're playing abba !
[10:04:12] <gilberth> contrapunctus: I brush up my version of lalr.cl to have a sound API for the bare LALR(1) table construction, and support for operator precedence. The former I need because I want a custom driver for a backtracking parser. Could also be handy for GLR parsers.
[10:05:11] <hayley> Well, I need a custom style, and I am screwed for that, because all the guides assume you are documenting Racket code. Thanks, but I only use languages where the top-level isn't hopeless.
[10:05:20] <gilberth> dave0: Oh no! Did I mention that my cousin has a pretty nifty "sound bar"? And likes to play Abba?
[10:05:24] *** Quits: phantomics (~phantomic@71-218-252-43.hlrn.qwest.net) (Quit: Ex-Chat)
[10:05:34] <dave0> gilberth: nope you didn't mention that haha
[10:05:41] <selwyn> sound bar?
[10:06:19] <moon-child> gilberth: when you wrote 'sound API', I at first thought you were referring to code which would make sounds as it parsed
[10:06:47] <gilberth> selwyn: No idea, what they are called in English. These speakers, which are one wide bar of multiple physical speakers and use some signal processing magic.
[10:07:15] <gilberth> moon-child: I am crazy, but not that crazy.
[10:07:46] <moon-child> :)
[10:07:49] <gilberth> But would be fun. I wonder, if C sounds different from say Rust. :-)
[10:07:50] <selwyn> i thought that as well
[10:08:00] <contrapunctus> gilberth: I...recognize some of those words 😄
[10:08:15] <hayley> C: https://www.youtube.com/watch?v=FTuVB5-19FE
[10:08:16] -ixelp- Crash - YouTube
[10:08:31] <hayley> Rust: https://www.youtube.com/watch?v=p_WMSJLDwRs
[10:08:31] -ixelp- Clampdown (Remastered) - YouTube
[10:08:34] <hayley> They sound different to me.
[10:14:58] <gilberth> selwyn: One of those: <https://www.4kfilme.de/wp-content/uploads/2020/09/Bose-Smart-Soundbar-300-2-1536x864.jpeg> only larger. Perhaps "soundbar" is as an English word as "handy" for mobile phone is.
[10:15:24] <selwyn> reminds me of sandbars
[10:16:02] <gilberth> The sound is really terrific though.
[10:17:51] <selwyn> do you get to play stuff through the soundbar?
[10:18:25] <gilberth> Nope. What shall I play anyway?
[10:18:36] <selwyn> lispcafe fm?
[10:19:01] <gilberth> Heh, indeed. With hayley as DJ!
[10:19:56] <hayley> https://www.youtube.com/watch?v=MRRmU_pOXnk
[10:19:57] -ixelp- David Bowie - DJ (Official Video) - YouTube
[10:22:24] <gilberth> I'll tender the bar then. This is something I might actually enjoy doing. Working hours would fit my sleep pattern better than growing vegetables.
[10:23:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:26:34] <hayley> gilberth: Do you find a textbook question "Most Lisp implementations that compile to C also contain an interpreter that lets them execute Lisp code on the fly as well. Why?" suspect?
[10:27:13] <hayley> It's not like using the C compiler stops them from executing on the fly; have EVAL compile, dlopen the .o file, and call the function.
[10:27:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[10:28:33] <gilberth> hayley: What Lisp implementations that compile to C besides KCL are there?
[10:28:42] <moon-child> there is chicken scheme
[10:28:53] <contrapunctus> Gambit
[10:28:59] <moon-child> cyclone
[10:29:00] <moon-child> hayley: was that question written in a textbook?  (And if so, which one?)
[10:29:10] <hayley> moon-child: Crafting Interpreters, chapter 2
[10:29:47] <gilberth> hayley: And what kind of question is that? How would I possibly know, why the author made that choice?
[10:29:49] <dave0> it's ironic that i started with basic which is interactive, then used c for years, and re-discovered interactive with forth... i forgot how good it is
[10:30:38] <hayley> gilberth: I think the answer is that the C compiler is probably slower than interpreting. But that answer isn't really enlightening to me.
[10:30:42] <gilberth> dave0: I learned Lisp before C.
[10:30:49] <moon-child> gilberth: you don't.  The question for _you_ is: thinking about the design constraints of a language implementation, what reasons might you have for designing in such a fashion
[10:30:55] <moon-child> gilberth: that said I agree with hayley that this is a dumb design
[10:31:06] <dave0> gilberth: didn't going from lisp to c just drive you nuts?
[10:31:37] <hayley> I mean, we assume the compiler is slow and does a lot of rubbish optimisations, there is no way to make the compiler faster. We also have to observe that most forms evaluated at a REPL are pretty dumb, and any significant computation probably occurs in functions called which were defined in some other library...
[10:31:45] <gilberth> Well, even SBCL has a mi nature evaluator for trivial REPL inputs.
[10:33:26] <moon-child> hayley: largely what I take issue with is 'most'.  I can imagine a situation in which it makes sense to have both a compiler and an interpreter--I mean, lots of JIT do that--but it's not clear to me that that is or should be the obvious or default design
[10:33:52] <hayley> Sure.
[10:33:53] <gilberth> And it doesn't need to be slow per se. GCC once would happily compile one function after the other and you could keep it running and talk via a pipe to it. I once did that with some experimental Lisp->C implementation without any interpreter. These days libtcc would be a good choice.
[10:35:19] <gilberth> And then, consider that for CL, you at least need to do "minimal compilation" anyway.
[10:37:23] <hayley> But yes, SBCL also interprets for EVAL from memory. So it's not like this only happens if you target C.
[10:37:59] <gilberth> CMUCL has a third choice: Byte code.
[10:38:22] <hayley> Also an option, yes.
[10:38:44] <hayley> So it's rather a continuum between naive interpretation, bytecode, a fast compiler and an optimizing compiler.
[10:38:57] <gilberth> For space, it is.
[10:39:39] <gilberth> Having like 16MB RAM once was pure luxury.
[10:39:53] <selwyn> is there always a clear cut distinction between interpreter and compiler
[10:40:39] <dave0> gilberth: remember when 2MHz was luxury? ;-)
[10:41:11] <gilberth> dave0: Bah! I never had less than 4MHz. :-p
[10:41:12] <selwyn> remember seeing an advert for ghz in the argos catalogue and thinking 'wow the numbers go up that high'
[10:42:23] <gilberth> Anyhow, I used to run X11 + Emacs + Lisp quite happily with 16MB of RAM.
[10:43:47] <dave0> hayley: some guy on the radio is talking about pirating mp3's ... https://www.abc.net.au/radio/sydney/live/
[10:43:48] -ixelp- ABC Radio Sydney Live Audio - ABC Radio
[10:44:08] <dave0> napster, riaa, apple ipods etc.
[10:44:43] <selwyn> don't you get the death penalty in australia for that
[10:45:00] <selwyn> ipods lol
[10:45:10] <dave0> we abolished that in the 70's ... probably just life without parole :-p
[10:50:32] <dave0> Much to the surprise of many who, logically, would assume that shortening someone's life should be cheaper than paying for it until natural expiration, it turns out that it is actually cheaper to imprison someone for life than to execute them. In fact, it is almost 10 times cheaper!
[10:51:34] <dave0> don't kill people.. not because it's the right thing to do.. because it's cheaper haha
[10:52:18] <selwyn> non zero chance that they will bring back the death penalty here
[10:54:02] <dave0> selwyn: which country?
[10:54:06] <selwyn> uk
[10:56:55] <selwyn> it is a very natural escalation as part of the culture war
[11:09:03] <pl> Brexshitter voices were definitely for it 
[11:11:09] <hayley> Who wants to pay for interpretation.sucks?
[11:11:25] <hayley> We can then have regex.interpretation.sucks for gilberth's clex2.
[11:12:14] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[11:12:25] <selwyn> pl: one of the main brexit guys wanted to run a referendum on bringing back the death penalty
[11:12:41] <gilberth> hayley: Hey, my clex2 is fine.
[11:12:54] <hayley> It seems interpretation.sucks is $199. Who's up for the worlds worst advertising campaign?
[11:13:02] <hayley> gilberth: Regex _interpretation_, not compilation.
[11:13:57] <hayley> Very much not a clex2 thing.
[11:14:09] <selwyn> easiest battle in politics: simply run on a campaign of hanging pedophiles and get 60%
[11:14:29] * hayley starts gofundme
[11:15:20] <selwyn> i think current leadership would probably prefer not to do it because it would stir up a hornets nest
[11:15:30] <selwyn> but if the true believers get the upper hand, then idk
[11:16:35] <hayley> Hm, it's on sale for $199, then $276 the subsequent years.
[11:17:13] <hayley> "General availability is set to launch on June 1, 2015 with registration costs that may be as low as $10." Can't find any.
[11:17:21] <gilberth> First: Pedophile /= child abuse, second: child abuse is particular common within the church.
[11:18:26] <gilberth> Third: more CCTV won't stop child abuse. Fourth: "Think of the children!"
[11:18:29] <hayley> Maybe of the 2,500 TLDs there is a cheaper insult.
[11:19:04] <gilberth> hayley: Don't you have an OS to hack rather?
[11:19:15] <hayley> Not yet.
[11:20:50] <hayley> There is .wtf but you can't make a sentence out of that.
[11:22:38] <gilberth> Or rather tell me how I shall call my lalr.cl then? I cannot really call it lalr2.cl.
[11:23:19] <hayley> .gripe too
[11:24:00] <gilberth> The package nickname "LALR" is taken, Closure HTML uses that for that very same lalr.cl.
[11:24:14] <hayley> lalr2 it is.
[11:24:18] <hayley> one-more-lalr-nightmare
[11:24:39] <gilberth> Well, it still is LALR(1) not LALR(2).
[11:24:56] <gilberth> hayley: The brand "nightmare" is yours.
[11:24:56] <hayley> yacc-is-undead
[11:25:12] <gilberth> yacc-lives
[11:25:15] <hayley> ™
[11:25:24] <hayley> yacc-lugosi's-dead
[11:26:10] <gilberth> Who is Lugosi?
[11:26:38] <hayley> https://www.youtube.com/watch?v=Fqy-fCf6Ymg
[11:26:39] -ixelp- Bela Lugosi's Dead (Official Version) - YouTube
[11:29:15] <hayley> He played Dracula in a 1931 film of the same name.
[11:35:27] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:30] * hayley notes that (a|aa)* only does the even/odd thing in CL-PPCRE if you write it as (aa|a)*. Hasn't tested the Rust code still.
[11:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:36] <hayley> Yes, ditto for Rust. Not that they specify how to match a RE, of course.
[11:41:09] <hayley> gilberth: Can I at least keep «» for submatches and () for changing precedence with POSIX ERE syntax? Please?
[11:43:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[11:46:47] * hayley wonders what to do with 1.7GB/s of matching (a|aa)* now.
[11:47:12] <hayley> 1.7Gchar/s rather - more like 6.8GB/s since SBCL uses wide chars after all.
[11:47:28] <gilberth> hayley: That won't be POSIX syntax, sorry.
[11:47:36] <hayley> Damn.
[11:47:59] <hayley> Maybe I ask POSIX to change it? People have compose keys, right?
[11:48:02] <hayley> /s
[11:49:03] <gilberth> For just changing precedence there is (?: )
[11:49:22] <hayley> Yeah, but now you have this Elvis ?: guy in your RE.
[11:49:44] <gilberth> Elvis? Does he live, too?
[11:50:02] <hayley> That Elvis? Probably not.
[11:52:49] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[11:53:03] <hayley> Sadly, making a sarcastic joke about performance never goes well. When I made the poster with the "blazing fast concurrent hash map for Rust" clearly being terribly slow, people thought I made a CHT in Rust.
[11:53:30] <hayley> (The poster, to jog your memory: https://i.redd.it/ivjfmtsg9on61.jpg)
[11:54:52] <moon-child> hayley: at least you can say of the rust hashmap: it seems to scale linearly with core count!
[11:55:17] <hayley> Yeah, linear like y = 0x + c
[11:55:19] <gilberth> "If you're looking for an image, it was probably deleted." It says.
[11:55:35] <hayley> No paren at the end of the URL.
[11:56:18] <gilberth> Hmm, this is why I still prefer <...> Use to be <URL:...> even.
[11:58:52] <hayley> error[E0308]: mismatched types ... expected `&str`, found struct `String`
[11:58:56] <hayley> I done it, I made the string meme
[11:59:29] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[12:00:27] <hayley> Oh, I wanted throughput for this graph, and it still reports time taken. Oops.
[12:01:04] <hayley> gilberth: Apparently the Rust engine takes 168.24ms to match (aa|a)* over (make-string 100000 :initial-element #\a)
[12:03:55] <hayley> A glorious 5Mchar/s, while o-m-r-n still puts out 1.7Gchar/s.
[12:04:37] <hayley> gilberth: Have I ever told you how great your DFAs are?
[12:04:47] <gilberth> 5 sure is faster than 1.7.
[12:05:33] <gilberth> hayley: Actually: No. All you did was complaining how hard it is to get it quite right.
[12:05:52] <hayley> lol
[12:06:58] <gilberth> Anyhow, milady, what feature of Markdown do you hate most?
[12:07:25] <hayley> Dammit, cl-ppcre blows stack for 10,000 characters.
[12:07:38] <gilberth> lol
[12:07:57] <hayley> You can't handle untrusted Markdown input unless you are very picky with libraries (AIUI the Common Lisp libraries for Markdown do not let you disable HTML syntax).
[12:08:07] <hayley> The whole thing is a barely specified mess, too.
[12:08:34] <hayley> But: apparently CL-PPCRE was faster than Rust. The more you know.
[12:08:48] <gilberth> Well, what's bad about letting HTML through?
[12:09:16] <hayley> You don't want someone helping you write <script>s for your website.
[12:09:34] <hayley> I know, it sounds crazy to not get help, but the university told me about "cyber security".
[12:09:58] <gilberth> Then I would just disable that. And I am the sole author. I trust myself.
[12:11:39] <gilberth> And when you implement it properly, that is with an internal representation of HTML, nothing could slip through, if you don't want it.
[12:12:06] * hayley uploaded an image: (13KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/NMXYAbbwCbuzzVnrwiikmBhG/re-graph.svg >
[12:12:09] <hayley> Okay, here is the funny performance graph.
[12:13:41] <gilberth> Is that gnuplot? And why is Rust becoming slower over time?
[12:14:06] <hayley> Yes. I think Rust uses a DFA cache, and I guess I blew it out? idk, could also be cache and the NFA interpreter too.
[12:14:50] <gilberth> Won't we almost max out memory bandwidth?
[12:15:40] <hayley> Eventually, but that's usually at least 20GB/s from memory.
[12:16:05] <hayley> This is CPU-bound, as it's all branching and no SIMD yet (not that it would help too much here).
[12:16:06] <gilberth> Which is only 5Gchars/s.
[12:16:27] <hayley> Yeah, well, this is only like 1.7Gchar/s tops.
[12:17:00] <gilberth> Has memory really such a high bandwidth?
[12:17:16] <hayley> Yes.
[12:17:40] <moon-child> new memory is in the low 10s of gb/s
[12:18:11] <moon-child> gpu memory is 100s of gb/s to 1s of tb/s
[12:18:39] <hayley> Hm, I misremembered then. But IIRC a memcpy was like 15GB/s-ish on my machine, and memcpy throughput is half that of memory bandwidth, due to reading and writing?
[12:19:02] <hayley> And the memory copied would not fit in cache, no.
[12:21:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ba51:b2dc:656:c660)
[12:23:24] <moon-child> 'memcpy throughput is half that of memory bandwidth' hm, my understanding is that is a limitation of CPU (not bus or sticks), so you can get around that by making a memcpy that uses multiple cores
[12:23:34] <moon-child> 15 and 30 are low 10s though
[12:24:11] <hayley> I think heisig told me that if you throw enough vector instructions at it...
[12:24:43] <pl> Intel CPUs from 2012 did 25.6 GB/s
[12:24:58] <pl> (desktop/laptoo stuff) 
[12:25:44] <moon-child> pl: yeah, memory b/w is p stagnant; little motivation to improve it significantly
[12:26:29] <pl> moon-child: memory was one of the areas intel heavily segmented its offerings 
[12:26:47] <hayley> "So one of the things Azul had was the magical property of having a fuckton of bandwidth." - Cliff Click
[12:27:21] <hayley> (Now, FWIW, this guy swears like a sailor in coffee compiler clubs.)
[12:27:45] <moon-child> I have been meaning to get into those.  But too much stuff...
[12:27:59] <hayley> I would if it wasn't at fucking 3am here.
[12:28:19] <moon-child> hayley: certain applications can saturate memory (or get close), but most can't
[12:33:30] * pl notes that network cards go to ~43 gb/'s these days 
[12:34:17] <moon-child> huh thought they cap out at 100gbps
[12:34:38] <moon-child> (except for e.g. isp kind of stuff)
[13:01:11] <White_Flame> moon-child: memcpy being half of bandwidth is just because it's read+write
[13:01:20] <White_Flame> not just streaming read or streaming write
[13:02:43] * hayley now gets caught trying to use a u64 where a usize was wanted, because she never specified a type for the iteration sizes. Good job!
[13:03:05] * hayley tries the suggested .try_into().unwrap() dance
[13:03:07] <hayley> "can't call method `try_into` on ambiguous numeric type `{integer}`"
[13:04:17] <hayley> Oh, for fuck's sake, the constructor for a vector wants a u64, and the benchmark harness wants a usize. Make your fucking minds up.
[13:04:58] <hayley> At this rate, I would rather continue using M-x calc to make throughput numbers.
[13:15:12] <gilberth> M-x calc? Not just the REPL?
[13:15:47] <hayley> I guess I had Lisp open, but cl-ppcre likes to violently blow the stack still.
[13:16:04] <hayley> Also guess I should now test the libc RE engine.
[13:16:48] <gilberth> Pro tip I: Get a Lisp that survives a blown stack. Pro tip II: You could spawn another Lisp process.
[13:17:53] <hayley> 1. SBCL usually does, but it didn't last time, for some reason. 2. I guess so.
[13:31:23] <hayley> regcomp(&regex, "(a|aa)*", 0) || (abort(), 0); // Look ma, error handling
[13:31:54] <hayley> The , 0 shuts up gcc about void values, of course.
[13:33:28] <gilberth> This is almost clever!
[13:33:47] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:33:53] <moon-child> || and && are the standard conditionals in shell
[13:34:04] <hayley> "doing 10000 iterations of 10 bytes: 10 bytes in 597 microseconds, i.e. 0d char/s" Surely I divided something funny.
[13:34:29] * hayley still trying to remember printf syntax too.
[13:34:43] <gilberth> o_O
[13:35:30] <gilberth> It certainly is easier than CL:FORMAT.
[13:35:31] <hayley> Indeed.
[13:35:41] * hayley forgot REG_STARTEND too.
[13:39:01] <gilberth> What do you need that for?
[13:40:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:40:06] <hayley> Because I have a big buffer full of 'a', and I want to search 100 bytes, then 300, then 1000, then 3000, etc.
[13:40:26] <gilberth> ok
[13:43:01] * gilberth is waiting for results.
[13:43:41] <hayley> Apparently libc is about as fast as one-more-re-nightmare, though I want to check the results since I've never used this engine before.
[13:47:52] <hayley> No match‽
[13:48:24] <hayley> Oh, I need to use the REG_EXTENDED flag for ERE.
[13:48:42] <hayley> Now everything works.
[13:50:17] <hayley> Now I only get 4.6MB/s or so?
[13:52:43] <hayley> gilberth: Anything obviously wrong with https://pastebin.com/4fHemMp3?
[13:52:44] -ixelp- #include <regex.h>#include <stdlib.h>#include <stdio.h>#include <string.h> - Pastebin.com
[13:54:14] *** Joins: notzmv (~zmv@user/notzmv)
[13:54:18] * hayley re-reads smoke test results, and it got the submatches wrong?
[13:54:48] <hayley> For 19 'a's we should have a submatch in [18,19) and for 20, a submatch in [18,20)?
[13:55:14] <hayley> But if I write (aa|a)* it works?
[14:01:53] <gilberth> Hmm.
[14:04:02] <hayley> Still, you'd say that glibc is broken, and (a|aa)* should match [18,20) for 20 'a's?
[14:04:52] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:04:56] <gilberth> You should get (18,20) for both.
[14:05:21] <gilberth> I do with macOS's libc. Let me check glibc on the linux box.
[14:06:09] * hayley uploaded an image: (62KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wwktCqVpdiZGbnChiaUGQXmr/re-graph.png >
[14:06:11] <hayley> Here is the funny performance graph (again).
[14:06:15] <gilberth> Indeed. glib is broken.
[14:06:23] <hayley> Hooray!
[14:06:37] <SAL9000> Isn't it one of those undefined behaviour things?
[14:06:47] <SAL9000> "longest match" v.s. "latest/earliest match"
[14:07:05] <gilberth> That is no surprise at all. I found no other RE library that would pass the test suite I found.
[14:07:33] <SAL9000> One could define a test suite that avoids said undefined behaviour, but I guess then it wouldn't be a good "torture" test suite.
[14:07:33] <gilberth> SAL9000: That is very well defined.
[14:08:02] <gilberth> It's not undefined. POSIX defines it nicely.
[14:08:02] <SAL9000> OK, "differs between RE implementations/engines" then?
[14:08:38] <gilberth> What would a test suite do, which only tests what implementations agree upon? Useless.
[14:09:08] <SAL9000> it's useful for comparing implementations? at least in terms of performance
[14:09:12] <hayley> Still, any thoughts on glibc being dog slow?
[14:09:24] <hayley> Well, glibc is both wrong and slow.
[14:10:17] <SAL9000> my guess would be a combination of old (less-maintained?) code & complexity due to the various modes (extended, PCRE?, etc.)
[14:11:07] <gilberth> SAL9000: Well, what good is a library that performs well on just anything it pleases?
[14:11:40] <SAL9000> If I was doing such a comparison test, I'd want to run both compatible and incompatible tests.
[14:12:00] <gilberth> SAL9000: Extended versus basic is just a syntax issue, not a semantics issue. And PCRE has no spec, but is just a vanilla implementation, which has nothing to do with POSIX.
[14:12:28] <SAL9000> I thought PCRE spec is basically "whatever Perl 5 does"?
[14:12:44] <gilberth> SAL9000: When I want POSIX REs, I want POSIX REs and not Acme REs.
[14:12:49] <SAL9000> (modulo the crazier bits involving embedded Perl code)
[14:13:04] <gilberth> SAL9000: Exactly. It doesn't even try to be POSIX. Never did.
[14:13:22] <SAL9000> Yes. I don't always care about the precise dialect -- e.g. if I'm writing a green-field parser.
[14:13:40] <SAL9000> "What's the fastest regex engine for this task, of any dialect which has X and Y features?"
[14:13:50] <gilberth> PCRE is a different language altogether. Not a dialect IMHO.
[14:14:02] <SAL9000> \o/
[14:14:51] <hayley> Two people said it'd be okay to change () to «» for submatches.
[14:14:59] <hayley> Good enough for me!
[14:15:12] <SAL9000> :P
[14:16:00] <gilberth> hayley: Don't.
[14:16:07] <hayley> gilberth: I'm kidding.
[14:16:29] <gilberth> Milady, I am not always sure whether you do or not.
[14:19:57] <gilberth> hayley: However, I get 6.6MB/s on the fast machine (Linux), 6.15MB on the slow (macOS i5), and 10.7MB on the laptop (macOS i7).
[14:20:21] <gilberth> That is pretty poor. What did I wrong?
[14:20:39] <hayley> Yeah, I dunno either.
[14:20:49] <SAL9000> hayley: given https://rust-leipzig.github.io/regex/2017/03/28/comparison-of-regex-engines/ might be interesting to compare to hyperscan?
[14:20:50] -ixelp- A comparison of regex engines – Rust Leipzig
[14:21:20] <hayley> Yes. Though I read some sample code to interface with PCRE, and nearly fainted. Hopefully Hyperscan is better.
[14:21:37] <SAL9000> one option would be s/PCRE/Perl/ :-)
[14:21:58] <hayley> .oO(Could just use some Rust library for Hyperscan, now that you installed the compiler, no?)
[14:22:14] <SAL9000> https://github.com/flier/rust-hyperscan
[14:22:14] -ixelp- GitHub - flier/rust-hyperscan: Hyperscan bindings for Rust with Multiple Pattern and Streaming Scan
[14:22:29] <hayley> Right.
[14:22:46] <SAL9000> My experience with Rust is, like, one week so ... \o/
[14:23:18] <hayley> My experience consists of String and &str, and one function wanting usize and another u64.
[14:23:39] <gilberth> re2 is broken, too.
[14:24:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:25:21] <gilberth> hayley: Didn't you say that libc was fast for you?
[14:25:35] * hayley is called childish for using the word "silly".
[14:25:46] <hayley> No, it was around 5MB/s slow.
[14:26:44] <gilberth> Oh. I feel relief, so my bench agrees.
[14:28:00] <hayley> According to the Rust benchmark harness, everything got slower. /me is now trying to add more data points.
[14:28:23] <hayley> Swear I didn't touch anything.
[14:29:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[14:30:58] <hayley> SAL9000: Though, Hyperscan doesn't do submatches, so it won't work ):
[14:31:22] <SAL9000> Ah, didn't notice that
[14:34:54] <hayley> "We can't do this with sized stack allocation at all, so a comparison to sized stack allocation is silly." "...[noise]... And please avoid epithets, that's childish."
[14:34:59] <hayley> Who's the child here?
[14:35:10] <gilberth> libtre: 18.5MB/s on the fast machine. And correct results.
[14:35:34] <hayley> What the fuck, this guy moderates r/rust? lmao
[14:36:17] <hayley> https://www.reddit.com/r/ProgrammingLanguages/comments/qilbxf/whats_so_bad_about_dynamic_stack_allocation/hir0q9t/?context=3
[14:36:19] -ixelp- What's so bad about dynamic stack allocation? : ProgrammingLanguages
[14:37:51] <hayley> I say silly, beach says silly, drmeister says silly, gilberth says silly, you can't really be tone policing that.
[14:47:08] <pjb> ixelp: the problem is with interrupt handling. But since modern processors can have a designated stack for interrupt handling, we could indeed have heap-allocated stacks.
[14:47:32] <pjb> hayley: ^
[14:47:41] <pjb> bots could have a bot prefix…
[14:55:56] <hayley> https://www.youtube.com/watch?v=Ryc8gGfnL5M
[14:55:57] -ixelp- Pirates - YouTube
[15:00:35] <gilberth> Where is the wide char variant of regex(3)?
[15:06:18] * hayley searches and only gets C++ results.
[15:07:17] <hayley> Still, if you want to allocate on the C stack, surely just have another register (e.g. RAX) pointing to the end of your static variables, and use RSP as the allocation pointer. Shouldn't matter if you do [RSP - n] or [RAX - n], no?
[15:08:30] <hayley> They got away with alloca for a while, too.
[15:08:32] <gilberth> I don't get it. Just stash the pointer as any other you would get.
[15:09:26] <gilberth> To the compiler it shouldn't matter where the pointer comes from.
[15:10:26] <semz> I guess it increases register pressure a little?
[15:11:08] <gilberth> The guy is talking about a tight loop initializing that array. So?
[15:11:11] <hayley> Woo, 1 more register. I don't think it matters, as you first have to use all the registers...
[15:11:41] * semz cries in x86
[15:11:54] <gilberth> No matter how you do that, the compiler should do the right thing(tm).
[15:12:22] <hayley> The problem is in accessing static stack variables. If our RSP moves, then [RSP + fixed N] isn't going to work. Hence why I want to use RAX as the new end of static frames, so [RAX + fixed N] works.
[15:13:09] <hayley> Or you could still use another stack for dynamic allocations, which is also fine.
[15:13:10] <gilberth> Where is the f***ing difference, whether you say { int *p = %esp + n; ... } or { int *p = acme_alloc (...); ... } once you are in a loop stashing stuff at p[i]?
[15:13:46] <hayley> True. But don't say f***ing, that's childish.
[15:13:49] <gilberth> hayley: Compiling with a frame pointer is still the default. Though I always pass -fomit-frame-pointer
[15:16:44] <gilberth> And thing will get interesting anyway when you have multiple stack allocations of different sizes.
[15:16:57] <hayley> https://www.youtube.com/watch?v=ns-fw7a16Gw
[15:16:58] -ixelp- jean-jacques burnel - Freddie Laker - YouTube
[15:16:59] <gilberth> s/different/dynamic/
[15:25:00] <hayley> But, if you are going to use optimistic stack allocation, I'd bet you still win from stack allocation, even with the minor increase in register pressure.
[15:33:07] <hayley> pjb: Hence why RSP has to be the allocation pointer, and RAX the other-end-of-frame pointer, not the other way around.
[15:33:58] <hayley> But it is still news to crabs that, as Baker said, stack allocation is an implementation concern, not a language concern.
[15:34:38] * hayley uploaded an image: (118KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/gfXDwteNdhausEOFAgvykZxY/stack-allocation.jpg >
[15:34:54] <hayley> (Crabs are too horizontal to put in this meme, sadly.)
[15:35:11] <gilberth> hayley: Which places have I missed to check for error? <https://termbin.com/mks1>
[15:35:49] <hayley> Hey, you're the C expert.
[15:36:00] <gilberth> lol
[15:36:34] <gilberth> Could abort() fail? What to do then?
[15:37:35] <hayley> Now, add something like #define unwrap() || (abort(), 0) and you can pretend to write Rust for some reason (:
[15:37:38] <gilberth> Go into an infinite loop to grind to a halt.
[15:37:58] <gilberth> haylay: unwrap?
[15:37:59] <hayley> Load some random address, hoping you segfault.
[15:38:19] <hayley> .unwrap() is the magic method that makes things crash.
[15:38:56] <gilberth> for (;;) *(int*)rand()=rand();?
[15:38:59] <hayley> In Haskell we may say unwrap (Just a) = a; unwrap (Nothing) = error "Foo!"
[15:39:02] <hayley> Sure.
[15:39:20] <gilberth> I'd rather divide by zero.
[15:39:33] <hayley> So, not quite there, but printf("blah") unwrap();
[15:40:00] <hayley> Still, no change in performance?
[15:40:07] <gilberth> Or try to commit suicide: kill (9, getpid());
[15:40:20] <gilberth> hayley: Nope, which should it.
[15:40:38] <gilberth> And printf returns the number of characters written.
[15:40:45] <gilberth> * why
[15:40:52] <hayley> Just wondering.
[15:41:23] <gilberth> Well,  (a|aa|aaa|aaaa)* is a bit slower, but not much.
[15:41:43] * hayley now worries that replying with "lmao" to someone who doesn't like the word "silly" will provoke a bad reaction, even though that was the plan.
[15:42:43] <hayley> If beach says silly, so can anyone.
[15:43:44] <gilberth> "a*" is at 275MB/s.
[15:44:27] * hayley thinks
[15:44:31] <gilberth> Not particular impressive.
[15:44:34] <hayley> 9 + 10 = 21₉
[15:44:46] <hayley> The kid was right all along!
[15:45:02] <gilberth> What are you talking about?
[15:45:39] <hayley> A video where someone asks a kid, "What's 9 plus 10?" "21" "You stupid!"
[15:46:29] <gilberth> Well, did the kid answer "twenty-one" or "two one"?
[15:47:03] <hayley> https://knowyourmeme.com/memes/9-10-21
[15:47:04] -ixelp- 9 + 10 = 21 | Know Your Meme
[15:47:09] <hayley> Oh, the former ):
[15:48:47] <gilberth> Are you bored?
[15:48:57] <hayley> Somewhat.
[15:49:07] <gilberth> I noticed.
[15:49:19] <hayley> Guess I should implement $ and ^ in my engine eventually.
[15:49:49] <gilberth> When done, tell me how you did that.
[15:51:06] <hayley> Great start.
[15:51:55] <hayley> IIRC $ is the start, I could implement that by first scanning from the first character, then after every newline. ^ (which iirc is end?) is harder still.
[15:52:05] <gilberth> I have a few ideas for general "followed by" and "preceded by" patterns. Perl calls this lookahead and lookbehind.
[15:52:28] <hayley> Sure, but I can't see how to make a pattern for either.
[15:52:39] <gilberth> $ is more easier.
[15:52:59] <gilberth> lol. "more easier" make up your mind, gilberth.
[15:53:56] <hayley> Hey, saying lol also sounds childish.
[15:54:22] <gilberth> hayley: Ok. I'll watch my language, milady.
[15:54:26] <hayley> Ah, ^ is the start and $ is end.
[15:54:32] <hayley> lol
[15:54:39] * hayley can say that, she is only 20
[15:54:55] <gilberth> Yep. Or rather "^" is the beginning or preceded by a newline.
[15:55:57] <gilberth> hayley: You believe I am too old for that? And by the way a lady should watch her language, too.
[15:56:09] <gilberth> There also is \< and \>
[15:56:30] <hayley> Not really. Just that guy who probably didn't write a register allocator still thinks saying "silly" is childish.
[15:56:54] <hayley> I don't think anyone has ever said that to me before. Literally no one cares.
[15:57:08] <gilberth> Aha. Good to know. What would be appropriate term to use instead?
[15:57:38] <hayley> I would have said "absurd", but it came off too harsh in my head.
[15:58:42] <hayley> But if ^ is easier to implement out of the DFA, and $ is easier in, then that's how I'd do it.
[15:59:47] <gilberth> "I am afraid this shows that somewhere a village is missing its challenged."?
[15:59:55] <hayley> "The idiot bastard son", as Zappa would put it.
[16:00:54] <gilberth> Or just "not of extraordinary brightness"?
[16:01:40] *** Joins: treflip (~user@95.79.32.99)
[16:01:41] <hayley> I'm not saying anyone is of any intelligence, just that one comparison didn't make any sense.
[16:02:08] <hayley> "Don't tell me that static sizing is faster, when it's also unusable for many functions."
[16:02:51] <gilberth> hayley: For lookbehind that is ^ and \< you'd run a concurrent recognizer and do a boolean AND essentially in a term, which is only nullable when both are.
[16:04:36] <gilberth> For $ and \> you'd kinda 'spawn' a new one. I almost have that, but it's pretty hairy. .oO(May I use "hairy"?)
[16:04:50] <hayley> https://www.youtube.com/watch?v=z_oVRJ088BE
[16:04:51] -ixelp- The Messerschmitt Twins (Remastered 2003) - YouTube
[16:08:00] <gilberth> The general trouble is that those contexts don't consume any input.
[16:10:23] <hayley> I'd just settle for ^ and $ admittedly.
[16:10:45] <gilberth> For just $ and ^ you could try to color your input. Add blue paint to every character preceded by \n and red to any followed by \n. Colour your RE accordingly. I was not successful with that for reasons I forgot.
[16:11:09] <hayley> Your CL is colour blind?
[16:12:00] <gilberth> Colour blindness usually means that you cannot tell green from red. So blue and red is fine. :-p
[16:12:32] <gilberth> Oops. .oO(I am not supposed to use :-p either, I guess.)
[16:12:44] <hayley> ^ is easy to do with my prefix hack framework, but $ requires more effort.
[16:13:03] <mfiano> Morning. I just did some nice bit of hackery. Emacs continues to amaze me.
[16:13:32] <hayley> For some regex ^A, we first search for A from the first byte, then subsequent resets cause us to seek for a newline then search for A again.
[16:13:52] <hayley> Is that the good or bad kind of amazing?
[16:13:57] <mfiano> good
[16:14:25] <gilberth> hayley: What about (^a)*?
[16:14:31] *** Quits: treflip (~user@95.79.32.99) (Quit: ERC (IRC client for Emacs 27.2))
[16:14:38] <gilberth> Without the "?" of course.
[16:15:53] <hayley> Expand to get ^a(\na)*?
[16:16:01] <hayley> Not a big fan of that, but it came to mind first.
[16:16:34] <gilberth> Which is not the same. "^" doesn't consume anything and thus my RE doesn't really make sense.
[16:17:25] <hayley> Dammit.
[16:17:46] <mfiano> 1) I ssh'd into my remote dedicated server with "ssh -X -Y server". 2) I started a tmux session with 2 windows. 3) In the first, I ran "emacs -nw", in the second I ran "emacsclient -c".
[16:17:46] <mfiano> Because of the ssh command with X forwarding, the emacsclient command created a GUI frame from the CLI emacs process to be displayed locally. Now I'm looking at a huge #lispcafe backlog with inline image rendering from all of hayley's memes and RE graph.
[16:18:45] <pjb> mfiano: so it works! Great!
[16:19:30] <mfiano> The cool thing is X doesn't need to be running on the server.
[16:19:39] <mfiano> and yes, pjb helped a great deal set this up
[16:19:57] <mfiano> I just wish I could connect the remote emacs server with my locally running emacs process
[16:20:05] <mfiano> So ERC tracking would work
[16:20:35] <hayley> If ^ doesn't consume, then the RE is rather ^a*?
[16:20:48] <gilberth> hayley: (^)* ^$ $^ a(^|())b or just (^foo.*)* # When you make '.' match \n
[16:21:03] <hayley> Foo!
[16:21:09] <gilberth> What?
[16:21:25] <hayley> There is line noise over HTTPS over a mobile internet link somehow.
[16:21:43] <gilberth> Not on my end, sorry.
[16:22:43] *** Parts: amazigh (~amirouche@user/amirouche) (WeeChat 2.8)
[16:26:15] <hayley> Though, currently, my only universal set does match newlines, because otherwise it wouldn't be much of a universal set.
[16:28:21] <hayley> Lines are for nerds anyway.
[16:30:02] <gilberth> And regular expressions are for normies?
[16:30:37] <hayley> I don't remember why I made a fast regular expression engine.
[16:30:53] <gilberth> Alzheimer?
[16:31:02] <hayley> Probably to practise outside of automata class.
[16:32:07] <gilberth> Good practice, I'd say. I hope you learned something.
[16:32:18] <hayley> And also just to have one for bragging rights, iirc. Got the idea from a meme.
[16:33:06] <gilberth> Your life is governed by memes?
[16:33:43] <hayley> https://i.redd.it/z7lzvqfm0ta31.jpg Pictured: how to talk to RE interpreter writers
[16:34:10] <gilberth> That bad?
[16:34:44] <hayley> Usually, no. But good ideas tend to come from jokes, because you can excuse if they violate your false assumptions.
[16:34:54] <gilberth> I don't spot a lady. Who is you on that picture?
[16:35:07] <mfiano> Was expecting a crab image in ERC
[16:35:52] * hayley uploaded an image: (120KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/mOAqbwJgvWVWsPNKjueDOqIp/i-told-you-about-locks.jpeg >
[16:36:30] <gilberth> hayley: Were is the RE "meme" depicting me?
[16:37:07] * hayley uploaded an image: (222KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/HbkwtYsCfKFVlFEXgapIeGBE/power.jpeg >
[16:37:48] <gilberth> Heh. The beard still doesn't suit me. ;)
[16:38:51] <mfiano> I know crabs are contagious, but you should get that meme looked at.
[16:39:31] <gilberth> I am fully vaccinated.
[16:39:41] <hayley> @mfiano It is making fun of the Rust RE engine running a NFA for submatching only.
[16:40:39] <hayley> The text is from the performance guide.
[16:41:03] <mfiano> No offense but inline images are getting turned off. This is turning into Discord :)
[16:41:18] <hayley> https://www.youtube.com/watch?v=8TEAMHgrxi0
[16:41:19] -ixelp- JJ Burnel - Crabs - YouTube
[16:46:16] *** Quits: mfiano (user@2600:3c03::f03c:91ff:fe7a:6d7f) (Remote host closed the connection)
[16:47:13] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[16:58:32] *** Joins: domovod (~domovod@176.196.122.197)
[17:14:02] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 260 seconds)
[17:14:27] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[17:34:53] <contrapunctus> mfiano: but...why not? O.o
[17:35:55] <contrapunctus> (apart from the inherent privacy issue of opening random links automatically...)
[17:53:37] <mfiano> I am old. I like textual protocol implementations to be rendered as such.
[18:25:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:27:56] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[18:38:01] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[18:40:05] *** Joins: domovod (~domovod@176.196.122.197)
[18:47:22] <gilberth> Why the hell must SBCL hide ,x in an instance? This really breaks things.
[18:47:55] <gilberth> s/the hell//   # hayley said I should watch my language
[18:50:49] <gilberth> CMUCL isn't doing this. So this must be some glorious new feature.
[18:53:12] <contrapunctus> gilberth: that's really childish. Also, Bash comment syntax in #lispcafe ? 😏️
[18:54:05] <gilberth> I used damn^Wnice sed syntax, so it seemed appropriate.
[18:55:29] <gilberth> Neither CMUCL, CCL, CLISP, ECL, ACL, nor ABCL do this.
[18:59:44] <gilberth> I face a little name space problem here. In both CLEX2 and my LALR stuff, I want $<n> refer to the nth subexpression. But I want that both systems could be used alone. There is a third system called DE.BAUHH.PARSE which combines both, so that you could write both your parser and the scanner in one form. In theory the latter also could be used alone. Who is it then who own $<n>? There can only be one.
[19:01:03] <gilberth> I thought I could be gross like LOOP and just go by the symbol name alone. Does work with SBCL because I cannot discover the uses of $<n> because they may hide in that instance.
[19:12:31] <gilberth> The most dirty thing would be to just intern $<n> in *PACKAGE* like DEFSTRUCT. I should know better and should make the user to explicitly name those symbols, but I wanted to offer a brief syntax. Now you could say (expr -> expr "+" expr => `(+ ,$1 ,$3)) as a parser rule. I believe it is ZEBU, which makes you name things like (expr -> expr.1 "+" expr.2 => `(+ ,expr.1 ,expr.2)), which is something I don't like either.
[19:12:56] <gilberth> And this won't work for regular expressions.
[19:20:09] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[19:21:32] <gilberth> So no matter what I do, it'll be wrong.
[19:24:50] <gilberth> All three systems could agree on some shared secret package, but also seems not quite right. Apart from that with these new relative package names^W^W^Wlocal nicknames, I don't see the need to :USE packages anymore. That is: You want this single DE.BAUHH.PARSE macro and thus shouldn't be forced to actually :USE that package. *sigh*
[19:53:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ba51:b2dc:656:c660) (Ping timeout: 245 seconds)
[19:54:05] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b3a8:c59a:e1f5:9b96)
[19:59:42] <Alfr> Good morning.
[20:25:43] *** Joins: christophergray (~christoph@190.148.52.44)
[20:27:53] *** Quits: christophergray (~christoph@190.148.52.44) (Client Quit)
[20:28:00] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[20:30:41] <gilberth> Ok. I can use the pretty printer to peek into those instances of SBCL, it keeps to use to hide ,x in backquote forms: <http://clim.rocks/gilbert/collect-all-symbols.lisp> ;A gross hack
[20:32:24] <gilberth> This is the most creative use of the pretty printer I ever came up with.
[20:33:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:34:21] <gilberth> That'll do.
[20:38:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[20:59:50] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[21:19:06] *** Joins: dra (~dra@2a04:4540:6419:4d00:9c4f:2d61:e582:82f7)
[21:19:08] <dra> Hello!
[21:25:42] <mfiano> Random, and recurring thought: English is such an odd language.
[21:25:56] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 245 seconds)
[21:27:21] <mfiano> Hilarious homophone semantics of the day: Please don't say "Bare with me" when you mean "Bear with me", unless of course, you would like someone to remove their clothes with you.
[21:33:01] *** Joins: X-Scale` (~ARM@31.22.147.35)
[21:33:02] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 260 seconds)
[21:34:23] *** X-Scale` is now known as X-Scale
[22:02:08] <gilberth> mfiano: What's odd about that?
[22:07:43] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:08:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:11:47] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:eba7:95bb:d099:a7d8) (Ping timeout: 264 seconds)
[22:15:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[22:15:30] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:19:35] <pjb> mfiano: we should forbid clothes in the public space anyways.
[22:19:48] <pjb> This would sanitize politics…
[22:20:54] <pjb> Remember: the original Olympic games were performed naked.  So people could not cheat.  Sumo too is performed mostly naked (with just the mawashi to get a grip on the adversary).
[22:21:35] <selwyn> mandatory naked hackathons
[22:22:15] <selwyn> they were naked so people couldn't cheat? is that really why?
[22:22:39] <pjb> mfiano: performance of X11 thru ssh depends of course on the bandwidth, the ping, the speed of the processors on both end (to encrypt and decrypt), and mostly on the contents. If you display pictures, it won't be as responsive as when you only display text (as explained, X11 only transmits the text, the fonts are in the server, so no more costly than a classic terminal).
[22:22:51] <pjb> selwyn: that's what I've been told.
[22:23:05] <mfiano> pjb: I abandoned that idea
[22:23:23] <pjb> Sumos can't hide weapons; They ceremonial hand movements are also demonstrating that they're naked hand.
[22:23:26] <mfiano> Too many problems, like random segfaults, and opening links dont open locally
[22:23:42] <pjb> mfiano: You have a more sophisticated usage than I do.
[22:57:39] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[22:59:26] *** Joins: notzmv (~zmv@user/notzmv)
[23:17:30] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b3a8:c59a:e1f5:9b96) (Ping timeout: 260 seconds)
[23:36:15] *** Joins: Inline (~Inline@2a02:908:1252:7a80:e007:8711:e7b4:2641)
