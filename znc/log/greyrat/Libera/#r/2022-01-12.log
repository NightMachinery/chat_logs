[01:26:00] *** Joins: twrk (~user@user/twrk)
[01:42:53] *** Joins: mnl (~mnl@user/mnl)
[01:50:39] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:15:11] *** Quits: arthurpbs (~arthurpbs@168.121.98.7) (Ping timeout: 256 seconds)
[02:27:17] *** Quits: usr725635_ (~User@cpe-45-47-86-32.twcny.res.rr.com) (Ping timeout: 240 seconds)
[02:27:40] *** Joins: arthurpbs (~arthurpbs@168.121.98.90)
[02:38:48] *** Quits: Vojtaeus (~vojta@user/vojtaeus) (Quit: Odcházím...)
[02:40:20] *** Quits: mnl (~mnl@user/mnl) (Quit: cya~)
[03:15:41] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:51:06] *** Quits: arthurpbs (~arthurpbs@168.121.98.90) (Remote host closed the connection)
[05:23:17] *** Quits: eliocamp (~eliocamp@user/eliocamp) (Quit: The Lounge - https://thelounge.chat)
[05:26:35] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[05:49:17] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[07:44:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:58:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:34:44] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:56:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:57:39] *** Joins: davor (~davor@user/davor)
[09:05:11] *** Quits: twrk (~user@user/twrk) (*.net *.split)
[09:05:11] *** Quits: px (~px@user/px) (*.net *.split)
[09:05:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[09:05:11] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (*.net *.split)
[09:05:12] *** Quits: davor_ (~davor@user/davor) (*.net *.split)
[09:05:12] *** Quits: dschk (~dschk@244.102.83.34.bc.googleusercontent.com) (*.net *.split)
[09:05:13] *** Quits: fendur (~nj@user/fendur) (*.net *.split)
[09:05:13] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[09:05:13] *** Quits: flip214 (~marek@user/flip214) (*.net *.split)
[09:05:46] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[09:10:13] *** Joins: flip214 (~marek@h081217094109.dyn.cm.kabsi.at)
[09:10:13] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[09:10:13] *** Joins: fendur (~nj@user/fendur)
[09:10:13] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:10:45] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[09:11:04] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:11:50] *** Joins: dschk (~dschk@244.102.83.34.bc.googleusercontent.com)
[09:15:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:19:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:27:38] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[09:29:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:39:42] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:57:14] *** Joins: twrk (~user@user/twrk)
[10:41:25] *** Joins: __that__ (~Guest8@139.47.36.37)
[10:41:38] <__that__> Morning all
[10:44:49] <__that__> is there any tutorial that shows R inside out? I want to understand for example why if you call plot and subsequent abline, R engine knows that abline is meant for the object that plot created earlier on. I would have expected this to be an object returned by plot and then pass onto abline.
[10:45:14] <__that__> This is one of the many questions I keep raising
[10:47:20] <rickyrick> __that__: Depends; how much R do you already know
[10:48:17] <twrk> https://adv-r.hadley.nz/
[10:49:10] <twrk> plot is an s3 object? smth like that
[10:50:16] <__that__> rickyrick, I am just starting but I have programmed with other languages for years. I need to understand R's idiosyncrasy first of all. Where is the R's equivalent to the Python Data Model for example
[10:50:41] <__that__> one could look at the Python Data Model and understand fairly well how things work in Python
[10:51:28] <__that__> this is exactly what I am trying to understand about R even before knowing more about the language itself
[10:51:29] <rickyrick> R is a lot more functional than OOP
[10:51:44] <rickyrick> I think you're supposed to think of plots as output devices
[10:52:59] <__that__> but internally a device may be an object of class X I guess?
[10:53:39] <__that__> or a struct or similar. I would like to have view of R from an engineering point of view.
[10:53:56] <rickyrick> I think of it more like a screen buffer
[10:53:58] <__that__> And not for a data scientist, statistician or biologist
[10:54:00] <rickyrick> Or if you're old enough, LPT1
[10:54:09] <rickyrick> Because once you push something out to the plot, you can't go back and delete it
[10:54:36] <__that__> that's the thing. I would want to avoid. having to imagine things. I would like to know them for certain
[10:54:59] <__that__> sure but why? What is the underlying design beneath this all?
[10:55:49] <rickyrick> That's fair
[10:56:03] <rickyrick> But it's also apt in that the device is handled by its' respective device driver
[10:56:27] <__that__> sure, that makes sense
[10:56:41] <rickyrick> i.e. if you're in the RStudio IDE, the device is the RStudio renderer
[10:56:47] <rickyrick> If it's CairoPNG, it's CairoPNG
[10:57:01] <rickyrick> AFAIK all of them just get sent a message as in "draw box here with x color"
[10:58:08] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:59:34] <__that__> twrk , thanks for that. It looks promissing. yeah, it could be like a S3 object but must be a reason why this is the way it is. I would like to feel comfortable and deal with a grey box rather than a black box that behaves like that and I just accept it
[11:00:38] <rickyrick> Yeah as an R user, it's pretty black box
[11:00:46] <rickyrick> Especially since the drawing functions are called out to C
[11:01:28] <rickyrick> If you're looking for all the bad parts of R, you should check out the R Inferno
[11:03:28] <__that__> cool, I am ready for hell... In fact I've been all my life :)
[11:03:35] <__that__> This book is about R the programming language, not R the data analysis tool. This is what I am after
[11:03:49] <rickyrick> ( ͡o ͜ʖ ͡o)
[11:05:51] *** Joins: triberio13 (~triberio1@195.53.32.158)
[11:23:10] *** Joins: palasso (~palasso@user/palasso)
[11:24:20] *** Quits: __that__ (~Guest8@139.47.36.37) (Quit: Client closed)
[11:36:48] *** Joins: Vojtaeus (~vojta@user/vojtaeus)
[12:45:49] *** Quits: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net) (Ping timeout: 240 seconds)
[12:49:00] *** Joins: computerfarmer (~thomas@p200300ca07355082a3ab2530b0e676d6.dip0.t-ipconnect.de)
[12:51:46] *** Joins: LogIN (~LogIN@82-132-232-55.dab.02.net)
[12:52:06] *** Quits: LogIN (~LogIN@82-132-232-55.dab.02.net) (Remote host closed the connection)
[13:22:09] *** Quits: Figworm (FiggyWitIt@user/figworm) (Ping timeout: 256 seconds)
[13:41:01] *** Joins: Figworm (FiggyWitIt@user/figworm)
[14:18:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:34:23] *** Joins: mnl (~mnl@user/mnl)
[14:40:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:50:02] *** Joins: usr725635_ (~User@cpe-45-47-86-32.twcny.res.rr.com)
[14:54:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:54:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:59:56] *** Joins: Guest8 (~Guest8@139.47.36.37)
[14:59:58] *** Guest8 is now known as __that__
[15:00:28] <__that__> Hi there again
[15:00:47] <perrierjouet> what was the command to mount usb-drive read write ? in fstab
[15:01:27] <__that__> is there any way on RStudio to know what package needs to be installed when one find the typical "object not found" message such "object 'preds2' not found"
[15:01:28] <__that__> ?
[15:02:23] <__that__> Obviously I can go to goole and search around, however I wonder if RStudio has got something in for these sort of things. Although I a looking at it from a Python perspective where some IDEs would let you know what library from the standard library you are missing
[15:03:15] <__that__> well, I am just talking rubbish in this case as that preds2 isn't just defined, being an user-defined name
[15:21:02] *** Quits: __that__ (~Guest8@139.47.36.37) (Quit: Client closed)
[15:29:10] *** Joins: debianero (~debianero@60.132.134.77.rev.sfr.net)
[15:59:08] *** Joins: eliocamp (~eliocamp@user/eliocamp)
[16:17:05] *** Quits: triberio13 (~triberio1@195.53.32.158) (Quit: Konversation terminated!)
[16:18:58] *** Joins: triberio13 (~triberio1@195.53.32.158)
[16:19:31] *** Quits: triberio13 (~triberio1@195.53.32.158) (Remote host closed the connection)
[16:29:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:29:37] *** Quits: mnl (~mnl@user/mnl) (Ping timeout: 240 seconds)
[16:30:41] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:33:45] *** Quits: computerfarmer (~thomas@p200300ca07355082a3ab2530b0e676d6.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[16:34:08] *** Joins: computerfarmer (~thomas@p200300ca07355082a3ab2530b0e676d6.dip0.t-ipconnect.de)
[16:50:33] *** Joins: triberio13 (~triberio1@195.53.32.158)
[16:53:55] *** Quits: triberio13 (~triberio1@195.53.32.158) (Remote host closed the connection)
[16:56:23] <Masklin_Gurder> I have a list of filepaths that I'm trying to loop through
[16:56:48] <Masklin_Gurder> The list looks fine, but the loop doesn't run
[16:56:55] <Masklin_Gurder> It is completely ignored, no errors or warnings
[16:57:18] <fendur> what does your loop code look like?
[16:57:31] <Masklin_Gurder> fendur: for(f in files) { ... stuff ... }
[16:57:47] <fendur> that looks fine. im sure the problem is among "stuff"
[16:58:02] <Masklin_Gurder> Hmm
[16:58:20] <Masklin_Gurder> Well, the first line of code is '3', for troubleshooting, and not even the 3 is being returned to console.
[16:58:28] <fendur> you might want to paste a more detailed example
[16:58:37] <fendur> pastebin might be necessary
[16:58:56] <Masklin_Gurder> Alright
[16:59:21] <fendur> _reproducible examples_ are preferred
[16:59:29] <fendur> there's an explanation of that linked in the topic
[17:00:24] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:03:00] <fendur> but i suspect in this case that any paste of the real code will go a long way to identifying the problem
[17:04:08] <Masklin_Gurder> I must attend a meeting, the paste is here: https://pastebin.com/9HzLQfAp
[17:04:43] <Masklin_Gurder> I didn't paste everything, but it should be enough to figure out why the "3" on line 4 isn't printing
[17:06:08] <fendur> output from within a for loop is not printed to the script like it would be outside of a for loop. If you want it to be, use print()
[17:06:23] <fendur> er, "is not printed to the screen like it ..."
[17:07:17] <fendur> likewise under # The list of birb genes, wrap a print() around the paste
[17:07:40] <fendur> or cat() as an alternative to print()
[17:08:26] *** Quits: Vojtaeus (~vojta@user/vojtaeus) (Quit: Odcházím...)
[17:08:49] *** Joins: Vojtaeus (~vojta@user/vojtaeus)
[17:09:17] <Masklin_Gurder> Ah
[17:09:19] <Masklin_Gurder> xD
[17:10:16] <fendur> that's just for monitoring, right?
[17:32:39] <Masklin_Gurder> Yes
[17:32:50] <Masklin_Gurder> Thanks fendur I figured it out with your help
[17:33:04] <Masklin_Gurder> (Ultimately it was an incredible if condition failing)
[17:33:06] <fendur> yw
[17:33:26] <fendur> gotta make those mistakes to grow...
[17:47:50] *** Quits: computerfarmer (~thomas@p200300ca07355082a3ab2530b0e676d6.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[21:14:10] *** Joins: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net)
[21:57:38] *** Joins: BinarySavior_ (~BinarySav@josh.vet)
[22:00:04] *** Joins: tmyklebu_ (~tmyklebu@ns542847.ip-158-69-248.net)
[22:03:44] *** Joins: Bayes^_^ (~Bayes@vps-1d06364e.vps.ovh.ca)
[22:05:15] *** Quits: dschk (~dschk@244.102.83.34.bc.googleusercontent.com) (*.net *.split)
[22:05:16] *** Quits: fidothe (sid1130@id-1130.uxbridge.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (*.net *.split)
[22:05:17] *** Quits: shrysr (~shrysr@user/shrysr) (*.net *.split)
[22:05:18] *** Quits: friedrich (~friedrich@aextron.de) (*.net *.split)
[22:05:18] *** Quits: tmyklebu (~tmyklebu@ns542847.ip-158-69-248.net) (*.net *.split)
[22:05:18] *** Quits: Bayes (~Bayes@user/bayes) (*.net *.split)
[22:05:18] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (*.net *.split)
[22:05:18] *** Quits: bsf (~bsf@user/bsf) (*.net *.split)
[22:05:18] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[22:05:19] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (*.net *.split)
[22:05:19] *** Quits: nvuafo (~usrnvuafo@user/nvuafo) (*.net *.split)
[22:05:19] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[22:05:19] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[22:05:20] *** Quits: tdsmith (~tdsmith@kvm.kumokasumi.org) (*.net *.split)
[22:05:20] *** Quits: redrum88 (redrum88@user/redrum88) (*.net *.split)
[22:05:20] *** Quits: Betawolf (~matthew@xn--bta-yla.net) (*.net *.split)
[22:05:20] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[22:05:21] *** Quits: TheLink (~TheLink@user/thelink) (*.net *.split)
[22:05:22] *** Quits: gnyeki (~gnyeki@user/gnyeki) (*.net *.split)
[22:05:22] *** Quits: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net) (*.net *.split)
[22:05:23] *** Quits: rinzewind (~rinzewind@user/rinzewind) (*.net *.split)
[22:05:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[22:05:23] *** Quits: debianero (~debianero@60.132.134.77.rev.sfr.net) (*.net *.split)
[22:05:23] *** Quits: davor (~davor@user/davor) (*.net *.split)
[22:05:24] *** Quits: reaVer (~reaVer@80-100-12-65.ip.xs4all.nl) (*.net *.split)
[22:05:24] *** Quits: Vultyre (~vultyre@user/vultyre) (*.net *.split)
[22:05:24] *** Quits: baconator (~bacon@108-255-68-53.lightspeed.cicril.sbcglobal.net) (*.net *.split)
[22:05:25] *** Quits: kaos (~kaos@88.164.10.175) (*.net *.split)
[22:05:25] *** Quits: torbjorn_ (~torbjorn@88.81-166-205.customer.lyse.net) (*.net *.split)
[22:05:25] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (*.net *.split)
[22:05:25] *** Quits: jootoi- (~jootoi@130.61.158.197) (*.net *.split)
[22:05:26] *** Quits: averell (~averell@user/averell) (*.net *.split)
[22:05:27] *** Quits: zxtx (~zxtx@sunnythinking.org) (*.net *.split)
[22:05:27] *** Quits: shr2 (~shrysr@user/shrysr) (*.net *.split)
[22:05:29] *** Quits: ttkap (~ttkap@user/ttkap) (*.net *.split)
[22:05:32] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[22:05:32] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[22:05:32] *** Quits: shadowpaste (~shadowpas@kitty.scsys.co.uk) (*.net *.split)
[22:05:32] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[22:05:33] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[22:05:33] *** Quits: zaratustra_ (~zaratustr@idlerpg/player/zaratustra) (*.net *.split)
[22:05:34] *** Quits: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de) (*.net *.split)
[22:05:34] *** Quits: palasso (~palasso@user/palasso) (*.net *.split)
[22:05:35] *** Quits: jonasbits (~quassel@2a00:66c0:1:1::58) (*.net *.split)
[22:05:37] *** Quits: Vojtaeus (~vojta@user/vojtaeus) (*.net *.split)
[22:05:38] *** Quits: confuzius (~h_m@186-149-117-154.bitcointernet.co.za) (*.net *.split)
[22:05:39] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[22:05:39] *** Quits: JoshStark0 (~JoshStark@linuxserver.io/stark) (*.net *.split)
[22:05:39] *** Quits: Kabouik (~Kabouik@user/kabouik) (*.net *.split)
[22:05:39] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[22:10:19] *** Joins: palasso (~palasso@user/palasso)
[22:10:19] *** Joins: dschk_ (~dschk@244.102.83.34.bc.googleusercontent.com)
[22:10:19] *** Joins: pookie (~pookie@snf-137798.vm.okeanos.grnet.gr)
[22:10:19] *** Joins: friedrich_ (~friedrich@aextron.de)
[22:10:19] *** Joins: bsf_ (~bsf@user/bsf)
[22:10:19] *** Joins: shrysr_ (~shrysr@2600:3c04::f03c:91ff:fece:e233)
[22:10:19] *** Joins: theruran (uid11305@id-11305.hampstead.irccloud.com)
[22:10:19] *** Joins: fidothe (sid1130@id-1130.uxbridge.irccloud.com)
[22:10:19] *** Joins: rickyrick (~rickyrick@S01069050ca454523.vf.shawcable.net)
[22:10:19] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[22:10:19] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:10:19] *** Joins: debianero (~debianero@60.132.134.77.rev.sfr.net)
[22:10:19] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[22:10:19] *** Joins: davor (~davor@user/davor)
[22:10:19] *** Joins: confuzius (~h_m@186-149-117-154.bitcointernet.co.za)
[22:10:19] *** Joins: nvuafo (~usrnvuafo@user/nvuafo)
[22:10:19] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[22:10:19] *** Joins: JoshStark0 (~JoshStark@linuxserver.io/stark)
[22:10:19] *** Joins: reaVer (~reaVer@80-100-12-65.ip.xs4all.nl)
[22:10:19] *** Joins: Vultyre (~vultyre@user/vultyre)
[22:10:19] *** Joins: baconator (~bacon@108-255-68-53.lightspeed.cicril.sbcglobal.net)
[22:10:19] *** Joins: Kabouik (~Kabouik@user/kabouik)
[22:10:19] *** Joins: jootoi- (~jootoi@130.61.158.197)
[22:10:19] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[22:10:19] *** Joins: torbjorn_ (~torbjorn@88.81-166-205.customer.lyse.net)
[22:10:19] *** Joins: kaos (~kaos@88.164.10.175)
[22:10:19] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[22:10:19] *** Joins: Betawolf (~matthew@xn--bta-yla.net)
[22:10:19] *** Joins: redrum88 (redrum88@user/redrum88)
[22:10:19] *** Joins: tdsmith (~tdsmith@kvm.kumokasumi.org)
[22:10:19] *** Joins: Unode (~Unode@194.94.44.220)
[22:10:19] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[22:10:19] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[22:10:19] *** Joins: TheLink (~TheLink@user/thelink)
[22:10:19] *** Joins: shr2 (~shrysr@user/shrysr)
[22:10:19] *** Joins: zxtx (~zxtx@sunnythinking.org)
[22:10:19] *** Joins: averell (~averell@user/averell)
[22:10:19] *** Joins: ttkap (~ttkap@user/ttkap)
[22:10:19] *** Joins: zaratustra_ (~zaratustr@idlerpg/player/zaratustra)
[22:10:19] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[22:10:19] *** Joins: since_ (d1cb7284cb@ircbox.informatik.uni-erlangen.de)
[22:10:19] *** Joins: taeaad (~taeaad@user/taeaad)
[22:10:19] *** Joins: OverCoder (~OverCoder@user/overcoder)
[22:10:19] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[22:10:19] *** Joins: shadowpaste (~shadowpas@kitty.scsys.co.uk)
[22:10:19] *** Joins: jonasbits (~quassel@2a00:66c0:1:1::58)
[22:10:19] *** Joins: ChanServ (ChanServ@services.libera.chat)
[22:10:19] *** molybdenum.libera.chat sets mode: +o ChanServ
[22:10:30] *** Quits: redrum88 (redrum88@user/redrum88) (Ping timeout: 260 seconds)
[22:10:32] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[22:10:33] *** Joins: palasso (~palasso@user/palasso)
[22:16:23] *** Quits: Bayes^_^ (~Bayes@vps-1d06364e.vps.ovh.ca) (Changing host)
[22:16:23] *** Joins: Bayes^_^ (~Bayes@user/bayes)
[22:16:32] *** Bayes^_^ is now known as Bayes
[22:16:54] *** Joins: redrum88 (redrum88@user/redrum88)
[22:17:39] *** Quits: davor (~davor@user/davor) (Ping timeout: 256 seconds)
[22:18:21] *** Joins: davor (~davor@user/davor)
[22:21:25] <Bayes> Masklin_Gurder you interested in some feedback on that code?
[22:33:44] <Bayes> Masklin_Gurder https://pastebin.com/raw/7NLnkNes
[22:33:59] <Bayes> I tried not to mess up with names, as you might have name conventions
[22:34:36] <rickyrick> >PDF
[22:34:38] <rickyrick> >pixel dimensions
[22:34:40] <rickyrick> ????????????
[22:34:41] <Bayes> and also no formatting changes, which you might also consider
[22:36:34] <Bayes> next step: since all lines below # Gene ontology analysis depend on ewp, you can create a function print_output(ewp), etc...
[22:38:00] <Bayes> next step: encapsulate the # The list of birb genes block in read_genes(filename) to help enforce some consistency in how you read these genes_in_* files
[22:39:13] <Bayes> so on and so forth
[22:39:28] <Bayes> until you have procrastinated you day away
[22:40:20] <Bayes> Masklin_Gurder a quick way to get some formatting handled is to select a block (or the whole script) and C-S-a
[22:40:29] <Bayes> assuming ur on rstudio
[22:40:43] <Bayes> rstudio doesn't do a great job but it's something
[22:41:34] <Bayes> also it's recommended from some reason that escapes me rn that you use <- instead of = for left assignments, e.g., ewp <- enricher(blabla)
[22:42:28] <fendur> the only reason i can think of is to visually differentiate assignment from argument specification
[22:42:47] * rickyrick aligns assigns
[22:42:47] <Bayes> unless you're a boomer, a rule of thumb is to use equal in function calls or lists list(key1 = "value1"), etc
[22:42:55] * Bayes as well
[22:43:02] <fendur> which I like, but others will fight you about.
[22:43:05] <rickyrick> :^)
[22:43:15] <rickyrick> Worse: Use a mix of <- and = for assignment
[22:45:05] <Bayes> Masklin_Gurder encapsulating all "list(base, pattern)" and "scan(filename, somefixedsettings)" in functions can help you enforce consistent paths and filenames
[22:45:10] <fendur> worst: never explicitly define arguments and always assign with ->
[22:45:50] <fendur> that's not worst.
[22:45:53] <rickyrick> lol
[22:46:04] <rickyrick> Whenever I'm living in magrittr land I always assign with ->
[22:46:05] <rickyrick> :^)
[22:46:08] <Bayes> in every project I have a R/data.R file that is basically read_genes (reads raw data), get_genes_dataset (gives you the data ready to be used, e.g., transformations appleid etc)
[22:46:15] * rickyrick ducks under a tomato
[22:46:57] * fendur throws soggy french fries at rickyrick 
[22:47:18] <Bayes> and I think I like to have functions vectorized by default, so that I don't have some many lapply(read_genes, genes_names)) in my code
[22:47:20] * fendur keeps the crunchy ones for himself and uses real katchup
[22:47:31] <fendur> is that how you spell katchup?
[22:47:32] <Bayes> and just read_genes(gene_names) with read_genes being vectorized
[22:47:38] <Bayes> unless parallelization is an issue
[22:47:39] <fendur> it doesn't matter, right?
[22:48:22] <Bayes> a 20yo once asked me for the "katzup"
[22:48:45] <Bayes> which sounds like cat soup with a very closed accent lol
[22:48:50] <fendur> it's correct, though. because there's no one way.
[22:49:00] <rickyrick> :^)
[22:49:02] <fendur> all spellings of catsup are absoluitely correct
[22:49:04] <rickyrick> thx for lunch
[22:54:32] <Bayes> is there a way to have R remove the unnecessary margin space for an axis with no label?
[22:54:44] <Bayes> without handling par I mean
[22:55:02] <Bayes> plot(1:10, 1:10, xlab = "", ylab = "")
[22:56:10] <Bayes> you got me thinking into that rickyrick with your LPT1 comment
[22:56:32] <Bayes> once you call this line, you're fucked so you can't fix the margin afterward
[22:56:59] <Bayes> and that means that you have to start fiddling with par before the plot, and so precalculate things and doing things by hand
[22:57:24] <Bayes> it'd be nice if plot(1:10, 1:10, xlab = "", ylab = FALSE) or something would take care of all that
[22:57:39] <fendur> if you're talking about no axis descriptions, that should always result in the same proportion reduction in the margin space, right?
[22:57:52] <Bayes> I guess so
[22:57:58] <Bayes> basically "remove one line"
[22:59:27] <rickyrick> ya
[22:59:36] <Bayes> I mean even if you ann = FALSE, it keeps the margin space
[23:01:48] <fendur> isn't the argument "mar"?
[23:02:22] <fendur> not sure what you mean by "handling par", though
[23:02:42] <fendur> the mar argument seems like exactly what you'd want and wouldn't require calculating anything, if I understand it (I haven't used it)
[23:03:03] <Bayes> meaning that you don't have do par(mar = something), and figuring out something by hand, by hand
[23:03:05] <fendur> well, i mean, you'd have to know ahead of time that you will not have descriptions on the axes
[23:03:14] <Bayes> yep that
[23:03:30] <fendur> k. i don't know. i'd just throw a conditional in there.
[23:05:43] <Bayes> you'd need to keep track of the actual values of mar for the sides you don't want to change
[23:06:42] <Bayes> so you'd need like two lines, one to get the actual and the other to modify say the bottom margin
[23:06:53] <Bayes> s/actual/current
[23:07:00] <fendur> wouldn't it always either be c(5,4,4,2)+.1 OR c(4,3,4,2)+.1?
[23:07:12] <fendur> i think i am missing some context for the problem
[23:07:16] <Bayes> unless you've changed it before
[23:07:31] <fendur> if you're looping over data, just always set it to something as a first step
[23:07:41] <fendur> the default or the alt value
[23:07:56] *** Quits: pookie (~pookie@snf-137798.vm.okeanos.grnet.gr) (Quit: All for nothing)
[23:08:17] <Bayes> yeah it gets pretty involved only to just remove some empty space every time xlab = "" :P
[23:08:30] <Bayes> that's what I'm saying, it'd be cool to have a switch
[23:08:42] <Bayes> as you can plot(x, y, xlog = TRUE) or things like that
[23:08:51] <Bayes> so you dont have to handle it yourself
[23:09:14] <fendur> gotcha
[23:12:46] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[23:18:20] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[23:59:08] *** Joins: srhm (dda3db84b5@user/srhm)
