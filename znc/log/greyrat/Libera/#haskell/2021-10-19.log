[02:07:26] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:07:26] *** Server sets mode: +Cnt 
[02:07:49] <geekosaur> mniip
[02:08:04] <mniip> hi
[02:13:38] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 260 seconds)
[02:14:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-043.wadham.ox.ac.uk) (Remote host closed the connection)
[02:16:17] <jackhill> geekosaur: that's doable it that's what's expected.
[02:17:22] *** Quits: glassy (~glassy@92.40.175.103.threembb.co.uk) (Ping timeout: 260 seconds)
[02:17:58] <geekosaur> yeh, I'm suspecting that and probably cabal c-sources won't consult ghc to see what c compiler it expects, you'll have to arrange for it to be in $PATH some other way
[02:19:27] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Remote host closed the connection)
[02:19:51] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[02:20:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[02:23:45] *** Quits: max22- (~maxime@2a01cb088335980099ed81e6a8bd9a3f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[02:26:10] *** Quits: Morrow (~Morrow@147.161.13.214) (Read error: Connection reset by peer)
[02:29:20] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[02:32:05] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[02:32:46] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Quit: WeeChat 3.3)
[02:33:34] *** Joins: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net)
[02:33:34] *** Quits: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net) (Changing host)
[02:33:34] *** Joins: wroathe (~wroathe@user/wroathe)
[02:34:32] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[02:36:46] *** Quits: azeem (~azeem@2a00:801:237:7bcf:1c96:8993:d67f:c459) (Ping timeout: 245 seconds)
[02:36:47] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (Ping timeout: 240 seconds)
[02:36:54] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[02:39:05] <Axman6> DigitalKiwi: Someone I know at the qfpl (lightandlight I think?) made a python, haskell... thing... which was very good at finding python bugs like that
[02:39:10] *** Quits: d34df00d (~d34df00d@2600:1700:8c60:3a10::48) (Ping timeout: 252 seconds)
[02:39:27] <DigitalKiwi> i got it from dibblego ;)
[02:40:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:41:59] <Axman6> yeah I figured you might have
[02:42:22] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Quit: k60)
[02:42:36] *** Joins: k60 (~user@broadband-95-84-168-218.ip.moscow.rt.ru)
[02:42:43] *** Parts: k60 (~user@broadband-95-84-168-218.ip.moscow.rt.ru) ()
[02:44:01] *** Joins: burnsidesLlama (~burnsides@dhcp168-043.wadham.ox.ac.uk)
[02:44:10] *** Joins: fluffyballoon (~user@131.93.208.196)
[02:44:32] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[02:44:51] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Client Quit)
[02:45:23] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[02:45:57] *** Joins: trog (~trog@user/trog)
[02:47:51] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:47:59] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[02:48:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:49:59] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:50:02] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Ping timeout: 260 seconds)
[02:51:18] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:51:21] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb87414c380a9484df88.dip0.t-ipconnect.de)
[02:54:30] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb806ce024b26c2d7c09.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[02:54:38] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:55:24] <dibblego> sup yooz
[02:57:44] <Axman6> I reckon I'll be able to come visit youse all soon, jackdk keeps saying I should come up
[02:58:44] <dibblego> yeah harry ap
[02:58:51] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:59:49] <Axman6> Would've been sooner if gladys hasn't wrecked the joint for everyone
[03:00:27] <dibblego> yeah she's a knob â€” come and breathe all over me pls
[03:01:12] <jackdk> The one upside is that it dented her political forcefield enough that the corruption stuff may possibly potentially catch up with her maybe
[03:01:48] <dibblego> 'ere ya go, 28 Nov, seeya there https://i.imgur.com/O7jaEbR.png
[03:02:19] *** Joins: argento (~argent0@168-227-96-26.ptr.westnet.com.ar)
[03:09:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:10:01] *** Quits: mmhat (~mmh@55d44f19.access.ecotel.net) (Quit: WeeChat 3.3)
[03:12:22] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:17:37] *** Quits: guydb89 (~guy@98.40.140.117) (Quit: leaving)
[03:21:33] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:39a4:166a:24e9:f255) (Remote host closed the connection)
[03:21:54] *** Joins: guydb89 (~guy@98.40.140.117)
[03:24:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[03:24:01] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[03:24:15] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[03:30:03] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[03:30:22] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:30:43] <zzz> hey. i just found out we can have duplicate record accessors in data constructors of the same type, as long as their types match
[03:33:33] <geekosaur> yep. all the way back to H98. problem is they can be partial
[03:34:12] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[03:34:25] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[03:34:32] *** Joins: alzgh (~alzgh@user/alzgh)
[03:34:46] <unit73e> there's also the DuplicateRecordFields extension
[03:35:23] <unit73e> though I hardly ever use such extensions
[03:35:36] <monochrom> Naw, the problem we considered yesterday was "what if I really want different field types".
[03:35:51] <geekosaur> data Foo = Foo { x :: Int } | Bar { x :: Int; y :: Double } | Baz { y :: Double } -- both x and y are partial and will throw exceptions if accessed from the wrong constructor
[03:35:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:35:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:35:52] *** Joins: wroathe (~wroathe@user/wroathe)
[03:36:13] <monochrom> So, yesterday the question was about "data T = C1 {a :: Int} | C2 {a :: NotInt}"
[03:36:59] *** Quits: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net) (Ping timeout: 264 seconds)
[03:38:11] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Ping timeout: 264 seconds)
[03:38:25] <unit73e> Is there a way to make an alias of your own module? because I want to make a `Direction = Up | Down | Left | Right` but there's `Either` and hiding `Left, Right` from Prelude kind of gives me bad taste
[03:38:32] <zzz> geekosaur: you mean we get an error if we do `y (Foo 7)` ?
[03:38:56] <geekosaur> zzz, yes
[03:39:17] <awpr> I can never remember whether it's legal to just say `My.Module.Left`, but it's worth a try
[03:39:20] <geekosaur> unit73e, xmonad solves that by calling them U, D, L, R
[03:39:25] <zzz> i hate records
[03:39:30] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:39:33] <unit73e> geekosaur, ok. might as well do the same thing. thanks.
[03:39:49] <geekosaur> awpr, yes
[03:40:16] <monochrom> In fact you now have to say My.Module.Left and Prelude.Left
[03:40:23] <geekosaur> (see Direction2D in xmonad)
[03:41:09] <monochrom> zzz: Please don't conflate Haskell's poor execuse of record syntax with records (the real ones) :)
[03:41:19] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[03:41:37] <zzz> :)
[03:41:41] <zzz> give me a record
[03:41:43] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: restarting)
[03:41:49] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:42:08] <monochrom> Oh hell I missed a great pun opportunity. Let me fix it...
[03:42:17] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb878946a34aec1faea1.dip0.t-ipconnect.de)
[03:42:19] <monochrom> For the record, please don't conflate Haskell's poor execuse of record syntax with records (the real ones) :)
[03:42:41] <Axman6> Not sure that pun works, but I'll allow it
[03:44:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[03:45:03] <zzz> i'm still not sure of what you mean by "real" records
[03:45:23] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[03:45:29] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb87414c380a9484df88.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[03:45:33] <monochrom> For example in SML, Pascal, C, ... basically every language except Haskell.
[03:45:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:39a4:166a:24e9:f255)
[03:48:01] *** Quits: meer (~delicacie@2601:6c4:4080:3f80:cc37:7f71:51d3:b41c) (Ping timeout: 245 seconds)
[03:48:10] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[03:51:41] *** Quits: fluffyballoon (~user@131.93.208.196) (Remote host closed the connection)
[03:54:03] *** Joins: Cajun (~Cajun@user/cajun)
[03:56:36] *** Joins: fluffyballoon (~user@131.93.208.196)
[03:57:33] *** Quits: Cajun (~Cajun@user/cajun) (Client Quit)
[03:59:52] *** Joins: Cajun (~Cajun@user/cajun)
[04:05:01] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[04:10:12] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:11:33] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:110c:9227:cd24:5132) (Ping timeout: 258 seconds)
[04:16:12] <jollygood2> there's  records synax overhaul in ghc 9.2, which is still in alpha IIRC. RecordDotSyntax is one of them
[04:16:12] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[04:16:34] *** Joins: MQ-17J (~MQ-17J@8.6.144.138)
[04:17:03] <jollygood2> also DuplicateRecordFields 
[04:17:16] <c_wraith> DuplicateRecordFields has been around for a long time
[04:17:26] <c_wraith> NoFieldSelectors is the interesting new one in 9.2
[04:17:40] <jollygood2> h yes, that one
[04:17:58] <zzz> are lenses going to become obsolete?
[04:18:14] <c_wraith> No, lenses are finally going to be strictly better than built-in tools
[04:18:29] <jollygood2> no. from what I've read, they work fine with dot syntax. and do a lot more
[04:18:29] <zzz> how so?
[04:18:46] <Axman6> this is news to me too :o
[04:19:13] <kronicmage> strictly better except for build times -_-
[04:19:38] <monochrom> Um, why do I get the feeling that "lenses are finally better than built-in tools" means "built-in tools are finally getting worse"? :)
[04:20:04] <zzz> that thought touched my mind
[04:20:07] <dsal> build times are only slow if you're using TH.  You could always hand-write your lenses.
[04:20:25] <jollygood2> basically, instead of person personName (groupLeader group) we can use group.leader.name . and different records can also have .name etc fields
[04:20:33] <jollygood2> pretty neat
[04:20:44] <dsal> That's what I did in the project I got yelled at for using lenses -- just locally defined all the lenses where I needed them instead of making them global.
[04:20:57] <dsal> I don't know much about RecordDotSyntax, but I don't think I like it.
[04:21:00] <c_wraith> here:  https://www.reddit.com/r/haskell/comments/mhzf9l/announce_ghc_921alpha1_now_available/gt3lexp/
[04:21:27] <zzz> i don't even like qualified dot syntax
[04:21:33] <zzz> for the obvious reasons
[04:22:09] <c_wraith> Man, I've been waiting on 9.2 for 6 months, according to reddit
[04:22:18] <zzz> module dot syntax? i don't know what to call it
[04:23:02] <jollygood2> aprox how far are we from stable 9.2?
[04:27:31] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 252 seconds)
[04:27:59] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 264 seconds)
[04:28:15] <dsal> zzz: do you just not like dots?
[04:28:23] *** Joins: hiruji (~hiruji@user/hiruji)
[04:28:26] <dsal> Or things that appear to mean different things.
[04:28:35] *** Quits: MQ-17J (~MQ-17J@8.6.144.138) (Ping timeout: 264 seconds)
[04:29:04] <kronicmage> i do wish keyboards had a \cdot key so we could differentiate composition . and record .
[04:29:25] <dsal> My keyboard has that.
[04:29:28] <geekosaur> Â·
[04:29:34] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 258 seconds)
[04:29:34] <kronicmage> damn
[04:29:41] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[04:29:47] <kronicmage> now we just need unicode character extension to support that lol
[04:29:48] <dsal> I use emacs.  It has all the thigns.
[04:30:01] <dsal> I literally just type "f \cdot g" and it shows up as "f Â· g"
[04:30:08] <geekosaur> -XUnicodeSyntax?
[04:30:39] <jollygood2> I think it is pretty uncommon to omit space when composing functions.
[04:30:45] <geekosaur> hm, not even needed. (Â·) = (.)
[04:31:12] <jollygood2> they could have used different character, but dot is such an ubiquitous syntax for field access across countless languages
[04:31:36] <dsal> I like this example:     sqr x = x Ã— x
[04:31:40] <monochrom> module DataÂ·Function where f âˆ˜ g = \x -> f (g x)  -- >:)
[04:32:01] <awpr> was that intentionally added to `base`, or was somebody just ASCII-art-ing a confused face and forgot the leading `--`?
[04:32:03] <kronicmage> monochrom: that's sexy lmao
[04:32:42] <zzz> dsal: things that appear to mean different things
[04:33:07] <dsal> zzz: It kind of means the same thing in lens, but you get to think of it a very different way.
[04:33:11] *** Quits: lbseale_ (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:33:58] <kronicmage> i still think it's kind of weird that lenses compose backwards
[04:34:34] <dsal> It's usually not weird in practice, but sometimes it is.
[04:34:52] *** Joins: acidjnk_new3 (~acidjnk@pd9e0b933.dip0.t-ipconnect.de)
[04:35:31] <c_wraith> they compose forward when you realize a lens is being used to make things bigger :)
[04:36:13] <elcaro> Raku uses 'âˆ˜' for function composition. if you don't want to unicode, you use 'o' instead)
[04:36:37] <awpr> I'm tempted to write yet another lens library with the type parameters in the opposite order just so people can't say they compose backwards
[04:37:06] <dsal> Call it amateurfunctor-lenses
[04:37:26] <c_wraith> ...  how long have you been sitting on that name?
[04:38:00] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb878946a34aec1faea1.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[04:38:26] <monochrom> SML uses o for function composition and declares it infix.
[04:38:53] <monochrom> In general you can declare any alphabetical function name infix.
[04:41:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[04:41:20] <c_wraith> that seems like something of a pain for parsing
[04:41:36] <monochrom> Yeah
[04:43:05] *** Joins: MQ-17J (~MQ-17J@8.6.144.172)
[04:46:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[04:46:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:50:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[04:51:58] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[04:52:04] *** Joins: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com)
[04:53:24] <jollygood2> this is dope. c{taken.year = y} -- nested update    map (.taken.term) -- nested selector
[04:53:46] <monochrom> :)
[04:59:24] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad)
[05:01:29] *** Joins: PHO` (~PHO@2405:6581:4ee0:2800:c84:d3ec:1ba2:843b)
[05:03:18] *** Quits: acidjnk_new3 (~acidjnk@pd9e0b933.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[05:03:37] *** Quits: guydb89 (~guy@98.40.140.117) (Quit: Lost terminal)
[05:04:04] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad) (Ping timeout: 258 seconds)
[05:10:35] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[05:10:53] <zzz> dsal: "bats" would be a better name
[05:12:11] *** Quits: emf_ (~emf@2620:10d:c090:400::5:a662) (Ping timeout: 245 seconds)
[05:13:44] *** Joins: cjb94216 (~cjb@user/cjb)
[05:14:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[05:15:01] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[05:15:52] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[05:16:28] *** cjb94216 is now known as cjb
[05:17:44] <dsal> zzz: heh.  I just got that.
[05:18:08] *** Quits: jespada (~jespada@2803:9800:9842:7a62:a1db:843b:ed19:cad6) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:19:24] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[05:19:33] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[05:24:30] *** Quits: boxscape_ (~boxscape_@p54a3581e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:25:06] *** Quits: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com) (Ping timeout: 245 seconds)
[05:26:11] *** Quits: xff0x (~xff0x@2001:1a81:52fe:af00:73f9:c60:e593:d5a0) (Ping timeout: 264 seconds)
[05:27:47] *** Joins: xff0x (~xff0x@2001:1a81:5338:8400:6a8d:1ab1:8641:5267)
[05:39:57] *** fluffyballoon is now known as fluffyballon`
[05:40:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:41:38] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 258 seconds)
[05:47:00] *** fluffyballon` is now known as fluffyballoon
[05:50:59] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:54:08] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[05:55:18] *** Quits: slack1256 (~slack1256@45.4.2.52) (Ping timeout: 260 seconds)
[06:07:20] *** Quits: argento (~argent0@168-227-96-26.ptr.westnet.com.ar) (Quit: leaving)
[06:11:55] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 258 seconds)
[06:14:02] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:14:08] *** Quits: td_ (~td@muedsl-82-207-238-233.citykom.de) (Ping timeout: 265 seconds)
[06:14:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[06:15:43] *** Joins: td_ (~td@muedsl-82-207-238-089.citykom.de)
[06:16:35] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:17:59] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:18:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:22:32] *** Joins: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net)
[06:25:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-043.wadham.ox.ac.uk) (Remote host closed the connection)
[06:31:37] *** Quits: PHO` (~PHO@2405:6581:4ee0:2800:c84:d3ec:1ba2:843b) (Quit: Leaving)
[06:32:16] *** Joins: PHO` (~pho@akari.cielonegro.org)
[06:36:53] *** Quits: alx741 (~alx741@186.178.108.68) (Quit: alx741)
[06:48:56] *** Joins: Axma85485 (~Axman6@user/axman6)
[06:48:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[06:49:52] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:51:02] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[06:56:09] *** Joins: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[06:56:13] *** Joins: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com)
[07:02:08] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[07:03:26] *** Quits: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 265 seconds)
[07:13:03] *** Joins: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[07:14:37] *** meer is now known as Inst
[07:15:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:15:31] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:15:31] *** Quits: Boarders (sid425905@id-425905.lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:15:31] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:16:19] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[07:16:42] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[07:16:42] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 258 seconds)
[07:16:46] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 245 seconds)
[07:16:46] *** Quits: astra` (sid289983@user/amish) (Ping timeout: 245 seconds)
[07:17:05] *** Quits: econo (uid147250@user/econo) (Ping timeout: 258 seconds)
[07:17:11] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[07:17:11] *** Quits: dmj` (sid72307@id-72307.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[07:17:28] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 258 seconds)
[07:17:47] *** Quits: etrepum (sid763@id-763.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[07:17:51] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[07:18:01] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 245 seconds)
[07:18:18] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:18:40] *** Joins: edmundnoble (sid229620@helmsley.irccloud.com)
[07:19:26] *** Joins: tritlo (sid58727@user/tritlo)
[07:19:27] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[07:19:29] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[07:19:29] *** Joins: dmj` (sid72307@id-72307.hampstead.irccloud.com)
[07:19:30] *** Joins: econo (uid147250@user/econo)
[07:19:32] *** Joins: SanchayanMaity (sid478177@hampstead.irccloud.com)
[07:19:34] *** Joins: astra` (sid289983@user/amish)
[07:19:45] *** Joins: etrepum (sid763@id-763.uxbridge.irccloud.com)
[07:19:49] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[07:20:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[07:29:57] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[07:29:57] *** Joins: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com)
[07:30:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[07:30:59] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[07:31:57] *** Joins: sclv (sid39734@haskell/developer/sclv)
[07:32:04] *** Joins: Boarders (sid425905@id-425905.lymington.irccloud.com)
[07:35:06] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[07:35:41] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[07:38:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[07:49:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:01:11] *** Quits: phma (~phma@host-67-44-209-44.hnremote.net) (Read error: Connection reset by peer)
[08:01:36] *** Joins: jeffz (~user@lambda.xen.prgmr.com)
[08:02:09] *** Joins: phma (~phma@host-67-44-208-9.hnremote.net)
[08:05:07] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[08:05:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:05:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:05:20] *** Joins: wroathe (~wroathe@user/wroathe)
[08:09:23] *** Quits: MQ-17J (~MQ-17J@8.6.144.172) (Ping timeout: 264 seconds)
[08:09:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[08:09:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[08:10:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:10:59] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:13:52] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[08:14:47] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 264 seconds)
[08:16:35] *** Quits: rekahsoft (~rekahsoft@52.129.35.150) (Ping timeout: 264 seconds)
[08:23:59] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[08:24:02] *** Quits: cjb (~cjb@user/cjb) ()
[08:26:13] *** Axma85485 is now known as Axman6
[08:36:00] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad)
[08:38:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[08:38:17] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[08:39:59] *** Quits: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net) (Ping timeout: 264 seconds)
[08:40:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[08:40:31] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad) (Ping timeout: 252 seconds)
[08:42:12] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:43:04] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[08:44:41] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 245 seconds)
[08:45:15] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[08:45:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[08:48:14] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[08:56:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[09:00:47] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.123)
[09:00:56] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 245 seconds)
[09:03:53] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:04:42] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[09:05:45] *** Joins: rembo10 (~rembo10@remulis.com)
[09:12:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[09:17:22] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[09:19:26] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.123) (Quit: mikoto-chan)
[09:20:31] *** Quits: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com) (Ping timeout: 245 seconds)
[09:25:10] *** Quits: _\_ (~o@user/ding) (Read error: Connection reset by peer)
[09:25:38] *** Joins: _\_ (~o@user/ding)
[09:29:04] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[09:29:20] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[09:29:43] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[09:45:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[09:48:33] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Remote host closed the connection)
[09:48:48] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[09:49:59] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[09:50:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 245 seconds)
[09:50:51] *** Joins: pmk (~user@2a02:587:9418:a234:40de:ca53:4e3:4a70)
[09:50:52] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[09:51:59] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[09:54:25] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[09:55:02] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[09:55:51] *** Joins: _xor (~xor@72.49.199.147)
[09:56:23] *** Joins: michalz (~michalz@185.246.204.77)
[09:56:50] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[09:57:11] *** Joins: _xor (~xor@72.49.199.147)
[09:58:37] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:04:15] *** Quits: p3n (~p3n@2a00:19a0:3:7c:0:d9c6:7cf6:1) (Quit: ZNC 1.8.2 - https://znc.in)
[10:06:22] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[10:08:49] *** Joins: p3n (~p3n@217.198.124.246)
[10:14:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:14:52] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[10:18:11] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[10:18:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[10:19:28] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[10:20:57] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[10:21:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:22:05] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 265 seconds)
[10:22:40] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[10:26:28] *** Joins: fendor (~fendor@77.119.169.61.wireless.dyn.drei.com)
[10:27:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[10:29:04] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:62eb:f958:5dc3:c1b9)
[10:29:48] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[10:36:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[10:42:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:42:53] *** Quits: fendor (~fendor@77.119.169.61.wireless.dyn.drei.com) (Remote host closed the connection)
[10:43:29] *** Joins: ubert (~Thunderbi@178.115.56.221.wireless.dyn.drei.com)
[10:48:40] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[10:49:03] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[10:49:29] *** Joins: Guest4852 (~Guest48@82.40.121.143)
[10:51:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[10:51:05] <jollygood2> hi. what hash table should I use? I have perfect hash, several tens of thousands of elements, and look up will be used in a very tight loop
[10:51:32] <jollygood2> I don't need mutability
[10:51:34] *** Joins: ub (~Thunderbi@178.115.56.221.wireless.dyn.drei.com)
[10:53:53] *** Joins: nschoe (~quassel@178.251.84.79)
[10:54:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[10:54:35] *** Quits: nschoe (~quassel@178.251.84.79) (Client Quit)
[10:58:54] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:00:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:00:29] *** Quits: Cajun (~Cajun@user/cajun) (Ping timeout: 256 seconds)
[11:01:48] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:6134:7ceb:5f94:e843)
[11:02:06] <Guest4852> Why does `f :: Either Bool Void -> Char; f (Left True) = 'T'; f (Left False) = 'F'` give a non-exhaustive pattern match error? It covers every possible pattern.
[11:03:53] <Inst_> so
[11:04:09] *** Joins: chele (~chele@user/chele)
[11:09:06] <pavonia> Guest4852: What about Right?
[11:10:14] <Guest4852> Right what? There's nothing that can be inside it.
[11:10:30] <pavonia> Right undefined
[11:11:19] <Guest4852> Oh. Good point.
[11:14:10] <lortabac> Guest4852: that's what 'absurd' is for
[11:14:31] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 252 seconds)
[11:14:41] <lortabac> f (Right x) = absurd x
[11:15:23] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[11:17:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:20:57] <Guest4852> I was hoping to avoid the extra code. But I guess I can't. Thanks.
[11:21:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 258 seconds)
[11:25:08] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:39a4:166a:24e9:f255) (Remote host closed the connection)
[11:26:14] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:27:23] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:30:42] *** edwtjo_ is now known as edwtjo
[11:34:52] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 252 seconds)
[11:35:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:13] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:38:33] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad)
[11:39:06] *** Joins: kuribas (~user@ptr-25vy0i72e2u2h548zvl.18120a2.ip6.access.telenet.be)
[11:39:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:41:02] *** Joins: mei6 (~mei@user/mei)
[11:43:35] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad) (Remote host closed the connection)
[11:44:35] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:44:39] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[11:44:53] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad)
[11:47:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:48:08] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:48:14] *** Joins: stengah (~stengah@user/stengah)
[11:49:31] *** Joins: ubert1 (~Thunderbi@91.141.50.28.wireless.dyn.drei.com)
[11:49:32] *** Joins: ub1 (~Thunderbi@91.141.50.28.wireless.dyn.drei.com)
[11:49:35] *** Quits: ub (~Thunderbi@178.115.56.221.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[11:49:35] *** Quits: ubert (~Thunderbi@178.115.56.221.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[11:49:35] *** ub1 is now known as ubert
[11:49:40] *** Quits: Guest4852 (~Guest48@82.40.121.143) (Quit: Client closed)
[11:50:34] <fgaz> I have a question about laziness
[11:50:34] <fgaz> suppose there is a `data MapWrap a b = MapWrap !(Map a b)`
[11:50:36] <fgaz> and I'm using the strict Map interface
[11:50:40] <fgaz> and I define `f x (MapWrap m) = insert x m`
[11:50:44] <fgaz> am I right that it doesn't make a difference whether i bang x or not, since it will be evaluated anyway due to the fact that MapWrap's field is strict and so is insert?
[11:51:03] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[11:52:00] <fgaz> s/x/k v/
[11:58:05] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[11:59:29] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[12:00:38] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[12:01:17] *** Joins: zaquest (~notzaques@5.128.210.178)
[12:03:04] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad) (Remote host closed the connection)
[12:04:10] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:06:40] *** Joins: pavonia (~user@user/siracusa)
[12:07:35] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 264 seconds)
[12:10:49] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:13:24] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[12:16:58] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:17:10] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:20:39] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[12:25:30] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb87055cde397d58ef4b.dip0.t-ipconnect.de)
[12:25:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[12:26:28] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:27:41] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[12:29:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 245 seconds)
[12:32:04] <tomsmeding> fgaz: if s/i bang x/i bang v/ then yes; the k is always evaluated anyway because otherwise map doesn't know where to insert it
[12:32:21] <tomsmeding> also you should return MapWrap (insert k v m), not just 'insert k v m' ;)
[12:33:13] <tomsmeding> with regards to strict/lazy map, be aware that while the functions in Data.Map.Strict ensure evaluation of the inserted values, the Map type is the same and hence the instances (in particular Functor) are lazy
[12:34:14] *** Quits: Inst_ (~Inst@2601:6c4:4080:3f80:6134:7ceb:5f94:e843) (Read error: Connection reset by peer)
[12:34:33] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:6134:7ceb:5f94:e843)
[12:38:48] <fgaz> yeah there's a big warning at the top of the module
[12:39:47] <fgaz> i wonder if there are plans to fix that
[12:39:58] <fgaz> thanks tomsmeding 
[12:40:05] <fgaz> <tomsmeding> "also you should return MapWrap..." <- yes, that's what i meant :)
[12:41:08] <tomsmeding> fgaz: https://github.com/haskell/containers/issues/74
[12:42:51] <fgaz> i see.. edward does have a point
[12:43:46] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb87055cde397d58ef4b.dip0.t-ipconnect.de)
[12:47:08] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb87055cde397d58ef4b.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[12:51:15] *** Quits: stengah (~stengah@user/stengah) (Quit: stengah)
[12:51:52] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:52:09] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:54:48] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[12:57:57] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[12:58:40] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:03:00] *** Joins: __monty__ (~toonn@user/toonn)
[13:06:16] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[13:07:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[13:12:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[13:22:25] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[13:23:22] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[13:30:26] <dminuoso> Im looking for some toolkits to derive some interrogative console interfaces from. wizards seems like a good starter, is there something similar that allows for tab completion as well?
[13:31:46] *** Joins: sayola (~vekto@dslb-002-201-085-156.002.201.pools.vodafone-ip.de)
[13:31:56] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[13:40:40] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[13:40:59] <ncopa> hi. I'm trying to upgrade ghc to 9.0.1 for alpine, but I am struggling with updating cabal-install. I have burned too many days on this already and this is blocking the alpine 3.15 release. My question is: does it really make sense to ship cabal and haskell with a distro in the first place?
[13:41:12] <ncopa> or would it be ok to remove those packages
[13:45:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 264 seconds)
[13:48:22] *** aplainze1akind is now known as aplainzetakind
[13:50:21] <dminuoso> Mmm, maybe haskeline is waht I want
[14:00:16] <Hecate> dminuoso: seems like it yeah
[14:01:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:02:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:07:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:07:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:10:24] <dminuoso> Ohh hah, wizards and haskeline seem to go together.
[14:13:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[14:13:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:15:51] *** Joins: rkrishnan (~user@2402:e280:215c:2cd:1c4a:bf17:a651:381c)
[14:16:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[14:17:03] *** Joins: stengah (~stengah@user/stengah)
[14:17:11] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[14:17:28] <stengah> hey! so I'm trying to understand monads
[14:17:35] <stengah> and just had a thought
[14:17:44] <stengah> (>>=
[14:17:53] <stengah> >>=
[14:18:06] <stengah> is like a continuation 
[14:18:23] <stengah> is there anything wrong with this thinking?
[14:18:45] <dminuoso> stengah: For the specific IO instance that seems like one possible approach.
[14:19:05] <Franciman> stengah: I also like to think about it as Â«effectful letÂ»
[14:19:13] <dminuoso> stengah: The thing is, Monad doesnt have an instrinsitic meaning where you can phrase: (>>=) is <insert something>
[14:19:13] <Franciman> it binds a variable to the result of an effectufl operation
[14:19:23] <Franciman> it's like you did:
[14:19:35] <Franciman> Â«letÂ» x = action 
[14:19:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:19:38] <dminuoso> stengah: All explanations you likely see are just from people who have built up an intuition that is developed by practicing many instances.
[14:19:40] <Franciman> in f x
[14:19:42] <stengah> a>>=f means after getting a do something (described by f)
[14:19:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:20:15] <dminuoso> stengah: For IO this is a rough (inaccurate) description, but it should work as an initial step.
[14:20:38] <stengah> ok
[14:20:46] <dminuoso> stengah: The key thing to realize is that Monad is just a typeclass/interface, so >>= means different things for different instances.
[14:20:52] <dminuoso> But that's perfectly okay
[14:21:05] <dminuoso> stengah: So let me rephrase your statement a little bit:
[14:21:14] <dminuoso> >>= for IO is (sort of) like a continuation
[14:21:21] <dminuoso> The key addition is "for IO"
[14:21:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[14:21:56] <dminuoso> Go with that mind model until you encounter a different instance. At that point, you can gain some intution what >>= means for that type.
[14:22:08] <kuribas> there's a interesting link between monads and continations.
[14:22:16] <dminuoso> Yeah which is probably not helpful.
[14:22:40] <kuribas> well, a monad is not a continuation, if that is what you mean.
[14:22:42] <dminuoso> stengah: And you repeat that process, and without extra effort you will overtime begin to understand what monad abstracts over. 
[14:22:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[14:22:54] <kuribas> but they are likely equally powerful.
[14:23:39] <stengah> so I should just look at many instances of monad in the wild
[14:23:50] <kuribas> stengah: yes
[14:24:02] <dminuoso> stengah: Personally Id say no.
[14:24:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[14:24:08] <dminuoso> stengah: Let this occur on its own.
[14:24:20] <dminuoso> Forcibly understanding what Monad is about is not particularly helpful when learning Haskell.
[14:24:32] <dminuoso> So if you understand what >>= does for IO, that's great. Keep it at that.
[14:24:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[14:24:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:25:00] <dminuoso> Then later, you might discover that there is Monad Maybe, so >>= has some different behavior for that. So just explore it then
[14:25:24] <dminuoso> Because really, almost every instance is ridiculously simple to understand
[14:25:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:25:38] * stengah initiates path to monad enlightenment
[14:25:56] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[14:26:04] *** Quits: rkrishnan (~user@2402:e280:215c:2cd:1c4a:bf17:a651:381c) (Remote host closed the connection)
[14:26:47] <dminuoso> stengah: My key realization was, when something is written polymorphically over monad - that its its type signature mentions something like `Monad m => ...`, it just means *you* get to pick some arbitrary m as long as it has an instance Monad. So you can pick `m ~ IO`, for instance.
[14:27:05] <dminuoso> So you dont necessarily must understand what Monad is about, you just pick some type you like.
[14:27:20] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Client Quit)
[14:27:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[14:27:34] <stengah> hmmm
[14:27:56] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[14:28:41] <dminuoso> So for `IO` it's a very natural thing to want and sequence two actions in such a way, that one depends on the other. So for example you want to fetch some data from a database, and use the result to do something else.
[14:29:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:29:05] <dminuoso> We could have simply made a function called `then :: IO a -> (a -> IO b) -> IO b` that does this.
[14:29:24] <dminuoso> And in all likelihood, if users got presented with `then` it would have just taken you 2 minutes to understand what this is and how to use it
[14:29:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[14:30:04] <dminuoso> There's nothing magical about this, nothing mathematical, nothing overly complicated.
[14:30:51] *** Joins: alx741 (~alx741@186.178.108.68)
[14:30:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:30:59] <dminuoso> And in fact:
[14:31:12] <dminuoso> We put it into a typeclass called Monad, and `then` is just named (>>=)
[14:31:16] <dminuoso> % :t (>>=)
[14:31:17] <yahb> dminuoso: Monad m => m a -> (a -> m b) -> m b
[14:31:44] <lortabac> this function exists, it's just not in Prelude
[14:31:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:31:58] <dminuoso> stengah: ^- recall what I said above? If it mentions `Monad m => ...` it means *you* get to decide what `m` is, as long as there is an `instance Monad m`, and then this does whatever the implementor wrote for that.
[14:32:09] *** Quits: nehsou^ (~nehsou@70.166.66.234) (Remote host closed the connection)
[14:32:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 264 seconds)
[14:32:17] <dminuoso> So if you pick IO, it becomes this boring and simple `then`
[14:32:21] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[14:32:37] *** Joins: rkrishnan (~user@2402:e280:215c:2cd:1c4a:bf17:a651:381c)
[14:32:59] <lortabac> in GHC.Base there are bindIO, thenIO and returnIO
[14:33:10] <dminuoso> lortabac: Ah interesting. :)
[14:33:20] <dminuoso> % import GHC.Base
[14:33:21] <yahb> dminuoso: 
[14:33:22] <dminuoso> % :t thenIO
[14:33:22] <yahb> dminuoso: IO a -> IO b -> IO b
[14:33:26] <dminuoso> % :t bindIO
[14:33:26] <yahb> dminuoso: IO a -> (a -> IO b) -> IO b
[14:34:53] <dminuoso> lortabac: Maybe this whole Monad confusion would have never happened, it you'd start with these primitives and properly educate about adhoc polymorphism - and after that simply say that `instance Monad IO where (>>=) = bindIO; return = returnIO`
[14:34:55] <stengah> nice
[14:35:14] * dminuoso wonders
[14:35:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[14:35:38] <c_wraith> it's really hard to make people stop believing there's a deep meaning they don't understand
[14:35:52] <lortabac> dminuoso: personally I would have exposed these functions in Prelude
[14:36:11] *** Joins: Cajun (~Cajun@user/cajun)
[14:36:12] <lortabac> no need to use Monad until you need to generalize over all monads
[14:36:24] <dminuoso> Indeed!
[14:36:36] <dminuoso> Could have had mapMaybe, concatMap, bindIO
[14:36:37] <lortabac> maybe it's for the do notation
[14:36:55] <dminuoso> lortabac: there's a pretty nifty formatting where you can avoid the do notation
[14:36:56] <lortabac> you can't have do notation with the monomorphic functions
[14:37:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:37:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:37:55] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:37:56] <dminuoso> lortabac: https://gist.github.com/dminuoso/16bd907d520325722cfcf1f148395814
[14:37:57] <dminuoso> This gets close
[14:38:09] <dminuoso> So as long as you use a dedicated monomorphized operator variant of bindIO and thenIO...
[14:38:47] <lortabac> nice, but I have to say it's less readable than do notation
[14:39:03] <dminuoso> Which could be a good motivation to introduce do-notation later on.
[14:39:15] <lortabac> yes
[14:39:40] <dminuoso> And actually, you can use do-notation with RebindableSyntax.
[14:39:41] <dminuoso> :p
[14:39:56] <lortabac> also (not useful for beginners) IO itself is exposed in GHC.Types
[14:41:37] <dminuoso> c_wraith: I guess so. Urban myths are particularly hard to get rid of.
[14:42:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[14:42:27] <c_wraith> it's sort of like believing in a programming illuminati.  They're the ones holding the true secret meaning of "monad"
[14:42:33] <lortabac> in one occasion it allowed me to recreate a custom "bind" function that works with my own types
[14:43:08] <lortabac> that's a rare use case, but it's just to show that IO is not as special as you might think initially
[14:43:59] <stengah> dminuoso: I'll meditate on what you said.
[14:44:01] <stengah> ty
[14:44:40] *** Joins: mbuf (~Shakthi@27.58.140.141)
[14:44:53] *** Joins: hiruji` (~hiruji@2606:6080:1002:8:3285:30e:de43:8809)
[14:45:58] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 258 seconds)
[14:49:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[14:49:31] <jneira[m]> <ncopa> "hi. I'm trying to upgrade ghc to..." <- well several linux distros does it, but it is not a good argument ;-)
[14:50:05] <jneira[m]> otoh we also have ghcup nowadays and it is usually recommended to install the haskell toolchain
[14:50:43] <jneira[m]> do you have some stats of its actual real use?
[14:50:51] <ncopa> thats why i ask, since the recommended way is normally not to use the distro package
[14:51:14] <ncopa> well, we have at least two relatively important packages using it: shellcheck and pandoc
[14:51:36] <ncopa> unfortunately we have only ghc for x86_64 and it is a pain to bootstrap for new architectures
[14:52:35] <ncopa> we use shellcheck for our CI, and i dont think we want install shellcheck with ghcup
[14:52:55] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[14:53:13] <ncopa> so i guess i will have to spend another few days to fix the ghc distro package
[14:53:55] <jneira[m]> hmm you did mention cabal before
[14:54:57] <dminuoso> lortabac: Yeah what can go wrong with poking in the internals of IO. See top comment https://web.archive.org/web/20200111052206/https://www.reddit.com/r/haskell/comments/2cbgpz/flee_traveller_flee_or_you_will_be_corrupted_and/
[14:54:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 264 seconds)
[14:55:21] <jneira[m]> you could open an issue in the cabal repo about, are you using https://github.com/haskell/cabal/tree/master/bootstrap?
[14:57:08] <merijn> ncopa: You can just install the bindists directly?
[14:57:16] <merijn> ncopa: That's what I've been doing for years
[14:57:58] <merijn> otoh, that's basically what ghcup does for you :p
[14:58:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:59:16] <lortabac> dminuoso: haha, I swear that in that particular case it was safe (and I didn't have any other option)
[15:01:46] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 260 seconds)
[15:02:55] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[15:06:42] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[15:06:47] <dminuoso> lortabac: The times I thought "Oh now this unsafePerformIO is really safe", and got bitten back mysterious ways... :p
[15:06:58] <lortabac> :D
[15:07:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[15:07:22] <unit73e> yeah I haven't used xmonad for a while. Maybe I should get back since I know haskell a lot more now. I'm using i3wm instead.
[15:07:51] <unit73e> xmonad is more configurable
[15:07:56] <merijn> I mean
[15:08:05] <merijn> The real insight is that xmonad isn't a window manager
[15:08:16] <merijn> It's a library/DSL for writing custom window managers :p
[15:08:24] <dminuoso> That's not really correct
[15:08:33] <dminuoso> xmonad comes with plenty defaults that make it a proper window manager
[15:08:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:09:17] <unit73e> I still get what merijn meant. it's just vim/emacs aren't editors, they're DSL for writing custom editors
[15:09:24] <unit73e> but both are editors
[15:09:34] <merijn> tbh, I kinda disagree on vim, there, tbh
[15:09:51] <unit73e> there was that haskell one
[15:09:56] <dminuoso> In case of emacs its sort of wrong too.
[15:10:16] <unit73e> both are sort of wrong but I think you get the point
[15:10:21] <dminuoso> The C core is essentially a buffer framework, but emacs comes with plenty of elisp making it an editor out of the box.
[15:11:03] <unit73e> it was this guy here: https://yi-editor.github.io/
[15:11:08] <dminuoso> And Id consider the elisp code to be part of emacs.
[15:11:14] <unit73e> looks dead
[15:11:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[15:11:48] <geekosaur> yeh, every so often someoine picks it up, hacks on it for a few months, and gives up
[15:12:15] <unit73e> hum, it looked like a nice project
[15:12:25] <geekosaur> mostly because everyone who tries wants to turn it into a full-fledged IDE instead of just an editor. it's already pretty usable just as an editor
[15:12:42] <merijn> Custom editors are like people's "dream game"
[15:12:52] <merijn> More fun in theory than in practice :p
[15:13:01] <unit73e> doesn't language server solve that problem?
[15:13:03] *** Joins: hyiltiz (~quassel@31.220.5.250)
[15:13:06] <unit73e> of being an "IDE"
[15:13:07] <dminuoso> lortabac: My favourite was using `D { ..., someRef = unsafePerformIO (newIORef Nothing) }` inside a traversal. Turns out that GHC let-floated this ioref out, aliasing some hundred thousand IORefs in a tree to a single shared mutable buffer.
[15:13:15] <dminuoso> It looked so innocent...
[15:13:17] <geekosaur> sure, but HLS onlyt sprang into existence a year ago
[15:13:49] <unit73e> right. well yi just has to support that. language server is one of the few things microsoft did right lol
[15:15:02] <unit73e> vscode is kind of cheesy though
[15:15:16] <unit73e> it's okayish but kind of quirky
[15:15:45] <unit73e> I just use neovim
[15:17:35] <Cajun> in what way is vscode kinda quirky? it feels pretty solid, and its much easier to tell someone new to the language to use vscode than vim, especially when they are accustomed to IDEs 
[15:17:48] <ncopa> merijn: i guess I can install the bindists directly, but that cannot be used as dependencies for any other alpine packages
[15:17:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:18:14] <ncopa> basically, what i wonder is if i can remove the ghc package and cabal package and let the users use the bindists directly
[15:18:20] <merijn> ncopa: True, but why would GHC be a dependency of a package you build?
[15:18:36] <merijn> ncopa: Bindists don't come with cabal, but other than that, yes
[15:18:52] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252) (Read error: Connection reset by peer)
[15:19:10] <ncopa> so i dont need ghc to build shellcheck or pandoc?
[15:19:31] <merijn> ncopa: I work a lot on university/research cluster machines where I can't use the distro package manager ('cause no root) and just dumping the bindist in my homedir is fine
[15:19:43] <merijn> ncopa: You need it to build those, but not to *use* them
[15:20:07] <merijn> ncopa: Unless you're saying alpine packages require installing build dependencies of packages to use those packages?
[15:21:09] <ncopa> well, alpine normally build the binaries from source and provides the binaries as distro packages so distro package manager can use the as dependencies for other distro packages
[15:21:49] <merijn> ncopa: Right, but the shellcheck/pandoc binaries don't need GHC or cabal installed
[15:21:55] *** Joins: ubert2 (~Thunderbi@91.141.50.28.wireless.dyn.drei.com)
[15:22:07] <ncopa> correct. not when they are built
[15:22:28] <unit73e> Cajun, it's definitely easier to begin but I got into a lot of weirdness I can't really remember right now
[15:22:38] <ncopa> how do i install the shellcheck precompiled binary on alpine?
[15:22:43] <unit73e> one had to do with git features
[15:23:10] <unit73e> still, better than the other GUI only editors
[15:23:22] <unit73e> imo
[15:23:32] *** Quits: ubert1 (~Thunderbi@91.141.50.28.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[15:23:39] *** Quits: phma (~phma@host-67-44-208-9.hnremote.net) (Read error: Connection reset by peer)
[15:24:39] *** Joins: phma (~phma@host-67-44-209-75.hnremote.net)
[15:25:47] <ncopa> ok the precompiled binary actually works. https://github.com/koalaman/shellcheck/releases
[15:25:59] <ncopa> maybe i can kick ghc out of alpine after all
[15:29:17] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[15:29:54] <merijn> ncopa: I mean, GHC uses static linking (for haskell libraries, anwyay) by default. So if you don't have crazy external dependencies the only thing most Haskell binaries depend on is libc
[15:31:10] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[15:32:12] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[15:32:18] *** Joins: amk (~amk@109.255.169.126)
[15:33:02] <ncopa> alpine linux uses musl libc so normally a rebuild is needed for precompiled things that links to libc.so.6
[15:33:34] <merijn> ncopa: Yes, but if the binary is built on alpine it will just statically link musl
[15:33:51] <merijn> (or dynamically, dunno what the default is)
[15:34:00] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[15:34:16] <ncopa> hum... this is very tempting
[15:34:38] <ncopa> im pretty sure i will get a handful angry users if i remove ghc package
[15:34:56] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[15:35:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[15:35:23] <ncopa> but i'll just point them to the "recommended" way to install and manage and keep the haskell stuff up dated
[15:35:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:35:43] <ncopa> would simplify things
[15:36:10] <merijn> ncopa: Basically, I feel that if installing, say, vim doesn't pull in gcc/clang on a distro, then shellcheck/pandoc shouldn't pull in GHC
[15:36:23] <ncopa> oh ofcourse not
[15:36:36] <ncopa> apk add vim does of course not install gcc
[15:36:44] <ncopa> and apk add shellcheck does not pull in ghc
[15:36:54] <ncopa> the problem is that we need those at build time
[15:37:14] *** Joins: alzgh (~alzgh@user/alzgh)
[15:37:14] <ncopa> we cannot provide andy vim package without having a gcc compiler. nore can we build any kernel or anything else
[15:38:06] <ncopa> what im saying is that we need a ghc package to be able to build other packages that are written in haskell
[15:39:11] <ncopa> but if we can say: alpine does not use haskell (no shellcheck, no pandoc etc) then we can remove ghc package
[15:39:57] <ncopa> but that also means that we cannot provide any packages for anything in the (build time) dependency chain
[15:41:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:43:11] <merijn> Does the alpine package infrastructure not support separate build and runtime dependencies?
[15:43:13] *** Quits: mei6 (~mei@user/mei) (Read error: Connection reset by peer)
[15:43:24] <ncopa> nope
[15:43:34] <merijn> Well, RIP
[15:43:43] <ncopa> alpine is very small and simple
[15:43:58] <ncopa> well
[15:44:00] <ncopa> sorry
[15:44:11] <ncopa> it does support separate build and runtime deps. i misread
[15:49:35] *** Joins: Guest|27 (~Guest|27@185.207.140.160)
[15:50:11] *** Quits: Guest|27 (~Guest|27@185.207.140.160) (Client Quit)
[15:50:22] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 258 seconds)
[15:51:58] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[15:56:26] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[15:59:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[16:01:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:05:56] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:06:14] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:06:24] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[16:09:33] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[16:10:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[16:11:40] *** Joins: Farzad (~FarzadBek@178.131.28.133)
[16:11:58] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:12:23] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[16:13:39] <janus> how do people feel about replacing 'Nothing -> pure Nothing' branches with foldMapM? I think that should be possible but i wonder why that isn't a base function
[16:15:44] <janus> and why isn't there a flipped version of it so that i can use it like 'whenJust' ?
[16:16:04] <merijn> What's whenJust?
[16:16:11] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[16:16:22] <janus> merijn: https://hackage.haskell.org/package/extra-1.7.10/docs/Control-Monad-Extra.html#v:whenJust
[16:16:25] <merijn> Isn't that just for/for_
[16:16:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[16:16:41] <merijn> Yeah, that's just for_ :p
[16:16:43] <merijn> :t for_
[16:16:44] <lambdabot> (Foldable t, Applicative f) => t a -> (a -> f b) -> f ()
[16:16:46] <merijn> :t forM_
[16:16:47] <lambdabot> (Foldable t, Monad m) => t a -> (a -> m b) -> m ()
[16:16:59] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[16:17:16] <janus> aaah cool! thank you so much! i should ask relude devs to point that out, hmm
[16:18:08] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[16:19:00] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[16:20:53] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[16:21:36] *** Joins: zebrag (~chris@user/zebrag)
[16:21:44] <janus> i'll try to ask neil mitchell to point that out in the whenJust docs
[16:23:30] *** Joins: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net)
[16:23:36] <janus> how do i reference Data.Foldable.for in haddock syntax?
[16:23:45] <sshine> 'Data.Foldable.for' ?
[16:24:37] <janus> sshine: aah ok right, according to section 3.8.7 https://www.haskell.org/haddock/doc/html/ch03s08.html
[16:25:00] <sshine> yup :)
[16:25:18] <sshine> not sure how that works across package boundaries.
[16:26:05] <merijn> sshine: It does, if the module is imported/in scope
[16:26:08] <sshine> it probably needs to be present when generating the haddock.
[16:26:25] <sshine> yeah, I was gonna say "in scope", but not in the sense that it needs to be imported in the particular file. right?
[16:26:32] *** Quits: uGest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[16:26:39] <geekosaur> doesn't need to be imported, just known
[16:27:26] <sshine> it is known, Khaleesi.
[16:27:38] *** Quits: stengah (~stengah@user/stengah) (Ping timeout: 260 seconds)
[16:27:38] <geekosaur> I think you can point a haddock run to other haddock metadata to use for such references
[16:28:38] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252)
[16:28:46] *** Joins: jespada (~jespada@2803:9800:9842:7a62:5d33:6404:2aef:9813)
[16:28:58] *** Joins: Guest372 (~xxx@47.245.54.240)
[16:29:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[16:29:50] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252) (Remote host closed the connection)
[16:33:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 252 seconds)
[16:35:00] *** Joins: xiongxin (~quassel@113.116.34.23)
[16:41:07] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:62eb:f958:5dc3:c1b9) (Quit: WeeChat 2.8)
[16:43:24] *** Joins: slack1256 (~slack1256@45.4.2.52)
[16:43:45] *** Joins: max22- (~maxime@2a01cb08833598001d1f311113516d41.ipv6.abo.wanadoo.fr)
[16:48:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:00:30] *** Quits: max22- (~maxime@2a01cb08833598001d1f311113516d41.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[17:00:56] *** Joins: stengah (~stengah@user/stengah)
[17:12:52] <ph88> what type should i make to use blaze-html with State monad ?
[17:12:59] <ph88> https://hackage.haskell.org/package/blaze-html-0.9.1.2
[17:16:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:16:50] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:21:05] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:21:59] *** Joins: max22- (~maxime@2a01cb0883359800342ef13833bd6f3b.ipv6.abo.wanadoo.fr)
[17:22:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:22:05] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:22:05] *** Joins: wroathe (~wroathe@user/wroathe)
[17:27:58] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb87055cde397d58ef4b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:28:10] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[17:29:07] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[17:31:47] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[17:35:33] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[17:35:43] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Remote host closed the connection)
[17:37:44] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[17:37:44] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[17:41:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[17:42:11] *** Quits: xff0x (~xff0x@2001:1a81:5338:8400:6a8d:1ab1:8641:5267) (Ping timeout: 245 seconds)
[17:42:35] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[17:43:50] *** Quits: stengah (~stengah@user/stengah) (Quit: stengah)
[17:45:05] *** Joins: Guest|60 (~Guest|60@ip-95-223-74-231.hsi16.unitymediagroup.de)
[17:45:35] *** Quits: Guest|60 (~Guest|60@ip-95-223-74-231.hsi16.unitymediagroup.de) (Client Quit)
[17:45:54] <ph88> i forgot how to work with two monads at the same time and when to use lift, is there a good tutorial for it ?
[17:46:08] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[17:52:52] *** Joins: xff0x (~xff0x@2001:1a81:5338:8400:6a8d:1ab1:8641:5267)
[17:53:14] <Hecate> ph88: book of monads I think
[17:55:55] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[17:58:01] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[17:58:19] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[18:11:23] *** Joins: o1lo01ol1o (~o1lo01ol1@bl13-86-242.dsl.telepac.pt)
[18:11:37] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[18:12:11] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[18:12:30] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Excess Flood)
[18:12:48] *** Joins: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it)
[18:14:02] *** Quits: xiongxin (~quassel@113.116.34.23) (Ping timeout: 260 seconds)
[18:14:12] *** Joins: xiongxin_ (~quassel@113.116.35.81)
[18:14:57] *** Quits: ASSISTENZA (~Username@net-47-53-74-164.cust.vodafonedsl.it) (Client Quit)
[18:15:52] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[18:16:02] *** Quits: ubert (~Thunderbi@91.141.50.28.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[18:16:48] *** Quits: o1lo01ol1o (~o1lo01ol1@bl13-86-242.dsl.telepac.pt) (Ping timeout: 258 seconds)
[18:18:14] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:62eb:f958:5dc3:c1b9)
[18:18:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[18:20:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[18:21:28] *** Quits: Farzad (~FarzadBek@178.131.28.133) (Quit: Leaving)
[18:21:40] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad)
[18:26:46] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad) (Ping timeout: 258 seconds)
[18:28:31] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad)
[18:29:01] *** Joins: wonko (~wjc@62.115.229.50)
[18:29:55] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:30:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[18:34:37] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Client Quit)
[18:35:37] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[18:35:47] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 264 seconds)
[18:37:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[18:38:19] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:39:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:39:40] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:39:42] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:39:49] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[18:46:29] *** Joins: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net)
[18:47:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[18:48:10] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:62eb:f958:5dc3:c1b9) (Quit: WeeChat 2.8)
[18:49:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[18:49:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[18:54:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[18:56:49] *** Joins: meltedbrain_y2k (~tekserf@94.73.36.197)
[19:02:30] *** Joins: jstolarek (~jstolarek@137.220.120.162)
[19:03:34] *** Quits: xiongxin_ (~quassel@113.116.35.81) (Ping timeout: 258 seconds)
[19:03:42] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[19:04:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[19:04:31] <sshine> ph88, you mean nested?
[19:05:10] <sshine> ph88, https://www.fpcomplete.com/haskell/tutorial/monad-transformers/
[19:06:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:06:54] <sshine> I wonder how many kittens god kills when someone writes a tutorial about transformers in particular.
[19:08:04] <monochrom> I thought there has been too many blogs on that.
[19:08:33] <monochrom> typeclassopedia has monad transformers
[19:09:08] <maerwald> and it's a rather disappointing design pattern, is it not?
[19:09:41] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Quit: k60)
[19:09:55] <monochrom> Yesterday I found a MuniHac 2020 talk explaining monad transformers too (and then it goes on to free monads and polysemy, basically exploring your options).
[19:10:12] <monochrom> I don't find it disappointing.
[19:11:07] <monochrom> I teach my students String -> Maybe (String, a) as a parser monad, but secretly it's a transformed monad, too.
[19:11:15] <maerwald> Well, I don't miss them in any other language :p
[19:11:19] <monochrom> StateT String Maybe
[19:11:27] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[19:12:13] <maerwald> exactly, state, reader etc are so easy to express without it
[19:13:08] <maerwald> but given the ecosystem support, it's easier to just give in
[19:14:17] <monochrom> No. Writing >>= by hand for even String -> Maybe (String, a) gets old pretty quickly.
[19:14:55] <maerwald> it's our way to emulate OOP, because we want to hide the state object parameter
[19:15:00] <monochrom> And the code really cries "I am a transformed monad".
[19:15:57] <monochrom> Let me put it this way.
[19:16:11] <monochrom> I don't teach monad transformers to students.
[19:16:56] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:17:46] <monochrom> This allows me to give "challenging" assignments and exam questions that are like, "make this a monad: Bool -> Integer -> ([(a, Integer)], String)"
[19:18:51] <janus> monochrom: is it this one ? https://www.youtube.com/watch?v=XZxNp7wgA4Q&t=9m20s "MuniHac 2020 Workshop: Michael Sperber - Control your Effects"
[19:18:56] <monochrom> If only you knew monad transformers, those would be trivial, not challenging.
[19:19:04] <monochrom> Yeah!
[19:20:13] <monochrom> Also, I don't think OOP covers the Alternative-ness of my  String -> Maybe (String, a) parser monad.
[19:21:06] <monochrom> Only Haskell and Prolog come close to making choice a first-class thing.
[19:21:23] *** Quits: rkrishnan (~user@2402:e280:215c:2cd:1c4a:bf17:a651:381c) (Ping timeout: 264 seconds)
[19:21:26] <monochrom> I miss it in any other language.
[19:22:06] <monochrom> The reason you don't miss it in other languages is because you haven't tried to express algorithms in terms of choice.
[19:22:26] <monochrom> Sapir-Worf strikes once again.
[19:22:54] <monochrom> If your vocab does not have <|>, you will never miss it, sure.
[19:23:00] <maerwald> I've completed an entire computational geometry algorithms course in Haskell with zero monad transformers
[19:23:27] <ph88> do i need a monad transformer when i want to combine blaze-html and state ?
[19:23:29] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[19:23:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:24:21] <monochrom> I don't know about "need".  You can always try StateT X <which monad blaze-html dictates>".
[19:24:34] <monochrom> s/which/whichever/
[19:24:55] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[19:27:19] <ph88> hmm i read here:  It is worth noting that the Blaze builder overloads do-notation as some EDSLs do, but the Html type is not a monad. It is functionally a monoid. 
[19:27:23] *** Quits: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net) (Ping timeout: 264 seconds)
[19:27:26] <ph88> https://www.stephendiehl.com/posts/haskell_web.html 
[19:27:39] <ph88> i guess i can not use transformer when i don't have an inner monad
[19:28:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[19:29:30] <monochrom> Syntactically, you can say that you would complete my course with zero monad transformers, too.
[19:30:30] <monochrom> You can always handcode >>= for  String -> Maybe (String, a), and then again for  String -> Either Error (String, a), and then again for Bool -> Integer -> ([(a, Integer)], String).
[19:30:38] <monochrom> Is that supposed to be healthy?
[19:30:41] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:30:53] <maerwald> rust does fine with that
[19:31:08] <monochrom> But rust is not in my course.
[19:31:12] <maerwald> not massively more unergonomic
[19:31:30] *** Joins: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net)
[19:31:31] <maerwald> and the tooling works better, so that my code completion actually works :)
[19:32:00] <maerwald> of course you lack all the neat stuff you can do with monadic combinators
[19:32:02] <maerwald> but meh
[19:32:32] <maerwald> I get much more angry about languages that don't provide my with proper ADTs
[19:32:36] <monochrom> Well yeah I need <|>
[19:32:41] <kronicmage> maerwald: whats wrong with hls completion? it works beautifully for me
[19:32:48] <maerwald> kronicmage: not for me
[19:32:54] <maerwald> probably due to TH
[19:33:07] <maerwald> crashes a lot
[19:33:14] <kronicmage> :(
[19:33:26] <monochrom> which is not even a monadic combinator. It's an alternative combinator.
[19:33:26] <maerwald> not that I miss TH in any other language ;)
[19:33:52] <maerwald> TH is probably the least thought-through feature in Haskell
[19:34:07] <geekosaur> you give it too much credit
[19:34:19] * geekosaur doesn't think it was thought through at all
[19:34:55] <maerwald> also... do you really want access to the entire AST of the language? 
[19:35:00] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[19:35:05] <maerwald> and then, it's still not the actual AST
[19:35:09] <maerwald> confusing
[19:36:10] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 260 seconds)
[19:36:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[19:36:34] <gentauro> Does GHC run on the M1's?
[19:36:37] <gentauro> :)
[19:36:47] <ph88> my code type checks now using blaze-html and state https://bpa.st/4QHQ just that i had to give only 1 element on line 9 .. how can i go from a list of these [H.Html] pieces to one big one ? like roll-up as if i would have written it in do notation which each one on it's own line
[19:36:54] <maerwald> gentauro: yes
[19:36:56] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:37:16] <ph88> gentauro, would be cool if you can benchmark it
[19:37:33] <maerwald> monochrom: well, I did use <|>
[19:37:58] <maerwald> https://git.io/J6l6m
[19:38:41] <maerwald> but attoparsecs parser isn't really a monad transformer
[19:39:17] <gentauro> maerwald: nice
[19:39:42] <maerwald> I doubt I would have cared whether it's <|> or some other combinator 
[19:39:48] <gentauro> ph88: by week 44 I will be able to (the M1 MAX) :)
[19:40:25] <gentauro> ph88: somebody already ask me to benchmark `rust` x
[19:40:27] <gentauro> xD
[19:41:09] <monochrom> Sure, my Bool -> Integer -> ([(a, Integer)], String) montrosity is "not" a monad transformer either. Syntactically.
[19:41:13] <monochrom> Or is it?
[19:42:11] <monochrom> What does "is" mean?
[19:42:47] <maerwald> monad transformer to me means ">>= is so overloaded with meaning that you end up reasoning about code operationally"
[19:43:13] *** Quits: poljar (~poljar@93-139-113-226.adsl.net.t-com.hr) (Remote host closed the connection)
[19:43:36] *** Joins: poljar (~poljar@93-139-113-226.adsl.net.t-com.hr)
[19:43:37] <maerwald> and then it becomes intellectual complexity you carry around, unless you're fine with "it roughly does this"
[19:44:27] <maerwald> but when you get used to it, then it becomes fine too
[19:44:30] <maerwald> you train it, so...
[19:44:35] <maerwald> still doesn't make it a good thing
[19:45:27] <maerwald> but that's the difference between "I use it" and "I miss this in other languages"
[19:45:36] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[19:45:49] <monochrom> I am not sure that you, or anyone, ever do any better than "it roughly does this", in/for/with any language.
[19:45:53] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:46:09] <maerwald> there are levels of uncertainty
[19:46:33] <maerwald> ultimately, we're uncertain what our code does
[19:46:39] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:46:43] <maerwald> but that doesn't mean we have to throw away the nuances
[19:46:45] <gentauro> maerwald: I tend to use `>>=` as the pipe operator in bash: `someLogic >>= \ value -> fooBar value`
[19:46:54] <gentauro> I find it kind of readable
[19:47:07] <gentauro> if you are in a monadic context and you use a lot of line-spaces
[19:47:09] <gentauro> :)
[19:47:27] <maerwald> would we really use monads that much if we didn't have do-notation?
[19:47:30] <maerwald> Change my mind!
[19:47:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[19:47:47] <monochrom> I would. I already did.
[19:47:54] *** Joins: amk (~amk@109.255.169.126)
[19:48:06] <geekosaur> I use >>= directly a fair amount, if it's short enough
[19:48:20] <geekosaur> really I only use do because I hate long lines
[19:48:39] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:49:20] <maerwald> what I'm getting at is... is it really monads that we care about or a concise way to describe sequential effect computations? If there was a different way to write and do it, so what?
[19:49:28] *** Joins: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi)
[19:49:54] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[19:49:55] <monochrom> A concise way to describe effects.
[19:50:30] <monochrom> Indeed I have found a way to stick to Alternative in parsers.
[19:51:29] <geekosaur> if you're using monads just to use monads, you're doing something wrong
[19:51:31] <monochrom> That doesn't change the real point behind my stance of taking monad transforming as useful though.
[19:51:42] <monochrom> Because I'm just s/monad/alternative/
[19:51:48] <geekosaur> but monads do useful things beyond just sequencing effects
[19:52:07] <maerwald> monochrom: sure, but useful isn't elegant :p
[19:52:19] *** Quits: jstolarek (~jstolarek@137.220.120.162) (Quit: leaving)
[19:52:50] <maerwald> monads aren't burritos
[19:52:56] <maerwald> they are cows: useful, but not elegant
[19:53:26] <monochrom> Handwriting <*> and <|> for String -> [(a, String)] is the inelegant choice. And the missing-the-forest-for-the-trees choice.
[19:54:29] *** Joins: hyiltiz (~quassel@31.220.5.250)
[19:54:38] <monochrom> Recognizing that it is a certain composition of StateT and [], and using that knowledge to connect the <*> and <|> of State with the <*> and <|> of [], is better, and useful to know.
[19:54:46] <gentauro> I only used monads if I need to `take some decision` on the `outputted` value. Example: `fooBar >>= \ foo -> if foo then â€¦`. Otherwise I opt for `<$>` or `_ <$> â€¦ <*>`
[19:54:50] <monochrom> err
[19:54:59] <maerwald> I dunno, maybe we'll figure out a better way to express effects/computations one day
[19:55:12] <monochrom> using that knowledge to connect the <*> and <|> of String -> [(a, String)] to those of State and [].
[19:55:19] <gentauro> maerwald: I like monadic effects
[19:55:20] <maerwald> especially in light of combining them
[19:55:37] <monochrom> There will always be better ways in the future.
[19:55:52] <maerwald> and there I agree that algebraic effects seem saner, but also more intellectual complexity (polysemy and friends)
[19:56:04] <maerwald> to the point that no one really understands semantics anymore either
[19:56:31] <monochrom> For here and now, StateT String [] is the best known fit to my use case.
[19:56:33] <maerwald> I haven't made up my mind about verbosity
[19:56:52] <maerwald> I'm fine with verbose languages like rust and python... but damn they make my fingers hurt
[19:57:32] <monochrom> Indeed StateT String [] is less remotely-abstract than all the more advanced theories. Given that you are against remotely-abstract as a principle.
[19:58:48] <monochrom> StateT String [] is sufficiently concrete and sufficiently elegant for its purpose.
[19:59:12] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[19:59:19] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:59:28] <maerwald> the thing with concise expressions is... how sharp can you mentally isolate the underlying concept. Sometimes you can't, but there's a way to express it very concise regardless
[19:59:30] <maerwald> what to do?
[19:59:33] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Remote host closed the connection)
[19:59:45] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[20:00:32] <maerwald> while... once you got used to verbose code (and there are a couple of rules everyone follows), then reading verbose code can be very efficient
[20:00:55] <maerwald> (like not introducing new variables in the middle of a C function)
[20:01:10] <monochrom> I do that all the time. Bite me.
[20:01:49] <monochrom> I can be talked into "if you do that, add { } around its real scope" though.
[20:02:24] <monochrom> But I will refuse "there are only two levels, top and function". Because there aren't.
[20:02:26] <maerwald> ok, I'm off buying soap (need to clean myself after this conversation)
[20:02:28] <maerwald> :D
[20:03:02] <monochrom> There is nothing wrong with "for (int i = ...) { int s = 0; ... }"
[20:03:14] <maerwald> I think I'd allow that exception
[20:03:32] <maerwald> also, in rust it's a bit harder to follow this rule
[20:03:53] <maerwald> because of all the shenanigans you have to do to trick the borrow checker into thinking your code is safe
[20:04:34] <monochrom> The only thing you can complain about is if I have "x = 0; int y; ...", it is a bit harder to spot the introduction of y, and it's also a bit harder to spot the end of relevance of y.
[20:05:14] <monochrom> For the former, I have blank lines already. For the latter, that's why I offer "x = 0; { int y; ... } ..."
[20:05:34] <monochrom> That rule is stupid.
[20:06:02] <monochrom> I can take everything you said and say it about that rule, too.
[20:06:08] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[20:06:31] <maerwald[m]> That was just an example :D
[20:06:35] *** Joins: fendor (~fendor@77.119.169.61.wireless.dyn.drei.com)
[20:06:59] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 264 seconds)
[20:07:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:07:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[20:08:27] <maerwald[m]> My point was that expressing things, that you can't easily isolate mentally, in a concise way is an open question 
[20:08:41] <maerwald[m]> As to whether that's a good idea
[20:08:47] <maerwald[m]> I don't really know
[20:08:58] <monochrom> Oh sure, I balance many factors.
[20:09:23] <maerwald[m]> My mtl code usually ends up like that: a mess.
[20:09:34] <monochrom> Mine doesn't.
[20:09:46] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 260 seconds)
[20:09:54] <maerwald[m]> You look at the type signature and go "yeah right, whatever"
[20:10:54] <monochrom> I don't use MonadState all that much either, if that's what you mean.
[20:11:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 258 seconds)
[20:11:25] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[20:11:42] <maerwald[m]> MonadIO, MonadUnliftIO, MonadFail, MonadMask, MonadThrow, MonadMe...
[20:11:50] <monochrom> But I have "eof :: Parser ()" and Parser is either "newtype Parser a = P (String -> Maybe (String, a))" or "newtype Parser a = P (StateT String Maybe a)"
[20:12:02] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[20:12:36] <monochrom> And I would really love to use the latter in my course if I had time to teach StateT.
[20:13:15] <monochrom> Then again, if I did that, I would run out of assignment and exam questions.
[20:13:34] <monochrom> In the same sense as:
[20:13:43] <maerwald[m]> I forgot obscure LabelOptics
[20:15:12] <monochrom> Suppose a teacher concealed "x+y = y+x" from you. Then they would have a larger pool of homework questions for you, for example they could put both "34 + 57 = ?" and "57 + 34 = ?" on the same exam, even right next to each other.
[20:15:58] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[20:20:25] *** Joins: mastarija (~mastarija@31.217.25.149)
[20:20:40] <maerwald[m]> So does flexibility to add effects freely lead to better or worse design? And what about custom monad newtypes, like `App`? Are they really better? 
[20:20:48] <maerwald[m]> Questions 
[20:21:23] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[20:22:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:23:47] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[20:25:11] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[20:26:00] *** Quits: Vajb (~Vajb@n8vwdu04eps78g521-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[20:26:32] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:28:35] *** Quits: mbuf (~Shakthi@27.58.140.141) (Quit: Leaving)
[20:30:41] *** Joins: marinelli (~marinelli@gateway/tor-sasl/marinelli)
[20:31:34] *** Joins: mastarija_ (~mastarija@31.217.25.149)
[20:31:53] *** Quits: mastarija_ (~mastarija@31.217.25.149) (Client Quit)
[20:32:00] *** Quits: mastarija (~mastarija@31.217.25.149) (Quit: Leaving)
[20:32:18] *** Joins: emf (~emf@2620:10d:c090:400::5:c0de)
[20:33:27] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:33:47] *** Joins: alzgh (~alzgh@user/alzgh)
[20:38:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:38:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:42:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:43:19] *** Quits: xff0x (~xff0x@2001:1a81:5338:8400:6a8d:1ab1:8641:5267) (Ping timeout: 265 seconds)
[20:43:38] *** Joins: hyiltiz (~quassel@31.220.5.250)
[20:45:28] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:46:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[20:47:23] *** Joins: xff0x (~xff0x@2001:1a81:5338:8400:382c:44d1:e85b:95f9)
[20:53:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[20:53:33] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:56:07] *** Joins: fendor_ (~fendor@77.119.200.149.wireless.dyn.drei.com)
[20:56:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:57:14] *** Quits: ubert2 (~Thunderbi@91.141.50.28.wireless.dyn.drei.com) (Remote host closed the connection)
[20:57:14] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[20:58:18] *** Quits: fendor (~fendor@77.119.169.61.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[20:59:37] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: No route to host)
[21:00:05] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[21:01:51] *** Joins: mmhat (~mmh@55d45bcb.access.ecotel.net)
[21:05:17] *** _________ is now known as __________
[21:05:19] *** __________ is now known as noodly
[21:05:23] *** noodly is now known as _________
[21:11:50] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[21:11:56] *** Joins: fendor__ (~fendor@212095005159.public.telering.at)
[21:12:22] *** Quits: fendor_ (~fendor@77.119.200.149.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[21:13:45] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:16:26] *** Quits: kuribas (~user@ptr-25vy0i72e2u2h548zvl.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:20:09] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[21:21:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[21:25:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[21:26:33] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Ping timeout: 258 seconds)
[21:28:50] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[21:29:19] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[21:35:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[21:42:44] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[21:42:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:44:16] *** Joins: fendor_ (~fendor@178.115.49.60.wireless.dyn.drei.com)
[21:45:36] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:45:36] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[21:45:44] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[21:46:11] *** Joins: Null_A (~null_a@2601:645:8700:2290:30d6:67dd:64ca:a12a)
[21:46:50] *** Quits: fendor__ (~fendor@212095005159.public.telering.at) (Ping timeout: 260 seconds)
[21:50:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:30d6:67dd:64ca:a12a) (Ping timeout: 264 seconds)
[21:53:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:30d6:67dd:64ca:a12a)
[21:54:46] *** Quits: marinelli (~marinelli@gateway/tor-sasl/marinelli) (Quit: marinelli)
[21:55:11] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[21:55:59] *** Joins: ubert (~Thunderbi@91.141.50.28.wireless.dyn.drei.com)
[21:58:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[22:06:27] *** Joins: econo (uid147250@user/econo)
[22:07:16] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 265 seconds)
[22:08:43] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 258 seconds)
[22:23:45] <zzz> class Commutative (f :: a -> b -> c) where ?
[22:24:19] <monochrom> no understand
[22:24:37] <awpr> `swap :: f a b -> f b a` + law that `swap .  swap` is `id`?
[22:24:50] <awpr> although s/c/Type/ I think
[22:25:01] <[exa]> I vote for `commute`
[22:25:04] <zzz> it's not supposed to be understood. just writing nonsense
[22:25:26] <zzz> [exa]: commute (f a b) = f b a ?
[22:25:29] <awpr> although it can't have poly-kinds with different kinds for the two sides either
[22:25:38] <awpr> `f :: k -> k -> Type`
[22:25:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[22:27:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[22:27:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[22:28:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:32:22] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[22:33:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[22:34:35] *** Quits: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net) (Ping timeout: 264 seconds)
[22:38:56] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:dde2:6c49:6076:e5ad) (Remote host closed the connection)
[22:40:54] *** Joins: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net)
[22:41:24] <xerox> does anybody know how to find which branch/commit made up the ghc release 9.2.0.20210821 ?
[22:41:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[22:42:05] <geekosaur> you can query git log by date, that should at least narrow it down
[22:42:57] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[22:43:11] <geekosaur> the branch should be the 9.2 branch
[22:43:18] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 260 seconds)
[22:43:32] <xerox> the 9.2 branch does not build for me, 0.2 seconds into make I get this https://i.imgur.com/DJOMeiZ.png
[22:44:14] <geekosaur> that one you'll have to ask about in #ghc
[22:44:25] <xerox> but I guessed since that one built... :)
[22:44:44] <xerox> nothing comes up green with a search like this https://gitlab.haskell.org/ghc/ghc/-/tags?sort=updated_desc&search=9.2
[22:44:46] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[22:45:00] <xerox> nor on the branches
[22:45:28] <xerox> maerwald: how did you figure out that one in particular built, so you could add it to ghcup?
[22:46:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:49:04] *** Quits: Null_A (~null_a@2601:645:8700:2290:30d6:67dd:64ca:a12a) (Remote host closed the connection)
[22:50:41] *** Joins: hyiltiz (~quassel@31.220.5.250)
[22:52:25] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 258 seconds)
[22:53:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:57:51] *** amirouche is now known as amazigh
[23:06:43] <maerwald> what?
[23:07:41] <maerwald> https://downloads.haskell.org/~ghc/9.2.1-rc1/
[23:09:44] <xerox> ah that's what it is
[23:09:57] <maerwald> probably this https://gitlab.haskell.org/ghc/ghc/-/pipelines/33913
[23:10:06] <maerwald> go to the pipelines and click on tags
[23:10:11] <maerwald> https://gitlab.haskell.org/ghc/ghc/-/pipelines?scope=tags&page=1
[23:10:12] <xerox> maybe I'm asking for trouble using *that* to build another ghc
[23:10:33] <xerox> everything fails with that error about safe haskell
[23:11:05] <monochrom> Is that why 9.2 is stalled? That no one knows how to build it now? :)
[23:12:02] <xerox> using 8.10.7 seems to be liking at least starting to build master, yay
[23:12:25] <maerwald> xerox: you usually go one major version back
[23:12:29] <maerwald> for building
[23:13:00] <xerox> didn't know that!
[23:13:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:30d6:67dd:64ca:a12a)
[23:14:20] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3)
[23:14:21] <geekosaur> 1-2 versions currently accepted. using 9.2 to build 9.2 is I think known not to work
[23:14:30] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3) (Remote host closed the connection)
[23:14:31] <geekosaur> so 9.0.1 or 8.10.7
[23:14:38] <xerox> how peculiar
[23:15:02] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3)
[23:15:06] <xerox> does this mean you have to do a chain of compilations if you are stuck with having an old binary, or no binary (yuck!)
[23:15:28] <geekosaur> yes
[23:15:31] <xerox> wow
[23:16:00] <geekosaur> and I think there's no way to bootstrap from scratch any more because yoou need to find a working hbc binary to start the bootstrap chain
[23:16:37] <geekosaur> the alternative is -funregisterised which outputs ANSI C
[23:17:30] <geekosaur> and requires a custom built compiler to enable -funregisterised, since release compilers have it disabled
[23:17:43] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Quit: k60)
[23:17:50] <xerox> but can you build such custom comppiler
[23:18:00] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:19:14] <geekosaur> you'd start on a platform with a working ghc and use that to build a dev compiler that supports -funregisterised, then use that to build ghc again with -funregisterised, then collect the output sources and take them to the target machine
[23:19:20] <geekosaur> it's a royal pain
[23:19:25] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3) (Ping timeout: 252 seconds)
[23:20:11] <geekosaur> a newer way if LLVM is supported is compile with -fllvm -keep-llvm-files (I think that's the option) and run llc/opt/lld on the target
[23:20:37] <xerox> that seems nice
[23:20:40] <geekosaur> basically ghc is really not friendly to this kind of thing currently
[23:20:54] <geekosaur> there's supposedly some work going on to improve things a bit
[23:22:31] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[23:22:33] <geekosaur> but this general issue is a problem with any self-hosted compiler. I think you have to dig up some ancient gcc that could be built with non-gcc (1.40?) to bootstrap a current one from scratch
[23:23:18] *** Quits: Null_A (~null_a@2601:645:8700:2290:30d6:67dd:64ca:a12a) (Ping timeout: 265 seconds)
[23:24:08] *** Joins: lionrouge_ (~evocatus@84.51.113.13)
[23:24:33] *** Quits: lionrouge_ (~evocatus@84.51.113.13) (Remote host closed the connection)
[23:24:43] *** Joins: nckx (~nckx@tobias.gr)
[23:25:23] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 258 seconds)
[23:27:00] *** Joins: evocatus_ (~evocatus@84.51.113.13)
[23:27:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[23:28:48] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[23:34:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[23:35:34] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 260 seconds)
[23:36:20] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[23:37:24] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[23:37:48] *** Joins: juhp (~juhp@128.106.188.220)
[23:39:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[23:42:31] *** Quits: alx741 (~alx741@186.178.108.68) (Ping timeout: 252 seconds)
[23:42:46] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb87055cde397d58ef4b.dip0.t-ipconnect.de)
[23:44:51] <xerox> Build completed in 28m59s -- there we go
[23:45:39] <shapr> 4883 weeds *cries*
[23:45:51] <shapr> that's from https://github.com/ocharles/weeder
[23:46:51] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 258 seconds)
[23:47:01] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[23:48:43] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.114)
[23:49:19] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[23:50:07] <sshine> I'm trying to add a package to stackage, but I'm told that sqlite-simple isn't found: https://gist.github.com/sshine/d3a715326791746eb20d7bc857f4686e -- it's kinda strange, because if I look up that package, it does appear to be in nightly-2021-06-14 and in lts-18.13. but apparently not in nightly-2021-10-19. I wonder how I find out why.
[23:50:09] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3)
[23:50:16] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[23:50:45] <juri_> ugh. property tests and doubles are sadness.
[23:51:02] <sshine> juri_, doubles are sadness.
[23:51:14] <Hecate> sadness.
[23:51:50] <juri_> Hecate: you win.
[23:52:46] <sshine> ha, I was going to demonstrate that at least you can prove that anything plus NaN is NaN, but you can't, because it isn't equal to itself.
[23:53:28] *** Quits: evocatus_ (~evocatus@84.51.113.13) (Quit: Leaving)
[23:53:33] <sshine> and saying it isn't equal to NaN is about as trivial as saying it isn't equal to anything else.
[23:53:35] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[23:53:37] <awpr> > :t isNaN -- can do this though
[23:53:39] <lambdabot>  <hint>:1:1: error: parse error on input â€˜:â€™
[23:53:46] <sshine> awpr, nice.
[23:53:48] <geekosaur> :t isNaN
[23:53:49] <lambdabot> RealFloat a => a -> Bool
[23:55:10] *** Joins: elmoloko (~Adium@2600:6c64:4a7f:faa6:2863:d742:7416:5b9e)
[23:56:03] *** Joins: _xor (~xor@72.49.199.147)
[23:56:30] *** Joins: alx741 (~alx741@186.178.109.50)
[23:57:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[23:59:06] *** Joins: peterhil (~peterhil@mobile-access-56734e-227.dhcp.inet.fi)
[23:59:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
