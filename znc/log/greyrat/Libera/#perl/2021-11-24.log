[00:00:51] <genio> When you say the acronym ASAP, how do you say it (assuming you don't just say each letter of the acronym)?
[00:01:01] <ether> ay-ess-ay-pee
[00:01:19] <ether> I would never say ay-sapp
[00:01:25] <ether> (barf)
[00:01:26] * GumbyPAN CPAN Upload: CAD-Mesh3D-0.005 by PETERCJ https://metacpan.org/release/PETERCJ/CAD-Mesh3D-0.005
[00:01:26] * GumbyPAN CPAN Upload: Try-Tiny-0.31 by ETHER https://metacpan.org/release/ETHER/Try-Tiny-0.31
[00:02:21] <genio> so, you just say every letter. we say ay-sapp mostly but also say ay-ess-ay-pee. The reader of this audio-book says assap instead of aysap
[00:02:52] <lopid> author needs a-slap
[00:03:15] <lopid> reader… vocalist?
[00:03:31] <genio> many other things are obviously said differently than we do here in the US, but those two have been said about 21358759874514236 times in this book and the reader is KILLING me with those
[00:04:17] <Altreus> secrete is the verb for to hide something, this is correct
[00:04:48] <lopid> produce and discharge—secrEET
[00:04:50] <Altreus> and also to express it, so it's an autoantonym in one respect
[00:04:58] *** Quits: pucara (~i@host207.181-14-157.telecom.net.ar) (Quit: Lost terminal)
[00:05:37] <Altreus> well I had no idea it was pronounced differently in the US
[00:05:46] <Altreus> We would always say "It was se-CREET-ed about his person"
[00:06:12] <ether> yes, because that's correct :D
[00:06:18] <Altreus> well yes
[00:06:23] <Altreus> that helps a lot :D
[00:06:24] <lopid> pronunciations can be found here: https://www.lexico.com/definition/secrete
[00:06:38] <ether> it's too bad we say aluminum in Canada rather than the correct aluminium
[00:06:40] <genio> yes. one verb and two pronunciations for us. to produce and discharge - secrEET.  to hide/conceal - secrEHT
[00:06:48] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:07:03] <Paperbot> Link title(s): [ SECRETE | Meaning & Definition for UK English | Lexico.com ]
[00:07:11] <Altreus> genio: so you pronounce secrete the same as secret in that sense?
[00:07:21] <genio> yes
[00:07:24] <Altreus> interesting
[00:07:27] <Altreus> well, takes all sorts
[00:07:35] <ether> what about ooze from a wound? is the secret or secrete?
[00:07:41] <genio> secrete
[00:07:46] <Altreus> please bear in mind that it's our language and we're correct
[00:07:48] <Altreus> :)
[00:07:51] <ether> :D
[00:07:51] <genio> haha :)
[00:07:55] *** Joins: rgrinberg (~textual@201.198.177.243)
[00:10:03] <genio> I might be weird, but I also loathe the use of "careered" and instead posit that it should always be "careened" (just said in the book)
[00:10:36] <genio> but I do agree that I wish we said aluminium rather than aluminum 
[00:11:08] <Altreus> But wait, doesn't your career follow an uncontrollable path that'll invevitably end in disaster?
[00:11:59] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:12:16] <genio> I think that one might actually change over time. I hear more and more people now saying silly stuff like "we'll take that aluminum piece over there... excuse me, 'aluminium'... and do X"   even in my backwoods areas of the deep south
[00:12:28] <ether> heh, nice
[00:13:43] <genio> Granted, I know they're being contrarian in their strange way but at least it's becoming more common
[00:13:57] <Altreus> eval: qr/meow/
[00:13:58] <perlbot> Altreus: qr/meow/u
[00:14:01] <Altreus> eval: qr/meow/sm
[00:14:03] <perlbot> Altreus: qr/meow/ums
[00:14:09] <Altreus> look, stop being helpful
[00:14:12] * lopid laments the proliferation of "zee", and "waiting on" instead of "waiting for"
[00:14:25] <Altreus> ah ?^
[00:14:37] <Altreus> waiting on and waiting for are different though
[00:14:45] <lopid> yes
[00:14:47] <Altreus> waiting on is waiting for x to finish
[00:14:57] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[00:15:06] <lopid> waiting on is serving me dinner
[00:15:18] <ash_worksi> I am always reminded of my ineptitude with perl when I can't perform simple sed/awk operations
[00:16:34] <ash_worksi> does it happen to be easier to do `awk '/regex/{print; next} 1{exit}'` in perl (where the match contains a '/')?
[00:16:46] <ash_worksi> I'm tac'ing a file and I just want to stop when the date changes
[00:16:54] <ash_worksi> (it's a very large log)
[00:17:54] <ash_worksi> it'd be nice if I could just do `sed '#^11/23/2021#q'` but I guess `sed` doesn't understand delims outside of `s///`
[00:18:13] <ash_worksi> I mean it doesn't understand different delims unless you're using `s///`
[00:18:31] <lopid> | perl -pe '/pattern/ && do { print; exit}' ?
[00:18:54] <ash_worksi> lopid: no because I want every line with that date
[00:19:01] <lopid> oh
[00:19:09] <ash_worksi> also, I guess it doesn't REALLY have to be a pattern
[00:19:14] <Altreus> lopid: oh yeah, and that!
[00:19:15] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[00:19:16] <ash_worksi> it could just be $0 == ...
[00:19:33] <ash_worksi> or whatever a line is in perl (I forgot)
[00:19:53] <Altreus> $_
[00:20:01] <Altreus> but it doesn't equal it, it begins with it, surely
[00:20:02] <ash_worksi> right, but actually it would be "contains"
[00:20:06] <ash_worksi> yes
[00:20:10] <Altreus> do you know the date, or do you want to take the first one you find?
[00:20:19] <ash_worksi> todays date
[00:20:33] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:20:53] <ash_worksi> hopefully it's just something as easy as `$_ != '11/23/2021' && exit`
[00:20:55] <Altreus> perl -lne "print if m{$(date -I)}" file I guess
[00:21:10] <Altreus> or just 'print if m{whatever}'
[00:21:15] <ash_worksi> Altreus: wont that continue to look throught the whole file?
[00:21:21] <Altreus> sure, but it's fast
[00:21:35] <Altreus> you can flipflop but it's effort
[00:22:06] <Altreus> if (m{date}) { $found = 1; print } else { exit if $found }
[00:22:16] <lopid> | perl -pe '$seen=1 if /pattern/; exit if not /pattern/ and $seen==1'
[00:22:18] <Altreus> I guess that's an elsif really
[00:22:43] <ash_worksi> I can't do soething like `!m{...} && exit` ?
[00:22:55] <Altreus> you can, but it'll exit immediately because the first line was yesterday
[00:22:57] <Altreus> for example
[00:22:58] <lopid> that would exit if the first match isn't pattern
[00:23:10] <ash_worksi> hmm?
[00:23:26] <ash_worksi> isn't that what I'm asking?
[00:23:34] *** diskin is now known as Guest4648
[00:23:34] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[00:23:34] *** Quits: Guest4648 (~diskin@185.49.242.49) (Killed (platinum.libera.chat (Nickname regained by services)))
[00:23:34] *** diskin_ is now known as diskin
[00:23:44] <lopid> you're assuming pattern is always on first line
[00:24:53] <lopid> eg. to print up to and including all baz's: printf %s\\n foo bar baz baz qux | perl -pe '$seen=1 if /baz/; exit if not /baz/ and $seen==1'
[00:25:10] <ash_worksi> yes, well, its just todays date, but yeah that'd be helpful in the future
[00:25:37] <lopid> you're logging future events?
[00:25:45] <ash_worksi> I'm tac'ing
[00:25:51] <ash_worksi> so I start from the bottom of the file
[00:26:05] *** Quits: gast0n (~g4570n@user/gast0n) (Read error: Connection reset by peer)
[00:26:29] * GumbyPAN CPAN Upload: Data-Table-Text-20211124 by PRBRENAN https://metacpan.org/release/PRBRENAN/Data-Table-Text-20211124
[00:26:29] * GumbyPAN CPAN Upload: Nasm-X86-20211123 by PRBRENAN https://metacpan.org/release/PRBRENAN/Nasm-X86-20211123
[00:26:39] <lopid> (was facetious)
[00:26:39] *** Joins: gast0n (~g4570n@user/gast0n)
[00:27:45] <Altreus> well in that case you can perl -pe 'exit unless m{date}'
[00:27:54] *** Joins: Atomic_pi12l (~atomic@gl111-42.master.pl)
[00:28:01] <Altreus> assuming it starts with matching lines, you can exit when it stops matching
[00:28:29] *** Joins: GEttR (~GEttR@user/gettr)
[00:30:44] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:39:06] *** Quits: proller (~p@2a02:6b8:b081:8019::1:0) (Ping timeout: 245 seconds)
[00:44:40] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:51:41] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:b412:3d19:27cf:5d37)
[00:51:46] <Atomic_pi12l> hi all;) what would you recommend for a guy who wants improve his perl ? I did some basic tuts but want to move forward.  
[00:52:08] <lopid> perlbot: tutorials
[00:52:08] <perlbot> lopid: For Perl books and tutorials, see http://perl-tutorial.org/ , http://learn.perl.org/ , https://www.perl.org/books/library.html , http://perl-begin.org/tutorials/ , http://perlmonks.org/index.pl?node=Tutorials , or see quickstart
[00:55:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5cca:96d9:7234:6761) (Ping timeout: 265 seconds)
[00:57:04] *** Joins: proller (~p@2a02:6b8:b081:8832::1:1b)
[00:58:39] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 264 seconds)
[00:58:48] *** Joins: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net)
[00:59:14] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[00:59:15] *** Quits: JustMe (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Ping timeout: 264 seconds)
[01:01:40] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[01:03:55] *** Quits: Atomic_pi12l (~atomic@gl111-42.master.pl) (Quit: AtomicIRC: The nuclear option.)
[01:04:34] *** Joins: Atomic_pi12l (~atomic@gl111-42.master.pl)
[01:08:04] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[01:12:43] <Altreus> contribute to a project and expect to be given ... feedback :D
[01:16:11] *** Quits: G_SabinoMullane (~G_SabinoM@c-98-249-176-228.hsd1.fl.comcast.net) (Ping timeout: 245 seconds)
[01:20:47] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[01:20:55] <Altreus> JSON::Pointer++ # strict mode
[01:24:41] *** Joins: portamorta (~portamort@143.92.191.7)
[01:24:56] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 245 seconds)
[01:31:12] *** Joins: whynot (~whynot@88.155.38.128)
[01:32:42] *** Quits: martinus__ (~martin@96.19.201.77.rev.sfr.net) (Ping timeout: 260 seconds)
[01:34:15] *** Joins: G_SabinoMullane (~G_SabinoM@c-98-249-176-228.hsd1.fl.comcast.net)
[01:43:40] *** Quits: magla (~gelignite@55d416db.access.ecotel.net) (Quit: Stay safe!)
[01:45:51] <gordonfish> LeoNerd, etc: [IO::Async] Is there any way to pause a timer? I can do ->stop and then ->start, which can be good enough, though when started again, it goes immediately to the next iteration, which might be a problem if the interval is is long and the pause happened early into one.
[01:46:27] <gordonfish> (I'm working with a IO::Async::Timer::Periodic subclass btw.)
[01:46:51] <gordonfish> *with an
[01:46:51] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[01:51:16] <Grinnz> how it schedules when you stop and start depends on the reschedule parameter
[01:52:21] <Grinnz> er actually, if stopped previously it will always be $interval after you start
[01:52:43] <Grinnz> so dunno what you mean by goes immediately to the next iteration
[01:53:11] <Grinnz> oh, maybe you're hitting first_interval which is refreshed by start
[01:53:25] <gordonfish> I mean when I call ->start after having been ->stop'ed for a while, on_tick is called right away
[01:53:53] <Grinnz> "If defined, the interval in seconds after calling the start method before the first invocation of the callback or method."
[01:55:33] <gordonfish> (I'm not using first_interval in my subclass. I delete it in my configure sub since this subclass is for running a list of intervals instead of one interval, like [2,4,7,3,5] where the first interval is 2 seconds, then 4, then 7, 3, 5)
[01:56:43] <gordonfish> (I set $self->{interval} in my sub _reschedule before calling $self->SUPER::_reschedule( @_ ); )
[01:57:00] <Grinnz> sounds like you're messing with internals so something is probably broken in your subclass
[01:57:18] <gordonfish> I'm not doing anything wild, just changing interval each time around
[01:58:13] <Grinnz> (hint: showing the code might help)
[01:58:59] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[01:59:06] *** Quits: phenom (~primus@user/phenom) (Ping timeout: 245 seconds)
[02:02:25] *** Joins: phenom (~primus@user/phenom)
[02:03:27] *** Quits: Atomic_pi12l (~atomic@gl111-42.master.pl) (Quit: AtomicIRC: The nuclear option.)
[02:15:18] *** Quits: ratagin (~ratagin@208.96.144.68) (Remote host closed the connection)
[02:31:30] *** Quits: G_SabinoMullane (~G_SabinoM@c-98-249-176-228.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[02:33:41] *** Quits: pizdets (~pizdets@183.182.114.41) (Ping timeout: 245 seconds)
[02:34:06] *** Joins: pizdets_ (~pizdets@183.182.111.40)
[02:35:31] <gordonfish> Grinnz: I found that if I call $self->_reschedule instead of $self->SUPER::start it at least starts that iteration over when resuming, which is much more reasonable, imho. I'll post what I have in a moment.
[02:36:09] *** Quits: Darkcoal (~user@143.92.191.7) (Quit: Darkcoal)
[02:36:11] *** Quits: Su-Shee (~Susanne@p4ffc7180.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[02:36:30] *** Quits: portamorta (~portamort@143.92.191.7) (Quit: ZNC 1.8.2 - https://znc.in)
[02:38:09] *** Joins: Su-Shee (~Susanne@p4ff49612.dip0.t-ipconnect.de)
[02:40:11] <gordonfish> Grinnz: https://l.perl.bot/p/jtwz22
[02:40:11] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[02:40:27] <Grinnz> the behavior of IO::Async::Timer::Periodic when you call ->stop and then ->start is to schedule the next invocation (first_interval // interval) seconds from the time at which you call ->start, or the time at which it's added to a loop if it isn't yet
[02:40:43] <Grinnz> so anything you do that isn't that behavior is your problem
[02:45:34] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:50:54] *** Quits: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:51:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:cd02:5ed5:f7c5:1e43)
[02:55:03] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:b412:3d19:27cf:5d37) (Ping timeout: 264 seconds)
[03:03:30] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[03:07:25] *** Joins: rgrinberg (~textual@201.198.177.243)
[03:07:49] *** Quits: rgrinberg (~textual@201.198.177.243) (Client Quit)
[03:07:56] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 246 seconds)
[03:10:34] *** Joins: WinterStar (~IceLight@user/icelight)
[03:31:16] *** Quits: Pixi (~Pixi@user/pixi) (Quit: Leaving)
[03:35:43] *** Joins: Pixi (~Pixi@user/pixi)
[03:35:43] *** Joins: R2robot_ (~R2robot@user/r2robot)
[03:38:27] *** Quits: whynot (~whynot@88.155.38.128) (Quit: leaving)
[03:38:40] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 268 seconds)
[03:40:22] <gordonfish> Grinnz: Yeah I was just outside and while there was thinking, that upon pausing, I could figure out how much time is left, assign that to $self->{foo}, then in my _reschedule, check if ->{foo} is set and use that for $self->{interval} instead of $intervals->[ $index ]
[03:41:41] <Grinnz> seems a little overcomplicated, but if you want pause/resume functionality it does seem you will need to keep track of how much has elapsed when pausing
[03:46:38] <Grinnz> because stop/start are not designed for that purpose
[03:54:51] *** Quits: sevvie (~sevvie@vps-6df5f188.vps.ovh.net) (Quit: leaving)
[03:55:00] *** Joins: sevvie (~sevvie@vps-6df5f188.vps.ovh.net)
[04:06:11] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 245 seconds)
[04:06:51] *** Joins: rgrinberg (~textual@201.198.177.243)
[04:18:12] <zgu> "PHP creator: functions were named to fall into length buckets because function hash algo was strlen"
[04:18:41] <simcop2387> zgu: it explains a lot doesnt it
[04:19:10] <zgu> it does kind of make sense
[04:22:22] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:27:14] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[04:31:35] *** Quits: defjam (~eb0t@90.197.81.95) (Ping timeout: 256 seconds)
[04:39:18] *** Joins: gast0n (~g4570n@user/gast0n)
[04:40:04] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:40:05] *** Joins: defjam (~eb0t@90.199.243.141)
[04:44:31] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 245 seconds)
[04:44:59] <gordonfish> zgu: And to think that PHP began as a Perl program...
[04:51:25] *** Quits: waltman (waltman@2601:4a:701:4451:6b05:7af5:bef8:96cc) (Ping timeout: 268 seconds)
[04:51:46] *** Joins: waltman (waltman@2601:4a:701:4451:e528:a13b:2125:9a32)
[04:55:20] *** Joins: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net)
[05:44:56] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[05:54:55] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:12:11] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:19:52] *** Quits: Pali (~pali@user/pali) (Ping timeout: 260 seconds)
[06:22:00] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[06:22:58] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[06:27:48] *** R2robot_ is now known as R2robot
[06:29:28] *** Quits: Su-Shee (~Susanne@p4ff49612.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:31:09] *** Joins: Su-Shee (~Susanne@p4ffc7fcf.dip0.t-ipconnect.de)
[06:31:54] *** Joins: rgrinberg (~textual@201.198.177.243)
[06:33:48] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 268 seconds)
[06:46:50] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[06:50:44] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:50:45] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:50:45] *** finn_elija is now known as FinnElija
[07:12:54] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:32:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[07:32:47] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:46:19] *** Joins: Martchus (~martchus@dynamic-095-118-047-120.95.118.pool.telefonica.de)
[07:46:46] <Grinnz> that's about the quality of 90s perl programs, to be fair
[07:47:39] *** Quits: Martchus_ (~martchus@dynamic-095-117-007-026.95.117.pool.telefonica.de) (Ping timeout: 256 seconds)
[07:51:25] *** Joins: Manderson (~manderson@047-028-019-189.res.spectrum.com)
[07:52:06] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 268 seconds)
[07:54:26] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:3017:c1dd:5d13:2be1)
[07:56:25] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 268 seconds)
[07:56:57] *** Joins: pj (~pj@ghettoforge/pj)
[07:57:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:cd02:5ed5:f7c5:1e43) (Ping timeout: 245 seconds)
[08:01:16] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:04:03] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 264 seconds)
[08:07:01] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[08:07:13] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:16:38] *** Joins: pj (~pj@ghettoforge/pj)
[08:17:59] *** Joins: zenfold_ (~zenfold@user/zenfold)
[08:21:30] *** Quits: zenfold (~zenfold@user/zenfold) (Ping timeout: 260 seconds)
[08:26:32] *** Joins: ericlee_ (~ericlee@c-24-7-50-61.hsd1.ca.comcast.net)
[08:31:03] *** Quits: ericlee (~ericlee@2601:647:4681:3420::3) (Ping timeout: 264 seconds)
[08:34:06] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 245 seconds)
[08:58:43] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:00:46] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 245 seconds)
[09:01:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:cb:bef4:82f4:b2d6)
[09:04:22] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[09:05:15] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:3017:c1dd:5d13:2be1) (Ping timeout: 250 seconds)
[09:05:43] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[09:06:27] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 264 seconds)
[09:18:57] *** Joins: pj (~pj@ghettoforge/pj)
[09:21:02] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[09:31:51] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:32:45] *** Joins: mattil (~mattil@d4ccvwjmd-wyl11q5hp-4.rev.dnainternet.fi)
[09:33:57] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[09:35:42] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 260 seconds)
[09:44:31] *** Quits: mattil (~mattil@d4ccvwjmd-wyl11q5hp-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:44:59] *** Joins: mattil (~mattil@d4ccvwjmd-wyl11q5hp-4.rev.dnainternet.fi)
[09:45:45] *** Quits: mattil (~mattil@d4ccvwjmd-wyl11q5hp-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:45:57] *** Joins: mattil (~mattil@87-95-64-20.bb.dnainternet.fi)
[09:46:39] *** Joins: mattil_ (~mattil@d4ccvwjmd-wyl11q5hp-4.rev.dnainternet.fi)
[09:50:51] *** Quits: mattil (~mattil@87-95-64-20.bb.dnainternet.fi) (Ping timeout: 264 seconds)
[09:52:53] *** Quits: mattil_ (~mattil@d4ccvwjmd-wyl11q5hp-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:57:36] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[09:58:34] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[09:58:35] *** Quits: k-man (~jason@user/k-man) (Ping timeout: 264 seconds)
[10:01:21] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:02:21] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:08:30] *** Joins: mattil (~mattil@d4ccvx-qssqb8hhsrb8-4.rev.dnainternet.fi)
[10:11:34] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[10:15:10] *** Quits: mattil (~mattil@d4ccvx-qssqb8hhsrb8-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[10:16:01] *** Quits: bocaneri (~bismilah@li889-61.members.linode.com) (Changing host)
[10:16:01] *** Joins: bocaneri (~bismilah@about/linux/staff/sauvin)
[10:20:37] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:4de4:2055:b8c4:f1e)
[10:24:27] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:cb:bef4:82f4:b2d6) (Ping timeout: 264 seconds)
[10:35:37] *** Joins: k-man (~jason@user/k-man)
[10:47:11] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:50:51] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:84c2:1e6a:e7be:3a11) (Ping timeout: 264 seconds)
[10:52:03] *** Quits: Su-Shee (~Susanne@p4ffc7fcf.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[10:53:26] *** Joins: Su-Shee (~Susanne@p4ffc73e9.dip0.t-ipconnect.de)
[10:56:34] * GumbyPAN CPAN Upload: App-Greple-8.52 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-Greple-8.52
[10:58:37] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 256 seconds)
[11:01:38] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[11:04:14] *** Joins: tobybl (~tobybl@213.31.134.21)
[11:08:19] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 250 seconds)
[11:14:41] *** Joins: Ovid_ (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[11:14:41] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Read error: Connection reset by peer)
[11:33:09] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[11:34:23] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:35:25] *** Quits: prime (~prime@user/prime) (Ping timeout: 250 seconds)
[11:35:51] *** Quits: rewt (~default@user/rewt) (Ping timeout: 250 seconds)
[11:36:23] *** Quits: _quaddam1ge (~quaddamag@222.87.206.35.bc.googleusercontent.com) (Ping timeout: 264 seconds)
[11:36:38] *** Joins: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[11:36:59] *** Joins: rewt (~default@user/rewt)
[11:38:37] *** Joins: martinus__ (~martin@96.19.201.77.rev.sfr.net)
[11:39:44] *** Joins: prime (~prime@user/prime)
[11:44:21] *** Joins: art1 (~romeyke@p200300ccdf084b003a696de3f442264c.dip0.t-ipconnect.de)
[11:45:04] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[11:54:00] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 260 seconds)
[11:54:25] <LeoNerd> gordonfish:  on_tick => sub { return if $paused; ... }
[11:54:42] <LeoNerd> I.e. let it tick anyway at its own schedule but then just don't do whatever it is, if you consider it "paused"
[12:38:26] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[12:50:42] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[12:53:02] *** Joins: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de)
[12:56:29] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 256 seconds)
[12:57:30] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[12:59:53] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (Ping timeout: 256 seconds)
[13:00:08] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[13:05:11] *** Joins: Penguin666x (~Penguin66@217.138.205.135)
[13:08:16] *** Quits: Penguin666 (~Penguin66@217.138.205.135) (Ping timeout: 245 seconds)
[13:08:25] <LeoNerd> I need some docs writing. An introductory paragraph or two to explain the new "builtin" module. -- https://github.com/Perl/perl5/pull/19232/files#diff-0542a81a52b0816fe128a490a2e6c29185c1b8ef8376d8b5210647bfc1331ec2R23
[13:08:28] <LeoNerd> Will take suggestions from here
[13:08:29] <Paperbot> Link title(s): [ Boolean builtins by leonerd · Pull Request #19232 · Perl/perl5 · GitHub ]
[13:11:56] <art1> Moin, what is the best/simple way to check within a perl script on runtime if a perl-module is available in INC-path? (needed for pluggable functions)
[13:12:17] <LeoNerd> The docs I want to write: "this new module should have been written about 15 years ago and contains all the stuff that really ought to have been in the core language but nobody did. Oops."
[13:12:31] <LeoNerd> But I'm not going to write it in those words
[13:12:50] <art1> why?
[13:13:06] <LeoNerd> Because those are not appropriate words to put in core docs
[13:14:10] <Botje> LeoNerd: true and false solve the problem of eg roundtripping JSON true/false?
[13:14:26] <art1> And simplified: "This is stuff I would like to see already in the core"
[13:15:23] <Botje> if so, I would approach it like that.
[13:15:24] <LeoNerd> Botje: Yes. well that's already fixed in core now
[13:15:29] <vague> art1, perl -MMojo::UserAgent -E 'say $INC{"Mojo/UserAgent.pm"}' ?
[13:15:40] <art1> thx
[13:15:40] <LeoNerd> art1: 1st person pronoun. bad.
[13:18:07] <Botje> "As a dynamically typed language, Perl has historically regarded a wide category of values as true resp. false. A common convention is to use 1 and 0 for this. However, programs sometimes need to distinguish between boolean and integer/string values. This module introduces a new value type "boolean" with members true and false, and an isbool function to test type membership."
[13:18:25] <LeoNerd> Hrm? No
[13:18:29] <LeoNerd> I want to explain the module *as a whole*
[13:18:37] <LeoNerd> "this module contains the crap that nobody cvould be bothered to add as core keywords"
[13:18:46] <Botje> oh, i see.
[13:18:48] *** Joins: Pali (~pali@user/pali)
[13:19:04] <LeoNerd> "this module is all the things that are nice simple functions so don't need to be weird operators that you need to understand yacc and bison grammars to maintain"
[13:19:36] <LeoNerd> "this module is where, honestly, we should have been adding things ages ago"
[13:19:38] <LeoNerd> and so on
[13:20:27] <LeoNerd> Or maybe I don't need to write that yet, until there's actually more in the module, closer to 5.36 release time
[13:21:02] <Botje> the fact that it's easier for the language implementor does not really matter for the language user.
[13:21:07] <LeoNerd> Indeed
[13:21:11] <Botje> if anything, it's slightly harder because it's not in perlfunc
[13:21:25] <Botje> (because of said implementation issues)
[13:21:44] <LeoNerd> Yah that's a bit annoying.. honestly a lot of perlfunc *ought* to be in here really
[13:21:47] <Ovid_> Recently I had fun fixing code that returned 1 for true, 0 for false, and `undef` for true. And there was someone defending this as sane.
[13:21:53] <LeoNerd> anything that's just a /plain/ function. I.e. most of it
[13:22:26] <LeoNerd> undef-as-true? That's a fun one
[13:22:40] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[13:23:10] <Ovid_> It was a nightmare of spaghetti code. After I fixed it, I found out another team had cut-n-pasted this with all of the "undef is true" logic. It led to some fun security holes.
[13:23:41] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[13:26:31] <Botje> I don't get any further than "This module houses a number of plain extension functions that do not require cooperation from the Perl parser."
[13:30:26] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[13:38:41] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[13:39:29] <El_Che> I always die a little when someone asks me about the boolean type in Perl :)
[13:41:49] <LeoNerd> Well, we have it now
[13:41:53] <dacav> El_Che: I had a similar discussion days ago
[13:42:14] <dacav> Those who are more likely to understand are shell scripters
[13:42:23] <SergeiZhmylev> LeoNerd, it still consumes a lot of memory though ;(
[13:42:36] <LeoNerd> SergeiZhmylev: what does?
[13:56:15] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[13:58:28] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[14:09:27] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 264 seconds)
[14:12:26] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[14:16:45] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Client Quit)
[14:25:10] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[14:25:22] *** Joins: tobybl_ (~tobybl@213.31.134.21)
[14:28:03] *** Quits: tobybl (~tobybl@213.31.134.21) (Ping timeout: 264 seconds)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:31:57] * GumbyPAN CPAN Upload: App-Notifier-Service-0.0900 by SHLOMIF https://metacpan.org/release/SHLOMIF/App-Notifier-Service-0.0900
[14:34:43] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[14:38:41] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[15:06:44] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 260 seconds)
[15:08:19] <lopid> what was that controversial module that made unnecessary network requests that the author tried to mask?
[15:10:35] <xenu> lopid: Module::AutoLoad
[15:10:43] <haj1> Module::Autoload, now called Acme::Autoload
[15:10:50] <lopid> thanks
[15:11:03] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[15:15:27] *** Quits: proller (~p@2a02:6b8:b081:8832::1:1b) (Ping timeout: 264 seconds)
[15:22:33] *** Joins: PlayerOne (~PlayerOne@user/playerone)
[15:23:10] <PlayerOne> Interesting, may 'print "@" . $somevar' or 'print "!" . $somevar' fail?
[15:23:50] <PlayerOne> iirc, the first indeed failed some time, and 'print "\@" . $somevar' helped
[15:24:45] <lopid> it was literally "@"?
[15:26:20] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[15:27:06] <PlayerOne> I'm sorry, but what exactly?
[15:27:25] <lopid> "@"
[15:27:33] <lopid> as opposed to "@foo"
[15:27:55] <PlayerOne> Yes, something like: print "@" . $somevar;
[15:27:57] *** Joins: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com)
[15:28:22] <lopid> something like?
[15:28:50] <PlayerOne> That's the issue, I don't recall the exact line, but it failed while running.
[15:29:03] <PlayerOne> I was quite sleeping )
[15:29:18] <PlayerOne> But: print "\@" . $somevar; # worked
[15:29:19] <lopid> do you recall the failure message?
[15:29:28] <PlayerOne> Nope. It was 2 das ago.
[15:29:31] <PlayerOne> days*
[15:29:57] <PlayerOne> Just, asked theoretically
[15:30:43] <lopid> i don't know why one would fail and not the other, unless one had a problem printing in general at the time
[15:31:25] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[15:31:45] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[15:32:03] * GumbyPAN CPAN Upload: Task-BeLike-SHLOMIF-0.0.7 by SHLOMIF https://metacpan.org/release/SHLOMIF/Task-BeLike-SHLOMIF-0.0.7
[15:46:36] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 245 seconds)
[15:51:28] *** Quits: PlayerOne (~PlayerOne@user/playerone) (Quit: Client closed)
[15:52:36] <rindolf> perlbot: eval: @"=(1..5); print "@"";
[15:52:37] <perlbot> rindolf: ERROR: Can't find string terminator '"' anywhere before EOF at (IRC) line 1. 
[15:52:46] <rindolf> perlbot: eval: @"=(1..5); print "@";
[15:52:47] <perlbot> rindolf: @
[15:54:50] <dacav> There's no such var in perlvar
[15:57:13] <LeoNerd> The @" var isn't special and has no behaviour associated with it, so it won't appear in perlvar
[15:57:24] <LeoNerd> But because $" exists, that means that @" and %" also exist
[16:02:14] <dacav> ...This goes beyond my knowledge, but intuitively I would have said that $" works for a syntactical hack
[16:02:26] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[16:02:54] <dacav> Having @" as a variable name poses interesting problems.  For example, you can do `say "@ARGV"`, but how do you interpolate @" ? :D
[16:04:05] <LeoNerd> \@
[16:04:15] <LeoNerd> Or put it in a non-interpolating string
[16:04:17] <dacav> That said, I don't manage to produce a working example using @" 
[16:04:39] <LeoNerd> eval: @" = (1..5); say "The value of at-quote is", @";
[16:04:40] <perlbot> LeoNerd: The value of at-quote is12345 
[16:04:56] <LeoNerd> eval: @" = (1..5); say "The value of at-quote is ", join(",", @");
[16:04:57] <perlbot> LeoNerd: The value of at-quote is 1,2,3,4,5 
[16:05:37] <dacav> ah, now I managed
[16:05:44] <dacav> Yes, something like that
[16:06:08] <dacav> :) Funny
[16:06:25] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[16:08:21] *** Joins: proller (~p@93.158.190.191)
[16:08:54] <dacav> I couldn't do it because I was declaring it with my
[16:09:27] <LeoNerd> Ah; yes it's already a superglobal that already exists
[16:12:07] * GumbyPAN CPAN Upload: App-Notifier-Service-0.0901 by SHLOMIF https://metacpan.org/release/SHLOMIF/App-Notifier-Service-0.0901
[16:13:07] *** Quits: brunoramoslu (~brunoramo@94.252.121.151) (Ping timeout: 256 seconds)
[16:22:10] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Quit: Leaving)
[16:23:33] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[16:27:12] *** Joins: brunoramoslu (~brunoramo@94.252.122.142)
[16:29:36] *** Joins: kensanata (~user@user/kensanata)
[16:31:43] <choroba> eval: @" = (1..5); say qq(The value of at-quote is @");
[16:31:44] <perlbot> choroba: The value of at-quote is @" 
[16:31:51] <choroba> hm...
[16:32:44] <LeoNerd> That surprises me
[16:33:04] <LeoNerd> eval: @, = (1..5); say qq(The value of at-comma is @,);
[16:33:05] <perlbot> LeoNerd: The value of at-comma is @, 
[16:33:12] <choroba> eval: @" = (1..5); say qq(The value of at-quote is @{"});
[16:33:14] <perlbot> choroba: The value of at-quote is 1 2 3 4 5 
[16:33:19] <choroba> here we go
[16:33:31] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 256 seconds)
[16:38:25] <merpaderp> trying to fix a small lib for my personal projects for DB stuff, by using DBIx::Connector this time around isntead of DBI
[16:38:37] <merpaderp> man, I am bad at figuring out these high quality perl modules
[16:38:53] <merpaderp> I read the manual and cant grasp just what the fuck author thinks with all that
[16:40:01] <LeoNerd> Often the creator of a module is a poor choice of person to explain why the thing exists. They already know why they made it, so why would they write it down?
[16:40:23] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[16:40:37] <merpaderp> I am just not a programming type of person, that's the whole issue
[16:43:34] <LeoNerd> Also, a lot of it is about being familar with whatever problem some tool exists to solve. If you aren't aware of the problem you might wonder why the tool exists
[16:44:49] <merpaderp> in this particular case its about DB handles being broken between forks(), learned it the hardway when building simple webapp with Plack and FCGI workers
[16:45:31] <merpaderp> back then I fixed it by patching FCGI module to reconnect after fork, turns out I should have been using this DBIx::Connector which detects it forked underneath and handles the reconn seamlessly - so I can focus on actual webapp in question and not db handles.
[16:45:33] <LeoNerd> Ahyes; that common one. It's not a DBI-specific problem, but that module is a nice DBI-specific solution to the more general issue
[16:46:27] <merpaderp> now I will just create a simple wrapper module, so I can call db_exec/db_do in my main app and ALL the db work will be handled
[16:47:05] <merpaderp> I like when things are like this: my $statement = db_exec('SELECT ...', @options ); so I can call $statement->fetcrow_array and later ->finish
[16:47:10] * GumbyPAN CPAN Upload: App-Netdisco-2.051003 by OLIVER https://metacpan.org/release/OLIVER/App-Netdisco-2.051003
[16:47:37] <merpaderp> or when I called it in void context - then that function calls finish instead of me, saves me doing that on $statement
[16:52:34] <LeoNerd> context-sensitive functions can be subtle. doubly-so when they're used as the last statement in a sub
[16:55:23] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 268 seconds)
[16:55:43] *** Joins: R2robot (~R2robot@user/r2robot)
[17:03:52] *** Joins: hethw (~heth@82.118.240.146)
[17:04:33] <hethw> why $> returns 1 when using su to log to a user and then we run a s script as the user?
[17:04:57] <hethw> s/$>/($> == 0)/
[17:07:31] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 256 seconds)
[17:18:18] <choroba> hethw: How exactly do you invoke su to run the script?
[17:19:50] <hethw> su - <user>
[17:19:55] <hethw> and then I execute it
[17:20:03] <hethw> I run su from root
[17:23:18] <hethw> wrong, ignore me
[17:24:06] <hethw> apparently && comparison is not linear
[17:26:23] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[17:26:53] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[17:29:30] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:30:37] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[17:31:06] <hethw> that might even be false also, ignore me again
[17:32:10] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 260 seconds)
[17:32:51] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[17:35:33] *** Joins: alex11 (~alex11@user/alex11)
[17:35:51] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Ping timeout: 264 seconds)
[17:36:21] *** Joins: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net)
[17:39:48] *** Quits: Linux77 (~Linux_77@186.233.179.193) (Remote host closed the connection)
[17:39:59] *** Joins: mattil (~mattil@87-95-64-20.bb.dnainternet.fi)
[17:40:43] *** Joins: mattil_ (~mattil@d4ccvwthhjn-fl50f6z-4.rev.dnainternet.fi)
[17:42:16] * GumbyPAN CPAN Upload: App-timeput-0.078 by TULAMILI https://metacpan.org/release/TULAMILI/App-timeput-0.078
[17:43:19] *** Quits: mattil_ (~mattil@d4ccvwthhjn-fl50f6z-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:43:39] *** Quits: mattil (~mattil@87-95-64-20.bb.dnainternet.fi) (Read error: Connection reset by peer)
[17:43:47] *** Joins: mattil (~mattil@d4ccvwthhjn-fl50f6z-4.rev.dnainternet.fi)
[17:46:15] *** Quits: mattil (~mattil@d4ccvwthhjn-fl50f6z-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:48:20] *** Joins: vrurg (~vrurg@45.74.95.181)
[17:50:32] *** Joins: Linux77 (~Linux_77@186.233.179.193)
[17:50:53] *** Quits: vrurg_ (~vrurg@45.74.95.181) (Ping timeout: 250 seconds)
[17:51:05] *** Joins: mattil (~mattil@d4ccvwthhjn-fl50f6z-4.rev.dnainternet.fi)
[17:52:31] *** Quits: mattil (~mattil@d4ccvwthhjn-fl50f6z-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:52:58] *** Joins: mattil (~mattil@d4ccvwthhjn-fl50f6z-4.rev.dnainternet.fi)
[17:57:27] *** Quits: mattil (~mattil@d4ccvwthhjn-fl50f6z-4.rev.dnainternet.fi) (Ping timeout: 264 seconds)
[18:00:58] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[18:01:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:03:15] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 250 seconds)
[18:03:15] *** Quits: vrurg_ (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[18:03:23] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[18:03:36] *** Quits: vrurg (~vrurg@45.74.95.181) (Ping timeout: 260 seconds)
[18:17:41] <Altreus> && is definitely sequential because you can use it as an if
[18:21:03] <hethw> what happens if I redefine a core function?
[18:22:49] <Altreus> Normally it will be redefined
[18:22:52] <Altreus> This may cause problems
[18:22:55] <lopid> probably get an ambiguous call warning
[18:23:21] <hethw> so should be a bad idea
[18:23:23] <lopid> sweval: sub die { say 'dead' }; die 'die'
[18:23:25] <perlbot> lopid: Ambiguous call resolved as CORE::die(), qualify as such or use & at (IRC) line 1. ERROR: die at (IRC) line 1. 
[18:23:27] <xenu> https://perldoc.perl.org/CORE#OVERRIDING-CORE-FUNCTIONS
[18:23:28] <Paperbot> Link title(s): [ CORE - Namespace for Perl's core routines - Perldoc Browser ]
[18:24:17] <hethw> sweval eval { sub die { say 'dead' }; die 'die' }
[18:24:25] <Altreus> xenu++ # actually looked for docs
[18:24:28] <hethw> sweval: eval { sub die { say 'dead' }; die 'die' }
[18:24:30] <perlbot> hethw: Ambiguous call resolved as CORE::die(), qualify as such or use & at (IRC) line 1. 
[18:24:45] <Altreus> die itself should be handled with $SIG{DIE} or preferably not at all
[18:24:50] <Altreus> er, __DIE__
[18:26:07] <hethw> thanks xenu
[18:29:41] *** Quits: Linux77 (~Linux_77@186.233.179.193) (Quit: Leaving)
[18:29:59] <haarg> sweval: use subs 'die'; sub die { say 'dead' }; die 'die';
[18:30:00] <perlbot> haarg: dead 
[18:30:16] <haarg> sweval: my sub die { say 'dead' }; die 'die';
[18:30:18] <perlbot> haarg: dead 
[18:30:33] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 250 seconds)
[18:31:39] *** Quits: zgu|skaro (~zgu@2603-7080-b704-0800-832f-b7d5-7b90-f547.res6.spectrum.com) (Ping timeout: 264 seconds)
[18:33:33] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[18:34:09] <xenu> i doubt 'my sub' behaviour is intentional
[18:34:15] <xenu> it can even override keywords like 'if'
[18:35:30] *** Joins: rgrinberg (~textual@201.198.177.243)
[18:35:54] <hethw> is I modify the contents of $_ of a sub, will it affect the original variable?
[18:36:10] <Grinnz> yes, its' a superglobal
[18:36:18] <hethw> nice
[18:36:31] <Grinnz> whether it affects other variables depends whether it was assigned to or aliased
[18:36:36] <Grinnz> foreach, map, grep alias it
[18:36:56] <Grinnz> so modifying it either within that or within subs they call will modify the variable it is iterating through (or attempt to)
[18:37:18] <Grinnz> this can lead to some action at a distance if you are not properly localizing $_ when using it
[18:37:40] <Grinnz> foreach, map, grep localize $_ when using it, while(readline) doesn't
[18:38:40] <Grinnz> sweval: my %things = (1..10); $_ *= 2 for values %things; \%things
[18:38:41] <perlbot> Grinnz: {1 => 4,3 => 8,9 => 20,7 => 16,5 => 12}
[18:38:43] <hethw> sweval: sub test { $_ = 'a';} my $b = 'b'; test($b); print $b
[18:38:45] <perlbot> hethw: b
[18:39:02] <hethw> hm
[18:39:06] <Grinnz> $_ is not a subroutine argument
[18:39:22] <Grinnz> but the elements of @_ are also aliased
[18:39:33] <hethw> ah, so @_[0]
[18:39:36] <Grinnz> $_[0]
[18:39:46] <hethw> sweval: sub test { $_[0] = 'a';} my $b = 'b'; test($b); print $b
[18:39:48] <perlbot> hethw: a
[18:39:57] <haarg> xenu: being able to override if is intentional
[18:40:01] <Grinnz> perlbot: anatomy of types
[18:40:01] <perlbot> Grinnz: http://altreus.blogspot.com/2011/06/anatomy-of-types.html
[18:40:12] <Grinnz> hethw: ^
[18:40:31] <Altreus> wasn't there a special signature that did $_ semantics?
[18:40:36] <Grinnz> yes, _
[18:40:46] <Altreus> I thought so but it told me off
[18:40:52] <Grinnz> but that uses $_, it doesn't assignt o it
[18:40:52] <hethw> so if it's aliased it's replaced
[18:40:59] <hethw> and if it's assigned?
[18:41:09] <Altreus> oh, I think perlbot might be using proper signatures - of course I meant prototype
[18:41:11] <Grinnz> assignment is a copy
[18:41:21] <hethw> I see
[18:41:21] <Grinnz> it doesn't retain the alias unless you use refaliasing
[18:41:30] <hethw> oh no refaliasing
[18:41:37] <hethw> should I know what it is
[18:42:02] <Grinnz> sweval: my $foo = 42; \my $bar = \$foo; $bar++; $foo
[18:42:03] <perlbot> Grinnz: 43
[18:42:16] <Grinnz> only available on recent perls and has to be enabled from feature
[18:42:39] <hethw> recent as of 5.3x?
[18:42:51] <Grinnz> 5.22 https://perldoc.perl.org/feature#The-'refaliasing'-feature
[18:42:51] <Paperbot> Link title(s): [ feature - Perl pragma to enable new features - Perldoc Browser ]
[18:42:59] <hethw> ah it's not default so it's ok
[18:43:02] <Grinnz> it's also still experimental though
[18:43:10] <hethw> it's probably useful somewhere
[18:43:27] *** Joins: magla (~gelignite@55d4df7d.access.ecotel.net)
[18:43:28] <Grinnz> https://perldoc.perl.org/perlref#Assigning-to-References is the docs for it
[18:43:28] <Paperbot> Link title(s): [ perlref - Perl references and nested data structures - Perldoc Browser ]
[18:44:34] <hethw> my head is going to get messed up ^_^
[18:47:32] *** Joins: Linux77 (~Linux_77@186.233.179.193)
[18:48:45] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 250 seconds)
[18:50:05] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 256 seconds)
[18:50:29] *** Quits: hudo (~hhudo_@mail.allm-elektro.de) (Ping timeout: 250 seconds)
[19:02:03] <Altreus> oh that's nice, so presumably you can do my \%actual_hash = $hashref
[19:02:15] <Altreus> and save yourself a few ->
[19:02:33] <Altreus> although postderef makes refs way less cumbersome in the first place
[19:02:45] *** Joins: hudo (~hhudo_@176.95.68.130)
[19:06:17] *** Quits: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[19:10:37] *** Joins: guavahabanero (~gavin@78-27-72-93.bb.dnainternet.fi)
[19:10:50] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:4c2d:8074:ff8b:55dd)
[19:11:11] <guavahabanero> Hi everyone! I was here a couple weeks ago with a perl question regarding CPAN and everyone was super helpful so maybe someone can help with this error
[19:11:20] <guavahabanero> What is the preferred paste service for this channel?
[19:11:33] <guavahabanero> This is probably super simple but it is baffling me
[19:11:54] <Botje> perlbot: paste
[19:11:56] <perlbot> Botje: Paste your code to the new https://l.perl.bot/#perl or http://paste.scsys.co.uk/ or https://gist.github.com/ | see allowpaste plugin as an op to control the pastebin in your channel
[19:13:23] <guavahabanero> The error is with a platform called foswiki that I have been asked to set up by an organisation. I realise this isn't foswiki support but my question is more around whether or not I'm using CPAN incorrectly.
[19:13:27] <guavahabanero> http://paste.scsys.co.uk/596200
[19:13:27] <Paperbot> Link title(s): [ magnet_web paste from "guavahabanero" at 217.168.150.38... ]
[19:14:02] <guavahabanero> The required .pm seems to be there in the correct place and the application itself is acknowleding that directory is in its search path
[19:15:25] <hethw> does core functions use wantarray to guess the context?
[19:18:49] *** Joins: SergeiZhmylev (~zhmylove@146.120.76.72)
[19:20:50] <hethw> and what does "readdir DIRHANDLE  Returns the next directory entry for a directory opened by opendir.", 'next directory' mean?
[19:21:26] * GumbyPAN CPAN Upload: JavaScript-Packer-2.08 by LEEJO https://metacpan.org/release/LEEJO/JavaScript-Packer-2.08
[19:21:56] <alh> is foswiki running as a user that doesn't have permissions to access that directory by any chance? 
[19:24:59] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[19:25:42] <guavahabanero> alh: You may have solved it
[19:26:23] <guavahabanero> The user account foswiki is running as is the same as the one that made the cpan installs but it's lower in the directory tree and the app itself probably can't access it cause apache
[19:26:37] <guavahabanero> Is there an easy way to relocate a CPAN install?
[19:27:20] <alh> mv :D
[19:27:38] <guavahabanero> Hahahaha, lord
[19:27:40] <Grinnz> hethw: core functions use the same mechanism as wantarray
[19:27:43] <guavahabanero> Okay, I'll rephrase
[19:28:00] <guavahabanero> Will just copying the directory tank anything else in CPAN or is it just as simple as mv and it's all good?
[19:28:06] <Grinnz> hethw: "next directory entry" - it works like readline so you normally use it in a while loop and each call in scalar context returns an entry
[19:28:30] <alh> Well you could 'cp -R ' it instead 
[19:28:33] <Grinnz> while (defined(my $entry = readdir $dh))
[19:28:39] <alh> Or just set up a new directory specifically for foswiki and install all its deps there again
[19:28:51] <hethw> Grinnz, I'm writing utf8 wrapper around readdir, and I want to return exactly the ssame things as it is, so if I have to return different entries on each "read" that can be complicated
[19:28:51] <guavahabanero> Great! I'll do that first to see. Thanks alh!
[19:28:58] <alh> g'luck!
[19:29:06] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 245 seconds)
[19:29:35] <Grinnz> hethw: yes, that's fairly hairy - would it be possible to return an iterator object instead?
[19:29:38] <hethw> how is that implemented usually?
[19:29:49] <hethw> iterator object?
[19:30:13] <Grinnz> an object that contains the items that the caller can iterate through
[19:30:30] <Grinnz> otherwise, just call readdir in scalar context if your function was invoked for a single item
[19:30:36] <Grinnz> don't try to store more
[19:30:37] <hethw> I don't really understand but I guess it will be different than the default behaviour so probably no
[19:30:49] <hethw> I see
[19:31:07] <hethw> so if !wantarray just $scalar = readdir($dh);
[19:31:19] <hethw> something like that
[19:31:26] <Grinnz> right, and if it's reached the end it will be undefined
[19:31:41] <hethw> that should be ok to be in the scalar
[19:31:52] <hethw> and if it's an array I'll do all the entries, that will work
[19:31:52] <Grinnz> yes, you just don't want to try to perform operations on it
[19:32:05] <hethw> well utf8::decode is on on undef
[19:32:07] <hethw> ok*
[19:32:12] <Grinnz> it is not
[19:32:15] *** Quits: SergeiZhmylev (~zhmylove@146.120.76.72) (Ping timeout: 264 seconds)
[19:32:24] <hethw> I don't think it will do anything
[19:32:45] <Grinnz> sweval: my $str = undef; utf8::decode $str; [$str]
[19:32:46] <perlbot> Grinnz: Use of uninitialized value in subroutine entry at (IRC) line 1. [""]
[19:32:51] <Grinnz> yes it will
[19:32:57] <hethw> haha
[19:33:14] <Grinnz> string functions are not valid on undef, with the exception of length()
[19:33:14] <hethw> well, I'll do if '' return undef...
[19:33:23] <Grinnz> incorrect, '' is a valid entry
[19:33:25] <hethw> or if not defined ...
[19:33:35] <Grinnz> yes, that
[19:35:16] *** Quits: guavahabanero (~gavin@78-27-72-93.bb.dnainternet.fi) (Quit: leaving)
[19:36:21] <Grinnz> i hope you are also checking the return value of utf8::decode, it will return false and leave the string as bytes if it is not valid UTF-8
[19:37:48] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:38:15] <hethw> well, if we're reading a dir that has no valid UTF8 name.. we probably have other problems
[19:38:39] <Grinnz> yes, but it's good to know that it happened - the filesystem doesn't care
[19:39:01] <hethw> that's happening way before on creating the dir and validation of input
[19:39:13] <hethw> so it shouldn't be here but a valid point
[19:39:42] <Grinnz> it could easily happen if you accidentally create a file with a downgraded extended ascii string for instance
[19:40:17] <Grinnz> (downgraded because the filesytem api in perl is broken)
[19:40:22] *** Joins: rgrinberg (~textual@201.198.177.243)
[19:40:26] <hethw> true, but the fs should save it as utf8
[19:40:30] <Grinnz> it won't
[19:40:38] <hethw> and that will not happen i think?
[19:40:39] <Grinnz> the filesystem will take whatever bytes you give it
[19:40:48] <hethw> well, that's not nice
[19:40:58] <Grinnz> it is only tools like ls and your terminal that care about encoding
[19:41:21] <hethw> well, silly me
[19:41:38] <Grinnz> but yes ideally it won't happen, but if it does you'll want to catch it ;)
[19:41:54] <hethw> how can that happen tho?
[19:42:08] <Grinnz> like i said - create a file with a string in the wrong state
[19:42:24] <hethw> mkdir < cat bs.txt?
[19:42:25] <Grinnz> without encoding to UTF-8 first
[19:42:38] <Grinnz> it can't happen from a terminal unelss you set your terminal to the wrong encoding
[19:43:12] <Grinnz> oh yes, if you create the name from bytes from elsewhere would do it too
[19:43:13] <hethw> then we're immune, until someone deliberatrely changes the environment which probably is readonly
[19:43:25] <hethw> hm, I'll think about it
[19:43:30] <hethw> thanks for the hints!
[19:43:32] <hethw> bbl
[19:43:37] <Grinnz> anyway easy error checking to add, so not a big deal
[19:45:25] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:22] *** Joins: koo5_ (~quassel@51.140.155.227)
[19:53:11] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:db2:af70:7900:d455)
[19:53:33] *** Quits: RoyK (~roy@user/royk) (Ping timeout: 256 seconds)
[19:54:36] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:59:17] *** Joins: RoyK (~roy@user/royk)
[20:03:59] *** Quits: magla (~gelignite@55d4df7d.access.ecotel.net) (Quit: Stay safe!)
[20:04:06] <ether> LeoNerd: re builtin docs for core - I suggest writing the docs as you would have expected them to be written if they had always been there. that is -- forget about all the earlier releases that didn't have them - we have them *now*, and we can conveniently pretend that they've always been there ...
[20:04:11] <ether> ... because it's the most natural thing in the world for them to be there.  (other docs can talk about any migration steps that people need to make with existing code).  and if we polyfill a builtin namespace on cpan, backcompat will be pretty easy anyway
[20:08:41] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[20:13:15] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[20:15:31] <haarg> a cpan compat layer will be tricky given lexical exports
[20:16:09] <haarg> reasonable if you accept that it won't be quite the same
[20:17:12] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:17:26] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 245 seconds)
[20:17:27] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[20:19:34] *** Joins: Atomic_pi12l (~atomic@gl111-42.master.pl)
[20:28:44] *** Joins: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net)
[20:32:01] *** Quits: liam_ (sid7517@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[20:32:37] <ilmari> lexical exports are possible in XS, see Lexcial::Sub (but that needs fixing for non-ancien tperls)
[20:34:29] *** Joins: liam_ (sid7517@id-7517.helmsley.irccloud.com)
[20:36:34] * GumbyPAN CPAN Upload: Archive-BagIt-0.086 by ART https://metacpan.org/release/ART/Archive-BagIt-0.086
[20:36:55] *** Joins: tomys_ (~tomys@c188-149-14-10.bredband.tele2.se)
[20:37:03] *** Joins: zenfold__ (~zenfold@user/zenfold)
[20:37:08] *** Joins: riceandbeans (~zach@user/riceandbeans)
[20:37:09] *** Joins: Penguin666 (~Penguin66@217.138.205.135)
[20:37:15] *** Quits: rewt (~default@user/rewt) (Killed (NickServ (GHOST command used by rewt__)))
[20:37:30] *** Joins: rewt (~default@user/rewt)
[20:38:12] *** Joins: randir_ (~randir@95-25-138-85.broadband.corbina.ru)
[20:39:01] *** Joins: leont_ (sid489095@id-489095.uxbridge.irccloud.com)
[20:39:27] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[20:40:08] *** Joins: X-Scale` (~ARM@92.250.97.112)
[20:40:12] *** Joins: fuzzix_ (~fuzzix@46.7.53.110)
[20:40:20] *** Joins: _quaddam1ge (~quaddamag@222.87.206.35.bc.googleusercontent.com)
[20:40:21] *** Joins: Pali_ (~pali@user/pali)
[20:40:22] *** Quits: Pali (~pali@user/pali) (Killed (zinc.libera.chat (Nickname regained by services)))
[20:40:22] *** Pali_ is now known as Pali
[20:40:25] *** Joins: brunoramoslu_ (~brunoramo@94.252.122.142)
[20:41:47] *** Joins: rundown (~eb0t@90.199.243.141)
[20:42:12] *** Joins: ash_work1i (~ash_m@user/ash-m/x-3292451)
[20:42:12] *** Joins: slowButP1esent (~slowButPr@user/slowbutpresent)
[20:42:14] *** Joins: prime- (~prime@user/prime)
[20:43:47] *** Quits: art1 (~romeyke@p200300ccdf084b003a696de3f442264c.dip0.t-ipconnect.de) (Quit: Leaving.)
[20:46:43] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (*.net *.split)
[20:46:43] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:db2:af70:7900:d455) (*.net *.split)
[20:46:43] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (*.net *.split)
[20:46:43] *** Quits: brunoramoslu (~brunoramo@94.252.122.142) (*.net *.split)
[20:46:43] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (*.net *.split)
[20:46:43] *** Quits: Penguin666x (~Penguin66@217.138.205.135) (*.net *.split)
[20:46:43] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (*.net *.split)
[20:46:43] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (*.net *.split)
[20:46:43] *** Quits: prime (~prime@user/prime) (*.net *.split)
[20:46:43] *** Quits: _quaddamage (~quaddamag@222.87.206.35.bc.googleusercontent.com) (*.net *.split)
[20:46:43] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:4de4:2055:b8c4:f1e) (*.net *.split)
[20:46:43] *** Quits: pj (~pj@ghettoforge/pj) (*.net *.split)
[20:46:43] *** Quits: dsrt^ (~dsrt@68.101.63.101) (*.net *.split)
[20:46:43] *** Quits: zenfold_ (~zenfold@user/zenfold) (*.net *.split)
[20:46:44] *** Quits: waltman (waltman@2601:4a:701:4451:e528:a13b:2125:9a32) (*.net *.split)
[20:46:44] *** Quits: defjam (~eb0t@90.199.243.141) (*.net *.split)
[20:46:44] *** Quits: GEttR (~GEttR@user/gettr) (*.net *.split)
[20:46:44] *** Quits: waitman (~waitman@irc.y0m4m4.com) (*.net *.split)
[20:46:44] *** Quits: X-Scale (~ARM@92.250.97.112) (*.net *.split)
[20:46:44] *** Quits: randir (~randir@95-25-138-85.broadband.corbina.ru) (*.net *.split)
[20:46:44] *** Quits: neilb___ (sid492745@id-492745.ilkley.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: ranguard (sid496095@id-496095.lymington.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: TitanOfOld (titan@gentoo/developer/TitanOfOld) (*.net *.split)
[20:46:44] *** Quits: riceandb1ans (~zach@dev07.raasta.org) (*.net *.split)
[20:46:44] *** Quits: fuzzix (~fuzzix@46.7.53.110) (*.net *.split)
[20:46:44] *** Quits: subie (~subie@2601:4c0:4080:bc0:688f:217c:a659:fcc9) (*.net *.split)
[20:46:44] *** Quits: judabuda (kowbunga@user/judabuda) (*.net *.split)
[20:46:45] *** Quits: leont (sid489095@uxbridge.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[20:46:45] *** leont_ is now known as leont
[20:46:58] *** X-Scale` is now known as X-Scale
[20:47:36] *** brunoramoslu_ is now known as brunoramoslu
[20:47:57] *** Quits: Atomic_pi12l (~atomic@gl111-42.master.pl) (Quit: AtomicIRC: The nuclear option.)
[20:52:06] *** tomys_ is now known as kevin-oculus
[20:52:55] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[20:52:55] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[20:52:55] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:db2:af70:7900:d455)
[20:52:55] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:4de4:2055:b8c4:f1e)
[20:52:55] *** Joins: pj (~pj@ghettoforge/pj)
[20:52:55] *** Joins: waltman (waltman@2601:4a:701:4451:e528:a13b:2125:9a32)
[20:52:55] *** Joins: GEttR (~GEttR@user/gettr)
[20:52:55] *** Joins: waitman (~waitman@irc.y0m4m4.com)
[20:52:55] *** Joins: neilb___ (sid492745@id-492745.ilkley.irccloud.com)
[20:52:55] *** Joins: ranguard (sid496095@id-496095.lymington.irccloud.com)
[20:52:55] *** Joins: TitanOfOld (titan@gentoo/developer/TitanOfOld)
[20:52:55] *** Joins: subie (~subie@2601:4c0:4080:bc0:688f:217c:a659:fcc9)
[20:52:55] *** Joins: judabuda (kowbunga@user/judabuda)
[20:52:57] *** Quits: voegelas (~voegelas@www.andreasvoegele.com) (Excess Flood)
[20:53:18] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Max SendQ exceeded)
[20:53:37] *** Joins: Darkcoal (~user@143.92.183.8)
[20:54:20] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[21:00:22] <ether> merpaderp: if you are having issues with other non-DB things being broken after forking, you might find https://metacpan.org/pod/Object::ForkAware useful
[21:00:22] <Paperbot> Link title(s): [ Object::ForkAware - Make an object aware of process forks and threads, recreating itself as neede... ]
[21:05:50] *** Joins: SergeiZhmylev (~zhmylove@178.252.127.211)
[21:08:03] <Altreus> Off topic time! I'm surprised I can't find any info on this, but surely it's not a new idea - I want to set up a hard disk (since I have a USB cradle thing) so that when I boot from it, it has linux on it
[21:08:10] <Altreus> Now, I know I can make a disk image but I don't have one
[21:08:44] <Altreus> It seems bizarre that it's not semi-standard practice to put an installer on it, boot from it, and let the installer replace itself with an ... installed
[21:08:59] <Altreus> kinda like a biodegradable seed bomb
[21:09:10] *** Quits: hethw (~heth@82.118.240.146) (Ping timeout: 260 seconds)
[21:09:23] <Altreus> I guess I could boot a VM and point it at the disk...
[21:09:31] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[21:09:33] <Altreus> that's more work than just using a USB stick though!
[21:09:46] *** Joins: XV8 (~XV8@199.192.138.251)
[21:10:49] <huf> debootstrap and install grub?
[21:10:59] <huf> or something equivalent
[21:13:31] <Altreus> hmm I suppose that would be a way to do it
[21:14:04] <Altreus> a bit more hands-on but avoids a pesky step
[21:14:15] <huf> there's got to be some better way
[21:14:26] <huf> maybe someone's scripted debootstrap and install-grub :)
[21:14:45] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:15:47] <Altreus> they have, but they pulled the script down and left a "maybe we'll fix it" message
[21:15:57] <Altreus> perhaps others have...
[21:16:06] *** Quits: X-Scale (~ARM@92.250.97.112) (Ping timeout: 265 seconds)
[21:16:09] <Altreus> cos I also need to partition the disk and all that
[21:16:26] <huf> cant you copy your existing image?
[21:16:30] <Altreus> I kinda just want to run the Mint installer, except against a USB disk instead of the main disk
[21:16:58] <Altreus> nah cos all my computers have been in use and polluted by me and my vim
[21:17:09] <Altreus> Once installed I could probably take an image of that
[21:17:32] *** X-Scale` is now known as X-Scale
[21:17:36] <Altreus> Seems like the sort of thing we used to do, and now do with ... i dunno salt stack or something
[21:17:48] <huf> what?
[21:18:26] *** Joins: magla (~gelignite@55d4df7d.access.ecotel.net)
[21:18:27] <Altreus> You know. In the old days we'd set up a system and take a binary snapshot of it so we could perfectly reproduce it, and in the future we write scripts that describe what we want it to look like and make the computer figure it out
[21:19:36] *** Quits: proller (~p@93.158.190.191) (Ping timeout: 260 seconds)
[21:23:01] <LeoNerd> ether: OK, so that's what not to write. What to write? ;)
[21:23:18] <LeoNerd> =head1 DESCRIPTION \n This module is a banana.
[21:23:32] <v`> https://pbs.twimg.com/media/FE9tWeaXEA0mVvc.jpg
[21:25:20] *** Quits: rgrinberg (~textual@201.198.177.243) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:26:32] <v`> the giant roll of toilet paper isn't the power move
[21:27:00] <v`> the power move is the yellow highliter jammed in the back to adjust the tilt
[21:27:03] <ether> just describe what each function does. the namespace itself doesn't need any special description, does it?
[21:27:54] <huf> v`: technology really has come so far
[21:28:21] <Altreus> Documentation was LeoNerd's dump stat
[21:28:47] <LeoNerd> ether: I don't know.. does it? People almost always complain that things aren't explained enough
[21:29:02] <Altreus> LeoNerd: what's the topic at hand?
[21:29:14] <LeoNerd> I write "Here, have a red 2x4 lego brick" and people go "uh, OK why would I want a 2x4 lego brick in red?" and I sortof struggle to explain the situation...
[21:29:23] <LeoNerd> If you're in the situation of needing a 2x4 lego brick, you know it
[21:29:42] <LeoNerd> Altreus: https://github.com/Perl/perl5/pull/19232  -- docs
[21:29:44] <Paperbot> Link title(s): [ Boolean builtins by leonerd · Pull Request #19232 · Perl/perl5 · GitHub ]
[21:29:51] <Altreus> =head1 DESRIPTION\n\nThis module is for people who already know they need it
[21:30:22] * v` would 100% put a monitor on top of the red 2x4 lego brick
[21:31:12] *** Quits: tobybl_ (~tobybl@213.31.134.21) (Remote host closed the connection)
[21:34:24] <Altreus> LeoNerd: Would it be fair to say this package provides various keywords that traditionally were only found in CPAN modules?
[21:34:43] <LeoNerd> No
[21:34:50] <Altreus> Seems like the rationale for calling them "builtin" is that now you don't need to use external ones
[21:34:57] <LeoNerd> It provides functions, not keywords
[21:34:57] <Altreus> especially for true and false
[21:35:13] <Altreus> oh yes, keywords are things now
[21:35:13] <LeoNerd> Most of what it's going to provide wouldn't have been found /anywhere/. or.. maybe in something like Scalar::Util
[21:35:32] <Altreus> Why's it called builtin then?
[21:35:47] <Altreus> I'm not trying to be difficult so much as to hone in on a sensible answer to the question
[21:35:53] <LeoNerd> The distinction being: "keywords" could do anything weird like `if` or `eval` or `use` does, whereas "functions" are all syntactically boring predictable things
[21:36:26] <LeoNerd> It's called "builtin" beacuse that's the decision we came to at the end of a bunch of discussion on p5p@
[21:36:37] <LeoNerd> also the RFC; RFC 0009
[21:37:00] <LeoNerd> https://github.com/Perl/RFCs/blob/master/rfcs/rfc0009.md
[21:37:00] <Paperbot> Link title(s): [ RFCs/rfc0009.md at master · Perl/RFCs · GitHub ]
[21:37:05] <Altreus> Why's there a package instead of just adding them to core?
[21:37:11] <Altreus> o maybe this says
[21:37:16] <LeoNerd> namespace pollution
[21:37:47] <LeoNerd> also, er... core doesn't really /have/ any actual "functions"
[21:38:08] <ilmari> they _are_ provided as builtins in core, but you have to import them into your lexical scope (or call them fully qualified)
[21:38:13] <LeoNerd> Other than all the weird stupid mess of crap that universal.c pollutes into various places, that I'm mostly tidying up
[21:38:44] <Altreus> Right, so DESCRIPTION, This module contains functions you can request, but that are not provided by default
[21:38:56] <Altreus> wait, DESCRIPTION can be long
[21:39:16] <LeoNerd> Ah, yes... point out that they're requestable but not default. Ish. Except they kinda are
[21:39:23] <LeoNerd> You can always call them fully-qualified. They always exist
[21:39:43] <LeoNerd> $ ./perl -Ilib -E 'say builtin::true()'
[21:39:43] <LeoNerd> 1
[21:39:50] <Altreus> This module contains functions you can request, but that are not provided by default. They are considered part of Perl core, but this mechanism avoids polluting namespaces with functions you're not going to use
[21:40:07] <Altreus> oh well I think we can paper over that
[21:41:06] <Altreus> This module lets you import core functions that are otherwise only accessible through the C<builtin::> namespace. This is to avoid polluting every namespace with an ever-increasing number of builtin functions - hence the name.
[21:42:04] <LeoNerd> Mmm... yes, some good wording there. Let me see if I can work that in
[21:42:21] <Altreus> It seems to be something I'm good at
[21:42:36] <LeoNerd> (or at least some rewording of it that is actually correct ;))
[21:42:39] <Altreus> I'd far prefer to be paid to document code than to write it in the first place :D
[21:42:55] <Altreus> I can only work with what I've got! (tableflip)
[21:43:17] <LeoNerd> It's mostly the confusion of "every namespace".. it's not even that
[21:43:37] <LeoNerd> The core operators are not functions, they live in a separate sort of thing
[21:43:57] *** Joins: Colt (~Colt@user/colt)
[21:44:51] <Altreus> yes but this is also a discussion we've had :D
[21:45:01] <Altreus> This one's an operator and not a function because of reasons!
[21:45:19] <Altreus> Probably doesn't matter to someone who just wants to use builtin qw(true false);
[21:46:13] <Altreus> And still, "every namespace" is, at least from that perspective, polluted with "functions" that are technically operators but also aren't in the namespace
[21:46:49] <Altreus> Is there actually a builtin function in perl, before this change?
[21:46:58] <Altreus> is readline a function?
[21:47:30] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[21:48:22] *** Quits: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[21:49:21] * Altreus awayy
[21:49:24] <Altreus> ttfn
[21:57:51] *** Quits: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 245 seconds)
[21:58:50] <LeoNerd> https://github.com/Perl/perl5/blob/blead/universal.c#L1252  -- this is the list of built-in *actual* functions
[21:58:52] <Paperbot> Link title(s): [ perl5/universal.c at blead · Perl/perl5 · GitHub ]
[21:59:13] <LeoNerd> Several of them are candidates for moving to builtin::
[22:00:12] <ether> LeoNerd: let's start off with what we can do, and refine later. it's easier to edit what's already there than to start cold, and we've got several months before the stable release
[22:00:21] <LeoNerd> Yuh
[22:05:09] *** Joins: monkey_ (~user@181.114.17.106)
[22:09:54] *** Joins: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net)
[22:14:47] *** Joins: EvanCarroll (~ecarroll@68.90.133.105)
[22:20:53] *** Quits: EvanCarroll (~ecarroll@68.90.133.105) (Ping timeout: 256 seconds)
[22:22:23] *** Joins: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net)
[22:23:30] *** Joins: proller (~p@80.240.216.69)
[22:24:31] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 245 seconds)
[22:26:36] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[22:27:14] *** Joins: Colt (~Colt@user/colt)
[22:27:41] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[22:28:14] *** Joins: X-Scale` (~ARM@31.22.167.95)
[22:29:15] *** X-Scale` is now known as X-Scale
[22:29:31] *** Quits: G_SabinoMullane (~G_SabinoM@c-73-57-253-123.hsd1.fl.comcast.net) (Ping timeout: 245 seconds)
[22:31:34] *** Joins: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[22:31:51] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[22:32:20] *** Joins: Colt (~Colt@user/colt)
[22:33:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[22:33:29] *** Joins: Colt1 (~Colt@user/colt)
[22:33:42] *** Quits: Colt1 (~Colt@user/colt) (Remote host closed the connection)
[22:34:02] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 260 seconds)
[22:35:30] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[22:35:54] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 260 seconds)
[22:36:37] *** Joins: Colt (~Colt@user/colt)
[22:41:41] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[22:46:26] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:46:46] * GumbyPAN CPAN Upload: Async-0.11 by ARISTOTLE https://metacpan.org/release/ARISTOTLE/Async-0.11
[22:49:04] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[22:54:53] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 250 seconds)
[22:58:36] <Grinnz> aristotle++ # archaeology
[22:59:44] <ether> how so?
[23:00:23] <Grinnz> revival of a dist from 2000 it appears
[23:04:15] <ether> there are two 0.10 releases - one from 2000 and one from 2018. weird
[23:04:41] <ether> interesting old mjd-ware though
[23:05:44] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:08:16] *** Joins: emanuele6 (~emanuele6@net-37-182-19-105.cust.vodafonedsl.it)
[23:08:30] *** Quits: emanuele6 (~emanuele6@net-37-182-19-105.cust.vodafonedsl.it) (Changing host)
[23:08:30] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[23:15:17] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[23:20:11] *** Quits: martinus__ (~martin@96.19.201.77.rev.sfr.net) (Ping timeout: 268 seconds)
[23:20:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:21:42] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[23:28:47] *** Joins: proller (~p@80.240.216.69)
[23:30:26] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:35:21] *** Joins: rgrinberg (~textual@201.198.177.243)
[23:38:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[23:47:26] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[23:51:51] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 250 seconds)
[23:51:57] *** Joins: proller (~p@2a02:6b8:b081:8832::1:f)
[23:52:05] *** vrurg_ is now known as vrurg
[23:52:53] <daemon> blah I hate sort, if I wanted to do a sort on an array of hashref's where hashref->{'language'} is a text value, csharp perl rust etc... I basically want them all together do not really care about the order, so all perl hashrefs are 0,1,2,3,4 in the array and all python are 15,16,17 etc ... what would be the correct sort? 
[23:55:00] <alh> sort { $a->{language} cmp $b->{language} } @list 
[23:55:47] <daemon> eval: my @blah = ({a=>'a'},{a=>'c'},{a=>'d},{a=>'a'}); [ sort { $a->{language} cmp $b->{language} } @blah ]
[23:55:48] <perlbot> daemon: ERROR: Bad name after a' at (IRC) line 1. 
[23:56:02] <daemon> eval: my @blah = ({a=>'a'},{a=>'c'},{a=>'d'},{a=>'a'}); [ sort { $a->{language} cmp $b->{language} } @blah ]
[23:56:04] <perlbot> daemon: [{a => "a"},{a => "c"},{a => "d"},{a => "a"}]
[23:56:18] <alh> You didn't sepcify a language in any of your hashes so you can't sot on it...
[23:56:28] <daemon> oh yeah .. i called the key a
[23:56:29] <daemon> >.>
[23:56:40] <daemon> eval: my @blah = ({a=>'a'},{a=>'c'},{a=>'d'},{a=>'a'}); [ sort { $a->{a} cmp $b->{a} } @blah ]
[23:56:41] <perlbot> daemon: [{a => "a"},{a => "a"},{a => "c"},{a => "d"}]
[23:56:52] <daemon> alh++ # one day I will remember how to do sorts 
[23:57:03] <tirnanog> if you're using sort, you do care about the order, surely?
[23:57:19] <alh> I think they don't care if it's a stable sort or not
[23:57:37] <tirnanog> oh, I see.
[23:57:39] <alh> Grouped together but beyond that, all is fine (no secondary criteria)
[23:57:43] <daemon> tirnanog, nah each hashref is a minature report, this is just so when the foreach at the end runs and renders into some format all the blocks of the same type are together
[23:59:11] <alh> daemon: Sort is easy. $a is one of the elements. $b is the other. Use cmp if doing string compare, <=> otherwise. Then it's just down to "What is $a?" 
[23:59:38] <daemon> yeah I know everytime I see it working I go 'ah right!'
[23:59:51] <daemon> then it just somehow gets dump()'d after the next morning tea
