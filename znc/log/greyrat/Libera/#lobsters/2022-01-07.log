[00:07:07] <gwozniak> Gotta love switch statements like this: https://github.com/bminor/binutils-gdb/blob/master/ld/ldlang.c#L5703
[00:07:12] <mockturtle> [ binutils-gdb/ldlang.c at master · bminor/binutils-gdb ] - github.com
[00:12:58] *** Joins: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net)
[00:15:28] <iDrougge> How about this case? https://github.com/bminor/binutils-gdb/blob/f9f424229637e6a55a1fad3ae4b75e3900282098/ld/ldlang.c#L6044
[00:15:32] <mockturtle> [ binutils-gdb/ldlang.c at f9f424229637e6a55a1fad3ae4b75e3900282098 · bminor/binutils-gdb ] - github.com
[00:20:19] <feoh> OK whuf I adore pandoc but it's so heavy I can't imagine running it on like a VPS or something, you'd crush it.
[00:21:07] <iDrougge> Don’t worry, be lazy.
[00:22:39] <drakonis> https://twitter.com/UnsolicitedDiks
[00:23:13] <feoh> iDrougge: Guessing those commits happened back when code review was a pie in the sky concept :)
[00:23:56] *** Quits: znedw54 (~znedw@home.znedw.com) (Quit: The Lounge - https://thelounge.chat)
[00:24:27] *** Joins: jmw (~jmw@user/jmw)
[00:25:57] <iDrougge> feoh: And apparently, in GNU land, refactoring still is.
[00:26:11] *** Quits: KerusEnfau (~EnfauKeru@gateway/tor-sasl/enfaukerus) (Remote host closed the connection)
[00:26:32] *** Joins: KerusEnfau (~EnfauKeru@gateway/tor-sasl/enfaukerus)
[00:28:01] *** Quits: _w1ntermute (~sven@dslb-084-057-144-135.084.057.pools.vodafone-ip.de) (Quit: Konversation terminated!)
[00:28:11] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:28:57] <gwozniak> Having tests would help
[00:29:01] <gwozniak> But...
[00:30:30] <gwozniak> According to git blame, that case statement hasn't been touched in 4 years, which just adds something to the end.  Otherwise, the bulk of it is over 20 years old
[00:30:34] <drobilla> I'd guess that code review still is too, there
[00:30:47] *** Quits: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:31:00] <gwozniak> GNU ld is some damn awful code
[00:31:02] <feoh> #include <managing_volunteers_is_hard.h>
[00:31:06] <drobilla> Code review isn't very common in volunteer environments for obvious reasons
[00:31:14] *** Joins: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net)
[00:31:15] <drobilla> But GNU is... odd, in many ways
[00:31:19] <feoh> Also tbh it's kind of part of FSF culture
[00:31:47] <feoh> For sure
[00:32:24] <feoh> drobilla: Everybody wants to dump on Git but IMO PRs really facilitate that, even if people don't use them to their fullest always :)
[00:34:00] <drobilla> feoh: Meh.  Github's review thing is... passable.  But it's not really a technology problem, it's a social one.  Code review culture can be toxic in a way that is especially bad for open source
[00:34:34] <bmp> That's social though, as you point out. I think code review, as a concept, and as *often* implemented, is awesome: it's a chance for everyone to improve as developers, and for the product to be that much better.
[00:34:40] <drobilla> Especially when you go full-bore corporate mode and end up in the habit of telling other people to do shit it would take 1/10th the time to just do yourself.  Which the system kind of lends itself to.  It's tricky.
[00:34:47] <bmp> But it absolutely can devolve into a "your comma should be on the new line, not the end of that one" mode and stuff.
[00:35:07] <drobilla> I think it's overrated, to be honest, but it's useful
[00:35:21] <bmp> drobilla: The rule I've implemented when in a position to do so has been, "if your comment is something a linter could've dealt with, make the linter deal with it, and shut up until then"
[00:35:23] <drobilla> If a project has neither the aforementioned tests are infinitely more important IMO
[00:37:11] <feoh> I don't think it's over-rated at all. I think it's often not used well so people under-rate its usefulness.
[00:37:32] <feoh> I have worked with a senior dev who leveled up my coding skill by orders of magnitude entirely through CR
[00:37:34] <bmp> I'm with feoh, but I have also seen it go sideways very easily.
[00:37:40] <feoh> Sure me too
[00:37:41] <bmp> The B of BDFL needs to be very active for it to be okay.
[00:38:47] <feoh> bmp: Do I sense a fellow Pythonista? We're rare around these parts. Mostly folks who enjoy rending bits with their bright shiny teeth :)
[00:39:23] <feoh> (Except, oddly, for the folks who wrote, run, and maintain the site, and they use Ruby on Rails :))
[00:40:05] <bmp> feoh: I try not to bring that up, nor my involvement in hg, but yes. :)
[00:40:12] <feoh> ha!
[00:40:13] <bmp> I will be open to mostly doing stuff in Factor and Deno these days.
[00:40:33] <feoh> I love Factor and wish more people were working on it and writing about it
[00:40:58] <mockturtle> BugAlert.org Rapidly notify people of high-impact vulnerabilities [security] (spetz) https://lobste.rs/s/xvfgxa
[00:40:59] *** Quits: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:41:46] <feoh> I've never heard of Deno
[00:41:53] <bmp> We're still moving (slowly) to a 1.0 release. The issue is that everyone you know and love on that project (including me) has kids and a job at this point.
[00:42:04] <drobilla> feoh: Sure.  Agressive tooling and auto-formatting is the bare minimum price of admission for doing this in public
[00:42:07] <gwozniak> We rarely mention any formatting issues in our reviews.  It's considered unnecessary
[00:42:16] <feoh> Totally agree
[00:42:22] <bmp> feoh: Deno is Node with 100% hindsight. Unless you need to use JS, I'd ignore it, and I'm saying that as someone who does likeit.
[00:42:24] <feoh> But we also Black all the things in Python space :)
[00:42:49] <drobilla> Style nitpick bullshit is toxic *at work* where everyone is being paid to put up with bullshit.  Do that on PRs and you just lose contributors
[00:42:50] <gwozniak> It's also rare that something comes up for review that hasn't already been discussed by the team
[00:43:06] <feoh> Yup formatting nits are the pinnacle of bikeshedding
[00:43:26] <bmp> I'm explicitly saying I both like code review, and shut down/hate/etc. style issues being a part of them.
[00:43:42] <drobilla> I usually go the anti-Github-workflow route and just take PRs that are roughly good enough, check out that branch, and rebase the shit out it and do whatever I want and ultimately test and push it
[00:43:45] <feoh> Now, I've seen coworkers who were positively aggro about not following even the most basic style guidelines - like they wanted to use 2 space indent in their Python source as opposed to 4 that the entire community largely uses
[00:43:51] <feoh> And that's not great
[00:44:06] <drobilla> It's just a lot easier on everybody and I don't have to compromise on the level of quality I think the project requires, etc
[00:44:24] <bmp> drobilla: FWIW, Factor core used to do this; people got upset we were rewriting their code and then saying they did it.
[00:44:28] <bmp> You can't really win there.
[00:44:54] <drobilla> bmp: Without rewriting the author metadata where inappropriate, of course
[00:45:06] <drobilla> But yeah, some people don't like it.  Pretty rare in my experience though
[00:45:21] <drobilla> (and the ones who do are often those annoying people just looking for Github contribution points for their resume or whatever, so fuck them anyway)
[00:45:26] <bmp> You're misunderstanding: they wrote a mostly-good PR; we would tweak naming or formatting or whatever to match the existing code; then they'd be upset we landed it with their author line, but not verbatim the PR.
[00:45:36] <bmp> And this is in Git, which separates the concepts of author and committer.
[00:46:21] <drobilla> bmp: The first rule of Internet is that somebody will always hate X, for all X :)
[00:46:31] <drobilla> bmp: But different communities would land differently on this one I imagine
[00:46:57] <drobilla> I'd still bet that the... not-that... approach is better a good 90% of the time
[00:47:15] *** Joins: witx (~witx@a94-132-168-30.cpe.netcabo.pt)
[00:48:34] <bmp> Depends on what you're focusing on, if I'm honest. I find a lot of value in every commit building. I'm not a "must rebase" guy, but I am a "every commit/changeset/whatever should build and pass tests" guy.
[00:48:45] <bmp> You'd be surprised how often that basic minimal target isn't met in PRs on open-source products.
[00:49:06] <drobilla> bmp: Me too.  Which is a big reason why I just do it myself
[00:49:38] <bmp> Roger. So just to be clear, we're not actually disagreeing as such; there's just some debate on where the line is, is what I'm getting.
[00:49:51] <drobilla> Knowing how to do interactive rebases and change things and test along the way and such is *way* above what your average semi-casual git user / contributor knows how to do
[00:50:03] <iDrougge> Indeed.
[00:50:06] <drobilla> bmp: Sure.  No right answers here
[00:50:24] <bmp> Cool. To be clear, I'm just trying to learn/make sure I understand where we differ here.
[00:50:49] <bmp> I love that tech is where I can be doing it for two decades and still learn new approaches/ideas/etc. every day.
[00:52:08] <drobilla> I guess if you really want to be maximally "inclusive" or whatever, you can ask up front how they want the PR to go
[00:52:32] <drobilla> Sort of along the lines of "push fixups, not nitpick comments" things you see in some places
[00:52:57] *** Quits: rhn (~rhn@user/rhn) (Ping timeout: 256 seconds)
[00:53:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[01:05:41] *** Joins: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net)
[01:08:20] <mockturtle> Zig Strings in 5 minutes [zig] (huytd) https://lobste.rs/s/nimeia
[01:17:16] <c355E3B> Hey so random question, is there anything like ansible/chef but "new".
[01:17:29] <c355E3B> I'm having to do vendor selection soon in the space and I'm wondering if there is anything I'm missing.
[01:17:37] <bkero> salt?
[01:17:40] <bkero> cfengine?
[01:18:59] <c355E3B> cfengine has been around for a while
[01:19:17] <c355E3B> Wondering if the space is as small as it was last time I looked
[01:19:25] <c355E3B> also thinking: what if I made my own?
[01:19:56] <dutchie> iDrougge: the wikipedia page for windows-1252
[01:21:04] <defect> i think ansible and chef are still the most popular. we used puppet at my last job, but haven't heard much about it lately
[01:21:43] <c355E3B> I want to avoid Chef after the Progress aquisition
[01:21:54] <c355E3B> I know a lot of people who got burned on that one.
[01:22:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:23:01] *** Joins: boredcaveman (~boredcave@user/boredcaveman)
[01:25:04] <indigo> I was going to say Pulumi, but that's more of a Terraform alternative
[01:25:47] *** Quits: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:26:10] <feoh> c355E3B No, for the simple reason that so much is going cloud now that for people running their own DCs or clusters they've pretty much settled on Ansible, which is why Redhat bought it. It's under active development along with its Tower management interface. tbh I don't love it but this isn't about my preferences :)
[01:26:32] <c355E3B> :/
[01:26:38] <feoh> The only other contender isn't new BUT grizzled long time sysadmins almost universally favor it, and that's Puppet.
[01:26:48] <c355E3B> :/ :/ :/
[01:26:57] <c355E3B> Ok, I'm at the "write my own" point.
[01:27:06] <feoh> Ooh then check out Pyinfra
[01:27:44] <feoh> (If you tell me you're gonna create your own artisenally crafted configuration management system in RISC-V assembler I'm gonna run screaming bashing holes through several walls as I do, Zork-1 Cyclops style :)
[01:28:18] <drakonis> pyinfra?
[01:28:19] <feoh> c355E3B: https://pyinfra.com/
[01:28:19] <mockturtle> [ pyinfra automates infrastructure super fast at massive scale ] - pyinfra.com
[01:28:20] <drakonis> yyyyyyyyyy
[01:28:23] <c355E3B> Well I was going to make chef but in rust with augeas lenses...
[01:28:39] <drakonis> okay but i've seen a dozen of these yet
[01:28:44] <drakonis> so far
[01:28:44] <feoh> It's got a feature that I freaking LONVE
[01:29:14] <feoh> and that's the fact that it doesn't make the mistake of creating its own "simple" DSL which ends up being either anything but or a tire fire when you need to do anything at all complex
[01:29:20] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[01:29:25] <feoh> Love even :)
[01:29:34] <drakonis> propeller and consfigurator are exactly like it
[01:29:37] <drakonis> no dsls
[01:29:48] <drakonis> everything's done with the language's syntax
[01:29:56] <drobilla> At this point I unironically believe that one should need a license to write a grammar
[01:29:56] <feoh> Not seen those, thanks for the pointers, but yeah ^^^ I am so here for this
[01:30:24] <wink> bkero: how would salt be newer or better?
[01:30:34] <feoh> I spent years in the Chef community having to explain to new folks the ultra crazed almost nonsensical phased evaluation model
[01:30:53] <wink> feoh: that is weird, I think puppet is mostly dead
[01:30:54] <feoh> And it made me :\
[01:31:17] <wink> not a lot of admin love, really
[01:31:17] <drakonis> https://propellor.branchable.com/
[01:31:18] <mockturtle> [ propellor: deploying properties to hosts with haskell ] - propellor.branchable.com
[01:31:29] *** Ellenor is now known as Reinhilde
[01:31:29] <drakonis> https://spwhitton.name/tech/code/consfigurator/
[01:31:30] <mockturtle> [ consfigurator ] - spwhitton.name
[01:31:38] <feoh> wink: Nah, honest, it's just being used by people who don't post to places like lobsters a lot. There are a LOT of sites running it very quietly because it's not shiny
[01:31:40] <wink> c355E3B: I think the "newest" thing is actually nix. the most common ansible.
[01:31:57] <wink> feoh: or because they're stuck in 2013
[01:31:59] <drakonis> guix and nix are the current options
[01:32:14] <c355E3B> yeah...
[01:32:15] <drakonis> but they require total submission
[01:32:19] <wink> feoh: I used puppet in anger for years and it was only nice because there was nothing better
[01:32:31] <c355E3B> I'm afraid of how nix would work with databases.
[01:32:35] <drakonis> propellor and consfigurator are haskell and common lisp
[01:32:37] <drakonis> it does not
[01:32:41] <drakonis> its horrid
[01:32:43] <drakonis> hold on
[01:32:52] <wink> disclaimer: have been out of SRE/ops stuff for 4y now
[01:32:53] <drakonis> https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/services/databases/postgresql.nix
[01:32:54] <mockturtle> [ nixpkgs/postgresql.nix at master · NixOS/nixpkgs ] - github.com
[01:33:05] <drakonis> hard pass
[01:33:11] <feoh> c355E3B: I know Python is un-cool around here but honest it is exactly the level of abstraction you want for CM tasks
[01:33:12] *** Quits: jmw (~jmw@user/jmw) (Quit: jmw)
[01:33:44] <feoh> Dorking around with memory management when you're trying to build incredibly high level constructs like pieces of infrastructure is not a good fit from my experience
[01:33:53] <c355E3B> Fair point, good chunk of this is a team decision
[01:33:58] <c355E3B> I just want options
[01:33:58] <drakonis> warning: propellor is raw haskell and consfigurator is common lisp
[01:34:05] <drakonis> no dsls on either
[01:34:09] <c355E3B> and really Augeas support
[01:34:13] <wink> c355E3B: I think the major point (for me) has usually been: is it push or pull and how do you consolidate the facts about your world. the implementation stuff is kinda boring detail
[01:34:34] <companion_cube> feoh: disagree, python is too messy and it's too easy to pull shit that will only work on your machine
[01:34:46] <companion_cube> I think Go has shown it's a good fit for pieces of infrastructure
[01:34:48] <feoh> companion_cube: Hard disagree
[01:35:06] <feoh> Go is awesome for *writing* configuration management tools
[01:35:08] <feoh> see Terraform
[01:35:16] <companion_cube> oh you mean as a DSL?
[01:35:25] <feoh> No. See above conversation :)
[01:35:41] <c355E3B> Terraform has scared me too many times
[01:35:51] <wink> like.. in the era of many small VMs - puppet was horrible.
[01:36:01] <feoh> c355E3B: Meta-advice - find the person on your team who like me, finds building infrastructure SHINY and exciting
[01:36:02] <wink> the overhead of that ruby agent on every single one. ugh
[01:36:24] <companion_cube> feoh: to me seems like you mean a DSL
[01:36:27] <feoh> c355E3B: Otherwise you will get people who want to implement it in some wild ass language that is INCREDIBLE for their day to day tasks but awful for implementing CM
[01:36:29] <wink> and cfengine was a trainwreck of usability in the early 2010s
[01:36:50] <companion_cube> like either you roll your own, or you use ruby/python/lua
[01:37:03] <companion_cube> (possibly an interesting middle ground is languages designed for that, like starlark?)
[01:37:06] <c355E3B> feoh: we are hiring btw ;]
[01:37:10] <feoh> companion_cube: Respectfully, seriously read the scrollback. We're explicitly NOT talking about a DSL! It's why I suggested pyinfra and others suggested propeller and something else
[01:37:49] <feoh> c355E3B: Ha thanks I work for the evil mothership and quite enjoy it. Prince of forking darkness that I am, but thanks for thinking of me :)
[01:38:07] <companion_cube> feoh: by "DSL" here I mean using the language itself
[01:38:24] <companion_cube> I mean, writing your configuration directly in python/ruby/lua instead of a custom language, that's the choice, right?
[01:38:33] <feoh> OK that's an important distinction
[01:38:34] <feoh> yes
[01:38:45] <feoh> I hear DSL I think things like Ansible or Chef which use things like YAML
[01:38:49] <c355E3B> Oh speaking of which I ran into a disk issue today, wasn't something you own but was thinking of your stuff
[01:38:52] <feoh> Or Puppet for that matter I think
[01:39:04] <c355E3B> Someone went and put a database on spinning drives
[01:39:04] <companion_cube> or, alternatively: you need a DSL for these, so you have the choice between rolling a custom thing, or using an existing language directly, which is what I was alluding to
[01:39:07] <c355E3B> and its not going well
[01:39:15] <companion_cube> yeah a yaml language will always suck ass
[01:39:20] <feoh> I've only ever heard of "DSL" defined as "domain specific language"
[01:39:32] <companion_cube> sure, and a library in python for doing stuff is a form of that
[01:39:37] <feoh> Where it's actually a new syntax, not the programming language itself
[01:39:42] <feoh> Sure. Anyway, yes, that :)
[01:39:43] <companion_cube> like, numpy is a DSL
[01:39:49] <companion_cube> even though it's directly in python
[01:40:13] <drakonis> also guix and nix use dsls
[01:40:14] <c355E3B> in Ruby DSLs use the existing syntax, and a mess of blocks
[01:40:15] <drakonis> in a way
[01:40:18] <drakonis> mind you
[01:40:26] *** Quits: boredcaveman (~boredcave@user/boredcaveman) (Quit: WeeChat 3.4)
[01:40:32] <wink> puppet dsl was also horrible
[01:40:42] <feoh> c355E3B: Blocks are the one killer feature I really miss about Ruby
[01:40:47] <feoh> So elegant in so many ways
[01:40:55] <companion_cube> and vagrant, drakonis
[01:41:00] <drakonis> ah vagrant
[01:41:03] <drakonis> but it does not compare
[01:41:26] <drakonis> vagrant is for spinning up vms
[01:41:32] <companion_cube> yeah but it's also a ruby based DSL
[01:41:54] <companion_cube> nix has its own DSL but guix reuses scheme, so they're kind of opposite here?
[01:41:56] <feoh> c355E3B: Anyway good luck with your search. Sadly much though I severely dislike Ansible if it really is a team deicision I'd consider it, if only because then you can also hire $DEVOPS_ENGINEER off the street and make THEM do it if you grow to that point :)
[01:41:58] <drakonis> yes
[01:42:07] <drakonis> it reuses scheme but exposes a dlc with escape hatches to scheme
[01:42:09] <wink> vagrant did have a good puppet integration
[01:42:10] <drakonis> dsl
[01:42:33] <feoh> Though it makes me cringe Ansible is becoming pretty much the bog standard for DC managed infrastructure.
[01:42:36] <drakonis> does work quite well
[01:42:56] <drakonis> i want to roll my own system management thingamabob
[01:43:01] <drakonis> but in common lisp :v
[01:43:03] <wink> I don't
[01:43:07] <drakonis> i dont even know what i want to call it yet
[01:43:12] <wink> but I'd like a good new alternative that works via ssh
[01:43:23] *** Joins: shapr (~user@2601:7c0:c202:5190:e39f:2980:57ec:6939)
[01:43:23] <drakonis> hmm
[01:43:49] *** Joins: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net)
[01:44:04] <drakonis> hmm guix does
[01:44:12] <drakonis> but again, it requires you to submit to it
[01:44:26] <drakonis> can only deploy if it is installed as a system
[01:44:41] <drakonis> propeller and consfigurator use ssh iirc
[01:44:50] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[01:45:12] <drakonis> https://hackage.haskell.org/package/propellor-5.13/docs/Propellor-Property-Ssh.html
[01:45:12] <mockturtle> [ Propellor.Property.Ssh ] - hackage.haskell.org
[01:45:24] <drakonis> https://spwhitton.name/doc/consfigurator/connections.html
[01:45:24] <mockturtle> [ Connections — Consfigurator 0.12.2 documentation ] - spwhitton.name
[01:47:46] <feoh> tbh the tricky thing about configuration and infra management is that everybody who does more algorithmically complex development makes the mistake of thinking such systems are throw-away easy, and then when they go to try to build one they learn that they are just plain wrong, NOT due to algo complexity but domain complexity.
[01:49:21] *** Joins: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl)
[01:49:22] <c355E3B> true
[01:49:45] *** Quits: witx (~witx@a94-132-168-30.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[01:49:51] <c355E3B> which is why when I do my algorithmically complex attempt, I'll use an even more complex algorithm and succeed!
[01:49:59] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[01:50:11] <feoh> alol
[01:50:18] <feoh> I feel like you're quoting from The Princess Bride
[01:50:31] <drakonis> hmmm
[01:50:53] <drakonis> i think the one thing that guix and nix have done right is immutability
[01:51:19] <companion_cube> feoh: being really naive here, but is there an advantage to using puppet/chef/… compared to nomad/k8s/… ?
[01:51:27] <companion_cube> like is it a question of whether or not you want containers?
[01:51:45] <feoh> c355E3B: IN particular something like: "What you do not smell is called iocane powder. It is odorless, tasteless, dissolves instantly in liquid and it is among the more deadly poisons known to man."
[01:52:01] <feoh> companion_cube: You're comparing apples and oranges
[01:52:12] <feoh> k8s is tech for orchestrating and clustering containers
[01:52:56] <feoh> chef and puppet are tech for building infrastructure and maintaining configuration / state on a fleet of servers that are persistent - e.g. you don't treat them like bits of cloud and spin them up and down on a whim
[01:53:56] <companion_cube> hmmmm, so k8s doesn't have a "hosted" solution where it manages a pool of actual servers?
[01:53:58] <defect> we built our on-prem k8s cluster with puppet 2.7 at my last job. it was a beautiful mess of shiny new and ancient awfulness
[01:54:00] *** Quits: drobilla (~user@198-84-224-189.cpe.teksavvy.com) (Quit: The boot, the boot, the boot is on... uh... re?)
[01:54:21] <drakonis> there's nothing better than being able to track system configuration changes and ensure that no drift happens
[01:54:29] <feoh> companion_cube: k8s can be run on anything from cloud to bare metal
[01:55:35] <feoh> drakonis: For sure when you're maintaining a sizable fleet of servers it's critical. Before I joined AMZN I worked for Carbonite and we managed a fleet of 1K servers which I thought was zomg large at the time :) We used Chef which is where I grew to loathe it (Chef :) )
[01:55:52] <drakonis> gosh
[01:55:58] <companion_cube> alright, so if you can run your fleet of servers with k8s
[01:56:02] <drakonis> that is indeed large.
[01:56:06] <drakonis> i will be honest though
[01:56:14] <companion_cube> the difference is whether you want persistent services, or to spin them up and down based on demand?
[01:56:17] <drakonis> i'm excited to finally have something i want to do and can do
[01:56:28] <c355E3B> that is always nic3e
[01:56:31] <feoh> drakonis: Congratulations!
[01:57:33] <feoh> companion_cube: There's no connection. k8s is a thing that helps you take containers, *whatever* they're running on, and orchestrate them (spin them up or down, deploy new software) and cluster them (create load balancers etc etc)
[01:58:04] <feoh> Anyway gotta run folks have a great one!
[01:58:15] <companion_cube> if you have a collection of services, that's a valid way of running them, no?
[01:58:24] <companion_cube> seems to me like you can either run your services in containers via k8s
[01:58:32] <companion_cube> or via puppet/chef/… ?
[01:58:48] <defect> but k8s is a service in itself, that needs a couple of machines to run on
[01:59:12] *** Parts: afon (~afon@user/afon) ()
[01:59:18] <companion_cube> that's what I was asking earlier about using k8s to manage actual servers :s
[01:59:41] <defect> i think there are some experimental projects around that. but it does get to a bit of a chicken and egg problem, right?
[02:00:01] *** Quits: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:02:02] *** Joins: moose (~moose@user/moose)
[02:03:13] *** Quits: mahmutov (~mahmutov@37.155.64.87) (Ping timeout: 256 seconds)
[02:05:56] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[02:07:58] <mockturtle> Elixir and Machine Learning: Nx v0.1 released [release elixir ai] (hauleth) https://lobste.rs/s/t8mqnz
[02:12:25] *** Quits: strugee (~strugee@ool-4575d6b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:15:51] *** Joins: strugee_ (~strugee@ool-4575d6b1.dyn.optonline.net)
[02:17:52] *** Joins: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net)
[02:21:01] *** Joins: znedw54 (~znedw@home.znedw.com)
[02:25:27] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[02:27:43] *** Quits: tex (~super@user/dix) (Ping timeout: 256 seconds)
[02:36:38] *** Quits: voltage_ (voltage@user/voltage) (Quit: Leaving)
[02:39:26] *** Quits: znedw54 (~znedw@home.znedw.com) (Quit: The Lounge - https://thelounge.chat)
[02:44:26] *** Joins: znedw54 (~znedw@home.znedw.com)
[02:46:39] *** Quits: znedw54 (~znedw@home.znedw.com) (Client Quit)
[02:53:26] *** Quits: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:56:35] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:57:17] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6) (Ping timeout: 240 seconds)
[02:58:37] *** Joins: rne_ (~rne@81.190.59.40)
[03:14:57] *** Quits: shapr (~user@2601:7c0:c202:5190:e39f:2980:57ec:6939) (Ping timeout: 240 seconds)
[03:20:06] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Read error: Connection reset by peer)
[03:22:05] *** Joins: vicfred (~vicfred@user/vicfred)
[03:30:14] *** Quits: gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[03:34:20] *** Joins: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net)
[03:42:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:42:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:43:26] *** Quits: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:48:25] *** Joins: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net)
[04:00:43] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:58] *** Quits: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:05:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:08:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[04:08:50] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[04:09:58] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Client Quit)
[04:12:02] *** Joins: elmc212 (~tb@i5E866678.versanet.de)
[04:14:46] *** Joins: kstatz12 (~karl.stat@205.178.87.116)
[04:17:37] *** Quits: ke5c2fin (~ke5c2fin@c-67-176-119-108.hsd1.co.comcast.net) (Quit: Connection closed)
[04:20:05] <mockturtle> GNU Parallel's 20th birthday [historical] (mjgardner) https://lobste.rs/s/pt5pli
[04:23:52] *** Joins: ke5c2fin (~ke5c2fin@c-67-176-119-108.hsd1.co.comcast.net)
[04:25:14] *** Quits: elmc212 (~tb@i5E866678.versanet.de) (Quit: i'll probably be back soon)
[04:25:35] *** Joins: elmc212 (~tb@i5E866678.versanet.de)
[04:26:25] *** Quits: elmc212 (~tb@i5E866678.versanet.de) (Client Quit)
[04:29:04] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[04:29:15] *** Joins: avamia (~avamia@102.129.215.242)
[04:32:15] <mockturtle> Determinism Bugs, Part Two, Kernel32.dll [windows debugging] (calvin) https://lobste.rs/s/ronktg
[04:32:37] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[04:35:20] <mockturtle> Filling in some gaps in the story of Space Cadet Pinball on 64-bit Windows [windows historical] (calvin) https://lobste.rs/s/tutknz
[04:36:05] <mockturtle> BSoD to Watson: The Reliability Journey [windows practices historical] (calvin) https://lobste.rs/s/xmm7bi
[04:39:29] <Church> feoh: So when I came on to current job I moved us from puppet to salt (in hindsight Ansible had some niceties I like now), that puppet codebase was so much copy and paste it horrified me
[04:39:43] <Church> 35k loc, 5k de-duped I think
[04:43:18] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:57:29] <drakonis> HAHAHA YES MACROS
[04:57:34] <drakonis> now see here
[04:57:40] *** Quits: bauruine (~stefan@2001:8e0:146d:dead:2c1e:2631:b2d:adc4) (Remote host closed the connection)
[04:57:41] <drakonis> this is why macros are good :V
[05:04:09] *** Quits: JordiGH (~jordi@user/jordigh) (Remote host closed the connection)
[05:05:48] *** Joins: oldfolio (~oldfolio@h184.131.89.75.dynamic.ip.windstream.net)
[05:09:54] <jgw> drakonis: yellow boxes?
[05:21:26] *** Joins: z3t0 (~z3t0@146.71.14.98)
[05:32:55] *** Joins: ClashTheBunny7 (~ClashTheB@user/ClashTheBunny)
[05:33:34] *** Quits: Lanny (~Lanny@2600:1700:5f60:d2f:8468:ff44:88cf:d0da) (Quit: Leaving)
[05:34:09] *** Quits: ClashTheBunny (~ClashTheB@user/ClashTheBunny) (Ping timeout: 256 seconds)
[05:34:10] *** ClashTheBunny7 is now known as ClashTheBunny
[05:34:41] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[05:36:59] *** Joins: supersandro20006 (~supersand@i5c757f36.versanet.de)
[05:36:59] *** supersandro2000 is now known as Guest7999
[05:36:59] *** supersandro20006 is now known as supersandro2000
[05:39:07] *** Quits: Guest7999 (~supersand@i5C757B07.versanet.de) (Ping timeout: 256 seconds)
[05:39:30] <drakonis> jgw: yellow boxes?
[05:40:44] <jgw> drakonis: ah different drakonis, sorry.
[05:47:58] *** Joins: califax- (~califax@user/califx)
[05:48:46] *** Parts: oldfolio (~oldfolio@h184.131.89.75.dynamic.ip.windstream.net) (Leaving)
[05:49:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:49:34] *** califax- is now known as califax
[05:58:07] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:05:25] *** Joins: resistite|laptop (~resistite@89.45.224.238)
[06:14:57] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[06:23:02] <feoh> Church: I have no strong feelings about Puppet, just observing that many, MANY long time sysadmins that I know and have worked with seem to love love LOVE it
[06:25:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com)
[06:27:58] <Church> Heh fair
[06:28:06] <Church> Don't fix what ain't broke
[06:28:19] <drakonis> https://twitter.com/nodefunallowed/status/1479217034089332736
[06:28:21] <drakonis> lmbo
[06:28:50] <drakonis> if you click on the next tweet, you'll see burntsushi ask for benchmarks
[06:37:24] <companion_cube> what is OMRN?
[06:38:58] <companion_cube> (to be fair, I think I mostly use the glob fragment of ripgrep, the one that's insanely fast anyway)
[06:39:37] <drakonis> https://github.com/telekons/one-more-re-nightmare
[06:39:38] <mockturtle> [ GitHub - telekons/one-more-re-nightmare: A fast regular expression compiler in Common Lisp ] - github.com
[06:41:37] <mockturtle> Do You Speak the Lingo? [reversing games] (calvin) https://lobste.rs/s/pozyxq
[06:45:16] *** Joins: shapr (~user@2601:7c0:c202:5190:f139:f199:c0b7:ebd5)
[06:47:57] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-d550-b607-3a0a-ff7b.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:12:04] *** Joins: danderson (~dave@tailscale/danderson)
[07:14:57] *** Quits: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl) (Ping timeout: 240 seconds)
[07:15:51] *** Quits: shapr (~user@2601:7c0:c202:5190:f139:f199:c0b7:ebd5) (Remote host closed the connection)
[07:16:13] *** Quits: ke5c2fin (~ke5c2fin@c-67-176-119-108.hsd1.co.comcast.net) (Quit: Connection closed)
[07:16:17] *** Quits: resistite|laptop (~resistite@89.45.224.238) (Ping timeout: 240 seconds)
[07:27:35] *** Joins: solocshaw (~Thunderbi@gateway/vpn/pia/solocshaw)
[07:30:53] *** Quits: kstatz12 (~karl.stat@205.178.87.116) (Remote host closed the connection)
[07:34:47] *** Joins: shapr (~user@2601:7c0:c202:5190:ca94:a895:80bc:42cf)
[07:38:08] *** Quits: fkaa (~fkaa@user/fkaa) (Remote host closed the connection)
[07:49:46] *** Joins: rhn (~rhn@user/rhn)
[07:57:55] <companion_cube> interesting, I guess
[07:58:11] <companion_cube> but now the guy must benchmark against ripgrep to keep credibility
[08:01:51] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[08:02:57] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[08:12:07] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:12:56] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[08:19:01] *** Joins: Sabry (~Sabry@197.37.73.173)
[08:20:14] *** Joins: atw (~user@2601:5c2:c500:76b0::67e2)
[08:20:18] *** Quits: avamia (~avamia@102.129.215.242) ()
[08:23:18] *** Quits: Sabry (~Sabry@197.37.73.173) (Client Quit)
[08:23:30] *** Joins: SabryTarek (~SabryTare@197.37.73.173)
[08:25:09] *** Quits: ClashTheBunny (~ClashTheB@user/ClashTheBunny) (Ping timeout: 256 seconds)
[08:56:08] *** Joins: ClashTheBunny (~ClashTheB@user/ClashTheBunny)
[09:04:47] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[09:06:37] *** Quits: timj (~timj@user/timj) (Ping timeout: 240 seconds)
[09:13:11] *** Quits: shapr (~user@2601:7c0:c202:5190:ca94:a895:80bc:42cf) (Remote host closed the connection)
[09:13:29] *** Joins: shapr (~user@2601:7c0:c202:5190:d7e6:1445:a66d:b9b1)
[09:21:52] *** Joins: timj (~timj@user/timj)
[09:23:13] *** Joins: kawpuh (~kawpuh@66.42.81.80)
[09:28:12] *** Joins: rhn_mk1 (~rhn@user/rhn)
[09:28:37] *** Quits: rhn (~rhn@user/rhn) (Ping timeout: 256 seconds)
[09:35:37] *** Quits: MerchantOfVenice (~patrick@user/merchantofvenice) (Quit: Konversation terminated!)
[09:37:55] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[09:39:03] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:55:49] *** Quits: jjuran (~jjuran@c-73-172-196-113.hsd1.va.comcast.net) (Ping timeout: 256 seconds)
[09:57:29] <bkero> but is ripgrep's syntax turing-complete?
[10:05:09] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.186)
[10:17:25] *** Joins: jjuran (~jjuran@c-73-172-196-113.hsd1.va.comcast.net)
[10:22:28] *** Quits: SabryTarek (~SabryTare@197.37.73.173) (Ping timeout: 256 seconds)
[10:26:04] <mockturtle> Understanding the Impact of Apache Log4j Vulnerability [security java] (Sergiu) https://lobste.rs/s/wum7ok
[10:41:16] *** Joins: varjag (~user@188.95.247.249)
[10:42:57] *** Quits: atw (~user@2601:5c2:c500:76b0::67e2) (Ping timeout: 240 seconds)
[10:59:25] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:07:41] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:12:09] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:12:24] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:42:08] *** Joins: tex (~super@user/dix)
[11:54:20] *** Joins: voltage_ (voltage@user/voltage)
[12:02:28] *** Joins: reneeontheweb (~reneeonth@90-228-217-81-no236.tbcn.telia.com)
[12:03:37] *** Quits: shapr (~user@2601:7c0:c202:5190:d7e6:1445:a66d:b9b1) (Ping timeout: 240 seconds)
[12:07:29] *** Joins: bauruine (~stefan@2001:8e0:146d:dead:42ee:5cc9:77de:e984)
[12:13:59] *** Joins: Brumaire (~quassel@37.166.249.26)
[12:14:17] *** Quits: oh_lawd (~ohlawdnau@static.224.195.181.135.clients.your-server.de) (Ping timeout: 240 seconds)
[12:21:36] *** Joins: elmc212 (~tb@i5E8666C3.versanet.de)
[12:27:14] *** Quits: jjuran (~jjuran@c-73-172-196-113.hsd1.va.comcast.net) (Quit: Killing Colloquy first, before it kills me…)
[12:27:30] *** Joins: jjuran (~jjuran@c-73-172-196-113.hsd1.va.comcast.net)
[12:34:41] *** Joins: gabriele (~gabriele@user/gabriele)
[12:42:30] *** Quits: elmc212 (~tb@i5E8666C3.versanet.de) (Quit: i'll probably be back soon)
[12:47:49] *** Quits: reneeontheweb (~reneeonth@90-228-217-81-no236.tbcn.telia.com) (Remote host closed the connection)
[13:00:29] *** Joins: off^ (~off@207.5.21.20)
[13:05:15] *** Quits: Brumaire (~quassel@37.166.249.26) (Quit: ran away)
[13:05:36] *** Joins: Brumaire (~quassel@37.166.249.26)
[13:14:32] *** Joins: reneeontheweb (~reneeonth@90-228-217-81-no236.tbcn.telia.com)
[13:16:33] <mockturtle> Crystal 1.3.0 is released [release] (sanxiyn) https://lobste.rs/s/siqcgd
[13:24:03] <mockturtle> Exciting recent developments for Fortran coders [fortran] (kidon) https://lobste.rs/s/3uhysb
[13:28:26] *** Quits: gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[13:28:58] *** Quits: pylbrecht (~pylbrecht@5.189.144.194) (Quit: o/)
[13:29:06] *** Joins: pylbrecht (~pylbrecht@5.189.144.194)
[13:49:42] *** Joins: seschwar (~seschwar@user/seschwar)
[13:51:44] <mockturtle> command-line transactional consistency checker for black-box databases [databases distributed testing] (sergeyb) https://lobste.rs/s/xhah3l
[14:02:20] *** Joins: vind (~vind@p200300c3ff0a9d00f9835554c2547c4b.dip0.t-ipconnect.de)
[14:02:35] <mockturtle> Paxos [distributed] (acatton) https://lobste.rs/s/bsrsbm
[14:09:07] *** Quits: varjag (~user@188.95.247.249) (Ping timeout: 256 seconds)
[14:14:01] *** Joins: cdown (~cdown@163.114.131.1)
[14:14:50] *** Joins: gabriele (~gabriele@user/gabriele)
[14:21:36] <mockturtle> PinePhone battery discharge curve [mobile hardware osdev] (tonyg) https://lobste.rs/s/x9w39m
[14:24:25] *** Quits: Brumaire (~quassel@37.166.249.26) (Ping timeout: 256 seconds)
[14:24:47] *** Joins: Brumaire (~quassel@37.172.143.113)
[15:02:38] *** Joins: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl)
[15:05:37] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 240 seconds)
[15:07:37] *** Quits: Brumaire (~quassel@37.172.143.113) (Ping timeout: 240 seconds)
[15:08:26] *** Joins: Brumaire (~quassel@81-64-14-121.rev.numericable.fr)
[15:26:45] *** Quits: tbbr (~tbbr@user/tbbr) (Ping timeout: 256 seconds)
[15:33:27] *** Joins: varjag (~user@188.95.247.249)
[15:56:11] *** Joins: califax- (~califax@user/califx)
[16:00:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[16:00:33] *** califax- is now known as califax
[16:05:20] <companion_cube> bkero: thankfully, no
[16:27:13] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[16:34:38] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[16:38:16] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[16:40:53] <mockturtle> Tracing in Linux and macOS [linux mac] (nalzok) https://lobste.rs/s/kd568j
[16:42:54] *** Quits: KerusEnfau (~EnfauKeru@gateway/tor-sasl/enfaukerus) (Remote host closed the connection)
[16:43:17] *** Joins: KerusEnfau (~EnfauKeru@gateway/tor-sasl/enfaukerus)
[16:47:44] <mockturtle> Lazarus Release 2.2.0 [release] (raymii) https://lobste.rs/s/iu5hgf
[16:51:16] *** Joins: oldfolio (~oldfolio@h184.131.89.75.dynamic.ip.windstream.net)
[16:54:50] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[16:56:49] *** Joins: llh (~llh@user/llh)
[17:03:39] <mockturtle> Rails Postgres Native Partitioning [ruby databases] (soulcutter) https://lobste.rs/s/eqqhex
[17:12:55] <mockturtle> Ruby: How to Run a Rack app in a Background Thread [ruby] (jnunemaker) https://lobste.rs/s/mrkanc
[17:18:51] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:25:49] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[17:37:10] *** Quits: dminkovsky (~user@user/dimadima) (Quit: leaving)
[17:37:47] <kriive> hello there how's everyone doing
[17:37:49] *** Joins: cdown_ (~cdown@188.214.11.14)
[17:38:16] <kriive> first friday of 2022
[17:38:17] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[17:38:24] *** cdown_ is now known as cdown
[17:38:39] <bsandro> salutations. fairly well, despite production mysql master dying on me
[17:38:47] *** Joins: cdown_ (~cdown@163.114.131.1)
[17:40:48] <kriive> bsandro: fridays, huh?
[17:41:31] <mockturtle> What you can learn by merely writing a programming language changelog [ruby practices] (napkindrawing) https://lobste.rs/s/7v1w4s
[17:42:18] *** Joins: welshdave (~welshdave@cpc1-sket4-2-0-cust112.7-3.cable.virginm.net)
[17:42:31] <bsandro> kriive: it is still holidays here
[17:42:37] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 240 seconds)
[17:42:43] <bsandro> motherland gets up to 10 days off for new years
[17:42:45] *** cdown_ is now known as cdown
[17:42:49] *** Joins: xkuru (~xkuru@user/xkuru)
[17:45:03] <varjag> v.v.v
[17:45:03] <mockturtle> (\/)_!_!_(\/)
[17:45:21] <mockturtle> Let’s Use An Automated Theorem Prover To Verify Video Games; I Swear This Is More Fun Than It Sounds [video games slides formalmethods] (calvin) https://lobste.rs/s/5cbdrf
[17:46:56] <mockturtle> Unidentified PC DOS 1.1 Boot Sector Junk Identified [historical] (calvin) https://lobste.rs/s/jqkepl
[17:47:10] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[17:48:15] *** Quits: welshdave (~welshdave@cpc1-sket4-2-0-cust112.7-3.cable.virginm.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:48:46] *** Joins: oldfolio_ (~mm@h184.131.89.75.dynamic.ip.windstream.net)
[17:50:04] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:50:34] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[17:52:21] *** Joins: cation (cation@user/cation)
[17:57:20] *** Quits: oldfolio_ (~mm@h184.131.89.75.dynamic.ip.windstream.net) (Quit: WeeChat 3.0)
[18:00:07] <pushcx> ^^ that actually sounds like quite a lot of fun
[18:04:04] <pushcx> Z3 is really neat. When I was at Recurse Center I saw someone use it to solve crosswords. And then built another system on Z3 it to _generate_ crosswords. The user could fill in any answers they wanted and it would find words to fill the rest of the puzzle.
[18:06:48] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[18:09:04] <kline> oh hey
[18:09:13] <kline> someone finally demonstrating the practical applications
[18:10:04] <kriive> Z3 is used in a lot of CTF challenges
[18:11:48] <epilys> pushcx, you should checkout Prolog! (Art of Prolog is one of my favorite CS books)
[18:12:32] *** Joins: leodavinci (~leodavinc@59.91.78.212)
[18:13:33] <mockturtle> What are you doing this weekend? [programming ask] (caius) https://lobste.rs/s/xggozp
[18:13:55] *** Quits: asterism (~leodavinc@59.91.78.152) (Ping timeout: 256 seconds)
[18:15:44] *** Joins: welshdave (~welshdave@cpc1-sket4-2-0-cust112.7-3.cable.virginm.net)
[18:15:47] *** Quits: welshdave (~welshdave@cpc1-sket4-2-0-cust112.7-3.cable.virginm.net) (Client Quit)
[18:15:54] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[18:20:23] <mockturtle> The easy PHP Library for calculating holidays [php] (clemherreman) https://lobste.rs/s/qggwhi
[18:24:05] *** Joins: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl)
[18:27:05] *** Quits: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl) (Client Quit)
[18:28:47] *** Joins: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl)
[18:34:52] *** Joins: JordiGH (~jordi@user/jordigh)
[18:35:07] *** Quits: gera (~gera@user/gera) (Quit: ZNC 1.8.2 - https://znc.in)
[18:36:25] *** Joins: gera (~gera@user/gera)
[18:37:52] *** Joins: afrosenp1i (~afrosenpa@li642-224.members.linode.com)
[18:38:17] <companion_cube> kline: there's a lot of practical applications, they're just in niche domains
[18:40:13] *** Quits: gera (~gera@user/gera) (Client Quit)
[18:40:16] <kline> companion_cube, lobsters just gets a lot of demos that dont really show how its at all practical in writing software
[18:40:31] *** Joins: gera (~gera@user/gera)
[18:40:53] *** Joins: oldfolio_ (~oldfolio@h184.131.89.75.dynamic.ip.windstream.net)
[18:41:13] *** Joins: boredcaveman (~boredcave@user/boredcaveman)
[18:41:52] *** Quits: gera (~gera@user/gera) (Client Quit)
[18:42:10] *** Joins: gera (~gera@user/gera)
[18:42:13] <companion_cube> there's https://sat-smt.codes/ which has been posted regularly I think
[18:42:14] <mockturtle> [ SAT/SMT by Example ] - sat-smt.codes
[18:42:29] *** Parts: oldfolio (~oldfolio@h184.131.89.75.dynamic.ip.windstream.net) (Leaving)
[18:43:19] <companion_cube> fwiw we use it in our core product at work, but it's all proprietary, sorry :s
[18:44:15] <sam_> kline++
[18:44:18] <sam_> that's how i feel about it too
[18:44:21] <kline> companion_cube, almost everything in here is an example of solving puzzles, not making better software
[18:45:15] <kline> sure, solving minesweeper is fun, but its not applicable to writing better software, unless you're contraining your domain to solving puzzles where your solver is the pre-written software and your problem definition is the program
[18:45:42] <epilys> aren't spec langs used more instead? like alloy
[18:45:55] <kline> which is a good thing for sure, id love if we did less bespoke software and more "rewrite the problem and use existing solutions", but it doesnt help me make my software better
[18:46:22] *** Quits: rafael (~rafael@user/rafael) (Quit: *.net *.split)
[18:46:33] <epilys> https://www.hillelwayne.com/post/business-case-formal-methods/
[18:46:33] <mockturtle> [ The Business Case for Formal Methods • Hillel Wayne ] - www.hillelwayne.com
[18:46:54] *** Quits: gera (~gera@user/gera) (Client Quit)
[18:47:02] <kline> nice, this is what i like to see
[18:47:06] *** Joins: jkaye (~jkaye@2601:281:8300:7530:960c:6e00:5eeb:eb5a)
[18:47:24] <companion_cube> Writing entirely verified software is generally impractical yeah
[18:47:43] *** Joins: gera (~gera@user/gera)
[18:47:44] <companion_cube> But specifying your stuff is a thing that can be done (like Hillel says)
[18:47:50] *** Quits: gera (~gera@user/gera) (Remote host closed the connection)
[18:48:22] <companion_cube> Alloy has at least a few commonalities with Z3 internally
[18:48:54] <kline> id love to see more articles like "heres how we solved bug x with formal method y"
[18:49:09] *** Joins: gera (~gera@user/gera)
[18:49:42] <kline> or "preventing class of bug x in design y with formal method z", showing how a common issue in such a system is averted but a bit more complex than the example there with the gifting overcommit
[18:50:16] <companion_cube> Yeah
[18:50:32] *** Joins: afon (~afon@user/afon)
[18:50:41] *** Quits: gera (~gera@user/gera) (Client Quit)
[18:50:59] *** Joins: gera (~gera@user/gera)
[18:50:59] <companion_cube> I think TLA is "relatively" common for some high stakes distributed systems because these are fucking hard to get right
[18:51:37] *** Quits: gera (~gera@user/gera) (Client Quit)
[18:52:26] *** Joins: gera (~gera@user/gera)
[18:56:10] *** Quits: off^ (~off@207.5.21.20) (Remote host closed the connection)
[18:56:23] <epilys> http://sled.rs/simulation
[18:56:23] <mockturtle> [ sled simulation guide (jepsen-proof engineering) ] - sled.rs
[18:57:14] <epilys> "After you have the experience of building your first distributed system on top of a simulator that induces partitions / delays etc… you will forever consider writing them without a simulator to be like driving drunk and blindfolded"
[18:58:05] <epilys> is simulation enough to avoid investing time in formal methods?
[18:59:19] <imode> at $JOB-1 we built a simulation harness for that.
[18:59:37] <kline> exhaustive simulation of a sufficiently robust model is a formal method, surew
[19:04:38] * epilys holds on to Raft for dear life
[19:04:59] <companion_cube> note that the guy who invented Raft went on to write his own TLA-ish system
[19:05:20] <companion_cube> simulation and model checking should be complementary, I think
[19:05:28] <companion_cube> but model checking will still cover more edge cases
[19:07:20] <JordiGH> Isn't TLA a VCS that turned into bzr?
[19:07:26] <JordiGH> I'm so confused by what you guys are talking.
[19:07:29] <JordiGH> There's too many TLAs.
[19:08:02] <companion_cube> https://lamport.azurewebsites.net/tla/tla.html TLA+ more specifically
[19:08:02] <mockturtle> [ The TLA+ Home Page ] - lamport.azurewebsites.net
[19:08:19] <JordiGH> Oh the LaTeX guy.
[19:08:42] <companion_cube> well it's not why he got the Turing prize :)
[19:09:00] <epilys> the distributed systems guy.
[19:09:07] <epilys> as in lamport clocks.
[19:10:00] <JordiGH> I have such a hard time relating to this but every Real Programmer seems to think that making their code some kind of mathematical abstraction is the ultimate goal of life for computers.
[19:10:10] <JordiGH> I like to keep my mathematics and my code separate.
[19:10:11] <imode> lamport clocks are so simple that I feel like he didn't invent them.
[19:10:43] <companion_cube> he probably was the first to prove them correct, in any case
[19:10:54] <imode> that's true.
[19:10:58] <JordiGH> Also: Haskell is so annoying to use and I can't imagine other constraining languages could be much better. I think most working mathematicians prefer dirty programming languages than more pure ones.
[19:11:41] <companion_cube> some people find Haskell very non annoying 🤷
[19:11:45] <epilys> mathematical abstraction isn't a goal, it's a tool
[19:11:58] <companion_cube> (I'm not a haskell user, for the record, but it has a few good things)
[19:11:59] <JordiGH> The goal is to use the tool for everything, no?
[19:12:14] <JordiGH> Destroy all bugs.
[19:12:27] <JordiGH> Express all code in pure zen of tight formal logic.
[19:12:39] <companion_cube> if so, they'd use Coq, not Haskell
[19:12:51] <companion_cube> banks that use Haskell do so because it seems to deliver well for them
[19:12:59] <companion_cube> in terms of _compromise_ between correctness and convenience
[19:13:29] <ngoldbaum> could pandoc be possible in something that’s not haskell? probably but it would have been a lot harder i bet
[19:13:38] <JordiGH> I want computer-do-thing and I never can tell exactly what will Haskell make-computer-do.
[19:13:55] <JordiGH> Is line slow? Is line fast? Haskell won't say!
[19:13:57] * epilys[m] uploaded an image: (597KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/IYShwuMhHzXXvlKMQkzcbdOa/image.png >
[19:14:02] <epilys> ngoldbaum, why not?
[19:14:09] <companion_cube> JordiGH: even C is abstractions :p
[19:14:18] <JordiGH> I mean, barely.
[19:14:34] <JordiGH> With C I have a pretty good idea of computer-do-thing.
[19:14:49] <imode> tell that to literally every exception that's in the standard.
[19:14:55] <imode> and every compiler optimization ever.
[19:14:56] <JordiGH> Assuming I read the C standard closely enough.
[19:14:58] <epilys> C is known for being a bad approach at showing what computer-do-thing
[19:15:16] <imode> the only reliable computer-do-thing language is microcode.
[19:15:25] <imode> everything else might lie to you.
[19:15:28] <imode> and probably is.
[19:15:29] <JordiGH> Not even assembly?
[19:15:32] <imode> nope.
[19:15:42] <JordiGH> I guess even assembly can get skipped over by CPU optimisations.
[19:15:56] <imode> microcode is the bottom-ish.
[19:16:05] <JordiGH> Is microcode what you program stuff like branch prediction in?
[19:16:06] *** Quits: tex (~super@user/dix) (Quit: tex)
[19:16:28] <epilys> microcode is what the CPU translates assembly into
[19:16:45] <imode> https://en.wikipedia.org/wiki/Microcode#Implementation
[19:16:45] <mockturtle> [ Microcode - Wikipedia ] - en.wikipedia.org
[19:17:52] <companion_cube> JordiGH: the classic is https://queue.acm.org/detail.cfm?id=3212479 I guess
[19:17:53] <mockturtle> [ C Is Not a Low-level Language - ACM Queue ] - queue.acm.org
[19:18:03] <companion_cube> which, oh shit, is written by Chisnall 🤯🤯🤯
[19:18:04] <imode> your processor's microcode sequencer is vastly simpler than decoding all of the instructions at the gate level.
[19:18:23] <imode> it also means we can update what JMP means.
[19:19:26] <companion_cube> ofc, the closest to Haskell with the property that you can more or less predict what computer will do is… rust
[19:19:32] <companion_cube> *ominous sound*
[19:19:53] <imode> modulo LLVM. :P
[19:20:29] <companion_cube> yeah yeah, that's universal, compilers bugs notwithstanding
[19:21:19] <imode> just go build your own TTL CPU.
[19:21:25] <imode> you'll know exactly what it's doing.
[19:21:34] <imode> (that's how I started in programming.)
[19:22:16] <JordiGH> I really should properly learn Rust.
[19:22:37] <JordiGH> Can I make a fun game in it? Are there game libraries available?
[19:22:52] <companion_cube> bevyengine.org/ ?
[19:22:55] <epilys> https://arewegameyet.rs/
[19:22:56] <mockturtle> [ Are we game yet? ] - arewegameyet.rs
[19:22:57] <imode> what you'll slowly figure out is that computer-do-thing is a gradient. if it does what you intended, you probably don't need to know how it did it.
[19:22:59] <companion_cube> in any case, you shouldn't assume people using haskell don't know what they're doing
[19:23:08] <companion_cube> exactly what imode says
[19:23:32] <imode> you gotta figure out what part of the gradient you want to live in.
[19:24:35] <JordiGH> Okay, maybe this one: https://pragprog.com/titles/hwrust/hands-on-rust/
[19:24:35] <mockturtle> [ Hands-on Rust ] - pragprog.com
[19:25:11] <imode> 2D rendering don't look good in rust.
[19:29:17] *** Quits: strugee_ (~strugee@ool-4575d6b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[19:32:27] <imode> is there an SDL-like for Rust.. I don't see it here.
[19:32:45] <imode> meh, maybe just give me a window.
[19:34:01] <epilys> I use minifb for "just give me a window" for this project/book https://github.com/epilys/bitmappers-geometry
[19:34:02] <mockturtle> [ GitHub - epilys/bitmappers-companion: zine/book about bitmap drawing algorithms and math with code examples in Rust ] - github.com
[19:34:45] <imode> neat, how's the perf.
[19:34:54] <JordiGH> Throwing money at it, surely that'll get me to finally really learn Rust: https://nostarch.com/rust-rustaceans
[19:34:55] <mockturtle> [ Rust for Rustaceans ] - nostarch.com
[19:35:00] *** Joins: strugee (~strugee@ool-4575d6b1.dyn.optonline.net)
[19:35:56] <epilys> imode, good enough but there's little interactivity in the book content
[19:36:24] <imode> rust's ecosystem feels like node's ecosystem, and that is not a good thing.
[19:36:54] <imode> though I guess that stands in contrast to C, where there is no.. "ecosystem" to speak of.
[19:37:24] *** Joins: shapr (~user@2601:7c0:c202:5190:1c89:9f27:44af:85b3)
[19:37:41] <JordiGH> Still weirded out by the word "ecosystem".
[19:37:50] <JordiGH> I always ask who is the predator and who is the prey.
[19:38:06] <epilys> Human is the apex predator :)
[19:38:14] <imode> all programming is mutual parisitism.
[19:38:20] <JordiGH> Who's the producer photosynthesising and who is the worms eating decayed flesh in the Node ecosystem?
[19:39:11] <JordiGH> It's not even a metaphor anymore, but it was originally. How did we come up with the word "ecosytem"?
[19:39:13] <epilys> Who's the bottom, who's the top, who's the strange, who's the charm, who's the up and who's the down in this relationship?
[19:39:47] <JordiGH> Ah, so that's what the Q in LBTQ stands for.
[19:41:00] <imode> leptons, gravitons, bosons, tachiyons, quarks.
[19:41:02] *** Quits: jkaye (~jkaye@2601:281:8300:7530:960c:6e00:5eeb:eb5a) (Ping timeout: 240 seconds)
[19:42:07] <mockturtle> Ranges and suffering [rust] (napkindrawing) https://lobste.rs/s/dufahi
[19:42:15] <JordiGH> Hope you don't mind: https://mathstodon.xyz/@JordiGH/107582056540240982 (and if you do, I'll delete it)
[19:42:16] <mockturtle> [ JordiGH (@JordiGH@mathstodon.xyz) ] - mathstodon.xyz
[19:43:18] <imode> idgaf.
[19:43:34] <JordiGH> Great.
[19:44:55] <epilys> @epily@chaos.social
[19:45:10] <shapr> I follow that person!
[19:45:16] <epilys> oops, @epilys@chaos.social *
[19:45:56] * shapr hugs epilys
[19:49:59] <imode> what would you say is the easiest language to write a cross-platform game in that doesn't utilize a web browser.
[19:50:18] <imode> curious as to people's opinions.
[19:50:28] <JordiGH> C# and Unity?
[19:50:42] *** Joins: jkaye (~jkaye@2601:281:8300:7530:89aa:29d4:1f39:3e9)
[19:50:45] <JordiGH> Judging by what's popular.
[19:51:15] <imode> my only reference is C and SDL1/2.
[19:51:16] <epilys> imode, easiest as in batteries included?
[19:51:39] <bsandro> go+ebiten maybe too?
[19:51:39] <imode> epilys: "there is a well-trodden and well-supported path"
[19:51:59] <epilys> https://github.com/bkaradzic/bgfx
[19:52:00] <mockturtle> [ GitHub - bkaradzic/bgfx: Cross-platform, graphics API agnostic, “Bring Your Own Engine/Framework” style rendering library. ] - github.com
[19:52:29] <epilys> see "who's using it" section
[19:52:35] <imode> TIL.
[19:53:01] <imode> MAME is using it? damn.
[19:53:50] <imode> pardon, minecraft uses this?
[19:54:02] <epilys> the rewritten version, I think
[19:54:12] <epilys> I want to start an animal-crossing style game with PSX graphics soon, and found bgfx during my research on rust+graphics
[19:54:23] <imode> daaaamn.
[19:54:37] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.77)
[19:55:03] <imode> I also didn't know about ebiten, that looks cool!
[19:55:07] <wink> speaking of rust, has anyone written a non-hello-world web app and can tell of the experience?
[19:55:52] <epilys> Some years ago I compiled my terminal email client to webassembly, does that count? https://meli.delivery/wasm2.html
[19:55:53] <mockturtle> [ meli interactive demo ] - meli.delivery
[19:55:57] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.186) (Ping timeout: 240 seconds)
[19:56:07] <imode> epilys: something I'm noticing is that for non-C/C++ bindings, these are all maintained unofficially.
[19:56:51] <imode> ime a lot of those bindings fall out of favor so they only get used by language enthusiasts instead of being an actual option.
[19:56:59] <epilys> imode, C++ is probably the most common lang for gamedev if you discount game engine scripting languages
[19:57:08] <imode> yeah.
[19:57:18] <skrzyp> isn't that C# nowadays?
[19:57:34] <epilys> fwiw I'm not an expert at any of these things, but I was gonna generate my own bindings to C instead of using a third party API
[19:57:36] <JordiGH> Is everyone chaos.social German?
[19:57:42] <JordiGH> *everyone on
[19:57:53] <epilys> JordiGH, I'm not :p probably in a small minority
[19:58:06] <epilys> I just have been to a couple of CCCs pre-covid
[19:58:14] *** Joins: constxd_ (~brad@142.134.38.68)
[19:58:34] *** Quits: vind (~vind@p200300c3ff0a9d00f9835554c2547c4b.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:58:37] * epilys has brushed elbows with Stallman at a CCC
[19:58:50] <epilys> accidentally, while he was walking and eating a sandwich.
[19:59:28] <varjag> does he still carry recorder flute around
[19:59:47] <shapr> I bought a stuffed GNU from stallman once for $20
[19:59:50] <epilys> he carried a backpack and the sandwich
[20:00:01] <shapr> it wouldn't stand up by itself so I propped it up with a stuffed penguin
[20:00:05] <JordiGH> shapr: I paid $2000 for one.
[20:00:05] <epilys> shapr, he does that auction thing at every speech, but damn only 20?
[20:00:15] <JordiGH> And I also prop it up with a penguin!
[20:00:20] <JordiGH> How symbolic, never thought of that.
[20:00:23] <shapr> :-)
[20:00:27] <epilys> haha
[20:00:34] <bmp> C# is definitely the most popular language for indy games, with whatever language Godot uses being second. C++ and Lua are most used by AAA titles.
[20:00:41] <epilys> I've only been at stallman speeches (4-5) as a student, so never bid at those :(
[20:00:52] *** Joins: echoSMILE (uid504326@user/echosmile)
[20:00:53] <shapr> I was at ArisianCon in Cambridge in 2007 or so, that's when I bought the GNU
[20:01:04] <iDrougge> AtlassianCon?
[20:01:06] <JordiGH> It was fun to hear the stunned shushes from the audience when I yelled DOS MIL
[20:01:26] <JordiGH> Nowadays I'm embarrassed to have thought so highly of rms.
[20:01:31] <shapr> iDrougge: this one https://www.arisia.org/
[20:01:32] <mockturtle> [ Welcome | Arisia 2022 • Cancelled ] - www.arisia.org
[20:01:37] <riv> wait I can't get my head around this, does git merge bring multiple commits over?
[20:01:39] <shapr> JordiGH: maybe RMS has changed?
[20:01:46] <riv> or does it always just do one commit
[20:01:46] <shapr> I certainly enjoy using code he's written
[20:01:49] <JordiGH> No, he hasn't, and that's the problem.
[20:02:00] <JordiGH> I just didn't want to see it before.
[20:02:08] <epilys> He was always absolute at his opinions
[20:02:19] <epilys> riv, merge creates a new commit that has multiple parents
[20:02:33] <riv> ok
[20:02:40] <riv> so when you do git log
[20:02:49] <riv> you'll see a line of commits
[20:02:53] <mockturtle> 12 Rust Tips and Tricks you might not know yet [rust] (napkindrawing) https://lobste.rs/s/yjpwol
[20:04:13] <wink> I only have a tux and an elephpant, no Gnu
[20:04:14] <dutchie> note that sometimes merge doesn't actually create a merge commit, if the thing-being-merged is a direct descendant of the thing-being-merged-into (this is called a fast-forward)
[20:04:20] <JordiGH> riv: I'm not sure if this what you're asking, but git merge can create a commit with more than two parents. There's no actual limit to how many parents a commit can have.
[20:04:29] <epilys> riv, git merges have "strategies" and sometimes git decides to fast forward instead of merging if it's possible
[20:04:29] <JordiGH> wink: Postgres conference?
[20:04:41] <riv> oooh
[20:04:51] <riv> so git did a fast forward for me, because I had rebased earlier
[20:04:54] <riv> even though I didnt tell it to
[20:05:05] <dutchie> it'll fast-forward by default if it can
[20:05:06] <JordiGH> I find fast forward "merges" to be a bizarre concept.
[20:05:09] <JordiGH> Just advance the branch, man.
[20:05:16] <epilys> yeah probably and you can tell it not to do it if you want a merge commit.
[20:05:16] <JordiGH> That's not a merge.
[20:05:27] <riv> that's very interesting!
[20:05:44] <JordiGH> Oedipus merges are also weird. Merging parent with grandparent, eww.
[20:05:59] <bparker> he did do the nasty in the pasty
[20:07:00] <constxd_> kings
[20:07:25] <constxd_> so i have lists
[20:08:12] <constxd_> let pair = (4, 5);
[20:08:29] <constxd_> should the first thing be pair.0 or pair.1
[20:08:57] <constxd_> i thought pair.1 but then i just implement it as syntactic sugar and pair.1 is desugared to pair[0] which seems weird
[20:09:39] <riv> yes I think 0 and 1 is best
[20:09:39] <iDrougge> Didn't seem weird to those who did the Java and Javascript datetime APIs.
[20:10:02] <constxd_> but these are meant to be like tuples, not dynamic lists so it kinda seems natural to have 1-based indexing
[20:10:20] <constxd_> type([4, 5]) is just Array, type((4, 5)) is (Int, Int)
[20:10:21] <wink> JordiGH: no, the Tux is from Linuxtag 2005 (iirc) in Karlsruhe and the Elephpant.. probably some group order at the office back when I was doing PHP
[20:10:27] <iDrougge> Doesn't it seem natural to have 1-based indexing on dynamic lists?
[20:10:52] <constxd_> well maybe but 0-based indexing is already ubiquitous
[20:10:56] <constxd_> too much inertia
[20:10:59] <constxd_> whereas like
[20:11:16] <JordiGH> Is Linuxtag still a thing?
[20:11:18] <iDrougge> Seems more like 50/50 to me.
[20:11:19] <JordiGH> I remember Knoppix.
[20:11:24] <riv> I think that 0 based indexing is good
[20:11:31] <constxd_> haskell uses fst and snd, c++ uses first and second
[20:11:33] <riv> you increment indexes using + and 0 is the additive identity
[20:11:46] <iDrougge> If your language cargo-cults C, it's 0-based.
[20:11:49] <imode> what language is this, constxd_.
[20:11:54] <constxd_> my toy language
[20:11:58] <imode> first and second are my typical go-to.
[20:12:08] <imode> left and right are also common.
[20:12:21] <iDrougge> As long as your tuples are always pairs.
[20:12:27] <imode> mhm.
[20:12:36] <constxd_> im adding lists so i can get rid of multiple return values and some other syntax-level hacks
[20:13:08] <iDrougge> Swift uses .0, .1, .2 etc.
[20:13:16] <constxd_> oh so there is precedent for .0
[20:13:18] <imode> it really does come down to whether you want 0-based indices.
[20:13:19] <constxd_> ok
[20:13:26] <constxd_> i think that settles it
[20:13:27] <iDrougge> Though you can also name the elements in your tuple instance.
[20:13:56] <iDrougge> func returnsTuple() -> (this: Int, that: Int)
[20:14:33] <constxd_> mmm
[20:14:41] *** Quits: strugee (~strugee@ool-4575d6b1.dyn.optonline.net) (Quit: ZNC - http://znc.in)
[20:14:44] <epilys> constxd_, have you read any PLT textbook? might help with these kind of design decisions
[20:15:11] <constxd_> why
[20:15:19] <constxd_> isn't it subjective at the end of the day
[20:15:32] <imode> then why is there a requirement for precedent? ;)
[20:16:05] <constxd_> well i want the syntax to be as familiar as possible and just make sense, so to speak
[20:16:27] <iDrougge> That just means "familiar to my peers".
[20:16:36] <constxd_> sure
[20:16:41] <constxd_> that's good enough for me
[20:16:44] *** Joins: strugee (~strugee@ool-4575d6b1.dyn.optonline.net)
[20:16:52] <iDrougge> That's why we can't have good things.
[20:16:56] <epilys> that's pragmatic, not subjective
[20:17:11] <epilys> which by the way is in the title of the book I was gonna recommend, Programming Language Pragmatics
[20:17:19] <imode> lol.
[20:17:52] <iDrougge> Javascript was made to look like Java, which was made to look like C. The vast majority of JS programmers have never used Java, let alone C.
[20:18:25] <riv> if C syntax is so great why doesn't javascript have C style function pointer type declarations!?
[20:18:34] <iDrougge> And people who seek familiarity do not seek out new languages.
[20:19:16] <constxd_> i think every *appreciates* familiarity regardless of whether they're seeking it or not
[20:19:35] *** Quits: boredcaveman (~boredcave@user/boredcaveman) (Quit: WeeChat 3.4)
[20:19:37] <constxd_> having familiar syntax certainly increases the odds that people will give your language a try i think
[20:19:45] <constxd_> s/every/everybody
[20:20:03] *** Joins: mahmutov (~mahmutov@37.155.22.205)
[20:20:15] <iDrougge> Everybody is familiar with 1-based indexing, a minority with 0-based.
[20:20:26] <imode> ?
[20:20:48] <imode> are you talking about the general non-programming population, or..
[20:20:48] <epilys> by 1-based indexing you mean counting? natural numbers.
[20:21:18] <iDrougge> imode: Yes. 0-based only makes sense to programmers because they're accustomed to it, just like yoda conditions.
[20:21:35] <epilys> It makes sense to me because I see indexing as a distance from the start of the list
[20:21:54] <iDrougge> Don't tell me you're a programmer, too.
[20:22:22] <epilys> I'm only an impostor.
[20:22:28] <constxd_> i have another dilemma
[20:23:10] *** Joins: vind (~vind@p200300c3ff0a9d00f9835554c2547c4b.dip0.t-ipconnect.de)
[20:23:26] <constxd_> right now if you want to iterator over keys and values in a dict, you can write: for k, v in d { ... }
[20:23:42] <constxd_> similar for array elements with indices: for x, i in xs { ... }
[20:24:20] <constxd_> but you can also just omit the 2nd lvalue if you don't care about it: for x in xs { ... }
[20:24:24] <mockturtle> Shell Eval [unix] (susam) https://lobste.rs/s/tt0ylm
[20:25:10] <constxd_> when you call __next__() on an iterator, it can return multiple values, and any that don't have an lvalue to get bound to are just ignored
[20:25:29] <iDrougge> You don't have tuple destructuring yet?
[20:25:33] <constxd_> i do but
[20:25:42] <bmp> epilys: I only just saw the Meli terminal demo yesterday! I didn't realize that was your project. You still working on it? Development seems to have slowed lately.
[20:25:47] <constxd_> for example if a dict iterator returns (k, v)
[20:25:59] <constxd_> i can't write: for key in d { ... }
[20:26:02] <constxd_> to ignore the value
[20:26:17] <constxd_> because now the bare identifier key is trying to match a tuple
[20:26:27] <iDrougge> You said you could a few lines above?
[20:26:32] <constxd_> i'd have to explicitly write for (key, _) in d { ... }
[20:27:04] <constxd_> iDrougge: yes i can right now, but i'm adding proper lists so that i can remove the concept of multiple return values
[20:27:27] <constxd_> then the iterator will just return a list of (key, value)
[20:27:35] <epilys> bmp, it became "feature-complete" to me (despite its few features) and there was no feedback from any users so naturally I started working on other stuff. But it's not abandoned
[20:27:58] <iDrougge> constxd_: And for arrays, is it the same way there?
[20:28:23] <constxd_> yes the pattern `key` would not match an array
[20:28:32] <iDrougge> Why not?
[20:28:51] <constxd_> oh actually it would but it would just take on the value of the array itself, not the first element
[20:29:16] <iDrougge> Not the index?
[20:29:44] <constxd_> oh you mean iterating over arrays?
[20:29:55] <bmp> epilys: I've just resumed using it as I've had time for free-time hacking (my main use of meli was patch management), so you've definitely got at least one user. I'll ping you with annoying feature requests intermittently so you know I'm here. :)
[20:30:11] <iDrougge> Well, you wrote `for x, i in xs {…}`
[20:30:15] <constxd_> yeah
[20:30:20] <constxd_> that wouldn't work anymore either
[20:30:33] <bmp> epilys: I really like meli, honestly; it hits about 99% of what I want/need in a terminal mail client. Thank you for writing it.
[20:30:45] <iDrougge> `for (x, i) in xs {…}` would work?
[20:30:48] <constxd_> yes
[20:31:00] <constxd_> but now there's no convenient way to ignore the index when you don't want it
[20:31:06] <iDrougge> You could make for destructure tuples automatically.
[20:31:40] <iDrougge> Or you could add a method: `for (x, i) in xs.indexed {…}`
[20:31:45] <constxd_> yeah
[20:31:51] <constxd_> xs.enumerate() maybe
[20:31:57] <constxd_> that's what python calls it
[20:31:59] <constxd_> and rust i think
[20:32:12] <iDrougge> xs.enumerated() in Swift, because it doesn't mutate xs.
[20:32:27] <epilys> bmp, that's so nice thank you :) btw #meli on oftc if you wanna join
[20:33:02] <bmp> Gotta dig up my OFTC password, but sure.
[20:33:26] <constxd_> the automatic destructuring thing wouldn't work i think because the iterator may incidentally return a tuple even when it doesn't mean there are multiple values
[20:33:54] <iDrougge> A single-element tuple, you mean?
[20:34:42] <companion_cube> constxd_: looking at existing work helps picking design choices that are consistent
[20:34:45] <constxd_> imagine like
[20:34:56] <companion_cube> rather than an accumulation of arbitrary things that don't go well together
[20:35:30] <iDrougge> Most languages are accumulations of arbitrary things due to aforementioned rule of familiarity and looking too much at existing work.
[20:35:38] <constxd_> function genPoints() { for _ in ..10 { yield (3, 3); } }   for point in genPoints() { ... }
[20:35:52] <constxd_> then point would be 3, not (3, 3) as you probably were expecting
[20:35:58] <companion_cube> iDrougge: idk about the "most"
[20:36:17] <epilys> familiarity was stated as a condition
[20:36:25] <epilys> so looking at prior art makes sense
[20:36:33] <constxd_> trust me i have looked at a lot of prior art
[20:37:17] <iDrougge> companion_cube: Well, most popular ones, at least.
[20:39:01] <iDrougge> constxd_: I would have expected point to be (3, 3) since it was never destructured.
[20:39:16] <companion_cube> I'd expect the same
[20:39:24] <constxd_> exactly
[20:39:30] <companion_cube> also typing wise, genPoints() returns tuples, right?
[20:39:56] <constxd_> but if the for loop construct automatically destructred the tuple returned by the iterator's __next__ method, and the __next__ method returns a point, ...
[20:40:14] *** Joins: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net)
[20:40:16] *** Quits: Fleeno (~Fleeno@cscd-1-199-120-73-104.dsl.netins.net) (Client Quit)
[20:40:45] <constxd_> let g = genPoints(); /* type(g) == Generator */ let (x, y) = g.__next__();
[20:41:22] <iDrougge> constxd_: `for point in genPoints()` doesn't destructure anything as far as I can see.
[20:41:57] <constxd_> didn't you suggest that the for loop should automatically treat tuples that get returned by __next__ as multiple separate values?
[20:42:02] <iDrougge> Because the arguments don't add up to the members of the tuple.
[20:42:07] <companion_cube> but there's no tuple here
[20:42:17] <constxd_> the tuple is the point
[20:42:21] <constxd_> (3, 3)
[20:42:22] <companion_cube> unless you suggest to also silently ignore tuple elements
[20:43:27] <constxd_> so the original concern was, if you're iterating over an array, and the iterator returns (element, index) pairs, what do you do if you want to be able to ignore the indices
[20:43:51] <constxd_> because you don't want to have to write for (x, _) in xs { ... } when you don't care about indices
[20:44:12] <companion_cube> I would, if it's clearer this way
[20:44:28] <companion_cube> if it makes the language better designed in other places
[20:44:52] <constxd_> at that point id rather just have the array iterator return elements only, and if you want indices you iterate over xs.enum() instead
[20:45:13] <companion_cube> just like rust? :)
[20:45:18] *** Joins: drobilla (~user@198-84-224-189.cpe.teksavvy.com)
[20:45:28] <constxd_> yeah
[20:45:30] <companion_cube> (or python, fwiw)
[20:45:52] <constxd_> but this is a dynamic language focused on pragmatism and terseness is valued a lot more than it is in rust
[20:46:17] <constxd_> so idk what the best choice is
[20:49:43] *** Quits: vind (~vind@p200300c3ff0a9d00f9835554c2547c4b.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:49:49] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[20:51:13] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Client Quit)
[20:55:55] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[20:59:33] *** Quits: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl) (Quit: WeeChat 3.4)
[21:01:16] <mockturtle> minimator, a Minimalist Graphical Editor [art] (xcombelle) https://lobste.rs/s/ihaypa
[21:02:18] *** Quits: bauruine (~stefan@2001:8e0:146d:dead:42ee:5cc9:77de:e984) (Remote host closed the connection)
[21:10:45] *** Quits: Major_Biscuit (~MajorBisc@c-001-029-007.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:13:19] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[21:13:53] *** Joins: ugjka (~ugjka@ugjka.net)
[21:17:50] *** Quits: ClashTheBunny (~ClashTheB@user/ClashTheBunny) (Quit: Ping timeout (120 seconds))
[21:17:51] *** Quits: mahmutov (~mahmutov@37.155.22.205) (Quit: WeeChat 3.1)
[21:18:05] *** Quits: oldfolio_ (~oldfolio@h184.131.89.75.dynamic.ip.windstream.net) (Quit: WeeChat 3.0)
[21:22:26] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 268 seconds)
[21:23:20] *** Quits: varjag (~user@188.95.247.249) (Ping timeout: 256 seconds)
[21:24:54] *** Joins: mahmutov (~mahmutov@37.155.22.205)
[21:25:36] *** Quits: af (~af@awalgarg.me) (Ping timeout: 256 seconds)
[21:26:42] *** Quits: jlindgren (~jlindgren@user/jlindgren) (Quit: The Lounge - https://thelounge.chat)
[21:27:04] *** Joins: jlindgren (~jlindgren@user/jlindgren)
[21:28:06] *** Joins: JordiGH (~jordi@redsquarecaviar.com)
[21:28:06] *** Quits: JordiGH (~jordi@redsquarecaviar.com) (Changing host)
[21:28:06] *** Joins: JordiGH (~jordi@user/jordigh)
[21:31:09] *** Joins: af (~af@awalgarg.me)
[21:36:50] *** Quits: afrosenp1i (~afrosenpa@li642-224.members.linode.com) (Quit: Lost terminal)
[21:40:43] <feoh> I don't ... Get.. minimator :) The interface seems ... challenging :)
[21:41:18] <mockturtle> Gitea is joining the Fediverse [programming] (akkartik) https://lobste.rs/s/yo1mcc
[21:42:53] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:47:39] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[21:49:04] <feoh> OK IMO ^^^ is super exciting
[21:49:42] <feoh> I love this trend. It'd be great to see open federated protocols that allow open source projects to be free of the peril of having all their bits hosted in one Gitlab/Gitea instance
[21:52:37] <bmp> Oooo. I've been really wanting something like this for forever.
[21:52:51] <bmp> Might be enough to bring me back to Gitea, too.
[21:54:22] <feoh> I wouldn't turn this on for my personal Gitea install because I use it for private stuff I don't want broadcasted, but I love that they're doing this work and I love Gitea generally.
[21:55:16] *** Joins: destroycomputers (~destroyco@68-177-178-143.ftth.glasoperator.nl)
[21:56:16] *** Joins: ClashTheBunny (~ClashTheB@user/ClashTheBunny)
[21:56:37] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 240 seconds)
[21:58:43] *** Joins: JordiGH (~jordi@redsquarecaviar.com)
[21:58:43] *** Quits: JordiGH (~jordi@redsquarecaviar.com) (Changing host)
[21:58:43] *** Joins: JordiGH (~jordi@user/jordigh)
[21:59:02] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:02:04] *** Joins: oldfolio (~oldfolio@h184.131.89.75.dynamic.ip.windstream.net)
[22:03:40] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[22:09:17] *** Quits: ClashTheBunny (~ClashTheB@user/ClashTheBunny) (Ping timeout: 240 seconds)
[22:09:57] *** Quits: JordiGH (~jordi@user/jordigh) (Ping timeout: 240 seconds)
[22:10:26] *** Quits: gbmor (gbmor@gbmor.org) (Quit: WeeChat 3.4)
[22:10:44] *** Joins: gbmor (gbmor@gbmor.org)
[22:11:49] *** Joins: ClashTheBunny (~ClashTheB@user/ClashTheBunny)
[22:19:17] *** Quits: ClashTheBunny (~ClashTheB@user/ClashTheBunny) (Ping timeout: 256 seconds)
[22:26:30] *** Joins: ClashTheBunny (~ClashTheB@user/ClashTheBunny)
[22:34:01] <Church> Yeah interesting stuff
[22:35:00] <technomancy> it seems like this isn't actually announcing anything other than that they are planning to do some work?
[22:37:01] <wink> git commit your status update
[22:37:09] <wink> surely will sway over the non-technical masses
[22:41:51] *** Quits: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:45:52] *** Joins: eirian (~eirian@user/eirian)
[23:02:43] *** Joins: Shashin (~Shashin@cpc112711-nmal22-2-0-cust53.19-2.cable.virginm.net)
[23:03:17] *** Quits: gabriele (~gabriele@user/gabriele) (Quit: Leaving)
[23:09:54] *** Joins: jmw (~jmw@user/jmw)
[23:11:41] *** Quits: d42 (~root@user/d42) (Quit: ZNC - http://znc.in)
[23:14:29] <ngoldbaum> git is blockchain technology so it’ll definitely bring in the VC money
[23:14:58] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[23:22:04] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
[23:23:04] *** Joins: JordiGH (~jordi@fencepost.gnu.org)
[23:23:04] *** Quits: JordiGH (~jordi@fencepost.gnu.org) (Changing host)
[23:23:04] *** Joins: JordiGH (~jordi@user/jordigh)
[23:23:42] <feoh> technomancy: Yeah they're saying they got FUNDED to do said work, which IMO is kinda noteworthy in FLOSS land :)
[23:23:43] *** Joins: boredcaveman (~boredcave@user/boredcaveman)
[23:23:54] <feoh> I just appreciate the trend and the intent
[23:24:02] <feoh> boredcaveman: Awesome nick!
[23:24:31] *** Joins: d42 (~root@89-69-166-33.dynamic.chello.pl)
[23:28:53] <boredcaveman> thx m8
[23:29:41] *** Quits: d42 (~root@89-69-166-33.dynamic.chello.pl) (Quit: ZNC - http://znc.in)
[23:32:08] *** Quits: jmw (~jmw@user/jmw) (Quit: jmw)
[23:32:37] *** Joins: d42 (~root@user/d42)
[23:32:59] *** Parts: oldfolio (~oldfolio@h184.131.89.75.dynamic.ip.windstream.net) (Leaving)
[23:33:46] <bmp> Git isn't blockchain. It could be, I suppose, but Merkele trees by themselves aren't sufficient.
[23:36:51] <ngoldbaum> bmp: it’s a shit consensus finding algorithm i’ll give you that
[23:37:32] <ngoldbaum> bmp: there’s a reason lobste.rs doesn’t have a cryptocurrencies tag but does have a merkle-trees tag :p
[23:38:19] <mockturtle> Why Fortran is easy to learn [fortran] (hashemi) https://lobste.rs/s/pxaqdo
[23:41:27] <feoh> Oy FORTRAN
[23:41:46] <feoh> In the universe of programming languages, it's the only one that I have the most visceral negative reactions to
[23:42:04] <mockturtle> DSL Developer Kit | DDK [compilers plt] (vladislavp) https://lobste.rs/s/8kxmvc
[23:42:24] <feoh> I think it's the fact that the version I learned was FORTRAN-77 so the column number forat prescriptions were in place and B-L-E-A-H.
[23:42:56] <feoh> Also the fact that the prof for the class I took in it in college was OOOLLLD and BORREEEED and his notes were literally so old and yellow you could watch the paper edges flake and dis-integrate as he held them.
[23:43:08] <feoh> (Yes I was an agist young bastard in college apparently)
[23:45:25] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[23:47:48] *** Quits: hschmale (~hschmale@mab.sdf.org) (Quit: WeeChat 3.5-dev)
[23:47:49] <oz> about federated git things, there are still a few issues being discussed on gitea's github tracker
[23:48:11] <oz> I wonder if they've come to something, or got stuck in discussion commities
[23:50:10] <oz> (and yes, the matrix crowd is also interested)
[23:54:33] *** Joins: hschmale (~hschmale@mab.sdf.org)
[23:58:14] <drobilla> Don't worry, the grifters will get there.  Please confirm your payment of 0.23784 leetcoin to pull this branch [Y/n]
