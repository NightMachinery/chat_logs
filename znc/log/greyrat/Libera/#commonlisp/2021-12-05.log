[00:04:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:11:09] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:13:44] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[00:14:40] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[00:14:40] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[00:14:54] *** Joins: jacek_ (~jacek@cpc94356-ward12-2-0-cust88.10-2.cable.virginm.net)
[00:15:13] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:15:15] *** Joins: raeda__ (~raeda@72.49.249.241)
[00:15:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: raeda_ (~raeda@72.49.249.241) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: jacek (~jacek@cpc94356-ward12-2-0-cust88.10-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[00:15:27] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 256 seconds)
[00:15:45] *** Joins: anddam (~anddam@user/anddam)
[00:22:44] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[00:23:07] *** Joins: Alfr (~Alfr@user/alfr)
[00:31:18] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:32:06] <Guest74> that Papert on Logo video was interesting.  Wondering if I should add wrapping to my turtle graphics. though not quite sure how I'd do that especially if I change it to vector graphics like I'm planning.
[00:34:24] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:35:47] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[00:40:40] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[00:41:12] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:41:47] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 252 seconds)
[00:45:15] <Shinmera> Guest74: https://github.com/shinmera/talks
[00:46:50] <Guest74> Nice.  I think I'll try and put together a list if more come up.
[00:53:55] <Guest74> apparently my turtle-graphics has no problem with wrapping in it's current implementation on frame buffer. It's xrender that seems to be a problem.  Though drawing lines with triangles with xrender is slower than drawing lines with cl-vectors and drawing individual pixels.  Anybody have any fast code for changing lines into triangles?
[00:59:23] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 252 seconds)
[01:06:53] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11c9:e45:91cb:1d3:70ff:6c5d)
[01:08:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:14:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[01:23:18] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[01:31:28] *** Quits: hobo (~hobo@cpe-98-144-21-85.wi.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:55:53] *** Quits: pve (~pve@188-67-28-80.bb.dnainternet.fi) (Quit: leaving)
[01:55:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:03:11] *** Quits: bjorkintosh (~bjork@2600:1702:6a0:af0:3a85:80da:d37e:b375) (Ping timeout: 252 seconds)
[02:05:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:06:24] <pjb> https://www.jdoodle.com/execute-clisp-online/
[02:08:29] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:09:31] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[02:16:41] *** Joins: akoana (~ah@user/akoana)
[02:30:16] <hayley> CLISP isn't a programming language.
[02:30:27] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[02:30:53] *** Quits: gaqwas (~john@dynamic-095-118-129-205.95.118.pool.telefonica.de) (Ping timeout: 256 seconds)
[02:30:55] <hayley> And that is a shit IDE.
[02:40:34] *** Parts: bremner (~bremner@notmuch/developer/bremner) (Using Circe, the loveliest of all IRC clients)
[02:40:49] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[02:41:06] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[02:43:16] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:45:29] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Max SendQ exceeded)
[02:50:59] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[02:54:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:07:12] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[03:07:15] *** Joins: Oladon (~olad@98.43.81.226)
[03:08:38] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[03:10:36] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 268 seconds)
[03:15:52] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[03:17:02] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11c9:e45:91cb:1d3:70ff:6c5d) (Ping timeout: 240 seconds)
[03:19:01] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[03:52:41] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[03:54:13] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[03:56:29] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 252 seconds)
[03:57:36] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[04:21:47] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[05:07:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80::fb)
[05:08:43] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 252 seconds)
[05:16:50] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[05:21:37] *** Quits: jacek_ (~jacek@cpc94356-ward12-2-0-cust88.10-2.cable.virginm.net) (Remote host closed the connection)
[05:33:16] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[05:41:39] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:59:25] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[06:01:41] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:06:52] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[06:10:33] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:24:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:26:56] *** Parts: abraham (~abraham@143.244.185.86) (The Lounge - https://thelounge.chat)
[06:34:33] *** Joins: djuber (~user@65.79.128.64)
[06:47:42] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:49:30] *** Joins: dstein64- (~dstein64@dannyadam.com)
[06:50:16] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 260 seconds)
[06:50:41] *** dstein64- is now known as dstein64
[06:57:42] *** Joins: Oladon (~olad@98.43.81.226)
[07:10:43] *** Joins: ldb (~user@user/ldb)
[07:11:08] *** Quits: jpl01 (~user@2001:16b8:4910:b100:6c3e:d286:269b:9195) (Remote host closed the connection)
[07:12:32] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[07:16:03] *** Quits: ldb (~user@user/ldb) (Remote host closed the connection)
[07:16:16] *** Joins: ldb (~user@user/ldb)
[07:24:49] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:26:35] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[07:28:39] *** Joins: ldb (~user@user/ldb)
[07:30:12] <beach> Good morning everyone!
[07:30:31] <ldb> hi
[07:34:37] <ldb> do you guys know any implementation of decimal floating point in lisp?
[07:35:17] <phantomics> Morning beach
[07:35:46] <ldb> I found on in GNU Emacs's calc package, but I cannot find the orgin of the algorithms been used.
[07:40:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:46:52] *** Quits: Inline (~Inline@2a02:908:1252:7a80::fb) (Ping timeout: 268 seconds)
[07:50:06] <loke[m]> There is a decimal package on QL. It represents decimal numbers as the fraction of a power of 10
[07:50:17] <loke[m]> So the numbers are also real CL numbers
[07:51:07] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[07:58:07] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[08:03:39] *** Joins: ldb (~user@user/ldb)
[08:08:37] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[08:09:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:11:23] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:13:20] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[08:13:45] *** Joins: ldb (~user@user/ldb)
[08:15:37] *** Joins: Lycurgus (~juan@98.4.112.204)
[08:16:53] <ldb> loke: yes, that's called we-decimal. the homepage and github repo has been removed, fortunately there's a copy from quicklisp
[08:22:49] <ldb> it does not have elementary function calculation that I'm looking for, but still provides some useful insights. thanks for the info.
[08:23:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:24:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[08:25:06] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:25:59] *** Joins: semz (~none@user/semz)
[08:28:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[08:31:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:35:00] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[08:35:17] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:36:18] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[08:39:49] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[08:40:17] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[08:43:21] *** Joins: makomo (~makomo@user/makomo)
[08:47:17] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[09:05:11] *** Parts: lisp123win (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[09:20:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:22:41] *** Parts: ldb (~user@user/ldb) (ERC (IRC client for Emacs 27.2))
[09:25:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[09:35:33] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Ping timeout (120 seconds))
[09:35:54] *** Joins: s-liao (~s-liao@101.86.99.70)
[09:37:12] *** Quits: dale (dale@user/dale) (Remote host closed the connection)
[09:41:53] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[09:45:25] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[10:05:04] *** Joins: gaqwas (~john@dynamic-077-004-038-236.77.4.pool.telefonica.de)
[10:05:10] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e9df:4fc2:4deb:f0c2)
[10:08:50] <Guest74> mfiano: So I 'added'(cause it was basically there) loading from vectors to pngload and not sure about the naming and where to put it. right now I named it load-vector and placed it by itself in octet-vector.lisp, but maybe it should be in png.lisp?
[10:12:08] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e9df:4fc2:4deb:f0c2) (Ping timeout: 252 seconds)
[10:20:56] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[10:27:30] *** Joins: mrcom_ (~mrcom@2600:1700:c630:a570:b408:bef8:4556:55db)
[10:27:49] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[10:33:11] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[10:41:06] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e9df:4fc2:4deb:f0c2)
[10:42:10] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11c9:e45:c52f:f88d:db48:665)
[10:42:38] <susam> Good morning, beach! Good morning, everyone!
[10:46:02] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e9df:4fc2:4deb:f0c2) (Ping timeout: 240 seconds)
[10:48:08] <beach> Hello susam.
[10:48:14] *** Joins: treflip (~user@95.79.32.99)
[11:04:02] *** Joins: dale (dale@user/dale)
[11:05:08] *** Quits: dale (dale@user/dale) (Remote host closed the connection)
[11:05:24] *** Joins: dale (dale@user/dale)
[11:20:44] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[11:20:56] *** Joins: s-liao (~s-liao@101.86.99.70)
[11:21:15] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[11:22:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:23:52] <dre> Good morning everybody.
[11:24:12] <dre> it's 7pm on a sunday and I finally get to catch up on 2 days of AoC
[11:27:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[11:28:26] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:37:58] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[11:37:58] *** ChanServ sets mode: +o MichaelRaskin
[12:09:46] <dre> if I have a list like '(1 2 3 4 5) and I want to change the 4 into a 't' - do i just use setf for that?
[12:11:04] <dre> answer is yes, pls excuse me
[12:11:21] <dre> still new to the complete repl experience
[12:11:44] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:13:16] <jackdaniel> (setf (nth 3 my-list) t)
[12:13:22] <jackdaniel> that said, you should not modify a quoted list
[12:13:27] <beach> dre: You need to be careful how you phrase your questions.  Do you really mean that you have a list (quote (1 2 3 4 5)) or a list (1 2 3 4 5)?
[12:13:32] <jackdaniel> it is a literal, so you charter the undefined behavior territory
[12:14:33] <beach> dre: If you have a list (1 2 3 4 5), then what jackdaniel said.
[12:14:36] <dre> yeah I'm still bad at the quote and list thing
[12:15:07] <jackdaniel> dre: note in http://www.lispworks.com/documentation/HyperSpec/Body/s_quote.htm " The consequences are undefined if literal objects (including quoted objects) are destructively modified. "
[12:15:21] <dre>  (let ((x (list 1 2 3 4))) (setf (car x) t) (princ x))
[12:15:28] <phadthai> agreed with the other replies, then also see rplaca/rplad
[12:15:53] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[12:15:57] <dre> "not evaluated" I'm still trying to understand
[12:15:59] <phadthai> err rplacd
[12:16:39] <dre> so like, '(1 2 3 x)  is just "as is" where if I did (list 1 2 3 x)    the x would be evaluated?
[12:16:52] <beach> phadthai: That's not so great advice.  RPLACA and RPLACD should be considered the underlying mechanism for (SETF CAR) and (SETF CDR), and the latter should be used by applications.
[12:17:05] <akater[m]> dre: There's no need to manually print the results.
[12:17:06] <phadthai> yes, for cons cells
[12:17:29] <jackdaniel> dre: yes
[12:17:34] <dre> akater[m], the setf only returns the value that it sets, not the whole x
[12:17:54] <dre> here
[12:18:12] <dre> here's a question: can I (setf value t) inside a mapcar ?
[12:18:16] <akater[m]> dre: Just return the value you're interested in, x here.
[12:18:44] <dre> akater[m], so (let ((x (list 1 2 3 4))) (setf (car x) t) x) ;-- you're right. thanks.
[12:19:07] <dre> I was just demoing in the repl
[12:19:45] <dre> is anyone up to date with AoC day 4? you'll love the code I have so far...
[12:20:09] <akater[m]> dre: You can setf anywhere but “setf value” will often just modify the local reference, not the data itself.
[12:20:24] <dre> ah ok that's good to know
[12:21:34] <dre> so this is my general idea: https://dpaste.org/y6RX
[12:21:35] <akater[m]> dre: (setf (car ..) ..) or (setf (some-accessor ..) ..) will (most often) modify the data.  setf var normally reassigns the variable.
[12:22:26] <dre> "setf var normally reassigns the variable." that is a good way to think of it, thanks. easy for me to "grok"
[12:23:26] <dre> the story with AoC-4 is that, we're given a comma seperated list of pickings, ( like "12,343,65,523," ) then a collection of newline-deliminated boards. and we effectively just play bingo from that.
[12:23:52] <dre> here ^ I'm parsing the input and getting the data structures right. ignore *boardidx*
[12:23:57] <jackdaniel> what is the prize if you hit bingo?
[12:24:09] <dre> a nice bottle of jackdaniel
[12:24:39] <akater[m]> dre: Also, I say “most often“, etc. everywhere because a setf call can actually run arbitrarily complicated code, or even have no effect at all.  At this level you probably shouldn't bother with that but I don't want to misinform.
[12:25:29] <jackdaniel> your code style is almost acceptable ,)
[12:25:51] <jackdaniel> comments between lines in the body should start with two semicolons like ";; foo"
[12:25:52] <dre> thanks. it seems like a lot of things in lisp have some footnotes that require some "more than noob" understanding to be able to get it. I'm getting there
[12:26:06] <jackdaniel> and you shouldn't put closing parens in a separate line
[12:26:14] <dre> ah yes yes sorry i keep forgetting that, and now I'm noticing all the stray closing parens...
[12:26:21] <dre> yes I will resolve that :P
[12:26:37] <dre> dang procedural upbringing
[12:26:38] <jackdaniel> in cond you usually break the line after the test (eventually, when they are short like yours, align "bodies" to start at the same column)
[12:27:04] <jackdaniel> but generally at first glance it looked just fine, so I can tell that you're trying to follow the "usual style"
[12:27:27] <dre> neat, thanks
[12:27:36] <dre> i didn't know that body thing
[12:27:39] <jackdaniel> also, top-level comments (i.e not in a function body) start with three semicolons
[12:27:42] <jackdaniel> ;;; bam
[12:27:54] <jackdaniel> one semicolon is for comment in the same line as the code (at the end)
[12:28:04] <jackdaniel> and four semicolons are for some top-level comment at the beginning
[12:28:08] * Qwnavery proceeds to write `list` by running a for loop over a quote block with eval
[12:28:39] <dre> Qwnavery, you can just macro that out
[12:28:47] <Qwnavery> :P
[12:28:54] <dre> ok jackdaniel thanks, it's good to get things right
[12:28:59] <Qwnavery> "unusual style"
[12:29:12] <dre> but being 8pm on a sunday, i need to get this down pat
[12:29:17] <dre> before work
[12:30:04] <dre>  so I think I have the data structures right, and I'm aiming to turn the value on each board into a t when that number has been used. ( then I just try to find a whole row of t's and I should be fine)
[12:31:05] <jackdaniel> (if (equal v picking) (setf v t)) is a no-op (because you modify a lexical variable that is discarded soon after
[12:31:41] <dre> do I have to use a (loop ....    and a (setf (nthcar x (nthcar y *boards*)) t)      .... )
[12:31:44] <dre> ?
[12:31:50] <dre> yeah I get the no-op
[12:31:58] <jackdaniel> also this is a one-leg IF, you should write it like (when (equal v picking) …) ; not to mention that IF legs are aligned with the test
[12:32:02] <dre> I just not sure how to get out of it
[12:32:18] <dre> oh right, when, yeah I knew that.
[12:33:40] <jackdaniel> one way to get it right it to map over the list (or even better loop to not cons)
[12:34:00] <dre> oh, wait
[12:34:30] <jackdaniel> i.e (loop for reminder on row do (when (equal (car reminder) picking) (setf (car reminder) t)))
[12:34:33] <dre> I could setf *boards* ( ... mapcar statements ...) and just "if = return t else return number"
[12:34:47] <jackdaniel> sure, if you are collecting things then why not
[12:34:53] <dre> right? effectively re-setf'ing it to itself,
[12:35:04] <dre> not using loops yet
[12:35:06] <jackdaniel>  I suppose that this doesn't matter if you care only to get things working - you may cons a new list "functional style" :)
[12:35:24] <jackdaniel> so keep in mind to return the original or modified version of the element in each lambda
[12:35:26] <dre> I'm not quite confident in cons or loops yett
[12:35:30] <jackdaniel> sure
[12:35:50] <dre> yeah I'm thinking return the value each time, and just setf it to the *boards*
[12:35:52] <jackdaniel> but then you need to assign the mapcar result somewhere
[12:36:04] <jackdaniel> makes sense
[12:36:47] <jackdaniel> I've just remembered a witty quote from paip (I think): "Common Lisp is a perfect tool to write programs fast. It is also a perfect tool to write fast programs." ,)
[12:37:36] <dre> yeah, so like: (setf *boards* (mapcar (L(row) (mapcar (L(V)    (if.. (t) (V))   ) row) *boards*)
[12:37:56] <dre> sorry, that was hard to type, I'll just try and do it..
[12:38:04] <jackdaniel> go ahead, good luck!
[12:43:04] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:43:58] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[12:48:57] *** Joins: pve (~pve@213-216-233-31.bb.dnainternet.fi)
[12:49:17] <dre> oof
[12:49:51] <dre> this cl-ppcre is behaving different in the repl?
[12:50:36] <dre> (cl-ppcre:split "\\s+" "12 1   2 43 65")
[12:51:34] <dre> gives me sensible results (such as ("12" "1" "2" "43" "65")) -- but when I do it in code, I get things like ("" "9" "18" "13" "17" "" "5")
[12:51:51] <dre> as in, the leading spaces get parsed as empty strings ??
[12:52:02] <dre> I can't remove them..
[12:52:30] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[12:52:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:56:28] <dre> nvm I can just do ALL-MATCHES-AS-STRING
[12:57:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:00:59] <beach> dre: I recommend you figure out why the different behavior.  It is not normal.
[13:01:25] <jackdaniel> this regexp will return the first element as empty if there are spaces in front
[13:01:46] <jackdaniel> but the empty sequence near the end doesn't seem right
[13:02:16] * semz suspects a simple mistyped regex ("\\s" instead of "\\s+")
[13:03:12] <semz> might be worth mentioning though that due to a bit of Perl braindamage, cl-ppcre:split behaves strangely near the end unless :limit -1 is provided
[13:03:18] <semz> it is Perl-compatible after all
[13:07:24] <semz> (cl-ppcre:split "," "foo,bar,") ;=> ("foo" "bar") but (cl-ppcre:split "," "foo,bar," :limit -1) ;=> ("foo" "bar" "")
[13:07:39] <jackdaniel> n.b if you just want to split a squence, then there is a library split-sequence
[13:07:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[13:08:23] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Quit: quit)
[13:08:39] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[13:14:42] <dre> beach, i could, but then there's also the topic of "yak shaving" ie: rabbit hole of figuring it out.
[13:15:11] <dre> switching from "split on \\s+" to "match \\d+" is a sensible change and probably what I should've wrote to begin with as it's more precise.
[13:15:30] <hayley> As far as I can tell, the string you were testing at the REPL did not include leading spaces.
[13:15:46] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:16:35] <dre> brb dinner. this is my current code.https://dpaste.org/f583#L
[13:16:48] <dre> hayley, I... don't understand
[13:17:23] <dre> the file I'm reading from has a line like: " 1  2 32 54 76  3 23" so I tried to do similar,
[13:17:33] <dre> brb fire in kitching
[13:19:26] <hayley> So far I'm very tempted to try to do the Advent of Code problems in APL.
[13:21:38] <beach> dre: WHILE LINE is still a violation of the rules stated by Norvig and Pitman on page 13 of the LUV slides.
[13:22:13] <beach> dre: And (= 0 ...) can be better expressed as (zerop ...).
[13:22:35] <beach> dre: And you still have mysterious multiple consecutive blank lines.
[13:23:23] <beach> dre: And the line INPUT-STRINGS) is badly indented.
[13:25:04] <jackdaniel> how should it be indented then?
[13:25:31] <beach> Oops.  My bad.  Misread the preceding line.
[13:25:58] <beach> Because of the unusual alignment of the clause forms.
[13:27:09] <jackdaniel> for length, a better predicate would be (alexandria:length= 0 line) because it has a compiler macro that optimizes check for constant integers
[13:28:08] <jackdaniel> but for a string accessing length is O(1) so nvm
[13:29:28] <beach> Do we have Emacs commands for aligning the forms in COND clauses?
[13:30:12] <beach> If not, that's a lot of work.  Plus, it potentially wastes a lot of whitespace.
[13:30:22] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:31:39] <beach> dre: It's a much better idea to 1. Not have a newline after COND, and 2. Have the first line of each clause be the test, and then each remaining form on a new line.
[13:37:21] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:38:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:40:11] *** Lord_of_Life_ is now known as Lord_of_Life
[13:40:25] <dre> <beach> dre: WHILE LINE is still a violation of the rules stated by Norvig and Pitman on page 13 of the LUV slides.
[13:40:34] <dre> well then how the bloody hell do i fix it in
[13:40:53] <beach> (UNTIL (NULL LINE))
[13:40:57] <dre> zerop -- thanks.
[13:41:17] <beach> Er, UNTIL (NULL LINE)
[13:41:17] <dre> neat, thanks.
[13:41:24] <dre> yep got it
[13:42:20] <dre> beach> dre: And the line INPUT-STRINGS) is badly indented.
[13:42:22] <dre> why?
[13:42:32] <beach> No, I was wrong.
[13:42:34] <dre> input strings is the second argument to the mapcar, (lambda being the first)
[13:42:41] <dre> oh ok
[13:42:46] <beach> Confused by your alignment of the COND clauses.
[13:46:25] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 256 seconds)
[13:52:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:54:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:07:32] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[14:10:28] *** Joins: Inline (~Inline@2a02:908:1252:7a80::133)
[14:12:42] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[14:25:59] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[14:39:14] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[14:39:14] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:40:15] <frgo> Good day everybody. I am currently working on getting c2ffi and cl-autowrap working on arm64 (macOS M1). Should I use "aarch64" as the architecture identification or "arm64"?
[14:43:02] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[14:43:34] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3700:b180:6072:12a9:8472:9a8f)
[14:43:53] <utis> doesn't cl-ppcre support subroutines like (?1) ?
[14:45:14] *** Joins: lisp123windows (~user@80.227.170.170)
[14:45:41] <lisp123windows> What's the best library for creatng portable sockets in CL? Sorry I'm very new to this topic
[14:46:12] <hayley> usocket
[14:48:22] <lisp123windows> hayley: thanks!
[14:51:15] <utis> anyway, what is the reference to use for the regex syntax?
[14:51:45] *** Quits: Inline (~Inline@2a02:908:1252:7a80::133) (Ping timeout: 268 seconds)
[14:53:41] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[14:54:29] <jackdaniel> frgo: do what trivial-features does
[14:54:32] <jackdaniel> (namely arm64)
[14:54:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:55:03] <frgo> Ah - very good point. Wasn't aware of that. Thanks jackdaniel!
[14:55:08] <jackdaniel> sure
[14:55:27] <jackdaniel> n.b that should be specified in spec.md, I just happen to remember that it is arm64
[14:55:52] <jackdaniel> (reference: https://github.com/trivial-features/trivial-features/blob/master/SPEC.md)
[14:58:17] <Nilby> utis: I just use "man perlre" and the cl-ppcre docs, in docs/index.html mention what hasn't been implemented. But keep in mind it's probably circa perl5.
[14:59:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:00:46] <jackdaniel> voila https://github.com/trivial-features/trivial-features/pull/21
[15:02:09] <utis> Nilby: there's no mention of subroutines or recursion, which seem to be features of pcre
[15:05:05] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:08:59] *** Joins: mingus (~jan-magnu@auth-146-185.anyconnect.uib.no)
[15:09:14] *** Joins: Inline (~Inline@2a02:908:1252:7a80::133)
[15:13:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:14:20] *** Joins: makomo (~makomo@user/makomo)
[15:15:27] <Nilby> utis: I've never tried to use that. But I think you can call filter functions if you use the parse tree syntax.
[15:30:04] *** Quits: treflip (~user@95.79.32.99) (Quit: time to work)
[15:35:43] *** Quits: mingus (~jan-magnu@auth-146-185.anyconnect.uib.no) (Ping timeout: 252 seconds)
[15:53:28] *** Joins: random-nick (~random-ni@87.116.165.83)
[16:03:02] *** Joins: igemnace (~ian@user/igemnace)
[16:06:28] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a45f:1962:a62:9e64)
[16:07:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11c9:e45:c52f:f88d:db48:665) (Ping timeout: 240 seconds)
[16:09:47] *** Joins: jpl01 (~user@2001:16b8:496d:9c00:9e6c:8035:ef9:9064)
[16:11:32] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a45f:1962:a62:9e64) (Ping timeout: 240 seconds)
[16:25:11] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:28:35] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[16:29:41] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:50:42] *** Parts: lisp123windows (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[16:56:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[16:56:52] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[16:59:20] <utis> is there a nice way to avoid the repetition in (do ((c (read-char in nil) (read-char in nil))?
[17:01:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:01:40] <utis> i thought it might be possible to write a macro that would be used like (do ((c (ditto (read-char in nil)) . . but couldn't quite figure out how
[17:01:40] <_death> you can (do ((c #1=(read-char in nil) #1#) ...) ...), use some other operator like loop, or just not worry about it
[17:04:41] <pjb> While  (do ((c #1=(read-char in nil) #1#) ...) ...) should work, it is not advised to use structure sharing in code, since it can lead to circular code, whic would most certainly not work.  Even simple structure beside literals, can lead to strange compiler behavior.
[17:04:47] <_death> if the form being repeated is complex, consider extracting some of it to a function
[17:05:06] <pjb> (eg. wrong error message reporting, bad optimization, possibly wrong code generation).
[17:06:58] <edgar-rft> utis: the known limitations of DO were one of the reasons why LOOP was included in the CL standard
[17:10:26] <utis> thanks!
[17:11:51] *** Joins: yewscion44 (~yewscion@72-21-196-64.amazon.com)
[17:11:57] <Nilby> I like (loop for c = (read-char in nil) while c do …)
[17:12:27] *** yewscion44 is now known as yewscion
[17:16:36] <beach> Nilby: So either you didn't read my remark to dre before, or your opinion is more valuable than that of Norvig and Pitman.
[17:18:22] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:21:31] <jackdaniel> beach: putting (not (null foo)) where generalized boolean suffices is not a very common convention
[17:21:47] <jackdaniel> it is not ambiguous either
[17:22:01] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[17:22:01] <jackdaniel> so perhaps more people disagree with these smart people
[17:22:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:22:20] <beach> I don't think I mentioned (not (null foo)) today.
[17:23:49] <beach> So that would be putting words into my mouth.
[17:23:56] <jackdaniel> sorry, you are right. I have until (null foo) categorized the same in my mind (I agree that they are different, but the remark above still is applicable)
[17:24:12] <jackdaniel> that was not my intention
[17:24:20] <beach> Good.
[17:26:52] <beach> I know that some people here disagree with these two smart, knowledgeable, and highly experienced developers.  But unless those people can somehow convince me that they are smarter, more knowledgeable, or more experienced, I will continue pushing the opinion of Norvig and Pitman.
[17:27:55] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[17:28:05] <beach> It is also find if those people do whatever they want in their own code, but it would be good if they were to be more careful when giving advice to others.
[17:28:12] <beach> s/find/fine/
[17:29:16] <jackdaniel> it is not that smart, knowledgeable, and highly experienced people are always correct (and it is not that it requires being smarter, more knowledgeable and more expierienced to disagree - especially when it comes to stylistic preferences)
[17:32:00] <beach> But it is not a "stylistic preference".  It has to do with the speed with which the person reading the code can understand it.  So maybe you are faster than I am, but when I see WHILE C, I mentally have to stop and do the transformation into UNTIL (NULL C) which takes time.  And a know for a fact that when I experience something like that, I am not unique.
[17:33:57] <jackdaniel> perhaps this is a personal quirk of mine, but 'WHILE c' is for me faster to parse (as an idiom) than UNTIL (NULL C) (perhaps because of a double negation?)
[17:33:58] <beach> So perhaps I should start putting it like this: Perhaps you don't care about people like me, of which we think there are a lot, but the very smart, very knowledgeable, and highly experienced developers Norvig and Pitman have apparently worked in development teams with such people, because they recommend you make their life easier by wasting less of their time.
[17:35:26] <beach> jackdaniel: There is no double negation.  UNTIL (NULL C) means "until C is a default value rather than a character", not "until C is not true"
[17:35:39] <attila_lendvai> interesting. i think processing (while c ...) is faster/easier for me than (until (null c) ...)
[17:35:59] <beach> Write WHILE (CHARACTERP C) instead if you worry about NULL.
[17:37:33] <Guest74> Styles change with the times, like language in general does.  Do Norvig and Pitman even Lisp anymore?
[17:37:49] <beach> Guest74: This is not about style, as I said.
[17:37:58] <jackdaniel> I have no information how thorugh they were with gathering data about other developers (perhaps they indeed gathered some insightful statistics, but that doesn't seem very probable for a style guide). UNTIL reads for me as (COMPLEMENT WHILE) - but as I've said, this may be very much a personal inflexibility
[17:38:55] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[17:39:22] <jackdaniel> I think that I have nothing interesting to add so I'll keep quiet now (unless asked about something)
[17:39:39] <beach> Same here.
[17:39:43] <Guest74> beach: style, language, and communication are intertwined.  those who 'invented' texting may have caused headaches in their parents, but for them it was easier to parse.
[17:42:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:43:55] <beach> Guest74: I get the hint.
[17:44:15] *** Quits: jpl01 (~user@2001:16b8:496d:9c00:9e6c:8035:ef9:9064) (Remote host closed the connection)
[17:45:13] <Guest74> You may have inferred more than what I meant/wrote, I don't know what this 'hint' is.
[17:46:41] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[17:47:44] <Nilby> https://youtu.be/f9vRcSAneiw?t=2015
[17:56:08] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[17:57:27] <Guest74> for reading files I just use :until (eql char :eof) which methinks communicates more info.
[17:59:06] <beach> Yes it does because it makes the default value more specific, so it can't be confused with a Boolean.
[18:00:12] <beach> It perfectly mimics what I said above namely it means "until C is a default value rather than a character".
[18:00:42] *** Quits: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff) (Quit: [deleted])
[18:02:34] *** Quits: Alfr (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[18:02:39] *** Joins: Alfr (~Alfr@user/alfr)
[18:02:57] <Guest74> I remember reading a lot of that in old code, but not so much in recent code.
[18:08:23] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Quit: Connection closed)
[18:09:07] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[18:09:29] <yitzi> I like Pittman's (I believe) trick of using the stream itself as the eof value. Works with read.
[18:09:48] <beach> Clever.
[18:10:09] <beach> Also avoids the Boolean confusion.
[18:10:21] <yitzi> But, yeah :eof is the value used in the Gray stream protocol
[18:10:31] <beach> True.
[18:11:37] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[18:13:24] <jackdaniel> yitzi: what does it give you? (I'm not aware of the trick)
[18:13:44] <beach> jackdaniel: No need to invent yet another default value.
[18:14:27] <beach> Not that one more :EOF matters, of course.
[18:14:50] <_death> jackdaniel: it gives you a "unique" value for READ to return
[18:15:00] <jackdaniel> I see, I thought that there are some other consequences. Thanks.
[18:15:20] <jackdaniel> I was fixated on read-char when thinking about this (so nil seemed fine)
[18:15:52] <yitzi> https://plaster.tymoon.eu/view/2751#2751
[18:16:18] <yitzi> jackdaniel: Allows one to read :eof also. No danger of reading the eof indicator.
[18:16:25] <jackdaniel> makes sense, yes
[18:16:40] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC)
[18:16:52] <jackdaniel> I think that I did once use an uninterned symbol for that, but using the stream makes more sense
[18:17:15] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[18:17:59] <beach> I have been using (LIST NIL), but using the stream avoids consing and it avoids another lexical variable.
[18:17:59] <yitzi> Yes, I have seen that too. Using the stream is maybe a little less obvious to the casual reader as to what is going on...but it's clever.
[18:18:02] <Guest74> hm, I find that more confusing than :eof.
[18:18:14] <beach> Guest74: But :EOF doesn't work for READ.
[18:18:52] <Guest74> (read stream nil :eof)?
[18:19:07] <beach> Guest74: The stream can very well contain the :EOF symbol.
[18:19:18] <beach> But it can't contain the stream.
[18:19:42] <_death> #.*the-stream* ;)
[18:20:06] <Guest74> ah, well, not in any streams I've been 'read'ing.
[18:20:52] <beach> Relying on that might create some very subtle bugs.
[18:21:01] <Guest74> I try to avoid READing lisp or texts.
[18:21:28] <yitzi> Yes, its Pitman's trick. Found the reference https://github.com/sbcl/sbcl/blob/1c4a7e09a2cff65c8da4e9898f156970bb963b7d/src/compiler/main.lisp#L964-L965
[18:21:29] <Guest74> I'm waiting for someone to write a nice safe reader or sandbox environment.
[18:21:50] <jackdaniel> then wait no more, use eclector
[18:21:55] <beach> Guest74: Eclector is not "safe"?
[18:22:24] <Guest74> tbh, I still have nothing to read.
[18:22:36] <jackdaniel> then why are you waiting?
[18:22:39] <Guest74> Though I have been thinking about it.  About how to store defaults.
[18:23:12] <beach> yitzi: I will try to remember that one.
[18:23:34] <Guest74> e.g., writing an interface to the openweather api, and wondering where to store things like units, api key, etc...
[18:24:24] <Guest74> But since it's an interface that a frontend writer would use, I'm not even sure that's my responsibility.
[18:24:44] <Guest74> Though when I write a frontend, I'd still face the same issue.
[18:25:09] <yitzi> beach: Cool. One can definitely see the necessity of it in something like SBCL's do-forms which reads forms to be evaluated while preserving source code info.
[18:29:17] <_death> https://plaster.tymoon.eu/view/2752#2752
[18:29:24] <_death> load it
[18:32:58] <Guest74> where does *source-info* come from?
[18:33:17] <_death> see yitzi's link
[18:33:23] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[18:33:54] <Guest74> but in general, should we be LOAD/READing human writable configurations?
[18:34:29] <_death> it depends
[18:34:35] *** Joins: unyu (~pyon@user/pyon)
[18:36:04] <Guest74> I actually wrote something that archives and restores symbols to/from disk.  Not even sure why.  with the ability to load a certain save by timestamp.
[18:36:35] <_death> from your description, I would say leave the storage details to the user.. maybe make it easy to query for a plist containing the current settings or something
[18:38:52] <Guest74> everything is currently in specials. my thinking being a frontend can just bind those.
[18:39:34] <Guest74> Now if you've got a graphical frontend, do people automatically expect you can configure it through the gui?
[18:39:35] <_death> that's one way.. another is to create an instance containing the stuff..
[18:39:52] <_death> maybe have a single special for that
[18:41:55] <Guest74> I swear this is the hardest part of programming.  At least for me.
[18:42:40] <Guest74> I kinda still want people to just be able to call the functions from the repl if they want, without having to bind a settings object.
[18:43:14] <_death> &key (client *client*)
[18:43:17] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[18:43:34] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[18:45:39] <Guest74> What I've thought of for some vector stuff is having &key (style *style) stroke fill etc... and then doing (or(stroke)(style-stroke style)) but not sure how nice that is stylistically or having a bunch of things cluttering &key
[18:45:54] <Guest74> but it would allow the exact same semantics as svg.
[18:46:18] <Guest74> oops, no () on stroke.
[18:48:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:50:27] <_death> in limited cases the FORMAT (i.e. t -> *standard-output*) approach may also make sense.. in macros you can just omit the default (out "foo") and provide the user with special syntax to specify the target if needed, like (out (:to a-stream) "foo")
[18:54:21] <Guest74> something to think about.  I still need to refactor things as lots of redup in api calls, and want each function to work with either city, id, or lat/long.
[18:55:14] *** Alfr is now known as Guest760
[18:55:14] *** Quits: Guest760 (~Alfr@user/alfr) (Killed (tantalum.libera.chat (Nickname regained by services)))
[18:55:19] *** Joins: Alfr (~Alfr@user/alfr)
[18:58:25] *** Joins: makomo (~makomo@user/makomo)
[19:02:09] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[19:04:19] <Xach> I have the clutter of ((:credentials *credentials*) *credentials*) in my lambda lists, so they can be overridden dynamically or statically in various ways.
[19:04:48] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Remote host closed the connection)
[19:05:09] *** Joins: asarch (~asarch@2806:10ae:7:ee7e:6aad:7f64:a18d:f7bb)
[19:05:27] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[19:06:50] <_death> Xach: careful with that.. if the user is able to pass a function, the rebinding should be part of the documented behavior
[19:11:52] *** Quits: Inline (~Inline@2a02:908:1252:7a80::133) (Quit: Leaving)
[19:14:31] <Guest74> xach: I guess I can make a big mess and write &key (style*style*) (fill (style-fill style))(stroke (style-stroke style), that might get ugly with all the vars.
[19:15:44] <Guest74> the idea is to support theming in the UI and the ability to override it in each function.
[19:16:31] <Guest74> ugh, maybe i need a layer inbetween.
[19:17:14] *** Quits: asarch (~asarch@2806:10ae:7:ee7e:6aad:7f64:a18d:f7bb) (Quit: Leaving)
[19:18:30] <lisp123> Guest74: Have a read of the CLIM source code, IMO its quite useful in seeing good ways to deal with such things
[19:18:50] <Guest74> no thanks for the third time.
[19:19:03] <lisp123> I didn't say to use it
[19:19:19] <lisp123> I said to check out its code for inspiration around optionals / keywords
[19:19:29] <lisp123> w.r.t to &key (style *style*) etc
[19:21:09] <lisp123> What I appreciated more after working with CLIM was the use of dynamic variables for defaults as it can make things a bit faster (only requiring you to shadow the variable when you want to override it vs. creating a new binding in each call)
[19:21:32] <lisp123> (I hope I understood the intent correctly, I assume it was due to the above ^)
[19:22:13] *** Joins: Oladon (~olad@98.43.81.226)
[19:22:34] <jackdaniel> since we are at it, i.e drawing context is not about shadowing variables but rather their state. i.e (with-drawing-options (stream :ink +red+) …) changes the stream's ink for the reminder of the operator dynamic scope
[19:23:54] <lisp123> jackdaniel: Yes, that's a more correct way to put it
[19:24:43] <jackdaniel> currently not thread-safe™, but in principle it is possible - I believe that contextL allows danamically bound slots
[19:24:52] <jackdaniel> dynamically*
[19:27:44] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[19:27:50] <lisp123> jackdaniel: Sorry I am a bit slow today (everyday?). What do you mean by the last part
[19:29:44] <jackdaniel> lisp123: https://github.com/pcostanza/contextl is a library created by Pascal Costanza
[19:30:15] <jackdaniel> it operates on a concept called "layers" that may be dynamically bound and influence the class behavior
[19:34:16] <lisp123> jackdaniel: Thanks for the link. Interesting stuff
[19:35:33] <jackdaniel> sorry for not being able to describe it better - I'm not well familiarized with the library; I'm only aware of it :)
[19:36:47] <lisp123> No worries, I kinda of get it. But its like AOP, sometimes too much abstraction makes things too advanced for the average programmer
[19:37:50] <lisp123> IMO one has to be careful with too much shenanigans at runtime. But in large projects it does make a lot of sense
[19:50:20] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[20:00:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[20:02:36] *** Joins: aeth (~aeth@user/aeth)
[20:03:43] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a45f:1962:a62:9e64)
[20:12:53] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:f767:b15a:e5b1:96f0)
[20:23:10] *** Joins: notzmv (~zmv@user/notzmv)
[20:23:52] *** Joins: engblom (~foo@user/engblom)
[20:24:43] <engblom> It looks like macrolet is not working inside of a macro. Is that true or do I have some typos?
[20:26:07] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[20:26:23] <beach> There is no such restriction, so you must be doing something strange.
[20:27:17] <engblom> Thanks
[20:29:58] <engblom> So (defmacro foo (bar) (macrolet ((baz (qux) ..... ) ....)) is OK?
[20:32:00] <beach> Sure.
[20:35:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:41:15] <engblom> I must be doing something stupid. As there seems to not be much activity on the channel at this moment I will paste a macro;
[20:41:18] <engblom> (defmacro getf-hash-plist (hash-or-plist key)
[20:41:18] <engblom>       `(getf ,hash-or-plist ,key)))
[20:41:21] <engblom>   (if (hash-table-p (eval hash-or-plist))
[20:41:24] <engblom>       `(gethash ,key ,hash-or-plist)
[20:42:09] <engblom> When I have this macro outside of another macro, everythign works. As soon as I move it inside that macro and use (marolet) it no longer works. Is there something I need to do when moving it inside of another macro?
[20:42:57] <beach> I think your parentheses are unbalanced.  But please use a paste site for more than one line of code.
[20:43:11] <beach> Maybe your lines came across out of order.
[20:43:31] <beach> engblom: EVAL is a bad sign.
[20:43:58] <beach> If you seem to need to evaluate the argument to a macro, it's a sign that you should use a function instead.
[20:44:09] <engblom> I will put the whole problem to a paste site.
[20:44:52] <beach> In fact, I am pretty sure this should not be a macro.
[20:45:18] <engblom> Here is the whole thing: https://pastebin.com/DX2XNWSH
[20:46:06] <engblom> As it is there in the pastebin, it is working. However if I move the macro inside the other with macrolet, it does not work anymore.
[20:46:13] <beach> You must have TABs in your code because it is incorrectly indented.
[20:47:55] <beach> I'll let someone else have a look at that.  I am too tired to figure it out, and I need to go fix dinner for my (admittedly small) family.
[20:48:51] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[20:50:16] <engblom> beach: It seems like emacs running evil will place tabs when doing gg=G (which is to go to top and then indent everything all the way down to bottom)
[20:50:26] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[20:50:33] *** Joins: aeth (~aeth@user/aeth)
[20:51:02] <engblom> beach: Thank you anyway for trying to look at it.
[20:52:31] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[20:58:46] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:00:51] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11c4:b126:384e:5489:b186:db06)
[21:01:02] <engblom> Apparently Emacs does indent with tabs as default. I have now set (setq indent-tabs-mode nil) in .emacs. The new correctly indented paste is here: https://pastebin.com/1DDL2Z2g
[21:04:31] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a45f:1962:a62:9e64) (Ping timeout: 245 seconds)
[21:11:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[21:13:05] *** Joins: aeth (~aeth@user/aeth)
[21:18:42] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Quit: Connection closed)
[21:22:01] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[21:28:37] *** Joins: Inline (~Inline@2a02:908:1252:7a80::133)
[21:36:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:36:43] <cage> hi! A friend of mine is trying to make a bsd port for a lisp program but it fails with this error on osicat/cffi grovel, here is the backtrace: https://clbin.com/e4bSH
[21:36:47] <cage> any idea?
[21:38:21] *** Joins: op2 (~op2@user/op2)
[21:38:45] <jcowan> TIL that keyword names in a lambda list don't in fact have to be keywords: any symbol will work.
[21:41:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[21:41:52] *** Joins: treflip (~user@95.79.32.99)
[21:42:50] <jcowan> What's the collective wisdom on having both optional and keyword parameters?  Just fine, speciel cases only, or stylistically bad?
[21:45:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:49:06] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:50:50] <lisp123> jcowan: depends on your use case IMO
[21:51:14] <lisp123> When certain variables are likely to be supplied and its annoying to type :keyword first, then optionals shine
[21:51:34] <lisp123> Where there are multiple different parameters, then keywords are helpful
[21:52:23] <lisp123> And when mixing the two, think about how the user will call the function. In general IMO good to stick to just keywords in that case, but if there's a keyword that one will use very often, then might as well throw it in there as an optional
[21:52:40] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:53:19] <lisp123> For internal code, mixing is also not too bad, but for external code, I guess it can be slightly off putting
[21:54:25] <lisp123> According to PCL: Combining &optional and &key parameters yields surprising enough results that you should probably avoid it altogether.
[21:55:06] <jcowan> an optional perhaps should be replaced by mandatory-with-null-value, where null value is either nil or a magic object: (define-constant magic-object #:magic-object)
[21:55:30] <jcowan> if it is almost always present
[21:55:54] <lisp123> That tends to be the way I write
[21:57:14] <lisp123> I mean, I use default values for optionals and will write them as keywords
[21:58:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:00:07] <lisp123> As a final point from me, I may combine &optional &key when writing functions in a quasi-modular way - e.g. (defun remove-duplicates-from-hash-table (&optional (table *my-hash*) &key (test #'equal)) ....), and in the future if the code needs to be abstracted to a utilities function, I would replace the optional part with a keyword
[22:00:46] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[22:00:55] <lisp123> But at least at the earlier quasi-modular step, I can refer to TABLE vs. *my-hash* in my code, without unnecessarily burdening calling functions by require table name to be always supplied
[22:02:10] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:06:41] *** Joins: notzmv (~zmv@user/notzmv)
[22:08:24] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[22:17:58] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:23:43] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 256 seconds)
[22:24:05] *** Joins: yewscion_ (~yewscion@2604:ca00:158:43c::60:83b0)
[22:24:53] *** yewscion is now known as Guest2713
[22:24:53] *** yewscion_ is now known as yewscion
[22:26:58] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[22:29:19] *** Quits: Guest2713 (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 252 seconds)
[22:31:21] *** Joins: akoana (~ah@user/akoana)
[22:34:27] *** Joins: dra (~dra@2a04:4540:6406:7f00:e129:4a92:f9f4:8dd4)
[22:34:49] <jackdaniel> jcowan: don't mix them. in fact, never use optional for exported interfaces
[22:38:02] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11c4:b126:384e:5489:b186:db06) (Ping timeout: 240 seconds)
[22:41:20] *** Joins: skeemer__ (~skeemer@h-178-174-193-227.NA.cust.bahnhof.se)
[22:42:25] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[22:43:15] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:44:26] *** Quits: akoana (~ah@user/akoana) (Ping timeout: 256 seconds)
[22:44:40] *** Quits: skeemer (~skeemer@h-178-174-193-227.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[22:45:54] *** Joins: akoana (~ah@user/akoana)
[22:52:22] *** Quits: Inline (~Inline@2a02:908:1252:7a80::133) (Quit: Leaving)
[22:53:07] <engblom> I am asking once more in case someone has joined who would be able to answer. Why is https://pastebin.com/1DDL2Z2g working as it is in the paste, but not if I move the upper macro inside the lower with help of macrolet?
[22:53:24] <engblom> Also, could this be done in a better way?
[22:54:26] <jackdaniel> engblom: please show both versions
[22:55:18] <jackdaniel> also if that's not too much paste them on plaster.tymoon.eu
[22:55:44] <jackdaniel> pastebins are unusable with all ads and cookie popups on mobile
[22:57:30] <engblom> jackdaniel: Here is the first version (which works): https://plaster.tymoon.eu/view/2753#2753
[22:58:07] <engblom> jackdaniel: I do no longer have the macrolet version, but I definied the inner macro right before the labels
[22:58:52] <jackdaniel> well, how things are nested makes a difference, that's why I ask
[22:59:27] <jackdaniel> you could have ysed in the expansion a macro that is available in the macro environment
[22:59:35] <jackdaniel> or vice versa
[23:00:04] <engblom> I will try to remake the version I had that did not work
[23:00:25] <Guest74> is there a reason why getf-hash is a macro?
[23:04:39] <jackdaniel> there clearly is, because build-rsetf puts the expansion in the location position
[23:04:53] <engblom> Here is the version where I combined version that is not working: https://plaster.tymoon.eu/view/2754#2754
[23:05:07] <engblom> combined everyting*
[23:05:22] <jcowan> jackdaniel: I don't know: would you rather write (print x out) or (print x :ostream out)?  Surely the first is just as clear?
[23:06:09] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:06:28] <jcowan> (print x :to out) has some merit, I guess
[23:06:43] <jackdaniel> engblom: as I have suspected - you define the macro in macro environment
[23:06:57] <jackdaniel> and use it in the function env
[23:07:08] <jackdaniel> that can't possibly work
[23:07:28] <jackdaniel> btw, your snippet has awful indentation
[23:07:35] <engblom> jackdaniel: How would you do it? I mean, the function is recursive so I would not want to define the macro for each iteration.
[23:07:54] <jackdaniel> hang on, I'll switch to computer from my phone
[23:08:45] <engblom> jackdaniel: Yes, I was in hurry to copy and paste the macro and forgot to tell the editor to reindent the stuff
[23:12:58] <engblom> Here is the editor indented code: https://plaster.tymoon.eu/view/2755#2755
[23:13:41] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[23:14:42] <jackdaniel> without checking: https://plaster.tymoon.eu/view/2754#2756
[23:14:51] <jackdaniel> the little one is calling, a night story time ciaos
[23:16:15] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[23:19:06] <engblom> jackdaniel: It is complaining about value being unbound
[23:20:21] <engblom> "The variable VALUE is unbound."
[23:22:15] <jackdaniel> unquote it in recursive call to build-setf
[23:22:26] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:26:32] <engblom> Now it is saying "The variable KEYS is unbound."
[23:32:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:33:08] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:34:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:34:48] <engblom> Actually, if there exists something like plist-hash-table from alexandria, but recursive, I could simplify it a lot.
[23:37:59] *** Joins: zos (~zos@ool-457a8044.dyn.optonline.net)
[23:41:32] *** Joins: Oladon (~olad@98.43.81.226)
[23:44:56] <pjb> engblom: getf-hash-plist cannot work: (let ((map (if (zerop (ramdom 2)) (make-hash-table) '(:k1 v1 :k2 v2))))  (getf-hash-plist map :k1))
[23:46:50] <pjb> engblom: do you understand why it cannot work?
[23:47:19] <engblom> pjb: That part really works for this specific case
[23:47:37] <pjb> engblom: try: (let ((map (if (zerop (ramdom 2)) (make-hash-table) '(:k1 v1 :k2 v2))))  (getf-hash-plist map :k1))
[23:48:16] <jackdaniel> engblom: generally if you need to call eval on the object then you probably shouldn't use a macro
[23:48:23] * jackdaniel is back
[23:48:48] *** Joins: Alfr (~Alfr@user/alfr)
[23:49:13] <pjb> engblom: or try: (let ((p '(k1 (k11 1 k12 2) k2 3))) (rsetf p 44 k1 k12))
[23:49:14] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[23:50:37] <theothornhill> Is it hard to make a program async in retrospect, in common lisp?  As I'm doing my first implementation I don't want to deal with that to make sure things are correct first.  Is that stupid?
[23:51:11] <pjb> theothornhill: no, it's not hard.  Instead of (program), write (bt:make-thread (lambda () (program)))
[23:52:09] <theothornhill> Is that so? Nice. That's what I was hoping for
[23:53:53] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:54:05] <pjb> engblom: macros are functions that tranform programs (or program elements) into programs.  The macro getf-hash-plist cannot test the data, since the data will only be known at run-time.  It can only test the program, ie. the symbols and the expressions.
[23:54:21] <jackdaniel> engblom: you may use i.e this function https://plaster.tymoon.eu/view/2754#2757
[23:54:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:55:03] <jackdaniel> that could be made an iteration as well
[23:57:42] <engblom> jackdaniel: It seems to not work when I test it with my data. I get "debugger invoked on a TYPE-ERROR in thread" where it confuses the key of a hashtable with the hash table itself
[23:57:49] <mfiano> For a C struct defined with cffi:defcstruct, if a slot specifies an offset, is it optional for all subsequent slots to not be realigned? Quick testing says yes, but I just want to confirm I do not have to specify :offset for all following slots if they are to be contiguous with the single offsetted slot's memory.
[23:59:20] <engblom> jackdaniel: The structure I tested it with a is a hash table where each value is a plist
[23:59:32] <jackdaniel> engblom: as the error tells you, the order of arguments is wrong
[23:59:48] <jackdaniel> you may try to fix it yourself
