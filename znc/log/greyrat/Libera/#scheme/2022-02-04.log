[00:01:00] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[00:05:37] *** Joins: rgherdt (~rgherdt@2a01:598:b1a9:2c22:b0f:83f9:c71a:9fa0)
[00:07:03] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:07:15] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[00:09:21] *** Quits: schulze (~schulze@dynamic-077-010-203-016.77.10.pool.telefonica.de) (Quit: schulze)
[00:11:36] *** Parts: theothornhill (4948e39ef8@2604:bf00:561:2000::40) ()
[00:22:10] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[00:39:47] *** Joins: silasfox (~sbv@p200300cec71e05007be390e80903282d.dip0.t-ipconnect.de)
[00:43:33] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[00:46:28] *** Parts: sdu (~sidu@185.44.146.61) ()
[00:59:00] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (Remote host closed the connection)
[01:03:53] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[01:21:06] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[01:21:57] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[01:25:49] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[01:45:53] *** Quits: paul_j (~user@67.26.169.217.in-addr.arpa) (Quit: Asta la vista)
[01:46:15] *** Joins: nalaginrut (~nalaginru@113.118.234.75)
[01:46:35] *** Quits: apg (~apg@97-120-125-115.ptld.qwest.net) (Ping timeout: 256 seconds)
[01:47:19] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[02:01:25] *** Joins: patrice (~patrice@user/patrice)
[02:07:17] *** Quits: rgherdt (~rgherdt@2a01:598:b1a9:2c22:b0f:83f9:c71a:9fa0) (Ping timeout: 240 seconds)
[02:13:05] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[02:17:30] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[02:23:50] *** Joins: badkins (~badkins@136.56.92.199)
[02:29:33] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[02:59:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:08:53] *** Quits: evdubs (~evdubs@user/evdubs) (Quit: Leaving)
[03:09:40] *** Joins: badkins (~badkins@136.56.92.199)
[03:11:01] *** Quits: patrice (~patrice@user/patrice) (Ping timeout: 256 seconds)
[03:12:17] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[03:13:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[03:21:20] *** Quits: museee (~museee@user/museee) (Quit: Leaving)
[03:23:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:24:04] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[03:25:27] *** Joins: evdubs (~evdubs@user/evdubs)
[03:25:38] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2) (Quit: Leaving)
[03:38:25] *** Joins: ouestbillie (~ced@192-222-138-215.qc.cable.ebox.net)
[03:43:09] *** Joins: badkins (~badkins@136.56.92.199)
[03:47:08] *** ouestbillie is now known as cedb
[03:47:18] *** Joins: patrice (~patrice@user/patrice)
[04:00:33] *** Quits: Avichi (~Avichi@a82-161-111-126.adsl.xs4all.nl) (Ping timeout: 256 seconds)
[04:05:06] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:05:42] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[04:23:21] *** Quits: cedb (~ced@192-222-138-215.qc.cable.ebox.net) (Quit: WeeChat 3.4)
[04:28:16] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[04:30:08] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[04:31:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:33:56] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[04:43:03] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[04:43:37] *** Quits: patrice (~patrice@user/patrice) (Ping timeout: 240 seconds)
[04:44:22] <vms14> guys what's your favourite scheme implementtion and what you do / have done with it?
[04:45:13] <evdubs> built https://github.com/evdubs/renegade-way with racket
[04:46:29] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[04:47:07] <vms14> mine is s7 scheme, I'm not fan of scheme really, but it's extremely easy to put this scheme wherever you want (have put it in android and made a repl with java sockets) and turns to be a really nice implementation. I prefer cl, but this scheme has some cl stuff, like the format function, a thing I was missing from cl, so I think I can get used to this scheme, and the fact is so easy to embed it in stuff and add ffi makes it for me ver
[04:47:07] <vms14> powerful
[04:47:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:47:55] <vms14> evdubs: so you like big data
[04:48:00] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:48:02] *** Joins: badkins (~badkins@136.56.92.199)
[04:48:21] <evdubs> i like data, big or small
[04:48:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326)
[04:48:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326) (Changing host)
[04:48:56] *** Joins: skapata (~Skapata@user/skapata)
[04:49:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:50:47] <vms14> I'm trying to automate s7 ffi
[04:50:49] <vms14> https://termbin.com/43d4
[04:52:14] <vms14> https://termbin.com/23yq this is a test to see if it worked, it just creates a window
[04:52:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:53:49] <vms14> I have to rewrite it, I need to write c from scheme, this example writes c code to create a s7 scheme interpreter and bind xlib functions
[04:54:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:55:05] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:55:32] <vms14> atm is nice as long as the objects are black boxes and accessed by functions, but if for example I have to operate on structs I'm fucked, I have to provide a way to write general purpose c code (s7 scheme actually does have stuff to generate c and load it dynamically with dlopen)
[04:56:03] <vms14> https://ccrma.stanford.edu/software/snd/snd/s7.html
[04:57:03] <vms14> if you want to try it cc -c s7/s7.c -Is7 -lm will create a s7.o file
[04:57:45] <vms14> then you can write some.c to create interpreters and stuff and compile it with that .o
[04:58:42] <vms14> I really like it, I don't know what other schemers can say about, it seems to be "fast"
[05:00:51] <vms14> btw if you're goint to try it it will ask for a file named mus-conf.h or alike, you can remove this #include in the first lines of the s7.c or create an empty file with this name
[05:01:01] <vms14> going*
[05:02:27] <vms14> and you can set -DWITH_MAIN so it creates a repl instead of generating the .o (removing the -c option)
[05:06:11] *** Joins: patrice (~patrice@user/patrice)
[05:07:04] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[05:09:30] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:12:07] *** Joins: jrincayc1 (~Thunderbi@38.70.240.202.sumofiber.net)
[05:14:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[05:15:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[05:15:37] *** jrincayc1 is now known as jrincayc
[05:16:42] *** Joins: aeth (~aeth@user/aeth)
[05:26:37] *** Joins: cedb (~ced@192-222-138-215.qc.cable.ebox.net)
[05:32:22] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[05:33:33] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[05:35:11] *** Quits: patrice (~patrice@user/patrice) (Ping timeout: 256 seconds)
[05:38:34] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:39:17] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:44:38] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 268 seconds)
[05:45:15] <vms14> some scheme books to recommend?
[05:45:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:49:11] <em> vms14: SCIP https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjSxOLH_eT1AhXFmeAKHfHsDnoQFnoECA8QAQ&url=https%3A%2F%2Fweb.mit.edu%2Falexmv%2F6.037%2Fsicp.pdf&usg=AOvVaw1oh56aE7mvJyPVotsjzyEo
[05:49:11] <rudybot_> https://teensy.info/V5wIOUOxqs
[05:49:21] <Zipheir> vms14: What have you read so far?
[05:51:54] *** Joins: patrice (~patrice@user/patrice)
[05:53:08] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:53:41] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[05:55:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:57:46] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[05:58:18] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[05:58:30] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[06:04:46] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:05:35] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[06:10:11] <vms14> Zipheir: first pages of sicp, I come from Common Lisp, I have a little base, need to learn about stuff like continuations and alike
[06:10:42] <vms14> I use s7 scheme which has some differences, althought it says it's mostly compatible
[06:11:25] <cedb> if you know CL you know scheme
[06:11:37] <cedb> well apart from call/cc and syntax-rules
[06:11:57] <cedb> doesnt work the other way around though
[06:11:59] <vms14> there is no syntax rules in s7 scheme, but define-macro
[06:12:03] * cedb shakes fist at lisp2
[06:12:18] <cedb> hmm interesting, my company is still on r5rs
[06:12:30] <vms14> and macros as lambdas, environments are first class objects and some more weird stuff 
[06:12:43] <vms14> and something named bacro
[06:13:05] <vms14> which is a macro but seems to have differences in scope
[06:13:14] <vms14> or context, also has reader macros
[06:13:15] <cedb> you talking CL vs scheme or r7rs new stuff
[06:13:17] <cedb> im lost
[06:13:36] <vms14> cedb: is s7 scheme, a scheme implementation with some cl stuff
[06:13:47] <vms14> it has the format function
[06:14:05] <vms14> https://ccrma.stanford.edu/software/snd/snd/s7.html
[06:14:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[06:14:46] <cedb> oh i thought you were just being terse to mean r7rs
[06:14:49] <cedb> interesting
[06:15:15] <cedb> yet another day, another scheme
[06:15:35] <cedb> im doing a project with a friend and I need to ramp up on txr lisp
[06:15:40] <cedb> so manyy lispss gahh
[06:16:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:16:41] <vms14> cedb: this one seems to be "old"
[06:16:58] <cedb> txr?
[06:17:01] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[06:17:07] <vms14> and I'd like to see what others lispers/schemers say about it, for me, I like it a lot
[06:17:32] <vms14> cedb: idk what is txr
[06:17:40] <cedb> oh you meant s7
[06:18:08] <cedb> yeah id love everyone to just use a base r7rs with akku
[06:18:12] <cedb> so you know
[06:18:31] <vms14> cedb: which implementation do you use?
[06:18:58] <cedb> for work, a subset of 5rs my boss wrote 
[06:19:11] <cedb> for personal use, i'd like to zero in on guile
[06:19:14] <vms14> the problem of scheme is the standard won't cover stuff the users really "require"
[06:19:25] <cedb> thats why we need two standards
[06:19:33] <vms14> so any implementation has to provide it's own stuff, like sockets, gui, etc
[06:19:34] <cedb> a real life one and a research one
[06:19:55] <cedb> vms14: thats what rakku is trying to solve from what i gathered
[06:20:15] <vms14> cedb: he will create yet another lisp
[06:20:25] <vms14> :D
[06:20:49] <vms14> and by trying to get people to use that lisp the community will fragment more
[06:20:57] <cedb> who is gonna do that?
[06:21:09] <vms14> idk, what will thit guy do?
[06:21:13] <vms14> a standard?
[06:22:01] <vms14> lol
[06:22:02] <vms14> https://akkuscm.org/
[06:22:09] <vms14> thought akku was some guy
[06:22:44] <vms14> it's like a scheme version manager + stuff like js babel?
[06:22:55] <cedb> idk babel
[06:23:16] <cedb> it looks more like a package manager that tries to compensate for idiosyncracies of impl dependent stuff
[06:25:18] <vms14> seems like you "use features" and finds implementations providing them
[06:26:00] <vms14> and it seems you'll have several implementations, unless you get racket xd
[06:27:04] <vms14> racket for me seemed like the best toy language
[06:27:09] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:27:35] <Zipheir> Various implementations cover various things.  The standards aren't meant to cover everything, although there's a lot more in R7RS-large than in any previous Scheme standard.
[06:27:37] <vms14> I know it expanded a lot with the time and has libraries for almost everything
[06:28:34] <vms14> what scheme would you use for production?
[06:29:06] <vms14> for example I remember some benchmarks time ago with racket servers weren't nice as other languages
[06:29:07] <Zipheir> The community disagreed mightily over R6RS libraries, in particular the record system.  You can imagine how contentious a GUI library would be. 8-|
[06:29:30] <vms14> Zipheir: scheme at first wanted to be a tiny language
[06:29:42] <vms14> does it seem to want it now?
[06:30:02] <Zipheir> Not necessarily.  "Tiny" could mean "just lambda".
[06:30:23] <Zipheir> The goal was to provide a powerful core that could be used for just about anything.
[06:30:26] <vms14> I sometimes see cl as c++ and scheme as C
[06:30:34] <cedb> we need a scheme tower
[06:30:51] <cedb> agree on base standards and stack other standards on top
[06:31:00] <cedb> but noo lets just agree endlessly
[06:31:03] <cedb> and what do you get
[06:31:05] <vms14> Zipheir: yes, but users will at least expect sockets
[06:31:09] <cedb> you clojure
[06:31:13] <vms14> and a socket should be a scheme port
[06:31:14] <Zipheir> cedb: Have you contributed to the standardization process?
[06:31:52] <vms14> and many users will ask for different features
[06:32:02] <Zipheir> vms14: We'd all appreciate a portable sockets library, if you have an idea for one.
[06:32:05] <cedb> Zipheir: yes 
[06:32:11] <vms14> but they don't want to have in their scheme the features of other random guys
[06:32:17] <cedb> as a 12 year old prodigy
[06:32:31] <vms14> Zipheir: not a portable library, but a api
[06:32:51] *** Joins: skapata (~Skapata@user/skapata)
[06:33:18] <vms14> but that won't solve the problem
[06:33:38] <vms14> and this problem I think cannot be resolved unless adding the features of everyone
[06:33:59] <vms14> in cl at least we are happy the standard won't change
[06:34:10] <Zipheir> We semi-frequently get people explaining how to "fix Scheme" in this channel, but they tend to disappear; OTOH, the actual number of people regularly discussing and working on the standards and SRFIs is pretty small.
[06:34:35] <vms14> you cannot fix this I think
[06:34:58] <vms14> it's a problem you have to learn to live with
[06:35:12] <vms14> and maybe akku is trying to learn to live with that problem
[06:35:44] <Zipheir> The problem of language standards not covering everything that say, Java provides?
[06:35:45] <vms14> as long as the standard wants to be small, implementations will differ
[06:36:31] <Zipheir> Sure.  Whether that's a problem depends on what you want.
[06:37:08] <Zipheir> In practice, a lot of Scheme libraries are portable or easy enough to port.
[06:37:11] <vms14> but for example, some schemers want make gui applications, others don't
[06:37:35] <vms14> the ones who want will look for an implementation that provides it
[06:37:51] <vms14> and I mean gui like I mean X feature
[06:38:30] <vms14> the standard should be made by knowing what most users want
[06:39:23] <vms14> but still, lisp will never stop growing and "spawning"
[06:39:37] <vms14> even nonlispers create lisp dialects
[06:40:37] <vms14> if scheme standard grows like the cl one, it's likely a new lisp family would appear
[06:41:19] <Zipheir> A standard is supposed to provide some guaranteed consistency between implementations.  Standardizing everything everyone wants isn't necessary, I think, because there may not be more than one implementation with a given feature.
[06:42:18] <vms14> yes, but gui specifically will be controversial, could be optional but also in the specification
[06:42:54] <vms14> and not everyone says something is as necessary as the other thinks
[06:42:55] <Zipheir> GUIs are barely standardizable, given the current situation with them in Scheme.  There is zero common ground between Scheme GUI libraries.
[06:43:42] <Zipheir> We don't have anything like what I'd call an idiomatic way of dealing with GUIs, either.
[06:44:45] <Zipheir> In any case: Scheme isn't its standards, they're just there to provide some cohesion.
[06:44:50] <vms14> but, the thing you want to solve is to stop having incompatible scheme implementations?
[06:45:54] <vms14> you have to know what is a requirement and what isn't
[06:45:57] <Zipheir> Isn't that what you're calling "the problem"?
[06:47:10] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[06:47:33] <Zipheir> There's a wide range between 0% and 100% compatibility.  I'd like to see more compatibility between Schemes, but I don't think 100% is attainable or desirable.
[06:47:37] <vms14> the goal is to let you work the same in one implementation as in another and to have portabillity in code in a way that most of your programs will work unchanged unless using experimental features
[06:47:51] <Zipheir> Why?
[06:48:15] <vms14> then the standard has to cover whatever you could do in the language 
[06:48:40] <Zipheir> Again, why would you want it to?
[06:48:53] <vms14> what's  the purpose then?
[06:49:09] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[06:49:43] <Zipheir> Are you suggesting that a standard that doesn't cover everything isn't a good standard?
[06:51:51] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[06:51:55] <Zipheir> We really do have a good deal of compatibility between Scheme implementations, especially those that follow R6 or R7.
[06:52:57] <vms14> isn't scheme the "language" with more existing implementations?
[06:53:17] <Zipheir> Well, anyway, trying to standardize "whatever you could do in the language" sounds like an impossible straitjacket, maybe a good way to ensure no-one implements the language.
[06:54:00] <Zipheir> The map is not the territory!
[06:54:08] <vms14> yes, but "common things" like sockets and access to a database would be nice to be compatible
[06:54:39] <Zipheir> Sure, and people have tackled those in SRFIs.
[06:54:40] <vms14> and being scheme a language with so much implementations it's a problem compared with other languages
[06:55:41] <Zipheir> Have you investigated the SRFIs?
[06:56:16] <vms14> they're like the requests for comments 
[06:56:41] <Zipheir> There are quite a few of them, and they're mostly portable.
[06:57:04] <vms14> https://srfi.schemers.org/
[06:57:11] <Zipheir> Yes.
[06:57:36] <vms14> async is nice stuff to have in a language
[06:57:43] <vms14> much more than threads
[06:57:56] <vms14> I want some async stuff in s7 scheme 
[06:58:19] <vms14> idk if look at libuv, didn't found something more interesting
[06:59:11] <Zipheir> vms14: If you're concerned about improving compatibility between Schemes, please contribute!  It's the best way to forward that goal.  As I said, there aren't a ton of people working on Scheme.
[06:59:49] <Zipheir> Commenting on SRFIs is a very easy way to start.
[07:01:12] *** Joins: badkins (~badkins@136.56.92.199)
[07:03:11] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[07:04:34] <s-liao> yes
[07:05:31] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:07:29] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Remote host closed the connection)
[07:07:49] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca)
[07:08:57] *** Quits: silasfox (~sbv@p200300cec71e05007be390e80903282d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:10:05] <vms14> Zipheir: I was never interested in scheme
[07:10:20] <vms14> the only reason I have interes in scheme is s7 scheme
[07:10:32] <vms14> but
[07:10:52] <vms14> I want to add stuff to that scheme and make it do whatever I want
[07:11:11] *** Joins: silasfox (~sbv@p200300cec716ff000407243ba0ab9142.dip0.t-ipconnect.de)
[07:11:33] <vms14> so if there is a "standardized" way to provide some feature that I'm going to add, maybe I could follow some rules
[07:12:11] <sonny> it's called a macro
[07:13:01] <vms14> Zipheir: I think commenting srfis with the intention to get started to "help" will result in making unnecessary requests and making them loose more time xD
[07:14:02] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:15:06] <vms14> btw no one used this scheme?
[07:15:24] <vms14> I would like to find someone to ask stuff
[07:15:46] <Zipheir> You can ask questions here, since I don't think there's an s7 channel.
[07:15:59] <Zipheir> A few people here use s7, especially for music with Snd.
[07:16:14] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:16:23] <vms14> but they're about internal s7 stuff, and about overall design
[07:16:33] <vms14> I need to provide namespaces
[07:16:52] <vms14> s7 has environments as first class objects, so you can pass them, save them, etc
[07:17:00] <Zipheir> s-liao: Thanks again for https://apfelmus.nfshost.com/articles/monoid-fingertree.html
[07:17:27] <vms14> I think I should use them to implement namespaces, but Idk how to implement in-package
[07:17:56] <vms14> yet I can create with-package, but I want to change the current environment 
[07:18:30] <s-liao> You might come to the feature you have interesting on SRFIs. There you can see the people working on that feature on s7 implementation in Scheme.
[07:20:17] <vms14> I think I'll try to mimic cl
[07:20:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:20:24] <vms14> at least in this case
[07:20:34] <s-liao> They might work on the multiple implementations, and one s7 implementation is a product level stuff. There is a just owner of the product, it isn; t easy to find out them.
[07:20:37] <vms14> you can import symbols, shadow them, etc
[07:22:01] <vms14> It's hard for me to see how () is #t and how (car ()) and (cdr ()) die  
[07:22:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:22:22] <vms14> you should change that in the standard
[07:22:23] <vms14> xd
[07:22:36] <s-liao> Zipheir you still try to work on fingertree?
[07:23:33] <s-liao> They might work on the multiple implementations, and one s7 implementation is a product level stuff. There is a just owner of the product, it isn' t easy to find out him.
[07:23:41] <Zipheir> s-liao: Yes.  I'll have an egg for CHICKEN ready soon, I hope.
[07:23:54] <Zipheir> I just need to figure out the best way to represent them in Scheme.
[07:24:06] <s-liao> Okay.
[07:24:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:24:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:24:56] <vms14> btw what's the thing you like the most of scheme?
[07:25:02] <vms14> or... why scheme?
[07:25:03] <Zipheir> vms14: How are those related?  car is undefined on empty lists.
[07:25:41] <vms14> Zipheir: car and cdr return nil when (car ()) and () is nil which is #f in scheme
[07:26:04] <vms14> so when you recurse just need to see (if (car something))
[07:26:06] <Zipheir> They return nil in CL.
[07:26:30] <vms14> but they crash in scheme
[07:26:38] <vms14> the reason?
[07:27:05] <vms14> and nil being () was nice
[07:27:14] <Zipheir> It's been an error since R2RS(?).
[07:27:58] <Zipheir> car and cdr simply aren't total functions in Scheme.
[07:28:40] <vms14> aren't a closure from cons?
[07:28:53] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[07:28:57] <vms14> well idk what the standard says
[07:29:09] <vms14> but still, it's sad
[07:29:13] <Zipheir> Nor in most functional languages.  Unfortunately, we don't have a type system that can describe non-empty lists.
[07:29:28] <Zipheir> A closure?
[07:29:45] <Zipheir> You can read the standards, you know :)
[07:29:53] <vms14> car and cdr could be inefficiently implemented as a closure
[07:30:17] <Zipheir> I don't understand, sorry.
[07:30:21] <vms14> nvm
[07:31:12] <s-liao> this guy works on s7 implementation https://github.com/iainctduncan.
[07:31:54] <Zipheir> "why scheme?"  There's a lot of diversity among schemers and scheme implementations.  Lots of different opinions and ideas about programming.
[07:32:29] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-79.dsl.bell.ca) (Ping timeout: 256 seconds)
[07:33:39] <Zipheir> People are open to debate and don't adhere to any dogmas, for the most part.  There are functional, OO, imperative, and relational programmers here, and all of that can be expressed in Scheme.
[07:35:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:38:42] <Zipheir> I also think the language is good, of course.  Only SML competes as a minimal core for functional programming, IMHO.
[07:38:52] <vms14> Zipheir: https://termbin.com/onut car and cdr bad implemented
[07:39:41] <vms14> s-liao: tnx for the link
[07:40:14] <Zipheir> vms14: Got it.  That's familiar from SICP exercises.
[07:40:28] <vms14> I saw "scheme for max"
[07:40:55] <vms14> Zipheir: actually it's from the sicp videos but I don't remember how he implemented exactly
[07:41:30] <vms14> I remember him saying closure was his favourite word, and how he enjoyed while showing this stuff
[07:41:50] <vms14> I like closures a lot, I would like to know much better when to use them
[07:41:59] <vms14> I have to get more used to fp
[07:42:24] <Zipheir> SICP uses them extensively as objects with local state.
[07:42:33] <vms14> I think scheme and cl are the one of the best ways to get used to fp since they encourage it but also don't force it
[07:43:05] <vms14> Zipheir: I have to finish it, only started a few pages
[07:43:32] <vms14> and cl for oop is nice
[07:43:32] <Zipheir> Perhaps.  There are a lot of techniques you can miss if you reach for set! when things get tricky.
[07:43:43] <ski> implementing pairs as closures (Church/Scott encoding) would simply pass the two components to the continuation (callback). implementing cons cells (as one of two ways to build lists) as closures (Scott encoding) would pass the components to one of the two continuations (the other being used by the encoding for the empty list)
[07:43:50] <vms14> Zipheir: there is no symbol properties in scheme?
[07:44:09] <vms14> it's just a list associated with every symbol
[07:44:10] <Zipheir> Oh, duh, it's Church-Scott encoding.
[07:44:15] <Zipheir> vms14: No.
[07:44:29] <Zipheir> vms14: Although that's on the R7RS-large ballot atm.
[07:44:47] <vms14> they can serve as simple oop
[07:44:51] <ski> i prefer `car' and `cdr' not working on empty lists, and not hiding mistakes by having a well-defined normal result
[07:45:06] <Zipheir> Or not.  I'm not sure why I thought plists were...
[07:45:28] <vms14> ski: car and cdr are usually in recursion and it's nice to get nil when you find the end
[07:45:45] <ski> yes. but it's not nice to get it when you go past the end
[07:45:57] <Zipheir> vms14: https://srfi.schemers.org/srfi-213/srfi-213.html
[07:46:04] <ski> ("Don't do that")
[07:46:30] <vms14> the difference lies in cl nil and () are the same thing
[07:46:31] <Zipheir> It's like dividing by zero.
[07:47:08] <Zipheir> That's mainly a convenience.  You can replace lots of (if ...) expressions with (and ...) or (or ...).
[07:47:12] <vms14> in scheme () is #t
[07:47:23] <Zipheir> Yes.  Only #f is false.
[07:47:40] <ski> (re "closure", it's good to recognize that it's an implementation term, for a particular method of implementing function/procedure values ("closing over an environment containing referenced non-local entities"))
[07:48:00] <vms14> I have to get used to those minor things
[07:48:02] <Zipheir> ski: It's an unfortunate term...
[07:48:09] <vms14> at least I have format :D
[07:48:21] <ski> Zipheir : heh, Church and Scott are actually different .. they just coincide for non-recursive data types :)
[07:48:54] <Zipheir> vms14: This is a more functional approach to formatting that was added to the last R7RS-large edition https://srfi.schemers.org/srfi-166/srfi-166.html
[07:48:59] <vms14> I truly recommend s7 scheme, but idk if is as good as I think
[07:49:33] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[07:49:47] <vms14> for me it seems a well done implementation and the fact it's two c files and the ffi is easy gives it much more power
[07:49:50] <Zipheir> ski: Right, I'm remembering now.  It's been a little bit.
[07:50:14] <Zipheir> Church SLASH Scott.
[07:50:21] <vms14> Zipheir: I saw that srfi
[07:50:45] <vms14> I've looked for format equivalent in scheme and found that 
[07:51:17] <vms14> but s7 scheme has it, idk how much is implemented, but iterates on lists
[07:51:19] <Zipheir> The advantage of combinator formatting is that you can write your own.  Format/printf magic strings are set in stone.
[07:51:41] <ski> `zero' is `(lambda (z s) (z))', and `succ' in Scott is `(lambda (n) (lambda (z s) (s n)))', while in Church it is `(lambda (n) (lambda (z s) (s (n z s))))'
[07:51:51] <Zipheir> "write your own" = "extend the system with new combinators"
[07:51:55] <vms14> Zipheir: in cl format is able to receive functions and there are some obscure tricks too
[07:52:57] <Zipheir> ski: Thanks, that's clear now.
[07:53:17] <Zipheir> CL format does a ton.
[07:53:58] <vms14> https://iainctduncan.github.io/scheme-for-max-docs/s7.html#about-s7-and-s74-scheme s-liao 
[07:54:22] <ski> (deconstructing a Church is a fold/cata, while deconstructing a Scott is merely a case/match/switch)
[07:55:35] <ski> (vms14 : fwiw `nil' being equal or not to the empty list was orthogonal to what i mentioned)
[07:55:44] <Zipheir> Interesting that WP says Scott-encoded data is "not obviously typable" in System F.
[07:56:14] <ski> i'd guess you'd need equ-recursion or so ?
[07:57:12] * ski idly wonders if there's a Scheme with <https://en.wikipedia.org/wiki/Region-based_memory_management>
[07:59:53] <vms14> idk if I break something by (define nil #f)
[08:00:31] <vms14> but I cannot (define () #f) so meh
[08:00:58] <Zipheir> Trying to (cons 1 nil) will give you some unexpected results.
[08:01:39] <Zipheir> It's really not a big deal.  'Nil = #f' is a historical performance hack, IMO.
[08:01:59] <Zipheir> There's absolutely every reason for booleans and pairs to be disjoint.
[08:02:10] * ski . o O ( Guilemacs )
[08:02:59] <vms14> yes, I just have to get used and stop crying
[08:03:29] <vms14> really I have what I need from cl in this scheme
[08:03:46] <vms14> which is dirty macros and format
[08:04:04] <vms14> in scheme exist ` , and ,@
[08:04:07] <vms14> ?
[08:04:12] <Zipheir> Yes.
[08:04:27] <Zipheir> I'd suggest running away from dirty macros quickly.
[08:04:47] <vms14> in this scheme ,@list is also (apply values list) so you can use it in a function
[08:06:55] <vms14> I had a problem when 
[08:06:55] <vms14> (define (something . lst) 
[08:06:55] <vms14>  (use lst)) 
[08:06:55] <vms14> (define (some-more . ls)
[08:06:59] <vms14>  (something ls)) 
[08:07:36] <vms14> had to make a macro to flatten this, in this scheme I can (something (apply values ls))
[08:09:30] <vms14> (define (something . lst) this is standard in scheme not? lst would be a rest argument
[08:09:31] <ski> if `something' is a procedure, then that sounds possibly bad
[08:09:44] <ski> yes, that's standard
[08:10:44] <vms14> there is also (define* (stuff some args (default "value"))) which makes all arguments optional and let's you put rest arguments
[08:11:10] <ski> rudybot_: eval (+ 1 (values 2 3))
[08:11:10] <rudybot_> ski: error: result arity mismatch; <NEWLINE>  expected number of values not received <NEWLINE>   expected: 1 <NEWLINE>   received: 2 <NEWLINE>   values...: <NEWLINE>    2 <NEWLINE>    3
[08:11:20] <ski> rudybot_: eval (+ 1 (apply values '(2 3)))
[08:11:20] <rudybot_> ski: error: result arity mismatch; <NEWLINE>  expected number of values not received <NEWLINE>   expected: 1 <NEWLINE>   received: 2 <NEWLINE>   values...: <NEWLINE>    2 <NEWLINE>    3
[08:12:53] <vms14> rudybot_: eval (+ 1 (values '(2 3)))
[08:13:08] <vms14> oh he ignores me
[08:13:20] <ski> rude
[08:14:14] <rudybot_> vms14: error: with-limit: out of time
[08:14:34] <ski> rudybot_: slap rudybot_
[08:14:35] <rudybot_> ski: ,slap rudybot
[08:14:46] <ski> hm
[08:14:49] <ski> (try again ?)
[08:17:09] <vms14> rudybot_: eval (+ 1 (values 2))
[08:17:10] <rudybot_> vms14: your sandbox is ready
[08:17:17] <rudybot_> vms14: ; Value: 3
[08:17:17] <vms14> fck u bot
[08:17:20] <vms14> oh
[08:17:47] <vms14> why is named values if only can handle one xD
[08:17:50] <ski> rudybot_: eval (+ 1 (values '(2 3)))
[08:17:50] <rudybot_> ski: error: +: contract violation <NEWLINE>   expected: number? <NEWLINE>   given: '(2 3) <NEWLINE>   argument position: 2nd <NEWLINE>   other arguments...: <NEWLINE>    1
[08:19:18] <vms14> rudybot_: eval *features*
[08:19:19] <rudybot_> vms14: error: *features*: undefined; <NEWLINE>  cannot reference an identifier before its definition <NEWLINE>   in module: 'program
[08:20:26] <ski> rudybot_: (let () (define (foo b) (if b (values 2 3 (foo (not b))) (values 5))) (foo #t))
[08:20:27] <rudybot_> ski: ; Value: 2
[08:20:28] <rudybot_> ski: ; Value#2: 3
[08:20:29] <rudybot_> ski: ; Value#3: 5
[08:21:44] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[08:22:21] <ski> operand (and operator) expressions, in a (procedure) combination, are contexts that only support one value (what should happen to the other values ? what if there's no value ?). other contexts may well support multiple values
[08:24:25] <ski> (specifically, a tail context supports as many values as the surrounding context wrt which it's a tail context. interactive top-level contexts support arbitrary many values. `call-with-values' will call its first (callback) operand in a context that supports as many values as its second (callback) operand accepts arguments)
[08:29:40] <ski> rudybot_: if they could tell us what they values, and what the associated costs are, that would fill the measure of our ideal spaces
[08:30:17] <rudybot_> ski: You can measure the production costs in hours of labor too.
[08:32:26] <vms14> :0
[08:41:53] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[08:43:17] *** Joins: masoudd (~masoudd@user/masoudd)
[09:09:16] *** Joins: badkins (~badkins@136.56.92.199)
[09:13:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:19:18] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:20:01] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[09:23:02] <ns12> Will "Lisp in Small Pieces" teach me how to implement R7RS-small?
[09:29:10] * ski waits for the punchline
[09:35:23] <ns12> ski: That is a serious question ...
[09:39:45] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:44:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:46:24] <ski> oh ..
[09:46:58] <ski> .. well, considering how LiSP was a thing before R7RS became one
[09:58:41] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:03:33] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Remote host closed the connection)
[10:05:03] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[10:13:03] <sham1> I mean, it will teach you how to implement it in an abstract sense because LiSP shows how a general implementation might work and it could then be adapted
[10:15:11] <ns12> sham1: Does that include continuations and hygienic macros?
[10:16:02] <sham1> Well, does LiSP implement a Scheme because if so, it might cover that stuff, but I doubt it
[10:17:10] <ns12> It seems to be mostly about Scheme.
[10:19:47] <ns12> Probably R4RS Scheme.
[10:47:13] <sjamaan> ns12: It has a chapter on macros and touches on how to solve some hygiene issues in a crude way, but it was written before the hygienic macro system got standardized
[10:47:46] <sjamaan> It's a decent starting point I suppose
[10:48:03] <ns12> sjamaan: Thank you. Are there other books I should look into?
[10:48:15] <sjamaan> It deals with continuations extensively IIRC
[10:48:42] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[10:49:43] <sjamaan> Perhaps you'll find Essentials of Programming Languages useful, it also deals with CPS and even module systems
[10:51:13] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[10:51:37] *** Quits: silasfox (~sbv@p200300cec716ff000407243ba0ab9142.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:52:55] <ns12> If I read EOPL, will I find it easier to implement R7RS-small?
[10:53:18] <sjamaan> Well, the bit about the module system would be useful
[10:54:47] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:03:21] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:16:08] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:24:57] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[11:30:04] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[11:32:23] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[11:48:09] *** Joins: badkins (~badkins@136.56.92.199)
[11:52:49] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[12:02:56] *** Joins: silasfox (~sbv@p200300cec716ff006df6290aad30a17e.dip0.t-ipconnect.de)
[12:16:20] *** Joins: notzmv (~zmv@user/notzmv)
[12:17:45] *** Joins: rgherdt (~rgherdt@2a01:598:b1a8:d525:9dce:8c3f:e9e8:7c57)
[12:33:47] *** Joins: civodul (~user@guix/contributor/civodul)
[12:39:49] *** Joins: karlosz (~karlosz@47.151.136.69)
[12:40:32] <dpk> i think i've found my least favourite code https://github.com/ashinn/chibi-scheme/blob/master/lib/init-7.scm#L979
[12:40:41] <dpk> a conditional where the test is another conditional
[12:48:02] <sham1> Thanks, I hate it
[12:48:55] <ski> you could distribute .. but it'd duplicate code
[12:49:27] <ski> or, i suppose, factor the outer one into a procedure, and then only duplicate the call to that
[12:50:25] *** Joins: Avichi (~Avichi@a82-161-111-126.adsl.xs4all.nl)
[12:51:29] <ski> i suppose one could use `(or (and ellipsis-specified? (memq ellipsis lits)) (and (not ellipsis-specified?) (any (lambda (x) ..x..) lits)))' .. but then one's duplicating the `ellipsis-specified?' (testing it twice)
[12:52:09] <sham1> Or you know, use a let for those nested conditionals. Testing for ellipsis-specified? shouldn't be that bad even if done twice since it's just a variable
[12:52:15] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1a4:c074:f800:a521:bda7:311d)
[12:52:52] <ski> i'm pretty fond of DRY
[12:53:21] <ski> (but yea, if you just don't like the lexical nesting, you could use `let' to break it out .. although you'd need to come up with a name)
[12:53:53] <dpk> i think i vaguely understand what the conditional is doing and i'm trying to work out if i can infer ellipsis-specified? by any other means than passing it explicitly in my abstracted version https://github.com/dpk/chibi-scheme/blob/core-identifier-syntax/lib/init-7.scm#L854
[12:54:21] <dpk> because seven positional arguments is a bit icky
[12:54:22] * ski occasionally uses `((if (...) blah (lambda (x) ..x..)) ...)'
[12:54:37] *** Quits: rgherdt (~rgherdt@2a01:598:b1a8:d525:9dce:8c3f:e9e8:7c57) (Ping timeout: 240 seconds)
[12:54:45] <ski> (or putting a `let' as an operand (or perhaps operator), in a procedure combination)
[12:55:25] <dpk> i think the answer is 'no' unless i make it an implicit part of the ellipsis variable itself (by making it either #f or the ellipsis identifier), which is another kind of ick
[12:55:46] <dpk> but potentially does make the actual invocation of syntax-template-transformer easier to read, especially in identifier-syntax
[13:01:38] * ski . o O ( "Seven trees in one" by Andreas Blass in 1995 at <https://www.math.lsa.umich.edu/~ablass/cat.html> ; "This Week's Finds in Mathematical Physics" (Week 202) by John Baez in 2004-02-21 at <https://math.ucr.edu/home/baez/week202.html> ; "Searching for a Video Proof of “Seven Trees in One”" by John Baez in 2009-07-16 at 
[13:01:43] * ski <https://golem.ph.utexas.edu/category/2009/07/searching_for_a_video_proof_of.html> )
[13:15:33] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[13:16:10] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[13:17:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:24:16] *** Joins: rgherdt__ (~rgherdt@2a01:598:d030:d81d:7dde:ea9e:87d7:a11d)
[13:26:59] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1a4:c074:f800:a521:bda7:311d) (Ping timeout: 250 seconds)
[13:39:07] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Quit: Leaving)
[13:47:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:48:25] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[13:50:38] *** Joins: amk (~amk@109.255.169.126)
[13:54:17] *** Quits: silasfox (~sbv@p200300cec716ff006df6290aad30a17e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[13:55:29] *** Joins: silasfox (~sbv@p200300cec716ff000407243ba0ab9142.dip0.t-ipconnect.de)
[14:08:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:09:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:14:15] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03c:a915:118d:8521:5e19:8ac1)
[14:16:49] *** Quits: rgherdt__ (~rgherdt@2a01:598:d030:d81d:7dde:ea9e:87d7:a11d) (Ping timeout: 250 seconds)
[14:18:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[14:28:24] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[14:44:59] *** Quits: silasfox (~sbv@p200300cec716ff000407243ba0ab9142.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[14:47:57] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:04:12] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[15:04:50] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:17:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:34:38] *** Joins: schulze (~schulze@dynamic-095-116-206-242.95.116.pool.telefonica.de)
[15:48:39] *** Joins: patrice (~patrice@user/patrice)
[15:49:27] *** Joins: seninha (~seninha@user/seninha)
[15:49:59] *** Joins: badkins (~badkins@136.56.92.199)
[15:54:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:06:43] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:07:56] *** Quits: rickbutton (sid410078@id-410078.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[16:08:05] *** Joins: rickbutton (sid410078@id-410078.helmsley.irccloud.com)
[16:37:37] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[16:41:09] *** Joins: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu)
[16:42:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:54:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[16:55:41] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[16:57:41] *** Quits: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[17:07:08] *** Joins: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu)
[17:07:17] *** Joins: rgherdt__ (~rgherdt@2a01:598:d037:b50e:1650:fb3c:bebc:de1b)
[17:09:44] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03c:a915:118d:8521:5e19:8ac1) (Ping timeout: 250 seconds)
[17:11:54] *** Joins: silasfox (~sbv@p200300cec716ff000407243ba0ab9142.dip0.t-ipconnect.de)
[17:18:50] *** Quits: rgherdt__ (~rgherdt@2a01:598:d037:b50e:1650:fb3c:bebc:de1b) (Ping timeout: 250 seconds)
[17:29:31] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[17:33:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:35:30] <dpk> update on my Chibi AOT compiler idea: i have gone from realizing that compiling the bytecode is unworkable and thinking i'll have to compile the AST, to realizing that compiling the AST is unworkable and i'll have to construct my own AST
[17:35:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:37:27] *** Quits: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[17:38:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1c35:8f5c:4397:2de5) (Ping timeout: 240 seconds)
[17:41:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c)
[17:41:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c) (Changing host)
[17:41:06] *** Joins: skapata (~Skapata@user/skapata)
[17:42:06] <sham1> At this point it might be easier to not claim to be Chibi anymore
[17:45:12] *** Joins: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu)
[17:47:52] <dpk> well, maybe
[17:49:21] <dpk> there are two problems with Chibi's AST: define-syntax disappears completely, but i need to be able to see the define-syntax to maybe compile the macro transformer (haven't decided yet if this is worth doing at all) and to export it from the native-compiled version of the .sld (which is an absolute must)
[17:49:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[17:50:01] <dpk> and Chibi analyses define in a two-step operation: the macro expander inserts a fresh binding into the relevant environment, and then it omits a set! into the actual code
[17:50:23] <dpk> i need to be able to see that that set! was originally a define so i can emit the C code to insert the fresh binding rather than try to mutate an existing one
[17:51:53] <dpk> apart from that, the Chibi AST is perfect for what i need. so, either i modify the Chibi macro expander to return at least *something* useful from a define-syntax and indicate when a set! is actually a define, or i write my own version of the macro expander
[17:54:43] <Franciman> dpk: do you know about futamura projections?
[17:55:38] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[17:55:55] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[17:57:20] <dpk> not yet, but i’m sure Google can help me with that
[17:58:42] <dpk> ah, this is the trick PyPy uses?
[17:58:52] <Franciman> they are related to transforming intepreters into compilers etc
[17:59:03] <Franciman> but i don't know much about what it really means technically, but i am amused
[17:59:10] <ski> you want to compile to (some kind of high-level ?) C ?
[18:00:41] <ski> Futamura projections are related to partial evaluators
[18:01:10] * ski . o O ( "Is There a Fourth Futamura Projection?" by Robert Glück in 2009 at <https://www.gwern.net/docs/cs/2009-gluck.pdf> )
[18:01:37] * ski . o O ( "A Taxonomy of meta-programming systems" by Tim Sheard at <https://web.cecs.pdx.edu/~sheard/staged.html> )
[18:02:17] <Franciman> ski: an interpreter who is partially applied to a specific program 
[18:02:29] <Franciman> becomes a compiled programe :)
[18:03:28] <ski> yes. partially evaluating an interpreter (for a language) wrt a program (in that language) amounts to compiling the program
[18:03:59] <ski> partially evaluating a partial evaluator wrt an interpreter produces a compiler
[18:04:21] <ski> partially evaluating a partial evaluator wrt a partial evaluator produces a (hopefully) more efficient partial evaluator
[18:04:33] <ski> (those are the three Futamura projections)
[18:04:44] <Franciman> what's the fourth?
[18:05:10] <ski> iirc, if you iterate more, you get into a fixpoint, or so
[18:07:38] <ski> (oh, forgot to say that another name for a partial evaluator is "compiler generator")
[18:08:41] <ski> (that term is because of hysterical raisins, sortof how parser generators have been called "compiler compilers")
[18:13:28] <Franciman> ahhh
[18:13:31] <Franciman> interesting
[18:15:48] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:16:53] <dpk> ski: my idea was to compile Chibi Scheme code into code targetting Chibi’s C API, to be loaded in like Chibi’s C extensions currently are
[18:17:23] <ski> mhm
[18:17:25] <ski> whyfore ?
[18:17:33] <dpk> Scheme go brrr
[18:18:04] * ski has no idea what Chibi's FFI is like, whether it entails a lot of cross-marshalling
[18:18:31] <dpk> however, at this point i think a more productive use of my time would be rewriting the macro expander in Chibi anyway to use Flatt’s sets-of-scopes model, which would be more amenable to AOT compilation of all kinds
[18:18:51] <ski> "AOT" being ?
[18:19:41] <dpk> but Alex was conspicuously silent when Marc suggested rewriting Chibi’s macro expander for better syntax-case support recently in an email thread (private, alas)
[18:20:04] * ski hasn't seen foof around in quite some time
[18:20:28] <dpk> and such a change would relegate Chibi’s synclo and explicit-renaming macros to the level of being hacks for compatibility only, and hacks with quadratic performance at that
[18:20:47] <dpk> AOT = ahead-of-time
[18:20:58] <dpk> as in, not JIT
[18:21:04] <ski> what does that .. ah, ok
[18:22:25] <sham1> AOT and JIT can join together and form a very nice implementation where potentially most if not all of it is written in Scheme itself
[18:22:42] <sham1> Since you could then just AOT compile the runtime stuff and possible JIT things
[18:28:41] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[18:29:16] <vms14> Do you have keywords in scheme?
[18:29:19] *** Joins: badkins (~badkins@136.56.92.199)
[18:29:42] <vms14> for some reason I tend to put :D in the repl when he greets me
[18:30:03] <sham1> Depends on your definition of "having something in Scheme"
[18:30:03] <vms14> and it's nice because it evaluates and returns the result which is :D
[18:30:36] <sham1> Like :D is a valid symbol in R7RS, but it's not a keyword
[18:30:47] <vms14> oh
[18:31:32] <vms14> keywords are nice, but in cl when converted to string they loose the : so it's fine to use them fo string generation
[18:32:28] <vms14> in s7 scheme they don't so you get : with the rest of the symbol in a string, I'll take it as this scheme does not want to loose the smiley when converting it to a string 
[18:32:30] <sham1> Basically the R7RS lexical syntax was defined in a way where one can't really use any conventional keyword syntax from CL or Clojure or such for keywords specifically. There are some ideas about making keywords available and at least I am a proponent of #:D as a syntax, which looks like how in CL they have uninterned symbols, but here they could be used as keywords
[18:33:08] <vms14> for me where useful in cl because a keyword is a separate type of a symbol
[18:33:51] <vms14> so in a typecase you can put cases for keyword symbol and string and it let's you have much flexibility when passing arguments, specially when using them for string generation
[18:33:57] <sham1> Indeed, and that's why one can't just deal with a keyword being a special-looking symbol, instead one wants it to be a disjointed type
[18:34:23] <vms14> in s7 scheme the keyword does not loose the : so I should make a wrapper to remove it
[18:34:33] *** Joins: seninha (~seninha@user/seninha)
[18:34:48] <sham1> Because one idea would be to just treat either the symbol :D or D: like a keyword, but that's a clash of syntax
[18:34:48] <vms14> but I find them useful
[18:34:52] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:35:10] <vms14> and I tend to prefer writing a :keyword than a 'symbol
[18:38:53] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[18:41:21] *** Joins: museee (~museee@user/museee)
[18:41:29] *** Quits: cedb (~ced@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[18:43:11] *** Joins: cedb (~ced@192-222-138-215.qc.cable.ebox.net)
[18:46:52] <dpk> a JIT in Chibi is very unlikely. there was one targetting x86 only at one point, but it got nixed
[18:47:13] <dpk> it was only ever experimental
[18:47:45] <dpk> there’s still bits of scar tissue in places in the Chibi source code where it used to be
[18:48:59] <dpk> the advantage of my AOT approach, i thought, was that it could be implemented with minimal changes to the Chibi core C codebase, as a distinct script like the chibi-ffi tool
[18:49:21] <dpk> indeed, i still think that would be possible
[18:49:56] <dpk> but it would be more complicated than i initially assumed
[18:51:54] *** Joins: seninha (~seninha@user/seninha)
[18:55:30] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:56:59] <amazigh> o)
[19:02:29] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[19:07:37] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[19:08:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:14:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[19:20:49] <vms14> what about oop in scheme?
[19:21:28] <dpk> we have define-record-type, what else do you need? ;-)
[19:22:12] <amazigh> vms14: what abbout it?
[19:23:07] <vms14> I'm writing some code and ended using macros because I see a common path
[19:23:50] <vms14> I want to generate C code so I maintain text buffers which are (open-ouput-string)
[19:24:12] <vms14> One for main, for include files, and another for functions defined outside main
[19:24:38] <sham1> An object can be made to work with a define-record-type where you just take as an argument a dispatch function that can then be called for doing methods and such
[19:24:44] <vms14> https://termbin.com/qmg8
[19:24:59] <sham1> So you get Smalltalk-esque object orientation. But it's very pedestrian
[19:25:18] <vms14> not finished but realized a pattern so I'm trying to make a macro that generates some functions to write on those buffers
[19:26:43] <vms14> in a way that when I put (buffer-generator include) creates a *include* string port and some functions (include to write stuff) and (get-include to read the string)
[19:27:04] <vms14> this could be avoided if we had some sort of oop
[19:27:15] <vms14> so the buffer generator could be a class
[19:28:41] <vms14> also I ask if some schemers have tried to implement something similar
[19:29:05] <vms14> because what I'm doing looks more like a quick and dirty patch 
[19:32:53] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[19:33:08] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[19:38:51] <vms14> btw would you be interested in a scheme that has curses bindings or xlib bindings in a way that you can make a window manager in it?
[19:39:27] <vms14> I want to make a window manager and realized how easy is to write a bad one, and I've played a bit with xlib some time ago so I have some basics
[19:40:09] <vms14> actually echo "your/program/path">.xinitrc and when you startx this will be the "manager"
[19:40:19] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5e88:e8a2:f183:6782)
[19:40:35] <vms14> I've made a paint to draw the root window in that way
[19:40:57] *** Quits: attila_lendvai (~alendvai@catv-213-222-130-233.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[19:46:29] *** Joins: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net)
[19:57:05] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[20:11:51] *** Quits: Avichi (~Avichi@a82-161-111-126.adsl.xs4all.nl) (Quit: Client closed)
[20:13:08] *** Quits: cedb (~ced@192-222-138-215.qc.cable.ebox.net) (Quit: WeeChat 3.4)
[20:15:38] *** Quits: silasfox (~sbv@p200300cec716ff000407243ba0ab9142.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:17:08] *** Joins: silasfox (~sbv@p200300cec716ff000407243ba0ab9142.dip0.t-ipconnect.de)
[20:26:42] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:27:49] *** Joins: badkins (~badkins@136.56.92.199)
[20:31:28] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:31:37] *** Joins: badkins (~badkins@136.56.92.199)
[20:34:48] *** Joins: rgherdt (~rgherdt@2a01:598:b1ac:20e3:d31:1de4:616f:ab73)
[20:37:53] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[20:45:08] *** Quits: klovett (~klovett@c-67-188-101-196.hsd1.ca.comcast.net) (Quit: ZZZzzz…)
[20:47:16] *** Joins: Perryman_ (~perryman@216.97.249.113)
[20:47:26] *** Quits: Perryman (~perryman@216.97.249.113) (Ping timeout: 268 seconds)
[20:48:40] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:51:02] *** Joins: badkins (~badkins@136.56.92.199)
[20:52:53] *** Quits: rgherdt (~rgherdt@2a01:598:b1ac:20e3:d31:1de4:616f:ab73) (Ping timeout: 250 seconds)
[20:55:41] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[20:56:16] <Zipheir> There are already a plethora of window managers.  It's not a very Schemely project as it's usually done, either.
[21:02:35] <sham1> I'd think the most prototypical WM made in any kind of a lisp is StumpWM and it'd be interesting to see something like that with a Scheme instead of CL
[21:04:52] <wasamasa> https://duckduckgo.com/?q=nsfwm&ia=web
[21:04:54] <wasamasa> err
[21:04:56] <wasamasa> https://github.com/mario-goulart/nsfwm
[21:05:59] *** Quits: nalaginrut (~nalaginru@113.118.234.75) (Ping timeout: 256 seconds)
[21:07:56] *** Joins: rgherdt (~rgherdt@tmo-086-81.customers.d1-online.com)
[21:09:03] <Zipheir> StumpWM is sort of like the ultimate LISP WM.
[21:09:42] <Zipheir> OTOH, xmonad shows how difficult writing/customizing a WM in a functional style can be, IMO.
[21:15:45] *** Joins: civodul (~user@guix/contributor/civodul)
[21:17:17] <sham1> I like how nsfwm has a procedure called set-window-sticky?!
[21:17:21] <sham1> It can't believe it
[21:18:44] <bsima> also there is https://github.com/mwitmer/guile-wm
[21:18:47] *** Joins: nalaginrut (~nalaginru@113.118.235.81)
[21:21:43] <dpk> should be window-sticky?-set!
[21:21:59] <dpk> although set-car! and set-cdr! are bad examples
[21:23:21] <Zipheir> Isn't set-FOO? the usual naming pattern?  (e.g. for record mutators)
[21:23:28] <Zipheir> Oops.  set-foo!
[21:23:32] <ski> i believe so
[21:24:31] <sham1> It is. I suppose it's just like that because it's setting a predicate
[21:24:42] *** Joins: badkins (~badkins@136.56.92.199)
[21:24:56] <sham1> Although it would be interesting if it was named set-window-sticky‽
[21:25:04] <sham1> As in, with interrobang
[21:27:34] <dpk> Zipheir: i believe both R6RS and SRFI 99 prefer the convention recordname-fieldname-set! for their auto-generated identifiers, though i can't look it up right now 
[21:29:23] <gwatt> That's correct for r6rs
[21:33:11] <Zipheir> dpk: I didn't know that.  Thanks.
[21:35:46] <drakonis> amazigh: kernel revival when
[21:36:08] <drakonis> alternatively, build a scheme with kernel
[21:40:58] <amazigh> ahah
[21:41:15] <amazigh> I was thinking about kernel.
[21:42:54] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:44:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:45:29] *** Joins: badkins (~badkins@136.56.92.199)
[21:45:44] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:45:54] *** Joins: badkins (~badkins@136.56.92.199)
[21:50:56] *** Joins: seninha (~seninha@user/seninha)
[21:52:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:05:33] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:07:03] *** Quits: rgherdt (~rgherdt@tmo-086-81.customers.d1-online.com) (Remote host closed the connection)
[22:07:15] *** Joins: rgherdt (~rgherdt@2a01:598:d039:b0be:6323:9b7e:a6f0:c9f6)
[22:09:39] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[22:10:04] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[22:10:22] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64)
[22:10:22] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64) (Changing host)
[22:10:22] *** Joins: skapata (~Skapata@user/skapata)
[22:11:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:16:21] *** Joins: seninha (~seninha@user/seninha)
[22:17:51] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 256 seconds)
[22:19:30] *** Joins: Darkcoal (~user@user/Darkcoal)
[22:26:55] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[22:32:28] <jcowan> We will just have to accept the fact that different R7RS-large schemes will have either quadratic explicit-renaming or quadratic syntax-case.  Personally, this doesn't bother me, as I don't believe in writing hairy macros anyway.  (E.g. in Chicken, which is er, I don't even bother to compile the macros.
[22:32:41] *** Quits: silasfox (~sbv@p200300cec716ff000407243ba0ab9142.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[22:32:57] *** Joins: silasfox (~sbv@p4fe8dcc5.dip0.t-ipconnect.de)
[22:33:09] <jcowan> (or, indeed, both are quadratic)
[22:35:45] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[22:36:16] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:54:31] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:03:04] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[23:04:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:04:52] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:08:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:09:44] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:10:14] *** Joins: badkins (~badkins@136.56.92.199)
[23:11:16] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:11:26] *** Joins: badkins_ (~badkins@136.56.92.199)
[23:11:54] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[23:12:47] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[23:18:30] *** Joins: seninha (~seninha@user/seninha)
[23:21:35] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[23:22:16] <Zipheir> For anyone who is familiar with finger-tree sequence representation à la Hinze & Paterson 2006, how would you represent them in Scheme?  In particular, do you wrap the elements, or treat everything that isn't an internal structure as an element, or ... ?
[23:22:28] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Read error: Connection reset by peer)
[23:24:37] <Franciman> Zipheir: i was trying to implement them, but i failed
[23:24:59] <Franciman> i tried creating a record type 
[23:25:03] <Franciman> for each type of element
[23:25:05] <Franciman> and then composing them
[23:26:38] <Zipheir> Interesting.
[23:27:43] <Zipheir> The issue is that the trunk of a finger-tree is a finger-tree of nodes; for indexing purposes, the length of an "element" is always one, but the length of a node is at least 2.  So there has to be some way of distinguishing them.
[23:28:02] <sham1> Just use a vector ;)
[23:28:03] <Zipheir> The Haskell trick is to use a newtype Elem for wrapping elements, since that has no runtime overhead.
[23:28:21] <Zipheir> Of course, the elements may be vectors.
[23:28:37] <dpk> a tagged vector, then
[23:28:37] <Zipheir> You can't confuse external and internal structures, IOW.
[23:29:04] <dpk> a vector v such that (vector-ref v 0) is eq? to a value only the finger-tree implementation knows about
[23:29:16] <Zipheir> A record, in other words.
[23:29:22] <dpk> like what we used to do for record types in the bad old days
[23:29:23] <sham1> Yeah
[23:29:36] <Zipheir> So every "external element" is wrapped, then?
[23:29:50] <Zipheir> Or every internal structure, and the rest are considered elements?
[23:29:54] <Franciman> Zipheir: what's your understanding of finger trees?
[23:30:36] <Zipheir> Franciman: I'm not sure how to answer.  I think they're pretty cool?
[23:31:29] <Zipheir> Wrapping every element (without some newtype hack) seems like too much overhead.  I'd say tag the internal structures.
[23:31:58] <Franciman> Zipheir: lol yes, so do I, but i struggle understanding how they work
[23:32:07] *** Quits: museee (~museee@user/museee) (Remote host closed the connection)
[23:32:27] <Zipheir> Franciman: Have you read Claessen's paper from 2020?  He explains them very nicely.
[23:32:32] *** Joins: museee (~museee@user/museee)
[23:34:00] <Franciman> I haven't. do you have a link?
[23:34:49] <Zipheir> https://dl.acm.org/doi/10.1145/3406088.3409026  Unfortunately it's not available on the open internet, but the usual sources work :)  He did a video explanation, too https://www.youtube.com/watch?v=ip92VMpf_-A
[23:35:17] <Zipheir> The paper begins by saying that Hinze & Paterson made finger trees seem very arcane.
[23:36:28] <Franciman> thanks Zipheir sensei
[23:37:19] <sham1> Meanwhile I've been thinking about some OOP semantics and ergonomics
[23:37:26] <Zipheir> yw.  I have to thank siraben for showing me those links in the first place.
[23:38:23] <Franciman> thanks to siraben too ^^
[23:40:07] <sham1> In particular, if one was to do the kind of "have single procedure dispatch" which is used like the following, (dispatch obj 'method), would the arguments of 'method be put into the call, making the signature (obj method . args) or if that would return a lambda wherein you'd call it ((dispatch obj 'method) args)
[23:40:30] <sham1> And if one should be able to do the CLOS thing of defining methods for types "outside" of the type
[23:41:11] <sham1> I.e. if one should be able to do (define-method (method (obj type)) …) or not
[23:41:25] <Franciman> Zipheir: are you trying to implement the version in this paper?
[23:41:41] <Zipheir> Franciman: Yes, that's the model I'm using.
[23:41:56] <Franciman> nice
[23:42:20] <Zipheir> But Claessen doesn't cover the measurement stuff, which is where the tricky representation issue comes in.
[23:42:57] <Zipheir> (He doesn't have to, since it works the same as in the original paper.)
[23:43:07] <ski> sham1 : hm. what about being able to swap out a method in an object ?
[23:43:29] <sham1> That is also something to think about, yes
[23:43:41] <Zipheir> Implemented right, though, these sequences should be a strict upgrade to lists for most things.
[23:43:59] <ski> (perhaps it'd be easier to just have the dispatch give a lambda, in case you'd like to be able to swap out)
[23:47:10] <Franciman> a fully agree Zipheir 
[23:50:11] <Zipheir> sham1: Where do the arguments of <method> come from?
[23:50:25] <Zipheir> I don't know the context, so forgive the dumb question.
[23:51:05] <sham1> Well the arguments are… well, arguments for the method
[23:51:48] <Zipheir> Oh, so it's just the difference between (dispatch obj 'method a1 a2 ...) and ((dispatch obj 'method) a1 a2 ...) ?
[23:51:54] <sham1> Yeah
[23:52:04] <sham1> I'm mainly thinking about which one would be more natural
[23:52:45] <Zipheir> 'Both' is an option.
[23:53:00] <sham1> Like the latter would require some currying to get the `obj` to the method, while the former feels a bit alien since the second one evaluates to just a procedure like any other expression like it
[23:53:17] <sham1> The first one feels like a weird (apply)
[23:53:25] <Zipheir> This reminds me a bit of lambda* https://srfi.schemers.org/srfi-232/srfi-232.html
[23:53:51] <sham1> That would indeed be a bit like it, yeah
[23:54:03] <Zipheir> I'd prefer returning a procedure if I had to choose between the two; it's more flexible.
[23:54:24] <sham1> And of course this is just single dispatch because for better or worse, that's what people are used to as opposed to multiple dispatch
[23:54:40] <Franciman> Zipheir: this implicit recursive slowdown thing is tricky lol
[23:54:45] <Zipheir> Then you could write (let ((m (dispatch obj 'method))) ...) instead of (let ((m (lambda args (apply dispatch obj 'method args)))) ...)
[23:54:55] <sham1> Yeah
[23:55:25] <Zipheir> Franciman: Yes.
[23:55:34] <sham1> I did feel that the ((dispatch ...) ...) was better, but I felt that might as well hear some objections if there were to be any
[23:55:51] <Zipheir> I haven't delved into the amortized complexity analysis for finger trees yet; especially with lazy eval, it gets hairy.
[23:56:15] <Zipheir> sham1: I definitely think it's better.
[23:56:57] <sham1> And of course this could be hidden inside some other procedure
[23:57:35] <sham1> Like (define (method obj . args) (apply (dispatch obj 'method) args))
[23:57:45] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1a6:b836:35b8:fd52:cba:b4fc)
