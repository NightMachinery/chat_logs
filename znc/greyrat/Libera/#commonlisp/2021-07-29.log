[00:00:03] *** Joins: srhm (~ascii@user/srhm)
[00:14:18] *** Joins: asarch (~asarch@2806:10ae:7:ea36:8b01:efac:f019:c887)
[00:16:15] *** Quits: sander (~sander@user/sander) (Ping timeout: 265 seconds)
[00:18:02] *** Joins: sander (~sander@user/sander)
[00:18:42] *** Quits: d4ryus (~d4ryus@ppp-188-174-58-62.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[00:26:31] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 250 seconds)
[00:33:53] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[00:36:09] *** Quits: pranavats (3fba1d1b34@jabberfr.org) (Ping timeout: 252 seconds)
[00:39:29] *** Joins: dsk (~dsk@user/dsk)
[00:46:04] *** Joins: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de)
[00:51:46] *** Quits: asarch (~asarch@2806:10ae:7:ea36:8b01:efac:f019:c887) (Quit: Leaving)
[00:54:13] *** Quits: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:13:22] *** Quits: pve (~pve@37-33-43-133.bb.dnainternet.fi) (Ping timeout: 240 seconds)
[01:15:07] *** Quits: lad (~lad@user/lad) (Ping timeout: 245 seconds)
[01:31:09] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:31:36] *** Quits: attila_lendvai (~alendvai@1F2EFFA5.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[01:32:12] *** Joins: attila_lendvai (~alendvai@1F2EFFA5.unconfigured.pool.telekom.hu)
[01:48:30] <lotuseater> pjb: :D
[01:48:48] <lotuseater> tell that Bjarne Stroustrup
[01:51:24] *** Joins: derelict (~derelict@user/derelict)
[01:55:05] *** Quits: meraz_1 (~meraz_1@190.92.33.253) (Quit: meraz_1)
[01:56:10] *** Quits: gaqwas (~john@dynamic-095-117-022-153.95.117.pool.telefonica.de) (Ping timeout: 240 seconds)
[02:03:02] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 245 seconds)
[02:11:55] <phantomics> Hey, another question. When a local binding is created for a dynamic variable, functions defined even outside the scope of that local binding will use the local binding, correct?
[02:11:57] <phantomics> For example...
[02:12:15] <phantomics> (defvar foo 13) (defun set-foo (arg) (setf foo arg)) (let ((foo 3)) (set-foo 50) (+ foo 10)) foo
[02:12:43] <phantomics> The (set-foo) inside the (let) form doesn't actually change the top-level value of foo, even though the function is defined outside
[02:12:52] <_death> right
[02:15:28] <phantomics> Ok. I have a workaround but it'll be a pain to set up
[02:17:02] <pjb> lotuseater: the only advice I have for Bjarne, unfortunately, is to ask to be interned in a lunatic asylum.
[02:17:28] <pjb> phantomics: wrong
[02:17:48] <lotuseater> lol
[02:18:01] <pjb> phantomics: you don't have _local_ bindings for _dynamic_ variables.  It's like asking what taste is the color blue?  it's meaningless.
[02:18:16] <pjb> phantomics: what you have is _TEMPORARY_ bindings for _dynamic_ variables.
[02:18:25] <pjb> dynamic = time ; lexical = space.
[02:18:26] <phantomics> I know that the dynamic vars have a value stack and a value gets pushed onto the stack within that (let) scope
[02:18:46] <pjb> phantomics: how do you know that? are you an implementer?
[02:18:48] *** Joins: lad (~lad@user/lad)
[02:19:00] <phantomics> That's what I read before
[02:19:43] <pjb> phantomics: the set-foo mutates the binding of the dynamic variable foo that is active WHEN the function set-foo is called.
[02:20:10] <phantomics> Makes sense
[02:20:13] <pjb> phantomics: in set-foo, there is absolutely no consideration for WHERE the variable foo is bound. Only WHEN it is bound.
[02:20:22] <pjb> since foo is a dynamic variable.
[02:21:04] <pjb> The only "work around" is to use lexical variables.
[02:21:28] <pjb> Note: you can define global lexical variables using symbol macros.  Search for a defglobal or deflex in libraries.
[02:21:37] <phantomics> The workaround, as far as the April compiler is concerned, is to prefix the internal representations of all lexical variables with something
[02:22:55] <phantomics> So if someone enters foo‚Üê5 at the top level, a dynamic foo variable is created
[02:23:05] <pjb> eg. http://rpw3.org/hacks/lisp/deflex.lisp
[02:23:56] <phantomics> And then if they write a function like {foo‚Üê5 ‚ãÑ foo+‚çµ}, a lexical variable called something like "ùïèfoo" that shadows the value of the external "foo" is instantiated in a (let) form
[02:24:08] <pjb> So you're implementing lexical variables with dynamic variable when you have a language that already has lexical variable? Why? Are you masochist?
[02:24:27] <phantomics> APL
[02:24:37] <phantomics> APL's top-level variables are effectively dynamic
[02:25:03] <lotuseater> pjb: not him but Ken Iverson xD
[02:25:07] <phantomics> It creates implicit shadowed lexical variables when you assign a value to something inside a function
[02:25:47] <pjb> Ok, so you have toplevel variables that are dynamic and local variables that are lexical, and the local lexical variable can shadow the the toplevel dynamic variable?
[02:25:57] <phantomics> Correct
[02:26:04] <pjb> In that case, indeed, you need some kind of renaming or use a different namespace (package).
[02:26:27] <phantomics> That's what I'm planning to do, with that "ùïè" prefix
[02:26:28] <pjb> The local lexical variables can be renamed at will, since they're lexical.
[02:26:51] <pjb> Well, you can just use (gensym) to generate new names‚Ä¶
[02:26:57] <phantomics> The tricky part is that APL has a type of function that can reassign the global variable outside of a function's scope
[02:27:35] <phantomics> But given a lexical variable's name, I need to be able to find if it is shadowing a dynamic variable
[02:27:43] <phantomics> The prefix system allows that
[02:27:48] <pjb> No, you can rename all the lexical variables.
[02:28:44] <pjb> (mapcar (lambda (lexical-apl-variable) (cons lexical-apl-variable (gensym))) lexical-apl-variables) to build an a-list mapping the lexical-apl-variables to lexical-lisp-variables.
[02:28:48] <phantomics> If I rename them to gensyms how do I find their corresponding external dynamic var symbol? Enter it all in a hash table? The prefix system is simpler, and double-struck letters are illegal in April var name so there's no chance of collision
[02:29:19] <pjb> You find that before, by looking up the apl-variable in a global-dynamic-apl-variables list.
[02:30:18] <phantomics> That seems cumbersome when I could just remove the lexical var prefix and look for the existence of a dynamic var by that name
[02:30:53] <phantomics> Also the gensyms would make April's compiled code harder to read
[02:31:04] <pjb> Yes.
[02:31:20] <pjb> But for compiled code, it doesn't matter much‚Ä¶
[02:31:33] <pjb> For translated code, it would be more important.
[02:31:43] <phantomics> April is designed to produce relatively readable compiled code for the purpose of debugging
[02:31:51] <pjb> In that case, your idea is good.
[02:32:00] *** Quits: j-sh (~j-sh@88.130.155.144) (Quit: Connection closed)
[02:32:00] <phantomics> And by compiled I may mean closer to what you mean by translated
[02:32:45] <phantomics> APL converted into Lisp designed for readability, I've built a lot of stuff including some reader macros just to make the output more readable
[02:33:06] <pjb> note: lexical variables are not accessible from "outside" the function, while global variables are accessible from anywhere.
[02:33:44] <pjb> therefore I would use a package such as "APL-VARIABLES" to intern the names of the global dynamic variables, and another package "APL-INTERNALS" to intern the name of the lexical variables.
[02:33:48] <phantomics> The concept of "global lexical variables" is interesting though, I may check into those tools you mentioned in case they're useful
[02:34:01] <pjb> You'd have APL-VARIABLES:FOO  and APL-INTERNALS:FOO.
[02:34:36] <pjb> Well, you'd have APL-VARIABLES:FOO  and APL-INTERNALS::FOO.  You wouldn't have to export symbols from APL-INTERNALS.
[02:34:51] <phantomics> April already supports multiple workspaces, each of which is implemented as a package, so that means I would have to have two of those packages for each workspace
[02:35:05] <pjb> Possibly.
[02:35:36] <pjb> This is a consideration if you want to interact with lisp.
[02:36:09] <pjb> having APL code generate packages with exported symbols only for the "public" stuff and other packages for the internals would be clean.
[02:36:31] <phantomics> April is intended to be highly interactive with Lisp; each workspace is a package, all variables you create can be accessed from the Lisp instance.
[02:36:58] <phantomics> If all the lexical vars are interned in a "sub-package" that could be fairly clean, no one would need to do much with the lexical package
[02:46:51] <jcowan> pjb: You can only be internet in LUNATIC-ASYLUM if it's a  known package
[02:47:03] <jcowan> s/internet/interned
[02:53:50] <pjb> lispers yes, but C++ designers can be interned in real-life asylums.
[02:55:06] *** Quits: attila_lendvai (~alendvai@1F2EFFA5.unconfigured.pool.telekom.hu) (Ping timeout: 256 seconds)
[03:05:49] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[03:06:02] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:60a6:d0c5:4d01:36c6) (Remote host closed the connection)
[03:06:08] <char> Hello everyone
[03:06:24] <lotuseater> hi char :)
[03:09:49] *** Joins: zacts (~zacts@user/zacts)
[03:12:17] <char> Is there any good forward+reverse proxy for common lisp? I couldn't find how to forward http tcp sockets with hunchentoot
[03:13:03] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 268 seconds)
[03:13:09] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[03:14:02] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[03:16:18] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (Ping timeout: 240 seconds)
[03:21:03] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[03:21:17] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[03:22:32] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[03:22:44] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[03:27:04] *** Quits: frgo (~frgo@p200300deef181d008872ccea77bb1081.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:27:31] *** Joins: frgo (~frgo@p200300deef181d0048b2436ea3a4b169.dip0.t-ipconnect.de)
[03:34:31] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[03:37:31] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Quit: leaving)
[03:37:44] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[03:38:29] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Client Quit)
[03:38:42] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[03:42:51] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Client Quit)
[03:43:12] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[03:46:45] *** Quits: taiju (~taiju@240b:253:ec40:2400:4582:f12e:efff:b6a0) (Ping timeout: 276 seconds)
[03:47:25] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:49:19] *** Joins: pegaso (~reis-r@131.72.121.113)
[03:49:46] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[03:53:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[03:59:22] *** Joins: zacts (~zacts@user/zacts)
[04:01:04] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[04:01:26] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:05:46] *** Parts: lotuseater (~user@p200300e7871b3f0034ed9e810c3724ce.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[04:11:26] *** Parts: akoana (~ah@user/akoana) (Leaving)
[05:05:32] *** Quits: random-nick (~random-ni@87.116.182.181) (Ping timeout: 252 seconds)
[05:09:24] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[05:18:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[05:20:16] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Quit: leaving)
[05:22:26] *** Quits: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi) (Ping timeout: 258 seconds)
[05:24:23] *** Joins: cjb (~cjb@user/cjb)
[05:33:33] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[05:34:13] *** Joins: ldb (~user@user/ldb)
[05:34:27] <ldb> good morning everyone
[05:35:11] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[05:38:20] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[05:39:28] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Client Quit)
[05:40:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[05:42:59] <phantomics> morning ldb
[05:44:44] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[05:47:46] *** Quits: lad (~lad@user/lad) (Ping timeout: 240 seconds)
[05:58:19] *** Joins: dsk (~dsk@user/dsk)
[06:03:23] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[06:06:24] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[06:43:20] *** Quits: pegaso (~reis-r@131.72.121.113) (Quit: Leaving)
[07:08:41] *** Joins: prxq_ (~quassel@x4db512e7.dyn.telefonica.de)
[07:12:53] *** Quits: prxq (~quassel@x4db50dbf.dyn.telefonica.de) (Ping timeout: 265 seconds)
[07:18:42] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 240 seconds)
[07:33:01] <beach> Good morning everyone!
[07:33:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[07:35:05] *** Joins: derelict (~derelict@user/derelict)
[07:36:44] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[07:42:51] <phantomics> morning beach
[07:51:46] *** Quits: lottaquestions (~nick@2607:fa49:5040:a300:d5df:d412:bed6:9ef6) (Read error: Connection reset by peer)
[07:52:01] *** Joins: lottaquestions (~nick@2607:fa49:5040:a300:d5df:d412:bed6:9ef6)
[07:57:24] *** Quits: Fare (~fare@2601:184:4a7f:995c:8cb5:3c64:8b2b:5a1) (Remote host closed the connection)
[08:05:11] *** Joins: Fare (~fare@2601:184:4a7f:995c:8cb5:3c64:8b2b:5a1)
[08:12:12] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[08:12:38] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[08:16:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[08:24:25] *** Quits: ldb (~user@user/ldb) (Ping timeout: 265 seconds)
[08:32:32] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[08:38:47] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[08:40:22] *** Joins: meraz_1 (~meraz_1@190.92.33.253)
[08:43:16] *** Joins: notzmv (~zmv@user/notzmv)
[08:46:32] *** Joins: cjb (~cjb@user/cjb)
[08:59:27] <kakuhen> pjb: regarding the macro from yesterday, it seems that restart-case does not place forms on the top level, and the cl spec only guarantees types exist when you defclass on the top level; it seems you can have implementation-specific behavior when you defclass below the top level
[08:59:34] <kakuhen> so what we observed in sbcl and ccl is likely not a bug in the compiler
[09:00:01] *** Quits: Fare (~fare@2601:184:4a7f:995c:8cb5:3c64:8b2b:5a1) (Remote host closed the connection)
[09:02:19] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[09:08:05] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:11:50] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:14:47] *** Joins: cjb (~cjb@user/cjb)
[09:18:04] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 265 seconds)
[09:18:29] *** Joins: trufas (~trufas@177.240.218.218)
[09:30:37] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:32:37] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[09:34:04] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:39:35] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[09:39:59] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[09:46:23] *** Quits: zos (~zosthegoa@ool-457a8044.dyn.optonline.net) (Quit: WeeChat 2.8)
[09:55:35] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[09:57:44] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Read error: Connection reset by peer)
[09:57:55] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40)
[10:06:06] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[10:07:19] *** Joins: cjb (~cjb@user/cjb)
[10:07:23] *** Joins: gaqwas (~john@dynamic-077-002-028-240.77.2.pool.telefonica.de)
[10:23:18] *** Quits: silasfox (~sbv@2001-4dd6-abca-0-de39-b264-6870-a7ee.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[10:23:36] *** Joins: silasfox (~sbv@xdsl-87-78-183-74.nc.de)
[10:26:03] *** Joins: Qwnavery (~Qwnavery@61-68-186-232.tpgi.com.au)
[10:41:40] *** Quits: meraz_1 (~meraz_1@190.92.33.253) (Remote host closed the connection)
[10:42:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[10:44:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:49:58] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:50:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:51:12] *** Lord_of_Life_ is now known as Lord_of_Life
[10:53:39] *** Joins: ldb (~user@user/ldb)
[11:13:27] *** Quits: slyrus_ (~slyrus@135.180.166.51) (Quit: Leaving)
[11:20:12] *** Quits: gaqwas (~john@dynamic-077-002-028-240.77.2.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:32:07] *** Joins: selwyn (~selwyn@user/selwyn)
[11:37:17] *** Joins: pve (~pve@37-33-112-179.bb.dnainternet.fi)
[11:41:11] *** Quits: ldb (~user@user/ldb) (Ping timeout: 268 seconds)
[11:45:13] *** Joins: Krystof (~user@81.174.155.115)
[11:46:28] *** Joins: ldb (~user@user/ldb)
[11:51:17] *** Quits: ldb (~user@user/ldb) (Ping timeout: 265 seconds)
[11:56:34] *** Joins: ldb (~user@user/ldb)
[11:56:50] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[11:59:43] <pjb> kakuhen: indeed.
[11:59:58] *** Joins: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi)
[12:00:25] <pjb> kakuhen: note that restart case in foo could have only been invoked by the compiler, since it wraps only defclass and defmethod.
[12:00:47] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[12:06:44] *** Joins: ldb (~user@user/ldb)
[12:10:58] *** Quits: ldb (~user@user/ldb) (Ping timeout: 240 seconds)
[12:29:46] *** Joins: heisig (~heisig@p57942813.dip0.t-ipconnect.de)
[12:30:49] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:33:52] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[12:35:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:38] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:45] *** Quits: Qwnavery (~Qwnavery@61-68-186-232.tpgi.com.au) (Quit: WeeChat 3.2)
[13:00:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[13:00:23] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:16:41] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[13:23:27] *** Joins: lotuseater (~user@p200300e7871b3f0034ed9e810c3724ce.dip0.t-ipconnect.de)
[13:28:03] *** Joins: Qwnavery (~Qwnavery@61-68-186-232.tpgi.com.au)
[13:29:26] *** Quits: Qwnavery (~Qwnavery@61-68-186-232.tpgi.com.au) (Quit: WeeChat 3.2)
[13:30:05] *** Joins: Qwnavery (~Qwnavery@61-68-186-232.tpgi.com.au)
[13:32:20] <lotuseater> Hey does anyone know this Automated Mathematician system by Douglas Lenat? (from which Cycorp more or less evolved)
[13:37:19] *** Quits: Qwnavery (~Qwnavery@61-68-186-232.tpgi.com.au) (Ping timeout: 258 seconds)
[13:40:56] <edgar-rft> lotuseater: wasn't that one of the predecessor ideas that later became known under the term "genetic programming" (automatically generating, modifying and testing computer source code)?
[13:41:16] <edgar-rft> -> https://en.wikipedia.org/wiki/Automated_Mathematician
[13:41:17] <lotuseater> yes could also be
[13:41:32] <lotuseater> I read that article some minutes ago
[13:42:15] <lotuseater> and first read about this system indirectly in G√∂del Escher Bach by Douglas Hofstadter some time ago. to me personally very interesting as it also touches experimental mathematics
[13:43:07] <edgar-rft> to me all sort of math appears as "experimental" :-)
[13:43:40] <lotuseater> hehe yes indeed. and mostly discovered, like Lisp is discovered
[13:44:28] <lotuseater> the great mathematicians like Euler, Gauss, etc were all experimental mathematicians in the first part of their work pipeline
[13:45:19] <lotuseater> so I found an archived repo of AM translated from Lisp to Prolog but the file organization seems messy
[13:45:42] <lotuseater> https://github.com/akkartik/am-utexas
[13:46:08] <lotuseater> ah okay I take that back
[13:56:25] <hayley> That'd check out for the author.
[13:57:34] <lotuseater> he also has a repo with Arc ^^ a forked dialect named anarki
[13:57:58] <hayley> He is a total hack-job.
[13:58:26] <lotuseater> explain what you mean plz :)
[13:58:51] *** Joins: makomo (~makomo@user/makomo)
[13:59:42] <hayley> Anyways, AM looks like an interesting project. In the context of CL programs, I considered a program which would just nudge things around to find dumb mistakes that I fail to find because I'm not thinking about them.
[14:00:16] <lotuseater> hmm
[14:01:24] <hayley> Well, his shtick is that abstraction is a net loss would you flip through lots of codebases, or would you be a new programmer. But as Dijkstra said (paraphrasing) "the aim of abstraction is to make a layer that one can be totally precise about."
[14:01:49] <lotuseater> oh yes
[14:02:23] *** Joins: attila_lendvai (~alendvai@1F2E5C2E.unconfigured.pool.telekom.hu)
[14:02:36] <lotuseater> and I read a very funny post on hackernews from one ex-employee of Cycorp :D
[14:02:41] <hayley> Without such a mechanism, one achieves a vulgar kind of simplicity where they can't do very much, even if the components are blatantly obvious in what they do. It's like less-is-less rather than less-is-more.
[14:02:42] <lotuseater> https://news.ycombinator.com/item?id=21783828
[14:02:57] <lotuseater> okay i see
[14:04:23] <hayley> Should I shut up now? I could go on for a long time about how annoying it is that such a bad idea of "simplicity" permeates the minds of a lot of hackers.
[14:05:03] <lotuseater> no it's okay for me, but could be seen as too offtopic
[14:05:36] <hayley> Definitely. (Or we take it to #lispcafe? :)
[14:05:59] <lotuseater> okay good idea
[14:06:25] <hayley> Still, only if you want to be on the receiving end of it.
[14:09:18] <lotuseater> of course everytime I learn so much from you people
[14:14:57] *** Quits: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:15:19] *** Joins: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi)
[14:22:21] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[14:22:40] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:25:42] *** Joins: tfeb (~tfb@88.98.95.237)
[14:27:59] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[14:30:28] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[14:31:42] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[14:33:45] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a5ab:8555:d9e0:dbd2)
[14:38:20] *** Quits: heisig (~heisig@p57942813.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:48:31] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[14:49:33] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[14:55:30] *** Quits: thonkpod (~thonkpod@user/thonkpod) (Ping timeout: 240 seconds)
[15:06:40] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[15:06:40] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[15:06:40] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[15:06:41] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[15:06:42] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[15:06:43] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Bridge terminating on SIGTERM)
[15:06:48] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Quit: Bridge terminating on SIGTERM)
[15:06:50] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[15:07:33] *** Joins: Guest45 (~Guest45@2a02:c7f:b086:1000:9053:f5f6:eeb8:3b40)
[15:08:10] *** Quits: Guest356 (~caz@2001:470:69fc:105::b9fc) (Remote host closed the connection)
[15:08:22] *** Quits: Guest45 (~Guest45@2a02:c7f:b086:1000:9053:f5f6:eeb8:3b40) (Client Quit)
[15:09:30] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[15:15:27] *** Quits: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi) (Ping timeout: 258 seconds)
[15:16:39] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[15:16:39] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[15:16:39] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[15:16:39] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[15:16:39] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[15:16:39] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[15:16:39] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[15:16:39] *** Joins: hayley (~theemacss@user/hayley)
[15:16:51] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[15:17:54] <jmercouris> better way than format for concatenating a list of strings into a single string?
[15:19:46] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[15:20:40] <jmercouris> aka (format nil "~{~a ~}" (list "salmon" "are" "great"))
[15:21:12] <jmercouris> I COULD do an apply or something on concatenate
[15:21:15] <jmercouris> but is that better?
[15:21:21] <jmercouris> am I overthinking a trivial operation?
[15:25:26] <edgar-rft> (apply #'concatenate 'string (list "a" "b" "c")) = "abc"
[15:25:55] <luis> not a great idea if the list has an arbitrary number of elements, though.
[15:26:07] *** Quits: frgo (~frgo@p200300deef181d0048b2436ea3a4b169.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:26:34] *** Joins: hafat (~hafat@95.70.168.45)
[15:26:35] *** Joins: frgo (~frgo@p200300deef181d0048b2436ea3a4b169.dip0.t-ipconnect.de)
[15:30:34] <hayley> Your FORMAT string would also include spaces, for what it's worth.
[15:31:08] <jmercouris> yes, sure, I could remove the spaces no problem
[15:31:12] <jmercouris> I'm not asking about trivial semantics
[15:31:13] <luis> jmercouris: something like serapeum:string-join is probably slightly nicer
[15:31:24] <jmercouris> I'm asking if there is a performance penalty or reason to prefer one or the other
[15:31:45] <jmercouris> luis: that may very well be a good idea, thanks
[15:33:01] <luis> jmercouris: from a readability standpoint that is. I have no idea about performance.
[15:38:07] <jmercouris> yes, agreed
[15:38:21] <jmercouris> serapeum may be faster because it looks to be using streams
[15:39:08] *** Quits: attila_lendvai (~alendvai@1F2E5C2E.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[15:39:17] <hayley> Well, you know the size of the output string already, so you can allocate exactly the right size and fill it in.
[15:39:36] *** Joins: attila_lendvai (~alendvai@1F2E5C2E.dsl.pool.telekom.hu)
[15:40:42] <hayley> c.f. fast-io being quite fast. I remember I wrote a faster-io as I knew I could get away with not copying some buffers, so I just stuck those into the list rather than copy them in.
[15:41:13] <White_Flame> (with-output-to-string (*standard-output*) (mapc #'write '(1 2 3)))
[15:41:39] *** Joins: shka (~herr@109.231.62.239)
[15:41:50] <hayley> How much are you concatenating though? Depending on the context you probably shouldn't care too much.
[15:44:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:44:18] <jmercouris> quite a bit... depending
[15:44:23] <jmercouris> it is with regards to documents on the internet
[15:44:31] <jmercouris> so the amount of concatenation varies
[15:44:38] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[15:47:35] *** Joins: treflip (~user@95.79.32.99)
[15:51:22] *** Quits: attila_lendvai (~alendvai@1F2E5C2E.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[15:51:53] *** Joins: attila_lendvai (~alendvai@1F2E5C2E.unconfigured.pool.telekom.hu)
[16:03:16] <pjb> lotuseater: nothing new about CyC. I dug a little into OpenCyC some years ago, and indeed, everything that's said was apparent.  The best thing they could do to unlock the situation would be to replace the pseudo-lisp->java translator by a pure CL implementation, then externalize the database (so it can be put in git).  Then things could evolve‚Ä¶
[16:03:33] <pjb> If I had the resources ,I would have done that with OpenCyc.
[16:05:17] <pjb> jmercouris: (com.informatimago.common-lisp.cesarum.sequence:concatenate-sequences '(vector character) '("Foo" "Bar" "Baz")) #| --> "FooBarBaz" |#
[16:06:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[16:07:43] <pjb> jmercouris: there's also: (com.informatimago.common-lisp.cesarum.string:concatenate-strings '(("FooBar" 0 3) (#\b #\a #\z) (quux 2 4))) #| --> "FoobazUX" |#
[16:08:04] <jmercouris> Yes
[16:20:15] <etimmons> Xach: I was over optimistic on UIOP release timeline. I don't think it'll make it for this next QL. Maybe the random failures experienced by users will cause at least a few more folks to explicitly depend on UIOP if they use anything from it
[16:26:34] *** Joins: d4ryus (~d4ryus@ppp-188-174-95-171.dynamic.mnet-online.de)
[16:26:48] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[16:29:23] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 250 seconds)
[16:38:28] *** Quits: hafat (~hafat@95.70.168.45) (Ping timeout: 256 seconds)
[16:44:24] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[16:45:15] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[16:59:58] *** Joins: Bike (~Glossina@71.69.170.70)
[16:59:58] *** ChanServ sets mode: +o Bike
[17:04:40] <jmercouris> (format nil "~{~a~}" some-list) -> (xyz . qre)
[17:04:42] <jmercouris> I want to print just the car
[17:04:52] <jmercouris> I did try:
[17:04:59] *** Joins: heisig (~heisig@p57942813.dip0.t-ipconnect.de)
[17:05:10] <jmercouris> (format nil "~{~/car ~a/~}" some-list)
[17:05:24] <jmercouris> but it seems I don't understand how to use the ~/ / directive because it complains that I am trying to pass 4 arguments to car
[17:10:30] *** prxq_ is now known as prxq
[17:14:49] <Bike> it's ~/function-name/, and the function has to take a particular argument convention so it can have commas and colons like other directives
[17:15:22] <Bike> clhs ~/
[17:15:22] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/22_ced.htm
[17:17:09] <Bike> i don't think there's any easy way to get format to print the cars of a list (without doing like (mapcar #'car ...) i mean obviously)
[17:17:24] <Bike> maybe there's some junk with ~{}, but i don't know if that works with dotted lists
[17:17:37] <jackdaniel> how about (format nil "~:{~a~}" '((a . b) (c . d)))
[17:21:43] <jmercouris> Bike: I did end up with mapcar...
[17:21:57] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[17:22:23] <jmercouris> jackdaniel: what is ~: ?
[17:23:04] <jackdaniel> when you navigate to the part of the spec that describes tilde left brace you will find out
[17:23:12] *** Quits: frgo (~frgo@p200300deef181d0048b2436ea3a4b169.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:23:32] <jmercouris> It seems to be a modifier for the tilde brace
[17:23:37] <jmercouris> I've not been able to find that part of the spec
[17:23:44] <jmercouris> I usually rely on the PCL book to learn about format
[17:23:56] <jmercouris> I can't ever remember how to get to the damn directives
[17:24:01] <jackdaniel> http://l1sp.org/search?q=~{
[17:24:51] <Bike> you can also do
[17:24:53] <Bike> clhs ~{
[17:24:53] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/22_cgd.htm
[17:25:05] <jmercouris> I will do that, thanks
[17:25:16] <jmercouris> maybe I'll add l1sp to my search engines
[17:28:10] *** Joins: ldb (~user@user/ldb)
[17:28:49] <ldb> find a interesting book about book composition using moveble type that mentioned how to typeset music scores
[17:29:16] <ldb> it is hard to find books like this these days
[17:30:09] <beach> ldb: The main reference for music engraving rules is "Behind Bars".
[17:30:18] <beach> It is quite recent.
[17:30:45] <beach> There was only one book before that, namely that of Ross, but it was a lot less complete than Behind Bars.
[17:35:07] <beach> https://www.amazon.com/Behind-Bars-Definitive-Guide-Notation/dp/0571514561
[17:38:06] <ldb> beach: oh, you told me Behind Bars before. that is a very comprehensive book
[17:39:36] <beach> Yes, it is very good.
[17:40:15] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[17:41:44] <ldb> The book I found is Modern Methods of Book Composition
[17:42:43] <beach> Oh, that sounds more like it's about technology rather than design rules.
[17:47:12] <ldb> That book describes how the staff is composed by many lines and elements, with movable type. I guess today with digital typesetting capable of doing overlapping, such a system would rarely been used.
[17:47:39] <beach> I see.
[17:51:19] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[17:53:55] *** Joins: makomo (~makomo@user/makomo)
[17:54:29] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net)
[17:56:14] <nij-> Hi! I constantly run into situations where pattern matching is needed. Most of the time, I can get through it by writing adhoc looking codes.. but I think there must be a better way. So here's an example: how would you write pattern matching code for #'fun such that it groups a list of lists based on the cars?
[17:56:20] <nij-> (fun '((1 a b) (2 c d e) (3 f g) (1 h i j) (2 k))) ;; => ((1 a b h i j) (2 c d e k) (3 f g))
[17:56:50] <nij-> I've looked into the package trivia, but couldn't figure it out. Here's my attempt:
[17:57:46] <nij-> https://bpa.st/KA2Q
[17:57:57] <hayley> I think the meat of such a function is mostly not pattern matching logic.
[17:58:44] <jmercouris> grouping a list of list based on the cars, sounds like a job for a H A S H T A B L E
[17:58:54] <heisig> nij-: I recommend Trivia for pattern matching.  But what you describe isn't a pattern matching problem.
[17:58:56] <nij-> Yeah, the function itself isn't not about pattern matching logic. But I think my code can be much cleaner if written in the PM style.
[17:58:59] <ldb> I guess you need a multiset, maybe hastable
[17:59:02] <jmercouris> that's just my O P I N I O N
[17:59:17] <nij-> jmercouris: R E S P E C T : )
[17:59:26] <jmercouris> :-D
[17:59:41] <nij-> no no.. the issue isn't how to implement #'fun.... but to implement it using a clean PM code.
[17:59:56] <ldb> cleaner? I don't think writing imperative code is bad in CL
[17:59:58] <hayley> That pattern rather matches positions, not elements with the same heads, as heisig said.
[18:00:29] <ldb> CAR, CADR, CADDR ...
[18:00:50] <hayley> Even plain LOOP destructuring would be fine.
[18:01:03] <nij-> ldb: not bad - I'm just wondering how to do it in another way in PM :)
[18:01:13] <nij-> I can just run loops over it and collect things I want. That's fine.
[18:01:24] <nij-> But I'd really hope I can expand my horizon too.
[18:01:38] <hayley> (loop for (key . values) in list do (stash-values key values) finally (return accumulated-values))
[18:01:49] <nij-> hayley: How would you use loop destructuring? I think that's some thing I haven't considered.
[18:01:54] <nij-> oh hm lemme see.
[18:02:09] <jmercouris> Loop is really magic
[18:02:31] <hayley> One good pattern matching problem would be a symbolic derivative function, or a term simplification function.
[18:02:36] <ldb> yes loop can destructuring, there are also variants to LET that can do destruct, probably described in Let over lambda
[18:02:59] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[18:04:17] <hayley> The DEFINE-RE macro I used for simplifying regular expressions even got some appraisal from one die-hard functional programmer. That would be where you want pattern matching.
[18:04:34] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:08:46] <nij-> I'm thinking about the possibility of turning regex's (for text) functionalities into lisp (for sexprs)..
[18:09:09] <nij-> But I need to come up with a harder problem, which couldn't be easily solved by desstructuring LOOP.
[18:09:14] <nij-> I will be back ;)
[18:09:50] <hayley> You want to parse the textual form of a RE? Or you want a RE which matches Lisp objects?
[18:11:23] <nij-> The latter.
[18:11:39] <nij-> A RE-like DSL that matches Lisp objects.
[18:14:19] *** Joins: frgo (~frgo@i59F4B048.versanet.de)
[18:16:17] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:16:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:18:46] *** Quits: frgo (~frgo@i59F4B048.versanet.de) (Ping timeout: 256 seconds)
[18:20:39] <pjb> nij-: we cannot say what is required, because you've not written down any specification / requirements for your function. Only an example of call.  If it's an exercise in learning list processing (car/cdr/cons), then no matching is needed. It's clear from your example, that we only test the first element of each sublist, by the way it's even of a different type!
[18:21:26] <pjb> or indeed, destructuring-bind or in simple cases, loop destructuring.
[18:22:08] <nij-> pjb I get your point. I will come back with a few stronger examples.
[18:22:23] <pjb> nij-: some pattern matchers are actually regexp engines. (but often not, since you want to have unification, which is out of the scope of normal regexp engines).
[18:22:41] <pjb> nij-: some regexp engines are more generic than text processing (the theory is not restricted to text).
[18:22:42] <nij-> What do you mean by unification?
[18:23:17] <pjb> a pattern may contain variables. if the pattern is repeated, the variable must bind to the same values in all occurences.
[18:23:22] <nij-> Oh! I thought regexp is all about text. Do you mind pointing me to some things to read more about non-text regexps?
[18:24:11] <pjb> (* (foo ?a) (bar ?a) *)  matches  ((foo 42) (bar 33) #|>|# (foo 22) (bar 22) #|<|# (foo 33)) with ?a = 22
[18:24:28] <pjb> nij-: just any 'theorical' book about regexps.
[18:24:48] <pjb> they just talk of symbols and states and transitions and DFA/NFA.
[18:25:00] <pjb> nij-: and cl-ppcre is not far from providing the feature IIRC.
[18:25:26] <Bike> regexes can work on sequences that arne't full of characters just as well. fundamentals like the kleene star (*) is insensitive to what the sequence actually contains
[18:25:49] <Bike> not much more to talk about i don't think
[18:26:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:26:32] <nij-> I see. It indeed should be extended to sequences. How about general structs?
[18:26:55] <_death> could do worse than read the latest from Sussman (Software Design for Flexibility).. it shows how to implement a bunch of pattern matchers
[18:27:08] <_death> including graph matching
[18:27:09] <pjb> Well, you'd have to patch it to remove type checks: (handler-case (scan '(:greedy-repetition 2 6 #\b) #(33 #\b #\b #\c 42)) (error (err) (princ err))) --> The value 33 is not of the expected type character.
[18:27:25] <pjb> But notice how the regexp is not a string.
[18:27:55] <pjb> Note: (scan '(:greedy-repetition 2 6 #\b) #(#\b #\b #\b #\c #\a)) #| --> 0 ; 3 ; #() ; #() |#
[18:28:02] <pjb> no string.
[18:28:03] *** Joins: tfeb (tfb@gateway/vpn/protonvpn/tfb)
[18:28:22] <Bike> what do you mean by general structs?
[18:28:25] <pjb> People always put too many type checks in their programs! Silly!
[18:28:27] <Bike> ooh, graph matching
[18:29:52] <nij-> Bike - say I want to collect every thing that's a struct that has a slot :SLOT whose value is 0.
[18:30:04] <pjb> for graph you'd need a little more complexity (you'd have to walk the different branches, and avoid duplicate subpaths), but dealing with acyclic structures (trees) is done routinely in pattern matchers.
[18:30:24] <pjb> it's only a matter of having primitive matchers for all your data types.
[18:30:24] <Bike> are you talking about pattern matching? Because that doesn't really seem related to regular expressions to me, unless i'm missing something
[18:30:24] <nij-> (I can use loop, yes.. but that seems a bit adhoc - I dunno..)
[18:31:09] *** Quits: ldb (~user@user/ldb) (Ping timeout: 250 seconds)
[18:33:45] <_death> many Lisp books contain sections about implementing pattern matchers.. usually showing naive interpreter-like matchers and then moving on to compilation.. if you have a lot of patterns (or "rules") you can read about more advanced stuff like the RETE algorithm
[18:33:53] *** Joins: ldb (~user@user/ldb)
[18:34:00] <nij-> (match *x* ((struct :a 0 :b y)) y)
[18:34:13] <nij-> By pattern matching general structs I mean something like this ^
[18:34:31] <nij-> Namely, if *x* is a struct whose :a contains 0, then extract it's value from the :b slot.
[18:34:54] <Bike> seems doable to me, though you might need mop support. i don't know if trivia has it built in though.
[18:35:20] <nij-> Yeah.. and the DSL this should be recursive. For example,
[18:35:34] <nij->  (match *x* ((struct :a (list 0 1 __ 3) :b y)) y)
[18:35:59] <nij-> here, (list 0 1 __ 3) means any list that starts with 0 and 1, has 0 or more stuff in between, but ends with 3.
[18:36:02] <Bike> actually, this seems to be an example in trivia's documentation
[18:36:08] <Bike> https://github.com/guicho271828/trivia/wiki/What-is-pattern-matching%3F-Benefits%3F
[18:36:37] <Bike> so there you go
[18:36:44] <Bike> (the foo struct)
[18:37:01] <_death> I think pattern matchers (and unifiers) can be useful when the patterns are "data", i.e. not set in stone.. they are a nuisance in ordinary code, in my opinion.. so I don't like Haskell/Prolog/Erlang/etc. ordinary use of it
[18:37:57] <tfeb> you can't do that portably unless by 'struct' you really mean 'name of a class' (which seems to be what the trivia exam0le has)
[18:38:32] <nij-> Yeah, I really meant any struct that has slot :a being 0.
[18:38:49] <nij-> This seems like a hard DSL design problem. The question isn't how to extend trivia for it to do that.
[18:39:00] <tfeb> nij-: and that's what you can't do.
[18:39:07] <nij-> But rather, how to design a general DSL that cover all cases.
[18:39:15] <tfeb> in portable CL
[18:39:44] <Bike> you don't need to extend trivia, it's built in. trivia has a DSL like this for you.
[18:39:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:39:55] <Bike> maybe i don't understand what you mean though.
[18:40:06] <tfeb> as you need to introspect on the class of the struct to know if it has such a slot
[18:40:19] <tfeb> s/slot/field
[18:40:21] <Bike> yeah, but everyone supports mop at least to that extent, so that's not a big deal.
[18:40:37] <nij-> Bike, the example in its wiki only matches any struct of type 'FOO.
[18:40:53] <nij-> But I want to match any struct that has a 0 in its :a slot.
[18:40:57] <Bike> Oh, you want it to work for an instance of any class, as long as it has a slot of that name?
[18:41:10] <Bike> That's probably also doable, but it couldn't be very fast
[18:41:16] <Bike> "does this object have this slot" is slow
[18:41:51] <nij-> Yes, I mean, almost every thing is doable with macros.
[18:42:07] <nij-> So the problem really is how to design a general enough DSL, or - has there been one already?
[18:42:44] <tfeb> it's also really smelly: my struct has an a field, so does yours, but they mean completely different things
[18:42:47] <Bike> i'm pretty sure you could extend trivia's DSL to do this pretty easily
[18:43:02] <Bike> You said you don't want to just extend trivia, but I don't understand why
[18:43:29] <_death> that's just graph matching.. you just need to follow the links in different ways
[18:43:33] <Bike> The actual syntax for the DSL is pretty trivial, something like (ducktyped :a 0 :b y). there's the language design done, now it's just implementation
[18:44:10] <Bike> (although you might want to do like trivia and use slot names and accessors, rather than initargs)
[18:44:49] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[18:46:47] <Bike> also i just remembered you wouldn't need MOP if you used slot names, since you can use slot-exists-p
[18:48:18] <_death> an old frame system called Parmenides also had a rule engine written for it, FRulekit.. it allowed some pattern matching in its rules (and implemented the rete algorithm).. with some effort, one could probably beat it into CLOS submission instead.. https://github.com/death/Parmenides/blob/master/FRulekit.md
[18:56:32] <ldb> There is Predicate Dispatching http://dspace.mit.edu/bitstream/handle/1721.1/7071/AITR-2001-006.pdf?sequence=2
[19:06:16] *** Joins: cage (~cage@dynamic-adsl-78-15-35-191.clienti.tiscali.it)
[19:06:58] *** Quits: tfeb (tfb@gateway/vpn/protonvpn/tfb) (Quit: died)
[19:07:41] *** Joins: dlowe (~dlowe@user/dlowe)
[19:16:22] *** Joins: selwyn (~selwyn@user/selwyn)
[19:16:37] *** Joins: Josh_2 (~user@37.25.47.130)
[19:16:37] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[19:17:02] *** Joins: selwyn (~selwyn@user/selwyn)
[19:18:11] <Josh_2> Ello
[19:18:51] <dlowe> oi
[19:29:29] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:29:53] *** Joins: selwyn (~selwyn@user/selwyn)
[19:30:45] *** Quits: lisp123__ (~lisp123@45.130.83.181) (Remote host closed the connection)
[19:31:08] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[19:31:14] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[19:32:28] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[19:36:42] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 240 seconds)
[19:37:11] *** Joins: zacts (~zacts@user/zacts)
[19:39:58] *** Vultyre_ is now known as Vultyre
[19:40:26] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[19:42:15] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 258 seconds)
[19:43:57] <ldb> lol
[19:45:17] *** Joins: dlowe (~dlowe@user/dlowe)
[19:46:52] <lotuseater> pjb: what is that OpenCyc capable of?
[19:47:28] <lotuseater> jmercouris: for when i want to concatenate strings and chars i use uiop:strcat
[19:47:42] <lotuseater> or look at the STR system
[19:47:49] *** Joins: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi)
[19:52:15] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[19:56:00] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-EC96-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:56:48] *** Quits: peterhil (~peterhil@mobile-access-5d6aaf-196.dhcp.inet.fi) (Ping timeout: 256 seconds)
[20:03:45] *** Joins: hafat (~hafat@95.70.168.45)
[20:04:18] *** Quits: heisig (~heisig@p57942813.dip0.t-ipconnect.de) (Quit: Leaving)
[20:07:27] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[20:08:26] *** Joins: selwyn (~selwyn@user/selwyn)
[20:08:38] *** Joins: danielam (~daniel@cpe-67-247-21-112.nyc.res.rr.com)
[20:09:36] *** Quits: danielam (~daniel@cpe-67-247-21-112.nyc.res.rr.com) (Quit: leaving)
[20:09:48] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:10:19] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[20:10:39] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:10:39] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[20:12:10] *** Joins: tfeb (tfb@gateway/vpn/protonvpn/tfb)
[20:12:44] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:12:59] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 265 seconds)
[20:13:08] *** Quits: JoshYoshi (~user@37.25.47.130) (Client Quit)
[20:13:28] *** Joins: Josh_2 (~user@37.25.47.130)
[20:19:12] *** Quits: hafat (~hafat@95.70.168.45) (Quit: Leaving)
[20:21:37] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[20:25:57] *** Quits: lisp123_ (~lisp123@45.130.83.181) (Ping timeout: 245 seconds)
[20:30:24] *** Joins: lad (~lad@user/lad)
[20:30:54] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[20:33:44] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[20:35:36] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[20:35:55] *** Joins: Josh_2 (~user@37.25.47.130)
[20:42:55] *** Quits: tfeb (tfb@gateway/vpn/protonvpn/tfb) (Quit: died)
[21:07:08] *** Joins: zacts (~zacts@user/zacts)
[21:18:24] *** Joins: zos (~zosthegoa@ool-457a8044.dyn.optonline.net)
[21:19:49] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:27:46] <pjb> lotuseater: well, it's said in the AMA, it's basically a subset of CyC, notably for the ontologies.
[21:28:28] <pjb> lotuseater: but what's interesting anyways, is that people who've spent time inside CyC say that the best option would be to rewrite it from scratch.
[21:29:10] <pjb> the ontologies shouldn't be developped manually.  They should be infered with statistical ML applied on the web and youtube, and if you have access to robots, from robot action/sensors feedbacks.
[21:30:57] <pjb> The brain has clearly several layers, including ANN layers and symbolic layers.  And furthermore, there are different kinds of learning.  You can learn the table of multiplication (purely symbolic), and once you've learned it, it's "hardwired" into an ANN.  And it can even generalize to multiple digit numbers.
[21:31:56] <pjb> And you can learn to walk, to talk or drive a bicycle, totally ANN ML, but with SOM and other class of ANN to raise symbolic (conscious) signals and command pathways.
[21:33:05] <pjb> And Douglas Hofstadter https://en.wikipedia.org/wiki/Category:Books_by_Douglas_Hofstadter  should be studied and followed.
[21:34:30] <pjb> That said, CyC Inc is doing something right: exploiting commercially the classical AI algorithms. More companies should do that too, in addition to statistical AI.
[21:47:52] *** Quits: attila_lendvai (~alendvai@1F2E5C2E.unconfigured.pool.telekom.hu) (Ping timeout: 256 seconds)
[21:48:04] *** Joins: lisp123_ (~lisp123@45.130.83.181)
[21:56:01] * phoe decides to gamble a bit
[21:56:30] <phoe> I want to talk a little about code style and naming conventions in Common Lisp Recipes 2
[21:56:51] <phoe> and I want to do that without starting a war
[21:59:54] <lotuseater> pjb: oh yes i can imagine
[22:00:58] <lotuseater> afaik Cyc wants to be "more" than just normal inference engine, for putting in much details that are also situation dependent into it
[22:01:43] <lotuseater> "when there's one part of the rubik's cube at this position, none else can be there at the same time"
[22:02:11] <lotuseater> so for us humans much of this "obvious" stuff we learn by experiencing when growing up
[22:02:37] <lotuseater> phoe: oh there will be a 2nd book?
[22:03:10] <phoe> lotuseater: a second edition
[22:03:36] <lotuseater> ah I see. is Edi Weitz also involved?
[22:03:46] <Josh_2> the first edition is huuuuge
[22:03:48] <phoe> nope
[22:03:59] <phoe> Josh_2: well the second one will put on a bit of weight too
[22:04:09] <lotuseater> hm I think it covers many topics and that's good
[22:04:26] <Josh_2> I have a physical copy of the first to my left right now :P
[22:04:44] <lotuseater> I should buy that one day too.
[22:04:51] <Josh_2> yes its very good
[22:04:57] *** Joins: derelict (~derelict@user/derelict)
[22:04:58] <lotuseater> learned much from it
[22:05:32] <lotuseater> and have to study some parts more eager again
[22:05:50] <Josh_2> For me it has only been a reference
[22:06:12] <lotuseater> of course usable as such
[22:07:07] <lotuseater> phoe: so what are your points?
[22:07:46] <phoe> lotuseater: points?
[22:08:05] <ck_> about code style and naming conventions
[22:08:08] <lotuseater> you said about coding style
[22:08:13] <phoe> oh, those
[22:08:48] <lotuseater> conventions are good as long as they're reasonable
[22:09:06] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[22:09:07] <phoe> the first and most important one is that there's no silver bullet for that, given the variety of coding styles and naming conventions that are around
[22:09:18] <lotuseater> eg I prefer writing the keywords in LOOP as real keywords
[22:09:20] <phoe> the mostly established ones are *foo* for dynavars and +foo+ for constants
[22:09:27] <lotuseater> yes of course
[22:09:57] <Josh_2> same lotuseater
[22:09:59] <lotuseater> I also once read to use %foo% for symbol-macros
[22:10:04] <Josh_2> a convention I copied from pjb
[22:10:06] <phoe> the less established ones are %foo% for global symbol macros and =foo= or -foo- for global static variables
[22:10:23] <Bike> static? you mean like defglobal?
[22:10:27] <lotuseater> Josh_2: let alone the syntax highlighting, baggers brought me to this in one of his awesome videos
[22:11:08] <phoe> Bike: yes, static as in non-dynamic as in not special
[22:11:22] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[22:11:33] <lotuseater> ah static variables is one of those points i have still to dig in, but i would use =foo= cause hyphens are mostly for multiple word symbols in between
[22:11:35] <Bike> i see
[22:12:50] <lotuseater> as long as one has no readmacro chars defined with those
[22:12:51] <phoe> lotuseater: that's my sentiment as well, #\- already serves as a separator in Lisp
[22:13:12] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a5ab:8555:d9e0:dbd2) (Remote host closed the connection)
[22:13:18] <lotuseater> so we come together with this :)
[22:14:28] <_death> phoe: +foo+ is less established than *foo*.. e.g., CL symbols don't use it
[22:14:34] <phoe> _death: yes
[22:14:59] <phoe> ;; +nil+ and +t+ would look absolutely weird though
[22:15:20] <phoe> but still, enough code uses +foo+ to make it mentionworthy, even if the CL package does not use it for +pi+ and such
[22:15:43] <lotuseater> yes they would. cl21 uses +pi+
[22:16:04] <lotuseater> or rather using the real math symbol
[22:16:12] <phoe> oooh, unicode
[22:16:21] <lotuseater> I know, hairy topic
[22:16:22] <phoe> both enticing and scary
[22:17:03] *** Joins: tfeb (~tfb@88.98.95.237)
[22:18:25] <lotuseater> but can be expressive
[22:18:49] <lotuseater> "the LispWorks terminal repl does not support unicode"
[22:18:59] <phoe> you never can have enough expressiveness in Common Lisp‚Ñ¢
[22:19:48] <lotuseater> hehe
[22:20:04] <lisp123_> phoe: you have big shoes to fill. But I look forward to reading it
[22:20:36] <_death> my hope is that the number of footnotes is dramatically reduced..
[22:21:06] <lotuseater> other people find me weird when i told them "no for the meter per second function i simply use M/S and for the this lexical value i do (let ((5*10^5 (* 5 (expt 10 5)))) ...)
[22:21:24] <lisp123_> w.r.t to code conventions, its been something on my mind lately: the latest I have got to is that "lisp 2" way of doing things IMHO is very good. I name _all_ my variables the same name as the function that generates them. And then the parameters / arguments are also following the consistent naming, unless it makes it too, too long
[22:21:28] <lotuseater> "but the left is the computation!" eh no
[22:22:52] <_death> lotuseater: maybe there's a better name than 5*10^5
[22:23:15] *** Joins: zacts (~zacts@user/zacts)
[22:23:30] <lotuseater> no i found it for me very reasonable and it was jsut for me
[22:24:23] <_death> lotuseater: for the computation I'd likely just write 5e5 (but that would be a float)
[22:24:41] <lisp123_> here is an example: https://pastebin.com/g3KKGt0U
[22:24:49] <phoe> lisp123_: I'm aware, it's kinda scary
[22:24:50] <lotuseater> yes and I needed this and others as integers :)
[22:24:52] *** Joins: aidenw (~Aiden@156.57.146.89)
[22:25:34] <phoe> _death: actually I don't have good news for you - I have no idea how to approach this problem, especially since footnotes are a matter of taste as well
[22:25:34] <lotuseater> lisp123_: ah that is what you mean
[22:25:50] <phoe> but that's already a publishing kind of problem, and maybe #clcs will be a better venue to discuss this
[22:26:52] <lisp123_> lotuseater: what do you think :) I think its kinda done already (everytime one does (let ((list (list 1 2 3 )... for example
[22:27:13] <phoe> lisp123_: the first and most important goal is not to screw up what the first edition already achieved, and that's already a tough thing to do given how consistent CLR is as a book
[22:27:25] <phoe> all the cross-references and such
[22:27:30] <lotuseater> yes I'm totally into that
[22:28:08] <_death> phoe: whenever there was a footnote, I felt compelled to read it, and then, disappointed, "why not just say what mean in the main text, clearly and succinctly?".. I could not bear to read the book to the end..
[22:29:40] <lotuseater> _death: here a better version 5√ó10‚Åµ :D
[22:30:01] <_death> lotuseater: I don't think unicode belongs in source code
[22:30:14] <lisp123_> phoe: also it has quite a unique style. you can pick up any chapter of CLR, and quickly apply the examples to produce useful code. Good luck :) (would be great to give extended treatment of BKNR since that's one of my favourite packages lol, just throwing that in there)
[22:30:34] <lotuseater> yes and no
[22:30:45] *** Joins: selwyn (~selwyn@user/selwyn)
[22:30:48] <phoe> lisp123_: yes, this is the idea - each recipe is meant to be fully independent on its own, and link everywhere else in the book for off-topic things
[22:31:13] <lisp123_> _death: don't say that, I use unicode extensively (for symbolic computation its a godsend) :O
[22:31:33] <_death> lotuseater: and for names like "alpha" etc. often a better name is, say, "learning-rate".. though often programmers deal with their mathematician jealousy by taking the bad habits, I know
[22:31:50] <phoe> _death: it's a good thing that phantomics doesn't seem to be around at the moment :D
[22:31:59] <lotuseater> yes of course, expressiveness by naming for remembering
[22:32:26] <lotuseater> or in C code: int lr = 0.5;
[22:32:58] <phantomics> haha I might have a problem with excluding unicode...
[22:33:03] <lotuseater> and of course with no comment, so it's "obvious" lr means learning-rate in this context
[22:33:26] <lisp123_> phantomics: what programs do you build with unicode? math software? (I'm doing that)
[22:33:28] <lotuseater> phantomics: so April evolves then to JCL :D
[22:33:34] <tfeb> they're not bad habits: for a lsnguage (maths) designed to be handwritten, brevity matters a lot.
[22:33:51] <lotuseater> lisp123_: oh you would like April
[22:34:04] <_death> that said I do sometimes use greek letter names.. if there's a docstring explaining or it's deeply ingrained in the nomenclature of the subject matter then it's ok, I guess
[22:34:07] <phantomics> I write APL using unicode, also my APL compiler generates Lisp code that includes unicode
[22:34:09] <phoe> _death: and as for footnotes, I have no idea if I can solve it
[22:34:30] <ck_> Julia code is very fond of using single-character unicode names for a lot of things
[22:34:31] <phoe> especially regarding the fact that I'm sort of a footnote/Tufte-style sidenote person myself
[22:34:42] <phantomics> For example: APRIL-WORKSPACE-GRAPH-DEMO-SPACE-LEX::|ùïÜùïÉ‚àácjoin|
[22:34:52] <phoe> oh goodness
[22:35:08] <phantomics> And ùïä|a|
[22:35:29] <lotuseater> tfeb: and also matters MUCH having it good readable in handwritten sheets or typeset papers. "is this index i or j?" "is this a zeta or xi?"
[22:35:39] <lisp123_> lotuseater: Noice, starred and forked :D
[22:36:27] <lotuseater> lisp123_: when you wanna learn APL phantomics also advised me to the Dyalog Tutor or for use to learn April his long talk on YT
[22:36:48] <lotuseater> phoe: see it as another world/use-case
[22:37:04] <phantomics> The ùïä appears in front of most variables in compiled April, it's a reader macro that expands to a form that gets transformed by a macro to intern symbols in the proper workspace package
[22:37:45] <lotuseater> damn i hate that bug with the door bell
[22:37:59] <phantomics> The Dyalog tutorial is here: tutorial.dyalog.com/
[22:38:23] <lisp123_> lotuseater & phantomics - thanks <3
[22:40:16] <lotuseater> or from another point of view, in another reality the normal ASCII set could differ. it's like seeing complex numbers not the same as reals, they're just being different operated on but both types are of same "reality"
[22:41:00] <tfeb> lotuseater: I'm not sure what you're trying to say.  written maths is essentially a natural language,and it works pretty well.  long names for things would make it radically harder to write, and in in fact read (no-one wants some equation which is already split over three lines to require two pages).  (FWIW I write and read more maths than
[22:41:00] <tfeb> programs)
[22:41:19] <phantomics> Enjoy, lisp123_, let me know if you have questions
[22:42:02] <lotuseater> wasn't so important
[22:42:20] <_death> tfeb: right, I should've been more careful with that remark.. it's a bad habit when you wear the programmer hat.. I do sometimes use the character names when I implement something from a paper.. but often regret it later on if I didn't document what the actual meaning is
[22:43:17] <lotuseater> so it's best coming together and finding local optima
[22:44:06] <phantomics> I always found traditional math notation to be awful, there's no consistency, just a bunch of discordant standards for different things stuck together
[22:45:50] <_death> tfeb: even in a math paper, there is a balance between greek salad and concise math.. for that I often find papers before say 2000 much clearer than papers written after, at least in the subjects I'm interested in
[22:46:24] <tfeb> phantomics: exactly.  It's a natural language (or a bunch of related ones) and just like English it's an insane mess.  Programming languages should not be like mayhs
[22:47:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:48:16] <lisp123_> phantomics: thanks, will do
[22:48:16] <tfeb> _death: agree, it should be written to be readable
[22:48:56] <tfeb> To change subject ... does anyone (know anyone who)
[22:49:00] <phantomics> APL strikes a good balance for a programming language that also functions as mathematical notation, I'd rather read math concepts presented in Iverson notation than traditional notation
[22:49:33] <tfeb> ack ... does anyone know people who use series in anger?
[22:50:10] <tfeb> (As in, Richard Waters' series)
[22:51:01] <_death> I remember Joe Marshal writing about use of series in c.l.l
[22:52:21] <phantomics> I've wanted to try it for a while but (loop) seems to cover what I need for now
[22:52:35] <phantomics> Although (loop) is annoyingly unlispy
[22:52:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:54:01] <lotuseater> i hope in SICL the LOOP macro or FORMAT get extensible
[22:55:12] <tfeb> And also, if anyone knows a mail address for Raymond Toy could they either let me know it (not in the channel) or ask me for mine (likewise) and ask him to contact me about series
[22:55:41] <_death> maybe the commit log for the series repo
[22:55:47] <tfeb> latter option is perhaps safer
[22:55:59] *** Quits: zagura (~zagura@user/zagura) (Quit: Reconnecting)
[22:56:06] *** Joins: zagura (~zagura@user/zagura)
[22:56:25] <tfeb> _death: yes, I've mailed that address but last commit was 2013, not sure it is current
[22:57:30] <tfeb> reason forasking is that I'm trying to make it more installable and don't want to treadon toes
[22:57:59] * tfeb seriously hates on-screen tablet keyboards
[22:58:08] <_death> do you mean in the sense of (series::install)
[22:59:58] <_death> I also wrote some patch for series last year that you may find interesting, though I've not used series in anger :) https://gist.github.com/death/cec04d179e607657f409364442bf2a04
[23:00:58] <tfeb> _death: thanks
[23:01:37] <tfeb> now I will lose thisand have to ask again in a week
[23:02:32] <tfeb> _death: yes, but also the ASDF packaging is hugely old, the tests are hard to run
[23:03:30] *** Joins: jans (~Thunderbi@185.65.135.236)
[23:04:21] <tfeb> and in due course I'd like maybe to remember enough of it (my name is in the commit logs frrom about 1995...) to maybe make real improvements especially for modern implrmentations
[23:04:23] <_death> maybe also move from sourceforge ;)
[23:04:41] <tfeb> ehem, that too
[23:05:40] <tfeb> But I've spent enough of my life pissing other people off that I want to make sure Idon't this time
[23:06:06] <tfeb> and rtoy clearly put lots of work into it
[23:06:46] <yitzi> tfeb: rtoy also works on CMUCL and Maxima. He maybe around those repos/mailing lists.
[23:07:00] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[23:08:04] <Josh_2> phantomics: loop is very lispy in spirit :P
[23:08:17] <Josh_2> It embodies the spirit on Lisp thats for sure
[23:08:21] <Josh_2> of lisp*
[23:08:27] <phoe> Josh_2: you mean that people are constantly arguing over it?
[23:08:29] * phoe ducks
[23:08:41] <Josh_2> XD
[23:08:58] *** Joins: tfb (~tfb@88.98.95.237)
[23:09:49] <tfeb> yitzi: thanks, I will look there
[23:10:31] *** Joins: nature (~nature@mail.blazebone.com)
[23:11:40] * tfeb carefully avoids making comment about loop
[23:15:23] <tfeb> I have to go, but if anyone has pointers for series people send a message to tfb, who is me.
[23:15:31] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:17:49] <Josh_2> Is there a functioning youtube api library about?
[23:18:15] <Josh_2> I see one but it say sversion 0.2.1 2007-03-22
[23:18:27] <lotuseater> in python for sure :D
[23:18:32] <Josh_2> yeh nah
[23:18:52] <Josh_2> I would need to integrate it into my bot which is all written in CL :P
[23:19:01] <phoe> burgle some batteries
[23:19:15] <Josh_2> I'd be better off just making the API
[23:19:19] <Josh_2> making the library
[23:21:27] <Josh_2> Writing libraries for API's isn't very hard so shouldn't be a problem
[23:22:36] *** Joins: tyson2 (~user@toroon12-3096782363.sdsl.bell.ca)
[23:25:09] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:28:25] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[23:32:13] *** Quits: aidenw (~Aiden@156.57.146.89) (Remote host closed the connection)
[23:32:30] *** Joins: aidenw (~Aiden@156.57.146.89)
[23:32:52] *** Joins: hafat (~hafat@95.70.168.45)
[23:33:37] *** Quits: hafat (~hafat@95.70.168.45) (Quit: Leaving)
[23:34:26] *** Joins: hafat (~hafat@95.70.168.45)
[23:35:40] *** Parts: hafat (~hafat@95.70.168.45) ()
[23:36:03] *** Joins: Hafat (~hafat@95.70.168.45)
[23:36:15] *** Parts: Hafat (~hafat@95.70.168.45) ()
[23:38:06] *** Joins: Hafat (~hafat@95.70.168.45)
[23:42:51] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.2)
[23:47:26] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:48:41] *** Joins: voidengineer (~ultrables@186.11.99.94)
[23:51:18] *** Joins: srhm (~ascii@user/srhm)
[23:51:38] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[23:53:06] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Ping timeout: 256 seconds)
