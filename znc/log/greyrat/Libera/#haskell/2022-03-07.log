[00:00:21] *** Parts: iqubic (~iqubic@c-67-171-37-233.hsd1.wa.comcast.net) ()
[00:02:14] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[00:02:33] *** Joins: Pickchea (~private@user/pickchea)
[00:02:50] <lechner_> Hi, is there a replacement for Haskell Platform?
[00:03:01] <geekosaur> nope
[00:03:14] <lechner_> why was it needed?
[00:03:28] <geekosaur> because neither modern cabal nor stack existed
[00:03:51] <geekosaur> you could think of it as an early rendition of stackage
[00:04:06] <lechner_> it was that broad?
[00:04:22] <geekosaur> not quite as broad, but the ecosystem was also smaller back then
[00:04:41] <geekosaur> as it grew keeping HP up to date with the packages developers needed became more expensive
[00:05:08] <geekosaur> and it didn't offer multiple releases after the fashion of stackage LTSes
[00:05:23] *** alMalsamo is now known as lumberjack123
[00:06:08] <geekosaur> if you're building a package which needs older versions of things, with stack you can just point to the appropriate LTS; you didn't really have that option with HP
[00:06:17] *** Joins: cjb (~cjb@user/cjb)
[00:06:18] <lechner_> on that note, why did the stackage folks roll their own instead of providing merely a cabal file for Hackage?
[00:07:00] <geekosaur> stack uses (the library version of) cabal underneath, and at the time cabal wasn't quite up to it
[00:07:04] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 272 seconds)
[00:07:21] <geekosaur> there was active work on getting cabal up to speed but it wasn't ready yet
[00:08:14] <lechner_> Could (or should) stackage.org eventually go away?
[00:08:19] <geekosaur> also, stackage *does* provide cabal files if you know where to look. they still don't have quite as much functionality as stack LTSes though
[00:08:32] <geekosaur> probably not. you saw the discussion in #hackage
[00:08:44] <lechner_> "Packages in Stackage are not patched: all package changes occur upstream in Hackage."
[00:08:55] <lechner_> https://github.com/commercialhaskell/stackage/blob/master/MAINTAINERS.md#adding-a-package
[00:09:07] <geekosaur> right, if you need an update you switch to a later LTS or use an override in stack.yaml
[00:10:18] <geekosaur> LTSes are package sets tested to work together reliably, patching them instead of making a new LTS release is kinda making the same mistake HP did in trying to serve everyone's needs with one "current" release
[00:10:59] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[00:11:04] <lechner_> in debian, we sucessfully distinguish between files in a pool and what we then publish as a distribution (which ties the different versions together and is more commonly called a release)
[00:11:35] <lechner_> why is hackage not that "pool"?
[00:11:38] <geekosaur> right. but hackage is rolling-release as it were
[00:11:52] <lechner_> old versions are available
[00:12:34] <geekosaur> hackage is a master package index, updated as new packages are released on their maintainers' timetables. it doesn't and can't make an attempt to ensure sets of packages work together
[00:12:43] <geekosaur> stackage does that (and it's a lot of work)
[00:13:12] *** Joins: notzmv (~zmv@user/notzmv)
[00:13:42] <lechner_> i do not doubt it, but does stackage need to publish more than a map of the tested relationships?
[00:14:15] <hpc> hackage is like universe in ubuntu-speak
[00:14:22] <maerwald> lechner_: that's what it does
[00:14:25] <geekosaur> ^
[00:14:35] <lechner_> ok, sorry
[00:14:44] <hpc> all the versions of all the packages live there, and if you have say, ubuntu 1804, that's just a list of references into that
[00:14:48] <geekosaur> if you go digging under ~/.stack you will find that a stackage release is just such a map
[00:15:10] <maerwald> lechner_: that also has the side effect that stack doesn't need a dependency solver
[00:15:15] <geekosaur> and tht map points back to the appropriate hackage releases
[00:15:27] <lechner_> please allow me to rephrase: Sould 'stack' (the tool) eventually go away?
[00:15:52] <maerwald> lechner_: it's on life support anyway, although a new release is coming up soon
[00:16:20] <lechner_> maerwald: there are never alternative implementations for the same type?
[00:16:46] <geekosaur> that's a difficult question. as an interface to stackage it is useful, and stackage as a repository of tested sets of package versions is still quite useful
[00:16:55] <maerwald> lechner_: https://github.com/haskell/cabal/issues/7556
[00:17:12] <geekosaur> you'll find for example that, even if they use cabal instead of stack, a great many linux distributions start from stackage instead of hackage
[00:17:46] <geekosaur> to make their haskell packages
[00:18:01] <lechner_> i.e. debian
[00:19:28] <geekosaur> meanwhile the stackage maintainers are currently working to get aeson 2.0 integrated into a package set, and probably will integrate text 2.0 after that
[00:19:44] <lechner_> that's unicode?
[00:19:48] <geekosaur> which means working to get maintainers of dependent packages to catch up
[00:20:03] <geekosaur> the switch from utf16 to utf8 internally, yes
[00:20:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:20:57] <lechner_> speaking from experience, that is a very unfavorable position. how do the stackage folks motivate the upstream maintainers?
[00:21:17] *** Quits: tzh_ (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[00:21:35] <geekosaur> dropping their packages if they don't, which means they don't get seen or used by somewhere 50 and 70 percent of haskell developers any more
[00:21:36] *** Joins: tzh_ (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[00:21:45] <geekosaur> *somewhere between
[00:21:48] <lechner_> the whip
[00:23:10] <geekosaur> (what poercentage depends on the sector: it seems to be around 50-50 here in #haskell, but among commercial users it'scloser to 70%)
[00:23:17] *** Quits: tzh_ (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Remote host closed the connection)
[00:23:35] *** Joins: tzh_ (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[00:23:43] <lechner_> maybe debian and stackage should merge. debian has the infrastructure to test their sets, and also ships single versions
[00:24:03] <maerwald> lechner_: stackage is more ad-hoc than debian
[00:24:07] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[00:24:13] <maerwald> less process etc.
[00:24:15] <lechner_> that's where i come in
[00:24:23] <maerwald> most people don't know what distro work is like
[00:24:32] <sclv> i mean stackage just provides some subset of stuff that's all known to build together
[00:24:43] * geekosaur has been there. it's a shitload of work
[00:24:47] *** Quits: tzh_ (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Remote host closed the connection)
[00:24:47] <sclv> so nix and other things start with a stackage release as a baseline
[00:24:53] <lechner_> it's exactly what i would like to do
[00:25:09] *** Joins: tzh_ (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[00:25:15] <geekosaur> haven't worked directly on a mainstream distro but did maintain a university internal distribution for a decade. that was bad enough even with alimited userbase
[00:25:45] <lechner_> geekosaur: i would deputize the stackage folks
[00:25:58] <maerwald> lechner_: the right person to talk to is snoyman, probably
[00:26:19] <lechner_> well, he is way above my pay grade
[00:26:40] <lechner_> it was just an idea anyway
[00:26:47] <lechner_> what os does he use?
[00:27:18] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[00:27:22] <sclv> lechner_: i'm not sure what exactly you're proposing or what the advantage is?
[00:27:41] <sclv> would it be fundamentally about helping stackage by letting it leverage debian's infrastructure?
[00:28:17] <lechner_> that would possibly be the advantage for them, yes
[00:28:24] <maerwald> I'd imagine that could create more coordination/communication issues than is worth for the stackage people
[00:29:14] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 272 seconds)
[00:29:42] <maerwald> it's a relatively small project compared to a distro and the investment isn't as high
[00:30:23] <lechner_> twenty-three release architectures!
[00:30:56] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[00:31:31] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:c486:dc7e:8ce4:e6c9) (Read error: Connection reset by peer)
[00:31:40] <geekosaur> right, but you'll note stackage doesn't do per-architecture releases at all
[00:31:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:31:56] <sclv> most haskell code (except for bindings) doesn't really care about arch. if it builds on one arch it'll build on any arch
[00:31:56] <geekosaur> \which means a different set of tradeoffs. (also note that stackage thereby supports windows as well)
[00:31:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[00:32:19] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 256 seconds)
[00:32:42] <lechner_> neither does debian for unstable; only testing and stable release require advancement on all ports
[00:33:07] <geekosaur> stackage doesn't consider ports at all
[00:33:20] *** Joins: cynomys (~cynomys@user/cynomys)
[00:33:46] *** Quits: tzh_ (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[00:33:52] <lechner_> it may find bugs
[00:34:26] <maerwald> anything that's not C/C++ doesn't work too well on traditional package managers... some distros managed to get somewhat reasonable python support (which is already hard), but even less managed to get reasonable Haskell support
[00:34:35] <maerwald> and I think it's not worth it (wrt libraries at least)
[00:35:10] <geekosaur> especially since stack and cabal both are prone to ignore distribution libraries and use their own builds
[00:35:27] <geekosaur> thing is, this isn't actually that uncommon among languages other than C/C++
[00:35:36] <geekosaur> consider virtualenv and friends for python
[00:36:26] <geekosaur> developers often need to be more flexiblethan an OSdistribution can reasonably be
[00:38:19] <lechner_> that my be a myth. there is also a manpower issue.
[00:38:19] <maerwald> geekosaur: I dunno, I just got a bug report on ghcup issue tracker saying that it's non-idiomatic and *only* the package manager should install software xD
[00:40:11] <geekosaur> someone'sabout 2 decades behind the times
[00:40:24] <maerwald> "Just write normal packages. It’s much easier than this ugly hack."
[00:40:49] <dolio> Why aren't they?
[00:40:55] <maerwald> so at least there are different opinions :D
[00:40:56] <sclv> maerwald: respond "patches welcome"
[00:40:57] *** Joins: cyphase (~cyphase@user/cyphase)
[00:41:02] <geekosaur> and has never written a normal package
[00:41:22] <geekosaur> or at least hasn't actually maintained it afterward
[00:41:47] <dolio> It doesn't even make sense to be a patch. It's just a completely different project.
[00:42:02] <sclv> thats-the-joke.gif
[00:42:16] <dolio> Oh sorry. :)
[00:42:45] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[00:43:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ddb1:758a:abd2:2050) (Remote host closed the connection)
[00:43:51] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[00:45:14] <lechner_> Hi, how can I figure out which of these packages come with ghc, please?    https://salsa.debian.org/haskell-team/hackage-tracker/-/blob/history/hackage-tracker.cabal#L25-34
[00:45:54] <sclv> https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history
[00:46:09] <lechner_> or alternative, what does 'installed' mean here?    https://www.stackage.org/lts-18.26/cabal.config
[00:46:42] <sclv> installed means "whatever version is already installed in the pkgdb"
[00:47:05] <maerwald> lechner_: `ghc-pkg list` on a "freshly installed GHC" also shows you the prepackaged libs.
[00:47:16] <geekosaur> but for the purposes of stackage means that those packages cannot be upgraded
[00:47:36] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[00:47:40] <geekosaur> which I believe only applies tobase, ghc, ghc-prim, and template-haskell
[00:47:51] *** Joins: acidjnk (~acidjnk@p200300d0c70d8c985c6dbece2fe5bbc5.dip0.t-ipconnect.de)
[00:47:55] <geekosaur> because they're wired into the compiler
[00:48:52] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 272 seconds)
[00:48:53] <lechner_> because ghc ships what it uses itself?
[00:48:57] <sclv> stackage constrains a number of packages to "installed"
[00:49:20] <dolio> Does debian have a methodology for having multiple version sets for packages? Because that's what people do with stackage.
[00:49:24] <sclv> _however_ only some subset of those (a geeokosaur listed) are the ones that are actually non-upgradable
[00:49:30] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[00:49:35] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:49:48] <dolio> One project might depend on a set with foo-X.Y, and another might depend on one with foo-X.Z.
[00:50:30] <dolio> And when a new set is released, not all projects upgrade at the same rate.
[00:50:36] <lechner_> dolio: we provide fixed version sets based on their stability. we call them releases
[00:50:48] <lechner_> but we have backports
[00:51:13] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[00:51:24] <lechner_> as noted, that may not be flexible enough for development but it is great if you distribute
[00:51:36] <dolio> Yeah, but stack and cabal are for development.
[00:52:06] <lechner_> yes, but your work product may be intended for distribution
[00:52:53] <dolio> If someone were just using a Haskell program I might recommend that they get it from a distribution (unless it's out of date or something).
[00:53:01] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[00:53:59] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[00:54:13] <lechner_> Debian offers a lot more. you can configure graphically, or install system services and timers
[00:54:18] <lechner_> systemd
[00:54:23] <sclv> sure. nobody's saying this stuff replaces a distro
[00:54:25] <sclv> we all know that
[00:54:52] <sclv> we're just saying that devs want one workflow, and finished executables can then be built and packaged in a distribution in a different workflow
[00:54:54] <sclv> with different tools
[00:54:58] <sclv> and... its fine
[00:55:11] <lechner_> sorry, we were just chatting. it was not a pitch
[00:55:18] <maerwald> lechner_: most projects distribute either fully static haskell binaries (linked via musl on alpine) or use complicated nix configurations
[00:55:35] <sclv> i mean except for actual widely used open source haskell apps like pandoc
[00:55:35] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[00:55:37] <dolio> Yeah, distros are great and valuable. They're just not designed to be build tools. And that's good, because they'd be a lot worse at their job then. :)
[00:55:38] <sclv> which distributions package just fine
[00:56:04] <lechner_> On Linode, Debian deploys in three seconds
[00:56:13] <lechner_> custom repo, and done
[00:56:26] <lechner_> no gpl required
[00:56:55] <lechner_> we are working on musl
[00:58:42] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 256 seconds)
[00:59:30] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[00:59:34] <lechner_> but i'll stop now. no need to antagonize you all. it just seemed like a synergy to me
[01:00:51] <geekosaur> you're not antagonizing, it's just that whilethere are some synergies, there are also a lot of differences
[01:02:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ddb1:758a:abd2:2050)
[01:02:29] <lechner_> i am always the most positive guy in the room
[01:03:22] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[01:03:34] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[01:03:48] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:05:43] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[01:08:20] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[01:08:39] *** Quits: rond_ (~rond_@90.251.109.52) (Quit: Client closed)
[01:12:16] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:48] *** Joins: dcoutts__ (~duncan@host86-144-78-249.range86-144.btcentralplus.com)
[01:15:24] <maerwald> new stack release is out
[01:18:29] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[01:18:51] *** Joins: pavonia (~user@user/siracusa)
[01:19:27] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:21:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[01:25:23] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:1c84:d4a:1e89:fb0b) (Quit: bye)
[01:25:42] *** Joins: pilipilihoho (~pilipilih@d154-20-227-112.bchsia.telus.net)
[01:26:08] *** Joins: bahamas (~lucian@84.232.140.52)
[01:26:55] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:a9b4:7766:3796:4ab1)
[01:28:08] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[01:28:25] *** Quits: pilipilihoho (~pilipilih@d154-20-227-112.bchsia.telus.net) (Client Quit)
[01:28:38] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[01:29:14] *** Joins: son0p (~ff@181.136.122.143)
[01:29:25] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:29:44] <ProfSimm> How to iterate the items in a set without suggesting a specific order of the items?
[01:31:00] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[01:33:16] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[01:33:16] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[01:34:53] <geekosaur> sets are inherently ordered
[01:35:10] <geekosaur> you may want a HashSet instead
[01:35:20] <geekosaur> look at the unordered-containers package
[01:36:06] <ProfSimm> geekosaur: how do we iterate unordered containers?
[01:36:18] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:36:51] <geekosaur> technically they are ordered but noassumption may be made about the ordering
[01:37:14] <geekosaur> (in this case it's underlain by a hash table and the ordering depends on the hash function for the type, which is opaque)
[01:37:59] <geekosaur> note that it is not a cryptographic hash, nor randomized
[01:38:37] *** Quits: werneta_ (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[01:38:46] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[01:38:51] <ProfSimm> geekosaur: I'm trying to think of a way to reveal what items are in a set, without revealing any order, random or not
[01:38:59] <geekosaur> (in particular, while you aren't allowed ot rely on this, last I checked the hash function for an Int was modulus)
[01:39:26] <geekosaur> think really hard
[01:39:33] <ProfSimm> geekosaur: I am. Not helping.
[01:40:07] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:40:31] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[01:40:42] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:a9b4:7766:3796:4ab1) (Quit: bye)
[01:42:55] <geekosaur> the only way I can think of is a wrapper which randomizes the element order you get from the traversal
[01:43:17] <geekosaur> if it's really important to you then you'll want a crypto-strength random algorithm
[01:43:52] <geekosaur> because, no matter what, there will internally be *some* kind of order or it would be impossible to retrieve items from the set at all
[01:44:16] <ProfSimm> geekosaur: I'm thinking maybe some way to express a "parallel iterator" where it's impossible to discern in which order the handler of each item was executed
[01:45:23] *** Quits: fendor (~fendor@91.141.40.111.wireless.dyn.drei.com) (Remote host closed the connection)
[01:46:59] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[01:47:00] <geekosaur> that iis functionally the same as, but probably slower than, what I suggested
[01:48:45] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[01:48:49] *** Quits: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Remote host closed the connection)
[01:51:58] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[01:52:04] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:6087:4839:e849:d145)
[01:53:40] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[01:55:18] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Quit: Leaving)
[01:55:26] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[01:55:27] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:00:08] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[02:01:06] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:01:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[02:06:27] <jackdk> ProfSimm: consider the story of Sussman, Minsky, and the Tic-Tac-Toe neural net: https://foldoc.org/AI+koan
[02:08:10] <ProfSimm> geekosaur: randomness is not free either
[02:08:32] <ProfSimm> geekosaur: parallel execution can be simulated, just isolate the operator from the environment
[02:08:54] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[02:10:03] <ProfSimm> jackdk: I was enlightened, but the lesson seems to be "f*** you, there's always an order"
[02:10:16] <geekosaur> which is what I already told you
[02:10:29] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[02:10:40] <ProfSimm> geekosaur: I refuse!
[02:11:11] <ProfSimm> geekosaur: I'm thinking more along the lines of, let's take all set values, and xor them together, but now how to disentangle that :P
[02:11:18] <ski> the order can matter sometimes, and sometimes not matter
[02:11:45] <ProfSimm> ski: I want to ensure it's impossible to derive any order while getting the set contents, whether it matters or not
[02:12:01] <ProfSimm> ski: an API where no order can be derived, no matter significant or not
[02:12:13] *** Joins: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
[02:12:13] <lechner_> is that possible without randomization?
[02:12:37] <ProfSimm> We could aggregate the values using commutative operations, like + and xor, and so on, and provide that to the user.
[02:12:44] <ProfSimm> And somehow they should disentangle it
[02:12:46] <ProfSimm> :P
[02:13:05] <ProfSimm> So what commutative operations can there be that work for arbitrary symbols
[02:13:30] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[02:13:42] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:13:44] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 272 seconds)
[02:13:45] <ski> take unordered pairs over some type `A'. we can represent an unordered pair `{|x,y|}' by an ordered pair `(x,y)', such that, whenever you're trying to use (take apart) the unordered pair, with some function `f', so that you're computing `f (x,y)', you're only allowed to do this for a commutative `f', iow where `f (x,y) = f (y,x)'. that way, the representation of the unordered pair could involve a particular 
[02:13:46] <ProfSimm> We can return all values of the set at once. And when you apply some argument to it, it's applies to all items in the set at once
[02:13:51] <ski> ordering, but you're not allowed to depend on that ordering
[02:13:58] <jackdk> ProfSimm: Exactly.
[02:14:09] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[02:14:29] *** Joins: alp (~alp@user/alp)
[02:14:59] <ski> you can express this (`f' being commutative) with dependent types
[02:15:19] <ProfSimm> ski, gears are turning slowly but I'll probably fail you here
[02:15:58] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[02:16:07] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:16:08] <ski> (you should also make sure you distinguish between material sets and structural sets)
[02:16:12] <ProfSimm> ski: so the result of "f" should be the same regardless of argument order. OK but how would that function itself work
[02:16:28] <ski> that's up to the user of the unordered pair
[02:17:17] <ProfSimm> ski: I'm thinking what if the receiver of the set applies from a set of arbitrary "discriminators" until they get one result after a certain distriminator. Only then they can read the set value
[02:17:33] <ProfSimm> ski: this way the caller determines the order of reading, not the set or its implementation
[02:17:35] <ski> btw, one way to represent a (finite) multiset/bag of numbers is as a polynomial, that have those numbers as roots
[02:17:43] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:6087:4839:e849:d145) (Quit: bye)
[02:18:05] <ProfSimm> ah
[02:18:18] <ski> no idea what you mean by those "discriminators"
[02:18:20] <ProfSimm> yeah
[02:18:55] <ProfSimm> ski: filters of some sort, that would filter the set down and down until we get one value.
[02:19:07] <ProfSimm> ski: and do so deterministically and regardless of the order of the set
[02:19:46] * ski stares blankly
[02:19:49] <lechner_> where is the "regardless" coming from?
[02:20:04] <romesrf> can anyone point me to literature on the `newtype`
[02:20:07] <romesrf> is it zero cost?
[02:20:40] <ProfSimm> lechner_: the regardless is coming from it being like a filter operation on every item of the set, not processing them in order
[02:21:35] <ski> romesrf : given `newtype Foo = MkFoo Bar', `MkFoo myBar' is represented in the same way as `myBar', yes
[02:21:58] <romesrf> ski: truly amazing :)
[02:21:58] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[02:22:23] <ski> this means that `MkFoo' is strict (iow `MkFoo _|_ = _|_'), is a no-op, and matching on it is also a no-op
[02:22:35] <lechner_> ProfSimm: does a filter impose an order?
[02:23:01] <justsomeguy> What is the cost of creating a new datatype using the data keyword, anywys? Does it exist in memory, even if it isn't used?
[02:23:05] <ProfSimm> ski: in essense it's a function, that when given a set, can assign a cost to each value in the set, order it by that cost, and pick the item with highest cost
[02:23:28] <ProfSimm> ski: there "cost" is not anything meaningful, except that it should be computable from each individual item
[02:23:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:23:37] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[02:23:51] <ProfSimm> lechner_: it doesn't
[02:24:16] <lechner_> you just wrote it orders by cost
[02:24:36] <ski> (as opposed to `data Foo = MkFoo !Bar', where `MkFoo' is also strict, but matching on it is not a no-op)
[02:24:37] <ProfSimm> My problem is not an order in general. It's an order that comes from the set
[02:25:01] <geekosaur> justsomeguy, just declaring it costsonly some memory during compilation, and an info table at runtime which tells the garbage collector how to deal with any values of that type it finds
[02:25:13] <geekosaur> the info table is small and shared among all valuesof that type
[02:25:33] <ProfSimm> lechner_: let's imagine we have two parties here. Set and Caller (working with the set). I want the Set to reveal its members, but without any specific order. Then the Caller has to sort them for itself to iterate them,
[02:25:39] <ski> ProfSimm : what is a cost ?
[02:25:44] <ProfSimm> ski: some number
[02:25:52] <ski> integer ?
[02:25:55] <ski> real number ?
[02:26:17] <lechner_> ProfSimm: and do the relative costs not relate directly to the composition of each set?
[02:26:22] <ProfSimm> ski: well the odds of two items with the same cost should be basically 0. so doesn't matter if it's int or float, but it should be large enough
[02:26:42] <ski> ProfSimm : usually it'd be preferable (more efficient) not to insist on ordering
[02:26:52] <ProfSimm> lechner_: it's an absolute cost, not relative
[02:26:59] *** Joins: jinsun__ (~jinsun@user/jinsun)
[02:27:25] <ProfSimm> ski:  yes but I have no way for a set to express its content without doing it in some order.
[02:27:45] <ski> why not what i sketched above ?
[02:28:18] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 272 seconds)
[02:28:21] <ski> provide the elements in some order, while forbidding the consumer from depending on the particular ordering
[02:28:40] <ProfSimm> ski:  well, the end goal is the consumer can understand what items are in the set
[02:28:46] <ski> ProfSimm : btw, real numbers do not have decidable ordering
[02:29:12] <ProfSimm> ski: let's make it a 128-bit hash integer then
[02:30:30] *** Quits: jinsun (~jinsun@user/jinsun) (Ping timeout: 256 seconds)
[02:33:48] *** Quits: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se) (Ping timeout: 240 seconds)
[02:35:35] <ProfSimm> ski when you think of something, you also recall similar things. This implies sets are ordered in your mind
[02:35:48] <ProfSimm> ski: but the same set will have a different order in someone else's mind
[02:36:07] <ProfSimm> ski: this is similar to what I'm trying to replicate here. The consumer sets the order, not the set.
[02:36:42] <ski> what you just said would seem to imply to me the producer, not the consumer, setting the order
[02:37:09] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[02:37:26] <ski> (the individual mind that's procuring the elements)
[02:37:31] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Remote host closed the connection)
[02:37:37] <ProfSimm> ski: the producer thinks of three fruit kinds. It wants to know how you'd order these fruits, so it wants to tell you the three fruits, but without biasing you by giving them in some order.
[02:37:43] <ProfSimm> ski: that's the problem in a nutshell
[02:37:58] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[02:38:14] *** Joins: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se)
[02:38:34] <ski> the solution is still the same, it seems to me
[02:38:41] <ProfSimm> ski:  the consumer can probably ask questions like "do you have a fruit that's yellow" or "tennis ball sizes"
[02:39:02] <ProfSimm> ski: and the producer can answer yes, or no. Or when exactly one fruit matches, it can give you the name of the fruit
[02:40:11] <ProfSimm> ski: so the producer can provide three answers:  "0 items match your description"  or "more than 1 items match your description"  or "exactly 1 item matches: pear"
[02:40:30] <ProfSimm> ski: this would not reveal producer's internal order
[02:40:42] <ProfSimm> ski: how to make the questions efficient?
[02:41:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:c731:e273:a007:5879) (Ping timeout: 250 seconds)
[02:41:16] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[02:41:31] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:43:10] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:8911:efbc:6ba0:c242)
[02:43:16] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[02:43:42] <sclv> reading the scrollback I think you would want `foldUnordered :: CommutativeMonoid m => (a -> m) -> UnorderedSet a -> m`
[02:44:08] <sclv> but of course this relies on people only making valid instances for the commutativemonoid typecleass
[02:44:32] <ski> ProfSimm : what if you have a set for which it's not known whether it has one or two elements ?
[02:44:50] <ProfSimm> sclv: I'll explore that thanks
[02:45:01] <ski> say, it has `0' as an element, and it has a number `x' as an element. and `x' is known to be zero if and only if Goldbach's conjecture is true
[02:45:11] <ProfSimm> ski: out of scope. We know how many items are in the set, that's commutative to the order.
[02:45:35] <ProfSimm> ski: interesting suggestion, but out of scope
[02:45:50] <ski> so, in that case the producer can't answer the question "how many elements are non-zero ?"
[02:46:13] <sclv> the monoid-subclasses lib has a commutativemonoid type fwiw
[02:46:57] <ski> "We know how many items are in the set" -- how ?
[02:47:45] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[02:47:45] <ProfSimm> ski: the set knows
[02:48:45] <ski> i was just pointing out a set where that isn't the case
[02:49:26] <ski> "the set of all odd perfect numbers" is another example. noone knows whether that's non-empty
[02:54:45] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Quit: Leaving)
[02:55:03] <ProfSimm> ski: we're not talking about abstract sets.
[02:55:21] <ProfSimm> ski: think of it as literally a list of values whose interface is a set.
[02:55:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:8911:efbc:6ba0:c242) (Ping timeout: 250 seconds)
[02:56:44] <ski> so what if `[0,x]' is such a list of computable reals ?
[02:57:06] <ProfSimm> x is not a real
[02:57:08] <ski> > showCReal 49 pi
[02:57:09] <lambdabot>  "3.1415926535897932384626433832795028841971693993751"
[02:57:11] <ProfSimm> it's a letter :P
[02:57:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ddb1:758a:abd2:2050) (Remote host closed the connection)
[02:57:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:7f03:8b0:a81c:56d7)
[02:58:31] <ski> `x' could be defined as the series (infinite sum) of all terms `a_i * 2^(-i)', where `i' ranges over all natural numbers and `a_i' is `0' iff all even natural numbers less than `i' can be written as a sum of two primes, and `1' otherwise
[02:59:31] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d9d2:7af1:5c0a:c9d9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:59:46] <monochrom> Haha GHC 9.2.2 is "not" available :)
[02:59:48] <geekosaur> I'm confused. the discussion began with Set and HashSet, not abstract sets or concrete sets with abstract values
[02:59:59] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:d9d2:7af1:5c0a:c9d9)
[03:00:11] <geekosaur> you're around the third one to notice that one :)
[03:00:34] *** Joins: son0p (~ff@181.136.122.143)
[03:00:52] <monochrom> But it's good news. Does it mean that everything will work out of the box on M1?
[03:01:00] <maerwald> ahaha
[03:01:03] <ski> geekosaur : well, ProfSimm's been asking about sets in ##math and ##programming as well, for some days
[03:02:02] <ProfSimm> ski: I think Set/HashSet is a closer match than uncalculable value x in a set :P
[03:02:18] <ski> `x' is computable
[03:02:26] <ProfSimm> So let's compute it then
[03:02:27] <ProfSimm> :/
[03:02:50] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[03:03:03] <ski> you can compute it to arbitrary precision
[03:03:17] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[03:04:10] <unit73e> is it a good idea to have 'Data.Binary.Get (Either String [Item])' as a return type instead of 'Data.Binary.Get [Item]' or not really?
[03:04:19] <unit73e> because with either I can get a fail message
[03:04:29] <unit73e> but I guess Get does implement fail properly
[03:04:37] <ski> to compute the `i'th bit of `x', it's enough to have computed all prime numbers up to `i'
[03:04:40] <Axman6> do you have a reason for wanting to have thta type?
[03:04:49] <monochrom> Or even ExceptT String Get [Item]?
[03:05:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-543d-a065-e6d9-3062.res6.spectrum.com) (Remote host closed the connection)
[03:05:11] <unit73e> monochrom, hum that might be a good idea
[03:05:36] <unit73e> thanks
[03:05:41] <Axman6> <spiderman meme> ExceptT String Get [Item] -> <- Get (Either String [Item] </spiderman meme>
[03:05:59] <unit73e> lol
[03:06:07] <unit73e> I ugess
[03:06:12] <unit73e> guess*
[03:06:28] <Axman6> @unmtl ExceptT String Get [Item]
[03:06:28] <lambdabot> Get (Either String [Item])
[03:06:56] <unit73e> what's a unmtl?
[03:06:56] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[03:07:00] <monochrom> Hrm, runGetOrFail exists and probably wants you to use fail.
[03:07:09] <unit73e> yes that is true monochrom 
[03:07:28] <unit73e> might as well use what already is there...
[03:07:37] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 240 seconds)
[03:08:13] <unit73e> I must be overthinking... I'll just use what Get wants and change later if necessary
[03:08:18] <unit73e> so fail it is
[03:08:43] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[03:08:44] <unit73e> I was using guard as suggested before but it doesn't give me a message
[03:09:54] *** Quits: jrm (~jrm@156.34.173.250) (Ping timeout: 260 seconds)
[03:09:58] <dons> anyone know a good way to ask cabal for the cached build dir to a local exe? better than e.g. cabal run exe:$(MY_EXE) -v2 2>/dev/null | sed -n 's/Running: \(.*\)/\1/p'
[03:10:22] <geekosaur> did you want cabal find-bin?
[03:10:34] <sclv> list-bin even
[03:10:40] <geekosaur> sorry, that
[03:10:45] <dons> sounds plausible!
[03:11:45] <dons> find-bin is the one. 
[03:11:56] <unit73e> I'll just use "when Bool (fail "smth")" for now. thanks
[03:12:14] <dons> cabal --help | grep find | wc -l
[03:12:14] <dons> 0
[03:12:27] <dons> i wonder if the help is missing something
[03:13:07] <sclv> its list-bin, not find-bin
[03:13:46] <dons> lol. cabal --help | grep list update            Updates list of known packages. list              List packages matching a search string. list-bin          List the path to a single executable. v2-update         Updates list of known packages.
[03:13:50] <dons> yes. 
[03:14:54] <dons> (caching the path to an exe in a build saves 900ms per invocation compared to cabal run exe:..
[03:15:04] *** Joins: jrm (~jrm@156.34.173.250)
[03:17:20] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[03:22:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ddb1:758a:abd2:2050)
[03:23:20] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[03:24:08] *** Joins: Guest|56 (~Guest|56@212.201.44.244)
[03:24:19] *** Quits: Guest|56 (~Guest|56@212.201.44.244) (Client Quit)
[03:25:47] *** Joins: pilipilihoho (~pilipilih@d154-20-227-112.bchsia.telus.net)
[03:26:05] *** Quits: pilipilihoho (~pilipilih@d154-20-227-112.bchsia.telus.net) (Changing host)
[03:26:05] *** Joins: pilipilihoho (~pilipilih@user/pilipilihoho)
[03:26:31] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:d0ab:3f36:53e6:70a6)
[03:27:36] <shapr> whoa, dons?!
[03:27:36] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:d0ab:3f36:53e6:70a6) (Client Quit)
[03:27:42] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:d0ab:3f36:53e6:70a6)
[03:27:49] *** Quits: pilipilihoho (~pilipilih@user/pilipilihoho) (Client Quit)
[03:28:09] *** Joins: pilipilihoho (~pilipilih@user/pilipilihoho)
[03:28:19] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:28:45] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:2cc2:d132:f33f:4fd4)
[03:29:11] <shapr> long time no see!
[03:29:12] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:32:36] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:d0ab:3f36:53e6:70a6) (Ping timeout: 240 seconds)
[03:32:43] <ski> shapr : since a couple of days :)
[03:32:53] <shapr> wow, I'm out of the loop
[03:34:33] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[03:38:07] *** InstX1 is now known as Inst
[03:41:20] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:42:02] *** Quits: acidjnk (~acidjnk@p200300d0c70d8c985c6dbece2fe5bbc5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:42:39] *** Joins: wroathe (~wroathe@user/wroathe)
[03:44:33] *** Joins: shlevy[m] (~shlevymat@2001:470:69fc:105::1:d3b1)
[03:45:37] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::45ee) (Ping timeout: 240 seconds)
[03:46:55] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[03:46:55] <shlevy[m]> Would it be hard to allow visible dependent quantifiers in types of terms but only allow usage of type variables and type-level constants at the call-site? Basically anything you can currently do with TypeApplications but without requiring the `@`?
[03:47:23] *** Joins: vicfred (~vicfred@user/vicfred)
[03:48:06] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[03:50:04] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: Lost terminal)
[03:51:11] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 245 seconds)
[03:53:38] *** Quits: pilipilihoho (~pilipilih@user/pilipilihoho) (Quit: See ya!)
[03:55:55] <geekosaur> I believe that's due in ghc 9.4
[03:56:02] <geekosaur> forall a -> ...
[03:56:18] <shlevy[m]> geekosaur: We already have that in kinds
[03:56:33] <shlevy[m]> Is there a relaxation to allow it in the type of a term coming?
[03:57:02] <geekosaur> you have it in kinds because there's nodifference between a kind and a type (see TypeInType)
[03:57:36] <geekosaur> 9.4 adds using types as values: given `x :: forall a -> Int -> Int` you can have `x Int 3`
[03:57:47] <geekosaur> (note the arrow instead of `.`)
[03:58:39] <shlevy[m]> geekosaur: My point is we *already* allow the arrow instead of the dot in the types of types, i.e. in kinds. That's why I wanted to confirm that we have something new coming in 9.4 specifically for types of terms
[04:01:54] <shlevy[m]> This works:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/2793fe47d70f95bd4f0b04856db57c5ab892b0d0)
[04:02:03] <shlevy[m]> s///
[04:02:51] <shlevy[m]> This fails:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/5bfbb4cc489d39d6453229737436433bfeb9f733)
[04:03:39] <geekosaur> I said 9.4
[04:03:48] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[04:03:49] <geekosaur> 9.2.2 was released about an hour ago
[04:04:22] <geekosaur> also, as best I can tell you are asking if Dependent Haskell exists yet. the answer is "no, and it won't for some time yet"
[04:04:33] <shlevy[m]> No, this is not dependent haskell
[04:04:53] <shlevy[m]> As I said, it would be limited to type variables and constants, just like TypeApplications
[04:05:15] <shlevy[m]> This is no more expressive than current invisible dependent quantification except in terms of ergonomics
[04:05:34] <shlevy[m]> Do you have a link for the 9.4 change?
[04:06:20] <geekosaur> https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0081-forall-arrow.rst
[04:06:53] <shlevy[m]> geekosaur: Again, *this is already in 9.2*. Check my first example which does compile, it has the forall arrow
[04:07:13] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[04:07:33] <geekosaur> okay, then I missed something. I had understood it to be a9.4change
[04:08:08] <geekosaur> you probably want to talk to eisenberg about what you're asking
[04:10:55] *** Joins: Goodbye_Vincent (~Goodbye_V@freakshells.net)
[04:12:10] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 272 seconds)
[04:17:27] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[04:17:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:17:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:17:44] *** Joins: wroathe (~wroathe@user/wroathe)
[04:29:35] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:d9d2:7af1:5c0a:c9d9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:32:26] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[04:33:09] *** Quits: boletales (~boletales@p98076-ipoefx.ipoe.ocn.ne.jp) (Ping timeout: 250 seconds)
[04:34:16] *** Joins: boletales (~boletales@109.25.3.110.ap.yournet.ne.jp)
[04:34:52] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:35:55] *** Joins: boletales_ (~boletales@p98076-ipoefx.ipoe.ocn.ne.jp)
[04:38:49] *** Quits: boletales (~boletales@109.25.3.110.ap.yournet.ne.jp) (Ping timeout: 256 seconds)
[04:40:45] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:14] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ddb1:758a:abd2:2050) (Remote host closed the connection)
[04:43:49] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[04:46:51] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:51:24] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[04:52:07] *** Joins: vysn (~vysn@user/vysn)
[04:54:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:55:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:56:08] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:58:44] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:2cc2:d132:f33f:4fd4) (Read error: Connection reset by peer)
[05:03:01] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:03:22] *** Quits: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:03:56] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:e499:f12d:32a8:5255)
[05:04:43] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[05:07:08] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:07:28] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:08:33] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[05:09:38] *** Joins: notzmv (~zmv@user/notzmv)
[05:11:18] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:11:30] *** Joins: machinedgod (~machinedg@24.105.81.50)
[05:11:38] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:12:49] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-1c52-7a09-75d4-5be2.res6.spectrum.com)
[05:12:56] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:64f2:c4d3:2ec3:ac49)
[05:13:08] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:14:49] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ddb1:758a:abd2:2050)
[05:20:10] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:20:29] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:22:10] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:22:18] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:64f2:c4d3:2ec3:ac49) (Quit: Leaving)
[05:22:32] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:24:13] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:24:33] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:26:27] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:26:44] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:26:48] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:31:01] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:31:16] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 256 seconds)
[05:31:21] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:33:05] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:33:22] *** Joins: Batzy_ (~quassel@user/batzy)
[05:33:25] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:36:37] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 256 seconds)
[05:39:12] *** Quits: ishutin (~ishutin@92-249-141-199.pool.digikabel.hu) (Ping timeout: 256 seconds)
[05:40:49] *** Joins: ishutin (~ishutin@92-249-150-134.static.digikabel.hu)
[05:43:58] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:44:20] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:46:01] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:46:22] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:47:47] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[05:49:11] *** Joins: hololeap (~hololeap@user/hololeap)
[05:52:14] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[05:54:44] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:55:04] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[05:55:25] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[05:58:42] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[05:59:01] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:00:42] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[06:01:00] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:01:19] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[06:01:40] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[06:02:19] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Max SendQ exceeded)
[06:04:22] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[06:07:12] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[06:07:30] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:07:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:08:49] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[06:10:12] *** Joins: bahamas (~lucian@84.232.140.52)
[06:10:19] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Read error: Connection reset by peer)
[06:11:05] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[06:12:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:15:02] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[06:16:32] *** Quits: aeka (~aeka@user/hiruji) (Ping timeout: 240 seconds)
[06:17:07] *** Joins: aeka (~aeka@user/hiruji)
[06:20:09] *** Quits: aeka (~aeka@user/hiruji) (Client Quit)
[06:20:36] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[06:20:45] *** Joins: aeka (~aeka@user/hiruji)
[06:22:30] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[06:22:51] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:25:17] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:26:36] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:28:44] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[06:29:06] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:31:24] *** Joins: mbuf (~Shakthi@110.225.240.104)
[06:33:16] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[06:33:36] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:33:53] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:39:31] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[06:40:11] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:41:21] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[06:42:40] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[06:47:41] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:48:07] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[06:50:50] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[06:51:19] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:53:28] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[06:53:47] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[06:53:48] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[06:54:57] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[06:57:08] *** Joins: Guest|9 (~Guest|9@fixed-187-190-165-171.totalplay.net)
[06:59:04] <dons> oh man got a 80cm monitor. what a game changer.
[06:59:33] <dolio> What did you have before?
[06:59:47] <dons> oh, i've been on the road for a few months, so living off laptop screens.
[07:00:03] <dolio> Oh yeah. Much nicer than that. :)
[07:00:05] <dons> mostly on 16" macbook 
[07:02:10] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:02:33] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:02:47] <dons> so at 32"/80cm you can comfortably have 3x2 124col terms in a grid
[07:03:08] <dons> or 4x2 @ 92cols
[07:03:27] <dons> (accounting for fontsize at my aging eyesight)
[07:03:57] *** Quits: Guest|9 (~Guest|9@fixed-187-190-165-171.totalplay.net) (Quit: Connection closed)
[07:04:05] <sm> congrats!
[07:04:31] *** Joins: ryanbooker (uid4340@id-4340.hampstead.irccloud.com)
[07:09:15] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[07:09:56] *** Quits: Nahra` (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[07:10:21] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[07:12:37] *** Joins: cianky_ (~cianky@136.206.239.15)
[07:13:24] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 240 seconds)
[07:13:58] *** Parts: cianky_ (~cianky@136.206.239.15) ()
[07:15:46] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:16:06] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:17:47] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:17:50] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:18:06] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:19:47] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:20:09] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:20:10] *** Joins: xkuru (~xkuru@user/xkuru)
[07:20:30] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:20:32] *** Quits: worldhelloworld1 (uid543174@id-543174.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:22:12] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:22:17] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[07:22:31] *** Joins: xkuru (~xkuru@user/xkuru)
[07:22:34] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:26:32] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:26:53] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:28:09] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[07:28:09] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[07:30:30] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:30:50] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:32:31] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:32:51] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:34:32] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:34:52] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:36:45] *** Quits: ishutin (~ishutin@92-249-150-134.static.digikabel.hu) (Ping timeout: 256 seconds)
[07:38:11] *** Joins: ishutin (~ishutin@92-249-150-134.static.digikabel.hu)
[07:41:51] <Axman6> dons: yeah I couldn't do my current job without a monitor that big, I recently needed to have a 3x2 grid of three different files (each split in two) just to begin to understand the code I'm trying to replace. Turns out you csn write Java in Haskell if you try hard enough
[07:43:32] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:43:52] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:45:33] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:45:53] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:46:33] *** Quits: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si) (Quit: Leaving)
[07:49:46] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:50:06] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:51:24] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:52:11] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:52:12] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[07:55:53] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[07:57:02] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:58:42] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[07:59:01] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[07:59:16] *** Joins: xkuru (~xkuru@user/xkuru)
[08:02:48] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[08:03:06] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[08:03:08] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:03:51] *** Quits: lechner_ (~lechner@debian/lechner) (Quit: WeeChat 3.0)
[08:03:58] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[08:03:58] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[08:04:31] *** Joins: lechner (~lechner@debian/lechner)
[08:05:14] *** Joins: xkuru (~xkuru@user/xkuru)
[08:06:54] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[08:07:14] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[08:08:10] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[08:09:56] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Ping timeout: 256 seconds)
[08:13:34] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[08:14:00] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[08:14:18] *** zero is now known as zzz
[08:16:48] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[08:18:28] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[08:18:50] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[08:19:48] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 272 seconds)
[08:22:38] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[08:22:42] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[08:22:57] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[08:24:36] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 240 seconds)
[08:26:36] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[08:26:54] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[08:27:02] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[08:27:45] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[08:28:01] <Axman6> @where ops
[08:28:01] <lambdabot> byorgey Cale conal copumpkin dcoutts dibblego dolio edwardk geekosaur glguy jmcarthur johnw mniip monochrom quicksilver shachaf shapr ski
[08:28:10] <Axman6> ops: cc123652345762x ^
[08:29:11] <dibblego> gawn
[08:29:23] <Axman6> flaky connection though
[08:30:18] *** ChanServ sets mode: +o litharge
[08:30:19] *** litharge sets mode: +b cc123652345762!~cc1236523@116.24.67.150##fix-your-connection
[08:30:27] <Axman6> <3
[08:30:30] *** litharge sets mode: -o litharge
[08:32:28] *** ChanServ sets mode: +o litharge
[08:32:29] *** litharge sets mode: +b cc123652345762!~cc1236523@116.24.67.150$##fix-your-connection
[08:32:31] *** cc123652345762 was kicked by litharge (You are banned from this channel (by ski))
[08:32:40] *** litharge sets mode: -o litharge
[08:35:00] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[08:38:29] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[08:38:45] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:39:31] *** Quits: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Remote host closed the connection)
[08:41:13] *** Joins: xkuru (~xkuru@user/xkuru)
[08:42:48] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Ping timeout: 256 seconds)
[08:43:19] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[08:46:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:49:02] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Ping timeout: 256 seconds)
[08:49:33] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:50:44] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[08:51:06] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:979b:b492:f897:b694)
[08:51:30] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[08:51:36] *** Joins: xkuru (~xkuru@user/xkuru)
[08:55:14] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[08:55:49] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:00:19] *** ChanServ sets mode: +o litharge
[09:00:20] *** litharge sets mode: -bo cc123652345762!~cc1236523@116.24.67.150##fix-your-connection litharge
[09:01:29] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:01:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:06:53] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[09:08:25] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: leaving)
[09:08:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:08:41] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:08:41] *** Joins: wroathe (~wroathe@user/wroathe)
[09:10:48] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[09:11:33] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[09:12:22] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[09:12:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:13:00] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 272 seconds)
[09:14:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:14:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:14:25] *** Joins: wroathe (~wroathe@user/wroathe)
[09:14:55] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 240 seconds)
[09:16:14] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 256 seconds)
[09:17:41] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:18:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:18:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[09:18:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 240 seconds)
[09:18:54] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[09:20:46] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[09:24:42] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:25:35] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[09:26:14] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[09:28:11] *** Joins: coot (~coot@213.134.190.95)
[09:28:48] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:28:54] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[09:31:23] *** Quits: foul_owl (~kerry@23.82.193.89) (Quit: WeeChat 2.3)
[09:32:30] *** ChanServ sets mode: +o litharge
[09:32:31] *** litharge sets mode: -bo cc123652345762!~cc1236523@116.24.67.150$##fix-your-connection litharge
[09:33:32] *** Joins: foul_owl (~kerry@174-21-76-71.tukw.qwest.net)
[09:33:48] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[09:34:55] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[09:36:05] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[09:41:30] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[09:44:20] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[09:46:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:48:57] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:49:00] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[09:49:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:50:09] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[09:51:30] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[09:53:19] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[09:53:57] *** Quits: ryanbooker (uid4340@id-4340.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:56:08] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[09:56:29] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[09:56:32] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:56:42] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[09:57:25] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[09:57:33] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.4)
[09:58:38] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:b9cc:c9f7:50d2:91bf:feff)
[10:00:07] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[10:02:08] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:05:12] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:05:32] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:07:13] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:07:14] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[10:07:32] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:09:13] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:09:32] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:10:13] *** Joins: cynomys (~cynomys@user/cynomys)
[10:11:54] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:12:16] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:12:20] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[10:12:46] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[10:15:58] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:16:18] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:17:59] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:18:17] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:18:29] *** Joins: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
[10:18:52] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[10:20:12] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[10:20:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[10:21:38] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[10:26:31] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[10:27:05] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[10:28:44] *** Joins: agumonkey (~user@88.163.231.79)
[10:29:06] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[10:31:16] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:31:37] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:31:39] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[10:32:53] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:33:49] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[10:33:52] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[10:35:32] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:35:52] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:36:42] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[10:39:40] *** Quits: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Remote host closed the connection)
[10:40:53] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[10:41:30] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[10:41:53] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[10:42:55] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 240 seconds)
[10:43:37] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[10:46:20] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[10:47:22] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[10:48:37] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[10:51:06] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:51:25] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:51:55] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:55:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:55:27] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:57:20] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[10:57:39] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[10:58:08] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[10:58:26] *** Quits: boletales_ (~boletales@p98076-ipoefx.ipoe.ocn.ne.jp) (Remote host closed the connection)
[11:00:32] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[11:00:49] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:b9cc:c9f7:50d2:91bf:feff) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:03:34] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[11:03:53] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[11:05:34] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[11:05:52] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[11:07:00] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[11:07:53] *** Joins: namkeleser (~namkelese@101.175.104.107)
[11:07:55] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[11:08:28] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:4511:759b:ea40:3933)
[11:09:23] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:b9cc:c9f7:50d2:91bf:feff)
[11:12:04] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[11:12:07] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:12:23] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[11:12:27] <Cheery> wow. catched a bug with code coverage.
[11:12:28] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:4511:759b:ea40:3933) (Remote host closed the connection)
[11:13:06] *** Joins: michalz (~michalz@185.246.204.65)
[11:13:43] <Cheery> now I'm wondering whether there's a tool to diff code coverage graphs.
[11:13:52] <Cheery> I did it visually by comparing markups.
[11:15:15] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:8ac1:68a6:89a:bc52)
[11:15:52] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:8ac1:68a6:89a:bc52) (Client Quit)
[11:15:57] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[11:17:20] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[11:18:47] <dminuoso> Cheery: You can probably jury rig something together with https://hackage.haskell.org/package/tree-diff
[11:21:51] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:623a:34aa:5c8e:6872)
[11:22:28] *** Joins: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com)
[11:22:38] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:b9cc:c9f7:50d2:91bf:feff) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:24:36] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[11:24:56] *** Joins: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.18-125.dynamic.3bb.co.th)
[11:26:23] *** Joins: fendor (~fendor@91.141.40.111.wireless.dyn.drei.com)
[11:28:46] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:32:24] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:33:17] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Client Quit)
[11:35:53] *** Joins: aiden (~iceneko@user/iceneko)
[11:38:42] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[11:39:01] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[11:39:59] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[11:40:03] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Ping timeout (120 seconds))
[11:40:08] *** Quits: eriol (~eriol@user/eriol) (Quit: Ping timeout (120 seconds))
[11:40:19] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[11:40:25] *** Joins: eriol (~eriol@user/eriol)
[11:40:26] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:41:23] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:41:28] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:2121:51c:b67:36c3)
[11:42:23] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[11:42:57] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:e499:f12d:32a8:5255) (Ping timeout: 240 seconds)
[11:44:04] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[11:44:22] *** Joins: alp (~alp@user/alp)
[11:45:11] *** Joins: acidjnk (~acidjnk@p200300d0c7049f37592e4ec9ecef3fab.dip0.t-ipconnect.de)
[11:45:27] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[11:46:36] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 245 seconds)
[11:48:50] *** Joins: jonathanx_ (~jonathan@c-5eea36c9-74736162.cust.telenor.se)
[11:48:51] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[11:51:30] *** Quits: jonathanx__ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 256 seconds)
[11:53:32] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[11:54:05] *** InstX1 is now known as Inst
[11:54:37] *** Quits: ncopa (~ncopa@gbr2-dev1.alpinelinux.org) (Changing host)
[11:54:37] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[11:56:17] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[11:56:35] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:56:37] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[11:58:18] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[11:58:37] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[11:59:25] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:00:12] *** Quits: foul_owl (~kerry@174-21-76-71.tukw.qwest.net) (Ping timeout: 272 seconds)
[12:00:28] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:00:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[12:01:52] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:03:49] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[12:04:08] *** Joins: kmein (~weechat@user/kmein)
[12:07:02] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[12:07:22] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[12:09:03] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[12:09:20] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[12:09:23] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[12:10:52] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:13:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[12:13:49] *** Joins: foul_owl (~kerry@23.82.193.87)
[12:14:25] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[12:15:19] *** Joins: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:d2a9:60e1:b35d:75ca:9100)
[12:16:26] *** Quits: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.18-125.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[12:17:20] *** Quits: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:d2a9:60e1:b35d:75ca:9100) (Client Quit)
[12:18:02] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:04] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[12:20:24] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[12:23:56] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[12:27:14] *** Joins: chele (~chele@user/chele)
[12:27:26] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[12:28:08] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[12:28:31] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[12:28:57] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Read error: Connection reset by peer)
[12:29:21] *** Joins: jonathanx__ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[12:29:32] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[12:30:10] *** Quits: marijan (~marijanma@2001:470:69fc:105::1:6cce) (Quit: You have been kicked for being idle)
[12:32:08] *** Quits: jonathanx_ (~jonathan@c-5eea36c9-74736162.cust.telenor.se) (Ping timeout: 268 seconds)
[12:34:34] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[12:36:23] *** Joins: kuribas (~user@ptr-25vy0ia80zmfb26ginl.18120a2.ip6.access.telenet.be)
[12:39:54] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[12:40:14] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[12:42:15] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:42:56] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:48:49] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[12:49:09] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[12:50:07] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[12:52:05] *** Parts: aiden (~iceneko@user/iceneko) (Leaving)
[12:52:42] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[12:55:05] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 252 seconds)
[12:56:39] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[12:57:27] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[12:57:57] *** Quits: ishutin (~ishutin@92-249-150-134.static.digikabel.hu) (Ping timeout: 240 seconds)
[12:59:44] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[12:59:56] *** Joins: ishutin (~ishutin@193-110-63-40.cable-modem.hdsnet.hu)
[13:00:03] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[13:01:44] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[13:01:47] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[13:02:04] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[13:03:32] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 272 seconds)
[13:03:41] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[13:05:58] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[13:06:17] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[13:08:36] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[13:11:20] *** Joins: __monty__ (~toonn@user/toonn)
[13:12:04] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[13:12:17] *** Joins: da39a3ee5e6b4b0d (~textual@171.5.29.46)
[13:16:40] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[13:23:32] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[13:23:53] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[13:24:43] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:26:20] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 272 seconds)
[13:28:01] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[13:28:23] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[13:30:11] <kuribas> Would it be possible to have an "easy" language, that still has the advantages of haskell?
[13:30:41] <kuribas> Like making side-effects explicit, easy concurrency, function composition, ...
[13:30:53] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[13:30:58] <kuribas> But without requiring everything to be a monad or monad transformer, using folds for everything...
[13:31:41] <dminuoso> Nothing requires you to use monad transformers.
[13:31:47] <dminuoso> That's just a choice people make.
[13:32:01] <dminuoso> Take a look at GHC, its essentially just a big ball of IO
[13:32:10] <kuribas> Well, at least you will want ReaderT r IO, no?
[13:32:15] <Inst> it's just a standard, as some people say, Haskell is more a metalanguage (in the sense that you have 20 different ways to do something) than a language
[13:32:27] <dminuoso> kuribas: You can pass dictionaries/dependencies explicitly or use global IORefs.
[13:32:34] <dminuoso> The same as with any other language.
[13:34:00] <kuribas> so that language is haskell, minus the complicated parts?
[13:34:56] <kuribas> And instead of EitherT use exceptions?
[13:35:12] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:37:43] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:38:09] <lortabac> kuribas: I have thought about this for a long time, I think a "simpler Haskell" would need a couple of built-in features for things that we do at library level
[13:38:26] <kuribas> and be strict probably
[13:39:04] <lortabac> specifically, better support for implicit parameters (to avoid Reader), some syntactic sugar for State (something like Prolog's DCG's)
[13:39:18] <lortabac> and built-in lenses or at least better records
[13:39:37] <kuribas> extensible records like purescript?
[13:39:40] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[13:39:48] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[13:40:31] <lortabac> not necessarily extensible, but it should at least allow duplicated fields, maybe through some built-in constraint like HasField
[13:41:17] <lortabac> actually I had started working on such a language, but I don't have the time (nor probably the skills) to complete the work alone
[13:41:38] <lortabac> and I'm not even sure the world needs yet another programming language
[13:42:01] <lortabac> after all, it might be more reasonable to just learn to live with Haskell's quirks
[13:42:46] <merijn> The world needs load more programming languages
[13:42:54] <merijn> As long as they aren't boring reskins of C/Java
[13:43:17] <dminuoso> lortabac: Im not convinced HasField is going to make things better.
[13:43:44] <dminuoso> One of the major issues Haskell has is how we encode these things via typeclasses, at the great cost of extremely poor diagnostics.
[13:43:56] <dminuoso> Rather than "X has no field XYZ" you get failed constrained errors
[13:44:18] <lortabac> dminuoso: to be clear, we are talking about an imaginary new language which is simpler than Haskell
[13:44:27] <lortabac> not about using HasField in Haskell
[13:44:45] <kuribas> merijn: or crappy dynamic languages where proper semantics are an afterthought.
[13:44:50] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:45:56] <lortabac> personally I'd just propose a new language if it offers some substantial improvement/advantage/use case over the existing ones
[13:46:16] <lortabac> if it's just Haskell minus transformers I'm hesitant to advertise it to the world
[13:46:32] <dminuoso> I dont think this "minus transformers" proposition is really important.
[13:46:42] <kuribas> Maybe something like f# is more suitable for mainstream?
[13:46:51] <dminuoso> f# is a nasty piece of work
[13:47:03] <lortabac> I do think transformers are a big obstacle to simplicity in Haskell
[13:47:21] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[13:48:11] <dminuoso> lortabac: transformers are not a necessity. they are just some overhead when deciphering other peoples code.
[13:48:16] <dminuoso> Except ReaderT perhaps
[13:48:34] <kuribas> dminuoso: they are convenient to create parsers for example.
[13:48:45] <kuribas> Not necessary, but they can take away the builerplate.
[13:48:47] <dminuoso> Not as transformers.
[13:48:53] <dminuoso> parsers are usually handcrafted monads.
[13:49:18] <dminuoso> megaparsec is a bit odd since it gives you a whole transformer, but you dont have to actually use it
[13:49:19] <kuribas> Perhaps, but I find it easier to create them using mtl.
[13:49:41] <lortabac> they are a necessity, because whatever abstraction you come up with, you need to know how to compose it with existing abstractions, and that usually involves transformers
[13:49:41] <kuribas> Saves me from the plumbing, plus it's more likely to be correct, easier to adapt, etc...
[13:50:01] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[13:50:03] <kuribas> lortabac: perhaps a language could have effects builtin, and use transformer under the hood?
[13:50:07] <dminuoso> lortabac: I dont know about that, over the past 3 years Ive successfully managed with just ReaderT (and that's just for convenience)
[13:50:19] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:50:23] <dminuoso> Writing composable software is somewhat orthogonal to transformers
[13:50:35] <lortabac> kuribas: yes, more built-in effects is the idea that I explored with my language
[13:51:26] <kuribas> dminuoso: one problem I found nicely solved with monads and applicatives is validation/error reporting.  How would you do it without effects?
[13:51:38] *** Quits: maerwald (~maerwald@user/maerwald) (Quit: gone)
[13:51:51] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[13:51:54] <kuribas> Just use a IORef to collect them?
[13:52:00] <dminuoso> Yes.
[13:52:13] <kuribas> Then there is still the problem that I would to collect all errors.
[13:52:17] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[13:52:28] <dminuoso> This is how we have warnings, failable and fatal errors in our large project
[13:52:38] <kuribas> Foo <$> trythis <*> andthat <*> alsoThat.
[13:52:52] <dminuoso> Write a custom monad instance
[13:53:00] <dminuoso> The advantage is nobody has to understand bizarre interactions of monad transformers
[13:53:06] <dminuoso> You can look at what >> does in my code
[13:53:12] <kuribas> If I throw with trythis, I don't see the error of "andthat" and "alsoThat".
[13:53:27] <dminuoso> I also have >|> for example, which only proceeds if no failable erros are set
[13:53:42] *** Quits: maerwald (~maerwald@mail.hasufell.de) (Changing host)
[13:53:42] *** Joins: maerwald (~maerwald@user/maerwald)
[13:54:12] <kuribas> Isn't that just <*> though?
[13:54:15] <merijn> monad transformers are pretty okay
[13:54:24] <merijn> exposing them as part of your public API is the problem
[13:54:31] <dminuoso> kuribas: No the point is I have this:
[13:55:44] <dminuoso> kuribas: https://gist.github.com/dminuoso/be53ec068306073650802d157ea02e5a
[13:56:53] <dminuoso> So now I have >> which simply proceeds irrespective of errors, and then I construct phases that can only pass if no errors are set using >|> 
[13:57:07] <dminuoso> sort of like `(f >> g >> h) >|> (x >> y >> z)`
[13:57:34] <dminuoso> So in my case, I dont even need a custom monad instance.
[13:57:37] <dminuoso> It's just plain IO
[13:58:22] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[13:59:41] <kuribas> hmm, something like that could work...
[14:00:11] <kuribas> It'll be more beginner friendly, but still nicely composable.
[14:01:02] <kuribas> maybe I could use a newtype over IO to get validation like behaviour.
[14:01:22] <kuribas> dminuoso: what is Comp?
[14:01:29] <kuribas> Comp is not IO, is it?
[14:01:35] <dminuoso> 1newtype Comp e a = Comp { runComp :: ReaderT (CompEnv e) IO a 
[14:02:03] <kuribas> so a transformer :)
[14:02:23] <dminuoso> Sure, but its not really necesary
[14:02:34] <dminuoso> But for the convenience of monad you need either this or global IORefs
[14:02:49] <dminuoso> Or you parametrize everything
[14:03:20] <dminuoso> The key thing is, we just use ReaderT and isomorphic things so we have access to MonadUnliftIO
[14:04:32] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[14:05:04] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:ddb1:758a:abd2:2050) (Remote host closed the connection)
[14:05:42] *** Joins: bahamas (~lucian@84.232.140.52)
[14:05:44] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[14:08:33] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:08:52] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:10:33] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:10:51] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:12:02] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:c0f:a3e3:c787:bf99)
[14:12:37] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[14:14:01] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:3499:893c:26f0:bcd0) (Remote host closed the connection)
[14:16:14] *** Quits: da39a3ee5e6b4b0d (~textual@171.5.29.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:16:59] *** Joins: ccntrq (~Thunderbi@2a01:c22:8df3:2600:efac:1374:1f51:a914)
[14:21:20] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:21:38] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:23:58] *** Quits: jespada (~jespada@85.255.234.169) (Ping timeout: 272 seconds)
[14:25:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:25:37] *** Joins: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813)
[14:26:18] *** Joins: jespada (~jespada@85.255.234.169)
[14:27:59] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:28:17] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:29:55] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:32:25] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:32:44] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:32:54] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:33:12] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:34:42] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 256 seconds)
[14:37:01] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:37:20] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:39:01] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:39:19] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:41:00] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:41:18] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:42:59] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:43:17] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:44:58] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:45:16] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:46:57] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[14:47:15] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[14:47:50] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[14:48:04] *** Joins: fendor_ (~fendor@178.115.53.79.wireless.dyn.drei.com)
[14:48:18] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[14:50:36] *** Quits: fendor (~fendor@91.141.40.111.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[14:55:21] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[14:57:15] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:00:26] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:00:44] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:01:36] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[15:04:24] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:04:42] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:04:45] *** Quits: ishutin (~ishutin@193-110-63-40.cable-modem.hdsnet.hu) (Ping timeout: 256 seconds)
[15:05:29] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[15:06:32] *** Joins: ishutin (~ishutin@80-95-86-73.pool.digikabel.hu)
[15:08:07] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:c0f:a3e3:c787:bf99) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:08:28] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:c0f:a3e3:c787:bf99)
[15:09:05] *** Parts: adamcstephens[m] (~adamcstep@2001:470:69fc:105::1:72a2) ()
[15:09:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Ping timeout: 240 seconds)
[15:12:54] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:13:13] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:16:52] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:17:10] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:18:36] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:c0f:a3e3:c787:bf99) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:23:17] <kuribas> is there a "simple" alternative to Endo?
[15:23:22] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:598a:8b0b:9405:6e26)
[15:23:41] <kuribas> I really like Endo, since you can represent partial information in a typesafe way.
[15:26:02] *** Quits: pavonia (~user@user/siracusa) (Ping timeout: 272 seconds)
[15:27:07] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[15:27:16] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:29:13] <byorgey> kuribas: what is it about Endo that isn't simple enough?
[15:29:27] <kuribas> byorgey: it scares beginners...
[15:32:26] <byorgey> ah.
[15:32:58] <kuribas> But I think there are far more scary things in imperative programs than Endo...
[15:34:38] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:34:42] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[15:34:58] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:35:46] <maerwald> kuribas: can you tell me the result of `appEndo "Haskell" $ Endo ("Hello, " ++) <> Endo (++ "?") <> Endo ("!" ++)` without squinting a few times? :p
[15:36:44] <kuribas> type error?
[15:36:58] <kuribas> btw, for strings I would use DList.
[15:37:21] <maerwald> no, it works =)
[15:37:48] <maerwald> tldr: Endo *is* confusing, depending on how you use it
[15:38:05] <maerwald> similarly to ContT
[15:38:11] <kuribas> > appEndo "foo" $ Endo ("bar" ++)
[15:38:12] <lambdabot>  error:
[15:38:12] <lambdabot>      • Couldn't match expected type ‘Endo (Endo [Char])’
[15:38:12] <lambdabot>                    with actual type ‘[Char]’
[15:38:28] <kuribas> type error
[15:38:43] <maerwald> flip appEndo
[15:38:59] <kuribas> maerwald: so don't do that?  Use DList.
[15:39:15] <maerwald> that doesn't make Endo better :p
[15:39:17] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[15:39:48] <kuribas>  <maerwald> tldr: Endo *is* confusing, depending on how you use it
[15:39:52] <kuribas> So don't use it like that.
[15:39:55] <kuribas> problem solved.
[15:40:08] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:40:18] *** Quits: jespada (~jespada@85.255.234.169) (Quit: Textual IRC Client: www.textualapp.com)
[15:40:32] <kuribas> maerwald: do you hammer nails using a screwdriver?
[15:40:33] <maerwald> well, then you could argue imperative programming is fine as well, if you use it sensibly
[15:40:39] <maerwald> yet, here we are
[15:41:28] <kuribas> I mean, for some cases it "is" fine.
[15:42:57] <kuribas> if you have a proper architecture, people who know what they do, not strong demands on correcness, imperative is also fine.
[15:43:07] <kuribas> Just not something which I personally like to program with.
[15:43:45] *** Joins: agumonkey (~user@88.163.231.79)
[15:43:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:45:46] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:46:04] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:47:45] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:48:03] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:50:04] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[15:52:00] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:52:18] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:53:59] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:54:17] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[15:55:30] <dminuoso> 12:59:13   byorgey | kuribas: what is it about Endo that isn't simple enough?
[15:55:32] <dminuoso> Its uses
[15:55:42] <dminuoso>     foldr f z t = appEndo (foldMap (Endo #. f) t) z
[15:56:09] <dminuoso> It's hard to decipher what happens
[15:56:26] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[15:58:14] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[15:58:32] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:01:00] *** Joins: akegalj (~akegalj@78-1-170-211.adsl.net.t-com.hr)
[16:01:03] *** Joins: namkeleser (~namkelese@101.175.104.107)
[16:02:43] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[16:03:01] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:04:02] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:2121:51c:b67:36c3) (Ping timeout: 240 seconds)
[16:07:43] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:e86b:808f:b5aa:dc47)
[16:09:02] *** Quits: acidjnk (~acidjnk@p200300d0c7049f37592e4ec9ecef3fab.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:09:27] *** Joins: Pickchea (~private@user/pickchea)
[16:13:03] <int-e> Well, read (#.) as (.); once you do that,  foldr f z [a,b,c] = (f a . f b . f c) z  seems to be the hardest step in understanding that. :-P
[16:13:57] <int-e> You have to know about 3 abstractions. That's a serious barrier to understanding it from scratch, obviously.
[16:14:27] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[16:16:07] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[16:16:26] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:16:30] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: Ping timeout (120 seconds))
[16:17:24] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[16:17:59] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[16:18:21] <kuribas> dminuoso: But is it the concept of Endo which is difficult, or the use in this case?
[16:18:34] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:8dd6:530e:bda9:6ea2)
[16:18:54] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:19:34] *** Joins: coot (~coot@213.134.190.95)
[16:21:48] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:e86b:808f:b5aa:dc47) (Ping timeout: 240 seconds)
[16:23:05] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[16:23:59] <dminuoso> int-e: Of course, if you are able to inline definitions in your head always.. :)
[16:29:42] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[16:30:57] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[16:33:25] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[16:33:42] *** Joins: bahamas (~lucian@84.232.140.52)
[16:36:38] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[16:36:56] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:38:37] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[16:38:55] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:39:01] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[16:40:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:84ab:e3a9:1ea3:da7a) (Ping timeout: 240 seconds)
[16:41:24] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[16:43:18] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[16:43:37] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:43:54] *** Quits: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[16:45:38] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[16:45:44] *** Quits: namkeleser (~namkelese@101.175.104.107) (Quit: Client closed)
[16:45:58] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:47:39] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[16:47:57] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:48:41] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[16:50:13] <maerwald[m]> dminuoso: even if you can, it's wasted intellectual energy. Wasn't that the reason we abandoned imperative programming because reasoning about global state is just too hard?
[16:51:03] *** Joins: Topsi (~Tobias@dyndsl-095-033-017-136.ewe-ip-backbone.de)
[16:54:20] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[16:54:39] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[16:54:41] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:55:20] *** Quits: ishutin (~ishutin@80-95-86-73.pool.digikabel.hu) (Ping timeout: 272 seconds)
[16:55:57] <merijn> I mean, you can do imperative programming without global state...
[16:56:01] <merijn> See IO
[16:56:11] <kuribas> It's global complexity vs local complexity.  I find often haskell code is locally complex, like it takes some time to understand how a function or abstraction works.  However, globally it becomes more modular and easy to reason about.
[16:56:49] *** Joins: ishutin (~ishutin@fibhost-66-106-209.fibernet.hu)
[16:56:53] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:57:54] <dminuoso> maerwald[m]: There's certainly something to that. The complexity of trying to get LoggingT into servant is quite absurd.
[16:58:31] <dminuoso> If on the other hand we had a logger using global state, things get real simple,.
[16:58:51] <kuribas> logger using ReaderT is pretty easy as well.
[16:58:56] <kuribas> No need for global state
[16:59:04] <dminuoso> kuribas: With servant?
[16:59:10] <dminuoso> If you know how, its easy yes.
[16:59:44] <kuribas> If you already have ReaderT, adding a logger is easy.
[16:59:54] <maerwald[m]> merijn: that's exactly the point. You can do sensible imperative programming, but... you're not forced to.
[17:00:25] <dminuoso> kuribas: That's my point, getting a ReaderT/LoggingT into servant requires special combinators and the code looks incredibly scary.
[17:01:42] *** Joins: coot (~coot@213.134.190.95)
[17:01:56] <maerwald[m]> kuribas: global complexity can very easily leak into Haskell programs too, eg when the primary state is your filesystem 
[17:02:13] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[17:02:43] <maerwald[m]> Or a blockchain xD
[17:02:56] <romesrf> is there a way to constrain a type family? say: type family F a, but all instances of F a must satisfy Monoid (F a)
[17:03:10] <romesrf> type family (Monoid F a) => F a :P
[17:03:26] <maerwald[m]> dminuoso: you can use your own app monad in servant
[17:03:38] <dminuoso> maerwald[m]: of course, Im not saying its impossible
[17:03:47] <dminuoso> We do this in all our servant apps
[17:03:48] <maerwald[m]> https://docs.servant.dev/en/stable/cookbook/using-custom-monad/UsingCustomMonad.html
[17:03:52] <dminuoso> Yeah I know
[17:04:13] <merijn> romesrf: Not really?
[17:04:14] <maerwald[m]> It gets complicated when there's no existing instance
[17:04:22] *** Quits: InstX1 (~Liam@2601:6c4:4080:3f80:8dd6:530e:bda9:6ea2) (Ping timeout: 250 seconds)
[17:04:26] <dminuoso> maerwald[m]: So if I was a curious newbie I might be tempted to look at this:
[17:04:33] <dminuoso> genericServeTWithContext :: forall (routes :: * -> *) (m :: * -> *) (ctx :: [*]). (GenericServant routes (AsServerT m), GenericServant routes AsApi, HasServer (ToServantApi routes) ctx, HasContextEntry (ctx .++ DefaultErrorFormatters) ErrorFormatters, ServerT (ToServantApi routes) m ~ ToServant routes (AsServerT m))   => (forall a. m a -> Handler a)   hoistServer argument to come back to Handler
[17:04:33] <maerwald[m]> dminuoso: see https://github.com/haskell-servant/servant/issues/1544
[17:04:34] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Remote host closed the connection)
[17:04:35] <dminuoso> -> routes (AsServerT m)   your record full of request handlers -> Context ctx   the Context to serve the application with -> Application  
[17:04:37] <romesrf> I see hahaha
[17:04:44] <dminuoso> And at that point I might as well give up and declare Python is simpler.
[17:04:48] <hololeap> where does the Paths_pkgname module come from?
[17:04:56] <dminuoso> Because writing a flask api certainly doesnt impose these crazy things on me
[17:05:25] <maerwald[m]> First time writing a HasClient instance is confusing 
[17:05:50] <hololeap> I see "autogen-modules: Paths_fay" in fay.cabal
[17:06:00] <maerwald[m]> HasServer rather
[17:07:09] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:07:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[17:07:58] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[17:08:08] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[17:08:13] <geekosaur> hololeap, cabal generates it
[17:09:20] <geekosaur> https://cabal.readthedocs.io/en/3.6/cabal-package.html#autogenerated-modules-and-includes
[17:09:31] <merijn> hololeap: It's auto-generated by cabal
[17:09:50] <hololeap> geekosaur: my problem is that fay-tests is giving errors about not finding the fay modules in the search locations, which are wrong
[17:10:17] <merijn> hololeap: Can you link the cabal file?
[17:10:19] <hololeap> and the only place I can find where these search locations are coming from is getDataFileName, which I guess is imported from Paths_fay
[17:10:58] <geekosaur> https://cabal.readthedocs.io/en/3.6/cabal-package.html#accessing-data-files-from-package-code
[17:11:05] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Client Quit)
[17:11:40] <geekosaur> I don't think that gives full detail though, there aresome tricks to try to enable it to work with both installed modules and whilee.g. testing
[17:11:48] <geekosaur> those tricks may not always work,sadly
[17:12:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Ping timeout: 256 seconds)
[17:12:25] <geekosaur> if you're having problems with it, best bet might be to ask in #hackage
[17:13:14] <hololeap> I'm just trying to figure out how to override that function, or at least append the correct path to the source dir
[17:13:27] <merijn> hololeap: You can do so via environment variables
[17:13:43] <merijn> hololeap: But overall: insufficient context
[17:16:52] *** Quits: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com) (Quit: leaving)
[17:18:42] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[17:18:58] <hololeap> merijn: https://github.com/faylang/fay/blob/master/fay.cabal
[17:19:01] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[17:19:23] *** Joins: vpan (~0@212.117.1.172)
[17:19:31] <hololeap> merijn: I'm trying to run the test suite locally, but I'm hitting errors like this, because it's searching for the source in the wrong paths: https://dpaste.com/5LEZ4NDFQ
[17:19:52] *** Joins: cosimone (~user@93-47-229-38.ip115.fastwebnet.it)
[17:21:59] <merijn> How was Fay installed?
[17:22:35] <hololeap> it's just sitting in dist/
[17:23:04] <merijn> First observation: fay-tests doesn't list an autogen-module for Paths_fay
[17:23:12] <merijn> But does list itself as using it
[17:23:34] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[17:25:14] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[17:25:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[17:25:33] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[17:26:13] <hololeap> ok, I think I made a little headway here and found where the paths are actually being pulled from. thanks for the info geekosaur, merijn
[17:26:49] <merijn> hololeap: How are you running the tests, btw?
[17:27:01] *** Joins: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com)
[17:27:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:fc09:57a0:d89c:b417)
[17:27:24] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:27:52] *** Joins: ph88 (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[17:29:32] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[17:29:50] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[17:31:31] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[17:31:33] <hololeap> it's pretty convoluted, but I have fay and fay-base built, and I'm running the fay-tests exe
[17:31:49] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[17:32:47] <merijn> Directly, you mean?
[17:33:04] <hololeap> yes
[17:33:15] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[17:34:21] <hololeap> it's actually a PoC to see if I can get a test suite like this working as part of a gentoo package
[17:34:36] *** Joins: `2jt (~jtomas@natwalu174-10.wi-fi.upv.es)
[17:35:05] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[17:35:32] <merijn> hololeap: Try using "cabal run" instead
[17:35:57] <merijn> It sets up the Paths module correctly for running from the *build* dir, rather than the final install dir
[17:36:33] <hololeap> oh interesting. any idea if there is an equivalent for cabal-v1?
[17:36:47] <merijn> hololeap: If you didn't install then Paths is probably looking in the install dir, where it isn't yet, if you didn't install
[17:37:21] <merijn> oh, you're trying to use Paths from v1 to access stuff without actually installing? My professional assessment is: RIP you
[17:37:42] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[17:38:16] <geekosaur> actually the Paths machinery predates cabal 2+, and there is a cabal v1-run. I'd say try it
[17:38:36] <geekosaur> (including stuff to work from uninstalled state as merijn described)
[17:38:38] <reactormonk[m]> If I have two `Prism a' b'`, both pointing to a different part of an AST, can I smash them together into a single `Prism' a b` or `Traversal' a b`?
[17:38:45] <merijn> geekosaur: I know, but I know hvr did a bunch of working to make Paths work correctly without installing
[17:39:31] <geekosaur> yeh.tbh though I would not be surprised if v1-run is just an alias for v2-run
[17:39:55] <geekosaur> Paths_can't be generated differently for v1 vs. v2
[17:39:55] <hololeap> there doesn't seem to be any equivalent for ./setup
[17:40:12] <geekosaur> no, setup won't do that
[17:40:16] <hololeap> it's not a big deal though, guys. if I don't get this working I'll just move on
[17:41:06] <hololeap> although if you have any knowledge of an env variable that would override these paths, I would like to know
[17:41:36] <geekosaur> were I you I would want to move away from Setup anyway. it's optional in many packages these days, and cabal has an act-as-setup internal command to replace it 
[17:42:08] <geekosaur> there'sa pretty strong move to make Setup go away
[17:42:38] <geekosaur> they may always need to support build-type: custom, but as much as possible they want to avoid it
[17:42:50] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:43:28] <hololeap> hm, yeah it's a bummer the main person who set all this gentoo machinery up is gone. but I think the reason why Setup.hs is used is in case cabal-install hasn't been installed
[17:44:05] <hololeap> there's a bootstrapping function in the scripts that generates Setup.hs if it doesn't exist
[17:47:12] <merijn> I mean gentoo's use of Setup.hs is actually the intentional use-case for Setup.hs existing, so...
[17:47:42] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 252 seconds)
[17:49:07] <maerwald[m]> Setup.hs is the only unix style interface there is
[17:49:25] <maerwald[m]> I don't see that ever going away
[17:49:45] <maerwald[m]> Even stack relies on it
[17:52:52] *** Joins: vysn (~vysn@user/vysn)
[17:53:54] <shapr> GOOD MORNING
[17:53:57] * shapr hops cheerfully
[17:54:58] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:58:20] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[18:00:38] *** Joins: drdo (~drdo@roach0.drdo.eu)
[18:02:54] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[18:03:13] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[18:04:54] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[18:05:12] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[18:05:46] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:06:49] <romesrf> how could I import a type instance from a module?
[18:06:54] <romesrf> import Module (typeinstance?)
[18:07:02] <merijn> romesrf: What is a type instance?
[18:07:08] <romesrf> type instance F a = Int
[18:07:16] <merijn> Ah, that's a type family
[18:07:16] *** Joins: lechner (~lechner@debian/lechner)
[18:07:26] <romesrf> :-)
[18:07:26] <merijn> And you just import F
[18:07:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[18:07:42] <romesrf> How would I import just the instance? hahahaha
[18:07:49] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:08:05] <geekosaur> is the instance even meaningful without the family?
[18:08:16] <merijn> I'm not sure what you mean by "just the instance". F is a type family instance is just the implementation
[18:08:22] <romesrf> say, I have module A that declares type family, module B that declares an instance and then Monoid (F Somthng), and then module C which wants to know that F Somthn instances monoid 
[18:08:28] <merijn> 'F' is the only relevant part you can import
[18:08:38] <romesrf> I see I see
[18:09:31] <lechner> Hi, is anyone aware of a Perl module to parse Cabal files?
[18:09:36] <romesrf> ty :)
[18:09:37] <merijn> romesrf: If you have 'F' imported from A that is all you need to do "Monoid (F Something) =>" afaik
[18:10:05] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/type_families.html#import-and-export
[18:10:05] <romesrf> merijn: Indeed, I was trying to avoid the many of constraints
[18:10:50] <romesrf> thank you geekosaur 
[18:11:25] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[18:12:15] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:14:57] *** Quits: Vajb (~Vajb@2001:999:62:aa00:7f5a:4f10:c894:3813) (Read error: Connection reset by peer)
[18:15:14] <geekosaur> lechner, afaik the only reliable way to parse a cabal file is via the cabal library
[18:15:24] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:15:49] <geekosaur> a perl module trying to parse a cabal file would be … scary
[18:16:17] <geekosaur> (not that parsing in perl 5 isn't scary to start with… I like raku more for that)
[18:17:00] <lechner> it would be okay to use an intermediary Haskell executable. Is there such a Swiss army knife?
[18:17:48] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 240 seconds)
[18:18:47] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[18:19:13] <geekosaur> doesn't seem to be
[18:19:13] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:19:21] <geekosaur> looks like hvr started to write one but abandoned it
[18:19:30] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:21:21] <lechner> okay, thanks!
[18:22:12] <merijn> There's a work-in-progress parser for cabal
[18:22:21] <lechner> Hi, what was the default value for 'cabal-version' when the field was not required, please?
[18:23:25] <merijn> It was always required I'm pretty sure
[18:23:42] <merijn> Or if it wasn't, then that was only in the way earliest days
[18:24:12] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 256 seconds)
[18:24:15] <merijn> (as in, more than 15-20 years ago)
[18:24:25] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[18:27:16] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[18:27:23] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Remote host closed the connection)
[18:27:36] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[18:27:37] *** Joins: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr)
[18:28:30] *** Joins: Pickchea (~private@user/pickchea)
[18:30:15] *** Joins: bahamas (~lucian@188.24.153.252)
[18:33:34] *** Joins: Inst (~Liam@2601:6c4:4080:3f80:ddf8:a02:d4a2:e78f)
[18:35:46] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[18:36:04] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[18:37:36] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:38:29] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:38:30] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[18:40:10] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[18:40:29] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[18:40:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[18:41:49] <lechner> merijn: thanks!
[18:42:36] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:43:20] <merijn> The only change I can think of you might be referring to is that change that drops the faux-range notation and requires it as first field in the file
[18:43:27] <merijn> Which is fairly recent
[18:43:51] <lechner> merijn: "now required"    https://cabal.readthedocs.io/en/3.4/cabal-package.html#pkg-field-cabal-version
[18:44:13] <merijn> By which I mean "from around Cabal-2.0" which was released around 5 years ago
[18:45:12] <merijn> lechner: Note that it says that it changed significantly in Cabal 1.2, which was released in 2007 :)
[18:45:36] *** Joins: toulene (~toulene@user/toulene)
[18:45:40] <lechner> in debian i regularly encounter code written in 1998
[18:46:25] <merijn> lechner: Note that a bit below it links to the github issue that has the whole discussion/rationale for changing things
[18:47:18] <merijn> lechner: To clarify: the cabal-version field is intended to describe the syntax *of the cabal file* and does not relate to the cabal-install (i.e. cabal executable) used besides indirectly
[18:48:00] <sclv> the approach you should take really depends on what info you want out of cabal files
[18:48:22] <merijn> lechner: cabal-install is backwards compatible with all previous versions of the file-format. So this section only applies to writing/modifying cabal files and shouldn't affect anyone merely *using* cabal files
[18:49:40] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[18:50:35] <lechner> merijn: i thought i needed it for the default build type   https://cabal.readthedocs.io/en/3.4/cabal-package.html#pkg-field-build-type
[18:50:49] <merijn> lechner: So cabal files wishing to use features of newer cabal specifications must declare an appropriate cabal-version for those features (which, from 2.0 on MUST be using the new format with the version on the first line and no faux-range syntax)
[18:51:56] *** Quits: krappix (~krappix@nat-eduroam-76-gw-01-lne.lille.inria.fr) (Quit: Client closed)
[18:51:58] *** Quits: `2jt (~jtomas@natwalu174-10.wi-fi.upv.es) (Ping timeout: 256 seconds)
[18:52:03] <merijn> lechner: Well, that depends on why you want to change the default build type for a package?
[18:52:20] <lechner> it's only when there is none
[18:52:30] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[18:52:52] *** Quits: akegalj (~akegalj@78-1-170-211.adsl.net.t-com.hr) (Quit: leaving)
[18:52:57] <sclv> there's a lot of tools for translating between cabal files and specifications for various package managers, idk what shape they're in or their approach but eg https://hackage.haskell.org/package/cabal-debian and https://hackage.haskell.org/package/cabal2spec and https://hackage.haskell.org/package/cabal2ebuild
[18:52:57] <merijn> and?
[18:53:11] <merijn> lechner: What are you trying to do?
[18:53:48] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 240 seconds)
[18:55:33] *** Joins: `2jt (~jtomas@natwalu174-10.wi-fi.upv.es)
[18:55:40] <lechner> the debian build system provides an appropriate Setup.hs file when none is present
[18:58:14] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[18:58:33] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[18:58:54] <merijn> and?
[18:59:12] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:59:37] <merijn> Why would that require modifying the package?
[19:00:41] <lechner> it requires determining the build type, which depends in part on the cabal-version     https://cabal.readthedocs.io/en/3.4/cabal-package.html#pkg-field-build-type
[19:00:44] *** Quits: `2jt (~jtomas@natwalu174-10.wi-fi.upv.es) (Ping timeout: 272 seconds)
[19:01:10] <merijn> It doesn't really, tbh
[19:01:23] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[19:01:27] <merijn> Because the only time it can be missing is when it's Simple/Configure/Make
[19:01:47] <merijn> Because Custom requires a Setup.hs exist, else the package is broken to begin with
[19:02:12] <merijn> So you can just always assume that missing setup type + missing Setup.hs == Simple
[19:02:15] *** Joins: cailt^ (~cailt@50.232.121.75)
[19:04:26] *** Quits: bahamas (~lucian@188.24.153.252) (Ping timeout: 256 seconds)
[19:06:19] <lechner> we catch that condition, but i still have to infer the custom build type first
[19:07:47] *** Joins: `2jt (~jtomas@natwalu174-10.wi-fi.upv.es)
[19:08:03] <merijn> You can just grep the cabal file for setup type. If grep finds nothing, check for Setup.hs existing and if not infer Simple. Else infer Custom?
[19:10:19] *** Joins: zebrag (~chris@user/zebrag)
[19:10:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:10:47] *** Quits: cailt^ (~cailt@50.232.121.75) (Remote host closed the connection)
[19:11:28] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[19:11:47] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[19:12:10] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[19:13:36] *** Joins: Artyom[m] (~available@2001:470:69fc:105::1:d429)
[19:13:55] <lechner> merijn: here is what we do presently    https://salsa.debian.org/lechner/haskell-devscripts/-/blob/perl-recipes/lib/Debian/Debhelper/Buildsystem/Haskell/Recipes.pm#L901-920
[19:14:13] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[19:15:19] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:16:29] <merijn> I mean, that's basically roughly what I described, no?
[19:16:40] <merijn> (as far as I can guess Perl code anyway)
[19:17:12] *** Parts: Artyom[m] (~available@2001:470:69fc:105::1:d429) ()
[19:17:13] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[19:17:42] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:19:10] *** Quits: ishutin (~ishutin@fibhost-66-106-209.fibernet.hu) (Ping timeout: 260 seconds)
[19:20:19] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[19:20:37] *** Joins: ishutin (~ishutin@92-249-193-164.pool.digikabel.hu)
[19:23:13] <lechner> thanks for confirming! that's what i was aiming for.
[19:24:53] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[19:25:12] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[19:25:48] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:25:54] *** Quits: s4msung (bZt8T9wHxn@user/s4msung) (Quit: s4msung)
[19:25:56] *** Quits: yushyin (UUdtykrwRM@mail.karif.server-speed.net) (Quit: WeeChat 3.3)
[19:25:56] *** Quits: noctuks (7vrDyCK6LH@user/noctux) (Quit: WeeChat 3.3)
[19:32:51] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[19:33:30] *** Joins: noctuks (pS9vLLhgiV@user/noctux)
[19:33:30] *** Joins: s4msung (z4rgS71Nb1@user/s4msung)
[19:33:31] *** Joins: yushyin (NwWjaFh18p@mail.karif.server-speed.net)
[19:33:50] *** Quits: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com) (Quit: leaving)
[19:34:22] *** Joins: liz (~liz@2a00:23c5:9680:501:f2d5:bfff:fe6a:5af4)
[19:35:09] *** Joins: bahamas (~lucian@188.24.153.252)
[19:37:01] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:39:23] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[19:41:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[19:43:48] *** Quits: toulene (~toulene@user/toulene) (Quit: ZNC - https://znc.in)
[19:45:29] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[19:45:47] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[19:46:32] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:623a:34aa:5c8e:6872) (Quit: WeeChat 2.8)
[19:47:02] *** Quits: bahamas (~lucian@188.24.153.252) (Ping timeout: 252 seconds)
[19:47:30] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[19:49:26] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[19:49:45] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[19:49:46] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[19:50:46] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 272 seconds)
[19:53:24] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[19:53:30] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:53:43] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[19:54:21] <Inst> do you know if there's any newer versions of HLS / GHCup / Cabal?
[19:56:25] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:57:31] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[19:59:34] <merijn> newer than what?
[20:00:31] *** Joins: neurocyte0917090 (~neurocyte@IP-213188113209.dynamic.medianet-world.de)
[20:00:31] *** Quits: neurocyte0917090 (~neurocyte@IP-213188113209.dynamic.medianet-world.de) (Changing host)
[20:00:31] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[20:02:11] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:02:19] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:02:31] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:02:46] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[20:04:07] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[20:06:39] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:06:46] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[20:06:57] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:08:42] *** Joins: Unicorn_Princess (~Unicorn_P@46-54-248-191.static.kate-wing.si)
[20:09:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[20:10:27] *** Joins: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net)
[20:10:42] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 252 seconds)
[20:11:16] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[20:11:17] <geekosaur> ghcup can update itself
[20:11:53] <liz> if there's a new not-bleeding-edge update then it'll be available either through ghcup itself or your package manager
[20:11:56] <geekosaur> Cabal lib 3.6.3.0 was released this morning I believe, but cabal-install is still 3.6.2.0
[20:12:11] <geekosaur> hls hasn't updated yet
[20:12:42] <liz> is ghcup updated manually bt a team when new things like this come out?
[20:12:47] <liz> by*
[20:12:52] <merijn> "team"
[20:12:53] <merijn> lol
[20:13:01] <liz> or like, one dude
[20:13:07] <merijn> Pretty much :)
[20:13:17] <liz> hehe, is it manual then?
[20:13:36] <merijn> Almost certainly
[20:13:48] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab) (Ping timeout: 240 seconds)
[20:13:59] <geekosaur> ghcup itslef is updated periodically. when you run it it downloads a metadata file with current releases of everything available
[20:13:59] <liz> i can't imagine it'll take too long from now if it's not available yet
[20:14:12] <geekosaur> ghc 9.2.2 is already up, I'm seeing
[20:14:15] <liz> gonna check my ghcup now actually
[20:15:34] <liz> oh yep, ghc 9.2.2 and base 4.16.1.0 are up now
[20:15:45] *** Quits: juri_ (~juri@178.63.35.222) (Remote host closed the connection)
[20:16:24] <liz> and yeah, seems that cabal 3.6.3.0 isn't on ghcup 0.1.17.5
[20:16:35] <liz> i'm sure it'll go up at some point today
[20:16:58] <geekosaur> it'sonly a library update, won't show in ghcup
[20:17:06] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:17:09] <geekosaur> the command line tool is still 3.6.2.0
[20:17:50] <geekosaur> (the namingf is admittedly confusing but Cabal the library and cabal(-install) the tool are distinct things)
[20:17:52] <liz> silly question, can cabal 3.6.2.0 use cabal-lib 3.6.3.0?
[20:17:59] <geekosaur> sure
[20:18:19] <liz> okay yeah, i think i was conflating the two
[20:18:26] <geekosaur> they'd have updated cabal-install if it had been needed
[20:19:36] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:20:55] <geekosaur> while the two are closely related, the APIs change rarely enough that cabal-install can work with a wide range of Cabal libraries
[20:21:00] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Ping timeout: 240 seconds)
[20:21:06] *** Quits: ccntrq (~Thunderbi@2a01:c22:8df3:2600:efac:1374:1f51:a914) (Quit: ccntrq)
[20:21:17] <geekosaur> and has to because the Cabal library is how you interact with packages and package databases
[20:21:17] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[20:21:47] <geekosaur> which also means it's how cabal--install interacts with ghc, so you'd otherwise have to match cabal-install version with ghc version for things to work
[20:26:50] *** Joins: juri_ (~juri@178.63.35.222)
[20:27:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 268 seconds)
[20:28:09] *** Quits: Topsi (~Tobias@dyndsl-095-033-017-136.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[20:31:22] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:31:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:31:44] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:31:50] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:33:30] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:33:49] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:34:32] *** Quits: niekvandepas (~niekvande@77-161-122-185.fixed.kpn.net) (Ping timeout: 256 seconds)
[20:37:23] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[20:37:33] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:39:24] *** Joins: dschrempf (~dominik@17-12-190.cgnat.fonira.net)
[20:39:43] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[20:40:12] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:42:08] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:42:26] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:44:20] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:44:39] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:46:41] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:47:00] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:48:41] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:49:00] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:50:41] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[20:51:00] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[20:51:42] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:52:18] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[20:55:08] *** Joins: bahamas (~lucian@188.24.153.252)
[20:56:34] *** Quits: rtsn (~nstr@h-98-128-229-174.NA.cust.bahnhof.se) (Changing host)
[20:56:34] *** Joins: rtsn (~nstr@user/rtsn)
[20:57:48] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[20:59:12] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[20:59:58] *** Quits: bahamas (~lucian@188.24.153.252) (Ping timeout: 260 seconds)
[21:00:19] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[21:00:51] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[21:01:36] *** Joins: k8yun (~k8yun@user/k8yun)
[21:04:14] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[21:04:32] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[21:05:05] *** Quits: dschrempf (~dominik@17-12-190.cgnat.fonira.net) (Quit: WeeChat 3.3)
[21:08:12] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[21:08:13] *** Quits: mbuf (~Shakthi@110.225.240.104) (Quit: Leaving)
[21:08:32] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[21:10:13] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[21:10:31] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[21:11:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:3d9b:7fc7:6af0:b7ab)
[21:15:54] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:18:32] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[21:20:25] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[21:20:56] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[21:22:10] *** Joins: Guest26 (~Guest26@170.250.76.168)
[21:22:57] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[21:23:30] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[21:25:40] *** Quits: Guest26 (~Guest26@170.250.76.168) (Client Quit)
[21:27:02] *** Joins: bahamas (~lucian@84.232.140.52)
[21:28:56] *** Quits: ishutin (~ishutin@92-249-193-164.pool.digikabel.hu) (Ping timeout: 272 seconds)
[21:30:13] *** Joins: ishutin (~ishutin@92-249-150-139.static.digikabel.hu)
[21:32:34] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[21:32:52] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[21:34:33] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[21:34:51] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[21:35:27] *** Joins: Topsi (~Tobias@dyndsl-095-033-017-136.ewe-ip-backbone.de)
[21:37:07] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[21:37:25] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[21:39:21] *** Joins: notzmv (~zmv@user/notzmv)
[21:39:57] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:40:08] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[21:41:38] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[21:43:42] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:4154:7a97:7f52:6596)
[21:44:29] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[21:45:07] *** Joins: agumonkey (~user@88.163.231.79)
[21:47:46] *** Quits: srk (~sorki@user/srk) (Ping timeout: 250 seconds)
[21:48:03] *** Joins: Pickchea (~private@user/pickchea)
[21:49:56] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[21:52:27] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[21:52:46] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[21:53:47] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[21:54:40] <Franciman> why, in your opinion, haskell is much more successful than standard ml?
[21:54:50] <Franciman> with a lot more private investments and corporate usage?
[21:55:02] <Franciman> with a bigger community and lots of libraries
[21:56:45] * [exa] bisects the features
[21:56:50] <[exa]> ah yes, laziness
[21:57:19] <Franciman> in my view laziness is a non feature
[21:57:26] *** Quits: bahamas (~lucian@84.232.140.52) (Ping timeout: 272 seconds)
[21:57:32] *** Joins: anon04088520 (~anon04088@host-92-19-97-204.as13285.net)
[21:57:33] <Franciman> it makes everything harder
[21:57:36] <[exa]> otoh I wouldn't say it's strictly more successful, esp. compared to other (imo bigger) ML versions
[21:57:50] <Franciman> mlton is able to perform more aggressive optimisations
[21:57:53] <[exa]> it's just kinda more modern, cooler, etc
[21:58:27] <Franciman> like unboxing in all the cases
[21:58:36] <Franciman> thanks to the fact that sml is strict
[21:58:56] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:59:01] *** Quits: tito (tito@tilde.team) (Quit: zzz)
[21:59:02] <anon04088520> how would I write a status like gameStatus :: [theStatus] -> String and thisPlace is mapped to Yes?
[21:59:04] <Franciman> i would be surprised that it's the determining feature of haskell's success
[21:59:28] <[exa]> anyway laziness really really helps with making all these cool monadic tricks work without much magic, and allows you to just implement complicated stuff without going into details...it's just very practically convenient
[21:59:28] <Franciman> [exa]: ocaml has way fewer libraries than haskell
[21:59:40] *** Joins: InstX1 (~Liam@2601:6c4:4080:3f80:109e:5fbc:2ca5:978d)
[21:59:42] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[21:59:49] <Franciman> i would say that haskell has a bigger community
[21:59:54] <Franciman> most likely
[22:00:03] <[exa]> depends on how you measure it
[22:00:14] <[exa]> measuring sizes of library repos is probably biased :D
[22:00:21] <[exa]> (towards npm :D )
[22:00:25] <Franciman> ahah
[22:00:38] <Franciman> i thought it would be a good measure of how much community effort is put in the project
[22:00:44] *** Joins: dextaa_ (~dextaa@user/dextaa)
[22:01:03] <Franciman> but yes, if you write a library for doing the sum of two numbers
[22:01:07] <Franciman> it's unfair
[22:01:11] <[exa]> also, people generally prefer being practical and "on the safe side" to ricing the features
[22:01:15] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 256 seconds)
[22:01:37] *** Joins: aeson_q (~aeson_q@181.122.131.227)
[22:01:43] <aeson_q> hello
[22:01:52] <anon04088520> hi all, does anyone know how would to write a status like gameStatus :: [theStatus] -> String and thisPlace is mapped to Yes?
[22:01:53] *** Joins: wolfshappen (~waff@irc.furworks.de)
[22:02:09] <[exa]> anon04088520: not sure if we can understand the question, can you provide a bit more context?
[22:02:09] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[22:02:12] <Franciman> hi anon04088520 sorry but i don't understand :(
[22:02:34] <Franciman> [exa]: oh do you have any name i can lookup about «cool monadic tricks» laziness allows
[22:02:36] <Franciman> ?
[22:02:43] <geekosaur> ^ I don't for example see where/how `thisPlace` fits into it
[22:02:54] <anon04088520> for example, gameStatus thisPlace = Yes 
[22:03:26] <anon04088520> sorry 
[22:03:27] <aeson_q> I want to programatically create an Aeson.Type.Array. I cannot use Array $ fromList [ ...... ] because its value are mixed values. f.e. [1, "foo", false, ["bar", "baz"]]. How can I do that?
[22:03:27] <anon04088520> wait 
[22:03:31] *** Quits: Inst (~Liam@2601:6c4:4080:3f80:ddf8:a02:d4a2:e78f) (Ping timeout: 256 seconds)
[22:03:38] *** Joins: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net)
[22:04:01] <Franciman> aeson_q: ah this one is simpler than you think
[22:04:03] <Franciman> one sec
[22:04:08] <aeson_q> thanks
[22:04:22] <[exa]> aeson_q: you need to convert the things into the common wrapper, I guess Franciman is coming with an example
[22:04:24] <Franciman> :t Data.Aeson.Array
[22:04:25] <lambdabot> error:
[22:04:25] <lambdabot>     Not in scope: data constructor ‘Data.Aeson.Array’
[22:04:25] <lambdabot>     No module named ‘Data.Aeson’ is imported.
[22:04:28] <Franciman> ouch
[22:04:31] <Franciman> yes
[22:04:34] <Franciman> what [exa] says
[22:04:35] <anon04088520> gameStatus [thisPlace, None, Else] = "Yes - yes"
[22:04:36] <Franciman> :)
[22:04:47] <geekosaur> % :t Data.Aeson.Array -- hailmary
[22:04:48] <yahb> geekosaur: ; <interactive>:1:1: error:; Not in scope: data constructor `Data.Aeson.Array'; No module named `Data.Aeson' is imported.
[22:05:05] <aeson_q> try :t Data.Aeson.Value
[22:05:09] <geekosaur> % import Data.Aeson
[22:05:10] <yahb> geekosaur: ; <no location info>: error:; Could not find module `Data.Aeson'; Perhaps you meant Data.Version (from base-4.15.0.0)
[22:05:17] <anon04088520> does that sort of make sense 
[22:05:19] <anon04088520> ?
[22:05:21] <geekosaur> I don';t think either bot has aeson available
[22:05:25] <Franciman> anon04088520: what is your task?
[22:05:57] <Franciman> anon04088520: https://hackage.haskell.org/package/aeson-2.0.3.0/docs/Data-Aeson.html#t:Array as you can see
[22:06:04] <Franciman> it requires a list of values
[22:06:06] <anon04088520> If I get given a [theStatus] I was the map each element to a specific character 
[22:06:11] <aeson_q> you need to convert the things into the common wrapper, sorry I can't follow
[22:06:32] <Franciman> aeson_q: https://hackage.haskell.org/package/aeson-2.0.3.0/docs/Data-Aeson.html#t:Value <- this
[22:06:46] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:06:58] <Franciman> you have to define a list of Values, like this: [Number 13, Bool "True", String "Hello"]
[22:07:40] <[exa]> aeson_q: actually the "inner" problem is that you can't (easily) create a polymorphic list so stuff like `fmap toJson` can't save you
[22:08:17] *** Quits: yauhsien (~yauhsien@61-231-30-36.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:08:30] *** Joins: srk (~sorki@user/srk)
[22:08:40] <[exa]> anon04088520: kinda starting to make sense. So you have a functino that converts your type that contains None and Else to strings, and you just want all of them concatenated?
[22:08:52] <anon04088520> Yes
[22:09:32] <aeson_q> exa, Franciman, ok I get a step closer...
[22:09:35] <aeson_q> let me try
[22:09:43] <[exa]> anon04088520: so that's literally the function of concatMap
[22:10:00] <energizer> what is the relationship between Foldable and Monoid?
[22:10:32] <[exa]> anon04088520: I kinda expect that `concatMap gameStatus` could work
[22:10:48] <anon04088520> [exa]: like https://paste.tomsmeding.com/oire7Vgn
[22:10:53] <[exa]> if not, please make a pastebin with a minimal mess... ah there
[22:11:35] <[exa]> anon04088520: maybe if you want the spaces in between, try `intercalate " " . map gameStatus`
[22:11:35] <anon04088520> does that sort of explain it better?
[22:11:38] <[exa]> yes
[22:11:47] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[22:12:02] <[exa]> try the stuff from above, if not please supply at least a minimal definition of the gameStatus function so that we can see how it behaves
[22:12:05] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[22:12:07] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:12:32] <anon04088520> this is meant to be a basic function for a wordle clone project 
[22:12:58] <anon04088520> hope that provides some more context 
[22:14:32] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (Ping timeout: 240 seconds)
[22:15:26] <energizer> is Foldable for if you have a monoid but either it's not declared as a Monoid or it is a Monoid and you want to use a function other than its mappend?
[22:15:48] <liz> you can define a Foldable instance in terms of foldMap
[22:15:50] <liz> :t foldMap
[22:15:51] <lambdabot> (Foldable t, Monoid m) => (a -> m) -> t a -> m
[22:17:05] *** Joins: lisk1n (~liskin@notes.lisk.in)
[22:17:08] *** Quits: lisk1n (~liskin@notes.lisk.in) (Client Quit)
[22:17:30] <energizer> yeah but if that's what it was /for/, `fold` could just be on Monoid itself
[22:17:50] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[22:18:11] <[exa]> energizer: Foldable things can be interpreted as monoids, but don't need to satisfy monoid laws
[22:18:41] <[exa]> s/as/using/
[22:18:56] <energizer> [exa]: is there a useful case of Foldable that doesn't satisfy monoid laws?
[22:19:46] <aeson_q> ok, I ran into another problem with this...
[22:19:58] *** Joins: econo (uid147250@user/econo)
[22:20:12] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:20:40] <liz> energizer: if you want a small example, i recently used a Foldable to construct a tree from a file, directly from the IO; since reading from the file was non-associative i was folding over a non-monoid, but the fold was a succinct way of constructing the tree
[22:21:34] <[exa]> energizer: I might have mixed up the generalization directions there (*returns to the books*)
[22:21:49] <aeson_q> i have a date (instance of EpochTime) that I need to encode inside: Aeson.Types.Number $ date, seems like I need to convert EpochTime -> Data.Scientific.Scientific, any suggestions?
[22:21:49] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[22:21:53] *** Quits: `2jt (~jtomas@natwalu174-10.wi-fi.upv.es) (Ping timeout: 256 seconds)
[22:22:18] <liz> if the thing you're folding over is a Monoid, then foldl and foldr will be "the same" by the fact that monoids are associative necessarily
[22:22:25] <monochrom> Foldable is for what most people consider "container data structures" and when you want to perform monoid operations (what most people call "aggregate operations") on elements.
[22:23:11] <monochrom> A little bit more precisely, container data structures that feel like sequences.
[22:23:40] <monochrom> or can be downgraded to sequences.
[22:23:51] <[exa]> could you make up a "default" mappend for each Foldable?
[22:25:21] <monochrom> No, Foldable methods aren't enough to produce Foldable instances. Only enough for consuming elements.
[22:25:40] <monochrom> Well, unless you just want to produce a list.
[22:27:26] <anon04088520> so I am writing a function that takes a list of words and concatenates them and returns a string 
[22:28:25] <geekosaur> aeson_q, EpochTime is a wrapper for Int64, you can use fromEnum to extract the Int64 and encode it
[22:28:27] <anon04088520> but each item in the list needs to be mapped to a specific work 
[22:28:51] <[exa]> anon04088520: did you try the above code I sent?
[22:29:19] <anon04088520> I haven't heard of concatMap
[22:29:28] <[exa]> monochrom: you meant "to produce Monoid instances" ?
[22:29:32] <anon04088520> I couldn't get it to work
[22:29:40] <monochrom> No. No typo there.
[22:29:53] <[exa]> monochrom: oh so okay :D
[22:30:07] <anon04088520> is there a simpler way to do it?
[22:30:13] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[22:30:18] <[exa]> anon04088520: you can do it with "concat" and "map" separately
[22:30:51] *** Quits: aeson_q (~aeson_q@181.122.131.227) (Remote host closed the connection)
[22:30:52] *** Quits: Logio_ (em@kapsi.fi) (Remote host closed the connection)
[22:30:57] <monochrom> concat, map, and concatMap are all very simple.
[22:31:01] <anon04088520> could you show me an example?
[22:31:31] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[22:32:49] <[exa]> anon04088520: see above. Ideally we'd need a type of your `gameStatus` function
[22:34:13] <anon04088520> it's a list for example [Here] maps to "Yes"
[22:34:34] <anon04088520> [Here, Nowhere] maps to " Yes -"
[22:35:07] <anon04088520> gameStatus [Here, Nowhere] should evaluate to "Yes -"
[22:35:20] *** Joins: jonathanx_ (~jonathan@c-5eea36ff-74736162.cust.telenor.se)
[22:36:20] <[exa]> anon04088520: what's the name of the function that translates the things to strings? e.g. maps a single Here to "Yes" ?
[22:36:24] <monochrom> Do you know how to use "map" to go from [Here, Nowhere] to ["Yes", "-"]?
[22:36:51] <anon04088520> gameStatus
[22:36:53] <monochrom> After that, Data.List's intercalate can help you merge the words and insert spaces.
[22:36:58] *** Quits: liskin (~liskin@xmonad/liskin) (Quit: liskin)
[22:37:23] <anon04088520> monochrom: it should return a "Yes -" not ["Yes", "-"]
[22:37:35] <monochrom> Sure, see my second sentence.
[22:37:54] *** Joins: liskin (~liskin@xmonad/liskin)
[22:37:54] *** Quits: jonathanx_ (~jonathan@c-5eea36ff-74736162.cust.telenor.se) (Read error: Connection reset by peer)
[22:38:03] <geekosaur> or unwords?
[22:38:04] *** Quits: jonathanx__ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 256 seconds)
[22:38:17] <monochrom> Oh, haha, I forgot unwords.
[22:38:23] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:39:19] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[22:39:23] <anon04088520> It it possible to that without importing Data.List?
[22:39:33] <geekosaur> unwords is in the Prelude
[22:39:45] <geekosaur> > unwords ["Yes","-"]
[22:39:47] <lambdabot>  "Yes -"
[22:40:34] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[22:41:53] <anon04088520> but if I wanted to make the function myself 
[22:41:59] <anon04088520> and not use unwords 
[22:42:19] <monochrom> Then it is a bit of an annoying recursion you have to write.
[22:42:20] <anon04088520> e.g. gameStatus should map [Here] to "Yes"
[22:42:33] <monochrom> unwords does that already.
[22:42:50] <monochrom> Err, unwords does ["Yes"] to "Yes" already.
[22:42:57] <monochrom> I no longer understand your question.
[22:43:25] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[22:43:40] <anon04088520> How would I write it using recursion?
[22:43:49] <monochrom> You demand both "simple" and "write everything from scratch" as far as I can tell. Can't be done.
[22:43:53] <anon04088520> Can I find the source for unwords?
[22:44:00] <anon04088520> im sorry 
[22:44:25] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[22:45:04] <geekosaur> @src unwords
[22:45:04] <lambdabot> unwords [] = ""
[22:45:04] <lambdabot> unwords ws = foldr1 (\w s -> w ++ ' ':s) ws
[22:45:13] *** Joins: liz_ (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
[22:45:41] <monochrom> Heh that just goes down the rabbit hole of foldr1...
[22:45:41] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[22:46:00] <geekosaur> it could go downb the rabbit hole of intercalate instead…
[22:46:54] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[22:47:15] <monochrom> In elementary terms, the recursion of unwords requires two base cases, not just one. This is because ["yes"] -> "yes" does not fit the general case of ["yes", "no", "maybe"] -> "yes no maybe". I.e., the # of spaces is off by 1.
[22:47:27] <geekosaur> anon04088520, the usual ways to do this is two functions, one to do the mapping and one to do the combining. although in most cases I'd just use unwords or intercalate for the latter rather than writing it
[22:47:41] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[22:47:59] <monochrom> But if you are aware of that, it's a garden-variety recursion apart from that.
[22:48:22] <anon04088520> I wasn't aware of it 
[22:49:05] *** Quits: agumonkey (~user@88.163.231.79) (Ping timeout: 256 seconds)
[22:51:45] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[22:53:19] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[22:53:43] <anon04088520> geekosaur: how would I do the mapping?
[22:54:22] <geekosaur> % data Loc = Here | There | Somewhere
[22:54:22] <yahb> geekosaur: 
[22:54:32] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[22:54:54] <geekosaur> % loc Here = "Yes"; loc There = "No"; loc Somewhere = "-"
[22:54:54] <yahb> geekosaur: 
[22:55:23] <geekosaur> % unwords (map loc [Here, Somewhere, No]
[22:55:23] <yahb> geekosaur: ; <interactive>:19:39: error: parse error (possibly incorrect indentation or mismatched brackets)
[22:55:28] <geekosaur> % unwords (map loc [Here, Somewhere, No])
[22:55:28] <yahb> geekosaur: ; <interactive>:20:36: error:; * Data constructor not in scope: No :: Loc; * Perhaps you meant variable `to' (imported from Control.Lens)
[22:55:34] <geekosaur> % unwords (map loc [Here, Somewhere, There])
[22:55:34] <yahb> geekosaur: "Yes - No"
[22:55:39] <geekosaur> sorry about that last
[22:55:48] <geekosaur> slightly distracted here
[22:57:11] <anon04088520> sorry this is going sound silly, is loc a keyword or just made up?
[22:57:13] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[22:57:21] <geekosaur> I defined a function with three cases
[22:57:30] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[22:58:22] <geekosaur> it's the same as saying: loc place = case place of { Here -> "Yes"; There -> "no"; Somewhere -> "-" }
[22:58:40] <anon04088520> ahhh ok I see 
[22:58:48] *** Quits: anon04088520 (~anon04088@host-92-19-97-204.as13285.net) (Remote host closed the connection)
[22:59:06] *** Joins: anon04088520 (~anon04088@host-92-19-97-204.as13285.net)
[22:59:51] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[23:00:30] *** Quits: Topsi (~Tobias@dyndsl-095-033-017-136.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[23:02:05] *** Joins: Topsi (~Tobias@dyndsl-095-033-017-136.ewe-ip-backbone.de)
[23:02:27] *** Joins: coot (~coot@213.134.190.95)
[23:03:27] *** Joins: xkuru (~xkuru@user/xkuru)
[23:04:19] *** Joins: simendsjo (~user@84.211.91.241)
[23:08:47] *** Joins: bahamas (~lucian@84.232.140.52)
[23:08:49] *** Joins: vicfred (~vicfred@user/vicfred)
[23:10:00] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[23:10:06] <anon04088520> geekosaur: is this right? https://replit.com/join/idzzjvapir-sr53
[23:10:56] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[23:12:01] *** Joins: vicfred_ (~vicfred@user/vicfred)
[23:14:17] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[23:16:49] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[23:16:50] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[23:17:07] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[23:17:24] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:18:15] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[23:18:55] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[23:19:57] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 240 seconds)
[23:20:20] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[23:23:04] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[23:23:22] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[23:23:38] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[23:24:38] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:25:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:25:56] *** Lord_of_Life_ is now known as Lord_of_Life
[23:26:12] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[23:26:14] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:979b:b492:f897:b694) (Excess Flood)
[23:26:41] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:3065:9fc7:d58e:fc3e)
[23:26:53] *** Joins: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com)
[23:29:46] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[23:30:04] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[23:31:45] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[23:32:03] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[23:32:57] *** Quits: kuribas (~user@ptr-25vy0ia80zmfb26ginl.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:34:15] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:34:15] *** Quits: burnsidesLlama (~burnsides@rrcs-76-81-82-250.west.biz.rr.com) (Remote host closed the connection)
[23:36:06] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[23:36:24] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[23:36:25] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[23:36:41] *** Joins: notzmv (~zmv@user/notzmv)
[23:38:17] *** Quits: alx741 (~alx741@host-181-198-243-150.netlife.ec) (Read error: Connection reset by peer)
[23:42:22] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[23:42:42] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[23:45:20] *** Quits: fendor_ (~fendor@178.115.53.79.wireless.dyn.drei.com) (Remote host closed the connection)
[23:47:37] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[23:49:18] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[23:49:36] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[23:50:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[23:51:56] *** Quits: cc123652345762 (~cc1236523@116.24.67.150) (Remote host closed the connection)
[23:51:59] *** Joins: Logio (em@kapsi.fi)
[23:52:14] *** Joins: cc123652345762 (~cc1236523@116.24.67.150)
[23:53:24] *** Joins: deadmarshal_ (~deadmarsh@95.38.115.166)
[23:53:47] *** Quits: fockeriz1 (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Quit: WeeChat 3.3)
[23:55:45] *** Joins: alx741 (~alx741@host-181-198-243-150.netlife.ec)
[23:56:46] *** Joins: `2jt (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[23:57:58] *** Quits: deadmarshal_ (~deadmarsh@95.38.115.166) (Ping timeout: 256 seconds)
[23:58:20] *** Joins: cjb (~cjb@user/cjb)
