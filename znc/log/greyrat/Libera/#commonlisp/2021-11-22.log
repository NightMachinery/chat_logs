[00:01:38] *** Joins: dre (~dre@2001:8003:c932:c301:331c:7ae7:a9d3:b68)
[00:06:02] *** Joins: Oladon (~olad@98.43.81.226)
[00:08:41] *** Joins: cjb (~cjb@user/cjb)
[00:15:38] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[00:26:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[00:26:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[00:30:22] *** Joins: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com)
[00:38:14] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[00:39:02] *** Quits: ym (~ym@95.106.10.166) (Ping timeout: 240 seconds)
[00:39:57] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[00:40:38] *** Quits: X-Scale (~ARM@83.223.249.106) (Ping timeout: 260 seconds)
[00:41:50] *** X-Scale` is now known as X-Scale
[00:42:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c1d7:63de:66b3:4892) (Quit: Leaving)
[00:44:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ff5a:fb87:fc33:be7c)
[00:46:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:50:39] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[01:00:20] *** Quits: gaqwas (~john@dynamic-077-007-035-115.77.7.pool.telefonica.de) (Remote host closed the connection)
[01:00:25] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 256 seconds)
[01:07:14] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[01:16:01] *** Joins: X-Scale` (~ARM@31.22.202.54)
[01:16:32] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[01:18:46] *** X-Scale` is now known as X-Scale
[01:24:28] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[01:28:48] *** Joins: pjb (~pjb@user/pjb)
[01:33:24] *** Joins: gaqwas (~john@dynamic-077-007-035-115.77.7.pool.telefonica.de)
[01:42:21] *** Joins: Bike (~Bike@71.69.170.70)
[01:42:21] *** ChanServ sets mode: +o Bike
[01:43:44] *** Quits: gaqwas (~john@dynamic-077-007-035-115.77.7.pool.telefonica.de) (Remote host closed the connection)
[01:44:08] *** Joins: gaqwas (~john@dynamic-077-007-035-115.77.7.pool.telefonica.de)
[01:45:52] <dre> anyone thinking of doing AoC2021 ?
[01:46:02] <dre> I am nowhere near strong enough to do it in CL
[01:46:36] <hayley> This is why we have training montages, no?
[01:47:06] <Guest74> training montage?  I'll stumble through aoc as usual
[01:47:12] <dre> haha :D
[01:47:34] <dre> * rocky theme plays in the background *
[01:49:57] *** Quits: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com) (Quit: leaving)
[01:50:49] *** Joins: mrcom_ (~mrcom@2600:1700:c630:a570:ac34:bbf6:4227:4e94)
[01:51:33] <Guest74> ::notify Xach the link to ch-image on your skippy page is broken.
[01:51:34] <Colleen> Guest74: Got it. I'll let Xach know as soon as possible.
[01:52:01] *** Quits: dra (~dra@2a04:4540:6413:d500:cc20:68a7:2f44:5329) (Quit: Leaving)
[01:52:13] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 250 seconds)
[01:53:01] <_death> hmm, it's already been 7 years of aoc.. wouldn't want to break that chain
[01:55:15] <_death> oh, 6 years.. I created a directory for aoc2021
[01:55:20] *** Joins: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36)
[02:00:54] <Guest74> anybody remember who wrote that automatic downloader?  I might be too lazy to copy paste links this time.
[02:16:41] *** Joins: Colt (~Colt@user/colt)
[02:23:38] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:3917:83a0:3edb:bc3b) (Remote host closed the connection)
[02:24:03] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:a051:9b73:5f9e:29ea)
[02:24:10] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 260 seconds)
[02:33:09] *** Joins: pjb (~pjb@user/pjb)
[02:46:02] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:47:15] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 250 seconds)
[02:49:09] *** Quits: pve (~pve@87-93-196-132.bb.dnainternet.fi) (Quit: leaving)
[02:55:15] <Xach> Guest74: ok
[02:55:16] <Colleen> Xach: Guest74 said 1 hour, 3 minutes ago: the link to ch-image on your skippy page is broken.
[02:57:45] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:01:19] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 250 seconds)
[03:02:07] *** Joins: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com)
[03:03:29] *** Quits: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36) (Quit: Leaving)
[03:03:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 250 seconds)
[03:05:30] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[03:10:02] *** Quits: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com) (Quit: leaving)
[03:15:29] *** Joins: pjb (~pjb@user/pjb)
[03:16:41] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1094) (Remote host closed the connection)
[03:17:43] *** Joins: Jing (~hedgehog@2604:a840:3::1094)
[03:24:00] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:36:22] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[03:38:32] *** Quits: gaqwas (~john@dynamic-077-007-035-115.77.7.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:42:38] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[03:45:57] *** Quits: VincentVega (~user@212.241.24.160) (Remote host closed the connection)
[04:04:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[04:04:27] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:30:09] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[04:30:49] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[04:32:30] *** Joins: s-liao (~s-liao@101.86.101.64)
[04:41:52] <lexi_sparks> Hello all, appologies for the bother but I'm somewhat new to this - why is (member "DEC" '("DEC")), NIL? Does member eq things, rather than equal/equalp-ing them?
[04:43:20] <hayley> MEMBER uses EQL by default, try (member "DEC" '("DEC") :test #'string=)
[04:45:14] <lexi_sparks> hm, yep, that works! Thank you!
[04:45:29] <lexi_sparks> I'm surprised it doesn't say which method of equality it uses in the hyperspec
[04:53:26] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[04:53:52] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[04:56:03] <Nilby> You probably don't have the unabridged version. :)
[04:56:25] <Nilby> I joke. It's a little confusingly mentioned here http://www.lispworks.com/reference/HyperSpec/Body/sec_17-2-1.html
[04:58:00] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[04:59:07] <lexi_sparks> huh
[05:01:39] *** Joins: cjb (~cjb@user/cjb)
[05:01:39] <Nilby> wow, the links were actually changed. I really do have a different version.
[05:02:03] <Nilby> so actually, here http://www.lispworks.com/documentation/HyperSpec/Body/17_ba.htm
[05:05:32] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 240 seconds)
[05:12:12] <lexi_sparks> Wow, I have no idea how I would've found that, thank you!
[05:12:38] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[05:13:22] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[05:15:40] <Nilby> I had to recite it every day as a young lisp cultist
[05:15:53] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[05:20:51] *** Joins: Bike (~Bike@71.69.170.70)
[05:20:51] *** ChanServ sets mode: +o Bike
[05:28:55] <lexi_sparks> Is there like, a searchable version of the hyperspec anywhere? I mean, I know you can like, go to the symbols index and look stuff up by first letter, but someone has to have made something a little bit more friendly, right?
[05:32:20] <jcowan> Googling for [clhs caddr] etc. usually gives you the right result for caddr in the first link returned
[05:32:31] <Bike> there's http://l1sp.org/html/
[05:32:43] <Nilby> I just use C-s in the emacs info version, but I you can type !clhs in ddg
[05:33:04] <Bike> i don't know how extensive the search is beyond expanding from hyphens
[05:36:54] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:a051:9b73:5f9e:29ea) (Quit: Konversation terminated!)
[05:42:58] <lexi_sparks> Hm, okay!
[05:47:17] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:59:27] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:59:50] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 260 seconds)
[06:02:20] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[06:12:17] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[06:15:10] *** Joins: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36)
[06:17:47] <asarch> I am uploading a text file to the server and in the POST controller I get the file as #<FLEXI-STREAMS::VECTOR-INPUT-STREAM {1009939D43}>, how could I read its content and store it in a variable? (uiop:copy-stream-to-stream file-content string-buffer :element-type '(unsigned-byte 8)) does not work
[06:29:05] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[06:59:37] <hayley> Suppose I had some sort of string search optimisation that relies on some characters being more or less common than others. What would a good interface for communicating the entropy for each character be? Would one be able to provide Shannons or a probability, or would it be easier to just sort some options by likelihood?
[06:59:49] *** Joins: s-liao (~s-liao@101.86.101.64)
[07:01:01] <hayley> The former is more useful as it would help predict if the optimisation is useful at all, as a higher probability makes performance worse; and my library could handle finding the point of breaking even, rather than the client having to know this point as well as an entropy model.
[07:03:26] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[07:29:29] *** Joins: Oladon (~olad@98.43.81.226)
[07:29:51] *** Joins: Bike (~Bike@71.69.170.70)
[07:29:51] *** ChanServ sets mode: +o Bike
[07:30:37] <Bike> hm, did pkhuong's string-case do any of that
[07:30:45] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[07:30:57] <Bike> no.
[07:31:16] <hayley> Someone recommended it to me, but I recall it tested all the characters and did it all branch-free.
[07:31:36] <beach> Good morning everyone!
[07:31:39] <hayley> In this case, I'm trying to cut down on branches with sb-simd, which is going to be a bit different.
[07:31:40] <Bike> yeah. it also doesn't rely on statistics like that.
[07:31:44] <hayley> Good morning beach!
[07:31:46] <Bike> i'd default to probabilities, i spose
[07:31:59] <Bike> would help with composing them later if one wants to do that
[07:32:09] <hayley> Yes, I just don't think I can pick probabilities though.
[07:32:48] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 265 seconds)
[07:33:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[07:34:07] *** Joins: Colt2 (~Colt@ptr-1w23zewqpabrx5264q3.18120a2.ip6.access.telenet.be)
[07:34:07] *** Quits: Colt2 (~Colt@ptr-1w23zewqpabrx5264q3.18120a2.ip6.access.telenet.be) (Changing host)
[07:34:07] *** Joins: Colt2 (~Colt@user/colt)
[07:34:25] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:34:48] <Bike> asarch: alexandria:read-stream-content-into-string maybe?
[07:35:01] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 268 seconds)
[07:35:34] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:35:55] <Bike> or read-stream-content-into-byte-vector
[07:36:12] *** Quits: Colt2 (~Colt@user/colt) (Client Quit)
[07:36:50] <hayley> My regular expression compiler seems competitive with Hyperscan when a state machine is actually necessary. It's even a bit faster with no SIMD at all. But it gets smited when most of the entropy is in some constant string that Hyperscan knows how to turn into a FIND/SEARCH loop.
[07:37:01] *** Joins: Colt (~Colt@user/colt)
[07:44:51] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[07:51:15] <Bike> doesn't cl-ppcre do that too? i think there's some fanciness with character classes as well...
[07:52:21] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[07:58:26] <hayley> lol
[07:58:54] <_death> don't you just need an ordering?
[07:59:01] <hayley> Sorry. It does Boyer-Moore-Horspool for constant prefixes, but that's it.
[07:59:12] <Bike> oh, huh.
[07:59:17] <Bike> shows what i know
[07:59:32] <hayley> CL-PPCRE is...not very clever.
[08:00:04] <hayley> _death: Yes, though having a threshold for "sufficiently unlikely" would help with deciding to use this optimisation or not.
[08:00:45] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 250 seconds)
[08:01:35] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:01:49] <_death> so you can take a distribution specifier.. say :zipf or a function or a bunch of weights
[08:02:05] * hayley nods
[08:03:54] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:06:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:07:24] <lisp123> lexi_sparks: Don't Dispair! http://snowsyn.net/2020/01/01/local-clhs-access-in-emacs/
[08:07:57] <lisp123> Bind a key (usually C-c C-d h) so that you can instantly look up any term in the hyperspec
[08:13:08] *** Joins: lexi_sparks_ (~lexi_spar@user/lexi-sparks/x-9241394)
[08:17:06] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[08:17:35] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:20:49] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[08:22:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:25:13] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:38:36] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[08:41:13] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[08:42:05] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:45:33] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[08:48:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ff5a:fb87:fc33:be7c) (Quit: Leaving)
[08:49:13] *** Quits: asarch (~asarch@2806:10ae:7:8f5d:f80c:bba4:e38d:e36) (Quit: Leaving)
[08:49:42] *** Quits: lexi_sparks_ (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 260 seconds)
[08:49:42] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 260 seconds)
[08:54:33] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[08:57:34] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[09:00:27] *** Quits: Bike (~Bike@71.69.170.70) (Quit: sleepin)
[09:03:11] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[09:06:08] <hayley> The other problem is that, while the frequency of different English letters has been studied (think ETAOIN SHRLDU...) the frequency of other punctuation has not, but punctuation is more varied between authors and uses.
[09:06:14] <hayley> Oh, and digits too.
[09:12:33] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[09:14:28] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[09:18:48] *** Quits: etiago- (~etiago@cpc120220-heme13-2-0-cust103.9-1.cable.virginm.net) (*.net *.split)
[09:19:48] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[09:20:09] *** Joins: etiago (~etiago@user/etiago)
[09:24:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:24:59] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[09:24:59] *** Quits: les (znc@user/les) (*.net *.split)
[09:24:59] *** Quits: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff) (*.net *.split)
[09:24:59] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[09:24:59] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[09:25:00] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[09:25:00] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[09:25:00] *** Quits: spacebat3 (spacebat@spot.ubermonkey.net) (*.net *.split)
[09:25:00] *** Quits: gko (~user@user/gko) (*.net *.split)
[09:25:00] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[09:25:00] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[09:25:00] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[09:25:00] *** Quits: selwyn (~selwyn@user/selwyn) (*.net *.split)
[09:25:00] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:25:00] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[09:25:09] *** Joins: greaser|q (greaser@antihype.space)
[09:25:16] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[09:25:19] *** Joins: jackdaniel (~jack@turtleware.eu)
[09:25:21] *** Joins: gko (~user@user/gko)
[09:25:32] *** Joins: les (znc@user/les)
[09:25:39] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[09:25:40] *** Joins: remexre (~remexre@user/remexre)
[09:25:46] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[09:26:13] *** ChanServ sets mode: +o fe[nl]ix
[09:26:28] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:26:30] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[09:26:42] *** Joins: hexology (~hexology@user/hexology)
[09:26:52] *** Joins: selwyn (~selwyn@user/selwyn)
[09:26:56] *** Joins: dcx (~dcx@user/dac)
[09:26:59] *** Joins: spacebat3 (spacebat@spot.ubermonkey.net)
[09:27:50] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[09:27:50] *** Joins: greaser|q (greaser@user/greasemonkey)
[09:27:52] *** greaser|q is now known as GreaseMonkey
[09:30:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:35:06] *** Joins: spiaggia (~user@2a01:cb19:150:3400:f19c:ad83:b2f6:ddcb)
[09:36:16] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:38:14] *** Quits: jackdaniel (~jack@turtleware.eu) (Changing host)
[09:38:14] *** Joins: jackdaniel (~jack@user/jackdaniel)
[09:38:14] *** ChanServ sets mode: +o jackdaniel
[09:38:34] <jackdaniel> o/
[09:46:01] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[09:54:32] <beach> Hello jackdaniel.
[09:59:23] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[10:12:12] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:14:53] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 250 seconds)
[10:27:57] *** Joins: asarch (~asarch@2806:10ae:7:2a90:e4bd:2f97:9b68:ba28)
[10:38:10] <flip214> hayley: but see https://medium.com/creators-hub/what-i-learned-about-my-writing-by-seeing-only-the-punctuation-efd5334060b1
[10:56:00] *** Joins: gaqwas (~john@dynamic-077-007-152-128.77.7.pool.telefonica.de)
[10:58:11] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:01:00] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 260 seconds)
[11:02:18] <hayley> Yes, it depends on the author.
[11:06:43] *** Quits: asarch (~asarch@2806:10ae:7:2a90:e4bd:2f97:9b68:ba28) (Quit: Leaving)
[11:08:51] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:12:30] *** Joins: asarch (~asarch@2806:10ae:7:2a90:e4bd:2f97:9b68:ba28)
[11:12:49] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:20:33] <hayley> Worse, if you're not scanning over something that is "formal" English, say, a log file, then the entropy is probably lower, as there are more repeated elements in each log entry.
[11:20:55] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:21:56] <asarch> How could you convert this stream #<FLEXI-STREAMS::VECTOR-INPUT-STREAM {10037B69E3}> into the stream type for the (read-sequence) function?
[11:22:09] <hayley> It is a stream.
[11:22:16] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[11:23:07] <jackdaniel> and it is a well identified stream (10037B69E3 :)
[11:23:08] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[11:23:29] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[11:25:10] <asarch> With (with-open-file (file-stream …) (uiop:copy-stream-to-stream uploaded-file-buffer file-stream :element-type '(unsigned-byte 8)))) I can save it into a file and then open it to slurp the content
[11:25:23] <asarch> I would like to do it "on the fly"
[11:25:26] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[11:26:13] <asarch> If I use it "directly" I get The value 35 is not of type CHARACTER when setting an element of (ARRAY CHARACTER)
[11:27:01] <hayley> Make sure you are using a byte vector, rather than a string vector (a vector of characters).
[11:27:02] <jackdaniel> perhaps your output stream doesn't have a correct element-type ?
[11:28:08] <asarch> That values comes from a POST message of the Caveman2 web server
[11:28:21] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:30:11] <asarch> What is a byte vector?
[11:31:19] <hayley> A vector with element type (unsigned-byte 8)
[11:31:38] <hayley> (The term isn't standardised anywhere, but it is "a vector containing bytes")
[11:35:53] <asarch> How do you convert a byte vector into a string?
[11:36:41] <jackdaniel> you may use coerce
[11:36:43] <hayley> You would need to decode it. The library Babel has babel:octets-to-string for this purpose.
[11:36:44] <asarch> (read-sequence file-content flexi-stream) (format t "Content: ~a~%" file-content) only shows: Content: #()
[11:36:53] <jackdaniel> (coerce object result-type &optional your-diety-of-choosing)
[11:37:34] <hayley> READ-SEQUENCE only reads as much as the vector fits, without trying to resize the vector. Bike mentioned that Alexandria has a function to produce a vector with all the contents.
[11:38:00] <hayley> I haven't tested this at all, but (babel:octets-to-string (alexandria:read-stream-content-into-byte-vector stream))
[11:44:52] *** Joins: pve (~pve@188-67-241-107.bb.dnainternet.fi)
[11:44:57] *** Quits: spiaggia (~user@2a01:cb19:150:3400:f19c:ad83:b2f6:ddcb) (Quit: ERC (IRC client for Emacs 26.3))
[11:45:59] <asarch> Yeah!
[11:46:09] <asarch> Thank you guys! Thank you very much! :-)
[11:46:45] *** Quits: mrcom_ (~mrcom@2600:1700:c630:a570:ac34:bbf6:4227:4e94) (Ping timeout: 250 seconds)
[11:46:45] <asarch> How many kinds of "streams" are there?
[11:47:21] *** Joins: mrcom_ (~mrcom@2600:1700:c630:a570:ec93:146f:866a:1e79)
[11:47:28] <hayley> I suppose six, of {binary, character} × {input, output, bi-directional}.
[11:49:11] <jackdaniel> you may have an object stream, or stream of pointer gestures
[11:51:07] <jackdaniel> also there may be echo streams, broadcast streams and with gray streams you may have looping-streams-that-pass-a-message-after-a-minute, so there are plenty of choices ,)
[11:52:16] <asarch> Is it the same as a sequence?
[11:57:47] <jackdaniel> why do you think it is?
[11:58:29] <asarch> Just confirming. As far I know, a sequence is a list of something
[11:58:44] <asarch> Stream, vector, sequence
[11:58:54] <jackdaniel> I think that you are long enough to know that already
[11:59:07] <jackdaniel> you are using common lisp long enough*
[12:00:11] <asarch> Well, if I was alone I never could decode the content of the file stream without your help
[12:00:38] <jackdaniel> perhaps you should read some introductory material like "practical common lisp"?
[12:00:41] <jackdaniel> minion: tell asarch about pcl
[12:00:42] <minion> asarch: look at pcl: pcl-book: "Practical Common Lisp", an introduction to Common Lisp by Peter Seibel, available at http://www.gigamonkeys.com/book/ and in dead-tree form from Apress (as of 11 April 2005).
[12:01:23] <asarch> It is not something like: FILE* fp = fopen(…); fscanf(fp, …); …
[12:02:50] <asarch> flexi-streams, babel, alexandria, uiop
[12:03:36] <hayley> Yet POSIX(?) files do not handle the problems of character encodings, or provide combinators and tools to make your own streams.
[12:05:10] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[12:05:59] <jackdaniel> bytes shalt be thou strings and pipes shalt be thou function calls, Also sprach Zarathustra
[12:07:32] <flip214> jackdaniel: next you'll quote Götz von Berlichingen...
[12:07:41] <jackdaniel> :)
[12:09:19] <asarch> There should be a book about streams in Common Lisp
[12:09:34] <asarch> Something a la "Let Over Lambda" book
[12:09:45] <jackdaniel> they are pretty much covered in books I've linked, no worries
[12:10:08] <asarch> And a good example would be to open a reproduce a MP3 file
[12:10:14] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[12:12:01] <jackdaniel> funnily enough this is also covered in one of books I've linked
[12:13:51] <rotateq> Common Lisp Recipes covers this topic also
[12:14:24] <asarch> The expert level would be one of NeHe's OpenGL tutorial where he opens an AVI video and plays back the content over the faces of a rotating cube
[12:14:58] <rotateq> so first getting the basics right as always
[12:23:58] *** Quits: gaqwas (~john@dynamic-077-007-152-128.77.7.pool.telefonica.de) (Read error: Connection reset by peer)
[12:24:09] *** Joins: gaqwas (~john@dynamic-077-007-152-128.77.7.pool.telefonica.de)
[12:29:03] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[12:29:06] *** Quits: gaqwas (~john@dynamic-077-007-152-128.77.7.pool.telefonica.de) (Ping timeout: 245 seconds)
[12:30:06] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Quit: You have been kicked for being idle)
[12:51:18] *** Joins: pjb (~pjb@user/pjb)
[12:55:36] *** Joins: igemnace (~ian@user/igemnace)
[12:58:16] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[12:58:28] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:35] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:58:35] *** Quits: jsatk (sid304796@id-304796.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:58:36] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[12:58:41] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[12:58:53] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:02] *** Quits: dbotton (sid492350@id-492350.lymington.irccloud.com) (Ping timeout: 240 seconds)
[12:59:03] *** Quits: griffinmb (sid410590@id-410590.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:59:04] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:59:11] *** Quits: jmercouris (sid438340@id-438340.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: gendl (sid100083@id-100083.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[12:59:11] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 264 seconds)
[12:59:19] *** Quits: stylewarning (sid241636@id-241636.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[12:59:22] *** Quits: victor_ (sid208353@id-208353.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:59:32] *** Quits: d_run (sid83858@id-83858.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[12:59:32] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[12:59:47] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 264 seconds)
[12:59:58] <asarch> Have a nice day :-)
[13:00:01] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 265 seconds)
[13:00:01] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[13:00:03] *** Quits: asarch (~asarch@2806:10ae:7:2a90:e4bd:2f97:9b68:ba28) (Quit: Leaving)
[13:00:11] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[13:00:27] *** Joins: jsatk (sid304796@helmsley.irccloud.com)
[13:00:27] *** Joins: sgithens (sid10659@helmsley.irccloud.com)
[13:00:33] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[13:00:35] *** Joins: drmeister (sid45147@ilkley.irccloud.com)
[13:01:24] *** Joins: jmercouris (sid438340@hampstead.irccloud.com)
[13:01:35] *** Joins: hubvu (sid495858@user/hubvu)
[13:01:41] *** Joins: splittist (sid17737@tinside.irccloud.com)
[13:01:48] *** Joins: pl (sid98063@helmsley.irccloud.com)
[13:01:48] *** ChanServ sets mode: +o pl
[13:01:48] *** Joins: conjunctive (sid433686@helmsley.irccloud.com)
[13:02:08] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[13:02:18] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[13:02:54] *** Joins: d_run (sid83858@hampstead.irccloud.com)
[13:03:06] *** Joins: travv0 (sid293381@user/travv0)
[13:03:18] *** Joins: griffinmb (sid410590@helmsley.irccloud.com)
[13:03:35] *** Joins: victor_ (sid208353@tinside.irccloud.com)
[13:04:28] *** Joins: IUSR (sid348938@hampstead.irccloud.com)
[13:04:28] *** Joins: iisi (sid19824@hampstead.irccloud.com)
[13:04:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:04:41] *** Joins: stylewarning (sid241636@helmsley.irccloud.com)
[13:04:48] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[13:08:15] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 264 seconds)
[13:11:25] *** Joins: travv0 (sid293381@user/travv0)
[13:11:57] *** Joins: VincentVega (~user@212.241.24.160)
[13:12:59] *** Quits: dre (~dre@2001:8003:c932:c301:331c:7ae7:a9d3:b68) (Quit: Leaving)
[13:13:40] *** Joins: ym (~ym@95.106.10.166)
[13:20:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:20:46] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 245 seconds)
[13:32:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:45:37] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[13:45:53] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[14:01:28] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[14:03:37] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Remote host closed the connection)
[14:03:55] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:09:51] *** Joins: paule32_ (~paule32@user/paule32)
[14:11:19] *** Joins: pjb`````` (~pjb@2a01cb040b1ae1005c9cdd62a9adaa86.ipv6.abo.wanadoo.fr)
[14:11:32] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:13:06] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 260 seconds)
[14:15:47] *** Quits: pjb`````` (~pjb@2a01cb040b1ae1005c9cdd62a9adaa86.ipv6.abo.wanadoo.fr) (Quit: ERC (IRC client for Emacs 27.2))
[14:18:45] *** paule32_ is now known as paule32
[14:28:29] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[14:33:00] *** Quits: hayley (~theemacss@user/hayley) (Killed (platinum.libera.chat (Nickname regained by services)))
[14:33:14] *** Joins: Guest6831 (~theemacss@2001:470:69fc:105::234)
[14:34:18] *** Guest6831 is now known as hayley
[14:34:22] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[14:34:22] *** Joins: hayley (~theemacss@user/hayley)
[14:40:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:41:35] *** Joins: random-nick (~random-ni@87.116.180.220)
[14:43:36] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 268 seconds)
[14:47:11] *** Joins: rogersm (~rogersm@90.166.177.48)
[14:56:51] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[14:57:20] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:01:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[15:06:06] *** Joins: X-Scale` (~ARM@31.22.202.54)
[15:08:16] *** Quits: X-Scale (~ARM@31.22.202.54) (Ping timeout: 268 seconds)
[15:08:21] *** X-Scale` is now known as X-Scale
[15:17:15] *** Quits: puke (~puke@user/puke) (Quit: puke)
[15:40:30] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[15:41:17] *** Joins: igemnace (~ian@user/igemnace)
[15:54:27] *** Quits: mrcom_ (~mrcom@2600:1700:c630:a570:ec93:146f:866a:1e79) (Ping timeout: 264 seconds)
[15:54:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:09:48] *** Joins: pjb (~pjb@user/pjb)
[16:13:22] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[16:22:29] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[16:22:59] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[16:26:54] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[16:39:31] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[16:55:01] *** Joins: heisig (~heisig@131.188.6.20)
[17:00:58] *** Joins: pjb (~t@hubble.informatimago.com)
[17:01:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:02:01] *** Joins: s-liao (~s-liao@101.86.101.64)
[17:21:21] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[17:24:55] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[17:25:36] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[17:26:03] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[17:26:33] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[17:34:37] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[17:34:38] *** Quits: specbot (~specbot@common-lisp.net) (Read error: Connection reset by peer)
[17:35:38] *** Joins: minion (~minion@common-lisp.net)
[17:35:40] *** Joins: specbot (~specbot@common-lisp.net)
[17:36:42] *** Joins: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de)
[17:38:35] *** Joins: Bike (~Bike@71.69.170.70)
[17:38:35] *** ChanServ sets mode: +o Bike
[17:38:43] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:59:13] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[17:59:35] *** Quits: hobo (~hobo@69.218.33.204) (Ping timeout: 246 seconds)
[18:00:14] *** Joins: hobo (~hobo@69.218.33.204)
[18:00:32] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[18:00:45] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[18:00:45] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:03:16] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Client Quit)
[18:07:45] *** Quits: hobo (~hobo@69.218.33.204) (Read error: Connection reset by peer)
[18:08:16] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[18:12:55] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[18:14:26] *** Joins: s-liao (~s-liao@101.86.101.64)
[18:16:53] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:19:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80:1d47:7f49:468:ba96)
[18:21:56] *** Joins: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff)
[18:25:01] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:25:29] *** Joins: igemnace (~ian@user/igemnace)
[18:30:05] *** Quits: paule32 (~paule32@user/paule32) (Remote host closed the connection)
[18:35:00] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[18:35:34] *** Joins: Guest7491 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[18:39:43] *** Quits: heisig (~heisig@131.188.6.20) (Quit: Leaving)
[18:41:56] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[18:46:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:51:02] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 240 seconds)
[18:54:56] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[19:01:41] *** Quits: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:06:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:07:51] <Guest7491> is there any consistency in drawing apis arguments or expected args. (rectangle x1 y1 x2 y2...)(rectangle x1 y1 width height...)(rectangle pt1 pt2...)...
[19:08:25] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:09:31] *** Quits: VincentVega (~user@212.241.24.160) (Ping timeout: 245 seconds)
[19:10:05] <beach> You may check what CLIM does.  It often has two functions like DRAW-RECTANGLE and DRAW-RECTANGLE*.
[19:10:34] <beach> ... depending on the arguments are points or single coordinates.
[19:10:36] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 268 seconds)
[19:11:07] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:11:08] <Guest7491> is there a convention they follow in the industry or just it's own specification?
[19:11:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[19:11:48] *** Joins: Krystof (~user@81.174.155.115)
[19:12:43] <beach> Guest7491: I am willing to bet that the CLIM specification was written before most APIs you might use today, so the question is whether industry followed established conventions or not.
[19:13:25] <beach> Plus, most languages don't allow names with `*' in them, so that's already a problem for the others.
[19:13:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:13:59] *** Joins: VincentV` (~user@212.241.24.160)
[19:14:09] <Guest7491> i would  probably say something list point-rectange or pt-rectangle.  an asterisk doesn't scream point to me, but maybe that's just me.
[19:14:16] <Guest7491> s/list/like
[19:14:17] <shka> anybody here use define-vop in sbcl? I wonder how hard it would be to define vop which would be like cl:< but instead of t or nil it would return 1 or 0
[19:14:54] <shka> for double-floats
[19:15:09] <beach> Guest7491: Can I assume you are designing something in Common Lisp?  Then many Common Lisp programmers will be aware of the CLIM protocols.
[19:15:58] <Guest7491> by the amount of questions I would assume most are not, and are probably familiar with other apis.
[19:16:13] <beach> Guest7491: As I recall, there are plenty of other examples in Lisp (even before Common Lisp) where * means "spread arguments".
[19:16:59] <beach> Guest7491: Sure, most programmers are not familiar with Common Lisp, that's for sure, so if you want to cater to those, then do something else.
[19:17:13] <Guest7491> I'm not understanding spread arguments.  do you mean the ones labeled as such are the ones that don't use poitnts?
[19:17:22] <beach> Guest7491: But then you are probably better of not using Common Lisp.
[19:17:35] <Guest7491> well, that's unnecessary
[19:18:16] <beach> The * versions use single coordinates, so they are the "spread" versions.
[19:19:20] <Guest7491> that's interesting.  Is it mentioned anywhere?
[19:20:21] <beach> Section 2.3 in the CLIM specification.
[19:21:07] <Guest7491> I mean in something a regular lisp programmer would read.  The convention must predate CLIM, no?
[19:21:43] <Nilby> There is a convention for drawing API arguments which comes from PostScript and is used in many things, e.g. cairo, svg, etc
[19:21:44] <Guest7491> I'm not sure I should use a convention that is only known to people who read the clim spec.
[19:22:33] <beach> Whatever.
[19:23:10] <Guest7491> nilby: I'll have to look into that, I just remember ps being backwards.
[19:23:16] <shka> i think that you make "convention" much bigger obstacle then it really is
[19:23:45] <shka> but that's my opinion
[19:24:50] <Nilby> but as for Lisp, convention is whatever I want since I can "zero cost" macro around everything
[19:24:53] <Guest7491> shka:possibly.  I think I frequently do that. I don't expect others to think like me.
[19:25:54] <shka> substance is infinitely more important then the convention
[19:26:51] <_death> there is no single convention.. but this one is etched deep in my skull http://www.antonis.de/qbebooks/gwbasman/line.html
[19:27:30] <beach> For what it's worth, every "regular lisp programmer" should read the CLIM II specification.  It's a good tutorial on the use of CLOS-style object-oriented programming.  Plus, McCLIM is a very good implementation of it that I encourage GUI programmers to use.
[19:28:32] <Guest7491> -death: is that basic?
[19:28:41] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[19:28:42] <_death> yeah
[19:28:50] <Nilby> Xach's vecto uses a simlar API
[19:28:59] *** Joins: aartaka (~aartaka@5.1.53.225)
[19:29:58] <Guest7491> I think my vector stuff is pretty much the same as vecto or svg.
[19:30:16] <Guest7491> by vector stuff i mean path building.
[19:31:43] <Guest7491> shka: I guess that's a good point.  Just do it and see if anybody complains.
[19:32:26] *** Quits: VincentV` (~user@212.241.24.160) (Ping timeout: 245 seconds)
[19:33:18] <beach> I myself understood the virtues of CLOS-style object-oriented programming from reading the CLIM II.  Reading Keene's book was just not enough.  And since I rarely think of myself as unique, I think that any Common Lisp programmer who wants to use CLOS seriously, should read the CLIM II specification.
[19:34:10] <Guest7491> Does it cover additional aspects of CLOS?  I found Keene quite illuminating and straightforward.
[19:34:29] <Guest7491> I had a very hard time with the CLIM spec.
[19:34:36] <Guest7491> years ago.
[19:36:14] <beach> I found that the concept of a protocol was made clear by the CLIM spec.  For example that the important parts of a class are the initialization arguments and the functions that can be applied to instances of it.  So the slots are implementation details.
[19:36:38] <beach> Also the use of auxiliary methods in the drawing functions.
[19:37:13] <etimmons> Not quite the same, but Python (the "language", not compiler) also uses * to deal with spread arguments. f(*a) is equivalent to (apply #'f a). And def f(*a) is equivalent to (defun f (&rest a))
[19:40:37] <Guest7491> beach: maybe I'll have to revisit it. at least the aux methods as to how they pertain to drawing functions.
[19:42:16] <Guest7491> I do remember thinking it was too complicated at the time and just wanted something more simple.
[19:43:12] <beach> That happens to me when I don't have all the prerequisites to understand it.
[19:44:12] <Guest7491> I'm usually the opposite.  fine with complexity until I see how it can be simplified.
[19:46:26] <Guest7491> is the clim 2 spec a living document?  is this link fine? http://bauhh.dyndns.org:8000/clim-spec/1.html
[19:49:22] <beach> It is not being modified, other than to add annotations.  That's the site we typically use.
[19:49:43] <Guest7491> ok thanks
[19:53:50] <beach> Since we are on the subject, let me give you this link that scymtym posted in #clim:  https://techfak.de/~jmoringe/clim-listener-1.ogv
[19:54:10] <beach> Just to push the use of McCLIM as a very competent library.
[19:57:03] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 250 seconds)
[19:57:53] *** Joins: aartaka (~aartaka@5.1.53.225)
[20:04:02] <Guest7491> Yeah, before I found lisp I thought drawing to a stream would be good.  Seeing demos of mcclim made me reconsider that.  I much rather just have an object displayed in it's own window and not my repl so I can see everything at once.  which is what I currently do.
[20:04:19] <shka> i personally found AMOP to be truly illuminating, i think that in the same way beach experienced CLIM ||
[20:04:52] <Guest7491> I definitely need to reread that one.  Think I read it too early.
[20:05:26] <shka> i have a paper back, i highly recommend getting one as well
[20:05:41] <_death> Guest7491: you're conflating two things.. you can have a separate pane for the graphics and just draw to it (panes are streams)
[20:05:50] <shka> because even if you won't read it, the cover is VALUE in itself :P
[20:06:02] <lisp123> Guest7491: https://users.cs.duke.edu/~vahdat/ps/mop.pdf helped me a lot re amop
[20:06:16] <Guest7491> _death: no, i'm not.  I'm just stating what I thought in the past.  I know you can do differently in clim.
[20:11:09] *** Quits: ym (~ym@95.106.10.166) (Quit: Leaving)
[20:12:34] <lisp123> beach: Nice video, thanks for sharing. What was interesting was the GUI objects were just part of a stream, and they moved up the page as more output was written to stream
[20:13:22] <beach> Yes, that's the way the listener works.  But as _death pointed out, this is just one of several possible choices.
[20:14:05] <beach> The listener, by the way, is not in the specification.  It's a McCLIM thing, just like the "debugger" (i.e. the backtrace inspector), Clouseau, and more.
[20:15:36] <lisp123> I see. Looks good!
[20:15:51] <etimmons> A recent Reddit comment re: McCLIM made me a little sad. Said they didn't think McCLIM was "production ready", largely because of its look and feel
[20:16:22] <beach> There are still a few quirks, but nothing serious.
[20:17:34] <Guest7491> That
[20:17:53] <Guest7491> s the problem with theming.  They'll just blame the programming :)
[20:18:07] <beach> I keep wondering why some people prefer to take a huge amount of work and pain with FFI-bases solutions AND complain about McCLIM, rather than contributing a small amount of work to McCLIM for their own purpose, but also to share with others.
[20:18:17] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 250 seconds)
[20:18:51] <_death> I think the usual issues are pretty serious though.. I tried showing mcclim thing I wrote to nontechnical people and the quirks I've "gotten used to" (possibly due to the window manager I use and such) really jarred them..
[20:19:30] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[20:20:15] <beach> I can understand that, but I also think that the amount of work required to fix those quirks is small enough that it does not justify abandoning McCLIM in favor of a much larger amount of work and lots of pain, with an FFI solution.
[20:21:00] <beach> And again, the FFI solution solves only the immediate problem, whereas fixing a McCLIM quirk is an investment, and a help to others.
[20:21:02] <Guest7491> I think an unopinionated framework upon which opinions can be made is the way.  I may be biased though :)
[20:21:38] <Guest7491> theoretically you could write mcclim on top of what I'm doing.
[20:22:08] <lisp123> Guest7491: Great! Are you building some low-level framework for dealing with graphics?
[20:22:25] <beach> McCLIM is quite "unopinionated".  You can write everything using sheets sand events if you like.
[20:22:48] <beach> s/McCLIM/CLIM/
[20:23:34] <beach> Plus, CLIM consists of a significant number of protocols, each with at least one default implementation, but the programmer can substitute other implementations and they will fit right in.
[20:23:40] <Guest7491> lisp123: graphics, surfaces, keybinding, desktop integration, etc... all as separate modules.
[20:23:44] <_death> beach: maybe.. these are longstanding issues though.. I tried to find the root cause for one a year ago or so, but that was when I was less familiar with mcclim and X, and I'm probably still not familiar enough to fix it without making a good effort and taking some time.. and my round-to-its are thin nowadays.. and currently I'm looking at (ugh) web-based UIs and javascript anyway :/
[20:24:11] <beach> _death: I see.
[20:24:27] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 264 seconds)
[20:24:28] <lisp123> Guest7491: That's awesome. Good luck! (And selfishly waiting for it to be plugged into McClim :))
[20:25:02] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[20:25:17] <lisp123> _death: If somebody can bind web-based UIs / javascript to McClim, that would be a huge gamechanger for CL
[20:25:36] <beach> The main "problem" with McCLIM, as I see it, is that we still don't (or not last time I looked) have a documentation that explains CLIM from the bottom up.  Such a document would be great for people used to more traditional GUI libraries, because they could stop after chapter 1 and it would be familiar to them.
[20:25:40] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[20:25:49] <lisp123> Portability of the web browser is unmatched
[20:26:05] <_death> lisp123: I think scymtym had a "broadway" branch doing some of that
[20:26:19] <Guest7491> I'm thinking websockets is the way i'll go for web surfaces.
[20:26:28] <Guest7491> If i understand websockets correctly.
[20:26:48] <lisp123> beach: I will have a go at it in the coming months (not that I will be any good at it). I must admit I read the first few pages / chapters of the manual and then gave up because it was too advanced
[20:27:23] <beach> lisp123: When you do have a go, feel free to ask questions.
[20:27:24] <etimmons> lisp123: I believe scymtym was playing in that area. Using the Broadway protocol, IIRC? Plus I think I saw a basic (display only?) demo from jackdaniel in that area using hunchentoot
[20:29:15] *** Joins: Catie (~user@user/catie)
[20:29:47] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Remote host closed the connection)
[20:29:48] <lisp123> _death & etimmons: Thanks, good to hear. I really think that would be a game changer. Yes, jackdaniel mentioned a display only Canvas output earlier, but I wasn't sure if input would be possible
[20:30:01] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[20:30:13] <lisp123> beach: Will do
[20:30:23] <_death> it's possible, sure.. look at CLOG (websockets)
[20:30:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:31:30] <lisp123> True
[20:42:05] <scymtym> broadway uses websockets to communicate events from the client (browser) to the server and draw commands from server to the client. the client can either receive compressed raster data which it puts into "textures" (GTK does that and i started out doing that) or the client can draw into a canvas according to the draw commands sent by the server (that's what i'm doing now)
[20:42:26] *** Joins: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it)
[20:42:47] *** Joins: paule32 (~paule32@user/paule32)
[20:43:35] *** Quits: paule32 (~paule32@user/paule32) (Client Quit)
[20:44:11] *** Joins: paule32 (~paule32@user/paule32)
[20:44:48] <Guest7491> cool.  Might be nice if I can just piggyback on clog for that.
[20:46:19] *** Joins: vats (~vats@106.67.68.168)
[20:46:22] <lisp123> scymtym: For user input, do you take low-level data from the browser [(x,y) coordinates] and then map it to which part of the canvas it relates to?
[20:46:22] <_death> I wish CLOG had a mature high-level GUI library like qooxdoo.. since I don't have time to write it, I picked the latter for my use case and can now expect to write some Java-ish JavaScript..
[20:46:51] <random-nick> lisp123: portability of the web browser isn't really unmatched
[20:47:03] <random-nick> java is pretty much more portable
[20:47:24] <lisp123> random-nick: True :)
[20:49:38] <scymtym> lisp123: yes
[20:50:21] <lisp123> _death: I played around with CLOG today. Looked good. But then I felt its too much of an investment to learn the idiosyncrasies of a bespoke library
[20:50:28] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[20:51:04] <lisp123> scymtym: Thanks for confirming
[20:52:22] <Guest7491> ideally I'd like a web based backend to run it's own event handler that can be updated from the lisp side.  I'm not sure I want to go the route of constant back and forth.
[20:52:26] <scymtym> lisp123: this is from the raster image uploading version: https://techfak.de/~jmoringe/mcclim-broadway-7.ogv
[20:53:53] <_death> Guest7491: CLOG does that.. you can say something like (make-instance 'button :label "Foo" :callback #'do-something) in the REPL, and you get a button popping up in the browser, and the callback called when you click it
[20:55:14] <Guest7491> I guess I'll have to look at it.  Is it themable with css?  My theming stuff is kinda close to css so that might work.
[20:56:21] <_death> yeah.. for me it's a disadvantage currently.. since I don't want to write at the level of html/css
[20:57:31] <lisp123> scymtym: That looks really good!!
[20:58:03] <scymtym> lisp123: thanks
[21:01:35] <etimmons> scymtym: It really does look good. TBH, seeing that video was a big thing that pushed me over the edge to actually start using McCLIM. I didn't want want to be locked into using X (with or without forwarding).
[21:01:57] <Guest7491> _death: I just need to figure out a way to convert my stuff.  I think it's css like, but I don't really know css.
[21:02:40] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:03:36] <scymtym> etimmons: makes sense
[21:08:35] *** Joins: Oladon (~olad@98.43.81.226)
[21:13:54] <etimmons> I'm not at the point where I need browser based CLIM yet. But when I get there, I plan on helping one of the work-in-progress ways of doing so however I can.
[21:14:33] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 268 seconds)
[21:15:41] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[21:18:12] <lisp123> Likewise. I'm glad for today's discussion
[21:20:41] <Guest7491> yeah, web is definitely last on my list.  Eventually it has to be dealt with because websites are a thing. However, for desktop apps i definitely think it's the wrong focus.
[21:21:11] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 245 seconds)
[21:21:59] *** Joins: aartaka (~aartaka@5.1.53.225)
[21:22:03] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 264 seconds)
[21:22:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 245 seconds)
[21:24:31] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[21:26:03] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[21:26:43] <jackdaniel> oh, some McCLIM talk, what did I miss?
[21:26:44] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[21:30:54] <lisp123> jackdaniel: Basically how good it is and a few of us ready to jump onto a Browser CLIM
[21:31:17] <jackdaniel> I've just finished reading :) thanks for the summary
[21:33:29] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:44:05] *** Quits: vats (~vats@106.67.68.168) (Read error: Connection reset by peer)
[21:46:49] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[21:50:28] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[21:55:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[21:59:56] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 260 seconds)
[22:02:48] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 265 seconds)
[22:02:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:03:42] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:09:51] *** Joins: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:11:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Read error: Connection reset by peer)
[22:21:36] *** Quits: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 245 seconds)
[22:29:49] <Nilby> we fixed CLIM to be be more like shoes with CLOS & presentations
[22:30:14] <Guest7491> shoes? or clues?
[22:34:22] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:38:16] *** Quits: Guest7491 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:50:25] *** Joins: Bike (~Bike@71.69.170.70)
[22:50:25] *** ChanServ sets mode: +o Bike
[22:50:29] *** Joins: VincentVega (~user@212.241.24.160)
[22:57:33] <dbotton> _death what sort of things are you looking for in CLOG? Much of what is in qooxdoo is already there
[22:58:34] <dbotton> I am working on documentation on the "process" of writing clog apps then the focus will be on adding more higher level widgets.
[23:02:54] <dbotton> Guest7491 everything you can do including themes in a browse you can do with CLOG, you can create your layout in HTML, attach to it in CLOG and then use it as part of CLOG or vice versa
[23:03:35] *** Joins: trriplex (~trriplex@user/trriplex)
[23:04:01] *** Joins: Oladon (~olad@98.43.81.226)
[23:04:18] <_death> dbotton: qooxdoo has a comprehensive collection of widgets
[23:08:26] <_death> dbotton: probably one could find a way to put clog and qooxdoo together in a consistent and coherent way.. but I think that could require much effort, and deep knowledge of both
[23:12:07] <_death> Kenny Tilton already did figure out how to integrate lisp and qooxdoo (and cells).. but I can't figure out both his code and qooxdoo at the same time, so I opted to go with the classic option and just use straight js/qooxdoo for frontend and lisp for backend
[23:19:44] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:22:01] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[23:22:09] *** Joins: zagura (~zagura@user/zagura)
[23:22:22] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[23:22:59] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:25:57] *** Quits: cage (~cage@dynamic-adsl-94-34-16-50.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:26:18] *** Joins: VincentV` (~user@212.241.24.160)
[23:27:05] *** Quits: trriplex (~trriplex@user/trriplex) (Quit: Leaving)
[23:27:33] <dbotton> _death looking over qooxdoo I agree it looks very worthwhile to bind qooxdoo's widgets in to CLOG
[23:27:51] *** Quits: VincentVega (~user@212.241.24.160) (Ping timeout: 245 seconds)
[23:28:23] <dbotton> I will try and make that a priority soon
[23:30:12] <dbotton> If reasonable I
[23:30:34] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:30:55] <_death> it also contains its own object oriented system with some features that may be useful to incorporate into CLOS (using the MOP.. not too difficult)
[23:30:58] <dbotton> will add a set of bindings to it, any other desktop style widget libraries anyone is using
[23:31:34] <dbotton> Not sure if that would be a target for me, but will see
[23:31:51] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[23:31:58] <dbotton> I am interested on adding bindings post 1.1 to various widgets
[23:32:29] <dbotton> and documentation on how to do that
[23:32:42] <dbotton> there already is 2 tutorials on it
[23:32:53] <_death> anyway, I don't expect anyone to do that work :).. but I did think you may be interested in it, if you didn't already know about it
[23:33:15] <dbotton> No was not so familiar, so very thankful
[23:40:21] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[23:49:36] *** Joins: Josh_2 (~user@37.25.47.130)
[23:52:36] <Josh_2> Is the person who runs tfeb.org around?
[23:53:29] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[23:56:06] *** Joins: cjb (~cjb@user/cjb)
