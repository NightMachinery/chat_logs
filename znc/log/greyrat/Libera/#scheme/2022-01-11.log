[00:02:08] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[00:07:30] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:10:55] <tokie> are there any schemes that allow aliasing of set! ?
[00:11:31] <tokie> i'm trying to figure out in r5rs if it's safe to statically verify that assignment never happens on a given symbol in a lexical scope
[00:11:55] <gwatt> tokie: depending on what you mean by aliasing, all or none of them probably support it
[00:12:15] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:12:26] <tokie> (define myset set!) 
[00:12:51] <gwatt> yeah, that's allowed, but slightly different syntax for it
[00:13:42] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[00:14:10] <Zipheir> It sounds hopeless to me without a static type system.
[00:14:11] <gwatt> I think you'll have to perform some amount of macro expansion before you can verify those sorts of things
[00:14:51] <tokie> yeah, i think i intend to not try
[00:15:04] <Zipheir> Well, hmm.  It might be possible.
[00:16:19] <tokie> Kent Dybvig's phd dissertation mentioned it
[00:16:35] <tokie> in deciding whether or not to convert values on the heap
[00:17:05] <Zipheir> Provided everything that could possibly use set! is expanded to set! ...
[00:17:38] <Zipheir> I mean, assignment is always set!-ified.  Then it should be safe.
[00:18:03] <gwatt> if you can hook into the implementation to grab the ast after expansion, it's trivial!
[00:18:03] <tokie> it came up for me beacuse in my design for lexical environments i was allowing an inner lambda to copy its immediate outer function's arguments directly from the stack, but then i realized that the IOF could set! its own arguments and it really should be putting them in an environment anyway
[00:18:14] <Zipheir> You'd have to consider all of the data mutators as well.  vector-set!, etc.
[00:18:18] <tokie> yeah
[00:19:01] <tokie> gwatt: i am the implementation!:P
[00:19:14] <tokie> but i'll probably just put everything in an environment and make things easier
[00:19:20] <gwatt> tokie: then good news! you have to wait until after macro expansion!
[00:19:47] <tokie> yeah, i have no macro expansion currently or any transforms steps really
[00:20:06] <Zipheir> Specifically, after things like letrec.
[00:20:19] <Zipheir> ... get expanded, since that usually entails assignment.
[00:20:33] <gwatt> ok, then you can't really alias set! at all, or at least you will control all aliases of it
[00:20:45] <gwatt> it's not user-aliasable
[00:20:48] <tokie> cool. thanks!
[00:21:23] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:33:10] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[00:46:28] *** Quits: klovett_ (~klovett@166.205.110.2) (Ping timeout: 256 seconds)
[01:04:13] *** Quits: yewscion (~yewscion@72-21-196-65.amazon.com) (Ping timeout: 240 seconds)
[01:12:03] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[01:23:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:26:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:33:57] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:39:25] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:40:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:44:31] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[01:48:05] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[01:48:48] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[01:48:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:51:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:53:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:53:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:55:28] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:57:32] *** Joins: klovett (~klovett@166.205.110.2)
[02:00:08] *** Quits: rgherdt (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[02:02:47] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[02:03:08] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[02:09:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:09:38] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:21:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:35:30] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[02:36:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:36:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[02:39:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[02:49:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:51:29] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[02:53:10] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[02:53:32] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[02:57:37] *** Joins: jao (~jao@92.40.179.51.threembb.co.uk)
[02:58:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[02:58:55] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:02:40] <drakonis> aeth: does airship scheme support hygienic macros?
[03:15:20] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[03:15:40] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[03:18:07] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[03:20:36] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[03:32:34] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[03:42:10] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[03:47:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:49:33] *** Joins: livoreno (~livoreno@user/notzmv)
[03:55:57] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:01:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:03:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:05:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[04:05:43] *** Joins: notzmv (~zmv@user/notzmv)
[04:06:55] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[04:10:07] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:22:13] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[04:22:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:23:59] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:26:12] *** Joins: frost (~frost@user/frost)
[04:30:42] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Quit: jrincayc)
[04:31:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:40:00] <mdhughes> R6RS records are already pretty close to a class system, you really just need getter, setter, dispatch functions. Dumbest/easiest solution is reflection every time, but you can prepopulate dispatch tables and get it pretty fast. That's all Obj-C does, really.
[04:41:13] <mdhughes> My own OOP system is simple, but it started life on CHICKEN where records were much less useful.
[04:49:00] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[05:04:13] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[05:09:58] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[05:23:31] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:24:19] *** Joins: seninha (~seninha@user/seninha)
[05:29:25] *** Joins: frost (~frost@user/frost)
[05:35:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[05:52:01] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:54:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:54:05] *** Quits: klovett (~klovett@166.205.110.2) (Quit: ZZZzzz…)
[05:54:06] *** Quits: jao (~jao@92.40.179.51.threembb.co.uk) (Remote host closed the connection)
[05:55:00] *** Joins: frost (~frost@user/frost)
[05:58:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[06:00:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[06:10:01] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:13:24] *** Joins: xsperry (~xs@user/xsperry)
[06:13:59] *** Joins: frost (~frost@user/frost)
[06:24:27] *** Joins: jao (~jao@92.40.179.65.threembb.co.uk)
[06:31:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:46:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:51:16] *** Joins: frost (~frost@user/frost)
[07:05:39] *** Quits: nalaginrut_ (~nalaginru@113.89.98.54) (Read error: Connection reset by peer)
[07:11:25] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[07:12:20] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:15:12] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:17:15] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[07:17:24] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:21:04] *** Quits: elflng (~elflng@5.28.137.182) (Remote host closed the connection)
[07:21:58] *** Joins: frost (~frost@user/frost)
[07:24:41] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:25:08] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:26:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[07:31:17] *** Quits: taylan (~taylan@user/taylan) (Ping timeout: 240 seconds)
[07:31:28] *** Joins: taylan (~taylan@user/taylan)
[07:31:46] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:accc:f920:44e1:6c44)
[07:31:46] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:accc:f920:44e1:6c44) (Changing host)
[07:31:46] *** Joins: skapata (~Skapata@user/skapata)
[07:38:31] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:42:37] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:43:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[07:44:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[07:45:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:47:30] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:48:56] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:49:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:57:48] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[08:09:36] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[08:15:19] *** Joins: elflng (~elflng@5.28.137.182)
[08:20:36] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:25:52] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:29:17] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:31:11] *** Joins: taylan2 (~taylan@user/taylan)
[08:31:31] *** Quits: taylan2 (~taylan@user/taylan) (Read error: Connection reset by peer)
[08:31:52] *** Joins: taylan2 (~taylan@user/taylan)
[08:31:57] *** Quits: taylan (~taylan@user/taylan) (Ping timeout: 240 seconds)
[08:34:35] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[08:38:20] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[08:38:40] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[08:48:03] *** Quits: elflng (~elflng@5.28.137.182) (Quit: leaving)
[08:48:29] *** Joins: elflng (~elflng@5.28.137.182)
[08:52:40] *** Quits: jao (~jao@92.40.179.65.threembb.co.uk) (Ping timeout: 256 seconds)
[08:55:02] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) ()
[08:58:22] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[09:00:30] <aeth> drakonis: that's the only core feature I haven't even designed yet
[09:12:23] <drakonis> i see
[09:28:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[09:30:03] <Spawns>  is the a valid reason that we can use equal? on values of different types?
[09:30:10] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:30:14] <Spawns> (equal? 1 "hello") is not an error
[09:31:40] <aeth> because it's generic
[09:32:21] <aeth> just seems more out of place in Scheme than in similar Lisps because Scheme is... not very generic. A few other procedures I can think of are the arithmetic ones, e.g. (+ 1 1/2 0.5)
[09:33:14] <Spawns> how is "equal?" implemented? is it implemented in scheme itself or at a lower level as a special operation 
[09:33:31] <Spawns> i am guessing at a lower level than inside scheme
[09:34:09] *** Quits: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[09:35:00] <Spawns> implementing the addition oper to be generic with floats and ints is going to be tough-ish to do in rust
[09:35:02] <aeth> not in the standard, but I'd implement it with something like CL's typecase (or, failing that, a combination of cond with manual type checks)
[09:35:25] <aeth> I want to say that you could just fall back to = for numbers, but I think you have to make sure the numeric type matches, unlike =
[09:35:28] <aeth> so it's a bit more complicated
[09:35:32] *** Joins: croc (quassel@2600:3c00::f03c:91ff:fe18:29d6)
[09:35:42] <Spawns> i was going to implement it directly in the VM itself or as a "native" function
[09:36:04] <aeth> yes
[09:36:41] <aeth> For my (incomplete) Scheme, I implement it in the host language (which happens to be Common Lisp, and it does use a typecase)
[09:36:52] <aeth> but if I gave Scheme a typecase instead, then I'd just as easily be able to write it in Scheme
[09:37:01] <aeth> just depends what level you want
[09:37:02] *** Joins: qhong_ (~qhong@rescomp-21-400677.stanford.edu)
[09:37:23] <Spawns> how closely did you decide to follow along the scheme spec aeth? That's something I've been debating with myself for a while 
[09:37:35] <aeth> https://gitlab.com/mbabich/airship-scheme/-/blob/5fe60b8e77f3b9affe3cac4b9604457d7af7c255/equality.lisp#L68
[09:37:46] <aeth> most of the logic of equal? is actually in eqv?, but that is also a typecase
[09:37:52] <Spawns> part of me wants to make a totally custom lisp, but I also really like scheme
[09:38:26] <Spawns>  i like that you wrote it in common lisp
[09:38:42] <Spawns> your equal? implementation is very compact 
[09:38:51] <aeth> that's generally how Lisps go
[09:39:20] <aeth> lots of tiny functions (well, procedures in Scheme) with self-explanatory names
[09:39:38] <aeth> for the opposite style, see http://number-none.com/blow/john_carmack_on_inlined_code.html
[09:39:42] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 256 seconds)
[09:42:53] <aeth> I wouldn't say that Airship Scheme's style is too representative, though, because it's going to be... very Schemey Common Lisp and very Lispy Scheme.
[09:44:11] <aeth> Spawns: as for the Scheme standard, it doesn't give you much to implement, but what it gives you can be a lot of work... tail recursion, hygienic macros, full continuations
[09:44:50] <Spawns> yup, thats why I am not so sure about attempting to follow it. I am not sure I can even implement those things at my skill level
[09:49:36] *** Joins: frost (~frost@user/frost)
[09:56:11] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab)
[10:14:29] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:31:06] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[10:33:23] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:35:17] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:40:09] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[11:03:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:06:54] *** Joins: karlosz (~karlosz@47.151.136.69)
[11:08:31] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:17:35] *** Joins: frost (~frost@user/frost)
[11:23:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:34:56] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[11:48:45] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[12:04:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:25:55] *** Joins: civodul (~user@guix/contributor/civodul)
[12:32:47] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[12:38:35] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[13:04:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:22:15] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[13:26:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:39:36] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[13:41:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:44:21] *** Joins: ManDay (~manday@user/manday)
[13:44:46] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[13:57:51] *** Joins: frost (~frost@user/frost)
[14:02:29] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:07:05] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[14:09:01] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:12:34] *** Joins: frost (~frost@user/frost)
[14:25:43] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:32:08] *** Joins: frost (~frost@user/frost)
[14:39:19] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:46:31] <dpk> writing syntax-rules macros with keyword arguments: https://gitlab.com/dpk/presrfis/-/tree/master/syntax-keywords#defining-macros-with-keyword-arguments-keyword-syntax
[14:46:33] <rudybot_> https://teensy.info/HP1icZ2pJV
[14:46:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:56:53] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:12:11] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[15:17:19] *** Joins: frost (~frost@user/frost)
[15:21:58] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[15:35:28] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[16:07:57] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:33:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:37:54] *** Joins: frost (~frost@user/frost)
[16:46:35] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:48:12] *** Joins: Everything (~Everythin@37.115.210.35)
[16:54:11] *** Joins: gnudles (~user@42.113.119.134)
[17:05:49] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[17:11:53] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:12:32] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[17:14:52] *** Joins: klovett (~klovett@166.205.110.2)
[17:19:16] *** Quits: gnudles (~user@42.113.119.134) (Ping timeout: 256 seconds)
[17:19:41] *** Joins: gnudles (~user@42.113.119.134)
[17:21:24] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:33:48] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:37:16] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:113e:ffae:2add:9284)
[17:39:06] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[17:40:07] *** Joins: jao (~jao@92.40.179.21.threembb.co.uk)
[17:41:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:54:26] *** Joins: m455 (~m455@user/m455)
[18:05:23] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[18:33:40] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:a69c:d91a:66fb)
[18:33:40] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:a69c:d91a:66fb) (Changing host)
[18:33:40] *** Joins: skapata (~Skapata@user/skapata)
[18:38:42] <dpk> man, the internals of irregex are weird. sometimes understandably so, but sometimes … not
[18:39:41] <dpk> understandable: no use of define-record-type (because it's deliberately R4RS and R5RS compatible)
[18:40:08] <dpk> not understandable: it apparently uses the re2 trick of compiling into a DFA that recognizes individual UTF-8 bytes, not codepoints. but the UTF-8 bytes are stored in the DFA  as Scheme characters, not Scheme integers
[18:43:04] <dpk> so examining the DFA of the regexp 'any'  in the REPL, it appears to have recognizers for character ranges like (#\Â . #\ß), when in fact that's meant to be bytes #xC2 to #xDF (initial bytes for two-byte characters in UTF-8)
[18:51:46] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[18:56:01] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[18:56:13] <dpk> this incidentally means it doesn't actually seem to work in Chibi, since it seems to expect string-ref to operate on effectively-Latin-1 strings that it treats as UTF-8, whereas Chibi is UTF-8 all the way day. but foof's regexp engine not working properly in foof's Scheme implementation seems a bit far-fetched, so i must be missing something
[18:57:12] <dpk> precise problem: (irregex-match (sre->irregex 'any) "λ") returns #f. (or your favourite Unicode character — it works on ASCII, of course)
[19:03:00] <dpk> its DFA compiler also gives up disappointingly easy. bounded repetition is enough to make it use the backtracking NFA
[19:03:28] <dpk> *easily
[19:04:17] <dpk> as are the basic zero-width assertions like eow and bow, even though they're DFA-compilable in theory
[19:11:52] *** Joins: seninha (~seninha@user/seninha)
[19:36:02] *** Joins: yewscion (~yewscion@72-21-196-65.amazon.com)
[20:13:06] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:113e:ffae:2add:9284) (Ping timeout: 256 seconds)
[20:39:22] *** Joins: Guest42 (~Guest42@563BEF60.catv.pool.telekom.hu)
[20:39:28] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[20:48:13] *** Quits: gnudles (~user@42.113.119.134) (Ping timeout: 256 seconds)
[20:49:57] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 240 seconds)
[20:51:39] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:2d8:61ff:fef9:b4c2)
[21:41:35] <dpk> i like this quote: ‘Also, Scheme is more fun to program in because Scheme tends to let you 'feel' your way to a working program, whereas SML forces you to think your way there.’ (http://groups.google.com/group/comp.lang.scheme/msg/9de844ac3071d496)
[21:42:06] <dpk> substitute Haskell for SML for a 2022-relevant version, i guess
[21:43:08] <aeth> well, OCaml is a modern ML
[21:43:16] <bsima> great quote, i very much agree
[21:43:21] <aeth> OCaml is finally multicore... https://news.ycombinator.com/item?id=29875442
[21:44:50] <bsima> i work in haskell, its great, but damn i miss lisp
[21:49:12] <Franciman> 100% agree
[21:49:40] <Franciman> haskell is ill posed
[21:50:10] <Franciman> one usually refers to ghc's haskell
[21:55:49] *** Quits: jao (~jao@92.40.179.21.threembb.co.uk) (Ping timeout: 240 seconds)
[22:34:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[23:01:23] *** Quits: Kooda (~kooda@natsu.upyum.com) (Ping timeout: 268 seconds)
[23:01:48] *** Joins: Kooda (~kooda@natsu.upyum.com)
[23:09:09] *** Joins: nullx002 (~nullx002@2402:8100:2690:a7db:2934:5257:7a6c:6356)
[23:21:17] *** Quits: nullx002 (~nullx002@2402:8100:2690:a7db:2934:5257:7a6c:6356) (Ping timeout: 240 seconds)
[23:34:31] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[23:52:39] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
