[00:00:27] *** Quits: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[00:01:59] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[00:03:23] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:07:01] *** Joins: sbrothy (~sbrothy@192038132252.mbb.telenor.dk)
[00:20:01] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[00:20:26] <RandomReader> IIRC that's a frontend optimization quirk regarding arrays, but I can't recall specifics at the moment
[00:21:08] <RandomReader> something about stack analysis sabotaging the flow that would NRVO? not sure that's right
[00:23:27] <PJBoy> well I've reported that one as a bug to them
[00:23:34] <PJBoy> we'll see what they have to say about it
[00:34:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:22] <fldme> when I resize a vector, does it free the removed elements?
[00:38:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:39:32] *** Joins: sonic (~sonic@user/sonic)
[00:40:30] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[00:41:09] *** Joins: johnny (~johnny@user/johnny)
[00:41:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:42:15] *** Joins: wyre (~wyre@user/wyre)
[00:43:25] <Alipha> fldme: <PJBoy> it destroys them yeah
[00:44:37] <Alipha> The capacity (ie, the memory consumed) does not decrease, however
[00:45:03] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[00:46:12] *** Joins: Simplar (~Simplar@188.163.93.241)
[00:46:13] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 240 seconds)
[00:47:27] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[00:48:47] *** Joins: wielding (~wielding@user/wielding)
[00:48:53] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[00:49:37] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Remote host closed the connection)
[00:50:55] *** Joins: Tokamak (~Tokamak@172.58.188.176)
[00:51:08] *** Quits: Tokamak (~Tokamak@172.58.188.176) (Client Quit)
[00:56:57] *** Joins: capjack[m] (~raffaem@2001:470:69fc:105::393)
[00:57:07] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[00:58:46] *** Quits: magla (~gelignite@d5366c9a.access.ecotel.net) (Quit: Stay safe!)
[01:00:17] *** Quits: proller (~p@2a02:6b8:b081:a414::1:36) (Ping timeout: 256 seconds)
[01:05:22] *** Quits: wielding (~wielding@user/wielding) (Write error: Connection reset by peer)
[01:05:22] *** Quits: capjack[m] (~raffaem@2001:470:69fc:105::393) (Read error: Connection reset by peer)
[01:05:22] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Read error: Connection reset by peer)
[01:05:23] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Read error: Connection reset by peer)
[01:05:24] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Write error: Connection reset by peer)
[01:05:24] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Read error: Connection reset by peer)
[01:05:25] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Read error: Connection reset by peer)
[01:05:57] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[01:06:56] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[01:07:13] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[01:12:13] *** Quits: robod34 (~Username@79.113.227.62) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:12:15] *** Quits: noent (~quassel@squint.a-oben.org) (Changing host)
[01:12:15] *** Joins: noent (~quassel@user/sven/x-0967695)
[01:12:20] *** Joins: talisein (~talisein@user/talisein)
[01:13:09] *** Joins: proller (~p@80.240.216.69)
[01:15:56] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[01:15:56] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[01:15:56] *** Joins: wielding (~wielding@user/wielding)
[01:15:56] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[01:15:56] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:15:56] *** Joins: capjack[m] (~raffaem@2001:470:69fc:105::393)
[01:15:56] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[01:15:56] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[01:18:35] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:b5ef:78c0:d3be:544c) (Quit: Leaving)
[01:21:41] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a4ba:6060:3755:9749)
[01:21:41] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a4ba:6060:3755:9749) (Changing host)
[01:21:41] *** Joins: skapata (~Skapata@user/skapata)
[01:23:10] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:23:52] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:30:50] <ashafq> Alipha: for inherited class that derives from base class with non-default move semantics, do derived class need to define them as well?
[01:35:27] *** Joins: proller (~p@2a02:6b8:b081:a413::1:b)
[01:35:46] *** Joins: markong (~kvirc@213.146.188.203)
[01:35:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:37:54] <Alipha> ashafq: generally only if the derived class has additional members that need custom move semantics. As RandomReader explained, the compiler-generated move ctor/op= will call the move ctor/op= of the base class(es) and members
[01:38:35] *** Quits: Leone (~Leo@108.175.224.215) (Read error: Connection reset by peer)
[01:38:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:41:57] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:42:09] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:17] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:17] *** ChanServ sets mode: +v npaperbot
[01:42:23] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[01:42:37] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[01:42:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[01:45:19] <ashafq> Alipha: Thanks. Time to figure out what this "Ill formed" error means.
[01:52:50] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[01:54:22] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Quit: ZNC 1.8.2 - https://znc.in)
[01:54:37] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:57:12] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:10:35] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:10:43] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[02:12:58] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:16:44] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[02:25:01] <fldme> is there no simple way to fill a vector with values, then append the rest to the end?
[02:27:21] <ashafq> std::vector<int> stuff(100, 5); // Fills stuff of length 100 with 5
[02:39:27] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:40:13] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[02:40:35] *** Quits: jsbach_ (~jsbach@2a01:c22:35dd:4000:8ce2:86f8:3e06:da68) (Ping timeout: 256 seconds)
[02:41:16] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[02:41:34] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[02:42:03] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[02:42:40] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:42:58] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[02:43:00] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[02:45:51] *** Joins: k8yun_ (~k8yun@24.244.29.102)
[02:46:39] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[02:47:32] *** Joins: skapata (~Skapata@user/skapata)
[02:49:25] *** Quits: k8yun (~k8yun@24.244.29.102) (Ping timeout: 240 seconds)
[02:49:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[02:52:48] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[02:53:44] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:54:22] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[03:06:53] *** Quits: foul_owl (~kerry@23.82.194.143) (Ping timeout: 256 seconds)
[03:08:00] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:10:52] *** Quits: c4017w__ (~c4017@209.52.68.8) (Quit: Leaving)
[03:11:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:13:41] <Alipha> fldme: are you saying you have a vector of size 10 and you want to add 15 values to it, so you want to write the first 10 to the existing elements, and then append the remaining 5?
[03:13:58] <fldme> yes
[03:15:10] <Alipha> fldme: I would just .clear() the vector and then .assign() or .push_back() all 15
[03:17:16] *** Joins: c4017w (~c4017@209.52.68.8)
[03:22:54] *** Joins: foul_owl (~kerry@192.145.116.254)
[03:24:18] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[03:25:49] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:27:03] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[03:29:16] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:34:21] *** Joins: n3rdy1 (~n3rdy1@69-222-188-145.lightspeed.sntcca.sbcglobal.net)
[03:36:10] *** Joins: df00z (~df00z@cpe-69-207-141-227.rochester.res.rr.com)
[03:36:43] <df00z> std::move on a vector is going to be faster than copying elements right?
[03:37:16] <MaddHatter> if there's more than a few elements, presumably yes because it'll just need to move a few pointers around
[03:38:04] <df00z> Ok, that was basically the question - it's moving pointers behind the scenes
[03:41:04] <MaddHatter> Implementations can do whatever they want, but I think one possible implementation of vector is 3 pointers (and the allocator).
[03:41:11] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[03:42:19] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Read error: Connection reset by peer)
[03:45:43] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[03:46:13] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[03:46:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[03:51:11] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Read error: Connection reset by peer)
[03:54:51] <df00z> I keep thinking it is better to use unique_ptrs to vectors if I am moving them around.   Since it is really explicit what it is doing.
[03:55:41] <df00z> I keep abusing smart pointers because it is very clear what they are doing at all times
[03:56:47] *** Quits: proller (~p@2a02:6b8:b081:a413::1:b) (Ping timeout: 250 seconds)
[04:00:26] *** Joins: skapata (~Skapata@user/skapata)
[04:06:20] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:18] *** Quits: k8yun_ (~k8yun@24.244.29.102) (Ping timeout: 260 seconds)
[04:10:40] *** Joins: gauss (~gauss@136.53.92.204)
[04:10:46] *** Joins: gauss_ (~gauss@136.53.92.204)
[04:17:18] *** Quits: gauss_ (~gauss@136.53.92.204) (Quit: Leaving)
[04:17:21] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[04:17:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:18:42] *** Quits: DrMax (~DrMax@node-1w7jra94757g0kdpr9wjqf80y.ipv6.telus.net) (Ping timeout: 250 seconds)
[04:21:07] *** Quits: gauss (~gauss@136.53.92.204) (Quit: Leaving)
[04:21:29] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[04:21:40] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[04:24:45] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:31:09] *** Joins: DrMax (~DrMax@node-1w7jra94757g0ehga8s43jipa.ipv6.telus.net)
[04:34:27] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Remote host closed the connection)
[04:35:06] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[04:35:13] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[04:36:20] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[04:38:16] *** Quits: sbrothy (~sbrothy@192038132252.mbb.telenor.dk) (Ping timeout: 245 seconds)
[04:39:39] *** Quits: df00z (~df00z@cpe-69-207-141-227.rochester.res.rr.com) (Quit: Client closed)
[04:39:54] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:40:57] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[04:41:15] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Read error: Connection reset by peer)
[04:42:37] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102) (Ping timeout: 240 seconds)
[04:42:38] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[04:44:21] *** Quits: fldme (~fldme@178.49.152.151) (Ping timeout: 256 seconds)
[04:45:43] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Read error: Connection reset by peer)
[04:48:49] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[04:51:01] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Read error: Connection reset by peer)
[04:51:57] *** Joins: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1)
[04:52:44] *** Quits: hexingb (~hexingb@2409:8900:2700:b88a:414:50b0:e599:73d1) (Read error: Connection reset by peer)
[04:53:03] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[04:54:21] *** Joins: ferdna (~ferdna@user/ferdna)
[04:55:01] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[04:55:28] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:57:50] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[04:58:55] *** Joins: df00z (~df00z@cpe-69-207-141-227.rochester.res.rr.com)
[05:01:00] <RandomReader> ashafq - if you're seeing something along the lines of "because the default would be ill-formed", it means it tried to generate a default but couldn't because a member or base doesn't support it
[05:01:45] <ashafq> RandomReader: Thank you very much! It was one of the class members.
[05:02:53] <RandomReader> I do wish there was an easier way to just get a summary out of the compiler, these particular messages are annoying to track down sometimes
[05:04:57] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:10:11] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:10:28] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:623b) (Quit: Leaving)
[05:11:13] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:13:46] <night_wulfe> https://wandbox.org/permlink/H6OSx40OYYfDnyz6 Is there a way to get the compiler to stop to use the string_view overload and instead use the exception_ptr overload of foo::foo? I'm pretty sure the answer's no, but I figured I'd have someone else take a look.
[05:13:57] <night_wulfe> to stop using*
[05:14:02] *** Joins: hexingb (~hexingb@2409:8900:2700:98a9:c869:1324:c16b:8b08)
[05:14:41] *** Joins: kevr` (~kevr@user/kevr)
[05:16:12] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 276 seconds)
[05:18:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:22:06] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[05:25:49] *** Quits: n3rdy1 (~n3rdy1@69-222-188-145.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[05:27:00] *** kevr` is now known as kevr
[05:27:24] *** Quits: hexingb (~hexingb@2409:8900:2700:98a9:c869:1324:c16b:8b08) (Read error: Connection reset by peer)
[05:28:32] *** Joins: hexingb (~hexingb@2409:8900:2700:98a9:c869:1324:c16b:8b08)
[05:32:46] *** Quits: df00z (~df00z@cpe-69-207-141-227.rochester.res.rr.com) (Quit: Client closed)
[05:32:50] *** Quits: hexingb (~hexingb@2409:8900:2700:98a9:c869:1324:c16b:8b08) (Ping timeout: 260 seconds)
[05:33:05] *** Quits: leonardus (sid358597@tinside.irccloud.com) (Ping timeout: 256 seconds)
[05:34:43] *** Joins: hexingb (~hexingb@103.37.140.23)
[05:34:56] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[05:38:06] *** Joins: leonardus (sid358597@id-358597.tinside.irccloud.com)
[05:39:17] *** Joins: hexingb (~hexingb@103.37.140.23)
[05:42:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:18] *** ChanServ sets mode: +v npaperbot
[05:42:32] <Alipha> MaddHatter: there's complexity requirements that moving a vector is O(1) (unless the allocators are incompatible or whatnot)
[05:44:05] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:44:45] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[05:45:54] <Alipha> night_wulfe: you could make an overload taking std::nullptr_t as the first argument :-/
[05:49:27] <night_wulfe> Alipha: I tried that, but thank you. I get the same error on wandbox. In MSVC it starts complaining about the overloads being ambiguous (which I suppose is better than just crashing, which is what it does without the nullptr_t overload).
[05:50:45] <Alipha> night_wulfe: are you using c++20?
[05:50:49] <night_wulfe> Yessir
[05:51:10] <night_wulfe> I'm playing with modules in msvc, which is a whole other can of worms.
[05:51:22] <night_wulfe> Everything I try to do results in a compiler bug :(
[05:54:57] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[05:55:27] <Alipha> night_wulfe: https://wandbox.org/permlink/tHRFRaphP5qkk2Lx ?
[05:56:27] <night_wulfe> Gross, but neat
[05:57:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[05:57:33] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[05:58:04] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:58:33] <night_wulfe> I might use that
[06:04:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:13:19] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:18:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:22:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[06:23:32] <night_wulfe> Thank you, Alipha.
[06:23:47] <Alipha> np
[06:24:04] <night_wulfe> Now to see if I can find a way to get around msvc not compiling if you use std::source_location::current() in a module.
[06:26:31] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:27:35] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:27:48] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:28:03] <night_wulfe> D: Never seen this one before: 1>d:\a01\_work\38\s\src\vctools\Compiler\CxxFE\sl\p1\c\module\writer.cpp:6266: sorry: not yet implemented
[06:28:13] <johnny> sorry..
[06:28:21] <MaddHatter> it's a pretty clear message, at least
[06:29:26] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Remote host closed the connection)
[06:29:45] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:31:12] <Alipha> I thought msvc was c++20 complete???
[06:31:55] <night_wulfe> It is. Except where it's not
[06:34:35] <smallville7123> hi
[06:36:47] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[06:38:20] *** Joins: johnny (~johnny@user/johnny)
[06:45:41] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[06:45:58] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[06:53:06] *** Quits: foul_owl (~kerry@192.145.116.254) (Ping timeout: 260 seconds)
[06:53:23] *** Quits: emerent (~quassel@p200300cd5704433fba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:53:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:55:18] *** Joins: emerent (~quassel@p200300cd570443a1ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:55:20] *** Joins: adeliktas3 (~adeliktas@i59F5F474.versanet.de)
[06:55:58] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of gamedev supermutants at https://indiedevs.net/)
[06:56:57] *** Quits: adeliktas (~adeliktas@i59F5F08B.versanet.de) (Ping timeout: 240 seconds)
[06:56:57] *** adeliktas3 is now known as adeliktas
[06:58:14] *** Joins: hexingb (~hexingb@103.37.140.23)
[06:58:28] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[07:03:38] *** Joins: andrija (uid540053@id-540053.tinside.irccloud.com)
[07:04:00] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[07:05:54] *** Quits: p-i-_ (~Ohmu@183.89.35.200) (Read error: Connection reset by peer)
[07:06:34] *** Joins: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[07:07:06] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:08:17] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[07:09:02] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[07:09:57] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:10:52] *** Joins: foul_owl (~kerry@94.140.8.224)
[07:13:50] *** Joins: hexingb (~hexingb@103.37.140.23)
[07:13:53] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[07:15:56] <smallville7123> ok so i currently have this  https://gist.github.com/mgood7123/b5bf6e3020a3e321fe6ba43e661baa5d
[07:17:55] <smallville7123> now... how would i implement replacement assuming i can add rules to other rules as they are being processed
[07:18:50] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7d5c:9df3:79fe:43ff) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:19:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:20:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:21:39] <smallville7123> however this must also be able to work recursively
[07:22:58] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[07:25:05] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[07:28:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:29:25] *** Quits: CalamityToo (~CalamityB@2603-8000-d907-cec8-205e-a251-a079-a4d7.res6.spectrum.com) (Read error: Connection reset by peer)
[07:30:00] *** Joins: hexingb (~hexingb@103.37.140.23)
[07:31:01] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[07:31:58] *** Joins: hexingb (~hexingb@103.37.140.37)
[07:32:00] *** Quits: hexingb (~hexingb@103.37.140.37) (Read error: Connection reset by peer)
[07:33:56] <smallville7123> but i dont know how to do this :(
[07:34:00] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:38:40] <smallville7123> i need some kind of rule stack
[07:39:26] <smallville7123> ;-;
[07:39:30] <smallville7123> idk
[07:39:51] *** Joins: CalamityBlue (~CalamityB@2603-8000-d907-cec8-4040-1a78-e1d5-b3df.res6.spectrum.com)
[07:40:34] *** Joins: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a)
[07:41:04] *** Quits: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a) (Read error: Connection reset by peer)
[07:41:21] <smallville7123> damn this recursion ;-;
[07:43:08] *** Joins: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a)
[07:45:58] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[07:47:28] *** Quits: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a) (Read error: Connection reset by peer)
[07:47:44] *** Joins: unyu (~pyon@user/pyon)
[07:49:53] *** Joins: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a)
[07:50:29] *** Quits: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a) (Read error: Connection reset by peer)
[07:52:26] *** Joins: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a)
[07:52:51] *** Quits: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a) (Read error: Connection reset by peer)
[07:55:53] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[08:04:26] *** Joins: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a)
[08:05:25] *** Joins: smeso (~smeso@user/smeso)
[08:06:10] *** Quits: hexingb (~hexingb@2409:8900:2700:de0f:98a0:3a95:d827:f91a) (Read error: Connection reset by peer)
[08:08:03] <smallville7123> why is recursive parsing so complicated ;-;
[08:08:04] <smallville7123> basically i want to do this https://gist.github.com/f97b3b7b86fca1e63dc2bd5dbfaac137
[08:10:53] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[08:11:07] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Quit: Leaving)
[08:15:47] <ezzieyguywuf> in an uninitialized array, what happens if I try to access one of the values? does it have a default value?
[08:15:47] <ville> it doesn't have to be. it would depend on your grammar. writing recursive descent parsers by hand for certain grammar classes is not very difficult
[08:16:05] <ville> ezzieyguywuf: depends.
[08:17:02] <ezzieyguywuf> `uint8_t arr[16]; // do something with arr[1]` <- what about in this case?
[08:17:04] <ville> ezzieyguywuf: c++'s initialization rules are so complex these kinds of questions need _ALL_ the details, as in pretty much complete valid code, to be able to answer
[08:17:11] <ville> still not enough info
[08:17:18] <ezzieyguywuf> hmmm, I see
[08:17:26] <ezzieyguywuf> I think you've answered my question sufficiently though
[08:17:46] <ville> ezzieyguywuf: so the general rule is that if you have to ask then treat it as if the memory contains garbage is a safe default
[08:18:05] <ezzieyguywuf> that's a good rule of thumb
[08:19:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:20:40] <ville> not to say you shouldn't try to learn the rules, just that if you ask others they require lot of details and "a line of code" just doesn't have that
[08:21:39] <ville> the real rules are defined here: http://www.eelis.net/c++draft/dcl.init which may not be the most friendliest of presentations
[08:21:58] <ezzieyguywuf> yea I agree, I'm not against learning them either
[08:23:39] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:24:05] <ville> here's a video form presentation about it: https://www.youtube.com/watch?v=7DTlWPgX6zs might offer you some details
[08:28:44] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:31:05] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[08:31:58] <Alipha> ezzieyguywuf: as a local variable, `uint8_t arr[16];` is uninitialized, and so accessing arr[1] without assigning a value to it first is Undefined Behavior.
[08:35:26] <Alipha> As a global/namespaced variable, it's zero-initialized. As a member variable, it depends where and how the object which contains the member is initialized and whether the object's constructor does any initialization
[08:36:32] <ville> Alipha: u8, it's ok to read it uninitialized...
[08:38:08] *** Joins: hexingb (~hexingb@103.37.140.23)
[08:39:16] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[08:39:24] <Alipha> ville: did that change in a newer c++ version, or does c differ in this regard? Because I'm fairly certain in some standard version accessing an unspecified value is UB
[08:39:37] <ville> (presuming u8 maps to unsigned char)
[08:39:41] <ville> unsigned char is special
[08:40:03] <ville> as in even char and signed char don't work that way
[08:40:22] <Alipha> Ah
[08:40:42] <ville> so i was saying something about c++ initialization rules being complex
[08:42:46] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[08:43:01] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[08:45:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:206a:d63d:f8a8:ec3b) (Quit: Quit)
[08:54:12] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:56:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[09:01:10] *** Joins: k8yun_ (~k8yun@24.244.29.99)
[09:02:03] <ville> Alipha: http://www.eelis.net/c++draft/basic.indet#2.4
[09:03:28] * Alipha shakes head
[09:04:38] <ville> yeah. i like the part that converting to int is still ub. it's fantasticular
[09:05:10] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[09:09:13] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[09:17:01] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[09:18:49] *** Joins: minto (~mintograd@47.201.5.61)
[09:20:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:21:47] *** Quits: mintograde (~mintograd@47.201.5.61) (Ping timeout: 250 seconds)
[09:24:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:25:21] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:34:51] *** Joins: hexingb (~hexingb@103.37.140.37)
[09:42:10] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:20] *** ChanServ sets mode: +v npaperbot
[09:45:23] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:52:01] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[09:54:45] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[09:55:41] *** Joins: KombuchaKip (~kip@192.252.230.5)
[10:06:18] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 260 seconds)
[10:07:03] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[10:09:36] *** Quits: ville (~ville@user/ville) (Quit: ville)
[10:11:52] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[10:12:23] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[10:13:19] <AliceMeows> https://godbolt.org/z/jMxKjj6na Is there any better way to design this? and don't tell me about inout_ptr breaking this, I already know and it cannot be fixed without overhead and more memory
[10:13:47] *** Quits: foul_owl (~kerry@94.140.8.224) (Ping timeout: 250 seconds)
[10:16:12] <InPhase> AliceMeows: Yeah.  Before I go to bed I will tell you one huge thing you can do to improve that.
[10:16:23] <InPhase> AliceMeows: Add comments so people can figure out what it's supposed to do.  :)
[10:16:38] <AliceMeows> Will do
[10:17:15] <InPhase> Then maybe someone could have a better insight about how to do said thing in another way.
[10:17:42] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[10:18:22] <AliceMeows> I'm trying to design unique_resource to behave similarly to unique_ptr except that its meant to work with any kind of resource and generalizing the solution is a bit difficult without introducing lots of overhead
[10:18:37] *** Joins: ville (~ville@user/ville)
[10:20:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:24:25] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[10:25:34] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[10:28:33] *** Joins: foul_owl (~kerry@94.140.8.51)
[10:29:07] *** Joins: malloy (~jimery@116.30.220.175)
[10:30:33] *** Joins: jsbach_ (~jsbach@2a01:c23:6414:9300:6f05:6fcf:d0bf:7bb3)
[10:35:21] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[10:36:39] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[10:40:19] <AliceMeows> https://godbolt.org/z/E8nsd8b4z that should be better
[10:41:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[10:43:36] *** Quits: k8yun_ (~k8yun@24.244.29.99) (Read error: Connection reset by peer)
[10:45:28] <ville> whilst it doesn't really matter in the case of resource being int, at least had to look twice why deleter would take its argument by-value
[10:46:40] <AliceMeows> Its old habit from the days I used to hack unique_ptr to manage resources for me, I should've passed it by reference or something although it really isn't about how terribly my deleter was implemented as I mostly want usable unique_resource
[10:52:05] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[10:58:53] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Remote host closed the connection)
[10:59:13] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[11:01:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:08:40] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[11:11:13] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:18:06] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[11:19:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:21:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:24:59] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:34:25] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:34:26] *** Quits: jsbach_ (~jsbach@2a01:c23:6414:9300:6f05:6fcf:d0bf:7bb3) (Remote host closed the connection)
[11:36:21] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:37:48] *** Joins: jsbach (~jsbach@2a01:c23:6414:9300:13bf:8b00:4a82:98ca)
[11:38:15] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ed88:aae9:3bf6:fcb5)
[11:45:42] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 260 seconds)
[11:49:39] *** Quits: pepperoni (~pepperoni@172.58.99.50) (Read error: Connection reset by peer)
[11:49:49] *** Quits: hexingb (~hexingb@103.37.140.37) (Read error: Connection reset by peer)
[11:50:01] *** Joins: pepperoni (~pepperoni@172.58.99.50)
[11:58:47] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[12:00:50] *** Joins: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr)
[12:00:50] *** Quits: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr) (Changing host)
[12:00:50] *** Joins: Uswald (~leandre@user/Uswald)
[12:03:03] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:03:40] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Quit: Leaving)
[12:04:22] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[12:05:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:11:50] <LordKalma> !rq
[12:11:50] <nolyc> LordKalma: <gehn> don't look a gift horse in the butt
[12:13:53] *** Joins: arch-angel (~Srain@175.136.28.149)
[12:15:19] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[12:16:03] *** Quits: Uswald (~leandre@user/Uswald) (Quit: WeeChat 3.4)
[12:16:53] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:18:09] *** Joins: Uswald (~leandre@user/Uswald)
[12:18:31] <smallville7123> ok i now have a stack rule :)    https://gist.github.com/e172a4725350749c89b9bdaf3c5d8de9
[12:21:00] *** Joins: robod34 (~Username@79.113.227.62)
[12:21:41] *** Quits: arch-angel (~Srain@175.136.28.149) (Remote host closed the connection)
[12:21:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:25:51] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:32:47] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[12:34:20] *** Quits: Uswald (~leandre@user/Uswald) (Quit: WeeChat 3.4)
[12:34:50] *** Joins: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr)
[12:34:50] *** Quits: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr) (Changing host)
[12:34:50] *** Joins: Uswald (~leandre@user/Uswald)
[12:34:51] *** Quits: Uswald (~leandre@user/Uswald) (Client Quit)
[12:42:00] *** Joins: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr)
[12:42:00] *** Quits: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr) (Changing host)
[12:42:00] *** Joins: Uswald (~leandre@user/Uswald)
[12:43:54] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[12:44:01] *** Quits: Uswald (~leandre@user/Uswald) (Client Quit)
[12:45:09] *** Joins: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr)
[12:45:18] *** Quits: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr) (Client Quit)
[12:46:05] *** Joins: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr)
[12:46:05] *** Quits: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr) (Changing host)
[12:46:05] *** Joins: Uswald (~leandre@user/Uswald)
[12:46:52] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:47:33] *** Quits: Uswald (~leandre@user/Uswald) (Client Quit)
[12:47:59] *** Joins: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr)
[12:47:59] *** Quits: Uswald (~leandre@2a01cb040075f90079a599f10e865f98.ipv6.abo.wanadoo.fr) (Changing host)
[12:47:59] *** Joins: Uswald (~leandre@user/Uswald)
[12:48:31] *** Quits: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi) (Ping timeout: 256 seconds)
[12:49:41] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:50:09] *** Quits: Uswald (~leandre@user/Uswald) (Client Quit)
[12:51:46] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:7465:4c52:7351:b51c)
[12:53:43] *** Joins: seninha (~seninha@user/seninha)
[12:54:35] *** Joins: plastico (~plastico@neomutt/plastico)
[12:55:28] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Quit: Leaving)
[12:55:45] *** Joins: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce)
[12:58:11] <xkoncek> why couldn't the structs in inet.h be defined as members of union, so that we wouldn't have to blindly reinterpret_cast?
[13:00:02] <smallville7123> xkoncek: dynamic cast instead
[13:01:17] <smallville7123> https://gist.github.com/168c4b17dd814fd977a2db88af5d9f5f i dont know how to correctly do this ;-;
[13:07:56] <MaddHatter> the default action is to return the input unmodified. So that's what happens with 1. Then foo(foo) matches a funtion-like #define, so you replace foo(foo) with the contents of the #define. Then 2 is unmodified, per the default rule. Then foo(bar) will again be exanded according to the foo(x) rule.
[13:09:55] *** Quits: arch-angel (~arch-ange@2001:e68:5400:3249:2c0:4894:d1ba:a2ce) (Changing host)
[13:09:55] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[13:10:35] *** Quits: pepperoni (~pepperoni@172.58.99.50) (Read error: Connection reset by peer)
[13:10:43] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:10:59] *** Joins: pepperoni (~pepperoni@172.58.99.50)
[13:11:42] *** Joins: Xardas (~Xardas@149.233.51.127)
[13:21:25] *** Joins: Xardas27 (~Xardas@149.233.51.127)
[13:22:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:24:06] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:24:33] *** Quits: Xardas (~Xardas@149.233.51.127) (Ping timeout: 256 seconds)
[13:25:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:29:49] *** Quits: Xardas27 (~Xardas@149.233.51.127) (Quit: Client closed)
[13:33:37] *** Joins: hexingb (~hexingb@103.37.140.37)
[13:34:02] *** Joins: ivii (~ivan@user/ivii)
[13:35:27] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:60bc)
[13:37:12] *** Quits: hexingb (~hexingb@103.37.140.37) (Read error: Connection reset by peer)
[13:40:11] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:60bc) (Ping timeout: 256 seconds)
[13:40:33] *** Joins: DSpider (~DSpider@82.79.237.109)
[13:40:42] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[13:41:04] *** Joins: hexingb (~hexingb@103.37.140.37)
[13:41:56] *** Quits: hexingb (~hexingb@103.37.140.37) (Read error: Connection reset by peer)
[13:42:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:21] *** ChanServ sets mode: +v npaperbot
[13:50:26] *** Joins: Uswald (~Uswald@user/Uswald)
[13:51:38] *** Joins: hexingb (~hexingb@101.236.65.144)
[13:51:47] *** Quits: hexingb (~hexingb@101.236.65.144) (Read error: Connection reset by peer)
[13:53:03] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[13:54:31] *** Quits: lockywolf_ (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[13:56:13] *** Joins: hexingb (~hexingb@2409:8900:2700:603:80df:f215:fd2b:151a)
[13:56:45] *** Quits: hexingb (~hexingb@2409:8900:2700:603:80df:f215:fd2b:151a) (Read error: Connection reset by peer)
[13:58:17] *** Joins: lockywolf_ (~lockywolf@public.lockywolf.net)
[14:01:03] *** Joins: hexingb (~hexingb@2409:8900:2700:603:80df:f215:fd2b:151a)
[14:02:54] *** Quits: hexingb (~hexingb@2409:8900:2700:603:80df:f215:fd2b:151a) (Read error: Connection reset by peer)
[14:03:46] *** Joins: artok (~azo@mobile-access-b04822-148.dhcp.inet.fi)
[14:05:42] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:31e4:e529:2850:2303)
[14:05:42] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:31e4:e529:2850:2303) (Changing host)
[14:05:42] *** Joins: skapata (~Skapata@user/skapata)
[14:10:06] *** Quits: pepperoni (~pepperoni@172.58.99.50) (Read error: Connection reset by peer)
[14:10:30] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[14:10:35] *** Joins: pepperoni (~pepperoni@172.58.99.50)
[14:17:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[14:22:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:26:42] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[14:36:59] *** Joins: hexingb (~hexingb@103.37.140.23)
[14:39:35] *** Quits: mitch0 (~mitch@94-21-182-186.pool.digikabel.hu) (Ping timeout: 256 seconds)
[14:40:05] *** Quits: baltazar (~baltazar@94-21-182-186.pool.digikabel.hu) (Ping timeout: 250 seconds)
[14:41:32] *** Joins: mitch0 (~mitch@87-97-81-70.pool.digikabel.hu)
[14:41:58] *** Joins: baltazar (~baltazar@87-97-81-70.pool.digikabel.hu)
[14:54:58] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[15:00:56] *** Joins: proller (~p@2a02:6b8:0:40c:48a2:776d:3f17:1e22)
[15:02:49] *** Joins: unyu (~pyon@user/pyon)
[15:04:37] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 240 seconds)
[15:06:08] *** Quits: unyu (~pyon@user/pyon) (Client Quit)
[15:23:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:27:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:29:50] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:30:56] *** Quits: hexingb (~hexingb@103.37.140.23) (Read error: Connection reset by peer)
[15:34:48] *** Joins: hexingb (~hexingb@103.37.140.37)
[15:39:02] *** Quits: hexingb (~hexingb@103.37.140.37) (Ping timeout: 250 seconds)
[15:42:26] *** Joins: markong (~kvirc@213.146.188.203)
[15:43:17] *** Joins: pulse (~pulse@user/pulse)
[15:44:13] <smallville7123> https://gist.github.com/168c4b17dd814fd977a2db88af5d9f5f i dont know how to correctly do this ;-;
[15:51:23] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:52:48] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[15:52:52] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Read error: Connection reset by peer)
[15:56:48] *** Joins: xkuru (~xkuru@user/xkuru)
[15:57:05] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[15:59:04] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Read error: Connection reset by peer)
[16:00:22] *** Joins: andreasbuhr (~quassel@p549db6c6.dip0.t-ipconnect.de)
[16:00:46] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[16:02:56] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[16:03:12] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[16:03:15] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[16:04:03] *** Joins: Leone (~Leo@108.175.224.215)
[16:08:13] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Read error: Connection reset by peer)
[16:11:33] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[16:11:49] <ville> i would suggest you make an implementation of the algorithm outlined in the pdf. even if it's not what you want to end up with, it's should still be a working outline and implementing it will gain you insight. this will perhaps allow you to understand what to do with your "real" implemnetation
[16:11:50] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Read error: Connection reset by peer)
[16:15:01] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:17:08] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[16:17:22] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Read error: Connection reset by peer)
[16:17:57] *** Joins: unyu (~pyon@user/pyon)
[16:18:22] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[16:19:21] *** Quits: tesuji (~quassel@2a02:908:180:9500:7dfb:8bc4:47fe:281d) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:19:44] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Read error: Connection reset by peer)
[16:23:36] <xkoncek> can we PLEASE get a understandable concept specification of what an "iterator" needs to satisfy?
[16:23:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:25:23] <ville> why?
[16:25:58] <Haohmaru> because his sanity depends on it
[16:26:21] <Haohmaru> ..i guess
[16:26:44] <ville> it just doesn't seem like that interesting concept. it's very "undefined". i must be missing something
[16:26:45] <Haohmaru> just use an index, xkoncek
[16:27:18] <xkoncek> i don't want to open 10 pages of cppreference and inspect template error messages for the 100th time after i write std::ranges::subrange<my_iterator>...
[16:27:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[16:27:43] <ville> a minimal iterator concept is probably that it has a dereference operator and that's it
[16:27:47] <xkoncek> Haohmaru subrange is about the most convenient construct to allow you to use for-loops
[16:27:59] <ville> so i am not sure what you think you would gain from such a concept...
[16:28:00] <xkoncek> ville + like 5 typedefs
[16:28:03] <ville> no
[16:28:43] <ville> you get those free from iterator_traits
[16:28:56] <AliceMeows> typedefs are implementation detail here while you're asking about the concept itself for all you care it could be 100+ typedefs and it wont matter as long as its compliant
[16:29:14] <xkoncek> using reference = ...;
[16:29:28] <ville> https://en.cppreference.com/w/cpp/iterator/iterator_traits
[16:30:10] <AliceMeows> xkoncek: on a side note if you have some error you could write a testcase and ask about it
[16:30:11] <ville> so you can ask it for the reference type when someone uses plain pointer as an iterator
[16:30:55] <ville> xkoncek: the concept of an iterator is very narrow. it really has not much to it. it's not very useful. everything requires something more than an iterator
[16:31:52] <ville> xkoncek: forward iterator, bidirectional iterator, random...
[16:31:55] <AliceMeows> iterators could be viewed as fancy pointers
[16:32:14] <AliceMeows> Or so I've heard multiple times in the past
[16:32:39] <ville> yes pointers fulfil all the iterator concepts
[16:33:36] <ville> usually a specific iterator concept only speaks of the subset of operations pointers are capable
[16:33:50] <ville> err speaks of a subset
[16:35:28] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[16:37:23] <ville> so i guess the concept "iterator" could be you can dereference and you can compare for equality... what else? adding ++ and it's the input iterator concept then
[16:38:08] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Read error: Connection reset by peer)
[16:38:57] *** Joins: voidiov (~voidiov@2a02:2f0e:6203:4c00:5192:8373:f586:1f80)
[16:39:45] <PJBoy> the old named requirements for iterators were much easier to read than the new concepts ones :/
[16:40:42] <PJBoy> for whatever reason, the standard seems unable to fully express these concepts using code
[16:41:35] <xkoncek> i just want to copy-paste declarations
[16:41:45] <ville> but perhaps xkoncek didn't literally mean "iterator concept"
[16:42:12] <PJBoy> I assume he did, because he was complaining about using the ranges library
[16:42:14] <ville> rather the "group of things that may be consdered some type of iterator or another"
[16:42:18] <xkoncek> i want "std::ranges::subrange<my_iterator>" to compil, that's all
[16:42:28] <ville> xkoncek: testcase
[16:42:48] <PJBoy> you need dereference and increment at minimum
[16:43:10] <xkoncek> note: the required type ‘std::iter_difference_t<_Iter>’ is invalid
[16:43:12] <PJBoy> and pre-increment has to return *this
[16:43:29] <PJBoy> and you need to define a difference_type type alias
[16:43:31] <ville> PJBoy: equality comparable too? or ranges re-worked that?
[16:43:45] <PJBoy> usually `using difference_type = ptrdiff_t;`
[16:44:12] <xkoncek> ok, see what i am getting at?
[16:44:14] <PJBoy> ranges iterator concept removed the need for equality comparison
[16:44:26] <ville> ok
[16:44:50] <PJBoy> cppref claims the rationale "does not require equality_comparable, since input iterators are typically compared with sentinels"
[16:45:39] <ville> yes one of ranges leading ideas was even allowing different iterator types for the beding/end wasn't it?
[16:45:50] <PJBoy> yup
[16:46:17] <ville> err i guess more accurately that end isn't even an iterator necessarily
[16:46:26] <PJBoy> so now the burden is on the sentinel to be comparable
[16:46:41] <PJBoy> sentinels are necessarily iterators
[16:46:48] <PJBoy> oh wait no
[16:46:50] <PJBoy> I misread
[16:47:06] <PJBoy> they
[16:47:16] <xkoncek> somewhere i used std::nullptr_t as the sentinel
[16:47:42] <PJBoy> they're comparable with an iterator, default constructible and copyable
[16:47:48] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:7465:4c52:7351:b51c) (Remote host closed the connection)
[16:47:48] <AliceMeows> xkoncek: write a testcase instead of beating around the bush
[16:47:58] <xkoncek> no
[16:48:11] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[16:48:21] <PJBoy> sentinels need not be comparable with themselves, and iterators need not be comparable with themselves though
[16:48:58] <PJBoy> the concepts aren't *too* bad to read for most of these things I've been looking up
[16:49:09] <PJBoy> input_iterator is the first awful one
[16:49:27] <AliceMeows> Concepts are easier to read than their templated counter parts
[16:49:56] <PJBoy> (lazy link https://en.cppreference.com/w/cpp/iterator/input_iterator )
[16:51:11] <AliceMeows> That could've been a lot worse
[16:52:07] <PJBoy> might just be too early in the morning, but I cannot interpret that iterator concept prose
[16:52:17] <PJBoy> nor do I feel I should have to
[16:59:18] <LordKalma> "Faster, Easier, Simpler Vectors - David Stone - CppCon 2021" we're still talking about this stuff
[17:06:08] <PJBoy> what stuff?
[17:07:29] <LordKalma> vectors
[17:07:40] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[17:08:26] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[17:08:32] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:08:58] <PJBoy> I don't think we've talked about vectors too much
[17:10:42] <PJBoy> I'm flicking through the video, doesn't look so easy or simple
[17:11:39] <PJBoy> unless it's simpler because it doesn't implement allocator awareness
[17:12:21] <PJBoy> idk I'm kinda done with cppcons
[17:12:35] <PJBoy> there needs to be a tldr con
[17:15:08] <rpav> con stuff mostly useful when it applies to your needs
[17:15:33] <rpav> that said some of the long talks seem like they could be done in 5-15 minutes
[17:16:30] <voidiov> what's a simple enough open source C++ project I can study to learn some cool techniques?
[17:17:19] <rpav> not sure if any
[17:17:38] <rpav> anything with "cool techniques" is likely to not be simple by definition
[17:18:46] <voidiov> edit: not simple, but one that doesn't have a huge codebase
[17:19:15] <rpav> https://github.com/ryanhaining/cppitertools .. might be a good one, but really _writing_ most of these is the better exercise
[17:19:53] <rpav> i also haven't actually looked at the code so it may suck, but you can write all of those pretty nicely .. though dealing with iterators sucks
[17:20:42] <voidiov> thank you. how would I go about writing? Should I try to understand what problem the project is trying to solve, then solving it without checking the codebase?
[17:20:49] <rpav> https://github.com/mpusz/units .. maybe but also haven't looked at
[17:21:16] <rpav> voidiov: tbh you should find some small project that is of direct and immediate use to you, and hack out a first take
[17:22:55] <PJBoy> the only cool technique in C++ is writing good tests
[17:23:00] <PJBoy> and using a clean build system
[17:23:19] <PJBoy> neither of which you're too likely to find in open source code
[17:23:48] <voidiov> for me it's a weird situation because I've been trying to come up with things that I would need but couldn't, which is why I turned to open source project. Imma try harder. Thank you for your suggestions
[17:24:20] <rpav> nlohmann/json has extensive testing
[17:24:29] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:24:31] <rpav> not particularly interesting except as a potential reference at some point
[17:25:06] <rpav> very clean and easy to read, and probably pretty good cmake usage too, but pretty boring
[17:25:26] <rpav> voidiov: well, what is your goal and/or current need at all
[17:26:02] <LordKalma> !rq
[17:26:02] <nolyc> LordKalma: <kalven> is this where you call Alipha a moron?
[17:27:17] <voidiov> rpav: I want to learn/practice writing modern C++ code
[17:27:49] <LordKalma> that's something you develop with time, by first having a problem of your own
[17:27:56] <LordKalma> and then idjk, read books, watch talks
[17:27:59] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:28:04] <LordKalma> read others code, yeah, but when you can pass judgment on it
[17:28:10] <LordKalma> whether what it presents is good or niot
[17:28:15] <rpav> writing modern c++ is a means to an end; without an actual goal it's hard to practice
[17:28:18] <LordKalma> if it introduces you to something interesting
[17:28:19] *** Joins: txtsd (~txtsd@user/txtsd)
[17:28:39] <txtsd> Can I ask about mingw and cmake stuff in here?
[17:28:53] <LordKalma> !topic
[17:28:54] <nolyc> #C++ is strictly for Standard C++, including potential and future standardizations. Stay on topic in #C++. #C++-general is less strict, meant for libraries, projects, compilers, and tools in the wider C++ ecosystem, but still must pertain to C++ in some way.
[17:29:03] <LordKalma> yes
[17:29:55] <voidiov> You all's tips are great. I will go introspect more and find a project idea I'd like to build. Thank you.
[17:30:33] <LordKalma> there's only one forbidden c++ topic in #c++-general, and that's neogfx
[17:31:31] <txtsd> Okay so. I suddenly have to make a 32bit build of a project. The toolchain is mingw, and until recently I've been building by using `cmake --build <dir>`. Now I have to use `mingw32-make` to build instead. Is there a way I can tell cmake to do everything in 32bit mode, so I can keep building by using `cmake --build <dir>`?
[17:31:50] <LordKalma> you'll want to use a toolchain file
[17:31:58] <txtsd> I don't know what that is
[17:32:14] <Hello71> #cmake
[17:32:20] <LordKalma> basically it's a small cmake file that tells cmake what compilers you want
[17:32:47] <LordKalma> you use it with cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file.cmake
[17:33:04] <txtsd> There's no env vars like CXXFLAGS that will take care of this? I passed set CFLAGS and CXXFLAGS to '-m32' but it throws ld errors.
[17:33:45] <AliceMeows> m32 isn't supported on windows
[17:33:57] <LordKalma> txtsd, ah, you can do it with CC and CXX
[17:34:04] <LordKalma> but you have it slightly wrong
[17:34:07] <LordKalma> you dont' use -m32
[17:34:10] <LordKalma> you change the executable
[17:34:44] <LordKalma> o make 32-bit binaries, use i686-w64-mingw32-g++.exe
[17:34:53] <LordKalma> or whatever it's called
[17:35:00] <AliceMeows> If you're using native mingw then you must use the correct version i686 instead of x86_64 one with a cross compiler -m32 might work but I haven't tried it so I don't know for sure
[17:35:30] <LordKalma> ah is this mingw on linux?
[17:35:36] <txtsd> I'm trying to run this on GitHub Actions windows runner.
[17:35:45] <LordKalma> ah ok
[17:35:56] <LordKalma> anyway, yeah, you need to set CC and CXX to the right application
[17:36:45] *** Joins: x_kuru (~xkuru@user/xkuru)
[17:36:45] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Read error: Connection reset by peer)
[17:36:47] <txtsd> So I set CC and CXX to i686-w64-mingw32-gcc.exe and i686-w64-mingw32-g++.exe?
[17:36:51] *** Emet-Selch is now known as Azem
[17:36:56] <txtsd> These will be in PATH, right?
[17:37:02] <LordKalma> assuming those are the name, yes
[17:37:06] <LordKalma> they hopefully will
[17:37:11] <LordKalma> consult github's documentation
[17:37:13] <txtsd> Okay I will try and report back
[17:37:14] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[17:37:17] <txtsd> Thanks for your help so far!
[17:39:01] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[17:41:15] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[17:42:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:19] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:19] *** ChanServ sets mode: +v npaperbot
[17:46:11] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:55:05] *** Joins: ville (~ville@user/ville)
[17:58:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:11:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:12:09] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[18:13:02] *** Quits: voidiov (~voidiov@2a02:2f0e:6203:4c00:5192:8373:f586:1f80) (Remote host closed the connection)
[18:13:28] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:17:22] *** Joins: ville (~ville@user/ville)
[18:21:45] <ville> so https://www.zdnet.com/article/intel-invests-in-open-source-risc-v-processors-with-a-billion-dollars-in-new-chip-foundries/ just happened yesterday
[18:23:19] <rpav> i feel like there ought to be "easy program exercises everyone writes" for C++ but i'm not sure
[18:23:32] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[18:23:38] <LordKalma> knowing intel, they'll shove 500000 new proprietary instructions on whatever RISC-V processor they make
[18:23:46] <rpav> like if you're writing games there are a ton of "basic" games you should write at some point but .. code in general? 🤔
[18:23:49] <ville> ...but then it's probably to replace the 3 486 cores with risc-v ones, rather than making desktop risc-v
[18:23:55] <LordKalma> in fact, that's the story of all RISC-V projects I've seen
[18:24:15] <LordKalma> take a reduced instruction set, add 7655234 new ones
[18:24:23] <ville> rpav: json parser?
[18:24:58] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:25:31] <PJBoy> rpav, raytracer?
[18:25:51] <LordKalma> cmake-raytracer?
[18:25:56] <ville> with added benefit of giving them something they can utilize in other projects down the line
[18:25:56] <LordKalma> perhaps the most cursed project ever
[18:26:41] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Remote host closed the connection)
[18:26:57] *** Joins: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d)
[18:26:57] <ville> std::vector-like?
[18:27:03] <PJBoy> raytracer is one of those things that's easier to write that to use someone else's
[18:27:09] <PJBoy> *than
[18:27:18] <LordKalma> says you
[18:27:26] <PJBoy> so it teaches you an important lesson to always preach NIH
[18:28:05] <LordKalma> NIH?
[18:28:18] <PJBoy> !NIH
[18:28:19] <nolyc> NIH is Not Invented Here syndrome. See http://c2.com/cgi-bin/wiki?NotInventedHere and http://en.wikipedia.org/wiki/Not_Invented_Here
[18:28:30] *** Joins: voidiov (~voidiov@2a02:2f0e:6203:4c00:5192:8373:f586:1f80)
[18:28:31] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:28:46] <PJBoy> also
[18:28:48] <PJBoy> !IHBLRIA
[18:28:49] <nolyc> IHBLRIA is Invented Here, But Let's Reinvent It Anyway
[18:29:43] <PJBoy> rip flash
[18:30:32] <LordKalma> adobe flash?
[18:31:04] <PJBoy> yeah
[18:31:09] <PJBoy> or even macromedia flash
[18:31:26] <PJBoy> which I think that c2 website wants to use
[18:32:14] <ville> maybe a small vm would be a good project actually. you can do one of those in ~200 lines. sneak in some insight into assembly on the unsuspecting victims
[18:32:57] *** Quits: voidiov (~voidiov@2a02:2f0e:6203:4c00:5192:8373:f586:1f80) (Ping timeout: 240 seconds)
[18:33:19] *** Quits: hexingb (~hexingb@2409:8900:2700:507:c98a:566:c267:420d) (Read error: Connection reset by peer)
[18:33:39] <PJBoy> oh nvm, the website just loads its (static) content with javascript for some reason
[18:33:57] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 240 seconds)
[18:35:09] <PJBoy> NES emulator is another common project
[18:35:18] *** Quits: Uswald (~Uswald@user/Uswald) (Quit: WeeChat 3.4)
[18:37:01] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[18:37:10] <PJBoy> Bisqwit has a two part video series on making one with C++11 https://www.youtube.com/watch?v=y71lli8MS8s
[18:37:22] <PJBoy> only 940 lines of code
[18:37:45] <LordKalma>  https://www.youtube.com/c/javidx9 has some cool projects as well
[18:37:46] <PJBoy> although it's some pretty audacious code
[18:38:05] <PJBoy> makes Jason Turner look like a chump
[18:38:28] <LordKalma> including of course https://www.youtube.com/c/javidx9
[18:38:44] <LordKalma> what's a chump?
[18:38:46] *** Joins: ville (~ville@user/ville)
[18:39:18] <PJBoy> a sucker, a doofus, a fool
[18:40:01] <LordKalma> holy shit, skimming through the video
[18:40:23] <LordKalma> it has no constexpr, Turner doesn't approve
[18:40:46] <PJBoy> scroll too the bottom of https://bisqwit.iki.fi/jutut/kuvat/programming_examples/nesemu1/nesemu1.cc
[18:40:58] *** Joins: voidiov (~voidiov@2a02:2f0e:6203:4c00:5192:8373:f586:1f80)
[18:41:00] <PJBoy> and look at that Ins() function
[18:41:25] <LordKalma> t("                    nnnn 4   !   ", X = t)
[18:41:27] <LordKalma> what even the fuck
[18:41:32] <PJBoy> ahahaha yup
[18:41:39] <rpav> ville: i dunno .. json parser is very simple in the trivial case and not particularly generally interesting in the optimal case
[18:41:57] <LordKalma> t("3 6 2 6 2 6 286 2 6 2 6 2 6 2 6 /", addr=RB(c=addr); addr+=256*RB(wrap(c,c+1)))// indirect w/ page wrap
[18:42:09] <rpav> PJBoy: raytracer is mostly linear algebra and spatial partitioning/etc and not particularly C++
[18:42:13] <rpav> well
[18:42:13] <rb> i see
[18:42:27] <rpav> not particularly <language> or <general> maybe
[18:42:50] <PJBoy> it's suited to C++ because it should be implemented with speed in mind
[18:42:52] <LordKalma> we have a tendency to overfly focus on math when teaching programming
[18:43:03] <PJBoy> whilst simultaneously making good use of OO design
[18:43:08] <rpav> i guess it's not even clear what basic/general principles ought to first be learned, assuming we're not talking about "my first loop" or "what a float is"
[18:43:23] <PJBoy> also even without rationale, it's a project lots of C++ devs do at some point for some reason
[18:43:28] <PJBoy> so that's why I mentioned it
[18:45:28] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:45:55] <ville> what oo is there in a ray tracer? that'll surely kill any speed you had in mind
[18:46:14] <PJBoy> sources of light, surface textures
[18:46:32] <PJBoy> geometrical shapes
[18:46:42] <PJBoy> light mediums
[18:46:48] <PJBoy> depends how crazy you wanna go
[18:47:12] <PJBoy> if you look up any raytracer it'll have tonnes of OO
[18:50:41] <rpav> PJBoy: i'm not sure what you consider "good use of OO design" nor how it would really apply to a raytracer
[18:51:05] <PJBoy> :/
[18:51:21] <PJBoy> how else are you gonna write a raytracer?
[18:51:48] <rpav> i'm not even sure i know of a raytracer written in C++
[18:51:57] <rpav> dkbtrace/povray were definitely not
[18:52:41] *** Quits: callq (~callq@2409:4062:2d8d:345f:158c:2117:eab6:8c14) (Quit: callq)
[18:52:48] <rpav> struct/union of shapes is perfectly sufficient for a "classical" one, and modern "trace all the tris" stuff only deals in tris anyway
[18:53:35] <ville> rpav: perhaps the most "famous" one is "physically based rendering" book's renderer
[18:53:40] <rpav> (i mean .. you're going to want more if you write a serious optimized raytracer, but that's not a getting-started exercise)
[18:53:59] <ville> https://www.pbr-book.org/3ed-2018/contents
[18:54:02] <rpav> PBR? is that even RT
[18:54:21] <ville> pbr the term or pbr the book?
[18:54:23] <rpav> that is definitely not the most famous raytracer
[18:54:27] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[18:54:37] <ville> rpav: famous one written in c++
[18:54:40] <rpav> i mean whatever the book's renderer is; typically PBR is a rasterizing hack
[18:55:17] <rpav> yea that's definitely rt .. where's the C++ bit
[18:55:46] <ville> rpav: in the book/source code. it's literate programming-based project
[18:55:51] <rpav> ew ;)
[18:56:41] <rpav> also ew, lots of virtual in this
[18:56:54] <ville> yes. but that's oo for you in ray tracer
[18:57:12] <rpav> precisely the worst way to do it
[18:57:36] <rpav> and java-style OO isn't the only OO
[18:58:23] <rpav> especially with modern C++ letting us do more templately static stuff .. if someone wants to learn _modern_ C++ this is not the approach to recommend (or even if they don't)
[18:58:48] <PJBoy> modern != static
[18:59:00] <PJBoy> dynamic polymorphism still makes sense
[18:59:05] <rpav> not here
[18:59:10] <PJBoy> sure it does
[18:59:17] <PJBoy> that's why so many raytracer projects work this way
[18:59:25] <PJBoy> and they're all plenty fast
[18:59:31] <rpav> it definitely _does_ in cases where 1) performance isn't a huge issue and 2) it's all dynamic in the most general possible way
[18:59:46] <AliceMeows> It might be due to ease of development not because its the superior solution
[18:59:46] <rpav> so many? can you point to _any_ raytracer of repute that works this way?
[18:59:51] <PJBoy> no reason to conclude that staticy stuff outperforms dynamicy stuff
[19:00:01] <ville> PJBoy: but it's not fast fast. it's fast because modern machines are amazing and the scenes you would feed one in hobby use would be "trivial"
[19:00:11] <PJBoy> if you're looking for speed you gotta try both approaches
[19:00:21] <rpav> AliceMeows: only sortof, if you brain this model as the one making the most sense, and you don't learn better models and how _they_ make more sense
[19:00:34] <ville> PJBoy: even the authors of pbr acknowledge it that they are losing speed because of the design of their code
[19:00:48] <PJBoy> do they back up their acknowledgement with any kind of evidence?
[19:00:54] <ville> edition 4 has reworked it some
[19:01:34] <rpav> PJBoy: the kind of evidence you're asking for is like asking for evidence that bubble sort is faster; yes, there is evidence; no, we are not going to point it out because if you're having this conversation and you don't know the fundamental issues already then you need to learn them before proceeding
[19:01:47] <PJBoy> insertion sort does outperform quicksort sometimes
[19:01:50] <rpav> or rather asking for evidence that bubble sort isn't as fast
[19:01:52] <PJBoy> so it's certainly not obvious
[19:02:02] <rpav> yes it is obvious, _if you know how big-O works_
[19:02:04] <PJBoy> but that's time complexity stuff anyways
[19:02:09] <PJBoy> so that's besides the point
[19:02:23] <PJBoy> virtual vs variant is a non obvious tradeoff
[19:02:34] <rpav> (there are plenty of algorithms that take a large `n` to warm up)
[19:02:47] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[19:02:56] <rpav> PJBoy: not if you know how modern architecture works, and how to design fast things for a known set of similar input data
[19:02:56] <ville> rpav: also pbr is not "a rasterizing hack". pbr is a general term. its real-time implementations are hacks.
[19:03:04] <PJBoy> derived classes never slow down other classes in virtual world, they can slow down other variants in variant world
[19:03:40] <PJBoy> also paying for max(sizeof(variant)...) can lose performance instantly
[19:04:21] <rpav> ville: fair enough, but it's most popularly used for the hacky raster shader techniques
[19:05:10] <ville> rpav: i would say most modern "offline" ray tracers use it as well. it just makes things simpler. even if the end results are pixar cartoony stuff
[19:05:25] <ville> (well path tracers)
[19:05:25] <rpav> the book more or less defines it and sets it in context of actual physically-based rendering
[19:06:04] <ville> yes the book is great material. even if the code choices are not what you might make
[19:06:05] <rpav> ville: well .. ray/pathtracing sortof _is_ it by default, though PBR goes further in terms of surface treatment wrt realism
[19:06:15] *** Quits: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[19:07:03] <rpav> they're ok, given it was likely written early 10s, fine enough for demonstration
[19:07:54] <rpav> a lot of educational material has terrible code, where "works" is more the focus than "teach good code"
[19:08:47] *** Joins: joaofukuda (~joaofukuk@2804:431:c7f4:345c:9441:82c4:a226:af6b)
[19:09:00] <ville> or wait was 3rd edition the better one, and i've 2nd edition? i can't remember
[19:09:01] <rpav> i think the more interesting question is what _are_ the basic principles one ought to learn by writing some basic coding exercises
[19:10:10] <rpav> like writing a json/etc parser or a raytracer _are_ great exercises, but they seem more targeted than "write pong/snake/sokoban/tetris" are? but maybe not, since each of those have different principles too
[19:10:45] <ville> yeah mine's the 2004 edition
[19:10:55] <rpav> err
[19:11:15] <rpav> maybe it's not even the same book i was thinking
[19:11:34] <ville> i am talking about the book i linked moments ago
[19:12:05] <rpav> yeah .. there was a 2004 version, wow
[19:15:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[19:25:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:29:09] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:34:44] *** Joins: Uswald (Uswald@user/Uswald)
[19:36:40] *** Joins: bobb_ (~bobb_@dslb-092-075-158-175.092.075.pools.vodafone-ip.de)
[19:39:48] *** Joins: Simplar (~Simplar@188.163.93.241)
[19:40:06] *** Joins: sbrothy (~sbrothy@192038128044.mbb.telenor.dk)
[19:49:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[19:50:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[20:10:39] *** Joins: k8yun_ (~k8yun@24.244.29.114)
[20:11:19] <Alipha> AliceMeows: not sure why you're using std::disjunction_v and std::negation_v instead of just || and !, e.g., `std::is_pointer_v<T2> || detail::has_arrow_fn_op_v<T2>`
[20:13:50] <AliceMeows> Because this is what I've done to begin with so I wanted to keep it for consistency
[20:14:15] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[20:14:25] <Alipha> AliceMeows: all your usages of std::forward are actually just doing moves. so use std::move instead. and std::forward or std::move a bool seems kinda silly. just do `m_valid{r.m_valid}`
[20:15:32] <AliceMeows> The m_valid was kind of bolted to the initial implementation so I've rushed it a bit and didn't put much thought into this
[20:16:45] <PJBoy> lack of concepts is my complaint
[20:17:13] <Alipha> AliceMeows: it looks like `const inout_param<resource> to_param() const noexcept {` should actually be `inout_param<const resource> to_param() const noexcept {`
[20:17:14] <AliceMeows> I initially wrote it without support for concepts so this what I had to write
[20:17:34] <AliceMeows> Alipha: good point, I should fix that
[20:17:37] <PJBoy> I figured, but then I saw C++20 in the flags, so I was unsure
[20:18:12] <AliceMeows> PJBoy: I've copied it from a local file and left the flag from other tests without actually changing those which happens very often
[20:19:13] <PJBoy> fair enough
[20:20:58] <AliceMeows> My only problem with this design is that inout_ptr_t (I hope it doesn't make it into the standard) breaks it
[20:21:39] <AliceMeows> Hence the to_param() functions
[20:22:10] *** Quits: k8yun_ (~k8yun@24.244.29.114) (Changing host)
[20:22:10] *** Joins: k8yun_ (~k8yun@user/k8yun)
[20:25:07] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:5029:5f05:ab86:592e)
[20:25:07] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:5029:5f05:ab86:592e) (Changing host)
[20:25:07] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:25:56] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[20:25:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[20:26:06] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Read error: Connection reset by peer)
[20:26:26] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[20:27:05] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Remote host closed the connection)
[20:28:53] <PJBoy> inout ptr stuff already made it into the standard
[20:29:20] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[20:29:40] <AliceMeows> In my initial implementations it was 'value based' which ranged from wrapping the type to be managed to a 'validator' functor/struct that had to be passed to check for validity but that had the problem of not allowing unique_resource to move as it would leave it in a 'valid' state and no default value of any sort could be used without utilizing various hacks via type wrapping
[20:29:53] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:31:11] <AliceMeows> PJBoy: it did? :(
[20:31:21] <PJBoy> cite https://github.com/cplusplus/papers/issues/41#issuecomment-951649138
[20:31:42] <PJBoy> libstdc++ implements it too
[20:31:48] <rpav> oh as a _type_
[20:32:03] <PJBoy> oh wait uh
[20:32:06] <PJBoy> MSVC implements it
[20:32:17] <rpav> i thought there were some rumblings about `inout T& x`
[20:32:17] <AliceMeows> This renders my work completely useless...
[20:32:38] <rpav> nothing's useless if you find it useful now
[20:32:58] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:33:33] <PJBoy> I've barely looked at inout_ptr so I'm not sure what the deal is
[20:33:34] <AliceMeows> Problem is that now my unique_resource might not ever make it into the standard even if I were to write the paper
[20:33:40] <PJBoy> in spite of the fact that we've spoken about this before
[20:34:05] <PJBoy> for some reason I thought unique_resource was one of the libfun extensions
[20:34:21] <rpav> how does unique_resource differ from unique_ptr
[20:34:37] <PJBoy> it is
[20:34:41] <AliceMeows> unique_resource can manage any type and doesn't have to be nullable
[20:34:45] <PJBoy> https://en.cppreference.com/w/cpp/experimental/unique_resource
[20:34:54] <AliceMeows> Yes and its garbage
[20:35:08] <PJBoy> oh that's right, we spoke about that one too
[20:36:22] <rpav> so .. it handles things that are not necessarily pointers or allocated?
[20:36:24] <PJBoy> I remember agreeing it was trash too
[20:36:24] <AliceMeows> Here is the deal, inout_ptr solves the problem of needing to pass around a managed pointer by returning inout_ptr_t which internally calls release()/get() and reset() in its dtor
[20:37:34] <AliceMeows> Since the committee opposed the idea of providing operator T* for unique_ptr/shared_ptr it lead to inout_ptr solution but it breaks unique_resource
[20:38:39] <AliceMeows> unique_resource unlike unique_ptr does not have a null state so you can't just call reset and hope the dtor do the right thing and not call the assigned deleter if the value isn't actually valid and this is the problem with inout_ptr
[20:39:11] *** Quits: bobb_ (~bobb_@dslb-092-075-158-175.092.075.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:39:24] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:40:07] <AliceMeows> unique_resource assumes that once reset(...) is called the state must be valid and it cannot validate it any further while inout_ptr relies on the fact that its non intrusive by calling release()/get() and reset() on the type it was provided with and that breaks unique_resource's assumption hence the breakage
[20:40:09] <rpav> whoa, lldb has decent struct inspection
[20:43:22] *** Joins: magla (~gelignite@d5367123.access.ecotel.net)
[20:44:49] <AliceMeows> In order to fix unique_resource you'd need to either hack it or introduce overhead and neither would be desired but thanks to some idiots the stl is broken in one more way that it previously was
[20:45:57] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[20:48:12] *** Joins: unyu (~pyon@user/pyon)
[21:03:44] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[21:04:35] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:16:34] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:17:02] *** Joins: seninha (~seninha@user/seninha)
[21:18:26] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Remote host closed the connection)
[21:18:49] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[21:26:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[21:29:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[21:31:14] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[21:31:46] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Read error: Connection reset by peer)
[21:32:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:32:10] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[21:32:21] <Friithian> oh fun I get to do file system work but without std::filesystem
[21:33:02] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th) (Read error: Connection reset by peer)
[21:33:38] *** Joins: p-i- (~Ohmu@mx-ll-183.89.35-200.dynamic.3bb.co.th)
[21:35:51] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[21:36:37] *** Quits: proller (~p@2a02:6b8:0:40c:48a2:776d:3f17:1e22) (Ping timeout: 240 seconds)
[21:37:13] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[21:38:26] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Remote host closed the connection)
[21:38:53] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[21:42:08] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:42:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:21] *** ChanServ sets mode: +v npaperbot
[21:43:43] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[21:49:53] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[21:50:02] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[21:51:44] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[21:52:30] *** Joins: letto (~letto@86.120.81.105)
[21:55:33] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Read error: Connection reset by peer)
[21:55:47] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[21:59:06] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:59:30] *** Joins: chris64 (~chris@user/chris64)
[22:00:02] *** Joins: seninha (~seninha@user/seninha)
[22:00:14] <night_wulfe> / definitely_not_filesystem_confidential_dont_open.h
[22:00:14] <night_wulfe> #include<filesystem>
[22:00:14] <night_wulfe> using namespace nfs = std::filesystem;
[22:00:16] *** Joins: CalamityToo (~CalamityB@2603-8000-d907-cec8-4040-1a78-e1d5-b3df.res6.spectrum.com)
[22:03:05] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:03:57] *** Quits: CalamityBlue (~CalamityB@2603-8000-d907-cec8-4040-1a78-e1d5-b3df.res6.spectrum.com) (Ping timeout: 256 seconds)
[22:04:17] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:ac8b:76d2:9030:fa62)
[22:05:44] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:06:41] <Friithian> oh if only
[22:06:51] <Friithian> we also will be recreating argparse
[22:06:59] <Friithian> get opt long wheee
[22:08:23] *** Quits: andreasbuhr (~quassel@p549db6c6.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:10:02] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[22:10:25] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[22:16:56] *** Joins: paul424 (~tom@ip-5-172-237-33.multi.internet.cyfrowypolsat.pl)
[22:17:47] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:26:50] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[22:26:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[22:30:35] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:35:02] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[22:35:25] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[22:43:58] *** Quits: john99 (~john99@199.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[22:45:37] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49) (Read error: Connection reset by peer)
[22:46:06] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::49)
[22:50:00] <great_taste> ugh I though std::variant could hold no value, like an optional
[22:50:35] <hnOsmium0001[m]> you need to add a std::monostate option if that's what you desire
[22:51:59] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[22:52:26] <great_taste> hmm
[22:52:51] <ville> or do you _really_ need to? https://en.cppreference.com/w/cpp/utility/variant/valueless_by_exception
[22:53:48] <hnOsmium0001[m]> that sounds like a bad idea, but I guess if you really wanted to...?
[22:55:00] <ville> hnOsmium0001[m]: yes, just fun to snipe people making absolute statements about c++. there are no valid absolute statements. including this one
[22:55:25] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:56:02] <PJBoy> I am lying
[22:57:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:57:47] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102) (Ping timeout: 256 seconds)
[22:59:47] *** Joins: proller (~p@2a02:6b8:b081:7210::1:32)
[23:01:18] <Alipha> great_taste: std::variant<std::monostate, int, double>
[23:01:41] <great_taste> yeah I feel dumb because I didn't rtfm
[23:01:51] <great_taste> I should know that :)
[23:02:08] <Alipha> great_taste: note you want std::monostate to be the first alternative, as default constructed variants will default construct the first alternative
[23:02:20] <great_taste> yes
[23:02:40] <great_taste> now I know
[23:07:35] *** Joins: john99 (~john99@199.246.103.34.bc.googleusercontent.com)
[23:13:19] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[23:17:01] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:60ef:8113:9157:1102)
[23:18:40] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:20:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:20:18] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:20:24] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:22:35] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:27:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[23:30:31] *** Quits: proller (~p@2a02:6b8:b081:7210::1:32) (Ping timeout: 268 seconds)
[23:30:43] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:30:45] *** Joins: AmR (~AmREiSa@156.199.10.76)
[23:31:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[23:41:45] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[23:43:07] *** Joins: proller (~p@80.240.216.69)
[23:44:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:45:31] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:49:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:49:26] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[23:57:04] *** Joins: bobb_ (~bobb_@dslb-092-075-158-175.092.075.pools.vodafone-ip.de)
[23:59:54] *** Quits: Oxyd (~oxyd@user/oxyd) (Read error: Connection reset by peer)
