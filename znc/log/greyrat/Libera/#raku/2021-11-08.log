[00:06:44] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:16:41] <Xliff> japhb: https://github.com/Xliff/raku-Duration-Units/blob/main/lib/Duration/Units.pm6
[00:33:20] <japhb> Xliff: Years are ~ 365.24 days long, not 365.75.  :-)
[00:35:12] <japhb> The almosts can be filtered out by doing that at the end.
[00:36:00] <japhb> (They are all equivalent to `$almost = $time-val < 1` at the end)
[00:36:26] <japhb> But yeah, for human durations, that's a good start.
[00:37:13] <japhb> It's biased towards English, of course, but that's a separate problem.
[00:58:47] *** Quits: gordonfish- (~gordonfis@user/gordonfish) ()
[00:59:14] *** Joins: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com)
[01:02:49] <japhb> .tell patrickb https://github.com/japhb/Terminal-LineEditor/commit/d23c4dce22acfad637d3813cc1776d4ce1cab3e5 -- thanks for the suggestion!
[01:02:50] <tellable6> japhb, I'll pass your message to patrickb
[01:59:14] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:59:14] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[02:01:34] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[02:20:56] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[02:21:35] *** Joins: seednode (~seednode@user/seednode)
[02:23:37] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:00:09] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[03:33:19] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:34:50] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:46:02] <Xliff> japhb: I've never internationalized before, but I'll accept PRs!
[03:48:42] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 260 seconds)
[04:05:26] <japhb> Fair enough.  :-)
[04:05:32] * japhb is currently hacking on https://github.com/japhb/Terminal-LineEditor
[04:06:51] <japhb> I will be happy when I can call it a strict superset of Linenoise, but I still need to do tab completion and hints.  At least the key bindings are in much better shape now.
[04:14:22] <moon-child> japhb: just tried it, alt+left causes it to print 'Str $base = "\x[1B][D"', then a newline, then 'Array @args = ["1", "3"]'; and then it freezes
[04:15:01] *** Joins: frost (~frost@user/frost)
[04:30:12] <japhb> moon-child: That indicates that I haven't decoded that key properly and it's printing out the escape sequence info so I can figure out what I'm missing.  Helps people give good bug reports.  :-)
[04:30:32] <japhb> Were you just trying key combos, or is there something you expect to be bound to that?
[04:31:17] <moon-child> just trying inputs randomly
[04:31:53] <japhb> I should still at least have *decoded* that properly, even if it's not bound
[04:31:56] <japhb> Looking at it now.
[04:35:25] <japhb> D'oh, I see what I missed.
[04:43:35] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[04:57:52] <japhb> Just waiting for GH tests before uploading
[04:59:54] <japhb> moon-child: It's `fez upload`ed, but hasn't appeared in raku.land yet
[05:02:13] <japhb> moon-child: Please do let me know if you come across any more of those.
[05:03:19] <japhb> Actually, that applies to anyone, not just moon-child++  :-)
[05:34:47] *** Quits: merpaderp (~ircuser@89.111.36.243) (Ping timeout: 268 seconds)
[05:34:59] *** Joins: merpaderp (~ircuser@89.111.36.243)
[05:53:05] *** Parts: pony (sid524992@smol/hors) ()
[05:58:10] *** Quits: vrurg (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[05:58:42] *** Joins: vrurg (~vrurg@45.74.95.181)
[06:10:28] *** Quits: SmokeMachine (sid19088@id-19088.tinside.irccloud.com) (Ping timeout: 268 seconds)
[06:10:35] *** Quits: kawaii_ (sid345572@2a03:5180:f:4::5:45e4) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: leont (sid489095@2a03:5180:f:5::7:7687) (Ping timeout: 264 seconds)
[06:10:37] *** Joins: SmokeMachine (sid19088@tinside.irccloud.com)
[06:11:05] *** Quits: rjbs (sid498898@id-498898.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[06:11:05] *** Quits: ecocode__ (sid500572@id-500572.lymington.irccloud.com) (Ping timeout: 268 seconds)
[06:11:36] *** Joins: leont (sid489095@uxbridge.irccloud.com)
[06:11:43] *** Joins: rjbs (sid498898@uxbridge.irccloud.com)
[06:12:19] *** Quits: pjlsergeant (sid143467@2a03:5180:f:4::2:306b) (Ping timeout: 268 seconds)
[06:12:19] *** Quits: patterner_ (sid212303@2a03:5180:f:3::3:3d4f) (Ping timeout: 268 seconds)
[06:12:26] *** Joins: patterner_ (sid212303@ilkley.irccloud.com)
[06:12:46] *** Joins: pjlsergeant (sid143467@hampstead.irccloud.com)
[06:15:47] *** Joins: ecocode__ (sid500572@lymington.irccloud.com)
[06:16:05] *** Joins: kawaii_ (sid345572@hampstead.irccloud.com)
[06:20:48] *** Quits: patterner_ (sid212303@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:02] *** Quits: mjgardner (sid182628@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:35:28] *** Joins: mjgardner (sid182628@id-182628.ilkley.irccloud.com)
[06:35:53] *** Joins: patterner_ (sid212303@id-212303.ilkley.irccloud.com)
[06:48:23] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:48:41] *** Quits: mjgardner (sid182628@id-182628.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:51:01] *** Joins: patterner_ (sid212303@ilkley.irccloud.com)
[06:51:07] *** Joins: mjgardner (sid182628@ilkley.irccloud.com)
[07:11:55] <japhb> moon-child: 0.0.8 is there now, with more README docs about keymaps.
[07:31:59] *** Quits: kawaii_ (sid345572@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:32:11] *** Quits: PotatoGim (sid99505@lymington.irccloud.com) (Ping timeout: 245 seconds)
[07:32:11] *** Quits: ecocode__ (sid500572@lymington.irccloud.com) (Ping timeout: 256 seconds)
[07:32:28] *** Quits: zostay (sid170293@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[07:32:45] *** Quits: skaji (sid178483@tinside.irccloud.com) (Ping timeout: 256 seconds)
[07:32:53] *** Joins: zostay (sid170293@id-170293.hampstead.irccloud.com)
[07:33:01] *** Quits: patterner_ (sid212303@ilkley.irccloud.com) (Ping timeout: 244 seconds)
[07:33:01] *** Quits: pjlsergeant (sid143467@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:33:19] *** Quits: SmokeMachine (sid19088@tinside.irccloud.com) (Ping timeout: 256 seconds)
[07:33:29] *** Joins: SmokeMachine (sid19088@id-19088.tinside.irccloud.com)
[07:33:42] *** Quits: mjgardner (sid182628@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[07:33:46] *** Joins: kawaii_ (sid345572@id-345572.hampstead.irccloud.com)
[07:33:48] *** Joins: patterner_ (sid212303@2a03:5180:f:3::3:3d4f)
[07:33:53] *** Quits: rjbs (sid498898@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[07:34:02] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[07:34:06] *** Quits: leont (sid489095@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[07:34:38] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[07:34:44] *** Joins: skaji (sid178483@id-178483.tinside.irccloud.com)
[07:34:46] *** Joins: ecocode__ (sid500572@id-500572.lymington.irccloud.com)
[07:34:48] *** Joins: mjgardner (sid182628@id-182628.ilkley.irccloud.com)
[07:34:49] *** Joins: rjbs (sid498898@id-498898.uxbridge.irccloud.com)
[07:51:10] <moon-child> japhb: I am trying to teach lineeditor that multiple kills in sequence should append/prepend to the 'yankable' buffer (so given '^W^W^W^Y', you should get back all three words); but other transformations should reset it
[07:51:37] <moon-child> only problem is, moving the cursor should also trigger this, but EditableBuffer does not model the location of the cursor
[07:51:44] *** Joins: leont (sid489095@id-489095.uxbridge.irccloud.com)
[07:51:56] <moon-child> not sure if there's a good solution, beyond just providing it a method to say 'something happened', which seems a bit dirty
[07:52:14] *** Quits: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com) (Quit: Connection closed)
[07:52:25] <moon-child> alternately, the kill buffer should not be managed by the buffer itself.  Actually, that seems like the better solution, now that I think about it
[08:02:49] <japhb> moon-child: Interesting.  Is that expected for *any* sequence of deletes?  Like should ^W^D^D<backspace>^Y pull all deleted bits back?
[08:03:42] <japhb> When you say "other transformations should reset it" do you mean you expect them to stop the chain, or reset the yank buffer?
[08:04:13] <japhb> (Note that I haven't modeled the Readline concept of a kill/yank ring yet, are you expected that as well?)
[08:06:08] <moon-child> japhb: I mean that they should stop the chain; an operation other than a kill, following a kill, should make it so that subsequent kills will replace the kill buffer rather than adding to it
[08:06:09] <japhb> Normally EditableBuffer reports from its methods whether *it* made a change to the buffer, and part of the reason for that is that it *does* track the position of the insert cursor.
[08:06:40] <moon-child> my experience with zle and readline is that characterwise deletions should not count
[08:07:01] <japhb> moon-child: ... or in the case of a kill/yank ring, start a new kill buffer on "top"?
[08:07:02] <moon-child> but repeated word-wise or other deletions should.  So ^W M-D M-D ^W ^Y should give you back all four words
[08:07:18] <moon-child> japhb: 'on "top"' yeah
[08:08:17] <japhb> Interesting.  OK, makes sense (or at least, as much as any historical baggage does  :-)  )
[08:09:12] <japhb> Oh, sorry:
[08:09:24] <moon-child> in terms of defaults.  Presumably you would have an operation 'kill-character-back' vs 'delete-character-back', and can bind whichever you like
[08:09:39] <japhb> Terminal::LineEditor::SingleLineTextInput has-a Terminal::LineEditor::SingleLineTextBuffer::WithCursors -- which is exactly what it sounds like
[08:10:00] <moon-child> oh, I see
[08:10:48] <japhb> Oh decent point, so then just have word-ish bindings default to kill, and char-ish bindings default to delete?
[08:12:20] <moon-child> that's what I would do.  There's also delete-line which should probably (?) replace the entire buffer
[08:12:45] <japhb> (FWIW, the infrastructure was designed to support infinite cursors and arbitrary undo/redo, neither of which is actually used to full extent when emulating a POSIX shell's line editor, but you know ... it's there.  I even tried to make the lower-levels amenable to supporting someone who wants to do collaborative CLI apps.)
[08:14:11] <japhb> moon-child: Yeah, I originally had Ctrl-U bound to delete-line, but found out that was a misunderstanding and it should be (as it is now) delete-to-start
[08:14:37] <japhb> Oh, you're saying it should create a whole new kill buffer?
[08:15:42] <moon-child> in zsh: 'ab cd |ef gh' (| is the cursor), ^W ^U ^Y gives 'cd ab ef gh'
[08:16:13] <moon-child> it would be neat to give 'ab cd ef gh', but I think 'ab ef gh' is preferable to 'cd ab ef gh'
[08:17:37] <moon-child> (that is, the delete-line operation, regardless of which key it is bound to)
[08:22:04] <japhb> Yeah, looks like bash/readline gives 'ab cd ef gh' as you want.
[08:22:31] <japhb> OK, do you want to continue hacking away, or would you like me to give it a swing?
[08:28:40] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:59:20] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[09:32:49] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:34:59] *** Quits: gfldex (~dex@95.90.183.75) (*.net *.split)
[09:34:59] *** Quits: a3r0 (~aero@61.100.184.210) (*.net *.split)
[09:34:59] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (*.net *.split)
[09:34:59] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[09:35:09] *** Joins: a3r0 (~aero@61.100.184.210)
[09:35:13] *** Joins: gfldex (~dex@ip5f5ab74b.dynamic.kabel-deutschland.de)
[09:35:51] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[09:35:54] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[09:42:53] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (*.net *.split)
[09:42:53] *** Quits: goblin (~jaa@yatima.uukgoblin.net) (*.net *.split)
[09:42:54] *** Quits: Scotteh (~Scotteh@user/scotteh) (*.net *.split)
[09:42:54] *** Quits: codesections (~codesecti@codesections.com) (*.net *.split)
[09:42:54] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[09:42:54] *** Quits: corwin (~someone@fosshost/director/corwin) (*.net *.split)
[09:42:54] *** Quits: broquain1 (~dbrook@static.140.30.69.159.clients.your-server.de) (*.net *.split)
[09:42:54] *** Quits: moritz_ (~moritz@tina.perlgeek.de) (*.net *.split)
[09:43:01] *** Joins: goblin (~jaa@yatima.uukgoblin.net)
[09:43:03] *** Joins: moritz (~moritz@tina.perlgeek.de)
[09:43:03] *** Joins: broquaint (~dbrook@static.140.30.69.159.clients.your-server.de)
[09:43:07] *** Joins: chronon (~chronon@user/chronon)
[09:43:17] *** Joins: corwin (~someone@ghostwheel.bru.st)
[09:43:25] *** Quits: corwin (~someone@ghostwheel.bru.st) (Changing host)
[09:43:25] *** Joins: corwin (~someone@fosshost/director/corwin)
[09:43:35] *** Joins: codesections (~codesecti@codesections.com)
[09:43:36] *** Joins: Scotteh (~Scotteh@user/scotteh)
[09:47:02] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[10:02:50] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[10:28:57] <japhb> moon-child: I assumed the former, and instead sketched out Linenoise-style tab completion in a branch: https://github.com/japhb/Terminal-LineEditor/tree/completions  (And updated the Rakudo PR to match: https://github.com/rakudo/rakudo/pull/4623)
[10:33:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:47:28] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:48:16] *** Joins: seednode (~seednode@user/seednode)
[10:59:32] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:05:23] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 250 seconds)
[11:06:17] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[11:13:38] *** Quits: xinming__ (~xinming@115.219.38.153) (Ping timeout: 244 seconds)
[11:15:26] *** Joins: xinming__ (~xinming@115.219.38.153)
[11:34:25] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Read error: Connection reset by peer)
[11:34:36] *** jcallen_ is now known as jcallen
[11:38:14] *** Quits: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz) (Quit: WeeChat 3.3)
[11:39:37] *** Quits: xinming__ (~xinming@115.219.38.153) (Ping timeout: 250 seconds)
[11:40:28] *** Joins: Manifest0 (~Manifest0@cst2-65-109.cust.vodafone.cz)
[11:40:49] *** Joins: xinming__ (~xinming@115.219.38.153)
[11:42:35] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:47:13] *** Quits: xinming__ (~xinming@115.219.38.153) (Ping timeout: 244 seconds)
[11:47:50] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:48:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:49:04] *** Joins: xinming__ (~xinming@115.219.38.153)
[11:52:23] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 244 seconds)
[12:24:33] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:37:22] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[14:02:43] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[14:04:43] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[14:05:52] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[15:05:53] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:05:53] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:06:27] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[15:09:12] *** Joins: frost (~frost@user/frost)
[15:32:52] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:33:56] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:41:16] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 244 seconds)
[16:07:58] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:17:21] <frost> m: say DateTime.now
[16:17:21] <camelia> rakudo-moar a507f7c04: OUTPUT: «2021-11-08T13:47:21.589178+01:00␤»
[16:18:20] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[17:12:43] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[17:12:54] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Client Quit)
[17:19:18] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[17:20:04] *** Quits: eseyman (~manu@lfbn-idf1-1-491-163.w86-242.abo.wanadoo.fr) (Quit: leaving)
[17:23:28] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[18:12:09] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[18:12:39] <melezhik> .
[18:14:37] <melezhik> weekly: Raku weekly on mybfio - https://mybf.io/?language=Raku&filter=top
[18:14:37] <notable6> melezhik, Noted! (weekly)
[18:55:04] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Ping timeout (120 seconds))
[19:23:23] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:34:51] *** Joins: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com)
[20:02:59] *** Joins: suman (~suman@27.34.50.141)
[20:06:55] <suman> m: my  @shaped_array[3,4]; say @shaped_array;
[20:06:55] <camelia> rakudo-moar dc182f5d0: OUTPUT: «[[(Any) (Any) (Any) (Any)]␤ [(Any) (Any) (Any) (Any)]␤ [(Any) (Any) (Any) (Any)]]␤»
[20:07:13] <suman> Is it possible to assign all elements to be zero?
[20:10:10] <lizmat> m: my @shaped_array[3,4] is default(0); say @shaped_array
[20:10:11] <camelia> rakudo-moar dc182f5d0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤is default on shaped Array not yet implemented. Sorry.␤at <tmp>:1␤------> 3my @shaped_array[3,4] is default(0)7⏏5; say @shaped_array␤    expecting any of:␤        constraint␤»
[20:10:19] <lizmat> meh
[20:10:47] <ugexe> double sorry
[20:14:05] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[20:27:12] *** Joins: eseyman (~manu@lfbn-idf1-1-491-163.w86-242.abo.wanadoo.fr)
[20:28:46] *** Joins: sena_kun (~koto@94.142.239.45)
[20:29:36] <suman> m: my @new_arr = [2,3,4]; say [@new_arr for 1..3];
[20:29:37] <camelia> rakudo-moar dc182f5d0: OUTPUT: «[[2 3 4] [2 3 4] [2 3 4]]␤»
[20:30:14] <suman> Is this right to create a new list with multiples of same list?
[20:30:36] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 244 seconds)
[20:31:14] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[20:33:33] <Altreus> m: my @new_arr = [2,3,4]; say @new_arr xx 3 # maybe
[20:33:33] <camelia> rakudo-moar dc182f5d0: OUTPUT: «([2 3 4] [2 3 4] [2 3 4])␤»
[20:33:54] <Altreus> This seems more semantic
[20:34:02] *** Quits: xinming__ (~xinming@115.219.38.153) (Ping timeout: 240 seconds)
[20:34:44] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[20:35:03] <suman> Hmm
[20:36:23] *** Joins: xinming__ (~xinming@115.219.38.153)
[20:54:11] <dakkar> m: my @a=[2,3,4];my @b= @a xx 3; @b[0][0]=7; say @b
[20:54:11] <camelia> rakudo-moar dc182f5d0: OUTPUT: «[[7 3 4] [7 3 4] [7 3 4]]␤»
[20:54:22] <dakkar> Altreus: suman: notice that little issue, though
[20:54:55] <Altreus> I presumed this was intended by "the same list"
[20:55:01] <Altreus> I forgot to mention it though :)
[20:55:25] <dakkar> it may be intended, it may be surprising… we never know ☺
[20:56:38] <dakkar> m: my @a=[2,3,4];my @b= map { [.Slip] }, @a xx 3; @b[0][0]=7; say @b
[20:56:39] <camelia> rakudo-moar dc182f5d0: OUTPUT: «[[7 3 4] [2 3 4] [2 3 4]]␤»
[20:56:51] <dakkar> there may be a nicer way of saying "shallow-clone this array"
[20:59:31] <Altreus> m: my @new_arr = [2,3,4]; my @b = [|@new_arr] xx 3; @b[0][0] = 7; say @b # maybe
[20:59:31] <camelia> rakudo-moar dc182f5d0: OUTPUT: «[[7 3 4] [2 3 4] [2 3 4]]␤»
[20:59:37] <Altreus> oh it worked
[20:59:58] <Altreus> xx calculates per iteration, not before iterating!
[21:00:17] <dakkar> ah yes, it's chunked!
[21:00:19] <ugexe> .clone does a shallow clone
[21:00:25] <ugexe> my @b = @a.clone xx 3;
[21:00:39] <dakkar> ugexe: I should have guessed ☺ thanks
[21:05:55] <tonyo> m: my @a[3,4] = [0 xx 4] xx 3; dd @a
[21:05:56] <camelia> rakudo-moar dc182f5d0: OUTPUT: «Array element = Array.new(:shape(3, 4), [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0])␤»
[21:06:15] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 244 seconds)
[21:23:29] *** Joins: MoC (~moc@user/moc)
[21:32:40] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:34:38] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:38:48] *** Quits: andinus` (andinus@tilde.institute) (Quit: ERC (IRC client for Emacs 27.1))
[21:39:20] *** Joins: andinus (andinus@tilde.institute)
[21:39:50] <andinus> do we have something like go's defer?
[21:40:15] <andinus> i would like to close Net::SMTP's socket before the program ends, be it from crash or otherwise
[21:40:29] <ugexe> LEAVE
[21:41:14] <andinus> i see,s o just a LEAVE phaser in MAIN() will do?
[21:43:23] <ugexe> or END, or whatever phaser you find most appropriate
[21:45:21] <andinus> is there any difference in using LEAVE (in MAIN()) or using END?
[21:46:03] <ugexe> yes, LEAVE fires when the block is exited
[21:46:04] <andinus> ah i see, exit prevents LEAVE to be executed, i asumme END runs everytime
[21:46:33] <ugexe> people can call main my $foo = MAIN(...)
[21:46:48] <ugexe> so END cannot be the same as LEAVE
[21:47:45] <codesections>  Also, if you have both, END comes last
[21:48:26] <ugexe> as far as exit short circuiting the LEAVE... that kinda sucks at first glance but also seems like it might make sense
[21:49:16] <andinus> ah isee, make sense, thanks
[21:53:07] <ugexe> "It's a common idiom to use LEAVE phaser for closing the handles, which ensures the handle is closed regardless of how the block is left."
[21:53:22] <ugexe> i cant tell if that sentence is technically wrong re: exit or not
[21:53:37] <lizmat> LEAVE .disconnect with $handle;
[21:54:02] <lizmat> m: LEAVE say "bye"; exit 1
[21:54:03] <camelia> rakudo-moar dc182f5d0: ( no output )
[21:54:05] <lizmat> hmmm
[21:54:20] <lizmat> m: END say "bye"; exit 1
[21:54:20] <camelia> rakudo-moar dc182f5d0: OUTPUT: «bye␤»
[21:54:35] <lizmat> if it's about program exit, I guess END is safer
[21:55:59] <ugexe> while it might be case in the naive sense, managing the number of handles open usually shouldnt wait till program END (nor is there probably any reason to close handles at END)
[21:57:17] <tonyo> if you exit the process cleanly it should close those handles anyway..using exit in the case of leaving files open seems like bad design anyway
[22:26:01] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[22:26:31] *** Quits: suman (~suman@27.34.50.141) (Quit: Connection closed)
[23:02:48] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[23:17:46] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2021/11/08/2nd-class-join/
[23:24:16] <codesections> m: say (1900..2100).grep({ Date.new(.Int, 1, 1).day-of-week | Date.new(.Int, 12, 31).day-of-week == 4 }).batch(8)».join(' ').join("\n")
[23:24:16] <camelia> rakudo-moar dc182f5d0: OUTPUT: «1903 1908 1914 1920 1925 1931 1936 1942␤1948 1953 1959 1964 1970 1976 1981 1987␤1992 1998 2004 2009 2015 2020 2026 2032␤2037 2043 2048 2054 2060 2065 2071 2076␤2082 2088 2093 2099␤»
[23:25:10] <codesections> gfldex++ ^^^ (not that I'd be opposed to a smarter &join, mind you :D )
[23:26:58] <ugexe> the feed operator is underused because it is slow
[23:28:44] <codesections> what makes it slow?  It seems like is should be basically the same as a method chain
[23:29:06] <codesections> is it just a lack of opt work, or is there something about the semantics?
[23:32:23] <ugexe> from what i remember (and its been a long time so take with a grain of salt) the current implementation was mostly just to have them in the language before release, and that someone really need to put work into revamping or improving them
[23:34:01] <ugexe> there was https://github.com/rakudo/rakudo/pull/2903 from Kaiepi though
[23:34:26] <lizmat> and yet another Rakudo Weekly hits the Net: https://rakudoweekly.blog/2021/11/08/2021-45-two-commas/
[23:34:40] <ugexe> "Turns out getting this to run faster was just a matter of handling QAST better. Feed operators now run roughly 500% faster than the current implementation."
[23:35:28] <codesections> 500% faster is good :)
[23:37:37] <ugexe> hopefully they will rev-ist their efforts eventually
[23:37:42] <ugexe> revisit
[23:38:20] <gfldex> I believe feed operators use .assuming under the good.
[23:45:42] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[23:47:03] <Kaiepi> that was kind of a vague explanation of how that was faster
[23:47:30] <Kaiepi> it's from the use of STORE instead of append for each stage of the feed
[23:48:07] <Kaiepi> i tried to take it a step further with Channel but iirc came with overhead for the simpler use cases for feeds
[23:48:31] <Kaiepi> there's probably a means of taking that a step further through Iterator
[23:50:40] *** Joins: euandreh (~euandreh@2804:14c:65c9:5161:2115:7c1d:3a3c:1b92)
[23:51:15] <lizmat> fwiw, this is what I did about that about 3 years ago: https://gist.github.com/lizmat/787a6ddb31d51cc67d0c00f3403de78c
[23:55:42] *** Quits: euandreh (~euandreh@2804:14c:65c9:5161:2115:7c1d:3a3c:1b92) (Quit: WeeChat 3.3)
[23:58:09] *** Quits: A26F64 (~A26F64@cpe-74-69-167-143.stny.res.rr.com) (Quit: Connection closed)
