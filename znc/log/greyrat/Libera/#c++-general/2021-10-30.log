[00:09:05] *** Quits: paul424 (~tom@ip-31-0-122-31.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:14:56] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[00:18:13] <johnny> where was that C++20 module benchmark for common includes someone posted here. i can't remember what to use to find it again
[00:18:31] <johnny> for stdlib "include"s
[00:20:29] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[00:22:41] <johnny> ah, it was still in my logs https://github.com/s9w/cpp-lit
[00:26:47] <kalven> nice
[00:27:24] <RandomReader> I wonder what PCH looks like in comparison
[00:27:33] <RandomReader> (but I don't wonder enough to run the test myself)
[00:27:54] <kalven> that's my general approach to pch
[00:29:21] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[00:30:56] <rpav> that's pretty neat
[00:31:34] <johnny> pretty sure it was TinoDidriksen who shared it earlier. i just wanted to show it to someone else
[00:33:29] <rpav> i don't think PCH were instant like that but i should test
[00:35:01] <rpav> apparently a few years back pch was way faster than modules? https://www.reddit.com/r/cpp/comments/6aqihe/some_modules_benchmarking/
[00:35:11] <rpav> even if that's changed, actual usage seems to make a difference too
[00:35:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:36:48] <rpav> i wonder if explicit instantiations of common templates could speed things up
[00:37:07] <rpav> probably where a lot of gain comes from in unity builds
[00:37:59] <whupdup> isn't there a significant link overhead from deleting redundant copies of templated stuff?
[00:38:32] <rpav> i think there's some time spent deduplicating too yeah
[00:40:10] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:40:58] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[00:45:25] *** Joins: luizfrds (~Luiz@152.250.243.147)
[00:48:21] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[00:53:01] *** Joins: bobb_ (~bobb_@dslb-088-066-137-038.088.066.pools.vodafone-ip.de)
[00:56:54] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[01:03:43] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[01:05:55] *** Quits: m_ben_ (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[01:09:34] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 258 seconds)
[01:09:44] <PJBoy> that benchmark only shows stdlib modules
[01:09:55] <PJBoy> the case could be completely different for your own ones
[01:13:25] *** Quits: magla (~gelignite@55d46190.access.ecotel.net) (Quit: Stay safe!)
[01:17:57] *** Joins: kn07_ (~kn07_@86.121.23.168)
[01:22:54] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[01:23:05] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[01:28:45] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[01:37:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:24] *** ChanServ sets mode: +v npaperbot
[01:41:39] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[01:48:47] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:49:01] *** Quits: kn07_ (~kn07_@86.121.23.168) (Quit: Leaving)
[01:49:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:53:47] *** Joins: Guest22 (~Guest22@89.205.101.7)
[01:55:45] *** Quits: Guest22 (~Guest22@89.205.101.7) (Remote host closed the connection)
[01:56:14] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[01:56:37] *** Quits: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4) (Ping timeout: 268 seconds)
[01:56:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[01:59:39] *** Joins: ferdna (~ferdna@user/ferdna)
[02:04:42] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[02:05:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3c5a:ecb6:636d:9caa) (Quit: Quit)
[02:08:53] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[02:15:30] *** Joins: emerent_ (~quassel@p200300cd57485531ba27ebfffed28a59.dip0.t-ipconnect.de)
[02:15:30] *** emerent is now known as Guest4985
[02:15:30] *** Quits: Guest4985 (~quassel@p200300cd57485529ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (osmium.libera.chat (Nickname regained by services)))
[02:15:30] *** emerent_ is now known as emerent
[02:16:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3ce5:4cdd:856a:259b)
[02:16:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3ce5:4cdd:856a:259b) (Changing host)
[02:16:53] *** Joins: skapata (~Skapata@user/skapata)
[02:21:20] *** Joins: gggpkm (~gggpkm@60.10.194.46)
[02:21:58] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[02:23:38] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[02:26:14] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[02:27:23] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[02:39:55] <cq-work> Holy crap, are the standard modules that fast?
[02:40:06] <cq-work> I still expected some issues with them.
[02:40:42] <cq-work> We should really get on that modules thing mayhaps
[02:48:19] <bobb_> i'm reading http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2300r2.html and find things hard to understand
[02:48:25] <sprout> they are designed to be fast.   or rather,  all the reloading and reparsing of (template) header files was just way too slow
[02:50:15] <bobb_> can't really judge the chances this will make it in c++23, have the feeling there are numerous papers in the recent years in that field
[02:51:23] <cq-work> bobb_, which part is hard to understand?
[02:53:53] <bobb_> the code at the beginning of 1.3.3, guess i need to go to bed
[02:55:19] <kalven> it's pretty horrid
[02:56:47] *** Joins: X-Scale` (~ARM@83.223.251.139)
[02:56:48] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8447:b6ce:a77e:bb3c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:56:50] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[02:57:40] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[02:57:52] *** gggpkm__ is now known as gggpkm
[02:58:51] *** Quits: bobb_ (~bobb_@dslb-088-066-137-038.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:58:56] *** X-Scale` is now known as X-Scale
[03:00:53] <RandomReader> the overall style is reminiscent of JS I've had to refactor for work
[03:01:27] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 260 seconds)
[03:01:48] *** Joins: luizfrds (~Luiz@152.250.243.147)
[03:03:58] <kalven> pre async/await js at least
[03:06:15] <RandomReader> hm, it suggests "callbacks" are prior art alternative that fall short .. but the displayed style *is* a bunch of nested callbacks
[03:06:43] <RandomReader> makes it difficult to figure out what they're actually suggesting as novel here
[03:10:50] <kalven> "Certainly, coroutines come with huge syntactic and semantic advantages over the alternatives." - seems like they feel that all that syntactical baloney is worth it to save an alloc
[03:11:35] <kalven> I mean it seems they admit that the coroutine option is much nicer, if it wasn't for that pesky dynamic allocation
[03:14:34] <RandomReader> interesting
[03:17:23] <RandomReader> I suppose a flood of unmaintainable code could push the introduction of "static coroutines" in another 20 years or so
[03:20:38] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[03:21:01] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:21:34] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:22:42] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[03:23:03] <kalven> The style of code as presented in 1.3.3 really is like we've seen in other language prior to them getting coroutine (async/await) support.
[03:26:02] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[03:30:03] *** Quits: mitch0 (~mitch@193-110-63-186.cable-modem.hdsnet.hu) (*.net *.split)
[03:30:03] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[03:30:03] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[03:30:03] *** Quits: ravan (~ravan@user/ravan) (*.net *.split)
[03:30:03] *** Quits: DrMax (~DrMax@node-1w7jra94757g0jh5mf8vpb11v.ipv6.telus.net) (*.net *.split)
[03:30:03] *** Quits: prime (~prime@user/prime) (*.net *.split)
[03:30:03] *** Quits: letto (~letto@86.120.85.133) (*.net *.split)
[03:30:03] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[03:30:03] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[03:30:03] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (*.net *.split)
[03:30:03] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[03:30:03] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[03:30:03] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[03:30:03] *** Quits: raekye (~raekye@creatifcubed.com) (*.net *.split)
[03:30:03] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[03:30:03] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[03:30:03] *** Quits: chris123123 (~bnc123@streuwerte.de) (*.net *.split)
[03:30:03] *** Quits: DrinkyBird (~drinkybir@sprawl.drinkybird.net) (*.net *.split)
[03:30:03] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[03:30:03] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[03:30:03] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (*.net *.split)
[03:30:03] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[03:30:03] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: kalven (~calvin@2a02:470:84:102::24) (*.net *.split)
[03:30:03] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[03:30:03] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[03:30:03] *** Quits: Latexi95_ (late@banhammer.fi) (*.net *.split)
[03:30:03] *** Quits: renopt_ (~renopt@lisp.us.to) (*.net *.split)
[03:30:03] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[03:30:03] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[03:30:04] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[03:30:15] *** Joins: chris123123 (~bnc123@streuwerte.de)
[03:30:16] *** Joins: mitch0 (~mitch@193-110-63-186.cable-modem.hdsnet.hu)
[03:30:17] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[03:30:17] *** Joins: Latexi95 (late@banhammer.fi)
[03:30:19] *** Joins: Artea (~Lufia@artea.com.pt)
[03:30:23] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[03:30:26] *** Joins: ravan (~ravan@42.201.198.151)
[03:30:27] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[03:30:31] *** Joins: buhman (sid411355@user/buhman)
[03:30:31] *** Joins: computerquip (sid423484@user/computerquip)
[03:30:39] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[03:30:39] *** Joins: obiwahn (~heini@obiwahn.org)
[03:30:41] *** Joins: DrinkyBird (~drinkybir@sprawl.drinkybird.net)
[03:30:42] *** Joins: celphi (sid97751@user/celphi)
[03:30:45] *** Joins: Bodger1234_ (sid503511@uxbridge.irccloud.com)
[03:30:51] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[03:30:51] *** Joins: ravan (~ravan@user/ravan)
[03:31:11] *** Quits: obiwahn (~heini@obiwahn.org) (Changing host)
[03:31:11] *** Joins: obiwahn (~heini@user/obiwahn)
[03:31:13] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[03:31:35] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[03:31:53] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 264 seconds)
[03:31:53] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[03:32:01] *** Joins: deepy (deepy@user/deepy)
[03:32:05] *** Joins: letto (~letto@86.120.85.133)
[03:32:12] *** Joins: Trollmann (~Trollmann@user/trollmann)
[03:32:14] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[03:32:14] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[03:32:20] *** Joins: beanzilla (beanzilla@user/beanzilla)
[03:32:37] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[03:32:46] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[03:32:47] *** Joins: prime (~prime@user/prime)
[03:33:05] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[03:33:09] *** Joins: urdh (~urdh@user/urdh)
[03:33:13] *** Joins: gggpkm (~gggpkm@60.10.194.46)
[03:33:22] *** Joins: Ara (~Ara@user/ara)
[03:34:45] *** Quits: gggpkm_ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[03:35:10] *** Joins: renopt (~renopt@lisp.us.to)
[03:35:54] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 268 seconds)
[03:41:42] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[03:44:05] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 260 seconds)
[03:45:09] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 268 seconds)
[03:56:35] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[04:13:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:20:53] <computerquip> I'm a fan of the then() style of programming but people are pretty bad about the formatting.
[04:21:15] <computerquip> I don't like nesting past a 2 or 3 tabs maximum, past that and I start refactoring to be a little bit easier to follow.
[04:21:35] <computerquip> Rust developers are currently really... really... bad about that.
[04:23:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[04:23:13] <computerquip> I hate when I read code like that in specifications because it "normalizes" that style of programming.
[04:31:41] *** Joins: DrMax (~DrMax@node-1w7jra94757fyrs6vqxiaj1hc.ipv6.telus.net)
[04:44:56] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6b2c) (Quit: Leaving)
[04:52:25] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:54:30] *** Joins: The_Jag (~The_Jag@host-82-58-136-144.retail.telecomitalia.it)
[04:54:50] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 268 seconds)
[04:55:12] *** Joins: proller (~p@2a02:6b8:b081:8815::1:11)
[04:55:46] *** Quits: sonic (~sonic@user/sonic) (Quit: WeeChat 3.0.1)
[04:57:23] *** Quits: The_Jag_ (~The_Jag@host-87-14-224-44.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[05:00:38] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:15:26] <kalven> but rust also has async/await these days
[05:19:29] <computerquip> Yeah, if I recall you can do something like `await myAsyncFunc()?;` which I think is just neat.
[05:19:52] <computerquip> Yeah, if I recall you can do something like `await myAsyncFunc()?` which I think is just neat.
[05:20:23] <kalven> it's myAsyncFunc().await? I thinl
[05:21:26] <computerquip> You might be right, I might be thinking of node or something.
[05:21:41] <computerquip> Similar concept (although not the same).
[05:21:43] <kalven> yeah in js it sits in front
[05:23:30] <kalven> anyway, there's been this pretty clear path now in multiple languages (js, c#, rust) where they eventually get to an async/await
[05:23:37] <kalven> premature enter..
[05:24:15] <kalven> they eventually get to a model with language-level support for async/await and doing library-level stuff like .then becomes largely obsolete
[05:27:36] <computerquip> I suppose we do sort of have co_await and gang... Can't say I've played with it much.
[05:31:32] <kalven> not "sort of", we do have it! they're just lacking in standard library support at the moment, but libs like asio already have support for it: https://www.boost.org/doc/libs/1_77_0/doc/html/boost_asio/overview/core/cpp20_coroutines.html
[05:37:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:24] *** ChanServ sets mode: +v npaperbot
[05:51:28] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:54:35] *** Quits: proller (~p@2a02:6b8:b081:8815::1:11) (Ping timeout: 246 seconds)
[05:55:51] <computerquip> I might try that out here soon actually
[05:59:39] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[06:03:05] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 264 seconds)
[06:03:50] <johnny> sure was nice of gdb to tell me which debuginfo packages i was missing
[06:06:09] *** AbleBacon_ is now known as AbleBacon
[06:07:58] *** Joins: proller (~p@80.240.216.69)
[06:08:49] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[06:11:49] *** Joins: manjaro-user (~manjaro-u@199.119.235.236)
[06:14:04] *** Quits: AmR (~AmREiSa@156.199.244.83) (Quit: Konversation terminated!)
[06:16:30] *** Quits: manjaro-user (~manjaro-u@199.119.235.236) (Ping timeout: 265 seconds)
[06:19:07] *** Joins: manjaro-user (~manjaro-u@199.119.235.236)
[06:19:22] <computerquip> I wonder if HTTP2 is worth worrying about with beast...
[06:20:39] <johnny> was there something specific to http2 there? didn't it apply just as well to regular https?
[06:21:19] <johnny> i know i did ended up scoring an A+ relatively easily on qualsys's scoring
[06:21:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:21:32] <johnny> i think they checked for beast
[06:21:48] <computerquip> I dunno, I just know Beast doesn't support it still.
[06:22:14] <johnny> that's a strange phrasing?
[06:23:15] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:23:22] <johnny> maybe i'm wrong, but i think it's all fine now
[06:23:36] *** Joins: The_Jag_ (~The_Jag@host-79-32-14-38.retail.telecomitalia.it)
[06:23:55] <johnny> especially if you're using modern browsers and also use tls 1.2
[06:24:23] <computerquip> Not sure we're talking about the same thing. I'm talking about boost beast, which is an http library for C++.
[06:24:33] <johnny> oh sorry! indeed
[06:24:43] <johnny> i'm talking about the beast vulnerability
[06:25:18] <johnny> both related to http, and i didn't know about the boost lib :)
[06:25:56] *** Quits: The_Jag (~The_Jag@host-82-58-136-144.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[06:32:27] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 265 seconds)
[06:34:11] <manjaro-user> Hey all. Like to ask for a bit of feedback. I am creating a card game that teaches people how to program, and I am wondering how simple or complex I should go for this one particular aspect. Cards are located in various containers, and the type of container chosen depends on the nature of that container. For example, cards in your hand are represented as a QMultiMap. Cards stored in your deck are in a QList.
[06:35:02] <manjaro-user> Maps and Lists are sufficient to what I want to do, but I could make it a bit more intricate and specified.
[06:36:20] <manjaro-user> For example. I could use a QStack for the stack ( Its a lifo structure ), a QVector for the play area ( Cards are never inserted in the middle, thus making this technically more performative )
[06:37:40] <kalven> vector for everything
[06:38:08] <manjaro-user> and QQueue for somethign called earmarks, which is a lifo type of structure. Now I could just use QList for all of them, and that would greatly simplify things, however if I am to teach programming, I wonder if it is worth complicating things and choosing those other specific containers instead?
[06:38:56] <manjaro-user> kalven: Why vector for everything?
[06:39:09] <kalven> simple
[06:39:47] <manjaro-user> kalven: You would rather have simple in a game that teaches people fairly intermediate programming?
[06:40:00] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Remote host closed the connection)
[06:40:30] <ARoxdale> ....yes?
[06:40:35] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Ping timeout: 264 seconds)
[06:40:44] <kalven> yes, of course
[06:41:37] <manjaro-user> Allow me to play devils advocate. The performance would hardly change, however I saw this as an opportunity to teach people about different containers, why they get used, and the syntax which they operate by.
[06:41:56] <ARoxdale> I'd advocate std:array, but std::vector is a lot simpler than something like QMultiMap or QList
[06:42:15] <kalven> what does the implementation have to do with what you teach?
[06:42:33] <ARoxdale> manjaro-user: You are over complicating something that should be simpler
[06:43:16] <ARoxdale> The concept of a collection of cards should be standardised under one type. A std::vector or a QList but pick one.
[06:43:51] <ARoxdale> There shouldn't be a need for more than one container in the program
[06:44:11] *** Quits: _ShiftyLogic_ (~shiftylog@66.115.146.16) (Ping timeout: 264 seconds)
[06:44:50] *** Joins: proller (~p@2a02:6b8:b081:a404::1:10)
[06:45:22] <ARoxdale> Maybe use a map for players, to store their score or hands, and allow them to join leave the game or something like that. Even then it's probably overkill
[06:45:37] <computerquip> This converstation is dangerously familiar...
[06:46:33] <kalven> yeah, someone just changed their nick
[06:46:39] <manjaro-user> I do like the idea of having a QQueue and a QStack for the lifo and fifo concepts. These will be expansions anyways so maybe its fine to introduce more complexity bit by bit. But having QVector and QList side by side... they are so virtually similar and hard to really explain why I would use one over the other in a card game.
[06:47:40] <manjaro-user> ARoxdale: Given that; People understand what lists are. Vectors are not well understood. Do you think I ought to go with lists instead of vectors because of this?
[06:47:47] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[06:48:19] <ARoxdale> manjaro-user: I think vectors are generally more understandable than lists.
[06:48:40] <kalven> vectors are not well understood?
[06:48:41] <ARoxdale> Linked lists use pointers.
[06:50:14] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 246 seconds)
[06:50:15] <manjaro-user> kalven: Yeah. I don't use that word, ever, in the english language. Even when it comes up in programming, I rarely ever think of it, probably because QList is just so much more widely used.
[06:50:40] <ARoxdale> I'll be frank. I don't think teaching anyone to use any Qt containers is a good idea. You are better off teaching using standard library ontainers.
[06:50:59] <manjaro-user> "Hey do you have a vector of the dishes served at this restauraunt?
[06:51:14] <kalven> I haven't said a word about what you're going to teach.. I thought you were talking about the implementation
[06:51:19] <manjaro-user> ARoxdale: You only say that because you use std libs.
[06:51:35] <kalven> I'm working on a car racing game, do I need to someone get some real sparkplugs into my game?
[06:51:39] <kalven> *somehow
[06:51:46] <ARoxdale> manjaro-user: There is a distinction between the type of the object and the name of the object. std::vector<cards> playerhand is understandable
[06:52:26] <manjaro-user> kalven: oh. Well how about I test you. In a sentence; tell me when you would use a list, and when you would use a vector, performance being the key consideration.
[06:52:34] <ARoxdale> manjaro-user: I say it because Qt is a specialised library not everyone will be able or want to use
[06:53:13] <kalven> manjaro-user: again, I haven't said a word about what you're going to present to your users..
[06:53:44] <manjaro-user> ARoxdale: Specialized? Nah that is just a misunderstanding. Qt covers everything that stdlib does, and more.
[06:54:25] <hnOsmium0001[m]> not if you need something that's not COW but ok...
[06:54:39] <manjaro-user> kalven: I know. I just wanted to see if vectors and lists were well understood to you.
[06:54:57] <manjaro-user> hnOsmium0001[m]: COW?
[06:55:11] <hnOsmium0001[m]> implicit sharing is what qt calls it
[06:56:13] <kalven> manjaro-user: yeah.. I'm trying to remember the last time I used a list.. hash tables and vectors cover 99% of what I do. if I use a list, it's more likely an intrusive one, never std::list.
[06:56:36] <manjaro-user> You can program exclusively in Qt without every having to touch stdlibs ( With rare exceptions ).
[06:57:13] <computerquip> But... why though.
[06:57:30] <manjaro-user> kalven: Thats kind of funny. I am the opposite. I use lists, and can't remember the last time I used a vector. But in short; Vectors are not good at inserting items in at the middle.
[06:57:35] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 260 seconds)
[06:57:56] <computerquip> That's just what *they* want you to believe.
[06:57:57] <manjaro-user> computerquip: QList is just widely used throughout the API.
[06:58:16] <kalven> manjaro-user: how do you find the place to insert? how big is your N?
[06:58:57] <manjaro-user> N, lol
[06:59:00] <hnOsmium0001[m]> QList is the exact same thing as QVector in qt6, and before that QList is basically a QVector that heap allocates its elements if they are bigger than a pointer
[06:59:44] <manjaro-user> hnOsmium0001[m]: Did they deprecate qvector then? Thats news to me. QLinkedList has been deprecated.
[06:59:47] <kalven> manjaro-user: you understand the questions, right?
[06:59:55] <InPhase> manjaro-user: Qt covers the stdlib features pretty poorly...
[07:00:09] <InPhase> manjaro-user: I do use Qt, but its containers are not great.
[07:00:47] <manjaro-user> kalven: Well N is contextual to whatever a person is programming.
[07:01:35] <manjaro-user> InPhase: Make your case. I'm no stdlib expert, but what is something that Qt falls behind to stdlib?
[07:01:37] <kalven> manjaro-user: and how do you find the place to insert?
[07:02:17] <manjaro-user> InPhase: I did some benchmarking on 4chan, and found that its containers were markedly faster than stdlib
[07:02:42] <hnOsmium0001[m]> I really wonder if that's supposed to be a joke, >benchmarking on 4chan
[07:03:42] <johnny> ll
[07:03:53] <manjaro-user> hnOsmium0001[m]: yeah on /g/. I create some hired/fired threads, and give people some benchmark to beat. I think in this case, it was to beat my implimentation of reversing a list or something.
[07:03:57] <johnny> markedly faster doing what?
[07:04:12] <johnny> i don't use qt because i don't trust the qt company
[07:04:29] <johnny> and it doesn't interact with the stdlib very well.. like you can't construct a freakin QString from a std::string
[07:04:41] <johnny> you hav to use fromStdString
[07:04:44] <computerquip> Well, in their defense, that's not possible.
[07:04:46] <johnny> it's just silly stuff like that
[07:04:56] <johnny> you an't? i mean they have ::fromStdString?
[07:05:07] <manjaro-user> I can't remember exactly, but I remember that the std solution was like 4 times slower than the qt solution, and everyone was quite surprised, with a few people chiming in that stdlib isn't neccessarily faster just because its "std"
[07:05:13] <computerquip> Well, they do that because it incurs an explicit copy.
[07:05:25] <computerquip> You can't avoid that copy basically no matter what you do.
[07:05:25] <johnny> ah. but you it should work wit ha string_view at least
[07:05:29] <hnOsmium0001[m]> IMO explicit in these cases are better than implicit
[07:05:47] <johnny> well qt is hardly explicit in anywhere but the stdlib interface
[07:06:04] <hnOsmium0001[m]> which is a good thing than having everything implicit
[07:06:07] <johnny> i'm going deep deep deep to figure out that qvariants proxy multiple types to end up converting a double to a string!
[07:06:26] <manjaro-user> johnny: `fromStdString` -- you are just complaining that there is no constructor taking std::string?
[07:06:29] <johnny> that's not the qt philosophy based on the methods i see hnOsmium0001[m] .. it's so much magic
[07:06:32] <computerquip> They can't make a QStringView from std::string either since they don't have the same character width.
[07:06:36] <hnOsmium0001[m]> you did something badly earlier isn't an excuse to continuously do things badly
[07:06:48] <johnny> it should be consistent until it's not
[07:06:50] <computerquip> You can, however, create a QStringView from a u16string afaik
[07:07:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[07:07:22] <johnny> yeah i totally forgot that QStrings are 16 wide .. sorry
[07:07:27] <InPhase> manjaro-user: Let's start with Qt didn't even support 64-bit container sizes until extremely recently, making them impossible to use for significant amounts of data.
[07:07:53] <johnny> i keep forgetting that they do that :(
[07:07:55] <InPhase> manjaro-user: utf-16 is also a disaster.
[07:08:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:08:36] <computerquip> I can't tell if it's a disaster or not. I wish everyone used UTF-8 but I've been working a lot with UTF-16 lately. :(
[07:08:52] <johnny> i do kinda like that QVariant feels more like a proxy type though
[07:08:57] <manjaro-user> InPhase: What is its 64-bit container size now?
[07:09:06] <computerquip> QVariant should die in a hot fiery blue sun.
[07:09:16] *** Quits: proller (~p@2a02:6b8:b081:a404::1:10) (Ping timeout: 245 seconds)
[07:09:35] <manjaro-user> computerquip: Why's that? I've found it useful for serialization.
[07:09:41] <johnny> well i am trying to reverse engineer how a float gets turned into a string with the appropriate precision, and i had to go through QVariant and QMetaType
[07:09:48] <computerquip> Slow, cluttered, poorly designed mess.
[07:10:19] <johnny> i finally found that it uses double-precision lib internally
[07:10:30] <manjaro-user> computerquip: That's the tradeoff of dynamic types though. Its why smart people know that python is total garbage.
[07:10:34] <computerquip> It's a mixture of a union and type-erased structures that just randomly does stuff to "make it work"
[07:10:55] <johnny> if someone says "smart people know that python is total garbage" they don't deserve to program..  not all programs are meant to do the same thing
[07:11:00] <InPhase> manjaro-user: Also, QString goes with copy-on-write, which sounds good until you factor in that it's also incompatible with small string optimization which is a huge performance boost for the most common strings.
[07:11:17] <computerquip> It's an objectively bad structure, and I'm almost confident Qt people know that but just can't do anything about it since it's at the core of everything pretty much.
[07:11:40] <computerquip> QML for example relies very heavily on QVariant functioning the way it does.
[07:11:55] <InPhase> manjaro-user: So you get a slight overhead for processing the copy on write, gain a little bit if you're wildly copying large strings around without thinking about performance, and lose out in that you don't get the cache locality advantages of small string optimization.  It's a net loss.
[07:12:08] <manjaro-user> InPhase: If you have some benches, I'd love to see some of that.
[07:12:19] <johnny> please no micro benchmarks..
[07:12:22] <johnny> do actual work
[07:12:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:13:02] <johnny> none of this garbage "X is better than Y" because it's faster in 1 bazillion iterations of basically the same thing
[07:13:02] <manjaro-user> johnny: Python is garbage though. Its not good for beginners, and its not good for intermediates or experts either.
[07:13:03] <InPhase> manjaro-user: It's late and I'm not going to prepare benchmarks to illustrate those fundamentals, but you can find the structure of QString and std::string in the respective documentations.
[07:13:27] <johnny> your definition of good is flawed
[07:13:48] <manjaro-user> johnny: Nothing in python is transferable to any other language, hence why it has something called "The pythonic way"
[07:13:56] <johnny> uhmm.. no
[07:14:17] <johnny> there's literaly bindings to C++ and vice versa if you're willing to pay some performance and memory for it
[07:14:23] <manjaro-user> InPhase: I'll keep that in mind, and will maybe play around with it later. I use strings enough that its worth my consideration.
[07:14:34] <johnny> and heck.. i even porte a program by some s/r to antoher language. it wasn't that hard
[07:14:54] <johnny> semantically it's not that different than a lot of other prototype based languages
[07:14:58] <manjaro-user> johnny: And python is one of the most difficult languages to read, lacking forward declarations.
[07:15:12] <johnny> who the fuck needs forward declarations when you have modules
[07:15:14] <kalven> troll
[07:15:28] <johnny> forward declarations are necessary in C/C++.. but that's a design flaw
[07:15:42] <johnny> just something you gotta deal with
[07:16:16] <manjaro-user> johnny: And so prototyping is very bad on python, considering it literally can't be done. The lack of explicit types makes it ambigous to what a function actually returns
[07:16:21] <johnny> nothing we can do when TUs work the way they do
[07:16:36] <manjaro-user> not to mention a function can have multiple return types, which is just a travesty and should not have been allowed.
[07:16:39] <johnny> manjaro-user, ever heard of mypy ? but again, we don't always want static typing..
[07:16:48] <johnny> C++ has it easily via tuples now.. it's the same thing
[07:17:23] <johnny> and heck.. if you std::expected makes it.. you'll end up with multiple return types.. error|result or whatever
[07:17:23] <manjaro-user> johnny: You always want static typing, because you always want to be explicit. It shouldn't surprise you that I think auto outside of templates is a travesty as well.
[07:17:28] <johnny> no you don't..
[07:17:46] <johnny> you often want static typing, but you don't ALWAYS want it
[07:17:59] <computerquip> I'm 83% sure he's just gone full troll, I wouldn't mind him too much.
[07:18:07] <johnny> well he did mention 4chan.. so..
[07:18:14] <manjaro-user> johnny: Yes you do. Even when you don't technically want it, you make that explicit by using something like QVariant.
[07:18:16] <johnny> but at the same time, maybe he really does believe it
[07:18:35] <johnny> he's just drank the kool-aid too much
[07:18:36] <InPhase> manjaro-user: Python and C++ have different use-case strengths.  What you're labeling as a flaw in Python is a flaw for certain applications (generally larger more complex one), but turns into a huge asset for shorter programs, where Python can run ease-of-use circles around C++.
[07:18:39] <manjaro-user> "4chan" is not an argument.
[07:18:55] <johnny> zealots are almost always wrong
[07:19:25] <johnny> it's ok buddy.. you'll grow up one day
[07:19:38] <manjaro-user> InPhase: Python is for scripting. You could look at its interpreter and say that is an advantage it has over c++. But its not a programming language, or rather, it shouldnt be treated as one.
[07:19:54] <InPhase> manjaro-user: Well that's just nonsense.  :)
[07:19:56] <computerquip> ....
[07:20:00] <manjaro-user> johnny: Thats not an argument.
[07:20:06] <johnny> i wasn't trying to make one
[07:20:22] <johnny> why do people always htink i'mtrying to make an argument
[07:20:36] <johnny> i'm not.. i'm just sayin you're dumb.. that's not an argument at all
[07:20:44] <computerquip> So if I built an interpreter for C++, is C++ then not a programming language?
[07:20:57] <computerquip> What a ridiculous thing to say.
[07:21:07] <johnny> it's called cling
[07:21:15] <johnny> well it's a repl anyways
[07:21:28] <johnny> imagine calling lisp not a programming language
[07:21:37] <manjaro-user> johnny: Then your complaint in short is that heterodox opinions are wrong because they are heterodox. Thats not a convincing argument to anyone who isn't wrapped up on being popular.
[07:21:52] <johnny> that's not what i said
[07:22:07] <johnny> your opinion is in fact quite the opposite of heterodox.. it's shared by a bunch of people
[07:22:12] <manjaro-user> johnny: Thats how you act.
[07:22:14] <johnny> you're with the sheep..
[07:22:26] <manjaro-user> Not an argument.
[07:22:30] <johnny> who said it had to be
[07:23:10] <manjaro-user> computerquip: Would youc all bash a programming language? Or a scripting language? Because python was created to be an intermediary between the two.
[07:23:11] <johnny> but seriously, your opinion is the oppoosite of heterdox, it's extremely common amonst newbie programmers, including myself back in the day
[07:24:08] <manjaro-user> johnny: No that is wrong. Python is lawded and memed as the quintessential "Best language for beginners" because you can write your first hello world program using one line of code.
[07:24:09] <johnny> i bet most of the people here held something similiar
[07:24:21] <johnny> that's not an argument dude
[07:25:02] <johnny> anyways.. there's zero value here.. i had my fun
[07:25:15] <manjaro-user> johnny: Yes it is. Its what is advertised everywhere, and is technically true. You can just go `print "hello world"`
[07:25:27] <InPhase> manjaro-user: I write large programs all the time, for many decades, and for a living.  When I want to write a program quickly to solve a smaller problem that can fit within about 1000 lines, I run straight to Python.  And the thing I do with Python when I do so?  It's programming.  I use programming methods, and software engineering principles, to do so.
[07:25:31] <manjaro-user> johnny: Calm down.
[07:28:03] <manjaro-user> InPhase: I think this is more common if you use stdlib and raw c++, or just c, because it will be generally faster to do it in python. I have found though that this is not the case if you use Qt, as this has a full suite of libraries at your disposal ready to write the most basic programs, and quickly too.
[07:28:52] <InPhase> manjaro-user: Using Qt adds a significant additional burden on writing a program, as then you need to setup a whole build system just to do a simple task.
[07:29:28] <manjaro-user> InPhase: One of the drawbacks to python on this, is searching for third party libraries to exploit. If you go to the SO question on "How to download a web page using Python", you will find probably 40 different solutions using 40 different libraries, with the added bonus of some of them working only on v2 or v3 of python.
[07:29:37] <InPhase> manjaro-user: I in fact wrote an entire script just to automate the setting up of a build system for Qt programs so I could manage small Qt tests.  But this is still an extra pain.
[07:29:54] *** Joins: tm604 (~tm604@perlsite.default.entitypark.uk0.bigv.io)
[07:30:23] <manjaro-user> InPhase: Its not been my experience since I started using QBS. With Cmake, I might be more inclined to agree.
[07:31:03] <InPhase> manjaro-user: I generally find is extremely easy to find Python libraries to solve problems.  It generally takes seconds to minutes to find and install them.
[07:31:13] <InPhase> s/find is/find it/
[07:31:21] <computerquip> bash is indeed a programming language, although for a very specific purpose. I'd probably argue that a scripting language *is* a programming language usually. That said, if you want to get more specific, Python is meant for a general-purpose audience. Bash isn't, it's domain-specific.
[07:31:38] <InPhase> If anything, C++ could use a package system as effective as those for Python.
[07:32:23] <manjaro-user> InPhase: I've had worse experience. I remember python devs screaming at me for using a particular library because it was insecure or something, and the author of that library kind of beside himself because he didn't know what they were going on about.
[07:32:48] <InPhase> manjaro-user: Okay, that sounds like one conversation that went bad.
[07:33:30] <manjaro-user> computerquip: I guess with that perspective you could call python a programming language. I prefer the distinction though.
[07:34:41] <manjaro-user> InPhase: Yeah. It demonstrated to me that you are kind of vulnerable in that aspect. Qt is more of a walled garden, and there is more consistency to the libraries it uses.
[07:34:47] <computerquip> That's fine, but it's not really a good distinction. Especially where execution of said script is an abstract thing. For example, you can ultimately build your Python into a compile executable.
[07:35:19] <computerquip> It honestly reminds me of the sandwich argument.
[07:35:41] <manjaro-user> sandwich argument?
[07:35:56] <computerquip> Yeah. Like... what is a sandwich? Is a hotdog a sandwich?
[07:36:05] <manjaro-user> Nah.
[07:36:09] <manjaro-user> Definitely not.
[07:36:32] <computerquip> USDA says it is
[07:36:50] <manjaro-user> That is due to the hotdog lobby.
[07:37:02] <manjaro-user> Big Hotdog has their hands all over the government.
[07:38:12] <computerquip> What about an ice cream sandwhich then? It's even in the name.
[07:38:30] <InPhase> manjaro-user: At work I am rewriting a 50k-line Python program into C++.  I'm doing this because the C++ version will be more performant, and I can make important structural upgrades and robustness improvements while doing so.  The programs are for interfacing and controlling hardware collecting brain signals from implanted electrodes, applying machine learning algorithms, and delivering electrical
[07:38:36] <InPhase> stimulation to the brains while interfacing over the network with other programs running behavioral tasks.  Surely you would not call the original Python program "a script".
[07:39:53] <manjaro-user> computerquip: Yes, thats a sandwich
[07:40:03] <computerquip> But why is that a sandwich but not a hotdog
[07:40:25] <computerquip> I mean, it doesn't have bread or poultry or anything that makes up a sandwich
[07:40:38] <InPhase> computerquip: My 5 year old insists a hotdog and a hotdog sandwich are different things.  It's pretty natural, it just gets hammered out of people to say that.
[07:40:50] <manjaro-user> InPhase: Well without being at all sympathetic, I would say that because it was not written in a programming language, you had to rewrite it into c++. By the way; my condolences. That sounds rought.
[07:40:52] <manjaro-user> rough*
[07:41:22] <manjaro-user> computerquip: Because hot dogs are open tops.
[07:42:15] <computerquip> Alright well... here me out... what if you put two slices of bread and a hot dog wiener in-between. Is it still a hotdog thus making it not a sandwich? Or is it a sandwhich because it's not open-top?
[07:42:22] <manjaro-user> Who made this awful sandwhich argument? I feel like there is a better analogy you could have used.
[07:42:28] <InPhase> manjaro-user: "A scripting language or script language is a programming language for a runtime system that automates the execution of tasks that would otherwise be performed individually by a human operator."
[07:42:37] <InPhase> manjaro-user: Courtesy of wikipedia.
[07:43:00] <manjaro-user> computerquip: that would be a sandwhich, with hot dogs in it.
[07:43:01] <InPhase> manjaro-user: You are greatly stretching the established meaning of the term.
[07:44:07] <manjaro-user> InPhase: Wikipedia can be thrown in the garbage. Its usually pretty good for programming, but that is unforgiveable
[07:44:10] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[07:44:33] <computerquip> What about a burrito? Is a burrito a sandwhich?
[07:44:37] <computerquip> sandwich*
[07:44:40] <InPhase> manjaro-user: Ok.  Well, the rest of the users of English will disagree with you then I guess.  :)
[07:45:08] <manjaro-user> that's fine. Theres a reason I go on 4chan.
[07:45:26] <manjaro-user> And its not to placate the masses and their delusions.
[07:45:53] <InPhase> lol.  Well that about wrapped that conversation up I guess.
[07:46:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[07:46:24] <manjaro-user> I will add that one of the more sophisticated arguments against python, is the very fact that it attracts substandard and casual programmers by design. As such, it fosters bad practices and bad programmers.
[07:46:53] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[07:47:47] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 264 seconds)
[07:49:43] <manjaro-user> I think programming should be hard, because it is hard, and trying to simplify it by removing or obfuscating the underlying mechanics is wrong. In c++, you can still do assembly, and it fundamentally is just assembly abstraction. This is not the case with python.
[07:50:18] <computerquip> C++ has no notion of assembly.
[07:50:42] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[07:52:04] <manjaro-user> computerquip: goto is jmp
[07:52:22] <computerquip> It is not.
[07:52:37] <manjaro-user> I mean not exactly, but if you really wanted to, you could jmp
[07:53:51] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 245 seconds)
[07:56:40] *** Joins: gggpkm__ (~gggpkm@221.219.79.236)
[07:59:41] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 245 seconds)
[08:06:23] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[08:17:43] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[08:19:10] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[08:26:13] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:29:01] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Excess Flood)
[08:29:28] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[08:30:21] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[08:30:47] *** Joins: _ShiftyLogic_ (~shiftylog@66.115.146.16)
[08:35:35] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Ping timeout: 246 seconds)
[08:35:56] *** Quits: _ShiftyLogic_ (~shiftylog@66.115.146.16) (Ping timeout: 245 seconds)
[08:43:27] <great_taste> how can I write a default value for a function template parameter which is a no-op?  such as `template<typename Func> void foo(Func func = void(void)) {}`
[08:43:56] <great_taste> is that even possible?
[08:52:45] <computerquip> Can probably pass a lambda. Func func = []{}
[08:54:53] <great_taste> ah, yeah
[08:55:08] * great_taste feels dumb
[08:55:38] *** Joins: linexpert (~linexpert@134.209.114.206)
[08:57:23] <great_taste> well.. "couldnâ€™t deduce template parameter"
[08:58:18] <great_taste> { foo(); } template<typename Func> void foo(Func func = []{}) {}
[08:58:18] <geordi> error: no matching function for call to 'foo()'
[08:58:40] <great_taste> { foo([]{}); } template<typename Func> void foo(Func func = []{}) {}
[08:58:41] <geordi>  
[08:59:37] <great_taste> { foo(); } template<typename Func = void(void)> void foo(Func func = []{}) {}
[08:59:38] <geordi>  
[09:05:06] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[09:06:15] *** Joins: ravan (~ravan@user/ravan)
[09:07:26] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[09:10:32] <computerquip> I suppose you could also take an std::function instead of a template parameter. Just be careful with it in an interface.
[09:18:06] *** Quits: linexpert (~linexpert@134.209.114.206) (Quit: Client closed)
[09:18:55] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 260 seconds)
[09:21:13] <computerquip> Ah, and I guess you could also
[09:22:36] <computerquip> { foo(); } void noop() { } template<void(*Func)() = noop> void foo() { Func(); }
[09:22:36] <geordi>  
[09:24:56] <great_taste> hm yeah you can pass function pointers in template parameters, which is kinda weird :P
[09:25:31] <great_taste> the former is better
[09:25:40] <great_taste> I wanna pass lambdas in the parameter
[09:25:41] <great_taste> it works
[09:35:38] *** Quits: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 265 seconds)
[09:37:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:25] *** ChanServ sets mode: +v npaperbot
[09:44:51] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:47:55] *** Joins: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109)
[09:49:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[09:54:58] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 265 seconds)
[09:57:52] *** Quits: manjaro-user (~manjaro-u@199.119.235.236) (Ping timeout: 265 seconds)
[10:00:02] *** Joins: manjaro-user (~manjaro-u@199.119.235.236)
[10:00:54] <johnny> ah.. a new one to me "Type deduction did not result in an owner" thanks buddy.. i appreciate you
[10:10:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[10:12:59] *** Quits: manjaro-user (~manjaro-u@199.119.235.236) (Ping timeout: 264 seconds)
[10:26:04] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[10:35:06] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[10:45:20] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3c5a:ecb6:636d:9caa)
[10:50:00] <onizu> Has anyone encountered an error as: warning C4309: 'argument': truncation of constant value.
[10:50:02] <onizu> ?
[10:53:16] <Stryyker> a bit of extra detail may result in a clear answer
[10:53:56] <Stryyker> Does your type/assigment match size?
[10:58:04] <onizu> Stryyker:  I have defined a constant as:  #define ID_INFO_DIALOG  32800
[10:58:17] <onizu> and it results in that error.
[10:58:44] <onizu> However, I tried assigning a lesser value (32750), and it worked
[10:59:52] <Stryyker> sounds like it is using 16 bit signed values
[10:59:56] <onizu> so it takes the value of type 'short'
[11:00:09] <Stryyker> Win32?
[11:00:18] <onizu> -32768 to 32767
[11:00:26] <onizu> yes, windows
[11:02:32] <Stryyker> The define line is giving the error or another line?
[11:04:29] <onizu> Stryyker: sorry, some other line, where it was used.
[11:04:41] <onizu> now I got it
[11:05:12] <Stryyker> was it a signed short being assigned?
[11:06:17] <onizu> short
[11:06:28] <onizu> explicit ModalDialog (GSResModule resModule, short resId, GSResModule dialIconResModule);
[11:18:51] <computerquip> onizu, the error is likely as it sounds, it's snipping your constant down to fit what you're using it for.
[11:21:56] <computerquip> For example, this generates the warning: https://godbolt.org/z/dEoEG5q1T
[11:22:19] <Stryyker> mystery solved
[11:22:37] <computerquip> Sadly, gcc doesn't warn at all for some reason but this shows the problem it causes: https://godbolt.org/z/evsYzWq87
[11:29:56] <onizu> computerquip: yes, something of that sort. Instead of std::int16_t, in my case it required short)
[11:31:04] <onizu> does the majority of users here work with gcc and not msvc?
[11:31:09] <ville> you can ask your compiler for more warnings probably. no idea what that is for cl
[11:31:33] <ville> for clang/gcc you would perhaps try -Wconcersion to get warnings relating to these types of things
[11:31:39] <ville> -Wconversion
[11:31:52] <ville> onizu: we don't have stats on that
[11:32:08] <computerquip> Huh, surprised that wasn't part of -Wall
[11:32:16] <ville> !give computerquip -Wall
[11:32:17] <nolyc> computerquip: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[11:32:42] <computerquip> Hah. I wonder what the reasoning for keeping it out of Wall was.
[11:33:39] <ville> they would break so many projects if they changed what -Wall does and also had -Werror
[11:33:53] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3c5a:ecb6:636d:9caa) (Quit: Quit)
[11:34:54] <computerquip> As someone who works with a lot of projects with -Werror, this already happens with every major compiler update.
[11:35:02] <ville> the things -Wconversion warns about in particular. they are everywhere. it's very very exceedingly rare to see a 3rd party library compile with out triggering a conversion warning
[11:35:20] *** gggpkm__ is now known as gggpkm
[11:36:45] <computerquip> Yeah, that's probably true... I wonder how many of those are issues. In this case, it seems fairly obvious that it's a constant being truncated which is likely not intentional I think -Wconversion warns for more than just that particular case though.
[11:56:12] *** Joins: Inst__ (~Inst@2601:6c4:4080:3f80:9dd3:1e99:a750:2941)
[11:56:32] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:56:41] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:57:12] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[11:57:43] *** Inst__ is now known as Inst
[12:00:41] *** Quits: gggpkm (~gggpkm@221.219.79.236) (Ping timeout: 264 seconds)
[12:03:14] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:07:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:07:55] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:08:07] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:10:41] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[12:11:08] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:13:06] *** Joins: manjaro-user (~manjaro-u@199.119.235.236)
[12:13:06] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:14:07] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 268 seconds)
[12:14:33] *** Joins: paule32 (~paule32@user/paule32)
[12:18:30] *** gggpkm__ is now known as gggpkm
[12:18:36] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:6461:4b5f:ea89:a7b3)
[12:21:52] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[12:22:14] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:22:32] <ville> of course it does. -Wconversion covers conversions. truncation being one type of conversion
[12:23:06] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:24:35] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:40:18] *** Joins: meator (~meator@user/meator)
[12:40:18] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:48:59] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[12:49:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:49:46] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:50:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:51:05] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[12:52:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:53:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[12:53:42] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[12:54:59] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:9dd3:1e99:a750:2941) (Ping timeout: 264 seconds)
[12:56:46] *** Quits: gggpkm (~gggpkm@60.10.194.46) (Ping timeout: 245 seconds)
[12:57:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:01:26] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[13:08:01] *** Joins: paul424 (~tom@ip-37-248-157-76.multi.internet.cyfrowypolsat.pl)
[13:08:51] <paul424> Hello , I just wonder what's what in windows world ... that is would I be able to build successfully the binary blob exe out of this https://github.com/tomluchowski/OpenDungeons/blob/shaders-improvement/CMakeLists.txt under windows ?
[13:09:04] <paul424> and what tools would I need ? the first question of all ...
[13:12:44] <paul424> Do In eed something more then MS Visual Studio Code ?
[13:24:50] <TinoDidriksen> VS Code doesn't come with CMake or a compiler.
[13:26:21] <TinoDidriksen> So you need a compiler, CMake, and all these libraries https://github.com/tomluchowski/OpenDungeons/blob/shaders-improvement/CMakeLists.txt#L108-L118
[13:27:30] <paul424> aha thanks
[13:34:26] *** Quits: gggpkm_ (~gggpkm@60.10.23.170) (Remote host closed the connection)
[13:34:48] <paul424> !quote paul424
[13:34:48] <nolyc> paul424: Error: I couldn't find a matching quotegrab for paul424.
[13:34:50] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[13:34:56] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Remote host closed the connection)
[13:35:07] <paul424> ahh there always was the famous  " I am not a newbie " :D
[13:35:20] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[13:35:30] *** Joins: DSpider (~DSpider@82.79.237.121)
[13:36:23] *** Quits: manjaro-user (~manjaro-u@199.119.235.236) (Ping timeout: 264 seconds)
[13:36:32] *** Joins: gggpkm__ (~gggpkm@60.10.194.46)
[13:37:17] <Raziel> ahhh, ogre3d. those were... times. wouldn't say they were good times, but they were times.
[13:37:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:26] *** ChanServ sets mode: +v npaperbot
[13:40:35] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 264 seconds)
[13:42:31] *** Joins: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de)
[13:51:12] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[13:53:27] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:54:11] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:54:39] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[13:55:45] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:56:21] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:57:40] <paul424> TinoDidriksen, one last question should I try the MSVC path or MINGW one ? I mean which compiler should be easier to harness ?
[13:58:18] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[13:58:22] <TinoDidriksen> I prefer Visual Studio with CMake and vcpkg. Given that VS Community is free, I see no reason to use MinGW on Windows.
[14:01:06] <Raziel> paul424, if you're used to the linux way of doing things you might find mingw agreeable
[14:01:09] <Raziel> I do not.
[14:01:10] <Raziel> lol
[14:01:55] <paul424> TinoDidriksen, Raziel ok thanks
[14:02:20] <Raziel> Both MSVC and Clang have good support on visual studio, and cmake has good support as well and is obviously more portable than using the VS solution/project stuff
[14:03:17] *** Joins: markong (~kvirc@213.146.188.203)
[14:04:53] *** Quits: pa (~pah@user/pah) (Ping timeout: 264 seconds)
[14:04:59] <Raziel> also, VS is great but you should know that it is much heavier than VSCode :p if you're running it on a potato it might not be a great time
[14:05:19] *** Joins: pah (~pah@user/pah)
[14:11:47] <DSpider> is O(long N) faster than O(1)?
[14:11:59] <DSpider> *log N, sorry
[14:12:13] <TinoDidriksen> O(1) is the fastest.
[14:12:37] <PJBoy> well
[14:12:42] <PJBoy> O(1/n) would be faster
[14:13:16] <DSpider> for a sample size of 100 elements
[14:13:55] <PJBoy> big-O describes how the time taken grows as you increase the number of elements
[14:14:06] <PJBoy> considering a fixed sample size is incompatible with big O
[14:14:15] <DSpider> afailk, std::map is O(log N) and std::unordered_map is O(1)
[14:14:18] <Raziel> DSpider, well, log N where N = 100 is 2
[14:14:20] <Raziel> 2 > 1
[14:14:24] <Raziel> therefore, O(1) is faster
[14:14:43] <DSpider> I see
[14:15:02] <DSpider> wait, how is it 2?
[14:15:27] <PJBoy> he's trolling
[14:15:29] <DSpider> you're supposed to divide by 2 each time until you find the element, right?
[14:15:45] <PJBoy> map being O(log(n)) means a map that's twice as big will take roughly (1 + log(2)) times as long to do the operation
[14:15:51] <Raziel> PJBoy, it is 2 for log10
[14:15:52] <Raziel> lol
[14:16:03] <PJBoy> it's still irrelevant
[14:16:11] <Raziel> indeed
[14:16:18] <PJBoy> O(1 billion) is the same notion as O(1)
[14:16:35] <PJBoy> unordered_map being O(1) means an unordered_map doesn't take any longer to do its operations regardless of its size
[14:16:44] <PJBoy> which is the magic of hashing
[14:17:01] <Raziel> but what if muh hash collision
[14:17:30] <PJBoy> then you might have to spend some fixed number of operations searching a linked list
[14:17:31] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[14:17:47] <PJBoy> until a rehash is triggered, which would take linear time
[14:17:51] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[14:17:56] <TinoDidriksen> Depending on what you need to do with the elements, unordered_map can be faster or slower than map ... or even vector.
[14:18:05] <PJBoy> but that's only done in every 1/size() operations, so it amortizes out
[14:18:42] *** Joins: pah (~pah@user/pah)
[14:19:33] *** Quits: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de) (Quit: Leaving)
[14:20:25] <PJBoy> but yeah do note the worst case time complexity of unordered_map insert being O(n)
[14:20:46] <PJBoy> if you care about worst case complexity, then map's O(log(n)) stands to look better
[14:21:00] <TinoDidriksen> DSpider, what is the actual task? What's the average number of elements?
[14:21:12] <DSpider> 100
[14:24:29] <PJBoy> I'd default to unordered_map for a small number like that
[14:24:43] <PJBoy> but being so small, even one of those vector wrappers could make sense
[14:25:02] <TinoDidriksen> 100 elements...doing what?
[14:25:17] <TinoDidriksen> There were 2 questions for a reason.
[14:25:34] *** Joins: pah_ (~pah@host-82-59-7-13.retail.telecomitalia.it)
[14:26:11] *** Quits: pah (~pah@user/pah) (Ping timeout: 264 seconds)
[14:26:24] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:32:50] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[14:33:20] *** Joins: ShiftyLo_ (~shiftylog@66.115.146.16)
[14:35:50] <DSpider> it stores a string and a transform matrix. The code checks if there's a certan string in there  and if it exists, that transform matrix is multiplied with its parent's transform matrix, creating a hierarcy of sorts
[14:37:12] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:37:55] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[14:38:25] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) (Ping timeout: 268 seconds)
[14:38:32] *** Quits: ShiftyLo_ (~shiftylog@66.115.146.16) (Ping timeout: 246 seconds)
[14:41:26] <TinoDidriksen> So, string keys. That means your O(1) vs. O(log n) also depends on average string length.
[14:44:39] *** Joins: manjaro-user (~manjaro-u@199.119.235.236)
[14:46:23] *** Joins: plastico (~plastico@neomutt/plastico)
[14:51:41] *** Quits: paul424 (~tom@ip-37-248-157-76.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:02:34] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:02:38] *** Joins: raekye (~raekye@creatifcubed.com)
[15:03:25] *** Quits: manjaro-user (~manjaro-u@199.119.235.236) (Ping timeout: 252 seconds)
[15:11:19] <PJBoy> that's an interesting case actually
[15:11:46] <PJBoy> comparison of strings is often likely to finish early
[15:11:58] <PJBoy> whereas hashing a string will always require processing the whole thing
[15:11:58] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:14:12] *** Joins: meator (~meator@user/meator)
[15:14:37] <TinoDidriksen> And there are middle grounds, such as using a trie.
[15:16:21] *** Quits: pah_ (~pah@host-82-59-7-13.retail.telecomitalia.it) (Ping timeout: 245 seconds)
[15:17:20] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[15:17:50] *** Joins: pah (~pah@user/pah)
[15:21:03] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:24:44] *** Quits: pah (~pah@user/pah) (Ping timeout: 246 seconds)
[15:27:25] *** Joins: pah (~pah@user/pah)
[15:31:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:7411:242:32c0:bf72)
[15:35:11] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:42:25] *** Joins: horribleprogram (~user@2607:fea8:7040:830:856e:c819:3bfd:270f)
[15:42:38] *** Quits: horribleprogram (~user@2607:fea8:7040:830:856e:c819:3bfd:270f) (Changing host)
[15:42:38] *** Joins: horribleprogram (~user@user/horribleprogram)
[15:45:59] *** Joins: proller (~p@80.240.216.69)
[15:50:25] <DSpider> I found this graph: https://blog.mbedded.ninja/programming/algorithms-and-data-structures/algorithm-time-complexity/big-o-notation-algorithm-complexity.png
[15:50:44] <DSpider> it seems std::map could win, if the number of elements is small enough
[15:51:54] <DSpider> my use case is always 100 elements, which is around the halfway point of 0-200
[15:52:39] <DSpider> std::map is O(log(n)), std::unordered_map is O(1)
[15:53:27] <DSpider> eyeballing it would seem that unordered_map would win
[15:53:37] <DSpider> probably
[15:57:42] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[15:58:02] <Raziel> O(h)(n!)o
[15:59:14] <Raziel> that is a weird graph though. and clearly either incorrect or using different log scales for the time axis for each thing without saying so
[16:00:32] <DSpider> it's from this article: https://blog.mbedded.ninja/programming/algorithms-and-data-structures/algorithm-time-complexity/
[16:00:36] <Raziel> https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Comparison_computational_complexity.svg/1280px-Comparison_computational_complexity.svg.png
[16:00:43] <Raziel> the one on wikipedia seems to make a lot more sense v:
[16:02:08] <DSpider> why does log n always seem to start with an offset with regards to zero?
[16:02:08] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:02:33] <DSpider> like in this graph: https://res.cloudinary.com/practicaldev/image/fetch/s--NR3M1nw8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/z4bbf8o1ly77wmkjdgge.png
[16:02:42] <DSpider> shouldn't they all start at 0?
[16:03:41] <DSpider> or maybe it's just a shitty graph
[16:03:44] <DSpider> :
[16:03:46] <DSpider> :)
[16:03:48] <Raziel> not really, because 0 is irrelevant (if you have 0 elements you ain't doin jack shit anyway)
[16:04:10] <Raziel> and for that matter, even 1 is irrelevant
[16:04:18] <DSpider> this one seems to start from zero: https://miro.medium.com/max/1400/1*yiyfZodqXNwMouC0-B0Wlg.png
[16:04:46] <Raziel> the problem with that is
[16:04:52] <Raziel> base 2 log of 1 is 0
[16:05:23] <Raziel> which would mean that when you have 1 element and your algorithm is O(log n), it will take 0 time/instructions to complete
[16:05:26] <Raziel> which is patently false
[16:07:24] *** Joins: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de)
[16:07:49] <DSpider> maybe that's why there are no numbers on that last graph
[16:07:58] <DSpider> at the bottom
[16:08:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[16:08:27] <DSpider> so log n does, indeed start from 1, but the line is thicc you just can't see it
[16:09:02] <DSpider> like on a scale of 0-1mil
[16:09:08] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[16:11:09] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:11:31] <Raziel> I mean, sure, but n=0 and n=1 are special cases for our purposes
[16:11:39] <Raziel> the real progression only starts from n=2
[16:13:26] <DSpider> yeah, but you still have to represent it on the graph when time is zero
[16:14:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[16:14:51] <Raziel> well, not necessarily, but sure. O(n) for example graphs fine starting from n=0 and t=0. O(log n) kinda doesn't.
[16:15:31] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 245 seconds)
[16:22:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:24:05] *** Joins: CaCode (~CaCode@user/cacode)
[16:24:05] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:24:06] *** Joins: pull (~tcz@91.150.165.88)
[16:26:01] *** Joins: andreasbuhr (~quassel@p549db3fa.dip0.t-ipconnect.de)
[16:27:12] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[16:28:59] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:32:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:35:35] *** Joins: kn07_ (~kn07_@86.121.23.168)
[16:36:02] *** Quits: kn07_ (~kn07_@86.121.23.168) (Remote host closed the connection)
[16:59:16] <Alipha> DSpider: how long are your std::string keys?
[16:59:16] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:00:51] <DSpider> under 15 characters
[17:01:28] <DSpider> 17 characters at most
[17:02:10] <Alipha> Hashing should be pretty fast then, so std::unordered_map is likely to win over std::map, I'd think
[17:02:39] <Alipha> TinoDidriksen: PJBoy: you could also use a hashing function which doesn't iterate over the whole string
[17:02:48] <DSpider> I know as soon as they hit 15 characters they are allocated on the heap
[17:06:23] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (Ping timeout: 264 seconds)
[17:07:47] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:11:30] <Alipha> DSpider: the point was, if your keys are long, eg, 1000 characters, then operations on an unordered_map are likely to be much slower than map because to produce the hash values, std::hash will loop over all 1000 characters. Whereas with map, if, for example, two strings differ at the 3rd character, then < will stop comparing at the 3rd character and not have to iterate the whole string.
[17:12:18] *** Joins: pulse (~pulse@user/pulse)
[17:15:30] <Alipha> Hm. Though that really only helps std::map with inserting, as finding elements which exist would require iterating over the whole string at least twice (since equality is determined by !(a < b) && !(b < a))
[17:16:52] <Raziel> make a prefix tree based map
[17:30:29] <Juliu> You don't have to iterate over most string-pairs a and b completely to determine a < b   (or b < a)
[17:35:03] *** Quits: CaCode (~CaCode@user/cacode) (Quit: Leaving)
[17:35:53] <ville> make a judy array!
[17:35:53] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:37:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:26] *** ChanServ sets mode: +v npaperbot
[17:44:21] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:59:41] *** Quits: andreasbuhr (~quassel@p549db3fa.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:04:25] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[18:04:25] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:13:24] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:24:06] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[18:26:26] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[18:26:26] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:27:36] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 245 seconds)
[18:29:50] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[18:30:18] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:31:21] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 245 seconds)
[18:33:23] *** Quits: gggpkm__ (~gggpkm@60.10.194.46) (Ping timeout: 264 seconds)
[18:35:02] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:41:43] *** Joins: Skyfire (~pyon@user/pyon)
[18:42:22] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[18:48:37] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:6122:580e:b697:71e1)
[18:50:34] *** Joins: luizfrds (~Luiz@152.250.243.147)
[18:52:28] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:59:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[18:59:34] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[19:01:06] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:02:32] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:6122:580e:b697:71e1) (Remote host closed the connection)
[19:02:38] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[19:08:51] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[19:09:11] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[19:10:45] *** Joins: AmR (~AmREiSa@156.199.244.83)
[19:12:39] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[19:13:12] *** Joins: teepee (~teepee@openscad/teepee)
[19:16:47] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[19:20:16] *** Quits: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:20:37] *** Joins: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de)
[19:20:37] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:22:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:23:38] *** Joins: ravan (~ravan@user/ravan)
[19:23:38] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[19:24:17] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:29:36] <Alipha> When looking up a key that exists in a map, `a < b` and `b < a` will each iterate over all of a and b because a == b, plus any additional partial iterations while searching for the correct node
[19:30:10] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:31:24] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:32:18] <Alipha> Whereas an unordered_map will iterate over the whole string to compute the hash, plus again to do a == b, plus potentially additional partial comparisons of a == b if there's multiple keys in the bucket
[19:33:52] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[19:47:49] <Juliu> a == b will only be true ones if you access an existing element in a map
[19:48:54] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[19:54:16] *** Joins: manuels (~manuel@80.211.205.88)
[19:58:03] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:ccfd:526d:efde:5784)
[19:58:03] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:58:03] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:ccfd:526d:efde:5784) (Changing host)
[19:58:03] *** Joins: skapata (~Skapata@user/skapata)
[19:59:33] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:06:43] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:07:02] *** Joins: jokoon (~eio@37.164.92.44)
[20:07:36] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[20:08:18] <jokoon> Any teacher here? In a near future, I will need to test the C++ work of 32 students. It's going to be one file or two. Does github classroom really helps for this?
[20:11:07] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:12:23] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[20:12:23] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:16:43] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:18:12] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[20:19:27] *** Joins: dld (~dld@2601:197:600:1210:4005:8d20:87b1:8dd5)
[20:20:45] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:26:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:26:33] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:26:47] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:28:15] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:29:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[20:34:59] <AmR> I try run runConfigureICU form bash but I got " bash: ./runConfigureICU: Permission denied "
[20:35:55] <AmR> And the file have attr " -rwxr-xr-x  1 amr amr  12419 Ø£ÙƒØª 28 18:04 runConfigureICU "
[20:43:20] <InPhase> jokoon: If it's an intro course you'll likely have have the overhead of teaching git to them, but offer the benefit of teaching git to them.  But resist the urge to purely automate on a basis of automatic test success or failure.  This leads to horrendous programming to the tests without more expert guidance on what is good and bad.  It will also permit plagiarism to slide past if you're not actually
[20:43:26] <InPhase> manually reviewing the submissions.
[20:50:47] <cbreak> InPhase: a.k.a. test-driven-development.
[20:51:06] <jokoon> InPhase, they alreayd know git, I thought the goal of git classroom was to make it easier for me to gather their work and run it
[20:51:07] <cbreak> it's much agile.
[20:51:16] <InPhase> jokoon: For context on that comment, I was a professor for 6 years, so I know there is a time pressure applied and a subsequent trend toward minimizing grading time.  But in complex fields this results in significant learning deficits as people adjust their efforts to the grading process.
[20:52:17] <InPhase> jokoon: So really I think the merits are dependent upon how you use the system and how you instruct them that you will be using it.
[20:53:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[20:57:36] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[21:01:12] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[21:04:14] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 268 seconds)
[21:05:21] *** Quits: jokoon (~eio@37.164.92.44) (Ping timeout: 265 seconds)
[21:12:22] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:30:58] *** Joins: jokoon (~eio@37.164.92.44)
[21:34:12] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7411:242:32c0:bf72) (Remote host closed the connection)
[21:34:28] *** Joins: Tobbi_ (~Tobbi@2a02:8108:1240:48ec:7411:242:32c0:bf72)
[21:37:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:26] *** ChanServ sets mode: +v npaperbot
[21:38:07] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[21:38:09] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:05:46] *** Quits: jokoon (~eio@37.164.92.44) (Ping timeout: 265 seconds)
[22:05:46] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:05:54] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:09:17] *** Joins: jokoon (~eio@37.164.92.44)
[22:11:44] *** Joins: traxex (traxex@user/traxex)
[22:11:44] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:11:55] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:15:40] *** Joins: jokoon2 (~eio@37.164.92.44)
[22:16:03] *** Tobbi_ is now known as Tobbi
[22:16:14] *** Quits: jokoon (~eio@37.164.92.44) (Ping timeout: 260 seconds)
[22:26:59] <AmR> Can Any one help me with ICU Build shell script ?
[22:29:34] <AmR> Can Any one help me with ICU Build shell script ? https://pastebin.com/ijARE4kj
[22:30:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:32:30] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:32:30] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:39:29] <TheGuestMovie> Imagine willingly inflicting git on a bunch of helpless students
[22:39:48] <TinoDidriksen> ICU as a static lib? That's a pretty bad idea, imo. Of all the libraries to want statically, ICU is quite the odd choice.
[22:40:58] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:41:07] <TinoDidriksen> That said, I don't see anything formally wrong with the script.
[22:49:14] *** Quits: pah (~pah@user/pah) (Ping timeout: 246 seconds)
[22:51:24] *** Joins: pah (~pah@user/pah)
[22:57:07] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:00:56] *** Quits: kylese (~kylese@p5dd8be11.dip0.t-ipconnect.de) (Quit: Leaving)
[23:00:56] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:07:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:6461:4b5f:ea89:a7b3) (Quit: Quit)
[23:10:03] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:12:11] *** Quits: jokoon2 (~eio@37.164.92.44) (Ping timeout: 245 seconds)
[23:15:30] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[23:15:30] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:24:05] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:25:10] *** Joins: pah (~pah@user/pah)
[23:27:56] *** Joins: jokoon (~eio@37.164.92.44)
[23:29:58] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[23:29:58] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:30:07] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:33:05] *** Joins: pah (~pah@user/pah)
[23:33:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[23:37:09] *** Quits: Skyfire (~pyon@user/pyon) (Quit: br)
[23:39:28] *** Joins: Skyfire (~pyon@user/pyon)
[23:43:09] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:43:09] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:44:29] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 264 seconds)
[23:49:12] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[23:51:40] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:56:41] *** Joins: proller (~p@2a02:6b8:b081:1205::1:17)
