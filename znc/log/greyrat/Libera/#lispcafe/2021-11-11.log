[00:02:11] <Gnuxie> <selwyn> "Gnuxie üíúüêù: the article got..." <- Wtf lol
[00:02:21] <selwyn> did you read it
[00:02:40] <hayley> In Newspeak classes are used as modules, and they are used surprisingly well.
[00:03:18] <hayley> ...as you instantiate a module with its dependencies, then you can inherit from another module. 
[00:03:40] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Read error: Connection reset by peer)
[00:04:08] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[00:04:40] <hayley> https://www.youtube.com/watch?v=NIzleISU5jw
[00:04:41] -ixelp- Beat the Clock - YouTube
[00:05:29] <hayley> So, the last paper I read convinced me that some code can decide between not opening a new stack region, opening and closing a stack region in a loop, or opening and closing a stack region with a function call.
[00:05:48] <hayley> https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.95.3766&rep=rep1&type=pdf ‚Üê this one
[00:06:29] <hayley> Yes.
[00:17:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[00:19:32] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[00:20:03] <dave0> maw
[00:26:49] <gilberth> Hello dave0 !
[00:27:03] <dave0> maw gilberth !
[00:27:15] <dave0> 2 spaces!
[00:27:46] * hayley uploaded an image: (159KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/fCCCmIQjhkZXCXdPNMmMdHSr/stack-allocation.jpeg >
[00:27:51] <selwyn> lispcafe does social distancing
[00:28:04] <gilberth> dave0: Yeah, I lost one. I have so plenty I don't know where to stash them. Too little space for spaces.
[00:28:05] <GreaseMonkey> "Python has no preprocessor or macro support" pfft, only if you're a scrub who doesn't use the ast module and hijacking of the import machinery :^)
[00:28:32] <selwyn> greasemonkey: a python weenie once suggested this unironically as the answer to lisp macros
[00:28:57] <GreaseMonkey> selwyn: it's still more limited than what you can do with Nim
[00:29:06] <gilberth> Well, there always is m4. /me hides.
[00:29:33] * hayley uploaded an image: (584KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/kGOjtcrmaHsSxWLJdQhKDMRF/erlang.jpeg >
[00:36:39] <selwyn> is it named after nim chimpsky
[00:38:11] <hayley> New Implementation of M4
[00:40:58] <selwyn> not impressive m8
[00:49:48] <gilberth> hayley: Yet another take at indention with HTML: <http://clim.rocks/gilbert/defun-signature-layout-2.html> What you think?
[00:51:55] <gilberth> Try adjusting the window size. I use TABLEs for a reason. But flex boxes and/or inline-block boxes would do the same.
[00:53:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:59:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:00:01] <White_Flame> run m4 on an m1
[01:06:15] <gilberth> Slightly different "prefixes": <http://clim.rocks/gilbert/defun-signature-layout-3.html>
[01:15:48] <shka> well i've managed to reduce the CSV loading time from 60 seconds to 20 seconds
[01:17:08] <Catie> shka: what did it?
[01:18:04] <shka> mostly just added buffering
[01:18:21] *** Joins: cwebber (~user@user/cwebber)
[01:20:17] <shka> still, it is not exactly fast
[01:20:56] <shka> because i can load the same file with pandas using 2 seconds
[01:21:00] <shka> so 10 times slower
[01:26:57] <shka> well, it is partly because i am converting strings to floats while processing
[01:30:43] <selwyn> feel that you should aim to beat the python equivalent in speed lol
[01:30:53] <selwyn> (not that i have any bright ideas)
[01:31:35] <shka> selwyn: well, this python library is written in C anyway
[01:31:42] <selwyn> financial times bullish on smrs
[01:31:43] <shka> besides, i am not sure how correct it is
[01:32:10] <shka> and i am using recursive functions for parsing... which is not ideal
[01:32:39] <selwyn> apparently plan is to retrofit coal fired plants into being nuclear
[01:32:41] <selwyn> smart
[01:33:42] <shka> this wont work
[01:33:50] <shka> i think...
[01:36:33] <selwyn> the retrofitting?
[01:38:03] <shka> yeah
[01:40:33] <selwyn> why
[01:40:44] <GreaseMonkey> i don't recall the figure if it were 7 years or 50 years but if we got all of our power from nuclear we would definitely run out of fuel
[01:41:43] <selwyn> get uranium from seawater? whats the problem
[01:42:13] <GreaseMonkey> well, the reason we can do that is due to a problem
[01:42:28] <hayley> gilberth: Nice!
[01:42:45] <pjb> selwyn: entropy?
[01:42:53] <selwyn> ?
[01:42:58] <pjb> selwyn: compute the energy needed to pump all the seawater!
[01:43:29] <selwyn> am informed that it is not 5x more expensive than mining
[01:45:11] <pjb> But foremost, there are algae that do the filtering for us, concentrating heavy metals, so we can just grow them and reap them for processing.
[01:45:43] <hayley> https://www.youtube.com/watch?v=OzObuSMF-ik
[01:45:44] -ixelp- All You Ever Think About Is Sex by Sparks but every time Ron gets pied it makes a cartoon splat sfx - YouTube
[01:46:50] <selwyn> wondering if i should use physx or not
[01:48:48] <hayley> 0/10 no sauce physics
[01:49:30] <selwyn> because i am dumb i had not realised that it is nvidia only
[01:50:14] <selwyn> i suppose i am the ideal person to make a physics engine in common lisp sigh
[01:50:22] <Alfr> GreaseMonkey, not true. We've thrown away about 99% of the uranium mined (U-238) simply breeding that what we've already dug out into Pu-239 will give us a couple hundred years of power at least.
[01:51:19] <shka> GreaseMonkey: there is enough of uranium in the ground for few hundreds of years
[01:53:51] <shka> also, technological advancement in the breeder reactors would give you thousands of years worth of power
[01:57:21] <selwyn> gnuxie: https://cdn.discordapp.com/attachments/718431389942415360/907351814737911938/unknown.png
[01:57:54] <Gnuxie> oh no
[01:58:41] <hayley> what's this site again
[01:58:48] <selwyn> hypnogram.xyz
[02:00:11] * hayley uploaded an image: (26KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/tzXXKmwrmiuoPlumSwQJkNNZ/bombers-fly-at-zero-feet.jpg >
[02:00:44] <selwyn> https://cdn.discordapp.com/attachments/718431389942415360/908121466980171796/unknown.png
[02:00:54] <selwyn> did quite well to get the half life vibe
[02:01:41] <hayley> "Latest images: Vladimir Lenin as an e-girl"
[02:02:10] <hayley> I think Henry Baker has a private Twitter account and is liking my complaining posts
[02:09:33] * hayley uploaded an image: (26KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wJNSuMeWphEyZudmjggrDAgM/henry-givens-baker-jr-apparently.jpg >
[02:12:15] <selwyn> https://cdn.discordapp.com/attachments/873281830856577044/908124331593318421/unknown.png
[02:13:45] <hayley> .oO(If all my loops are tail recursion, then there's no difference between opening a region for each loop and opening a region for each call, right?)
[02:16:42] <selwyn> good night everyone
[02:17:32] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[02:28:00] *** Joins: Jacobis9000 (~jonaholuf@host86-189-186-248.range86-189.btcentralplus.com)
[02:29:33] <dave0> time for a walk! bbl
[02:29:49] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[02:34:33] <Jacobis9000> hello :)
[02:39:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:27:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:29:14] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[03:56:59] * hayley tries to get information on the startup program she has now been invited to.
[03:57:21] *** Quits: jmercouris (sid438340@id-438340.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:57:23] <hayley> "So, what's the project?" "Stack allocation." "Who the fuck wants that?" "Hey, aren't /you/ supposed to help /me/ with that question?"
[03:57:40] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Read error: Connection reset by peer)
[04:13:02] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 240 seconds)
[04:13:24] *** Joins: occ (~occ@user/occ)
[04:14:26] *** Joins: pl (sid98063@helmsley.irccloud.com)
[04:20:47] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[04:22:03] *** Quits: Jacobis9000 (~jonaholuf@host86-189-186-248.range86-189.btcentralplus.com) (Ping timeout: 256 seconds)
[04:24:12] *** Joins: pl (sid98063@helmsley.irccloud.com)
[04:29:19] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[04:32:46] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 268 seconds)
[04:44:32] *** Joins: jmercouris (sid438340@hampstead.irccloud.com)
[05:11:11] *** Quits: occ (~occ@user/occ) (Ping timeout: 264 seconds)
[05:12:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[05:14:41] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[05:17:18] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 260 seconds)
[05:39:26] *** Quits: cwebber (~user@user/cwebber) (Remote host closed the connection)
[05:44:43] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[05:45:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[06:13:41] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 246 seconds)
[06:34:41] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[06:36:28] *** Joins: aeth (~aeth@user/aeth)
[07:24:56] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[07:27:25] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:28:10] <dave0> maw
[07:28:45] <hayley> https://www.youtube.com/watch?v=c29jLuCyBG8
[07:28:45] -ixelp- Gary Numan Remind Me To Smile Hammersmith 1980 - YouTube
[07:28:53] <dave0> maw hayley 
[08:06:27] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 256 seconds)
[08:13:15] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[08:31:14] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[08:31:59] <White_Flame> huh, so lowtax apparently finally got pushed down the stairs and is ded
[08:35:23] <hayley> https://justinmeiners.github.io/lc3-vm/#1:15 comes off like the inverse of microcode: rather than looking up the instruction, the instruction is passed to all modules which decide whether to fire or not.
[08:35:23] -ixelp- Write your Own Virtual Machine
[08:35:50] <hayley> In other news, I'm slowly porting those micro-ops into LC3 with my macro assembler.
[08:43:53] *** Joins: semz (~none@user/semz)
[09:40:05] * hayley wrote nearly all the microcode now. JSR and TRAP are going to be weird though.
[09:45:00] <White_Flame> my ancient SA account doesn't seem to exist anymore, so https://i.imgur.com/iMA8ZB8.jpeg
[09:46:16] <hayley> So now I can write something like (define-instruction-handler ldr  6 :r0 :r1 :effective-address :load :register<-address) which spits out the LC3 assembly for interpreting that instruction, where each keyword is the name of some snippet that needs to be inserted.
[09:49:18] <hayley> The LEA instruction loads the address of some PC-relative value, but I usually call the address in LD Rx <- [Ry + n] an effective address for integers y and n.
[09:54:08] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[09:54:37] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[10:01:55] *** Joins: occ (~occ@user/occ)
[10:20:13] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 250 seconds)
[10:41:53] <selwyn> lowtax died?
[10:50:48] <hayley> "Now that you're out of university, you're getting a job." "Oh, I'll see if beach still needs a hand then." "No, a real job. Like stacking shelves." üôÑ
[10:51:04] <selwyn> parents?
[10:51:36] <hayley> My dad, as my mum would rather I don't work.
[10:51:49] <selwyn> work overrated
[10:52:56] <hayley> My holiday plan was to put off working on Netfarm longer, and instead destroy the MicroPython market.
[10:55:44] <hayley> Clearly dad is an inside agent working for Adafruit.
[10:59:02] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[11:06:09] *** Joins: occ (~occ@user/occ)
[11:12:32] <selwyn> https://www.washingtonpost.com/technology/2021/11/09/nasa-moon-artemis-spacex-china/?utm_source=twitter&utm_campaign=wp_main&utm_medium=social
[11:12:34] <selwyn> ?
[11:14:19] <selwyn> return to space race
[11:30:20] *** Quits: eschaton (eschaton@2600:3c01::f03c:91ff:fefd:5d92) (Quit: ZNC 1.8.x-git-16-0982d826 - https://znc.in)
[11:55:54] *** Joins: aeth_ (~aeth@user/aeth)
[11:57:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[12:06:03] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:25:39] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:28:27] *** Quits: Posterdati (~posterdat@host-80-183-118-167.business.telecomitalia.it) (Read error: Connection reset by peer)
[12:37:33] *** Joins: Alfr (~Alfr@user/alfr)
[12:40:56] * hayley now struggles to get all the interpreter methods to fit in 512 instructions.
[12:43:14] <dave0> what is hayley building?
[12:43:29] <hayley> dave0: A LC3 VM implemented in LC3.
[12:43:53] <dave0> o_O
[12:44:40] <dave0> sounds meta
[12:44:49] <hayley> It would be metacircular, yes.
[12:46:38] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: No route to host)
[12:47:02] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[12:47:02] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[12:53:05] * hayley realises that it's 9 bits signed, i.e. 256 instructions for all the "microcode" functions.
[12:54:04] <hayley> .oO(Put the registers and interpreter in the middle of the microcode?)
[13:01:19] <hayley> Aha, it's because I managed to put the 10 pages of free memory between microcode and instructions. Now it shut up.
[13:03:09] <hayley> Now there's no errors, except that I still haven't defined a few things. okay.
[13:14:55] <gilberth> Good morning #lispcafe!
[13:15:18] <shka> gilberth: who are you and what have you done to te real gilberth?
[13:17:06] <gilberth> hayley: When your parents want you to stack shelves, then tell them you work on stack allocation and garbage collection. You come up with a term "shelf" to address multiple frames, you threat as one object to make things more efficient. Problem solved.
[13:17:24] <hayley> Very funny.
[13:17:56] <gilberth> shka: I am early, I know. Dunno where real gilberth is. But I believe he is fine so far.
[13:18:14] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 246 seconds)
[13:18:33] <hayley> Well, now working for beach is apparently fine. Though idk what he needs now that MIR-to-LIR should work.
[13:19:17] *** Quits: phoe (~phoe@user/phoe) (Ping timeout: 246 seconds)
[13:20:16] *** Joins: phoe (~phoe@user/phoe)
[13:21:23] <hayley> Guess I should convince the VM that it loaded an instruction from memory, then see if it executes.
[13:26:35] <gilberth> Emacs is confused. When I hover over the mode line on one display a mouse over bubble help is displayed on the other display. How could that happen?
[13:27:14] <gilberth> That'll be a fine day. Not even finished the first coffee and already triggered a bug.
[13:27:29] <selwyn> you should be a bug bounty hunter
[13:28:25] <gilberth> Terrific, I am delighted.
[13:29:09] <hayley> HOLY SHIT, I executed an ADD instruction in my metacircular VM
[13:30:13] <selwyn> what did you add
[13:30:21] <gilberth> selwyn: But then, silly me to have Emacs having frames on two X11 displays at once. Perhaps I am not supposed to do that.
[13:30:49] <hayley> Sadly the host VM should know about symbols, but refuses to use my symbol table as I have numbers in the label names (due to gensym).
[13:30:58] <hayley> selwyn: ADD r0, r0, #5
[13:31:29] * hayley uploaded an image: (13KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/VpwygabqBVlEgctetZGVQiyW/Screenshot_2021-11-11_21-07-13.png >
[13:32:11] <hayley> Here is my register file btw. The first 8 locations are GPRs, then the PC, then status flag (which I forgot to update in microcode).
[13:32:45] <dave0> memory mapped registers!
[13:38:40] *** Joins: Posterdati (~posterdat@host-80-183-118-167.business.telecomitalia.it)
[13:45:06] <sham1> Party like it's the 80s and 6502
[13:45:32] *** Quits: Posterdati (~posterdat@host-80-183-118-167.business.telecomitalia.it) (Ping timeout: 246 seconds)
[13:45:37] <sham1> Since that's how you'd probably use some bytes of the zero-page since otherwise you just lack registers
[13:58:09] *** Joins: Posterdati (~posterdat@host-80-183-118-167.business.telecomitalia.it)
[13:58:42] <shka> anybody been using https://github.com/kat-co/cl-apache-arrow ?
[13:58:43] -ixelp- GitHub - kat-co/cl-apache-arrow: This is a library for working with Apache Arrow and Parquet data.
[14:06:31] <hayley> Now updating flags works. I guess microcoding it like this also means that the amount I can screw up a micro-op is limited.
[14:14:38] <pl> shka: oooh, I was looking for parquet lib recently 
[14:14:50] <shka> it is bad, isn't it?
[14:16:16] <pl> Parquet or the lib? 
[14:16:32] <shka> the prospect of using parquets from cl
[14:17:22] <pl> Not really 
[14:18:19] <shka> oh
[14:18:31] <shka> maybe you can show some of example code?
[14:18:48] <shka> i want to finally make vellum-parquet 
[14:22:59] <shka> asking, because i don't know what is the best way to deal with that
[14:23:09] <shka> arrow for instance is a moving target
[14:23:12] <shka> which is not ideal
[14:28:33] <hayley> gilberth: Should I use one bit RC for a GC on a microcontroller?
[14:55:39] <gilberth> hayley: You're the shelf stacking expert, not me. ;)
[14:56:06] <hayley> I won't implement optimistic stack allocation first though.
[14:57:39] * hayley reads the deferred RC paper.
[14:57:53] <hayley> Funny that they think incremental tracing "may not work" when it did a year later.
[15:02:19] <sham1> Well they had more time to think about it and thus the opinion changes
[15:04:38] <hayley> It doesn't strike me as a good idea to have some heap assignments do hash table lookups though, idk. Guess I'm still doing stack allocation.
[15:04:57] *** Joins: random-nick (~random-ni@87.116.176.55)
[15:16:01] <shka> pl: you have got my hopes high man :(
[15:27:27] *** Joins: notzmv (~zmv@user/notzmv)
[15:42:25] <pl> shka: sorry, I haven't yet used that library, but it does look interesting
[15:42:39] <pl> now I have to see if it only handles arrow or any generic parquet too
[15:43:14] <shka> well, what have you used instead?
[15:44:00] <pl> shka: ah, no, I haven't used *yet* - I wanted to have an argument against other formats and languages
[15:44:12] <pl> but I was looking at maybe writing pure CL implementation
[15:44:22] <shka> mmm i would love to see that
[15:45:05] <pl> also, I was thinking of doing HDF5
[15:45:06] <shka> because arrow, as feature rich as it is, is a moving target to integrate
[15:45:24] <pl> some of it was because of a project I did in python, where we ended up storing state in JSON
[15:45:34] <pl> which was horrible
[15:45:34] <shka> oh god
[15:45:45] <pl> because the state was a 3 dimensional array of bools
[15:46:12] <shka> yes, i can see why you did that, but man, it sucks
[15:46:12] <pl> but unlike pickle, it didn't explode
[15:46:42] <selwyn> explode?
[15:46:42] <shka> pickles are unsuitable for data storage
[15:46:51] <pl> when I wrote the json import/export, I made sure it properly upgraded to possibly changed data type
[15:47:02] <pl> selwyn: at some point dimensions of the array changed
[15:47:05] <shka> selwyn: you don't use pickles for long term storage
[15:47:10] <shka> it never works
[15:47:18] <pl> selwyn: pickle module resulted in recreating the old size of the array
[15:47:27] <pl> promptly robot position calculations exploded
[15:47:33] <shka> IT MAY appear to work, but don't count on that
[15:47:39] <pl> still think I should have done it using numpy
[15:48:07] <pl> instead of loop-in-loop as the original algorithm did
[15:49:10] <pl> tl;dr I had a bunch of 2D matrices that could be seen as one 3D matrix, and I was checking for free space in a horizontal slice
[15:49:16] <shka> you don't write loops in python xD
[15:49:20] <shka> it is not like lisp
[15:50:18] <pl> shka: one of the big things I dislike about what I did on the project is that I should have just gone "fuckitol" and did it in CL
[15:50:24] <pl> still tempted to rewrite it
[15:50:37] <shka> fucking yes
[15:51:03] <shka> the problem with python
[15:51:10] <shka> is that you don't program in python
[15:51:26] <shka> you use python as interface for the libraries
[15:51:29] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/iRYJJqqNVHPOIEdPbhUDfghF/brucha.jpeg >
[15:51:35] <shka> and if you are out of libraries, you are out of luck
[15:51:41] <hayley> TFW you serialise the object but it doesn't serialise the class too
[15:53:06] <shka> and the problem with this approach is
[15:53:12] <dave0> nite all
[15:53:17] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:53:22] <shka> that sometimes, library can't exist because you just invented something
[15:54:01] <shka> so in summary, the more time you have allocated into a project, the better idea lisp is
[16:06:10] <selwyn> hm
[16:06:32] <selwyn> well, that is exactly why lisp was a success for me
[16:06:43] <selwyn> research domain
[16:06:57] *** Joins: occ (~occ@user/occ)
[16:07:09] <selwyn> don't think i would have been as quick with obtaining results with any other language
[16:08:10] <selwyn> what i should have done wrt plotting is simply use common lisp to generate data files
[16:08:17] <selwyn> and write the plotting scripts in gnuplot language
[16:10:18] <gilberth> Do Perl closures also close over labels? A first test seems to imply that.
[16:12:23] <gilberth> Lexically, I mean. Which they don't. A pity.
[16:13:37] <gilberth> So "goto" behaves more like THROW.
[16:16:13] <shka> uh
[16:17:26] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[16:18:04] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[16:22:55] <gilberth> Yes, see <http://clim.rocks/gilbert/goto.pl.txt> The closure when invoked jumps to the "wrong" label. That is the dynamically visible one, not the lexical one.
[16:23:27] <shka> odd choice
[16:24:23] <gilberth> Yes, also since otherwise closures are lexical with regard to variables, which - to be honest - does surprise me.
[16:24:56] <shka> yes
[16:26:38] <gilberth> As you may have noticed, I am bored.
[16:28:38] <shka> and you could have been programming in CL, making parquet library :D
[16:30:10] <gilberth> I'd rather release my CLEX scanner generator and RE matcher. So that reading CSV files becomes less a dozen lines and blazing fast.
[16:32:00] <gilberth> My pet project is my tiny, tiny core Lisp, which I have implementations in BASIC, C, Go, PostScript, and JavaScript so far. Perl could be next. I would need to spec that and boot CL upon that.
[16:33:16] <contrapunctus> gilberth: the successor to kanaka's MAL (Make A Lisp)... gilberth 's MACL - Make A Common Lisp üòè
[16:35:06] <gilberth> Well, lisp500 got pretty far into being CL. Albeit my "core Lisp" is much smaller, having only QUOTE, IF, LAMBDA, SETQ, and CATCH/THROW.
[16:35:38] <contrapunctus> where defmacro
[16:35:43] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:36:28] <gilberth> contrapunctus: That's part of the minimal compiler, you could stick around in "user space".
[16:37:11] <contrapunctus> ü§î
[16:38:15] <gilberth> That is, instead of (loop (print (eval (read)))) have (loop (print (eval (macroexpand-full (read)))) -- Set.
[16:39:40] <gilberth> And you really want this minimal compilation, because expanding macros over and over again is very slow.
[16:41:04] <shka> gilberth: that would be a awesome nice
[16:42:08] <contrapunctus> <insert 5 buff doge> beach: _making a Lisp implementation and an OS_ jackdaniel: _maintaining a CLIM implementation_ borodust: _making a C++ autowrapper and game engine_ gilberth: _writing a minimalisp in everything_ hayley: _dancing with GCs_
[16:42:29] <contrapunctus> <cheems> contrapunctus: _making their first web app_ üòÇ
[16:43:08] <gilberth> You forgot, that I am also working on a CLIM implementation in secret.
[16:43:44] <contrapunctus> gilberth: oh, I always wondered how you were so knowledgeable about CLIM üòÄ
[16:44:20] <gilberth> Comes with time. I started hacking a CLIM implementation in last century.
[16:44:31] <shka> well, i personally wonder why my CSV parser is not exactly ideal
[16:44:52] <Gnuxie> Some of his,code is still in McCLIM
[16:45:45] <gilberth> Yep, actually it's not just some.
[16:46:29] <shka> https://github.com/sirherrbatka/vellum-csv/blob/performance/src/csv.lisp#L189 
[16:46:30] -ixelp- vellum-csv/csv.lisp at performance ¬∑ sirherrbatka/vellum-csv ¬∑ GitHub
[16:46:59] <shka> gilberth: you have some tips? i've managed to improve the performance significantly, but it still lags behind 
[16:47:39] <gilberth> Gnuxie: Transformations, regions, gadgets, panes, most part of the CLX backend, Cairo, FreeType, formatting macros (tables, graphs, etc). Have I forgot anything?
[16:47:59] <gilberth> shka: I'll have a look.
[16:48:17] <shka> it is modified version of fare-csv
[16:48:23] <shka> with buffered streams
[16:48:43] <shka> and plenty of other minor details
[16:51:00] <gilberth> shka: You need to deal with quotes?
[16:51:10] <shka> yes
[16:51:51] <gilberth> shka: ok. I'll be back later, afk for a while.
[16:51:59] <shka> have a nice day
[17:03:24] <selwyn> going to have a shave today
[17:07:36] <gilberth> shka: Ok. To be really fast, you want to scan for either #\, #\" or #\newline directly at in the buffer, with a tight loop with just (CHAR BUFFER P). Keep start and end positions of the field in question. If you want to go the easy route, inhale the whole file into one string.
[17:08:04] <contrapunctus> gilberth: so why a new implementation rather than McCLIM? ü§î I can't imagine it being an easy task, writing a new one from scratch...
[17:08:47] <shka> gilberth: i would rather not load the whole file into string... but i will think about it 
[17:09:10] <gilberth> shka: Otherwise, you need buffer management. Seek for #\, or #\newline below the end of the buffered data, shift the buffer so that your current START is still there, fill the rest with need data after ensuring a certain minimal room left, and continue.
[17:10:06] <shka> well, i can also make sure that buffer is big enough for the whole line
[17:10:14] <shka> maybe
[17:10:16] <shka> or not
[17:10:19] <gilberth> contrapunctus: To be brief: Overall design and license. Both are not what I imagined, especially the former, so I started from scratch.
[17:10:46] <gilberth> shka: Newlines could also be within #\"s.
[17:10:53] <contrapunctus> I see ü§î 
[17:10:58] <shka> yeah, good point
[17:12:09] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[17:12:14] *** Quits: jmercouris (sid438340@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[17:12:28] <gilberth> However, when you have such a scanning to find START and END of a field, you could subject that subseq to other parsers, in cause you want to parse, say, numbers. Look ma, no copy!
[17:13:47] <shka> yeah, i thought about that as well
[17:14:13] <shka> ok, so let me make sure that i understand this correctly 
[17:14:37] <shka> the idea is that i will avoid checking multiple times if something is a quote or EOL
[17:15:36] <gilberth> Kind of, that's not the crucial point.
[17:16:02] <shka> what is?
[17:17:08] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:17:51] <gilberth> shka: Say you have a buffer BUFFER, with it's end of valid data pointer FPTR, and a current position P, you want a tight loop like (loop (when (= p fptr) (unterflow)) (let ((c (char buffer p))) (incf p) (case c (#\, ...) (#\newline ...) (#\" ...))))
[17:20:07] <gilberth> The tricky part is UNDEFLOW. Remember the start of the field in a variable START. When you reach the end of buffered data, say (replace buffer buffer :start2 start :end2 p) (decf p start) (setf start 0) (read-sequence buffer stream :start start)
[17:21:17] <gilberth> Before read-sequence, say (unless (> (- (length buffer) start) +minimum-room+) (setq buffer (adjust-array buffer (+ (length buffer) +minimum-room+))), to make sure there is room for more input at all.
[17:22:12] <gilberth> Then, when you are at the #\, or #\newline clause, you have a field in (SUBSEQ BUFFER START P), you could parse further or stash.
[17:22:41] <gilberth> You could prototype with reading a whole string.
[17:24:17] <gilberth> And leave the buffer management for later.
[17:25:15] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[17:26:48] <gilberth> Tricky part is how to deal with "" within "'s.
[17:45:32] <shka> yes, this is the 90% of csv pain
[17:46:04] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[17:53:26] <gilberth> shka: <http://clim.rocks/gilbert/tiny-csv-no-dquote.lisp>
[17:54:53] <shka> well, thanks
[17:55:01] <shka> but quotes are a must
[17:58:58] <gilberth> Well, I just wanted to show you the general idea and buffer management. Adding quotes shouldn't be too hard.
[18:00:03] <shka> i think i need some rest because it does not make sense to me right now
[18:00:15] <shka> i will take a look at that with fresh mind
[18:00:47] <gilberth> What is a,b",c",d? That is quotes not around the entire field?
[18:22:48] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 268 seconds)
[18:23:33] *** Joins: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394)
[18:31:22] *** Joins: Inline (~Inline@aftr-37-201-240-87.unity-media.net)
[18:33:52] *** aeth_ is now known as aeth
[18:34:40] <shka> gilberth: i would reckon fields
[18:34:42] <shka> a
[18:34:45] <shka> b"c"
[18:34:47] <shka> d
[18:35:32] <gilberth> Yep, this is what the RFC says. But in practice you find all sorts of create uses of the CSV file format.
[18:35:45] <shka> yes
[18:35:54] <shka> csv is a can of worms
[18:36:16] <pjb> gilberth: https://termbin.com/g8ey
[18:36:20] <gilberth> Excel even allows formula in CSV files.
[18:37:31] <gilberth> pjb, shka: I was mistaken about the double quote. I believe pjb's implementation does the right thing.
[18:39:11] <gilberth> Anyway, in practice I have seen more semicolon separated files than comma separated. Perhaps because "," is used as a decimal point here? idk
[18:40:04] <pjb> a,b,",c",d --> ("a" "b" ",c" "d")
[18:40:25] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[18:40:27] <pjb> gilberth: that's why it's a parameter of my parser.
[18:41:02] <gilberth> Yes, either " around the whole field, or not special. And "" to escape a " within a string literal.
[18:41:06] <pjb> (load-records "file.csv" :field-separator #\; :decimal-point #\,)  even (load-records "file.csv" :field-separator #\tab :decimal-point #\.)
[18:41:28] <gilberth> pjb: Mine has that too, together with a couple of other tweaks.
[18:42:25] <White_Flame> there's a reason we used the ascii field separator control character instead of commas in some of our textual files
[18:42:32] <gilberth> You believe you have a CSV reader, until somebody pops up with yet another variant.
[18:43:34] <gilberth> White_Flame: The FS and RS chars?
[18:43:39] <White_Flame> yep
[18:43:53] <White_Flame> field & group separators, right?
[18:44:02] <gilberth> Yep. Hey, I didn't expect that.
[18:44:19] <White_Flame> ah right, file/group/record/unit
[18:44:28] *** Joins: rogersm (~rogersm@90.166.177.48)
[18:46:17] <gilberth> White_Flame: Yes. How come I believed FS = field separator?
[18:46:51] <White_Flame> probably because I said "field" here first? :-P
[18:46:57] <gilberth> Anyhow, good use of some of those otherwise useless control characters.
[18:48:22] *** Joins: ln43 (~ln43@user/ln43)
[18:49:02] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:55:09] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[18:56:32] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:57:32] <White_Flame> I'm not sure about "useless", as these are literally the use they're intended for ;)
[18:57:46] <ln43> Hello White_Flame
[18:58:04] <White_Flame> re
[19:01:39] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 268 seconds)
[19:01:48] <shka> US is recommended for splitting columns
[19:02:15] <gilberth> Ah, and for rows?
[19:02:25] <shka> i don't know about that
[19:03:33] <shka> but that's ok, rows are a lesser problem
[19:05:15] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[19:11:34] <sham1> Field separator is a nice thing in ASCII for this very reason. Tabs is also a common one, although that might require some escaping with strings
[19:11:40] <White_Flame> unit = field, record = row
[19:11:54] <White_Flame> group & file separators have no real analog in csv files
[19:12:41] <White_Flame> sham1: yeah, the point is to have non-typable characters in there.  Tabs can still be literally entered in many editors, and we ignore the Alt-<number> input
[19:32:13] *** Quits: APic (apic@apic.name) (Quit: [TLS] Client upgrade)
[19:32:32] *** Joins: APic (apic@apic.name)
[19:40:58] *** Joins: pl (sid98063@helmsley.irccloud.com)
[19:58:58] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[20:11:08] <gilberth> shka: Did I mention, that I'm bored? <http://clim.rocks/gilbert/tiny-csv-with-dquote.lisp>
[20:11:21] <shka> yes you did
[20:11:36] <shka> well, maybe i should benchmark this bad boy?
[20:12:08] <gilberth> Do, if you wish. How large are your CSV files actually?
[20:13:26] <selwyn> why are csv files so popular
[20:14:17] <sham1> Simple
[20:14:17] <shka> because they are easy, can be edited in a text file
[20:14:20] <sham1> Well "simple"
[20:16:28] <shka> gilberth: depends, some can be really large
[20:16:39] <shka> and your parser runs significantly faster 
[20:18:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:18:43] <shka> gilberth: can i just use it? I will add parameters like separator character, quote character and perhaps different EOL
[20:19:07] <gilberth> Ok. SBCL trips on inlining the recursive function READ-FIELD, but otherwise reads without consing at 98MB/s, which is poor.
[20:20:06] <sham1> Reading the code it does look somewhat like what one probably would write in C
[20:20:23] <White_Flame> you can inline recursive functions, just declare them notinline on the inside
[20:20:53] <gilberth> shka: Here you go, I added a license. <http://clim.rocks/gilbert/tiny-csv-with-dquote.lisp>
[20:21:16] <shka> thanks!
[20:21:39] <gilberth> White_Flame: That should do, yep.
[20:25:47] *** Joins: Catie (~user@user/catie)
[20:26:23] <gilberth> White_Flame: Doesn't. I said (locally (notinline read-field) ...) and SBCL complains.
[20:28:03] <White_Flame> (defun foo () (declare (notinline foo)) ...) ?
[20:30:05] <gilberth> Odd. Why isn't that working with LOCALLY? Am I not supposed to turn off inlining just for some code?
[20:32:59] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[20:44:39] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[20:45:05] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[20:48:40] <gilberth> shka: Please update. I updated the file: BUFFER is actually declared as a (SIMPLE-ARRAY CHARACTER (*)), READ-FIELD-DQUOTE for quoted fields, to allow READ-FIELD been inlined. The former is not recursive anymore and would allow for the lexical variables to be unboxed. It's at 187MB/s, which ought to be suffice, I believe.
[20:49:29] <shka> at once!
[20:49:56] <gilberth> Not twice?
[20:50:53] <gilberth> Please report any bugs, you may find, so I could fix the code.
[20:56:29] <gilberth> Handling of quoted material could be faster still.
[21:04:41] <shka> i think that this may no longer benefit from further optimization
[21:05:58] <shka> because i am getting bottlenecked in other area 
[21:06:09] <gilberth> Good that hayley is perhaps asleep, she would suggest SIMD.
[21:06:12] <shka> on my benchmark file, your code is only 10% faster
[21:06:25] <gilberth> Ok.
[21:07:16] <gilberth> So, what's the expensive part then?
[21:09:16] <shka> well, i am building a data structure out of the data, plus i am converting those strings into numbers and what not
[21:09:55] <shka> suffice to say, CSV parsing is no longer a bottleneck
[21:09:57] <gilberth> Ok. Yes, parsing floats is surprisingly slow.
[21:10:40] <shka> indeed
[21:12:34] <shka> gilberth: https://github.com/sirherrbatka/vellum-csv/commit/19adfcb84a05f4ad0a2315f68f6cbe0b54ce40d3
[21:12:35] -ixelp- replaced FARE-CSV reader with read-csv provided by gilberth. ¬∑ sirherrbatka/vellum-csv@19adfcb ¬∑ GitHub
[21:13:27] <shka> i had to remove those extra options i had, but this is but a small price to pay
[21:17:19] <shka> maybe i can improve by avoiding copying
[21:18:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[21:18:58] <shka> i mean, we are collecting (subseq buffer start p)
[21:19:16] <shka> i could easily call my own convert function instead here
[21:27:50] <selwyn> why the name vellum
[21:29:50] *** Quits: lexi_sparks (~lexi_spar@user/lexi-sparks/x-9241394) (Ping timeout: 260 seconds)
[21:32:17] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:32:22] <gilberth> shka: Yes, that was my idea, you just pass the buffer and start and end offsets to your custom field parser.
[21:32:34] <shka> i did just that
[21:32:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:32:53] <gilberth> did it help?
[21:36:40] <shka> yeah, it reduced GC time 
[21:38:19] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:39:04] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:46:07] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:51:51] *** Joins: notzmv (~zmv@user/notzmv)
[21:53:05] *** Quits: X-Scale (~ARM@31.22.202.101) (Ping timeout: 246 seconds)
[21:53:40] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:54:51] *** X-Scale` is now known as X-Scale
[22:34:14] <shka> ok
[22:34:26] <shka> down to 5 seconds
[22:34:30] <shka> from initial 60
[22:34:50] <sham1> That's pretty good
[22:34:54] <shka> gilberth: thanks, i would never guessed how to write such efficient parser
[22:35:06] <shka> however, i still don't feel why it is so good
[22:35:18] <shka> is it just because of no big jumps?
[22:35:26] <sham1> Reducing allocations usually does do that. Also yeah, you could have instruction locality
[22:36:00] <shka> well, my parser also did not cons all that much honestly
[22:36:20] <shka> i simply allocated buffers for columns and then i was reusing those
[22:37:35] <gilberth> shka: It's because the loop looking for comma or newline is tight.
[22:37:47] <shka> what does that mean?
[22:37:56] <shka> and why it matters?
[22:38:13] <shka> i am not low level person despite my background in C++
[22:38:14] <gilberth> You want to reduce the per-char work, don't you?
[22:39:12] <shka> well, do i? :-)
[22:39:34] <gilberth> Look at the code, it basically is (loop do (when (= p fptr) (underflow)) until (member (char buffer p) '(#\, #\newline)) do (incf p))
[22:40:34] <gilberth> That's just about a dozen cycles per char to skip. The buffer underflow happens seldom.
[22:41:26] <gilberth> And, there is a good chance that p, buffer, and fptr could be kept in registers.
[22:44:44] <shka> let me think about it
[22:46:45] <shka> gilberth: i think that i may bother you about this some other day, somehow i struggle to understand
[22:46:47] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:46:52] <shka> yet i can't argue with the result
[22:47:09] <gilberth> shka: Sure, you know where to find me.
[22:59:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:04:10] *** Joins: drbluefall (~drbluefal@pool-162-83-177-90.nycmny.fios.verizon.net)
[23:14:08] <Gnuxie> gilberth: did you say you liked winter more than summer?
[23:16:45] <Gnuxie> it's like not even been a week of the clocks moving and I'm not handling this well 
[23:26:59] <shka> i wish i could work with more experienced programmers 
[23:27:08] <shka> then myself
[23:31:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:31:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:39:23] <shka> gilberth: i think that the only thing that is missing is support for the escaped quotes
[23:39:45] <shka> but i can hack this in myself
[23:39:49] <shka> i hope :-)
[23:40:13] <mfiano> Hi all. I am thinking about getting back into coding today! It's been too long
[23:40:14] <APic> B-)
[23:40:23] * APic laughs magically.
[23:40:28] <sham1> Coding is always nice
[23:40:31] <APic> True.
[23:40:57] *** Quits: Inline (~Inline@aftr-37-201-240-87.unity-media.net) (Quit: Leaving)
[23:41:05] <mfiano> I just had a long discussion with someone about writing a graphical debugger for some of my texture synthesis algorithms, and I got some ideas now at least.
[23:41:30] <mfiano> I was taking some months off to think, but I guess I just needed a rubber duck
[23:44:59] <gilberth> shka: Have you tried: (read-csv "\"hello, \"\"there\"\"!\",100") ?
[23:45:16] <shka> hmmm, let me try that
[23:51:08] <shka> gilberth: yeah, it is incorrect
[23:51:25] <shka> hello,"\"there",100 this (not a lisp syntax) will error out
[23:51:34] <shka> notice how the inner quote is escaped
[23:52:02] <gilberth> Quotes are usually escaped by doubling them. Like in Pascal.
[23:52:58] <gilberth> But that ought to be easy to fix, if you face files using the backslash.
[23:54:53] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (Remote host closed the connection)
[23:54:55] <gilberth> So what is foo\,bar then? Joys of the CSV file format, everyone is doing sth different.
[23:55:53] <shka> yeah, exactly
[23:59:14] <sham1> Joys of the CSV file format, or really any format where datum aren't preceeded by their length but are delimited by some stuff
