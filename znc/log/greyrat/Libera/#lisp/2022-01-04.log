[00:00:04] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:03:25] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[00:07:23] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[00:21:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:24:19] <jackdaniel> the-other-guy? :)
[00:25:55] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:31:42] <contrapunctus> Coalton program in Emacs? Excuse me what the heck
[00:36:54] <edgar-rft> probably Emacs smoked like a ton of coal
[00:39:28] *** Joins: karlosz (~karlosz@136.56.98.53)
[00:41:40] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:43:02] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:47:57] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[00:51:51] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:52:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:53:23] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:54:05] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[00:57:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[00:59:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:01:11] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[01:01:15] *** Joins: slbtty (~slbtty@2607:fea8:1d40:800::3efa)
[01:01:54] *** slbtty is now known as shenlebantongyin
[01:01:58] *** shenlebantongyin is now known as slbtty
[01:15:36] *** ouestbillie is now known as vanDamme
[01:16:47] *** vanDamme is now known as ouestbillie
[01:25:56] *** Joins: nobodynogroup (~user@199.233.245.81)
[01:47:33] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[01:54:34] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e5a0:a671:8449:d16c)
[01:55:59] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:387d:2db3:fff8:a6ab)
[01:59:03] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: Textual IRC Client: www.textualapp.com)
[01:59:31] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:e5a0:a671:8449:d16c) (Ping timeout: 245 seconds)
[02:01:01] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[02:02:37] *** Joins: dra (~dra@2a04:4540:6415:6700:4d97:d40b:359e:eb21)
[02:04:45] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[02:07:19] *** Quits: dra (~dra@2a04:4540:6415:6700:4d97:d40b:359e:eb21) (Client Quit)
[02:13:09] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[02:16:26] *** Joins: KvL (~KvL@user/KvL)
[02:19:17] *** Joins: xiews (~wxie@101.93.17.62)
[02:21:33] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[02:21:51] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[02:21:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[02:25:31] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Quit: WeeChat 3.4)
[02:29:07] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:387d:2db3:fff8:a6ab) (Read error: Network is unreachable)
[02:37:26] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:41:20] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[02:43:45] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 256 seconds)
[02:45:33] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[02:45:55] *** Joins: galex-713 (~quassel@galex-713.eu)
[02:46:14] *** Joins: dra (~dra@2a04:4540:6415:6700:7175:599:d6b8:58a1)
[02:59:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:05:37] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[03:05:57] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[03:12:34] *** Joins: mrmr (~mrmr@user/mrmr)
[03:15:05] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[03:15:42] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:39a4:4154:9964:3167) (Remote host closed the connection)
[03:20:51] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[03:21:35] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:24:40] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[03:25:07] *** Quits: xiews (~wxie@101.93.17.62) (Ping timeout: 256 seconds)
[03:25:18] *** Joins: xiews (~wxie@2409:891e:1146:555:a909:286d:f3cc:df02)
[03:29:50] *** Quits: jeffrey (~jeffrey@2001:1c00:b1c:4100::ff16) (Quit: Client quit)
[03:34:19] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[03:34:53] *** Joins: dra_ (~dra@2a04:4540:6419:b700:7175:599:d6b8:58a1)
[03:37:17] *** Quits: dra (~dra@2a04:4540:6415:6700:7175:599:d6b8:58a1) (Ping timeout: 240 seconds)
[03:38:49] *** Quits: xiews (~wxie@2409:891e:1146:555:a909:286d:f3cc:df02) (Read error: Connection reset by peer)
[03:38:59] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[03:39:33] *** Joins: xiews (~wxie@2409:891e:1146:555:a909:286d:f3cc:df02)
[03:42:51] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[03:50:56] *** Quits: dra_ (~dra@2a04:4540:6419:b700:7175:599:d6b8:58a1) (Quit: Leaving)
[03:52:31] *** Joins: karlosz (~karlosz@136.56.98.53)
[03:55:07] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[03:56:03] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[03:56:20] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Client Quit)
[03:59:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:11:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:14:22] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[04:20:07] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[04:21:58] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:25:07] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[04:27:57] *** Quits: xiews (~wxie@2409:891e:1146:555:a909:286d:f3cc:df02) (Ping timeout: 240 seconds)
[04:29:14] *** Joins: xiews (~wxie@2409:891e:9160:57a:71bd:c3df:f2ba:5e64)
[04:33:49] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 256 seconds)
[04:42:37] *** Quits: xiews (~wxie@2409:891e:9160:57a:71bd:c3df:f2ba:5e64) (Ping timeout: 240 seconds)
[04:43:32] *** Joins: xiews (~wxie@124.77.94.254)
[04:46:28] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Error))
[04:47:05] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[04:51:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:58:37] *** Joins: Everything (~Everythin@37.115.210.35)
[05:01:35] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Ping timeout: 256 seconds)
[05:07:19] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[05:08:02] *** Joins: gproto23 (~gproto23@user/gproto23)
[05:13:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[05:15:54] *** Joins: aeth (~aeth@user/aeth)
[05:20:55] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[05:40:03] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[05:54:17] *** Joins: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[05:56:08] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[05:59:19] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[05:59:49] *** Quits: MrMobius_ (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[06:00:39] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[06:00:40] <jcowan> In R7RS world, I am the Chief Cook and Bottle Washer
[06:02:51] *** Joins: livoreno (~livoreno@user/notzmv)
[06:04:21] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[06:14:34] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:18:03] *** Joins: evocatus (~evocatus@62.182.77.224)
[06:21:29] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[06:21:55] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 256 seconds)
[06:34:38] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 252 seconds)
[06:35:25] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:39:03] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[06:39:28] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[06:55:58] <White_Flame> in the CL world, I am the Premier Cobweb Polisher
[07:02:10] * jcowan chuckles
[07:02:45] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[07:02:46] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[07:02:56] <jcowan> #'foo (function foo) in CL is unrelated to #'foo (syntax foo) in R6RS Scheme
[07:08:27] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:09:26] *** Joins: notzmv (~zmv@user/notzmv)
[07:12:41] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:33] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:27:44] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[07:44:39] *** Quits: xiews (~wxie@124.77.94.254) (Ping timeout: 256 seconds)
[07:46:43] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[07:47:24] *** Joins: xiews (~wxie@2409:891e:9160:57a:6a7a:664c:a9ea:af0f)
[07:50:53] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[08:06:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:09:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:12:19] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[08:12:46] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:23:19] *** Joins: holycow (~rtaylor@69-172-184-139.cable.teksavvy.com)
[08:50:13] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 240 seconds)
[08:54:13] *** Joins: karlosz (~karlosz@136.56.98.53)
[09:15:57] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:22:04] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[09:35:43] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 256 seconds)
[09:58:59] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[09:59:16] *** Joins: karlosz (~karlosz@136.56.98.53)
[09:59:48] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[10:01:26] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[10:01:38] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[10:02:17] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[10:05:53] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[10:07:34] *** Quits: KvL (~KvL@user/KvL) (Quit: KvL)
[10:13:07] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[10:16:49] *** Joins: thomasb06 (~thomasb06@leat141.unice.fr)
[10:22:57] <contrapunctus> and in the Clojure world? 🤔
[10:27:10] *** Quits: thomasb06 (~thomasb06@leat141.unice.fr) (Read error: Connection reset by peer)
[10:31:13] *** Joins: thomasb06 (~thomasb06@leat141.unice.fr)
[10:37:48] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[10:43:13] *** Joins: Jing_ (~hedgehog@2604:a840:3::103c)
[10:45:59] *** Quits: thomasb06 (~thomasb06@leat141.unice.fr) (Ping timeout: 256 seconds)
[10:46:17] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Ping timeout: 240 seconds)
[11:02:05] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[11:04:23] *** Joins: KvL (~KvL@user/KvL)
[11:06:00] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:11:00] *** Joins: sunset_NOVA (~sunset_NO@p200300f0870ab9008967795cd8053430.dip0.t-ipconnect.de)
[11:14:05] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[11:18:09] *** Joins: thomasb06 (~thomasb06@leat141.unice.fr)
[11:19:01] *** Quits: Jing_ (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:24:53] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[11:25:05] *** Joins: shka (~herr@109.231.0.226)
[11:30:19] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 256 seconds)
[11:46:13] *** Quits: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr) (Remote host closed the connection)
[11:47:31] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:57:57] <wasamasa> they hardly use quote, lol
[11:58:02] <wasamasa> backquote if anything
[11:58:43] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:16:24] *** Joins: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr)
[12:18:56] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[12:26:20] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[13:13:33] *** Joins: jeffrey (~jeffrey@2001:1c00:b1c:4100::ff16)
[13:13:50] *** Joins: rtypo (~alex@user/rtypo)
[13:15:09] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[13:15:44] *** Joins: amb007 (~a_bakic@28.37.22.93.rev.sfr.net)
[13:20:31] *** Quits: thomasb06 (~thomasb06@leat141.unice.fr) (Remote host closed the connection)
[13:25:56] *** Quits: amb007 (~a_bakic@28.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:26:29] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:30:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[13:31:05] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:37:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[13:38:34] *** Joins: amb007 (~a_bakic@28.37.22.93.rev.sfr.net)
[13:58:50] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[13:59:39] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[14:00:35] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:01:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:01:52] *** Lord_of_Life_ is now known as Lord_of_Life
[14:06:43] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:16:48] *** Quits: amb007 (~a_bakic@28.37.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:17:13] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:21:53] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[14:22:24] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:22:26] *** Joins: biog (~user1@159.224.42.85)
[14:27:07] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[14:27:14] *** Joins: amb007 (~a_bakic@28.37.22.93.rev.sfr.net)
[14:34:57] *** Joins: thomasb06 (~thomasb06@leat141.unice.fr)
[14:52:29] *** Quits: amb007 (~a_bakic@28.37.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[14:53:25] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:55:49] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[14:58:57] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 240 seconds)
[15:13:15] *** Joins: dmgk (~dmgk@user/dmgk)
[15:18:06] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[15:25:37] *** Quits: xiews (~wxie@2409:891e:9160:57a:6a7a:664c:a9ea:af0f) (Ping timeout: 240 seconds)
[15:25:53] *** Joins: xiews (~wxie@101.93.17.62)
[15:32:17] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[15:38:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[15:38:51] *** Joins: amb007 (~a_bakic@31.245.204.77.rev.sfr.net)
[15:38:54] *** Joins: beagles (~beagles@142.162.188.116)
[15:47:33] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[15:52:04] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[15:55:01] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 240 seconds)
[15:56:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:07:19] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f5:37d:9ac:c716:7577:64d4)
[16:12:02] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[16:15:06] *** Joins: thevishy (~Nishant@2405:201:f005:c007:3c5f:229d:dc3f:da32)
[16:17:39] *** Quits: amb007 (~a_bakic@31.245.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[16:18:06] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[16:24:55] *** Quits: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr) (Read error: Connection reset by peer)
[16:25:19] *** Quits: KvL (~KvL@user/KvL) (Quit: KvL)
[16:28:35] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3c47:5b36:444:8126)
[16:28:35] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3c47:5b36:444:8126) (Changing host)
[16:28:35] *** Joins: skapata (~Skapata@user/skapata)
[16:30:04] *** aoh___ is now known as aoh
[16:30:33] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:41:54] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:43:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: -now)
[16:44:46] <mfiano> Hmm?
[16:45:00] <mfiano> #'foo is a thing in Clojure too, also unrelated to both
[16:45:04] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:45:21] <moon-child> lol
[16:46:06] <wasamasa> yeah
[16:46:17] <wasamasa> https://clojure.org/reference/reader
[16:46:19] <wasamasa> var quote
[16:46:58] <wasamasa> I guess it allows you to refer to a var by its name?
[16:47:13] <wasamasa> weird stuff
[16:47:51] <mfiano> Well a var is a function that looks up its value
[16:49:27] <mfiano> and yes, the language is much too weird for me.
[16:49:34] <wasamasa> never used that feature
[16:50:18] <mfiano> defn returns a var
[16:51:32] <mfiano> i never fully understood it myself, and just chalked it up to a lisp1 realizing it should have been a lisp2
[16:52:06] <wasamasa> um
[16:52:17] <wasamasa> do you know of any recently developed lisp that chose to be a lisp-2?
[16:52:23] <moon-child> txr
[16:52:27] <wasamasa> oh right
[16:52:33] <wasamasa> txr does have a bunch of neat ideas
[17:00:33] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:04:09] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[17:05:52] *** Joins: strajder (~strajder@user/strajder)
[17:09:56] *** Joins: Alfr (~Alfr@user/alfr)
[17:10:29] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[17:12:00] *** Joins: galex-713 (~quassel@galex-713.eu)
[17:21:49] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 240 seconds)
[17:23:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:28:44] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:38:09] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[17:38:21] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[17:38:35] *** Joins: amb007 (~a_bakic@31.245.204.77.rev.sfr.net)
[17:42:04] *** Quits: amb007 (~a_bakic@31.245.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[17:42:09] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:19df:3c96:615a:7101)
[17:43:07] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[17:46:52] *** Quits: dextaa (~DV@user/dextaa) (Quit: Leaving)
[17:47:10] *** Joins: rtypo (~alex@user/rtypo)
[17:47:54] *** Joins: dextaa (~DV@user/dextaa)
[17:48:09] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[17:48:11] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[17:48:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:52:41] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 256 seconds)
[17:56:45] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:57:25] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[18:02:44] *** Joins: unyu (~pyon@user/pyon)
[18:03:48] *** raeda_ is now known as raeda
[18:07:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:12:01] *** Quits: sunset_NOVA (~sunset_NO@p200300f0870ab9008967795cd8053430.dip0.t-ipconnect.de) (Quit: Leaving)
[18:12:38] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[18:16:58] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[18:34:38] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[18:35:37] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Read error: Connection reset by peer)
[18:44:51] *** Quits: shka (~herr@109.231.0.226) (Read error: Connection reset by peer)
[18:46:02] *** Joins: cranium (~cranium@user/cranium)
[18:48:36] *** Joins: shka (~herr@109.231.0.226)
[18:53:07] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[18:53:15] *** Quits: xiews (~wxie@101.93.17.62) (Remote host closed the connection)
[18:58:42] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[18:59:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[18:59:34] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f5:37d:9ac:c716:7577:64d4) (Read error: Connection reset by peer)
[19:01:33] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[19:02:36] *** Joins: morte_ (~user@190.104.116.153)
[19:03:50] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:04:56] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[19:05:36] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[19:05:55] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:19df:3c96:615a:7101) (Remote host closed the connection)
[19:06:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:13:35] *** Quits: morte_ (~user@190.104.116.153) (Remote host closed the connection)
[19:21:03] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:443f:3e79:f513:1a13)
[19:29:53] *** Joins: eddof13 (~textual@177.241.57.17)
[19:34:46] *** Joins: morte_ (~user@190.104.116.153)
[19:46:19] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[19:47:54] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[19:51:38] *** Quits: thevishy (~Nishant@2405:201:f005:c007:3c5f:229d:dc3f:da32) (Quit: Leaving)
[19:58:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[19:59:44] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:00:02] <nij-> Hello! In P. Graham's /Root of Lisp/, he defines the 7 special-ops and how the function works. Then he goes on defining the mighty `eval`. .. Well, I feel like something is deep going on, but I also feel a bit pointless. The functionality of `eval` has been present before it's defined, so why do we bother defining it explicitly in lisp? And why should we treat such definition as a surprise (as put in the document)?
[20:00:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:00:26] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[20:01:01] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[20:02:01] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:02:30] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[20:03:35] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:59a5:eb97:f79e:ca72)
[20:06:19] <nij-> In particular, in section 2 we already know how functions work. But in section 5, he goes ".., that actually implements our language, and then using that (eval) we can define any additional function we want."
[20:06:22] <aap> nij-: the way he builds it up eval does not exist yet and he manages to bootstrap it from just the 7 primitive functions
[20:06:58] <nij-> But in fact even without the definition of eval, we already could define functions and watch them working (section 2).
[20:07:39] <aap> well it's an academic exercise but you can actually bootstrap the language from this in some other language, say assembly
[20:07:46] <nij-> aap: I find that confusing. It's not just the 7 primitive functions, it's also about what's introduced in section 2, namely, how a list whose car is a lambda form will evaluate to.
[20:08:55] <aap> that's just defining what the semantics *should* be
[20:09:07] <nij-> But with that, already we have a lisp. We do not need `eval` to go on and define other functions. That's why I'm confused.
[20:09:48] <aap> imagine you already have some system that can parse s-expressions
[20:09:59] <aap> but they have no semantics yet
[20:10:26] <aap> what he does in the article is define the semantics
[20:11:25] *** Quits: thomasb06 (~thomasb06@leat141.unice.fr) (Quit: see you tomorrow)
[20:11:34] <aap> of course you cannot write eval in lisp itself without having some kind of lisp to eval eval
[20:11:53] <aap> but if you look at the definition you can see it should be fairly simple to translate this to machine language by hand
[20:12:11] <aap> which is exactly how the first lisp system was created
[20:12:23] <nij-> I do think that 7ops+lambda is enough is amazing. But I don't know why `eval` plays such a huge role.
[20:12:48] <aap> because without it you have no semantics, no programming language
[20:13:01] <nij-> The semantics was given in the first and the second chapter (special ops and how lambdas work).
[20:13:57] <nij-> And after the definition of `eval`, we cannot simply through the semantics given in sec1+2 away. Because to make sense of the definition of eval, we need them.
[20:13:59] <aap> just saying what the semantics are doesn't mean you have a computer program that implements that
[20:14:25] <nij-> So that's what I'm confused about. It seems that `eval` is not essential to me. What's essential had been given before it.
[20:15:09] <aap> sure you don't strictly need eval for lisp (or something lisp-like). this was also the original plan. to write a complex compiler that compiles lisp code into machine code
[20:15:15] <aap> but that would have taken ages to implement
[20:15:54] <aap> instead they formulated how to express lisp code as lisp data (s-expressions) and defined a function that takes a lisp expression as input and interprets it
[20:16:22] <nij-> I know lisp and s-exprs are minimal and fantastic. What I'm confused with is eval, and why PG made it a big deal.
[20:16:24] <aap> it turned out implementing this in machine language was simple enough and they quickly had a lisp interpreter working
[20:16:43] <nij-> Again.. the semantics were given in chapter 1 and 2 already, before the def of eval.
[20:16:57] <nij-> Any implementation of that semantics gives a working lisp.
[20:17:14] <mfiano> meta circularity makes for circular conversations.
[20:17:22] <aap> in mccarthy's original paper eval and apply were only given as an academic exercise "look, we can describe our language in our language itself"
[20:17:33] <aap> but it turned out to be incredibly practical
[20:17:50] <aap> because they suddenly got a working lisp system out of it with very little effort
[20:19:02] <nij-> mfiano: ???
[20:19:22] <nij-> aap: it is the word "suddenly" that confuses me here.
[20:19:31] <aap> i agree that implementing lisp in lisp when you already have a lisp may not seem very interesting
[20:19:52] <aap> but if you don't already have a lisp, it becomes very interesting
[20:19:54] <nij-> I'm sure in Mccarthy's original paper things started working before eval and apply.
[20:20:19] <nij-> So the point that "we have a lang explaining itself" doesn't seem to give any thing new.
[20:20:30] <nij-> Or does it? I may be naive at this point. This is my main confusion.
[20:20:39] <aap> mccarthy's paper was written before they had a working lisp system
[20:20:51] <aap> maybe not the published version, that could have been slightly later
[20:21:01] <aap> but they were writing lisp code before thye had it implemented on a computer
[20:22:18] <nij-> By "working" I didn't mean that an implementation is working.
[20:22:32] <nij-> By "working" I meant the language semantics are well-defined already.
[20:22:54] <aap> yes, and eval is just expressing those semantics in the language itself
[20:23:02] <nij-> Yes.
[20:23:18] <aap> which means you can now compile eval by hand and run it
[20:23:37] <aap> and tada, you have lisp running on your computer
[20:23:46] <nij-> Lemme think..
[20:26:21] <aap> of course you also need some functions to turn your input characters into s-expression structures and you probably want a garbage collector as well, so in practice it'll be a bit more than 7 functions
[20:27:48] <nij-> I still think the amazing part is that we _merely_ need 7 special ops and how lambdas work.
[20:28:09] <nij-> After this semantics specification, we can write eval, yeah.
[20:28:22] <nij-> It's like.. in JavaScript, you can have an eval like this too.
[20:28:41] <nij-> The difference is going to be that the semantics is so complicated that the definition of JS's eval is quite long and ugly.
[20:29:19] <aap> the main problem is that javascript code is not javascript data
[20:29:19] <nij-> But the reason behind the succinctness of lisp's eval is exactly because the semantics of lisp is quite small; not because eval is itself amazing.
[20:29:29] <nij-> aap yeah
[20:29:33] <aap> the genius thing about lisp is representing code as data
[20:29:48] <nij-> and also in a minimal way
[20:30:01] <aap> which the same idea behind the von neumann computer really
[20:30:07] <nij-> block deliminators '(' ')', term deliminator ' '. That's it.
[20:30:12] <aap> i wonder if there are other languages for which this is true
[20:30:26] <nij-> Yes. It's called xml.
[20:30:29] <aap> forth could be a candidate
[20:30:36] <nij-> Though no one really use that as a language.
[20:31:05] <nij-> XML as a lisp-like lang: https://www.defmacro.org/ramblings/lisp.html
[20:31:06] <aap> ok not familiar with xml
[20:31:29] <nij-> The point is still making data as code in the most minimal way.
[20:31:44] <aap> i don't believe xml itself is executable code but i really have no idea what kinds of complexity they put into xml
[20:32:06] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[20:32:13] <dash[m]> uh... every programming language implementation succeeds in "representing code as data" 
[20:32:17] <nij-> It's not executable, but we can make it executable. It has the potential, because it also has "data = code".
[20:32:26] <nij-> What it lacks is the second point "minimal syntax"
[20:32:36] <dash[m]> smalltalk and self have even smaller semantics specifications btw
[20:32:56] <nij-> Good document to start reading about smalltalk? dash[m] ?
[20:33:28] <wasamasa> there's the infamous smalltalk business card
[20:33:39] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:33:54] <dash[m]> I forget what's good these days, the original is here http://stephane.ducasse.free.fr/FreeBooks/BlueBook/Bluebook.pdf
[20:34:26] <dash[m]> this section may be most salient http://www.mirandabanda.org/bluebook/
[20:34:50] *** Joins: Akiva (~Akiva@user/Akiva)
[20:35:10] <nij-> Doesn't seem as minimal as lisp..? Am I missing something?
[20:35:22] <nij-> Essentially, lisp only needs 7 special ops and how lambda works.
[20:37:00] <aap> what's with the 'how lambda works'? the lambda semantics are defined in eval
[20:37:17] <nij-> No. At least in /Root of Lisp/, it is given in section 2.
[20:38:31] <nij-> Section 3 gives some examples of functions and can be skipped. In section 4, `eval` is defined.
[20:38:43] <nij-> But to me, the article could just ended in section 2.
[20:38:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[20:38:59] <nij-> So I find that confusing.. sorry if I'm mistaken, but I do hope to get this right.
[20:39:40] <nij-> Section 5 talks about the meaning (why it's great) of the definition of `eval`, and I didn't get it.
[20:40:06] <nij-> The first time I read the document was about 18 months ago. I got excited. But recently in retrospect, I became confused.
[20:41:12] <nij-> Anyway, thanks for sharing your ideas with me aap. I think through this conversation, I'm more certain that P.G.'s writing is not exactly right but it indeed serves as a good vehicle to get people in.
[20:41:12] <aap> have you read the original lisp paper and possibly the lisp 1.5 manual? i think they're very nice
[20:41:22] <nij-> I haven't.
[20:41:35] <aap> i remember when i read pg's root paper i also wasn't that fascinated
[20:41:57] <nij-> And the conversation also helped me understand that the point of lisp is: 1. its minimal semantics 2. its minimal syntax 3. data=code.
[20:42:15] <nij-> I got fascinated the first few times xD
[20:42:23] <aap> that's probably a good take-away
[20:42:31] <nij-> My friends didn't get them though. In hindsight they are rigorous in thinking, and I wasn't.
[20:42:44] <nij-> aap ;) Thanks!
[20:42:44] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 252 seconds)
[20:42:55] <aap> sure. and i do recommend the lisp 1.5 manual!
[20:43:12] <nij-> Does it offer anything more than those 3 points xD?
[20:43:36] *** Joins: tfb (~tfb@88.98.95.237)
[20:43:37] <aap> it's fairly short but has so much to offer. theoretical ideas, implementation details, language reference, example programs
[20:44:41] <nij-> Thanks for sharing. I will read that one day! :)
[20:45:03] <nij-> By the way, is there a rigorous definition of what "semantics" of a language means?
[20:45:22] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[20:45:30] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:443f:3e79:f513:1a13)
[20:45:56] <nij-> And in the context of lisp, should that be describing how the input string is read, or describing how an interned data (as code) is evaluated?
[20:46:11] <nij-> I thought in human natural languages, people use the word "semantics" to refer to the former.
[20:46:29] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzz…)
[20:46:29] <aap> the latter
[20:46:37] <nij-> That is, semantics means how the input string is read (internalized).
[20:46:49] <aap> reading input is done by the read function
[20:47:07] <nij-> Like, when we see the string "LION", we internalize that into a lion.. all of our experiences with what a lion could be.
[20:47:09] <aap> it reads all the parens and atoms and builds list structure out of them
[20:47:35] <aap> so you get an internal lisp s-expression, which you can then pass to eval
[20:47:45] <nij-> So that's why I think it's a bit weird here. It seems like the word "semantics" has different meaning between the two contexts (human natural lang and programming lang).
[20:47:55] <aap> you could define another language using s-expressions with semantics that aren't all like like lisp's
[20:48:35] <nij-> Ah I see.
[20:48:36] <nij-> Ok.
[20:48:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f5:37d:443f:3e79:f513:1a13) (Ping timeout: 245 seconds)
[20:48:57] <nij-> The string "lion" does (I feel) "evaluate" to the mental image of a lion.
[20:49:13] <aap> right
[20:49:29] <nij-> I got so autistic about this because I want to try to unify the three points I mentioned above:
[20:49:37] <nij-> 1. its minimal semantics 2. its minimal syntax 3. data=code.
[20:49:46] <aap> in lisp the atom LION would evaluate to whatever value you have attached to it in LISP (different lisps differ in how this works in some ways)
[20:49:55] <nij-> I feel like the 3rd should be reformulated as a "minimal blah blah blah".
[20:50:20] <nij-> It is minimal in the sense that the READ function is minimal.
[20:50:30] <nij-> Because the code already gets its structure.
[20:51:13] <aap> minimal syntax means easy parsing of course. so read will be simple
[20:51:31] <nij-> Oh, by minimal syntax I didn't mean that.
[20:51:44] <nij-> Look at XML, it has the same structure. I can write a compiler for it.
[20:51:52] <nij-> But its syntax is very ugly and non-minimal.
[20:52:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[20:52:39] <nij-> Lisp is minimal in its syntax because it's using '(' and ')' for block deliminators and ' ' for term evaluator.
[20:53:06] <aap> the s-exp syntax is just a very direct way to represent CONS structures
[20:53:14] <nij-> http://blog.rongarret.info/2015/05/why-lisp.html
[20:53:15] <nij-> Yes.
[20:53:26] <nij-> But data=code is another thing.
[20:53:53] <nij-> If without this, you can get even more minimal in its syntax.. look at APL or brainfxck.
[20:54:02] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:54:04] <tfb> I think you have to be very careful about 'minimal'.  I bet I could come up with a more terse notation for sexps
[20:54:23] <nij-> tfb: How?
[20:54:30] <aap> with CONSes you can represent binary trees (or other types of trees with some interpretation) which is of course what more complex syntax is usually parsed to
[20:55:11] <aap> so you can skip almost the whole parsing step except for the little bit about parens
[20:55:47] <nij-> tfb: If you can come out with how I'd be very glad. I cannot think of any, except you drop data=code.
[21:00:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:05:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[21:14:57] <tfb> nij-: well some RPNy thing say: (car '(a . b)) would be car quote a b ./../..
[21:15:28] <aap> ha i like that idea
[21:16:23] <tfb> (the thing that generated that does not know about proper lists: it only knows conses and symbols and nil (which is /)
[21:16:41] <nij-> How does RPNy say (list '(a . b) '(c . d))?
[21:17:04] <tfb> nij-: list quote a b ./..quote c d ./../...
[21:17:22] <nij-> How does it know that "quote" opens a new block?
[21:18:09] <tfb> actually sorry (old version of a method): list quote a b./.. quote c d./../...
[21:18:32] <nij-> Fine. Still how does it know that "quote" opens a new block?
[21:18:55] <tfb> it doesn't.  It's just printing the tree
[21:19:18] <nij-> Oh. I'm not sure how it's more minimal, given that "./.." and "./../...".
[21:21:26] <nij-> I tried hard.. but still cannot imagine a more minimal syntax, unless giving up data=code and introducing many adhoc assotiative rules.
[21:24:38] <tfb> Given that it does not have a shorthand for proper lists it is a bunch more terse than a conventional syntax which doesn't: (list . ((quote . ((a . b) . nil)) . ((quote . ((c . d) . nil)) . nil)))
[21:25:34] <tfb> if I spent time to give it a shorthand for lists it would I am sure be terser than Lisp (but utterly unreadable)
[21:28:02] <tfb> But the point is it is foolish to say 'x is minimal' unless you have a *proof* that x is indeed minimal.  And I know of no such proof for Lisp's surface syntax.  It's pretty terse, sure.
[21:33:41] <contrapunctus> [Elisp/CLOS] The desired behaviour of two methods is almost identical, but I don't know how to implement the diverging behaviour without either checking for the actual class (which sounds gross) or writing some very implementation-specific generic functions 🤔️
[21:33:41] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:59a5:eb97:f79e:ca72) (Ping timeout: 256 seconds)
[21:35:18] *** Quits: eddof13 (~textual@177.241.57.17) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:36:52] <contrapunctus> (or, option 3, embrace duplication)
[21:39:16] <contrapunctus> (The full description of the problem is lengthy, so I left it out...unless someone actually wants to know.)
[21:39:50] <tfb> contrapunctus: have methods which look like (defmethod foo ((x c1)) (foo-impl x :type c1)) is one way
[21:40:07] <tfb> er :type 'c1
[21:40:50] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[21:40:56] <tfb> then foo-impl is a plain function whose behaviour is controlled by keyword arguments (or whatever the elisp equivalent is)
[21:44:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:51:24] *** Joins: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6)
[21:54:58] *** Joins: puke (~puke@user/puke)
[21:56:37] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[21:56:59] <contrapunctus> tfb: IIUC, that sounds similar to the `(cl-case (eieio-object-class-name object) (c1 ...) (c2 ...))` thing I'm thinking of doing... 🤔️
[22:04:37] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 240 seconds)
[22:05:33] <nij-> tfb: 🤔🤔🤔
[22:10:39] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[22:11:12] *** Joins: karlosz (~karlosz@136.56.98.53)
[22:14:39] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[22:22:25] <tfb> contrapunctus: yes, except the methods do the dispatching on case for you
[22:22:37] <tfb> class*
[22:25:48] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[22:26:04] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:27:01] *** Quits: gingerale (~gingerale@2a03:b0c0:0:1010::19:c001) (Remote host closed the connection)
[22:27:01] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10e1:c29f:443f:3e79:f513:1a13) (Read error: Connection reset by peer)
[22:27:17] *** Joins: gingerale (~gingerale@2a03:b0c0:0:1010::19:c001)
[22:27:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:28:12] <sm2n> btw the CL convention for that kind of thing is to put % in front of the name
[22:29:01] <amazigh> btw, I think % at the end is easier to type and read
[22:29:14] <sm2n> so you could have (defun foo (x) (%foo 'backend1 x)) (defmethod foo ((eql 'backend1) x) ...)
[22:29:29] <amazigh> s/btw,//g
[22:29:46] <sm2n> amazigh: 1. it's not conventional, and 2. if you put it at the front you get better autocompletion
[22:30:39] <amazigh> 1 yes, 2 % at the end is easier to autocomplete
[22:31:06] <sm2n> I guess it depends on what you want
[22:31:24] <sm2n> % at the end doesn't let you say "list all private symbols in scope"
[22:31:24] *** Joins: simendsjo (~user@84.211.91.241)
[22:31:31] <sm2n> at least with standard prefix matching
[22:31:42] <sm2n> (though flex matching is pretty common nowadays)
[22:33:48] *** Joins: gareppa (~gareppa@user/gareppa)
[22:35:09] *** Joins: MrFantastik (~f@2607:f598:bbda:250:b0ab:6263:8d63:381b)
[22:36:14] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[22:36:34] *** Quits: simendsjo (~user@84.211.91.241) (Quit: ERC 5.4 (IRC client for GNU Emacs 28.0.90))
[22:37:31] *** Joins: simendsjo (~user@84.211.91.241)
[22:38:26] *** Quits: simendsjo (~user@84.211.91.241) (Client Quit)
[22:41:09] *** Joins: simendsjo (~user@84.211.91.241)
[22:42:00] *** Quits: simendsjo (~user@84.211.91.241) (Client Quit)
[22:43:48] *** Joins: simendsjo (~user@84.211.91.241)
[22:48:09] *** Joins: tfeb (~tfb@88.98.95.237)
[22:51:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[22:55:37] <tfeb> sm2n: the %foo convention traditionally meant 'unchecked version of foo', which is absolutely not what I was suggesting
[22:56:10] <sm2n> yeah, people do that too
[22:56:33] *** Quits: cckk (~user@2604:2800:3:8b40:4728:17a4:48ee:3b39) (Remote host closed the connection)
[22:56:44] <sm2n> I've seen it in newer codebases to just mean an internal symbol though
[22:57:18] <sm2n> for example, prefixing slot names with it so they don't share names with exported accessors
[22:57:18] <tfeb> because the CL package system has not been invented, I suppose
[22:57:18] <mfiano> It is a good practice to name defclass slots prefixed with a %. Many good programmers do this for good reason.
[22:57:55] <sm2n> tfeb: it just generalizes "unchecked" 
[22:58:15] <sm2n> you might want the same name, but not want to export certain functionality or api
[22:58:38] <sm2n> But I mean, it's lisp, you are free to do what you want
[23:01:18] *** Joins: yewscion (~yewscion@52.94.133.129)
[23:01:52] *** Joins: notzmv (~zmv@user/notzmv)
[23:02:29] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[23:02:56] <lisp123> sm2n: I saw that (use of % for internal), but never a fan
[23:03:15] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:03:42] <tfeb> lisp123: I'm with you on that
[23:03:50] <lisp123> Is there really an issue with slot names having the same name as an accessor?
[23:04:05] <tfeb> no, there isn't
[23:04:21] <lisp123> Cool, that's what I thought too
[23:05:33] <sm2n> the idea is the semantics might not match
[23:06:07] <tfeb> slot names are essentially a namespace of their own
[23:06:22] <sm2n> For example, if you have a slot with an exported reader with the same name, then someone can (setf (slot-value ...)) the slot with the exported symbol
[23:06:36] <sm2n> if you have different names, that is not possible
[23:08:49] *** Quits: macaw (~macaw@77-255-134-52.adsl.inetia.pl) (Quit: macaw)
[23:09:01] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[23:09:43] *** Joins: amb007 (~a_bakic@15.245.204.77.rev.sfr.net)
[23:10:02] <lisp123> sm2n: Yeah, I see that perspective (same thing with #: for package names), (although wouldn't really agree, but that's just an opinion).
[23:10:09] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:11:09] <tfeb> If people are going to ignore an interface and just polke values into slots you have already lost
[23:11:41] <sm2n> Yeah, that's a valid argument
[23:12:51] *** Quits: yewscion (~yewscion@52.94.133.129) (Ping timeout: 256 seconds)
[23:14:41] <tfeb> And
[23:15:02] <tfeb> i think the defence is something like https://github.com/tfeb/tfeb-lisp-toys/blob/main/hidden-slots.lisp
[23:15:31] <tfeb> (but not actually that, which is a toy)
[23:16:37] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[23:17:21] <sm2n> nice hack
[23:17:41] <sm2n> Ultimately I think it comes down to personal sense of aesthetics
[23:17:51] <sm2n> I don't really think it's worth bikeshedding
[23:18:32] <tfeb> oh no, I wasn't meaning to do that (just wasting time to avoid looking at the news...)
[23:18:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:19:32] <tfeb> it is obviously taste: things that look like sigils just make me think of Perl and ... ick
[23:20:02] <tfeb> (although
[23:20:24] <tfeb> i like perl)  And cannot control this keyboard
[23:21:23] <sm2n> Well, it's not that bad
[23:21:32] <sm2n> After all, 93% of Paint Splatters are Valid Perl Programs
[23:21:44] <sm2n> <https://www.mcmillen.dev/sigbovik/>
[23:22:13] <tfeb> heh
[23:22:58] *** Joins: morte_ (~user@190.104.116.153)
[23:24:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:24:44] <tfeb> Actually, I like Perl because once you get past the line noise it's like Lisp: it assumes you are a grownup and do not need to be lectured.  Unlike Python, which is very much about the lecturing
[23:25:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:26:35] <sm2n> While I agree in principle, I don't think I am going to get past the line noise anytime soon
[23:27:27] <dash[m]> tfeb: what differences are you thinking of
[23:27:43] *** Joins: yewscion (~yewscion@52.94.133.129)
[23:27:51] <dash[m]> perl, CL, and python are all pretty much in the same corner of the design space
[23:28:04] <tfeb> dash[m]: in what context?
[23:28:55] <tfeb> ah ok
[23:29:28] <tfeb> Python says: there should be one way to do things
[23:29:58] <tfeb> Perl says: there are a bunch of ways of doing things
[23:30:40] <tfeb> CL says: here are a bunch of ways, and if you would like to invent your own, feel free
[23:31:19] <dash[m]> kinda fake, though
[23:31:51] <dash[m]> i'm sure there are people who have advocated for these positions but in practice they're not really that different
[23:32:52] *** Joins: macaw (~macaw@77-255-134-52.adsl.inetia.pl)
[23:34:04] <tfeb> The first is literally what 'import this' tells you in Python: 'There should be one-- and preferably only one --obvious way to do it.'
[23:34:56] *** Quits: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956) (Ping timeout: 245 seconds)
[23:36:38] <dash[m]> well yeah, in the 90s
[23:36:47] <dash[m]> like i said, it didn't work out that way in practice
[23:37:02] <dash[m]> unless you have some actual examples in mind...?
[23:38:33] *** Joins: lumia (~alice@208.64.158.255)
[23:38:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:42:32] *** lumia is now known as Lumia
[23:43:10] <dash[m]> the real line-noise king is Hoon, which reads like a cross between Lisp and APL
[23:44:23] <tfeb> I don't think I can explain the difference in attitude unless you already understand it (and no, it's not about the line noise, even slightly, it's about how the people who built these languages thought about language)
[23:44:26] <dash[m]> e.g. https://github.com/benmcc100/pokur/blob/main/src/app/pokur.hoon
[23:44:43] * tfeb going to eat now
[23:44:53] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[23:45:01] <dash[m]> tfeb: I think I already understand it and you can't explain it because it's mostly fake
[23:45:23] <dash[m]> (that is: mostly posturing, with little practical difference over the long term)
[23:45:46] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[23:46:10] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[23:46:27] *** Joins: bollu (~bollu@159.65.151.13)
[23:54:14] *** Quits: Lumia (~alice@208.64.158.255) (Quit: Leaving)
[23:56:28] *** Quits: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:56:57] *** Joins: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6)
[23:57:00] *** Joins: Lumia (~alice@208.64.158.255)
[23:57:26] *** Quits: letto (~letto@188.25.113.229) (Quit: Konversation terminated!)
[23:58:04] *** Joins: letto (~letto@188.25.113.229)
