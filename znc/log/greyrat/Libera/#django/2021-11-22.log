[00:01:38] *** Joins: dre (~dre@2001:8003:c932:c301:331c:7ae7:a9d3:b68)
[00:04:11] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[00:10:44] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:12:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[00:13:25] *** Joins: y04n45402 (~y04nn@nayon.fr)
[00:14:17] *** Joins: mimmy_ (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[00:15:06] *** Joins: fikran (~fikran@user/fikran)
[00:15:54] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 260 seconds)
[00:19:10] *** Quits: mimmy_ (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 260 seconds)
[00:23:16] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[00:31:52] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2505:c76:f78:c1d6)
[00:34:30] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Ping timeout: 260 seconds)
[00:35:08] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Quit: The Lounge - https://thelounge.chat)
[00:35:48] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[00:37:18] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2505:c76:f78:c1d6) (Ping timeout: 260 seconds)
[00:38:15] *** Joins: bandithijo (~bandithij@fedora/bandithijo)
[00:40:49] *** Quits: bandithijo (~bandithij@fedora/bandithijo) (Client Quit)
[00:41:18] *** Quits: jjhoo (jahakala@user/jjhoo) (Remote host closed the connection)
[00:43:30] *** Joins: jjhoo (~jahakala@user/jjhoo)
[00:45:07] *** Quits: y04n45402 (~y04nn@nayon.fr) (Remote host closed the connection)
[00:46:26] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:9487:a7c7:e639:ebc4)
[00:46:46] *** Quits: defjam (~eb0t@90.198.60.224) (Ping timeout: 268 seconds)
[00:48:37] *** Joins: defjam (~eb0t@90.196.140.50)
[00:51:07] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:9487:a7c7:e639:ebc4) (Ping timeout: 250 seconds)
[00:52:09] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75)
[00:53:22] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[00:54:17] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:55:00] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[00:58:38] *** Joins: luigibu (~luigibu@80.30.201.209)
[01:07:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:07:03] *** ChanServ sets mode: +v EvilDMP
[01:08:53] *** Quits: luigibu (~luigibu@80.30.201.209) (Ping timeout: 250 seconds)
[01:11:49] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:12:41] *** Quits: gitly (~gitly@85.255.234.35) (Read error: Connection reset by peer)
[01:14:03] *** Joins: mimmy_ (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com)
[01:17:25] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:18:48] *** Joins: gitly (~gitly@85.255.234.35)
[01:18:54] *** Quits: mimmy_ (~mimmy@cpef81d0f857c83-cmf81d0f857c80.cpe.net.cable.rogers.com) (Ping timeout: 260 seconds)
[01:20:26] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:20:41] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:23:24] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[01:27:04] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:27:11] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[01:27:26] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[01:30:26] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:31:13] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:35:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:36:51] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:818b:d7ec:141a:89c5)
[01:37:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:38:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:41:35] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:818b:d7ec:141a:89c5) (Ping timeout: 250 seconds)
[01:49:35] *** Quits: ferz (~ferz@93-39-141-241.ip76.fastwebnet.it) (Ping timeout: 264 seconds)
[01:51:25] *** Quits: gitly (~gitly@85.255.234.35) (Ping timeout: 256 seconds)
[01:53:07] *** Joins: gitly (~gitly@185.69.144.174)
[01:59:37] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[02:01:08] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[02:03:21] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[02:08:52] *** Joins: djapo (~archangel@user/djapo)
[02:15:06] *** Quits: wallbroken (wallbroken@user/wallbroken) (Remote host closed the connection)
[02:22:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:24:27] *** Joins: fikran (~fikran@user/fikran)
[02:33:03] *** Quits: bitdex_ (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[02:33:51] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[02:34:47] *** Joins: bitdex_ (~bitdex@gateway/tor-sasl/bitdex)
[02:35:53] *** Joins: wallbroken (wallbroken@user/wallbroken)
[02:39:10] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[02:40:58] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[03:06:46] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:7c3d:8173:a37e:d50a)
[03:10:15] *** Joins: ferz (~ferz@93-39-143-113.ip76.fastwebnet.it)
[03:11:31] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:7c3d:8173:a37e:d50a) (Ping timeout: 250 seconds)
[03:11:59] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[03:16:36] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[03:20:41] *** Joins: schinckel (uid38120@id-38120.ilkley.irccloud.com)
[03:20:47] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 264 seconds)
[03:20:57] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[03:20:58] *** Joins: serghei (~egrep@user/serghei)
[03:21:53] *** Quits: kostkon (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Read error: Connection reset by peer)
[03:22:12] *** Joins: kostkon (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a)
[03:31:34] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[03:33:28] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[03:33:44] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[03:48:14] *** Quits: gitly (~gitly@185.69.144.174) (Ping timeout: 260 seconds)
[03:50:13] *** Joins: gitly (~gitly@148.252.128.153)
[03:53:27] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[03:54:02] *** Quits: jess (~jess@libera/staff/jess) ()
[03:57:45] *** Joins: yanchai (~yanchai@124.6.141.226)
[03:59:52] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[04:18:03] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[04:18:17] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:7c3d:8173:a37e:d50a)
[04:23:14] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:7c3d:8173:a37e:d50a) (Ping timeout: 268 seconds)
[04:29:03] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[04:32:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[04:32:46] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[04:33:48] *** Joins: fikran (~fikran@user/fikran)
[04:36:53] *** Quits: yanchai (~yanchai@124.6.141.226) (Ping timeout: 256 seconds)
[05:01:10] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[05:02:08] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:02:11] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[05:05:02] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:06:16] *** Joins: rannnn8888 (~rannnn888@bzq-79-183-157-9.red.bezeqint.net)
[05:11:59] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:d9be:afe3:4e5b:d63)
[05:21:12] *** Joins: yanchai (~yanchai@124.6.141.226)
[05:26:08] *** Quits: rannnn8888 (~rannnn888@bzq-79-183-157-9.red.bezeqint.net) (Quit: Client closed)
[05:26:42] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:9c35:bed7:e2c:e900)
[05:26:53] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:9c35:bed7:e2c:e900) (Client Quit)
[05:28:13] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:d9be:afe3:4e5b:d63) (Ping timeout: 250 seconds)
[05:30:06] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[05:30:36] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:42:03] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 256 seconds)
[05:47:38] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 260 seconds)
[05:52:04] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:56:31] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[06:04:58] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:08:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:27:06] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[06:40:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:43:09] *** Joins: fikran (~fikran@user/fikran)
[07:02:59] *** Joins: fdan (~fdan@192.146.154.3)
[07:03:02] <fdan> hi there, what does it meant by response caching
[07:04:58] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[07:05:36] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[07:06:34] *** Quits: ferz (~ferz@93-39-143-113.ip76.fastwebnet.it) (Ping timeout: 260 seconds)
[07:21:01] *** Joins: ferz (~ferz@93-39-143-113.ip76.fastwebnet.it)
[07:25:12] <dre> fdan, so you get the response, right
[07:25:24] <fdan> yes?
[07:25:29] <dre> and then you cache it
[07:25:57] <fdan> cache it in the client side?
[07:26:02] <fdan> like a browser cache?
[07:26:38] <dre> well django is a server framework
[07:26:52] <dre> I don't know what exam you're doing fdan
[07:27:05] <dre> but it could be either client / server, depending on who's asking
[07:27:29] <fdan> hmm ok
[07:27:46] <dre> well that's not true... the server doesn't cache responses, it sends responses. it's probably clientside for what you're talking about fdan
[07:27:56] <fdan> sure
[07:28:07] <dre> but the general premise with "response caching" is that you get the response and you cache it :)
[07:28:29] <fdan> i see
[07:28:45] <fdan> i have one more question. the cookies and headers? what are the differences
[07:28:56] <fdan> are they the same key-value things?
[07:29:02] <fdan> or functionality wise they differ
[07:29:04] <fdan> ?
[07:29:08] <dre> no cookies are definitely edible.,
[07:29:31] <fdan> :)
[07:29:45] <dre> fdan, it'd be more beneficial if you played around and saw for yourself how they work
[07:37:05] *** Quits: simplicity (~yti@user/simplicity) (Remote host closed the connection)
[07:38:05] *** Joins: simplicity (~yti@user/simplicity)
[07:39:36] *** Joins: Atque (~Atque@user/atque)
[07:43:26] *** Quits: yanchai (~yanchai@124.6.141.226) (Ping timeout: 260 seconds)
[07:57:13] *** Joins: righthand (~user@58.252.61.108)
[08:00:18] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[08:01:38] *** Quits: righthand (~user@58.252.61.108) (Ping timeout: 260 seconds)
[08:06:26] *** Joins: fdan (~fdan@192.146.154.3)
[08:16:35] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:4b79:e11c:c2f:5c75) (Ping timeout: 250 seconds)
[08:31:12] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[08:38:17] *** Quits: defjam (~eb0t@90.196.140.50) (Ping timeout: 256 seconds)
[08:40:20] *** Joins: defjam (~eb0t@90.197.81.95)
[08:50:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:52:30] *** Joins: fikran (~fikran@user/fikran)
[08:54:08] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 256 seconds)
[09:05:02] *** Quits: nicode (~nic@2607:f2c0:94d3:a300:b6a2:b673:d91f:e7db) (Ping timeout: 260 seconds)
[09:11:52] *** Joins: monokrome (~monokrome@50.215.11.140)
[09:18:48] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[09:18:48] *** Quits: KramerC (kramer@user/kramerc) (*.net *.split)
[09:18:48] *** Quits: pidroid (~pidroid@user/pidroid) (*.net *.split)
[09:18:48] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:18:48] *** Quits: blathijs (~matthijs@tika.stderr.nl) (*.net *.split)
[09:19:06] *** Joins: KramerC (kramer@user/kramerc)
[09:19:11] *** Joins: flynn (~mcbloch@user/flynn)
[09:19:24] *** Joins: pidroid (~pidroid@user/pidroid)
[09:19:29] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[09:19:34] *** Joins: blathijs (~matthijs@tika.stderr.nl)
[09:24:59] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[09:24:59] *** Quits: krisd (krisd@s0.mydevil.net) (*.net *.split)
[09:24:59] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (*.net *.split)
[09:25:00] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[09:25:00] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[09:25:00] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[09:25:00] *** Quits: fleabag (~sirpengi@li587-65.members.linode.com) (*.net *.split)
[09:25:00] *** Quits: kanzure (~kanzure@user/kanzure) (*.net *.split)
[09:25:36] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[09:27:13] *** Joins: _janus (~janus@blotter.ld-linux.so)
[09:30:11] *** Joins: kanzure (~kanzure@user/kanzure)
[09:30:13] *** Joins: krisd (krisd@s0.mydevil.net)
[09:30:17] *** Joins: bparker (~nobody@user/bparker)
[09:30:17] *** Joins: tureba (~tureba@tureba.org)
[09:30:23] *** Joins: ST47 (~ST47@wikimedia/st47)
[09:33:10] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:34:04] *** Joins: dor (~erg@78.11.12.207)
[09:41:49] *** Joins: sandeepk (~sandeepk@223.130.30.223)
[09:46:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:49:54] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:14:08] *** ChanServ changes topic to 'Welcome to #django || Please provide code and __full__ traceback in a pastebin || Pastebin at: http://dpaste.de/ -- do not use pastebin.com! || Django CoC applies: https://www.djangoproject.com/conduct/ || Django 4.0 release candidate 1 released https://www.djangoproject.com/weblog/2021/nov/22/django-40-rc1/'
[10:21:50] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[10:47:17] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:53:51] *** Joins: mattil (~mattil@dzd1hh8gmm9nr6v-zmz-4.rev.dnainternet.fi)
[10:56:29] *** Quits: mattil (~mattil@dzd1hh8gmm9nr6v-zmz-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:59:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[11:01:51] *** Joins: fikran (~fikran@user/fikran)
[11:07:03] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[11:09:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:09:04] *** ChanServ sets mode: +v EvilDMP
[11:20:01] <duoi> dre in fairness, the server can and usually does cache responses too
[11:22:15] *** Quits: veb (sid43929@id-43929.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[11:22:52] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (Ping timeout: 265 seconds)
[11:23:53] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[11:25:26] *** Joins: veb (sid43929@id-43929.ilkley.irccloud.com)
[11:31:41] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[11:33:34] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[11:38:10] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 265 seconds)
[11:40:26] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[11:42:32] *** Quits: gitly (~gitly@148.252.128.153) (Ping timeout: 240 seconds)
[11:44:32] *** Joins: gitly (~gitly@85.255.234.32)
[11:44:51] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Ping timeout: 264 seconds)
[11:45:08] *** Joins: Ilyu (~quassel@gateway/vpn/pia/ilyu)
[11:48:51] <serafeim> hello friends
[11:49:04] <serafeim> i saw the release notes of django 4 and didn't see anything groundbreaking
[11:49:18] <serafeim> what's the reasons of changing the major version ?
[11:49:30] <serafeim> i.e why django 4 instead of django 3.3 ?
[11:54:37] *** Joins: syberspace (~syberspac@xiaoxiao.anvor.at)
[11:56:38] <apollo13> serafeim: https://docs.djangoproject.com/en/dev/internals/release-process/
[11:56:53] <vlt> serafeim: https://docs.djangoproject.com/en/dev/internals/release-process/#release-cadence
[11:57:17] <serafeim> hm ok yes i saw it but i can't understand the reasoning
[11:57:31] <serafeim> i mean what's the problem of having 3.3 after 3.2 LTS or 3.5 LTS etc ?
[11:58:12] <apollo13> no problem
[11:58:24] <apollo13> we just wanted something "simple"
[11:58:57] <serafeim> ha ha ok it is simple however people are usually used to change major versions when something "big" happens
[11:59:11] <serafeim> i.e the 1.11 to 2.0 was really big (drop py2 support)
[11:59:22] <apollo13> django is so "stable" that we usually will not have such big changes
[11:59:24] <serafeim> the 2.2 to 3 not so much. same as 3.2 to 4
[11:59:42] <serafeim> yes ok i understand
[11:59:44] <apollo13> depends on the PoV, for me there were big changes in each of those releases
[11:59:45] <serafeim> thanks
[11:59:46] *** Joins: righthand (~user@58.252.61.108)
[11:59:58] <serafeim> well maybe but definitely not as big as the 2.x :)
[12:00:41] <apollo13> I guess the main thing to get used to: Django is a stable framework that evolves slowly
[12:00:51] <apollo13> we value stability etc more over new features
[12:01:21] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:01:38] <serafeim> i agree
[12:01:43] <serafeim> i'm using it for more than 10 years :)
[12:02:29] <apollo13> well then you maybe know the fun times from 0.96 to 1.0 -- even those were "small" releases ;)
[12:03:14] <dre> django is great; I love this framework
[12:03:19] <apollo13> (those were fun times btw, ie models were generated at some point)
[12:03:22] <dre> I'm so glad i took it onboard
[12:04:16] <serafeim> yes it is there's also a related discussion on HN for anybody interested
[12:05:11] <apollo13> serafeim: which one of the many :D
[12:05:23] <serafeim> it is on the front page
[12:05:35] <serafeim> https://news.ycombinator.com/item?id=29303611
[12:05:37] <apollo13> ah rather small for now :)
[12:05:55] <apollo13> btw I have been playing with unpoly js recently
[12:06:03] <serafeim> well it is on fp so it will probably gain traction
[12:07:03] <apollo13> It is made by the Rails LTS company. They have some really interesting ideas and it allowed me to change a normal page to SPA like with minimal effort
[12:08:55] <apollo13> https://demo.unpoly.com/ if anyone is interested
[12:09:27] <serafeim> i remember it... isn't it similar to intercooler js ?
[12:09:55] <serafeim> i.e assign attributes to elements to do ajax work ?
[12:11:01] <apollo13> jupp kinda. But more geared towards an application feeling
[12:11:47] <apollo13> or maybe call it a little bit more oppiniated than htmx
[12:12:05] <apollo13> ie unpoly has a concept of overlays (popups etc) and how to integrate those and get data back
[12:12:20] <apollo13> ie create a new object in a popup and get back the newly created id
[12:14:03] <serafeim> hm that's interesting
[12:14:19] <apollo13> let me find the slides
[12:14:39] <serafeim> i remember my biggest problem with intercooler was how to implement a popup for create or update object
[12:14:44] *** Quits: righthand (~user@58.252.61.108) (Ping timeout: 260 seconds)
[12:14:46] <apollo13> http://triskweline.de/unpoly2-slides/#54
[12:15:00] *** Joins: sandeep (~sandeepk@202.14.122.34)
[12:15:12] <serafeim> thins like pagination or filtering were easy but the popup was so complicated that i just abandoned it and used traditional request/responses
[12:15:52] <apollo13> I hear you, unpoly allowed me to open a popup with a containing form + list & pagination with basically two attributes or so
[12:16:09] <serafeim> hmmm very interesting ! i'll keep it in mind for future projects :)
[12:17:32] *** Quits: sandeepk (~sandeepk@223.130.30.223) (Ping timeout: 240 seconds)
[12:19:37] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Ãœberall.)
[12:19:52] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[12:25:28] *** Joins: Rikem (~mike@user/rikem)
[12:30:06] *** Quits: mattcen[mx] (~mattcen@2001:470:69fc:105::5d1) (Quit: You have been kicked for being idle)
[12:36:02] *** Joins: Tas-sos (~Tas-sos@78-203-151.adsl.cyta.gr)
[12:47:57] *** Joins: mdk (~mdk@python/psf/mdk)
[12:49:06] *** Quits: monokrome (~monokrome@50.215.11.140) (Ping timeout: 260 seconds)
[12:57:40] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 260 seconds)
[12:58:09] *** Quits: coldmountain (sid484352@id-484352.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[12:58:34] *** Quits: d1rewolf (sid312924@id-312924.helmsley.irccloud.com) (Ping timeout: 265 seconds)
[12:58:36] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[12:58:36] *** Quits: matthewwilkes (sid500242@id-500242.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[12:58:41] *** Quits: schinckel (uid38120@id-38120.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[12:58:55] *** Quits: niv (~niv@limbo.cypherpunks.io) (Quit: Powered by LunarBNC: https://LunarBNC.net)
[12:59:06] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (Ping timeout: 245 seconds)
[12:59:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:59:22] *** Quits: dez (uid92154@user/dez) (Ping timeout: 268 seconds)
[12:59:38] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[12:59:47] *** Joins: veb_ (sid43929@ilkley.irccloud.com)
[12:59:51] *** Quits: veb (sid43929@id-43929.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[12:59:51] *** veb_ is now known as veb
[12:59:59] *** Quits: holbrode (sid339826@id-339826.tinside.irccloud.com) (Ping timeout: 268 seconds)
[13:00:28] *** Joins: schinckel (uid38120@ilkley.irccloud.com)
[13:00:32] *** Joins: graingert (sid128301@tinside.irccloud.com)
[13:01:36] *** Joins: holbrode (sid339826@tinside.irccloud.com)
[13:01:56] *** Joins: dez (uid92154@user/dez)
[13:03:09] *** Joins: d1rewolf (sid312924@helmsley.irccloud.com)
[13:04:46] *** Joins: coldmountain (sid484352@helmsley.irccloud.com)
[13:08:26] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:08:26] *** ChanServ sets mode: +v EvilDMP
[13:09:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[13:09:32] *** Quits: holbrode (sid339826@tinside.irccloud.com) (Ping timeout: 240 seconds)
[13:10:57] *** Joins: holbrode (sid339826@id-339826.tinside.irccloud.com)
[13:11:11] *** Joins: fikran (~fikran@user/fikran)
[13:12:35] *** Joins: debnet (sid330295@python/afpy/debnet)
[13:12:59] *** Quits: dre (~dre@2001:8003:c932:c301:331c:7ae7:a9d3:b68) (Quit: Leaving)
[13:13:32] *** Joins: matthewwilkes (sid500242@id-500242.uxbridge.irccloud.com)
[13:13:37] *** Joins: rtpg (sid443069@id-443069.ilkley.irccloud.com)
[13:20:23] *** Joins: thiras (~thiras@user/thiras)
[13:24:10] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[13:25:39] *** Quits: gitly (~gitly@85.255.234.32) (Ping timeout: 264 seconds)
[13:27:14] *** Joins: gitly (~gitly@148.252.128.154)
[13:30:41] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[13:35:02] *** Quits: dor (~erg@78.11.12.207) (Ping timeout: 240 seconds)
[13:37:26] *** Quits: gitly (~gitly@148.252.128.154) (Ping timeout: 245 seconds)
[13:41:54] *** Joins: gitly (~gitly@148.252.128.154)
[13:53:16] *** Joins: gkarthik (~gkarthik@2402:3a80:1910:4b17:4cc5:97e8:df0b:fca0)
[13:59:37] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[14:07:26] *** Joins: Camilo (~hugh@88-111-238-140.dynamic.dsl.as9105.com)
[14:09:49] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:14:56] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[14:15:44] <Camilo> I'm doing a data migration, and using django-address for geographical addresses. Everything is working except when I try to assign an address to a building I get the error "Invalid address value."
[14:16:43] <Camilo> Migration file: https://dpaste.org/Z5LF
[14:17:17] <Camilo> Address model: https://github.com/furious-luke/django-address/blob/master/address/models.py
[14:18:12] <Camilo> Property model: https://dpaste.org/5aVt
[14:18:48] <Camilo> Anyone know what might be wrong? I'm very new so hopefully something obvious
[14:19:39] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:21:59] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:21:59] *** ChanServ sets mode: +v EvilDMP
[14:22:10] *** Joins: pro_z (~pro_z@37.214.63.5)
[14:25:31] *** Joins: slav0nic (slav0nic@python.su)
[14:26:09] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[14:34:25] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[14:36:17] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[14:57:55] *** Joins: fandre1986 (~fandre198@62.67.214.101)
[15:05:51] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Ping timeout: 264 seconds)
[15:05:55] *** Joins: Ilyu_ (~quassel@166.215.82.79.rev.sfr.net)
[15:07:01] *** Quits: ferz (~ferz@93-39-143-113.ip76.fastwebnet.it) (Ping timeout: 256 seconds)
[15:07:47] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[15:07:50] *** Quits: gkarthik (~gkarthik@2402:3a80:1910:4b17:4cc5:97e8:df0b:fca0) (Quit: Client closed)
[15:08:32] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[15:13:03] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 264 seconds)
[15:17:30] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:dd01:9de3:5a8:f472) (Ping timeout: 268 seconds)
[15:19:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[15:20:32] *** Joins: fikran (~fikran@user/fikran)
[15:23:11] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[15:41:04] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[15:41:33] <diverdude> Hello, I have entries like this in my log: https://dpaste.org/7vnY  Are those errors coming from some attack?
[15:41:42] <diverdude> And how do i get rid of it?
[15:49:01] *** Joins: lllama (~pentest@83.144.189.80.dyn.plus.net)
[15:50:00] <apollo13> seems like your STATIC_ROOT is empty
[15:51:42] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:45c0:45b2:2444:a9c8)
[15:54:36] *** Joins: ferz (~ferz@93-39-142-90.ip76.fastwebnet.it)
[15:54:53] <lllama> Afternoon all - hopefully a quick async question. Can I implement long polling with vanilla async views?
[15:57:21] <apollo13> probably but why :D
[15:58:24] <lllama> I'm playing with HTMX as part of an upgrade to an existing app. Currently it polls every 5 seconds - I'm looking to see whether I can use SSE instead.
[15:58:44] <apollo13> polls every 5 seconds != long polling != SSE :)
[15:58:45] <lllama> (without Channels if I can help it)
[15:59:05] <lllama> True, true. But long polling is a lot closer to SSE than polling.
[15:59:19] <lllama> And moving from evry 5 seconds to something else counts as an upgrade
[15:59:27] <apollo13> does it?
[15:59:43] <lllama> yep
[15:59:44] <apollo13> I'd stay with the "every 5 second poll" if you can
[16:00:29] <apollo13> also even if you were to use vanilla async views you'd now have to start with an async webserver in the first place
[16:00:48] <apollo13> and depending on your setup maybe even two, one for the sync parts and one for the async ones
[16:01:16] <apollo13> but yes you can do long polling and SSE with vanilla asnyc views
[16:01:21] <lllama> that's fine. I'm using this as an excuse to learn k8s, so the webserver is the least of my issues
[16:01:43] <apollo13> I'd use everything as an excuse not to learn k8s :D
[16:02:09] <lllama> I've been putting it off. But then I found tilt.dev and I don't hate it as much
[16:03:22] <lllama> So what do I need to be returning? HttpResponse? StreamingHttpResponse? They both complain about async_generators not being iterable.
[16:05:20] <pycode1> is there a reason that django is printing None instead of nothing in template?
[16:05:22] <pycode1> i do
[16:05:45] <apollo13> lllama: you can just return a httpResponse; but you need a "async def" for your view and need to run django via asgi
[16:05:48] <pycode1> object.address (i am using DetailView)
[16:06:05] <pycode1> {{ object.address }} print None in the template
[16:06:18] <apollo13> sounds as if it literally contains the string "None"
[16:06:25] <pycode1> i would like to "convert" it into an empty string
[16:07:06] <pycode1> apollo13, i see NULL
[16:07:08] <pycode1> in db
[16:07:22] <apollo13> well then your code or so calls str() on that I think
[16:07:30] <apollo13> please see the topic for providing the relevant information
[16:07:50] <carlio> you could just do {% if object.address %}{{ object.address}}{% endif %} and it'll just print nothing
[16:08:14] <carlio> or an {% else %}""{% endif %} if you explicitly need an empty pair of quotes
[16:08:28] <pycode1> i really do not have too much to say because i just have <h5 class="card-text">{{ object.address }}</h5> that's it... and the "object" is the self.object is coming from DetailView
[16:08:48] <pycode1> carlio, yes i should adopt a thing like that but it sounds strange to me
[16:09:01] <apollo13> mhm I'd have to double check but I thought none wouldn't print
[16:09:11] <apollo13> I mean you can add |default('')
[16:10:03] <carlio> assuming you want an empty <h5> tag then apollo13's solution is probably best ; often you don't really want to have an empty HTML element as styles will have a big gap so ymmv
[16:10:40] <pycode1> apollo13, if i do self.object.address inside the get_context_data i see None
[16:10:45] <pycode1> but it is not a string
[16:10:50] <pycode1> i see Null on DB
[16:11:00] <pycode1> so i do not know why django is writing None
[16:11:09] <apollo13> ok I just checked, None does indeed render as None
[16:11:10] <pycode1> apollo13, yes with default:'' i see an empty string
[16:11:15] <pycode1> so i suppose the address is really None
[16:11:23] <apollo13> so yeah, "if" or "default" is what you need to use
[16:11:23] <pycode1> apollo13, aaah ok
[16:11:27] <pycode1> perfect
[16:11:29] <pycode1> thank you!
[16:12:23] <pycode1> bye!
[16:12:32] <carlio> o/
[16:12:34] <pycode1> have lunch :D
[16:13:28] <apollo13> lllama: HttpResponse is obviously only suitable for long polling, not sure what you'd have to do for SSE
[16:13:48] <apollo13> most likely https://github.com/fanout/django-eventstream
[16:14:39] <apollo13> but I'd have to dig into the django source to see how you could properly send a SSE response, StreamingHttpResponse doesn't sound that wrong for SSE
[16:14:48] <apollo13> although not exactly what one would want
[16:14:56] <apollo13> channels would probably be a better fit
[16:17:51] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:45c0:45b2:2444:a9c8) (Ping timeout: 245 seconds)
[16:17:57] <lllama> thanks apollo13. I shall investigate further. StreamingHttpResponse _should_ be what I want but things like https://stackoverflow.com/questions/63316840/django-3-1-streaminghttpresponse-with-an-async-generator seem to suggest that it won't work.
[16:18:39] <lllama> But I'll get a proper test rig set up with htmx. If nothing else, that seems quite simple to convert from polling to SSE.
[16:19:12] <apollo13> lllama: well as a middleground you could use long polling
[16:19:29] <apollo13> because then you could just await in the view and return a httpresponse when it gets data
[16:19:38] <apollo13> for low volume this might be doable
[16:22:45] <apollo13> also I do not think that the upvoted SO answer is correct at all
[16:23:33] *** Joins: luischi (~luigi@80.30.201.209)
[16:23:36] <apollo13> it just converts an async iterator to a sync result via run_until_complete I think
[16:24:45] <diverdude> Hello, I have entries like this in my log: https://dpaste.org/7vnY  Are those errors coming from some attack?
[16:26:55] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Quit: Leaving)
[16:33:40] <lllama> apollo13: yeah, I think it was more that it wasn't supported ootb. But at the moment I'm not asking for an event-stream etc, so the browser could well be getting confused.
[16:34:07] <apollo13> diverdude: as I said before: your STATIC_ROOT is empty
[16:34:20] <apollo13> s/empty/None/
[16:42:43] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[16:43:59] *** Quits: fandre1986 (~fandre198@62.67.214.101) (Quit: Connection closed)
[16:44:29] *** Quits: Camilo (~hugh@88-111-238-140.dynamic.dsl.as9105.com) (Quit: WeeChat 2.8)
[16:45:05] *** Joins: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[16:46:44] <diverdude> apollo13: i see...is that an issue?
[16:46:59] <apollo13> for me? no. for you? probably :D
[16:47:13] <apollo13> at least if you want to serve your static files :D
[16:47:21] <diverdude> hehe right ok :)
[16:49:04] *** Joins: Camilo (~hugh@88-111-238-140.dynamic.dsl.as9105.com)
[16:49:39] *** Quits: truk_87 (~truk_87@45.131.192.183) (Ping timeout: 250 seconds)
[16:55:55] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:56:05] *** Quits: bitdex_ (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:58:16] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[17:02:07] <diverdude> Does django or gunicorn or both have a limit for how big a POST request can be?
[17:02:50] <carlio> I don't believe so, usually that is restricted by the nginx or apache server in front of it
[17:04:18] <diverdude> hmm seeems that django has : https://docs.djangoproject.com/en/3.2/ref/settings/#data-upload-max-memory-size
[17:08:55] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 250 seconds)
[17:10:55] <GinFuyou> diverdude, there is a difference between "can be" and "should be"
[17:15:26] *** Quits: schinckel (uid38120@ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[17:16:45] *** Quits: luischi (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[17:18:00] <Camilo> Is it ok to post stack overflow links here?
[17:18:18] *** Joins: luischi (~luigi@80.30.201.209)
[17:18:21] <diverdude> GinFuyou: true
[17:27:44] <GinFuyou> Camilo, depends on context, SO itself is not in very high regard here
[17:28:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[17:28:22] <GinFuyou> diverdude, we tried aroun 600-700 MB uploads and django can take it. If it simply doesn't timeout
[17:28:51] <GinFuyou> chunked upload is much nicer though
[17:29:53] *** Joins: fikran (~fikran@user/fikran)
[17:31:57] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:32:13] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[17:34:47] <Camilo> https://stackoverflow.com/questions/70065294/error-migrating-data-with-models-from-django-address-app
[17:35:23] <Camilo> just been struggling with this, can't understand how it is not recognising the address as an address instance
[17:35:27] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[17:35:51] *** Joins: flynn (~mcbloch@user/flynn)
[17:40:12] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:a213:f55e:a5dd:806c)
[17:43:28] <carlio> Camilo: I think you might be missing a comma - after "1 Fake street" there's no comma
[17:43:38] <carlio> so the rest of the arguments get concatenated as a string
[17:43:46] <carlio> >>> 'a' 'b'
[17:43:46] <carlio> 'ab'
[17:44:07] <carlio> not sure but try that
[17:47:32] *** Joins: mattil (~mattil@dzd1hjyd0zkwj5wgrwk-4.rev.dnainternet.fi)
[17:47:33] <Camilo> Unfortunately that's not it, actually it's a copy paste mistake when making the SO post.
[17:47:53] *** Quits: mattil (~mattil@dzd1hjyd0zkwj5wgrwk-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:48:17] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:a213:f55e:a5dd:806c) (Remote host closed the connection)
[17:48:24] <Camilo> Well spotted though. The address successfully saves to the DB, and is successfully retreived from the DB but for some reason the address app thinks it is not an address instance
[17:50:25] <GinFuyou> Camilo, hm, so error happens after migration is applied in typical use?
[17:50:48] <Camilo> Full stack trace: https://dpaste.org/9VWx
[17:51:05] *** Joins: pycode (~pycode@2001:b07:5d28:551:6450:f0b1:f900:8a9c)
[17:51:20] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: No route to host)
[17:51:41] <LordKalma> question: does this seem like a reasonable way to do ORing with Q-objects and django-filter? https://github.com/ruilvo/radioamadorismo-website/blob/master/backend/repeaters/views.py#L40
[17:51:42] <Camilo> This is supposed to be just a data migration. I can save Address to the DB, and I can save Property to the DB, but when I try to assign an address to a property I get this error
[17:51:58] <GinFuyou> so, no, it happens during the migration.
[17:51:59] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 264 seconds)
[17:52:35] <Camilo> Yes, sorry happens when I run manage.py migrate
[17:53:07] <GinFuyou> Camilo, well, I'd also think it's a issue with address lib and historical models
[17:53:34] <GinFuyou> what if you sed address_id instead as probable workaround?
[17:53:42] <carlio> Camilo: I think it's because the entire migration step is run as a transaction, so that when the Property.objects part runs, the row does not exist yet
[17:53:53] <carlio> maybe
[17:54:19] * carlio handwaves
[17:55:10] <Camilo> GinFuyou: I made the changes AKX suggested on SO, but unfortunately still got an error (although a slightly different error)
[17:55:31] <carlio> LordKalma: you could do `filter |= Q(...)` instead of `filter = filter | ` but that's not a functional thing just an observation
[17:56:00] <Camilo> carlio: I don't think that's the problem, in the full code I assign people to buildings in exact same way and it works. Only addresses don't work because for some reason it thinks Address.objects.get() does not return an address instance
[17:56:04] <LordKalma> indeed indeed carlio
[17:56:12] <LordKalma> but other than that, you agree with the approach?
[17:56:12] <carlio> also cleaner would be just to do `filter = queryset` probably instead of filter=None then you have fewer if statements
[17:56:21] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[17:56:30] <carlio> generally it makes sense to me, I'm just nitpicking :)
[17:56:41] <LordKalma> how would `filter = queryset`  be a better start?
[17:57:33] *** luischi is now known as luigibu
[17:57:34] <GinFuyou> Camilo, yes I've read that, but what about my suggestion? If you want to dig the root of the issue instead of workarounds, have to explore that traceback too
[17:57:36] <carlio> Camilo: if you add a pdb breakpoint or something, do you know what Address.objects.get(raw="1 Fake street") returns? just wondering if you have a custom modelmanager which does not raise a DoesNotExist and it's silently returning a strange type? I got nothing
[17:57:39] <GinFuyou> and field code
[17:59:55] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[18:00:15] *** Joins: luigibu (~luigi@80.30.201.209)
[18:02:12] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[18:06:23] <Camilo> carlio: the .get() statement seems to be working, throws errors if results not equal to 1, and the string representation of the model is returned in the error
[18:08:07] <GinFuyou> That's doesn't really tell what type it is
[18:08:39] <Camilo> GinFuyou: ah, at last, I think you solved it! Thank you!
[18:08:50] <Camilo> address_id=Address.objects.get().id
[18:08:55] <GinFuyou> I'd rather suspect check in the lib gets a wrong model type, but checking each step never hurts
[18:10:02] <GinFuyou> Yes, I suspect this should bypass instance type check, but be warned it's workaround that skips proper validation
[18:10:24] <GinFuyou> not sure if it's actually proper one in this case since you have that error
[18:14:07] <Camilo> yeah I'm just really confused how the validation fails, as far as I understand I'm using the same model in both places.
[18:16:10] <GinFuyou> Well, we don't know what lib uses. I didn't take a look how fields usually do the check
[18:16:15] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[18:16:25] <Camilo> https://github.com/furious-luke/django-address/blob/develop/address/models.py#L310
[18:16:35] <Camilo> Is it possible this should be address.models.Address instead of address.Address?
[18:19:09] *** Joins: mattil (~mattil@87-92-90-94.bb.dnainternet.fi)
[18:20:06] <Camilo> Anyway thanks for you help GinFuyou I really appreciate it. The workaround should suffice as a temporary solution
[18:22:30] <GinFuyou> Camilo that's probably a string for apps.get_model()
[18:23:20] <GinFuyou> taking a look at django related fields code... and I can't figure out a thing about it ^_^"
[18:23:51] *** Quits: mattil (~mattil@87-92-90-94.bb.dnainternet.fi) (Ping timeout: 264 seconds)
[18:24:06] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: No route to host)
[18:27:32] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi)
[18:31:56] *** Joins: nemexis (~nemexis@193-62-201-31.ftth.glasoperator.nl)
[18:41:02] *** Joins: MrGst4r (~MrGst4r@195.244.184.74)
[18:47:14] *** Quits: MrGst4r (~MrGst4r@195.244.184.74) (Quit: Client closed)
[18:49:03] *** Quits: luigibu (~luigi@80.30.201.209) (Ping timeout: 264 seconds)
[18:52:18] *** Joins: mattil (~mattil@87-92-90-94.bb.dnainternet.fi)
[18:56:36] *** Quits: mattil (~mattil@87-92-90-94.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[19:00:58] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:12:11] <pycode> where do you usually send a signal? ok...vague question... but in my case, i have a signal called "deal_won" i have to send that signal when....i deal is set to won, now the problem is, if there are many part where i can put a deal as won, should i move the signal into the save() method of the deal MODEL ? if yes, how i can understand if the deal has been set to won? should i always query the db to see if won field has changed?
[19:14:18] *** Quits: lllama (~pentest@83.144.189.80.dyn.plus.net) (Quit: leaving)
[19:19:19] *** Quits: sandeep (~sandeepk@202.14.122.34) (Remote host closed the connection)
[19:24:21] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:24:44] *** Joins: sandeep (~sandeepk@202.14.122.34)
[19:28:05] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-567343-143.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:28:31] *** Joins: MrGst4r (~MrGst4r@195.244.184.74)
[19:30:22] *** Quits: sandeep (~sandeepk@202.14.122.34) (Quit: Leaving)
[19:31:20] *** Joins: luigibu (~luigi@80.30.201.209)
[19:35:01] *** Joins: rannnn8888 (~rannnn888@bzq-79-183-157-9.red.bezeqint.net)
[19:37:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[19:39:14] *** Joins: fikran (~fikran@user/fikran)
[19:41:23] *** Quits: Harlin (~DonQixote@75-163-138-123.clsp.qwest.net) (Quit: Leaving)
[19:42:08] *** Quits: MrGst4r (~MrGst4r@195.244.184.74) (Quit: Client closed)
[19:44:22] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:51:57] *** Quits: rannnn8888 (~rannnn888@bzq-79-183-157-9.red.bezeqint.net) (Quit: Client closed)
[20:00:27] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 264 seconds)
[20:03:51] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[20:04:32] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:09:59] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[20:15:07] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:26:05] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[20:26:25] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:26:57] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[20:27:11] *** Quits: rje_ (~rje@50.35.241.164) (Ping timeout: 256 seconds)
[20:33:36] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[20:55:29] *** Joins: fdan (~fdan@192.146.154.3)
[21:02:47] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[21:04:34] *** Joins: gillzon (~gillzon@2-249-139-174-no288.tbcn.telia.com)
[21:08:51] <gillzon> Is there a way to annotate with multiple values? For e.g annotate with count all orders on date created but then also get the name on the order ?
[21:09:40] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[21:15:24] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:17:38] *** Joins: ianthrive (~ianthrive@166.70.191.9)
[21:22:28] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[21:24:23] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[21:24:31] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[21:24:37] *** Quits: addi (~addi@node-1w7jr9ss4mmea0h4xfq3odqf9.ipv6.telus.net) (Quit: 0xC00010FF)
[21:27:46] *** Joins: rje (~rje@65.141.156.170)
[21:29:38] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:31:01] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[21:31:55] *** Joins: jmd (~user@de.cellform.com)
[21:38:28] *** Joins: audiobirb (~audio@user/audio)
[21:44:47] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:85bc:764e:7689:fb9f) (Ping timeout: 264 seconds)
[21:46:30] *** Joins: xkuru (~xkuru@user/xkuru)
[21:46:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[21:47:21] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:85bc:764e:7689:fb9f)
[21:48:15] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:48:15] *** ChanServ sets mode: +v EvilDMP
[21:48:36] *** Joins: fikran (~fikran@user/fikran)
[21:52:08] *** Joins: explore (uid233125@id-233125.hampstead.irccloud.com)
[21:53:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[21:53:39] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:58:22] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[22:03:43] *** Joins: mgauthier (~mgauthier@82.66.23.42)
[22:06:32] <mgauthier> Hello guys, Could you help me on a basic question, I have a ImageField on my model, I need to add 400 item in my table and I don't know how to add image to imagefield. I tried to add the os.path but it doesn't upload the image juste the path.
[22:08:58] <pycode> how can i access
[22:09:16] <pycode> the kwargs of the request inside a view?
[22:19:41] <pycode> view.kwargs
[22:19:43] <pycode> neverminid
[22:23:15] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 264 seconds)
[22:23:21] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[22:25:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:31:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[22:32:40] *** Joins: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it)
[22:33:08] *** Quits: pycode (~pycode@2001:b07:5d28:551:6450:f0b1:f900:8a9c) (Read error: Connection reset by peer)
[22:33:28] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:34:25] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:34:25] *** ChanServ sets mode: +v EvilDMP
[22:36:27] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 264 seconds)
[22:36:53] *** Quits: Tas-sos (~Tas-sos@78-203-151.adsl.cyta.gr) (Quit: leaving)
[22:40:37] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:42:22] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[22:43:18] *** Quits: Elzington (~Elzington@static-68-235-44-38.cust.tzulo.com) (Quit: Leaving)
[22:43:22] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[22:47:18] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[22:47:46] *** Joins: stdout (~stdout@216.163.21.11)
[22:49:06] *** Quits: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 245 seconds)
[23:09:27] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 264 seconds)
[23:11:15] *** Quits: pro_z (~pro_z@37.214.63.5) (Ping timeout: 264 seconds)
[23:12:24] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:12:24] *** ChanServ sets mode: +v EvilDMP
[23:15:55] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[23:17:29] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[23:21:59] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[23:22:01] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[23:22:01] *** Quits: carloratm (carloratm@tilde.club) (*.net *.split)
[23:22:01] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[23:22:01] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[23:22:03] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 264 seconds)
[23:22:10] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[23:22:13] *** Joins: marienz (~marienz@libera/staff/marienz)
[23:22:25] *** Joins: duoi (~duoi@user/duoi)
[23:47:16] *** Quits: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Read error: Connection reset by peer)
[23:52:45] *** Quits: nemexis (~nemexis@193-62-201-31.ftth.glasoperator.nl) (Remote host closed the connection)
[23:54:34] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 260 seconds)
[23:56:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[23:57:56] *** Joins: fikran (~fikran@user/fikran)
