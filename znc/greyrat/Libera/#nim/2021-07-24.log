[00:02:53] *** Joins: xet7 (~xet7@user/xet7)
[00:07:47] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[00:08:30] *** Joins: xet7 (~xet7@user/xet7)
[01:05:46] *** Quits: asd (~noname@user/asd) (Ping timeout: 252 seconds)
[01:07:45] *** Joins: asd (~noname@user/asd)
[01:46:45] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:47:10] *** Joins: supakeen (~user@python/site-packages/supakeen)
[02:16:43] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[02:28:34] <FromDiscord> <retkid> hey
[02:28:39] <FromDiscord> <retkid> anyone here good with moe?
[02:29:58] <FromDiscord> <retkid> @willyboar would you like to help me with some stuff? their discord is deaaaaddd
[02:30:49] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/868251327233413231/unknown.png
[02:30:53] <FromDiscord> <retkid> this infuriates me
[02:35:23] *** Quits: max22- (~maxime@2a01cb0883359800bd116740ea76b4cc.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:36:37] <FromDiscord> <willyboar> ping fox0430
[02:37:17] <FromDiscord> <willyboar> i don't use it often
[02:38:35] *** Joins: max22- (~maxime@2a01cb088335980064effcf678bb0d81.ipv6.abo.wanadoo.fr)
[02:42:11] <FromDiscord> <retkid> im gonna try a little bit more then I'll start annoying him
[02:53:25] *** Quits: max22- (~maxime@2a01cb088335980064effcf678bb0d81.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[03:10:33] <FromDiscord> <@bracketmaster-5a708063d73408ce4> nimble is really nice
[03:10:44] <FromDiscord> <@bracketmaster-5a708063d73408ce4> that why i wish all software was written in nim
[03:10:50] <FromDiscord> <@bracketmaster-5a708063d73408ce4> so I'd only need one package manager
[03:16:42] <FromDiscord> <ElegantBeef> Did you see that the PR that fixed your const issue was merged? 😄
[03:26:14] <FromDiscord> <codic> sent a code paste, see https://play.nim-lang.org/#ix=3tVD
[03:26:33] <FromDiscord> <codic> yep, just wrap it with parens
[03:30:05] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[03:30:29] *** Joins: supakeen (~user@python/site-packages/supakeen)
[03:38:05] <FromDiscord> <saem> [timotheecour (Timothee Cour)](https://matrix.to/#/@timotheecour-557c78ad15522ed4b3e1de68:gitter.im)\: hoping you know, I'm having trouble finding an answer, do we test the runnable examples in the rst files for the manual and tutorials?
[03:52:59] *** Quits: beshr (~beshr@user/beshr) (Remote host closed the connection)
[03:53:14] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[03:53:15] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[03:53:15] *** Joins: beshr (~beshr@user/beshr)
[04:55:58] <FromDiscord> <carmysilna> sent a code paste, see https://play.nim-lang.org/#ix=3tVU
[04:59:25] <FromDiscord> <saem> 2 days ago\: https://github.com/nim-lang/Nim/commit/01fc9e58ca8b694eac6c07b05c26c9d98cbd141c
[05:37:02] <fn> <11ForumUpdaterBot99> New thread by JPLRouge: Two questions on Import relating to strip , see https://forum.nim-lang.org/t/8262
[05:51:07] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[06:53:59] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:05:43] <FromDiscord> <carmysilna> sent a code paste, see https://paste.rs/sYQ
[07:06:34] <FromDiscord> <generic linux user> more data?
[07:07:17] <FromDiscord> <carmysilna> what do you want/need? It's pretty weird, just randomly started occurring after making some benign changes
[07:07:39] <FromDiscord> <generic linux user> the errors?
[07:07:56] <FromDiscord> <carmysilna> That's all it gives me `Execution failed with exit code 35584`
[07:08:21] <FromDiscord> <carmysilna> sent a code paste, see https://play.nim-lang.org/#ix=3tWe
[07:11:29] <FromDiscord> <@bracketmaster-5a708063d73408ce4> can I echo a stmtlist as it would appear in an actual nim file?
[07:13:56] <FromDiscord> <carmysilna> Fails on both stable and devel with that error code
[07:13:57] <FromDiscord> <ElegantBeef> `.repr`
[07:18:50] *** Joins: TejasAgarwal (~tejasagar@103.94.113.146)
[07:22:35] *** Quits: TejasAgarwal (~tejasagar@103.94.113.146) (Client Quit)
[07:22:54] *** Joins: TejasAgarwal (~tejasagar@103.94.113.146)
[08:29:00] <FromDiscord> <Jakraes> Quick question, is there a way to know my current IPV4?
[08:29:11] <FromDiscord> <Jakraes> With a Nim library that is
[08:33:47] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:39] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:00:22] <FromDiscord> <Jakraes> Nvm I figured it out
[09:10:34] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:39:26] <fn> <11ForumUpdaterBot99> New thread by Doongjohn: Nim online playground using Monaco and Wandbox api, see https://forum.nim-lang.org/t/8263
[09:41:27] <FromDiscord> <Rika> no link? in the forum post i mean lol
[09:51:27] *** Quits: TejasAgarwal (~tejasagar@103.94.113.146) (Quit: Ping timeout (120 seconds))
[09:53:55] *** Joins: TejasAgarwal (~tejasagar@103.94.113.146)
[10:20:18] *** Joins: max22- (~maxime@2a01cb088335980053c9c2b1ba6a337e.ipv6.abo.wanadoo.fr)
[10:25:21] *** Quits: TejasAgarwal (~tejasagar@103.94.113.146) (Quit: The Lounge - https://thelounge.chat)
[11:13:15] <FromDiscord> <Varriount> Anyone know how I can resolve this error from Nimble: "Could not download: No SSL/TLS CA certificates found."?
[11:13:40] <FromDiscord> <Varriount> I'm on Windows, so I would have assumed that Nimble would pick up the system certificates automatically.
[11:19:23] <FromDiscord> <hamidb80> you should download and put `cacert.pem` and put ut in `~/.nimble/bin`
[11:20:46] <FromDiscord> <hamidb80> https://forum.nim-lang.org/t/7551
[11:25:09] <FromDiscord> <hamidb80> @Varriount
[11:38:25] <FromDiscord> <rishavs (Rishav Sharan)> is random next much more efficient than using rand?
[11:44:47] *** Quits: max22- (~maxime@2a01cb088335980053c9c2b1ba6a337e.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[12:00:53] <FromDiscord> <haxscramper> `rand` calls `next`
[12:01:44] <FromDiscord> <haxscramper> in a loop, so yes, `next` is faster than `rand`
[12:11:14] *** Joins: max22- (~maxime@2a01cb08833598000473539d1dc4af1c.ipv6.abo.wanadoo.fr)
[12:21:30] *** Quits: max22- (~maxime@2a01cb08833598000473539d1dc4af1c.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[12:23:40] <FromDiscord> <rishavs (Rishav Sharan)> Thanks!
[13:12:59] *** Joins: max22- (~maxime@2a01cb0883359800f2f9ed590cd23cbe.ipv6.abo.wanadoo.fr)
[14:00:47] <FromDiscord> <rishavs (Rishav Sharan)> how would I go about updating multiple rows in a single call using db\_postgres?↵I created a single string as `var query = "update mytable set x = x1 where id = id1 ; update mytable set x = x2 where id = id2 ;  .... update mytable set x = xn where id = idn ;"`↵and then tried to execute it as `db.exec(sql query)`↵but I am getting the error `Exception message: ERROR:  cannot insert multiple commands into a prepared sta
[14:09:06] <FromDiscord> <haxscramper> I would assume you need to use multiple prepared statements
[14:09:30] <FromDiscord> <haxscramper> And execute them in sequence
[14:10:46] <FromDiscord> <rishavs (Rishav Sharan)> I really want to make a single db call. Otherwise it would take too many calls
[14:14:40] <FromDiscord> <haxscramper> then make a query in a single statement somehow, judging from quick search it is a postgres-specific question
[14:15:07] <FromDiscord> <haxscramper> I.e. nim bindings can only give you as much options as postgres itself in that scenario
[14:16:04] <FromDiscord> <haxscramper> And Postgres does not seem to allow multiple statements in single prepared one
[14:39:46] *** Quits: max22- (~maxime@2a01cb0883359800f2f9ed590cd23cbe.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[14:47:00] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[14:57:41] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[14:58:20] *** Joins: xet7 (~xet7@user/xet7)
[15:20:53] *** Joins: Vladar (~Vladar@46.162.2.53)
[15:24:37] <FromDiscord> <krisppurg> Hey guys, I have a problem with sets for some reason I seem to get the error ↵`Error: set is too large`↵https://play.nim-lang.org/#ix=3tY3↵Any reasons why I am getting this?
[15:26:28] <FromDiscord> <zidsal> So a set is really a bit set↵↵For signed integers the set's base type is defined to be in the range 0 .. MaxSetElements-1 where MaxSetElements is currently always 2^16.
[15:26:57] <FromDiscord> <generic linux user> should i take json or csv?
[15:27:14] <FromDiscord> <generic linux user> for a small nunber of exported data?
[15:27:39] <FromDiscord> <zidsal> Isn't that going to depend on where you need to export it to and what consumes that?
[15:28:09] <FromDiscord> <generic linux user> nono, it has been exported, i am importing it
[15:28:55] <FromDiscord> <zidsal> And is the exported data suitable for a CSV format (1 dimensional) or when it's exported do rows refer to other rows
[15:30:31] <FromDiscord> <generic linux user> its 1 dimensional
[15:31:38] <FromDiscord> <generic linux user> In reply to @zidsal "And is the exported": its just some links tho
[15:32:26] <FromDiscord> <krisppurg> In reply to @zidsal "So a set is": So what should I do instead? I have an enum PermissionFlags and it is way larger than UserFlags.
[15:34:24] <FromDiscord> <zidsal> If you just want sets for quick intersection checks e.t.c you could just use a hash set it won't be as memory efficient as it's not stored as uint bitset but it will have the same functionality. Given that you only have 20 or so entries in the set I doubt you would notice the memory difference
[15:35:53] <FromDiscord> <zidsal> @generic linux user  I would just use Nims built in CSV parser, just check how the parser handles escaped commas as you can technically get them in urls
[15:36:38] <FromDiscord> <krisppurg> alright
[15:44:10] <FromDiscord> <generic linux user> its simple it doesnt even need csv parser
[15:49:21] <FromDiscord> <krisppurg> sent a long message, see https://paste.rs/XJS
[15:49:30] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[15:51:05] <FromDiscord> <zidsal> I don't think that cast does you need it to do 1 sec let me get to my pc
[15:51:59] <FromDiscord> <krisppurg> The reason why I casted is because I want to convert a flag to an integer
[15:52:35] <FromDiscord> <zidsal> are you trying to get the sum of all the values in your set?
[15:52:40] <FromDiscord> <konsumlamm> casting a `HashSet[UserFlags]` to an `int` will obviously fail, those two aren't related in any way
[15:53:05] <FromDiscord> <konsumlamm> i feel like you want a builtin set, but don't want to set the `enum` members to such high values
[15:53:39] <FromDiscord> <konsumlamm> the discord flags are only powers of 2 because it already is a bitset
[15:53:41] *** Joins: arkurious (~arkurious@user/arkurious)
[15:54:27] <FromDiscord> <konsumlamm> so `set[UserFlag]` should be equivalent to discords "`UserFlags`"
[15:55:01] <FromDiscord> <krisppurg> In reply to @konsumlamm "so `set[UserFlag]` should be": yes that is what I want to do
[15:55:13] <FromDiscord> <konsumlamm> alternatively, just use an `int`/`uint` to represent the flags
[15:55:48] <FromDiscord> <krisppurg> example?
[15:57:49] <FromDiscord> <konsumlamm> i mean, just do the exact thing the discord API says
[16:00:45] <FromDiscord> <krisppurg> I have permission flags and it is an enum, which larger than UserFlags, but should UserFlags be a const then?↵https://play.nim-lang.org/#ix=3tYe
[16:10:32] <FromDiscord> <krisppurg> @konsumlamm?
[16:13:40] <FromDiscord> <konsumlamm> In reply to @krisppurg "I have permission flags": you can do the same for `UserFlags`, if you don't assign the variants custom numbers
[16:14:05] <FromDiscord> <konsumlamm> the `set` will do the "making the variants powers of two" for you
[16:14:42] <FromDiscord> <konsumlamm> apart from that, your currently assigned numbers seem to be wrong anyway
[16:20:11] <arkanoid> which languages can be considered nim competitors on the topic "moving computations at compile time"? That implies static types, baking consts and so forth.
[16:21:48] <FromDiscord> <Rika> Zig
[16:23:24] <FromDiscord> <krisppurg> In reply to @konsumlamm "apart from that, your": How come? ufHouseBravery is equivalent to 1 << 6, ufBugHunterLevel2 is equal to 1 << 14 and finally ufVerifiedBot is equal to 1 << 16
[16:24:58] <FromDiscord> <konsumlamm> but for example `ufTeamUser` is 68, instead of 1 << 10
[16:26:41] <FromDiscord> <Rika> When using set[T], the values of T correspond to the bit that will be set on the bitset, not the value that will be OR’ed into the bitset
[16:27:44] <arkanoid> Rika, do you know any good Nim vs Zig comparison? I know some Nim but zero Zig, but all the comparisons I'm finding are just complaining about GC where actually there's none now
[16:27:53] <FromDiscord> <konsumlamm> In reply to @arkanoid "which languages can be": Zig, D, C++ (limited), Rust (limited), Jai (if it ever gets released)
[16:28:20] <FromDiscord> <Rika> In reply to @konsumlamm "Zig, D, C++ (limited),": Good list
[16:28:45] <FromDiscord> <haxscramper> I don't think C++ qualify - `consteval` is nowhere near
[16:30:16] <arkanoid> Yeah my experience with C++ would not out it in same list
[16:30:58] <FromDiscord> <konsumlamm> that's why i wrote "(limited)" :P
[16:32:03] <arkanoid> :)
[16:33:58] <arkanoid> do you have any experience with Zig or D? Are there major features I get with these languages that are missing with Nim?
[16:34:26] <FromDiscord> <Rika> You lose a good bit with Zig but that’s their philosophy
[16:35:24] <FromDiscord> <krisppurg> sent a code paste, see https://play.nim-lang.org/#ix=3tYn
[16:35:36] <FromDiscord> <haxscramper> Exceptions, overloading, pure functions (i think)
[16:35:46] <FromDiscord> <haxscramper> inheritance, operator overloading (for zig)
[16:35:55] <FromDiscord> <haxscramper> Js backend
[16:35:58] <FromDiscord> <konsumlamm> In reply to @konsumlamm "you can do the": i said don't assign them values, the `set` will do that for you
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:20] <FromDiscord> <Rika> In reply to @haxscramper "Exceptions, overloading, pure functions": Just to clarify hax is listing features not in Zig but is in Nim
[16:36:24] <FromDiscord> <haxscramper> oh, that's other way around
[16:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:00] <FromDiscord> <haxscramper> yes, I think Zig and C pushed a lot harder for seamless C interop
[16:37:03] <FromDiscord> <haxscramper> Both have some built-in way to `@importc` things, though I would argue that solution is still somewhat inferior
[16:37:03] <FromDiscord> <Rika> Zig has painless custom allocators though I believe
[16:37:10] <FromDiscord> <haxscramper> to the intermediate bindings
[16:38:01] <FromDiscord> <konsumlamm> In reply to @arkanoid "do you have any": timothee has a comparison between Nim and D (<https://github.com/timotheecour/D_vs_nim>)
[16:38:21] <FromDiscord> <konsumlamm> one big difference is that Nim has macros, while D doesn't
[16:38:48] <arkanoid> exceptions: I feel that Monads are a better way (like Option) but unsure, overloading: sweet necessity, pure functions: must have (but nim pure is not really pure), inheritance: I consider inharitance a bad pattern, operator overloading: meh
[16:39:16] <FromDiscord> <konsumlamm> D also has better support for inheritance (and proper interfaces)
[16:39:40] <FromDiscord> <konsumlamm> and you can specify compile time constraints for type parameters
[16:39:42] <arkanoid> thanks for the link!
[16:39:55] <FromDiscord> <konsumlamm> also no custom operators
[16:39:57] <FromDiscord> <haxscramper> I don't think there is any imperative languages that do side effect tracking the way nim does it
[16:40:23] <arkanoid> yeah to me Nim effect trackins is THE nim selling point
[16:41:04] <FromDiscord> <haxscramper> I don't think it majority things that way honestly
[16:41:43] <FromDiscord> <haxscramper> Selling point to functional programmers - maybe, but in most cases it is not developed enough
[16:41:47] <FromDiscord> <haxscramper> Like, there might be interesting applications for that feature
[16:41:48] <FromDiscord> <haxscramper> But so far I haven't seen a lot ofthem
[16:41:53] <FromDiscord> <haxscramper> Basically the same thing as TRM
[16:41:53] <FromDiscord> <haxscramper> sounds great
[16:42:17] <FromDiscord> <haxscramper> probably would work out great, if someone smart enough would figure out good usage patterns
[16:42:52] <FromDiscord> <krisppurg> In reply to @konsumlamm "i said don't assign": Then the some of the value like ufCertifiedModerator does not correspond with 1 << 18.↵https://play.nim-lang.org/#ix=3tYo
[16:42:57] <FromDiscord> <krisppurg> (edit) "value" => "values"
[16:43:33] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/868465303565271040): I don't think it majority thinks that way honestly
[16:44:17] <FromDiscord> <haxscramper> Though TRMs are also broken right now with `{.noRewrite.}` not functioning correctly
[16:44:30] <arkanoid> well, it depends on the experience probably. To control complexity you need a way to isolate problems in logica boxes, and assert some level of trust on them, and purity + assest full set of input parameters is the best way according to math
[16:45:16] <FromDiscord> <konsumlamm> In reply to @haxscramper "Basically the same thing": TRM?
[16:45:26] <FromDiscord> <konsumlamm> oh, term rewrite macros
[16:45:26] <FromDiscord> <haxscramper> Term rewriting macros
[16:45:46] <FromDiscord> <konsumlamm> idk, they seem rather like a hack useful for optimizations to me
[16:45:56] <FromDiscord> <konsumlamm> at least rewrite rules in Haskell are used that way
[16:46:02] <FromDiscord> <haxscramper> I was talking about general effect tracking system, "purity" does not directly require it, we can go on with just "dirty" and "pure" functions
[16:46:14] <FromDiscord> <haxscramper> Not `ReadIOEffect`, `ReadDirEffect`
[16:46:40] <FromDiscord> <haxscramper> Also as user-defined warnings↵(@konsumlamm)
[16:46:41] <arkanoid> Term rewriting macros is the nearest thing I've found to Aspect programming, but the way it can be used at compile time makes also possible to do horrible hacks. Way too powerful to handle
[16:47:26] <FromDiscord> <haxscramper> And "hack useful for optimization" really does not do it enough justice IMO. Like yes, but I would not consider it a hack
[16:48:13] <FromDiscord> <konsumlamm> i'd consider it a hack in the sense that it allows you to completely break any assumptions you have about your code
[16:48:18] <FromDiscord> <haxscramper> the situation is somewhat tricky, because it needs someone to either show they are useful
[16:48:23] <FromDiscord> <haxscramper> Or show they are useless
[16:48:38] <FromDiscord> <haxscramper> and with language feature this powerful it is not really easy
[16:49:14] <FromDiscord> <haxscramper> `> completely break any assumptions you have about your code` - that part I mostly agree with
[16:49:36] <arkanoid> this one, for example, is good https://github.com/Yardanico/nim-strenc
[16:49:38] <fn> <12R2D299> 4GitHub: 7"A tiny library to automatically encrypt string literals in Nim code"
[16:50:39] <FromDiscord> <gerwy> what is the best way to handle API?
[16:51:02] <FromDiscord> <gerwy> like i have some API i want to connect to and get data
[16:51:36] <FromDiscord> <konsumlamm> "some API" is about as general as it gets
[16:51:45] <FromDiscord> <gerwy> hehe
[16:52:00] <FromDiscord> <gerwy> lets say this↵https://openweathermap.org/api
[16:52:22] <FromDiscord> <haxscramper> AST-based overloading might be another very useful feature
[16:52:27] <FromDiscord> <gerwy> or better↵https://pokeapi.co/
[16:52:39] <FromDiscord> <haxscramper> And that one is not really broken, and I even use it sometimes
[16:53:06] <FromDiscord> <gerwy> pokeapi is cool, but idk how to use it, i heard about REST API and i guess its this
[16:54:08] <FromDiscord> <gerwy> do i just connect to server via http or https client in nim↵get the data, parse it in JSON↵done?
[16:54:48] <arkanoid> never felt the necessity to do AST based overloading. Whas the use case?
[16:55:38] <FromDiscord> <krisppurg> @konsumlamm?↵↵https://discord.com/channels/371759389889003530/371759389889003532/868465755149185024
[16:55:50] <arkanoid> the example shows a function that only works with a consts. So what about baking the result of that function application into a const?
[16:55:50] <FromDiscord> <haxscramper> Writing macros with more concrete argument constraints
[16:55:57] <FromDiscord> <haxscramper> Like `untyped` vs `untyped{nkBracket}`
[16:56:27] <FromDiscord> <konsumlamm> In reply to @krisppurg "<@!312654963694108674>?  https://discord.com/channe": just assign them `n` when they're `1 << n` in the discord API
[16:56:28] <arkanoid> ah, ok, within macros make some sense
[16:57:23] <FromDiscord> <haxscramper> Also, you can track side effects, purity and other things when passing `typed` arguments
[16:57:39] <arkanoid> how?
[16:57:49] <FromDiscord> <haxscramper> `typed{const}`
[16:58:04] <FromDiscord> <haxscramper> `typed{noSideEffect}`
[16:58:40] <FromDiscord> <haxscramper> Main problem - most of the macro I write I tape together to make them somewhat working, but ideally macro that for example mutates variable in-place
[16:58:47] <arkanoid> is consts an effect?
[16:58:53] <FromDiscord> <krisppurg> Thanks
[16:58:58] <FromDiscord> <haxscramper> Should be `typed{var}`
[16:59:08] <FromDiscord> <haxscramper> `> is consts an effect?` - no, why?
[16:59:35] <FromDiscord> <haxscramper> `typed{const}` means `A symbol which is a constant.`
[16:59:39] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual_experimental.html#term-rewriting-macros-parameter-constraints
[17:00:32] <arkanoid> Oh! thanks, I have to bridge TRM and AST overloading to make sense. Thanks 
[17:07:09] <FromDiscord> <haxscramper> And I think nim is the only language with ast overloading
[17:08:10] <FromDiscord> <krisppurg> I have CallBackDataFlags, but I want my first value to be `64`, but however doing `cast[int]({cdfEphemeral})` outputs `1`, I want it to be `64`↵https://play.nim-lang.org/#ix=3tYA
[17:08:24] <FromDiscord> <krisppurg> (edit) "I have CallBackDataFlags, but I want my first value to be `64`, but however doing `cast[int]({cdfEphemeral})` outputs `1`, ... I`64`.↵https://play.nim-lang.org/#ix=3tYA" 03added "but" | "`64`↵https://play.nim-lang.org/#ix=3tYA" => "`64`.↵https://play.nim-lang.org/#ix=3tYA"
[17:08:24] <FromDiscord> <haxscramper> So maybe it really just a matter of someone figuring out righ tuse
[17:10:10] <FromDiscord> <haxscramper> why can't you just do bitmaksing?↵(@krisppurg)
[17:10:17] <FromDiscord> <haxscramper> Without `set` at all
[17:10:25] <FromDiscord> <haxscramper> If you need such tight control over where each bit goes
[17:10:30] <FromDiscord> <konsumlamm> In reply to @krisppurg "I have CallBackDataFlags, but": hmm, i think you need a few dummy variant for 0..5 then
[17:10:45] <FromDiscord> <konsumlamm> or just use `int`/`uint`, that's probably easier
[17:11:15] <FromDiscord> <haxscramper> Prints 64
[17:11:23] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3tYE
[17:11:31] <FromDiscord> <haxscramper> But better use `int`/`uint` & bit(and\|or)
[17:11:39] <FromDiscord> <haxscramper> from std/bitops
[17:11:57] <FromDiscord> <krisppurg> but the flags are only 1↵cast[int]({cdfEphemeral})
[17:12:07] <FromDiscord> <krisppurg> https://discord.com/developers/docs/interactions/slash-commands#interaction-response-object-interaction-application-command-callback-data-flags
[17:12:09] <FromDiscord> <haxscramper> then use bit operations
[17:12:15] <FromDiscord> <krisppurg> (edit) "1↵cast[int]({cdfEphemeral})" => "1"
[17:12:16] <arkanoid> https://github.com/sealmove/binarylang
[17:12:18] <fn> <12R2D299> 4GitHub: 7"Binary parser/encoder DSL"
[17:12:31] <FromDiscord> <haxscramper> `EPHEMERAL	1 << 6	only the user receiving the message can see it`
[17:12:45] <FromDiscord> <haxscramper> It says `1 << 6`
[17:13:15] <FromDiscord> <haxscramper> I don't think you can explicitly say the same thing with `set` and than safely cast it
[17:14:49] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3tYG
[17:14:51] <FromDiscord> <haxscramper> But this one also depens on node positions
[17:15:04] <FromDiscord> <haxscramper> enum field positions\
[17:17:55] <FromDiscord> <krisppurg> So, cast[int](cdfEphemeral)?
[17:18:20] <FromDiscord> <haxscramper> why cast?
[17:18:27] <FromDiscord> <Rika> i would like to help but i am unsure of what the issue is
[17:18:40] <FromDiscord> <haxscramper> `cdfEphemeral.int`
[17:18:57] <FromDiscord> <haxscramper> or rather `const cdfEphemeral 1 shl 6`, you don't even need an enum if you have a single value
[17:19:11] <FromDiscord> <Rika> missing = before 1
[17:19:22] <FromDiscord> <Rika> or wait did the bridge eat it
[17:19:23] <FromDiscord> <Rika> smh
[17:20:29] <FromDiscord> <haxscramper> Anyway, if you only need to send data with `1 shl 6` bitflag set, the easiest way would be to just do exactly that
[17:21:07] <FromDiscord> <Rika> use `set` if combinations of values are possible; otherwise just use consts
[17:21:12] <FromDiscord> <Rika> (edit) "possible;" => "possible,"
[17:33:52] *** Joins: max22- (~maxime@2a01cb088335980097871a68dc561c25.ipv6.abo.wanadoo.fr)
[17:35:58] *** Quits: max22- (~maxime@2a01cb088335980097871a68dc561c25.ipv6.abo.wanadoo.fr) (Client Quit)
[17:40:05] *** Joins: max22- (~maxime@2a01cb08833598003b8c29bf83ffbacf.ipv6.abo.wanadoo.fr)
[17:41:24] *** Quits: max22- (~maxime@2a01cb08833598003b8c29bf83ffbacf.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[17:52:42] <arkanoid> and then I find that package that would have saved a lot of time weeks ago: https://github.com/disruptek/dust why arent's these great tools in nimble list!?
[17:52:45] <fn> <12R2D299> 4GitHub: 7"DUST is Unattended Syntax Truncation"
[17:53:11] <FromDiscord> <Rika> im pretty sure disruptek was against using nimble
[17:53:14] <FromDiscord> <Rika> so he didnt add it
[17:53:36] <arkanoid> what's the point of not using nimble?
[17:54:00] <arkanoid> I mean, the project uses nimble, it is just not published on the package list
[17:54:46] <arkanoid> I'm not raising any critic, just curious. I'd have used it
[17:55:20] <FromDiscord> <Rika> i dont think it is wise to say in case of being wrong...
[17:57:12] <arkanoid> I mean I'd have used the dust tool, not "I'd have used nimble to publish the tool"
[17:58:08] <FromDiscord> <Rika> i mean "i dont really know why he didnt use nimble so maybe i shouldnt say"
[18:00:03] <arkanoid> so now the nimble package list is not really the package lise, as some of the best resources lives elsewhere
[18:00:14] <arkanoid> s/lise/list
[18:01:59] <FromDiscord> <zetashift> You can make an issue and ask disruptek to add it to the list, but knowing him he really does not like nimble, and nimble shouldn't be in charge of forcing people to submit their packages to the list
[18:02:09] <FromDiscord> <haxscramper> arkanoid\: there are some issues with nimble
[18:02:16] <FromDiscord> <haxscramper> Like a lot actually
[18:03:03] <FromDiscord> <haxscramper> he said he is not goting to add packages to any list, but you are free to add them anywhere [zetashift](https://matrix.to/#/@sp33der89:matrix.org)
[18:03:33] <FromDiscord> <zetashift> ah I missed that, that's nice, but personally it feels wrong to add a package to a list that isn't mine \:P
[18:04:06] <arkanoid> there might be problems with nible, but what's the alternative? Should users just search "desired tool + nim" on google or github?
[18:04:47] <FromDiscord> <haxscramper> he developed his package manager as well https://github.com/disruptek/nimph
[18:04:47] <arkanoid> surely there's zero desire to publish someone else tool to public repo
[18:04:49] <fn> <12R2D299> 4GitHub: 7"Nim package hierarchy manager from the future 🧚"
[18:05:00] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[18:05:16] *** Joins: fputs_ (~fputs@137.220.33.212)
[18:05:50] <FromDiscord> <haxscramper> and if you want comprehensive explanation as to what can be improved in nimble see https://github.com/nim-lang/RFCs/issues/398
[18:06:15] <FromDiscord> <haxscramper> Well, at least that's what I think on that topic, though it seems it is close to an average opinion
[18:07:20] <FromDiscord> <zetashift> a very well made RFC
[18:07:21] <FromDiscord> <haxscramper> ye
[18:07:25] <FromDiscord> <haxscramper> almost a week total
[18:07:48] <arkanoid> oh! ok, if he delivers his own package manager it makes sense. I'm quite aware of some nimble problems as I'm into reproducible builds, but I mainly use it to reach out community resources
[18:08:05] <FromDiscord> <haxscramper> And I'm still not sure - there are so few comments because I laid it out so well, or something else
[18:13:02] <arkanoid> nim + effect tracking + reproducible builds = huge selling point. I'm currently using nix-shell to layout my project dir and leveraging on purity/Monads as much as possible
[18:13:10] <FromDiscord> <dom96> We’re just waiting for the implementation to get going 🙂
[18:13:14] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[18:13:22] <FromDiscord> <Rika> impl of what?
[18:13:45] <FromDiscord> <dom96> Of the changes proposed by the RFC
[18:13:54] <FromDiscord> <haxscramper> literally just that?
[18:15:19] <FromDiscord> <haxscramper> Even if I discard my doubts and really convince myself that whatewher I wrote is exactly what we need, there are still things left to discuss
[18:15:24] <FromDiscord> <Rika> rfc already wholly approved?
[18:16:05] <FromDiscord> <haxscramper> no, it is not marked as accepted
[18:16:29] <FromDiscord> <haxscramper> I thought it could be discussed at one of the dev meetings
[18:16:44] <FromDiscord> <dom96> Who are you waiting to approve it?
[18:16:46] <FromDiscord> <haxscramper> Quoting myself from the #nimble discussion> I don't think it is really necessary to focus too much on dependency resolution algorithm alone - after all it is a pretty self-contained implementation part, and it has a lot of prerequisites that we should also discuss↵> Such as requires "package/source" or requires "package/bin" for example↵> Or what exactly optional dependency is and whether everyone agrees their semantics (I'm talki
[18:17:06] <FromDiscord> <haxscramper> Araq usually adds "Accepted RFC" tag↵(@dom96)
[18:17:18] <FromDiscord> <haxscramper> At least if we talk about formal approval
[18:18:36] <FromDiscord> <haxscramper> I forgot to add notes from our `#nimble` MVS discussion, I think that could be added as well
[18:19:05] <FromDiscord> <haxscramper> And I haven't seen any opinion on things like `package/lib` for optional dependencies
[18:19:15] <FromDiscord> <haxscramper> I discussed it with [leorize](https://matrix.to/#/@leorize:envs.net) , but that's it
[18:19:47] <FromDiscord> <haxscramper> Althoug that discussion was quite comprehensive as well, so it is not like I came up with idea at random and decided to plug it into rfc, so maybe that's fine
[18:20:07] <FromDiscord> <haxscramper> `package/lib`, `package/bin`
[18:20:23] <FromDiscord> <dom96> I’ll just link again to what I wrote in the RFC: https://github.com/nim-lang/RFCs/issues/398#issuecomment-873658656. ↵I don’t see a reason not to move forward with this.
[18:22:56] <FromDiscord> <haxscramper> I guess if nobody objects, it is completely fine ...
[18:23:34] <FromDiscord> <dom96> If you start splitting this up you’ll likely get more comments too. I.e creating those sub-tasks I proposed
[18:24:18] <FromDiscord> <dom96> Approving an RFC like this won’t mean much since there is a lot of proposed changes. The detail will always need to be discussed.
[18:24:28] <FromDiscord> <haxscramper> I can split this into more actionable entries and add them as issues into nimble directoy
[18:24:35] <FromDiscord> <haxscramper> directory\
[18:24:48] <FromDiscord> <dom96> Nimble directory?
[18:24:58] <FromDiscord> <carmysilna> An update on my earlier problem: now the exit code is 11, not 35584. still no message
[18:24:59] <FromDiscord> <haxscramper> repo\
[18:25:31] <FromDiscord> <dom96> Sure. It’s a necessity. You can’t do everything yourself.
[18:25:50] <FromDiscord> <dom96> Let’s have tasks that others can pick up 🙂
[18:27:59] <arkanoid> I've not read the RFC, have you ever read how nix-os (nix in general) or gnu guix handles this? With that system you can define everything and get reproducible builds out of the box in a functional way
[18:30:14] <FromDiscord> <carmysilna> Okay, so in zsh-started-from-fish and bash-started-from-zsh-started-from-fish it fails with exit code 11 but in bash-started-from-fish and fish it fails with exit code 35584. very weird bug
[18:30:37] <FromDiscord> <haxscramper> Yes, but IIRC nix does not do dependency resolution, and there are multiple other problems that have to be considered
[18:31:26] <arkanoid> nix doesn't do dependency resolution?! Nix is all about dependency resolution
[18:31:27] <FromDiscord> <gerwy> okay every weather api requires me to log in even tho its "free" ehh what a world we live in↵i guess time for some web page data fetching↵↵is there any nimble package specialized in that or do i need to do it myself?
[18:31:45] <FromDiscord> <haxscramper> Also we already have PR for lockfiles & reproducible builds are required by status
[18:32:11] <arkanoid> haxscramper, just have a look: https://www.tweag.io/blog/2019-02-06-mapping-open-source/
[18:33:15] <FromDiscord> <haxscramper> for dep resolution I was referring to https://news.ycombinator.com/item?id=13200603
[18:33:40] <FromDiscord> <haxscramper> maybe that's changed
[18:36:46] <arkanoid> if with dependency resolution you mean doing that in the way that breaks reproducible builds, not, that's would be an hell of a problem (see python + conda)
[18:42:43] <FromDiscord> <haxscramper> for reproducible build we can have lockfiles
[18:45:06] <arkanoid> it is not as easy as that. You need an offline box with modified system clock and isolated dependencies up to libc to have reproducible build. 
[18:45:07] <emery> arkanoid: I've tried autopacking nimble for nix, it kind of works https://github.com/nix-community/flake-nimble
[18:45:09] <fn> <12R2D299> 4GitHub: 7"Nimble packages Nix flake [maintainer=@ehmry]"
[18:46:06] <emery> but detection of non-nim depedencies does not work
[18:48:49] <arkanoid> Long story short reproducible builds means that the hash of the builded exe/lib is 1:1 and never changing given the same input information. locking file is just part of the game, what if libc changes?
[18:49:01] <arkanoid> emery: that's superb!
[18:49:09] <arkanoid> how log have you been working on this?
[18:49:27] <FromDiscord> <haxscramper> libc is out of the scope of nim package management
[18:49:30] <emery> i don't remember, I wrote that a while ago and stopped updating it
[18:49:35] <FromDiscord> <haxscramper> we have `foreignDep`
[18:49:47] <FromDiscord> <haxscramper> Maybe we could bild something on top of that
[18:49:54] <emery> yea, changes to libc propragate from the compiler
[18:50:12] <emery> at least in nix land
[18:50:16] <arkanoid> so reproducible build is not possible with nim package management alone, and should not be named as that
[18:50:46] <FromDiscord> <haxscramper> why can't we name it that way
[18:51:08] <FromDiscord> <haxscramper> we make it so nim part of the build is reproducible
[18:53:57] <arkanoid> yeah, but that's kinda misleading. It just makes build reproducible until something changes in the context. You take your "reproducible project", move it to another system, you build it and is potentially different
[18:54:14] <arkanoid> and you are not tracking why
[18:54:44] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[18:55:00] <FromDiscord> <haxscramper> if we try to use term "reproducible project" everybody would have to be used to that
[18:55:06] <FromDiscord> <haxscramper> And I don't think anyone uses this term
[18:55:09] *** Joins: supakeen (~user@python/site-packages/supakeen)
[18:56:18] <FromDiscord> <haxscramper> like, our scope, right now, is nim
[18:56:21] <FromDiscord> <haxscramper> not whole universe
[18:56:23] <FromDiscord> <haxscramper> but nim
[18:56:59] <arkanoid> yeah, that's just a terminology issue. I'm just saying that to make a package manager capable to handle reproducibility, it has to depends on the hash on the nim compiler and it's dependencies
[18:57:45] <FromDiscord> <haxscramper> we can already depend on `nim >= 1.4.0`
[18:58:06] <FromDiscord> <haxscramper> dependency hashing is another issue, but we might get to it later on
[18:58:09] <FromDiscord> <haxscramper> if that is really necessary
[18:59:38] <arkanoid> just consider that final assert of reproducibility is sha256(oldbin) == sha256(newbin) wherever you build it. nim >= 1.4.0 won't pass that
[19:04:13] <arkanoid> I mean, it's hard, but it is a requirement for many pipelines. There are already solutions out there to fix this, and yeah when you say that is outside the scope of nim that's exactly the point, as a nim package manager can't do reproducible builds. Another example: nim compilation depends on system clock (compilation time), and you have to disable it 
[19:06:40] <FromDiscord> <haxscramper> to solve this problem we can just package nim for one of the existing solutions. If I understand correctly, that's what https://github.com/nix-community/flake-nimble does
[19:06:42] <fn> <12R2D299> 4GitHub: 7"Nimble packages Nix flake [maintainer=@ehmry]"
[19:09:22] <FromDiscord> <dom96> That is a good point arkanoid. The C compiler that is used for compilation is something we should consider tracking
[19:09:38] <FromDiscord> <dom96> Compile time/date is usually handled by env vars that override this AFAIK
[19:11:46] <arkanoid> yeah it is possible to do reproducible builds today with nim, I'm already doing it with nix
[19:12:33] <FromDiscord> <dom96> the problem for Nimble is that it's not in charge of downloading Nim/GCC for you, so I'm not sure how we would handle those requirements
[19:13:24] <FromDiscord> <haxscramper> we can communicate this between choosenim and nimble somehow
[19:14:09] <FromDiscord> <dom96> Perhaps. I think we don't have to worry about this for now, we can write this data into lock files but not worry about Nimble enforcing this
[19:14:11] <emery> FWIW there work on nix to make it capabable of evaluating metadata fetched from a package manager like nimble or opam, I was prefetching that metadata, which has been done with opam  https://github.com/NixOS/rfcs/pull/92
[19:15:57] <emery> if that works then its a matter of having good nimble metadata to feed to some nix expression
[19:18:08] <arkanoid> exactly! it is more important to have a good nim package repo with metadata to assest the requirements for reproducible builds
[19:18:36] <FromDiscord> <haxscramper> that is covered by an RFC
[19:19:14] <FromDiscord> <haxscramper> I don't mention package hash on publish, but I guess that can be easily added
[19:20:11] <emery> I should update my stuff to generate a report of what doesn't build and why
[19:27:07] <arkanoid> emery, I think you did an important work and your ideas are worth sharing in the general topic of nim package management. Point is not "make reproducible builds with nim" as that's impossible, but "enable easy reproducibility via external tools"
[19:32:06] <FromDiscord> <dom96> how are reproducible builds with nim impossible?
[19:35:16] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[19:36:00] <FromDiscord> <haxscramper> In reply to @arkanoid "it is not as": this
[19:36:26] <FromDiscord> <haxscramper> In reply to @arkanoid "I mean, it's hard,": and this
[19:37:54] <arkanoid> dom96: when nim loads a .so will it ensure that it's hash doesn not change from first build?
[19:38:36] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[19:40:15] <FromDiscord> <krisppurg> sent a long message, see http://ix.io/3tZB
[19:45:22] <FromDiscord> <dom96> In reply to @arkanoid "<@132595483838251008>: when nim loads": I mean... it could. You could also statically link everything
[19:45:32] <FromDiscord> <dom96> Nothing about Nim makes this "impossible"
[19:48:42] <arkanoid> dom96: if your target is a small statically linked (musl-like) executable, your're reducing the problem to the point that it makes it trivial to solve
[19:49:36] <arkanoid> in that case yeah, you don't need anything else, but statically linking everything is not an option every time
[19:52:32] <FromDiscord> <dom96> Well of course, the point is it's not impossible 🙂
[19:53:35] <arkanoid> what you need is to pin all your dependencies (up to libc) to a git commit, build the dependency tree with same requirements of reproducible build, at the end you have your reproducible exe. That exactly what nix and gnu-guix do
[19:59:13] <arkanoid> dom96: yet is impossible, as you don't pin gcc clang version even with a static build
[20:00:09] <arkanoid> I mean, you can, but that's outside the scope of nim. That's the whole point
[20:01:46] <FromDiscord> <dom96> We're just arguing over technicalities, I just don't think it's fair to describe it as "impossible"
[20:01:54] <FromDiscord> <dom96> it's possible, maybe with a lot of effort, but definitely possible
[20:03:50] <arkanoid> well, given that, everything is possible. You can make nim compile straight to machine code while embedding posix interface to os
[20:04:20] <FromDiscord> <dom96> yes
[20:04:27] <FromDiscord> <dom96> a better description then is that "it's not practical"
[20:04:58] <arkanoid> terraforming venus is possible, but it's not practical
[20:05:14] <FromDiscord> <dom96> I agree
[20:05:25] <FromDiscord> <dom96> So I wouldn't say "terraforming venus is impossible"
[20:07:48] <arkanoid> taking the discussion to blacks and whites is not going to get far. I mean, I just wanted to address the point that bending nim packaging and building system to address the reproducibility build problem is just part of the solution. It is better to focus on enabling an external tool to do that
[20:08:12] <arkanoid> this is just my opinion
[20:09:19] <FromDiscord> <dom96> The way you worded it sounded to me like you were saying there is an innate property of Nim making true reproducible builds impossible
[20:09:27] <FromDiscord> <dom96> I agree that an external tool should handle this
[20:10:13] <arkanoid> well, what nim lacks to get reproducible builds is larger than what is already in
[20:12:48] <arkanoid> and this is actually a good thing, from my point of view, and I hope that the dev effort won't go in this direction. I'd be happy if the manual would say "to get reproducible builds, enable these flags in the compiler to assure X and Y and use Nix or other tools to address the problem"
[20:13:49] <FromDiscord> <krisppurg> someone?
[20:21:51] <FromDiscord> <krisppurg> https://discord.com/channels/371759389889003530/371759389889003532/868510366735413340
[20:25:32] <federico3> @dom96 yet Nim should not prevent reproducible builds https://tests.reproducible-builds.org/debian/rb-pkg/unstable/amd64/nim.html
[20:40:32] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:44:33] <FromDiscord> <PsychoClay> where does the dynlib pragma look for library files?
[21:42:49] *** Joins: ming (~ming@2601:547:a00:7720::88e8)
[21:45:18] <arkanoid> federico3: exactly
[22:40:04] <FromDiscord> <Valor> What’s the difference between nim and zig. They both seem to want to be “better c” I think?
[22:50:04] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:54:18] *** Quits: ming (~ming@2601:547:a00:7720::88e8) (Ping timeout: 240 seconds)
[23:03:09] <FromDiscord> <exelotl> Zig has a different philosophy - favours explicitness over conciseness or extensibility
[23:04:10] <FromDiscord> <exelotl> from the homepage: No hidden control flow. No hidden memory allocations. No preprocessor, no macros.
[23:04:54] <FromDiscord> <exelotl> Nim has all those things, which means of course it has the potential for devs to misuse all those things.
[23:28:15] *** Joins: max22- (~maxime@2a01cb0883359800a5abe7ad3ddc4599.ipv6.abo.wanadoo.fr)
[23:31:03] <fn> <11ForumUpdaterBot99> New post on r/nim by m33-m33: Tsoding does a video on programming in Nim, see https://reddit.com/r/nim/comments/oqw0zt/tsoding_does_a_video_on_programming_in_nim/
[23:33:00] <FromDiscord> <leorize> nim is not aiming to be "better c", whatever that means \:P
[23:58:02] <FromDiscord> <Daniel> i think ppl might see it as better c due to the reason it translates to c/cpp then it compiles
