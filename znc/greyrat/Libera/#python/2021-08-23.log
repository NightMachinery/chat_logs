[00:00:01] <aphysically> is there anyone against doing all this typing to satisfy static type checkers or would most people agree it generally improves code documentation and helps remove the chance for bugs
[00:00:12] <nedbat> aphysically: i have concerns about it
[00:00:20] <aphysically> what are your concerns?
[00:00:35] *** Quits: magla (~gelignite@55d4e32c.access.ecotel.net) (Quit: Stay safe!)
[00:00:39] <nedbat> aphysically: i agree is improves docs, and helps find bugs
[00:00:50] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 250 seconds)
[00:00:52] <nedbat> aphysically: but: people might feel like it's enough, and relax their testing stance
[00:00:55] <lxer> I only use typing when it is useful. often it is a waste of time
[00:00:56] <Byteflux> with Python it feels a bit forced. it's not as pleasant to work with as languages that a designed to be strongly typed.
[00:01:08] <nedbat> aphysically: and: people will use concrete types where interfaces should have been used instead.
[00:01:15] *** Joins: weibullguy (DRowland@gateway/vpn/protonvpn/weibullguy)
[00:01:20] <nedbat> aphysically: like, declaring something as a list, when any iterable would do.
[00:01:45] <aphysically> ah yeah, I was doing collections.abc.Iterable (I'm not importing anything directly right now yet in my code)
[00:02:04] <stealth_> even if you check for types, end-user still can pass wrong type into function and it will endup raising error/bug anyways
[00:02:33] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[00:02:34] <lxer> certainly when working a lot with datastructures it is terrible having to write all that. especially when input was already checked with other tools, like Marsmallow
[00:02:40] *** Quits: electrostatic (~electrost@2601:600:8600:5a1:6db2:ea9e:70e8:1b11) (Ping timeout: 240 seconds)
[00:04:33] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[00:04:36] <aphysically> that's another thing I haven't learned yet (testing)
[00:05:01] <Byteflux> far more useful than type annotations in python, IMO :)
[00:05:11] *** Joins: moog (~moog@107.242.124.49)
[00:05:16] <aphysically> I know there's a whole suite of options out there from compilation-style runtime testing to unit testing frameworks and such, but I haven't learned what's common to use and available and weighing each
[00:05:22] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Ping timeout: 252 seconds)
[00:05:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[00:05:46] <stealth_> aphysically, test is more useful then typing
[00:05:55] <aphysically> I'm not sure when the best time to learn that is, probably when I switch this code over to a project (like with a setuptools file and such)
[00:06:02] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[00:06:41] *** Quits: inom (~inom@176.59.111.80) (Quit: Leaving.)
[00:06:42] <Byteflux> maybe a good idea to start with the basics, unit testing. take an isolated implementation of something, like a class, test its outputs against inputs and assert your expectations.
[00:06:44] <stealth_> typing is still good to have in like ''' doc string or something, away from being confusing
[00:07:14] *** Joins: _AJ (~AJAlabs@pool-71-183-83-145.nycmny.fios.verizon.net)
[00:07:20] <stealth_> use pytest! don't start with unit test
[00:07:37] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:07:46] *** Quits: shangxiao (~davids@124.182.71.141) (Quit: WeeChat 3.2)
[00:08:12] *** Joins: matsaman (~matsaman@user/matsaman)
[00:08:14] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:e136:95b1:bac0:7698:51de)
[00:08:41] <Byteflux> not saying use the unittest module, just saying start with unit testing.
[00:08:45] <Byteflux> you can do that with pytest or whatever
[00:09:39] <aphysically> I didn't even know python had a built in unit testing module
[00:10:15] <stealth_> ok, well having proper testing will catch a lot of bugs and you can use it whatever you write new code to make sure you didn't break anything.
[00:10:23] *** Joins: dontyouloveshort (~julius@ip5f5bc232.dynamic.kabel-deutschland.de)
[00:10:25] <aphysically> I'm (currently) only using built in libraries, partly because there has been no pressing (or even convenience) need to do otherwise (I haven't had to reinvent the wheel to do anything yet), and partly because I haven't switched to a setuptools project yet
[00:12:34] <stealth_> since test library like pytest, doesn't need to be include in your project `install_requires`, its safe to use it, since only ppl that run the test will need pytest
[00:12:45] *** Quits: dimbag (~Couture@pppoe247h3.ppp.kmv.ru) (Ping timeout: 258 seconds)
[00:12:57] <stealth_> aphysically, setuptools + pip is pretty much the standard now
[00:12:59] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:13:24] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[00:13:40] *** Quits: Modx3 (~vel@user/modx3) (Ping timeout: 240 seconds)
[00:14:16] *** Lord_of_Life_ is now known as Lord_of_Life
[00:14:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[00:15:38] *** Joins: CoolerX (~CoolerX@user/coolerx)
[00:15:48] *** Joins: molt (~molt@79.140.150.21)
[00:16:18] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[00:16:30] *** Joins: fikran (~fikran@user/fikran)
[00:16:37] <jinsun> I like to satisfy type checkers anyway because it is a fun game figuring out how to make those errors go away (without using Any everywhere), and also because I know my tests will be bad
[00:18:13] *** Joins: tx8r (~tx8r@gateway/tor-sasl/tx8r)
[00:18:13] <stealth_> type checking wouldn't have been so bad if it wasn't so slow!
[00:19:44] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[00:20:46] *** Quits: cthulchu (~Cthulchu@46.211.59.153) (Ping timeout: 252 seconds)
[00:21:19] *** Quits: dontyouloveshort (~julius@ip5f5bc232.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[00:21:26] *** Joins: p-i- (~Ohmu@171.6.227.183)
[00:21:59] *** Joins: YoungPrince (~DrBrownbe@apollo.omarsadiq.com)
[00:23:35] *** Quits: fortuno51 (~fortuno51@78.10.204.254) (Remote host closed the connection)
[00:24:38] <aphysically> it's only run at init anyway, right? (and that will be going away? or it already goes way if you import annotations?)
[00:24:59] <bjs> stealth_: you mean the type checker is slow or it took so long for Python to eventually actually do it
[00:25:24] <aphysically> okay I'm not sure about mypy's complaint in strict mode here: https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=cd83f21e5806c7ff20aa9c67c82055a3
[00:25:32] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:a1ee:580f:99d8:c5bc) (Ping timeout: 250 seconds)
[00:25:56] <stealth_> bjs, i am talking about `isinstance`
[00:26:05] <aphysically> oh it complains in not strict mode too
[00:26:06] *** Quits: raub (~Raub_Voge@cpe-107-15-44-154.nc.res.rr.com) (Read error: Connection reset by peer)
[00:26:07] <bjs> stealth_: ah runtime type checking
[00:26:59] <stealth_> mypy is only good for developers to check type, users don't use that or limited by it, so they can pass whatever
[00:27:25] <bjs> stealth_: that is true
[00:27:55] <Byteflux> runtime type checking makes sense if you *need* to be able to know the difference, but not for the sake of actually validating the type IMO
[00:28:23] <bjs> stealth_: i guess you have to decide if you want to do runtime checks at the interface with the user, or whether you want to tell the user "run mypy instead" and then just let the code fail if the wrong type is passed
[00:28:28] *** Quits: the-mask (~the-mask@user/the-mask) (Ping timeout: 252 seconds)
[00:28:33] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:a1ee:580f:99d8:c5bc)
[00:28:59] *** Joins: fortuno51 (~fortuno51@78.10.204.254)
[00:29:41] <stealth_> bjs, code is going to fail regardless, so what the point in stressing over it?
[00:29:57] *** Quits: _AJ (~AJAlabs@pool-71-183-83-145.nycmny.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:30:09] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[00:30:14] <bjs> stealth_: that's why it's up to you,  some people like using isinstance() so they can check and give the user an error message with some readable output before something bad happens
[00:30:26] *** Quits: tx8r (~tx8r@gateway/tor-sasl/tx8r) (Ping timeout: 244 seconds)
[00:31:10] *** Quits: YoungPrince (~DrBrownbe@apollo.omarsadiq.com) (Ping timeout: 240 seconds)
[00:31:13] *** Joins: zaquest (~notzaques@5.128.210.178)
[00:31:30] <stealth_> bjs, depends on the software i suppose, but mostly when whatever you are storing reaches C level it will raise error anyways
[00:31:40] <stealth_> since C is static type
[00:31:59] <bjs> stealth_: huh?  I thought we were talking about Python
[00:32:07] <bjs> code
[00:32:49] <stealth_> bjs, yes, but python is written on top of C so cpython/library you are wrapping will raise error
[00:33:06] <bjs> stealth_: well not necessarily
[00:33:09] <bjs> maybe it just does the wrong thing
[00:33:16] <jinsun> aphysically: mybe a bug in the annotation of str.maketrans in typeshed, you can work around that by doing something like this https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=c6b70845afb3239051ad0d4d7f3b26ee
[00:33:36] <Byteflux> in python it's not immediately clear that an error is due to passing an unexpectedly typed object to a function
[00:33:38] <bjs> stealth_: and C's static type system doesn't help at all for runtime Python code because Python errors (exceptions) are not C errors,  and C's static checker was run long before you ran your Python program so it won't help
[00:33:56] *** Joins: fortuno51_ (~fortuno51@37.120.156.254)
[00:33:57] <Byteflux> that's why type annotations exist and why tools like mypy exist
[00:34:09] <stealth_> bjs, suppose, that's something developers needs to weigh in, if you type check everything your project will be extremely slow, so maybe catching exception is a better route as well.
[00:34:27] <Byteflux> to hopefully identify those issues before runtime, but as mentioned, not everyone uses those tools so some people choose to check types at runtime so they can produce friendlier warnings/errors.
[00:34:43] <bjs> stealth_: to runtime type check yeah, that's why historically in Python people... haven't
[00:34:53] <bjs> except maybe at the interface with the user
[00:35:02] <Byteflux> and yeah it's just a huge waste of time to check *everything*
[00:35:10] <Byteflux> not just performance, but developer time.
[00:35:19] <stealth_> well it would be better to talk with an example, or else we will just be talking in abstraction
[00:36:04] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[00:36:25] *** Quits: fortuno51 (~fortuno51@78.10.204.254) (Ping timeout: 248 seconds)
[00:36:41] <aphysically> jinsun: should I be reporting this upstream then?
[00:37:38] <stealth_> bjs, i am talking about interface with the user part. as a developer end of the code you know what a function takes so you will only provide it. at the user level they could get the data from a html/input form and that would be str vs other types.
[00:37:54] <jinsun> aphysically: you can report it here https://github.com/python/typeshed, I am not entirely sure it is a bug though
[00:38:16] <bjs> stealth_: yeah,  but hopefully that interface is relatively small and you only have to check there. But you are right if you have many layers you end up checking all the way up and down and that's slow
[00:38:24] <bjs> stealth_: there's no answer here,  or well there is an answer and mypy is it
[00:38:33] <bjs> or at least it tries to be the first step towards the answer
[00:38:46] *** Joins: tx8r (~tx8r@gateway/tor-sasl/tx8r)
[00:39:56] <jinsun> aphysically: it is a bug if any Mapping is acceptable not just Dict, if only dict is acceptable then it is not a bug
[00:40:50] <stealth_> bjs, mypy only confirms what you already know! so i dono
[00:41:07] <bjs> stealth_: well if you already knew it then you don't need the runtime checks either
[00:41:43] <bjs> mypy is just saying "hey look I don't need to run these checks at runtime, I can just look at the code and tell if you if you're doing it right", it's exactly the same idea
[00:42:27] <stealth_> bjs, ok, well i haven't used mypy in a very long time, maybe if i use it again, i would have better input on it.
[00:42:36] <bjs> stealth_: mypy is a very standard type checker
[00:42:46] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 252 seconds)
[00:43:20] <stealth_> bjs, it was very buggy when i last tied it, so i didn't bother with it, since it was wasting a lot of time
[00:43:21] *** Quits: tx8r (~tx8r@gateway/tor-sasl/tx8r) (Ping timeout: 244 seconds)
[00:43:34] <bjs> stealth_: it's still very new but seems pretty stable
[00:43:46] <bjs> it's also not the only typechecker (there's pytype which might be more appropriate)
[00:44:36] <aphysically> jinsun: but why is the str, str dict unacceptable? the typeshed/maketrans really needs to declare dict[str,str] separate from dict[str,union[str,int]]  ?
[00:44:43] *** Joins: SuperLag (~akulbe@user/superlag)
[00:45:18] *** Quits: puff (~user@s0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[00:45:59] *** Quits: Haxxa (~Haxxa@122.199.46.17) (Read error: Connection reset by peer)
[00:46:09] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:46:11] <jinsun> aphysically: the problem is that dict is mutable, dict[str, str] will be treated like dict[str, union[int, str, None]] inside the function, so inside the function mypy will allow adding int keys
[00:46:39] <jinsun> so to avoid that it just doesn't allow dict[str, str] and allows only dict[str, Union[str, int, None]]
[00:47:21] <bjs> aphysically: it looks like a type variable binding issue
[00:48:39] <bjs> aphysically: the type of maketrans is `def maketrans(__x: dict[int, _T] | dict[str, _T] | dict[str | int, _T]) -> dict[int, _T]: ...`  so it tries to make that {...} be str: _T, but then translate has type `def translate(self, __table: Mapping[int, int | str | None] | Sequence[int | str | None]) -> str: ...` so it says "ah _T must be int | str | None"
[00:48:56] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Ping timeout: 250 seconds)
[00:49:06] *** Joins: Haxxa (~Haxxa@122.199.46.17)
[00:49:29] <bjs> aphysically: but a dict[str, str] is not a valid dict[str, int | str | None] so you get the error.    If you put the two parts on different lines to give mypy the chance to infer the concrete type of the dict[str, str]  then it can't make this mistake
[00:49:42] <bjs> (or cast() it but that be ugly)
[00:50:51] <stealth_> bjs, python str/bytes to type conversion is extremely slow as well so i am very bummed about it.
[00:50:58] <aphysically> I wouldn't like the line length but how would the cast solution work
[00:51:01] <bjs> stealth_: you mean encode/decode ?
[00:51:34] *** Joins: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl)
[00:51:54] <jinsun> aphysically: cast(dict[str, int | str | None], {...}) instead of {...}
[00:52:14] <stealth_> bjs, no  like `a = '1, 2, 3'; print([int(i) for i in a])` stuff like that
[00:52:39] <bjs> aphysically: something like `return val.translate(cast("dict[int, str]", str.maketrans({char: "\\" + char for char in chars})))`
[00:52:53] <aphysically> yeah indeed, if you separate out the lines there's no complaint: https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=8c8fc472523f6e794e04d13adc22bfa6
[00:52:58] <bjs> aphysically: but I dislike the cast() a lot, because it basically means mypy isn't checking the type inside
[00:53:17] <stealth_> bjs, `print([int(i) for i in '1 2 3'.split()])`
[00:53:48] <bjs> stealth_: ah,  yeah I guess that'd be slow. I don't really know, is it much worse than atoi ?
[00:53:52] <aphysically> so it's a 'bug' (or uh, limitation?) in the way mypy deals with the nested functions?
[00:53:54] <bjs> or other comparable functions
[00:54:20] <bjs> aphysically: I think it's not either a bug or limitation it's just a consequence of the way it does type variable bindings.  That _T thing.
[00:54:26] *** Quits: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com) (Quit: ZNC - https://znc.in)
[00:54:47] *** Joins: bim9262 (~bim9262@cpe-70-113-84-126.austin.res.rr.com)
[00:55:00] <bjs> I'd have to go through the mypy github issues to if it has been talked about before (i'm sure it will have been) and what the status is
[00:55:11] *** Quits: fortuno51_ (~fortuno51@37.120.156.254) (Remote host closed the connection)
[00:55:41] <aphysically> if you do and find it I'd be interested in being pinged with it (not that you have to)
[00:56:30] *** Joins: reset (~reset@user/reset)
[00:56:59] <stealth_> bjs, don't know about this atoi, but ya its very slow, literally you can read rows with types from sqlite and that would be faster then reading normal `open` and readlines
[00:57:08] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[00:57:10] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 240 seconds)
[00:57:44] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[00:58:46] <jinsun> aphysically: https://github.com/python/mypy/issues/4374
[00:59:38] <bjs> stealth_: yeah that doesn't really surprise me, because sqlite isn't going to store them as strings it has to re-parse
[00:59:55] <bjs> stealth_: i was just interested to know if this is a particular Python slowness property and how it compares
[01:00:41] <bjs> aphysically: there is also the point that maketrans and str.translate are just... why?
[01:00:45] <bjs> very old API that nobody uses
[01:01:24] <aphysically> do you have a better suggestion for communicating the "what" of the mentioned function?
[01:01:41] <aphysically> I can make the dict myself and use .get but that seems silly
[01:01:54] <bjs> aphysically: this is a good place for a regex substitute
[01:01:55] <bjs> re.sub
[01:03:08] <aphysically> I guess, seems a little extreme though still
[01:03:38] <stealth_> bjs, its more to do with cpython -> python -> cpython back and forth for slowness.
[01:03:59] <bjs> stealth_: i'm very unsure about that, jumping back into cpython makes it faster
[01:04:05] <bjs> aphysically: extreme?
[01:05:07] <aphysically> using a steamroller to hammer in a nail, I guess
[01:05:27] *** Joins: lapno_ (~lapno@epn141.neoplus.adsl.tpnet.pl)
[01:05:27] <bjs> aphysically: I mean isn't these kind of little textual replacement things kind of exactly what regex is for
[01:05:38] <aphysically> sure I guess
[01:07:35] <stealth_> bjs, you are making too many copies!
[01:07:40] *** Quits: lapno (~lapno@eoh163.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[01:07:41] <bjs> stealth_: copies of what?
[01:07:41] *** Joins: fedenix__ (~fedenix@gateway/tor-sasl/fedenix)
[01:08:52] *** Quits: pro_z (~pro_z@37.214.45.81) (Ping timeout: 250 seconds)
[01:09:06] <stealth_> bjs, data, say you `read()` `data = b'\x00\x00\x00{'` from a file, now `data` is type bytes, and you want to convert it to int, now you pass `data` to cpython and have it pass back int.
[01:09:26] *** Joins: VimVim (~VimVim@85.191.9.175)
[01:09:57] <bjs> stealth_: okay
[01:10:18] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:10:41] <bjs> stealth_: I don't get your point so far
[01:11:06] <stealth_> bjs, same goes for `int('123')` it goes fro python to cpython and back, also a class has to be build around bytes/int/str, ... price you pay for everything being an object!
[01:11:19] *** Quits: sniperwolf (~sniperwol@91.230.98.1) (Ping timeout: 246 seconds)
[01:11:34] <KirkMcDonald> stealth_: I am unclear on what you mean on "python to cpython" here.
[01:11:37] <KirkMcDonald> mean by*
[01:11:47] <bjs> stealth_: okay but "from python to cpython" is totally irrelevant here, because you could happily go from python to cpython and back again ( although really "to cpython" doesn't *mean* anything!?) without copying anything or making new objects
[01:12:19] <bjs> stealth_: if you were to implement str.__int__ in pure Python it'd still get you a "copy",  and it'd well, be slower than the current implementation
[01:12:30] <stealth_> KirkMcDonald, bjs, i don't know better way/word to describe it
[01:12:40] *** Quits: V1mV1m (~VimVim@85.191.61.113) (Ping timeout: 240 seconds)
[01:12:45] <KirkMcDonald> I will say that serialization and deserialization are operations that generally imply scanning through a thing and transforming it into a new thing.
[01:12:48] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[01:12:52] <bjs> stealth_: you mean the function being written in C instead of Python I assumed
[01:13:15] <stealth_> bjs, yes, there is a lot of conversion going on
[01:13:17] <KirkMcDonald> Despite some of the code being written in C, it is still operating on Python objects.
[01:13:17] <bjs> stealth_: but just because the function is written in C does not mean it has to copy anything, and the C functions only copy things when it has to (to make the code do the right thing)
[01:13:39] <bjs> stealth_: but the conversion is *nothing to do with the fact it's in C*,  right?  It's the fact that the language says that int(some_str) returns an int object and the old str object is still around
[01:13:49] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:13:52] <Byteflux> do you mean like how you have numeric byte arrays in other languages instead of byte strings?
[01:13:58] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[01:14:02] <stealth_> bjs, when i say copy i meant `b'\x00\x00\x00{'` != `123` those are two different copies, even though they could mean the same thing.
[01:14:11] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 268 seconds)
[01:14:15] <KirkMcDonald> Byteflux: A bytes object in Python substantially *is* just a numeric byte array.
[01:14:30] <bjs> stealth_: Yes I know what you mean, Python `bytes` aren't just `int`s, but this isn't anything to do with CPython
[01:14:35] <Byteflux> KirkMcDonald: Right, I'd assumed that but I could see how that might not appear to be the case to some
[01:14:39] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[01:15:08] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:15:16] <bjs> stealth_: that isn't a side-effect of writing it in C or anything, it's that the language was designed so that bytes weren't just int's and int's aren't just bytes,  but to make them separate types.
[01:15:35] <bjs> stealth_: it's a consequence of *that* decision that you can have an int object and a bytes object that both contain the same "data", duplicated
[01:15:50] <KirkMcDonald> stealth_: Again, see what I was saying about serialization and deserialization. Data gets transformed into different forms all the time, in any language.
[01:16:23] <bjs> stealth_: but bytes<->int is not the thing you were talking about earlier, "1" => 1 is a totally different kind of conversion because "1" is just text
[01:16:32] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:16:35] <KirkMcDonald> stealth_: And this tends to imply copies of the data, or even entirely new and different values.
[01:16:39] <bjs> so you need to parse it as a number, which is what I thought you meant originally, and that will indeed by kind of slow
[01:16:42] <bjs> be*
[01:16:56] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:17:02] <stealth_> bjs, i know, i am just saying how all its leading to slowdown when converting types in python. like in C you wouldn't have this problem since you are in 1 language environment.
[01:17:15] <bjs> stealth_: no this isn't anything to do with converting to C and back,  whatever that means
[01:17:46] <bjs> stealth_: this is a *decision* by the language to make it this way, such that bytes and int are separate objects and not synonymns or secretly the same or anything
[01:17:54] <KirkMcDonald> stealth_: A lot of the time, this sort of thing--any interaction between the program and the outside world--will be the greatest resource cost within a program, or one of them.
[01:18:26] <bjs> stealth_: and in C you have the same, if you go `int x = some_bytes` you now have a copy of those bytes in x.  C doesn't *have* to copy here, but it chooses to
[01:18:30] <stealth_> KirkMcDonald, yes
[01:18:38] <bjs> (well the compiler might "uncopy" if it doesn't change the behaviour of course...)
[01:18:41] <KirkMcDonald> This tends to be true in many sorts of programs, and is mostly independent of the language being usd.
[01:18:44] <KirkMcDonald> used*
[01:18:45] <Byteflux> what is the point of copying a byte string to an int list?
[01:18:55] <Byteflux> this doesn't seem particularly useful out of context.
[01:19:16] *** Joins: jmft2 (~jmft2@81.149.115.87.dyn.plus.net)
[01:19:32] <stealth_> KirkMcDonald, did you read the bit about how sqlite read from file and type conversion is faster then python read file + type conversion?
[01:20:25] <bjs> stealth_: that's not surprising,  if sqlite chose to store those numbers as text you'd see it also be slow
[01:20:44] *** Quits: brelod (~me@87.74.198.187) (Quit: leaving)
[01:20:50] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:20:59] <bjs> the same would be true in Python I suppose, if you stored the file in a binary format numerically rather than as lines of text (with digits that had to be parsed) it'd probably be faster
[01:21:34] <stealth_> bjs, i think it does store numbers as text, does it not?
[01:21:42] <bjs> stealth_: sqlite?
[01:22:08] <stealth_> bjs, its a guess (or something i read a long time ago)
[01:22:17] <Byteflux> SQLite has an integer type (and `real` for floating point numbers)
[01:22:29] <bjs> stealth_: I uh,  why would it store it as text?  I've never looked inside but I'd be really surprised if it did
[01:23:01] <Byteflux> Looking at the docs, looks like its integer type is variable width too
[01:23:21] <Byteflux> Stores it as optimally as possible
[01:23:53] <stealth_> bjs, not sure, i am not 100% on this. like you you have int field in sqlite and still store text into it
[01:23:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[01:24:10] <stealth_> its not strict like other database. (not sure if this is still the case with sqlite)
[01:24:19] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[01:25:00] <KirkMcDonald> https://www.sqlite.org/fileformat.html#record_format
[01:25:08] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:25:18] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4433) (Quit: Konversation terminated!)
[01:25:43] *** Joins: damxsa (~damx@2001:16a2:cd07:7e00:c69c:ea15:4679:2b93)
[01:26:23] *** Joins: besnn (~besnn@user/besnn)
[01:28:07] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[01:29:32] *** Joins: lastshell (~lastshell@user/lastshell)
[01:30:02] <jinsun> aphysically: a more general issue with mypy https://github.com/python/mypy/issues/5311
[01:31:12] *** Quits: lapno_ (~lapno@epn141.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[01:31:44] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[01:33:10] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 240 seconds)
[01:33:55] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[01:34:00] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 250 seconds)
[01:34:56] *** Quits: rosborn (~richard@c-73-73-179-235.hsd1.il.comcast.net) (Quit: rosborn)
[01:35:04] *** kosh_000__ is now known as kosh
[01:38:10] *** Quits: damxsa (~damx@2001:16a2:cd07:7e00:c69c:ea15:4679:2b93) (Quit: Leaving)
[01:41:57] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:45:42] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[01:46:53] *** Quits: cedric (~cedric@2a01:cb11:867:c200:6715:8359:406a:198a) (Quit: Konversation terminated!)
[01:47:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[01:47:34] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:47:45] *** Joins: minip (minip@user/minip)
[01:47:54] *** Quits: aead (~aead@user/aead) (Quit: aead)
[01:48:26] *** Joins: dontyouloveshort (~julius@ip5f5bc232.dynamic.kabel-deutschland.de)
[01:48:29] *** Joins: venue (~venue@user/venue)
[01:48:52] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:49:27] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:49:49] *** Gustavo6046_ is now known as Gustavo6046
[01:50:20] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[01:50:52] *** Joins: aead (~aead@user/aead)
[01:53:24] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[01:54:08] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[01:55:37] *** Joins: bpalmer (~user@user/bpalmer)
[01:55:56] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[01:58:35] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[01:58:58] *** Joins: ano (~weechat@user/ano)
[01:59:57] <grym> stealth_: https://www.sqlite.org/draft/stricttables.html
[02:00:50] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[02:01:33] *** Joins: MikZyth (~MikZyth@188.65.242.202)
[02:01:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:01:54] <stealth_> grym, that is if your make the type to be strict
[02:02:03] <grym> yes
[02:02:06] <grym> and it's a draft
[02:02:16] <stealth_> its been in draft for ages! lol
[02:02:33] <stealth_> still though sqlite is designed brilliant
[02:02:35] *** Quits: NeoCore (~neocore@195.200.221.53) (Quit: Leaving)
[02:03:27] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[02:04:13] *** Quits: p-i- (~Ohmu@171.6.227.183) (Quit: Leaving...)
[02:04:20] *** Joins: fearnoth1ng (~fearnothi@user/fearnothing)
[02:05:13] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:05:44] *** Joins: mickey (~user@user/mickey)
[02:05:57] <bjs> stealth_: note that this strictness doesn't change what's stored. If you try store "1" into an sqlite table it will convert it out of text. Which probably means that storing text into int columns is slower than it'd otherwise be because it's doing the same as your int() call back there
[02:07:41] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[02:08:26] *** Quits: sazawal (~sazawal@182.64.58.123) (Quit: Leaving)
[02:09:19] *** Joins: michagogo (uid14316@user/michagogo)
[02:09:23] <stealth_> bjs, sqlite does all the reading/conversion then passes it to python, that is my guess as to why its faster. like how `numpy` is after then `struct` for example
[02:09:45] <bjs> stealth_: yes, when you store the data it does the conversion just like you're doing the conversion when you read from the file
[02:10:02] <bjs> stealth_: but then sqlite isn't doing the conversion every time you read the table, only when you store. Whereas your file you're doing the conversion every time
[02:12:02] <stealth_> bjs, yes, it still needs to have some kind of reading converter to python type, though this might be faster since sqlite stores data dynamically
[02:12:40] *** Joins: djapo (~archangel@user/djapo)
[02:15:15] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:f2ff:b0a7:6b9c:7dc2)
[02:15:55] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[02:17:38] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[02:17:48] *** Joins: Archenfield (~textual@2405:6580:8e60:4600:e8c3:cd6c:5cc1:361b)
[02:18:47] *** Joins: summonner (~summonner@188.24.126.169)
[02:20:09] *** Quits: Archenfield (~textual@2405:6580:8e60:4600:e8c3:cd6c:5cc1:361b) (Client Quit)
[02:21:13] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[02:22:00] *** Quits: tone0 (~tone0@071-011-252-111.res.spectrum.com) (Ping timeout: 256 seconds)
[02:22:38] *** Joins: megas_malakas (~georgios@user/georgios)
[02:23:03] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[02:23:08] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[02:23:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[02:26:10] *** Joins: fikran (~fikran@user/fikran)
[02:26:32] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[02:26:49] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[02:27:40] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[02:27:43] *** Joins: matsaman (~matsaman@user/matsaman)
[02:28:18] *** fearnoth1ng is now known as fearnothing
[02:30:10] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 240 seconds)
[02:31:12] *** Leonarbro_ is now known as Leonarbro
[02:32:16] *** Joins: brelod (~me@87.74.198.187)
[02:33:19] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[02:35:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[02:37:29] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[02:37:42] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 250 seconds)
[02:38:03] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[02:38:16] *** Quits: death916 (UserNick@user/death916) (Ping timeout: 252 seconds)
[02:38:36] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[02:39:02] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[02:39:24] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[02:39:30] *** Joins: autistic (~linguist@170.84.56.192)
[02:43:37] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[02:44:19] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[02:44:21] *** Joins: emika7 (~emika@83.136.182.182)
[02:45:25] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[02:45:27] *** Quits: emika (~emika@185.207.249.107) (Ping timeout: 268 seconds)
[02:45:28] *** emika7 is now known as emika
[02:45:54] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:48:10] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 252 seconds)
[02:48:44] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Quit: Leaving)
[02:49:49] *** Quits: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[02:51:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 250 seconds)
[02:52:43] <aphysically> wow the inability to assert what kind of dict I got returned is really awful
[02:52:44] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[02:52:52] <aphysically> or check with isinstance
[02:53:13] <aphysically> it means I have to go through the hierarchy of the json dict and either assert or check isinstance at every level until mypy figures out what signature to use
[02:53:40] <aphysically> I wonder if mypy will be able to be smart with match case to figure out which signature to use
[02:53:56] *** Quits: vali (~vali@84-115-216-199.cable.dynamic.surfer.at) (Quit: c-ya!)
[02:54:29] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[02:54:56] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Quit: See you on the flip side.)
[02:55:03] <aphysically> I don't know if anyone has a better suggestion for this: https://bpa.st/N53Q
[02:55:04] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[02:55:26] <aphysically> you can see I'm navigating just to try to signal what branch of the json signature it is
[02:55:37] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[02:55:45] <matsaman> what kind of dict?
[02:55:58] <aphysically> (see roundabout line 65 and the declaration on line 52
[02:56:13] <aphysically> matsaman: I specify it fully on line 52
[02:56:29] <aphysically> it's the type of the loaded json
[02:56:46] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[02:57:50] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:58:30] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:f2ff:b0a7:6b9c:7dc2) (Ping timeout: 250 seconds)
[02:59:07] <grym> aphysically: when deserializing json, i use pydantic for ~this purpose/reason
[02:59:11] <aphysically> the commented code in the try except is what that block was before
[02:59:35] <grym> and then it's MyPydanticClass.parse_obj() and i know what it returns :)
[02:59:39] *** Joins: pycurious (~Adium@user/pycurious)
[03:00:31] <matsaman> aphysically: ah, missed your paste
[03:00:50] <aphysically> if anything the replacement of the commented code with the stuff to satisfy mypy just made it less clear
[03:01:04] <jinsun> aphysically: if you want to stick to stdlib then maybe using typeddict instead of dict will help here https://docs.python.org/3/library/typing.html#typing.TypedDict, I haven't tried it because I just use pydantic in these cases like grym
[03:01:23] <grym> for sanity at program boundaries, it's real good
[03:01:58] <grym> take user input from (the keyboard, the wire, some hellhole of a file) and give me a (nested) class instance, or die with a useful message why
[03:02:48] <aphysically> jinsun: I mean, even if it just lets me move up these insane type definitions it's probably worth it
[03:02:53] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:03:00] *** Quits: fedenix__ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:03:06] <jinsun> aphysically: and another solution is to just give up and and annotate it as dict[Any, Any]
[03:03:13] <grym> ^
[03:03:16] <aphysically> can I isinstance a typeddict?
[03:03:42] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Remote host closed the connection)
[03:03:50] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[03:03:53] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[03:04:21] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[03:04:39] <jinsun> at runtime it will be a normal dict
[03:05:13] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[03:06:43] *** Joins: electrostatic (~electrost@2601:600:8600:5a1:6db2:ea9e:70e8:1b11)
[03:08:19] *** Joins: cjb (~cjb@user/cjb)
[03:09:52] *** Joins: ogis_ (~Android@p1927250-omed01.osaka.ocn.ne.jp)
[03:10:30] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:10:34] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:12:02] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[03:12:22] *** Quits: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp) (Ping timeout: 252 seconds)
[03:12:50] <aphysically> yeah I'm just gonna do this with Any https://bpa.st/TBBQ
[03:12:56] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[03:12:57] <aphysically> it's not worth it
[03:13:26] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[03:13:28] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:14:06] *** Quits: fearnothing (~fearnothi@user/fearnothing) (Ping timeout: 250 seconds)
[03:15:44] <jinsun> good that we have that cheatcode available :D
[03:16:38] *** Quits: KombuchaKip (~kip@192.252.230.5) (Read error: Connection reset by peer)
[03:17:04] *** Joins: KombuchaKip (~kip@192.252.230.5)
[03:17:34] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Ping timeout: 250 seconds)
[03:17:36] <aphysically> I mean, I did genuinely annotate it, it just in no way improves the maintainability of that section of code
[03:18:23] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[03:18:50] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:18:58] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[03:19:27] *** Joins: brunodOut (~linguist@170.84.56.192)
[03:19:40] <jinsun> just try to avoid Any in general, otherwise there would be no point to running mypy, for nested dicts with different types a single dict annotation is not good, and you need other tools like pydantic models or typeddict
[03:19:43] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[03:19:59] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[03:20:58] *** Joins: TFKyle (~kyle@64.201.205.70)
[03:21:10] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:22:53] *** Joins: death916 (~death916@user/death916)
[03:22:54] <aphysically> I think typeddict only would have helped so much too unless mypy is able to pick up on an assertion to a specific typeddict
[03:23:14] <aphysically> otherwise I'm still mostly in the same pickle of needing to do nested asserts to signal which of the typedicts I am
[03:23:39] *** Quits: autistic (~linguist@170.84.56.192) (Ping timeout: 258 seconds)
[03:24:09] <aphysically> like if mypy picks up assert isinstance(x,typeddictclass) -> you said the assertion only works like dict, but does mypy pick up on the specific class then?
[03:25:07] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[03:25:36] <jinsun> oh you have Union of typeddicts?
[03:26:46] *** Joins: fortuno51 (~fortuno51@2a00:f41:5885:7821:28ee:7200:1411:2aba)
[03:27:25] <aphysically> well
[03:27:51] <aphysically> that would be the most sensible way to do it, I guess: like, if I just have one large typeddict
[03:28:23] <aphysically> err
[03:28:33] <aphysically> yes, it's a union of typeddicts
[03:29:06] <aphysically> the problem is ffmpeg returns json with different formatting depending on the type of query I would give it
[03:29:08] *** Joins: fortuno51_ (~fortuno51@37.120.156.254)
[03:29:12] <aphysically> so in a function that returns the raw json
[03:29:26] <aphysically> a full annotation is a union of typeddicts, or what I did before
[03:29:40] *** Parts: electrostatic (~electrost@2601:600:8600:5a1:6db2:ea9e:70e8:1b11) (Leaving)
[03:30:22] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[03:30:29] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:30:45] <aphysically> let's just talk about the specific problem that's probably more clear
[03:30:48] <aphysically> this is the json format it outs: https://bpa.st/MS7A
[03:31:19] <jinsun> Union of typeddicts will causee problems because you won't be able to narrow them with isinstance
[03:31:23] <aphysically> so the problem is that when I'm using this, in one part of my code I need to use the sequence index, and in the other part I need to specify the key string
[03:31:28] *** Quits: moog (~moog@107.242.124.49) (Quit: Leaving)
[03:31:43] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[03:31:52] *** Quits: fortuno51 (~fortuno51@2a00:f41:5885:7821:28ee:7200:1411:2aba) (Ping timeout: 250 seconds)
[03:31:54] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[03:32:02] <aphysically> so even if I made a typeddict for this entire type, it still has the same problem, doesn't it?
[03:32:04] <jinsun> but you can have nested typed dicts, and Unions of actual runtime types inside them, and you won't need to instance TypedDict in that case
[03:32:48] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:32:59] *** Joins: ice9 (~ice9@user/ice9)
[03:33:01] <aphysically> I can union a runtime type?
[03:33:01] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Quit: Bye!)
[03:33:55] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[03:34:08] <jinsun> I am calling anything you can check with isinstance a runtime type, and you can definitey do Union[str, int]
[03:34:22] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[03:34:27] <jmft2> Are `Path` and `PurePath` case-sensitive? I had `open(PurePath(__file__).parent / "About.md")` and it was matching the file `about.md` on MacOS but not on Linux.
[03:34:35] *** Quits: brelod (~me@87.74.198.187) (Quit: leaving)
[03:35:13] <jinsun> the filesystem decides whether the paths are case sensitive or not
[03:35:46] <jinsun> I guess in macOS the filesystem is not case sensitive, but in Linux it is
[03:36:16] <jinsun> just use the correct case if you know it
[03:37:18] *** Joins: trashcatt (~trashcatt@znc.trashcat.xyz)
[03:37:40] <jmft2> But macOS is otherwise case-sensitive
[03:38:22] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[03:39:43] *** Quits: dontyouloveshort (~julius@ip5f5bc232.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[03:40:33] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:42:17] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[03:42:44] *** Quits: gruuf (~gruuf@94.31.99.29) (Quit: WeeChat 3.1)
[03:44:30] <jinsun> okay not much idea about macOS, but pathlib is "case-sensitive" in the sense it does not normalize paths to any particular case
[03:45:12] <aphysically> I'll have to look into pydantic eventually
[03:45:23] <jinsun> this puts MacOS HFS+ in the case-insensitive row https://www.python.org/dev/peps/pep-0235/#motivation
[03:45:35] <aphysically> as long as mypy narrows with isinstance typeddict is okay but not perfect
[03:45:44] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 250 seconds)
[03:46:16] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[03:46:34] <jinsun> aphysically:  I assume  you know which keys can be sequence and which will be dicts?
[03:47:05] <aphysically> yes
[03:47:08] <jinsun> in that case you will not even need the Union when you define the typeddict
[03:47:35] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:47:52] <jinsun> just annotate each key with the correct type
[03:47:53] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:48:03] <aphysically> ooooooo
[03:48:46] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[03:49:13] *** Quits: jmft2 (~jmft2@81.149.115.87.dyn.plus.net) (Ping timeout: 252 seconds)
[03:49:19] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[03:49:32] *** Joins: JanC (~janc@user/janc)
[03:49:37] <jinsun> see the examples here https://docs.python.org/3/library/typing.html#typing.TypedDict and here https://www.python.org/dev/peps/pep-0526/
[03:49:38] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 250 seconds)
[03:49:39] <aphysically> that could just fix everything
[03:51:57] *** Joins: brelod (~me@87.74.198.187)
[03:52:47] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[03:54:14] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:54:26] <jinsun> aphysically: ah that second link should have been https://www.python.org/dev/peps/pep-0589/
[03:56:08] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 250 seconds)
[03:56:55] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[03:58:51] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[03:59:18] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[04:00:14] *** Quits: fortuno51_ (~fortuno51@37.120.156.254) (Remote host closed the connection)
[04:00:25] *** Quits: brelod (~me@87.74.198.187) (Quit: leaving)
[04:01:30] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[04:04:02] *** Quits: MikZyth (~MikZyth@188.65.242.202) (Quit: WeeChat 3.1)
[04:09:34] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 250 seconds)
[04:10:10] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[04:10:12] *** Quits: rannnn8888 (~rannnn888@bzq-79-183-158-130.red.bezeqint.net) (Quit: Client closed)
[04:10:16] *** Quits: VimVim (~VimVim@85.191.9.175) (Quit: Leaving)
[04:11:10] *** Quits: audiocat (~audio@2603-8081-1801-3bb5-def8-5e99-ae61-1013.res6.spectrum.com) (Ping timeout: 240 seconds)
[04:11:50] *** Joins: sgn (~sgn@user/sgn)
[04:12:49] *** Joins: dre (~dre@2001:8003:c932:c301:64b7:95dc:bc24:e941)
[04:17:13] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[04:18:56] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[04:20:58] *** Joins: Naan` (~Naan@user/naan)
[04:21:25] *** Joins: c10l (~c10l@89.34.167.207)
[04:21:55] *** Quits: martums (~martums@user/martums) (Read error: Connection reset by peer)
[04:22:42] *** Joins: martums (~martums@user/martums)
[04:24:18] *** Quits: brunodOut (~linguist@170.84.56.192) (Ping timeout: 250 seconds)
[04:25:26] *** Joins: ice9 (~ice9@user/ice9)
[04:25:53] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[04:26:43] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[04:27:00] *** megas_malakas is now known as JavaPP
[04:27:24] *** Quits: nomic (~nomic@185.192.69.192) (Quit: Leaving)
[04:28:32] *** Quits: Akuli (~Akuli@87-94-109-4.bb.dnainternet.fi) (Quit: Leaving)
[04:28:45] <aphysically> yeah I think requiring to notate -> None is a bit silly but ok
[04:29:52] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:30:08] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[04:30:32] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:30:53] *** Quits: securethemews_ (~securethe@2a00:23c4:1e9b:7b00::1) (Read error: Connection reset by peer)
[04:32:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:33:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:34:10] *** Quits: aead (~aead@user/aead) (Ping timeout: 240 seconds)
[04:34:25] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[04:34:47] *** Joins: securethemews_ (~securethe@2a00:23c4:1e9b:7b00::1)
[04:35:41] *** Joins: fikran (~fikran@user/fikran)
[04:37:31] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[04:41:07] *** Joins: srhm (~srhm@user/srhm)
[04:43:32] *** Joins: dhill (dhill@modemcable103.217-80-70.mc.videotron.ca)
[04:45:33] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[04:47:10] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:e136:95b1:bac0:7698:51de) (Ping timeout: 240 seconds)
[04:47:30] *** Joins: aead (~aead@user/aead)
[04:48:21] *** Joins: srhm (~srhm@user/srhm)
[04:48:30] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[04:48:41] *** Joins: pierrepaul (sid504261@highgate.irccloud.com)
[04:49:11] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:49:38] *** Joins: srhm (~srhm@user/srhm)
[04:51:16] <aphysically> ❯ mypy --strict ~/.scripts/pyffstream.py
[04:51:18] <aphysically> Success: no issues found in 1 source file
[04:51:20] <aphysically> jinsun: ^
[04:51:33] <aphysically> the only Any I used was the one I showed you
[04:51:42] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[04:52:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[04:52:29] *** Quits: Jefren1 (~Jefren@70.35.66.51) (Ping timeout: 268 seconds)
[04:52:40] *** Quits: aead (~aead@user/aead) (Ping timeout: 240 seconds)
[04:53:30] *** Joins: aead (~aead@user/aead)
[04:54:03] *** Joins: Jefren1 (~Jefren@70.35.67.79)
[04:54:10] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[04:57:40] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 250 seconds)
[05:00:18] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:00:58] <aphysically> it looks mostly okay I think, it didn't require too much of a mess https://dpaste.com/5V6NT25KJ
[05:02:25] <aphysically> now I can try the typeddict thing instead of the Any in just a moment
[05:03:01] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[05:05:01] *** Joins: nomic (~nomic@185.192.69.192)
[05:06:04] *** Quits: Socra (~Socra@206.217.216.27) (Ping timeout: 268 seconds)
[05:06:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[05:07:26] *** Joins: Socra (~Socra@206.217.216.27)
[05:08:03] *** Quits: Naan` (~Naan@user/naan) (Quit: Leaving)
[05:09:37] *** JavaPP is now known as Java--
[05:10:27] <aphysically> I think I mostly used the generics, I see some spots where I used dict instead of Mapping for an argument
[05:10:36] <aphysically> for the output dict is fine I think
[05:14:10] *** Joins: djapo (~archangel@user/djapo)
[05:14:31] <dre> does anyone use ipython here?
[05:14:44] <nedbat> dre: it works better here to ask your question directly. People don't often volunteer as experts, and sometimes non-experts can help.
[05:14:49] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 248 seconds)
[05:15:13] *** Joins: Cyp_ (~cyp@192038133070.mbb.telenor.dk)
[05:15:17] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[05:15:34] <dre> yeah cheers nvm I figured it out
[05:16:00] <dre> ipython allows you to `%save` a session but if you try and `%run` the saved session you'll get "x is not defined" errors
[05:16:40] <dre> but that's because it's trying to run as a seperate program, you can instead `%load` the session into your current active session, and use what you've got defined. etc.
[05:17:53] *** Quits: Cyp (~cyp@192038130244.mbb.telenor.dk) (Ping timeout: 258 seconds)
[05:21:13] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 248 seconds)
[05:22:43] *** Joins: srhm (~srhm@user/srhm)
[05:23:26] *** Joins: xa0s (~xa0s@mab.sdf.org)
[05:23:53] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[05:25:45] <AhmedAmerican> why `split()` is converting the string to list even if the split keyword is not within it ? `"Hello".split('b')`?
[05:26:03] <KirkMcDonald> Because split() returns a list.
[05:26:06] <aphysically> jinsun: grym: it looks like I get yet another solution to the problem of type narrowing a complex dict in 3.10: https://www.python.org/dev/peps/pep-0647/
[05:26:21] <nedbat> AhmedAmerican: split always makes a list, sometimes of just one element.
[05:27:06] <AhmedAmerican> Hmm, is there a string method to split only if the pattern presented ?
[05:27:33] <AhmedAmerican> or i should make a custom function for that.
[05:27:38] <aphysically> I don't see the delayed evaluation of type annotations in the 3.10 changelist, am I just missing it somewhere?
[05:27:53] <KirkMcDonald> Not built in. But... how would that work? How would you know how to handle the return value?
[05:29:06] *** Quits: michagogo (uid14316@user/michagogo) (Quit: Connection closed for inactivity)
[05:29:24] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:29:52] *** Joins: srhm (~srhm@user/srhm)
[05:30:35] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:33:04] <nedbat> aphysically: it was put off
[05:33:12] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:33:37] <aphysically> indefinitely (for now) A?
[05:33:43] *** Joins: n000g (~NRG@user/nrg)
[05:33:49] <nedbat> aphysically: they are trying to work out some thorny issues
[05:34:26] *** Quits: nrg (~NRG@user/nrg) (Ping timeout: 268 seconds)
[05:36:32] *** Joins: jazzy (~jaziz@2600:380:4533:7020:c055:7f23:886:f4ac)
[05:37:17] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[05:37:58] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[05:38:59] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[05:39:05] <SnoopJ> anybody happen to know if MicroPython's framebuf.FrameBuffer is usable for a bit-addressable display in the MONO_* modes? It seems like those modes just limit the values bytes take, but each pixel is still its own byte.
[05:44:05] <SnoopJ> or at least it seems that way; the docs make it seem like 1 byte should be 8 pixels in these modes but it doesn't seem correct... `framebuf.FrameBuffer(bytearray(1), 8, 1, framebuf.MONO_HLSB)` when turned into a bytes() object is length 8 :/
[05:47:41] <jinsun> aphysically: congrats :D, and yes typeguard might work for your case also, but it is 3.10+ (I stil think pydantic or typedicts are better solution for your case)
[05:47:49] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[05:48:51] *** Joins: vlm (~vlm@user/vlm)
[05:51:15] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[05:53:43] <SnoopJ> hmm, upon further consideration, I think this might be a bug in MicroPython. `bytes(fbuf)` does seem to always contain the desired data, but it's always width*height bytes long, and the rest appears to be some nearby internal memory 😬
[05:53:50] *** Leonarbro_ is now known as Leonarbro
[05:55:23] <cluelessperson> SnoopJ, oopsies
[05:55:29] <cluelessperson> I think there's a #micropython channel
[05:55:54] <SnoopJ> I see #micropython-fr with 2 users, but not #micropython
[05:57:44] <aphysically> yeah I haven't gotten to trying the typeddict quite yet I've been auditing my code to make sure it still works
[05:57:47] <SnoopJ> https://bpa.st/NFPA
[05:57:54] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[05:59:08] <SnoopJ> I guess that explains why drawing `bytes(fbuf)` seemed so inconsistent, though
[05:59:34] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[06:06:55] *** Joins: trace987 (~trace@95.90.106.112)
[06:09:50] <cluelessperson> SnoopJ, I think I'm in #micropython with like 20+ users
[06:10:04] <cluelessperson> maybe it's hidden or something from search
[06:12:35] <cluelessperson> SnoopJ, you're not in offtopic either. :P  I can't complain at you.
[06:12:38] <sybariten> So a question about structure (or about syntax maybe) . I am supposed to write a small console menu that calls on some functions. Right now my code is a bit all over the place so i'll just try and explain my issue before i show any code
[06:14:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[06:15:18] <sybariten> I basically have three files/modules - main.py, menu.py and calculate.py . Menu only contains a menu, as a printout function. calculate contains some functions that perform actual calculations. And the menu is called from main, where i also have the if-clause to check for the users choices
[06:15:37] <aphysically> jinsun: also relevant I guess https://github.com/python/mypy/issues/4617
[06:15:41] <cluelessperson> sybariten, depends on the requirements.   In general with cli it's suggested to use "click" or stblib's argparse
[06:16:01] <cluelessperson> sybariten, if you need a dynamic / active menu, ncurses is pretty common for cli tools.
[06:16:09] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 248 seconds)
[06:16:29] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[06:16:48] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[06:17:08] *** Quits: Ivyy (~Ivyy@2001:a61:135b:5001:1ee0:53a3:bb15:f50) (Remote host closed the connection)
[06:17:34] *** Joins: monkey_ (~user@190.104.116.134)
[06:17:36] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[06:17:55] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[06:18:14] *** Joins: Jefren2 (~Jefren@208.104.190.51)
[06:18:48] <sybariten> So there is an input() built into the menu function, to get the users choice (the user enters a string with a command) . Then, since these calcualtions print things out to the screen, i have an input() after those things. However, i'm only supposed to use two input(), as far as i've understood
[06:20:25] *** Quits: Jefren1 (~Jefren@70.35.67.79) (Ping timeout: 248 seconds)
[06:21:25] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-ed71-0a19-f20f-b92d.res6.spectrum.com) (Read error: Connection reset by peer)
[06:21:36] <cluelessperson> sybariten, not sure your question
[06:22:36] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 250 seconds)
[06:22:53] *** Joins: brabrax (~brabrax@user/brabrax)
[06:22:59] <sybariten> Damn i'm not explaining this very well. Basically . If i i have a while True: which contains if userChoice == "rootcalculation": rootCalculate(something) ; input(" press return to get back to menu")
[06:23:55] <sybariten> and then an elif, for some other user choice, and another elif for some other user choice ....  i would always need to have an input() under each elif , to make the screen show the output. Before going back in the while loop.
[06:24:04] <sybariten> But how could i do this using only one input() ?
[06:24:46] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[06:24:48] <sybariten> Well, i understand if this is impossible to follow...
[06:24:49] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 256 seconds)
[06:30:39] *** Quits: driib (~driib@185.195.233.163) (Read error: Connection reset by peer)
[06:30:53] *** Joins: driib (~driib@185.195.233.163)
[06:31:34] *** Joins: ice9 (~ice9@user/ice9)
[06:31:47] <sybariten> actually maybe this quote could illustrate a bit.  https://bpa.st/65RA     In this little code, i am using an input for each menu choice, just to keep the stuff printed on the screen before i clear it. Is there a way to only have one input() for all of those ?
[06:32:41] <cluelessperson> sybariten, make a while loop,  and use a variable to store state
[06:32:42] <sybariten> Something like using an inner and an outer while loop or so, would that make sense?
[06:34:10] *** Joins: imp (~igor@192-141-191-229.alternativaip.net.br)
[06:35:31] <cluelessperson> sybariten, you can use the variable state, to either preplan functions to call,  or store decisions you've made so you can do the next thing you intend
[06:35:40] <cluelessperson> all while circling on a single while loop over input
[06:39:34] <sybariten> But i am using a while loop already?
[06:39:55] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[06:40:58] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[06:41:19] *** Quits: akk (~akk@174-28-98-206.albq.qwest.net) (Quit: +++)
[06:41:37] *** Joins: jaggz (~jaggz@user/jaggz)
[06:41:42] <cluelessperson> sybariten, so repurpose it?
[06:41:46] <jaggz> is setting variables atomic when threads are used?
[06:41:57] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[06:42:08] <jaggz> can I use busy_in_data_processing=True
[06:42:27] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[06:42:44] <jaggz> (in some callback)
[06:43:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[06:43:14] <jaggz> and somewhere else:   if not busy_in_data_processing: modify buffers used by busy_in_data_processing
[06:43:26] <jaggz> eh.. or whatever.
[06:45:13] *** Joins: fikran (~fikran@user/fikran)
[06:45:35] <bpalmer> jaggz: you're better off using a threading.Lock or other synchronization object and being explicit.
[06:45:51] <bpalmer> jaggz: I believe the actual assignment woudl be atomic, but that's not enough to protect your regions
[06:46:01] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 248 seconds)
[06:47:32] <bpalmer> (consider `if not busy_in_data_processing`:  <-- evaluated, this is true, so you are scheduled to step into the body of your if.  Thread switches: busy_in_data_processing = True <-- now it's true, and threads will be processing data. Thread switches back to the first: the body of the if runs along)
[06:47:43] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[06:48:27] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:48:27] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (cadmium.libera.chat (Nickname regained by services)))
[06:48:27] *** finn_elija is now known as FinnElija
[06:49:47] *** Joins: cjb (~cjb@user/cjb)
[06:51:38] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[06:51:56] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[06:52:05] <aphysically> the use of the key "format" by ffmpeg means the nameddict declaration syntax confuses syntax highligheters jinsun https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=f11b25cf0c4dfd40a2dbff0897ffce4f
[06:53:05] <sybariten> cluelessperson: hmmm maybe i can just put one single input() after all the if/elifs ... on the same level as them
[06:54:19] <cluelessperson> sybariten, instead of having a million if/elfs, you can also store them in a more organized manner, like  state=0,   prompts={0: "What is your name?"}
[06:54:26] <cluelessperson> input(prompts[state])  for example.
[06:55:00] <cluelessperson> if you want to record answers, you can do like,   answers={0: "Bob"}
[06:55:22] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[06:55:24] <cluelessperson> or,  state={"name": "Bob", "age": 21}
[06:55:41] <cluelessperson> and just cycle through the questions to update the state, or decide if a function needs to be run on state.
[06:56:11] <sybariten> cluelessperson: aha hmm i will look into that for the next step, thank you! As for now, i just want to comply with the requirements so i can get it done  :)
[06:56:44] <cluelessperson> sybariten, I would personally probably keep the prompts and the responses separate.
[06:57:04] <cluelessperson> and you could also make the prompts call functions on the state,  then like
[06:57:42] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[06:57:44] <cluelessperson> handle_name(state): => print(f"Hello, there, {responses["name"]}")
[06:59:14] <sybariten> all right
[06:59:58] *** Quits: nomic (~nomic@185.192.69.192) (Quit: Leaving)
[07:00:16] *** Joins: nomic (~nomic@185.192.69.192)
[07:03:06] *** Quits: rud0lf (rud0lf@user/rud0lf) (Quit: bye!)
[07:03:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:03:31] <sybariten> thanks for the ideas cluelessperson
[07:03:52] <sybariten> i think people often use dictionaries for menu situations also
[07:04:07] *** Joins: rud0lf (rud0lf@user/rud0lf)
[07:04:56] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[07:05:33] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:05:40] *** Quits: Java-- (~georgios@user/georgios) (Ping timeout: 240 seconds)
[07:07:35] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[07:07:54] *** Joins: AndrewYu (~andrew@user/andrewyu)
[07:08:44] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:10:28] *** Joins: emika3 (~emika@185.207.249.162)
[07:12:00] *** Quits: emika (~emika@83.136.182.182) (Ping timeout: 250 seconds)
[07:12:00] *** emika3 is now known as emika
[07:13:35] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[07:13:37] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[07:13:54] *** Joins: gggp (~textual@123.113.180.13)
[07:18:25] *** Joins: bpalmer` (~user@user/bpalmer)
[07:20:02] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:20:32] *** Quits: bpalmer (~user@user/bpalmer) (Ping timeout: 252 seconds)
[07:20:40] *** bpalmer` is now known as bpalmer
[07:20:42] *** Joins: matsaman (~matsaman@user/matsaman)
[07:21:44] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:22:24] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 250 seconds)
[07:24:11] *** Quits: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[07:24:49] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[07:26:21] *** Joins: Vonter (~Vonter@user/vonter)
[07:26:27] *** Joins: Java-- (~georgios@user/georgios)
[07:26:51] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:30:07] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[07:31:00] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 244 seconds)
[07:34:30] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[07:37:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[07:37:37] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Quit: Leaving)
[07:41:50] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[07:47:46] *** Quits: matsaman (~matsaman@user/matsaman) (Ping timeout: 258 seconds)
[07:51:40] *** Quits: gggp (~textual@123.113.180.13) (Ping timeout: 240 seconds)
[07:54:00] <shrysr> are we supposed to include the created venv for the project in git?
[07:54:53] *** Joins: minip (minip@user/minip)
[07:56:25] *** Joins: matsaman (~matsaman@user/matsaman)
[07:57:01] *** Quits: matsaman (~matsaman@user/matsaman) (Client Quit)
[08:05:16] *** Joins: Samian (~Sami@174.27.107.153)
[08:06:18] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:07:02] *** Quits: Java-- (~georgios@user/georgios) (Ping timeout: 250 seconds)
[08:08:41] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[08:09:07] *** Joins: zensei (~zensei@user/zensei)
[08:09:30] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[08:09:45] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[08:11:22] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 250 seconds)
[08:16:54] *** Joins: gggp (~textual@123.113.178.246)
[08:21:02] *** Quits: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net) (Read error: Connection reset by peer)
[08:21:35] *** Joins: ByteHackr (~sanroy@43.252.250.83)
[08:23:21] *** Joins: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net)
[08:24:32] <imp> shrysr:  no.
[08:25:35] <imp> shrysr: that information should be included in your project package config file. Or more simply use a requirements.txt file for quick use. You can also add a script for quickly rebuild your venv
[08:26:33] <imp> if you want, you can check mor info about packaging here https://packaging.python.org/
[08:27:09] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Lost terminal)
[08:30:05] *** Quits: nomic (~nomic@185.192.69.192) (Quit: Leaving)
[08:32:44] *** Quits: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[08:33:30] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[08:35:21] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:38:14] *** Joins: midnite (~human@user/midnightlantern)
[08:38:50] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[08:38:54] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[08:40:56] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Quit: WeeChat 2.8)
[08:43:32] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[08:44:03] *** Quits: HankHill (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 276 seconds)
[08:45:18] *** Joins: djapo (~archangel@user/djapo)
[08:47:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:47:40] *** Joins: HankHill (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[08:48:06] *** Quits: imp (~igor@192-141-191-229.alternativaip.net.br) (Quit: imp)
[08:51:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[08:52:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[08:53:24] *** Quits: gggp (~textual@123.113.178.246) (Ping timeout: 250 seconds)
[08:54:36] *** Joins: fikran (~fikran@user/fikran)
[08:55:27] *** Joins: gggp (~textual@125.33.91.221)
[09:00:06] *** Joins: safe (~safe@cpe-74-64-165-24.nj.res.rr.com)
[09:02:08] *** Quits: gggp (~textual@125.33.91.221) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:03:23] <aphysically> oh protocol classes are cool too
[09:03:41] <aphysically> I guess I should keep reading on the annotation options available to me if I'm going to (try) to use them strictly
[09:06:16] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:11:29] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 268 seconds)
[09:12:17] *** Joins: trace987 (~trace@95.90.106.112)
[09:13:57] *** Quits: midnite (~human@user/midnightlantern) (Quit: bbiab)
[09:15:01] <jaggz> any very simple module to let me select from some lines (including their nicely-colorized stuff, where I'm just outputting terminal sequences myself), that will let me cursor up/down and hit my own keys to manipulate to perform actions?
[09:15:11] <jaggz> https://i.imgur.com/VmXjpYt.png
[09:15:22] <jaggz> right now I'm spitting out audio classifications, live, but then if I want to modify one of those, well, I currently pause the live ..
[09:15:31] *** Joins: tumbleweed_ (~stefanor@ubuntu/member/tumbleweed)
[09:15:32] *** Joins: ario_ (~ario@159.65.220.102)
[09:15:34] *** Joins: nicksloan_ (sid195124@user/nicksloan)
[09:15:35] *** Joins: nvz_ (~user@nvz.farted.online)
[09:15:36] *** Joins: mastardet_ (~mastardet@user/mastardet)
[09:15:37] *** Quits: someguy123 (~someguy@user/someguy123) (*.net *.split)
[09:15:37] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[09:15:37] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[09:15:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[09:15:37] *** Quits: DocMors (~DocMors@web.crypticity.net) (*.net *.split)
[09:15:37] *** Quits: rich (~rich@2a03:4000:3f:f1:b859:16ff:fe45:e87f) (*.net *.split)
[09:15:37] *** Quits: nicksloan (sid195124@user/nicksloan) (*.net *.split)
[09:15:37] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[09:15:37] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[09:15:37] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[09:15:37] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[09:15:37] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[09:15:37] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[09:15:37] *** Quits: dreamer (~dreamer@user/dreamer) (*.net *.split)
[09:15:37] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[09:15:37] *** Quits: trench (trench@user/trench) (*.net *.split)
[09:15:37] *** Quits: Tritium (~tritium@toxin.sdamon.com) (*.net *.split)
[09:15:37] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[09:15:37] *** Quits: glider (~glider@user/glider) (*.net *.split)
[09:15:37] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[09:15:37] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[09:15:37] *** Quits: Ox4 (~int@0x4.cx) (*.net *.split)
[09:15:37] *** Quits: CodeGeek (~codegeek@about/java/CodeGeek) (*.net *.split)
[09:15:37] *** Quits: bjb (~bjb@sourcerer.ca) (*.net *.split)
[09:15:37] *** Quits: mastardet (~mastardet@user/mastardet) (*.net *.split)
[09:15:37] *** Quits: nfc (nfc@tilde.institute) (*.net *.split)
[09:15:37] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[09:15:37] *** Quits: ttkap_ (~ttkap@user/ttkap) (*.net *.split)
[09:15:37] *** Quits: Widdershins (widders@ps.mad.cash) (*.net *.split)
[09:15:37] *** Quits: Xavierdarkness (~xavierdar@user/xavierdarkness) (*.net *.split)
[09:15:37] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[09:15:37] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[09:15:37] *** Quits: tumbleweed (~stefanor@ubuntu/member/tumbleweed) (*.net *.split)
[09:15:37] *** Quits: dmvrtx (dmvrtx@2a01:7e01::f03c:92ff:fefd:6ed6) (*.net *.split)
[09:15:37] *** Quits: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com) (*.net *.split)
[09:15:37] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[09:15:37] *** Quits: tardisx (~tardisx@2400:8902::f03c:91ff:fe89:d107) (*.net *.split)
[09:15:37] *** Quits: sco1 (~sco1@charon.whatbox.ca) (*.net *.split)
[09:15:37] *** Quits: emptynine (tkk@cybertron.redlight.li) (*.net *.split)
[09:15:37] *** Joins: trench_ (trench@user/trench)
[09:15:37] *** nicksloan_ is now known as nicksloan
[09:15:38] *** Joins: dostoyev1ky2 (~sck@user/dostoyevsky2)
[09:15:39] *** Joins: sco1_ (~sco1@charon.whatbox.ca)
[09:15:41] *** Joins: Anarchic` (~Anarchic@getlegit.co.uk)
[09:15:41] *** Joins: Ulti_ (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com)
[09:15:44] *** Joins: xavierdarkness_ (~xavierdar@user/xavierdarkness)
[09:15:45] *** Joins: glider_ (~glider@user/glider)
[09:15:46] *** Joins: mjh4386_ (~mjh4386@165.22.53.231)
[09:15:48] *** Joins: Stx_ (stx@libera/staff/stx)
[09:15:49] *** Joins: n-st- (~n-st@user/n-st)
[09:15:50] *** Joins: e9 (tkk@cybertron.redlight.li)
[09:15:51] *** Joins: nfc_ (nfc@tilde.institute)
[09:15:52] *** Joins: dlam1 (~dlam@dlam.me)
[09:15:56] *** Joins: njt_ (~njt@zaph.org)
[09:15:57] *** Joins: Widdershins (widders@ps.mad.cash)
[09:15:57] *** Joins: effprime_ (~effprime@user/effprime)
[09:15:58] *** Joins: CodeGeek (~codegeek@about/java/CodeGeek)
[09:15:59] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[09:16:00] *** Joins: mabi (~m42e@pb42.de)
[09:16:02] *** Joins: Retr0id6 (~Retr0id@user/retr0id)
[09:16:08] *** xavierdarkness_ is now known as xavierdarkness
[09:16:26] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[09:16:31] *** n-st- is now known as n-st
[09:16:40] *** Joins: int (~int@0x4.cx)
[09:16:40] *** Joins: a1paca (~a1paca@user/a1paca)
[09:16:45] *** Joins: DaPinkOne (~Dap@user/dap)
[09:16:49] *** njt_ is now known as njt
[09:18:50] *** Quits: Ellenor (ellenor@vice-chairwoman.of.freenode.management) (*.net *.split)
[09:18:50] *** Quits: vodkra (~vodkra@user/vodkra) (*.net *.split)
[09:18:50] *** Quits: ndim (hun@moooo.n-dimensional.de) (*.net *.split)
[09:18:50] *** Quits: paperManu (~paperManu@138.197.128.151) (*.net *.split)
[09:18:50] *** Quits: MightyMu (~MightyMu@104.131.138.31) (*.net *.split)
[09:18:50] *** Quits: zwindl (~abc@user/abc) (*.net *.split)
[09:18:50] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[09:18:50] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[09:18:50] *** Quits: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com) (*.net *.split)
[09:18:50] *** Quits: Techcable_ (~Techcable@168.235.93.147) (*.net *.split)
[09:18:50] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (*.net *.split)
[09:18:50] *** Quits: FunkyBob (~curtis@vhost3.tinbrain.net) (*.net *.split)
[09:18:50] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[09:18:50] *** Quits: zinc (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[09:18:50] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (*.net *.split)
[09:18:50] *** Quits: theo (~theo@user/theo) (*.net *.split)
[09:18:50] *** Quits: grandfso (~quassel@199.232.237.35.bc.googleusercontent.com) (*.net *.split)
[09:18:50] *** Quits: BillyZane (~BillyZane@91.196.220.172) (*.net *.split)
[09:18:50] *** Quits: push-f (~martin@push-f.com) (*.net *.split)
[09:18:50] *** Quits: Yorick_ (znc@vps.freegamehosting.eu) (*.net *.split)
[09:18:50] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (*.net *.split)
[09:18:50] *** Quits: supernovah (~supernova@mail.ijk.nz) (*.net *.split)
[09:18:50] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (*.net *.split)
[09:18:50] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[09:18:50] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[09:18:50] *** Quits: Scotteh (~Scotteh@user/scotteh) (*.net *.split)
[09:18:50] *** Quits: dav1d (~dav1d@user/dav1d) (*.net *.split)
[09:18:50] *** Quits: ablegreen (~ablegreen@tsunami.ocf.berkeley.edu) (*.net *.split)
[09:18:50] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[09:18:50] *** Quits: Tashtari (~tashtari@user/tashtari) (*.net *.split)
[09:18:50] *** Quits: taru9 (~realTaru9@user/taru9) (*.net *.split)
[09:18:50] *** Quits: agronholm (sid403424@id-403424.brockwell.irccloud.com) (*.net *.split)
[09:18:50] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[09:18:50] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[09:18:50] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[09:18:50] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[09:18:50] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[09:18:50] *** Quits: cole (~cole@user/cole) (*.net *.split)
[09:18:50] *** Quits: tudor (~tudor@tomka.hu) (*.net *.split)
[09:18:50] *** Quits: meridion (~meridion@punt.hetgrotebos.org) (*.net *.split)
[09:18:50] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[09:18:50] *** Quits: bboles (~bboles@64.94.212.195) (*.net *.split)
[09:18:50] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[09:18:50] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[09:18:50] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[09:18:50] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[09:18:50] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[09:18:50] *** Quits: gerikson (~gerikson@user/gerikson) (*.net *.split)
[09:18:50] *** Quits: stemid (~nocturnal@i-lands.anark.ist) (*.net *.split)
[09:18:50] *** Quits: adamchainz (~adamj@51.15.34.126) (*.net *.split)
[09:18:50] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (*.net *.split)
[09:18:50] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[09:18:50] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[09:18:55] *** Joins: Helle_ (~helle@80-100-16-232.ip.xs4all.nl)
[09:18:56] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[09:18:56] *** Joins: Yhg1s_ (sid387777@python/psf/thomas)
[09:18:56] *** Joins: agronholm_ (sid403424@id-403424.brockwell.irccloud.com)
[09:18:58] *** Joins: InPhase_ (~InPhase@openscad/inphase)
[09:18:58] *** Joins: vodkra_ (~vodkra@user/vodkra)
[09:19:00] *** Joins: meejah_ (~meejah@rutas.meejah.ca)
[09:19:02] *** Joins: Riviera_ (Riviera@user/riviera)
[09:19:04] *** Joins: FunkyBob_ (~curtis@vhost3.tinbrain.net)
[09:19:04] *** Joins: tudor_ (~tudor@tomka.hu)
[09:19:05] *** Joins: stemid_ (~nocturnal@i-lands.anark.ist)
[09:19:06] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[09:19:08] *** Joins: percY- (~percY@138.68.239.19)
[09:19:10] *** Joins: adamchainz (~adamj@51.15.34.126)
[09:19:17] *** Joins: push-f (~martin@push-f.com)
[09:19:17] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[09:19:17] *** Joins: themill_ (~stuart@debian/stuart)
[09:19:19] *** Joins: Bitflux (~byte@byteflux.net)
[09:19:21] *** Joins: gerikson (~gerikson@user/gerikson)
[09:19:22] *** Joins: CuriousErnestBri (~CuriousEr@user/curiousernestbro)
[09:19:22] *** Joins: Yorick- (znc@vps.freegamehosting.eu)
[09:19:23] *** Joins: ebb_ (ebb@user/ebb)
[09:19:28] *** Joins: theo (~theo@user/theo)
[09:19:34] *** Joins: dav1d (~dav1d@user/dav1d)
[09:19:37] *** Joins: paperManu (~paperManu@138.197.128.151)
[09:19:40] *** Joins: BillyZane (~BillyZane@91.196.220.172)
[09:19:41] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[09:19:43] *** Joins: taru9 (~realTaru9@user/taru9)
[09:19:43] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[09:19:44] *** Joins: MightyMu (~MightyMu@104.131.138.31)
[09:19:47] *** Joins: Techcable (~Techcable@168.235.93.147)
[09:19:48] *** Joins: cole (~cole@user/cole)
[09:19:49] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[09:19:52] *** Joins: abc_ (~abc@user/abc)
[09:19:53] *** Joins: Scotteh (~Scotteh@user/scotteh)
[09:19:53] *** Joins: Tritium (~tritium@toxin.sdamon.com)
[09:19:55] *** Joins: explodes (~explodes@user/explodes)
[09:19:57] *** Joins: bboles (~bboles@64.94.212.195)
[09:20:00] *** Joins: erry (~erry@errietta.me)
[09:20:02] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[09:20:04] *** Joins: Ellenor (ellenor@vice-chairwoman.of.freenode.management)
[09:20:27] *** ebb_ is now known as ebb
[09:21:57] *** Joins: kantlivelong (~kantlivel@cpe-67-250-125-43.hvc.res.rr.com)
[09:22:30] *** Joins: Spydar007 (~spydar007@user/spydar007)
[09:22:52] *** e9 is now known as emptynine
[09:23:02] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[09:24:40] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[09:27:47] <shrysr> ty imp i will look at that
[09:28:59] <aphysically> fwiw in the process of getting it working with mypy strict typechecking I did discover an edge case handling bug
[09:29:02] *** Quits: ogis_ (~Android@p1927250-omed01.osaka.ocn.ne.jp) (Quit: -a- Connection Timed Out)
[09:29:29] *** FunkyBob_ is now known as FunkyBob
[09:30:24] *** Joins: stranac (~stranac@195.29.239.126)
[09:34:04] *** Joins: ogis (~Android@p1927250-omed01.osaka.ocn.ne.jp)
[09:35:26] *** Joins: PyT001 (~PyT001@2402:e280:3d22:227:2957:762a:111d:eb9e)
[09:35:30] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[09:37:07] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:3dc5:2e88:2e7a:2ac)
[09:38:39] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[09:38:51] *** Quits: jim (~jim@about/linux/staff/jim) (Remote host closed the connection)
[09:39:59] *** Joins: someguy123 (~someguy@user/someguy123)
[09:41:45] *** Joins: mei (~mei@user/mei)
[09:42:33] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 248 seconds)
[09:42:56] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 268 seconds)
[09:43:32] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 258 seconds)
[09:44:18] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[09:45:06] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:45:20] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[09:47:13] *** Joins: fofoni (~fofoni@user/fofoni)
[09:47:52] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[09:48:07] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[09:48:42] *** Joins: jim (~jim@about/linux/staff/jim)
[09:50:03] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[09:53:52] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: WeeChat 3.2)
[09:57:56] *** Quits: dre (~dre@2001:8003:c932:c301:64b7:95dc:bc24:e941) (Quit: Leaving)
[09:58:43] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[09:59:58] *** Joins: gggp (~textual@125.33.81.186)
[10:01:45] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[10:01:53] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[10:02:09] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[10:02:33] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[10:04:24] *** Joins: the-mask (~the-mask@user/the-mask)
[10:07:05] *** Quits: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl) (Ping timeout: 248 seconds)
[10:09:40] *** Quits: gggp (~textual@125.33.81.186) (Ping timeout: 250 seconds)
[10:12:10] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[10:12:30] *** Quits: manin (~x@185.242.190.95) (Quit: Leaving)
[10:14:13] *** Quits: AlanMD (~AlanMD@5-12-8-103.residential.rdsnet.ro) (Ping timeout: 252 seconds)
[10:14:13] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[10:15:23] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[10:15:44] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[10:16:43] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[10:17:50] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[10:18:55] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:19:18] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[10:21:09] *** Joins: Wulf (~Wulf@user/wulf)
[10:25:10] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:26:33] *** Joins: skali (~skali@178.214.254.136)
[10:26:48] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Read error: Connection reset by peer)
[10:27:09] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:27:39] *** Quits: skali (~skali@178.214.254.136) (Client Quit)
[10:28:06] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[10:29:49] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Quit: Leaving)
[10:31:22] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Quit: Leaving)
[10:31:35] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[10:32:22] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 252 seconds)
[10:33:13] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[10:33:35] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[10:34:26] *** Joins: gggp (~textual@60.10.23.160)
[10:34:33] *** Quits: kostkon (~kostkon@2a02:587:a110:6f20:b1f0:6beb:6b69:cf32) (Remote host closed the connection)
[10:35:07] *** Quits: gggp (~textual@60.10.23.160) (Client Quit)
[10:35:28] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:36:22] *** Joins: dre (~dre@2001:8003:c932:c301:64b7:95dc:bc24:e941)
[10:40:04] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 252 seconds)
[10:40:26] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[10:43:04] *** Joins: lithammer (~lithammer@46.19.36.119)
[10:46:11] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:46:17] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:50] *** Joins: seednode (~seednode@user/seednode)
[10:47:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:50:36] *** Joins: gtz (~gtz@185.12.215.241)
[10:51:23] *** Joins: kosh (~kosh@user/kosh)
[10:52:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[10:53:52] *** Quits: Haxxa (~Haxxa@122.199.46.17) (Ping timeout: 250 seconds)
[10:56:04] *** Joins: Haxxa (~Haxxa@122.199.46.17)
[10:57:05] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[10:59:11] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[11:00:04] *** Joins: djapo (~archangel@user/djapo)
[11:00:13] *** Joins: upsala (~zcb@185.213.155.160)
[11:00:35] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:8c2d:7a40:c763:be0b) (Ping timeout: 258 seconds)
[11:02:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[11:02:03] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[11:03:08] *** Joins: rendar (~rendar@user/rendar)
[11:04:05] *** Joins: fikran (~fikran@user/fikran)
[11:04:07] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:05:40] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:ccd3:7709:4b66:b530)
[11:06:03] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:06:04] *** Joins: igor (~igor@192-141-191-229.alternativaip.net.br)
[11:08:10] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 250 seconds)
[11:10:10] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:ccd3:7709:4b66:b530) (Ping timeout: 240 seconds)
[11:10:42] *** Joins: gusto (~Augustus@109.255.100.54)
[11:11:10] *** Joins: VaniaPy (~VaniaPy@79.103.106.1.dsl.dyn.forthnet.gr)
[11:12:27] *** nvz_ is now known as nvz
[11:16:10] *** Quits: jazzy (~jaziz@2600:380:4533:7020:c055:7f23:886:f4ac) (Ping timeout: 240 seconds)
[11:17:49] *** Joins: gggp (~textual@60.10.23.160)
[11:18:01] *** Quits: zamba (~marius@5.226.162.54) (Ping timeout: 248 seconds)
[11:18:58] *** Quits: gggp (~textual@60.10.23.160) (Client Quit)
[11:20:23] <gitesh> Why does the course suddenly turns to use internet?
[11:20:55] <aphysically> looks like the new syntax is preferred for even Optional: https://github.com/python/mypy/pull/10624
[11:21:14] <gitesh> Why would I use internet in my python programs?
[11:22:14] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:ccd3:7709:4b66:b530)
[11:22:33] <Wulf> aphysically: it's shorter :)
[11:23:24] *** Quits: igor (~igor@192-141-191-229.alternativaip.net.br) (Remote host closed the connection)
[11:23:33] <TML> gitesh: because the internet is a common communications pathway for sending and receiving data from external systems?
[11:26:21] *** Joins: imp (~imp@192-141-191-229.alternativaip.net.br)
[11:26:27] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[11:26:40] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:ccd3:7709:4b66:b530) (Ping timeout: 240 seconds)
[11:26:57] <gitesh> Why would I want external system
[11:27:00] <gitesh> I don't know
[11:27:17] <TML> gitesh: Why wouldn't you?
[11:28:12] <gitesh> Because I have pen drive
[11:29:22] <gitesh> Also internet is slow compare to my own system
[11:29:28] <TML> so any time you want to process data in Python, you're first going to: put your pendrive in one computer, mount it, download the data to the pendrive, eject it, put the pendrive into another computer, mount it, and copy the files from the pendrive to the local disk?
[11:29:53] <TML> I'm betting that's going to be slower than just directly downloading the data you wanted with Python :)
[11:30:18] <gitesh> Oh :)
[11:31:07] *** Parts: VaniaPy (~VaniaPy@79.103.106.1.dsl.dyn.forthnet.gr) ()
[11:31:42] *** Joins: palasso (~palasso@user/palasso)
[11:32:40] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:32:56] <the-mask> hello, has anybody some experience with tksheet - table widget for tkinter ?
[11:33:31] <TML> gitesh: I mean, I have no idea what you're planning to do with your Python code, but most non-trivial tasks eventually evolve to doing SOME kind of interaction with the broader world, such as sending emails, chats, other other types of notifications; downloading data sets from 3rd party hosts; etc.
[11:35:28] *** Quits: emika (~emika@185.207.249.162) (Ping timeout: 250 seconds)
[11:36:25] *** Joins: emika (~emika@185.207.249.162)
[11:36:33] *** Joins: sazawal (~sazawal@182.64.58.123)
[11:41:05] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:ccd3:7709:4b66:b530)
[11:42:27] *** Quits: imp (~imp@192-141-191-229.alternativaip.net.br) (Remote host closed the connection)
[11:43:04] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:43:31] *** Joins: manti7 (~manti7@176.10.104.94)
[11:45:40] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:ccd3:7709:4b66:b530) (Ping timeout: 240 seconds)
[11:47:30] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[11:47:57] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[11:48:35] *** Joins: {4144}| (~{4144}@46.56.64.118)
[11:49:10] *** Joins: imp (~imp@192-141-191-229.alternativaip.net.br)
[11:50:29] *** Quits: inomoz (~inomoz@176.59.111.80) (Quit: WeeChat 3.2)
[11:50:31] *** Parts: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Leaving)
[11:50:59] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Read error: No route to host)
[11:51:06] *** Joins: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de)
[11:52:10] *** Quits: {4144} (~{4144}@46.56.64.31) (Ping timeout: 240 seconds)
[11:52:22] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 250 seconds)
[11:53:04] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[11:53:35] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[11:53:53] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[11:53:59] *** Joins: dingen (~dreamer@user/dreamer)
[11:54:02] *** dingen is now known as dreamer
[11:55:28] *** Quits: safe (~safe@cpe-74-64-165-24.nj.res.rr.com) (Quit: Leaving)
[11:56:18] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[11:56:30] *** Joins: maharshipatel (~maharship@2409:4041:e80:664c:805f:688c:1738:49da)
[11:56:43] <maharshipatel> hello everyone
[11:57:33] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:8417:153c:6306:6c0f)
[11:59:53] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[12:01:04] *** Parts: maharshipatel (~maharship@2409:4041:e80:664c:805f:688c:1738:49da) ()
[12:01:22] *** Joins: maharshipatel (~maharship@2409:4041:e80:664c:805f:688c:1738:49da)
[12:01:40] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:8417:153c:6306:6c0f) (Ping timeout: 240 seconds)
[12:01:40] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[12:04:38] <rendar> is correct to think of pandas DataFrames as a memory array of, say, floats allocated with malloc() ?
[12:04:43] *** Joins: pro_z (~pro_z@37.214.45.81)
[12:05:03] *** Quits: imp (~imp@192-141-191-229.alternativaip.net.br) (Remote host closed the connection)
[12:05:31] *** Joins: Voxel (~Voxel@ip178-67-155-188.onego.ru)
[12:06:06] *** CuriousErnestBri is now known as CuriousErnestBro
[12:06:17] <gcbirzan> rendar: For what purpose?
[12:06:37] <rendar> gcbirzan, huh? in general
[12:06:59] <gcbirzan> I mean, not really, there's so much more to it, that that kind of simplification is useless.
[12:07:36] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[12:08:22] *** Joins: gggp (~textual@60.10.23.160)
[12:11:36] <rendar> gcbirzan, i'm aware of the many functions of pandas, i was wondering if that would be a correct memory representation of the frame, *in memory*
[12:12:15] <gcbirzan> I don't know, probably each column is stored as an array.
[12:14:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[12:14:08] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:8417:153c:6306:6c0f)
[12:14:31] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[12:15:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:57] <gcbirzan> I'm pretty sure it's way more compliacted than that, but if you want, you probably can think about it like that
[12:16:01] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:6fa4:9aff:db69:8cff) (Remote host closed the connection)
[12:18:40] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:8417:153c:6306:6c0f) (Ping timeout: 240 seconds)
[12:19:02] <jean-luc> https://www.geeksforgeeks.org/python-pandas-dataframe/
[12:19:06] <jean-luc> good reading either way
[12:19:16] <rendar> thanks
[12:19:25] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[12:24:01] *** Joins: d0ku (~d0ku@178.43.19.40.ipv4.supernova.orange.pl)
[12:24:11] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Client Quit)
[12:28:00] *** Joins: brelod (~me@87.74.198.187)
[12:28:07] *** Quits: gggp (~textual@60.10.23.160) (Ping timeout: 240 seconds)
[12:29:14] *** Quits: manti7 (~manti7@176.10.104.94) (Read error: Connection reset by peer)
[12:29:44] <bookworm> pandas uses numpy heavily, so that's the ultimate storage for most things (least the homogeneous arrays)
[12:29:57] *** Joins: gggp (~textual@60.10.23.160)
[12:30:06] *** Joins: ice9 (~ice9@user/ice9)
[12:30:52] *** Joins: manti7 (~manti7@176.10.104.94)
[12:31:57] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:2dc9:a233:d4e5:eba9)
[12:35:34] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 252 seconds)
[12:35:46] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:10] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:36:10] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:2dc9:a233:d4e5:eba9) (Ping timeout: 240 seconds)
[12:36:53] <rendar> bookworm, i see
[12:37:03] <rendar> bookworm, i thought pandas used its own allocation system
[12:38:42] *** Quits: samuelbernardo (~samuelber@nata02.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[12:38:56] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:15] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:42:05] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:42:09] *** Quits: maharshipatel (~maharship@2409:4041:e80:664c:805f:688c:1738:49da) (Quit: Client closed)
[12:43:43] *** Joins: bad_blue_bull (~user@ppp92-100-27-213.pppoe.avangarddsl.ru)
[12:43:44] <bad_blue_bull> hi
[12:49:03] *** Joins: WayToDoor7 (~WayToDoor@user/waytodoor)
[12:49:11] <bad_blue_bull> how do progs like sed, grep etc recognize end of text from stdin?
[12:49:35] <bookworm> you literally get EOF from the kernel
[12:51:03] *** WayToDoor7 is now known as way
[12:51:12] *** way is now known as b
[12:51:15] *** Joins: rich (~rich@2a03:4000:3f:f1:b859:16ff:fe45:e87f)
[12:51:41] *** b is now known as WayToDoor
[12:52:04] <bad_blue_bull> yeah indeed, just tested it from xterm
[12:52:59] <bad_blue_bull> but in emacs eshell "echo foo | ./myprog.py" goes into infinite loop waiting for eof
[12:53:23] <bookworm> depends on what myprog.py does
[12:53:39] *** Joins: mcope (~matt@user/mcope)
[12:53:55] <bad_blue_bull> for line in fileinput.input(): print("$"+line)
[12:54:06] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:54:15] <raek> bad_blue_bull: what happens if you run "echo foo | ./myprog.py" in some other shell (such as bash)?
[12:54:34] <bad_blue_bull> as I said it's alright then
[12:55:22] <raek> you could try M-x shell instead of M-x eshell
[12:55:37] <bionade24> Hello, is there anything special when you want to inherit static vars from a base class?
[12:55:40] <bookworm> maybe emacs keeps a fd open for stdin and then there's no EOF
[12:55:53] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[12:56:17] <raek> maybe the emacs shell's implementation of pipe is buggy?
[12:57:10] <raek> or "echo" in eshell does not close its stdout when done, or something
[12:58:05] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:58:36] <raek> hmm, from the eshell manual: "The output redirection operators > and >> as well as pipes are supported, but there is not yet any support for input redirection."
[12:59:13] *** Parts: ferz (~ferz@146-241-190-238.dyn.eolo.it) ()
[13:00:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 250 seconds)
[13:03:44] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:04:45] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:587f:6d94:d6a0:8f90)
[13:06:30] *** Joins: frost (~frost@59.71.240.119)
[13:11:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:13:27] *** Joins: fikran (~fikran@user/fikran)
[13:14:02] *** Joins: Shadur (~Rens@2001:981:9a5e:1:30cf:83de:31d7:dfbe)
[13:14:19] *** Joins: yogoyo (~paddy@user/yogoyo)
[13:14:33] *** Joins: Julian (~tos9@python/site-packages/Julian)
[13:14:35] *** Joins: Zajt (~Zajt@195-67-143-106.customer.telia.com)
[13:18:05] *** Quits: gustik (~gustik@2a01:c844:2410:9020:63ab:4bb6:83d2:e11b) (Quit: Leaving)
[13:18:41] *** Joins: dontyouloveshort (~julius@ip5f5bc213.dynamic.kabel-deutschland.de)
[13:21:11] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[13:22:13] * enyc meows
[13:22:56] <enyc> python3.9 in deibian now hrrm,  I wonder how long until stuff starts depending upon python 3.10, only dev software ??
[13:23:10] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:23:40] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:587f:6d94:d6a0:8f90) (Ping timeout: 240 seconds)
[13:24:44] *** Quits: RavuAlHemio (~ondra@selene.ondrahosek.com) (Quit: ZNC 1.8.2 - https://znc.in)
[13:25:08] *** Joins: RavuAlHemio (~ondra@selene.ondrahosek.com)
[13:26:27] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Remote host closed the connection)
[13:27:16] <molt> hey all! I'm really terrible with regex and could use some help. I'm iterating through a list of URLs and need any url that is of the following construction: https://musescore.com/user/XXXXXXXXXX ("XXX" representing anything coming after the https://musescore.com/user/
[13:27:33] <rendar> how to fix this with asyncio? https://bpa.st/RKZQ
[13:29:36] <bookworm> molt: you don't want a regex
[13:29:49] <jinsun> molt: that seems like it could be solved with str.startswith
[13:29:50] <bookworm> just check for and strip the prefix
[13:30:10] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[13:36:44] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:f45d:d20:e188:3c08)
[13:37:40] *** Quits: Samian (~Sami@174.27.107.153) (Ping timeout: 250 seconds)
[13:38:48] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Remote host closed the connection)
[13:38:57] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[13:39:39] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:40:00] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:41:10] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:f45d:d20:e188:3c08) (Ping timeout: 240 seconds)
[13:42:31] <susam> molt: if url.startswith(prefix): user = url[len(prefix):]
[13:43:22] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[13:44:11] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[13:44:23] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[13:44:48] <gitesh> how does `x++++y` is working
[13:45:19] <gitesh> `x++++++++y`
[13:45:37] <KirkMcDonald> + is a unary operator.
[13:45:54] <KirkMcDonald> Meaning `+y` is a valid expression.
[13:46:08] <susam> gitesh: Same reason as +++10 works.
[13:46:15] *** Joins: bugsniper (~bugsniper@cpe-24-24-180-229.socal.res.rr.com)
[13:46:22] <susam> Or why ---10 works.
[13:46:33] <KirkMcDonald> So `x++y` is the same as `x + (+y)`
[13:47:16] <KirkMcDonald> - is also a unary operator. Same deal.
[13:47:43] <rendar> any help? how to fix this with asyncio? https://bpa.st/RKZQ
[13:48:12] <gitesh> i thought + is a binary operation
[13:48:21] <KirkMcDonald> It's also a binary operator, yes.
[13:48:40] *** Joins: ihristov (~ihristov@217.145.94.71)
[13:49:19] <KirkMcDonald> The unary + does nothing. It's provided for symmetry with unary - (which negates a number), and has no effect.
[13:50:15] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:51:21] <bpalmer> well, it invokes __pos__
[13:52:33] <KirkMcDonald> Sure, you can overload it to do whatever.
[13:52:34] <gitesh> "++ is not a syntax that means anything in Python."
[13:53:11] <susam> gitesh: ++a = +(+a))
[13:53:14] *** Quits: bugsniper (~bugsniper@cpe-24-24-180-229.socal.res.rr.com) (Remote host closed the connection)
[13:53:19] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:53:26] <gitesh> susam: ok that does make sense
[13:53:44] <gitesh> to my question one option was x++ y
[13:54:06] <gitesh> that can mean x + (+y) i guess
[13:54:18] <susam> gitesh: yes
[13:54:38] <gitesh> that is why it is doing operation in the python interpreter
[13:54:51] <gitesh> though they said it is not a syntax
[13:55:08] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[13:56:27] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 240 seconds)
[13:59:57] <susam> gitesh: Check this fun example: https://bpa.st/IFOQ . Of course, actual real world code should not be written like this.
[14:00:38] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:02:11] <jean-luc> woah
[14:02:16] <jean-luc> that was the most fun ive had in a minute
[14:02:38] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 244 seconds)
[14:03:40] <The-Compiler> :o
[14:03:57] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[14:04:01] <The-Compiler> I didn't even know about __pos__
[14:04:06] <jean-luc> thats becoz u r a pos
[14:04:10] <jean-luc> hahahaha jj
[14:04:49] <rendar> let's say i create a pandas DataFrame, it will use float64 or integer for numbers, but what about dates? it will allocate a new datetime object for each row, right?
[14:05:12] <susam> Python objects have too many magic methods. It is quite easy to overload all of them to make Python look like a new very unPythonic language.
[14:05:23] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Client Quit)
[14:05:31] <jean-luc> __abs__(self) __invert__(self) __neg__(self) __pos__(self) Unary operators abs( x ), ~ x, - x, and + x, respectively, call these methods.
[14:06:31] <jean-luc> its unary extensions for your own classes, not exactly that magical
[14:06:47] *** Joins: thiras (~thiras@user/thiras)
[14:07:10] <hexnewbie> I wonder how common is __pos__ in real-life code
[14:07:51] <susam> jean-luc: Well, the Python documentations calls them "magic methods" as well as "dunder methods". I did not invent those terms. :)
[14:08:19] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[14:08:36] <The-Compiler> hexnewbie: https://sourcegraph.com/search?q=context:global+def+__pos__&patternType=literal
[14:08:57] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:591f:d5a5:b34c:a2e2)
[14:09:07] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[14:09:56] <hexnewbie> The-Compiler: Ha, that's better (more varied) than the search engine I tried. Thanks. will write it down. But still, the first matches seem to be all about delegating __pos__ to the internal implementation of __pos__.
[14:10:34] <The-Compiler> hexnewbie: sourcegraph is pretty nice, there's https://grep.app/ and https://codesearch.debian.net/ too (and https://github.com/search but that's usually a pain to use)
[14:11:05] <hexnewbie> Interesting, someone uses __pos__ to resolve references (as if something is wrong with __call__)!
[14:13:18] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[14:13:40] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:591f:d5a5:b34c:a2e2) (Ping timeout: 240 seconds)
[14:14:23] *** Quits: stevieh (~skrodzki@p2e584735.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:17:36] *** Joins: yte3 (~0@151.15.36.56)
[14:18:52] <rendar> any help?
[14:19:50] <gitesh> does `f'` string is same as .format method only different syntax?
[14:20:09] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[14:20:13] <supakeen> Not entirely no, but in the grand scheme of things, yes.
[14:20:13] <gitesh> no
[14:20:22] <yte3> Py_BuildValue() returns a new reference... so a code like:  PyObject_SetAttrString(pObj, "someattr", Py_BuildValue("s", cStr));  is wrong (leaks memory), correct?
[14:21:22] <gitesh> there is no postfix operation in python like c as `x++`
[14:21:24] <gitesh> ?
[14:21:35] <supakeen> gitesh: These things seem easy to try or find out yourself.
[14:21:36] <gitesh> oh there is not prefix also
[14:21:45] <gitesh> supakeen: ok ok
[14:22:39] <susam> gitesh: f-string could be thought of as an alternative for .format but they aren't the same. See https://www.python.org/dev/peps/pep-0498/#differences-between-f-string-and-str-format-expressions for some differences.
[14:22:53] *** Joins: rsx (~dummy@ppp-188-174-138-96.dynamic.mnet-online.de)
[14:22:58] <gitesh> susam: ok checking
[14:23:58] <supakeen> yte3: As I recall not for "s", but only for "o" but you should be checking its return value anyways.
[14:25:14] *** Joins: jazzy (~jaziz@2600:380:8773:c113:1093:1c01:217f:efb2)
[14:25:26] *** Joins: azi (~azi@44.173.197.104.bc.googleusercontent.com)
[14:26:27] <azi> I have a local python package that I don't intend to publish/share online. what is the best tool to use if I still want to be able to install it localy and have rules about that
[14:26:40] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:913b:6132:84e:9ffb)
[14:26:40] <azi> should I still use the pip guidline but disregard the uploading phase?
[14:27:30] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:a1ee:580f:99d8:c5bc) (Ping timeout: 250 seconds)
[14:29:58] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[14:30:39] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[14:30:43] <susam> azi: I would just write a setup.py and run python3 setup.py install.
[14:31:00] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:31:10] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:913b:6132:84e:9ffb) (Ping timeout: 240 seconds)
[14:31:14] <susam> azi: Why do you want to install it locally? Do you have other projects that depends on it? So you want to make one installation that can be used by all your other projects?
[14:31:23] *** Joins: Julian (~tos9@python/site-packages/Julian)
[14:31:51] <azi> susam: I have a github repo with the project. I want to be able to start a new machine, pull the project and install it seamlessly
[14:32:37] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[14:32:43] <susam> azi: For personal-use-only projects, I normally don't "install" them. I just git-clone them and execute them directly with, say, python3 /path/to/script.py or python3 -m pkg.subpkg.foo.
[14:33:03] <The-Compiler> azi: if you have a setup.py (or e.g. the poetry equivalent), you can pip install it right from the git repo
[14:33:22] <susam> azi: In case the project needs to run as a service, I add them same commands to a systemctl service unit file to launch the project automatically on reboot.
[14:33:50] <susam> azi: But if you really do want to install it, yes, I would just have a simple setup.py script and install it using that.
[14:34:09] <susam> azi: And ignore anything about uploading it to PyPI.
[14:34:17] <azi> susam: interesting. how is -m supposed to work? the thing I have is a module (call it foo) that has many utility functions that I need. the use case is that I start ipython import my module/package and use these functions
[14:34:45] *** Joins: Kingsy (~chris@kingsy.co.uk)
[14:34:51] <Kingsy> anyone seen this when using pip search before
[14:34:51] <Kingsy> python3 -m pip search beets
[14:34:52] <susam> azi: I set the current working directory to the parent of the top-level package. Then start Python there. This approach is supported in systemctl too.
[14:34:52] <Kingsy> ERROR: XMLRPC request failed [code: -32500]
[14:35:46] <susam> Kingsy: Yes, I am facing the same issue. The subsequent error line says that the issue is due to high load.
[14:35:59] <susam> Kingsy: "RuntimeError: PyPI's XMLRPC API is currently disabled due to unmanageable load and will be deprecated in the near future. See https://status.python.org/ for more information."
[14:36:06] <Kingsy> ah ok just something totally out of my control then
[14:36:06] <Kingsy> np
[14:36:13] <jinsun> that has been the case for many months now
[14:36:24] *** Joins: codificat (~pep@187.red-83-46-128.dynamicip.rima-tde.net)
[14:36:33] <azi> susam: yes this is what I am doing now. although if I have a python script that wants to use these functions then it, again, needs to know about the project directory?
[14:36:50] <jinsun> they don't have plans to ever enable the XMLRPC thing agaiin
[14:37:06] <susam> azi: Yes, that is why I asked if you want to have this project as a dependency for other projects. If so, there is a good reason to install it locally.
[14:37:27] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4433)
[14:37:35] <azi> susam: so then just use a setup.py script that "dispatches" the files to the proper folders?
[14:37:36] *** abc_ is now known as zwindl
[14:38:21] <susam> susam: Not sure what "dispatches" means here. A pip install or python3 setup.py install would automatically place the files into the right directories under site-packages.
[14:38:30] <susam> azi: ^
[14:39:14] <rendar> any help? how to fix this with asyncio? https://bpa.st/RKZQ
[14:39:48] <azi> susam: gotcha, this is what I meant
[14:40:01] <bjs> rendar: what is ainput() ?
[14:40:19] <rendar> bjs: aioconsole's function to read stdin text from console
[14:40:26] <azi> second question is this: I am in the directory of the module and I import it it from foo import *. Now I change some code in the project and would like to reload the module to get the changes
[14:40:28] <rendar> like input() but as a coroutine
[14:40:31] <azi> is there a way to accomplis that?
[14:40:39] <bjs> rendar: and what is Parser?  and how is this running?
[14:40:47] <azi> I see that importlib.reload() does not work when one does from foo import *
[14:41:11] <rendar> bjs: Parser is a class of mine which "compiles" strings into a Program class which can be executed
[14:41:14] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[14:42:40] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[14:42:58] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:913b:6132:84e:9ffb)
[14:43:30] <bjs> rendar: by now you should know with async programs to come up with some semi-complete example that actually runs so we can talk concretely about what's happening
[14:43:42] <bjs> rendar: is https://bpa.st/MN4Q a good analogy?
[14:43:59] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[14:44:04] <rendar> bjs, yes
[14:44:09] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:70b0:8bd4:3605:ce5c) (Quit: Textual IRC Client: www.textualapp.com)
[14:44:10] *** Joins: Atque (~Atque@user/atque)
[14:44:23] <bjs> rendar: okay and what's wrong with my version?  I can happily keep inputting more lines while it's sleeping
[14:44:36] <rendar> i can't...
[14:45:17] *** Quits: spithash (~spithash@user/spithash) (Quit: leaving)
[14:45:26] *** Joins: ice9 (~ice9@user/ice9)
[14:46:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[14:46:25] *** Joins: spithash (~spithash@user/spithash)
[14:46:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:46:55] <bjs> rendar: okay... it seems very hard to help until you narrow down the problem then
[14:47:12] <rendar> bjs: use `line = await aioconsole.ainput("> ")` in your code
[14:47:40] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:913b:6132:84e:9ffb) (Ping timeout: 240 seconds)
[14:47:46] *** Quits: spithash (~spithash@user/spithash) (Client Quit)
[14:47:53] <rendar> bjs: you'll see that prompt isn't printed until sleep finishes
[14:48:10] <rendar> and: if i don't see any prompt, i won't write further commands, that's pretty obvious
[14:48:21] *** Joins: ayrus (~ayrus@user/ayrus)
[14:48:27] *** Joins: cdown (~cdown@89.32.122.5)
[14:48:54] <bjs> rendar: okay well that's a totally different thing than you said before, and yes that will of course happen
[14:49:01] <bjs> rendar: the > will be printed when ainput() is executed
[14:49:18] <bjs> rendar: maybe you want to have two tasks? one getting input and the other consuming the lines?
[14:49:24] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[14:49:32] *** Joins: cdown_ (~cdown@163.114.131.1)
[14:49:41] <rendar> bjs, yeah, i think that would be the solution
[14:50:02] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Remote host closed the connection)
[14:50:30] <rendar> while True: line = await ainput -> then putting 'line' string into an asyncio.Queue, you mean this right?
[14:51:06] <bjs> rendar: yeah that would work
[14:52:09] *** Joins: fortuno51 (~fortuno51@37.120.156.254)
[14:52:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[14:52:31] <rendar> bjs, there's another problem
[14:52:45] <bjs> rendar: do I have to guess?
[14:52:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:52:57] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 248 seconds)
[14:53:06] *** cdown_ is now known as cdown
[14:53:31] <bjs> rendar: (or are you going to tell me the problem :P)
[14:53:35] <rendar> bjs, besides the prompt is not printed, i can still type strings, but i notice that those strings get processed also when the prompt is printed, that's related to the same problem of the propmt printing i guess, it should be cleared with the queue approach
[14:54:04] <rendar> but, no, i don't it will be cleared with the queue approach, because the queue will await a new command
[14:54:18] <rendar> blocking dequeuing of other commands..
[14:54:31] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[14:54:32] <bjs> rendar: I don't know what you mean?
[14:54:34] <rendar> i want that the queue loop will *spawn* commands
[14:54:41] <rendar> i will show you with code
[14:54:44] *** Quits: azi (~azi@44.173.197.104.bc.googleusercontent.com) (Quit: Lost terminal)
[14:54:51] <bjs> rendar: okay,  so do that then?
[14:55:24] <bjs> rendar: I'm sure you can have a good go at working it out,  you've done this before
[14:55:40] *** Quits: cdown (~cdown@163.114.131.1) (Quit: https://chrisdown.name)
[14:55:45] <rendar> bjs, yes, i'm starting to grasp asyncio
[14:55:53] *** Joins: cdown (~cdown@163.114.131.1)
[14:56:21] *** Quits: fortuno51 (~fortuno51@37.120.156.254) (Client Quit)
[14:56:28] *** Joins: andyewen (~andyewen@91.110.2.61)
[14:56:40] <rendar> but.. spawning.. without awaiting, you can do that with create_task() without awaiting it, but at some point you have to await the Tasks objects create_task() returns...
[14:56:50] <rendar> so, if the queue loop can't wait them..
[14:57:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[14:58:07] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[14:58:19] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[14:58:33] *** Retr0id6 is now known as Retr0id
[14:58:38] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:00:09] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[15:00:20] *** Joins: humberto1 (~humbertow@2806:107e:f:5e47:913b:6132:84e:9ffb)
[15:02:32] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[15:02:49] *** Joins: jasper_ (~user@styria.daemonized.org)
[15:03:17] *** Joins: dez (uid92154@user/dez)
[15:03:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:04:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:05:37] *** Joins: zaquest (~notzaques@5.128.210.178)
[15:05:58] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[15:06:07] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[15:06:43] *** Joins: CombatVet (~c4@user/combatvet)
[15:06:49] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[15:07:39] *** Joins: legola (~legola@46.235.100.27)
[15:07:54] *** Joins: csevast (~csevast@83.26.154.40)
[15:09:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:10:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:10:24] *** Joins: computeiro (~Wender@189.15.168.19)
[15:10:38] *** Joins: tx8r (~tx8r@gateway/tor-sasl/tx8r)
[15:10:48] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[15:11:05] *** Quits: ayrus (~ayrus@user/ayrus) (Ping timeout: 248 seconds)
[15:11:27] *** themill_ is now known as themill
[15:11:50] *** Joins: spithash (~spithash@user/spithash)
[15:11:54] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[15:12:13] *** Quits: k162 (k162@user/k162) (Remote host closed the connection)
[15:12:50] *** Joins: k162 (k162@user/k162)
[15:14:10] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[15:15:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:16:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:16:49] *** Joins: pwnd_sfw5 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[15:17:44] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[15:17:44] *** pwnd_sfw5 is now known as pwnd_sfw
[15:20:07] *** Joins: dvx (~dvx@185.63.97.64)
[15:20:27] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[15:20:50] *** Joins: maharshipatel (~maharship@2409:4041:e80:664c:3523:b9ce:4022:65be)
[15:21:04] <maharshipatel> hi
[15:22:49] *** Joins: fikran (~fikran@user/fikran)
[15:22:58] *** Quits: csevast (~csevast@83.26.154.40) (Ping timeout: 250 seconds)
[15:23:08] *** Joins: Ergo^ (~ergo@91.238.59.144)
[15:23:49] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[15:25:39] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[15:26:35] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[15:30:06] *** Joins: autistic (~linguist@170.84.56.192)
[15:30:15] <maharshipatel> i have 2 codes which basically creates string of primenumbers and returns 5 numbers from asked postion ( i ). what i need help with is code 1 is very fast compare to code 2 when input i is less than 2500. but when input is around 10000 code 1 is very slow and code 2 still performs https://bpa.st/GDZQhttps://bpa.st/GDZQ
[15:30:20] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:30:48] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:31:23] <maharshipatel> i have 2 codes which basically creates string of primenumbers and returns 5 numbers from asked postion ( i ). what i need help with is code 1 is very fast compare to code 2 when input i is less than 2500. but when input is around 10000 code 1 is very slow and code 2 still performs the same . code:- https://bpa.st/GDZQ
[15:32:04] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 250 seconds)
[15:33:15] <bookworm> maharshipatel: sieve of Aristotle's, look it up
[15:33:40] <mgedmin> not Eratosthenes?
[15:33:44] <bookworm> your algorithm has a catastrophic runtime behavior
[15:33:59] <bookworm> right, sorry
[15:34:02] <bookworm> Eratosthenes
[15:34:04] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[15:34:19] <bookworm> greek names... not something I can easily remember
[15:34:23] *** Quits: maharshipatel (~maharship@2409:4041:e80:664c:3523:b9ce:4022:65be) (Quit: Client closed)
[15:34:48] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Quit: ZNC 1.8.2 - https://znc.in)
[15:34:54] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[15:35:12] <bookworm> alas, google finds it even with the wrong name XD
[15:35:36] <jean-luc> any django heads in here?
[15:37:16] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 250 seconds)
[15:38:51] *** Joins: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl)
[15:39:09] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[15:39:35] <Julian> jean-luc: As always, just ask your question :). If someone knows, they'll answer.
[15:40:32] *** {4144}| is now known as {4144}
[15:40:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:42:00] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[15:43:05] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 248 seconds)
[15:43:54] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[15:44:40] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
[15:46:15] *** Joins: audiophile_ (~audiophil@user/audiophile)
[15:46:39] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:48:04] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[15:48:35] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[15:49:29] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[15:50:40] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:52:25] *** autistic is now known as linguist
[15:52:25] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:450e:e51c:f915:7da6)
[15:52:42] <audiophile_> thanks jinsun that makes sense! that passing by reference thing keeps tripping me up
[15:55:30] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:57:35] <gitesh> what does 'fetching' means?
[15:58:23] <gitesh> attractive?
[15:58:42] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[15:59:11] <nedbat> gitesh: give us the context
[15:59:27] <gitesh> fetching a page from the website
[15:59:32] <nedbat> "retrieving"
[15:59:36] <deniska> downloadubg
[15:59:43] <deniska> downloading* :)
[15:59:44] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Excess Flood)
[15:59:45] <nedbat> or downloading :)
[16:00:08] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:00:53] *** Joins: brunodOut (~linguist@170.84.56.192)
[16:00:56] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[16:01:27] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f)
[16:01:47] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[16:01:47] *** Quits: emika (~emika@185.207.249.162) (Ping timeout: 240 seconds)
[16:02:37] <jean-luc> so it doesnt mean that page is beautiful :o
[16:02:39] *** Joins: emika (~emika@83.136.182.45)
[16:02:51] <jean-luc> *mind blown*
[16:03:01] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Ping timeout: 244 seconds)
[16:03:21] *** Quits: linguist (~linguist@170.84.56.192) (Ping timeout: 248 seconds)
[16:03:49] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[16:03:59] *** Joins: logithack (~logithack@p200300cfbf366f00d74a46fbd53e1789.dip0.t-ipconnect.de)
[16:04:13] *** Quits: ogis (~Android@p1927250-omed01.osaka.ocn.ne.jp) (Read error: Connection reset by peer)
[16:04:33] *** Joins: ogis (~Android@p2037202-ipngn201011tokaisakaetozai.aichi.ocn.ne.jp)
[16:04:34] *** Quits: the-mask (~the-mask@user/the-mask) (Ping timeout: 258 seconds)
[16:05:03] *** Joins: Naan (~Naan@user/naan)
[16:05:48] <jor> jean-luc: There's also a #django on this network...
[16:07:47] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Ping timeout: 240 seconds)
[16:09:31] *** Joins: noctavian_ (~noctavian@gateway/tor-sasl/noctavian)
[16:10:46] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[16:11:51] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:450e:e51c:f915:7da6) (Quit: Leaving)
[16:13:51] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[16:15:07] *** Quits: fearnothing (~fearnothi@user/fearnothing) (Ping timeout: 240 seconds)
[16:15:54] *** Joins: maharshipatel (~maharship@2409:4041:e80:664c:8888:5833:fb9d:e794)
[16:16:20] <maharshipatel> i am sorry my i got disconnected  from chat
[16:17:05] *** Joins: gggp (~textual@60.10.23.160)
[16:17:21] *** Joins: besnn (~besnn@user/besnn)
[16:17:29] *** Joins: cheater1__ (~Username@user/cheater)
[16:17:36] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[16:17:37] *** cheater1__ is now known as cheater
[16:19:02] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[16:19:15] <maharshipatel> bookworm you are right. what i don't understand is why it has this catastrophic runtime behavior.
[16:19:46] <bookworm>  because you have an algorithm that's O(n**2) at the very least
[16:19:58] <bookworm> exponential growth in other words
[16:19:59] *** Parts: brunodOut (~linguist@170.84.56.192) ()
[16:20:05] *** Joins: autistic (~linguist@170.84.56.192)
[16:20:32] <nedbat> (strictly speaking, exponential growth is O(2**n), which is even worse.  this is called quadratic)
[16:20:39] <bookworm> fair
[16:21:08] *** Quits: sazawal (~sazawal@182.64.58.123) (Read error: Connection reset by peer)
[16:21:23] <maharshipatel> so it as fast only for small inputs
[16:21:25] *** Joins: c10l (~c10l@89.34.167.207)
[16:21:36] <bookworm> it's slow even for small inputs
[16:21:48] <maharshipatel> but as input gets bigger it needs to do more work
[16:21:51] <bookworm> it's just that humans don't care if it takes 1ms or 400
[16:22:19] <maharshipatel> i understand  your point
[16:23:47] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:65e9:6f2b:5308:7e2f) (Ping timeout: 240 seconds)
[16:25:12] *** Joins: CoolerX (~CoolerX@user/coolerx)
[16:27:57] <gitesh> Fetching API means instead of browser doing request and response cycle(s) and finally building a website for us, Fetching API means retrieving recourses like images, videos, audios, etc .. ?
[16:28:24] <gitesh> separately
[16:28:40] <duoi> gitesh context?
[16:28:45] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:29:03] <gitesh> duoi: context is REST API, request data from the Internet
[16:29:18] <bookworm> "fetch" as in a dog that brings you a ball that you've thrown it. It has no notion that you are only allowed to do that for an API, any network call can be called that way
[16:29:45] <bookworm> it's just frequently used as a term to get data from some other system
[16:30:11] <gitesh> what would you say to dog? "fetch a ball" ?
[16:30:19] <bookworm> yes
[16:30:22] <duoi> gitesh fetching here is just specific jargon that suggests you call an api with a request and you get something as a response
[16:30:53] <gitesh> yeah that make sense duoi
[16:31:15] *** Joins: tx8r_ (~tx8r@gateway/tor-sasl/tx8r)
[16:32:23] *** Quits: tx8r (~tx8r@gateway/tor-sasl/tx8r) (Remote host closed the connection)
[16:32:23] *** Quits: autistic (~linguist@170.84.56.192) (Read error: Connection reset by peer)
[16:32:43] *** Joins: ppang (~ppang@49.205.173.37)
[16:33:31] *** Joins: autistic (~linguist@170.84.56.192)
[16:34:42] *** Joins: mh_le (~Mads@user/mh-le/x-4465771)
[16:35:00] <mh_le> is there anyway to remove all local packages cleanly?
[16:35:12] <mh_le> eg all that are installed by pip
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:47] *** Quits: gggp (~textual@60.10.23.160) (Ping timeout: 240 seconds)
[16:37:27] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:38:13] *** Joins: gggp (~textual@60.10.23.160)
[16:39:08] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[16:39:22] <ppang> pip list --user --format json | jq -r ".[] | .name" | xargs pip uninstall -y
[16:41:40] <mh_le> ppang: I get ERROR: Pipe to stdout was broken
[16:42:15] *** Quits: gggp (~textual@60.10.23.160) (Client Quit)
[16:42:16] *** Quits: dontyouloveshort (~julius@ip5f5bc213.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[16:43:28] *** Joins: plastico (~plastico@neomutt/plastico)
[16:46:40] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[16:47:29] *** Joins: Praise (~Fat@user/praise)
[16:49:37] *** Quits: autistic (~linguist@170.84.56.192) (Read error: Connection reset by peer)
[16:49:54] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e006:9406:76b2:6dbb)
[16:50:07] *** Joins: the-mask (~the-mask@user/the-mask)
[16:50:11] *** Joins: arinov (~arinov@213.194.126.155)
[16:50:19] *** Joins: hedinn (~notandi@73-149-17-89.fiber.hringdu.is)
[16:50:32] *** Yhg1s_ is now known as Yhg1s
[16:50:40] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 240 seconds)
[16:50:42] *** Joins: autistic (~linguist@170.84.56.192)
[16:51:13] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[16:51:35] *** Quits: tx8r_ (~tx8r@gateway/tor-sasl/tx8r) (Ping timeout: 244 seconds)
[16:52:14] *** Quits: hyper_dave (~hyper_dav@197.156.107.167) (Ping timeout: 250 seconds)
[16:54:20] *** InPhase_ is now known as InPhase
[16:54:20] *** Joins: hyper_dave (~hyper_dav@197.156.86.185)
[16:56:15] *** Joins: frost (~frost@59.71.240.119)
[16:56:52] *** Quits: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3) (Remote host closed the connection)
[16:56:54] *** Joins: Archenfield (~textual@2405:6580:8e60:4600:41be:562f:11e:9e65)
[16:58:03] *** Joins: bobbinn (~tobbi@73-149-17-89.fiber.hringdu.is)
[16:59:45] *** Joins: Java-- (~georgios@user/georgios)
[17:00:28] *** alexyov8 is now known as alexyov
[17:01:24] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 244 seconds)
[17:01:55] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[17:02:33] <ppang> maybe jq is not present in your system
[17:04:35] <mh_le> I got with pip list --user --format freeze > requirements.txt
[17:04:48] <mh_le> and then pip uninstall -r requirements.txt -y
[17:04:54] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[17:05:20] <duoi> mh_le that would be just the files you have in your requirements.txt file though, not everything on your environment
[17:05:32] *** Quits: ppang (~ppang@49.205.173.37) (Changing host)
[17:05:32] *** Joins: ppang (~ppang@user/ppang)
[17:05:35] <duoi> s/files/packages/
[17:05:41] <maharshipatel> thank you bookworm
[17:06:07] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[17:06:23] <mh_le> duoi: I listed all the local packages in the reqs file with pip list --user --format freeze > requirements.txt
[17:06:48] <duoi> ahh right
[17:06:50] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[17:09:53] *** Joins: bilb_ono_ (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[17:10:42] *** Leonarbro_ is now known as Leonarbro
[17:11:52] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Ping timeout: 268 seconds)
[17:11:53] *** bilb_ono_ is now known as bilb_ono
[17:12:07] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:12:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[17:12:23] <maharshipatel> can anyone  suggest good resource for data structure and algorithms
[17:12:27] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:12:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[17:13:07] <bookworm> algorithms in a nutshell, O'Reilly
[17:13:54] <bookworm> assuming you want a book. Else Wikipedia after googling common problems (sorting, prime numbers, data storage)
[17:14:05] <bookworm> hashmap / trees
[17:14:29] <bookworm> it's a deep rabbit hole, don't get lost
[17:15:20] *** Joins: dcand (~dcand@user/dcand)
[17:16:01] <bookworm> oh, and any of the MIT lectures about the topic you can find on YouTube, although a chalkboard is a horrible way to visualize algorithms
[17:16:14] <bookworm> animations tend to work better
[17:16:37] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[17:17:14] *** Joins: gggp (~textual@125.33.83.189)
[17:17:16] <dcand> does jinja automatically removes indentatio from html
[17:17:21] *** Quits: Abrax (~Abrax@user/abrax) (Read error: Connection reset by peer)
[17:17:29] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:17:37] <maharshipatel> i do have access to university courses but i thought i should  first learn basics and everything from books
[17:17:52] *** Joins: Abrax (~Abrax@user/abrax)
[17:17:56] <bookworm> then take those courses :D
[17:18:06] *** Joins: Naan` (~Naan@user/naan)
[17:18:07] <bookworm> some pre reading can certainly help though
[17:19:31] *** Joins: zeden (~zeden@user/zeden)
[17:19:40] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:19:48] *** Joins: masber (~masber@vpn-25.cscs.ch)
[17:19:55] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[17:20:18] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:20:43] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[17:21:07] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 240 seconds)
[17:21:07] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[17:21:34] <maharshipatel> i always stop in middle of the course as they are long that's why i thought pre reading will motivate me. as you can see my initial attempts are really horrible so i want to get familiar with topic.
[17:21:55] <maharshipatel> bookworm
[17:22:24] <duoi> dcand i dont believe so
[17:22:33] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[17:22:35] <bookworm> it's not horrible at all, you simply chose the naive approach
[17:22:38] <duoi> your jinja functions will appear as blank lines inside your rendered html
[17:22:42] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[17:22:49] <bookworm> algorithms are rarely intuitive if you don't know them
[17:23:19] <jean-luc> sure thats because they're optimized/derived
[17:23:24] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[17:23:38] <bookworm> but seeing that choosing the wrong algorithm means your program will run very slow is the first lesson we all learn :)
[17:24:18] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[17:24:24] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[17:26:18] <maharshipatel> Actually i run them on small input when coding at first and be happy that they are fast and effective . problem starts when i test them on large test cases and everything falls apart. i am going to learn about the topic in depth but just wanted to have fun with it first.
[17:26:30] *** Quits: gggp (~textual@125.33.83.189) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:27:11] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:28:27] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:28:41] *** Quits: dcand (~dcand@user/dcand) (Ping timeout: 248 seconds)
[17:28:41] *** Quits: PyT001 (~PyT001@2402:e280:3d22:227:2957:762a:111d:eb9e) (Quit: Client closed)
[17:29:15] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: If dreams are like movies, then memories are films about ghosts.)
[17:29:18] *** Joins: dcand (~dcand@user/dcand)
[17:29:30] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[17:30:00] * autistic is away: I have to work
[17:30:06] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[17:30:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[17:31:49] *** Joins: zeden (~zeden@user/zeden)
[17:32:26] *** Joins: fikran (~fikran@user/fikran)
[17:34:04] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[17:34:14] *** Joins: fabs (~fabs@2607:fb60:2501:2805:dea6:32ff:fed8:2af3)
[17:34:55] <dcand> duoi: i was looking sr.ht 's view-source. it's template has indentation but nearly most of them are removed from rendered html
[17:35:29] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[17:35:39] *** Joins: fofoni (~fofoni@user/fofoni)
[17:35:46] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[17:35:49] <dcand> i couldn't find anything that removes such indentation in *.sr.ht repos
[17:35:50] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[17:36:25] *** Quits: k162 (k162@user/k162) (Ping timeout: 252 seconds)
[17:37:17] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:bdb0:1299:ed93:e6f9)
[17:37:58] *** Joins: fofoni (~fofoni@user/fofoni)
[17:37:58] *** Joins: k162 (k162@user/k162)
[17:38:56] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:bc7a:3600:d252:1243)
[17:39:17] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[17:40:26] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[17:40:45] *** Joins: daoudr (~daoudr@178.197.213.56)
[17:41:40] *** Quits: humberto1 (~humbertow@2806:107e:f:5e47:913b:6132:84e:9ffb) (Ping timeout: 240 seconds)
[17:42:31] *** Quits: CoolerX (~CoolerX@user/coolerx) (Remote host closed the connection)
[17:43:02] *** Joins: CoolerX (~CoolerX@user/coolerx)
[17:46:59] *** Joins: jmft2 (~JMFT@82.3.54.26)
[17:47:31] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[17:48:22] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[17:48:23] *** Helle_ is now known as Helle
[17:49:49] <jmft2> Hi all, what's best practice for memoizing functions with large outputs? I'm worried about using @lru_cache since it stores all its results in memory. Ideally I'd store results in files in a cache directory instead, but need some way of making sure the cache directory doesn't get too big.
[17:50:16] <bjs> jmft2: a database?  it depends what kind of objects the results are
[17:50:22] *** Quits: sunyibo (~dorsch@2a04:52c0:101:443::) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[17:50:36] <jmft2> Binary files (bytes objects)
[17:50:36] *** Joins: sunyibo (~dorsch@5.2.75.229)
[17:50:57] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[17:51:02] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[17:51:10] <maharshipatel>  i created this : https://bpa.st/IS2A program which will check two person's calendar in order to find free time slots in which they can book meeting for given time (busy hours  and  working time boundaries are given as input in form of  List and meeting duration as int) any feedback is appreciated . i would like to know how i can improve this
[17:51:11] <maharshipatel> program. thank you.
[17:51:18] <kosh> jmft2, depending on the type of data you could store x most used objects in memory and pull the rest from storage as needed
[17:51:40] <kosh> jmft2, @lru_cache is just a decorator and you can make your own to implement it however you need
[17:51:50] <lericson> is there a numpy way to switch the contents of two equal size arrays?
[17:52:06] <lericson> basically def switch(a, b): t = a.copy(); a[:] = b; b[:] = t
[17:52:21] <jmft2> lericson: what's wrong with a, b = b, a ?
[17:52:21] <kosh> that is pretty much what I would do
[17:52:38] <lericson> jmft2: it doesn't do what i asked
[17:52:42] <kosh> jmft2, I don't think that will work with a numpy array but would have to test it to make sure
[17:53:13] <lericson> and a[:], b[:] = b, a would not work either
[17:53:25] <bjs> lericson: you need to make a copy of one
[17:53:38] <lericson> i know that
[17:53:43] <bjs> lericson: like `a[:], b[:] = b, a.copy()`
[17:53:47] <kosh> even at the c level I can't think of a good way to do it without a copy
[17:53:53] *** Parts: dcand (~dcand@user/dcand) ()
[17:54:02] <lericson> kosh: if you want to go there, you can use xor
[17:54:12] <lericson> bjs: right but is there an idiomatic way to do this
[17:54:42] <bjs> lericson: I don't think swapping the contents of two same-shaped array is an idiomatic operation so probably not
[17:54:49] <kosh> with c you could just make a buffer for a block and reuse that buffer as you iterate but doing that in python with numpy will be much slower
[17:54:49] <bjs> but I am not a numpy crazy man
[17:55:08] <kosh> actually I have never seen the need for something like this so I doubt it is common
[17:55:23] *** Joins: gggp (~textual@60.10.23.160)
[17:55:25] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[17:55:40] <jmft2> kosh: Is there anything in the standard library for caching-in-files rather than caching-in-memory?
[17:56:11] <kosh> not that I know of, I think you would need something custom for that
[17:56:17] <kosh> since it is not a common case
[17:56:23] <bjs> jmft2: no,  but it shouldn't be too hard to make a version of lru_cache to do what you want.  It's a bit specialised because writing Python objects to files is not a general operation you can do on Python objects
[17:58:28] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[17:59:05] *** Quits: daoudr (~daoudr@178.197.213.56) (Ping timeout: 248 seconds)
[17:59:14] <jmft2> maharshipatel: Check out https://pypi.org/project/pyinterval/, might be useful
[17:59:21] *** Joins: legola (~legola@46.235.100.27)
[17:59:27] *** Quits: logithack (~logithack@p200300cfbf366f00d74a46fbd53e1789.dip0.t-ipconnect.de) (Quit: Leaving)
[18:02:46] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[18:04:00] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[18:04:10] *** Quits: gtz (~gtz@185.12.215.241) (Ping timeout: 240 seconds)
[18:05:24] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:06:31] <odinsbane> I have a custom compiled python because I need 3.7. I can't use matplotlib with it because I need python-tk or qt5. What would be an easy way to get python 3.7 on linux that works maplotlib gui backend.
[18:07:07] <lericson> conda?
[18:07:28] *** Joins: tx8r_ (~tx8r@gateway/tor-sasl/tx8r)
[18:07:44] <grym> odinsbane: you probably need tk-dev or the like: https://github.com/pyenv/pyenv/wiki#suggested-build-environment
[18:07:55] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:08:18] <bad_blue_bull> damn, i'm having a problem.... i wanna redirect telnet output to my script to convert text (cp866->utf8). telnet|cat is fine, according to the docs it's "Always unbuffered". but when i redirect ouput to my script it's terrible buffered
[18:08:37] <bad_blue_bull> I try sys.stdin.buffer.read1()
[18:09:17] <bad_blue_bull> or sys.stdin.buffer.read(1)
[18:09:24] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[18:09:35] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[18:09:43] *** Joins: GenericUser584 (~GenericUs@n058153047236.netvigator.com)
[18:09:50] <maharshipatel> thank you jmft2.  i am looking into it right now. as this isn't a real project and i am trying to learn how to solve problems and improve my solutions i am trying to avoid  Python packages whenever possible but this is certainly helpful.
[18:09:58] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 252 seconds)
[18:10:03] <kosh> odinsbane, just use anaconda/miniconda
[18:10:04] *** Quits: Java-- (~georgios@user/georgios) (Quit: Konversation terminated!)
[18:11:05] *** Quits: GenericUser584 (~GenericUs@n058153047236.netvigator.com) (Client Quit)
[18:11:07] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 240 seconds)
[18:13:36] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[18:14:10] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:3dc5:2e88:2e7a:2ac) (Ping timeout: 240 seconds)
[18:14:54] *** Joins: tg (~tg@rockylinux/infra/tg)
[18:15:58] *** Joins: Roey (~Roey@user/Roey)
[18:16:10] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[18:16:57] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[18:17:44] <df_data> hi all im trying to make a list like 07A 07B etc list = (*[f'07{x}' for x in range(ord('a'),ord('n')+1)],*[f'08{x}' for x in (ord('a'),ord('n')+1)])
[18:18:00] <df_data> but it showing number 0799 0798 etc
[18:18:20] <df_data> what am i doing wrong?
[18:18:24] <mgedmin> you forgot to chr(x) to reverse the ord()
[18:18:25] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[18:18:32] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[18:18:49] <mgedmin> ord('a') == 97
[18:19:44] <mgedmin> either f'07{chr(x)}' or f'07{x:c}' ought to work
[18:20:03] <df_data> ahh thnak you so much
[18:20:37] *** Joins: daoudr (~daoudr@178.197.213.56)
[18:20:44] *** Quits: Archenfield (~textual@2405:6580:8e60:4600:41be:562f:11e:9e65) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:21:11] <odinsbane> Hmm, I probably will end up using a conda env.
[18:23:39] <df_data> that works awesome thank you heaps @mgadmin
[18:27:13] <hexology> i didn't know about `:c`
[18:27:20] *** Joins: odoood (~odoood@2601:c8:c003:a550::7)
[18:30:18] *** Quits: ppang (~ppang@user/ppang) (Quit: Leaving)
[18:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[18:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:31:21] *** Quits: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa) (Remote host closed the connection)
[18:31:38] *** Joins: Barones (~Barones@2804:7f3:8987:a56:1904:b84d:d454:b1fa)
[18:32:15] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:33:01] *** Quits: avu (~jan@user/avu) (Quit: o/)
[18:33:10] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[18:33:48] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:34:37] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-9c92-d971-62b4-5b07.res6.spectrum.com)
[18:35:41] *** Joins: avu (~jan@user/avu)
[18:36:34] *** Joins: mike18 (~geri@217-149-162-237.nat.highway.telekom.at)
[18:36:39] <df_data> okay, i thought it worked but it doesnt, for the 08 list it stops at 08A
[18:36:39] <df_data> 08[
[18:36:50] *** Quits: Zajt (~Zajt@195-67-143-106.customer.telia.com) (Quit: Client closed)
[18:36:53] <df_data> new code: list = (*[f'07{chr(x)}' for x in range(ord('A'),ord('Z')+1)],*[f'08{chr(x)}' for x in (ord('A'),ord('Z')+1)])
[18:36:56] *** Quits: daoudr (~daoudr@178.197.213.56) (Quit: Leaving)
[18:37:09] <mike18> hi can you recommend a zip lib for python3 to create a single zip archive out of multiple files and attach that file to an email?
[18:37:10] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:bc7a:3600:d252:1243) (Ping timeout: 240 seconds)
[18:37:33] <grym> mike18: https://docs.python.org/3/library/zipfile.html
[18:37:39] <mike18> zipfile?
[18:37:42] <mike18> ok i saw that btw
[18:37:44] <mike18> https://www.neilgrogan.com/py-bin-zip/
[18:38:06] <lericson> zipfile + email, mike18
[18:38:19] <df_data> haha i forgot range never mind
[18:38:25] <mike18> lericson: yeah?
[18:38:30] <lericson> df_data: you're deranged
[18:38:40] <lericson> ha
[18:38:45] <df_data> haha
[18:39:03] <TML> df_data: ord('Z')+1 is '['
[18:39:03] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[18:41:11] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:c9dc:bc90:bb09:b67b)
[18:41:18] *** Joins: daoudr (~daoudr@178.197.213.56)
[18:42:39] <odinsbane> Thanks grym, that worked installing the tk deps.
[18:42:45] *** Joins: bluesmonk (uid318026@id-318026.brockwell.irccloud.com)
[18:43:12] <TML> df_data: You might be looking for something like: [''.join(x) for x in itertools.product(['07', '08'], [chr(_) for _ in range(ord('A'), ord('Z')+1)])]
[18:43:25] *** Quits: mcope (~matt@user/mcope) (Quit: Konversation terminated!)
[18:45:15] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Ping timeout: 244 seconds)
[18:45:27] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi)
[18:45:40] *** Quits: humbertowoody (~humbertow@2806:107e:f:5e47:c9dc:bc90:bb09:b67b) (Ping timeout: 240 seconds)
[18:46:13] *** Quits: masber (~masber@vpn-25.cscs.ch) (Ping timeout: 246 seconds)
[18:46:26] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:47:09] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[18:47:22] *** Quits: ihristov (~ihristov@217.145.94.71) (Ping timeout: 252 seconds)
[18:49:36] *** Quits: autistic (~linguist@170.84.56.192) (Read error: Connection reset by peer)
[18:50:39] *** Joins: fdan (~fdan@192.146.154.3)
[18:51:01] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[18:51:08] *** Joins: autistic (~linguist@170.84.56.192)
[18:51:13] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[18:51:23] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[18:51:48] <audiophile_> hello, what's wrong with these two if-clauses that are supposedly equivalent? The first line is my attempt to rewrite the second as a list comprehension http://vpaste.net/QrEFT?bg=dark&nu
[18:52:09] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:52:10] *** Quits: mumixam (~m@user/mumixam) (Ping timeout: 240 seconds)
[18:53:31] *** tx8r_ is now known as tx8r
[18:53:34] <lericson> audiophile_: https://bpa.st/XOMA
[18:54:13] <lericson> i would translate the not any to a negated disjunction
[18:54:28] <lericson> so `if not (+ in exp or - in exp or …)`
[18:54:39] *** Joins: mumixam (~m@user/mumixam)
[18:54:41] <lericson> oh sorry you're doing the reverse
[18:54:58] <audiophile_> hmm TIL, but I only wanna check if any of the arithhmetic operators exist in that string. So in your paste, the first should also be true
[18:55:00] <audiophile_> yeah
[18:55:12] <lericson> then use issubset
[18:55:35] <lericson> set('+-*').issubset(exp)
[18:56:23] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[18:56:36] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[18:57:05] *** Joins: akk (~akk@174-28-98-206.albq.qwest.net)
[18:58:19] *** Quits: rud0lf (rud0lf@user/rud0lf) (Read error: Connection reset by peer)
[18:58:21] <audiophile_> hmm it's still not what im looking for
[18:58:28] <audiophile_> fails for cases like exp="2-1"
[18:58:38] <audiophile_> because I dont need to have all the symbols
[18:58:40] *** Joins: rud0lf (rud0lf@user/rud0lf)
[18:58:41] <audiophile_> just any of them
[18:58:51] <lericson> ah right silly me
[18:59:22] <lericson> not set('+-*').isdisjoint(exp)
[18:59:25] <audiophile_> i was trying to use any() in that list comprehension but couldnt figure out whats wrong
[18:59:35] *** Joins: humbertowoody (~humbertow@2806:107e:f:5e47:c9dc:bc90:bb09:b67b)
[18:59:38] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[19:00:01] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 252 seconds)
[19:00:06] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[19:00:26] <lxer> question: I know I can make a immutable class using @dataclass(frozen=True) , but how could this be achieved without the @dataclass decorator  ?
[19:00:55] <lericson> the answer is "not easily"
[19:01:06] *** Quits: Ninpo (~Ninpo@charlton.qap.la) (Quit: WeeChat 2.5)
[19:01:29] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[19:01:57] <audiophile_> thanks lericson i learned about these set operations today
[19:01:59] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[19:03:02] <nedbat> lxer: you could read the dataclass code to see what it does
[19:03:10] *** Quits: pgib (~textual@173.38.117.86) (Ping timeout: 240 seconds)
[19:03:33] *** Parts: plaisthos (~arne@openvpn/developer/plaisthos) ()
[19:03:33] <lxer> I feared it would be something like that ...
[19:03:43] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[19:03:53] <nedbat> lxer: the short answer is probably that it defines __setattr__ to raise an exception
[19:04:22] <audiophile_> so how do i figure out an equivalent version in list comprehensioon
[19:04:26] <TML> and probabl __delattr__ too
[19:04:34] <TML> s/probabl/probably/
[19:04:41] <lericson> audiophile_: i think what you wrote should be fine
[19:05:00] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:05:02] <audiophile_> yeah im trying to grok list comprehensions better :)
[19:05:10] *** Quits: iflema (~ian@user/iflema) (Remote host closed the connection)
[19:05:21] *** Joins: Ninpo (~Ninpo@leviathan.qap.la)
[19:05:47] *** Joins: fonsy (~fonsy@84.247.210.222)
[19:06:33] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[19:06:36] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:06:38] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:06:55] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[19:06:55] <lxer> audiophile_: write your listcomprention on multiple lines when they get too complicated.it always has these elements:  name\forloop\condition
[19:08:05] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Client Quit)
[19:09:23] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[19:09:31] *** Joins: sharperguy__ (~sharpergu@2001:16b8:5ced:fd00:d505:9f3b:de4a:bc16)
[19:09:32] <lxer> like this https://dpaste.org/OR6V
[19:10:14] <bjs> lxer: if you have a @property without a setter you get what looks like a "readonly" attribute
[19:10:18] *** Quits: maharshipatel (~maharship@2409:4041:e80:664c:8888:5833:fb9d:e794) (Quit: Client closed)
[19:10:27] *** Quits: Ninpo (~Ninpo@leviathan.qap.la) (Quit: WeeChat 2.8)
[19:10:28] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[19:10:33] *** Quits: ByteHackr (~sanroy@43.252.250.83) (Quit: Leaving)
[19:10:52] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[19:11:01] <gitesh> I want to talk about this ---> https://bpa.st/XFMA
[19:11:28] <nedbat> gitesh: is that a python topic?
[19:11:39] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[19:11:41] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[19:11:43] *** Joins: cthulchu (~Cthulchu@176.113.163.227)
[19:11:58] <lxer> tldr;
[19:12:03] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[19:12:17] *** Joins: Ninpo (~Ninpo@leviathan.qap.la)
[19:12:53] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[19:13:16] <supakeen> "So, that's the basics of Internet routing."
[19:13:26] *** sco1_ is now known as sco1
[19:14:07] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[19:14:23] *** Joins: gmcastil (~gmcastil@50-206-38-118-static.hfc.comcastbusiness.net)
[19:14:48] *** Joins: cheater (~Username@user/cheater)
[19:15:11] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[19:16:10] *** Quits: jazzy (~jaziz@2600:380:8773:c113:1093:1c01:217f:efb2) (Ping timeout: 240 seconds)
[19:16:14] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[19:16:25] *** Quits: bobbinn (~tobbi@73-149-17-89.fiber.hringdu.is) (Quit: Leaving)
[19:18:03] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[19:19:07] *** Quits: autistic (~linguist@170.84.56.192) (Read error: Connection reset by peer)
[19:19:37] *** Quits: cthulchu (~Cthulchu@176.113.163.227) (Ping timeout: 248 seconds)
[19:20:38] *** Joins: autistic (~linguist@170.84.56.192)
[19:21:14] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[19:21:25] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[19:22:15] *** Joins: zmt01 (~zmt00@user/zmt00)
[19:22:30] *** Quits: Shadur (~Rens@2001:981:9a5e:1:30cf:83de:31d7:dfbe) (Quit: Leaving)
[19:24:01] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[19:24:44] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[19:25:03] *** Joins: gggp (~textual@60.10.194.43)
[19:25:07] *** Quits: mike18 (~geri@217-149-162-237.nat.highway.telekom.at) (Remote host closed the connection)
[19:26:41] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[19:27:22] *** Quits: fonsy (~fonsy@84.247.210.222) (Remote host closed the connection)
[19:27:22] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[19:27:27] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:e006:9406:76b2:6dbb) (Ping timeout: 240 seconds)
[19:27:47] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:28:03] *** Joins: srhm (~srhm@user/srhm)
[19:28:54] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[19:29:07] *** Joins: cdown_ (~cdown@89.32.122.5)
[19:29:43] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[19:29:45] *** Quits: death916 (~death916@user/death916) (Ping timeout: 248 seconds)
[19:30:21] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[19:30:29] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[19:31:27] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:31:27] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 240 seconds)
[19:31:29] *** cdown_ is now known as cdown
[19:31:37] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[19:31:48] *** Joins: death916 (~death916@user/death916)
[19:32:01] *** Joins: srhm (~srhm@user/srhm)
[19:33:07] *** Quits: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl) (Ping timeout: 240 seconds)
[19:33:17] *** Quits: computeiro (~Wender@189.15.168.19) (Quit: Leaving)
[19:34:57] *** Quits: gggp (~textual@60.10.194.43) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:36:22] *** Joins: white_shadow (~brey@117.222.226.126)
[19:36:24] *** Joins: nomic (~nomic@185.192.69.143)
[19:36:53] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[19:36:56] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[19:37:12] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56739f-227.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:37:22] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Read error: Connection reset by peer)
[19:37:26] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[19:37:33] <xavierdarkness> Is it possible to have a function call in an except clause of a try/except? Like except KeyError: do_something()?
[19:37:41] *** xavierdarkness is now known as Xavierdarkness
[19:37:46] <lericson> yes why not, Xavierdarkness
[19:37:49] <lericson> it's just flow control
[19:37:54] <lericson> not any different from if/else
[19:38:17] *** Joins: gggp (~textual@123.113.176.64)
[19:39:30] <Xavierdarkness> lericson: awesome then I am doing something wrong with my function, I shall investigate. Thanks!
[19:40:18] *** Joins: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl)
[19:40:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:40:24] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Remote host closed the connection)
[19:40:45] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:cdb0:2ad1:533d:94f3) (Quit: Leaving)
[19:41:11] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:cdb0:2ad1:533d:94f3)
[19:42:23] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[19:42:24] *** Joins: fikran (~fikran@user/fikran)
[19:42:24] *** Joins: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com)
[19:42:27] *** Quits: gggp (~textual@123.113.176.64) (Ping timeout: 240 seconds)
[19:43:15] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[19:44:45] *** Joins: gtz (~gtz@46.251.99.222)
[19:44:49] <jmft2> Xavierdarkness: Variable scope problems perhaps?
[19:44:49] <harpia> Should the source code be placed inside the virtual environment directory? Where do you usually put it? in its root dir?
[19:45:04] <grym> harpia: it should be in a separate directory
[19:45:40] <grym> harpia: structured in a way that you can then `pip install [-e]` that directory into a venv.  with -e during develpment, without during use
[19:46:03] <grym> harpia: also, venvs are not to be checked into source control
[19:46:42] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[19:46:42] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:46:45] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[19:47:01] <harpia> I can't find the -e option in the manual, what is it?
[19:47:02] *** Joins: jinsun (~quassel@user/jinsun)
[19:47:07] <grym> "editable"
[19:47:57] *** Joins: johnm (~johnm@user/johnm)
[19:47:58] <grym> somevenv/bin/pip install -e [something] , where [something] is the path to your local project you're develping, installs it into the venv in a way that changes to the source code in [something] take effect immediately
[19:48:07] *** Quits: autistic (~linguist@170.84.56.192) (Ping timeout: 240 seconds)
[19:48:27] <grym> (-e is an option to the `pip` module's `install` subcommand)
[19:48:37] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Remote host closed the connection)
[19:48:39] <grym> https://pip.pypa.io/en/stable/cli/pip_install/
[19:48:48] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[19:48:58] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[19:49:03] <harpia> i was looking in `man pip install` and it isn't there
[19:49:26] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:49:41] <grym> i am not very surprised
[19:49:44] <harpia> found here: https://pip.pypa.io/en/stable/cli/pip_install/#editable-installs
[19:49:44] <bjs> harpia: `pip install --help`
[19:50:01] *** Quits: gtz (~gtz@46.251.99.222) (Ping timeout: 250 seconds)
[19:50:13] <grym> pip typically doesn't provide a man or info page
[19:50:26] <grym> ideally, pip's never a globally installed thing, so that makes sense :)
[19:50:38] <harpia> I see
[19:50:48] *** Joins: aead (~aead@user/aead)
[19:51:27] *** Quits: jinsun (~quassel@user/jinsun) (Client Quit)
[19:51:37] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:51:48] *** Joins: jinsun (~quassel@user/jinsun)
[19:51:51] <grym> harpia: and since i said "globally", for completeness: `sudo pip` is a really bad idea don't do it ever
[19:52:24] *** Joins: cthulchu (~Cthulchu@176.113.163.227)
[19:53:09] *** Quits: johnm (~johnm@user/johnm) (Quit: leaving)
[19:53:44] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Client Quit)
[19:55:14] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[19:55:16] *** Joins: dustiestgolf (~anotherus@2601:184:202:33f0:7869:8468:38dc:f209)
[19:57:34] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[19:58:14] *** Joins: PyT001 (~PyT001@2402:e280:3d22:227:bd50:35a0:7e9c:7c4b)
[19:59:45] <lxer> NamedTuple should have been named NamedClass.  I just had a argument with a cow-orker who told me I sould not use tuples, but use classes instead. :(
[19:59:50] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:00:31] <gegenschein> does anyone want to use named tuples now that we have dataclasses?
[20:00:48] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[20:00:56] <philipp64|work> grym: thanks for the recommendation about pydantic… I’m trying to figure out how to parse subclassed/variant records… i.e. where you start to read a record, and there’s a discriminator field to tell you what variety of subclass to use for parsing the rest of the record…
[20:01:34] *** Quits: dostoyev1ky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[20:01:46] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[20:01:47] <bjs> lxer: except namedtuples are tuples
[20:02:06] <dustiestgolf> hello, I have a couple of classes which each control different versions of a device. I would like to be able to make version selection an option upon initialization. Is it possible to use the init of a class to select and then initialize a subclass?
[20:02:10] <bjs> lxer: dataclasses/attrs is really what should have existed all along, namedtuples is a patch or a band-aid over what should have been the real thing
[20:03:03] *** Joins: regreg (~regreg@2a02:2f09:531a:c700:ffc9:4b75:815f:dcd4)
[20:03:11] <lxer> I recently learned that bjs is always right, so I'm going to accept that as an answer.
[20:03:23] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[20:03:26] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[20:03:35] <bjs> lxer: I'm not always right, I wish i were ;(
[20:05:31] <df_data> Anyone know how to extract the  SupplementalCredentials from AD?
[20:06:47] *** Quits: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838) (Ping timeout: 240 seconds)
[20:07:15] *** Quits: mikkel (~mike@208.110.120.167) (Quit: leaving)
[20:09:45] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Ping timeout: 248 seconds)
[20:11:08] *** Joins: georgios (~georgios@user/georgios)
[20:12:02] *** Stx_ is now known as Stx
[20:12:09] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[20:12:33] *** Joins: masoudd (~masoudd@user/masoudd)
[20:12:42] *** Joins: legola (~legola@46.235.100.27)
[20:14:27] *** Quits: white_shadow (~brey@117.222.226.126) (Ping timeout: 240 seconds)
[20:15:12] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[20:15:20] *** Quits: legola (~legola@46.235.100.27) (Remote host closed the connection)
[20:15:34] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[20:16:09] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 248 seconds)
[20:17:27] *** Joins: maharshipatel (~maharship@2409:4041:e80:664c:34f1:b3b8:ad6f:c605)
[20:18:27] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 240 seconds)
[20:18:40] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[20:21:33] *** Quits: nomic (~nomic@185.192.69.143) (Quit: Leaving)
[20:22:01] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[20:23:52] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[20:24:57] *** Quits: maharshipatel (~maharship@2409:4041:e80:664c:34f1:b3b8:ad6f:c605) (Quit: Client closed)
[20:26:50] *** Joins: daoudr_ (~daoudr@178.197.213.56)
[20:26:53] *** Joins: cdown_ (~cdown@163.114.131.1)
[20:26:53] *** Quits: daoudr (~daoudr@178.197.213.56) (Read error: No route to host)
[20:27:49] <gmcastil> bjs yeah i have some legacy code from about 5 years ago and I loathe the fact that I find namedTuples in there when i'm reading the code (or worse, point others to it that wish to use it)
[20:28:11] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[20:28:21] *** Joins: emika6 (~emika@83.136.182.157)
[20:28:49] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:28:57] *** Quits: emika (~emika@83.136.182.45) (Ping timeout: 248 seconds)
[20:28:57] *** emika6 is now known as emika
[20:29:00] <tris> dustiestgolf: hmm, a more obvious approach (to me at least) is to pull the construction logic out into a method like `def construct_controller(version, *a, **k:( return select_controller_class(version)(*a, **k)`, mix with staticmethod as needed. if you really want the behavior you described, it's __new__ that actually does the construction of the object, so look into overriding that
[20:29:07] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 240 seconds)
[20:29:18] *** cdown_ is now known as cdown
[20:29:56] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Lost terminal)
[20:30:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:30:39] *** Quits: daoudr_ (~daoudr@178.197.213.56) (Read error: No route to host)
[20:31:40] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[20:32:07] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:32:25] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[20:32:58] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 252 seconds)
[20:33:00] *** Joins: nomic (~nomic@185.192.69.143)
[20:33:28] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[20:33:29] *** Joins: mrtnt (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0)
[20:33:30] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[20:35:10] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[20:36:30] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:36:40] *** Quits: odoood (~odoood@2601:c8:c003:a550::7) (Ping timeout: 240 seconds)
[20:37:10] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:37:54] *** Quits: nomic (~nomic@185.192.69.143) (Quit: Leaving)
[20:39:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[20:39:34] *** Joins: gggp (~textual@221.219.64.36)
[20:40:29] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:5006:bad4:f50b:7614)
[20:40:53] *** Joins: georgios (~georgios@user/georgios)
[20:42:36] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:42:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:43:11] *** Quits: aead (~aead@user/aead) (Quit: aead)
[20:43:39] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[20:43:56] *** Joins: Pandadub (~Barones@2804:48dc:8500:0:258c:65bf:a587:ae6b)
[20:45:53] *** Joins: ska (~ska@user/ska)
[20:46:11] <dustiestgolf> tris: I am open to the idea that my current idea is overcomplicated. My primary concern is that there is one point of entry so that the user experience is straightforward. I may not fully understand the first suggestion you give though. How would I use the construct_controller method? Call this in the __init__ function, initialize the subclass, and then somehow return the subclass?
[20:46:27] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[20:46:28] <ska> I was able to use pyproject.toml/setup.cfg with a minimal setup.py, but how to I include the development rquirements like pytest?
[20:47:16] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[20:47:21] *** Quits: gggp (~textual@221.219.64.36) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:47:33] <tris> dustiestgolf: no, that method would be your user-facing interface
[20:47:33] <grym> philipp64|work: yep.  it's just another class.
[20:47:36] *** Quits: Deknos (~someone@user/menace) (Remote host closed the connection)
[20:47:50] <tris> if you are trying to adhere to an existing API that you can't change you will have to override __new__
[20:47:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[20:48:21] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:48:26] <dustiestgolf> tris: ah I see what you mean now!
[20:49:22] <dustiestgolf> Thank you for the tips I appreciate the help.
[20:50:07] <tris> glad they were useful :)
[20:50:21] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[20:50:46] *** Joins: aead (~aead@user/aead)
[20:50:46] *** Quits: aead (~aead@user/aead) (Client Quit)
[20:51:43] *** Joins: nomic (~nomic@185.192.69.143)
[20:52:13] *** Quits: cthulchu (~Cthulchu@176.113.163.227) (Ping timeout: 252 seconds)
[20:52:13] *** Joins: aead (~aead@user/aead)
[20:52:18] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 250 seconds)
[20:53:17] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 250 seconds)
[20:54:19] *** Joins: white_shadow (~brey@117.222.226.126)
[20:54:38] *** Joins: maharshipatel (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967)
[20:56:46] *** dcaro is now known as dcaro_away
[20:57:11] <ska> What is the modern way to write the test dependencies, and then how is the installer invoked on the cli?
[20:57:43] <ska> I mean the modern way to describe test dependencies in pyproject.toml or setup.cfg
[20:57:54] <grym> ska: usually as a tests extra, or as a dev section
[20:58:24] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[20:58:40] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:58:57] *** Joins: masoudd (~masoudd@user/masoudd)
[21:00:51] <maharshipatel> hello everyone, i have created this program i want to know if this is optimal  solution. problem and code is here : https://bpa.st/6FFA . which one is more scalable code 1 or 2. actually i am trying some of the coding challenges. i don't know how to calculate big O notation. if anyone can help me find better solution. thank you
[21:00:55] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[21:01:35] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[21:01:51] *** Quits: Strom (strom@fedora/strom) ()
[21:02:25] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[21:02:34] *** Joins: autistic (~linguist@170.84.56.192)
[21:03:06] *** Quits: maharshipatel (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967) (Quit: Client closed)
[21:03:14] <lxer> If that is a interview question, I would not want to work there
[21:03:38] *** Joins: maharshipatel (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967)
[21:03:53] <maharshipatel> i am really sorry i got disconnected
[21:03:54] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[21:03:59] *** Joins: Strom (strom@fedora/strom)
[21:04:37] *** Joins: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie)
[21:04:57] <maharshipatel> if anyone gave feedback i am sorry but i missed it . i have created this program i want to know if this is optimal  solution. problem and code is here : https://bpa.st/6FFA . which one is more scalable code 1 or 2. actually i am trying some of the coding challenges. i don't know how to calculate big O notation. if anyone can help me find better
[21:04:58] <maharshipatel> solution. thank you
[21:05:46] <lxer> there was no reply
[21:07:04] <maharshipatel> thank you lxer i will soon setup bouncer
[21:07:36] *** Quits: aead (~aead@user/aead) (Quit: aead)
[21:08:31] *** Joins: daoudr_ (~daoudr@178.197.213.56)
[21:08:40] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[21:09:12] *** Joins: darksun (~darksun@user/darksun)
[21:10:06] *** Joins: aead (~aead@user/aead)
[21:10:11] *** Joins: maharshipatel_ (uid404927@id-404927.tooting.irccloud.com)
[21:10:14] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[21:10:50] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Remote host closed the connection)
[21:11:49] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[21:13:07] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 252 seconds)
[21:13:54] *** Quits: lordrishav (~LordRisha@user/lordrishav) (Quit: WeeChat 2.8)
[21:13:59] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:ffcb:261e:d71f:6f71)
[21:14:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:15:28] *** Joins: jess (~jess@libera/staff/jess)
[21:15:28] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[21:15:34] *** Quits: fofoni (~fofoni@user/fofoni) (Quit: Leaving)
[21:16:41] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[21:16:58] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 252 seconds)
[21:19:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[21:19:22] *** Joins: ChrisEnglish (ChrisEngli@cpc159037-nrth3-2-0-cust141.8-4.cable.virginm.net)
[21:19:23] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[21:19:27] *** Joins: maharshipatel43 (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967)
[21:20:55] *** Quits: maharshipatel (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967) (Ping timeout: 246 seconds)
[21:20:55] *** maharshipatel_ is now known as maharshipatel
[21:21:58] <ChrisEnglish> Evening Chaps! Looking for someone to help. I've got a discord bot and I want my bot to ignore a "command" if someone has already used a command within the last 10 minutes. Hopefully this makes sense, I'm thinking I need to create a variable but I want it to beable to use multiple timers, so it stops More than one person at a time. E.g User A types !ping it then ignores user A for 10 minutes
[21:21:58] <ChrisEnglish> however User B is still able to but once he uses !ping it then adds him to a new timer? How could this be done? thanks <3
[21:22:17] <sco1> Is this your own framework or discord.py
[21:22:36] <ChrisEnglish> Its based on discord but I feel its more a python question
[21:22:46] <sco1> That wasn't my question
[21:22:57] <sco1> Are you writing your own Discord framework or are you using the discord.py framework
[21:23:02] <ChrisEnglish> discord.py
[21:23:46] <sco1> So, https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.cooldown?
[21:23:51] <ChrisEnglish> I've got all the commands etc sorted, and I dont want to enable slow mode on my channels, this is why i think its more of a python question. Sort of Variable variables?!
[21:24:11] <ChrisEnglish> Its using a reaction, I used !ping as an example to make it clearer tbh.
[21:24:48] <ChrisEnglish> So a user reacts to a message, the bot deletes the reaction and sends the user a message. I want it then to ignore any further reactions for 10 minutes
[21:25:15] <Pilate> just keep a dict of user -> last command timestamp and check it before processing
[21:25:37] <ChrisEnglish> sorry to be a noob, but a dict?
[21:26:00] <Pilate> {user1: time1, user2: time2, ...}
[21:26:29] <bjs> ChrisEnglish: see https://docs.python.org/3/tutorial/datastructures.html#dictionaries
[21:26:37] <ChrisEnglish> ahh okay. Thank you :)
[21:29:49] <jmft2> What's the best way to check if a function f gets called in a unit test? I'm guessing mocking f with a mock_f whose side-effect is f?
[21:30:11] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:32:15] *** Joins: zebrag (~chris@user/zebrag)
[21:32:15] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[21:32:45] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:33:55] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Read error: Connection reset by peer)
[21:34:12] *** Joins: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net)
[21:34:25] *** Quits: MrAlexBailey (~Alex@104-11-73-100.lightspeed.tukrga.sbcglobal.net) (Client Quit)
[21:34:54] *** Quits: thurs8 (~thurs@ip68-228-237-69.ph.ph.cox.net) (Read error: Connection reset by peer)
[21:35:52] *** Joins: chris_99 (uid26561@id-26561.tooting.irccloud.com)
[21:36:00] *** Joins: Tashtari (~tashtari@user/tashtari)
[21:37:22] *** Quits: Jefren2 (~Jefren@208.104.190.51) (Ping timeout: 250 seconds)
[21:38:23] *** Quits: maharshipatel43 (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967) (Quit: Client closed)
[21:38:48] *** Joins: maharshipatel25 (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967)
[21:39:33] *** Joins: Jefren2 (~Jefren@70.35.66.130)
[21:41:16] *** Joins: Akuli (~Akuli@213.216.210.73)
[21:41:24] *** Quits: maharshipatel (uid404927@id-404927.tooting.irccloud.com) (Killed (gold.libera.chat (Nickname regained by services)))
[21:41:24] *** maharshipatel25 is now known as maharshipatel
[21:42:28] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[21:42:41] *** Joins: spithash (~spithash@user/spithash)
[21:43:14] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[21:43:17] *** Quits: ChrisEnglish (ChrisEngli@cpc159037-nrth3-2-0-cust141.8-4.cable.virginm.net) (Remote host closed the connection)
[21:44:58] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 240 seconds)
[21:45:10] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[21:45:15] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[21:45:42] *** Joins: Trieste (T@user/pilgrim)
[21:46:14] *** Quits: maharshipatel (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967) (Quit: Client closed)
[21:46:30] *** Joins: maharshipatel (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967)
[21:47:13] *** Quits: aead (~aead@user/aead) (Ping timeout: 252 seconds)
[21:47:30] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[21:48:22] *** Joins: ChrisEnglish (~Chris@185.215.215.245)
[21:48:30] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[21:48:49] *** Quits: k162 (k162@user/k162) (Remote host closed the connection)
[21:49:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:49:07] *** Joins: k162 (k162@user/k162)
[21:49:25] *** Joins: aead (~aead@user/aead)
[21:49:35] *** lordrishav is now known as LordRishav
[21:50:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[21:50:33] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 248 seconds)
[21:52:00] *** Joins: fikran (~fikran@user/fikran)
[21:52:55] *** Quits: ChrisEnglish (~Chris@185.215.215.245) (Quit: ZNC - https://znc.in)
[21:53:45] *** Joins: ChrisEnglish (~Chris@185.215.215.245)
[21:56:27] *** Quits: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl) (Ping timeout: 240 seconds)
[21:56:38] *** Joins: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se)
[21:56:59] *** Quits: white_shadow (~brey@117.222.226.126) (Ping timeout: 250 seconds)
[21:58:21] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[21:58:39] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[21:59:00] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Ping timeout: 244 seconds)
[21:59:19] *** Joins: Betal (~Betal@user/betal)
[22:01:01] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[22:01:27] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:01:31] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 252 seconds)
[22:02:03] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[22:03:12] *** Quits: andyewen (~andyewen@91.110.2.61) (Quit: Leaving)
[22:03:31] *** Joins: white_shadow (~brey@117.222.226.126)
[22:05:37] *** Joins: arinov (~arinov@213.194.126.155)
[22:06:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:07:17] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[22:07:27] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 240 seconds)
[22:07:34] *** Quits: k162 (k162@user/k162) (Remote host closed the connection)
[22:07:51] *** Joins: k162 (k162@user/k162)
[22:08:37] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[22:09:04] *** Quits: notepad (~notepad@129.159.46.243) (Quit: The Lounge - https://thelounge.chat)
[22:10:05] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[22:10:17] *** Quits: nomic (~nomic@185.192.69.143) (Quit: Leaving)
[22:10:29] *** Joins: notepad (~notepad@129.159.46.243)
[22:10:56] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[22:11:17] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Ping timeout: 250 seconds)
[22:12:15] <aphysically> I guess now that this is no longer bash I can explore different solutions to problems
[22:13:17] <aphysically> in the case of this ffmpeg script the problem was: I need to establish a secure authenticated side channel with the server to set up the remote ffmpeg instance to accept a video connection as instructed
[22:13:47] <philipp64|work> grym: Can the BaseModel then invoke the derived classes?  What does that look like?
[22:13:48] <aphysically> secure because it negotiates the shared secret and authenticated so only I can initiate it; I had solved this problem in bash by having the remote server monitor the file system for a file I rsync to the server with the data
[22:14:32] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[22:14:34] <aphysically> I can still do this with Python, I guess, but it does seem like a bit of a hacky solution to the problem (like what if I wanted to let other people authenticate? I can't just give them ssh access to the server)
[22:14:55] *** Quits: maharshipatel (~maharship@2409:4041:e80:664c:c51d:390c:2b8e:7967) (Quit: Client closed)
[22:15:09] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:16:42] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[22:18:19] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[22:20:12] *** Joins: gtz (~gtz@46.251.99.222)
[22:23:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[22:24:03] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[22:24:25] <gloomy> Hi, say I have a list of arbitrary length, is there an elegant one-liner to product a list (or numpy array) of either the n first elements of the list, or the entire list 0-padded to length n ?
[22:25:13] <ledtc> example ?
[22:25:18] <gloomy> so if n = 3,  [1,2] ->  [0,1,2] and [1,2,3,4] ->[ 1,2,3]
[22:25:32] <bjs> gloomy: `x[:n] + [0]*(len(x) - n)`
[22:25:42] <bjs> i.e. first n + however many 0s needed to pad
[22:26:34] <bjs> gloomy: perhaps a 2-liner and slightly more readable way of putting it would be `y = [0]*len(x); y[:n] = x[:n]`,  or perhaps an even-even more readable way is to use some fixed-size type (like a numpy array) that started out padded in the first place
[22:26:44] *** Quits: white_shadow (~brey@117.222.226.126) (Quit: Leaving)
[22:27:26] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:bdb0:1299:ed93:e6f9) (Quit: Textual IRC Client: www.textualapp.com)
[22:27:47] <grym> philipp64|work: https://bpa.st/NCBA
[22:28:06] <grym> aphysically: ^ see also, for complex data structures -> classes
[22:28:08] <grym> with validation
[22:28:22] <aphysically> thanks I'll take a look
[22:28:24] *** Quits: rsx (~dummy@ppp-188-174-138-96.dynamic.mnet-online.de) (Quit: rsx)
[22:28:34] <gloomy> hah, forgot you could multiply lists :D thanks. And yes I started writing `y = np.zeros(n)` but then wasn't sure how to assign a variable sized number of elements... :-)
[22:28:52] <aphysically> I partially implemented it with TypedDict but the inability to specify types of extra options means it's not quite complete
[22:29:07] <bjs> gloomy: you can use slice notation like `some_array[i:j] = ...` to assign to a "slice"
[22:29:51] <gloomy> hmm so y[len(x):] = x ?
[22:29:58] <philipp64|work> grym: But that’s different, right?  In your case, Foo is just a member of Bar.  That’s different from Foo being a derived class of Bar…. or am I missing something?
[22:30:13] *** Joins: computeiro (~Wender@189.37.66.42)
[22:30:13] <gloomy> hrm, no, that only works if len(x) < n
[22:30:21] *** Quits: gtz (~gtz@46.251.99.222) (Ping timeout: 250 seconds)
[22:31:05] <gloomy> y[min(len(x),n):] = x[:n]? :D
[22:32:02] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[22:32:05] <aphysically> I haven't had a chance to check if pydantic does this yet
[22:32:16] <aphysically> I'm presuming it probably does
[22:33:03] <aphysically> e.g. x: int y: float, and then extra args are str: str
[22:33:31] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[22:34:01] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:34:07] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 240 seconds)
[22:34:08] <grym> philipp64|work: oh, yes. you'd have to know or hint what child class to call parse-obj with insuppose. i don't use multiple inheritance in python
[22:34:15] <grym> so i'm not really sure
[22:34:43] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[22:35:16] <grym> it's always felt ungainly
[22:35:27] *** Joins: goldfish (~goldfish@user/goldfish)
[22:36:23] *** Joins: roteiro (~roteiro@i5C75881D.versanet.de)
[22:36:52] *** Quits: Brion (~Brion@gateway/tor-sasl/brion) (Remote host closed the connection)
[22:37:13] <no_gravity> Can you pass a pointer to a pointer in Python, so that a function can change a number? Something like x=3;f(*x);print(x); // 4
[22:37:28] <nedbat> no_gravity: there are no user-visible pointers like that in Python
[22:37:41] *** Joins: Brion (~Brion@gateway/tor-sasl/brion)
[22:38:06] <nedbat> no_gravity: there isn't a way that `x = 3; f(x)` can change the value of x
[22:38:14] <no_gravity> nedbat: Interesting.
[22:38:58] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[22:40:47] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 240 seconds)
[22:42:23] *** Quits: jmft2 (~JMFT@82.3.54.26) (Killed (NickServ (GHOST command used by jmft2__!~jmft2@81.149.115.87.dyn.plus.net)))
[22:42:24] *** Quits: Voxel (~Voxel@ip178-67-155-188.onego.ru) (Quit: Client closed)
[22:42:46] *** Joins: jmft2 (~jmft2@81.149.115.87.dyn.plus.net)
[22:42:56] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[22:43:00] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[22:44:59] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Ping timeout: 244 seconds)
[22:45:31] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 250 seconds)
[22:45:40] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[22:46:21] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[22:46:29] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[22:46:31] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[22:48:40] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 240 seconds)
[22:48:43] <DPA> Well, any object should do.
[22:48:43] <DPA> def f(x): x[0]=5
[22:48:43] <DPA> y=3; y=[y]; f(y); y=y[0]
[22:49:01] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Quit: WeeChat 2.8)
[22:49:30] *** Quits: tx8r (~tx8r@gateway/tor-sasl/tx8r) (Quit: Leaving)
[22:49:43] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[22:49:46] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[22:50:09] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[22:50:50] *** Joins: dontyouloveshort (~julius@ip5f5bc213.dynamic.kabel-deutschland.de)
[22:51:06] <DPA> no_gravity: ^
[22:51:45] <nedbat> DPA: that is an example of passing a mutable object, and having the function mutate it.
[22:52:06] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[22:52:31] <philipp64|work> grym: okay, I’ll ask a question on the Questions section of the project GitHub…
[22:52:53] <nedbat> philipp64|work: we can answer python questions
[22:52:55] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[22:52:58] <DPA> no_gravity: Yes. It can be used functionally equivalent to a pointer.
[22:53:03] *** Quits: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl) (Read error: Connection reset by peer)
[22:53:16] <DPA> I mean nedbat:
[22:53:24] <DPA> sorry
[22:53:25] <philipp64|work> nedbat: meaning… this is out of scope?
[22:53:34] <nedbat> philipp64|work: i'm not sure what "this" is, tbh
[22:54:01] <philipp64|work> see above… we were talking about handling derived classes in pydantic.
[22:54:20] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Remote host closed the connection)
[22:54:31] *** Joins: audiophile_ (~audiophil@user/audiophile)
[22:54:45] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[22:54:51] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[22:55:18] <philipp64|work> nedbat: we’re sort of getting into the weeds and it’s not sure that pydantic has a really obvious way to do things intuitively.
[22:55:28] <rama> within a class init method; is it better to populate a variable, then assign it? or is it ok to do something like self.foo = set() then some operations to add values to self.foo? Does it matter?
[22:55:31] <philipp64|work> s/sure/clear/
[22:55:49] <no_gravity> DPA: Well, with a pointer you could do: nums=[1,2,3,4,...]; for n in nums: n+=1;
[22:56:04] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:56:14] <nedbat> rama: you should just use `self.foo = set()`
[22:56:40] <no_gravity> DPA: Since there are no pointers, I guess you have to do: nums=[1,2,3,4,...]; for i,n in enumerate(nums): nums[i] += 1
[22:56:56] <nedbat> no_gravity: or:  new_nums = [n+1 for n in nums]
[22:57:21] <no_gravity> nedbat: But I don't want new_nums. I love my old nums! Who would give up their beloved nums so quick?
[22:57:58] <nedbat> no_gravity: generally, it's better to make new data than to mutate old data.  You should have a very very good reason for updating a list like that.
[22:59:10] <no_gravity> nedbat: Imagine there are 100 million nums. And you only want to update those who are cuban prime numbers.
[22:59:16] *** Quits: dontyouloveshort (~julius@ip5f5bc213.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[22:59:30] <nedbat> no_gravity: ok, that might be a good reason
[23:00:27] <no_gravity> We really cannot kill 99 million good happy nums just because of those few cuban primes.
[23:00:33] *** Joins: besnn (~besnn@user/besnn)
[23:00:35] <foo> I've got a smaller project with a one time setup/not too much logging in... I was thinking of having a magic link set up like slack rather than a user/pass auth. Anyone know of any libraries that may assist with this and/or guides? Otherwise, I can hash an email, add some time logic so links expire after 1 hour, then just send out an email and match
[23:01:10] *** Joins: koperak (~koperak@user-5-173-139-43.play-internet.pl)
[23:01:18] <DPA> It should be possible to make a class which takes a list and an offset / index, and then uses __getitem__ / __setitem__, to allow modifying the subset. With that, there could be made something functionally equivalent to a pointer to an array item.
[23:01:48] <nedbat> DPA: that won't make this work:  for n in nums: n += 1
[23:01:53] *** Quits: koperak (~koperak@user-5-173-139-43.play-internet.pl) (Read error: Connection reset by peer)
[23:02:19] <no_gravity> foo: A magic link without any backend? That would mean to just hash the user id. And yeah, you can use time as a salt so it is only valid for a certain while.
[23:02:25] <nedbat> DPA: well, it could make that work, but it can't make this work:  for n in nums: n = 1
[23:02:40] *** Joins: koperak (~koperak@user-5-173-139-43.play-internet.pl)
[23:03:10] *** Joins: manin (~x@185.242.190.95)
[23:03:35] <foo> no_gravity: "without backend" as in, without user/pass / reset password / update password logic, etc. Since this project is more of a "login a few times, set and forget it"... it could work.
[23:04:41] <no_gravity> foo: If you have a backend storage you could simply assign a random login key to the user id.
[23:04:44] <ska> if you setup with pyproject.toml and setup.cfg, is there mechanism to uninstall the extra requirements using pip?
[23:05:30] <DPA> Well, yes. This wouldn't work in C with real pointers either, even there you'd have to write *n=1 and keep the iterator.
[23:05:31] <DPA> But you could still make a generator which returns "pointers" to n, and access the value using n[0], again, essentially the same as pointers.
[23:05:32] <foo> no_gravity: there is a sqlite database in the backend, I have a user id in there but it ain't random.
[23:05:43] <DPA> A mutable object property is a pointer.
[23:05:44] <foo> no_gravity: but I could use it in generating the hash, too, so then we have user id + email + time element
[23:05:56] <no_gravity> foo: What I mean is you can store the random id per user.
[23:05:56] <foo> no_gravity: thanks for helping me think through this.
[23:07:30] <foo> no_gravity: oh, I see.
[23:08:33] <no_gravity> foo: The downside of the token based approach is that it is not easy to invalidate a single users token.
[23:09:07] <no_gravity> foo: If you store a key per user you can just do "SET key=RAND() WHERE user_id=123" if you need to invalidate the old token.
[23:10:21] <no_gravity> foo: The pros and cons of tokens have been discussed a lot when JWT (json web tokens) were on vogue.
[23:11:08] <foo> no_gravity: grateful for the thoughts here. By "invalidate," I believe you mean – after we send the magic link, we want to expire it at a certain time - correct?
[23:11:44] *** Quits: roteiro (~roteiro@i5C75881D.versanet.de) (Quit: Client closed)
[23:13:10] <no_gravity> foo: Well kinda. I mean you sent a magic link to everyone. But now Joe calls you and says "OH MY GOD! My wife got the login link! Give me a new one! Lock her out!"
[23:14:01] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[23:14:09] *** Joins: junktext (~junktext@109.201.152.169)
[23:15:14] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[23:15:39] *** Joins: upsala (~zcb@185.213.155.160)
[23:15:57] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[23:17:18] <foo> no_gravity: ohhh, I see. So this is less about expiring and more about forcefully invalidating. Good dynamic to be aware of, thanks
[23:18:25] <no_gravity> foo: Yes. Expiration is not a problem with tokens. You can bake the expiration time into the token.
[23:18:57] <no_gravity> Well gotta go. Cu!
[23:18:58] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[23:18:59] <mh_le> so I'm taking a course on qouantum computing next term
[23:19:18] <mh_le> quantum*
[23:20:15] <foo> nedbat: thank you!
[23:20:18] <foo> whoops.
[23:20:23] <foo> no_gravity *
[23:21:46] <foo> On the topic of magic links to email to users, I assume I'd generate a magic link hash... eg. user id + email + year, month, day, hour = hash, then store that hash in the user table as their "current link". Then when someone clicks on it I can search the database for a matching magic link and login said user
[23:23:07] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:5006:bad4:f50b:7614) (Ping timeout: 240 seconds)
[23:23:21] *** Quits: bilb_ono (~alexmarsh@ip68-6-69-149.sb.sd.cox.net) (Ping timeout: 248 seconds)
[23:23:23] *** Joins: bilb_ono_ (~alexmarsh@ip68-6-69-149.sb.sd.cox.net)
[23:24:47] *** Quits: rany_ (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:24:59] *** Joins: rany (~rany@user/rany)
[23:26:54] *** Joins: audiophile (~audiophil@user/audiophile)
[23:27:12] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Quit: No Ping reply in 120 seconds.)
[23:27:32] *** Quits: falx (~falx@user/falx) (Quit: wel.... I'm out)
[23:27:52] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[23:28:35] *** Quits: thinkofher (~thinkofhe@user/thinkofher) (Quit: bye bye friends)
[23:28:35] *** Quits: LostInWeb (~quassel@narvi.bifroest.eu) (Remote host closed the connection)
[23:28:43] *** Joins: falx (~falx@user/falx)
[23:28:45] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[23:29:07] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[23:29:07] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:29:43] *** Quits: junktext (~junktext@109.201.152.169) (Ping timeout: 250 seconds)
[23:29:53] *** Joins: LostInWeb (~quassel@narvi.bifroest.eu)
[23:30:04] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[23:30:35] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 250 seconds)
[23:30:36] *** audiophile is now known as audiophile_
[23:31:02] *** Joins: Bronto22 (~mennoh@84.86.247.193)
[23:31:34] *** Joins: gareppa (~gareppa@user/gareppa)
[23:32:24] *** Joins: MikZyth (~MikZyth@188.65.242.202)
[23:32:33] *** Quits: dustiestgolf (~anotherus@2601:184:202:33f0:7869:8468:38dc:f209) (Quit: Leaving)
[23:32:57] *** Joins: dontyouloveshort (~julius@2a02:8108:8100:18c4:3d26:df8c:7070:d838)
[23:33:20] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[23:33:43] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[23:34:40] *** Quits: jug (~jug@user/jug) (Ping timeout: 240 seconds)
[23:35:12] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[23:35:14] *** Quits: koperak (~koperak@user-5-173-139-43.play-internet.pl) (Ping timeout: 250 seconds)
[23:35:22] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[23:35:58] *** Joins: 048AAB712 (~linguist@170.84.56.192)
[23:36:21] *** Joins: Auron (Auron956@user/auron)
[23:37:20] *** Quits: autistic (~linguist@170.84.56.192) (Killed (NickServ (GHOST command used by 048AAB712)))
[23:37:31] *** 048AAB712 is now known as autistic
[23:37:40] *** Joins: mike18 (~geri@216.200.232.252)
[23:37:45] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:38:16] <mike18> hi how can i output all python logging data to a text file? make run > out.txt seems not to foward all logging data to that file...
[23:39:05] *** Quits: MikZyth (~MikZyth@188.65.242.202) (Quit: WeeChat 3.1)
[23:41:13] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[23:41:57] <Akuli> maybe it goes to stderr? make run &> out.txt
[23:42:15] <Akuli> but then you will hide all error messages too, if you want them in file and in terminal:   make run 2>&1 | tee out.txt
[23:42:29] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[23:44:48] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[23:45:30] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[23:46:19] <aphysically> good function https://bpa.st/SLEA
[23:46:32] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[23:47:05] *** Joins: alguien (~alguien@user/alguien)
[23:47:27] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 240 seconds)
[23:48:27] *** Quits: regreg (~regreg@2a02:2f09:531a:c700:ffc9:4b75:815f:dcd4) (Ping timeout: 240 seconds)
[23:48:50] <alguien> Hi, could someone link me to the actual source of the str.casefold? I can't seem to find it myself through github, I run in a circle (unless it's this: https://github.com/python/cpython/blob/a2ce538e16d5e3a6168704366bdd7a8c5af29881/Lib/pathlib.py#L1869
[23:48:56] <alguien> * https://github.com/python/cpython/blob/a2ce538e16d5e3a6168704366bdd7a8c5af29881/Lib/pathlib.py#L186
[23:49:20] *** Joins: jug (~jug@user/jug)
[23:50:10] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[23:50:10] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (Ping timeout: 240 seconds)
[23:50:25] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[23:50:37] <ChrisWarrick> alguien: https://github.com/python/cpython/blob/main/Objects/unicodeobject.c#L10899-L10914
[23:51:07] *** Quits: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint) (Ping timeout: 244 seconds)
[23:51:25] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:51:45] *** Joins: HolyTaint (~HolyTaint@gateway/tor-sasl/holytaint)
[23:51:49] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:53:24] *** Joins: nomic (~nomic@185.192.69.143)
[23:54:32] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[23:54:48] *** Joins: brownan_ (~brownan@2605:a601:a607:5d00:b595:175d:621a:a279)
[23:56:25] *** Quits: PyT001 (~PyT001@2402:e280:3d22:227:bd50:35a0:7e9c:7c4b) (Quit: Client closed)
[23:56:29] *** Joins: brownan (~brownan@2001:470:69fc:105::e01b)
[23:56:49] *** Joins: tx8r (~tx8r@gateway/tor-sasl/tx8r)
[23:57:02] *** Quits: brownan_ (~brownan@2605:a601:a607:5d00:b595:175d:621a:a279) (Client Quit)
[23:58:09] *** Joins: doc|work (~doc@user/doc)
[23:58:27] *** Joins: srhm (~srhm@user/srhm)
[23:58:31] <alguien> ChrisWarrick, and that calls https://github.com/python/cpython/blob/main/Objects/unicodeobject.c#L9922 which calls https://github.com/python/cpython/blob/main/Objects/unicodectype.c#L259 which relies on _PyUnicode_ExtendedCase, what is that?
[23:59:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:59:53] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
