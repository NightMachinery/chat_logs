[00:00:41] <FromDiscord> <Phil> Hmmm
[00:01:02] <FromDiscord> <Phil> I'm trying to write what amounts to basically a generic delete API endpoint
[00:02:01] <FromDiscord> <Phil> So I have a proc that generates Prologue controller procs, but the error I'm getting is a bit beyond my understanding
[00:02:48] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T1i
[00:03:43] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T1j
[00:04:39] <FromDiscord> <Phil> Like, I'm pretty sure it prints out the complete AST of the function I generate above
[00:04:44] <FromDiscord> <Alea> In reply to @Generic "make sure to setup": What would a project file do to help this issue? (If you were talking to me)
[00:04:51] <FromDiscord> <huantian> Try noting the return type of the return proc to be Future[void]?
[00:05:08] <FromDiscord> <huantian> Actually hm
[00:05:24] <FromDiscord> <Phil> One is an "owned" Future[void], the other a Future[system.void]
[00:05:43] <FromDiscord> <Phil> I'm super out of my depth here, I haven't even touched nim's futures, though I assume they act like JS Promises as I've been repeatedly assured
[00:05:56] <FromDiscord> <Phil> I can't tell you what's the difference between a future and an owned future
[00:06:05] <FromDiscord> <Phil> Nor the difference between void and system.void
[00:06:36] <FromDiscord> <Alea> Ah gotta love nim's error messages :peepowtf:
[00:07:16] <FromDiscord> <huantian> void should be the same as system.void
[00:07:23] <FromDiscord> <huantian> I still have no idea what owner means
[00:07:30] <FromDiscord> <Phil> In reply to @Alea "Ah gotta love nim's": To be fair, I'm not necessarily doing anything simple there, it's a factory function to spit out functions that make use of generics
[00:08:02] <FromDiscord> <Alea> In reply to @Isofruit "To be fair, I'm": Eh, nim loves to spit our ridiculous errors even on simple issues
[00:08:06] <FromDiscord> <Phil> So if that scenario hasn't been covered I wouldn't be too surprised
[00:08:33] <FromDiscord> <Phil> In reply to @Alea "Eh, nim loves to": Hmmm fair
[00:09:41] <FromDiscord> <Phil> ~~I just want to generate controller procs because by god writing them is starting to get really fucking old~~
[00:10:17] <FromDiscord> <Generic> In reply to @Alea "What would a project": then there's only a single nimsuggest instance which gets all the changes in all files
[00:10:51] <FromDiscord> <Generic> when you edit them
[00:16:16] <FromDiscord> <Alea> What do you need in the project file for that to work?
[00:19:58] <FromDiscord> <Phil> I feel tempted to do an alternate approach which is a massive template that writes an entire module of procs, hmmm
[00:25:41] <FromDiscord> <Generic> In reply to @Alea "What do you need": the project file is just your "main" Nim file you pass to the compiler when compiling the project
[00:26:49] <FromDiscord> <Generic> you need to edit the setting nim.project and add the file there
[00:30:10] <FromDiscord> <Phil> macros should be useable from within templates, right?
[00:31:20] <FromDiscord> <Generic> yes
[00:34:12] *** Quits: enyc_ (~enyc@user/enyc) (Ping timeout: 240 seconds)
[00:35:51] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T1q
[00:38:04] <FromDiscord> <Phil> It explodes in the line of  the "result" spot in `respDefault` .↵The macro appears to try and fetch `ctx`  from the caller-context but can't appear to find it. Does this mean the macro looks for ctx in `genericArticleControllers.nim`, which it can't find because there's nothing there and the actual code is in `diaryEntryControllers.nim` ?
[00:38:33] <FromDiscord> <Phil> (edit) "?" => "?↵If that's the case how do I tell the respDefault macro to look for `ctx`  in the place that calls the tempalte?"
[00:38:37] <FromDiscord> <Phil> (edit) "tempalte?" => "template?"
[00:38:44] *** Joins: enyc (~enyc@user/enyc)
[00:49:31] *** Quits: zgasma (~zgasma@2601:600:c87f:8b1a::d) (Remote host closed the connection)
[01:00:25] <FromDiscord> <Elegantbeef> `ctx {.inject.}: Context`
[01:00:52] <FromDiscord> <Elegantbeef> @Phil\: ^
[01:02:14] <FromDiscord> <Phil> Does that go into the template?
[01:02:20] <FromDiscord> <Elegantbeef> Yes
[01:02:32] <FromDiscord> <Elegantbeef> Nim templates are hygenic in that they do not inject any symbols
[01:02:48] <FromDiscord> <Elegantbeef> Well they do not inject accessible symbols
[01:03:48] <FromDiscord> <Phil> Wait, right, I actually want the template to basically copy paste itself into a module and make all the procs defined inside it available
[01:04:22] <FromDiscord> <Elegantbeef> What i said will resolve that
[01:05:14] <FromDiscord> <Phil> Which lib was the inject pragma from again? macros?
[01:05:40] <FromDiscord> <Phil> Trying to figure out what I need to import
[01:06:17] <FromDiscord> <Elegantbeef> It's not from any
[01:06:25] <FromDiscord> <Elegantbeef> It's a compiler pragma
[01:07:59] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T1v
[01:08:12] <FromDiscord> <Elegantbeef> How are you using it?
[01:08:16] <FromDiscord> <Phil> same when I put that inject line inside the deleteEntryController proc
[01:08:23] <FromDiscord> <Elegantbeef> Yea you're using it wron
[01:08:46] <FromDiscord> <Phil> `genericArticleControllerProcs(DiaryEntry)` This is what I use in the actual controller modules
[01:08:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T1w
[01:08:57] <FromDiscord> <Elegantbeef> It goes on the symbol you want to inject
[01:11:29] <FromDiscord> <Phil> Alright! That compiles the template!↵When I use it in `diaryEntryControllers.nim`  and then import that module into another module `diaryEntryRoutes.nim`  I don't appear to have access to a `deleteEntryController` proc though
[01:11:58] <FromDiscord> <Phil> Wait, no I'm dumb
[01:12:01] <FromDiscord> <Phil> I was importing from the wrong space
[01:12:03] <FromDiscord> <Elegantbeef> ok do yourself a favour and annotated the template `{.dirty.}`
[01:12:31] <FromDiscord> <Phil> Holy shit that actually all worked, just tested O.O
[01:12:34] <FromDiscord> <Elegantbeef> Dirty makes the template non hygienic as the name implies and would make all symbols available in scope
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:12:38] <FromDiscord> <Elegantbeef> Nice
[01:13:05] <FromDiscord> <Phil> I'll likely throw 4-5 more procs into the template and have that be the "stock" set of controllers
[01:13:25] <FromDiscord> <Elegantbeef> Now the question i have to ask is why a template?
[01:13:41] <FromDiscord> <Phil> I originally wanted to write a proc that returns prologue controller procs
[01:14:05] <FromDiscord> <Phil> The error message I got back was something about how the proc it created was one with a Future instead of an owned future
[01:14:06] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T1y
[01:14:13] <FromDiscord> <Elegantbeef> Why do you need a template for the above
[01:15:09] <FromDiscord> <Phil> Because the signature must be `proc someName(ctx: Context) {.async.} =`, prologue needs a proc with exactly that signature to pass it an incoming HTTP request
[01:15:16] <FromDiscord> <Phil> this is the proc that handles said HTTP request
[01:15:42] <FromDiscord> <Elegantbeef> This sounds wildly unsafe given that you're going to quickly create ambiguity
[01:16:34] <FromDiscord> <Phil> Otherwise I'm writing the same controller 15 times with the only difference being that I write "deleteEntry(entryId, DiaryEntry)", "deleteEntry(entryId, Location)", "deleteEntry(entryId, Character)" etc.
[01:17:05] <FromDiscord> <Elegantbeef> But the procs are named the same, so this is going to create ambiguity
[01:17:32] <FromDiscord> <Phil> different modules though, so I'd go `diaryEntryControllers.deleteEntry()`
[01:17:38] <FromDiscord> <Phil> (edit) "`diaryEntryControllers.deleteEntry()`" => "`diaryEntryControllers.deleteEntryController()`"
[01:17:59] <FromDiscord> <Elegantbeef> God i hate that, but ok
[01:18:09] <FromDiscord> <Phil> And controller modules are explicitly something you never ever import 2 of at the same time
[01:19:00] <FromDiscord> <Phil> I mean, I'll gladly take your advice for a generic proc that returns such a controller proc 😄
[01:19:44] <FromDiscord> <Elegantbeef> You can have a proc that returns the given proc of course then you can just do `deleteEntryController(myType)(myContext)`
[01:19:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:19:57] <FromDiscord> <Elegantbeef> Then you dont ever have ambiguity and dispatch based off type instead of module
[01:20:36] *** Joins: sagax (~sagax_nb@user/sagax)
[01:20:43] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T1A
[01:21:23] <FromDiscord> <Elegantbeef> async is a macro so you dont anotate it like that
[01:21:37] <FromDiscord> <Elegantbeef> i'd be a `iterator (): owned(FutureBase)` as the return type
[01:21:47] <FromDiscord> <Elegantbeef> You didnt annotate the return type with async
[01:21:51] <FromDiscord> <Elegantbeef> No clue if it works on proc ty
[01:24:27] <FromDiscord> <Elegantbeef> Eh yea nope i dont use async so dont know if you can make a proc generator for it
[01:25:04] <FromDiscord> <Phil> What the flying saucer
[01:25:10] <FromDiscord> <Phil> I think I found a solution (?)
[01:25:24] <FromDiscord> <Phil> Apparently prologue comes with its own type for these procs, it calls them `HandlerAsync`
[01:25:41] <FromDiscord> <Phil> So I can annotate with that and that already saves me the hassle of having to think if there goes a pragma somewhere
[01:26:19] <FromDiscord> <Phil> And... if I annotate with that type it just works....
[01:26:20] <FromDiscord> <Phil> wtf
[01:26:32] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T1B
[01:27:03] <FromDiscord> <Phil> I have written the code
[01:27:09] <FromDiscord> <Phil> I do not understand why this in particular works
[01:27:35] <FromDiscord> <Phil> And I know it works, I made an HTTP request and this deleted it exactly as you'd expect
[01:28:22] <FromDiscord> <Phil> Given that this works, I'll likely stick with these factory procs (if you've got a better name I'll take it)
[01:29:47] <FromDiscord> <Elegantbeef> Naming shit like it's java
[01:30:12] <FromDiscord> <Phil> Yeh, the name makes no sense here, but "decorator" which I'd classify this normally as, fits even less
[01:30:28] <FromDiscord> <Elegantbeef> You know you can always make that proc an async then just await inside it?
[01:30:34] <FromDiscord> <Elegantbeef> Then you dont return anything
[01:30:58] <FromDiscord> <Elegantbeef> Unless you need to pass it somewhere i guess
[01:31:02] <FromDiscord> <Phil> You mean the inner controller proc?
[01:31:05] <FromDiscord> <Phil> I need to pass it somewhere
[01:31:10] <FromDiscord> <Phil> In the end it looks like this
[01:31:12] <FromDiscord> <Elegantbeef> Ah ok
[01:31:26] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T1E
[01:31:32] <FromDiscord> <Phil> app being the prologue server before you start it up
[01:31:47] <FromDiscord> <Elegantbeef> Jesus fucking christ that's java, you've written java
[01:32:49] <FromDiscord> <Elegantbeef> Dont need to use the module namespace anymore eh?
[01:33:13] <FromDiscord> <Phil> Strictly speaking no
[01:33:33] <FromDiscord> <Phil> I'll likely keep doing it though for clarity so I know where the hell I got these from
[01:34:22] <FromDiscord> <Phil> And yeah, some of it is heavily java inspired. I'm more or less starting to use modules similar to how java uses objects, just without fields
[01:34:28] <FromDiscord> <Phil> (edit) "And yeah, some of it is heavily java inspired. I'm more or less starting to use modules similar to how java uses objects, just without fields ... " 03added "within the modules"
[01:34:42] <FromDiscord> <Elegantbeef> Shame
[01:35:02] <FromDiscord> <Phil> In exchange I no longer have to write the really dumb stuff
[01:35:20] <FromDiscord> <Phil> Only have to define a proc that spits out handlers for a given model type
[01:35:28] <FromDiscord> <Phil> (edit) "handlers" => "controller-procs"
[01:36:01] <FromDiscord> <Phil> I'll take a simpler approach if you've got one 😛
[01:36:29] <FromDiscord> <Elegantbeef> I'd say you should not do that mostly for modularity
[01:36:39] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 256 seconds)
[01:36:49] <FromDiscord> <Elegantbeef> You cannot easily replace a module with another one with similar functionality, because the module names differ
[01:37:24] <FromDiscord> <Phil> You mean the name-spacing? Or the entire making factory procs for controllers?
[01:37:58] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T1F
[01:38:22] <FromDiscord> <Elegantbeef> This way you can override the behaviour with just replacing the module with one that exposes a type `GenericArticle` and `deleteEntryControllerFactory`
[01:38:40] <FromDiscord> <Elegantbeef> Hard coding the module name really makes it hard to easily compose modules for whatever reason
[01:38:49] <FromDiscord> <Elegantbeef> Atleast that's my view
[01:39:47] <FromDiscord> <Elegantbeef> Then again I only use module namespace for removing ambiguity, so I could just be misguided 😛
[01:39:50] <FromDiscord> <Phil> Ah, mostly regarding the name-spacing, I was curious for a second there whether that was directed in general against this hyper-generic approach which makes an entire controller-service-repository stack into on generic piece of code
[01:40:02] <FromDiscord> <Phil> (edit) "name-spacing, I" => "name-spacing then. ↵I"
[01:40:49] <FromDiscord> <Elegantbeef> It probably doesnt matter for this code i guess
[01:41:33] <FromDiscord> <Phil> Nah, it's a fair point, I might just remove it, I'm not 100% convinced of the usefullness anyway since strictly speaking a module where you declare routes only ever imports 1 controller module
[01:41:48] <FromDiscord> <Phil> or 2, if one of the modules is the one with the controller factory procs
[01:59:48] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[01:59:58] *** Joins: ltriant (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[02:38:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:39:33] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[02:39:52] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:50:59] *** Joins: xet7 (~xet7@user/xet7)
[02:56:17] <pch> https://github.com/kinkinkijkin/nimsgp already have a beta release
[02:56:41] <pch> likely has a bug related to the nim type system being slightly aggravating at times
[02:57:09] <FromDiscord> <Elegantbeef> Where do y ou think the bug is?
[02:57:39] <pch> namely, all of the attachment vector buffer sizes might have to be the same size as the tripoint vector buffer size
[02:57:58] <pch> would be quick to fix but enh
[02:58:17] <FromDiscord> <Elegantbeef> That's the issue you ran into earlier right?
[02:58:32] <pch> yeah but now im not using generic attachments anymore
[02:58:48] <pch> but i dont remember what all i removed that was related to trying to make generic attachments work
[02:59:21] <FromDiscord> <Elegantbeef> Ah well if you ever want to make them work I can work through it since the code is visible now
[03:00:08] <pch> would be in the drawReadyElements functions in funcs2d and topdraw
[03:00:32] <pch> the library setup is very quickly getting a lot worse
[03:06:20] <pch> maybe not the best idea to be writing api reference while im up past twice my height in stress
[03:06:22] <FromDiscord> <Elegantbeef> So for `drawReadElements` you wanted to do what exactly?
[03:06:30] <pch> completely broked the professional styule
[03:06:32] <pch> uh
[03:06:59] <pch> it draws to buffer outbound using shader shad, after preparing attachments and data for it, and performing culling checks
[03:07:52] <pch> the current version, multielementbuffer is supposed to be able to be empty but is supposed to be a runtime operation culling check, not a crash
[03:08:03] <pch> it might be a crash rn
[03:08:24] <pch> and v2buffer and v3buffer types are supposed to be of arbitrary, unchecked length
[03:08:24] <FromDiscord> <Bubblie> In reply to @pch "https://github.com/kinkinkijkin/nimsgp already have": 👀
[03:08:29] <FromDiscord> <Bubblie> This software rendering?
[03:08:41] <pch> yes
[03:08:58] <FromDiscord> <Elegantbeef> so make them `openArray[float32]`
[03:09:21] <pch> openarrays are slightly annoying to deal with in performance-critical situations but i might
[03:09:31] <FromDiscord> <Elegantbeef> How are they annoying?
[03:09:52] <FromDiscord> <Bubblie> Thats so awesome, see ive been trying to find actual proper reference on software rendering because people usually just use existing graphics apis rather than rendering from the software itself
[03:09:56] <pch> incur a very slight overhead that can end up meaning something if you're referencing a lot of them with a lot of elements
[03:09:57] <FromDiscord> <Elegantbeef> It's a pointer and length, you cant get much more efficient
[03:10:51] <FromDiscord> <Elegantbeef> Well you can also make a concept
[03:10:55] <pch> much prefer static arrays with unenforced lengths in this case
[03:11:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T1X
[03:11:18] <FromDiscord> <Elegantbeef> Well then use the conceept
[03:11:42] <pch> huh, never seen this type before
[03:11:48] <pch> and never seen it in the docs
[03:11:53] <pch> new feature?
[03:12:00] <FromDiscord> <Elegantbeef> They're 'experimental'
[03:12:06] <FromDiscord> <Jakraes> Quick question, how can I pass arrays as arguments in a proc?
[03:12:10] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual_experimental.html#concepts
[03:12:17] <pch> do they exist in nim 1.4.2? that's the oldest version i have to care about rn
[03:12:23] <FromDiscord> <Elegantbeef> Yes
[03:12:40] <FromDiscord> <Elegantbeef> Ideally you use an openarray jakraes, what do you need though?
[03:13:09] <FromDiscord> <jfmonty2> Are concepts still going to be completely overhauled at some point, or is that no longer the plan?
[03:13:11] <FromDiscord> <Elegantbeef> `myArr: array[index, type]` is an alternative
[03:13:22] <FromDiscord> <Bubblie> I wonder if I should make a gui library in vulkan 👀
[03:13:22] <FromDiscord> <Elegantbeef> They're still going to be changed eventually and already have been somewhat
[03:13:25] <FromDiscord> <Jakraes> I want to pass a 2 dimensional array in a proc, but without a specified size
[03:13:27] <FromDiscord> <Bubblie> There is a lack of those
[03:13:38] <FromDiscord> <Jakraes> The type is char
[03:13:58] <FromDiscord> <Jakraes> I tried using open arrays but it gave me an error for some reason
[03:14:14] <FromDiscord> <Bubblie> Also, I forked nimgl because I think bindings for vulkan 1.3 dont exist yet which isn’t an issue, but I might add them myself at some point if the nimgl team doesnt add them themselves
[03:14:14] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/09B
[03:14:20] <FromDiscord> <Elegantbeef> Yea nested openarrays dont make sense
[03:15:10] <FromDiscord> <Jakraes> Damn, well rip :/
[03:15:13] <FromDiscord> <Bubblie> I think I might be interrupting the current convo mb 😅
[03:15:34] <FromDiscord> <jfmonty2> I feel like multiple conversations going on is just a chatroom fact of life
[03:15:47] <FromDiscord> <Bubblie> Yeah
[03:16:10] <FromDiscord> <Bubblie> Wait so you can pass an array through a proc without a specified size?
[03:16:15] <FromDiscord> <Bubblie> (edit) "can" => "cant"
[03:16:26] <FromDiscord> <Jakraes> Actually, maybe I can try to mess around with using different files so I can import certain values
[03:17:23] <FromDiscord> <Bubblie> Well, you can get the size of an array from that existing array in nim right?
[03:17:51] <FromDiscord> <jfmonty2> Can't you declare a static generic and use that for the size of the array?
[03:18:07] <FromDiscord> <jfmonty2> like `proc[T: static int](array[int, T])` or whatever
[03:18:09] <FromDiscord> <Jakraes> I'm just gonna define the size as a variable and export it to another file
[03:18:32] *** Quits: acidsys_ (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[03:18:37] <FromDiscord> <Bubblie> In reply to @Jakraes "I'm just gonna define": I was thinking that
[03:19:05] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[03:19:19] <FromDiscord> <Jakraes> Yup, it works, nice
[03:20:08] <FromDiscord> <jfmonty2> like `proc[T: static int](a: array[T, int])` or whatever
[03:20:30] <FromDiscord> <Bubblie> That probably could work (I think)
[03:20:42] <FromDiscord> <Bubblie> is there any networking libraries for nim
[03:20:43] <FromDiscord> <Bubblie> btw
[03:21:18] <FromDiscord> <Jakraes> Yup
[03:21:18] <FromDiscord> <Jakraes> https://github.com/treeform/netty
[03:21:21] <FromDiscord> <Bubblie> 👀
[03:21:23] <FromDiscord> <Bubblie> lets go
[03:21:25] <FromDiscord> <Bubblie> thank you
[03:21:29] <FromDiscord> <Jakraes> Np homie
[03:22:34] <FromDiscord> <Bubblie> Since a networking library exists, this may make it easy to make a multiplayer space ship game example in vulkan after I finish this triangle one
[03:23:02] <FromDiscord> <Bubblie> vulkan triangle hell
[03:30:16] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:38] <FromDiscord> <Elegantbeef> You can
[03:30:43] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:31:10] <FromDiscord> <Elegantbeef> for their case `proc doThing[T, Y: static int](arr: array[T,array[Y, char]])` would work \:d
[03:47:00] <FromDiscord> <wsantos> I'd like to have a variable name with `` is that possible ? I'm receiving `"invalid token: trailing underscore"`, the idea it to have a "suffix" so I can do some magic depending on the suffix
[03:47:48] <FromDiscord> <Elegantbeef> Nim doesnt allow double underscores
[03:47:52] <FromDiscord> <Elegantbeef> What are you trying to do
[03:50:03] <FromDiscord> <wsantos> Well I still on my django Fight, and my filter function receive the field and the value that needs to be filtered, so I'd like to do `.filter(createdgte=DATETIME)` as example
[03:50:30] <FromDiscord> <Elegantbeef> the suffix would do what?
[03:51:19] <FromDiscord> <wsantos> in this case will create a sql `created >= now()` without it `.filter(create=DATETIME)`  would generate sql`created = now()`
[03:52:09] <FromDiscord> <congusbongus> Sounds like you should use a string to represent the operation
[03:52:28] <FromDiscord> <Elegantbeef> why not just support `filter(create'gte = DateTime)` or `filter(gte(created) = DateTime)`?
[03:52:48] <FromDiscord> <wsantos> Yeah it seems like :/ I'm trying to keep as close as possible from django
[03:52:56] <FromDiscord> <wsantos> what is `'` there ?
[03:53:07] <FromDiscord> <Elegantbeef> It's' used for literals
[03:53:34] <FromDiscord> <Elegantbeef> Ah nvm doesnt work heree
[03:53:52] <FromDiscord> <congusbongus> Well there are filters like createdtimegte which can do a time of day comparison
[03:53:52] <FromDiscord> <Elegantbeef> Actually i guess it could
[03:54:13] <FromDiscord> <congusbongus> (edit) "createdtimegte" => "‘createdtimegte’"
[03:54:45] <FromDiscord> <congusbongus> (edit) "‘createdtimegte’" => "“createdtimegte”"
[03:55:40] <FromDiscord> <Elegantbeef> I dont get why you dont just pass it as an arg, it's much cleaner imo
[03:55:47] <FromDiscord> <wsantos> In reply to @Elegantbeef "Actually i guess it": Would you mind to show one example in the playground ?
[03:55:59] <FromDiscord> <Elegantbeef> Nah it didnt i looked into it
[03:56:01] <FromDiscord> <Elegantbeef> I was wrong
[03:56:21] <FromDiscord> <Elegantbeef> `filter(created = DateTime, gte)` is the cleanest imo
[03:56:29] <FromDiscord> <Elegantbeef> Better than using literals to determine comparison
[03:56:33] <FromDiscord> <Elegantbeef> Or identifiers
[03:57:03] <FromDiscord> <wsantos> Another example `.filter(pub_dateyear=current_year, question_textstartswith='What')`
[03:57:40] <FromDiscord> <wsantos> that would generate sql`pub_date = XXXX and question like "What%"`
[03:57:56] <FromDiscord> <wsantos> In reply to @Elegantbeef "`filter(created = DateTime, gte)`": Filter can receive n arguments
[03:58:35] <FromDiscord> <Elegantbeef> Final offer `filter((pubDate: currentYear, year), (questionText: "what", startWith))`
[03:59:38] <FromDiscord> <wsantos> I think this is the only option and I really liked it, thank you
[04:00:23] <FromDiscord> <Elegantbeef> You could also do `year(pubData, currentYear)` but eh you do you 😛
[04:02:06] <FromDiscord> <wsantos> Nice, I think this is simpler, thank you.
[04:02:44] <FromDiscord> <wsantos> In reply to @Elegantbeef "Final offer `filter((pubDate: currentYear,": Question is `(pubDate: currentYear, year)` a tuple ?
[04:02:51] <FromDiscord> <Elegantbeef> Yes
[04:03:18] <FromDiscord> <wsantos> Hmm can you have an "unnamed" parameter ? how do you access it ? index ?
[04:03:26] <FromDiscord> <Elegantbeef> `[1]`
[04:04:03] <FromDiscord> <Elegantbeef> In nim named tuples are just sugar for `[]`
[04:05:32] <FromDiscord> <Elegantbeef> Where's the ansiwave author, he has an odd affinity for tuples
[04:06:08] <FromDiscord> <Elegantbeef> I half believe he counts tuples to fall asleep
[04:06:39] <FromDiscord> <Elegantbeef> "int tuple, int float tuple, int float string tuple ..."
[04:07:32] <FromDiscord> <wsantos> lol
[04:07:40] <FromDiscord> <sheldon> How to initialise seq[seq[string]]
[04:08:29] <FromDiscord> <Elegantbeef> `import std/sequtils; var mySeq = newSeqWith(10, newSeq[string](100))`
[04:09:16] <FromDiscord> <sheldon> Have to specify a length?
[04:09:25] <FromDiscord> <Elegantbeef> You dont have to
[04:09:37] <FromDiscord> <Elegantbeef> `var mySeq: seq[seq[string]]` is a empty sequence
[04:10:41] <FromDiscord> <sheldon> Is it possible to index mySeq[0][0] without specifying the length?
[04:11:06] <FromDiscord> <Elegantbeef> If it doesnt have a length it'd have an error
[04:13:25] <FromDiscord> <sheldon> What if the length of nested container is dynamically changed and unknown?
[04:14:22] <FromDiscord> <Elegantbeef> If you have nested seqs that's not possible
[04:14:53] <FromDiscord> <Elegantbeef> `mySeq.len` and `mySeq[index].len` work
[04:15:28] <FromDiscord> <Elegantbeef> Sequences arent fixed length, so you can still grow and remove them
[04:15:38] <FromDiscord> <Elegantbeef> Those procedures dont make them stick at a given length
[04:22:16] <FromDiscord> <Alea> where does nimble grab the author bit from during nimble init?
[04:22:26] <FromDiscord> <Elegantbeef> The nimble file
[04:22:32] <FromDiscord> <Alea> it grabbed another username and I've got no clue how it did that
[04:22:46] <FromDiscord> <Elegantbeef> Oh nimble init
[04:22:48] <FromDiscord> <Elegantbeef> I cant read
[04:22:59] <FromDiscord> <Elegantbeef> It should be the active account
[04:23:07] <FromDiscord> <Alea> active what account
[04:23:17] <FromDiscord> <Elegantbeef> \`\`$USER\`
[04:23:28] <FromDiscord> <Elegantbeef> on \nix, no clue on windows
[04:23:32] <FromDiscord> <Alea> huh
[04:23:53] <FromDiscord> <Alea> cause it grabbed by school username, which I don't remember ever adding on this pc
[04:25:33] <FromDiscord> <Alea> that username isn't in my env variables either :EmotiHmmm:
[04:25:46] <FromDiscord> <Elegantbeef> I could be wrong
[04:26:09] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[04:26:41] <arkanoid> what is C++ "void (*)(long, char *, int, long)" in nim? (using importcpp)
[04:27:17] <FromDiscord> <Elegantbeef> I do not know
[04:28:28] <FromDiscord> <Elegantbeef> Where is it used?
[04:28:54] <arkanoid> it is callback type
[04:29:31] <FromDiscord> <Elegantbeef> Oh it's a pointer to a procedure that takes `clong, cstring, cint, clong)` then
[04:29:47] <FromDiscord> <Elegantbeef> That returns void
[04:30:03] <arkanoid> ok, but how can I create such a type?
[04:30:40] <arkanoid> I've already created a nim proc that takes (clong, cstring, cint, clong): void, but how can I pass it as a pointer?
[04:31:13] <arkanoid> if I try to do myProc.unsafeAddr nim compiler complains Error: expression has no address
[04:31:44] <FromDiscord> <Elegantbeef> `type MyCallback = proc(a: clong, b: cstring, c: cint, d: clong){.cdecl.}`
[04:33:50] <FromDiscord> <Alea> bruh I'm so confused↵I looked into the nimble code, and it just get's my git name which isn't my school username
[04:34:10] <FromDiscord> <Alea> how did this happen dinesh :hmmGe:
[04:37:17] <arkanoid> Elegantbeef, I was missing {.cdecl.} thanks!
[04:37:28] <arkanoid> I'm always puzzled when I should use it or not
[04:37:53] <FromDiscord> <Elegantbeef> When interopping with C you generally use it
[04:37:58] <FromDiscord> <Elegantbeef> Or C++ for this   case
[04:38:11] <FromDiscord> <Elegantbeef> Otherwise you just let Nim decide or specify what the proceedure is annotated with
[04:44:02] <FromDiscord> <kevin> Do you guys know how to use function pointers in Nim?
[04:44:13] <FromDiscord> <Elegantbeef> Yes
[04:44:22] <FromDiscord> <kevin> I have a value I get back from `GetProcAddress()` but haven't figured out how to use that pointer as a function in Nim
[04:44:39] <FromDiscord> <Elegantbeef> Those are for closures
[04:45:05] <FromDiscord> <kevin> There are no closures in my code
[04:45:12] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/Djl
[04:45:13] <FromDiscord> <Elegantbeef> there we go we used function pointers
[04:47:37] <FromDiscord> <Elegantbeef> Ah sorry i thought you were using `rawProc`
[04:47:47] <FromDiscord> <Elegantbeef> What are you doing presently?
[04:48:12] <FromDiscord> <Elegantbeef> Proc pointers are first class in Nim so unless you're interoping you can just manually grab them
[04:48:31] <FromDiscord> <kevin> I am trying to run a function that i grabbed from `GetProcAddress` with Winim
[04:48:34] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=
[04:48:36] <FromDiscord> <kevin> something like that?
[04:48:58] <FromDiscord> <kevin> (edit) 
[04:49:17] <FromDiscord> <Elegantbeef> `cast[proc(rclsid: REFCLSID, riid: REFIID, ppv: LPVOID)](GetProcAddress(hDLL, "DllGetClassObject"))`
[04:49:27] <FromDiscord> <Elegantbeef> You have a pointer and need to convert it to the proc
[04:49:49] <FromDiscord> <kevin> that makes sense
[04:50:06] <FromDiscord> <Elegantbeef> You may need `{.cdecl.}` or `{.stdcall.}`
[04:50:17] <FromDiscord> <Elegantbeef> Depending on what the procedure is annotated with
[04:51:15] <FromDiscord> <kevin> `Error: expression cannot be cast to proc (rclsid: REFCLSID, riid: REFIID, ppv: LPVOID){.closure.}` 😦
[04:51:21] <FromDiscord> <kevin> hmm 🤔
[04:51:31] <FromDiscord> <Elegantbeef> you need the calling convention
[04:51:41] <FromDiscord> <Elegantbeef> Nim defaults typedefs to `closure`
[04:51:58] <FromDiscord> <Elegantbeef> Knowing windows it's going to need `{.stdcall.}`
[04:52:43] <FromDiscord> <Elegantbeef> For instance
[04:52:46] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T2b
[04:54:32] <FromDiscord> <kevin> `expression 'lpGetClassObject has no type or is ambiguous`
[04:54:56] <FromDiscord> <Elegantbeef> You are casting \`GetProcAddress(hDLL, "DllGetClassObject") right?
[04:55:04] <FromDiscord> <kevin> yep
[04:55:31] <FromDiscord> <kevin> This is terrible, but:
[04:55:39] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3T2c
[04:56:04] <FromDiscord> <kevin> (edit) "https://play.nim-lang.org/#ix=3T2c" => "https://play.nim-lang.org/#ix=3T2d"
[04:56:29] <FromDiscord> <Goat> My `aqcalc` program uses a sqlite database to store values. The only problem with this is that if you want to open the db to see and edit the contents yourself you'll have to use an external viewer. Should I 1) add options to export/import this DB to/from a plain text file or 2) work with a plain text DB model with CSV or JSON?
[04:57:55] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3T2e
[04:58:25] <FromDiscord> <Elegantbeef> Dont annotate the type
[04:58:25] <FromDiscord> <Elegantbeef> Or if you do put it in parenthesis
[04:59:34] <FromDiscord> <Elegantbeef> `var lpGetClassObject = cast[proc(rclsid: REFCLSID, riid: REFIID, ppv: LPVOID){.stdcall.}](GetProcAddress(hDLL, "DllGetClassObject"))` should work
[05:00:06] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3T2f
[05:00:52] <FromDiscord> <Elegantbeef> Can i see the entire block?
[05:01:47] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3T2g
[05:02:35] <FromDiscord> <kevin> clearly i dont actually want to be writing Windows COM code in Nim at 8:30 on a sunday night 😭
[05:02:48] <FromDiscord> <kevin> save me lmfao
[05:02:57] <FromDiscord> <Elegantbeef> I'd love to but i need the entire file
[05:03:33] <FromDiscord> <kevin>  https://media.discordapp.net/attachments/371759389889003532/955277957927170068/comproxy.nim
[05:03:45] <FromDiscord> <kevin> That's the whole thing
[05:04:24] <FromDiscord> <Elegantbeef> You hid the error
[05:04:30] <FromDiscord> <Elegantbeef> The issue is you dont have a return type
[05:04:36] <FromDiscord> <Elegantbeef> Add the return type
[05:06:07] <arkanoid> when I do `type ImportedType {.header: cppHeader, importCpp: "structName".} = object` do I have to define the struct fields manually to use them in nim, or header is expected to do that for me?
[05:06:28] <FromDiscord> <Elegantbeef> You have to define the fields
[05:06:40] <arkanoid> all of them or just what I need?
[05:07:16] <FromDiscord> <Elegantbeef> You might be able to only add what you need, but no clue if that's unsafe
[05:08:20] <FromDiscord> <kevin> So I guess I just needed to add `HRESULT` to the cast
[05:08:21] <arkanoid> I wonder what's the header pragma is used for, if I have to type fields manually
[05:08:31] <FromDiscord> <Elegantbeef> Yes you need to add it to the cast
[05:08:40] <FromDiscord> <Elegantbeef> The header pragma is to add to the include section
[05:11:49] <arkanoid> Elegantbeef, so if I add -I to passc can I avoid typing {.header: myvar.} on every binding line?
[05:12:06] <FromDiscord> <Elegantbeef> No clue i dont do C compilation
[05:13:09] <FromDiscord> <Elegantbeef> You can just do `{.push: header: myVar.} #code here {.pop.}`
[05:14:40] <FromDiscord> <Elegantbeef> obviously the code would be everything you want to import
[05:15:26] <arkanoid> ok
[05:15:40] <arkanoid> just curious, you don't do C compilation?
[05:16:14] <FromDiscord> <Elegantbeef> What do you mean by that question?
[05:19:40] <FromDiscord> <Elegantbeef> I dont talk to the C compiler pretty much ever
[05:25:08] <arkanoid> you use nim without touching C?
[05:25:28] <FromDiscord> <Elegantbeef> Pretty much
[05:25:31] <arkanoid> I mean, you're a nim expert, I hardly believe you manage to avoid C stuff
[05:25:38] <FromDiscord> <Elegantbeef> I also dont write software
[05:25:39] <FromDiscord> <Elegantbeef> 😛
[05:25:43] <arkanoid> :|
[05:26:08] <FromDiscord> <Elegantbeef> I mean if you look at my github the most C related stuff i have is my fork of nimassimp to make me happier
[05:26:09] <arkanoid> next: I'm a professional pilot, I never touch the weel. Also, I'm a cook
[05:26:42] <FromDiscord> <Elegantbeef> I mean i'm not a professional developer, so most of what i make i make for fun
[05:27:53] <FromDiscord> <Bubblie> Im a professional programmer, I don’t touch grass for a living
[05:28:46] <arkanoid> and this is what makes me feel a shitty programmer
[05:32:01] <FromDiscord> <Elegantbeef> Why do you feel like a shitty programmer?
[05:34:33] <arkanoid> nevermind, I was just considering the fact that I'm a full time developer (not nim, nor C/C++) but I feel lacking behind a lot your "hobbyst" level knowledge of nim
[05:35:18] <arkanoid> what's the nim way to do what C++ does with `static char userName[64] = "admin"` ?
[05:37:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/9iI
[05:37:44] <FromDiscord> <Elegantbeef> I'm actually surprised `res[0..4] = "admin"` worked, must take in an `openArray[T]`
[05:40:44] <arkanoid> and what if "admin" is already into a nim string?
[05:40:58] <arkanoid> res[0..4] = myNimString doesn't work
[05:41:14] <FromDiscord> <Elegantbeef> What do you mean?
[05:42:00] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T2m
[05:45:03] <arkanoid> exactly. Thanks!
[05:45:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T2o
[05:46:24] <FromDiscord> <Elegantbeef> Guess that could be `var openArray[char]`
[06:08:02] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:09:47] <arkanoid> apparently, a stack allocated array[64, char] is not zeroed
[06:10:18] <FromDiscord> <Elegantbeef> It is too
[06:13:15] <arkanoid> or maybe "loginInParam.szUserName[0..username.len-1] = username" where "szUserName: array[64, char]" is not doing the right thing
[06:15:53] <arkanoid> or maybe it doesn't zero for types with importcpp pragma?
[06:16:16] <FromDiscord> <Elegantbeef> It zeroes memory if you instantiated it inside nim
[06:16:21] <FromDiscord> <Elegantbeef> If it's instantiated outside of Nim it's not
[06:19:28] <arkanoid> I think it is instantiated into nim. I have type defined as "type NetInLoginParams {.importcpp: "NET_IN_LOGIN_PARAMS".} = object <fields>", then instantiated  as "var loginInParam = NetInLoginParams()"
[06:19:58] <arkanoid> actually not sure if this counts as C++ or nim instantiated
[06:21:31] <arkanoid> but what I know is that "loginInParam.szUserName[0..username.len-1] = username" and "echo loginInParam.szUserName" results in a char array starting with correct string but then other chars not zero following that
[06:23:09] <FromDiscord> <Elegantbeef> It's no big deal just set `username.len` to `\0`
[06:23:52] <FromDiscord> <Elegantbeef> Like i'd personally have a `func username=(loginParam: var NetInLoginParam, str: string) = ...`
[06:26:14] <arkanoid> you mean set szUserName to 0?
[06:26:30] <arkanoid> I'm not following your "set `username.len` to `\0`"
[06:26:55] <FromDiscord> <Elegantbeef> `loginParams.szUserName[username.len] = '\0'`
[06:27:24] <FromDiscord> <Elegantbeef> I assume atleast that it's a fixed sized 64 byte null terminated string
[06:27:44] *** Joins: rockcavera (~rc@192.12.114.192)
[06:27:44] *** Quits: rockcavera (~rc@192.12.114.192) (Changing host)
[06:27:44] *** Joins: rockcavera (~rc@user/rockcavera)
[06:28:01] *** Quits: cyraxjoe (~joe@2806:109f:13:946e:78fa:40c0:4b32:7e93) (Quit: I'm out!)
[06:28:51] <FromDiscord> <Elegantbeef> But like i said a setter makes the most sense
[06:30:03] *** Joins: cyraxjoe (~joe@2806:109f:13:946e::1ee3)
[06:30:45] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T2u
[06:32:57] <FromDiscord> <Elegantbeef> I messed up the last check i think
[06:33:00] <FromDiscord> <Elegantbeef> Should be \<63
[06:34:47] <FromDiscord> <Elegantbeef> A genius would use the field
[06:35:27] <FromDiscord> <Elegantbeef> so `assert str.len <= loginParam.szUserName.len` and `if str.len < strloginParam.szUserName.high`
[06:46:25] <arkanoid> elegantbeef, I don't need just a null terminated string, I need a zeroed array where first N chars are the username
[06:47:20] <arkanoid> the last char is already \0, and also the char just next the last char of the username
[06:47:31] <arkanoid> but all the chars in between are somewhat random
[06:48:13] <arkanoid> but the real question here is why my array is not initialized to zero
[06:53:16] <FromDiscord> <Goat> How do I get a list of all the tables in a database with db_sqlite? `PRAGMA table_list` and `SELECT name FROM sqlite_schema` aren't working for me.
[06:54:36] <arkanoid> I can confirm that an object with importcpp wont initialize to zero
[07:06:53] <pch> lovely, my the api is horrendously slow at rendering the stanford ply cow
[07:07:45] <pch> stanford ply cow is about 6k faces btw
[07:08:31] <pch> so getting 7fps rendering the cow is pretty nice for something ive put 5 days into so far
[07:15:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[07:18:18] <FromDiscord> <Bubblie> can I use meson with nim?
[07:18:20] <FromDiscord> <Bubblie> I absolutely love meson
[07:18:30] <FromDiscord> <Bubblie> so I was wondering If I could use this buildtool
[07:18:46] <FromDiscord> <Bubblie> I like nim's package management but I would appreciate if I could use meson with it as well
[07:24:13] *** Quits: krux02_ (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de) (Remote host closed the connection)
[07:28:37] <FromDiscord> <Bubblie> also can I have un used empty procs?
[07:29:27] <FromDiscord> <Bubblie> kinda like void in C++
[07:29:42] <FromDiscord> <Bubblie> where I don't have to have anything in it
[07:30:44] <FromDiscord> <Bubblie> also, are blocks like classes in a way?
[07:34:54] <FromDiscord> <Bubblie> blocks are called regardless right? So you don't need to specifically call the block like proc
[07:35:18] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:37:12] <FromDiscord> <Elegantbeef> Blocks arent like clasess
[07:37:16] <FromDiscord> <Elegantbeef> `proc doThing = discard`
[07:37:21] <FromDiscord> <Elegantbeef> pch that's a release build?
[07:37:43] <pch> nope! just put up a video of debug mode then thought "wait I should compile this release"
[07:38:02] <pch> so uploaded a second video immediately in release build and 100fps instead xd
[07:38:07] <pch> https://twitter.com/kinkinkijkin/status/1505756653475536896 final of two videos
[07:38:52] <FromDiscord> <Bubblie> In reply to @Elegantbeef "`proc doThing = discard`": oh perfect
[07:39:03] <FromDiscord> <Bubblie> but when I do add things I would remove the discard right
[07:39:11] <FromDiscord> <Bubblie> also how does the void keyword work in nim exactly?
[07:39:49] <pch> void in nim is for when you want to have something, but want it to be nothing
[07:40:03] <pch> ie use in proc types to force returnless procs
[07:41:24] <pch> or as a return type to return things that return... void
[07:41:35] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=3T2E
[07:41:45] <FromDiscord> <Elegantbeef> void isnt a keyword it's a type
[07:41:45] <FromDiscord> <Bubblie> (edit) "https://play.nim-lang.org/#ix=3T2E" => "https://paste.rs/3Ml"
[07:41:48] <pch> idk it's not part of the "usual standard programming" in nim so i dont know much about it in nime specifically
[07:41:57] <FromDiscord> <Elegantbeef> Void means "nothing" in the type system
[07:42:04] <FromDiscord> <Bubblie> ah okay
[07:42:24] <FromDiscord> <Elegantbeef> In nim `proc doThing = discard` is a `void` proc
[07:42:32] <FromDiscord> <Elegantbeef> you can also do `proc doThing: void = discard`
[07:42:54] <FromDiscord> <Bubblie> but I can still do things in that method right? Kinda like how I can still add things to an empty public void
[07:43:00] <FromDiscord> <Elegantbeef> Are you using GC much pch? wonder if arc changes
[07:43:13] <FromDiscord> <Elegantbeef> it's the return type it's not anything else
[07:43:28] <pch> I'm not directly invoking GC in anything I make
[07:43:40] <pch> I just let GC do its work on its own in all of my nim stuff cause I'm lazy as shit
[07:43:46] <FromDiscord> <Elegantbeef> I mean are you using `seq` or GC'd stuff much?
[07:43:50] <pch> oh
[07:44:11] <FromDiscord> <Bubblie> In reply to @Elegantbeef "it's the return type": ah okay
[07:44:22] <FromDiscord> <Elegantbeef> If so you can try `--gc:arc` it sometimes creates faster code
[07:44:23] <pch> yeah new ver replaces all the openArrays with seq cause the nim on my debian computer bitches about `var thing: openArray`
[07:44:57] <FromDiscord> <Elegantbeef> you can also pass `-d:lto`(if your compiler likes it otherwise `--passL:"-flto"`
[07:45:11] <pch> almost the entire thing is inline procs
[07:45:18] <FromDiscord> <Elegantbeef> Well you cannot hold onto openarrays atm pch, so that's to be expected
[07:45:24] <pch> very few things are actually linked per se
[07:45:35] <FromDiscord> <Elegantbeef> Eh it still generally helps
[07:45:51] <FromDiscord> <Bubblie> does nim have a class system?
[07:45:56] <FromDiscord> <Bubblie> of sorts
[07:45:56] <FromDiscord> <Elegantbeef> No
[07:46:05] <FromDiscord> <Elegantbeef> You have single parent OOP and methods
[07:46:06] <pch> classism is no thing to wish for, bubblie
[07:46:16] <pch> =]
[07:46:21] <FromDiscord> <Bubblie> well uh, its just what im use to lmao I work with classes a lot
[07:46:25] <FromDiscord> <Bubblie> that's why I asked
[07:46:30] <FromDiscord> <Elegantbeef> You dont need classes in Nim
[07:46:34] <FromDiscord> <Bubblie> yeah
[07:46:35] <FromDiscord> <Elegantbeef> Procedures can be used like methods
[07:46:37] <FromDiscord> <Bubblie> it makes sense
[07:46:42] <termer> nim has classes but as far as I can tell they're just fancy wrappers for methods and objects
[07:46:53] <FromDiscord> <Elegantbeef> Well it 'has' classes
[07:46:56] <termer> in most cases you wanna use procs anyway
[07:46:57] <pch> the closest equiv to class programming is using ref objects plus methods
[07:47:09] <FromDiscord> <Elegantbeef> They're just block macros ontop of methods and type decls
[07:47:11] <pch> which is... not really how nim likes to be used
[07:47:27] <FromDiscord> <Elegantbeef> Just write it procedurally and use it like OOP and it's fine
[07:47:35] <FromDiscord> <Elegantbeef> Free standing functions are not scary 😛
[07:47:40] <termer> if you came from a lang like Java that's full of OOP then you're gonna try to use Nim that way but you're not gonna be happy doing it
[07:47:48] <termer> and you're gonna realize it's unnecessary
[07:47:55] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[07:48:10] <termer> especially with how dynamic generic procs can be
[07:48:22] <pch> there's a point to doing it but it is not how nim likes to be programmed
[07:48:24] <termer> as long as a proc CAN handle your inputs, it's ok
[07:48:29] <pch> so there's no benefit to doing it in nim
[07:48:32] <FromDiscord> <Bubblie> In reply to @termer "if you came from": of course
[07:48:40] <FromDiscord> <Equinox> In reply to @Bubblie "well uh, its just": Come to the light
[07:48:45] <FromDiscord> <Bubblie> I didn't mean to start something lmao
[07:49:04] <FromDiscord> <Equinox> In reply to @Equinox "Come to the light": No more classes
[07:49:17] <termer> classes kinda suck
[07:49:53] <pch> classism is boring, we should start making code based around optimizing async with intentional race conditions
[07:50:01] <termer> exactly
[07:50:03] <pch> just go all-out and call it Racism-Oriented Code
[07:50:13] <termer> I've been saying this for years
[07:50:33] <FromDiscord> <Bubblie> what
[07:50:51] <termer> and make sure our procs are all properly given pragmas
[07:50:52] <pch> a joke, I say things like this in derision of racists
[07:51:00] <termer> call it Pragmatic Racism-Oriented programming
[07:51:03] <FromDiscord> <Bubblie> LMAO
[07:51:32] <FromDiscord> <Bubblie> yeah its all good I just didn't understand it for a second
[07:52:14] <FromDiscord> <Elegantbeef> Anyway modules and generic polymorphism work just lovely
[07:52:19] <termer> yeah
[07:52:30] <termer> it feels like programming in a dynamic language but without all the stupid runtime error shit
[07:52:37] <termer> best of both worlds
[07:52:54] <termer> sometimes the compiler errors are vague though
[07:53:39] <FromDiscord> <Elegantbeef> Hey that's what i'm here for
[07:53:54] <termer> you're always online
[07:53:54] <pch> generics are wonderful until you try to use em how they work in wholly VM-based languages, then the fact that nim is direct-to-native and C-compatible becomes obvious
[07:53:59] <termer> do you do anything besides post here
[07:53:59] <FromDiscord> <Elegantbeef> I speak for the compiler errors
[07:54:14] <FromDiscord> <Elegantbeef> I play games, and write code occasionally
[07:54:21] <pch> you need to think of it like C with generics instead of better JIT lang
[07:54:40] <FromDiscord> <Elegantbeef> I'm the definition of a unproductive person
[07:54:45] <termer> I imagine it just creates versions of the functions for the specific types
[07:54:56] <FromDiscord> <Elegantbeef> That's how it works
[07:55:00] <termer> hah I was right
[07:55:13] <termer> that's how the V8 javascript engine does it
[07:55:25] <FromDiscord> <Elegantbeef> That's how 99% of language do it
[07:55:28] <termer> if you pass in the same kind of params to a function a few times, it compiles a version of that function for those params
[07:55:34] <pch> yeah and it's kind of clunky at some times because of that, because of C-style type sureness being a pain in the ass
[07:55:36] <termer> it makes plenty of sense
[07:55:59] <FromDiscord> <Elegantbeef> Nim's generics have a bunch of magic you can add to them to make them pretty sound
[07:56:10] <FromDiscord> <Elegantbeef> Though the first usage is where instantiation occurs
[07:56:19] <FromDiscord> <Elegantbeef> So that can carry problems depending on what you're doing
[07:56:26] <FromDiscord> <Elegantbeef> But we have templates so that's fine
[07:56:27] <termer> it's not done at compile time, what?
[07:56:38] <FromDiscord> <Elegantbeef> What?
[07:56:48] <termer> Though the first usage is where instantiation occurs
[07:56:52] <pch> modern VM langs that redesign type sureness are my preferred thing for any sort of programming with generics
[07:56:53] <termer> that's what you said
[07:57:00] <FromDiscord> <Elegantbeef> Yes the first usage at compile time
[07:57:05] <termer> oh right
[07:57:09] <termer> Java generics are decent
[07:57:15] <termer> I never had a problem with those
[07:57:24] <FromDiscord> <Bubblie> Java generics are,,, ok
[07:57:33] <FromDiscord> <Elegantbeef> the hell does type sureness even mean
[07:57:39] <FromDiscord> <Bubblie> as someone who uses java frequently it can be VERY VERY annoying
[07:57:51] <termer> but when you have data that's not related to something else but has a field that other things have, you'd really like to make methods that can take it as an argument
[07:57:52] <FromDiscord> <Bubblie> in Minecraft's code, generics are used A LOT so it ends up just being hell
[07:57:59] <FromDiscord> <Elegantbeef> `MyClassThatDoesThing.DoSpecificThingthat'sNameLongToPissBeefOff(a, b)`
[07:58:07] <termer> lol minecraft code
[07:58:07] <FromDiscord> <Bubblie> Minecraft: Java Edition's code is fucking cursed in a ton of areas
[07:58:12] <FromDiscord> <Bubblie> oh my god
[07:58:19] <pch> type sureness is my quick trying to explain the thing where The Compiler Must Know in order for he code to work
[07:58:20] <termer> I only ever worked with Bukkit
[07:58:24] <FromDiscord> <Bubblie> Modding if fun though
[07:58:30] <FromDiscord> <Bubblie> (edit) "if" => "is"
[07:58:30] <FromDiscord> <Equinox> In reply to @Bubblie "Minecraft: Java Edition's code": It’s true
[07:58:38] <FromDiscord> <Bubblie> I still love modding the game
[07:58:40] <FromDiscord> <Equinox> I’ve only read the 1.8 code
[07:58:49] <FromDiscord> <Equinox> And even that was not ideal
[07:58:49] <FromDiscord> <Bubblie> Im so sorry you had to read 1.8 code
[07:58:49] <termer> 1.8 is where I stopped making plugins
[07:58:56] <FromDiscord> <Bubblie> 1.7.10 is actually the worst code
[07:59:03] <FromDiscord> <Equinox> I’m not surprised
[07:59:12] <FromDiscord> <Equinox> I’m sure they got there and realized they couldn’t move forward
[07:59:15] <FromDiscord> <Bubblie> I mean, other than the versions before it
[07:59:28] <FromDiscord> <Equinox> No offense to notch but he’s one guy
[07:59:32] <FromDiscord> <Bubblie> Its mostly because of notch really that the code for the game is still spahgetti
[07:59:37] <pch> C does it in a very, very awful way imo in that it's extremely strict, designed around stack machines with teeny tiny stacks, and disobeying the type assurance strictness actively slows down your program in most cases
[07:59:54] <FromDiscord> <Bubblie> He kinda wrote java like it was C
[07:59:54] <termer> I'd hate to write a game in Java
[07:59:56] <FromDiscord> <Bubblie> Notch
[08:00:08] <FromDiscord> <Equinox> In reply to @pch "C does it in": C does most things in a very awful way imo
[08:00:09] <termer> GC alone scares me off
[08:00:14] <FromDiscord> <Equinox> In reply to @termer "I'd hate to write": I’ve done it
[08:00:14] <pch> notch wrote java like he was talking, and just happened to talk like he was writing C
[08:00:17] <termer> GC freezes the game for sometimes a second at the time
[08:00:36] <FromDiscord> <Bubblie> java edition kinda runs like shit at times because the code is horrendous in a lot of areas
[08:00:39] <termer> fucking stop the world GC
[08:00:47] <FromDiscord> <Bubblie> I don't think it is purely java's fault here
[08:00:51] <FromDiscord> <Equinox> In reply to @Equinox "I’ve done it": It’s not fun, after about 50 classes the game code is like a swamp to wade through
[08:00:53] <termer> it's not purely maybe
[08:00:56] <termer> but it's a bad introduction
[08:01:01] <termer> and the memory usage is through the roof
[08:01:10] <FromDiscord> <Equinox> OOP isn’t even good for games anymore in my opinion
[08:01:14] <pch> the reason GC in minecraft is awful is because minecraft uses a wonderful "industry standard coding" system based around avoiding mutables
[08:01:14] <termer> I can't run a minecraft server without a machine with at least 2GB RAM
[08:01:21] <FromDiscord> <Bubblie> Usually people use ECS or entity component systems
[08:01:27] <FromDiscord> <Equinox> Data oriented approaches seem to far exceed OOP
[08:01:29] <FromDiscord> <Bubblie> In reply to @termer "I can't run a": thats kinda standard
[08:01:46] <FromDiscord> <Bubblie> ECS is the best for games
[08:01:49] <FromDiscord> <Equinox> Yeah
[08:01:56] <termer> memory usage is my #1 gripe with JVM
[08:01:56] <FromDiscord> <Equinox> It’s easier and faster
[08:02:03] <FromDiscord> <Bubblie> might write an ECS in nim for the game I make
[08:02:09] <FromDiscord> <Equinox> In reply to @termer "memory usage is my": It’s bad but consistent
[08:02:15] <FromDiscord> <Elegantbeef> Welcome to the wacky world were everyone says ECS is the best simultaneously not making projects that benefit from ECS 😀
[08:02:15] <termer> it's consistent yes
[08:02:21] <termer> but it costs me money
[08:02:26] <FromDiscord> <Bubblie> In the newer versions of java a lot of that is definitely better regarding memory
[08:02:29] <termer> I have to pay for more expensive VMs for simple things
[08:02:32] <FromDiscord> <Bubblie> and have you all heard of GraalVM?
[08:02:35] <termer> yes
[08:02:42] <FromDiscord> <Bubblie> its great
[08:02:47] <termer> don't use native-image if you're gonna mention that
[08:02:48] <pch> and since you're running around a gigabyte of live data at all times in minecraft, sometimes more, and how minecraft keeps things alive and provides mandatory modifications to them is passing-by-copy the entirety of world data multiple times per frame and then just leaving it to die
[08:02:58] <pch> well gc has to do a lot
[08:03:00] <termer> AAAAAAAA
[08:03:01] <FromDiscord> <Bubblie> In reply to @termer "don't use native-image if": already did 😈
[08:03:04] <termer> fucking passing by copy
[08:03:11] <termer> native-image is slow
[08:03:16] <FromDiscord> <Bubblie> depends
[08:03:23] <pch> there's not a single mutable in the entirety of minecraft code afaik
[08:03:27] <termer> it provides worse performance
[08:03:31] <FromDiscord> <Bubblie> In reply to @pch "there's not a single": no there is lmao
[08:03:33] <termer> I only use it for short-lived things
[08:03:42] <pch> it's written like a corporate data security code
[08:03:42] <FromDiscord> <Bubblie> from a modder I can tell you that
[08:03:50] <FromDiscord> <Bubblie> that, is true
[08:04:00] <FromDiscord> <Elegantbeef> Arent we talking about a language where you cannot define your own value type 😛
[08:04:11] <FromDiscord> <Bubblie> I mean I like java regardless
[08:04:18] <termer> Java is ok
[08:04:20] <termer> I like Kotlin more
[08:04:24] <FromDiscord> <Equinox> In reply to @Bubblie "I mean I like": I like java as well
[08:04:27] <termer> that's what I've been using for years
[08:04:31] <FromDiscord> <Bubblie> Kotlinc is the bane of my existence
[08:04:35] <FromDiscord> <Equinox> I’ve never tried Kotlin
[08:04:38] <termer> works for me
[08:04:39] <FromDiscord> <Bubblie> the compiler for kotlin scares the fuck out of me
[08:04:45] <FromDiscord> <Bubblie> kotlin is a great language
[08:04:50] <termer> I only use kotlin through gradle
[08:04:55] <FromDiscord> <Bubblie> you mean kts?
[08:04:56] <termer> Kotlin is like Java but better
[08:05:01] <termer> usually
[08:05:04] <pch> people say they like JVM languages until someone who knows JVM internals explains invokedynamic
[08:05:04] <FromDiscord> <Equinox> I here a lot of people say Kotlin is their favorite
[08:05:05] <termer> but gradle build system
[08:05:14] <termer> I mean I don't interact with the compiler directly
[08:05:19] <termer> I write kotlin applications
[08:05:26] <FromDiscord> <Bubblie> In reply to @Equinox "I here a lot": I use both
[08:05:29] <termer> what sold me on the lang was coroutines
[08:05:30] <pch> invokedynamic is uh
[08:05:36] <FromDiscord> <Bubblie> its a good language, it sometimes doesn't suit my needs other times it does
[08:05:37] <termer> cause I use async java
[08:05:42] <FromDiscord> <Bubblie> it really depends  on what you are doing in my experience
[08:05:45] <termer> and callbacks for everything was TERRIBLE
[08:05:58] <termer> by the way Vert.x is a great framework
[08:06:10] <pch> I had a friend for a while who knew very well how it worked but they went mad from knowing too much about java and have regressed to a little corner of the internet involving like 3 people
[08:06:14] <FromDiscord> <Bubblie> I have done java bytecode analysis lmao
[08:06:21] <pch> i wish i were exaggerating tbh
[08:06:31] <FromDiscord> <Bubblie> In reply to @pch "I had a friend": 💀
[08:06:59] <pch> used to be an engineer at intel until the pandemic
[08:07:17] <termer> I've considered moving to Go before cause JVM memory usage pisses me off too much
[08:07:18] <pch> dont remember why they had to leave but i probably shouldnt share even if i knew lol
[08:07:28] <FromDiscord> <Bubblie> Im still going to use java because I like it, people can have their opinions on it it's fine, I know how cursed the language itself can be but as someone who uses it on a constant basis there are good things about it still, otherwise im pretty sure many like myself wouldn't still be using it
[08:07:38] <termer> I rewrote a few things in fucking node cause the memory usage was lower
[08:07:47] <pch> p much every VM lang has some horrifying part
[08:07:55] <FromDiscord> <Bubblie> that's true
[08:07:57] <termer> Java is fine. It works
[08:08:01] <FromDiscord> <Bubblie> VM langs can be horrifying in their own right
[08:08:17] <pch> cause they're all made either as derivs from java or by hobbyists trying to kill java because of how awfully it works
[08:08:35] <FromDiscord> <Bubblie> nim doesn't have a virtual machine right? or does it
[08:08:35] <termer> the need for one binary for all platforms has basically disappeared except on embedded systems like things that run arm
[08:08:46] <termer> nimvm is the thing that runs nimscripts
[08:08:49] <FromDiscord> <Elegantbeef> Ah i see the matrix bridge shat the bed again
[08:08:51] <termer> I don't know how much of a VM it is
[08:08:58] <pch> nim has... a pseudoVM in the compiler and the nimscript vm
[08:09:14] <FromDiscord> <Bubblie> whats nimscript exactly
[08:09:18] <termer> nim as scripts
[08:09:23] <FromDiscord> <Elegantbeef> A subset of Nim that runs i nVM
[08:09:25] <termer> it's used in nimble files
[08:09:28] <FromDiscord> <Elegantbeef> on a vm\
[08:09:34] <pch> a reduced version of nim meant for use in making config scripts
[08:09:37] <FromDiscord> <Bubblie> oh 👀
[08:09:40] <FromDiscord> <Elegantbeef> It's also fully usable for scripting nim programs
[08:09:48] <FromDiscord> <Equinox> Interpreted nim?
[08:09:48] <FromDiscord> <Bubblie> that is very neat
[08:09:48] <termer> Bubblie You wanna know what's cursed? A scripting language with a runtime written in Java
[08:09:54] <FromDiscord> <Bubblie> LMAO
[08:09:56] <FromDiscord> <Bubblie> Oh lord
[08:09:59] <termer> t. author of one
[08:10:02] <FromDiscord> <Elegantbeef> Surprisingly the NimVm even runs in wasm
[08:10:17] <pch> you can write full programs in nimscript but you lack many features from the native form of nim
[08:10:19] <FromDiscord> <Bubblie> I could possibly embed nimvm in other langs right
[08:10:25] <pch> yes
[08:10:32] <FromDiscord> <Bubblie> holy shit this gives me a cursed idea
[08:10:34] <FromDiscord> <Elegantbeef> If you wanted to do the interop yes
[08:10:36] <FromDiscord> <Elegantbeef> It's not setup for it presently
[08:10:36] <termer> Bubblie https://github.com/termermc/rtflc
[08:10:39] <termer> check this shit out
[08:10:47] <FromDiscord> <Bubblie> In reply to @termer "Bubblie https://github.com/termermc/rtflc": help
[08:10:50] <FromDiscord> <Bubblie> this is horrid
[08:10:54] <termer> the sad thing is this actually runs a few things
[08:10:58] <termer> I built a PHP clone with it
[08:11:15] <FromDiscord> <Elegantbeef> Pch that's why you dont use the normal NimVM but use the compiiler API to make the VM actually usable
[08:11:16] <termer> and it has a memory leak somewhere
[08:11:27] <termer> it's one of the worst things in the world
[08:11:48] <termer> I used to run an IRC bot with it as well
[08:11:56] <FromDiscord> <Bubblie> I am actually releasing a gui library implementation I made for minecraft it uses a lwjgl gui lib I found which is really good
[08:11:56] <FromDiscord> <Elegantbeef> Though i'm just biased since I have a lot of work put into easy Nim \<-\> Nimscript interop
[08:11:56] <termer> but it would keep crashing because of the leak
[08:12:01] <pch> someone should build a php vm in javascript that only runs on node
[08:12:08] <termer> HAHAHAHA
[08:12:14] <FromDiscord> <Bubblie> In reply to @Bubblie "I am actually releasing": minecraft's gui system was trash so like
[08:12:23] <FromDiscord> <Bubblie> I just found this one and implemented it while battling opengl state
[08:12:27] <FromDiscord> <Bubblie> seriously fuck opengl state
[08:12:44] <termer> I don't wanna ever touch opengl directly
[08:12:51] <termer> thank god I'm not a games developer :)
[08:12:59] <pch> non-ES opengl is... ugh
[08:13:03] <pch> especially older versions
[08:13:09] <FromDiscord> <Elegantbeef> Eh it's not that bad
[08:13:28] <FromDiscord> <Elegantbeef> I use 4.5+ with DSA and it's not terrible
[08:13:28] <FromDiscord> <Elegantbeef> I've written more tedious code elsewhere
[08:13:33] <pch> it's not that bad unless you've used GLES in depth or Vulkan in depth or DX12 in depth or
[08:14:02] <termer> Bubble Oh yeah I should also mention that my scripting lang's latest interpreter is a sort of bytecode interpreter
[08:14:02] <FromDiscord> <Elegantbeef> I mean I'm also doing simple shit
[08:14:07] <termer> inside of the JVM....
[08:14:12] <FromDiscord> <Elegantbeef> So it's like 300 loc total wrapper ontop of opengl
[08:14:28] <pch> and what sucks about trying to use GLES instead of OGL is... you can't assure your optimized data structures aren't horribly mangled
[08:14:57] <termer> has anyone used vulkan directly
[08:15:04] <pch> I did a bit
[08:15:04] <termer> I heard vulkan has better multi-core performance
[08:15:11] <pch> never got to a renderer
[08:15:20] <pch> but I have used it
[08:15:47] <pch> quite a bit more pipework than dOGL but for a pretty good reason
[08:16:10] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Eh it's not that": Its not that bad until you have to literally fork lwjgl bindings and see where the problem is, and then proceed to see why the gui lib is fucking up, and then proceed to fix the state, and then it just piles and piles it absolute pain
[08:16:13] <pch> Vulkan is based on an experimental version of AMD's internal API in 2011
[08:16:18] <FromDiscord> <Bubblie> But im really happy with what I did
[08:16:25] <FromDiscord> <Elegantbeef> last i checked lwjgl isnt opengl
[08:16:29] <FromDiscord> <Bubblie> Yeah I know
[08:16:31] <FromDiscord> <Bubblie> I said bindings
[08:16:35] <FromDiscord> <Bubblie> Bindings to opengl
[08:16:37] <FromDiscord> <Bubblie> For java
[08:16:45] <pch> lwjgl is pain
[08:16:54] <FromDiscord> <Bubblie> Couldn’t agree with you more
[08:16:59] <pch> like 100x more painful than any other GL bindings
[08:17:03] <FromDiscord> <Bubblie> Lwjgl has a FUCKED build system
[08:17:06] <pch> especially how it's used in minecraft
[08:17:07] <FromDiscord> <Bubblie> A FUCKED one im telling you
[08:17:18] <FromDiscord> <Bubblie> Horrid
[08:17:37] <pch> tbh if there's a good java build system that isn't obsolete every 3 months I'd be surprised
[08:17:50] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[08:17:53] <FromDiscord> <Bubblie> Im glad I found nim for game dev 😭 I swear to god I didnt want to use java, im sticking to using java for servers and general programs
[08:18:07] <FromDiscord> <Elegantbeef> Imagine using Java instead of Nim
[08:18:12] <FromDiscord> <Elegantbeef> What a wacky tedious world
[08:18:14] <nrds> <06Prestige99> ikr
[08:18:22] <FromDiscord> <Bubblie> C++ is also just insanely verbose
[08:18:35] <FromDiscord> <Bubblie> And hard to even use at times
[08:18:37] <termer> I don't know anyone who likes C++
[08:18:37] <FromDiscord> <Bubblie> And then
[08:18:38] <nrds> <06Prestige99> decorators; decorators everywhere
[08:18:39] <FromDiscord> <Bubblie> Memory leakage
[08:18:43] <FromDiscord> <Bubblie> Decorators
[08:18:54] <FromDiscord> <Bubblie> Stop decorating challenge 5 second IMPOSSIBLE
[08:18:58] <pch> C++ is even hated by the people who like it
[08:19:00] <termer> Java is great for servers
[08:19:04] <nrds> <06Prestige99> Every c/c++ dev I've spoken to says they never write memory leaks. It's fun
[08:19:04] <FromDiscord> <Bubblie> In reply to @pch "C++ is even hated": Exactly
[08:19:05] <termer> at least HTTP shit
[08:19:11] <FromDiscord> <Valdar> I know way too many people who like c++, or at least claim to
[08:19:11] <FromDiscord> <Bubblie> Java is amazing for servers yeah
[08:19:28] <FromDiscord> <Bubblie> Java was pretty much designed for servers tbh
[08:19:34] <FromDiscord> <Bubblie> Its why banks still use it for that
[08:19:52] <pch> someone was porting bindings to Godot, the game engine I use, to Nim, which would've let me shove my render API into a real game without having to roll my own engine
[08:19:52] <termer> multithreading in Java is also great
[08:19:58] <termer> I never worried about it
[08:19:58] <FromDiscord> <Bubblie> Oh yeah definitely
[08:20:00] <pch> but >not updated since 2019
[08:20:14] <FromDiscord> <Bubblie> In reply to @pch "someone was porting bindings": Holy shit nim bindings to godot???
[08:20:19] <FromDiscord> <Bubblie> That would be fucking insane I love godot
[08:20:27] <FromDiscord> <Elegantbeef> They already exist
[08:20:28] <FromDiscord> <Elegantbeef> So have at 'er
[08:20:36] <pch> they're not up-to-date
[08:20:39] <pch> not updated in years
[08:20:44] <FromDiscord> <Bubblie> Oh shit
[08:20:45] <FromDiscord> <Elegantbeef> They still work
[08:20:46] <pch> dont work anymore and were never finished
[08:20:47] <FromDiscord> <Bubblie> Pain
[08:20:51] <termer> I'm currently building a server in Nim and there's a memory leak somewhere, and I never had that issue with Java lol
[08:20:53] <FromDiscord> <Elegantbeef> They do so work
[08:20:54] <pch> some parts work
[08:20:59] <termer> so much for garbage collector
[08:21:04] <termer> although maybe I'm retarded
[08:21:20] <FromDiscord> <Elegantbeef> Termer gib code
[08:21:33] <termer> https://github.com/llstreamer/llstreamer-server
[08:21:40] <termer> explore away
[08:21:45] <termer> it's a work in progress
[08:22:14] <termer> I haven't pushed the client code yet cause it's in a very debug state
[08:23:07] <termer> the fun shit happens in src/llstreamer_server/server.nim
[08:23:16] <FromDiscord> <Valdar> Beef, help me out with this bit of logic (or lack of it)↵I have an object type that I’ll be using often, and I need speed.↵My understanding of the Nim memory model is that the object will be created on the stack (NOT a Ref object). ↵But…. If the object contains a seq, that seq will live on the heap. Correct so far?
[08:23:30] <arkanoid> I've an UncheckedArray[byte] (or char) from C + len that I want to print. I can do myUncheckedArray.toOpenArray(0, myLen) but it still prints it to console as an ['a','r','r','a','y'] and not as an "array"
[08:24:13] <FromDiscord> <Elegantbeef> Yes teh seq data will be on the heap
[08:24:28] <FromDiscord> <Elegantbeef> Implement a `$` for `openArray[char]` ark
[08:24:28] <termer> seqs are pointers to the real data so yeah it'll be on the heap
[08:24:39] <FromDiscord> <Valdar> k, so, since a seq carries its own length info, just checking if the object’s seq is empty will require going to the heap, right?
[08:24:58] <FromDiscord> <Elegantbeef> Yes
[08:25:10] <FromDiscord> <Valdar> 👍 thx
[08:25:56] <FromDiscord> <Elegantbeef> Termer how much memory are you leaking?
[08:26:08] <nrds> <06Prestige99> Elegantbeef https://play.nim-lang.org/#ix=3T2M
[08:26:12] <FromDiscord> <Elegantbeef> \Compile with `-d:useMalloc` and use `valgrind` to see
[08:26:22] <FromDiscord> <Elegantbeef> Prestige that's my name!
[08:26:27] <termer> it seems like there's ~40mb of memory per 1k clients connecting, but that memory never seems to be freed when they disconnect
[08:26:44] <termer> maybe a little less or more
[08:26:52] <termer> it very well could be something not being removed from a seq
[08:26:59] <FromDiscord> <Elegantbeef> Well valgrind will give you all your important information
[08:27:01] <termer> but I can't find where if that's the issue
[08:27:50] <FromDiscord> <Valdar> Is there some kind of profiler to see when Nim's GC runs, how often, what is freed, etc.?
[08:27:50] <termer> ok so use valgrind then?
[08:27:57] <FromDiscord> <Elegantbeef> Yes
[08:28:00] <termer> I'll have to test that some other time
[08:28:05] <FromDiscord> <Elegantbeef> Depends on what GC you have valdar
[08:28:13] <FromDiscord> <Valdar> ARC
[08:28:13] <FromDiscord> <Elegantbeef> You can use `-d:useMalloc` to see what is freed
[08:28:15] <termer> wish I had a whole team to deal with this project lol
[08:28:23] <FromDiscord> <Elegantbeef> Arc doesnt have a conventional GC
[08:28:25] <termer> building something is one thing, but optimizing and debugging is another
[08:28:31] <FromDiscord> <Elegantbeef> It is scoped based inserted destructors
[08:28:41] <termer> arc is cool
[08:28:49] <FromDiscord> <Elegantbeef> so you can do `--expandArc:procName` to see
[08:28:55] <FromDiscord> <Valdar> ah, ok, i need to read more on it then
[08:28:56] <FromDiscord> <demotomohiro> Arc do something only when you copy ref or it go out of scope
[08:29:12] <FromDiscord> <Elegantbeef> you can also overide `=destroy` and use that to trace objects destructions
[08:29:46] <FromDiscord> <Valdar> Arc is still considered GC tho, or not?
[08:30:10] <FromDiscord> <Elegantbeef> Technically yes
[08:30:11] <FromDiscord> <Elegantbeef> Not what most people mean when they say "GC" though
[08:30:39] <FromDiscord> <demotomohiro> If reference counting is a GC, we can say rust have GC :p
[08:30:48] <FromDiscord> <Elegantbeef> It technically is and does
[08:31:06] <FromDiscord> <Elegantbeef> Garbage collection is a general term for automatic memory management
[08:31:14] <FromDiscord> <Elegantbeef> Which it so happens RC falls under
[08:31:20] <FromDiscord> <Valdar> yeah, i thought that as well when i was trying out Rust
[08:31:22] <termer> isn't orc closer to what someone would consider a traditional GC
[08:31:27] <termer> since it has some sort of active collector
[08:31:31] <FromDiscord> <Elegantbeef> Not really
[08:31:59] <FromDiscord> <Elegantbeef> `refc` is a garbage collector, `orc` is arc + cycle breaker, so maybe but it's still not the same
[08:32:44] <FromDiscord> <Valdar> I'll read more on it. so I can at least ask intelligent questions 🙂
[08:33:19] <FromDiscord> <Elegantbeef> Eh i usually attempt to answer even the unintelligent ones
[08:33:26] <FromDiscord> <Elegantbeef> Do you have a link to the Nim page?
[08:33:58] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/mm.html and https://nim-lang.org/docs/destructors.html
[08:34:44] <FromDiscord> <Bubblie> also, about the bot tags, you all are talking from gitter right?
[08:35:13] <termer> I'm from IRC
[08:35:19] <termer> I don't know how many people use Gitter
[08:35:25] <FromDiscord> <Bubblie> whats IRC
[08:35:28] <termer> LOL
[08:35:40] <termer> oldest continuously used chat protocol in the world
[08:35:51] <termer> also the best in terms of support
[08:36:00] <FromDiscord> <Elegantbeef> Prestige i think the issue is the same thing
[08:36:01] <FromDiscord> <Bubblie> oh internet relay chat
[08:36:06] <termer> yes
[08:36:30] <FromDiscord> <Elegantbeef> nope nevermind
[08:36:39] <FromDiscord> <Bubblie> I didn't think people still used it tbh they usually just use chatting platforms
[08:36:55] <termer> there are a ton of people who still use it but not many normal people
[08:37:01] <FromDiscord> <Bubblie> LMAO
[08:37:01] <termer> almost exclusively tech literates
[08:37:27] <termer> high barrier to entry tends to keep people out
[08:37:34] <FromDiscord> <Bubblie> I kinda like being able to chat through a ui so I'll stick to discord
[08:37:34] <nrds> <06Prestige99> Beef: oh that's too bad
[08:37:38] <nrds> <06Prestige99> seems similar in nature
[08:37:45] <termer> not really high per se, but it sucks to use without extra tools
[08:37:49] <termer> like you don't get chat history
[08:38:02] <termer> unless you've setup a bouncer like ZNC to keep you connected and relay it to you when you connect
[08:38:03] <FromDiscord> <Valdar> In reply to @Elegantbeef "https://nim-lang.org/docs/mm.html and https://nim-l": I skimmed that one, or a similar one when I started with Nim. I need a refresher tho. Frankly, I've had not one hiccup related to GC since I've been using Nim, so I've kinda been letting it do it's thang
[08:38:22] <FromDiscord> <Bubblie> all this for chatting with programmers on the internet?
[08:38:29] <FromDiscord> <Bubblie> I mean
[08:38:32] <FromDiscord> <Bubblie> you do you Ig
[08:38:39] <termer> it works and I like it more than discord
[08:38:47] <FromDiscord> <Bubblie> fair
[08:38:47] <termer> plus you can't get banned from IRC
[08:38:55] <termer> you can get banned from a server
[08:38:58] <termer> or a channel
[08:39:00] <termer> but not IRC
[08:39:09] <termer> it's a lot more free
[08:39:13] <FromDiscord> <Bubblie> I think thats both a pro and a con
[08:39:16] <termer> it's a pro
[08:39:31] <termer> it's also """federated""" aka you setup a server and connect
[08:39:33] <FromDiscord> <Bubblie> I mean, if there is a very annoying individual how do you get rid of them
[08:39:35] <termer> not really federated
[08:39:43] <termer> how do you get rid of them? ban their IP
[08:39:53] <FromDiscord> <Valdar> yeah, looks like a Con to me.
[08:39:57] <FromDiscord> <Bubblie> so, you can ban them, just not from using IRC
[08:40:03] <termer> yeah of course
[08:40:08] <termer> cause IRC is just a protocol
[08:40:21] <FromDiscord> <Bubblie> id hope they wouldn't be using a vpn then
[08:40:38] <FromDiscord> <Bubblie> cause then it would probably be hard to ip ban them right
[08:40:42] <termer> you can block VPNs if you want but this is the same situation with discord alt accounts
[08:40:43] <FromDiscord> <Bubblie> unless you track the vpn end point
[08:40:49] <termer> anyone who wants to can get alt accounts
[08:41:09] <termer> I've got like 10 discord accounts lol it's not hard to do
[08:41:19] <FromDiscord> <Bubblie> why do you have 10...
[08:41:26] <termer> for fun
[08:41:33] <FromDiscord> <Bubblie> I have no words
[08:41:47] <termer> but my point is that IRC is free as in freedom
[08:41:51] <termer> and you can run all your own stuff
[08:41:58] <termer> like I have an IRC server for friends
[08:42:10] <FromDiscord> <Elegantbeef> Insert matrix comments here
[08:42:18] <termer> matrix takes a billion gigs of RAM to run
[08:42:22] <termer> and is slow as shit
[08:42:28] <FromDiscord> <huantian> pc issue
[08:42:31] <FromDiscord> <Elegantbeef> Blame the servers 😛
[08:42:36] <termer> yeah the servers suck
[08:42:47] <termer> you shouldn't need several gigs of ram to run a chat server
[08:43:02] <FromDiscord> <Elegantbeef> Synapse is written in python iirc
[08:43:06] <termer> yeah
[08:43:11] <FromDiscord> <Elegantbeef> They're not exactly aiming for performance
[08:43:12] <termer> aka the worst choice
[08:43:12] <FromDiscord> <Bubblie> cython is pretty cool
[08:43:14] <FromDiscord> <Bubblie> I like cython
[08:43:21] <termer> I tried using matrix but it was just so slow
[08:43:25] <termer> especially the main homeserver
[08:43:38] <termer> I still use it but only via a bot
[08:43:43] <termer> and for one channel
[08:43:48] <FromDiscord> <huantian> I might setup my own matrix homeserver just for funsies
[08:43:58] <termer> it won't be fun
[08:44:07] <FromDiscord> <huantian> why not
[08:44:12] <termer> that's like saying you're gonna setup an email server for funsies
[08:44:24] <FromDiscord> <Bubblie> im trying to figure out where nimgl put EXIT_SUCCESS for vulkan
[08:44:32] <FromDiscord> <huantian> In reply to @termer "that's like saying you're": I did that once
[08:44:35] <termer> tons of configuration and huge ability to fuck things up
[08:44:35] <FromDiscord> <huantian> it took like 2 hours
[08:44:39] <FromDiscord> <Bubblie> ill just return 0
[08:44:49] <FromDiscord> <huantian> idk I might just copy this nixos config
[08:45:04] <termer> what's the point
[08:45:18] <termer> nobody ends up running a homeserver for long unless they're dedicated
[08:46:16] <termer> Bubblies oh yeah also, about not being able to be banned on IRC, it's not just a benefit for people fucking around
[08:46:25] <termer> I've gotten warned on discord before for what other people in a discord did
[08:46:39] <termer> cause I had admin privs in the guild
[08:46:50] <termer> the fact that you can get banned for what others do is a problem
[08:47:08] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=3T2R
[08:47:13] <termer> it's not great to have your account banned and then have to track down people again to readd them on a new account
[08:47:15] <FromDiscord> <Bubblie> cause this doesn't work
[08:47:15] <FromDiscord> <Elegantbeef> Yes this isnt C
[08:47:21] <FromDiscord> <Bubblie> LMAO
[08:47:28] <FromDiscord> <Elegantbeef> you need to call `main`
[08:47:33] <FromDiscord> <Elegantbeef> Nim doesnt have a `main`
[08:47:35] <termer> hahahaha
[08:47:37] <FromDiscord> <Bubblie> yeah I called it
[08:47:43] <FromDiscord> <Bubblie> underneath
[08:47:43] <termer> you can check something like isMainModule or something
[08:47:54] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=
[08:48:00] <FromDiscord> <Elegantbeef> `discard main()`
[08:48:01] <termer> nice link
[08:48:05] <FromDiscord> <Elegantbeef> Nim doesnt allow you to have unhandled values
[08:48:20] <termer> the unhandled values thing was annoying to me at first
[08:48:20] <FromDiscord> <Bubblie> ah okay, so instead of using return id use discard
[08:48:26] <FromDiscord> <Elegantbeef> No
[08:48:31] <termer> not sure if it's really all that decent of a feature
[08:48:34] <FromDiscord> <Elegantbeef> you use `discard` when you dont want a value
[08:48:47] <FromDiscord> <Elegantbeef> It's a very good feature when you have every statement can be an expression
[08:48:52] <FromDiscord> <Elegantbeef> It's pretty much needed for that imo
[08:49:25] <termer> every statement being an expression is just weird
[08:49:33] <FromDiscord> <Elegantbeef> It's so lovely
[08:49:44] <FromDiscord> <Bubblie> oh so like, it would still be returning 0, but id be discarding
[08:49:55] <FromDiscord> <Elegantbeef> you discard it at the call sitee
[08:49:59] <FromDiscord> <Bubblie> yeah
[08:50:00] <FromDiscord> <Elegantbeef> I mean why are you even making a main proc
[08:50:02] <FromDiscord> <Bubblie> discard main()
[08:50:10] <FromDiscord> <Bubblie> In reply to @Elegantbeef "I mean why are": idk im insane
[08:50:18] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T2T
[08:50:19] <FromDiscord> <Bubblie> alright
[08:50:25] <termer> c brainwashing
[08:50:27] <termer> pay no heed
[08:50:39] <FromDiscord> <Bubblie> so what is isMainModule
[08:50:41] <FromDiscord> <Bubblie> is it like
[08:50:44] <FromDiscord> <Bubblie> a main method like thing ig
[08:50:46] <FromDiscord> <huantian> isMainModule is so much easier to type than pythons name main
[08:51:07] <FromDiscord> <Bubblie> In reply to @termer "pay no heed": it is C brainwashing
[08:51:11] <FromDiscord> <Elegantbeef> `isMainModule` is a boolean that's true if the scope owner is the module you're compiling
[08:51:13] <FromDiscord> <Bubblie> and like, every other lang that has a main method
[08:51:15] <FromDiscord> <Elegantbeef> It's not rocket science
[08:51:21] <FromDiscord> <Elegantbeef> Nim files are called `modules`
[08:51:35] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:51:37] <termer> public static void main(String[] args) {}
[08:51:47] <termer> never got over how verbose java main was
[08:51:58] <FromDiscord> <huantian> It’s the same as pythons `if name == “main”`
[08:52:07] <FromDiscord> <Bubblie> In reply to @Elegantbeef "It's not rocket science": no need to be rude about it lmao mb
[08:52:09] <termer> No. You WILL use a class to start your program
[08:52:23] <FromDiscord> <Elegantbeef> I'm not being rude, i'm joking around
[08:52:25] <FromDiscord> <Elegantbeef> It's all banter
[08:52:35] <termer> learn to bant, my friend
[08:52:41] <FromDiscord> <Bubblie> I cant really tell through text a lot of the time
[08:52:51] <FromDiscord> <Bubblie> so im just gonna assume its banter from now on
[08:52:51] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Ping timeout: 245 seconds)
[08:53:03] <FromDiscord> <Elegantbeef> It's akin, not the same 😛↵(@huantian)
[08:53:44] <FromDiscord> <Bubblie> In reply to @termer "No. You WILL use": yes, I will make an entire class just run a print statement in the main method
[08:53:46] <FromDiscord> <Elegantbeef> when bodies that are false arent semantically checked!
[08:53:52] <FromDiscord> <Bubblie> (edit) "In reply to @termer "No. You WILL use": yes, I will make an entire class just ... run" 03added "to"
[08:54:02] <FromDiscord> <Elegantbeef> Kotlin and C# both now have the abillity for atleast some top level statements
[08:54:04] <FromDiscord> <Bubblie> In reply to @Bubblie "yes, I will make": I'm totally sane
[08:54:08] <FromDiscord> <Elegantbeef> Cmon java be modern
[08:54:10] <FromDiscord> <Bubblie> In reply to @Elegantbeef "Kotlin and C# both": yeah it's great
[08:54:16] <FromDiscord> <Bubblie> java might have this feature soon actually
[08:54:22] <FromDiscord> <Bubblie> java is sorta picking up pace
[08:54:31] <FromDiscord> <Bubblie> they added sealed classes
[08:54:42] <FromDiscord> <Bubblie> but uh
[08:54:46] <FromDiscord> <Bubblie> yeah
[08:54:58] <FromDiscord> <Bubblie> oracle kinda cringe ngl
[08:55:43] <FromDiscord> <Bubblie> oh shit I forgot to import glfw
[08:56:00] <FromDiscord> <Bubblie> I removed it to test something
[08:56:04] <FromDiscord> <Bubblie> (edit) "import" => "reimport"
[08:56:26] <FromDiscord> <Bubblie> ive met people who don't use glfw
[08:56:32] <FromDiscord> <Bubblie> for vulkan
[08:56:39] <FromDiscord> <Bubblie> just straight up do it by hand
[08:56:43] <FromDiscord> <Bubblie> absolutely insane individuals
[08:57:47] <FromDiscord> <Bubblie> yall gonna hate this
[08:57:47] <FromDiscord> <Bubblie> https://github.com/jjv360/nim-classes
[08:57:58] <FromDiscord> <Elegantbeef> I've seen it before
[08:58:07] <FromDiscord> <Elegantbeef> Hell I helped impbox with some fixes to oolib iirc
[08:58:57] <FromDiscord> <Bubblie> is it possible to keep procedures in groups so it looks neater ig
[08:59:07] <FromDiscord> <Elegantbeef> Yea you write them that way
[08:59:16] <FromDiscord> <Elegantbeef> Odd concept i know
[08:59:20] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[09:00:09] <FromDiscord> <Bubblie> no like, could I stick the procedures in a block or something
[09:00:38] <FromDiscord> <Elegantbeef> You could
[09:00:56] <FromDiscord> <Bubblie> just to be like "these are where the specific procedures for the triangle take place" something like that ig
[09:01:03] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T2U
[09:01:03] <FromDiscord> <Bubblie> ooo
[09:01:15] <FromDiscord> <Bubblie> I completely forgot about templates
[09:01:18] <FromDiscord> <Elegantbeef> You know what i like is you can just do `## These are procedures for the triangle`
[09:01:29] <FromDiscord> <Bubblie> yeah that works too
[09:01:32] <FromDiscord> <Bubblie> ill just do a doc
[09:02:03] <FromDiscord> <Elegantbeef> This is a fun bug prestige
[09:02:25] <FromDiscord> <Bubblie> git just shit itself thanks git
[09:03:27] <FromDiscord> <Bubblie> okay I think im writing nim like its C++ let me try to fix this
[09:03:44] <FromDiscord> <Bubblie> what C++ does to a mf
[09:03:50] <FromDiscord> <Equinox> lmao
[09:04:00] <FromDiscord> <Equinox> tbf there are about 50 different ways to write C++ code
[09:04:04] <FromDiscord> <Elegantbeef> Perhaps that's a good idea
[09:06:21] <nrds> <06Prestige99> Elegantbeef I'm glad you find these bugs fun :P
[09:06:47] <FromDiscord> <Elegantbeef> Lol, it's an odd one
[09:08:32] <FromDiscord> <Elegantbeef> It's another `==` issue i think
[09:08:53] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=
[09:09:09] <FromDiscord> <Elegantbeef> Compiler errors generally give answers
[09:09:17] <FromDiscord> <Elegantbeef> Yea it's another pointer issue prestige
[09:09:52] <FromDiscord> <Bubblie> sent a code paste, see https://play.nim-lang.org/#ix=
[09:10:05] <FromDiscord> <Bubblie> so window != nil
[09:10:15] <FromDiscord> <Bubblie> the assert is failing
[09:11:00] <nrds> <06Prestige99> nice beef
[09:11:15] <FromDiscord> <Elegantbeef> Who knew pointers comparison sucks
[09:22:49] <FromDiscord> <Bubblie> The hell is going on with NimGL this is odd
[09:24:45] <FromDiscord> <Elegantbeef> PEBKAC
[09:25:30] <FromDiscord> <Bubblie> LOL
[09:26:27] <FromDiscord> <Bubblie> Usually when you create a glfw window its glfwCreateWindow(width,height, null null) but here its just the width and height
[09:26:49] <FromDiscord> <Elegantbeef> https://nimgl.dev/docs/glfw.html#glfwCreateWindow%2Cint32%2Cint32%2Ccstring%2CGLFWMonitor%2CGLFWWindow%2Cbool the rest are optional
[09:27:28] <FromDiscord> <Bubblie> Weird… maybe im calling it in the wrong place
[09:27:33] <FromDiscord> <Bubblie> Ill figure it out in the morning
[09:28:11] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T2Y
[09:29:07] <FromDiscord> <Equinox> I don't mean to interrupt but do you guys know of any nim tui libraries like tui in rust?
[09:29:14] <FromDiscord> <Elegantbeef> illwill?
[09:30:44] *** Quits: ltriant (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[09:31:37] <FromDiscord> <Bubblie> Whats tui,
[09:31:40] <FromDiscord> <Bubblie> (edit) "tui," => "tui?"
[09:31:48] <FromDiscord> <Elegantbeef> Text user interface
[09:32:07] <FromDiscord> <Bubblie> Oh okay
[09:32:59] <FromDiscord> <Equinox> In reply to @Bubblie "Oh okay": basically just an app that runs in the terminal
[09:33:33] <FromDiscord> <Equinox> I've been needing a music player for a while now and I thought maybe that would be a good project for nim
[09:33:44] <FromDiscord> <Equinox> otherwise I was just gonna go back to rust
[09:34:57] <FromDiscord> <demotomohiro> In reply to @Bubblie "Usually when you create": Example code in nimgl repo doesn't work for you?
[10:36:15] <FromDiscord> <Phil> Alright, so I have this generic proc to generate procs to handle specific HTTP requests for creating entries in a database
[10:36:40] <FromDiscord> <Phil> I've got a solution, but I don't comprehend why it works
[10:39:12] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T39
[10:39:44] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3T39" => "https://paste.rs/xRu"
[10:40:14] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3T3c" => "https://play.nim-lang.org/#ix=3T3b"
[10:40:54] <FromDiscord> <Elegantbeef> You override the GCsafe checking
[10:41:14] <FromDiscord> <Phil> What I don't get is why I have to for a proc that only fires select statements to a database
[10:41:27] <FromDiscord> <Phil> None of this does actual data manipulation outside of the application
[10:41:39] <FromDiscord> <Phil> So that proc should be absolutely gc-safe
[10:41:43] <FromDiscord> <Elegantbeef> It does something that isnt gcsafe
[10:42:43] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#effect-system-gc-safety-effect
[10:42:51] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:47:26] <FromDiscord> <Phil> Figured it out
[10:47:44] <FromDiscord> <Phil> It wasn't necessarily that the proc that I passed in there was actually unsafe
[10:47:56] <FromDiscord> <Phil> It was that the compiler couldn't guarantee that `getSerializedArticleData`  would always be safe
[10:48:50] <FromDiscord> <Phil> Because the the annotation `proc(entryId: int64): M` could be unsafe and apparently the compiler doesn't infer that from the proc you pass in (?)
[10:51:10] <FromDiscord> <Elegantbeef> You can force the proc to be `GcSafe`
[10:51:24] <FromDiscord> <Elegantbeef> I mean the passed in one
[10:51:33] <FromDiscord> <Phil> sent a code paste, see https://paste.rs/Xrf
[10:51:38] *** Joins: PMunch (~PMunch@user/pmunch)
[10:51:57] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3T3i" => "https://play.nim-lang.org/#ix=3T3h"
[10:54:21] <FromDiscord> <Phil> In reply to @Elegantbeef "You can force the": You mean with cast-gcsafe to `getSerializedArticleData` ? Or just by annotating `getSerializedArticleData` with the gcsafe pragma as above?↵What I found interesting was that annotating `getDiaryEntryById` (which was the proc I passed in as `getSerializedArticleData`) with the gcsafe pragma did not suffice, the parameter itself had to be annotated or it refused to compile
[10:54:26] <FromDiscord> <Phil> (edit) "above?↵What" => "above?↵↵What"
[10:55:15] <FromDiscord> <Elegantbeef> It sounded like the issue with gcsafety was a passed in procedure to another proceedure
[10:55:17] <FromDiscord> <Elegantbeef> Am i wrong?
[10:56:24] <FromDiscord> <Phil> I think? I don't really understand the error message I get when it isn't gcsafe annotated ( `Error: 'anonymousIter' is not GC-safe as it performs an indirect call via 'getSerializedArticleData'`), like, is it complaining that the proc might be unsafe? Is the act of calling that proc itself unsafe? I don't get the error
[10:57:35] <FromDiscord> <Elegantbeef> What does `getSerializedArticleData` do?
[10:57:39] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3T3k
[10:59:25] <FromDiscord> <Phil> In reply to @Elegantbeef "What does `getSerializedArticleData` do?": Fetch an entry from the database and all its related entries that I want, combine all of these objects into one "serialized" object that contains all the data I want(in `jsonyResponse` that object gets converted to a json string)..
[10:59:43] <FromDiscord> <Phil> None of these things modify the database
[10:59:50] <FromDiscord> <Elegantbeef> Does it use any global variables?
[11:00:09] <FromDiscord> <Elegantbeef> If so are any of them GC'd?
[11:00:12] <FromDiscord> <Phil> A connection pool, which is a global seq of DbConn objects with a lock associated
[11:00:29] <FromDiscord> <Elegantbeef> Well there you go
[11:00:31] <FromDiscord> <Phil> And the procs that make use of that have a notorious amount of cast gcsafe
[11:00:54] <FromDiscord> <Elegantbeef> You seemed to have miss something then
[11:01:46] <FromDiscord> <Elegantbeef> Wish the gcsafe messages were as informative as the func messages
[11:01:48] <FromDiscord> <Phil> But if that were the case, why would it all compile solely because I put `{.gcsafe.}`  into the parameter-type-defintion of `getSerializedArticleData` ?↵That doesn't change the proc that I pass in afaik
[11:02:33] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3T3l
[11:02:57] <FromDiscord> <Elegantbeef> Without `gcsafe` `proc (){.locks: 0.}`
[11:03:02] <FromDiscord> <Phil> sent a code paste, see https://paste.rs/73m
[11:03:04] <FromDiscord> <Elegantbeef> You're forcing it to be gcsafe
[11:03:40] <FromDiscord> <Phil> But that only adds a check to the proc I pass in as `getSerializedArticleData` doesn't it? It doesn't manipulate the proc itself ?↵Or am I missunderstanding something there?
[11:03:55] <FromDiscord> <Phil> (edit) "it?" => "it (and blocks compilation if that check is violated)?"
[11:03:59] <FromDiscord> <Elegantbeef> `gcSafe` is just a type safety feature it doesnt change anything
[11:04:23] <FromDiscord> <Elegantbeef> > The gcsafe annotation can be used to mark a proc to be gcsafe, otherwise this property is inferred by the compiler
[11:04:47] <FromDiscord> <Elegantbeef> The pragma overrides the GC safety checker and just says "yep it's safe"
[11:05:35] <FromDiscord> <Elegantbeef> It works opposite as you'd expect given the other annotations
[11:05:51] <FromDiscord> <Elegantbeef> You'd expect it'd error and say "Hey this isnt safe due to X", but nope it just forces it
[11:06:35] <FromDiscord> <Phil> Wait so the compiler itself goes over this and says "this isn't safe".↵If I go {.gcsafe.} I disable that check and tell the compiler "no need to check, it's safe"↵What does `{.cast(gcsafe).}` then do different? I thought the job of telling the compiler "No need to check, I know this is safe" was for that cast thing?
[11:06:48] <FromDiscord> <Elegantbeef> It does the same thing but just with a block
[11:07:55] <FromDiscord> <Elegantbeef> Personally i'd prefer `gcSafe` to do just error where the unsafe part was, and then use the cast to override it
[11:08:26] <FromDiscord> <Phil> Hmmm then  you're right,I had a fundamental missunderstanding there on how that pragma works.↵That leaves me puzzled in another case which is the one that made me assume that {.gcsafe.} told the compiler "This proc should definitely be gcsafe, check that for me please"
[11:09:04] <FromDiscord> <Elegantbeef> Nope it's not the same as  `noSideEffect` or `raises: []`
[11:09:09] <FromDiscord> <Elegantbeef> Which is weird
[11:10:51] <FromDiscord> <Phil> I'm currently checking if all the code I wrote originally with copious amounts of cast gcsafe compiles if I take that pragma way
[11:10:53] <FromDiscord> <Phil> (edit) "way" => "away"
[11:10:55] <FromDiscord> <Phil> And it does
[11:11:02] <FromDiscord> <Phil> And now I feel like my life is crumbling down around me
[11:11:03] <FromDiscord> <Phil> Wtf
[11:11:07] <FromDiscord> <Elegantbeef> Lol
[11:11:23] <FromDiscord> <Elegantbeef> Reading the docs is your weakness eh?
[11:11:34] <FromDiscord> <Phil> WAIT
[11:11:48] <FromDiscord> <Elegantbeef> Waiting
[11:11:56] <FromDiscord> <Phil> I do all my stuff in a custom template that grabs me a connection from the pool and opens a transaction
[11:12:16] <FromDiscord> <Phil> I'm sure that still has cast gcsafe or something and thus invalidates the extra cast-gcsafe-stuff I have on the delete/create operations
[11:13:05] <FromDiscord> <Phil> HAH! Yes that was the case
[11:13:07] <FromDiscord> <Elegantbeef> Perhaps it does
[11:14:02] <FromDiscord> <Elegantbeef> Your homework for tomorrow will be to read the manual, i'll then have a small quiz for you 😛
[11:20:32] <pch> great i fixed the edge function just to find out ive got something wrong with edge bias
[11:20:38] <pch> well, at least there's no more weird blocks
[11:20:59] <FromDiscord> <Phil> sent a long message, see http://ix.io/3T3o
[11:21:02] <pch> decided to be a cheeky shit and detect winding order on the fly
[11:21:43] <pch> gcsafe means a few thing
[11:21:45] <pch> things
[11:21:53] <pch> 1 it's safe for gc
[11:21:56] <pch> 2 it's safe from gc
[11:22:07] <pch> i will not elaborate
[11:22:09] <FromDiscord> <Elegantbeef> Their issue is mainly just the annotation part
[11:22:19] <FromDiscord> <Phil> Though I guess my main problem is that it doesn't explicitly state what the gcsafe pragma itself does (if it's just a hint for the compiler that a check must have a specific outcome or if it actually circumvents checks by the compiler)
[11:22:24] <FromDiscord> <Elegantbeef> It also means it's threadsafe
[11:22:41] <FromDiscord> <Elegantbeef> It forces it
[11:22:43] <FromDiscord> <Elegantbeef> And it says so
[11:23:04] <FromDiscord> <Elegantbeef> > mark a proc to be gcsafe, otherwise this property is inferred
[11:24:22] <FromDiscord> <Phil> Yeah but I don't know if "marks it to be safe" means "compiler, don't check this proc! I, the human, have asserted this is safe, you do not need to check" or if it means "compiler, check this proc! I, the human, have asserted that this should be safe, if your check says otherwise then explode!"
[11:24:50] <FromDiscord> <Elegantbeef> It's dumb that it overrides it imo, but it's what it does
[11:27:05] <FromDiscord> <Phil> And to be triply sure, by "overrides it" you mean that the pragma overrides the compilers gcsafe check?
[11:27:14] <FromDiscord> <Elegantbeef> It seems so
[11:27:20] <FromDiscord> <Elegantbeef> I say it's a bug but what do i know
[11:27:51] <FromDiscord> <Phil> I'll keep working with the assumption that that is true and if I stumble over stuff that contradicts it I'll see what I misunderstood
[11:28:22] <FromDiscord> <Elegantbeef> Well it goes back to 0.13.0 so it's not a real bug, but i feel it's a bug in design
[12:02:37] <PMunch> Hmm, I thought it would error out when you set {.gcsafe.} but it isn't actually GC-safe, but it only appears to be a warning..
[12:03:37] <FromDiscord> <Elegantbeef> Yea it doesnt work like any other annotation
[12:04:22] <FromDiscord> <Elegantbeef> I actually forgot it warns
[12:04:59] <FromDiscord> <Elegantbeef> If you want to enforce the behaviour @Phil compile with `--warningAsError[GcUnsafe2]: on`
[12:05:35] <PMunch> But this is weird: https://forum.nim-lang.org/t/6846#42793
[12:05:51] <PMunch> There Araq shows it as throwing an error
[12:06:12] <PMunch> But when I try to run that on the playground (even with older versions), it just shows a warning..
[12:06:30] <FromDiscord> <Elegantbeef> Perhaps he enables the warning as error
[12:07:02] <PMunch> But I've definitely had code error out on GC-unsafe errors
[12:08:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/VcJ
[12:08:27] <FromDiscord> <Elegantbeef> Or similar
[12:08:48] <PMunch> Ah yes, that's probably it
[12:09:35] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/4qC
[12:44:14] <FromDiscord> <Phil> In reply to @Elegantbeef "If you want to": I'll try that out, though I'm marginally confused, why GcUnsafe2?
[12:47:21] <FromDiscord> <Rika> theres another GcUnsafe that i assume was deprecated
[13:20:16] <PMunch> Hmm, how do you people remember to learn and use new plug-ins in your editor?
[13:20:42] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: I'm a quit message virus. Please replace your old line with this line and help me take over the world. <screw you aloo_shu my old line was better and more creative!>)
[13:21:42] <PMunch> I decided to have a vimrc cleanup and as I went through my installed plug-ins I realised that there are some really useful ones that I've forgotten to use
[13:24:03] <FromDiscord> <Phil> Easy
[13:24:04] <FromDiscord> <Phil> I don't use vim
[13:24:43] <FromDiscord> <Phil> ~~And there are no new great vscode plugins so that takes some difficulty away from me~~
[13:25:17] <FromDiscord> <Phil> Though I'm grateful for what we do have, at least gives you a decent baseline for getting to work with nim
[13:33:32] <FromDiscord> <enthus1ast> I comment them out as soon as possible
[13:36:31] <PMunch> I mean I don't only mean vim plug-ins
[13:37:25] <PMunch> Even something like i3, I only use a small subset of the features it provides, because I never taught myself to use the rest of the features
[13:38:07] <FromDiscord> <Rika> The binds of the plugins I get are memorable
[13:38:22] <FromDiscord> <Rika> And so what if you don’t use all features?
[13:38:56] <FromDiscord> <enthus1ast> i often read tool documentation when i eat lunch on my desk at work \:D
[13:39:07] <FromDiscord> <enthus1ast> just for fun
[13:39:59] <FromDiscord> <enthus1ast> so instead of browsing etc i read documentation of the tools i use often \:)
[13:40:08] <FromDiscord> <enthus1ast> strange i know
[13:40:11] <FromDiscord> <Rika> Sounds like me
[13:40:24] <FromDiscord> <Rika> Except it’s docs for things I’m planning on using to make things
[13:43:28] <FromDiscord> <Phil> In that case I'm likely not a good point of comparison, I act if I have a need for something or notice something neat.↵Like, I have gnome, I'm not aware of even 80% of all the things I can configure of it.
[13:45:11] <FromDiscord> <enthus1ast> import randomGnomeRant
[13:49:04] <PMunch> Well of course, there's nothing wrong with not using 100% of the features you have available
[13:49:29] <PMunch> But take me for example, I use Vim and Git a lot, which is fine, I'm in the terminal and switching between the two is easy
[13:50:42] <PMunch> But apparently I had Fugitive installed, and after reading through the bullet list of features there's a bunch of stuff there I have definitely wanted to have in the past
[13:57:39] <FromDiscord> <Rika> Okay
[14:48:33] <PMunch> Maybe I need to program myself a clippy :P
[15:01:24] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[15:05:50] *** Joins: xet7 (~xet7@user/xet7)
[15:09:55] <FromDiscord> <Phil> In reply to @enthus1ast "import randomGnomeRant": That'll be a very small rant
[15:10:10] <FromDiscord> <Phil> (edit) "In reply to @enthus1ast "import randomGnomeRant": That'll be a very small rant ... " 03added "😛"
[15:11:37] <FromDiscord> <hmmm> broskis how do I auto create a range from something.len() so that I can comily check if something else is "in" that range
[15:12:29] <FromDiscord> <hmmm> something like python xrange maybe
[15:12:39] <FromDiscord> <Phil> `x in 0..bla.len()`
[15:12:47] <FromDiscord> <hmmm> perfect
[15:18:57] <FromDiscord> <Generic> ranges are inclusive, so most of the time you probably want 0..<bla.len
[15:19:20] <FromDiscord> <Generic> or `low(bla)..high(bla)`, which works for every container
[15:19:26] <FromDiscord> <Generic> which is indexable
[15:35:04] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[15:41:55] <FromDiscord> <ajusa> In reply to @Generic "or `low(bla)..high(bla)`, which works": And also for stuff like ints
[15:51:23] <FromDiscord> <wsantos> I'm playing with macros and I need a macro that creates a macro, now my Problem is how to escape a `quote do` inside `quote do`, how can I solve for this ?
[15:51:24] <FromDiscord> <wsantos>  https://media.discordapp.net/attachments/371759389889003532/955440993304469514/unknown.png
[15:51:51] <FromDiscord> <wsantos> This macro works, but I'm not sure how to do this inside another macro.
[15:55:32] <FromDiscord> <Rika> A macro creating another macro doesn’t really sound like good design
[15:55:56] <FromDiscord> <Rika> Might be better if you can expound for us to think of a better design?
[15:57:16] <FromDiscord> <wsantos> This is not a good design for sure, but I need this so I can "simulate" kwargs on all object function
[15:57:38] <FromDiscord> <wsantos> (edit) "function" => "functions"
[15:58:51] <FromDiscord> <Rika> I can imagine it not working though since you’re generating code that’s supposed to process in the same pass as the current pass
[15:58:58] <FromDiscord> <wsantos> sent a code paste, see https://paste.rs/Pk6
[16:00:18] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[16:00:24] <FromDiscord> <wsantos> Yeah I'll play around with it, but I really got curious if anyone did a macro that creates a macro with quote do, we should have a way to escape right ?
[16:01:53] <FromDiscord> <wsantos> Or do you know if I can convert this pragma to be a function pragma and make this work ? at the end of the day, this project is more a way to touch on every part of nim-lang so I can learn it
[16:02:25] <FromDiscord> <Rika> You could probably make it a pragma yes, it would likely be better as well
[16:02:48] <FromDiscord> <Rika> A function pragma receives the definition of the function and should return the modified definition
[16:03:50] <FromDiscord> <wsantos> I understand what you are saying but I don't see how to implement it, can I still call the original ? follow the idea I have in the example ?
[16:04:04] *** Joins: xet7 (~xet7@user/xet7)
[16:06:34] <FromDiscord> <Rika> You can probably create two definitions, it’s just a “should do this”
[16:07:10] <FromDiscord> <Rika> It’s like calling the macro with the function definition, you can ultimately return anything, even nothing
[16:11:04] <FromDiscord> <wsantos> That is what I did in the example above, but now I need this to work with a lot of functions I don't want to keep coping past, hence the macro inside a macro
[16:12:32] <FromDiscord> <Rika> If you can make your macro work with multiple function definitions you could just call the macro with all the function definitions
[16:13:01] <FromDiscord> <Rika> theMacro: ...indent and newline... All the function definitions
[16:13:06] <FromDiscord> <Rika> Something like that
[16:19:40] <FromDiscord> <wsantos> I'll play around with it, thank you
[16:22:40] <FromDiscord> <Rika> For those wondering why I don’t suggest push and pop, it’s that I don’t know if they work with user supplied macros (afaik they do not) and they’re pretty much big hacks anyway
[16:24:33] <FromDiscord> <wsantos> what is push and pop 🤔  ?
[16:27:26] <FromDiscord> <Rika> https://nim-lang.org/docs/manual.html#pragmas-push-and-pop-pragmas
[16:30:35] <FromDiscord> <Rika> It’s always helpful reading the manual from time to time
[16:31:57] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (Remote host closed the connection)
[16:32:06] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[16:36:30] *** Joins: rockcavera (~rc@192.12.113.72)
[16:36:30] *** Quits: rockcavera (~rc@192.12.113.72) (Changing host)
[16:36:30] *** Joins: rockcavera (~rc@user/rockcavera)
[16:38:07] <FromDiscord> <wsantos> 100%, thank you
[17:08:27] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Quit: WeeChat 3.4)
[17:11:45] <FromDiscord> <mratsim> In reply to @Rika "For those wondering why": but checks:off contaminates the whole project
[17:12:15] <FromDiscord> <mratsim> we had a surprise where checks where turned off where we expected them
[17:13:18] <FromDiscord> <Rika> Really huh
[17:21:20] <FromDiscord> <Phil> Naming question, what do you call a proc that returns another proc? "FactoryProc"?
[17:24:52] <FromDiscord> <Rika> No
[17:24:55] <FromDiscord> <Rika> That’s Java
[17:25:02] <FromDiscord> <Rika> It’s just a proc
[17:31:12] <FromDiscord> <Phil> God damn, not even JS has a convention for functions that return functions, I dislike not having an "official" way to mark that sort of behaviour within a procName
[17:31:34] <FromDiscord> <Phil> (edit) "God damn, not even JS has a ... convention" 03added "naming"
[17:40:43] <FromDiscord> <mratsim> In reply to @Isofruit "Naming question, what do": HOF?
[17:41:17] <FromDiscord> <Phil> Do people use HOF as an acronym inside function names? I was under the impression in general acronyms were highly discouraged
[17:41:24] <FromDiscord> <mratsim> ah no not exactly, HOF have a proc input.
[17:41:24] *** Joins: arkurious (~arkurious@user/arkurious)
[17:41:51] <FromDiscord> <mratsim> HOF is higher_order_function, no one sane (discounting Java) will use that in a function name.
[17:43:54] <FromDiscord> <Rika> im not sure why you chose nim given that your views seem to align best with java
[17:46:33] <FromDiscord> <Phil> This is more a matter of work-java-habits bleeding over than anything else, since that's the stuff I know.↵Either way, the stuff I'm working on is mainly just making things generic in order to save myself the hassle of typing out the same things 15 times.↵I'm pretty sure that's not a "java" specific thing
[17:46:54] <FromDiscord> <konsumlamm> higher order functions are functions that either take a function as argument or return one
[17:47:07] <FromDiscord> <konsumlamm> so calling it HOF would be correct
[17:47:41] <FromDiscord> <konsumlamm> not that that's how you should name your function, but that's how it's called
[17:48:06] <FromDiscord> <konsumlamm> i suggest naming it something that says what it does, rather than what its type is
[17:48:49] <FromDiscord> <Phil> If you're familiar with web development, it returns a controller proc, a proc that receives a HTTP request and returns a response
[17:49:15] <FromDiscord> <Phil> So a controller-creating-proc, or handler-creating-proc
[17:51:04] <FromDiscord> <mratsim> In reply to @Isofruit "If you're familiar with": generic name is handler.
[17:51:24] <FromDiscord> <mratsim> but then your repo becomes littered with "tools", "utils" and "helpers".
[17:52:07] <FromDiscord> <Rika> createNNNNHandler?
[17:52:17] <FromDiscord> <Rika> verbs not nouns for proc names
[17:52:34] <FromDiscord> <Rika> wheres that hammer article thing
[17:53:36] <FromDiscord> <Rika> https://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html i think this is it
[17:53:47] <FromDiscord> <Rika> good read
[17:55:13] <FromDiscord> <Phil> sent a long message, see https://paste.rs/gQC
[17:55:55] <FromDiscord> <Rika> i'm under the impression that that is the chaos itself, so you do you ig
[17:55:58] <FromDiscord> <Phil> In reply to @Rika "createNNNNHandler?": Actually, right, think more verb and it makes more sense
[17:56:19] <FromDiscord> <Phil> In reply to @Rika "i'm under the impression": I've seen the alternative, imo that is way worse
[17:56:52] <FromDiscord> <Phil> That alternative being one folder for all modules, one folder for all controllers, one folder for all services etc.
[17:56:54] <FromDiscord> <Rika> you do you then really
[17:57:05] <FromDiscord> <Phil> (edit) "modules," => "modeols,"
[17:57:11] <FromDiscord> <Phil> (edit) "modeols," => "models,"
[17:59:54] <FromDiscord> <Daan Breur> So I found the issue that causes the memory leaks, It is that we are reading the file into an array/sequence and splitting that across the threads.↵Now what is a better way of doing this?
[18:04:23] <FromDiscord> <wsantos> Is there a place in the manual with a list where pragma can be used ? and what it could affect ?
[18:05:30] <FromDiscord> <mratsim> In reply to @Daan Breur "So I found the": why use multithreading for reading a file? The bottleneck will be IO and a single CPU is enough to use all IO bandwidth
[18:06:40] <FromDiscord> <Phil> I am fascinated that apparently you can somehow read the same file with multiple threads in a way that they work together
[18:07:23] <FromDiscord> <Phil> No wait, the reading is done single-thread at first and the seq that results out of this is then split across threads
[18:07:52] <FromDiscord> <Phil> Am I understanding that right?
[18:07:55] <FromDiscord> <Daan Breur> Thats what we are doing now, but that results in memoryleaks.
[18:08:04] <FromDiscord> <Phil> Why multi-thread at all?
[18:08:13] <FromDiscord> <mratsim> In reply to @Isofruit "I am fascinated that": It only work if they read independent part of the file or the processing is heavy and non-sequential. Otherwise the synchronization overhead is not worth it
[18:08:15] <FromDiscord> <Daan Breur> Read it singlethreaded into a seq. Then pass it onto the threads
[18:08:28] <FromDiscord> <Rika> why is what theyre asking
[18:08:36] <FromDiscord> <Rika> there doesnt seem to be a reason to do that
[18:09:28] <FromDiscord> <mratsim> In reply to @Daan Breur "Read it singlethreaded into": if you are using a builtin seq, you need to use --gc:arc
[18:09:49] <FromDiscord> <Daan Breur> The code processes whats in the file. Thats why multithreaded.
[18:09:57] <FromDiscord> <mratsim> otherwise open the file with memory-map and pass the ptr UncheckedArray to other threads.
[18:10:22] <FromDiscord> <d4rckh> we are writing a web fuzzer used to identify security vulnerabilities in websites
[18:10:27] <FromDiscord> <mratsim> In reply to @Daan Breur "The code processes whats": but what kind of process is it? s it heavy enough to be multithreaded?
[18:10:34] <FromDiscord> <Daan Breur> Yes it is
[18:10:44] <FromDiscord> <mratsim> (edit) "s" => "Is"
[18:11:27] <FromDiscord> <Phil> Hmm, so under the assumption you already crossed out any chance of there being a different algorithm that does the same thing faster
[18:12:08] <FromDiscord> <d4rckh> it just takes words from a file and makes a HTTP request with it
[18:12:17] <FromDiscord> <Daan Breur> And some other stuff
[18:12:19] <FromDiscord> <d4rckh> usually these wordlists are very large and it takes a long time
[18:12:40] <FromDiscord> <Phil> Why does it take very long? Do you do the HTTP calls async or do you wait for a call to finish before you start the next one?
[18:12:43] <FromDiscord> <Daan Breur> In reply to @mratsim "if you are using": This only takes it so far if the files can be a few thousand lines
[18:13:50] <FromDiscord> <d4rckh> In reply to @Isofruit "Why does it take": we wait for a call to finish before we start the next one
[18:14:25] <FromDiscord> <Phil> First recommendation would definitely then be to make the calls async rather than going multi-threading because you're wasting a lot of time waiting for a call to finish
[18:14:47] <FromDiscord> <Phil> Which would mean working with Futures, which I haven't done in nim yet, mratsim have you?
[18:14:52] <ehmry> for the os its async all the way down, even with mmap
[18:18:45] <FromDiscord> <Phil> In reply to @ehmry "for the os its": I think I'm stuck putting that one into context, was that more a general hint that on the systems level a lot of code works in an async manner or was that hinting at me that I'm misunderstanding something?
[18:20:19] <ehmry> i just mean that blocking reads are always an illusion, and if the application can do it async, then it meshes with what the OS has to do internally
[18:21:23] <ehmry> well if you read something that is cached outside your address space, then its a simple blocking operation, but otherwise there has to be some async going on
[18:22:22] <FromDiscord> <Phil> Ahhh check
[18:27:54] <FromDiscord> <mratsim> In reply to @d4rckh "it just takes words": use async, not multithreading
[18:28:36] <FromDiscord> <mratsim> In reply to @Daan Breur "This only takes it": It's not about speed, it's about memory safety and memory leaks
[18:29:09] <FromDiscord> <mratsim> The default GC is thread-local, so if you want to share a seq between threads you need a custom type or another GC like boehm or arc that is not thread-local
[18:29:15] <FromDiscord> <Phil> IIRC multi threading and keeping memory safety while doing so is pretty much one of the hardest things you can do period.
[18:29:20] <FromDiscord> <Daan Breur> In reply to @mratsim "It's not about speed,": Im not talking about that, that flag does work. Kinda. With thousand lines it still crashes due to memoryleaks
[18:30:18] <FromDiscord> <mratsim> In reply to @Daan Breur "Im not talking about": in any case, if you are trying to do multiple http requests, you are using the wrong architecture. Use async, and read up on "C10k problem"
[18:30:58] <FromDiscord> <Phil> In reply to @Rika "https://steve-yegge.blogspot.com/2006/03/execution-": Thanks for that link btw, I actually hadn't realized how nouns were creeping more and more into my proc names
[18:31:18] <FromDiscord> <mratsim> We can handle thousands of P2P streams/queries/RPC/REST on a single-thread without any leaks and using less memory than Go/Rust/Java in our Ethereum client.
[18:31:33] <FromDiscord> <mratsim> In reply to @Isofruit "Thanks for that link": I love that essay
[18:34:12] <FromDiscord> <Phil> In reply to @mratsim "I love that essay": It's striking a pretty true core. It's a smidge of a long read for the core idea that java naming conventions due to forced OOP almost always go "go noun or go home" where verbs are a better way to express actions
[18:34:54] <FromDiscord> <mratsim> In reply to @d4rckh "it just takes words": Also important read: https://ep2019.europython.eu/media/conference/slides/KNhQYeQ-downloading-a-billion-files-in-python.pdf
[18:34:56] <FromDiscord> <Phil> But I only read the first.... 20% of it so far, so chances are there's more I havent reached yet (judging by the placement of my scrollbar)
[18:35:35] <FromDiscord> <mratsim>  https://media.discordapp.net/attachments/371759389889003532/955482311317655632/unknown.png
[18:38:28] <FromDiscord> <Phil> In reply to @mratsim "": A classic, the first time I stumbled over the WTF effect of "There's more threads, why does it go slower?" was when I watched a talk about when multi-threading is sensible for.... C++ I think? I'd have to dig the video up again.
[18:40:18] <FromDiscord> <Phil> No wait, it was about how your algorithm doesn't matter if it fits into L1 cache it's fast
[18:41:27] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:46:23] <FromDiscord> <auxym> wish nim had an easier method than channels and copies for inter-thread communication, like a thread-safe multi-consumer queue. guess arc might make that possible now?
[18:50:55] <FromDiscord> <Rika> isnt there a third party mpmc queue being worked on
[18:51:08] <FromDiscord> <Rika> https://github.com/nim-works/loony
[18:51:31] <FromDiscord> <Jakraes> Quick question, if I add an object to a seq and change it by referring to the seq, does it change the original object?
[18:51:35] <FromDiscord> <Jakraes> Kinda like this
[18:52:10] <FromDiscord> <Rika> only if its a ref/ptr?
[18:52:54] <FromDiscord> <Jakraes> sent a code paste, see https://play.nim-lang.org/#ix=3T5r
[18:53:03] <FromDiscord> <Jakraes> Would that change the object itself?
[18:53:05] <FromDiscord> <Rika> definition of `Object` required
[18:53:11] <FromDiscord> <Rika> if its not a ref then it will not change
[18:54:00] <FromDiscord> <auxym> In reply to @Rika "https://github.com/nim-works/loony": oh yeah forgot about that, pretty cool. ref-only is a reasonable constraint. orc-compatibility would be cool though
[18:54:06] <FromDiscord> <Jakraes> Gotcha, how can I make a ref out of it?
[18:54:25] <FromDiscord> <Rika> `ref object` instead of only `object`
[18:54:46] <FromDiscord> <Jakraes> Should I do that when I add it to the seq?
[18:54:53] <FromDiscord> <Jakraes> Like seq.add(ref object)?
[18:55:01] <FromDiscord> <mratsim> In reply to @auxym "oh yeah forgot about": if it works with arc it works with orc
[18:55:11] <FromDiscord> <Rika> no what
[18:55:22] <FromDiscord> <Jakraes> I'm sorry I'm a lil bit new to this
[18:55:23] <FromDiscord> <mratsim> In reply to @auxym "wish nim had an": https://github.com/nim-lang/threading/blob/master/threading/channels.nim
[18:55:23] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=
[18:55:49] <FromDiscord> <auxym> In reply to @mratsim "if it works with": https://github.com/nim-works/loony/issues/4 apparently there's a bug in orc?
[18:56:39] <FromDiscord> <auxym> In reply to @mratsim "https://github.com/nim-lang/threading/blob/master/t": neat, is this experimental?
[18:56:59] <FromDiscord> <mratsim> In reply to @auxym "https://github.com/nim-works/loony/issues/4 apparen": curious, but loony is lock-free so it's very possible that there is a double-free going on
[18:57:27] <FromDiscord> <mratsim> In reply to @auxym "neat, is this experimental?": no. Those channels were used in Weave during the first iteration and are very solid and efficient despite using locks.
[18:57:45] <FromDiscord> <mratsim> I mean, it could handle billions of Fibonacci task thefts
[18:58:03] <FromDiscord> <mratsim> across 36 threads in a couple hundres ms
[18:58:10] <FromDiscord> <mratsim> (edit) "ms" => "µs"
[18:58:17] <FromDiscord> <mratsim> (edit) "hundres" => "hundred"
[19:07:09] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:23:57] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[19:33:24] *** Joins: tiorock (~rc@192.12.113.72)
[19:33:24] *** Quits: tiorock (~rc@192.12.113.72) (Changing host)
[19:33:24] *** Joins: tiorock (~rc@user/rockcavera)
[19:33:24] *** rockcavera is now known as Guest5209
[19:33:24] *** Quits: Guest5209 (~rc@user/rockcavera) (Killed (osmium.libera.chat (Nickname regained by services)))
[19:33:24] *** tiorock is now known as rockcavera
[19:37:27] *** Joins: zgasma (~zgasma@2601:600:c87f:8b1a::b)
[20:02:22] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[20:02:36] *** Quits: zgasma (~zgasma@2601:600:c87f:8b1a::b) (Quit: nyaa~)
[20:03:04] *** Joins: zgasma (~m-bosrex@45.76.26.43)
[20:17:05] <FromDiscord> <planetis> it's creator complain before that there are thread safety issues
[20:17:32] <FromDiscord> <planetis> and blamed it on isolated which i think it's not true
[20:24:05] <FromDiscord> <System64 ~ Flandre Scarlet> Hi, is there fixed point types on Nim?
[20:24:46] <FromDiscord> <Rika> third party
[20:25:02] *** Joins: vicfred (~vicfred@user/vicfred)
[20:25:29] <FromDiscord> <System64 ~ Flandre Scarlet> ah alright↵And can I use this library flawlessly like floats?
[20:25:53] <FromDiscord> <Rika> depends on the librayr
[20:25:55] <FromDiscord> <Rika> (edit) "librayr" => "library"
[20:26:22] <FromDiscord> <planetis> what's the use case?
[20:27:12] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @planetis "what's the use case?": DSP
[20:27:19] <FromDiscord> <System64 ~ Flandre Scarlet> I'm making an FM Synthesizer
[20:27:47] <FromDiscord> <planetis> i was porting a rust library but haven't finished all of it
[20:28:01] <FromDiscord> <auxym> on a MCU that doesn't have fpu? otherwise just use floats tbh
[20:28:12] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @auxym "on a MCU that": It's as fast?
[20:28:33] <FromDiscord> <planetis> https://github.com/planetis-m/dumpster/blob/master/fixed_point.nim
[20:28:46] <FromDiscord> <planetis> pretty sure it's slow
[20:28:47] <FromDiscord> <auxym> probably not, but on a modern cpu probably plenty fast enough
[20:28:58] <FromDiscord> <auxym> @System64 ~ Flandre Scarlet
[20:29:03] <FromDiscord> <planetis> if you can use floats
[20:29:20] <FromDiscord> <System64 ~ Flandre Scarlet> so I should go on floats I guess
[20:29:34] <FromDiscord> <auxym> yeah. use float32
[20:30:13] <FromDiscord> <System64 ~ Flandre Scarlet> alright
[20:31:13] <FromDiscord> <auxym> if you want to try FXP and do a few quick benchmarks vs floats this is a good resource: https://vanhunteradams.com/FixedPoint/FixedPoint.html
[20:46:16] <FromDiscord> <treeform> In reply to @planetis "https://github.com/planetis-m/dumpster/blob/master/": wow thats pretty cool, another reason why I have used fixed point in the past was to provide absolute determinism between code generated by different compilers (gcc/vcc).
[20:46:43] <FromDiscord> <treeform> Your solution is very cool allow you to choose the base type and the fractional part.
[20:47:10] <FromDiscord> <treeform> do you plan to add sqrt and sin/cos?
[20:54:06] <FromDiscord> <System64 ~ Flandre Scarlet> Creating a fixed point thing gives me headaches lol
[21:38:29] <NimEventer> New thread by Mardiyah: The macro being as part of recursive function body multiply, see https://forum.nim-lang.org/t/9026
[21:39:49] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[21:46:50] <FromDiscord> <Require Support> `char ` = `ptr cstring` ?  c to nim
[21:51:01] <FromDiscord> <demotomohiro> `char` = `cstring`
[21:53:26] <FromDiscord> <planetis> @treeform no, at first I planned to use it but then I decided against it and it fell through
[21:53:36] <FromDiscord> <planetis> but feel free to borrow it and make a package
[22:02:14] <FromDiscord> <planetis> note there is a nimble package that allows for more options like operation between different representations of fixed point
[22:03:50] <FromDiscord> <planetis> hmm can't find it on nimble, but I found https://gitlab.com/lbartoletti/fpn
[22:15:56] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[22:20:29] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 256 seconds)
[22:24:26] <FromDiscord> <Require Support> how do i echo the memory address of a `HANDLE` in string or hex, tried addr() but errored and told to use unsafeAddr then says expression has no address
[22:27:22] <FromDiscord> <planetis> cast it to an int and call strutils toHex
[22:34:17] <FromDiscord> <Ayy Lmao> I recently stumbled across the status-im nim style guide and it's kind of made me confused about error handling. Is there a practice that's emerging among nim users using a Result type instead of exceptions?
[22:35:27] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.4)
[22:43:08] <nrds> <06Prestige99> What's their guide on exceptions
[22:46:56] <FromDiscord> <Ayy Lmao> They go into detail here https://status-im.github.io/nim-style-guide/errors.exceptions.html
[22:51:40] <nrds> <06Prestige99> ah, why do they not have syntax highlighting. Lol
[22:54:01] <nrds> <06Prestige99> https://github.com/status-im/nim-stew/blob/master/stew/results.nim this is the Result object they're talking about
[22:54:14] <nrds> <06Prestige99> seems particular to status-im, I've never seen it before
[23:00:35] <FromDiscord> <Ayy Lmao> Yeah I tried it out and it seems cool, they have some utilities here for dealing with them more elegantly https://github.com/status-im/questionable↵↵I'm just curious if anyone has had the issues with exceptions they describe. They say some spooky sounding stuff.
[23:14:19] <FromDiscord> <deeuu> This comes up every now and again; there's some discussion at https://forum.nim-lang.org/t/8759#57136↵I think it boils down to the degree of error handling you want/need to enforce. The `{.raises.}` pragma can help a bit, but from my limited experience you end up with  try/except heavy code, which is, arguably, somewhat less elegant than working with a `Result` type.↵Also see the pros/cons discussed here https://github.com/arnetheduck/n
[23:22:47] <FromDiscord> <Ayy Lmao> Thanks for the forum link, I hadn't seen that discussion yet.
[23:27:07] *** Joins: anddam (~anddam@user/anddam)
[23:40:49] <FromDiscord> <Bubblie> Semi colons in nim 😈
[23:44:29] <FromDiscord> <spoon> useful for code golfing
[23:45:28] <FromDiscord> <hmmm> result error seems neater than try except but I wouldn't want it forced on me 🤔
[23:45:53] <FromDiscord> <hmmm> we must be free like 🦋 😃
[23:46:47] <FromDiscord> <Rika> You can wrap result functions to make them exceptions
[23:47:04] <FromDiscord> <Rika> I’d say similarly for the reverse
