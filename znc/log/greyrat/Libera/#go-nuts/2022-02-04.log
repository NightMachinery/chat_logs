[00:00:17] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[00:02:04] *** Joins: jespada (~jespada@87.74.36.188)
[00:02:46] *** Joins: roshanavand (~roshanava@p200300d47f01a3006ae26b065900f0f0.dip0.t-ipconnect.de)
[00:03:07] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[00:03:17] *** Quits: LiftLeft2 (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 240 seconds)
[00:03:32] *** Joins: edrocks (~Ed@user/edrocks)
[00:05:41] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[00:06:24] *** Quits: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net) (Remote host closed the connection)
[00:07:12] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[00:08:19] *** Joins: oliverwood (~oliverwoo@node-1w7jra27sm79l0xu1l5l5nxry.ipv6.telus.net)
[00:08:34] *** Joins: jkl (~jkl@user/jkl)
[00:10:24] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:10:37] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:11:35] *** Quits: jkl (~jkl@user/jkl) (Client Quit)
[00:13:01] *** Joins: jkl (~jkl@user/jkl)
[00:19:27] *** Joins: todo75 (~todo75@user/todo75)
[00:20:16] *** Quits: todo75 (~todo75@user/todo75) (Client Quit)
[00:21:38] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:22:00] *** Joins: crashrep (~crashrep@user/crashrep)
[00:24:43] *** Quits: pgloor (~petergloo@bit.cubus.space) (Quit: The Lounge - https://thelounge.chat)
[00:24:56] *** Joins: pgloor (~petergloo@bit.cubus.space)
[00:27:18] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[00:31:40] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[00:32:44] <fsoc> I'm curious why this syntax doesn't work anymore: `go foobar() { fmt.Println("kek") }()`
[00:33:07] <fsoc> (assuming the statement in the function body is on its own line)
[00:33:29] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:34:31] <fizzie> I don't think that's ever worked. But if you replace `foobar` with `func`, that'll be different...
[00:34:35] <bookworm> it never did?
[00:34:48] <bookworm> https://go.dev/play/p/yUqLzH9GelT
[00:34:51] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[00:35:23] <fsoc> I'm following this example: https://ibb.co/WBLwf3y
[00:35:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[00:35:35] <fizzie> `func` is a keyword, not just a random name.
[00:35:52] <fizzie> And specifically `func(){ ... }` is an (anonymous) function literal.
[00:36:01] <fsoc> OHHHHHH
[00:36:10] <fsoc> i'm stupid. sorry.
[00:36:32] <fsoc> fizzie: yeah, got it. thanks.
[00:37:38] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Remote host closed the connection)
[00:37:52] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[00:38:28] *** Quits: yassernasc (~yassernas@ec2-54-87-145-249.compute-1.amazonaws.com) (Remote host closed the connection)
[00:47:05] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:47:56] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:48:03] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[00:48:03] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[00:48:03] *** Joins: resamvi (~resamvi@user/resamvi)
[00:52:39] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[00:55:32] *** Joins: jpw (~jpw@user/jpw)
[00:56:43] *** Quits: roshanavand (~roshanava@p200300d47f01a3006ae26b065900f0f0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[01:00:25] *** Joins: todo75 (~todo75@user/todo75)
[01:04:15] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[01:04:47] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:05:56] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[01:06:59] <fsoc> In this code, is there a way I can exit the `read_chan` function when both the goroutines (one for 'hello' and 'foobar') exits, and calls weight_group.Done()? I've thought of using a global variable that'd decrement the counter from 2 to 0, and my `read_chan` would exit if it sees `GLOBAL_INDICATOR == 0`, but I think since that read operation is a blocking operation, I cannot do that. This is the sample
[01:07:05] <fsoc> code: https://go.dev/play/p/kmA6nIu10Om
[01:09:17] <bpalmer> fsoc: if read_chan() is designed to block until the other two goroutines are done, why not remove its goroutine fro the wait group, and then after the wait_group.Wait() call, close the channel that read_chan is reading from?
[01:09:30] <b0nn> You want to "signal" to the read_chan function that it can exit, a common way is context.Context, which you will check the state of in your for loop
[01:09:34] <bpalmer> fsoc: then, in read_chan, don't do an infinite loop; simply loop over a range on the channel that your'e reading from
[01:09:53] <b0nn> yeah - the select pattern is probably better
[01:10:03] <bpalmer> this requires a bit of documentation to establish your invariants, because you're doing something a little out of the ordinary, but is straightforward.
[01:12:49] <fsoc> I've tried to check to see if a channel is closed like, `message, is_open := <-channel` but since any goroutine would close the channel, it's just messy. Like, if 'hello' exits first, it'd close but 'foobar' would try to write to that closed channel, and `read_channel` would try to read from that closed channel.
[01:13:06] <fsoc> that works if there's only one goroutine
[01:14:01] <bpalmer> fsoc: for msg := range ch { ... }   <-- this for loop terminates when the channel ch is closed.
[01:14:32] <foobaz> it's safe to read from a closed channel, you get the zero value of the channel
[01:14:34] <fsoc> but this only works if there's a single goroutine is involved right?
[01:14:38] <fsoc> fps:
[01:14:40] <fsoc> bpalmer:
[01:14:41] <bpalmer> fsoc: in your code, read_chan is only reading from the channel and is supposed to end at the same time that all the writers end, so the semantics map very cleanly to close()
[01:14:45] <fsoc> (sorry for wrong pings)
[01:15:22] <bpalmer> fsoc: no. You do have to be careful that only a single goroutine is responsible for closing the channel, because you'll panic if you close an already closed channel.
[01:15:41] <bpalmer> fsoc: but ranging over a channel and writing to a channel both support arbitrary numbers of readers and writers.
[01:17:17] *** Joins: rcernin (~rcernin@101.189.141.138)
[01:17:23] <fsoc> Yeah, but I was asking if the 'hello' go routine exits first, it'll close the channel (assuming `close(channel)` is placed end of `count` function) but 'foobar' is still running. So it'll try to write to that closed channel.
[01:17:45] <bpalmer> that's why you wouldn't close(channel) after hello goroutine exits, you close it after the waitgroup is done waiting.
[01:18:05] <bpalmer> (and to make this work, you remove the waitgroup from being involved in the read_chan goroutine)
[01:18:56] <fsoc> I see, let me give it a try.
[01:19:32] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Read error: Connection reset by peer)
[01:20:39] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[01:21:06] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[01:21:06] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[01:21:06] *** Joins: resamvi (~resamvi@user/resamvi)
[01:22:21] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[01:24:52] <fsoc> bpalmer: I should be placing `read_chan` as it's own goroutine right?
[01:25:21] <fsoc> Or, is that part of main routine?
[01:25:33] <bpalmer> yes.
[01:25:51] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[01:26:00] <fsoc> i see, so it's part of main. a sec.
[01:26:26] <bpalmer> no, it's its own goroutine.
[01:28:15] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[01:28:59] <fsoc> bpalmer: https://go.dev/play/p/NTu4YBT39SJ If I want to place `read_chan` on its own goroutine, where should I place `close(str_channel)`? Since weight_group.Wait() is a blocking operation. (and not using weight groups with `read_chan` goroutine fails).
[01:30:38] <fsoc> Let me share that.
[01:31:49] <fsoc> bpalmer: This is something I tried: https://go.dev/play/p/-0i7J-6yf0y
[01:32:27] <fsoc> Both code produce same result (and same error).
[01:33:07] <fsoc> I don't know where to place the `close()` call to make this code functional.
[01:35:16] <bpalmer> https://go.dev/play/p/TUg4DrYnouU
[01:37:44] <fsoc> Interesting. I thought if we create a goroutine, we must close it also. But seems like that's not true.
[01:38:17] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[01:38:17] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[01:38:17] *** Joins: resamvi (~resamvi@user/resamvi)
[01:38:18] <fsoc> Thanks bpalmer !
[01:39:14] <foobaz> the go spec says "Program execution begins by initializing the main package and then invoking the function main. When that function invocation returns, the program exits. It does not wait for other (non-main) goroutines to complete."
[01:39:20] <foobaz> https://go.dev/ref/spec
[01:39:24] <bpalmer> fsoc: this doesn't guarantee that read_chan() is done , but that's easy to add as well
[01:40:35] *** Quits: jespada (~jespada@87.74.36.188) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:41:35] <bpalmer> https://go.dev/play/p/y60BVFTIbeU
[01:42:09] *** Joins: jespada (~jespada@87.74.36.188)
[01:42:12] <fsoc> Ah, that looks nice :)
[01:42:14] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[01:43:11] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[01:46:12] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[01:51:23] <leonarth> do you know if it is possible using stdlib to append strings on top of a file buffer?
[01:51:40] <leonarth> is there any utility for that or I have to write my own?
[01:51:55] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Quit: Leaving)
[01:53:37] <foobaz> do you mean write the string to disk, at the end of the file?
[01:54:11] <foobaz> you can use https://pkg.go.dev/os#File.Seek and https://pkg.go.dev/os#File.Write
[01:59:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:01:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[02:06:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:07:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b8e4-8b58-fcf6-173a.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:11:55] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[02:11:55] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[02:11:55] *** Joins: resamvi (~resamvi@user/resamvi)
[02:13:23] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[02:13:42] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[02:15:21] *** Quits: NinjaDK (~NinjaDK@212.237.182.124) (Quit: NinjaDK)
[02:17:11] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[02:17:21] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[02:17:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Client Quit)
[02:17:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c90c-ab57-145c-eab1.res6.spectrum.com)
[02:23:59] *** Quits: flughafen (~flughafen@p5de8ed0b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:32:58] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: see you later)
[02:34:22] *** Joins: walterwhip (~www@user/walterwhip)
[02:34:59] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[02:36:50] *** Joins: R2robot (~R2robot@user/r2robot)
[02:39:27] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:41:23] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[02:45:36] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[02:45:45] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[02:45:48] *** Joins: resamvi (~resamvi@user/resamvi)
[02:46:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c90c-ab57-145c-eab1.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:46:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:49:57] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[02:52:34] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:53:11] *** Joins: walterwhip (~www@user/walterwhip)
[02:56:00] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[02:58:57] *** Joins: crashrep (~crashrep@user/crashrep)
[02:59:00] *** Joins: nitrix (~nitrix@user/nitrix)
[03:04:14] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:04:36] <aidalgol> What am I doing wrong here? https://bpa.st/NGYQ
[03:04:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[03:05:59] <nitrix> aidalgol, Packages are always a full path and only relative when prefixed with ./ or ../, which you almost never see in the Go ecosystem.
[03:06:42] <aidalgol> nitrix: So how should I use packages that live in the same repository?
[03:07:00] <nitrix> aidalgol, You're intended to give your go module a name (usually the url of its repo) in your go.mod file, and then packages that are relative to that in your file structure becomes relative to that url.
[03:07:30] <aidalgol> nitrix: Ah, OK.
[03:07:54] <nitrix> go.mod would have `module github.com/aidalgol/myproject` and your imports would be "github.com/aidalgol/myproject/foo", which maps to the `foo` folder at your root, with files having `package foo` in it.
[03:08:21] *** Joins: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net)
[03:08:37] *** Quits: moto (~moto@user/moto) (Ping timeout: 240 seconds)
[03:11:10] <aidalgol> Will that work before I have pushed my project anywhere?
[03:14:54] <nitrix> Yep.
[03:15:13] *** Quits: Dalatiidae (~Dalatiida@user/dalatiidae) (K-Lined)
[03:15:23] <aidalgol> great, thanks!
[03:19:26] *** Joins: resamvi (~resamvi@user/resamvi)
[03:19:44] *** Joins: normen (~normen@p200300d717235c0008eb322e6cba7aeb.dip0.t-ipconnect.de)
[03:23:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[03:26:16] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:32:48] <leonarth> yes foobaz write the string to the file buffer on top of everything else, put the string on the first line
[03:36:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:37:27] <b0nn> leonarth: Are you replacing, prepending, or appending?
[03:37:41] <leonarth> appending text
[03:37:50] <leonarth> but instead of using writestring to append to bottom
[03:38:05] <leonarth> I was wondering if there's any stdlib helper that allows me to append to the top
[03:39:12] <leonarth> otherwise I'll have to figure something out and program one
[03:39:33] <leonarth> I was thinking the easiest way would be to write a new file and append the old one :D
[03:39:57] <b0nn> Sorry, append to the top sounds like prepend to me (and I don't know off the top if there are helpful tools, that doesn't mean that there aren't any though)
[03:39:59] <leonarth> then do some mv/rm magic
[03:40:19] <leonarth> b0nn prepending
[03:43:41] <leonarth> otherwise I have the bytes buffer, can grow it w/ the size of the new data, shift everything to the right to make space and prepend the data
[03:43:44] <leonarth> seems expensive
[03:44:31] <b0nn> I wouldn't shift
[03:45:08] <leonarth> ok latest idea: read the file > keep the contents in memory > delete file contents on disk > write new data first > write file contents
[03:45:14] <b0nn> I would kind of do in memory what you are suggesting for the disk, that is, create a new bytes.Buffer with the line, then copy the old file/bytes/Buffer after it
[03:45:34] * leonarth nods b0nn 
[03:45:44] <leonarth> that's what I will do
[03:46:12] <leonarth> thank you b0nn for your suggestions and helping me think
[03:47:01] *** Quits: leonarth (~leonarth@user/leonarth) (Remote host closed the connection)
[03:49:37] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 240 seconds)
[03:53:11] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[03:53:45] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[03:53:45] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[03:53:45] *** Joins: resamvi (~resamvi@user/resamvi)
[03:54:39] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[03:55:25] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:56:11] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:01:56] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:03:00] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[04:03:32] *** Quits: lilgopher (~textual@2601:241:8000:38f0:b4e0:9656:29c6:d783) (Quit: Textual IRC Client: www.textualapp.com)
[04:06:47] *** Quits: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:08:21] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Quit: Leaving)
[04:13:16] *** Joins: walterwhip (~www@user/walterwhip)
[04:14:41] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:18:18] *** Quits: mollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Ping timeout: 268 seconds)
[04:32:10] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:33:10] *** Joins: califax (~califax@user/califx)
[04:45:17] *** Joins: califax- (~califax@user/califx)
[04:45:17] *** Joins: mickey84 (~user@user/mickey)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:39] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:46:39] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[04:46:40] *** califax- is now known as califax
[04:46:53] *** mickey84 is now known as mickey8
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:52:43] <albertito> leonardo: a common pattern for something like that is to write to a new temporary file, and then rename it with the same name as the one you want to rewrite. That way if the computer crashes you don't have a corrupted file, because file renames are (most of the time) atomic
[05:09:05] *** Quits: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:10:42] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[05:20:25] <b0nn> hrm, because a rename on linux is updating an.. inode IIRC, then the old file is still there if you know how to undo a mv :)
[05:21:35] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[05:30:32] *** Joins: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956)
[05:31:22] *** Joins: shtirlic_ (~shtirlic@178.70.137.51)
[05:34:13] *** Quits: shtirlic (~shtirlic@178.70.141.88) (Ping timeout: 250 seconds)
[05:39:03] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:e863:7536:90fb:5f1)
[05:42:43] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:e863:7536:90fb:5f1) (Client Quit)
[05:42:57] *** Joins: kyle[m] (~kylematri@2001:470:69fc:105::1:73e8)
[05:43:49] *** Joins: rcernin (~rcernin@101.189.141.138)
[05:46:21] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:49:54] *** Joins: califax- (~califax@user/califx)
[05:54:15] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:54:15] *** califax- is now known as califax
[06:01:15] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[06:06:55] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 256 seconds)
[06:08:21] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[06:12:46] *** Joins: mrlemke (~quassel@2604:a880:4:1d0::394:0)
[06:13:16] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[06:13:16] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[06:13:16] *** Joins: resamvi (~resamvi@user/resamvi)
[06:14:17] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[06:14:26] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[06:17:41] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[06:18:18] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:21:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[06:29:21] *** Joins: resamvi (~resamvi@user/resamvi)
[06:33:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[06:37:22] *** Quits: schaeffer (~schaeffer@user/schaeffer) (Quit: well, bye)
[06:38:58] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:41:50] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[06:47:30] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:48:59] *** Joins: ar324 (~ar324@user/ar324)
[06:52:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[06:56:13] *** Quits: ar324 (~ar324@user/ar324) (Ping timeout: 256 seconds)
[06:59:35] *** Quits: normen (~normen@p200300d717235c0008eb322e6cba7aeb.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:03:15] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[07:03:15] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[07:03:15] *** Joins: resamvi (~resamvi@user/resamvi)
[07:04:32] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[07:04:44] *** Joins: normen (~normen@p200300d717235c0008eb322e6cba7aeb.dip0.t-ipconnect.de)
[07:05:00] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:11:17] *** Quits: normen (~normen@p200300d717235c0008eb322e6cba7aeb.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:24:11] <solifugus> ok.. learning go...  Is err not a string, why I cannot do like: panic("You did something dumb: "+err)  ???
[07:25:24] <rewt> err.Error()
[07:26:54] <solifugus> yep.. thanks..
[07:28:10] <greatgatsby__> is there anything wrong with using it like this in a format string?  https://go.dev/play/p/n3blg62agka
[07:29:19] *** Joins: DogHackit (~doghackit@c-76-27-57-63.hsd1.ut.comcast.net)
[07:29:32] *** Joins: normen (~normen@p200300d717235c0008eb322e6cba7aeb.dip0.t-ipconnect.de)
[07:30:45] <greatgatsby__> I guess inside a panic you could using fmt.Sprintf
[07:33:56] <rewt> yeah, that's fine; if you tell Go you want it as a string, it stringifies it for you, but using + doesn't do that
[07:37:14] <rewt> techincally it tries its .String() method, and if it doesn't have that, its .Error() method, and if it doesn't have that, it errors
[07:37:37] <fizzie> .Error() is tried before .String().
[07:37:47] <rewt> is it?
[07:38:25] <fizzie> According to https://pkg.go.dev/fmt it is. Error() is step 4, String() is step 5, in the list of how to deal with objects that "implement certain interfaces".
[07:39:26] <fizzie> I feel like conventionally errors are printed using the %v format, not %s. Though both would appear to be valid (and equivalent), because the rules for converting objects that implement `error` to string are for all verbs.
[07:39:45] <fizzie> (And of course for fmt.Errorf there's the special %w, but that's a whole 'nother thing.)
[07:49:58] *** Joins: bluedust (~bluedust@103.160.194.110)
[08:07:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[08:09:17] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 240 seconds)
[08:15:17] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 240 seconds)
[08:16:37] *** Quits: blinux (~blinux@pool-72-78-144-199.phlapa.fios.verizon.net) (Quit: WeeChat 3.0)
[08:19:55] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[08:20:29] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[08:20:29] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[08:20:29] *** Joins: resamvi (~resamvi@user/resamvi)
[08:21:58] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[08:22:57] *** Joins: Guest13 (~Guest13@201.52.77.59)
[08:24:35] *** Quits: Guest13 (~Guest13@201.52.77.59) (Client Quit)
[08:24:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[08:42:31] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[08:43:17] *** Joins: masoudd (~masoudd@user/masoudd)
[08:49:45] *** Quits: bluedust (~bluedust@103.160.194.110) (Remote host closed the connection)
[08:50:19] *** Joins: bluedust (~bluedust@103.160.194.110)
[08:50:20] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[08:51:23] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:53:11] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[08:53:11] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[08:53:11] *** Joins: resamvi (~resamvi@user/resamvi)
[08:57:49] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[09:05:36] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[09:06:31] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[09:06:57] <castlelore> aloha does anyone know how to merge two xml files of similar structure, possibly using mxi and mergemap?
[09:07:07] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:08:00] <castlelore> *mxj
[09:09:12] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[09:09:53] *** Joins: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de)
[09:09:53] *** Quits: resamvi (~resamvi@p57948ee0.dip0.t-ipconnect.de) (Changing host)
[09:09:53] *** Joins: resamvi (~resamvi@user/resamvi)
[09:10:12] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[09:10:28] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:19:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com)
[09:19:13] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-71fa-ff5f-f714-7546.res6.spectrum.com) (Client Quit)
[09:26:00] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[09:26:32] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:33:08] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:36:55] *** Quits: resamvi (~resamvi@user/resamvi) (Quit: resamvi)
[09:51:24] *** Quits: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956) (Quit: Textual IRC Client: www.textualapp.com)
[10:06:17] *** Joins: allana (~user@2001:4641:6aed:0:4ad:2c51:49e9:2b4a)
[10:07:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:07:07] <allana> Hi #go-nuts! Question, what is the canonical way to create a FFI-wrapper around a C-library?
[10:10:54] *** Joins: edd_lc (edd_lc@gateway/vpn/protonvpn/eddlc/x-09207710)
[10:15:34] <bookworm> cgo
[10:15:45] <bookworm> take a look at the various sqlite wrappers to see how
[10:26:26] *** Joins: flughafen (~flughafen@p5de8ed0b.dip0.t-ipconnect.de)
[10:27:43] <foobaz> sometimes, you can use SWIG to generate the wrapper for you
[10:27:45] <foobaz> http://swig.org/
[10:28:22] <foobaz> if you prefer to do it yourself, there is some good documentation at https://pkg.go.dev/cmd/cgo
[10:33:33] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[10:37:15] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[10:43:30] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[10:49:16] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 250 seconds)
[10:53:56] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:55:54] <allana> foobaz: Thanks!
[10:57:13] *** Joins: bluedust_ (~bluedust@59.89.210.27)
[10:57:15] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:00:17] *** Quits: bluedust (~bluedust@103.160.194.110) (Ping timeout: 240 seconds)
[11:01:07] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:02:29] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[11:07:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[11:13:24] *** Joins: rcernin (~rcernin@101.189.141.138)
[11:14:29] <allana> also bookworm: thanks
[11:18:42] <leonardo> thanks albertito, but it wasn't me asking :)
[11:20:47] *** Quits: bluedust_ (~bluedust@59.89.210.27) (Read error: Connection reset by peer)
[11:20:59] *** Joins: bluedust (~bluedust@103.160.194.110)
[11:25:48] *** Joins: moto (~moto@user/moto)
[11:26:31] *** Quits: edd_lc (edd_lc@gateway/vpn/protonvpn/eddlc/x-09207710) (Ping timeout: 256 seconds)
[11:31:22] *** Joins: absc (~absc@81.31.144.28)
[11:32:30] *** Quits: rcernin (~rcernin@101.189.141.138) (Quit: WeeChat 3.4)
[11:37:15] *** Joins: McSvenster (~AdminUser@213.55.225.1)
[11:39:18] *** Joins: mrig (~mrig@user/mrig)
[11:41:05] <McSvenster> can you see any benefit in containerizing a go application?
[11:41:17] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:41:23] <b0nn> uh
[11:41:30] <b0nn> a few
[11:42:09] <McSvenster> as far as I understood,  go applications contain anything thats needed to run teh app
[11:42:23] <b0nn> yes
[11:43:34] <bookworm> *if* and only if you force it to build statically and on some plattforms you can't due to syscalls hooking into libc
[11:43:43] <McSvenster> so e.g. with python to me it's pretty clear: if you want a controlled environment, you need to containerize. but why go?
[11:43:55] <buu> It's fun
[11:44:09] <McSvenster> :-)
[11:44:20] <McSvenster> it seems to me like overhead
[11:44:27] <bookworm> even for python there's other ways than a container... venvs for one
[11:44:38] <buu> Well, kubernetes provides things like deployments, canaries, rolling restarts, etc
[11:44:41] <buu> And it expects a container
[11:44:51] <bookworm> you use containers because of the security properties and deployment systems
[11:45:11] <buu> Also it's probably a pain to get every single file into your go exe
[11:45:43] <McSvenster> thanks for the hints, now I can see
[11:45:44] <buu> config files, template files, etc
[11:47:37] <McSvenster> especially kubernetes might become the important point. So I'll go on an containerize it :-) Thank you all!
[11:49:27] <allana> as bookworm said, security properties are one of the main selling points of containerization
[11:52:00] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[11:52:31] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:52:34] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[11:53:37] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 240 seconds)
[11:54:52] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[11:55:53] *** Joins: rendar (~rendar@user/rendar)
[11:56:18] <McSvenster> Thanks allana, I'll keep this in mind!
[11:58:56] *** Quits: fmartingr (~fmartingr@user/fmartingr) (Quit: じゃあね！)
[11:59:15] *** Joins: fmartingr (~fmartingr@user/fmartingr)
[11:59:31] *** Joins: roshanavand (~roshanava@p200300d47f01a3006ae26b065900f0f0.dip0.t-ipconnect.de)
[12:01:48] <buu> security properties? Since when?
[12:02:12] <buu> The vast majority of containers aren't any more secure than just a process
[12:04:14] <bookworm> ?
[12:05:08] <b0nn> hm, so I noticed the discussion on error vs string, and which took precedence, and, TIL https://go.dev/play/p/7WpRncgfheM
[12:05:11] <bookworm> let's see... default containerization limits caps, adds a network mount and user namespace... but suuuuure, absolutely nothing else than a process right?
[12:05:56] <bookworm> what the hell?
[12:06:05] <bookworm> why does it do that?
[12:06:17] <bookworm> I mean, sure for %v, but %s?
[12:06:31] <b0nn> 15:08 < fizzie> According to https://pkg.go.dev/fmt it is. Error() is step 4, String() is step 5, in the list of how to deal with objects that "implement certain interfaces".
[12:07:04] <b0nn> oh, Error() is returning a string, so, %s is fine :)
[12:07:27] <b0nn> But it's rather cool to actually see it huh?
[12:08:38] <bookworm> well, intuition would have said that String takes precedence... no real reason to add magic there. But as you said, TIL
[12:11:51] *** Quits: bluedust (~bluedust@103.160.194.110) (Remote host closed the connection)
[12:14:37] *** Quits: roshanavand (~roshanava@p200300d47f01a3006ae26b065900f0f0.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[12:18:17] *** Joins: leonarth (~leonarth@user/leonarth)
[12:23:46] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[12:32:03] <McSvenster> far from beeing a security expert, but as I see it, the biggest problem is the lack of knowledge. how to do containrization correctly.  If done right a container can add a layer of security to your app.
[12:32:54] *** Quits: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net) (Remote host closed the connection)
[12:33:18] *** Joins: LtHummus (~lthummus@97-126-121-3.tukw.qwest.net)
[12:41:04] *** Joins: Stas__ (~Stas@78.162.42.17)
[12:41:17] <buu> McSvenster: It can, yes, but you don't gain much from the default settings
[12:41:31] <bookworm> for which of the at least 3 engines?
[12:41:42] <bookworm> they all do different things...
[12:42:40] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[12:42:46] <bookworm> Linux has no notion of a container, all it knows are namespaces. So pick your userspace concept at your leisure but then you need to mention which you are talking about
[12:42:51] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[12:42:58] *** Quits: Stas__ (~Stas@78.162.42.17) (Quit: Leaving)
[12:42:59] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[12:43:29] *** Joins: vegg (~Stas@78.162.42.17)
[12:43:47] <vegg> hello, did they already implement flag for ignore unused variables? if no, is there custom made compiler without this error?
[12:44:07] <bookworm> go might not be the language for you if that's your problem...
[12:44:11] <bookworm> read the faq about it
[12:44:24] <vegg> bookworm, thanks for opinion
[12:44:32] <bookworm> https://go.dev/doc/faq#unused_variables_and_imports
[12:44:38] <j416> vegg: you can "_ = yourvariable" to make the compiler happy, when debugging stuff (just in case you didn't know9
[12:44:39] <j416> )
[12:44:53] *** Joins: mickey86 (~user@user/mickey)
[12:44:56] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[12:44:56] *** mickey86 is now known as mickey8
[12:56:08] <vegg> I knew, still need some unnecessary
[12:56:08] <vegg>  work from developer side. Explanation and suggestion in official FAQ of using crutch _ is pure "gold".
[12:56:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:57:03] <vegg> Isn't then better add a flag "DEBUG" to compiler lol
[12:57:19] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[12:57:29] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[12:58:04] <vegg> "Use the blank identifier to let unused things persist while you're developing."
[12:58:44] <vegg> brilliant. whatever.
[12:59:07] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[12:59:37] <j416> I'm not that bothered by it tbh
[12:59:49] <j416> it's better than forgetting unused things
[13:00:14] <vegg> IDEA shows unused things in LINT, never was a problem for me
[13:00:42] *** Joins: bluedust (~bluedust@103.160.194.110)
[13:04:37] *** Quits: kodah- (~kodah@user/kodah) (Ping timeout: 240 seconds)
[13:05:49] *** Joins: kodah- (~kodah@user/kodah)
[13:05:55] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[13:07:24] <vegg> it's not a compiler job
[13:09:21] <albertito> leonardo: sorry!
[13:10:32] <vegg> https://github.com/golang/go/issues/43729
[13:10:48] <vegg> Good explanation, I'm with it: It's just an annoying reminder of "you forgot to explicitly ignore the variable before you debug and then make actual use of it later anyway like it always happens".
[13:14:45] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 256 seconds)
[13:16:16] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[13:20:33] *** Joins: arinov_ (~arinov@176.89.27.174)
[13:24:12] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[13:24:25] *** Joins: mickey8 (~user@user/mickey)
[13:25:58] *** Joins: shka (~herr@109.231.0.226)
[13:32:05] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:33:08] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[13:35:54] *** Quits: vegg (~Stas@78.162.42.17) (Quit: Leaving)
[13:36:37] *** Quits: khyr0n (~khyr0n@2806:10be:6:5361:8794:5c6e:fba8:cc22) (Ping timeout: 256 seconds)
[13:37:39] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:40:06] *** Joins: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com)
[13:47:03] *** Quits: dsrt^ (~dsrt@128-092-185-170.biz.spectrum.com) (Ping timeout: 256 seconds)
[13:48:25] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[13:50:38] *** Joins: amk (~amk@109.255.169.126)
[13:53:56] *** Joins: jhchabran_ (~jhchabran@user/jhchabran)
[13:54:43] *** Quits: jhchabran (~jhchabran@user/jhchabran) (Ping timeout: 250 seconds)
[13:58:56] *** Quits: dfch (~dfch@user/dfch) (Remote host closed the connection)
[13:59:00] *** Quits: fsoc (~shynerd@bison.alphaw0lf.xyz) (Quit: leaving)
[13:59:12] *** Joins: dfch (~dfch@user/dfch)
[14:07:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[14:07:47] *** Quits: jhchabran_ (~jhchabran@user/jhchabran) (Ping timeout: 256 seconds)
[14:08:02] *** Joins: jhchabran (~jhchabran@user/jhchabran)
[14:08:14] *** Joins: leonarth (~leonarth@user/leonarth)
[14:09:29] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 256 seconds)
[14:19:29] *** Joins: g2anj (~v@58.228.230.4)
[14:21:27] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Quit: Leaving)
[14:25:55] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[14:26:47] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[14:27:19] *** Joins: bluedust_ (~bluedust@59.89.210.27)
[14:30:37] *** Quits: bluedust (~bluedust@103.160.194.110) (Ping timeout: 240 seconds)
[14:36:07] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[14:53:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:58:09] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:01:01] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[15:10:46] *** Joins: Benriisulven (~Benriisul@180.79-161-248.customer.lyse.net)
[15:11:57] *** Joins: roshanavand (~roshanava@p200300d47f01a3006ae26b065900f0f0.dip0.t-ipconnect.de)
[15:14:13] *** Quits: Benriisulven (~Benriisul@180.79-161-248.customer.lyse.net) (Remote host closed the connection)
[15:14:24] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[15:15:50] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[15:16:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[15:16:57] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[15:21:57] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[15:27:34] *** Joins: yoonkn (~user@175.197.208.79)
[15:28:25] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[15:38:41] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 256 seconds)
[15:42:57] *** Joins: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net)
[15:45:34] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:46:57] *** Quits: arinov_ (~arinov@176.89.27.174) (Ping timeout: 256 seconds)
[15:48:45] *** Quits: flughafen (~flughafen@p5de8ed0b.dip0.t-ipconnect.de) (Quit: WeeChat 2.8)
[15:55:37] *** Quits: McSvenster (~AdminUser@213.55.225.1) (Ping timeout: 240 seconds)
[15:58:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:59:25] *** Quits: roshanavand (~roshanava@p200300d47f01a3006ae26b065900f0f0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[16:04:02] *** Joins: xsteadfastx (~marv@94.31.99.245)
[16:05:21] *** Quits: st3fan (sid43079@id-43079.lymington.irccloud.com) (Ping timeout: 245 seconds)
[16:07:19] *** Joins: st3fan (sid43079@id-43079.lymington.irccloud.com)
[16:07:26] *** Quits: seds (sid492514@user/seds) (Ping timeout: 245 seconds)
[16:07:47] *** Joins: roshanavand (~roshanava@p200300d47f01a3006ae26b065900f0f0.dip0.t-ipconnect.de)
[16:08:01] *** Joins: McSvenster (~AdminUser@213.55.225.1)
[16:08:24] *** Joins: seds (sid492514@user/seds)
[16:09:17] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[16:09:17] *** Quits: bluedust_ (~bluedust@59.89.210.27) (Remote host closed the connection)
[16:09:23] *** Joins: iateadonut (~dan@121.177.17.154)
[16:12:15] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[16:13:10] *** Joins: pepee (~pepee@user/pepee)
[16:14:57] *** Quits: McSvenster (~AdminUser@213.55.225.1) (Ping timeout: 256 seconds)
[16:16:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[16:17:26] *** Joins: xsteadfastx (~marv@94.31.99.245)
[16:21:00] *** Joins: bluedust (~bluedust@59.89.210.27)
[16:21:34] *** Joins: Atque (~Atque@user/atque)
[16:21:39] *** Joins: mrig (~mrig@user/mrig)
[16:26:37] *** Joins: McSvenster (~AdminUser@213.55.225.1)
[16:28:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:31:09] *** Quits: McSvenster (~AdminUser@213.55.225.1) (Ping timeout: 256 seconds)
[16:40:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:40:36] *** Joins: pmcnabb6 (~pmcnabb@user/pmcnabb)
[16:41:34] *** Joins: eXtre3m0 (~eXtr3m0@user/eXtr3m0)
[16:41:37] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 240 seconds)
[16:41:37] *** pmcnabb6 is now known as pmcnabb
[16:43:42] *** Joins: McSvenster (~AdminUser@213.55.225.1)
[16:49:37] *** Quits: McSvenster (~AdminUser@213.55.225.1) (Ping timeout: 240 seconds)
[16:54:48] *** Joins: i_am_beets (~i_am_beet@user/i-am-beets/x-8367380)
[17:02:26] *** Joins: McSvenster (~AdminUser@213.55.225.1)
[17:08:42] *** Joins: we_are_beets (~i_am_beet@user/i-am-beets/x-8367380)
[17:09:01] *** Quits: McSvenster (~AdminUser@213.55.225.1) (Ping timeout: 256 seconds)
[17:09:27] *** Quits: i_am_beets (~i_am_beet@user/i-am-beets/x-8367380) (Quit: Leaving)
[17:09:39] *** Quits: we_are_beets (~i_am_beet@user/i-am-beets/x-8367380) (Client Quit)
[17:10:00] *** Joins: i_am_beets (~i_am_beet@user/i-am-beets/x-8367380)
[17:12:19] *** Quits: connor_k (~connor_k@ip70-179-143-145.fv.ks.cox.net) (Ping timeout: 250 seconds)
[17:16:33] *** Quits: allana (~user@2001:4641:6aed:0:4ad:2c51:49e9:2b4a) (Remote host closed the connection)
[17:19:12] *** Joins: McSvenster (~AdminUser@213.55.225.1)
[17:19:23] *** Quits: McSvenster (~AdminUser@213.55.225.1) (Client Quit)
[17:25:20] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[17:27:55] *** Joins: Spock_ncc1701 (~Spock_ncc@85.203.44.67)
[17:35:59] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[17:38:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:1c35:8f5c:4397:2de5) (Ping timeout: 240 seconds)
[17:39:45] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[17:41:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[17:49:33] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:57:48] *** Joins: arkurious (~arkurious@user/arkurious)
[18:10:57] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[18:13:00] *** Quits: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net) (Quit: Connection closed)
[18:13:57] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:15:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:16:20] *** Joins: xsteadfastx (~marv@p200300d2df02ad0008996ad6daaaf248.dip0.t-ipconnect.de)
[18:27:45] *** Quits: bluedust (~bluedust@59.89.210.27) (Read error: Connection reset by peer)
[18:27:59] *** Joins: bluedust (~bluedust@103.160.194.110)
[18:29:11] *** Joins: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[18:34:43] *** Quits: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Quit: So long!)
[18:35:46] *** Joins: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[18:37:05] *** Quits: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Client Quit)
[18:38:04] *** Joins: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[18:38:40] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[18:39:42] *** Quits: phylaz (~phylaz@82.51-174-55.customer.lyse.net) (Remote host closed the connection)
[18:44:33] *** Quits: fmartingr (~fmartingr@user/fmartingr) (Ping timeout: 256 seconds)
[18:51:21] *** Quits: idstam (~idstam@185.176.247.102) (Quit: WeeChat 2.8)
[18:55:37] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[19:01:59] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[19:03:18] *** Joins: fmartingr (~fmartingr@user/fmartingr)
[19:04:35] *** Joins: tedwing (~anon@lfbn-idf3-1-1415-210.w109-221.abo.wanadoo.fr)
[19:07:07] *** Joins: leonarth (~leonarth@user/leonarth)
[19:08:03] *** Joins: bluedust_ (~bluedust@59.89.210.27)
[19:09:31] *** Quits: xsteadfastx (~marv@p200300d2df02ad0008996ad6daaaf248.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[19:11:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17)
[19:11:29] *** Quits: bluedust (~bluedust@103.160.194.110) (Ping timeout: 250 seconds)
[19:15:17] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Quit: Leaving)
[19:25:43] *** Joins: noonien (~noonien@user/noonien)
[19:32:49] *** Quits: Spock_ncc1701 (~Spock_ncc@85.203.44.67) (Quit: Leaving)
[19:32:57] *** Joins: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net)
[19:39:05] *** Parts: iateadonut (~dan@121.177.17.154) ()
[19:40:01] *** Joins: khyr0n (~khyr0n@2806:10be:6:61e2:a383:acc7:1c75:f44c)
[19:40:19] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5e88:e8a2:f183:6782)
[19:41:49] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c)
[19:45:06] *** Quits: khyr0n (~khyr0n@2806:10be:6:61e2:a383:acc7:1c75:f44c) (Remote host closed the connection)
[19:49:46] *** Joins: khyr0n (~khyr0n@2806:10be:6:61e2:a383:acc7:1c75:f44c)
[19:52:47] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 256 seconds)
[19:55:51] *** Quits: khyr0n (~khyr0n@2806:10be:6:61e2:a383:acc7:1c75:f44c) (Quit: Leaving)
[19:56:11] *** Joins: khyr0n (~khyr0n@2806:10be:6:61e2:a383:acc7:1c75:f44c)
[20:03:27] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c) (Quit: dingdreher)
[20:13:20] *** Joins: haliucinas (~haliucina@5.20.153.21)
[20:19:17] *** Quits: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[20:28:35] *** Quits: bluedust_ (~bluedust@59.89.210.27) (Ping timeout: 256 seconds)
[20:34:06] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:37:59] *** Joins: w-g (~w-g@2001:470:69fc:105::195)
[20:40:21] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689)
[20:43:35] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[20:43:50] <tuskkk____> quick question, reading some go code today, and came across this
[20:43:56] <tuskkk____> ```now := time.Now()
[20:43:56] <tuskkk____> 	clock.EXPECT().Now().Return(now)```
[20:44:19] <tuskkk____> can someone please explain what do these lines do?
[20:46:46] <bpalmer> that's probably using a mocking framework that replaces Now with a mock function (that can track how often it's called, with what arguments, etc), and instructing it to return that value when called
[20:48:04] <tuskkk____> ahh, so it just track how many times time.Now() was called?
[20:48:21] <tuskkk____> it is indeed a mocking framework
[20:48:42] <bpalmer> maybe that's what they're using it for, or maybe they just want deterministic tests so instead of using the actual time, they fix it in its tracks.
[20:49:24] <bpalmer> if time.Now() always returns '100' instead of returning the actual nanoseconds since 1970, your test is more likely to exhibit the same behavior when you run it again
[20:50:49] <tuskkk____> hmm, I think it asserting the actual `now`. I also see `clock.EXPECT().Now().Return(now).Times(2)` at some places, maybe this refers to how many times its called
[20:52:01] *** Joins: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net)
[20:52:16] <bpalmer> Well, time to check the docs. I don't use and don't much favor mocks in go, although I use them extensively in python.
[20:52:55] <bpalmer> But I'm pretty sure Return(now) is saying to use that as the return value, whereas Times(2) is setting up an actual expectation that will be asserted at test end.
[20:54:06] <tuskkk____> I don't see an assertion made for Times(2) though
[20:55:27] <bpalmer> tuskkk____: gomock, as an example, usually has a controller's Finish() function deferred. When FInish runs, it will assert all expectations are satisfied.
[20:55:46] *** Quits: Chepra (~chepra@summer.c137.eu) (Quit: WeeChat 3.4)
[20:56:03] <tuskkk____> ahhh, I see, `defer ctrl.Finish()`
[20:56:03] <bpalmer> this may be automatically handled by registering a cleanup function on the test.
[20:56:33] <bpalmer> But, again, read the documentation carefully and look at the examples. THey're the real truth
[20:56:45] <tuskkk____> this feels so clever, not sure I fully understand it deeply
[20:56:51] <tuskkk____> let me check the docs, yes, thanks
[20:57:43] <bpalmer> the way that it works is magic and should be ignored for now; just trust that somehow something is being done.
[20:57:52] *** Joins: Chepra (~chepra@summer.c137.eu)
[20:58:39] <tuskkk____> oh ok
[20:59:03] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[20:59:34] <tuskkk____> but also the idea of using mocks this way, counting calls to a function, kind of clever
[20:59:58] *** Joins: novns (~novns@user/novns)
[21:01:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:7136:8a20:fe1b:e17) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:08:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[21:09:43] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Quit: Bouncer Surgery)
[21:12:13] *** Joins: alwyn (~alwyn@user/alwyn)
[21:13:56] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c)
[21:15:42] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:29:35] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:29:48] *** Joins: mickey8 (~user@user/mickey)
[21:34:35] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[21:36:13] *** Joins: DrAnything (uid538291@id-538291.lymington.irccloud.com)
[21:37:10] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c) (Quit: dingdreher)
[21:41:42] *** Joins: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net)
[21:43:11] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:47:53] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:49:58] *** Joins: bluedust (~bluedust@117.193.122.44)
[21:50:07] *** Joins: mickey8 (~user@user/mickey)
[21:50:18] *** Quits: roshanavand (~roshanava@p200300d47f01a3006ae26b065900f0f0.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:50:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[21:53:27] *** Quits: bluedust (~bluedust@117.193.122.44) (Remote host closed the connection)
[21:55:58] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:57:15] *** Quits: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:58:03] *** Joins: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956)
[21:59:42] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c)
[22:00:21] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[22:01:19] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c) (Client Quit)
[22:01:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:09:39] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[22:14:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[22:19:57] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.4)
[22:21:01] *** Joins: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c)
[22:22:24] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c) (Client Quit)
[22:23:39] *** Joins: goldfish (~goldfish@user/goldfish)
[22:25:00] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[22:28:34] *** Quits: tofran (~tofran@bl15-47-228.dsl.telepac.pt) (Read error: Connection reset by peer)
[22:28:51] *** Joins: jpw (~jpw@user/jpw)
[22:32:57] *** Quits: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[22:35:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:36:25] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[22:38:40] *** Quits: tedwing (~anon@lfbn-idf3-1-1415-210.w109-221.abo.wanadoo.fr) (Quit: leaving)
[22:41:03] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[22:41:37] *** Joins: carlavilla (~carlavill@188.26.219.45)
[22:45:22] *** Joins: crashrep (~crashrep@user/crashrep)
[22:52:57] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:53:11] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:57:33] *** Quits: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:04:52] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:14:10] *** Joins: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956)
[23:24:09] *** Joins: ilpanda (~ilpanda@ns546265.ip-158-69-251.net)
[23:29:00] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 268 seconds)
[23:30:55] *** Joins: neurocyte0917090 (~neurocyte@IP-212232080188.dynamic.medianet-world.de)
[23:30:55] *** Quits: neurocyte0917090 (~neurocyte@IP-212232080188.dynamic.medianet-world.de) (Changing host)
[23:30:55] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:31:24] *** Joins: Guest4995 (~xxx@lfbn-bor-1-430-168.w86-213.abo.wanadoo.fr)
[23:32:23] *** Quits: ilpanda (~ilpanda@ns546265.ip-158-69-251.net) (Changing host)
[23:32:23] *** Joins: ilpanda (~ilpanda@user/ilpanda)
[23:33:31] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[23:34:36] *** Quits: ilpanda (~ilpanda@user/ilpanda) (Read error: Connection reset by peer)
[23:36:50] *** Joins: ilpanda (ilpanda@ns546265.ip-158-69-251.net)
[23:38:25] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:39e9:9943:8cd0:5689) (Ping timeout: 256 seconds)
[23:38:38] *** Quits: ilpanda (ilpanda@ns546265.ip-158-69-251.net) (Changing host)
[23:38:38] *** Joins: ilpanda (ilpanda@user/ilpanda)
[23:42:02] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[23:45:52] *** Quits: DrAnything (uid538291@id-538291.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:50:02] *** Joins: eXtr3m0 (~eXtr3m0@p54861df4.dip0.t-ipconnect.de)
[23:50:10] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:51:29] *** Joins: califax (~califax@user/califx)
[23:55:16] *** Quits: eXtr3m0 (~eXtr3m0@p54861df4.dip0.t-ipconnect.de) (Changing host)
[23:55:16] *** Joins: eXtr3m0 (~eXtr3m0@user/eXtr3m0)
[23:56:47] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[23:57:08] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
