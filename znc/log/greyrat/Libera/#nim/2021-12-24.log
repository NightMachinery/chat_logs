[00:00:06] <FromDiscord> <Smarc> Gonna post it there as well, thank you!
[00:01:48] <NimEventer> New thread by Smarc: Chess logic issue, see https://forum.nim-lang.org/t/8730
[00:05:06] <FromDiscord> <Yardanico> In reply to @Smarc "I'll start a last": ill check it out
[00:05:11] <FromDiscord> <Yardanico> try to see if there's anything obvious
[00:07:33] <FromDiscord> <Smarc> Appreciate that a lot! I'm sure it is quiet obvious for someone who is more skilled than me
[00:08:03] <FromDiscord> <Smarc> Actually the 'isChecked' proc seems to not work properly
[00:09:32] <FromDiscord> <Smarc> I just can't wrap my head around how to do it correctly
[00:26:51] <FromDiscord> <Yardanico> @Smarc do your coordinates go from 0,0 to 7,7 ?
[00:27:03] <FromDiscord> <Yardanico> i mean xPos and yPos
[00:27:24] <FromDiscord> <Smarc> yes
[00:27:34] <FromDiscord> <Smarc> [0][0] = a8
[00:27:40] <FromDiscord> <Yardanico> but then why do you check < 7 in your `while` on line 87
[00:27:43] <FromDiscord> <Yardanico> shouldn't it be < 8 ?
[00:27:57] <FromDiscord> <Yardanico> since if you do < 7 you discard all results where some coordinate is 7
[00:27:59] <FromDiscord> <Yardanico> either x or y
[00:28:26] <FromDiscord> <Yardanico> `    while (currX > 0 and currX < 7) and (currY > 0 and currY < 7):` shouldn't it be `currX <= 7` or `currX < 8` and same for y?
[00:29:36] <FromDiscord> <Yardanico> i made the change but then other tests started failing for some reason
[00:29:39] <FromDiscord> <Yardanico> and this one too
[00:29:54] <FromDiscord> <Smarc> ye, other tests are failing including the one that was before :/
[00:29:57] <FromDiscord> <Smarc> I just don't get it
[00:30:04] <FromDiscord> <Smarc> But the error has to be in this proc
[00:30:05] <FromDiscord> <Yardanico> yes, but maybe you were checking coords the wrong way before :D
[00:30:06] *** Joins: vicfred (~vicfred@user/vicfred)
[00:30:43] <FromDiscord> <Smarc> maybe the while condition is wrong?
[00:31:13] <FromDiscord> <Yardanico> well it runs the body while _both_ cords are in bounds
[00:31:22] <FromDiscord> <Yardanico> when one of the coords gets outs of the bounds it doesn't iterate any more
[00:32:00] <FromDiscord> <Smarc> Ye I thought about that, but had no clue how to fix that
[00:32:37] <FromDiscord> <Smarc> if I just change the `and` for `or` it goes OutOfBounds
[00:33:08] <FromDiscord> <Yardanico> yes, but I didn't say that your way of checking is wrong
[00:33:14] <FromDiscord> <Yardanico> I just explained what the `while` does
[00:36:27] <FromDiscord> <Yardanico> In reply to @Smarc "if I just change": wait, I'm not sure if I'm right but maybe I am
[00:36:44] <FromDiscord> <Yardanico> it seems like you don't check if the enemy piece is obstructed by another enemy piece?
[00:36:51] <FromDiscord> <Yardanico> in isChecked
[00:37:13] <FromDiscord> <Yardanico> you only check for "If a friendly piece is blocking sight, stop looking in that direction" so if an enemy queen is obstructed by enemy pawn your algo still returns true
[00:37:20] <FromDiscord> <Yardanico> that's why tests started failing after I fixed the while condition
[00:38:45] <FromDiscord> <Smarc> Yes, the proc is far from ready, right now I only wanted to check for Rook or Queen standing right beneath the king
[00:38:51] <FromDiscord> <Smarc> with dist=1
[00:39:14] <FromDiscord> <Yardanico> well idk, I'm just sharing what I found
[00:39:23] <FromDiscord> <Yardanico> "black king all directions without captures" is the first failing test with fixed while condition
[00:41:49] <FromDiscord> <Smarc> If I comment out most of the move instructions it is green actually
[00:41:52] <FromDiscord> <Smarc> I don't get it
[00:42:05] <FromDiscord> <Yardanico> In reply to @Smarc "If I comment out": because your `move` calls `isChecked`
[00:42:25] <FromDiscord> <Yardanico> and before the while fix you simply ignored the last coordinate
[00:42:33] <FromDiscord> <Smarc> L329 is the one that lets it fail
[00:42:51] <FromDiscord> <Yardanico> yes, but as I said, that's because your `move` calls `isChecked`
[00:43:08] <FromDiscord> <Yardanico> and your algo returns `true` if a king is "checked" by a queen obstructed by a pawn
[00:43:49] <FromDiscord> <Smarc> oh so you mean the king is checked over the whole board because its on the same file as the queen, although a pawn is in the way? Do I get that right?
[00:43:53] <FromDiscord> <Yardanico> yes
[00:44:03] <FromDiscord> <Yardanico> because you don't check if an enemy piece is obstructed by another enemy piece
[00:44:06] <FromDiscord> <Yardanico> you only do that check for friendly pieces
[00:44:12] <FromDiscord> <Smarc> Ahh
[00:44:20] <FromDiscord> <Smarc> Lets see if I can fix that somehow
[00:45:18] <FromDiscord> <Smarc> Hm, how would I do that without actually crashing the isChecked? If I just check the color it would not recognize any check i guess
[00:51:53] <FromDiscord> <Smarc> `      if (currPiece.color != this.color) and not(currPiece of Rook) and↵      not(currPiece of Queen):↵        break↵`
[00:51:56] <FromDiscord> <Smarc> Seems to do the trick
[00:52:19] <FromDiscord> <Smarc> Remember right now it is just for checking Rook/Queen checks
[00:52:31] <FromDiscord> <Smarc> But still the last test is failing
[00:52:42] <FromDiscord> <Smarc> although I fixed the while
[00:56:56] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 252 seconds)
[00:57:43] <FromDiscord> <Smarc> I'm so confused :/
[01:00:48] <FromDiscord> <Smarc> Now it does not even recognize a check where an enemy rook is on the same file as the enemy king without any piece in the way ..
[01:05:49] <FromDiscord> <TryAngle> what is more idiomatic?↵assert or if + raise Exception
[01:07:51] <FromDiscord> <Solitude> assertions throw AssertionDefect. if it fits your case then use it.
[01:09:34] *** Joins: xiamx[m]1 (~xiamxmatr@2001:470:69fc:105::1:5692)
[01:10:43] *** Joins: xet7 (~xet7@user/xet7)
[01:11:05] <FromDiscord> <demotomohiro> Use assert for expressions that always true as long as your program doesn't have a bug.
[01:12:39] <FromDiscord> <evoalg> In reply to @xiamx "I might be still": From what I'm lead to believe (and I don't know much), although the compiler can do many optimizations behind the scenes, there is no difference between  `var` and `let` (when there are no attempts to assign to mutate a `let` variable) as they are for the programmer (to catch unintended assignments) rather than for compiler optimization ... in a working program you can replace all the `let`'s with `
[01:12:59] <FromDiscord> <demotomohiro> if + raise for checking runtime error even if you your program doesn't have bug.
[01:16:11] <xiamx[m]1> FromDiscord: Yeh I understand that I can replace these on my own. Though just wondering if there are programs that help me ident these.
[01:16:42] <FromDiscord> <evoalg> In reply to @xiamx "FromDiscord: Yeh I understand": ahh sorry I misread ... yea that would be nice
[01:19:03] <FromDiscord> <evoalg> and func's instead of proc's ... but only as an option that's not on by default
[01:20:49] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[01:59:37] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 240 seconds)
[02:01:40] <FromDiscord> <TryAngle> @ElegantBeef wait remember when I asked how to impl something only for N == 1 and the rest for N > 1 ?
[02:01:57] <FromDiscord> <TryAngle> can't I just define a type that goes from 2 to high(int)
[02:01:58] <FromDiscord> <TryAngle> ?
[02:04:20] *** Joins: PMunch (~PMunch@user/pmunch)
[02:04:26] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JhX
[02:06:12] <FromDiscord> <Elegantbeef> I suppose you could
[02:12:26] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[02:14:14] *** Joins: audiophile_ (~audiophil@user/audiophile)
[02:18:30] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JhY
[02:18:43] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3JhY" => "https://play.nim-lang.org/#ix=3JhZ"
[02:19:34] <FromDiscord> <Elegantbeef> You can do `proc doThing(a: AVector or SVector): auto`
[02:19:53] <FromDiscord> <Elegantbeef> Though if you use the type information you need to do `a.type.T` or `a.type.N`
[02:21:03] <FromDiscord> <TryAngle> In reply to @Elegantbeef "You can do `proc": doesnt' it require the N: static[int]?
[02:21:27] <FromDiscord> <Elegantbeef> No those are composite type classes iirc
[02:21:39] <FromDiscord> <Elegantbeef> Nim allows generics to drop `[]` and will infer it
[02:22:12] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Ji0
[02:22:27] <FromDiscord> <TryAngle> or even leave out the T also?
[02:22:30] <FromDiscord> <Elegantbeef> Not what i meant you need `N` for sVector
[02:22:57] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ji1
[02:23:14] <FromDiscord> <TryAngle> ah I see
[02:23:40] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Ji2
[02:23:46] <FromDiscord> <Elegantbeef> Yes it should
[02:23:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ji3
[02:23:53] <FromDiscord> <TryAngle> ok I'll try thanks
[02:24:04] <FromDiscord> <Elegantbeef> That's a typeclass of composite type classes
[02:24:52] <FromDiscord> <Elegantbeef> Composite typeclasses are very useful when you dont need the type parameters or if they have the same API
[02:25:04] <FromDiscord> <TryAngle> ah wait I just noticed lol↵I can't do that anyways because I need to initialize the seq for AVector anyaywas...
[02:25:29] <FromDiscord> <Elegantbeef> I dont follow
[02:27:50] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Ji5
[02:28:22] <FromDiscord> <TryAngle> while with `SVector`, I can directly edit the result because the length is known at compile time
[02:28:27] <FromDiscord> <Elegantbeef> I dont see how that's an issue, you can do per type logic like i showed above
[02:28:53] <FromDiscord> <Elegantbeef> But if everything is different there is no reason to make them all in a single proc
[02:28:55] <FromDiscord> <TryAngle> In reply to @Elegantbeef "I dont see how": of course but that's essentially still two impls of the same thing in my case
[02:29:05] <FromDiscord> <TryAngle> t_t
[02:29:28] <FromDiscord> <Elegantbeef> Yea if the entire logic has 0 overlap then two overloaded procs is best
[02:29:37] <FromDiscord> <Elegantbeef> Otherwise use type conditional logic
[02:30:35] <FromDiscord> <TryAngle> if there only was a way to infer size of a seq at compile time 🤔 ↵does that even make sense, from a compiler perspective?
[02:40:40] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 268 seconds)
[02:47:18] <FromDiscord> <Elegantbeef> One could technically figure out if a seq depends on runtime information and if not replace it with an array
[02:48:01] <FromDiscord> <Elegantbeef> But that requires a ton of fun logic and reasoning
[02:52:19] *** Joins: xet7 (~xet7@user/xet7)
[02:57:07] <FromDiscord> <kaddkaka> God Jul! 🙂 New nimmer here 👋 ↵How do I iterate over an array in reverse order?
[02:58:13] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator/blob/master/src/slicerator.nim#L42-L50 there is no built in way but you can easily make an iterator or use a package that provides it
[03:01:16] <FromDiscord> <kaddkaka> In reply to @Elegantbeef "https://github.com/beef331/slicerator/blob/master/s": Is that a package that is packaged with nim, or more of an example?
[03:01:53] <FromDiscord> <Elegantbeef> It's a package on git you can use if you want, but you can always just copy my code and paste it
[03:02:15] <FromDiscord> <Elegantbeef> I'm not going to hunt down people that dont abide by the MIT license in a small regard 😀
[03:04:18] <FromDiscord> <Elegantbeef> If you were to want to use it since it's not in nimble you'd `nimble install https://github.com/beef331/slicerator` then `import slicerator`, though i think there are nimble packages that do it
[03:05:38] <FromDiscord> <Leonardo da Vinci> Random question
[03:05:54] <FromDiscord> <Leonardo da Vinci> can i use OpenGL or SDL2 with Nim?
[03:06:16] <FromDiscord> <demotomohiro> Yes
[03:06:52] <FromDiscord> <Elegantbeef> It's a system language if you could'nt we'd be in big trouble
[03:08:15] <FromDiscord> <demotomohiro> https://nimble.directory/↵Search opengl or sdl
[03:08:35] <FromDiscord> <Leonardo da Vinci> Thanks bro!
[03:09:27] <FromDiscord> <demotomohiro> There are 3 or more  OpenGL bindings for Nim.
[03:11:00] <FromDiscord> <kaddkaka> In reply to @Elegantbeef "It's a package on": thanks! 🙂 btw, are you a bot? o.O
[03:11:12] <FromDiscord> <Elegantbeef> I'm using the matrix bridge
[03:11:22] <FromDiscord> <Elegantbeef> So i'm just infinitely cooler
[03:11:44] <FromDiscord> <Elegantbeef> Atleast that's what my mom tells me
[03:13:41] <FromDiscord> <kaddkaka> 👍
[03:16:53] <FromDiscord> <retkid> is uh, arrayMancer... useable?
[03:17:02] <FromDiscord> <retkid> or should i continue to try and use math to optimize this problem
[03:17:09] <FromDiscord> <Elegantbeef> Nah mratsim wrote it just cause he was having a gigle
[03:17:22] <FromDiscord> <Elegantbeef> Spent all that time making code that doesnt do anything
[03:17:40] <FromDiscord> <retkid> it was a funny shitpost, not real AI
[03:18:05] <FromDiscord> <retkid> but seriously, I know nothing about that world
[03:18:34] <FromDiscord> <Elegantbeef> Have you checked out scinim's stuff
[03:19:30] <FromDiscord> <retkid> it all looks very useful but I dont use because I dont wanna learn new things, but then spend large amount of times writing my own functions which are less effective
[03:19:47] <FromDiscord> <Elegantbeef> Well i dont know what to say
[03:20:24] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Jib
[03:20:27] <FromDiscord> <retkid> i've been staring at this example for a while
[03:20:30] <FromDiscord> <retkid> still haven
[03:21:11] <FromDiscord> <retkid> im gonna continue to try and find patterns in this data, this looks like last resort stuff to me
[03:21:43] <FromDiscord> <retkid> I wish there was a way to make collapsible messages in discord, so people wouldn't see that giant wall
[03:22:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jic
[03:22:46] <FromDiscord> <Elegantbeef> Jokes cause he finds the tuple unpacking more unreadable for declaration
[03:23:25] <FromDiscord> <retkid> In reply to @Elegantbeef "*Jokes cause he finds": See, im afraid to post my code here because of this. I fear people being inside of my mind-brain
[03:23:40] <FromDiscord> <Elegantbeef> Oh noes someone might make a joke
[03:23:46] <FromDiscord> <Elegantbeef> Most of my code is OSS so go shit on it
[03:24:04] <FromDiscord> <retkid> well, its less of shitting on it
[03:24:19] <FromDiscord> <retkid> its more that "this bitch doesn't like this, they like this
[03:24:20] <FromDiscord> <retkid> (edit) "this" => "this""
[03:24:25] <FromDiscord> <retkid> its like your in my mindddd"
[03:24:26] <FromDiscord> <retkid> (edit) "mindddd"" => "mindddd\"
[03:24:28] <FromDiscord> <retkid> (edit) "mindddd\" => "minddd"
[03:24:32] <FromDiscord> <Rika> We all are
[03:24:34] <FromDiscord> <Elegantbeef> Oh noes
[03:24:40] <FromDiscord> <Elegantbeef> We dont actually exist
[03:24:49] <FromDiscord> <retkid> get out of there
[03:24:57] <FromDiscord> <retkid> GO AWAY NIM DEMONS
[03:24:58] <FromDiscord> <Rika> Nah it’s comfy and warm here
[03:25:10] <FromDiscord> <Elegantbeef> Pretty empty though
[03:25:29] <FromDiscord> <retkid> its probably pretty crampt
[03:25:45] <FromDiscord> <Rika> Only because it’s so smooth
[03:26:36] <FromDiscord> <Leonardo da Vinci> Can i use nim with geany?
[03:26:38] <FromDiscord> <Rika> I think I killed him
[03:27:00] <FromDiscord> <Rika> In reply to @Leonardo da Vinci "Can i use nim": What’s stopping you? I don’t know what Geany is exactly other than it’s for Java I think
[03:27:22] <FromDiscord> <retkid> In reply to @Rika "I think I killed": her
[03:27:41] <FromDiscord> <Leonardo da Vinci> In reply to @Rika "What’s stopping you? I": I use geany for everything
[03:28:03] <FromDiscord> <Rika> Then why do you think you can’t use Nim in there 😛
[03:28:13] <FromDiscord> <retkid> geany has weird nim stuff
[03:28:17] <FromDiscord> <retkid> but i think you can
[03:28:46] <FromDiscord> <Elegantbeef> It has Nim support
[03:28:48] <FromDiscord> <Elegantbeef> It's a shitty editor imo though
[03:28:58] <FromDiscord> <Elegantbeef> Though that's neither here nor there
[03:29:17] <FromDiscord> <Leonardo da Vinci> In reply to @Rika "Then why do you": Idk if i can set up the compiler and linker commands for num
[03:29:45] <FromDiscord> <Elegantbeef> I mean is `nim c ./myfile.nim` really that hard?
[03:30:14] <FromDiscord> <Rika> No linker needed technically
[03:30:25] <FromDiscord> <Leonardo da Vinci> In reply to @Rika "No linker needed technically": Why?
[03:30:40] <FromDiscord> <Rika> Nim calls the linker on compile
[03:30:46] <FromDiscord> <Rika> It doesn’t have a separate linker step
[03:31:21] <FromDiscord> <retkid> ik im weird but i like to edit in my terminal and compile and test in a separate terminal with htop open to monitor ram
[03:31:37] <FromDiscord> <Elegantbeef> I mean people use nvim as an editor so not that weird
[03:31:45] <FromDiscord> <retkid> (edit) "terminal" => "ide"
[03:31:55] <FromDiscord> <retkid> no i dont know vim
[03:31:58] <FromDiscord> <Rika> What the fuck
[03:31:58] <FromDiscord> <Elegantbeef> I've always just used the terminal interface aswell
[03:32:07] <FromDiscord> <Rika> Rude
[03:33:08] <FromDiscord> <Leonardo da Vinci> @Rika rika thanks for the help
[03:33:35] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jie
[03:33:49] <FromDiscord> <TryAngle> does that work?
[03:33:54] <FromDiscord> <Elegantbeef> No
[03:34:05] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/923727693063807056/Screenshot_2021-12-23_19_03_10.png
[03:34:08] <FromDiscord> <Elegantbeef> `xSeq` is a runtime value, nim doesnt know it "comes from static"
[03:34:24] <FromDiscord> <retkid> In reply to @retkid "": my elite setup
[03:34:26] <FromDiscord> <TryAngle> In reply to @Elegantbeef "`xSeq` is a runtime": that's what I thought, what have been cursed otherwise lol
[03:34:36] <FromDiscord> <TryAngle> (edit) "what" => "would"
[03:34:40] <FromDiscord> <demotomohiro> Generic parameters must be determined at compile time
[03:35:56] <FromDiscord> <retkid> personally I really like kali rn
[03:35:57] <FromDiscord> <retkid> idk
[03:46:42] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "I mean is `nim": it gives me error somehow
[03:47:07] <FromDiscord> <Leonardo da Vinci> Never mind
[03:49:12] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "It's a shitty editor": Why?
[03:49:23] <FromDiscord> <TryAngle> when nim compiles a project that depends on libraries↵how are the libraries compiled?↵Only the used code, only the imported code or all?
[03:52:06] <FromDiscord> <auxym> Nim always run dead code elimination, ie, code that is not used is not included in the binary
[03:52:29] <FromDiscord> <TryAngle> ok ty
[03:52:55] <FromDiscord> <Elegantbeef> Presently it checks all the code but only uses what's used
[03:53:52] <FromDiscord> <Elegantbeef> There are two PRs for different implementations of "lazysem" which decrease compile times by only semantically checking what's used
[03:54:21] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jih
[03:54:35] <FromDiscord> <TryAngle> or does the value get cloned
[03:55:03] <FromDiscord> <Elegantbeef> It's coped but NVRO can take place
[03:55:11] <FromDiscord> <TryAngle> what is NVRO ?
[03:55:28] <FromDiscord> <Elegantbeef> The result variable is rewritten as the variable you're assigning to
[03:55:59] <FromDiscord> <TryAngle> I mean, isnt' taht what the result variable is used for 😅 ?
[03:56:21] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jii
[03:56:53] <FromDiscord> <Elegantbeef> Remember you can do `echo 1 + 2`
[03:56:57] <FromDiscord> <Elegantbeef> There is no NVRO there
[03:57:31] <FromDiscord> <Elegantbeef> It's NRVO and i'm an idiot
[03:58:32] <FromDiscord> <Elegantbeef> It depends on the call site if it's NRVO'd but yes procs can be 0 copy
[03:59:02] <FromDiscord> <TryAngle> ok thanks
[03:59:49] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jik
[04:00:13] <FromDiscord> <TryAngle> ah wait, does that not make sense? should I just use seq in this case?
[04:00:24] <FromDiscord> <Elegantbeef> Indeed
[04:00:38] <FromDiscord> <Elegantbeef> openarrays can only be returned from openarrays
[04:00:54] <FromDiscord> <TryAngle> hmmm when I use the zip function with Vector then
[04:01:05] <FromDiscord> <TryAngle> does it know to use use the toSeq converter?
[04:01:26] <FromDiscord> <TryAngle> no 😢
[04:01:34] <FromDiscord> <Leonardo da Vinci> It works!!!! https://media.discordapp.net/attachments/371759389889003532/923734608443494440/unknown.png
[04:01:44] <FromDiscord> <Elegantbeef> `toSeq` can use an iterator
[04:01:48] <FromDiscord> <Elegantbeef> Well they all can use an iterator
[04:02:09] <FromDiscord> <Elegantbeef> Nah it doesnt your editor isnt in english 😛
[04:02:46] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jim
[04:03:09] <FromDiscord> <Elegantbeef> Oh right `seqUtils` uses `openArray`
[04:03:25] <FromDiscord> <Elegantbeef> It's best to make your own iterator based stuff methinks
[04:03:40] <FromDiscord> <TryAngle> yes so I should just implement my own zip?
[04:04:05] <FromDiscord> <Elegantbeef> Probably
[04:04:07] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "Nah it doesnt your": idk how to change it, i recently installed mint
[04:04:22] <FromDiscord> <Elegantbeef> Eh i was joking
[04:06:38] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "Eh i was joking": Yeah, but i like having everything on one language, english
[04:07:38] <FromDiscord> <Elegantbeef> No idea
[04:07:46] <FromDiscord> <Elegantbeef> Language settings are probably in settings
[04:08:52] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:12:15] <FromDiscord> <Leonardo da Vinci> what is the command to make nim compile to C source code?
[04:12:15] <FromDiscord> <Rika> In reply to @TryAngle "I already have ": Pairs iterator is wrong
[04:12:23] <FromDiscord> <Rika> In reply to @Leonardo da Vinci "what is the command": nim cc
[04:12:37] <FromDiscord> <Rika> Source code only? Technically doesn’t exist
[04:12:44] <FromDiscord> <Leonardo da Vinci> In reply to @Rika "Source code only? Technically": why?
[04:12:57] <FromDiscord> <Rika> Because Nim is not designed like that
[04:13:15] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:13:19] <FromDiscord> <Elegantbeef> You can make it output C code
[04:13:23] <FromDiscord> <Leonardo da Vinci> i see
[04:13:32] <FromDiscord> <Rika> That’s the technically part
[04:13:43] <FromDiscord> <Elegantbeef> `nim c -c --nimcache:someDir/"` but it's only needed for a small variety of situations
[04:13:56] <FromDiscord> <Elegantbeef> Nim is not a C generator is Araq's view
[04:14:00] <FromDiscord> <Elegantbeef> Nim uses C as an IR
[04:14:12] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[04:14:14] <FromDiscord> <Rika> It’s a lot of our views as well I’d say
[04:14:47] <FromDiscord> <Elegantbeef> There was(is) an header generated but it's not support
[04:14:51] <FromDiscord> <Elegantbeef> generator\
[04:16:01] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "Nim uses C as": What is IR?
[04:16:18] <FromDiscord> <Rika> Intermediate representation
[04:16:34] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "You can make it": how?
[04:16:54] <FromDiscord> <Rika> In reply to @Elegantbeef "`nim c -c --nimcache:someDir/"`": This
[04:17:27] <FromDiscord> <Elegantbeef> Intermediate representation
[04:18:05] <FromDiscord> <Elegantbeef> I already showed how
[04:18:06] <FromDiscord> <Rika> Late
[04:18:10] <FromDiscord> <Rika> Late x2
[04:18:27] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/923738859559321620/image.png
[04:18:30] <FromDiscord> <Elegantbeef> Matrix bridge shat the bed
[04:18:46] <FromDiscord> <Rika> Lol
[04:19:03] <FromDiscord> <Elegantbeef> Comically your late messages didnt even shoot through
[04:19:39] <FromDiscord> <Rika> Damnit
[04:19:47] <FromDiscord> <Leonardo da Vinci> In reply to @Elegantbeef "`nim c -c --nimcache:someDir/"`": it doesn't work
[04:19:51] <FromDiscord> <Elegantbeef> There we go it's catching up
[04:20:00] <FromDiscord> <ElegantBeef> It does work you still need to supply the nim file
[04:20:00] <FromDiscord> <Rika> How does it not work?
[04:20:09] <FromDiscord> <Rika> Who are you
[04:20:21] <FromDiscord> <Leonardo da Vinci> In reply to @ElegantBeef "It does work you": aaaaa
[04:20:24] <FromDiscord> <Leonardo da Vinci> i am so dumb
[04:20:28] <FromDiscord> <Rika> Lol
[04:20:30] <FromDiscord> <Leonardo da Vinci> In reply to @Rika "Who are you": Me
[04:20:40] <FromDiscord> <ElegantBeef> Someone annoyed by the bridge being slow
[04:21:18] <FromDiscord> <ElegantBeef> The funny part is that the "X user is typing" is even delayed
[04:21:23] <FromDiscord> <Rika> Lol
[04:21:29] <FromDiscord> <Rika> So your internet is slow
[04:21:35] <FromDiscord> <ElegantBeef> Nah my internet is fast
[04:21:40] <FromDiscord> <ElegantBeef> The bridge shits the bed occasionally
[04:22:42] <FromDiscord> <ElegantBeef> Well my internet is relatively fast, 500MBps down
[04:23:17] <FromDiscord> <Rika> If it ain’t gigabit it’s slow
[04:23:45] <FromDiscord> <ElegantBeef> Indeed
[04:23:52] <FromDiscord> <ElegantBeef> Half gigabit is half fast so it's slow
[04:24:19] <FromDiscord> <Elegantbeef> Oh i think we've caught up
[04:24:57] <FromDiscord> <Leonardo da Vinci> i have half a megabyte :_(
[04:25:02] <FromDiscord> <Leonardo da Vinci> (edit) ":_(" => "😦"
[04:28:54] <FromDiscord> <TryAngle> In reply to @Rika "Pairs iterator is wrong": true it shouldn't be var Vector rioght?
[04:29:19] <FromDiscord> <Rika> The for loop part I mean
[04:29:27] <FromDiscord> <Rika> The mutability is one issue
[04:29:28] <FromDiscord> <Elegantbeef> `for x in 0..<vec.len`
[04:38:51] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Jir
[04:38:57] <FromDiscord> <retkid> https://tenor.com/view/chefs-kiss-french-chef-perfect-dish-excellent-food-perfection-gif-20341505
[04:39:02] <FromDiscord> <TryAngle> In reply to @Rika "The for loop part": what is worng in the loop?
[04:39:14] <FromDiscord> <Elegantbeef> The iterator is wrong
[04:39:19] <FromDiscord> <TryAngle> ah 0..len - 1
[04:39:23] <FromDiscord> <TryAngle> or 0..<len
[04:39:26] <FromDiscord> <Elegantbeef> You do `for x in vec.len()` that's not valid unless `len` is a `range`
[04:39:42] <FromDiscord> <retkid> i do 0 .. len()-1
[04:39:44] <FromDiscord> <retkid> dunno why
[04:39:46] <FromDiscord> <retkid> looks better
[04:41:19] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Jis
[04:41:22] <FromDiscord> <retkid> as if they ever were
[04:43:08] *** Joins: stosby (~sicrs@118.99.110.156)
[04:43:23] *** Parts: stosby (~sicrs@118.99.110.156) ()
[04:45:42] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Jiu
[04:45:49] <FromDiscord> <retkid> (edit) 
[04:47:06] <FromDiscord> <retkid> its probably temporary code thats why i dont care at all
[04:47:46] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jiv
[04:48:24] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3Jiv" => "https://play.nim-lang.org/#ix=3Jiw"
[04:48:30] <FromDiscord> <Elegantbeef> Mine is non copying
[04:48:41] <FromDiscord> <Elegantbeef> It doesnt create a new collection to iterate
[04:48:59] <FromDiscord> <TryAngle> ah I see, but why is that not in std 🤔
[04:49:14] <FromDiscord> <Elegantbeef> Cause it was broken until 1.6 and makes things a bit more awkward
[04:49:34] <FromDiscord> <TryAngle> lol↵so it got "just fixed" ?
[04:49:40] <FromDiscord> <TryAngle> like 2 weeks ago
[04:49:45] <FromDiscord> <TryAngle> (edit) "2" => "some"
[04:50:12] <FromDiscord> <Elegantbeef> Yes i fixed it a few months ago and it was released with 1.6
[04:50:23] <FromDiscord> <Elegantbeef> Previously `[]` could not be used for a iterator
[04:51:12] <FromDiscord> <TryAngle> oh ok
[04:51:32] <FromDiscord> <TryAngle> so will that get be added into std potentially in the future?
[04:51:39] <FromDiscord> <TryAngle> (edit) 04removed "get"
[04:51:42] <FromDiscord> <Elegantbeef> No clue
[04:51:50] <FromDiscord> <Elegantbeef> It makes things more annoying like i mentioned
[04:51:56] <FromDiscord> <TryAngle> just curious, because cloning an entire collection just for iterations sounds weird
[04:52:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Jix
[04:52:21] <FromDiscord> <TryAngle> ah true xd
[04:52:55] <FromDiscord> <Elegantbeef> I had the idea of doing `for i, x in a[&1..2]` for pairs
[04:53:09] <FromDiscord> <Elegantbeef> Or any other unary operator
[04:53:10] <FromDiscord> <Elegantbeef> Everything is overly cryptic
[04:53:33] <FromDiscord> <Elegantbeef> presently i decided on `for i, x in a.pairs(1..2)`
[04:54:43] <FromDiscord> <Elegantbeef> I suppose i could also do `for i, x in a[1, 2]`
[04:55:17] <FromDiscord> <Elegantbeef> The issue is it's all rather cryptic
[04:56:39] <FromDiscord> <Elegantbeef> I'm open to suggestions
[05:01:33] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[05:02:53] <FromDiscord> <evoalg> In reply to @TryAngle "I already have ": I want to play around with these, but how should I define the Vector type?
[05:04:32] <FromDiscord> <evoalg> In reply to @Elegantbeef "presently i decided on": I like `a.pairs(1..2)` for it's readability
[05:06:04] <FromDiscord> <IsaacPaul> Is there anyway to access unexposed fields? I'm looking to add mutable unsafeGet to Option[T]
[05:06:55] <FromDiscord> <Elegantbeef> `std/importutils`
[05:07:12] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jiz
[05:11:13] <FromDiscord> <evoalg> In reply to @TryAngle "uhm what do you": When you make your zip iterator, I'd be interested in seeing it ... and are you going to make it accept more than 2 Vectors or is that not possible?
[05:11:35] <FromDiscord> <IsaacPaul> Awesome! works like a charm
[05:11:59] <FromDiscord> <IsaacPaul> ... just realized how weird that expression is
[05:12:48] <FromDiscord> <Elegantbeef> You technically dont need to use `privateAccess` but it's a tad bit easier 😀
[05:13:26] <FromDiscord> <evoalg> it's all magic to me, as long as I import the correct spells
[05:15:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JiF
[05:15:33] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JiG
[05:15:36] <FromDiscord> <Elegantbeef> it practically does the same thing as private access but doesnt rely on the compiler magic that is privateaccess
[05:15:39] <FromDiscord> <TryAngle> @evoalg
[05:16:00] <FromDiscord> <TryAngle> nothing spectectular
[05:16:21] <FromDiscord> <evoalg> Thank you!
[05:16:40] <FromDiscord> <TryAngle> I haven't tested the [T, U] ones though
[05:22:08] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3JiJ
[05:22:26] <FromDiscord> <Elegantbeef> Had to think about how to do this for a minute, but general purpose zip that works on any iterable
[05:23:55] <FromDiscord> <Elegantbeef> You can always replace `iterable` with \`untyped
[05:24:08] <FromDiscord> <Elegantbeef> Then you dont need `items` but `elementType` wont work properly with all types
[05:24:57] <FromDiscord> <Elegantbeef> The real nice thing is you can just use any iterable `let f = zip(d.pairs, c.items)` works for instance
[05:25:56] <FromDiscord> <IsaacPaul> https://github.com/izackp/questionable/commit/a7343fc8d3ee9ba3507b2b89d075270959ae16c5↵↵If anyone is interested I added support for void procs and procs that take mutable arguments for `questionable` . Honestly, kinda sad how much effort like 15 lines of code was 😂
[05:26:19] <FromDiscord> <IsaacPaul> but i understand templates and macros better so I guess that's a win
[05:26:36] <FromDiscord> <Elegantbeef> You may want to go with the macro method instead of private access since `importutils` is only 1.6+
[05:26:57] <FromDiscord> <Elegantbeef> Especially since `status-im` aims at `1.2.x`
[05:27:06] <FromDiscord> <IsaacPaul> ah alright
[05:27:21] <FromDiscord> <Elegantbeef> Assuming you are going to PR that is
[05:28:14] <FromDiscord> <IsaacPaul> I'm not sure if the author is a fan of these changes. There's already a closed ticket dismissing it
[05:28:17] *** Joins: vicfred (~vicfred@user/vicfred)
[05:28:20] <FromDiscord> <Elegantbeef> Ah
[05:28:23] <FromDiscord> <Elegantbeef> Then carry on
[05:28:58] <FromDiscord> <Elegantbeef> Though it's a nice example of `sym`s if you want to look into how what i sent you works 🙂
[05:29:36] <FromDiscord> <IsaacPaul> gotcha, I'll probably put it in just in case someone finds it useful
[05:31:03] <FromDiscord> <Elegantbeef> \is presently trying to reason how to make a iterator compliant `zip`
[05:32:26] <FromDiscord> <Rika> You would need to make one for every number of seqs
[05:32:48] <FromDiscord> <Elegantbeef> Nah forloop macro
[05:32:58] <FromDiscord> <evoalg> In reply to @Elegantbeef "Had to think about": amazing thank you ... python's zip can take any number of lists and it will zip them in one go ... we can't do that in nim right?
[05:33:02] <FromDiscord> <Elegantbeef> The only issue is that you cannot do it without iterating like i did above
[05:33:15] <FromDiscord> <Elegantbeef> Oh you can do that evo
[05:33:22] <FromDiscord> <Rika> Macro
[05:33:37] <FromDiscord> <Elegantbeef> It's the same logic as above but you just keep applying step 2
[05:33:47] <FromDiscord> <Elegantbeef> I might aswell make a macro for it
[05:33:50] <FromDiscord> <Elegantbeef> Throw it in slicerator
[05:35:03] <FromDiscord> <evoalg> but does it need to know how many iterables are passed? ... what if one day I wanted to zip 15 of them in one go?
[05:35:22] <FromDiscord> <Elegantbeef> I'll have it done in a minute, be patient my boy
[05:35:46] <FromDiscord> <evoalg> I will try, father
[05:38:49] <nrds> <06Prestige99> Running into a compiler error, trying to figure out where to even start looking to debug this. https://play.nim-lang.org/#ix=3JiP
[05:38:54] <nrds> <06Prestige99> Beef any thoughts?
[05:41:43] <FromDiscord> <Rika> Mismatched glibc version?
[05:42:11] <nrds> <06Prestige99> hm passing in --threads:on seems to have worked but I'm not explicitly using threads in my code
[05:42:32] <nrds> <06Prestige99> glibc 2.33-5
[05:42:32] <FromDiscord> <Rika> What’s the code
[05:42:59] <nrds> <06Prestige99> It's a game engine I'm writing, I deleted some code and now I'm getting that when attempting to compile
[05:43:41] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JiQ
[05:43:54] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3JiQ" => "https://play.nim-lang.org/#ix=3JiR"
[05:45:21] <nrds> <06Prestige99> I'll try it on CI and see what happens, since that environment hasn't changed
[05:47:42] <nrds> <06Prestige99> https://app.circleci.com/pipelines/github/avahe-kellenberger/shade/38/workflows/6b5303bb-93eb-415e-97d0-beae6904d683/jobs/36?invite=true#step-111-47 on CI, would should correspond to https://github.com/avahe-kellenberger/shade/blob/custom-physics/src/shadepkg/game/node.nim#L152 ?
[05:48:15] <nrds> <06Prestige99> It's the same code on another branch which compiles though, so. Not sure what's up
[05:48:34] <FromDiscord> <Elegantbeef> Ugh iterable issues strike again
[05:49:55] <nrds> <06Prestige99> Can you see https://app.circleci.com/pipelines/github/avahe-kellenberger/shade/38/workflows/6b5303bb-93eb-415e-97d0-beae6904d683/jobs/36 ?
[05:51:22] <nrds> <06Prestige99> oh hell I think I do need --threads:on to use locks
[05:51:35] <FromDiscord> <Elegantbeef> Yes
[05:51:58] <nrds> <06Prestige99> Why does it compile on another branch without --threads:on 🤔
[05:52:22] <FromDiscord> <Elegantbeef> I could be wrong
[05:55:24] <FromDiscord> <retkid> i know i only have a vague idea of what a thread scheduler is, but im gonna make one tomorro
[05:55:26] <FromDiscord> <retkid> (edit) "tomorro" => "tomorrow"
[05:56:11] <FromDiscord> <retkid> i feel like it would be more efficient to instead of threading the process, run 4 of them independently
[05:56:27] <FromDiscord> <retkid> (edit) "independently" => "independently, and communicate"
[05:56:30] <FromDiscord> <retkid> (edit) "i feel like it would be more efficient to instead of threading the process, run 4 of them independently, and communicate ... " 03added "via a manager"
[05:56:54] <FromDiscord> <Elegantbeef> @evoalg\: here you go https://play.nim-lang.org/#ix=3JiT
[05:57:17] <FromDiscord> <Elegantbeef> Sadly doesnt use `iterable` as a limiter so has less than useful errors if you do something dumb
[05:57:35] <FromDiscord> <retkid> also collect() is so cool i wish i knew about it
[05:57:59] <FromDiscord> <retkid> i like that you can make it return a tuple and just add data to it without changing its type manuall
[05:58:14] <FromDiscord> <retkid> (edit) "manuall" => "manually"
[05:58:18] <FromDiscord> <Elegantbeef> Using a int literal instead of an iterator does `https://hatebin.com/gdhcdacerq`
[05:58:30] <FromDiscord> <Elegantbeef> So it's a mess but it does the goal
[06:00:22] <FromDiscord> <evoalg> That's very impressive @ElegantBeef thank you!
[06:00:56] <FromDiscord> <Elegantbeef> Well zip is rather programmatic compliant
[06:01:18] <FromDiscord> <evoalg> "programmatic compliant" means what?
[06:01:29] <FromDiscord> <Elegantbeef> My logic i wrote for the template is all i'm doing here, just generating the tail end with code
[06:02:10] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JiU
[06:02:46] <FromDiscord> <Elegantbeef> More iterators just means more of those and setting `i = 0` after resizing
[06:03:16] <FromDiscord> <Elegantbeef> The macro afterall is just that template but written by code instead of by me 😛
[06:04:58] <FromDiscord> <evoalg> hehe that makes sense (even if I don't know macro's, and I don't understand the code). It's amazing how you can do this stuff so fast
[06:05:01] <FromDiscord> <Elegantbeef> I feel like a quip of "The key of writing macros is identifying patterns and saying to your computer 'i'm to lazy to write this, you've got it ok'" 😛
[06:05:01] <FromDiscord> <retkid> i can use threads to represent specific cores right?
[06:05:07] <FromDiscord> <retkid> or well, threads
[06:05:18] <FromDiscord> <Elegantbeef> Threads you interact with are software threads
[06:05:32] <FromDiscord> <Elegantbeef> You can pin threads to a specific hardware thread but it's pointless
[06:05:41] <FromDiscord> <retkid> why is it pointless?
[06:06:04] <FromDiscord> <Elegantbeef> Cause you might have a lot of operations on that hardware thread and by pining to that thread you're now waiting for that to clear up
[06:06:12] <FromDiscord> <Elegantbeef> Instead of just waiting for the next available thread
[06:06:16] <FromDiscord> <retkid> what if thats the point
[06:06:33] <FromDiscord> <Elegantbeef> You want high latency?
[06:07:03] <FromDiscord> <retkid> if you know the operation will use up 100% of the resources on the thread, you run each process on each thread and reassign them as they complete
[06:07:26] <FromDiscord> <Elegantbeef> You do realize the OS still schedules other stuff right?
[06:07:54] <FromDiscord> <retkid> well if they didn't then it wouldn't work because the thread the controller sits on wouldn't operate
[06:08:14] <FromDiscord> <retkid> (edit) "well if they didn't then it wouldn't work because the thread the controller sits on wouldn't operate ... " 03added "besides that one task"
[06:08:30] <FromDiscord> <retkid> I dont see how thats relevant you're never going to get 100% control of a cpu
[06:09:04] <FromDiscord> <Elegantbeef> Eitherway there is `pinToCpu` so feel free to use it
[06:09:11] <FromDiscord> <retkid> just avoid running the same function on the same core because otherwise it'll be less efficient
[06:09:27] <FromDiscord> <retkid> (edit) "just avoid running the same function on the same core because otherwise it'll be less efficient ... " 03added "(maybe)"
[06:09:42] <FromDiscord> <retkid> (edit) "(maybe)" => "(maybe, need to test)"
[06:10:14] <FromDiscord> <ajusa> Is there any way to tell Nim not to link against a library? I want to remove the `-lm` that Nim adds to link against libm
[06:14:58] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:42:38] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:56:56] <FromDiscord> <impbox [ftsf]> are you sure it is?
[06:57:03] <FromDiscord> <impbox [ftsf]> where do you see that happening?
[07:07:48] <FromDiscord> <ajusa> In reply to @impbox "where do you see": is this intended for me or retkid? If it's for me, I see that happening when the linking command fails, Nim prints out the command. I've been working on using cosmopolitan libc, and as it is an alternative implementation I need to avoid linking against libm and link against cosmopolitan instead.
[07:08:42] <FromDiscord> <impbox [ftsf]> In reply to @ajusa "is this intended for": for you, when i compile a simple nim script it doesn't link against libm
[07:10:18] <FromDiscord> <impbox [ftsf]> are you importing math?
[07:10:23] <FromDiscord> <ajusa> In reply to @impbox "for you, when i": Hm, it does this on a more complex project (using zippy, parsetoml, and other libraries). I'd wager that it is something in the stdlib that is causing that
[07:10:34] <FromDiscord> <ajusa> In reply to @impbox "are you importing math?": probably somewhere a dependency is yes
[07:10:44] <FromDiscord> <impbox [ftsf]> https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/math.nim#L126
[07:11:13] <FromDiscord> <TennisBowling> is there any way to know what gcc command nim is invoking?
[07:11:24] <FromDiscord> <ajusa> In reply to @impbox "https://github.com/nim-lang/Nim/blob/version-1-6/li": Thanks, I know where to patch that out now! I should have checked there to begin with lol, common sense.
[07:11:47] <FromDiscord> <Rika> In reply to @TennisBowling "is there any way": Doesn’t it use whatever matches GCC on the path
[07:12:04] <FromDiscord> <impbox [ftsf]> --listCmd
[07:12:06] <FromDiscord> <Elegantbeef> I think they mean "what does it call gcc with"
[07:12:08] <FromDiscord> <Elegantbeef> The answer is yes
[07:12:09] <FromDiscord> <TennisBowling> yeah what args
[07:12:39] <FromDiscord> <Rika> Doesn’t it get printed by default?
[07:12:44] <FromDiscord> <Rika> At least on 1.6
[07:12:50] <FromDiscord> <impbox [ftsf]> `--listCmd` will print it out
[07:12:54] <FromDiscord> <TennisBowling> thank you
[07:20:53] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[07:21:50] *** Joins: redj (~quassel@74.15.230.188)
[07:23:16] *** Quits: redj (~quassel@74.15.230.188) (Client Quit)
[07:24:25] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[07:39:14] <FromDiscord> <_Ash> Hey people I am new here
[07:39:25] <FromDiscord> <Elegantbeef> Hello
[07:47:38] *** Joins: vicfred (~vicfred@user/vicfred)
[07:53:30] <FromDiscord> <Rika> Hello new here
[08:02:33] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[08:23:14] <FromDiscord> <Elegantbeef> No you're not dont lie
[08:33:22] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:33:57] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[09:06:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[09:44:53] <NimEventer> New thread by Gtriangle: High memory usage with large number of HashSets.  3X more memory than Python, see https://forum.nim-lang.org/t/8732
[10:21:07] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[10:22:38] *** Joins: sagax (~sagax_nb@user/sagax)
[11:26:16] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[11:27:36] *** Joins: jkl (~jkl@user/jkl)
[11:58:54] <FromDiscord> <_Ash> Beginner guide to Nim please
[11:59:26] <FromDiscord> <Elegantbeef> https://nim-lang.org/documentation.html
[12:00:22] <FromDiscord> <Elegantbeef> https://nim-by-example.github.io/getting_started/ http://ssalewski.de/nimprogramming.html
[12:00:38] <FromDiscord> <Elegantbeef> That should have you covered for all knowledge/skill levels
[12:01:37] <NimEventer> New thread by Cnerd: Nim smtp library, see https://forum.nim-lang.org/t/8733
[12:04:27] <FromDiscord> <Solitude> In reply to @_Ash "Beginner guide to Nim": damn, now people type their google searches here...
[12:04:46] <FromDiscord> <Elegantbeef> And some assholes indulge it
[13:27:52] <NimEventer> New thread by Niminem: Require Nim devel branch as dependency (nimble), see https://forum.nim-lang.org/t/8734
[13:32:58] <FromDiscord> <qb> How do I concat two `cstring`s?
[13:34:07] <FromDiscord> <qb> well nvm. Gonna concat normal strings and use .cstring after
[13:49:46] <FromDiscord> <hmmm> In reply to @Solitude "damn, now people type": they also added a "please" to appease the human algorithm, this is top level google-fu
[13:51:43] <FromDiscord> <qb> Results are even the same https://media.discordapp.net/attachments/371759389889003532/923883129184342087/Bildschirmfoto_von_2021-12-24_11-20-51.png
[14:35:11] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[14:36:20] *** Joins: flynn (~mcbloch@user/flynn)
[14:38:47] *** Joins: neceve (~quassel@2.26.93.228)
[14:43:48] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:44:58] *** Joins: flynn (~mcbloch@user/flynn)
[14:49:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:50:33] *** Joins: flynn (~mcbloch@user/flynn)
[15:14:11] <FromDiscord> <planetis> so in C free(NULL) is ok, but dealloc(nil) crashes in Nim
[15:16:25] *** Joins: audiophile_ (~audiophil@user/audiophile)
[15:40:52] <Zevv> use -d:usemalloc :)
[15:42:14] <NimEventer> New thread by Mantielero: Issue with operator `·`, see https://forum.nim-lang.org/t/8735
[15:52:16] <NimEventer> New thread by Kcvinu: Original source of Mingw64, see https://forum.nim-lang.org/t/8736
[16:16:18] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[16:20:53] *** Joins: Vladar (~Vladar@46.162.2.53)
[17:06:26] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[17:07:36] *** Joins: flynn (~mcbloch@user/flynn)
[17:27:39] <FromDiscord> <Zoom> Can I somehow variably `include` something? Surprisingly, it wants a literal, const doesn't cut it.
[17:37:17] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[17:37:34] <FromDiscord> <Rika> include is "before <whats traditionally called> compile time" afaik
[17:37:52] <FromDiscord> <Solitude> In reply to @Zoom "Can I somehow variably": bunch of `when`'s dont cut it?
[17:40:42] <FromDiscord> <Zoom> Not sure they help at all. I'd like to generate a part of the program in a static block and include it later.↵(@Solitude)
[17:41:08] <FromDiscord> <Zoom> I was hoping I could save the results in a temp file and pass the path to include
[17:41:51] <FromDiscord> <Solitude> and why file path cant stay static?
[17:42:09] <FromDiscord> <Rika> why do you need to save it in a file if you can just emit the code from a macro
[17:42:36] <FromDiscord> <Rika> or `macrocache` which holds nimnodes afaik
[17:52:21] <FromDiscord> <Zoom> Because I want to modify a file in memory, so source filters won't work (they are required to be inserted into a file)
[17:53:24] <FromDiscord> <Solitude> i dont get it
[17:53:26] <FromDiscord> <Solitude> use a macro
[17:56:07] <FromDiscord> <Zoom> Thanks. Just "no" would suffice though.↵(@Solitude)
[17:57:10] <FromDiscord> <Zoom> For now I use `transformFile` from `pegs` and save to a hardcoded path, and later include. I don't like hardcoding paths and would like to use `tempfiles` for this.
[17:58:27] <FromDiscord> <Rika> Then no
[18:00:55] <NimEventer> New question by ChrisoLosoph: Reversing Bytes and cross compatible binary serialization in Nim, see https://stackoverflow.com/questions/70473879/reversing-bytes-and-cross-compatible-binary-serialization-in-nim
[18:06:42] <FromDiscord> <Solitude> In reply to @Zoom "Thanks. Just "no" would": you could just use a macro for you hack tho↵`macro includeStr(m: static[string]): untyped = newStmtList nnkIncludeStmt.newTree newLit m↵`
[18:10:36] <FromDiscord> <Zoom> Thanks!
[18:10:47] <FromDiscord> <pmunch> You can, that's basically what Futhark does
[18:29:38] <FromDiscord> <planetis> how do I run a task from a .nimble file without nimble? its nim e x.nimble but what about the task?
[18:55:38] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:56:48] *** Joins: flynn (~mcbloch@user/flynn)
[19:15:18] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[19:16:28] *** Joins: flynn (~mcbloch@user/flynn)
[19:21:37] <FromDiscord> <Fish-Face> is there no `pairs` iterator for `iterable[T]`? or am I just missing an import
[19:21:42] *** Joins: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de)
[19:22:02] <yann-kaelig> Hello
[19:22:14] <yann-kaelig> Do you know an XMPP library for Nim ?
[19:29:39] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:30:50] *** Joins: flynn (~mcbloch@user/flynn)
[19:40:11] <FromDiscord> <Solitude> In reply to @Fish-Face "is there no `pairs`": pairs is iterable[T]
[19:43:03] <FromDiscord> <Fish-Face> sent a code paste, see https://play.nim-lang.org/#ix=3Jme
[19:43:15] <FromDiscord> <Solitude> what
[19:43:21] <FromDiscord> <Solitude> what are you trying to do
[19:43:40] <FromDiscord> <Fish-Face> `for i, line in something.splitLines:`
[19:43:56] <FromDiscord> <Solitude> https://nim-lang.org/docs/enumerate.html#enumerate.m%2CForLoopStmt
[19:46:19] <FromDiscord> <Fish-Face> huh. thanks. i find the inconsistency odd though
[19:46:39] <FromDiscord> <Solitude> which one
[19:49:48] <FromDiscord> <Fish-Face> that you can do this with `.pairs` on `OpenArray` and many other types, but not on `iterable`.
[19:51:47] <FromDiscord> <Solitude> iterable can only be used as template argument
[20:06:27] <FromDiscord> <IsaacPaul> Yea i found it odd too the first time it was mentioned here
[20:11:25] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Jms
[20:12:26] <FromDiscord> <IsaacPaul> (edit) "https://play.nim-lang.org/#ix=3Jms" => "https://play.nim-lang.org/#ix=3Jmt"
[20:20:04] <FromDiscord> <IsaacPaul> Not that it's an answer to your question, but just more _odd_ behavior imo
[20:20:36] <FromDiscord> <Solitude> there is no zip iterator?..
[20:27:03] <FromDiscord> <IsaacPaul> ah I'm dumb I forgot I was using one I wrote. My point was that it's odd for seq and iterator behave differently https://play.nim-lang.org/#ix=3Jmw
[20:57:06] <NimEventer> New thread by Gcao: Question about debugging issue related to GC, see https://forum.nim-lang.org/t/8738
[22:27:56] <FromDiscord> <TryAngle> Merry Christmas everyone thanks for helping me out a lot recently 😊
[22:30:07] <yann-kaelig> merry chrostmas
[22:30:20] <yann-kaelig> merry christmas
[22:30:28] <yann-kaelig> lol, to much drink :D
[22:30:46] *** Parts: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de) ()
[22:59:14] <FromDiscord> <IsaacPaul> bahaha
[23:27:56] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3Jn2
[23:28:17] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3Jn2" => "https://play.nim-lang.org/#ix=3Jn3"
[23:29:18] <FromDiscord> <Solitude> they both must be known at compile time
[23:31:14] <FromDiscord> <Yardanico> yeah, as Solitude said, `typedesc` is really just an alternative syntax for making procedures generic :)
[23:31:31] <FromDiscord> <Yardanico> for each different type passed to `test` Nim will instantiate a proc with that type
[23:33:01] <FromDiscord> <retkid> how do i do return types in nim
[23:33:11] <FromDiscord> <retkid> rpoggojh
[23:33:11] <FromDiscord> <retkid> wait
[23:33:15] <FromDiscord> <retkid> ignore that
[23:33:28] <FromDiscord> <Solitude> irc remembers
[23:33:31] <FromDiscord> <Yardanico> @retkid why do you delete messages? that doesn't make any sense
[23:33:33] <FromDiscord> <retkid> shhh
[23:33:36] <FromDiscord> <Yardanico> your messages will still be there in IRC
[23:33:43] <FromDiscord> <Yardanico> and it just makes the conversation harder to follow if a part of it is deleted
[23:33:46] <FromDiscord> <retkid> In reply to @Yardanico "<@!217459674700578816> why do you": i dont exist in the irc void
[23:33:47] <FromDiscord> <Yardanico> in a public place like here
[23:33:54] <FromDiscord> <retkid> how am i suppose to know that though
[23:33:57] <FromDiscord> <Yardanico> hm, can I disallow normal members from deleting messages here? 🤔
[23:34:09] <FromDiscord> <retkid> you cannot
[23:34:15] <FromDiscord> <retkid> anyway
[23:34:21] <FromDiscord> <Rosen> Yes you can
[23:34:23] <FromDiscord> <Rosen> I think?
[23:34:31] <FromDiscord> <retkid> i never seen it
[23:34:40] <FromDiscord> <retkid> (edit) "i" => "ive"
[23:34:41] <FromDiscord> <Yardanico> yeah you can't apparently
[23:34:50] <FromDiscord> <Yardanico> but anyway it's there in IRC, so by deleting messages you only make the conversation harder to follow here
[23:34:59] <FromDiscord> <retkid> anyway
[23:35:10] <FromDiscord> <retkid> how do i return types with Threads again?
[23:35:15] <FromDiscord> <Yardanico> what?
[23:35:41] <FromDiscord> <retkid> uhhhhh how do i create a thread in nim and use the proc called's return
[23:35:49] <FromDiscord> <retkid> ie
[23:35:57] <FromDiscord> <Yardanico> https://nim-lang.org/docs/threads.html#examples
[23:36:12] <FromDiscord> <retkid> yea i saw
[23:36:16] <FromDiscord> <retkid> that proc has no return
[23:36:43] <FromDiscord> <retkid> i dont know why you linked that...
[23:36:50] <FromDiscord> <Yardanico> In reply to @retkid "that proc has no": you can't do that directly
[23:37:01] <FromDiscord> <Yardanico> threadpool provides a way of doing it, but it's kind of abandoned and outdated
[23:37:16] <FromDiscord> <Yardanico> you should store the results in some global variable or pass a pointer or something for the thread to store the result in
[23:37:21] <FromDiscord> <retkid> I usually use threadpool but i need to maniuplate affinity
[23:38:09] <FromDiscord> <retkid> so basically, channels?
[23:38:32] <FromDiscord> <retkid> alrighty, time for some nifty fine channels
[23:38:39] <FromDiscord> <Yardanico> I didn't just say channels, there are other ways too
[23:50:36] <FromDiscord> <TryAngle> thanks for explanation @Yardanico @Solitude
[23:53:44] <FromDiscord> <TryAngle> when I have a type that has `len` as a field↵is there a way to add a proc with the same name?
[23:56:19] <FromDiscord> <Solitude> yes, just add it
