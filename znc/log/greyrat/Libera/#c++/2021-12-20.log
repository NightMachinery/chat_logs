[00:00:55] *** ormaaj2 is now known as ormaaj
[00:02:57] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[00:03:26] *** Quits: rahl (~rahl@102.114.58.55) (Ping timeout: 252 seconds)
[00:05:19] *** Joins: rahl (~rahl@102.114.14.201)
[00:07:00] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[00:10:40] *** Joins: smach (~savio@177.12.49.3)
[00:19:57] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:24:24] *** Quits: smach (~savio@177.12.49.3) (Remote host closed the connection)
[00:24:46] *** Joins: AmR| (~AmREiSa@156.199.5.112)
[00:25:17] *** Quits: AmR (~AmREiSa@156.207.199.106) (Ping timeout: 240 seconds)
[00:28:29] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Quit: leaving)
[00:29:19] *** AmR| is now known as AmR
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:35:43] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[00:36:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[00:36:39] *** Joins: nomo (~nomo@95.87.208.95)
[00:37:52] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[00:38:37] *** Quits: phoenix (phoenix@user/phoenix) (Ping timeout: 240 seconds)
[00:38:57] *** Joins: phoenix (phoenix@user/phoenix)
[00:49:14] *** Joins: gjvc (~gjvc@29.68.246.35.bc.googleusercontent.com)
[00:51:23] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb3:a1b7:6fb3:1939)
[00:51:23] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb3:a1b7:6fb3:1939) (Changing host)
[00:51:23] *** Joins: skapata (~Skapata@user/skapata)
[00:54:48] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[00:56:09] *** Joins: badone (~badone@209.132.189.152)
[00:56:36] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[01:06:16] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:06:28] *** Quits: Burgundy (~yomon@79.115.213.171) (Remote host closed the connection)
[01:06:52] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:18:10] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:18:57] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[01:18:59] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:22:51] *** Joins: immibis (~hexchat@62.156.144.218)
[01:24:26] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[01:29:55] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[01:30:59] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[01:34:15] *** Joins: stonkey (~stonkey@user/stonkey)
[01:34:50] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[01:34:50] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Quit: Leaving)
[01:35:53] *** Joins: andreasbuhr (~quassel@p549db336.dip0.t-ipconnect.de)
[01:39:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:53] *** ChanServ sets mode: +v npaperbot
[01:41:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 245 seconds)
[01:42:49] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[01:44:12] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) ()
[01:46:49] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:52:40] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[02:00:37] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[02:06:17] *** Quits: magla (~gelignite@55d4bf95.access.ecotel.net) (Quit: Stay safe!)
[02:08:14] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[02:10:21] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:12:19] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[02:17:33] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[02:21:17] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54f844-160.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:21:29] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Quit: WeeChat, the better IRC client, https://weechat.org/)
[02:23:32] *** Quits: rahl (~rahl@102.114.14.201) (Ping timeout: 240 seconds)
[02:24:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:24:51] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[02:26:38] *** Quits: Guest3076 (~Guest30@66.115.252.46) (Quit: Client closed)
[02:27:58] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[02:30:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[02:31:10] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[02:33:30] *** Quits: pizdets_ (~pizdets@183.182.111.198) (Ping timeout: 260 seconds)
[02:33:56] *** Joins: pizdets (~pizdets@183.182.111.2)
[02:34:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[02:36:32] *** Quits: winningluser (~wl@2601:8c1:80:70d0::e17b) (Quit: nyaa~)
[02:39:27] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:46:07] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[02:49:19] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:53:06] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:53:57] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[02:56:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[02:58:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[02:58:52] *** Joins: Enitin (~Enitin@82.102.22.84)
[02:58:57] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[03:01:50] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:05:46] *** Quits: nomo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[03:06:26] *** Quits: phoenix (phoenix@user/phoenix) (Quit: WeeChat 3.2.1)
[03:06:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[03:07:41] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:09:33] *** Joins: phoenix (~phoenix@user/phoenix)
[03:11:22] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[03:11:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[03:11:40] *** Joins: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs)
[03:12:28] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[03:18:18] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:acff:f5a2:fb9a:e3d2) (Remote host closed the connection)
[03:20:44] *** Joins: rahl (~rahl@102.114.76.77)
[03:24:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[03:29:06] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[03:30:13] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:39] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:32:01] *** Quits: andreasbuhr (~quassel@p549db336.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:39:11] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[03:40:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:54:21] *** Techcable_ is now known as Techcable
[03:56:02] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 240 seconds)
[03:58:34] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[04:00:18] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 260 seconds)
[04:01:52] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[04:03:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 240 seconds)
[04:05:41] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:18] *** Joins: rgrinberg (~textual@187.223.26.102)
[04:29:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:76ff:6d0a:27ec:c880) (Ping timeout: 240 seconds)
[04:34:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[04:38:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[04:39:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:43:10] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:43:14] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[04:50:02] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[04:52:27] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[04:56:40] *** Quits: Jonno_FTW (~come@api.carswap.me) (Changing host)
[04:56:40] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[05:00:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[05:01:22] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[05:03:16] *** Joins: Viewday111 (~Viewday@user/viewday)
[05:04:09] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:05:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[05:05:20] *** Viewday111 is now known as Viewday11
[05:07:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[05:12:42] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:13:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[05:14:03] *** Joins: frost (~frost@user/frost)
[05:14:59] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[05:18:23] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[05:18:57] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[05:19:30] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 256 seconds)
[05:30:34] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[05:30:59] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:33:04] *** Joins: Viewday118 (~Viewday@user/viewday)
[05:34:39] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:34:39] *** Viewday118 is now known as Viewday11
[05:39:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:55] *** ChanServ sets mode: +v npaperbot
[05:40:22] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:41:28] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[05:41:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[05:42:24] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:42:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[05:42:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:46:11] *** Quits: Pook (~Pook@2001:8a0:f996:1400:8110:cdd5:5f21:6ca9) (Quit: Leaving)
[05:47:38] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 260 seconds)
[05:51:35] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[05:51:43] *** Joins: ferdna (~ferdna@user/ferdna)
[05:52:34] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[05:52:45] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[05:53:45] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[05:59:49] *** Quits: rgrinberg (~textual@187.223.26.102) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:00:29] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[06:02:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[06:02:26] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:07:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:08:33] *** Joins: xardas (~xardas@149.233.51.127)
[06:11:16] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 268 seconds)
[06:13:08] <xardas> Can anyone spot the error here ? https://wandbox.org/permlink/zj6hD55J4HM7mxm2
[06:13:29] <xardas> Everything seems to be correct.
[06:15:30] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Quit: Leaving)
[06:16:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[06:23:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[06:23:26] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[06:24:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[06:25:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:25:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[06:25:56] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[06:27:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[06:30:17] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[06:31:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[06:32:23] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[06:36:48] *** Quits: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs) (Quit: Leaving)
[06:37:57] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[06:39:31] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[06:53:24] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[06:54:43] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[06:54:47] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[06:54:53] *** Joins: smach (~savio@177.12.49.3)
[06:55:21] *** Quits: smach (~savio@177.12.49.3) (Remote host closed the connection)
[06:59:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[07:00:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:02:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:04:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:04:33] *** Joins: foul_owl (~kerry@94.140.8.107)
[07:04:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[07:07:01] *** Joins: smach (~savio@177.12.49.3)
[07:07:02] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:10:17] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[07:10:47] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:11:07] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Remote host closed the connection)
[07:12:51] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[07:12:55] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:13:28] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:20:26] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3dfc:e337:c0f:541a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:33:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[07:35:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:37:12] *** Quits: msk (~msk@103.213.213.70) (Ping timeout: 256 seconds)
[07:37:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:38:01] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:38:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[07:40:07] *** Quits: foul_owl (~kerry@94.140.8.107) (Quit: WeeChat 2.3)
[07:40:26] *** Joins: foul_owl (~kerry@94.140.8.107)
[07:42:16] *** Quits: foul_owl (~kerry@94.140.8.107) (Client Quit)
[07:43:14] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:43:38] *** Joins: foul_owl (~kerry@94.140.8.107)
[07:44:02] *** Joins: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com)
[07:44:27] <spidermonkey54> ```using A = const B* (C::*)(D);```
[07:44:32] <spidermonkey54> A is pointer to member function of class C taking a D and returning a pointer to a constant B
[07:44:48] <spidermonkey54> is  `const B* (C::*)(D);` called a signature?
[07:45:02] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:48:24] *** Quits: foul_owl (~kerry@94.140.8.107) (Client Quit)
[07:48:42] *** Joins: foul_owl (~kerry@94.140.8.107)
[07:57:36] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 256 seconds)
[07:59:52] *** Quits: foul_owl (~kerry@94.140.8.107) (Quit: WeeChat 2.3)
[08:00:19] *** Joins: foul_owl (~kerry@94.140.8.107)
[08:03:17] <RandomReader> no, it's a type (of pointer-to-member-function)
[08:03:59] <RandomReader> a signature is specifically a function name (and associated namespace) along with its parameter types
[08:04:37] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[08:05:11] <RandomReader> sometimes you'll see "signature" used differently just in casual language, but as far as the standard is concerned, it's about a particular named function
[08:06:54] <RandomReader> (it's basically the criteria used to distinguish functions from each other)
[08:07:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[08:09:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:10:05] <spidermonkey54> but doesn't this match you definition? `const B* (C::*)(D);` it contains only the parameter types and doesn't have a return type
[08:10:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:10:50] <RandomReader> no, because it's not a named function, or even a function type (it's a pointer type)
[08:11:33] <RandomReader> void foo(int) and void bar(int) are different signatures (different function names)
[08:12:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[08:12:13] <RandomReader> again, sometimes you'll see people talk about those as the same "signature" casually, meaning they care about the types it can be called with .. but the standard has a specific definition: https://eel.is/c++draft/defns.signature
[08:13:14] <spidermonkey54> i see, how about this? void (*)(int); a pointer to a function that takes in an int, but it doesn't have a name
[08:13:21] <spidermonkey54> so its a signature?
[08:13:25] <RandomReader> that's still just a pointer type
[08:14:06] <spidermonkey54> I don't get it, what do you mean by a pointer type? can you give me an exmaple of a signature then
[08:14:19] <RandomReader> why are you asking? is there some material you're looking at elsewhere that's confusing?
[08:14:28] <RandomReader> I just did a few lines ago, with "foo" and "bar"
[08:15:03] <RandomReader> specific, individual functions have signatures .. types do not, pointers do not
[08:15:20] <RandomReader> because the function name is part of its signature
[08:15:21] <spidermonkey54> so a signature  can't include pointers?
[08:16:02] <RandomReader> it could include a pointer as an argument type, but a pointer-to-function is not a signature itself, no
[08:17:05] <spidermonkey54> so then what would you call `void (*)(int);` ?
[08:17:10] <RandomReader> a type
[08:17:18] <spidermonkey54> what is the type?
[08:17:43] <RandomReader> pointer to function accepting one parameter of type int and returning void/nothing
[08:17:50] <smallville7123> spidermonkey54: a signature is just a fancy way of identifying a function for use with overload resolution to ensure two functions do not clash and are not ambiguous (tho it does not prevent ambiguos templates)
[08:17:54] <RandomReader> as in, that entire line I just said is the type
[08:18:02] <RandomReader> it's not pieces of it, that whole description is
[08:18:13] <spidermonkey54> i see
[08:18:52] <spidermonkey54> Thanks for clarifying
[08:19:22] <RandomReader> welcome
[08:19:51] <smallville7123> eg __ZNSt3__19allocatorIN10MultiTouch14TouchContainerEE10deallocateEPS2_m is a (mangled) function signature
[08:20:19] <smallville7123> ans so is __ZNSt3__19allocatorIN10PSL_TRACER6tracerINS1_13tracer_traitsILb0ELb1ELm2ELm8EEEE8LocationEE9constructIS6_JRKS6_EEEvPT_DpOT0_
[08:20:34] <smallville7123> and __ZNSt3__18__iom_t6C1Ei is one too
[08:21:38] <smallville7123> C++ mangles (everything?) by default when compiled tho i do not know if it is required to do so by a compiler
[08:22:08] <smallville7123> you can prevent mangling by using     extern "C"
[08:22:29] <smallville7123> which is required for dlopen and others to work since C itself does no such mangling
[08:23:23] <smallville7123> tho you COULD pass the mangled function to dlsym, eg dlsym(table, "__ZNSt3__18__iom_t6C1Ei"); tho would probably be UB as mangling is usually standard/implementation/compiler dependant
[08:23:41] <RandomReader> if it helps, in terms of general categories, it's a "function pointer type", a "pointer type", and it's also an "object type" (pointers are objects that hold location values, so any category of pointer is also an object type)
[08:24:03] <smallville7123> eg the same function compiled by different compilers and standards could produce different mangled names
[08:25:18] <smallville7123> tho im not sure what else is also mangled with C++ so i just assume everything is mangled unless extern C'd
[08:25:54] <smallville7123> (eg both variables and functions and lambda and templates and structs and so on are all name mangled)
[08:26:27] <spidermonkey54> Wanted to add one more thing, https://stackoverflow.com/questions/290038/is-the-return-type-part-of-the-function-signature
[08:26:34] <spidermonkey54> says return type isn't part of the signtaure
[08:26:40] <smallville7123> nope
[08:26:52] <smallville7123> since a function CANNOT be overloaded by return type alone
[08:27:14] <spidermonkey54> but `void foo(int) and void bar(int) ` both have the return type `void`
[08:27:40] <smallville7123> generally for a function to be successfully overloaded the function signatures MUST be different in some way
[08:27:46] <smallville7123> spidermonkey54: yes
[08:28:07] <smallville7123> foo and bar are DIFFERENT functions tho
[08:28:14] <spidermonkey54> so then how can they be signature if they have a return type
[08:28:21] <smallville7123> eg they have different names
[08:28:31] <smallville7123> one is foo, the other is bar
[08:28:51] <spidermonkey54> so if there was only one of them then `foo(int)` iquialifies as a signature?
[08:28:56] <smallville7123> the return type is not part of the signature
[08:29:27] <RandomReader> sorry, I was a little sloppy there, I meant they "have" different signatures
[08:29:32] <smallville7123> also you cannot overload by parameter name either
[08:29:49] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[08:29:49] <RandomReader> I was trying to highlight the function names, by giving something that looked like an entire function
[08:29:52] <smallville7123> eg foo(int a); foo(int b); // compile error, foo(int) and foo(int)
[08:29:54] <spidermonkey54> i see so in `void foo(int)`, the ` foo(int)` part is the actual signature
[08:30:04] <RandomReader> yes
[08:30:04] <smallville7123> yes
[08:30:07] <spidermonkey54> got it
[08:30:28] <smallville7123> the paramater names CAN be ommited in the decleration but MUST be included in the definition
[08:30:53] <spidermonkey54> i see
[08:31:05] <smallville7123> eg void foo(int); /* decl */       void foo (int dwef) {} /* definition */
[08:31:25] <RandomReader> (names are not required in definitions either, you just can't do anything useful with the parameter without naming it)
[08:31:36] <smallville7123> RandomReader: yea
[08:32:04] <smallville7123> cus i often see stuff like foo(int /* unused */) { ... }
[08:32:42] <smallville7123> also an overloaded virtual function CAN have a different return type
[08:33:36] <smallville7123> eg class A { virtual int foo(int); }          class B : A { virtual float foo(int) override; }
[08:34:23] <smallville7123> even class C : B { virtual void foo(int) override; }
[08:34:42] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[08:34:49] <smallville7123> since again the return type is not part of the signature
[08:34:53] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:38:10] <RandomReader> that's not quite right
[08:38:12] <RandomReader> geordi: class A { virtual int foo(int); };  class B : A { virtual float foo(int) override; };
[08:38:13] <geordi> error: conflicting return type specified for 'virtual float B::foo(int)'
[08:38:57] <RandomReader> for virtual function overrides, the return type needs to be covariant: https://eel.is/c++draft/class.virtual#8
[08:39:22] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[08:39:37] *** Joins: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs)
[08:39:42] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[08:41:29] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[08:42:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[08:49:12] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:59:32] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[09:09:42] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[09:12:55] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[09:13:51] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[09:14:22] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:14:42] *** Joins: bindu (~bindu@user/bindu)
[09:24:48] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:30:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:31:18] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[09:36:14] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:38:12] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[09:39:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:54] *** ChanServ sets mode: +v npaperbot
[09:43:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:45:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[09:48:12] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[09:49:35] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:50:42] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Quit: Quit)
[09:55:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:57:59] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[10:06:58] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:09:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[10:12:43] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:bad0:8910:44c9:da61) (Remote host closed the connection)
[10:13:08] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a)
[10:15:49] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[10:16:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[10:17:16] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:17:57] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:29:13] *** Joins: toastloop (toastloop@user/toastloop)
[10:31:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:32:10] *** Quits: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[10:32:44] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:33:26] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[10:43:53] *** Joins: andreasbuhr (~quassel@p549dba39.dip0.t-ipconnect.de)
[10:43:53] *** Quits: andreasbuhr (~quassel@p549dba39.dip0.t-ipconnect.de) (Client Quit)
[10:48:49] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[10:53:12] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:00:08] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:07:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[11:07:39] *** Joins: Enitin (~Enitin@82.102.22.85)
[11:09:08] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:09:28] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[11:10:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:11:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[11:11:46] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[11:12:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[11:12:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[11:12:57] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 240 seconds)
[11:13:33] *** Joins: rendar (~rendar@user/rendar)
[11:18:35] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:27:02] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:27:09] *** Joins: nomo (~nomo@95.87.208.95)
[11:29:01] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:34:34] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:41:36] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:43:11] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[11:44:03] *** Parts: chenqisu1 (~bhca7d@183.217.201.63) ()
[11:44:18] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[11:48:53] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[11:49:50] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[11:50:38] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:53:23] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:53:46] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:58:06] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Quit: Leaving)
[11:58:19] *** Joins: tryte (~nelg@183.17.124.167)
[11:58:23] *** Joins: chenqisu1 (~bhca7d@183.217.201.63)
[11:59:02] *** Joins: chenqisu12 (~bhca7d@183.217.201.63)
[12:00:26] *** Joins: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3)
[12:00:46] *** Parts: tryte (~nelg@183.17.124.167) ()
[12:07:22] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:13:03] *** Quits: chenqisu1 (~bhca7d@183.217.201.63) (Quit: Leaving)
[12:22:51] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[12:23:05] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[12:23:19] *** Joins: malloy (~jimery@116.30.221.255)
[12:23:39] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[12:24:30] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:b90c:86ca:3fd:ed2a) (Quit: Leaving)
[12:26:39] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:28:16] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[12:34:12] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 240 seconds)
[12:38:28] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[12:42:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:45:17] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[12:46:16] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Remote host closed the connection)
[12:46:28] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[12:46:31] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[12:47:30] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:48:08] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[12:48:25] *** Joins: frost (~frost@user/frost)
[12:51:12] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:58:54] *** Quits: chenqisu12 (~bhca7d@183.217.201.63) (Read error: Connection reset by peer)
[13:00:17] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[13:05:48] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[13:07:07] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[13:12:52] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[13:17:08] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[13:17:53] *** Joins: plastico (~plastico@neomutt/plastico)
[13:19:30] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:21:15] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[13:21:40] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[13:22:18] *** Quits: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406) (Ping timeout: 256 seconds)
[13:22:20] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[13:22:29] *** Joins: cpuid (~cpuid@co5.at)
[13:22:29] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[13:22:29] *** Joins: cpuid (~cpuid@user/cpuid)
[13:23:09] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[13:28:42] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[13:28:54] *** Joins: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs)
[13:29:46] *** Joins: PJBoy (~PJBoy@2a00:23c7:8302:b301:d6d:796b:7506:1186)
[13:29:46] *** Quits: PJBoy (~PJBoy@2a00:23c7:8302:b301:d6d:796b:7506:1186) (Changing host)
[13:29:46] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:17] *** Quits: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[13:39:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:54] *** ChanServ sets mode: +v npaperbot
[13:40:31] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Read error: Connection reset by peer)
[13:41:38] *** Joins: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc)
[13:45:37] *** Quits: bauripalash (~bauripala@2401:4900:382d:27bd:1:1:d2e9:2bc) (Ping timeout: 240 seconds)
[13:47:33] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[13:49:19] *** Joins: fredi (~fredi@189.6.232.131)
[13:49:58] *** Joins: sysctl (~sysctl@88.215.77.255)
[13:50:21] *** Joins: furrymcgee (~devuan@cgn-89-1-208-9.nc.de)
[13:50:37] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[13:52:51] *** Joins: msk (~msk@103.213.213.70)
[13:52:54] *** Quits: rgrinberg (~textual@2806:101e:1:27a5:b170:6e98:8314:62d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:53:17] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[13:56:00] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[13:56:03] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:81c1:fdbc:2b2:4c4a)
[13:56:56] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:58:05] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 268 seconds)
[14:01:44] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:02:30] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:2898:525a:5805:3485)
[14:02:30] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:2898:525a:5805:3485) (Changing host)
[14:02:30] *** Joins: skapata (~Skapata@user/skapata)
[14:02:49] *** Quits: smach (~savio@177.12.49.3) (Quit: Leaving)
[14:06:04] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:07:05] *** Joins: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11)
[14:10:16] *** Quits: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11) (Read error: Connection reset by peer)
[14:13:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:14:26] *** Joins: pascal (~SIGILL@user/pascal)
[14:16:12] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[14:16:13] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[14:17:50] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:17:53] *** Joins: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11)
[14:18:02] *** Quits: bauripalash (~bauripala@2401:4900:382e:8809:1:1:e2e2:7d11) (Client Quit)
[14:21:33] <fredi> since I failed to find an OpenMP channel, I'll try to ask it here. the following link relates: https://stackoverflow.com/questions/70414004/openmp-with-good-performance-in-c-function-but-not-in-c-class-method
[14:22:45] <TinoDidriksen> OpenMP is off topic here. Maybe ask #C++-general
[14:23:02] <fredi> TinoDidriksen  thanks for the pointers
[14:30:18] *** Joins: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf)
[14:31:09] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:32:45] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[14:35:03] *** Joins: slidercrank (~slidercra@user/slidercrank)
[14:38:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[14:39:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:43:38] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:44:52] *** Quits: toastloop (toastloop@user/toastloop) (Quit: Leaving)
[14:45:16] *** Joins: ko (~i.am@user/marlboro)
[14:47:17] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[14:47:45] *** Joins: cursey (~cursey@user/cursey)
[14:47:52] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:49:07] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:49:49] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:55:57] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[15:02:35] *** Joins: seninha (~seninha@user/seninha)
[15:05:59] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:06:20] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[15:06:39] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:09:18] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:25:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[15:26:23] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[15:26:42] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:30:22] *** Quits: fredi (~fredi@189.6.232.131) (Ping timeout: 256 seconds)
[15:38:53] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:42:25] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[15:46:37] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[15:50:54] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[15:53:52] *** Joins: kashyaprushi (~kashyapru@106.210.232.35)
[15:58:39] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:08:08] *** Joins: kashyaprushi_ (~kashyapru@2401:4900:1ff6:7cdf:ea19:6ca0:48e2:d592)
[16:08:20] *** Quits: kashyaprushi (~kashyapru@106.210.232.35) (Ping timeout: 256 seconds)
[16:11:17] *** Joins: xiongxin (~Thunderbi@119.123.101.209)
[16:11:25] *** Joins: tryte (~nelg@183.17.124.167)
[16:16:47] *** Joins: alanjian85[m] (~alanjian8@2001:470:69fc:105::1:523f)
[16:19:19] *** kashyaprushi_ is now known as kashyaprushi
[16:20:24] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[16:20:34] *** Quits: tryte (~nelg@183.17.124.167) (Quit: leaving)
[16:21:28] *** Joins: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net)
[16:23:16] <Schrostfutz> Hi, I'm experiencing a weird issue with a std::vector. I'm getting inconsistent output from the debugger about it's contents (empty, but size == 1), and an segfault when iterating over it. I am not sure how I managed to mess it up this much, or that's possible, I never modified it beyond addign/removing elements, and modifying a copy of it returned via const ref using typical algorithms. Do you have any ideas on this?
[16:23:17] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[16:26:13] <fiesh> can you produce a testcase?
[16:26:53] <fiesh> have you tried running a _GLIBCXX_DEBUG build / ubsan build / address sanitizer build?
[16:27:09] <fiesh> the former will almost certainly shed light on where you're messing it up
[16:28:06] <PJBoy> I bet it's a case of using reserve and assuming it resizes the vector
[16:28:35] <Schrostfutz> I do not (consciously) use reverse. I already do debug builds, but no address sanitizer build, I'll look into that.
[16:28:36] <fiesh> or push_back and assuming iterators stay valid
[16:28:44] <fiesh> not reverse but reserve
[16:29:27] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:29:50] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[16:29:51] <Schrostfutz> Ah, neither do I use that
[16:30:02] <fiesh> a _GLIBCXX_DEBUG build is definitely preferable to a sanitize build
[16:30:36] <PJBoy> > modifying a copy of it returned via const ref
[16:30:39] <PJBoy> that sounds suspect
[16:30:53] <fiesh> lol indeed that sounds fishy
[16:31:08] <PJBoy> are we talking `vector<T>& const get_vec() { vector<T> ret; /* blah */; return ret; }`?
[16:31:14] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:31:26] <PJBoy> because that would be a guaranteed bug
[16:32:06] <Schrostfutz> -_-, a clean make fixed it... Sorry!
[16:32:27] <PJBoy> ah
[16:33:21] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184)
[16:39:57] *** Joins: pulse (~pulse@user/pulse)
[16:47:04] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[16:47:26] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[16:49:41] *** Joins: wielding (~wielding@user/wielding)
[16:51:26] <pascal> I'm wondering why std::optional::transform/and_then will only be added with C++23 (p0798). It seems like a no-brainer for a type like std::optional. Did the WG just miss that or was the language lacking something pre-23?
[16:51:50] <TinoDidriksen> [p0798]
[16:51:50] <npaperbot> P0798R8: [Library] Monadic operations for std::optional <https://wg21.link/p0798r8> (by Sy Brand) (2021-10-15) (Related: https://wg21.link/p0798r8/github)
[16:53:00] <TinoDidriksen> According to the Github tracking, it wasn't finished in time for C++20.
[16:53:00] <PJBoy> 8 revisions eh
[16:53:09] *** Joins: fredi (~fredi@189.6.232.131)
[16:53:09] *** Quits: fredi (~fredi@189.6.232.131) (Client Quit)
[16:53:14] *** Joins: constxd (~brad@192.75.101.178)
[16:53:25] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:53:58] <PJBoy> looking at the changelog, yeah, nothing is ever that simple
[16:54:47] *** Joins: constxo (~brad@192.75.101.164)
[16:55:50] <PJBoy> I don't think the percentage of C++ devs looking for monadic operations is all that high anyway
[16:55:54] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[16:56:50] <PJBoy> generally the draw to C++ is performance, and so bailing out early when you get an empty optional makes more sense than chaining more operations
[16:58:17] *** Quits: constxd (~brad@192.75.101.178) (Ping timeout: 240 seconds)
[16:59:40] *** Joins: pretty_dumm_guy (~trottel@eduroam-134-96-204-6.uni-saarland.de)
[16:59:41] *** Quits: immibis (~hexchat@62.156.144.218) (Read error: Connection reset by peer)
[16:59:43] *** Joins: immibis_ (~hexchat@62.156.144.218)
[17:00:20] <pascal> Yeah. It is probably also more prominent in languages that have syntactic sugar for it
[17:01:05] <PJBoy> also that proposal is really bad
[17:01:24] <PJBoy> the table of contents in the sidebar is full of private URLs
[17:01:28] <pascal> But I would expect that a compiler generates equivalent code for optional::and_then vs. if(...)
[17:01:30] *** Joins: Leonard (~Administr@114.55.127.80)
[17:01:33] <PJBoy> and the or_else examples don't meet the or_else spec
[17:01:54] <PJBoy> it has examples spelling "map" instead of "transform"
[17:01:58] <pascal> Yepp, and the examples have ::map
[17:02:08] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[17:02:18] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6566:3224:cc66:3345)
[17:02:24] <PJBoy> if the compiler optimises the monadic operations correctly, that would be great
[17:02:44] *** Joins: proller (~p@2a02:6b8:b081:7212::1:5)
[17:02:53] *** Quits: pretty_dumm_guy (~trottel@eduroam-134-96-204-6.uni-saarland.de) (Client Quit)
[17:03:38] <PJBoy> one compelling reason to use these monadic variations is that they're overloaded for rvalues to use move semantics
[17:03:41] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:04:00] <PJBoy> the if (...) etc. version would end up requiring lots of explicit std::moves to get the same behaviour
[17:06:12] <furrymcgee> I doubt "std::optional is a very important vocabulary type in C++"
[17:07:20] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[17:07:42] <PJBoy> important enough to get into stdlib in the first place
[17:15:30] *** Quits: calm-steam (~calm-stea@user/calm-steam) (Remote host closed the connection)
[17:16:01] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[17:18:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[17:18:44] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:18:52] <rpav> it would be useful if it weren't painful to use
[17:19:22] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[17:19:35] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Remote host closed the connection)
[17:19:42] <PJBoy> I always thought optional was plenty easy to use
[17:20:33] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[17:20:41] <rpav> c++ in general doesn't really have a nice way to "chain optionals" .. e.g. the same thing basically applies if you have a bunch of `if(auto* ptr1 = getX()) { if(auto* ptr2 = ptr1->getY()) { if(auto* ptr3 = ptr2->getZ()) ...`
[17:21:05] <PJBoy> oh you're complaining about not having monadic operations
[17:21:22] <PJBoy> you'll be happy with C++23 then
[17:21:23] <rpav> i don't think that would count as monadic, because you can already implement monads
[17:22:02] <rpav> there is no way to shortcut flow control in the _calling function_ .. this is really what precludes a lot of things
[17:22:24] *** Joins: febri (~febri@140.213.59.95)
[17:22:40] <rpav> like you can implemnet things such that `a->b->c` for some operator-> aborts midway, but there's no way to _do_ anything about it
[17:22:41] *** Quits: febri (~febri@140.213.59.95) (Client Quit)
[17:23:26] *** Quits: kashyaprushi (~kashyapru@2401:4900:1ff6:7cdf:ea19:6ca0:48e2:d592) (Quit: Leaving)
[17:23:38] <rpav> 🤔
[17:23:59] *** Joins: Enitin (~Enitin@82.102.22.85)
[17:24:12] <PJBoy> did you see the optional methods they added?
[17:24:18] <PJBoy> sounds like it solves the issue
[17:24:25] <rpav> is it a bunch of .then() stuff
[17:24:33] <PJBoy> and_then, or_else and transform
[17:24:35] <rpav> because iirc that _doesn't_ solve it
[17:25:13] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[17:25:18] <PJBoy> or_else in particular lets you do something about empty optionals
[17:25:41] <PJBoy> the other two just give you null coalescence
[17:25:46] <rpav> yeah but i can _already_ write nasty blocks of ifs; adding methods to write nasty blocks of ifs doesn't help this
[17:25:59] <PJBoy> or_else doesn't require ifs
[17:26:16] <rpav> the point is it's _still ifs_
[17:26:27] <rpav> the goal is to do this without blocks of any variety, including lambdas
[17:28:19] <PJBoy> { optional<int> x; x.or_else(doh<int>); } template<typename T> optional<T> doh(auto) { cout << "d'oh"; return {}; }
[17:28:19] <geordi> error: 'class optional<int>' has no member named 'or_else'
[17:28:23] <rpav> i think there may actually be a way, thinking about a monad-ish way, but there are a lot of complicated fiddly bits with lifetime extension and the like that might be a problem
[17:28:28] <PJBoy> think that's the usage idea
[17:28:46] <PJBoy> cppreference told me GCC 12 supports these new functions >:(
[17:30:06] <PJBoy> cppreference is a liar
[17:30:38] *** Joins: JohnMS_WORK (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf)
[17:30:46] <PJBoy> although it does work on godbolt
[17:30:46] *** Joins: tryte (~tryte@2409:8954:324c:4d3a:c34d:eb16:7942:21f)
[17:30:51] *** Quits: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf) (Ping timeout: 268 seconds)
[17:31:03] <PJBoy> https://gcc.godbolt.org/z/rhaqss6ha
[17:31:15] <rpav> maybe someone swapped out geordi's visor
[17:31:24] <PJBoy> can chain out that or_else as many times as you want
[17:31:30] <PJBoy> no ifs, no lambdas
[17:31:49] <rpav> but an _entire function_ ;P
[17:31:59] <rpav> it's still a block, it's just moved elsewhere
[17:32:04] <PJBoy> I mean if you need to execute code on empty
[17:32:09] <PJBoy> then obviously you need that code written somewhere
[17:32:12] <rpav> what i want is x->y->z
[17:32:13] *** Quits: mebus (~mebus@2a00:8a60:e019:10de::ac22) (Read error: Connection reset by peer)
[17:32:31] <PJBoy> so like if you had an optional<optional<optional<T>>>?
[17:32:57] *** JohnMS_WORK is now known as JohnMS_AWAY
[17:33:07] <PJBoy> or like `optional<T> opt` and doing opt.and_then(f).and_then(f2).and_then(f3)?
[17:33:30] <PJBoy> or opt.transform(f).or_else(err1).transform(f2) etc
[17:34:25] *** JohnMS_AWAY is now known as JohnMS_WORK
[17:34:37] *** Quits: JohnMS_WORK (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf) (Client Quit)
[17:36:57] <PJBoy> actually it is missing a useful `value_or_default` function
[17:37:11] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[17:37:15] <PJBoy> `value_or_nullopt` rather
[17:37:18] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[17:37:32] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[17:37:45] <PJBoy> which would be good for the optional<optional<optional<T>>> scenario
[17:37:58] <PJBoy> if that ever comes up...
[17:38:09] <jdavfsxd> he was haskell in c++, not fake monads
[17:38:17] <jdavfsxd> s/was/wants/
[17:38:18] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:38:33] <jdavfsxd> more like do-notation or something.
[17:39:34] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[17:39:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:55] *** ChanServ sets mode: +v npaperbot
[17:40:40] <jdavfsxd> in Rust, you still have to put ?'s in the middle of the chain, x?->y?->z?
[17:40:47] <rpav> yeah the problem is C++ isn't really powerful enough to do what you need
[17:41:14] <jdavfsxd> (fwiw, there's no -> there)
[17:41:17] <PJBoy> so is that the optional<optional<optional>>> thing?
[17:41:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[17:41:44] <PJBoy> -> and ?-> aren't good enough clues to work it out
[17:42:11] <rpav> like, consider that we _could_ get some `optional_result r = when(o)-> ...;` such that somewhere in the when(o) chain "aborts" and bypasses calling the rest of the chain .. except you can't implement that
[17:42:41] <rpav> because -> _must_ return a pointer resolving to the type, you can't create a mock subclass, or return nullptr obviously
[17:43:00] <rpav> there is no other direct way to invoke a member that can be overridden
[17:43:41] <PJBoy> sounds like and_then to me
[17:43:46] <rpav> but it's not
[17:44:14] <rpav> auto r = o.when()->x.when()->y.when();
[17:44:27] <jdavfsxd> PJBoy: you can't return from caller from inside and_then's lambda.
[17:44:46] <PJBoy> that's true
[17:44:56] <rpav> you want `when()` here to return basically another optional that can be invoked, or bypassed
[17:45:22] <Alipha> if(auto opt3 = getX().transform(X::getY).transform(Y::getZ))
[17:45:25] <PJBoy> well that sounds like transform then
[17:45:50] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[17:45:51] <PJBoy> I'm sure the operations are there, I just can't tell which ones you mean
[17:45:58] <PJBoy> -> means nothing to me
[17:46:13] <rpav> Alipha: does that actually work, given a member function, and not an additional function written specifically to do that?
[17:46:40] <rpav> because the cppref page does not imply such
[17:47:50] <rpav> i.e. if you have to write a separate function just for this, it's _even shittier_ than just chaining ifs, because you can already chain ifs, and you don't have to write a separate blob of code just to support one usage of the optional
[17:48:30] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:48:55] *** Joins: mebus (~mebus@2a00:8a60:e019:10de::ac22)
[17:49:04] <jdavfsxd> thinking a bit, doesn't x->y->z just works as expected, if you wrap it with a try-catch block? You could view that as a do-block.
[17:49:43] <rpav> jdavfsxd: relying on "heavy" exceptions for simple checks is kinda bad unfortunately
[17:50:06] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[17:50:34] <Alipha> If transform is implemented using std::invoke, as I hope it would, then yes. Though I forgot the &'s, eg, &X::getY
[17:50:36] <rpav> also it doesn't work for pointers, though you could provide an infrastructure using a ptr<T> which did
[17:51:31] <PJBoy> looks like GCC's implementation is broken then
[17:51:42] <rpav> Alipha: it seems like that would need special casing for handling the `this` though
[17:52:06] <PJBoy> gcc transform vs invoke https://gcc.godbolt.org/z/h9csnxhT3
[17:52:06] <rpav> but i mean probably you could do that
[17:52:35] *** Joins: user334 (~user@p200300cdb7070300c528c51e94837680.dip0.t-ipconnect.de)
[17:53:27] <PJBoy> unless the callable is supposed to return an optional
[17:53:29] <rpav> though of course then you want like, `x = getX(); x->foo(getY()->bar());` and it all still turns ugly i think
[17:53:43] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:53:54] <PJBoy> but that still doesn't compile
[17:54:21] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:54:30] <rpav> shoehorning optionals in the language at this point is sortof at odds with the "always a given" nature of the syntax
[17:55:04] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:58:50] *** Joins: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[17:59:02] *** Quits: Green_6 (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (Read error: Connection reset by peer)
[17:59:49] <rpav> the other potential would be using operator-> to create a chain of calls, but that's not how it works, because they had no clue early on heh
[18:00:45] <rpav> if operator-> _took_ a pointer to a member function and was responsible for making the call (or not), it might be solvable
[18:01:17] <rpav> or continuation passing in general ;)
[18:02:02] *** Quits: tryte (~tryte@2409:8954:324c:4d3a:c34d:eb16:7942:21f) (Read error: Connection reset by peer)
[18:03:32] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 265 seconds)
[18:04:39] <furrymcgee> you have to operator ?: to replace if else
[18:05:30] <furrymcgee> they might throw as well
[18:06:33] <furrymcgee> you can chain them easily
[18:06:39] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[18:06:56] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[18:07:26] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:07:33] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[18:07:37] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[18:08:15] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Client Quit)
[18:08:34] *** Quits: f0xb4t (~mac@78.46.13.69) (Quit: leaving)
[18:10:45] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:15:08] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:15:39] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[18:20:11] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[18:23:33] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[18:23:33] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[18:25:10] <Alipha> rpav: https://gcc.godbolt.org/z/T9osPGGK9 or https://gcc.godbolt.org/z/jhWKcP9an depending upon if getZ returns a std::optional or not
[18:25:29] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184) (Quit: Connection closed)
[18:25:39] <Alipha> i'm disappointed &z::x doesn't work
[18:25:47] <Alipha> &Z::x
[18:26:52] <rpav> iffy but something slightly closer
[18:27:18] <rpav> i _think_ for &Z::x you could probably write a one-time template that would return the value
[18:29:31] <PJBoy> I think it's supposed to work though
[18:29:43] <Alipha> https://gcc.godbolt.org/z/KMTsKa667
[18:33:40] *** Quits: LordKalma_ (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:34:12] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[18:36:23] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:37:03] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:37:05] <rpav> godbolt is rather slow at the moment
[18:37:41] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:38:14] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[18:38:46] *** Joins: jokoon (~jokoon@185.61.188.186)
[18:39:25] <jokoon> Does implementations of map make calls to new or delete?
[18:39:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[18:41:49] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[18:42:27] <urdh> std::map pretty much has to dynamically allocate, yes
[18:44:44] <jokoon> So that means that most C++ code doesn't really need to use new or delete
[18:44:55] <jokoon> as long as one uses the STL
[18:45:53] <urdh> unless you're writing very specific library-level stuff, you probably won't ever have to write new/delete, no
[18:46:22] <urdh> prefer containers, smart pointers, etc
[18:46:54] <rpav> Alipha: https://gcc.godbolt.org/z/d66cqzn6E
[18:47:08] <rpav> Alipha: returning {} from a function returning optional returns a blank optional ;)
[18:47:39] <rpav> member<Z> is also unnecessary in that, you can just say member(&Z::x)
[18:47:45] <rpav> but just &Z::x didn't seem to work
[18:49:49] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[18:50:16] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[18:52:36] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[18:55:06] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[18:55:42] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[19:02:24] *** Quits: xiongxin (~Thunderbi@119.123.101.209) (Remote host closed the connection)
[19:02:38] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:04:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:08:55] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:12:54] <PJBoy> oh
[19:13:02] <PJBoy> the function you call can't return a reference
[19:13:53] <PJBoy> << TYPE<invoke_result_t<int S::*, S&>>; struct S { int x; };
[19:13:53] <geordi> int&
[19:14:06] <PJBoy> and invoking a pointer to data member returns a reference :(
[19:15:19] <PJBoy> still, doesn't seem like that reference should be a problem
[19:15:24] <PJBoy> but as specified, it is
[19:15:43] <jokoon> what's the point of making a unique_ptr<int[]> ?
[19:19:19] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:20:03] <rpav> the same as making a unique_ptr to anything?
[19:22:51] <PJBoy> yeah
[19:23:15] <PJBoy> could use it as the basis for a container implementation
[19:23:43] <urdh> you'd probably have some abstraction on top of it though
[19:23:48] *** Joins: Tokamak (~Tokamak@172.58.191.27)
[19:23:53] <PJBoy> could use it for IPC message storage
[19:25:42] <jokoon> so it's equivalent to a new int [21]; ?
[19:26:39] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[19:26:42] <PJBoy> :/
[19:27:32] <PJBoy> unique_ptr has several member functions, a dtor that deletes its memory, can be created via make_unique, has interactions with shared_ptr, supports custom deleters
[19:28:27] <PJBoy> !smart pointers
[19:28:28] <nolyc> Smart pointers are classes or class templates that overload operators -> and (unary) * to provide pointer-like semantics, but with added trickery often intended to achieve some level of safety (e.g. in a SBRM sense) and/or automation with regard to the handling of the pointed-to resource. Standard C++ smart pointers are std::unique_ptr and std::shared_ptr.
[19:28:56] *** Quits: Tokamak (~Tokamak@172.58.191.27) (Ping timeout: 256 seconds)
[19:28:56] *** Joins: Tokamak_ (~Tokamak@166.205.152.83)
[19:29:08] <rpav> really there ought to be `dynamic_array` that is basically vector without a fill pointer
[19:29:42] <rpav> the uses for a unique_ptr-to-array would diminish, and you'd get a lot of useful stuff
[19:30:11] *** Quits: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) (Quit: You have been kicked for being idle)
[19:30:12] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (Quit: You have been kicked for being idle)
[19:30:12] *** Quits: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) (Quit: You have been kicked for being idle)
[19:30:12] *** Quits: kikijiki[m] (~kikijiki@user/kikijiki) (Quit: You have been kicked for being idle)
[19:30:17] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[19:30:57] <PJBoy> fill pointer being the one reports size() or capacity()?
[19:31:12] *** Joins: m1cl[m] (~m1cl@2001:470:69fc:105::2d57)
[19:31:12] *** Joins: kikijiki[m] (~kikijiki@user/kikijiki)
[19:31:12] *** Joins: volgar1x (~volgar1xm@2001:470:69fc:105::e61d)
[19:31:12] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[19:31:13] *** Parts: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) ()
[19:31:14] <rpav> and changes based on fill =P
[19:31:25] <urdh> hasn't dynarray been killed twice already?
[19:31:28] *** Parts: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) ()
[19:31:31] *** Parts: volgar1x (~volgar1xm@2001:470:69fc:105::e61d) ()
[19:31:35] <rpav> probably .. it's useful
[19:31:35] *** Parts: kikijiki[m] (~kikijiki@user/kikijiki) ()
[19:31:42] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:31:49] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[19:32:08] <urdh> ([n3662], [p0210])
[19:32:08] <npaperbot> N3662: [Library] C++ Dynamic Arrays <https://wg21.link/n3662> (by L. Crowl, M. Austern) (2013-04-19)
[19:32:08] <npaperbot> P0210R0: [Library Evolution] A light-weight, dynamic array <https://wg21.link/p0210r0> (by Thomas Koeppe) (2016-01-29)
[19:32:39] <rpav> i mean really it's probably not going to save a lot unless you need a ton of them, but 🤷
[19:32:54] <urdh> a static_vector would be nice too
[19:33:09] <imMute> urdh: you mean std::array ?
[19:33:13] <rpav> if you only care about a dynamically-allocated, fixed-size array
[19:34:06] *** Quits: constxo (~brad@192.75.101.164) (Ping timeout: 260 seconds)
[19:34:15] <urdh> imMute: no, i mean a std::vector with a known maximum size that won't (re)allocate anything on the heap
[19:34:48] <rpav> interesting .. so it would throw if you tried or just be UB?
[19:35:01] *** Quits: nomo (~nomo@95.87.208.95) (Quit: Leaving)
[19:35:14] *** Joins: nomo (~nomo@95.87.208.95)
[19:35:48] <urdh> the use case would be embedded so throwing would not be ideal
[19:35:51] *** Quits: nomo (~nomo@95.87.208.95) (Client Quit)
[19:36:06] <PJBoy> dynarray looks good actually
[19:36:14] <rpav> urdh: yeah that's what makes me wonder
[19:36:18] <urdh> (basically this, in any case: https://www.etlcpp.com/vector.html)
[19:36:31] <PJBoy> it doesn't support uninitialised elements, which still makes it not a full replacement for new[]
[19:36:49] <rpav> with no error mechanism not sure how good
[19:37:36] *** Joins: smach (~savio@177.12.49.3)
[19:38:20] <PJBoy> that second paper allows for resizing, not as good
[19:38:36] <PJBoy> just comes off as a worse std::vector
[19:39:28] *** Joins: namo (~nomo@95.87.208.95)
[19:39:32] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:39:38] <urdh> yeah
[19:39:44] <urdh> only head the title tbh
[19:39:58] <urdh> not sure what killed dynarray though?
[19:39:59] <PJBoy> although it does guarantee not to use more memory than needed, unlike vector
[19:40:13] <PJBoy> dynarray seems to have been lost to a lack of motivation
[19:40:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6566:3224:cc66:3345) (Ping timeout: 240 seconds)
[19:40:40] <urdh> it's tricky, there's all sorts of specialist use cases for "better" vectors
[19:41:02] <urdh> but you wouldn't want ten different vectors in the standard library
[19:41:45] <PJBoy> based on this random internet result https://chat.stackoverflow.com/transcript/message/12091259#12091259
[19:41:53] <PJBoy> it's due to relational operators
[19:43:48] <PJBoy> ctrl+f for dynarray in http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3733.pdf brings up some more issues
[19:45:17] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Ping timeout: 240 seconds)
[19:45:46] <PJBoy> LWG issues: http://cplusplus.github.io/LWG/issue2253 http://cplusplus.github.io/LWG/issue2254 http://cplusplus.github.io/LWG/issue2255 http://cplusplus.github.io/LWG/issue2264
[19:46:14] *** Joins: kapil (~kapil@o-k.website)
[19:46:21] <PJBoy> though it looks like every issue had a fix
[19:46:27] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[19:47:29] <PJBoy> you have to assume the author just gave up
[19:50:12] <PJBoy> here's my improved optional transform :/ https://gcc.godbolt.org/z/xG9b4TP1f
[19:50:35] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:51:02] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Ping timeout: 256 seconds)
[19:53:31] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[19:59:48] *** Joins: magla (~gelignite@55d4e80d.access.ecotel.net)
[20:00:49] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[20:01:06] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:04:18] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:04:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[20:04:56] *** Quits: chozorho (~chozorho@2601:146:300:c30:b4c8:fdea:55ac:cb1a) (Quit: WeeChat 3.0)
[20:05:51] *** Joins: neure (~TimoSuora@dzpy624tyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[20:07:10] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[20:07:12] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[20:09:14] <rpav> is there seriously no std:: function that will return a simple callable given (only) a member function pointer and instance .. std::bind seems to require placeholders specified, mem_fn requires and instance passed, ...
[20:09:33] <rpav> though i seem to recall writing my own mbind at some point
[20:09:34] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:10:48] <kalven> bind_front
[20:11:08] <rpav> 20 🤣
[20:12:14] *** Joins: stonkey (~stonkey@user/stonkey)
[20:12:44] <manuels> if I define one ctor all others are =delete'd right?
[20:13:58] *** Quits: jokoon (~jokoon@185.61.188.186) (Quit: Client closed)
[20:14:48] <Alipha> manuels: no. the rules are complicated
[20:15:19] <rpav> there should be like !ctors that references the picture
[20:15:52] <Alipha> manuels: https://safecpp.com/2019/07/01/initial.html
[20:17:29] <Alipha> manuels: writing a random constructor deletes the default constructor. writing a copy constructor "deletes" the move constructor, and writing a move constructor deletes the copy constructor
[20:22:04] *** Quits: neure (~TimoSuora@dzpy624tyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[20:24:01] *** Joins: robert_ (~hellspawn@47.203.169.95)
[20:24:15] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[20:25:49] *** Joins: constxo (~brad@142.134.38.68)
[20:30:53] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[20:37:31] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[20:38:12] *** Joins: calm-steam (~calm-stea@user/calm-steam)
[20:42:20] *** Joins: TomyLobo (~TomyLobo@p200300e80f006700814dd77ec0a9f818.dip0.t-ipconnect.de)
[20:44:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[20:51:13] *** Joins: c4017w (~c4017@209.52.68.8)
[20:51:15] *** Quits: constxo (~brad@142.134.38.68) (Ping timeout: 268 seconds)
[20:52:28] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[20:54:13] *** Joins: Rayke (rayke@user/rayke)
[20:54:18] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[20:54:29] *** Joins: jkaye (~jkaye@2601:281:8300:7530:bdb2:1444:46f4:adc7)
[20:59:35] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[20:59:57] *** Joins: bindu (~bindu@user/bindu)
[21:00:00] *** Joins: stonkey (~stonkey@user/stonkey)
[21:03:22] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:06:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:06:42] *** Joins: bebyx (~Thunderbi@user/bebyx)
[21:12:06] *** Quits: Tokamak_ (~Tokamak@166.205.152.83) (Quit: Textual IRC Client: www.textualapp.com)
[21:13:19] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b112:d1fc:dd83:e42f)
[21:14:30] *** Joins: bindu_ (~bindu@user/bindu)
[21:14:32] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[21:14:53] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:15:06] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[21:16:14] *** Quits: bindu_ (~bindu@user/bindu) (Remote host closed the connection)
[21:18:21] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:21:32] *** Joins: bindu (~bindu@user/bindu)
[21:23:10] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:961:e816:8c8d:54a1)
[21:23:50] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[21:25:37] *** Quits: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net) (Ping timeout: 240 seconds)
[21:27:21] *** Quits: furrymcgee (~devuan@cgn-89-1-208-9.nc.de) (Quit: leaving)
[21:32:56] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:33:20] *** Joins: user_ (~user@213.134.189.60)
[21:33:22] *** Quits: user_ (~user@213.134.189.60) (Remote host closed the connection)
[21:38:27] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:39:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:55] *** ChanServ sets mode: +v npaperbot
[21:40:43] *** kfv_ is now known as kfv
[21:44:02] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[21:44:11] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:47:43] *** Joins: Tokamak (~Tokamak@166.205.152.83)
[21:48:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b112:d1fc:dd83:e42f) (Ping timeout: 240 seconds)
[21:49:24] *** Joins: sacrebleu (~sacrebleu@c-73-79-254-54.hsd1.pa.comcast.net)
[21:49:31] *** Joins: Betal (~Betal@user/betal)
[21:51:09] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[21:51:20] *** Joins: obby303 (~Guest26@65.207.90.10)
[21:51:47] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[21:53:57] *** Quits: msk (~msk@103.213.213.70) (Ping timeout: 240 seconds)
[21:54:08] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b9b9:658d:369d:1685)
[21:54:26] *** Joins: bpalmer (~user@user/bpalmer)
[21:59:40] *** Joins: constxo (~brad@142.134.38.68)
[22:00:48] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[22:01:22] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 256 seconds)
[22:01:28] <manuels> ty
[22:01:37] <manuels> love this one 😬:Code that you do not write can not be wrong
[22:02:06] <zz> huh, that's stupid
[22:02:21] <PJBoy> << "I am wrong"
[22:02:22] <geordi> I am wrong
[22:02:28] <PJBoy> liar's paradox
[22:02:29] *** Joins: xkuru (~xkuru@user/xkuru)
[22:03:04] <zz> I mean, as a quip, it could be "I didn't write it, therefore it can't be right" and I'd agree with the usual smily face
[22:04:32] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[22:07:21] <manuels> does deleting mean user declared?
[22:09:40] <bpalmer> manuels: explicitly deleted functions are not available. This is how you can eliminate the default copy constructor, for example, without defining it yourself.
[22:09:58] <bpalmer> manuels: if that's what you're asking about.
[22:10:23] <Alipha> I think manuels was referring to the rules at https://safecpp.com/2019/07/01/initial.html
[22:10:34] <manuels> yes
[22:12:41] <Alipha> manuels: yes
[22:13:50] *** Quits: constxo (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[22:14:35] <bpalmer> I don't think I understand. If you write a move constructor, the default copy constructor is deleted; that's not user declared (unless the user actually declares it)
[22:14:47] <bpalmer> it will just refuse to compile anything that tries to copy.
[22:14:57] <Alipha> { Foo f; Foo g(f); } struct Foo { Foo() = default; Foo(Foo&&) = delete; };
[22:14:57] <geordi> error: use of deleted function 'constexpr Foo::Foo(const Foo&)'
[22:15:23] <bpalmer> Similarly, you can delete a member function from an overload set; that doesn't mean anything about the rest of the member functions, just that this function isn't available.
[22:16:19] *** Joins: constxo (~brad@142.134.38.68)
[22:16:38] <Alipha> bpalmer: if you =delete the move constructor, then that deletes the copy constructor implicitly. same as if you were to define a move constructor
[22:19:00] <Alipha> manuels: though imo, if you're defining or deleting any of {copy constructor, copy operator=, move constructor, move operator=} then you should just go ahead and define/=default/=delete all of them as appropriate, so that people don't have to remember the arcane rules in order to determine if they can copy or move your class
[22:20:15] <PJBoy> libera chat team not making a great name for themselves
[22:20:35] <Alipha> PJBoy: ?
[22:20:54] <PJBoy> did you not see that message from Foxmas/WOLLOPS?
[22:21:36] <PJBoy> huh, it's not in Tino's logs
[22:22:13] <bpalmer> well, neither particularly bothers me, nor -- particularly in the face of the alternatives -- do I think it affects their name.
[22:22:17] <PJBoy> https://puu.sh/Ixwif/dbfa2b0876.png is what I saw
[22:23:27] <PJBoy> maybe that message only got injected into molybdenum.libera.chat
[22:23:51] <Alipha> yeah, i don't see a 'No match for "fox"' message
[22:24:05] <PJBoy> that was me trying to tab complete their nick
[22:24:24] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:24:35] <PJBoy> the drive by spam beginning with "Dear Libera.Chat users" is what I was referring to
[22:24:36] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 240 seconds)
[22:25:10] *** Joins: RPNX (~RPNX@2601:c9:c000:20a8:b909:68af:b920:1a33)
[22:26:20] *** Quits: murphy_ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com) (Read error: Connection reset by peer)
[22:26:59] *** Quits: RPNX (~RPNX@2601:c9:c000:20a8:b909:68af:b920:1a33) (Read error: Connection reset by peer)
[22:27:16] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[22:29:03] <Alipha> *shrugs* i don't think it's inappropriate
[22:29:31] *** Joins: Guest64 (~Guest64@cpc73670-dals20-2-0-cust965.20-2.cable.virginm.net)
[22:29:37] <Guest64> hi
[22:29:50] <Alipha> Guest64: hi!
[22:30:07] <PJBoy> it would have been inappropriate if it were posted in #c++
[22:30:22] <PJBoy> which I thought it was at the time :/
[22:30:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:30:45] <Alipha> ah
[22:33:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:33:06] *** Quits: sacrebleu (~sacrebleu@c-73-79-254-54.hsd1.pa.comcast.net) (Quit: Client closed)
[22:33:40] *** Quits: Tokamak (~Tokamak@166.205.152.83) (Ping timeout: 256 seconds)
[22:36:12] *** Joins: Tokamak (~Tokamak@166.205.152.83)
[22:42:21] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[22:43:19] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[22:47:09] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[22:48:18] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:49:37] *** Quits: Tokamak (~Tokamak@166.205.152.83) (Ping timeout: 240 seconds)
[22:50:16] *** Joins: Pook (~Pook@2001:8a0:f996:1400:4c3:84d2:e243:90cb)
[22:50:42] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:51:04] *** Joins: Tokamak_ (~Tokamak@172.58.191.77)
[22:53:13] *** Quits: Artea- (~Lufia@artea.com.pt) (Quit: ZNC 1.6.2 - http://znc.in)
[22:53:27] *** Joins: Artea (~Lufia@artea.com.pt)
[22:58:17] *** Quits: constxo (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[22:59:31] *** Quits: Tokamak_ (~Tokamak@172.58.191.77) (Ping timeout: 268 seconds)
[23:01:08] *** Joins: Tokamak (~Tokamak@166.205.152.179)
[23:16:49] <CarloWood> I have a class that contains consts, and a reference... I need to add it as member to another class, but can't initialize it during construction (no way). It has to be initialized later. What is a good solution here?
[23:17:13] <kalven> there's std::optional
[23:18:42] <Alipha> CarloWood: not use const or reference members? :-)
[23:18:42] <zz> Everything inside T can and will be initialized upon construction of T.
[23:19:04] <Alipha> otherwise, yeah, std::optional
[23:21:33] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[23:23:06] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[23:23:11] *** Joins: netpipe (~netpipe@user/netpipe)
[23:25:13] *** Quits: netpipe (~netpipe@user/netpipe) (Client Quit)
[23:25:43] <CarloWood> This seems to work... do I miss something?
[23:25:46] <CarloWood>  { C c; A a{13}; c.init(a, 7); cout << c.b.a.n << ", " << c.b.k; } struct A { int n; }; struct B { static A dummy; A& a; int const k = 42; B() : a(dummy) { } B(A& _a, int _k) : a(_a), k(_k) { } }; struct C { B b; void init(A& a, int k); C() {} }; A B::dummy; void C::init(A& a, int k) { new (&b) B(a, k); }
[23:25:46] <geordi> 13, 7
[23:26:32] <CarloWood> First C c; is constructed, where C contains B b; and B contains a reference A& and an int const.
[23:26:50] <CarloWood> Then I call c.init(a, 7) and "change" the reference and the constant.
[23:27:27] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[23:27:55] *** Joins: Hax0r (~Hax0r@46.38.81.225)
[23:27:59] <zz> you are missing a call to ~B in ::init
[23:28:27] <CarloWood> Yeah
[23:29:01] <CarloWood>  { C c; A a{13}; c.init(a, 7); cout << c.b.a.n << ", " << c.b.k; } struct A { int n; }; struct B { static A dummy; A& a; int const k = 42; B() : a(dummy) { } B(A& _a, int _k) : a(_a), k(_k) { } }; struct C { B b; void init(A& a, int k); C() {} }; A B::dummy; void C::init(A& a, int k) { b.~B(); new (&b) B(a, k); }
[23:29:02] <geordi> 13, 7
[23:29:47] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Ping timeout: 252 seconds)
[23:30:21] *** Quits: Tokamak (~Tokamak@166.205.152.179) (Ping timeout: 268 seconds)
[23:30:26] <zz> << sizeof(std::optional<int>)
[23:30:27] <geordi> 8
[23:31:18] <zz> I guess you save one member that indicates whether B is initialized, but at the same time, have to take the burden of properly destructing-reconstructing B and making people go 'wtf, why did he not use std::optional'.
[23:31:56] <kalven> you must not know CarloWood. he'll move heaven and earth to save one byte
[23:32:38] <zz> What I don't know is the use-case. If there's gonna be a 100 million instances of B, I'd probably try the same. Small cow still make a pile of poo, or however one says that in English.
[23:32:46] <CarloWood> I might be able to use std::optional here. It is not performance critical. But I never used it before and I have no idea how it works internally :/
[23:33:41] <zz> std::optional simply works like that, plus the "am I live" bit it keeps. (as in, C::init() { if (b.is_live) { b.~B(); b.is_live = 0; } if (!b.is_live) { new(&b) B(a,k); b.is_live = 1; }} kind of
[23:34:24] <CarloWood> { cout << sizeof(Foof) << ", " << sizeof(std::optional<Foo>); } struct Foo { array<int, 10> a; };
[23:34:24] <geordi> error: 'Foof' was not declared in this scope; did you mean 'Foo'? (fix known)
[23:34:36] <kalven> CarloWood: there's no heap alloc if that's your concern. basically just some appropriately aligned storage and a bool to track if the optional contains anything
[23:34:39] <CarloWood> geordi: replace Foof with Foo
[23:34:40] <geordi> 40, 44
[23:34:48] *** Joins: Tokamak (~Tokamak@166.205.152.179)
[23:34:50] <CarloWood> yes that was my concern :P
[23:34:51] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[23:34:54] *** Quits: m0shbear (~nope@205.185.119.231) (Ping timeout: 260 seconds)
[23:34:58] <zz> << sizeof(std::reference_wrapper<void*>)
[23:34:58] <geordi> 8
[23:35:01] <CarloWood> ok, I'll use optional then
[23:35:30] <zz> Then again, if one never envisions to "have no B", then why bother spending the bool. ~flies away~
[23:35:35] *** Joins: teepee (~teepee@openscad/teepee)
[23:35:35] *** Joins: m0shbear (~nope@205.185.119.231)
[23:36:13] <zz> more specifically, at that point you could just write C::init() { b = B(a, k); } (probably - needs to be moveconstructible) and do away with placement del/new
[23:36:18] *** Joins: constxo (~brad@142.134.38.68)
[23:37:21] <CarloWood> It still has to be constructed in the default constructor first.
[23:37:32] <CarloWood> And thus be destructed in init.
[23:37:37] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 240 seconds)
[23:39:03] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[23:40:28] <CarloWood> { C c; A a{13}; c.init(a, 7); cout << c.ob->a.n << ", " << c.ob->k; } struct A { int n; }; struct B { A& a; int const k = 42; B(A& _a, int _k) : a(_a), k(_k) { } }; struct C { std::optional<B> ob; void init(A& a, int k); C() {} }; void C::init(A& a, int k) { ob.emplace(a, k); }
[23:40:28] <geordi> 13, 7
[23:40:32] <CarloWood> Like that, right?
[23:40:46] <zz> that just means B needs some ctor, which isn't too hard to do
[23:41:29] *** Quits: Hax0r (~Hax0r@46.38.81.225) (Remote host closed the connection)
[23:41:43] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:41:52] <RandomReader> PJBoy - wallops is opt-in, it's user mode +w, and it's a network-wide message .. what client are you using that sticks it in the middle of your channel flow?
[23:42:02] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 240 seconds)
[23:42:09] <PJBoy> chatzilla
[23:42:13] <RandomReader> ah
[23:42:20] <PJBoy> in all my years of IRC, I've never had this happen before
[23:42:24] <zz> irssi in single-window mode also sticks it in the middle of the flow. But then you're asking for it with single-mode and +w ;-)
[23:43:12] <PJBoy> my user mode isn't +w is it?
[23:43:30] <CarloWood> All IRC clients that I know put wallops in the channel that is currently visible. The idea is that it is immediately brought under your attention.
[23:44:01] <CarloWood> Type: /MODE PJBoy
[23:44:04] <CarloWood> we can't see it.
[23:44:08] <CarloWood> Mine is +Ziw
[23:44:14] <RandomReader> I usually use clients with separate channel and server contexts (windows), wallops belongs in the server window with all the other non-channel things
[23:44:19] <PJBoy> mine is +iw, hrm
[23:44:29] <PJBoy> I certainly never opted into using +w
[23:44:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[23:44:38] <RandomReader> sometimes I'll use a client that defaults to trying to mix things, at which point I correct it, so I can't remember what the defaults necessarily are
[23:44:42] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[23:45:11] <PJBoy> that solves that mystery anyways, thanks
[23:45:30] <RandomReader> ...looks like the libera servers are setting +w by default, on connect
[23:45:33] <CarloWood> RandomReader: wallops is really a message to all (other) IRC ops (although users may read along too if they choose to be +w); so - putting it in an obscure window that you'd never check isn't logical.
[23:45:43] <zz> CarloWood: https://wandbox.org/permlink/umh0buuZEtwltFFB
[23:45:51] <RandomReader> it's always visible, I run multi-window
[23:47:19] *** Joins: CaCode (~CaCode@user/cacode)
[23:50:44] *** Quits: Tokamak (~Tokamak@166.205.152.179) (Ping timeout: 256 seconds)
[23:50:51] <RandomReader> that looks rather convoluted if the goal is effectively just std::optional, although I'd also wonder why this thing needs to be a member if it doesn't logically carry the same lifetime
[23:50:51] *** Joins: Tokamak_ (~Tokamak@172.58.191.77)
[23:51:12] <RandomReader> hm, I wonder if union init rules cover const
[23:51:38] <bpalmer> CarloWood: well, it's dependent on the irc client. my irc client hid it away but let me know via notification that it was there.
[23:54:49] *** Joins: Green_3 (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[23:55:32] *** Quits: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (Read error: Connection reset by peer)
[23:55:32] *** Green_3 is now known as Green_
[23:55:55] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:57:38] *** Joins: Hax0r (~Hax0r@46.38.81.225)
[23:59:50] *** Joins: pncl1 (~Hax0r@46.38.81.225)
[23:59:55] *** Quits: pncl1 (~Hax0r@46.38.81.225) (Remote host closed the connection)
