[00:06:48] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:07:00] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 260 seconds)
[00:07:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[00:08:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[00:10:21] <dsal> Is there a generic name for an n-functor?
[00:11:13] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[00:16:50] <awpr> like a generalization of Bifunctor to any n instead of just 2?  in category theory, I'd say that's just "functor", since the Haskell Bifunctor is just a curried form of functors Hask x Hask -> Hask
[00:18:15] <awpr> I don't know of a generalization in Haskell terminology, though -- Haskell struggles a bit with talking about collections of types with different numbers of type parameters
[00:19:12] *** Quits: michalz (~michalz@185.246.204.40) (Remote host closed the connection)
[00:19:20] <awpr> and things get a bit awkward if you try to uncurry it and make the objects of a product category into a single kind
[00:19:39] *** Joins: yuri (~yuri@85.89.126.31)
[00:20:17] <dsal> The thing I made is a functor because exactly one field can change types.  But if there's more than one thing, I can make it a bifunctor, solving the problem once and for all.
[00:20:41] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[00:21:05] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:22:40] <awpr> I wouldn't be too surprised if someone had defined a Trifunctor class somewhere.  it probably doesn't go much further than that, though
[00:24:17] <awpr> I've also played with the convention of Functor instances on e.g. `newtype Arg3 f a b c = Arg3 (f c a b)` to carry functionality of mapping over other type parameters.  it was a bit clunky, though
[00:24:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:24:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:24:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:24:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:24:56] *** Joins: wroathe (~wroathe@user/wroathe)
[00:25:01] *** Quits: viluon (uid453725@id-453725.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:25:31] <awpr> with more than 2, maybe just giving them explicit names as Traversals is the way to go
[00:28:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:28:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:28:49] <tomsmeding> dsal: https://paste.tomsmeding.com/Qtjm3Kcn
[00:28:54] <tomsmeding> this is 99% in jest
[00:29:23] <tomsmeding> maybe the tuple instances should not be recursive, hm
[00:29:30] <monochrom> Need more of this on April 1st :)
[00:29:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[00:29:40] <dsal> Heh.   Yeah, I try to avoid jokes because I've rolled out too many things I meant as a joke.
[00:29:42] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[00:29:59] <dsal> Functor makes a ton of sense for this.  bifunctor starts making less sense.  trifunctor would be super weird.
[00:30:16] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[00:30:44] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:30:46] <dsal> The use case is a type that has a bunch of settings for an app, where some settings are parsed from the environment in one form, but then need some IO stuff to resolve them into their final form.  With one, it's not very confusing.  Once there are a few, there's a pretty special thing needing to be in place.
[00:30:47] <tomsmeding> awpr's suggestion of making a traversal for each of the addressable elements is probably a good way to actually do this
[00:30:51] <dsal> i.e., fmap itself isn't very useful.
[00:30:51] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Client Quit)
[00:30:56] <monochrom> Maybe you can try "multi-variable functor", but I haven't checked that mathematicians actually say it, I only saw "multi-variable adjoint functor" but it has an additional "adjoint".
[00:31:03] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:31:37] <Cajun> that AllFmap thing looks a lot like `Lens'`
[00:32:10] * tomsmeding wouldn't know
[00:32:48] *** Joins: Pickchea (~private@user/pickchea)
[00:32:55] <dsal> `Lens` is actually kind of the right thing once I have three or four of these.
[00:33:00] <awpr> hmm, that actually sounds a bit like a use case for "higher-kinded data"
[00:33:23] <dsal> In *practice* there are really two types, but the variables make a lot of other states popular.
[00:33:24] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:33:39] <awpr> if all the config fields undergo the same kind of extra IO stuff, that is
[00:33:54] <dsal> I defined a type alias for the "input" type and another for the "output" type.  But with more variables, it starts to get harder to think about.
[00:33:58] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[00:34:28] <dsal> awpr: In this case, there's basically  `FilePath -> IO x` and then the `Settings FilePath -> Settings x`
[00:34:57] <dsal> The latter is `$>` in practice, but some hand waving occurs first.
[00:35:31] <dsal> awpr: What do you mean by higher-kinded data?  Most of the words I type are in a language I don't actually understand.
[00:37:03] <awpr> generally the approach of writing types like `data Config f = Config { cfgInputFile :: f FilePath, cfgSizeLimit :: f Int, cfgDoOptionalThing :: f Bool }` and then being able to operate over all the `f` wrappers uniformly
[00:37:11] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[00:37:20] <dsal> Ooh.  yeah, that's neat.
[00:37:35] <awpr> like if you wanted to parse command-line flags into `Config Maybe` and then merge it with defaults to get `Config Identity`
[00:37:54] <dsal> I saw jle` do something like this with barbie once and it was kind of magic.
[00:38:02] <awpr> yeah, that's one of the libraries for this
[00:38:28] <awpr> there's also Ed Kmett's library `hkd` and my library `ten`, and probably some others I'm forgetting
[00:38:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:39:18] <dsal> If I can convince people that having two types that are almost identical except for one field and then a function to copy the fields from one to another and then testing that you did that right with hand-written examples first, then maybe I can move onto fancier stuff.  heh
[00:39:27] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:980f:fceb:aad:f12) (Ping timeout: 264 seconds)
[00:40:32] <awpr> yeah if this is the place that bans even basic usage of lenses for being too complicated, there's not a lot of hope for HKD-like things
[00:40:44] *** Joins: pavonia (~user@user/siracusa)
[00:40:50] <awpr> also not sure it's even applicable here, after seeing more details
[00:43:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:44:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:44:40] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:47:25] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[00:48:47] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[00:50:27] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[00:50:45] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[00:51:18] *** Joins: gay (~gay@77-120-141-90.kha.volia.net)
[00:51:41] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:b412:3d19:27cf:5d37)
[00:51:43] *** gay is now known as Guest8402
[00:52:05] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[00:52:09] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[00:52:53] *** Joins: acidjnk (~acidjnk@p200300d0c7271e75119700900401854f.dip0.t-ipconnect.de)
[00:53:04] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[00:53:58] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[00:54:19] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[00:55:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5cca:96d9:7234:6761) (Ping timeout: 265 seconds)
[00:56:45] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4)
[00:58:38] *** Joins: safinaskar (~quassel@109-252-90-143.nat.spd-mgts.ru)
[00:58:43] *** Joins: zava1 (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[01:00:13] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[01:00:47] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[01:02:18] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[01:03:26] *** zava1 is now known as zava
[01:05:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:06:10] *** Joins: nautical (~nautical@2601:602:900:1630::396f)
[01:06:16] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:06:42] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[01:07:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[01:08:01] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[01:08:48] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:10:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:10:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:12:27] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:12:27] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Ping timeout: 264 seconds)
[01:12:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:12:44] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:14:37] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47)
[01:16:46] <safinaskar> Is there some (text or binary) data exchage format for arbitrary data (with libraries for working with this format) with the following properties: 1) it should be typed 2) it should be possible to attach type to data 3) it should have feature similar to protobuf's "dynamic_message.h", i. e. the library for dealing with format should allow working with typed (!) data when the type is not known beforehand (i. e. in compile time). I. e. 
[01:16:46] <safinaskar> the library should allow read type from file, then read data itself from file and then work with this data 4) the format should allow natural encoding of haskell/rust algebraic data types 5) library for rust should exist. Okey, now I will tell about considered alternatives. Protobuf satisfies all this points except for "4". Protobuf's oneofs are always optional. I. e. it is not possible to represent "Enum A{B(i32), C(f64)}" in protobuf
[01:16:46] <safinaskar> , you have to represent "Option<A>" instead. Also, rust libraries are unfinished. As well as I understand the only rust library, which satisfies point "3", is rust's crate "protobuf", but afaik its dynamic features appeared very recently, in 3.0.0-alpha release, i. e. not even in stable yet. XML, json etc will not go, because they are not typed. Flatbuffers seem not to have point "3". Flexbuffers are not typed
[01:17:31] <safinaskar> my question is about rust, of course, but i ask it in #haskell, because afaik haskell people love everything typed, so i assume haskellers already have such data format in wide use
[01:20:47] *** Joins: deadmarshal (~deadmarsh@95.38.113.89)
[01:24:36] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:980f:fceb:aad:f12)
[01:24:52] <sshine> safinaskar, you mention protobuf. have you looked at competing alternatives to protobuf? (sorry to not give a constructive answer. and yes, I think your assumption warrants crossposting.)
[01:24:56] *** Quits: deadmarshal (~deadmarsh@95.38.113.89) (Ping timeout: 245 seconds)
[01:25:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:25:47] <hskpractice> what's the fancy term for, for instance, "Just 1"? an applied value/data constructor
[01:26:48] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:26:50] <safinaskar> sshine: i looked at flatbuffers and flexbuffers. I didn't look at other alternatives yet (there are a lot of then)
[01:26:53] <safinaskar> *of them
[01:29:28] <monochrom> hskpractice: We don't have a special term for those. We just say value, like 42.
[01:29:40] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[01:29:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[01:30:09] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:31:06] <monochrom> The general principle is that we find that noting the actual types are more useful than dichotomies like "function vs not function", "involves a data constructor vs not involving a data constructor", etc.
[01:31:57] <dsal> Are there times where it's useful to distinguish a data constructor from another function?
[01:32:29] <monochrom> Yes, when writing patterns in pattern matching. "f (Just x) = ..." is legal, "f (sin x) = ..." is illegal.
[01:32:45] <monochrom> Fortunately, that's the only time.
[01:33:05] <monochrom> Goes a long way to show that even that dichotomy is almost useless.
[01:33:41] *** Joins: atwm_ (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[01:33:47] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Remote host closed the connection)
[01:33:55] <monochrom> IIRC this is not true in SML though.  "map Just [1,2,3]" is legal in Haskell, illegal in SML, you have to write your own lambda.
[01:33:57] <dsal> Ah.  That's "the other direction" though. 
[01:34:02] *** Quits: atwm_ (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Client Quit)
[01:34:21] <awpr> GHC's optimizations care about constructors, too -- they're willing to "duplicate work" by inlining constructor applications, because the work involved is trivial, but that's not necessarily the case for arbitrary functions
[01:34:28] <monochrom> However! GHC core and STG do make that distinction.
[01:34:33] *** Joins: zebrag (~chris@user/zebrag)
[01:34:40] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[01:34:45] <awpr> (although you can CONLIKE them to tell GHC to treat them like constructors for inlining purposes)
[01:35:17] <monochrom> GHC is nice to compile your "map Just" to "map (\x -> Just x)" so you don't have to do it yourself.
[01:36:50] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Client Quit)
[01:37:20] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:38:20] <DigitalKiwi> does dhall fit what safinaskar needs? i don't know it well enough to know if it hits all of the points
[01:39:29] <geekosaur> dhall's a configuration language, not really a data exchange format. and fails (3) and (5)
[01:41:36] <DigitalKiwi> what is a config if not an exchange of data
[01:42:12] <DigitalKiwi> https://github.com/Nadrieril/dhall-rust
[01:42:13] <geekosaur> it's a limited kind of data exchange
[01:42:34] <geekosaur> one of the limits is it tends to be pretty static
[01:42:45] <geekosaur> whereas (3) means it needs to be dynamic
[01:43:19] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[01:43:32] <DigitalKiwi> isn't that what String and Any are for :D
[01:43:39] *** Quits: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[01:47:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[01:48:01] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Remote host closed the connection)
[01:48:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[01:49:33] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[01:49:48] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47) (Remote host closed the connection)
[01:50:13] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47)
[01:50:22] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:51:31] <dsal> I'm going to be annoyed shortly when this code that's clearly superior is rejected because I used `foldMap` which is deigned bad because it's not strict.
[01:52:23] <dsal> I'm folding like 5 things once at startup.  This is not worth worrying about.
[01:52:45] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:52:55] <monochrom> I agree with you.
[01:53:14] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Client Quit)
[01:53:19] <awpr> could always just use foldMap' to avoid confrontation, esp. if it doesn't matter
[01:53:49] <monochrom> Small minds optimize cold spots. Medium minds optimize hot spots. Great minds optimize the big picture.
[01:55:02] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[01:55:31] <dsal> Yeah, the thing says to use foldMap' instead.   But foldMap is in Prelude so I don't have to go find it an import it to satisfy a dumb rule.
[01:55:59] <awpr> just sneak in a `foldMap' = foldMap` somewhere :)
[01:56:22] <monochrom> Yes! Put that at the end of the file.
[01:56:52] <monochrom> In the long run I think you should look for another job...
[01:57:12] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Remote host closed the connection)
[01:57:14] <dsal> haha
[01:57:27] <monochrom> Your coworkers sound like they deserve to lose all competent people and sink.
[01:57:27] <geekosaur> let 'em hire another golang programmer
[01:57:39] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[01:57:51] <dsal> One of the people ramping up here is a gopher.
[01:58:03] <dsal> The Great Opinionated One is kind of interesting.
[01:58:36] <dsal> I at least shoved a TupleSections through because he couldn't make an argument against it.  Though (,) is technically different from (:) in a few ways, it's silly to treat it differently.
[01:58:51] <dsal> I like things that are easy to use when you're dumb even if you don't understand all the details.
[02:00:32] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Remote host closed the connection)
[02:01:24] <dsal> The cool thing about worrying about lazy folds is my actual next big thing here is folding postgres tables.  postgresql-simple's fold is lazy.
[02:03:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:03:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:03:55] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[02:04:02] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:05:07] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[02:07:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:07:08] *** Joins: sluigi (~sluigi@2603-900a-1600-ba00-413a-d0a0-1d2f-7111.inf6.spectrum.com)
[02:07:19] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:07:46] <sluigi> long shot but anyone know dex? i wrote a dex function: "def sumColumns (xs:a=>b=>c) : b=>c = for j. sum for i. xs.i.j" but it's not working with error "Type error:Couldn't synthesize a class dictionary for: (Add c)"
[02:08:09] <sluigi> curious if anyone might know what's going on here
[02:09:42] <arahael> I'm trying to install packages using cabal on macos, but I've got some obscure issues related to eg, "fatal error: 'ffitarget_arm64.h' file not found", how do I resolve this? (The command I'm using is 'cabal install shake')
[02:09:45] <awpr> sounds like the type of `sumColumns` probably needs to mention that constraint.  I don't know the particular Dex syntax for it, though
[02:10:11] <awpr> "constraint" being `Add c`, that is
[02:13:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:13:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:15:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:15:13] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:15:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:17:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:17:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:18:19] <sluigi> ah yeah that helped, thanks
[02:19:22] <dsal> muahaha.  The thing that blocks `foldMap` in hlint is looking specifically for `Data.Foldable.foldMap` and doesn't care about `Prelude.foldMap` which is totally a different thing.
[02:19:56] *** Joins: jbox (~jbox@user/jbox)
[02:21:02] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[02:23:52] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:25:57] *** Joins: jinsun__ (~quassel@user/jinsun)
[02:29:10] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[02:32:20] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4518:ab7b:975d:2f47) (Remote host closed the connection)
[02:38:56] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:40:25] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[02:40:30] <nautical> haskell
[02:40:55] * dsal drinks to that
[02:42:11] <Franciman> Haskell!
[02:42:54] <Axman6> HasSkol! Cheers
[02:43:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[02:46:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:46:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:46:35] *** Quits: mreh (~mreh@2a00:23c7:2803:ef00:2cfc:8111:4bd9:f4d7) (Quit: Client closed)
[02:47:26] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[02:50:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[02:50:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[02:51:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:cd02:5ed5:f7c5:1e43)
[02:53:15] *** Quits: jkaye (~jkaye@c-71-205-220-154.hsd1.co.comcast.net) (Ping timeout: 264 seconds)
[02:53:33] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[02:55:03] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:b412:3d19:27cf:5d37) (Ping timeout: 264 seconds)
[02:55:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[02:56:26] <jackdk> arahael: are you on M1? I don't know the status of M1 support but I did see "arm64" in your error message
[02:57:47] *** Joins: fernand (~fernand@179.156.35.4)
[02:57:52] *** Quits: puke (~puke@user/puke) (Quit: puke)
[02:58:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:58:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:58:37] *** Joins: wroathe (~wroathe@user/wroathe)
[02:58:44] *** Joins: AlexNoo_ (~AlexNoo@178.34.162.8)
[03:00:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:00:54] *** Parts: safinaskar (~quassel@109-252-90-143.nat.spd-mgts.ru) ()
[03:01:09] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:01:35] *** Quits: AlexZenon (~alzenon@94.233.241.104) (Ping timeout: 264 seconds)
[03:01:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:02:01] *** Quits: fernand (~fernand@179.156.35.4) (Ping timeout: 245 seconds)
[03:02:21] *** Quits: AlexNoo (~AlexNoo@94.233.241.104) (Ping timeout: 250 seconds)
[03:02:37] *** Quits: Alex_test (~al_test@94.233.241.104) (Ping timeout: 256 seconds)
[03:03:27] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[03:03:33] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Quit: gone to sleep. ZZZzzz…)
[03:04:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:04:23] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[03:04:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[03:04:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[03:05:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[03:06:26] *** Joins: AlexZenon (~alzenon@178.34.162.8)
[03:06:32] *** Joins: Alex_test (~al_test@178.34.162.8)
[03:09:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:09:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[03:10:24] *** Quits: yuri (~yuri@85.89.126.31) (Ping timeout: 260 seconds)
[03:14:23] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::105f) (Remote host closed the connection)
[03:17:43] *** Joins: Jing (~hedgehog@2604:a840:3::105f)
[03:19:35] *** Quits: max22- (~maxime@2a01cb088335980087bf2fbe3da00994.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:21:14] *** Quits: ridcully (~ridcully@p57b523cc.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[03:22:30] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[03:22:46] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[03:22:56] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Client Quit)
[03:23:04] *** Joins: ridcully (~ridcully@p508ac9bf.dip0.t-ipconnect.de)
[03:25:29] *** Guest8402 is now known as curiousgay
[03:37:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:38:02] *** Quits: acidjnk (~acidjnk@p200300d0c7271e75119700900401854f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:38:34] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c)
[03:40:55] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 250 seconds)
[03:42:03] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[03:43:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[03:44:12] *** Quits: retroid_ (~retro@97e2ba2e.skybroadband.com) (Ping timeout: 268 seconds)
[03:44:51] *** Quits: nautical (~nautical@2601:602:900:1630::396f) (Quit: WeeChat 3.3)
[03:47:48] <dsal> @pl \x -> Just <$> x <|> empty
[03:47:48] <lambdabot> (<|> empty) . (Just <$>)
[03:47:55] <dsal> Proof that pl always makes things better
[03:48:03] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[03:51:14] *** jonrh_ is now known as jonrh
[03:51:55] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[03:52:10] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 260 seconds)
[03:52:26] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[03:55:40] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 260 seconds)
[03:58:24] <pavonia> It makes them pointless, not necessarily better
[04:02:09] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:02:51] *** Quits: emf (~emf@2620:10d:c090:400::5:824c) (Ping timeout: 264 seconds)
[04:03:41] <dsal> It'd be extra cool if it pointed out that the `(<|> empty) . ` was the real pointless.
[04:04:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:05:39] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[04:05:40] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:05:56] *** Joins: viluon (uid453725@id-453725.helmsley.irccloud.com)
[04:12:11] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[04:13:13] *** Joins: emf (~emf@2620:10d:c090:400::5:824c)
[04:15:15] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:18:04] *** Joins: gaff (~gaff@49.207.195.213)
[04:18:10] *** Quits: mmhat (~mmh@55d42af1.access.ecotel.net) (Quit: WeeChat 3.3)
[04:20:09] *** Joins: FragByte (~christian@user/fragbyte)
[04:20:47] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:21:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:22:10] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:ccfc:bf5f:d318:f468)
[04:23:54] <monochrom> PHB = pointless haskell boss >:)
[04:25:36] *** Joins: Nolrai2 (~Nolrai2@c-76-27-202-218.hsd1.or.comcast.net)
[04:25:39] *** Quits: emf (~emf@2620:10d:c090:400::5:824c) (Ping timeout: 264 seconds)
[04:25:59] <Nolrai2> In places where both would work is it better to use type families or functional depencies?
[04:26:45] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:980f:fceb:aad:f12) (Ping timeout: 268 seconds)
[04:26:57] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:28:21] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:5c1e:444:cdf3:4e4) (Quit: Textual IRC Client: www.textualapp.com)
[04:29:06] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (Ping timeout: 260 seconds)
[04:29:15] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[04:30:46] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:31:09] <geekosaur> I think it comes down to personal preference; arguments can be made for both
[04:31:39] <geekosaur> the downside of fundeps is they're harder to reason about because they're more Prolog than Haskell
[04:32:14] <geekosaur> the downside of type familoies is, especially if non-injective, they can be harder to reason about
[04:32:32] <geekosaur> so basically different varieties of the same downside for both
[04:33:29] <dsal> I've only had fundeps come up as a "I need this thing."  Maybe I'm ignorant and they're more related than I thought.
[04:33:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:34:02] <geekosaur> fundeps and associated type families do pretty much the same thing
[04:34:12] <geekosaur> iirc they've been proven equivalent in expressive power
[04:35:48] <dsal> I guess I need to understand the latter a bit more.
[04:35:57] <dsal> I needed this one day:  `class Projector a b | a -> b where project :: a -> b -> [a]`
[04:36:00] <c_wraith> since this just came up in r/haskell, here.  https://aphyr.com/posts/342-typing-the-technical-interview
[04:36:05] <c_wraith> all about fundeps :)
[04:36:13] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:37:44] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:37:45] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:37:45] *** Joins: wroathe (~wroathe@user/wroathe)
[04:41:30] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:59] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:42:34] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[04:43:08] <arahael> jackdk: i am indeed on M1
[04:43:31] <dsal> M1 posse
[04:43:36] <arahael> jackdk: and complicating it further, it seems my llvm is version 13.0.0 (which is whatever got installed by xcode)
[04:43:55] <jackdk> arahael: I'm on x86_64-pc-linux-gnu so I can't help sorry
[04:44:20] <dsal> I just run out of nix.
[04:44:25] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:44:31] <Axman6> pretty keen to get an M1 in the next few years. one of Twitter's engineering teams reackon the faster build times mean that they pey for themselves in saved dev time within about three months
[04:44:48] <arahael> dsal: even if i "ran out of nix" here, i'd still be using apple's xcode for the llvm.
[04:45:22] <boxscape_> hm I seem to remember recently seeing someone write a pattern synonym to check if a string has a certain prefix, which I previously thought you could only do with a view pattern + matching on Just. But I can't find it anymore. Any idea where I might find that or how to write such a pattern synonym?
[04:45:33] <arahael> Axman6: definitely, though then again, linux is by far the better trodden path, especially for haskell.
[04:45:59] <Axman6> There's little difference between macOS and linux when it comes to Haskell
[04:46:09] <Axman6> I've been developing for linus on macOS for years
[04:46:13] <Axman6> linux too
[04:46:32] <Axman6> spews Linus, you've been using proprietary software this whole time!
[04:47:06] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:47:36] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:21] <boxscape_> (as in, say, `foo (Prefix "pref" rest) = rest <> " is the rest"`)
[04:48:47] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:49:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 264 seconds)
[04:49:04] *** Joins: cheater1__ (~Username@user/cheater)
[04:49:08] *** cheater1__ is now known as cheater
[04:50:58] <justsomeguy> I defined the function taken :: Word -> [a] -> [a]; taken _ [] = []; taken 0 _ []; taken n (x:xs) = x : taken (n-1) xs, but when I run taken (-4) [1..20] I don't get a type error, but the numeric literal overflows and taken still runs. Is there a compiler flag I can turn on to make it a type error, instead?
[04:52:34] <dsal> boxscape_: I think Text has something for that.
[04:52:36] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[04:53:03] <dsal> boxscape_: https://hackage.haskell.org/package/text-1.2.5.0/docs/Data-Text.html#g:22
[04:53:18] <justsomeguy> The idea is to prevent invalid uses of taken with negative numbers by changing the type. I'm just kind of confused why ghci let's me run it with a negative number in the first place.
[04:53:29] <dsal> > -5 :: Word
[04:53:31] <lambdabot>  18446744073709551611
[04:53:49] *** Joins: jinsun (~quassel@user/jinsun)
[04:53:50] <dsal> You might try Natural.
[04:53:56] <dsal> -5 :: Natural
[04:53:59] <dsal> > -5 :: Natural
[04:54:00] <lambdabot>  error:
[04:54:01] <lambdabot>      Not in scope: type constructor or class ‘Natural’
[04:54:04] <dsal> See, that doesn't work.
[04:54:22] <dsal> @let import Numeric.Natural
[04:54:23] <lambdabot>  Defined.
[04:54:25] <dsal> > -5 :: Natural
[04:54:27] <lambdabot>  *Exception: arithmetic underflow
[04:54:37] <geekosaur> justsomeguy, it can't be a type error. it might be a different kind if error but you might need NumericLiterals because by default (-5) is a function application and the checking qould have to be runtime, not compile time
[04:54:54] <dsal> This is similar to a conversation we were having recently.  You can't really have a positive-only type.
[04:54:54] <geekosaur> % :set -XNumericLiterals
[04:54:54] <yahb> geekosaur: Some flags have not been recognized: -XNumericLiterals
[04:55:07] <geekosaur> hm
[04:55:39] <geekosaur> oh right, they reorganized that whole mess
[04:55:54] <geekosaur> % :set -XLexicalNegation
[04:55:54] <yahb> geekosaur: 
[04:55:56] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[04:56:06] <geekosaur> % (-5) :: Word
[04:56:06] <yahb> geekosaur: ; <interactive>:30:2: warning: [-Woverflowed-literals] Literal -5 is out of the Word range 0..18446744073709551615; 18446744073709551611
[04:56:32] <Nolrai2> Nice!
[04:57:35] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[04:58:58] <dsal> The downside is that requires that to have been the case all along the calling path.  One place missed and you just have a big number.
[04:59:59] <justsomeguy> If I set that project-wide using stack, could I still encounter overflows?
[05:00:01] <geekosaur> but that's what's happening now, with no possibility of even a warning
[05:01:50] <geekosaur> possibly you'd have to also recompile any dependencies with the same flag
[05:01:53] <arahael> Axman6: little difference, maybe, so why can't i build sdl2 in cabal (my llvm is too new), or why can't i "cabal install shake"? :)
[05:02:33] <Axman6> probably because you're using a very newly supported architecture :) can you install older LLVM with homebrew?
[05:02:40] <geekosaur> although at some point you might just have to trust that no dependency uses a negative number as a Word value
[05:03:08] <geekosaur> because the warning (or error if -Werror) is thrown at the point the numeric literal appears
[05:03:23] <geekosaur> and won't happen if you for example do
[05:03:31] <geekosaur> % 3 - 4 :: Word
[05:03:32] <yahb> geekosaur: 18446744073709551615
[05:04:13] <geekosaur> that one would again have to be a runtime error, the compiler cannot detect this for you
[05:06:03] <justsomeguy> Ok, interesting.
[05:07:50] <Cajun> does GHC compute expressions consisting of purely literals pre-compilation? i havent heard anyone mention it so i assume not
[05:07:50] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[05:08:13] <geekosaur> it does not
[05:08:22] <Axman6> it doesn't do any sort of constant folding?
[05:08:30] *** Joins: wei2912 (~wei2912@116.88.103.128)
[05:08:47] <geekosaur> nope
[05:08:58] <Cajun> has that idea been passed around?
[05:09:06] <geekosaur> it's been discussed
[05:09:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:09:47] <geekosaur> there are problems like (a) which operations do you constant fold (b) what are the laziness/strictness implications in each case
[05:10:00] <boxscape_> doesn't it constant fold with RULES pragmas
[05:10:12] <boxscape_> see e.g. https://gitlab.haskell.org/ghc/ghc/-/issues/9136
[05:10:19] <geekosaur> RULES pragmas only know types, not whether something is a constant or not
[05:10:34] <Axman6> LLVM can sometimes do it for you, I remember Don Stewart's posts on writing H?Askell faster than C years ago showing that you could get sum [1..1000000] to compile to a constant
[05:10:51] *** Joins: Guest63 (~Guest63@2601:282:500:80c0:1165:8bfb:dd94:6233)
[05:11:34] <geekosaur> (and "what operations" is complicated by typeclass instances in scope, potentially including nonstandard Num instances and such)
[05:12:18] <geekosaur> (and there are indeed alternative Preludes which use different Num instances for even the basic types)
[05:12:40] <geekosaur> basically the whole issue has a number of minefields you can't encounter in other languages
[05:13:28] <Guest63> https://paste.tomsmeding.com/NlqoFQO2
[05:14:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[05:14:10] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[05:14:13] <Guest63> I'm receiving an error whenever I am trying to test my function allAnswers
[05:14:39] <Cajun> Axman6: https://mail.haskell.org/pipermail/haskell-cafe/2009-February/056248.html looks like something you are referring to
[05:15:29] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[05:16:07] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[05:17:16] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:fc62:cdb:5eac:d781)
[05:17:28] *** Quits: curiousgay (~gay@77-120-141-90.kha.volia.net) (Quit: Leaving)
[05:18:11] <Cajun> Guest63: are those `ints` in the type signature deliberately lowercase? try making that a capital-I Int
[05:18:35] <geekosaur> won't work, you can't (usefully?) say Show Int as a constraint I think
[05:18:55] <Cajun> well removing those should rid you of that issue yeah?
[05:18:56] *** Joins: cheater (~Username@user/cheater)
[05:19:22] <geekosaur> but that does look confusing and likely the cause, because I think that it can't do defaulting through shouldBe and therefore has no idea what type to use there
[05:19:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[05:20:04] <Cajun> also shouldnt that be (a -> Maybe [b]) in `nonsense` since `allAnswers` expects (a -> Maybe [b])
[05:20:22] <Cajun> or rather `Int -> Maybe Int`
[05:20:28] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[05:20:39] <Cajun> s/Maybe Int/Maybe [Int]
[05:21:11] *** Quits: ph88^ (~ph88@2a02:8109:9e00:71d0:ccfc:bf5f:d318:f468) (Ping timeout: 245 seconds)
[05:22:55] <monochrom> Then "Just n" makes no sense.
[05:23:25] <monochrom> Well, it never made sense in the first place.
[05:23:55] <Cajun> yeah i think changing the `int` to `Int` and following the type errors and trusting the compiler will lead to something that works
[05:24:10] <Cajun> or a billion constraints, whichever comes first
[05:26:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:26:38] <monochrom> Pessimistically I actually think that the current story state of affairs was the outcome of some kind of following the type errors and listening to compiler suggestions.
[05:26:56] <monochrom> The original version had Int -> Maybe Int.
[05:27:24] <monochrom> It did not fit allAnswer's expectations.
[05:28:13] <monochrom> The student did not "understand" the error message. They decided that polymorphism would relax type restrictions. Afterall, it's "polymorphic".
[05:28:21] <Guest63> https://paste.tomsmeding.com/z34BjgOM
[05:28:22] <Cajun> yeah i do too, considering the show, eq, and num constraints. but i think those are because int wasnt capitalized so the compiler said to add those
[05:28:36] <Guest63> I changed int to a, and gave the complete context
[05:28:38] <monochrom> So it was changed to "int -> Maybe int" with a type variable.
[05:28:39] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:fc62:cdb:5eac:d781) (Ping timeout: 264 seconds)
[05:29:01] <monochrom> And then the compiler "helpfully" suggested that "you need to add those Eq, Num, Show conditions".
[05:30:38] <Cajun> thats what im thinking, yeah
[05:30:39] <Guest63>  "int" wasn't supposed to be "Int".  it was just a type variable, i've now changed it to "a" or similar.
[05:30:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[05:30:48] <Cajun> ah welp
[05:32:04] *** Quits: burnsidesLlama (~burnsides@dhcp168-024.wadham.ox.ac.uk) (Remote host closed the connection)
[05:32:36] *** Joins: burnsidesLlama (~burnsides@client-8-92.eduroam.oxuni.org.uk)
[05:33:27] <awpr> if it's polymorphic, you'll have to choose a particular type to test it on -- e.g. try putting a type signature `2 :: Int` inside the test case input list
[05:34:05] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:b4bd:ed21:7e07:d0e0)
[05:35:48] <monochrom> I don't understand why allAnswers is not "(a -> Maybe b) -> [a] -> [b]".
[05:35:53] <Cajun> im confused on `nonsense` being passed to `allAnswers`. `nonsense :: (a -> Maybe a)` and the first argument of allAnswers `(a -> Maybe [b])` are different arent they? unless a ~ [b]?
[05:36:18] <c_wraith> monochrom: because then it's too obviously a variant of concatMap
[05:36:46] <boxscape_> I can see "copyFile" in System.Directory, but if I'm seeing this correctly it doesn't work for directories. Is there a way to copy directories?
[05:36:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:36:53] <monochrom> And I don't understand why "firstAnswer nonsense [2,3,4] `shouldBe` Just 3" (note that it is not Just 2) and yet the allAnswers version can have 2 in [2,3,4].
[05:37:19] *** Quits: burnsidesLlama (~burnsides@client-8-92.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[05:38:20] *** Quits: Nolrai2 (~Nolrai2@c-76-27-202-218.hsd1.or.comcast.net) (Quit: Client closed)
[05:39:05] <Cajun> boxscape_: `Shelly` has good implementations of those kinda things, but i havent dabbled in that too much
[05:39:15] <boxscape_> hm okay thanks
[05:39:22] <dsal> I was about to link to that. heh
[05:39:29] <dsal> It's a higher level abstraction needed, as the system doesn't typically have that.
[05:39:42] <boxscape_> I see
[05:39:51] <geekosaur> boxscape_, the problem is directory package wants to be system-agnostic but there's no system-agnostic way to copy a directory tree
[05:39:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:40:00] <boxscape_> okay
[05:40:41] <geekosaur> windows and unix do different things, at least if you want to copy all attributes
[05:40:49] <boxscape_> right, makes sense
[05:41:22] <geekosaur> Shelly can do it but I'm pretty sure it's unix-only
[05:42:31] <boxscape_> cobbling something together in terms of directory's createDirectory and copyFile might be enough for me
[05:43:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:43:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1)
[05:44:41] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[05:44:54] *** Joins: nf (~n@monade.li)
[05:51:27] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[05:52:26] *** Joins: emf (~emf@2620:10d:c090:400::5:3efc)
[05:56:57] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[05:59:15] *** Quits: emf (~emf@2620:10d:c090:400::5:3efc) (Ping timeout: 264 seconds)
[05:59:24] *** Joins: caef^ (~caef@68.101.63.101)
[05:59:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:59:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:59:48] *** Joins: wroathe (~wroathe@user/wroathe)
[06:02:54] *** Quits: Feuermagier_ (~Feuermagi@154.28.188.153) (Remote host closed the connection)
[06:03:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:03:09] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:04:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[06:07:00] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:e81a:fa7:1342:3782)
[06:07:04] <boxscape_> good news: it works. Bad news: I must have the wrong type signature somewhere, because it created 1479 copies of my directory instead of 25
[06:07:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[06:07:29] <c_wraith> ...  that sounds like AoC prep
[06:07:47] <boxscape_> yep :)
[06:08:02] *** Quits: viluon (uid453725@id-453725.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:09:02] <c_wraith> you're prepared for the long version now!
[06:09:13] *** Joins: mvk (~mvk@2607:fea8:5cc1:fa00::4702)
[06:09:26] <boxscape_> good point
[06:09:27] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:b4bd:ed21:7e07:d0e0) (Ping timeout: 264 seconds)
[06:10:58] *** Quits: xff0x (~xff0x@2001:1a81:52f2:7200:e03c:a5df:843b:e9fd) (Ping timeout: 268 seconds)
[06:11:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[06:12:02] <boxscape_> % newtype Day = MkDay {unDay :: Int} deriving (Enum, Eq, Ord, Num, Show, Read) via Int
[06:12:03] <yahb> boxscape_: 
[06:12:10] <boxscape_> % instance Bounded Day where minBound = 1; maxBound = 25
[06:12:10] <yahb> boxscape_: 
[06:12:16] <boxscape_> % [minBound :: Day ..]
[06:12:22] <yahb> boxscape_: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
[06:12:27] <boxscape_> I expected this to stop at 25
[06:12:28] *** Joins: xff0x (~xff0x@2001:1a81:5337:5300:80c9:d1d4:6212:bca5)
[06:12:38] <geekosaur> Enum is not Bounded
[06:12:53] <boxscape_> I suppose I can see why
[06:12:59] <awpr> it got the Enum instance by taking the instance for `Int` and using it for `Day`
[06:13:22] <boxscape_> yes, I expected enumFrom to check for maxBound (which doesn't make sense to be fair, looking at the type signature
[06:13:24] <boxscape_> )
[06:14:32] <geekosaur> where's merijn to complain about Enum and Bounded being wrong :þ
[06:15:31] <boxscape_> boundedEnumFrom exists so that's nice
[06:16:07] <EvanR> for some reason enumFrom screams "infinite" to me
[06:16:21] <boxscape_> I always do things like [Monday ..] to get all the days of the week
[06:16:35] <boxscape_> I hadn't considered before that [minBound..] can be different from [minBound..maxBound]
[06:17:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[06:17:34] <boxscape_> (And I suppose it can't if you use `deriving stock (Bounded, Enum)`)
[06:17:46] *** Quits: lyxia (~lyxia@poisson.chat) (Ping timeout: 260 seconds)
[06:18:14] *** Quits: stilgart (~Christoph@chezlefab.net) (Ping timeout: 260 seconds)
[06:18:20] *** Quits: shane_ (~shane@ana.rch.ist) (Ping timeout: 246 seconds)
[06:18:23] *** Joins: stilgart (~Christoph@chezlefab.net)
[06:18:27] *** Joins: shane (~shane@ana.rch.ist)
[06:18:33] <EvanR> tbf [minBound..] is technically not infinite? xD
[06:18:50] <boxscape_> it is in the case I asked of yahb above
[06:18:51] *** Quits: peutri (~peutri@ns317027.ip-94-23-46.eu) (Ping timeout: 250 seconds)
[06:19:02] *** Quits: SIben (~SIben@ns3106586.ip-5-135-191.eu) (Ping timeout: 246 seconds)
[06:19:04] <EvanR> > enumFrom 9223372036854775807 :: [Int]
[06:19:06] <lambdabot>  [9223372036854775807]
[06:19:08] <EvanR> hmm
[06:19:13] <boxscape_> ah, well
[06:19:22] *** Joins: lyxia (~lyxia@poisson.chat)
[06:19:23] *** Quits: pippijn (~pippijn@ra.xinutec.org) (Ping timeout: 246 seconds)
[06:19:23] <boxscape_> I suppose I would have to use Integer for it to be truly infinite
[06:19:38] <EvanR> > [9223372036854775807 ..] :: [Int]
[06:19:39] <lambdabot>  [9223372036854775807]
[06:19:46] <EvanR> hehe
[06:20:21] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:e81a:fa7:1342:3782) (Ping timeout: 245 seconds)
[06:20:29] *** Joins: peutri (~peutri@ns317027.ip-94-23-46.eu)
[06:20:50] *** Joins: SIben (~SIben@ns3106586.ip-5-135-191.eu)
[06:21:13] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[06:21:17] <EvanR> varying levels of infinite
[06:21:53] <EvanR> i can't really go through all the numbers in an Int... and Integer craps out at some point 
[06:22:21] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:50e8:62eb:be31:28d8)
[06:22:28] <EvanR> (later)
[06:23:14] *** Quits: sluigi (~sluigi@2603-900a-1600-ba00-413a-d0a0-1d2f-7111.inf6.spectrum.com) (Quit: Client closed)
[06:24:04] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:24:07] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:fc62:cdb:5eac:d781)
[06:30:38] <arahael> I have this specific issue: https://github.com/corsis/clock/issues/70 - I noticed that it's just been closed, what must have been the fix?
[06:33:01] *** Quits: Guest63 (~Guest63@2601:282:500:80c0:1165:8bfb:dd94:6233) (Quit: Client closed)
[06:33:13] <boxscape_> I have a better solution for my bounds issue now https://paste.tomsmeding.com/dcNwvBwN
[06:33:44] <boxscape_> (last line is supposed to have `Between 1 25`, not `Between 1 2`)
[06:34:11] <boxscape_> (also I accidentally wrote toEnum instead of fromEnum)
[06:34:13] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[06:35:40] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[06:40:51] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:41:55] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[06:45:03] *** Joins: isovector1 (~isovector@S010650395555cb6e.gv.shawcable.net)
[06:46:39] <dsal> boxscape_: https://hackage.haskell.org/package/finite-typelits
[06:47:08] <boxscape_> thanks
[06:47:31] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:47:51] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:50e8:62eb:be31:28d8) (Ping timeout: 245 seconds)
[06:49:54] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:fd83:28f5:d4ef:37d4)
[06:49:58] *** Joins: Axma59590 (~Axman6@user/axman6)
[06:50:42] *** Quits: Axman6 (~Axman6@user/axman6) (Ping timeout: 260 seconds)
[06:50:44] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:50:45] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:50:45] *** finn_elija is now known as FinnElija
[06:52:31] <dsal> boxscape_: I used this a couple days ago.  It's pretty great:  https://dustin.github.io/tesla/Tesla-Car-Command.html
[06:52:50] <dsal> Tesla API takes an int number of minutes since midnight.
[06:52:57] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:7d52:bf34:226e:199c) (Quit: gone to sleep. ZZZzzz…)
[06:54:57] *** Joins: boxscape_72 (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[06:55:06] *** boxscape_72 is now known as boxscape__
[06:55:30] <boxscape__> dsal yeah definitely looks useful
[06:55:35] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:55:46] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 245 seconds)
[06:57:13] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:57:28] *** Quits: boxscape__ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (Client Quit)
[06:58:24] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[06:59:29] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[07:00:20] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:00:25] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:da6:ed1e:9ca5:1d2)
[07:02:11] *** Quits: isovector1 (~isovector@S010650395555cb6e.gv.shawcable.net) (Quit: Leaving)
[07:02:51] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:fd83:28f5:d4ef:37d4) (Ping timeout: 264 seconds)
[07:03:29] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 250 seconds)
[07:07:28] *** Joins: renzhi (~xp@2607:fa49:6500:b100::5cef)
[07:08:33] <dsal> I rewrote a recursive function with `fix` and I'm not sure why I did that.  Are there places where it makes sense?
[07:08:36] *** Joins: hiruji (~hiruji@user/hiruji)
[07:09:15] *** Joins: mbuf (~Shakthi@223.178.98.255)
[07:09:34] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[07:10:10] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[07:10:26] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2900:5624:d5f:15dc)
[07:13:03] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:da6:ed1e:9ca5:1d2) (Ping timeout: 264 seconds)
[07:16:17] *** Joins: jinsun__ (~quassel@user/jinsun)
[07:16:53] <EvanR> sometimes fix makes the whole thing smaller
[07:17:20] <EvanR> and pretty much guarantees someone (possibly you) will look at the code later and not know wtf is happening
[07:17:30] <c_wraith> I like fix in very limited cases, where it means I don't have to define a recursive operation inline and call it in separate steps.
[07:18:11] *** Quits: td_ (~td@94.134.91.203) (Ping timeout: 268 seconds)
[07:18:56] <c_wraith> like...  fix $ \loop -> do ...
[07:19:25] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[07:19:52] *** Joins: td_ (~td@94.134.91.109)
[07:21:46] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:88c3:30a7:232e:140)
[07:23:51] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2900:5624:d5f:15dc) (Ping timeout: 264 seconds)
[07:27:26] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[07:30:08] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:88c3:30a7:232e:140) (Quit: WeeChat 3.3)
[07:31:06] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[07:31:36] *** Joins: yauhsien_ (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[07:32:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[07:32:47] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:33:12] *** Quits: russruss (~russruss@my.russellmcc.com) (Quit: The Lounge - https://thelounge.chat)
[07:33:49] *** Joins: russruss (~russruss@my.russellmcc.com)
[07:34:37] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:39:30] *** Quits: yauhsien_ (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:45:23] <dsal> Ah, yeah.  I think I needed mfix once ever.  Then I later didn't need it.
[07:45:56] <dsal> In this particular case, I just noticed I changed it and didn't commit it, so I have the smaller version which is easier to read as a reference.  heh
[07:50:18] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:51:23] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[07:54:26] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:3017:c1dd:5d13:2be1)
[07:57:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:cd02:5ed5:f7c5:1e43) (Ping timeout: 245 seconds)
[07:59:42] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:06:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:07:01] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[08:07:39] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[08:09:44] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[08:10:41] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[08:14:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:15:27] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[08:17:35] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:19:06] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[08:20:06] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:21:46] *** Quits: mbuf (~Shakthi@223.178.98.255) (Quit: Leaving)
[08:22:54] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:24:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:27:27] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[08:28:29] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:fc62:cdb:5eac:d781) (Ping timeout: 268 seconds)
[08:28:41] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[08:33:34] *** Joins: rkrishnan (~user@122.172.141.170)
[08:34:06] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 245 seconds)
[08:34:37] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[08:37:23] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[08:39:16] *** Quits: caef^ (~caef@68.101.63.101) (Remote host closed the connection)
[08:39:49] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[08:39:54] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:43:04] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[08:43:16] <EvanR> recursive do can be used to manually create looping data structures, but I'm not sure if its practical
[08:43:42] <EvanR> I guess it could be a slick way to generate a node list
[08:43:48] <EvanR> of a graph
[08:47:26] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[08:48:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[08:52:36] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[08:53:08] *** Joins: jinsun (~quassel@user/jinsun)
[08:56:51] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[08:59:04] *** Joins: zebrag (~chris@user/zebrag)
[09:01:09] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[09:01:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:cb:bef4:82f4:b2d6)
[09:02:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:03:56] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[09:04:47] *** Joins: reumeth (~reumeth@user/reumeth)
[09:05:15] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:3017:c1dd:5d13:2be1) (Ping timeout: 250 seconds)
[09:06:52] <dsal> I was reading some of the RULES in Data.List and see `foldr/id" foldr (:) [] = \x  -> x` and... that's kind of weird.
[09:10:59] *** Quits: gaff (~gaff@49.207.195.213) (Remote host closed the connection)
[09:11:11] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[09:11:33] <rkrishnan> trying to build ghcjs from their default branch 8.10.7 and the build process builds ghc and gives me this error: https://pastebin.com/YDi0QaTr I pasted the code around the reported line here: https://pastebin.com/8qFquJHg Seem like the #include in the previous line is the culprit?
[09:16:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[09:17:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:17:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:17:34] *** Joins: wroathe (~wroathe@user/wroathe)
[09:18:30] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[09:22:45] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[09:26:54] *** Joins: jbox (~jbox@user/jbox)
[09:27:18] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[09:27:51] *** Quits: drdo (~drdo@roach0.drdo.eu) (Ping timeout: 245 seconds)
[09:28:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:29:21] *** Joins: sayola (~vekto@dslb-002-201-085-156.002.201.pools.vodafone-ip.de)
[09:31:51] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:32:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[09:32:53] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:32:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[09:33:57] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[09:34:18] <arahael> Can I specify a default set of additional ghc-options to be used system-wide?
[09:34:21] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:34:36] <arahael> Getting a bit tired of typing the likes of: cabal run --ghc-option=(pkg-config --cflags libffi)
[09:36:36] <xsperry> IIRC I there's a way to do that, but the more common approach is to put it in ghc-options section of the project's cabal file
[09:37:03] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:37:29] <xsperry> {-# OPTIONS_GHC ... #-} on top of the file works too
[09:38:17] <arahael> xsperry: It needs to be applied to the modules that cabal would install as dependencies, though.
[09:38:36] *** Joins: sub0 (~bc8165b6@217.29.117.252)
[09:38:48] <arahael> Ie, I really do want it to be as global as I've got it there.
[09:38:58] <arahael> Otherwise I can't install or build anything that requires the ffi.
[09:40:11] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[09:41:03] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:e191:f0f5:a80a:e4b9)
[09:42:46] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[09:43:01] <sub0> arahael,  wellshouldn't those modules have ffi specified in their cabal file, if they require it? I never had problems installing modules that require FFI, without specifying any global cabal options
[09:43:30] <arahael> sub0: I have this bug: https://gitlab.haskell.org/ghc/ghc/-/issues/20592
[09:44:31] *** Joins: gaff (~gaff@49.207.199.69)
[09:48:29] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:48:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:48:30] *** Joins: wroathe (~wroathe@user/wroathe)
[09:48:41] *** Quits: gaff (~gaff@49.207.199.69) (Ping timeout: 245 seconds)
[09:53:17] *** Joins: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[09:53:23] <sub0> arahael, I never encountered similar error. perhaps ask your question again at a more busy hour
[09:53:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[09:54:25] <c_wraith> arahael: the last comment there suggests you can just set an env variable
[09:55:52] <arahael> Oh, of course.  Let me try that.
[09:55:56] *** Quits: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[09:57:32] <arahael> That does work a charm. :)
[10:00:27] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 264 seconds)
[10:01:33] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[10:03:07] *** Quits: quintasan (~quassel@quintasan.pl) (Quit: No Ping reply in 180 seconds.)
[10:04:15] *** Joins: quintasan (~quassel@quintasan.pl)
[10:07:45] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[10:07:46] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[10:08:37] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:10:41] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:12:03] *** Joins: jbox (~jbox@user/jbox)
[10:13:02] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[10:13:43] *** Joins: gaff (~gaff@49.207.222.229)
[10:13:59] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:16:35] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:17:24] *** Joins: emf (~emf@163.114.132.7)
[10:20:37] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:4de4:2055:b8c4:f1e)
[10:24:27] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:cb:bef4:82f4:b2d6) (Ping timeout: 264 seconds)
[10:31:53] *** Joins: mei (~mei@user/mei)
[10:32:40] *** Quits: mei (~mei@user/mei) (Client Quit)
[10:34:27] *** Joins: mei (~mei@user/mei)
[10:34:30] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[10:37:40] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[10:38:37] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:38:40] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[10:43:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:44:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:46:39] *** Quits: statusbot3 (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (Remote host closed the connection)
[10:46:52] *** Joins: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[10:46:56] *** Joins: yuri (~yuri@85.89.126.31)
[10:48:51] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[10:50:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:51:08] *** Joins: fr33domlover (~fr33@2.55.142.25)
[10:51:37] *** Joins: yauhsien (~yauhsien@49.216.238.61)
[10:58:37] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 256 seconds)
[11:01:35] *** Joins: trillp (~trillp@69.233.98.238)
[11:01:38] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[11:02:24] *** Quits: yauhsien (~yauhsien@49.216.238.61) (Remote host closed the connection)
[11:04:16] *** Joins: yauhsien (~yauhsien@49.216.238.61)
[11:05:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[11:06:45] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:07:11] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:08:19] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 250 seconds)
[11:11:36] *** Quits: xff0x (~xff0x@2001:1a81:5337:5300:80c9:d1d4:6212:bca5) (Ping timeout: 245 seconds)
[11:12:40] *** Joins: xff0x (~xff0x@2001:1a81:5337:5300:9054:dfe3:6e71:3a05)
[11:17:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:18:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:19:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:19:17] *** Joins: trcc (~trcc@users-1190.st.net.au.dk)
[11:19:35] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:20:36] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[11:23:50] *** Quits: trcc (~trcc@users-1190.st.net.au.dk) (Client Quit)
[11:25:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:25:47] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:26:42] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:28:13] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:28:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:30:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:31:48] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:30f2:c6f2:bddd:bf44)
[11:33:09] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[11:34:59] *** Quits: thaumavorio (~thaumavor@thaumavor.io) (Ping timeout: 250 seconds)
[11:34:59] *** Quits: cfebs (~cfebs@user/cfebs) (Ping timeout: 250 seconds)
[11:35:24] *** Joins: drewolson3 (~drewolson@user/drewolson)
[11:35:49] *** Joins: cfebs (~cfebs@user/cfebs)
[11:35:51] *** Quits: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (Ping timeout: 250 seconds)
[11:36:15] *** Joins: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[11:36:17] *** Quits: drewolson (~drewolson@user/drewolson) (Ping timeout: 250 seconds)
[11:36:17] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 250 seconds)
[11:36:17] *** drewolson3 is now known as drewolson
[11:36:23] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Ping timeout: 264 seconds)
[11:36:29] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[11:37:17] *** Joins: thaumavorio (~thaumavor@thaumavor.io)
[11:39:36] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:40:17] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[11:43:20] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[11:43:20] *** Quits: yauhsien (~yauhsien@49.216.238.61) (Read error: Connection reset by peer)
[11:43:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[11:44:05] *** Joins: cfricke (~cfricke@user/cfricke)
[11:45:12] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:e191:f0f5:a80a:e4b9) (Ping timeout: 268 seconds)
[11:45:47] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:46:27] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:46:32] *** Joins: chele (~chele@user/chele)
[11:49:29] *** Joins: acidjnk (~acidjnk@p200300d0c7271e75119700900401854f.dip0.t-ipconnect.de)
[11:50:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[11:51:25] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[11:52:09] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:52:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcf1:6c47:4df:1ed1) (Remote host closed the connection)
[11:54:00] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 260 seconds)
[11:55:58] *** Joins: michalz (~michalz@185.246.204.45)
[11:57:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:00:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:03:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:03:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:07:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:07:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:08:31] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:12:39] *** Joins: ph88_ (~ph88@2a02:8109:9e00:71d0:e191:f0f5:a80a:e4b9)
[12:15:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:15:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:16:23] *** Joins: jgeerds (~jgeerds@55d45b75.access.ecotel.net)
[12:16:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:17:09] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[12:17:37] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[12:22:40] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:23:51] *** Quits: mvk (~mvk@2607:fea8:5cc1:fa00::4702) (Ping timeout: 264 seconds)
[12:23:58] *** Joins: Unhammer (~Unhammer@user/unhammer)
[12:24:21] *** Joins: whatif (~user@2400:8902::f03c:92ff:fe60:98d8)
[12:24:43] <whatif> is linked list useful in haskell?
[12:25:02] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:25:39] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:25:45] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:25:55] <kuribas> whatif: why wouldn't it be?
[12:26:09] <kuribas> Most of the prelude functions are on linked lists.
[12:26:24] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:26:53] <whatif> I haven't used it, I don't know what case it is for
[12:27:15] <kuribas> I guess that means you haven't used haskell at all?
[12:27:31] <whatif> ...
[12:28:24] <kuribas> lists and maps are pretty much the most used collection in my code.
[12:28:32] <merijn> whatif: That's not a weird question. I would honestly be fairly astonished if you haven't used linked lists in Haskell
[12:28:40] <whatif> I learn a few language, like python kotlin and haskell, I don't know when to use "linked list"
[12:29:12] <dminuoso> whatif: In Haskell, the regular list type [] is used often as a plain substitute for generic lists or implicitly for control flow
[12:29:17] <merijn> whatif: Haskell's list *is* a linked list, so if you've used lists in haskell, you already have used them
[12:29:18] <dminuoso> It's very ubiquitious
[12:29:40] <dminuoso> Even when you use String, you are using a list because `type String = [Char]`
[12:29:54] <dminuoso> (Of course whether that was ever a good idea is debatable)
[12:29:56] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:29:57] <kuribas> whatif: whenever you need to store many values.
[12:31:00] <whatif> I saw someone implement a linked list with class in python, I don't know what's the point
[12:31:20] <whatif> like implement a linked list in haskell?
[12:31:37] *** Joins: max22- (~maxime@2a01cb0883359800b50cd0817109af2c.ipv6.abo.wanadoo.fr)
[12:31:41] <whatif> and [] is already a linked list, what's the point?
[12:31:48] <dminuoso> What's the point of what?
[12:32:03] <whatif> to creat a new linked list
[12:32:08] <kuribas> whatif: indeed, there is no point in reimplementing a linked list in haskell, except for teaching the concept.
[12:32:13] <dminuoso> Who is telling yout o "create a new linked list", whatif?
[12:32:43] <whatif> dminuoso: I saw someone's code is doing that
[12:32:44] <kuribas> whatif: though many guides do it show that a list is not a primitive in haskell.
[12:32:58] *** AlexNoo_ is now known as AlexNoo
[12:33:00] <dminuoso> whatif: Ask them, then?
[12:33:12] <dminuoso> Without knowing more details, we cant tell you why someone else did what they did.
[12:33:29] <whatif> right
[12:33:45] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.133)
[12:33:45] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.133) (Changing host)
[12:33:45] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:35:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:35:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:35:48] <kuribas> whatif: use only good code as examples of writing haskell, not bad code.
[12:36:11] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:36:36] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:38:26] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[12:41:23] <sub0> I can't see any practical reason for implementing and then using your own linked list in haskell, vs a built in one. so it was probably in the context of teaching
[12:42:43] <merijn> sub0: Well, NonEmpty is one :p
[12:43:12] <kuribas> Or doubly linked one, use tie the knot?
[12:43:28] <kuribas> Hard to know without whatif giving more info.
[12:46:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:46:30] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[12:46:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:46:55] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:28] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:48:29] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:50:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:50:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:52:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[12:54:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[12:54:36] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[12:54:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[12:56:57] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[12:58:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Ping timeout: 264 seconds)
[13:01:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:01:29] *** Quits: gaff (~gaff@49.207.222.229) (Remote host closed the connection)
[13:01:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:03:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:03:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:03:55] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:04:10] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:06:12] *** Joins: atwm (~andrew@19-193-28-81.ftth.cust.kwaoo.net)
[13:08:09] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:08:36] *** Joins: alzgh (~alzgh@user/alzgh)
[13:11:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:12:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:13:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:14:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:15:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:15:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:17:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:18:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:20:16] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:21:47] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[13:22:45] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.133)
[13:22:45] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.133) (Changing host)
[13:22:45] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:26:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[13:26:44] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[13:26:48] *** Joins: fr33domlover_ (~fr33@2.55.143.230)
[13:26:51] *** Quits: fr33domlover (~fr33@2.55.142.25) (Ping timeout: 264 seconds)
[13:26:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:28:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:29:02] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:30:00] *** Joins: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[13:31:10] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a418:17da:6b4f:5fc3)
[13:32:18] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[13:32:26] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:32:34] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[13:34:26] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:36:03] <rkrishnan> Does ghcjs support compiling packages that has C code?
[13:37:58] <merijn> Almost certainly not
[13:41:17] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 250 seconds)
[13:42:03] <rkrishnan> merijn: thanks. That is what I guessed too. But then I saw emcc being used. Seem like it is only used as a preprocessor?
[13:42:43] *** Joins: Moyst (~moyst@user/moyst)
[13:42:45] <rkrishnan> I guess this means, packages that depend on cryptonite cannot be compiled using ghcjs. :-( 
[13:44:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[13:44:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[13:45:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[13:45:36] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[13:45:55] *** Joins: kmein (~weechat@user/kmein)
[13:46:53] *** Joins: canxiu (uid524910@id-524910.helmsley.irccloud.com)
[13:47:31] <[exa]> rkrishnan: not sure that it would be a great idea even if it worked, you'd lose most of the good properties of the implemnetation there anyway
[13:49:46] *** Quits: td_ (~td@94.134.91.109) (Ping timeout: 268 seconds)
[13:50:20] <rkrishnan> [exa]: yes, agreed.
[13:51:00] <[exa]> otoh "at least it would work"... :D
[13:51:23] *** Joins: td_ (~td@94.134.91.173)
[13:52:40] <kuribas> merijn: no webassembly hack?
[13:55:31] <merijn> I dunno
[13:55:48] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[13:56:45] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:58:42] *** Quits: mcglk (~mcglk@131.191.49.120) (Remote host closed the connection)
[14:00:06] *** Joins: mcglk (~mcglk@131.191.49.120)
[14:00:31] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:01:18] *** Joins: puke (~puke@user/puke)
[14:02:01] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[14:02:14] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:e6b3:18ff:fe83:8f33)
[14:04:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:04:42] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:04:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:05:39] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:a418:17da:6b4f:5fc3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:06:41] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:06:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:08:31] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a418:17da:6b4f:5fc3)
[14:09:27] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 264 seconds)
[14:11:07] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:11:25] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:13:05] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:13:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:15:03] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:15:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:17:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:17:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:18:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:19:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:21:23] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:21:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:22:21] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:30f2:c6f2:bddd:bf44) (Quit: WeeChat 2.8)
[14:24:22] *** Joins: mmhat (~mmh@55d43159.access.ecotel.net)
[14:25:10] *** Joins: deadmarshal (~deadmarsh@95.38.117.32)
[14:27:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:27:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:28:02] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:29:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:30:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:31:40] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:31:58] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:33:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:33:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:35:37] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:35:56] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:36:23] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[14:38:52] <dminuoso> Gah, why do let bindings in do-notation force Monad while ApplicativeDo is enabled?
[14:39:13] <dminuoso> Couldn't GHC assume referential transparency, and just inline the let binding instead?
[14:39:56] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 245 seconds)
[14:40:04] *** Joins: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de)
[14:41:42] <opqdonut> dminuoso: let <pattern> = ... needs MonadFail I guess? Maybe GHC doesn't detect whether patterns can fail?
[14:42:58] *** Joins: Moyst (~moyst@user/moyst)
[14:43:31] <dminuoso> opqdonut: Id be surprised if it did. MonadFail is about pattern matches on <-, no?
[14:43:52] <dminuoso> @undo do { let x = 1; pure () }
[14:43:52] <lambdabot> <unknown>.hs:1:25:Parse error: }
[14:44:34] <opqdonut> > do let Just x = Nothing; [True]
[14:44:35] <lambdabot>  <hint>:1:32: error:
[14:44:35] <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
[14:44:42] <opqdonut> > do {let Just x = Nothing; [True]}
[14:44:43] <lambdabot>  <hint>:1:33: error: parse error on input ‘}’
[14:44:46] <opqdonut> meh
[14:44:50] <dminuoso> Yeah I cant figure it out either
[14:45:51] <dminuoso> undo do {a <- x; let b = a; f a b }
[14:45:53] <dminuoso> @undo do {a <- x; let b = a; f a b }
[14:45:53] <lambdabot> <unknown>.hs:1:30:Parse error: }
[14:46:18] *** Joins: oxide (~lambda@user/oxide)
[14:46:59] <dminuoso> @undo do let { x = 1} in pure ()
[14:46:59] <lambdabot> let { x = 1} in pure ()
[14:47:02] <dminuoso> opqdonut: ^-
[14:47:30] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[14:48:17] <kuribas> dminuoso: probably applicativeDo is done before optimizations.
[14:50:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:51:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:51:33] <kuribas> dminuoso: but I find it a rather half-assed extension.
[14:51:45] <kuribas> Perhaps it is hard to do whole-assed.
[14:53:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:54:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[14:55:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[14:55:40] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:58:08] <opqdonut> dminuoso: I'd expect "let ... in ..." to work in ApplicativeDo, but that's different from "let ...;"
[14:59:19] <opqdonut> but looks like I was wrong about MonadFail, at least the Haskell2010 standard specifies that <- generates calls to fail but let doesn't
[14:59:32] *** Joins: mreh (~mreh@2a00:23c7:2803:ef00:2cfc:8111:4bd9:f4d7)
[15:01:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:01:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:03:11] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:03:29] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:03:58] *** Quits: mreh (~mreh@2a00:23c7:2803:ef00:2cfc:8111:4bd9:f4d7) (Ping timeout: 256 seconds)
[15:05:38] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:05:57] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:06:44] *** Quits: deadmarshal (~deadmarsh@95.38.117.32) (Ping timeout: 260 seconds)
[15:06:53] <dminuoso> kuribas: Im not talking about inlining as an optimization.
[15:07:08] <dminuoso> Im talking about inlining as a sort of gap filler 
[15:07:42] <dminuoso> In the sense of "If ApplicativeDo is enabled, do an additional pass on the do-block inlining all let bindings"
[15:08:15] <opqdonut> that might surprise some users
[15:08:23] <opqdonut> breaks the "a defined name is evaluated at most once" rule
[15:09:18] <kuribas> dminuoso: it looks to me like there is a lot of overhanging fruit for ApplicativeDo.
[15:09:28] <kuribas> But maybe there are subtle details that I don't see...
[15:09:57] <dminuoso> opqdonut: Where is that rule written?
[15:10:27] <dminuoso> Haskell already does inlining everywhere anyway
[15:10:34] <dminuoso> So I dont have that guarantee either way
[15:11:03] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[15:11:34] <dminuoso> Or differently phrased: if what you wrote was true, haskell could *never* inline something that was named
[15:11:43] <dminuoso> Or inline it twice, at least.
[15:11:51] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[15:14:05] <opqdonut> dminuoso: it's my mental model for reasoning about haskell performance, at least, and it's kinda the definition of lazy evaluation
[15:14:12] <opqdonut> but yeah it might not be strictly true
[15:14:22] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[15:14:31] <opqdonut> (heh, strictly)
[15:14:43] <dminuoso> cute pun indeed :()
[15:15:26] <dminuoso> opqdonut: Im not sure you even need that for lazy evaluation, as long as its not observably different. The only place this matters for is tractable sharing
[15:15:41] <dminuoso> Because sharing relies on GHC not inlining the very definition
[15:16:22] <opqdonut> mhmm
[15:16:27] <dminuoso> And infact, there's a good reason global IORefs use NOLINE
[15:16:31] <dminuoso> NOINLINE even
[15:17:09] <dminuoso> Because otherwise GHC would be free to inline that `foo = unsafePerformIO (newIORef "foo")` everywhere
[15:18:46] <dminuoso> Maybe Ill throw this question towards the GHC folks, they ought to know what the simplifier does best
[15:18:47] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[15:19:32] <arahael> Am I able to have two different versions of ghcup and have it manage their own haskells?
[15:21:12] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:21:30] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:22:03] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 264 seconds)
[15:23:43] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[15:23:58] *** Joins: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de)
[15:24:01] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[15:24:25] <arahael> (It's not a stupid question - I basically want to have two different architectures installed simultaniously)
[15:27:02] <boxscape_> If I use unsafePerformIO to read a config file, is it advisable to add a NOINLINE pragma?
[15:27:45] <tomsmeding> dminuoso: I would love for ghc to inline my 1 + x, but wouldn't like my ghc to inline 'sum (primesUntil 1e8)'
[15:28:05] <tomsmeding> the definition of work duplication becomes fuzzy when talking about optimising compilers, because sometimes duplication of work is beneficial
[15:28:24] <dminuoso> boxscape_: My two cents are, probably yes?
[15:28:32] <tomsmeding> but I wouldn't want this to influence whether my do block has a MonadFail constraint -- that's a huge breaking of abstraction
[15:28:49] <dminuoso> boxscape_: Ive been bitten sorely by unsafePerformIO in multiple ways, suggesting what GHC does is not very intuitive.,
[15:28:55] <tomsmeding> boxscape_: if you don't want your program to sometimes read the config file lots of times :)
[15:28:55] <boxscape_> okay
[15:29:02] <boxscape_> makes sense
[15:29:11] <nf> how can i turn a lens into a Context/Pretext?
[15:29:22] <nf> i mean applying it to some structure
[15:29:26] <dminuoso> boxscape_: My favourite was doing something like `traverse (\x -> Foo { field1 = x, field2 = unsafePerformIO (newIORef []) ) structure`
[15:29:37] <dminuoso> GHC floated that IORef out, sharing all those mutable buffers into one
[15:29:44] <boxscape_> oh, nice
[15:30:03] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[15:31:00] <dminuoso> nf: You use `sell`
[15:31:04] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:31:12] <dminuoso> See https://hackage.haskell.org/package/lens-5.1/docs/src/Control.Lens.Lens.html#cloneLens for instance
[15:31:33] <nf> hm, thanks
[15:31:45] <nf> isn't that internal
[15:31:52] <dminuoso> Yes.
[15:32:09] <dminuoso> You asked how to turn it into Pretext, I answered? :p
[15:32:21] <dminuoso> nf: What is the problem you are trying to solve?
[15:32:26] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:3095:3db8:3339:3962)
[15:32:32] *** Joins: viluon (uid453725@id-453725.helmsley.irccloud.com)
[15:34:06] *** Quits: yuri (~yuri@85.89.126.31) (Remote host closed the connection)
[15:34:12] <nf> i have a list, say [1, 2, 3]. i want to apply a function Int -> [Int] to each element and get a list of lists
[15:34:28] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d22:12b7:6d7c:fb3c)
[15:34:45] <dminuoso> Im a bit baffled, how do you possibly arrive at Context/Pretext with that question?
[15:35:07] *** Joins: yuri (~yuri@85.89.126.31)
[15:35:09] <nf> good question
[15:35:32] <dminuoso> Anyway. You just use `fmap` or its operator version `<$>`
[15:35:44] <nf> that's not what i mean
[15:35:49] <nf> say f is \n -> replicate n n
[15:36:00] <nf> i want to get [[1, 2, 3], [1, 2, 2, 3], [1, 2, 3, 3, 3]]
[15:36:19] *** Joins: __monty__ (~toonn@user/toonn)
[15:36:25] <nf> my current idea is to use suffixed suffix . prefixed prefix
[15:36:34] <nf> where suffix/prefix map over the tails and inits
[15:36:43] <nf> that gets me a list of lenses
[15:37:02] <dminuoso> Im not sure I see the pattern here
[15:37:03] <nf> then i guess i can just use the lenses on the initial list, i don't really need contexts
[15:37:14] <dminuoso> And Im also not sure what this has to do with lenses yet
[15:37:44] <dminuoso> You want the nth element to be replicated n times in place?
[15:38:01] <nf> that particular f is only an example
[15:38:05] <nf> it should work for any f
[15:38:21] <nf> the [] in f's return type isn't nondeterminism, it's the thing i want to insert in place of the element
[15:38:36] <dminuoso> Ah I see
[15:38:42] <nf> btw i'm not married to lists, if there's a data structure with a better interface for this i'm all ears
[15:39:12] <nf> Sequence has sliced but it applies f to each element of the slice. vector has sliced too but it comes with a big warning "don't change the length of the list"
[15:39:45] <nf> and if you want the FULL full context, i'm trying to solve advent of code 2015 day 19 part 1.
[15:40:18] * arahael is impressed :)
[15:40:21] <nf> (in an elegant and/or overengineered way)
[15:40:40] <arahael> I drown the past years in sorrow and continue blindly forwards each year. ;)
[15:41:06] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:41:13] <dminuoso> nf: So intuitively Id stare at contextsOf
[15:41:23] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 268 seconds)
[15:41:28] <dminuoso> This has Plated written all over it
[15:41:56] <nf> yeah but the contexts given by contextsOf don't really let you insert a list into a single element
[15:43:07] *** Joins: Moyst (~moyst@user/moyst)
[15:45:21] *** Quits: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[15:45:38] *** Joins: notzmv (~zmv@user/notzmv)
[15:46:36] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 245 seconds)
[15:47:06] *** Joins: raehik1 (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:47:42] <nf> maybe there's something to do with iconcatMap
[15:48:28] <nf> or concatMapOf
[15:48:54] <dminuoso> nf: The closest thing I can see is actually Monad on Tree
[15:49:02] <dminuoso> Is this what you are after?
[15:49:20] <nf> i was thinking about that
[15:49:39] <dminuoso> Or rather Monad even on List
[15:50:15] <nf> that would be the iconcatMap idea
[15:50:50] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:6dfb:d68d:ebe:207)
[15:51:02] <nf> iconcatMap (\i x -> if i == j then f x else [x])  where j ranges over the length of the list
[15:51:03] <dminuoso> Yeah I guess
[15:52:09] <dminuoso> nf: Though I think the i is a red herring, since you can trivially just zip some index into the structure
[15:52:35] <dminuoso> As long as its Traversable, anyway
[15:52:42] <nf> yes, it's just convenient
[15:54:45] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:e191:f0f5:a80a:e4b9) (Ping timeout: 250 seconds)
[15:56:30] *** Quits: canxiu (uid524910@id-524910.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:58:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:59:47] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:00:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:01:45] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:02:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:03:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:04:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:05:07] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:05:59] *** Joins: Unhammer (~Unhammer@user/unhammer)
[16:06:25] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[16:06:38] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:07:28] <nf> ugh, my prefixed . suffixed idea just unfolds itself into normal lens-free code
[16:07:56] <nf> hate when that happens
[16:09:47] *** Quits: Unhammer (~Unhammer@user/unhammer) (Quit: WeeChat 2.3)
[16:14:46] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:15:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:16:45] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:17:04] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:18:47] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:19:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:20:59] *** Quits: jgeerds (~jgeerds@55d45b75.access.ecotel.net) (Ping timeout: 250 seconds)
[16:22:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:23:00] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:23:07] *** Joins: Unhammer (~Unhammer@user/unhammer)
[16:24:34] *** Quits: max22- (~maxime@2a01cb0883359800b50cd0817109af2c.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:25:08] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[16:26:03] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Quit: ZNC - https://znc.in)
[16:26:13] *** Joins: tafa (~tafa@tafa.xyz)
[16:27:42] *** Quits: Unhammer (~Unhammer@user/unhammer) (Quit: WeeChat 2.3)
[16:28:27] *** Quits: yuri (~yuri@85.89.126.31) (Quit: Ухожу я от вас (xchat 2.4.5 или старше))
[16:31:44] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:32:03] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:33:31] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 256 seconds)
[16:34:05] *** Quits: wei2912 (~wei2912@116.88.103.128) (Quit: Lost terminal)
[16:34:43] *** Quits: tafa (~tafa@tafa.xyz) (Remote host closed the connection)
[16:34:52] *** Joins: tafa (~tafa@tafa.xyz)
[16:35:44] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[16:38:39] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[16:38:51] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[16:40:23] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[16:41:53] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:42:27] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 264 seconds)
[16:43:21] *** Joins: akegalj (~akegalj@50-194.dsl.iskon.hr)
[16:43:23] *** Joins: Moyst (~moyst@user/moyst)
[16:43:48] <tomsmeding> oh no, no more fancy stuffs, my code is too simple!
[16:44:07] <tomsmeding> nf: when in need, you can always @pl
[16:44:24] <nf> :D
[16:44:47] <arahael> Is it possible to use a custom fork of a dependency?
[16:45:01] <tomsmeding> with cabal.project or stack.yaml, yes
[16:45:18] <arahael> Ah, nifty, so I should look at the docs for cabal.project.
[16:45:19] <tomsmeding> add a git repo dependency with the right name, then I think it will be used instead of the hackage one
[16:45:25] <arahael> Neat.
[16:45:35] <arahael> That should work around a basement issue I've got.
[16:45:35] <maerwald> or create your own hackage repo
[16:47:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:47:26] <arahael> maerwald: I don't think I want that overhead, but the thought is intriguing.
[16:47:34] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:47:46] * boxscape_ ．。ｏＯI should do AoC purely on the type-level one of these days 
[16:48:33] <tomsmeding> tip, uses idris, then that goal can be reached without changing code
[16:48:54] <boxscape_> that's cheating :(
[16:49:08] <tomsmeding> agreed
[16:50:35] * maerwald closes the DH proposal with "go use Idris"
[16:51:58] <tomsmeding> that's cheating :(
[16:52:17] <maerwald> agreed
[16:52:20] <arahael> This makes me feel good - G'night. :)   ( boxscape_: AoC's a good place for cheating. Just don't tell santa.)
[16:52:27] *** Joins: Unhammer (~Unhammer@user/unhammer)
[16:52:54] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d22:12b7:6d7c:fb3c) (Quit: gone to sleep. ZZZzzz…)
[16:53:21] <boxscape_> :)
[16:56:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[16:56:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[16:58:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[17:00:06] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:00:17] *** Quits: tafa (~tafa@tafa.xyz) (Quit: ZNC - https://znc.in)
[17:00:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:00:26] *** Joins: tafa (~tafa@tafa.xyz)
[17:00:50] *** Quits: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de) (Quit: Client closed)
[17:02:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[17:03:37] *** Quits: tafa (~tafa@tafa.xyz) (Remote host closed the connection)
[17:03:46] *** Joins: tafa (~tafa@tafa.xyz)
[17:06:06] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[17:07:31] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 256 seconds)
[17:11:17] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:11:35] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:13:15] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:13:33] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:13:45] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:13:50] *** Joins: max22- (~maxime@2a01cb0883359800180cddb567bc39f4.ipv6.abo.wanadoo.fr)
[17:13:59] *** Quits: tafa (~tafa@tafa.xyz) (Changing host)
[17:13:59] *** Joins: tafa (~tafa@user/tafa)
[17:16:02] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[17:19:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:20:13] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:20:30] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[17:22:10] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:22:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:22:49] *** iphy_ is now known as iphy
[17:23:10] *** Joins: renatofdds[m] (~renatofdd@2001:470:69fc:105::1:3cfe)
[17:25:13] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d22:12b7:6d7c:fb3c)
[17:27:55] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 256 seconds)
[17:28:31] *** Joins: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de)
[17:28:35] *** Joins: hiruji (~hiruji@user/hiruji)
[17:30:37] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[17:31:03] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 264 seconds)
[17:32:34] *** Joins: gaff (~gaff@49.207.205.97)
[17:33:24] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d22:12b7:6d7c:fb3c) (Quit: gone to sleep. ZZZzzz…)
[17:35:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:35:19] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[17:35:21] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:35:31] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:36:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[17:37:29] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[17:37:38] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:39:18] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:39:37] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:39:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:41:31] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:41:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:42:05] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 256 seconds)
[17:43:25] *** Joins: Moyst (~moyst@user/moyst)
[17:44:30] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[17:44:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[17:47:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:47:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:49:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:50:07] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:52:04] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[17:52:22] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[17:53:04] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:53:22] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:53:35] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:53:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:53:36] *** Joins: wroathe (~wroathe@user/wroathe)
[17:56:07] *** Joins: slack1256 (~slack1256@181.42.51.52)
[17:56:41] <slack1256> Does DerivingVia only make sense for newtypes, not for data? is that right?
[17:58:51] <boxscape_> that's right
[17:58:53] <int-e> The intermediate type (the `via` one) is always a newtype.
[17:59:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:59:10] *** Joins: reumeth (~reumeth@user/reumeth)
[17:59:12] <[exa]> slack1256: it explicitly requires that the 2 things are coercible, which basically means that it must be a newtype
[17:59:24] <int-e> But you can derive instances for any type. So... which of these types is the question about?
[17:59:56] <boxscape_> right, you could have something like `data Foo a = ... deriving Show via Bar Foo`, here `Bar` has to be a newtype
[18:00:08] <nf> looking for inspiration, what do i name a function of type  Ord k => [(k, a)] -> Map k [a]  ?
[18:00:31] <int-e> :t M.fromListWith (++)
[18:00:31] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[18:00:32] <lambdabot> Ord k => [(k, [a])] -> M.Map k [a]
[18:00:40] <nf> not quite
[18:00:42] <int-e> :t M.fromListWith (++) . map (second pure)
[18:00:43] <lambdabot> Ord k => [(k, a)] -> M.Map k [a]
[18:00:43] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:01:04] <nf> now give it a name
[18:01:05] <slack1256> boxscape_ , int-e : Got it, it is clear now! :-)
[18:01:20] <janus> tomsmeding: code evaluated at compile time in idris can be way slower. so it is not always feasible to take previously compiled code and evaluate it
[18:01:21] <int-e> nf: I've done it a number of time and never named it
[18:01:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:01:37] <int-e> nf: so I'll just refuse again.
[18:01:46] <nf> :(
[18:02:55] <int-e> well, `group` or `classify` are verbs in this context
[18:03:03] *** Quits: emf (~emf@163.114.132.7) (Ping timeout: 256 seconds)
[18:03:15] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 250 seconds)
[18:03:47] *** Parts: renatofdds[m] (~renatofdd@2001:470:69fc:105::1:3cfe) ()
[18:03:59] <tomsmeding> janus: who said anything about performance :)
[18:04:10] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1d7b:c50:11c3:7017)
[18:04:12] <tomsmeding> but you're right of course
[18:04:13] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[18:04:28] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:05:01] <janus> but with AoC don't you have to submit some kind of result? if it finishes a computation, nothing can be submitted
[18:05:11] <janus> *if it never
[18:05:40] <boxscape_> usually the performance requirements aren't *too* bad as long as you choose an algorithm with alright asymptotics
[18:06:50] <boxscape_> I think I'm misunderstanding readPrec. I have `newtype Day = MkDay Int`, and `instance Read Day where readPrec = MkDay <$> readPrec @Int`. But if I try something like `read "24" :: Day`, I get an infinite loop. Any idea why?
[18:07:23] *** Joins: emf (~emf@2620:10d:c091:480::1:8be1)
[18:07:47] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[18:08:02] <janus> boxscape_: i had a problem the other day with type-level nats being way to slow when interpreted. the asymptotics are probably the same but the constant factor is way larger. so given that i am just a beginning idris programmer and i ran into this, i am not convinced it is usually ok. asymptotics don't matter if the constants are huge.
[18:08:40] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:08:42] *** Quits: sub0 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Ping timeout))
[18:09:22] <boxscape_> doesn't that change the asymptotics because Idris uses unary for type-level nats but binary for term-level nats? I could be wrong.
[18:09:26] *** Quits: slack1256 (~slack1256@181.42.51.52) (Remote host closed the connection)
[18:10:22] <boxscape_> (Though to be clear I meant the performance requirements for AOC, I didn't mean to comment before on how using a function on a type-level in Idris affects its performance)
[18:13:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:15:22] <boxscape_> Okay when I try the same thing yahb it's not an infinite loop, hmm
[18:15:42] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[18:15:54] <boxscape_> Ohh I think my Show instance is actually what's producing the infinite loop
[18:16:31] *** Joins: emf_ (~emf@2620:10d:c090:400::5:2b81)
[18:17:19] <kuribas> janus: slow to compile?
[18:17:51] *** Quits: emf (~emf@2620:10d:c091:480::1:8be1) (Ping timeout: 264 seconds)
[18:18:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[18:18:57] <janus> kuribas: yes, because code evaluated at compile time is apparently never compiled, always interpreted
[18:19:27] <kuribas> janus: that makes sense, because type checking must preserve syntax.
[18:20:02] <kuribas> janus: or you need a compiler that can pre-compile, while preserving syntax.
[18:20:37] *** Quits: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de) (Quit: Client closed)
[18:20:47] <tomsmeding> more than preserving syntax, you need to _partially evaluate_, which is quite different from normal full evaluation
[18:21:01] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[18:21:04] <kuribas> janus: But I doubt it's a current goal for idris, it just wants to have a working compiler, and put optimizations as much as possible on the backend.
[18:23:24] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:23:41] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:24:28] <tomsmeding> nf: groupToMap
[18:25:09] <nf> thx
[18:25:15] <kuribas> also, typechecking and evaluation is intertwined, so I don't it's trivial to "compile" type level.
[18:25:41] <kuribas> Maybe an interesting topic for someone's PHD :)
[18:27:53] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Ping timeout: 268 seconds)
[18:29:21] *** AndreasK__ is now known as AndreasK
[18:29:55] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:30:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:31:02] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:33:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[18:33:33] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[18:35:50] *** Joins: phma_ (phma@2001:5b0:2172:a1f8:a2fb:22b6:7e7d:59c1)
[18:36:43] *** Joins: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:36:50] *** Quits: phma (phma@2001:5b0:212a:9168:d8ac:a312:b259:ce6e) (Read error: Connection reset by peer)
[18:36:55] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[18:38:52] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[18:40:43] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 250 seconds)
[18:43:10] *** Joins: Moyst (~moyst@user/moyst)
[18:46:24] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:46:29] *** Quits: tafa (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[18:46:42] *** Joins: tafa (~tafa@user/tafa)
[18:46:51] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[18:47:15] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[18:48:25] *** phma_ is now known as phma
[18:48:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:49:34] *** Joins: MiguelNegrao (~MiguelNeg@194.210.216.113)
[18:50:05] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 256 seconds)
[18:50:42] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[18:51:58] <MiguelNegrao> Hi all, I need to write a function which receives an 'HList as' with the following constraints: all 'as' are of type '(Text,Something o -> o)' and there is a Constraint on 'o'. Is this possible ? Eventually I want to call hMap on it.
[18:53:16] *** Quits: acidjnk (~acidjnk@p200300d0c7271e75119700900401854f.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[18:54:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:55:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:56:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[18:57:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[18:57:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[18:57:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:58:34] *** Quits: Flow (~none@gentoo/developer/flow) (Quit: WeeChat 3.2)
[19:00:48] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:01:05] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:02:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:02:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Ping timeout: 264 seconds)
[19:03:56] <kuribas> looking at the HList library makes my head hurt...
[19:03:58] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[19:04:42] <MiguelNegrao> indeed... :-(
[19:06:06] *** Quits: akegalj (~akegalj@50-194.dsl.iskon.hr) (Quit: leaving)
[19:06:16] <kuribas> out of curiosity, what are you trying to do?
[19:06:28] <kuribas> That needs fancy types?
[19:06:50] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[19:10:50] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:4c2d:8074:ff8b:55dd)
[19:11:02] *** Parts: shryke (~shryke@91.103.43.254) (WeeChat 3.3)
[19:11:47] <kuribas> There should be an 'All' constraint on type level lists somewhere...
[19:12:00] <kuribas> And you can make an intermediary class to catch that constraint.
[19:13:01] <kuribas> But my best advice is, don't do this stuff in haskell :-P
[19:14:31] <MiguelNegrao> In gtk Its possible to get a group of widgets to be constucted based on a text file generated by GUI which lets you design windows and widgets
[19:15:05] <MiguelNegrao> Then it is possible to extract the individual widgets from a text label, but you need to provide the type that it should have
[19:15:27] <MiguelNegrao> I wanted to do it all in a function, construct the widgets and extract them with the right type
[19:15:28] <kuribas> link to do?
[19:15:33] <kuribas> to doc
[19:16:42] <MiguelNegrao> The relevant function is https://github.com/mr/reactive-banana-gi-gtk/blob/b1b72d58bf45ac111e320cc0308d00ce6f9fbfe4/reactive-banana-gi-gtk/src/Reactive/Banana/GI/Gtk.hs#L71
[19:17:10] <MiguelNegrao> Instead of a single GObject o I want to deal with a list of them
[19:17:30] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[19:18:02] <MiguelNegrao> But each o will have a different type
[19:18:11] <kuribas> Couldn't you use an existential instead?
[19:20:17] <kuribas> data AnyGObject = forall o . GObject o => AnyGObject o
[19:20:49] <kuribas> Then [AnyGObject o] -> ...
[19:20:57] <kuribas> erm [AnyGObject]
[19:21:10] <kuribas> well something like that.
[19:21:20] <kuribas> Seems much more sane than HList.
[19:21:44] <kuribas> Most likely there is an even easier way, but hard to say without context.
[19:21:53] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[19:21:59] <MiguelNegrao> Right, I think that would work, but would require wrapping each element in AnyGObject. On the other hand HList also requires knowing the syntax for constructing the list, so it might be as onerous to the user.
[19:22:21] <kuribas> Existentials are way easier then HLists.
[19:22:28] <kuribas> But still fancy haskell mind you...
[19:23:10] <MiguelNegrao> Thanks, for the suggestion, I might go with that.
[19:23:50] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[19:24:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:24:59] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[19:26:00] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:27:54] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[19:29:06] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 245 seconds)
[19:29:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[19:32:26] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:3095:3db8:3339:3962) (Ping timeout: 245 seconds)
[19:34:14] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:34:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:34:44] *** Joins: lortabac (~lortabac@37.171.24.180)
[19:35:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:36:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[19:40:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:40:46] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:41:51] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 265 seconds)
[19:43:41] *** Joins: Moyst (~moyst@user/moyst)
[19:46:42] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:46:59] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:47:35] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[19:48:15] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[19:52:56] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:53:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:54:54] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:55:08] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:55:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:58:02] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[19:58:21] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[19:58:26] *** Quits: lortabac (~lortabac@37.171.24.180) (Quit: WeeChat 2.8)
[19:59:21] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:02:00] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:02:17] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:03:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[20:12:43] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 268 seconds)
[20:13:15] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[20:13:57] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:14:08] *** Joins: cfricke (~cfricke@user/cfricke)
[20:14:15] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:14:51] *** Quits: rkrishnan (~user@122.172.141.170) (Ping timeout: 264 seconds)
[20:17:26] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 245 seconds)
[20:18:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:18:28] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:20:48] *** Joins: hippoid (~hippoid@d60-65-25-145.col.wideopenwest.com)
[20:22:23] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:23:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[20:25:08] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:25:10] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[20:26:50] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:27:08] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:29:27] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:29:39] *** Joins: mreh (~mreh@2a00:23c7:2803:ef00:6835:402a:bc64:5737)
[20:30:05] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[20:31:57] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.133)
[20:31:58] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.133) (Changing host)
[20:31:58] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[20:32:27] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:33:16] *** Quits: ysh (sid6017@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[20:33:41] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 245 seconds)
[20:34:08] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[20:34:20] *** Quits: mreh (~mreh@2a00:23c7:2803:ef00:6835:402a:bc64:5737) (Ping timeout: 256 seconds)
[20:34:56] *** Quits: Firedancer (sid336191@hampstead.irccloud.com) (Ping timeout: 245 seconds)
[20:35:21] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[20:36:15] *** Joins: machinedgod (~machinedg@24.105.81.50)
[20:36:15] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[20:36:30] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[20:37:05] *** Joins: mei8 (~mei@user/mei)
[20:37:13] *** Joins: burnside_ (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[20:37:13] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[20:37:47] *** Joins: sm2n_ (~sm2n@user/sm2n)
[20:38:15] *** Joins: ralu6 (~ralu@static.211.245.203.116.clients.your-server.de)
[20:38:23] *** Joins: raoul2 (~raoul@95.179.203.88)
[20:38:50] *** Joins: vdsa (~pc@41.68.196.175)
[20:38:54] *** Quits: vdsa (~pc@41.68.196.175) (K-Lined)
[20:39:03] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[20:39:19] *** Joins: FragByte_ (~christian@user/fragbyte)
[20:39:20] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[20:39:23] *** Joins: cfebs_ (~cfebs@user/cfebs)
[20:39:23] *** Joins: connrs_ (~connrs@user/connrs)
[20:39:24] *** Joins: a1paca_ (~a1paca@user/a1paca)
[20:39:27] *** Quits: gaff (~gaff@49.207.205.97) (Read error: Connection timed out)
[20:39:48] *** Joins: cfricke_ (~cfricke@user/cfricke)
[20:40:03] *** Joins: gaff (~gaff@49.207.205.97)
[20:40:15] *** Joins: S11001001_ (sid42510@id-42510.ilkley.irccloud.com)
[20:40:27] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:40:31] *** Joins: hueso_ (~root@user/hueso)
[20:41:06] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:41:12] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:41:20] *** Joins: Moyst_ (~moyst@user/moyst)
[20:41:40] *** Joins: m1dnight_ (~christoph@christophe.dev)
[20:41:54] *** Joins: stilgart_ (~Christoph@chezlefab.net)
[20:41:58] *** Joins: carter_ (sid14827@id-14827.helmsley.irccloud.com)
[20:42:03] *** Quits: MiguelNegrao (~MiguelNeg@194.210.216.113) (Quit: Client closed)
[20:42:06] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[20:42:07] *** Joins: kritzefitz_ (~kritzefit@debian/kritzefitz)
[20:42:12] *** Joins: slowButP1esent (~slowButPr@user/slowbutpresent)
[20:43:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[20:43:58] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[20:43:59] *** Quits: hippoid (~hippoid@d60-65-25-145.col.wideopenwest.com) (Ping timeout: 256 seconds)
[20:44:12] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:e6b3:18ff:fe83:8f33) (Remote host closed the connection)
[20:46:24] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:46:43] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (*.net *.split)
[20:46:43] *** Quits: cfricke (~cfricke@user/cfricke) (*.net *.split)
[20:46:43] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (*.net *.split)
[20:46:43] *** Quits: Moyst (~moyst@user/moyst) (*.net *.split)
[20:46:43] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (*.net *.split)
[20:46:43] *** Quits: emf_ (~emf@2620:10d:c090:400::5:2b81) (*.net *.split)
[20:46:43] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1d7b:c50:11c3:7017) (*.net *.split)
[20:46:43] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (*.net *.split)
[20:46:43] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[20:46:43] *** Quits: ph88^ (~ph88@2a02:8109:9e00:71d0:6dfb:d68d:ebe:207) (*.net *.split)
[20:46:43] *** Quits: boxscape_ (~boxscape_@p4ff0bb6c.dip0.t-ipconnect.de) (*.net *.split)
[20:46:43] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[20:46:43] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (*.net *.split)
[20:46:43] *** Quits: whatif (~user@2400:8902::f03c:92ff:fe60:98d8) (*.net *.split)
[20:46:43] *** Quits: cfebs (~cfebs@user/cfebs) (*.net *.split)
[20:46:43] *** Quits: xff0x (~xff0x@2001:1a81:5337:5300:9054:dfe3:6e71:3a05) (*.net *.split)
[20:46:43] *** Quits: mei (~mei@user/mei) (*.net *.split)
[20:46:43] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:4de4:2055:b8c4:f1e) (*.net *.split)
[20:46:43] *** Quits: zaquest (~notzaques@5.130.79.72) (*.net *.split)
[20:46:43] *** Quits: dsrt^ (~dsrt@68.101.63.101) (*.net *.split)
[20:46:44] *** Quits: stilgart (~Christoph@chezlefab.net) (*.net *.split)
[20:46:44] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (*.net *.split)
[20:46:44] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[20:46:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[20:46:44] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[20:46:44] *** Quits: Jing (~hedgehog@2604:a840:3::105f) (*.net *.split)
[20:46:44] *** Quits: echoreply (~echoreply@45.32.163.16) (*.net *.split)
[20:46:44] *** Quits: saolsen (sid26430@id-26430.lymington.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: tapas (sid467876@id-467876.ilkley.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: enemeth79 (sid309041@id-309041.lymington.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: S11001001 (sid42510@5.254.36.60) (*.net *.split)
[20:46:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[20:46:44] *** Quits: siers (~ij@user/ij) (*.net *.split)
[20:46:44] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[20:46:44] *** Quits: m1dnight (~christoph@christophe.dev) (*.net *.split)
[20:46:44] *** Quits: kuribas (~user@ptr-25vy0iagc74l4rb6r6j.18120a2.ip6.access.telenet.be) (*.net *.split)
[20:46:44] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (*.net *.split)
[20:46:44] *** Quits: sclv (sid39734@haskell/developer/sclv) (*.net *.split)
[20:46:44] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: dmj` (sid72307@id-72307.hampstead.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: acertain (sid470584@id-470584.hampstead.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[20:46:44] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[20:46:44] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[20:46:44] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[20:46:44] *** Quits: connrs (~connrs@user/connrs) (*.net *.split)
[20:46:44] *** Quits: gaze___ (sid387101@id-387101.helmsley.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: hueso (~root@user/hueso) (*.net *.split)
[20:46:44] *** Quits: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5) (*.net *.split)
[20:46:44] *** Quits: V (~v@anomalous.eu) (*.net *.split)
[20:46:45] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[20:46:45] *** Quits: AndreasK (sid320732@id-320732.uxbridge.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[20:46:45] *** Quits: carter (sid14827@helmsley.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: Boarders_ (sid425905@lymington.irccloud.com) (*.net *.split)
[20:46:45] *** FragByte_ is now known as FragByte
[20:46:45] *** raoul2 is now known as raoul
[20:46:45] *** cfebs_ is now known as cfebs
[20:46:45] *** Lord_of_Life_ is now known as Lord_of_Life
[20:46:45] *** ralu6 is now known as ralu
[20:46:45] *** mei8 is now known as mei
[20:46:45] *** S11001001_ is now known as S11001001
[20:46:45] *** carter_ is now known as carter
[20:46:45] *** connrs_ is now known as connrs
[20:47:02] *** kritzefitz_ is now known as kritzefitz
[20:48:02] *** Joins: mreh (~mreh@2a00:23c7:2803:ef00:6835:402a:bc64:5737)
[20:48:07] *** Joins: hippoid (~hippoid@d60-65-25-145.col.wideopenwest.com)
[20:52:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:52:28] *** Quits: mreh (~mreh@2a00:23c7:2803:ef00:6835:402a:bc64:5737) (Ping timeout: 256 seconds)
[20:52:54] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[20:52:54] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[20:52:54] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[20:52:54] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[20:52:54] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[20:52:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[20:52:54] *** Joins: emf_ (~emf@2620:10d:c090:400::5:2b81)
[20:52:54] *** Joins: jkaye (~jkaye@2601:281:8300:7530:1d7b:c50:11c3:7017)
[20:52:54] *** Joins: ph88^ (~ph88@2a02:8109:9e00:71d0:6dfb:d68d:ebe:207)
[20:52:54] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:52:54] *** Joins: whatif (~user@2400:8902::f03c:92ff:fe60:98d8)
[20:52:54] *** Joins: xff0x (~xff0x@2001:1a81:5337:5300:9054:dfe3:6e71:3a05)
[20:52:54] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:4de4:2055:b8c4:f1e)
[20:52:54] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[20:52:54] *** Joins: Jing (~hedgehog@2604:a840:3::105f)
[20:52:54] *** Joins: saolsen (sid26430@id-26430.lymington.irccloud.com)
[20:52:54] *** Joins: tapas (sid467876@id-467876.ilkley.irccloud.com)
[20:52:54] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[20:52:54] *** Joins: enemeth79 (sid309041@id-309041.lymington.irccloud.com)
[20:52:54] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:52:54] *** Joins: siers (~ij@user/ij)
[20:52:54] *** Joins: bjs (sid190364@user/bjs)
[20:52:54] *** Joins: kuribas (~user@ptr-25vy0iagc74l4rb6r6j.18120a2.ip6.access.telenet.be)
[20:52:54] *** Joins: sclv (sid39734@haskell/developer/sclv)
[20:52:54] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[20:52:54] *** Joins: dmj` (sid72307@id-72307.hampstead.irccloud.com)
[20:52:54] *** Joins: acertain (sid470584@id-470584.hampstead.irccloud.com)
[20:52:54] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[20:52:54] *** Joins: gaze___ (sid387101@id-387101.helmsley.irccloud.com)
[20:52:54] *** Joins: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5)
[20:52:54] *** Joins: V (~v@anomalous.eu)
[20:52:54] *** Joins: AndreasK (sid320732@id-320732.uxbridge.irccloud.com)
[20:52:54] *** Joins: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com)
[20:52:54] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[20:52:54] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[20:52:57] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[20:53:18] *** Quits: dsrt^ (~dsrt@68.101.63.101) (Max SendQ exceeded)
[20:53:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Max SendQ exceeded)
[20:53:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:53:35] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:53:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[20:54:10] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:54:12] *** Joins: zaquest (~notzaques@5.130.79.72)
[20:54:20] *** Joins: dsrt^ (~dsrt@68.101.63.101)
[20:54:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:55:19] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:55:49] *** Joins: slack1256 (~slack1256@181.42.51.52)
[20:57:01] <slack1256> I think we need a "heartbeat" for hackage pages. It would a soft way of saying "we haven't updated this package since 2016, but it still compiles and works on ghc 9.2.1". Do other communities have something similar?
[20:57:58] *** Joins: neurocyte0132889 (~neurocyte@212.232.84.133)
[20:57:59] *** Quits: neurocyte0132889 (~neurocyte@212.232.84.133) (Changing host)
[20:57:59] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[20:58:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[20:58:52] <geekosaur> there is one sort of, I think? there's some stuff about last successful build, but I don't know if it retries the build when a new ghc is released
[21:00:31] *** Joins: xkuru (~xkuru@user/xkuru)
[21:00:37] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Quit: WeeChat 2.9)
[21:01:11] *** Quits: hippoid (~hippoid@d60-65-25-145.col.wideopenwest.com) (Ping timeout: 245 seconds)
[21:02:30] *** Joins: slac38457 (~slack1256@191.126.99.222)
[21:03:18] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[21:03:31] *** Quits: cfricke_ (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[21:04:31] *** Quits: slack1256 (~slack1256@181.42.51.52) (Ping timeout: 245 seconds)
[21:05:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:06:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:07:16] <kuribas> Does there exist a zipFoldMap?
[21:07:51] <awpr> I use metadata revisions for that kind of heartbeat.  if it doesn't need revisions to keep building after a new GHC release, then its version bounds were done incorrectly
[21:08:06] <kuribas> like zipFoldMap :: (Foldable t, Monoid m) => (a -> b -> m) -> t a -> t b -> m
[21:08:32] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[21:08:43] <awpr> so, recent revisions => "probably still maintained", and no recent revisions => "unmaintained or unreliable"
[21:09:11] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Quit: The Lounge - https://thelounge.chat)
[21:09:31] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[21:09:31] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[21:10:26] <kuribas> :t \f a b -> foldMap (uncurry f) $ zip a b
[21:10:27] <lambdabot> Monoid m => (a -> b -> m) -> [a] -> [b] -> m
[21:10:28] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:12:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:12:27] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:14:57] *** Joins: hippoid (~hippoid@d60-65-25-145.col.wideopenwest.com)
[21:15:43] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 256 seconds)
[21:16:33] *** Quits: emf_ (~emf@2620:10d:c090:400::5:2b81) (Quit: emf_)
[21:18:31] *** Quits: CiaoSen (~Jura@p200300c95716ce002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[21:19:13] *** Joins: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net)
[21:20:53] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:21:12] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:22:52] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:23:11] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:23:41] *** Quits: yauhsien (~yauhsien@61-231-30-221.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[21:25:26] *** Quits: burnside_ (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[21:27:07] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:27:26] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:27:52] *** Quits: benin (~benin@183.82.179.164) (Quit: The Lounge - https://thelounge.chat)
[21:29:43] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[21:31:32] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:31:50] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:32:40] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[21:33:10] *** Joins: slack1256 (~slack1256@191.126.99.81)
[21:35:30] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[21:35:42] *** Quits: slac38457 (~slack1256@191.126.99.222) (Ping timeout: 260 seconds)
[21:35:49] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[21:36:20] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[21:37:28] <EvanR> kuribas, wouldn't that be better served by doing like... a bifold instead of going though a tuple
[21:39:17] <kuribas> :t bifold
[21:39:18] <lambdabot> error:
[21:39:18] <lambdabot>     • Variable not in scope: bifold
[21:39:18] <lambdabot>     • Perhaps you meant one of these:
[21:39:25] <kuribas> @hoogle bifold
[21:39:26] <lambdabot> Data.Bifoldable bifold :: (Bifoldable p, Monoid m) => p m m -> m
[21:39:26] <lambdabot> RIO.Prelude bifold :: (Bifoldable p, Monoid m) => p m m -> m
[21:39:26] <lambdabot> Relude.Foldable.Reexport bifold :: (Bifoldable p, Monoid m) => p m m -> m
[21:41:58] <slack1256> geekosaur: Oh, that is a equivalent signal! 
[21:42:23] <slack1256> Well, it would be if `--allow-newer` was the default
[21:42:41] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 265 seconds)
[21:44:05] *** Joins: Moyst_ (~moyst@user/moyst)
[21:44:10] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[21:45:17] *** Joins: machinedgod (~machinedg@24.105.81.50)
[21:46:36] <EvanR> heh, instance Bifoldable BiList
[21:47:44] <EvanR> the way they accomplish your zip map thing is with AppEndo monoid
[21:48:26] <dsal> monochrom: what's that thing you say about brains and memoization?  I asked lambdabot but it wasn't helpful.
[21:49:08] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[21:49:43] *** Quits: hippoid (~hippoid@d60-65-25-145.col.wideopenwest.com) (Ping timeout: 256 seconds)
[21:49:51] <monochrom> Memoized randomization.  You form an opinion randomly, then remember that you stand by that opinion.
[21:50:08] <dsal> It's Oh yes!
[21:50:29] <dsal> Thanks.  :) 
[21:50:51] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[21:52:34] *** Joins: Topsi (~Tobias@dyndsl-095-033-095-172.ewe-ip-backbone.de)
[21:52:52] <EvanR> gotta clear the opinion cache or it gets out of date
[21:53:12] <dsal> I try pretty hard not to remember things when I can avoid it.
[21:53:14] <geekosaur> if only that worked
[21:53:29] <[exa]> flush the cache with quality fermented contents.
[21:53:50] *** Joins: slack4341 (~slack1256@181.42.51.52)
[21:53:51] *** Quits: xff0x (~xff0x@2001:1a81:5337:5300:9054:dfe3:6e71:3a05) (Ping timeout: 264 seconds)
[21:54:19] <monochrom> My observation is that humans don't tend to update their opinions over time.
[21:55:34] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:55:45] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[21:55:47] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[21:55:58] *** Quits: slack1256 (~slack1256@191.126.99.81) (Ping timeout: 256 seconds)
[21:56:13] <dsal> You mean your persistent opinion is that humans don't tend to update their opinions over time.
[21:56:21] <monochrom> haha
[21:56:34] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:a418:17da:6b4f:5fc3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:56:55] <dsal> People do tend to back-rationalize just about anything, though.
[21:57:09] *** Joins: emf (~emf@2620:10d:c090:400::5:2b81)
[21:57:09] <dsal> If I prove you wrong, you just disagree for a different reason.
[21:57:37] <monochrom> This is known as creativity!
[21:58:03] *** Quits: jkaye (~jkaye@2601:281:8300:7530:1d7b:c50:11c3:7017) (Ping timeout: 264 seconds)
[21:58:47] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 256 seconds)
[21:59:24] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d22:12b7:6d7c:fb3c)
[21:59:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:00:29] *** Joins: Moyst_ (~moyst@user/moyst)
[22:00:54] <monochrom> Today I saw a conference announcement on the haskell mailing list, the MSFP one, and the phrase "[where would] call-by-push-values [be] without adjunctions?" caught my attention.
[22:01:34] <monochrom> So I Googled call-by-push-values and eventually found the PhD thesis that started it: https://www.cs.bham.ac.uk/~pbl/papers/thesisqmwphd.pdf
[22:01:38] <EvanR> call by push value ...
[22:02:00] <monochrom> That is going to be a very deep rabbit hole...
[22:02:43] <int-e> just don't drink from labelled bottles
[22:03:08] <int-e> (stick to the mushrooms instead)
[22:03:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[22:03:37] <dsal> int-e: ++
[22:03:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[22:04:00] <monochrom> I don't understnad.
[22:04:29] <EvanR> 🍄 1UP 
[22:04:53] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d22:12b7:6d7c:fb3c) (Quit: gone to sleep. ZZZzzz…)
[22:04:55] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:a418:17da:6b4f:5fc3)
[22:05:18] <int-e> Oh you should read Charles Dogson's thesis on rabbit holes then.
[22:05:19] <geekosaur> was thinking lewis carroll vs. mario…
[22:05:44] <int-e> geekosaur: There's a mushroom in Alice in Wonderland too.
[22:06:02] <int-e> I think. I may be mixing up the books, there are several and it's been a while.
[22:06:11] <geekosaur> yes, I know, but they weren't so different from the bottles
[22:06:33] <int-e> geekosaur: We *were* discussing opinions.
[22:06:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:06:36] <int-e> :)
[22:07:17] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[22:07:30] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[22:07:52] <int-e> geekosaur: I have no problem with the Mario association... it just didn't occur to me.
[22:08:30] <geekosaur> I was kinda riffing on EvanR and thinking you leap out of the hole for the mushrooms
[22:08:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[22:09:03] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[22:09:08] <geekosaur> so kinda mishmashing my references a bit :)
[22:09:31] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:09:40] <EvanR> so my emoji made it through the transporter beam in one piece
[22:09:53] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[22:10:10] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[22:10:15] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[22:10:34] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[22:12:44] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[22:13:59] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[22:14:29] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:14:38] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:16:14] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:16:20] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[22:16:32] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[22:16:54] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[22:18:34] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Remote host closed the connection)
[22:20:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[22:21:35] *** Joins: xff0x (~xff0x@2001:1a81:5337:5300:9054:dfe3:6e71:3a05)
[22:22:41] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[22:28:18] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[22:33:08] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8) (Remote host closed the connection)
[22:33:53] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:35:32] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[22:35:54] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 260 seconds)
[22:37:21] *** Quits: gaff (~gaff@49.207.205.97) (Remote host closed the connection)
[22:38:26] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:40:06] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 260 seconds)
[22:40:51] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[22:44:38] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d837:dc58:2ea7:10e8)
[22:45:21] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Ping timeout: 245 seconds)
[22:48:42] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[22:48:58] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[22:51:43] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[22:52:32] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[22:54:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:58:04] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[22:58:13] *** Joins: pfurla (~pfurla@2804:14d:5c81:4104:d22:12b7:6d7c:fb3c)
[22:58:16] *** Quits: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com) (Ping timeout: 256 seconds)
[22:59:16] *** Quits: kuribas (~user@ptr-25vy0iagc74l4rb6r6j.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:00:00] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[23:00:32] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 240 seconds)
[23:01:58] *** Joins: Moyst_ (~moyst@user/moyst)
[23:02:00] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:02:39] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:02:52] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186)
[23:03:59] <dsal> I realize I don't *really* understand record syntax.  What's the best way to fix htat?
[23:04:13] <dsal> e.g., it didn't even occur to me it could change types.
[23:04:22] <geekosaur> the modern way seems to be "don't use it" :þ
[23:05:00] <dsal> I'm not actually, but apparently $> confuses people.
[23:05:29] <dsal> And lens is generally banned, so if already don't like me using *sigh* a type variable, then saying "let's just use lens" is probably not going to help.
[23:05:37] <Rembane_> dsal: This makes me curious. What's the main stumbling block to use $>?
[23:05:52] <monochrom> I think you now understand record syntax. That's the last piece you were missing.
[23:06:03] <EvanR> you have a haskell job and lens is banned? interesting
[23:06:06] <dsal> Rembane_: I'm just assigning a value to a field.
[23:06:24] <monochrom> Although, I can't connect record syntax with $>
[23:06:37] <Rembane_> dsal: And your coworkers go bananas?
[23:06:51] <dsal> x $> v     could be       x { field = v }
[23:07:04] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[23:07:13] <Cale> There's another thing which may be surprising: you can use patterns of the form (K {}) to match a constructor with zero or more fields even if your type was not defined using record syntax
[23:07:14] <dsal> I don't disagree with that one.  It just never even occurred to me to use record syntax here.
[23:07:22] <geekosaur> Rembane_: weird senior programmer who thinks most idiomatic haskell is "too hard"
[23:07:53] <dsal> geekosaur: I have two kinds.  The weird senior guy and the weird junior guy.  This one is the latter.
[23:08:09] <monochrom> "bananas" is exactly right
[23:08:13] <Rembane_> That there are two must make it all much more ... interesting. 
[23:08:30] <dsal> It's a thing that all of us have to use and his thing is *super* hard to use.  I made it super easy to use, but the implementation complexity isn't worth it.   (I reduced complexity considerably)
[23:10:10] <tomsmeding> dsal: by now you've probably figured that out, but I think semantically, for `data K a b c = K a b c`, the record update function `\x -> K { b = x }` is semantically equivalent to the function 'foo x (K a _ c) = K a x c`, with its appropriate most general type
[23:10:18] <tomsmeding> which, here, allows changing a type parameter
[23:10:28] <tomsmeding> generalise as appropriate to other data type definitions :p
[23:10:48] <tomsmeding> oh, 'data K a b c = K { a :: a, b :: b, c :: c }' of course
[23:11:22] <monochrom> I was surprised when I learned this a long time ago, too. But it is retrospectively natural since it is a syntax sugar.
[23:11:24] <dsal> tomsmeding: Yeah.  It's weird that it just never occurred to me that I could do it that way.  I thought "I've got a type variable, so this is a functor" and went down that path.
[23:11:32] *** Joins: hskpractice (~hskpracti@94-255-217-215.cust.bredband2.com)
[23:11:44] <tomsmeding> dsal: yeah, I would've done the same :p
[23:12:22] <dsal> The junior guy asked why I didn't do the record thing and I was like, "That's not the same!" then realized I'm probably dumb and checked.  Of course it's the same.  If I were writing a lens, that's exactly what I'd do.
[23:12:33] <EvanR> functors everywhere
[23:12:37] <Cale> It can be good for code readability to have a chance to say which field is being updated
[23:13:10] <dsal> Just gonna newtype the hell out of this thing so I can have a functor for every field and coerce for my <$>
[23:13:15] <monochrom> Bah these days it's adjoint functors everywhere for me.
[23:13:15] <Cale> I like <$ quite a bit most of the time, but there have been times when it has obscured what should have been an obvious bug
[23:13:40] <dsal> Yeah, I think the field update thing is actually the right thing here.
[23:14:00] <monochrom> The "field update" mental model is pretty universal.
[23:14:03] <dsal> There's also the "What if we have more of these!" which I rejected a couple of times.  mu.  But that argument also goes away.
[23:14:41] <dsal> My brain just changed shape s lightly to think of field update as also changing the type since I've never actually held those two concepts near each other.
[23:15:20] <monochrom> That one is a surprise. Don't blame yourself. :)
[23:15:54] <monochrom> Also it usually doesn't hurt, even when you aren't aware of it.
[23:16:08] <dsal> Nah, I love finding out I'm wrong about stuff.  I sit around wondering what I'm wrong about and just not knowing most of the time.
[23:16:41] <monochrom> Ah. Did you know that Earth rotation is slowing down? >:)
[23:17:48] <dsal> I knew of that at the listicle level.  I watch lots of YouTube channels that make me feel like I know about things.
[23:18:03] <dsal> (about is the keyword there)
[23:18:51] <monochrom> Ah. Have you watched the recent Veritasium video that explains how electric energy is transferred, and it is not exactly via current or even the cable? >:)
[23:19:43] <EvanR> god I hate that video
[23:20:00] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:4cc1:c671:40b5:6186) (Remote host closed the connection)
[23:20:14] <EvanR> I'm waiting for his follow up where he apologizes and clarifies
[23:20:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:20:24] <dsal> I... played that video.  I didn't follow it very closely, though.
[23:20:43] <monochrom> ObHaskell: Did you know that GHC compiles "if null xs then foo else bar (head xs) (tail xs)" to "case xs of [] -> foo; x:xt -> bar x xt" so it is "OK"? >:)
[23:20:55] <dsal> I build radio stuff and do various electronics junk, but I don't pretend to understand how EM stuff works.
[23:21:27] <monochrom> Sounds about right for the sterotypical programmer >:)
[23:21:31] <EvanR> physics is full of stories
[23:22:04] <monochrom> Err no, sounds about the opposite.
[23:22:31] <monochrom> The stereotypical programmer does pretend they understand. >:)
[23:22:34] <tomsmeding> typical for stereo people?
[23:23:19] <dsal> I back and forth between pretending I understand and accepting I don't.  Haskell has a lot of great abstractions that can be used pretty well without understanding them.
[23:23:41] <dsal> i.e., lazy understanding.  I'll eventually force the understanding after I've been using this abstraction for a bit.
[23:24:32] <monochrom> Haha stereo people.  There is a Chinese proverb, "the government official has two mouths", to express that the government official can decree whatever they want and thus wins all arguments. That would be stereo people.
[23:25:38] <monochrom> It concides with the character 官 for officials containing two mouth parts (the two squares).
[23:26:15] <tomsmeding> heh nice
[23:28:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[23:29:04] *** Quits: Topsi (~Tobias@dyndsl-095-033-095-172.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[23:29:37] <janus> EvanR: what's wrong with the video?
[23:30:06] <EvanR> we have to wait for his follow up to find out
[23:30:17] <EvanR> was the whole thing
[23:31:48] <janus> at the end he recognizes that it is controversial to explain
[23:31:59] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[23:33:06] <int-e> monochrom: "did you know" -- I'd expect that (inline null, head, tail, and elide the redundant case matches) but never checked whether it gets them all :P
[23:33:31] <Cale> The main thing which is misleading about it, I think, is that none of the magnitudes of the vectors are being considered, and we're being asked an idealised question using a lightbulb that will light instantly with any amount of power being delivered
[23:34:16] <Cale> Some amount of power will doubtless be delivered in 1m/c seconds, but how much is a good question.
[23:35:14] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 260 seconds)
[23:35:26] <monochrom> int-e: I wrote an article touching on null-head-tail, so I have a motive to actually check. :)
[23:35:41] <monochrom> To be sure, I am a rare writer. Most writers don't want to check.
[23:37:14] <EvanR> yeah I had to fill in the 1 "meter" over c myself xD
[23:37:46] <int-e> monochrom: right, and you can't really know without checking
[23:37:47] <monochrom> Oh yeah, that one I looked at "1/c" and thought "wrong unit, discarded".
[23:38:10] <int-e> even if you have a good reason to believe that ghc will elide all the redundant checks :)
[23:38:12] *** Joins: juhp (~juhp@128.106.188.82)
[23:38:57] *** Joins: mrckndt (~mrckndt@user/mrckndt)
[23:40:21] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[23:41:05] <Cale> But there ought to be a not insubstantial fraction of the power... not at 1m/c seconds, but slightly afterward. You pretty quickly get a situation that effectively has antennas attached to the ends of the battery, and as the fields from those antennas propagate across, you'll get some amount of power being delivered. Not sure it'll be enough to light an incandescent bulb though.
[23:41:55] *** Quits: slack4341 (~slack1256@181.42.51.52) (Ping timeout: 256 seconds)
[23:42:05] *** Quits: mrckndt (~mrckndt@user/mrckndt) (Client Quit)
[23:42:11] *** Quits: pfurla (~pfurla@2804:14d:5c81:4104:d22:12b7:6d7c:fb3c) (Quit: gone to sleep. ZZZzzz…)
[23:42:21] *** Joins: mrckndt (~mrckndt@user/mrckndt)
[23:43:13] <monochrom> Did you also read the slides linked in the description? There you have two physicists specializing in EM or power transmission doing the detailed modeling. There are graphs show that they predict that the power level increases slowly, as you expect.
[23:43:28] <EvanR> there will be like an evanescent wave between the transmission lines
[23:44:13] <Cale> I haven't, and I also haven't really done the calculations to know what any of the magnitudes are... this is just my intuition about what will happen.
[23:44:30] <monochrom> And there is even a wacky scenerio in which there is an overshoot.
[23:46:06] <Cale> Well, from another perspective it's like a tiny (but expanding... and eventually shorting out) capacitor being attached to a DC source, so seeing a spike seems to make some sense
[23:47:02] <monochrom> Ah the capacitor view is nice.
[23:47:26] *** Joins: deadmarshal (~deadmarsh@95.38.114.216)
[23:49:01] <Sqaure> Im mostly using Nix for my projects lately. I would want to start using Haskell for scripting more. How do you install haskel for scripting? Im feeling a complete, per script, download of libraries and ghc feels a bit savy. Also would be neat to avoid that first "setup". But then again, global install of ghc + libs might lead to old cabal life?! Any smart trick around this?
[23:49:04] *** Joins: cosimone (~user@93-47-230-47.ip115.fastwebnet.it)
[23:49:38] <dsal> If you're using nix, then  nix can manage your ghcs and stuff.
[23:49:58] <Cale> Sqaure: Well, you'll end up with GHC and all the related libraries in your nix store after first use, so as long as you're not often switching, it's a one-time cost.
[23:50:01] <dsal> I just use haskell.nix for a project.  Nothing I'd consider a "script"  (I just make a new stack project when I want to do a thing), but I'm curious how stack scripts and nix work together.
[23:50:20] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[23:50:29] <Sqaure> Ah ok. So you encourage Nix for scripting. Makes sense.
[23:50:34] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[23:50:51] <Cale> I have this: nix-shell -p "(import <nixpkgs> {}).haskell.packages.ghc884.ghcWithPackages (pkgs: with pkgs; [ $* ])"
[23:51:08] <Cale> in a file called "ghcWithPackages" marked executable in my ~/bin
[23:51:30] <Cale> and then for quick things, I'll just use that to get an environment having whatever packages I want
[23:51:51] *** Quits: deadmarshal (~deadmarsh@95.38.114.216) (Ping timeout: 250 seconds)
[23:52:31] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[23:52:46] <Cale> Note that you can choose which version of GHC it defaults to. I just have it set to what we use at work right now, but occasionally I'll adjust that e.g. to help someone with a problem they're having on a different ghc
[23:56:04] *** Joins: Flow (~none@gentoo/developer/flow)
[23:56:54] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[23:57:36] <Sqaure> Cale, so imagine you use ghcWithPackages as your shebang? How do you write the actual script code? 
[23:57:55] *** Quits: xff0x (~xff0x@2001:1a81:5337:5300:9054:dfe3:6e71:3a05) (Ping timeout: 250 seconds)
[23:58:47] *** Joins: xff0x (~xff0x@2001:1a81:5337:5300:b447:8c77:1877:d5ca)
[23:59:18] <Cale> Sqaure: I never use this as a shebang, but it puts you in a bash shell
[23:59:38] <Cale> in which you have the appropriate GHC to run Haskell scripts
