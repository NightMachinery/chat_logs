[00:00:55] *** Joins: Guest63 (~Guest63@45.130.83.181)
[00:01:03] <Guest63> shka: I was using the term informally
[00:01:27] <gigo> how do I unscramble qiulaty?
[00:02:26] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[00:03:15] <jackdaniel> guality?
[00:03:16] <gigo> can someone help me with this code: https://plaster.tymoon.eu/view/2497 - Trying to make a macro but when I execute I get this error: The variable BLOCK1 is unbound.
[00:03:37] <gigo> jackdaniel: thanks. needed to unscramble it to post to tymoon
[00:03:57] <Bike> gigo: try (macroexpand-1 '(decorate block1 ...)), i think you should be able to see the problem quickly
[00:04:23] <Bike> it will expand into (progn (format t "bla bla bla" block1) ...)
[00:04:33] <jackdaniel> try (decorate 'unblock ...) ; )
[00:05:37] <shka> second format has ~a without argument
[00:05:52] <gigo> is there an easy way to wrap the macro call around (macroexpand-1 ...? It takes a lot of work to wrap calls into macroexpand-1. Type it out and then slurp the next expression. Then after debugging remove it. then barf again. any easier way?
[00:05:53] <shka> i think that you may wanted to put name in there as well
[00:06:19] <shka> if yes, remember about multiple evaluations...
[00:06:20] <Bike> gigo: in slime you can do C-c C-m and it will pop up a frame with the macroexpansion
[00:06:21] <gigo> shka: thanks. yes that one is typo. need to fix that line too.
[00:06:32] <Xach> gigo: I usually use the emacs keystrokes to do it with sly/slime.
[00:06:42] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 240 seconds)
[00:07:02] <Xach> C-c M-m I believe.
[00:07:13] <Xach> oh, sorry, I am too slow
[00:07:26] <gigo> C-c C-m worked for me
[00:08:39] <gigo> so I learnt the problem in https://plaster.tymoon.eu/view/2497 - ,name is getting replaced with BLOCK1. But I want ,name to get replaced with "BLOCK1". how can I do that?
[00:09:12] *** Joins: Josh_2 (~user@37.25.47.130)
[00:09:19] <shka> gigo: during macroexpand, you can get symbol-name
[00:09:40] <Josh_2> Hi
[00:09:59] <shka> then, use the symbol-name (evaluated) and place it into expansion code
[00:11:48] *** Quits: chrysanthematic (~chrysanth@109.70.150.245) (Quit: chrysanthematic)
[00:12:24] <shka> gigo: https://gist.github.com/sirherrbatka/6b9aedb9f08eed2c2a0f867d3f10cf0c
[00:12:26] <shka> example
[00:13:53] <gigo> now I am confused. why is this working correctly? - https://plaster.tymoon.eu/view/2498 - I was expecting the (format ...) line to expand like this and fail: (format t "~&----- header ~a -----~%" ,(format nil "~a" BLOCK1)) but it expands to (FORMAT T "~&----- header ~a -----~%" "BLOCK1") and works fine.
[00:14:15] <gigo> how does it automatically get the quotes around BLOCK1 in this new example?
[00:14:36] <shka> gigo: well, as jackdaniel mentioned, you perl it :D
[00:14:40] <shka> ',name
[00:15:25] <shka> or if you are like me
[00:15:28] <gigo> perl it? what does that mean? I don't think I know enough Lisp to understand the jokes.
[00:15:28] <shka> (quote ,name)
[00:15:35] <shka> sorry
[00:15:47] <shka> anyway, thing is that you are passing a symbol, right?
[00:16:04] <gigo> yes
[00:16:19] <shka> and macroexpand works by producing lisp form
[00:16:50] <shka> gosh, i struggle to explain this
[00:18:09] <shka> gigo: the your code and replace that ,name in format with ',name
[00:18:17] <gigo> ',name works and it makes sense too. i understand why it works
[00:18:20] <shka> i think you may figure out the difference
[00:18:23] <shka> oh, great
[00:18:27] <shka> *whew*
[00:19:05] <gigo> so my only confusion now is why this works: https://plaster.tymoon.eu/view/2498 - I expect this to fail but it works.
[00:19:40] <shka> it works because you are evaluating the inner form during macroexpand
[00:19:59] <gigo> I was expecting the first (format ...) line to expand like this and fail: (format t "~&----- header ~a -----~%" ,(format nil "~a" BLOCK1)) but it expands to (FORMAT T "~&----- header ~a -----~%" "BLOCK1") and works fine.
[00:20:03] <shka> where NAME is bound to 'BLOCK1
[00:20:12] <shka> yes
[00:20:34] <shka> well the problem with macros is that they require thinking in two times at once
[00:21:03] <shka> first, there is macroexpand time, and then there is runtime where the expansion is actually used
[00:21:14] <gigo> okay. I think I got it. So the inner form is executing like ordinary Lisp code: (format nil "~a" name) . This would work even under ordinary circumstance if I was not doing any macro business, so it works inside ,() too.
[00:21:30] <shka> yes, different time
[00:22:21] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[00:22:50] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[00:22:55] <gigo> thanks shka. I think i finally understood this. I will write more examples and practice this more.
[00:23:25] *** Joins: ramenbytes (~vir@071-009-124-057.res.spectrum.com)
[00:23:57] <shka> gigo: keep in mind that the problem with duality of macros
[00:24:38] <shka> where the code that is supposed to produce code and the produced code is mixed together
[00:24:50] <shka> that's what makes macros difficult to understand
[00:25:09] <shka> once-only is perhaps the best example of this
[00:25:15] <shka> but there are different such macros
[00:25:24] <shka> *other such macros
[00:26:48] <gigo> yes, I need to play with this more to get the hang of it.
[00:28:32] *** Joins: chrysanthematic (~chrysanth@89.38.69.171)
[00:29:06] <Guest63> If I want to have a variable defined outside of a function, is this the best way of doing it:
[00:29:10] <Guest63> (let ((y 7))
[00:29:10] <Guest63> (defun scope-test (x)
[00:29:11] <Guest63> (list x y)))
[00:29:34] <shka> Guest63: depending on the use case this may be fine
[00:30:13] <shka> more often you will want to use defvar, defparameter and alexandria:define-constant
[00:30:33] <Guest63> I wanted to do (defun my-fn (x) (let* ((y 7) (scope-val (scope-test x
[00:30:52] <Guest63> In this version, scope-test doesnt recognise y from the calling function
[00:31:19] *** Joins: tfb (~tfb@88.98.95.237)
[00:31:35] <Guest63> I'm trying to do some out of order side effects and don't want to make my recursive functions unnecessarily complicated
[00:31:59] <Bike> variables are usually lexical, so that kind of thing won't work
[00:32:20] <Bike> you might want a dynamic variable, in which it will look up the most recent binding _dynamically_ like the y binding here
[00:32:45] <Bike> usually it looks up the innermost binding in the source text instead
[00:33:01] *** Quits: chrysanthematic (~chrysanth@89.38.69.171) (Changing host)
[00:33:01] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:33:23] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[00:33:34] *** Joins: karlosz (~karlosz@router.cloyne.org)
[00:34:33] *** Quits: jans (~jans@119.51-174-216.customer.lyse.net) (Ping timeout: 244 seconds)
[00:34:35] <Guest63> @Bike: thanks, let me have a look at doing that
[00:35:04] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:37:06] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[00:38:36] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[00:38:50] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[00:46:22] <Guest63> to answer my question, I have to use labels in combination with let
[00:46:46] <Guest63> to be able to access the variables lexically in a reasonable manner
[00:49:21] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:50:49] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:a954:efd3:34be:7acb)
[00:50:49] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:a954:efd3:34be:7acb) (Changing host)
[00:50:49] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[00:51:02] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[00:56:16] <Bike> (defun scope-test (x) (declare (special y)) (list x y))
[00:56:24] <Bike> (let ((y 7)) (declare (special y)) (scope-test 3)) => (3 7)
[00:57:08] <pjb> special symbols let you teletransport variables from one function to another.
[00:59:37] <pjb> Guest63: you can indeed pass closures to let a function access your lexical variables.
[01:00:16] <Guest63> @bike: thanks for that code, I will try it out
[01:01:49] <Guest63> pjb: indeed, I am trying now to balance between recursion, side effects, functional programming to give the "best expression of a function" so that readability is maintained
[01:01:59] <pjb> (defun foo (*v) (funcall *v (+ 1 (funcall *v))))  (defun goo () (let ((v 42)) (foo (lambda (&optional (nv nil nvp)) (if nvp (setf v nv) v))) v)) (goo) #| --> 43 |#
[01:02:18] <pjb> Guest63: http://informatimago.com/articles/usenet.html#C-like-pointers-in-Lisp
[01:02:26] <jcowan> arrgh
[01:02:40] <jcowan> "It is an error to use function on a function name that does not denote a function in the lexical environment in which the function form appears. Specifically, it is an error to use function on a symbol that denotes a macro or special form. An implementation may choose not to signal this error for performance reasons, but implementations are forbidden from defining the failure to signal an error as a useful behavior."  Why?
[01:02:43] <pjb> Guest63: but if you build C-like pointer in CL, you will have C-like bugs too.
[01:03:04] <pjb> Guest63: don't think "variables", think "values" (aka lisp objets).
[01:03:07] <pjb> +c
[01:03:12] <Bike> mm, could get weird with macrolet
[01:03:45] <Bike> i'm also not sure i understand why you would want it to work
[01:04:38] <Guest63> pjb: thanks for the cool link, I've added it to my bookmark to go through
[01:05:02] <Guest63> indeed, chances of bugs do go up, but if you isolate, hopefully you can limit it considerably
[01:05:13] <jcowan> The case I have in mind is allowing #'foo-macro to return the application of the underlyimng function to 'foo.  In this way, you can recognize macro names in operand position.
[01:05:33] <jcowan> 'foo or any other atomic value
[01:05:43] <jcowan> er, non-list value
[01:05:51] <Bike> i don't understand. could you give an example of what would happen?
[01:06:00] *** Joins: tfb (~tfb@88.98.95.237)
[01:06:08] <Josh_2> Has anyone here used Rucksack?
[01:06:39] <jcowan> (defmacro foo (a b c) (+ a b c))
[01:06:52] <jcowan> expands to (+ a b c)
[01:07:59] <jcowan> But suppose I want to write (defmacro bar (x) (- x))
[01:08:16] <Bike> Just checking, but you don't mean (defmacro foo (a b c) `(+ a b c))?
[01:08:22] <Bike> er, with commas etc
[01:08:28] <jcowan> Yes, I do.
[01:08:36] <jcowan> sorry, thinking in syntax-rules
[01:08:42] <Bike> sure
[01:08:54] <jcowan> (defmacro bar (x) `(- ,x))
[01:10:07] <jcowan> then (map #'bar '(1 2 3)) expands to ((lambda (x) (- x)) '(1 2 3))
[01:10:21] <jcowan> where of course you'd want to use morc complex macros
[01:10:37] <Bike> uh, you lost me. isn't that an error
[01:10:45] <Bike> do you mean (map (lambda (x) (- x)) '(1 2 3))?
[01:12:40] <White_Flame> the way to map a macro over a list has always been (mapcar (lambda (x) (bar x)) '(1 2 3)) for me
[01:12:53] <White_Flame> gives it a place to expand properly
[01:13:15] *** Quits: tfb (~tfb@88.98.95.237) (Quit: Leaving)
[01:13:30] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 240 seconds)
[01:14:47] <White_Flame> (also, MAP needs the return type first, so probably some scheme-isms left over you in your example still :-P)
[01:15:01] <White_Flame> -you
[01:16:45] <Bike> i mean the issue here is that most macros people actually use have more involved syntax than evaluating everything like a function call
[01:17:02] <Bike> if i understand your idea correctly
[01:20:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 252 seconds)
[01:27:57] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 272 seconds)
[01:30:35] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[01:31:49] <mfiano> Bike: Are you still maintaining introspect-environment?
[01:33:14] <Bike> i try to when people need it, but that's not often
[01:33:25] <mfiano> Latest SBCL https://gist.github.com/mfiano/54d8a8a58924127b191713bf1ce06aa1
[01:33:50] <mfiano> I am wondering if that's the reason specialization-store is giving me issues
[01:34:01] <Bike> could be
[01:34:04] *** Joins: Inline (~Inline@aftr-37-201-241-126.unity-media.net)
[01:34:10] <Bike> parse-compiler-macro uses sbcl internals so it has broken sometimes
[01:34:38] <mfiano> Ah hmm
[01:35:17] <Bike> although it looks like it hasn't changed
[01:36:12] <Guest63> time to sleep, good night all
[01:36:34] *** Parts: Guest63 (~Guest63@45.130.83.181) ()
[01:36:39] <Bike> do you get anything from (find-symbol "MAKE-MACRO-LAMBDA" "SB-INT")?
[01:37:01] <mfiano> Yes
[01:37:13] <Bike> alright well i don't get it then
[01:37:18] <Bike> https://github.com/Bike/introspect-environment/blob/master/sbcl.lisp#L47-L48
[01:37:20] <mfiano> Odd
[01:39:02] <mfiano> Ah, it's parse-defmacro that is missing
[01:39:14] <Bike> well sure, that's fine
[01:39:22] <Bike> if make-macro-lambda is around that should be used instead
[01:39:33] <Bike> parse-defmacro is the old one, i think
[01:39:42] <mfiano> No idea then. I have that in sb-int
[01:39:53] <Bike> old fasls? or something?
[01:40:10] <mfiano> I'll nuke them and retry
[01:41:26] <mfiano> Still occurs
[01:43:13] <Bike> i don't know what to tell you. i don't see any reason for that code not to work.
[01:43:30] * mfiano updates to SBCL HEAD
[01:45:08] <mfiano> oh fun. HEAD fails to compile for the first time I ever saw
[01:47:21] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:57:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[01:57:50] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[01:59:07] *** Quits: AnimalClatter (~AnimalCla@208.66.176.26) (Quit: WeeChat 3.0.1)
[02:01:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 240 seconds)
[02:02:43] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[02:06:35] *** Joins: zacts (~zak@user/zacts)
[02:14:56] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[02:15:30] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[02:22:26] *** skyl4rk is now known as skyl4rk`
[02:22:43] *** skyl4rk` is now known as skyl4rk``
[02:22:59] *** skyl4rk`` is now known as skyl4rk
[02:24:10] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[02:24:47] *** Joins: skyl4rk` (~tlvb@user/tlvb)
[02:24:51] *** Quits: skyl4rk` (~tlvb@user/tlvb) (Client Quit)
[02:24:57] *** Joins: killsushi (~killsushi@cpef0f249442b03-cmf0f249442b00.cpe.net.cable.rogers.com)
[02:24:57] *** Quits: killsushi (~killsushi@cpef0f249442b03-cmf0f249442b00.cpe.net.cable.rogers.com) (Changing host)
[02:24:57] *** Joins: killsushi (~killsushi@user/killsushi)
[02:29:14] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806) (Ping timeout: 268 seconds)
[02:29:56] *** Quits: zacts (~zak@user/zacts) (Quit: gtg)
[02:34:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:34:41] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:37:01] <mfiano> Bike: here's the full verbose output directly after building 2.1.5, removing all cached fasl's and restarting image: https://gist.github.com/mfiano/05fc7422474bfcfee124433cb9d3ee25
[02:43:00] *** Quits: pve (~pve@188-67-202-224.bb.dnainternet.fi) (Quit: leaving)
[02:44:42] *** Quits: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 264 seconds)
[02:45:13] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 272 seconds)
[02:46:07] *** Joins: derelict (~derelict@user/derelict)
[02:46:11] <mfiano> Ah this is because the base case needs to be symmetric. I'm not convinced this note is meaningful
[02:46:46] <mfiano> Apparently it doesn't notice return-from in the reader conditionals and thinks ERROR is reachable
[02:47:13] <mfiano> Bike: Could fix this with a symmetric #- I suppose
[02:50:40] * mfiano thinks SBCL's DCE should just be smarter
[02:50:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 252 seconds)
[02:53:06] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Ping timeout: 264 seconds)
[02:53:59] <mfiano> Bike: Looks like I had to make a PR for the same issue to cl-opengl before: https://github.com/3b/cl-opengl/commit/25780e180caf32c1a8ea632974b4133058775030
[02:55:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:57:22] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[03:02:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[03:03:06] <drmeister> How would you send a signal to a thread that it should shutdown?
[03:04:00] <drmeister> Or a collection of threads? Would you give them each a cons cell and have the manager thread change the value of the car and have the workers monitor the value of the car?   The car is atomic.
[03:04:43] <moon-child> depends entirely on what the thread is doing, who is telling it to shut down, and why
[03:04:57] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:05:58] <Alfr> How do you communicate with them usually?  I usually enqueue such a message, but that'll only do if use messages in the first place.
[03:08:05] *** Quits: frgo (~frgo@p200300deef27d7007d8324eac458b606.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:08:39] *** Joins: frgo (~frgo@dynamic-046-114-147-229.46.114.pool.telefonica.de)
[03:08:48] <drmeister> I'm working in Clasp (Common Lisp with C++ interop) - I've written a program to process 24 GB of DNA sequence data and it generates 1 manager thread that generates 4 worker threads.  When I push the "Stop Task" button the user interface thread invokes (bt:kill-thread manager).  Currently the workers don't know that the manager was killed.
[03:08:53] <drmeister> https://usercontent.irccloud-cdn.com/file/9OQpY0Ss/image.png
[03:10:56] <drmeister> (bt:kill-thread manager) == (bordeaux:kill-thread manager)
[03:11:13] <drmeister> Bordeaux threads has condition variables - but they don't look appropriate.
[03:12:18] <drmeister> So I thought - I have atomic CONS cells and I could use those to signal what the workers should do and the workers can poll the CONS cells.
[03:13:25] <drmeister> There's currently no Common Lisp mechanism for a thread to know that it's been killed.
[03:14:00] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[03:14:14] <drmeister> I've done a fair amount of multi-thread programming - I should know how to do this - but I guess I haven't done enough multi-thread programming where I try to coordinate the threads.
[03:16:19] <moon-child> so, are you just breaking up your dataset into 4 and giving one part to each worker?  Or are you breaking it up into smaller chunks, and having the workers process a chunk at a time?
[03:16:56] <drmeister> The data is spread over four files so I'm giving one file to each worker.
[03:16:59] <drmeister> So the former.
[03:17:06] <moon-child> If the former, I think it's a good idea to move to the latter, just because one of the threads might get ahead of the others, and then you won't make optimal use of CPU.  Having done that, you can tie the 'should I die yet' check into the 'pull/push another work chunk' step
[03:17:06] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[03:17:57] <drmeister> These files are balanced in size.  They come out of a DNA sequencer that generates enormous amounts of data and they spread the data out across files.
[03:18:53] <drmeister> But I hear what you say - I could have a reader thread and some number of worker threads.
[03:19:20] <drmeister> A single writer, multiple reader queue would work for that.
[03:20:17] <drmeister> Yeah - that's actually a good idea.  Then I could have the reader pass an end-of-all-data value to each of the workers and they shutdown.
[03:20:41] *** Quits: eta (~eta@woolwich-arsenal.i.eta.st) (Ping timeout: 272 seconds)
[03:21:31] *** Joins: eta (~eta@woolwich-arsenal.i.eta.st)
[03:21:58] <drmeister> Still - the user interface would still send a (bt:kill-thread reader) and the reader would have to recognize that it's being killed and send the message to the workers and then die.
[03:22:14] <drmeister> I didn't mention this but I have multiple readers working at the same time as well.
[03:22:26] <drmeister> Here I've switched from manager to reader.
[03:27:01] *** Joins: Steeve (~steve@user/steeve)
[03:27:20] <Alfr> drmeister, the doc of bt:destroy-thread (can't seem to find bt:kill-thread) says it's implementation dependent whether cleanup is run. So I don't think you can reliably use it if you need the killed thread to kill its children too.
[03:27:43] <drmeister> Right - destroy-thread - sorry - not kill-thread
[03:30:14] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[03:32:22] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[03:38:25] <drmeister> The coming bordeaux threads API has more stuff for communication between threads.
[03:46:00] *** Alfr is now known as Guest3889
[03:46:00] *** Quits: Guest3889 (~Alfr@user/alfr) (Killed (strontium.libera.chat (Nickname regained by services)))
[03:46:04] *** Joins: Alfr (~Alfr@user/alfr)
[03:49:11] <Bike> mfiano: er, i don't understand. the error call is unreachable, sure, so you shouldn't be seeing that error
[03:49:57] *** Joins: torbo (~user@72.15.63.17)
[03:50:22] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[03:50:37] *** Joins: tfb (~tfb@88.98.95.237)
[03:51:55] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[03:53:26] *** Quits: X-Scale (~ARM@24.117.108.93.rev.vodafone.pt) (Ping timeout: 265 seconds)
[03:55:21] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[03:57:01] <mfiano> Bike: I don't understand either. But SBCL doesn't know this.
[03:59:23] *** Joins: derelict (~derelict@user/derelict)
[03:59:30] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[03:59:46] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[03:59:53] *** Joins: X-Scale (~ARM@24.117.108.93.rev.vodafone.pt)
[04:01:14] *** Joins: Alfr (~Alfr@user/alfr)
[04:03:18] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[04:03:21] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:03:47] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[04:04:06] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Ping timeout: 268 seconds)
[04:06:32] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:08:00] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:08:24] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 268 seconds)
[04:10:42] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[04:15:30] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[04:19:31] *** Quits: Inline (~Inline@aftr-37-201-241-126.unity-media.net) (Ping timeout: 268 seconds)
[04:20:13] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Ping timeout: 272 seconds)
[04:21:40] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[04:21:57] *** Quits: torbo (~user@72.15.63.17) (Remote host closed the connection)
[04:24:25] *** Joins: derelict (~derelict@user/derelict)
[04:37:40] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[04:45:13] <Josh_2> Anyone got any examples of their use of MOP? Just tryna find more ways I can integrate the MOP beyond just specializing an :after on initialize-instance
[04:46:31] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[04:48:43] <jcowan> Not only that, but if cleanup is not run, locked resources may stay locked.
[04:49:50] <Josh_2> mostly just curious about how others have utilized the MOP, dont need to see code
[04:50:24] <jcowan> in general, have the thread poll a kill-myself flag (this is independent of the language) rather than external killing
[04:50:58] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[04:58:56] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[05:06:10] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:a954:efd3:34be:7acb)
[05:06:10] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:a954:efd3:34be:7acb) (Changing host)
[05:06:10] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:16:48] <ramenbytes> Josh_2: Filtered Functions is a cool example in my opinion: https://github.com/pcostanza/filtered-functions
[05:17:00] <ramenbytes> Though, that's not my library.
[05:17:18] <ramenbytes> So not something I've personally done with mop.
[05:17:57] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[05:18:12] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[05:18:29] <Josh_2> What have you personally done with MOP?
[05:20:23] <ramenbytes> Nothing to my remembrance, I'm still learning and haven't worked on something big or radical enough to need MOP.
[05:25:19] <dlowe> I wrote a game object read/write with MOP that saves to human readable sexp in files
[05:25:49] <dlowe> the only limitation is that lists of game objects in game objects need to have the type game-object-list
[05:26:08] <dlowe> also it doesn't check for multiple references or anything
[05:28:28] <Bike> Josh_2: cl-jupyter has a custom slot definition class that lets you register callbacks to run when a slot value changes, and functions to validate new values https://github.com/yitzchak/common-lisp-jupyter/blob/master/src/widgets/traits.lisp
[05:29:04] <Bike> i wrote the original version, but it's moved on from me
[05:31:06] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:31:44] <Bike> don't use mop just for the sake of using it, tho
[05:34:52] *** Joins: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:c4eb:2369:9bed:c1da)
[05:35:11] <Josh_2> ofcourse
[05:35:27] *** Quits: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:c4eb:2369:9bed:c1da) (Client Quit)
[05:38:04] *** Joins: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:c4eb:2369:9bed:c1da)
[05:38:06] *** Quits: kakuhen_ (~kakuhen@2600:6c50:103f:f86e:c4eb:2369:9bed:c1da) (Client Quit)
[05:38:33] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 268 seconds)
[05:43:30] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[05:44:27] *** Quits: wheelsucker (~user@2600:8801:8c04:6b00::e486) (Remote host closed the connection)
[05:44:40] *** Joins: wheelsucker (~user@2600:8801:8c04:6b00::e486)
[05:44:44] *** Joins: kakuhen (~kakuhen@2600:6c50:103f:f86e:c4eb:2369:9bed:c1da)
[05:44:44] *** Quits: kakuhen (~kakuhen@2600:6c50:103f:f86e:c4eb:2369:9bed:c1da) (Changing host)
[05:44:44] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:50:28] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[05:52:30] <Josh_2> ramenbytes: that library reminds me of another similar library, can't remember its name
[05:52:51] <Josh_2> I think that library could be quite useful
[05:53:02] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:53:41] <Josh_2> I think I will try it out in my cl-coinpayments library, its better than my silly dispatcher I made
[06:03:00] <ramenbytes> Josh_2: I think there are several type-based dispatch libraries if that is what you were thinking of.
[06:09:33] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 244 seconds)
[06:10:25] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[06:16:44] <Josh_2> actually I would need a mix of normal class dispatching and dispatching on a keyword, basically I have a plist and an object, and I have written a convenient way for the user to dispatch on the plist and the object, but its outside of the normal object system (mostly)
[06:17:23] <ramenbytes> If you're dispatching on keyword symbols, could you use an EQL specializer?
[06:19:17] *** Quits: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 272 seconds)
[06:20:07] <ramenbytes> Re-reading your message, I think I misunderstood. I'm guessing you're using an EQL specializer after extracting your symbol(s) from the plist. In which case I see how filtered functions would be handy.
[06:20:16] <Josh_2> yeh
[06:20:51] <Josh_2> Although my custom dispatcher works on the class and subclasses of the object, the value of a specific key from the plist and the number of arguments
[06:21:01] <Josh_2> but still its outside of all of the conveniences of :around :after and :before
[06:21:37] <ramenbytes> Right, because there is some preprocessing on the args before dispatch can happen.
[06:22:48] *** Parts: ramenbytes (~vir@071-009-124-057.res.spectrum.com) (--)
[06:23:36] <Josh_2> yeh. Initially I was just using apply to make instances of classes but then the API I was working with sent representations of 'objects' I couldn't find specifications for, so I gave up on that method
[06:38:55] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[06:46:52] *** Joins: prxq_ (~quassel@x4dbeaa48.dyn.telefonica.de)
[06:46:53] *** Quits: prxq (~quassel@x4db4e73d.dyn.telefonica.de) (Ping timeout: 268 seconds)
[07:00:40] *** Joins: derelict (~derelict@user/derelict)
[07:11:35] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:32:44] <beach> Good morning everyone!
[07:41:02] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[08:04:12] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[08:05:05] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:05:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 244 seconds)
[08:06:18] *** Lord_of_Life_ is now known as Lord_of_Life
[08:08:45] *** Joins: dsk (~dsk@user/dsk)
[08:09:01] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 268 seconds)
[08:14:34] *** Joins: karlosz (~karlosz@router.cloyne.org)
[08:16:38] *** Quits: karlosz (~karlosz@router.cloyne.org) (Client Quit)
[08:28:32] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:31:06] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[08:39:19] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:43:41] *** Quits: wheelsucker (~user@2600:8801:8c04:6b00::e486) (Quit: ERC (IRC client for Emacs 27.2))
[08:43:43] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[08:47:08] *** Quits: raeda_ (~raeda@72.49.219.33) (Ping timeout: 244 seconds)
[08:53:56] *** Joins: raeda (~raeda@72.49.219.33)
[08:59:36] *** Joins: pjb (~pjb@user/pjb)
[09:50:28] *** Joins: Oladon (~olad@98.43.81.226)
[09:57:58] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:01:01] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 244 seconds)
[10:03:38] *** Quits: frgo (~frgo@dynamic-046-114-147-229.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[10:03:48] *** Joins: frgo (~frgo@p200300deef27d7007d8324eac458b606.dip0.t-ipconnect.de)
[10:11:13] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[10:13:56] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[10:16:56] *** Joins: knusbaum_ (~kjn@2601:240:8480:9990:a82d:425:ff6:c241)
[10:20:22] *** Quits: knusbaum (~kjn@2601:240:8480:9990:d3e:b604:e36b:abe0) (Ping timeout: 268 seconds)
[10:26:50] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[10:27:50] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[10:31:16] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 252 seconds)
[10:32:10] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:40:07] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[10:44:41] <kakuhen> Does anyone here know of any good documentation for cl-tui? Specifically, I am interesting in setting up panes and relatively "simple" objects of a TUI.
[10:48:02] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 244 seconds)
[10:48:54] <beach> Is McCLIM too "graphic" for you?
[10:49:01] *** Joins: rgherdt (~rgherdt@ip5f5af414.dynamic.kabel-deutschland.de)
[11:06:38] *** Quits: knusbaum_ (~kjn@2601:240:8480:9990:a82d:425:ff6:c241) (Remote host closed the connection)
[11:07:23] *** Joins: knusbaum (~kjn@2601:240:8480:9990:a82d:425:ff6:c241)
[11:12:42] *** Quits: frgo (~frgo@p200300deef27d7007d8324eac458b606.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:12:48] *** Quits: knusbaum (~kjn@2601:240:8480:9990:a82d:425:ff6:c241) (Ping timeout: 268 seconds)
[11:13:16] *** Joins: frgo (~frgo@dynamic-046-114-147-229.46.114.pool.telefonica.de)
[11:14:46] <kakuhen> Yes
[11:17:39] *** Joins: pve (~pve@87-93-225-180.bb.dnainternet.fi)
[11:19:53] <dsk> Has anyone considered the possibility of a McCLIM Emacs front end?
[11:21:05] <moon-child> what motivates that?
[11:22:13] <dsk> Not wanting to leave Emacs.
[11:23:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:25:43] <beach> Isn't that what lukego is doing with Clime?
[11:28:35] <dsk> Oh cool, I wasn't aware of this!
[11:28:41] <moon-child> dsk: oh - you mean mcclim talking to emacs.  I thought you meant emacs using clim (as an alternative to termcap/gtk/xaw/...)
[11:28:56] <dsk> Or I confused it with Climacs.
[11:32:09] <beach> https://twitter.com/lukego/status/1392449057814196228/photo/1
[11:32:16] <dsk> moon-child: No, I guess what I was calling a "front-end" is actually a "back-end"
[11:32:25] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[11:33:46] <beach> dsk: Something like the stuff shown in that link?
[11:34:06] <dsk> beach: Exactly!
[11:35:08] <kakuhen> ok turns out cl-charm seems to have what I want
[11:35:39] <kakuhen> it exposes lisp to well-documented curses functions rather than trying to build abstractions on top of them like cl-tui
[12:05:04] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[12:06:43] *** Quits: pve (~pve@87-93-225-180.bb.dnainternet.fi) (Remote host closed the connection)
[12:10:02] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 268 seconds)
[12:16:30] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[12:20:33] *** Joins: Wilfred (uid159@id-159.highgate.irccloud.com)
[12:26:38] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[12:35:56] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[12:36:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:45] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[12:39:25] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:48:37] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[12:48:45] *** Joins: gwefnn_ (~gwefnn@user/gwefnn)
[12:49:22] *** Quits: gwefnn (~gwefnn@user/gwefnn) (Ping timeout: 272 seconds)
[12:57:55] *** Quits: prxq_ (~quassel@x4dbeaa48.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:02:14] <kakuhen> has anyone ran into an issue where looping and printing works in sly repl but not when connected to a remote lisp image?
[13:03:08] <kakuhen> say we have something dumb like (loop (print "hi") (sleep 1)) -- this obviously works in the SLY REPL but if I launch ccl in a terminal and connect sly to it, then it does nothing
[13:03:24] <kakuhen> Presumably this has something to do with the global redirection stuff, but I'm not sure.
[13:09:17] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[13:09:32] *** Joins: jans (~Thunderbi@119.51-174-216.customer.lyse.net)
[13:19:00] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:22:02] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[13:22:18] *** Quits: jans (~Thunderbi@119.51-174-216.customer.lyse.net) (Ping timeout: 240 seconds)
[13:33:39] <Shinmera> Josh_2: https://github.com/shinmera/iclendar uses mop to ensure data is only composed out of valid parts.
[13:43:16] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:50:51] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[13:51:09] *** Joins: skyl4rk (~tlvb@user/tlvb)
[13:51:20] <Shinmera> As a consequence of using MOP, the constraints can be expressed using defclass.
[13:59:15] <dsk> kakuhen: It doesn't even print on the terminal?
[14:00:57] <kakuhen> dsk: no
[14:03:26] <dsk> Well, I use SLIME and SBCL, so I'm not sure what's happening there, but setting SLYNK:*GLOBALLY-REDIRECT-IO* to T before connecting might do what you want.
[14:05:18] <dsk> Out of curiosity, what's the value of *STANDARD-OUTPUT* in the Sly REPL?
[14:06:14] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:07:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 252 seconds)
[14:08:05] *** Joins: dlowe (~dlowe@user/dlowe)
[14:08:55] *** Joins: tfb (~tfb@88.98.95.237)
[14:10:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:10:40] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[14:15:50] *** Quits: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 268 seconds)
[14:22:21] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:24:12] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[14:25:33] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 244 seconds)
[14:26:29] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:29:24] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[14:30:10] *** Quits: Wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[14:34:38] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[14:35:43] *** Joins: Alfr (~Alfr@user/alfr)
[14:36:47] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[14:41:41] <beach> Is the declaration (ftype nil <some-name>) meaningful?
[14:43:23] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:44:45] <beach> Oops, I need to vanish for a while.  I'll read answers later.
[14:47:06] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 264 seconds)
[14:50:07] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[14:55:38] <phoe> beach: looks like your question reduces to, "is NIL a functional type"
[14:56:00] <phoe> because CLHS Declaration FTYPE says: "Specifies that the functions named by function-names are of the functional type TYPE."
[14:57:07] <phoe> and type NIL is a subtype of FUNCTION as it is a subtype of every type
[14:57:54] *** Quits: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 264 seconds)
[14:57:59] <phoe> but I don't think you can meaningfully state that any function object is of type NIL, since the mere existence of such a function means that it is not of type NIL
[14:58:08] <phoe> s/of such a function/of such a function object/
[14:58:35] *** Quits: killsushi (~killsushi@user/killsushi) (Quit: Leaving)
[14:58:50] <phoe> so I guess that DECLARE FTYPE NIL of a given symbol would only be meaningful if a given symbol is *not* fbound
[15:04:38] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[15:07:49] <gigo> Why does plaster.tymoon.eu require unscrambling a word before posting? Difficult for dsylexic people like me.
[15:09:05] <gigo> can someone unscramble "rosean" for me please? need to make a paste and share here.
[15:10:25] <gigo> okay, managed to make the paste. my question incoming now.
[15:11:07] <gigo> Here is my code: https://plaster.tymoon.eu/view/2499 - How to make the second "No error" code block execute only when there is no error condition? I am trying to make an if-error-then-this-else-that kind of code.
[15:13:51] <phoe> gigo: spambot protection
[15:14:02] <phoe> if you register, the unscrambling goes away
[15:14:19] <phoe> gigo: use :no-error instead of t
[15:14:53] <phoe> also note that then your lambda list will need to accept whatever values were produced by (/ 3 1), which in this case it will
[15:16:06] <gigo> phoe: thanks. I will try :no-error. In the meantime, what do you think of this: https://plaster.tymoon.eu/view/2500 ? Is this a valid solution too?
[15:16:24] <loke[m]> I'm still trying to figure out what rosean becomes?
[15:16:28] <phoe> reason
[15:16:35] <loke[m]> Oh
[15:16:49] <phoe> gigo: kinda sorta, yes - control only reaches the first FORMAT call if the division succeeded
[15:17:06] <Alfr> phoe, hm ... it may be clearer to quantify over all things of type nil, when talking about such.
[15:17:20] <phoe> Alfr: there are exactly 0 things of type NIL
[15:17:30] *** Quits: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com) (Ping timeout: 268 seconds)
[15:17:34] <phoe> it is the empty type and therefore must contain exactly 0 elements
[15:17:35] <Alfr> Thus all statements are not false, phoe.
[15:17:43] <phoe> what do you mean?
[15:18:00] <Alfr> For all x of type NIL, P(x) is true.
[15:18:12] <phoe> what's P(x)?
[15:18:24] <Alfr> Any predicate.
[15:18:30] <phoe> oh, then for all x of type NIL, P(x) is false
[15:18:46] <phoe> and you can't prove me wrong either
[15:18:51] <Alfr> Yeah, that too.
[15:19:05] <phoe> that's the beauty of empty types and making an error in the proof assumptions
[15:19:25] <phoe> this line of reasoning is only valid if there is any x of type NIL, and that is false
[15:19:35] <phoe> hence our contradiction
[15:20:14] <Alfr> We should take it into the cafe, if you wish to continue this.
[15:20:39] <phoe> yes, though I'm fine with ending here
[15:21:02] <Alfr> Sounds good to me.
[15:22:06] <gigo> phoe: Tried your suggestion of :no-error. https://plaster.tymoon.eu/view/2500 - I will use this instead of my hack. This looks neater. It has an added advantage that I can get the result of the first expression in variable c and use that if I need to.
[15:28:51] <phoe> <3
[15:29:01] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[15:29:19] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[15:29:26] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:30:13] <gigo> phoe: is your nick a shortened form of the word "phoenix". is that why your nick is pronounced "phoe"?
[15:31:17] <gigo> Alfr: where is the cafe?
[15:31:28] <phoe> gigo: #lispcafe
[15:31:33] <phoe> gigo: yes
[15:31:35] <gigo> thanks
[15:39:47] *** Joins: silasfox (~sbv@2001-4dd5-301f-0-1241-18dd-bcfc-9676.ipv6dyn.netcologne.de)
[15:46:20] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[15:46:25] *** Joins: ldb (~user@user/ldb)
[15:47:20] <lucerne> How do I read all of the stdin?
[15:47:45] <lucerne> (I want to read some JSON froom stdin.)
[15:47:50] <ldb> you mean read until EOF?
[15:47:53] <lucerne> yes
[15:48:25] <phoe> alexandria:read-stream-content-into-string
[15:48:46] <lucerne> thanks
[15:49:19] <phoe> although if you want to parse json, then the json library of your choosing should have a function that reads stuff from a stream and then outputs its parsed representation
[15:49:30] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[15:50:41] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[15:51:07] <lucerne> phoe: which library do you recommend?
[15:51:37] <phoe> lucerne: https://github.com/Zulu-Inuoe/jzon
[16:02:55] <lucerne> phoe: How do I install it? `(ql:system-apropos "jzon")` doesn't return anything
[16:05:57] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[16:06:15] <gigo> https://plaster.tymoon.eu/view/2502#2502 - It runs but I get "The variable C is defined but never used." How can I resolve this warning when I don't intend to use the variable c?
[16:06:44] <ldb> lucerne: you know how to use ASDF?
[16:08:34] <lucerne> ldb: I have read on it once, but I really don't want to manage the deps manually. (IIRC, ASDF is basically just cloning the repo in the loadpath and then loading it, no?)
[16:09:03] <ldb> gigo: see CLHS Declaration IGNORE, http://clhs.lisp.se/Body/d_ignore.htm
[16:10:32] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[16:10:49] <ldb> (error (c)
[16:10:49] <ldb>       (declare (ignore c))
[16:10:49] <ldb>       (format t "~&Error~%"))
[16:11:47] <edgar-rft> grmbl, ldb was faster than me :-)
[16:12:56] <ldb> lucerne: ASDF is used by Quicklisp to load dists, so if you clone the git repos to quicklisp/local-projects, you should be able to quickload them as well
[16:14:51] <lucerne> ldb: Doesn't sth like emacs package fetchers  (like `straight.el`) exist? Sth that automatically fetches from a git repo.
[16:17:50] <ldb> well, there's so called "roswell" proivdes that feature, and can help manage common lisp version as well
[16:18:09] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[16:21:41] <beach> phoe: Thanks.
[16:23:14] <phoe> beach: no problem, and please double-check what I said since I don't know if my interpretation is correct
[16:23:43] <etimmons> lucerne: there's also qlot and clpm
[16:25:02] <lucerne> Thanks!
[16:25:24] <beach> phoe:  I am not sure how to check it.
[16:32:59] <phoe> beach: neither am I. Maybe let's simply wait for other #commonlisp folk to chip in!
[16:32:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[16:33:44] <beach> Yeah.
[16:36:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[16:41:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[16:51:45] *** Joins: yewscion_ (~yewscion@2601:547:a00:7720::c63e)
[17:07:47] *** Quits: silasfox (~sbv@2001-4dd5-301f-0-1241-18dd-bcfc-9676.ipv6dyn.netcologne.de) (Ping timeout: 244 seconds)
[17:09:58] *** Joins: silasfox (~sbv@2001-4dd5-240-0-dc-197e-23a-567a.ipv6dyn.netcologne.de)
[17:12:18] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[17:13:08] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:16:44] *** Quits: silasfox (~sbv@2001-4dd5-240-0-dc-197e-23a-567a.ipv6dyn.netcologne.de) (Ping timeout: 265 seconds)
[17:17:42] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[17:18:49] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:19:02] *** Joins: derelict (~derelict@user/derelict)
[17:23:10] *** Joins: silasfox (~sbv@2001-4dd5-301f-0-1241-18dd-bcfc-9676.ipv6dyn.netcologne.de)
[17:30:19] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[17:30:32] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[17:30:52] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[17:31:29] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[17:37:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[17:41:58] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:47:30] *** Joins: Krystof (~user@81.174.155.115)
[17:58:30] *** Quits: yewscion_ (~yewscion@2601:547:a00:7720::c63e) (Ping timeout: 264 seconds)
[18:01:57] *** Joins: Cymew (~ante@c-b985225c.023-1144-7570702.bbcust.telenor.se)
[18:11:52] *** Quits: Cymew (~ante@c-b985225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[18:20:35] <Josh_2> Shinmera: what is the advantage to doing this using a metaclass rather than using something like an :after on initialize-instance?
[18:21:08] <Shinmera> I already answered that question
[18:28:32] <Josh_2> I see
[18:28:38] <Josh_2> Its a good example, thanks :D
[18:31:17] <Josh_2> I know of a use case that I often find, a :required key which would check that a value is provided to that slot when initialized
[18:31:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[18:31:36] <Josh_2> pretty common to have a mix of required and not required slots when interfacing with an external API
[18:39:47] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Remote host closed the connection)
[18:43:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[18:45:10] *** Quits: Noisytoot (noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[18:46:39] <greyrat> `sbcl --script` doesn't load `~/.sbclrc`?
[18:51:39] *** Joins: Noisytoot (noisytoot@sourcehut/user/noisytoot)
[18:51:39] <edgar-rft> greyrat: according to http://www.sbcl.org/manual/ --script <filename> implies --no-userinit --no-sysinit --disable-debugger --end-toplevel-options
[18:51:54] *** Quits: silasfox (~sbv@2001-4dd5-301f-0-1241-18dd-bcfc-9676.ipv6dyn.netcologne.de) (Quit: WeeChat 3.1)
[18:53:18] <edgar-rft> see http://www.sbcl.org/manual/ -> Section 3.3.2 Toplevel Options
[18:54:11] <gigo> Need some help with this: https://plaster.tymoon.eu/view/2503 - I get this error while trying to use handler-case: (SB-C::XEP (LAMBDA () :IN #:|error-return|)) called with invalid number of arguments: 1
[18:55:25] <greyrat> edgar-rft: Thanks. I should use =--non-interactive=, it seems.
[18:58:27] *** Quits: Noisytoot (noisytoot@sourcehut/user/noisytoot) (Remote host closed the connection)
[19:03:11] <greyrat> I tried `#!/usr/bin/env -S sbcl --non-interactive --load`, but this gets into conflicts with the shebang line. Should I just load the init file manually?
[19:03:15] *** Joins: Noisytoot (noisytoot@sourcehut/user/noisytoot)
[19:06:58] *** Joins: d4ryus (~d4ryus@ppp-188-174-87-123.dynamic.mnet-online.de)
[19:10:23] <gigo> what does the 'f' stand for in 'incf' and 'decf'?
[19:12:00] *** Joins: Bike (~Bike@2603-6081-2340-023a-0529-e6bd-b770-8333.res6.spectrum.com)
[19:12:00] *** ChanServ sets mode: +o Bike
[19:12:24] <Bike> gigo: like phoe said, the no-error clause needs to accept the values from the form
[19:12:33] <Bike> i.e. the result of (/ 3 1) in this case
[19:12:55] <gigo> Bike: so if I don't want to use the values from the form I have to (declare (ignore ...)) them?
[19:12:56] <Bike> so, do (:no-error (value) ...) basically
[19:12:58] <Bike> yes
[19:13:02] <gigo> thanks
[19:14:45] *** Quits: Bike (~Bike@2603-6081-2340-023a-0529-e6bd-b770-8333.res6.spectrum.com) (Client Quit)
[19:19:56] <gigo> Is there a function to exit with a nonzero exit code, so that when run via shell, the shell knows that the program errored out?
[19:21:02] <beach> Not in the standard.
[19:21:21] <beach> The standard doesn't think you should ever quit the Common Lisp image.
[19:21:36] <phoe> gigo: uiop:quit
[19:21:56] <phoe> uiop is loaded whenever asdf is loaded so you should have it available in most situations
[19:22:05] <gigo> phoe: thanks. uiop:quit works
[19:25:14] *** Joins: hydandata_ (~textual@2a02:8308:20c:f300:194e:f00e:96e4:774f)
[19:26:13] <gigo> Now the problem I have is that I want my Lisp program behave well when a user runs it like yet another tool on their system. It should exit with a proper exit code based on success or failure. But at the same time I don't want it to kill my SLIME's REPL when I am coding using Emacs. Is this a common problem? If so, how does one resolve this problem?
[19:26:51] <phoe> gigo: so you actually want two things
[19:27:06] <phoe> one, a library function that you can call from the REPL that implements whatever you seek to have implemented
[19:27:12] <gigo> Yes, I want the program to behave well for the user too and for the developer too.
[19:27:52] <phoe> two, an entry point for Unix, which calls this library function and exits with different exit codes based on the results
[19:27:53] <gigo> If I could somehow detect that the program is running within SLIME, then I will skip the (uiop:quit) call. otherwise I will execute the (uiop:quit) call to behave well for the user.
[19:28:11] <phoe> gigo: actually, no, don't do it
[19:28:23] <phoe> use only the library function(s) within slime
[19:28:37] <phoe> and leave the main function only for deployed executables
[19:29:07] <gigo> phoe: that is a nice idea. thanks.
[19:30:56] *** Quits: hydandata_ (~textual@2a02:8308:20c:f300:194e:f00e:96e4:774f) (Quit: Textual IRC Client: www.textualapp.com)
[19:34:16] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[19:45:11] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:45:34] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:47:06] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[19:59:00] <gigo> Another macro trouble. Please help me with this: https://plaster.tymoon.eu/view/2504#2504 - I get this error: COMMON-LISP-USER::HELLO is a macro, not a function.
[20:00:44] <Josh_2> You arent defining your macro at the top level
[20:01:02] <Josh_2> Try macrolet instead of defmacro
[20:01:25] <phoe> DEFINE-FOO and DEFFOO are usually toplevel forms
[20:01:53] <phoe> as Josh_2 said, the lexical variant of DEFMACRO is MACROLET, and you'll want to use that for a macro that is defined locally
[20:02:42] <gigo> oh! what about defun? is defun allowed in lexical scope?
[20:02:58] <Josh_2> you should use labels/flet for local functions
[20:03:06] <phoe> yes, but it will define a global function
[20:03:20] <gigo> why doesn't defmacro define a global macro then?
[20:04:31] <phoe> it does!
[20:05:04] <phoe> except in your code DEFMACRO is not toplevel so the compiler does not know that a call to HELLO is supposed to be a macro when it compiles it
[20:05:24] <phoe> if you structure the code in your file like (defmacro hello ...) (let (...) (hello ...) ...) then you'll get the expected results
[20:05:52] <dlowe> aw, harmony-pulse-cffi isn't in quicklisp anymore
[20:06:46] <gigo> understood. thanks phoe and Josh_2
[20:06:51] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[20:08:04] <phoe> Shinmera: is that intended? or did it break for reasons unknown and we're only learning about it now?
[20:08:45] *** Joins: gpiero (~quassel@193.182.16.91)
[20:09:29] <Shinmera> That change happened a year ago: https://reader.tymoon.eu/article/387
[20:09:41] <Shinmera> backend interaction is now part of cl-mixed
[20:10:28] <Shinmera> The new harmony & cl-mixed are much improved.
[20:11:44] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[20:23:29] <dlowe> it's fine.  I found where the cffi is hidden :)
[20:28:04] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[20:32:22] *** Joins: dlowe (~dlowe@user/dlowe)
[20:32:38] *** Joins: zacts (~zak@user/zacts)
[20:32:41] <dlowe> (I needed to read from pulseaudio, not write to it)
[20:35:16] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[20:37:14] *** Quits: zacts (~zak@user/zacts) (Client Quit)
[20:39:37] *** Joins: andreyorst (~andreyors@2.92.127.117)
[20:49:07] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[20:49:57] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Client Quit)
[20:52:48] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[20:55:57] <gigo> Two questions: Inside (handler-case (expr) (error (c) ..., is it possible to (1) Print the full error stack? (2) Rethrow the error?
[20:56:15] <phoe> 1) no 2) yes
[20:56:33] <phoe> but in case of 2) maybe you don't want to resignal it
[20:56:49] <phoe> if you use handler-bind instead of handler-case, you can simply decline to handle it
[20:57:06] <phoe> also, errors in CL are signaled rather than thrown; CL:THROW serves a different purpose
[20:57:20] <phoe> also, in handler-bind, you have the stack available
[20:58:09] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[21:05:34] <gigo> phoe: okay, thank you
[21:06:06] <phoe> if you want to stick to portable CL, then you can manually establish a block that you can conditionally RETURN-TO inside a HANDLER-BIND-bound handler
[21:06:30] <phoe> the difference is, handler-bind just calls functions in the dynamic context of some other code, whereas handler-case FIRST makes a non-local return and then executes code
[21:06:53] <phoe> that's why the original stack is unavailable in handler-case handlers, it has already been destroyed by the time your code executes
[21:07:42] <Shinmera> dlowe: reading is something I'd like cl-mixed to do as well, so a patch would be very welcome!
[21:09:28] <dlowe> Shinmera: I just needed pa_simple_read, though now I'm looking at trying to pull the list of audio devices and it looks considerably more complicated
[21:09:51] <dlowe> namely, it seems to want the PA mainloop
[21:09:56] <Shinmera> device enumeration is always a pain, though alsa and pulse are honestly pretty easy by comparison!
[21:11:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 252 seconds)
[21:11:38] <edgar-rft> I'm just asking myself if the SYMBOL-VALUE slot of an INTERNed symbol is "special" in the "special variable" sense. Or in other words, is there a difference between (DEFPARAMETER <symbol> <value>) and  (PROGN (INTERN <symbol>) (SETF <symbol> <value>)) ?
[21:11:41] <dlowe> pulse wants a name like "alsa_output.pci-0000_00_1f.3.analog-stereo.monitor" and I've just been passing it in, but it'd be nice if it would select the "default"
[21:12:25] <Shinmera> It does have the concept of a default device, so there ought to be a way of getting it.
[21:12:41] <dlowe> oh, wait, no.
[21:12:55] <dlowe> I don't need the default device, I need the monitor of the output device :D
[21:12:57] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[21:13:07] *** Quits: leo_song (~leo_song@101.191.88.205) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[21:13:09] <dlowe> so (concatenate output-device-name ".monitor")
[21:13:32] <Shinmera> are you working on a screen recording thingy?
[21:13:50] <dlowe> *blush* I wrote a program to fish in Minecraft
[21:14:48] *** Joins: leo_song (~leo_song@101.191.88.205)
[21:15:59] *** Quits: andreyorst (~andreyors@2.92.127.117) (Quit: WeeChat 3.1)
[21:22:14] <dlowe> Shinmera: looking at the pulse extension, it doesn't really look like it was all designed with async operation in mind
[21:22:30] <Shinmera> Hm?
[21:22:55] <dlowe> you were mentioning including reading into cl-mixed
[21:23:00] <Shinmera> right.
[21:23:20] <Shinmera> the undrelying buffers are thread safe.
[21:23:42] <Shinmera> the current extension doesn't do it async because there's no reason to, but it can be if you have to.
[21:24:28] <Shinmera> the coreaudio backend for instance has to do it async.
[21:24:35] <dlowe> pulse has a mainloop implementation that spawns a thread, and that might work
[21:24:52] <Shinmera> do you have to?
[21:25:01] <dlowe> if you want to use any async apis
[21:25:26] <dlowe> I fantasize about a pure lisp pulseaudio library :p
[21:25:51] <Shinmera> I don't understand what prevents you from using the simple synchronous library.
[21:27:42] <dlowe> For just providing a source? Nothing
[21:28:25] <dlowe> Literally anything more than reading and writing requires the async api
[21:29:48] <Shinmera> Ok. Well, if you want to support even more then I can only say you can make it work with cl-mixed without much issue.
[21:29:56] <dlowe> thanks :)
[21:30:19] <Shinmera> Feel free to hang out in #shirakumo as well if you want to get involved further.
[21:32:47] *** Quits: Posterdati (~posterdat@host-79-12-208-242.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[21:34:03] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[21:46:21] *** Joins: Posterdati (~posterdat@host-79-12-208-242.retail.telecomitalia.it)
[21:48:18] <Alfr> edgar-rft, I think your setf in progn is UB, clhs 3.1.2.1.1 . It's the same problem as a (setf foo ..) w/o an enclosing lexical binding or special declaration for foo.
[21:48:55] <Alfr> Hm ... where's specbot?
[21:49:16] <Shinmera> ::clhs
[21:49:19] <Colleen> Common lisp hyperspec (tm) http://www.lispworks.com/documentation/HyperSpec/Front/index.htm
[21:49:25] <edgar-rft> Alfr: thank you, I can look it up myself :-)
[21:49:28] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 258 seconds)
[21:49:40] <Alfr> Shinmera, ah ... thanks. :)
[21:49:52] <dsk> edgar-rft: A couple other things. INTERN takes a string as an argument, not a symbol. It also does nothing extra since the reader interns the symbol if it's not interned already as soon as you mention it.
[21:50:11] *** Joins: amb007 (~a_bakic@107.107.204.77.rev.sfr.net)
[21:51:34] <dsk> (setf (symbol-value <symbol>) <value>) sets the symbol value.
[21:52:21] <dsk> The symbol in question could be interned in some package or uninterned, it makes no difference.
[21:52:50] <phoe> edgar-rft: DEFPARAMETER is basically DECLAIM SPECIAL + SETF SYMBOL-VALUE, all with appropriate compile-time processing
[21:54:42] <Alfr> edgar-rft, and if you want to be evil and really don't want that special declaration in the global environment, then there's always (locally (declare (special ..)) ..) .
[21:54:54] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[21:59:35] *** Joins: andreyorst (~andreyors@2.92.127.117)
[22:04:06] *** Joins: derelict (~derelict@user/derelict)
[22:04:21] *** Quits: amb007 (~a_bakic@107.107.204.77.rev.sfr.net) (Ping timeout: 265 seconds)
[22:08:35] *** Joins: amb007 (~a_bakic@179.246.204.77.rev.sfr.net)
[22:11:00] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[22:11:34] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 265 seconds)
[22:23:55] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:26:42] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 240 seconds)
[22:29:30] *** Joins: leeb (~leeb@KD111239153103.au-net.ne.jp)
[22:39:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[22:40:18] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:40:49] *** Quits: andreyorst (~andreyors@2.92.127.117) (Quit: WeeChat 3.1)
[22:59:16] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 252 seconds)
[22:59:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:05:49] *** Quits: eta (~eta@woolwich-arsenal.i.eta.st) (Quit: Gateway shutdown)
[23:08:03] *** Joins: eta (~eta@chat.i.eta.st)
[23:13:52] *** Joins: Wilfred (uid159@id-159.highgate.irccloud.com)
[23:13:54] *** Joins: tfb (~tfb@88.98.95.237)
[23:19:06] *** Quits: tfb (~tfb@88.98.95.237) (Quit: Leaving)
[23:19:48] *** Joins: tfb (~tfb@88.98.95.237)
[23:21:49] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[23:22:57] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[23:23:08] *** Joins: makomo (~makomo@user/makomo)
[23:23:31] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[23:23:35] *** Joins: tyson2`` (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca)
[23:24:05] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[23:25:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 265 seconds)
[23:27:59] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 258 seconds)
[23:30:32] *** Joins: selwyn (~selwyn@user/selwyn)
[23:30:40] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[23:31:33] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 268 seconds)
[23:31:56] *** Joins: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de)
[23:33:06] *** Quits: tyson2`` (~user@bras-base-toroon0624w-grc-17-50-101-91-221.dsl.bell.ca) (Ping timeout: 252 seconds)
[23:33:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:35:30] *** Joins: andreyorst (~andreyors@2.92.127.117)
[23:35:42] *** Joins: nature (~nature@mail.blazebone.com)
[23:53:42] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
