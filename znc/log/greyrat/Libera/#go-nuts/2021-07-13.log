[00:08:59] *** Joins: Garb0 (~Garb0@user/garb0)
[00:10:48] *** Quits: Garb0 (~Garb0@user/garb0) (Client Quit)
[00:12:31] *** Joins: andlabs (~andlabs@71.190.119.164)
[00:12:55] *** Joins: Garb0 (~Garb0@user/garb0)
[00:20:52] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 256 seconds)
[00:20:58] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 272 seconds)
[00:21:23] *** Joins: mrig (~mrig@user/mrig)
[00:21:24] *** Joins: shadowsy (~shadowsy@79.115.7.175)
[00:22:16] *** Joins: Garb0 (~Garb0@user/garb0)
[00:22:37] *** Quits: shadowsy (~shadowsy@79.115.7.175) (Remote host closed the connection)
[00:23:31] *** freespirit is now known as DaftMonk
[00:27:02] *** Joins: shka (~herr@109.231.62.239)
[00:27:36] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 255 seconds)
[00:27:48] *** Joins: gggpkm_ (~gggpkm@114.243.63.95)
[00:28:40] *** Joins: vsantana (~Thunderbi@2804:388:6081:ebab:e07c:7a:6f40:84e0)
[00:29:37] *** Joins: Garb0 (~Garb0@user/garb0)
[00:30:02] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[00:30:18] *** Quits: gggpkm (~gggpkm@60.10.23.164) (Ping timeout: 255 seconds)
[00:32:48] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1005.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:33:05] <independent56> What is the name of that thing which generats documentation from files such as https://cs.opensource.google/go/go/+/refs/tags/go1.16.5:src/log/log.go ?
[00:33:27] *** Parts: vsantana (~Thunderbi@2804:388:6081:ebab:e07c:7a:6f40:84e0) ()
[00:38:11] <Tv_> independent56: godoc
[00:38:22] <independent56> oh yeah, thanks!
[00:38:23] <Tv_> or `go doc`, for more of a command-line experience
[00:43:21] *** Quits: dr0n (~nabromov@92.40.255.115.threembb.co.uk) (Ping timeout: 255 seconds)
[00:44:15] *** Quits: Kane (~Kane@home.yarg.fr) (Quit: Leaving)
[00:44:16] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Remote host closed the connection)
[00:44:41] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[00:47:27] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 276 seconds)
[00:47:32] *** Joins: pepee (~user@user/pepee)
[00:48:46] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[00:51:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:51:46] *** Quits: nperez (~nperez@86-93-223-59.fixed.kpn.net) (Ping timeout: 272 seconds)
[01:07:58] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:12:14] *** Joins: andlabs (~andlabs@71.190.119.164)
[01:13:14] *** Quits: rgl (~rgl@bl12-47-147.dsl.telepac.pt) (Quit: Leaving)
[01:16:15] *** Quits: nef (~nef@user/nef) (Quit: Leaving)
[01:20:54] *** Joins: jjonah (~jjonah@p200300d5d72a9300dea632fffeb3342f.dip0.t-ipconnect.de)
[01:21:49] *** Quits: astropirate_ (~astropira@86.106.143.190) (Quit: Leaving)
[01:25:53] *** bougyman_ is now known as bougyman
[01:37:59] *** Quits: Garb0 (~Garb0@user/garb0) (Read error: Connection reset by peer)
[01:43:57] *** Quits: darkmuggle (darkmuggle@redhat/darkmuggle) (Remote host closed the connection)
[01:48:16] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:56:16] *** Joins: darkmuggle (darkmuggle@here.for-the.chat)
[01:56:54] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[01:58:00] *** Joins: atomgardner (~atomgardn@user/atomgardner)
[01:58:40] *** Joins: src (~src@user/src)
[02:03:27] *** Quits: atomgardner (~atomgardn@user/atomgardner) (Ping timeout: 255 seconds)
[02:10:03] *** Joins: nperez (~nperez@86-93-223-59.fixed.kpn.net)
[02:10:24] *** Joins: arthur (~arthur@91.135.14.14)
[02:10:39] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 255 seconds)
[02:14:57] *** CommunistWolf is now known as CapitalistWolf
[02:15:01] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[02:16:28] *** CapitalistWolf is now known as CommunistWolf
[02:26:12] *** Joins: V (~v@anomalous.eu)
[02:26:36] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[02:27:05] *** Joins: c10l (~c10l@89.34.167.207)
[02:32:20] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 256 seconds)
[02:32:49] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[02:33:08] *** Quits: moto (~moto@user/moto) (Ping timeout: 258 seconds)
[02:34:36] *** Quits: independent56 (~independe@95.144.68.40) (Ping timeout: 256 seconds)
[02:37:13] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:38:03] *** Quits: jjonah (~jjonah@p200300d5d72a9300dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:45:47] *** Quits: strubbl891941 (~strubbl@ipb21a9309.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[02:49:51] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:52:48] *** Joins: moog (~moog@107.126.53.20)
[03:26:00] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[03:31:41] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:04] *** Joins: jsrnop (~mark@user/jsrnop)
[03:38:44] *** Joins: Torr (~Torr@user/torr)
[03:45:09] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:49:07] *** Quits: caubert (~caubert@136.244.111.235) (Quit: WeeChat 3.1)
[03:49:20] *** Joins: caubert (~caubert@136.244.111.235)
[03:55:10] *** Joins: strubbl891941 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de)
[03:56:04] *** Quits: albertito (~nil@37.228.214.226) (Ping timeout: 272 seconds)
[03:56:07] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:c519:d7e1:27a5:dced)
[03:57:07] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[03:59:33] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 255 seconds)
[04:05:39] *** Joins: xvx (~s@185.48.63.111)
[04:13:30] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 255 seconds)
[04:14:55] *** Joins: gijs (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl)
[04:15:45] *** Quits: gpeskens[w] (~gpeskens@94-209-53-75.cable.dynamic.v4.ziggo.nl) (Ping timeout: 255 seconds)
[04:25:51] *** Joins: doug_ (~textual@cpe-172-250-106-85.socal.res.rr.com)
[04:36:12] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Ping timeout: 272 seconds)
[04:37:46] *** Quits: doug_ (~textual@cpe-172-250-106-85.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:39:04] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Quit: Bridge terminating on SIGTERM)
[04:39:50] *** Quits: hposca (~hposca@node-1w7jr9phoke2ssp3k5wcuo3j9.ipv6.telus.net) (Ping timeout: 256 seconds)
[04:41:27] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[04:42:46] *** Joins: doug_ (~doug_@cpe-172-250-106-85.socal.res.rr.com)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:32] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 258 seconds)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:30] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[04:49:20] *** Quits: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[04:52:17] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 252 seconds)
[04:52:50] *** Joins: trufas (~trufas@177.240.218.218)
[05:01:56] *** Joins: ofh (~felix@203.221.144.18)
[05:02:18] *** Quits: yelnah (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7) (Ping timeout: 240 seconds)
[05:03:37] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[05:06:48] *** Quits: ofh (~felix@203.221.144.18) (Ping timeout: 276 seconds)
[05:08:06] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1002) (Quit: ZNC 1.8.2 - https://znc.in)
[05:09:54] *** Joins: moto (~moto@user/moto)
[05:10:11] *** Joins: yelnah (~felix@61-68-87-134.tpgi.com.au)
[05:12:52] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[05:13:41] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1002)
[05:17:24] *** Quits: doug_ (~doug_@cpe-172-250-106-85.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:23:45] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[05:38:59] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1002) (Quit: ZNC 1.8.2 - https://znc.in)
[05:41:07] *** Quits: g2anj (~v@221.142.186.101) (Quit: .)
[05:42:28] *** Quits: moog (~moog@107.126.53.20) (Quit: Leaving)
[05:42:54] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[05:43:08] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[05:44:13] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[05:45:41] *** Joins: gggpkm (~gggpkm@123.116.92.175)
[05:46:04] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Client Quit)
[05:47:46] *** Quits: gggpkm_ (~gggpkm@114.243.63.95) (Ping timeout: 272 seconds)
[05:49:36] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[05:54:15] *** Quits: steve__ (~steve@ool-18b99d28.dyn.optonline.net) (Ping timeout: 276 seconds)
[05:54:21] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:58:45] *** Quits: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi) (Ping timeout: 268 seconds)
[05:59:13] *** Joins: twaapo (glxblt@91-152-242-177.elisa-laajakaista.fi)
[06:00:10] *** Joins: g2anj (~v@221.142.186.101)
[06:08:26] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[06:09:20] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Read error: Connection reset by peer)
[06:14:32] *** Joins: veegee (~veegee@199.36.223.29)
[06:15:29] *** Joins: ghostbuster (~admin@user/ghostbuster)
[06:17:55] *** Joins: frost (~frost@59.71.241.179)
[06:20:35] *** Quits: veegee (~veegee@199.36.223.29) (Quit: Textual IRC Client: www.textualapp.com)
[06:21:07] *** Joins: andlabs (~andlabs@71.190.119.164)
[06:23:32] *** Quits: yelnah (~felix@61-68-87-134.tpgi.com.au) (Ping timeout: 256 seconds)
[06:25:05] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: Textual IRC Client: www.textualapp.com)
[06:26:21] *** Joins: yelnah (~felix@110-174-253-27.static.tpgi.com.au)
[06:28:09] *** Joins: veegee (~veegee@172.98.71.46)
[06:30:20] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 256 seconds)
[06:31:41] *** Joins: Xjs (~jannis@user/xjs)
[06:35:03] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[06:47:47] *** Joins: ofh (~felix@193-119-125-17.tpgi.com.au)
[06:48:18] *** Quits: yelnah (~felix@110-174-253-27.static.tpgi.com.au) (Ping timeout: 255 seconds)
[07:01:14] *** Quits: ofh (~felix@193-119-125-17.tpgi.com.au) (Ping timeout: 272 seconds)
[07:02:20] *** Joins: yelnah (~felix@2001:44b8:3084:c0:6f0:21ff:fe3c:d4d7)
[07:02:38] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[07:03:36] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[07:04:22] <b0nn> Go release
[07:04:35] <b0nn> https://groups.google.com/g/golang-dev/c/5LJ2V7rd-Ag/m/YGLHVBZ6AAAJ?utm_medium=email&utm_source=footer&pli=1
[07:07:03] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 276 seconds)
[07:07:28] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[07:09:26] *** Quits: Rhys (Rhys@help.lux.melted.me) (Killed (platinum.libera.chat (Nickname regained by services)))
[07:09:36] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[07:20:26] <tardisx> I just skunkswork'd the first piece of golang into the main repo at work (python shop)
[07:21:41] *** Joins: atomgardner (~atomgardn@user/atomgardner)
[07:28:08] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 256 seconds)
[07:33:04] *** Quits: doghackit2 (~doghackit@c-76-27-57-63.hsd1.ut.comcast.net) (Quit: WeeChat 3.1)
[07:39:38] *** Joins: doug_ (~doug_@cpe-172-250-106-85.socal.res.rr.com)
[07:40:06] *** Joins: sizeof_void34 (~Thunderbi@109.252.76.37)
[07:40:09] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[07:40:12] *** Quits: xvx (~s@185.48.63.111) (Ping timeout: 276 seconds)
[07:41:44] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 256 seconds)
[07:42:29] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[07:53:36] *** Joins: ac5tin (~ac5tin@user/ac5tin)
[08:00:51] <LambdaComplex> tardisx: what was your justification for doing so?
[08:00:58] <LambdaComplex> (or is nobody gonna yell at you regardless?)
[08:02:06] <tardisx> my direct manager has ok'd it.... it's probably less skunkworks, more domination by slow assimilation I guess
[08:04:03] <tardisx> the easy technical justification is a 5MB container vs a 50MB+ python container
[08:08:51] *** Quits: yelnah (~felix@2001:44b8:3084:c0:6f0:21ff:fe3c:d4d7) (Ping timeout: 255 seconds)
[08:09:30] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[08:10:52] *** Joins: yelnah (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7)
[08:19:29] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[08:23:40] *** Quits: yelnah (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7) (Ping timeout: 256 seconds)
[08:24:34] *** Joins: yelnah (~felix@2001:44b8:3084:c0:6f0:21ff:fe3c:d4d7)
[08:46:29] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[08:56:13] *** Quits: sizeof_void34 (~Thunderbi@109.252.76.37) (Quit: sizeof_void34)
[08:57:33] *** Quits: LiftLeft (~LiftLeft@154.21.114.70) (Ping timeout: 276 seconds)
[09:12:01] *** Joins: trube (~trube@192.145.119.40)
[09:18:19] *** Quits: ac5tin (~ac5tin@user/ac5tin) (Quit: WeeChat 3.1)
[09:24:38] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:26:25] *** Joins: noxim (~noxim@user/noxim)
[09:27:32] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:29:35] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0)
[09:35:31] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:36:24] *** Joins: steve__ (~steve@ool-18b99d28.dyn.optonline.net)
[09:43:03] *** Quits: atomgardner (~atomgardn@user/atomgardner) (Ping timeout: 276 seconds)
[09:43:27] *** Joins: independent56 (~independe@95.144.68.40)
[09:43:52] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[09:44:48] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[09:47:16] *** Joins: LiftLeft (~LiftLeft@154.21.23.84)
[09:47:48] *** Quits: gggpkm (~gggpkm@123.116.92.175) (Ping timeout: 272 seconds)
[09:56:28] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[10:01:30] *** Joins: gggpkm (~gggpkm@114.243.63.95)
[10:01:59] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Read error: Connection reset by peer)
[10:02:33] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 276 seconds)
[10:03:17] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Read error: Connection reset by peer)
[10:04:38] *** Joins: arinov (~arinov@213.194.126.155)
[10:05:17] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[10:08:33] *** Quits: LiftLeft (~LiftLeft@154.21.23.84) (Ping timeout: 255 seconds)
[10:13:43] *** Joins: kodah (~kodah@user/kodah)
[10:27:12] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 256 seconds)
[10:32:58] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[10:33:19] *** Joins: fef (~thedawn@user/thedawn)
[10:38:31] *** Joins: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net)
[10:46:04] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 272 seconds)
[10:50:53] *** trube is now known as frox
[11:06:35] *** Joins: hikhvar796 (~thelounge@x4db3bc4e.dyn.telefonica.de)
[11:15:48] *** Joins: sizeof_void34 (~Thunderbi@109.252.76.37)
[11:19:37] *** Joins: shka (~herr@109.231.62.239)
[11:21:34] *** Quits: Ruxnor (kevin@user/kddlb) (Quit: The Lounge - https://thelounge.chat)
[11:23:52] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 256 seconds)
[11:24:43] *** Joins: Ruxnor (kevin@user/kddlb)
[11:28:44] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[11:29:20] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:31:59] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[11:32:54] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:36:15] *** Joins: fub (uid190747@id-190747.charlton.irccloud.com)
[11:40:33] <fub> How do I check/compare if the returned error is "signal: killed" ? I'm executing a cmd.Wait() where the command is bound to a context. The context is cancelled and the cmd is killed. Now I want to check in the error if its a "signal: killed" so I can discard the error message.
[11:41:54] *** Joins: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041)
[11:44:21] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:47:54] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[11:49:09] *** Quits: independent56 (~independe@95.144.68.40) (Ping timeout: 276 seconds)
[11:50:18] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 265 seconds)
[11:51:55] *** Joins: jespada (~jespada@90.254.247.46)
[11:54:45] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 255 seconds)
[11:58:42] *** Joins: trufas (~trufas@177.240.218.218)
[12:01:20] *** Quits: foobaz212 (~foobaz212@2001:8f8:1361:27ac:ec89:5807:1ec4:d041) (Quit: Client closed)
[12:01:33] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca)
[12:01:34] *** Joins: iauc (~iauc@ti0061a400-1478.bb.online.no)
[12:11:18] *** Joins: gggpkm_ (~gggpkm@111.63.14.117)
[12:12:51] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - http://znc.in)
[12:14:06] *** Quits: gggpkm (~gggpkm@114.243.63.95) (Ping timeout: 272 seconds)
[12:21:10] *** Quits: arthur (~arthur@91.135.14.14) (Remote host closed the connection)
[12:21:28] *** Joins: far1za (~far1za@user/far1za)
[12:21:34] *** Joins: souvik (~souvik@103.199.182.135)
[12:21:34] *** Joins: arthur (~arthur@91.135.14.14)
[12:24:42] *** Quits: arinov (~arinov@213.194.126.155) (Read error: Connection reset by peer)
[12:24:54] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 255 seconds)
[12:24:57] *** Joins: arinov (~arinov@213.194.126.155)
[12:32:26] *** Quits: souvik (~souvik@103.199.182.135) (Ping timeout: 256 seconds)
[12:35:58] *** Joins: souvik (~souvik@103.199.182.241)
[12:36:52] *** Joins: livingsilver94 (~livingsil@user/livingsilver94)
[12:38:13] *** Joins: kiril (~kiril@85.91.153.163)
[12:44:22] *** gggpkm_ is now known as gggpkm
[12:44:31] *** Parts: livingsilver94 (~livingsil@user/livingsilver94) (Konversation terminated!)
[12:44:50] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[12:52:16] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 256 seconds)
[12:56:54] <nevivurn> fub: the documentation says it's returning *os.ExitError, so you can probably figure it out through err.(*exec.ExitError).ExitCode()
[12:57:28] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[12:57:48] *** Joins: gggpkm_ (~gggpkm@123.113.178.134)
[12:58:31] <rannnn8888> https://dpaste.org/rz08 why i get here x declared but not used ?
[12:58:39] *** Quits: ikke (~kevin@alpine/developer/ikke) (Ping timeout: 255 seconds)
[12:58:46] <rannnn8888> if i want use "IF" still most used ?
[13:00:39] *** Quits: gggpkm (~gggpkm@111.63.14.117) (Ping timeout: 276 seconds)
[13:01:17] <nevivurn> rannnn8888: x is declared inside the if {} block, so it's scoped to just within that block. If you want to use that variable outside the if{} block, then you'd have to declare it outside.
[13:04:38] *** Joins: ikke (~kevin@alpine/developer/ikke)
[13:12:06] *** Joins: gggpkm (~gggpkm@123.113.178.134)
[13:13:48] *** Quits: gggpkm_ (~gggpkm@123.113.178.134) (Ping timeout: 256 seconds)
[13:21:09] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[13:23:31] *** Joins: mrig (~mrig@user/mrig)
[13:31:07] *** Joins: albertito (~nil@37.228.214.223)
[13:34:17] *** Quits: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net) (Quit: Connection closed)
[13:34:20] *** Quits: dalan6 (~dalan@110-175-157-170.tpgi.com.au) (Ping timeout: 252 seconds)
[13:54:59] <rannnn8888> how i can deal with this ? now if i put wrong ip i get https://dpaste.org/12y0  this get er https://dpaste.org/vsHu
[13:56:33] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 276 seconds)
[13:56:52] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 256 seconds)
[13:57:25] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[13:58:06] *** Joins: mrig (~mrig@user/mrig)
[13:58:20] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:01:56] *** Quits: Xat` (~Xat`@ns300217.ip-91-121-29.eu) (Quit: Lost terminal)
[14:05:55] *** Quits: frox (~trube@192.145.119.40) (Quit: Leaving)
[14:06:29] *** Joins: Ohlov311534026 (~Ohlov3@dyndsl-085-016-108-088.ewe-ip-backbone.de)
[14:08:02] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[14:09:03] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[14:10:38] *** Quits: Ohlov31153402 (~Ohlov3@dyndsl-085-016-153-105.ewe-ip-backbone.de) (Ping timeout: 272 seconds)
[14:11:19] *** Quits: arinov (~arinov@213.194.126.155) (Quit: Konversation terminated!)
[14:11:37] *** Joins: arinov (~arinov@213.194.126.155)
[14:11:59] *** Joins: trube (~trube@192.145.119.85)
[14:12:13] *** trube is now known as frox
[14:14:44] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[14:17:06] *** Joins: fef (~thedawn@user/thedawn)
[14:17:28] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[14:20:32] *** Joins: algiss (~algiss@78-56-3-119.static.zebra.lt)
[14:20:39] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:21:32] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[14:23:55] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[14:25:35] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[14:26:36] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[14:27:15] *** Joins: c10l (~c10l@89.34.167.207)
[14:30:53] *** Joins: fef (~thedawn@user/thedawn)
[14:33:28] *** Joins: souvik_ (~souvik@138.199.24.6)
[14:33:34] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[14:33:44] *** Joins: dalan6 (~dalan@27-32-31-114.tpgi.com.au)
[14:36:32] *** Quits: souvik (~souvik@103.199.182.241) (Ping timeout: 256 seconds)
[14:38:00] *** Joins: xvx (~s@185.48.63.111)
[14:38:06] *** Quits: souvik_ (~souvik@138.199.24.6) (Ping timeout: 255 seconds)
[14:38:48] *** Joins: souvik (~souvik@91.219.213.17)
[14:41:38] *** Quits: theoceaniscool (~theoceani@93.177.120.255) (Ping timeout: 256 seconds)
[14:42:52] *** Joins: theoceaniscool (~theoceani@93.177.120.255)
[14:51:14] *** Quits: frox (~trube@192.145.119.85) (Quit: Leaving)
[14:52:24] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 256 seconds)
[14:54:29] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[14:54:45] *** Joins: mickey (~user@user/mickey)
[15:01:00] *** Joins: kadobanana (~mud@user/kadoban)
[15:03:19] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[15:03:24] <bodhi> hello people
[15:06:54] *** Quits: souvik (~souvik@91.219.213.17) (Ping timeout: 255 seconds)
[15:08:16] *** Quits: erani (erani@kapsi.fi) (Ping timeout: 272 seconds)
[15:08:59] *** Joins: souvik (~souvik@103.199.182.241)
[15:11:17] *** Joins: erani (erani@kapsi.fi)
[15:13:44] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:15:51] *** Joins: andlabs (~andlabs@71.190.119.164)
[15:20:10] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 256 seconds)
[15:21:39] <nevivurn> rannnn8888: why are you doing this _ = x thing?
[15:22:18] <nevivurn> rannnn8888: every time you do "x := something" in a if block, you're declaring a new variable that is scoped to just inside that if block. It doesn not "exist" outside of that if block.
[15:24:55] <nevivurn> rannnn8888: Your code is essentially doing something like this, I renamed some variables to make it clearer: https://play.golang.org/p/MnHFi8pQSEc notice how in each block, it's the same as declaring a new variable like x1, x2, ... that has nothing to do with the x that is "outside" of the if blocks.
[15:26:38] *** Joins: chf_ (~chf_@213.144.147.254)
[15:27:32] *** Quits: erani (erani@kapsi.fi) (Ping timeout: 256 seconds)
[15:30:44] <nevivurn> rannnn8888: as for the panic, I can't be sure since we can't match the stack trace to the code you provided, but it's possible that the deferred response.Body.Close() is panicking since it gets run even when the request returns an error.
[15:31:28] <nevivurn> The correct thing to do would be to immediately return an error in the "if err != nil {}" following the client.Do() call.
[15:31:52] *** Joins: erani (erani@kapsi.fi)
[15:34:27] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:37:04] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[15:38:42] *** Joins: jjonah (~jjonah@p200300d5d7153b00dea632fffeb3342f.dip0.t-ipconnect.de)
[15:39:58] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Client Quit)
[15:40:19] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[15:42:12] *** Quits: algiss (~algiss@78-56-3-119.static.zebra.lt) (Quit: algiss)
[15:42:25] *** Joins: algiss (~algiss@78-56-3-119.static.zebra.lt)
[15:44:32] <rannnn8888> https://play.golang.org/p/wbtCHt4_MCL and whay its not return the er ? i get https://dpaste.org/E8KQ
[15:44:51] <rannnn8888> nevivurn you mean only on the client.Do()
[15:45:25] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca)
[15:46:57] *** Quits: alip (~alip@exherbo/developer/alip) (Ping timeout: 255 seconds)
[16:00:42] *** Quits: src (~src@user/src) (Ping timeout: 276 seconds)
[16:02:44] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[16:10:49] *** Quits: Vigdis (~danj@ns4.chown.me) (Ping timeout: 265 seconds)
[16:16:30] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1005)
[16:21:23] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[16:21:27] *** Joins: arinov (~arinov@213.194.126.155)
[16:21:42] *** Joins: noxim (~noxim@user/noxim)
[16:25:38] <nevivurn> rannnn8888: on every error, actually. I hadn't read your code properly.
[16:26:10] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:26:30] <nevivurn> Generally, error handling looks like "if err != nil { return your_zero_value, err }" and you let your caller decide what to do with it.
[16:26:57] <nevivurn> Optionally wrapping the error to provide more context, etc.
[16:28:00] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[16:28:18] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[16:28:31] *** Joins: __ (~far1za@user/far1za)
[16:29:16] *** Quits: far1za (~far1za@user/far1za) (Remote host closed the connection)
[16:32:26] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca)
[16:39:48] *** Quits: iauc (~iauc@ti0061a400-1478.bb.online.no) (Quit: Client closed)
[16:40:09] <rannnn8888> nevivurn why here i get undefined: bodyStr2 if all case its k ? https://play.golang.org/p/QyjBS4GN_kV
[16:41:15] <rannnn8888> or this https://play.golang.org/p/7ymfbnxEQuN
[16:41:37] <siXy> rannnn8888: I think you need to go through tour.golang.org - it looks like you're trying to guess your way through without really understanding what you're doing
[16:54:26] *** Joins: wolfshappen (~waff@irc.furworks.de)
[17:01:09] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 276 seconds)
[17:01:57] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[17:02:22] *** Joins: wolfshappen (~waff@irc.furworks.de)
[17:03:03] *** Joins: edrocks (~Ed@user/edrocks)
[17:04:24] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 276 seconds)
[17:05:15] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:05:55] <fizzie> rannnn8888: It's been pointed out a number of times already, so I don't imagine repeating it will help, but `bodyStr2 := ...` is a declaration of a new variable, and like all declarations, it's only visible inside the innermost block ("{ ... }" construct) it's declared in -- so you get "undefined: bodyStr2" when trying to use it in the return statement, outside that block.
[17:09:15] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:10:48] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[17:13:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[17:14:35] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[17:15:49] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:21:36] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[17:21:40] *** Quits: __ (~far1za@user/far1za) (Quit: Leaving)
[17:21:54] *** Quits: hikhvar796 (~thelounge@x4db3bc4e.dyn.telefonica.de) (Ping timeout: 272 seconds)
[17:21:55] *** Joins: __ (~far1za@user/far1za)
[17:21:56] *** Joins: noxim (~noxim@user/noxim)
[17:22:28] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Remote host closed the connection)
[17:22:57] *** Joins: Liquid_X (~lx@37.221.104.65)
[17:23:30] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:24:34] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[17:30:25] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:30:42] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:31:57] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:34:50] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:35:30] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca)
[17:40:07] <sztanpet> the thing to google is lexical scoping versus single scoping like what you are used to
[17:40:17] <sztanpet> oh, left, nevermind
[17:44:50] *** Joins: yoonkn (~user@175.197.208.79)
[18:07:46] *** Quits: algiss (~algiss@78-56-3-119.static.zebra.lt) (Quit: algiss)
[18:08:04] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:10:26] *** Quits: MrElendig (~Urist@archlinux/op/MrElendig) (Ping timeout: 250 seconds)
[18:10:52] *** Quits: philmacfly (~philmacfl@galaxie.weltraumhochofen.space) (Ping timeout: 250 seconds)
[18:11:10] *** Joins: philmacfly (~philmacfl@galaxie.weltraumhochofen.space)
[18:11:50] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[18:12:33] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:15:14] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:16:29] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:16:48] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 255 seconds)
[18:19:22] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[18:19:35] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Ping timeout: 258 seconds)
[18:19:43] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[18:21:05] <bodhi> Is there a good way to generate UUID which embeds so data that could be used to extract it later?
[18:21:53] <bookworm> I can't parse what you are trying to ask
[18:22:12] <bookworm> UUIDS are generally just opaque strings that don't collide
[18:22:32] <bookworm> you can "embed" that wherever
[18:25:50] <nevivurn> bodhi: are you trying to make it so some bits of the UUID contain some application-specific data? Can you describe what you're trying to do?
[18:26:14] <bookworm> embedding data *inside* of a UUID defeats the point
[18:26:24] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[18:26:35] <bodhi> bookworm: i am trying embed some tenant id into the customer id.
[18:26:42] <bookworm> but why?
[18:26:57] <nevivurn> Do you *have* to use UUIDs? How many bits of information is this "tenant ID"?
[18:27:07] <bodhi> so when my handlers receive the customer id I can extract from it.
[18:27:22] <bookworm> you have a uuid to the customer, that's enough to fetch the rest
[18:27:24] <bodhi> instead of hitting the DB to retrieve the tenant id.
[18:27:44] <bodhi> hmm ok.
[18:27:47] <bookworm> why can't you just send that id along then?
[18:27:55] <nevivurn> If at all possible, I would implement that by choosing a custom format that includes both pieces of information.
[18:28:00] <bookworm> why trying to concatenate that with the uuid?
[18:29:02] <bodhi> oh I wanted to construct  user id which would let me identify extrack tenant ide from it
[18:29:08] <siXy> don't.
[18:29:16] <bodhi> ok
[18:29:32] <siXy> Maintain your mapping somewhere else. Perhaps in a database of some form.
[18:29:34] <bodhi> will pass those info around them.
[18:29:34] <bookworm> yes, our point is, send a thing along like {userID: "$UUID", tenantID: "$tenantID"}
[18:30:07] <bodhi> or get it from the DB.
[18:30:54] *** Quits: __ (~far1za@user/far1za) (Quit: Leaving)
[18:30:58] <zerok> bodhi: that somehow sounds like JWT or signed cookies
[18:32:17] <nevivurn> That doesn't sound like JWTs or signed cookies to me...
[18:35:31] <zerok> nevivurn: well, conceptually,  not necessarily in the technical implementation. a "session id" that by itself contains additional information to not to have to do some additional roundtrips.
[18:35:45] <chf_> The last 12 hex digits of a UUID string are the MAC address, so technically it may work if you replace MAC address with the tenant id
[18:36:18] <nevivurn> zerok: huh, I guess you're right.
[18:36:55] <nevivurn> I haven't come across anyone using anything other than version 4 UUIDs, do people actually use the MAC-based versions?
[18:37:15] <chf_> we do sometimes
[18:37:42] <nevivurn> That's cool
[18:38:57] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:39:43] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[18:46:13] *** Joins: oxum (~oxum@136.185.133.224)
[18:47:03] <siXy> The list of horrific things people do in the name of UUIDs is long and terrible.
[18:47:54] *** Joins: hegemoOn (~netmonk@195-154-92-20.rev.poneytelecom.eu)
[18:48:11] <hegemoOn> anyone having a link where i can learn fastly golang regex ?
[18:48:22] <siXy> My favourite to date is a certain linux vendor who came up with a storage system based on lots of tiny LVM volumes, all named with UUIDs. But then realised they needed some system volumes. So naturally they then implemented the concept of a fixed UUID so that those volumes always had the same name everywhere.
[18:48:40] <hegemoOn> i need to isolate everything between 9th and 10th space in a string
[18:48:57] <siXy> hegemoOn: https://pkg.go.dev/regexp
[18:49:11] <nevivurn> If you already know regex, go doc regexp/syntax
[18:49:14] <hegemoOn> i just read that, and it doesn't help much about regexp language
[18:49:31] <siXy> https://github.com/google/re2/wiki/Syntax in that case
[18:49:45] <siXy> But you will I'm afraid have a little reading to do
[18:49:47] <hegemoOn> issue is not using regex (it's for Logql) but for building the regex
[18:51:00] *** Quits: oxum (~oxum@136.185.133.224) (Ping timeout: 276 seconds)
[18:51:40] *** Joins: atomgardner (~atomgardn@user/atomgardner)
[18:52:58] <chf_> siXy: replacing MAC in UUID v1 is not a "horrific thing" :) in fact "RFC 4122 does allow the MAC address in a version-1 (or 2) UUID to be replaced by a random 48-bit node ID, either because the node does not have a MAC address, or because it is not desirable to expose it. "
[18:53:13] *** Joins: arinov (~arinov@213.194.126.155)
[18:54:08] *** Joins: andlabs (~andlabs@71.190.119.164)
[18:58:10] *** Quits: rewt (~default@user/rewt) (*.net *.split)
[18:58:10] *** Quits: Rayke (rayke@user/rayke) (*.net *.split)
[18:58:10] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[18:58:10] *** Quits: zwr (~zwr@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091) (*.net *.split)
[18:58:10] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (*.net *.split)
[18:58:10] *** Quits: synthmeat (~synthmeat@user/synthmeat) (*.net *.split)
[18:58:10] *** Quits: huh_ (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[18:58:10] *** Quits: nebiros (nebiros@user/nebiros) (*.net *.split)
[18:58:10] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[18:58:10] *** Quits: sayo (~sayo@user/sayo) (*.net *.split)
[18:58:10] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (*.net *.split)
[18:58:10] *** Quits: avemestr (~avemestr@2a01:4f8:212:2719::2) (*.net *.split)
[18:58:10] *** Quits: fputs (~fputs@137.220.33.212) (*.net *.split)
[18:58:10] *** Quits: pez (~pez@user/pez) (*.net *.split)
[18:58:10] *** Quits: OnkelUlla (~uol@ptx.hi.pengutronix.de) (*.net *.split)
[18:58:10] *** Quits: henriquev (~henvic@user/henriquev) (*.net *.split)
[18:58:10] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[18:58:10] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[18:58:10] *** Quits: sjas (~sjas@irc.sjas.de) (*.net *.split)
[18:58:10] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[18:58:10] *** Quits: iivvoo (~l@m3r.nl) (*.net *.split)
[18:58:15] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[18:58:18] *** Joins: sjas (~sjas@irc.sjas.de)
[18:58:19] *** Joins: OnkelUlla (~uol@ptx.hi.pengutronix.de)
[18:58:21] *** Joins: nebiros (nebiros@2600:3c03::f03c:91ff:fe7e:a08a)
[18:58:23] *** Joins: zwr (~zwr@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091)
[18:58:25] *** Joins: huh_ (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de)
[18:58:28] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[18:58:28] *** Joins: Byteflux (~byte@byteflux.net)
[18:58:36] *** Quits: nebiros (nebiros@2600:3c03::f03c:91ff:fe7e:a08a) (Changing host)
[18:58:36] *** Joins: nebiros (nebiros@user/nebiros)
[18:58:39] *** Joins: pez_ (~pez@user/pez)
[18:58:40] *** Joins: iivvoo (~l@m3r.nl)
[18:58:43] *** Joins: sayo (~sayo@a89-152-29-223.cpe.netcabo.pt)
[18:58:43] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[18:58:44] *** Joins: avemestr (~avemestr@2a01:4f8:212:2719::2)
[18:58:44] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[18:58:44] *** Joins: Rayke (rayke@2600:3c03::f03c:92ff:fe86:498b)
[18:58:51] *** Joins: rewt (~default@user/rewt)
[18:58:52] *** Quits: sayo (~sayo@a89-152-29-223.cpe.netcabo.pt) (Signing in (sayo))
[18:58:52] *** Joins: sayo (~sayo@user/sayo)
[18:58:54] *** Quits: Rayke (rayke@2600:3c03::f03c:92ff:fe86:498b) (Signing in (Rayke))
[18:58:54] *** Joins: Rayke (rayke@user/rayke)
[18:59:14] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[18:59:15] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[18:59:25] *** Joins: henriquev (~henvic@user/henriquev)
[18:59:26] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[18:59:30] <siXy> chf_: v1 UUIDs are not very secure at all. But what I was describing was a UUIDs where all values were 0 or 1 or 2 etc
[19:00:04] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[19:00:18] <chf_> that's quite wrong indeed
[19:04:03] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[19:04:39] *** Quits: xvx (~s@185.48.63.111) (Ping timeout: 276 seconds)
[19:05:56] *** Joins: fputs (~fputs@137.220.33.212)
[19:06:14] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[19:07:48] *** Joins: mkopriva (~mkopriva@ip-94-113-146-145.net.upcbroadband.cz)
[19:09:27] *** Quits: atomgardner (~atomgardn@user/atomgardner) (Ping timeout: 255 seconds)
[19:10:17] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca)
[19:16:17] *** Joins: independent56 (~independe@95.144.68.40)
[19:19:28] <Tv_> of course it's a horrific thing, UUID itself is a horrific thing
[19:20:19] <Tv_> GUID/UUID has exactly two uses, depending on the flavor: Talking to ancient DCE/RPC servies, or talking to Microsoft APIs
[19:20:27] <Tv_> for everything else, a non-UUID identifier is better
[19:21:00] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c519:d7e1:27a5:dced) (Ping timeout: 256 seconds)
[19:21:30] *** Quits: bloony (~bloony@2a02:2121:108:d399:1c13:86d4:5401:6) (Ping timeout: 240 seconds)
[19:21:50] <LambdaComplex> but Tv_ what if
[19:21:52] <LambdaComplex> uhhhhhh
[19:22:02] * LambdaComplex tries to think of a good counterexample for shitposting purposes
[19:23:27] <LambdaComplex> but Tv_ what if i wanna expose the primary key of my database table as a user-facing identifier without opening myself up to enumeration attacks?
[19:23:59] <Tv_> LambdaComplex: sure! use a large key with randomness in it, go right ahead. that's not an argument for UUID, though.
[19:24:49] <LambdaComplex> does UUID v4 not fit that description?
[19:24:59] <LambdaComplex> you haven't actually made an argument against UUID yet
[19:25:03] <LambdaComplex> you've just said it's horrific
[19:25:11] <LambdaComplex> i'm interested in hearing your reasoning behind that statement
[19:25:19] <Tv_> LambdaComplex: why would you hardcode some bits and have a weird non-friendly ASCII format for no gain
[19:25:30] <Tv_> [x]byte as a key can be great
[19:25:50] <Tv_> you can stringify that with zbase32, bech32, etc for a reasonably human-friendly identifier
[19:26:08] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[19:27:06] <Tv_> current day use of UUID, outside of things using Windows APIs, is a cargo cult, kept alive by people who don't understand what they're doing
[19:27:26] <Tv_> current day use of e.g. snowflake-style large IDs is a great engineering trade-off
[19:28:01] *** Joins: xvx (~s@185.48.63.111)
[19:29:50] *** Quits: ikke (~kevin@alpine/developer/ikke) (Ping timeout: 272 seconds)
[19:31:32] <LambdaComplex> Tv_: so basically you're saying just randomly generating a [16]byte would be more reasonable than using a v4 UUID?
[19:31:48] <Tv_> LambdaComplex: random is one choice. stuffing time etc inside is another.
[19:32:20] <bookworm> if your goal is that others can't enumerate the space, time is a garbage solution
[19:32:20] <Tv_> but yes, random UUID vs random [whatever]byte, the [whatever]byte with a nice stringification has significantly better ergonomics
[19:32:45] <LambdaComplex> hm. i think at a certain point you're saying "i explicitly think these people don't understand what they're doing; i'm gonna have them securely generate a random value without following any known/well-tested standards!"
[19:32:47] <Tv_> bookworm: you might still have a lot of entropy, after a few time bits. it's all about what trade-offs make sense.
[19:32:51] <LambdaComplex> which may or may not be a bad idea
[19:33:04] <Tv_> LambdaComplex: uhh, crypto/rand?
[19:33:22] <LambdaComplex> i was talking more general than go-specific
[19:33:36] <Tv_> a programming environment either has good random numbers, or it doesn't
[19:33:55] *** Quits: jackneill (~jackneill@20014C4E1823FF0045F2A0A60407A58E.unconfigured.pool.telekom.hu) (Remote host closed the connection)
[19:33:55] <Tv_> setting a few bits to fixed values and using a silly stringified format doesn't change that
[19:34:06] *** Joins: The_Loko (~The_Loko@86.127.235.231)
[19:34:10] <Tv_> because that ^ is what UUID really does
[19:34:12] *** Joins: jackneill (~jackneill@20014C4E1823FF00E6B7BA72E5C70263.unconfigured.pool.telekom.hu)
[19:34:37] <LambdaComplex> i'm thinking more "i'm seeding with the current time because that's what all the tutorials tell me to do even though that's not actually secure"
[19:35:01] <Tv_> that seems unrelated to the format of UUID
[19:35:14] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:35:16] <Tv_> i mean, yes, if you're incompetent, please do use libraries written by someone else where you can
[19:35:52] <LambdaComplex> yes, and you explicitly said "current day use of UUID...is a cargo cult, kept alive by people who don't understand what they're doing"
[19:36:15] <LambdaComplex> sounds like the people who should be using libraries written by someone else
[19:37:00] <Tv_> sure but those are the innocent sheep, really
[19:37:15] <Tv_> the people really keeping the cargo cult alive are the ones still writing the UUID libraries
[19:37:51] *** Joins: __monty__ (~toonn@user/toonn)
[19:38:25] *** Joins: andlabs (~andlabs@71.190.119.164)
[19:39:45] <__monty__> Hi, I'm running into trouble building a packaged Go program because a dependency doesn't include a C header. I'm not familiar with Go. The dependency has been fixed upstream, what do I chance to bump the dependency version?
[19:39:48] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[19:41:40] *** Joins: arcatech (~arcatech@user/arcatech)
[19:42:32] *** Quits: gggpkm (~gggpkm@123.113.178.134) (Ping timeout: 256 seconds)
[19:43:34] *** Quits: Jigsy (~Jigsy@user/jigsy) (Read error: Connection reset by peer)
[19:43:39] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 276 seconds)
[19:45:03] <Tv_> __monty__: go get github.com/that/dependency@latest
[19:45:06] *** Joins: Jigsy (~Jigsy@user/jigsy)
[19:45:52] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:45:57] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[19:46:15] *** Joins: independent56 (~independe@95.144.68.40)
[19:48:32] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:52:29] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:52:29] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[19:53:17] *** Joins: andlabs (~andlabs@71.190.119.164)
[19:55:06] *** Joins: gggpkm (~gggpkm@221.219.70.176)
[19:55:48] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Ping timeout: 255 seconds)
[19:56:05] *** Joins: ikke (~kevin@alpine/developer/ikke)
[19:56:37] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[20:00:10] *** Quits: doug_ (~doug_@cpe-172-250-106-85.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:00:58] *** Quits: keiser009107585 (~keiser@83.25.211.170.ipv4.supernova.orange.pl) (Quit: The Lounge - https://thelounge.chat)
[20:01:05] *** Joins: doug_ (~doug_@cpe-172-250-106-85.socal.res.rr.com)
[20:01:10] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[20:01:18] *** Joins: gggpkm_ (~gggpkm@221.219.75.196)
[20:02:07] *** Joins: keiser009107585 (~keiser@83.25.211.170.ipv4.supernova.orange.pl)
[20:03:52] *** Quits: gggpkm (~gggpkm@221.219.70.176) (Ping timeout: 245 seconds)
[20:06:50] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[20:07:52] *** Joins: hexfive (~eric@50.35.83.177)
[20:09:57] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[20:10:15] *** Joins: independent56 (~independe@95.144.68.40)
[20:11:06] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 255 seconds)
[20:12:33] <siXy> LambdaComplex: For reference, do _not_ use UUIDs as database keys. They're huge, and they index really poorly. And this applies 1000x to most distributed databases.
[20:13:02] <LambdaComplex> i know that and you know that but the devs where i work? i don't think they know that :^)
[20:13:15] *** Joins: jespada (~jespada@90.254.247.46)
[20:13:27] <LambdaComplex> also i'm surprised nobody told me that exposing the primary key as a user-facing identifier was a bad idea
[20:13:33] * LambdaComplex will wait patiently for someone to do that
[20:16:32] *** Quits: souvik (~souvik@103.199.182.241) (Ping timeout: 256 seconds)
[20:19:29] *** Joins: souvik (~souvik@47.11.66.14)
[20:25:25] *** Joins: Kane (~Kane@home.yarg.fr)
[20:26:38] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[20:33:06] *** Joins: frm (~frm@user/frm)
[20:33:30] *** Quits: frm (~frm@user/frm) (Client Quit)
[20:33:48] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:33:54] *** Joins: arcatech (~arcatech@user/arcatech)
[20:36:52] *** Quits: doug_ (~doug_@cpe-172-250-106-85.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:40:11] *** Joins: doug_ (~doug_@cpe-172-250-106-85.socal.res.rr.com)
[20:42:42] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[20:43:06] *** Joins: independent56 (~independe@95.144.68.40)
[20:44:33] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca)
[20:45:49] *** Joins: gggpkm (~gggpkm@111.63.14.117)
[20:47:42] *** Joins: pepee (~user@user/pepee)
[20:47:44] *** Quits: gggpkm_ (~gggpkm@221.219.75.196) (Ping timeout: 272 seconds)
[20:50:29] *** Quits: chf_ (~chf_@213.144.147.254) (Quit: leaving)
[20:53:17] *** Quits: independent56 (~independe@95.144.68.40) (Remote host closed the connection)
[20:53:36] *** Joins: independent56 (~independe@95.144.68.40)
[20:54:07] *** Joins: c4rc4s (~c4rc4s@user/c4rc4s)
[21:01:00] *** Joins: PichuChen (~PichuChen@36-230-112-194.dynamic-ip.hinet.net)
[21:02:06] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:68b5:765c:8e88:1eca) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:03:27] *** Joins: mmm4m5m (~mmm@85.196.177.9)
[21:03:35] <Tv_> "it depends"
[21:03:50] <Tv_> rest assured twitter does not have a separate hidden integer primary key for tweets
[21:06:31] <LambdaComplex> i'll take it
[21:10:41] *** Quits: PichuChen (~PichuChen@36-230-112-194.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:11:39] <jemaclus> I'm a fan of Snowflake IDs
[21:11:59] <jemaclus> https://developer.twitter.com/en/docs/twitter-ids
[21:12:57] <jemaclus> they're roughly sortable 64 bit integers. there's a time component to the ID, which makes them roughly sortable. (realistically for most of us, totally sortable)
[21:13:01] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[21:13:14] <jemaclus> but they aren't sequential, which can mitigate some of the security concerns around auto-incrementing ids
[21:13:18] *** Joins: gggpkm_ (~gggpkm@60.10.23.164)
[21:15:32] *** Joins: oxum (~oxum@136.185.133.224)
[21:15:41] *** Quits: oxum (~oxum@136.185.133.224) (Remote host closed the connection)
[21:16:36] *** Quits: gggpkm (~gggpkm@111.63.14.117) (Ping timeout: 276 seconds)
[21:17:42] *** Quits: gggpkm_ (~gggpkm@60.10.23.164) (Ping timeout: 255 seconds)
[21:20:59] *** Joins: hposca (~hposca@node-1w7jr9phoke2td1e507xtdn5o.ipv6.telus.net)
[21:23:26] <Tv_> note: original conversation was about non-discoverability. 64-bit is still dense enough to probe.
[21:23:41] *** Joins: independent_ (~independe@95.144.68.40)
[21:23:41] <Tv_> but the concept stretches easily to whatever size is called for (once you let go of the uuid cargo cult)
[21:24:31] <jemaclus> Yep, exactly. No reason you couldn't have 128-bit snowflake IDs
[21:24:58] <jemaclus> I hate UUIDs as a rule.
[21:25:36] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:25:43] <Tv_> fwiw if all you want is to obscure 64-bit sql ids to avoid people guessing +1 or seeing your user count, xtea cipher blocksize is 64 bits...
[21:25:55] <Tv_> i've written the code already too, ended up not using it ;)
[21:27:00] *** Quits: independent56 (~independe@95.144.68.40) (Ping timeout: 276 seconds)
[21:29:28] <jemaclus> haha, yeah.
[21:29:43] <jemaclus> Snowflake ID generation code is like 30 lines, too. pretty simple.
[21:30:42] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[21:32:13] <mmm4m5m> Hi all. I am trying empty flutter application (hello world) with go-flutter - desktop build (debian). "hover run" return this error:
[21:32:13] <mmm4m5m> "GLFW: An invalid error was not accepted by the caller: FormatUnavailable: EGL: Failed to find a suitable EGLConfig"
[21:32:18] *** Joins: andlabs (~andlabs@71.190.119.164)
[21:32:32] *** Parts: thunfisch (~thunfisch@user/thunfisch) (frrrp!)
[21:33:10] *** Joins: vilhelmbergsoe (~vb@xb90f48c9.cust.hiper.dk)
[21:33:31] <mmm4m5m> No idea if this is the right place to ask :-/
[21:33:47] <siXy> whoa. xtea. there's a thing I haven't seen in a while
[21:35:01] <Tv_> siXy: not many 8-byte block ciphers around
[21:35:21] <siXy> fair
[21:36:19] <Tv_> but basically if you google "obscuring database id" you'll find a ton of old "co-prime" whatnot things that sort of work, but neglect to mention they're for the 16-bit or 32-bit world, and for 64-bits you can just use a much saner crypto algo and not have to worry about collisions
[21:37:24] <Tv_> my motivation for that was to lazily expose postgres ids (*gasp*) but hide user growth etc
[21:37:28] <siXy> mmm4m5m: Do you have an nvidia GPU by any chance?
[21:38:25] <mmm4m5m> siXy: NVIDIA Corporation GF108 [GeForce GT 730] (rev a1)
[21:39:40] <mmm4m5m> siXy: Now switching from flutter master to flutter beta and upgrading... Maybe it will helps.
[21:39:52] <siXy> mmm4m5m: Yeah. The nvidia linux drivers replace a bunch of the regular display stack, and not all software appreciates this amount of lobotomy. export LIBGL_ALWAYS_SOFTWARE=true; ./myapp might work.
[21:40:10] <siXy> (or just LIBGL_ALWAYS_SOFTWARE=true ./myapp )
[21:42:40] <siXy> there's a bunch of issues on the flutter issue tracker too - https://github.com/flutter/flutter/issues/59960 and https://github.com/flutter/flutter/issues/59738 might help
[21:43:10] <siXy> switching to noveau rather than the nvidia driver might also be worth a shot.
[21:46:22] *** Quits: souvik (~souvik@47.11.66.14) (Read error: Connection reset by peer)
[21:47:11] <mmm4m5m> "flutter run -d linux" ends with "glGetString(GL_VERSION) failed" and pending issue from 2 weeks ago
[21:47:11] <mmm4m5m> I was hoping that hover (go-flutter) will work. Hover return the same error with LIBGL_ALWAYS_SOFTWARE
[21:47:11] <mmm4m5m> It is all very new to me. I feel like lost. Have to research and read more.
[21:47:59] *** Joins: souvik (~souvik@47.11.87.136)
[21:48:07] <siXy> if it helps any, it's not a problem with your code - it's just that desktop linux is, and likely will always be, a bit of a crapshoot
[21:48:13] <mmm4m5m> siXy: Maybe I will switch the driver and try it
[21:48:26] * siXy says, having typed this on a linux laptop...
[21:48:27] *** Parts: vilhelmbergsoe (~vb@xb90f48c9.cust.hiper.dk) ()
[21:48:34] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[21:49:32] <mmm4m5m> siXy: :) thanks for the help
[21:49:37] *** Quits: independent_ (~independe@95.144.68.40) (Remote host closed the connection)
[21:49:55] *** Joins: independent_ (~independe@95.144.68.40)
[21:55:30] *** Quits: souvik (~souvik@47.11.87.136) (Read error: Connection reset by peer)
[21:57:31] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[21:57:45] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[21:58:44] *** Joins: souvik (~souvik@103.199.182.63)
[22:00:07] *** Quits: Xjs (~jannis@user/xjs) (Quit: Bye.)
[22:00:21] <ikke> read a bit up on go modules
[22:01:02] *** Joins: noxim23 (~noxim@user/noxim)
[22:03:10] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 246 seconds)
[22:03:44] *** Joins: Xjs (~jannis@user/xjs)
[22:04:34] *** Joins: larkfisherman (~pasko@178.77.33.159)
[22:04:56] *** Quits: xvx (~s@185.48.63.111) (Quit: Konversation terminated!)
[22:07:48] <Tv_> siXy: 3d accel is a wholly separate pain though
[22:08:07] <Tv_> one the linux community is fundamentally unable to fix, because somebody has piled up too much money
[22:11:49] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[22:13:26] *** Quits: l2dy (~l2dy@user/l2dy) (Ping timeout: 252 seconds)
[22:14:30] *** Quits: larkfisherman (~pasko@178.77.33.159) (Quit: Konversation terminated!)
[22:17:43] *** Joins: menace (~someone@2001:a61:35bf:bb01:c919:6410:19e9:99cd)
[22:17:43] *** Quits: menace (~someone@2001:a61:35bf:bb01:c919:6410:19e9:99cd) (Changing host)
[22:17:43] *** Joins: menace (~someone@user/menace)
[22:21:30] *** Joins: l2dy (~l2dy@user/l2dy)
[22:28:21] *** Joins: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[22:28:47] <lungaro> if I want to run my own godoc server for internal repos, what's the best way? Is it possible to also support branches?
[22:31:30] <Tv_> godoc itself understands nothing about branches afaik
[22:32:14] <lungaro> yeah, i'm thinking I might just script up a static generator that publishes to a path w/ a specific revision
[22:32:19] <Tv_> not sure how hard the code for pkg.go.dev is to self-host, these days. my understanding is that (after a heavy community badgering which should never have been needed), they rewrote it from google internals to just using a postgres db
[22:32:26] <lungaro> but it seems like we should have better tools =P
[22:32:43] <Tv_> i fully expect nobody to maintain godoc or gddo anymore
[22:32:48] <lungaro> yeah
[22:33:00] <Tv_> (there's a fork of gddo out there, by the sourcehut guy)
[22:33:10] <Tv_> (but gddo is a nasty pile too)
[22:34:39] <lungaro> https://github.com/princjef/gomarkdoc hmmm might not be a bad approach
[22:40:04] *** Quits: fub (uid190747@id-190747.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[22:40:07] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 245 seconds)
[22:40:31] *** Quits: pinpox (~pinpox@v2202101107577140883.nicesrv.de) (Quit: The Lounge - https://thelounge.chat)
[22:40:55] *** Joins: pinpox (~pinpox@v2202101107577140883.nicesrv.de)
[22:43:04] *** Quits: noxim23 (~noxim@user/noxim) (Ping timeout: 246 seconds)
[22:55:57] *** Quits: ikke (~kevin@alpine/developer/ikke) (Ping timeout: 245 seconds)
[23:05:24] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (Ping timeout: 256 seconds)
[23:05:48] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[23:06:18] <__monty__> Tv_: Thank you. I needed to update the vendoring too but the command guided me through it.
[23:06:35] *** Joins: ikke (~kevin@alpine/developer/ikke)
[23:09:41] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[23:11:06] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:19:37] *** Quits: independent_ (~independe@95.144.68.40) (Remote host closed the connection)
[23:20:06] *** Quits: ikke (~kevin@alpine/developer/ikke) (Ping timeout: 255 seconds)
[23:22:46] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[23:24:01] <acagastya> Hi, just like how it is possible to take as many parameters as sent for a function by something like this `func foo(arr ...string) []string {...}`, can a function also return values like that?
[23:25:03] <acagastya> So instead of doing `res := foo(arr); someVar := res[0]; somethingElse := res[1];` I can simply do `someVar, somethingElse := foo(arr)`?
[23:25:38] *** Parts: __monty__ (~toonn@user/toonn) ()
[23:27:08] <fizzie> No, you can't. If it's guaranteed to return exactly a pair of strings in all cases, though, maybe it should be declared with a return type of `(string, string)` or `(foo, bar string)` instead of `[]string` anyway.
[23:27:16] *** Joins: lauraaah (uid156848@id-156848.charlton.irccloud.com)
[23:30:37] <fizzie> One kind of fundamental difference there is, packing any number of strings into a []string can't fail (no matter how many arguments you pass, they can always be wrapped in a slice), but unpacking a []string into a specific number can. What should `someVar, somethingElse := foo(arr)` do if the slice returned by the function didn't have exactly 2 elements? Well, it could panic, but that's just
[23:30:39] <fizzie> encouraging people to omit error handling.
[23:31:51] <acagastya> It is not guaranteed to be just two -- could be any number.
[23:32:15] *** Joins: ikke (~kevin@alpine/developer/ikke)
[23:33:22] <fizzie> (That said, it might be nice to be able to unpack the results of something like regexp.Regexp.FindStringSubmatch without explicitly involving a slice.)
[23:34:37] <acagastya> And I would assume there is no shorter way of writing this `res := foo(arr); someVar := res[0]; somethingElse := res[1];` right?
[23:35:04] *** zopsi_ is now known as zopsi
[23:35:07] <fizzie> You can merge the last two statements into `someVar, somethingElse := res[0], res[1]` if you think it's an improvement.
[23:35:16] <fizzie> And not really a serious suggestion, but there *is* always the possibility of writing a local `func unpackTwo(res []string) (a, b string) { a, b = res[0], res[1]; return }` which would allow you to write `someVar, somethingElse := unpackTwo(foo(arr))`.
[23:35:53] <acagastya> Ah.
[23:36:09] <acagastya> But I could also do `unpack(len, arr)`, right?
[23:36:20] <acagastya> That might come handy!
[23:36:39] <fizzie> What would `unpack(len, arr)` return exactly?
[23:37:22] <acagastya> No, maybe that might not work because length needs to be known.
[23:37:42] *** Quits: ikke (~kevin@alpine/developer/ikke) (Ping timeout: 256 seconds)
[23:38:45] <acagastya> How could I improve this func, any suggestions?  https://play.golang.org/p/wfdQgdlyCaH
[23:41:27] *** Joins: noonien (~noonien@user/noonien)
[23:44:02] <siXy> I'm not sure it really adds much over just doing os.Getenv directly, but otherwise it's fine
[23:46:21] <acagastya> The envvars comes from .env file and I have to use it in many functions.  And it seems too much repetition.  Unless loading .env file once, in any function ensures all variables are available throughout all other functions.
[23:47:47] <fizzie> That sounds like something you'd load in main before doing anything else, if it's supposed to override values returned by os.Getenv.
[23:48:05] <fizzie> https://pkg.go.dev/github.com/joho/godotenv#Load "Call this function as close as possible to the start of your program (ideally in main)". Assuming it's that one.
[23:48:15] <siXy> they aren't really env vars if you're loading them from a file though? why not just read the file directly and skip all this env stuff?
[23:48:27] *** Joins: independent56 (~independe@95.144.68.40)
[23:48:45] <fizzie> I guess the idea's to merge a file with possible overrides from the actual environment?
[23:48:58] <fizzie> (That godoc page says it won't override anything that's already set.)
[23:49:08] <independent56> I actually like golang more then rust. It is much easier to start coding and to learn.
[23:49:23] <independent56> as easy as pure kotlin, but more powerful
[23:50:12] *** Joins: ikke (~kevin@alpine/developer/ikke)
[23:55:19] *** Joins: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[23:56:40] <acagastya> If there is a way to read from file which is as simple and clean as this, I would consider that.
[23:59:11] <acagastya> I actually would not even bother with a .env file and create something equivalent of #default; but I am used to that pattern in Node.JS and don't know the best way to handle it here.
