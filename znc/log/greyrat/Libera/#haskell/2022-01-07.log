[00:00:42] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:00:51] <travv0> > > IM.fromList (zip [0..] [0.100000000])
[00:00:52] <lambdabot>  <hint>:1:1: error: parse error on input ‘>’
[00:00:57] <travv0> > IM.fromList (zip [0..] [0.100000000])
[00:00:58] <lambdabot>  fromList [(0,0.1)]
[00:01:03] <travv0> was that intentional?
[00:01:11] <monochrom> Oh haha, good eyes.
[00:01:12] <EvanR> no
[00:01:14] <EvanR> wth
[00:01:50] <EvanR> > IM.intersection IM.empty (IM.fromList (zip [0..] [0..100000000]))
[00:01:52] <lambdabot>  fromList []
[00:02:04] <EvanR> > IM.intersection (IM.singleton 4 9) (IM.fromList (zip [0..] [0..100000000]))
[00:02:09] <EvanR> dammit
[00:02:10] <lambdabot>  mueval-core: Time limit exceeded
[00:02:15] <xerox> [0.100000] is the break;break; of haskell
[00:03:27] *** Joins: gentauro (~gentauro@user/gentauro)
[00:04:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:04:15] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:04:15] *** Joins: wroathe (~wroathe@user/wroathe)
[00:04:24] <EvanR> I guess in the case of small intmap it's better to use a mapWithKey and lookup
[00:05:49] *** Quits: python476 (~user@88.160.31.174) (Ping timeout: 240 seconds)
[00:09:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[00:13:11] <dmj`> are there no ffi bindings to libc? 
[00:14:22] <Hecate> gnu libc? sweet hell you don't want that :')
[00:14:42] <polyphem> strcpy is nice
[00:14:43] *** Joins: deadmarshal (~deadmarsh@95.38.116.103)
[00:14:53] <EvanR> it's pretty easy to ffi bind individual standard c functions
[00:15:14] <EvanR> if you need 1 or 2
[00:15:56] <EvanR> I can't wait until my haskell program has security hole due to strcpy xD
[00:24:15] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Remote host closed the connection)
[00:28:06] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:29:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:31:01] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[00:32:06] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[00:33:16] *** Joins: pavonia (~user@user/siracusa)
[00:34:23] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[00:34:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[00:34:44] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:36:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:40:28] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[00:41:03] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:43:26] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:44:08] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:44:35] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[00:45:24] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[00:45:32] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Remote host closed the connection)
[00:46:59] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d) (Remote host closed the connection)
[00:50:08] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:52:38] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:52:52] *** Quits: `2jt (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Remote host closed the connection)
[00:55:02] <fendor[m]> I miss the bot that reported that a library had a new release ☹️
[00:55:24] <int-e> that was hackagebot, hmm
[00:56:16] <int-e> (maybe I misremember the nick)
[00:56:25] <geekosaur> it was hackagebot
[00:56:29] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[00:56:44] <geekosaur> vanished maybe a month before freenode blew up
[00:57:30] *** Joins: emf (~emf@2620:10d:c090:400::5:9fd9)
[00:58:30] <geekosaur> always reported with /me, iirc
[01:02:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:02:14] *** Joins: cheater (~Username@user/cheater)
[01:04:48] *** Quits: k` (~user@152.1.137.158) (Remote host closed the connection)
[01:05:10] *** Joins: dudek (~dudek@185.150.236.156)
[01:07:21] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[01:08:37] <dmj`> If GHC lost existential types, how sorely would they be missed
[01:09:16] <maralorn> What is the most common List/Seq like datatype which is strict in the elements?
[01:09:33] <Heffalump[m]> dmj': Lose what exactly? Just the exists keyword, or existentials via GADTs?
[01:10:38] <Cale> Or like, the syntax that uses forall in a data declaration outside a constructor?
[01:11:25] *** Joins: benin (~benin@183.82.176.241)
[01:11:57] <Cale> We get a decent amount of use out of Some.
[01:12:03] <Cale> (i.e. https://hackage.haskell.org/package/some-1.0.3/docs/Data-Some.html )
[01:12:23] <Cale> Ironically, it's not defined using existentials :D
[01:13:15] <EvanR> oh nice
[01:13:29] <Cale> (It originally was, but was changed to be a newtype along with pattern synonyms that safely unsafeCoerce)
[01:15:03] <Cale> But the only reason for that is that you're not allowed to define existential newtypes in GHC for no particular reason
[01:17:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:17:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:17:37] *** Joins: wroathe (~wroathe@user/wroathe)
[01:18:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[01:18:44] <EvanR> I just ran into that, it's very annoying
[01:18:47] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7271e249cd77df40fde183d.dip0.t-ipconnect.de)
[01:18:51] *** Joins: acidjnk (~acidjnk@p200300d0c7271e249cd77df40fde183d.dip0.t-ipconnect.de)
[01:18:57] <EvanR> I see you can get around it with GHC.Any
[01:20:37] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[01:20:46] <Cale> Of course, if you need a class dictionary packed in there, that's not possible with a newtype
[01:23:42] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[01:26:13] <monochrom> If GHC lost existential types, we would restore it with rank-2 types.
[01:26:23] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[01:27:07] <monochrom> I don't think of existential typing as an anti-pattern, but even if you do, a direct anti-pattern is still less bad than an encoded anti-pattern.
[01:27:54] <xerox> not an existential threat
[01:28:09] <monochrom> haha
[01:30:52] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[01:43:25] *** Joins: shapr (~user@2601:7c0:c202:5190:e39f:2980:57ec:6939)
[01:44:55] <dmj`> Cale, Heffalump[m]: I think if we lost existentials, it'd be a loss of existential quantification, existentials introduced via GADTs, polymorphic recursion and maybe RankNTypes too ...
[01:45:06] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:45:28] <Heffalump[m]> dmj`: I'd be very very unhappy then :-)
[01:46:01] <dmj`> Heffalump[m]: on a scale of 1-10, how unhappy would you be
[01:47:39] <geekosaur> don't we lose IO then? (IO being built on top of ST which uses an existential)
[01:47:45] <shapr> dmj`: existential crisis?
[01:48:07] <geekosaur> yeh, methinks this sounds like sa very violent reaction to something
[01:49:04] <dmj`> geekosaur: didn't we have I/O before existentials? I don't see them in the haskell 2010 report at least. 
[01:49:11] <dmj`> maybe I'm blind though
[01:49:51] <Heffalump[m]> I don't think GHC's implementation of the Prelude has ever been pure H98/H2010. It is entitled to use extensions (or the old "-fglasgow-exts") internally to its own libraries.
[01:50:03] <monochrom> runST needs rank-2 or existential. But IO does not have to go through ST.
[01:52:38] <geekosaur> I guess IO is the same machinery but uses a non-existential in place of the existential
[01:52:57] <geekosaur> this still sounds pretty violent to me
[01:55:05] <monochrom> If you lose rank-2, then you lose "(Functor f, Monad g) => (forall x. f x -> g x) -> Free f a -> g a", which is a very important thing for free monads.
[01:55:44] <monochrom> You lose all of lens and optics etc.
[01:55:49] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:57:34] <monochrom> "violent" is not the first response that comes to my mind, but "dumbing down", "watering down", "back to stone age" is.
[01:57:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:57:51] <dmj`> monochrom:  It might be possible to retain RankNTypes w/o existentials... but one could argue lens and optics were solutions to get around GHC's record system lacking row polymorphism.
[01:58:25] <dmj`> monochrom: but yea, you'd lose monad morphism libraries
[01:59:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[02:01:29] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[02:01:37] <monochrom> "data X = forall a. MkX foo" ≅ "newtype Y = MkY (forall r. (forall a. foo -> r) -> r)"
[02:02:20] *** Joins: hyiltiz (~quassel@31.220.5.250)
[02:03:52] <dmj`> existentials also block monomorphization from happening iiuc
[02:07:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:07:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:07:36] *** Joins: wroathe (~wroathe@user/wroathe)
[02:08:42] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[02:11:09] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[02:11:48] <dmj`> monochrom: oh okay, maybe not then
[02:12:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[02:13:55] <dmj`> existentials inhibit type inference too
[02:14:28] <[itchyjunk]> Is a list of empty tupils represented as [(,)] ? or just []
[02:14:46] <geekosaur> [] like any other empty list
[02:14:55] <[itchyjunk]> makes sense
[02:15:02] <geekosaur> (,) is a tuple constructor
[02:15:04] <geekosaur> :t (,)
[02:15:06] <lambdabot> a -> b -> (a, b)
[02:15:08] *** Joins: hyiltiz (~quassel@31.220.5.250)
[02:15:15] <Heffalump[m]> what exactly do you mean by "empty tuple"? Do you mean "List of empty tuples" or "Empty list of tuples"?
[02:16:59] <kuribas> [itchyjunk]: the type or the value?
[02:17:09] <[itchyjunk]> the value
[02:17:37] *** Quits: deadmarshal (~deadmarsh@95.38.116.103) (Ping timeout: 240 seconds)
[02:17:42] <kuribas> [] is a an empty list of tuples.
[02:18:00] <kuribas> I don't know what an "empty tuple" is.
[02:18:02] <dmj`> shapr: it would be an existential crisis :) 
[02:18:05] <geekosaur> ()
[02:18:47] <monochrom> The empty tuple is (), aka unit.
[02:19:06] <monochrom> [(), (), (), ()] is an example list of empty tuples.
[02:19:14] <[itchyjunk]> this seems to work but i am unsure about sizes of [a] [b]
[02:19:15] <[itchyjunk]> https://bpa.st/GWEQ
[02:19:24] <monochrom> Not to be confused with empty list of tuples.
[02:19:24] <[itchyjunk]> Do I just assume the size provided is always equal?
[02:19:52] <geekosaur> try it out with both the Prelude's zip and yours
[02:20:05] *** Quits: kuribas (~user@ptr-25vy0i9v3nmgstpk1ug.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[02:20:16] <geekosaur> (you can make a smallish change which removes that requirement)
[02:20:25] <[itchyjunk]> uh my breaks , but the zip works
[02:21:05] <[itchyjunk]> i think i know, myZip [a] [] amd myZip [] [b] should be addressed mamybe
[02:21:16] <geekosaur> almost
[02:21:26] <geekosaur> [a] matches the 1-item list
[02:21:42] <[itchyjunk]> ah
[02:21:56] <[itchyjunk]> myZip x [] and myZip [] y maybe
[02:22:06] <geekosaur> yes
[02:22:22] <geekosaur> and for the final trick, most of us would write _ in place of the binding that won't be used
[02:22:23] <Inst> can i have some haskell help with a really stupid example?
[02:22:33] <[itchyjunk]> hurrah, myZip = Zip now, i think
[02:22:45] <geekosaur> Inst, don't ask to ask, just ask
[02:22:55] <[itchyjunk]> ah myZip _ [] = []
[02:23:01] <Inst> quicksort a@(x:xs) =  ((if null a then [] else quicksort [ k | k <- xs , k <= x ] ++ [x] ++ quicksort [k | k <- xs ,  k>x]) :: Ord a => [a])
[02:23:06] <Inst> this isn't typechecking properly
[02:23:59] <Inst> so i know you can force a type signature on a specific expression
[02:24:01] <Inst> https://cdn.discordapp.com/attachments/505367988166197268/928781846425247795/unknown.png
[02:24:22] <Inst> but this is really complex, 1, 2, it's not working with an inline type signature
[02:24:26] <geekosaur> you can but it doesn't generally do what you think
[02:24:33] <Inst> why not?
[02:24:54] <Inst> EvanR, might you be interested in helping?
[02:25:01] <geekosaur> the `a` you use there is not related to any other `a` and in particuloar not to one in your type signature if any
[02:25:24] <geekosaur> (unless you use ScopedTypeVariables and "declare" the type variables as shared)
[02:26:21] <geekosaur> so basically6 you can use type ascriptions anywhere but they're not very useful unless concrete, i.e. no type variables
[02:26:30] <Inst> i took the type signature out, i'm just treating it as an exercise to figure out how to arbitrarily jam type signatures
[02:26:42] <Inst> okay, hold on
[02:26:53] *** Joins: jakalx (~jakalx@base.jakalx.net)
[02:27:26] <Inst> it works if i force Int
[02:28:21] <geekosaur> right
[02:28:31] <Inst> why is this, geekosaur? I really don't get why Haskell wants to be this way
[02:28:43] <geekosaur> because that's how it was defined
[02:29:06] <geekosaur> there are a bunch of people who wish it hadn't been, but that's what happened. you need an extension and a forall to change it
[02:29:15] <geekosaur> I already mentioed the extension above
[02:29:15] <Inst> no, but wouldn't it be more flexible if you could use the 5 liner bubblesort and have it be completely complete, including through the use of a type variable type signature?
[02:29:22] <Inst> i see
[02:29:25] <Inst> i don't really understand
[02:29:53] <monochrom> You can always write a top-level type sig, instead of local type sigs.
[02:31:01] <dmj`> Inst: a@(x:xs) will never match on the empty list, so null a will never be called, it will pattern match failure instead
[02:31:13] <Inst> thanks
[02:32:32] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[02:33:52] *** Joins: deadmarshal (~deadmarsh@95.38.112.110)
[02:33:54] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:34:25] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[02:34:52] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:35:51] <Inst> monochrom: more about flexing
[02:36:00] <dmj`> geekosaur: fclabels didn't need existentials :) 
[02:37:14] <monochrom> What did fclabels need?
[02:37:35] <Inst> gah, maybe i'll try again later
[02:37:36] <Inst> too tired
[02:38:14] <dmj`> monochrom: nothing basically, but chooses to use TypeOperators
[02:44:12] <[itchyjunk]> myMap :: (a -> b) -> [a] -> [b], does this type signature look okay?
[02:44:31] <monochrom> Yes.
[02:44:42] <[itchyjunk]> I don't understand the error I am getting : https://bpa.st/Z42Q
[02:45:24] <monochrom> Cannot reproduce.
[02:45:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[02:46:56] <geekosaur> I feel like you used parentheses where you weren't supposed to. Show how you're invoking it?
[02:47:15] <[itchyjunk]> *Main> myMap +1 [1..5]
[02:47:21] <[itchyjunk]> :x
[02:47:25] <monochrom> myMap (+ 1) [1..5]
[02:47:26] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Remote host closed the connection)
[02:47:28] <sonny> section requires parens right?
[02:47:38] <[itchyjunk]> what's section?
[02:47:43] <[itchyjunk]> hmm was that the only issue?
[02:47:43] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[02:47:44] <sonny> +1
[02:47:47] <monochrom> (+ 1) and (1 +)
[02:47:59] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:48:01] <sonny> not sure how to describe it
[02:48:02] <[itchyjunk]> wow, so the code was right and i used it wrong :<
[02:48:03] <monochrom> > map (+ 1) [1..5]
[02:48:04] <lambdabot>  [2,3,4,5,6]
[02:48:21] <sonny> haskell does give you that confident feeling ;)
[02:48:27] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[02:48:39] <geekosaur> a section is a partially applied operator. It requires parentheses to distinguish it from a normal application
[02:48:39] *** Quits: max22- (~maxime@2a01cb0883359800b8731b08b5ca29d9.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:48:49] <geekosaur> so `map + 1` looks like adding 1 to the function map
[02:49:07] <geekosaur> but `map (+1)` is mapping a partially applied addition operator
[02:50:19] <geekosaur> (spaces are not relevant here)
[02:50:31] <geekosaur> :t map +1
[02:50:32] <lambdabot> Num ((a -> b) -> [a] -> [b]) => (a -> b) -> [a] -> [b]
[02:50:53] <geekosaur> not the weird constraint
[02:50:56] <geekosaur> *note
[02:51:11] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[02:51:19] <[itchyjunk]> ah
[02:52:05] <sonny> [itchyjunk] what's =>
[02:53:14] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:53:14] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:53:14] *** Joins: wroathe (~wroathe@user/wroathe)
[02:54:13] *** Quits: deadmarshal (~deadmarsh@95.38.112.110) (Ping timeout: 256 seconds)
[02:54:53] <[itchyjunk]> in the type signatuer? i haven't learned the constraint stuff yet xD
[02:55:14] <[itchyjunk]> you can apply constraints to the function with it
[02:55:20] <[itchyjunk]> i think
[02:55:46] <geekosaur> in this case it would be asserting that the type of `map` must have a Num instance (which it doesn't, being a function)
[02:55:47] <Heffalump[m]> A simpler example of something with a constraint is
[02:55:47] <Heffalump[m]> (+) :: Num a => a -> a -> a
[02:56:15] <Heffalump[m]> which just says "+" works on any type that happens to be an instance of the Num class.
[02:56:17] <geekosaur> Haskell will happily let you do that right up until you try to use it and it discovers there is no Num instance for that type
[02:56:38] <[itchyjunk]> ah
[02:57:11] <geekosaur> anyway, Num is what lets us treat Int, Integer, Float, and Double (and some others) the same way instead of having to have separate addition and multiplication operators for each
[02:57:13] <sonny> ok, so Num is the typeclass?
[02:57:32] *** Joins: polyphem_ (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a)
[02:57:40] <geekosaur> SML used to require a different addition operator for floats and doubles, which was pretty icky
[02:57:53] <sonny> yeah, that's really strict
[02:57:55] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Quit: leaving)
[02:57:59] <geekosaur> `1 + 2`, but `1.0 +. 2.0`
[02:58:44] *** Quits: polyphem (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a) (Ping timeout: 252 seconds)
[02:59:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:59:15] <[itchyjunk]> Num is an interface iirc
[02:59:38] <geekosaur> not quite, but somewhat close
[03:00:03] <[itchyjunk]> I am still stuck with keeping a counter through recursion
[03:00:08] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[03:00:15] <monochrom> Don't keep a counter.
[03:00:28] <[itchyjunk]> i wany a myTupels :: [a] -> [(Int,a)] where the int represents the position of each element
[03:00:55] <Heffalump[m]> this is a standard idiom: zip [1..] xs
[03:00:55] <geekosaur> think about it differently
[03:00:56] <sonny> monochrom it's the accumulator
[03:00:59] <monochrom> Oh OK, keep a counter.
[03:01:18] <[itchyjunk]> hmm i'll try thinking about it differently
[03:01:48] <[itchyjunk]> i was thinking : myTuples (x:xs) = (count,x) : myTuples xs might work if i could keep track of count but i'd have to pass that around which isn't ideal
[03:01:53] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[03:02:34] <monochrom> If you know how to achieve "f n = [n, n+1, n+2, ...]", it is the same idea.
[03:02:56] <[itchyjunk]> hmm, idk if i do. guess i'll do that first
[03:03:04] <[itchyjunk]> oh wait
[03:03:07] <monochrom> You will have to "pass that around".
[03:04:03] <geekosaur> there's an idiom for that too. foo xs = go 0 xs where go cnt [] = ...; go cnt (x:xs) = ...
[03:04:34] <geekosaur> and on recursion you add 1 to the cnt you pass to the recursive call
[03:04:59] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[03:05:35] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[03:05:40] <[itchyjunk]> hmm f :: Int -> [Int]
[03:05:40] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Client Quit)
[03:05:50] <[itchyjunk]> f x = x : f (x+1), i thought this might work.
[03:05:56] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[03:06:15] <geekosaur> it might, depending on what you intend "work" to be
[03:06:34] <[itchyjunk]> <interactive>:16:1: error: Variable not in scope: f :: Integer -> t
[03:06:36] <geekosaur> > let f x = x : f (x+1) in take 5 (f 4)
[03:06:37] <lambdabot>  [4,5,6,7,8]
[03:06:44] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:06:50] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[03:07:31] <geekosaur> show what you actually did to get that error
[03:07:59] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:08:20] <[itchyjunk]> https://bpa.st/WPWQ
[03:08:46] <geekosaur> you're being bitten by ghci
[03:08:54] <[itchyjunk]> hmm
[03:09:01] <geekosaur> you need to enter the type signature and the function on the same line, with a semicolon between them
[03:09:15] <geekosaur> ghci can't tell you're going to enter the actual function next
[03:09:25] <[itchyjunk]> ah let me do it in a file as always
[03:09:34] <Axman6> or you can use :{ to start a multi line definition and :} to close it
[03:09:41] <[itchyjunk]> argh infinite list, it works
[03:09:47] <Axman6> :{
[03:09:53] <Axman6> f :: Int -> [Int]
[03:10:01] <monochrom> Ugh no, "f :: Int -> [Int]" leads to an error message that says "Int" not "Integer" nor "t".
[03:10:03] <Axman6> f x = x : f (x+1)
[03:10:05] <Axman6> :}
[03:10:25] <monochrom> "f x = x : f (x+1)" does not lead to any error message.
[03:10:37] <monochrom> "f 0" under that does not lead to any error message either.
[03:10:44] <monochrom> So, again, cannot reproduce.
[03:10:49] <[itchyjunk]> Yes it's fixed now
[03:11:52] <[itchyjunk]> so back to :: [a] ->[(Int,a)] problem. for the f :: Int -> [Int] , i passed an int to the function which it was incrimenting
[03:12:19] <monochrom> So make a helper function that has the extra Int parameter.
[03:12:21] <[itchyjunk]> but for mine, i am only passing it some list, it would have to start with some var and add 1 to it each time or somesuc
[03:12:37] <geekosaur> I showed an example of how we do that earlier
[03:12:47] <geekosaur> [06 23:34:03] <geekosaur> there's an idiom for that too. foo xs = go 0 xs where go cnt [] = ...; go cnt (x:xs) = ...
[03:12:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:13:42] <[itchyjunk]> hmmmm
[03:13:57] <geekosaur> `go` is a helper function, as monochrom said
[03:14:16] <geekosaur> since it's defined in a where clause, there's no particular reason to give it a fancy name
[03:14:57] *** Quits: shapr (~user@2601:7c0:c202:5190:e39f:2980:57ec:6939) (Ping timeout: 240 seconds)
[03:15:26] <Axman6> what as this function supposed to do [itchyjunk]?
[03:16:01] <Axman6> given [1,1,1,2,2,3], what should I get back?
[03:16:21] <Axman6> are we doing run length encoding? just ziping indices?
[03:16:41] <[itchyjunk]> [(0,1), (1,1), (2,1), (3,2), (4,2), (5,3)]
[03:17:17] <[itchyjunk]> I am trying to work my way up to problem 2 here :
[03:17:18] <[itchyjunk]> http://www.cas.mcmaster.ca/~dalvescb/LH_Week05_Exercises.pdf
[03:17:28] <Axman6> ok, then the suggestion of writing a worker (go) and a wrapper is a good idea
[03:17:49] <[itchyjunk]> I am trying to understand the helper go function :x
[03:17:57] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: bbiab)
[03:18:23] <monochrom> go 4 [x,y,z] = [(x,4), (y,5), (z,6)]
[03:18:32] <[itchyjunk]> ah
[03:18:51] <[itchyjunk]> i think i get it
[03:18:54] * [itchyjunk] tries stuff
[03:19:03] <Axman6> (or [(4,x),(5,y),(6,z)] with the above type)
[03:19:17] <monochrom> This is why I grew out of using either words or precise formulas to explain to beginners.
[03:19:40] <monochrom> The most effective communication is semi-concrete semi-symbolic examples.
[03:19:51] <monochrom> Such as "map f [x,y,z] = [f x, f y, f z]"
[03:20:06] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Read error: Connection reset by peer)
[03:20:19] <monochrom> As opposed to "it applies f to every element" or writing out the code.
[03:20:24] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:22:05] *** Joins: vicfred (~vicfred@user/vicfred)
[03:22:12] <monochrom> Well, in the case of "map f", the wording is short enough to be probably understandable by beginners. But you will run into larger cases where the wording is so lengthy, the beginner simply stops reading.
[03:22:19] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:22:36] <Axman6> that opne of the reasons I usually ask "what output do you expect for <this> input?"
[03:22:58] <Axman6> that's one*
[03:22:59] <[itchyjunk]> This is what my helper ended up looking like
[03:22:59] <[itchyjunk]> https://bpa.st/CF6Q
[03:23:01] <[itchyjunk]> seems to work
[03:23:42] <monochrom> Yeah, like that.
[03:23:46] <Axman6> Looks pretty good to me
[03:24:50] <[itchyjunk]> https://bpa.st/HPNA
[03:25:00] <Axman6> there are other (actually infinite) ways to write that, but this is one of the most clear. There are different ways that Haskellers might prefer to use though, we tend to avoid explicit recursion unless it's necessary
[03:25:02] <[itchyjunk]> this works /o\. think i am ready to tackle that problem 2 now
[03:25:25] <[itchyjunk]> hmm what's explicit vs implicit recursion? 
[03:25:30] <[itchyjunk]> Don't think I know the difference
[03:25:30] <Axman6> usually we would define that `go` function in a where clause of `myTuples` 
[03:25:40] <[itchyjunk]> ah
[03:25:55] <Axman6> unless it's also useful for other things too
[03:26:28] <geekosaur> explicit recursion is what you have been writing. implicit recursion is using a function that does the recursion internally, like map or foldr
[03:26:43] <Axman6> I think for now you can ignore that there are other ways to do what you've done, it's pretty likely you'll start to see some patterns and think "Can I write that pattern once and reuse it?"
[03:29:59] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:33:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[03:37:43] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:37:57] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:38:08] <[itchyjunk]> https://bpa.st/2WEA
[03:38:27] <[itchyjunk]> Here, i want to apply f to the resulting list after applying myTuples
[03:38:51] <[itchyjunk]> So apply myTuples to x, take the first element of this list and apply f to it, is how i am thinking
[03:39:19] <[itchyjunk]> oh wait i see an issue already
[03:39:55] <Axman6> I have two questions for you: what is the type of `x`? what is the type of `ys`?
[03:40:03] <[itchyjunk]> Ah, nm. i thought of a different approach
[03:40:16] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[03:40:33] <[itchyjunk]> x is a list [a], ys is a [(Int,a)] looking list
[03:40:43] <[itchyjunk]> i think i have an idea though
[03:41:06] <[itchyjunk]> wait, not i don't xD
[03:41:38] <Axman6> so you have mapWithIndex f x = f y : mapWithIndex f ys, and based on what you said above, x and ys have different types, yes?
[03:42:35] <Axman6> have you ever seen a function with the type (a -> b) -> [a] -> [b]?
[03:42:40] <[itchyjunk]> yes in my code, the ys is giving me the problem
[03:42:51] <[itchyjunk]> i would need to pass the [a] type instead of ys type there
[03:42:57] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:43:04] <[itchyjunk]> yes i have seem map
[03:43:13] <[itchyjunk]> i also implementd a myMap with that type earlier
[03:43:31] <Axman6> do you think you could use it here?
[03:43:45] <[itchyjunk]> Use map itself?
[03:43:45] <Axman6> you have a way to turn [a] -> [(Int,a)]
[03:44:03] <[itchyjunk]> i thought of using map but not sure if that's cheating or not
[03:44:05] <Axman6> and you have myMap :: (a -> b) -> [a] -> [b] right? 
[03:44:17] <[itchyjunk]> i can map f myTuples(x)
[03:44:17] <Axman6> if you wrote the code, it's definitely not cheating
[03:44:25] <Axman6> can you?
[03:44:35] <[itchyjunk]> hmm
[03:44:58] <Axman6> also, it's worth pointing out now that we don't call functions like that in HAskell, myTuples(x) means myTuples (x) which is myTuples x
[03:45:10] <Axman6> to pass x to my tuples, you just use a space
[03:45:45] <[itchyjunk]> map f (myTuples x)
[03:45:46] <Axman6> if you need to ensure that is understood as a single expression, you can use (myTuples x)
[03:45:52] <Axman6> does it work?
[03:46:01] <[itchyjunk]> i haven't tried, let me try it now
[03:47:28] <[itchyjunk]> it compiles but idk how to test it @_@
[03:47:40] <[itchyjunk]> mapWithIndex ? [1..10]
[03:47:53] <ProfSimm> Actually... why not have mutable local variables/
[03:47:54] <Axman6> (\(i,x) -> x*i)
[03:48:13] <Axman6> ProfSimm: what does local mean?
[03:48:46] <[itchyjunk]> https://bpa.st/YEWA
[03:48:48] <jackdk> Axman6: inside of a `runST`? `0:-)`
[03:48:53] <ProfSimm> Axman6: that's a good question
[03:48:54] <[itchyjunk]> I don't think i understand the problem statement very well :(
[03:49:00] <Axman6> ssshhh, we're getting there :P
[03:49:08] <[itchyjunk]> i think i have a solution but idk how to test it
[03:49:23] <Axman6> [itchyjunk]: I gave you a function above to use for ?
[03:49:36] <[itchyjunk]> oh
[03:49:51] <jackdk> [itchyjunk]: use ghci? Also the equation at line 18 is redundant, as `myMap` handles empty lists
[03:50:04] <Axman6> what result do you expect to get for mapWithIndex (\(i,x) -> x*i) [1..10]?
[03:50:51] <[itchyjunk]> [0,2,6,..]
[03:50:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[03:51:03] <[itchyjunk]> 90 as the last element
[03:51:57] <[itchyjunk]> ah, right i guess the [] handeling is redundent
[03:52:05] <[itchyjunk]> Axman6, i get what i expect
[03:52:14] <[itchyjunk]> [0,2,6,12,20,30,42,56,72,90]
[03:52:18] <Square> I had a File.hs with instances a,b,c of verbose instances over data types. I found i could generate "a" and "b" of these instances with TH. So i add a $(buildMyInstances ..) to same file. But now i got dependency issues as "a" and "b" depends on "c" and "c" depends on "a". 
[03:52:49] <Square> I had a File.hs with verbose instances a,b,c. *
[03:53:26] <[itchyjunk]> guess my solution works \o/
[03:53:41] <Square> is there some trick to enjoy some 2-pass compilation even with TH generation?
[03:54:43] <Axman6> ProfSimm: it turns out that you can do what you're asking for, but it's not a straight forward as you might expect. laziness makes this particularly difficult
[03:54:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:55:35] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi) (Quit: Leaving.)
[03:56:34] <Axman6> Square: with TH, the order of definitions matters - that looks like it might not be possible if there's a cyclic dep though. can you do all the definitions in TH in the same spot?
[03:57:22] <Square> Axman6, im afraid not. I guess i need to change plan 
[04:01:00] <jackdk> It may be possible to mix TH and .hs-boot files, but that's for a braver soul than I
[04:03:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:04:36] *** Joins: deadmarshal (~deadmarsh@95.38.112.110)
[04:04:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Client Quit)
[04:08:37] *** Quits: deadmarshal (~deadmarsh@95.38.112.110) (Ping timeout: 240 seconds)
[04:08:37] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[04:10:47] *** Joins: baltrobob (~baltrobob@p200300f03f1e516a1063109df4bd766d.dip0.t-ipconnect.de)
[04:10:51] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[04:13:15] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[04:15:21] <dmj`> monochrom: can't a free monad library be written w/o existentials though
[04:16:07] <Axman6> or without an existential crisis?
[04:16:13] <Axman6> Seems hard
[04:16:48] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) ()
[04:17:18] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[04:19:01] *** Quits: acidjnk (~acidjnk@p200300d0c7271e249cd77df40fde183d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:19:01] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7271e249cd77df40fde183d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:20:32] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[04:21:41] *** Quits: baltrobob (~baltrobob@p200300f03f1e516a1063109df4bd766d.dip0.t-ipconnect.de) (Quit: Client closed)
[04:22:51] <ProfSimm> Axman6: I was thinking what if we could reuse names by basically internally appending counts to them (so if I declare X three times internally it's X1, X2, X3)
[04:23:05] <ProfSimm> Axman6: but it becomes weird in some cases
[04:25:35] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:27:37] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[04:27:46] <Axman6> you might want to look a the ST monad, it gives you genuine mutatable variables in a way that guarantees that things are pure from the outside
[04:28:13] <geekosaur> they just quit
[04:29:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:29:49] <EvanR> does the word concatenate imply joining two things with discrete pieces, like a string or list
[04:30:25] <EvanR> or does it work for solids, shapes
[04:31:08] <geekosaur> I think for those you need to say how you;re combining them
[04:34:12] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::45db)
[04:37:21] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:39:48] *** Quits: dudek (~dudek@185.150.236.156) (Quit: Leaving)
[04:42:07] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:44:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:46:59] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[04:48:14] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:26] *** Quits: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Remote host closed the connection)
[04:49:00] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:51:55] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[04:52:33] <sonny> [itchyjunk] how is this function used?
[04:53:36] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[04:54:03] <sonny> seems like it's just to transform a single element in the list
[04:57:19] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:58:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[04:58:56] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[05:00:44] *** Joins: wyrd_ (~wyrd@gateway/tor-sasl/wyrd)
[05:02:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[05:02:25] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[05:03:09] *** Quits: wyrd_ (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[05:03:10] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:04:55] <sonny> can you list a lambda function parameters in a definition?
[05:05:17] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:07:28] <dmj`> sonny: what would that look like
[05:08:24] <sonny> mapWithIndex \((idx, elem)) lst = ...
[05:08:48] <EvanR> what on earth
[05:09:29] <[itchyjunk]> sonny, idk how it's used
[05:09:38] <[itchyjunk]> sonny, the one gives to me here to test was
[05:09:44] <sonny> not sure how else to interpret "mapWithIndex is just like map, however it takes a function that takes a tuple with the corresponding index of the element in list"
[05:10:02] <[itchyjunk]> <Axman6> what result do you expect to get for mapWithIndex (\(i,x) -> x*i) [1..10]?
[05:10:59] <sonny> [1..i..10] -> [1..i*x..10]
[05:11:18] <[itchyjunk]> hmm?
[05:11:45] <[itchyjunk]> [0,2,6,12,20,30,42,56,72,90]
[05:11:46] <sonny> I think it just gives you a new list with the element at position i updated
[05:11:48] <[itchyjunk]> this is the result
[05:12:08] <[itchyjunk]> did you end up writing the function in problem 2?
[05:12:14] <sonny> that's just map ...
[05:12:22] <sonny> I am trying to understand problem 2 now
[05:12:46] <dmj`> sonny: what is the type of elem
[05:12:51] <[itchyjunk]> how is it map? map :: (a->b)-> [a] -> [b]
[05:13:08] <[itchyjunk]> this one is ((Int,a) -> b) -> [a] -> [b]
[05:13:17] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[05:13:17] <[itchyjunk]> so not quite map
[05:13:18] <sonny> dmj`: `((Int,a) -> b) -> [a] -> [b]`
[05:14:37] <sonny> oh ok
[05:14:38] <EvanR> mapWithIndex devolves into map if you choose not to use the Int
[05:14:57] <sonny> I think I sorta get what it's asking
[05:15:40] *** Joins: vysn (~vysn@user/vysn)
[05:15:54] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[05:16:18] <sonny> nvm, I'm super confused
[05:16:22] <[itchyjunk]> sonny, did you mean this is a higher order function?
[05:16:26] *** Joins: jakalx (~jakalx@base.jakalx.net)
[05:16:36] <[itchyjunk]> sonny, i used map as a solution in mine. i wrote my own map and used it
[05:16:46] <[itchyjunk]> i helped me understand things better
[05:17:02] <sonny> higher order function?
[05:17:40] <[itchyjunk]> isn't that what it's called? map take in function as an input so we call it higher order function right?
[05:17:49] <sonny> nah
[05:17:51] <[itchyjunk]> not sure if i am remembering things properly anymore xD
[05:17:54] <sonny> it's just a function
[05:18:08] <sonny> unless there is some math terminology
[05:18:18] <[itchyjunk]> think i was learning map because it was higher order function
[05:18:23] <[itchyjunk]> math calls it functionals i think
[05:18:31] <[itchyjunk]> programming calls it higher order functions?
[05:18:37] <[itchyjunk]> like (\x.xx) (\x.xx)
[05:18:40] <sonny> no?
[05:19:20] <[itchyjunk]> https://en.wikipedia.org/wiki/Higher-order_function
[05:19:25] <sonny> well, I'm probably not the one to ask
[05:19:26] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[05:19:45] <sonny> but yeah I don't get what mapWithIndex is supposed to do
[05:19:56] <[itchyjunk]> it takes 2 parameter
[05:19:59] <[itchyjunk]> a function and a list
[05:20:01] <[itchyjunk]> and returns a list
[05:20:07] <[itchyjunk]> its a higher order function
[05:20:16] <[itchyjunk]> similar to map
[05:20:21] <sonny> ok
[05:20:35] <[itchyjunk]> thats why i reimplremented map
[05:20:48] <[itchyjunk]> to understand a function that can take a function as parameter
[05:20:52] <sonny> yeah I don't get what's different
[05:21:20] <[itchyjunk]> (a -> b) -> [a] -> [b], (a->b) is a function
[05:21:38] <sonny> yes
[05:21:54] <EvanR> [itchyjunk], yes, in the old days higher order functions would be this awesome thing
[05:22:04] <EvanR> by I mean, javascript can do it, not that special
[05:22:08] <EvanR> but*
[05:22:22] <EvanR> I mean, C kind of does it
[05:22:30] <EvanR> pointer to function
[05:22:33] <[itchyjunk]> i saw it in table of contents of a haskell book so i figured its one of those things that  you have to learn
[05:22:42] <sonny> {(a->b) -> [a]} -> [b]
[05:22:49] <[itchyjunk]> i don't have the attention to read a book so making due with table of contents xD
[05:23:01] <[itchyjunk]> sonny, idk what that is
[05:23:01] <EvanR> map :: (a -> b) -> ([a] -> [b])
[05:23:10] <sonny> that nomenclature might be subject to debate
[05:23:37] <EvanR> sonny, mapWithIndex just passes the current index along with the value
[05:23:50] <sonny> [itchyjunk] I was trying to show the order
[05:24:11] <EvanR> {(a -> b) -> [a]} -> [b] doesn't look right at all
[05:24:15] <[itchyjunk]> its right associative so it would be (a -> b) -> ([a] -> [b]) i think
[05:24:21] <sonny> oh
[05:24:24] <[itchyjunk]> you're doing left associativity for some reason?
[05:24:30] <sonny> yeah lol
[05:24:36] <sonny> mistake
[05:24:51] <EvanR> map has 2 args, if you pass just 1, you are left with [a] -> [b], 1 arg to go
[05:25:24] <[itchyjunk]> sonny, i make like 6 mini problems and solved it to solve that problem 2
[05:25:26] <[itchyjunk]> https://bpa.st/YEWA
[05:25:43] <[itchyjunk]> each of the function i wrote there, i thought of a mini problem to solve
[05:26:31] <sonny> EvanR ok, so I just need to make sure that I have the current index?
[05:26:39] <sonny> otherwise it's the same?
[05:26:48] <EvanR> I don't know what the actual question is, sorry
[05:26:56] <sonny> one sec
[05:27:04] <[itchyjunk]> http://www.cas.mcmaster.ca/~dalvescb/LH_Week05_Exercises.pdf
[05:27:07] <[itchyjunk]> problem 2) there
[05:27:30] <EvanR> implement mapWithIndex
[05:27:51] <EvanR> we've all be repeating the requirements for this function, we're all in agreement, so great xD
[05:28:02] <EvanR> been*
[05:28:58] * sonny scratches head
[05:29:26] <[itchyjunk]> :D
[05:29:28] <EvanR> 1. understand the question 3. write down the solution
[05:29:32] <EvanR> step 2 is overrated
[05:29:45] <[itchyjunk]> step 1 is really hard
[05:29:48] <EvanR> ^
[05:33:37] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[05:37:12] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[05:40:00] <EvanR> >write a quickCheck property to test both simultaneously (i.e check one in terms of the other)
[05:40:16] <EvanR> does that really succeed in testing both simultaneously
[05:41:01] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[05:41:27] *** Joins: spdr (~bc8147f2@cerf.good1.com)
[05:42:24] *** Joins: ubert1 (~Thunderbi@p200300ecdf09947d3ce845fd45b74154.dip0.t-ipconnect.de)
[05:43:25] *** Quits: ubert (~Thunderbi@p200300ecdf0994dbb267d7c5a67baed4.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:43:25] *** ubert1 is now known as ubert
[05:43:40] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[05:44:10] <jackdk> it's a test that exercises both at once
[05:44:10] <[itchyjunk]> is that like unit tests?
[05:44:37] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[05:44:45] <EvanR> yeah... though both could be wrong in such a way that cancels out... two wrongs make a right xD
[05:45:12] <EvanR> oh now I see where they are going with it
[05:45:33] <EvanR> "who cares as long as *the property* is satisfied"
[05:46:41] *** Joins: Morrow (~user@147.161.13.151)
[05:47:58] *** Joins: califax- (~califax@user/califx)
[05:48:24] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[05:49:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:49:34] *** califax- is now known as califax
[05:55:07] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[05:58:07] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:58:59] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[06:01:01] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[06:01:26] *** Joins: neurocyte0917 (~neurocyte@IP-046243081042.dynamic.medianet-world.de)
[06:01:26] *** Quits: neurocyte0917 (~neurocyte@IP-046243081042.dynamic.medianet-world.de) (Changing host)
[06:01:26] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[06:03:29] *** Quits: neurocyte091 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:03:29] *** neurocyte0917 is now known as neurocyte091
[06:04:35] *** Quits: hyiltiz (~quassel@31.220.5.250) (Quit: hyiltiz)
[06:05:25] *** Quits: xff0x (~xff0x@2001:1a81:5223:a300:e304:e5b3:98c9:ca79) (Ping timeout: 240 seconds)
[06:07:36] *** Joins: xff0x (~xff0x@2001:1a81:525f:5800:748a:2b9d:1b8:40fa)
[06:19:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[06:19:55] *** Quits: Morrow (~user@147.161.13.151) (Ping timeout: 256 seconds)
[06:20:06] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[06:20:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[06:21:33] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[06:27:28] *** Joins: hyiltiz (~quassel@31.220.5.250)
[06:31:57] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[06:34:23] *** Joins: hyiltiz (~quassel@31.220.5.250)
[06:35:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:38:57] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 240 seconds)
[06:41:45] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:41:45] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:41:45] *** finn_elija is now known as FinnElija
[06:43:43] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[06:45:12] *** Joins: shapr (~user@2601:7c0:c202:5190:f139:f199:c0b7:ebd5)
[06:52:14] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:03:39] *** Quits: EvanR (~EvanR@user/evanr) (Quit: Leaving)
[07:04:31] *** Joins: EvanR (~EvanR@user/evanr)
[07:04:58] *** Joins: arjun (~arjun@user/arjun)
[07:06:20] *** Joins: Guest32 (~Guest32@115.98.235.146)
[07:07:47] <Guest32> hi.. I need to sum all digits of a number till I arrive at a single digit eg 29 = 2+9 =11 =1+1 =2
[07:07:57] <Guest32> how to I do it?
[07:08:41] <Guest32> I have created a function which splits the numbers into a list
[07:08:44] <Guest32> toDigits x
[07:08:45] <Guest32>   | x < 1 = []
[07:08:45] <Guest32>   | otherwise = toDigits (div x 10) ++ [mod x 10]
[07:08:59] <EvanR> nice, see also divMod
[07:09:13] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[07:09:15] <EvanR> > divMod 25 7
[07:09:16] <lambdabot>  (3,4)
[07:09:46] <int-e> > divmod (3^2 + 4^2) (3 + 4)
[07:09:47] <lambdabot>  error:
[07:09:48] <lambdabot>      • Variable not in scope: divmod :: t0 -> t1 -> t
[07:09:48] <lambdabot>      • Perhaps you meant one of these:
[07:09:55] <int-e> > divMod (3^2 + 4^2) (3 + 4)
[07:09:56] <lambdabot>  (3,4)
[07:10:12] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[07:11:14] <Guest32> divMod 23
[07:11:22] <Guest32> >divMod 23
[07:11:23] <EvanR> :t divMod 23
[07:11:24] <lambdabot> Integral a => a -> (a, a)
[07:11:41] <Guest32> :t divMod 23
[07:11:42] <lambdabot> Integral a => a -> (a, a)
[07:14:15] <EvanR> > echo
[07:14:16] <lambdabot>  echo
[07:14:27] <Guest32> @Evanr how do I get to a single digit?
[07:14:27] <lambdabot> Unknown command, try @list
[07:15:12] <EvanR> you want to just sum all the digits?
[07:15:18] <EvanR> or all but the last digit
[07:15:34] <EvanR> or just take the last digit
[07:15:51] *** Quits: shapr (~user@2601:7c0:c202:5190:f139:f199:c0b7:ebd5) (Remote host closed the connection)
[07:16:06] <Guest32> all digits
[07:16:15] <Guest32> till the total gets to one digit
[07:16:19] <EvanR> > sum [1,2,3,4,5]
[07:16:21] <lambdabot>  15
[07:16:36] <EvanR> > sum (init [1,2,3,4])
[07:16:37] <lambdabot>  6
[07:16:44] <EvanR> > last [1,2,3,4,5]
[07:16:45] <lambdabot>  5
[07:17:09] *** Quits: td_ (~td@94.134.91.33) (Ping timeout: 256 seconds)
[07:17:52] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[07:17:52] <Guest32> > sum divMod 29
[07:17:54] <lambdabot>  error:
[07:17:54] <lambdabot>      • No instance for (Foldable ((->) Integer))
[07:17:54] <lambdabot>          arising from a use of ‘e_129’
[07:18:08] <Guest32> divMod 29
[07:18:21] <EvanR> divMod takes a divisor and a dividend, two arguments
[07:18:22] <Guest32> > divMod 29
[07:18:23] <lambdabot>  <Integer -> (Integer,Integer)>
[07:18:39] <EvanR> er, dividend, and divisor
[07:18:44] <jackdk> whoa, functions with a show instance?
[07:18:47] *** Joins: td_ (~td@94.134.91.64)
[07:19:04] <Guest32> ok
[07:19:14] <Guest32> > divMod 29 10
[07:19:16] <lambdabot>  (2,9)
[07:19:31] <Guest32> > sum divMod 29 10
[07:19:32] <lambdabot>  error:
[07:19:32] <lambdabot>      • Couldn't match type ‘(t0, t0)’ with ‘t1 -> t’
[07:19:32] <lambdabot>        Expected type: t0 -> t0 -> t1 -> t
[07:19:42] <Guest32> > sum (divMod 29 10)
[07:19:43] <lambdabot>  9
[07:20:07] <EvanR> \o/
[07:20:19] <Guest32> shouldn't this be giving 11?
[07:20:35] <EvanR> divMod doesn't give digits
[07:21:09] <EvanR> but it does the two things you did to get digits
[07:22:29] <Guest32> ok
[07:27:39] *** Quits: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net) (Quit: sirlensalot)
[07:28:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:31:22] *** Joins: haasn (~nand@haasn.dev)
[07:32:15] *** Quits: Guest32 (~Guest32@115.98.235.146) (Quit: Client closed)
[07:34:43] *** Joins: shapr (~user@2601:7c0:c202:5190:ca94:a895:80bc:42cf)
[07:41:11] *** Joins: abarbu (~user@c-66-31-23-28.hsd1.ma.comcast.net)
[07:49:29] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:50:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[07:50:05] *** [_] is now known as [itchyjunk]
[07:56:39] *** Joins: mbuf (~Shakthi@122.178.240.232)
[07:57:57] <abarbu> How can I avoid type variables leaking out of this code?
[07:57:58] <abarbu> I want a phantom that is True if any two other variables are True.
[07:57:58] <abarbu>  
[07:57:58] <abarbu> type family Or (a :: Bool) (b :: Bool) :: Bool where
[07:58:01] <abarbu>   Or True a = True
[07:58:04] <abarbu>   Or a True = True
[07:58:07] <abarbu>   Or False False = False
[07:58:09] <abarbu> one :: Proxy a
[07:58:12] <abarbu> one = undefined
[07:58:15] <abarbu> combine :: Proxy a -> Proxy b -> Proxy (Or a b)
[07:58:18] <abarbu> combine _ _ = undefined
[07:58:22] <abarbu> fn = combine one one
[07:58:25] <abarbu>  
[07:58:28] <abarbu> The type of fn comes out to be fn :: D (GOr a b)
[07:58:31] <abarbu> Everything works, but the more you use this code, the more it leaks out strangely-named type variables in trees of Or whose structure depends on the internals of the code. Seems like a very poor API. How can I avoid this leakage?
[07:58:34] <abarbu> Is there some other way to approach this problem?
[07:58:38] <abarbu>  
[08:01:04] *** Joins: deadmarshal (~deadmarsh@95.38.112.110)
[08:07:25] *** Quits: arjun (~arjun@user/arjun) (Quit: Leaving)
[08:11:33] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:12:07] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[08:18:32] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[08:26:58] <Axman6> @where paste
[08:26:58] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[08:27:53] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Closing Window)
[08:30:03] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[08:31:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:31:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:31:46] *** Joins: wroathe (~wroathe@user/wroathe)
[08:34:58] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[08:37:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:43:46] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:46:05] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (Remote host closed the connection)
[08:46:32] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[08:55:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[08:56:19] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[08:57:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[08:57:43] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[08:58:55] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:02:50] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[09:03:17] *** Quits: deadmarshal (~deadmarsh@95.38.112.110) (Ping timeout: 240 seconds)
[09:03:20] *** Quits: phma (phma@2001:5b0:211b:f778:91c:a71f:b4a2:a400) (Read error: Connection reset by peer)
[09:05:00] *** Joins: phma (phma@2001:5b0:211c:3a48:e7cb:c702:2cb6:39c)
[09:13:11] *** Quits: shapr (~user@2601:7c0:c202:5190:ca94:a895:80bc:42cf) (Remote host closed the connection)
[09:13:25] *** Joins: shapr (~user@2601:7c0:c202:5190:d7e6:1445:a66d:b9b1)
[09:16:38] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 268 seconds)
[09:24:19] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:29:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[09:29:44] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:30:08] *** Joins: nhatanh02 (~satori@123.24.172.30)
[09:35:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[09:35:42] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[09:36:43] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Quit: ZNC - http://znc.in)
[09:46:37] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 240 seconds)
[09:58:46] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[09:59:06] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[10:09:33] <hyiltiz> Happy New Years and hope a safe new year to all!
[10:12:38] *** Joins: nhatanh02 (~satori@123.24.172.30)
[10:14:06] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[10:14:49] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:17:29] <hyiltiz> When did the channel topic started with a r/haskell link?
[10:18:27] *** Joins: cyphase (~cyphase@user/cyphase)
[10:18:56] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[10:32:33] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:32:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:32:33] *** Joins: wroathe (~wroathe@user/wroathe)
[10:34:07] *** Joins: deadmarshal (~deadmarsh@95.38.112.110)
[10:37:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:41:35] *** Quits: spdr (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[10:41:59] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[10:44:33] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[10:48:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[10:49:18] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[10:49:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:58:37] *** Quits: xff0x (~xff0x@2001:1a81:525f:5800:748a:2b9d:1b8:40fa) (Ping timeout: 240 seconds)
[10:59:47] *** Joins: xff0x (~xff0x@2001:1a81:525f:5800:1882:d375:707:2176)
[11:00:15] *** Joins: coolnickname (uid531864@user/coolnickname)
[11:01:27] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:02:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:05:16] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[11:08:37] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[11:24:46] *** Joins: simendsjo (~user@84.211.91.241)
[11:29:57] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:30:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[11:30:47] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:37:42] *** Joins: jumper149 (~jumper149@base.felixspringer.xyz)
[11:44:46] *** Joins: puke (~puke@user/puke)
[11:48:31] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:51:33] *** Quits: jespada_ (~jespada@87.74.32.18) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:54:37] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:03:19] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[12:03:37] *** Quits: shapr (~user@2601:7c0:c202:5190:d7e6:1445:a66d:b9b1) (Ping timeout: 240 seconds)
[12:03:39] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:05:19] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[12:07:50] *** Joins: zaquest (~notzaques@5.130.79.72)
[12:13:46] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[12:13:59] *** Joins: Brumaire (~quassel@37.166.249.26)
[12:15:53] *** Joins: vpan (~0@212.117.1.172)
[12:17:34] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:21:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:23:04] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:23:20] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:23:55] *** Joins: cemguresci (~cemguresc@2001:a61:11ff:a001:2dad:6df8:999e:4708)
[12:26:12] *** Joins: chele (~chele@user/chele)
[12:30:08] *** Quits: inkbottle[m] (~inkbottle@2001:470:69fc:105::2ff5) (Quit: You have been kicked for being idle)
[12:30:22] *** Joins: acode (~acode@dslb-188-100-024-238.188.100.pools.vodafone-ip.de)
[12:33:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:33:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:33:23] *** Joins: wroathe (~wroathe@user/wroathe)
[12:34:29] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:35:11] *** Joins: mmhat (~mmh@55d459b4.access.ecotel.net)
[12:35:58] <juhp> Missing file: /usr/lib64/ghc-8.10.7/lib/settings
[12:36:00] <juhp> hmm
[12:36:13] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:36:51] <juhp> I am getting this from stack after replacing ~/.stack/programs/x86_64-linux/ghc-tinfo6-8.10.7
[12:38:02] <juhp> The problem being that the file exists...
[12:38:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:38:40] <juhp> Oops no it doesn't ughhh
[12:39:37] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-11.elisa-laajakaista.fi)
[12:39:56] <juhp> Ok I need to work a bit harder on this hack, sorry
[12:46:55] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:46] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:48:58] *** Quits: acode (~acode@dslb-188-100-024-238.188.100.pools.vodafone-ip.de) (Quit: Client closed)
[12:52:20] <maerwald[m]> Aha
[12:53:42] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[12:53:57] *** Joins: puke (~puke@user/puke)
[12:54:52] *** Quits: ubert (~Thunderbi@p200300ecdf09947d3ce845fd45b74154.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:55:12] <cemguresci> Hi guys, I am trying to learn data types and I am having some trouble. I run this code in ghci. https://paste.tomsmeding.com/aK5GQ3vV
[12:55:55] <cemguresci> I wrote the error message in paste as well :D
[12:56:44] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:56:51] <[exa]> cemguresci: why do you use `data` for TimeStamp when it's an alias?
[12:56:54] <cemguresci> My first intention was actually have an object with timestamp automatically but I couldn't figure it out as well
[12:56:58] <[exa]> (or looks like you use it as alias to me)
[12:57:06] <[exa]> you probably want:
[12:57:20] <[exa]> `data TimeStamp = TimeStamp UTCTime deriving Show`
[12:57:27] <[exa]> or
[12:57:39] <[exa]> `type TimeStamp = UTCTime`   (no way to do `deriving` here tho)
[12:58:05] <[exa]> the 2nd variant should work with the rest of the code
[12:58:54] <[exa]> with the 1st variant you're defining a struct, so you'd need to add a constructor to the use, such as: `test = Test "haskell" (TimeStamp ct)`
[12:59:16] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:00:21] *** Joins: off^ (~off@207.5.21.20)
[13:02:34] <cemguresci> exa: whats the difference between `data TimeStamp = TimeStamp UTCTime deriving Show and `data TimeStamp = UTCTime deriving Show ?
[13:03:04] <[exa]> the second defines that "UTCTime" is a constructor for your empty structure
[13:03:19] <[exa]> which is probably not what you want
[13:03:44] <[exa]> the syntax for `data` is:  `data TypeName = ConstructorName Content1 Content2 | Constructor2Name Content1 Content2 Content3 | ..."
[13:04:20] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[13:04:24] <[exa]> it defines the TypeName (as the name for the whole thing) and all ConstructorNames (as kinda "functions" that create the type)
[13:05:04] <[exa]> in your case, the "UTCTime" becomes a constructor for a variant of the TypeName type that has no contents
[13:05:15] *** Quits: Brumaire (~quassel@37.166.249.26) (Quit: ran away)
[13:05:36] *** Joins: Brumaire (~quassel@37.166.249.26)
[13:05:53] <[exa]> it is a bit confusing for newcomers because in so many other languages the constructor names and type names are forcibly same
[13:06:55] <cemguresci> yes, I am really confused :D 
[13:07:08] <[exa]> Simpler example: `data Bool = False | True`
[13:07:27] <[exa]> this gives 2 constructors of the type, `False :: Bool` and `True :: Bool`
[13:07:38] <[exa]> and both variants contain nothing
[13:07:55] <cemguresci> what do you mean by containing nothing?
[13:08:03] <[exa]> there are no data fields in there
[13:08:03] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[13:08:19] <[exa]> what's your previous language?
[13:08:25] <cemguresci> python 
[13:09:20] <[exa]> ah okay I'm not good in Python but you can imagine this e.g. as 2 empty classes True and False that share a common "parent", so they can be used interchangeably
[13:10:09] <cemguresci> okay, I see
[13:10:51] <[exa]> a more useful example: `data MaybeNumber = ActualNumber Int | NoNumber`
[13:11:27] <[exa]> defines 1 structure that contains an integer, 1 structure that doesn't contain anything, and both are of the type MaybeNumber
[13:11:51] <[exa]> (a more generic parametrized version of this is the standard Maybe, `data Maybe a = Nothing | Just a`
[13:11:59] *** Quits: puke (~puke@user/puke) (Quit: puke)
[13:12:37] <[exa]> anyway, in your case the `data TimeStamp = UTCTime` translates to basically `class UTCTime: pass`
[13:12:41] <cemguresci> awesome, now I understand. 
[13:12:55] <cemguresci> another question. can we use getCurrentTime function in data definition. I want to have timestamp when its defined
[13:13:13] <[exa]> getCurrentTime has type (IO UTCTime) right?
[13:13:18] <cemguresci> yes
[13:13:45] <[exa]> so it's not a "value", but a description of an IO action that you need to explicitly run at a certain point
[13:13:53] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[13:14:10] <[exa]> one way is what you did, `<-` in `do` notation is something that "runs" these actions and gets their results as actual values
[13:15:00] <[exa]> but there are tools to do that less verbosely, e.g. you can write `Test "haskell" <$> getCurrentTime`, which nicely combines the action with the struct creation
[13:15:22] <[exa]> (and you get a thing of type `IO Test`, which is the action that creates your whole structure right away)
[13:15:29] *** Joins: max22- (~maxime@2a01cb088335980037d8471a1d5e7a78.ipv6.abo.wanadoo.fr)
[13:16:11] <[exa]> (`<$>` is like `$`, but "through some kind of <box>", which is the IO action here)
[13:16:52] <cemguresci> hmm thats interesting
[13:17:12] <[exa]> this is one interesting thing about purity in haskell, it forces you to organize the stuff precisely (e.g., no reliance on argument evaluation order as in C's and pythons)
[13:17:41] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[13:17:49] <[exa]> which gets really inconvenient "by default", but there's a lot of the helpers like <$> that magically make it more convenient and safer than in the languages where the action order is kinda implicit
[13:18:47] *** Quits: neurocyte091 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[13:19:11] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[13:19:18] *** Quits: polyphem_ (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a) (Quit: WeeChat 3.3)
[13:19:59] *** Joins: neurocyte0917 (~neurocyte@IP-046243081042.dynamic.medianet-world.de)
[13:19:59] *** Quits: neurocyte0917 (~neurocyte@IP-046243081042.dynamic.medianet-world.de) (Changing host)
[13:19:59] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[13:20:57] <cemguresci> exa: thank you so much teaching some information in this short time. I will do more research
[13:21:25] <[exa]> the main takeaway is that instead of "running commands" here you compose the "program descriptions" (with types such as `IO xxx`) to make larger program descriptions, and haskell runtime takes the program description in `main` and runs it for you
[13:22:20] <cemguresci> yes, excatly thats what I feel :D 
[13:22:47] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[13:23:19] <[exa]> btw the `do` notation does just this, most commands are connected with >> (basically a semicolon in imperative languages) or >>= (a semicolon that carries the result)
[13:23:26] <[exa]> :t putStrLn "a"
[13:23:27] <lambdabot> IO ()
[13:23:31] *** Joins: polyphem (~rod@2a02:810d:640:776c:e450:3ca3:b389:687a)
[13:23:47] <[exa]> (IO action that returns "empty type", ie nothing)
[13:23:57] <[exa]> :t putStrLn "a" >> putStrLn "b"
[13:23:58] <lambdabot> IO ()
[13:24:09] <[exa]> (2 IO actions combined into one)
[13:24:22] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:de3b:67d7:83e8:947e)
[13:25:16] <[exa]> :t readLn >>= (\x -> print $ 2*x)
[13:25:17] <lambdabot> IO ()
[13:25:56] *** Joins: user0 (~aj@154.0.137.32)
[13:25:59] *** Joins: spaceseller (~spacesell@31.147.205.13)
[13:26:03] <[exa]> (2 actions combined into one with carrying the result, this is what `do  x<-readLn; print (2*x);` looks like without the fancy syntax )
[13:26:37] *** Parts: user0 (~aj@154.0.137.32) ()
[13:27:08] <cemguresci> cool stuff :D
[13:28:22] <[exa]> and well, eventually someone will tell you that all stuff that can be combined in such way belongs to a wider, infamously named category of composable computations :D
[13:28:23] <juhp> okay I made this to create stack program symlinks to Fedora ghc's: https://gist.github.com/juhp/a9c49281a8e478eb9af30a78a87ab0d7
[13:29:27] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[13:29:43] <cemguresci> exa: more theory of everything :D 
[13:29:58] <cemguresci> abstracting the abstraction :D
[13:32:05] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[13:32:09] *** Joins: Everything (~Everythin@37.115.210.35)
[13:40:31] <maerwald[m]> juhp: why
[13:41:18] <juhp> maerwald[m]: because I prefer to use the Fedora built ghc on Fedora
[13:41:34] <maerwald[m]> juhp: https://docs.haskellstack.org/en/stable/yaml_configuration/#system-ghc
[13:42:24] <juhp> maerwald[m]: yes I know but I have multiple Fedora ghc's (ghc8.10, ghc9.0, ghc9.2)
[13:43:15] <juhp> Having an extra copy under ~/.stack is just a waste of diskspace :)
[13:43:24] <juhp> copies
[13:43:30] <maerwald[m]> juhp: then use a patched stack: https://github.com/commercialhaskell/stack/pull/5585
[13:44:36] <maerwald[m]> Here are prebuilt binaries https://downloads.haskell.org/~ghcup/unofficial-bindists/stack/2.7.3.1/
[13:44:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:45:37] <juhp> maerwald[m]: cool
[13:45:47] <juhp> We have stack packaged in fedora too
[13:46:06] <maerwald[m]> And?
[13:47:31] <juhp> maerwald[m]: happy to use stack hooks once it is merged upstream :)
[13:47:49] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:e9aa:f35a:429e:f1b8)
[13:48:18] <maerwald[m]> juhp: it will never be
[13:49:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:49:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:49:07] *** Joins: wroathe (~wroathe@user/wroathe)
[13:49:18] <juhp> Well maybe I can apply your patch to Fedora stack then - would be nice indeed to automatically prefer or even install the Fedora build
[13:50:25] <juhp> (Fedora ghcX.Y build)
[13:50:30] <maerwald[m]> Since stack has stagnated, it should be easy to maintain the patch downstream 
[13:50:41] <juhp> Ya I suppose
[13:50:51] *** Joins: acidjnk (~acidjnk@p200300d0c7271e249cd77df40fde183d.dip0.t-ipconnect.de)
[13:50:51] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7271e249cd77df40fde183d.dip0.t-ipconnect.de)
[13:54:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:58:45] <juhp> maerwald[m]: alright I parked your patch in my Fedora stack package directory - I may consider it for Fedora 36, thanks
[13:59:46] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:03:25] <juhp> Btw for those using Stackage Nightly: the next snapshot should be based on ghc-9.0.2 hopefully (thanks to Adam Bergmark)
[14:03:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:04:35] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[14:04:42] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:e9aa:f35a:429e:f1b8) (Quit: Leaving)
[14:05:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:08:16] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[14:09:29] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:19:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:19:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:19:55] *** Joins: wroathe (~wroathe@user/wroathe)
[14:21:17] <[exa]> cemguresci: actually these things are pretty concrete requirements, "do stuff in order based on some defined ordering logic" and "use results from earlier steps"
[14:21:17] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[14:23:06] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:24:25] *** Quits: Brumaire (~quassel@37.166.249.26) (Ping timeout: 256 seconds)
[14:24:47] *** Joins: Brumaire (~quassel@37.172.143.113)
[14:24:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:25:33] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:26:18] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[14:28:15] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:31:28] *** Joins: alx741 (~alx741@157.100.93.160)
[14:31:48] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[14:37:04] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[14:37:54] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:41:00] *** Quits: benin (~benin@183.82.176.241) (Ping timeout: 256 seconds)
[14:45:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:48:05] *** Joins: puke (~puke@user/puke)
[14:48:57] *** Joins: benin (~benin@183.82.176.241)
[14:50:41] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:50:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:50:42] *** Joins: wroathe (~wroathe@user/wroathe)
[14:55:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:56:16] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[15:07:37] *** Quits: Brumaire (~quassel@37.172.143.113) (Ping timeout: 240 seconds)
[15:08:26] *** Joins: Brumaire (~quassel@81-64-14-121.rev.numericable.fr)
[15:11:05] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[15:13:35] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d)
[15:16:02] *** Joins: nhatanh02 (~satori@123.24.172.30)
[15:18:43] <cemguresci> exa: right that makes sense
[15:19:22] <cemguresci> exa: when I define these, `data Recipient = Recipient String | Nothing deriving Show`   `data Amount = Amount Double | Nothing deriving Show` , I get this error "Multiple declarations of `Nothing'" Why it happens?
[15:19:53] <c_wraith> constructors must be unique (per module)
[15:20:11] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[15:20:14] <c_wraith> But the fact that you're using the name Nothing suggests a misunderstanding
[15:20:39] <c_wraith> Those aren't the same Nothing as is defined in the Maybe type
[15:20:52] <c_wraith> those are your own value named Nothing
[15:20:58] <cemguresci> I am combining these with other data types and I want to construct the latest data type with nullable of this data types
[15:21:32] <c_wraith> When you declare a data type, you declare constructors *for that type*
[15:21:43] <sub0> your Nothing construct will conflict with Nothing from Maybe 
[15:21:48] <sub0> constructor*
[15:22:16] <sshine> cemguresci, maybe you want: 'type Recipient = String; type Amount = Double' and then in your functions you can write 'Maybe Recipient' and 'Maybe Amount' types to signify values like 'Just "Bob" :: Maybe Recipient' and 'Nothing :: Maybe Recipient' and 'Just 42.0 :: Maybe Amount' and 'Nothing :: Maybe Amount'?
[15:22:23] <c_wraith> sub0: not actually true.  Maybe is defined in a different module.  that error is coming from defining Nothing twice in the same module.  There would be an ambiguity error using it, though
[15:23:02] <cemguresci> c_wraith: you are right. it is not the same Nothing in Maybe :D 
[15:23:03] <sshine> cemguresci, it's not that creating your own nullable data type is necessarily bad. but maybe you want to consider using the existing Maybe type to describe whether or not there's a recipient/amount?
[15:23:31] <sub0> c_wraith, Nothing is in Prelude. it will conflict with his name unless he took measures to prevent it
[15:23:41] <c_wraith> sub0: but that's not what that error was reporting.
[15:23:49] <sub0> I didn't comment on the error
[15:24:12] <c_wraith> cemguresci: it is a requirement of Haskell's type inference that constructors always are unique to types.
[15:24:47] <c_wraith> cemguresci: the fully-qualified names thereof, at least.
[15:25:15] <cemguresci> I see, I confused how to use Nothing actually to make it nullable :D
[15:25:19] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:de3b:67d7:83e8:947e) (Remote host closed the connection)
[15:25:31] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:6bbe:db4a:c5b0:8e19)
[15:26:29] <[exa]> cemguresci: better name it unambiguously as `NoRecipient`
[15:26:29] <cemguresci> This is actually what I want, data Test = Test {
[15:26:29] <cemguresci>    amount :: Maybe Amount,
[15:26:29] <cemguresci>    recipient :: Maybe Recipient
[15:26:29] <cemguresci> } deriving (Eq, Show, Generic)
[15:26:56] <[exa]> I'd say that there you may go for `Maybe String` right away
[15:27:07] <[exa]> or `Maybe Name`
[15:27:27] <[exa]> naming the whole thing as Recipient sounds kinda like you also store the whole person there, with all organs etc :D
[15:27:39] <cemguresci> haha :D
[15:27:46] <[exa]> (hard-learned OOP lesson :D )
[15:27:56] <sshine> yea, Recipient does sound like a nested data type :) RecipientName or Name. but meh.
[15:28:15] <cemguresci> you are right
[15:28:16] <[exa]> `type Name=String` is a pretty common sight in packages
[15:28:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[15:28:27] <[exa]> and yeah, meh. :D
[15:28:42] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[15:30:54] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:6bbe:db4a:c5b0:8e19) (Remote host closed the connection)
[15:31:06] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:2e0:44f:2ede:1485)
[15:31:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[15:31:42] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[15:36:10] *** Joins: jespada (~jespada@87.74.36.188)
[15:46:33] *** Joins: slack1256 (~slack1256@191.126.99.72)
[15:46:37] *** Quits: slack1256 (~slack1256@191.126.99.72) (Remote host closed the connection)
[15:54:59] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:55:47] *** Joins: simendsjo (~user@2a02:2121:2c5:187:eedf:c36:9193:ad44)
[15:55:47] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:56:11] *** Joins: califax- (~califax@user/califx)
[16:00:33] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[16:00:33] *** califax- is now known as califax
[16:02:30] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:04:43] *** Quits: benin (~benin@183.82.176.241) (Ping timeout: 256 seconds)
[16:05:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::45db) (Ping timeout: 240 seconds)
[16:06:37] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[16:10:53] <joel135> I just found the word Haskalah. Sounds like haskell :P
[16:16:52] *** Joins: Rum (~bourbon@user/rum)
[16:18:05] <Hecate> Haskallah Al-Rahman Al-Raheem? :P
[16:19:09] *** Joins: benin (~benin@183.82.176.241)
[16:20:34] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[16:20:34] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[16:20:34] *** Joins: wroathe (~wroathe@user/wroathe)
[16:21:50] *** Quits: benin (~benin@183.82.176.241) (Client Quit)
[16:25:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[16:26:08] *** Quits: max22- (~maxime@2a01cb088335980037d8471a1d5e7a78.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:27:48] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:28:51] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[16:36:36] *** Quits: mmhat (~mmh@55d459b4.access.ecotel.net) (Ping timeout: 256 seconds)
[16:36:41] <absence> can cabal use a "resolver" from stack/stackage to decide which package versions to use?
[16:39:29] <geekosaur> not yet
[16:40:17] <absence> yet? is it planned or being worked on?
[16:40:27] <geekosaur> yes
[16:41:28] <absence> cool, is there somewhere i can read about it and/or follow the progress?
[16:41:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[16:42:32] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:44:16] <geekosaur> lemme see if I can find the ticket again
[16:44:37] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 240 seconds)
[16:45:30] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:2e0:44f:2ede:1485) (Remote host closed the connection)
[16:45:49] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:816c:2f7:b4df:2063)
[16:48:00] <geekosaur> https://github.com/haskell/cabal/issues/7556
[16:49:35] *** Joins: mmhat (~mmh@55d45069.access.ecotel.net)
[16:50:56] <absence> looks promising, thanks!
[16:52:37] *** Quits: acidjnk (~acidjnk@p200300d0c7271e249cd77df40fde183d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:52:37] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7271e249cd77df40fde183d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:54:57] *** Quits: simendsjo (~user@2a02:2121:2c5:187:eedf:c36:9193:ad44) (Ping timeout: 240 seconds)
[16:55:04] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[16:57:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:58:45] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[17:01:03] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[17:01:23] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[17:13:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[17:13:53] *** Joins: burnsidesLlama (~burnsides@client-8-64.eduroam.oxuni.org.uk)
[17:14:06] * geekosaur wonders how close one could get to this by translating a resolver into an incomplete freeze file
[17:14:59] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 256 seconds)
[17:15:57] <fendor[m]> iirc, the issue describes how far you can get with freeze files and what the limitations are
[17:16:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:18:23] *** Quits: burnsidesLlama (~burnsides@client-8-64.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[17:20:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[17:21:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[17:21:59] *** mjacob_ is now known as mjacob
[17:22:13] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[17:22:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:25:37] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[17:30:04] *** Joins: nhatanh02 (~satori@123.24.172.30)
[17:30:48] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:31:26] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[17:35:09] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[17:39:11] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[17:40:01] *** Joins: alx741 (~alx741@157.100.93.160)
[17:42:49] *** Joins: xkuru (~xkuru@user/xkuru)
[17:44:25] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:46:13] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:49:47] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:49:48] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[17:50:04] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[17:52:27] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d)
[17:57:56] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[17:59:37] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:00:57] *** Joins: alx741 (~alx741@157.100.93.160)
[18:01:16] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:02:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[18:02:44] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[18:05:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:07:44] *** Joins: stef204 (~stef204@user/stef204)
[18:08:23] *** Joins: antony (~The_viole@203.77.49.232)
[18:08:36] *** Quits: antony (~The_viole@203.77.49.232) (Client Quit)
[18:09:23] *** Quits: cemguresci (~cemguresc@2001:a61:11ff:a001:2dad:6df8:999e:4708) (Remote host closed the connection)
[18:09:35] *** Joins: cemguresci (~cemguresc@2001:a61:11ff:a001:2dad:6df8:999e:4708)
[18:13:52] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[18:16:30] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:16:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:16:30] *** Joins: wroathe (~wroathe@user/wroathe)
[18:23:42] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[18:24:37] *** Joins: alx741 (~alx741@157.100.93.160)
[18:24:41] *** Quits: noddy (~user@user/noddy) (Quit: WeeChat 3.4)
[18:24:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[18:25:12] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[18:26:25] *** Joins: noddy (~user@user/noddy)
[18:27:44] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[18:29:22] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:30:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[18:30:58] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[18:31:20] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[18:31:42] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[18:32:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[18:33:55] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:34:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[18:35:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:36:04] *** Joins: atmunr (~atmunr@181.199.145.102)
[18:36:06] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:37:31] *** Quits: atmunr (~atmunr@181.199.145.102) (Client Quit)
[18:37:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:40:34] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[18:40:41] *** Joins: max22- (~maxime@2a01cb088335980011bb54fd9cdf5176.ipv6.abo.wanadoo.fr)
[18:42:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[18:45:21] <sclv> absence, geekosaur stackage already provides those freeze files: https://www.stackage.org/lts-18.5/cabal.config
[18:45:45] <geekosaur> so I saw when I read the ticket
[18:45:58] <sclv> there's no link anywhere from the stackage page itself (its an "easter egg feature") because they decided they didn't like promoting it, ostensibly because those don't handle revisions
[18:46:51] <sclv> the feature i've been working on would let you add a line "import https://foo/cabal.config" directly to a project file
[18:47:06] *** Joins: jkaye (~jkaye@2601:281:8300:7530:960c:6e00:5eeb:eb5a)
[18:47:10] *** Joins: alx741 (~alx741@157.100.93.160)
[18:47:35] <sclv> and the main issue is merge constraint semantics are not useful right now
[18:47:46] <sclv> it just picks up all constraints and applies them all.
[18:47:54] <sclv> so you can't ever "override" a resolver
[18:48:49] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:50:30] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:53:24] *** Joins: sirlensalot (~sirlensal@ool-44c5f8c9.dyn.optonline.net)
[18:54:08] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:56:10] *** Quits: off^ (~off@207.5.21.20) (Remote host closed the connection)
[18:59:43] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[19:03:08] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:04:38] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:07:24] *** Joins: alx741 (~alx741@157.100.93.160)
[19:08:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[19:08:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[19:09:12] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[19:09:24] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[19:10:08] *** Quits: alx741 (~alx741@157.100.93.160) (Client Quit)
[19:20:55] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:21:48] *** Quits: mmhat (~mmh@55d45069.access.ecotel.net) (Quit: WeeChat 3.4)
[19:22:42] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d)
[19:26:12] *** Quits: Hafydd (~Hafydd@user/hafydd) (Quit: WeeChat 3.3)
[19:26:19] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:26:27] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[19:26:57] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Remote host closed the connection)
[19:27:37] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[19:27:50] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[19:29:16] *** Joins: Hafydd (~Hafydd@user/hafydd)
[19:30:03] *** Quits: Hafydd (~Hafydd@user/hafydd) (Client Quit)
[19:30:47] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:32:07] *** Quits: jumper149 (~jumper149@base.felixspringer.xyz) (Quit: WeeChat 3.3)
[19:34:24] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:816c:2f7:b4df:2063) (Remote host closed the connection)
[19:35:05] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:37:20] *** Joins: shapr (~user@2601:7c0:c202:5190:1c89:9f27:44af:85b3)
[19:37:31] *** Joins: nf (~n@monade.li)
[19:39:02] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:41:02] *** Quits: jkaye (~jkaye@2601:281:8300:7530:960c:6e00:5eeb:eb5a) (Ping timeout: 240 seconds)
[19:47:15] *** Joins: zebrag (~chris@user/zebrag)
[19:47:24] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:48:07] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:49:26] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:50:42] *** Joins: jkaye (~jkaye@2601:281:8300:7530:89aa:29d4:1f39:3e9)
[19:50:55] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[19:51:57] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[19:53:09] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[19:54:57] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[20:00:03] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[20:00:32] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:06:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:06:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:12:08] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:13:24] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Ping timeout: 276 seconds)
[20:13:33] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:15:14] <cemguresci> Hi guys, why this function errors stack overfow, i dont understand. ppow abc a = xx
[20:15:14] <cemguresci>             where fd = read (take 4 . reverse $ show(hashWithSalt a abc)) :: Integer
[20:15:14] <cemguresci>                   xx = if fd < 5999
[20:15:14] <cemguresci>                        then a
[20:15:14] <cemguresci>                        else (ppow abc a+1)
[20:15:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:15:23] <EvanR> @where paste
[20:15:23] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[20:15:27] <EvanR> dang that's handy
[20:16:21] <cemguresci> all right. https://paste.tomsmeding.com/xrs11gGJ
[20:16:40] <cemguresci> this works, *Main Data.Hashable Data.Hashable.Time Data.Int> ppow z 33
[20:16:40] <cemguresci> 33
[20:16:50] <EvanR> did you want to do (ppow abc (a + 1)) at the end
[20:17:12] *** Joins: Akiva (~Akiva@user/Akiva)
[20:17:12] <EvanR> or (ppow abc a) + 1
[20:17:15] <cemguresci> *Main Data.Hashable Data.Hashable.Time Data.Int> ppow z 32
[20:17:15] <cemguresci> *** Exception: stack overflow
[20:17:15] <cemguresci>  this doesnt
[20:18:09] <EvanR> note how the second understanding leads to an infinite loop
[20:18:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[20:18:28] <cemguresci> now it owkrs :D
[20:18:35] <cemguresci> works :D
[20:18:46] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[20:19:34] <EvanR> rather if fd starts < 5999 it remains so forever because the same question gets repeated infinitely
[20:20:21] <cemguresci> i thought making a+1 will act like (a + 1), never assume that, right
[20:20:45] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[20:20:51] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:20:55] <EvanR> + just has lower parsing precedence than the space in 'f x'
[20:21:10] <EvanR> function application binds tighter
[20:21:43] <EvanR> similar to 'times' in algebra xy + ab
[20:22:10] <EvanR> but it also binds tighter than *
[20:22:45] *** Joins: nhatanh02 (~satori@123.24.172.30)
[20:23:29] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 250 seconds)
[20:26:39] <Hecate> Hello, I'm doing user research regarding a feature I'm hoping to get into Cabal, that would allow people to seamlessly integrate native compiled languages (read: rust/zig/C) in their Cabal project
[20:26:46] <Hecate> Based on the ideas in https://gist.github.com/Kleidukos/729fd6a091307e0929f7519126b4a6c8
[20:26:57] *** Quits: mbuf (~Shakthi@122.178.240.232) (Quit: Leaving)
[20:27:17] *** Joins: stefan-_ (~cri@42dots.de)
[20:28:28] <Hecate> long story short I'm gathering your testimonials in order to know how I can best serve you
[20:28:38] <sclv> Hecate: i don't understand your reference to hackage builders there at all
[20:28:40] <Hecate> the idea is to provide an alternative to custom Setup.hs 
[20:28:58] <cemguresci> thanks EvanR
[20:29:00] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[20:29:04] <Hecate> sclv: When you upload a library to Hackage, isn't it impossible to specify a custom command to have them run?
[20:29:12] *** cemguresci is now known as cemg
[20:29:17] <sclv> no hackage uses a standard cabal build
[20:29:37] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[20:29:42] <sclv> but standard cabal builds can use custom setup.hs
[20:30:01] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[20:30:09] <Hecate> yes but we're actively trying to get rid of those ;)
[20:30:14] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:30:23] <sclv> right but the reference to hackage makes no sense
[20:30:27] <EvanR> cemguresci, worth understanding precedence in haskell because 1. it's relevant to stuff like a -> b -> c, which is understood as a -> (b -> c), 2. people sprinkle $ everywhere, often gratuitously, to adjust precedence and 3. you can define the precedence of custom operators
[20:30:30] <sclv> its just one of many systems that uses cabal build
[20:30:31] <Hecate> wait wait let me finish
[20:30:34] <sclv> there's nothing special about it
[20:31:04] <Hecate> one of the critics I've received is: Why don't you use $other_tool or just run commands in the right order?
[20:31:16] <Hecate> and my answer was "there are systems that only run standard cabal builds"
[20:31:19] <Hecate> like Hackage runners
[20:31:28] <sclv> you can make that argument more generally
[20:31:30] <Hecate> where you can't specify a custom command to run 
[20:31:40] <Hecate> yup' but I thought an example would be more speaking?
[20:31:44] <sclv> any time package X wants to depend on package Y then cabal will build package Y with a standard cabal build
[20:31:49] <Hecate> but yes it's more general than just Hackage
[20:31:56] <Hecate> great, thank you :)
[20:32:26] <sclv> that said, I think you can do 95% of this with build-tool-depends and not needing any changes to cabal grammar
[20:33:19] <sclv> you _might_ not be able to do it with custom stanzas per tool in the cabal grammar (not sure about nested syntax of x-fields) but you could just put that config in a distinct file
[20:33:43] <sclv> so i really would encourage you to try build-tool-depends for this, and document what if any limitations that has
[20:33:50] <sclv> and maybe that could just be mildly fixed or extended
[20:34:41] <Hecate> sclv: I have a hard time understanding the operational semantics of build-tool-depends, does it run anything? Does it add anything to the pipeline? 
[20:35:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:35:40] <Hecate> I'm understanding that it provides executables in the scope (PATH?) during the duration of the component
[20:36:56] <Hecate> sclv: you're right in that I can declare the necssity of having the cargo-driver (for instance) in the $PATH, this does the majority of the job I think
[20:37:14] <sclv> fair point it doesn't actually run it
[20:37:22] <Hecate> but then I'd have to register the driver to run before the component is built
[20:37:46] <Hecate> sclv: that being said the code behind build-tool-depends can absolutely be reused! :)
[20:38:12] <sclv> actually wait, i have an open pr that almost does this: https://github.com/haskell/cabal/pull/7688
[20:38:18] <sclv> its just limited to test suites only now
[20:38:48] <sclv> i think i didn't want it in main stanzas because it can generate new hs modules and we want the cabal file to have a manifest of all exposed cabal modules
[20:38:58] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:38:58] <sclv> so i don't think we want that
[20:38:59] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[20:39:39] <sclv> but arguably i'd just want one new field, "build-tools-pipeline" that runs a list of executables in order
[20:39:47] <sclv> (with build-tools-depends used to bring them into scope)
[20:40:36] <sclv> which is almost exactly your build-drivers field, but i'm leaning against having the x- fields in the cabal file get passed in
[20:40:39] <Hecate> sclv: don't we have autogen-modules for those?
[20:40:44] <sclv> i think it confuses the grammar to make that extensible
[20:41:14] <Hecate> sclv: when you say "get passed in" I'm not sure to fully understand
[20:41:57] <sclv> well i'm given to understand if you say build-driver: cargo-driver then the x-cargo-driver stanza somehow gets passed to cargo-driver
[20:42:14] <sclv> i'd rather you just call "cargo-driver" and it finds its settings like in some other file or something
[20:42:38] <Hecate> sclv: oh no it doesn't get passed-in to the driver
[20:42:45] <sclv> ok then what does it do
[20:42:47] <Hecate> I'd have the cargo-driver parse the Cabal file
[20:42:51] <Hecate> get its stanza
[20:42:57] <Hecate> this is low-tech enough
[20:43:10] <sclv> as i said idk if we can have x-stanzas or just x-fields
[20:43:22] <Hecate> aaaah ok I understand now
[20:43:39] *** Joins: notzmv (~zmv@user/notzmv)
[20:44:06] <sclv> the minimal proposal i'd support would be just build-drivers (but i'd prefer it called build-tools-pipeline or the like for uniformity, though that's totally something people can argue about on a ticket, etc)
[20:45:06] <Hecate> > Notice that you can create custom stanzas in your foo.cabal. I have provided the code to support a stanza something like:
[20:45:08] <lambdabot>  <hint>:1:43: error: parse error on input ‘in’
[20:45:09] <Hecate> https://webcache.googleusercontent.com/search?q=cache:ug9swepTVJoJ:https://www.py4u.net/discuss/1985295+&cd=19&hl=fr&ct=clnk&gl=fr&client=firefox-b-d
[20:46:19] <sclv> not sure that's accurate let me check
[20:47:06] <geekosaur> iirc it at least used to be possible
[20:47:50] <sclv> yeah, it works as is
[20:48:07] <Hecate> hurray :D
[20:48:20] <Hecate> this saves the x-$driver stanza
[20:48:22] <sclv> ok, so drivers can read custom stanzas or other files or whatever its up to them :-)
[20:48:29] <Hecate> sclv: :D yes!
[20:48:47] <Hecate> ah man this makes me so happy
[20:48:48] <sclv> again this means the minimal proposal is just a single new field that adds executables to a preprocessor pipeline
[20:49:18] <sclv> there might be some prior tickets on this lying around, but imho it makes a lot of sense
[20:49:19] <Hecate> yup', as advertised in the FAQ I want this to be minimally invasive for Cabal
[20:49:50] <Hecate> And this is a step forward getting rid of a legitimate usage of Setup.hs
[20:49:52] <sclv> it might be worth trying to figure out how many current uses of custom Setup.hs can be obviated by this
[20:49:53] <sclv> yep
[20:50:23] <Hecate> sclv: speaking of which, I've been contacted with someone that has quite a horrific situation: https://twitter.com/marunarh/status/1479496482063589376
[20:50:46] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:50:47] <Hecate> you said that generated .hs modules in Setup.hs are Not Good™, would it be better if they were registered in autogen-modules?
[20:50:49] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[20:51:37] <sclv> right, we really want the cabal file to statically list all modules a package can provide
[20:51:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:52:20] <Hecate> perfect, so I can tell people to do this then
[20:52:23] <Hecate> 👍*
[20:57:04] *** Joins: econo (uid147250@user/econo)
[20:58:50] <[itchyjunk]> When it says "define your own list type", am i supposed to create a new datastructure somehow?
[20:59:16] <[itchyjunk]> "define your own list type and then implement your own version of the following functions : " it says
[21:00:03] <geekosaur> yes
[21:00:14] <geekosaur> it's not even particularly difficult
[21:00:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[21:00:41] <[itchyjunk]> hmmmmm
[21:01:00] *** Joins: Hafydd (~Hafydd@user/hafydd)
[21:01:10] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[21:03:37] <geekosaur> the one thing you can't readily do is use [x,y,z] syntax with it
[21:04:06] <geekosaur> (there's a way around that but I'm pretty sure they don't want you to do that now)
[21:05:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[21:05:41] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[21:12:59] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[21:14:53] *** Quits: cemg (~cemguresc@2001:a61:11ff:a001:2dad:6df8:999e:4708) (Ping timeout: 252 seconds)
[21:18:06] <[itchyjunk]> hmm
[21:18:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:35] <EvanR> remind me why it would be a bad idea to have a default instance of some class that select types "reimplement" OOP style
[21:18:56] <EvanR> it breaks separate compilation or
[21:19:30] <geekosaur> separate compilation has to be able to find instances by fixed names
[21:19:45] <geekosaur> which then become global across the entire program
[21:19:57] <[itchyjunk]> I want a `data List a = someConstructorHere variable | someOtherCons moreVariables 
[21:19:58] <[itchyjunk]> `
[21:20:27] <geekosaur> that said, you can do this with default implementations in the class head, depending on what you really need
[21:20:48] <EvanR> just curious, don't need it!
[21:22:35] <[itchyjunk]> I suppose i want my type to be deriving Num
[21:22:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[21:22:56] <geekosaur> [itchyjunk], not if you're reimplementing a list, no
[21:22:58] <EvanR> [itchyjunk], are you throwing spaghetti at a wall now
[21:23:22] <[itchyjunk]> Always have been!
[21:23:26] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:23:54] <[itchyjunk]> yeah i am trying to implement list where i can define a mySum and sum all the elements of the list
[21:24:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Read error: Connection reset by peer)
[21:24:29] <EvanR> that requires Num support on elements and not the list
[21:24:42] <[itchyjunk]> hmm right
[21:25:33] *** Joins: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se)
[21:25:47] <[itchyjunk]> define a list containing a, where a is constrained to the Num interface like thingy
[21:25:59] <[itchyjunk]> `data List a = ?`
[21:26:48] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:26:58] <[itchyjunk]> not the `a` either, apparently
[21:27:02] <c_wraith> GHC has disabled the functionality that used to allow that, because.. it turned out to not be useful.
[21:27:18] <c_wraith> Just put constraints on the places that need them.  the data constructor does not need them
[21:28:09] <geekosaur> is there anything else you're supposed to define?
[21:28:22] *** Joins: Hayek (~xxx@rrcs-173-196-3-254.west.biz.rr.com)
[21:28:27] <geekosaur> :t sum -- note we put the constraint on the function, not the list
[21:28:28] <lambdabot> (Foldable t, Num a) => t a -> a
[21:28:34] <geekosaur> meh
[21:28:42] <geekosaur> % :t sum @[]
[21:28:42] <yahb> geekosaur: Num a => [a] -> a
[21:28:44] <Hayek> src sum
[21:28:47] <[itchyjunk]> the full problem is here :http://www.cas.mcmaster.ca/~dalvescb/LH_Week05_Exercises.pdf
[21:28:58] <Hayek> % :t sum
[21:28:58] <yahb> Hayek: (Foldable t, Num a) => t a -> a
[21:29:00] <[itchyjunk]> problem 3), mySum, ++, myReverse
[21:29:20] <geekosaur> right, I'd put the Num part on mySum because the others don't need it
[21:29:55] <geekosaur> and myReverse would be pretty limited if it only worked on lists of numbers
[21:30:11] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[21:30:25] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[21:30:29] <[itchyjunk]> i see what you mean. i only want it to be numbers when i need to add then, not always.
[21:31:04] <c_wraith> The problem even gives you types for each - only one of which has a constraint
[21:31:33] <[itchyjunk]> Right :x
[21:31:41] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[21:31:58] <[itchyjunk]> I don't grasp the purpose of type constructors
[21:32:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[21:32:23] <[itchyjunk]> here they say data FightMove = Punch | Kick | Block
[21:32:24] <[itchyjunk]> https://mmhaskell.com/blog/2016/12/17/making-your-own-data-types-in-haskell
[21:32:32] <[itchyjunk]> So it's the things that type can do
[21:32:51] <monochrom> But you need a parametrized type now.
[21:32:54] <[itchyjunk]> so for my list, would the constructors be the type of things the list can do like produce of sum of elements?
[21:32:56] <geekosaur> those are data constructors, not type constructors
[21:32:57] <[itchyjunk]> hmm
[21:33:05] <geekosaur> consider data Bool = False | True
[21:33:05] * [itchyjunk] scrolls down to parametrized types to read
[21:33:16] <glguy> [itchyjunk]: In your data FightMove ... , FightMove was the type constructor
[21:33:19] <[itchyjunk]> ah
[21:33:26] <geekosaur> Bool is the type constructor, False and True are the data constructors
[21:33:28] *** Joins: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se)
[21:33:40] <geekosaur> they are values just like 1 or "foo"
[21:37:32] <geekosaur> in data Maybe a = Nothing | Just a, Maybe is a type constructor which takes a type parameter; Nothing is a value, Just is a data constructor which takes a value of the type you specified with the type constructor
[21:37:36] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:37:51] <geekosaur> so Just 'a' is a value whose type is Maybe Char
[21:38:35] <glguy> [itchyjunk]: the cool thing about data constructors is that you can case on them. When you see capitalized identifiers in patterns you know they only match values created with that constructor
[21:38:44] *** Joins: cheater (~Username@user/cheater)
[21:39:22] <[itchyjunk]> I get the Maybe being a type constructor but why isn't Just a type constructor but a data constructor?
[21:39:33] <[itchyjunk]> because of its appearence in RHS there?
[21:39:41] <geekosaur> because it constructs data instead of constructing types
[21:40:12] <glguy> [itchyjunk]: there are two distinct levels. Type-level and value-level.
[21:40:20] <[itchyjunk]> so `Just a` is a value whose type is `Maybe` ?
[21:40:25] <[itchyjunk]> Why is it `Maybe Char` ?
[21:40:34] <geekosaur> because I applied Just to a Char
[21:40:42] <geekosaur> :t 'a'
[21:40:43] <lambdabot> Char
[21:40:43] <[itchyjunk]> ahh Just 'a' right
[21:41:25] <[itchyjunk]> Why is it `Nothing` and not `Nothing a` ?
[21:41:47] <monochrom> Because "Nothing 5" makes no sense.
[21:41:49] <Michal[m]> the type is 'Maybe a' not Maybe
[21:41:50] <[itchyjunk]> Nothing represents when the parameter is left empty right?
[21:41:59] <geekosaur> because it doesn't take a parameter
[21:42:01] <[itchyjunk]> Michal[m], oh
[21:42:03] <geekosaur> :t Just
[21:42:03] <lambdabot> a -> Maybe a
[21:42:12] <geekosaur> :t Nothing
[21:42:13] <lambdabot> Maybe a
[21:42:25] <geekosaur> this is like the empty list, which can be of any list type
[21:42:27] <geekosaur> :t []
[21:42:28] <lambdabot> [a]
[21:42:44] <geekosaur> but a list ['c'] is necessarily a list of Char
[21:42:51] <[itchyjunk]> `data List a = Nothing | ?` so here, i have accounted for my type `List a` to be empty ?
[21:43:12] <geekosaur> you can't reuse Nothing, unfortunately, it's already associated with Maybe
[21:43:20] <[itchyjunk]> ah
[21:43:42] <geekosaur> for historical reasons we often call that Nil
[21:43:46] <[itchyjunk]> `data List a = EmptyList | ? `
[21:43:55] <[itchyjunk]> oh i see `data List a = Nil | ? `
[21:44:25] <geekosaur> now think about how a list works. not the [x,y,z] form but the other one which you'll mostly have seen as (x:xs)
[21:44:40] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:45:26] <[itchyjunk]> a : data List xs 'ish
[21:45:32] <[itchyjunk]> oops
[21:45:39] <[itchyjunk]> x : data List xs, maybe?
[21:45:52] <[itchyjunk]> Wait no, idk what i am saying
[21:46:09] <Michal[m]> you can construct a list by taking an existing list and adding an element to it
[21:46:19] *** Quits: mikko (~mikko@2a02:7b40:d418:6a61::1) (Quit: WeeChat 2.7.1)
[21:46:20] <geekosaur> you can't reuse : for the same reason you can't reuse Nothing
[21:46:28] <Michal[m]> this should give you the second constructor, beside Nil
[21:46:30] <[itchyjunk]> Oh :<
[21:46:34] <int-e> @src []
[21:46:34] <lambdabot> data [] a = [] | a : [a]
[21:47:00] <geekosaur> I was hoping not to give them the answer right out :)
[21:47:34] <int-e> (this is a lie, you can't actually write that in Haskell (except that's literally how GHC.Types does it))
[21:47:36] <geekosaur> should be able to figure that out from how theyve been recursing on the RHS of a list
[21:48:33] <int-e> we seemed to be a little too far off the correct syntax though :-/
[21:48:54] <geekosaur> they're supposed to be building their own list type and defining some functions on it
[21:49:19] <int-e> (And  we still have to figure out what that looks like with different type and constructor names)
[21:49:28] <[itchyjunk]> hmm
[21:49:36] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[21:50:00] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[21:51:40] <[itchyjunk]> i need to recursively define it as first element plus rest of List xs and it does down all the way to Nil condition.. i think that is the idea?
[21:52:08] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:52:25] <geekosaur> yes
[21:52:41] <geekosaur> the same way you've been recursing on real lists
[21:53:54] *** Quits: jonathanx (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Remote host closed the connection)
[21:54:13] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:54:17] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[21:54:59] <geekosaur> I was hoping I could coach you through using how you had been recursing on real lists to realize how they must be defined, and thereby how you would need to define your own
[21:55:18] <geekosaur> since understanding this is key to understanding how lists work
[21:55:29] <[itchyjunk]> `data List a = Nil | List a` ish ..
[21:55:44] <geekosaur> not quite. remember (x:xs)
[21:55:53] <geekosaur> you only have xs there
[21:56:29] <[itchyjunk]> `data List a = Nil | a along with List a`
[21:56:40] <geekosaur> well, actually as written you have x with a data constructor name List
[21:57:03] <geekosaur> right, now you need to work out how to write that "along with"
[21:57:08] <monochrom> I happen to think that this is a poor exercise. Be it unpopular opinion.
[21:57:23] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[21:57:32] <monochrom> Case 1. If you have taught the [] type properly, then this exercise is too trivial.
[21:57:47] <geekosaur> you have a better idea for an introduction to recursive data types?
[21:58:06] <monochrom> Case 2. If you have taught the [] type improperly, then this exercise punishes the good students and rewards the bad students. Here is why:
[21:58:12] *** Quits: jrm (~jrm@156.34.249.199) (Read error: Connection reset by peer)
[21:58:32] *** Joins: jrm (~jrm@156.34.249.199)
[21:59:12] <monochrom> For student who want to understand: Since you taught [] improperly, they don't know where to start for understanding, hell, you probably taught them wrong ideas to start. There is nothing to chew on.
[21:59:55] <monochrom> For student who want to cargo-cult: They can just look at "data [a] = [] | a : [a]" and change syntax. This still does not need understanding.
[22:00:06] <[itchyjunk]> How does the : look like without sugar syntax?
[22:00:25] <geekosaur> it's not sugar, it's just an operator-style data constructor
[22:00:45] <geekosaur> these all start with : which is arbitrarily considered an "uppercase" symbol character
[22:01:02] * enikar suggest renamed : as  cons
[22:01:16] <c_wraith> the [] case is sugar though.  That one is a totally special case.
[22:01:49] <c_wraith> monochrom: I think there's value in showing people they can reimplement what [] does - the only magical things are the names.
[22:01:58] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:02:01] <geekosaur> we also have data NonEmpty a = a :| [a]
[22:02:02] <[itchyjunk]> `data List (x:xs) = Nil| x : List xs` conceptually but i don't get to use : because it's already used ?
[22:02:22] <geekosaur> where :| is the constructor
[22:02:31] <monochrom> Yes, therefore I don't pose it as an exercise, I give it as an example.
[22:02:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[22:03:03] <[itchyjunk]> hmm
[22:03:21] <monochrom> A good exercise is not to ask students to reinvent list but to design variations.
[22:03:40] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[22:06:13] <EvanR> reinventing the let wheel = "roll... " : wheel in wheel
[22:09:00] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[22:10:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[22:12:30] <[itchyjunk]> I don't think i've managed to reinvent this wheel yet though. hopefully this clicks soon..
[22:12:36] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:14:17] *** Quits: jrm (~jrm@156.34.249.199) (Ping timeout: 240 seconds)
[22:17:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:17:03] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:21:38] <geekosaur> all you need to do is pick some other operator name that starts with a colon. :| and :+ are taken, and comma is reserved so :, won't work
[22:21:58] <geekosaur> or you can define it with a prefix name instead of an infix operator
[22:22:58] <c_wraith> oh, huh.  It never occurred to me that , is too reserved to use in an operator.  I guess [ and ] are, too.
[22:23:23] <geekosaur> I thought it might work until I considered (:,)
[22:26:27] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:ad26:5398:3e1f:d97d)
[22:26:38] <geekosaur> it does raise an interesting parse error if you attempt it
[22:29:09] <[itchyjunk]> Right, i think i solved the mystery. When you said pick an operator, that was a strong hint that i wasn't internalizing
[22:29:19] <[itchyjunk]> data constructor is an actual operator
[22:29:35] <[itchyjunk]> `data List a = Nil | Cons a (List a)`
[22:30:59] <geekosaur> there you go
[22:31:19] <geekosaur> you could also choose an operator like ::: although it'd be a PITA
[22:31:25] <EvanR> data I'mCool a = Shade :~!#$? Shade
[22:31:29] <geekosaur> (:: is taken)
[22:32:14] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:32:17] *** Joins: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:32:18] *** Quits: abarbu (~user@c-66-31-23-28.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[22:32:23] *** Quits: eastbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[22:32:51] <c_wraith> I'd probably pretend I don't know Cofree exists and just use :<
[22:32:52] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[22:33:09] <monochrom> I use :>
[22:33:16] <[itchyjunk]> so `I'mCool` is a type constructor and `a` is a parameter. this only has one data constructor called `Shade` that takes 2 parameter `:~!#$?` and `Shade` ?
[22:33:28] <geekosaur> nope
[22:33:32] <EvanR> no :~!#$? is the constructor
[22:33:33] <[itchyjunk]> :(
[22:33:43] <EvanR> just like in []
[22:33:47] <geekosaur> remember iniitial : is an operator-style  constructor
[22:33:49] <EvanR> starts with a colon
[22:34:23] <EvanR> haskell is cool for having this but now I'm questioning if it's quite counterintuitive xD
[22:34:25] <geekosaur> so you have a constructor :-!#$? with two Shade parameters
[22:34:31] <c_wraith> and since no one else has called it out, I will.  you can be cool if you have a pair of shades
[22:34:51] *** Joins: simendsjo (~user@84.211.91.241)
[22:35:34] <monochrom> BTW if you have "data List a = Nil | a `Cons` List a deriving Show" or "data I'mCool a = (:~!#$?) Shade Shade deriving Show", the derived Show instances will actually respect your non-default choice of fixity.
[22:36:04] <EvanR> did not know that
[22:36:19] *** Joins: qwertyasda (~Qwerty@wsip-174-71-193-82.lv.lv.cox.net)
[22:37:00] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:37:19] <EvanR> @let data Int2 = Int `I2` Int
[22:37:20] <lambdabot>  Defined.
[22:37:26] <EvanR> > I2 1 2
[22:37:28] <lambdabot>  error:
[22:37:28] <lambdabot>      • No instance for (Show Int2)
[22:37:28] <lambdabot>          arising from a use of ‘show_M59481879713528625638’
[22:37:33] <EvanR> @undefined
[22:37:33] <lambdabot> Undefined.
[22:37:36] <EvanR> @let data Int2 = Int `I2` Int deriving Show
[22:37:38] <lambdabot>  Defined.
[22:37:38] <EvanR> > I2 1 2
[22:37:40] <lambdabot>  1 `I2` 2
[22:37:41] *** Quits: qwertyasda (~Qwerty@wsip-174-71-193-82.lv.lv.cox.net) (Quit: Leaving)
[22:38:32] <EvanR> next time I'm at a loss at a party I'll bring that up
[22:39:46] <c_wraith> I seem to recall derived show not respecting fixity declarations on punctuation operator constructors, though
[22:41:06] <geekosaur> I recall thatr being raised as a bug several years ago but don't know if it's been fixed
[22:41:49] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 240 seconds)
[22:46:44] <glguy> @let data Example = Int :* Example | End deriving Show; infixr 5 :*
[22:46:46] <lambdabot>  Defined.
[22:46:46] <glguy> 1 :* 2 :* 3 :* End
[22:46:51] <glguy> > 1 :* 2 :* 3 :* End
[22:46:52] <lambdabot>  1 :* (2 :* (3 :* End))
[22:47:29] <geekosaur> mm, the one I recall is where it omits necessary parens, such that the result isn't parsable
[22:47:45] <geekosaur> that one's just a little unfortunate but still works
[22:48:06] <glguy> > Just (1 :* 2 :* 3 :* End)
[22:48:08] <lambdabot>  Just (1 :* (2 :* (3 :* End)))
[22:48:33] <glguy> I don't know about the unparsable issue
[22:49:04] <geekosaur> I didn't find it on a quick search so that one may have been fixed already
[22:54:40] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[23:01:24] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[23:03:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[23:05:57] <c_wraith> what's odd is that showsPrec is so mechanical to implement respecting fixity, it seems like it would be feasible to have the deriving mechanism do it.
[23:06:42] <glguy> I think the trouble is that showsPrec doesn't know about fixity, only precedence, so it has to make a worst case assumption
[23:07:55] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:14:24] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[23:18:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:19:10] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::45db)
[23:21:21] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[23:21:45] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:23:17] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[23:23:30] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
[23:24:28] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:24:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[23:25:17] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Remote host closed the connection)
[23:27:55] *** Quits: cheater (~Username@user/cheater) (Quit: (BitchX) Bob Barker uses BitchX. Have your BitchX spayed or neutered.)
[23:34:34] *** Joins: cheater (~Username@user/cheater)
[23:35:13] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:35:42] *** Joins: jrm (~jrm@156.34.249.199)
[23:38:04] *** Joins: juhp (~juhp@128.106.188.82)
[23:39:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[23:44:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[23:46:19] *** Joins: coolnickname (uid531864@user/coolnickname)
