[00:04:18] *** Joins: duderonomy (~duderonom@c-73-158-190-156.hsd1.ca.comcast.net)
[00:06:31] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:07:15] <havenwood> >> module Kernel def Struct(**kwargs) = Struct.new(*kwargs.keys, keyword_init: true).new(**kwargs
[00:07:15] <havenwood> ) end; Struct(aim: true, lies: false)
[00:07:15] <ruby[bot]> havenwood: I'm terribly sorry, I could not evaluate your code because of an error: JSON::ParserError:A JSON text must at least contain two octets!
[00:07:30] <havenwood> #=> #<struct  aim=true, lies=false>
[00:08:42] <mooff> a pain point for Structs.. is their behavior under code reload
[00:08:47] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[00:09:29] <mooff> i've started sketching with them then rewritten classes 'long form' twice now for this IRC lib
[00:10:43] <mooff> you either do e.g. User = Struct.new(..); class User, or a similar sleight of hand, but they have downsides
[00:11:54] <mooff> >> true
[00:11:55] <ruby[bot]> mooff: I'm terribly sorry, I could not evaluate your code because of an error: JSON::ParserError:A JSON text must at least contain two octets!
[00:12:10] <mooff> >> {}
[00:12:11] <ruby[bot]> mooff: I'm terribly sorry, I could not evaluate your code because of an error: JSON::ParserError:A JSON text must at least contain two octets!
[00:15:54] <havenwood> mooff: when you say under reload, you mean redefining the constant or something else?
[00:16:18] <havenwood> Like? Point = Struct.new(:x, :y, keyword_init: true) unless defined?(Point)
[00:17:37] *** Joins: handsomeGOODm (~handsomeG@85.107.66.83)
[00:19:01] <mooff> havenwood: i'm not worried about redefining the constant, but that we've changed what it refers to
[00:19:47] *** Quits: jimeh (~jimeh@matrix.bah.io) (Quit: Bridge terminating on SIGTERM)
[00:20:09] <mooff> it's pretty niche, but in the case of this eval bot, say if i add a method to User at runtime, on reload, it will be gone
[00:25:53] *** Joins: jimeh (~jimeh@matrix.bah.io)
[00:26:05] * mooff wishes Set implemented pop, shift, unshift
[00:26:21] <adam12> gr33n7007h: Item = Struct.new(:sku); macbook = Item.new("macbook"); @cart = []; def add_cart(item); @cart.concat Array(item); end; add_cart(macbook)
[00:26:44] <adam12> gr33n7007h: Contrived because you can work around it, but I'm fiddling with RBS and don't have a better example right now.
[00:28:35] <mooff> Item = Struct.new(:sku); macbook = Item['macbook']; @cart = [macbook]
[00:28:45] <mooff> reload!; @cart.all? { |i| Item === i } # => false
[00:30:37] <gr33n7007h> adam12: alright, i see what you mean now.
[00:31:19] *** Quits: handsomeGOODm (~handsomeG@85.107.66.83) (Quit: Client closed)
[00:31:32] *** Quits: dviola (~diego@187.39.23.21) (Quit: WeeChat 3.4)
[00:32:36] *** Joins: bluedust (~bluedust@103.161.144.94)
[00:37:14] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[00:37:54] *** Quits: _ht (~quassel@82-168-34-160.fixed.kpn.net) (Remote host closed the connection)
[00:38:26] <gr33n7007h> mooff: what is that reload! method?
[00:44:50] *** Joins: gproto23_ (~gproto23@user/gproto23)
[00:45:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[00:47:45] <mooff> gr33n7007h: an imaginary one :)
[00:48:24] <gr33n7007h> mooff: :P
[00:51:21] *** Joins: smp_ (~smp@user/smp)
[00:51:37] *** Quits: smp (~smp@user/smp) (Ping timeout: 268 seconds)
[00:51:37] *** smp_ is now known as smp
[00:54:30] <nakilon> I forgot, does ruby have https://reference.wolfram.com/language/ref/NestWhileList.html ?
[01:10:45] <mooff> not that i know of nakilon. i think the simplest would be to implement your own
[01:12:10] <mooff> i.e. i'm not sure anything in Enumerable would be easier or clearer than using a while loop
[01:16:35] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Remote host closed the connection)
[01:20:18] *** Joins: trillp (~trillp@69.233.98.238)
[01:20:31] *** Joins: V1s1ble (~skhanna@2601:341:4200:4b4a:584f:1e47:876d:c886)
[01:22:42] <V1s1ble> dumb beginner question, why can I not raise ExportTemplateNotFound in this: https://paste.sumit.im/?256963efe43fbcd2#8VzRaZR22Fpd6QoqMJTZQzU1hxNfifWTvMVrXYFh1xCx  (I get an error saying it can't find that class)
[01:26:17] *** Joins: hanzo (uid532183@user/hanzo)
[01:28:18] <weaksauce> you likely need to use the scope resolution operator :: 
[01:29:06] <V1s1ble> huh. I tried `raise ::ExportTemplateNotFound`
[01:29:09] <V1s1ble> will check again
[01:33:34] *** Quits: trillp (~trillp@69.233.98.238) (Read error: Connection reset by peer)
[01:34:54] *** Joins: trillp (~trillp@69.233.98.238)
[01:36:12] <nakilon> reinventing nestwhilelist is always huge
[01:36:14] *** jimeh is now known as jimeh[m]
[01:36:36] <nakilon> and I don't have strength to revive my mll gem
[01:37:18] <nakilon> right now I need it for fetching a list from HTTP API
[01:37:33] <nakilon> the request is using limit and cursor
[01:37:36] <leftylink> eh... it sounds like Enumerator.produce(i) { f }.lazy.take_while { }, but I haven't needed it much
[01:38:46] <nakilon> there are too many ways to implement it
[01:38:53] <nakilon> I want to finally stop doing it
[01:39:21] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:40:11] <mooff> V1s1ble: does your class block really begin with "class Actions::Engagements::Export::Generate"? (i.e. you modify it for brevity in the paste)
[01:40:16] <mooff> as presented it should work: https://i.imgur.com/XkZ2eC9.png
[01:40:44] <mooff> 02def 07nest_while_list(func, v)
[01:40:44] <mooff>   [].tap { |result| result << (v = func[v]) 02until 02yield(v) }
[01:40:44] <mooff> 02end  
[01:41:27] * mooff eagerly looks up Enumerator.produce
[01:43:07] <nakilon> you lose the last iteration if not doing begin end
[01:43:55] <nakilon> or not
[01:44:50] *** Joins: jimeh (jimeh@matrix.bah.io)
[01:44:57] <mooff> what could you name such a method so it would be obvious to your colleagues
[01:45:07] <V1s1ble> mooff, Yep, that's the actual signature
[01:45:46] <mooff> V1s1ble: have you been able to play yet with 'binding.irb', or 'binding.pry'?
[01:45:48] <V1s1ble> hmm, yea it's working down .. I think my setup isn't picking up changes from generators for some reason 
[01:46:12] <nakilon> I feel like reading the paged REST API is something that already had thousands of people to reinvent the nest_while_list
[01:47:20] *** Quits: V1s1ble (~skhanna@2601:341:4200:4b4a:584f:1e47:876d:c886) (Quit: Leaving)
[02:03:52] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[02:10:28] *** Quits: jimeh[m] (~jimeh@matrix.bah.io) (Quit: issued !quit command)
[02:34:50] *** Quits: jimeh (jimeh@matrix.bah.io) (Remote host closed the connection)
[02:40:54] *** Joins: jimeh (jimeh@matrix.bah.io)
[03:02:24] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[03:15:02] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[03:16:05] <havenwood> nakilon: Pagination... what a pain! Wrote this while exploring various options to REST pagination, heh. https://gist.github.com/havenwood/58838bbcc5e463b0c3594b16953aa022
[03:17:21] <havenwood> If the API won't tell you the page count up front, you have to jump through frustrating hoops to make most pagination gems work.
[03:17:28] <nakilon> mindblowing.jpg
[03:18:34] <nakilon> initially I hopes when it's the last page the cursor will be nil, but it fact it's equal to total items count and so it was stuck in the end lol
[03:18:39] <nakilon> *hoped
[03:19:12] <havenwood> hah, yeah, I'm accustomed to `nil` when there's no cursor too
[03:19:51] <nakilon> https://dpaste.org/vH7G/slim
[03:21:13] <havenwood> nakilon: That was actually the sane part of the code. You should see the "ReverseEnumeratorProxy" to share it between Threads, since Enumerator is Fiber backed and can't be resumed across Threads. >.>
[03:21:54] <nakilon> _<>
[03:22:30] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[03:22:42] <havenwood> def paginate(page:, per_page: @per_page) = lazy.flat_map(&:to_a).drop(page.pred * per_page).first(per_page)
[03:23:11] <havenwood> nakilon: ^ then the memoized enumerator doesn't actually make API calls for pages it has seen
[03:24:32] <havenwood> nakilon: I got API cursor-based pagination working in Rails with that ^ and Pagy
[03:25:13] <havenwood> It was a yak shave, and too insane for prod, but good to know we *can*.
[03:25:35] <havenwood> I mean, it works. Fine for prod, but not fine to suggest others to use in prod. :P
[03:25:39] <nakilon> do you mean it does not do API calls when you drop the pages in that snippet?
[03:26:35] <havenwood> nakilon: Yeah, like if you `paginate(page: 2, per_page: 10)` and any of those 10 were already fetched, it won't re-hit the API — it'll start from where it left off.
[03:26:40] <nakilon> like... flat_map create something droppable but does not initialize items unless you ask to?
[03:27:08] <nakilon> ah
[03:27:42] <havenwood> I look forward to Enumerators being sharable between Threads.
[03:27:51] <havenwood> (Assuming they ever will be.)
[03:28:23] <havenwood> The current Fiber-backed implementation is a bit leaky.
[03:28:45] <nakilon> oh crap: HTTP error #403 {"status":11400,"error":"userBlocked","message":"This account has been blocked due to account abnormality detected forever. To unblock please contact us at customer@
[03:29:36] <havenwood> :O
[03:29:46] <havenwood> "detected forever"
[03:30:19] <nakilon> probably "blocked #{reason} forever"
[03:30:33] *** Joins: jsnwesson (~jsnwesson@2600:1700:19e9:8a10:906d:8f60:546e:eca4)
[03:30:33] <nakilon> it's chinese service 
[03:30:33] <havenwood> yup
[03:30:47] <nakilon> weird words order is possible
[03:31:08] <havenwood> "blocked #{reason} forever" is at least poetic
[03:32:00] *** Quits: jsnwesson (~jsnwesson@2600:1700:19e9:8a10:906d:8f60:546e:eca4) (Client Quit)
[03:34:29] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[03:45:52] <nakilon> oh it's ok, it's not me who is poetically blocked, it's the page of the user I try to read
[03:51:04] <ox1eef> IRC, where east meets west.
[04:00:52] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:03:26] <nakilon> I want to draw a bar plot with X axis going in the middle with two sequences of bars -- one color bars up and another color bars down from the axis
[04:05:02] <nakilon> should I interpolate the data from ruby to html as a json literal for chartjs like I usually do and learn to render another type of plots or should I use gnuplot? their manual is 400 pages long...
[04:07:20] <ox1eef> i've been using HTML5's canvas for something vaguely similar. It is pretty fun to learn.
[04:08:44] <nakilon> do you mean you drew rects manually?
[04:08:57] <ox1eef> yep
[04:09:03] <nakilon> _<>
[04:09:50] <ox1eef> and it can do much more, it's worth having in your toolbox
[04:11:15] <nakilon> I can't find what I need neither in gnuplot manual nor here https://github.com/red-data-tools/GR.rb
[04:11:41] <ox1eef> i dunno about gnuplot
[04:13:44] *** Quits: havenwood (~havenwood@about/ruby/havenwood) (Quit: The Lounge - https://thelounge.chat)
[04:14:25] *** Joins: havenwood (~havenwood@about/ruby/havenwood)
[04:34:26] *** Joins: bluedust (~bluedust@103.161.144.94)
[04:38:55] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 256 seconds)
[04:56:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:59:03] *** Quits: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie) (Read error: Connection reset by peer)
[04:59:28] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[05:03:46] *** Joins: fredlinhares (~fredlinha@2804:14c:5ba4:4adf::1001)
[05:05:01] *** Quits: pgib (~textual@173.38.117.86) (Ping timeout: 240 seconds)
[05:08:19] <adam12> I want to extend rdoc but I'm already not happy. Bleh.
[05:08:25] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:13:25] <ox1eef> has rdoc moved on from the darkfish template
[05:23:02] <nakilon> hm, I've got a thread problem
[05:38:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:39:23] <nakilon> I minified the problematic code to this https://dpaste.org/MSVS/slim
[05:41:23] <nakilon> and if I order this as "Thread.new do cache_json.call do delayed.call do" I'll spawn user.size amount of threads immediately
[05:41:41] <nakilon> that is higher than ulimit and will cause an error
[05:45:53] *** Joins: constxd_ (~brad@142.134.38.68)
[05:51:43] <mooff> nakilon, is each_with_progressbar more like map_with_progressbar?
[05:56:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:57:43] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[05:58:38] <mooff> i think you're spawning user.size amount of threads immediately in the paste already
[05:59:15] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[06:00:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:02:09] <mooff> sorry, now i see
[06:04:54] <mooff> in the first form, put next if File.exist? "#{id}.json" before delayed.call
[06:09:38] <mooff> i think that's the quick solution ^ at least the one that avoids e.g. Queue, a fixed thread pool
[06:10:38] *** Joins: oxfuxxx (~oxfuxxx@pop.92-184-110-109.mobile.abo.orange.fr)
[06:11:04] <mooff> i think to be robust on a cold start you might need a thread pool + Queue anyway
[06:11:05] *** Quits: oxfuxxx (~oxfuxxx@pop.92-184-110-109.mobile.abo.orange.fr) (Client Quit)
[06:11:15] <mooff> don't have more time to analyze, sorry :)
[06:15:23] *** Quits: fredlinhares (~fredlinha@2804:14c:5ba4:4adf::1001) (Quit: WeeChat 3.4)
[06:17:01] *** Joins: Pipip (~Pip@user/Pipip)
[06:27:10] <nakilon> the only solution I see currently is to teach the cache_json to see that yielded result is a Thread and spawn another Thread for delayed to file write
[06:27:22] <nakilon> *delayed file write
[06:27:36] <nakilon> that is ugly and doubles the number of thread for no obvious reason
[06:28:36] <nakilon> or maybe I should go for the "spawn users.size threads" but replacing them with Fibers that I unfortunately don't remember how to use
[06:29:26] *** Quits: duderonomy (~duderonom@c-73-158-190-156.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[06:30:12] <nakilon> though probably fibers won't make requests go in parallel so it won't work
[06:34:24] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[07:00:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:12:04] <havenwood> nakilon: Fibers can make requests parallel.
[07:13:04] <havenwood> nakilon: Check out the Async gems. Basic Async works with any Ruby HTTP client or there's async-http.
[07:14:05] <havenwood> nakilon: https://github.com/socketry/async-http#usage
[07:14:36] <havenwood> https://socketry.github.io/async/guides/getting-started/index.html
[07:26:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:32:42] *** Quits: foxxx0 (~foxxx0@archlinux/trusteduser/foxxx0) (Ping timeout: 260 seconds)
[07:35:37] *** Joins: foxxx0 (~foxxx0@archlinux/trusteduser/foxxx0)
[07:38:09] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[07:44:17] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[07:48:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[08:28:36] *** Joins: bluedust (~bluedust@103.161.144.94)
[08:31:19] *** Joins: Leon_ (~Leon@249.sub-174-198-197.myvzw.com)
[08:31:43] *** Leon_ is now known as Guest6768
[08:34:20] *** Quits: leonthemisfit (~Leon@user/leonthemisfit) (Ping timeout: 250 seconds)
[08:36:59] *** Joins: duds-_ (~duds-@gateway/tor-sasl/duds)
[08:37:27] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[08:39:49] *** duds-_ is now known as duds-
[08:39:58] *** Joins: bluedust_ (~bluedust@185.248.85.40)
[08:40:11] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr) (Read error: Connection reset by peer)
[08:43:50] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr)
[08:43:53] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 256 seconds)
[09:46:18] *** Joins: fef (~thedawn@user/thedawn)
[10:32:01] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[10:38:49] *** Joins: _ht (~quassel@2a02:a468:b619:1:b63a:bf2b:8ee:fbf2)
[10:39:18] *** Quits: Pipip (~Pip@user/Pipip) (Remote host closed the connection)
[11:08:59] *** Joins: bluedust (~bluedust@103.161.144.94)
[11:12:30] *** Quits: bluedust_ (~bluedust@185.248.85.40) (Ping timeout: 250 seconds)
[11:36:07] *** Joins: Bounga (~nico@82-65-32-175.subs.proxad.net)
[11:41:48] *** Joins: Rounin (~david@84.212.130.215)
[12:37:07] *** Joins: dviola (~diego@user/dviola)
[12:43:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:05:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[13:06:05] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[13:09:45] *** Joins: gproto23_ (~gproto23@user/gproto23)
[13:11:15] *** Joins: Leon_ (~Leon@249.sub-174-198-197.myvzw.com)
[13:11:39] *** Leon_ is now known as Guest6533
[13:14:16] *** Quits: Guest6768 (~Leon@249.sub-174-198-197.myvzw.com) (Ping timeout: 250 seconds)
[13:30:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:33:16] *** Joins: bluedust_ (~bluedust@185.248.85.41)
[13:36:22] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[14:10:05] <nakilon> havenwood do you mean I just replace my Thread with Async do and then .wait?
[14:10:09] <nakilon> instead of .value
[14:13:53] <gr33n7007h> nakilon: that should work (i think :)) looking from the code yesterday.
[14:15:44] *** Joins: ferr_ (~ferr@185.65.50.152)
[14:15:57] *** Quits: fercell (~ferr@185.65.50.162) (Ping timeout: 240 seconds)
[14:16:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[14:17:47] <gr33n7007h> hang on, that'll make become synchronous though.
[14:18:34] <gr33n7007h> nakilon: better wait until havenwood or someone with more knowledge of the sync lib.
[14:18:42] <gr33n7007h> *async
[14:22:30] *** Joins: fercell (~ferr@185.65.50.154)
[14:23:10] *** Quits: ferr_ (~ferr@185.65.50.152) (Ping timeout: 250 seconds)
[14:23:15] <gr33n7007h> nakilon: https://imgur.com/a/YFWRxsW
[14:29:01] *** Joins: fef (~thedawn@user/thedawn)
[14:30:03] <nakilon> I mean array.map{ Async{ .. } }.each(&:wait)
[14:32:38] <gr33n7007h> nakilon: tbh, i'm new to this lib too. i'd recommend waiting until havenwood wakes up, he's kinda knows this lib well :)
[14:57:56] <g_sg> hi all, i ran into an interesting quirk with UTF-8 handling in ruby
[14:58:02] <g_sg> could someone explain this behaviour?
[14:59:13] <g_sg> https://paste.sr.ht/~gg/48a1bc386fbef95ff4105c944a3c99fc7045b47b
[15:00:36] *** Joins: royo25 (~supergeek@user/royo25)
[15:00:49] <g_sg> my expectation was that fp.readchar would return the same as "☕️", but that test actually fails
[15:02:11] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:02:44] *** Quits: Byteflux (~byte@byteflux.net) (Read error: Connection reset by peer)
[15:03:01] *** Joins: Byteflux (~byte@byteflux.net)
[15:03:01] <nakilon> g_sg print fp.encoding
[15:03:18] <nakilon> if it's not utf-8 then you'll have to pass encoding: "utf-8" in file.open
[15:03:53] <nakilon> maybe your ruby environment does not default to utf
[15:03:58] *** Joins: constxd_ (~brad@142.134.38.68)
[15:07:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:09:14] <g_sg> hmmm good pointer. i don't think IO or File have an #encoding method (getting an error), but let me see if there's something similar 
[15:10:39] <g_sg> fp.external_encoding returns "UTF-8"
[15:11:13] <g_sg> STDOUT.external_encoding is nil, however
[15:12:09] *** Quits: royo25 (~supergeek@user/royo25) (Quit: Bye)
[15:12:14] <nakilon> I'm being stupid today; how do I map(&:call) the [->{sleep rand; 1},->{sleep rand; 2},->{sleep rand; 3}] with .with_progressbar
[15:12:51] *** Joins: royo25 (~supergeek@user/royo25)
[15:13:09] <nakilon> g_sg what about .getc
[15:14:14] <g_sg> same
[15:14:17] <g_sg> <"☕️"> expected but was <"☕">
[15:16:02] <g_sg> "☕️".bytes # => [226, 152, 149, 239, 184, 143]
[15:16:20] <g_sg> fp.getc.bytes # => [226, 152, 149]
[15:16:30] <g_sg> wat.png
[15:17:29] <nakilon> [->{sleep rand; 1},->{sleep rand; 2},->{sleep rand; 3}].each.with_progressbar(&:call)  # returns [<Proc>, ...] instead of [1,2,3] ..(
[15:21:56] <nakilon> oh, nvm, s/each/map
[15:23:32] *** Joins: fef (~thedawn@user/thedawn)
[15:25:57] *** Joins: lispy (~lispy4@84.69.59.93)
[15:35:55] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:36:37] *** Joins: unknown__ (~thedawn@user/thedawn)
[15:44:01] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[15:57:03] <nakilon> hm, I don't get it, Async{} waits, I even checked that I'm using ruby 3
[16:02:38] <nakilon> should I wrap in Async{|task| task.async{ ?
[16:11:03] <nakilon> undefined method `new' for Async:Module
[16:11:44] <gr33n7007h> nakilon: you use task.async to spawn more Async tasks that run concurrently to each other. 
[16:12:08] <gr33n7007h> nakilon: Async is a method on Kernel.
[16:12:22] <nakilon> I don't want to wrap everything in Async do
[16:12:41] <nakilon> because I want to wait for all tasks and return an array of results
[16:13:17] *** Quits: In0perable (~PLAYER_1@fancydata.science) (Quit: All your buffer are belong to us!)
[16:13:39] <gr33n7007h> nakilon: use a barrier then.
[16:14:16] <gr33n7007h> nakilon: https://github.com/socketry/async-http#multiple-requests
[16:15:32] <nakilon> hm "00:42:02 <havenwood> nakilon: yes, looking at the code it looks like you can do: task = Async::Reactor.new" -- hm, it waits for every task to finish
[16:16:45] <nakilon> gr33n7007h that example is still wrapped in Async do
[16:17:07] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[16:17:47] <gr33n7007h> nakilon: i'm not sure what you're trying to acheive tbh.
[16:18:03] <nakilon> the problem is that Async do does not return what is in the block even if you put the .wait on all asyncs inside
[16:18:13] <nakilon> I want an array of results
[16:18:17] <nakilon> outside of Async do
[16:23:58] <gr33n7007h> nakilon: hold up, let me play around.
[16:24:33] <nakilon> this does not run in parallel https://dpaste.org/3uZF/slim
[16:26:49] <nakilon> oh wow, found somewhere Sync instead of Async
[16:27:19] <nakilon> looks like it returns the value from the block
[16:30:57] *** Quits: bluedust_ (~bluedust@185.248.85.41) (Remote host closed the connection)
[16:35:38] *** Joins: goldfish (~goldfish@user/goldfish)
[16:46:19] *** Joins: bluedust (~bluedust@103.161.144.94)
[16:53:29] <gr33n7007h> nakilon: do you manage to solve it?
[16:56:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:09:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:13:28] *** Joins: wiz42 (~wiz@quasar.mc2-technologies.com)
[17:13:46] <nakilon> gr33n7007h yep, seems to be working as intended  https://dpaste.org/XYqw/slim
[17:15:20] *** Joins: IsoLinCHiP (~chip@user/IsoLinCHiP)
[17:15:47] <gr33n7007h> nakilon: ah, very nice :)
[17:18:17] <nakilon> so this returns thousands of results that are being cached and if there is no cache it waits at least 100msec after previous cache miss
[17:18:19] <IsoLinCHiP> Hi. Any recommendations for a library to assist in creating console based interactive list manipulation tools? I have various tasks that would benefit from having a list I can page through with cursor keys, while having either a detail/preview panel showing info pertaining to that item and then selecting one or many items to execute actions on them.
[17:18:25] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[17:19:25] <nakilon> IsoLinCHiP either cli-ui or tty-prompt
[17:19:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:19:39] <gr33n7007h> nakilon: you do know using Sync is a synchronous operation making `end.map.with_progressbar(&:wait)` redundant, because it waits for the block to complete anyway.
[17:20:10] <nakilon> cli-ui looks more polished but when I asked an obvious feature from tty-prompt I've got some weird rejection response
[17:20:21] <nakilon> so I'm probably back to tty-prompt
[17:20:41] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[17:21:25] <nakilon> gr33n7007h oh, nice, indeed looks like it's waiting for all that was started inside
[17:22:53] <nakilon> but then how do I show the progress_bar?
[17:23:50] <nakilon> hm the progressbar does not work actually ..\
[17:24:10] <IsoLinCHiP> nakilon: thanks for the cli-ui recommendation, hadnt come across that yet. Ive used tty-prompt for some projects already, its preatty neat. I have however not yet been able to create something that would show a preview in a seperate panel depending on the current selection. Would you think that might be possible with cli-ui?
[17:24:38] <nakilon> ffs dpaste captcha
[17:24:46] <IsoLinCHiP> Specifically Im really struggling to find a convenient 'windowing' toolkit
[17:24:57] <nakilon> looks like progressbar works if put one level inside the block
[17:25:34] <nakilon> IsoLinCHiP if it's not in readme, then probably not
[17:27:06] *** Joins: bluedust_ (~bluedust@86.106.136.217)
[17:27:46] <nakilon> nice, 6000 requests one by one was going to take 2 hours yesterday, now it should be 10 minutes
[17:28:39] <havenwood> you
[17:28:51] <gr33n7007h> nakilon: :P yeah, async does seems like a real game changer
[17:28:53] <nakilon> also I could even reduce the 100msec since by net lib parses the x-ratelimit header
[17:29:01] <havenwood> nice
[17:29:47] <nakilon> gr33n7007h I could do the same semaphore with Thread but yeah, I don't want to be limited with 1024 or whatever
[17:30:22] <gr33n7007h> nakilon: async has the potential for millions :)
[17:30:48] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[17:31:50] <nakilon> I wonder why it does not interrupt on ^C though
[17:32:00] <nakilon> ..\
[17:32:04] <gr33n7007h> nakilon: it doesn't?
[17:32:15] <nakilon> nope, it's stuck
[17:32:51] <nakilon> https://i.imgur.com/B79UDWN.png
[17:33:37] <gr33n7007h> nakilon: how many tasks are you spawning?
[17:33:47] <nakilon> 1 per 100msec
[17:34:07] <nakilon> it has spawned like 700
[17:35:19] <nakilon> there is no progressbar print anymore and htop is low so it's not building any crazy backtrace, it's just stuck
[17:35:37] <gr33n7007h> hmm, weird.
[17:36:40] <nakilon> cpu 0.2%
[17:38:26] *** Quits: wiz42 (~wiz@quasar.mc2-technologies.com) (Quit: Client closed)
[17:44:19] <nakilon> adding   Signal.trap("INT"){ task.interrupt }  does not work
[17:54:45] *** Joins: easbarba (~user@2804:1b2:82:9e45:4297:f578:559c:973f)
[18:14:39] <rapha> if you wanted to implement something like midnight commander (=> horizontal split, left panel and right panel) in ruby, would you use the curses gem and go by foot, or is there something more specialized for that?
[18:19:35] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[18:24:04] <nakilon> my script now hangs in some another place, looks like I open too many network connections so I should make it all in some different way.... or maybe add another semaphore with n=100
[18:45:22] <nakilon> so I merged the delayed and request lambdas from my yesterday code
[18:45:25] <nakilon> https://paste.the-compiler.org/view/raw/fbe19da8
[18:45:54] <nakilon> and looks like ^C is just interrupting one task at a time
[18:57:03] *** Quits: kinduff (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[19:08:44] *** Joins: John_Ivan (~John_Ivan@31-187-33-75.dynamic.upc.ie)
[19:27:12] *** Joins: constxd_ (~brad@142.134.38.68)
[19:30:05] *** Quits: royo25 (~supergeek@user/royo25) (Quit: Bye)
[19:31:30] <micah> where can I see what `rake db:schema:load` actually does? 
[19:34:48] *** Joins: graywolf (~wolf@user/graywolf)
[19:36:34] *** unknown__ is now known as fef
[19:44:00] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[19:44:22] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[19:47:18] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 250 seconds)
[19:48:17] *** Quits: Bounga (~nico@82-65-32-175.subs.proxad.net) (Ping timeout: 240 seconds)
[19:51:11] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[19:51:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[19:55:47] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[19:56:50] <nakilon> micah try this https://stackoverflow.com/a/15814355/322020
[20:02:17] <micah> nakilon: thanks!
[20:21:37] *** Joins: lim (~lim@cpc104498-sgyl40-2-0-cust215.18-2.cable.virginm.net)
[20:44:58] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[20:48:23] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Client Quit)
[20:49:42] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[20:56:25] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Ping timeout: 256 seconds)
[20:58:24] *** Joins: goldfish (~goldfish@user/goldfish)
[21:01:10] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:03:56] *** Joins: mdemo (~mdemo@user/mdemo22)
[21:10:20] *** Joins: Guest35 (~Guest35@2601:82:c200:9f20:a5b9:a177:92eb:fa93)
[21:11:32] *** Quits: Guest35 (~Guest35@2601:82:c200:9f20:a5b9:a177:92eb:fa93) (Client Quit)
[21:23:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[21:29:48] *** Joins: infinityfye (~infinityf@41.45.233.27)
[21:33:52] *** Joins: hanzo (uid532183@user/hanzo)
[21:42:09] *** Joins: bluedust (~bluedust@117.207.236.117)
[21:43:05] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[21:45:53] *** Quits: bluedust_ (~bluedust@86.106.136.217) (Ping timeout: 256 seconds)
[21:58:26] *** Quits: bluedust (~bluedust@117.207.236.117) (Remote host closed the connection)
[22:02:06] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Remote host closed the connection)
[22:05:08] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:05:17] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[22:05:41] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:05:50] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[22:06:14] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:06:23] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[22:06:47] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:06:56] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[22:07:54] *** Joins: vit (~vit@chello085216193138.chello.sk)
[22:08:11] *** justIrresolute is now known as justJustache
[22:08:18] *** vit is now known as Guest9014
[22:16:39] <IsoLinCHiP> What dependencies do I need to be able to use Curses::Menu? Documentation seems a bit thin here.
[22:21:14] <IsoLinCHiP> Or is this a debian packaging issue, that it doesnt seem to be available?
[22:25:28] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 250 seconds)
[22:26:01] <havenwood> IsoLinCHiP: Do you have the curses gem installed? It no longer ships with the Ruby stdlib.
[22:30:17] <IsoLinCHiP> yes, I installed the debian package ruby-curses. Trying to obtain it through `gem install curses` did not work. I wont go into details, it was a nightmare
[22:30:38] *** Joins: infinity_fye (~infinityf@156.212.251.144)
[22:30:40] *** Quits: infinityfye (~infinityf@41.45.233.27) (Ping timeout: 250 seconds)
[22:33:18] <IsoLinCHiP> the simple examples like `rain.rb` are working, but menu and forms are not, as the Constants are not defined.
[22:39:08] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.4)
[22:50:57] *** Joins: bluedust (~bluedust@117.207.236.117)
[22:53:41] *** Joins: ouestbillie (~gallup@142.169.82.16)
[22:59:45] *** Joins: bluedust_ (~bluedust@37.120.198.153)
[23:03:21] *** Quits: bluedust (~bluedust@117.207.236.117) (Ping timeout: 256 seconds)
[23:05:18] <nakilon> I hate that ruby 3 irb prints arrays vertically -- can I disable it?
[23:05:51] <nakilon> it's stupid to waste 10 pages for .methods instead of one
[23:09:11] *** Quits: ouestbillie (~gallup@142.169.82.16) (Ping timeout: 256 seconds)
[23:20:42] *** Joins: ouestbillie (~gallup@142.169.82.16)
[23:40:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:40:57] *** Quits: infinity_fye (~infinityf@156.212.251.144) (Quit: Leaving)
[23:41:33] *** Parts: ouestbillie (~gallup@142.169.82.16) ()
[23:45:28] *** Joins: Bounga (~nico@82-65-32-175.subs.proxad.net)
