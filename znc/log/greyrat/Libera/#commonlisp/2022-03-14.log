[00:02:17] *** Joins: gaqwas (~john@dynamic-095-118-097-023.95.118.pool.telefonica.de)
[00:06:37] <Oladon> drbluefall: What're you trying to do with a root route? I just append to *api-dispatch-table* for my root route.
[00:07:18] <Oladon> Or you may be able to get by just by setting snooze:*home-resource*
[00:07:44] <drbluefall> I'm just trying to get my bearings
[00:07:49] <Oladon> Gotcha
[00:08:12] <Oladon> I can show you an example from mine if you'd like
[00:08:14] <drbluefall> My language before this was Rust, and I used a lot of actix-web
[00:08:26] <drbluefall> That would be appreciated, yes.
[00:11:16] <Oladon> It's a bit messy, but: https://pastebin.com/TyEHkyy0
[00:11:41] <Oladon> Let me know if you have any questions -- I left line 3 in there so you can see the most basic root route setup
[00:11:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[00:35:57] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:37:09] *** Joins: lisp123 (~lisp123@120.154.103.52)
[00:42:40] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 272 seconds)
[00:43:43] <drbluefall> interesting
[00:44:03] <drbluefall> question is... how do I adapt that to Clack ?
[00:48:54] <drbluefall> op
[00:48:56] <drbluefall> nvm
[00:49:12] <drbluefall> setting `snooze:*home-resource*` works
[00:55:45] <Oladon> :)
[01:02:51] *** Quits: Bike (~Bike@152.7.255.195) (Quit: Connection closed)
[01:07:17] *** Joins: Alfr (~Alfr@user/alfr)
[01:10:24] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:19:21] *** Quits: cage (~cage@dynamic-adsl-94-34-137-6.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:19:34] *** Joins: thegreatcatadore (~thegreatc@69.151.207.13)
[01:22:46] <drbluefall> ^~^
[01:23:37] <drbluefall> (sidenote)
[01:23:56] <drbluefall> I really, *really* wish there was an equivalent of `docs.rs` for CL
[01:28:48] <sterni> https://quickref.common-lisp.net/index-per-library.html is the closest you can get, I suppose
[01:35:39] *** Quits: wacki (~wacki@87.122.85.34) (Quit: Leaving.)
[01:41:00] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[01:42:22] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:42:26] *** Joins: Bike (~Bike@71.69.170.70)
[01:45:43] *** Joins: brocolis (~chatzilla@user/brocc)
[01:57:08] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:08:42] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 252 seconds)
[02:10:42] *** Quits: gaqwas (~john@dynamic-095-118-097-023.95.118.pool.telefonica.de) (Ping timeout: 272 seconds)
[02:10:42] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 272 seconds)
[02:11:07] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:13:39] *** Joins: christos (~christos@92.238.115.201)
[02:19:17] *** Quits: christos (~christos@92.238.115.201) (Quit: Client closed)
[02:20:29] *** Joins: christos (~christos@92.238.115.201)
[02:24:06] *** Quits: christos (~christos@92.238.115.201) (Client Quit)
[02:25:59] *** Joins: lisp123 (~lisp123@120.154.103.52)
[02:30:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[02:33:37] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[02:34:38] *** Joins: christos (~christos@92.238.115.201)
[02:35:09] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:35:11] <christos> hello, I am trying to load an asdf package for which the .asd file is in the current directory.
[02:35:29] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[02:36:29] <christos> but when I do (asdf:load-system '#:my-package) I get "Component #:MY-PACKAGE not found"
[02:38:00] <yitzi> You probably need to tell asdf to search that folder. https://asdf.common-lisp.dev/asdf.html#Configuring-ASDF
[02:38:16] *** Joins: notzmv (~zmv@user/notzmv)
[02:39:14] *** Joins: eddof13 (~eddof13@192.154.196.148)
[02:39:54] *** Joins: Giovanni (~Giovanni@176.55.166.222)
[02:40:36] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[02:41:27] <yitzi> Or if you use quicklisp then you can put your project in `~/quicklisp/local-projects/` ... I personally make config file  `~/.config/common-lisp/source-registry.conf` and put something like this in it https://plaster.tymoon.eu/view/2984#2984
[02:42:00] *** Quits: eddof13 (~eddof13@192.154.196.148) (Client Quit)
[02:42:16] *** Joins: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl)
[02:42:21] *** Quits: christos (~christos@92.238.115.201) (Quit: Client closed)
[02:48:04] *** Quits: thegreatcatadore (~thegreatc@69.151.207.13) (Ping timeout: 272 seconds)
[02:51:29] *** wmblathe_ is now known as wmblathers
[02:54:44] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[03:04:24] *** Quits: lisper29 (~vibs29``@84-105-244-73.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[03:08:11] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Remote host closed the connection)
[03:09:05] *** Joins: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[03:12:23] *** Joins: christos (~christos@92.238.115.201)
[03:13:14] <christos> yitzi I am looking through the asdf docs but I can't find anything
[03:13:53] <christos> (regarding how to check the asdf configuration)
[03:18:10] *** Joins: Bike (~Bike@71.69.170.70)
[03:18:23] *** Quits: christos (~christos@92.238.115.201) (Quit: Client closed)
[03:30:40] *** Joins: christos (~christos@92.238.115.201)
[03:37:59] *** Joins: akoana (~ah@user/akoana)
[03:48:12] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:49:54] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 252 seconds)
[03:51:24] *** Joins: Oladon (~olad@98.43.81.226)
[03:58:49] *** Quits: christos (~christos@92.238.115.201) (Quit: Client closed)
[03:58:55] *** Joins: thegreatcatadore (~thegreatc@69.151.207.13)
[03:59:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[04:00:12] *** Quits: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[04:00:48] *** Joins: igemnace (~ian@user/igemnace)
[04:01:48] *** Joins: zacque (~zacque@124.82.52.252)
[04:14:08] *** Joins: lisp123 (~lisp123@120.154.103.52)
[04:16:32] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:18:30] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[04:26:18] *** Quits: brocolis (~chatzilla@user/brocc) (Quit: Quit)
[04:42:42] *** Quits: mingus (~jan-magnu@auth-147-199.anyconnect.uib.no) (Ping timeout: 272 seconds)
[04:49:25] *** Joins: mingus (~jan-magnu@auth-147-98.anyconnect.uib.no)
[05:02:41] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:05:54] *** Joins: jmes (~james@216.154.22.238)
[05:08:38] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[05:09:15] *** Quits: thegreatcatadore (~thegreatc@69.151.207.13) (Quit: thegreatcatadore)
[05:14:00] <jmes> Are there any math rendering libraries in CL? I'm looking for something like MathJax but for use outside a browser.
[05:24:17] <_death> run TeX?
[05:28:57] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 272 seconds)
[05:29:07] <jmes> That could be an option. I would need to make it live update without throwing errors on malformed input and stuff.
[05:29:42] <_death> maybe look at emacs package texfrag for ideas
[05:30:08] <jmes> Thanks, I'll look into it :)
[05:30:55] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[05:41:48] *** Joins: thegreatcatadore (~thegreatc@69.151.207.13)
[05:44:08] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[05:49:47] *** Joins: Oladon (~olad@98.43.81.226)
[05:58:50] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[06:02:28] *** Joins: lisp123 (~lisp123@120.154.103.52)
[06:06:46] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[06:13:04] *** Joins: Inline__ (~Inline@p200300cd47082500eff0453775466c26.dip0.t-ipconnect.de)
[06:15:26] *** Quits: Inline (~Inline@p200300cd473ac50039f51e8a2d5e1728.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:38:15] *** Joins: Bike (~Bike@71.69.170.70)
[06:49:30] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[06:54:50] *** Quits: thegreatcatadore (~thegreatc@69.151.207.13) (Quit: thegreatcatadore)
[06:58:04] *** Joins: thegreatcatadore (~thegreatc@69.151.207.13)
[07:02:28] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[07:03:05] <hashfunc569> would it be a good idea (or is it common) to have test cases alongside the implementation source code? maybe using a reader macro?
[07:04:26] <hashfunc569> e.g., (defun square (x) (* x x)) #TEST(assume 25 (square 5))
[07:07:45] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[07:10:41] <Guest74> I've only seen tests in separate packages/systems.
[07:12:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[07:13:47] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[07:20:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:22:04] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:22:32] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[07:26:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[07:31:05] <beach> Good morning everyone!
[07:31:29] <beach> jmes: You might want to try Climaxima.
[07:31:54] <beach> Or, perhaps just the rendering engine of Climaxima.
[07:37:23] <jmes> beach: Climaxima looks interesting - thanks and good morning beach
[07:38:27] <beach> Sure.  Talk to loke[m] for more information.
[07:38:45] <loke[m]> Yes, please let me know if you have questions.
[07:41:35] <jmes> loke[m]: first I'm interested in trying it out so I'll have to build it. I'll make a package for my distribution, then play around with it, then bother you later I'm sure :P
[07:41:54] <loke[m]> jmes: If you just want to try it out, just install the flatpak from flathub.
[07:42:07] *** Joins: semz_ (~semz@user/semz)
[07:42:52] <jmes> I'm OCD about not using flatpaks and stuff. I usually package stuff to satisfy that (though I've submitted to the ease of quicklisp for pure lisp stuff)
[07:42:53] *** Quits: thegreatcatadore (~thegreatc@69.151.207.13) (Quit: thegreatcatadore)
[07:43:38] <loke[m]> jmes: Why not using flatpaks? They quite convenient, and provides better isolation than normal packages.
[07:43:48] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[07:43:52] <loke[m]> Anyway, if you want to build it from source, you need to make sure some dependencies are installed:
[07:44:18] <loke[m]> First, you need to build Maxima from source and install it somewhere.
[07:44:31] <jmes> ¯\_(ツ)_/¯ I'm a masochist maybe (gentoo user)
[07:44:34] <loke[m]> Next, create a symlink in quicklisp/local-projects to the Maxima source directory
[07:44:53] *** Quits: semz (~semz@user/semz) (Ping timeout: 256 seconds)
[07:45:01] <loke[m]> Then, make sure that the freetype renderer is activated for McCLIM.
[07:45:31] <loke[m]> (this requires that you have the development packages for freetype, fontconfig and harfbuzz installed or you'll get a build error)
[07:46:01] <loke[m]> At this point you can load and build the program.
[07:47:00] <loke[m]> However, you may wish to run the documentation parser which converts the Maxima documentation to sexps, this is done by quickloading the package "infoparser" and then run (infoparser:generate-doc-directory)
[07:47:27] <loke[m]> You run the application using (maxima-client:maxima-client)
[07:47:52] <jmes> okay thanks I'll do that! This is another reason packaging it makes sense because I can actually install the deps and all that automatically
[07:48:49] <loke[m]> Note that you'll get compile errors if the freetype renderer isn't activated, so add (push :mcclim-ffi-freetype features) to %HOME/.sbclrc
[07:49:25] <loke> Sorry, make that (push :mcclim-ffi-freetype *features*)
[07:49:56] <loke[m]> And $HOME of course
[07:50:01] <jmes> gotcha
[07:50:35] <loke[m]> This is what it's supposed to look like when it's working: https://peertube.functional.cafe/w/qnx1onPEx9LCtDP3wFqjWz
[07:54:57] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:57:09] *** Joins: mayuresh (~kathe@49.32.255.204)
[07:57:35] <mayuresh> good morning everyone. :)
[07:57:57] <jmes> loke[m]: Impressive!
[08:00:12] <mayuresh> anyone here worked through weitz's book?
[08:00:26] <mayuresh> i think he's the one who wrote that book on algorithms in common lisp. right?
[08:00:38] <loke[m]> mayuresh: I have it
[08:01:00] <mayuresh> googled around but couldn't find a table-of-contents.
[08:01:15] <mayuresh> ah, loke[m] could you share what's covered therein?
[08:01:38] <loke[m]> Let me get it off the shelf
[08:01:50] <mayuresh> loke[m]: cool. thanks. :)
[08:02:26] <loke[m]> OK, what do you want to know?
[08:03:15] <loke[m]> The toc can be found here: https://books.google.de/books?id=FPxSCwAAQBAJ&printsec=frontcover#v=onepage&q&f=false
[08:03:51] <loke[m]> Actually a large chunk of the book is there
[08:04:08] <mayuresh> ah, right, that's the book on recipes.
[08:04:24] <mayuresh> actually, i'm looking for a book on algorithms using common lisp.
[08:04:38] <mayuresh> okay, found it, written by domkin.
[08:04:46] <mayuresh> does anyone here have that book?
[08:04:59] <mayuresh> loke[m]: thanks for that link though. :)
[08:05:12] <loke[m]> jmes: let me know if you have any problems
[08:07:58] <mayuresh> "programming algorithms in lisp" by vsevolod domkin. does it use 'cl'?
[08:08:19] <loke[m]> Vsevolod is a CL'er, so I'd expect so?
[08:08:36] <mayuresh> the google books page for that book doesn't have any peep inside thingy.
[08:08:54] <Guest74> uses a lot of rutils if i'm recalling correctly.
[08:10:59] <jmes> loke[m]: will do, I appreciate it
[08:11:16] <mayuresh> Guest74: okay. thanks for the tip. :)
[08:11:57] <Guest74> I think they also have a lot of the chapters on their blog.  Might give you an idea if you can read that stuff.  I can't.
[08:14:21] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:29:02] *** Quits: mayuresh (~kathe@49.32.255.204) (Quit: Leaving)
[08:34:53] *** Quits: Giovanni (~Giovanni@176.55.166.222) (Remote host closed the connection)
[08:43:15] *** Joins: spiaggia (~user@2a01:cb19:150:3400:419c:bf84:7772:bdd3)
[08:59:26] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[09:19:31] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[09:34:46] *** Quits: ski (~ski@remote12.chalmers.se) (Quit: Lost terminal)
[09:42:36] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[09:44:38] *** Joins: ski (~ski@remote12.chalmers.se)
[09:49:53] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.4)
[09:55:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:58:55] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[10:01:55] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[10:12:26] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:25:28] *** Quits: spiaggia (~user@2a01:cb19:150:3400:419c:bf84:7772:bdd3) (Ping timeout: 250 seconds)
[10:32:54] *** Joins: doulos05 (~user@118.43.223.253)
[10:37:33] *** Joins: robin (~robin@user/terpri)
[10:39:07] *** Joins: spiaggia (~user@2a01:cb19:150:3400:419c:bf84:7772:bdd3)
[10:44:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[10:47:22] *** Joins: gaqwas (~john@dynamic-095-118-042-157.95.118.pool.telefonica.de)
[10:51:21] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:11:26] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:12:27] *** Quits: zacque (~zacque@124.82.52.252) (Quit: Goodbye :D)
[11:14:10] *** Joins: zacque (~zacque@124.82.52.252)
[11:22:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-018-036.client.tudelft.eduvpn.nl)
[11:24:50] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 250 seconds)
[11:29:18] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[11:37:45] *** Quits: spiaggia (~user@2a01:cb19:150:3400:419c:bf84:7772:bdd3) (Quit: ERC (IRC client for Emacs 26.3))
[11:43:34] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:43:51] *** Joins: shka (~herr@109.231.3.55)
[11:47:26] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:47:41] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[11:49:12] *** Joins: aeth (~aeth@user/aeth)
[11:50:12] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[11:52:11] <doulos05> I'm having a bit of trouble writing a function. I'd like the user to be able to specify which slots on a CLOS object get printed.
[11:52:27] <doulos05> My current function looks like this: (defun test-slots (p &key slots-list) (with-slots slots-list p (format t "~A - ~A - ~A" slots-list)))
[11:53:04] <doulos05> But that doesn't work because with-slots doesn't know that slots-list is a list. Setting slots-list to a default list doesn't help.
[11:53:49] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[11:53:52] <beach> Well, WITH-SLOTS is a macro and it doesn't evaluate the first argument.
[11:54:15] *** Joins: amb007 (~a_bakic@69.151.22.93.rev.sfr.net)
[11:54:47] <beach> You probably need to iterate over the list of slots and call SLOT-VALUE for each one.
[11:56:45] <doulos05> So I'd need to collect those responses into a list and then pass the list to format?
[11:57:07] <beach> That, or iterate the call to FORMAT too.
[11:57:30] <beach> I suppose there is no restriction that everything has to be printed using a single FORMAT form.
[11:58:24] <beach> But what you want to do is strange.  First of all, slots are implementation details, so really should not be exposed that way.  Instead it is better to use accessors.
[11:59:08] <beach> Also, the term "CLOS object" is meaningless.  Every Common Lisp object is an instance of some class and classes are CLOS concepts.
[11:59:19] <doulos05> Aha
[11:59:59] <doulos05> Well, let me try to explain a bit more what I'm trying to do. I've written a project tracking program in Common lisp, it's modeled on taskwarrior.
[12:00:14] *** Quits: gaqwas (~john@dynamic-095-118-042-157.95.118.pool.telefonica.de) (Remote host closed the connection)
[12:00:16] <doulos05> What I'm trying to do is handle printing out the reports about the tasks the user needs to do.
[12:00:53] *** Joins: King_julian (~King_juli@41.1.142.79)
[12:01:03] <doulos05> So I need a way for the user to specify what columns a report contains, and then I'll use FORMAT (or something else if there's something better) to print that information out.
[12:03:09] <beach> I don't know taskwarrior nor what a project tracking program is, but there is nothing wrong with FORMAT.  What is problematic is to expose slots as they are implementation details.  The common way of accessing information provided by some object is to use functions, so in case of an instance of a standard class, such functions would sometimes be slot readers.
[12:04:25] <doulos05> Think like a command line todo app.
[12:04:38] <contrapunctus> doulos05: I wrote a program like that in Elisp 🤔 Some day I'll port it to CLIM...
[12:05:51] <doulos05> So what I should do instead is have them pass a list of the acceessor functions and them mapcar #'apply that list to generate my call to format?
[12:06:16] <doulos05> contrapunctus: Cool! Yeah, I like taskwarrior a lot, but it's terrible at the project level.
[12:06:43] <doulos05> So I'm trying to write a layer that "sits on top" of taskwarrior to allow you to keep track of projects better.
[12:07:22] <beach> You can use FUNCALL and iteration, rather than MAPCAR.  Again, I see no need to do the printing in a single call.
[12:07:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:08:17] <contrapunctus> doulos05: oh, mine is not based on TaskWarrior, but I could look into implementing that 🤔 https://tildegit.org/contrapunctus/chronometrist
[12:08:36] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:08:37] <doulos05> Ok, I think I see what you're saying. I'll go muck around and see if I can think my way out of this wet paper bag.
[12:08:40] <doulos05> Thank you!
[12:08:55] <doulos05> contrapunctus: Cool! I'll take a look
[12:10:17] <doulos05> Oh man, contrapunctus! This looks like it actually solves another problem I was noodling around. This is fantastic
[12:13:00] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 272 seconds)
[12:17:07] *** Quits: doulos05 (~user@118.43.223.253) (Ping timeout: 256 seconds)
[12:35:50] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[12:40:31] <jackdaniel> I think that "CLOS object" as a short version of "an instance of a standard-class" is something that most people understand without thinking
[12:40:58] <rotateq> hehe, this topic like some days ago ^^
[12:42:48] <jackdaniel> an instance of an instance of a standard-class even ,p
[12:45:51] <beach> No, the first thing you said.
[12:46:32] <beach> But, it could also mean a standard object (i.e., and instance of the class named STANDARD-OBJECT) which is not the same as an instance of a standard class.
[12:47:40] <beach> And since it is not clear what it means, it is preferable to use the right terminology.
[12:49:30] *** Quits: jmes (~james@216.154.22.238) (Remote host closed the connection)
[12:54:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[12:55:40] <jackdaniel> my point is that the term "clos object" is not meaningless from the conversation perspective. whether it is a good term I know your opinion about it
[12:55:47] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[12:55:55] <jackdaniel> s/term/term,/
[12:56:21] <beach> I see.
[12:56:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:59:01] *** Joins: random-nick (~random-ni@87.116.167.125)
[13:09:11] *** Joins: vats (~vats@103.158.91.1)
[14:02:03] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2e86:80a5:f58b:d1a4) (Ping timeout: 252 seconds)
[14:02:08] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[14:02:59] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a4f7:3458:36c4:ffd7)
[14:04:55] *** Joins: nature (~nature@45.32.235.173)
[14:15:09] *** Joins: rain3 (~rain3___@2a02:2f09:d105:8b00:b253:a323:f95:3d4b)
[14:30:03] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:30:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:30:44] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:31:25] *** Quits: zacque (~zacque@124.82.52.252) (Quit: Goodbye :D)
[14:31:29] *** Quits: s-liao (~s-liao@101.86.164.158) (Client Quit)
[14:31:54] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:33:04] *** Joins: razetime (~quassel@117.254.35.152)
[14:34:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[14:36:07] *** Joins: aeth (~aeth@user/aeth)
[14:37:46] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 260 seconds)
[14:38:14] *** Quits: amb007 (~a_bakic@69.151.22.93.rev.sfr.net) (Ping timeout: 260 seconds)
[14:38:36] *** Joins: amb007 (~a_bakic@69.151.22.93.rev.sfr.net)
[14:39:16] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[14:40:36] *** Quits: X-Scale (~ARM@83.223.233.31) (Ping timeout: 240 seconds)
[14:40:36] *** X-Scale` is now known as X-Scale
[14:40:57] *** Quits: razetime (~quassel@117.254.35.152) (Ping timeout: 240 seconds)
[14:41:46] *** Joins: razetime (~quassel@117.254.35.152)
[14:48:10] *** Quits: amb007 (~a_bakic@69.151.22.93.rev.sfr.net) (Ping timeout: 272 seconds)
[14:48:27] *** Joins: amb007 (~a_bakic@122.135.22.93.rev.sfr.net)
[14:50:13] *** Joins: King_julian (~King_juli@41.1.142.79)
[14:54:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[14:57:09] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[14:59:04] *** Joins: thegreatcatadore (~thegreatc@69.151.207.13)
[15:04:45] *** Quits: vats (~vats@103.158.91.1) (Ping timeout: 252 seconds)
[15:17:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:28:05] *** Joins: unyu (~pyon@user/pyon)
[15:33:37] *** semz_ is now known as semz
[15:36:29] *** Joins: rgherdt_ (~rgherdt@port-92-195-30-153.dynamic.as20676.net)
[15:36:44] *** Quits: rgherdt (~rgherdt@port-92-195-30-153.dynamic.as20676.net) (Remote host closed the connection)
[15:38:44] *** Joins: lisp123 (~lisp123@120.154.103.52)
[15:40:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:42:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:43:02] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[15:43:34] *** Joins: kevingal (~quassel@149.157.122.151)
[15:47:55] *** Quits: kevingal (~quassel@149.157.122.151) (Ping timeout: 256 seconds)
[15:48:02] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[15:57:24] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 240 seconds)
[15:57:49] *** Joins: Mandus (~aasmundo@85.112.154.250)
[16:13:52] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[16:17:10] *** Quits: thegreatcatadore (~thegreatc@69.151.207.13) (Quit: thegreatcatadore)
[16:29:38] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[16:30:00] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 252 seconds)
[16:32:24] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:33:35] *** Quits: OlCe` (~user@amontpellier-655-1-45-169.w109-210.abo.wanadoo.fr) (Remote host closed the connection)
[16:38:44] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[16:38:47] *** Quits: razetime (~quassel@117.254.35.152) (Ping timeout: 252 seconds)
[16:49:41] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[16:50:02] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:50:05] *** Joins: razetime (~quassel@117.254.34.245)
[16:51:48] *** Joins: s-liao58 (~s-liao@101.86.164.158)
[16:53:34] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 272 seconds)
[16:54:47] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[16:58:03] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 252 seconds)
[17:00:07] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[17:00:20] *** Joins: Bike (~Bike@71.69.170.70)
[17:01:06] *** Joins: s-liao (~s-liao@101.86.164.158)
[17:04:25] *** Quits: s-liao58 (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[17:12:37] *** Joins: vats (~vats@103.16.30.211)
[17:12:51] *** Joins: wacki (~wacki@87.123.136.75)
[17:23:43] *** Joins: King_julian (~King_juli@41.1.142.79)
[17:26:50] *** Joins: lisp123 (~lisp123@120.154.103.52)
[17:30:55] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[17:31:24] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[17:32:56] <drbluefall> I don't suppose there's a means of achieving wrapping arithmetic, is there?
[17:34:46] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[17:35:24] <Bike> (mod ...arithmetic... (ash 1 64))
[17:35:45] <Bike> sbcl is smart enough to compile it down to machine operations when possible
[17:35:45] <drbluefall> huh
[17:36:15] <Bike> http://sbcl.org/manual/#Modular-arithmetic actually logand might be better
[17:40:32] <edgar-rft> drbluefall: LDB/DPB are useful for fixed-bit-width arithmetic, too
[17:42:12] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 240 seconds)
[17:42:18] <drbluefall> duly noted
[17:42:52] *** Joins: OlCe (~user@amontpellier-655-1-45-169.w109-210.abo.wanadoo.fr)
[17:43:28] <edgar-rft> do you want to emulate fixed-bit-width hardware of what is the intended use-case?
[17:45:02] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[17:45:17] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:45:56] <drbluefall> what I'm attempting to do is replicate the Rust reference implementation of BLAKE3, and part of that involves wrapping addition
[17:46:35] <drbluefall> * wrapping addition around `u32`s
[17:48:59] <yitzi> Ironclad has blake2. Maybe a PR to add blake3 would help everyone vs writing a library from scratch.
[17:49:23] <yitzi> Unless you are just doing for learning purposes.
[17:49:49] <drbluefall> It's mostly a learning exercise.
[17:50:05] <yitzi> Gotcha.
[17:57:47] <edgar-rft> drbluefall: there was an SBCL-specific paper named "Efficient Hardware Arithmetic in Common Lisp" written by Alexey Dejneka and Christophe Rhodes in 2004, describing the SBCL optimisations Bike already mentioned above, what is pretty much exactly your use-case, but I stupidly cannnot find an internet link right now :-(
[17:58:11] <drbluefall> feelsbadman
[18:02:18] <edgar-rft> here's the link :-) ->https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.124.5625&rep=rep1&type=pdf
[18:02:45] <drbluefall> much appreciated ^~^
[18:09:59] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[18:10:43] *** Quits: lottaquestions (~nick@104.221.94.126) (Quit: Konversation terminated!)
[18:13:23] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[18:18:18] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[18:25:27] *** Quits: Brucio-61 (~Brucio-72@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[18:26:02] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[18:26:18] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[18:26:22] *** Joins: notzmv (~zmv@user/notzmv)
[18:27:47] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[18:31:14] *** Quits: NotThatRPG_ (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Ping timeout: 250 seconds)
[18:33:12] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[18:34:12] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[18:51:10] *** Quits: razetime (~quassel@117.254.34.245) (Ping timeout: 250 seconds)
[18:56:18] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Ping timeout: 252 seconds)
[19:01:01] *** Joins: razetime (~quassel@117.254.35.152)
[19:03:03] *** Joins: scymtym (~user@ip-129-70-148-76.WLAN.Dyn.CIT-EC.NET)
[19:04:22] *** Joins: Guest7473 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[19:04:47] *** Joins: Brucio-61 (~Brucio-72@ip-129-70-148-76.WLAN.Dyn.CIT-EC.NET)
[19:07:57] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 256 seconds)
[19:08:11] *** Joins: kevingal (~quassel@2001:770:c0:401:34fd:1bca:e1ec:2bd4)
[19:12:13] *** Quits: \f (4c1975b719@user/f/x-7101985) (Remote host closed the connection)
[19:12:13] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (Remote host closed the connection)
[19:12:13] *** Quits: whereiseveryone (206ba86c98@2604:bf00:561:2000::2e4) (Write error: Broken pipe)
[19:12:13] *** Quits: sirufer (68f46fc7c3@user/sirufer) (Remote host closed the connection)
[19:12:13] *** Quits: sm2n (ae95cb1267@user/sm2n) (Write error: Broken pipe)
[19:12:13] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (Write error: Broken pipe)
[19:12:13] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (Write error: Broken pipe)
[19:12:13] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[19:12:13] *** Quits: jasom (f3e90f0325@2604:bf00:561:2000::3a6) (Remote host closed the connection)
[19:12:13] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (Remote host closed the connection)
[19:12:13] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (Remote host closed the connection)
[19:12:13] *** Quits: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac) (Remote host closed the connection)
[19:12:14] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Remote host closed the connection)
[19:12:14] *** Quits: srhm (dda3db84b5@user/srhm) (Remote host closed the connection)
[19:12:33] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[19:12:39] *** Joins: whereiseveryone (206ba86c98@2604:bf00:561:2000::2e4)
[19:12:40] *** Joins: jasom (f3e90f0325@2604:bf00:561:2000::3a6)
[19:12:40] *** Joins: ggb (a62ffbaf4f@2604:bf00:561:2000::3ac)
[19:12:41] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[19:12:41] *** Joins: srhm (dda3db84b5@user/srhm)
[19:12:48] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[19:12:48] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[19:12:48] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[19:12:50] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:12:53] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[19:12:56] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[19:12:56] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[19:13:03] *** Joins: \f (4c1975b719@user/f/x-7101985)
[19:13:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:15:04] *** Joins: lisp123 (~lisp123@120.154.103.52)
[19:15:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:19:51] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[19:25:27] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[19:26:56] *** Quits: Brucio-61 (~Brucio-72@ip-129-70-148-76.WLAN.Dyn.CIT-EC.NET) (Read error: Connection reset by peer)
[19:29:15] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[19:29:25] *** Joins: Brucio-61 (~Brucio-72@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[19:43:03] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[19:44:42] *** Quits: scymtym (~user@ip-129-70-148-76.WLAN.Dyn.CIT-EC.NET) (Ping timeout: 252 seconds)
[19:53:46] *** Inline__ is now known as Inline
[19:55:32] *** scymtym_ is now known as scymtym
[19:57:45] *** Quits: yottabyte (uid195082@id-195082.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:59:17] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[19:59:55] *** Joins: Giovanni (~Giovanni@176.55.166.222)
[20:13:10] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[20:19:54] *** Quits: razetime (~quassel@117.254.35.152) (Ping timeout: 252 seconds)
[20:21:19] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (Quit: Gateway shutdown)
[20:28:49] *** Joins: NotThatRPG (~NotThatRP@mail.sift.net)
[20:32:37] *** Quits: Guest7473 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[20:32:51] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:34:07] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[20:41:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:45:27] *** Joins: NotThatRPG_ (~NotThatRP@mail.sift.net)
[20:47:07] *** Quits: NotThatRPG (~NotThatRP@mail.sift.net) (Ping timeout: 256 seconds)
[20:49:28] *** Joins: karlosz (~karlosz@47.151.136.69)
[20:56:11] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[21:03:26] *** Joins: Oladon (~olad@98.43.81.226)
[21:06:34] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[21:06:38] *** Quits: kevingal (~quassel@2001:770:c0:401:34fd:1bca:e1ec:2bd4) (Remote host closed the connection)
[21:09:25] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[21:09:25] *** karlosz_ is now known as karlosz
[21:27:24] *** Joins: Catie (~user@user/catie)
[21:28:33] *** Joins: raeda (~raeda@74.215.153.92)
[21:36:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:38:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:47:23] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:47:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[21:48:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:51:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:53:44] *** Joins: jealousmonk (~user@user/jealousmonk)
[21:55:09] *** Joins: VincentVega (~user@212.97.4.48)
[22:02:00] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[22:07:33] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:08:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[22:10:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:16:58] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[22:18:44] *** Joins: Catie (~user@user/catie)
[22:21:03] *** Joins: cage (~cage@dynamic-adsl-94-34-137-6.clienti.tiscali.it)
[22:23:33] *** Joins: livoreno (~livoreno@user/notzmv)
[22:26:01] *** Quits: jealousmonk (~user@user/jealousmonk) (Ping timeout: 268 seconds)
[22:30:15] *** Joins: lisp123 (~lisp123@120.154.103.52)
[22:32:20] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[22:34:18] *** Quits: amb007 (~a_bakic@122.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:34:47] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[22:36:33] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:41:54] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:54:38] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[22:54:57] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[22:56:36] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Ping timeout: 240 seconds)
[22:57:24] *** Joins: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[23:04:21] *** Quits: rain3 (~rain3___@2a02:2f09:d105:8b00:b253:a323:f95:3d4b) (Ping timeout: 252 seconds)
[23:08:55] <hashfuncf39> is there way to specify that the type of a struct field is a cons of a particular type?
[23:10:10] <hashfuncf39> (defstruct A (sym :symbol)) (defstruct B (var (:cons :A)))
[23:10:14] <Bike> sure, use :type whatever in the slot specification
[23:10:16] <hashfuncf39> ^something like that
[23:10:22] <Bike> :type (cons a)
[23:10:33] <Bike> (defstruct b (var default :type (cons A)))
[23:11:03] <Bike> that will declare that the slot is a cons whose car is an A
[23:11:20] <hashfuncf39> ok thanks, i'll give it a go
[23:14:03] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[23:14:10] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[23:16:14] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:27:20] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.4)
[23:30:45] *** Joins: yewscion (~yewscion@72-21-196-67.amazon.com)
[23:31:03] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:31:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[23:32:01] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:33:42] <hashfuncf39> is there a way to declare that a slot can only be one of, say, two unique symbols/
[23:33:43] <hashfuncf39> ?
[23:33:47] *** Lord_of_Life_ is now known as Lord_of_Life
[23:33:58] <Bike> use the type (member sym1 sym2)
[23:34:04] <hashfuncf39> ah ok, thanks
[23:35:09] *** Quits: mingus (~jan-magnu@auth-147-98.anyconnect.uib.no) (Ping timeout: 252 seconds)
[23:37:31] <yitzi> clhs 4.2.3
[23:37:32] <specbot> Type Specifiers: http://www.lispworks.com/reference/HyperSpec/Body/04_bc.htm
[23:37:42] <yitzi> hashfuncf39: ^
[23:38:24] *** Joins: mingus (~jan-magnu@auth-147-98.anyconnect.uib.no)
[23:38:25] *** Joins: cjb (~cjb@user/cjb)
[23:38:32] <hashfuncf39> yitzi: i was looking for that the other day, thanks
[23:39:00] <yitzi> no prob
[23:42:30] <hashfuncf39> data structures are the paint and algorithms the painting. i'm trying to get my paint the right combination
[23:44:36] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[23:45:24] *** Quits: MajorBiscuit (~MajorBisc@c-001-018-036.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[23:51:12] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:54:44] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:56:45] <NotThatRPG_> Anyone know how remote attendance to ELS will work? Given the TZ difference, I expect I would mostly want to watch video NOT live.
[23:58:16] <mfiano> NotThatRPG_: You buy a ticket from the <programming> group.
[23:58:21] <mfiano> It's not free.
[23:59:24] <NotThatRPG_> mfiano: so it's full price even remote?
[23:59:29] <mfiano> The details of how they stream and if they are archived don't seem available.
[23:59:42] <mfiano> NotThatRPG_: 50 Euros = ~54 USD
