[00:04:53] *** Joins: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com)
[00:14:26] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[00:15:02] *** Quits: mizi (~mizi@user/mizi) (Ping timeout: 240 seconds)
[00:22:45] *** Quits: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com) (Ping timeout: 256 seconds)
[00:34:53] *** Quits: havenwood (~havenwood@about/ruby/havenwood) (Quit: The Lounge - https://thelounge.chat)
[00:35:33] *** Joins: havenwood (~havenwood@about/ruby/havenwood)
[00:46:02] *** Joins: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com)
[00:59:02] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[01:11:36] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[01:26:35] <Ankhers> Does ecto support creating a covering index (INCLUDE) using the primary key?
[01:50:26] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[01:51:29] *** Joins: livoreno (~livoreno@user/notzmv)
[02:03:03] *** Quits: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com) (Ping timeout: 256 seconds)
[02:13:02] <benwilson512> Ankhers: everything is possible with execute
[02:13:09] <benwilson512> not sure about the built in create index
[02:17:01] <Ankhers> that's what I was going to use if it wasn't supported natively. 
[02:17:31] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a1e9:5294:11ab:484a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:22:45] <Ankhers> I might be able to use the :options key in the table/2 macro, but I need to get back to my computer to test it. 
[02:29:42] *** Quits: mahmutov (~mahmutov@37.155.63.68) (Ping timeout: 272 seconds)
[02:44:45] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[02:49:14] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:07:57] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Ping timeout: 240 seconds)
[03:20:59] *** Quits: void09 (~void@150.230.21.57) (Quit: void09)
[03:21:40] *** Joins: void09 (~void@150.230.21.57)
[03:28:17] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 240 seconds)
[03:39:21] *** Joins: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com)
[03:43:55] *** Quits: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com) (Ping timeout: 256 seconds)
[03:51:00] *** Joins: Tongir (~tangmang@2403-580f-f5--29ff-538f-2a28-9a5e.ip6.aussiebb.net)
[04:07:19] *** Joins: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com)
[04:18:31] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:f026:9131:1160:dcf8)
[04:22:14] <benwilson512> Ankhers: sometimes i prefer execute for these sorts of things because it takes out the guess work of what will happen. I don't mind the DSL for normal table operations but when trying to make a very specific thing happen it seems often better to me to just write out the very specific thing in SQL
[05:04:20] <Ankhers> benwilson512: Which is probably what I will end up doing. The problem is that certain people that I am currently working with seem scared of postgres and do not really want to use the features it gives.
[05:04:35] <benwilson512> ah
[05:08:10] <Ankhers> Trying to teach people that have been told once upon a time that a given feature is bad is hard sometimes...
[05:13:47] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[05:18:33] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:30:00] *** Quits: damjan (~damjan@user/damjan) (Remote host closed the connection)
[05:30:48] *** Joins: damjan (~damjan@user/damjan)
[05:59:41] *** Quits: void09 (~void@150.230.21.57) (Quit: void09)
[06:00:35] *** Joins: void09 (~void@150.230.21.57)
[06:03:42] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:a526:824c:9b4d:f939)
[06:14:28] *** Quits: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com) (Remote host closed the connection)
[06:14:46] *** Joins: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com)
[06:15:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[06:20:30] *** Quits: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com) (Remote host closed the connection)
[06:20:47] *** Joins: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com)
[06:36:31] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[06:39:35] *** Joins: notzmv (~zmv@user/notzmv)
[06:50:29] *** Joins: Guest58 (~Guest58@106.51.27.143)
[06:56:17] *** Quits: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 240 seconds)
[07:11:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:11:48] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[07:26:07] *** Quits: Guest58 (~Guest58@106.51.27.143) (Quit: Client closed)
[07:30:52] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:31:34] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[07:36:14] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[07:42:57] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:f026:9131:1160:dcf8) (Ping timeout: 240 seconds)
[07:44:27] *** Joins: adamcstephens[m] (~adamcstep@2001:470:69fc:105::1:72a2)
[07:53:25] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[07:53:45] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:54:28] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[08:01:47] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:02:48] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[08:08:32] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[08:39:48] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[08:44:12] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[08:45:29] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Read error: Connection reset by peer)
[08:51:40] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[08:55:58] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[09:12:25] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[09:15:00] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 240 seconds)
[09:17:41] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:30:26] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[09:35:56] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[09:48:46] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[09:51:58] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:a526:824c:9b4d:f939) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:52:05] *** Joins: mexen (uid495612@user/mexen)
[09:52:07] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:53:01] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[09:58:12] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:04:28] <serafeim> hello friends
[10:06:59] *** Quits: ur5us_ (~ur5us@203.86.198.200) (Ping timeout: 272 seconds)
[10:20:58] *** Quits: esainane (esainane@antihype.space) (Read error: Connection reset by peer)
[10:24:26] <ley> Hello
[10:30:33] *** Quits: Tongir (~tangmang@2403-580f-f5--29ff-538f-2a28-9a5e.ip6.aussiebb.net) (Remote host closed the connection)
[10:32:51] *** Quits: octetta (~octetta@cpe-23-242-168-158.socal.res.rr.com) (Remote host closed the connection)
[10:40:18] *** Joins: Tongir (~tangmang@2403-580f-f5--f061-c916-9302-8e35.ip6.aussiebb.net)
[10:47:52] *** Joins: esainane (esainane@antihype.space)
[11:16:35] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[11:19:53] *** Joins: infinityfye (~infinityf@156.212.102.15)
[11:24:50] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[11:33:23] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:34:17] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[11:34:25] *** Quits: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[11:39:17] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[11:56:38] *** Quits: ur5us_ (~ur5us@203.86.198.200) (Ping timeout: 256 seconds)
[12:01:07] *** Joins: vier-littleme (~user@user/vier-littleme)
[12:03:48] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[12:07:06] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:33:57] *** Quits: dr-orlovsky (~dr-orlovs@31.14.40.18) (Quit: ZNC 1.8.0 - https://znc.in)
[12:34:31] *** Joins: dr-orlovsky (~dr-orlovs@31.14.40.18)
[12:51:29] *** Joins: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[13:04:37] *** Joins: optikfluffel (~optikfluf@2001:9e8:21f:db00:7d85:cff4:2619:34b6)
[13:05:33] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 250 seconds)
[13:08:55] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[13:53:50] *** Joins: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[13:55:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 256 seconds)
[13:57:48] *** Quits: gitgood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 240 seconds)
[13:58:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:16:12] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:21:30] *** Joins: Tlanger (~tangmang@2403-580f-f5--f4f3-43d8-c205-a3ad.ip6.aussiebb.net)
[14:24:18] *** Joins: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net)
[14:25:24] *** Quits: Tongir (~tangmang@2403-580f-f5--f061-c916-9302-8e35.ip6.aussiebb.net) (Ping timeout: 240 seconds)
[14:32:17] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[14:32:34] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[15:02:56] *** Joins: notapenguin (~ryu@187.3.254.107)
[15:27:59] *** Joins: Caerus (~Caerus@170.246.157.60)
[16:00:57] *** Parts: nickjj (~nickjj@user/nickjj) (Leaving)
[16:02:53] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[16:13:48] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[16:14:03] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[16:15:32] <withershins> hey all - just upgraded my erlang version and my logs are full of  `Start Call: :ssl_gen_statem.start_link(:client...`
[16:15:47] <withershins> i haven't noticed this before, is it something i should be concerned about? 
[16:16:36] *** Quits: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 240 seconds)
[16:16:45] <withershins> just looks like perhaps sasl reports, nothing seems to be amiss, everything is working..
[16:22:58] *** Joins: henry40408 (~henry4040@175.181.177.116)
[16:48:38] *** Quits: henry40408 (~henry4040@175.181.177.116) (Quit: The Lounge - https://thelounge.chat)
[16:50:17] *** Joins: henry40408 (~henry4040@175.181.177.116)
[17:11:51] *** Quits: optikfluffel (~optikfluf@2001:9e8:21f:db00:7d85:cff4:2619:34b6) (Remote host closed the connection)
[17:12:49] <Ankhers> withershins: I think I remember seeing a conversation somewhere about limiting SASL reports because of stuff like this.
[17:16:17] <Ankhers> I think I asked about this before, but if I have `@attr MyModule`, why does that create a compile time dependency?
[17:18:55] <Nicd> I don't see a reason why it would
[17:19:14] <Nicd> maybe you're doing something else there?
[17:35:16] *** Joins: kOoLiNuS (~kOoLiNuS@moka.ba.itb.cnr.it)
[17:41:52] *** Quits: kOoLiNuS (~kOoLiNuS@moka.ba.itb.cnr.it) (Quit: Textual IRC Client: www.textualapp.com)
[17:42:45] <yauhsien> what did elixir do on :ets? in erlang when I take an ets table and perform ets:lookup_element(T, hello, 2) such that the key hello is absent in the table T, the table T will be no longer available. when I do the same operation in elixir, such that :ets.lookup_element(t,:hello,2), it just give me an exception and then the table t is still available.
[17:44:00] <benwilson512> yauhsien: the :ets module in Elixir is literally the erlang module, there is no wrapper
[17:44:28] <benwilson512> > such that the key hello is absent in the table T, the table T will be no longer available. 
[17:44:28] <benwilson512> this doesn't sound right to me
[17:46:26] <benwilson512> are you testing this in iex vs erl?
[17:46:47] <yauhsien> see https://github.com/elixir-lang/elixir/blob/main/lib/elixir/lib/registry.ex#L1400
[17:47:33] <benwilson512> what am I seeing there?
[17:47:40] <yauhsien> in erlang way, if the key is absent in the table ets, the table will be no longer available then.
[17:48:21] <Nicd> there's no difference here in Erlang and Elixir, it's the same module and the same code that is running
[17:48:30] <yauhsien> but here, it will be OK if the key is absent in the table.
[17:48:39] <benwilson512> that isn't true
[17:48:44] <benwilson512> https://www.irccloud.com/pastebin/cCFqVnRK/
[17:49:37] <benwilson512> I made a table, I spawned another process, and in that process looked up a key that didn't exist
[17:49:41] <benwilson512> it errorred
[17:49:47] <benwilson512> then I checked on the table info, and it is still there
[17:52:54] <benwilson512> the separate process is important here in the erl shell, because in the erl shell if an exception is raised the shell pid dies and another one is spawned
[17:52:58] <yauhsien> oh, my case is as that https://justpaste.it/8jiv0
[17:53:08] <benwilson512> right, that's what I'm describing now
[17:53:12] <benwilson512> the ets table is owned by the shell pid
[17:53:18] <benwilson512> when the shell pid dies for _any reason_ the ets table is gone
[17:54:22] <benwilson512> https://www.irccloud.com/pastebin/lOM8Awgn/
[17:54:36] <benwilson512> see how on lines 2 and 4 I check self() and it returns a different pid
[17:54:56] <benwilson512> in the iex shell, exceptions are caught by default and the pid continues
[17:55:08] <benwilson512> https://www.irccloud.com/pastebin/0JOLkls7/
[17:56:19] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:56:29] <benwilson512> yauhsien: if you take your example and have the ets table owned by a different process then your example works fine
[17:57:03] <benwilson512> or if you run any of the erroring lines in another pid then your example works fine
[17:57:05] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[17:57:39] <yauhsien> but why it's ok in iex? https://justpaste.it/5i7fk
[17:58:41] <benwilson512> > in the iex shell, exceptions are caught by default and the pid continues
[17:58:52] <benwilson512> I pasted an example from iex showing that the pid remains the same
[17:58:59] <benwilson512> ets tables are _owned by a process_
[17:59:04] <benwilson512> if that process crashes, then the ets table dies
[17:59:16] <benwilson512> the erl shell allows your shell pid to die from exceptions, the iex shell does not 
[18:00:09] <yauhsien> but in iex shell the table t is also belong to the self() (shell?)
[18:00:29] <benwilson512> I'm sorry if this is rude but are you reading all of the lines I'm writing?
[18:00:34] <benwilson512> I've repeated this several times now
[18:00:41] <benwilson512> < the erl shell allows your shell pid to die from exceptions, the iex shell does not 
[18:00:57] <yauhsien> OK because the iex shell pid is held then the table is still available.
[18:01:02] <benwilson512> yes
[18:01:48] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[18:03:58] <yauhsien> no I was not reading all your lines because I was thinking in my case and busy to paste those code.
[18:04:40] <yauhsien> it's about reading and writing speed but aptitude.
[18:05:50] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[18:06:02] <yauhsien> s/aptitude/attitude/
[18:06:09] <Nicd> when asking for help, it's polite to read what the other is saying :)
[18:06:38] <yauhsien> no, not about that. that's you just type it so fast.
[18:10:36] <benwilson512> no worries, just take your time :)
[18:11:05] <yauhsien> I do not think that being a quick-reader like a bot is being polite. we are just talking in different speed.
[18:11:27] <Ankhers> Nicd: Nope, definitely does. https://paste.sr.ht/~ankhers/5649de2be954eca3c7e72231edd003421027cca8
[18:11:57] <benwilson512> yauhsien: I'm not asking you to read quickly, you can read at any speed you want
[18:12:09] <benwilson512> I'm asking that you read before replying.
[18:12:27] <yauhsien> no, I was not replying.
[18:12:28] <benwilson512> anyway
[18:12:34] <benwilson512> hopefully this has helped
[18:12:58] <yauhsien> I was just put additional question.
[18:13:23] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:14:43] <yauhsien> that's OK. it's sort of helpful. though when I saw the elixir registry code, I was thinking about what if it fails like I thought in erlang.
[18:14:44] <benwilson512> go for it :)
[18:15:09] <Nicd> Ankhers: interesting, I wonder why
[18:16:50] <yauhsien> so actually I was thinking about if elixir holds every sentence but erlang does not.
[18:16:57] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:17:50] *** Joins: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[18:18:58] <yauhsien> and the polite notification is not helpful. it's annoying.
[18:19:08] *** Quits: yauhsien (~Yau-Hsien@61-231-19-150.dynamic-ip.hinet.net) (Quit: Leaving)
[18:22:02] <Ankhers> Does anyone know if this channel is publicly logged anywhere? Actually, the conversation may have even happened on the previous network.
[18:22:21] <Nicd> it's not for a long while now
[18:22:26] <Nicd> I have logs if you need something later
[18:23:43] <Ankhers> I just believe I have asked this question before. I don't remember the answer though. I was just going to try to scour some logs to see if I could find it. Maybe I'll just post on the elixir forums. Should try searching there first though.
[18:24:04] <Nicd> oh that compile dependency
[18:24:18] <Nicd> I can search later but I have to go
[18:26:58] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-9cab-8f8d-e5ab-3a17.res6.spectrum.com)
[18:28:37] <Ankhers> Nicd: Do not feel like you have to, but I appreciate it!
[18:33:05] <rawtaz> what are the search terms?
[18:34:49] <Ankhers> My best bet would be compile, dependency, module attribute. I'm fairly sure I would have said "compile dependency" or "compile time dependency"
[18:36:42] *** Quits: GLaDER (~GLaDER@h-98-128-172-23.A785.priv.bahnhof.se) (Ping timeout: 256 seconds)
[18:37:13] *** Joins: phaleth (~user@user/phaleth)
[18:37:18] *** Joins: GLaDER (~GLaDER@h-98-128-172-23.A785.priv.bahnhof.se)
[18:46:47] <rawtaz> is it this?  22:10 < Ankhers> Should a @behaviour count as a compile or export dependency?
[18:47:12] <rawtaz> 23:01 < josevalim> Ankhers: compile
[18:47:35] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[18:48:32] <Ankhers> I don't think it would be that one. That is slightly different. It would make sense that a behaviour is a compile dep. But I don't understand why a "normal" module attr would be compile time. Unless that is just the default behaviour because any attr could be used during compile time.
[18:48:46] <josevalim> we don't know how the attribute is used
[18:48:54] <josevalim> so everything is a compile-time dependency, yes
[18:49:04] <josevalim> i actually double checked and behaviours are export dependencies
[18:49:48] <Ankhers> I may need to recheck my code if that is the case. Or maybe it was the type spec that you already fixed that was the root of the problem.
[18:50:30] <Ankhers> josevalim: Is there a way to know how a module attr is used and the work just has not been put in? Or maybe it would be better to just keep that as the default so people are not trying to guess why sometimes it is a compile dep and other times a runtime.
[18:50:59] <josevalim> it is impossible
[18:51:21] <josevalim> i mean, perhaps we could track for module attributes in particular and see when they are read
[18:51:24] <josevalim> but i am not sure if worth it
[18:51:37] <Ankhers> Probably better for consistent behaviour if that was not done anyways.
[18:51:41] <josevalim> if a module does not need to be read at compile time, then maybe it should not be in an attribute
[18:52:40] <Ankhers> My usecase is for a mock. In prod we load one module, in tests we load a different module. It could be a function call, but I think I have only seen people use module attrs for that.
[18:56:30] <Ankhers> rawtaz: Thanks for finding that!
[18:57:41] <rawtaz> np
[18:57:50] <rawtaz> i can keep looking if you want :)
[19:05:31] <Ankhers> No, I'm good. Jose already answered it.
[19:07:11] <rawtaz> :)
[19:10:12] <Ankhers> josevalim: I know I can use execute, but is there a way for me to create a covering index on a primary key? I also know I can just not create the primary key and create a unique index using the :include key.
[19:11:26] <Ankhers> Sorry, is there a way using ecto's DSL?
[19:19:47] *** Quits: yauhsien_ (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:27:32] *** Joins: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net)
[19:29:11] <josevalim> i can't say from memory
[19:30:06] *** Quits: PeterMarreck[m] (~pmarreckm@2001:470:69fc:105::1:64f0) (Quit: You have been kicked for being idle)
[19:32:01] *** Quits: yauhsien (~yauhsien@61-231-19-150.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[19:33:23] <Ankhers> Thanks!
[19:50:05] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[19:50:50] *** Joins: Perry (~perry@coffee-break.at)
[20:04:48] *** Joins: Common-Lisp (~common_li@12.2.190.242)
[20:35:09] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:40:15] *** Joins: hoppity (~hoppity@66.222.130.38)
[20:40:15] *** Quits: hoppity (~hoppity@66.222.130.38) (Changing host)
[20:40:15] *** Joins: hoppity (~hoppity@user/hoppity)
[20:41:06] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[20:44:41] <hoppity> Hi guys, does anyone know why Ecto Multi can't work with high level functions like Item.create_item(params) and instead one is forced to go "low level" like Multi.insert(:item etc)?
[20:51:14] *** Joins: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[20:53:04] *** Joins: mizi (~mizi@user/mizi)
[21:10:50] <hoppity> I think my question was dumb, you actually CAN use changesets with Multi
[21:25:43] *** Joins: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d)
[21:35:16] *** Joins: Benanna2019 (~Benanna20@c-73-131-46-110.hsd1.sc.comcast.net)
[21:35:41] *** Quits: Benanna2019 (~Benanna20@c-73-131-46-110.hsd1.sc.comcast.net) (Client Quit)
[21:36:36] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 240 seconds)
[21:46:44] *** Joins: mahmutov (~mahmutov@37.155.38.157)
[21:52:36] *** Quits: Common-Lisp (~common_li@12.2.190.242) (Remote host closed the connection)
[22:09:59] *** Quits: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:14:33] *** Joins: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d)
[22:24:45] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[22:27:41] <Nicd> Ankhers: did you find it?
[22:28:08] <whk> mmm, I am getting this when I do a large insert_all using Ecto. (Postgrex.QueryError) postgresql protocol can not handle 180006 parameters, the maximum is 65535. Should I rather break this up in chunks. Probably. 
[22:28:22] <Ankhers> Nicd: Somewhat. rawtaz did a search for me and Jose happened to be around and just answered the question.
[22:28:39] <Ankhers> hoppity: Multi.run
[22:29:11] <Ankhers> whk: Yes, that needs to be broken into smaller pieces.
[22:29:20] <Nicd> ok 😞
[22:30:00] <hoppity> Ankhers: Multi.run is very interesting! thank you
[22:31:10] <Ankhers> hoppity: Just make sure the function(s) you call are on the same process. I believe it does not work as intended if you have multiple processes involved.
[22:31:27] <hoppity> gotcha, will do
[22:33:25] <whk> yeah, thanks. doing a |> Enum.chunk_every(5_000) and seems to work.
[23:06:36] *** Quits: rgrinberg (~textual@2806:101e:7:7728:18a:215f:c191:4d5d) (Ping timeout: 245 seconds)
[23:07:00] *** Quits: mizi (~mizi@user/mizi) (Ping timeout: 240 seconds)
[23:09:20] *** Joins: mizi (~mizi@user/mizi)
[23:12:29] *** Joins: goepsilongo_ (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com)
[23:13:31] *** Quits: infinityfye (~infinityf@156.212.102.15) (Ping timeout: 256 seconds)
[23:15:17] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-9cab-8f8d-e5ab-3a17.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:21:44] *** Quits: mahmutov (~mahmutov@37.155.38.157) (Ping timeout: 256 seconds)
[23:41:13] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-4d3a-5004-9503-0c7b.res6.spectrum.com)
[23:43:57] *** Quits: goepsilongo_ (~goepsilon@cpe-74-73-86-74.nyc.res.rr.com) (Ping timeout: 240 seconds)
[23:46:01] *** Joins: aus5 (~aus@36.90.254.84.ftth.as8758.net)
[23:49:47] *** Quits: aus (~aus@8.21.9.84) (Ping timeout: 256 seconds)
[23:49:47] *** aus5 is now known as aus
[23:53:48] *** Quits: aidalgol (~aidalgol@user/aidalgol) (Ping timeout: 240 seconds)
[23:53:50] *** Joins: aidalgol_ (~aidalgol@user/aidalgol)
