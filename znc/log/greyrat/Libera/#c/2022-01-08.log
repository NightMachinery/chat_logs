[00:00:10] <NRK[m]> -Werror=declaration-after-statement
[00:00:11] <NRK[m]> the day is saved
[00:00:32] <sham1> I mean, if you want to enforce this on your style, sure
[00:01:55] <poprocks> haha I personally wouldn't go that far... it can get in the way of const correctness for e.g.
[00:02:09] <sham1> Mmhm
[00:02:36] <NRK[m]> i only believe in const for globals and pointers
[00:03:06] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[00:03:35] <veltas> const for "I will not change this var in this function after first assignment" is a pointless waste of time and clutter
[00:03:52] <sham1> No it is not
[00:04:14] <veltas> I did it for years and never caught a single bug with it so just stopped and haven't missed it
[00:04:39] <poprocks> hm, it's almost as if... TMTOWTDI!
[00:04:43] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[00:04:43] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[00:04:50] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.5-dev)
[00:04:56] <sham1> Even if you don't catch any bugs with it, it's better just for the correctness
[00:05:05] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[00:05:36] <NRK[m]> i don't buy it
[00:05:39] <veltas> Yeah I'll just add register to every var I don't take the address of too! "For the correctness"
[00:05:45] *** Quits: Gorengan (~Goreng@202.138.250.58) (Quit: Leaving)
[00:05:52] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[00:06:28] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Remote host closed the connection)
[00:06:29] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[00:06:44] <caze> For documentation's sake.
[00:07:18] <NRK[m]> and i think dennis didn't like const either, he talked about it a bit at the start of his "no-alias" mail
[00:07:20] <caze> Oh I misread.
[00:07:41] <caze> Yeah, I wouldn't bother using const on an automatic variable that will die fairly close to its usage.
[00:08:02] <veltas> If I put 'register' in front of a variable then it *documents* that I will not take the address of it!
[00:08:19] <veltas> It's just clutter mid-function, keep functions short and sweet
[00:08:27] <caze> I would still use it for function pointer parameters though.
[00:08:29] <NRK[m]> https://www.lysator.liu.se/c/dmr-on-noalias.html
[00:08:53] <NRK[m]> > Let me begin by saying that I'm not convinced that even the pre-December qualifiers (`const' and `volatile') carry their weight; I suspect that what they add to the cost of learning and using the language is not repaid in greater expressiveness.
[00:08:56] <veltas> caze: Absolutely, I'm just taking some time of out my day to complain about the "const correctness means putting const literally everywhere I can" crows
[00:08:59] <cehteh> funny fact: on some architectures the registers are addressable :D
[00:09:00] <veltas> crowd*
[00:09:27] <sham1> You should put register variables where you should not take the address
[00:09:32] <NRK[m]> caze: yes, for pointers and globals i ALWAYS const, can help with optimizations too. but otherwise i don't care about it with locals
[00:09:35] <sham1> Not every variable that you don't take the address is like this
[00:09:56] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[00:10:29] *** Joins: rsjw (~quassel@user/rsjw)
[00:12:23] <veltas> sham1: When should you not take an address?
[00:13:50] <NRK[m]> register is basically useless now with good optimizing compilers
[00:14:16] <zwr> yeah, the C standard seems to have made the mistake of baking in non-algorithmic optimizations
[00:14:51] <veltas> NRK[m]: It stops you from taking an address, so it does have a function, but I can't think of a use-case
[00:14:59] <NRK[m]> the `auto` keyword still baffles me.
[00:15:11] <NRK[m]> was it ever useful?
[00:15:13] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:cd63:581e:b8dd:6c01) (Quit: Leaving)
[00:15:32] <NRK[m]> maybe some weird use with prestandard C??
[00:15:48] <fizzie> When `int` was the default type, you could do `static x; auto y;` to declare one static and one automatically allocated variable (both `int`s).
[00:15:58] <fizzie> Not sure if that's still particularly _useful_, but still.
[00:16:00] <veltas> NRK[m]: auto is just B's "let"
[00:16:02] <caze> It's up there with the --> operator.
[00:16:30] <NRK[m]> caze: heresy, the goes to operator is amazing
[00:16:35] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[00:16:45] <poprocks> heh, right. kinda blows the idea that they desperately wnated to preserve keywords out of the water
[00:16:59] <fizzie> https://www.bell-labs.com/usr/dmr/www/chist.html "B declarations begin with a specifier like auto or static, followed by a list of names, and C not only followed this style but ornamented it by placing its type keywords at the start of declarations."
[00:17:10] <poprocks> wouldn't mind an `intern` keyword rather than using `static` at global scope to mean internal linkage
[00:17:21] *** Joins: vysn (~vysn@user/vysn)
[00:17:22] <veltas> NRK[m]: It stands for "automatic variable", and it was named thus because the variables in functions in B could be "automatic" i.e. created with each call, or "extern" as in externally linked
[00:17:40] <veltas> There is no "int" in B because it only had one type so it didn't need to be written
[00:18:29] <NRK[m]> poprocks: yeah, the static keyword has 3 different meaning
[00:18:40] *** Joins: Iarfen (~quassel@181.43.58.247)
[00:19:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[00:19:11] <kurahaupo_> poprocks: The great advantage of an intern variable is that it's half price. The distance is that it becomes unavailable after 3 months
[00:19:32] <poprocks> kurahaupo_: or free, in North America!
[00:19:39] <kurahaupo_> the *downside os
[00:21:44] <otty> hey "warning: the `gets' function is dangerous and should not be used.
[00:21:54] <otty> what is this means
[00:22:25] <sham1> Exactly what it says on the tin
[00:22:29] <sham1> Don't use it
[00:22:42] <otty> why?
[00:22:44] <bdax> it doesn't let you give a maximum, so it can overshoot the end of a buffer
[00:22:47] <sham1> Buffer overflows
[00:22:57] <otty> oh
[00:23:31] <veltas> The man page for gets has a BUGS section explaining the flaw
[00:24:15] <caze> otty: It's impossible to use it safely.
[00:24:45] <caze> The only way is if you have complete control over the program input.
[00:25:45] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:3d20:7ff6:ae6:ea22)
[00:26:11] <veltas> Or with creative use of mmap()
[00:27:55] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[00:29:12] *** Quits: otty (~otty@49.15.201.210) (Remote host closed the connection)
[00:29:31] *** Joins: johnjaye (~pi@154.6.152.74)
[00:31:17] *** Joins: Betal (~Betal@user/betal)
[00:31:27] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[00:32:21] *** Joins: Leonard (~Administr@114.55.127.80)
[00:33:14] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[00:33:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[00:33:43] *** Quits: bdax (~tom@05432be4.skybroadband.com) (Quit: bdax)
[00:34:06] *** Joins: MrFantastik (~f@2607:f598:bbda:300:e65e:2eba:6765:f0ce)
[00:34:18] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[00:34:52] *** Quits: Iarfen (~quassel@181.43.58.247) (Ping timeout: 256 seconds)
[00:36:30] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[00:36:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[00:37:11] *** Joins: dithpri (~dithpri@gateway/tor-sasl/dithpri)
[00:38:16] *** Quits: mahmutov (~mahmutov@37.155.22.205) (Ping timeout: 256 seconds)
[00:38:56] *** Joins: System_Error (~SystemErr@user/systemerror)
[00:39:49] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[00:39:54] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[00:39:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[00:40:44] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[00:41:19] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[00:43:42] *** Joins: cust (amaama@2607:f2c0:f00f:2500::3)
[00:44:09] *** Joins: Leonard (~Administr@114.55.127.80)
[00:46:46] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[00:47:57] <cuppajoe> What is the differences in learning about computer architecture and operating systems? Both seem pretty low leveland related to C, but how do they differ in terms of topics usually covered?
[00:48:59] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:49:26] *** Joins: crystal_frog (~ruby_frog@45.231.211.133)
[00:49:37] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:55a0:8f60:aba0:28c4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:49:47] <rsjw> computer architecture is about the hardware. operating systems is about the software
[00:50:07] *** Parts: crystal_frog (~ruby_frog@45.231.211.133) ()
[00:50:21] <System_Error> cuppajoe: low level is very vague, there're many aspects.
[00:50:41] <rsjw> sometimes the line is blurred a little because some hardware features are there to support operating system features and vice versa
[00:50:56] *** Quits: unknow (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:51:31] <cuppajoe> Okay, that makes sense. So should I be familiar with computer architecture before learning about operating systems?
[00:52:40] <System_Error> and sometimes they're very sharp. Say on mcu you do care of HW architecture but there could be no OS at all.
[00:54:26] <xb0o2> What's the least painful but somewhat useful way to get a C dev environment set up on Windows nowadays?
[00:55:58] <oldlaptop> I believe they call it "WSL" or something.
[00:56:24] <cuppajoe> I think they came out with WSL2 which is supposed to be even better
[00:56:40] <rsjw> cuppajoe: I think leaning them both together would be easier
[00:57:27] <cuppajoe> xb0o2: Are you programming specifically for Windows, or OS-agnostic programming?
[00:57:33] *** Joins: slayne (~sysadmin@modemcable136.173-130-66.mc.videotron.ca)
[00:57:41] <xb0o2> I was hoping to not have to resort to WSL but I've also had awkward experiences with things like cygwin, mingw in the past... It appears clang relies on VC stdlib which threw a slight spanner in the works.
[00:57:48] <xb0o2> cuppajoe: OS-agnostic mostly.
[00:57:54] <rsjw> xb0o2: I think microsoft has released free versions of visual studio for a while now
[00:58:44] <cuppajoe> Yeah, then emulating a Linux environment may be the way to go, with Windows Subsystem for Linux (WSL)
[00:58:49] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.3)
[00:58:57] <xb0o2> rsjw: Yeah, I would just prefer to use GCC or Clang given that experience with VC is somewhat useless outside of on a Windows box. If the other options are too painful then I guess VC will have to do.
[00:59:13] <xb0o2> Just wondered about other people's experience is all.
[01:00:21] <rsjw> well the language itself is the same
[01:00:45] <xb0o2> Yeah but tooling is a significant part of the story.
[01:00:50] <rsjw> true
[01:00:55] <oldlaptop> xb0o2: in all seriousness, I've found it as convenient or more convenient to target windows by cross-compilation from unix/linux, compared to trying to set up a sane toolchain on windows.
[01:01:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[01:01:22] <oldlaptop> particularly if you expressly do *not* want to play in the msvc box
[01:02:39] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[01:03:17] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[01:05:54] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[01:05:59] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[01:09:17] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[01:10:13] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[01:11:47] *** Joins: haliucinas (~haliucina@5.20.153.21)
[01:12:46] *** Quits: MrFantastik (~f@2607:f598:bbda:300:e65e:2eba:6765:f0ce) (Remote host closed the connection)
[01:13:09] *** Joins: MrFantastik (~f@2607:f598:bbda:300:e225:b936:f092:2f2d)
[01:13:19] *** Joins: System_Error (~SystemErr@user/systemerror)
[01:22:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a9bb:faa4:6c28:2bd6) (Quit: Quit)
[01:25:17] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[01:26:59] <ioxzev1z> wrt to mingw/such. how good is the compiler itself?
[01:27:13] <ioxzev1z> Is it a windows port of GCC or a different project all together?
[01:27:47] <ioxzev1z> I get that clang and gcc work great on linux, but is mingw a completely different project?
[01:28:03] *** Joins: haliucinas (~haliucina@5.20.153.21)
[01:28:08] <kit> i think its different
[01:28:26] <kit> if im not mistaken
[01:28:36] <fruitypunk> hi all
[01:28:51] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:28:54] <kit> however i just dont like to think about compiling on windows
[01:29:06] <kit> im running low on brain cells :P
[01:29:07] <oldlaptop> mingw is a different project, in the sense that it's a project outside gcc that seeks to port gcc to windows
[01:29:19] <kit> howdy fruitypink
[01:29:24] <fruitypunk> oh that's a pain in the neck yea.. windows
[01:29:25] <ioxzev1z> oldlaptop, so it uses gcc code, rather than reinventing the wheel?
[01:29:26] <oldlaptop> (or is the active one called mingw-w64 or something now?)
[01:29:39] <fizzie> Yeah, the -w64 thing has always confused me.
[01:29:48] <ioxzev1z> Every time theres a compiler fork there is useless reinvention
[01:30:11] <fizzie> AFAICT, yes, MinGW-w64 is the more active development fork of MinGW, and also not specific to x64 Windows development, but also supporting 32-bit binaries just fine.
[01:30:33] <kit> the fact that its almost required to use an ide or something like cygwin is just saddening
[01:31:05] <oldlaptop> ioxzev1z: It is a project that seeks to port gcc to windows.
[01:31:25] <kit> bc cygwin just simulates a posix environ and an ide is not fun at all
[01:31:56] <fizzie> https://0x0.st/ozRl.txt -- it's just weird to have "-w64-" as part of the win32 compiler as well.
[01:32:31] <fizzie> (I don't think I've ever actually used MinGW *on* Windows, I've just got it installed for cross-compiling *to* Windows.)
[01:32:39] <kit> good
[01:33:52] <kit> i tried using mingw without cygwin on my school laptop and i almost jumped off a bridge
[01:34:02] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:34:10] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[01:34:41] <oldlaptop> You should wait until you're not on a bridge to use the computer, so you can see where you're going. You could easily get yourself hurt like that.
[01:35:02] <kit> lmao
[01:35:07] *** Joins: System_Error (~SystemErr@user/systemerror)
[01:35:20] *** Joins: lllh (~llh@198.48.244.21)
[01:37:03] *** Quits: llh (~llh@user/llh) (Ping timeout: 256 seconds)
[01:37:20] *** Joins: Leonard (~Administr@114.55.127.80)
[01:38:53] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:3d20:7ff6:ae6:ea22) (Quit: This computer has gone to sleep)
[01:39:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[01:39:29] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[01:40:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:40:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:40:03] *** Joins: wroathe (~wroathe@user/wroathe)
[01:40:22] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:3c80:c601:b69c:eb4)
[01:43:40] *** Quits: V-T60 (~v@gateway/tor-sasl/v-t60) (Quit: Lost terminal)
[01:44:36] *** Joins: Klinda (~superleag@user/klinda)
[01:47:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[01:49:16] *** Quits: Macuser (~Macuser@2600:1003:b445:790e:64d3:be9f:a6c5:ce5a) (Quit: Textual IRC Client: www.textualapp.com)
[01:50:09] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[01:58:13] *** Joins: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br)
[01:58:22] *** Quits: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br) (Remote host closed the connection)
[01:59:45] *** Joins: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br)
[01:59:55] *** Quits: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br) (Remote host closed the connection)
[02:00:47] *** Joins: evocatus (~evocatus@62.182.77.224)
[02:01:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[02:01:24] *** Quits: evocatus (~evocatus@62.182.77.224) (Remote host closed the connection)
[02:01:36] *** Joins: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br)
[02:01:45] *** Quits: LHLaurini (~LHLaurini@177.67.230.93.razaoinfo.com.br) (Remote host closed the connection)
[02:06:49] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[02:08:00] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[02:10:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[02:11:38] *** Quits: trafficjam (~trafficja@119.17.42.59) (Ping timeout: 256 seconds)
[02:12:20] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[02:13:52] *** Quits: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:14:04] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[02:14:21] *** Joins: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de)
[02:14:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[02:16:17] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[02:16:28] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[02:16:49] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:17:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:17:47] *** kit is now known as kitbot
[02:17:50] *** kitbot is now known as kit
[02:18:31] *** citrons_ is now known as citrons
[02:21:05] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:3c80:c601:b69c:eb4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:24:36] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[02:25:24] <sham1> Windows is in many ways painful even outside of C development
[02:25:45] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:27:30] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[02:28:32] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[02:28:57] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[02:30:46] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[02:32:18] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[02:32:32] <pragma-> As is any other system.
[02:32:44] *** Quits: pizdets (~pizdets@183.182.110.89) (Ping timeout: 250 seconds)
[02:32:52] <pragma-> They've all got things they're good at and things they're bad at.
[02:33:14] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Remote host closed the connection)
[02:33:14] <ioxzev1z> But muh 'doze hatin'
[02:33:39] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[02:34:06] *** Joins: pizdets (~pizdets@183.182.115.136)
[02:34:22] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Client Quit)
[02:35:29] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:37:39] *** Joins: donutfarian (~donutfari@2601:140:9180:5e40:88df:7fd3:8fca:5534)
[02:38:17] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[02:38:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[02:39:20] *** Joins: Leonard (~Administr@114.55.127.80)
[02:41:48] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[02:43:55] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[02:44:24] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[02:46:49] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[02:47:49] *** Quits: Darkcoal (~user@139.64.51.226) (Quit: Darkcoal)
[02:49:06] <wroathe> I've returned to working on a Windows machine after more than a decade without. I can say that my experience has been finding one thing after another after another that doesn't work as advertised.
[02:49:25] <wroathe> This has happened literally hundreds of times over the last few months, but my most recent example is https://github.com/PowerShell/PowerShell/issues/2083
[02:49:27] <candide> Title of wroathe's link: Unable to load multiple versions of .Net assembly module dependencies. · Issue #2083 · PowerShell/PowerShell · GitHub
[02:50:29] <wroathe> You can't have conflicting dependency versions loaded into the same powershell process, and powershell is not like other terminal emulators whereby each command results in a brand new process being launched that links in it's own libraries - it's all linked into the same running powershell process
[02:50:52] <ioxzev1z> Windows tends to be built so that MS does the bare minimum required, then expects third party devs to fill in the gaps with (mostly) proprietary tools
[02:51:08] <ioxzev1z> iirc windows doesn't even have a tool equivalent to dd
[02:51:14] *** Joins: Torr (~Torr@user/torr)
[02:51:49] <poprocks> RAWRITE.EXE!
[02:52:19] <wroathe> And "Group Policy" management gives too much power to shmucks that don't understand unintended consequences
[02:53:08] <oldlaptop> ioxzev1z: A tool fully and completely equivalent to dd is not obviously desirable
[02:53:18] *** Joins: Macuser (~Macuser@2600:1003:b46a:406c:ecb5:fee4:5ccb:e0d3)
[02:53:52] <oldlaptop> (dd itself is an excellent example of the hazards of joke software)
[02:54:27] <ioxzev1z> oldlaptop, not sure how I can turn down the opportunity to use a built-in tool to copy data from X to Y in a single command
[02:54:49] <oldlaptop> Ah, but that is not what dd is (or originally was, anyway) actually for.
[02:54:56] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:55:03] <rsjw> DOS has "type". maybe windows still does?
[02:55:06] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:55:09] <kit> oo this is a story i want to hear
[02:55:29] <pony> oldlaptop: tell :o
[02:55:48] *** Joins: kitbot (~kitbot@2603-6010-a141-6fa3-0204-5aff-fe53-846c.res6.spectrum.com)
[02:56:05] <oldlaptop> dd is (so far as I understand, anyway) mostly for converting between ASCII and EBCDIC. Its syntax is therefore a parody of IBM's crap of the time.
[02:56:53] <oldlaptop> Its present use for overwriting one file with another (more or less) definitely makes the joke funnier.
[02:56:56] *** Joins: agonhajdari (~textual@user/agonhajdari)
[02:57:21] <pony> oh wow
[02:57:21] <pony> lol
[02:58:05] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[02:58:05] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 256 seconds)
[02:58:39] <oldlaptop> A fair number of the linux "how to copy our installation image to your USB disk" guides even use cp nowadays
[02:58:56] *** Joins: eht (~eht@user/eht)
[02:59:01] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:00:37] *** Joins: soapsudsxx (~soapsudsx@141.193.188.151)
[03:00:52] *** dansan_ is now known as dansan
[03:02:32] <duuude> oldlaptop: quite interesting, do you have more interesting things to tell us?
[03:02:51] <oldlaptop> duuude: Tomatoes are fruits, not vegetables.
[03:03:12] <duuude> wow
[03:03:17] *** Quits: mattroelle (~mattroell@136-26-68-28.cab.webpass.net) (Ping timeout: 240 seconds)
[03:03:43] <cryptonector> is Fabrice Bellard French?  does he speak French?
[03:03:49] *** Quits: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:04:02] <duuude> Seems to be
[03:04:11] *** Quits: Macuser (~Macuser@2600:1003:b46a:406c:ecb5:fee4:5ccb:e0d3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:05:01] <dithpri> He definitely is
[03:05:18] <pony> oldlaptop: how old is your laptop?
[03:05:32] *** Joins: mattroelle (~mattroell@136-26-68-28.cab.webpass.net)
[03:06:54] <poprocks> man, it's the wild west around here when t*** isn't here to police things
[03:07:12] *** Quits: MrFantastik (~f@2607:f598:bbda:300:e225:b936:f092:2f2d) (Read error: Connection reset by peer)
[03:07:17] <kit> pony i doubt its older than mine
[03:07:30] *** Joins: MrFantastik (~f@2607:f598:bbda:300:e225:b936:f092:2f2d)
[03:07:50] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[03:09:47] <duuude> kit: how old is yours?
[03:09:51] *** Joins: rgrinberg (~textual@187.223.202.115)
[03:11:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:13:43] <poprocks> also, the username 'oldlaptop' may imply that this is a 2nd account that the user is using on their old laptop, to run IRC. Which raises the question: who is the non-old-laptop oldlaptop?
[03:13:58] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[03:16:48] <kit> duuude around 7 years iirc
[03:17:02] <duuude> meh
[03:17:47] <duuude> 2015 is like 10 years into future
[03:18:31] <duuude> let me guess, you also have more than 2Gb of RAM?
[03:18:56] *** Joins: Macuser (~Macuser@2600:1003:b445:b9ea:c18:d18b:db1e:d6a4)
[03:20:08] <slayne> I speak french as well, bonjour :)
[03:20:29] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[03:20:30] *** Quits: rgrinberg (~textual@187.223.202.115) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:21:01] <slayne> What's with the world's fascination with french people ?
[03:21:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:22:01] *** Quits: Akuli (~Akuli@87-94-108-67.bb.dnainternet.fi) (Quit: Akuli)
[03:22:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:22:53] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[03:23:37] *** Quits: Macuser (~Macuser@2600:1003:b445:b9ea:c18:d18b:db1e:d6a4) (Ping timeout: 240 seconds)
[03:23:43] *** Quits: slayne (~sysadmin@modemcable136.173-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:27:03] <rsjw> why have the bs block size option for a text conversion tool? unless that was put on later for other disk-oriented uses
[03:27:33] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[03:28:03] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[03:29:31] <fizzie> Because fixed-size records, I imagine.
[03:30:22] <fizzie> In fact I think at least coreutils dd's ASCII/EBCDIC conversions remove/add trailing spaces to the blocks.
[03:31:32] <kit> duuude: my server has 384mib
[03:32:47] <fizzie> "Text files" made out of fixed-length records instead of variable-length lines (with a terminator) used to be much more of a thing. Not that I know for sure that's the source for the dd option.
[03:35:31] <fizzie> The info page mentions the background of the syntax though. "dd accepts the following operands, whose syntax was inspired by the DD (data definition) statement of OS/360 JCL."
[03:37:45] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[03:37:57] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Read error: Connection reset by peer)
[03:38:15] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[03:38:25] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:39:10] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[03:39:15] *** Quits: kitbot (~kitbot@2603-6010-a141-6fa3-0204-5aff-fe53-846c.res6.spectrum.com) (Remote host closed the connection)
[03:46:03] *** Quits: Thymo (~Thymo@82-74-137-251.cable.dynamic.v4.ziggo.nl) (Changing host)
[03:46:03] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[03:47:57] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[03:51:52] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[03:51:54] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[03:54:37] *** Quits: MrFantastik (~f@2607:f598:bbda:300:e225:b936:f092:2f2d) (Quit: Leaving)
[03:56:05] *** Joins: malina (~malina@user/malina)
[03:56:16] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[04:00:49] *** Joins: kitbot (~kitbot@2603-6010-a141-6fa3-0204-5aff-fe53-846c.res6.spectrum.com)
[04:00:58] <rsjw> I didn't know text files used to be fixed width. hmm
[04:01:26] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[04:01:38] <pnbeast> Just the good ones.  The lazy ones were a mess, showing up a column short in two or three rows, or maybe even with extra characters.  It was horrible.
[04:02:16] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:03:40] *** Joins: Wulf (~Wulf@user/wulf)
[04:04:56] *** Joins: Kit_ (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com)
[04:05:38] *** kit is now known as Kit-ten
[04:05:47] *** Kit_ is now known as Kit
[04:06:02] <caze> Haven't you ever read a newspaper?
[04:06:53] <Kit> whats a "newspaper"
[04:08:25] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[04:09:19] <pnbeast> A dog training tool.
[04:09:54] <Inline> lol
[04:10:03] *** Quits: Kit (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com) (Quit: Leaving)
[04:10:21] *** Joins: NotApplicable (~NotApplic@2603-6010-a141-6fa3-0000-db65-a0b3-920d.res6.spectrum.com)
[04:10:32] *** NotApplicable is now known as Kit
[04:13:56] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[04:14:04] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[04:18:16] <bkhl> I've worked at some TV stations that still use those columnar text files with fixed columns for fields for playout schedules.
[04:18:44] <bkhl> Had to fix some scripts where somehow some people failed to parse that properly in Python.
[04:19:07] <oldlaptop> the really "capable" CSV-processing software tends to have options for fixed-width fields
[04:19:23] <rsjw> do they pad the lines at the end so the start of each line starts at a multiple of the line length?
[04:20:39] <rsjw> also https://www.ibm.com/docs/en/zos/2.3.0?topic=descriptions-dd-convert-copy-file mentions that it's used for "nonprogrammable terminals" which require "deblocking", whatever that is
[04:21:23] *** Joins: shivesh (~shivesh@user/shivesh)
[04:23:48] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[04:24:25] <oldlaptop> Oh goodness, I forgot about that. That just about completes the joke: the OS dd's syntax was designed to look like, as a joke, is now Official UNIX(TM) and therefore implements dd
[04:25:42] *** Joins: hanzo (uid532183@user/hanzo)
[04:26:04] <oldlaptop> (they probably used JCL on other systems too, bla bla whatever, I can't hear you)
[04:27:00] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[04:27:07] <oldlaptop> I hope whoever designed dd's syntax lived to see that.
[04:29:48] *** Joins: Teckla (uid172075@user/teckla)
[04:33:21] <fizzie> Yes, the records would generally be padded (with spaces, for example).
[04:33:23] <fizzie> That's also (to bring it a bit closer to on-topic) why C does not guarantee spaces immediately preceding a newline to necessarily survive in text streams.
[04:34:02] <fizzie> C11 7.21.2p2: "Whether space characters that are written out [into a text stream] immediately before a new-line character appear when read in is implementation-defined."
[04:34:14] <johnjaye> wait... what
[04:34:42] <fizzie> Because of course there'd be no way of distinguishing a trailing "content" space from a "padding" space. Unless the platform's text file format has a separate field for record content length as well.
[04:34:44] <johnjaye> how are you reading and writing the same stream. isn't that kind of dodgy
[04:35:22] <oldlaptop> Write some stuff to a file, then read it back?
[04:35:31] <fizzie> I imagine the situation it's describing is you write to a file in one execution, and read it back in another.
[04:36:22] <johnjaye> ok. that sounded odd. why not just say when writing it the space is not guaranteed
[04:37:51] <fizzie> ,cc FILE *f = fopen("test.txt", "wt"); fputs("foo   \n", f); fclose(f); char buf[16]; f = fopen("test.txt", "rt"); fgets(buf, sizeof buf, f); fclose(f); for (char *p = buf; *p; p++) printf("%02hhx ", (unsigned char) *p);
[04:37:53] <candide> fizzie: 66 6f 6f 20 20 20 0a
[04:38:00] <fizzie> Just checking what kind of a world we're living in.
[04:38:36] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[04:40:17] *** Quits: RAMIII (~RAMIII@2601:8c:801:c600::fe1a) (Ping timeout: 240 seconds)
[04:40:36] <johnjaye> what does the t do? i dont' see it in the manpage for fopen(3)
[04:40:43] <johnjaye> text?
[04:41:04] <fizzie> That's what I thought, but I misremembered that.
[04:41:04] <rsjw> that is so weird...
[04:41:18] <fizzie> Text file is the default, only binary mode has its modifier letter 'b'.
[04:41:38] *** Joins: RAMIII (~RAMIII@2601:8c:801:c600::b53b)
[04:41:39] <fizzie> I kind of vaguely thought there would have been an (optional) 't' as well, but there isn't.
[04:42:52] <johnjaye> since we're talking about what kind of world we're living in
[04:42:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:43:01] <johnjaye> what's the origin of that 'checking if the compiler is sane' test?
[04:43:12] <johnjaye> something about making a file with invalid timestamp?
[04:43:19] *** Quits: Leonard (~Administr@114.55.127.80) (Remote host closed the connection)
[04:43:29] *** Joins: frost (~frost@user/frost)
[04:43:42] *** Joins: Leonard (~Administr@114.55.127.80)
[04:44:03] <fizzie> ISTR that's just that it's capable of compiling the absolute minimal program (`int main(void) { return 0; }` or thereabouts).
[04:44:19] <fizzie> So that you don't waste time debugging more complex issues if even that's not working.
[04:44:32] <fizzie> But it might depend on the context.
[04:45:58] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[04:47:00] <johnjaye> i thought it was like. make sure if you create file A and then B that the timestamp of B is more than A
[04:47:10] <johnjaye> i guess it was actually 'build environment' is sane
[04:47:18] <fizzie> I'm sure there are tests of that nature as well.
[04:47:42] <fizzie> The FAT filesystem has a timestamp resolution of 2 seconds, which can cause problems with tools that assume file timestamps can represent each second.
[04:47:44] <johnjaye> i didn't really get the purpose of these when reading the autoconf manual
[04:47:59] <johnjaye> if your build failed wouldn't you then want all these tests to determine the reason? why run them before
[04:48:44] *** Quits: nicko (~iClass@221.236.54.23) (Read error: Connection reset by peer)
[04:48:57] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:49:47] <fizzie> I guess it's still the same idea: you want to run some very basic tests first, because if they fail, there's really no point in even trying to do the rest of the configure checks, the results would just be nonsense, and trying to debug the later tests is useless before you first get the bare minimum working first.
[04:51:25] <johnjaye> right
[04:51:38] <johnjaye> programming a lot of the time seems to have these sort of problems
[04:51:56] <johnjaye> we've all had the experience of saving changes to a source file and then the running program doesn't actually  reflect that
[04:52:23] <johnjaye> i think for awhile i was doing something like printf("<random letters>") just to establish that i was looking at the code I edited
[04:52:26] <johnjaye> or like printing a timestamp
[04:52:36] *** Joins: nicko (~iClass@221.236.54.23)
[04:54:23] <fizzie> Yeah, that happens.
[04:55:49] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[04:56:24] *** Quits: RAMIII (~RAMIII@2601:8c:801:c600::b53b) (Quit: WeeChat 2.8)
[04:57:10] *** Joins: erdem (~quassel@85.108.192.148)
[04:58:26] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[05:00:12] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-90.cspire.com) (Read error: Connection reset by peer)
[05:01:36] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[05:01:37] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[05:04:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:05:57] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 240 seconds)
[05:06:37] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:10:07] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[05:11:09] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[05:11:32] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[05:13:54] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:16:17] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:18:15] *** Quits: erdem (~quassel@85.108.192.148) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:18:37] *** Quits: donutfarian (~donutfari@2601:140:9180:5e40:88df:7fd3:8fca:5534) (Ping timeout: 240 seconds)
[05:19:16] *** Joins: kurahaupo1 (~martin@115.69.27.211)
[05:21:30] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[05:22:35] *** Quits: Figworm (FiggyWitIt@user/figworm) (Ping timeout: 256 seconds)
[05:23:43] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[05:23:47] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[05:25:02] *** Joins: Figworm (~inoor@user/figworm)
[05:32:56] *** Joins: e-momentum (~idiot@c-71-236-47-182.hsd1.tn.comcast.net)
[05:35:08] *** Joins: j-james (~apropos@97-113-119-73.tukw.qwest.net)
[05:36:51] <e-momentum> how does the envp argument in the exec...(...) family of functions work?
[05:37:28] <e-momentum> from what I skim, for key: value and key2:value2 the array is ["key", "value", "key2", "value2"], but I'm not confident in this assumption
[05:37:41] <e-momentum> could someone enlighten me as to the format of the argument expected?
[05:38:37] <fizzie> It's an array of pointers to strings that are (by convention) of the form "KEY=VALUE".
[05:38:46] <fizzie> But it's not strictly required, the environment is really just a list of strings.
[05:39:05] <fizzie> (And the list is terminated by a null pointer, just like argv.)
[05:39:17] <e-momentum> right
[05:39:44] <e-momentum> re the environment is just a list of strings: what happens when the strings don't follow the 'key=value' paradigm
[05:39:53] <e-momentum> is a certain order assumed?
[05:40:06] <e-momentum> like, first element is PATH, second is HOME, etc.?
[05:40:33] <kurahaupo1> e-momentum: no order is required; getenv just does a linear search
[05:40:44] *** Joins: Leonard (~Administr@114.55.127.80)
[05:41:19] <fizzie> ,cc int main(void) { if (fork() == 0) execve("/bin/sh", (char*[]){"sh", "-c", "echo $FOO", 0}, (char*[]){"FOO=bar", 0}); return 0; }
[05:41:21] <candide> fizzie: bar
[05:41:21] <e-momentum> okay, thanks
[05:42:09] <kurahaupo1> strings that don't contain '=' will very likely be passed through to the environment in exec, but getenv either won't match them, or will match the entire string as the "name" and return something random (possibly empty) as the result
[05:42:11] <e-momentum> i'm just trying to impliment custom environments but they're in a different format
[05:42:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[05:42:55] <e-momentum> cool
[05:43:05] <kurahaupo1> also the exec*p family will use getenv("PATH")
[05:43:15] <kurahaupo1> *sub-family
[05:44:54] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:46:42] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[05:48:12] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[05:48:14] *** Joins: __dev (~sys@user/dev/x-7984917)
[05:48:30] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:52:25] *** Quits: Kit-ten (~u0_a391@2600:380:a420:9b:42e7:36e8:b201:ddbc) (Ping timeout: 268 seconds)
[05:56:11] *** Quits: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de) (Changing host)
[05:56:11] *** Joins: cisco87 (~quassel@user/cisco87)
[05:56:25] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Read error: Connection reset by peer)
[05:56:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:56:52] *** Joins: Moonspell (~moon@140.238.223.164)
[05:58:45] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:58:59] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[05:59:22] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:59:37] *** Quits: Figworm (~inoor@user/figworm) (Ping timeout: 240 seconds)
[06:01:00] <Maxdamantus> The `a=b` pattern in `environ` is essentially a convention.
[06:01:55] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Read error: Connection reset by peer)
[06:02:22] *** Joins: Figworm (~inoor@user/figworm)
[06:02:52] *** Quits: Figworm (~inoor@user/figworm) (Client Quit)
[06:03:57] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:05:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:07:03] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:07:19] *** Joins: sebag (~guest@91.245.82.2)
[06:08:07] *** Quits: sebag (~guest@91.245.82.2) (Client Quit)
[06:10:20] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[06:10:48] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[06:11:25] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[06:11:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:11:42] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[06:11:50] <fizzie> (And a POSIX requirement.)
[06:13:25] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[06:13:40] *** Joins: sebag (~guest@91.245.82.2)
[06:14:03] <Maxdamantus> Hmm.. Maybe it is. Looking at POSIX, it seems kind of inconsistent.
[06:14:08] <fizzie> https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/basedefs/V1_chap08.html "These strings have the form `name=value`; `name`s shall not contain the character '='. For values to be portable across systems conforming to POSIX.1-2017, the value shall be composed of characters from the portable character set (except NUL and as indicated below)."
[06:14:10] <candide> Title of fizzie's link: Environment Variables
[06:14:20] <Maxdamantus> in the description of `environ` it .. yes, says what you quoted.
[06:14:39] <Maxdamantus> but in the definition for `execve`:
[06:14:39] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:14:40] <Maxdamantus> > The argument envp is an array of character pointers to null-terminated strings. These strings shall constitute the environment for the new process image. The envp array is terminated by a null pointer.
[06:14:59] <Maxdamantus> Doesn't seem to mention any other constraint for `envp`.
[06:15:17] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[06:15:41] <fizzie> I don't think it _has_ to, since it's still an environment, so the section about "environment variables" applies.
[06:15:47] <e-momentum> is there a way to determine the size of a char * without declaring a variable? tried using sizeof char * but invalid expression, as expected
[06:15:58] <fizzie> `sizeof (char *)`
[06:16:03] <e-momentum> aha, thanks
[06:16:17] <fizzie> If you want to apply the `sizeof` operator to a type name, it requires an extra pair of parentheses.
[06:16:23] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[06:17:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:17:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:17:08] *** Joins: wroathe (~wroathe@user/wroathe)
[06:17:46] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[06:18:05] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[06:19:31] <Maxdamantus> fizzie: if you read that a certain way, it doesn't seem to imply that all `environ` strings represent environment variables.
[06:20:06] <Maxdamantus> It could be saying that environment variables are defined by the environment strings that have the form name'='value
[06:20:09] *** Joins: erdem (~quassel@85.108.192.148)
[06:20:34] <fizzie> The way I read it, it does. "For a C-language program, an array of strings called the environment shall be made available when a process begins. -- These strings have the form name=value; --" is a statement about "the array of strings called the environment", and doesn't make a provision for strings that aren't environment variables.
[06:20:44] *** Quits: kitbot (~kitbot@2603-6010-a141-6fa3-0204-5aff-fe53-846c.res6.spectrum.com) (Remote host closed the connection)
[06:20:45] <Maxdamantus> in which case I would expect `getenv` to ignore environment strings without '='
[06:21:08] *** Quits: erdem (~quassel@85.108.192.148) (Client Quit)
[06:21:26] *** Joins: erdem (~quassel@85.108.192.148)
[06:22:10] *** Quits: erdem (~quassel@85.108.192.148) (Client Quit)
[06:22:31] <fizzie> In particular, the way it says "these strings have the form", not "environment variables have the form" or anything like that, immediately after saying the environment is an array of strings.
[06:22:54] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:23:08] <e-momentum> does strlen include the \0 at the end?
[06:23:15] <fizzie> Nope.
[06:23:23] <e-momentum> cool, just wanted to make sure
[06:25:15] <kurahaupo1> notionally the NUL byte is not part of the semantic value of a string, it's part of the mechanism for storing it.
[06:25:21] <fizzie> And more generally the /length of a string/ as a term defined in the standard doesn't either. But a /string/ itself still consists of the sequence of characters "terminated by and including" the '\0', so it's part of the string.
[06:25:28] <fizzie> ,c11 7.1.1p1
[06:25:30] <candide> http://www.iso-9899.info/n1570.html#7.1.1p1 [Definitions of terms] A string is a contiguous sequence of characters terminated by and including the first null character. The term multibyte string is sometimes used instead to emphasize special processing given to multibyte characters contained in the string or to avoid confusion with a wide string. A pointer to a string is a pointer to its initial (lowest a... <truncated; https://0x0.st/ozFM.txt>
[06:25:31] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[06:26:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a9bb:faa4:6c28:2bd6)
[06:26:57] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[06:27:05] <e-momentum> i'm getting an ``invalid initializer'' error for this line
[06:27:07] <e-momentum> 298     char *finstr = malloc(strlen(ptr->key) + strlen(ptr->value) + 2);`
[06:27:21] *** Joins: erdem (~quassel@85.108.192.148)
[06:27:22] <e-momentum> i'm confused; what's wrong with this?
[06:27:23] <danielcamiel> miss finster!
[06:27:28] *** Quits: erdem (~quassel@85.108.192.148) (Client Quit)
[06:27:39] <fizzie> Is it outside the scope of any function? Guessing no from indentation, just checking.
[06:27:41] <e-momentum> FINished STRing, lol
[06:27:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:28:00] <e-momentum> fizzie: it's in a while loop
[06:28:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:28:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:28:09] *** Joins: wroathe (~wroathe@user/wroathe)
[06:28:16] <fizzie> Well, is that while loop inside a function? ;) Think you'd be getting other errors if not though.
[06:28:31] <e-momentum> yup
[06:28:50] <e-momentum> ptr is defined, strlen is defined
[06:29:00] *** Joins: erdem (~quassel@85.108.192.148)
[06:29:19] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[06:29:23] <fizzie> ,cc int main(void) { struct { char *key, *value; } s = { "foo", "bar" }, *ptr = &s; char *finstr = malloc(strlen(ptr->key) + strlen(ptr->value) + 2); } // it's perfectly valid in this context
[06:29:25] <candide> fizzie: Success (no output).
[06:29:53] <e-momentum> hmmst
[06:30:25] *** Quits: erdem (~quassel@85.108.192.148) (Client Quit)
[06:30:25] <fizzie> Maybe look for any stray }s earlier or things of that kind. And does it say anything _else_ than "invalid initializer"?
[06:30:46] <e-momentum> it's a wrong line, sorry
[06:30:55] <e-momentum> here it is 294   char *buffer[] = malloc((elem + 1) * sizeof (char *));`
[06:31:09] <fizzie> That's an array, so its initializer must be a {}-enclosed list.
[06:31:25] <fizzie> You may want `char **buffer = malloc(...)` instead.
[06:31:34] <e-momentum> is it equivalent?
[06:31:44] <e-momentum> it'd think not
[06:31:45] <fizzie> No, but it's more likely to be what you want. :)
[06:31:58] <fizzie> It'd be a (pointer to the first element of) an allocated array of `char *`s.
[06:32:00] <e-momentum> i'm trying to generate an envp for exec family functions
[06:32:11] <e-momentum> could I cast from void *?
[06:32:24] <fizzie> When you write `char *buffer[]` you're declaring an _array_, not a pointer.
[06:32:36] <e-momentum> right
[06:32:49] <e-momentum> could you do char *(*buffer[])?
[06:32:55] <e-momentum> a pointer to an array of pointers?
[06:33:06] <fizzie> That would be an array of pointers to pointers.
[06:33:28] <fizzie> You _could_ do a pointer to an array of pointers with `char *(*buffer)[123]`, but you generally wouldn't.
[06:33:44] <fizzie> If you want an allocated array of something, you use a pointer to its first element to talk about it.
[06:33:59] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:34:00] <fizzie> Just like you do `char *foo = malloc(123);` to allocate an array of 123 `char` objects.
[06:34:23] <fizzie> So you do `char **strings = malloc(4 * sizeof (char *))` to allocate an array of 4 `char *` objects.
[06:34:36] <fizzie> And then strings[0] through strings[3] to refer to each of the pointers in it.
[06:34:40] <e-momentum> how do I translate that to a char *envp[]?
[06:34:43] <e-momentum> oh
[06:34:45] <e-momentum> okay
[06:34:58] <fizzie> You just pass it. As a function parameter, `char *envp[]` *is* a `char **envp`.
[06:34:58] <e-momentum> and to get to a char *envp[] i can deference strings?
[06:35:12] <e-momentum> so the memory layout is the same?
[06:35:25] <fizzie> Even more than that, the parameter type of the function _is_ a pointer.
[06:35:34] <e-momentum> okay, thanks
[06:35:39] <fizzie> You can't pass (or return) arrays by value, so all parameter declarations with an array type are converted to pointers.
[06:35:45] *** Quits: Moonspell (~moon@140.238.223.164) (Quit: #EOF!)
[06:36:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:36:42] <fizzie> (C11 6.7.6.3p7: "A declaration of a parameter as 'array of /type/' shall be adjusted to 'qualified pointer to /type/', --")
[06:37:06] <fizzie> That being specific to function parameters; elsewhere, like in a variable declaration, arrays and pointers aren't the same.
[06:38:35] *** Joins: Moonspell (~moon@140.238.223.164)
[06:38:40] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[06:40:33] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:41:40] *** Quits: Moonspell (~moon@140.238.223.164) (Client Quit)
[06:41:55] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[06:42:29] *** Joins: Moonspell (~moon@140.238.223.164)
[06:42:50] *** Quits: Moonspell (~moon@140.238.223.164) (Client Quit)
[06:43:25] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:43:31] <sebag> What some modern C techniques do you know?
[06:44:34] <Twix> sebag, i like the CONTAINER_OF macro. Like it is used in Zephyr.
[06:44:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:44:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:44:56] *** Joins: wroathe (~wroathe@user/wroathe)
[06:45:15] <Twix> really cool to hide internals of a handle to some driver or library.
[06:48:17] <e-momentum> hmm, is execvpe included in standard libraries? i just included unistd.h but it's not there
[06:49:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:49:27] <e-momentum> oh, nvm
[06:49:41] <Twix> afaik it is posix, so nope
[06:50:10] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[06:50:34] <Twix> oh, unistd. Yes it shoud be in unistd.h
[06:52:07] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 256 seconds)
[06:52:31] <fizzie> There's no `execvpe` in POSIX. With POSIX exec* functions, you have to choose between `e` and `p`.
[06:52:52] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Read error: No route to host)
[06:52:59] <Twix> then its gnu
[06:53:00] <e-momentum> right
[06:53:10] <fizzie> Yes, and it needs _GNU_SOURCE defined in a more standards-conforming modes.
[06:53:20] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[06:53:48] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[06:54:32] *** Quits: samir_ (~azureuser@user/samir) (Ping timeout: 256 seconds)
[06:54:35] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:38] *** Quits: j-james (~apropos@97-113-119-73.tukw.qwest.net) (Quit: leaving)
[06:54:49] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[06:54:51] <fizzie> (Never actually noticed that before. I guess I haven't needed to pass a custom environment *and* look up a binary in PATH at the same time.)
[06:56:25] *** Joins: karakedi (~eAC53C340@user/karakedi)
[06:57:19] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[06:58:49] <rsjw> execvpe is on openbsd too
[06:59:05] <kurahaupo1> rsjw: Does it look up PATH in the new or old environment?
[07:00:14] <rsjw> not sure.. let me check
[07:00:49] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:01:24] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[07:01:39] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:11c4:68db:ad36:c833)
[07:02:04] <fizzie> I'd like to put a bet on "old", but there's no mechanism for that.
[07:03:13] *** Joins: slidercrank (~slidercra@user/slidercrank)
[07:04:10] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[07:05:14] *** Joins: frost (~frost@user/frost)
[07:07:03] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[07:10:51] *** Joins: nullptr| (~nullptr@user/nullptr/x-2182142)
[07:13:57] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[07:14:22] *** Quits: e-momentum (~idiot@c-71-236-47-182.hsd1.tn.comcast.net) (Ping timeout: 256 seconds)
[07:14:48] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[07:14:52] *** Joins: Tedtoxic (~Guest73@2405:201:5505:f0a7:7079:3df9:23b2:549)
[07:14:55] <Tedtoxic> Hi
[07:15:24] <Tedtoxic> Anyone ?
[07:15:33] <Tedtoxic> Or all bots
[07:15:42] *** Joins: e-momentum (~idiot@c-71-236-47-182.hsd1.tn.comcast.net)
[07:16:10] <danielcamiel> hello, tedtoxic. do you like green eggs and ham?
[07:16:34] <__dev> hey
[07:16:51] <nicode> I'm sorta here Tedtoxic, what's up?
[07:16:57] *** Quits: Jong (~Jong@174.27.0.61) (Ping timeout: 240 seconds)
[07:18:57] <e-momentum> hmmm, so I'm passing a char *filename, char *argv[], and char **envp to execvp and it seems the process isn't executing correctly, as I'm getting an 'Error connecting to socket error'
[07:18:57] <Tedtoxic> Nope danielcamiel. Green eggs 😂
[07:19:51] <Tedtoxic> Sudo apt update
[07:20:06] <Tedtoxic> Sudo apt upgrade
[07:20:18] <pnbeast> ,insult Tedtoxic
[07:20:19] <candide> Tedtoxic: Have you considered suing your brains for lack of support?
[07:20:37] <danielcamiel> would you like them in a box? would you like them with a fox?
[07:20:47] <Tedtoxic> Sudo apt install aircraft-ng
[07:21:03] <Tedtoxic> *aircrack
[07:21:12] <nitrix> What's with all the noise in the channel all of sudden. They sound like GPT-2 spam.
[07:21:58] <Tedtoxic> candide is a lazy bot
[07:22:05] <nitrix> Tedtoxic, Do you have a C question?
[07:22:08] <candide> T​edtoxic, Most assuredly.
[07:22:17] <e-momentum> it's printing to stderr, and there's no calls to perror printing the error, so it's an internal library thing
[07:22:22] *** Joins: samir_ (~azureuser@user/samir)
[07:22:29] *** Joins: trafficjam (~trafficja@119.17.42.59)
[07:22:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:22:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:22:32] *** Joins: wroathe (~wroathe@user/wroathe)
[07:22:34] <trafficjam> is K&R considered up to date?
[07:22:39] <trafficjam> (2nd edition)
[07:22:53] <pragma-> trafficjam: no
[07:23:04] <trafficjam> so is it worth reading?
[07:23:13] * pragma- waves hand.
[07:23:13] <nicode> pragma- what is then?
[07:23:24] <pragma-> nicode: ,knk
[07:23:24] <candide> nicode: 'C Programming: A Modern Approach' by K. N. King (2nd Ed, 2008) is a recommended C book that teaches both C89 and C99. http://knking.com/books/c2/index.html
[07:23:32] <Tedtoxic> nitrix, no but i have a python q
[07:23:32] *** Joins: Jong (~Jong@2620:10d:c090:400::5:90fa)
[07:23:48] <nitrix> Knk or Effective C are my top two I think.
[07:24:16] <nitrix> Tedtoxic, Cool. Then ask #python and stop blabbering nonsense.
[07:26:03] <Tedtoxic> But what if python is c and c is python nitrix
[07:26:20] <fizzie> e-momentum: Doing `strace -f` might help. It's good at showing how the system actually interpreted your call to a function like execve.
[07:26:23] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[07:26:39] <nitrix> ,aka Tedtoxic
[07:26:39] <candide> T​edtoxic also known as: T​edtoxic
[07:26:41] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[07:26:43] <nitrix> ,aka nicode
[07:26:43] <candide> n​icode also known as: nic, n​icode
[07:26:48] <nitrix> ,aka danielcamiel
[07:26:49] <candide> d​anielcamiel also known as: d​anielcamiel
[07:26:52] <pony> ,aka pony
[07:26:52] <candide> p​ony also known as: as, C, hors, lua, nimi-ala, no-n, p​ony, pony\, s​chna, small-horse, smol-hors, u-ou, wery
[07:27:03] <nitrix> They don't seem related.
[07:27:04] <pony> what
[07:27:09] <rsjw> kurahaupo1: it appears to use the old environment's PATH to look up the execed program
[07:27:11] <pony> I've never been wery or schna
[07:27:14] <nicode> lol
[07:27:24] <Tedtoxic> ping #c
[07:27:36] <kurahaupo1> I wonder what happens to getent() when the same name is repeated among the strings? A naïve linear search would just find the first one, but does the standard makes that a requirement?
[07:27:44] <pony> tf is a schna
[07:28:00] <fizzie> kurahaupo1: POSIX makes it undefined.
[07:28:14] <kurahaupo1> Undefined as in "might go BANG!"?
[07:28:29] <kurahaupo1> (The C language sense of Undefined)
[07:28:43] <fizzie> "If more than one string in an environment of a process has the same name, the consequences are undefined."
[07:29:03] <kurahaupo1> Oh, so HACF is a possible outcome
[07:29:26] <cryptonector> getent() as in getpwent() and such?
[07:30:05] <fizzie> Yes. Also if you modify the string contents directly, rather than change the pointers and/or use setenv/putenv.
[07:30:05] <kurahaupo1> typo, getenv()
[07:30:11] <cryptonector> ah
[07:30:23] <fizzie> "If the application modifies the pointers to which environ points, the behavior of all interfaces described in the System Interfaces volume of POSIX.1-2017 is undefined."
[07:30:40] <cryptonector> I'd expect that if multiple env settings have the same var name then odd things may happen, but no real explosion
[07:30:43] <Tedtoxic> /
[07:30:43] <Tedtoxic> CComPtr<IDISPATCH> spDisp;
[07:30:44] <Tedtoxic> HRESULT hr = m_pWebBrowser2->get_Document(&spDisp);
[07:30:44] <Tedtoxic> if (SUCCEEDED(hr) && spDisp)
[07:30:45] <Tedtoxic> {
[07:30:45] *** ChanServ sets mode: +o candide
[07:30:45] <Tedtoxic>     // If this is not an HTML document (e.g., it's a Word doc or a PDF), don't sink.
[07:30:46] <Tedtoxic>     CComQIPtr<IHTMLDOCUMENT2 &IID_IHTMLDocument2> spHTML(spDisp);
[07:30:46] <Tedtoxic>      if (spHTML)
[07:30:47] <Tedtoxic>      {
[07:30:47] *** candide sets mode: +b *!~guest73@2405:201:*
[07:30:49] <nitrix> Saw that coming.
[07:30:58] <fizzie> I guess you can't even change the pointers, just use the functions.
[07:31:02] <cryptonector> slowbot
[07:31:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:31:26] <kurahaupo1> In theory a process could start by building a rapid-lookup data structure from the received environment; I guess it's allowed to blow up while doing that
[07:31:34] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[07:31:49] *** candide sets mode: -b *!~guest73@2405:201:*
[07:31:51] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[07:32:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[07:32:36] <nicode> what was that, a 1 min penalty?
[07:32:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[07:33:04] <nitrix> candide is capable of moderating the channel on its own, they aren't worth our time, lol.
[07:33:05] <kurahaupo1> nicode: it's just to stop people pasting huge things
[07:33:18] <candide> n​itrix, Don't be silly.
[07:33:19] *** Joins: Leonard (~Administr@114.55.127.80)
[07:33:37] * kurahaupo1 loves candide
[07:33:43] * kurahaupo1 hates candide
[07:33:45] * candide tickles k​urahaupo1
[07:33:49] <nicode> kurahaupo1: oh, I get that. just seems like a small amount of time, but I guess the algorithm knows what's best, eh?
[07:33:50] *** Quits: Leonard (~Administr@114.55.127.80) (Remote host closed the connection)
[07:33:55] * candide winks at k​urahaupo1
[07:34:34] *** Joins: Leonard (~Administr@114.55.127.80)
[07:34:43] <fizzie> There was an explicit call-out re using a higher-performance data structure to "cache" environ, but I can't re-find it.
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:33] *** Quits: dithpri (~dithpri@gateway/tor-sasl/dithpri) (Remote host closed the connection)
[07:36:55] *** Joins: dithpri (~dithpri@gateway/tor-sasl/dithpri)
[07:37:36] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[07:37:57] <Tedtoxic> How we convert a javascript, c, c++ ,c#  code into python directly. Do we have any soft or complier for it. Vice versa
[07:38:21] <Tedtoxic> Have anyone worked on it upto now ?
[07:38:54] <zalt> there's no straightforward way of doing that, you'd have to port the projects manually
[07:39:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:39:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:39:02] *** Joins: wroathe (~wroathe@user/wroathe)
[07:39:03] <Tedtoxic> danielcamiel
[07:39:28] <danielcamiel> no youu're the first one
[07:39:38] <danielcamiel> the pioneer
[07:39:48] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[07:40:31] <Tedtoxic> zalt thx for the info. But what if I'll have found a way to do it alone with a Syntex import
[07:41:00] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[07:41:05] <Tedtoxic> danielcamiel yeah, i might be the one soon
[07:41:19] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[07:41:36] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:42:58] <pony> python and C get things done so entirely differently though
[07:43:40] <e-momentum> is the argv supposed to be in the format {"ls", "-a", 0} or {"ls", "-a", NULL}
[07:43:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:43:46] <nicode> Tedtoxic: coding is fun, just do it by hand.
[07:44:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[07:44:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[07:45:24] <e-momentum> when using execvp
[07:45:26] <rsjw> e-momentum: you can do either. the zero will just be converted to a pointer
[07:45:39] <e-momentum> cool
[07:45:42] <Tedtoxic> nicode, i don't think so it's fun. You'll know it when you'll create a simple bash script.
[07:45:57] * e-momentum continues to find problems whith my code
[07:46:02] * e-momentum bangs head against wall
[07:46:30] <Tedtoxic> Being able to code isn't a thing but to understand and implement it in real life is different.
[07:46:50] <nicode> Tedtoxic: I said programming is fun, not scripting.
[07:46:57] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 240 seconds)
[07:47:08] <kurahaupo1> nicode: That's a distinction without meaning
[07:47:34] <zalt> Tedtoxic: sometimes there exists source-to-source compilers from certain languages to others, for example: lisp to C, it can be done in theory, but in practice computer generated code is unreadable by humans, and sometimes features can't be mapped easily between languages
[07:47:41] <nicode> kurahaupo1: I'm joshing.
[07:47:48] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[07:48:33] <fizzie> When using `execlp` though, you'll have to be a little more careful about that null pointer terminator, since as a variadic function there's no automatic conversion. But simply using `NULL` isn't being careful enough: it's possible that macro just expands to an unadorned `0`.
[07:48:56] <Tedtoxic> pony i know, but I'm working on it to make it simpler even when can use direct python to program embedded systems in near future :)
[07:50:06] <pony> there's micropython
[07:50:11] <pony> you can program the rpi pico with it
[07:51:03] <rsjw> fortran to C is one that has been used a lot
[07:51:12] <Tedtoxic> pony i know that for sure 🤦🏻‍♂️ take it on a big scale
[07:51:14] <kurahaupo1> fizzie: yeah, uncast NULL works in execl* as long as sizeof(int) == sizeof(char*)
[07:51:41] <kurahaupo1> (and it probably works if sizeof(int) > sizeof(char*) but that would be a weird architecture)
[07:52:28] <fizzie> It tends to work in practice often even if sizeof (int) < sizeof (char *), and in theory of course them being the same size isn't sufficient.
[07:54:03] <Tedtoxic> There should be on medium to get the things done that's what I'm talking about. Program in c or c++ convert it into python or java. I'm really working on it but it'll take time
[07:54:14] <fizzie> Well, at least for the first few arguments. ;)
[07:54:54] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:19d9:50ff:7928:95e)
[07:54:57] <fizzie> Also, there are serious Scheme implementations that target C. Like Chicken Scheme.
[07:55:38] <fizzie> None with a goal of generating particularly readable C that I know of though.
[07:57:16] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[07:58:04] <danielcamiel> buk buk buk buk buk buk buk buk
[07:58:30] <fizzie> Maybe "serious" wasn't the best word.
[07:59:09] <Tedtoxic> "Be real" for sure
[07:59:29] *** Quits: Tedtoxic (~Guest73@2405:201:5505:f0a7:7079:3df9:23b2:549) (Quit: Client closed)
[07:59:59] <e-momentum> why would a socket connection fail using pipe?
[08:01:36] <nicode> Is there a C function to identify if a pointer points to an element in the array? I know I can write one, just curious if one already exists.
[08:04:17] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[08:04:59] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 252 seconds)
[08:06:37] *** Joins: vysn (~vysn@user/vysn)
[08:06:54] *** Joins: Leonard (~Administr@114.55.127.80)
[08:08:51] <fizzie> Pipes are not sockets, so I'm having trouble figuring out how a socket connection could ever succeed using a pipe. But probably that's not what you meant.
[08:08:57] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[08:09:05] <rsjw> even if sizeof(int) == sizeof(char*) and an int 0 is all bits zero, it might be the case that the null pointer is not all bits zero. (a rare case, sure) one of those twitter people talks about it in a thread here: https://twitter.com/thingskatedid/status/1293476425454895105
[08:09:19] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[08:09:38] <e-momentum> i'm opening a pipe, and there's a mysterious message printed reading "Failed to connect to the socket."
[08:10:47] <fizzie> Even if sizeof (int) == sizeof (char *), and a null pointer has the same representation as an integer zero, passing 0 to a variadic function expecting a pointer doesn't need to work; the parameter-passing convention is allowed to be entirely different.
[08:10:52] <e-momentum> using strace I can't find anything that prints
[08:10:54] <e-momentum> it
[08:12:33] *** Quits: moog_ (~moog@107.126.53.99) (Remote host closed the connection)
[08:13:50] *** Quits: Leonard (~Administr@114.55.127.80) (Remote host closed the connection)
[08:14:13] *** Joins: Leonard (~Administr@114.55.127.80)
[08:14:15] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[08:15:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:15:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:15:20] *** Joins: wroathe (~wroathe@user/wroathe)
[08:17:14] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:17:46] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[08:20:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:23:30] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[08:24:24] *** Joins: nuxil (~nuxil@141.195.51.213)
[08:26:54] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[08:27:08] <nitrix> nicode, No.
[08:30:36] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[08:33:17] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[08:35:07] <e-momentum> how do I get every environment variable avilable, and get it in a datatype similar to envp used in the exec* family of functions
[08:37:09] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:38:14] <fizzie> On a POSIX system, that's the `extern char **environ;` variable.
[08:38:19] <rsjw> some platforms offer the environ variable. others let you add en envp argument after argv
[08:38:55] <fizzie> (Which in POSIX is something you declare in the program, though apparently with _GNU_SOURCE glibc supplies a declaration for it in <unistd.h>.)
[08:41:02] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[08:41:07] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:42:54] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[08:47:02] *** Quits: AmR (~AmREiSa@156.199.28.131) (Quit: Konversation terminated!)
[08:50:54] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[08:51:02] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[08:52:08] <trafficjam> what does the c preprocessor do?
[08:52:12] *** Joins: epony (~epony@user/epony)
[08:54:40] *** Quits: Matt|home (~matt@adsl-74-233-58-81.mia.bellsouth.net) (Ping timeout: 256 seconds)
[08:57:16] <rsjw> it's a text substitution tool
[08:58:04] <rsjw> or token substitution tool, depending on how you look at it
[09:01:26] *** nuxil_ is now known as nuxil
[09:06:21] *** Joins: Leonard (~Administr@114.55.127.80)
[09:08:12] <nicode> What's a good way to verify that a pointer is unset? Should I initialize w/ 0 as "not set" and then check for == 0?
[09:08:41] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[09:08:51] <rsjw> sure
[09:13:52] *** Joins: AmR (~AmREiSa@156.199.28.131)
[09:15:30] <trafficjam> rsjw: so it inserts the contents of #include files into the program text?
[09:15:42] <rsjw> yup
[09:18:39] *** Quits: e-momentum (~idiot@c-71-236-47-182.hsd1.tn.comcast.net) (Quit: WeeChat 3.0)
[09:18:46] <trafficjam> what do all the '# ...' line prefixes in a `.i` file represent?
[09:19:13] <trafficjam> `# 0 "main.c"
[09:19:23] <trafficjam> `# 0 "<built-in>"
[09:19:32] <trafficjam> `# 0 "<command-line>"
[09:19:33] <trafficjam> etc
[09:21:40] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[09:23:34] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[09:25:14] <rsjw> trafficjam: where do you see that?
[09:25:47] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 268 seconds)
[09:28:20] *** Joins: pingpongball (~pingpongb@43.228.192.123)
[09:30:46] *** candide sets mode: -o candide
[09:31:57] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 240 seconds)
[09:34:10] *** Joins: m4v (~znc@ubuntu/member/m4v)
[09:34:23] *** Quits: rsjw (~quassel@user/rsjw) (Quit: rsjw)
[09:36:04] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:37:30] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[09:37:46] *** Quits: pingpongball (~pingpongb@43.228.192.123) (Quit: Client closed)
[09:38:50] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[09:38:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:39:41] *** Joins: Leonard (~Administr@114.55.127.80)
[09:40:37] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[09:42:39] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:19d9:50ff:7928:95e) (Read error: Connection reset by peer)
[09:44:23] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:19d9:50ff:7928:95e)
[09:47:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:48:38] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[09:51:33] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[09:52:39] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[09:54:37] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[09:56:21] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[09:57:53] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[09:58:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:01:11] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:01:26] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:02:50] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[10:04:51] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[10:06:51] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[10:07:02] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:12:59] <trafficjam> rsjw: in the `.i` file gcc genereates
[10:16:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:16:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:16:08] *** Joins: wroathe (~wroathe@user/wroathe)
[10:17:23] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:18:58] <nitrix> trafficjam, They represent the original line numbers of the files that got included. The .i is a preprocessing artifact.
[10:19:52] <nitrix> trafficjam, When you use the -E switch, instead of an executable the translation halts right after the preprocessing and you get that.
[10:20:24] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[10:20:28] <trafficjam> nitrix: why include line numbers of certain files though? like what's it used for?
[10:20:45] *** Joins: tejr (~tejr@user/tejr)
[10:21:01] <trafficjam> https://dpaste.org/frjX
[10:21:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:22:06] <nitrix> Because if the compilating fails and it's traced back to one of those lines, the compiler can then line about the origin of the problem. Instead of telling you the .i is at fault, it'll point to the original .h file at the right line.
[10:23:06] <nitrix> This is machinery to help integration into IDEs, you've dug way too far.
[10:23:30] <trafficjam> oh, so it's not actually necessary for compilation?
[10:23:45] <nitrix> Of course it's necessary.
[10:24:22] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 268 seconds)
[10:24:32] <trafficjam> "machinary to help integration into IDEs" does not sound necessary, only helpful
[10:25:03] <nitrix> The program will be missing definitions without the compiled headers (.i file). But the numbered comments are there just to make the error reporting legible.
[10:25:31] <nitrix> Those aren't necessary.
[10:25:37] <trafficjam> sorry i meant to refer to the numbered comments, not .i files in generally (when talking about necessary)
[10:26:15] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[10:26:36] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[10:27:57] <trafficjam> and also, is does the preprocessing step literally just take the source from "<library>.h" and insert it into main.i (before main's own source code)?
[10:28:16] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[10:29:00] <trafficjam> or does it transform the <library.h> code somehow before inserting it?
[10:29:46] <nitrix> Well I don't know how you've found that file. If it was laying somewhere on your system, then its goal is probably to speed up compilation by having some header somewhere already preprocessed with all the macros expanded, so that it doesn't have to read and chase all the includes recursively, tokenize, expand and stuff.
[10:30:40] *** Joins: Darkcoal (~user@2001:16a2:77fa:2800:cada:750d:e747:6d0a)
[10:30:55] <trafficjam> nitrix: how i found '.i' files?
[10:31:12] <nitrix> Yeah. You don't normally get .i files.
[10:31:34] <nitrix> They're internal build artifacts of GCC and Clang when you interrupt the preprocessor.
[10:31:46] <trafficjam> oh yeah, i used the -save-temps=obj flag
[10:31:51] <nitrix> They aren't C. You wont see this in the Standard, you're off tracks.
[10:31:51] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[10:31:54] <nitrix> Well, there you go.
[10:31:56] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Remote host closed the connection)
[10:32:01] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:32:20] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[10:32:49] <nitrix> I feel like if I'm helping you understand what they do, I'm just encouraging you doing shit that you shouldn't be doing.
[10:32:50] <trafficjam> this is compiler related, i'm trying to learn more general systems than just C at the moment
[10:34:05] <nitrix> Given a foo.c that includes foo.h, the compiler will processes the header file and the final result normally gets included in the file directly.
[10:36:36] *** Quits: dithpri (~dithpri@gateway/tor-sasl/dithpri) (Ping timeout: 276 seconds)
[10:36:36] <trafficjam> got it
[10:36:40] <nitrix> If you use -E, the translation gets interrupted and the output becomes that of the preprocessor. If you use -save-temps=obj, the compilation completes normally, but all the individual translation steps are written to files.
[10:37:00] *** Joins: Leonard (~Administr@114.55.127.80)
[10:37:03] <trafficjam> yeah i used using that to inspect the intermediary artifacts
[10:37:10] <trafficjam> *used that
[10:37:32] <nitrix> You should see a .i for the result of the preprocessor, a .s assembly file for the codegen, then a .o with the binary output with symbols.
[10:37:32] *** Joins: walterwhip (~www@user/walterwhip)
[10:38:15] *** Joins: dithpri (~dithpri@gateway/tor-sasl/dithpri)
[10:38:21] <trafficjam> yeah i was looking at the .s output as well, but i don't know assembly so i don't fully understand what's its doing under the hood, that's another thing i need to learn
[10:39:08] <nitrix> I normally just use https://godbolt.org when I want to see the assembly.
[10:39:30] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[10:39:42] <trafficjam> oh yeah i think you pasted that a day or two ago, very useful tool
[10:39:56] <trafficjam> what's the convention around C header files, should i only create a header if a file other than the file where the code is defined needs access to those functions?
[10:40:55] <nitrix> Think of translation units (.c/.h pairs) as modules. What's in the .h file is the part of the interface of your module that you want to be public.
[10:42:02] <trafficjam> ah ok, so does that mean any .c file other than main needs its own header file?
[10:42:19] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[10:42:45] <nitrix> That question suggests you didn't understand parts of what I wrote. Maybe you should ask about those parts instead of guessing.
[10:43:04] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[10:43:08] <trafficjam> let me phrase it another way:
[10:44:09] <nitrix> It's common, yes, but I have trouble with your use of the word "needs".
[10:44:12] <trafficjam> every file that is written obviously needs to be imported by some other file (except main.c), so even if you don't want to include all functions for some file `foo.c`, you still need the header file
[10:44:20] *** Joins: karthy (~karthy@162.216.143.166)
[10:44:29] <trafficjam> well my point is why write a file if it's not used
[10:44:38] <nitrix> That's where you're wrong. Not every file needs to be imported.
[10:44:43] <trafficjam> oh
[10:44:52] <trafficjam> doesn't it need to be imported to be used though?
[10:44:59] <karthy> in string comparing how do i do a single xor on all values
[10:45:45] <nitrix> trafficjam, It's more subtle than this and you're missing a lot of the necessary terminology to understand it, but I'll bite.
[10:45:57] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[10:46:10] <trafficjam> no please, i'm trying to learn here
[10:46:25] <trafficjam> if my assumptions are wrong please let me know
[10:48:01] <nitrix> trafficjam, All C functions have by default "external" linkage, meaning other translation units are allowed to refer to those functions and once the translation units are combined into an executable, the compiler (well the part of the compiler that we canonically call the linker) should happily realize that the symbol named `foo` mentioned in unit A.c is to be found in B.c (which ends up being B.o) and link things together to create a proper executable that works.
[10:50:01] <nitrix> trafficjam, Unfortunately, that mechanism is very limited, it works based on the "symbols" (name of things) and there's no information about whether that's a variable or a function, what type it has, if it even has arguments, that's assumed by the linker to have already been accounted by earlier phases of the compiler.
[10:51:10] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[10:52:16] *** Joins: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net)
[10:52:42] <nitrix> trafficjam, That's for a sneak peak of how linking works. Now that you know that, you have to understand what leads to the creation of those symbols and the ability to use the symbols.
[10:53:33] <nitrix> trafficjam, The symbols are found in the .o files of the .c files that had code providing new C definitions.
[10:53:59] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:19d9:50ff:7928:95e) (Read error: Connection reset by peer)
[10:54:14] <nitrix> trafficjam, Similarly, the symbols can be used by with an appropriate declaration.
[10:54:17] <nitrix> For example.
[10:54:50] <nitrix> player.c defines void player_move(struct player *p, int x, int y) { p->x += x; p->y += y; }
[10:55:12] <nitrix> player.h declares void player_move(struct player *p, int x, int y);
[10:55:40] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:19d9:50ff:7928:95e)
[10:56:04] <nitrix> The compiler ends up compiling player.c into player.o and creating the symbol `player_move`.
[10:56:50] <trafficjam> just to clarify, are .o files machine object code?
[10:57:35] <nitrix> A blend of binary code that will run on your processor, but structured with symbols, so it's a little more organized.
[10:57:52] <trafficjam> ah ok
[10:58:09] <nitrix> Remember that the compilation isn't complete at that stage, so the compiler will have to find functions again in this file to tie everything together.
[10:58:40] <nitrix> But yes, the body of the function is binary at that point.
[10:58:51] <trafficjam> so the linker takes .o code as input and then outputs an executable?
[10:59:22] <trafficjam> inserting (linking) other include'd .o files (e.g. printf.o)
[11:00:11] <nitrix> Yes. It merges all of them together and fixes all the calls between functions with their proper final location in the executable.
[11:00:34] <nitrix> That's why it still needs to know about the name of things, their offsets and stuff.
[11:00:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[11:00:58] <nitrix> Anyway. Continuing.
[11:01:42] <nitrix> Other translation units, let's say main.c could call `player_move`, it's actually available to us, we know it's in player.c (now player.o) somewhere.
[11:02:31] <nitrix> But we don't know anything about the type of the function, the number of arguments, nothing. Essentially, we're missing the definition.
[11:02:37] <nitrix> Sorry, missing the declaration.
[11:02:59] *** Joins: CtokaX (~ctokax@103.27.2.72)
[11:04:16] <nitrix> To solve this, main.c could declare to the compiler that there is indeed a function named `player_move` and to just trust it. void player_move(struct player *p, int x, int y);
[11:04:34] <nitrix> Now you can compile main.c who's calling player_move located in player.c.
[11:05:00] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[11:05:17] <nitrix> Because you've let the compiler know that you intend to use the symbol player_move and you've also told it what the parameters are, so it can generate the right stack operations and all that.
[11:05:45] *** Joins: manx- (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de)
[11:05:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:06:10] <nitrix> That gives you your main.o, your player.o, the linker merges them, realizes they're both talking about the same player_move, patches some CALL and JMP instructions, bam, you have your executable.
[11:06:26] <nitrix> trafficjam, Did I lose you?
[11:07:42] <trafficjam> i don't think so... what you're saying is that main.c doesn't necessarily need to #include player.h in order to be able to use `player_move`? (by declaring player_move inside main.c itself), is that correct?
[11:08:02] <trafficjam> is that what "external" linkage refers to?
[11:08:12] <nitrix> Yes. No.
[11:08:33] <nitrix> Actually yes to both but let me clarify.
[11:08:43] *** manx- is now known as manx
[11:09:57] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[11:10:31] <nitrix> player.c has a definition, which is the actual code of the function, that one is simple.
[11:11:01] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 240 seconds)
[11:11:03] <nitrix> main.c has a declaration, which is letting the compiler know that there is a function named `player_move` and what its arguments are, so that it can generate the binary of main.o which the right instructions.
[11:11:14] *** Quits: Darkcoal (~user@2001:16a2:77fa:2800:cada:750d:e747:6d0a) (Ping timeout: 268 seconds)
[11:11:27] <nitrix> (Like, pushing 3 arguments on the stack, that kind of stuff)
[11:11:42] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[11:11:46] <nitrix> There might NOT actually be such function.
[11:11:49] *** Quits: ADHD (~XXX@user/ADHD) (Ping timeout: 240 seconds)
[11:11:55] <nitrix> The translation units are compiled independently.
[11:12:11] <nitrix> player.c doesn't know about main.c, nor does main.c knows about player.c. You understand?
[11:12:11] *** Joins: Leonard (~Administr@114.55.127.80)
[11:12:24] *** Joins: jinsun_ (~jinsun@user/jinsun)
[11:12:37] <nitrix> So you need that declaration to say "Trust me on that for now".
[11:12:40] *** Joins: Darkcoal (~user@139.64.51.226)
[11:12:57] <nitrix> trafficjam, So far so good? I'll explain .h last.
[11:14:29] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[11:15:21] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[11:15:46] <trafficjam> yeah all good so far
[11:15:54] <nitrix> Demonstration:
[11:16:11] <nitrix> ,cc void foo(int x); foo(42);
[11:16:12] <candide> nitrix: /usr/bin/ld:  in function 'main':  undefined reference to 'foo'
[11:17:34] <nitrix> This translation unit generated instructions (.o) that prepares the argument 42 and then calls a function named `foo`.
[11:18:25] <nitrix> Then the linker links all the .o together to create the program, realizes that main.o needs a `foo`, searches desperately for `foo` in other units, doesn't find it and errors out.
[11:18:52] <nitrix> "You tried to reference the symbol `foo`, but it wasn't defined". "Undefined reference to `foo`".
[11:18:52] *** Joins: mahmutov (~mahmutov@5.176.49.198)
[11:19:37] <nitrix> What's going on here is that we have a declaration that lets us use the function, but the definition that was ought to be in another unit is actually missing.
[11:19:39] <trafficjam> what exactly does 'other units' refer to?
[11:19:44] <nitrix> Other .c files.
[11:19:55] <trafficjam> in the same directory?
[11:20:06] <nitrix> It doesn't matter where they are.
[11:20:22] *** Joins: kts (~kts@103.73.237.214)
[11:20:54] <trafficjam> like i mean how does the compiler know about other .c files unless they're defined in a .h file?
[11:21:02] <nitrix> What's important is that the units are compiled independently. They're often compiled in parallel at the same time in different threads.
[11:21:33] <nitrix> trafficjam, You pass them as arguments to your compiler. gcc -c main.c player.c
[11:21:58] <trafficjam> oh ok, i didn't even realize that you can pass multiple files to gcc like that lol
[11:22:13] <trafficjam> i thought you just passed main, and #include'd any other files you needed
[11:22:48] <trafficjam> that clears up a lot of the confusion
[11:22:51] <nitrix> Well, you could compile main.c and then compile player.c if you wanted. It'll produce .o files and you could link them later on too.
[11:22:54] <nitrix> Ignore #include and .h for now.
[11:23:01] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:19d9:50ff:7928:95e) (Ping timeout: 240 seconds)
[11:23:05] <trafficjam> ok
[11:23:06] <nitrix> I INTENTIONALLY haven't talked about #include or .h.
[11:23:34] <nitrix> Everything that I said only requires .c files and knowing the difference between a declaration and a definition.
[11:23:49] *** Quits: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Ping timeout: 240 seconds)
[11:24:11] <nitrix> The last part now... those .h files.
[11:24:13] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Ping timeout: 240 seconds)
[11:24:26] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:19d9:50ff:7928:95e)
[11:24:37] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 240 seconds)
[11:24:41] <nitrix> Manually repeating the declarations in every file where you want to call player_move is annoying and repetitive.
[11:24:51] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:25:06] <nitrix> So you place the declaration in a .h file and re-use that by #including it into your .c files, that's all.
[11:25:14] <nitrix> It's just text substitution.
[11:25:36] <trafficjam> ah ok yeah that makes sense
[11:27:08] <nitrix> Now, some people don't put only function declarations in there, they sometimes put types too, like struct player { int health; int mana; };
[11:27:48] *** Joins: kts_ (~kts@103.73.237.214)
[11:28:05] *** Quits: kts (~kts@103.73.237.214) (Ping timeout: 256 seconds)
[11:28:29] <trafficjam> is that considered bad practice?
[11:28:58] <nitrix> It's fine. Same reason again, if you have different units that talk about players, they need to know what the fields are.
[11:29:12] <nitrix> But copying it in every file would get repetitive.
[11:30:03] <nitrix> There's one last thing to know...
[11:30:55] *** Quits: CtokaX (~ctokax@103.27.2.72) (Ping timeout: 256 seconds)
[11:31:09] <nitrix> Sometimes people put #includes in their .h files and so, if A.h is including <stdio.h> for example and B.h is also including <stdio.h>, when main.c includes A.h and B.h, you'll end up with stdio.h included TWICE, that would be no good.
[11:31:54] <trafficjam> for example if you're using a custom type in a function declaration you mean?
[11:32:03] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[11:32:25] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:32:27] <trafficjam> can't the compiler figure that out though?
[11:32:45] <nitrix> Well, maybe renderer.c has functions that talks about players, and maybe model.c has things that talks about players, both needs to know what a player is.
[11:32:55] <nitrix> trafficjam, You still have the wrong mental model.
[11:33:24] <nitrix> trafficjam, Translation units are UNITS. They are compiled on their own, not knowing what's out there.
[11:33:57] <nitrix> trafficjam, Each .c file is compiled just by itself. That allows the compiler to compiler many files at the same time in parallel.
[11:34:06] <trafficjam> ah i see
[11:34:16] <nitrix> Or, perhaps, just one .c file if the file changed, without having the recompile everything else.
[11:34:32] <nitrix> Like what the `make` build tool does.
[11:34:53] *** Quits: MrFantastik (~f@c-73-93-240-190.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:34:58] <nitrix> It's the whole point. Each .c file is a unit and they only know about what's in them.
[11:35:12] <nitrix> So if you talk about a function or a type that isn't in them, you have to re-explain it again to the compiler.
[11:36:22] <trafficjam> so during the whole compilation process, the files are basically sandboxed in terms of what they know about other files?
[11:36:49] <nitrix> Yes.
[11:37:28] *** Joins: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093)
[11:37:30] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[11:37:35] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[11:37:37] <nitrix> That's why it's called a unit, it's the smallest thing and cannot be divided further.
[11:37:44] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[11:37:45] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[11:37:50] <nitrix> It's on its own.
[11:37:55] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[11:38:20] <nitrix> Anyway continuing.
[11:38:32] <nitrix> For that reason, to avoid duplicate includes, people developed "header guards". The #ifndef #define #endif pattern that you always see in the .h files.
[11:38:48] <nitrix> The Standard guarantees that all the standard headers are protected in this manner, but users have to do it with their own .h files.
[11:39:21] <trafficjam> ah ok, i always wondered what #ifndef was
[11:39:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:40:00] <nitrix> ,cc struct foo { int x; }; struct foo { int x; };
[11:40:01] <candide> nitrix: error: redefinition of 'struct foo'
[11:40:43] *** Joins: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d)
[11:40:47] <nitrix> Anyhow.
[11:40:56] *** Joins: soul-d (~uknown@user/soul-d)
[11:41:02] <nitrix> Hope it gives you an overview. You're way too deep in my opinion. You need to use C more.
[11:41:27] <trafficjam> Really appreciate the overview, it's helped cleared up a lot of misconceptions i've had
[11:41:55] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[11:41:56] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[11:42:15] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Ping timeout: 256 seconds)
[11:42:32] <trafficjam> yeah i definitely need some more experience, the problem is i'm reading a book on C, but then i come across all of these lower level ideas and think that understanding them will help me understand C better, so i start reading up about that
[11:43:06] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[11:43:46] <nitrix> I don't know how to convince you otherwise, but I genuinely believe you'll do more harm than good by starting with the low-level and not C.
[11:45:04] <nitrix> C is very abstract and you normally work with it and think of it in terms of what the Standard guarantees to know. You familiarize yourself with the terminology, the grammar, the semantics, the library, everything involved.
[11:45:47] <nitrix> Then as you use it, you end up learning about C.S. fundamental concepts, like lifetimes, ownership, scope, indirection. You build more and more things.
[11:46:47] <trafficjam> is there a book of C recipes where i can actually get some experience coding? The things i've read so far only have little snippets, like how to reverse an input string, find armstrong numbers, etc, but no medium-size projects
[11:47:31] <katsuragi> trafficjam: primer, algorithms in c
[11:47:40] <nitrix> Eventually you start getting curious about the instructions generated, start optimizing things, do vectorization with SSE for example, play with branch prediction, strict aliasing, various optimizations... staying in the language but doing things that are lower-level.
[11:47:52] <katsuragi> learn c the hard way
[11:48:15] <nitrix> Then later you start using functions that aren't part of C, that are lower level, you do things that have undefined behaviors and internal to the kernel. Then maybe one day you write your own kernel or write code for an embedded chip.
[11:48:42] <katsuragi> right, what books provide a good knowledge on the embedded level?
[11:49:05] <nitrix> At the point you learn about memory mapped stuff, baud rates, some electrical engineering and onwards you go. Top-down.
[11:49:20] <nitrix> ,lcthw katsuragi
[11:49:21] <candide> katsuragi: Learn C The Hard Way is an online book that should be avoided. It does not teach you C, but rather shows how C might work on a specific implementation. It contains numerous errors, bad examples and absurd arguments. See http://hentenaar.com/dont-learn-c-the-wrong-way and https://kellett.im/a/hardway
[11:49:42] *** Quits: AmR (~AmREiSa@156.199.28.131) (Read error: Connection reset by peer)
[11:49:43] <katsuragi> oh okay
[11:50:28] <nitrix> 20 years of having to undo the harm of one person.
[11:50:37] <nitrix> I wish it would just disappear from search engines.
[11:51:24] <supakeen> The author wrote that style of book for multiple languages, I don't think they were well received in other communities either.
[11:51:47] *** Quits: mattroelle (~mattroell@136-26-68-28.cab.webpass.net) (Quit: WeeChat 3.3)
[11:53:06] <sham1> The guy said that Python 3 is not Turing complete (as a "joke") because it can't run Python 2. Clearly this guy isn't competent
[11:53:39] <sham1> In his book for Python.
[11:53:44] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[11:53:47] <duuude> Lol
[11:54:04] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:54:45] <nitrix> sham1, Mind if I rant a minute about people that says "it's just a joke"?
[11:55:32] <slact[m]> sham1:  I mean, he's right though... IF python2 is even turing complete.
[11:55:49] <slact[m]> and we can verify that ourselve by checking if python2 can run python1
[11:56:32] <sham1> Clearly
[11:56:45] <trafficjam> nitrix: would this be a good resource for getting experience with C? https://learnopengl.com/book/book_pdf.pdf
[11:56:56] <sham1> nitrix: yeah, I understand exactly what I think you're getting at
[11:57:20] <nitrix> sham1, I met this guy one day, friend of a friend, that was a bit of a clown. Nothing he did was ever serious, he made very immature jokes and it was starting to get on my nerves. At one point he went too far in the absurdities and I decided to call him out for it by taking it as literally as possible.
[11:58:52] <nitrix> sham1, His excuse? "Whoossh! It's just a joke, bro". I was apparently so stupid, that I had not noticed that it was just a joke. That I got played. That it wasn't _truely_ how he was or what he thought, that I was dumb to even believe that.
[11:59:58] <slact[m]> people like that, in my experience, have some pretty messed up history they're trying to survive. like, having to be near crazy people long enough to have to develop a coping mechanism of taking nothing seriously.
[12:01:29] <nitrix> sham1, I ended up pointing out that if someone always "just pretended" to be stupid, and "just jokingly" said things, and "just" always, at some point, it's no longer "just" anymore. It becomes all that you concretely said and the actions you concretely did.
[12:03:08] <sham1> Mmm, that tends to be a thing yes
[12:03:30] <nitrix> sham1, Like, it doesn't matter anymore whether you actually are stupid or if you're just "acting" it. Yeah you can comfort yourself thinking you're worth more than you are, but from all intent and purposes, as far as people can tell about you and your behavior, you've effectively become, actually, stupid.
[12:04:21] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:04:23] <nitrix> It becomes your entire personality because you use that lame excuse to justify your behavior.
[12:05:03] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[12:05:16] <nitrix> I'm not sure if it helped them or not. They never talked to me after that.
[12:05:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[12:05:35] <sham1> I sometimes tell those people "well, jokes are supposed to be funny"
[12:06:15] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:07:37] <nitrix> Same, but they've heard the phrase so many times, thinking that's just what people say when they're annoyed, they don't process that you mean it.
[12:08:54] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[12:10:29] *** Joins: System_Error (~SystemErr@user/systemerror)
[12:10:35] <nitrix> It's like hearing "Gosh, don't do that, you'll give me a heart attack". I heard it many times, but when it came from my grandmother, grabbing her chest and suffocating after an accidental scare, you realize some people mean it more than others.
[12:11:16] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:11:29] <nitrix> Anyway. Bed time, I'm rambling like an old man, lol.
[12:13:34] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[12:14:32] *** Joins: CtokaX (~ctokax@103.27.2.72)
[12:14:36] *** Joins: Leonard (~Administr@114.55.127.80)
[12:14:43] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[12:15:36] *** Quits: CtokaX (~ctokax@103.27.2.72) (Remote host closed the connection)
[12:15:41] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[12:16:01] *** Joins: CtokaX (~ctokax@103.27.2.72)
[12:16:37] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:16:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:16:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:16:56] *** Joins: wroathe (~wroathe@user/wroathe)
[12:17:06] *** Quits: CtokaX (~ctokax@103.27.2.72) (Remote host closed the connection)
[12:17:30] *** Joins: CtokaX (~ctokax@103.27.2.72)
[12:17:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:21:40] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:21:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:24:20] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.188) (Ping timeout: 256 seconds)
[12:25:51] *** Joins: mrig (~mrig@user/mrig)
[12:27:04] *** Joins: oxfuxxx (~oxfuxxx@2a01:e0a:268:92c0:7ccc:e1ad:3e92:a07)
[12:27:36] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[12:28:12] <ioxzev1z> Is there any specific reason why char must be at least 8 bits, rather than being able to be  6, 7, etc?
[12:28:52] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[12:29:51] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:29:56] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:30:02] <nitrix> Hysterical raisins.
[12:30:57] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 240 seconds)
[12:31:24] <sham1> 6 bits couldn't fit the standard character set
[12:31:48] <ioxzev1z> Right, but isn't ascii 7 bits?
[12:31:50] <sham1> 7 bits, eh. Might as well go 8, since that's a power of 2 rather than a prime
[12:32:34] <katsuragi> tsck..negative numbers
[12:32:36] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:19d9:50ff:7928:95e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:33:05] <ioxzev1z> oic, you need 8 bits to have signed 7 bit
[12:34:07] <sham1> chars not having a defined signedness was a mistake
[12:34:29] *** Quits: oxfuxxx (~oxfuxxx@2a01:e0a:268:92c0:7ccc:e1ad:3e92:a07) (Ping timeout: 268 seconds)
[12:35:43] <novns> ioxzev1z, ASCII is just a standard developed for teletypes (or teleprinters), they used 7 bits there
[12:35:45] <nitrix> I'm assuming they had a platform they didn't want to exclude. Standardizing is already hard enough to get everyone to be in agreement.
[12:36:44] <novns> ioxzev1z, but there's no reason to limit char to 7 bit, because of those "power of two" things
[12:37:08] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[12:37:10] <novns> *7 bits
[12:37:44] *** Joins: inomoz (~inomoz@176.59.115.245)
[12:38:26] <ioxzev1z> Yeah it makes sense now
[12:38:53] <novns> btw, original bytes were sets of bits, from 1 to 6 max.  that's how magnetic core memory was designed
[12:39:08] <sham1> I mean, if you for example had a computer with 6-bit bytes, you'd have to make your char 12 bits and then think about how pointers and such would work
[12:39:28] *** Quits: CtokaX (~ctokax@103.27.2.72) (Read error: Connection reset by peer)
[12:40:07] *** Joins: oxfuxxx (~oxfuxxx@45.152.181.204)
[12:40:10] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[12:40:50] <novns> sham1, or just stick to a very limited character set, with one case
[12:40:55] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[12:41:09] <ioxzev1z> So it's correct to say that you cannot use C on a computer with smaller than 8 bit bytes
[12:41:11] <novns> like they did it those days
[12:41:47] <sham1> novns: well you can't. Well, you can but you'd also then not have standard C. Although for those kinds of devices that's probably not something one needs anyhow
[12:41:59] *** Joins: bramhaag (~bramhaag@134.195.121.39)
[12:42:05] <novns> sham1, C wasn't invented yet
[12:42:17] <zalt> why can't an implementation emulate a cpu with 8bit bytes
[12:42:58] <sham1> novns: sure, but if someone built a 6-bit machine nowadays
[12:43:01] <novns> sham1, http://archive.computerhistory.org/resources/text/IBM/Stretch/pdfs/06-07/102632284.pdf
[12:43:31] <novns> there, in that article they have invented the "byte"
[12:44:05] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:44:14] <zalt> "high-speed computer"
[12:44:28] <sham1> It was probably high-speed back in the day
[12:45:18] <novns> zalt, they did optimize things a lot, and invented a lot of engineering miracles
[12:46:17] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[12:46:31] <zalt> in that example, 6bit computer, is there anything that'd prevent you from doing what i suggested?
[12:46:48] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:47:00] <zalt> doesn't the C standard talk about a C abstract machine, where we don't care about instructions and assembly and registers
[12:47:01] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[12:47:27] *** Joins: CtokaX (~ctokax@2401:4900:382f:7337:250e:27bb:63c3:90a6)
[12:49:19] <sham1> You *could*, but it'd be better to just go with 2 6-bit words for a 12-bit word as the char
[12:50:58] <kurahaupo> sham1: 3 6-bit bytes combined to 2 chars would be rather more efficient
[12:51:19] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[12:52:22] <kurahaupo> at least for space. The extra logic to multiply indexes by 3/2 would be a bit messy
[12:52:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[12:52:51] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[12:53:05] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[12:54:50] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 260 seconds)
[12:55:37] *** Joins: mrig (~mrig@user/mrig)
[12:56:36] *** Parts: walterwhip (~www@user/walterwhip) (Textual IRC Client: www.textualapp.com)
[12:58:56] *** Quits: mrig (~mrig@user/mrig) (Read error: Connection reset by peer)
[12:59:06] <zalt> iirc the standard makes a distinction between baremetal and hosted environments
[12:59:10] *** Joins: mrig (~mrig@user/mrig)
[12:59:53] <zalt> i wonder what parts of the standard library are required
[13:01:18] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:01:41] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[13:01:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:02:32] <sham1> Freestanding and hosted
[13:02:43] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[13:03:54] *** Joins: coruja_ (~coruja@user/coruja)
[13:04:29] *** Joins: iomari891 (~iomari891@197.210.85.157)
[13:05:42] *** Quits: mahmutov (~mahmutov@5.176.49.198) (Ping timeout: 256 seconds)
[13:06:05] *** Joins: Leonard (~Administr@114.55.127.80)
[13:06:50] *** Quits: malina (~malina@user/malina) (Ping timeout: 256 seconds)
[13:07:12] <nitrix> zalt, A conforming freestanding implementation shall accept any strictly conforming program in which the use of the features specified in the library clause (clause 7) is confined to the contents of the standard headers <float.h>, <iso646.h>, <limits.h>, <stdalign.h>, <stdarg.h>, <stdbool.h>, <stddef.h>, <stdint.h>, and <stdnoreturn.h>.
[13:09:06] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:09:17] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[13:09:55] <zalt> thanks
[13:10:08] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[13:10:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:11:25] *** Joins: meator (~meator@user/meator)
[13:11:57] *** Joins: duuude (~user@user/duuude)
[13:12:55] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[13:12:56] *** Joins: agonhajdari (~textual@user/agonhajdari)
[13:15:01] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[13:16:31] *** Quits: coruja_ (~coruja@user/coruja) (Quit: WeeChat 3.4)
[13:17:49] *** Quits: oxfuxxx (~oxfuxxx@45.152.181.204) (Ping timeout: 240 seconds)
[13:18:16] *** Joins: Echoz_ (~chris@user/echoz)
[13:19:08] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[13:19:20] *** Joins: tejr (~tejr@user/tejr)
[13:19:26] *** Quits: soapsudsxx (~soapsudsx@141.193.188.151) (Remote host closed the connection)
[13:21:08] *** Joins: coruja (~coruja@user/coruja)
[13:23:35] *** Joins: doglover (~doglover@ip-178-200-122-151.hsi07.unitymediagroup.de)
[13:24:04] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[13:25:04] *** Parts: doglover (~doglover@ip-178-200-122-151.hsi07.unitymediagroup.de) ()
[13:26:05] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[13:29:30] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:29:55] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 256 seconds)
[13:31:01] *** Joins: Echoz_ (~chris@user/echoz)
[13:32:09] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:34:10] *** Joins: aradesh (~aradesh@user/aradesh)
[13:35:23] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[13:36:13] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 240 seconds)
[13:36:57] *** Quits: CtokaX (~ctokax@2401:4900:382f:7337:250e:27bb:63c3:90a6) (Quit: Leaving)
[13:37:25] *** Joins: Echoz_ (~chris@user/echoz)
[13:38:47] *** Joins: Leonard (~Administr@114.55.127.80)
[13:40:00] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:41:01] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[13:41:19] <trafficjam> how do i handle a NULL argument for a string?
[13:41:41] <trafficjam> (or for any type in general)
[13:42:08] <trafficjam> i.e. i have a function `void foo(char string[])` called as `foo(NULL)`
[13:42:30] <g1n> you can check if (string == NULL)
[13:42:35] <sham1> Is it documented that the string shan't be NULL?
[13:43:10] <kurahaupo> trafficjam: It's up to you to define what that means in your API documentation.
[13:43:34] <kurahaupo> assuming you're the author of foo()
[13:43:56] <sham1> Because if you have it documented that the argument of `foo` mustn't be NULL, you could assert
[13:44:05] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[13:44:19] <sham1> And if the user has NULL as a parameter, tough
[13:44:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:44:51] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[13:45:15] <sham1> It could also SIGSEGV. The point is that if NULL is not a valid parameter type, you can define that yourself as some kind of undefined behaviour in terms of how the API is used
[13:45:50] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[13:47:29] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[13:48:15] <trafficjam> thanks
[13:48:54] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[13:49:30] <sham1> But remember: an important part is that you document clearly that passing NULL is not allowed
[13:49:44] <dave0> maw
[13:50:08] <kurahaupo> trafficjam: raising SIGILL is probably helpful to avoid dependency on whatever behaviour your compiler provides when you don't check. You can always change your mind later and allow it
[13:50:08] <sham1> wam
[13:50:28] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[13:51:02] *** Joins: Viewday110 (~Viewday@user/viewday)
[13:52:44] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[13:52:44] *** Viewday110 is now known as Viewday11
[13:53:28] <sham1> I'd still rather go with assert. With an assert it's easy to see what the problem is
[13:55:49] *** Joins: bindu_ (~bindu@user/bindu)
[13:55:56] *** Joins: Viewday116 (~Viewday@user/viewday)
[13:56:48] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[13:57:44] *** bindu_ is now known as bindu
[13:57:50] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[13:57:50] *** Viewday116 is now known as Viewday11
[13:59:57] *** Quits: mcf (~mforney@netbsd/developer/mcf) (Ping timeout: 240 seconds)
[14:01:09] <dave0> is the problem assert?
[14:01:11] <dave0> ;-)
[14:01:23] <sham1> nah
[14:01:39] *** Quits: Echoz_ (~chris@user/echoz) (Ping timeout: 256 seconds)
[14:02:18] *** Joins: Echoz_ (~chris@user/echoz)
[14:03:12] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[14:03:51] <sham1> assert is good
[14:04:13] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 240 seconds)
[14:04:17] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:05:12] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:05:35] *** Lord_of_Life_ is now known as Lord_of_Life
[14:07:32] <rcf> I avoid assert() for such things as it is excluded from release builds
[14:08:20] *** Quits: kts_ (~kts@103.73.237.214) (Quit: Konversation terminated!)
[14:08:41] <rcf> Though it depends on how much you trust your users.
[14:10:37] <rcf> If you say in big red letters in the docs that the point *must* not be NULL, you can tell them to get stuffed and assert() only, carrying the legacy of UB into your own API
[14:11:31] *** Joins: kts (~kts@103.73.237.214)
[14:11:44] <trafficjam> How can i initialized a char array `char string[]` so that strlen(string) will return 0 if its empty?
[14:12:25] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[14:12:27] <trafficjam> at the moment i have `char string[100];` and then i try to loop over it using `for (i = 0; i < strlen(string); i++) { ... }`
[14:12:35] <dave0> trafficjam: a couple of ways... you'd have to give it a size, and you can initialize with   char string[10] = "";   or   char string[10] = { 0 };
[14:12:36] <trafficjam> but the value of string is "`"
[14:12:53] <trafficjam> ah cool, thanks dave
[14:13:01] <dave0> trafficjam: ah strlen finds the nil byte... you probably want sizeof there
[14:13:23] <trafficjam> does sizeof(string) return the array length?
[14:13:30] <dave0> trafficjam: yes
[14:14:24] <dave0> trafficjam: note that it takes advantage of the fact that sizeof(char) is 1 ... for a general array, you do    int array[100]; sizeof(array) / sizeof(*array)
[14:14:53] <dave0> trafficjam: char string[100]; sizeof(string) / sizeof(*string);   ... but because sizeof(*string)==sizeof(char)==1 you can ignore it
[14:15:26] <trafficjam> neat, thanks
[14:15:45] <trafficjam> does it make a difference if the string is a const? `const char string[]`
[14:16:14] <dave0> trafficjam: yes it does make a difference.. if it's const you aren't supposed to modify it
[14:16:42] <trafficjam> sizeof() doesn't modify anything though does it?
[14:16:47] <dave0> trafficjam: but you can initialize it.. you might use it for      const char author[] = "trafficjam";
[14:17:06] <dave0> trafficjam: correct. sizeof just gives you the size of the thing
[14:17:19] <dave0> in bytes
[14:17:35] <trafficjam> cos i get this error when i try to use `sizeof()` on a different const string: error: ‘sizeof’ on array function parameter ‘string’ will return size of ‘const char *’
[14:17:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:17:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:17:44] *** Joins: wroathe (~wroathe@user/wroathe)
[14:17:59] <dave0> that's why you have to divide when you are fnding the size of eg.   int array[10];   sizeof(array)=whatever in bytes, sizeof(*array)=whatever element in bytes
[14:18:27] <dave0> trafficjam: the important thing there is "array function parameter"
[14:18:51] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[14:18:53] <trafficjam> ah, so it's different for function parameters?
[14:18:55] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:18:56] <dave0> trafficjam: if you wish to pass an array to a function, you must tell it the size of the array somehow
[14:19:08] <dave0> trafficjam: yes
[14:19:21] <trafficjam> the exact use case here is i have string1, which is an array parameter, and then string2, which is an empty string
[14:19:44] <trafficjam> and for each char in string1, i iterate over string2
[14:19:47] <dave0> trafficjam: c strings have a \0 so you can find their length
[14:19:58] <dave0> trafficjam: it was a mistake but we are stuck with it
[14:20:38] <dave0> trafficjam: are you modifying the strings?
[14:20:48] *** Joins: kish` (~aqua@user/aqua)
[14:20:51] <kurahaupo> rcf: That's why I suggested raise() rather than assert()
[14:21:20] <kurahaupo> trafficjam: strlen is slow; try not to call it too often
[14:21:41] <trafficjam> dave0: i'm modifying string2 (appending to it)
[14:21:45] <trafficjam> my code -> https://dpaste.org/xMN9
[14:22:04] <dave0> trafficjam: ah i see
[14:22:33] *** Joins: Senicar2 (~Senicar@gateway/tor-sasl/senicar)
[14:22:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:22:50] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[14:22:51] *** Senicar2 is now known as Senicar
[14:22:58] <dave0> trafficjam: you are not returning anything from this function and you are not modifying the parameters
[14:23:47] <trafficjam> dave0: i do, i just tried to simplify the code, i think the error is related to the `sizeof(string)` part
[14:24:04] <trafficjam> because if i use strlen(string) it works
[14:24:16] <rcf> trafficjam: keep in mind that C cannot pass arrays by value, no matter what syntax you use.
[14:25:05] *** Joins: zer0bitz (~zer0bitz@196.244.192.61)
[14:25:05] <trafficjam> yeah i get that
[14:25:22] <rcf> trafficjam: which means that once you pass a string to a function, that length information is lost and only strlen will work unless you also pass the length as another argument.
[14:25:22] <dave0> trafficjam: `string` is a parameter, so you can't use sizeof to find this array length... it is a string so you can use strlen on it ... const means you don't change it. strlen(string) is correct
[14:25:36] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[14:25:43] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.61)
[14:25:52] <dave0> trafficjam: however, string2 is not a parameter, and it is a proper array, so sizeof will work
[14:26:05] <trafficjam> ah i see, thanks guys
[14:26:17] <dave0> trafficjam: but going by it's name, you mean it to be a string
[14:26:34] <dave0> trafficjam: and you mentioned before that you are modifying `string2` by appending
[14:26:35] <kurahaupo> If a parameter isn't an "in" string, pass in the buffer size as an explicit parameter
[14:26:53] *** Joins: matrox (~bc8147f2@cerf.good1.com)
[14:26:57] <sham1> A way you can work around this is that you'd do something like this (size_t size, char (*buf)[size])
[14:26:58] <trafficjam> dave0: ah my bad, i should probably be a char array, i keep forgetting there's a difference lol
[14:27:01] <dave0> trafficjam: strlen(string2) makes no sense if string2 is /always/ an empty string
[14:27:11] <trafficjam> *it should
[14:27:17] <dave0> trafficjam: but you are modifying string2, so strlen may make sense
[14:27:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:27:40] <dave0> trafficjam: your declarations make sense
[14:27:50] <matrox> is there a saner version of strtok in stdlib? strtok_r isn't standard C it seems
[14:28:08] <dave0> trafficjam: what you have cut from your paste is probably relevant
[14:28:30] *** Joins: the_lanetly_052_ (~the_lanet@185.30.88.43)
[14:28:33] <sham1> matrox: sadly no
[14:28:36] <dave0> matrox: what should it do differently to strtok?
[14:28:49] <kurahaupo> matrox: strtok doesn't cope with tokens that aren't separated by non-token chars such as whitespace
[14:28:49] <sham1> dave0: not have global non-reentrant state
[14:29:14] <dave0> sham1: use posix if at all possible
[14:29:25] *** Quits: zer0bitz (~zer0bitz@196.244.192.61) (Ping timeout: 256 seconds)
[14:29:33] <kurahaupo> matrox: and it's not reentrant.
[14:29:35] <dave0> if no posix, cut and paste strtok_r from linux or *bsd
[14:30:02] <dave0> linux vs *bsd if you are a license weenie
[14:30:12] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:43] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.77) (Ping timeout: 250 seconds)
[14:30:51] <sham1> You mean a lawyer
[14:30:57] *** Joins: csrf (~csrf@user/csrf)
[14:31:21] <dave0> can you imagine a world without lawyers?
[14:31:46] <dave0> la la la everyones happy :-)
[14:31:48] <trafficjam> dave0: i guess my question is, for my `for (j = 0; ...)` code, what can i use in there condition part of that statement so that if `char array[100]` has no value assigned to it, it will return 0, but if it has at least one element, it will return the length of array
[14:31:49] <kurahaupo> I prefer evaluating or copying tokens as they're found, rather than munging the input string.
[14:32:29] <trafficjam> because i think `sizeof(array[100])` doesn't return 0
[14:32:30] <dave0> trafficjam: initalize string2    char string2[100] = "";    and use strlen
[14:32:43] <kurahaupo> trafficjam: You can't assign to an array, and you can't assign to an element beyond the end of an array
[14:32:48] <dave0> trafficjam: when you append to string2, strlen will adjust
[14:33:13] <dave0> he's using strings ... i assume strcat
[14:33:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:33:44] <trafficjam> string2 doesn't need to be a string, it's just a way of keeping track of which characters ive found in string1
[14:33:52] <trafficjam> so it could just be a char array
[14:33:55] <trafficjam> i wasn't sure which was better
[14:34:15] <kurahaupo> trafficjam: sizeof tells you the fixed size of an object; string literals occupy an anonymous object that's trimmed to be the minimum necessary size, but strings in general can be any length from 0 to (sizeof buffer)-1
[14:34:31] <dave0> trafficjam: you have to keep a count somehow
[14:34:50] <kurahaupo> trafficjam: You should not in general expect sizeof to tell you the length of an array. The cases where it works are exceptions
[14:35:03] <trafficjam> just for char arrays?
[14:35:16] <dave0> trafficjam: he's talking about function parameters
[14:35:16] <kurahaupo> ugh
[14:35:24] <kurahaupo> trafficjam: You should not in general expect sizeof to tell you the length of a STRING. The cases where it works are exceptions
[14:35:30] <dave0> oh
[14:35:31] <dave0> righ
[14:35:33] <dave0> t
[14:35:49] <trafficjam> ah ok
[14:35:53] <kurahaupo> frigging swipe keyboard thinks it knows what I'm going to type
[14:36:08] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[14:36:49] <trafficjam> dave0: you think i should create a `count` integer that tracks the number of elements in my `char array[]`?
[14:36:54] <dave0> trafficjam: if you maintain your variable as a c string, you can keep track of it's size with the standard string funtions
[14:37:10] <rcf> trafficjam: if you want that sweet o(1) length approach, do that.
[14:37:15] *** Joins: Leonard (~Administr@114.55.127.80)
[14:37:27] <dave0> trafficjam: it depends on your code.. you cut out the good stuff in your paste
[14:37:49] <dave0> strings might be easier and less code
[14:38:18] <dave0> tracking it yourself might be safer and more robust
[14:39:02] <kurahaupo> dave0: That's unlikely if you're assigning individual elements
[14:39:04] <trafficjam> yeah ok i tried using a count and it fixed the failing tests :)
[14:39:32] <kurahaupo> trafficjam: I would recommend that approach
[14:39:42] <dave0> kurahaupo: string.h has lots of fancy functions that you can't use if you track it yourself
[14:40:01] <trafficjam> is the regular approach of "appending" to an array?
[14:40:06] <trafficjam> *is that
[14:40:18] <dave0> and those fancy functions have been debugged already
[14:41:32] <dave0> trafficjam: you are learning? it might be beneficial to try both ways
[14:41:44] <sham1> trafficjam: you could memcpy. Or if it's a string specifically, strcpy (or what I'd suggest, snprintf)
[14:41:56] <sham1> Just a for-loop works as well
[14:41:58] <dave0> i don't know which way is easier to write first
[14:42:12] <trafficjam> strcat is the other way?
[14:42:27] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[14:42:28] <sham1> strcat would work yes
[14:42:50] <sham1> Although I'd rather strcat_s
[14:42:51] <dave0> trafficjam: yep.. and that's my point... strcat already exists and works.. you would have to write the for loop
[14:43:26] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:43:33] <dave0> but imho writing both would teach the pros and cons of both methods
[14:43:43] <dave0> and you'll see both methods in other code
[14:44:09] <ioxzev1z> trafficjam, could always have if(array[0] != '\0') { /* contains something */ }
[14:44:25] <ioxzev1z> Assuming that you always null terminate the array
[14:44:57] <ioxzev1z> Maybe via memset(array, 0, sizeof(array)) before you try put something into it
[14:45:08] <trafficjam> i have to write the for loop either way, it's either `int count = ; array[count] = string1[i];` or `strcat(array, string1[i]);`
[14:45:21] <trafficjam> *count = 0;
[14:45:22] <kurahaupo> dave0: Use mem* with a length parameter, instead of str* with null terminator.
[14:46:07] <rcf> You don't have to change how you do the appending just because you're keeping track of the length.
[14:46:23] <kurahaupo> The only reason that C strings were null terminated is that it saved a CPU register in 1980
[14:46:46] <sham1> It's also not as limited as, say, Pascal's ANSIStrings
[14:46:48] <dave0> kurahaupo: the most expensive one byte mistake :-)
[14:47:06] <sham1> Err, AnsiString (because PascalCase, duh)
[14:47:48] <trafficjam> rcf: true
[14:48:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:48:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:48:28] *** Joins: wroathe (~wroathe@user/wroathe)
[14:48:36] *** Joins: unknow (~i.am@user/marlboro)
[14:48:37] <trafficjam> also, what size should i string my `char array[]` to?
[14:49:03] <trafficjam> the max size depends on the size of `string1`, so should it be that?
[14:49:33] <trafficjam> or is it worth allocating on a per need basis?
[14:50:01] <dave0> trafficjam: you haven't said what your algorithm is
[14:50:06] <trafficjam> i just gave it an arbitrary value of `char array[100];` but that feels sloppy
[14:50:16] <trafficjam> it's to find duplicates
[14:50:23] <rcf> trafficjam: you'll need to size it on a per-need basis or find a way to inform the caller of potential truncation.
[14:50:56] <trafficjam> so `bool has_duplicates(const char string[])`
[14:51:16] <trafficjam> if a string has a duplicate character (ignoring spaces or '-'), it returns true
[14:51:56] <dave0> ah so each time you get a character from string, you check if it's in string2, and if it is there's a duplicate, and if it's not you put the character in string2 and continue?
[14:52:04] <trafficjam> correct
[14:52:13] <dave0> string2 will never be larger than string
[14:52:17] <trafficjam> correct
[14:52:24] <dave0> you can use string's length to allocate string2
[14:52:39] <trafficjam> and what's the right way of doing this? i tried earlier but failed lol
[14:52:42] <kurahaupo> trafficjam: Are you just considering individual bytes, or UTF-8 codepoints?
[14:53:10] <trafficjam> kurahaupo: ascii character set
[14:53:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:53:18] <sham1> "UTF-8 codepoints"
[14:53:26] <kurahaupo> trafficjam:  Then just build a histogram
[14:53:29] <sham1> UTF-8 code units or Unicode codepoints
[14:53:45] <trafficjam> not sure what the difference is
[14:53:51] <kurahaupo> sham1: yeah ok, but you take my point
[14:53:54] <trafficjam> kurahaupo: histogram?
[14:53:55] <sham1> Yes
[14:54:04] <trafficjam> what does that look like in C?
[14:54:07] <dave0> you can easily see if a character is in string2 with strchr()
[14:54:36] <trafficjam> dave0: oh cool, didn't know about that function
[14:54:51] <trafficjam> which is faster, strchar() or my 2 for loops?
[14:55:00] <dave0> yes it is one of the benefits of keeping it as a c string
[14:55:13] <dave0> too early to worry about speed
[14:55:19] <dave0> get it working first :-)
[14:55:29] <sham1> Correctness and working > speed
[14:55:40] <kurahaupo> trafficjam: char h[1<<CHAR_BIT] ={0}; for (int i=0, l=strlen(x);i<l;++i) if (h[x[i]]++) found_dup();
[14:55:57] <dave0> hash table
[14:56:24] <trafficjam> what does [1<<CHAR_BIT] do?
[14:56:28] <kurahaupo> dave0: The hash function to map a char onto a char is fairly easy
[14:56:47] <kurahaupo> trafficjam: […] makes an array.
[14:57:02] <trafficjam> the 1<<CHAR_BIT part
[14:57:11] <sham1> It shifts 1 by CHAR_BIT
[14:57:12] <kurahaupo> trafficjam: 1<<n gives you 2**n
[14:57:30] <sham1> I wish C had an actual integer exponent operation
[14:57:32] <trafficjam> oh that's cool
[14:57:33] <dave0> you could also use UCHAR_MAX+1
[14:57:42] <dave0> which is different but the same
[14:57:57] <kurahaupo> dave0: yeah that too
[14:59:45] <kurahaupo> trafficjam: char h[UCHAR_MAX+1] ={0}; for (int i=0, l=strlen(x);i<l;++i) if (h[x[i] & UCHAR_MAX]++) found_dup(); /* in case char is signed */
[15:01:03] *** Quits: segnior (segnior@user/segnior) (Read error: Connection reset by peer)
[15:02:35] <trafficjam> what does `h[x[i] & UCHAR_MAX]++` do? bit lost here
[15:03:18] <kurahaupo> trafficjam: start from the middle x[i] and with your way outwards
[15:03:29] <kurahaupo> trafficjam: start from the middle x[i] and work your way outwards
[15:03:36] *** Joins: RyokoChan (~RyokoChan@user/RyokoChan)
[15:03:36] <kurahaupo> grrr, keyboard
[15:05:01] <trafficjam> well x[i] is the current character of x being iterated over, UCHAR_MAX i'm still not quite sure what that is
[15:05:13] <kurahaupo> trafficjam: « expression & UCHAR_MAX » will give a value guaranteed to fit in an unsigned char
[15:05:31] <trafficjam> is that a bit operation?
[15:05:39] <kurahaupo> mainly, it won't be negative
[15:05:57] <trafficjam> ah it converts expression to an unsigned char?
[15:06:05] <dave0> trafficjam: yup
[15:06:08] <kurahaupo> basically yes.
[15:06:25] <trafficjam> oh i see what's going on
[15:06:33] <kurahaupo> that value is then indexing the h array
[15:06:38] <trafficjam> if if i = 10, then you would do h[10] = 1
[15:06:38] <sham1> `x[i] & UCHAR_MAX` in this case is equivalent to `x % (1 << CHAR_BIT)`
[15:06:42] *** Quits: nicko (~iClass@221.236.54.23) (Quit: Konversation terminated!)
[15:06:53] <kurahaupo> almost
[15:06:57] <dave0> trafficjam: it's a different algorithm to find duplicates
[15:06:59] <sham1> No, completely
[15:07:06] <kurahaupo> & guarantees positive, % does not
[15:07:38] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:07:42] <kurahaupo> IMO the latter is broken by design
[15:07:42] <trafficjam> is that how you implement dictionaries ( / hashmaps) in C?
[15:07:55] *** Joins: fe23 (~fe23@2409:8a34:464:4990:1173:4110:f6be:949d)
[15:08:22] <dave0> one way, yes
[15:08:34] <sham1> Hash tables indeed tend to use moduli and bitwise ANDs
[15:08:40] <kurahaupo> It's only a hashmap in a very trivial sense. It doesn't restrict the range of values, and the transformation is reversible
[15:09:02] <dave0> trafficjam: it's tailored to 7 bit ascii
[15:09:18] <trafficjam> how does that work by the way, like if i have an `int array[]` and then do `array[1000] = 1; array[50000] = 1;`, are there any performance implications to this? or does it only have 2 elements?
[15:09:19] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[15:09:25] <dave0> i believe people say hashmaps meaning strings, which is similar but different
[15:09:45] <dave0> trafficjam: c does not grow arrays. you give it the size in advance
[15:10:19] <sham1> Yeah. That's not possible
[15:10:20] <kurahaupo> maybe I should write: char h[UCHAR_MAX+1] ={0}; for (size_t i=0, l=strlen(x);i<l;++i) if (h[(unsigned char)x[i]]++) found_dup();
[15:10:41] <trafficjam> ah so then i would have to use malloc if i wanted to dynamically create a hash table?
[15:10:50] <dave0> trafficjam: yep
[15:10:56] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[15:11:01] <dave0> trafficjam: realloc can change sizes
[15:11:06] <dave0> it's annoying to code :-p
[15:11:17] <dave0> always better to use a fixed size array in c
[15:11:28] <dave0> okay maybe not better.. easier
[15:12:04] <trafficjam> dave0: i mean unless you know what the input is going to be you can't right?
[15:12:22] <trafficjam> well in this instance you could i suppose
[15:12:32] <dave0> trafficjam: i guess.. sometimes you do
[15:12:53] <trafficjam> for my use case i would just set it to 255 no?
[15:13:06] <trafficjam> 256*
[15:13:16] <trafficjam> i.e. the ascii code space
[15:13:28] <dave0> i would, kurahaupo is more robust
[15:13:53] <dave0> tehnically char can be large
[15:13:59] <kurahaupo> trafficjam: Magic numbers should be avoided in all but the simplest of toy programs
[15:14:08] <trafficjam> magic numbers?
[15:14:51] <kurahaupo> trafficjam: The person reading the code is going to ask "what's this magic number 256 doing here?"
[15:15:23] <trafficjam> oh you mean i should make it explicit?
[15:15:34] <dave0> he means use a symbol
[15:15:42] <kurahaupo> trafficjam: UCHAR_MAX does that
[15:15:43] <trafficjam> i.e. `char array[sizeof(char)]`
[15:15:44] <dave0> prefereably descriptive
[15:15:58] <trafficjam> gotcha, good point
[15:16:09] <trafficjam> where is UCHAR_MAX defined btw?
[15:16:17] <trafficjam> is that a gcc or a stdio thing?
[15:16:26] <dave0> limits.h
[15:16:46] <trafficjam> oh so i have to include that manually?
[15:16:48] <kurahaupo> One of standard headers that the compiler must supply
[15:16:59] <dave0> trafficjam: yes   #include <limits.h>
[15:17:29] <dave0> trafficjam: https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html
[15:17:43] <dave0> ehhh it's posix, sorry twkm
[15:17:51] <trafficjam> neat, didn't know about that library
[15:19:45] *** Joins: crankslider (~slidercra@user/slidercrank)
[15:20:06] <kurahaupo> char h[1+(unsigned char)~0] = {0}; for … etc … if (++h[(unsigned char)x[i]] >= 2) found_dup(i);
[15:20:17] <trafficjam> man that's such a prettier implementation than mine
[15:20:48] <trafficjam> oh that's the latest version? what does `1+(unsigned char)~0` do?
[15:21:04] <trafficjam> lol that's quite different from the previous ones
[15:21:18] <kurahaupo> 1+UCHAR_MAX without limits.h
[15:21:34] <sham1> First, `(unsigned char)~0` turns ~0 (i.e. all bits are 1s) into an unsiged char. And then adds one to it. Basically doing the same thing as 1 + UCHAR_MAX
[15:22:00] <trafficjam> are these like expert-level optimizations?
[15:22:09] <sham1> This is not an optimization
[15:22:21] <trafficjam> well in the sense that you don't need to include limits.h
[15:22:31] <trafficjam> isn't that an optimization?
[15:22:37] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[15:22:46] <sham1> Including limits.h costs nothing, so no
[15:23:14] <trafficjam> doesn't it take the compiler longer though (even if on a miniscule level)?
[15:24:53] <kurahaupo> trafficjam: If you're already including limits.h for something else, there's 0 marginal cost
[15:25:02] <trafficjam> i'm not
[15:26:01] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[15:26:16] <kurahaupo> If your program is so small that including limits.h is a significant part of the compilation time, you probably won't notice it
[15:26:40] <sham1> Also, limits.h is a bunch of #defines
[15:26:42] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:26:44] <sham1> So it's fine
[15:27:43] <trafficjam> does the (unsigned char)x[i] part convert x[i] to an unsigned char?
[15:27:56] <sham1> Yes
[15:28:47] <trafficjam> are char's signed by default?
[15:28:53] <sham1> Unspecified
[15:29:50] <trafficjam> oh ok, interesting
[15:29:52] <sham1> It's the only integer type to do this
[15:30:44] <dave0> of course characters have no sign but here we are
[15:31:39] *** Joins: coodre (~no@105.154.81.228)
[15:32:13] *** Joins: oxfuxxx (~oxfuxxx@45.152.181.204)
[15:32:32] <sham1> The other integer types are either specified to be signed by default (short int, int, long int, long long int) or unsigned (_Bool), but char is the only one where that's up to the implementation. As far as the standard integer types are concerned
[15:33:35] <trafficjam> what's the best way of converting to lowercase, just tolower()?
[15:33:56] <sham1> Best in what sense
[15:34:10] <trafficjam> er good question, generally if there is such a thing?
[15:35:36] <trafficjam> i mean is some nice little few-character trick i could use?
[15:35:39] <trafficjam> *is there
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:36] <sham1> I mean, there is if ('A' <= c && c <= ''
[15:37:06] <dave0> trafficjam: sort of, but tolower is fine
[15:37:07] <sham1> if ('A' <= c && c <= 'Z') { c = c -'A'+'a';}
[15:37:12] <dave0> ^
[15:37:21] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:37:32] <sham1> But yeah. Use tolower. If works for ASCII and such things, like Latin-1
[15:37:45] <sham1> Meanwhile Unicode is notoriously difficult
[15:37:46] <trafficjam> ok tolower() it is
[15:38:03] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:38:15] *** Quits: RyokoChan (~RyokoChan@user/RyokoChan) (Ping timeout: 268 seconds)
[15:38:23] *** Joins: RyokoChan_ (~RyokoChan@user/RyokoChan)
[15:39:13] <trafficjam> also if i want to skip certain characters in my has_duplicates() function, what's the nicest way of doing this?
[15:39:18] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[15:39:24] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[15:39:37] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[15:39:40] <sham1> if (c == /* char I want to skip */) continue;
[15:39:52] <sham1> Can also do switch
[15:41:55] <trafficjam> fair enough
[15:45:22] <trafficjam> is there a nicer way of dealing with a NULL argument other than `if (string == NULL) ...`?
[15:46:00] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[15:47:40] <sham1> One way is assuming that string is never NULL
[15:47:58] <trafficjam> lol unfortunately not an option
[15:47:59] <sham1> Assuming string is a parameter you receive
[15:48:47] <sham1> If you can't, you could return 0 since an empty string of course has no duplicates
[15:50:02] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:51:01] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[15:54:48] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca)
[15:56:45] <trafficjam> is -1 the error return value?
[16:00:06] <ioxzev1z> trafficjam, if(string) or if(!string)
[16:02:49] *** Joins: meator (~meator@user/meator)
[16:04:52] <zwr> look at what I found
[16:04:53] <zwr> (unsigned char *) &(Atom) { XInternAtom(disp, "_NET_WM_WINDOW_TYPE_DOCK", False) }
[16:05:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[16:07:49] *** Joins: Leonard (~Administr@114.55.127.80)
[16:08:55] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[16:09:39] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[16:09:52] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[16:10:38] *** Joins: Leonard (~Administr@114.55.127.80)
[16:14:21] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:17:08] <trafficjam> what is 1ull, 2ull, etc?
[16:17:56] <zwr> integer constant of type unsigned long long
[16:20:03] <trafficjam> ah thanks
[16:20:55] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[16:20:56] <trafficjam> and what is uint64_t?
[16:21:01] <trafficjam> is that the same thing?
[16:21:06] *** Joins: Leonard (~Administr@114.55.127.80)
[16:21:58] <gl> uint64_t is an optional type, so no
[16:24:21] <trafficjam> oh
[16:25:08] *** Quits: inomoz (~inomoz@176.59.115.245) (Quit: WeeChat 3.4)
[16:27:32] <RyokoChan_> you could also use 'ULL', in case the lowercase 'l' looks too much like an uppercase 'i' with your font
[16:30:07] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[16:30:07] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[16:30:07] *** Joins: wroathe (~wroathe@user/wroathe)
[16:30:59] *** Quits: kts (~kts@103.73.237.214) (Quit: Konversation terminated!)
[16:32:15] <trafficjam> how much does 2ull equal?
[16:32:19] <trafficjam> is 2ull = 4?
[16:33:29] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:34:33] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[16:34:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[16:36:50] <RyokoChan_> ... no, it's 2   UL or ULL tell the compiler, that the integer number you have written somewhere, should be of type  unsigned long  or unsigned long long, instead of the default 'int'
[16:37:12] <RyokoChan_> it's just a suffix
[16:38:49] *** Joins: coodre__ (~no@160.178.2.5)
[16:38:56] *** RyokoChan_ is now known as RyokoChan
[16:39:21] *** Parts: summonner (~summonner@188.26.74.156) (Leaving)
[16:40:43] *** Joins: meator (~meator@user/meator)
[16:41:25] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[16:41:36] *** Quits: coodre (~no@105.154.81.228) (Ping timeout: 256 seconds)
[16:41:37] *** Joins: Leonard (~Administr@114.55.127.80)
[16:41:40] <trafficjam> ah ok, thanks RyokoChan
[16:43:23] *** Joins: terminalpusher (~terminalp@2a01:586:8e8d:1:a3ae:5aad:c134:21a5)
[16:44:12] <sham1> And unsigned long long int is at least 64 bits wide. So for most things it's the same as uint64_t but it needn't be, it could be wider
[16:44:20] *** Joins: Klinda (~superleag@user/klinda)
[16:45:35] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[16:45:59] <sokan> https://bpa.st/OK6A <--- Need help on what type to declare cpg_isles function as and the sequence given as input on that function.
[16:46:29] <sokan> (There are some minor error I'm sure, but I need to finish with that first :P)
[16:47:36] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[16:48:19] *** Joins: Moonspell (~moon@140.238.223.164)
[16:49:18] *** Joins: neube (~neube@46.198.190.67)
[16:49:51] <neube> hey guys I'd like to ask you a very basic question but I'm trying my best and google couldn't didn't help :?
[16:49:53] <neube> :/
[16:49:54] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[16:50:05] <neube> Ok so this is my script: https://pastebin.com/WpzsmLaR and this is what I get when selecting "1" for admin: https://imgur.com/0AcrjPR.png . The problem is I'm never asked for a character, the script just ends after pressing "1" in the first switch. Why is it ending? I switched out the "getchar();" for a scanf("%c", &choice admin); and it also
[16:50:05] <neube> didn't work, but if I turned choice_admin into an integer and used %d it worked?? wtf
[16:50:24] *** Joins: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:840b:3dd6:9d5e:79f4)
[16:50:32] *** Joins: meator (~meator@user/meator)
[16:51:54] <sham1> neube: because scanf isn't appropriate for this. Basically what happens with the "%c" is that it's capturing the newline you had after you entered the first option
[16:53:13] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow or in 2 days)
[16:53:32] <neube> sham1: but with getchar the script still ends before I want it to
[16:53:35] <neube> what am I to do?
[16:53:59] <sham1> You need to consume the newline and such
[16:54:04] <neube> isn't getchar supposed to wait for me to enter a character?
[16:54:05] *** Joins: kts (~kts@103.73.237.75)
[16:54:17] *** Joins: adip (~adip@user-188-33-250-10.play-internet.pl)
[16:54:22] <neube> idk what "consume the newline" means oops :D
[16:54:37] <cassepipe> Hi ! I was wandering : Let's say I am trying to make a simple shell. What makes the more sense to try and exec the file behind the command. Is it better to iterate over PATH and strjoin paths to the command name or is better to chdir(PATH[1]) and try to exec from there and chdir again if it's not there ?
[16:54:47] <sham1> It only waits if the input stream doesn't have anything in it. After you've read the integer for choosing the admin action, there is still stuff in the stream
[16:54:50] <cassepipe> wondering
[16:55:04] <adip> I have a question, WHY would someone write !!, (double !) in logical statements in C or C++ ?
[16:55:06] <neube> sham1: ohh I got it now lol
[16:55:23] *** Quits: Moonspell (~moon@140.238.223.164) (Quit: #EOF!)
[16:55:24] <sham1> adip: to force the value to be a boolean
[16:55:39] <cassepipe> I don't what's more efficient changing the process cwd or copying and allocating for a wider string
[16:55:45] <sham1> Although assignment to a place that expects _Bool would do the same thing
[16:55:59] *** Joins: Moonspell (~moon@140.238.223.164)
[16:56:09] <cassepipe> adip: To mess with the reader's eye ?
[16:56:17] <sham1> cassepipe: you don't need to do either. exec can look through the PATB
[16:56:21] <sham1> PATH
[16:58:29] <adip> sham1: I'm looking at something like this: else if `(!recipient && !!allmailfrom)` and I have no idea what's the point
[16:58:51] <dave0> adip: !!a    is silly way of    a != 0
[16:59:22] <adip> sham1: 'force the value to be a boolean' do you know where I can find info about this syntax? is !! really different from ! ?
[16:59:41] <dave0> adip: it's two !'s
[16:59:44] <sham1> ,english !!x
[16:59:45] <candide> sham1: The normalized boolean value of `x`.
[16:59:47] <dave0> adip: ! ! a
[16:59:54] <sham1> ,parens !!x
[16:59:54] <candide> sham1: !(!x)
[16:59:59] <sham1> Yeah
[17:00:03] <dave0> adip: if a is 0, !a is 1, !!a is 0
[17:00:18] <dave0> adip: if a is not 0 (ie. true) !a is 0, !!a is 1
[17:00:33] <cassepipe> sham1: All of the exec ?
[17:01:00] *** Quits: Moonspell (~moon@140.238.223.164) (Quit: #EOF!)
[17:01:10] <adip> so it's !x just negated? one more ! inverts it?
[17:01:37] *** Joins: Moonspell (~moon@140.238.223.164)
[17:01:55] <dave0> adip: yep
[17:01:57] <sham1> Well, execlp at least knows
[17:02:12] <caze> ,paren !!x
[17:02:13] <candide> caze: !(!x)
[17:02:32] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:03:15] <caze> It doesn't seem necesary in your example though. (!recipient && !!allmailfrom)
[17:03:42] <adip> ok, thanks. It's actually from code from some c++ project. ( Programmer was so smart he implemented his own custom string class. )
[17:05:37] <cassepipe> sham1: Right, that's waht I thought. But this is an exercise and I have to use execve
[17:05:47] *** Quits: Moonspell (~moon@140.238.223.164) (Client Quit)
[17:05:56] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[17:06:09] *** Joins: Leonard (~Administr@114.55.127.80)
[17:06:17] <cassepipe> Since I have to do the work myself what would be better ?
[17:06:24] *** Joins: Moonspell (~moon@140.238.223.164)
[17:07:33] <sham1> Well, you wouldn't want to change your current working directory to the directory where the command is, but instead you want to stay where the user has parked the shell
[17:07:44] *** Joins: acerbic (~acerbic@cs-xdata-50-86-49-79.cspire.com)
[17:07:44] *** Quits: Moonspell (~moon@140.238.223.164) (Read error: Connection reset by peer)
[17:08:34] <sham1> So you can instead look at the PATH environ, and look through each directory in it for the command, by iterating over the directory entries
[17:09:41] <cassepipe> sham1: Ok, but I have to to feed execve the exact filename, so this is the strjoin way then
[17:09:51] <sham1> Yeah
[17:09:56] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 256 seconds)
[17:09:57] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 240 seconds)
[17:10:06] <cassepipe> sham1: What does recommend against changing cwd ?
[17:10:17] <sham1> User expectation
[17:10:42] <cassepipe> sham1: How would the user notice ?
[17:11:38] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[17:11:49] <sham1> Well if I executed ls in my home directory, I'd be very surprised if it suddenly listed the contents of /bin
[17:12:06] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[17:12:08] <kurahaupo> cassepipe: If you accept filenames as command line args, open them before chdir so that it doesn't upset users' expectations
[17:12:53] <sham1> And yeah, you'd also have to deal with the case where the command is relative path
[17:13:55] <kurahaupo> It is legal and possible for '.' to be unreachable from '/' so do not assume that you can "canonicalize" filenames.
[17:14:30] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[17:14:31] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:14:31] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[17:14:36] <kurahaupo> (unless you're root)
[17:14:51] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[17:14:57] *** Joins: bindu (~bindu@user/bindu)
[17:15:27] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[17:15:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a9bb:faa4:6c28:2bd6) (Quit: Quit)
[17:19:31] *** Joins: strajder (~strajder@user/strajder)
[17:20:09] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[17:20:21] *** Quits: jason1234 (fltk@thunix.net) (Read error: Connection reset by peer)
[17:24:23] <cassepipe> kurahaupo: sham1: Thanks !
[17:24:59] *** Joins: mahmutov (~mahmutov@5.176.49.198)
[17:26:26] <cassepipe> sham1: Unless I do the whole find file in another process before exec :)
[17:27:41] <cassepipe> sham1: A relative filename in a shell would with `./` so I am fine.
[17:27:45] *** Quits: RyokoChan (~RyokoChan@user/RyokoChan) ()
[17:27:58] <cassepipe> But kurahaupo's objection still stands
[17:29:47] <kurahaupo> ./ isn't necessary to access a file, but it does help if you have a filename that starts with a dash, so that ./-whatever is not misinterpreted as an option
[17:35:46] *** Joins: plastico (~plastico@neomutt/plastico)
[17:35:53] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:11c4:68db:ad36:c833) (Ping timeout: 252 seconds)
[17:36:40] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[17:37:54] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[17:38:04] <sokan> When do I declare variable that I want to use in functions?
[17:38:05] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[17:38:21] <sham1> In the function
[17:38:35] <sham1> As for when? Depends on where you need to access it
[17:38:47] <sokan> sham1: https://bpa.st/OK6A
[17:39:17] *** Quits: karthy (~karthy@162.216.143.166) (Quit: Client closed)
[17:39:56] <sokan> I get errors on count_cg, window_size, count_g, ratio and cg_islands.c:59:25: error: expected expression before ‘]’ token
[17:39:58] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[17:40:14] <Klinda> why if the adress santizer found a heap overflow and I run gdb, set the breakpoint at that line, (before the heap) I do "step" but it doesn't trigger the error? a normal run with run commands does it, but if I insepct line by line no
[17:40:21] *** Joins: badsektor (~badsektor@user/badsektor)
[17:40:33] <sham1> Klinda: ASan doesn't play nicely with gdb
[17:41:54] <sham1> sokan: line 59 doesn't have anything on it
[17:42:15] <zalt> Klinda: maybe it's executed more than one time, and you're breaking in one of the cases where it's not an error?
[17:42:26] <sokan> sham1: 59
[17:42:30] <sokan> 58*
[17:42:49] <sham1> 58 doesn't have a ']' on it
[17:43:28] <sham1> Also the declaration of cpg_isle lacks types in the declaration
[17:43:38] <sham1> At the top
[17:44:18] <sokan> https://bpa.st/ALUQ: the code. https://bpa.st/VVTQ the errors
[17:44:30] <badsektor> hey guys can you help me with adventofcode2021 Day 12 solution: here is my program that goes into a loop inside the function move_to_caves():  http://jdoodle.com/ia/lFS
[17:44:31] <candide> Title of badsektor's link: Online Compiler and Editor/IDE for Java, C/C++, PHP, Python, Perl, etc
[17:45:04] <sham1> sokan: what do you think genstr[] does
[17:45:10] <sham1> As a parameter
[17:45:27] *** Joins: Leonard (~Administr@114.55.127.80)
[17:45:35] <Klinda> zalt: what do you mean?
[17:45:48] <sokan> sham1: assigns genstr[] that was created in int main into function
[17:46:04] <sham1> That's not how it works
[17:46:09] <sokan> oh...
[17:46:13] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca) (Quit: WeeChat 3.4)
[17:46:20] <Klinda> #0 0x555556441407 in PushQuantumPixel MagickCore/quantum-import.c:256 I am breaking there
[17:46:24] <sham1> Try removing the square brackets, and make it "cpg_isle(genstr)
[17:46:25] <sham1> "
[17:47:02] <Klinda> then I do set args and run
[17:47:04] <sokan> sham1: that error is over
[17:47:06] <Klinda> do "step"
[17:47:11] <Klinda> doens't trigger anything
[17:47:15] <sokan> no I need the declarations to work :\
[17:47:17] <Klinda> a normal run does
[17:47:25] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca)
[17:47:44] *** Joins: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it)
[17:47:45] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[17:47:55] <zalt> Klinda: what does it do?
[17:47:59] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca) (Client Quit)
[17:48:14] <Klinda> zalt: I have the logs of the santizer
[17:48:55] <sham1> sokan: well, you have semicolons in your line where you declare variables like exp_cg
[17:49:24] <zalt> it's probably what sham1 said, gdb and asan not liking each other
[17:49:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[17:49:43] <zalt> you can have a different build for debugging than what is for asan
[17:50:12] *** Quits: matrox (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[17:50:24] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[17:50:55] *** Joins: kish` (~aqua@user/aqua)
[17:51:16] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by aldkjsfasdf!~xs@cpe-188-129-71-242.dynamic.amis.hr)))
[17:51:43] *** Joins: xsperry (~xs@user/xsperry)
[17:52:17] *** Quits: haniaF (~haniaF@79.191.101.105.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[17:52:19] *** nuxil_ is now known as nuxil
[17:55:09] <sokan> sham1: I found 'em all :D
[17:55:32] <sokan> excellent... Now I have segmentation fault T_T
[17:56:18] <sham1> ASan
[17:56:20] <sokan> sham1: that means something went wrong with memory?
[17:56:26] <sham1> For example
[17:56:30] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:56:31] <sokan> ASan?
[17:56:36] <sokan> what's that?
[17:56:37] <sham1> AddressSanitizer
[17:56:56] <sham1> You compile with -fsanitize=address
[17:57:03] <sham1> And then you can see where the problem is
[17:58:19] <sokan> sham1: gcc cg_islands.c -fsanitize=address -o cg_islands.out ?
[17:58:44] <sham1> Yes
[17:58:50] <sokan> oh damn!
[17:59:05] <sham1> You might also want to enable -g
[17:59:13] <sham1> So it can give you more detailed information about where stuff is
[17:59:33] <neube> another basic ass question, can I do a switch(variable) if my variable is  a character? and if yes, will i afterwards do this: case a: .... case b: ... right???
[17:59:38] <sokan> sham1: care to read the output because I'm not sure what's happening?
[17:59:50] <sham1> neube: case 'a': case 'b': and so on, but yes
[17:59:58] <sham1> sokan: sure
[18:00:34] <neube> sham1 what could be the possible reasons it throws me in the default then? I've done "char variable" and I've scanned for a character from the keyboard
[18:00:35] *** Quits: acerbic (~acerbic@cs-xdata-50-86-49-79.cspire.com) (Read error: Connection reset by peer)
[18:00:47] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[18:00:48] <sham1> neube: I don't know. I can't see the code
[18:00:52] <sokan> sham1: https://bpa.st/VSWA
[18:00:58] <neube> sham1 true, sorry, gimme a sec
[18:01:43] *** Quits: unknow (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:01:53] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[18:01:54] <sham1> sokan: yeah. Try recompiling with the following command: `gcc cg_islands.c -g -fsanitize=address -o cg_islands.out` and then upload the most recent source and the output again
[18:01:58] <neube> sham1: https://pastebin.com/EMWcsUTx
[18:02:02] <neube> ignore the comment //
[18:02:28] <sham1> Still using scanf
[18:02:56] <sham1> Anyway, you might still be getting some characters in the stream
[18:02:56] <neube> sham1 getchar never even works it just ends the script, at least scanf lets me input something
[18:03:04] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[18:03:09] <sham1> Try to print what character you're getting
[18:03:18] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[18:03:20] <neube> sham1: clever, thanks
[18:03:28] <sham1> So something like "%x\n", choice_admin
[18:03:39] <sham1> In the default case, so you can see what you're getting
[18:03:46] *** Quits: etolier (~somewhere@202-144-174-137.ip4.superloop.com) (Ping timeout: 256 seconds)
[18:04:23] *** Joins: etolier (~somewhere@122.199.46.54)
[18:06:02] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[18:06:37] <neube> sham1 it worked I turned scanf("%c",&variable) into scanf("\n%c",&variable)
[18:06:40] <neube> lol
[18:06:46] <sham1> Mmhm
[18:06:50] <neube> thanks for putting up with noobs
[18:07:03] <sham1> This is why I always tell people not to use scanf
[18:07:08] <sham1> It's so easy to get wrong
[18:07:38] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[18:08:13] <neube> sham1: any idea why when I do the same but with getchar() instead of scanf it ends the script? exactly like the pastebin but getchar uncommented and scanf commented, and the variable is int instead of char
[18:08:18] <sokan> sham1: source: https://bpa.st/URBQ, output: https://bpa.st/4ZHQ
[18:08:59] <neube> it must be the same problem as scanf, but I can't put an \n to solve it
[18:09:04] <neube> because it's getchar
[18:09:13] <sham1> neube: Because it just grabs the first character available in the stream and just returns that
[18:09:51] <sham1> sokan: for (k = j; j < window_size; k++)
[18:09:54] *** Joins: pulse (~pulse@user/pulse)
[18:10:00] <sham1> Are you sure that you want to compare j in the inner loop and not k
[18:10:37] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[18:11:00] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Read error: Connection reset by peer)
[18:11:21] <sokan> ohhhh
[18:11:26] <sham1> Also, you'd want to have the check be k < j + window_size
[18:11:43] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:12:11] <sham1> Or however large the window should be in a given spot
[18:12:38] <sham1> Because you of course want to shrink the window as j approaches the end of the string
[18:12:46] <sham1> Maybe
[18:12:50] <sokan> Now it runs, but the output is extremely wrong :\
[18:13:13] <sokan> I mean, it is what it should like, but the result is certainly wrong
[18:13:51] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[18:15:13] <sham1> If you don't want the window to shrink, the loops are fine
[18:15:14] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:15:48] <sokan> let me give you a program that runs as expected:
[18:16:05] <sokan> sham1: https://bpa.st/5MHA
[18:16:52] <sokan> the file I'm scannig is: hgdownload.cse.ucsc.edu/goldenPath/hg19/chromosomes/chrM.fa.gz
[18:16:59] <sham1> Okay yeah, that's shrinking the window as it's going
[18:18:32] <sokan> I have a sequence of 15000 characters. I want to scan that thing with a windows that has a length of 200 characters and during that scan count C, G and CG. It starts from i = 0 and when it scans these 200 characters it moves by i++.
[18:18:38] <sokan> I don't get what I actually did wrong :\
[18:18:57] *** Quits: Darkcoal (~user@139.64.51.226) (Ping timeout: 240 seconds)
[18:19:02] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[18:19:04] *** Joins: seninha (~seninha@user/seninha)
[18:19:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[18:20:02] <sham1> I have some
[18:20:09] <sham1> Some ideas
[18:20:15] <sham1> Just for some code quality
[18:20:33] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[18:20:41] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[18:20:53] <sham1> For one, you want to most likely zero out your variables whenever you go around your outer loop
[18:21:12] <sham1> Because now it's not happening and the previous scan through the sliding window is messing you up
[18:21:37] <sham1> One thing for code quality as well is that you should be using logical OR instead of bitwise OR, so || instead of |
[18:21:48] <sham1> Shouldn't affect stuff in this case, but it's a good practice
[18:22:33] <sham1> sokan: you can see in the working code you posted, that in the outer loop it does: `cg=cc=cgc=0;`
[18:22:59] <sokan> yep
[18:22:59] <sham1> You want to do the equivalent which is `count_g = count_c = count_cg = 0` from what I've understood from the code
[18:23:25] <sokan> and I want to do that to initialize all these values every time the "window" moves
[18:23:31] <sham1> Yes
[18:23:46] *** Joins: vikn (~vikn@46-162-82-40.cust.bredband2.com)
[18:23:58] <sham1> So just put that below `for (j = 0; j (strlen(sequence) - window_size); j++) {`
[18:24:44] *** Quits: oxfuxxx (~oxfuxxx@45.152.181.204) (Ping timeout: 256 seconds)
[18:24:50] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[18:25:53] *** Joins: Macuser (~Macuser@2600:1003:b455:7a5f:a18d:3621:194c:eb84)
[18:26:18] <sokan> There's also one other difference
[18:26:45] *** gallup is now known as aouestbillie
[18:26:50] <sokan> * The output is what it should be like now!
[18:27:08] <sham1> Well that's good
[18:27:21] *** Joins: Everything (~Everythin@37.115.210.35)
[18:27:39] <sokan> BUT
[18:27:41] <sokan> something is wrong again
[18:29:13] <sokan> My ratios are up to 6 while the other code's ratios are max up to 1.5
[18:29:31] <sham1> Well you probably have to look at the formulae
[18:29:59] <sokan> yeah probably
[18:30:04] <sokan> code wise I think I'm fine
[18:30:43] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[18:31:19] *** Quits: neube (~neube@46.198.190.67) (Quit: neube)
[18:32:19] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[18:33:39] *** Quits: vikn (~vikn@46-162-82-40.cust.bredband2.com) (Remote host closed the connection)
[18:33:57] <ioxzev1z> Does sequence need to be strlen()ed on each iteration of the loop?
[18:34:35] <ioxzev1z> nvm, probably does, didn't read
[18:34:38] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:35:11] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[18:35:29] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:11c4:68db:ad36:c833)
[18:35:48] <sokan>  for(g=i;(g<window_size+i) && (g<strlen(sequence));g++){ the g < strlen is redundant right?
[18:35:53] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[18:35:56] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[18:36:14] <sham1> Since you check that i is always less than strlen(sequence) - window_size, yeah
[18:39:17] *** Joins: Leonard (~Administr@114.55.127.80)
[18:40:13] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[18:40:13] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[18:41:35] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[18:42:22] *** Joins: badsektor (~badsektor@user/badsektor)
[18:42:31] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bbl.)
[18:42:55] <sokan> I don't get what I'm doing wrong. I guess I'll just send it to my prof and him to check it out
[18:43:31] <pragma-> That's what you're paying your school for.
[18:43:32] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.157)
[18:43:48] <sokan> AHAAAAA
[18:43:55] <sokan> I figured out what I'md going wrong
[18:44:06] <sokan> So on an output
[18:44:17] <pragma-> It really annoys me that some students spend like $20,000, $60,000, whatever on tuition, but then they don't take advantage of all the school resources.
[18:44:39] <pragma-> Then they spend 10, 20 years in student loan debt...
[18:44:42] * pragma- shakes his head.
[18:44:44] <sokan> 15315 to 30830 <--- the area scanned is extremely big. I wanted it to scan 15315 to 15515
[18:45:10] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[18:45:54] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:46:23] *** Joins: kloos (~kloos@152-39-142-46.pool.kielnet.net)
[18:47:08] <sokan> sham1: I want k to scan 200 characters but instead it scans until the end of sequence?
[18:48:32] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[18:48:32] *** Quits: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[18:48:45] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:49:09] <kloos> is there some way to set/change addresses of sections of a program at run or load time? or where stack and heap sit in the address space ?
[18:50:01] <sham1> For sections you'd use a linker script
[18:50:08] *** Joins: badsektor (~badsektor@user/badsektor)
[18:51:15] *** Joins: pert (~pert@fsf/member/pert)
[18:51:40] <sham1> Meanwhile stuff like stack and heap are determined by other things, mostly the OS and such
[18:55:31] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:56:01] *** Joins: haniaF (~haniaF@79.191.101.105.ipv4.supernova.orange.pl)
[18:56:23] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[18:57:26] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[18:58:14] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:02:32] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:02:50] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:03:12] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[19:03:45] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Remote host closed the connection)
[19:05:04] *** Joins: badsektor (~badsektor@user/badsektor)
[19:06:54] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[19:07:00] *** Joins: rsjw (~quassel@user/rsjw)
[19:07:19] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:09:33] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[19:09:57] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:12:34] <kloos> sham1: so for sections it is only possible at compile/build time? i'd guess shifting at runtime would also be possible but could be rather elaborate
[19:13:31] <kloos> OS is linux, is it possible to change where stack or heap is in memory?
[19:13:57] <sokan> sham1: https://bpa.st/VG4A the thing is that I want the scanning to finish 200 characters before the end of the sequence (I think I do via  k < (j + window_size)) but that does not happen.
[19:14:04] <sham1> Whatever loader you have could relocate your binaries if your program had been compiled a certain way, but yeah, it's easiest to just do stuff at compilation time
[19:14:09] <sokan> Any idea what I'm doing wrong?
[19:14:34] <sham1> kloos: why does it matter where the stack and heap are
[19:14:40] *** Joins: pingpongball (~pingpongb@43.228.192.110)
[19:15:05] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[19:15:19] <pert> kloos: yes, you can change where the stack is using sigaltstack() (for when a signal gets called) or for newly-created threads with pthread_attr_setstack(). But like sham1 said, it depends on why you care where they are
[19:15:29] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:16:24] <pert> for example, a use case for sigaltstack() is so you can set up an alternate stack for your signal handler. This way, you can handle signals like SIGSEGV that you normally wouldn't be able to due to your main stack being potentially unusable
[19:17:55] <sham1> ,paren (sequence[k] == 'C') || (sequence[k] == 'c') && (sequence[k+1] = 'G') || (sequence [k+1] == 'g')
[19:17:56] <candide> sham1: (((sequence[k]) == 'C') || (((sequence[k]) == 'c') && (sequence[k + 1] = 'G'))) || ((sequence[k + 1]) == 'g')
[19:18:16] *** Quits: fe23 (~fe23@2409:8a34:464:4990:1173:4110:f6be:949d) (Quit: fe23)
[19:18:27] <sham1> Hmm
[19:18:34] *** Quits: coodre__ (~no@160.178.2.5) (Ping timeout: 256 seconds)
[19:18:39] *** Quits: Macuser (~Macuser@2600:1003:b455:7a5f:a18d:3621:194c:eb84) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:18:40] <sham1> ,paren a || b && c || d
[19:18:41] <candide> sham1: (a || (b && c)) || d
[19:18:49] *** Joins: nuxil (~nuxil@141.195.51.213)
[19:19:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:19:55] <sham1> sokan: one thing you want to do for detecting if you have a sequence of c and g is to add parentheses anymore the two sides of the &&. Otherwise you'll get incorrect precedence
[19:20:57] <sham1> sokan: because if you see what the bot printed, and substitute the appropriate expressions for a, b, c and d, you should see where the Boolean expression is going wrog
[19:21:23] <sham1> So you'd want (a || b) && (c || d)
[19:22:38] *** Joins: agonhajdari (~textual@user/agonhajdari)
[19:23:28] <sokan> if (((sequence[k] == 'C') || (sequence[k] == 'c')) && ((sequence[k+1] = 'G') || (sequence [k+1] == 'g')))
[19:23:37] <sham1> Yeah
[19:24:01] <sham1> I think. It's hard to tell on IRC if the parentheses are correct
[19:24:05] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[19:24:14] <sokan> haha
[19:24:15] *** Joins: coodre (~no@160.178.2.5)
[19:24:16] <sokan> make sense
[19:24:35] <sokan> https://bpa.st/3YRQ
[19:25:06] <sokan> the numbers are better but still the issue with wanting j to stop at "position" 16371 instead of 16571 still remains :\
[19:25:11] *** Parts: nuxil (~nuxil@141.195.51.213) (Leaving)
[19:25:11] *** Joins: meator (~meator@user/meator)
[19:25:44] <sham1> Think of the logical operations like arithmetic: a + b * c + d is a + (b * c) + d, so when you want to multiply the sums, you need brackets, so (a + b) * (c + d)
[19:25:59] <sham1> Same with Boolean algebra
[19:26:46] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[19:27:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:27:34] *** Quits: pingpongball (~pingpongb@43.228.192.110) (Quit: Client closed)
[19:27:49] *** Joins: Leonard (~Administr@114.55.127.80)
[19:28:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:28:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:28:03] *** Joins: wroathe (~wroathe@user/wroathe)
[19:30:19] *** Joins: Darkcoal (~user@139.64.51.226)
[19:31:00] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[19:32:03] <sham1> sokan: what does (strlen(sequence) - window_len) evaluate to
[19:33:07] <sham1> Also for the record, you don't need to print it with %lf, %zu or similar should be used since it's an integer, a size_t
[19:33:17] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:582f:142b:19c3:9520)
[19:33:17] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:582f:142b:19c3:9520) (Changing host)
[19:33:17] *** Joins: skapata (~Skapata@user/skapata)
[19:33:39] *** Joins: johnjaye (~pi@154.6.152.74)
[19:34:44] <sham1> And on that note, window_size should be made into size_t
[19:35:01] <sham1> No reason for it to be a double
[19:35:12] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[19:35:54] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[19:36:17] *** Joins: Leonard (~Administr@114.55.127.80)
[19:38:03] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[19:38:49] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 256 seconds)
[19:39:12] *** Joins: WAR10CK (~WAR10CK@14.223.181.231)
[19:39:33] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-187.cspire.com)
[19:40:26] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[19:41:05] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[19:41:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[19:41:39] *** Quits: aouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[19:43:27] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:43:27] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-187.cspire.com) (Read error: Connection reset by peer)
[19:46:11] <sokan> and now it runs perfectly well. At least I can't find something goign wrong with it
[19:46:32] <sokan> what is size_t?
[19:46:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:47:05] *** Joins: chair1 (~chair1@177.23.12.223)
[19:47:32] <sham1> It's an unsigned integer type that can hold the maximum size of an object in chars (bytes)
[19:47:41] *** Joins: Leonard (~Administr@114.55.127.80)
[19:48:11] <sham1> It's in stddef.h
[19:48:27] <kloos> sham1: "Whatever loader you have could relocate your binaries if your program had been compiled a certain way,"  in which way?
[19:48:36] <kloos> are there any special compilation options for that?
[19:49:09] <Klinda> why asan could be wrong if I run with gdb? https://bpa.st/O3EQ
[19:49:28] <sokan> sham1: (strlen(sequence) - window_size) is basically the whole length of the sequence (which is an array) shorted by 200, since this is the last window slide. No need to double that
[19:49:46] <sham1> Well you need to compile your code as position independent code -fPIC and such. Then you also need to link your program to be a position independent executable
[19:50:22] <sham1> sokan: indeed. And window_len shouldn't be a floating point type
[19:50:43] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[19:50:58] <sham1> Klinda: because gdb can't be used alongside ASan
[19:51:51] <Klinda> what is the real "heap" ?
[19:51:57] <chair1> Non-serious question out of curiosity: is xxd frequently used to embedd data to a C program? Does it make sense to embedd very big stuff e.g. music, images, tilemaps, textures? Or would it be better to just fopen() those?
[19:52:16] <chair1> Also happy 2022
[19:52:50] <sham1> xxd, linker, there are many ways to embed data. C202x might even get #embed to make that easier
[19:52:51] <ioxzev1z> chair1, I seriously doubt that it's a good idea to embed big stuff in the source for a program
[19:53:23] <ioxzev1z> imo even a db should store links to media rather than the media itself in a database
[19:53:41] <chair1> sham1: interesting
[19:54:56] <sham1> One way also is to read the file one wants to embed and turning it into a (unsigned) char array. But as ioxzev1z alluded, it's not a good idea
[19:55:19] <Klinda> but so sham1 I should not report something with gdb if asan say something?
[19:55:45] <chair1> ioxzev1z: do you mean, keeping the path of the files outside the program in a e.g. DB?
[19:55:46] <Klinda> just the log of asan is enough?
[19:56:10] <ioxzev1z> chair1, there is a good reason why a computer game is 60GB but the executable itself is only tens of MB if that
[19:56:17] <sham1> You shouldn't debug a program built with ASan support. You want a different version of the executable without ASan and then debug that
[19:56:20] <ioxzev1z> You store media on the side and then open it via the program
[19:57:07] <ioxzev1z> If you have an SQL db of (e.g. music), you would not store the music in the db itself, but links to where it is on disk
[19:57:31] <ioxzev1z> That way you have a big collection of music but the DB is small in comparison
[19:57:43] <ioxzev1z> So no, don't embed stuff in source unless you have good reason
[19:58:02] <chair1> Interesting insights ioxzev1z , thanks for the advice ^_^
[19:58:25] <ioxzev1z> chair1, also note that if you store something in the source and change it, you have to recompile. If you want to change media outside of the program you don't need the recompile
[19:58:31] <ioxzev1z> Update the media and open as per usual
[19:59:40] <Klinda> sham1: so the use of Asan is something like "hey there is a heap, and it's in this function", you can't really know which exact line is it?
[19:59:48] *** Joins: Guest3 (~Guest3@4.16.135.37.dynamic.jazztel.es)
[20:00:00] <chair1> Hmmm true, it would suck if one had to recompile all the time
[20:00:23] *** Quits: Guest3 (~Guest3@4.16.135.37.dynamic.jazztel.es) (Client Quit)
[20:00:43] <sham1> Klinda:  you can know, if you debug the executable with ASan support also with debug symbols, so -g on gcc and clang and so on
[20:01:43] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-187.cspire.com)
[20:01:44] <sham1> If the ASan'd program has debug symbols, ASan can tell you the file and other such details for where the leaks and such happen
[20:02:34] <sham1> So you get all the line numbers and such
[20:03:46] <Klinda> but sham1 I think I can see the lines too, if you see in the log
[20:04:01] <Klinda> why do you say that I didn't do with -g?
[20:04:41] <sham1> Because you said "you can't reall know which exact line it is"
[20:05:33] <Klinda> as you see in the log, the overflow happens in different lines
[20:05:57] *** Joins: RyokoChan (~RyokoChan@user/RyokoChan)
[20:06:36] <chair1> What's a good GDB tutorial? I haven't learned it yet
[20:07:11] <RyokoChan> what about the man pages ?
[20:07:27] *** Quits: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:840b:3dd6:9d5e:79f4) (Quit: Leaving)
[20:08:49] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:08:57] *** Joins: otty (~otty@157.46.184.233)
[20:09:04] <otty> hey.
[20:09:20] <otty> why gets() is not working
[20:09:29] * pragma- rolls his eyes.
[20:09:46] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:09:47] *** Joins: piku (~piku@47.202.113.8)
[20:09:59] <chair1> RyokoChan: I'll check the texinfo manual
[20:10:04] <sham1> aaaaaaaaaaa
[20:10:13] <fizzie> Klinda: With compiler optimizations and preprocessor macro expansions, "line numbers" are sometimes a little fuzzy concept. You'll note that the ASan backtrace has #0, #1 and #2 all at the same actual address (0x5555563ec873). And the "real" actual .c file line number (quantum-import.c:2021) is the same in both. My guess would just be, gdb's and ASan's logic at trying to interpret the situation is a
[20:10:15] <fizzie> little different.
[20:10:26] <fizzie> The "solution" is to stop having multi-line macros, they're terrible anyway. ;)
[20:10:50] *** Joins: Macuser (~Macuser@2600:1003:b45d:49ce:a04e:b508:69c:6034)
[20:11:09] *** Quits: piku (~piku@47.202.113.8) (Remote host closed the connection)
[20:11:58] <oldlaptop> otty: Because it was not designed so that it could work. (Oops.)
[20:12:13] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-187.cspire.com) (Read error: Connection reset by peer)
[20:12:49] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:13:24] <otty> oldlaptop: ohh can i use fgets insted?
[20:13:45] <oldlaptop> Maybe. (It definitely can work, unlike gets().)
[20:14:14] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:14:16] <otty> oldlaptop: is there any difrence in syntax?
[20:14:19] <oldlaptop> You might be trying to accomplish something that would be better served by some other approach, though. We don't know that, because you haven't said what you're trying to do.
[20:15:10] <otty> im trying to read a string as user input and print it in reverse with out using strrev
[20:15:11] *** Joins: Lycurgus (~juan@98.4.112.204)
[20:15:17] *** Quits: kurahaupo1 (~martin@115.69.27.211) (Ping timeout: 240 seconds)
[20:15:33] <sokan> right. Something is certainly off with calculations, but let the prof figure that out. code wise it's excellent.
[20:16:00] <sokan> sham1: thanks for your help :)
[20:16:12] <sham1> sokan: no problem
[20:16:37] <oldlaptop> I don't think I would want to use fgets() for that, I would want to use getchar() or one of its relatives.
[20:17:30] <fizzie> If you're supposed to read line by line and reverse each line, fgets would be perfectly reasonable.
[20:17:50] <sham1> There's also getline, if you can depend on POSIX, but that's a bit heavy duty
[20:17:54] <pert> fgets() is designed for reading strings. if you were to use getchar() to try reading a string, you'd basically be re-inventing fgets
[20:18:02] <fizzie> If you're supposed to reverse the entire contents of the input, then its habit of stopping at '\n' might be less than ideal.
[20:18:15] <fizzie> But most "user input" programs tend to be line-oriented.
[20:18:16] <ioxzev1z> otty, gets is dangerous to use due to buffer overflows
[20:18:22] <ioxzev1z> It has actually been removed from the standard
[20:18:25] <sham1> Could just replace the \n by \0
[20:18:27] <oldlaptop> I would prefer getline() over fgets(), probably to the extent of lifting an implementation from some POSIX C library if necessary.
[20:18:28] <pert> getline/getdelim are also in the dynamic allocations TR, albeit I don't know of a non-POSIX system that has it
[20:18:50] <pragma-> I straced a program once and discovered that they insisted on using getchar and putchar for every thing. They wouldn't use puts or printf. It was weird.
[20:18:56] <sham1> I'd hope that Windows would have it, but I'm not holding my breath
[20:19:12] <johnjaye> pragma-: maybe they thought it was safer
[20:19:17] <johnjaye> or their boss demanded it
[20:19:18] <NRK[m]> pragma-: for what reason?
[20:19:30] <pragma-> NRK[m]: I don't know.
[20:19:47] <NRK[m]> u didn't ask them?
[20:20:07] <pragma-> I didn't know them.
[20:20:33] <oldlaptop> pert: The issue with fgets() is that it's hard to tell when the input was truncated. (The obvious way doesn't always work.)
[20:20:33] <sham1> Why were you stracing some stranger's program
[20:20:48] <pragma-> HEY! THIS IS ABOUT THE PROGRAM, NOT ME!
[20:20:57] *** Parts: Lycurgus (~juan@98.4.112.204) (Deus Ex)
[20:21:40] *** Joins: constxd (~brad@142.134.38.68)
[20:21:42] <constxd> kings
[20:21:52] <constxd> on linux
[20:22:01] <constxd> nvm
[20:22:04] <fizzie> How'd you differentiate putchar and puts in `strace` anyway? They both turn into `write` anyway, unless you also go out of your way to have an unbuffered stream too.
[20:22:11] <Klinda> fizzie: btw I was analyzing the heap on the "partially addressable location", but in the end I think I will not write anything ahah, I was trying analzying another crash but with gdb it doesn't trigger the sanitizer
[20:22:15] <pragma-> That's what I meant. They were all writes of length 1.
[20:22:22] <pragma-> One after another for an entire string.
[20:22:23] <Klinda> *overflow
[20:23:38] *** Quits: gerogerigegege (gauze@entropy.tmok.com) (Ping timeout: 252 seconds)
[20:23:46] <sham1> At least on musl, getdelim uses getc which is a reasonable implementation. I'm scared to eve look at glibc
[20:23:53] *** Joins: gerogerigegege (~gauze@entropy.tmok.com)
[20:24:05] *** Quits: homura (uid398348@user/homura) (Ping timeout: 250 seconds)
[20:24:15] *** Joins: homura (uid398348@user/homura)
[20:24:16] *** Joins: ouestbillie (~gallup@modemcable057.194-20-96.mc.videotron.ca)
[20:24:16] *** Joins: aouestbillie (~gallup@modemcable057.194-20-96.mc.videotron.ca)
[20:24:18] <fizzie> Hmm. Maybe they wanted people to see the writes as a graphical kind of thing. Though you'd probably need to add some artificial delays too.
[20:24:57] *** Quits: buzel (~buzel@fsf/member/buzel) (Ping timeout: 250 seconds)
[20:25:07] <pragma-> Maybe it was compiled with a weird compiler.
[20:25:21] *** Quits: oldlaptop (~quassel@45.63.78.126) (Ping timeout: 245 seconds)
[20:25:38] *** Joins: oldlaptop (~quassel@45.63.78.126)
[20:25:38] <fizzie> sham1: It does a memchr on the buffer first, which I think is a... reasonable optimization, though it does make the code butt-ugly.
[20:25:46] <sham1> Yeah
[20:25:50] *** Quits: nate (NBishop@o.apocaleaps.com) (Ping timeout: 252 seconds)
[20:25:53] <chair1> Maybe they want to discover who is stracing their software by monitoring discussions on IRC
[20:26:02] *** Joins: nate (NBishop@o.apocaleaps.com)
[20:27:28] <sham1> Since the IO is buffered, you might as well look at the buffer
[20:27:31] *** Joins: buzel (~buzel@fsf/member/buzel)
[20:27:33] *** Quits: edr (~edr@user/edr) (Ping timeout: 250 seconds)
[20:27:45] *** Joins: edr (~edr@enlo.co)
[20:27:45] *** Quits: edr (~edr@enlo.co) (Changing host)
[20:27:45] *** Joins: edr (~edr@user/edr)
[20:28:57] <Rounin> Ah, musl... I wish we could have a spring cleaning already, where we try to find out where all of the gigabytes are going
[20:29:10] <Rounin> I tried listing the sizes of all my installed packages, but even the largest ones weren't that big
[20:29:17] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (Ping timeout: 250 seconds)
[20:29:33] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[20:29:47] *** Joins: segnior (segnior@user/segnior)
[20:29:59] *** Joins: Atque (~Atque@user/atque)
[20:30:16] <Rounin> I mean, not gigabytes taken by Musl, but by more common system components
[20:30:18] <fizzie> FTR glibc's is at https://github.com/bminor/glibc/blob/master/libio/iogetdelim.c and it took me a while to locate the part that actually _reads_ from the FILE *. (Spoilers: it's the `__underflow(fp)` call.)
[20:30:43] <Rounin> I mean... What would you call a read function if not __underflow
[20:31:01] *** Quits: routeveg_ (~lee@197.ip-51-195-136.eu) (Ping timeout: 250 seconds)
[20:31:09] <johnjaye> you could call it __maybewritemaybenotlol
[20:31:14] <Rounin> :D
[20:31:14] *** Joins: routeveg (~lee@197.ip-51-195-136.eu)
[20:31:18] <sham1> Hmm, yeah. I located it too: https://sourceware.org/git/?p=glibc.git;a=blob;f=libio/iogetdelim.c;h=b6c4c07b459a3992d0318c76b27aed938c7d9a05;hb=HEAD
[20:31:28] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:31:30] <cehteh> Rounin: du -a | sort -rn | head -10 | xargs rm  :D
[20:31:36] *** Quits: eau (~chat@user/eau) (Ping timeout: 245 seconds)
[20:32:03] *** Joins: eau (~chat@user/eau)
[20:32:14] <johnjaye> by the way, can you download, compile, and link against musl fairly easily or is it a lot of work?
[20:32:18] <johnjaye> i'm on bsd atm
[20:32:20] *** Quits: Luke (~ldm@hacksoc/member) (Ping timeout: 250 seconds)
[20:32:22] <Rounin> cehteh: Hehehe
[20:32:25] <fizzie> There's an Intel ray-tracing kernel library called "Embree" that's got a half-a-gigabyte .so file.
[20:32:31] <johnjaye> like do you have to write linker scripts
[20:32:33] *** Joins: Luke (~ldm@hacksoc/member)
[20:32:44] <fizzie> Okay, 488701152 bytes isn't quite half a gigabyte, but almost.
[20:33:32] *** Quits: koollman (samson_t@user/koollman) (Ping timeout: 252 seconds)
[20:33:43] <Rounin> You'd think it'd be a matter of using -nostdlib or whatever it's called and then -lmusl, but without having tried, it's hard to say
[20:33:44] *** Joins: koollman (~samson_t@sp1.kooll.org)
[20:34:19] <kurahaupo> fizzie: It's lb/kg Gb
[20:34:26] <sham1> musl is very linux-specific. Although it can be ported with effirt
[20:34:42] <Rounin> Half a gigabyte for a package... I suppose it sort of makes sense for a hyper-optimized renderer
[20:35:31] <kurahaupo> fizzie: err, lb/kg Gib
[20:35:44] <johnjaye> i didn't realize musl was linuxese
[20:35:50] <Klinda> ahahah fizzie he didn't trigger the other overflow because it didn't go out of bounds, I repeat the proces x100 times and the saniizer trigger
[20:36:36] *** Joins: Leonard (~Administr@114.55.127.80)
[20:37:31] *** Quits: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523) (Ping timeout: 250 seconds)
[20:38:06] <Klinda> fizzie: https://bpa.st/H6IQ
[20:38:23] <Klinda> this is exact btw
[20:38:23] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 250 seconds)
[20:38:53] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:39:18] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[20:39:22] <NRK[m]> sham1: i think it aim's to be posix compatible
[20:39:35] *** Joins: Trashlord (~trash@user/trashlord)
[20:39:43] <NRK[m]> and if that's the case, then it should work on BSDs as well.
[20:40:04] <Rounin> You'd still have some issues like how to perform syscalls and what syscalls are available etc. though
[20:40:08] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[20:40:14] <Rounin> But with a few macros here and there, perhaps
[20:40:49] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:40:54] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[20:41:36] *** Quits: selikolg (~selikolg@178.62.2.76) (Ping timeout: 245 seconds)
[20:42:02] <oldlaptop> sham1: Aw, I remembered musl's being simpler than that. (In the sense of not looking at the FILE's members at all.)
[20:42:06] <otty> why? "[1]    8841 segmentation fault (core dumped)  ./a.out"
[20:42:48] <kurahaupo> sokan: Did you find the assignment that's supposed to be a comparison?
[20:43:33] <sokan> kurahaupo: what?
[20:44:32] *** Quits: Tordek (tordek@triton.blinkenshell.org) (Ping timeout: 252 seconds)
[20:44:45] *** Joins: Tordek (~tordek@triton.blinkenshell.org)
[20:45:32] <kurahaupo> sokan: At one point you wrote = instead of ==
[20:47:37] <kurahaupo> sokan: https://bpa.st/OK6A#1L74
[20:47:49] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 240 seconds)
[20:48:21] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 250 seconds)
[20:48:29] *** Joins: Leonard (~Administr@114.55.127.80)
[20:48:46] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[20:49:01] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[20:49:06] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (Ping timeout: 245 seconds)
[20:49:25] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[20:51:21] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[20:51:49] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[20:52:58] <sokan> kurahaupo: YES YES YES!!! THAT was the freaking mistake!!!!
[20:52:59] <kurahaupo> sokan: Also it's probably shorter to go « switch (toupper(sequence[k])) { case 'C': ++count_c; if ((toupper(sequence[k+1]) == 'G') { ++count_cg, ++k; case 'G': ++count_g; } } »
[20:53:27] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[20:54:57] <sokan> kurahaupo: that's what why the calculation were off!
[20:54:59] <sokan> thanks!
[20:55:01] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[20:55:32] <kurahaupo> sokan: Also, don't use "|" for combining conditions; "||" is for Boolean, "|" is for bitwise
[20:55:56] <johnjaye> yes. there's always more arcana to learn in c
[20:55:58] <kurahaupo> (it'll usually work, until the order matters and then it'll die)
[20:56:26] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[20:56:52] <RyokoChan> sokan: when doing comparison of a constant and a variable, you might consider to put the constant always on the left side ..  since it's not possible to assign a value to a constant, you would get a compiler error, when doing something like if ( constant = variable )
[20:57:14] <RyokoChan> while  if ( variable = constant )  would not
[20:57:49] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[20:57:50] <RyokoChan> (and I would stop doing assignments at all in a if () - statement )
[20:58:04] <kurahaupo> sokan: Turn up all the warnings in your compiler and it would tell you about possible incorrect assignment
[20:58:24] <fizzie> Except it exempts assignments wrapped in an extra pair of parens, like that one.
[20:58:45] *** Quits: dzz007 (~dzz007@user/dzz007) (Ping timeout: 250 seconds)
[20:59:04] *** Joins: dzz007 (~dzz007@user/dzz007)
[20:59:06] <fizzie> ,cc int x = 0; if (x = 1) puts("foo"); // warns
[20:59:08] <candide> fizzie: [warning: suggest parentheses around assignment used as truth value [-Wparentheses]] foo
[20:59:10] <fizzie> ,cc int x = 0; if ((x = 1)) puts("foo"); // doesn't warn
[20:59:13] <candide> fizzie: foo
[20:59:15] <fizzie> ,cc int x = 0; if (true && (x = 1)) puts("foo"); // still doesn't warn
[20:59:18] <candide> fizzie: foo
[20:59:25] <cehteh> the constant = variable thing is some recommendation i never understand, if one would be careful to follow that then he could be careful not to mix up = and == in the first place
[20:59:41] <RyokoChan> true
[20:59:50] <RyokoChan> but it doesn't hurt
[21:00:13] *** Joins: badsektor (~badsektor@user/badsektor)
[21:00:33] <RyokoChan> I do it in all languages I work in
[21:00:34] *** Joins: donutfarian (~donutfari@2601:140:9180:5e40:88df:7fd3:8fca:5534)
[21:00:35] <johnjaye> ironically i use assignment truth values in lispy languages all the time
[21:00:38] <cehteh> turning on compiler warnings is more helpful
[21:00:39] <RyokoChan> as far as possible
[21:00:42] <johnjaye> maybe it's not a good habit
[21:00:46] *** Quits: vinay (~Vinay@user/vinay-keshava) (Ping timeout: 245 seconds)
[21:00:56] *** Joins: vinay (~Vinay@user/vinay-keshava)
[21:01:06] <RyokoChan> yeah, try to turn on compiler warnings in php .. =D
[21:01:08] <kurahaupo> I usually write: « FILE *f = fopen(name, "r"); if (!f) perror(name), exit(EX_NOINPUT);
[21:01:22] <RyokoChan> that's why I'm used to do it in all languages
[21:01:30] <cehteh> that = is an expression and not a statement is kidof problematic in C anyway
[21:01:32] <kurahaupo> rather than putting the assignment inside the if
[21:02:02] <kurahaupo> (I might add {} of course)
[21:02:08] *** Quits: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch) (Ping timeout: 252 seconds)
[21:03:26] <johnjaye> so defensive practice is to not put comparisons inside if statements at all?
[21:03:37] <johnjaye> because more compiler warning?
[21:03:40] <kurahaupo> fizzie: the extra brackets intentionally prevent the warning. A good reason to avoid those too.
[21:03:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[21:03:45] *** Joins: Xeha (~Xeha@dynamic-82-220-88-142.ftth.solnet.ch)
[21:04:01] <kurahaupo> johnjaye: that's not going to help
[21:04:07] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[21:04:38] <sham1> FILE *f; if ((f = fopen(name, "rb")) != NULL) {int tmp = errno; perror("fopen"); exit(-foo); /* or what have you */}
[21:05:17] <sham1> The handling of the error depends on the context ofc
[21:05:36] *** Quits: Macuser (~Macuser@2600:1003:b45d:49ce:a04e:b508:69c:6034) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:05:40] <kurahaupo> ,cc -Wall if (true && x == 0) ; /* OK */ if (false && x = 0); /* dies as one would wish */
[21:05:41] <candide> kurahaupo: error: 'x' undeclared
[21:05:46] *** Joins: pucara (~i@host230.186-125-94.telecom.net.ar)
[21:05:55] <kurahaupo> ,cc -Wall int x=2; if (true && x == 0) ; /* OK */ if (false && x = 0); /* dies as one would wish */
[21:05:57] <candide> kurahaupo: error: lvalue required as left operand of assignment
[21:05:59] <badsektor> we can do this in a doubly linked list, right?  v_temp->prev->next = v_temp->next;  free(v_temp);
[21:06:19] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:06:20] <fizzie> Well, that doesn't even need a warning.
[21:06:33] <kurahaupo> badsektor: You missed fixing up the reverse link
[21:06:33] <sham1> Well you'd also want to assign the prev of v_temp->next
[21:06:36] <fizzie> Because it gets parsed as the obviously nonsensical `(false && x) = 0`.
[21:06:44] <badsektor> oh yeah, thanks
[21:06:53] *** Joins: acerbic (~acerbic@cs-xdata-50-86-48-87.cspire.com)
[21:07:03] <fizzie> But the point was really, the warning wouldn't have helped in the pasted example of `if ((sequence[k] == 'C') | (sequence[k] == 'c') && (sequence[k+1] = 'G') | (sequence [k+1] == 'g'))`.
[21:07:12] <johnjaye> right the && precedence bug that was in K&R c
[21:07:18] <sham1> Yeah, I did tell him about it
[21:07:32] <johnjaye> maybe just use parentheses upon parentheses everywhere and that solves it
[21:07:47] <fizzie> And I wouldn't want to tell people to avoid all "unnecessary" ()s where the precedence isn't blindingly obvious.
[21:07:50] <johnjaye> ( (2) / (5)) * ((2) + (2))
[21:07:59] <fizzie> (Though I probably wouldn't add any to `a == b && c == d`, it's clear enough.)
[21:08:03] <sham1> And of course that a || b && c || d != (a || b) && (c || d)
[21:08:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[21:08:28] <kurahaupo> fizzie: If people would get out of the habit of inserting useless brackets like (a==b)&&(c==d) then the compiler would be about to warn about if(a=b&&c==d)
[21:08:30] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[21:08:46] <fizzie> The really non-obvious one IMO is that `flag & mask == 0` is `flag & (mask == 0)`.
[21:09:01] <sham1> ,paren a == b && c == d
[21:09:02] <candide> sham1: (a == b) && (c == d)
[21:09:05] <constxd> wtf
[21:09:08] <sham1> Neat
[21:09:08] <fizzie> That's the one from the "&& and || were introduced later than & and |" history.
[21:09:23] <constxd> ,paren flag & mask == 0
[21:09:23] <candide> constxd: flag & (mask == 0)
[21:09:37] <constxd> based
[21:09:38] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[21:09:59] <kurahaupo> fizzie: Yeah that's stupid, but it was a holdover from before C had && and ||
[21:10:12] <kurahaupo> snap
[21:10:29] <sham1> Still can't understand why && and || weren't in at the start
[21:10:52] <kurahaupo> "later" being like 1977
[21:11:27] <kurahaupo> sham1: Shortage of available keyboard symbols at the time
[21:11:28] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-87.cspire.com) (Read error: Connection reset by peer)
[21:11:29] <oldlaptop> kurahaupo: (One) problem with that is that if(a = b && c == d) is an arguably-reasonable thing to write
[21:11:53] <sham1> And it's a mistake like every ALGOL-esque language that follows C's conventions copied
[21:12:19] <kurahaupo> oldlaptop: I'm sure I could find a use for it too, but gcc should issue a warning because there's no brackets
[21:12:32] *** Joins: pingpongball (~pingpongb@43.228.192.110)
[21:12:41] *** Joins: Leonard (~Administr@114.55.127.80)
[21:12:50] <oldlaptop> (Ah, I think I misparsed your argument)
[21:13:06] <sham1> Obviously the solution is (and (set! a b) (eq? c d)) /s
[21:13:07] <cehteh> its C :D ... cant fix it
[21:13:33] <sham1> (except that setting doesn't return the set value, bleh)
[21:13:34] <kurahaupo> sham1: Ironically, BCPL (the precursor to C) had the & and | symbols  meaning what we use && and || in C
[21:13:36] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[21:14:11] <cehteh> imo there should be only 3 or maybe 4 precedences whats known from basic arithmetic, everything else left to right and use parenthesis ... and make = a statement
[21:14:27] <oldlaptop> sham1: It should, though :P
[21:14:42] *** Joins: tejr (~tejr@user/tejr)
[21:14:45] <sham1> Yeah, precedence should be such not have a total ordering between unrelated operators
[21:14:49] <sham1> Yet here we are
[21:14:49] <cehteh> the & vs && thing is because C has no real bool type
[21:14:58] *** Joins: malina (~malina@user/malina)
[21:15:03] <sham1> _Bool: am I a joke to you
[21:15:09] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[21:15:53] <sham1> Although of course, _Bool is quite weird in many ways when compared with other languages' Boolean types
[21:16:47] <oldlaptop> (well, I took that as commentary on prefix/postfix notation as opposed to infix notation, and therefore on whether precedence itself should exist)
[21:16:50] <cehteh> that what i meant with real
[21:16:50] <johnjaye> odd so && was added later than &? but i thought & and == were the problem
[21:16:55] <kurahaupo> _Bool b = true; b += 2; b -= 2; // guess what
[21:17:03] <cehteh> bool and integers coerece into each other
[21:17:07] *** Joins: raym (~raym@user/raym)
[21:17:20] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:17:35] <cehteh> look at rust, if X     requires X to be a bool and nothing else
[21:17:41] <kurahaupo> johnjaye: yes, if you're doing bitwise masking, you want to take that and then compare, not the other way around.
[21:17:43] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[21:18:22] <johnjaye> so what's the problem with (a == b && c == d) then if it parses right
[21:18:31] <johnjaye> i.e. (a==b) && (c==d)
[21:18:32] <sham1> oldlaptop: I mean yeah, prefix&postfix is of course a solution. But for infix one should make it so that unrelated operations don't have precedence and thus require parentheses
[21:19:35] <kurahaupo> If you actually have a bool type, then having & and | operators is superfluous; * and + already do the same thing
[21:19:58] <kurahaupo> *things
[21:19:59] <oldlaptop> johnjaye: There is none, but a construct like (a = b && c == d) is both a likely mistake that compilers might want to complain about, *and* a reasonable thing to write.
[21:20:49] <kurahaupo> sham1: What do you mean by "unrelated operations"?
[21:20:51] <sham1> That's one of the things I commend Rust for: they actually have a non-total ordering for operators and thus some expressions require "lots of superfluous parentheses"
[21:20:57] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[21:21:11] <kurahaupo> sham1: Parentheses are a scourge.
[21:21:20] <oldlaptop> (Although it looks more reasonable still if you write it (a = b() && c == d))
[21:22:03] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[21:22:37] <kurahaupo> The main problem is the visual similarly between = and == which takes a long time to train oneself to spot reflexively. Issues with operator precedence are minor by comparison
[21:22:50] <sham1> kurahaupo: as for what are "unrelated operators", you'd have things like logical operations and assignment. So for example in order to do a = b && c == d, you'd have to do (a = b) && c == d
[21:23:17] *** Joins: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[21:23:22] <johnjaye> sham1: what does non-total ordering mean in context? you try to use 2 operators together and it demands you have parens?
[21:23:31] <chair1> I try to potential lvalues to the left when comparing, like 42 = meaning_of_life
[21:23:32] <sham1> And of course Pascal had the right idea of := Vs ==
[21:23:34] <sham1> johnjaye: yes
[21:23:49] <sham1> Err, := Vs =
[21:23:50] <oldlaptop> kurahaupo: Hm, maybe a partial solution: what about warning about Yoda-code violations? (i.e. complain about a() == b, but not b == a(), notionally allowing a stronger inference that an lvalue on the left side really is supposed to be getting assigned to)
[21:23:50] <johnjaye> well sure. but pascal isn't running half the world's software
[21:23:58] <oldlaptop> Doesn't help when they're both lvalues, obviously.
[21:24:13] <sham1> Good ideas need not come from popular languages
[21:24:26] <oldlaptop> sham1: Alas.
[21:24:31] <johnjaye> maybe there's a way to do #define = :=
[21:24:32] <kurahaupo> sham1: precedence is innate to how humans parse natural language, and it's MUCH faster to do that WITHOUT inserted parentheses
[21:25:18] <oldlaptop> johnjaye: First you do that, then you're writing mac.h and the world hates you.
[21:25:22] <sham1> Well it's not natural language. It's mathematical notation combined with control flow
[21:26:01] *** Joins: soapsudsxx (~soapsudsx@141.193.188.151)
[21:26:07] <johnjaye> i'm leaning toward just never putting 'a=b' as an expression. just statements
[21:26:14] <kurahaupo> The problem with parentheses is that there's only one kind available, so you actually have to count them to see where the groups start and end. Requiring nested parentheses to use visually different forms would be a huge boon to readability
[21:26:42] <oldlaptop> johnjaye: I could support such a rule if a and b are both lvalues.
[21:27:09] <kurahaupo> johnjaye: So you would forbid «a=b=c=get_value()»; ?
[21:27:18] <johnjaye> i guess
[21:27:38] *** Quits: terminalpusher (~terminalp@2a01:586:8e8d:1:a3ae:5aad:c134:21a5) (Ping timeout: 256 seconds)
[21:27:41] <johnjaye> it's a great sacrifice, but i'm willing to make you pay for it
[21:27:45] <johnjaye> or whatever that meme is
[21:28:13] <oldlaptop> I would definitely *not* forbid if (a = foo()) { /* use a for things */ } else { /* handle error */ }
[21:28:39] <kurahaupo> johnjaye: That syntax is particularly valuable when a,b&c are complex l-value expressions
[21:30:57] <fizzie> Go goes the route where assignment isn't an expression but instead a statement.
[21:31:14] <fizzie> To compensate, it allows `if` and other such to have an optional extra statement in front.
[21:31:20] <johnjaye> yes. it is time to goify our code.
[21:31:59] <fizzie> And of course C++ already has an `if` initial declaration; `if (int x = some * complex + expression; x > 0) { use(x); }`.
[21:32:23] <sham1> In a way, I like that in C++. That is actually convenient
[21:33:06] <sham1> It doesn't pollute the outer scope which is nice
[21:33:27] <pony> C++ is so foreign to me
[21:33:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:34:00] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[21:34:20] <sham1> That's one of those things where credit is due
[21:35:04] *** Joins: Goreng (~Goreng@202.138.250.46)
[21:36:23] *** Joins: magla (~gelignite@55d41183.access.ecotel.net)
[21:36:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:36:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:36:40] *** Joins: wroathe (~wroathe@user/wroathe)
[21:36:41] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[21:37:13] <ioxzev1z> What's the difference between expression and statement?
[21:37:19] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:37:35] <sham1> Expression has a value, and a statement does not
[21:38:08] <sham1> Statements are also stuff used for control flow and such
[21:38:19] <sham1> And in C, they are the things that end in semicolons
[21:38:23] *** Joins: johnjaye (~pi@154.6.152.74)
[21:38:36] <fizzie> `while (true) {}` doesn't end in a semicolon. ;)
[21:38:37] <sham1> So you also have expression statements, so in pseudo-BNF it'd be <expression> ";"
[21:39:05] <Klinda> why if I compile with this CC=afl-gcc CXX=afl-g++ CFLAGS="-fsanitize=address -fno-omit-frame-pointer -O1" CXXFLAGS="-fsanitize=address -fno-omit-frame-pointer -O1" ./configure --disable-shared I can see the lines ? -g is not needed ?
[21:39:49] <fizzie> For some reason the null statement, a plain `;`, sometimes catches people off-guard.
[21:39:51] <sham1> Or a bloxk
[21:40:15] *** Quits: pingpongball (~pingpongb@43.228.192.110) (Quit: Client closed)
[21:40:27] <sham1> Well okay, a lot of statements end in semicolons
[21:40:35] <sham1> And then you also have blocks
[21:40:39] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[21:41:12] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[21:41:13] <rsjw> void f(); is f() a statement? it has no value.
[21:41:35] <fizzie> Well, yes. `while (true) {}` contains two statements; the while statement, which is syntactically `while` `(` /expression/ `)` /statement/, and an (empty) block statement `{}`, which is used as the last component of the while statement.
[21:42:30] <fizzie> And no, `f()` isn't a statement. `f();` is, though.
[21:42:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:42:46] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:43:04] *** Quits: lllh (~llh@198.48.244.21) (Ping timeout: 256 seconds)
[21:43:10] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[21:43:34] <sham1> f() is an expression whose value is void
[21:44:06] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[21:44:53] <fizzie> Yeah, it's one of those philosophical questions whether a void-typed expression "has" a value.
[21:44:55] <fizzie> C11 6.3.2.2p1: "The (nonexistent) value of a /void expression/ (an expression that has type `void`) shall not be used in any way, --"
[21:45:18] *** Joins: mrig (~mrig@user/mrig)
[21:46:51] <sham1> It's useful for casting unused parameters away, although that will thankfully be less necessary for C202x since it will allow for unnamed parameters
[21:47:18] <sham1> Any type can be casted into the void
[21:47:25] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 240 seconds)
[21:47:36] *** Quits: otty (~otty@157.46.184.233) (Remote host closed the connection)
[21:48:35] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.43) (Ping timeout: 256 seconds)
[21:48:50] <nomagno> Is there any portable more efficient way to convert between binary and arbitrary type than writing conversion functions between fread() char arrays and the specific data type?
[21:49:19] <fizzie> If you gaze long into a `void` expression, the `void` expression will gaze back into you.
[21:49:23] *** Joins: moog (~moog@107.77.244.39)
[21:50:12] <omegatron> nomagno: you have an example?
[21:50:17] *** Joins: moose (~moose@user/moose)
[21:51:08] <sham1> As long as you're not fwrite'ing and fread'ing structs, you should be fine-ish. Except for possible endianness
[21:51:24] <chair1> Could you use union for that?
[21:51:49] <sham1> Do not read or write structs from/to files or other streams
[21:52:20] <fizzie> Chances are for "trivial" conversion functions (like one converting `unsigned char[4]` into an `uint_least32_t` by <<s and |s), for an implementation where it's a no-op representation-wise, the compiler's going to turn it into one. So the non-portable options won't be any more "efficient". Less (source) code, perhaps.
[21:52:29] <sham1> Same for unions. Arrays of fixed width types? Borderline
[21:53:10] <sham1> *link of Rob Pike's post about the byte order fallacy here*
[21:53:21] <nomagno> Why not write/read structs though?
[21:53:30] <sham1> Unportable
[21:53:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:53:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:53:43] *** Joins: wroathe (~wroathe@user/wroathe)
[21:54:04] *** Quits: Goreng (~Goreng@202.138.250.46) (Quit: Leaving)
[21:54:06] <nomagno> Can't you assume the same program reading or writing structs would be able to interpret fine?
[21:54:11] <sham1> No
[21:54:11] *** Joins: Akuli (~Akuli@213.216.210.19)
[21:54:16] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[21:54:16] <fizzie> https://gcc.godbolt.org/z/a1fKscr5z <- turns into a single `mov`, and gets inlined everywhere.
[21:55:06] <sham1> And doing stuff from big endian on x86 and AMD64 will just be a single bswap, and also be inlined
[21:55:33] <sham1> Well, mayhaps a mov and a bswap
[21:55:40] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[21:56:13] *** Joins: Kazper (~juan@host-191-75.skynet-msk.ru)
[21:56:17] *** Parts: Kazper (~juan@host-191-75.skynet-msk.ru) ()
[21:58:01] *** Quits: donutfarian (~donutfari@2601:140:9180:5e40:88df:7fd3:8fca:5534) (Quit: Leaving)
[21:58:44] <sham1> And this is similar stuff to some people trying to do things like mapping structs to hardware structures like the GDT on x86 and then ending up having to do weird things like bitfields and packed structs. Simply say no, and serialise/deserialise properly
[22:00:29] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[22:00:42] <sham1> Or filesystems which should be a better example because they're not specific to any architecture
[22:01:38] <sham1> TLDR: Do not read or write a struct from/to files. Pick a serialisation format. Any of them.
[22:03:26] <kurahaupo> fizzie: Who got that declaration-inside-if first, C++ or Go?
[22:05:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[22:06:13] <rsjw> nomagno: yes, if it's the same compiled program it'd be fine, but if you compile the same source on another platform there's a fair chance it wouldn't work
[22:06:15] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:07:22] *** Quits: duuude (~user@user/duuude) (Ping timeout: 268 seconds)
[22:07:25] <sham1> Same architecture, same compiler (including version), then maybe. But why take that gamble
[22:08:13] *** Joins: Leonard (~Administr@114.55.127.80)
[22:08:18] <rsjw> is the struct layout not set by the ABI? then it'd be per-arch, not also per-compiler
[22:08:18] <kurahaupo> sham1: If it's literally one program both reading and writing, it's hard to see what harm is
[22:09:17] <nomagno> rsjw: On OpenBSD ABI instability is an explicit security measure
[22:09:38] <rsjw> nomagno: how do you mean?
[22:09:40] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:09:46] *** Joins: sathylias (~sysadmin@modemcable136.173-130-66.mc.videotron.ca)
[22:09:56] *** Joins: duuude (~user@user/duuude)
[22:10:02] <nomagno> Like, they make sure to change the ABI every kernel release
[22:10:17] <nomagno> Even minor ones
[22:10:33] <nomagno> So after a while you'd need to recompile
[22:10:41] <rsjw> how do they manage to do that? there doesn't seem to be enough space to vary it each release
[22:10:46] <kurahaupo> nomagno: So you have to recompile all the userspace code?
[22:10:50] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:10:56] <sham1> Indeed
[22:10:58] <fizzie> kurahaupo: Hmm. AFAICT it was already in the Go 1 release (March 2012), and in C++ the init-statement is a C++17 feature, so at least in standards terms Go was there first. If it was preceded by a nonstandard extension in some C++ implementation, I don't know.
[22:12:34] <nomagno> Well, not that they change it
[22:12:49] <nomagno> Rather they explicitly don't care about stability
[22:12:57] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[22:14:38] *** Joins: johnjaye (~pi@154.6.152.74)
[22:15:19] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[22:15:38] <rsjw> doesn't sound like a security feature though
[22:18:13] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[22:18:37] *** Joins: strajder (~strajder@user/strajder)
[22:19:32] <sham1> Probably not deliberately, but if it improves security, might as well since that's OpenBSD's MO
[22:19:54] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[22:20:53] <rsjw> I don't think it would improve security. the ABI just says how executable programs interact. if you change the ABI you're just changing how they interact. security has nothing to do with it
[22:21:33] <rsjw> there's no enforcement for an ABI, it's all convention
[22:21:53] *** Joins: Torr (~Torr@user/torr)
[22:22:03] *** Joins: crankslider (~slidercra@user/slidercrank)
[22:22:08] <sham1> Well OpenBSD does enforce its decisions quite a bit. I mean you can't even do system calls if you're not the libc. A deliberate security thing
[22:22:23] *** Joins: Leonard (~Administr@114.55.127.80)
[22:22:35] <rsjw> how would openbsd know if you're libc? it's all in one process image
[22:23:02] <rsjw> well unless you use shared libc I guess
[22:23:17] <sham1> When it's dynamically linked, it can mark the libc's pages as being libc, so it knows that if the call came from something else, it's not gucci
[22:23:31] <sham1> And it just murders your process
[22:24:36] <rsjw> do you have a reference that claims openbsd does this? I'd like to read more about it
[22:24:51] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:25:21] <sham1> https://lwn.net/Articles/806776/
[22:25:23] <candide> Title of sham1's link: OpenBSD system-call-origin verification [LWN.net]
[22:25:35] <rsjw> thanks
[22:26:40] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[22:26:57] *** Joins: tejr (~tejr@user/tejr)
[22:27:22] *** Joins: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl)
[22:27:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[22:28:46] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Quit: imp)
[22:29:07] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[22:31:27] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[22:33:11] <cherrry9> which calling convention uses gcc? I thought cdecl but I checked the assembly and it passes them by registers so I'm not longer sure
[22:33:22] *** Quits: pucara (~i@host230.186-125-94.telecom.net.ar) (Quit: Lost terminal)
[22:33:35] <sham1> cherrry9: depends on the architecture
[22:33:39] *** Joins: johnjaye (~pi@154.6.152.74)
[22:33:48] <cherrry9> im on x86_64
[22:34:23] <sham1> So no. It's not cdecl. It's this: https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI
[22:35:08] <sham1> Could also be the above one, "Microsoft x64 calling convention" but that's obviously if you're on Windows or EFI or whatever
[22:35:22] <cherrry9> okay, thanks!
[22:35:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:36:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[22:37:44] *** Quits: WAR10CK (~WAR10CK@14.223.181.231) (Remote host closed the connection)
[22:38:36] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 256 seconds)
[22:38:49] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[22:41:51] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[22:42:24] *** Joins: j-james (~apropos@97-113-119-73.tukw.qwest.net)
[22:42:25] *** Joins: johnjaye (~pi@154.6.152.74)
[22:42:25] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[22:43:14] *** Quits: j-james (~apropos@97-113-119-73.tukw.qwest.net) (Client Quit)
[22:46:37] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:47:25] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[22:48:06] *** Joins: ferdna (~ferdna@user/ferdna)
[22:48:21] *** Joins: echoSMILE (uid504326@user/echosmile)
[22:49:39] *** Joins: johnjaye (~pi@154.6.152.74)
[22:51:38] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[22:52:46] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:54:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:54:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:55:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:56:40] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:57:58] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[22:58:30] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:58:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:59:31] *** Quits: coodre (~no@160.178.2.5) (Remote host closed the connection)
[22:59:37] <rsjw> sham1: :( looks terrible for assembly programming
[22:59:48] *** Joins: coodre (~no@160.178.2.5)
[23:01:32] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:01:40] <sham1> rsjw: yes
[23:01:59] *** Joins: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it)
[23:04:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:09:02] *** Joins: Leonard (~Administr@114.55.127.80)
[23:09:28] *** Quits: coodre (~no@160.178.2.5) (Remote host closed the connection)
[23:09:48] *** Joins: coodre (~no@160.178.2.5)
[23:10:54] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:11:54] <sham1> But it's for security, so that's the flipside. And of course with assembly you can still call the libc functions that do the syscall stuff
[23:16:22] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[23:16:30] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[23:17:17] *** Quits: __dev (~sys@user/dev/x-7984917) (Ping timeout: 240 seconds)
[23:18:00] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Remote host closed the connection)
[23:20:38] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[23:22:07] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:22:48] *** Quits: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[23:24:11] *** Joins: remavas (~Remavas@user/remavas)
[23:24:44] *** Joins: ketiv (~ketiv@92.40.194.78.threembb.co.uk)
[23:28:50] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:29:47] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[23:30:10] *** Quits: rsjw (~quassel@user/rsjw) (Ping timeout: 256 seconds)
[23:33:25] *** Quits: iomari891 (~iomari891@197.210.85.157) (Ping timeout: 256 seconds)
[23:34:08] *** Quits: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[23:34:28] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:35:22] *** Joins: Jeaton (~hybrid@user/Jeaton)
[23:36:20] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[23:37:40] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[23:38:35] *** Joins: iomari891 (~iomari891@105.112.138.38)
[23:39:04] *** Joins: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl)
[23:39:48] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 256 seconds)
[23:42:57] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:43:40] *** Joins: rgrinberg (~textual@187.223.248.37)
[23:48:18] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
[23:48:37] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[23:48:55] *** Joins: Macuser (~Macuser@2600:1003:b447:1ed2:7489:9969:d4b9:7234)
[23:50:31] *** Quits: remavas (~Remavas@user/remavas) (Quit: WeeChat 2.8)
[23:50:59] *** Joins: iomari891 (~iomari891@197.210.79.39)
[23:51:07] *** Joins: rgrinberg (~textual@187.223.248.37)
[23:53:18] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[23:55:01] *** Joins: node1 (~hex@user/node1)
[23:55:08] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[23:55:28] <node1> Does anyone know any project which has disk based index database implementation  (Btree)  in C language ?
[23:56:50] *** Quits: rgrinberg (~textual@187.223.248.37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:58:31] <sham1> Sounds like something Postgresql might do
[23:59:12] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[23:59:34] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
