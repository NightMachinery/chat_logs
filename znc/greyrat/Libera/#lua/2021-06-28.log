[00:01:03] *** Quits: sagax (~sagax@213.138.71.146) (Remote host closed the connection)
[00:13:56] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 272 seconds)
[00:18:00] *** Joins: mikess (~sam@user/mikess)
[00:51:01] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:28cd:1f19:2a74:178b) (Quit: Leaving)
[01:19:06] <Tricycle> I've been told putting lots of words in a list, then concatenating once at the end, is better than repeated .. ?
[01:21:40] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-22.prtc.net)
[01:22:17] <nmz> I did a benchmark, table.concat almost always wins
[02:00:42] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-22.prtc.net) (Quit: Client closed)
[02:34:15] *** Quits: aquijoule_ (~richbridg@213-225-5-235.nat.highway.a1.net) (Remote host closed the connection)
[02:45:26] *** Quits: magla (~gelignite@55d41c60.access.ecotel.net) (Quit: Stay safe!)
[02:52:39] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-4c6d-f742-f661-daa3.res6.spectrum.com) (Read error: Connection reset by peer)
[02:57:44] *** Quits: fcr (~fran@r167-60-107-113.dialup.adsl.anteldata.net.uy) (Ping timeout: 268 seconds)
[02:59:37] *** Joins: fcr (~fran@r186-48-6-208.dialup.adsl.anteldata.net.uy)
[03:29:42] *** Joins: richbridger (~richbridg@213-225-5-235.nat.highway.a1.net)
[03:48:37] *** Quits: richbridger (~richbridg@213-225-5-235.nat.highway.a1.net) (Remote host closed the connection)
[03:48:41] * caoliver thinks that table.concat will be O(n log n) where as individual cats will be O(n^2).
[03:50:29] <caoliver> Isn't table.concat repeated pairwise cats.  (same soft of iteration as a merge sort)
[03:50:37] <caoliver> s/soft/sort/
[03:53:11] *** Joins: richbridger (~richbridg@213-225-5-235.nat.highway.a1.net)
[04:02:23] *** Quits: Tricycle (~CGI273@lfbn-idf1-1-1830-41.w90-91.abo.wanadoo.fr) (Quit: bye)
[04:07:44] <RhodiumToad> table.concat is more like O(N)
[04:08:45] <RhodiumToad> and individual cats are merged when possible:  a .. b .. c  is processed as one operation as long as all the inputs are strings or numbers
[04:09:52] <RhodiumToad> in both cases, the code does one pass to get the string length of all values, then builds the string in one go
[04:10:30] <RhodiumToad> the thing _not_ to do is  s = s .. a   in a loop
[04:10:42] <RhodiumToad> because then you're interning a new string on every iteration
[04:12:31] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:27:40] *** Joins: easbarbosa (~user@2804:1b2:83:7e91:ede2:b968:f6f5:77ad)
[04:41:20] *** Quits: ratchet_freak (~ratchetfr@ptr-82s3g7l9r42569r41f4.18120a2.ip6.access.telenet.be) (Ping timeout: 268 seconds)
[04:45:29] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[04:52:57] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:c51e:2204:5b0e:2468) (Quit: Textual IRC Client: www.textualapp.com)
[05:12:38] *** Quits: ard (~ard@2001:984:74c7:1:21e:6ff:feff:ff03) (Ping timeout: 272 seconds)
[05:21:19] *** Joins: ard (~ard@2001:984:74c7:1:21e:6ff:feff:ff03)
[05:27:35] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 268 seconds)
[05:54:40] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[06:31:36] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[06:44:34] *** Joins: ratchetfreak (~ratchetfr@d51a4beaf.access.telenet.be)
[06:47:53] *** Quits: ratchetfreak (~ratchetfr@d51a4beaf.access.telenet.be) (Read error: Connection reset by peer)
[07:09:04] *** Joins: aquijoule_ (~richbridg@213-225-32-103.nat.highway.a1.net)
[07:11:48] *** Quits: richbridger (~richbridg@213-225-5-235.nat.highway.a1.net) (Ping timeout: 268 seconds)
[07:25:42] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[07:27:25] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:47:00] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[07:57:32] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 272 seconds)
[08:07:07] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[08:17:17] *** Joins: dmalteseknight (~dmaltesek@user/dmalteseknight)
[08:31:44] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 272 seconds)
[08:40:43] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:4508:678:2ade:48c3)
[08:44:37] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:4508:678:2ade:48c3) (Client Quit)
[08:47:08] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:e424:4bc6:3ed8:741a)
[09:13:38] <caoliver> RhodiumToad, aside from interning, you are making another pass.  That should be O(n^2) cumulatively.
[09:14:25] <caoliver> It's been a while since I read concat, and I likely misremembered.
[09:17:16] <caoliver> The last I dealt with big string concat was when I was doing the serializer.  I wanted something like Lua's buffers, but it needed to cope with stack manipulation, so I put things in a table at a fixed position, and catted the result on exit.
[09:18:22] <caoliver> luaL_Buffers don't behave at all, if you need the stack to walk a another structure.
[09:27:28] <caoliver> I was thinking of luaL_Buffers, not table.concat.  Reading my code, I actually use concat for my reduction.
[09:27:51] *** Joins: tertu (~tertu@67-220-7-211.fttp.usinternet.com)
[09:28:37] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:35:07] *** Quits: StephenLynx (~StephenLy@2804:1054:301f:1470::e93) (Quit: Leaving)
[09:42:18] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-18.prtc.net)
[09:42:29] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-18.prtc.net) (Write error: Broken pipe)
[09:45:44] *** Quits: tertu (~tertu@67-220-7-211.fttp.usinternet.com) (Ping timeout: 252 seconds)
[09:48:56] *** Joins: netlynx (~me@94-226-69-15.access.telenet.be)
[10:17:11] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[10:18:42] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[10:25:28] *** Joins: Elw3 (~Elw3@dynamic-046-114-169-080.46.114.pool.telefonica.de)
[10:56:45] *** Joins: magla (~gelignite@55d471c8.access.ecotel.net)
[10:59:24] *** Joins: dvx (~dvx@185.63.97.64)
[11:08:48] *** Quits: milosz (~milosz@user/milosz) (Read error: Connection reset by peer)
[11:11:59] *** Joins: milosz (~milosz@user/milosz)
[11:31:40] *** Joins: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr)
[11:42:29] *** Joins: fcr_ (~fran@r186-48-122-102.dialup.adsl.anteldata.net.uy)
[11:46:10] *** Quits: fcr (~fran@r186-48-6-208.dialup.adsl.anteldata.net.uy) (Ping timeout: 272 seconds)
[11:46:10] *** fcr_ is now known as fcr
[12:01:35] *** Joins: diiirt (~diiirt@user/diiirt)
[12:01:38] *** Parts: diiirt (~diiirt@user/diiirt) (The Lounge - https://thelounge.chat)
[12:03:27] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:08:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[12:20:47] *** Joins: ratchetfreak (~ratchetfr@d51A4BEAF.access.telenet.be)
[12:39:48] *** Quits: easbarbosa (~user@2804:1b2:83:7e91:ede2:b968:f6f5:77ad) (Remote host closed the connection)
[12:56:57] *** Quits: magla (~gelignite@55d471c8.access.ecotel.net) (Quit: Stay safe!)
[14:28:44] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[14:42:01] *** Joins: entuland (~entuland@user/entuland)
[14:51:13] *** Quits: Elw3 (~Elw3@dynamic-046-114-169-080.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[15:05:50] *** Joins: skapata (~Skapata@user/skapata)
[15:32:38] *** Quits: ArRay_ (~ArRay_@user/array/x-1947090) (Remote host closed the connection)
[15:33:02] *** Joins: ArRay_ (~ArRay_@user/array/x-1947090)
[15:39:59] *** Joins: Elw3 (~Elw3@dynamic-046-114-155-001.46.114.pool.telefonica.de)
[15:41:47] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:08:10] *** Joins: StephenLynx (~StephenLy@2804:1054:301f:1470::e93)
[16:23:32] *** Joins: spine-o-saurus (~snake@2602:cf:767e:820c:1920:29ee:94f0:4162)
[16:40:52] <RhodiumToad> caoliver: no, two passes over N items is still O(N)
[16:58:06] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[17:02:54] *** Joins: entuland (~entuland@user/entuland)
[17:18:34] *** Quits: Elw3 (~Elw3@dynamic-046-114-155-001.46.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[17:21:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[17:21:52] <caoliver> RhodiumToad, I was referring to 'catting in a loop.  Assume you have a list of single char strings.  The loop behaves just like the worst case for insertion sort.
[17:21:55] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:22:56] <RhodiumToad> catting in a loop is O(N^2) in the final string length in bytes
[17:23:02] <RhodiumToad> er
[17:23:12] <caoliver> Yup.
[17:23:12] <RhodiumToad> assuming the input strings are equal length
[17:23:26] <caoliver> I'm thinking of worst case here.
[17:28:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[17:36:46] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:39:11] *** Quits: strast1 (~steve@rrcs-162-155-169-18.central.biz.rr.com) (Read error: Connection reset by peer)
[17:41:59] <caoliver> I'm reading table concat from 5.2, and it seems to use luaL_Buffers, and that works by doubling and copying on buffer exceeded (see luaL_prepbuffsize).  That will be n log n.
[17:43:45] *** Joins: strast (~steve@rrcs-162-155-169-18.central.biz.rr.com)
[17:44:59] <RhodiumToad> no
[17:45:21] <caoliver> What do you mean.  The code is on my screen now.
[17:45:22] <RhodiumToad> doubling buffer sizes is O(N)
[17:45:52] <caoliver> And you need to do it each time you exceed, and that's log n for sufficiently big n.
[17:46:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[17:46:43] <RhodiumToad> no
[17:46:55] <RhodiumToad> take the example of adding one character at a time
[17:47:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:47:17] <caoliver> Let's!  Assume you have a buffer size of four.
[17:47:23] <RhodiumToad> ok
[17:47:33] <RhodiumToad> so you add 4 characters for no overhead
[17:47:45] <RhodiumToad> adding character 5 has an overhead of copying 4 characters first
[17:47:58] <RhodiumToad> adding character 9 has an overhead of copying 8 characters
[17:48:07] <caoliver> Yes,
[17:48:17] <RhodiumToad> adding character 17 has an overhead of copying 16 characters
[17:48:34] <caoliver> Hang a sec.
[17:48:39] <RhodiumToad> the overhead doubles each time, but so does the number of characters added before the next overhead
[17:48:52] <RhodiumToad> when you average it all out, the overhead is constant per character
[17:49:33] <caoliver> Don't be condescending.  I may have misremembered my series, but let me think this through please.
[17:49:50] <RhodiumToad> and therefore the total cost is O(N), since it's amortized O(1) times N characters
[17:50:20] <caoliver> Let me think this through.  I HAVE had basic CS, and was a math guy, but I may be reasoning badly.
[17:54:27] <caoliver> Alright.  I was misremembering this.  It's a geometric series.  I see it.
[17:54:47] <caoliver> All right.
[17:56:16] *** Joins: daudc (~AdminUser@219.93.93.173)
[17:56:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[17:57:01] <RhodiumToad> the way I look at it is that although the overhead doubles each time, the number of characters also doubles, so the ratio between them averages out to constant
[17:57:42] <caoliver> If you see it as n + n/2 + n/4 ... the series is evident, and it's linear by high school algebra.
[17:57:53] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:58:52] <RhodiumToad> that works too
[18:01:34] <RhodiumToad> also it doesn't matter whether the size is being doubled, all that matters is that it's being increased by a multiplier > 1
[18:01:50] <caoliver> By the same logic.
[18:03:37] <caoliver> It does mean I should rewrite the reducer in my serializer.  That is O(n log n).  Log n passes over the whole buffer.  I could count the accumulated table, and use the same strategy (userdata as arbitrary memory).
[18:04:21] <caoliver> In general, there won't be much time difference unless you're reducing something huge.
[18:05:03] <caoliver> E.g. structure describing all the shared objects and their connections for a Linux system.
[18:07:18] <RhodiumToad> hmm
[18:07:29] <caoliver> I have fixed size buffer, and am reducing them k at a time, and repeating until a get to 1 buffer.  That will make log base k of the buffer count.
[18:07:40] <RhodiumToad> so tconcat is doing basically  for i = 1,#t
[18:08:03] <RhodiumToad> which seems ... inconsistent
[18:08:32] <RhodiumToad> hm, maybe not
[18:09:23] <caoliver> No.  I think you're right that the concat should be linear.  If I walk the table of buffers, I'll know how big a userdata to allocate.  Then reduce and convert to a string.
[18:09:55] <caoliver> The only optimization would be special cases for really small data.
[18:11:04] <caoliver> So in general:  fixed size accumulation buffer table -> userdata -> result string.
[18:12:44] <caoliver> Or just hang a userdata at the same fixed index that I kept the table.  That's closer to what luaL_Buffers is doing.
[18:13:05] <caoliver> Replace the userdata as needed.
[18:13:23] <caoliver> That will probably make my code nicer to read too.
[18:15:31] <caoliver> Now the fragmentation story is a whole 'nuther kettle of fish.
[18:16:57] * caoliver needs more coffee.  Here's hoping it speeds up the serializer a bit.  I'm already much faster than lua-marshal with one or two exceptions.
[18:17:29] <caoliver> At the same time, pretty much as compact as CBOR.  (I stole a lot of ideas from that.)
[18:19:04] <RhodiumToad> going from O(n log n) to O(n) rarely gives much speedup in practice.
[18:19:45] <RhodiumToad> over most values of n, the impact of the log(n) term is usually lower than that of constant factors which are not taken into account by O()
[18:20:02] <caoliver> Yup.  In my case the fixed buffers are 8K and they are reduced eight at a time, so it's pretty quick any how.
[18:21:03] <caoliver> I'd just not like to advertise too loudly that I wrote more complex code with a worse complexity.  ;-P
[18:21:32] <caoliver> More ego boost than performance boost.  ;-P
[18:21:47] *** Joins: dddccc__32 (~dddccc__3@219.93.93.173)
[18:21:55] <RhodiumToad> I mostly wish the luaL_Buffer interface weren't quite so error-prone
[18:22:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[18:22:26] <RhodiumToad> the change in 5.4.3 broke some existing modules
[18:22:28] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:24:35] <caoliver> Well, after this mod, I'll see it only behind the scenes via lua_pushlstring.
[18:25:46] <caoliver> That's one call with no intervening stack wizardry, so that should do fine.  How it benches will be interesting, but I really don't expect any change.
[18:28:23] <caoliver> And, as I said, the code should be far clearer.  It's basically the 5.2 lua buffer, but with the userdata at a fixed stack offset rather than the table I was using.
[18:29:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 268 seconds)
[18:30:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:36:06] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-d575-2704-820a-6f5d.res6.spectrum.com)
[18:42:08] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[18:43:47] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[18:44:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[18:44:46] *** Quits: daudc (~AdminUser@219.93.93.173) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:46:03] *** Gustavo6046_ is now known as Gustavo6046
[18:49:06] *** Quits: yalb (xsbot@user/mniip/bot/yalb) (Ping timeout: 240 seconds)
[18:55:11] *** Quits: mniip (mniip@libera/staff/mniip) (Quit: This page is intentionally left blank.)
[19:13:41] *** Joins: yalb (xsbot@user/mniip/bot/yalb)
[19:13:45] *** Joins: mniip (mniip@libera/staff/mniip)
[19:23:59] *** Quits: dmalteseknight (~dmaltesek@user/dmalteseknight) (Ping timeout: 265 seconds)
[19:39:02] *** Joins: monkey_ (~user@190.104.116.134)
[20:08:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[20:09:47] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[20:23:18] *** Joins: Elw3 (~Elw3@dynamic-046-114-169-112.46.114.pool.telefonica.de)
[20:24:04] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[20:25:27] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 268 seconds)
[20:29:46] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 268 seconds)
[20:30:04] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:7c4b:bad:bb8d:d4d1)
[20:40:04] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 272 seconds)
[20:45:39] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:49:08] *** Joins: Hanii_ (~textual@2a00:23c5:c587:6d00:2d39:ea75:4d3:29de)
[20:49:30] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:e424:4bc6:3ed8:741a) (Ping timeout: 268 seconds)
[20:50:52] *** Joins: kipras (~kipras@78-56-235-39.static.zebra.lt)
[20:54:09] *** Joins: reset (~reset@user/reset)
[20:54:49] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[20:59:49] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:04:51] *** Joins: tertu (~tertu@67-220-7-211.fttp.usinternet.com)
[21:08:18] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:09:56] *** Quits: rfuentess (~rfuentess@static-5-51-117-151.ftth.abo.bbox.fr) (Quit: where are the beers?!)
[21:12:56] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 268 seconds)
[21:16:23] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[21:19:34] *** Quits: spine-o-saurus (~snake@2602:cf:767e:820c:1920:29ee:94f0:4162) (Quit: Connection Terminated)
[21:21:18] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 252 seconds)
[21:28:21] *** Joins: magla (~gelignite@55d471c8.access.ecotel.net)
[21:28:52] *** Joins: mikess (~sam@user/mikess)
[21:30:56] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:37:19] *** Quits: tertu (~tertu@67-220-7-211.fttp.usinternet.com) (Ping timeout: 258 seconds)
[21:38:20] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 272 seconds)
[21:41:39] *** Joins: vnogueira (~vnogueira@user/vnogueira)
[21:43:27] *** Quits: kipras (~kipras@78-56-235-39.static.zebra.lt) (Ping timeout: 258 seconds)
[21:45:37] *** Quits: Elw3 (~Elw3@dynamic-046-114-169-112.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[21:53:45] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[22:04:44] *** Quits: ratchetfreak (~ratchetfr@d51A4BEAF.access.telenet.be) (Ping timeout: 268 seconds)
[22:06:18] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:07:44] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:08:39] *** Joins: kipras (~kipras@78-56-235-39.static.zebra.lt)
[22:19:30] *** Quits: kipras (~kipras@78-56-235-39.static.zebra.lt) (Ping timeout: 272 seconds)
[22:21:45] *** Quits: pizdets (~pizdets@183.182.114.175) (Ping timeout: 245 seconds)
[22:22:12] *** Joins: pizdets_ (~pizdets@183.182.114.102)
[22:30:38] *** Joins: mikess (~sam@user/mikess)
[22:30:59] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 256 seconds)
[22:39:04] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[22:40:02] *** Joins: ratchetfreak (~ratchetfr@ptr-82s3g7oocc0xjg24j6i.18120a2.ip6.access.telenet.be)
[22:42:27] <caoliver> RhodiumToad, sadly, it looks like the cost of allocating userdatas swamps the O() difference.
[22:42:44] <caoliver> Somehow, that seems odd to me.
[22:44:48] <caoliver> Maybe a luajit deficiency.  (Peace q66.  I know your view here.  I don't care.)
[22:46:51] <technomancy> lmao
[22:47:38] <svm_invictvs> I still don't know that I agree with the idea that it would be invalid for lua_tostring() to function in such a way that would mutate the stack value. That seems like it's an implementation detail and could be solved in a way that doesn't involve cumbersome memory management.
[22:47:50] <svm_invictvs> *wouldn't mutate
[22:48:42] <svm_invictvs> I feel that implementation of lua_tostring is almost a bug, at best it's a bad API. Literally every other lua_toX function does not mutate the stack and I feel like it shouldn't work that way at all.
[22:48:52] <caoliver> I suppose I can look at the bright side and know I don't have to push a bunch of updates to my serializer.
[22:49:46] <svm_invictvs> Why not have something like lua_tostringx that returns a freshly allocated string that you are responsible for deallocating later?
[22:50:18] <svm_invictvs> char* str = lua_tostring(index);  ... lua_free(str); 
[22:50:37] <caoliver> Perhaps a benchmark would be informative.
[22:51:06] <svm_invictvs> caoliver, What's going on?
[22:51:53] <caoliver> I mean that perhaps there was a practical reason lua_tostring was done as it is.
[22:52:05] <svm_invictvs> Memory management.
[22:52:41] <caoliver> Does the given solution cons up less garbage?
[22:53:39] <svm_invictvs> Well, the rationale is that the char* returned is memory managed by the Lua garbage collector.
[22:54:49] <svm_invictvs> int/long/double/void* etc. they can safely be returned on the stack because there's not memory management associated with that.
[22:55:09] <svm_invictvs> A string has to be a pointer to a string which means that the memory backing it has to be allocated.
[22:55:36] *** Quits: mikess (~sam@user/mikess) (Ping timeout: 272 seconds)
[22:55:41] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 265 seconds)
[22:55:44] <svm_invictvs> Java/JNI has a similar problem.
[22:55:59] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[22:56:18] * caoliver tries hard not to think about Java.
[22:56:19] <svm_invictvs> When you have a Java string in JNI you have to use a special call to get the bytes of it and the pointer is only valid for the frame. I think Java makes you actually tell the JVM that you're done with it.
[22:56:28] <svm_invictvs> caoliver, lol
[22:58:27] <svm_invictvs> It is a really common problem when just about any interpreted/managed language has to deal with the raw memory bits and pieces.
[22:58:50] <svm_invictvs> Unless of course you actually run your C/C++ app with a garbage collector.
[22:59:04] <technomancy> every single person I know who tried to use JNI ended up regretting it and wishing they had just shelled out
[22:59:16] <svm_invictvs> JNI is awful.
[22:59:18] <svm_invictvs> JNA is better.
[22:59:45] <technomancy> shelling out is even better =P
[23:00:12] <svm_invictvs> Depends. Performance may not be acceptable.
[23:00:35] <technomancy> if it's not acceptable you shouldn't be on the JVM to begin with
[23:00:57] <svm_invictvs> why not?
[23:01:09] <caoliver> technomancy, you can delete the condition in that last sentence.
[23:01:22] <svm_invictvs> heh
[23:01:36] * caoliver dreams of a world without Oracle or Microsoft.
[23:01:41] <svm_invictvs> lol
[23:01:59] <technomancy> don't 100% agree but I'm not gonna defend it =)
[23:02:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:02:16] <caoliver> Not that I have particular love for Apple.
[23:02:22] <technomancy> we use the jvm at work and it's saved us from golang
[23:05:26] * caoliver needs to eat something.
[23:08:57] *** Quits: fcr (~fran@r186-48-122-102.dialup.adsl.anteldata.net.uy) (Read error: Connection reset by peer)
[23:09:33] *** Joins: fcr (~fran@r167-60-117-95.dialup.adsl.anteldata.net.uy)
[23:10:49] <svm_invictvs> Yeah I tried go and I wasn't a fan
[23:15:25] <technomancy> I actually ported a bunch of code from golang to lua using shopify's golang lua implementation just as a form of therapy after dealing with golang's awful bullshit
[23:15:43] <technomancy> it was a 40% code reduction
[23:15:52] <technomancy> I never merged it but it felt so good to do just to prove a point
[23:20:23] <caoliver> The thing about Lua is there's just enough Scheme-ishness to keep me from throwing things.
[23:21:14] <caoliver> Otherwise it's like trying to use a normal calculator if you have an RPN shaped brain.
[23:21:39] <technomancy> statements are a drag, but ... you learn to deal with it
[23:22:41] * caoliver doesn't understand why so many have trouble with Cambridge Polish notation.
[23:22:48] <caoliver> Parens are good for you.
[23:24:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[23:25:00] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:26:44] *** Joins: mikess (~sam@user/mikess)
[23:54:23] *** Joins: fcr_ (~fran@r167-60-22-102.dialup.adsl.anteldata.net.uy)
[23:58:02] *** Quits: fcr (~fran@r167-60-117-95.dialup.adsl.anteldata.net.uy) (Ping timeout: 250 seconds)
[23:58:03] *** fcr_ is now known as fcr
