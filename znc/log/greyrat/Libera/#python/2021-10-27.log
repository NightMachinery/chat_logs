[00:00:18] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[00:00:22] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:484a:3bc5:dcb7:17e7)
[00:00:24] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:00:54] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[00:01:45] *** Joins: xa0s (xa0s@sdf.org)
[00:05:11] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[00:07:03] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[00:08:12] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Read error: Connection reset by peer)
[00:08:13] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:08:43] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[00:08:49] <ledtc> jim87 Cannot you require a system variable to be exported/set before running the application ?
[00:08:59] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-08a2-bff1-0197-0a0b.res6.spectrum.com)
[00:09:27] *** Quits: xa0s (xa0s@sdf.org) (Quit: leaving)
[00:10:24] <ledtc> export STORAGE_PATH = /mnt/x
[00:10:46] *** Joins: parv (~quass@user/parv)
[00:11:12] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[00:12:11] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 244 seconds)
[00:13:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[00:13:41] <nedbat> jim87: i don't know how packagers typically affect the code they package
[00:14:23] *** Quits: magla (~gelignite@55d4747b.access.ecotel.net) (Quit: Stay safe!)
[00:14:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:15:13] *** Joins: fikran (~fikran@user/fikran)
[00:15:57] *** Quits: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se) (Ping timeout: 256 seconds)
[00:17:16] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 258 seconds)
[00:17:22] *** Joins: cdown (~cdown@89.32.122.5)
[00:18:32] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[00:19:12] <weibullguy> jim87: could you satisfy your requirement with a config file your app parses on startup? each packager could set the system-wide variables as appropriate?
[00:19:46] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[00:19:59] *** Joins: Karyon (~Karyon@user/karyon)
[00:20:54] <jim87> weibullguy: where should that config file reside, system-wise? It could be in /etc/myapp.conf, or /usr/local/etc/myapp.conf etc
[00:22:12] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[00:22:20] <weibullguy> jim87: /etc or /usr/local/etc would be standard locations.  Possible /usr/share.  You could extend the functionality to allow a user-specific config file too.
[00:22:35] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:22:54] <weibullguy> I guess it would be $PREFIX/share generically
[00:23:23] <jim87> weibullguy: yup, but PREFIX is not defined runtime, that's the point :D
[00:24:47] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:26:16] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[00:26:18] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[00:26:18] <jim87> maybe I'd search for my settings.cfg in commonPrefixes: List[str] and eventually override the list with one passed via arguments?
[00:27:03] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[00:27:11] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[00:27:24] *** Joins: Karyon (~Karyon@user/karyon)
[00:27:39] *** lukedashjr is now known as luke-jr
[00:27:49] <weibullguy> jim87: you can determine install prefix at runtime
[00:28:01] *** Quits: shad (~shad@user/shad) (Ping timeout: 245 seconds)
[00:28:22] <jim87> weibullguy: you mean by Path(dirname(__file__)).parent.absolute()?
[00:28:52] <summonner> er. you'd keep the default config with the package in the site-packages folder, and override whatever is found in the CWD or specified by an option with argparse or similar
[00:28:52] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:29:34] <jim87> summonner: the idea is to program a daemon which should run system-wide, and be configurable via a config file, typically in an etc folder
[00:29:37] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[00:31:49] <summonner> jim87, you run linux atm?
[00:32:19] <jim87> summonner: yup
[00:32:39] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[00:33:14] <summonner> ps -ef | grep py    will give you a list of current py apps running in that fashion... you can read them to get ideas
[00:33:28] <jim87> thanks, good idea :)
[00:34:23] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:34:23] <summonner> if nothing there helps, rednotebook  is an app, like a daily journal, written in python, and it does its config etc pretty well
[00:34:31] <jim87> there's actually firewalld running on, strange enough is the only daemon running in python :D
[00:37:15] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 260 seconds)
[00:37:19] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[00:37:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[00:37:21] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[00:37:32] *** Joins: Karyon (~Karyon@user/karyon)
[00:41:34] <akinode> hello, anyone here have an idea how i could possibly solve this problem? https://stackoverflow.com/questions/69723316/catching-a-function-call-of-a-subprocess-in-python-and-making-adjustments-before
[00:41:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[00:42:01] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[00:42:21] *** Parts: mcon (~Thunderbi@host-79-55-229-50.retail.telecomitalia.it) ()
[00:43:45] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[00:43:51] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 260 seconds)
[00:45:52] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[00:45:55] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[00:46:13] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[00:46:32] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[00:47:10] <NoImNotNineVolt> so, i think aws codebuild changed their environments somehow... https://bpa.st/IQ5Q
[00:47:30] <NoImNotNineVolt> i used to be able to run `sam --version` (from aws-sam-cli)
[00:47:49] <NoImNotNineVolt> now when i do that, i get the message seen in the linked paste.
[00:47:50] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:484a:3bc5:dcb7:17e7) (Quit: Client closed)
[00:47:55] <NoImNotNineVolt> i changed nothing on my end.
[00:49:26] *** Joins: whatsupdoc (~whatsupdo@50.239.106.202)
[00:49:37] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[00:52:00] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 265 seconds)
[00:52:29] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 244 seconds)
[00:53:16] *** Quits: blindguard (~blindguar@aftr-37-201-193-251.unity-media.net) (Quit: Konversation terminated!)
[00:53:30] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[00:53:39] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[00:54:19] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:484a:3bc5:dcb7:17e7)
[00:55:28] *** Quits: qlixed (~qlixed@181.44.129.13) (Remote host closed the connection)
[00:55:39] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:55:59] *** Quits: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl) (Ping timeout: 260 seconds)
[00:56:30] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[00:56:44] *** Joins: alkino (~quassel@user/alkino)
[00:56:55] *** Quits: grooverman (~grooverma@177.95.12.14) (Read error: Connection reset by peer)
[00:58:23] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:484a:3bc5:dcb7:17e7) (Client Quit)
[00:58:27] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[00:58:43] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[00:59:06] <jfcaron> Is there a good summary somewhere of the important changes between python major versions (not 2->3, but like 3.4->3.5) other than just reading the whole changelog?
[00:59:45] <KirkMcDonald> Each "What's New" document starts with a summary.
[00:59:51] <KirkMcDonald> https://docs.python.org/3/whatsnew/3.10.html
[00:59:55] <jfcaron> The 3.5 changelog is 49k words.
[00:59:56] <jfcaron> Ah
[01:00:09] *** Quits: whatsupdoc (~whatsupdo@50.239.106.202) (Ping timeout: 256 seconds)
[01:00:32] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[01:00:58] <jfcaron> thanks
[01:01:23] *** Joins: whatsupdoc (~whatsupdo@50.239.106.202)
[01:05:08] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:05:46] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:06:43] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[01:07:28] *** Quits: akinode (~akinode@2a02:908:1394:cce0:9554:3ae9:34d3:bbd0) (Quit: Client closed)
[01:07:37] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[01:07:42] *** Joins: goldfish (~goldfish@user/goldfish)
[01:08:44] *** Joins: neotod (~manjaro-u@95.85.66.41)
[01:08:49] *** lukedashjr is now known as luke-jr
[01:08:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:09:02] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:09:41] *** Quits: neotod (~manjaro-u@95.85.66.41) (Client Quit)
[01:09:45] *** Joins: zerothule (~eric@2601:602:8d80:4e50:818d:c31c:21ae:145d)
[01:10:48] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Quit: Client closed)
[01:10:55] *** Leonarbro_ is now known as Leonarbro
[01:11:01] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[01:12:19] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[01:12:38] *** Quits: brentaarnold (~brentaarn@32.132.115.46) (Ping timeout: 260 seconds)
[01:13:21] *** Joins: brentaarnold (~brentaarn@32.132.115.46)
[01:13:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[01:15:18] <NoImNotNineVolt> aws-sam-cli 1.34.0 released 2 hours ago and looks broken for me.
[01:15:23] *** Quits: ubert (~Thunderbi@178.115.36.180.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[01:18:17] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[01:21:38] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:24:01] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:25:08] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[01:27:46] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 265 seconds)
[01:27:49] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[01:30:39] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:30:57] *** Joins: PixelRobot (~PixelRobo@139.47.80.69)
[01:31:08] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[01:31:54] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[01:32:09] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Quit: junktext)
[01:33:16] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[01:35:06] *** Quits: Cyp (~cyp@213.237.87.7) (Ping timeout: 245 seconds)
[01:35:30] *** Joins: Karyon (~Karyon@user/karyon)
[01:35:42] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[01:35:56] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[01:36:27] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[01:36:48] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[01:36:57] *** Joins: dre (~dre@120.156.30.159)
[01:36:59] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[01:37:19] *** Joins: sbrown (~sbrown@66.44.16.44)
[01:38:24] *** Quits: sbrown (~sbrown@66.44.16.44) (Remote host closed the connection)
[01:38:25] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[01:39:55] *** Joins: noarb (~noarb@user/noarb)
[01:40:24] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[01:40:29] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[01:40:35] *** Quits: emf (~emf@2620:10d:c090:400::5:b46d) (Ping timeout: 264 seconds)
[01:41:11] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 264 seconds)
[01:41:15] *** Quits: ofou (~ofou@181.160.189.119) (Quit: WeeChat 3.3)
[01:42:16] *** Joins: emf (~emf@2620:10d:c091:480::1:1c3a)
[01:43:31] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:46:35] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 258 seconds)
[01:46:51] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 260 seconds)
[01:47:43] *** Quits: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net) (Quit: Leaving)
[01:50:06] *** Joins: Nspace (~Nspace@user/nspace)
[01:50:07] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[01:51:06] *** justHaunt is now known as justache
[01:52:38] *** Joins: millido (~millido@84.210.150.128)
[01:52:51] <aphysically> * unpacking for constructing subprocess commands is sooooo useful; makes everything much easier to read
[01:53:57] *** Joins: akoana (~ah@user/akoana)
[01:54:04] <jfcaron> For a python version e.g. 3.7.2, '3' is the major version, '7' is the minor version, what's the '2' part called?
[01:54:09] *** Quits: sfields (~sfields@2603-8090-1605-d7f3-6001-f576-91fc-2e1b.res6.spectrum.com) (Quit: Leaving)
[01:54:20] <mefistofeles> new born version
[01:54:23] <mefistofeles> just jk, no idea
[01:55:07] <InPhase> jfcaron: patch version
[01:55:22] <mefistofeles> I guess it's called patch
[01:55:25] <mefistofeles> yes, what InPhase said
[01:55:26] <mefistofeles> https://semver.org/
[01:55:32] <jfcaron> ty
[01:56:10] <jfcaron> foetal version
[01:56:24] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-08a2-bff1-0197-0a0b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:56:46] *** Quits: emf (~emf@2620:10d:c091:480::1:1c3a) (Ping timeout: 245 seconds)
[01:58:03] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Ping timeout: 260 seconds)
[01:58:20] *** Quits: orbatos (~orbatos@user/orbatos) (Ping timeout: 260 seconds)
[01:58:31] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 260 seconds)
[01:59:07] <InPhase> One of the fatal flaws of semantic versioning is how quickly a bug fix becomes someone else's "incompatible API change".
[01:59:08] *** Joins: emf (~emf@2620:10d:c090:400::5:5ca4)
[01:59:19] <nedbat> jfcaron: Python calls it micro:  print(sys.version_info) -->  sys.version_info(major=3, minor=10, micro=0, releaselevel='final', serial=0)
[01:59:20] *** Joins: Naan (~naan@user/naan)
[02:00:11] <InPhase> It's a nice concept, but the real world guarantees are not as strong as the declaration.
[02:00:34] <jfcaron> Thanks Ned.
[02:01:16] <jfcaron> At least we don't use obscure animal names or Californian surf spots as version tags.
[02:02:12] *** Quits: Akuli (~Akuli@213.216.210.136) (Quit: Leaving)
[02:02:27] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[02:02:58] *** Quits: mort (~mort@188.166.114.29) (Quit: Ping timeout (120 seconds))
[02:02:59] *** Quits: rgp (~rgp@user/rgp) (Quit: Ping timeout (120 seconds))
[02:03:01] *** Quits: Russell (russell@bnc4free/staff/russell) (Excess Flood)
[02:03:03] *** Joins: neotod (~manjaro-u@95.85.66.41)
[02:03:04] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[02:03:28] *** Joins: Russell (russell@bnc4free/staff/russell)
[02:03:29] *** Joins: jackblasted (~quassel@193.19.109.44)
[02:03:34] *** Joins: rgp (~rgp@user/rgp)
[02:03:37] *** Joins: mort (~mort@188.166.114.29)
[02:03:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 245 seconds)
[02:04:31] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[02:06:03] *** Joins: sideeffex5613 (~sideeffex@user/sideeffex)
[02:06:27] <nedbat> hmm, they left, but i was going to mention that my work project uses alphabetical tree names: Aspen .. Maple.  But at least we don't also have numbers that we sometimes confusingly use, like the animal names and surf spots.
[02:07:03] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:484a:3bc5:dcb7:17e7)
[02:10:35] *** Joins: heckler (~user@104-6-39-156.lightspeed.austtx.sbcglobal.net)
[02:11:02] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[02:12:54] *** Joins: orbatos (~orbatos@user/orbatos)
[02:13:55] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:5bb3:c8db:2d88:d225) (Ping timeout: 260 seconds)
[02:14:14] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 260 seconds)
[02:15:27] *** Joins: srilyk (~wayne@user/waynew)
[02:15:59] *** Quits: jackblasted (~quassel@193.19.109.44) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:16:05] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[02:16:07] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[02:16:22] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:16:52] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 258 seconds)
[02:17:49] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Quit: Client closed)
[02:18:31] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 265 seconds)
[02:19:16] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[02:20:15] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[02:20:59] *** Quits: neotod (~manjaro-u@95.85.66.41) (Quit: Konversation terminated!)
[02:22:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[02:22:53] *** Joins: bloodninja123 (~bloodninj@user/bloodninja)
[02:23:19] *** Joins: noarb (~noarb@user/noarb)
[02:24:34] *** Joins: fikran (~fikran@user/fikran)
[02:25:28] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:26:25] *** Joins: Bakunin (~Lindis@user/lindis)
[02:26:59] *** Quits: bloodninja (~bloodninj@user/bloodninja) (Ping timeout: 260 seconds)
[02:28:44] *** Joins: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net)
[02:28:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:30:00] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-08a2-bff1-0197-0a0b.res6.spectrum.com)
[02:31:26] *** Quits: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de) (Quit: jonaskabrink)
[02:32:09] *** Quits: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28) (Quit: Konversation terminated!)
[02:32:37] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-9d27-c755-80ea-123e.res6.spectrum.com) (Quit: jarthur)
[02:33:14] *** Quits: aztec (~Felipe@2804:2238:7c4:5300:78df:22bd:1a71:34af) (Quit: Leaving)
[02:33:50] *** Quits: hemstock (~hemstock@68.71.244.6) ()
[02:37:03] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:37:30] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[02:37:49] *** Quits: Strom (strom@fedora/strom) ()
[02:38:19] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[02:38:39] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:39:17] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[02:39:18] *** Joins: noarb- (~noarb@user/noarb)
[02:39:49] <hrob> im trying to wrap my head around this syntax... self.foo = foo or []
[02:40:03] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 260 seconds)
[02:40:27] *** Joins: Strom (strom@fedora/strom)
[02:40:34] <nedbat> hrob: "or" evaluates to its left-hand side if that value is truish.  If the left-hand side is falsish, it returns the right-hand side.
[02:41:12] <nedbat> hrob: that line is like writing:  self.foo = ([] if foo is None else foo)
[02:41:40] <moonmoon> more like self.foo = ([] if not foo else foo)
[02:42:09] <hrob> nedbat thanks!   a shorthand for the this one   a = b if b else c
[02:42:24] <nedbat> hrob:
[02:42:29] <nedbat> yes
[02:43:06] <hrob> I keep seeing new thing in python.... is this relatively new syntax... well I can try it on 2.7
[02:43:41] <hrob> okeibb... its 2.7 syntax too lol
[02:44:08] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Ping timeout: 265 seconds)
[02:44:58] <hrob> does anyone worry that python is getting too expressive lol
[02:45:33] <mefistofeles> hrob: how so?
[02:46:06] <mefistofeles> I do worry that python can get bloated, if it isn't already
[02:46:07] <hrob> mefistofeles  more than 2 ways of doing one line conditional assignment like this
[02:46:19] <mefistofeles> ah yes, the zen of python is long gone xD
[02:46:31] <mefistofeles> but I don't think the zen of python is realistic
[02:46:52] <mefistofeles> things are really complex and messy in the real world :P
[02:47:00] <matsaman> like python =P
[02:47:01] <hrob> it doesnt harm to have such handy options like this,  but then you have to remember all the variations
[02:47:23] *** Joins: phao (~phao@2804:d45:8e7a:de00:747d:158d:3c76:9f7c)
[02:47:45] <hrob> I think other languages like go, try to avoid too many variations of the same thing
[02:47:59] <mefistofeles> yes
[02:48:08] *** Joins: nomic (~nomic@185.198.243.251)
[02:48:29] *** Joins: Fiji (~Fiji@user/fiji)
[02:48:33] <nedbat> hrob: i wonder if that will still be true when go is 30 years old?
[02:48:46] *** Quits: wender (~Wender@189.41.235.114) (Ping timeout: 260 seconds)
[02:48:52] <matsaman> go is much newer, it's a tough comparison
[02:48:56] <mefistofeles> nedbat: they are getting generics now :P
[02:49:07] <matsaman> both because it's newer than python, and newer in the history of time
[02:50:19] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[02:50:49] <hrob> yup,  python did really good considering - and then its a matter of taste
[02:51:21] <mefistofeles> yes, one doesn't exclude the other, so, the more the merrier :P
[02:51:44] *** Joins: Wulf (~Wulf@user/wulf)
[02:52:00] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Ping timeout: 260 seconds)
[02:52:10] *** Quits: phao (~phao@2804:d45:8e7a:de00:747d:158d:3c76:9f7c) (Quit: Leaving)
[02:52:33] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (Read error: Connection reset by peer)
[02:52:36] <hrob> thankfully python doesnt aim to bloat, takes big steps to change syntax.
[02:53:12] <hrob> I suspect C++ 14  still supports oldest C++ syntax
[02:53:34] *** Quits: qpdb (~qpdb@user/qpdb) (Quit: WeeChat 3.1)
[02:53:50] <hrob> wow there is C++ 20 now lol
[02:55:04] <nedbat> hrob: get with the times! https://en.wikipedia.org/wiki/C%2B%2B23
[02:55:21] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:56:37] <parv> hrob, Wait till you see "structural pattern matching" -- personally have no issue
[02:56:52] <hrob> nedbat lol, time to go back to C++   its moving fast --  I like the smart pointers they brought in at some point.
[02:56:53] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Ping timeout: 256 seconds)
[02:58:07] <grym> mefistofeles: the thing about zen is, it is like a finger pointing at the moon
[02:58:15] <hrob> perv  looking it up  3.10 feature
[02:58:26] <parv> funny
[02:59:26] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:59:39] <parv> ... got the pronunciation right however
[03:00:33] <Swayze> https://rushter.com/blog/python-code-isolation/ On code isolation in Python
[03:00:39] <Swayze> nice readings
[03:01:07] <hrob> parv  I meant parv not perv  a little dyslexic here
[03:01:41] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[03:01:49] *** Joins: waynew (~wayne@user/waynew)
[03:02:39] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:03:00] <hrob> I mix up letters reading and writing ... perv seemed like a word but parv not lol
[03:03:13] <parv> hrob, :-)
[03:03:19] *** Joins: mickey8 (~user@user/mickey)
[03:04:52] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[03:05:11] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 264 seconds)
[03:05:56] <altendky> any pylint users that use it with the `socket` module such as for `AddressFamily` and `SocketKind`?  i get a no-member error.  there's https://github.com/PyCQA/pylint/issues/4798.  just curious if anyone else has a more authoritative answer on this than my bit of searching so far.  i admittedly don't super care about pylint, but figured i'd ask.
[03:08:45] *** Joins: rany_ (~rany@user/rany)
[03:08:47] <hrob> altendky  Im no expert on sockets,  Im wondering if some init is missing - also is it not necessary to put the code into a test_something() function
[03:08:55] <whatsupdoc> anyone wanna spend like an hour explaining this code to me lol? https://dpaste.org/TBm4
[03:09:07] <altendky> hrob: the issue is with pylint, not running the code
[03:09:20] <hrob> ah sorry pylint... I read pytest
[03:09:23] <hrob> sorry lol
[03:09:26] <altendky> heh :]
[03:09:38] <altendky> thanks for taking the time
[03:09:41] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:09:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:09:49] *** Quits: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[03:10:03] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[03:10:25] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 2.9)
[03:10:48] <hrob> altendky I'll try it
[03:11:11] *** Joins: drewlander (~drewlande@173-80-249-48.bklycmtk03.res.dyn.suddenlink.net)
[03:11:33] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:12:25] <altendky> hrob: the issue comments that there may be some variance in how the package is built or distributed.  perhaps static vs. dynamic linking?  i dunno.  neither my system nor my pyenv pythons work.  but, i specifically make my pyenvs build dynamic (iirc).
[03:12:35] <whatsupdoc> self.game.queries.append(self.handle)
[03:12:39] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 265 seconds)
[03:12:41] <whatsupdoc> What's the point of appending handle?
[03:13:40] <hrob> altendky  I get no error with vanilla pylint setup -- I get  "Your code has been rated at 10.00/10"   from pylint
[03:14:23] <altendky> hrob: `python -c 'import sysconfig; print("Py_ENABLE_SHARED -> {}".format(sysconfig.get_config_var("Py_ENABLE_SHARED")))'` what does that give for your python, however you run it
[03:14:26] <nedbat> whatsupdoc: it's making a collection of functions
[03:15:05] <nedbat> a list of functions. on line 31, they get called.
[03:16:19] <hrob> altendky  I get "Py_ENABLE_SHARED -> 1"  both python2.7 and python3.8
[03:16:41] <altendky> hrob: mm, mine is shared too.  what code did you try and what pylint version?  bpa.st/+python
[03:16:50] <altendky> (and thanks for poking at this)
[03:16:50] <hrob> altendky  I wonder if its a matter of which pylint your using... does it not matter if its pylint from pip3
[03:17:43] <hrob> altendky  pylint --version for me is  version 2.11.1  for Python 2.8
[03:17:55] <hrob> I installed with pip3 just now
[03:17:58] <altendky> 2.8?
[03:18:05] <hrob> sorry 3.8 lol
[03:18:15] <whatsupdoc> How does the "with" keyword know to apply to goblin?
[03:18:22] <nedbat> whatsupdoc: where?
[03:18:28] <whatsupdoc> Line 94
[03:18:53] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:19:05] <grym> whatsupdoc: CreatureModifier defines an __enter__ and __exit__
[03:19:10] <grym> and is therefore a context manager
[03:19:19] <hrob> altendky  the code example is python3 it seems,  and I recall there are differences between 2.7 and 3.x regarding the networking packages
[03:19:32] <grym> whatsupdoc: and DoubleAttackModifier is one of them, so it's a context manager, too
[03:19:56] <hrob> altendky  so I just wonder if you need to run latest pylint for python3
[03:20:30] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[03:20:33] <whatsupdoc> not really understanding the with keyword tbh
[03:20:49] <grym> whatsupdoc: https://web.archive.org/web/20200405185343/https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/
[03:21:12] <grym> it does the stuff in __enter__, executes the block, and then does the stuff in __exit__
[03:21:48] <whatsupdoc> self.DoubleAttackModifier(game, goblin)?
[03:22:15] <grym> what's self doing there
[03:22:28] <whatsupdoc> return self
[03:22:28] <whatsupdoc>  (Line 67?)
[03:22:34] *** Joins: fluffyballoon (~user@131.93.208.196)
[03:22:41] *** Joins: rannnn8888 (~rannnn888@bzq-79-176-127-230.red.bezeqint.net)
[03:22:57] <grym>  __enter__ returning the instance is pretty normal
[03:23:22] <grym> because then `with MyThing() as foo` "acts like" `foo=MyThing()`
[03:23:28] *** Joins: summersault (~summersau@179.221.251.16)
[03:23:33] <grym> binding the name foo to the instance
[03:24:05] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[03:24:11] <whatsupdoc> so confusing smh
[03:24:25] <hrob> altendky  I see you are running python3 pylint, but the pylint version 2.8 is a little old .. latest on pip3  is 2.11.1  that I used just now
[03:24:34] <grym> context managers are very nice ways to clean up after yourself
[03:24:36] <grym> that's kind of it
[03:24:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[03:25:00] <altendky> hrob: i didn't comment on that issue.  https://gist.github.com/altendky/cbc1725f71982834e03c22c417cf8e20
[03:25:12] *** Joins: w4ld0 (w4ld0@gateway/vpn/protonvpn/w4ld0)
[03:26:19] <hrob> altendky ah ok... but seems perhaps it was a bug then that is fixed with latest pylint 2.11.1
[03:26:32] <hrob> only guessing though
[03:26:45] <altendky> hrob: i think my link shows 2.11.1
[03:27:50] <whatsupdoc> Am I right: Is the game storing all the modifiers and not the creatures themselves??
[03:28:02] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:28:34] <summersault> is this kind of annotation pythonic? https://pastecode.io/s/9inhd8qw
[03:28:46] <hrob> altendky ok yeah this code you  pasted just now does give me no AddressFamily
[03:29:21] <whatsupdoc> Damn, I think I'm starting to understand what the code is doing
[03:29:33] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 244 seconds)
[03:29:39] <whatsupdoc> This seems kinda inefficient
[03:29:59] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[03:30:22] *** Joins: iomari891 (~iomari891@105.112.138.38)
[03:30:43] <grym> whatsupdoc: i was reminded of a very good blog series just from the class names about how not to choose class hierarchies
[03:31:01] <nedbat> whatsupdoc: inefficient how?
[03:31:19] <grym> summersault: there are nicer docstring formats than that; numpydoc or googledoc are two good ones
[03:31:26] <whatsupdoc> It has to search through all the creatures to find which modifiers apply?
[03:31:44] <grym> it's not that it's inefficient, it's that you're going to hit really godawful edge cases
[03:31:47] <grym> pretty fast
[03:31:53] <nedbat> whatsupdoc: how many creatures will there be?
[03:32:17] <whatsupdoc> Idk the typical mmo has thousands
[03:32:49] <whatsupdoc> Every time you attack and get hit, you'll have to access this?
[03:32:52] <grym> whatsupdoc: here's a fun question: one Creature attacks another Creature.   ON which creature is the attack resolved? why?
[03:32:55] *** Joins: Jong (~Jong@2620:10d:c090:400::5:7299)
[03:33:00] <nedbat> whatsupdoc: it might be a problem to have thousands.  this code probably wasn't used for thousans
[03:33:43] <hrob> altendky  yup seems that pylint doesnt like enum members,  is this not same issue here: https://github.com/PyCQA/pylint/issues/2422
[03:33:54] *** Joins: hel0 (~hel0@user/redrum88)
[03:33:56] <hrob> *doesnt notice
[03:34:05] <summersault> grym: thanks
[03:35:13] *** Quits: oz4ga (~tim@93.90.4.233) (Ping timeout: 244 seconds)
[03:36:30] *** Quits: nbao (~nbao@187.20.156.163) (Quit: leaving)
[03:36:38] <whatsupdoc> I swear that class someclass(list) stuff always trips me up
[03:36:54] <grym> ?
[03:37:11] <whatsupdoc> I'm always like: how are they appending to a class
[03:37:41] <grym> (fwiw i don't like this code very much either)
[03:38:17] <hrob> altendky  not the only linter issue I have had -- you can disable it in a function if want  by adding "# pylint: disable=no-member"   https://stackoverflow.com/questions/28829236/is-it-possible-to-ignore-one-single-specific-line-with-pylint
[03:38:25] <whatsupdoc> i would never be able to come up with this by myself in a million years
[03:38:54] <grym> whatsupdoc: not with that attitude! :)
[03:39:25] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:39:27] *** Joins: aknot (~aknot@2603:900a:1503:17bb:bbfc:9994:a3f8:f4ca)
[03:39:50] *** Quits: Nspace (~Nspace@user/nspace) (Ping timeout: 260 seconds)
[03:40:44] <whatsupdoc> ugh, why not just turn Event into a list of function pointers
[03:41:32] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:41:45] *** Joins: amo (~amogorkon@port-92-196-83-200.dynamic.as20676.net)
[03:41:47] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:4def:4e95:4385:6486) (Ping timeout: 264 seconds)
[03:41:53] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:42:13] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Remote host closed the connection)
[03:42:56] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[03:43:49] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:43:52] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[03:43:56] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[03:44:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[03:44:41] *** Quits: amogorkon (~amogorkon@port-92-196-126-224.dynamic.as20676.net) (Ping timeout: 245 seconds)
[03:45:09] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[03:46:58] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 265 seconds)
[03:47:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:48:00] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:48:11] *** Quits: flokuehn (~flokuehn@87.123.247.92) (Ping timeout: 260 seconds)
[03:48:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:49:08] *** Lord_of_Life_ is now known as Lord_of_Life
[03:49:20] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[03:49:40] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[03:50:02] *** Joins: flokuehn (~flokuehn@87.123.247.85)
[03:51:59] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[03:52:06] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:53:30] <aphysically> whoa looks like black might unblock match/case usage *a lot* sooner than expected
[03:54:01] <aphysically> indicating they're open to merging a not-perfect stopgap patch to their current parser until a full new parser can be implemented, and people already have such a stopgap patch
[03:54:28] <aphysically> if that happens the only remaining big blocker for new 3.10 stuff is mypy, but I don't think that will be for some months
[03:54:30] *** Joins: rndm (~rndm@2600:1700:5f81:1f50:e19d:aecb:8e96:9c40)
[03:54:52] <rndm> does poetry support a single file python module?
[03:54:55] <aphysically> the branch for the next release (.920) was cut before patches that would unblock usage of new 3.10 typing features
[03:55:09] <aphysically> so it's probably another few months before that stuff is unblocked (?)
[03:55:11] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[03:55:16] <grym> rndm: yes
[03:55:34] <rndm> do you have to tell it anything special?
[03:55:52] <rndm> i have a package which i can install but the module is not found on import
[03:55:57] <rndm> trying to debug this
[03:55:58] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[03:56:33] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Client Quit)
[03:56:54] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Ping timeout: 260 seconds)
[03:57:01] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[03:57:30] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:57:53] <hrob> with class variables  Im wondering  does assigning to that class var within __init__()   override that variable in some way?   I notice I cannot control it globally with MyClass.class_var =...   after it has been re-assigned with __init__
[03:58:40] <hrob> should I be adding some kind of decorator  insisting that it behave like class var?
[03:58:44] <nedbat> hrob: self.x = y will make an object attribute, even if the class has an x attribute
[03:59:33] <nedbat> hrob: if you want it to stay a class attribute, then you need:  self.__class__.x = y
[03:59:36] <hrob> nedbat  ahh... lol   ok within init I should be doing MyClass.class_var   if I dont want it replaced
[03:59:52] <aphysically> nedbat: !
[04:00:05] <aphysically> I didn't know that was a thing, I just assumed you couldn't really have mutable immutable classvars (??? words)
[04:00:16] <hrob> nedbat yes better   self.__class__
[04:00:17] <aphysically> which isn't a thing I've wanted anyway but heh
[04:01:15] <nedbat> aphysically: which thing in particular is new here?
[04:01:23] <aphysically> __class__
[04:01:56] <aphysically> I may have slightly glazed over the docs with dunders at times
[04:02:03] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[04:02:26] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[04:02:33] <nedbat> aphysically: wait till you learn you can do this:  obj.__class__ = SomeOtherClass
[04:02:35] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Ping timeout: 265 seconds)
[04:02:44] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Remote host closed the connection)
[04:02:57] <aphysically> what does that even do
[04:03:04] <nedbat> aphysically: it changes the class of the object
[04:03:10] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:03:16] <nedbat> i don't recommend it
[04:03:23] <aphysically> but
[04:03:28] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:03:30] *** litharge sets mode: -b *!*sartan@user/sartan
[04:03:32] <aphysically> Q_Q
[04:03:38] <hrob> hm... ok this stuff is interesting, but a little counter intuitive --  @classmethod  exists,,   maybe @classvar/attrib would be sensible
[04:03:49] <nedbat> hrob: you can't decorate a variable
[04:04:09] <hrob> nedbat ah right, knew that but forgot the magic
[04:04:18] <aphysically> there's a ClassVar annotation if you use static type checkers
[04:04:36] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[04:04:46] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[04:04:51] <aphysically> well, it's still there even if you don't use static type checkers (even if it doesn't do anything)
[04:05:47] <hrob> aphysically  Mypy made me use cast(....) lol   then I got like ,  hey hang on a minute where is this going
[04:06:56] <hrob> future of python:   "float* pResult = static_cast<float*>(pToInt);"
[04:08:15] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[04:09:05] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[04:09:39] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:12:17] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:4def:4e95:4385:6486)
[04:14:14] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:14:17] *** Joins: rannnn888851 (~rannnn888@bzq-79-176-127-230.red.bezeqint.net)
[04:16:39] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[04:17:55] *** Quits: rannnn8888 (~rannnn888@bzq-79-176-127-230.red.bezeqint.net) (Ping timeout: 256 seconds)
[04:18:00] *** Quits: aphysically (~aphysical@user/aphysically) (Ping timeout: 258 seconds)
[04:18:56] *** Joins: aphysically (~aphysical@user/aphysically)
[04:19:16] *** Quits: rndm (~rndm@2600:1700:5f81:1f50:e19d:aecb:8e96:9c40) (Ping timeout: 245 seconds)
[04:20:07] *** Joins: NeoCore_ (~neocore@2a01:cb10:34f:4c00:d539:91e:391e:5bef)
[04:21:38] *** Quits: NeoCore (~neocore@37.120.204.181) (Ping timeout: 260 seconds)
[04:22:44] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[04:22:46] <Soni> anyone seen habnabit_ ?
[04:23:04] <Soni> we could use their help
[04:23:15] <nedbat> Soni: why them in particular?
[04:23:49] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[04:24:03] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[04:24:31] <Soni> nedbat: well hm...
[04:24:34] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:24:35] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 260 seconds)
[04:24:55] <Soni> because we're vaguely aware of them and vice-versa?
[04:25:03] *** Joins: srhm (~srhm@user/srhm)
[04:25:46] <nedbat> Soni: they don't seem to be around. You could ask the channel, or wait until you find them i guess
[04:27:05] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 260 seconds)
[04:27:21] *** Parts: akoana (~ah@user/akoana) (Leaving)
[04:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:40] <rama_> great ppl here. give your selves a round of applause.
[04:32:03] *** Quits: rany_ (~rany@user/rany) (Ping timeout: 260 seconds)
[04:32:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[04:32:25] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[04:33:01] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:4def:4e95:4385:6486) (Ping timeout: 245 seconds)
[04:33:27] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Ping timeout: 260 seconds)
[04:33:55] *** Joins: fikran (~fikran@user/fikran)
[04:34:01] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[04:34:20] <nedbat> rama_: thanks :)
[04:34:32] *** Joins: vlm (~vlm@user/vlm)
[04:34:42] *** Quits: CaCode (~Cas@user/cacode) (Ping timeout: 260 seconds)
[04:34:50] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[04:35:23] <rama_> esp you nedbat, you have helped me many times.
[04:35:46] <rama_> and others!
[04:36:16] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[04:37:43] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[04:37:43] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[04:39:40] * nedbat blushes
[04:39:43] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:42:22] <whatsupdoc> everytime i read nedbat's username I think https://i.imgur.com/FGrHQeN_d.webp?maxwidth=760&fidelity=grand
[04:42:38] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[04:42:46] <nedbat> whatsupdoc: i have a figureine of ned flanders on my desk :)
[04:43:06] <whatsupdoc> lol nice
[04:44:12] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[04:44:39] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[04:45:12] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[04:45:12] <grym> thankfully, nedbat is much more euphonious in real life than flandiddlyanders
[04:45:48] <ouemt> is there a good way to speed up or avoid this loop? https://bpa.st/TFGQ
[04:46:15] *** Quits: rannnn888851 (~rannnn888@bzq-79-176-127-230.red.bezeqint.net) (Ping timeout: 256 seconds)
[04:46:17] <ouemt> it finds the closest value in masked_2 to the x value from masked_1
[04:46:54] <ouemt> I feel like there should be a way to vectorize it, but I'm not good enough to figure it out apparently
[04:47:01] <ouemt> and that loop is slow... like 3k it/s
[04:48:31] *** Quits: Gaming4LifeDE (~Gaming4Li@a89-182-120-213.net-htp.de) (Ping timeout: 256 seconds)
[04:48:42] *** Joins: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[04:48:49] <Repiphany> Do the arrays happen to be sorted
[04:48:50] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 265 seconds)
[04:48:52] *** Quits: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[04:48:55] <ouemt> they are
[04:49:15] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Quit: Leaving)
[04:49:29] <ouemt> but not aligned, there can be random offsets between the two arrays
[04:49:29] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[04:50:06] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 245 seconds)
[04:50:33] *** Joins: brabrax (~brabrax@user/brabrax)
[04:52:29] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:484a:3bc5:dcb7:17e7) (Ping timeout: 256 seconds)
[04:53:12] <Repiphany> If they're sorted, there's a smarter way to walk along both of the arrays simultaneously to find the minimum I guess
[04:53:58] *** Joins: _Ev (~ev@user/ev/x-8999918)
[04:56:52] <ouemt> Repiphany: I'm trying to find the closest value in masked_2 for every value in masked_1, not just the minimum difference between any two values in the array
[04:58:30] *** Joins: The_Jag_ (~The_Jag@host-87-11-42-170.retail.telecomitalia.it)
[04:59:24] <Repiphany> Oh, you might be able to do something like `np.abs(masked_1.reshape(-1, 1) - masked_2).argmin(axis = 1)`
[05:00:03] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:00:55] *** Quits: The_Jag (~The_Jag@host-87-19-40-26.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[05:01:11] <jeho> sort lists and use binary search to find closest values
[05:01:21] <jeho> bisect
[05:02:36] <jeho> or use bisect to match up the initial values, then simply move the indices forward in each list to locate closest values
[05:06:14] *** Joins: nomic (~nomic@185.198.243.251)
[05:08:19] *** Quits: rama_ (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[05:08:55] <ouemt> jeho, bisect doesn't tell you which of the two indexes it is closer to though
[05:09:23] <ouemt> I feel like vectorized subtraction, abs, and argmin should be faster than binary search too
[05:09:29] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:484a:3bc5:dcb7:17e7)
[05:10:14] *** Quits: parv (~quass@user/parv) (Quit: parv)
[05:10:31] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:11:08] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[05:14:57] *** Quits: orangeboxcutter (~orange@user/orangeboxcutter) (Remote host closed the connection)
[05:15:12] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[05:20:29] <hrob> should I "always" run super().__init__()
[05:20:40] <hrob> I see cases where people inherit but dont do it
[05:21:35] *** Joins: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[05:23:04] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[05:23:23] *** Quits: junktext (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 260 seconds)
[05:24:14] *** Joins: tWqaq (~tWqaq@180.169.35.114)
[05:25:52] *** Joins: Nact (~l@2a02:2788:11c4:6e6:cebc:f487:efd8:173)
[05:25:57] *** Quits: Bakunin (~Lindis@user/lindis) (Ping timeout: 276 seconds)
[05:27:15] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:27:17] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[05:27:59] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[05:28:17] *** Quits: oneforall2 (~guru@S0106ec086bc3574f.mh.shawcable.net) (Remote host closed the connection)
[05:29:21] <bparker> hrob: that depends on what the base function does, and if you want to run that code or not.
[05:30:31] <hrob> bparker  it would mean that the inheritance requires no init I guess,  but wants to take advantage of methods and attributes only.
[05:30:40] <hrob> if im correct
[05:31:22] <hrob> I find it hard to see how it would not hurt... just in case to call super
[05:31:37] <hrob> * how it would hurt
[05:31:41] <hrob> just in case
[05:32:22] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: pees oot)
[05:32:34] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[05:32:41] *** Joins: srhm (~srhm@user/srhm)
[05:33:04] <hrob> would be bad code design in my mind, if calling super()  would cause unintended / unwanted effects
[05:33:15] <hrob> too much code reading
[05:33:21] <grym> hrob: i avoid this problem by rarely inheriting
[05:33:25] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:34:04] <hrob> grym yup.... some frameworks expect it,  in my case using sqlalchemy
[05:35:19] <hrob> just stings my eyes  to inherit and not call super...  but pylint and others are ok with it it seems
[05:35:54] <hrob> or more to say... I worry it will cause bugs down the line
[05:36:02] <hrob> to skip it
[05:37:15] *** Joins: srhm (~srhm@user/srhm)
[05:38:47] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 260 seconds)
[05:39:13] <SnoopJ> hrob, you should user super() when you need to explicitly access functionality on the base class, whatever it is. Oftentimes, APIs designed around inheritance will avoid putting the burden on the user (pydantic.BaseModel is a good example)
[05:39:20] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:484a:3bc5:dcb7:17e7) (Quit: Client closed)
[05:40:11] <mefistofeles> hmm this might be a weird question, I have an attribute of an object that's an empty dictionary, I want to add keys and values pair to it from another dictionary. The problem is that I cannot set the attribute (no setter), how would I go about this?
[05:40:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:40:50] <SnoopJ> mefistofeles, `yourobj.thedict.update(otherdict)`? or is there something amiss with that?
[05:40:57] <mefistofeles> basically I'd like something like an append but for dictionaries, so it would be some_dict.append(key, value) or something like that
[05:41:00] <mefistofeles> oh update of course
[05:41:07] <mefistofeles> yes, that sounds like it
[05:41:17] <hrob> SnoopJ  hm ok there can be some magic there with frameworks,  calling things externally
[05:41:49] <mefistofeles> SnoopJ: thanks
[05:41:51] <SnoopJ> hrob, sometimes there's metaprogramming magic, but oftentimes frameworks are written so that the end-user doesn't really have to think about __init__, their code lives somewhere else
[05:41:54] <hrob> mefistofeles  mydics.update({...})  is the way yes
[05:42:03] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 260 seconds)
[05:42:11] <mefistofeles> hrob: yes, thanks
[05:42:16] <SnoopJ> mefistofeles, you could probably also do `yourobj.thedict[k] = v` but if you have a whole bunch yea update() is where it's at
[05:43:04] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:44:13] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[05:44:22] <hrob> SnoopJ   it would be rather bad framework if calling super()  caused unwanted behavior is just my feeling,  so I knida feel like it should be always used
[05:45:07] <mefistofeles> SnoopJ: yeah, that's what I was wanting to avoid, thanks again
[05:46:29] <SnoopJ> hrob, I don't know what kind of unwanted behavior you're thinking of, my point is that it's often possible to design so that it isn't *necessary*
[05:47:16] <hrob> SnoopJ  yup... its just kinda hard on code reviewers I think.... to go and check in detail if it is ok or not
[05:47:19] <SnoopJ> i.e. if the user doesn't have to write __init__() at all, there is no need to call super().__init__(), the base class initializer just applies directly
[05:47:37] <hrob> SnoopJ yes see your point, that is common too
[05:48:05] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[05:48:38] <hrob> was kinda wondering if there was a PEP best practice on this,   "calling super should not break things"  ... i think this is my pep
[05:49:14] <SnoopJ> hrob, I'm not sure I can think of any examples where calling super breaks something, can you explain?
[05:49:24] <slowButPresent> hrob: pretty sure some APIs force you to define init without calling super. some base classes just raise a exception
[05:49:35] <hrob> then again super can be called with args,  so Im just complaining about reading framework docs lol
[05:49:57] *** Quits: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[05:49:59] <SnoopJ> the complaining part scans, but I cannot say I understand the actual complaint
[05:50:15] *** Joins: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[05:50:32] <SnoopJ> But if something is wrong with super() itself and not something someone designed around it, that's worth taking seriously...
[05:51:42] <hrob> yup just was wondering if there was a convention of sorts,  super should not break things lol, but man it depends as you say
[05:52:06] <hrob> skipping super()  on the other hand often breaks things in my experience
[05:52:59] <hrob> some init code added down the line obscurely in the parent class in some lib etc....
[05:53:39] <SnoopJ> hrob, I'm still not entirely sure what you mean when you say "super should not break things"
[05:53:47] <SnoopJ> if calling super() breaks something, indeed it should not do that.
[05:54:01] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:54:10] <SnoopJ> super() is only supposed to give you an object that helps you find and talk to the base class.
[05:54:54] <hrob> SnoopJ yes... was thinking   super init att top of child init ... is pretty safe,  and would be bad if it broke things.... more like its a just in case,  lets call it
[05:57:24] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Remote host closed the connection)
[05:57:30] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[05:57:42] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[05:57:49] <SnoopJ> hrob, if you are aware of a case where just calling super() breaks something, it is probably a Python bug.
[05:57:52] *** Quits: NeoCore_ (~neocore@2a01:cb10:34f:4c00:d539:91e:391e:5bef) (Quit: Leaving)
[05:58:13] <SnoopJ> If you call super().somemethod() and it breaks something, Python can't really make guarantees for the code that's in the base class.
[06:01:03] <hrob> SnoopJ    I was thinking that a well designed framework should work well with  super().__init__( args or kwargs )      just as a principle.... however skipping   super().__init__    is more likely to break things
[06:02:45] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[06:02:58] <hrob> so if Im looking at some code and   super init is not called,  it may worry me.... even though code works fine at the moment
[06:04:21] <hrob> but as you confirmed   super init  call is not supposed to break things,   but to ensure everything is initialized.... hard to think of a reason to skip it is my thought
[06:04:32] <moonmoon> it's definitely a code smell imo. Doesn't necessarily mean it's *wrong* but the reason for not calling it should likely be explained somewhere, esp in a project touched by multiple people so someone else doesn't see it and go "hey that looks wrong let's add in super().__init__()"
[06:04:42] <moonmoon> there are legitimate reasons for skipping it
[06:05:00] *** Joins: HaMsTeRs (~Thunderbi@14-0-169-150.static.pccw-hkt.com)
[06:05:06] *** Quits: aknot (~aknot@2603:900a:1503:17bb:bbfc:9994:a3f8:f4ca) (Ping timeout: 245 seconds)
[06:05:42] <hrob> moonmoon  yes I can see its very often just extra lines of code for no reason in terms of running the software
[06:05:47] <moonmoon> main reason I can think of is where the base class __init__() does something you don't want to happen, and you're wrapping that class with your subclass so that it doesn't happen and passing said subclass around (with the assumption you can't modify the base class code)
[06:06:18] <hrob> moonmoon  yeah, thats a good case.... overriding init
[06:06:21] *** Quits: newpy (~newpy@2601:280:4381:1390:1c6c:6b94:6560:f6f2) (Ping timeout: 245 seconds)
[06:08:33] <moonmoon> I had another case in a project I was working on where __new__ was overridden to return existing instances if possible, and if an existing instance is returned then __init__ is automatically called on it even though it's already been run (so __init__ needed to be mostly no-op or coded to only do its initialization stuff once)
[06:08:55] <moonmoon> a better solution would be to make __new__ less hacky but that's a bigger refactor than I care to tackle at the moment
[06:10:03] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:10:53] <hrob> moonmoon  I gather my best comment on seeing no  super-init   is just to ask  do you want to override init ? :)
[06:11:33] <moonmoon> yeah, no reason *not* to call super().__init__() if you aren't trying to do something special there
[06:11:40] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:12:11] *** Joins: newpy (~newpy@2601:280:4381:1390:1c6c:6b94:6560:f6f2)
[06:13:58] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[06:14:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[06:14:44] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[06:15:42] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:17:07] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:17:17] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[06:21:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[06:22:43] *** Joins: Bakunin (~Lindis@user/lindis)
[06:24:59] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 260 seconds)
[06:28:08] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[06:29:04] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Quit: Leaving)
[06:29:27] *** Lando-HoloNet is now known as Lando-SpacePimp
[06:32:42] *** Joins: zyweo (~Svew@user/zyweo)
[06:40:10] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:41:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[06:43:16] *** Joins: fikran (~fikran@user/fikran)
[06:43:32] *** Quits: aphysically (~aphysical@user/aphysically) (Quit: aphysically)
[06:45:49] *** Quits: whatsupdoc (~whatsupdo@50.239.106.202) (Ping timeout: 256 seconds)
[06:45:50] *** Joins: aphysically (~aphysical@user/aphysically)
[06:47:35] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[06:48:05] *** Quits: heckler (~user@104-6-39-156.lightspeed.austtx.sbcglobal.net) (Quit: WeeChat 3.0)
[06:49:03] <_Ev> [Django]   trying to use a definition/validation-ish in form. Can't print strings for testing:  https://bpa.st/MCSQ ??
[06:59:31] <bparker> _Ev: you should ask in #django, but, print() is only going to work if you're running the dev webserver via ./manage.py runserver and looking at that console.
[06:59:34] <bparker> IIRC
[07:00:37] *** Joins: zebrag (~chris@user/zebrag)
[07:03:42] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[07:03:47] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:03:53] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:04:24] *** Joins: parv (~quass@user/parv)
[07:04:40] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[07:06:31] *** Joins: a-cheng (~mike@2408:8221:5938:1cb0:df3b:8cdb:dadf:6553)
[07:07:15] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[07:07:39] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:08:47] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 264 seconds)
[07:10:50] *** Joins: avikalp (~avikalp@49.36.99.188)
[07:11:20] *** Parts: a-cheng (~mike@2408:8221:5938:1cb0:df3b:8cdb:dadf:6553) ()
[07:12:10] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[07:13:31] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 260 seconds)
[07:13:35] *** Joins: jinsun (~quassel@user/jinsun)
[07:14:09] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[07:17:09] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[07:17:44] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[07:17:47] *** Quits: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net) (Ping timeout: 264 seconds)
[07:18:16] *** Joins: Aminda (~sid12355@Feneas/Mikaela)
[07:21:05] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36)
[07:21:55] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[07:23:50] <stewie925> Hello guys, is it possible to use enumerate in a map function, like `map(lambda (i,n): i+n, enumerate([1,2,3]))` ?
[07:24:14] *** Joins: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se)
[07:25:06] *** Quits: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269) (Ping timeout: 245 seconds)
[07:27:10] <phy1729> you could always try it and see
[07:27:17] <BrenBarn> sure
[07:27:32] <stewie925> Well,I did try it. Doesn’t seem to work.  I copied it from stackoverflow
[07:28:12] <jinsun> and what was the error?
[07:28:15] <phy1729> need to remove the parens
[07:28:43] <stewie925> The parents in (i,n)?  Let me try that…
[07:29:05] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[07:30:22] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[07:30:57] *** Joins: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269)
[07:30:59] *** Joins: djhankb (~djhankb@208.113.164.68)
[07:31:47] <stewie925> Ok I tried that and when I printed it, it shows `map object at xxxxxx`
[07:32:37] <phy1729> right map returns a generator
[07:33:40] <Repiphany> You can do it with zip but it's ugly
[07:34:10] <Repiphany> `map(lambda i, n: i + n, *zip(*enumerate([1,2,3])))`
[07:34:38] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[07:34:43] <phy1729> I don't see what purpose the *zip serves
[07:35:23] <Repiphany> map takes more than one argument if the input function does
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:10] <Repiphany> It expands out to map(lambda i, n: i + n, [0, 1, 2], [1, 2, 3])
[07:36:26] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:48] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:37:14] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[07:37:19] *** Joins: masta_ (~oyster@user/masta/x-2645138)
[07:37:51] <Repiphany> Might as well just write `map(lambda x: x[0] + x[1], enumerate([1,2,3]))`
[07:38:00] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 265 seconds)
[07:39:03] <stewie925> Thank you guys -  I’ am trying to harness the “power” of map function instead of using.a loop
[07:39:05] *** Quits: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se) (Ping timeout: 256 seconds)
[07:39:08] <phy1729> but the lambda can destructure the tuple
[07:39:15] <phy1729> which is what stewie925 had to begin with
[07:39:38] *** Joins: analoq (~yashi@user/dies)
[07:40:12] <stewie925> I just tried with list comprehension and it works fine
[07:40:52] <stewie925> List comprehension would be more efficient than for loop , I suppose
[07:40:56] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[07:40:56] *** Quits: HaMsTeRs (~Thunderbi@14-0-169-150.static.pccw-hkt.com) (Read error: Connection reset by peer)
[07:41:21] <Repiphany> You can't, `lambda (i, n): i + n` is a syntax error
[07:41:49] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:41:50] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[07:42:01] *** Joins: djapo (~archangel@user/djapo)
[07:42:27] *** Quits: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269) (Ping timeout: 260 seconds)
[07:42:35] *** Joins: jinsun (~quassel@user/jinsun)
[07:43:11] <stewie925> Repiphany, exactly
[07:43:45] *** Joins: HaMsTeRs (~Thunderbi@14-0-169-150.static.pccw-hkt.com)
[07:43:49] *** Quits: HaMsTeRs (~Thunderbi@14-0-169-150.static.pccw-hkt.com) (Client Quit)
[07:43:49] <stewie925> how do you pass multiple args in a lambda function in map
[07:44:11] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[07:44:13] <Repiphany> I answered that 10 minutes ago
[07:44:47] <jinsun_> the syntax error is because of the parens, after removing the parens it becomes a TypeError because the lambda takes 2 args but map supplies only one
[07:45:01] <phy1729> Repiphany: lambda i, n: i + n   works fine
[07:45:15] <Repiphany> It doesn't work with just enumerate, like I said
[07:45:23] <Repiphany> you need to do the ugly zip stuff
[07:45:34] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 260 seconds)
[07:45:48] <stewie925> Repiphany : oh….
[07:45:55] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:46:10] <phy1729> Repiphany: did you try it?
[07:46:31] <phy1729> ah the TypeError comes after consuming
[07:46:59] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[07:47:05] <jinsun> yeah it is not a syntax error so the map object gets created
[07:47:34] <jinsun> but when consuming it you get the TypeError
[07:47:35] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[07:48:24] <stewie925> `map(lambda i, n: i + n, *zip(*enumerate([1,2,3])))` does work indeed
[07:48:43] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[07:49:52] <stewie925> I had to scroll back as I missed the message initially - thanks Repiphany
[07:50:31] <jinsun> stewie925: a list comprehension is better than that really
[07:50:55] <jinsun> or generator expression if you want lazy
[07:51:14] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[07:51:21] <stewie925> Jinsun-  I’ve always thought map is more powerful than list comprehension hehe
[07:51:30] <stewie925> Guess not
[07:52:26] <jinsun> list comprehensions can replace both map and filter, so they are more powerful really
[07:54:36] <stewie925> Appreciate that, jinsun,  will make a note of it
[07:55:20] <dba> Hi, is there any faster alternative for list.reverse()
[07:56:20] <Repiphany> Faster for what
[07:56:31] <dba> speed
[07:56:42] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36) (Quit: Client closed)
[07:57:09] <Repiphany> What are you trying to do that involves reversing a list in-place and that isn't fast enough with .reverse()
[07:58:07] <dba> Repiphany: I am appending records to a list and then I want to treat all element in the list FIFO (first in first out)
[07:58:24] <deltab> dba: iterate in reverse using  reversed(a)
[07:58:37] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[07:59:38] <jinsun> sounds like deque might be a better structure than lists for what you are doing
[07:59:51] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[08:01:27] *** Quits: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Quit: Leaving)
[08:01:31] *** Joins: whatsupdoc (~whatsupdo@c-73-151-189-117.hsd1.ca.comcast.net)
[08:01:40] <dba> Repiphany, deltab, junsun here is my code https://bpa.st/UHEQ if I increased the count by only 10**4 the execution time increase drastically. I know appending to the list is probably which is taking all that time
[08:02:18] *** Quits: bloodninja123 (~bloodninj@user/bloodninja) (Read error: Connection reset by peer)
[08:02:21] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36)
[08:03:08] *** Joins: bloody (~bloody@user/bloody)
[08:03:27] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[08:04:39] <parv> As a list, deque is also only limited by system resources (short of specifying `maxlen`; https://realpython.com/python-deque/). Is deque grown one node at a time when an element is added or multiple placeholder nodes are added after some threshold?
[08:05:23] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36) (Client Quit)
[08:05:33] <parv> s/As a list/Similar to list/
[08:05:47] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[08:08:47] *** Quits: zerothule (~eric@2601:602:8d80:4e50:818d:c31c:21ae:145d) (Ping timeout: 264 seconds)
[08:10:42] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[08:11:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:11:59] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36)
[08:12:09] <deltab> dba: in my quick test, a.reverse() is the fastest
[08:12:58] <aphysically> dba: to be clear you don't actually need to reverse it, you just want to pop things from the front?
[08:13:31] <aphysically> if so then deque like jinsun mentioned won't need reversing and will be just as efficient
[08:15:14] <jinsun> parv: looks like it does in blocks of 64 at a time (in cpython 3.10) https://github.com/python/cpython/blob/3.10/Modules/_collectionsmodule.c#L24
[08:15:25] *** Joins: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269)
[08:15:50] <SnoopJ> or whatever BLOCKLEN is set to
[08:16:55] <dba> Thanks, I will be trying out deque
[08:16:55] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 260 seconds)
[08:16:56] *** Quits: nbin (~nbin@user/nbin) (Quit: ZNC - https://znc.in)
[08:17:27] <parv> jinsun, Thanks much!
[08:17:50] *** Quits: anonymeowo (~anonymeow@185.213.154.243) (Quit: Konversation terminated!)
[08:18:04] *** Joins: nbin (~nbin@user/nbin)
[08:18:16] *** Quits: lionslicer (~lionslice@2804:d41:a71d:ff00:8014:3a89:54c5:f8c8) (Quit: Leaving)
[08:18:45] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36) (Ping timeout: 256 seconds)
[08:21:00] *** Joins: erica (~erica@user/erica)
[08:21:45] *** Joins: djapo (~archangel@user/djapo)
[08:21:56] <Jong> Is there a way to create a dictionary like this: lookup = { "small":13400, "large":99999, "some_other_word":29389,  <any integer>:<return the same integer> }
[08:22:31] <Jong> The last part is what I don't know how to do. It's more abstract. the part: <any integer>:<return the same integer>
[08:22:48] <Jong> it looks like something itertools may be able to address
[08:23:26] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 265 seconds)
[08:23:40] *** Joins: summersault (~summersau@179.221.251.16)
[08:25:03] <jinsun> you can make your own own dict subclass with custom `__missing__` method
[08:25:37] <jinsun> can't do that with built in dicts
[08:25:53] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36)
[08:26:08] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[08:29:16] <deltab> ooh, I'd forgotten about __missing__
[08:29:43] <deltab> class IdentityDict(dict): def __missing__(self, key): return key
[08:29:45] *** Quits: avikalp (~avikalp@49.36.99.188) (Ping timeout: 260 seconds)
[08:30:12] *** Joins: stranac (~stranac@195.29.239.126)
[08:30:55] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[08:33:34] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Gone.)
[08:33:41] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:35:02] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[08:35:06] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:36:09] *** Quits: masta_ (~oyster@user/masta/x-2645138) (Quit: Going offline, see ya! (www.adiirc.com))
[08:36:53] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36) (Ping timeout: 256 seconds)
[08:36:56] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[08:37:23] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:39:06] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[08:40:31] *** Quits: w4ld0 (w4ld0@gateway/vpn/protonvpn/w4ld0) (Quit: Textual IRC Client: www.textualapp.com)
[08:44:14] *** Joins: upsala (~zcb@185.213.155.160)
[08:45:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[08:46:01] *** Quits: _Ev (~ev@user/ev/x-8999918) (Quit: Leaving.)
[08:47:02] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[08:49:17] *** Joins: ravan_ (~ravan@user/ravan)
[08:50:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[08:51:59] *** Quits: DeaDSouL (~DeaDSouL@194.99.104.149) (Ping timeout: 264 seconds)
[08:52:37] *** Joins: fikran (~fikran@user/fikran)
[08:53:51] *** Joins: avikalp (~avikalp@49.36.99.188)
[08:54:21] <KombuchaKip> Given a list of IP addresses, what is the easiest way in Python of determining which, if any, is local? By local this could be loopback device or real IP.
[08:54:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:55:39] <bparker> KombuchaKip: well first of all the actual method you'd use is highly OS-dependent
[08:55:40] <deniska> KombuchaKip: there's ipaddress module if you need to deal with weird formats. Although loopback is just whatever ip starting with 127.
[08:55:58] <bparker> and by 'local' you still don't say if you mean local to the machine or just the LAN
[08:56:12] <bparker> or if it must be reachable
[08:56:18] <deniska> KombuchaKip: ah, misread (probably?) what you mean by local
[08:57:35] *** Quits: hacksword (~hacksword@67.212.238.215) (Ping timeout: 260 seconds)
[08:57:44] *** Quits: wolfgang (~wolfgang@101.174.167.116) (Remote host closed the connection)
[08:57:48] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36)
[08:59:36] *** Joins: hacksword (~hacksword@ip68-231-215-184.oc.oc.cox.net)
[08:59:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[08:59:59] *** Joins: mei (~mei@user/mei)
[09:00:31] *** Quits: uuair (~quassel@user/uuair) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:00:49] <KombuchaKip> Local as in the machine running the code, and not something else. It could be on any interface, including loopback. Presumably there is some portable python module by now to do this?
[09:02:56] *** Joins: uuair (~quassel@user/uuair)
[09:03:43] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[09:06:51] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Client Quit)
[09:07:09] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[09:07:12] <Jong> anyone know a more elegant way to write this? https://bpa.st/LNCA
[09:07:23] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Client Quit)
[09:07:42] *** Joins: vit (~vit@chello085216193138.chello.sk)
[09:07:46] <Jong> aha I figured it out
[09:07:59] <Jong> a,b = x,y if conditionFoo else y,x
[09:08:01] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[09:08:29] *** Quits: ravan_ (~ravan@user/ravan) (Quit: Leaving)
[09:08:45] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[09:08:56] *** Quits: PixelRobot (~PixelRobo@139.47.80.69) (Remote host closed the connection)
[09:09:45] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36) (Ping timeout: 256 seconds)
[09:11:55] *** Quits: Bakunin (~Lindis@user/lindis) (Remote host closed the connection)
[09:13:46] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36)
[09:14:38] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:14:41] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[09:15:28] *** Joins: wolfgang (~wolfgang@101.174.167.116)
[09:16:17] *** Joins: nomic (~nomic@185.198.243.251)
[09:19:55] *** Joins: jinsun (~quassel@user/jinsun)
[09:19:57] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8c29:7334:95fa:cd36) (Ping timeout: 256 seconds)
[09:20:58] *** Quits: hacksword (~hacksword@ip68-231-215-184.oc.oc.cox.net) (Quit: WeeChat 2.3)
[09:22:56] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[09:23:35] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[09:24:49] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:25:56] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[09:27:23] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 264 seconds)
[09:29:00] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[09:29:55] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[09:30:15] *** Joins: alzgh (~alzgh@user/alzgh)
[09:30:35] *** Joins: Ergo^ (~ergo@91.238.59.144)
[09:31:59] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[09:36:15] *** Joins: HaMsTeRs (~Thunderbi@14-0-169-150.static.pccw-hkt.com)
[09:38:39] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[09:41:59] *** Joins: manti7 (~manti7@176.10.104.94)
[09:43:01] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 245 seconds)
[09:43:55] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:bb1f:7144:b27b:abd7)
[09:44:21] *** Joins: nomic (~nomic@185.198.243.251)
[09:46:19] *** Joins: Iago[m] (~mercvrivs@2001:470:69fc:105::2ee6)
[09:47:20] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:47:35] *** Quits: seednode4 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:48:19] *** Joins: seednode4 (~seednode@user/seednode)
[09:49:41] *** Joins: jazzy2 (~jaziz@user/jaziz)
[09:51:17] <ericlee> Hi, what's the difference b/w func(foo, *, x=bar) and func(foo, x=bar)?
[09:51:33] <ericlee> I think both 2 are specifying the default values?
[09:52:59] *** Joins: kosh (~kosh@user/kosh)
[09:53:11] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[09:53:31] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[09:54:29] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[09:54:53] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:57:13] *** Quits: newpy (~newpy@2601:280:4381:1390:1c6c:6b94:6560:f6f2) (Quit: Leaving)
[09:58:50] <amo> https://www.python.org/dev/peps/pep-3102/ <- * means Keyword-Only Arguments
[09:59:43] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[09:59:57] <amo> while / means positional only -> https://www.python.org/dev/peps/pep-0570/
[10:01:55] <amo> <ericlee> I think both 2 are specifying the default values? <- func(foo, x=bar) can be called positional or via kwargs. with / or * you can force some args to be positional-only or kwarg-only
[10:01:57] <amo> https://www.python.org/dev/peps/pep-0570/#id44
[10:01:59] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:02:28] <ericlee> ah I see. thanks,
[10:02:38] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:02:57] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:04:43] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[10:05:16] <amo> i often use both like func(foo, /, *, a,b,c)
[10:05:48] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[10:05:54] <amo> a single positional-only argument and the rest kwarg-only
[10:07:21] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Quit: Going offline, see ya! (www.adiirc.com))
[10:09:55] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[10:11:36] *** Quits: stwange (~j@82.21.202.140) (Quit: This computer has gone to sleep)
[10:15:24] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[10:16:49] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[10:18:51] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[10:19:49] *** Iago[m] is now known as psyxopompos[m]
[10:21:16] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:23:31] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[10:24:38] *** Joins: whatsupdoc_ (uid509081@id-509081.hampstead.irccloud.com)
[10:25:31] *** Joins: palasso (~palasso@user/palasso)
[10:25:50] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:27:22] *** Joins: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[10:27:52] *** Quits: whatsupdoc (~whatsupdo@c-73-151-189-117.hsd1.ca.comcast.net) (Quit: Client closed)
[10:27:52] *** whatsupdoc_ is now known as whatsupdoc
[10:28:02] *** Joins: srhm (~srhm@user/srhm)
[10:28:02] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[10:28:39] *** Quits: HaMsTeRs (~Thunderbi@14-0-169-150.static.pccw-hkt.com) (Quit: HaMsTeRs)
[10:30:20] *** Joins: zhukovgreen (~ab017i2@2a0f:8742:88c:0:94fe:7f00:345d:6db)
[10:30:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:31:56] *** Quits: Nact (~l@2a02:2788:11c4:6e6:cebc:f487:efd8:173) (Quit: Konversation terminated!)
[10:32:51] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[10:33:22] *** Joins: srhm (~srhm@user/srhm)
[10:34:29] *** psyxopompos[m] is now known as Iago[m]
[10:36:37] *** Joins: chele (~chele@user/chele)
[10:39:12] *** Quits: avikalp (~avikalp@49.36.99.188) (Read error: Connection reset by peer)
[10:39:15] *** Quits: dre (~dre@120.156.30.159) (Ping timeout: 265 seconds)
[10:39:54] *** Joins: slav0nic (slav0nic@python.su)
[10:40:53] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:41:54] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[10:42:37] *** Joins: dre (~dre@2001:8003:c932:c301:2c34:80ee:8a92:2fb)
[10:43:53] *** Iago[m] is now known as psyxo[m]
[10:45:47] *** Joins: avikalp (~avikalp@49.36.99.188)
[10:47:08] *** Joins: gusto (~Augustus@109.255.100.54)
[10:48:35] *** Joins: mrwick (~mrwick@user/mrwick)
[10:50:23] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df085-25.dhcp.inet.fi)
[10:50:41] *** Quits: zhukovgreen (~ab017i2@2a0f:8742:88c:0:94fe:7f00:345d:6db) (Quit: WeeChat 3.3)
[10:50:48] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Quit: Leaving)
[10:51:00] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df085-25.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:51:48] <whatsupdoc> how do you duplicate a matrix?
[10:51:55] <whatsupdoc> do you have to use deepcopy or is there another way?
[10:52:57] *** Quits: psyxo[m] (~mercvrivs@2001:470:69fc:105::2ee6) (Changing host)
[10:52:57] *** Joins: psyxo[m] (~mercvrivs@user/psyxopompos)
[10:53:23] *** Joins: ub (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[10:54:18] <deniska> whatsupdoc: what's a matrix?
[10:54:41] <whatsupdoc> a list of lists
[10:55:05] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Quit: Client closed)
[10:55:18] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[10:56:45] <deniska> whatsupdoc: then yeah, deepcopy is probably the simplest way. Or, knowing it's just two levels deep you can do `new_matrix = [a.copy() for a in old_matrix]
[10:57:02] <deniska> whatsupdoc: also you may want to take a look at numpy
[11:00:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[11:00:43] *** Joins: vladoski (~vladoski@2001:b07:add:d406:ec9c:7893:ec08:7575)
[11:00:49] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[11:01:28] *** Joins: raxor2k (~raxor2k@78.158.233.120)
[11:01:58] *** Joins: fikran (~fikran@user/fikran)
[11:02:20] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[11:02:46] *** Quits: ub (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Quit: ub)
[11:02:48] <patchie> I'm trying: df = df['emailBody'].applymap(html.unescape) ....error message: AttributeError: 'Series' object has no attribute 'applymap'
[11:02:50] <patchie> anyone?
[11:03:48] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[11:05:27] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[11:05:27] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 260 seconds)
[11:05:46] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:06:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[11:06:28] *** Joins: rendar (~rendar@user/rendar)
[11:06:29] *** dcaro_away is now known as dcaro
[11:06:51] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (Ping timeout: 260 seconds)
[11:06:52] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[11:08:32] *** Joins: lesihctej (jetchisel@user/jetchisel)
[11:08:59] <raxor2k> when i try returning the list itself, im getting the error " TypeError('vars() argument must have __dict__ attribute')]" , but when i stringify the list, it works. Any idea? https://bpa.st/EMAA
[11:09:02] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[11:12:30] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Ping timeout: 260 seconds)
[11:13:11] *** Quits: PsyZeus (~TheLight@user/psyzeus) (Remote host closed the connection)
[11:13:21] <patchie> Tried this also, but now i only got emailbody column, all other columns are gone: df = df['emailBody'].map(html.unescape)
[11:13:36] *** Joins: dre_ (~dre@120.156.30.159)
[11:13:51] <whatsupdoc> a.copy() is a python3 feature?
[11:15:58] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[11:16:11] *** Quits: dre (~dre@2001:8003:c932:c301:2c34:80ee:8a92:2fb) (Ping timeout: 260 seconds)
[11:16:12] <rendar> `[fn(x) for x in entries if fn(x) > 56]` does this function calls 2 times fn(x) ?
[11:16:43] *** Quits: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Quit: ubert)
[11:17:07] <leduyquang753> Yes.
[11:17:34] <rendar> how to fix?
[11:18:00] <leduyquang753> Write your own generator function.
[11:18:13] <lambda> `[y for x in entries if (y := fn(x)) > 56]`
[11:18:18] <rendar> can't this be fixed in oneliner? maybe with := operator?
[11:18:25] <rendar> lambda, thanks!
[11:19:23] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) ()
[11:20:14] *** Joins: _marco (~mrc@88.207.208.253)
[11:20:32] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[11:20:36] <_marco> What guarantees the language gives about this: list(my_set) == list(my_set), i.e. is iteration over sets reproduceable?
[11:20:57] *** Joins: e2m4n (~ezman@user/e2m4n)
[11:21:00] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[11:21:05] *** Joins: srhm (~srhm@user/srhm)
[11:21:44] <saltrocklamp[m]> _marco: order in sets is not defined and should not be considered reproducible
[11:22:25] <_marco> saltrocklamp[m], I am not talking about order of elements in a set, but the order when I iterate the set
[11:22:39] <saltrocklamp[m]> _marco: same. not defined
[11:22:44] *** Quits: lesihctej (jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[11:22:45] <saltrocklamp[m]> (as far as i know)
[11:23:20] <_marco> ok, tanks
[11:23:21] <rendar> _marco, i think that setA==setB is done by doing == for all their items
[11:23:25] <rendar> but i may be wrong on this
[11:26:10] *** Joins: lesihctej (jetchisel@user/jetchisel)
[11:26:18] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[11:28:46] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[11:28:51] *** Quits: resmo (~resmo@2a00:d420:9:8a00:3231:b19f:574:4c10) (Ping timeout: 245 seconds)
[11:29:12] <amo> whatsupdoc, from copy import copy; copy(thing) - https://docs.python.org/3/library/copy.html
[11:29:47] <amo> but really, use numpy for matrices
[11:30:47] <amo> .copy() is shallow
[11:33:00] *** Joins: carl- (~carl-@85.229.142.19)
[11:33:41] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[11:33:55] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[11:35:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:01] *** Joins: node1 (~node1@user/node1)
[11:37:01] <jinsun_> <patchie> "Tried this also, but now i..." <- that's because you map only the 'emailBody' column and assign that to the entire df, do df['emailBody']= instead of df=
[11:37:43] *** Joins: alius (~adrien@2a01:e0a:13c:cd90:32d0:42ff:fee4:47ab)
[11:37:46] <patchie> jinsun_: Ahh, of course.
[11:37:47] <patchie> thanks a lot
[11:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:38] *** Quits: SallyAhaj_ (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[11:40:53] *** Joins: Lazenca (~lazenca@user/lazenca)
[11:40:59] *** Joins: shad (~shad@user/shad)
[11:43:29] *** Joins: upsala (~zcb@185.213.155.160)
[11:43:48] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[11:44:12] *** Quits: vladoski (~vladoski@2001:b07:add:d406:ec9c:7893:ec08:7575) (Ping timeout: 258 seconds)
[11:45:57] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[11:47:35] *** Joins: d0ku (~d0ku@178.43.15.137.ipv4.supernova.orange.pl)
[11:48:58] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:49:06] *** Joins: vladoski (~vladoski@2001:b07:add:d406:ae93:b618:f650:6614)
[11:50:58] *** Joins: zhukovgreen (~ab017i2@2a0f:8742:88c:0:b807:2471:8bd2:a836)
[11:53:56] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[11:56:42] *** Joins: orange (~orangeext@user/orangeextract)
[11:58:11] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 260 seconds)
[12:04:53] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:04:56] *** Joins: plastico (~plastico@neomutt/plastico)
[12:05:08] *** Joins: saribro (~swinnenb@user/swinnenb)
[12:05:27] *** Parts: raxor2k (~raxor2k@78.158.233.120) ()
[12:06:29] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:06:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:09:05] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 260 seconds)
[12:09:34] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[12:11:13] *** Joins: goldfish (~goldfish@user/goldfish)
[12:11:34] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 260 seconds)
[12:12:02] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[12:16:35] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 264 seconds)
[12:19:03] *** Joins: metaace_ (~metaace@user/metaace)
[12:19:18] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 265 seconds)
[12:19:20] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[12:19:39] *** Quits: vladoski (~vladoski@2001:b07:add:d406:ae93:b618:f650:6614) (Ping timeout: 260 seconds)
[12:19:39] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 260 seconds)
[12:20:41] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:21:18] *** Quits: metaace (~metaace@user/metaace) (Ping timeout: 276 seconds)
[12:21:58] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: the #end of the abyss)
[12:22:10] *** Quits: km (~km@user/km) (Remote host closed the connection)
[12:22:17] *** Quits: zepolen_ (~zepolen@2a02:587:863d:d8c0:6f81:2331:b342:9e3b) (Quit: Konversation terminated!)
[12:23:08] *** Joins: brelod (~me@90.244.150.142)
[12:25:59] *** Joins: zepolen (~zepolen@2a02:587:863d:d8c0:6f81:2331:b342:9e3b)
[12:26:23] *** Quits: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is) (Ping timeout: 256 seconds)
[12:27:02] *** Quits: khile (cacambo@triton.blinkenshell.org) (Ping timeout: 265 seconds)
[12:30:39] *** Joins: km (~km@user/km)
[12:31:15] *** Joins: sharperguy (~sharpergu@fnord.cryptophone.de)
[12:32:10] *** Quits: alius (~adrien@2a01:e0a:13c:cd90:32d0:42ff:fee4:47ab) (Quit: Konversation terminated!)
[12:32:43] *** Joins: Nspace (~Nspace@user/nspace)
[12:34:02] *** Joins: vladoski (~vladoski@2001:b07:add:d406:d930:4058:83:ad92)
[12:35:48] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[12:36:13] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Client Quit)
[12:36:26] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[12:36:47] *** Joins: manti7 (~manti7@185.107.94.249)
[12:37:11] *** Joins: alius (~adrien@2a01:e0a:13c:cd90:32d0:42ff:fee4:47ab)
[12:37:47] *** Quits: alius (~adrien@2a01:e0a:13c:cd90:32d0:42ff:fee4:47ab) (Remote host closed the connection)
[12:38:10] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:41:00] *** Joins: alius (~adrien@2a01:e0a:13c:cd90:32d0:42ff:fee4:47ab)
[12:41:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:42:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[12:43:57] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Ping timeout: 256 seconds)
[12:46:29] *** Joins: cth (~Cthulchu@193.194.107.250)
[12:46:29] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[12:46:53] *** Joins: anonymeowo (~anonymeow@185.213.154.243)
[12:48:40] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:51:59] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[12:53:12] *** Joins: mcpac82 (~textual@212.25.0.228)
[12:55:43] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[12:57:47] *** Joins: _Ev (~ev@user/ev/x-8999918)
[12:57:48] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[12:59:54] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 265 seconds)
[13:01:38] *** Joins: foobaz212 (~foobaz212@88.98.219.238)
[13:01:38] *** Quits: foobaz212 (~foobaz212@88.98.219.238) (Client Quit)
[13:03:02] *** Quits: anonymeowo (~anonymeow@185.213.154.243) (Quit: Konversation terminated!)
[13:03:17] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:03:20] *** Quits: avikalp (~avikalp@49.36.99.188) (Read error: Connection reset by peer)
[13:03:47] *** Quits: siebenmeilen (~siebenmei@dynamic-2l5a6xiw9ta1wvdc9s-pd01.res.v6.highway.a1.net) (Quit: Leaving...)
[13:04:35] *** Quits: gitly (~gitly@148.252.128.114) (Ping timeout: 264 seconds)
[13:05:30] *** Joins: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[13:06:49] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[13:06:56] *** Quits: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Client Quit)
[13:08:45] *** Joins: legola (~legola@46.235.101.181)
[13:08:51] *** Joins: avikalp (~avikalp@49.36.99.188)
[13:08:54] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[13:09:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[13:11:19] *** Joins: fikran (~fikran@user/fikran)
[13:11:50] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[13:13:18] *** Joins: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[13:13:54] *** Joins: avikalp_ (~avikalp@49.36.99.188)
[13:14:12] *** Quits: avikalp (~avikalp@49.36.99.188) (Read error: Connection reset by peer)
[13:14:15] *** Quits: avikalp_ (~avikalp@49.36.99.188) (Read error: Connection reset by peer)
[13:14:54] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[13:17:47] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[13:18:31] *** Quits: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:18:52] *** Joins: avikalp (~avikalp@49.32.237.245)
[13:19:55] *** Joins: Mo_bile (~Mo_bile@dynamic-077-000-127-078.77.0.pool.telefonica.de)
[13:20:11] *** Joins: Nspace (~Nspace@user/nspace)
[13:20:43] *** Joins: wodim (~zzz@2605:6400:30:f3cc:fa83:71b3:af31:d023)
[13:21:20] <wodim> hello, I want to save a rather big dict to a file. what's faster, pickle or json? are there any other alternatives? not particularly interestd in the file being human readable
[13:21:43] *** Quits: zepolen (~zepolen@2a02:587:863d:d8c0:6f81:2331:b342:9e3b) (Ping timeout: 260 seconds)
[13:22:08] <Mo_bile> Hi, I'm running a uwsgi in a virtualenv, behind an nginx. It works for some seconds, then I get HTTP 502. The uwsgi log says: https://bpa.st/S62Q  No module named site   What could that be? Any better place to ask about this?
[13:23:00] *** Joins: zepolen (~zepolen@ppp-94-66-223-35.home.otenet.gr)
[13:23:31] <_marco> Mo_bile, not sure about site.py, it is a strange file I never investigated correctly
[13:23:42] <_marco> I mean deeply
[13:24:05] <_marco> Mo_bile, I configure uwsgi to use the venv
[13:25:34] <_marco> Mo_bile, This is the configuration I use, very simple: https://bpa.st/ZG3Q
[13:25:38] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:26:22] <_marco> you can change the "socket" option with "http" to skip Nginx while debugging the issue
[13:27:35] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:28:53] *** Joins: gitly (~gitly@85.255.234.36)
[13:29:38] *** Joins: tobybl (~tobybl@213.31.135.91)
[13:29:42] *** Quits: mcpac82 (~textual@212.25.0.228) (Quit: mcpac82)
[13:30:36] *** Joins: mcpac82 (~textual@212.25.0.228)
[13:31:39] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[13:32:15] <kosh> pickle is much faster than json for saving to a file
[13:32:29] <kosh> but it is also not secure
[13:32:46] *** Quits: Nspace (~Nspace@user/nspace) (Ping timeout: 260 seconds)
[13:34:07] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[13:36:30] <_marco> I suggest to benchmark both. I always thought that pickles is the fastest, as an axiom. Recently I was quite surprised how in my case pickle was not performing so good, but I was not using json
[13:36:37] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Ping timeout: 244 seconds)
[13:36:39] <wodim> not a concern for this particular use case
[13:36:42] <wodim> thanks kosh
[13:37:45] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[13:38:09] <kosh> it won't even be close, pickle will be much faster
[13:38:20] <kosh> and pickled has kept getting faster over time
[13:38:42] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[13:38:55] <kosh> I use pickle for checkpoints in a simulation
[13:39:00] *** Quits: reset (~reset@user/reset) (Quit: reset)
[13:39:03] *** Joins: mp4 (misha@user/mp3)
[13:39:09] <kosh> security is not a concern but speed is
[13:39:21] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:39:26] <kosh> and there are no problems with unpickling and object layout changing because that would make the checkpoint invalid anyways
[13:39:34] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[13:40:46] <mp4> hello, what '%' is doing in this snippet of code? https://dpaste.com/22E23YSV8 - googling for "python percent" returns 'modulo operator', which clear is not the case. where to read about such usage, or what is proper google term?
[13:41:19] <Swayze> its a place holder for the two string arguments
[13:41:25] *** Joins: reset (~reset@user/reset)
[13:41:35] <deniska> mp4: it's an old style string formatting, and it indeed uses modulo operator on a string
[13:41:35] <Swayze> git_dir and git_branch
[13:42:21] <mp4> oh, so it substitutes %s's with value of git_dir and git_branch?
[13:42:36] <Swayze> thats called 'c-style string formatting'
[13:42:37] <Swayze> yeah
[13:42:53] <mp4> just as i thought, thanks!
[13:43:12] <Swayze> https://realpython.com/python-string-formatting/
[13:43:22] <Swayze> here they cover 'old style' vs 'new style'
[13:44:11] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[13:44:24] <mp4> aha, thanks for the link
[13:44:43] <jinsun_> mp4: and the relevant section in the docs https://docs.python.org/3/library/stdtypes.html#old-string-formatting
[13:46:27] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Ping timeout: 276 seconds)
[13:46:33] *** Joins: Klinda (~superleag@user/klinda)
[13:46:40] *** Parts: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) ()
[13:54:23] *** Quits: shad (~shad@user/shad) (Ping timeout: 260 seconds)
[13:55:08] <Mo_bile> _marco: This is my uwsgi config: https://bpa.st/5LUQ
[13:55:32] *** Joins: shad (~shad@user/shad)
[13:56:16] *** Joins: mei (~mei@user/mei)
[13:56:17] <hexnewbie> mp4: Be advised that the provided code is dangerous (it contains a shell injection vulnerability), so if git_dir contains double quotes, or either of git_dir or git_branch is gotten from untrusted sources, bad things can happen. If you are putting them there, and there are no double quotes, it's probably fine. Doc: https://docs.python.org/3/library/subprocess.html#security-considerations
[13:57:16] <Yhg1s> (still a _lot_ better not to use shell=True.)
[13:57:35] *** Joins: computeiro (~Wender@189.37.66.97)
[13:57:45] *** Quits: computeiro (~Wender@189.37.66.97) (Remote host closed the connection)
[13:59:52] <hexnewbie> check_call(['git', 'checkout'], cwd=git_dir); (something that does the rm, I don't like it); check_call(['git', 'reset', '--hard', 'HEAD'], cwd=git_dir); check_call(['git', 'rebase'], cwd=git_dir);
[13:59:53] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[14:00:14] *** Quits: _Ev (~ev@user/ev/x-8999918) (Quit: Leaving.)
[14:00:44] <patchie> I am running this code: df['emailBody'] = df['emailBody'].map(html.unescape) And getting the following error message: "TypeError: argument of type 'NoneType' is not iterable". How can i avoid it?
[14:01:21] *** Joins: jpic (~jpic@pop.92-184-108-151.mobile.abo.orange.fr)
[14:01:25] <patchie> i have tried to run --> df = df[df['emailBody'] != ""] <-- and --> df = df[df['emailBody'] != None]
[14:01:34] <patchie> but it doesnt help
[14:01:38] <patchie> anyone?
[14:01:50] <Yhg1s> patchie: you'll have to look at the actual traceback to see *what* is None.
[14:02:09] <patchie> some of the rows in the emailbody column is None
[14:02:13] <Yhg1s> patchie: is df['emailBody'] None? Or does it happen somewhere in html.unescape?
[14:02:28] <Yhg1s> patchie: okay, then check df['emailBody'] before you try to iterate over it with map.
[14:03:05] <patchie> Yhg1s: I tried, with the two lines i pasted above. shouldnt those help?
[14:03:28] <patchie> df = df[df['emailBody'] != None]
[14:04:02] <Yhg1s> patchie: it's really hard to tell in isolation. I would just do "if df['emailBody'] is not None: df['emailBody'] = df['emailBody'].map(html.unescape)" (if I were inclined to do this kid of thing in the first place, which is not very likely).
[14:04:52] *** Quits: MrC (Ben@mrbenc.net) (Quit: Reboot, Updating ZNC, or Switching servers.)
[14:04:57] <patchie> but at the same time, i want to remove the lines if it doesnt have anything in that column
[14:05:05] *** Joins: MrC (Ben@mrbenc.net)
[14:05:31] <patchie> so, it seems that df = df[df['emailBody'] != None] doesnt work..
[14:06:34] *** Joins: _Ev (~ev@user/ev/x-8999918)
[14:07:15] *** Joins: pycurious (~Adium@user/pycurious)
[14:07:29] <Yhg1s> patchie: you may want df[df['emailBody'].isnull()]
[14:07:37] <themill> patchie: likely you want the notnull() method
[14:07:42] <Yhg1s> eh, not null.
[14:07:53] <patchie> thanks! will try
[14:08:01] *** Quits: s1b1 (~s1b1@user/s1b1) (Ping timeout: 245 seconds)
[14:08:39] <themill> (or dropna())
[14:09:34] <patchie> it works, thanks!
[14:10:00] *** Joins: nomic (~nomic@185.198.243.251)
[14:14:37] *** Joins: Naan (~Naan@user/naan)
[14:14:52] *** Quits: nomic (~nomic@185.198.243.251) (Client Quit)
[14:15:14] *** Quits: rundown (~eb0t@90.198.61.154) (Ping timeout: 258 seconds)
[14:17:02] *** Joins: rundown (~eb0t@90.210.90.151)
[14:17:03] *** Joins: s1b1 (~s1b1@user/s1b1)
[14:17:06] *** Quits: jpic (~jpic@pop.92-184-108-151.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[14:17:07] *** Quits: tWqaq (~tWqaq@180.169.35.114) (Remote host closed the connection)
[14:24:55] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[14:27:14] *** dcaro is now known as dcaro_lunch
[14:28:51] *** Quits: shad (~shad@user/shad) (Ping timeout: 245 seconds)
[14:29:51] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 260 seconds)
[14:35:47] *** Joins: irrgit (~irrgit@192.241.175.183)
[14:37:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:41:52] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[14:41:57] *** Quits: orange (~orangeext@user/orangeextract) (Quit: Leaving)
[14:42:18] *** Quits: pycurious (~Adium@user/pycurious) (*.net *.split)
[14:42:18] *** Quits: zepolen (~zepolen@ppp-94-66-223-35.home.otenet.gr) (*.net *.split)
[14:42:18] *** Quits: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de) (*.net *.split)
[14:42:18] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (*.net *.split)
[14:42:18] *** Quits: cth (~Cthulchu@193.194.107.250) (*.net *.split)
[14:42:18] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (*.net *.split)
[14:42:18] *** Quits: stranac (~stranac@195.29.239.126) (*.net *.split)
[14:42:18] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (*.net *.split)
[14:42:18] *** Quits: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963) (*.net *.split)
[14:42:18] *** Quits: vlm (~vlm@user/vlm) (*.net *.split)
[14:42:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[14:42:18] *** Quits: noarb- (~noarb@user/noarb) (*.net *.split)
[14:42:18] *** Quits: rgp (~rgp@user/rgp) (*.net *.split)
[14:42:18] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (*.net *.split)
[14:42:18] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[14:42:18] *** Quits: rexbinary (~rexbinary@user/rexbinary) (*.net *.split)
[14:42:18] *** Quits: c4017w (~c4017@209.52.68.8) (*.net *.split)
[14:42:18] *** Quits: Vonter (~Vonter@user/vonter) (*.net *.split)
[14:42:18] *** Quits: lastshell (~lastshell@user/lastshell) (*.net *.split)
[14:42:18] *** Quits: Viewday (~Viewday@user/viewday) (*.net *.split)
[14:42:18] *** Quits: drogas (~drogas@jump2.jet.uk) (*.net *.split)
[14:42:18] *** Quits: mcglk_ (~mcglk@131.191.49.120) (*.net *.split)
[14:42:18] *** Quits: nawcom (~nawcom@bulldadachat.com) (*.net *.split)
[14:42:18] *** Quits: runelind (~runelind@user/runelind) (*.net *.split)
[14:42:18] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (*.net *.split)
[14:42:18] *** Quits: sgn (~sgn@user/sgn) (*.net *.split)
[14:42:18] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[14:42:18] *** Quits: aead (~aead@user/aead) (*.net *.split)
[14:42:18] *** Quits: saschi (~saschi@user/saschi) (*.net *.split)
[14:42:18] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (*.net *.split)
[14:42:18] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (*.net *.split)
[14:42:18] *** Quits: fredrikhl (~fhl@myrsnipa.uio.no) (*.net *.split)
[14:42:18] *** Quits: alex11 (~alex11@user/alex11) (*.net *.split)
[14:42:18] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (*.net *.split)
[14:42:18] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[14:42:18] *** Quits: \mSg (mSg@user/msg/x-0285936) (*.net *.split)
[14:42:18] *** Quits: akimbo (~akimbo@customer-145-40-27-9.stosn.net) (*.net *.split)
[14:42:18] *** Quits: kvik (~kvik@80.240.23.8) (*.net *.split)
[14:42:18] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[14:42:18] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (*.net *.split)
[14:42:18] *** Quits: jamwil (~jamwil@user/jamwil) (*.net *.split)
[14:42:18] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[14:42:18] *** Quits: greknod28 (~grek@120.88.171.98) (*.net *.split)
[14:42:18] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (*.net *.split)
[14:42:18] *** Quits: martums (~martums@user/martums) (*.net *.split)
[14:42:18] *** Quits: enrh (~enrh@user/enrh) (*.net *.split)
[14:42:18] *** Quits: grnman_ (~grnman@159.89.27.73) (*.net *.split)
[14:42:18] *** Quits: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com) (*.net *.split)
[14:42:18] *** Quits: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com) (*.net *.split)
[14:42:18] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[14:42:18] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (*.net *.split)
[14:42:18] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[14:42:18] *** Quits: suffer (znc@mutant.penguin.fyi) (*.net *.split)
[14:42:18] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[14:42:18] *** Quits: duracrisis (~kkh@user/duracrisis) (*.net *.split)
[14:42:18] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[14:42:18] *** Quits: rjwiii (~mr-rich@idlerpg/player/mr-rich) (*.net *.split)
[14:42:18] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (*.net *.split)
[14:42:18] *** Quits: et (~et@user/et) (*.net *.split)
[14:42:18] *** Quits: bdeshi (~bdeshi@bdeshi.space) (*.net *.split)
[14:42:19] *** Quits: madprops (~hj8oijo@user/madprops) (*.net *.split)
[14:42:19] *** Quits: ballingt (sid190590@helmsley.irccloud.com) (*.net *.split)
[14:42:19] *** Quits: OPK (~OPK@user/opk) (*.net *.split)
[14:42:19] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (*.net *.split)
[14:42:19] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[14:42:19] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[14:42:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[14:42:19] *** Quits: kr0nk (~kr0nk@user/kr0nk) (*.net *.split)
[14:42:19] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (*.net *.split)
[14:42:19] *** Quits: JerryXiao (~JerryXiao@user/jerryxiao) (*.net *.split)
[14:42:19] *** Quits: faceface (~faceface@user/faceface) (*.net *.split)
[14:42:19] *** Quits: Throgkt (~Throgkt@user/throgkt) (*.net *.split)
[14:42:19] *** Quits: dodo (~dodo@user/dodo) (*.net *.split)
[14:42:19] *** Quits: janemba (~janemba@94.204.254.193) (*.net *.split)
[14:42:19] *** Quits: _xor (~xor@72.49.199.147) (*.net *.split)
[14:42:19] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (*.net *.split)
[14:42:19] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[14:42:19] *** Quits: Memory (sid459764@user/memory) (*.net *.split)
[14:42:19] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[14:42:19] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (*.net *.split)
[14:42:19] *** Quits: moose (~moose@user/moose) (*.net *.split)
[14:42:19] *** Quits: pyeverything (~pyeveryth@goku.bu.edu) (*.net *.split)
[14:42:19] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[14:42:19] *** Quits: b_jonas (~x@catv-176-63-3-240.catv.broadband.hu) (*.net *.split)
[14:42:19] *** Quits: joel135 (sid136450@hampstead.irccloud.com) (*.net *.split)
[14:42:19] *** Quits: AnimalFarmPig (~quassel@catv-176-63-2-129.catv.broadband.hu) (*.net *.split)
[14:42:19] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[14:42:19] *** Quits: michele (~eraser@user/michele) (*.net *.split)
[14:42:19] *** Quits: moto (~moto@user/moto) (*.net *.split)
[14:42:19] *** Quits: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net) (*.net *.split)
[14:42:19] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[14:42:19] *** Quits: OliverUK (~opashley@70.138.105.34.bc.googleusercontent.com) (*.net *.split)
[14:42:19] *** Quits: aluria_ (~aluria@canonical/aluria) (*.net *.split)
[14:42:19] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[14:42:19] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (*.net *.split)
[14:42:19] *** Quits: lifefir3 (~lifefir3@152.37.120.101) (*.net *.split)
[14:42:19] *** Quits: Saxtheowl (~roro@78.192.226.182) (*.net *.split)
[14:42:19] *** Quits: Yasumoto (~Yasumoto@136.152.37.118) (*.net *.split)
[14:42:19] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[14:42:19] *** Quits: ToAruShiroiNeko (~eva@user/toarushiroineko) (*.net *.split)
[14:42:19] *** Quits: vbgunz (~vbgunz@35.141.71.47) (*.net *.split)
[14:42:19] *** Quits: Tiago_Paolini (sid172748@hampstead.irccloud.com) (*.net *.split)
[14:42:19] *** Quits: lidless (sid523173@tinside.irccloud.com) (*.net *.split)
[14:42:19] *** Quits: coldmountain (sid484352@helmsley.irccloud.com) (*.net *.split)
[14:42:19] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (*.net *.split)
[14:42:19] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[14:42:19] *** Quits: mtg (~mtg@209.250.241.226) (*.net *.split)
[14:42:19] *** Quits: sideeffex5613 (~sideeffex@user/sideeffex) (*.net *.split)
[14:42:19] *** Quits: ouzel8___ (~ouzel8_@shams.boastblast.com) (*.net *.split)
[14:42:19] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[14:42:19] *** Quits: CrunchyChewie (~CrunchyCh@user/crunchychewie) (*.net *.split)
[14:42:19] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[14:42:19] *** Quits: klotzhauer (~klotzhaue@gibtesnochklopapier.de) (*.net *.split)
[14:42:19] *** Quits: rdvn (~rdvn@user/rdvn) (*.net *.split)
[14:42:19] *** Quits: mastardet (~mastardet@user/mastardet) (*.net *.split)
[14:42:19] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[14:42:19] *** Quits: dstufft (~dstufft@shitbird.caremad.io) (*.net *.split)
[14:42:19] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[14:43:09] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[14:43:10] *** Quits: [RiFo] (~RiFo@user/rifo) (Read error: Connection reset by peer)
[14:44:20] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:45:29] *** Joins: pycurious (~Adium@user/pycurious)
[14:45:29] *** Joins: zepolen (~zepolen@ppp-94-66-223-35.home.otenet.gr)
[14:45:29] *** Joins: jonaskabrink (~jonaskabr@ip1f12b838.dynamic.kabel-deutschland.de)
[14:45:29] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:45:29] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:45:29] *** Joins: cth (~Cthulchu@193.194.107.250)
[14:45:29] *** Joins: stranac (~stranac@195.29.239.126)
[14:45:29] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[14:45:29] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[14:45:29] *** Joins: vlm (~vlm@user/vlm)
[14:45:29] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:45:29] *** Joins: noarb- (~noarb@user/noarb)
[14:45:29] *** Joins: sideeffex5613 (~sideeffex@user/sideeffex)
[14:45:29] *** Joins: rgp (~rgp@user/rgp)
[14:45:29] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[14:45:29] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[14:45:29] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[14:45:29] *** Joins: c4017w (~c4017@209.52.68.8)
[14:45:29] *** Joins: Vonter (~Vonter@user/vonter)
[14:45:29] *** Joins: lastshell (~lastshell@user/lastshell)
[14:45:29] *** Joins: Viewday (~Viewday@user/viewday)
[14:45:29] *** Joins: madprops (~hj8oijo@user/madprops)
[14:45:29] *** Joins: drogas (~drogas@jump2.jet.uk)
[14:45:29] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[14:45:29] *** Joins: nawcom (~nawcom@bulldadachat.com)
[14:45:29] *** Joins: saschi (~saschi@user/saschi)
[14:45:29] *** Joins: runelind (~runelind@user/runelind)
[14:45:29] *** Joins: ballingt (sid190590@helmsley.irccloud.com)
[14:45:29] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[14:45:29] *** Joins: sgn (~sgn@user/sgn)
[14:45:29] *** Joins: akimbo (~akimbo@customer-145-40-27-9.stosn.net)
[14:45:29] *** Joins: tnez (~el@user/tnez)
[14:45:29] *** Joins: aead (~aead@user/aead)
[14:45:29] *** Joins: Deaygo (~Deaygo@let.deaygo.in)
[14:45:29] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[14:45:29] *** Joins: fredrikhl (~fhl@myrsnipa.uio.no)
[14:45:29] *** Joins: alex11 (~alex11@user/alex11)
[14:45:29] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[14:45:29] *** Joins: Echoz (~chris@user/echoz)
[14:45:29] *** Joins: \mSg (mSg@user/msg/x-0285936)
[14:45:29] *** Joins: kvik (~kvik@80.240.23.8)
[14:45:29] *** Joins: Nei (~ailin@user/nemui)
[14:45:29] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[14:45:29] *** Joins: jamwil (~jamwil@user/jamwil)
[14:45:29] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[14:45:29] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[14:45:29] *** Joins: greknod28 (~grek@120.88.171.98)
[14:45:29] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[14:45:29] *** Joins: martums (~martums@user/martums)
[14:45:29] *** Joins: enrh (~enrh@user/enrh)
[14:45:29] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[14:45:29] *** Joins: grnman_ (~grnman@159.89.27.73)
[14:45:29] *** Joins: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com)
[14:45:29] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[14:45:29] *** Joins: amosbird (~amosbird@13.75.119.182)
[14:45:29] *** Joins: mdw (~root@159.65.86.163)
[14:45:29] *** Joins: Forkk (~forkk@li926-228.members.linode.com)
[14:45:29] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[14:45:29] *** Joins: suffer (znc@mutant.penguin.fyi)
[14:45:29] *** Joins: duracrisis (~kkh@user/duracrisis)
[14:45:29] *** Joins: dgw (dgw@sopel/admin/dgw)
[14:45:29] *** Joins: et (~et@user/et)
[14:45:29] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[14:45:29] *** Joins: OPK (~OPK@user/opk)
[14:45:29] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[14:45:29] *** Joins: Geronimo (~Geronimo@user/geronimo)
[14:45:29] *** Joins: jkl (~jkl@user/jkl)
[14:45:29] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:45:29] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[14:45:29] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[14:45:29] *** Joins: JerryXiao (~JerryXiao@user/jerryxiao)
[14:45:29] *** Joins: faceface (~faceface@user/faceface)
[14:45:29] *** Joins: Throgkt (~Throgkt@user/throgkt)
[14:45:29] *** Joins: dodo (~dodo@user/dodo)
[14:45:29] *** Joins: janemba (~janemba@94.204.254.193)
[14:45:29] *** Joins: _xor (~xor@72.49.199.147)
[14:45:29] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[14:45:29] *** Joins: tkazi (~tkazi@user/tkazi)
[14:45:29] *** Joins: Memory (sid459764@user/memory)
[14:45:29] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[14:45:29] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[14:45:29] *** Joins: moose (~moose@user/moose)
[14:45:29] *** Joins: pyeverything (~pyeveryth@goku.bu.edu)
[14:45:29] *** Joins: Pixi (~Pixi@user/pixi)
[14:45:29] *** Joins: b_jonas (~x@catv-176-63-3-240.catv.broadband.hu)
[14:45:29] *** Joins: joel135 (sid136450@hampstead.irccloud.com)
[14:45:29] *** Joins: AnimalFarmPig (~quassel@catv-176-63-2-129.catv.broadband.hu)
[14:45:29] *** Joins: Oddity (Oddity@user/oddity)
[14:45:29] *** Joins: michele (~eraser@user/michele)
[14:45:29] *** Joins: moto (~moto@user/moto)
[14:45:29] *** Joins: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net)
[14:45:29] *** Joins: niko (~niko@libera/staff/niko)
[14:45:29] *** Joins: OliverUK (~opashley@70.138.105.34.bc.googleusercontent.com)
[14:45:29] *** Joins: aluria_ (~aluria@canonical/aluria)
[14:45:29] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[14:45:29] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[14:45:29] *** Joins: lifefir3 (~lifefir3@152.37.120.101)
[14:45:29] *** Joins: Saxtheowl (~roro@78.192.226.182)
[14:45:29] *** Joins: Yasumoto (~Yasumoto@136.152.37.118)
[14:45:29] *** Joins: trashbird (~trashbird@user/trashbird)
[14:45:29] *** Joins: ToAruShiroiNeko (~eva@user/toarushiroineko)
[14:45:29] *** Joins: lidless (sid523173@tinside.irccloud.com)
[14:45:29] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[14:45:29] *** Joins: Tiago_Paolini (sid172748@hampstead.irccloud.com)
[14:45:29] *** Joins: coldmountain (sid484352@helmsley.irccloud.com)
[14:45:29] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[14:45:29] *** Joins: Jigsy (~Jigsy@user/jigsy)
[14:45:29] *** Joins: syrius (syrius@titan.stormtek.net)
[14:45:29] *** Joins: klotzhauer (~klotzhaue@gibtesnochklopapier.de)
[14:45:29] *** Joins: mtg (~mtg@209.250.241.226)
[14:45:29] *** Joins: ouzel8___ (~ouzel8_@shams.boastblast.com)
[14:45:29] *** Joins: a1paca (~a1paca@user/a1paca)
[14:45:29] *** Joins: CrunchyChewie (~CrunchyCh@user/crunchychewie)
[14:45:29] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[14:45:29] *** Joins: rdvn (~rdvn@user/rdvn)
[14:45:29] *** Joins: mastardet (~mastardet@user/mastardet)
[14:45:29] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[14:45:29] *** Joins: dstufft (~dstufft@shitbird.caremad.io)
[14:45:35] *** Quits: michele (~eraser@user/michele) (Max SendQ exceeded)
[14:45:35] *** Quits: ToAruShiroiNeko (~eva@user/toarushiroineko) (Max SendQ exceeded)
[14:45:55] *** Joins: michele (~eraser@user/michele)
[14:46:33] <_marco> Mo_bile, I don't see anything strange here, but I understand uwsgi "so much as I need it". I would investigate on the virtualenv, Is it there? Is it corrupted? Can I launch the app in a different WSGI container? Etc.
[14:46:40] *** Joins: pschmitt (~pschmitt@2001:470:69fc:105::1:24cb)
[14:47:24] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 244 seconds)
[14:50:51] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Remote host closed the connection)
[14:51:03] *** Joins: RiFo (~RiFo@user/rifo)
[14:51:14] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[14:51:20] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Remote host closed the connection)
[14:51:46] <nedbat> if i have a function that uses re.search, I write in the docstring "returns a list of lines that match a regex".  But it doesn't use match, it uses search.  Is there a better way to word that?
[14:52:10] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[14:52:10] <supakeen> 'fit'?
[14:52:58] <nedbat> hmm, do people say "this fits that regex"?
[14:53:06] <supakeen> i do
[14:53:11] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 264 seconds)
[14:53:23] <supakeen> but "suits", "satisfies", etc might be better english words for it :)
[14:53:29] <nedbat> "selected by"?
[14:53:56] <supakeen> I'd understand what that means!
[14:54:17] *** Joins: nomic (~nomic@185.198.243.251)
[14:54:34] *** Quits: vladoski (~vladoski@2001:b07:add:d406:d930:4058:83:ad92) (Remote host closed the connection)
[14:54:45] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 260 seconds)
[14:55:17] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[14:55:30] *** Joins: p-i- (~Ohmu@mx-ll-223.206.146-151.dynamic.3bb.co.th)
[14:56:01] *** Quits: esaym153 (~esaym153@net153.net) (Quit: leaving)
[14:57:05] *** Joins: iomari891 (~iomari891@197.210.53.184)
[14:59:28] <p-i-> I'm trying to listen on a websocket feed: https://bpa.st/LRDQ
[15:00:27] <p-i-> Instructions say the socket sends a ping ever 5s, and by setting enableTrace I can see that I DO get something every 5s. I guess b'\x89\x00' means ping somehow.
[15:00:36] <p-i-> Does anyone know what is being sent back? It's different every time...
[15:00:46] <_marco> nedbat, non English speaker here. I always use the word match when talking about regex. I think re.match is quite special in this sense and then I would add an extra text only if you actually use re.match ("returns a list of lines that match a regex *at the beginning of the line*")
[15:01:17] <nedbat> _marco: hmm
[15:01:42] <p-i-> And it's 6 bytes each time.
[15:01:57] *** Joins: jpic (~jpic@pop.92-184-108-151.mobile.abo.orange.fr)
[15:02:09] <p-i-> It seems the websocket transparently handles pings.
[15:02:48] <Yhg1s> nedbat: yeah, I would say 'returns a list of lines that match a regex anywhere in the line' or some such.
[15:03:06] <_marco> Yhg1s, agree with you, I was going to suggest the same
[15:03:08] <jinsun_> yeah re.match has kinda unexpected behavior for me too, I usually mean search or fullmatch when I say match (and I used to assume match was fullmatch before)
[15:03:14] <nedbat> Yhg1s: hard to fit into the one-line summary of a function :(
[15:03:17] <supakeen> p-i-: Those are 'just' empty messages contained within a websocket frame.
[15:03:35] <p-i-> supakeen: Why is each one different, though?
[15:04:23] <p-i-> They all start \x8a\x80 but then there's 4 extra bytes that seem to be random.
[15:04:56] <supakeen> \x89 is a ping request
[15:05:01] <supakeen> \x8a is a ping response
[15:06:33] *** Joins: orange (~orangeext@user/orangeextract)
[15:06:46] <supakeen> \x80 is a continuation frame with probably a timestamp after it or such
[15:06:56] <supakeen> but i'm unsure what the requirements are for a ping response
[15:08:19] *** Joins: Tas-sos (~Tas-sos@ppp141237077001.access.hol.gr)
[15:10:11] *** Quits: Mo_bile (~Mo_bile@dynamic-077-000-127-078.77.0.pool.telefonica.de) (Quit: Client closed)
[15:12:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[15:13:02] *** Joins: xcm_ (~xcm@user/xcm)
[15:13:10] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[15:13:49] *** Joins: Seiryu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[15:14:06] *** Joins: dre__ (~dre@120.156.30.159)
[15:14:09] *** Joins: harleypig0 (thelounge@harleypig.com)
[15:14:21] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[15:14:24] *** Joins: Maikel1 (~Maikel@130.61.63.136)
[15:14:32] *** Joins: manuels2 (~manuel@80.211.205.88)
[15:14:33] *** Joins: notepad7 (~notepad@129.159.46.243)
[15:14:35] *** Joins: llinguini_ (sid257922@id-257922.hampstead.irccloud.com)
[15:14:40] *** Quits: RavuAlHemio (~ondra@selene.ondrahosek.com) (Killed (NickServ (GHOST command used by Ravu)))
[15:14:42] *** Joins: Ravu (~ondra@selene.ondrahosek.com)
[15:14:49] *** Joins: ub (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[15:14:50] *** Joins: rvgate2 (~rvgate@user/rvgate)
[15:14:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:14:55] *** Joins: phlixi (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de)
[15:14:58] *** Joins: phryk_ (~totallyno@user/phryk)
[15:15:08] *** Joins: w1kl4s2 (~w1kl4s@user/w1kl4s)
[15:15:16] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[15:15:20] *** Joins: dwt__ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[15:15:20] *** Joins: taeaad_ (~taeaad@user/taeaad)
[15:15:21] *** Joins: norwood (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net)
[15:15:21] *** Joins: altendky_ (sid135382@id-135382.hampstead.irccloud.com)
[15:15:22] *** Quits: Maikel1 (~Maikel@130.61.63.136) (Client Quit)
[15:15:22] *** Joins: TingPing_ (sid2800@id-2800.helmsley.irccloud.com)
[15:15:25] *** Joins: jtanner_ (sid194399@id-194399.helmsley.irccloud.com)
[15:15:26] *** Joins: cyberjunkie_ (~cyberjunk@wireguard/tunneler/cyberjunkie)
[15:15:26] *** Joins: Pr0phet_ (sid505706@id-505706.hampstead.irccloud.com)
[15:15:26] *** Joins: millido_ (~millido@84.210.150.128)
[15:15:27] *** Joins: beanzilla_ (beanzilla@user/beanzilla)
[15:15:31] *** Joins: canton7_ (canton7@about/csharp/canton7)
[15:15:31] *** Joins: yyolk (~yolk@2600:1f16:f4a:2100:77f5:a0ec:35f:147b)
[15:15:32] *** Joins: jesse-s_ (sid98646@id-98646.hampstead.irccloud.com)
[15:15:32] *** Joins: ldm (~ldm@hacksoc/member)
[15:15:32] *** Joins: cebor_ (~cebor@user/cebor)
[15:15:33] *** Joins: Andrew_ (~andrew@user/andrewyu)
[15:15:33] *** Joins: quesker_ (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[15:15:34] *** Joins: cursey_ (~cursey@user/cursey)
[15:15:34] *** Joins: vishwin60 (~brioux@pool-108-36-200-79.phlapa.fios.verizon.net)
[15:15:34] *** Joins: dob1_ (~dob1@user/dob1)
[15:15:34] *** Joins: d3fn (~n0b0dy@user/defn)
[15:15:36] *** Joins: zettabyte_ (~zettabyte@user/zettabyte)
[15:15:37] *** Joins: Dotz0cat_ (~Dotz0cat@h194.118.90.75.dynamic.ip.windstream.net)
[15:15:37] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[15:15:38] *** Joins: vigumnov (~victori@cpe-76-174-179-126.socal.res.rr.com)
[15:15:41] *** Joins: brettgilio7 (~brettgili@x-node.gq)
[15:15:41] *** Joins: Maikel3 (~Maikel@130.61.63.136)
[15:16:02] *** Joins: Ara_ (~Ara@user/ara)
[15:16:02] *** Joins: DerpGusta (~quassel@user/derpgusta)
[15:16:20] *** Joins: BtbN_ (btbn@ffmpeg/developer/btbn)
[15:16:35] *** Joins: oprypin_ (~irc@pryp.in)
[15:16:49] *** Joins: kcrk_ (~kcrk@user/kcrk)
[15:17:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:17:01] *** Joins: dharrigan_ (~dharrigan@user/dharrigan)
[15:17:01] *** Joins: slavfox_ (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[15:17:01] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[15:17:03] *** Joins: bfortifi- (~bfortifie@user/bfortified)
[15:17:14] *** Joins: xy (~icy@user/icy)
[15:17:15] *** Joins: odrling_ (~odrling@korone.aidoru.agency)
[15:17:25] *** Joins: majors (~majors@user/majors)
[15:17:27] *** Quits: iomari891 (~iomari891@197.210.53.184) (Ping timeout: 260 seconds)
[15:17:29] *** Joins: ComputerTech_ (~ComputerT@user/computertech)
[15:17:34] *** Joins: bparker_ (~nobody@user/bparker)
[15:17:36] *** Joins: goatish_ (~geclark@19.60.188.35.bc.googleusercontent.com)
[15:17:41] *** Joins: Alexer- (~alexer@alexer.net)
[15:17:54] *** Joins: jbe_ (~jbe@lysator/root/jbe)
[15:17:56] *** Joins: herjazz_ (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[15:18:00] *** Joins: zln1 (~zln@c80-217-230-193.bredband.tele2.se)
[15:18:03] *** Joins: cnsunyour (~sunyour@129.226.182.99)
[15:18:04] *** Joins: klys_ (~mdasoh@show.op8.us)
[15:18:05] *** Joins: gerard_ (~gerard@user/gerard)
[15:18:11] *** Joins: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[15:18:17] *** Joins: Shapeshi1ter (~Shapeshif@parakeet.ifi.uzh.ch)
[15:18:19] *** Joins: eblip (~eb0t@90.210.90.151)
[15:18:20] *** Joins: ringo__ (~ringo@157.230.117.128)
[15:18:21] *** Joins: Ulti_ (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com)
[15:18:22] *** Joins: lz__ (l@gateway/vpn/protonvpn/lz/x-63480406)
[15:18:51] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[15:19:01] *** Joins: laman2 (~laman@rego.ai)
[15:20:39] *** Joins: sud_ (~sud@user/sud)
[15:21:05] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[15:21:12] *** Joins: apollo13_ (apollo13@django/moderator/apollo13)
[15:21:21] *** Joins: Avaris_ (~Avaris@avar.is)
[15:21:48] *** Joins: vladoski (~vladoski@2001:b07:add:d406:6189:192d:cc77:4cb2)
[15:21:57] *** Parts: mp4 (misha@user/mp3) ()
[15:21:59] *** Joins: fikran (~fikran@user/fikran)
[15:22:06] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:22:27] *** Quits: rundown (~eb0t@90.210.90.151) (*.net *.split)
[15:22:27] *** Quits: Klinda (~superleag@user/klinda) (*.net *.split)
[15:22:27] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (*.net *.split)
[15:22:27] *** Quits: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (*.net *.split)
[15:22:27] *** Quits: srhm (~srhm@user/srhm) (*.net *.split)
[15:22:27] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[15:22:27] *** Quits: dre_ (~dre@120.156.30.159) (*.net *.split)
[15:22:27] *** Quits: analoq (~yashi@user/dies) (*.net *.split)
[15:22:27] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[15:22:27] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (*.net *.split)
[15:22:27] *** Quits: millido (~millido@84.210.150.128) (*.net *.split)
[15:22:27] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[15:22:27] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (*.net *.split)
[15:22:27] *** Quits: llh (~llh@user/llh) (*.net *.split)
[15:22:27] *** Quits: frost (~frost@user/frost) (*.net *.split)
[15:22:27] *** Quits: lethu (~lethu@user/lethu) (*.net *.split)
[15:22:27] *** Quits: DerpGusta_ (~quassel@user/derpgusta) (*.net *.split)
[15:22:27] *** Quits: Maikel (~Maikel@130.61.63.136) (*.net *.split)
[15:22:27] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (*.net *.split)
[15:22:27] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (*.net *.split)
[15:22:27] *** Quits: Dotz0cat (~Dotz0cat@h194.118.90.75.dynamic.ip.windstream.net) (*.net *.split)
[15:22:27] *** Quits: botfather (~botfather@shell1.dds.nl) (*.net *.split)
[15:22:27] *** Quits: defn (~n0b0dy@user/defn) (*.net *.split)
[15:22:27] *** Quits: dharrigan (~dharrigan@user/dharrigan) (*.net *.split)
[15:22:27] *** Quits: bfortified (~bfortifie@user/bfortified) (*.net *.split)
[15:22:27] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (*.net *.split)
[15:22:27] *** Quits: zegalch (~zegalch@178.128.75.133) (*.net *.split)
[15:22:27] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (*.net *.split)
[15:22:27] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[15:22:27] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[15:22:27] *** Quits: Berrox (~songro@184-23-230-118.dedicated.static.sonic.net) (*.net *.split)
[15:22:27] *** Quits: dob1 (~dob1@user/dob1) (*.net *.split)
[15:22:27] *** Quits: oprypin (~irc@pryp.in) (*.net *.split)
[15:22:27] *** Quits: jbe (~jbe@lysator/root/jbe) (*.net *.split)
[15:22:27] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[15:22:27] *** Quits: daddy (ryan@hashbang/bdfl) (*.net *.split)
[15:22:27] *** Quits: voldial (~user@user/voldial) (*.net *.split)
[15:22:27] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[15:22:27] *** Quits: notepad (~notepad@129.159.46.243) (*.net *.split)
[15:22:27] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[15:22:27] *** Quits: brettgilio (~brettgili@x-node.gq) (*.net *.split)
[15:22:27] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[15:22:27] *** Quits: MercilessDeth (~brad@136.49.61.2) (*.net *.split)
[15:22:27] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[15:22:27] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[15:22:27] *** Quits: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406) (*.net *.split)
[15:22:27] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[15:22:27] *** Quits: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net) (*.net *.split)
[15:22:27] *** Quits: ComputerTech (~ComputerT@user/computertech) (*.net *.split)
[15:22:27] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[15:22:27] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[15:22:27] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[15:22:27] *** Quits: sud (~sud@user/sud) (*.net *.split)
[15:22:27] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (*.net *.split)
[15:22:27] *** Quits: Ulti (~matt@ec2-35-178-236-167.eu-west-2.compute.amazonaws.com) (*.net *.split)
[15:22:27] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[15:22:27] *** Quits: icy (~icy@user/icy) (*.net *.split)
[15:22:27] *** Quits: Shapeshifter (~Shapeshif@parakeet.ifi.uzh.ch) (*.net *.split)
[15:22:27] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[15:22:27] *** Quits: nickodd (~nickodd@user/nickodd) (*.net *.split)
[15:22:27] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[15:22:27] *** Quits: AndrewYu (~andrew@user/andrewyu) (*.net *.split)
[15:22:27] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[15:22:27] *** Quits: harleypig (thelounge@harleypig.com) (*.net *.split)
[15:22:27] *** Quits: or4n (~or4n@gerbera.qkka.org) (*.net *.split)
[15:22:27] *** Quits: hexley (examknow@bitbot/launchd) (*.net *.split)
[15:22:27] *** Quits: Avaris (~Avaris@avar.is) (*.net *.split)
[15:22:27] *** Quits: Alexer (~alexer@alexer.net) (*.net *.split)
[15:22:27] *** Quits: queue- (~nerd@rektnet.com) (*.net *.split)
[15:22:27] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[15:22:27] *** Quits: laman1 (~laman@rego.ai) (*.net *.split)
[15:22:27] *** Quits: majors_ (~majors@user/majors) (*.net *.split)
[15:22:27] *** Quits: canton7 (~canton7@about/csharp/canton7) (*.net *.split)
[15:22:27] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[15:22:27] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[15:22:27] *** Quits: flying_sausages (~flying_sa@user/flying-sausages/x-2113186) (*.net *.split)
[15:22:27] *** Quits: odrling (~odrling@korone.aidoru.agency) (*.net *.split)
[15:22:27] *** Quits: mari0 (~mario@user/mari0) (*.net *.split)
[15:22:27] *** Quits: vishwin (~brioux@pool-108-36-200-79.phlapa.fios.verizon.net) (*.net *.split)
[15:22:27] *** Quits: yolk (~yolk@ec2-18-220-87-120.us-east-2.compute.amazonaws.com) (*.net *.split)
[15:22:27] *** Quits: goatish (~geclark@19.60.188.35.bc.googleusercontent.com) (*.net *.split)
[15:22:27] *** Quits: B33F_1337 (~b33f1337@host.b33f1337.com) (*.net *.split)
[15:22:27] *** Quits: xcm (~xcm@user/xcm) (*.net *.split)
[15:22:27] *** Quits: ringo_ (~ringo@157.230.117.128) (*.net *.split)
[15:22:27] *** Quits: gerard (~gerard@user/gerard) (*.net *.split)
[15:22:27] *** Quits: rvgate (~rvgate@user/rvgate) (*.net *.split)
[15:22:27] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[15:22:27] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[15:22:27] *** Quits: TingPing (sid2800@helmsley.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: jtanner (sid194399@helmsley.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: zettabyte (~zettabyte@user/zettabyte) (*.net *.split)
[15:22:27] *** Quits: Juhaz (juhaz@hilla.kapsi.fi) (*.net *.split)
[15:22:27] *** Quits: murr4y (ali@user/murr4y) (*.net *.split)
[15:22:27] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[15:22:27] *** Quits: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com) (*.net *.split)
[15:22:27] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[15:22:27] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[15:22:27] *** Quits: jesse-s (sid98646@hampstead.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: altendky (sid135382@hampstead.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: llinguini (sid257922@hampstead.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: Pr0phet (sid505706@hampstead.irccloud.com) (*.net *.split)
[15:22:27] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[15:22:27] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[15:22:27] *** Quits: phlixi_ (~phlixi@aftr-82-135-86-19.dynamic.mnet-online.de) (*.net *.split)
[15:22:27] *** Quits: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com) (*.net *.split)
[15:22:27] *** Quits: mage (~julien@orval.bbpf.belspo.be) (*.net *.split)
[15:22:27] *** Quits: petaflot (~root@lutolf.vserver.nimag.net) (*.net *.split)
[15:22:27] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[15:22:27] *** Quits: Stench (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (*.net *.split)
[15:22:27] *** Quits: AStorm (astralstor@bc01n02.hswaw.net) (*.net *.split)
[15:22:27] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[15:22:27] *** Quits: norwood- (~mostlyhum@104-3-188-144.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[15:22:27] *** Quits: cyberjunkie (~cyberjunk@wireguard/tunneler/cyberjunkie) (*.net *.split)
[15:22:27] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[15:22:27] *** Quits: gaken (~gaken@user/galen) (*.net *.split)
[15:22:27] *** Quits: Fulgen (znc@mail.maxmitti.tk) (*.net *.split)
[15:22:28] *** apollo13_ is now known as apollo13
[15:22:28] *** dharrigan_ is now known as dharrigan
[15:22:28] *** Dotz0cat_ is now known as Dotz0cat
[15:22:28] *** manuels2 is now known as manuels
[15:22:28] *** Ara_ is now known as Ara
[15:22:28] *** w1kl4s2 is now known as w1kl4s
[15:22:28] *** brettgilio7 is now known as brettgilio
[15:22:28] *** notepad7 is now known as notepad
[15:22:28] *** beanzilla_ is now known as beanzilla
[15:22:28] *** quesker_ is now known as quesker
[15:22:28] *** ub is now known as ubert
[15:22:29] *** BtbN_ is now known as BtbN
[15:22:29] *** slavfox_ is now known as slavfox
[15:22:29] *** Maikel3 is now known as Maikel
[15:22:29] *** canton7_ is now known as canton7
[15:22:29] *** Avaris_ is now known as Avaris
[15:22:29] *** harleypig0 is now known as harleypig
[15:22:29] *** rvgate2 is now known as rvgate
[15:22:29] *** zettabyte_ is now known as zettabyte
[15:22:31] *** llinguini_ is now known as llinguini
[15:22:31] *** altendky_ is now known as altendky
[15:22:31] *** jtanner_ is now known as jtanner
[15:22:31] *** Pr0phet_ is now known as Pr0phet
[15:22:31] *** TingPing_ is now known as TingPing
[15:22:32] *** jesse-s_ is now known as jesse-s
[15:22:33] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:22:45] *** Joins: srhm (~srhm@user/srhm)
[15:23:06] *** Joins: gaken (~gaken@user/galen)
[15:23:09] *** Joins: jjhoo (jahakala@user/jjhoo)
[15:23:10] *** Joins: analoq (~yashi@user/dies)
[15:23:16] *** Joins: mehwork (~mehwork@98.185.199.35.bc.googleusercontent.com)
[15:23:20] *** Joins: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com)
[15:23:21] *** Joins: botfather (~botfather@shell1.dds.nl)
[15:23:26] *** Joins: Klinda (~superleag@user/klinda)
[15:23:26] *** Joins: or4n (~or4n@gerbera.qkka.org)
[15:23:27] *** Quits: orange (~orangeext@user/orangeextract) (Quit: Leaving)
[15:23:27] *** Joins: MercilessDeth (~brad@136.49.61.2)
[15:23:31] *** Quits: kenoba (~kenoba@user/kenoba) (Ping timeout: 260 seconds)
[15:23:42] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[15:24:08] *** Quits: jpic (~jpic@pop.92-184-108-151.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[15:24:12] *** Joins: zegalch (~zegalch@178.128.75.133)
[15:24:39] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:26:44] *** jbe_ is now known as jbe
[15:27:28] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 265 seconds)
[15:28:19] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[15:28:43] <_Ev> I could use a hand with this?:   https://replit.com/@evanesoteric/listformatting#main.py      # Formatting spaces out of a list (basically-ish)
[15:28:48] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[15:28:54] *** Joins: AStorm (astralstor@bc01n02.hswaw.net)
[15:29:14] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[15:29:19] *** Joins: daddy (ryan@hashbang/bdfl)
[15:29:21] *** Parts: wodim (~zzz@2605:6400:30:f3cc:fa83:71b3:af31:d023) (leaving)
[15:29:34] *** Joins: ST47 (~ST47@wikimedia/st47)
[15:29:48] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[15:29:50] *** Joins: hexley (examknow@bitbot/launchd)
[15:30:11] *** Joins: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net)
[15:30:46] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[15:30:47] *** Joins: murr4y (ali@user/murr4y)
[15:30:48] *** Joins: ubert1 (~Thunderbi@91.141.66.139.wireless.dyn.drei.com)
[15:30:49] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[15:30:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[15:30:57] *** Quits: hifi (hifi@m.vi.fi) (Remote host closed the connection)
[15:31:14] *** Joins: hifi (hifi@m.vi.fi)
[15:31:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:31:55] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[15:32:05] *** Joins: Dev0n (~Dev0n@user/dev0n)
[15:32:15] *** Joins: Soldofor (~Soldofor@2a02:2f0f:b000:b400:846c:5e65:c6d8:4ea5)
[15:32:42] *** Joins: de-facto (~de-facto@user/de-facto)
[15:33:40] <_Ev> I should probably convert to a list first then iterate thorough it
[15:35:14] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[15:35:32] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[15:35:39] <gitesh> how does session is working in this code ? -----> https://bpa.st/XCOQ
[15:35:52] *** Joins: de-facto (~de-facto@user/de-facto)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:08] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[15:36:13] <gitesh> I read session works on the top of cookies which is sign cryptographically
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:31] <gitesh> here I am not setting any cookie then how the code is still working
[15:36:32] *** Joins: kenoba (~kenoba@user/kenoba)
[15:36:57] <varaindemian> `hex(ord('C')^69)` -> `0x6`. How can I get `0x06` as output?
[15:37:00] *** saribro is now known as swinnenb
[15:37:34] <gitesh> I got that
[15:37:59] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 260 seconds)
[15:38:04] <deniska> varaindemian: '0x{:02x}'.format(ord('C') ^ 69)
[15:38:25] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[15:38:27] *** Joins: aztec (~Felipe@2804:2238:7d2:4400:ec72:462:453c:39d)
[15:38:49] *** Joins: cursey (~cursey@user/cursey)
[15:39:27] <varaindemian> deniska: beautiful!
[15:39:33] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Read error: Connection reset by peer)
[15:44:41] *** Joins: jpic (~jpic@pop.92-184-108-151.mobile.abo.orange.fr)
[15:46:00] *** vishwin60 is now known as vishwin
[15:46:01] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[15:46:04] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Remote host closed the connection)
[15:48:13] *** Joins: driib (~driib@185.65.135.251)
[15:48:47] <gitesh> i can understand request object, but what is session object i mean there is either request or response then where does the session come from
[15:48:55] *** Joins: shad (~shad@user/shad)
[15:48:56] <_Ev> I got it, all good.
[15:48:58] <gitesh> i think session object is also a request object
[15:49:05] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[15:49:17] <niluje> gitesh: open the "network" tab of your browser, you'll see there is a cookie involved
[15:49:33] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[15:49:56] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[15:50:30] <gitesh> niluje: yes i see that but that is request object's header isn't it
[15:50:36] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[15:51:01] *** Joins: fluter (~fluter@user/fluter)
[15:51:36] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:51:42] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[15:53:36] *** Joins: Pickchea (~private@user/pickchea)
[15:55:01] <niluje> gitesh: yes
[15:56:58] <niluje> gitesh: when you return from a view, flask builds the http response and asks the browser to store a cookie. This cookie is then sent by the browser for the following reuqests
[15:57:26] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[15:57:35] <gitesh> niluje: got it
[15:58:14] <niluje> gitesh: open a terminal and run the following commands
[15:58:18] <niluje> curl http://localhost:5000
[15:58:20] <niluje> curl http://localhost:5000/login
[15:58:24] <niluje> curl http://localhost:5000/login -d 'username=xxx'
[15:58:29] <niluje> see the difference in the headers returned
[15:59:08] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[15:59:34] *** phryk_ is now known as phryk
[15:59:38] <niluje> by default, curl doesn't store cookies so if you curl again http://localhost:5000/ after login, you'll see the form displayed (because curl didn't send cookies)
[15:59:41] *** Joins: zeden (~zeden@user/zeden)
[16:00:44] <flower_> grawity, the focus thing in curses we talked about yesterday, I could solve this way: http://paste.debian.net/1217057/
[16:00:53] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:01:14] *** Parts: SlaveGeek334269 (~SlaveGeek@gateway/vpn/pia/slavegeek334269) ()
[16:01:32] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:01:52] <niluje> gitesh: and last thing, this is done by flask here : https://github.com/pallets/flask/blob/main/src/flask/app.py#L1887 — when you return a response, process_response is called which updates the HTTP response with the cookie
[16:02:15] <flower_> grawity, a bit trial and error, not really knowing yet with which kind of data I'm dealing with. The key is '27'. str(key) is 9173 (FocusIn) or 9179 (focusOut)
[16:02:43] *** Joins: rany (~rany@user/rany)
[16:02:47] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[16:02:49] *** Joins: Juhaz (juhaz@hilla.kapsi.fi)
[16:03:01] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 245 seconds)
[16:03:01] <gitesh> niluje: okay thatnks
[16:03:07] *** Joins: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net)
[16:03:11] *** Joins: zeden (~zeden@user/zeden)
[16:03:39] <flower_> grawity, when converting to ascii I get '[I' and '[O', those make sense, but I couldn't handle/ 'grab' them.
[16:04:50] <flower_> grawity, after setting a terminal (lxterminal works, xterm not) to: echo -ne '\e[?1004h'
[16:05:59] <flower_> grawity, I tried to manage that setting via sys.stdout.write, but for some reason, it gets run after I close my curses application.
[16:06:01] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[16:06:40] <flower_> grawity, same is true for setting the terminal title via sys.stdout.write.
[16:08:44] *** Joins: b3z (~b3z@user/b3z)
[16:08:45] *** Joins: darksun (~darksun@user/darksun)
[16:08:47] <b3z> Hey, I installed PyNio with anaconda3 and activated the environment I installed it in. Though I cannot import Nio in a python console
[16:08:49] <b3z> Any help?
[16:09:32] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:09:46] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:10:19] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[16:13:27] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:16:01] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[16:16:18] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[16:16:57] <grawity> flower_: writes need to be followed by .flush() if they're not a full line
[16:17:32] <grawity> flower_: you sure .endswith() makes sense here? I mean the full value is known, why not compare that
[16:18:38] <flower_> grawity, I'll loo at .flush() thx.
[16:19:36] *** dcaro_lunch is now known as dcaro
[16:19:45] <flower_> grawity, comparing the full string didn't work. Maybe related to the fact that getch(), gets a char. not a string. Like I said, it was a bit trial and error.
[16:19:48] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:20:12] <grawity> whatever happened to trial and investigation
[16:20:42] <_Ev> [django]  Iterate over list and insert into SQLite.   form.save() only stored last string in list.  How do I force_insert=True or something?:   https://bpa.st/4CMQ
[16:20:55] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[16:24:26] <flower_> grawity, might need some polishing (relative newbie here), but cool that it works. thx for your insights.
[16:25:58] *** Quits: ubert1 (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[16:27:07] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Quit: Leaving)
[16:27:57] *** Joins: Ivii (~Ivyy@2001:a61:1304:3a01:3314:9e67:36cd:cd32)
[16:28:57] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[16:29:04] *** Joins: matkor (~matkor@ns0.ant.gliwice.pl)
[16:29:25] *** Quits: jpic (~jpic@pop.92-184-108-151.mobile.abo.orange.fr) (Remote host closed the connection)
[16:29:56] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:30:14] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[16:30:40] *** Joins: Artea (~Lufia@artea.com.pt)
[16:30:57] *** Joins: ano (~ano@user/ano)
[16:31:00] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[16:32:01] *** Joins: alkino (~quassel@user/alkino)
[16:32:45] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[16:33:05] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 264 seconds)
[16:37:06] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[16:37:07] *** Joins: OMGOMG (~bobrobert@sandy.ifi.uio.no)
[16:37:31] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[16:37:59] *** Joins: NeoCore (~neocore@45.152.181.133)
[16:39:10] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[16:39:18] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[16:42:35] *** Joins: Klinda (~superleag@user/klinda)
[16:42:43] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[16:42:56] *** Quits: fluter (~fluter@user/fluter) (Read error: Connection reset by peer)
[16:44:08] <flower_> grawity, is it expected that this functionality doesn't work in xterm. E.g. echo -ne '\e[?1004h' is working, but nothing is reported to my curses app, unlike with lxterminal and xfce4-terminal
[16:44:50] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:45:38] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[16:45:52] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:46:10] <flower_> grawity, sorry, it is working actually... hm, but then the sys.stdout.write is not working in xterm (with flush)... hm
[16:46:56] <deniska> _Ev: move line 8 inside a loop
[16:47:10] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:47:19] <deniska> _Ev: if you want a new row in a database, you should create a new model instance
[16:48:46] <deniska> _Ev: there's also a shorthand FooAccounts.objects.create(username=..., password=...)
[16:49:29] <bancroft> why does pathlib's is_symlink return more entries than find . -type d \! -name . -prune -o -type l -print?
[16:50:46] *** Joins: rany (~rany@user/rany)
[16:51:20] *** Joins: hendry (~hendry@210.23.22.2)
[16:52:05] <flower_> grawity, problem with flush probably, sorry for the noise.
[16:52:47] *** Joins: Sagiftw (~Guest63@2a00:a040:19b:d06d:a51e:bce1:cf28:b1d4)
[16:53:24] <_Ev> Ahh, of course. Thank you deniska!!
[16:54:34] <Sagiftw> Hi everyone. I'm trying to run an executable file from Python using os.system(), but the executable doesn't close automatically after it finished doing its job. Strangely, running the same python script that runs the executable from a Windows cmd makes it finish successfully. How can I solve this issue?
[16:57:03] *** Joins: legola (~legola@46.235.101.181)
[16:59:01] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Remote host closed the connection)
[17:00:00] *** Quits: herjazz_ (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:03:36] *** Sagiftw is now known as Dana123
[17:03:45] *** Dana123 is now known as Sagiftw
[17:06:37] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[17:07:18] <CrtxReavr> Sagiftw, conventional wisdom is to use the subprocess module, and not os.system for running external programs.
[17:07:55] <CrtxReavr> That doesn't address your issue directly, but it has a lot more knobs and options to work with.
[17:08:06] <flower_> how do I use sys.stdout.write, when I want to run this bash command: echo -ne '\e[?1004h'echo -ne '\e[?1004h'echo -ne '\e[?1004h'echo -ne '\e[?1004h'
[17:08:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:08:09] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[17:08:23] <flower_> how do I use sys.stdout.write, when I want to run this bash command: echo -ne '\e[?1004h'
[17:08:56] <flower_> struggling with the syntax
[17:09:01] <CrtxReavr> Um. . . sys.stdout.write() is to write to your terminal, not execute commands.
[17:09:29] <CrtxReavr> So. . . what exactly are you trying to accomplish?
[17:09:37] <deniska> use python to see how a string looks in it: echo -ne '\e[?1004h' | python3 -c 'import sys; print(repr(sys.stdin.read()))'
[17:09:38] <CrtxReavr> ie. "echo" is a shell command.
[17:10:25] <Sagiftw> CrtxReavr I tried using this module and wasn't able to solve the problem. When running this script in Pycharm, the execuable finishes successfully only if the box "Emulate terminal in output console" is checked in Run Configuration
[17:10:34] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:11:10] *** Joins: j00n (~mario@user/j00n)
[17:13:52] <flower_> CrtxReavr, '\x1b[?1004h'. Seems to work if I use that instead indeed.
[17:14:36] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-554b-70ff-fc13-b93c.res6.spectrum.com)
[17:15:24] <Wooble> (also probably use a library instead of manually printing escape sequences)
[17:15:50] *** Quits: p-i- (~Ohmu@mx-ll-223.206.146-151.dynamic.3bb.co.th) (Ping timeout: 260 seconds)
[17:17:18] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:17:31] <CrtxReavr> subprocess.Popen() supports a shell=True option.
[17:18:31] <Wooble> Sagiftw: what's the executable? Some programs check whether they're connected to a tty and behave differently
[17:18:41] <CrtxReavr> flower_, that looks like some kind of escape sequence in your shell. . . but what are you trying to do?
[17:18:50] <flower_> I was wondering, are there any performance benefits (speed), when using .Popen() instead of .Run() on Linux.
[17:19:05] <flower_> CrtxReavr, https://unix.stackexchange.com/questions/480052/how-do-i-detect-whether-my-terminal-has-focus-in-the-gui-from-a-shell-script
[17:19:27] *** Joins: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[17:19:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2de6:953c:45b8:6cf0)
[17:19:42] <CrtxReavr> Popen has lots of bells & whistles.  I think it's mainly focused on keeping a process running and intereacting with it, but you can do simple stuff with it do.
[17:19:54] *** Joins: Pickchea (~private@user/pickchea)
[17:20:24] <Wooble> flower_: calling Popen directly is probably slightly (possibly unmeasurably) faster, but the big advantage is it doesn't block and you can do other stuff while the process runs
[17:20:34] *** Joins: han-solo (~hanish@user/han-solo)
[17:20:45] <CrtxReavr> If you just want to run something and capture its output, then suprocess.check_output() is usually the best tool.
[17:21:16] <CrtxReavr> However. . . if you're using python, it's always best to use python. ..
[17:21:28] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[17:21:37] <CrtxReavr> So if there's a pythonic way to do what you're trying, then that's the best way to proceed.
[17:21:51] <yrlnry> A colleague asks, as a puzzle:
[17:21:53] <yrlnry> > My question is: How did I get ++i and --i to work in Python as it does in C?
[17:22:09] <CrtxReavr> i += 1
[17:22:11] <yrlnry> He didn't say any more about it.   I couldn't think of anything that seemed really reliable.
[17:22:32] <yrlnry> No, the question is how to fudge in support for the C-like _syntax_.
[17:22:37] <CrtxReavr> i -= 1
[17:22:49] <Wooble> yrlnry: i is an instance of a class with weird overrides of unary plus/minus.
[17:23:06] <yrlnry> That was the best thing I could think of too, but it seems very unreliable.
[17:23:17] <Wooble> most silly hacks are :)
[17:23:20] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[17:23:33] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[17:23:45] * CrtxReavr is a solutions-based coder.  I do not concern myself with silly, CompSci, ethereal nonsense.
[17:23:51] <yrlnry> I was hoping for something a little less very unreliable.
[17:24:31] <CrtxReavr> What's very un-reliable?
[17:25:05] <Wooble> yrlnry: you're hoping to make ++i actually work where type(i) is int, instead of guessing what your weird colleague did? You'll probably need to completely rewrite longobject.c
[17:25:45] <yrlnry> I think modifying the Python engine itself is probably out of scope for this problem.
[17:25:55] <yrlnry> If you do that, you're not doing it in Python any more.
[17:26:12] <CrtxReavr> Useless exercise.
[17:26:35] <yrlnry> You needn't concern yourself with it, then.
[17:26:50] <han-solo> `tmp, i = i, i+1`
[17:27:39] <Wooble> yrlnry: there are also horrifying things you can do with codecs rewriting the source at runtime which is less cheating than needing to recompile the interpreter, but *probably* in this case i is just a weird object.
[17:29:01] *** Leonarbro_ is now known as Leonarbro
[17:29:15] <han-solo> er, ++i would be `tmp, i = i+1, i`
[17:29:29] *** Quits: Sagiftw (~Guest63@2a00:a040:19b:d06d:a51e:bce1:cf28:b1d4) (Quit: Client closed)
[17:29:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[17:29:34] <yrlnry> I think you need to override `i.__pos__` to return a second object, which contains a reference to i.  The second object _also_ has overridden `__pos__`, which performs the actual increment, using the reference.  Then depending on the semantics you want it should probably return a third object that refuses to let you do it again.
[17:29:39] <yrlnry> Say a regular integer.
[17:30:03] *** Andrew_ is now known as AndrewYu
[17:30:08] <han-solo> er, ignore
[17:30:17] <Wooble> yrlnry: you can just track how many times __pos__ has been called
[17:30:41] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[17:30:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:30:58] <yrlnry> Yeah, I wonder if I thought that wouldn't work.
[17:31:05] *** Joins: grooverman (~grooverma@177.102.119.49)
[17:31:06] <yrlnry> Oh, it doesn't work.
[17:31:20] *** Joins: fikran (~fikran@user/fikran)
[17:31:36] <yrlnry> Because for example  consider (+i) * (+i).  If the object tracks state, it will think those +es are a ++.
[17:32:33] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[17:32:33] <Wooble> sure, but do you have a test suite running against your colleague's interpreter showing that *doesn't* break it? what about +-+i? :)
[17:33:29] <yrlnry> The object returned by +i can handle .__neg__ properly.  I think.  Whether this can be done at all is looking less and less clear.
[17:33:55] <yrlnry> (The fact that `+   +i` compiles and does `++i` is a flaw that probably cannot be fixed.)
[17:34:35] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Quit: Leaving)
[17:35:42] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:35:58] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[17:36:02] *** Joins: ricky (rickybob@gateway/vpn/protonvpn/rickybob)
[17:36:23] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:36:53] *** Joins: audio (~audio@2603-8081-1800-1546-0cb3-5ee7-df8a-1120.res6.spectrum.com)
[17:37:02] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (WeeChat 3.2)
[17:37:24] *** Joins: ub (~Thunderbi@91.141.46.110.wireless.dyn.drei.com)
[17:37:31] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:37:43] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:84fb:5024:2605:bd40)
[17:38:11] *** Quits: ubert (~Thunderbi@91.141.66.139.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[17:38:11] *** ub is now known as ubert
[17:38:47] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 264 seconds)
[17:38:48] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca)
[17:39:22] <bancroft>  why does pathlib's is_symlink return more entries than `find . -type d \! -name . -prune -o -type l -print`?
[17:40:06] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[17:41:11] *** Joins: junktext (~junktext@gateway/vpn/pia/junktext)
[17:41:51] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 258 seconds)
[17:41:51] *** Quits: mcpac82 (~textual@212.25.0.228) (Read error: Connection reset by peer)
[17:43:07] *** Joins: darksun (~darksun@user/darksun)
[17:45:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[17:49:11] <Wooble> bancroft: how are you using it? is_symlink itself can only check one file...
[17:49:51] <bancroft> Wooble: https://bpa.st/QFJA
[17:50:21] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[17:50:29] <yrlnry> You can't replace `int.__pos__` anyway, which is good, since doing so would be insane.
[17:50:37] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[17:50:44] <deniska> python hates fun
[17:50:56] *** Joins: Maikel (~Maikel@130.61.63.136)
[17:50:57] <Wooble> yrlnry: inb4 some crazy person posts ctypes code to do it
[17:51:22] <yrlnry> I was very amused a while back when I was using a Lisp interpreter that let me rebind `+` and `*`.
[17:52:15] <grym> yrlnry: i mean, it's just a symbol :)
[17:52:53] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[17:53:02] <yrlnry> Sure.  Although I think it I found it would not let me rebind `t`.
[17:53:22] <grym> yeah t and nil are probably sacrosanct
[17:53:39] <yrlnry> That would be too crazy even for CL  :)
[17:54:42] *** Quits: ricky (rickybob@gateway/vpn/protonvpn/rickybob) (Quit: pees oot)
[17:55:58] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:56:25] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:57:35] <deniska> https://gist.github.com/carymrobbins/7920536 found this, but that's for py2.something
[17:58:57] <yrlnry> @deniska: Thanks, I'll study.
[17:59:06] <Wooble> I'm confused about how they found 110 lines of code on twitter but neat.
[18:00:24] <deniska> Wooble: probably a thread
[18:00:41] *** Joins: fluter (~fluter@user/fluter)
[18:00:45] <Wooble> I hope it was a link to a blog post and not just line after line of code in tweets :)
[18:01:12] <yrlnry> The more I look at it, the more I like it.  Thanks again for the pointer.
[18:01:58] <Wooble> yrlnry: there was a thing that uses ctypes to change the value of 2 as well. predictably, this doesn't go very well :)
[18:02:54] <yrlnry> Does every instance of the literal constant 2 normally get compiled into a reference to the same underlying object then?
[18:03:25] <yrlnry> (I don't know anything about the Python compilation process or internal runtime representation.)
[18:03:26] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:03:27] <Wooble> yes, cpython interns small ints
[18:04:41] <Wooble> so x = 2;y = 2; x is y will evaluate to True
[18:05:29] <yrlnry> Roger that, thanks.
[18:05:43] <grym> maybe don't rely on that fact, though
[18:06:04] <yrlnry> Sure, implementation-specific.
[18:06:27] <grym> that, but also it's worth keeping the is/== line bright and clear even when it's safe not to
[18:06:54] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:08:11] *** Quits: yossarian (~yossarian@user/yossarian) (Ping timeout: 264 seconds)
[18:08:41] <Wooble> also "maybe" don't redefine 2 in your real code :P
[18:08:46] *** Quits: NeoCore (~neocore@45.152.181.133) (Quit: Leaving)
[18:08:59] <deniska> Wooble: it's fine if you don't forget to put back the original value
[18:08:59] <yrlnry> What could possibly go wrong?
[18:09:19] <Wooble> deniska: it's especially fun when you can't because you can't get a reference to the original value anymore :)
[18:09:20] <deniska> now getting the original value of 2 when you overwrote 2 is not that obvious
[18:09:51] <yrlnry> My colleague says that his implementation is even worse than what we imagined!  If I understand correctly, his `.__pos__` does something like looking at the previous stack frame to see if it was called from another call to `.__pos__` and if so it does its magic.
[18:11:01] <deniska> now luckily `int.from_bytes(b'\x02', 'little') is 2` is false :)
[18:12:35] *** Quits: Pixi (~Pixi@user/pixi) (Quit: Leaving)
[18:12:38] <yrlnry> Couldn't you just write `a=1; two = a+a`?   Or if the peephole optimizer is too clever for that to work, then something like  `a=7; if some_function_that_always_returns_true(...): a = 1; two = a+a`
[18:12:51] *** Joins: Pixi (~Pixi@user/pixi)
[18:12:52] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[18:13:01] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[18:14:55] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[18:15:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:15:36] <deniska> yrlnry: no, a+a will be equal (is) to the original 2
[18:16:08] <Yhg1s> Wooble: as it happens, 'x = 2; y = 2' within the same code block will make 'x is y' work regardless of the value of the literals, because Python re-uses the literal on the code object.
[18:16:10] <deniska> it's not a piphole optimizer, it's longobject.c going "aha, I don't have to create a new one"
[18:16:18] <Yhg1s> Wooble: so it's not just about interning small ints.
[18:16:32] <deniska> "I know just a place where to get the exact same one" :)
[18:16:37] <amosbird> Hi, how can I "for" over a list and modify some of the elements conditionally
[18:17:11] <deniska> amosbird: you'll need to know an index: `for i, el in elements: if something(el): elements[i] = something_else`
[18:17:43] <Yhg1s> deniska: you forgot 'enumerate'.
[18:17:50] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[18:17:51] <Wooble> Yhg1s: oh, neat.
[18:18:34] <amosbird> deniska: thanks
[18:18:38] <deniska> yeah, forgot enumerate()
[18:19:27] *** Quits: chele (~chele@user/chele) (Ping timeout: 260 seconds)
[18:19:45] <amosbird> yeah
[18:19:58] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:84fb:5024:2605:bd40) (Quit: Leaving)
[18:20:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[18:20:57] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[18:21:50] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 260 seconds)
[18:22:28] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[18:23:47] *** Joins: nomic (~nomic@185.198.243.251)
[18:25:35] <exarkun> How do you annotate a function like `def x(y=3):` for mypy?
[18:25:55] *** Quits: SallyAhaj_ (~SallyAhaj@user/sallyahaj) (Ping timeout: 260 seconds)
[18:26:10] <grym> exarkun: `def x(y:int=3)->None:`
[18:26:18] <grym> or whatever it actually returns
[18:26:58] <exarkun> Hm, wrong question I guess
[18:27:22] <exarkun> How do you annotate a function like `def z(x):` that accepts a function like `x` from above?
[18:27:32] <grym> x:typing.Callable
[18:28:04] <grym> and i think it's typing.Callable[int, None] or something, i forget exactly how to specify the signature and return
[18:28:05] <exarkun> just literally `typing.Callable`?  with no annotations for arguments or return?
[18:28:11] <exarkun> Eh ok
[18:28:20] <exarkun> What about the fact that it does not actually require an argument, though?
[18:28:23] <grym> oh, typing.Callable[[int],None]
[18:28:42] <grym> typing.Callable[[typing.Optional[int]],None] ?
[18:28:44] <grym> yich
[18:28:52] <exarkun> I /think/ the mypy docs specifically say that's not how you do it
[18:29:18] <grym> i'd have to check
[18:29:18] <exarkun> there's a note at the end of this section https://mypy.readthedocs.io/en/stable/kinds_of_types.html#optional-types-and-the-none-type
[18:30:06] *** Quits: strugee (~strugee@strugee.net) (Ping timeout: 245 seconds)
[18:30:07] *** Quits: Soldofor (~Soldofor@2a02:2f0f:b000:b400:846c:5e65:c6d8:4ea5) (Quit: Client closed)
[18:30:12] <grym> ah yeah "Optional[...] does not mean a function argument with a default value."
[18:30:26] <grym> so i think it's just [[int],return-type]
[18:30:28] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[18:30:46] *** Joins: strugee_ (~strugee@strugee.net)
[18:30:55] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Ping timeout: 258 seconds)
[18:31:21] <exarkun> And then I guess the function might as well not have a default, because `x()` won't type check, will it?
[18:32:34] *** Joins: upsala (~zcb@185.213.155.160)
[18:32:53] *** Quits: alius (~adrien@2a01:e0a:13c:cd90:32d0:42ff:fee4:47ab) (Quit: Konversation terminated!)
[18:33:06] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[18:33:37] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[18:34:05] <grym> no, that should be ok: https://mypy-play.net/?mypy=latest&python=3.10&gist=2f615584c29b662b5372cdc9b49514a9
[18:37:19] <exarkun> but https://mypy-play.net/?mypy=latest&python=3.10&gist=e5bf57e8d5465376d89a23b4f484a8a1 has an error
[18:37:56] *** Quits: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Quit: Leaving)
[18:38:02] *** Quits: zhukovgreen (~ab017i2@2a0f:8742:88c:0:b807:2471:8bd2:a836) (Quit: WeeChat 3.3)
[18:39:24] *** Joins: Akuli (~Akuli@82-203-163-146.bb.dnainternet.fi)
[18:39:57] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:40:11] <grym> why?
[18:40:39] <grym> oh, forgot to run it, he
[18:40:44] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[18:40:44] <grym> ... yeah, you got me!
[18:40:48] *** Joins: ExeciN (~ExeciN@user/nicexe)
[18:41:24] *** Quits: matkor (~matkor@ns0.ant.gliwice.pl) (Quit: Konversation terminated!)
[18:42:40] *** Joins: pro_z (~pro_z@37.214.49.15)
[18:42:49] <SnoopJ> Yhg1s, that's true of literals in general, right? My coarse understanding is that the compiler knows it can intern what it sees in source (after constant folding IIRC)
[18:44:40] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[18:45:40] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:45:47] <bjs> SnoopJ: it's because the constants are stored separately to the actual bytecode,  the compiler could I suppose choose to have different constants for each literal but it seems a bit pointless
[18:46:18] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:46:26] <bjs> something like `x=1; ...; y=1` will have two `LOAD_CONST n`  and only 1 entry in the co_consts field
[18:47:36] <SnoopJ> bjs, what I mean is that you can share across code objects, even
[18:47:41] <SnoopJ> AIUI
[18:47:47] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[18:48:26] <SnoopJ> `def f(): return 1337;; def g(): return 1337;;  # same instance`
[18:48:50] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:48:52] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[18:48:53] *** Joins: atomio (~neutrino@2409:4072:6d01:d14b:c54a:d00b:8fe6:267d)
[18:49:48] <bjs> SnoopJ: in that case they're in the same file, and really the code is a big hierarchy going from the module down
[18:50:01] <bjs> if f and g were in different files I suspect you'd get different instances
[18:50:56] *** Quits: manti7 (~manti7@185.107.94.249) (Ping timeout: 245 seconds)
[18:51:33] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:52:08] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[18:53:03] *** Joins: manti7 (~manti7@176.10.104.94)
[18:53:13] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:53:55] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Ping timeout: 260 seconds)
[18:54:36] *** Joins: hacksword (~hacksword@173.244.209.142)
[18:54:55] *** Quits: dalan62367 (~dalan@59-102-54-91.tpgi.com.au) (Ping timeout: 260 seconds)
[18:55:23] *** Quits: _marco (~mrc@88.207.208.253) (Ping timeout: 260 seconds)
[18:55:36] *** Joins: spetrosi (~spetrosi@ip-86-49-252-97.net.upcbroadband.cz)
[18:55:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:55:58] *** Joins: gusto (~Augustus@109.255.100.54)
[18:56:10] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:57:41] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[18:57:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:58:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2de6:953c:45b8:6cf0) (Ping timeout: 264 seconds)
[18:58:51] <Wooble> if you do that in the repl you also get different instances
[18:59:18] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--154.oracle-ocna.com)
[19:00:09] <vladoski> what's the easiest way to update a row in sqlalchemy with dynamic filters?
[19:00:25] <exarkun> each line in the repl is a separate compilation unit
[19:01:19] *** Joins: chele (~chele@user/chele)
[19:01:26] <bjs> Wooble: yah, for the same reason
[19:03:32] <SnoopJ> bjs, that's an interesting question, my intuition is that it'd be different yea, because it's a separate "unit" (I don't recall the CPython jargon for it)
[19:03:43] *** Joins: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net)
[19:06:24] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[19:07:42] *** Quits: zepolen (~zepolen@ppp-94-66-223-35.home.otenet.gr) (Quit: Konversation terminated!)
[19:08:17] *** Joins: dalan62367 (~dalan@203.214.91.172)
[19:08:38] *** Joins: magla (~gelignite@55d4dc2e.access.ecotel.net)
[19:08:46] *** Quits: atomio (~neutrino@2409:4072:6d01:d14b:c54a:d00b:8fe6:267d) (Quit: Leaving)
[19:10:21] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[19:10:30] *** Joins: Payam (~Payam@138.106.57.131)
[19:11:39] *** Joins: Stench (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[19:12:06] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[19:12:12] *** Joins: soman (~Guest18@83.139.147.234)
[19:12:55] <soman> What's difference between foo(10) and foo(x=10)? Why sometimes in the code the name of argument is specified?
[19:13:15] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[19:13:22] <SnoopJ> soman, the first one passes by position, the second one passes by name
[19:13:34] <bjs> soman: one passes a single positional argument 10, and the other passes a keyword argument "x" with value 10.  Whether they do the same thing or not depends on the function
[19:14:04] <bjs> soman: e.g. `def f(x): ...` then both are the same, but `def f(*args, x=None)` then they are not.
[19:14:34] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[19:14:52] <soman> SnoopJ bjs if I understand correctly when I have, say, 5 parameters with default values and I use name=val then then the value is passed for the arg 'name' whichever position it has?
[19:15:01] <SnoopJ> soman, correct
[19:15:14] <soman> SnoopJ, thanks
[19:15:28] <bjs> soman: yeah, by default in Python you can pass arguments either by name or just positionally
[19:15:41] <soman> bjs: ok, now it's clear thanks
[19:15:47] <SnoopJ> soman, every function call takes some number (possibly zero) of positional and keyword arguments. For 'normal' explicit arguments, you can use either, but there are ways to declare arguments as positional-only or keyword-only
[19:16:04] <SnoopJ> but once it's all put together in the runtime, you'll have a pile of positional stuff and a pile of keyword stuff, basically.
[19:16:18] <grym> ^ which is often nice because foo(1,45, 23.4, "hello") is mysterious at best :)
[19:17:47] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[19:17:55] <soman> grym: Agree. This is what we often can come across in cpp for example
[19:19:20] *** Joins: RougeR (~rougex250@user/rouger)
[19:19:32] *** Quits: kr0nk (~kr0nk@user/kr0nk) (Quit: leaving)
[19:19:41] <grym> it's a nasty trap regardless of the language
[19:19:58] *** Quits: spetrosi (~spetrosi@ip-86-49-252-97.net.upcbroadband.cz) (Quit: Leaving)
[19:20:20] <grym> it's nice to be able to force kwargs, judiciously
[19:21:37] <RougeR> heya
[19:21:51] <RougeR> ughh im super stuck with a problem at work and my brain is too tierd to figure it out
[19:21:51] <grym> howdy
[19:22:04] <RougeR> hihi
[19:22:38] <RougeR> got a nested datastructure which i need to synchronize with data that has already been saved to the database
[19:24:06] *** Joins: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se)
[19:25:19] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[19:25:23] <RougeR> {'events': [{'external_id', 'instances': [{'external_id', 'recordings': [{'external_id'}]]}}}]
[19:27:15] <SnoopJ> RougeR, `{'external_id', 'recordings': ...}` is a SyntaxError if I'm not mistaken
[19:27:34] <RougeR> SnoopJ, probbably
[19:27:39] <SnoopJ> unless this is the repr for some non-builtin object
[19:27:44] <RougeR> was just typing up an example now
[19:27:47] <SnoopJ> sure
[19:27:52] <RougeR> will link rather than here
[19:27:57] <SnoopJ> 👍
[19:28:13] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[19:28:33] *** Joins: luva7 (~luva@5.180.62.228)
[19:28:41] *** Joins: nomic (~nomic@185.198.243.251)
[19:29:16] *** Quits: nomic (~nomic@185.198.243.251) (Client Quit)
[19:29:52] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Remote host closed the connection)
[19:30:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[19:30:07] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[19:30:12] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:30:56] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[19:31:04] *** Quits: luva (~luva@5.180.62.230) (Ping timeout: 244 seconds)
[19:31:21] *** Quits: wolfgang (~wolfgang@101.174.167.116) (Remote host closed the connection)
[19:31:46] *** Quits: bss (bss@rie.incorporeal.org) (Ping timeout: 245 seconds)
[19:32:11] *** Quits: chele (~chele@user/chele) (Ping timeout: 245 seconds)
[19:32:44] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[19:32:57] *** Joins: tobybl_ (~tobybl@213.31.135.91)
[19:33:04] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:33:11] *** Quits: luva7 (~luva@5.180.62.228) (Ping timeout: 260 seconds)
[19:33:24] *** Joins: nomic (~nomic@185.198.243.251)
[19:33:46] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:34:53] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[19:34:56] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[19:35:03] *** Quits: tobybl (~tobybl@213.31.135.91) (Ping timeout: 260 seconds)
[19:36:04] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[19:36:07] <RougeR> SnoopJ,
[19:36:08] <RougeR> https://dpaste.org/h9q4
[19:36:59] <RougeR> and ive got to sync those with objects in the db which may or may not already exists
[19:37:13] <RougeR> and just because the parent item exists does not mean all the child items exist
[19:37:15] *** Joins: thyriaen (~thyriaen@dynamic-077-013-059-156.77.13.pool.telefonica.de)
[19:37:15] *** Joins: kujemiola (~kujemiola@2a01:114f:95e:c800:d97f:d01:bd57:4dc6)
[19:37:22] <RougeR> and the external_id is not primary_key
[19:37:36] <RougeR> the primary key is a surrogate uuid
[19:37:46] *** Joins: bigkerse (~theBigKer@173.170.105.38)
[19:38:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[19:38:54] <thyriaen> https://bpa.st/SWMQ i do not understand why this does not print my list :( any help ?
[19:39:19] *** Quits: kujemiola (~kujemiola@2a01:114f:95e:c800:d97f:d01:bd57:4dc6) (Client Quit)
[19:39:40] <bjs> thyriaen: what's the rest of the code? did you accidentally overwrite the list or print names?
[19:40:06] <thyriaen> bjs, i have other code before but i do not use those variable names
[19:40:17] <bjs> thyriaen: can you share the code before?
[19:40:18] <Pilate> something did
[19:40:41] *** Joins: fikran (~fikran@user/fikran)
[19:41:03] <thyriaen> bjs let me try to make the code smaller then i can :p
[19:41:11] <bjs> thyriaen: no don't do that, just paste the code you actually have
[19:41:26] <thyriaen> okay
[19:41:28] <bjs> if you make it smaller you might delete the part that broke this by accident
[19:41:35] *** Quits: RiFo (~RiFo@user/rifo) (Ping timeout: 260 seconds)
[19:41:39] <thyriaen> yea i will make sure to still have the accident
[19:44:43] <thyriaen> bjs okay this is really strange - i copied everything from the jupyter notebook into a different notebook - now on one it works and on the other i get the error
[19:44:46] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[19:44:59] *** Quits: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:45:04] <bjs> thyriaen: yeah,  I sort of expected that. It's why I asked to see what you actually had in the one that has the error :)
[19:45:06] *** Quits: sharperguy (~sharpergu@fnord.cryptophone.de) (Ping timeout: 245 seconds)
[19:45:20] <thyriaen> bjs i still have the error in that one
[19:45:28] <bjs> thyriaen: yeah
[19:45:54] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[19:46:03] <thyriaen> bjs do you think it will help if i show you my code ?
[19:46:08] *** Joins: nickodd (~nickodd@user/nickodd)
[19:46:09] <bjs> thyriaen: yeah
[19:46:15] *** Joins: mi6x3m (~mi6x3m@user/mi6x3m)
[19:46:17] <thyriaen> bjs, even though it does work if i copy paste everything
[19:46:19] <thyriaen> okay
[19:46:20] *** Joins: rama__ (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[19:46:21] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 245 seconds)
[19:46:35] <mi6x3m> hey python, is it possible to specify static linkage the MS runtime when building an extension with distutils?
[19:46:49] <mi6x3m> I am setting --compiler=mingw32 but it complains of missing runtime
[19:46:55] <bjs> thyriaen: yeah if you show *everything* probably we can work backwards and figure out what happened in the one that fails
[19:47:11] *** Quits: avikalp (~avikalp@49.32.237.245) (Ping timeout: 260 seconds)
[19:47:13] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:47:20] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[19:50:21] *** Joins: stwange (~j@82.21.202.140)
[19:51:00] *** dcaro is now known as dcaro_away
[19:51:24] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[19:51:30] *** Joins: dirtwash (~dirtwash@user/dirtwash)
[19:52:07] <dirtwash> what is the fastest way to read a gb sized text file line by line in python? In memory I get, but is tehre a faster way compared to 'for line in ...' ?
[19:52:58] <enyc> dirtwash: yes there are line based readers and other approaches!
[19:53:03] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[19:53:07] <enyc> don't remeber it all off top of my head
[19:53:25] <bjs> dirtwash: `with open("file.txt") as f: for line in f: print(line)`
[19:53:26] <enyc> dirtwash: also I'm not sure how 'buffered 'for line in ...' appreach is
[19:53:30] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:53:38] <bjs> dirtwash: what faster way did you want?
[19:53:42] <enyc> bjs: does that buffer, or read entire file in one go then split in memory?
[19:53:42] <dirtwash> because I got a few billion lines and too slow right now
[19:53:50] <bjs> enyc: it buffers, and reads line-by-line
[19:53:55] <dirtwash> bjs: just like ..there must be a 'the fastest method'
[19:54:13] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[19:54:16] <bjs> dirtwash: I mean,  what's wrong with my method (apart from the print ofc), you're going to find it harder to get faster if it's lines you want to iterate over
[19:54:17] <dirtwash> i know one can do things many ways in python
[19:54:36] <stwange> With dns.resolver is there any way to rotate the name servers in the case of getting EAGAIN? I looked at the source and it seems to honour rotate from /etc/resolv.conf, but if it hits EAGAIN it seems to just keep trying that query against one nameserver
[19:54:39] <dirtwash> bjs: nothing wrong, just asking if 'for line in' is truely the fastest way
[19:54:46] <ba> `for line in f` is about as fast as you're going to get. You could try tweaking the `buffering` argument to `open()`
[19:54:47] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--154.oracle-ocna.com) (Read error: Connection reset by peer)
[19:54:54] <Pilate> map is generally faster
[19:55:00] <Pilate> or used to be
[19:55:01] <dirtwash> i read something about mmap
[19:55:03] <bjs> dirtwash: are you doing that and is something slow? the more info we have the more we can help, there's lots of ways to do things
[19:55:06] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 245 seconds)
[19:55:08] <bjs> map isn't going to help,  nor really is mmap
[19:55:24] <bjs> iterating over a file already has buffering, it already reads line-by-line as it needs to
[19:55:24] *** Joins: semeion (~semeion@user/semeion)
[19:55:28] <dirtwash> bjs: yea too slow, i need to process 3-5 billion lines in <5min
[19:55:31] <thyriaen> i would like to map(function, numbers) and then get the minimal result of it - however i am not intersted in the result buw which number of numbers did achive the minimum - how can i do that ?
[19:55:42] <dirtwash> holding the data in memory aint an issue though
[19:55:59] <bjs> dirtwash: what does "process" mean?
[19:56:04] <SnoopJ> dirtwash, can the lines be processed independently of each other?
[19:56:11] <dirtwash> SnoopJ:yea
[19:56:23] <dirtwash> bjs: some string operations
[19:56:30] <SnoopJ> dirtwash, it may make sense to divide and conquer, then
[19:56:44] <bjs> divide and conquer over lines, for a file,  doesn't work so well
[19:57:18] <SnoopJ> depends on what the processing is like (how much it's CPU-bound)
[19:57:21] <bjs> at least not if the iteration is the thing that is being slow
[19:57:24] <dirtwash> i guess python might not be ideal to get it the 'fastest', not saying it aint fast already
[19:57:31] <ba> dirtwash: you see the poor performance even when your loop body is 'pass'?
[19:57:39] <stwange> Why not, you could do the equivalent of head/tail to split it into sections and iterate each section
[19:57:44] *** Parts: rapha (~jrs@user/rapha) (WeeChat 2.3)
[19:57:45] <bjs> dirtwash: I mean just reading the file and doing the Python for loop is pretty fast
[19:57:45] <dirtwash> well right now its doing 300mio/min, aint slow :D
[19:57:51] <bjs> stwange: how do you "split into sections"
[19:57:56] <bjs> if it's a file of lines
[19:58:56] <ba> bjs: it's possible if you pass byte offsets to each worker, then each worker reads forward to find a newline at _both_ the beginning and the end of its allotted section. A bit fraught though
[19:59:04] *** Joins: bloody (~bloody@user/bloody)
[19:59:15] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[19:59:49] <dirtwash> yea I think I am at a level of performance requirements where things get complicated
[19:59:58] <greyrat> Is there sth like /dev/null for python files?
[20:00:11] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:00:15] <SnoopJ> greyrat, you can open /dev/null itself, if that's what you mean
[20:00:20] <ba> If you're just doing string manip, and `for line in open(...'): pass` is too slow, pick another language I think. First I've heard of that being a bottleneck though.
[20:00:28] <bjs> greyrat: in what sense,  /dev/null is just a file (or something pretending to be a file)
[20:00:36] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--10d.oracle-ocna.com)
[20:00:39] * SnoopJ has written many many files that do `for line in open('...'):`
[20:00:45] *** Lando-HoloNet is now known as Lando-SpacePimp
[20:00:55] <dirtwash> ba: yes fair enough
[20:00:57] <dirtwash> thanks guys
[20:01:22] <SnoopJ> dirtwash, if you're thinking about it in this much detail, you should probably be taking your guidance from a proper profile to see where you're actually bound
[20:01:48] <greyrat> bjs: Yeah, that works. But it's a unix-only solution, no?
[20:02:18] <greyrat> Not that I care about windows compat, but I thought perhaps there was a crossplatform way to do this.
[20:02:22] <SnoopJ> greyrat, it's not clear what you're asking
[20:02:22] <bjs> greyrat: no windows also has a /dev/null (it's called just "nul")
[20:02:36] <bjs> greyrat: if you're asking for that, os.devnull contains the path to the system's /dev/null "file"
[20:02:46] <greyrat> Thanks
[20:03:27] <bjs> (indeed this is a fun thing because lots of programs do not realise "nul" is not a valid name for a Windows file, but it can still read/write to it :D)
[20:04:01] *** Quits: mi6x3m (~mi6x3m@user/mi6x3m) (Quit: Leaving)
[20:04:01] *** Joins: zepolen (~zepolen@ppp-94-66-223-35.home.otenet.gr)
[20:04:48] *** Joins: luva7 (~luva@5.180.62.231)
[20:05:11] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 264 seconds)
[20:05:24] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[20:05:44] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[20:06:21] *** Quits: seednode4 (~seednode@user/seednode) (Quit: Nihil supernum.)
[20:06:44] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[20:07:30] *** Joins: p-i- (~Ohmu@223.206.146.151)
[20:07:33] <ba> If it's ever useful to someone, here's a asyncio VNC client - https://github.com/barneygale/asyncvnc. I've still got some tests+docs to write before I publish on PyPI.
[20:08:09] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[20:08:27] <p-i-> Does anyone know of a decent 'livecode' Python pastebin?
[20:08:57] *** Joins: srhm (~srhm@user/srhm)
[20:09:08] <grym> p-i-: pythontutor, repl.it
[20:09:16] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: If dreams are like movies, then memories are films about ghosts.)
[20:09:20] <grym> fsvo 'decent'
[20:09:27] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[20:10:44] *** Joins: vicfred (~vicfred@user/vicfred)
[20:11:55] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:12:33] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[20:12:41] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Remote host closed the connection)
[20:12:50] <dirtwash> SnoopJ: yes absolutely
[20:12:53] <SnoopJ> repl.it +1
[20:13:25] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:84fb:5024:2605:bd40)
[20:13:51] *** Joins: srhm (~srhm@user/srhm)
[20:14:40] <p-i-> I'm dealing with a deeply nested JSON structure. https://bpa.st/RK2A Actually I'm bumping into this kind of structure in multiple places.
[20:14:51] <p-i-> Where a list of dicts is really a table.
[20:15:10] <p-i-> What's a good way to transform this data?
[20:15:29] <p-i-> I think glom is an option.
[20:15:33] *** Joins: bss (bss@rie.incorporeal.org)
[20:15:44] <grym> glom and possibly deserialisation into classes; you can do both of those
[20:15:44] <p-i-> Maybe I can get it into a pandas dataframe too...
[20:15:59] <grym> probably not, dfs are effectively required to be tabular
[20:16:04] <grym> and that's not tabular
[20:16:14] <grym> p-i-: you could also stuff it into a sqlite db in memory and make queries
[20:16:34] <grym> if you're a dab hand at sql
[20:16:49] <p-i-> In that example, what I'm really after is 'minPrice' and 'multiplierUp' for each symbol.
[20:16:59] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[20:17:52] <p-i-> My SQL sucks
[20:17:53] *** Joins: seednode4 (~seednode@user/seednode)
[20:17:57] <Jong> Is there anyway command that will store stdout also in a variable?  something like: print_mirror = None; store_copy_of_print_statements_in(print_mirror).   <bunch of code here>. stop_storing_copy_of_print_statements(print_mirror)
[20:18:04] <p-i-> It's on par with my regex
[20:18:09] <bjs> Jong: see contextlib.redirect_stdout
[20:18:19] <Jong> nice! thanks bjs
[20:18:42] *** Joins: anddam (~anddam@user/anddam)
[20:18:59] <Jong> but I don't want to redirect. I want to mirror/clone
[20:19:31] <Jong> redirecting and then printing the variable stdout was stored to delays the text appears in the terminal
[20:19:32] <bjs> Jong: well, redirect to something that saves it, and then prints it out anyway
[20:20:06] <Jong> I don't want the print delay
[20:20:27] <bjs> Jong: sure, redirect stdout to some object that saves it and prints it out anyway
[20:20:57] <bjs> there'll still be some delay/differences especially when you consider buffering
[20:21:06] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Remote host closed the connection)
[20:22:15] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[20:22:44] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[20:23:07] *** Quits: carl- (~carl-@85.229.142.19) (Ping timeout: 260 seconds)
[20:23:13] *** Joins: han-solo (~hanish@user/han-solo)
[20:23:28] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[20:23:43] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[20:24:03] *** Quits: bss (bss@rie.incorporeal.org) (Ping timeout: 260 seconds)
[20:24:17] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[20:24:34] *** Joins: esaym153 (~esaym153@net153.net)
[20:24:46] *** Joins: nbao (~nbao@187.20.156.163)
[20:24:47] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:25:00] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[20:25:09] *** Joins: bss (bss@rie.incorporeal.org)
[20:25:23] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[20:26:19] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[20:26:24] <OMGOMG> p-i-: what's the target structure? do you need the keys at all?
[20:26:51] *** Quits: redoc (~redoc@user/redoc) (Ping timeout: 260 seconds)
[20:27:12] *** Joins: Pandadub (~Barones@2804:48dc:8500:0:5635:5e6d:7349:856)
[20:30:30] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[20:30:31] *** Joins: hanaan (~naan@user/naan)
[20:30:45] *** hanaan is now known as Naan
[20:31:43] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:32:38] *** Quits: bss (bss@rie.incorporeal.org) (Read error: Connection reset by peer)
[20:33:54] *** Joins: bss (bss@rie.incorporeal.org)
[20:36:56] *** Quits: tobybl_ (~tobybl@213.31.135.91) (Remote host closed the connection)
[20:37:26] *** Joins: lethu (~lethu@user/lethu)
[20:37:45] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:38:08] *** Joins: LenarHoyt (~LenarHoyt@p549e6b2f.dip0.t-ipconnect.de)
[20:39:55] *** Quits: bss (bss@rie.incorporeal.org) (Read error: Connection reset by peer)
[20:41:00] <p-i-> OMGOMG: https://bpa.st/ZUNA <-- I've updated the paste
[20:42:04] <p-i-> I have a feeling I may be able to achieve something like `J::symbols[.symbol=ETHBTC]::filters[.filterType=PRICE_FILTER]::minPrice` syntax with glom, but I can't see it.
[20:42:30] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[20:45:21] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:14da:3bf0:27ee:7397)
[20:45:55] *** Joins: nomic (~nomic@185.198.243.251)
[20:46:38] *** Quits: nomic (~nomic@185.198.243.251) (Client Quit)
[20:47:27] *** Joins: subopt (~subopt@2603-8081-2302-459a-acac-3fb9-0b5d-718d.res6.spectrum.com)
[20:48:28] *** Quits: bim9262 (~bim9262@user/bim9262) (Ping timeout: 252 seconds)
[20:49:07] *** Joins: nomic (~nomic@185.198.243.251)
[20:50:38] *** Joins: driib8 (~driib@185.195.233.145)
[20:50:50] <grym> p-i-:  i was plinking at it, but got distracted
[20:50:58] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:51:09] <grym> i always forget the little spec DSL they use and when the dot is part of a string and when it's a real tuple etc
[20:51:59] *** Joins: bss (bss@rie.incorporeal.org)
[20:52:01] *** Joins: oz4ga (~tim@93.90.4.233)
[20:52:45] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:52:53] *** Quits: driib (~driib@185.65.135.251) (Ping timeout: 264 seconds)
[20:52:53] *** driib8 is now known as driib
[20:53:05] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[20:53:33] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[20:53:58] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[20:56:15] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--10d.oracle-ocna.com) (Ping timeout: 260 seconds)
[20:57:55] *** Joins: dntreou (~yakiza@global-5-46.nat-1.net.cam.ac.uk)
[20:58:01] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[20:58:21] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:58:42] *** Joins: clarkk1 (~clarkk@37.120.203.220)
[20:59:22] *** Joins: hemstock (~hemstock@68.71.244.6)
[21:01:23] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Ping timeout: 260 seconds)
[21:02:21] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Remote host closed the connection)
[21:02:34] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[21:03:06] *** Quits: _Ev (~ev@user/ev/x-8999918) (Quit: Leaving.)
[21:03:55] <dlam> 2
[21:04:14] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[21:05:04] *** Joins: dulanic4 (~dulanic@47.187.144.163)
[21:05:35] *** Quits: Batzy (~Batzy@user/batzy) (Ping timeout: 260 seconds)
[21:05:58] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[21:06:31] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 260 seconds)
[21:06:59] *** Quits: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (Ping timeout: 260 seconds)
[21:06:59] *** Quits: Jefren1 (~Jefren@70.35.67.102) (Ping timeout: 260 seconds)
[21:06:59] *** Quits: dulanic (~dulanic@47.187.144.163) (Ping timeout: 260 seconds)
[21:07:00] *** dulanic4 is now known as dulanic
[21:07:51] *** Joins: Batzy (~Batzy@user/batzy)
[21:08:28] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[21:08:36] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[21:08:51] *** Joins: Jefren1 (~Jefren@70.35.67.102)
[21:09:13] *** Joins: wolfgang (~wolfgang@101.174.167.116)
[21:09:15] *** Joins: somlis (~somlis@user/somlis)
[21:09:18] *** Joins: MmeQuignon (~MmeQuigno@2a01:e0a:1ab:f090:aa12:2bb9:ce8e:1620)
[21:09:19] *** Quits: dntreou (~yakiza@global-5-46.nat-1.net.cam.ac.uk) (Ping timeout: 260 seconds)
[21:11:12] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--f.oracle-ocna.com)
[21:11:16] *** Joins: msavoritias (~msavoriti@mobile-access-6df0d3-96.dhcp.inet.fi)
[21:11:19] *** Quits: aztec (~Felipe@2804:2238:7d2:4400:ec72:462:453c:39d) (Quit: I'm leaving, bye everyone.)
[21:12:23] *** dob1_ is now known as dob1
[21:13:23] *** Quits: LenarHoyt (~LenarHoyt@p549e6b2f.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:13:36] *** Joins: nomic (~nomic@185.198.243.251)
[21:14:52] *** Quits: nomic (~nomic@185.198.243.251) (Client Quit)
[21:15:02] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[21:15:17] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[21:16:19] *** Quits: vladoski (~vladoski@2001:b07:add:d406:6189:192d:cc77:4cb2) (Ping timeout: 260 seconds)
[21:18:16] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:19:54] *** Joins: nomic (~nomic@185.198.243.251)
[21:20:55] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[21:23:31] *** Joins: Macuser (~Macuser@216.30.159.201)
[21:23:40] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--f.oracle-ocna.com) (Read error: Connection reset by peer)
[21:23:56] *** Joins: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se)
[21:24:00] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:24:09] <whatsupdoc> does python have dictionary comprehensions?
[21:24:18] <han-solo> sure
[21:24:42] <han-solo> {key:value for key,value from something} # ?
[21:24:50] <grym> from something.items() usually
[21:24:56] <grym> (if something's a dict)
[21:25:05] <han-solo> sure
[21:25:25] <han-solo> i was thinking about a list of tuples
[21:25:34] <grym> then you're correct
[21:25:38] <han-solo> :)
[21:26:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:26:12] <whatsupdoc> this is what i'm attempting to do https://dpaste.org/Hn9v
[21:26:34] <whatsupdoc> keys are a tuple
[21:27:36] <han-solo> {key: value for key, value in neighbors.items() if key > .. and value > ..} # ?
[21:28:37] <whatsupdoc> damn
[21:28:43] *** Joins: clarkk11 (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[21:29:08] <grym> comprehensions are lovely things
[21:29:33] <CrtxReavr> I'm a fan.
[21:29:47] <whatsupdoc> I like them too
[21:29:50] <CrtxReavr> Took a long time. . . hated them at first, but I eventually drankthe Koolaid.
[21:30:01] <whatsupdoc> Doesn't work smh. What is going on: TypeError: 'int' object has no attribute '__getitem_
[21:30:06] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[21:30:16] <han-solo> can we see the `neighbors` data ?
[21:30:20] <han-solo> or a sample
[21:30:56] <whatsupdoc> {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}
[21:31:15] *** Quits: clarkk1 (~clarkk@37.120.203.220) (Ping timeout: 260 seconds)
[21:32:03] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[21:32:03] *** Quits: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se) (Quit: Client closed)
[21:32:25] <grym> {k,v for k,v in {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0} if k[0]>0 and v>=0} , perhaps
[21:32:29] <grym> you have to index into the key, it's a tuple
[21:32:52] <whatsupdoc> k[0] and k[1]
[21:33:08] <whatsupdoc> I need both x and y coordinates to be >= 0
[21:33:34] <grym> {k,v for k,v in {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0} if k>=(0,0)}
[21:33:43] *** Joins: LenarHoyt (~LenarHoyt@tmo-074-235.customers.d1-online.com)
[21:33:47] <whatsupdoc> you can do that?
[21:33:49] <grym> sure
[21:33:53] <whatsupdoc> interesting
[21:34:01] <han-solo> just the keys you want as a mapping ?
[21:34:02] <grym> tuples compare lexicographically
[21:34:06] <whatsupdoc> it didn't crash
[21:34:07] <whatsupdoc> lol
[21:34:08] <whatsupdoc> nice
[21:34:20] <whatsupdoc> but i don't get why k[0] and k[1] fails
[21:34:28] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Client Quit)
[21:35:10] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[21:35:24] *** Quits: clarkk11 (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[21:35:30] <moonmoon> grym: that doesn't quite work
[21:35:31] <moonmoon> >>> (1,-1)>=(0,0)
[21:35:32] <moonmoon> True
[21:35:43] <grym> doh
[21:35:46] *** Joins: ledtc (~ledtc@se2.eu.vpn.time4vps.cloud)
[21:35:56] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[21:36:02] *** Joins: nomic (~nomic@185.198.243.251)
[21:36:23] <grym> you could do k[0]>=0 and k[1]>=0, or all(x>=0 for x in k) then
[21:37:06] <whatsupdoc> damn
[21:37:11] *** Quits: justache (~justache@user/justache) (Quit: The Lounge - https://thelounge.chat)
[21:37:18] *** rickybob is now known as f
[21:37:26] *** f is now known as m
[21:37:34] *** m is now known as pf
[21:37:37] <stewie925> `neighbors_2 = {k:v  for k,v in neighbors.items() if k[0] >= 0 and k[1] >= 0}` seem to work
[21:37:38] *** pf is now known as pffffffff
[21:38:11] <Wooble> whatsupdoc: zero is falsy, nonzero numbers aren't.
[21:38:26] *** Joins: justache (~justache@user/justache)
[21:39:48] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Remote host closed the connection)
[21:40:00] <p-i-> How about converting to a numpy array?
[21:40:38] <p-i-> hm maybe not if there's only 4 elements.
[21:40:55] <grym> probably not worth it
[21:41:23] <p-i-> Without seeing the scope of the outer problem, hard to suggest something.
[21:42:59] <p-i-> How about separating the WHAT from the HOW? Maybe {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0} is not a sane storage.
[21:43:00] <whatsupdoc> https://dpaste.org/Q3wd
[21:43:02] <whatsupdoc> testcase
[21:43:15] <whatsupdoc> TypeError: 'int' object has no attribute '__getitem__'
[21:43:47] <p-i-> whatsupdoc: zoom out again
[21:43:58] <p-i-> What is the actual problem/task?
[21:44:14] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[21:44:30] <p-i-> You have a binary 2D array, and you want to replace each cell with the number of neighbours?
[21:44:49] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[21:44:49] <p-i-> Like a Conway Game of Life
[21:44:51] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:44:59] <whatsupdoc> no
[21:45:13] <whatsupdoc> all i'm trying to do is return all the neighbors of a coordinate
[21:45:29] <p-i-> This is screaming numpy all over
[21:45:39] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[21:45:48] <whatsupdoc> corners only have 2 neighbors
[21:45:48] *** Quits: msavoritias (~msavoriti@mobile-access-6df0d3-96.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:45:51] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[21:45:56] <whatsupdoc> edges have 3 neighbors
[21:46:06] <whatsupdoc> and then a coordinate like (1,1) should have all 4 neighbors
[21:46:30] <p-i-> And it's NxM or NxN or 5x5?
[21:46:39] <whatsupdoc> Any arbitrary size
[21:46:39] <han-solo> whatsupdoc: you missed the `.items()` still
[21:46:50] <whatsupdoc> omg lol
[21:47:05] <whatsupdoc> thank you :)
[21:47:07] <whatsupdoc> i'm stupid
[21:47:19] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Remote host closed the connection)
[21:47:31] <tdsmith> lol, oops: my_list.extend(f(item) for item in my_list) ends badly
[21:47:39] <han-solo> but this does sounds like entering the numpy area, maybe...
[21:47:42] <stewie925> that's a common mistake (missing the .items()) hehe
[21:48:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[21:48:20] <stewie925> tdsmith: extend argument has to be in the form of a list
[21:48:29] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[21:48:33] <stewie925> I went thru that hell too lol
[21:48:48] *** Joins: redoc (~redoc@user/redoc)
[21:48:59] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 260 seconds)
[21:49:04] <han-solo> list.extend can take any iterable i think :/
[21:49:05] <bjs> stewie925: why?
[21:49:09] <bjs> tdsmith: badly how?
[21:49:22] <tdsmith> you run out of memory very quickly :p
[21:49:26] <stewie925> oh did I misquote hehe
[21:49:41] <bjs> tdsmith: because you're extending a list?  I'm not sure what you mean
[21:49:57] <bjs> Oh I see what you mean
[21:50:02] <bjs> my_list was repeated twice :)
[21:50:02] *** Joins: fikran (~fikran@user/fikran)
[21:50:04] <tdsmith> yes, my_list in the generator expression keeps getting longer as the extension operation proceeds
[21:50:06] <han-solo> yeah, it's like `for i in mylist: mylist.append(i)`
[21:50:09] <han-solo> no ?
[21:50:15] <stewie925> han-solo: yes , you are right - extend() accepts any utterable
[21:50:36] <stewie925> iterable
[21:50:42] <han-solo> yeah
[21:51:36] *** Joins: vicfred (~vicfred@user/vicfred)
[21:53:17] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[21:53:19] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[21:53:31] *** Joins: JanC (~janc@user/janc)
[21:55:06] <stewie925> off-topic:  to those who want to get rid of those joined/left/now-known-as message  try this "gear in the top left, enable advanced settings, uncheck buffers.show_joinparts and buffers.show_nick_changes"
[21:55:49] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:55:59] <Wooble> stewie925: do you think we're all using whatever IRC client you're using?
[21:56:01] * han-solo cries in irssi
[21:56:21] *** Joins: aselman4 (~aselman4@new-ashpr013-p2.nls.ford.com)
[21:56:38] <stewie925> oops - it works for those using  web.libera.chat
[21:56:50] *** Joins: stealth[] (~stealth]@2001:9e8:36ec:4500:596f:c69a:fd6a:5f82)
[21:56:58] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:56:59] <stewie925> hehe han-solo,  I won't block  those customized messages
[21:57:35] *** Quits: LenarHoyt (~LenarHoyt@tmo-074-235.customers.d1-online.com) (Ping timeout: 256 seconds)
[21:57:59] <han-solo> there's a knob for that, i'm too lazy to check
[21:58:52] <han-solo> also i don't care about those atm :)
[21:59:25] * stewie925 test only
[21:59:27] <exarkun> does mypy do anything with exceptions?
[21:59:28] <stewie925> woo hoo
[21:59:45] *** Parts: aselman4 (~aselman4@new-ashpr013-p2.nls.ford.com) ()
[21:59:53] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:00:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[22:04:23] <stewie925> it looks like most of the you guys have a job and still find time helping us out here on #python, that's #python
[22:04:29] <stewie925> that's admirable, I mean
[22:04:43] *** Joins: Nspace (~Nspace@user/nspace)
[22:06:25] <stewie925> still looking for a python job here , sigh
[22:07:15] *** Joins: jay-m1262 (~jay-m@154.72.161.101)
[22:07:15] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:07:17] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[22:07:43] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[22:07:55] *** Joins: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi)
[22:08:20] <han-solo> stewie925: i remember you had an interview or something, iirc. how'd it go ?
[22:08:23] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:08:32] <han-solo> maybe different person, if yes. my bad
[22:08:51] <stewie925> it was me, havent heard back :(
[22:09:00] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Client Quit)
[22:09:33] <stewie925> it was that coding interview with the same code I shared a few days back (how to handle duplicate lines when writing out to a file)
[22:09:49] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[22:10:32] <stewie925> I couldn't answer that - but since then  I learn you could use a set to avoid dups
[22:10:36] *** Joins: roxfan2 (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[22:11:39] <han-solo> oh, Okay
[22:11:40] <stewie925> and btw, I m not a fan of  hackerrank tests - but I still begrudgin
[22:11:53] <stewie925> begrudgingly take some of those tests for practice
[22:12:23] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[22:12:42] <stewie925> the problem with the job hunt is "most" of them are looking for senior python developers like you guys :)
[22:12:47] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Ping timeout: 244 seconds)
[22:12:48] <p-i-> whatsupdoc: What do you actually user neighbours _for_?
[22:13:13] <stewie925> "experts in python" listed in the job description
[22:15:18] <hexology> stewie925: "backend" web dev jobs usually don't need more than moderate experience, and python is fairly popular in that space
[22:15:22] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[22:15:57] <stewie925> hexology: thank you!  yes I am seeing those too
[22:17:01] <stewie925> I applied for those jobs, have not heard back - job description says must have experience in Django but I did have flask experience from my Udacity (paid) course
[22:17:24] *** Quits: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi) ()
[22:17:40] *** Joins: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi)
[22:17:50] *** Quits: stealth[] (~stealth]@2001:9e8:36ec:4500:596f:c69a:fd6a:5f82) (Quit: Leaving)
[22:18:18] *** Joins: Whoopla (Whoopla@gateway/vpn/protonvpn/whoopla)
[22:18:24] *** Quits: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi) (Client Quit)
[22:18:37] *** Joins: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi)
[22:18:44] <Wooble> django is very different from flask...
[22:19:02] <hexology> interesting
[22:19:13] <hexology> django isn't that hard to learn imo. shouldn't be a blocker for a junior role
[22:19:14] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[22:19:33] <hexology> the problem seems to be broader than programming specifically: nobody is hiring juniors for anything anymore
[22:19:47] *** Joins: stealth[] (~stealth]@2001:9e8:36ec:4500:596f:c69a:fd6a:5f82)
[22:20:07] <stewie925> I had 4 years experience with python and was laid off last year
[22:20:12] <white5moke> build something great. screw being employed
[22:20:17] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[22:20:31] *** Quits: pro_z (~pro_z@37.214.49.15) (Ping timeout: 245 seconds)
[22:20:38] <white5moke> i deliver drugs fro rent, and program all day. fuck the man! hail python!
[22:21:04] <stewie925> I really love development - before python I did COBOL
[22:21:13] <white5moke> oooh old skool
[22:21:34] <white5moke> i worked with a former JPL dude who programmed sat nav with COBOL
[22:21:58] <stewie925> wow
[22:22:00] <white5moke> and some other low-end math lang....
[22:22:18] <white5moke> he was a brainiac. made mine feel like walnut-sized
[22:22:55] *** Quits: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi) (Client Quit)
[22:23:08] *** Joins: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi)
[22:23:33] <stewie925> I really don't mind starting over, but living near SF metro area where everything is $$$....
[22:24:16] <white5moke> hexology: r u looking for junior dev python work?
[22:25:01] *** Quits: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi) (Client Quit)
[22:25:06] *** Joins: GeorgeK (~GeorgeK@cpe-70-92-5-228.wi.res.rr.com)
[22:25:10] <ChrisWarrick> 4 years isn't junior, is it now?
[22:25:14] *** Joins: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi)
[22:26:04] *** Joins: georgios (~georgios@user/georgios)
[22:26:17] <white5moke> it's maybe on the cusp
[22:27:12] *** Joins: mei (~mei@user/mei)
[22:27:16] <white5moke> it really depends on the level of work done those initial years. like if you just did hack&slash for 4 years, then keep at it....
[22:27:19] *** Quits: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi) (Client Quit)
[22:27:32] *** Joins: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi)
[22:27:59] <white5moke> but if you were working with a cohesive team with all the tools and you know what it takes to build enterprise stuff, then lets' go boys!!!!!
[22:29:00] <stewie925> I did REST API stuff, and also got involved in converting our python codes from  python2.7 to python3.6
[22:32:57] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[22:33:13] <stewie925> but what I do know is I need to improve on my unit testing
[22:33:53] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:33:59] *** Quits: jay-m1262 (~jay-m@154.72.161.101) (Ping timeout: 264 seconds)
[22:34:49] *** luva7 is now known as luva
[22:35:58] *** Joins: jay-m1262 (~jay-m@129.0.204.217)
[22:36:09] <han-solo> you could try a bit of django, if most of the jobs you see requires django, so you won't have much trouble on that part during the interview maybe
[22:37:27] <han-solo> and while writing the app, you could pick up on the testing part as well
[22:37:28] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[22:37:49] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[22:37:49] <MmeQuignon> django is easy, there's plenty of tutos and courses everywhere to get started
[22:38:17] <Ninpo> can anyone tell me why this str.replace isn't working?
[22:38:19] <Ninpo> https://bpa.st/ZLNA
[22:38:41] <han-solo> it's not inline replace
[22:39:03] <Ninpo> Oh I have to reassign it
[22:39:03] <han-solo> you would have to assign it to something or itself
[22:39:05] <Ninpo> oops
[22:39:07] <Ninpo> thnks
[22:39:07] *** Quits: jay-m1262 (~jay-m@129.0.204.217) (Read error: Connection reset by peer)
[22:39:12] <Sheilong> numpy mean function is returning 3 for this list of values [6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0]) instead of 6.
[22:39:18] *** Joins: Nspace (~Nspace@user/nspace)
[22:39:21] <Ninpo> it coming back to me in the repl had me thinking it did an in place replace thanks han-solo
[22:39:51] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[22:40:01] <han-solo>  👍
[22:40:19] <ouemt> I'm doing something dumb with numpy indexing that I don't understand
[22:40:22] <ouemt> https://bpa.st/2IZQ
[22:40:23] <Sheilong> Numpy is not account the zeros in that list. Is it a bug?
[22:40:46] <ouemt> why doesn't that yield a 1D array with values pulled from a according to the values in b?
[22:40:59] <Repiphany> The mean is 3 *because* it's accounting for those 0s like it should be
[22:41:58] *** Joins: LenarHoyt (~LenarHoyt@p200300eec7219b00dcc25442c4542d66.dip0.t-ipconnect.de)
[22:42:06] <stewie925> han-solo: MmeQuignon:  thank you, I'll look into that - and yes there are lots of Django demand
[22:43:10] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[22:43:18] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[22:43:20] <MmeQuignon> Not what I like, but heh. I'm working as an odoo developper. If there's an integrator where you live, you may try.
[22:43:33] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[22:44:34] <stewie925> odoo?
[22:44:56] <stewie925> I am more interested in really strengthening my python skills TBH
[22:45:05] <MmeQuignon> There's a lot of demand, here. And not a lot of odoo developpers. And ERP written in Python.
[22:45:06] *** Quits: Haxxa (~Haxxa@122.199.46.64) (Quit: Haxxa flies away.)
[22:45:24] <stewie925> but yes, I am open in learning new skills
[22:45:45] *** Quits: ledtc (~ledtc@se2.eu.vpn.time4vps.cloud) (Ping timeout: 256 seconds)
[22:45:55] <MmeQuignon> Knowing things about accounting, stocks and so is a +
[22:46:02] *** Quits: nbao (~nbao@187.20.156.163) (Quit: leaving)
[22:46:40] <MmeQuignon> When you have to synchronize your ERP with magento for instance, there a lot of challenging things to do.
[22:47:29] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[22:47:30] <MmeQuignon> You will probably learn a lot more about Python, working in the odoo world, rather than in the Django world.
[22:47:39] <MmeQuignon> s/will/would
[22:47:41] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 268 seconds)
[22:47:49] <MmeQuignon> Depends on the company, really.
[22:48:03] <MmeQuignon> May I ask where do you live?
[22:48:05] <stewie925> I did try my hand in pandas and numpy (training)
[22:48:26] <stewie925> SF metro area, about 45 drive min from SF with no traffic
[22:48:40] <stewie925> 45 min drive
[22:48:49] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:49:01] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:49:03] <stewie925> would it be too much to ask for minimum of $45/hr pay
[22:49:29] <MmeQuignon> Well, if you want to do mathematics in python, odoo isn't the best ^^
[22:49:57] <MmeQuignon> Don't know, I'm in France. 20€ an hour is fine, here ^^
[22:50:09] *** Joins: sudorm (~sudorm@lfbn-orl-1-1718-86.w90-107.abo.wanadoo.fr)
[22:50:30] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:50:57] <bjs> Sheilong: why do you say it should be 6?
[22:51:08] *** Joins: PacKetIV (PacKetIV@user/packetiv)
[22:51:23] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Ping timeout: 264 seconds)
[22:51:38] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:51:47] <bjs> Sheilong: that is a length 12 list, with six 6s in it, 6*6 == 36, 36/12 is 3.  So the mean should be 3, no?
[22:52:04] <Sheilong> bjs: For some reason I did a mistake here.
[22:52:16] <bjs> Sheilong: okay, so no bug in numpy?
[22:52:29] <Sheilong> bjs: no, there is not.
[22:52:33] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[22:52:42] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[22:52:43] <xheimlich> This is a Pandas question.
[22:53:07] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Remote host closed the connection)
[22:53:11] <xheimlich> Why is .loc/.iloc followed by square brackets? And are there equivalents that are functions?
[22:53:40] *** Quits: magla (~gelignite@55d4dc2e.access.ecotel.net) (Quit: Stay safe!)
[22:53:50] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:14da:3bf0:27ee:7397) (Quit: Client closed)
[22:53:53] <Sheilong> To indicate that you are indexing it?
[22:54:03] <ChrisWarrick> xheimlich: square brackets -> eg. so you can use slices inside
[22:54:08] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:14da:3bf0:27ee:7397)
[22:54:12] <ChrisWarrick> xheimlich: functions -> why do you want those?
[22:54:15] <bjs> xheimlich: because pandas has df[...] syntax, and .iloc and .loc are "variants" of indexing but with different rules. so df.iloc[...] and df.loc[...] are "like df[...], but different".
[22:54:16] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[22:54:24] <xheimlich> Yeah. I'd like to avoid slices as much as possible.
[22:54:44] <ChrisWarrick> xheimlich: why?
[22:55:07] *** Joins: tobybl (~tobybl@213.31.135.91)
[22:56:21] <ouemt> can anyone tell me what I'm doing wrong trying to index a with be here: https://bpa.st/2IZQ
[22:56:39] <ouemt> I just want the "bth" item from each row of a
[22:57:04] <ouemt> instead I'm getting a (13,13) array, where the values I want are on the diagonal
[22:57:09] *** Joins: Betal (~Betal@user/betal)
[22:57:12] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:57:46] *** Joins: Payam (~Payam@138.106.57.131)
[22:58:42] *** Quits: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Read error: Connection reset by peer)
[22:59:24] <bjs> ouemt: but b has 13 1s and 0s, and a has only 2 "columns".  What is the output you want?
[22:59:31] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[22:59:44] <bjs> also do you really mean to use booleans and not 0 and 1
[22:59:50] <xheimlich> Well, who can explain why someone wants anything.
[23:00:08] *** Quits: darksun (~darksun@user/darksun) (Quit: notte)
[23:00:12] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[23:00:30] <ouemt> bjs: np.array([a[0, b[0]], a[1, b[1]], ... a[13, b[13]])
[23:00:33] <ouemt> effectively
[23:00:36] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-08a2-bff1-0197-0a0b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:00:48] <ouemt> I can get there with np.take_along_axis(a,b[:, None],1).flatten()
[23:00:56] <ouemt> just seems like it should be a simple indexing operation
[23:01:09] *** pffffffff is now known as rickybob
[23:01:31] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Quit: Leaving)
[23:01:36] *** Quits: Pandadub (~Barones@2804:48dc:8500:0:5635:5e6d:7349:856) (Remote host closed the connection)
[23:01:44] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[23:01:44] <ouemt> s/12/13/ above, but you get the idea I hope
[23:01:50] *** Joins: Pandadub (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[23:02:01] <ouemt> I quit, I'm on 3 hours of sleep, max in my example should be 12
[23:02:20] <bjs> ouemt: oh,  the problem is that a[:,[0,1]] makes a with all rows and columns 0 and 1, e.g. [[1,2,3],[4,5,6]] then a[:,[0,1]] == [[1,2],[4,5]]
[23:03:47] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:03:52] <ouemt> bjs: gotcha.... is there a way to do it as an index? or should I just stick with the take_along_axis?
[23:04:13] *** Joins: srhm (~srhm@user/srhm)
[23:04:26] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[23:04:41] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[23:05:22] *** Joins: jwisbell35 (~jwisbell3@047-036-214-124.res.spectrum.com)
[23:06:41] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:06:48] <ouemt> I could skip all of this if I just had 2 TiB ram.. :P
[23:07:04] <lidless> I think Java 1 said that befor eyou
[23:07:08] <lidless> *before you. blah
[23:08:53] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:11:13] *** Joins: DeaDSouL (~DeaDSouL@85.203.34.74)
[23:11:14] <bjs> ouemt: you can a[[0,1,2,3,4,5,...]:[0,1,0,1,0,1,...]]  I guess
[23:11:16] <bjs> the ... aren't literal
[23:12:08] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:e159:7ddf:f7bb:a877) (Quit: Textual IRC Client: www.textualapp.com)
[23:12:48] <ouemt> yep, a[np.arange(a.shape[0]), b] works
[23:13:11] <ouemt> now to see which is faster on an array with 5000000 elements
[23:13:21] <ouemt> thanks bjs
[23:13:29] *** Joins: Mulugruntz (~Mulugrunt@i125-204-128-137.s41.a040.ap.plala.or.jp)
[23:14:47] *** Joins: Auron (~Auron956@user/auron)
[23:15:12] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[23:15:49] <ouemt> can we also talk about how np.ma.MaskedArray.searchsorted doesn't respect the mask? lol
[23:15:51] *** Joins: noarb (~noarb@user/noarb)
[23:16:34] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[23:18:07] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:91aa:6be9:4f6:b2a2)
[23:19:35] *** Quits: parv (~quass@user/parv) (Ping timeout: 264 seconds)
[23:19:46] *** Joins: noarb (~noarb@user/noarb)
[23:19:49] *** Joins: parvXirc (~quass@user/parv)
[23:20:19] <Mulugruntz> hey :-) anyone knows if there's a built-in way  in httpx (async mode), when doing stream, to close the stream after X seconds? The timeout parameter checks if there hasn't been any new data for an amount of time. But I can't find a way for the total amount of time.
[23:20:28] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[23:20:37] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:21:12] *** Joins: Nspace (~Nspace@user/nspace)
[23:21:28] <f8e4_> is correct for raspi python update ? https://stackoverflow.com/a/66218310/4933053
[23:21:38] <f8e4_> try to bump 3.7 to 3.9+
[23:23:39] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[23:24:01] *** Quits: LenarHoyt (~LenarHoyt@p200300eec7219b00dcc25442c4542d66.dip0.t-ipconnect.de) (Quit: Client closed)
[23:24:14] *** Quits: ericlee (~ericlee@2601:647:4681:3420::2) (Quit: Leaving)
[23:24:19] *** Joins: Craziness (~UltraNeon@wikipedia/UltraNeon)
[23:26:46] *** Quits: thyriaen (~thyriaen@dynamic-077-013-059-156.77.13.pool.telefonica.de) (Remote host closed the connection)
[23:26:56] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[23:27:40] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[23:28:23] *** Joins: _Ev (~ev@user/ev/x-8999918)
[23:28:46] *** Parts: Craziness (~UltraNeon@wikipedia/UltraNeon) ()
[23:29:07] *** Joins: Alabama (uid524513@wikipedia/UltraNeon)
[23:29:11] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Ping timeout: 264 seconds)
[23:29:54] *** Joins: oriba (~oriba@dynamic-089-012-082-205.89.12.pool.telefonica.de)
[23:31:19] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[23:31:29] <mat001> How could I check a variable is an instance of a custom object (a specific class). Not just a type of class?
[23:32:11] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[23:32:26] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[23:32:42] <Mulugruntz> @mat001: isinstance(obj, MyClass)
[23:33:32] <parvXirc> isintance( obj, type-tuple )
[23:33:36] <mat001> Mulugruntz: ok, I tried that and the code works. But when I do assert isInstance(obj, MyClass) it fails. Maybe becaus of import paths?
[23:33:39] *** Joins: audiobirb (~audio@cpe-24-27-99-134.tx.res.rr.com)
[23:33:58] <Mulugruntz> mat001 what's your error message?
[23:34:49] <mat001> Mulugruntz: it's assertion error: https://bpa.st/NWPA
[23:34:59] *** Joins: Craziness (~UltraNeon@wikipedia/UltraNeon)
[23:35:09] <Mulugruntz> that means it's not of the type you're comparing
[23:35:38] <raek> f8e4_: running "sudo make altinstall" instead of "sudo make intsall" is probably a better idea. this installs the new version alongside the old version. changing the old version can break the system...
[23:35:38] <Craziness> Can python help me program a bot for wikipedia?
[23:35:47] *** Quits: audio (~audio@2603-8081-1800-1546-0cb3-5ee7-df8a-1120.res6.spectrum.com) (Ping timeout: 268 seconds)
[23:35:55] <mat001> Mulugruntz: when I print the type I get: <class 'optimizely.optimizely_user_context.OptimizelyUserContext.OptimizelyForcedDecision'>
[23:35:59] *** Joins: audiocat (~audio@2603-8081-1800-1546-10af-d74f-73e0-9d35.res6.spectrum.com)
[23:36:04] <Mulugruntz> assert isinstance(variation_key, OptimizelyUserContext.OptimizelyForcedDecision), f"key is a {type(variation_key)}"
[23:36:06] <lidless> probably not. wikipedia detects python bots and kills their authors.
[23:36:15] <mat001> Mulugruntz: so do I put this whole object into isInstace ?
[23:36:16] <InPhase> Craziness: Python does not write programs for you.  But you can find some useful Python libraries that will make it easier.
[23:36:34] <raek> altinstall install the 3.9 version as "python3.9", so "python3" (and possibly "python") will still run the old version
[23:36:36] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[23:36:46] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[23:36:50] *** Joins: rannnn8888 (~rannnn888@bzq-79-176-127-230.red.bezeqint.net)
[23:36:57] *** Joins: raxor2k (~raxor2k@78.158.233.120)
[23:37:07] *** Quits: ubert (~Thunderbi@91.141.46.110.wireless.dyn.drei.com) (Quit: ubert)
[23:37:15] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Ping timeout: 260 seconds)
[23:37:17] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[23:37:18] <Craziness> And what about Pywikibot?
[23:37:25] *** Joins: ubert (~Thunderbi@91.141.46.110.wireless.dyn.drei.com)
[23:37:26] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[23:37:30] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[23:37:42] <Mulugruntz> mat001 the class you've imported to build your item is not the same as the one you're comparing to. Well, they may be the same... but imported twice. So, they're not the same.
[23:37:47] <InPhase> Pywikibot would probably be a strong starting point.  :)
[23:38:16] <Craziness> Hmm...
[23:38:39] *** Quits: audiobirb (~audio@cpe-24-27-99-134.tx.res.rr.com) (Ping timeout: 260 seconds)
[23:38:40] *** Quits: Cache_Money (~Cache_Mon@c-67-160-112-6.hsd1.wa.comcast.net) (Quit: Client closed)
[23:38:47] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[23:38:55] <raxor2k> is it an easy way to change timezone on "datetime" library? i am using this one: 'current_datetime = datetime.datetime.utcnow()'
[23:39:06] <raxor2k> and it shows 2 hours behind my timezone
[23:39:09] <mat001> Mulugruntz: you are totally right. Thx. Got it now. The assert you suggested works
[23:39:28] <Mulugruntz> hmmm, my assert only added a print :-)
[23:39:46] *** Quits: nomic (~nomic@185.198.243.251) (Quit: Leaving)
[23:39:56] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 246 seconds)
[23:39:58] <Julian> raxor2k: what do you mean by changing timezone?
[23:40:25] <f8e4_> raek ty nice
[23:40:28] <raxor2k> Julian: print(current_datetime)  = 2021-10-27 20:06:17.645883
[23:40:38] <raxor2k> and in my timezone the time is : 22:06:17
[23:40:43] <Julian> raxor2k: UTC is a timezone, that function returns the current time in the UTC timezone
[23:41:21] <Julian> raxor2k: Do you want the time in your local timezone?
[23:41:28] <raxor2k> julian: how about CET?
[23:41:29] <raxor2k> yes
[23:41:31] <raxor2k> my timezone is CET
[23:41:37] <Julian> That's datetime.datetime.now() -- though it's usually best to use a library like arrow
[23:42:20] <raek> f8e4_: there might even be pre-built packages for some OS:es. if you run Ubuntu on you pi you can just install other versions using this: https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa
[23:42:27] <Julian> because datetime objects in the stdlib are not timezone "aware" -- meaning that even though .now() will give you the correct time in your timezone, the object itself doesn't keep around the information that it's a CET timezone, so some other place you use it can misinterpret what time zone it's in.
[23:42:49] <raxor2k> julian: .now() still gives me utc time..
[23:43:36] <Julian> raxor2k: Then your machine may somehow be misconfigured
[23:43:43] <raek> it is possible to do datetime.now(timezone.utc)
[23:44:01] <Julian> raxor2k: They want CET, not UTC apparently.
[23:44:03] <raek> to get an aware object in UTC
[23:44:09] <Julian> er, raek ^
[23:45:41] <raek> erm. sorry.
[23:45:51] <parvXirc> raxor2k, Could use pytz to set particular time zone
[23:45:58] <raek> disregard me :-)
[23:46:13] <raxor2k> julian: i could try out zoneinfo
[23:46:15] <parvXirc> https://pypi.org/project/pytz/
[23:46:21] <raxor2k> parvXirc: yes, or zoneinfo
[23:46:28] <CrtxReavr> raxor2k, datetime.datetime.now() will return the date & time for the TZ set for the system or your user.
[23:46:40] <Julian> raxor2k: Yes, arrow, zoneinfo, pytz, dateutil, pendulum
[23:46:47] <Julian> all of these are fine ways to get non-naive datetimes
[23:47:24] <Julian> raxor2k: (you should probably independently look into your locale though -- datetime.now() should be giving you your local time, so if it isn't, it likely means your timezone isn't configured right within your operating system)
[23:47:41] <parvXirc> raxor2k, zoneinfo is rather limited in functionality; not a fan
[23:47:49] *** Joins: nomic (~nomic@185.198.243.251)
[23:47:56] <raxor2k> parvXirc: i try out pytz. thanks :)
[23:47:59] <MmeQuignon> echo $TZ in your shell ?
[23:48:07] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[23:48:27] <CrtxReavr> MmeQuignon, that is typically only set for users that set a different time than system default.
[23:48:44] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[23:49:30] <MmeQuignon> Which may be the case here, since its TZ is CET but gets an UTC datetime
[23:49:47] *** Quits: Payam (~Payam@138.106.57.131) (Ping timeout: 256 seconds)
[23:50:01] <InPhase> MmeQuignon: That's blank for me.  On Linux timezone can be seen quickly by running:  date; date -u
[23:50:43] <bjs> I wish utcnow() was removed from datetime :(
[23:50:53] <parvXirc> raxor2k, As lacking time zone support is in `datetime`, as Julian said earlier `datetime.datetime.now()` should be giving you time in local time zone.
[23:51:00] <InPhase> bjs: Seems pretty useful to me.
[23:51:01] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:51:06] <bjs> InPhase: why
[23:51:13] <InPhase> To get the current utc time?
[23:51:22] <InPhase> Which is in many cases more useful than the local time.
[23:51:32] <MmeQuignon> depends.
[23:52:15] <raxor2k> parvXirc: pytz worked perfectly! thanks!
[23:52:22] <InPhase> UTC is global time, which is pretty useful in a globally networked world, he said globally over the chat network.
[23:52:26] <bjs> InPhase: isn't current time but in UTC a more useful thing?
[23:52:51] <InPhase> bjs: How is utcnow not current time in UTC?
[23:52:55] <parvXirc> raxor2k, Be sure to understand `localize` & `normalize` functions
[23:53:14] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:53:17] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[23:54:10] <bjs> InPhase: because it's a naive object, i.e. should be interpreted as a local time
[23:54:25] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:54:26] <raxor2k> parvXirc: 'europe_timezone = timezone('Europe/Amsterdam')'       current_datetime = datetime.datetime.now(europe_timezone)
[23:54:39] <raxor2k> this worked perfectly, so i have no idea what you are talking about
[23:55:24] <Julian> InPhase: (utcnow is indeed not recommended, but certainly timezones in UTC are great)
[23:55:31] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[23:55:31] <Julian> InPhase: see the docs -- https://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow
[23:55:39] *** Joins: Bakunin (~Lindis@user/lindis)
[23:55:41] <InPhase> bjs: I do find it odd that utcnow() does not label the timezone, but that seems an easy fix.
[23:56:01] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:14da:3bf0:27ee:7397) (Ping timeout: 256 seconds)
[23:56:16] <InPhase> There's a whole tzinfo member that is not set for some reason.
[23:56:20] <Julian> I don't really care personally about it being removed or not though, with or without it someone either knows "don't really use the datetime module unless you like dragon navigation" or they don't
[23:56:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:57:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[23:57:20] <bjs> InPhase: it's explicitly that way, it's "the local time, but with the hours/minutes components of UTC" there *is* a datetime method to get "the current time, in UTC" and it's datetime.now(timezone.utc)
[23:57:22] <parvXirc> raxor2k, You would encounter those functions if you would need to convert or set a time zone of `datetime.datetime` object
[23:57:25] *** Parts: Craziness (~UltraNeon@wikipedia/UltraNeon) (Remote host closed the connection)
[23:57:40] <InPhase> bjs: What is the value of leaving tzinfo blank?
[23:58:14] *** Parts: Alabama (uid524513@wikipedia/UltraNeon) ()
[23:58:36] <InPhase> Oh, I see you can't subtract the offset aware and offset naive ones.
[23:58:53] <bjs> InPhase: it makes it naive,  and the library assumes naive objects are local time
[23:59:05] <InPhase> Then it should label them as such.
[23:59:07] <bjs> there's very little value and better datetime libraries don't have naive objects at all
[23:59:12] <bjs> InPhase: it does.
[23:59:23] *** Joins: fikran (~fikran@user/fikran)
[23:59:38] *** Joins: sharperguy (~sharpergu@89.244.125.187)
[23:59:39] <bjs> explicitly (by setting tzinfo as None) and the docs have lots of big red boxes telling you, and a whole section at the beginning telling you
[23:59:39] <InPhase> bjs: Well it doesn't, because datetime.datetime.now() is not labeled with my local timezone.
[23:59:40] <bjs> :P
[23:59:50] <InPhase> bjs: Therefore it's not a local time.
