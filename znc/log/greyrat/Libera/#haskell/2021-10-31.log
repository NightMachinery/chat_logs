[00:02:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[00:04:55] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[00:05:30] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[00:06:06] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[00:06:13] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[00:06:55] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[00:12:52] *** Quits: proboscis (~proboscis@115-189-81-94.mobile.spark.co.nz) (Ping timeout: 252 seconds)
[00:13:11] *** Joins: proboscis (~proboscis@115-189-129-187.mobile.spark.co.nz)
[00:22:33] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[00:24:02] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:26:58] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:26:59] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:27:22] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[00:28:29] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:31:26] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 246 seconds)
[00:32:22] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[00:32:30] *** Joins: metabulation (~wootehfoo@user/wootehfoot)
[00:34:01] *** Quits: metabulation (~wootehfoo@user/wootehfoot) (Remote host closed the connection)
[00:36:27] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[00:38:41] *** Quits: Farzad (~FarzadBek@5.234.230.191) (Quit: Leaving)
[00:45:30] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[00:52:24] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[00:53:38] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:54:28] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:55:19] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[00:58:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[00:58:47] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[00:59:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[00:59:49] *** Quits: fendor (~fendor@178.115.79.50.wireless.dyn.drei.com) (Remote host closed the connection)
[01:02:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[01:03:01] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[01:03:47] *** Joins: Alleria (~textual@user/alleria)
[01:04:02] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[01:05:17] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[01:07:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 245 seconds)
[01:09:54] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[01:12:36] *** Joins: nitrix (~nitrix@user/nitrix)
[01:14:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:14:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:14:27] *** Joins: wroathe (~wroathe@user/wroathe)
[01:16:19] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[01:18:06] *** Joins: FragByte (~christian@user/fragbyte)
[01:19:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[01:19:33] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:19:35] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[01:20:33] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 265 seconds)
[01:28:25] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:28:26] *** Quits: proboscis (~proboscis@115-189-129-187.mobile.spark.co.nz) (Ping timeout: 245 seconds)
[01:30:50] *** Quits: chomwitt (~chomwitt@ppp-94-68-249-8.home.otenet.gr) (Ping timeout: 260 seconds)
[01:31:23] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:31:51] <maerwald> hmm... I want where-clauses that don't have access to the top-level function arguments
[01:32:54] <geekosaur> foo = \... where ... ? (hm, probably not)
[01:33:33] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[01:34:42] <energizer> is it possible to declare a binary operator to be associative?
[01:36:01] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[01:36:49] <hpc> what would that mean in practice?
[01:40:48] <energizer> without associativity, i have to choose foldl or foldr. with it, i can just fold without specifying
[01:41:04] <hololeap> I'm debugging an build error in gentoo's haskell repo for tasty-discover. it's using v1 cabal stuff to build. when --enable-executable-dynamic configure flag is enabled, I get this when the test suite tries to build:
[01:41:09] <hololeap> tasty-discover: error while loading shared libraries: libHStasty-discover-4.2.2-EJsJ69ECwwY3j0AkVuZwAF-ghc8.10.6.so: cannot open shared object file: No such file or directory
[01:41:20] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[01:42:15] *** Quits: Guest27 (~Guest27@188.64.207.100) (Ping timeout: 256 seconds)
[01:42:36] <energizer> oh i think i'm looking for Data.Monoid
[01:44:43] <hololeap> energizer: more specifically, Semigroup
[01:46:01] <hololeap> although you do need Monoid if you want to use fold from Data.Foldable (since some foldables can be empty)
[01:46:43] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:47:13] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:48:17] <energizer> how common is it to use things like Data.Monoid?
[01:48:34] <davean> Does anyone not use them?
[01:48:42] <hololeap> extremely common/useful
[01:48:47] <energizer> cool
[01:49:05] <davean> if you don't use them you're seriously weird
[01:49:26] <hpc> ^
[01:50:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[01:52:41] <hololeap> energizer: it's a good idea to memorize/understand everything in Data.Semigroup/Data.Monoid and use them whenever possible. it will help make your code easier to understand and maintain
[01:55:09] <hpc> once you understand it, you'll find monoidal structures all over the place
[01:55:12] <hpc> like Alternative
[01:55:23] <hpc> and categories
[02:02:21] *** Quits: acidsys (~LSD@2.lsd.systems) (Quit: I love you.)
[02:02:53] *** Joins: acidsys (~LSD@2.lsd.systems)
[02:03:05] <maerwald> doesn't convey much information though
[02:03:11] <maerwald> I dislike how optparse-applicative uses it
[02:05:22] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 260 seconds)
[02:08:30] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[02:09:16] *** Quits: jess (~jess@libera/staff/jess) ()
[02:11:02] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[02:16:02] *** Joins: catman (~catman@user/catman)
[02:19:11] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:19:49] *** Quits: max22- (~maxime@2a01cb08833598001f901fd4ac72f6bc.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[02:21:32] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[02:23:08] <jackdk> energizer: I can't even make it to the kitchen without tripping over a monoid. They're an extremely flexible tool, and a great introduction to the "let's port algebraic structures to typeclasses" that you see a lot of in Haskell
[02:23:56] <hpc> and just to rub it in, algebras themselves have two embedded monoids :D
[02:24:51] *** Joins: son0p (~ff@181.136.122.143)
[02:24:52] <jackdk> hpc: do you have a thing I can ready about that? I haven't heard this one
[02:26:03] <hpc> just wikipedia
[02:27:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:28:01] <hpc> an algebra has a ring, and a ring is basically (+), (*), and the distributive property
[02:29:10] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7441135e59462474fdf3062.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[02:29:26] <hpc> if you've ever thought that boolean algebra looks a lot like real algebra, they're the same abstract structure
[02:30:02] <jackdk> Gotcha - I remember rings from undergrad. So what are (+) and (*) for algebras?
[02:31:07] <hpc> they're me not wanting to type a bunch - https://en.wikipedia.org/wiki/Ring_(mathematics)#Definition is nice and concise
[02:31:38] <jackdk> yep, and then by "algebra" you mean https://en.wikipedia.org/wiki/Algebra_over_a_field ?
[02:31:42] <hpc> yep
[02:32:02] <hpc> that whole algebraic structures sidebar is worth reading
[02:32:02] <jackdk> ty for the pointer, I'll take a look
[02:35:27] *** Quits: CannibisIndica (~herb@user/mesaboogie) (Ping timeout: 260 seconds)
[02:36:28] <hpc> if you want a more difficult rabbit hole to jump down after that, try figuring out what real calculus, lambda calculus, relational calculus, and calculus of constructions have in common
[02:37:56] <hpc> (the answer may or may not be as neat and tidy)
[02:39:50] <jackdk> stop making me want to quit my day job and go back to uni ;-)
[02:41:49] <hpc> never!
[02:42:14] *** Quits: dariof4 (~dariof4@95.131.44.100) (Quit: WeeChat 3.3)
[02:43:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:19ff:7d99:67c6:79e3)
[02:44:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:49:37] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[02:54:23] *** Quits: mmhat (~mmh@55d4bc38.access.ecotel.net) (Quit: WeeChat 3.3)
[02:57:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:58:10] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[02:58:53] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Read error: Connection reset by peer)
[02:59:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:59:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:59:12] *** Joins: wroathe (~wroathe@user/wroathe)
[03:09:23] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 264 seconds)
[03:13:43] *** Quits: xsperry (~xs@user/xsperry) (Read error: Connection reset by peer)
[03:14:12] *** Joins: CannibisIndica (~herb@user/mesaboogie)
[03:14:51] *** CannibisIndica is now known as CannabisIndica
[03:15:10] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:15:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:15:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:18:50] <DigitalKiwi> contains "calculus"
[03:20:37] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:22:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[03:28:37] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:29:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[03:30:13] *** Joins: xsperry (~xs@user/xsperry)
[03:30:25] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:32:04] <hololeap> what does it mean when `cabal info` has parenthesis around an available version?
[03:32:24] <hololeap> hnix ... Versions available: ... 0.14.0.1, 0.14.0.2, (0.15.0)
[03:32:38] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[03:33:13] *** Joins: son0p (~ff@181.136.122.143)
[03:34:10] <geekosaur> marked as deprecated, according to the hackage page
[03:34:29] <hololeap> why would the latest version be marked as deprecated?
[03:35:31] <hololeap> I'm not seeing anything about this being deprecated or being a candidate: https://hackage.haskell.org/package/hnix-0.15.0
[03:35:45] <geekosaur> unclear. but I note that hackage's annotations conflate "deprecated" and "one version not preferred"
[03:35:53] <geekosaur> https://hackage.haskell.org/package/hnix/preferred
[03:36:40] <hololeap> hm, ok
[03:39:18] <geekosaur> so what it may actually mean is not so mucheprecated" as "don't rely on this yet", but because of the way hackage conflates those it reports it as deprecated
[03:40:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[03:42:24] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[03:43:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:44:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:48:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 246 seconds)
[03:50:41] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:55:00] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[03:59:12] *** Joins: guniberas (~guniberas@42.191.188.121)
[03:59:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[04:00:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:02:07] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[04:02:35] *** Joins: Skyfire (~pyon@user/pyon)
[04:08:10] *** Quits: haritz (~hrtz@user/haritz) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[04:08:42] *** Quits: Null_A (~null_a@2601:645:8700:2290:19ff:7d99:67c6:79e3) (Remote host closed the connection)
[04:11:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:12:11] *** Quits: yaroot (~yaroot@6.3.30.125.dy.iij4u.or.jp) (Quit: The Lounge - https://thelounge.chat)
[04:12:57] *** Joins: yaroot (~yaroot@6.3.30.125.dy.iij4u.or.jp)
[04:15:42] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:16:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:16:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:16:39] *** Joins: wroathe (~wroathe@user/wroathe)
[04:20:44] *** Quits: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Quit: WeeChat 2.9)
[04:20:56] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[04:26:07] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:26:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:27:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:28:47] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[04:28:47] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[04:28:50] *** allbery_b is now known as geekosaur
[04:32:05] <hololeap> good grief... how does a package pushed to hackage fail to build just with `cabal repl`?
[04:32:41] <geekosaur> cabal repl is dumb? (actually ghci is dumb)
[04:33:17] *** Quits: catman (~catman@user/catman) (Quit: WeeChat 3.4-dev)
[04:33:28] <geekosaur> cabal repl tries to load everything at once, which ghci often mishandles
[04:34:04] <geekosaur> iirc it's even worse if it has e.g. test or benchmark executables because you end up with conflicting Main modules
[04:34:05] <hololeap> no, it's not that
[04:34:56] <hololeap> they use HM.toList when HashMap is clearly imported qualified as M
[04:35:02] <hololeap> little mistakes like that
[04:35:08] <geekosaur> oy
[04:37:25] *** Joins: cads (~cads@ip-64-72-99-234.lasvegas.net)
[04:38:15] *** Quits: iqubic (~user@2601:602:9502:c70:367a:1ecd:9a9a:53e8) (Remote host closed the connection)
[04:43:26] <hololeap> yay, HLS to the rescue
[04:43:56] <hololeap> helped me find which module to import for a undefined type
[04:44:48] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:45:17] <aegon> hackage doesn't try to build as part of the ingest process?
[04:45:46] <geekosaur> it does build but it does so after accepting the package
[04:45:58] <geekosaur> you can see build reports on the hackage page
[04:46:15] <geekosaur> and a summary as to whether it built or not
[04:47:10] <geekosaur> hm, also I'm not sure it tries to build if you upload docs
[04:47:22] <geekosaur> since it builds as part of generating them
[04:47:32] <hololeap> it says it's building fine, but y'all can try it for yourselves: https://hackage.haskell.org/package/hnix-0.14.0.2
[04:47:54] <hololeap> src/Nix/Utils.hs:163:11: error: Not in scope: ‘HM.toList’ ...
[04:50:49] <hololeap> I had to patch it to get it to build: http://sprunge.us/dUG4WY
[04:51:08] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[04:51:51] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[04:52:15] *** Quits: finstern1s (~X@23.226.237.192) (Quit: leaving)
[04:54:23] *** Joins: finsternis (~X@23.226.237.192)
[04:54:48] *** Joins: trillp (~trillp@69.233.98.238)
[04:55:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[04:59:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 245 seconds)
[05:03:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[05:03:57] <remexre> how do people pronounce (>>) aloud?
[05:04:12] <hololeap> "and then" ?
[05:05:12] <hololeap> that's how I would do it...
[05:05:19] <remexre> eh, that's how rust pronounces bind...
[05:05:23] <remexre> ig it works
[05:05:52] <hololeap> print "this" >> print "that" -- print "this" and then print "that"
[05:06:06] * hololeap shrugs
[05:07:44] <hololeap> you can also pronounce it as (shifty eyes)
[05:08:36] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[05:09:04] <cads> hololeap, lol you could call ">>" the "sus" operator
[05:13:06] <hololeap> indeed >>
[05:14:30] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Quit: WeeChat 2.9)
[05:15:02] *** ec_ is now known as ec
[05:19:22] <aegon> is there a way to hide an instance of a class within a module?
[05:19:43] <aegon> i have a datatype that needs to be an instance of something like Aeson, but its always an error for a user to call toJson directly
[05:20:01] <aegon> er, user of the library
[05:20:25] <aegon> so i'd like to make it a private instance of that class and expose a different function that will do the toJson with some added meta info
[05:20:48] <geekosaur> no, instances are global
[05:20:48] <aegon> oh, i guess i could manually instance it and do the right thing :|
[05:21:01] <aegon> deriving is so nice though
[05:21:24] <aegon> kk, i need to make the instance do the right thing then
[05:24:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:25:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:27:17] <hololeap> aegon: you could make a hidden newtype wrapping your datatype and derive ToJSON/FromJSON, then leverage that using your public datatype
[05:31:07] <aegon> hololeap: oooh, thats perfect
[05:33:56] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[05:37:20] <cads> Hey all, I am working with the code listing here: https://gist.github.com/maxsu/62e8aeeb6acff3835240c6bc5a7a9651
[05:38:02] <cads> there are a few places where the code is really repetitive and noisy, and I wonder if I can clean that up
[05:40:11] <cads> for example, we define categories with two constructors, like Category ob_c, hom_c. But that makes the Bifunctor constructor very noisy: like Bifunctor ob_c hom_c ob_d hom_d ob_e hom_e f
[05:40:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:40:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:40:25] *** Joins: wroathe (~wroathe@user/wroathe)
[05:43:43] <cads> can I create an alternative constructor for Category that would let me write:
[05:44:05] <cads> class (Category C, Category D, Category E) => Bifunctor C D E f   where bimap:: (C.ob x, C.ob x', C.ob y, C.ob y') => C.hom x x' -> D.hom y -> y' -> E.hom (f x y) -> (f x' y')
[05:44:28] *** Joins: euouae (~euouae@user/euouae)
[05:44:30] <euouae> Hello
[05:44:33] <hololeap> isn't a category a Profunctor?
[05:45:57] <cads> hololeap, how do you figure?
[05:46:31] <hololeap> it's contravariant in `a` and covariant in `b`
[05:46:55] <euouae> I think profunctors are special kinds of categories
[05:47:05] <hololeap> other way around
[05:47:20] <hololeap> categories are profunctors that associate under composition
[05:47:34] <euouae> in that case, it goes both ways hololeap 
[05:47:51] <euouae> e.g. https://en.wikipedia.org/wiki/Profunctor#Profunctors_as_categories explains how to view profunctors as categories 
[05:48:34] <euouae> My question is, is it possible to write Haskell code that is /secure/ and transpiles to C? Now, what secure means, I don't know for sure. One example feature would be the zeroization fo memory after use
[05:49:39] <euouae> e.g. it would be nice to prove through the type system that the password leaves domain A and gets into domain B only for its use, and it is then deleted
[05:50:21] <hololeap> that sounds like something that could be done with linear types, perhaps?
[05:50:55] <cads> euouae, I hear that L4.Verified project did something like this by transpiling haskell to a special subset of C that lets us prove things are correct, but I forgot the details on how they ensured the compiler wouldn't introduce errors in the machine code
[05:51:46] <hololeap> it honestly sounds like something rust would do better
[05:51:56] <hololeap> haskell has that pesky garbage collector
[05:52:00] <cads> bit of a throwback, but might be a useful lead: http://code.ouroborus.net/fp-syd/past/2011/2011-05-sewell-l4v.pdf
[05:52:44] <euouae> Hmm I don't know if Rust can guarantee this hololeap, but I don't know much Rust either 
[05:53:11] <euouae> I also don't know what linare types are 
[05:53:58] <euouae> aah you're speaking of argument consumption
[05:54:57] <hololeap>  > prove through the type system that the X leaves domain A and gets into domain B only for its use, and it is then deleted
[05:55:08] <hololeap> that sounds like exactly what linear types do
[05:55:26] <euouae> Yeah you're right, I agree it is a good solution
[05:56:11] *** Quits: alx741 (~alx741@181.196.69.253) (Quit: alx741)
[05:57:16] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[05:58:17] <cads> I feel like these formal verification approaches have been around since the 70s but they're more or less unsustainable for most teams or individual programmers
[06:00:48] <cads> even now, after 50 years of development of specification and process algebras, linear logic, temporal logic, and so on. The machinery is there, but the effort to make, for example, a verified microkernel, is so stupendously difficult and technical that volunteers simply do not appear
[06:01:13] <euouae> cads, what of something a bit simpler, like a TLS library?
[06:02:08] <euouae> I'm looking at the slides you posted but I can't tell what's going on. There's three components, a Haskell reference implementation, the verification by Isabelle/HOL and a C implementation. I think the C implementation is hand-written using the Haskell as prototype? If I'm reading it correctly.
[06:03:35] <euouae> although that doesn't sound right. I'm not sure.
[06:04:13] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[06:05:35] *** Joins: img (~img@user/img)
[06:08:37] <euouae> I also know of Ivory https://ivorylang.org/ but it's only a subset of C
[06:09:04] <euouae> cads so for example I think it's reasonable to use ivory to write certain algorithms in it
[06:11:47] *** Joins: catman (~catman@user/catman)
[06:12:19] <euouae> Another great feature in Haskell that helps with security that C doesn't have is `hedgehog` or similar unit test libraries 
[06:13:15] <euouae> I'm just trying to understand if there's people who are interested/working in writing safe C programs utilizing Haskell, and to learn more about techniques involving that...
[06:13:48] <cads> euouae, they started with an abstract specification wrote an haskell implementation. From that they auto-extracted an executable specification. They were able to then do a proof that the haskell derived spec implements the abstract spec
[06:14:40] <cads> they then manually wrote a C implementation and manually proved that it conforms to the exectutable spec
[06:14:51] <euouae> I'm not sure about that manual proof cads
[06:14:54] <euouae> I don't understand how that worked 
[06:15:18] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[06:17:11] <cads> trying to find a paper with more details. If I recall correctly, there is a special subset of C and a HOL library that lets you prove things - like "there are no buffer overflows" about just that special subset of C
[06:17:53] <euouae> OK got it. There must have been some proof by argument too, I don't think it was all automated 
[06:18:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 264 seconds)
[06:18:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:19:39] <sm> euouae: C has fuzz testing tools
[06:19:52] <cads> euouae, yeah, there are two kinds of proof involved, and they are both manual.  First, we prove that the executable specification is really a refinement of the abstract spec. This proves our haskell implementation is legit, but is manual.
[06:20:32] <cads> euouae, second, we prove that each piece of C-code correctly implements its executable specification
[06:20:35] <euouae> That first part makes sense cads, I'm following. The abstract spec is something like Z-language 
[06:20:39] <cads> two huge acts of HOL proof bashing
[06:21:28] <euouae> OK got you. Even /that/ sounds great to me for my purpose. How about secure Haskell then? 
[06:21:37] <cads> euouae, the only part that we get "for free" is the haskell derived executable spec. And then we havbe to prove that the spec really does "carry" the abstract spec, yeah, like with Z-lang refinement or other spec langauges
[06:21:43] <euouae> Of course Haskell is generally secure, but for instance, a dangling password variable in memory is insecure. That's an example 
[06:21:57] <euouae> cads, you were involved? 
[06:22:07] <cads> nah, I'm just a fanboi
[06:22:35] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:22:36] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 245 seconds)
[06:22:41] <cads> also, I'm frustrated that the technique isn't more popular even though it's a decade old - my theory is just that the technique is incredibly technical
[06:23:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:23:11] *** Quits: xff0x (~xff0x@2001:1a81:52f0:9300:c38e:4fda:aa4c:3e21) (Ping timeout: 264 seconds)
[06:24:07] <cads> euouae, for your needs, maybe all you need is the the ability to draft up a very clean spec, write up some less clean haskell, and then prove that the haskel is to spec... 
[06:24:19] *** Joins: proboscis (~proboscis@115-189-81-94.mobile.spark.co.nz)
[06:24:45] *** Joins: xff0x (~xff0x@2001:1a81:5344:9700:7f1d:617d:8156:7d35)
[06:25:27] <cads> and we do that by auto-translating haskell to a messy "exec-spec", and formally linking that back to the abstract spec
[06:26:01] <euouae> so you're saying the executable spec can be ran and produces an "ok" or "no-good" as an answer? because as the project evolves and people contribute, a divergence may occur 
[06:26:22] <euouae> it would be nice if it were caught automatically instead of someone noticing "oops, 100 commits ago the specs diverged"
[06:26:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[06:27:22] <cads> I suppose the way that would work is that every change to the exec-spec must also come with a proof showing that the change still conforms to the abstract-spec
[06:29:09] <euouae> It's annoying that I feel like getting sucked in some sort of black hole
[06:30:07] <cads> yeah, all you want is verifiable code, but now you have to reason about an abstract spec, an implementation, an executable spec, and a proof showing that the executable spec conforms to the abstract spec
[06:30:15] <euouae> I started by wanting to add a feature to my IRC client, but then I had to modify the elisp TLS implementation, but the C functions were undocumented so I delved into the C lib, and the source code seemed bad so I started dreaming about writing a secure implementation of it
[06:31:17] <euouae> cads oh yeah, that's also a black hole :P 
[06:32:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:32:26] *** Quits: trillp (~trillp@69.233.98.238) (Quit: nyaa~)
[06:33:38] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:35:29] <cads> " the executable spec can be ran and produces an "ok" or "no-good" as an answer?"   That is close, in that we do run /something/ that tells us go/no go
[06:35:51] <cads> we have 4 artefacts:  AbstractSpec (a manually written HOL statement), Implementation (manually written Haskell code), ExecSpec (an automatically written Hol statement), and ExecSpecConformsToAbstractSpec (a manually written Hol proof)
[06:37:10] <cads> If we update Implementation, that updates ExecSpec. We can then attempt to run ExecSpecConformsToAbstractSpec. If it fails, then our code is out of spec, and we either need to fix our code or update ExecSpecConformsToAbstractSpec to prove the the new feature is still to spec
[06:37:32] <euouae> OK actually that sounds good enough to me cads
[06:38:38] <euouae> hmm I don't know anything about HOLs
[06:39:14] <cads> I would love to see a continuous integration pipeline where you're simply not allowed to push to Implementation unless your PR also passes the ExecSpecConformsToAbstractSpec
[06:41:46] <aegon> man, Debug.Trace is fantastic for pretending you don't need tests :P
[06:43:47] <cads> if you invented something that could turn your manual debugging sessions into reasonable unit tests, I feel like building a statue in your honor would be the least we could do
[06:45:06] *** Quits: td_ (~td@muedsl-82-207-238-113.citykom.de) (Ping timeout: 245 seconds)
[06:47:47] <aegon> i wish. I'm suffering from sunk cost fallacies right now. Tested the library to spec, but then for a prototype client for integration i was like, nahhhhh. thats like a one time thing to work out the kinks in. got half way through and paused for the night...
[06:47:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:47:58] <aegon> now i'm not sure whats a bug or whats odd stuff i put in there to try to find bugs :\
[06:48:19] <aegon> and its already mostly manually tested, so why go back to unit test it now right? :D
[06:49:07] <aegon> thats an awesome idea though, if there were a tool to watch some manual integration tests and point at what functions are prolly worth unit-testing it'd save so much time in so many place
[06:49:11] <aegon> *places
[06:50:27] <aegon> you'd need some sort of valgrind like setup watching the bits 
[06:51:10] <aegon> actually, does valgrind not already have the ability to point at funcitons used etc?
[06:51:13] * aegon runs to the docs
[06:51:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:52:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[06:54:38] <cads> something that watches and summarizes your debug sessions could be nice. If you have a debug sessions that you want to implement as unit tests, you haven't lost your precious work.
[06:54:44] <cads> I even bet it is now possible to train a transformer to watch you manually test a piece of code, and "guess" an equivalent unit or integration test
[06:56:51] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[06:59:07] *** Joins: emf (~emf@2620:10d:c090:400::5:9927)
[07:00:19] *** Quits: emf (~emf@2620:10d:c090:400::5:9927) (Client Quit)
[07:02:36] <aegon> yeah it looks like valgrand has enough tracking stuff to mess with the idea thats really neat, i wish there was more emphasis in code land on tools like flay / flog and metrics like those
[07:03:37] <aegon> cads: what do you mean by a transformer in that context?
[07:06:32] <cads> aegon, transformers are a kind of neural network that appeared in 2017. They are getting really good at taking a sequence of complex data - like a waveform in spoken english - and translating it directly into another complex sequence - like a waveform translated to spoken french.
[07:06:43] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:07:24] <euouae> cads how?
[07:07:45] <euouae> do they do something insane like look at the waveform in a basis and decide what the new coefficients are?
[07:08:12] <cads> aegon, and recently transformer models have been used to do code tasks. For example, you give it it text describing how to zip two lists together, and it gives you a python implementation of Zip
[07:08:17] <aegon> cads: interesting, yeah i've worked with em a little in doing some automatic music transcription 
[07:08:22] *** Quits: viluon (uid453725@id-453725.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:08:45] <aegon> i've never thought of using them on byte code or anthing or heard of them goign into code implementations
[07:08:56] <aegon> is that how githubs copilot stuff is working?
[07:09:45] <aegon> i'm lost on the jump from that type of stuff to looking at a binary run in memory and extracting symbol info but it sounds really interesting
[07:10:53] <cads> Copilot is powered by OpenAI's Codex, which is a code-trained version of the openAI GPT3 language transformer
[07:11:38] <cads> aegon, I haven't run into anything that really explain "how" we can take a complex signal and just zap it into another complex signal - especially something so complex as spoken speech
[07:11:51] <cads> let alone something as complex as code
[07:12:51] <cads> aegon, a fun thing is that it's not very good. A study showed that in security-sensitive coding tasks, Codex introduced buffer overflows and other security holes 40% of the time
[07:13:54] <cads> the reason why is hypothesized to be the training corpus - the engine was trained on the github corpus, which has a lot of low quality code and security bugs.
[07:15:31] <cads> aegon, so far, the best I can do is show you a colorful graph of neural network components put together in a novel way, wave my hands, slap the hood, and say "this baby is able to internally learn a latent representation covering the complexities of the underlying domain"
[07:15:46] *** [_] is now known as [itchyjunk]
[07:16:57] <cads> Hey all, is there any writing about how to clean up messy typeclasses?
[07:17:11] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[07:17:11] <cads> this looks like an example: http://h2.jaguarpaw.co.uk/posts/simplifying-typeclasses/
[07:18:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:20:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:25:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:36:24] <aegon> cads: aye thats really interesting though, never thoguht about using a net on an in memory representation fo something and trying to parse out a good sytactic version. If you haven't already you should check out hasktorch
[07:40:56] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[07:45:54] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[07:48:18] *** Quits: euouae (~euouae@user/euouae) (Quit: thank you for the help)
[07:52:36] *** Quits: boxscape_ (~boxscape_@i577BCB53.versanet.de) (Ping timeout: 245 seconds)
[07:53:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:56:08] *** Joins: mbuf (~Shakthi@171.61.246.251)
[07:59:29] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.118)
[08:00:40] <dsal> if I have a `forall m. MonadIO m => m T` is there a way to get to the `m` type from within the body without a proxy?  @m tells me it's not in scope.
[08:02:57] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[08:07:51] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[08:08:01] *** Joins: Guest19 (~Guest19@2600:1700:31c0:3a10:81e2:cfe0:2015:d55b)
[08:11:11] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[08:12:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:13:20] <monochrom> ScopedTypeVariables
[08:15:19] <dsal> Oh weird.  I thought that was on and/or implied.  heh
[08:15:40] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[08:17:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:17:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:17:03] *** Joins: wroathe (~wroathe@user/wroathe)
[08:18:13] *** Joins: machinedgod (~machinedg@24.105.81.50)
[08:20:02] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::d3fb)
[08:23:00] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb broken config)
[08:23:21] *** Joins: Skyfire (~pyon@user/pyon)
[08:27:08] *** Quits: ghoulguy (x@libera/staff/glguy) (Quit: Quit)
[08:28:17] *** Joins: glguy (x@libera/staff/glguy)
[08:28:43] *** glguy is now known as ghoulguy
[08:31:02] *** Quits: Guest19 (~Guest19@2600:1700:31c0:3a10:81e2:cfe0:2015:d55b) (Quit: Client closed)
[08:41:48] <cads> aegon, I haven't used it, but I might try to port a pytorch project for fun soon
[09:04:04] *** Quits: manicennui (uid349235@id-349235.tinside.irccloud.com) (Quit: Keep firing, assholes!)
[09:15:24] *** Joins: boxscape_ (~boxscape_@mue-88-130-59-084.dsl.tropolys.de)
[09:18:51] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[09:20:28] <brainfreeze> Why do instance declarations always seem to be missing a type variable? It almost seems like it's currying the type variables.
[09:21:06] <c_wraith> type constructors are curried, yes
[09:21:22] <c_wraith> and instances have to have the right kind
[09:21:35] <c_wraith> If that means not fully applying type arguments, so be it
[09:26:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:27:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:29:30] *** Joins: haritz (~hrtz@62.3.70.206)
[09:29:30] *** Quits: haritz (~hrtz@62.3.70.206) (Changing host)
[09:29:30] *** Joins: haritz (~hrtz@user/haritz)
[09:32:11] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[09:33:45] *** Joins: mei (~mei@user/mei)
[09:35:16] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[09:36:22] <brainfreeze> Is there a formal name for what I mentioned?
[09:39:15] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:40:07] *** Joins: img (~img@user/img)
[09:41:12] *** Quits: haritz (~hrtz@user/haritz) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[09:44:21] *** Joins: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220)
[09:44:22] *** Quits: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220) (Changing host)
[09:44:22] *** Joins: haritz (~hrtz@user/haritz)
[09:53:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[09:54:37] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:56:48] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[10:01:54] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[10:08:57] *** Quits: proboscis (~proboscis@115-189-81-94.mobile.spark.co.nz) (Read error: Connection reset by peer)
[10:10:04] *** Joins: proboscis (~proboscis@115-189-81-94.mobile.spark.co.nz)
[10:10:45] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:10:45] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:10:45] *** Joins: wroathe (~wroathe@user/wroathe)
[10:15:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[10:20:58] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:23:40] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[10:24:38] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[10:26:52] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[10:27:44] *** Quits: ikke (~kevin@alpine/developer/ikke) (Quit: WeeChat 3.2)
[10:27:59] *** Joins: ikke (~kevin@alpine/developer/ikke)
[10:31:45] *** Quits: aegon (~mike@174.127.249.180) (Quit: leaving)
[10:38:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:41:39] *** Joins: img_ (~img@user/img)
[10:41:40] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[10:44:47] *** Quits: img (~img@user/img) (Ping timeout: 264 seconds)
[10:46:32] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 265 seconds)
[10:46:51] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[10:50:47] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::d3fb) (Ping timeout: 264 seconds)
[10:51:33] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[10:53:05] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:54:26] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[10:54:30] *** Quits: chexum_ (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 276 seconds)
[10:59:04] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:00:15] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:00:16] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:16:34] *** Quits: img_ (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:24:02] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[11:25:27] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:26:52] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Read error: Connection reset by peer)
[11:27:03] *** Joins: img (~img@user/img)
[11:27:07] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[11:28:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 264 seconds)
[11:35:27] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:00] *** Joins: aliosablack (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[11:38:29] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[11:39:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[11:39:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:43:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[11:47:03] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[11:52:04] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7441135e59462474fdf3062.dip0.t-ipconnect.de)
[11:52:48] <Franciman> tik tok tik tok, the time is running out. be prepared
[11:56:14] *** Joins: Farzad (~FarzadBek@178.131.30.143)
[12:02:02] *** Joins: fendor (~fendor@178.115.79.50.wireless.dyn.drei.com)
[12:09:40] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.118) (Read error: Connection reset by peer)
[12:10:36] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:11:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[12:13:22] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:13:51] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:14:11] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:15:31] *** Quits: boxscape_ (~boxscape_@mue-88-130-59-084.dsl.tropolys.de) (Ping timeout: 245 seconds)
[12:20:40] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[12:21:57] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[12:26:10] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:28:14] *** Joins: c0c0 (~coco@85.195.206.193)
[12:28:40] *** Quits: c0c0 (~coco@85.195.206.193) (Client Quit)
[12:28:49] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:29:11] *** Quits: guniberas (~guniberas@42.191.188.121) (Ping timeout: 264 seconds)
[12:30:06] *** Quits: tsmc[m] (~tsmcmatri@2001:470:69fc:105::1:7e1) (Quit: You have been kicked for being idle)
[12:30:08] *** Quits: sam[m]12 (~sammtopoi@2001:470:69fc:105::e887) (Quit: You have been kicked for being idle)
[12:33:34] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[12:35:16] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[12:35:31] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:37:57] <[exa]> Franciman: what's the deal?
[12:44:56] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7441135e59462474fdf3062.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[12:45:34] <cads> Is halloween, am feeling spooky. https://gist.github.com/maxsu/65ee89f6306fe2e62c5e8e519b635399 Happy halloween!
[12:50:46] *** Joins: acidjnk (~acidjnk@p200300d0c7441135e0a3c48788e32464.dip0.t-ipconnect.de)
[12:50:55] <Rembane_> Very spooky! 
[12:51:04] *** Joins: kenran (~kenran@200116b82b0d0a00e98487ecbf918c70.dip.versatel-1u1.de)
[12:51:40] <cads> I'm trying to get at least some of the ghosts out of it, lol
[12:53:26] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 245 seconds)
[12:59:44] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[13:09:38] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[13:11:00] *** Joins: img (~img@user/img)
[13:15:13] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[13:16:29] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[13:20:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[13:21:06] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[13:23:27] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[13:25:55] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[13:27:47] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[13:27:51] *** Quits: aliosablack (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[13:28:50] *** Joins: zaquest (~notzaques@5.128.210.178)
[13:30:23] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 265 seconds)
[13:35:26] <maerwald> Haskell is mentioned wrt "significant whitespace" in the "Worst Programming Language Ever" talk: https://www.youtube.com/watch?v=2mnYf7L7Amw
[13:44:47] *** Quits: img (~img@user/img) (Ping timeout: 264 seconds)
[13:44:48] <Rembane_> Can't Haskell be written without significant whitespace? 
[13:45:22] *** Joins: mmhat (~mmh@55d4be88.access.ecotel.net)
[13:46:10] <maerwald> the point is that changing whitespaces to tabs can make your program not compile
[13:46:25] <maerwald> or not following alignment rules in general
[13:47:21] * Vq (half-jokingly) regards bad indentation in C worse than behavioural bugs
[13:47:45] <Rembane_> maerwald: Got it. I'm too used to Python and Haskell to see this as a problem. 
[13:48:02] <Cale> Replacing whitespace with vertical tabs also can make your program not compile in many languages, but nobody cares
[13:48:18] <Rembane_> What's a vertical tab and how is it rendered? 
[13:48:21] <Rembane_> I've never seen one. 
[13:48:54] <Cale> It's an ancient character that was used to speed up vertical movement on printers
[13:49:01] <maerwald> :D
[13:49:08] <Cale> But it's still there as a form of whitespace
[13:49:34] <maerwald> the only time I printed out my code was to troll a professor
[13:49:43] <Vq> I don't see page-feed characters that often anymore, I wonder what languages accepts them...
[13:51:08] <Rembane_> Cale: Cool, doesn't sound too useful on a monitor but I can see why it was useful back in the day. 
[13:51:18] <maerwald> and when you don't match the whitespaces in python, the error you get is "couldn't match colon"
[13:51:37] <Rembane_> I am not going to make an inappropriate joke about that. 
[13:51:38] <maerwald> but I guess it would be kinda hard for the compiler figuring out what you meant
[13:52:18] <maerwald> it could try brute-force compilation
[13:52:52] <Rembane_> maerwald: Try all possible indentations and see what kinda makes sense?
[13:53:16] <maerwald> "compiles"
[13:53:21] <maerwald> "makes sense" is something else
[13:54:20] <Cale> Tab also isn't too useful on a monitor, but people still seem to care about interpreting tab characters for some reason. I would just ban them altogether.
[13:54:29] *** Joins: notzmv (~zmv@user/notzmv)
[13:55:04] <Rembane_> maerwald: That's my point, it would be very easy to get "interesting" semantics from that. :) 
[13:55:14] <Rembane_> I like to have the tab key but not the tab character. 
[13:59:22] *** Quits: kenran (~kenran@200116b82b0d0a00e98487ecbf918c70.dip.versatel-1u1.de) (Ping timeout: 260 seconds)
[13:59:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[14:00:19] *** Joins: kenran (~kenran@200116b82b0d0a0094e57a89e1053ea4.dip.versatel-1u1.de)
[14:03:37] *** Quits: kenran (~kenran@200116b82b0d0a0094e57a89e1053ea4.dip.versatel-1u1.de) (Client Quit)
[14:05:29] <maerwald> it's a great talk... he put all his sincere hatred and made something funny out of it
[14:05:44] <maerwald> and I can feel there's years of pain behind it
[14:07:00] <maerwald> the only conditional operator being `unless` is a great idea
[14:08:51] <maerwald> I must admit I can't stand that function in haskell either (especially when hlint suggests it to me)
[14:09:44] <maerwald> just because in my head `when (not ...)` sounds much more plausible
[14:09:50] *** Quits: mmhat (~mmh@55d4be88.access.ecotel.net) (Quit: WeeChat 3.3)
[14:12:54] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[14:15:54] *** Joins: mmhat (~mmh@55d4be88.access.ecotel.net)
[14:19:26] *** Quits: xff0x (~xff0x@2001:1a81:5344:9700:7f1d:617d:8156:7d35) (Ping timeout: 260 seconds)
[14:19:55] *** Joins: xff0x (~xff0x@2001:1a81:5344:9700:9e27:fb01:4b2b:d1ea)
[14:24:23] *** Quits: mmhat (~mmh@55d4be88.access.ecotel.net) (Quit: WeeChat 3.3)
[14:25:15] *** Joins: mmhat (~mmh@55d4be88.access.ecotel.net)
[14:30:53] *** Joins: alx741 (~alx741@181.196.69.253)
[14:37:50] *** Joins: Guest31 (~Guest31@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[14:39:02] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr)
[14:44:29] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:46:20] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[14:51:23] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[14:53:45] *** Joins: DNH (~DNH@8.43.122.53)
[14:56:44] *** Joins: __monty__ (~toonn@user/toonn)
[15:07:31] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:10:13] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[15:11:56] <tomjaguarpaw> With OverloadedRecordDot in 9.2, if I want to write  record.field  then the  field  for my record must be in scope, at the very least in qualified form. Is that expected? Seems strange to me.
[15:12:51] <tomjaguarpaw> e.g. if I have  module Foo where data Foo = Foo { field :: Int }  and  module Main where import (Foo(Foo)); main = print (Foo 1).field  then it will not work.
[15:13:01] <tomjaguarpaw> I have to add at least  import qualified Foo(field)
[15:13:09] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:13:32] <tomjaguarpaw> Why does it care that  field  is in scope?  Doesn't the  HasField  instance do all that is required?
[15:20:31] *** Quits: hippoid (~idris@184.105.6.88) (Ping timeout: 245 seconds)
[15:21:28] *** Joins: hippoid (~idris@184.105.6.88)
[15:24:39] *** Joins: Liudvikas (~Liudvikas@88.222.185.135)
[15:24:57] <zincy> davean: If you want to do timeouts with Machines can you use  Wye machine which has one input that just just yields a Timeout action to the Wye?
[15:24:58] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:25:14] *** Quits: acidjnk (~acidjnk@p200300d0c7441135e0a3c48788e32464.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[15:27:13] *** Quits: Farzad (~FarzadBek@178.131.30.143) (Quit: Leaving)
[15:30:35] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 246 seconds)
[15:31:10] *** Joins: cheater (~Username@user/cheater)
[15:33:46] <amesgen[m]> tomjaguarpaw: HasField is compiler-solved, and the behavior you are seeing is exactly the reason why, as it would be impossible to "hide" fields otherwise.
[15:35:17] <amesgen[m]> See https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0023-overloaded-record-fields.rst#solving-hasfield-constraints
[15:36:17] <tomjaguarpaw> amesgen[m]: Thanks
[15:37:49] *** Quits: xsperry (~xs@user/xsperry) ()
[15:41:49] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:42:26] <zincy> Does using a tuple make sense over a fixed list when you know ahead of time exactly what you need?
[15:43:17] <zincy> For a card game there are different stages say 1,2,3,4,5 and we have (Card,Card,Card) and then the next stages just mean an N+1 tuple 
[15:43:17] <geekosaur> it can. but if you need list operations, you lose those with a tuple
[15:43:40] <zincy> Convert to list? Maybe this is slow hmm
[15:43:58] <geekosaur> in particular with that case you would need to manually build the N+1-tuple
[15:44:10] <geekosaur> which means it won't generalize well for different Ns
[15:44:46] <zincy> Yeah generalisation wont be needed most probably
[15:51:54] *** Quits: Liudvikas (~Liudvikas@88.222.185.135) (Ping timeout: 260 seconds)
[15:53:13] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:59:59] *** Quits: xff0x (~xff0x@2001:1a81:5344:9700:9e27:fb01:4b2b:d1ea) (Ping timeout: 246 seconds)
[16:02:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:02:06] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[16:02:34] *** Quits: proboscis (~proboscis@115-189-81-94.mobile.spark.co.nz) (Ping timeout: 260 seconds)
[16:05:23] *** Joins: yin (~z@user/zero)
[16:06:07] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Client Quit)
[16:07:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[16:08:05] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[16:10:38] *** Joins: xff0x (~xff0x@2001:1a81:5344:9700:9e27:fb01:4b2b:d1ea)
[16:11:47] *** Joins: proboscis (~proboscis@115-189-83-206.mobile.spark.co.nz)
[16:12:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[16:14:59] <yin> sortOn is defined as `map snd . sortBy (comparing fst) . map (\x -> let y = f x in seq y (y,x))`
[16:15:41] <yin> this is referred to as a Schwartzian transform
[16:16:09] <yin> the advantage beying that it only evaluates f once for each element
[16:16:17] <yin> s/beying/being
[16:17:07] <yin> my question is, can the compiler optimize sortBy . comparing to this?
[16:17:28] *** Parts: thblt (~thblt@user/thblt) (ERC (IRC client for Emacs 28.0.50))
[16:23:47] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:24:54] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[16:26:41] *** Joins: xsperry (~xs@user/xsperry)
[16:27:06] *** Joins: Liudvikas (~Liudvikas@88.222.185.135)
[16:28:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[16:32:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 245 seconds)
[16:32:52] <opqdonut> yin: I don't think so. It'd be a complex Common Subexpression Elimination optimization that GHC doesn't do even in simple cases (AFAIK)
[16:33:30] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[16:40:20] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[16:41:16] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[16:42:00] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[16:43:20] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[16:46:48] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:50:25] *** Quits: Liudvikas (~Liudvikas@88.222.185.135) (Quit: Konversation terminated!)
[16:51:00] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[16:51:58] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[16:52:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:52:54] <hippoid> :t repeat (:)
[16:52:55] <lambdabot> [a -> [a] -> [a]]
[16:53:11] <hippoid> I'm stuck on how repeat can accept (:) as an argument
[16:53:26] <hippoid> my brain hasn't grokked how the types can unify
[16:54:36] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:55:12] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[16:56:35] <Hecate> % :t repeat
[16:56:35] <yahb> Hecate: a -> [a]
[16:56:37] <xsperry> it just creates a list of (:) functions.. ie [(:), (:), ..)
[16:56:56] <Hecate> % :t (:)
[16:56:56] <yahb> Hecate: a -> [a] -> [a]
[16:57:33] <Hecate> the 'a' is not the same
[16:57:36] <hippoid> xsperry: thanks. now it seems obvious
[16:58:19] <hippoid> so i suppose that means you can apply repeat to any type
[16:58:55] <xsperry> to a value of any type, yes
[16:58:59] <xsperry> :t repeat repeat
[16:58:59] <lambdabot> [a -> [a]]
[16:59:58] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[17:03:22] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[17:03:46] <jollygood2> :t repeat (repeat (repeat (:)))
[17:03:47] <lambdabot> [[[a -> [a] -> [a]]]]
[17:08:43] <hpc> now you can finally answer the question "how many arguments does id take?"
[17:12:41] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[17:13:26] <jollygood2> one, just like all functions. :P
[17:13:35] <hpc> :P
[17:13:51] *** Quits: Guest31 (~Guest31@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[17:16:50] *** Joins: zero (~z@user/zero)
[17:18:32] *** Joins: __monty__ (~toonn@user/toonn)
[17:19:17] *** Quits: yin (~z@user/zero) (Ping timeout: 268 seconds)
[17:19:28] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:19:41] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[17:21:20] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[17:23:22] *** Quits: __monty__ (~toonn@user/toonn) (Client Quit)
[17:24:51] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Client Quit)
[17:30:33] *** Joins: Farzad (~FarzadBek@178.131.30.143)
[17:35:14] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[17:39:05] *** Joins: frx (~bc8165b6@cerf.good1.com)
[17:39:17] *** frx is now known as jacks4
[17:41:46] *** Quits: sqrt2 (~ben@80-108-18-7.cable.dynamic.surfer.at) (Ping timeout: 245 seconds)
[17:43:06] *** Joins: sqrt2 (~ben@80-108-18-7.cable.dynamic.surfer.at)
[17:45:30] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 260 seconds)
[17:46:39] *** Joins: __monty__ (~toonn@user/toonn)
[17:47:06] *** Joins: gdd (~gdd@129.199.146.230)
[17:50:23] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[17:52:00] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[17:52:06] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Ping timeout))
[17:56:30] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[17:56:54] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[18:01:10] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[18:02:46] *** Joins: max22- (~maxime@2a01cb0883359800143d8394a75c565e.ipv6.abo.wanadoo.fr)
[18:03:10] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[18:05:03] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[18:18:28] *** Joins: machinedgod (~machinedg@24.105.81.50)
[18:19:10] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[18:22:21] *** Joins: neurocyte0132889 (~neurocyte@45.93.111.195)
[18:22:21] *** Quits: neurocyte0132889 (~neurocyte@45.93.111.195) (Changing host)
[18:22:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:25:11] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:25:36] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:25:46] *** Joins: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net)
[18:29:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[18:31:30] *** Quits: Farzad (~FarzadBek@178.131.30.143) (Quit: Leaving)
[18:32:27] <maerwald> the Haskell report talks about multipler function arguments in various places though, afair
[18:33:54] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:8872:6fff:30a7:51e0)
[18:34:16] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Ping timeout: 245 seconds)
[18:37:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21d2:19c0:e01b:f66c) (Ping timeout: 260 seconds)
[18:45:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894)
[18:49:35] <ksu> 'unless' always reminds me of this great scene: https://www.youtube.com/watch?v=q_vGN9R3c3k
[18:51:49] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[18:54:07] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[18:56:38] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[18:57:47] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:59:00] *** Quits: akspecs__ (~akspecs@user/akspecs) (Ping timeout: 260 seconds)
[18:59:35] *** Joins: jil (~user@160.120.146.111)
[18:59:39] <jil> hello
[19:01:05] *** Joins: DNH (~DNH@8.43.122.53)
[19:02:47] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[19:02:50] <jil> I'm quit happy with the way I solved the 6th exercices of the 10th chapter of Hutton but not with the formatting of the code.  I was not able to factorise the code snipet `(prev_ ++ next_)`.  Please show me how to do so ? https://paste.debian.net/1217480
[19:05:25] *** Quits: hippoid (~idris@184.105.6.88) (Quit: Lost terminal)
[19:09:15] *** Quits: mbuf (~Shakthi@171.61.246.251) (Quit: Leaving)
[19:18:04] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[19:20:09] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[19:21:08] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:21:42] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[19:23:13] *** Joins: fendor_ (~fendor@77.119.160.25.wireless.dyn.drei.com)
[19:26:02] *** Quits: fendor (~fendor@178.115.79.50.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[19:28:20] *** Joins: Jing_ (~textual@103.121.208.115)
[19:35:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:35:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:35:32] *** Joins: wroathe (~wroathe@user/wroathe)
[19:37:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:714b:c982:dcb8:3f01)
[19:38:09] <Cale> jil: You could write something like  let line = prev_ ++ next_ just above your if
[19:38:19] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:39:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[19:39:44] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[19:40:59] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[19:44:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 264 seconds)
[19:48:56] <jil> Hecate: gave me some courage in another channel and I came up with this https://paste.debian.net/1217484/  but I curious to try the let line , thank you Cale.
[19:50:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[19:50:44] <jil> Great.  Thank you Cale
[19:51:20] <kosmikus> it's not entirely clear to me why you need both prev_ and next_ at all. it doesn't seem like you're doing anything anywhere that would require them to be separate from each other.
[19:52:46] <jil> yep you are correct kosmikus...  and I should correct that.  Thank you.
[19:54:09] *** Quits: fendor_ (~fendor@77.119.160.25.wireless.dyn.drei.com) (Remote host closed the connection)
[19:54:53] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:55:22] *** Joins: fendor (~fendor@77.119.160.25.wireless.dyn.drei.com)
[19:56:00] *** Joins: __monty__ (~toonn@user/toonn)
[19:57:34] <jil> this is better https://paste.debian.net/1217486/  Merci
[19:58:13] *** Joins: Vajb (~Vajb@ndtzwggz0g23egfbw-2.v6.elisa-mobile.fi)
[20:00:40] <jil> Is the way I user `LANGUAGE MultiWayIf` ok with your own style of coding.  Or is my case too simple for it ?  I sometime see haskell code with a load of options at the top and coming from python I find it strange.   What's your point of view on this coding options ?
[20:02:35] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:03:05] <dsal> You mean language extensions?  You can choose the ones that are right for you.  Some are sort of "this should be on" and some are a bit stranger.  I don't think I've ever been tempted to use MultiWayIf, but GHC2021 looks like this: https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/control.html
[20:03:54] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[20:05:50] <jil> Thank you dsal 
[20:06:51] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[20:12:38] *** Quits: alx741 (~alx741@181.196.69.253) (Quit: alx741)
[20:19:53] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[20:21:37] *** Joins: econo (uid147250@user/econo)
[20:23:04] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[20:26:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[20:26:43] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[20:29:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[20:30:41] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:33:01] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 245 seconds)
[20:33:25] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:33:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:34:04] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[20:35:43] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:38:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[20:39:18] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[20:40:06] *** Quits: mmhat (~mmh@55d4be88.access.ecotel.net) (Quit: WeeChat 3.3)
[20:45:55] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:45:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:45:55] *** Joins: wroathe (~wroathe@user/wroathe)
[20:46:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:714b:c982:dcb8:3f01) (Remote host closed the connection)
[20:47:32] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[20:50:15] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 260 seconds)
[20:50:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[20:53:08] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[20:55:15] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[21:06:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[21:11:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[21:12:31] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:12:50] *** Quits: jil (~user@160.120.146.111) (Remote host closed the connection)
[21:14:00] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[21:14:20] *** Joins: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net)
[21:14:20] *** Quits: akspecs__ (~akspecs@136-24-214-166.cab.webpass.net) (Changing host)
[21:14:20] *** Joins: akspecs__ (~akspecs@user/akspecs)
[21:14:49] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d4e:dbb8:1851:3894) (Remote host closed the connection)
[21:15:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:16:10] *** Joins: lbseale_ (~lbseale@user/ep1ctetus)
[21:16:41] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:17:34] *** Joins: lbseale__ (~lbseale@user/ep1ctetus)
[21:18:58] *** Quits: xff0x (~xff0x@2001:1a81:5344:9700:9e27:fb01:4b2b:d1ea) (Ping timeout: 260 seconds)
[21:19:36] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[21:19:49] *** Joins: xff0x (~xff0x@2001:1a81:5344:9700:97c:3a82:54b0:a6da)
[21:19:58] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Ping timeout: 260 seconds)
[21:21:22] *** Quits: lbseale_ (~lbseale@user/ep1ctetus) (Ping timeout: 260 seconds)
[21:21:57] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:26:48] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[21:27:59] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[21:30:31] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[21:30:35] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[21:30:43] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[21:31:11] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349)
[21:32:09] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[21:33:08] *** Joins: DNH (~DNH@8.43.122.53)
[21:34:03] *** Joins: aegon (~mike@174.127.249.180)
[21:34:36] *** eco_ is now known as eco
[21:34:45] *** Quits: SethTisue__ (sid14912@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[21:36:23] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 264 seconds)
[21:37:55] *** Joins: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com)
[21:48:35] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[21:52:17] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[21:56:12] *** Quits: catman (~catman@user/catman) (Quit: WeeChat 3.4-dev)
[21:56:36] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[22:07:43] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:08:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:11:47] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:eba7:95bb:d099:a7d8) (Ping timeout: 264 seconds)
[22:13:50] *** Joins: alx741 (~alx741@181.196.69.253)
[22:15:03] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[22:15:30] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:17:28] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:21:18] *** Joins: catman (~catman@user/catman)
[22:25:14] *** Quits: lbseale__ (~lbseale@user/ep1ctetus) (Ping timeout: 260 seconds)
[22:31:38] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:35:00] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:35:45] *** Joins: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net)
[22:40:38] *** Quits: yauhsien (~yauhsien@61-231-61-245.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[22:53:44] *** Quits: jacks4 (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[22:57:39] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[22:59:42] *** Joins: notzmv (~zmv@user/notzmv)
[23:01:26] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[23:02:01] *** Joins: acidsys (~LSD@2.lsd.systems)
[23:02:06] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[23:03:15] *** Quits: xff0x (~xff0x@2001:1a81:5344:9700:97c:3a82:54b0:a6da) (Ping timeout: 260 seconds)
[23:03:34] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[23:05:21] *** Joins: xff0x (~xff0x@2001:1a81:5344:9700:97c:3a82:54b0:a6da)
[23:10:17] *** Quits: proboscis (~proboscis@115-189-83-206.mobile.spark.co.nz) (Ping timeout: 264 seconds)
[23:10:49] *** Joins: proboscis (~proboscis@115-189-130-93.mobile.spark.co.nz)
[23:18:17] *** Joins: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net)
[23:20:27] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2) (Remote host closed the connection)
[23:22:18] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:e5fe:6e8c:c240:1bb2)
[23:27:50] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:54f0:825c:9f33:c349) (Remote host closed the connection)
[23:27:51] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[23:30:08] <maerwald> MultiWayIf and LambdaCase I usually enable globally
[23:32:24] *** Joins: neurocyte0132889 (~neurocyte@45.93.111.195)
[23:32:24] *** Quits: neurocyte0132889 (~neurocyte@45.93.111.195) (Changing host)
[23:32:24] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:35:11] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 264 seconds)
[23:35:12] *** Quits: Vajb (~Vajb@ndtzwggz0g23egfbw-2.v6.elisa-mobile.fi) (Read error: Connection reset by peer)
[23:35:46] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[23:36:16] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[23:37:35] *** Joins: juhp (~juhp@128.106.188.220)
[23:37:42] <yushyin> curious to see how many will replace multiwayif with lambdacases
[23:38:59] <geekosaur> mm, thye're not really either/or, MultiWayIf doesn't consume a parameter whereas LambdaCase does
[23:39:31] <yushyin> lambdacases, plural
[23:39:54] *** Joins: rick_feynmann (~nick_all@139.102.124.132)
[23:40:34] <yushyin> geekosaur: https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0302-cases.rst yet another syntax extension :&
[23:42:03] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (Quit: lambdap)
[23:42:22] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[23:44:37] <rick_feynmann> so is there like a rules list or anything like that? first time in a irc chat. learning haskell and just learned about this channel. thought it would be nice to get away from the toxic kids in discord and learn some haskell and see what other developers are up to
[23:45:23] <maerwald> toxic kids on discord? :D
[23:45:27] <juri_> rule #1: don't be as asshole. :)
[23:45:34] *** Quits: alx741 (~alx741@181.196.69.253) (Ping timeout: 260 seconds)
[23:45:47] <hpc> pretty much just the network rules
[23:46:08] <rick_feynmann> ok that makes sense. just checking
[23:46:40] <geekosaur> https://wiki.haskell.org/IRC_channel#Principles
[23:47:11] <geekosaur> and yes, basically "don't be a dick"
[23:47:24] <maerwald> good to see haskell wiki still exists
[23:47:45] <hpc> neat, that third bullet point is official rules
[23:48:34] <hololeap> anyone know of a way I can disable a line of doctest testing while keeping the same haddock formatting?
[23:49:21] *** Quits: rick_feynmann (~nick_all@139.102.124.132) (Quit: Leaving)
[23:49:22] *** Quits: proboscis (~proboscis@115-189-130-93.mobile.spark.co.nz) (Read error: Connection reset by peer)
[23:49:31] <sm> >>> -- ... ?
[23:50:01] <maerwald> you could probably just shadow the function in the setup directive
[23:50:29] <maerwald> at least with cabal-docspec that's possible I think
[23:50:57] <hololeap> shadow the function?
[23:51:00] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[23:51:01] <maerwald> or make a dummy function with trailing underscore
[23:51:07] <maerwald> that does nothing
[23:51:27] *** Joins: jinsun__ (~quassel@user/jinsun)
[23:52:07] *** Joins: rick_feynmann (~nick_all@139.102.124.132)
[23:52:17] *** Joins: proboscis (~proboscis@115-189-130-93.mobile.spark.co.nz)
[23:53:47] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Read error: Connection reset by peer)
[23:54:41] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 245 seconds)
[23:54:41] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[23:54:54] *** Quits: rick_feynmann (~nick_all@139.102.124.132) (Quit: Leaving)
[23:54:58] <maerwald> yes, works with cabal-docspec
[23:55:29] <maerwald> -- $setup
[23:55:30] <maerwald> >>> let shadowedFunct _ _ = False
[23:55:47] <maerwald> sth like that
[23:58:13] *** Joins: alx741 (~alx741@181.196.69.253)
[23:58:15] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[23:59:07] *** Quits: proboscis (~proboscis@115-189-130-93.mobile.spark.co.nz) (Read error: Connection reset by peer)
[23:59:55] *** Joins: proboscis (~proboscis@115-189-130-93.mobile.spark.co.nz)
