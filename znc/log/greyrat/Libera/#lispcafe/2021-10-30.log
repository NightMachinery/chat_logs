[00:12:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:98b1:ebcb:2d91:63eb) (Ping timeout: 260 seconds)
[00:35:57] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[00:54:52] *** Joins: LispyLights (~LispyLigh@user/lispylights)
[00:55:15] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Killed (NickServ (GHOST command used by LispyLights)))
[00:55:19] *** LispyLights is now known as Aurora_v_kosmose
[01:05:44] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 258 seconds)
[01:10:10] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[01:14:26] <gilberth> Well, the CADR still has a clock. Many of them actually. And it won't magically go faster when you would stick faster main memory in.
[01:18:37] <hayley> Good morning everyone!
[01:20:12] <gilberth> Good morning my CFG expert to become.
[01:20:26] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[01:20:56] <hayley> Dammit, I wasn't serious.
[01:22:35] <gilberth> No? That's a pity.
[01:23:10] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:23:24] <hayley> I don't know if derivatives of CFG give you a finite number of derivatives, so I might not be able to make a state machine.
[01:23:33] <gilberth> Ok. I don't know if it is worth to me to really dig LALR(1) table generation. I don't generate those every day.
[01:25:05] <gilberth> But it bothers me a bit that yacc is 1000x faster.
[01:27:42] <hayley> How about this for an offer: you sit on a CFG derivative paper for five years, then I'll write an implementation.
[01:29:04] <gilberth> No thanks. I believe I have better things to do.
[01:30:02] <gilberth> Current trend seems to be to hand-craft parsers anyway. For what ever reason.
[01:30:34] <hayley> It's usually to make nice errors.
[01:31:54] <gilberth> Nice? Like the recent trend to spit out a screen full of blahblah, where a single would do. I often have trouble spotting the real error message with gcc or clang.
[01:32:52] *** Joins: LispyLights (~LispyLigh@user/lispylights)
[01:33:15] <pl> gilberth: GCC had issues with error messages due to its internal design, afaik
[01:33:30] <pl> clang is much better, but I suspect C++ can still fuck up :P
[01:33:30] <gilberth> Too much noise for my taste. But SBCL also is like that.
[01:33:53] <gilberth> I can't even imagine to parse C++.
[01:34:06] <hayley> I still don't know if I can produce a finite DFA (or anything else) from their derivatives.
[01:34:21] <pl> I know that by around 2009, Google was apparently commonly running clang for essentially syntax check and some static analysis before running GCC to actually compile
[01:34:29] <pl> something about speed and quality of errors ;)
[01:34:42] <gilberth> pl: Well, I believe I am not the regular error message addressee then.
[01:35:12] <pl> or you have higher standards than C++ dev ;)
[01:35:37] <gilberth> Recent GCC spotted more problematic stuff in the CADR simulator and the damn ancient FILE.c than clang actually.
[01:36:24] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[01:37:02] <hayley> "Out of curiosity, I checked my University quota. It's 20 gigabytes. According to amazon, a 3 TB hard drive costs 194 USD. That means the school is providing me with about 1.30 USD in storage."
[01:37:21] <gilberth> pl: As much as I like to compile with -Wall and -Wpedantic and with -Wconversion, I miss an option to get the olde single line plain error messages back. But, I confess, I have not read the manual.
[01:37:34] <gilberth> hayley: Doesn't the paper say?
[01:38:37] <hayley> Well, consider the language L ::= Œµ | ( L ) - that clearly isn't a DFA, but I could implement it using a stack or a counter. The derivatives offer neither.
[01:38:39] <gilberth> hayley: I mean, my method clearly terminates, although O(exp), but still a finite number of states.
[01:39:28] <pjb> or considering a source file cannot be bigger than n MB, you could use a DFA with n/2+1 states‚Ä¶
[01:39:44] <hayley> "This approach is particularly well suited to implementing parsing libraries in untyped languages. This approach is not well suited to typed languages, since a literal implementation of the parsing machine must use a generic parse-tree type, or else violate type-safety with casts for reductions." - Might and Darais
[01:39:52] <gilberth> hayley: Well, it still only counts. So the push-down automata itself is finite.
[01:39:56] <hayley> "Typing this [parser combinator library] is a bitch!" - Bracha
[01:40:17] <hayley> gilberth: Well, they do not produce any automata, just "interpreting" the derivatives as they go along.
[01:40:23] *** LispyLights is now known as Aurora_v_kosmose
[01:40:24] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[01:40:37] <gilberth> pjb: The important thing is that the number of states is not a function of the input size, but of the language.
[01:40:43] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:42:21] <gilberth> hayley: Still, milady. You could also interpret the RE derivative. It's the property that there are only a finite number of derivatives under our equivalence definition together with "unification", that makes it possible to compute them all offline.
[01:42:21] <pjb> gilberth: no, what I mean is that since you're implementing it in a state machine that is not turing complete, perhaps there's no point in invoking the most complex theory, and staying with DFA is good enough.  Stacks don't go to infinity, and neither do counters!
[01:42:42] <hayley> Right, so I can't compute CFG derivatives offline.
[01:42:56] <pjb> So with n states, numbered from 1 to n, and an initial state 0, you can parse that language with a simple DFA‚Ä¶
[01:43:16] <gilberth> pjb: We are talking about theory here.
[01:43:26] <pjb> Ah. Mathematics. Ok.
[01:44:48] <gilberth> And about the size of the program doing the recognition work. You could formulate a simple balanced parenthesis checker with a number of instructions independent from the size of the input. It's not about the size of state kept in registers.
[01:46:56] <gilberth> We talk about a push-down automaton here. For REs with submatch addressing it's a Mealy automaton. In my case the output of the automaton would be like: "Please remember the current input position in that and that register, thanks." So the automaton itself [the program] is finite.
[01:49:24] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[01:51:23] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[02:01:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ecd:fc0d:36b6:b42b)
[02:02:35] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:10:59] <hayley> https://www.youtube.com/watch?v=Ou4u4kOatck üêÑ
[02:10:59] -ixelp- Summer '68 - YouTube
[02:18:30] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:20:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ecd:fc0d:36b6:b42b) (Quit: Leaving)
[02:21:47] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[02:22:06] *** Joins: Inline (~Inline@2a02:908:1252:7a80:ecd:fc0d:36b6:b42b)
[02:26:18] <hayley> üö´üö´banned from the ùììùìïùìê ùì¨ùì∏ùì∂ùìπùì≤ùìµùìÆùìª ùì∞ùì™ùì∑ùì∞
[02:33:00] *** Quits: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:36:01] <gilberth> hayley: ?
[02:49:11] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[02:57:03] *** Quits: random-nick (~random-ni@87.116.179.142) (Ping timeout: 268 seconds)
[02:57:30] *** Joins: X-Scale` (~ARM@83.223.251.139)
[02:57:40] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[02:58:56] *** X-Scale` is now known as X-Scale
[02:59:47] *** Quits: Inline (~Inline@2a02:908:1252:7a80:ecd:fc0d:36b6:b42b) (Ping timeout: 264 seconds)
[03:30:03] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (*.net *.split)
[03:30:03] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1046-static.midco.net) (*.net *.split)
[03:30:03] *** Quits: raeda (~raeda@72.49.219.33) (*.net *.split)
[03:30:03] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[03:30:03] *** Quits: jmercouris (sid438340@id-438340.hampstead.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[03:30:03] *** Quits: sp (~sp@user/susam) (*.net *.split)
[03:30:03] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[03:30:37] *** Joins: jmercouris (sid438340@id-438340.hampstead.irccloud.com)
[03:30:40] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[03:31:57] *** Joins: minion (~minion@common-lisp.net)
[03:32:08] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[03:32:10] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1046-static.midco.net)
[03:32:23] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[03:32:31] *** Joins: raeda (~raeda@72.49.219.33)
[03:32:45] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[03:32:47] *** Joins: sp (~sp@user/susam)
[03:35:31] *** Joins: elflng (~elflng@5.28.137.182)
[04:00:19] <hayley> https://patents.google.com/patent/US5590332 can't believe Baker patented stack allocation
[04:00:19] -ixelp- US5590332A - Garbage collection, tail recursion and first-class continuations in stack-oriented languages - Google Paten [...]
[04:03:15] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 268 seconds)
[04:10:07] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[04:11:06] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[04:12:14] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[04:15:09] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[04:18:13] <mfiano> ERC with inline image link rendering is pretty nifty
[04:29:16] *** Quits: robin (~robin@user/terpri) (Ping timeout: 245 seconds)
[04:30:39] *** Joins: robin (~robin@user/terpri)
[04:34:31] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[04:36:17] *** Joins: aeth (~aeth@user/aeth)
[05:04:47] *** Quits: raeda (~raeda@72.49.219.33) (Quit: Leaving)
[05:07:35] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[05:34:45] <hayley> "LaTeX is a whole other level of evil. Badness of at least 9000 I‚Äòd say."
[05:57:13] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[06:00:13] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[06:30:29] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[06:30:35] *** Joins: rogersm_ (~rogersm@90.166.177.48)
[06:45:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[07:12:27] <hayley> So Baker's patent is Cheney on the MTA part 2 (the one where you use the C stack as newspace), and it cites a snapshot-at-the-beginning GC patent which actually snapshots memory.
[07:19:03] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[07:31:47] *** Joins: semz (~none@user/semz)
[07:34:11] <hayley> https://github.com/cliffclick/aa/tree/merging2#the-aa-type-system Cliff Click announces typing 2
[07:34:11] -ixelp- GitHub - cliffclick/aa at merging2
[07:41:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[07:44:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:45:32] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[07:45:50] <hayley> gilberth: What would you say about getting the results of ALL-MATCHES in a 2d array?
[07:48:43] <hayley> And, seriously, we have LOGBITP rather than (LOGTEST (ASH 1 n) value)? That's cool.
[07:58:29] *** Joins: semz (~none@user/semz)
[08:14:05] <gilberth> hayley: How about to return a match as multiple values? Or invoke a call back for multiple matches?
[08:14:28] <hayley> DFA functions already invoke a callback I guess.
[08:15:32] <gilberth> Yes, make the start and end indices just arguments. Don't cons silly containers.
[08:16:16] <gilberth> This is one thing I never liked about Edi's API.
[08:16:21] <hayley> The container is for submatches, really, but I found I was only testing submatches, and got lazy and put start and end in the container.
[08:16:35] <hayley> I tried to reuse containers for FIRST-MATCH, but it's barely faster.
[08:16:48] <gilberth> That is even worse.
[08:17:09] <gilberth> The calling code expects some submatches, right?
[08:17:31] <hayley> I can see where this is going.
[08:19:30] <hayley> I'd need to make the DFA function return multiple values, as any indirection with a callback function would still cons.
[08:19:32] <gilberth> Well, here it is: (with-match ((and (= mantissa (+ (<= #\0 #\9))) (? (= fraction (+ <= #\0 #\9)))) input) (do-something-with mantissa fraction))
[08:20:18] <gilberth> Or (with-match ("([0-9]+)[.]([0-9]*)" input) (blah blah $1 $2))
[08:20:32] <gilberth> [I misspelled the SRE above]
[08:22:10] <gilberth> Benefit: If a group is not in the regex like $3, you get a compile time error.
[08:22:38] <gilberth> For online use, I suggest spread arguments for a call back or multiple-values for a single return.
[08:23:31] <gilberth> You definitely don't want to pass out a pointer to some "static" space. When I get hold of some result container, I would assume I could stash it. And don't expect it to be clobbered later.
[08:24:00] <gilberth> For an off-line use, it should not cons at all.
[08:26:25] <gilberth> I define (START $n) and (END $n) macros, so that substrings don't need to be consed. $n conses on demand.
[08:27:01] <gilberth> There is $$ for the whole match.
[08:27:50] <gilberth> This indeed is borrowed from yacc.
[08:28:32] *** Joins: ln43 (~ln43@user/ln43)
[08:29:25] <ln43> Hi all... good morning
[08:31:06] <ln43> i was curious to see how an old equation solver "ees" (https://fchartsoftware.com/ees/youtube.php) was working and really it seems well made
[08:31:35] <ln43> ok the developing maybe started in the early '90 but for thst time it was not so bad
[08:33:21] <ln43> looking at it from an user perspective it is practical to use since abstracts the solution details and let a better focus on the problem description...
[08:35:14] <ln43> the idea of blocking equations was new for the time
[08:41:55] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[09:01:50] *** Joins: easye (~user@oxi.slack.net)
[09:21:07] <hayley> https://www.youtube.com/watch?v=_83urK9rO4U
[09:21:08] -ixelp- Any Colour You Like - YouTube
[09:22:05] <ln43> Good morning Hayley
[09:23:35] <contrapunctus> Good morning everyone!
[09:23:53] <hayley> Good morning beach!
[09:24:33] <contrapunctus> wahahaha
[09:24:44] <contrapunctus> I wonder if he has, like, a script to do it or something
[09:26:38] <hayley> He does have an abbrev gme
[09:30:11] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:30:40] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[09:30:56] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 245 seconds)
[09:31:09] <contrapunctus> Ah
[09:37:22] * hayley goes to break a whole 500 hours on gmod after 6 years.
[09:40:35] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[10:07:16] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:07:20] <ln43> i was asking a question about which was an efficient way to convert a 2d closed curve to a rectilinear polygon and later cover with squares/rectangles to produce a sort of pixelization effect with 
[10:07:32] <ln43> ops... without with
[10:07:35] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[10:07:42] <dave0> maw
[10:08:49] <ln43> Good morning dave0!
[10:13:03] <dave0> maw ln43 
[10:13:17] <White_Flame> ln43: I think the word for that is ... rasterization?
[10:13:44] <ln43> thank you for the suggestion
[10:14:00] <White_Flame> just asking, is there any difference to that?
[10:14:08] <ln43> yes that was what i was searching for
[10:14:32] <White_Flame> okay then :)
[10:15:04] <ln43> basically i would like to use the finite difference method on a given domain so i'm forced to use elements with inner angles equal to 90¬∞
[10:15:23] <ln43> that was the reason for that question
[10:17:06] <ln43> really i'm reading that is also usable on traingular grids but ok... maybe later
[10:37:19] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[10:38:41] <moon-child> https://coredumped.dev/2021/10/21/building-an-emacs-lisp-vm-in-rust/  'it doesn‚Äôt leak memory [...] there is no freeing of unused memory'
[10:38:45] <moon-child> are these people serious?
[10:40:43] <White_Flame> clearly they're not serious programmers
[10:46:23] <hayley> > For one, function literals are mutable in lisp. This means you can change a function by mutating it‚Äôs return value. If functions are shared between threads, then they can‚Äôt be mutable; Otherwise you expose yourself to dataraces.
[10:46:23] <hayley> So?
[10:46:54] <hayley> If your target language has races, then suck it up.
[10:47:13] <hayley> Hell, Rust has races since you can perform atomics with Relaxed ordering (i.e. none).
[10:49:38] <hayley> ...and because operations on Atomic(type name) are safe, this means that safe Rust has data races. Huh.
[10:50:29] * hayley reads
[10:51:02] <dave0> i don't understand atomics, i stick to mutexes and condition variables
[10:51:49] <hayley> So relaxed ordering doesn't cause a race, but there are still no constraints on when it happens. And I thought a race occured when a read and a write occured concurrently.
[10:52:48] <hayley> OTOH I never thought eliminating "data races" was useful, because you can still race at another level. Having race /= concurrent read and write hurts my head more.
[10:54:36] <moon-child> hayley: under 'relaxed' ordering, you presumably never get half the bits from one store and half from another.  That wouldn't happen anyway on remotely modern hardware, but as a point of language semantics
[10:55:19] <hayley> Point made. But IIRC Java guarantees the same thing for non-atomic writes, and it doesn't suffer in performance.
[10:55:59] <moon-child> 'never thought eliminating "data races" was useful, because you can still race at another level'  yes!  This is the thing about static types in general; they are only useful insofar as they directly model the problem, and do not protect you from the abstractions you create yourself
[10:58:30] <White_Flame> yeah, so many people using static safe systems manually create dynamic brittle systems on top
[10:58:31] <moon-child> atomic ordering in general are afaik more about static reordering within a thread; so a relaxed operation can be ordered wrt any other one
[10:58:43] <moon-child> *orderings
[11:01:03] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[11:11:47] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:16:43] <hayley> I mean, I'd still have to write up a TLA+ spec even if I did my concurrent/lock-free work in Rust, so I don't really benefit there.
[11:35:52] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:50:27] <gilberth> moon-child: All I read is "unsafe" here, "unsafe" there and hand-waving about the GC issue.
[11:52:34] <gilberth> Oh, and Rust has no thread local storage?
[12:00:07] <Gnuxie> https://coredumped.dev/about/
[12:00:24] <Gnuxie> > Currently working in hardware design at Intel in Colorado
[12:00:43] <selwyn> elisp in hardware when
[12:00:51] <hayley> gilberth: It does IIRC, not sure what that is about.
[12:00:57] <hayley> Average Intel engineer
[12:01:30] <hayley> This is why the 9xxx-11xxx chips have been shit clearly /s
[12:06:53] <hayley> (FWIW the code in question doesn't even mutate a function literal either, rather a constant value - a function literal would be (LAMBDA (...) ...))
[12:07:28] <hayley> "You need to either make all objects concurrency safe (which is very expensive) or prevent threads from mutably aliasing each other‚Äôs data. This is one of the areas where Rust really shines, but would require a lot of hard trade-offs in lisp." Surely this is backwards - Rust makes you do this, but Lisp does not give a shit.
[12:23:29] <shka> i am looking for higher resolution of this photo https://www.nasa.gov/images/content/534809main_unflyable1-720p.jpg
[12:24:14] <gilberth> What does it show?
[12:24:38] <shka> space shuttle in the hypersonic wind tunnel, being tested for reentry 
[12:24:51] <shka> circa 1975
[12:25:16] <shka> well, space shuttle MODEL 
[12:25:48] <gilberth> Ah, now you say that I could make out the space shuttle.
[12:26:04] <selwyn> desktop background?
[12:26:10] <shka> selwyn: yup :-)
[12:26:33] <selwyn> my desktop background is usually art or a bird
[12:28:25] <shka> well, for me https://i.imgur.com/i6xzC2q.jpg
[12:29:08] <shka> also, space shuttle is a bird, sort of :D
[12:30:43] <selwyn> what's that? lichen?
[12:31:14] <shka> some abstract art made with bleach
[12:31:32] <shka> google bleached fabric art
[12:31:54] <selwyn> sounds like hippie stuff
[12:31:56] <hayley> Can someone with an interpreter only really be concerned about performance?
[12:31:57] <selwyn> apart from the bleach part
[12:32:04] <shka> hayley: yes
[12:32:12] <shka> hayley: Lua
[12:32:43] <hayley> Rather, should they be designing a language to go fast...with an interpreter still?
[12:33:10] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:33:18] <shka> mmm, i would argue that it allows to bolt on the compiler later on
[12:33:19] <selwyn> why not
[12:33:21] <hayley> (Assuming a single implementation "language" of course.)
[12:33:22] <selwyn> as shka says
[12:33:35] <hayley> I guess so.
[12:33:37] <selwyn> think about what it would be like if python was designed to go fast in the first place
[12:33:44] <selwyn> we would have excellent compilers by now
[12:34:03] <hayley> The BDFL of the Janet "language" said "As for Clojure, I considered lazy sequences as a primary abstraction but they are just too terrible for performance. Clojure outside the JVM or .NET would be very difficult to get reasonable performance from without reimplementing a very good garbage collector and JIT."
[12:34:05] <shka> yeah, they should have be like cl
[12:34:23] <hayley> Which means a. Zero Feet/Utena 1-0 Janet b. they still care for performence, but still don't compile or have a fast GC.
[12:34:45] <shka> the fuck is utena
[12:34:50] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:34:53] <shka> some kind of scripting language?
[12:35:01] <shka> because i know only the anime
[12:35:04] <hayley> (Also, any thoughts on targeting ARM or RISC-V first for a fully new compiler.)
[12:35:29] <hayley> A Smalltalk-ish VM design https://applied-langua.ge/~gnuxie/posts/utena-introduction.html
[12:35:38] <shka> hayley: thanks
[12:35:49] <hayley> It's not currently (publicly) implemented and barely specified though.
[12:35:57] <shka> hayley: ARM and RISC-V are both fine
[12:36:01] <hayley> Who'da thunk that language design is hard?
[12:39:15] <selwyn> windows appears to not want me to have different desktop backgrounds on each monitor
[12:39:59] <selwyn> nvm, found out how to do it
[12:40:20] <selwyn> annoying ui
[12:41:40] <contrapunctus> hayley: "distance ourselves from those who seek to express less with less, which to us is the result of minimalist protocols such as Gemini." which to us * results in minimalist protocols [...]?
[12:42:41] <shka> arguably protocols should be minimalists
[12:43:02] <contrapunctus> hayley: also s/Asynchrnous/Asynchronous/ ?
[13:03:06] <Gnuxie> LwL 
[13:04:09] <gilberth> Did I mention that I don't like ASDF?
[13:06:03] <hayley> shka: Minimalism is a nice word, calling it less-is-less and reductive is more rude and on point.
[13:06:51] <gilberth> There is (1) When I load an .asd manually and later the system itself it still looks at the central repository, perhaps I loaded that .asd because I wanted that particular copy? (2) wild pathnames don't work with asdf:*central-registry* and somehow cause an infinite recursion.
[13:07:15] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[13:07:26] * gilberth wants MK:DEFSYSTEM back.
[13:07:46] <gilberth> I mean, what exactly was wrong with that?
[13:08:24] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[13:08:33] <selwyn> shinmera is making a new build system
[13:09:15] <gilberth> A new one? That sounds scary. MK:DEFSYSTEM was fine.
[13:11:03] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[13:13:40] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[13:13:47] <gilberth> And (3) It does not even try to invoke REQUIRE to load dependencies. Or at least the ASDF repository takes precedence somehow.
[13:16:11] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[13:20:01] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[13:21:36] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[13:23:55] <gilberth> Somehow ASDF was a step back. Heck, I began to have a load.lisp file for loading my projects.
[13:24:51] * hayley wants parallel compilation
[13:25:12] <gilberth> Can SBCL do this yet?
[13:25:17] <hayley> I have 6 cores and the SBCL compiler is kinda slow (but not LLVM slow)...
[13:25:24] <hayley> Yes, SBCL can compile in parallel.
[13:25:34] <hayley> IIRC this was accomplished around version 1.5
[13:25:52] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[13:26:51] <hayley> 1.4.15: "enhancement: COMPILE no longer acquires the world lock."
[13:26:55] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[13:27:02] <gilberth> Well, I say (:serial t) anyway. CL is not designed for parallel compilation.
[13:27:17] <gilberth> This was when?
[13:27:39] <hayley> I think 2017-ish, when I started writing Lisp and doing some runtime compilation stuff.
[13:27:46] <gilberth> lol
[13:28:31] <hayley> CL can be compiled fine in parallel, provided you get the file dependency graph right.
[13:29:01] <hayley> Apparently not locking was done to avoid causing deadlock of the world lock, rather than for performance. But I'll take it.
[13:29:46] <gilberth> I must still have been at uni as I tried to use SBCL for McCLIM. It crashed instantly, because the compiler was not multithread-safe. I suggested that global lock. This must have been around 2002 or so. So it them fifteen years to fix that?
[13:30:11] <gilberth> But then Linux also had a global lock for a long time.
[13:30:14] <hayley> From my point of view, you made the bug. Congratulations!
[13:30:33] <gilberth> I made McCLIM usable with SBCL.
[13:30:35] <mfiano> Morning, and sorry for the disconnect spam. ERC is being strange
[13:32:23] <gilberth> hayley: As it would compile generic function dispatch, it would crash within a second. This was because McCLIM is multithreaded, and two threads cannot do that at the same time. A reason I used CMUCL for a long long time. I just didn't trust SBCL on multi-threading.
[13:34:02] <gilberth> There was support for preemptive multi-threading in CMUCL, but you better didn't enable it.
[13:34:22] <pl> Doesn't cmucl still do global lock for multiprocessing? 
[13:34:40] <moon-child> I thought cmucl is all cooperative...
[13:35:24] <gilberth> pl: Does CMUCL even have non-cooperative multithreading?
[13:36:08] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1046-static.midco.net) (Ping timeout: 268 seconds)
[13:37:11] <contrapunctus> hayley, Gnuxie : is there any overlap between Utena and CLOSOS?
[13:38:39] <hayley> I can't think of much, except that objects-as-modules and first class global environments have some overlap in functionality.
[13:40:00] <contrapunctus> . o O (Zen master answer - "Is there any overlap between anime and MCU?")
[13:46:30] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[13:54:20] *** Joins: Alfr (~Alfr@user/alfr)
[13:55:12] <contrapunctus> I kinda wanna merge Magrathea into a project like CLOSOS or Utena, but Magrathea is at this point just a few design documents, a dev diary, and some scratch McCLIM code, and the people behind these projects are significantly more 1337 than me.
[13:55:45] <hayley> .oO( https://gitlab.com/Theemacsshibe/magrathea/ )
[13:55:46] -ixelp- theemacsshibe / magrathea ¬∑ GitLab
[13:57:20] <contrapunctus> hayley: aaa wtf
[13:57:54] <contrapunctus> Now I gotta look for an alternative name too :\
[13:58:32] <moon-child> contrapunctus: what's magrathea?
[13:58:39] <hayley> Eh, no one will mix the two up.
[13:58:40] <moon-child> (or, the project formerly known as ...)
[13:59:34] <contrapunctus> moon-child: ahahaha https://tilde.team/~contrapunctus/blog/magrathea.html
[14:01:41] <contrapunctus> I keep forgetting to add Genera to the list of inspirations.
[14:07:58] <hayley> gilberth: Maybe with CFGs, we have to find A, B, ... s.t an infinite derivative can be written in the form of \Sigma_{n} A^n B C^n and thus get counters that way.
[14:09:16] <gilberth> hayley: What if you have actions associated with the productions?
[14:10:14] <hayley> I don't think that is even covered in yacc is dead, somehow. Presumably you want to make a parse tree, but there wasn't a discussion of how to do that.
[14:10:31] <hayley> I'm sure they did it, else they'd have a dumb paper, but I can't recall it.
[14:10:57] <gilberth> Milady, I haven't read it.
[14:11:57] <hayley> Ironically, near the end of the blog post about it by one of the authors, the author finds simplification necessary to keep interpretation fast.
[14:12:07] <pl> gilberth: wasn't the issue with CL:REQUIRE that it is pretty much all implementation-dependant? I think the only time it worked for me it was either by being connected to ASDF or SBCL built-ins
[14:12:16] <hayley> https://matt.might.net/articles/parsing-with-derivatives/
[14:14:12] <gilberth> pl: Sure it is implementation-dependent, but I believe ASDF could still try. But that is not my major concern. That it will find another .asd, while one is already loaded is more so.
[14:14:50] <pl> that sounds like an error or somehow triggering the reload logic
[14:15:24] <gilberth> About REQUIRE idk. I always made my REQUIRE just work.
[14:15:39] <gilberth> pl: I don't know. It was always doing that.
[14:17:09] <gilberth> However this is a bit of a hassle, when you want to load a specific version of a system. I do that with code which is in production of sorts.
[14:17:49] <hayley> moon-child: https://matt.might.net/a/2010/07/16/eigencfa/eigencfa.pdf Flow analysis with CPS on a GPU somehow.
[14:19:15] *** Joins: random-nick (~random-ni@87.116.179.142)
[14:19:42] <hayley> (Though, oddly, he uses a separate compaction step for CFG languages, rather than wiring it into constructors.)
[14:20:22] <hayley> "Instead, our implementations duplicate and release lots of tiny data structures, which stresses the garbage collector." LOL it is 2021 and no hash consing
[14:25:18] <selwyn> going to check out clim graphics today
[14:25:43] <gilberth> When I say :TYPE T to a slot definition in DEFCLASS, does this indicate that the slot must be bound at all times?
[14:25:54] <shka> no
[14:26:11] <gilberth> A pity.
[14:27:23] <selwyn> should i start with the mcclim manual or the clim ii spec?
[14:27:36] <shka> manual
[14:27:47] <shka> or by learning from examples
[14:27:50] <selwyn> k
[14:29:13] <gilberth> Or the CLIM user guide perhaps?
[14:29:28] <shka> yeah, that works as well
[14:29:36] <shka> i recommend starting with the examples though
[14:29:41] * hayley thinks
[14:29:45] <selwyn> huh
[14:30:03] <gilberth> Run! Everyone run! hayley thinks!
[14:30:21] <hayley> Perhaps you can get at the unbound marker object, which is of type T. Or, (ACCESSOR OBJECT) diverges and the result is of type NIL, which is a subtype of T.
[14:31:00] <gilberth> You should not be able to get at the unbound marker.
[14:31:09] <shka> not with a reader anyway
[14:31:15] <selwyn> i find it amusing that the manuals/specs/user guide are in different places
[14:31:23] <gilberth> And not otherwise.
[14:31:51] <selwyn> you see, i like to think of the common lisp hyperspec as some kind of coherent holy book like the quran
[14:31:59] <hayley> Then the latter case, that (slot-value object 'foo) unwinds, thus no value, which is the type NIL, and a subtype of T.
[14:32:01] <selwyn> whereas this clim/mcclim situation is like the gospels
[14:32:07] <gilberth> selwyn: I host the spec, the manual is McCLIM's, the UG is Harlequin's. So, ...
[14:32:07] <selwyn> different books about basically the same thing
[14:33:49] <selwyn> gilberth the apostle
[14:34:47] <hayley> on the first day, there was only unix, then beach said "LET THERE BE MAKE-INSTANCE"
[14:34:54] <hayley> on the second day, beach painted up a Cleavir to compile his code with
[14:35:01] <hayley> on the third day, beach sculpted all the functions to run with Cleavir
[14:35:17] <hayley> on the fourth day, beach extruded a code generator and built an image for all the programmers to use
[14:35:18] <hayley> on the fifth day, beach drew a scheduler and hardware drivers to inhabit his image
[14:35:24] <hayley> on the sixth day, beach made a graphics library from the conses called Silica, and out of its rib, he made another library to accompany it named CLIM 3
[14:35:28] <hayley> and on the seventh day, beach said "Good morning everyone!"
[14:35:33] <gilberth> I should craft sth like <https://www.cairographics.org/samples/> for CLIM as a quick start. Most basic things, draw a line, make it coloured, coordinate transforms etc.
[14:35:34] <selwyn> the lisp machine died on the cross for our sins
[14:35:37] <selwyn> hayley: lol
[14:36:02] <selwyn> there's a clim 3?
[14:36:15] <hayley> Not yet.
[14:36:24] <selwyn> yes i see
[14:37:00] <gilberth> From what I saw, it doesn't yet address the missing layer of CLIM.
[14:40:59] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[14:43:10] <contrapunctus> hayley: rofl
[14:43:47] <contrapunctus> hayley: new post for r/lispmemes ?
[14:44:08] <hayley> contrapunctus: Old one, rather.
[14:45:07] <hayley> I forgot where, but I fixed about:mozilla to read The CLOSOS Book rather than the heretical book of Mzlla
[14:45:34] <hayley> contrapunctus: https://i.redd.it/6hr7qjs6sbb41.png
[14:49:53] <contrapunctus> TFW beach's Introduction to Computer Science is available on libgen.rs...in French, but not in English üòÖÔ∏è
[14:51:36] <shka> ...
[14:51:47] <shka> HE IS NOT EVEN NATIVE FRENCHMAN 
[14:51:51] <shka> god damnit
[14:52:16] <shka> and sacr√©bleu!
[14:52:17] <hayley> I thought the original was French though.
[14:52:40] <shka> stupid polyglot beach
[14:52:46] <shka> flexing on us 
[14:53:16] <hayley> Or have https://www.amazon.com/Introduktion-Datavetenskap-Swedish-Robert-Strandh/dp/1500380997/
[14:53:34] <shka> Datavetenskap
[14:53:48] *** Joins: domovod (~domovod@176.196.122.197)
[14:53:52] <shka> yeah, i think i would rather try my luck with french 
[14:54:06] <shka> i guess it is more useful language then Swedish 
[14:54:22] <shka> pity that I can't seem to learn foreign languages 
[14:54:30] <shka> maybe i should try to find professional help
[14:55:08] <hayley> Amazon believes I need to purchase Crafting Interpreters, a 5950X and a 4TB NVMe SSD.
[14:55:17] <hayley> No, that is not how you make a fast interpreter.
[14:55:27] <shka> and shame that the book i am find to be the most interesting is not even finished
[15:14:16] <gilberth> Amazon still believes I am woman.
[15:15:24] <shka> and youtube thinks i am korean
[15:16:09] <gilberth> Perhaps you are and just don't know it.
[15:16:45] <shka> also https://www.youtube.com/watch?v=rJOo67DtZAY
[15:16:45] -ixelp- Bonnie Tyler - If You Were A Woman (And I Was A Man) - YouTube
[15:18:28] <selwyn> shka: tfw beach is better at english than me
[15:19:05] <selwyn> re learning foreign languages, anki is a real game changer
[15:19:20] <selwyn> aiming to become fluent next year
[15:19:28] <selwyn> which is not something i ever expected to hear myself say
[15:21:05] <selwyn> aliexpress seems to believe i am a woman
[15:21:27] <shka> have you managed to restore your files, anyway?
[15:21:34] <selwyn> not yet
[15:21:39] <gilberth> selwyn: Are you?
[15:21:42] <selwyn> it is not a pressing priority
[15:22:38] <shka> gilberth: aren't we all to a some degree? :P
[15:23:16] <selwyn> gilberth: this 20% discount on 'romantic styles for women' has me thinking twice
[15:23:28] <gilberth> shka: I certainly am.
[15:24:17] <gilberth> selywn: Almost beats women's magazines.
[15:24:41] <contrapunctus> gilberth: r/egg_irl
[15:24:49] <selwyn> shka: which book is that?
[15:25:04] <shka> two, actually
[15:25:13] <gilberth> contrapunctus: What's that?
[15:25:19] <shka> one is about data structures 
[15:25:37] <shka> and i was not interested, but i was convinced that this one will be really good
[15:25:59] <shka> the second is one about the OO programming
[15:26:12] <contrapunctus> gilberth: egg = trans person who doesn't know they're trans yet xD
[15:26:26] <gilberth> Heh.
[15:26:28] <contrapunctus> https://old.reddit.com/r/egg_irl/
[15:26:29] -ixelp- egg_irl
[15:26:29] <Gnuxie> LwL
[15:28:40] <selwyn> shka: i found french really hard
[15:29:07] <selwyn> did well at school but using it irl was so difficult
[15:30:25] <selwyn> imo french lessons at school are one of the main reasons the anglo fears learning other languages
[15:30:44] <selwyn> because french has a fairly high barrier to entry, and the school lessons are not nearly immersive enough to overcome that
[15:31:17] <hayley> My parents think I am a man somehow. Weird shit.
[15:32:41] *** Joins: Inline (~Inline@aftr-37-201-241-28.unity-media.net)
[15:37:28] <shka> hayley: until amazon/ali thinks you are men, you are not
[15:37:30] <shka> easy
[15:37:43] <selwyn> all seeing algorithm
[15:38:50] <hayley> Big Brother is gender confirming
[15:39:22] <hayley> .oO( gilberth had an egg phase, then didn't. )
[15:39:43] <shka> A L G O R I T H M  R E Q U I R E  S A C R I F I C E
[15:39:46] <gilberth> Oh dear.
[15:41:01] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[15:41:03] <selwyn> there is a hypothesis that tech will eventually lead to a situation resembling the european early middle ages
[15:41:41] <gilberth> Hmm? In what respect?
[15:41:46] <selwyn> in that tech will become so dangerous, chaotic, unpredictable to ordinary people, that they will have to seek the services of people who know what they are doing, in order to carry out even the most basic tasks
[15:42:10] <selwyn> not only is this contrary to early expectations of the benefits that tech would bring to the people
[15:42:14] <shka> what a interesting setting
[15:42:25] <selwyn> it is also how early people would have thought
[15:42:39] <selwyn> no rain? cow infertile? consult a shaman
[15:42:46] <selwyn> an expert who knows what's what
[15:43:06] <shka> selwyn: so... the techpriests? :D
[15:43:35] <hayley> Not too late to continue fucking about and finding out with explainable technology.
[15:43:39] <gilberth> Was that really the people thinking so, or rather the shaman making them believe in their power?
[15:44:36] <gilberth> Which in consequence, I could image, would give you religion and church.
[15:44:37] <selwyn> gilberth: the point is that from both of their points of view there isn't a meaningful difference between the shaman and techpriest
[15:45:14] <selwyn> from a detached secular perspective, we might expect the techpriest to actually know something about how a computer works
[15:45:19] <gilberth> selwyn: Sure, we are already kind of there.
[15:45:33] <selwyn> but from the user point of view, both are elite castes who speak some weird kind of language
[15:46:08] <gilberth> I mean, wasn't there an article posted here recently, that said that people don't know where their data is stored. It's just there, somehow.
[15:46:17] <selwyn> i like to think of this as the medieval tech dystopia, as opposed to the more fashionable 80s tech dystopia
[15:48:19] <selwyn> anyway, this could result in actual sacrifices to the algorithm, which is amusing
[15:49:18] <gilberth> Aren't we already there yet? For a huge fraction of the people?
[15:49:29] <selwyn> yes we are not that far away
[15:49:53] <selwyn> but crucially it is still just about possible to avoid serious damage (like getting your bank account cleaned out) if you are not too naive
[15:50:09] <gilberth> Also consider the recent trend to place computer users in a walled garden.
[15:50:41] <selwyn> this metaverse stuff made me think again about working on trial-vr
[15:50:45] <selwyn> because it is just so bleak
[15:51:15] <gilberth> It's almost like "You're not suppose to understand the machine."
[15:51:26] <gilberth> d
[15:51:36] <selwyn> like when they go to the internet in futurama, except unironically and even worse
[15:51:38] <shka> machine requires C++ to run fast
[15:51:39] <selwyn> https://www.youtube.com/watch?v=oHZoMlK9gR4
[15:51:40] -ixelp- Futurama-Internet - YouTube
[15:51:57] <shka> i mean, cargo cult in programming is already widespread
[15:52:22] <selwyn> shka: i can believe that but can you give an example
[15:52:31] <gilberth> Sure, and in part this is also like fashion.
[15:53:14] <shka> selwyn: at work, some clueless PHD forced one of my programmers to implement json parsing in C++
[15:53:18] <shka> so it will be "fast"
[15:53:49] <shka> that is a cargo cult
[15:54:02] <shka> gc-skeptic is also mostly a cargo cult
[15:54:35] <gilberth> Yes, one that perhaps never will go away.
[15:54:45] <shka> mostly, because there is a small fraction that actually know what they are talking about
[15:55:00] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 260 seconds)
[15:55:18] <shka> "dynamic language = interpreted language" is something that we see at #lisp and #common-lisp frequently 
[15:55:50] <shka> so yeah, there is a lot of weird cargo cult in the programming currently 
[15:56:27] <gilberth> currently? These myths exist for decades.
[15:56:40] <shka> well, i can speak about the past
[15:56:45] <shka> *i can't
[15:56:50] <shka> i am not that old
[15:57:42] <gilberth> Pick some random discussion on comp.lang.lisp from 30 years ago and it will not differ much from today. I am tired.
[15:59:01] <gilberth> GC is slow, Lisp is interpreted, static typing => safe, etc. Take your pick.
[16:00:35] * hayley uploaded an image: (19KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/XtRshiYhbZeNMAVErIALMNEI/bruhcha.jpg >
[16:00:35] *** Joins: vats (~vats@1.187.116.43)
[16:10:19] <gilberth> BTW the initial C implementation was generating threaded code and not machine code. So C sure is slow. :-p
[16:10:45] *** Joins: treflip (~user@95.79.32.99)
[16:10:58] <hayley> I wonder who said cl-ppcre used the Lisp compiler first. Let Over Lambda says that, but I doubt it was first.
[16:11:11] <gilberth> "C can't be compiled to machine code."
[16:11:57] <hayley> Rather it uses a chain of closures, which is fine, but not using the Lisp compiler in any profound way.
[16:11:59] <gilberth> hayley: I used that long, long, long before cl-ppcre.
[16:12:47] <selwyn> iirc let over lambda assumes that you will always be using a lisp compiler if you are using a serious contemporary implementation
[16:12:56] <selwyn> so the closures are compiled
[16:13:28] <hayley> https://github.com/JonathanSmith/Fast-Regex one-prior-re-nightmare
[16:13:29] -ixelp- GitHub - JonathanSmith/Fast-Regex: DFA Compiled Regular Expressions In Common Lisp
[16:14:50] <hayley> The closures are compiled, but compiling a RE consists of making a chain of closures corresponding to the RE. It doesn't invoke the CL compiler.
[16:14:52] <gilberth> hayley: <https://www.cs.cmu.edu/afs/cs/project/ai-repository/ai/lang/lisp/code/match/nregex/nregex.cl>
[16:15:04] <gilberth> Another ancient Lisp.
[16:15:59] <gilberth> It emits a lambda form.
[16:16:00] <contrapunctus> another .cl file
[16:20:15] <gilberth> And for what it is worth, Closure compiled pixel translation code from internal ARGB format to what ever the X server needs at runtime.
[16:21:00] <gilberth> So we have nregex.cl from '92, my pixel stuff from around '97 or so. Next.
[16:22:11] * hayley now goes advertising dynamic stack allocation
[16:22:16] <gilberth> With chance you find my code in McCLIM, too. Don't quite remember. I carry it around, it never let me down.
[16:22:46] <hayley> Apparently having to compute dynamic sizes makes it slower, because arithmetic isn't faster than main memory accesses. Not.
[16:25:16] <hayley> Else, I suspect that LEA RSP, [RSP - 8*RAX] or whatever to make your damn array on the stack is still faster than heap allocating and the mandatory cache miss.
[16:26:10] <gilberth> In ancient times I needed to cope with all kind of displays. b/w, grayscale, 8-bit palette, 15-bit true color, etc. And pixel conversion including dithering, if needed, better be fast.
[16:29:30] <hayley> (The trick with my GC design, I guess, is to try to be careful with memory bandwidth and cache. Don't get much bandwidth, even if latency is manageable.)
[17:11:10] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: later)
[17:21:33] *** Joins: pjb (~pjb@user/pjb)
[17:24:43] *** Quits: Inline (~Inline@aftr-37-201-241-28.unity-media.net) (Read error: Connection reset by peer)
[17:39:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:a2c:6d58:9f0f:3734)
[17:42:11] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 245 seconds)
[17:44:07] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[17:50:31] *** Quits: vats (~vats@1.187.116.43) (Read error: Connection reset by peer)
[17:50:58] *** Joins: vats (~vats@103.158.91.245)
[17:55:06] *** Quits: vats (~vats@103.158.91.245) (Ping timeout: 245 seconds)
[17:55:51] *** Joins: vats (~vats@106.79.58.228)
[18:00:46] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:04:50] *** Quits: vats (~vats@106.79.58.228) (Read error: Connection reset by peer)
[18:09:25] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[18:11:09] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:15:50] *** Parts: treflip (~user@95.79.32.99) (ERC (IRC client for Emacs 27.2))
[18:27:28] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[18:29:27] *** Quits: Inline (~Inline@2a02:908:1252:7a80:a2c:6d58:9f0f:3734) (Ping timeout: 268 seconds)
[18:40:50] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:50:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[18:59:41] *** Quits: sm2n (~sm2n@user/sm2n) (Remote host closed the connection)
[19:00:00] *** Joins: sm2n (~sm2n@user/sm2n)
[19:02:06] *** Joins: Inline (~Inline@aftr-37-201-241-178.unity-media.net)
[19:16:53] <selwyn> https://cdn.discordapp.com/attachments/872369447590035536/904032335169749062/DSC_05521.JPG
[19:22:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:25:31] <gilberth> selwyn: Cheers! Was the left bottle completely filled this morning still?
[19:26:01] <selwyn> it isn't ready yet
[19:26:07] <selwyn> second fermentation has just begun
[19:26:22] <selwyn> i tasted some anyway, it is halfway between apple juice and hard cider
[19:26:27] <selwyn> no hint of bitterness
[19:26:47] <gilberth> I guess that's great then.
[19:26:55] <selwyn> and you can see bubbles coming through the airlock on the right bottle
[19:27:21] <selwyn> it could still spoil but the hard part is done imo
[19:27:29] <selwyn> all i can do is wait now
[19:27:42] <gilberth> Is that supposed to happen? The bubbles, I mean.
[19:27:51] <selwyn> yes, because fermentation has not finished yet
[19:28:22] <selwyn> and at this rate it will surely displace the small amount of air at the top of the bottle
[19:28:40] <gilberth> Well, I never fermented.
[19:29:08] <selwyn> the airlock allows gas to escape without letting air in (bit hard to see)
[19:30:06] <gilberth> Will that gas function as a sort of conversation?
[19:30:21] <selwyn> ?
[19:30:56] <gilberth> Yes, perhaps with little O_2, so that the cider lasts longer?
[19:31:34] <selwyn> idk what you mean by conversation, but oxygen is bad news
[19:32:33] <shka> fermentation occurs without oxygen
[19:32:35] <gilberth> selwyn: Finger trouble. Conservation. lol
[19:32:54] <shka> and if oxygen gets in, it gets oxidized all the way down
[19:33:07] <shka> instead of ethanol
[19:33:27] <gilberth> So essentially apple rust?
[19:36:30] <shka> you can call it like that
[19:36:41] <shka> but yeah, fermentation is anerobic process
[19:36:52] <shka> and is used only if there is no oxygen around
[19:37:53] <shka> because it has lower energy yield
[19:38:07] <shka> so it is a backup essentially 
[19:38:07] <gilberth> Will it start by itself? Or do I need to do sth special?
[19:38:26] <shka> well, you are gonna need yeast
[19:38:37] <gilberth> I see.
[19:38:53] <shka> because this is essentially biological reactor 
[19:40:00] <shka> https://www.youtube.com/watch?v=mhwUc84xBZA
[19:40:00] -ixelp- Anaerobic respiration by yeast ‚Äì fermentation | Physiology | Biology | FuseSchool - YouTube
[19:40:04] <shka> gilberth: enjoy
[19:50:17] <selwyn> the problem with oxygen is that it causes it to spoil
[19:50:22] <selwyn> not sure what the pathway is for that
[19:50:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[19:50:33] <selwyn> ethanol -> ethanoic acid? does yeast do that?
[19:51:23] <selwyn> i have heard that at the start of fermentation, the yeast uses up any dissolved oxygen first in order to spread
[19:51:59] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:53:47] <shka> selwyn: nah, it goes all the way to oxygen
[19:53:54] <shka> *CO2
[19:54:46] <selwyn> ok
[19:55:17] <selwyn> well, i don't think oxygen will be a problem anyway
[19:58:41] *** Joins: apemangr (~apemangr@170.82.191.148)
[19:59:28] *** Joins: vats (~vats@103.158.91.51)
[20:07:56] <selwyn> last ui i learned how to actually use was java swing
[20:10:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[20:19:46] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[20:23:19] <White_Flame> I've made wine a few times.  Bought nothing but a funnel, bread yeast, and tubing for siphoning, and fermented it in the plastic bottles the grape juice came in
[20:23:46] <White_Flame> my sister works in fine dining, and was shocked at how comparable the flavor was to the extremely expensive stuff they serve
[20:23:54] <White_Flame> (well, worked)
[21:05:56] *** Quits: Inline (~Inline@aftr-37-201-241-178.unity-media.net) (Ping timeout: 245 seconds)
[21:06:15] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[21:09:41] *** Quits: apemangr (~apemangr@170.82.191.148) (Ping timeout: 264 seconds)
[21:14:47] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b384:bd52:ad64:846c)
[21:24:16] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 245 seconds)
[21:32:12] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:32:44] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:35:50] <selwyn> white_flame: nice one
[21:36:40] <selwyn> i used to do very similar as a 15yo when it was too difficult to buy alcohol
[21:37:10] <selwyn> it really did the business, but the taste was usually slightly off
[21:37:40] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:42:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:48:01] <contrapunctus> selwyn: you wanted alcohol at the age of 15? :o
[21:48:18] <contrapunctus> What enterprising teenage years.
[21:49:41] <hendursaga> Idle hands are the Devil's playthings
[21:51:57] <selwyn> yeah
[21:52:00] <selwyn> good memories
[21:53:27] <selwyn> the last time i made it was with 'real lemonade'
[21:53:53] <selwyn> didn't taste like alcohol at all but as i found out it was so so strong
[21:55:27] <selwyn> http://www.suppertime.co.uk/blogmywiki/2021/10/ceefax-from-an-old-raspberry-pi/
[21:55:28] -ixelp- Ceefax from an old Raspberry Pi | Blog My Wiki!
[22:26:33] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 265 seconds)
[22:39:32] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[23:14:34] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[23:20:14] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 260 seconds)
[23:20:50] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (Remote host closed the connection)
[23:26:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:26:58] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:31:21] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[23:57:20] *** Joins: Oddity (Oddity@user/oddity)
