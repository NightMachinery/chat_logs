[00:00:00] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 268 seconds)
[00:00:05] <davean> and you don't need to even if you build on the system - you can unpack your distro into a folder
[00:00:21] <davean> chroots a very standard *nix thing
[00:00:39] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[00:00:46] <davean> but you can use containers to not think about that like above
[00:02:01] <aegon> i haven't piled on the nix wagon yet, i'm trying to put it off till next year. If you have any recommended guides or intro's to nix i def want to start reading up on it
[00:02:25] <davean> I made sure to give you the way following your current strategy first
[00:03:25] <aegon> yeah, i'm not trying to be combative. I think i'm missing something about that way. So you build an executable first outside the image, then as part of the docker file you copy that bin into the image?
[00:03:53] <aegon> then you unit and run integration tests on the packaged image to catch any missing or differing librarie
[00:03:56] <davean> No, I didn't use that approach because I wanted to satisfy your fears
[00:03:56] <aegon> *s
[00:03:59] <davean> So
[00:04:14] <davean> start with creatinage base_image, which is the base you want your executable to run on
[00:04:29] <davean> create overlay on _base_image of build_tools with ghc/cabal
[00:04:40] <davean> in build_tools, build your executable
[00:04:59] <davean> now, export your executable package and inject it ontop of base_image to make final_image
[00:05:13] <davean> now overlay test_package on final_image to make verification_image
[00:05:17] <davean> in verification_image run tests
[00:05:25] <davean> now when tests pass, push final_image
[00:06:49] <aegon> i see, so then you can use the build_tools version to keep a cache of past binary builds, thats a neat trick. I've been starting from scratch and just doing the dev tools setup / removal all in one step to avoid the intermediary junk from staying in history
[00:06:55] <davean> so you get your container image, with the same libraries the executable was built with, guarrentteed, and tested as it is pushed
[00:06:58] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Remote host closed the connection)
[00:07:13] <davean> Yep!
[00:07:23] <davean> it does caching inherently! :)
[00:07:34] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[00:07:46] <davean> now, nix manages a nicer way of doing this FOR you but I certaintly wasn't pushing nix - I have a love hate relationship with it
[00:08:00] <davean> I wanted to show you how you could solve your problems by using the way you were doing it better
[00:10:19] <aegon> yeah thats neat, i'll try setting it up next server-ish pass. I'm on client side libary stuff now so I can sit on these images for a little. How do you extract the built bin from the build image at the end. Do you do that as part of a build script using the docker cli or is there a slicker way from within the dockerfile
[00:10:52] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:11:19] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:11:32] <aegon> oh i guess you could mount a host folder and target that for the bins
[00:11:37] <davean> yah
[00:11:43] <davean> thats what I was startign to type
[00:11:59] <davean> you just have an output directory
[00:12:13] <davean> can you tell cabal to build to there (for executables)
[00:12:20] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[00:13:21] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[00:14:15] *** Joins: hololeap (~hololeap@user/hololeap)
[00:14:48] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:14:49] <aegon> thats cool, thanks for sharing. If every dev has that build image locally thats a much better sanity check before pushing than waiting for some ci pipeline to tell you a lib is off after you've context switched 
[00:15:03] <davean> hell yes
[00:15:42] <davean> Its always my instinct when people complain about build times in Haskell to look closer
[00:18:10] <maerwald> go builds faster than haskell 
[00:18:17] <davean> maerwald: lol
[00:20:39] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[00:20:56] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:22:19] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[00:22:49] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[00:24:55] <syd> are First and Last valid Semigroups when implemented for any old a rather than Maybe a?
[00:25:00] <syd> that is, (<>) for First a is const, and for Last a is const id.
[00:25:17] *** Joins: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:25:24] <fuzzypixelz> hello!
[00:25:30] <dolio> syd: Yes.
[00:25:47] <syd> dolio: much appreciated, thank you :)
[00:25:50] *** Quits: trriplex (~trriplex@user/trriplex) (Remote host closed the connection)
[00:27:09] <dolio> Also if you make `Maybe a` a Monoid whenever `a` is a semigroup by using `Nothing` to adjoin an identity element, you get back the possibly empty version.
[00:27:24] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[00:28:42] <dolio> But is also works for any other semigroup.
[00:30:14] *** Quits: yrlnry (~mjd@pool-74-109-22-90.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[00:30:28] <syd> I'm trying to write a Monoid for custom type isomorphic (I think) to (Maybe Bool), with (Red | Blue) taking place of Bool.
[00:30:40] <syd> I'd like are to parameterize over the Maybe Monoid part as thought it was like either And/Or, and the Colour part as though it was either First/Last.
[00:31:01] <syd> https://pastebin.com/JLpAhA2u excuse my bad Haskell, this is my first time trying to write a Semigroup.
[00:31:25] <syd> (though i've used most of the stdlib ones in the past to varying degrees)
[00:32:10] <c_wraith> do you need to define your own First and Last?  the ones in Data.SemiGroup are equivalent
[00:32:37] <c_wraith> errr.  Data.Semigroup
[00:32:48] *** Joins: pop3 (~pop3@user/pop3)
[00:33:20] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:c6dc:21f9:bc16:feb3) (Remote host closed the connection)
[00:34:01] <syd> in honesty, I kept tripping myself up with the extra Maybe wrapper due to the one already used for the And/Or bit..
[00:34:33] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:a0c8:bcb7:cb64:d44d)
[00:34:33] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:a0c8:bcb7:cb64:d44d) (Client Quit)
[00:35:04] <monochrom> OK, where, in that paste, can I find "custom type isomorphic (I think) to (Maybe Bool), with (Red | Blue) taking place of Bool"?
[00:35:52] <syd> argh sorry, the actual type I want to work with is (Maybe Colour), with Colour being Red | Blue
[00:36:11] <syd> but using those newtype wrappers and instances to mix-and-match how the layers are combined Semigroup..ally?
[00:37:03] <monochrom> The Colour part is like Bool, therefore First and Last are not very relevant.
[00:41:27] <syd> Howso? When trying to combine the Red | Blue layer monoidally, I'd like to parameterize whether the first is preferred or the second independent of how the Maybe layers are combined.
[00:41:45] <monochrom> That describes the Maybe level.
[00:41:57] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[00:42:13] <ski> how's "first vs. second" related to `Red | Blue' ?
[00:42:27] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[00:42:34] <monochrom> Unrelated. That's what I said.
[00:42:35] <syd> Hmm, what about choosing whether the Maybe layer is combined in And/Or (with Nothing being like False)
[00:43:02] <monochrom> Ah OK sorry ski I misread your nick.
[00:43:20] * ski grins
[00:43:53] <monochrom> Sure, you can prove that AnyMay and AllMay satisfy the laws.
[00:44:24] * ski 's still not sure what the question is
[00:44:42] <syd> for context, I got carried away implementing this: http://www.mmhp.net/Passwords/PassCrack3.html
[00:44:44] <monochrom> It is an extremely unclear question.
[00:45:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:45:57] <syd> yeah I need to think about it more, should have stopped at the "is First/Last a" a Semigroup. I'll think on it more, thanks for the help!
[00:47:29] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[00:47:51] *** Joins: cheater1__ (~Username@user/cheater)
[00:48:07] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[00:48:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:48:15] *** cheater1__ is now known as cheater
[00:53:28] *** Joins: lbseale_ (~lbseale@user/ep1ctetus)
[00:54:27] *** Joins: haskl (~haskl@user/haskl)
[00:54:30] *** Joins: bollu1 (~bollu@139.59.46.74)
[00:54:35] *** Joins: ridcully_ (~ridcully@p57b523cc.dip0.t-ipconnect.de)
[00:55:18] *** Joins: cfebs_ (~cfebs@user/cfebs)
[00:55:19] *** Joins: thaumavorio_ (~thaumavor@thaumavor.io)
[00:55:28] *** Joins: Papa_ (~papa@user/papa)
[00:55:34] *** Joins: adamCS_ (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com)
[00:55:49] *** Joins: peutri_ (~peutri@ns317027.ip-94-23-46.eu)
[00:55:51] *** Joins: ian_ (~ian@matrix.chaos.earth.li)
[00:55:56] *** Joins: shanemikel_ (~shanemike@desk.roadwar.net)
[00:56:08] *** Joins: xacktm_ (xacktm@user/xacktm)
[00:56:12] *** Joins: _koolazer (~koo@user/koolazer)
[00:56:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:56:34] *** Joins: dka_ (~code-is-a@ns3059207.ip-193-70-33.eu)
[00:56:38] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Ping timeout: 260 seconds)
[00:56:41] *** Joins: jlamothe_ (~jlamothe@198.251.61.229)
[00:56:43] *** Joins: nf__ (~n@monade.li)
[00:56:43] *** Quits: papa (~papa@user/papa) (Ping timeout: 246 seconds)
[00:56:43] *** Quits: cfebs (~cfebs@user/cfebs) (Ping timeout: 246 seconds)
[00:56:43] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Ping timeout: 246 seconds)
[00:56:43] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (Ping timeout: 246 seconds)
[00:56:43] *** cfebs_ is now known as cfebs
[00:56:48] *** Quits: alex[m]123 (~alexchete@2001:470:69fc:105::1:1001) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: PotatoHatsue (~berberman@2001:470:69fc:105::b488) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: peutri (~peutri@ns317027.ip-94-23-46.eu) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: Igloo (~ian@matrix.chaos.earth.li) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Ping timeout: 246 seconds)
[00:56:48] *** Quits: kadoban (~kadoban@user/kadoban) (Ping timeout: 246 seconds)
[00:56:49] *** Joins: fr33domlover1 (~fr33domlo@angeley.es)
[00:56:54] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:56:54] *** Joins: jmtd (jon@dow.land)
[00:57:03] *** Joins: cocreatu1 (~moritz@2a03:b0c0:3:d0::c8:f001)
[00:57:07] *** Quits: bollu (~bollu@139.59.46.74) (Read error: Connection reset by peer)
[00:57:07] *** Quits: ridcully (~ridcully@p57b523cc.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[00:57:07] *** Quits: thaumavorio (~thaumavor@thaumavor.io) (Ping timeout: 268 seconds)
[00:57:07] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (Ping timeout: 268 seconds)
[00:57:07] *** Quits: xacktm (xacktm@user/xacktm) (Ping timeout: 268 seconds)
[00:57:07] *** Quits: Domino[m] (~dominothe@2001:470:69fc:105::1:271b) (Ping timeout: 268 seconds)
[00:57:07] *** bollu1 is now known as bollu
[00:57:15] *** Quits: moats (~oats@user/oats) (Ping timeout: 268 seconds)
[00:57:15] *** Quits: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Ping timeout: 268 seconds)
[00:57:16] *** Quits: st (~ts@46.101.20.9) (Ping timeout: 268 seconds)
[00:57:18] *** Joins: ts1 (~ts@46.101.20.9)
[00:57:24] *** Joins: yushyin2 (rzPUwQNnp2@karif.server-speed.net)
[00:57:25] *** Joins: alex[m]1231 (~alexchete@2001:470:69fc:105::1:1001)
[00:57:39] *** Quits: nf (~n@monade.li) (Killed (NickServ (GHOST command used by nf__)))
[00:57:42] *** nf__ is now known as nf
[00:57:46] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (Ping timeout: 246 seconds)
[00:57:46] *** Quits: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799) (Ping timeout: 246 seconds)
[00:57:46] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Ping timeout: 246 seconds)
[00:57:46] *** Quits: orzo (~joe@lasker.childrenofmay.org) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: conphiz[m] (~conphizma@2001:470:69fc:105::c052) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: Jon (jon@dow.land) (Ping timeout: 246 seconds)
[00:57:47] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (Ping timeout: 246 seconds)
[00:58:08] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:58:13] *** Joins: PotatoHatsue (~berberman@2001:470:69fc:105::b488)
[00:58:19] <aegon> server hiccup or did an astroid hit the earth
[00:58:23] *** Quits: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 264 seconds)
[00:58:23] *** adamCS_ is now known as adamCS
[00:58:23] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: fakehacker[m] (~fakehacke@2001:470:69fc:105::b5f0) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: the-coot[m] (~the-cootm@2001:470:69fc:105::95f) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: kosmikus[m] (~andresloe@2001:470:69fc:105::95d) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: glider_ (~glider@user/glider) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: fr33domlover (~fr33domlo@angeley.es) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: yushyin (vmwyqzEgOc@karif.server-speed.net) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Square (~a@178.62.91.8) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Ping timeout: 264 seconds)
[00:58:53] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (Ping timeout: 264 seconds)
[00:59:01] *** Joins: leah2 (~leah@vuxu.org)
[00:59:05] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[00:59:14] <geekosaur> looks like someone kicked the matrix
[00:59:18] *** yushyin2 is now known as yushyin
[00:59:18] <ski> matrix bridge, maybe ?
[00:59:22] <ski> mm
[00:59:51] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[00:59:54] <monochrom> The matrix bridge quantum-tunneled to Jupiter :)
[00:59:55] *** Joins: Square (~a@178.62.91.8)
[01:00:02] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[01:01:46] *** Joins: kadoban (~kadoban@user/kadoban)
[01:02:19] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[01:02:31] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[01:02:31] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 256 seconds)
[01:02:38] *** Joins: haskl[error] (~haskl@user/haskl)
[01:03:10] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[01:03:26] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[01:03:29] *** Joins: glider (~glider@user/glider)
[01:03:33] *** Joins: MoC (~moc@user/moc)
[01:03:38] *** Joins: moats (~oats@user/oats)
[01:04:46] *** Joins: Domino[m] (~dominothe@2001:470:69fc:105::1:271b)
[01:04:50] *** Joins: ilkecan[m] (~ilkecanma@2001:470:69fc:105::1:79b)
[01:04:51] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[01:04:51] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[01:04:53] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[01:04:58] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Reconnecting)
[01:06:54] <aegon> for any hls contributers out there, first, thank you for your service, second is there a reason go to definition doesn't work for package dependencies?
[01:07:53] <aegon> i've been using a local hackage but its pretty great to be able to hope around in editor to stuff
[01:07:59] <geekosaur> would this be a queston for #haskell-language-server ?
[01:08:47] *** Joins: gdhffd[m] (~gdhffdmat@2001:470:69fc:105::1:799)
[01:08:48] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[01:08:51] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[01:08:58] <aegon> oh snap, it would be, headed over there
[01:09:42] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:10:41] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[01:11:01] *** Quits: slac76440 (~slack1256@191.125.99.211) (Ping timeout: 256 seconds)
[01:11:08] *** Joins: mekeor[m] (~mekeormat@2001:470:69fc:105::17e4)
[01:11:49] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[01:12:53] *** Joins: kosmikus[m] (~andresloe@2001:470:69fc:105::95d)
[01:12:54] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[01:12:54] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[01:12:56] *** Joins: the-coot[m] (~the-cootm@2001:470:69fc:105::95f)
[01:13:31] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[01:13:32] *** Joins: fakehacker[m] (~fakehacke@2001:470:69fc:105::b5f0)
[01:16:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[01:16:50] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[01:16:53] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[01:17:27] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[01:18:59] *** Joins: jespada (~jespada@190.7.36.46)
[01:19:29] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[01:20:09] *** Joins: TomasJakl[m] (~jaklttchn@2001:470:69fc:105::a42)
[01:20:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[01:20:39] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[01:21:36] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[01:21:46] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[01:21:57] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:22:52] *** Joins: conphiz[m] (~conphizma@2001:470:69fc:105::c052)
[01:22:52] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[01:26:21] *** Quits: haskl[error] (~haskl@user/haskl) (Ping timeout: 245 seconds)
[01:26:24] *** Joins: pavonia (~user@user/siracusa)
[01:30:21] *** Joins: pgib (~textual@173.38.117.89)
[01:30:28] *** Joins: joel135 (sid136450@hampstead.irccloud.com)
[01:32:36] <joel135> could you help me get this to compile? https://paste.tomsmeding.com/C86kwGkO
[01:33:42] <joel135> i thought i had learned how to handle this situation, namely by making my `Poly` type into a datatype, but alas no
[01:35:29] <joel135> i thought the constructor would hide the `forall` business from the typechecker and make it happy
[01:36:25] <fuzzypixelz> I wrote this a couple weeks ago: https://github.com/fuzzypixelz/Hustle
[01:36:55] <fuzzypixelz> I'd like your opinions on how it can improved
[01:38:13] <fuzzypixelz> I'm afraid I've made some irrecoverable decisions from the start (like using Megaparsec instead of attoparsec ... only after I was done did I notice all parsing libs use atto)
[01:39:33] <geekosaur> joel135, what sticks out to me immediately is that the foldr already produces a Poly, so you shouldn't need to wrap it in another one
[01:39:53] <joel135> ah thanks
[01:40:01] <joel135> silly mistake :)
[01:46:16] *** Joins: haasn` (~nand@haasn.dev)
[01:46:23] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[01:46:41] *** Quits: jespada (~jespada@190.7.36.46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:46:46] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[01:46:52] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[01:47:07] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[01:47:18] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:47:20] *** Quits: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[01:47:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:47:24] *** Quits: haasn (~nand@haasn.dev) (Ping timeout: 268 seconds)
[01:47:25] *** Quits: tired (~tired@user/tired) (Quit: /)
[01:47:27] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[01:47:29] *** Quits: V (~v@anomalous.eu) (Ping timeout: 264 seconds)
[01:47:30] *** Quits: xnbya (~xnbya@2a01:4f8:c17:cbdd::1) (Ping timeout: 260 seconds)
[01:47:40] *** haasn` is now known as haasn
[01:47:42] *** Joins: xnbya (~xnbya@2a01:4f8:c17:cbdd::1)
[01:47:43] *** Joins: tired (~tired@user/tired)
[01:47:47] *** Joins: V (~v@anomalous.eu)
[01:48:02] *** Joins: hololeap (~hololeap@user/hololeap)
[01:49:11] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[01:49:27] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[01:49:30] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[01:49:30] *** finn_elija is now known as FinnElija
[01:50:33] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[01:52:33] *** Joins: EvanR (~evan@user/evanr)
[01:52:56] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:53:52] *** Quits: vladl (~vladl@174.127.234.115) (Quit: Lost terminal)
[01:54:23] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 264 seconds)
[01:57:20] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (Ping timeout: 260 seconds)
[01:58:21] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[01:58:25] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Quit: Leaving)
[01:58:39] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:58:49] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[02:00:08] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[02:02:32] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[02:03:26] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[02:08:40] <joel135> now i finished the file i was working on https://github.com/JoelSjogren/diff-poly/blob/main/DiffPoly.hs
[02:11:02] *** Joins: haskl (~haskl@user/haskl)
[02:11:26] *** Quits: michalz (~michalz@185.246.204.40) (Remote host closed the connection)
[02:11:29] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[02:13:21] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[02:14:02] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:15:55] *** Quits: alphabeta (~kilolympu@185.65.135.177) (Quit: Quitting IRC :()
[02:16:32] *** Quits: toreiussd (uid469671@id-469671.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:17:34] *** Joins: dolio (~dolio@130.44.130.54)
[02:18:22] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 260 seconds)
[02:18:34] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:20:03] <ski> joel135 : "next step" after naturals ?
[02:20:12] <joel135> yes!!
[02:20:15] <joel135> hej stefan
[02:20:28] <ski> hejs :)
[02:21:10] <ski> this reminds me of some investigation i did recently, comparing church numerals to logic programming
[02:21:29] *** Joins: haskl (~haskl@user/haskl)
[02:21:39] <joel135> let me write out the induction hypothesis for https://github.com/JoelSjogren/diff-poly/blob/main/DiffPoly.hs#L85
[02:21:49] <joel135> (in unerased form)
[02:23:12] <joel135> "whenever k : Poly is such that for all f : Poly differentiability of f implies that of f+k (= g), then for all h : Poly differentiability of h implies that of h+xg"
[02:23:51] <ski> (and, to a prototype i did, years ago, that implemented goal implications (with the possibility of arbitrary left-nesting) on top of basic logic programming, by employing a stack of `ContT's, nested as deep as you with (left-nesting implication increases depth by one), and then some mutation at the bottom, for logic variables. using this, you can "backtrack backtracking",&c. .. also an interesting "duality" 
[02:23:57] <ski> of sorts between logic variables and skolems/atoms emerged)
[02:24:26] <joel135> (there may be some subtle error in what i just wrote)
[02:24:59] <joel135> hmm, let me switch gears and start to take in what you are writing
[02:25:51] <ski> imagine something like `forall o. Fix (ContT o) a' .. although not quite that
[02:27:13] <joel135> oh yes, that left-nesting is actually how i sketched `level_2` out on paper first, namely `((f, f') ↦ (g, g')) ↦ ((h, h') ↦ (l, l'))`
[02:29:02] <ski> addition and multiplication can be done with plain `ContT' (iow the same global "answer type" `o'), but exponentiation seems to require `Codensity' (iow, you pass around `forall o.'-ed stuff, rank-2)
[02:29:22] <ski> (addition = disjunction, multiplication = conjunction, exponentiation = implication)
[02:30:19] <joel135> wait, how does Fix take two arguments?
[02:30:58] <ski> imagine a `Fix :: ((* -> *) -> (* -> *)) -> (* -> *)'
[02:31:10] <joel135> ok
[02:31:16] *** Joins: son0p (~ff@181.136.122.143)
[02:31:26] <ski> (or `forall k. (k -> k) -> k', although that seems harder to define)
[02:31:35] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[02:31:39] <joel135> yes
[02:32:53] <joel135> are you saying that exponentiation requires you to use two precisely two levels of ContT?
[02:32:59] <ski> idea being that you can take limit of `o',`o -> o',`(o -> o) -> (o -> o)',`((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o))',&c. .. or, in my case, rather allow the user to pick the depth, at run-time
[02:33:25] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:33:27] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[02:33:48] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[02:34:35] <ski> no, i was saying that `exp :: Church o -> Church o -> Church o' where `type Church o = (o -> o) -> (o -> o)' doesn't work, you need `exp :: (forall o. Church o) -> (forall o. Church o) -> (forall o. Church o)'
[02:35:24] <ski> (i guess, allowing the user to pick the depth is like having a stream of progressively deeper nestings)
[02:36:16] <joel135> this limit of o',`o -> o',`(o -> o) -> (o -> o)',`((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o))',&c reminds me of stuff i recently learned about untyped lambda calculus
[02:36:40] <ski> anyway, using a third level to represent polynomials sounds interesting. i'd have to investigate that, and how that could align with what i've been pondering here
[02:36:47] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[02:36:48] <ski> yes ?
[02:38:04] <ski> `TPoly' is dual numbers over `Poly' ?
[02:38:18] <joel135> yes
[02:39:14] <joel135> i believe this T : Type -> Type in general, but not sure how to construct it for other types
[02:40:11] <joel135> it constructs the tangent bundle of a type, and it is supposed to "know" somehow that Poly is a smooth thing
[02:40:19] <ski> joel135 : it might be interesting to spell out the type applications in your code, to see where you just pass on the same `s', and where you pass on something different
[02:40:41] <ski> (if you do)
[02:41:38] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[02:43:11] <joel135> i *think* the only lines are 64 and 85
[02:43:25] <joel135> but i may be wrong about this after line 85
[02:44:02] <ski> well, line 64 is `s = Coeffs', i'd guess, yes ?
[02:44:12] <joel135> yes
[02:44:29] <joel135> and later it is s = TPoly
[02:44:40] <ski> and line 85 is `s = (Poly,Poly)', i think ?
[02:44:45] <joel135> yes
[02:44:47] <ski> yea
[02:44:57] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:45:30] <ski> i wonder if you could reduce that to `s1 = ..s0..', if you start by "opening up" the `Poly' that you're attempting to produce, calling its parameter `s0'
[02:46:17] <ski> (i did such reductions for addition, multiplication, exponentiation, starting with an impredicative thing, and ending up with an equivalent predicative thing)
[02:47:29] <joel135> ok i will try to rewrite it in terms of a single type variable like s and see if it works out
[02:47:46] <joel135> by the way, when you did the logic programming stuff, what was the target language? did you compile it to actual machine code?
[02:48:17] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:48:41] <joel135> (assuming my question makes sense)
[02:49:35] <ski> it was just a Haskell combinator library
[02:49:44] <joel135> ok
[02:49:56] <ski> (partially inspired by a paper by Seres and Spivey, and a later one by Koen Claessen)
[02:50:22] <ski> it would be interesting to ponder how one'd do it, in terms of something WAM-like, say
[02:50:36] *** Joins: alzgh (~alzgh@user/alzgh)
[02:50:55] <ski> (iow, consider ways to improve the resource management, rather than just deferring to GC for everything)
[02:50:57] <joel135> also by the way, this limit of `o',`o -> o',`(o -> o) -> (o -> o)',`((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o))',&c reminds me of the colimit of ΩⁿΣⁿX which is called "stabilization" or something like that
[02:51:25] <joel135> (https://ncatlab.org/nlab/show/spectrum)
[02:52:08] <joel135> i looked a bit a barendregt's book on lambda calculus and there are some parallels i think, but i haven't thought it through fully
[02:52:15] <joel135> at*
[02:53:08] <ski> you know how you can define an implication `( Antecedent => Consequent )' (commonly spelled `forall(Antecedent,Consquent)' in implementations) in Prolog as `\+ ( Antecedent,\+ Consequent )', yes ? (where  (\+)/1 is the usual negation-as-failure (imperfect, sometimes unsound) approximation to a sound logical negation)
[02:53:51] <joel135> WAM = https://en.wikipedia.org/wiki/Warren_Abstract_Machine ?
[02:54:00] <ski> operationally, what happens is that you'll enumerate all solutions of `Antecedent', and then check that `Consequent' holds for that solution. the enumeration is aborted if `Consequent' fails
[02:54:04] <ski> yea
[02:54:08] <joel135> ok
[02:54:21] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Remote host closed the connection)
[02:54:57] <joel135> i don't have much practical experience with prolog so i have to read what you just wrote slowly
[02:55:11] <ski> if you have variables which occur (only) in `Antecedent' and `Consequent', then they behave as if they were universally quantified over the implication (hence the name forall/2). (because they behave as existentially quantified just inside the outer negation)
[02:55:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[02:56:01] <ski> now, the problem with this is that you can't use this to export information (other than success/failure) (unless you use side-effects, mutation that survives backtracking ..)
[02:56:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:56:58] <ski> so, it's great to check that every solution of `Antecedent' actually satisfies `Consequent' .. but if `Antecedent' is e.g. enumerating elements of some kind of collection, you unfortunately can't use this to let `Consequent' instantiate those elements
[02:57:18] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[02:57:43] <joel135> i don't know what you mean by instantiate
[02:57:55] *** Joins: dolio (~dolio@130.44.130.54)
[02:58:46] <ski> give a definite value
[02:59:32] <ski> in Haskell, as soon as you introduce a binder for a variable, it will, at run-time, be asssociated with a value (or rather, with a computation that will eventually produce a value)
[02:59:35] <joel135> do you mean that if the implication fails one would like this to give a definite value to the variables that are universally quantified over?
[03:00:20] <ski> in logic programming, these two steps are decoupled from each other. you introduce a variable with the existential (or universal) quantifier. then (possibly much) later, you can associate a value with it
[03:02:02] <ski> not the universally quantified variables (which are local, so private), but other (free/nonlocal) variables which are put in some relation (usually using equality) with those universally quantified variables, inside of `Consequent'
[03:03:11] <joel135> ok, then i seem to see sort of what you are talking about
[03:03:48] <ski> take `append(Xs,Ys,Zs)', which expresses what one would state as `zs = xs ++ ys' in Haskell
[03:04:01] <joel135> ok
[03:04:26] <ski> predicates/relations in logic programming have no predetermined input vs. output status of parameters. sometimes a parameter is input, sometimes it's output
[03:04:54] <joel135> right, as = is undirected
[03:05:22] <ski> if you call `append([0,1,2],[3,4],L)', the system will instantiate `L', having the query/goal succeed, and the answer `L = [0,1,2,3,4]' is reported
[03:06:02] <ski> each call will either succeed or fail. it can succeed many times (with possibly different solutions/answers). and then it fails at the end, meaning "no (more) solutions"
[03:07:05] <joel135> sort of like the list monad?
[03:08:10] <ski> in a conjunction, you start by calling the first conjunct. if it succeeds, you proceed to the next one. if a conjunct fails, backtracking starts, and you "execute backwards", going back to the previous conjunct (undoing any instantiations to variables that were done in the meantime), asking it to produce an alternative solution, if it can. if it does, then that conjuct succeeds, and normal left-to-right 
[03:08:16] <ski> execution proceeds. otherwise, backtracking continues to the left
[03:08:17] <ski> yes
[03:08:23] <syd> just going off the last few messages of the exchange, but you may find this paper interesting: https://rkrishnan.org/files/wadler-1985.pdf
[03:08:52] <joel135> syd: wadler has some good titles :)
[03:09:06] <ski> so, `generate(X),test(X)' is a common basic paradigm of looping. generate/1 generates candidate solutions, and test/1 checks them. so, it'll go ping-pong until some candidate passes
[03:09:37] <ski> syd : read it, years ago :)
[03:10:00] <syd> joel135: makes them easy to find again too, there's always a couple of idiosyncratic word choices that are guaranteed to be the top google result ;p
[03:11:09] <ski> anyway, `append([0,1,2],[3,4],[0,1,2,3,4])' and `append([0,1,2],[3,4],[0,1,5,3,4])' are calls that will simply either succeed or fail, not binding any variables (since there are none in the calls), so not providing/exporting any information apart from the success/failure status
[03:12:10] <ski> while `append(Front,Back,[0,1,2])' will enumerate four solutions. first `Front = [],Back = [0,1,2]', then, when you ask for more (by forcing backtracking), you'll get `Front = [1],Back = [1,2]',&c.
[03:12:26] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[03:12:31] <ski> similarly, `member(X,[0,1,2])' will enumerate solutions `X = 0',`X = 1',`X = 2'
[03:13:07] <joel135> i have a strange question
[03:13:25] <ski> yes ?
[03:14:23] <joel135> if you ask `member(X,[0,1,2])' for the next solution after it has produced `X = 2', should this cause some sort of "backtracking to outside of the logical programming process"?
[03:14:58] <joel135> assuming `member(...)' is the first instruction of the program
[03:15:37] <ski> syd : "How to add laziness to a strict language, without even being odd" by Philip Wadler,Walid Taha,David MacQueen in 1998-09 at <https://homepages.inf.ed.ac.uk/wadler/topics/language-design.html#lazyinstrict> is another nice title :)
[03:16:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:16:27] <joel135> i think you would need to have a logic programming language within another logic programming language in order for my question to make sense
[03:16:35] <ski> joel135 : well, when you're testing / fooling around with Prolog programs, you usually work in the interactor / rppl (read-prove-print-loop), prompt being `?-'
[03:17:10] <ski> so, `?- member(X,[0,1,2]).', after `X = 2', failure would cause execution to "hit the left margin", and so the whole query fails
[03:17:19] <syd> again, sorry for butting in, but have you tried miniKanren ski?
[03:17:32] <syd> untyped (the racket impl. at least) but lots of fun.
[03:18:06] <ski> (so, in terms of delimited continuation barriers, if you want to think of it like that, each query is delimited from other queries. as soon as a query is finished, you won't later attempt to backtrack it)
[03:18:17] <joel135> i think i have a very old miniKanren bookmark on youtube that i never followed up
[03:18:26] <ski> syd : i've heard nice things about it, but i've yet to dive into what it offers
[03:19:22] <ski> anyway, consider `( member(X,Xs) => between(1,6,X) )' .. `between(1,6,X)' is like `x <- [1 .. 6]'. so, this can be used to check that every element of `Xs' is in the requisite range
[03:20:11] <joel135> ok
[03:20:17] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:20:28] *** Joins: uiltondutra (~uiltondut@45.183.251.42)
[03:20:34] <ski> however, i'd like for this query/goal to also work, even if the elements of `Xs' aren't known/initialized/instantiated yet (but they length would have to be known, or else we're in more trouble, having infinite number of solutions .. and traversal order starts to matter, for completeness. Prolog uses depth-first)
[03:20:55] <ski> iow, then it ought to enumerate all possible selections of the elements from the range (with replacement)
[03:21:31] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[03:21:55] <ski> the usual encoding (which has some uses, for sure) of implication, in terms of negation(-as-failure) can't do this, because it can't export information from a query, apart from answering yes/no
[03:22:12] <ski> but, this is exactly what my prototype managed to do :)
[03:22:23] <joel135> hmm, let me think about that for a moment
[03:23:19] *** Parts: uiltondutra (~uiltondut@45.183.251.42) ()
[03:23:26] <joel135> is this related to what you wrote above? >>> also an interesting "duality" of sorts between logic variables and skolems/atoms emerged 
[03:23:40] <ski> yes
[03:24:39] *** Joins: faultline (~christian@nat-eduroam-01.scc.kit.edu)
[03:24:47] <syd> Can't Constraint Handling Rules help with that kind of thing? miniKanren doesn't have range constraints, but it does have (=/=) and asbent(o).
[03:25:02] <ski> you can define `false' as `\succeed fail -> fail', and `true' as `\succeed fail -> succeed fail'. the first fails immediately. the second succeeds, but if later code attempts to redo it (asking for another solution), it fails
[03:25:35] *** Quits: faultline (~christian@nat-eduroam-01.scc.kit.edu) (Remote host closed the connection)
[03:26:25] <ski> disjunction `g0 \/ g1' is `\succeed fail -> g0 succeed (g1 succeed fail)', and conjunction `g0 /\ g1' is `\succeed fail0 -> g0 (\fail1 -> g1 gail1 succeed) fail0'
[03:26:42] <ski> here, a goal is construed as having type `(o -> o) -> (o -> o)'
[03:26:52] *** Joins: faultline (~christian@nat-eduroam-01.scc.kit.edu)
[03:27:23] <ski> (if you implement this in a strict language, you'll have to sprinkle some `() ->'s in there, to delay stuff appropriately)
[03:27:48] <ski> syd : CHR helping with what ?
[03:28:32] <syd> the length of xs elements having to be known, even if it isn't instantiated yet
[03:28:41] <ski> CHR is a paradigm of forward-chaining (reasoning forwards from assumptions/facts/axioms), embedded in Prolog (which is natively backward-chaining, reasoning backwards from the goal)
[03:28:55] <joel135> succeed : o -> o ?
[03:29:00] <ski> yes
[03:29:49] <ski> (if you like, you could eta-expand my definition of disjunction and conjunction above a bit, specifically eta-expand `succeed' in the body .. but i figured i'd avoid some clutter)
[03:29:59] <syd> perhaps I'm erroneously assuming CHR is related to miniKanren constraints, but you can have side conditions like the query variable being x succeeding, such that it is not equal to some other value, or it is absent from another query variable which is a list etc.
[03:30:12] <ski> (oh, and as i said, disjunction is addition, and conjunction is multiplication)
[03:30:40] <syd> anyway I'll stop chiming in, it's rude to interrupt.
[03:30:49] <ski> no, no worry !
[03:31:13] <joel135> no problem from my side either!
[03:31:38] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[03:31:48] <syd> appreciate it :)
[03:31:53] <joel135> i see that _\/_ is like addition of Church numerals, i am not seeing that _/\_ is multiplication
[03:32:25] <joel135> oh sorry there was a linewrap that i missed. let me retry reading it
[03:33:27] <ski> syd : anyway, possibly "the length of xs elements having to be known, even if it isn't instantiated yet" was a misunderstanding (possibly due to me being a bit too vague) .. i meant that i'd prefer it being allowed if the elements themselves were (initially) unknown/uninstantiated (so, to-be output), while the length (the skeleton of the list) would still be known
[03:33:48] <ski> (so, if the length is know, then it definitely is "instantiated")
[03:34:21] <ski> joel135 : perhaps i'd help to eta-reduce conjunction ?
[03:34:23] *** Quits: cosimone (~user@93-44-186-19.ip98.fastwebnet.it) (Ping timeout: 256 seconds)
[03:34:43] <joel135> does `g1 gail1 succeed` really have the arguments in the right order?
[03:34:57] *** Quits: yushyin (rzPUwQNnp2@karif.server-speed.net) (Quit: WeeChat 3.3)
[03:34:57] <ski> oh, sorry. yea, i just noticed that was wrong order
[03:35:06] *** Joins: yushyin (XNontZhIIh@karif.server-speed.net)
[03:35:28] <ski>   (g0 /\ g1) succeed fail = g0 (g1 succeed) fail
[03:35:33] <ski>   (g0 /\ g1) succeed = g0 (g1 succeed)
[03:35:41] <ski>   g0 /\ g1 = g0 . g1
[03:36:07] <joel135> these names "succeed" and "fail" are very intriguing.
[03:36:22] <ski> it's standard terminology in logic programming
[03:36:39] <joel135> yes but in the context of Church numerals
[03:37:09] <ski> although, sometimes, (in "four-port execution model"), "exit" would be used instead of "fail". also "redo" would be used. but `redo' is a failure continuation, "seen from the other side"
[03:37:38] <syd> (define succeed (== #t #t)) and (define fail (== #t #f)) is how I've seen them, fwiw.
[03:38:30] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[03:38:32] <syd> oh, no idea about the relation to church numerals, missed that bit sorry.
[03:38:55] <joel135> i see, this http://www.cs.otago.ac.nz/cosc347/References/LP/LeedsTutorial/node48.html kind of thing
[03:38:57] <ski> first you Call a predicate. it may then Exit, having instantiated some variables, passing control to later code, which may further down the line backtrack back to this point (undoing said instantiations), Redo-ing the call (asking for alternative solutions). after a sequence of (zero or more) Exit-Redo pairs, the call will eventually Fail
[03:39:34] <joel135> is it a coincidence that there are four o's in (o -> o) -> (o -> o) just like this box has four ports?
[03:39:49] <ski> no
[03:39:54] <joel135> ok
[03:40:59] <ski>   {- call :: -} ({- exit,succeed :: -} ({- redo :: -} o) -> o) -> (({- fail :: -} o) -> o)
[03:42:30] <ski> or, if you want to associate the ports with the results of the associated underlying invokations :
[03:43:12] <ski>   (({- redo -} o) -> ({- exit -} o)) -> (({- fail -} o) -> ({- call -} o))
[03:43:14] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[03:44:41] <joel135> i see
[03:45:07] <joel135> could you then imagine what ((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o)) would mean in the context of logic programming?
[03:46:23] <ski> (in a more practical implementation, there'd also be a "Commit" port, asking a predicate call to commit to the current solution, discarding remaining alternative ones, cleaning up resources. and, commonly, there's also an "Exception" port, for exception handling. and, sometimes there's an optional "Unify" port that happens just after Call and Redo, corresponding to "head unifications" in a predicate clause 
[03:46:29] <ski> (more or less, like pattern-matching on arguments left of the `='))
[03:46:55] <ski> well .. i haven't considered it from your polynomial perspective ..
[03:47:13] <ski> but doing that kind of thing is exactly what i did, for my goal implications
[03:48:51] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[03:48:59] <joel135> by the way, i also found some other truly beautiful stuff when investigating the interrelationships between o, (o -> o), ((o -> o) -> (o -> o)), &c but let's cotinue talking about your stuff
[03:49:10] <ski> the usual CPS encoding of LP goals, with backtracking, is `ContT () (ContT o m)', for some suitable base monad `m' (e.g. `IO' or `ST s', since you likely want to implement logic variables via mutation, and possibly you want to be able to do I/O as well)
[03:49:15] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[03:49:32] <ski> (well, i guess `o' would also be `()' there)
[03:50:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[03:50:35] <ski> so, what i do for implication, `( Antecedent => Consequent )', is i shift the continuation levels for `Antecedent', one step. so, `Antecedent' (but not `Consequent') now is interpreted a la `((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o))'
[03:51:20] <ski> except, of course this implication may itself be left-nested in an outer implication, in which case our `Antecedent' has four continuation levels, and `Consequent' has three .. and so on
[03:51:43] *** Quits: faultline (~christian@nat-eduroam-01.scc.kit.edu) (Remote host closed the connection)
[03:52:16] <ski> (the top-level call fixes/picks the number of continuation levels to two, using the base monad `m' under that. implication chooses the number of levels for `Antecedent' to be one more, so that's where the extra levels come from)
[03:52:27] *** Joins: faultline (~christian@nat-eduroam-01.scc.kit.edu)
[03:53:06] <joel135> wait wait. this sounds super cool for lack of a better word
[03:53:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:54:01] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:54:17] <unit73e> so I was doing texture clipping and now I have to deal with aeson. I'll just make a pause...
[03:55:09] <joel135> do you think of this ((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o)) as ((O -> O) -> (O -> O)) or as (_ -> ((o -> o) -> (o -> o))), if the question makes sense?
[03:55:47] <ski> (fun fact .. this all started by me boredly translating a Sudoku solver from Common Lisp to Prolog, getting side-tracked on how to nicely represent arrays (quickly jumping to multi-dimensional ones), wanting to write higher-order predicates for iterating over them, then noticing some weird unexpected (incorrect) behaviour, attempting to fix it with low-level (mutation) primitives (which can possibly violate 
[03:55:53] <ski> the declarative/pure logical reading of the code) .. then, when that didn't work (i suspect because of optimizations assuming purity, or somesuch), started thinking about what i wanted, got into thinking about how to "backtrack backtracking")
[03:56:33] <unit73e> in college the teachers made a competition of who could make the best sodoku solver
[03:56:45] <unit73e> the teacher that won used prolog
[03:56:55] <unit73e> it was so fast that the solution was faster than printing
[03:57:00] <joel135>  is this "shift" a variant of this from above? >>> exponentiation seems to require `Codensity' (iow, you pass around `forall o.'-ed stuff, rank-2)
[03:57:51] <ski> joel135 : hmm .. implication definitely eliminates the top continuation layer of `Antecent', which i guess would correspond to your second alternative ? .. but when thinking about the execution of `Antecedent' itself, in isolation, i would say the first alternative, i think
[03:58:07] <unit73e> the teacher that was talking about this competition used Java (lol) and he was saying the one that used prolog cheated because it was prolog
[03:58:42] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[03:59:42] <syd> (what is it with punning usernames here?! I like it.)
[03:59:45] <ski> "normally", success and failure continuations are not mixed up with each other. but for implication, when `Consequent' succeeds, that is then interpreted by `Antecedent' as a failure, a prod for it to generate another solution (spawning a new, conceptually separate, call to `Consequent')
[04:00:40] <joel135> i need to think more about what you just wrote ^
[04:00:51] <joel135> but in the meanwhile, assuming Antecedent has type ((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o)) and Consequent has type ((o -> o) -> (o -> o)), is Antecedent => Consequent simply interpreted as Antecedent Consequent of type ((o -> o) -> (o -> o)) ?
[04:00:56] <ski> unit73e : hm, did it use some constraint programming ? imho, that would be ideal
[04:01:25] <ski> "is this "shift" a variant of this from above?" -- i think it's related, at least
[04:02:32] <ski> yes, `Consequent' and `( Antecedent => Consequent )' would have the same type, the same number of continuation levels
[04:03:16] <joel135> and if you have antecedent (lowercase) of type ((O -> O) -> (O -> O)) where O is a type variable, would you somehow "upgrade" it to Antecedent by setting O := (o -> o) ?
[04:03:37] <ski> yes
[04:03:47] <ski> (modulo some fiddly stuff with the base monad)
[04:04:22] <joel135> do you know what the inverse of this "upgrade" operation is? this is what i referred to above as "some other truly beautiful stuff"
[04:05:21] <ski> hm, i don't think so
[04:07:09] <joel135> the "downgrade" from forall o. (((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o))) to forall O. ((O -> O) -> (O -> O)) is a nondeterministic operation that basically takes a polynomial as input and chooses a term (in the sense of polynomials) of this polynomial, and returns its exponent.
[04:08:06] <ski> hmm .. exponent
[04:08:54] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[04:09:00] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[04:09:03] <ski> i wonder if there's possibly two distinct "downgrades" (or two distinct "upgrades" ?)
[04:10:15] <joel135> if a term T of type forall o. (((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o))) is thought of as a type containing a free type variable (the polynomial x : (o -> o) -> (o -> o) being this variable) and you have a partial term t of this type T(x), then the type downgrade(T)_t : forall O. (O -> O) -> (O -> O) is the type of holes of type x inside t : T(x).
[04:11:30] <ski>   g₀ ⇒ g₁ : Ω ⊣ g₀,g₁ : Ω
[04:11:37] <ski>   (g₀ ⇒ g₁) ω s f = g₀ (ω → ω) (λ s₀ ↦ λ f′ ↦
[04:11:43] <ski>                       g₁ ω (λ f″ ↦ s₀ f″) f′) (λ f‴ ↦ s f‴) f
[04:11:46] <ski>                   = g₀ (ω → ω) (g₁ ω) s f
[04:12:19] <joel135> there may in principle be k different upgrades when you have k levels of (_->_)-nesting, but i haven't thought it through fully. for instance a relatable example is that you could take a *polynomial* p as input and return the upgraded *operator* p(d/dx) as output.
[04:12:20] <ski> that's my implication, given ⌜Ω = (ω :) ⋆ → (ω → ω) → (ω → ω)⌝
[04:12:55] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[04:13:24] <ski> (hm, i guess you can think of `x' as an oracle ..)
[04:13:38] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[04:13:45] <joel135> (the level of operators being something like ((((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o)))) -> ((((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o)))))
[04:14:14] <joel135> hang on, i need to read what you wrote
[04:16:36] <joel135> i can't parse Ω = (ω :) ⋆ → (ω → ω) → (ω → ω)
[04:17:15] <ski>   Omega = (o : Set) -> (o -> o) -> (o -> o)  -- in Agda notation
[04:17:47] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 264 seconds)
[04:18:12] <joel135> ok right, you use ω → ω for ω
[04:18:13] <ski> `Omega' just being a type of "logic programming goals/queries", which also "just happens" to be church numerals
[04:19:11] <ski> (having stripped away everything from the type that one'd use practically, for say instantiation / logic programming, or I/O, just focusing on the basic backtracking behaviour)
[04:19:31] <ski> (er, s/logic programming/logic variables/)
[04:19:55] <joel135> right
[04:21:05] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:1574:2437:4f0d:50e6)
[04:21:49] <ski> (fwiw, i'm not following "you have a partial term t of this type T(x)" .. `t' being (thought of as) an inhabitant of a polynomial `a_0 + a_1*x + a_2*x^2 + ..' ?)
[04:22:52] <joel135> (let's maybe use the names ℕ₀(o) = o, ℕₙ₊₁(o) = (ℕₙ(o) → ℕₙ(o)) and ℕₙ = ∀o. ℕₙ(o) sometimes for readability, so e.g. ℕ₃ = Poly)
[04:23:21] <ski> (fwiw, when i said `Consequent' and `( Antecedent => Consequent )' would have "the same number of continuation levels", i mean that the same `o' that is passed to the latter, is passed (type application, polymorphic instantiation) to the former)
[04:25:06] <joel135> a partial term is a term that is specified as far as the type is specified. the type variable x is considered to be an unknown, so it is not clear what a term of type T(x) is precisely yet. a partial term t : T(x) thus contains holes of type x but no other holes. this is what i mean by partial here.
[04:25:36] <ski> "wait wait. this sounds super cool for lack of a better word" -- yeah, that's what i first thought, when discovering this stuff :D
[04:25:55] <joel135> :D
[04:26:39] <ski> hm, holes
[04:27:02] <ski> (makes me wonder about relation to McBride type differentiation)
[04:27:26] <joel135> holes ... derivatives ... of types or of polynomials :)
[04:27:40] <ski> yup
[04:28:46] <ski> <joel135> is this related to what you wrote above? >>> also an interesting "duality" of sorts between logic variables and skolems/atoms emerged
[04:29:40] <ski> so, i realized that, after doing this shift of one continuation level, when going to `Antecedent', i couldn't let any instantiations made by `Antecedent' "escape" the implications
[04:30:17] <ski> because the solutions of `Antecedent' are merely hypothetical .. by the time the implication has succeeded, `Antecedent' has exhausted its solutions, and failed finally
[04:30:42] <ski> this makes sense, since there's a polarity shift/swap, the antecedent is in a negated context
[04:31:10] <ski> but, i'd still like `Consequent' to be able to make instantiations, which survived .. so the question was how to achieve this
[04:31:18] *** Quits: ubert (~Thunderbi@p200300ecdf4fcafee019fddc82d0353e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:31:24] *** Joins: ub (~Thunderbi@p200300ecdf4fca30e019fddc82d0353e.dip0.t-ipconnect.de)
[04:31:34] <joel135> (i don't have quite enough practical experience with logic programming to have intuition for the things you just said)
[04:31:49] <ski> `Consequent' here wouldn't (usually) communicate directly to the surrounding goals, and their logic variables, but only do so *via* `Antecedent'
[04:32:54] <joel135> i think i need to try studying your code. do you still have it?
[04:33:16] <ski> in the example with enumerating elements of a collection, `Antecedent' would set up a *temporary* link between an element of the collection, and a logic variable, and then `Consequent' would go on to instantiate the element to something, *via* this link. after that, the link would be removed (and a new link to a different element be instated), but the instantiation to the element ought still to persist
[04:33:43] *** ub is now known as ubert
[04:34:10] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[04:34:48] <ski> hm. i know where i have one version, however it might still have a bug (in unification machinery, iirc), that i managed to fix in the end (turned out to be a silly mistake, like a boolean flip, or wrong argument passed, iirc)
[04:35:38] <joel135> when you say "link between ... and a logic variable" is "a logic variable" referring to X or Xs? ( member(X,Xs) => between(1,6,X) )
[04:36:04] <joel135> i am guessing X
[04:36:17] <ski> when we're *using* a polymorphic operation, say `length :: forall a. [a] -> Int', then `a' gets replaced by a logic variable, so that we have `length :: [_a] -> Int' for this particular occurance/use of `length', and then unification will instantiate `_a' to something appropriate
[04:36:24] <ski> `X', yes
[04:36:29] <joel135> ok
[04:37:06] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[04:38:06] <ski> but when we're defining `length', checking its definition, `a' becomes replaced by a skolem constant, say `?a', so that we're checking `length :: [?a] -> Int'. `?a' is an opaque/abstract type that is only known to be equal to itself
[04:38:25] <ski> the same phenomenon happens in logic programming
[04:39:46] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[04:40:04] <ski> if you have a goal `some [X] ( member(X,Xs) )' (Mercury syntax) / `sigma X\ member X Xs' (lambdaProlog syntax), then `X' will become a logic variable, that can be further instantiated, when we attempt to unify it with stuff
[04:40:21] *** Joins: acidsys (~LSD@2.lsd.systems)
[04:40:46] <joel135> (i think ghc referred to skolem-something before i changed `type Poly` to `data Poly`)
[04:41:59] <ski> if you have a goal `all [X] ( X = X )' / `pi X\ X = X', then `X' will become a skolem constant. this way, if you attempt the goal `pi X\ pi Y\ X = Y', you'll compare two skolem constants that are not known to be equal, and therefore this goal will fail
[04:42:21] <ski> (while, using `sigma' instead of `pi', it would succeed)
[04:43:08] <ski> so, considering `( member(X,Xs) => between(1,6,X) )', which logically ought to be treated as `all [X] ( member(X,Xs) => between(1,6,X) )' here, `X' ought to become a skolem constant
[04:43:29] *** Quits: Athas (athas@2a01:7c8:aaac:1cf:a0d4:8908:cfdb:b9c0) (Quit: ZNC 1.8.2 - https://znc.in)
[04:43:45] *** Joins: Athas (athas@2a01:7c8:aaac:1cf:a0d4:8908:cfdb:b9c0)
[04:44:14] <ski> but, once inside the antecedent (which involves shifting continuation levels), we'd like `X' to not act like a constant (we'd not like to instantiate the element in the collection `Xs' with some opaque constant), but rather as a logic variable, which is now known to be equal to whatever the element is equal to
[04:45:50] <unit73e> ski, no idea what he did but from what I remember it was based on just telling the rules
[04:45:51] <ski> so .. from this, i got the idea that, perhaps, we could represent logical variables, and skolem constants, in the *same* way, except for a single bit/boolean that tells which is which .. and then, whenever you shift continuation levels (odd number of levels), you flip a global boolean flag that changes the interpretation of the bit in logic variables and skolems !
[04:46:17] <ski> and the amazing thing is that this crazy idea actually worked ! :D
[04:46:17] <joel135> hmm
[04:46:19] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[04:46:54] <joel135> i really want to try this
[04:47:21] <geekosaur> covariance/contravariance?
[04:47:39] * geekosaur doesn't quite follow all of the above, but what the heck
[04:49:01] <joel135> i have no intuition for this logic variable vs skolem atom distinction though
[04:49:14] <ski> (i know my implementation have another problem, causing unsoundness. basically, for `sigma X\ pi Y\ X = Y', what i've said above is not enough. this query ought to fail, there is not something which is equal to everything. so, one needs to also ensure that skolems don't "escape" in some sense. it seems that one way one could do this is adding timestamps of some kind to logic variables and skolems, and check 
[04:49:20] <ski> them, when unifying .. i believe this can be done, but i haven't worked through the details)
[04:49:55] <ski> (recently, i was (re)looking at Lolli, a linear logic programming language, and they did something like this, that i'd have to study to understand how it works)
[04:50:00] <joel135> it seems like logic variables are "positive" in the sense of girard whereas skolem atoms are "negative"
[04:50:31] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 245 seconds)
[04:50:51] <ski> in terms of typechecking, the usual term is "meta variable" (or maybe "placeholder"), rather than "logic variable". but it's the same idea
[04:51:21] <ski> note that it's incorrect to think that logic variables are associated with existential quantification, and skolems with universal quantification
[04:51:55] <joel135> ok good that you pointed that out
[04:52:07] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:52:12] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:52:35] <ski> logic variables are generated by existential goals *and* universal clauses. while skolems are generated by universal goals and existential clauses (except usually the last thing isn't allowed in logic programming. i think possibly some experimental deductive databases may allow such)
[04:53:43] <ski> similarly, checking the callee/definer/implementor/producer of a `forall a. ..a..' involves skolems, while the caller/user/consumer involves meta variables
[04:53:55] <ski> (and the opposite, for `exists a. ..a..')
[04:54:47] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[04:55:11] <ski> clauses are the stuff that you assume, the axioms/rules/hypotheses that you tell the logic programming system to believe. goals are the queries/questions that you ask the system to check, to try to solve, generate solutions for (thinking about solving equation systems is a nice analogy)
[04:55:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:56:41] <ski> in Prolog, clauses are either facts, like `member(X,[X|_]).', or rules, like `member(X,[_|Xs]) :- member(X,Xs).' (`:-' is reverse implication, `<='). `member(X,Xs)' here, the body of the rule, is a goal
[04:57:24] <ski> (and variables are implicitly universally quantified around clauses. if the variable only occurs in the body, then this is equivalent to it being implicitly existentially quantified in the body)
[04:59:49] *** Quits: lbseale_ (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:59:58] <unit73e> geekosaur, the covariance/contravariance has to do with subtyping. it's talked a lot in scala because a list of cats should be compatible with a list of animals, and that's because it's covariant.
[05:00:01] <joel135> ok so from one perspective is `append([0,1,2],[3,4],L)` is a clause and `L` is a goal. and from another perspective a clause is like a polynomial ideal and a goal is like a polynomial that you're examining in relation to this ideal (maybe testing for membership or similar)
[05:00:10] <ski> unit73e : anyway, Prolog is great for non-deterministic search :) (although, for larger search spaces, you'd usually want to try to be smarter, if you can, pruning irrelevant sub-search-trees, or "failing earlier" (reordering goals (conjuncts) so that something that's (more) likely to fail is checked first, so that you avoid wastefully checking an expensive condition)
[05:00:50] <joel135> or maybe i am wrong to call `L` a goal and it is `member(X,Xs)` that is the goal as you say.
[05:01:26] <ski> (and constraint logic programming (CLP) can be great at implicitly doing both of those, while keeping the source code rather readable .. a bit similar to how laziness can improve modularity, by allowing reasonable efficiency while maintaining separation of concerns / modularity)
[05:02:10] <ski> joel135 : yes, `L' is a term (a variable in this case), and `member(X,Xs)' is a goal
[05:02:22] <unit73e> functors are a classic for the covariant/contravariant mambo jambo, it doesn't matter that much tbh
[05:02:43] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[05:03:29] <ski> (whether something is a clause or goal can't, in general, be determined in isolation, just by looking at the thing is question. what determines it is the context in which it occurs. so it's an extrinsic notion, not an intrisic)
[05:04:28] <joel135> > logic variables are generated by existential goals *and* universal clauses. while skolems are generated by universal goals and existential clauses
[05:04:30] <lambdabot>  error:
[05:04:30] <lambdabot>      Variable not in scope:
[05:04:30] <lambdabot>        logic :: t0 -> t1 -> t2 -> t3 -> t4 -> t5 -> t Bool -> Boolerror: Vari...
[05:04:37] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[05:04:49] <ski> @botsmack
[05:04:49] <lambdabot> :)
[05:05:03] <joel135> this feels reminiscent of the distinction between additive and multiplicative connectives
[05:05:11] <joel135> rather than positive and negative connectives
[05:05:31] *** Quits: syd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net) (Read error: No route to host)
[05:05:47] <ski> meta/logic variable vs. skolem is an operational/procedural issue
[05:05:47] <nitrix> Poor ski, perpetually doomed now talking about logic programming. I'm sorry I did this to you.
[05:05:57] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Quit: Lost terminal)
[05:06:05] <ski> nitrix : nah, you didn't, that i can recall :b
[05:06:06] <joel135> which i think leads us back to the notion of "upgrade" which does connect addition to multiplication, just like the exponential function does
[05:06:17] <unit73e> logic programming does have it's uses
[05:06:24] <geekosaur> unit73e, I was asking if the flipping between logic variables and skolems could be seen as co- vs. contravariance, not asking what they were
[05:06:45] <unit73e> yeah I found it strange if you didn't know lol
[05:07:35] <unit73e> regardless, scala guys like to talk about that
[05:07:45] <unit73e> with all the + and - stuff
[05:07:46] <joel135> this kind of fits with your finding that one changes between variables and atoms when going inside the antecedent position of an implication, but it is still a bit strange that one should alternate back and forth
[05:07:51] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[05:08:46] <ski> geekosaur : contravariance represents a flipping of polarity (while covariance is a non-flipping). logic variables vs. skolems is not about flipping or not, but rather is (in my prototype) what was being flipped around (exchanging the interpretation so that logic variables are now interpreted as skolems, and vice versa, upon flipping)
[05:10:14] <unit73e> he.. I also find it confusing. I kind of get it but to me it's much simpler to think as "can I polymorph up or down"
[05:10:54] <unit73e> because I see the image in my head
[05:17:36] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:18:39] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[05:19:38] <joel135> going back to the upgrade/downgrade business: one way of thinking about this that i found is that this downgrade styled "hole" together with another downgrade (not competely sure if that it qualifies as a "downgrade" though) styled "partial term" combine to form the basis for a type checker.
[05:20:21] <joel135> this connects again to your question earlier about whether there could be several differerent upgrades/downgrades
[05:21:46] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[05:21:49] <joel135> <ski> i wonder if there's possibly two distinct "downgrades" (or two distinct "upgrades" ?)
[05:23:00] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[05:26:03] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[05:26:19] <joel135> i am imagining that the collection of all possible upgrades and downgrades form a simplicial set. perhaps ℕ₃ = Poly is like a triangle, of which the notions of "partial term" and "hole" are two edges that meet together at a single vertex, which is the source of the induction-recursion needed to type these notions.
[05:28:04] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[05:28:19] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[05:28:48] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[05:29:36] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:e9ee:3bd5:4988:8148) (Quit: Textual IRC Client: www.textualapp.com)
[05:29:54] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Remote host closed the connection)
[05:30:33] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[05:31:48] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[05:31:59] *** Joins: hololeap (~hololeap@user/hololeap)
[05:33:26] *** Joins: Cajun (~Cajun@user/cajun)
[05:36:23] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 264 seconds)
[05:37:34] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[05:37:41] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[05:38:33] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[05:38:34] <Cajun> ive been looking into effect systems and found the usual sort: mtl, fused effects, polysemy, freer-simple/freer, and eff. the ones based on free monads seem really cool, but the others tend to be faster (eff is the exception). i also watched the vod of the eff dev mentioning issues with scoped effects which was highly discouraging. im wondering in
[05:38:34] <Cajun> general whats the best system to use, considering speed and ease of use?
[05:38:46] <joel135> (and upgrading a polynomial p : ℕ₃ to an operator p(d/dx) : ℕ₄ would be the middle degeneracy that takes you from the simplex with 3 vertices to the simplex with 4 vertices)
[05:38:51] *** Joins: hololeap (~hololeap@user/hololeap)
[05:43:56] *** Quits: alx741 (~alx741@181.196.68.55) (Quit: alx741)
[05:49:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:53:27] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:58:00] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[06:02:11] *** Quits: EvanR (~evan@user/evanr) (Ping timeout: 245 seconds)
[06:12:17] *** Quits: jpds1 (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[06:12:42] *** Joins: jpds1 (~jpds@gateway/tor-sasl/jpds)
[06:13:43] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[06:15:50] *** Quits: xff0x (~xff0x@2001:1a81:5273:3700:28cd:42fe:3b9:2637) (Ping timeout: 260 seconds)
[06:17:41] *** Joins: xff0x (~xff0x@2001:1a81:52b1:3000:b3ef:fedd:d143:889a)
[06:18:38] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[06:21:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[06:30:00] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:31:29] *** Joins: sander (~sander@user/sander)
[06:36:28] *** Quits: faultline (~christian@nat-eduroam-01.scc.kit.edu) (Remote host closed the connection)
[06:37:45] *** Quits: Square (~a@178.62.91.8) (Changing host)
[06:37:45] *** Joins: Square (~a@user/square)
[06:38:20] <lyxia> Use IO and don't get into situations where you need anything else.
[06:38:25] *** Joins: EvanR (~evan@2600:1700:ba69:10:98b6:b5c4:3b00:4c9a)
[06:43:18] *** Quits: EvanR (~evan@2600:1700:ba69:10:98b6:b5c4:3b00:4c9a) (Ping timeout: 268 seconds)
[06:45:33] *** Joins: slack1256 (~slack1256@191.125.99.211)
[06:48:19] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[06:53:11] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[07:04:35] *** Quits: nosewings (~ngpc@2603-8081-3e05-e2d0-91fa-0be4-4222-fe4b.res6.spectrum.com) (Remote host closed the connection)
[07:09:30] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:09:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:09:30] *** finn_elija is now known as FinnElija
[07:17:30] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[07:21:29] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[07:25:52] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[07:26:43] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[07:27:12] <a6a45081-2b83> how can I define something similar for `Ratio Integer` (https://hackage.haskell.org/package/memoize-0.8.1/docs/src/Data.Function.Memoize.html#memoFix)
[07:29:24] <a6a45081-2b83> my plan is to have `instace Memoizable (Ratio Integer) where memoize f = let f' (a,b) = f (a%b) in memoize f'`
[07:29:27] <a6a45081-2b83> or something like that
[07:29:34] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 268 seconds)
[07:31:02] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[07:35:34] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[07:35:42] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:41:05] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[07:41:21] *** Joins: Cajun (~Cajun@user/cajun)
[07:42:12] <ski> joel135 : sorry, i became stuck for a bit, trying to get my old code to work (finally managed) .. if you want to, i could send you the code
[07:43:48] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[07:43:52] *** Joins: mcglk (~mcglk@131.191.49.120)
[07:45:18] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:46:07] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:48:08] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[07:48:53] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Read error: Connection reset by peer)
[07:49:21] *** Joins: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com)
[07:49:27] *** Quits: a6a45081-2b83 (~aditya@2603-6080-0800-8e4a-0000-0000-0000-01a8.res6.spectrum.com) (Client Quit)
[07:49:30] *** Joins: img (~img@user/img)
[08:05:04] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:05:47] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:15:25] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[08:17:02] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:17:34] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[08:17:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:18:01] *** Quits: ishutin (~ishutin@62-165-208-189.pool.digikabel.hu) (Ping timeout: 245 seconds)
[08:20:03] *** Joins: ishutin (~ishutin@92-249-179-61.pool.digikabel.hu)
[08:20:07] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[08:20:49] <ski> joel135 : perhaps you could elaborate on the "upgrading a polynomial p : ℕ₃ to an operator p(d/dx)" part (what is meant by that)
[08:37:11] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:1574:2437:4f0d:50e6) (Quit: SeungheonOh)
[08:37:35] *** Quits: emf (~emf@2620:10d:c090:400::5:38d) (Ping timeout: 264 seconds)
[08:40:50] *** Joins: emf (~emf@163.114.132.5)
[08:45:24] *** Quits: emf (~emf@163.114.132.5) (Read error: Connection reset by peer)
[08:46:15] *** Joins: emf (~emf@2620:10d:c090:400::5:f801)
[08:47:45] *** Quits: slack1256 (~slack1256@191.125.99.211) (Ping timeout: 256 seconds)
[08:48:44] *** Quits: mrianbloom (sid350277@id-350277.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[08:48:44] *** Quits: vito (sid1962@user/vito) (Ping timeout: 252 seconds)
[08:48:51] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[08:48:51] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[08:48:54] *** Quits: whez (sid470288@id-470288.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:48:59] *** Quits: gregberns__ (sid315709@id-315709.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:48:59] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (Ping timeout: 264 seconds)
[08:49:07] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Ping timeout: 268 seconds)
[08:49:08] *** Quits: carter (sid14827@id-14827.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:49:08] *** Quits: nrr_ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:49:09] *** Quits: aria (sid380617@id-380617.lymington.irccloud.com) (Ping timeout: 265 seconds)
[08:49:10] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:49:10] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:49:10] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 260 seconds)
[08:49:16] *** Quits: hamishmack (sid389057@id-389057.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[08:49:16] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:49:16] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 245 seconds)
[08:49:35] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[08:49:36] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:49:36] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:49:41] *** Quits: jackdk (sid373013@cssa/jackdk) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: dpratt_ (sid193493@id-193493.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: gonz___ (sid304396@id-304396.lymington.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:49:43] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[08:49:45] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: SethTisue__ (sid14912@id-14912.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:50:04] *** Quits: kaychaks__ (sid236345@id-236345.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:06] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:50:11] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (Ping timeout: 264 seconds)
[08:50:18] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:18] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:20] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:20] *** Quits: alinab (sid468903@id-468903.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:20] *** Quits: econo (uid147250@user/econo) (Ping timeout: 268 seconds)
[08:50:20] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:20] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:21] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[08:50:23] *** Quits: S11001001 (sid42510@id-42510.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[08:50:23] *** Quits: sa1 (sid7690@id-7690.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[08:50:26] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[08:50:32] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:50:32] *** Quits: b20n (sid115913@id-115913.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:50:39] *** Quits: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[08:50:46] *** Quits: pony (sid524992@smol/hors) (Ping timeout: 260 seconds)
[08:50:55] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 260 seconds)
[08:50:55] *** Quits: integral (sid296274@user/integral) (Ping timeout: 260 seconds)
[08:50:56] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:50:58] *** Quits: hongminhee (sid295@id-295.tinside.irccloud.com) (Ping timeout: 268 seconds)
[08:51:00] *** Quits: stevenxl (sid133530@id-133530.uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[08:51:00] *** Quits: tnks (sid412124@id-412124.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[08:51:00] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 260 seconds)
[08:51:00] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:51:04] *** Joins: lightandlight (sid135476@id-135476.helmsley.irccloud.com)
[08:51:08] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[08:51:09] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[08:51:10] *** Joins: hubvu (sid495858@user/hubvu)
[08:51:10] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[08:51:10] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[08:51:11] *** Joins: S11001001 (sid42510@id-42510.ilkley.irccloud.com)
[08:51:15] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[08:51:16] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[08:51:18] *** Joins: gregberns__ (sid315709@helmsley.irccloud.com)
[08:51:19] *** Joins: SethTisue__ (sid14912@ilkley.irccloud.com)
[08:51:19] *** Joins: sa1 (sid7690@id-7690.ilkley.irccloud.com)
[08:51:20] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[08:51:21] *** Joins: whez (sid470288@lymington.irccloud.com)
[08:51:21] *** Joins: bjs (sid190364@user/bjs)
[08:51:22] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[08:51:24] *** Joins: mrianbloom (sid350277@ilkley.irccloud.com)
[08:51:24] *** Joins: glowcoil (sid3405@tinside.irccloud.com)
[08:51:24] *** Joins: supersven (sid501114@ilkley.irccloud.com)
[08:51:27] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[08:51:29] *** Joins: vito (sid1962@id-1962.uxbridge.irccloud.com)
[08:51:30] *** Joins: hongminhee (sid295@id-295.tinside.irccloud.com)
[08:51:30] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[08:51:31] *** Quits: vito (sid1962@id-1962.uxbridge.irccloud.com) (Changing host)
[08:51:31] *** Joins: vito (sid1962@user/vito)
[08:51:39] *** Joins: servytor (uid525486@2a03:5180:f:4::8:4ae)
[08:51:39] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[08:51:42] *** Joins: meinside (uid24933@helmsley.irccloud.com)
[08:51:44] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[08:51:44] *** Joins: Pent (sid313808@2a03:5180:f:2::4:c9d0)
[08:51:45] *** Joins: gmc (sid58314@ilkley.irccloud.com)
[08:51:46] *** Joins: gonz___ (sid304396@2a03:5180:f:2::4:a50c)
[08:51:46] *** Joins: aria (sid380617@lymington.irccloud.com)
[08:51:48] *** Joins: idnar (sid12240@debian/mithrandi)
[08:51:49] *** Joins: rtpg (sid443069@2a03:5180:f:3::6:c2bd)
[08:51:52] *** Joins: hamishmack (sid389057@2a03:5180:f:4::5:efc1)
[08:51:52] *** Joins: awpr (uid446117@lymington.irccloud.com)
[08:51:53] *** Joins: systemfault (sid267009@2a03:5180:f:5::4:1301)
[08:51:54] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[08:51:58] *** Joins: bw (sid2730@user/betawaffle)
[08:51:58] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[08:51:59] *** Joins: agander_m (sid407952@2a03:5180:f::6:3990)
[08:51:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[08:51:59] *** Joins: obviyus (sid415299@user/obviyus)
[08:52:00] *** Joins: tnks (sid412124@2a03:5180:f:1::6:49dc)
[08:52:00] *** Joins: mcfilib (sid302703@2a03:5180:f:1::4:9e6f)
[08:52:00] *** Quits: mcfilib (sid302703@2a03:5180:f:1::4:9e6f) (Changing host)
[08:52:00] *** Joins: mcfilib (sid302703@user/mcfilib)
[08:52:01] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[08:52:02] *** Joins: nrr_ (sid20938@id-20938.lymington.irccloud.com)
[08:52:04] *** Joins: kaychaks__ (sid236345@2a03:5180:f:1::3:9b39)
[08:52:05] *** Joins: ephemient (uid407513@2a03:5180:f:2::6:37d9)
[08:52:06] *** Joins: edmundnoble (sid229620@2a03:5180:f:1::3:80f4)
[08:52:08] *** Joins: cbarrett (sid192934@2a03:5180:f:1::2:f1a6)
[08:52:11] *** Joins: jackdk (sid373013@cssa/jackdk)
[08:52:11] *** Joins: econo (uid147250@user/econo)
[08:52:14] *** Joins: integral (sid296274@user/integral)
[08:52:18] *** Joins: whatsupdoc (uid509081@2a03:5180:f:4::7:c499)
[08:52:20] *** Joins: carter (sid14827@id-14827.helmsley.irccloud.com)
[08:52:21] *** Joins: b20n (sid115913@2a03:5180:f:5::1:c4c9)
[08:52:22] *** Joins: stevenxl (sid133530@2a03:5180:f:5::2:99a)
[08:52:22] *** Joins: dpratt_ (sid193493@helmsley.irccloud.com)
[08:52:24] *** Joins: pony (sid524992@smol/hors)
[08:52:25] *** Joins: aarchi (sid486183@2a03:5180:f:5::7:6b27)
[08:52:25] *** Joins: SanchayanMaity (sid478177@2a03:5180:f:4::7:4be1)
[08:52:25] *** Joins: Firedancer (sid336191@2a03:5180:f:4::5:213f)
[08:52:25] *** Joins: pepeiborra (sid443799@2a03:5180:f:3::6:c597)
[08:52:25] *** Joins: alanz (sid110616@2a03:5180:f:5::1:b018)
[08:52:27] *** Joins: pjlsergeant (sid143467@2a03:5180:f:4::2:306b)
[08:52:29] *** Joins: rubin55 (sid175221@2a03:5180:f:4::2:ac75)
[08:52:47] *** Joins: NiKaN (sid385034@2a03:5180:f:1::5:e00a)
[08:52:49] *** Joins: jakesyl_ (sid56879@2a03:5180:f:4::de2f)
[08:54:11] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[08:54:16] *** Joins: tritlo (sid58727@user/tritlo)
[08:55:17] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[08:57:01] *** Joins: EvanR (~evan@2600:1700:ba69:10:acd9:793b:27c9:b878)
[09:06:26] *** Joins: yauhsien (~yauhsien@2402:7500:4e4:2cb1:35e8:471e:a055:9d52)
[09:11:06] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[09:12:25] *** Joins: Cajun (~Cajun@user/cajun)
[09:25:31] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[09:30:23] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 264 seconds)
[09:35:10] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[09:35:32] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[09:36:42] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[09:38:14] *** Joins: hololeap (~hololeap@user/hololeap)
[09:43:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b) (Ping timeout: 268 seconds)
[09:45:48] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[09:46:08] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[09:51:51] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[09:55:05] *** Quits: xff0x (~xff0x@2001:1a81:52b1:3000:b3ef:fedd:d143:889a) (Ping timeout: 268 seconds)
[09:55:35] *** Quits: EvanR (~evan@2600:1700:ba69:10:acd9:793b:27c9:b878) (Ping timeout: 264 seconds)
[09:55:53] *** Joins: xff0x (~xff0x@2001:1a81:52b1:3000:355a:710f:ac35:1a61)
[10:02:51] *** Quits: MidAutumnMoon (~MidAutumn@user/midautumnmoon) (Quit: Leaving for a break - theLounge)
[10:03:26] *** Joins: MidAutumnMoon (~MidAutumn@user/midautumnmoon)
[10:05:54] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[10:06:05] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[10:08:42] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[10:10:06] *** Quits: xff0x (~xff0x@2001:1a81:52b1:3000:355a:710f:ac35:1a61) (Ping timeout: 245 seconds)
[10:11:05] *** Joins: xff0x (~xff0x@2001:1a81:52b1:3000:7ef:3640:6d4d:8cb8)
[10:12:31] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[10:16:06] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[10:18:57] *** Joins: alzgh (~alzgh@user/alzgh)
[10:20:31] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 245 seconds)
[10:24:16] *** Quits: yauhsien (~yauhsien@2402:7500:4e4:2cb1:35e8:471e:a055:9d52) (Remote host closed the connection)
[10:24:34] *** Joins: vysn (~vysn@user/vysn)
[10:38:11] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[10:42:29] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[10:42:38] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:46:30] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[10:47:07] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:48:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:49:02] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:50:02] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:51:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:52:25] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[10:55:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 245 seconds)
[10:57:14] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 260 seconds)
[10:57:58] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[11:01:14] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:03:49] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[11:08:17] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:13:43] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[11:18:26] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[11:21:54] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:22:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[11:29:41] *** Joins: cheater (~Username@user/cheater)
[11:35:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[11:35:39] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[11:35:52] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[11:37:05] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[11:38:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:42:53] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[11:44:47] *** Quits: emf (~emf@2620:10d:c090:400::5:f801) (Ping timeout: 264 seconds)
[11:47:11] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 245 seconds)
[11:47:27] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:47:51] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:49:26] *** Joins: hendursaga (~weechat@user/hendursaga)
[11:51:40] *** Joins: emf (~emf@c-73-97-137-43.hsd1.wa.comcast.net)
[11:56:47] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 264 seconds)
[11:58:59] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[11:59:05] *** Joins: mei3 (~mei@user/mei)
[12:03:34] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[12:09:36] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[12:13:20] *** Joins: wonko (~wjc@user/wonko)
[12:25:16] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:25:57] *** Joins: v01d4lph4 (~v01d4lph4@106.215.93.204)
[12:25:57] *** Quits: v01d4lph4 (~v01d4lph4@106.215.93.204) (Changing host)
[12:25:57] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[12:30:03] *** Quits: cloudy (~cloudy@2001:470:69fc:105::50c0) (Quit: You have been kicked for being idle)
[12:30:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:32:09] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[12:32:35] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[12:38:11] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 264 seconds)
[12:42:55] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[12:45:08] *** Joins: Lycurgus (~juan@98.4.112.204)
[12:45:18] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[12:49:55] *** Joins: boxscape_ (~boxscape_@mue-88-130-59-018.dsl.tropolys.de)
[12:56:22] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:56:54] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[12:59:33] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:03:56] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[13:06:35] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[13:14:47] *** Joins: kuribas (~user@ptr-25vy0i7euy3zycfmzaa.18120a2.ip6.access.telenet.be)
[13:17:18] *** Quits: arahael (~arahael@124.148.78.199) (Ping timeout: 260 seconds)
[13:20:13] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[13:23:39] *** Quits: Athas (athas@2a01:7c8:aaac:1cf:a0d4:8908:cfdb:b9c0) (Quit: ZNC 1.8.2 - https://znc.in)
[13:23:49] *** Joins: Athas (athas@sigkill.dk)
[13:25:06] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 245 seconds)
[13:29:16] *** Parts: emanuele6 (~emanuele6@user/emanuele6) (WeeChat 3.3)
[13:29:47] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[13:30:04] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:30:21] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[13:34:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[13:37:19] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Ping timeout: 256 seconds)
[13:42:36] *** Joins: arahael (~arahael@202-159-171-156.tpgi.com.au)
[13:43:01] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[13:47:26] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:52:18] <joel135> ski: by p(d/dx) i mean for example the differential operator f ↦ f + 5 d²f/dx², if p(t) is 1 + 5 t^2. the idea that you get the typing p(d/dx) : ℕ₄ is unfortunately only approximate, since supposedly ℕ₄ consists of just the "algebraic" operators (formed from the progression of constants 0, 1, x, I and corresponding binary operators _+_, _*_, _∘_, _▫_ (for lack of more standard notation)),
[13:53:05] <joel135> among which d/dx and p(d/dx) don't seem to quite fit in although do they live "at the right level" in that they are operators that can be turned into functions ℕ₃ → ℕ₃ (i.e. forall o. ⋯ → forall o. ⋯).
[13:59:55] *** Joins: mmhat (~mmh@55d4b9d8.access.ecotel.net)
[14:05:52] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:40a:9f91:8f3e:4f02)
[14:06:03] <Inst> a gonad is just a gonoid in the category of endofunctors ;)
[14:14:56] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:15:14] *** Quits: kuribas (~user@ptr-25vy0i7euy3zycfmzaa.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[14:17:05] *** Quits: whatsupdoc (uid509081@2a03:5180:f:4::7:c499) (Quit: Connection closed for inactivity)
[14:17:42] <joel135> the reason that i want to call it a "middle degeneracy" is that addition is sent to addition ((p+q)(d/dx) = p(d/dx)+q(d/dx), the "same level") whereas multiplication of pure powers tᵃtᵇ is sent to operator composition ((tᵃtᵇ)(d/dx) = dᵃ⁺ᵇ/dxᵃ⁺ᵇ = dᵃ/dxᵃ ▫ dᵇ/dxᵇ = (tᵃ)(d/dx) ▫ (tᵇ)(d/dx), a "higher level" in the progression of _+_, _*_, _∘_, _▫_, ...)
[14:21:08] <joel135> anything that is not acting in the "middle" of this progression of operators would either leave it alone (sending p to \_ -> p) or shift the entire hierarchy by one or more steps like you do for the Antecedent (sending p to p)
[14:30:50] *** Joins: alx741 (~alx741@181.196.68.55)
[14:35:18] *** Quits: tremon (~tremon@217-63-61-89.cable.dynamic.v4.ziggo.nl) (Quit: getting boxed in)
[14:35:30] *** Joins: Pickchea (~private@user/pickchea)
[14:37:19] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[14:40:16] *** cocreatu1 is now known as cocreature
[14:44:20] *** Joins: desantra (~skykanin@user/skykanin)
[14:51:34] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[14:52:48] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:53:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:53:27] <joel135> <ski> "normally", success and failure continuations are not mixed up with each other. but for implication, when `Consequent' succeeds, that is then interpreted by `Antecedent' as a failure, a prod for it to generate another solution (spawning a new, conceptually separate, call to `Consequent')
[14:54:43] <joel135> ah, after a night's sleep am beginning to understand this now. it is an astute observation
[14:55:46] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 260 seconds)
[14:57:08] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[14:57:20] *** Joins: desantra (~skykanin@user/skykanin)
[14:58:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[15:01:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:02:07] <joel135> by the way, did you represent your type of multidimensional arrays (assuming you mean something like a list of lists, but with the constraint that they form a rectangular grid in the end) by some kind of Church encoding? i don't see how to accomplish that off the top of my head.
[15:02:22] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[15:05:43] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[15:06:37] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[15:07:49] *** Joins: desantra (~skykanin@user/skykanin)
[15:10:42] *** Joins: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr)
[15:12:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:14:41] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 245 seconds)
[15:18:09] *** Joins: fendor (~fendor@91.141.74.77.wireless.dyn.drei.com)
[15:19:44] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:9554:7177:bc66:d82f)
[15:19:47] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:9554:7177:bc66:d82f) (Client Quit)
[15:20:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[15:22:18] *** Quits: boxscape_ (~boxscape_@mue-88-130-59-018.dsl.tropolys.de) (Ping timeout: 260 seconds)
[15:29:16] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[15:29:47] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[15:31:18] <alzgh> hello, I'm trying to rewrite `tupledMonad1` using bind notation `>>=`. Any help and hint is appreciated https://paste.tomsmeding.com/odkcLN80
[15:31:31] *** Joins: basti_ (~basti@ip-84-119-8-195.unity-media.net)
[15:32:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:33:20] *** Joins: tfeb (~tfb@88.98.95.237)
[15:34:34] *** Quits: alx741 (~alx741@181.196.68.55) (Quit: alx741)
[15:35:13] *** Joins: cosimone (~user@93-47-229-157.ip115.fastwebnet.it)
[15:37:42] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[15:38:01] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:41:50] *** Joins: fendor_ (~fendor@91.141.74.77.wireless.dyn.drei.com)
[15:41:51] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[15:42:36] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[15:44:15] *** Quits: fendor (~fendor@91.141.74.77.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[15:47:30] *** fendor_ is now known as fendor
[15:52:38] <Pickchea> Hey, is there a way to make the type checker accept this? \p q -> p q p
[15:54:24] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:54:39] <hpc> wrap it in Fix maybe?
[15:55:54] <hpc> what type do you want p to have?
[15:56:00] <ski> joel135 : by ⌜f ↦ f + 5 d²f/dx²⌝, you mean ⌜f ↦ x ↦ f x + 5 ⋅ d² (f x) / (d x)²⌝ ? what's ⌜I⌝,⌜▫⌝ ?
[15:56:30] <ski> ("ah, after a night's sleep .." -- ok, good)
[15:57:45] <joel135> yes that is what i mean
[15:58:26] <ski> joel135 : no, iirc just nested "arrays" (implemented as compound terms, using the standard arg/3 to access at a positive integer index). this was before i got to thinking about "backtracking backtracking", and started fiddling with continuation levels
[15:59:27] *** Joins: jess (~jess@libera/staff/jess)
[16:00:41] <joel135> of type ℕ₄, I and _▫_ are just id and comp
[16:01:15] <joel135> of type ℕ₅, I and _▫_ are pure id and liftA2 comp
[16:01:23] <joel135> and so on
[16:01:24] <ski> (i then tried using some (iirc) setarg/3 (low-level mutation), in order to attempt to make some changes survive backtracking. recently i found a linkarg/3 (more unsafe), which i think maybe could have been used to avoid (what i deemed to be) problems caused by optimizations assuming purity (no mutation))
[16:01:34] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[16:02:22] <Pickchea> hpc, couldn't figure it out with fix. I'm just playing around. Say `true a b = a' and `false a b = b'. It would follow that `and a b = a b a'.
[16:02:26] <ski> hm, so just continuing the pattern of successively (environment-)lifted identity and composition, ok
[16:02:52] <ski> (i still wonder about a "numerical" interpretation of them)
[16:04:03] <ski> Pickchea : what about `and a b p q = a (b p q) q' ?
[16:04:03] <joel135> I is to be that operator which given a polynomial returns that polynomial without modification
[16:04:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:05:19] <joel135> another operator of the same type would be p(x) ↦ p(x+n) for a fixed natural number n. this is a bona fide operator of type ℕ₄.
[16:05:45] <ski> "operator" here being an operator on polynomials, presumably generated from an "oracle"/indeterminate/unknown/variable/formal such operator ?
[16:05:56] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:07:08] <ski> (i take that to mean ⌜p ↦ x ↦ p (x + n)⌝)
[16:07:37] <Pickchea> ski, what are you, some kind genius? :-D
[16:07:58] <ski> Pickchea : or, you could declare `type ChurchBool = forall o. o -> o -> o' (and enable `Rank2Types'), i think ?
[16:08:07] *** Joins: jumper149 (~jumper149@80.240.31.34)
[16:08:46] <ski> (i think, using that, you may be able to get `and a b = a b a' to check)
[16:09:24] <ski> Pickchea : i was just talking, some hours ago, about Church numerals :)
[16:10:13] <ski> (oh, and obviously you'd need the type signature that you expect, on `and', for that to possibly work)
[16:13:44] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:14:34] *** Joins: favonia (~favonia@user/favonia)
[16:15:37] <Pickchea> ski, couldn't do it with Rank2Types. But interesting stuff. If it works with `and a b p q = a (b p q) q' I wonder why `and a b = a b a' can't pass the type check.
[16:15:48] <Pickchea> Seems complicated :-D
[16:16:17] <hpc> it's the same reason you can't write (\x -> x x) in simply typed lambda calculus
[16:17:48] <hpc> the unifier has to solve a = b -> a -> c
[16:18:00] <hpc> which is a = b -> (b -> (b -> (...
[16:18:02] <hpc> which is an infinite type
[16:19:33] <Pickchea> Yeah, I thought something like that!
[16:19:45] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[16:20:10] <Pickchea> This point goes to Lisp I guess :-D
[16:21:44] *** Joins: aleator (~aleator@178-55-117-52.bb.dnainternet.fi)
[16:22:09] <ski> Pickchea : did you try adding a type signature for `and' ?
[16:23:02] <joel135> ski: yes, an operator on polynomials, and it is correct to write it as p ↦ x ↦ p (x + n) where then p : ((o -> o) -> (o -> o)) -> ((o -> o) -> (o -> o)) and x : ((o -> o) -> (o -> o)) and o is a type variable
[16:23:05] <ski> Pickchea : oh .. and if you want to play around with cyclic / "infinite" (/ equi-recursive) types, you could use `ocaml -rectypes'
[16:23:47] <unit73e> I don't know why aeson only has these super simple examples
[16:23:54] <unit73e> the best I found was this guy: https://artyom.me/aeson
[16:24:12] <joel135> note the distinction between the type ℕ₃ → ℕ₃ of arbitrary recursively defined operators on polynomials, and the more modest type ℕ₄ of "algebraically defined" operators on polynomials
[16:24:36] <joel135> the latter includes the translation operator from above, but presumably it doesn't include the differentiation operator
[16:25:02] <ski> (but there's a reason why static type systems normally don't allow that .. namely that there's a lot of false negatives, common type errors that now become type-correct, with strange inferred cyclic types, and only at a later time and place the issue may be noticed, the error location usually pointing to the "wrong place")
[16:25:57] <ski> joel135 : *nod*, interesting
[16:28:04] <ski> (this relates to my idea of, in implication chains in proofs, whenever possible, working inside/within a universal, rather than using (the more powerful) reasoning between universals. a kind of "principle of least power" or something)
[16:28:09] <unit73e> however I agree that artyom should show the efficient way of using aeson. I don't like when you're tuturials show the wrong way. Why? Makes no sense to me.
[16:29:14] <ski> (hm, now i'm associating the above to minimal logic, and to the meta-distinction between derivable and admissible inference rules)
[16:31:04] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:31:05] <ski> joel135 : would this indeterminate operator that generates "operanomials" have any kind of "distribute" laws or something, wrt the other algebraic operations ?
[16:32:18] *** Quits: aleator (~aleator@178-55-117-52.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[16:32:27] *** Quits: Alex_test (~al_test@94.233.241.187) (Quit: ;-)
[16:32:30] *** Quits: AlexZenon (~alzenon@94.233.241.187) (Quit: ;-)
[16:32:59] *** Quits: AlexNoo (~AlexNoo@94.233.241.187) (Quit: Leaving)
[16:33:53] *** Quits: chomwitt (~chomwitt@athedsl-32204.home.otenet.gr) (Remote host closed the connection)
[16:33:57] <Inst> erm
[16:33:59] <Inst> looking for some help
[16:34:13] <Inst> in Haskell code, provided I'm running on a Windows system
[16:34:40] <Inst> how do I call the Windows API to create a default system "open file / save file" dialogue, then bind it to Haskell IO?
[16:35:00] <joel135> i think all generalized operators satisfy a one-sided distributive law like (A *ₖ B) *ₗ C = (A *ₗ C ) *ₖ (B *ₗ C) for k < l (or k > l, depending on conventions)
[16:35:50] <joel135> where *ₖ and *ₗ have the same type ℕₙ → ℕₙ → ℕₙ
[16:36:23] <joel135> generalized nullary/binary operators, i should say
[16:36:33] <Pickchea> ski, thanks! :-)
[16:36:34] *** Quits: basti_ (~basti@ip-84-119-8-195.unity-media.net) (Ping timeout: 260 seconds)
[16:38:50] <hpc> Inst: there's a win32 package, and bindings to various ui toolkits
[16:39:16] <Inst> win32 package and bindings to various ui toolkits?
[16:39:26] <Inst> iirc there's a package to set up windows GUI, etc
[16:39:30] <hpc> yeah, one of those might have it
[16:39:40] <Inst> "might"
[16:39:41] <Inst> sigh
[16:39:49] <hpc> windows has so many random ways of doing things i don't know exactly what the api call for that dialogue is
[16:40:08] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[16:40:18] <hpc> worst case scenario, you get a gtk window instead of a native window
[16:40:28] <hpc> so that way is guaranteed to work with some effort
[16:40:40] <hpc> can't help more, myself :(
[16:43:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[16:43:48] *** Quits: zincy (~tom@2a00:23c8:970c:4801:e02d:7bbd:5337:7d58) (Remote host closed the connection)
[16:44:01] <joel135> ski: yes, these contemplations about "power" and "meta-inferences" seem relevant here
[16:46:34] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:47:03] <Inst> can this handle it for me?
[16:47:04] <Inst> https://hackage.haskell.org/package/Win32
[16:47:13] <Inst> it's a win32 api binding for windows
[16:48:02] *** Joins: EvanR (~evan@2600:1700:ba69:10:75fc:f740:4c21:d03d)
[16:49:13] <ski> joel135 : hm, i see
[16:50:30] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:51:05] *** Joins: AlexNoo (~AlexNoo@94.233.241.187)
[16:51:08] *** Joins: AlexZenon (~alzenon@94.233.241.187)
[16:52:03] *** Joins: jinsun (~quassel@user/jinsun)
[16:52:14] <ski> (it's not really clear to me why polynomials, or "operanomials", crop up here .. also, i'm now vaguely recalling some paper that talked about representing numbers in terms of endofunctions on endofunctions, and, iirc, introduced extra conditions for when one could form e.g. various rationals (in addition to the negatives, which require bijectivity on the inner endos))
[16:52:29] *** Joins: Alex_test (~al_test@94.233.241.187)
[16:55:10] * ski . o O ( "Continuity of Gödel's system T definable functionals via effectful forcing" by Martín Escardó in 2013 at <https://www.cs.bham.ac.uk/~mhe/dialogue/dialogue.pdf> .. has oracles )
[16:56:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[16:57:33] <tomjaguarpaw> How do I get Haddock to link to a constructor or pattern rather than a data type?
[16:58:12] <tomjaguarpaw> For example if I have  data Foo = Bar; data Baz = Foo  how do I get the Haddock syntax  'Foo'  to link to the constructor of  Bar ?
[16:59:29] <tomjaguarpaw> Ah, it's  v'Foo'
[16:59:34] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[16:59:41] <tomjaguarpaw> https://github.com/haskell/haddock/issues/667
[17:06:18] *** Joins: max22- (~maxime@2a01cb08833598005d78e1cb2fc9f4a2.ipv6.abo.wanadoo.fr)
[17:10:28] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[17:10:31] *** Quits: MidAutumnMoon (~MidAutumn@user/midautumnmoon) (Quit: Ping timeout (120 seconds))
[17:10:44] *** Joins: MidAutumnMoon (~MidAutumn@user/midautumnmoon)
[17:10:49] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[17:11:42] *** Quits: max22- (~maxime@2a01cb08833598005d78e1cb2fc9f4a2.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:18:52] <gentauro> built my first ARM (M1) Haskell binary with stack/cabal. Not that hard. The worst part? Is going from NixOS + Xmonad to `macOS`. Gosh, that OS is absolutely rubbish :-\
[17:19:31] <joel135> ski: that stuff of representing numbers (not just the semiring of natural numbers N but also N[x] and so on) in terms of endofunctions on endofunctions is the sort of stuff i was thinking briefly about earlier this week
[17:19:40] * gentauro I would <3 that somebody managed to make the `fancy` Apple hardware work on NixOS xD
[17:19:56] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:20:08] <joel135> also N[eps] := N[x]/(x^2)
[17:20:47] <joel135> for what o is this the same as the type (o -> o) -> (o -> o) ? trippy question
[17:22:47] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 268 seconds)
[17:26:38] *** Quits: favonia (~favonia@user/favonia) (Remote host closed the connection)
[17:27:36] *** Joins: favonia (~favonia@user/favonia)
[17:29:42] <ski> hmm
[17:34:27] <tomjaguarpaw> c
[17:38:08] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[17:38:43] *** Joins: machinedgod (~machinedg@24.105.81.50)
[17:39:11] *** Joins: rembo10 (~rembo10@remulis.com)
[17:42:15] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:44:55] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.3)
[17:50:52] *** Joins: max22- (~maxime@2a01cb0883359800bbde3f2c88505b2a.ipv6.abo.wanadoo.fr)
[17:53:38] *** Quits: gg (~gg@2a01:e0a:819:1510:89f0:97ca:21c4:6ea6) (Ping timeout: 268 seconds)
[17:57:32] <Inst> my problem is partially solved
[17:57:42] <Inst> turns out there's haskell libs binding to FLTK
[17:57:46] <Inst> FLTK has native window open close support
[17:58:04] <Inst> erm, support for opening native file open / save apps
[18:01:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:01:24] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[18:02:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[18:03:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:03:30] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:08:11] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[18:12:55] *** Joins: __monty__ (~toonn@user/toonn)
[18:16:44] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[18:17:38] *** Joins: acidjnk (~acidjnk@p200300d0c7263574f86fe22bbcd0fec5.dip0.t-ipconnect.de)
[18:19:20] *** Joins: robertfry (~robertfry@cosh-19-b2-v4wan-161499-cust683.vm10.cable.virginm.net)
[18:23:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[18:24:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:25:07] *** Quits: TheCoffeMaker_ (~TheCoffeM@125-121-245-190.fibertel.com.ar) (Quit: So long and thanks for all the fish)
[18:27:03] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:27:54] *** Joins: aqua0210 (~user@101.85.11.168)
[18:32:18] *** Joins: hololeap_ (~hololeap@user/hololeap)
[18:32:33] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[18:33:56] *** Joins: mrkrktsndctcrpt (~mrkrktsnd@50.228.44.6)
[18:35:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[18:38:10] *** Joins: basti_ (~basti@ip-84-119-8-195.unity-media.net)
[18:41:38] <dsal> gentauro: I run nix on macos
[18:42:05] <dsal> Not xmonad, though.  I run that on nixos
[18:43:37] <gentauro> dsal: yeah, I run the `nix` (package manager) as well on the `macOS`
[18:43:50] <gentauro> but I would rather run `NixOS` on the Apple hardware ;)
[18:44:17] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[18:45:53] <geekosaur> xmonad's a bad fit for macos anyway, because of how its x11 emulation works
[18:46:10] <geekosaur> and you can't use xmonad to manage native windows
[18:46:35] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[18:48:08] <gentauro> dsal: another `bad` thing about `nix` vs `NixOS`, is that you don't have a `stable` channel for packages
[18:48:32] *** Joins: hiruji (~hiruji@user/hiruji)
[18:48:37] <gentauro> I mean, I tried to build an application on the `macOS` and the `llvm rc-compiler` is broken ..
[18:48:52] <gentauro> not very "optimal" for a "workstation"
[18:49:41] <dsal> Heh, I've never been a fan of stable.  Makes me think of debian where everything I care about is too old to be useful.
[18:49:52] <dsal> That's not as much of an issue on nixos, though.
[18:51:59] *** Quits: max22- (~maxime@2a01cb0883359800bbde3f2c88505b2a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:53:16] *** Joins: aman (~aman@user/aman)
[18:53:34] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[18:54:23] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[18:57:41] <gentauro> dsal: at the moment I can't `build` C/C++ app's on my apple-device. Makes it pretty useless, don't you think?
[18:57:45] *** Quits: acidjnk (~acidjnk@p200300d0c7263574f86fe22bbcd0fec5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:57:52] <EvanR> it's late 2021 does haskell have a decent way to make a global variable
[18:58:10] * gentauro unless you want to go the "manual" / `homebrew` way which I don't want to
[18:58:27] <geekosaur> it probably never will
[18:58:35] <hpc> EvanR: does it have to be mutable?
[18:58:37] <gentauro> EvanR: there no concept of `variables`
[18:58:39] <dsal> gentauro: I have some...
[18:58:40] <geekosaur> isn't that kinda the point of fp?
[18:58:42] <gentauro> everything are `values`
[18:58:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Ping timeout: 245 seconds)
[18:59:03] <EvanR> yeah I get it, but instead we have several shitty ways to do it xD
[18:59:18] <gentauro> dsal: I have setup `nix` + `home-manager` to handle "software". It's the closest I can get to `NixOS` …
[18:59:33] <hpc> to be fair, there's no good way to do global mutable state :P
[18:59:50] <dsal> Yeah, "global variables" is one of those engineering practices that people tend to strive for.
[19:00:07] <geekosaur> yeh, haskell just uncovers all the ugly cracks in the concept
[19:00:10] <dsal> gentauro: yep, that's how I do it
[19:00:14] <gentauro> main state = …
[19:00:23] <gentauro> EvanR: just pass it as a parameter on your main function?
[19:00:25] <gentauro> :P
[19:00:44] <hpc> main = newIORef >>= main'
[19:00:59] <dsal> EvanR: what would you do with a global variable if you had one?
[19:01:17] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[19:01:24] <EvanR> one use case would be for a throw away script (in haskell) which uses IO and modifies the globally visible ref for its own inscruptible purposes
[19:01:39] <gentauro> dsal: read/update from many different threads to get inconsistent resutls :P
[19:01:56] <[exa]> EvanR: man they literally spent 30 years getting rid of global variables
[19:02:14] <[exa]> y u no appreciate
[19:02:15] <EvanR> also, global TVar was used in a game programming example (another area that haskell "is too good for" ? xD)
[19:03:12] <EvanR> specifically to hold handles to driver resources that are set once
[19:03:28] <dsal> Sure, I put TVars in Readers for programs.
[19:03:29] <hpc> game programming is one of the last places you want global state, funny enough
[19:03:36] <hpc> global player data? what about multiplayer
[19:03:43] <EvanR> yeah not that
[19:03:43] <hpc> global viewport data? what about virtual cameras
[19:03:49] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:04:00] *** Quits: hiruji (~hiruji@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[19:04:52] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:05:41] <EvanR> so we have IVars which can be set with IO and then referenced as a pure value, but they're not "global" as such
[19:06:46] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Ping timeout: 260 seconds)
[19:07:15] <dsal> I think there's a bit of a communication problem. Many of us have been programming for decades and have been subjected to global variables in programs and are having difficulty understanding why anyone would think that's a good idea again.
[19:07:17] <EvanR> doing a monadic read each time you want to access it, in this case, would be silly
[19:08:10] <hpc> not that silly
[19:08:39] <hpc> you could read the value once and pass that as a parameter to everything instead
[19:08:48] <hpc> same way you can read a file and pass a great big ByteString around
[19:11:00] <EvanR> yeah that's a case when you imagine the data involved being an unknown and potentially visible to the code
[19:12:14] <EvanR> unlike handles to os resources, GL objects (numbers that one should not mess with)
[19:13:32] <EvanR> if your program requires a single opaque context or something, it could be convenient to refer to this directly without so much ceremony
[19:14:26] <EvanR> an example would be a web request handler script, the request is your life, and there's only one
[19:15:00] <EvanR> bad example I guess, since that data is not opaque nevermind
[19:15:56] <hpc> i suppose if you really wanted, you could make a dupable unsafePerformIO readIORef kind of thing, and then you have something mutable you don't have to actually read from
[19:16:00] <hpc> but then you have Very Fun Bugs
[19:16:09] <EvanR> exactly
[19:17:12] *** hololeap_ is now known as hololeap
[19:22:54] <EvanR> another difficulty is realistic programs with many modules, you would need some sort of bureacracy to understand who can see the global
[19:23:50] *** Joins: fendor_ (~fendor@178.165.196.101.wireless.dyn.drei.com)
[19:24:26] <monochrom> Fortunately, today you can use the (rhetorical) question "is it thread-safe?" to exorcise any want of global variables. In C and Unix, this has happened to errno, random_r(), DNS libraries.
[19:24:35] <EvanR> also if its a library, how would libraries not collide on the name
[19:25:25] <EvanR> errno, great example of a terrible use for global variable
[19:25:30] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[19:25:47] <monochrom> Oh haha, name clash is solved by every library choosing a prefix and hoping that it's, um, universally unique :)
[19:26:22] *** Quits: fendor (~fendor@91.141.74.77.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[19:32:00] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:32:22] <hpc> just do what ldap does and give everything an oid
[19:32:31] <hpc> instead of defining bitwise_and, define 1.2.840.113556.1.4.803
[19:32:35] <hpc> easy
[19:33:13] *** Joins: x6C697370 (~michael@2600:1700:7c02:3180::44)
[19:33:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:33:42] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[19:33:59] *** Joins: hiruji (~hiruji@user/hiruji)
[19:34:40] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[19:35:09] <Inst> are there any haskellers using visual studio code?
[19:35:16] <Inst> I need to figure out how to install packages from hackage
[19:35:30] <Inst> https://hackage.haskell.org/package/fltkhs
[19:35:32] *** Joins: gg (~gg@88.160.100.84)
[19:36:13] *** fendor_ is now known as fendor
[19:36:30] <[exa]> Inst: you can either make a cabal project and write it in the dependencies (will get auto-installed) or just invoke cabal from the commandline
[19:36:57] <Inst> I got VSC specifically to avoid using cabal / stock
[19:36:58] <maerwald> Inst: https://cabal.readthedocs.io/en/latest/getting-started.html
[19:36:59] <Inst> stack
[19:37:02] <Inst> thanks
[19:37:28] <geekosaur> I don't think you'll be able to avoid using at least one of them
[19:39:20] <hpc> and if you use stack, you're still not getting away from using cabal too
[19:40:11] <[exa]> why avoid it though?
[19:41:17] <Inst> minimize challenge
[19:41:18] <geekosaur> avoiding both is a nice way to get yourself into nasty dependency jungles
[19:41:21] <Inst> ugh, i'm stuck with cabal, then
[19:41:33] <geekosaur> which is not minimizing challenge
[19:41:42] <monochrom> vsc is orthogonal to avoiding cabal and stack.  To avoid cabal and stack, either don't use any 3rd-party libraries or manually run Setup.hs per library.
[19:42:00] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[19:42:01] <[exa]> Inst: honestly, setting up a cabal package (using the guide linked above) is like 2539872345x less of a trick than trying vscode do it correctly
[19:42:15] <Inst> thanks for the help
[19:42:25] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:42:35] <Inst> i'm trying to set up a hack to get Haskell to be able to call native Windows file open / save windows
[19:42:45] <Inst> I'm suspecting fltkhs might not be able to do it, though
[19:43:21] <monochrom> Consider https://hackage.haskell.org/package/Win32
[19:43:49] <monochrom> or generally https://hackage.haskell.org/packages/search?terms=win32
[19:43:57] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:44:08] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:44:23] <[exa]> the open/save dialogs are not a part of any C-style winapi right?
[19:44:55] <EvanR> proper bindings to win API sounds like the right thing. But if you want hacks... write a normal windows program and control it from haskell using interprocess communication xD
[19:45:46] <EvanR> bonus it will work on not windows too, as soon as you implement the other native front ends
[19:46:57] <monochrom> Write a webapp. Then there is only one native front end. >:)
[19:47:22] <[exa]> Inst: if fltk fails, consider making a small C program with this library https://github.com/mlabbe/nativefiledialog
[19:47:27] <[exa]> and calling it from haskell via FFI
[19:47:39] <Inst> thanks exa, you're a lifesaver
[19:48:13] <Inst> exa: how did the Instagram filters go?
[19:48:26] *** Quits: aman (~aman@user/aman) (Ping timeout: 245 seconds)
[19:48:28] <Inst> I was also thinking: "use Haskell to strip DRM from obsolete CDs"
[19:48:45] <Inst> or "use Haskell, with or without the assistance of a finance export / prof, to do stock market analysis"
[19:48:50] <Inst> those are both practical and interesting
[19:48:51] <[exa]> it was kinda too specific, we went with something different at the end
[19:49:09] <Inst> as long as it works out
[19:49:19] <[exa]> too much time for tuning the filters and from haskell-side the assignment is not really challenging
[19:49:31] <Inst> the reason I need Haskell with a file open / shut hack is so I can try to teach my fellow non-programmer friend
[19:49:47] <Inst> Haskell with early IO
[19:50:19] <EvanR> define early IO
[19:51:21] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:52:28] <Inst> main = do -> random stuff in monad-land without explaining monads -> how2io -> typeclasses, expressions, recursion, lists, etc
[19:53:01] *** Quits: aqua0210 (~user@101.85.11.168) (Ping timeout: 245 seconds)
[19:53:20] <Inst> i need to keep her engaged so she doesn't run off to Python
[19:53:25] <Inst> which she threatens to do
[19:53:33] <EvanR> oh yeah... sounds helpful to have some magic IO actions that just do stuff
[19:53:59] <Inst> "in media res"
[19:54:14] <EvanR> pickFile :: IO Filepath
[19:54:16] <EvanR> xD
[19:54:45] <Inst> you're being sarcastic, right?
[19:54:58] <EvanR> no?
[19:55:16] <Inst> thanks
[19:56:01] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[19:56:11] <Inst> the idea is that IO makes everything practical now, you see immediate results, the build-up of understanding and skill via theory is immediately useful because the theory etc immediately gets translated back to practical results
[19:56:16] <Inst> therefore, no running off to Pythonland
[19:56:28] <Lycurgus> geekosaur, you cheeky debbil i just realized you pm'ed me without notice was the thing to be suppressed so soto voce?
[19:56:51] <Lycurgus> and how is quietism gonna work?
[19:57:23] <geekosaur> mostly hoping the whole thing would blow over faster if not publicly restarted
[19:57:57] <Lycurgus> illogical to think doing nothing will cause the desired result
[19:58:12] <Inst> moreover, I asked someone for a monad tutorial a while back, they suggested the best way to learn it is to run around without monads until you accidentally implement it yourself
[19:58:25] <Inst> Lycurgus: you know what's the easiest way to kill someone?
[19:58:29] <Lycurgus> doing stuff behind the scenes, yeah
[19:58:43] <Lycurgus> Inst, no what?
[19:58:50] <Inst> eat doritos
[19:58:51] <Inst> drink beer
[19:58:55] <Inst> watch TV, go on with your everyday life
[19:59:04] <EvanR> yes the monad tutorial fallacy
[19:59:06] <Inst> eventually that someone will drop dead of hopefully natural causes
[19:59:12] <Lycurgus> i c
[19:59:18] <Inst> you're in their light cone
[19:59:25] <Inst> technically you're a causative actor in the most minimal way possible
[19:59:31] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[19:59:32] <Inst> so no, doing nothing is not illogical
[19:59:39] <Lycurgus> and the death will be attributed to covid prolly
[19:59:54] <Inst> 无为
[20:00:06] <EvanR> Inst I think you're on the right track
[20:00:10] <monochrom> It is OK to learn and use IO without bringing up the monad generality.
[20:00:13] *** Quits: lyxia (~lyxia@poisson.chat) (Quit: WeeChat 3.2)
[20:00:18] <EvanR> ^
[20:00:27] *** Joins: lyxia (~lyxia@poisson.chat)
[20:00:35] <Inst> whitington does something similar, i.e, he teaches how to use either, maybe, and io
[20:00:39] <Inst> without going into monads
[20:01:02] <monochrom> People have already learned and are using numbers without ring field generality. Heck most of them haven't even heard of Peano axioms.
[20:01:03] <Inst> he says it's for another book, but i feel sufficiently functional (small f) without it
[20:01:09] <EvanR> if they're a complete beginner, then they won't even want to get into monad memes with you
[20:01:18] * Lycurgus abhors all mysticism and religion, taoism and quietism are no exceptions
[20:01:18] <Inst> I just feel hungry for burritos
[20:01:29] <Inst> Taoism -> philosophical and religious elements
[20:01:31] <Inst> but offtopic
[20:01:37] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[20:01:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[20:01:44] <maerwald> best way to get into monads is to see what you can't do with applicative
[20:02:12] <EvanR> and applicative requires first explaining or demonstrating Functor, which is a lot more useful anyway xD
[20:02:34] <Lycurgus> or be super reductionist and say it's just a damn datastruce hs weenies use to get referential transparency
[20:02:35] *** Joins: aqua0210 (~user@101.85.11.168)
[20:02:46] <EvanR> no don't
[20:02:51] <monochrom> That is false.
[20:02:53] <Lycurgus> *data structure
[20:03:08] <Lycurgus> yeah it's a lil more than just reductionist
[20:03:22] <monochrom> Unless you decide to classify the X->Y type as a data structure too.
[20:03:40] <Lycurgus> but only wrong by a detail
[20:04:18] <EvanR> since X->Y is a negative type, perhaps you could classify it as a negative data structure xD
[20:05:17] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:05:21] <maerwald> what do monads have to do with referential transparency?
[20:05:41] <hpc> here's a fun math game: combine related concepts to create the most confused terminology possible
[20:05:51] <hpc> X is negative in X -> Y, but also X -> Y = Y ** X
[20:05:58] <hpc> so in exponentiation, the value on the right is negative
[20:06:24] *** Joins: mrkrktsn1ctcrpt (~mrkrktsnd@50.228.44.6)
[20:06:30] <hpc> @let negate x = (** x)
[20:06:32] <lambdabot>  Defined.
[20:07:25] <geekosaur> isn't that going to collide with Prelude negate?
[20:07:30] <hpc> :P
[20:08:53] *** Quits: mrkrktsndctcrpt (~mrkrktsnd@50.228.44.6) (Ping timeout: 256 seconds)
[20:09:24] <EvanR> when two negates collide, the result is a positive
[20:09:46] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[20:13:59] *** Quits: mrkrktsn1ctcrpt (~mrkrktsnd@50.228.44.6) (Ping timeout: 256 seconds)
[20:16:08] *** Joins: tfeb (~tfb@88.98.95.237)
[20:18:05] <xerox> > negate it
[20:18:07] <lambdabot>  error:
[20:18:07] <lambdabot>      • Variable not in scope: it
[20:18:07] <lambdabot>      • Perhaps you meant one of these:
[20:19:32] <Lycurgus> lambdabot doesn't have prelude?
[20:20:00] <Lycurgus> or the same error processing as ghci igess
[20:21:21] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[20:23:26] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[20:24:41] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:24:58] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[20:25:46] *** Joins: zaquest (~notzaques@5.128.210.178)
[20:26:12] *** Quits: fendor (~fendor@178.165.196.101.wireless.dyn.drei.com) (Remote host closed the connection)
[20:28:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:30:06] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[20:30:48] *** Joins: fendor (~fendor@178.165.196.101.wireless.dyn.drei.com)
[20:30:54] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:31:26] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[20:34:49] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[20:35:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[20:37:28] *** Joins: mrkrktsndctcrpt (~mrkrktsnd@mobile-166-171-248-94.mycingular.net)
[20:41:46] <geekosaur> Lycurgus, it's not ghci, no. it used to expose a variable that worked not quite like "it" but it got abused
[20:42:45] <hpc> yahb is ghci
[20:42:47] <hpc> % it
[20:42:48] <yahb> hpc: ()
[20:43:09] <hpc> you even get to execute IO
[20:43:56] *** Joins: mastarija (~mastarija@2a05:4f46:e06:ff00:18c4:3126:ef80:d743)
[20:46:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[20:46:52] <Lycurgus> % negate it
[20:46:52] <yahb> Lycurgus: ; <interactive>:2:1: error:; * No instance for (Num ()) arising from a use of `negate'; * In the expression: negate it; In an equation for `it': it = negate it
[20:47:18] <Lycurgus> whatever repl i have stacked suggests id from prelude
[20:48:14] <Lycurgus> 'foolish consistency is the hobgoblin of small minds'
[20:50:34] *** Joins: v01d4lph4 (~v01d4lph4@122.177.85.95)
[20:50:34] *** Quits: v01d4lph4 (~v01d4lph4@122.177.85.95) (Changing host)
[20:50:34] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[20:50:42] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[20:50:46] <hpc> i prefer consistent foolishness
[20:51:18] <monochrom> I don't see a foolish consistency there.
[20:51:24] <monochrom> Foolish spell-checking, maybe.
[20:52:18] <Lycurgus> no here it would be a foolish expectation of consistency
[20:52:37] *** Joins: aleator (~aleator@87-93-222-114.bb.dnainternet.fi)
[20:53:10] *** Quits: aqua0210 (~user@101.85.11.168) (Ping timeout: 260 seconds)
[20:53:23] *** Joins: econo (uid147250@user/econo)
[20:53:33] <monochrom> I guess I have a foolish expectation of accurate wording, too.
[20:54:31] <monochrom> Now Inst is going to breathe "the accuracy that can be accurated is not the real accuracy" down my throat :)
[20:54:48] <Inst> um, what, it's just noumenon vs phenomenon
[20:55:06] <Inst> we try to get as close as we can to the actual reality, but the actual reality is unreachable
[20:55:30] <Inst> good enough, back to work, have a beer after you're done
[20:55:32] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 268 seconds)
[20:55:34] <Inst> don't be a pedant
[20:55:42] *** Joins: fuzzypixelz (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[20:56:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:58:10] <Lycurgus> copilot suggests "= "/" ++ it 
[20:58:43] <Lycurgus> "
[21:00:31] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[21:01:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[21:01:34] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:02:05] *** Quits: robertfry (~robertfry@cosh-19-b2-v4wan-161499-cust683.vm10.cable.virginm.net) (Quit: Konversation terminated!)
[21:02:34] *** Quits: mrkrktsndctcrpt (~mrkrktsnd@mobile-166-171-248-94.mycingular.net) (Ping timeout: 260 seconds)
[21:03:27] *** Quits: ulvarrefr (~user@185.24.53.152) (Read error: Connection reset by peer)
[21:03:34] *** Joins: ulvarrefr (~user@185.24.53.152)
[21:05:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:08:20] *** Quits: aleator (~aleator@87-93-222-114.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[21:10:09] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:10:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[21:13:05] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[21:13:36] *** Joins: Pickchea (~private@user/pickchea)
[21:15:23] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 264 seconds)
[21:18:30] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[21:18:53] *** Joins: aqua0210 (~user@101.85.11.168)
[21:19:48] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[21:20:13] *** Joins: Guest|10 (~Guest|10@70-36-136-248.dsl.dynamic.fusionbroadband.com)
[21:21:05] *** Quits: Guest|10 (~Guest|10@70-36-136-248.dsl.dynamic.fusionbroadband.com) (Client Quit)
[21:21:15] *** Joins: hiruji (~hiruji@user/hiruji)
[21:24:15] *** Quits: aqua0210 (~user@101.85.11.168) (Ping timeout: 256 seconds)
[21:25:57] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 256 seconds)
[21:29:00] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:29:07] <tomjaguarpaw> Anyone know where there isn't a  ShowTypePrec  or ShowTypeParens  for  TypeError ?  Looks like I have to either tolerate  MyConstructor (Int)  or  MyConstructor Just a
[21:31:40] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[21:35:14] *** Joins: aqua0210 (~user@101.85.11.168)
[21:36:27] *** Quits: jess (~jess@libera/staff/jess) ()
[21:39:43] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[21:41:47] *** Quits: aqua0210 (~user@101.85.11.168) (Ping timeout: 268 seconds)
[21:43:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:43:35] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[21:44:40] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[21:53:28] *** Quits: msmhnd^ (~msmhnd@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[21:54:43] *** Joins: aqua0210 (~user@101.85.11.168)
[22:00:06] *** Quits: aqua0210 (~user@101.85.11.168) (Ping timeout: 245 seconds)
[22:04:19] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:06:24] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[22:06:48] *** Joins: hololeap (~hololeap@user/hololeap)
[22:08:03] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:08:39] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[22:10:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Remote host closed the connection)
[22:11:18] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:12:01] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[22:13:02] *** Joins: aqua0210 (~user@101.85.11.168)
[22:14:40] *** Joins: hiruji (~hiruji@user/hiruji)
[22:16:11] <hololeap> anyone know of a library for normalizing inequalities?
[22:16:30] <awpr> type-level Nat inequalities?
[22:16:43] <hololeap> no, just any Ord
[22:17:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:17:52] <hololeap> for instance, if I have a set of inequalities on Int, [>=4, <8, >5, <6], it would find the smallest set of inequalities that satisfy all those: [>5, <6]
[22:18:09] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[22:18:10] *** Quits: aqua0210 (~user@101.85.11.168) (Ping timeout: 260 seconds)
[22:18:33] <awpr> hmm, I don't know of a library specifically for that, but you might be able to find an interval library that could do it with left-infinite and right-infinite intervals
[22:19:33] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:20:05] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[22:22:01] *** Parts: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (ERC 5.4 (IRC client for GNU Emacs 28.0.60))
[22:22:42] *** Joins: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net)
[22:24:42] <hololeap> this doesn't really match what I'm asking for, but seems interesting: https://hackage.haskell.org/package/speculate
[22:25:10] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Ping timeout: 260 seconds)
[22:27:34] <hololeap> awpr: can you give an example of how intervals are relavant to my question? I'm not too familiar with the math terms behind it, so it might be helpful to me finding what I'm looking for.
[22:28:32] *** Joins: chisui (~chisui@dyndsl-095-033-149-191.ewe-ip-backbone.de)
[22:28:38] <EvanR> so you want to merge all the half open intervals to get a two sided interval, but also track the difference between < and <=
[22:28:41] <geekosaur> >=4 is 4–inf, for example. then use an interval library that can find the smallest (resp. largest) bounding interval for all of your intervals
[22:30:02] <EvanR> if it's integers you could simplify to only <='s
[22:30:12] <geekosaur> and then translate back to comparisons
[22:30:47] *** Parts: ees (~ees@pool-108-18-30-46.washdc.fios.verizon.net) (Killed buffer)
[22:31:21] *** Quits: chisui (~chisui@dyndsl-095-033-149-191.ewe-ip-backbone.de) (Client Quit)
[22:31:28] <hololeap> ok
[22:32:37] <hololeap> this is going to be for parsing package versions from various PMSs, so it will likely be a (NonEmpty Natural) value for the comparisons
[22:33:07] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (Quit: WeeChat 3.3)
[22:33:56] <hololeap> but that makes sense, smallest bounding interval
[22:35:27] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[22:37:14] <hololeap> hm, I might also want to normalize versions, for instance 5.0.0 = 5 (for this purpose)
[22:38:10] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:38:14] <geekosaur> that might not work so well in the presence of a version like 5.0.12
[22:38:42] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[22:39:16] <hololeap> this is going to be for normalizing version range dependencies
[22:39:23] <hololeap> so >5.0.0 = >5
[22:39:32] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[22:40:32] <hololeap> >5.0.12 /= >5
[22:40:49] *** Joins: neurocyte0132889 (~neurocyte@45.10.61.172)
[22:40:49] *** Quits: neurocyte0132889 (~neurocyte@45.10.61.172) (Changing host)
[22:40:49] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:43:47] *** Joins: zzz (~z@user/zero)
[22:43:50] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[22:45:35] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:45:48] *** Joins: mrkrktsndctcrpt (~mrkrktsnd@c-24-6-12-87.hsd1.ca.comcast.net)
[22:47:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:50:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[22:51:04] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:54:24] <zzz> @def newtype N = N Int
[22:54:25] <lambdabot>  Defined.
[22:54:29] <zzz> @def sup (N x) = ("sup",x)
[22:54:30] <lambdabot>  Defined.
[22:54:34] <zzz> > fst $ sup undefined
[22:54:35] <lambdabot>  "sup"
[22:55:10] <zzz> this patternmatches because the newtype "doesn't really exist" right?
[22:55:37] <dolio> Something like that.
[22:56:54] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[22:57:03] <zzz> somehow i feel like there's something more to say
[22:57:09] <tomjaguarpaw> zzz: No, why?  If you defined it as  data  you'd get the same behaviour
[22:57:28] <dolio> No, with data you'd get undefined.
[22:57:46] <hololeap> "sup" is a literal so it doesn't need the value of x
[22:57:47] <tomjaguarpaw> Oh yes, so you would
[22:58:28] <dolio> You can also imagine that ~ is the default mode for newtype patterns.
[22:58:31] <tomjaguarpaw> Right, so the  N  pattern doesn't actually force anything whereas the  D  pattern would
[22:59:08] <c_wraith> zzz: the best way to think of it is that matching a newtype constructor is a coercion.  Matching a data constructor is evaluation.
[23:00:02] <zzz> right
[23:00:44] <dolio> zzz: Sometimes you can observe incidental consequences of wrapping things in a newtype.
[23:01:09] <dolio> Like, if you have polymorphic stuff in a newtype, it might cause an eta expansion that makes something non-bottom.
[23:01:35] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[23:01:38] <zzz> can you provide an example of that?
[23:01:46] <dolio> No, I don't remember an example. :)
[23:02:44] <hololeap> I don't understand either, dolio
[23:02:58] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[23:03:45] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:04:42] *** Joins: aqua0210 (~user@101.85.11.168)
[23:05:06] <c_wraith> @let newtype F = F (forall f. Functor f => () -> f ())
[23:05:07] <lambdabot>  Defined.
[23:05:10] <dolio> The type was like `newtype N = N (forall a. <something>)`, and somehow it was possible that the generalization step caused by `N e` made an undefined expression `e` get expanded into something more like `\_ -> undefined`.
[23:05:15] <c_wraith> > seq (F undefined) ()
[23:05:16] <lambdabot>  ()
[23:05:22] <c_wraith> just like that
[23:05:26] <dolio> Oh, nice.
[23:05:37] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[23:06:03] *** Joins: max22- (~maxime@2a01cb0883359800ab19ff1ba7c64c00.ipv6.abo.wanadoo.fr)
[23:06:05] <tomjaguarpaw> Interesting
[23:06:09] <c_wraith> and yeah, that's eta expansion biting
[23:06:36] <dolio> Yeah, the newtype still 'doesn't exist', but the generality of the type it corresponds to might have semantic consequences.
[23:07:10] <dolio> And might force generalizing something that wouldn't otherwise be generalized.
[23:07:24] *** Joins: FragByte (~christian@user/fragbyte)
[23:07:33] <c_wraith> It requires the class constraint
[23:07:47] <c_wraith> So it has something to do with dictionary passing in the internal representation
[23:07:52] <tomjaguarpaw> newtype F = F (forall f. f ()) shows the same behaviour
[23:07:54] <hololeap> what _should_ happen in that example, c_wraith?
[23:08:08] <tomjaguarpaw> Err sorry, I mean  newtype F = F (forall f. Functor f => f ())
[23:08:08] <c_wraith> tomjaguarpaw: huh, not for me.  ghc 9.2.1 on my side
[23:08:26] <c_wraith> tomjaguarpaw: wait, no.  That's not a function, so it doesn't get eta expanded.
[23:08:36] <c_wraith> I tested with (forall f. () -> f ())
[23:08:47] <c_wraith> that gives an exception
[23:08:58] <tomjaguarpaw> Not sure if you've seen my correction
[23:09:01] <c_wraith> ah, right.
[23:09:11] <c_wraith> definitely has to do with the dictionary-passing in core
[23:09:14] <tomjaguarpaw> and indeed  newtype F = F (forall a. Num a => a)
[23:09:16] <tomjaguarpaw> Yes I agree
[23:09:19] <c_wraith> that must cause eta expansion
[23:09:32] <c_wraith> hololeap: naively, you'd expect to get an exception from evaluating undefined
[23:09:59] *** Quits: aqua0210 (~user@101.85.11.168) (Ping timeout: 268 seconds)
[23:10:09] <hololeap> so the compiler has no idea that (forall f. Functor f => () -> f ()) doesn't make sense
[23:10:53] <c_wraith> nope.  that's irrelevant
[23:10:58] <hololeap> I suppose it wouldn't, since that's a result of what Functor means semantically, vs Applicative
[23:12:09] <hololeap> e.g. there is no pure defined for Functor, so no function could satisfy that type, unless it was also an Applicative
[23:12:19] <tomjaguarpaw> OK this is weird.  Consider  seq (F (undefined :: forall a. Num a => a)) () .  It is undefined with  newtype F a = F a  but defined with  newtype F = F (forall a. Num a => a) .
[23:12:22] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:13:30] <c_wraith> huh.  I didn't expect that.
[23:13:31] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[23:14:27] <awpr> we actually just talked about the reason for this in the FP discord: `Functor f => ...` is a function value once you get down to Core
[23:14:50] <hpc> what if there isn't a class constraint?
[23:14:53] <c_wraith> that doesn't explain the last thing tomjaguarpaw mentioned.  At least, not completely
[23:14:59] <awpr> yeah, getting to that
[23:15:31] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[23:15:32] <awpr> GHC wouldn't instantiate `F` impredicatively, so the former one is just `F a` for some `a`, and not constrained
[23:15:47] <awpr> probably defaults it to `Integer`
[23:16:15] <awpr> in the latter, the contents of the newtype are actually a type with a constraint, no need to infer impredicativity
[23:16:57] <hololeap> what was the library that was termed "a better ListT"
[23:17:03] <tomjaguarpaw> streaming?
[23:17:04] <geekosaur> logict?
[23:17:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[23:17:17] <hololeap> logict
[23:17:46] <[exa]> परोलोग
[23:18:06] <[exa]> whoops what happened there. I wanted to write "prolog".
[23:18:34] <hololeap> sanskrit?
[23:18:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[23:19:08] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:21:06] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[23:23:07] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:23:27] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[23:23:49] *** Joins: euandreh (~euandreh@2804:14c:65c9:5161:4d0f:6b02:d329:b5d2)
[23:26:24] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:26:46] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[23:28:00] <hololeap> ok, so I'm looking at my problem where a version inequality for a package can be normalized where >5.0.0.... = >5, but >5.0.0.0.0.1 /= >5
[23:28:19] <hololeap> so this looks like a depth-first search with backtracking. how can I use logict here?
[23:28:38] *** Quits: pgib (~textual@173.38.117.89) (Ping timeout: 260 seconds)
[23:28:55] <dolio> If you just use it normally like a list, it'll be depth-first.
[23:29:17] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Quit: ZNC 1.8.2 - https://znc.in)
[23:29:30] <dolio> For the same reason that list is depth first. LogicT is essentially an encoded list.
[23:29:35] <hololeap> I haven't ever used it, normally or not, because I haven't had a use-case since I discovered it
[23:29:41] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[23:30:16] <dolio> The only way it'll do things out of order is if you use the additional combinators in the package, like `interleave` or >>-.
[23:30:52] <dolio> What I mean is that if you use it the way you'd use list monad stuff for DFS.
[23:31:11] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[23:31:28] <hololeap> ok, so what I don't understand is what is how it is used for "backtracking"
[23:32:03] <hololeap> s/is what is how/is how/
[23:32:54] <dolio> The same way list is used for backtracking. `x <- [1,2,3]` essentially tries the rest of the computation with `1`, and gives all results, then gives all the results you'd get by using `2`, etc.
[23:33:25] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:33:48] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:34:02] <geekosaur> that's natural for lists. ^^ and at some point you either get an answer involving the whole list (and get another if you continue), or a sublist fails (produces [] instead of the rest of the list) and it gets retried with the next list item
[23:35:10] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 260 seconds)
[23:35:15] <hololeap> so, by the nature of list, you have to have seen the first element to see the second, and so on, and so you could have cached that value somewhere, allowing you to backtrack to the first value ... is that about right?
[23:35:21] *** Joins: retro_ (~retro@2e41e9c8.skybroadband.com)
[23:35:26] <geekosaur> mhh, if logs were still running I'd point you to ski's discussion last night my time
[23:35:57] <geekosaur> you don't need to do caching, the list monad (or, here, LogicT) does it automatically
[23:36:44] *** Joins: juhp (~juhp@128.106.188.220)
[23:37:00] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[23:37:11] <dolio> If you ask for the first answer/head of the list, what you will get will be the result of 'backtracking' whenever some branch results in the empty list.
[23:37:20] *** Joins: mrkrktsn1ctcrpt (~mrkrktsnd@c-24-6-12-87.hsd1.ca.comcast.net)
[23:37:31] <dolio> Becasue there will be 0 results from that branch, so to get any result, you must use another branch.
[23:38:32] <dolio> And the order of results is depth-first in the sense that it runs the entire rest of the computation for each choice point before considering the next value at that point.
[23:38:57] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[23:39:18] <hololeap> ok, so we're specifically talking about the list monad, ([a] -> (a -> [b]) -> [b]), here?
[23:39:47] <dolio> That and LogicT both work essentially the same way.
[23:40:12] <dolio> Except LogicT uses a better behaved implementation for certain uses.
[23:40:22] <hololeap> so when the function `f :: a -> [b]` returns [], it naturally falls back to the previous element?
[23:40:50] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[23:41:06] <hololeap> because something else after it is still looking for a `b`?
[23:41:46] <dolio> Right, because it's concatMap. [1,2,3] >>= f = f 1 ++ f 2 ++ f 3.
[23:41:48] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[23:42:15] <geekosaur> "backtracking" is actually a mischaracterization. it produces all possible values, but it does so lazily at all levels, so it *looks* like backtracking
[23:42:17] <hololeap> I'm still lost on how any of this is backtracking
[23:42:31] <hololeap> oh
[23:43:15] <dolio> Yeah, lazy evaluation makes lists act like backtracking computationally.
[23:43:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[23:43:22] <dolio> LogicT does it with continuation passing.
[23:43:26] <hololeap> actually, I did write something that used this for an n-queens problem on some programming challenge thing, but I don't think I fully understood how it worked
[23:43:41] *** LiaoTao_ is now known as LiaoTao
[23:44:00] <ski> geekosaur : what's the difference ?
[23:45:22] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:45:31] <geekosaur> not sure there is one, tbh. I haven't fully followed a computation through the list monad to see how it behaves, but I feel like there is no literal backtracking, each level is just continuing its computation regardless of what lower levels do and if those happen to fail, you get nothing from them
[23:45:50] *** Joins: burnsidesLlama (~burnsides@dhcp168-023.wadham.ox.ac.uk)
[23:46:08] <geekosaur> and laziness means if you ask for only one result, it'll just stop and discard the whole computation after producing it
[23:46:17] <ski> hololeap : "you could have cached that value somewhere, allowing you to backtrack to the first value" -- iiuc, that's not what "backtracking" refers to. rather, it's about the retracing of your steps down a path in the search tree, up to a branch point where you now instead try to go down a different path
[23:48:36] <geekosaur> I could see this as different from backtracking, or as a "laziness implementation" of backtracking, or as semantic fiddling to no point
[23:49:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[23:51:15] *** Joins: pavonia (~user@user/siracusa)
[23:52:01] <ski> "each level is just continuing its computation regardless of what lower levels do and if those happen to fail, you get nothing from them" -- which gives you the behaviour of backtracking, afaiac
[23:52:59] <ski> sure, it's implemented differently than backtracking usually is, say in Prolog systems, or if you manually code it with loops in C or Pascal something
[23:53:29] <geekosaur> yeh, but I think a "conventional" view of backtracking expects that some information is propagated backwards to resume the previous level
[23:53:43] <geekosaur> whereas here it's just the natural behavior of a lazy list
[23:54:50] <dolio> Prolog does something better than depth-first backtracking search, right?
[23:56:41] <dolio> But, I don't really see why it wouldn't be considered backtracking, unless someone is adamant that you have to manually use mutation while keeping track of how to revert the mutable variables to older states or something.
