[00:01:26] <hyper_dave> Is anyone able to successfully build gollvm?
[00:01:37] <hyper_dave> And Is the project abandoned?
[00:02:25] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[00:03:39] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Client Quit)
[00:04:12] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[00:05:01] *** Quits: bluedust_ (~bluedust@117.217.146.23) (Remote host closed the connection)
[00:05:21] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[00:05:36] *** Joins: bluedust (~bluedust@117.217.146.23)
[00:08:21] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a929:4bcd:7cfe:7254)
[00:08:30] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[00:10:01] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 250 seconds)
[00:10:28] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[00:17:39] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 256 seconds)
[00:24:31] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[00:26:30] <bancroft> Is it possible to turn a string into an integer Unix file descriptor or is that the wrong way to go about it?
[00:27:37] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a929:4bcd:7cfe:7254) (Ping timeout: 256 seconds)
[00:31:47] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:35:34] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:35:50] <foobaz> yes, use os.NewFile()
[00:35:59] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[00:37:36] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:38:01] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[00:38:12] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[00:43:09] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[00:51:20] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:52:40] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[00:57:16] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Ping timeout: 250 seconds)
[00:59:39] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[01:06:37] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Ping timeout: 240 seconds)
[01:09:32] *** Quits: independent_ (~independe@2.26.38.138) (Quit: Leaving)
[01:11:04] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[01:15:27] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Ping timeout: 250 seconds)
[01:15:51] *** Joins: independent56 (~independe@2.26.38.138)
[01:24:59] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:9f6:3f45:7ebe:42bd)
[01:29:00] *** Joins: rcernin (~rcernin@101.189.141.138)
[01:31:05] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:9f6:3f45:7ebe:42bd) (Ping timeout: 256 seconds)
[01:31:57] *** Quits: fsoc_ (~shynerd@bras-vprn-toroon4834w-lp130-08-174-91-44-54.dsl.bell.ca) (Quit: leaving)
[01:38:12] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[01:41:45] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[01:43:33] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Ping timeout: 256 seconds)
[01:46:40] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[01:47:01] *** Quits: dingdreher (~dingdrehe@2a02:aa08:401e:fff2:a824:9afd:6d29:d02c) (Quit: dingdreher)
[01:50:51] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Remote host closed the connection)
[01:53:09] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[02:07:12] *** Joins: batdog (batdog@lnsq.elkins.co)
[02:09:37] *** Quits: ilpanda (ilpanda@user/ilpanda) (K-Lined)
[02:10:15] *** Joins: ilpanda (ilpanda@shell.xshellz.com)
[02:33:28] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 250 seconds)
[02:33:56] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[02:38:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:40:04] *** Joins: kinlo (~peter@user/kinlo)
[02:46:02] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 250 seconds)
[02:50:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:02:47] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[03:09:57] *** Joins: noarb (~noarb@user/noarb)
[03:14:34] *** Joins: prologic (~prologic@mail.mills.io)
[03:14:47] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[03:15:25] <prologic> Anyone with acme/autocert experience? How do I get Lets Encrypt certs with HTTP challenge working? Do I have to bind the server to both ports 80 and 443 or is there an simpler/easier solution?
[03:16:45] <prologic> I'm presently trying to do this https://git.mills.io/yarnsocial/yarn/pulls/785/files
[03:23:17] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[03:26:19] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[03:26:30] *** Quits: independent56 (~independe@2.26.38.138) (Quit: Leaving)
[03:31:17] *** Quits: mva_ (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[03:31:30] *** Joins: mva (znc@gentoo/developer/mva)
[03:32:59] <foobaz> yes, you need to bind to both 80 and 443
[03:33:42] <foobaz> personally, i use nginx as a reverse proxy for my go apps, so i configured the lets encrypt stuff in nginx instead of in go
[03:33:46] <prologic> Can't do some kind of HTTP -> HTTPS redirect?
[03:33:59] <prologic> The ACME HTTP-01 challenge states it ignores certificate validation
[03:34:17] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Ping timeout: 256 seconds)
[03:34:18] <foobaz> sure you can, but responding with a redirect on the HTTP port requires binding to the HTTP port
[03:34:49] <prologic> I should have mentioned I have Cloufflare in front of this
[03:34:59] <prologic> So was hoping to do the HTTP->HTTPS on the Cloufdlare side
[03:35:08] *** Joins: mickey82 (~user@user/mickey)
[03:35:18] <prologic> But maybe you're right, maybe I hsould build a full implemtnation instead of half of one :)
[03:35:39] <foobaz> does cloudflare have any let's encrypt integration? maybe you could do it all from there
[03:35:59] <prologic> No, but it does it's own cert handling on their side of course
[03:36:30] <prologic> but come to think of it. why am I even bothering here :)
[03:36:36] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[03:36:36] *** mickey82 is now known as mickey8
[03:37:02] <foobaz> it would be nice to have encryption between your server and cloudflare, to prevent eavesdropping
[03:37:12] <foobaz> but you could probably accomplish that with a self-signed cert
[03:37:46] <prologic> yes yes I see
[03:38:31] <prologic> Normally I do Cloudflare -> my infra -> my app(s) where my infra runs a Traefik ingress that does Let's Encrypt via DNS challenge
[03:38:48] <prologic> so it's fully e2e encrypted at the transport later all the way (except internally on my network)
[03:39:19] <prologic> Bt here I'm trying to go from Cloudflare -> some random Vultr VM (avoiding any complicated NGINX/Apache/ignress)
[03:42:07] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:44:11] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[03:53:45] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:58:16] <prologic> Any ideas why I'm getting: 2022/02/06 00:27:58 http: TLS handshake error from 162.158.162.18:56490: acme/autocert: missing certificate
[03:58:34] <prologic> I'm redirecting all HTTP->HTTPS from Cloudflare's side
[03:58:46] <prologic> And just setting up a single listener with acme/autocert
[04:04:55] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[04:10:17] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Ping timeout: 240 seconds)
[04:21:28] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[04:22:55] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[04:29:45] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[04:35:31] *** Quits: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net) (Quit: Connection closed)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:25] *** Joins: prologic (~prologic@mail.mills.io)
[04:47:34] <prologic> Okay I'm a bit stuck with this acme/atocert thing
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:43] <prologic> I keep seeing this on the server-side directly hitting the server with curl
[04:47:45] <prologic> 2022/02/06 01:17:01 http: TLS handshake error from 150.101.186.89:62641: acme/autocert: missing server name
[04:47:53] <prologic> e.g: $ curl -v -o - -H 'Host: demo.yarn.social' https://149.28.136.159:443/
[04:48:14] <prologic> Some googling suggests this has something to do with SNI?
[04:48:23] <prologic> But I'm not doing SNI? 🤔
[04:57:14] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:883e:6820:d7fb:1d3c)
[05:00:45] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[05:00:55] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[05:01:51] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:883e:6820:d7fb:1d3c) (Ping timeout: 250 seconds)
[05:04:23] *** Joins: Torr (~Torr@user/torr)
[05:05:53] *** Joins: ItsNotGoodName03 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[05:06:25] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[05:06:25] *** ItsNotGoodName03 is now known as ItsNotGoodName0
[05:07:31] <b0nn> prologic: there's a #letsencrypt that might be helpful
[05:07:56] <prologic> I think this is something I'm doing wrong though in Go
[05:08:01] <prologic> I can see half of the acme side working
[05:08:08] <prologic> key generated and token
[05:08:20] <prologic> I can't find any logging for the acme/autocert package either :/
[05:09:16] <b0nn> If you think it's a Go issue, post some code for people to see
[05:09:47] <b0nn> I've honestly been thinking that you were having trouble with letsencrypt
[05:10:14] <prologic> I did :)
[05:10:28] <prologic> https://git.mills.io/yarnsocial/yarn/pulls/785
[05:10:46] <prologic> Nah sorry, I think it's not a let's encrypt issue
[05:10:51] <prologic> I think this is a PEBKAC issue :)
[05:11:13] <prologic> I believe I'm doing something wrong in this patch (above) but I'm not sure what
[05:11:24] <b0nn> heh, sorry, I did look at that code before 0 I had forgotten
[05:11:50] <prologic> no worries :)
[05:12:00] <prologic> from all docs on this, this shouldn't be that hard :)
[05:15:46] <b0nn> lol, famous last words :)
[05:16:24] *** Quits: jakew (~jakew@91.110.109.236) (Quit: WeeChat 2.8)
[05:16:24] *** Quits: thatcher (~thatcher@91.110.109.236) (Remote host closed the connection)
[05:16:53] <prologic> tell me about it
[05:17:30] *** Joins: thatcher (~thatcher@91.110.109.236)
[05:20:35] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 256 seconds)
[05:28:30] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Quit: WeeChat 3.4)
[05:31:34] *** Joins: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de)
[05:37:34] *** Joins: rcernin (~rcernin@101.189.141.138)
[05:47:35] *** Joins: califax- (~califax@user/califx)
[05:48:36] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:51:09] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:51:09] *** califax- is now known as califax
[05:53:09] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:53:37] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 240 seconds)
[06:01:21] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[06:02:06] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[06:04:16] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[06:04:28] <prologic> Success!
[06:04:28] <prologic> https://demo.yarn.social/
[06:04:41] <prologic> (Cloudflare was/is fucking with me, I've taken it out of the path for now)
[06:05:37] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 240 seconds)
[06:05:49] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:08:03] *** Joins: bluedust (~bluedust@117.217.146.23)
[06:12:57] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 256 seconds)
[06:13:51] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[06:16:57] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[06:17:17] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:21:24] *** Quits: leonarth (~leonarth@user/leonarth) (Ping timeout: 250 seconds)
[06:25:21] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[06:30:21] *** Joins: yoonkn (~user@175.197.208.79)
[06:37:48] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[06:39:31] *** Joins: LiftLeft (~LiftLeft@187.170.244.154)
[06:41:24] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[06:52:54] *** Quits: lilgopher (~textual@2601:241:8000:38f0:e564:312d:a7a1:2956) (Quit: Textual IRC Client: www.textualapp.com)
[06:55:37] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:56:35] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[07:01:17] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[07:05:02] *** Joins: R2robot (~R2robot@user/r2robot)
[07:13:21] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:25:48] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:29:56] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[07:39:03] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[07:43:20] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[07:48:55] *** Joins: rabbit- (rabbit-@119-18-29-214.77121d.mel.static.aussiebb.net)
[07:48:56] <ska> https://go.dev/play/p/Yjkyiw717bb  How do I put in a channel signal to kill this type thing?
[07:49:48] <ska> Also, is this a good way to start 2 services that run together?
[07:50:23] *** Joins: bindu (~bindu@user/bindu)
[07:51:13] <ska> I want to update the data structure in one routine, and have  REST api in the other to access the data.
[07:55:52] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[07:57:11] *** Joins: fef (~thedawn@user/thedawn)
[07:57:41] <foobaz> ska: here's how i would do it https://go.dev/play/p/lJjf7QnbTon
[07:58:56] *** Joins: garbageman (~garbagema@67-61-67-61-242-8.cpe.sparklight.net)
[07:59:36] <foobaz> to make it even better, you could put the timer in the select too
[07:59:53] <foobaz> that way you don't need to wait for the sleep to finish before quitting, it could quit immediately
[08:00:37] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 240 seconds)
[08:02:08] <ska> foobaz: does that make the code easier to maintain?
[08:02:31] <ska> It makese sense tthat each method has a stopping mechanism to me.
[08:02:41] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[08:02:51] <foobaz> i don't think it has an effect on maintainability
[08:03:21] <foobaz> yea i agree that the stopping mechanism should be duplicated
[08:03:44] <ska> ok.. Where does the stop signal come from?
[08:03:58] <foobaz> close(doneChannel)
[08:04:15] <ska> What triggers that, a kill signal?
[08:04:31] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[08:04:42] <foobaz> i call it 1 second after starting the goroutines, to give them some time to print something
[08:04:56] *** Quits: garbageman (~garbagema@67-61-67-61-242-8.cpe.sparklight.net) (Read error: Connection reset by peer)
[08:05:11] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[08:05:34] <ska> foobaz: I don't understand the use of the struct{}
[08:05:44] <ska> Can you elaborate on that?
[08:05:45] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[08:05:49] <foobaz> if you're familiar with C, it's equivalent to C's void
[08:05:56] <foobaz> it's a 0 byte type
[08:06:11] <foobaz> the smallest, simplest type, because it's not used
[08:06:34] <foobaz> the code would work equally well with any other type, because nothing is ever sent or received on the channel
[08:07:11] <foobaz> my code relies on the fact that a closed channel is always ready to receive
[08:07:34] <foobaz> so the select will never trigger before the channel is closed, and will always trigger after it's closed
[08:08:25] <foobaz> if you want to quit on a kill signal, like SIGINT, there's a good example of that in the signal.Notify() documentation
[08:08:28] <foobaz> https://pkg.go.dev/os/signal#Notify
[08:12:35] <ska> TY!
[08:13:09] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[08:22:32] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[08:34:47] <ska> Why not just kill the main() method instead with a signal?
[08:35:02] <ska> Will that leave the methods hung?
[08:35:07] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:f0bb:ba39:2c04:e85)
[08:35:45] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 256 seconds)
[08:36:25] <foobaz> no, it will kill the whole program, but the methods might get stopped in the middle of what they're doing, like halfway through a write or something
[08:36:47] <foobaz> depending on what you're doing, that might be fine, or you might need to wait for them to finish so you can quit cleanly
[08:38:01] *** Joins: rcernin_ (~rcernin@101.189.141.138)
[08:38:46] <ska> https://stackoverflow.com/questions/66849378/golang-clean-shutdown-on-signal-interrupt has something too
[08:40:03] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:f0bb:ba39:2c04:e85) (Ping timeout: 250 seconds)
[08:40:38] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[08:43:17] <foobaz> if you want to clean shutdown on SIGINT, you can combine the signal.Notify example with my doneChannel code
[08:43:41] <foobaz> when you receive the signal on the channel, close doneChannel
[08:43:50] <foobaz> so two different channels
[08:56:34] *** Joins: masoudd (~masoudd@user/masoudd)
[08:58:39] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Ping timeout: 256 seconds)
[09:01:01] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Remote host closed the connection)
[09:01:02] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:01:16] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[09:01:46] <ska> https://go.dev/play/p/y8Z1AVfyesv is what I currently have.
[09:03:37] <foobaz> i think you want something more like this https://go.dev/play/p/VAn1M38o-27
[09:03:50] <foobaz> i only changed the part in the go func() inside main
[09:05:26] <ska> Nice.. Ty.. I was getting sleepy looking at it.. I still don't understand it 100%.
[09:06:13] <ska> Works great now.
[09:06:39] <ska> I see alot of posts about moving to the new fancy "context" way.
[09:07:34] <ska> Its kinda cool that you can start such lightweight services like this.
[09:07:57] <foobaz> take a look at this, this is the timer channel i was talking about earlier https://go.dev/play/p/zoj62k8Zivo
[09:08:17] <foobaz> this way it quits instantly instead of waiting for the sleep to finish
[09:10:15] *** Joins: boof (~rickybob@35.143.255.39)
[09:10:17] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[09:11:55] <ska> I was looking at that earlier.. I'll integrate that too ;)
[09:12:01] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[09:14:15] <ska> foobaz: thanks for sharing all this..
[09:21:20] <foobaz> np
[09:22:43] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[09:22:56] *** Joins: mickey8 (~user@user/mickey)
[09:29:03] *** Joins: jpw (~jpw@user/jpw)
[09:30:51] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[09:35:45] *** Joins: bindu (~bindu@user/bindu)
[09:42:28] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:f141:ba0b:da0:3c4d) (Ping timeout: 250 seconds)
[09:53:18] *** Joins: Everything (~Everythin@37.115.210.35)
[09:59:57] *** Joins: sgen (~sgen@2607:fea8:7ce1:c8e0::7a7b)
[10:10:23] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Remote host closed the connection)
[10:12:16] *** Quits: rcernin_ (~rcernin@101.189.141.138) (Quit: WeeChat 3.4)
[10:12:19] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 256 seconds)
[10:13:25] *** Joins: jpw (~jpw@user/jpw)
[10:23:10] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:28:59] *** Joins: thechadgod[m] (~thechadgo@2001:470:69fc:105::1:a1e2)
[10:38:29] *** Quits: normen (~normen@p200300d717235c00d1876df7519e3614.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:41:29] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[10:49:32] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[10:49:54] *** Joins: mickey8 (~user@user/mickey)
[11:05:37] *** Joins: normen (~normen@pd9eec481.dip0.t-ipconnect.de)
[11:05:40] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[11:08:25] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Max SendQ exceeded)
[11:08:47] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[11:11:01] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[11:12:29] *** Joins: edd_lc (~edd_lc@bzq-155-40.red.bezeqint.net)
[11:13:57] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[11:14:41] *** Joins: bindu (~bindu@user/bindu)
[11:16:23] *** Joins: bancroft (~bancroft@user/bancroft)
[11:19:32] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:20:39] *** Quits: edd_lc (~edd_lc@bzq-155-40.red.bezeqint.net) (Ping timeout: 256 seconds)
[11:20:53] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 256 seconds)
[11:27:07] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[11:29:05] *** Joins: bluedust (~bluedust@117.217.146.23)
[11:39:01] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:55:15] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:01:23] *** Quits: dr0n (~nabromov@176.26.119.61) (Quit: WeeChat 3.3)
[12:06:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[12:06:05] *** Joins: edd_lc (~edd_lc@bzq-155-40.red.bezeqint.net)
[12:07:23] *** Joins: leonarth (~leonarth@user/leonarth)
[12:10:36] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Quit: Leaving)
[12:14:39] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[12:17:43] *** Joins: mertyildiran (~mertyildi@157.230.123.143)
[12:17:55] *** Joins: bindu (~bindu@user/bindu)
[12:18:04] <mertyildiran> How can I get coverage dump for integration tests? I build a binary (written in Go) which serves HTTP endpoints and then I test those endpoints using a separate script. Such that I would like to know what lines in that binary are executed.
[12:19:49] *** Quits: edd_lc (~edd_lc@bzq-155-40.red.bezeqint.net) (Ping timeout: 256 seconds)
[12:20:31] *** Joins: mrig (~mrig@user/mrig)
[12:22:16] *** Quits: ilpanda (ilpanda@shell.xshellz.com) (Changing host)
[12:22:16] *** Joins: ilpanda (ilpanda@user/ilpanda)
[12:23:33] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[12:25:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:31:22] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[12:31:28] *** Joins: mickey85 (~user@user/mickey)
[12:34:28] *** Joins: davzie (sid504337@id-504337.ilkley.irccloud.com)
[12:35:32] <davzie> Can someone explain this page to me: https://gobyexample.com/closures
[12:35:34] <davzie> For example, I’m not sure about `func intSeq() func() int {` - How can it be returning both a function and an integer when the return is just the function. I know the function being returned returns an int but it doesn’t do that until it’s actually invoked so I’m confused why it has to be part of the return signature of the parent method.
[12:36:10] <davzie> In PHP for example, I would be defining a return type here of just “closure” for the parent function since I’m actually only returning one thing, the closure, regardless of what that closure actually returns itself
[12:36:27] <davzie> Is this different in Go? If you return a closure do you need to also return all the things that closure may or may not return itself?
[12:45:01] <deniska> davzie: `func() int` is the return type of intSeq
[12:45:52] <davzie> Yeah but why? Because an int isn’t actually returned until you actually invoke the function returned by intSeq
[12:45:53] <deniska> davzie: aka "a function with no arguments returning an int"
[12:46:33] <bookworm> you need to be explicit with your return types... you can't just say "any function" and expect callers to be able to use it as an func() int
[12:46:35] <davzie> It’s just confusing me because the int return type is already defined in the actual closure itself, so it feels weird that it again has to be defined in the intSeq function’s return signature too
[12:47:32] <deniska> davzie: well, in go you have to define a type a function returns, in this case it returns a specific kind of function
[12:47:42] *** Joins: shka (~herr@109.231.0.226)
[12:47:45] <deniska> this specific kind of functions takes no arguments and returns an int
[12:47:56] <davzie> Right. I think I was also getting confused because I was seeing it as multiple return types but it’s not because they are in brackets, so I’m getting it now :)
[12:53:53] *** Quits: bluedust (~bluedust@117.217.146.23) (Remote host closed the connection)
[12:54:30] <ikke> and they are seperated by ,
[13:02:17] *** Quits: mertyildiran (~mertyildi@157.230.123.143) (Ping timeout: 240 seconds)
[13:17:57] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0::7a7b) (Ping timeout: 240 seconds)
[13:25:38] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[13:31:36] *** Quits: FreeBDSM_ (~FreeBDSM@user/freebdsm) (Quit: Leaving)
[13:33:32] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[13:35:46] *** Joins: rendar (~rendar@user/rendar)
[13:39:40] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[13:44:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[13:47:24] *** Joins: tesuji (~quassel@2a02:908:180:9500:993a:fb3a:aa2a:c479)
[13:49:59] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:50:29] *** Joins: kcrk (~kcrk@user/kcrk)
[13:53:58] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[13:59:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:04:16] *** Joins: Everything (~Everythin@37.115.210.35)
[14:05:31] *** Parts: Everything (~Everythin@37.115.210.35) ()
[14:14:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[14:18:19] *** Joins: larsm (~larsm@2606:54c0:1e60:138::47:349)
[14:29:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[14:30:26] *** Joins: amk (~amk@109.255.169.126)
[14:35:42] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[14:39:25] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:39:48] *** Joins: bindu (~bindu@user/bindu)
[14:44:55] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[14:49:52] *** Joins: bindu (~bindu@user/bindu)
[14:53:32] *** Quits: rednul (~textual@098-127-226-233.biz.spectrum.com) (Ping timeout: 240 seconds)
[14:54:30] *** Joins: bluedust (~bluedust@117.217.146.23)
[14:55:26] *** Joins: d3fn (~n0b0dy@user/defn)
[14:56:23] *** Quits: cooper_ (~mitchell@user/cooper) (Ping timeout: 268 seconds)
[14:56:33] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 256 seconds)
[14:58:17] *** Joins: cooper_ (~mitchell@user/cooper)
[14:59:40] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 250 seconds)
[15:08:54] *** Joins: mickey8 (~user@user/mickey)
[15:11:03] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Ping timeout: 256 seconds)
[15:11:27] *** Quits: mickey85 (~user@user/mickey) (Ping timeout: 276 seconds)
[15:12:52] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[15:15:10] *** Joins: bluedust (~bluedust@117.217.146.23)
[15:15:43] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[15:16:33] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: The Lounge - https://thelounge.chat)
[15:16:38] *** Quits: avemestr (~avemestr@2a01:4f8:121:228f::2) (Quit: WeeChat 2.8)
[15:17:41] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[15:18:04] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[15:18:52] *** Quits: nekron (~nekron@noordsee.de) (Remote host closed the connection)
[15:20:26] *** Joins: nekron (~nekron@noordsee.de)
[15:34:41] *** Joins: eXtre3m0 (~eXtr3m0@user/eXtr3m0)
[15:39:01] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[15:41:42] *** Joins: bluedust_ (~bluedust@86.106.136.217)
[15:45:17] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 240 seconds)
[15:46:21] *** Joins: oem22 (xyz@151.30.129.165)
[15:50:57] *** Joins: bluedust (~bluedust@117.217.146.23)
[15:51:05] *** Quits: oem22 (xyz@151.30.129.165) (Quit: Going offline, see ya! (www.adiirc.com))
[15:54:07] *** Quits: bluedust_ (~bluedust@86.106.136.217) (Ping timeout: 256 seconds)
[15:57:45] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[15:58:42] *** Joins: oem (Username@151.30.129.165)
[15:59:32] *** Quits: oem (Username@151.30.129.165) (Client Quit)
[16:00:10] *** Joins: jespada (~jespada@87.74.36.188)
[16:05:49] *** Quits: larsm (~larsm@2606:54c0:1e60:138::47:349) (Remote host closed the connection)
[16:05:52] *** Joins: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net)
[16:13:19] *** Quits: mva (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[16:13:31] *** Joins: mva (znc@gentoo/developer/mva)
[16:17:26] *** Quits: bluedust (~bluedust@117.217.146.23) (Remote host closed the connection)
[16:19:19] *** Joins: larsm (~larsm@2606:54c0:1e60:138::80:6f)
[16:19:59] *** Joins: dr0n (~nabromov@176.26.119.61)
[16:23:26] *** Parts: psb___ (sid500598@id-500598.ilkley.irccloud.com) ()
[16:23:49] *** Quits: larsm (~larsm@2606:54c0:1e60:138::80:6f) (Ping timeout: 256 seconds)
[16:24:58] *** Joins: larsm (~larsm@2a02:26f7:ec48:4000:b55e:e1ca:a598:6bcd)
[16:26:59] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[16:28:10] <vassili> In order to extend a []byte slice length (not its capacity) by 42 before calling io.ReadFull, I do slice = append(slice, make([]byte, 42)...). It is the right way to go ? That seems hacky.
[16:30:44] <vassili> I'm afraid make() is allocating an empty slice full of 0 just for the sake of appending it to another slice. Is there other ways ? Goal: reading from a socket a fixed-size header, parsing the header and extracting the length of the full data, and do a second read to append data to the header.
[16:33:36] *** Quits: ryu` (~ryu`@user/ryu/x-3206151) (Remote host closed the connection)
[16:34:31] *** Quits: mva (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[16:34:40] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[16:34:52] *** Joins: mva (znc@gentoo/developer/mva)
[16:34:53] *** Quits: rabbit- (rabbit-@119-18-29-214.77121d.mel.static.aussiebb.net) (Remote host closed the connection)
[16:34:57] *** Quits: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[16:36:04] <A_Dragon> vassili: you could make a size 42 array as a global and only use it in the append?
[16:36:16] <A_Dragon> (ie, never write to it, just have it alloced once)
[16:36:36] <A_Dragon> or ensure that your slice is always of the correct size, and zero it once done
[16:38:08] *** Parts: vassili (~vt@osa.vbc.su) ()
[16:38:10] *** Joins: vassili (~vt@osa.vbc.su)
[16:39:57] <A_Dragon> could also just do `for i :=0; i < 42; i++ { s = append(s,  0) }`
[16:40:08] <vassili> A_Dragon: the problem is that the size 42 is not hard-coded, it's determined by a value in the header (the first 16 bytes). I know, however, that I don't accept packets that are more than 2048 in size, so I could initialise a fixed array of 2048 and sub-slice it.
[16:40:23] <A_Dragon> that'd work too
[16:40:26] <fizzie> vassili: `append(x, make([]T, N)...)` doesn't allocate an empty slice.
[16:41:57] <vassili> fizzie: yes, I guess that's easily optimisable by the compiler, so it should not do an allocation. I will test it before asking question. thank  you.
[16:42:09] <fizzie> Well, you can also read the source: https://cs.opensource.google/go/go/+/master:src/cmd/compile/internal/walk/assign.go;l=94;drc=72c003ef82ba7c997f49e187e953872bfcbf5263
[16:42:25] <A_Dragon> oh yes derp
[16:42:42] <fizzie> (I agree it doesn't *look* very nice.)
[16:43:24] <vassili> oh, I see. It just call extendSlice from the runtime. thank you !
[16:43:42] <A_Dragon> obviously the solution here is linkname
[16:45:22] *** Quits: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[16:45:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:45:52] <vassili> A_Dragon: to call runtime.extendSlice directly ? I think I will pass this time. I don't want to come back to the code in 2 years because the implementation has slightly changed
[16:46:00] <A_Dragon> lol
[16:46:12] <A_Dragon> you mean evil reflection is evil!? what a thought
[16:46:55] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[16:47:19] <vassili> relfection, as far as I understand is done at runtime, which is not really beautiful (I'm thinking of structure tags evaluation, would be great to parse them at compile time)
[16:47:49] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Remote host closed the connection)
[16:49:12] <A_Dragon> struct tags are runtime for the most part yet
[16:49:19] <A_Dragon> the data is dumped onto the struct at compiletime*
[16:49:33] <A_Dragon> linkname is link time
[16:50:08] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[16:50:32] *** Joins: bluedust (~bluedust@117.217.146.23)
[16:55:17] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 240 seconds)
[17:00:22] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[17:04:05] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:06:36] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[17:08:36] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[17:19:39] *** vassili is now known as vt
[17:20:52] *** Quits: mva (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[17:21:14] *** Joins: mva (znc@gentoo/developer/mva)
[17:22:40] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 250 seconds)
[17:28:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[17:29:19] *** Joins: eXtr3m0 (~eXtr3m0@p5486133c.dip0.t-ipconnect.de)
[17:30:22] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[17:35:21] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[17:35:35] *** Quits: mva (znc@gentoo/developer/mva) (Quit: ZNC - https://znc.in)
[17:35:36] *** Joins: mickey8 (~user@user/mickey)
[17:35:47] *** Joins: mva (znc@gentoo/developer/mva)
[17:36:03] *** Joins: bancroft (~bancroft@user/bancroft)
[17:45:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:48:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[17:49:59] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399)
[17:51:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Client Quit)
[17:56:35] *** Joins: tatarqa (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[17:58:10] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:59:21] *** Joins: arkurious (~arkurious@user/arkurious)
[18:00:29] *** Parts: bancroft (~bancroft@user/bancroft) (WeeChat 3.2)
[18:04:58] *** Joins: bancroft (~bancroft@user/bancroft)
[18:05:23] <bancroft> where is MAP_ANONYMOUS? I thought I could get the constant with syscall.MAP_ANONYMOUS but instead I get an undefined
[18:08:25] <fizzie> Should be there if you're building for a system for which it is relevant. Works on the playground, for example: https://go.dev/play/p/KrQqUVHXV6h
[18:08:47] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[18:09:47] <bancroft> interesting, I guess it's not there on macs? But I think I got it with C.MAP_ANONYMOUS
[18:10:05] <bancroft> no error but I didn't get what it gives me yet
[18:10:10] <bancroft> *check
[18:10:38] <fizzie> On darwin/* looks like it only has MAP_ANON and not the MAP_ANONYMOUS synonym, judging from https://pkg.go.dev/syscall?GOOS=darwin
[18:11:44] <fizzie> And indeed https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/mmap.2.html also only lists MAP_ANON, so fair enough.
[18:11:45] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[18:13:46] <bancroft> wow, that's a really helpful link. Thank you!
[18:20:24] *** Quits: larsm (~larsm@2a02:26f7:ec48:4000:b55e:e1ca:a598:6bcd) (Remote host closed the connection)
[18:29:31] *** Joins: Torr (~Torr@user/torr)
[18:29:59] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Quit: Leaving)
[18:34:10] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:c70b:7b10:9434:b399) (Ping timeout: 250 seconds)
[18:35:15] *** Joins: jpw (~jpw@user/jpw)
[18:36:18] *** Joins: bkircher (~bkircher@2001:a61:24c9:9301:1a3a:3a9f:5d9f:ccbb)
[18:36:49] *** Joins: haniaF (~haniaF@83.24.206.88.ipv4.supernova.orange.pl)
[18:37:25] *** Quits: bkircher (~bkircher@2001:a61:24c9:9301:1a3a:3a9f:5d9f:ccbb) (Remote host closed the connection)
[18:44:33] *** Joins: larsm (~larsm@2606:54c0:1e60:138::80:8b)
[18:48:53] *** Quits: larsm (~larsm@2606:54c0:1e60:138::80:8b) (Ping timeout: 256 seconds)
[19:18:20] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:18:41] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 256 seconds)
[19:20:21] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[19:21:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[19:21:08] *** Joins: mrig (~mrig@user/mrig)
[19:32:03] *** Joins: henry40408 (~henry4040@175.181.155.165)
[19:35:21] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[19:40:03] *** Joins: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net)
[19:40:38] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:40:52] *** Joins: lazy1 (~tebeka@2a10:8009:ab8f:0:ba45:6e30:a06b:b6d9)
[19:44:40] *** Quits: lazy1 (~tebeka@2a10:8009:ab8f:0:ba45:6e30:a06b:b6d9) (Client Quit)
[19:45:02] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[19:47:29] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[19:48:37] *** Quits: LiftLeft (~LiftLeft@187.170.244.154) (Ping timeout: 240 seconds)
[19:52:22] *** Quits: bluedust (~bluedust@117.217.146.23) (Remote host closed the connection)
[20:00:40] *** Joins: bluedust (~bluedust@117.217.146.23)
[20:03:16] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5e88:e8a2:f183:6782) (Ping timeout: 245 seconds)
[20:04:06] *** Joins: zwr (~zwr@2804:d45:b966:fb00:af27:6e8f:df74:3523)
[20:06:18] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[20:16:41] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[20:17:04] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[20:19:29] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[20:23:22] *** Joins: fsoc (~shynerd@bison.alphaw0lf.xyz)
[20:28:19] *** Joins: bluedust_ (~bluedust@59.99.182.45)
[20:28:59] *** Quits: bluedust (~bluedust@117.217.146.23) (Ping timeout: 250 seconds)
[20:30:57] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[20:33:11] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[20:36:36] *** Quits: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:41:00] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[20:41:09] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[20:41:19] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[20:45:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:50:25] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[20:51:38] *** Joins: Torr (~Torr@user/torr)
[20:55:10] *** Quits: tesuji (~quassel@2a02:908:180:9500:993a:fb3a:aa2a:c479) (Ping timeout: 260 seconds)
[21:05:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06)
[21:05:16] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[21:05:20] *** Joins: avemestr (~avemestr@2a01:4f8:121:228f::2)
[21:05:32] *** Joins: fef (~thedawn@user/thedawn)
[21:14:05] *** Joins: skyfall (~skyfall@user/skyfall)
[21:18:30] *** Quits: skyfall (~skyfall@user/skyfall) (Quit: afk)
[21:18:36] *** Joins: xsteadfastx (~marv@94.31.99.245)
[21:18:38] *** Joins: skyfall (~skyfall@user/skyfall)
[21:21:34] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[21:27:03] *** Joins: k8yun_ (~k8yun@198-48-158-40.cpe.pppoe.ca)
[21:30:57] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[21:31:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:33:16] *** Joins: fikran (~fikran@user/fikran)
[21:36:41] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[21:36:45] *** Joins: lilgopher (~textual@c-24-12-183-227.hsd1.il.comcast.net)
[21:36:54] *** Joins: k8yun__ (~k8yun@24.244.29.99)
[21:40:29] *** Quits: k8yun_ (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 250 seconds)
[21:42:39] *** Quits: skyfall (~skyfall@user/skyfall) (Quit: afk)
[21:42:48] *** Joins: skyfall (~skyfall@user/skyfall)
[21:45:23] *** Quits: skyfall (~skyfall@user/skyfall) (Client Quit)
[21:45:30] *** Joins: sgen (~sgen@2607:fea8:7ce1:c8e0:3caf:1512:480a:ea92)
[21:45:32] *** Joins: skyfall (~skyfall@user/skyfall)
[21:45:54] *** Quits: skyfall (~skyfall@user/skyfall) (Client Quit)
[21:46:03] *** Joins: skyfall (~skyfall@user/skyfall)
[21:48:11] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[21:48:39] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[21:48:39] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[21:48:39] *** Joins: tane (~tane@user/tane)
[21:50:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:51:00] *** Joins: bancroft (~bancroft@user/bancroft)
[21:53:49] *** Parts: kyle1 (~kyle@schmitt.ninja) ()
[21:55:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:09:49] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[22:28:29] *** Joins: larsm (~larsm@2a02:26f7:ec40:4000:6792:dc43:dbe9:4721)
[22:35:17] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[22:35:51] *** Joins: ugjka (~ugjka@ugjka.net)
[22:41:39] *** Joins: crashrep (~crashrep@user/crashrep)
[22:42:09] *** Quits: larsm (~larsm@2a02:26f7:ec40:4000:6792:dc43:dbe9:4721) (Remote host closed the connection)
[22:44:52] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:49:42] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[23:06:33] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:06:58] *** Quits: k8yun__ (~k8yun@24.244.29.99) (Quit: Leaving)
[23:10:55] *** Joins: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net)
[23:20:50] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[23:23:29] *** Quits: normen (~normen@pd9eec481.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[23:26:25] *** Joins: leonarth (~leonarth@user/leonarth)
[23:30:08] *** Joins: normen (~normen@p200300d717235c0044688bc2bd36a397.dip0.t-ipconnect.de)
[23:30:52] *** Joins: larsm (~larsm@2606:54c0:1e00:138::80:a7)
[23:31:57] *** Quits: edd_lc (~edd_lc@85.64.225.197.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[23:33:43] *** Quits: leonarth (~leonarth@user/leonarth) (Killed (NickServ (GHOST command used by leonarth_)))
[23:33:46] *** Joins: leonarth_ (~leonarth@user/leonarth)
[23:35:37] *** Quits: larsm (~larsm@2606:54c0:1e00:138::80:a7) (Ping timeout: 256 seconds)
[23:40:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[23:42:37] *** Joins: fikran (~fikran@user/fikran)
[23:46:10] *** Quits: ert (~ert@2001:4b99:1:1:216:3eff:fee5:446f) (Quit: out)
[23:47:52] *** Joins: nucleargrave (~nucleargr@user/nuclearg1)
[23:49:21] *** Quits: normen (~normen@p200300d717235c0044688bc2bd36a397.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[23:53:59] *** Joins: normen (~normen@pd9eec481.dip0.t-ipconnect.de)
