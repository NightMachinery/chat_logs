[00:00:12] *** Joins: hikhvar (~thelounge@dslb-178-005-138-126.178.005.pools.vodafone-ip.de)
[00:05:24] *** Joins: kinduff0 (~kinduff@user/kinduff)
[00:05:36] *** Quits: y04nn (~y04nn@81.17.24.204) (Ping timeout: 268 seconds)
[00:06:24] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[00:13:19] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[00:13:38] *** Joins: kinduff07 (~kinduff@user/kinduff)
[00:15:27] <jemaclus> bloony: I think I see what you're saying, and I think the answer is no. You would have to create another struct that's already flattened and hydrate that with the original data.
[00:16:15] *** Quits: kinduff0 (~kinduff@user/kinduff) (Ping timeout: 244 seconds)
[00:16:15] *** kinduff07 is now known as kinduff0
[00:16:33] <bpalmer> well, you could use reflect.StructOf , but I wouldn't recommend it
[00:17:28] *** Joins: GoLiath__ (~GoLiath@82.166.106.212)
[00:18:56] <jemaclus> yeah, I instinctively avoid the reflect package, so I forgot about that. I guess you could do it that way. Still not a good idea.
[00:19:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:20:07] <Tv_> oh he wants a recursive flatten of arbitratry things.. yeah, my favorite fix for that is to not want that
[00:20:24] *** Quits: GoLiath_ (~GoLiath@80.179.69.241.cable.012.net.il) (Ping timeout: 268 seconds)
[00:21:32] <bloony> Tv_: thats the hunch that I have been having too :p
[00:22:15] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 268 seconds)
[00:23:35] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[00:23:53] *** Quits: milosz__ (~milosz@user/milosz) (Remote host closed the connection)
[00:24:30] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:24:36] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[00:26:21] *** Joins: andlabs (~andlabs@68.237.68.71)
[00:26:21] *** Quits: andlabs (~andlabs@68.237.68.71) (Client Quit)
[00:26:47] <bloony> found a beter design for it now I think
[00:28:24] *** Joins: andlabs (~andlabs@68.237.68.71)
[00:31:06] *** Quits: spirgel_ (spirgel@gateway/vpn/protonvpn/spirgel) (Remote host closed the connection)
[00:32:43] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[00:34:12] *** Quits: gpeskens (~gpeskens@2001:985:7aa4:1:13de:75bf:4f19:ec3f) (Remote host closed the connection)
[00:34:15] *** Joins: dr0n (~nabromov@94.11.23.235)
[00:35:36] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:cc63:67c3:3511:6547) (Quit: Leaving)
[00:37:08] *** Joins: SebastianM (~seba@user/sebastianm)
[00:37:50] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[00:39:31] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[00:43:31] *** Joins: nabromov (~nabromov@217.138.202.92)
[00:45:14] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[00:46:13] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 244 seconds)
[00:46:23] *** Quits: ausserz (~ausserz@user/ausserz) (Ping timeout: 272 seconds)
[00:47:06] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[00:51:58] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[00:53:15] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:59:23] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:b32e:bcaa:7e9a:3dbd)
[00:59:25] <raktajino> jemaclus: why do you instinctively avoid reflect?
[00:59:37] *** Parts: Celeo (~Celeo@2603-8001-3301-2e00-8c77-d35a-f4b2-66eb.res6.spectrum.com) (Leaving)
[01:01:02] <raktajino> (I'm asking as a newb, not trying to start stuff)
[01:03:30] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 240 seconds)
[01:03:51] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Quit: mikoto-chan)
[01:05:06] <foobaz> it's better if you can figure out how to accomplish a task with static types instead
[01:05:11] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[01:05:24] <b0nn> It's tortorous to use, and it's slow(er) at runtime
[01:05:35] <Tv_> raktajino: reflect and interface{} are a very awkward way to program Python in Go
[01:05:43] <foobaz> with static types you get compile-time checking, there are far fewer ways for your code to fail at runtime, and also static types are faster
[01:06:34] <raktajino> hmm, okay. thanks folks
[01:06:35] <Tv_> (or js, or ruby, or whatever dynamically typed language you want to pick; i know python best, so i say python)
[01:06:58] <Sam> Not to mention that since you end up with lots of weird metatypes reflect code can't interface very well with non-reflect code so you almost end up with two distinct codebases that just interface at the edges, making things a pain to maintain.
[01:08:07] *** Joins: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net)
[01:08:07] *** Quits: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net) (Changing host)
[01:08:07] *** Joins: alienwarlock (~warl@user/warl)
[01:08:11] <b0nn> lol, raktajino you have discovered the bogey that lives deep in the dark recesses of the Go knowledge base, roll a D20 to saee if you will survive :)
[01:09:38] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 252 seconds)
[01:09:40] *** Joins: nabromov1 (~nabromov@94.11.23.235)
[01:10:10] <raktajino> !d20
[01:10:25] <raktajino> it's ok, i'm an SRE by trade. We like to live dangerously ðŸ˜Ž
[01:10:52] <Tv_> s/bogey/pager/ scary enough now?
[01:11:01] <Tv_> it'll literally haunt your dreams
[01:11:23] *** Joins: siika_ (~siika@58.246.101.34)
[01:11:26] <raktajino> it'll be fiiiiiine ðŸ˜‚
[01:11:35] *** Parts: thing (~thing@user/thing) (Leaving)
[01:11:54] *** Quits: siika__ (~siika@139.226.50.205) (Ping timeout: 240 seconds)
[01:12:34] *** Quits: nabromov (~nabromov@217.138.202.92) (Ping timeout: 244 seconds)
[01:12:34] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 244 seconds)
[01:12:54] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[01:13:55] *** Joins: Xjs (~jannis@user/xjs)
[01:14:45] *** Joins: thing (~thing@user/thing)
[01:17:02] *** Quits: thing (~thing@user/thing) (Client Quit)
[01:21:14] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[01:21:32] *** Quits: burningserenity_ (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:23:00] *** Joins: Led_Zeppelin (~user@cpe-68-172-241-89.nj.res.rr.com)
[01:23:49] *** Joins: foo303 (~foo303@176.234.9.14)
[01:24:38] *** Parts: Mavrik- (~Mavrik@virag.si) ()
[01:26:48] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[01:27:22] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[01:27:24] <foo303> I'm trying to expose some go code for use in C using cgo; however, when compiling the code alongside the other C code I noticed, for example, functions returning an int would return 0 instead of what they should. When I compile the project with `go build -buildmode=c-archive` then link that with the other code, that works
[01:27:37] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:28:17] <foo303> Is there a way to get C code ready for use as opposed to these stub-like functions that come out of cgo?
[01:29:40] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:30:59] *** Joins: andlabs (~andlabs@68.237.68.71)
[01:31:12] *** Quits: andlabs (~andlabs@68.237.68.71) (Client Quit)
[01:32:11] *** Quits: GoLiath__ (~GoLiath@82.166.106.212) (Read error: Connection reset by peer)
[01:32:46] *** Quits: icholy (~icholy@68.71.18.45) (Quit: leaving)
[01:33:18] *** Joins: andlabs (~andlabs@68.237.68.71)
[01:33:47] *** Joins: GoLiath_ (~GoLiath@159.48.55.94)
[01:37:16] <foo303> (Looking at the symbols after `go build` it seems that it statically links the runtime, but I'm just hoping at least that there are multiple versions of that runtime for different architectures distributed with go.. or of course, just get some ready-to-use c files out of cgo :))
[01:37:27] *** Quits: vptr (~tadas@user/vptr) (Quit: leaving)
[01:37:44] <Sam> Still, you could be right
[01:38:39] <Sam> oops, sorry
[01:39:41] <Tv_> foo303: huh what? a statically linked output is per-platform anyway
[01:40:21] *** Quits: avemestr (~avemestr@2a01:4f8:212:2719::2) (Quit: WeeChat 1.9.1)
[01:40:33] *** Quits: klltkr (~klltkr@host86-186-21-201.range86-186.btcentralplus.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:40:37] <foo303> yeah, but I have a couple of cross-compilations as part of my build, unfortunately
[01:41:36] <Tv_> foo303: https://golang.org/cmd/go/#hdr-Build_modes
[01:41:52] <Tv_> foo303: not exactly sure what you're asking. you want c-archive or c-shared
[01:42:34] <Tv_> foo303: those should cross-compile just fine as far as Go is concerned; whether you can cross-compile C successfully in your setup is a different story
[01:43:12] *** Joins: zenbit (~matt@cpc97858-walt21-2-0-cust224.13-2.cable.virginm.net)
[01:44:15] *** Joins: avemestr (~avemestr@2a01:4f8:212:2719::2)
[01:44:18] <foo303> Tv_, I think GOARCH + GOOS might work, but I know I'll have to fight a bit with it, because ideally I want to do `CC=/some/c/compiler go build -buildmode=c-archive` and I'm done
[01:44:39] <Tv_> once again, not sure what the problem is
[01:45:00] *** Joins: thing (~thing@user/thing)
[01:48:41] <foo303> Simple put, "how can I cross compile go into a shared/static library" which GOARCH/GOOS seem like they might solve(trying that now), but ideally as I mentioned 1) Get workable c code from cgo (that seems to not be possible) 2) Provide my own compiler/linker as environment variables.. not documented well 3) GOOS/GOARCH will check if that solves the issue
[01:49:49] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[01:52:30] <foo303> GOARCH/GOOS seems to only work when I give it my actual arch(amd64) and my actual OS(linux); any other combination just says "go: no Go source files"
[01:52:41] *** Quits: tebruno99 (~quassel@c-67-175-180-140.hsd1.il.comcast.net) (Remote host closed the connection)
[01:52:43] <seebs> i don't think there is a way to build "C code ready for use" from Go.
[01:53:04] <Tv_> yeah you don't get C code, you get .a/.so
[01:53:07] <seebs> It's not like C++ where you can sort of arguably treat it as a thing-that-compiles-to-C.
[01:53:12] <Tv_> anything else would require translating Go to C
[01:53:21] <seebs> The entire toolchain is native and does not use C, it just has some hooks for building compatibility shims.
[01:53:30] <foo303> Tv_, go tool cgo gives you actually C code, but it expects you to link to the go runtime (from what I can tell)
[01:53:40] <Tv_> what you can do is write functions with cgo that are callable from C, with the C ABI
[01:53:54] <Tv_> foo303: only the bindings for the exported functions
[01:54:08] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:54:38] <Tv_> the Go code itself still compiles to asm, not to C
[01:55:51] <foo303> If I could get the "asm" out for my target architecture/OS, I think that's totally perfect because I can link to it from the other C code
[01:56:25] <Tv_> foo303: why are you not just doing the thing that actually works?
[01:56:29] <Tv_> Go is not C
[01:57:26] <Tv_> with the right cgo syntax in the source file, `go build -buildmode=c-archive -o libfoo.a` will give you libfoo.a and libfoo.h for your C program to consume
[01:57:35] <foo303> What thing are you talking about exactly that "Actually works"? I'm able to do that thing on linux for my architecture, but I am unable to cross-compile, forget about C :) that may have sounded confusing
[01:57:50] *** Quits: nabromov1 (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[01:57:54] <Tv_> foo303: have you crosscompiled anything non-cgo yet?
[01:58:27] <foo303> yes, and it works fine, I just wasn't able to do the same with the cgo output
[01:59:40] <Tv_> what did you do, how did it fail
[01:59:46] <Tv_> work on the simplest possible thing first
[02:01:53] *** Quits: fputs (~fputs@67.59.83.166) (Quit: Leaving)
[02:02:21] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[02:03:04] *** Joins: thulium_ (~Thulium@2601:2c0:457f:b21b:2bcb:aded:fff2:7325)
[02:05:01] *** Joins: Guest83 (~Guest83@2a02:c7f:2270:3f00:c4c1:7b60:3555:dfdf)
[02:07:12] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[02:07:23] *** Joins: zikani03 (~Zikani@197.211.99.14)
[02:08:10] *** Quits: Guest83 (~Guest83@2a02:c7f:2270:3f00:c4c1:7b60:3555:dfdf) (Quit: Client closed)
[02:08:59] *** Joins: LamePotato (~lamepotat@bras-base-trrbpq6503w-grc-40-142-113-10-238.dsl.bell.ca)
[02:09:03] *** Quits: thulium_ (~Thulium@2601:2c0:457f:b21b:2bcb:aded:fff2:7325) (Quit: Leaving)
[02:15:41] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 272 seconds)
[02:16:20] *** Quits: zenbit (~matt@cpc97858-walt21-2-0-cust224.13-2.cable.virginm.net) (Ping timeout: 268 seconds)
[02:18:14] <foo303> http://pastie.org/p/2AOYgNGgtmqsFqValbSyBP just in case it rings a bell; I've set up a minimal example
[02:18:45] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:19:07] *** Joins: opaulo (~ff@185.153.176.161)
[02:19:32] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[02:22:15] <foo303> (There's one step I didn't add there, which is generating the bindings with cgo, but that's really only just useful for the header file which I include in the C code, I don't make any other use of cgo)
[02:23:07] <foo303> `go tool cgo c/test.c.go`
[02:23:30] *** Joins: andlabs (~andlabs@68.237.68.71)
[02:23:53] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 252 seconds)
[02:35:37] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[02:37:52] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:38:15] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:38:39] *** Quits: hikhvar (~thelounge@dslb-178-005-138-126.178.005.pools.vodafone-ip.de) (Quit: The Lounge - https://thelounge.chat)
[02:39:45] *** Joins: andlabs (~andlabs@68.237.68.71)
[02:39:53] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 244 seconds)
[02:43:20] *** Quits: komish (~quassel@47-184-205-144.dlls.tx.frontiernet.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:47:21] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:47:32] *** Quits: LamePotato (~lamepotat@bras-base-trrbpq6503w-grc-40-142-113-10-238.dsl.bell.ca) (Ping timeout: 252 seconds)
[02:48:15] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:48:42] *** Joins: andlabs (~andlabs@68.237.68.71)
[02:49:12] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 272 seconds)
[02:53:31] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[02:54:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[02:55:02] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 250 seconds)
[02:57:24] *** Quits: NoName_ (~NoName@8.20.126.9) (Quit: https://www.endfgm.eu/what-can-you-do/donate/)
[02:57:59] *** Joins: noxim (~noxim@user/noxim)
[02:58:16] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[03:09:52] *** Joins: kayprish (~kayprish@46.240.143.86)
[03:10:51] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[03:11:15] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:12:25] *** Quits: Guest9_ (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[03:12:36] *** Joins: andlabs (~andlabs@68.237.68.71)
[03:12:51] *** Quits: zikani03 (~Zikani@197.211.99.14) (Quit: Leaving.)
[03:12:54] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[03:12:57] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[03:13:09] *** Joins: Guest68 (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[03:13:32] *** Joins: noxim (~noxim@user/noxim)
[03:15:39] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[03:16:56] *** Parts: Guest68 (~textual@c-73-51-174-246.hsd1.il.comcast.net) ()
[03:21:06] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[03:21:51] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[03:22:18] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[03:24:16] *** Quits: Led_Zeppelin (~user@cpe-68-172-241-89.nj.res.rr.com) (Remote host closed the connection)
[03:25:30] *** Quits: GoLiath_ (~GoLiath@159.48.55.94) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:29:36] *** Joins: redir (~textual@2600:1700:b770:53d0:b924:96ed:cd5d:4aca)
[03:32:18] *** Quits: jsrnop (~mark@pool-72-66-97-117.washdc.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[03:32:56] *** Joins: jsrnop (~mark@pool-72-66-97-117.washdc.fios.verizon.net)
[03:34:09] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:a980:2bfc:4149:5344) (Ping timeout: 268 seconds)
[03:34:23] *** Parts: redir (~textual@2600:1700:b770:53d0:b924:96ed:cd5d:4aca) ()
[03:35:16] *** Joins: redir (~textual@2600:1700:b770:53d0:b924:96ed:cd5d:4aca)
[03:37:11] *** Quits: kayprish (~kayprish@46.240.143.86) (Remote host closed the connection)
[03:39:48] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[03:41:37] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[03:43:35] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:44:31] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[03:45:06] *** Quits: foo303 (~foo303@176.234.9.14) (Ping timeout: 240 seconds)
[03:47:03] *** redir is now known as fffd
[03:47:11] *** fffd is now known as redir
[03:48:35] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[03:48:58] *** Quits: abyx (~abyx@user/abyx) (Remote host closed the connection)
[03:53:56] *** Quits: redir (~textual@2600:1700:b770:53d0:b924:96ed:cd5d:4aca) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:54:41] *** Quits: nmollerup (~nmm@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Ping timeout: 272 seconds)
[03:55:52] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[03:56:41] *** Joins: nmollerup (~nmm@customer-212-237-103-18.ip4.gigabit.dk)
[03:59:58] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 244 seconds)
[04:00:31] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:02:11] *** Joins: andlabs (~andlabs@68.237.68.71)
[04:17:00] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:4869:933b:e3e7:8719)
[04:17:26] <willthechill> Perl > Go, change my mind!  ;-)   intro to Perl data types:  https://youtu.be/go7Ru3QQYYs
[04:17:26] *** Joins: eck0__ (~Android@047-007-119-133.res.spectrum.com)
[04:18:42] <seebs> i am just going to hope that was something witty like a rickroll
[04:18:55] <seebs> language advocacy wars are mostly stupid, really
[04:19:57] <bpalmer> that sounds like something a REBOL user would say.
[04:21:31] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 268 seconds)
[04:24:25] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[04:26:13] <b0nn> 3 seconds in, some guy high on coke
[04:26:24] <KirkMcDonald> That same spam was in #python.
[04:26:32] <KirkMcDonald> Except s/Go/Python
[04:26:40] <b0nn> and #C
[04:27:00] *** Joins: burningserenity (~burningse@102.129.152.75)
[04:27:52] <seebs> huh
[04:28:07] <seebs> you know the embarassing part
[04:28:13] <seebs> is that they probably wrote their spam script in PHP
[04:28:41] <b0nn> The #C announcement was a little different
[04:28:49] <seebs> ... they didn't automate it?
[04:28:52] *** willthechill was kicked by Sam (willthechill)
[04:28:54] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 244 seconds)
[04:28:56] <b0nn> "https://www.cyberciti.biz/open-source/7-awesome-open-source-analytics-weblog-analysis-softwares/"
[04:29:04] <seebs> sooooo apparently they don't have access to a programming language in which they can write stuff
[04:29:05] <b0nn> gah, wrong clipboard
[04:29:43] <seebs> i wonder if the trick of "carry a clipboard and act like you know where you're going" can be generalized to "hit ^C and act like you know where you're going"
[04:30:37] <b0nn> if there's a newline character in the string, and it's not long enough to trigger the "Warning you are about to spam" - there's no opportunity to <C-c>
[04:32:02] *** Joins: keiser00910 (~keiser@188.47.59.39.ipv4.supernova.orange.pl)
[04:33:33] *** Quits: keiser0091 (~keiser@83.25.87.166.ipv4.supernova.orange.pl) (Ping timeout: 244 seconds)
[04:33:38] <bpalmer> The #C++ announcement was a bit different, and they stuck around
[04:34:30] <b0nn>  Perl's internal C data types! <<-- similar to that?
[04:34:50] <b0nn> If so, they must have had *tw* templates to choose from in their script :)
[04:34:58] <b0nn> two*
[04:35:34] *** Joins: NoName_ (~NoName@8.20.126.9)
[04:35:40] <bpalmer> "C++ data types in Perl!"
[04:35:47] <bpalmer> but like I said, they're now talking about the video
[04:35:52] <b0nn> ooo *three* templates
[04:36:42] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[04:37:54] <seebs> well see that just means they should have used C++ first
[04:40:17] *** Quits: lauraaah (uid156848@id-156848.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[04:40:35] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[04:42:05] <rk4> das_j: just find it interesting that you're working with 433mhz signals via a gpio port in go, i was under the impression gc stop the world pauses would shaft that approach, but maybe the gc has gotten much better in recent releases
[04:42:54] *** Quits: siika_ (~siika@58.246.101.34) (Read error: Connection reset by peer)
[04:43:24] *** Joins: siika_ (~siika@223.166.246.51)
[04:45:28] *** Quits: NoName_ (~NoName@8.20.126.9) (Quit: https://www.endfgm.eu/what-can-you-do/donate/)
[04:45:34] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:31] *** Joins: NoName_ (~NoName@8.20.126.9)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:55:52] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Remote host closed the connection)
[04:57:47] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:59:11] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[04:59:59] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[05:04:04] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[05:04:19] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[05:05:33] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[05:07:31] <foobaz> the go gc has long been one of the best in the industry, much better than java or .net
[05:11:27] <lemmi> GC or not.. driving a gpio at 433mhz isn't a joke. to the point that i have a hard time believing it working without utilising something else like the data pin of an spi bus and prepare the bits accordingly
[05:14:31] <LambdaComplex> question about standard package layout. let's use the UserService as an example. if i'm writing a UserService server _and_ a client to talk to that server, would/should i end up with both a server struct and a client struct that both implement the UserService interface?
[05:14:53] *** Quits: burningserenity (~burningse@102.129.152.75) (Ping timeout: 244 seconds)
[05:14:57] *** Joins: burningserenity_ (~burningse@102.129.152.177)
[05:16:34] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[05:17:11] *** Joins: lack (~quassel@user/lack)
[05:17:18] <b0nn> Weird that both a client and server would implement the same interface
[05:18:00] <b0nn> I mean, if I have a swagger file that described a RESTful interface - I would not expect the client to /implement/ it
[05:20:26] <LambdaComplex> b0nn: i'm conflicted. my gut is telling me it's weird, but it also seems to make sense
[05:20:48] <LambdaComplex> getting a user, getting all users, creating a user, deleting a user. those are all things that the client can do, right?
[05:21:00] *** Joins: redir (~redir@2600:1700:b770:53d0:b924:96ed:cd5d:4aca)
[05:21:05] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 244 seconds)
[05:21:15] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:22:08] <b0nn> The client asks the server to perform those tasks
[05:22:26] <b0nn> Client: Please get me user X details; Server: Here they are
[05:22:44] <b0nn> Client: Please delete X details; Server: They gone now
[05:29:01] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:29:49] <LambdaComplex> fair
[05:30:44] <LambdaComplex> b0nn: but wouldn't you probably end up having functions with identical signatures in the client anyways?
[05:30:45] *** Joins: andlabs (~andlabs@68.237.68.71)
[05:31:00] <LambdaComplex> my brain hurts
[05:31:13] <b0nn> If your client is doing both jobs - there's a couple of problems: first every client has to have a complete copy of all the data (or there can only be one client at any point in time); Second you aren't separating concerns
[05:31:25] *** Quits: siika_ (~siika@223.166.246.51) (Remote host closed the connection)
[05:31:35] <b0nn> WRT identical signatures - what's your client doing?
[05:32:14] *** Joins: siika_ (~siika@139.226.50.41)
[05:32:26] *** Parts: FenderQ (~fenderq@user/fenderq) ()
[05:32:39] <b0nn> Is it receiving calls or sending them?
[05:32:42] <b0nn> Or both?
[05:33:41] <LambdaComplex> i feel like we might accidentally be having two different conversations right now
[05:34:03] <LambdaComplex> let's looks at this signature from the UserService interface: User(id int) (*User, error)
[05:34:34] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[05:34:36] <LambdaComplex> it seems to me that it would be reasonable both for the server to have that function (which would be implemented by talking to the database) _and_ for the client to have that function (implemented by communicating with a server)
[05:34:44] *** Quits: redir (~redir@2600:1700:b770:53d0:b924:96ed:cd5d:4aca) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:35:22] <b0nn> Why would the client have that?
[05:36:10] <LambdaComplex> so that the client can be used to get information about a user using the user id?
[05:36:16] *** Joins: kadobanana (~mud@user/kadoban)
[05:36:23] <b0nn> I mean, it's telling you that a client is going to make a call with that signature and server is going to receive such a call, but the client has no need to create a function with that signature within it (unless it's a middleman)
[05:36:52] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 268 seconds)
[05:37:00] <LambdaComplex> so how would you write this on the client?
[05:37:15] <b0nn> What's the client doing?
[05:37:56] <b0nn> Asking for data and.. processing it in some way to make it usable for the user?
[05:38:10] <LambdaComplex> sounds accurate
[05:38:28] <LambdaComplex> say, making an http request to the server, receiving a User as json, and then turning it into a more human-readable format (i.e. not json)
[05:39:04] <seebs> i did a design once sort of experimentally where the client and the server backend basically implemented the same interface, because really it's just RPC at that point.
[05:39:07] <b0nn> So my user says "I want to know the details of a user with id X" so the user gives the client "X" - the client says, Oh I need to go to the server with that id to get all the details
[05:39:18] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 264 seconds)
[05:39:56] <seebs> So they'd both have something like `func (T) LookupUser(name string) (*UserData, error)`
[05:40:01] <seebs> so there is an interface they both satisfy
[05:40:12] <b0nn> And the server fetches the full details, and the client then puts them into something pretty for the user to read
[05:40:13] <seebs> and actually this also means that a proxy is just a server which uses another client as its backend
[05:40:52] <LambdaComplex> b0nn: uh...yes? everything you're saying is obvious and inherent to this design. i'm talking about a specific way of writing the code to implement this functionality
[05:41:05] <LambdaComplex> seebs seems to be totally getting what i'm trying to say
[05:41:08] <b0nn> WRT a REST service, unless the server is running something like MongoDB, then the json it gives the client has been processed from a DB into a JSON object for the client to consume
[05:41:30] <LambdaComplex> yep
[05:42:06] <seebs> Basically: The signature of the function that a user of the client uses is likely to be logically similar to the signature of the function that the server uses to satisfy the request.
[05:42:11] <seebs> Because it will have the same inputs and outputs.
[05:42:19] <b0nn> LambdaComplex: all seebs is saying is a more detailed version of 11:06 < b0nn> I mean, it's telling you that a client is going to make a call with that signature and server is going to receive such a call, but the client has no need to create a function with that signature within it (unless it's a middleman)
[05:42:42] <b0nn> Note the final three words inside the brackets
[05:42:48] <b0nn> four*
[05:42:49] <seebs> Not a middleman, exactly.
[05:42:58] <b0nn> What do you think a proxy is?
[05:43:12] <seebs> I am not describing a proxy, just pointing out that if you make this, it makes a proxy easy to make.
[05:43:18] <LambdaComplex> b0nn: and yet it sounds like seebs is saying "i have done exactly this before" and you are saying "this is weird"
[05:43:23] <seebs> So, imagine that you have a package, and it *doesn't* have a server.
[05:43:31] <seebs> But it provides an API for the functionality it implements.
[05:43:38] <seebs> So you use the API, and it has calls, and they have inputs and outputs.
[05:43:39] <b0nn> Have at it
[05:43:50] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:a980:2bfc:4149:5344)
[05:43:54] <seebs> And now for some reason, you decide that you want to separate this out from the rest of the program.
[05:44:28] <seebs> If you replace the internal logic of it with "a thing that uses a REST API to talk to a server", and write a server that implements the same functionality, through that rest API... They basically both end up implementing an identical set of functions at some point.
[05:44:55] *** Joins: ausserz (~ausserz@user/ausserz)
[05:45:03] <LambdaComplex> hmmm. b0nn are you envisioning the client code as having a Client struct that has methods which are called in the main() function?
[05:45:25] <LambdaComplex> or are you envisioning definitely not writing the client like that?
[05:45:36] <seebs> So if the API is just `type AdderThree { AddThree(int) int }`, then originally you have an API object which has a method `func (T) AddThree(x int) int { return x+3 }`
[05:46:01] <seebs> but you can also make a client-library package which instead has some fancy rest API call it does internally to make this happen.
[05:46:06] <b0nn> LambdaComplex: please stop highlighting me.
[05:46:33] <LambdaComplex> b0nn: but i'm talking to you
[05:46:41] <b0nn>  /ignore
[05:46:44] <seebs> And its function will still have that signature, and then the server will have some glue layer that unpacks things submitted to it, calls the function, and packs up the responses.
[05:46:56] *** Quits: NoName_ (~NoName@8.20.126.9) (Quit: https://www.endfgm.eu/what-can-you-do/donate/)
[05:46:57] <LambdaComplex> what excellent skills in the matter of exchanging ideas
[05:47:24] <seebs> People are allowed to express disinterest in continuing a conversation.
[05:47:44] <seebs> Anyway, yeah, this is basically just reinventing RPC again. :)
[05:48:09] <LambdaComplex> yes, and i'm allowed to think that they're handling the presentation of differing opinions poorly :)
[05:49:11] <LambdaComplex> seebs: i've honestly never used any actual "RPC" implementations but that sounds like it's probably a true statement
[05:49:11] *** Joins: youthlin (~youthlin@240e:b1:e401:4::14)
[05:49:42] *** Quits: ausserz (~ausserz@user/ausserz) (Ping timeout: 268 seconds)
[05:49:44] <seebs> that's all RPC is, an attempt to abstract away the fact that the function you're calling is actually implemented elsewhere and you're talking to it remotely.
[05:50:23] <LambdaComplex> >I mean, it's telling you that a client is going to make a call with that signature and server is going to receive such a call, but the client has no need to create a function with that signature within it (unless it's a middleman)
[05:50:37] <LambdaComplex> perhaps i'm conceptually treating the client as a middleman between the user and the server?
[05:50:46] <seebs> that is a way of thinking about it, yeah
[05:50:56] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 268 seconds)
[05:51:02] <seebs> but really, at that point, it's both the client, and the glue code on the server side, that are "the middleman", i think
[05:51:19] <LambdaComplex> sounds accurate
[05:51:23] <LambdaComplex> it's middlemen all the way down
[05:51:32] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[05:52:23] <seebs> i keep wanting to do stuff like this, i have this idea of doing a classic ASCII-graphics roguelike game in Modern Go Style, so, a few thousand microservices.
[05:52:59] <LambdaComplex> i am definitely missing the correlation between "roguelike" and "a few thousand microservices"
[05:53:10] <seebs> there is none at all
[05:53:17] <LambdaComplex> ...well now i'm even more confused
[05:53:29] <Tv_> seebs forgot to wield his red herring before speaking to the shopkeeper
[05:53:40] <seebs> but why would you write code to determine which character to draw in each cell of your screen, when you could just as well send multi-kilobyte JSON messages to the character-to-draw server.
[05:53:48] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.0.1)
[05:53:54] <LambdaComplex> Tv_: now i'm extra more confused
[05:54:30] <LambdaComplex> seebs: i'm gonna go with "to avoid sending multi-kilobyte JSON messages" and also "to avoid having a thing called the 'character-to-draw server'"
[05:54:32] <Tv_> (or maybe that's more nethack.. i've wasted magnitudes more time on nethack than rogue)
[05:54:35] <LambdaComplex> did i pass the test?
[05:54:37] <seebs> roguelike in this case referring to the historical usage, games like "rogue" or "hack", which are just ASCII art ("@" for character, etc), not the "replays with gradual levelups and procedural levels" thing that it seems to mean to modern audiences.
[05:54:53] <seebs> sometimes it's useful to explore a design by using it badly
[05:54:56] <seebs> or at least educational
[05:55:01] *** Quits: zwr (~zwr@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091) (Ping timeout: 272 seconds)
[05:55:14] <foobaz> for me, it was zangband
[05:55:47] <seebs> i managed to get a patch into angband where it lived for like three weeks before someone replaced that whole section of code
[05:56:29] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[05:56:34] *** Joins: uu (~ride@user/daveed)
[06:00:48] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:02:51] *** Joins: c10l (~c10l@89.34.167.207)
[06:05:09] <uu> Hello. I am writing a program and it stores a URL along with the date it was accessed in a map. Storing this information in memory is not too useful and I need the data to persist when the program is restarted, so I am deciding on which database to use.
[06:05:32] *** Quits: sgen (~sgen@142.186.76.30) (Remote host closed the connection)
[06:05:42] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 264 seconds)
[06:06:21] <b0nn> If that's *all* the data you are persisting - a Key Value DB is fine (eg. Redis) as they will persist to disk
[06:07:02] <Tv_> uu: the default answer is sqlite, the hard question is the real thing or the translation to go
[06:07:08] <b0nn> But when you move to more complex data structures that solution will need to be adjusted (eg. Relational data is best in a SQL DB)
[06:07:15] <Tv_> real thing -> ugh cgo, translation -> less proven
[06:07:28] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[06:08:55] <uu> b0nn: It is a pretty simple usage. With Redis, is there an easy way to query the database with a cli like with sqlite?
[06:09:19] <b0nn> Redis is (mostly) just a big map
[06:09:33] <b0nn> there are other things to pay attention to (eg. TTL)
[06:10:04] <uu> Tv_: Does using a cgo module complicate compiling the program or something? Where does the 'ugh' come from? :)
[06:10:31] <uu> b0nn: I will read about Redis now. Thanks for the recommendation.
[06:10:35] <b0nn> WRT Redis cli https://redis.io/topics/rediscli
[06:10:41] <Tv_> uu: dragging C into the fight is not death by a thousand papercuts, but it definitely is minor annoyance by ten papercuts
[06:10:47] *** Quits: eck0__ (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 268 seconds)
[06:11:48] *** Joins: src (~src@user/src)
[06:12:17] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[06:15:20] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[06:15:32] <b0nn> uu: WRT Redis persistence, you will (most likely) be wanting AOF https://redis.io/topics/persistence
[06:15:45] *** Joins: LamePotato (~lamepotat@bras-base-trrbpq6503w-grc-40-142-113-10-238.dsl.bell.ca)
[06:15:49] <b0nn> Because point in time risks a shutdown losing data
[06:16:10] <b0nn> er s/shutdown/unexpected shutdown/
[06:16:57] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[06:17:41] <Tv_> redis is not a great option for any data that's actually valuable...
[06:18:17] <Tv_> your clue for that was the "optional durability".. it's never been great at that
[06:18:20] <b0nn> WRT time costs - a SQL DB is a B+ tree under the hood, so the cost is O (log n) for finding the correct metadata to associate with the data, + IO cost
[06:18:56] <b0nn> A Redis DB is O(1) for metadata (although hash creation isn't free) + IO costs
[06:20:45] <Tv_> ...only if you choose to ignore the parts that pay the costs
[06:20:51] <b0nn> https://www.databasefilerecovery.com/blog/sqlite-database-corruption.html
[06:21:16] <b0nn> I mean - no solution is bullet proof
[06:21:29] <b0nn> But, let's all pile on about one we didn't suggest
[06:21:46] *** Quits: endigma (~endigma@134.41.87.209) (Quit: The Lounge - https://thelounge.chat)
[06:23:41] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[06:24:21] *** Joins: s-video (~s-video@2601:196:4b00:e70:81b8:3d4e:12c1:537c)
[06:25:45] <uu> I think Redis is sounding like a good option because of how simple it is and because I am already using a map. I will certainly use AOF. Thanks for the help!
[06:27:10] <b0nn> np - do keep in mind that it's a very poor solution if your searches are anything but "Get (X)" or if your data becomes more complicated
[06:30:05] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[06:30:24] *** Quits: telboon (~telboon@user/telboon) (Ping timeout: 268 seconds)
[06:34:43] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[06:38:23] *** Joins: zwr (~zwr@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091)
[06:40:16] *** Quits: opaulo (~ff@185.153.176.161) (Ping timeout: 268 seconds)
[06:41:33] *** Joins: opaulo (~ff@185.153.176.122)
[06:43:00] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[06:43:14] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (Read error: Connection reset by peer)
[06:43:14] *** Quits: uu (~ride@user/daveed) (Ping timeout: 244 seconds)
[06:44:32] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[06:44:42] *** Quits: zwr (~zwr@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091) (Ping timeout: 264 seconds)
[06:45:49] *** Joins: zwr (~zwr@2804:14c:5bc5:8b2c:d486:b000:9fc0:b091)
[06:59:28] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[07:03:32] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[07:03:36] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[07:03:54] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 244 seconds)
[07:10:43] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:13:39] *** Joins: andlabs (~andlabs@68.237.68.71)
[07:16:06] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[07:18:46] *** Joins: diff (~diff@2603-6010-2503-8706-4785-8e75-6ba0-86d5.res6.spectrum.com)
[07:20:58] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[07:22:16] <seebs> the canonical answer to "URL along with date accessed" is, of course, Berkeley DB, which is what Netscape used. :P
[07:24:13] <raktajino> <Tv_> redis is not a great option for any data that's actually valuable... <----- would like to echo this sentiment
[07:29:21] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (Quit: farmstatejake)
[07:29:41] *** Quits: alienwarlock (~warl@user/warl) (Ping timeout: 252 seconds)
[07:30:09] *** Joins: officialDiff (~diff@tilde.town)
[07:34:40] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[07:35:53] <seebs> for all we know five other people have also echoed that sentiment but the messages got lost.
[07:36:26] <raktajino> *snrk*
[07:37:10] <seebs> at one point, i was thinking about amdahl's law, and thought about measuring the cost of disk writes to our software
[07:37:19] <seebs> and the easy way to do this is develop a benchmark and then run it without the disk writes
[07:37:37] <seebs> so... i hacked in a way to disable the disk writes, which i called "mongo mode", and tried it, and it didn't really help all that much.
[07:38:23] <Tv_> seebs: there may be more effects, e.g. heavy write activity can pause the whole process, not just some thread
[07:38:49] <seebs> yeah, i just observed that the overall impact on performance of completely eliminating disk activity were really not very large.
[07:38:53] <Tv_> seebs: more concretely: ops/sec isn't necessarily the only measure that matters
[07:39:00] <seebs> which i think is roughly what i expect on SSDs.
[07:39:02] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 244 seconds)
[07:39:17] <seebs> yeah, there's definitely other concerns, like things that have to get locked while something happens, etc
[07:39:55] <seebs> i did a lot of work on that at one point, got the system from "about 10x slowdown going from an empty database to a fairly large and loaded one" to "not enough slowdown to notice or care about", eventually
[07:40:07] <seebs> luckily, the whole branch in question is on its way to obsolescence
[07:40:25] *** Quits: diff (~diff@2603-6010-2503-8706-4785-8e75-6ba0-86d5.res6.spectrum.com) (Quit: diff)
[07:40:38] *** officialDiff is now known as diff
[07:41:56] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[07:42:31] *** Joins: iateadonut (~dan@121.177.17.154)
[08:01:35] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[08:06:36] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[08:08:58] *** Quits: LamePotato (~lamepotat@bras-base-trrbpq6503w-grc-40-142-113-10-238.dsl.bell.ca) (Quit: WeeChat 3.2)
[08:12:10] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[08:17:05] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[08:18:05] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[08:19:20] *** Joins: NoName_ (~NoName@8.20.126.9)
[08:22:38] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[08:24:22] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:4553:e8be:adc9:cd26)
[08:24:53] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[08:27:07] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Client Quit)
[08:27:41] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[08:33:36] *** Joins: bokwoon (~bokwoon@2406:3003:2004:2bda:b569:de2:ea34:8c0d)
[08:34:28] *** Quits: bokwoon (~bokwoon@2406:3003:2004:2bda:b569:de2:ea34:8c0d) (Client Quit)
[08:46:23] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[08:51:18] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 264 seconds)
[08:53:26] *** Joins: X-Scale` (~ARM@42.125.108.93.rev.vodafone.pt)
[08:55:09] *** Joins: endigma (~endigma@134.41.87.209)
[08:55:58] *** Joins: kodah (~kodah@user/kodah)
[08:56:18] *** Quits: X-Scale (~ARM@42.125.108.93.rev.vodafone.pt) (Ping timeout: 265 seconds)
[08:58:42] *** Joins: SebastianM (~seba@user/sebastianm)
[08:58:52] *** Joins: Kane_ (~Kane@2a01:e34:ee89:5d90:4553:e8be:adc9:cd26)
[09:00:23] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:4553:e8be:adc9:cd26) (Ping timeout: 272 seconds)
[09:02:46] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[09:04:47] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:4553:e8be:adc9:cd26)
[09:06:18] *** Quits: Kane_ (~Kane@2a01:e34:ee89:5d90:4553:e8be:adc9:cd26) (Ping timeout: 264 seconds)
[09:07:06] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 240 seconds)
[09:08:20] *** Quits: youthlin (~youthlin@240e:b1:e401:4::14) (Quit: Client closed)
[09:10:20] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 252 seconds)
[09:12:01] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[09:12:42] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[09:18:03] *** Quits: NoName_ (~NoName@8.20.126.9) (Quit: https://www.endfgm.eu/what-can-you-do/donate/)
[09:18:40] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[09:22:53] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 244 seconds)
[09:31:37] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[09:35:10] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[09:36:13] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[09:36:48] *** Quits: endigma (~endigma@134.41.87.209) (Quit: The Lounge - https://thelounge.chat)
[09:37:32] *** Joins: endigma (~endigma@134.41.87.209)
[09:37:50] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 252 seconds)
[09:37:56] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Quit: -a- Connection Timed Out)
[09:38:08] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[09:39:15] *** Quits: endigma (~endigma@134.41.87.209) (Client Quit)
[09:40:18] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 240 seconds)
[09:40:26] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[09:43:23] *** Joins: endigma (~endigma@134.41.87.209)
[09:44:43] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[09:45:22] <jemaclus> Redis  > SQL. Fight me. :P
[09:45:38] <morgan> redis and SQL are both good tools with different use cases
[09:51:11] <rk4> also redis is a program and SQL is a...language
[09:57:05] *** Joins: endigma2 (~endigma@134.41.87.209)
[09:59:06] *** Quits: endigma (~endigma@134.41.87.209) (Ping timeout: 264 seconds)
[09:59:06] *** endigma2 is now known as endigma
[10:02:45] <b0nn> let's start a proper sh*t fight..
[10:02:53] <b0nn> MongoDB is Web scale!~!1!!!
[10:02:58] * b0nn runs
[10:03:21] *** Quits: kodah (~kodah@user/kodah) (Quit: kodah)
[10:03:34] *** Joins: hexfive (~eric@50.35.83.177)
[10:03:40] *** Joins: kodah (~kodah@user/kodah)
[10:03:43] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[10:04:14] <ikke> b0nn: have you ever tried devnull db?
[10:05:09] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[10:05:19] <b0nn> OMG that's funny https://www.aboutwayfair.com/tech-innovation/devnull-vs-mongodb-benchmark-bake-off
[10:06:18] <jemaclus> :)
[10:06:23] <KirkMcDonald> But how does it stack up against MangoDB?
[10:08:11] <jemaclus> it's right there in the blog post! it's web scale!
[10:09:56] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 268 seconds)
[10:10:24] <ikke> wayfair technical finding :D
[10:12:20] *** Quits: solar_sea (~solar@78.130.184.220) (Changing host)
[10:12:20] *** Joins: solar_sea (~solar@user/solar-sea/x-3088627)
[10:13:12] <jemaclus> Random question... when I marshal a URL with query params ("foo.com?a=1&b=2&c=3"), it prints unicode instead: foo.com?a=1\u0026b=2\u0026c=3
[10:13:20] <jemaclus> what's up with that? how can I have it print the ampersands correctly?
[10:13:26] <jemaclus> https://play.golang.org/p/lPNH1Rf2uWM
[10:13:38] <KirkMcDonald> https://github.com/dcramer/mangodb
[10:16:07] <jemaclus> nm, googled it
[10:17:40] *** Joins: endigma6 (~endigma@134.41.87.209)
[10:18:16] *** Quits: endigma (~endigma@134.41.87.209) (Read error: Connection reset by peer)
[10:18:16] *** endigma6 is now known as endigma
[10:22:41] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[10:24:31] <b0nn> ...
[10:24:37] <b0nn> don't be that guy!
[10:27:40] <kodah> anyone got any good patterns for automating the release of a go package that needs it's version set in code somewhere?
[10:29:05] *** Joins: dmathieu (~textual@pop.92-184-110-96.mobile.abo.orange.fr)
[10:30:20] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:32:58] *** Joins: shka (~herr@109.231.62.239)
[10:36:18] *** Quits: dmathieu (~textual@pop.92-184-110-96.mobile.abo.orange.fr) (Ping timeout: 264 seconds)
[10:40:08] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[10:41:06] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) (Ping timeout: 264 seconds)
[10:42:41] *** Joins: absc (~absc@37.161.156.112)
[10:42:56] *** Parts: absc (~absc@37.161.156.112) ()
[10:43:03] *** Joins: spirgel (spirgel@gateway/vpn/protonvpn/spirgel)
[10:47:03] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[10:51:32] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 252 seconds)
[10:51:43] *** Joins: absc (~absc@37.161.156.112)
[10:52:49] *** Joins: hikhvar (~thelounge@dynamic-077-012-178-148.77.12.pool.telefonica.de)
[10:56:06] *** Quits: endigma (~endigma@134.41.87.209) (Quit: The Lounge - https://thelounge.chat)
[10:57:30] *** Joins: endigma6 (~endigma@134.41.87.209)
[10:57:32] *** Joins: maroloccio (~marolocci@200.243.99.194)
[11:00:02] *** Joins: Vukan (~drazen@46.235.100.178)
[11:03:18] *** Quits: opaulo (~ff@185.153.176.122) (Ping timeout: 264 seconds)
[11:04:33] *** Joins: mrig (~mrig@user/mrig)
[11:06:03] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 268 seconds)
[11:06:04] <rk4> kodah: some people use -ldflags to specify the value of a global at build time
[11:06:10] *** Joins: Patater (~patater@patater.com)
[11:06:38] <rk4> though you said package whereas that was for a binary, nevermind!
[11:07:19] <kodah> rk4: yeah, we do that for binaries because the build of a binary occurs after a tag is issued, this is to automate the pre-release steps
[11:07:43] <kodah> i came up with this whole process to generate code for that, but it seems like a lot of work
[11:08:05] <kodah> i just wanted to verify that's the best end state (for now)
[11:10:00] <rk4> what's the goal? so you can know what library prod is using?
[11:10:39] <kodah> we distribute an SDK and that SDK reports some telemetry data, including the package version
[11:15:18] *** Quits: iluxa (~iliaf@user/iluxa) (Quit: ZNC 1.8.2 - https://znc.in)
[11:20:10] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 244 seconds)
[11:21:36] *** Quits: maroloccio (~marolocci@200.243.99.194) (Ping timeout: 250 seconds)
[11:21:49] *** Joins: milosz (~milosz@user/milosz)
[11:22:40] *** Joins: jespada (~jespada@90.254.247.46)
[11:22:50] *** Joins: iliaf (~iliaf@user/iluxa)
[11:25:07] *** Joins: menace (~someone@2001:a61:3507:f801:bd0d:5a6a:c348:d680)
[11:25:22] *** Quits: menace (~someone@2001:a61:3507:f801:bd0d:5a6a:c348:d680) (Changing host)
[11:25:22] *** Joins: menace (~someone@user/menace)
[11:26:04] *** Joins: fef (~thedawn@user/thedawn)
[11:28:43] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:31:42] *** Joins: noonien (~noonien@user/noonien)
[11:34:11] *** Joins: maroloccio (~marolocci@200.243.99.194)
[11:44:23] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:45:15] *** Quits: Ponyo (~steph@97-113-202-220.tukw.qwest.net) (Ping timeout: 272 seconds)
[11:52:42] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.1)
[11:57:52] *** Quits: spirgel (spirgel@gateway/vpn/protonvpn/spirgel) ()
[12:03:31] *** Quits: arthur (~arthur@2a02:390:9151:0:1c94:e381:bf81:7129) (Remote host closed the connection)
[12:05:34] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:06:29] *** Joins: dcprime (~dcprime@110.226.28.160)
[12:06:32] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[12:06:33] *** Joins: mmfood (~mmfood@h-158-174-183-217.A980.priv.bahnhof.se)
[12:08:15] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:10:11] <nevivurn> Something like a hardcoded constant that gets bumped on release (automatically by release tooling, if needed)
[12:17:09] *** Joins: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net)
[12:17:09] *** Quits: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net) (Changing host)
[12:17:09] *** Joins: alienwarlock (~warl@user/warl)
[12:24:18] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 264 seconds)
[12:25:17] *** Joins: Xjs (~jannis@user/xjs)
[12:26:03] *** Quits: dcprime (~dcprime@110.226.28.160) (Quit: dcprime)
[12:27:53] *** Joins: egon_ (~egon@user/egon)
[12:28:19] *** Joins: Ponyo (~steph@97-113-198-189.tukw.qwest.net)
[12:28:36] *** Joins: dcprime (~dcprime@110.226.28.160)
[12:32:08] *** Quits: ac5tin (~ac5tin@user/ac5tin) (Quit: WeeChat 3.1)
[12:32:35] *** Joins: ac5tin (~ac5tin@user/ac5tin)
[12:35:29] *** Quits: egon_ (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:35:53] *** Joins: egon_ (~egon@user/egon)
[12:41:32] *** Joins: arthur (~arthur@2a02:390:9151:0:1c94:e381:bf81:7129)
[12:42:10] *** Quits: egon_ (~egon@user/egon) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:43:13] *** Joins: arinov (~arinov@212.156.215.30)
[12:44:51] *** Joins: zenbit (~matt@cpc97858-walt21-2-0-cust224.13-2.cable.virginm.net)
[12:52:24] *** Joins: slimjim (~slimjim@102.165.254.75)
[12:52:39] *** Quits: alienwarlock (~warl@user/warl) (Ping timeout: 244 seconds)
[12:52:39] *** Quits: s-video (~s-video@2601:196:4b00:e70:81b8:3d4e:12c1:537c) (Ping timeout: 244 seconds)
[12:54:05] <slimjim> hi everybody, i need some help with tls CA certs :) my client is serving their domain with both valid CA certs (such as DigiCert), and their own root CA. in linux, i can merrily ask the x509 package for the systemCertPool. Windows does not have this. How do i tell the tls.Config layer for my http client to just append a given rootCA to the ca pool it wants to use?
[12:55:29] <slimjim> i tried the following fields: rootCAs: disabled validation from trusted CAs (like DigiCert) because it replaces the *whole* trust strore. clientCAs: this is on the client end it turns out and is not used to validate the incoming server cert :/
[12:56:31] <slimjim> my last choice is to just create an OS specific TLS config that doesn't verify the server on windows (as it's only going to be used for local dev on windows), but I'd like the "proper" solution of just appending to the trusted cert chain
[12:58:55] <alb> slimjim: x509.SystemCertPool gives you a copy of the system pool. Then you can use .AddCert to add yours, and pass the resulting pool to your tls.Config.RootCAs
[12:59:40] <slimjim> alb: Not on windows, it has been disabled per https://github.com/golang/go/issues/18609
[13:01:11] *** Joins: SebastianM (~seba@user/sebastianm)
[13:01:15] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[13:01:54] *** DMT is now known as acidsys
[13:06:26] *** Joins: siika (~siika@139.226.50.205)
[13:07:32] *** Quits: siika_ (~siika@139.226.50.41) (Ping timeout: 268 seconds)
[13:09:05] *** Quits: zenbit (~matt@cpc97858-walt21-2-0-cust224.13-2.cable.virginm.net) (Quit: WeeChat 2.8)
[13:09:40] *** Joins: koo7 (~koo6@89-24-13-235.customers.tmcz.cz)
[13:10:00] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[13:12:39] *** Joins: Giedrius (~giedrius@5.133.65.65)
[13:17:31] *** Joins: TFKyle (~kyle@64.201.205.70)
[13:19:41] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:25:11] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[13:31:56] *** Quits: dcprime (~dcprime@110.226.28.160) (Quit: dcprime)
[13:33:14] *** Joins: dcprime (~dcprime@110.226.28.160)
[13:33:33] *** Quits: dcprime (~dcprime@110.226.28.160) (Client Quit)
[13:34:17] <iateadonut> i have a an http.handler 'srvjson' that i can serve like this: http.ListenAndServe(":5000", srvJson)
[13:34:44] <iateadonut> and i'm creating a test server with that same handler: ts := httptest.NewServer(srvJson)
[13:35:26] <iateadonut> but i cannot get it: rs, err := ts.Client().Get("/") - this returns the error: main_test.go:18: Get "/": unsupported protocol scheme ""
[13:35:50] <iateadonut> thanks for being my rubber duck, chat room!
[13:36:32] *** Quits: justBull (~justache@user/justache) (Read error: Connection reset by peer)
[13:38:08] *** Joins: justBull (~justache@user/justache)
[13:38:58] *** Quits: maroloccio (~marolocci@200.243.99.194) (Ping timeout: 250 seconds)
[13:43:06] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[13:59:00] *** Joins: Snyp (~rksht@49.207.192.68)
[14:02:18] *** Joins: Ohlov38951749035 (~Ohlov3@host-091-097-117-147.ewe-ip-backbone.de)
[14:05:32] *** Quits: siika (~siika@139.226.50.205) (Remote host closed the connection)
[14:06:00] *** Joins: siika (~siika@58.246.101.34)
[14:11:02] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[14:11:04] *** Quits: kinduff0 (~kinduff@user/kinduff) (Quit: The Lounge - https://thelounge.chat)
[14:11:19] *** Joins: kinduff0 (~kinduff@user/kinduff)
[14:12:12] *** Quits: kinduff0 (~kinduff@user/kinduff) (Client Quit)
[14:12:38] <tuskkk____> Hello, a bit of an expansion to a question I asked the other day. I have a map[string]struct{}, and a slice, now I want to check if all elements in the map are in the slice or not, its either all or none
[14:12:41] <tuskkk____> how do I do that?
[14:13:51] <KirkMcDonald> Might be easiest to iterate over the slice and count the number of elements which are present in the map.
[14:14:19] <KirkMcDonald> Though that may require knowing that there are no duplicates in the slice.
[14:14:32] *** Joins: einalex (~einalex@ip4d15fd2a.dynamic.kabel-deutschland.de)
[14:15:07] <tuskkk____> yeah, slice has no duplicates, that is ensured
[14:15:16] <tuskkk____> let me count as well, good idea
[14:17:29] *** Joins: masoudd (~masoudd@user/masoudd)
[14:17:50] *** Quits: Vukan (~drazen@46.235.100.178) (Ping timeout: 268 seconds)
[14:18:32] *** Joins: opaulo (~ff@185.153.176.36)
[14:19:20] <iateadonut> I have a question about how to find information in the docs.
[14:19:21] <iateadonut> I saw that net/http Response.Body is a value of io.ReadCloser.
[14:19:30] <iateadonut> `go doc io readcloser` lead to `go doc io reader`, but that was a deadend.  I eventually learned I could read it with ioutil.ReadAll(rs.Body) through some duck.go searches.  How would I have figured that out through the go docs?
[14:20:29] <iateadonut> I guess my question is: how could i find all functions in all packages that take an argument (r io.Reader)... like func ReadAll(r io.Reader) ([]byte, error) does.
[14:23:23] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[14:24:14] *** Joins: fbrx (~fbrx@2001:b07:6477:f4a6:1633:cab2:f240:f7c6)
[14:24:14] *** Quits: fbrx (~fbrx@2001:b07:6477:f4a6:1633:cab2:f240:f7c6) (Changing host)
[14:24:14] *** Joins: fbrx (~fbrx@user/fbrx)
[14:26:14] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[14:37:42] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:39:32] <masoudd> iateadonut, I'm not sure. But if you're looking for all functions in a package, ```go doc -short ioutil|grep func|grep io.Reader``` would do that
[14:42:04] <einalex> the limitation to single packages is probably useful. all functions in all packages that take a specific type of argument sounds like it's asking for long list of functions that you'd then have to look at one by one to find which one does what.
[14:42:52] <einalex> at that point I'd rather search how other people solved my problem using the packages I'm using
[14:50:07] *** Quits: TFKyle (~kyle@64.201.205.70) (Quit: :q!)
[14:52:56] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[14:52:59] *** Quits: absc (~absc@37.161.156.112) (Ping timeout: 268 seconds)
[14:58:21] <sztanpet> iateadonut just note that ReadAll will buffer the entire file in-memory (in a byte slice) which is not what you want to do when either streaming the data would be enough or when reading arbitrary stuff from the web
[14:58:32] *** Quits: slimjim (~slimjim@102.165.254.75) (Quit: leaving)
[14:59:06] <sztanpet> like the request body in your http handler
[14:59:37] <sztanpet> https://golang.org/pkg/net/http/#MaxBytesReader
[15:00:02] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[15:10:35] *** Joins: ofh (~felix@27-32-64-92.static.tpgi.com.au)
[15:12:21] *** Quits: yelnah (~felix@2001:44b8:3084:400:6f0:21ff:fe3c:d4d7) (Ping timeout: 272 seconds)
[15:23:42] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:24:27] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Read error: Connection reset by peer)
[15:31:55] <beeza> hi, I would like to work with arbitrary filesystems, (google storage, OS FS, sftp). I saw this now, https://github.com/C2FO/vfs, wonder if there is anything similar out there that is better?
[15:32:02] <beeza> not that there is something wrong with it
[15:32:05] <beeza> just wondering
[15:32:41] *** Joins: andlabs (~andlabs@68.237.68.71)
[15:33:28] <j416> beeza: you can always build your own, with just the pieces you need.
[15:33:43] <beeza> I was going to but I would rather not
[15:34:59] *** Joins: Joene (~Joene@cust-158-98-110-94.dyn.as47377.net)
[15:35:11] *** Joins: mickey3 (~user@user/mickey)
[15:35:22] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:35:22] *** mickey3 is now known as mickey
[15:36:03] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net)
[15:37:57] <siXy> beeza: The stdlib has https://golang.org/pkg/io/fs/#FS, which may be enough to get started.
[15:38:35] <beeza> I want rename/move at least
[15:38:39] <siXy> If you want more than that, there's a lot of 3rd party libs, but I'd advise some caution: Many of the things you might want to pulg into this have important semantic differences
[15:39:09] <beeza> They may have yes, but I will start with something that works, and then see if it does not work that well, and change it
[15:50:37] *** Joins: maroloccio (~marolocci@200.243.99.194)
[16:04:25] *** Joins: GoLiath_ (~GoLiath@159.48.55.95)
[16:08:44] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[16:08:57] *** Joins: bpalmer (~user@user/bpalmer)
[16:19:35] *** Joins: Giedrius_ (~giedrius@78-58-156-248.static.zebra.lt)
[16:20:03] *** Quits: Giedrius (~giedrius@5.133.65.65) (Ping timeout: 268 seconds)
[16:21:03] *** Quits: maroloccio (~marolocci@200.243.99.194) (Quit: Ping timeout (120 seconds))
[16:25:02] *** Joins: yoonkn (~user@175.197.208.79)
[16:27:40] <beeza> is there something like shutil for go, I want to copy files around in unit tests
[16:29:46] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[16:30:06] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[16:30:53] *** Quits: burningserenity_ (~burningse@102.129.152.177) (Ping timeout: 252 seconds)
[16:32:38] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[16:32:41] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:35:27] *** Joins: andlabs (~andlabs@68.237.68.71)
[16:39:04] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[16:39:04] *** Quits: einalex (~einalex@ip4d15fd2a.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[16:39:33] *** Joins: novns (~novns@user/novns)
[16:41:44] *** Joins: absc (~absc@37.161.165.176)
[16:43:09] <shibumi> beeza: i am afraid, you have to define your own copy function or look for a library that provides the functionality
[16:43:29] <shibumi> I really don't get why copying file isn't in the stdlib yet either...ðŸ¤”
[16:43:29] *** Quits: iateadonut (~dan@121.177.17.154) (Read error: Connection reset by peer)
[16:44:24] *** Quits: absc (~absc@37.161.165.176) (Client Quit)
[16:44:40] *** Joins: absc (~absc@37.161.165.176)
[16:44:49] <siXy> shibumi: Because it's almost impossible to do both correctly and portably, and stdlib won't accept a solution that isn't both correct and portable.
[16:45:28] *** Joins: Torr (~Torr@user/torr)
[16:46:01] *** Joins: iateadonut (~dan@121.177.17.154)
[16:46:17] *** Joins: komish (~quassel@47-184-205-144.dlls.tx.frontiernet.net)
[16:46:28] *** Joins: Giedrius__ (~giedrius@5.133.65.65)
[16:46:52] *** welt_ is now known as welt
[16:47:05] <shibumi> siXy: what makes a simple ioutil.ReadFile + WriteFile not portable? Each of these are portable in it's core, iirc.
[16:47:28] <shibumi> siXy: rust has a copy function: https://doc.rust-lang.org/std/fs/fn.copy.html
[16:47:58] <shibumi> (sure, rust doesn't care about supporting many architecture's), but i still don't see why this shouldn't be portable.
[16:48:53] <shibumi> Reading files / writing files are all basic operations that are already in the stdlib. And a copy function wouldn't need more or am I missing something substantially here?
[16:49:39] *** Quits: Giedrius_ (~giedrius@78-58-156-248.static.zebra.lt) (Ping timeout: 268 seconds)
[16:49:40] <sztanpet> because it isnt a one-size-fits-all solution
[16:49:53] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[16:50:06] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[16:50:51] <shibumi> sztanpet: why?
[16:50:57] <sztanpet> you can do it naively, reading bytes, writing them out, but maybe you want to optimize it because its slow and we didnt even come close to dealing with all the metadata of a file
[16:51:13] <shibumi> sztanpet: oh ok. I totally forgot about metadata
[16:51:17] <shibumi> that's a valid point
[16:51:23] <shibumi> thanks for the clarification :)
[16:55:27] <siXy> shibumi: copying files has a LOT, and I really do mean a LOT, of edgecases. Rust provides a function for it sure, but rust is much more "every function under the sun, don't worry too much about edgecases and correctness", whereas go is the exact opposite of that approach.
[16:57:11] <siXy> There's a lot of good things about rust, but it also has its problems and "well rust has it" is almost as poor an argument as "well c++ has it"
[16:58:40] <shibumi> https://doc.rust-lang.org/src/std/fs.rs.html#1696-1698 <- I should have had a look on the rust implementation first.. it's even mentioning a few OS specific things
[16:59:45] *** Quits: GoLiath_ (~GoLiath@159.48.55.95) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:00:08] *** Joins: zikani03 (~Zikani@41.75.123.113)
[17:01:06] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 240 seconds)
[17:01:52] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net) (Quit: Client closed)
[17:05:58] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:07:12] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[17:09:18] *** Quits: thoas_ (~thoas@167.71.76.85) (Quit: leaving)
[17:12:02] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[17:13:58] *** Quits: siika (~siika@58.246.101.34) (Remote host closed the connection)
[17:14:26] *** Joins: siika (~siika@58.246.101.34)
[17:14:34] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[17:15:02] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net)
[17:16:11] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:16:11] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[17:16:14] <beeza> not sure it makes most sense to have it in stdlib, more just asking if there is a good 3rd party libn
[17:16:23] <beeza> I will use this for now:} https://github.com/otiai10/copy
[17:16:28] <beeza> but it is somewhat limite
[17:16:30] <beeza> d
[17:24:41] *** Joins: techiephilomath (~techiephi@77.137.2.178)
[17:26:16] *** Joins: blabber (~blabber@user/blabber)
[17:29:20] *** Joins: arahael (~arahael@203-206-95-53.tpgi.com.au)
[17:29:24] <blabber> Hi all. I have a question about text/template templating. Is there a way resolve values recursively? In my case, I have a "{{.dst}}" that resolves to "Funtion has be called for {{.user}}". I wonder how I make it resolve {{.user}}, too.
[17:29:46] *** Quits: hikhvar (~thelounge@dynamic-077-012-178-148.77.12.pool.telefonica.de) (Quit: Ping timeout (120 seconds))
[17:29:58] *** Joins: hikhvar (~thelounge@dynamic-077-012-178-148.77.12.pool.telefonica.de)
[17:30:33] *** Joins: eck0__ (~Android@mobile-166-173-62-95.mycingular.net)
[17:30:50] <blabber> s/Funtion has be/Function has been/
[17:31:32] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:33:06] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 240 seconds)
[17:33:24] *** Joins: hikhvar7 (~thelounge@dynamic-077-012-178-148.77.12.pool.telefonica.de)
[17:34:56] *** Joins: hexfive (~eric@50.35.83.177)
[17:35:10] *** Quits: hikhvar (~thelounge@dynamic-077-012-178-148.77.12.pool.telefonica.de) (Ping timeout: 268 seconds)
[17:38:13] *** Joins: maroloccio (~marolocci@200.243.99.194)
[17:39:41] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net) (Quit: Client closed)
[17:40:51] *** Joins: lehmrob (~rd7@p5dca86f5.dip0.t-ipconnect.de)
[17:48:44] *** Quits: devx (~devx@151.233.209.35.bc.googleusercontent.com) (Ping timeout: 268 seconds)
[17:48:53] *** Joins: devx (~devx@151.233.209.35.bc.googleusercontent.com)
[17:51:27] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[17:53:06] *** Quits: arinov (~arinov@212.156.215.30) (Ping timeout: 264 seconds)
[17:56:32] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:58:25] *** Joins: andlabs (~andlabs@68.237.68.71)
[18:01:27] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:01:29] *** Joins: fef (~thedawn@user/thedawn)
[18:03:22] *** Joins: lightstalker (~BT@user/lightstalker)
[18:04:30] *** Joins: mikeputnam (~mikeputna@wilug/mikeputnam)
[18:06:04] *** Joins: X-Scale (~ARM@83.223.233.159)
[18:06:07] *** Quits: X-Scale` (~ARM@42.125.108.93.rev.vodafone.pt) (Ping timeout: 268 seconds)
[18:06:39] *** Quits: jinie_ (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[18:07:21] *** Quits: gt (~gt@2001:19f0:9002:6dc:42e5:a008:491c:b050) (Ping timeout: 268 seconds)
[18:07:38] *** Joins: gt (~gt@2001:19f0:9002:6dc:42e5:a008:491c:b050)
[18:15:07] *** Joins: jinie (~jimmy@188.114.173.37)
[18:16:43] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[18:18:47] <Tv_> blabber: not directly, because that's well after the template compilation time
[18:19:08] <Tv_> blabber: what you can do is return more data to the template from .dst and put the logic there
[18:19:49] <Tv_> blabber: something like {{if not .dst}}Function has to called for {{.user}}{{end}}
[18:22:24] *** Joins: arcatech (~arcatech@user/arcatech)
[18:23:52] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[18:24:39] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[18:29:07] *** Quits: hikhvar7 (~thelounge@dynamic-077-012-178-148.77.12.pool.telefonica.de) (Ping timeout: 272 seconds)
[18:29:32] <blabber> Tv_, I already thought so.
[18:30:03] *** Quits: acidfu- (~nicolasbo@96.125.207.152) (Ping timeout: 268 seconds)
[18:30:41] *** Joins: edrocks (~Ed@user/edrocks)
[18:31:05] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[18:31:20] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[18:31:21] <blabber> Tv_, thanks. I'll restructure the template to avoid these "recursions".
[18:31:37] *** Quits: mmfood (~mmfood@h-158-174-183-217.A980.priv.bahnhof.se) (Quit: Lost terminal)
[18:33:28] *** Joins: Ysoccio (~Guest57@2001:d08:db:a64d:4da1:b788:cd61:9072)
[18:34:50] *** Quits: Ysoccio (~Guest57@2001:d08:db:a64d:4da1:b788:cd61:9072) (Quit: Client closed)
[18:36:43] *** Quits: opaulo (~ff@185.153.176.36) (Ping timeout: 272 seconds)
[18:46:41] <Skyz> Tv_ hey
[18:49:25] *** Joins: icholy (~icholy@68.71.18.45)
[18:49:31] <Skyz> icholy hey
[18:49:56] *** eyJhb is now known as hut
[18:50:28] *** hut is now known as eyJhb
[18:53:56] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[18:54:06] *** Joins: arcatech (~arcatech@user/arcatech)
[18:55:11] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[18:55:34] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Client Quit)
[18:56:49] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[18:57:01] <icholy> Skyz: hello
[18:57:31] *** Joins: KettleMan (~kttl_crn@208.75.113.3)
[18:57:47] <Skyz> I don't know where money can come from from gnu
[18:57:58] *** Joins: gsthnz- (~gsthnz@user/gsthnz)
[18:58:35] *** Joins: jkl (~jkl@12.216.111.80)
[18:59:08] *** Joins: SebastianM (~seba@user/sebastianm)
[18:59:31] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[18:59:42] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Client Quit)
[18:59:57] *** gsthnz- is now known as gsthnz
[18:59:57] *** Joins: fef (~thedawn@user/thedawn)
[19:00:01] *** Joins: Joene_ (~Joene@cust-158-98-110-94.dyn.as47377.net)
[19:01:08] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[19:03:58] *** Quits: Joene (~Joene@cust-158-98-110-94.dyn.as47377.net) (Ping timeout: 268 seconds)
[19:05:00] *** Quits: KettleMan (~kttl_crn@208.75.113.3) (Quit: leaving)
[19:05:21] *** Joins: KettleMan (~kttl_crn@208.75.113.3)
[19:08:38] *** Quits: eck0__ (~Android@mobile-166-173-62-95.mycingular.net) (Read error: Connection reset by peer)
[19:08:41] *** Joins: SincereFox (uid337158@user/sincerefox)
[19:09:25] *** Joins: eck0 (~Android@mobile-166-173-62-95.mycingular.net)
[19:11:11] *** Quits: lehmrob (~rd7@p5dca86f5.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[19:14:13] *** Joins: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr)
[19:14:39] *** Joins: arinov (~arinov@212.156.215.30)
[19:16:18] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[19:17:39] *** Quits: eck0 (~Android@mobile-166-173-62-95.mycingular.net) (Read error: Connection reset by peer)
[19:18:05] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[19:18:15] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[19:19:31] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[19:19:46] *** Joins: aigoo (~aigoo@user/aigoo)
[19:19:53] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[19:20:38] *** Quits: dmathieu (~textual@laubervilliers-659-1-148-137.w92-154.abo.wanadoo.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:20:52] *** Joins: eck0__ (~Android@047-007-119-133.res.spectrum.com)
[19:23:05] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 268 seconds)
[19:26:57] *** Joins: uu (~ride@user/daveed)
[19:27:05] *** Joins: arcatech (~arcatech@user/arcatech)
[19:28:17] *** Quits: uu (~ride@user/daveed) (Client Quit)
[19:28:22] *** Quits: crowbar (~user@user/crowbar) (Remote host closed the connection)
[19:28:31] *** Joins: daveed (~ride@user/daveed)
[19:28:44] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[19:28:45] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[19:29:36] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Client Quit)
[19:33:55] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:41:10] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[19:46:31] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[19:47:54] *** Quits: techiephilomath (~techiephi@77.137.2.178) (Ping timeout: 240 seconds)
[19:48:21] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4) (Remote host closed the connection)
[19:48:49] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:1deb:3346:f463:745e:77a4)
[19:51:14] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[19:59:39] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[20:00:05] *** Quits: Joene_ (~Joene@cust-158-98-110-94.dyn.as47377.net) (Ping timeout: 268 seconds)
[20:00:31] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[20:01:07] *** Joins: dmathieu (~textual@pop.92-184-110-252.mobile.abo.orange.fr)
[20:04:08] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[20:05:01] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[20:07:28] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[20:07:35] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[20:08:19] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[20:10:19] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[20:11:00] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Client Quit)
[20:11:48] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 268 seconds)
[20:11:49] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 244 seconds)
[20:12:08] *** Quits: absc (~absc@37.161.165.176) (Quit: Leaving.)
[20:12:23] *** Joins: crowbar (~user@user/crowbar)
[20:12:45] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[20:17:58] *** Parts: iateadonut (~dan@121.177.17.154) ()
[20:20:36] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 244 seconds)
[20:23:12] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[20:24:00] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[20:25:54] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:25:54] *** Parts: KettleMan (~kttl_crn@208.75.113.3) ()
[20:27:33] *** Quits: eck0__ (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 272 seconds)
[20:27:54] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 240 seconds)
[20:33:45] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[20:37:02] *** Joins: jkl (~jkl@12.216.111.80)
[20:37:23] <LambdaComplex> if i'm trying to verify a specific extended key usage in a peer cert of a TLS connection, would it be more correct to use VerifyPeerCertificate or VerifyConnection?
[20:38:00] <LambdaComplex> (i'm not entirely sure of what VerifyConnection is supposed to be used for)
[20:39:44] *** Quits: maroloccio (~marolocci@200.243.99.194) (Ping timeout: 250 seconds)
[20:41:18] *** Joins: dumbgoy (dumbgoy@d118-75-118-127.clv.wideopenwest.com)
[20:41:59] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:43:15] *** Joins: s-video (~s-video@2601:196:4b00:e70:d436:7d31:7895:6489)
[20:43:16] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[20:44:20] *** Joins: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net)
[20:44:20] *** Quits: alienwarlock (~warl@c-73-222-73-243.hsd1.ca.comcast.net) (Changing host)
[20:44:20] *** Joins: alienwarlock (~warl@user/warl)
[20:45:40] <fizzie> LambdaComplex: The background of `VerifyConnection` is https://github.com/golang/go/issues/36736
[20:53:05] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[20:53:47] *** Quits: dmathieu (~textual@pop.92-184-110-252.mobile.abo.orange.fr) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:57:48] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 244 seconds)
[20:57:57] *** Quits: fbrx (~fbrx@user/fbrx) (Ping timeout: 272 seconds)
[21:02:47] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:04:11] *** Joins: Guest88 (~Guest88@2600:1700:1930:16af:3145:fe9b:4a48:5086)
[21:04:56] <LambdaComplex> fizzie: that's slightly over my head...but i'm getting the feeling that i should be using VerifyPeerCertificate
[21:06:28] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[21:07:45] <fizzie> If you're verifying some property of the `rawCerts` / `verifiedChains` parameters that get passed to VerifyPeerCertificate, I expect using that callback makes the most sense.
[21:08:26] <LambdaComplex> so, verifiedChains is a [][]*x509.Certificate. am i correct in assuming that it would be unusual to have more than one chain?
[21:09:11] *** Quits: alienwarlock (~warl@user/warl) (Ping timeout: 252 seconds)
[21:09:27] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[21:09:41] *** Quits: cmagina (~cmagina@user/cmagina) (Quit: ZNC 1.8.2 - https://znc.in)
[21:10:38] <LambdaComplex> which certificate would be the correct one to validate? would that always be verifiedChains[0][0]?
[21:10:57] <siXy> I would definitely use VerifyConnection. It's a much nicer API.
[21:11:04] *** Quits: s-video (~s-video@2601:196:4b00:e70:d436:7d31:7895:6489) (Read error: Connection reset by peer)
[21:11:17] <LambdaComplex> can't say i disagree there
[21:11:21] <gilesc> I've introduced golang to this company, did a proof of concept for their MVP, and now they're asking me to put together a job description so we can hire a dev or two. Anyone have any links to a good job description so i can see? (im just an engineer, not an HR guy lol... i know what i like in a dev i just dont know the mumbo-jumbo)
[21:11:35] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[21:12:18] *** Joins: s-video (~s-video@2607:fb90:e64:fb97:d4ab:9c84:d3fe:140a)
[21:12:38] <siXy> LambdaComplex: And with VerifyConnection you probably just want PeerCertificates[0], which is the leaf that was sent to you by the peer.
[21:12:57] <siXy> Nice and easy. Difficult to get wrong. Exactly how this sort of thing should be.
[21:13:15] <LambdaComplex> siXy: yeah, i'm annoyed that VerifyPeerCertificate sounds like it's _technically_ the correct thing to use and yet its API makes this way less straightforward
[21:13:52] *** Joins: cmagina (~cmagina@user/cmagina)
[21:14:03] <siXy> LambdaComplex: I'd look at it more that VerifyPeerCertificate is old and crufty, only kept around for legacy usecases, and VerifyConnection is the new hotness.
[21:14:42] <siXy> I think the former might even be formally deprecated, though I'd need to go check that
[21:15:23] <LambdaComplex> I don't see any deprecation notice in the docs
[21:16:17] <siXy> ah looks like they decided not to formally deprecate it. I'd still avoid using it for new code, though.
[21:17:01] *** Quits: sadg (~odd@45.83.220.210) (Quit: WeeChat 3.0.1)
[21:17:05] <jemaclus> gilesc: find some companies that you respect and steal theirs :)
[21:17:34] <jemaclus> just go to their career pages
[21:17:47] <LambdaComplex> siXy: i guess one big difference is that InsecureSkipVerify affects VerifyPeerCertificate but not VerifyConnection
[21:18:05] <LambdaComplex> and i am now experiencing semantic satiation re: the word "verify"
[21:19:08] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[21:19:10] <gilesc> thanks jemaclus!
[21:20:07] <LambdaComplex> gilesc: "Exciting company looking for Golang rockstar ninja with 20 years experience in something that's only existed for 3 years. Masters degree acceptable; doctorate preferred. Starting wage $10/hr."
[21:20:21] <LambdaComplex> (don't send that to HR; they'd probably post it)
[21:22:16] *** moto is now known as motro
[21:22:25] *** motro is now known as moto
[21:23:06] <gilesc> we don't have an HR, and i hate job descriptions like that lol
[21:23:15] <siXy> LambdaComplex: ehhh, InsecureSkipVerify doesn't prevent either of them from running. But obviously if that is true, you're not going to have any verifiedChains in there.
[21:26:04] <siXy> Really, InsecureSkipVerify does the same thing for each, it's just that the wording doesn't make that as clear as it probably should
[21:28:09] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[21:35:57] <lungaro_> anyone know where I can find a native netlink library for reading SRIOV information? I'm specifically interested in getting a list of VFs and their mac address. Any other info would be nice too like state
[21:36:10] *** Joins: fputs (~fputs@67.59.83.166)
[21:36:17] *** Quits: Giedrius__ (~giedrius@5.133.65.65) (Ping timeout: 268 seconds)
[21:36:57] *** Quits: arinov (~arinov@212.156.215.30) (Read error: Connection reset by peer)
[21:37:38] *** Quits: freswa (~freswa@2a01:4f8:1c0c:804b::2) (Quit: Bye!)
[21:37:47] *** Quits: s-video (~s-video@2607:fb90:e64:fb97:d4ab:9c84:d3fe:140a) (Ping timeout: 252 seconds)
[21:38:23] *** Joins: goldfish (~goldfish@user/goldfish)
[21:38:25] *** Joins: freswa (~freswa@2a01:4f8:1c0c:804b::2)
[21:44:11] <src> var := make([]*ConstructorFunction, 5);
[21:44:33] <src> confused by the pointer here, so var will be a pointer to a slice full of the types (whatever ConstructorFunction returns)?
[21:45:59] <bpalmer> no, var is a slice, each element of which is a pointer
[21:46:32] <bpalmer> ConstructorFunction in that expression is a type, not an actual function.
[21:47:05] <src> oh you're right
[21:47:08] <src> thanks
[21:47:10] <bpalmer> the underlying type is probably something like func() *Foo    , so that anything that is a ConstructorFunction can be called with no arguments and return a pointer to a Foo instance
[21:48:00] *** Joins: recursion (uid504862@id-504862.charlton.irccloud.com)
[21:48:34] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[21:49:34] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[21:49:54] *** Quits: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:50:45] *** Joins: dmathieu (~textual@pop.92-184-110-206.mobile.abo.orange.fr)
[21:51:05] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[21:52:07] *** Joins: kulak (~kulak@user/kulak)
[21:52:58] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[21:53:13] *** Joins: cfjk (~cfjk@user/cfjk)
[21:54:42] *** Quits: Guest88 (~Guest88@2600:1700:1930:16af:3145:fe9b:4a48:5086) (Ping timeout: 250 seconds)
[21:55:49] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[21:56:04] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:57:15] *** Quits: dmathieu (~textual@pop.92-184-110-206.mobile.abo.orange.fr) (Ping timeout: 268 seconds)
[21:57:40] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Remote host closed the connection)
[22:00:01] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:00:14] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Write error: Broken pipe)
[22:00:47] *** Joins: SebastianM (~seba@user/sebastianm)
[22:01:01] <siXy> lungaro_: Can't you just pull em out of /sys ?
[22:01:06] *** Joins: RatSalad (~RatSalad@183.82.176.222)
[22:01:15] <lungaro_> i can't seem to find mac address for each PF in there yet
[22:01:17] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[22:01:55] <lungaro_> sorry, VF
[22:02:07] *** Joins: Jazon (Jazon@user/jazon)
[22:04:03] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:04:10] <siXy> lungaro_: Do you want the mac of the VF (which changes) or the mac of the nic providing the VFs?
[22:04:23] <lungaro_> both, haha
[22:05:04] *** Parts: Jazon (Jazon@user/jazon) (Textual IRC Client: www.textualapp.com)
[22:05:22] <siXy> For the latter, I think you'd have to look at pci-id, as the VF will have pci IDs within the range of the card it comes from
[22:05:28] <lungaro_> i wish netlink wasn't such a mystery. Looking at iproute2 source code now to see
[22:05:42] <lungaro_> latest versions of iproute2 have what I want, i just dont want to parse text
[22:05:55] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[22:05:57] <siXy> lungaro_: lscpi source is probably a better place to look?
[22:06:02] <siXy> lspci*
[22:06:03] <lungaro_> it all comes over netlink though
[22:06:14] <siXy> yeah just that lspci is smaller
[22:06:25] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:07:07] <siXy> sadly I don't have a box with a NIC with that functionality, or I'd be able to give more precise help :( I know it can be done, as I've done it in the past, but I don't work for that place anymore so don't have the code
[22:07:08] <lungaro_> lspci wont report on the VFs
[22:07:24] *** Joins: kulak (~kulak@user/kulak)
[22:07:28] <siXy> lspci should show the virtual functions, yeah
[22:07:41] <lungaro_> hmmm.. even if they're not allocated?
[22:07:52] <lungaro_> i got a box filled w/ unallocated VFs and they are not visible
[22:08:39] <siXy> ooh, now that I don't know, that's a good question
[22:09:23] <siXy> I think it tries to: https://github.com/pciutils/pciutils/blob/master/lspci.c#L440
[22:09:33] <siXy> but maybe it doesn't work with your hw for some reason
[22:11:42] <lungaro_> man, i wonder if I should just distribute my own version of iproute
[22:12:05] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:15:27] <lungaro_> oh sweet, https://pkg.go.dev/github.com/vishvananda/netlink
[22:16:54] *** Joins: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de)
[22:18:12] *** Quits: Xjs (~jannis@user/xjs) (Quit: Good night.)
[22:19:06] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[22:19:17] <siXy> out of interest does that get the unallocated VFs?
[22:19:40] *** Joins: s-video (~s-video@2601:196:4b00:e70:dd6f:9c91:78a4:eedb)
[22:20:27] <siXy> Ah, it's basically just doing syscall.NetlinkRouteAttr so should do
[22:21:25] *** Quits: someone235 (uid419897@id-419897.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[22:22:19] <lungaro_> yep, that's what iproute2 does also
[22:22:28] <lungaro_> that code is not that great =P
[22:22:46] *** Joins: davidkrauser (~davidkrau@69-237-12-160.lightspeed.dybhfl.sbcglobal.net)
[22:23:00] *** Quits: davidkrauser (~davidkrau@69-237-12-160.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[22:23:00] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[22:23:04] *** Joins: davidkrauser_ (~davidkrau@69-237-12-160.lightspeed.dybhfl.sbcglobal.net)
[22:23:07] *** Quits: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[22:24:32] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Client Quit)
[22:24:41] *** Quits: davidkrauser_ (~davidkrau@69-237-12-160.lightspeed.dybhfl.sbcglobal.net) (Client Quit)
[22:35:23] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:35:51] *** Joins: kulak (~kulak@user/kulak)
[22:37:20] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:37:46] <src> my program structure often ends up roughly as types and constants, then methods, then main, then functions
[22:38:14] <src> reading a program atm that is all over the place, is there any reason to stick to something particular?
[22:42:51] *** Joins: edrocks (~Ed@user/edrocks)
[22:43:10] *** Joins: kulak (~kulak@user/kulak)
[22:45:17] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[22:46:59] *** Joins: daveed (~ride@user/daveed)
[22:50:20] *** Quits: RatSalad (~RatSalad@183.82.176.222) (Quit: Leaving)
[22:50:26] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:54:06] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 268 seconds)
[22:55:04] *** Joins: eck0__ (~Android@mobile-166-173-62-97.mycingular.net)
[22:57:09] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 244 seconds)
[22:57:10] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:58:17] <bpalmer> I usually put type methods right after the type definition, before the next type definition.
[22:58:34] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[22:58:38] *** Joins: andlabs (~andlabs@68.237.68.71)
[22:58:44] <bpalmer> I can't see it mattering all that much, but being consistent in the project is a good idea.
[22:58:59] <bpalmer> (Oh, also, I put all type and methods for that type in the same file)
[22:59:27] <bpalmer> Although I suppose adding things for build constraints would require breaking that habit.
[22:59:28] *** Quits: gst (~gst@gateway/tor-sasl/gst) (Ping timeout: 252 seconds)
[22:59:41] <src> bpalmer: do you know of a good resource for that?
[23:00:00] <src> on properly structuring a go project (or in lack of such a resource, software in general?)
[23:00:03] <bpalmer> I don't remember this being addressed in effective go.
[23:03:32] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[23:05:34] *** Joins: SebastianM (~seba@user/sebastianm)
[23:05:39] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[23:05:43] *** Joins: sgen (~sgen@142.186.76.30)
[23:06:36] *** Joins: gst (~gst@gateway/tor-sasl/gst)
[23:06:36] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[23:09:23] *** Joins: mmfood (~mmfood@h-158-174-183-217.A980.priv.bahnhof.se)
[23:13:38] *** Joins: jkl (~jkl@12.216.111.80)
[23:14:59] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:15:33] *** Joins: kulak (~kulak@user/kulak)
[23:18:53] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:18:55] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:19:47] *** Joins: kulak (~kulak@user/kulak)
[23:20:54] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[23:21:33] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:24:12] *** Quits: masoudd (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[23:25:49] *** Quits: mmfood (~mmfood@h-158-174-183-217.A980.priv.bahnhof.se) (Quit: Lost terminal)
[23:28:21] *** Joins: tebruno99 (~quassel@c-67-175-180-140.hsd1.il.comcast.net)
[23:29:50] *** Joins: noxim (~noxim@user/noxim)
[23:31:01] *** Parts: zikani03 (~Zikani@41.75.123.113) ()
[23:31:10] <lungaro_> i'd say do what makes sense... haha
[23:31:22] <lungaro_> i generally put my types in a types.go file =P
[23:31:55] <lungaro_> for high level stuff that is
[23:32:07] *** Quits: eck0__ (~Android@mobile-166-173-62-97.mycingular.net) (Read error: Connection reset by peer)
[23:32:14] <lungaro_> for low level stuff, it kinda makes more sense to organize by documentation, ie rfc/specification/protocol/etc
[23:32:23] *** Joins: eck0 (~Android@071-008-102-118.res.spectrum.com)
[23:32:51] *** Joins: SebastianM (~seba@user/sebastianm)
[23:32:58] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[23:33:25] *** Joins: kayprish (~kayprish@46.240.143.86)
[23:34:28] *** Joins: gilesc (~textual@2603-8001-3600-dad7-bd2b-22bd-b5c6-6146.res6.spectrum.com)
[23:35:41] *** Quits: gilesc (~textual@2603-8001-3600-dad7-bd2b-22bd-b5c6-6146.res6.spectrum.com) (Client Quit)
[23:37:27] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 244 seconds)
[23:37:49] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0)
[23:38:09] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:38:14] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Ping timeout: 252 seconds)
[23:38:59] *** Joins: kulak (~kulak@user/kulak)
[23:39:00] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 244 seconds)
[23:39:30] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:39:54] *** Joins: kulak (~kulak@user/kulak)
[23:41:45] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:42:17] *** Joins: kulak (~kulak@user/kulak)
[23:43:08] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:43:30] *** Joins: kulak (~kulak@user/kulak)
[23:46:35] *** Joins: daveed (~ride@user/daveed)
[23:46:36] *** Joins: scwizard (~scwizard@98.156.26.234)
[23:46:55] <scwizard> Hello, this line seems to be causing a panic: yaml, success = yaml.(map[interface{}]interface{})[v]
[23:47:29] <scwizard> "panic: interface conversion: interface {} is nil, not map[interface {}]interface {}" however I thought that if you used the two value type assertion there was no panic. As per: https://tour.golang.org/methods/15
[23:48:13] <icholy> scwizard: do the [v] on a separate line
[23:49:36] <scwizard> is there a perfered pastebin? I don't see one in the topic
[23:50:00] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[23:50:01] <icholy> https://play.golang.org/
[23:50:46] *** Joins: kulak (~kulak@user/kulak)
[23:50:50] <scwizard> icholy: I separated them like so: https://play.golang.org/p/RlWg0ajTBzW however I am getting "invalid operation: yaml[v] (type interface {} does not support indexing)"
[23:51:15] <icholy> scwizard: don't reuse the same variable name
[23:51:50] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[23:52:14] <icholy> you're type asserting to map[interface{}]interface{} and then immediately putting it back into an interface{}
[23:52:18] *** Joins: esro (~esro@91.231.45.1)
[23:53:22] <scwizard> Ok I think I understand,
[23:53:53] <scwizard> so even though it's the same thingydingy I need one variable for the map ver and one for the interface ver
[23:54:32] *** Joins: dr0n (~nabromov@217.138.202.100)
[23:54:40] *** Quits: esro (~esro@91.231.45.1) (Client Quit)
[23:55:00] *** Joins: esro (~esro@91.231.45.1)
[23:55:01] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 244 seconds)
[23:56:03] *** Quits: tebruno99 (~quassel@c-67-175-180-140.hsd1.il.comcast.net) (Ping timeout: 244 seconds)
[23:56:37] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[23:56:40] *** Quits: mickey (~user@user/mickey) (Ping timeout: 252 seconds)
[23:57:36] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 244 seconds)
[23:59:41] *** Joins: eck0__ (~Android@mobile-166-173-62-118.mycingular.net)
