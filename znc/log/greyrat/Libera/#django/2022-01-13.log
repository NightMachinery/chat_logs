[00:00:14] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[00:00:59] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Quit: Client closed)
[00:02:09] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[00:05:30] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[00:07:14] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[00:07:48] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[00:16:46] *** Joins: audiobirb (~audio@user/audio)
[00:17:05] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 250 seconds)
[00:18:29] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Quit: Client closed)
[00:21:51] <Staunch> what is the "proper" way to create a group with specific permissions in a data migration? The permissions i want to add don't seem to be created yet, despite my data migration depending on `auth.0001.initial` and my app's initial migration as well
[00:22:08] <Staunch> the permissions i'm adding are all the default ones created by auth's migration
[00:23:07] *** Joins: Atque (~Atque@user/atque)
[00:23:29] <GinFuyou> Staunch, I don't think permissions could be created in auth initial migration
[00:24:15] <GinFuyou> Because permissions have to be created for every new model
[00:25:02] <GinFuyou> I don't remember, but I suppose permissions are created on post_migrate signal or something like that?
[00:25:33] <Staunch> GinFuyou: Hm... i see, OK. In that case, i should create the group in an initial data migration, and then create the permissions... in a post migrate signal, like auth does?
[00:25:39] <Staunch> can i say "after auth does its thing, do this"?
[00:26:36] <Staunch> ...  is there a `post_post_migrate` signal? :P
[00:26:37] <GinFuyou> hm, well, have you tried get_or_create() for permission? Also that migration should depend for migration creating that model
[00:27:11] <GinFuyou> assuming auto-creation of permissions doesn't fail on existing ones
[00:27:15] <Staunch> GinFuyou: yeah, i have it depending on my app's initial migration, which is where the models are created. I was worried doing `get_or_create` would create the permission wrong or something
[00:27:49] <GinFuyou> Yeah, I'm not 100% sure what is the best way to handle this situation
[00:28:45] <Staunch> GinFuyou: Maybe it's my own expectation that's wrong, are Groups supposed to be on-the-fly rather than set-in-stone? My app has only one group that i know of ahead of deployment, and i already know what they'll need to do. It seemed like creating the group in a migration was the thing to do
[00:29:20] <FunkyBob> AIUI Groups were initially meant as a helper for assigning and managing perms in bulk
[00:29:23] <Staunch> if that's just Not What They're For™, i can adjust my expectations
[00:29:38] <FunkyBob> you'll notice from the conspicuous absense of any group-membership-testing tools
[00:29:52] <Staunch> i did indeed notice that :P
[00:29:54] <FunkyBob> the code should always be looking for individual perms, but you can assign in bulk using a Group
[00:30:02] <FunkyBob> [as well as manage en mass]
[00:30:05] <Staunch> yeah, the code is looking for the permissions that i'll be adding to this group
[00:30:37] <Staunch> i have The People Who Can Edit Stuff, and The Other People. The former gets a group which will have all the permissions they need
[00:30:43] <FunkyBob> the most 'reliable' solution I can see is probably a management command
[00:30:52] <Staunch> oh, hey, that's a good idea
[00:31:03] <Staunch> i like that one
[00:31:04] <FunkyBob> a migration dependent on the relevant models won't work, as noted above, because the perms are added post migration
[00:31:21] <Staunch> yeah, i like the idea of a management command. That will be easy to add in the docker entrypoint, too!
[00:31:32] <Staunch> thanks for the suggestion FunkyBob, and for the discussion GinFuyou!
[00:54:55] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[00:57:34] *** Joins: newdimension (~newdimnes@user/newdimension)
[00:58:20] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[01:10:38] *** Quits: rje (~textual@65.141.156.170) (Ping timeout: 250 seconds)
[01:11:04] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:11:09] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[01:12:30] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[01:13:58] *** vdamewood is now known as Guest6347
[01:13:58] *** Quits: Guest6347 (~vdamewood@fedora/vdamewood) (Killed (calcium.libera.chat (Nickname regained by services)))
[01:13:58] *** vinleod is now known as vdamewood
[01:14:57] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[01:17:56] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[01:19:42] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 256 seconds)
[01:23:19] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[01:23:30] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[01:25:13] *** Quits: Staunch (~Staunch@137.83.202.22) (Ping timeout: 256 seconds)
[01:28:27] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Quit: Client closed)
[01:32:44] *** Joins: ST47 (~ST47@wikimedia/st47)
[01:50:37] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 240 seconds)
[01:56:01] *** Quits: gopar (~gopar@199.36.94.212) (Remote host closed the connection)
[01:57:06] *** Quits: fikran_ (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:57:31] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 256 seconds)
[01:58:47] *** Joins: fikran_ (~fikran@user/fikran)
[01:59:14] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[02:02:46] *** Joins: tga (~tga@user/tga)
[02:03:09] <tga> hey. I need to add a wysiwyg editor to the admin that can also upload images. any favorites?
[02:03:46] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[02:05:06] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[02:05:08] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:07:48] *** Joins: rje (~textual@50.35.241.164)
[02:09:00] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[02:09:57] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[02:16:04] *** Joins: pileatedx (~textual@cpe-67-241-68-204.twcny.res.rr.com)
[02:22:00] *** Joins: pepper (~pepper@user/pepper)
[02:27:53] *** Quits: Guddu (~Guddu@122.161.81.114) (Read error: Connection reset by peer)
[02:39:27] <beastDivision> upgrading to django 4.0 from 3.1, anyone see an error like this before when doing python -Wa manage.py test ?
[02:39:29] <beastDivision> django.db.utils.DataError: value too long for type character varying(2)
[02:39:49] <beastDivision> psycopg2.errors.StringDataRightTruncation: value too long for type character varying(2)
[02:40:38] <dodo> full traceback please, see /topic
[02:41:19] <beastDivision> one sec
[02:44:16] *** Quits: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6) (Quit: Leaving)
[02:44:21] <beastDivision> dodo: https://dpaste.org/KAVV
[02:45:15] <dodo> looks like you have some invalid fake initial data?
[02:45:35] <beastDivision> where do you see that?
[02:46:16] <dodo> no wait..
[02:46:22] <dodo> fake initial is something else
[02:46:46] <dodo> anyway, the problem happens when the migrate command is run, so the problem is in one of your migrations
[02:47:06] <beastDivision> is there anyway to get more info about which  migration is causing the issue?
[02:47:08] <dodo> running migrate with -v3 would be a good first step
[02:47:17] <beastDivision> will do
[02:47:19] <beastDivision> thanks
[02:48:45] *** Quits: pileatedx (~textual@cpe-67-241-68-204.twcny.res.rr.com) (Quit: pileatedx)
[02:50:00] *** Joins: vladoski (~foo@2001:b07:add:d406:6153:a55b:8d72:81e6)
[02:54:07] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[02:56:07] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[02:57:15] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:01:42] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Ping timeout: 256 seconds)
[03:03:01] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[03:04:54] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[03:12:05] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:15:16] *** Joins: cyphase (~cyphase@user/cyphase)
[03:18:40] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[03:21:36] *** Quits: mad_moses (~ps@2a02:810b:f3f:f0d0:d250:99ff:fe86:b052) (Ping timeout: 245 seconds)
[03:30:44] *** fikran_ is now known as fikran
[03:33:05] *** Quits: vladoski (~foo@2001:b07:add:d406:6153:a55b:8d72:81e6) (Quit: Textual IRC Client: www.textualapp.com)
[03:37:32] *** daniel3 is now known as daniel2
[03:45:36] *** Quits: captain_morgan (~morgan@oit.cloud) (Quit: The Lounge - https://thelounge.chat)
[03:46:11] *** Joins: captain_morgan (~morgan@oit.cloud)
[03:48:24] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[03:48:26] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:56:56] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[03:59:13] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[03:59:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[04:06:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[04:07:00] *** Quits: tga (~tga@user/tga) (Ping timeout: 250 seconds)
[04:08:08] *** Joins: fikran (~fikran@user/fikran)
[04:26:38] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[04:27:29] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:39:25] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:08:26] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:11:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:14:04] *** Quits: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[05:16:26] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[05:20:23] *** Joins: gopar (~gopar@199.36.94.212)
[05:25:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:27:53] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[05:28:24] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:36:04] *** Quits: gopar (~gopar@199.36.94.212) ()
[05:39:04] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:53:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[05:55:46] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:57:13] *** Joins: pembo13 (~pembo13@47.196.95.206)
[06:05:11] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[06:05:30] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:08:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:15:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:17:29] *** Joins: fikran (~fikran@user/fikran)
[06:26:21] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[06:29:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[06:31:25] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:43:57] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[06:45:19] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[07:10:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:36:23] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 256 seconds)
[07:40:46] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:48:57] *** Joins: ST47 (~ST47@wikimedia/st47)
[07:50:11] *** Quits: Mortician (~Mortician@cpe-75-83-83-8.socal.res.rr.com) (Ping timeout: 252 seconds)
[07:50:13] *** Joins: ovnicraft (~ovnicraft@200.7.246.89)
[08:00:13] *** Quits: sreve_ (~quassel@p4ff44ef6.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[08:00:46] *** Joins: sreve (~quassel@p549d7096.dip0.t-ipconnect.de)
[08:06:14] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:24:23] *** Quits: pembo13 (~pembo13@47.196.95.206) (Quit: Leaving)
[08:25:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[08:25:36] *** Joins: djapo (~archangel@user/djapo)
[08:26:50] *** Joins: fikran (~fikran@user/fikran)
[08:42:15] *** Quits: ovnicraft (~ovnicraft@200.7.246.89) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:07:15] *** Joins: ovnicraft (~ovnicraft@200.7.246.89)
[09:15:19] *** Joins: mattil (~mattil@dz32ch9hynfm3t4d7wf-4.rev.dnainternet.fi)
[09:21:44] *** Joins: manwhowouldbekin (~manwhowou@37-145-208-164.broadband.corbina.ru)
[09:23:35] *** Quits: mattil (~mattil@dz32ch9hynfm3t4d7wf-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:27:58] *** Quits: rb (~augh@theguntretort.com) (Quit: ZNC - https://znc.in)
[09:29:10] *** Joins: rwb (~augh@theguntretort.com)
[09:37:23] *** Quits: ovnicraft (~ovnicraft@200.7.246.89) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:44:20] *** Joins: jtiai (~jtiai@81-197-45-202.elisa-laajakaista.fi)
[09:44:22] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[09:45:30] *** Joins: djapo (~archangel@user/djapo)
[09:52:59] *** catbread is now known as catbeard
[09:58:26] *** Joins: noyb (~noyb@user/noyb)
[10:06:44] *** Quits: lithium_sulfate (~li2so4@sr388.sophieversum.net) (Quit: .)
[10:07:17] *** rwb is now known as rb
[10:08:16] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[10:11:06] *** Joins: lithium_sulfate (~li2so4@sr388.sophieversum.net)
[10:19:12] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:20:43] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[10:22:12] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:23:57] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 240 seconds)
[10:24:50] *** Quits: jtiai (~jtiai@81-197-45-202.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[10:26:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[10:32:02] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[10:34:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:36:11] *** Joins: fikran (~fikran@user/fikran)
[10:37:22] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[10:38:02] *** Joins: rusrushal13 (~rusrushal@2401:4900:5d3e:4e12:b2d3:5de9:3877:b22e)
[10:38:31] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:38:46] *** Joins: justIrresolute (~justache@user/justache)
[10:43:16] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[10:49:52] *** Joins: mrwick (~mrwick@user/mrwick)
[10:50:05] *** Quits: noyb (~noyb@user/noyb) (Quit: leaving)
[10:50:15] *** Joins: noyb (~noyb@user/noyb)
[10:50:22] *** Quits: noyb (~noyb@user/noyb) (Client Quit)
[10:54:12] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:59:08] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[11:00:00] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[11:00:15] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:00:22] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[11:04:04] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[11:09:09] *** Joins: mattil (~mattil@dz32cj4n-45cj792lyk-4.rev.dnainternet.fi)
[11:09:14] *** Quits: mattil (~mattil@dz32cj4n-45cj792lyk-4.rev.dnainternet.fi) (Remote host closed the connection)
[11:12:18] *** Quits: rusrushal13 (~rusrushal@2401:4900:5d3e:4e12:b2d3:5de9:3877:b22e) (Ping timeout: 256 seconds)
[11:14:28] *** Joins: fgau (~fgau@mail.berliner-termindienst.de)
[11:26:45] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[11:30:44] *** Quits: manwhowouldbekin (~manwhowou@37-145-208-164.broadband.corbina.ru) (Ping timeout: 250 seconds)
[11:31:09] *** Joins: manwhowouldbekin (manwhowoul@gateway/vpn/protonvpn/manwhowouldbekin)
[11:32:14] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[11:37:31] *** Joins: pycode (~pycode3@2001:b07:5d28:551:fc33:f40d:cee5:afe4)
[11:41:47] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[11:43:18] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[11:47:49] *** Joins: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl)
[11:47:53] *** Quits: pbrunier (~pbrunier@84-24-22-131.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[11:58:25] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:09:08] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:22:06] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:26:52] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:28:10] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:34:48] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:36:14] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:40:31] *** Quits: say^2 (~zay@ti0048a400-1861.bb.online.no) (Quit: leaving)
[12:40:52] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:41:24] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:41:30] *** Joins: dor (~erg@188.147.33.108.nat.umts.dynamic.t-mobile.pl)
[12:41:41] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[12:43:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[12:45:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:45:32] *** Joins: fikran (~fikran@user/fikran)
[12:55:28] *** Joins: bmispelon (~bmispelon@162.79-160-8.customer.lyse.net)
[12:56:44] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[13:00:37] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Ping timeout: 240 seconds)
[13:01:42] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[13:06:16] *** Joins: jtiai (~jtiai@81-197-45-202.elisa-laajakaista.fi)
[13:06:44] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[13:08:38] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[13:09:38] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[13:14:28] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[13:21:38] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[13:22:13] *** Quits: Ergo^ (~ergo@91.238.59.144) (Ping timeout: 256 seconds)
[13:31:14] *** Joins: erkan (~erkan@p200300d34711968fdd59b2881401700c.dip0.t-ipconnect.de)
[13:31:44] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[14:08:07] *** Quits: manwhowouldbekin (manwhowoul@gateway/vpn/protonvpn/manwhowouldbekin) (Ping timeout: 256 seconds)
[14:08:53] *** Joins: manwhowouldbekin (manwhowoul@gateway/vpn/protonvpn/manwhowouldbekin)
[14:20:09] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[14:21:05] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[14:25:14] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[14:35:30] *** Joins: crs (~f@user/crs)
[14:52:53] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[14:54:53] *** Joins: fikran (~fikran@user/fikran)
[15:05:17] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[15:05:54] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[15:09:34] *** Quits: manwhowouldbekin (manwhowoul@gateway/vpn/protonvpn/manwhowouldbekin) (Ping timeout: 250 seconds)
[15:10:17] *** Joins: manwhowouldbekin (~manwhowou@37-145-208-164.broadband.corbina.ru)
[15:11:37] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:16:07] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 256 seconds)
[15:16:56] *** Quits: pycode (~pycode3@2001:b07:5d28:551:fc33:f40d:cee5:afe4) (Ping timeout: 250 seconds)
[15:23:19] *** Quits: dor (~erg@188.147.33.108.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 256 seconds)
[15:30:59] *** Quits: lucascastro (~lucascast@192-140-51-251.static.oncabo.net.br) (Remote host closed the connection)
[15:34:16] *** Joins: Guest9787 (~filipe@152.92.88.187)
[15:35:12] *** Quits: Guest9787 (~filipe@152.92.88.187) (Read error: Connection reset by peer)
[15:39:34] *** Joins: dez (uid92154@user/dez)
[15:39:53] *** Joins: lucascastro (~lucascast@192-140-51-251.static.oncabo.net.br)
[15:49:13] *** Joins: F4r47 (~filipe@152.92.88.187)
[15:50:42] *** Joins: pycode (~pycode3@2001:b07:5d28:551:bdd3:d3b3:a417:8bec)
[15:52:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d8-5.dhcp.inet.fi)
[15:54:19] *** Joins: dor (~erg@188.147.33.108.nat.umts.dynamic.t-mobile.pl)
[15:54:24] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[15:55:19] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[15:58:37] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[15:58:59] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d8-5.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:00:12] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (Quit: oddish)
[16:00:28] *** Joins: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi)
[16:08:13] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:12:01] *** Quits: Spr0cket (sprocket@user/Spr0cket) (Quit: x)
[16:12:26] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[16:12:37] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:13:28] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:14:38] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:18:40] *** Quits: pycode (~pycode3@2001:b07:5d28:551:bdd3:d3b3:a417:8bec) (Ping timeout: 250 seconds)
[16:24:05] *** Joins: ovnicraft (~ovnicraft@200.7.246.89)
[16:28:11] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[16:37:42] *** Joins: FakeMage (~analog_fr@c-71-238-180-183.hsd1.ar.comcast.net)
[16:46:45] *** Quits: erkan (~erkan@p200300d34711968fdd59b2881401700c.dip0.t-ipconnect.de) (Quit: Leaving...)
[16:52:33] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:52:49] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:00:13] *** Quits: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi) (Ping timeout: 256 seconds)
[17:00:26] *** Quits: ovnicraft (~ovnicraft@200.7.246.89) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:02:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[17:02:44] *** Joins: ovnicraft (~ovnicraft@200.7.246.89)
[17:04:14] *** Joins: fikran (~fikran@user/fikran)
[17:20:49] *** Joins: pycode (~pycode3@2001:b07:5d28:551:d55d:bf5e:287c:ea66)
[17:26:42] *** Quits: F4r47 (~filipe@152.92.88.187) (Quit: WeeChat 2.8)
[17:28:40] *** Quits: Spr0cket (sprocket@user/Spr0cket) (Quit: x)
[17:35:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:38:21] *** Quits: jtiai (~jtiai@81-197-45-202.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[17:40:11] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[17:48:46] *** Quits: ovnicraft (~ovnicraft@200.7.246.89) (Read error: Connection reset by peer)
[17:50:32] *** Joins: ovnicraft (~ovnicraft@200.7.246.89)
[17:50:55] *** Quits: pycode (~pycode3@2001:b07:5d28:551:d55d:bf5e:287c:ea66) (Remote host closed the connection)
[17:51:12] *** Joins: pycode (~pycode3@2001:b07:5d28:551:5a6c:9f80:1aac:2bcf)
[17:54:21] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[17:57:10] *** Quits: Spr0cket (sprocket@user/Spr0cket) (Quit: x)
[17:58:37] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[17:58:45] *** Quits: manwhowouldbekin (~manwhowou@37-145-208-164.broadband.corbina.ru) (Ping timeout: 256 seconds)
[17:59:01] *** Joins: manwhowouldbekin (manwhowoul@gateway/vpn/protonvpn/manwhowouldbekin)
[18:01:08] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[18:25:24] *** Joins: xkuru (~xkuru@user/xkuru)
[18:28:04] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[18:33:37] *** Joins: mattil (~mattil@87-92-84-254.bb.dnainternet.fi)
[18:38:15] *** Quits: mattil (~mattil@87-92-84-254.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[18:46:11] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[18:49:52] *** Joins: Ergo^ (~ergo@91.238.59.144)
[18:53:30] *** Joins: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6)
[18:55:25] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[18:59:57] *** Quits: manwhowouldbekin (manwhowoul@gateway/vpn/protonvpn/manwhowouldbekin) (Ping timeout: 240 seconds)
[19:11:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:13:35] *** Joins: fikran (~fikran@user/fikran)
[19:26:18] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[19:26:41] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[20:06:35] *** Joins: cyphase (~cyphase@user/cyphase)
[20:17:08] *** Joins: sharksauce1 (sharksauce@user/sharksauce)
[20:23:49] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 256 seconds)
[20:25:20] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[20:25:37] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[20:27:24] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[20:27:43] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[20:28:41] *** Quits: pycode (~pycode3@2001:b07:5d28:551:5a6c:9f80:1aac:2bcf) (Ping timeout: 245 seconds)
[20:33:02] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Read error: Connection reset by peer)
[20:33:21] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[20:35:51] *** Joins: pembo13 (~pembo13@47.196.95.206)
[20:36:41] *** Quits: bmispelon (~bmispelon@162.79-160-8.customer.lyse.net) (Quit: Leaving)
[20:37:32] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[20:40:09] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[20:40:12] *** Joins: AnselmoCampanas (~AnselmoCa@190.99.69.41)
[20:41:31] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[20:50:04] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[21:00:01] *** Quits: ovnicraft (~ovnicraft@200.7.246.89) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:01:47] *** Quits: rje (~textual@50.35.241.164) (Ping timeout: 256 seconds)
[21:03:13] *** Joins: jmd (~user@de.cellform.com)
[21:06:43] *** Joins: ovnicraft (~ovnicraft@181.188.201.186)
[21:07:46] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[21:08:02] <Staunch> so hey you django friends who use a different frontend, how do you handle telling the frontend what things your users can do?
[21:08:28] <Staunch> do you pass the permissions directly to the frontend, or do you do some figuring on the backend and pass forward some kind of "can_dothisthing" information?
[21:08:35] <pembo13> Staunch, you mean a JavaScript framework?
[21:08:46] <Staunch> yeah, i've got Django serving a backend for a Vue frontend
[21:09:46] <pembo13> Staunch, I'm not sure, would depend what Vue needs
[21:09:48] <Staunch> i've got two different user types, determined by whether or not the user belongs to a set group. I'm not sure if i should just pass the permissions directly to the frontend and let the frontend decide what things are available to this user, or if i should obscure that and just tell the frontend the user belongs to a group.
[21:14:17] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:17:04] *** Joins: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi)
[21:18:08] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 252 seconds)
[21:21:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:22:03] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:22:48] <Staunch> would there be any concerns if i did just reveal the permission codenames to the frontend? Is there any kind of exploit someone might be able to infer or... exploit?
[21:22:56] *** Joins: fikran (~fikran@user/fikran)
[21:23:02] <pembo13> Staunch, not that I can think of
[21:23:12] <Staunch> i think i'll take that approach, then. Thanks pembo13!
[21:25:05] <pembo13> unfortunately, not something I have experience with
[21:25:08] <pembo13> Staunch, good luck
[21:26:37] <Staunch> thankee :D
[21:27:45] <pembo13> welcome
[21:30:49] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Quit: Client closed)
[21:38:09] *** Joins: rje (~textual@65.141.156.170)
[21:43:21] *** Joins: manwhowouldbekin (~manwhowou@37-145-208-90.broadband.corbina.ru)
[21:52:06] <dminuoso> 18:52:48 Staunch | would there be any concerns if i did just reveal the permission codenames to the frontend? Is there any kind of exploit someone might be able to infer or... exploit?
[21:52:15] <dminuoso> It creates stronger coupling.
[21:53:07] <dminuoso> And as for security considerations, it's an interesting subject.
[21:53:36] <dminuoso> Just moving everything into "if has_permission" checks into the frontend allows for much more detailed analysis for an attacker, since they potentially have the entire frontend visible.
[21:53:48] <Staunch> dminuoso: that's a good point. Would you suggest changing the actual codenames to something more like ["can_edithis"] or {"edit_this": True} etc.?
[21:54:23] <Staunch> yeah, very true. I guess maybe i should just give whether or not the user is part of the group to the frontend?
[21:54:29] <dminuoso> Staunch: It's very hard to argue generally
[21:54:40] <dminuoso> To resume that last security bit:
[21:55:12] <dminuoso> You can reduce analysis footprint by chunking your frontend and only delivering certain parts if they have sufficient permissions/roles/access level.
[21:55:44] <dminuoso> so for instance, if the frontend had some admin panel, I might not even deliver that admin panel if you dont have the `admin` role
[21:55:59] <Staunch> yeah, for what it's worth, Vue wouldn't show the actual logic in how i'm using the permissions. The attacker would be able to see the full list from the API response, but as for whether or not certain components are drawn for them, i don't think they would see those.
[21:56:30] <Staunch> Vue filters out all the `v-if` stuff in production builds
[21:56:51] <dminuoso> Staunch: you cant filter out based on permissions at build time though
[21:57:26] <dminuoso> Say you have the "manage_customers" permission, then you might a) have API access to customer data, and the frontend would allow transitions into those components.
[21:57:26] *** Quits: ovnicraft (~ovnicraft@181.188.201.186) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:57:54] <dminuoso> But if you ship these customer management frontned parts in with the entire frontend, an attacker can do more analysis and gain additional information about your system
[21:58:01] <Staunch> dminuoso: yes, i know, and i'm not really sure what magic Vue is using, but it doesn't show the "if true, draw this" logic in its elements
[21:58:02] <dminuoso> Say they could learn about what API endpoints might exist
[21:58:22] <dminuoso> And an API endpoint whose existence your attacker doesnt know about is even harder to exploit
[21:58:49] <Staunch> dminuoso: i think they can find out all the API endpoints by just looking in the Network tab though :P
[21:58:58] <Staunch> oh i see, one they're not supposed to call
[21:59:20] <dminuoso> Right.
[21:59:41] <dminuoso> Staunch: And vue doesnt have it fundamentally build it. It comes with chunking and lazy loading, but that's more about ensuring you get fast initial load times.
[21:59:47] <dminuoso> Emphasis here:
[22:00:01] <dminuoso> Im not saying all of this is important. Just exploring a particular direction here for discussions sake.
[22:00:28] <dminuoso> But its always a good practice to provide as little information, defense in depth is the crucial part here.
[22:01:04] <Staunch> yeah and i appreciate the discussion, dminuoso. It's helping me figure out how i want to proceed
[22:01:42] <Staunch> the strong coupling argument was enough on its face to make me reconsider. I think i'll probably just have the backend provide a "is_in_group" sort of flag to the frontend, and the frontend can provide the pieces they should have.
[22:02:16] <dminuoso> Staunch: Honestly it really depends on the developer team structure
[22:02:18] <dminuoso> About habits, about culture
[22:02:50] <Staunch> currently it's just me, making an internal tool for my team. Haha.
[22:03:01] <dminuoso> realistically Id try and communicate singular permissions through the entire stack
[22:03:23] <dminuoso> If its just you, be simple and pass the same name from beginning to end
[22:03:54] <Staunch> yeah, it would be more flexible to just use the same permission names throughout, rather than clump them in a group.
[22:04:18] <Staunch> ... i think i'll give this a shot and see if i dislike it.
[22:04:24] <Staunch> thanks for the discussion, dminuoso!
[22:04:32] <dminuoso> At the end this is software engineering, and you should make decisions based on your needs.
[22:05:04] <Staunch> true that!
[22:05:26] <dminuoso> It's a delicate balance between creating robustness, maintaining communication between relevant parties (not applicable to your case) and development speed.
[22:06:20] <dminuoso> Me personally I tend to value correctness much higher than others, leading to significantly lower development speed. But that yields stable APIs and less frequent bugs.
[22:07:38] <Staunch> what's that quote, "never break userspace"?
[22:14:09] *** Joins: pmb_ (~pmb@89-64-79-51.dynamic.chello.pl)
[22:18:08] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Ping timeout: 250 seconds)
[22:18:09] *** pmb_ is now known as pmb
[22:22:07] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[22:23:33] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[22:24:31] *** Joins: rotherfuchs (~rotherfuc@2a01:598:b97b:de35:1c67:6273:b56b:3564)
[22:27:42] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[22:28:52] *** Quits: rotherfuchs (~rotherfuc@2a01:598:b97b:de35:1c67:6273:b56b:3564) (Client Quit)
[22:38:13] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:40:25] *** Joins: bambanxx (~bambanx@2800:150:106:1061:28fb:f530:cd33:1bdd)
[22:43:25] *** Joins: mfisher (mfisher@shell.themfishers.com)
[23:00:30] *** Joins: pembo13_ (~pembo13@47.196.95.206)
[23:04:01] *** Quits: pembo13 (~pembo13@47.196.95.206) (Ping timeout: 256 seconds)
[23:10:20] <beastDivision> if you run a migration, and it it has been applying for over 5 minutes, what does that mean? is it stuck? how long should I give it before hitting it with ctrl-c
[23:25:10] <crowbar> beastDivision: how many rows in the table the migration is applying to?
[23:28:01] <dodo> beastDivision: check the db which queries are running
[23:30:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[23:32:16] *** Joins: fikran (~fikran@user/fikran)
[23:45:07] *** Joins: audiobirb (~audio@user/audio)
