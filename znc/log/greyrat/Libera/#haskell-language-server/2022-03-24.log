[00:35:29] *** Joins: xcmw (~textual@dyn-72-33-0-152.uwnet.wisc.edu)
[00:38:02] *** Joins: Guest972 (~Guest9@dyn-72-33-0-152.uwnet.wisc.edu)
[00:40:28] <Guest972> How does does HLS cache computations and invalidate the cache when inputs change? I know rust-analyzer uses salsa.
[00:43:42] <maerwald> Guest972: I think it uses some form of shake
[00:46:29] <maerwald> https://github.com/haskell/haskell-language-server/blob/master/ghcide/src/Development/IDE/Core/Rules.hs
[00:48:23] <Guest972> maerwald: Thanks
[00:50:41] <Guest972> Is that a query-based compiler architecture as described in https://ollef.github.io/blog/posts/query-based-compilers.html ?
[00:54:09] *** Quits: yauhsien (~Yau-Hsien@61-231-38-131.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[01:16:33] *** Quits: xcmw (~textual@dyn-72-33-0-152.uwnet.wisc.edu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:21:33] *** Quits: Guest972 (~Guest9@dyn-72-33-0-152.uwnet.wisc.edu) (Ping timeout: 256 seconds)
[01:55:10] *** Joins: karim (~karim@156.200.129.163)
[02:02:21] *** Quits: karim (~karim@156.200.129.163) (Ping timeout: 256 seconds)
[02:49:10] *** Joins: Guest9 (~Guest9@dyn-72-33-0-152.uwnet.wisc.edu)
[03:21:06] *** Quits: Guest9 (~Guest9@dyn-72-33-0-152.uwnet.wisc.edu) (Quit: Ping timeout (120 seconds))
[03:39:19] *** Joins: Guest9 (~Guest9@dyn-72-33-0-152.uwnet.wisc.edu)
[03:41:11] *** Quits: Guest9 (~Guest9@dyn-72-33-0-152.uwnet.wisc.edu) (Client Quit)
[08:12:57] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[08:14:25] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[10:09:05] *** Joins: arrowd (~arr@78.107.6.128)
[11:21:48] *** Joins: karim (~karim@156.200.223.2)
[12:22:34] *** Joins: july541[m] (~july541ma@2001:470:69fc:105::1:e416)
[12:55:17] *** Joins: fendor (~fendor@178.115.46.236.wireless.dyn.drei.com)
[13:30:13] *** Quits: komikat[m] (~komikatma@2001:470:69fc:105::1:c71e) (Quit: You have been kicked for being idle)
[13:31:25] *** Quits: arrowd (~arr@78.107.6.128) (Ping timeout: 256 seconds)
[13:33:20] *** Joins: arrowd (~arr@78.107.6.128)
[13:53:31] *** Quits: karim (~karim@156.200.223.2) (Ping timeout: 260 seconds)
[15:15:12] *** Quits: arrowd (~arr@78.107.6.128) ()
[16:45:55] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[18:22:50] <maerwald> fendor[m]: `haskell-language-server-wrapper --project-ghc-version` has a couple of problems
[18:23:18] <maerwald> for one, it misreports ghc, if you have `with-compiler: ghc-8.10.3` and that version is not installed
[18:25:42] <maerwald> relevant: https://gitlab.haskell.org/haskell/ghcup-hs/-/issues/99
[18:30:12] *** Joins: July541_ (~July@218.70.255.17)
[18:30:44] <fendor[m]> 0.o shouldn't cabal throw an error? Or is this with old wrapper versions?
[18:31:09] <fendor[m]> like, only wrappers that come with the latest hie-bios version works correctly in this case
[18:32:12] *** Quits: July541 (~July@218.70.255.25) (Ping timeout: 240 seconds)
[18:32:13] <maerwald> hm, maybe
[18:32:26] <maerwald> if it throws an error, that's even worse :D
[18:32:59] <maerwald> we could parse the hie error log to figure out the required version though :D
[18:34:39] <maerwald> I think this should actually be fixed on cabal side... it prints nothing to stdout on failure... but it should print the 'ghc-8.10.3' to stdout imo
[18:34:53] <maerwald> then you can combine exit code + stdout into useful information
[19:01:42] <fendor[m]> I think cabal throws an error when it can't find the compiler version you have specified
[19:02:26] <maerwald> nothing you can use properly
[19:02:34] <maerwald> exit code is 1 (useless) and stdout is empty
[19:45:40] *** Joins: arrowd (~arr@78.107.6.128)
[19:46:32] <fendor[m]> really? well that sucks, but at least easy to debug for people, as they are instructed to run `cabal build`
[21:16:21] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[21:49:23] <fendor[m]> maerwald: I am preparing a reddit/discourse announcement: https://hackmd.io/@H5m3j9VQRsiiBdVxBmOCiA/S11w7XqG5/edit feedback welcome
[21:50:29] <maerwald> maybe order the new settings into primary/secondary
[21:50:48] <maerwald> manageHLS and ghcupExecutablePath should be the primary ones
[21:50:55] <maerwald> the rest is secondary
[21:52:22] <maerwald> And add the example `"haskell.serverEnvironment": { "PATH": "${HOME}/.ghcup/bin:${PATH}" }` from https://github.com/haskell/haskell-language-server/issues/236
[21:52:58] *** Joins: fendor_ (~fendor@178.115.44.78.wireless.dyn.drei.com)
[21:54:24] <maerwald> I also think I removed more settings
[21:55:21] *** Quits: fendor (~fendor@178.115.46.236.wireless.dyn.drei.com) (Ping timeout: 245 seconds)
[21:57:06] <maerwald> maybe that was only in my head :D
[21:59:17] <maerwald> https://github.com/haskell/vscode-haskell/compare/bf8b6c0e50692a6db7485743250aa97165c1323f%5E..master#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519
[21:59:31] <fendor[m]> for that matter, everyone else invited to give feedback to the text 🙂
[21:59:31] <sm> \o/
[22:02:32] <sm> hackmd seems nice. It could be good to add a few words of description for each new flag.
[22:02:41] <fendor[m]> ok!
[22:03:16] <sm> I'm stumbling over understanding what has changed in how binaries are managed. Text at the top says GHCip is the only way, then text at bottom says.. something more complicated
[22:04:10] <maerwald> fendor[m]: I can't edit
[22:04:20] * sm is referring to GHCip man, the well known install tool for kung fu skills
[22:04:27] <maerwald> lol
[22:05:49] <fendor[m]> Damn it, probably have to login to github... I hoped the edit link would be enough
[22:06:04] <fendor[m]> sm: what section in particular?
[22:06:22] <fendor[m]> ghcup is the only way to automatically manage stuff now, so if that isn't clear, we have to clarify
[22:06:43] <sm> I find it all confusing. I woke up not long ago so I'm a good test 
[22:06:54] <maerwald> fendor[m]: oh, it works
[22:07:08] <sm> are the choices: 1. manage all binaries myself with ghcup at the command line, 2. let the Haskell extension manage all binaries, so I can just stay in the VSC GUI ?
[22:07:28] <fendor[m]> 2. is, let the haskell extension use ghcup to manage all binaries
[22:07:36] <fendor[m]> so you can stay in VSC gui once ghcup is installed
[22:09:01] <maerwald> now it stopped working
[22:11:12] <sm> cool. Perhaps something like "previously vsch could download new hls binaries automatically. Now vsch uses ghcup and can install/upgrade the following haskell tools for you (hls, ghc, stack, cabal, (ghcup?)). This works on these OS/architectures: ... It will do this when: .... Here's how to enable it: ... and here's how to disable it and use ghcup yourself at the command line" ?
[22:11:34] <fendor[m]> in the setup section of the extension?
[22:11:51] <sm> I'm not sure what you mean, I've just looking at https://hackmd.io/UXadJp_kTwigLFuChIYx9g?view
[22:13:10] <fendor[m]> the extension itself also has a readme, and I added some small comment in the hope of explaining how it works: https://github.com/haskell/vscode-haskell/pull/546
[22:13:20] <fendor[m]> we should probably add this explanation to the readme as well
[22:13:34] <sm> also "here's where to look in case of trouble"
[22:14:10] <sm> Output > Haskell pane, I assume. Many new VSCH users don't know to look there
[22:14:41] <fendor[m]> maerwald, I can see your changes, so it must work a bit at least 😀
[22:15:05] <fendor[m]> on the readme of the extension itself there is a small explanation, but I think it is lacking atm
[22:17:28] *** Quits: fendor_ (~fendor@178.115.44.78.wireless.dyn.drei.com) (Remote host closed the connection)
[22:19:05] <maerwald> fendor[m]: I added contributor output from `git shortlog -s -n 1.8.0..master`
[22:20:14] <sm> I think the focus on ghcup in the text is part of the confusion, until now that has always meant "I run ghcup at the command line". At a higher level, the choice is really "manage haskell tools myself, eg with ghcup, or let vsch manage haskell tools (using ghcup under the hood)"
[22:21:04] <sm> incidentally is marketing-case GHCup the true spelling maerwald ? damn, I'll have to adapt
[22:21:50] <maerwald> I guess
[22:22:49] <fendor[m]> Maerwald, thanks!
[22:24:08] <sm> also I'd describe the new binary handling, which is the most apparent user change in one place, at the top before the lesser changes (instead of split in two places)
[22:24:15] <fendor[m]> sm, one of the major changes is that we require ghcup now if you want HLS to be automatically installed. Can we express this efficiently? Or should we rather omit that? 
[22:25:03] <sm> oh sure, that's important to mention. That'd be part of the "Here's how to enable it:"
[22:25:36] <maerwald> it's already explained there
[22:27:04] <sm> why are "Other flags include" in their own section ? Are they not part of "new primary flags" ?
[22:27:20] <maerwald> no, because they are secondary
[22:28:04] <sm> and why "primary", is that word needed ?
[22:28:26] <maerwald> yes, to distinguish from secondary
[22:28:42] <sm> stop me if it's too much feedback :)
[22:29:04] <fendor[m]> I like it, keep it coming
[22:29:18] <fendor[m]> flags probably don't need to be split as only a small percentage of users will read the flag names
[22:30:23] <sm> "flags removed", "flags added" would seem fine to me as a reader, easier to understand than three lists
[22:30:38] <sm> otherwise my brain wants to read the third list as "flags modified"
[22:30:53] <maerwald> a list of 10+ flags is confusing in a readme. It should be clearly communicated what are the most interesting flags
[22:30:57] <maerwald> hence primary vs secondary
[22:32:32] <sm> ok, is that worthwhile for half a dozen flags though ? If it is, then mention "secondary" in the third list, to make it clear
[22:33:10] <fendor[m]> maerwald, just to make sure, this is rather the release announcement than the new README
[22:33:19] <sm> just my 2c, obviously do whatever you see is best
[22:33:33] <maerwald> fendor[m]: yes
[22:33:45] <maerwald> sm: I indented it
[22:36:38] <fendor[m]> is it now clearer, or still unclear?
[22:36:52] <sm> afk (to your relief). It's looking much clearer to these eyes now. Thanks for all the hard work
[22:37:08] <fendor[m]> thank you for your thorough review!
[22:37:10] <fendor[m]> * thorough review!s
[22:37:34] <maerwald> now we have to add sm to the contributor list :D
[22:37:43] <sm> thanksk all 👍️
[22:38:15] <fendor[m]> ok, shall we pull the trigger?
[22:38:32] <sm> primary was removed, so secondary now looks funny and could be dropped
[22:38:48] <fendor[m]> agreed
[22:39:32] <maerwald> :D
[22:39:41] <sm> what about the other infos I mentioned.. too much / not needed ?
[22:39:55] <maerwald> Can you add inline comments on the page?
[22:40:24] <sm> like, where is this expected to work, when will it do it's thing (when do upgrades happen), how to troubleshoot
[22:40:46] <fendor[m]> Hm, I think in an announcement, it is too much
[22:40:56] <fendor[m]> Expected to work: everywhere where ghcup works which should be everywhere haskell works
[22:41:15] <fendor[m]> when will it do it's thing, on startup of the extension, just like before
[22:41:17] <sm> the where supported question at least would be good to know, as a mac/m1/windows/windows-arm user should they expect it all to work ?
[22:41:26] <maerwald> sm: here https://github.com/haskell/ghcup-metadata/blob/master/hls-metadata-0.0.1.json
[22:41:38] <fendor[m]> how to troubleshot, we can refer to the troubleshoot section, but I don't think copy and pasting it there is wise
[22:41:48] <sm> very cool
[22:41:52] <fendor[m]> yeah, I believe so, right maerwald?
[22:42:10] <sm> but then also, what version(s) of ghc can/will it install ?
[22:42:26] <maerwald> sm: that's basically a list of bindists and their supported GHC versions per hls version -> arch -> platform
[22:42:34] <fendor[m]> ok that's an interesting details, but I would have hoped to be able to omit some details 😀 
[22:43:02] <sm> just to be sure I'm understanding, is VSCH now becoming an alternative to ghcup or stack for installing all the things ? This is a pretty large change so you can understand my many questinos
[22:43:23] <maerwald> no and no
[22:43:31] <maerwald> stack is automatically installed as well
[22:43:44] <maerwald> fendor[m]: in fact, there's a slight issue with stack handling
[22:43:56] <maerwald> but I don't know how/if that can be reasonably fixed
[22:44:09] <maerwald> can we query HLS wrapper what cradle is used?
[22:44:16] <fendor[m]> it is not an alternative, it is powered by ghcup and will use ghcup to install what is necessary to make HLS work. 
[22:44:28] <sm> sure, but as a user it's an alternative workflow
[22:44:35] <maerwald> because right now, the extension also installs GHC when stack cradle is used
[22:44:45] <maerwald> which doesn't make much sense, unless system-ghc is issued
[22:45:07] <fendor[m]> not really, users before used pre-built HLS binaries. They still use pre-built binaries, but it works now in more cases
[22:45:31] <fendor[m]> you still can't e.g. build your cabal project via VSCode
[22:45:37] <sm> what are the way in which it's limited compared to using ghcup directly ? Eg does it install only the latest ghc ? will it ever upgrade ghc ? does it install the right ghc for the current project ? (I guess so)
[22:46:26] <maerwald> sm: 1. it doesn't compile HLS from source for you, 2. no, 3. yes, 4. yes
[22:46:40] <fendor[m]> no immediate limits, you have less control over what is installed. Just like before, if a user uses a GHC that'S not supported by the current HLS version, we automatically download an older HLS version
[22:47:42] <sm> how does it pick the GHC version to install ?
[22:47:57] <maerwald> from `haskell-language-server-wrapper --project-ghc`
[22:48:39] <sm> if the answer for now is "it just magically works, try it", fair enough
[22:48:57] <maerwald> I'd rather suggest to read the source code
[22:49:01] <sm> sounds exciting. Really afk now, sorry o/
[22:49:08] <fendor[m]> It installs one version for HLS and then asks HLS which ghc version it needs 
[22:49:41] <fendor[m]> Then it installs the ghc version required for the project 
[22:49:51] <maerwald> if that ghc version is already installed xD
[22:50:05] <maerwald> because otherwise hls wrapper throws up
[22:50:36] <maerwald> but it makes sure the correct ghc is first in PATH
[22:50:58] <fendor[m]> Actually it poses one question to me: if I have a ghc installed but it is not the recommended one, will ghcup still install the recommended ghc version? It shouldnt, right? 
[22:51:25] <maerwald> that depends what hls-wrapper --project-ghc returns
[22:54:23] <sm> stack does by default (because that's more likely to work), and offers these flags... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/e7584f2772b4bd19a9d62c9bbfa2d226b560257b)
[22:55:23] <fendor[m]> Yeah thats basically what we have now, too, but in the best case we should avoid ghc installations 
[22:55:46] <maerwald> fendor[m]: you didn't answer my question above 
[22:57:53] <maerwald> can we detect whether the cradle is a stack cradle?
[23:02:34] *** Joins: hololeap (~hololeap@user/hololeap)
[23:07:26] <fendor[m]> Sorry, I overlooked the question
[23:07:26] <fendor[m]> At which state? The wrapper can print the project cradle 
[23:08:17] <maerwald> how
[23:08:21] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[23:08:49] <maerwald> that's haskell format it seems, not json
[23:09:02] <maerwald> `Cradle {cradleRootDir = "/home/hasufell/git/CM/app/haskell/capital-match", cradleOptsProg = CradleAction: Cabal}`
[23:09:09] <maerwald> for example
[23:09:32] <maerwald> because right now we're still installing GHC for stack cradles
[23:09:43] <fendor[m]> While not ideal, we can parse that output (basically checking whether it contains the string stack) 
[23:09:48] <maerwald> I dunno, maybe it doesn't matter
[23:09:57] <maerwald> well, what if the user set --sytem-ghc
[23:10:01] <maerwald> etc
[23:10:17] <maerwald> I think they can just disable GHC installation for stack
[23:10:22] <maerwald> or set --system-ghc
[23:10:29] <maerwald> maybe add that to readme or release notes
[23:14:28] <maerwald> yes, I think a note should be enough
[23:14:53] <maerwald> ghcup can't guess all possible toolchain configurations
[23:15:08] <maerwald> and the default of installing GHC is harmless
[23:18:57] <fendor[m]> Yeah, that isn't a designed interface but people forced me to add a testcase and writing the test case required that flag. It is terrible and we should redesign that asap
[23:39:15] <sm> speaking of flags, I meant to ask: what are these flags, how would I set them ? I'm not familiar 
[23:39:54] <fendor[m]> What flags? 
[23:40:30] <sm> these flags discussed in the release announcement
[23:40:51] <sm> are they command line flags ? VSC settings ?
[23:46:41] <fendor[m]> Vsc settings, yes. So you set them in vscode 
[23:50:08] <sm> cool. "flags" was a little unintuitive to me
