[00:06:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:10:10] *** Joins: ilmu1 (~ilmu@176.76.243.150)
[00:13:00] *** Quits: ilmu (~ilmu@176.76.240.116) (Ping timeout: 240 seconds)
[00:15:35] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 256 seconds)
[01:08:52] *** Quits: tewi (~tewi@apn-95-40-104-70.dynamic.gprs.plus.pl) (Ping timeout: 272 seconds)
[01:17:16] *** ilmu1 is now known as ilmu
[01:19:39] *** Joins: dra (~dra@2a04:4540:641c:6c00:74d9:8d1:b2db:e527)
[01:48:15] *** Quits: dra (~dra@2a04:4540:641c:6c00:74d9:8d1:b2db:e527) (Quit: Leaving)
[02:02:05] *** Joins: opcode (~opcode@user/opcode)
[02:19:10] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[02:22:24] *** Joins: dra (~dra@2a04:4540:641c:6c00:54ef:98ae:e09c:d636)
[02:35:00] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 240 seconds)
[03:11:39] *** Joins: jealousmonk (~user@user/jealousmonk)
[03:37:05] *** Quits: ilmu (~ilmu@176.76.243.150) (Ping timeout: 256 seconds)
[03:48:26] *** Joins: johnjaye (~pi@173.209.64.74)
[03:53:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[03:55:11] *** Joins: johnjaye (~pi@173.209.64.74)
[04:01:07] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[04:01:24] *** Quits: opfez (~opfez@user/opfez) (Ping timeout: 256 seconds)
[04:03:07] *** Joins: johnjaye (~pi@173.209.64.74)
[04:07:12] *** Joins: ilmu (~ilmu@176.76.243.150)
[04:08:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[04:10:19] *** Joins: johnjaye (~pi@173.209.64.74)
[04:11:35] *** Joins: dra_ (~dra@2a04:4540:6408:cb00:54ef:98ae:e09c:d636)
[04:13:57] *** Quits: dra (~dra@2a04:4540:641c:6c00:54ef:98ae:e09c:d636) (Ping timeout: 240 seconds)
[04:16:15] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[04:19:50] *** Quits: dra_ (~dra@2a04:4540:6408:cb00:54ef:98ae:e09c:d636) (Remote host closed the connection)
[04:31:35] *** Joins: johnjaye (~pi@173.209.64.74)
[04:36:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[04:42:12] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 240 seconds)
[04:42:49] *** Joins: johnjaye (~pi@173.209.64.74)
[04:48:09] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[04:50:51] *** Joins: johnjaye (~pi@173.209.64.74)
[04:56:05] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[05:02:42] *** Joins: opfez (~opfez@ti0013a400-1129.bb.online.no)
[05:02:59] *** Joins: johnjaye (~pi@173.209.64.74)
[05:08:16] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[05:23:55] *** Joins: johnjaye (~pi@173.209.64.74)
[05:29:14] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[05:32:33] *** Joins: johnjaye (~pi@173.209.64.74)
[05:38:02] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[05:45:54] *** Joins: johnjaye (~pi@173.209.64.74)
[05:51:00] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[05:57:17] *** Quits: opfez (~opfez@ti0013a400-1129.bb.online.no) (Ping timeout: 256 seconds)
[06:07:38] *** Joins: johnjaye (~pi@173.209.64.74)
[06:12:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[06:20:12] *** Joins: johnjaye (~pi@173.209.64.74)
[06:26:07] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[06:29:04] *** Joins: johnjaye (~pi@173.209.64.74)
[06:34:59] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[06:44:18] *** Joins: Oladon (~olad@98.43.81.226)
[06:49:32] *** Joins: johnjaye (~pi@173.209.64.74)
[06:52:49] *** Joins: opfez (~opfez@ti0013a400-1579.bb.online.no)
[06:54:42] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[06:55:53] *** Joins: johnjaye (~pi@173.209.64.74)
[07:01:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[07:04:00] *** Joins: johnjaye (~pi@173.209.64.74)
[07:09:52] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[07:10:37] *** Joins: johnjaye (~pi@173.209.64.74)
[07:16:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[07:17:18] *** Joins: johnjaye (~pi@173.209.64.74)
[07:22:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[07:26:32] *** Joins: johnjaye (~pi@173.209.64.74)
[07:30:21] <beach> Good morning everyone! 
[07:32:03] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[07:32:58] *** Joins: johnjaye (~pi@173.209.64.74)
[07:35:49] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:38:09] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[07:40:38] *** Joins: johnjaye (~pi@173.209.64.74)
[07:45:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[07:47:29] *** Joins: johnjaye (~pi@173.209.64.74)
[07:52:46] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[07:53:53] *** Joins: johnjaye (~pi@173.209.64.74)
[07:59:24] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[08:00:18] *** Joins: johnjaye (~pi@173.209.64.74)
[08:02:05] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:02:57] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[08:05:46] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[08:08:56] *** Joins: johnjaye (~pi@173.209.64.74)
[08:14:26] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[08:17:01] *** Joins: johnjaye (~pi@173.209.64.74)
[08:22:36] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[08:22:42] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[08:23:25] *** Joins: johnjaye (~pi@173.209.64.74)
[08:28:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[08:29:52] *** Joins: johnjaye (~pi@173.209.64.74)
[08:31:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:35:06] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[08:36:30] *** Joins: johnjaye (~pi@173.209.64.74)
[08:41:54] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[08:44:34] *** Joins: johnjaye (~pi@173.209.64.74)
[08:50:30] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[08:51:08] *** Joins: johnjaye (~pi@173.209.64.74)
[08:52:32] *** Quits: Josh_2 (~user@197.185.100.162) (Quit: ERC (IRC client for Emacs 27.1))
[08:53:49] *** Joins: Josh_2 (~user@197.185.100.162)
[08:56:54] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[08:57:33] *** Joins: johnjaye (~pi@173.209.64.74)
[09:02:49] *** Quits: Josh_2 (~user@197.185.100.162) (Remote host closed the connection)
[09:02:52] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[09:03:28] *** Joins: Josh_2 (~user@197.185.100.162)
[09:07:06] *** Joins: johnjaye (~pi@173.209.64.74)
[09:12:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[09:14:53] *** Joins: johnjaye (~pi@173.209.64.74)
[09:19:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[09:22:39] *** Joins: johnjaye (~pi@173.209.64.74)
[09:28:22] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[09:30:43] *** Joins: johnjaye (~pi@173.209.64.74)
[09:36:10] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[09:37:18] *** Joins: johnjaye (~pi@173.209.64.74)
[09:42:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[09:43:52] *** Joins: johnjaye (~pi@173.209.64.74)
[09:49:28] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[09:52:11] *** Joins: johnjaye (~pi@173.209.64.74)
[09:57:24] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[10:01:00] *** Joins: johnjaye (~pi@173.209.64.74)
[10:06:34] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[10:08:42] *** Joins: johnjaye (~pi@173.209.64.74)
[10:14:16] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[10:15:11] *** Joins: johnjaye (~pi@173.209.64.74)
[10:18:43] *** Joins: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl)
[10:20:47] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[10:21:42] *** Joins: johnjaye (~pi@173.209.64.74)
[10:27:00] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[10:28:21] *** Joins: johnjaye (~pi@173.209.64.74)
[10:28:22] *** Joins: spiaggia (~user@2a01:cb19:150:3400:3132:e05c:e93:beff)
[10:32:24] *** Quits: jeffrey (~jeffrey@217-120-53-119.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[10:33:49] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[10:35:01] *** Joins: johnjaye (~pi@173.209.64.74)
[10:40:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[10:42:04] *** Joins: johnjaye (~pi@173.209.64.74)
[10:47:44] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[10:48:30] *** Joins: johnjaye (~pi@173.209.64.74)
[10:54:04] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[10:54:51] *** Joins: johnjaye (~pi@173.209.64.74)
[11:00:10] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[11:01:10] *** Joins: johnjaye (~pi@173.209.64.74)
[11:01:46] *** Joins: tewi (~tewi@apn-95-40-173-86.dynamic.gprs.plus.pl)
[11:06:24] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[11:08:57] *** Joins: johnjaye (~pi@173.209.64.74)
[11:14:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[11:20:51] *** Joins: johnjaye (~pi@173.209.64.74)
[11:26:31] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[11:27:14] *** Joins: johnjaye (~pi@173.209.64.74)
[11:30:45] *** Joins: shka (~herr@109.231.3.55)
[11:31:07] *** Quits: spiaggia (~user@2a01:cb19:150:3400:3132:e05c:e93:beff) (Quit: ERC (IRC client for Emacs 26.3))
[11:32:42] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[11:33:51] *** Joins: johnjaye (~pi@173.209.64.74)
[11:35:35] *** Quits: micro (~micro@user/micro) (Ping timeout: 256 seconds)
[11:37:07] *** Joins: micro (~micro@user/micro)
[11:39:16] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[11:40:19] *** Joins: johnjaye (~pi@173.209.64.74)
[11:46:00] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[11:46:35] *** Joins: johnjaye (~pi@173.209.64.74)
[11:51:37] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[11:54:21] *** Joins: johnjaye (~pi@173.209.64.74)
[11:59:40] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[12:00:51] *** Joins: johnjaye (~pi@173.209.64.74)
[12:06:16] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[12:07:10] *** Joins: johnjaye (~pi@173.209.64.74)
[12:10:51] *** Joins: ilmu1 (~ilmu@176.76.241.10)
[12:12:45] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[12:13:50] *** Quits: ilmu (~ilmu@176.76.243.150) (Ping timeout: 256 seconds)
[12:14:13] *** Joins: johnjaye (~pi@173.209.64.74)
[12:19:17] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[12:20:28] <tewi> https://termbin.com/zylg - would you say this interpretation is correct? and is there even something that has local scope, but indefinite extent? i imagine it would be something similar to local static variables in C, but i'm not sure
[12:20:48] *** Joins: johnjaye (~pi@173.209.64.74)
[12:25:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[12:26:28] <Josh_2> You can declare local variables special
[12:27:14] *** Joins: johnjaye (~pi@173.209.64.74)
[12:27:21] <beach> tewi: The term "extent" can be applied to an object, a binding, etc.  So it depends on what you mean here.
[12:27:46] <Josh_2> (defun x () (declare (special *a*)) *a*) (let ((*a* 1)) (declare (special *a*)) (x)) -> 1
[12:27:59] <beach> Josh_2: Why are you telling tewi this?
[12:28:23] <Josh_2> Seems to be what they were asking
[12:28:24] <tewi> can it be applied to an object? i thought it was only for references and bindings and such
[12:28:33] <tewi> yeah, i was asking that
[12:28:39] <beach> Look in the glossary.
[12:29:02] <tewi> the interval of time during which a reference to an object, a binding, an exit point, a tag, a handler, a restart, or an environment is defined. 
[12:29:04] <tewi> ?
[12:32:06] <beach> Josh_2: What makes you say that the binding in your example has lexical scope?
[12:32:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[12:32:30] <Josh_2> I didn't
[12:33:08] <Josh_2> I just answered the question how I interpreted it, seems I was correct
[12:33:14] <beach> OK, so let's think here.  tewi: what did you mean by "local scope"?
[12:33:48] *** Joins: johnjaye (~pi@173.209.64.74)
[12:33:51] <tewi> oh sorry i guess i used local instead of lexical
[12:34:48] <beach> I don't see how a binding can have lexical scope and indefinite extent.  But the object referred to by a lexical variable can certainly have indefinite extent.
[12:37:05] <tewi> and are the other examples in the paste correct, as far as the interpretation in the comments goes?
[12:37:59] <beach> Again, it depends on whether you refer to the binding or the object being bound.
[12:38:21] <beach> Certainly, 20 can be said to have indefinite extent.
[12:39:00] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[12:39:15] <beach> But it looks right if you are talking about the scope and extent of the bindings. 
[12:40:04] *** Joins: johnjaye (~pi@173.209.64.74)
[12:45:21] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 245 seconds)
[12:46:17] <tewi> right. i don't like talking about objects with extent, because i don't get how an object could have a dynamic extent for example
[12:46:28] *** Joins: johnjaye (~pi@173.209.64.74)
[12:46:31] <tewi> meanwhile for something like references or bindings or whatever it makes sense
[12:47:02] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Ping timeout: 240 seconds)
[12:47:44] <beach> Dynamic extent for an object means that it can be allocated on the stack, so it is an important concept.
[12:47:57] <beach> That's what the DYNAMIC-EXTENT declaration is about.
[12:49:11] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[12:49:19] <beach> Take: (let ((list (list 1 2 3))) (length list))
[12:49:39] <beach> Here, the list being bound to the variable LIST has dynamic extent.
[12:50:26] <tewi> what about (let ((list (list 1 2 3))) list)
[12:50:58] <beach> From the point of this expression, the list now has indefinite extent.
[12:51:08] <beach> *point of view of
[12:51:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 245 seconds)
[12:52:27] <tewi> is there a section in the hyperspec that even talks about allocation on the stack vs heap?
[12:52:29] <beach> But if you wrap it in (say) (length (let ((list (list 1 2 3))) list)), it again has dynamic extent. 
[12:52:57] <beach> I don't remember.  The standard tries to avoid terms that refer to implementation strategies.
[12:53:00] <tewi> well yeah, but you might as well argue that it just has no references so it's a dead object
[12:53:46] <beach> After the form has been evaluated, the object is dead, and that is precisely what dynamic extent means. 
[12:54:12] *** Joins: johnjaye (~pi@173.209.64.74)
[12:56:08] <beach> The glossary has "stack allocate".
[12:56:51] <tewi> right, so it's an implementation dependent thing
[12:57:13] <beach> Sure, no implementation is required to stack allocate anything.
[12:58:22] <beach> The dictionary entry on DYNAMIC-EXTENT mentions stack allocation.
[12:58:49] <beach> ... several times in fact.
[12:59:31] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 245 seconds)
[12:59:36] <beach> But I think that's it.
[13:00:14] <beach> So, again, the reason for the existence of the DYNAMIC-EXTENT declaration is the possibility for the implementation to allocate objects on the stack.
[13:01:23] <tewi> yeah
[13:02:03] *** Joins: johnjaye (~pi@173.209.64.74)
[13:05:24] *** Quits: opfez (~opfez@ti0013a400-1579.bb.online.no) (Ping timeout: 256 seconds)
[13:07:01] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[13:08:34] *** Joins: johnjaye (~pi@173.209.64.74)
[13:14:02] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[13:15:28] *** Joins: johnjaye (~pi@173.209.64.74)
[13:20:59] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[13:22:09] *** Joins: johnjaye (~pi@173.209.64.74)
[13:25:02] <tewi> i guess maybe something like a closure would be close to lexical scope, indefinite extent? 
[13:26:13] <tewi> since whatever is closed over will stay as long as you hold onto the reference, and it doesn't carry over to further function calls and stuff
[13:27:47] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[13:28:42] *** Joins: johnjaye (~pi@173.209.64.74)
[13:30:15] <beach> Well, I seem to have the opposite problem that you do.  I can handle the extent of objects, but I am having a hard time defining the extent of a binding. 
[13:34:21] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[13:35:03] *** Joins: johnjaye (~pi@173.209.64.74)
[13:36:11] <tewi> https://termbin.com/xof4 - wouldn't this be something of a lexical scope, indefinite extent?
[13:37:22] <beach> I'll let others have their say.
[13:40:35] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[13:41:26] *** Joins: johnjaye (~pi@173.209.64.74)
[13:44:27] <phoe> tewi: *a* calls TEST which then signals an error
[13:44:42] <phoe> because, in DEFUN TEST, X is an unbound variable
[13:45:19] <phoe> whereas the (SETF X Y) inside the anonymous function sets the lexically apparent binding of X
[13:45:46] <phoe> and I guess that "lexical scope, indefinite extent" suits a closure well
[13:46:18] <phoe> you can no longer access the binding once you are outside the lexical scope, but the closed-over values live for however long they live
[13:46:49] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[13:46:56] <phoe> as in, the values do not "disappear" outside some sort of lexical or dynamic scope
[13:50:20] *** Joins: opfez (~opfez@ti0013a400-5044.bb.online.no)
[13:52:40] *** Joins: johnjaye (~pi@173.209.64.74)
[13:58:23] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[13:59:07] *** Joins: johnjaye (~pi@173.209.64.74)
[14:03:41] <tewi> phoe: yeah, that was more or less my reasoning as well
[14:04:42] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[14:05:34] *** Joins: johnjaye (~pi@173.209.64.74)
[14:11:30] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[14:11:57] *** Joins: johnjaye (~pi@173.209.64.74)
[14:17:52] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[14:18:25] *** Joins: johnjaye (~pi@173.209.64.74)
[14:24:19] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[14:24:44] *** Joins: johnjaye (~pi@173.209.64.74)
[14:29:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[14:31:09] *** Joins: johnjaye (~pi@173.209.64.74)
[14:31:48] *** Quits: opfez (~opfez@ti0013a400-5044.bb.online.no) (Changing host)
[14:31:48] *** Joins: opfez (~opfez@user/opfez)
[14:37:06] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[14:37:36] *** Joins: johnjaye (~pi@173.209.64.74)
[14:43:37] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[14:44:02] *** Joins: johnjaye (~pi@173.209.64.74)
[14:44:37] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:49:00] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[14:50:28] *** Joins: johnjaye (~pi@173.209.64.74)
[14:55:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[14:57:10] *** Joins: johnjaye (~pi@173.209.64.74)
[15:02:58] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[15:03:42] *** Joins: johnjaye (~pi@173.209.64.74)
[15:09:13] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[15:09:56] *** Joins: johnjaye (~pi@173.209.64.74)
[15:14:57] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[15:16:18] *** Joins: johnjaye (~pi@173.209.64.74)
[15:17:43] <tewi> has anybody here read Let Over Lambda : 50 years of lisp by Doug Hoyte? I was wondering how it compares to On Lisp by Paul Graham, since both seem to be mainly concerned with the topic of macros(?)
[15:22:14] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[15:22:44] *** Joins: johnjaye (~pi@173.209.64.74)
[15:28:40] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[15:29:05] *** Joins: johnjaye (~pi@173.209.64.74)
[15:35:01] *** Quits: johnjaye (~pi@173.209.64.74) (Read error: Connection reset by peer)
[15:35:33] *** Joins: johnjaye (~pi@173.209.64.74)
[15:40:46] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[15:41:45] <Josh_2> I have read LoL
[15:41:54] *** Joins: johnjaye (~pi@173.209.64.74)
[15:47:42] <tewi> Josh_2: would you say it's a worthwhile read? it looks interesting
[15:47:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[15:48:02] <Josh_2> There is some useful information in it
[15:48:06] <Josh_2> can't say I've used much of it though
[15:48:09] *** Joins: johnjaye (~pi@173.209.64.74)
[15:48:30] <Josh_2> The problem with crazy macrology like that found in LoL is it becomes very hard for others to read
[15:54:05] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[15:54:37] *** Joins: johnjaye (~pi@173.209.64.74)
[15:58:06] <tewi> thanks, i guess i will put it on the bottom of my reading list
[16:00:34] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[16:01:33] *** Joins: johnjaye (~pi@173.209.64.74)
[16:06:37] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[16:07:46] *** Joins: johnjaye (~pi@173.209.64.74)
[16:13:01] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[16:14:19] *** Joins: johnjaye (~pi@173.209.64.74)
[16:20:16] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[16:21:54] *** Joins: johnjaye (~pi@173.209.64.74)
[16:27:34] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 250 seconds)
[16:28:13] *** Joins: johnjaye (~pi@173.209.64.74)
[16:33:59] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 256 seconds)
[16:34:33] *** Joins: johnjaye (~pi@173.209.64.74)
[16:39:48] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[16:40:54] *** Joins: johnjaye (~pi@173.209.64.74)
[16:46:12] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[16:47:20] *** Joins: johnjaye (~pi@173.209.64.74)
[16:51:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:52:36] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 240 seconds)
[16:53:46] *** Joins: johnjaye (~pi@173.209.64.74)
[16:56:37] *** Quits: ilmu1 (~ilmu@176.76.241.10) (Ping timeout: 240 seconds)
[16:59:43] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[17:00:09] *** Joins: johnjaye (~pi@173.209.64.74)
[17:00:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[17:02:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:05:50] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[17:06:38] *** Joins: johnjaye (~pi@173.209.64.74)
[17:12:10] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 272 seconds)
[17:13:06] *** Joins: johnjaye (~pi@173.209.64.74)
[17:19:04] *** Quits: johnjaye (~pi@173.209.64.74) (Remote host closed the connection)
[17:19:29] *** Joins: johnjaye (~pi@173.209.64.74)
[17:38:24] *** Joins: treflip (~user@user/treflip)
[17:44:35] *** Joins: eugercek (~user@user/eugercek)
[18:30:03] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:02:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:22:57] *** Joins: brandflake11 (~user@2607:b400:26:0:4380:5e92:2f20:c218)
[19:41:50] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[19:42:31] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[20:05:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:05:42] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[20:19:46] *** Joins: jealousmonk (~user@user/jealousmonk)
[20:28:11] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (Remote host closed the connection)
[20:34:16] *** Joins: Schnouki (e7aa4cfb39@2604:bf00:561:2000::178)
[20:34:17] *** Quits: Schnouki (e7aa4cfb39@2604:bf00:561:2000::178) (Changing host)
[20:34:17] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[20:35:58] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.4)
[20:37:56] *** Quits: brandflake11 (~user@2607:b400:26:0:4380:5e92:2f20:c218) (Remote host closed the connection)
[21:21:52] <drakonis> i'm currently writing a dag generation function that uses objects to store the graph edges
[21:22:58] <drakonis> putting the objects inside a list only stores the symbols, is there a better way to obtain the variable holding the object that the symbol points to, other than using eval?
[21:27:29] <drakonis> on each symbol in the list, that is.
[21:33:10] *** Joins: Bike (~Glossina@71.69.170.70)
[21:47:21] <pjb> drakonis: you can use closures. If the variables are lexical variables.
[21:47:47] <pjb> drakonis: see:  http://informatimago.com/articles/usenet.html#C-like-pointers-in-Lisp
[21:48:35] <drakonis> i'll try that
[21:48:36] <pjb> drakonis: but this is not a good idea to try to do that.  How do you justify  "obtain the variable holding the object" ?
[21:48:43] <drakonis> hmm
[21:48:51] <pjb> drakonis: instead, think of functions taking arguments and returning results.
[21:48:56] <pjb> and combine those functions.
[21:49:11] <drakonis> i have a list containing symbols that point towards variables holding instances of objects
[21:49:26] <pjb> This is a bad data structure.
[21:49:34] <pjb> Why do you want to include variables in such a data structure?
[21:49:49] <pjb> Use merely a list of objects!
[21:50:12] <pjb> Those objects can have names (symbols), (name node1) --> foo  (name node2) --> bar
[21:50:14] <drakonis> how?
[21:50:18] <drakonis> that's the question
[21:50:40] <drakonis> i tried to do that and it simply turns them into symbols inside the list
[21:50:43] <pjb> (defclass node () ((name :initarg :name :reader name))) (list (make-instance 'node :name 'foo) (make-instance 'node :name 'bar)) #| --> (#<node #x30200251E61D> #<node #x30200251E37D>) |# 
[21:50:55] <drakonis> hmm
[21:51:20] <drakonis> now, that wouldn't quite help with it
[21:51:39] <pjb> (defmethod print-object ((node node) stream) (print-unreadable-object (node stream :identity t :type t) (prin1 (name node) stream)) node) 
[21:51:39] <pjb> (list (make-instance 'node :name 'foo) (make-instance 'node :name 'bar)) #| --> (#<node foo #x30200255EA0D> #<node bar #x30200255E98D>) |# 
[21:51:52] <drakonis> because the object is referenced by other objects inside a slot
[21:52:43] <pjb> Then if your print-object method prints those other references, you will have to use *print-circle* but it may be easier to deal with it if you hide those other references for print-object.
[21:53:59] <pjb> Now, you could associate the names to the objects.  Several ways: store the object in symbol-value, or in symbol-plist, or put them in a map (a-list, hash-table, etc).
[21:54:32] <pjb> using symbol-value is simple, but this is a problem since other parts of the program may also want to use symbol-value.
[21:54:43] *** Joins: ilmu1 (~ilmu@176.76.241.10)
[21:54:43] *** ilmu1 is now known as ilmu
[21:54:48] <drakonis> just for reference
[21:54:49] <drakonis> https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/commencement.scm#n251
[21:54:52] <pjb> using symbol-plist would be better, you can use a unique indicator keyword.
[21:55:08] <pjb> using an a-list or hash-table is the modern way to do it.
[21:55:47] <drakonis> i'm rewriting guix in cl
[21:56:02] <pjb> (defvar *names-to-nodes* (make-hash-table))  (defun node-named (name) (gethash name *names-to-nodes*)) (defun register-node (node) (setf (gethash (name node) *names-to-nodes*) node))
[21:56:26] <pjb> (register-node (make-instance 'node :name 'foo)) (register-node (make-instance 'node :name 'bar))
[21:56:32] <pjb> (node-named 'foo) #| --> #<node foo #x30200243A8CD> ; t |# 
[21:56:54] <pjb> Then you can use lists of names: (foo bar)  and use node-named to find the node: (mapcar 'node-named '(foo bar)) #| --> (#<node foo #x30200243A8CD> #<node bar #x30200243AAFD>) |# 
[21:58:29] <pjb> Then those names become node designators: (defgeneric node (designator) (:method ((node node))  node) (:method ((name symbol)) (node-named node)))
[21:59:24] <pjb> so you can mix names and nodes: (mapcar 'node (list (register-node (make-instance 'node :name 'quux)) 'foo)) #| --> (#<node quux #x3020025BE9ED> #<node foo #x30200243A8CD>) |# 
[21:59:28] <drakonis> every node is a package by the way
[21:59:41] <pjb> Do you mean a CL:PACKAGE?
[21:59:47] <drakonis> no
[22:00:00] <pjb> Then, whatever. It can be any object.
[22:00:03] <drakonis> more like in the sense that they're tasks to be run
[22:00:24] <drakonis> it can execute build system tasks
[22:01:35] <drakonis> but that's a minor design consideration
[22:01:43] <drakonis> since i need a dag before anything
[22:04:02] <pjb> There are various graph libraries: https://cliki.net/site/search?query=graph
[22:05:21] <drakonis> it is also an exercise in learning cl
[22:07:04] <drakonis> hmm
[22:07:10] <drakonis> thank you very much
[22:40:54] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[23:02:35] *** Quits: opfez (~opfez@user/opfez) (Ping timeout: 252 seconds)
[23:04:29] *** Joins: opfez (~opfez@ti0013a400-5426.bb.online.no)
[23:13:00] *** Quits: tewi (~tewi@apn-95-40-173-86.dynamic.gprs.plus.pl) (Ping timeout: 240 seconds)
[23:15:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
