[00:01:32] *** Quits: nebuchadnezzar (~dad@82-65-17-178.subs.proxad.net) (Ping timeout: 240 seconds)
[00:01:40] *** Joins: nebuchadnezzar (~dad@82-65-17-178.subs.proxad.net)
[00:10:30] <japhb> Olson?
[00:10:40] <japhb> That's ... dedication.
[00:23:55] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:24:09] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[00:25:29] <m_athias> IIRC olson wrote the code and eggert maintained the data. there was some podcast about it some time ago but I didn't manage to dig it out.
[01:24:09] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:24:09] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[01:26:02] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[02:07:08] *** Parts: getimiskon (~getimisko@2a02:587:a037:c00:32d1:6bff:fe91:3cc9) (WeeChat 3.4)
[02:15:29] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[02:15:44] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[02:18:36] *** Joins: sena_kun (~koto@94.142.239.45)
[02:19:57] *** Quits: Altai-man (~koto@94.142.239.45) (Ping timeout: 240 seconds)
[02:25:10] *** Joins: Curiosa (~Curiosa@37.165.12.39)
[02:39:05] <Curiosa> Would it be possible to write an assembler in Raku that takes as input some text and outputs Blobs, then use Nativecall to invoke those Blobs as native functions?
[02:39:32] <moon-child> Curiosa: you would need to use mmap
[02:39:39] <moon-child> I have a demo, one sec lemme see if I can find it
[02:39:59] <moon-child> Curiosa: http://ix.io/2W7Q/perl6
[02:40:44] <Curiosa> That’s great!
[02:44:16] <Curiosa> Well, one would need to write an assembler around that
[02:46:24] *** Joins: Esoren (~Esoren@2601:981:c200:10bc:1d4f:4908:ffe8:bd77)
[02:46:25] <moon-child> yeah
[02:46:36] <moon-child> but this is the 'invoke those blobs as native functions' part
[02:47:42] <Curiosa> One could start with a primitive assembler like the one in this video: https://m.youtube.com/watch?v=Z73eKb2-YrU&t=30
[02:47:57] <Curiosa> Of course for x64 it’s more difficult
[02:57:36] *** Quits: Curiosa (~Curiosa@37.165.12.39) (Quit: Client closed)
[03:01:40] *** Quits: lichtkind (~lichtkind@p200300d0a73effaed8399111d79be78e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:04:14] <guifa> MasterDuke japhb m_athias Olson wrote the initial code, etc, but now it's handled by IANA who has a process set up for updates
[03:05:10] *** Joins: Curiosa (~Curiosa@37.165.12.39)
[03:09:35] <Curiosa> Let’s say one want to write a miniassembler like the one in video. Is there a way from Nativecall to get the symbol tables?
[03:12:13] <moon-child> Curiosa: what do symbol tables have to do with an assembler?  What are you tryihng to do?
[03:14:22] *** Joins: monkey_ (~user@190.104.116.153)
[03:14:45] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Remote host closed the connection)
[03:15:09] <Curiosa> Just tell ant to mess around
[03:16:11] <Curiosa> He symbol table is useful
[03:16:45] <Curiosa> Because on the 6502 you knew where all the important values and procedure were located in the rom
[03:17:06] <Curiosa> In a modern OS it’s all dynamically randomized
[03:17:14] <Curiosa> So you need to find them
[03:17:45] <moon-child> Sure.  So: grab function symbol, nativecast to pointer, nativecast to size_t, copy it into your buffer
[03:18:04] <Curiosa> that works
[03:19:18] <Curiosa> You could also pass it as an argument to the function
[03:37:59] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:39:39] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:42:23] <Curiosa> Parsing asm with raku should be straightforward, What is really difficult is to make an opcode table
[03:42:50] <Curiosa> Since x64 is really a mess
[03:45:17] *** Quits: Curiosa (~Curiosa@37.165.12.39) (Quit: Client closed)
[03:45:31] *** Joins: Curiosa (~Curiosa@37.165.12.39)
[03:47:42] <moon-child> yes, it is
[03:48:40] <moon-child> I spend around 1.2k lines of code in my implementation, and I still don't do some stuff
[03:48:49] <moon-child> (no avx512, mmx, or x87)
[03:49:10] <Curiosa> Wow, congrats!
[03:49:26] <moon-child> and that's not counting the instruction tables themselves, which are a similar size, nor the label logic
[03:49:52] <Curiosa> Are you open sourcing it?
[03:50:04] <moon-child> once it is complete enough to be useful to somebody
[03:50:59] <Curiosa> You could leave something like avx512 out , if anyone will need they will provide
[03:51:52] <moon-child> my goal is to provide a complete representation of x86 machine code, providing all potentially useful interpretations of all byte sequences
[03:52:18] <moon-child> (i.e. disassembler is the interesting part, but still have to represent all the same things)
[03:52:20] <moon-child> if you just want an assembler, those are a dime a dozen
[03:55:37] <Curiosa> I think Rakudo still misses a native assembler
[03:56:30] *** Quits: Curiosa (~Curiosa@37.165.12.39) (Quit: Client closed)
[03:56:41] *** Joins: Curiosa (~Curiosa@37.165.12.39)
[03:57:06] <Curiosa> One could write a c compiler once he has an assembler
[03:57:11] <moon-child> my assembler is not written in raku.  So it is a moot point
[03:57:31] <moon-child> if you want to write a c compiler, I suggest emitting textual assembly and targeting gas or nasm
[03:57:43] <moon-child> making a native assembler is an interesting and worthwhile project, but it is certainly not necessary
[04:01:57] <Curiosa> Nothing is necessary in modern computing
[04:02:41] <moon-child> sure.  I think that's a bit of a reductionist argument though.  Gcc still pipes to gas
[04:04:25] <Curiosa> I think that in terms of interoperability with C, C++ got it right.
[04:04:56] <Curiosa> And everyone else (a part Objective C) wrong
[04:05:13] <Curiosa> Sauf the language that are written in C
[04:05:22] <Curiosa> And Raku is not one of them
[04:05:46] <moon-child> sure.  You imply that interoperability in c is more important than other language characteristics.  I do not agree with that
[04:05:52] <moon-child> if you want to use c++, use c++
[04:06:42] <Curiosa> No, I imply that Raku doesn’t express its potentia
[04:07:07] <Curiosa> Because of the fact that it’s written in Raku and doesn’t compile c
[04:09:45] <Curiosa> Imagine having to rewrite everything in Raku, and then having to follow every single new version and development happening in C only to keep being compatible
[04:10:14] <Curiosa> That’s what languages as D, Rust, Go, do it
[04:10:46] <Curiosa> In Perl, python you just need to recompile
[04:11:55] <Curiosa> There are other flaws in Raku, such as the reinvented wheels to parallel compilation
[04:12:10] <Curiosa> Make files are a thing from quite long
[04:15:39] <Curiosa> By the way, artificial intelligence will eventually be able to solve the halting problem in like 99.999% of software, and there will be no more intelligible programming languages
[04:16:13] <Esoren> o_O
[04:17:56] <Curiosa> moon-child said complete representation of x86 machine code
[04:18:17] <Curiosa> Seems like Turing proved this impossible
[04:18:40] <Curiosa> But ai gurus will solve this statistically I’m sure about that
[04:18:48] <moon-child> I exclude the possibility of runtime code generation
[04:18:52] <moon-child> otherwise it is possible
[04:20:33] *** Quits: Curiosa (~Curiosa@37.165.12.39) (Quit: Client closed)
[04:24:44] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[04:30:08] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[04:31:24] *** Quits: andinus (andinus@tilde.institute) (Remote host closed the connection)
[04:34:47] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[04:34:55] <Xliff> \
[04:34:58] <Xliff> \o
[04:35:07] <Xliff> What's the best way to get the method OBJECT of a method?
[04:35:30] <Xliff> class a { method AA { } }; A.^lookup('AA').gist.say
[04:35:34] <Xliff> m: class a { method AA { } }; A.^lookup('AA').gist.say
[04:35:34] <camelia> rakudo-moar ac009507a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    A used at line 1. Did you mean 'a'?␤␤»
[04:35:40] <Xliff> m: class a { method AA { } }; a.^lookup('AA').gist.say
[04:35:40] <camelia> rakudo-moar ac009507a: OUTPUT: «AA␤»
[04:35:58] <Xliff> ^ Like the above, but without the .^lookup
[04:36:14] <Xliff> class a { method AA { } }; a.AA.METHOD.gist.say
[04:36:15] <evalable6> Xliff, rakudo-moar ac009507a: OUTPUT: «Nil␤»
[04:36:25] <Xliff> class a { method AA { } }; a.AA.^name.say
[04:36:26] <evalable6> Xliff, rakudo-moar ac009507a: OUTPUT: «Nil␤»
[04:36:45] <Xliff> class a { method AA { } }; a.AA.^name.say # a.AA is still a METHOD CALL
[04:36:45] <evalable6> Xliff, rakudo-moar ac009507a: OUTPUT: «Nil␤»
[04:36:57] <Xliff> Was hoping it would work like lexical vars....
[04:37:02] <Xliff> mmy $a = 
[04:37:13] <Xliff> m: my $a = 0; $a.VAR.name.say
[04:37:13] <camelia> rakudo-moar ac009507a: OUTPUT: «$a␤»
[04:48:47] <Esoren> I don't know much beyond what I've read in the docs, but I have read this:  https://docs.raku.org/language/packages#Class_member_lookup
[04:49:56] <Xliff> Yes, but that uses .^lookup, which is what I want to avoid. 
[04:50:17] <Esoren> No other way is suggested
[04:50:31] <Xliff> Yes. I was hoping that was no longer true. :)
[05:04:37] *** Quits: qorg11 (~lain@36.pool213-77-252.dynamic.orange.es) (Ping timeout: 240 seconds)
[05:05:24] *** Joins: qorg11 (~lain@2605:6400:c022:fa04::666)
[05:13:45] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[05:15:17] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[05:19:17] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Ping timeout: 240 seconds)
[05:22:43] <guifa> Xliff: you have to use HOW methods to get methods
[05:25:51] <Xliff> Well, piffule. .^lookup is expensive. It shouldn't be expensive to lookup methods.
[05:26:28] <guifa> perhaps find_method is a bit faster, I haven't measured, and I've never been super clear on which stuff is Raku and which is Rakudo specific for that stuff
[05:52:38] <Xliff> class a { method AA { } }; a.^lookup(
[05:53:10] <Xliff> class a { method AA { } }; a.^lookup('AA') for 10000; say now - INIT now; a.^find_method('aa'); say now - INIT.now
[05:53:21] <Xliff> m: class a { method AA { } }; a.^lookup('AA') for 10000; say now - INIT now; a.^find_method('aa'); say now - INIT.now
[05:53:21] <camelia> rakudo-moar ac009507a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required after keyword 'INIT'␤at <tmp>:1␤------> 3ow; a.^find_method('aa'); say now - INIT7⏏5.now␤»
[05:53:29] <Xliff> m: class a { method AA { } }; a.^lookup('AA') for 10000; say now - INIT now; a.^find_method('aa'); say now - INIT now
[05:53:29] <camelia> rakudo-moar ac009507a: OUTPUT: «0.00070379␤0.003005477␤»
[06:00:55] <Xliff> So... ^lookup is faster.
[06:18:32] <japhb> Xliff: Several problems there: 1. You're using `INIT now` as your start time and then doing two different measurements, 2. You're measuring times short enough that background interrupts or other task switches can affect the results, 3. Always looking up the same method means you're measuring the efficiency of caching that method, 4. You're doing sufficiently different numbers of iterations that you're 
[06:18:38] <japhb> measuring steady state in one case, and first-run performance in the other.
[06:19:17] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:19:17] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:20:20] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:20:21] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:20:21] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:20:21] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:20:21] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:20:21] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:20:21] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:20:21] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:20:21] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:20:21] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[07:21:11] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[07:21:18] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[07:21:48] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[07:21:56] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[07:21:59] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[07:22:08] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[07:22:58] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[07:42:49] *** Joins: Colt (~Colt@user/colt)
[08:20:55] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:21:50] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[08:21:51] *** Quits: Esoren (~Esoren@2601:981:c200:10bc:1d4f:4908:ffe8:bd77) (Quit: Client closed)
[08:22:05] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[08:23:08] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[08:23:24] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[08:23:27] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[09:18:37] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[09:20:31] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[09:20:44] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[09:22:31] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[09:22:49] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:23:17] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[09:35:46] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[09:38:33] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:17:47] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:c855:f596:5d07:923e) (Remote host closed the connection)
[10:22:45] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[10:31:44] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[10:33:59] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[10:40:55] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:49:34] *** Quits: seednode99 (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:50:13] *** Joins: seednode99 (~seednode@user/seednode)
[11:22:19] <Geth> ¦ ecosystem/alabamenhu-patch-2: 4c0223b885 | L'Alabameñu++ (committed using GitHub Web editor) | META.list
[11:22:19] <Geth> ¦ ecosystem/alabamenhu-patch-2: Update META.list
[11:22:19] <Geth> ¦ ecosystem/alabamenhu-patch-2: 
[11:22:19] <Geth> ¦ ecosystem/alabamenhu-patch-2: Add new Timezones::ZoneInfo module to ecosystem (required for new DateTime::Timezones module)
[11:22:19] <Geth> ¦ ecosystem/alabamenhu-patch-2: review: https://github.com/Raku/ecosystem/commit/4c0223b885
[11:22:39] <Geth> ¦ ecosystem: alabamenhu++ created pull request #602: Update META.list
[11:22:39] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/pull/602
[11:26:50] <guifa> lizmat ^^ took a few more hours but it's finally there (yay for writing good test files, found some odd time zone names that I hadn't anticipated handling differently).  Now on to learning RakuAST ^^
[11:26:55] <guifa> ^_^  I meant
[11:48:04] <Geth> ¦ ecosystem: 4c0223b885 | L'Alabameñu++ (committed using GitHub Web editor) | META.list
[11:48:04] <Geth> ¦ ecosystem: Update META.list
[11:48:04] <Geth> ¦ ecosystem: 
[11:48:04] <Geth> ¦ ecosystem: Add new Timezones::ZoneInfo module to ecosystem (required for new DateTime::Timezones module)
[11:48:04] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/4c0223b885
[11:48:04] <Geth> ¦ ecosystem: 368c15e54e | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list
[11:48:04] <Geth> ¦ ecosystem: Merge pull request #602 from Raku/alabamenhu-patch-2
[11:48:06] <Geth> ¦ ecosystem: 
[11:48:08] <Geth> ¦ ecosystem: Update META.list
[11:48:10] <Geth> ¦ ecosystem: review: https://github.com/Raku/ecosystem/commit/368c15e54e
[11:50:13] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[11:50:14] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[12:02:38] *** Quits: gugod (gugod@li7-202.members.linode.com) (Quit: ZNC - http://znc.in)
[12:40:14] *** Joins: lichtkind (~lichtkind@p200300d0a73effaed8399111d79be78e.dip0.t-ipconnect.de)
[12:51:00] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[12:53:17] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:40:15] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:53:10] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:13:53] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[14:14:53] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[14:46:57] *** Joins: frost (~frost@user/frost)
[14:59:13] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Remote host closed the connection)
[15:01:19] *** Joins: gugod (gugod@li7-202.members.linode.com)
[15:18:59] <Xliff> Has anyone looked at Advent #24?
[15:19:30] <Xliff> It begs for RakuAST. Until then, is there a writeup for the current QAST setup? How would run execute a QAST tree?
[15:27:47] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:36:59] *** Joins: frost (~frost@user/frost)
[15:38:13] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:40:15] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:11:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[16:51:01] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:53:26] *** Joins: frost (~frost@user/frost)
[16:59:44] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[17:03:57] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Ping timeout: 240 seconds)
[17:09:57] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[17:19:17] <MasterDuke> Xliff: https://github.com/Raku/nqp/blob/master/docs/qast.markdown
[17:28:15] *** Joins: lichtkind_ (~lichtkind@p200300d0a73eff4fd8399111d79be78e.dip0.t-ipconnect.de)
[17:30:56] *** Quits: lichtkind (~lichtkind@p200300d0a73effaed8399111d79be78e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:36:39] *** Joins: lostsoul (~lostsoul@138.97.14.69)
[17:49:39] *** Quits: lostsoul (~lostsoul@138.97.14.69) (Ping timeout: 256 seconds)
[17:54:47] *** Joins: hasrthur (~hasrthur@45.89.88.214)
[18:13:01] <Xliff> MasterDuke: https://replit.com/@Xliff/advcent-24-2021#main.raku
[18:38:30] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:52:44] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[19:03:07] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[19:24:57] *** Joins: epony (epony@user/epony)
[19:37:57] *** Joins: hihihi (~hihihi@76-224-218-98.lightspeed.stlsmo.sbcglobal.net)
[19:38:24] *** Quits: hihihi (~hihihi@76-224-218-98.lightspeed.stlsmo.sbcglobal.net) (Client Quit)
[19:51:25] <guifa> Xliff have you started working with RakuAST yet?
[19:53:32] <guifa> Also… does anyone know how to throw a custom warning?  I can't quite seem to get it right 
[19:54:34] <guifa> m: class Foo is CX::Warn { ; }; warn Foo; CONTROL { when Foo { say "captured foo" } default { say "got a ", .WHAT.say } }
[19:54:35] <camelia> rakudo-moar ac009507a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3ONTROL { when Foo { say "captured foo" }7⏏5 default { say "got a ", .WHAT.say } }␤»
[19:54:39] <discord-raku-bot> <Anton Antonov#7232> @guifa Meaning, not just using `warn`  or `note`?
[19:54:51] <guifa> m: class Foo is CX::Warn { ; }; warn Foo; CONTROL { when Foo { say "captured foo" }; default { say "got a ", .WHAT.say } }
[19:54:51] <camelia> rakudo-moar ac009507a: OUTPUT: «(Warn)␤got a True␤»
[19:56:03] <guifa> m: class Foo is CX::Warn { ; }; Foo.new.throw; CONTROL { when Foo { say "captured foo" } default { say "didn't capture" } }
[19:56:04] <camelia> rakudo-moar ac009507a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3ONTROL { when Foo { say "captured foo" }7⏏5 default { say "didn't capture" } }␤»
[19:56:13] <guifa> m: class Foo is CX::Warn { ; }; Foo.new.throw; CONTROL { when Foo { say "captured foo" }; default { say "didn't capture" } }
[19:56:13] <camelia> rakudo-moar ac009507a: OUTPUT: «captured foo␤»
[19:56:20] <guifa> ^^  that one works BUT 
[19:56:32] <guifa> m: class Foo is CX::Warn { ; }; Foo.new.throw; 
[19:56:32] <camelia> rakudo-moar ac009507a: OUTPUT: «control exception without handler␤  in block <unit> at <tmp> line 1␤␤»
[19:56:46] <guifa> ^^ this ends up dying because there's no CONTROL, but that's not how a normal warn works
[20:09:29] *** Joins: razetime (~quassel@49.207.209.26)
[20:39:48] *** Quits: razetime (~quassel@49.207.209.26) (Ping timeout: 268 seconds)
[20:50:12] <gfldex> guifa: costum control exceptions are not well supported by Rakudo.
[20:53:36] <gfldex> see: https://github.com/rakudo/rakudo/issues/4227
[21:33:18] *** Joins: Skarsnik__ (~Skarsnik@91-170-31-218.subs.proxad.net)
[21:36:19] *** Quits: Skarsnik_ (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 256 seconds)
[21:38:31] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:39:59] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:28:29] *** Quits: sena_kun (~koto@94.142.239.45) (Read error: No route to host)
[22:28:43] *** Joins: sena_kun (~koto@94.142.239.45)
[22:34:57] *** Joins: Sgeo (~Sgeo@ool-18b9875e.dyn.optonline.net)
[23:23:50] *** Quits: hasrthur (~hasrthur@45.89.88.214) (Remote host closed the connection)
[23:28:03] *** Joins: thundergnat (~steve@2601:80:8600:2543:2129:3fcf:f399:9779)
[23:29:55] <thundergnat> Anton Antonov:  https://rosettacode.org/wiki/Finite_state_machine#Raku was contributed / written by rosettacode user smls. I do not know his IRL name and wouldn't dox him if I did.
[23:32:34] <thundergnat> He does have a github repository under the same user name, but it hasn't been active for some time.
[23:33:46] <thundergnat> In general all code on Rosetta code is under the GNU Free Documentation License. Refer to https://rosettacode.org/wiki/Rosetta_Code:Copyrights for specific guidance.
[23:34:59] <thundergnat> I have written a lot of Raku entries for Rosettacode (probably around 600-800) but that specific one was not by me.
