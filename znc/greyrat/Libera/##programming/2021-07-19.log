[00:01:40] *** Quits: b1101 (~b1101@ool-44c01641.dyn.optonline.net) (Quit: b1101)
[00:02:07] <user51> vinite automata :)
[00:02:37] <kzootech> vi has ruined me
[00:02:41] <GeDaMo> Randomly change key bindings, that'll make it more exciting :P
[00:02:48] <pyzozord> heheh, that would make a good irc nick, viniteautomoaton :P
[00:02:49] <kzootech> i think ESC:wq is how oy exit every program
[00:03:05] <pyzozord> maybe that's too much finiteautomaton would be good too
[00:03:17] <user51> i made DEL work as E, but i keep forgetting to usei t
[00:03:33] <user51> muscle memory..
[00:03:43] <user51> i also made \e quit insert mode
[00:04:06] <pyzozord> GeDaMo: write a plugin that randomly reassignes one key every 5 seconds
[00:04:08] <user51> but i never use either the would-be escape or the would-be ESC
[00:04:36] <user51> i wanted to write a text editor at some point
[00:05:26] *** Joins: frm (~frm@user/frm)
[00:05:50] <user51> but it also quickly involves more than just text editing, would be sad not to have say regex
[00:05:52] *** Joins: enoq_ (~enoq@194-208-179-35.lampert.tv)
[00:05:53] <pyzozord> still need to write a new vi mode that operates on abstract syntax tree instead of text lines
[00:06:11] <kzootech> i think its kind of funny that ive been using vi/vim for about 25 years i would guess, my vimrc is 27 lines long including comments lol
[00:06:15] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:06:29] <user51> my vimrc is mostly maps and abbrs iirc
[00:06:41] *** Quits: frm (~frm@user/frm) (Client Quit)
[00:06:55] <beaky> nice i like vim
[00:07:01] <beaky> though i now use emacs
[00:07:21] <pyzozord> user51: adding regex is easy, one from libmusl is nice
[00:07:22] *** Quits: enoq_ (~enoq@194-208-179-35.lampert.tv) (Client Quit)
[00:07:41] <pyzozord> user51: or structural regexps from plan9, I'm sure you can compile it as a library
[00:07:58] <user51> pyzozord: i tried sam
[00:08:11] <pyzozord> user51: I never did, how was your experience?
[00:08:16] <kzootech> http://codepad.org/WP2TQYJg the entirety of my vimrc after ~25 years lol
[00:08:23] <user51> it blows. somehow it mixed up character based regex matching with a line-based editor
[00:08:25] <kzootech> its been longer in the past
[00:08:53] <novns> plan9 is hard to use because their bytes are 9 bits long
[00:09:28] <user51> pyzozord: you should give it (and acme) a shot, but the mouse focus is really annoying
[00:09:34] <novns> and their bits have three states
[00:09:37] <user51> i got carpal tunnel a day later
[00:09:40] <pyzozord> novns: good troll, I almost asked if that's really true
[00:09:51] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[00:09:57] <GeDaMo> "Implementing Regular Expressions" https://swtch.com/~rsc/regexp/
[00:10:07] <kzootech> i was thinking "8 for extended ascii, 1 for parity"
[00:10:21] <pyzozord> user51: yeah I'm not int o sam's mouse gesturing either. But that syntax seemed very cool
[00:10:28] <beaky> plan9 had native utf8
[00:10:46] <user51> imo the main issue was that the 'line' boundary was broken
[00:10:53] <novns> well, the original definition of byte is "a set of any number of bits, usually 6"
[00:10:55] <pyzozord> beaky: what is "native utf-8"?
[00:11:10] <kzootech> how many characters per a line do you allow yourself?
[00:11:21] <beaky> before plan9 everything assumed like ascii
[00:11:28] <user51> it's one of those cases where an interestin idea doesn't work well in practice because negative area is important
[00:11:30] *** Joins: arcatech (~arcatech@user/arcatech)
[00:11:32] <beaky> but then plan9 came with utf-8 they invented ti
[00:11:50] <pyzozord> beaky: ascii is utf-8, no?
[00:12:03] <pyzozord> *a subset of
[00:12:15] <novns> kzootech, 8 for enlarged ascii, 1 for purity
[00:12:18] <beaky> yes but not all utf8 is ascii so the plan9 people were very careful to make sure everything was utf8
[00:12:32] <pyzozord> oh i see
[00:12:35] <kzootech> novns: lol a purity bit
[00:13:02] * Inhahe wonders if novns means parity =4p
[00:13:06] <user51> rot bit! :)
[00:13:16] <kzootech> parody bit
[00:13:20] <novns> a poverty bit
[00:13:46] *** Joins: b1101 (~b1101@ool-44c01641.dyn.optonline.net)
[00:14:04] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[00:14:51] <user51> this day was a nasty bit.. good night!
[00:14:54] *** Quits: user51 (~user51@77.124.42.70) (Quit: leaving)
[00:14:55] <pikapika> novns, wheres your north
[00:15:11] <novns> pikapika, there
[00:15:27] * novns point unpolitely
[00:15:35] <pikapika> novns, astronomer types need to know the true north
[00:16:28] *** Joins: arcatech (~arcatech@user/arcatech)
[00:16:46] <novns> pikapika, just stick to Z axis, it points to the north
[00:17:18] <pikapika> novns, I'll have to lay down the goddamn axes on the ground first though
[00:17:19] <pikapika> Fiesty fuckers
[00:17:52] *** Joins: nekobyte (~nekoIsAL@user/nekobit)
[00:18:11] * pikapika pats nekobyte 
[00:18:26] <nekobyte> hi desu
[00:18:31] <eyynet4> who came up with Z = up/down
[00:18:32] *** Quits: shailangsa (~shailangs@host86-186-196-229.range86-186.btcentralplus.com) (Ping timeout: 258 seconds)
[00:18:51] <eyynet4> it should be Y axis1`!! grumbles
[00:18:51] *** Quits: nekobyte (~nekoIsAL@user/nekobit) (Client Quit)
[00:18:53] <pikapika> Its just an axis, you can point it anywhere
[00:19:10] *** Quits: gitgoood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 246 seconds)
[00:19:23] <GeDaMo> XY was on a flat piece of paper
[00:19:27] <eyynet4> this is why blender UI was confusing to me
[00:19:37] *** Joins: nekobyte (~nekoIsAL@user/nekobit)
[00:21:40] *** Quits: eyynet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[00:22:10] *** Quits: src (~src@user/src) (Ping timeout: 268 seconds)
[00:23:24] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 268 seconds)
[00:23:28] *** Joins: Mangy_Dog (~Mange@user/mangy-dog/x-7397214)
[00:27:18] *** Joins: gitgoood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[00:27:18] *** Joins: kawics11 (~ta@catv-80-99-244-169.catv.broadband.hu)
[00:32:08] *** Quits: nekobyte (~nekoIsAL@user/nekobit) (Read error: Connection reset by peer)
[00:32:56] *** Joins: nekobyte (~nekoIsAL@user/nekobit)
[00:33:33] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[00:35:56] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[00:37:35] *** Quits: nekobyte (~nekoIsAL@user/nekobit) (Read error: Connection reset by peer)
[00:38:10] *** Joins: nekobyte (~nekoIsAL@user/nekobit)
[00:40:17] *** nekobyte is now known as nekodesu
[00:41:38] *** Joins: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c)
[00:43:28] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[00:43:52] *** Joins: CodePoint (~BitShift@47.186.145.58)
[00:44:51] *** Quits: kawics11 (~ta@catv-80-99-244-169.catv.broadband.hu) (Quit: WeeChat 3.2)
[00:45:06] *** Quits: Haxxa (~Haxxa@122-199-44-120.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:08] *** Joins: kawics11 (~ta@catv-80-99-244-169.catv.broadband.hu)
[00:46:04] *** Joins: Haxxa (~Haxxa@122-199-44-120.ip4.superloop.com)
[00:46:13] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 268 seconds)
[00:46:29] *** Joins: Wafficus (~user@70.126.240.148)
[00:46:54] <Wafficus> if I wanted to programmatically add images to an HTML page but refer to them via a JSON file, would this be a JS idea or could I pull this off with a Python 3 script?
[00:47:11] <Wafficus> asking because I wanted to make an art gallery page, but didn't want to have to create a ton of <img /> tags
[00:47:44] <beaky> informal naive cubical type theory for complete beginners: what is it and why is it useful http://philsci-archive.pitt.edu/17148/1/bentzen2019naive.pdf
[00:48:19] *** Joins: digilink (~digilink@user/digilink)
[00:49:31] <pulse> Wafficus, JS for client-side, PHP or anything your server supports for server-side
[00:50:17] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[00:50:32] *** Joins: shailangsa (~shailangs@host86-145-14-107.range86-145.btcentralplus.com)
[00:50:39] *** Joins: smultron (~smultron@c-73-239-231-28.hsd1.wa.comcast.net)
[00:52:31] *** Quits: shailangsa (~shailangs@host86-145-14-107.range86-145.btcentralplus.com) ()
[00:52:36] *** Joins: audio (~audio@2603-8081-1800-00ad-f446-7ebf-416d-c2f1.res6.spectrum.com)
[00:57:09] *** Joins: paulo_ (paulo_@user/paulo/x-9032687)
[00:57:23] <paulo_> can't believe it's already september
[00:57:35] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[00:58:01] *** Quits: magla (~gelignite@55d4e6f7.access.ecotel.net) (Quit: Stay safe!)
[01:00:52] <lucf117> yeah, you know, time just flyes. Suddenly I'm 32 yo. Time to find my first job and rent my own place maybe
[01:01:29] <pyzozord> lucf117: better later than never :P
[01:02:13] <pyzozord> sorry that was mean, and uncalled for. No idea what got into me
[01:03:46] <pyzozord> I guess I'm just surprised how one could survive up to that age without ever having to work
[01:03:57] <pyzozord> maybe a bit jelousy there
[01:04:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:07:27] *** Quits: scjosh (~scjosh@206.189.79.69) (Quit: The Lounge - https://thelounge.chat)
[01:07:45] *** Joins: scjosh (~scjosh@206.189.79.69)
[01:09:09] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[01:09:22] *** Quits: strudl (~strudl@user/strudl) (Quit: got milk?)
[01:09:37] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:09:50] *** Joins: strudl (~strudl@user/strudl)
[01:09:56] *** Quits: Wafficus (~user@70.126.240.148) (Quit: ERC (IRC client for Emacs 27.2))
[01:12:38] *** Quits: Axiomatik (~Axiomatik@83-91-97-60-cable.dk.customer.tdc.net) (Remote host closed the connection)
[01:15:42] <Jigsy> I'm 34 and never worked.
[01:15:45] <Jigsy> (Don't ask.)
[01:16:19] <paulo_> trust fund baby?
[01:16:24] <InPhase> My first job was at 15.
[01:16:34] <Jigsy> paulo_: No.
[01:16:43] <Jigsy> I badly need a job.
[01:16:50] <paulo_> won the lottery?
[01:16:59] <paulo_> I see, how do you survive modern life?
[01:16:59] <Jigsy> But when you're told you're not the right criteria to work at a supermarket, after a while, you more or less stop caring.
[01:17:20] <Jigsy> I don't, really.
[01:17:35] <dartmouthed> I'm sorry to hear that, Jigsy. Is there maybe a way we can help?
[01:17:49] <Jigsy> No. Besides, this is my problem, not yours. :P
[01:18:13] <InPhase> My first computer-related job was at 18, building a 1998-era website.  It was a good upgrade from working in fast food.
[01:18:22] <dartmouthed> The whole concept of "helping" is based on other people's problems
[01:18:43] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 252 seconds)
[01:18:47] <dartmouthed> So let us know if there's any way we can lend you a hand, Jigsy
[01:18:59] <Jigsy> I'll keep that in mind.
[01:19:25] <InPhase> Jigsy: Let's just say, if you ever want advice on job hunting or resume prep for programming jobs, I declare this a reasonable channel to raise such questions in.
[01:20:19] <dartmouthed> I second that, yes
[01:20:23] <paulo_> yeah this channel has always helped with my career questions
[01:21:29] <paulo_> I'm nearning 30
[01:21:49] <paulo_> they say in every 30 year old is an 18 year old asking "where did all the time go?"
[01:21:51] <InPhase> It's not easy to know exactly how to do those things until you get on the inside.  So it's helpful to have a place to get answers to what works.
[01:23:27] *** Joins: shailangsa (~shailangs@host86-145-14-107.range86-145.btcentralplus.com)
[01:23:28] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Quit: Leaving.)
[01:24:23] * Jigsy doesn't know any languages.
[01:24:28] <Jigsy> Though I have briefly looked at Golang.
[01:25:14] *** Joins: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[01:26:50] *** Quits: poww0wmus1c (~poww0wmus@gateway/tor-sasl/poww0wmus1c) (Quit: leaving)
[01:27:11] *** Joins: menace (~someone@2001:a61:35bf:bb01:815c:4bd6:d1dc:3e9d)
[01:27:32] <edgar-rft> Jigsy: congrats for typing english sentences without knowing the language
[01:27:38] *** Quits: menace (~someone@2001:a61:35bf:bb01:815c:4bd6:d1dc:3e9d) (Changing host)
[01:27:38] *** Joins: menace (~someone@user/menace)
[01:31:05] *** Quits: snake (~snake@user/snake) (Ping timeout: 240 seconds)
[01:31:29] *** Joins: arcatech (~arcatech@user/arcatech)
[01:32:20] <dartmouthed> One has to start somewhere
[01:32:49] <Jigsy> I think I dived in at the deep end, though.
[01:33:57] <dartmouthed> If you want to learn to, I'm sure the channel will be able to advise you on the best way forward
[01:34:07] <Jigsy> Since I figured trying to code an IRCd would give me some motivation. But it's like "Okay, I need to store the connection. How do I do that?"
[01:34:16] <Jigsy> Followed by? "Why is it calling the struct as a pointer?"
[01:34:19] <Jigsy> -?
[01:35:39] <dartmouthed> I don't work as a programmer myself. Learning by doing a project is always more motivating, but one has to manage difficulty too
[01:35:56] <dartmouthed> I'm off to bed, but I look forward to reading everyone's suggestions
[01:36:22] <dartmouthed> Programming-related or otherwise
[01:39:19] *** Quits: TechTest (uid283215@id-283215.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[01:40:34] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[01:42:12] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[01:42:21] <pyzozord> dartmouthed: the most difficult is to get the first job, each next employer will have much less doubts about you knowing that someone else already hired you in the past
[01:42:32] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:43:10] <pyzozord> I'm not sure but I am under impression that people who are looking to break into the programming job market nowadays look at people with 10 years experience on the market and say "I want a job like him!" right away
[01:43:32] <pyzozord> I started with programming job for close to minimum wage
[01:44:01] <pyzozord> And a pretty shitty boss
[01:44:53] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:45:27] *** Joins: ixil (~ixil@82.197.178.137)
[01:45:45] <Izem> How's it going now?
[01:50:20] <pyzozord> I have not been really worried about not being to find a job for at least 5 years
[01:50:20] *** Quits: smultron (~smultron@c-73-239-231-28.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[01:51:03] <pyzozord> If I "lower my standards" I'm fairly certain I can find a job in two weeks at any moment
[01:51:08] <whatsupboy> 5 years?
[01:51:12] <whatsupboy> Thats so long
[01:51:19] <whatsupboy> how did you survive?
[01:51:43] <pyzozord> ho no, i was not staying in a single company, i switched at least 4 times
[01:52:10] <whatsupboy> :)
[01:52:42] *** Joins: masber (~masber@178.197.221.182)
[01:53:59] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[01:54:01] <pyzozord> I tend to stay 1-2 years in one place then move on. Reasons vary.
[01:54:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:55:14] *** Joins: federico_it (~textual@151.51.82.235)
[01:55:43] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:56:41] <pyzozord> That has pros and cons, I've seen a lot what people do and I think I have pretty good idea of what's "normal" more so than employees my age who stayed in a single company 4+ years. Also many chances to learn many things from many people. That's cool. On the bad side I don't have experience observing long term effects of my decisions or maintaing long term professional relationships
[01:57:47] <pyzozord> And people started looking suspecious on my CV recent years, seeing the clear 1-2 year pattern.
[01:58:24] <pyzozord> But when they ask me I tell them honestly that if they will manage to keep my interest for more than 2 years I will stay more than 2 years.
[01:58:49] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[01:59:48] *** Joins: arcatech (~arcatech@user/arcatech)
[02:00:05] *** Quits: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Konversation terminated!)
[02:00:12] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 268 seconds)
[02:00:18] *** Joins: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[02:00:59] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:01:40] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[02:03:26] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Ping timeout: 255 seconds)
[02:03:48] *** Joins: Gerobadon (~Gerobadon@cpe-86-58-57-5.static.triera.net)
[02:04:06] <Izem> pyzozord: I don't think anyone on both sides knows what a entry level job looks like :P
[02:04:11] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[02:04:47] *** Quits: Akuli (~Akuli@82-203-164-218.bb.dnainternet.fi) (Quit: Leaving)
[02:04:58] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[02:06:01] <pyzozord> Izem: Yeah. To be honest, it's been so long ago for me I started forgetting things.
[02:06:19] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 255 seconds)
[02:06:20] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 255 seconds)
[02:07:23] <pyzozord> Other things have sunken into subconciousness and work as intuition now. Unfortunatelly people do not treat my intuition seriously, they want to be presented with strong arguments, which I cannot provied easily
[02:07:52] *** Quits: cation (cation@user/cation) (Remote host closed the connection)
[02:09:14] <Izem> that's good, improving inuition is great progress
[02:10:49] *** Joins: pavonia (~user@user/siracusa)
[02:11:18] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[02:12:17] *** Quits: paulo_ (paulo_@user/paulo/x-9032687) (Ping timeout: 265 seconds)
[02:12:29] *** Joins: paulo___ (~paulo_@175.176.40.130)
[02:13:09] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 268 seconds)
[02:14:24] *** Joins: mrig (~mrig@user/mrig)
[02:16:09] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 265 seconds)
[02:16:22] *** Joins: t3nj1n (~t3nj1n@108.5.82.237)
[02:16:29] *** Quits: gitgoood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 255 seconds)
[02:16:35] *** Joins: kwilczynski (sid379192@user/kwilczynski)
[02:17:21] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[02:17:56] *** Quits: inky (~inky@188.115.236.177) (Read error: Connection reset by peer)
[02:18:34] <pyzozord> I have a question. Is there a way to do "hot reloading" in C? Meaning changing parts of the program while the program is running?
[02:19:24] <InPhase> pyzozord: Technically yes, but it's not pretty.
[02:19:51] <pyzozord> InPhase: how would that work in general terms?
[02:19:58] <InPhase> pyzozord: You have to pay attention to which portions of memory are marked executable if you want to dynamically execute new binary data that you generate on the fly.
[02:20:03] *** Joins: inky (~inky@46.36.118.167)
[02:20:30] <InPhase> pyzozord: Essentially you're creating new machine code.  You can generate new machine code from C if you have a compiler integrated.
[02:21:24] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[02:21:54] <InPhase> pyzozord: Here's a Hello World demo of direct execution.  :)  https://wandbox.org/permlink/c7YPJoMCXCUCmdc3
[02:22:00] <[R]> pyzozord: SocketMud (the C version) has that feature, but it reloads the /entire/ thing, keeping some network state
[02:22:07] <pyzozord> That would be pretty cool. One could add the tcc, like they did in quake, they used tcc to compile their own "quake c" language
[02:22:37] <[R]> Also not sure how well it'd work on Windows
[02:22:45] <pyzozord> [R]: how did you know I was thinking about muds? :D
[02:23:03] <beaky> nice someone already wrote a database in rust https://github.com/erikgrinaker/toydb https://github.com/erikgrinaker/toydb/blob/master/docs/references.md
[02:23:05] <[R]> I didn't
[02:23:10] <InPhase> pyzozord: Note that if you redo that demo with the string literal as a dynamic array of any sort, it is going to crash on most platforms unless you tweak the execute permissions for those pages with some syscall.
[02:23:38] *** Quits: CodePoint (~BitShift@47.186.145.58) (Quit: Never gonna give you up, never gonna let you down...)
[02:24:02] <pyzozord> InPhase: nice, thanks!
[02:24:11] <InPhase> beaky: Are you making a rusty tea database?
[02:24:32] <[R]> pyzozord: basically how SocketMud does it, is it uses exec*() to call a new instance of itself in the same process space, some memory is not reset, so it can continue working, but if you do a major change to your memory or objects it's going to poop the bed pretty hard
[02:24:34] <Izem> pyzozord: you can do it in the visual c
[02:24:40] <Izem> but only for debugging
[02:25:42] <pyzozord> I was thinking also aobut using .so loaded dynamically, that could work right?
[02:25:47] *** Joins: juanjo (riderjj@is.here.for-some.fun)
[02:25:59] <[R]> I think that's possible
[02:26:07] <InPhase> pyzozord: Sure.
[02:26:28] <pyzozord> I'm not sure what would happen if I unloaded old .so and loaded new .so during execution inside the old .so
[02:28:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[02:28:45] <InPhase> pyzozord: You have dlopen, dlclose, and dlsym on Linux, which let you dynamically adjust what's loaded.  The symbols grabbed from dlsym can
[02:29:01] <InPhase> be cast to the right function signature, and then called.
[02:30:01] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[02:30:16] <pyzozord> would it be an over kill to have .so for each room, each item and each mob in the game? Like hunderds of thousends of .so files?
[02:30:56] <InPhase> Well it would probably make testing a serious pain.  :)
[02:31:32] <beaky> yes though not in rust i think i will make my tea database in agda
[02:31:35] <pyzozord> would it even be able to load itself into memory? It does sound like serious abuse of the dynamic linker/loader
[02:31:59] <InPhase> pyzozord: I don't think you should unload something while it's executing.  That sounds like UB.
[02:32:25] <InPhase> But it would be easy to make a dynamic loading manager that switches rooms.
[02:32:28] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Read error: Connection reset by peer)
[02:32:33] *** Joins: cation (cation@user/cation)
[02:32:42] <pyzozord> Yeah I'd probably need to have some extra checks/registers/mutexes to check when execution is in or out of a .so
[02:32:55] <InPhase> I question this as an architecture, as more standard would be to load data instead.  But there could be a use case for that sort of flexibility.
[02:33:49] <pyzozord> I think here mostly of scripting but done in C and updated dynamically without taking the program down
[02:34:09] <InPhase> Note that if you expect bugs in some of the room files, you instead want to do separate files in separate processes, and do some sort of IPC or localhost communication to interface.
[02:34:37] *** Joins: gitgoood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[02:34:42] <InPhase> Then you would get "Room crashed, retreating to previous room" instead of just a hard crash.
[02:35:05] <pyzozord> InPhase: actually I meant to ask, if I ran the dynamic parts in separate threads within the same process, if there would be a segfault in a thread like that, would it take down the main thread too?
[02:35:12] <InPhase> Yes.
[02:35:38] <InPhase> You use multiprocess approaches to avoid that.
[02:35:46] <pyzozord> ah that's too bad, so they have to be separate processes
[02:37:04] <pyzozord> ok I see, but that sounds like a big overkill to have a process for each monster and each item separately. I'd imagine few milion processes would need to be supported running at the same time (albeit in very extreme example when there is a player in each room in the game)
[02:37:36] <pyzozord> but lets say the normal amount of processes would be around 100-500 * number of players
[02:37:38] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 255 seconds)
[02:37:50] <InPhase> pyzozord: Now what can give you the best of both worlds, is embedding an interpreter, and using that for all your added features.
[02:38:01] <InPhase> pyzozord: You can recover from interpreter errors.
[02:38:17] <pyzozord> yes, it does seem like I just made a full circle :D
[02:39:08] <InPhase> Usually there's a reason all the other people came to the same conclusion you reach at the end of such an option evaluation.  ;)
[02:39:45] *** Quits: kariosfox (~kariosfox@89.229.173.37) (Remote host closed the connection)
[02:39:52] <InPhase> It sounds like it's for fun though, so go with what's fun.
[02:40:05] <pyzozord> Yeah, that's a property of interpreted execution I haven't concidered carefully before
[02:41:10] *** Quits: menace (~someone@user/menace) (Quit: menace)
[02:41:23] *** Joins: paulo_ (paulo_@user/paulo/x-9032687)
[02:42:37] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[02:43:02] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[02:43:42] *** Quits: paulo___ (~paulo_@175.176.40.130) (Ping timeout: 265 seconds)
[02:44:58] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:48:48] *** Joins: pulse (~pulse@user/pulse)
[02:48:49] <Izem> beaky: what benefit do you want to get from making the database in agda?
[02:49:37] *** Quits: danielrparks (~quassel@2600:1700:3f7b:20f:1730:d0b1:1b4a:bc52) (Quit: No Ping reply in 180 seconds.)
[02:49:49] <beaky> with agda i get to specify everything with the full power of dependent types for instance if i were designing a query language i can directly specify and something like codd's theorem in agda
[02:49:54] *** Joins: hexfive (~eric@50.35.83.177)
[02:50:03] <beaky> specify and prove something like codd's theorem*
[02:50:52] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:aed0:f543:c324:67a1)
[02:50:58] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:52:25] <Izem> hmm, don't you want to think about a query language after?
[02:52:31] *** Quits: caramel_ (~caramel@user/caramel) (Quit: Leaving)
[02:52:49] <Izem> you might want to use an existing query language
[02:53:28] <beaky> plus i get unicode mixfix support so i will get to ues all the sick unicode database operators like ⨝ or ▷
[02:53:46] <beaky> no i want to abandon sql
[02:53:46] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[02:54:25] <Izem> want about prolog?
[02:54:43] <beaky> yes something more like prolog (or datalog) would be better
[02:55:54] <beaky> for all the reasons explained in this article https://scattered-thoughts.net/writing/against-sql/
[02:56:40] <Izem> there's is also tutorial D from the third manifesto, but I have never looked into it
[02:56:52] <Izem> unicode support is nice
[02:57:16] <Izem> meh I'm tired of blog posts at this point
[02:58:03] <beaky> yes it is a very long blog post but it carefully explains almost everything i dont like about sql
[02:58:33] <smallville7123> god damn i wish my transfer speeds where this high
[02:58:34] <smallville7123> Documents/sticker5.jpg: 1 file pushed, 0 skipped. 571.3 MB/s (237199 bytes in 0.000s)
[02:59:25] *** Quits: mmlj4 (~mmlj4@ip68-230-228-233.no.no.cox.net) (Ping timeout: 255 seconds)
[03:00:13] *** Quits: kawics11 (~ta@catv-80-99-244-169.catv.broadband.hu) (Quit: WeeChat 3.2)
[03:00:31] *** Joins: kawics11 (~ta@catv-80-99-244-169.catv.broadband.hu)
[03:06:02] *** Quits: kawics11 (~ta@catv-80-99-244-169.catv.broadband.hu) (Ping timeout: 258 seconds)
[03:07:30] *** Quits: Intelo (~Intelo@88.244.92.35) (Ping timeout: 246 seconds)
[03:12:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:15:26] *** Quits: Matt|home (~matt@adsl-74-233-58-233.mia.bellsouth.net) (Ping timeout: 255 seconds)
[03:18:54] *** Quits: chomwitt (~Pitsikoko@athedsl-32487.home.otenet.gr) (Quit: Leaving)
[03:19:07] *** Joins: chomwitt (~chomwitt@2a02:587:dc04:b400:12c3:7bff:fe6d:d374)
[03:22:00] *** Joins: snake (~snake@user/snake)
[03:23:12] *** Parts: chomwitt (~chomwitt@2a02:587:dc04:b400:12c3:7bff:fe6d:d374) ()
[03:23:32] *** Joins: jinsun (~quassel@user/jinsun)
[03:27:23] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.0.1)
[03:27:29] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[03:27:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[03:28:13] *** Joins: vysn (~vysn@user/vysn)
[03:28:37] *** Quits: vysn (~vysn@user/vysn) (Client Quit)
[03:29:01] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[03:29:13] *** Joins: brabrax (~brabrax@user/brabrax)
[03:29:13] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (Remote host closed the connection)
[03:29:34] *** Joins: Twix (~None@2a01:4f8:192:23d0::1be4:a)
[03:30:29] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[03:30:52] <beaky> yes the sick transfer speeds of in ram copying
[03:36:28] *** Quits: federico_it (~textual@151.51.82.235) (Quit: Textual IRC Client: www.textualapp.com)
[03:36:45] *** Joins: trevors (~trevors@catv-89-132-207-129.catv.broadband.hu)
[03:37:15] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[03:40:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 258 seconds)
[03:42:40] *** Quits: nekodesu (~nekoIsAL@user/nekobit) (Ping timeout: 265 seconds)
[03:48:44] *** Quits: inky (~inky@46.36.118.167) (Ping timeout: 268 seconds)
[03:52:14] *** Joins: nekobyte (~nekoIsAL@user/nekobit)
[03:55:52] *** Quits: Thedarkb (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8) (Read error: Connection reset by peer)
[03:55:54] *** Joins: Thedarkb1 (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8)
[03:57:07] *** Quits: phogg (~phogg@static-108-51-94-2.washdc.fios.verizon.net) (Changing host)
[03:57:07] *** Joins: phogg (~phogg@user/phogg)
[04:01:31] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[04:02:23] *** night_wulfe_ is now known as night_wulfe
[04:02:52] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[04:04:21] *** Parts: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Konversation terminated!)
[04:04:28] <mathAndRhetoric> After an al day search, I've found what I was looking for. A queue that creates batches of size n (you define n) and that timeouts and flushes after m [unit] where unit can be as low as nanoseconds. https://github.com/fulmicotone/io.fulmicotone.fqueue
[04:06:02] *** Joins: inky (~inky@46.36.118.167)
[04:06:39] <mathAndRhetoric> I'd almost like to say we should have a producer/consumer pattern with a batching producer that creates batches of n messages or flushes after m [time unit]
[04:08:21] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) ()
[04:14:02] *** Quits: Inari (~Pinkishu@p4fd95559.dip0.t-ipconnect.de) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[04:15:26] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[04:17:43] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 268 seconds)
[04:20:05] *** Quits: mathAndRhetoric (~mathAndRh@ip-86-49-241-228.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[04:20:21] *** Quits: kasper93 (~kasper93@89-74-110-199.dynamic.chello.pl) (Read error: Connection reset by peer)
[04:24:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:25:37] *** Joins: CoJaBo (~aztec@user/CoJaBo)
[04:26:01] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:acdb:c983:bbd5:24e8)
[04:27:15] *** Quits: inky (~inky@46.36.118.167) (Read error: Connection reset by peer)
[04:28:14] *** Joins: inky (~inky@46.36.118.167)
[04:28:58] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:30:05] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 268 seconds)
[04:30:52] *** Joins: paulo___ (~paulo_@175.176.40.130)
[04:31:00] *** Joins: eyynet4 (~0x100@32.211.211.39)
[04:31:01] *** Quits: paulo___ (~paulo_@175.176.40.130) (Remote host closed the connection)
[04:31:46] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[04:32:56] *** Quits: paulo_ (paulo_@user/paulo/x-9032687) (Ping timeout: 265 seconds)
[04:36:41] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:36:50] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:36:57] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:38:16] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:39:42] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 265 seconds)
[04:40:02] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:40:13] *** Quits: Null_A (~null_a@2601:645:8700:2290:a961:38e5:e25d:7cd0) ()
[04:40:19] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[04:40:53] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[04:41:44] *** Joins: Crescendo (~Crescendo@user/crescendo)
[04:43:44] *** Quits: omegahack0 (~omega@2603-6010-a529-9c00-4ccc-aa7b-1e0a-9917.res6.spectrum.com) (Remote host closed the connection)
[04:44:01] *** Joins: omegahack0 (~omega@2603-6010-a529-9c00-6250-3f26-37cf-336b.res6.spectrum.com)
[04:46:05] *** Quits: trevors (~trevors@catv-89-132-207-129.catv.broadband.hu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:48:33] *** Quits: inky (~inky@46.36.118.167) (Ping timeout: 268 seconds)
[04:49:12] *** Quits: nekobyte (~nekoIsAL@user/nekobit) (Quit: don't forget, you're here forever :3)
[04:49:43] *** Quits: Leo_V (~Leo@45.72.231.86) (Read error: Connection reset by peer)
[04:53:03] *** Joins: inky (~inky@46.36.118.167)
[04:55:32] *** Joins: Matt|home (~matt@adsl-74-233-58-5.mia.bellsouth.net)
[04:59:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[04:59:10] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[04:59:29] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:01:45] *** __jmcantrell__ is now known as jmcantrell
[05:02:26] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1) (Ping timeout: 250 seconds)
[05:03:20] *** Joins: jazzy (~jaziz@2600:380:c07e:8a82:ade3:efdb:74c6:3aa8)
[05:07:30] *** audio is now known as audiocat
[05:10:45] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[05:12:55] <Mangy_Dog> https://imgur.com/gallery/ea8wL20
[05:13:13] <Mangy_Dog> Half way done on this UI page
[05:15:35] *** Quits: inky (~inky@46.36.118.167) (Ping timeout: 255 seconds)
[05:18:28] *** Joins: nekobyte (~nekoIsAL@user/nekobit)
[05:19:08] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[05:20:19] *** Quits: eyynet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[05:20:31] *** Joins: eyynet4 (~0x100@32.211.211.39)
[05:21:42] <beaky> nice blinkenlights
[05:21:43] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[05:22:14] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 265 seconds)
[05:22:26] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:23:13] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Client Quit)
[05:23:16] *** Joins: omegahack_ (~omega@cpe-98-28-203-56.cinci.res.rr.com)
[05:24:35] <eyynet4> is that real blinky hardware or rendered?
[05:24:39] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:25:29] *** Quits: omegahack0 (~omega@2603-6010-a529-9c00-6250-3f26-37cf-336b.res6.spectrum.com) (Ping timeout: 255 seconds)
[05:25:52] <beaky> normalization in cubical type theory how they proved it correct one of the biggest theoretical hurdles in cubical type theory solved https://www.youtube.com/watch?v=g7EuLw9E8A8
[05:26:34] <eyynet4> whats a cubic type
[05:27:48] <beaky> cubical type theory is a type theory where the identity types are represented via cubical sets through intervals and path types
[05:28:11] <eyynet4> it really bothers me that the "FWD" is on left, and "RVS" is on right. forward / reverse?
[05:28:38] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[05:29:34] <eyynet4> i have no idea what that means :(
[05:29:38] <eyynet4> darnit
[05:31:49] <Mangy_Dog> heh
[05:31:52] <Mangy_Dog> and yeah real hardware
[05:31:54] <Mangy_Dog> all embedded
[05:32:03] <Mangy_Dog> also real time runtime UI graphics
[05:32:06] <Mangy_Dog> not video
[05:32:21] <Mangy_Dog> using a graphics coprocessor
[05:32:23] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 265 seconds)
[05:32:25] <Mangy_Dog> ft810
[05:32:47] *** Quits: masber (~masber@178.197.221.182) (Quit: Client closed)
[05:32:51] <eyynet4> i like the topographical map, those are so rare to see in use
[05:32:55] <Mangy_Dog> anyway its now 2am i MUST go to bed
[05:33:00] <Mangy_Dog> thanks
[05:33:04] <eyynet4> nice job!
[05:33:10] <Mangy_Dog> i wanted to give it some mapping looking stuff
[05:33:18] *** Joins: HaMsTeRs (~mx@49.130.4.100)
[05:33:29] <Mangy_Dog> anyway
[05:33:33] <Mangy_Dog> must bed
[05:33:36] <Mangy_Dog> nn
[05:34:08] *** Quits: haliucin1s (~haliucina@5.20.153.21) (Ping timeout: 252 seconds)
[05:35:03] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[05:36:01] *** Joins: haliucinas (~haliucina@5.20.153.21)
[05:37:59] *** Joins: soulisson (~soulisson@user/soulisson)
[05:38:00] *** Quits: Mangy_Dog (~Mange@user/mangy-dog/x-7397214) (Ping timeout: 246 seconds)
[05:38:03] <soulisson> Hello
[05:38:13] <eyynet4> yooo souli
[05:38:31] <soulisson> eyynet4, how are you?
[05:38:44] *** Quits: HaMsTeRs (~mx@49.130.4.100) (Quit: Konversation terminated!)
[05:38:57] <eyynet4> i fare well, and thyself???
[05:39:11] <soulisson> I'm doing ok
[05:41:37] *** Quits: m3wzx5 (~m3wzx5@user/m3wzx5) (Remote host closed the connection)
[05:45:55] *** Pixi_ is now known as Pixi
[05:46:43] *** Joins: humky (~humky@user/humky)
[05:47:50] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[05:48:34] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 258 seconds)
[05:53:08] *** Quits: xff0x_ (~xff0x@2001:1a81:525b:ea00:e4bc:612d:f531:cac7) (Ping timeout: 250 seconds)
[05:55:09] *** Joins: xff0x_ (~xff0x@2001:1a81:5299:ea00:490d:5ed2:61e8:145d)
[05:55:56] *** Joins: dre (~dre@2001:8003:c932:c301:e078:5df6:bd54:b22a)
[05:56:34] *** Quits: nekobyte (~nekoIsAL@user/nekobit) (Quit: don't forget, you're here forever :3)
[06:00:02] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:01:13] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 258 seconds)
[06:01:14] *** brabrax_ is now known as brabrax
[06:02:50] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Ping timeout: 265 seconds)
[06:02:59] *** Quits: omegahack_ (~omega@cpe-98-28-203-56.cinci.res.rr.com) (Quit: Leaving)
[06:03:36] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[06:03:43] *** Joins: gggpkm (~gggpkm@125.33.88.38)
[06:07:07] *** Joins: pete443 (~pete@user/pete443)
[06:07:39] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 252 seconds)
[06:08:09] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[06:09:06] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[06:18:04] *** Joins: death916 (AdiIRC@c-67-182-183-147.hsd1.ca.comcast.net)
[06:19:49] *** Quits: shailangsa (~shailangs@host86-145-14-107.range86-145.btcentralplus.com) (Ping timeout: 268 seconds)
[06:20:07] *** Joins: HaMsTeRs (~mx@49.130.4.100)
[06:23:24] *** Joins: mmlj4 (~mmlj4@ip68-230-228-233.no.no.cox.net)
[06:29:56] *** Joins: lunarkitty (uid501895@user/pyra)
[06:31:46] *** Quits: soulisson (~soulisson@user/soulisson) (Quit: Leaving)
[06:34:00] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 268 seconds)
[06:34:47] *** Quits: HaMsTeRs (~mx@49.130.4.100) (Ping timeout: 255 seconds)
[06:35:50] *** Joins: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com)
[06:36:01] *** Joins: HaMsTeRs (~mx@14-0-227-158.static.pccw-hkt.com)
[06:36:40] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[06:39:37] *** Joins: anovick_ (~anovick@IGLD-83-130-153-93.inter.net.il)
[06:42:26] *** Quits: anovick (~anovick@IGLD-83-130-153-93.inter.net.il) (Ping timeout: 255 seconds)
[06:42:31] *** Joins: umar (~umar@203.6.146.34)
[06:43:27] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[06:43:34] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[06:44:29] *** Quits: anovick_ (~anovick@IGLD-83-130-153-93.inter.net.il) (Ping timeout: 268 seconds)
[06:45:11] *** Joins: feldman (~feldman@ool-457194f5.dyn.optonline.net)
[06:45:27] *** Jigsy` is now known as Jigsy
[06:45:54] *** Quits: feldman (~feldman@ool-457194f5.dyn.optonline.net) (Client Quit)
[06:48:01] *** Quits: quartz (~quartz@2603-8001-7700-61a4-0000-0000-0000-0acb.res6.spectrum.com) (Ping timeout: 255 seconds)
[06:48:17] *** Quits: audiocat (~audio@2603-8081-1800-00ad-f446-7ebf-416d-c2f1.res6.spectrum.com) (Ping timeout: 255 seconds)
[06:48:48] *** Quits: gitgoood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 268 seconds)
[06:52:17] *** Joins: audiocat (~audio@2603-8081-1800-00ad-633b-6ddb-64ec-e38d.res6.spectrum.com)
[06:54:35] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[06:54:58] *** Joins: Jigsy (~Jigsy@user/jigsy)
[06:55:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:56:07] <beaky> dear professor church why in the world would you choose lambda https://www.youtube.com/watch?v=SphBW9ILVPU&t=575s
[06:56:57] *** Joins: shailangsa (~shailangs@host86-186-191-14.range86-186.btcentralplus.com)
[07:07:43] *** Joins: amigojapan (uid86330@id-86330.brockwell.irccloud.com)
[07:07:47] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[07:07:53] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[07:09:46] *** Jigsy` is now known as Jigsy
[07:10:15] *** Joins: Quietwalker (~X@24.162.16.145)
[07:10:35] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[07:11:17] *** Quits: umar (~umar@203.6.146.34) (Quit: Leaving)
[07:15:16] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[07:17:16] *** Quits: Rounin (~david@cm-84.212.130.215.getinternet.no) (Ping timeout: 265 seconds)
[07:19:40] *** Joins: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[07:19:57] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:22:29] *** Quits: gggpkm (~gggpkm@125.33.88.38) (Ping timeout: 255 seconds)
[07:22:31] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Read error: Connection reset by peer)
[07:23:58] *** Quits: ChromaCat248 (~ChromaCat@user/chromacat248) (Remote host closed the connection)
[07:25:06] *** Joins: ChromaCat248 (~ChromaCat@user/chromacat248)
[07:28:32] *** Joins: omen (~omen@user/omen)
[07:29:32] <omen> pls help. I cannot decide name for folder where my program outputs it's result (html)
[07:29:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[07:29:55] <eyynet4> hyperdir
[07:30:50] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:31:56] *** Parts: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Konversation terminated!)
[07:32:34] *** Joins: vicfred (~vicfred@user/vicfred)
[07:33:12] <pavonia> html
[07:34:26] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:34:26] *** Quits: scabby (~scabby@user/scabootssca) (Ping timeout: 268 seconds)
[07:34:33] <omen> i like that
[07:35:23] *** Quits: esran (~esran@cb.conical-effort.net) (Quit: ZNC 1.8.x-nightly-20190530-13450c7f - https://znc.in)
[07:36:02] *** Joins: Quacc (~Quacc@user/quacc)
[07:36:29] *** Parts: Quacc (~Quacc@user/quacc) ()
[07:37:01] *** Joins: esran (~esran@cb.conical-effort.net)
[07:48:34] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[07:48:53] <kzootech> omen: $OUTPUT
[07:48:59] <kzootech> where $OUTPUT is a variable
[07:49:39] *** Joins: wei2912 (~wei2912@112.199.250.21)
[07:49:59] *** Joins: trevors (~trevors@catv-89-132-207-129.catv.broadband.hu)
[07:50:34] *** Joins: nekobyte (~nekoIsAL@user/nekobit)
[07:51:31] <beaky> yes naming things is one of the more difficult tasks involved in programming
[07:52:03] *** Joins: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[07:54:40] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[07:55:27] *** Quits: kaivai_ (~kaivai@user/kaivai) (Ping timeout: 258 seconds)
[07:58:40] *** Quits: nekobyte (~nekoIsAL@user/nekobit) (Ping timeout: 255 seconds)
[07:59:32] *** Joins: kaivai (~kaivai@user/kaivai)
[08:00:32] *** Joins: gggpkm_ (~gggpkm@114.245.108.127)
[08:02:22] *** Joins: justyb11 (~justyb@2601:483:500:3ea:6882:c320:2cbf:287b)
[08:03:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:5577:9a94:3b66:c39d)
[08:09:13] *** Joins: compscipunk (~compscipu@107-214-234-232.lightspeed.sndgca.sbcglobal.net)
[08:11:41] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[08:13:20] *** Quits: gggpkm_ (~gggpkm@114.245.108.127) (Ping timeout: 255 seconds)
[08:14:25] <Powerhouse6666> any ideas why only one of the paypal buttons are showing on the page? https://termbin.com/hgf8
[08:14:25] <Powerhouse6666>  https://thepowerhousemethod.org/checkoutpage.html
[08:15:56] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) ()
[08:16:53] *** Quits: CoderGuy (~CoderGuy@user/coderguy) (Read error: Connection reset by peer)
[08:17:12] *** Quits: trevors (~trevors@catv-89-132-207-129.catv.broadband.hu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:17:47] *** Quits: compscipunk (~compscipu@107-214-234-232.lightspeed.sndgca.sbcglobal.net) (Quit: WeeChat 3.2)
[08:18:20] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[08:19:45] *** Quits: HaMsTeRs (~mx@14-0-227-158.static.pccw-hkt.com) (Quit: Konversation terminated!)
[08:20:41] *** Quits: nekonibble (~nekonIsL@user/nekobit) (Ping timeout: 240 seconds)
[08:20:59] *** Joins: nekonibble (~nekonIsL@user/nekobit)
[08:21:02] *** Joins: gggpkm_ (~gggpkm@123.113.186.67)
[08:21:26] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:21:37] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 255 seconds)
[08:22:02] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 265 seconds)
[08:22:03] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Lost terminal)
[08:22:42] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[08:26:34] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Remote host closed the connection)
[08:28:42] *** Quits: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Ping timeout: 268 seconds)
[08:33:38] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[08:34:18] *** Quits: freakazoid334 (~freakazoi@72.168.176.62) (Read error: Connection reset by peer)
[08:35:53] *** Joins: freakazoid333 (~freakazoi@72.168.176.170)
[08:39:45] *** Joins: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[08:40:37] *** Joins: Quacc (~Quacc@user/quacc)
[08:40:37] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[08:41:39] *** Quits: LiftLeft (~LiftLeft@154.21.23.108) (Ping timeout: 268 seconds)
[08:45:46] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[08:48:29] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[08:49:12] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Client Quit)
[08:49:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:5577:9a94:3b66:c39d) (Remote host closed the connection)
[08:52:21] *** Joins: gargus (~user@60-242-110-27.tpgi.com.au)
[08:53:40] <beaky> are there garbage-collected programming languages that do not box everything by default like haskell does for data types
[08:54:31] <beaky> where everything is unboxed, even user-defined data, and even polymorphic data (which gets 'monomorphized' lke in rust) and only that which necessarily requires boxing like existential types gets boxed
[08:56:26] <beaky> but then how would garbage collection work in such a programmming language where one important point of boxing is to provide metadata for the gc
[08:56:43] *** Quits: nekonibble (~nekonIsL@user/nekobit) (Ping timeout: 255 seconds)
[08:57:48] *** Quits: justyb11 (~justyb@2601:483:500:3ea:6882:c320:2cbf:287b) (Quit: Leaving)
[08:58:05] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Read error: Connection reset by peer)
[08:58:54] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[08:59:41] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[09:00:13] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[09:01:23] *** Quits: _derpy_ (~quassel@dslb-178-009-133-033.178.009.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[09:01:33] *** Joins: derpy (~quassel@dslb-002-201-172-123.002.201.pools.vodafone-ip.de)
[09:03:34] *** Joins: LiftLeft (~LiftLeft@154.21.28.7)
[09:08:12] <pavonia> beaky: Are you sure GC is the reason for boxing in Haskell and not lazy evaluation? I think GCs can also store the necessary information in their own data structures, so the objects don't need to hold that information
[09:08:32] <audiocat> can anyone help me debug? https://stackoverflow.com/questions/68435141/why-would-15-20-minute-website-scrapes-work-at-first-but-after-a-couple-scrapes
[09:09:58] *** Joins: arcatech (~arcatech@user/arcatech)
[09:10:24] <Izem> beaky: Java, Go?
[09:15:34] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 268 seconds)
[09:16:48] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[09:19:38] <beaky> i think java uses boxing for everything but through autoboxing makes it transparent
[09:20:09] *** Quits: LiftLeft (~LiftLeft@154.21.28.7) (Ping timeout: 252 seconds)
[09:22:42] <arahael> beaky: You can choose to use unboxed types if you really, really need to in Haskell.
[09:23:36] <beaky> yes the goal is to use unboxed types for my tea database for maximum memory size efficiency
[09:25:15] <arahael> beaky: Beware I think if you manage to optimise your program so far that it no-longer allocates memory, it stops triggering the GC.  Which is probably fine, since you're not allocating.
[09:25:47] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[09:26:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:27:22] *** Quits: amigojapan (uid86330@id-86330.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[09:30:00] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:00] *** Quits: ChanServ (ChanServ@services.libera.chat) (shutting down)
[09:30:23] *** Quits: Crescendo (~Crescendo@user/crescendo) (Remote host closed the connection)
[09:30:46] *** Joins: ChanServ (ChanServ@services.libera.chat)
[09:30:46] *** sodium.libera.chat sets mode: +o ChanServ
[09:31:19] *** Joins: mishugana (~mishugana@103.5.134.18)
[09:31:24] <mishugana> Hello
[09:31:32] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:31:37] <mishugana> (Sorry, was just testing)
[09:31:41] <beaky> hello my name is beaky
[09:32:01] <mishugana> Hi beaky
[09:34:05] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[09:39:43] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[09:40:07] *** Parts: Quacc (~Quacc@user/quacc) ()
[09:40:25] *** Joins: Quacc (~Quacc@user/quacc)
[09:41:25] *** Quits: gggpkm_ (~gggpkm@123.113.186.67) (Ping timeout: 252 seconds)
[09:46:05] *** Quits: mishugana (~mishugana@103.5.134.18) (Quit: Ping timeout (120 seconds))
[09:48:46] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[09:50:26] *** Joins: Null_A (~null_a@2601:645:8700:2290:5577:9a94:3b66:c39d)
[09:51:26] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 255 seconds)
[09:55:26] *** Joins: src (~src@user/src)
[09:55:50] *** Quits: src (~src@user/src) (Client Quit)
[09:56:53] *** Joins: gggpkm_ (~gggpkm@111.63.14.119)
[09:58:13] *** Joins: password (~password@user/password2)
[09:59:40] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 265 seconds)
[10:00:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 255 seconds)
[10:00:53] *** Quits: jrqc (~rofl@2603:3016:1e01:b940:20b3:fc15:12c5:30d8) (Ping timeout: 255 seconds)
[10:01:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[10:01:20] *** Joins: jrqc (rofl@2603:3016:1e01:b940:20b3:fc15:12c5:30d8)
[10:01:31] *** Joins: src (~src@user/src)
[10:01:57] *** Quits: gggpkm_ (~gggpkm@111.63.14.119) (Ping timeout: 258 seconds)
[10:02:11] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[10:06:31] *** Joins: amigojapan (uid86330@id-86330.brockwell.irccloud.com)
[10:11:41] *** Joins: thekingofbandit (tkob@user/thekingofbandit)
[10:13:06] *** Quits: Quacc (~Quacc@user/quacc) (Quit: leaving)
[10:13:52] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:20:18] <deniska> beaky: there's no need for garbage collection for an unboxed thing, either it's on a stack. or it's static
[10:23:07] <arahael> deniska: What stack?
[10:24:11] *** Quits: Null_A (~null_a@2601:645:8700:2290:5577:9a94:3b66:c39d) (Read error: Connection reset by peer)
[10:25:06] *** Quits: dre (~dre@2001:8003:c932:c301:e078:5df6:bd54:b22a) (Quit: Leaving)
[10:25:31] <deniska> arahael: a magic place for local variables and return addresses. Yeah, I know, sometimes it's registers
[10:43:21] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 258 seconds)
[10:44:06] *** Quits: yitz (~nick@exercism/yitz) (Quit:  )
[10:44:53] *** Joins: yitz (~yitz@exercism/yitz)
[10:44:54] *** Quits: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Konversation terminated!)
[10:45:06] *** Joins: dre (~dre@2001:8003:c932:c301:9820:d974:d4b6:d3c4)
[10:48:26] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[10:48:42] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[10:57:39] *** Joins: smultron (~smultron@c-73-239-231-28.hsd1.wa.comcast.net)
[11:01:21] *** Joins: vysn (~vysn@user/vysn)
[11:02:29] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:05:51] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[11:07:10] *** Quits: smultron (~smultron@c-73-239-231-28.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:09:57] *** Quits: password (~password@user/password2) (Quit: Connection closed)
[11:10:49] *** Quits: lucf117 (~lucf117@user/lucf117) (Remote host closed the connection)
[11:11:06] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[11:11:16] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Ping timeout: 255 seconds)
[11:16:22] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[11:16:33] *** Joins: flynn (~mcbloch@user/flynn)
[11:20:01] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:21:27] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:27:32] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:28:50] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:28:50] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[11:29:06] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[11:30:39] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Remote host closed the connection)
[11:30:54] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[11:31:58] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[11:32:48] *** Quits: death916 (AdiIRC@c-67-182-183-147.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[11:35:31] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[11:40:48] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[11:41:39] *** Joins: death916 (~death916@c-67-182-183-147.hsd1.ca.comcast.net)
[11:43:39] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: Ping timeout (120 seconds))
[11:43:51] *** Joins: aradesh (~aradesh@user/aradesh)
[11:44:05] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[11:44:58] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:45:16] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[11:50:09] *** Joins: trevors (~trevors@79.120.223.86)
[11:51:12] <beaky> so i have decided to cheat in agda and use haskell's native unboxed screaming-fast raw arrays through agda's haskell ffi but one problem is that by doing that the arrays will be completely opaque to agda so i cant compute with them
[11:51:42] <beaky> but ive figured it out all arrays are isomorphic to product types
[11:52:33] <beaky> so maybe using the power of cubical type theory i can combine the two and recover the same benefits of each
[11:52:56] <beaky> compute in agda, but then compute even more compactly / efficiently once i compile to haskell
[11:54:32] *** Joins: snake (~snake@user/snake)
[11:56:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:01:15] *** Joins: analognoise1 (~analognoi@2600:8801:8c26:9e00:cdb0:ec42:cea0:b1e2)
[12:02:11] *** Quits: analognoise (~analognoi@83.136.182.93) (Ping timeout: 245 seconds)
[12:02:24] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:03:15] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[12:05:33] *** Joins: jaysicks (~jaysicks@94-21-246-52.pool.digikabel.hu)
[12:05:53] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[12:06:32] *** Joins: trevors (~trevors@79.120.223.86)
[12:10:29] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[12:11:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[12:14:04] *** Joins: mrig (~mrig@user/mrig)
[12:14:32] *** Quits: analognoise1 (~analognoi@2600:8801:8c26:9e00:cdb0:ec42:cea0:b1e2) (Ping timeout: 255 seconds)
[12:14:35] <arahael> deniska: What return addresses? ;)
[12:14:42] <arahael> deniska: Haskell uses graph reduction.
[12:14:55] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Read error: Connection reset by peer)
[12:15:17] *** Joins: TheAceOfHearts_ (~TheAceOfH@24.41.239.76)
[12:16:25] *** Joins: gareppa (~gareppa@user/gareppa)
[12:17:05] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:17:14] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[12:18:11] <deniska> weirdos
[12:18:35] *** Quits: audiocat (~audio@2603-8081-1800-00ad-633b-6ddb-64ec-e38d.res6.spectrum.com) (Ping timeout: 255 seconds)
[12:18:45] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:19:25] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[12:19:32] <arahael> So there's no call stack either. :D  Although there are ways of adding in that information for specific calls if required.
[12:19:38] *** Joins: trevors (~trevors@79.120.223.86)
[12:28:02] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[12:29:28] *** Quits: dre (~dre@2001:8003:c932:c301:9820:d974:d4b6:d3c4) (Quit: Leaving)
[12:31:50] *** Joins: varaindemian (~varaindem@86.124.78.162)
[12:34:30] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[12:35:46] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:42:58] <pyzozord> deniska: lol :D
[12:44:07] <pyzozord> The more I hear about haskell the stranger it becomes. No call stack, a graph instead... Can't even imagine how that would work
[12:46:33] *** Quits: eyynet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[12:48:22] *** Joins: paulo_ (~paulo_@user/paulo/x-9032687)
[12:49:02] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Remote host closed the connection)
[12:49:58] <nitrix> The program is a graph. You start at the root and lazily evaluate the branches that you need to compute your node.
[12:50:24] <nitrix> Nodes that are shared can be memorized and their results re-used.
[12:51:55] *** Parts: micrex22 (~quassel@user/micrex22) ()
[12:51:59] <davros> ah the name.. "stackless g machine", thats what it means
[12:52:29] *** Joins: micrex22 (~quassel@user/micrex22)
[12:53:14] <pyzozord> does it mean that every vertex can be connected with every other vertex theoretically?
[12:55:42] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:58:38] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:01:04] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 255 seconds)
[13:01:16] *** Lord_of_Life_ is now known as Lord_of_Life
[13:01:51] *** Joins: caramel (~caramel@user/caramel)
[13:02:27] *** Quits: TheAceOfHearts_ (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[13:03:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[13:06:38] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:10:59] <davros> must be some restriction (DAG i think?)
[13:11:06] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[13:11:13] <davros> "results can be re-used" = DAG.
[13:13:06] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[13:16:40] <nitrix> pyzozord, Yes and even themselves. For example, `let x = 1 : x in x` is an infinite list of 1s, since it's defined as 1 concatenated to itself.
[13:17:00] <nitrix> pyzozord, That's known as "tying the knot".
[13:17:38] *** Joins: lars8 (~bc817c21@217.29.117.252)
[13:17:46] <nitrix> It's one of the ways to achieve recursive data structures despite having immutable data.
[13:18:08] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:21:34] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[13:22:26] *** Quits: Quietwalker (~X@24.162.16.145) (Ping timeout: 258 seconds)
[13:22:30] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 252 seconds)
[13:24:19] *** Joins: trevors (~trevors@79.120.223.86)
[13:25:53] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[13:26:14] <nitrix> It's not exactly directed. The evaluation is, but as that happens, there are also effects bubbling up backwards, even though you're deep within the graph.
[13:26:39] <nitrix> If the compiler can determine that it eventually reaches main, then you can observe the effects immediately.
[13:29:00] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[13:29:14] *** Quits: The_Blode (~Blode@92.40.180.240.threembb.co.uk) (Changing host)
[13:29:14] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[13:29:15] *** mobidrop_ is now known as mobidrop
[13:29:33] <nitrix> Things like `putStrLn` will produce an `IO ()` that is conceptually is an I/O, printing to the terminal, and that gets eventually returned by `main` to the runtime which is how effects actually happens while keeping the language completely pure.
[13:29:52] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[13:29:53] <nitrix> But `putStrLn` will print immediately when it's evaluated, not when it reaches `main`.
[13:30:34] <lars8> nitrix actually that is not true. evaluating putStrLn "Hello, World" won't print anything
[13:30:35] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Ping timeout: 252 seconds)
[13:31:28] <lars8> you can check this in ghci, putStrLn "Hello, World" `seq` 10
[13:31:51] <nitrix> You're confusing laziness with evaluation.
[13:32:08] <nitrix> The evaluation can be lazy or strict, it's still evaluated.
[13:32:11] <lars8> no, I am not. see documentation for seq
[13:32:47] <lars8> seq is used above specifically to force evaluation of IO () returned by putStrLn
[13:33:19] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:33:26] *** Joins: freakazoid334 (~freakazoi@72.168.176.170)
[13:33:32] <lars8> that's the reason why haskell is purely functional, because evaluating IO actions doesn't do anything
[13:33:44] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[13:33:44] <pyzozord> nitrix: oh, very interesting
[13:34:06] <lars8> they are inert values, until you link them to main, which is then executed by the runtime
[13:34:26] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[13:34:31] <nitrix> I think you don't really know me if you're trying to teach me how Haskell is working, lol.
[13:34:35] <nitrix> Do your homework a little bit ;)
[13:34:37] *** Joins: trevors (~trevors@79.120.223.86)
[13:35:10] *** Joins: riff_IRC (~riff-IRC@user/riff-irc)
[13:35:16] <lars8> nitrix, I think you should do your homework if you think evaluating IO () executes that action.
[13:35:42] *** Quits: BenLand100 (~bland@user/benland100) (Ping timeout: 252 seconds)
[13:35:54] *** Joins: BenLand100 (~bland@64.253.0.103.dyn-cm-pool70.pool.hargray.net)
[13:35:54] *** Quits: BenLand100 (~bland@64.253.0.103.dyn-cm-pool70.pool.hargray.net) (Changing host)
[13:35:54] *** Joins: BenLand100 (~bland@user/benland100)
[13:36:08] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Killed (NickServ (GHOST command used by riff_IRC)))
[13:36:14] *** riff_IRC is now known as riff-IRC
[13:36:49] *** Quits: freakazoid333 (~freakazoi@72.168.176.170) (Ping timeout: 252 seconds)
[13:37:34] <nitrix> That happens with chitchat layman conversations that are meant to be taken with a grain of salt.
[13:37:44] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[13:38:03] <lars8> nitrix, you don't even know what seq does
[13:38:09] <lars8> nitrix, and you call me a layman?
[13:38:15] <lars8> how about we take this to #haskell?
[13:38:55] <nitrix> I propose you #ghc since I'm a contributor, lol.
[13:39:27] <lars8> you contribute to ghc, and you don't know what seq does?
[13:39:29] <nitrix> And it wont change what transpired. Good catch for the slip, but you're still not going to tell me to read the `seq` documentation when I could've practically written it myself.
[13:39:32] <nitrix> Jackass.
[13:39:55] <lars8> that wasn't a slip, you have fundamental misunderstanding how actions work in haskell
[13:39:57] <nitrix> Now get off the elitism ladder.
[13:40:00] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[13:40:13] <lars8> as they say, you know you lost the argument when the insults start
[13:40:31] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[13:40:32] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[13:40:32] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[13:40:40] <nitrix> Yeah yeah, keep whining.
[13:40:57] <arahael> hey, calm down you two!
[13:40:59] <lars8> the only one whining is you
[13:41:04] <nitrix> If I wanted to be pedantic I'd be in #haskell, not chitchatting in ##programming.
[13:41:59] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 258 seconds)
[13:42:34] <nitrix> I was supposed to get back to the graph thing and completely lost that train of thought.
[13:43:03] <lars8> nitrix, that wasn't me being pedantic, but correcting something that was fundamentally incorrect and wrong. anyway, no point in continuing this further, since you admitted you were wrong. (though apologize would be more appropriate when you realized you were wrong, instead of continuing with the insults)
[13:43:07] <nitrix> pyzozord, I guess that conversation will continue another day.
[13:43:13] <lars8> apologizing*
[13:43:57] <nitrix> I admit I slipped, but the patronizing with the documentation is plain insulting.
[13:44:11] <nitrix> So tune it down a little.
[13:44:26] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[13:44:53] <lars8> that wasn't patronization. you talked about haskell being lazy, and that being the reason why it wasn't printing, even though I used seq. so it was reasonable to assume that you don't know what seq does
[13:45:53] <nitrix> Go lookup any #haskell-beginners logs to find out how much time I spent in the past 7 years willingly teaching Haskell and doing a very competent job at it before you start with the elitism bullshit.
[13:46:44] <nitrix> I've giving much more to that community to receive crap the moment I do a single mistake after not using the language for 3 years.
[13:46:48] <lars8> perhaps you shouldn't try helping newbies, when you have such a fundamental misunderstanding of the language. I'd expect even a more advanced beginner to know that evaluation IO action doesn't execute it
[13:47:02] <arahael> what IO is - a monad - and how it is actually implemented has always been a bit different in the name of efficiency.  but i think you two need to grab a coffee or a break or something, as you two have ...  ok, lars8, please stop it.
[13:47:21] <arahael> you two are just riling each other on at the moment.
[13:47:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:48:02] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:48:23] <lars8> I was done 10 minutes ago, but he refuses to back down, so here we are
[13:48:31] <lars8> obviously an ego problem
[13:48:33] <arahael> lars8: it takes two to tango.
[13:48:39] <nitrix> Because you butted in a conversation for which the thing you're nitpicking at doesn't matter.
[13:49:04] <lars8> no, that's not nitpicking. understanding this is fundamental part of haskell
[13:49:23] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[13:49:23] <lars8> this is public forum. if you don't want your bullshit to be corrected, then don't participate in it
[13:49:34] <arahael> !q lars8 please be less confrontive
[13:49:35] *** bayaz sets mode: +q $a:lars8
[13:50:01] *** Joins: eldenring0 (uid506233@id-506233.tooting.irccloud.com)
[13:50:16] *** Quits: danielrparks (~quassel@2600:1700:3f7b:20f:aed0:f543:c324:67a1) (Quit: No Ping reply in 180 seconds.)
[13:50:37] <pyzozord> nitrix: sorry, not following the full convo, need to pretend I'm working a bit ;)
[13:50:38] *** Joins: Quietwalker (~X@24.162.16.145)
[13:51:05] *** Joins: trevors (~trevors@79.120.223.86)
[13:51:27] <nitrix> Yeah and I'm gonna take a breather. Never seen a Haskeller so riled up, you'd almost think this is #c.
[13:51:29] <pyzozord> nitrix: let me read throught the logs in like 10-30 minutes
[13:51:31] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:6f34:3eba:8e81:34aa)
[13:52:40] *** Joins: ac5tin (~ac5tin@user/ac5tin)
[13:53:16] <pyzozord> I think that "layman" was about me. And I am an utter layman when it comes to haskell :)
[13:54:50] <nitrix> Anyway, where I wanted to get at is that the graph isn't entire directed. The evaluation is, but then that results in actions that can be executed at ulterior points in the graph, due to the lazy evaluation.
[13:56:06] *** mrsena is now known as sena
[14:01:21] <nitrix> Then, the part that I blurted out, is that the runtime is capable of strictly evaluating things when sequencing of IO is required, effectively interleaving evaluation and actions. Without it you couldn't have interactive programs receiving inputs while producing outputs.
[14:03:56] * nitrix afk
[14:04:31] *** Quits: kmh (~kmh@p200300df5f3d2300852dc21772644f53.dip0.t-ipconnect.de) (Quit: Leaving)
[14:05:50] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[14:07:34] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[14:08:42] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[14:09:05] *** Quits: DrMax (~DrMax@node-1w7jra94757g1wxw6u3ydmzl1.ipv6.telus.net) (Remote host closed the connection)
[14:09:30] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:acdb:c983:bbd5:24e8) (Read error: Connection reset by peer)
[14:10:08] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:acdb:c983:bbd5:24e8)
[14:10:11] *** Joins: Thedarkb (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8)
[14:10:45] *** Quits: Thedarkb1 (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8) (Ping timeout: 246 seconds)
[14:13:50] *** Joins: gitgoood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[14:16:18] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[14:17:08] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Ping timeout: 252 seconds)
[14:17:10] *** Quits: gitgoood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Client Quit)
[14:17:42] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[14:17:54] *** Joins: astronaut (~segfault@103.160.128.17)
[14:21:23] *** Joins: node1 (~node1@user/node1)
[14:23:24] *** Joins: haliucinas (~haliucina@5.20.153.21)
[14:23:38] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[14:25:05] <node1> In python, we say `instances of first argument` I believe it's refering itself i.e `self` ?
[14:26:11] <GeDaMo> when you write obj.method(x) that gets translated to method(obj, x)
[14:26:29] <GeDaMo> With obj being the 'self' parameter
[14:26:47] <node1> yes self is refers object or instance of a class here
[14:27:08] <node1> GeDaMo, Thanks :)
[14:27:46] <node1> Or first argument. i.e obj
[14:31:19] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[14:34:29] *** Joins: entuland (~entuland@user/entuland)
[14:35:04] *** Joins: kmh (~kmh@p200300df5f3d23007da6cdbc4ca56686.dip0.t-ipconnect.de)
[14:39:22] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:40:55] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[14:41:57] *** Joins: mrig (~mrig@user/mrig)
[14:42:45] *** Quits: TechTest (uid283215@id-283215.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[14:45:03] *** Joins: trevors (~trevors@79.120.223.86)
[14:45:22] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[14:46:02] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0)
[14:46:21] *** Joins: Rounin (~david@cm-84.212.130.215.getinternet.no)
[14:46:51] *** Quits: mrig (~mrig@user/mrig) (Client Quit)
[14:46:52] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[14:47:05] *** Quits: snake (~snake@user/snake) (Ping timeout: 255 seconds)
[14:48:23] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[14:48:43] <arkanoid> among the benefits of functional programming, which one is worth applying to the imperative world? I feel an improvement separating effects and pure logic, but I'm not seeing (yet) the eureka of applying monads where effects are present. What do you think?
[14:49:14] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[14:50:42] *** Joins: xsperry (~as@user/xsperry)
[14:53:04] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[14:54:22] *** Joins: DrMax (~DrMax@node-1w7jra94757fzg5p2z1i2cva4.ipv6.telus.net)
[14:54:51] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:55:38] *** Joins: trevors (~trevors@79.120.223.86)
[14:57:42] *** bayaz sets mode: -q $a:lars8
[14:59:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:02:25] *** Quits: reinhardt (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[15:02:41] *** Joins: pulse (~pulse@user/pulse)
[15:04:27] *** Joins: cronos (~cronos@user/cronos)
[15:06:30] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:09:10] *** Joins: lunarkitty (uid501895@user/pyra)
[15:11:02] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[15:12:00] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:12:17] *** Joins: trevors (~trevors@79.120.223.86)
[15:15:04] *** Joins: cronos (~cronos@user/cronos)
[15:17:56] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[15:18:46] *** Joins: inky (~inky@46.36.118.167)
[15:23:43] *** Quits: Matt|home (~matt@adsl-74-233-58-5.mia.bellsouth.net) (Ping timeout: 268 seconds)
[15:23:45] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:26:06] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[15:26:28] *** Joins: cronos (~cronos@user/cronos)
[15:26:58] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[15:28:28] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 255 seconds)
[15:30:32] *** Joins: cronos (~cronos@user/cronos)
[15:30:44] <arahael> arkanoid: You can do imperative programming in Haskell (just do everything in IO).
[15:32:22] <arahael> arkanoid: However, I feel that the main benefit is that you can pretty much expect that functions have *no* side effects, which makes it much easier to reason.  A given input has a given output, and all that.
[15:33:14] *** Joins: omegahack0 (~omega@2603-6010-a529-9c00-6250-3f26-37cf-336b.res6.spectrum.com)
[15:33:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:35:14] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[15:35:24] <pikapika> arahael, hi
[15:35:44] *** Parts: omegahack0 (~omega@2603-6010-a529-9c00-6250-3f26-37cf-336b.res6.spectrum.com) ()
[15:36:18] *** Joins: Matt|home (~matt@adsl-74-233-58-5.mia.bellsouth.net)
[15:36:27] *** Quits: lars8 (~bc817c21@217.29.117.252) (Quit: quit)
[15:37:17] <arahael> pikapika: Hello!
[15:37:25] <pikapika> Hi uwu
[15:38:49] *** Joins: cronos (~cronos@user/cronos)
[15:40:13] *** Joins: szutt (~szutt@116.37.2.145)
[15:40:51] <arkanoid> arahael: I know imperative world can bend to pure functional, but I don't think it's the other way around. An haskell program that does everything with IO and monads is not like the imperative version
[15:42:08] *** Joins: trevors (~trevors@79.120.223.86)
[15:42:16] <arahael> arkanoid: With 'do-notation', haskell code can look very imperative.  However, at work I do functional programming all the time in imperative languages - including in Swift.  And it's always annoying me because unlike Haskell, I'm always having to think about side effects.
[15:43:10] *** Quits: trevors (~trevors@79.120.223.86) (Client Quit)
[15:43:19] <arahael> arkanoid: When I'm doing "map" operations, as an example, or I have what is basically a pipeline, I have to always be conscious that it is possible that there are side effects.  Eg, maybe even the values I'm getting represent the same object and are thus mutable.  In Haskell, I can pretty much always assume and expect that it is never going to have side effects.
[15:43:59] <arkanoid> arahael: I'm on the same boat, luckily I'm a one-man-team and I can pick an imperative language that can help me with that (currently Nim language)
[15:44:13] *** Joins: trevors (~trevors@79.120.223.86)
[15:44:27] <arkanoid> you can enforce no side effects and no exception raised in a function
[15:46:07] <arahael> arkanoid: I'm not familiar with Nim, but being able to enforce that all your functions have no side effects would go a long way.
[15:46:41] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:1994:7817:5443:e753) (Read error: Connection reset by peer)
[15:46:49] <arkanoid> not really, just declare your function with "func" instead of "proc" and program won't compile if purity is not assested
[15:47:26] <arkanoid> well, actually you have to add a couple of other things if you also want to assest the absence of exception
[15:48:58] <arahael> arkanoid: From a brief reading about nim, I think you can still altar the objects that are passed in to a no side-effect function?
[15:51:20] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:f85d:495b:7ffd:586)
[15:52:01] *** Joins: speckz (~speckz@2600:1700:ce0:bf00:a52a:1178:a8d7:4765)
[15:52:27] *** Joins: Guest38 (~Guest38@14.139.128.43)
[15:52:28] <arkanoid> arahael: no, you can't, except if you explicitly declare it in the signature of the func
[15:52:36] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net)
[15:52:43] *** Quits: Guest38 (~Guest38@14.139.128.43) (Client Quit)
[15:53:02] <arkanoid> all passed arguments are immutable by default, except when declared "var" in function signature
[15:53:08] <arahael> I would guess that no-side-effect functions can't call any functions that have side effects either?
[15:54:51] <arkanoid> arahael: exactly. Compiler tracks effects and can automatically tag functions according to absence of effects or not, so declaring a function with no side effects blocks the compilation all down the call stack from that point
[15:55:36] <arahael> arkanoid: Nice.  Does Nim also have sum types?
[15:55:45] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[15:56:12] <xsperry> arkanoid, still, func alone doesn't guarantee purity, you can mutate variables declared with var
[15:56:28] <xsperry> s/variables/passed arguments
[15:57:04] *** Joins: gggp_ (~gggp@60.10.194.43)
[15:57:05] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[15:57:06] <gggp_> why the consensus algorithm need a leader election ?
[15:57:11] <arkanoid> xsperry: https://nim-lang.org/docs/manual_experimental.html#strict-funcs
[15:57:12] *** Joins: cronos (~cronos@user/cronos)
[15:57:45] <pyzozord> Omg just had a brilliant idea. I'm collecting links to articles and websites about programming, that are of high quality and I might find useful in the future. But some of them are old and I already ran into few cases where the website was gone. I shall integrate with archive.org to make sure my links have a safe copy! :)
[15:58:09] <arkanoid> arahael: kinda, it has variant objects https://nim-lang.org/docs/manual.html#types-object-variants
[15:58:25] <xsperry> arkanoid, doesn't that just repeat what I have said? you can mutate argument declared with var
[15:59:44] *** Joins: scabby (~scabby@user/scabootssca)
[15:59:58] <arahael> xsperry: To be fair, you can do the same in Haskell (if, eg, an argument is passed as an IORef in a function that operates in IO).
[16:00:03] <arkanoid> xsperry: exacly, it was to confirm that. If you explicitly declare an argument as mutable, you can modify it. That's not the default, and can also be tracked with diagnostics
[16:00:36] <arahael> arkanoid: In Nim, are you able to sidestep this, and tell the compiler to pretend that a function has no side effects? (eg, to log something)
[16:00:44] <xsperry> arahael, you can't do that in a non-IO function. so it is treated the same as any other side effect
[16:01:39] <arahael> xsperry: Yeah - and in Haskell, you can't lie to the compiler and do it anyway. It's technically possible, but that way is true madness.
[16:01:57] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Ping timeout: 255 seconds)
[16:02:02] <arkanoid> arahael: sure. debugEcho does exactly that, check the source link too https://nim-lang.org/docs/system.html#debugEcho%2Cvarargs%5Btyped%2C%5D
[16:02:08] <arahael> In most other "functional" languages, I find that people often put in these 'not-quite-pure' functions and it all works fine, which then means you're back to having to reason about side effects.
[16:02:22] <arahael> arkanoid: So, if debugEcho can do that, what happens if it has a side effect?
[16:02:34] *** Quits: cronos (~cronos@user/cronos) (Ping timeout: 268 seconds)
[16:02:50] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Ping timeout: 268 seconds)
[16:04:19] <arkanoid> are you asking if the language will do what the programmer want outside the default defensive semantics? Yes, it will compile and run, and possibly deal with IO errors
[16:04:42] <arahael> arkanoid: In Haskell, you basically don't take the escape hatch, because it's insane.
[16:05:00] *** Joins: Twipply (~Twipply@user/twipply)
[16:05:07] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (Read error: Connection reset by peer)
[16:05:29] <arahael> arkanoid: In addition, a function is required to return the same output for the given input.
[16:05:54] <arkanoid> arahael: yes, it's a risk, I do understand that, but you can track it (after lisp, nim is one of the top language for metaprogramming)
[16:06:08] <arahael> arkanoid: Yeah - the reason in haskell that it's insane, is because you can't track it. :)
[16:06:38] *** Joins: rawgreaze (~rawgreaze@c-73-89-208-53.hsd1.ma.comcast.net)
[16:06:39] *** Quits: rawgreaze (~rawgreaze@c-73-89-208-53.hsd1.ma.comcast.net) (Changing host)
[16:06:39] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[16:07:14] <xsperry> I think the issue isn't just that you can mutate the argument, but that it can be read as well (since the value could change between two invocations of that function). in haskell, a non-IO function that accepts IO Ref can't do anything with the refeference, other than return it
[16:08:22] <arahael> And I reckon this is what makes it so nice as a functional language - it makes it really really predictable.
[16:08:47] <xsperry> I don't know anything about Nim besides what I googled in the past few minutes, but some of this is addressed in here: https://www.reddit.com/r/nim/comments/fuoiw1/nim_functions_are_not_pure/
[16:11:12] *** Joins: Leone (~Leo@45.72.231.86)
[16:11:28] *** Quits: Square (~a@178.62.91.8) (Ping timeout: 240 seconds)
[16:12:06] <arkanoid> xsperry: just by looking at the function signature, you can tell which effects or exceptions it may have. You have escape hatches, you can track them. If you don't use them lack of side effects is guaranteed by the compiler
[16:12:36] *** Quits: ebb (ebb@user/ebb) (Ping timeout: 245 seconds)
[16:12:55] <arkanoid> question is: is better to have escape hatches and way to track them, or don't have them?
[16:13:11] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-4-55.prtc.net) (Quit: Client closed)
[16:13:17] <arahael> arkanoid: Imho, much better not to have them, and not to need them. :)
[16:14:56] <arkanoid> arahael: sure, but it is impossible :D even in haskell, you have to deal with them somehow on the edge
[16:15:04] <arkanoid> monad all the way down
[16:16:04] <arahael> arkanoid: Monads all the way down is good. :)
[16:16:05] <xsperry> arahael I wouldn't go that far. even haskell has unsafePerformIO, and some things would be impossible without it. again, I don't have any experience with Nim, and what it is doing certainly seems better than completely unrestricted side effects, I just have a bit of an issue calling something noSideEffect that has them
[16:16:42] <arahael> xsperry: Sure, but I think most of the time, if you're doing unsafePerformIO, you're probably a bit insane. :)
[16:17:25] <arkanoid> unless you have someone who hijacks your functions signatures by adding "var" before arguments and adding some mutable login inside, you're safe
[16:17:29] <arahael> xsperry: Then again, ByteString is pretty good, and that does do some pretty unspeakable things under the hood, but that's...    Unspeakable. :)
[16:17:30] <xsperry> I have used it once or twice in the couple of years I've used haskell. so not nearly as much as I'd expected a typical Nim user using var
[16:18:29] *** Joins: cronos (~cronos@user/cronos)
[16:18:37] <xsperry> and it was pretty innocent, just as a way to have top-level mutable reference. ie ref = unsafePerformIO (newIORef ...)
[16:19:24] <arahael> xsperry: I don't know enough haskell to know if that's insane or not. :)
[16:21:25] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[16:21:25] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: lwe[m] (~dendrumat@2001:470:69fc:105::2f9b) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: AnisBarghouthi[m (~anis-barg@2001:470:69fc:105::6ebb) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: Kamui (~kamui-ren@2001:470:69fc:105::f74) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: rgddev[m] (~rgddevmat@2001:470:69fc:105::69c8) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f) (Quit: Bridge terminating on SIGTERM)
[16:21:26] *** Quits: crysisanon[m] (~crysisano@2001:470:69fc:105::1687) (Quit: Bridge terminating on SIGTERM)
[16:21:27] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Quit: Bridge terminating on SIGTERM)
[16:21:32] *** Quits: freshgumbubbles4 (~freshgum_@2001:470:69fc:105::c1a5) (Quit: Bridge terminating on SIGTERM)
[16:21:37] *** Quits: lexano[m] (~lexanomat@2001:470:69fc:105::3110) (Quit: Bridge terminating on SIGTERM)
[16:22:12] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[16:22:25] <arahael> Still, Nim sounds reasonable.
[16:22:52] <arahael> Especially given that Nim seems to allow writing closures that do not have side effects (except for var function arguments)
[16:23:25] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[16:23:32] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[16:24:46] *** Joins: AnisBarghouthi[m (~anis-barg@2001:470:69fc:105::6ebb)
[16:25:50] <arkanoid> arahael: exactly, the non top-level functions gets "clousure" calling convention and can be enforced just like other functions
[16:26:03] *** Joins: freshgumbubbles[ (~freshgum_@2001:470:69fc:105::c1a5)
[16:26:16] *** Joins: BEC001AF[m] (~kreatemor@2001:470:69fc:105::a0f)
[16:26:16] *** Joins: Kamui (~kamui-ren@2001:470:69fc:105::f74)
[16:26:16] *** Joins: Roman[m] (~wrongt@2001:470:69fc:105::341e)
[16:26:16] *** Joins: elemongw[m] (~elemongwk@2001:470:69fc:105::34ee)
[16:26:16] *** Joins: crysisanon[m] (~crysisano@2001:470:69fc:105::1687)
[16:26:16] *** Joins: lwe[m] (~dendrumat@2001:470:69fc:105::2f9b)
[16:26:17] *** Joins: NoGare[m] (~nogaremat@2001:470:69fc:105::35f2)
[16:26:29] *** Joins: rgddev[m] (~rgddevmat@2001:470:69fc:105::69c8)
[16:26:29] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[16:26:37] *** Quits: freakazoid334 (~freakazoi@72.168.176.170) (Read error: Connection reset by peer)
[16:26:42] *** Joins: lexano[m] (~lexanomat@2001:470:69fc:105::3110)
[16:26:42] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[16:26:42] *** Joins: psydroid (~psydroid@user/psydroid)
[16:27:00] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[16:27:04] *** Quits: Gerobadon (~Gerobadon@cpe-86-58-57-5.static.triera.net) (Quit: Client closed)
[16:27:25] *** Joins: cronos (~cronos@user/cronos)
[16:27:47] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Remote host closed the connection)
[16:28:00] *** Joins: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net)
[16:29:15] <arkanoid> btw, original question was about a different topic
[16:29:29] <arkanoid> would you take monads into imperative programming?
[16:30:34] <arkanoid> I've already developed some Maybe, List, Either monads in nim, including >>= infix, so code like "Maybe(5) >>= div(0)" make sense now
[16:30:35] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[16:31:01] <arkanoid> but yet not sure if on the edge I should still prefer exceptions
[16:31:47] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[16:31:54] <arahael> Yeah, that I don't know.  I mean, Monads are pretty good in haskell, but I don't know how nice they are in say, Nim.
[16:33:19] <arkanoid> I should study haskell more to know how they feel there
[16:36:48] *** Joins: cronos (~cronos@user/cronos)
[16:37:26] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[16:40:27] *** Joins: password (~password@user/password2)
[16:44:17] *** Joins: ebb (ebb@user/ebb)
[16:44:28] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[16:45:43] <arahael> Perhaps. :)
[16:45:57] * arahael is a bit of a Haskell fan at the moment, however.
[16:47:06] *** Joins: cronos (~cronos@user/cronos)
[16:47:56] <pulse> i like my programming languages same as i like my coffee
[16:47:59] <pulse> with side effects
[16:48:29] <mspe> dark and punching me in the stomach
[16:48:40] <pulse> ^
[16:49:36] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[16:50:30] *** Joins: mathAndRhetorics (~mathAndRh@ip-86-49-241-247.net.upcbroadband.cz)
[16:50:43] *** Joins: chomwitt (~chomwitt@2a02:587:dc04:b400:12c3:7bff:fe6d:d374)
[16:51:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Ping timeout: 255 seconds)
[16:53:42] *** Joins: cronos (~cronos@user/cronos)
[16:55:22] *** Joins: nekonibble (~nekonIsL@user/nekobit)
[16:55:38] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[16:56:16] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[16:56:47] <mathAndRhetorics> how do you get damn good at programming one specific type of software system?
[16:57:00] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[16:57:31] <jeronimo> I guess
[16:57:31] *** Joins: ShockTohp (~kevin@155.138.224.160)
[16:57:38] <jeronimo> the answer is very simple
[16:57:42] <jeronimo> and if you dont know the answer
[16:57:57] <mathAndRhetorics> is it by learning design patterns from the code of all guys who wrote such systems before?
[16:58:22] <mathAndRhetorics> simplistic mindset is stupid
[16:58:44] <mathAndRhetorics> because it is not actionable
[16:59:11] <mathAndRhetorics> realistically, some system needs to get coded and it should be better (for example in performance)
[17:00:20] <mathAndRhetorics> design patterns aren't only Gamma et al. Every type of system has some common patterns of code for that type of system...
[17:01:20] *** Joins: elnaviga1or (~elnavigat@196.154.66.197)
[17:01:35] <mathAndRhetorics> so, where do you get the highest performing publish subscribe Java implementation in the world?
[17:02:16] *** Quits: scabby (~scabby@user/scabootssca) (Ping timeout: 240 seconds)
[17:04:30] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 268 seconds)
[17:05:36] *** Joins: dudek (~dudek@185.150.236.155)
[17:06:45] <pulse> generally speaking
[17:06:47] <mathAndRhetorics> is it LMAX disruptor? https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results
[17:06:49] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[17:06:52] <pulse> to get good at programming X, implement X a dozen or so times
[17:07:04] <mathAndRhetorics> no, that is stupid and wrong
[17:07:21] <mathAndRhetorics> will you code LMAX disruptor by implementing publish/subsrcibe a dozen or so times, pulse? https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results
[17:08:06] <pulse> i don't even have a clue what that is
[17:08:37] <pulse> but whatever it is i'm pretty sure it can be implemented a dozen times over
[17:08:45] *** Joins: Hylden (~Hylden@user/hylden)
[17:09:01] <mathAndRhetorics> hahah, you don't have a clue what that is
[17:09:13] <pulse> if you want to draw a tree well, draw it 100 times
[17:09:24] *** Joins: cronos (~cronos@user/cronos)
[17:09:27] <mathAndRhetorics> that's why implementing publish/subscribe a dozen times doesn't magically give you LMAX disruptor
[17:10:00] <Hylden> Hello. I know some general programming and have done some basic graphics work, but can someone recommend me some good resources on reverse engineering video games? Like extracting textures and such?
[17:10:20] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[17:10:40] <pulse> Hylden, subcultures of reverse engineering can often be found within the modding communities
[17:10:57] <pulse> you might want to choose a specific game and see what they're doing
[17:11:18] <pulse> for most games you can just google how to extract textures, especially if they use a common engine
[17:11:32] <Hylden> pulse: this specific video game that I'm thinking of remastering a bit isn't popular
[17:12:00] <pulse> see this article for an idea of how it's done https://trashworldnews.com/yoda-stories/
[17:12:04] <pulse> it's a pretty good article
[17:12:13] <pulse> not sure if you're familiar with the game though
[17:12:20] <Hylden> Thanks
[17:12:43] <mathAndRhetorics> Hylden if you want something practical, download format analyzers and figure out what compression algorithm the data format uses, then decompress it.
[17:12:48] *** Quits: todda7 (~torstein@static-6-181-63-95.ipcom.comunitel.net) (Ping timeout: 258 seconds)
[17:13:18] <pulse> if the game uses unknown format, you usually have to do a bit of detective work
[17:13:29] <mathAndRhetorics> Hylden if you want something even more practical, download an "extractor" software that analyzes automatically a big file for multiple binary smallers files for thousands of different compression algorithms and tries to extract files from it (bitmaps, or sprites, etc.)
[17:13:57] <mathAndRhetorics> Hylden I've used https://sourceforge.net/projects/gameextractor/ in the past
[17:13:57] *** Joins: cronos (~cronos@user/cronos)
[17:14:46] <Hylden> mathAndRhetorics: awesome, this is exactly the kind of thing I was looking for
[17:14:50] <Hylden> Thanks
[17:15:03] *** Joins: rsx (~dummy@ppp-188-174-143-186.dynamic.mnet-online.de)
[17:16:06] <Hylden> Wait a minute, this is a java app
[17:16:37] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Remote host closed the connection)
[17:16:50] <Hylden> Anyway, thanks for the answers, guys
[17:16:52] *** Quits: Hylden (~Hylden@user/hylden) (Quit: Hylden)
[17:17:17] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Ping timeout: 246 seconds)
[17:17:20] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[17:17:47] *** Quits: inky (~inky@46.36.118.167) (Ping timeout: 268 seconds)
[17:17:49] <mathAndRhetorics> there are also commrecial apps for that, but he's already quit (knowing he needs a game extractor) - http://www.watto.org/game_extractor.html
[17:18:14] *** Quits: elnaviga1or (~elnavigat@196.154.66.197) (Read error: Connection reset by peer)
[17:18:29] <pulse> so what is a LMAX disruptor mathAndRhetorics
[17:18:41] <pulse> sounds like a device from star trek
[17:18:45] <mathAndRhetorics> anyway, the basic concept for messaging is producer/consumer https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem and the highest performing framework in Java I know of is https://github.com/LMAX-Exchange/disruptor/wiki/Introduction
[17:18:56] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[17:18:56] <pulse> "quick sir, get the LMAX disruptor before the aliens breach!"
[17:19:39] <jeronimo> :D
[17:21:54] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[17:26:10] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[17:28:32] *** Joins: anovick_ (~anovick@IGLD-83-130-153-93.inter.net.il)
[17:29:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:31:03] *** Joins: scabby_ (~scabby@user/scabootssca)
[17:33:12] *** Quits: anovick_ (~anovick@IGLD-83-130-153-93.inter.net.il) (Ping timeout: 268 seconds)
[17:34:01] *** Quits: gggp_ (~gggp@60.10.194.43) (Ping timeout: 255 seconds)
[17:34:54] *** Joins: inky (~inky@46.36.114.72)
[17:35:49] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 255 seconds)
[17:36:49] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[17:36:51] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Remote host closed the connection)
[17:45:54] *** Joins: cronos (~cronos@user/cronos)
[17:47:05] *** Joins: gggp (~gggp@123.113.186.67)
[17:48:49] *** Joins: Intelo (~Intelo@88.244.92.35)
[17:52:01] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[17:52:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[17:54:12] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[17:55:25] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[17:57:31] *** Joins: cronos (~cronos@user/cronos)
[17:59:39] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[18:00:05] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[18:01:17] *** Quits: jaysicks (~jaysicks@94-21-246-52.pool.digikabel.hu) (Remote host closed the connection)
[18:04:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[18:07:58] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[18:08:08] *** Joins: gggp_ (~gggp@60.10.194.43)
[18:09:30] *** Joins: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net)
[18:09:55] *** Quits: t3nj1n (~t3nj1n@108.5.82.237) (Ping timeout: 258 seconds)
[18:10:06] *** Joins: cronos (~cronos@user/cronos)
[18:11:26] *** Quits: gggp (~gggp@123.113.186.67) (Ping timeout: 252 seconds)
[18:12:43] *** gggp_ is now known as gggp
[18:13:15] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[18:15:20] *** Joins: cronos (~cronos@user/cronos)
[18:16:24] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[18:16:55] *** Quits: cronos (~cronos@user/cronos) (Client Quit)
[18:17:34] *** Joins: scabby (~scabby@user/scabootssca)
[18:18:45] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[18:18:53] <pyzozord> https://www.lab6.com/0
[18:19:28] *** Joins: cronos (~cronos@user/cronos)
[18:19:30] *** Quits: scabby_ (~scabby@user/scabootssca) (Ping timeout: 252 seconds)
[18:19:47] <pyzozord> https://www.lab6.com/0 - "Deurbanising the Web"
[18:20:26] <pyzozord> Sorry wasn't sure if the first message was sent corretly because I sent it before I got "##programming was synced"
[18:23:15] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Ping timeout: 255 seconds)
[18:23:46] <Quietwalker> what does deurbanizing the web mean?
[18:24:15] <Quietwalker> is this like when folks don't want to say black, so they refer to african americans as being "urban" ?
[18:25:04] *** Joins: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[18:27:12] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[18:27:51] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[18:27:53] *** Joins: arcatech (~arcatech@user/arcatech)
[18:29:17] *** Joins: freakazoid333 (~freakazoi@72.168.176.129)
[18:30:54] <deniska> urbanization is a process of moving to cities
[18:31:01] <deniska> so de-that is the opposite :)
[18:31:10] *** Quits: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net) (Ping timeout: 268 seconds)
[18:31:42] *** Quits: nekonibble (~nekonIsL@user/nekobit) (Ping timeout: 252 seconds)
[18:31:47] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 268 seconds)
[18:31:49] <Quietwalker> Right.  But when folks want to denigrate black people, without saying "black," they call them "urban" instead.
[18:32:22] <Quietwalker> I just don't know what any definition of urban has to do with anything about the web.
[18:32:29] <deniska> pyzozord: this is a provocation. You can easily write html1.0-ish page which will render fine in any browser new and old
[18:32:31] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[18:32:37] <deniska> you don't need pdf for that :)
[18:33:21] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[18:34:10] <pyzozord> deniska: maybe you are right, I didn't really look deep into that. I just thought "oh neat, I like pdfs"
[18:34:37] <deniska> I… don't exactly dislike PDFs
[18:34:43] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[18:34:57] <deniska> but I certainly like them less than html :)
[18:35:16] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[18:35:48] <Quietwalker> I remember for a while everyone wanted to put things in .ps form.
[18:36:06] <Quietwalker> which in the *nix days was a pain because who wants to run a graphical terminal just so you can read  text?
[18:36:12] *** Joins: nekonibble (~nekonIsL@user/nekobit)
[18:36:35] <Quietwalker> if you weren't running xwindows, you'd just put it through a ps->pdf converter and read it on a windows or other machine.
[18:37:03] <Quietwalker> and half the ps refused to properly render anyway because someone used some random feature
[18:39:17] <deniska> PS train left the station as soon as the first specific printer related quirk appeared in it
[18:39:24] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 252 seconds)
[18:39:28] *** Quits: chomwitt (~chomwitt@2a02:587:dc04:b400:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[18:39:32] <deniska> which I assume happened as soon as the first printer maker adopted it
[18:39:55] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[18:40:04] *** Joins: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[18:41:17] <deniska> anyway, my recent grudge towards PDF is dictated by how a noticable amount of marketplaces and other various delivery services give us shipping labels in PDF
[18:41:41] *** Joins: node1 (~node1@user/node1)
[18:42:31] <arahael> PDF's aren't so bad as long as they're not using all sorts of proprietary Adobe stuff.
[18:42:32] <deniska> and sticker printers, ones which print hundreds labels per minute, don't speak PDF
[18:43:53] <node1> Hi, here which constructor will be used to save https://pastebin.com/raw/9MSb1NWr ?
[18:43:54] <deniska> they speak their own handful of languages like ZPL or TSPL, for which windows drivers exist which (often poorly) convert whatever bitmaps windows asks it to print to a ZPL bitmap
[18:44:13] <deniska> often screwing things up like orientation and such
[18:45:03] <deniska> so I had to basically write my own printer "driver" which uses imagemagick to convert pdf to png, then this png is converted to embedded image in ZPL :)
[18:45:18] <deniska> and then just put it in tcp port of the printer
[18:45:23] *** Joins: cronos (~cronos@user/cronos)
[18:45:54] <deniska> node1: you create an instance of A, so A.__init__ will be called
[18:47:12] <sandman13> Maybe people know here
[18:47:23] <sandman13> has anyone used cmocka?
[18:47:29] <node1> sorry kindly replace A with B
[18:47:42] <node1> obj = B(1,2)
[18:48:29] <node1> https://pastebin.com/raw/XviyC5Jj
[18:51:26] <deniska> node1: well, then, creating an instance of B calls B.__init__ which calls A.__init__
[18:52:19] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 255 seconds)
[18:52:26] *** Joins: Trashlord__ (~trash@user/trashlord)
[18:52:27] <InPhase> deniska: pdf is one of the most reliable printing formats around.  My primary eyebrow raise there would be printing software that's thwarted by a pdf.
[18:52:46] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[18:53:17] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:53:42] *** Joins: magla (~gelignite@55d47ecb.access.ecotel.net)
[18:54:31] <deniska> InPhase: big issue I had is that PDF reader thinks that if a page height is lower than page width, it's a landscape mode, while printer driver has the opposite opinion
[18:54:49] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[18:55:05] <InPhase> The primary reason pdf thrives is that there are no competitors which combine vector graphics, raster graphics, and embedded fonts with fairly reliable cross-platform layouts.  I'd support an alternative which isn't Turing complete, but as far as I know, this doesn't exist.
[18:55:11] <deniska> but even besides that, printing PDFs programmatically is just… awkward
[18:55:43] <arahael> There's SVG, but SVG is... Limited.
[18:55:57] <deniska> it's fine to print a document on a normal printer if you are sitting in front of a computer
[18:56:01] <arahael> Doesn't really do embedded fonts.
[18:56:13] <pyzozord> InPhase: I think I share the same opinion. Btw why the aversion for turing complete format? Security reasons? Just curious.
[18:56:14] <InPhase> arahael: Yeah, for a while I thought svg was going to advance to overtake it.  But the standards committee pulled back on plans and this never happened.
[18:56:28] <node1> deniska, But when we are creating an object `obj =  B(1,2)` I must say compiler looks for class B, where it find class A as an argument. So i must say first A class constructor has been called?
[18:56:30] <deniska> to automatically print a shipping label on a label printer when you scanned an appropriate barcode… that's another story
[18:56:37] <arahael> InPhase: It's rather unfortunate.  HTML + SVG is better, but it's still clunky.
[18:56:39] <InPhase> arahael: It fell apart when they decided to not move forward on multipage svg.
[18:56:55] <deniska> node1: no. When you create an instance of B, B.__init__ is the thing which gets called
[18:57:08] <InPhase> deniska: It sounds like the issue there is the pdf reader making a while assumption.
[18:57:21] <InPhase> s/while assumption/wild assumption/
[18:57:32] <deniska> InPhase: it's just a bunch of issues compounding in a single mega-issue :)
[18:57:36] <arahael> InPhase: Somehow, the lack of good font support in SVG is one of my bigger issues - maybe that's changed but I remember looking at SVG's fonts and being... Very unimpressed.
[18:58:01] <deniska> InPhase: honestly it's best when a shipping company just gives us data in, like, json or xml to compose a label ourselves
[18:58:40] <deniska> then we can just write specific ZPL code which works best with out printers and label sizes :)
[18:58:52] <deniska> s/out/our/
[18:59:35] <InPhase> deniska: This is why svg advancing to be a pdf competitor would have been nice.  It would have brought xml parsing as an option along with it.
[19:00:03] <deniska> When you're printing using thermal transfer with a resolution like 200ppi, quite minor variations are the difference between barcode reading properly or not quite
[19:00:10] <InPhase> deniska: You could have a format that both displays, and can be parsed programmatically.
[19:00:30] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[19:00:45] <deniska> so languages like ZPL just have a command like "print barcode foo in encoding bar at X, Y" and it works flawlessly
[19:01:23] <deniska> InPhase: while SVG is mildly less annoying to parse than PDF, it's… not that much better
[19:01:46] <node1> Thanks. so instead  at looking onto argument of  `class B`  mentioned. It must first start with Initializer function then it will call class A.
[19:02:35] <deniska> node1: the fact that you put A inside of `class B(A):` means that "if a thing you are trying to look up is not found in B, look it up in A"
[19:02:47] <arahael> deniska: It's possible to extract data from a PDF, but I would think SVG is easier.
[19:03:20] <InPhase> deniska: Well svg is only going to be good for parsing if things are intentionally labeled and a specification or consistency exists for those labels.  But support is there for this.
[19:03:26] <deniska> arahael: yeah, for extracting textual data SVG is better because it actually has, like, runs of text
[19:04:01] <arahael> deniska: Right.
[19:04:06] <deniska> as opposed to "let's just lump letters which are relatively close together in a sentence and hope for the best" of parsing PDFs :)
[19:04:07] <InPhase> deniska: But you can also have json or xml where the labels are inconvenient to parse automatically.  So there's always some requirement of organized data being prepared.
[19:04:37] <arahael> deniska: Which, funnily enough, are the sorts of PDF I've had to parse in the past.  We eventually moved to XML + XSLT.
[19:04:53] <arahael> The XSLT transformed the document to HTML.
[19:04:58] <deniska> InPhase: yeah, my point always was "just give us raw data, we're as interested in printing them nicely as you are, and we *know* how to print them nicely on our equipment"
[19:06:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:34e6:e307:f490:7d07)
[19:06:25] <arahael> deniska: How common is that, though, to be a customer who is capable of doing that, and cares? :(
[19:06:40] <deniska> arahael: it can be an available option
[19:06:44] <node1> deniska, yes as per the `Method resolution order` it will look into B -> A -> builtins.object
[19:07:16] <node1> I wish is there more precise way to check the signatures
[19:07:34] <arahael> deniska: Indeed.
[19:08:22] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[19:08:38] *** Joins: gggp_ (~gggp@111.63.14.119)
[19:09:42] <InPhase> deniska: I've worked at many universities, and a "fun" read can be the guidelines for university logo usages that meticulously spell out requirements for all the offsets, colorings, arrangements, and arrangement alternatives which comply with approved usage of all brand marks.  This is the mentality behind why people don't want to give raw data out for some things.  :)
[19:10:45] <deniska> InPhase: yeah, I encountered that mentalitu
[19:11:09] <InPhase> deniska: I usually just want to slap the logo in the corner of a poster for a conference, like everyone else does at conferences.  But then you end up on a hunt for the raw logo files so that you can actually do that.  It can be tricky to dig up because of this, even though it's an allowed use.
[19:11:16] <deniska> InPhase: people become a bit less invested in it when we tell them "you know we can't print that in color, or even in grayscale?"
[19:11:44] *** Quits: gggp (~gggp@60.10.194.43) (Ping timeout: 240 seconds)
[19:12:35] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[19:13:35] <deniska> I guess people who program these systems are just not aware 1) how label printers are annoyingly different from HP laserjet they typically had to deal with at work, 2) how we're not starting adobe reader on a PC for each of multiple hundreds of labels per day :)
[19:13:59] <arahael> deniska: Often these requirements don't come from the programmers.
[19:14:47] <arahael> I think there are alternative PDF tools, doesn't _have_ to be adobe, though of course, adobe has all the patented stuff.
[19:15:29] <deniska> arahael: "I have a PDF file and I want to print it programmatically" is a surprisingly annoying task
[19:15:51] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[19:16:42] <deniska> if you are in a windows land, there're some PDF viewers which come with --headless --print-to kind of startup flags, probably something like this exist for linux too
[19:16:52] <deniska> but then the driver is an absolute piece of badness too
[19:16:57] <arahael> Very certain stuff like this exist for linux, too.
[19:17:11] <arahael> And there are libraries around, too.
[19:17:26] <arahael> Also on macos, pdf is practically native.
[19:17:51] <deniska> as I said, I went with imagemagick invocation to convert from pdf to png, and then a python script to convert png to zpl
[19:18:17] <arahael> Sure, that works too.
[19:19:14] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:19:21] <deniska> and an imagemagick invocation is different between shipping companies
[19:20:07] <arahael> That's a deployment issue.
[19:20:08] <deniska> to crop them slightly differently and apply a slightly different dithering algorithm, so that logos look vaguely good and barcodes are scannable >_<
[19:20:21] *** Joins: compscipunk (~compscipu@107-214-234-232.lightspeed.sndgca.sbcglobal.net)
[19:20:52] <deniska> getting parameters right is more work than a designing label from scratch would be
[19:21:04] <deniska> most of them are maybe 5 lines of text and a barcode or two
[19:21:18] <arahael> Aha!  I think *that* is the real reason you need to do your own barcodes.
[19:21:47] <pulse> what is the capacity limit for barcodes
[19:22:08] <arahael> pulse: Surprisingly high, generally.  Depends on how big your paper and printer is. :)
[19:22:23] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:22:27] <pulse> barcodes are fascinating
[19:22:48] <deniska> pulse: for 1d barcodes the best encoding is probably code128 if you're doing alphanumerics?
[19:23:13] <InPhase> pulse: QCodes are an interesting update with the higher data density.
[19:23:31] <pulse> i know you can fit a game in qrcode just barely
[19:23:50] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[19:23:52] *** Joins: t3nj1n (~t3nj1n@108.5.82.237)
[19:24:18] <deniska> qrcodes are… mainstream. Everyone knows to point their phone on a thing if they see these 3 registration squares :)
[19:24:43] <InPhase> deniska: And they would also be totally useless if we didn't all have phones.  :)
[19:25:33] <InPhase> This is a product of the moment.  Far enough along that we have phones in everyone's pockets, but not far enough yet that my cereal box is RFID communicating with my phone.
[19:25:54] <deniska> InPhase: quite a lot of barcode scanning devices nowadays combine traditional laser sweeping with parsing a camera image
[19:25:57] *** Joins: cronos (~cronos@user/cronos)
[19:26:17] <arahael> deniska: Also absurdely easy to scan for QR codes in an iPhone app. :)
[19:26:29] <deniska> laser sweeping works better in poor lighting, camera works better with reflective surfaces
[19:26:34] <arahael> (As in, the apple API works nicely at that)
[19:26:46] <arahael> Get the camera. Specify you want QR Code. Done.
[19:27:16] *** Joins: Square (~a@178.62.91.8)
[19:27:18] <deniska> I'm pondering making a webapp for warehouse stuff
[19:27:25] *** Quits: jazzy (~jaziz@2600:380:c07e:8a82:ade3:efdb:74c6:3aa8) (Ping timeout: 255 seconds)
[19:27:33] <deniska> seems like being able to scan a barcode from a browser is almost there
[19:27:35] <pulse> you know if it was something like qr but with color
[19:27:37] <InPhase> Google's default camera will scan both QR codes and bar codes.  The bar code scans bring up product pages in a search.
[19:27:39] <pulse> you could multiply the capacity
[19:27:40] <pulse> somewhat
[19:27:53] <deniska> pulse: I think there're encodings like that
[19:27:56] <InPhase> Most QR Codes are urls, and go directly.
[19:28:22] <deniska> pulse: but everything involving color is immediately less useful because printing in color is much more expensive
[19:28:38] *** Joins: hposca (~hposca@node-1w7jr9phoke2tu92kv7e533az.ipv6.telus.net)
[19:28:41] <pulse> grayscale would work too :D
[19:28:46] *** Joins: user51 (~user51@77.124.42.70)
[19:28:53] <pulse> might be some error margin tho
[19:29:01] <pulse> i guess that's why it's black/white
[19:29:15] *** Joins: NEYi (~NEYi@109.251.216.38)
[19:29:17] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[19:29:29] <user51> anyone got an idea about the tradeoff between writing a recursive descent parser for a language, versus using yacc for it?
[19:31:22] <deniska> user51: yacc creates LALR parsers, so I guess it boils down to recursive descent vs LALR?
[19:31:54] <arahael> The language you're using plays a big part of it, too.  Eg, I wouldn't bother with yacc if you were comfortable writing parsec parsers in haskell.
[19:32:15] *** Joins: Quacc (~Quacc@user/quacc)
[19:32:32] <user51> it seems like error messages also play into it, but if yacc can have an associated action there's no reason it couldn't do errors, either
[19:32:36] <deniska> last time I wrote a parser I used recursive descent, and it was a nice experience, so I don't know why'd you do something differently, but I also wrote a parser probably exactly once, so what do I know :)
[19:34:34] <pyzozord> deniska: that is 100% more parsers then I wrote
[19:35:45] <pyzozord> except if you count reverse polish notation calculator from K&R :P
[19:36:08] <user51> shunting-yard is easy to learn
[19:37:05] <user51> pyzozord: nitpicking, but wouldn't it be infinite% more? :P
[19:37:42] <arahael> user51: You're assuming pyzozord hasn't written *half* a parser.
[19:38:27] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:38:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 246 seconds)
[19:38:56] *** Joins: snake (~snake@user/snake)
[19:39:06] <pyzozord> user51: yeah it probably is :D
[19:39:11] *** inky is now known as tanakian
[19:39:31] <user51> my enthusiasm for writing a little yacc is somewhat fading
[19:39:44] <pyzozord> i guess you could call that reverse polish notatoin calculator a "half parser". In that case I stand by my 100%
[19:40:04] <user51> it was pretty interesting to at least imagine how it would work
[19:40:43] <MrMobius> would forth be a half parser too then?
[19:40:54] <pulse> what is a half parser
[19:41:00] <pulse> stops mid-way? :D
[19:41:06] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[19:41:22] <user51> i mean, if we define the grammar as empty string only, i wonder how many people unintentionally wrote a parser
[19:41:35] <pulse> unintentional parser, nice
[19:43:04] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[19:43:25] <user51> MrMobius: interesting forth mention. i thought it could be nice for output
[19:43:46] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Client Quit)
[19:44:09] <user51> as in, output forth code from a parser generator
[19:44:45] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[19:45:15] *** Joins: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[19:45:58] *** Joins: gggp__ (~gggp@60.10.23.160)
[19:47:12] <GeDaMo> That's essentially what the shunting yard algorithm does
[19:47:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[19:47:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:48:01] *** Joins: nuncanada (~dude@179.235.162.215)
[19:48:17] <MrMobius> ive wondered if you could optimize shunting yard algo output once you had it in that format
[19:48:18] *** Quits: gargus (~user@60-242-110-27.tpgi.com.au) (Quit: Leaving)
[19:48:21] <user51> stacks are useful :)
[19:48:31] <MrMobius> if you didnt have enough horsepower for modern optimizing
[19:48:45] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 255 seconds)
[19:50:37] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:51:18] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[19:52:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:56:34] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 265 seconds)
[19:57:28] *** Quits: nekonibble (~nekonIsL@user/nekobit) (Quit: free(neko);)
[19:57:48] *** Joins: nekonibble (~nekonIsL@user/nekobit)
[19:58:37] *** Quits: humky (~humky@user/humky) (Remote host closed the connection)
[19:59:11] *** Joins: humky (~humky@user/humky)
[20:00:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:01:13] *** Quits: nekonibble (~nekonIsL@user/nekobit) (Read error: Connection reset by peer)
[20:01:57] *** Joins: nekonibble (~nekonIsL@user/nekobit)
[20:03:51] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[20:04:33] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:05:41] *** Joins: trevors (~trevors@79.120.223.86)
[20:05:59] *** Joins: cronos (~cronos@user/cronos)
[20:06:47] *** Joins: rexar89 (~alexi5@170.39.109.213)
[20:08:20] *** Joins: LiftLeft (~LiftLeft@154.21.114.43)
[20:09:02] *** Joins: chomwitt (~chomwitt@athedsl-32487.home.otenet.gr)
[20:11:41] *** Quits: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Ping timeout: 268 seconds)
[20:12:26] *** Quits: rsx (~dummy@ppp-188-174-143-186.dynamic.mnet-online.de) (Quit: rsx)
[20:14:12] <rexar89> hello everyone
[20:14:28] <GeDaMo> Hi rexar89 :)
[20:15:22] <pulse> ahoy there
[20:15:53] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[20:16:36] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[20:17:36] *** Joins: pncl (~pncl___@5.245.211.197)
[20:20:50] *** Quits: trevors (~trevors@79.120.223.86) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:22:47] *** Quits: bihtori (harjuo@kapsi.fi) (Ping timeout: 268 seconds)
[20:22:50] *** Joins: trevors (~trevors@79.120.223.86)
[20:22:53] *** Joins: bihtori (harjuo@kapsi.fi)
[20:23:40] *** Quits: trevors (~trevors@79.120.223.86) (Client Quit)
[20:24:39] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[20:25:55] *** Quits: Quacc (~Quacc@user/quacc) (Quit: leaving)
[20:26:07] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[20:26:07] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[20:26:07] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[20:26:08] *** Joins: gggp_ (~gggp@111.63.14.119)
[20:27:38] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Remote host closed the connection)
[20:29:30] *** Quits: gggp__ (~gggp@60.10.23.160) (Ping timeout: 256 seconds)
[20:32:03] *** Joins: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[20:33:06] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[20:34:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:36:21] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:36:28] *** Joins: Guest2949 (~Guest29@103.5.134.18)
[20:37:15] <Guest2949> So I've finished reading both papers by Bryan Ford (PEG, Packrat), and those are very well-written, so there was no trouble understanding the concept. I also had a look at the sample implementations that Ford has on his site, and that's very intuitive as well. However, I have a few practical questions:
[20:38:02] <Guest2949> 1. From experience, how important is memoization (aka packrat)? I took a look at the Zig compiler, and of course, implementation details diverge from theory, but the Zig compiler did not seem to do any memoization (at least not at the parsing stage). I suppose it does depend on the language's grammar as to how easily a degenerate case can be
[20:38:03] <Guest2949> created that would cause exponential growth in parsing time?
[20:38:14] <Guest2949> 2. Performance. Again, the Zig compiler is superfast (but I'm not sure if it is really a PEG parser rather than an adhoc RD), but on some other streams, I saw someone giving up on PEG (he tried to follow the theory closely in his implementation from what I could tell) since its performance was below par for his usecase (He was writing a Ruby
[20:38:14] <Guest2949> transpiler in C++).
[20:38:25] <Guest2949> 3. I can see that the standard for PEG mandates the same grammar for both tokenisation and parsing. Is this really followed in practice? Using a parser-combinator based approach, I can see this being sufficiently easy (as in the case of the reference implementations by Ford), but what are the pros and cons of separating them out vs keeping them in
[20:38:26] <Guest2949> the same pass, so to speak (specifically for PEG)?
[20:38:34] <Guest2949> 4. Error-handling - good ways peculiar to PEG?
[20:38:34] <Guest2949> 5. Learning how to read (well, this part not so much), write, and be able to validate a PEG grammar for some hobby language from scratch? There are tools like peg/PEG.js, so plug in and if it passes, then it's reasonably good/safe?
[20:38:51] <Guest2949> 6. Any issues parsing expressions in particular? (This ties in with Q2) PEG can specify the whole expression grammar (just like BNF), but good to (or possible?) to use something like Pratt for the expressions bit since it's basically RD anyway).
[20:40:25] <GeDaMo> "A Parsing Machine for PEGs" http://www.cs.tufts.edu/~nr/cs257/archive/roberto-ierusalimschy/lpegcompiler.pdf
[20:40:46] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 255 seconds)
[20:42:23] <Guest2949> GeDaMo I've read that paper :-)
[20:42:39] <Guest2949> Just wanted some practical experiences, if possible!
[20:42:48] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 268 seconds)
[20:42:58] *** Quits: nekonibble (~nekonIsL@user/nekobit) (Ping timeout: 265 seconds)
[20:43:38] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:43:51] *** Quits: dudek (~dudek@185.150.236.155) (Read error: Connection reset by peer)
[20:45:45] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[20:46:07] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[20:47:50] *** Joins: cronos (~cronos@user/cronos)
[20:48:00] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[20:49:26] <Izem> the python parser now uses peg, with memoizaiton
[20:49:30] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[20:49:55] *** Trashlord__ is now known as Trashlord
[20:49:58] <Izem> it's not that important, depending on your grammar
[20:50:55] *** Joins: dunkeln (~dunkeln@188.71.231.232)
[20:50:56] *** Quits: dunkeln (~dunkeln@188.71.231.232) (Client Quit)
[20:51:03] <Izem> PEG has no issues parsing grammars
[20:51:28] <Izem> Guest2949: Error handling?
[20:51:33] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[20:51:33] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[20:51:33] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[20:51:57] *** Joins: trevors (~trevors@catv-89-132-207-129.catv.broadband.hu)
[20:52:05] <Izem> Also PEG performs well, the issue is memory
[20:52:16] *** Joins: Andalu30 (~andalu30@85.137.21.37.dyn.user.ono.com)
[20:52:27] *** Joins: dunkeln (~dunkeln@188.71.231.232)
[20:53:43] *** Joins: salitos (~salitos@197.156.137.155)
[20:54:34] <Izem> hmm, I shoulve used number labels in my reply
[20:55:07] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:56:12] *** Quits: salitos (~salitos@197.156.137.155) (Read error: Connection reset by peer)
[20:56:44] *** Quits: tanakian (~inky@46.36.114.72) (Ping timeout: 246 seconds)
[21:00:56] *** Quits: nuncanada (~dude@179.235.162.215) (Read error: Connection reset by peer)
[21:01:05] *** moose` is now known as moose
[21:01:36] *** Quits: speckz (~speckz@2600:1700:ce0:bf00:a52a:1178:a8d7:4765) (Quit: Textual IRC Client: www.textualapp.com)
[21:01:39] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[21:01:42] *** Joins: nekonibble (~nekonIsL@user/nekobit)
[21:02:09] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[21:03:24] <Guest2949> Izem Hey sorry, just seeing your messages now. Yes indeed, Guido's talk on it inspired me to start looking at it in greater depth. His approach seems to be to write a generator which then spits out the parser. I was keener to handcode everything! :-), but his blogs did help understand it much better
[21:03:56] <Izem> I don't get that mindset tbh
[21:04:13] <Izem> parsers have to be one of the most underused thing in programming
[21:04:24] <Guest2949> You mean generating it or handcoding it?
[21:04:27] <Izem> there are common place, but not used enough imo
[21:04:34] <Izem> handcoding it
[21:04:38] *** Joins: nuncanada (~dude@179.235.162.215)
[21:04:46] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[21:04:56] <Guest2949> It's for education - so understand the whole process from scratch. Hence the hobby language.
[21:05:11] <Izem> I didn't see that part
[21:05:13] <Guest2949> For a massive language, it would be much more sensible to probably generate it, I agree
[21:05:36] <Guest2949> Ah, I didn't mention it till now. I'm still doing quite a bit of research on it.
[21:05:36] <Izem> idk, if I ever get around to my hobby language I'm gonna be using a parser too
[21:06:14] <Izem> are you making a parser, a language, or both?
[21:06:21] <Guest2949> But that's the problem - I see a lot of people who do full courses in uni, and they still don't understand how something as basic as parsing actually works under the hood
[21:06:37] <Guest2949> I'm thinking of doing a small project to learn the techniques and see if it scales
[21:06:41] *** Quits: nekonibble (~nekonIsL@user/nekobit) (Quit: free(neko);)
[21:06:51] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Remote host closed the connection)
[21:06:51] <Izem> if it's anything like my experience, I learned nothing during those courses
[21:06:51] <Guest2949> and if that works fine, then I might do a full-fledged language in the near future
[21:06:56] <Guest2949> Hahaha
[21:07:06] <Izem> not sure if uni means much tbh
[21:07:30] *** Joins: nekonibble (~nekonIsL@user/nekobit)
[21:07:35] <Izem> I'm interested in parsing itself too, but yeah it does take a while to grok it
[21:07:43] <Guest2949> Back when I was in university (mid 2000s), we had to handcode everything, and it was quite fun
[21:07:49] *** Quits: nekonibble (~nekonIsL@user/nekobit) (Client Quit)
[21:07:52] <Izem> haha see!
[21:08:00] <Izem> this is what I'm talking about :)
[21:08:01] <Guest2949> So now I've been thinking of creating my own language for some time now, but small steps :D
[21:08:09] <Izem> yeah
[21:08:19] <Guest2949> Oh no, I mean, a simple RD parser is absolutely easy - make an LL(1) like grammar and it works
[21:08:33] <Izem> syntax design took me a while but I learned a lot
[21:08:38] <Izem> oh yeah, for sure
[21:08:40] <Guest2949> Right
[21:09:07] *** Joins: nekonibble (~nekonIsL@user/nekobit)
[21:09:11] <Guest2949> I do see a nice trend with Crating Interpreters where people are making the jump back to doing everything from scratch (for small scales)
[21:09:27] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[21:09:28] *** nekonibble is now known as nekodesu
[21:09:31] <Izem> after that, imo you pick a model for your language and soon enough you will have your own programming language
[21:09:43] <Guest2949> Indeed
[21:09:57] <Izem> I have not read CI but yeah it sure seems popular
[21:10:07] *** Quits: nekodesu (~nekonIsL@user/nekobit) (Client Quit)
[21:10:15] <Guest2949> Yup - Nystrom did a good job (I think), but I can't stand his writing style XD
[21:10:22] *** Joins: nekodesu (~nekonIsL@user/nekobit)
[21:11:05] <Izem> I think people can get to programming languages a lot faster if they skip parsing, depending on who you ask that's not important
[21:11:22] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 255 seconds)
[21:11:46] <Guest2949> Yeah, I'm in the opposite camp I'm afraid :D  ... still, I do get your perspective too. In any real language, the latter stages are the most important and difficult ones.
[21:12:09] *** Joins: gggp__ (~gggp@123.113.186.67)
[21:12:32] <Guest2949> LLVM makes it easier, but it would be highly educational to have a "debug" sort of backend as well - directly to assembly, with some optimisations in our code itself
[21:12:33] <Izem> that might have been wirths approach iirc, in his text he just does RD cause he says he doesn't care lol
[21:12:42] <Guest2949> Hahahaha
[21:12:47] <Guest2949> I do love that guy
[21:12:52] <Izem> yeah, great dude
[21:12:53] <Guest2949> The real OG!
[21:13:26] <Izem> he knows parsing clearly, but that text he wanted students to get the idea behind compilers
[21:13:37] <Guest2949> Right
[21:13:42] *** Quits: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com) (Quit: Blackpajamas)
[21:13:49] <Izem> the thing I want to do most is to write a backend
[21:14:01] <Guest2949> for LLVM?
[21:14:05] <pyzozord> Izem: can you link the text you are talking about?
[21:14:08] <Izem> I've been trying to get into assembly
[21:14:12] <Izem> any
[21:14:14] <Guest2949> Ah, I see
[21:14:20] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[21:14:22] <Izem> but writing a backend for LLVM doesn't seem to bad
[21:14:28] <GeDaMo> https://craftinginterpreters.com/
[21:14:30] <beaky> assembly is nice you can write nice tiny programs that are efficient in memory size
[21:14:42] <Guest2949> There's even a Cpu0 example for LLVM (it's very very dated) where the author creates a simple new architecture and a whole backend for it in LLVM
[21:14:50] <Izem> pyzozord: http://people.inf.ethz.ch/wirth/CompilerConstruction/index.html
[21:14:58] <Guest2949> I used to love assembly back in uni, but that was 8086 (8085 as well)
[21:15:09] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 255 seconds)
[21:15:15] <GeDaMo> There's an ##asm channel
[21:15:17] <Izem> I'm pretty dumb but I just realized I needed to get an rpi
[21:15:18] <pyzozord> Izem: thanks
[21:15:20] <Guest2949> C made a whole lot more sense after assembly!
[21:15:27] <Guest2949> rpi?
[21:15:28] <Izem> so I can get to program in arm
[21:15:32] <Guest2949> Oh okay
[21:15:41] <Izem> I want to learn x86 too
[21:15:48] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[21:15:56] <Guest2949> Sounds like fun!
[21:16:15] <Izem> but ah, not as interested for obvious reasons :P
[21:16:32] <Guest2949> Why so?
[21:16:45] <Izem> large bloated architecture
[21:16:48] <Guest2949> Hmmm
[21:17:11] <Guest2949> What about RISCV?
[21:17:23] <Izem> yeah pretty crazy what they did to compete with risc architectures :D
[21:17:34] <Guest2949> Yup
[21:17:38] <Izem> Guest2949: I will likely get a book on that soon, almost done my arm one
[21:17:54] *** Joins: cronos (~cronos@user/cronos)
[21:17:54] <Guest2949> Looking at the M1 apple, ARM and RISC are getting a lot of advantage now!
[21:18:01] <Guest2949> Ah, I see
[21:18:02] <Guest2949> Nice!
[21:18:40] <Guest2949> By the way, imagine my surprise when I found out that Python now has optional type annotations (it's been a while since I touched Python) when I was looking at Python 3's PEG grammar.
[21:18:57] <Guest2949> When did this happen? Hahaha... of course, it doesn't do anything right now, but it's interesting all the same
[21:19:43] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Read error: Connection reset by peer)
[21:21:04] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[21:21:23] <beaky> yes it was like finding out the clean code guy has abandoned oop in favor of clojure
[21:21:36] *** Joins: brickfat (~brickfat@user/brickfat)
[21:21:42] <Izem> hmm, maybe python3.6 ish?
[21:21:57] <Izem> beaky: is that real?
[21:22:00] <beaky> python getting static types, uncle bob embracing functional programming, the world has turned upside down
[21:22:14] <Guest2949> Hahahaha beaky
[21:22:26] <Izem> LOL
[21:22:36] <Guest2949> Uncle Bob always did sound a bit extreme for my taste
[21:22:38] <beaky> its real yes just check out some of the more recent posts of his blog http://blog.cleancoder.com/
[21:22:57] *** Joins: inky (~inky@37.186.117.147)
[21:22:58] <Guest2949> So the SOLID guy has finally done a solid turnaround, eh?
[21:23:11] <Guest2949> To be fair, back in the day, I did enjoy reading some of his stuff.
[21:23:52] <Guest2949> Am I the only one who doesn't like Clojure ... at all? And not even talking about the horrendous Java stack traces
[21:24:04] <Guest2949> I find it a bit clunky and I don't know ... messy.
[21:24:44] *** Joins: Auron (~Auron956@user/auron)
[21:25:06] *** Joins: gggp_ (~gggp@111.63.14.119)
[21:25:47] <beaky> i like clojure i dont use the language i just like rich hickey's talks about simplicity
[21:26:35] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[21:26:56] <Izem> I have not tried clojure yet, seems ok
[21:27:05] <Guest2949> Ah yes, I remember those talks - "Simple made easy", "Hammock-driven programming" et al. Quite enjoyable. I think the man can speak, and that accounts for part of Clojure's success
[21:27:27] <Guest2949> Yeah, I prefer Common Lisp, with all its warts, and imperative programming! :)
[21:27:31] <Izem> yeah it's surreal how a s-exp language got that much popularity
[21:27:38] <beaky> yes those talks and clojure's purely functional vector implementation are the most important takeeaways of clojure for me
[21:27:52] <Izem> I prefer scheme, CL is ok but not for me atm
[21:28:02] <Guest2949> The Bagwell (?) Trie implementation was a stroke of genius from Clojure's perspective for sure.
[21:28:11] <Guest2949> Guile?
[21:28:19] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[21:28:20] *** Quits: gggp__ (~gggp@123.113.186.67) (Ping timeout: 252 seconds)
[21:28:54] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[21:28:55] <Guest2949> In fact, one thing I got out of his talks is to start reading papers... that's for sure.
[21:29:01] *** Joins: gggp__ (~gggp@123.113.185.191)
[21:29:03] <Guest2949> That's been immensely valuable
[21:29:29] <Izem> Chez, but I might be doing Guile for a bit since I'm on fedora
[21:29:35] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:30:09] <Guest2949> Nice!
[21:30:22] <Guest2949> I tried chez for a bit some time back - very fast
[21:30:40] <Guest2949> In fact, Idris uses it as its backend!
[21:30:42] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[21:31:01] <Izem> oh cool, I didn't know that
[21:31:04] <Guest2949> Izem Are you using guix?
[21:31:48] *** Quits: trevors (~trevors@catv-89-132-207-129.catv.broadband.hu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:32:12] *** Joins: visualshock (~visualsho@38.51-175-121.customer.lyse.net)
[21:32:28] *** Quits: gggp_ (~gggp@111.63.14.119) (Ping timeout: 268 seconds)
[21:33:09] <beaky> nice i like idris i think dependent types are the future of programming
[21:33:29] <Izem> Guest2949: nope, I found it cluncky
[21:33:54] <Izem> but I've really been thinking about making a package manager, so I started reviewing graphs yesterday
[21:34:52] <Izem> for some reason Guile 3 is only available from guix, not sure what's the idea behind that, I know guile is a program a lot of people rely on so maybe that's why
[21:35:04] <Guest2949> beaky I quite like it too, but the theorem proving led me to abandon learning it. Hahaha. Maybe some day again.
[21:35:31] <Guest2949> Izem Interesting! They seem to be pushing guix onto users ... hmmm
[21:35:36] <Izem> I found this presentation of compilers really inspiring, I think I'm getting used to the idea of large code http://venge.net/graydon/talks/CompilerTalk-2019.pdf
[21:35:46] <Izem> also legacy code, and code I don't own
[21:36:02] <Guest2949> Is that Graydon of Rust fame/infamy? Thanks, will check it out!
[21:36:14] <Izem> yeah, sure is
[21:36:33] <Guest2949> Does this have a video available too?
[21:36:50] <Izem> no clue, but it might
[21:37:27] <Guest2949> Hmmm... searched a bit, no luck. Still, this is fine too.
[21:39:22] <Izem> guix and nix don't make much sense unless it's part of the distro I think
[21:39:32] <Guest2949> Yup
[21:39:34] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[21:39:34] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[21:39:34] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[21:39:38] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[21:39:52] *** Quits: elnavigator (~elnavigat@105.196.63.39) (Ping timeout: 268 seconds)
[21:40:04] *** Joins: exvicesindaco_ (~exvicio@host-87-0-167-76.retail.telecomitalia.it)
[21:40:05] <Guest2949> I tried Nix for a while too, didn't like its language. Guile seems so much better in comparison as a config lang.
[21:40:10] <Izem> I was more thinking along the lines of a tool that makes it easier to build sources (from master)
[21:40:26] <Guest2949> You mean like BSD ports?
[21:40:32] *** Joins: exvicesindaco__ (~exvicio@host-87-0-167-76.retail.telecomitalia.it)
[21:40:40] <Izem> yeah
[21:40:46] <Guest2949> Interesting!
[21:40:57] <Guest2949> What about performance though?
[21:41:17] <Izem> what aspect?
[21:41:40] <Izem> performance of this tool? or the built software?
[21:42:33] *** Quits: exvicesindaco__ (~exvicio@host-87-0-167-76.retail.telecomitalia.it) (Read error: Connection reset by peer)
[21:42:38] <Guest2949> I mean building from source
[21:43:27] <Guest2949> For instance, on my janky old laptop, building LLVM + Clang takes around 3 hours whereas with brew I can get just download the whole image
[21:43:34] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Ping timeout: 268 seconds)
[21:44:24] *** Quits: chomwitt (~chomwitt@athedsl-32487.home.otenet.gr) (Ping timeout: 255 seconds)
[21:44:26] <Izem> nothing I can do about that
[21:44:45] *** Quits: exvicesindaco_ (~exvicio@host-87-0-167-76.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[21:44:49] <Izem> I just want to to be able to modifiy the software :)
[21:45:32] *** Joins: fosho (~fosho@2a03:1b20:5:f011::a10e)
[21:46:10] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[21:46:24] <Izem> Guest2949: an image?
[21:47:03] <fosho> someone recommend me a programming language that is ideal for networking purposes
[21:47:03] <Guest2949> I mean the LLVM binary
[21:47:51] <Izem> fosho: golang
[21:48:01] <Guest2949> By the way, that was a nice slidedeck - need to look up the references and dig deeper Izem. Graydon could probably have cut down on the SJWism as bit though :|, anyway, that's besides the point.
[21:48:16] <fosho> Izem I kind of already given a try to golang, but it's not my thing
[21:48:33] <Izem> Java?
[21:49:10] <Izem> I don't do much networking but those two seem to be known for that stuff
[21:49:20] <fosho> I guess that works for I'm not a big fan of Java's syntax
[21:49:40] <Izem> java uses C style, so you might be ruling out a fair amount
[21:49:46] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[21:49:56] <Izem> nodejs seems to be good too (great c libs)
[21:50:00] <Guest2949> Yup, Java is pretty nice for networking
[21:50:17] <Guest2949> @fosho Pony? Hahaha
[21:50:31] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[21:50:31] *** Quits: xff0x_ (~xff0x@2001:1a81:5299:ea00:490d:5ed2:61e8:145d) (Ping timeout: 255 seconds)
[21:50:33] <Izem> that would be hardcore haha
[21:50:33] <Guest2949> Only partly kidding, but Pony is a nightmare to learn
[21:50:38] <fosho> Don't really know. I'm down to learn/try anything
[21:50:58] <fosho> Like it doesn't matter
[21:51:22] *** Joins: xff0x_ (~xff0x@2001:1a81:5299:ea00:2c16:bae7:eca6:fd06)
[21:51:33] <Izem> erlang and elixr, can't believe I forgot those
[21:51:38] <Guest2949> Ah yes, good call
[21:51:55] <Izem> if you don't like those then, *shrugs*
[21:51:59] <fosho> I have considered to learn Elixir. It seems neat and much better syntax than Erlang
[21:52:08] <Guest2949> fosho True that
[21:52:17] <fosho> Izem yeah no worries I'm complicated and I find it hard for myself to adapt to a new programming language
[21:52:22] <Guest2949> If you do, Sasa Juric's book is quite nice IMHO
[21:52:34] <fosho> Guest2949 when you mentioned Pony did you refer to this: https://www.ponylang.io/
[21:52:48] <Izem> fosho: I just don't thin that many languages are known for networking
[21:52:52] <Guest2949> fosho Yup, that's it. I wouldn' recommend it though
[21:53:15] <Guest2949> Elixir would be much better than that, practically speaking.
[21:53:54] *** Joins: furrymcgee (~devuan@31.179.186.66)
[21:54:03] <Izem> go did some pretty crazy stuff with their resolver
[21:54:13] *** Joins: Blackpajamas (~Blackpaja@24-246-42-203.cable.teksavvy.com)
[21:54:57] <fosho> It seems cool for fiddling around. Anything Pony is good at? I haven't really heard of it before. Currently I am most used to JavaScript/Node but I want to find something else for myself so I can have more fun
[21:55:36] *** Joins: kanth_mobile (~kanth@201.182.165.33)
[21:55:43] <Guest2949> fosho It's pretty much in the same space as Elixir/Erlang, but much more obscure. A company does use it (Wallaroo Labs), but they're the only one AFAIK.
[21:56:06] <Guest2949> Also, they use something called "capabilities" which are not worth cracking one's head over IMHO (no kidding)
[21:56:08] *** Joins: TheRedRipper (~TheRedRip@user/theredripper)
[21:56:19] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[21:56:33] <Guest2949> I would second Izem's call and recommend Elixir- fun enough, and practical enough!
[21:57:13] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[21:57:13] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[21:57:13] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[21:57:18] <Guest2949> In my previous workplace, a couple of my colleagues used it to build a massive live player arena for a pretty well-known company - tens of thousands of live connections, and it hardly broke sweat. Very robust
[21:57:25] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[21:57:44] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Client Quit)
[21:57:47] *** Quits: Pseudocrat (~sudo@user/pseudocrat) (Quit: WeeChat 3.3-dev)
[21:58:44] <fosho> I see. Thanks for encouraging me to try Elixir out in that case! There's also three languages I have caught up to lately: Crystal, Ballerina and Nim. What do you have to say about them?
[22:00:07] <Guest2949> I've seen heard (and/or played with) Crystal and Nim. Nim is arguably the most popular of the three. It's also good, but again, it can get pretty complicated.
[22:00:16] <Guest2949> It's quite powerful and efficient.
[22:00:32] <Guest2949> If I had to pick one from these three, I would surely go for Nim though.
[22:00:53] <pyzozord> I haven't been able to follow the conversation for quite a while now
[22:01:08] <Guest2949> Ah, now I remember Ballerina - had seen it long ago IIRC
[22:01:18] <Guest2949> I don't like it - seems to much of magic under the hood
[22:01:33] <Guest2949> too*
[22:01:42] *** Quits: death916 (~death916@c-67-182-183-147.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[22:01:48] <Guest2949> pyzozord Meh, I'm just winging it myself, man :D
[22:02:00] <Guest2949> (only half-kidding)
[22:02:02] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[22:02:02] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[22:02:02] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:02:05] <fosho> It also compiles to JVM bytecode rather than native executables
[22:02:09] <Guest2949> Yup
[22:02:32] <pyzozord> Guest2949: I know what you mean, still I couldn't even be winging it atm
[22:02:39] <Guest2949> My problem with it is that something like `foo` does 10 different things under the hood, making it convenient for the user, but maybe less amenable to finetuning it
[22:02:49] <fosho> I found it cool at the start but later I got off it because that only reason. Not really down to install java or make users of my software install java just to be able to run my executable
[22:02:53] <Guest2949> pyzozord Hahaha
[22:03:06] <Guest2949> fosho Hmmm
[22:03:27] <TheRedRipper> hello all
[22:03:28] *** Joins: Pseudocrat (~sudo@user/pseudocrat)
[22:03:36] <Guest2949> Yo, TheRedRipper
[22:03:38] <fosho> But yeah Nim, how is it performance-wise? It also seems quite nice actually. Elixir and Nim seem good for me
[22:04:00] <Guest2949> fosho It's superb AFAIK. It compiles to pretty fast C.
[22:04:14] <TheRedRipper> guest! whaz
[22:04:16] <TheRedRipper> a
[22:04:23] <Guest2949> It's got different kinds of GC, and there's a ton of metaprogramming in it (which is where it gets complicated)
[22:04:44] <TheRedRipper> i was banned from ##chat because i said "u" instead of "you". retarded/
[22:04:44] <fosho> I see (thinking)
[22:05:03] *** Joins: Kanth (~Kanth@201.182.165.33)
[22:05:04] <Guest2949> fosho So that does mean that you have to have a C compiler locally (which is almost a given, but still...)
[22:05:20] <Izem> pyzozord: it'll come, otherwise you can always ask
[22:05:22] <Guest2949> TheRedRipper Lmfao
[22:05:31] <fosho> No biggie there. Almost every device got gcc installed nowadays
[22:05:37] <Guest2949> Yup
[22:06:02] <Izem> compiling to c might be weird when you want to debug, but nim does look nice
[22:06:14] <Izem> e.g. getting chicken running on certain distros
[22:06:54] <fosho> The syntax of Nim also seems pretty readable. I'll definitely consider learning it. So, basically you write Nim code and it will straight up compile to C? That speeds up development by a lot, then, if so.
[22:07:17] <Izem> yeah, should be easy to use with legacy code as well
[22:07:32] <TheRedRipper> Guest2949: fucking dumb right
[22:07:58] *** gggp__ is now known as gggp
[22:09:10] <Guest2949> Yup
[22:09:20] <pyzozord> so Elixir and Nim are general-purpose progamming languages. But I never saw them really anywhere. What are they used for? And how are they related?
[22:10:07] <Izem> Elixir is a networking language that runs on BEAM, nim is a friendly language that compiles anywhere (to C)
[22:10:14] <Izem> and javascript as well
[22:10:14] *** Joins: audiocat (~audio@2603-8081-1800-00ad-44ce-b4a0-a90f-8858.res6.spectrum.com)
[22:10:35] <fosho> Yeah they don't seem so popular or widely used to me either. But I think that they seem neat and sound quite promising
[22:10:52] <paulo_> good morning
[22:10:57] <Izem> just reminded me of kotlin, that looks really impressive
[22:11:11] <Izem> but no surprise, it's done by a compiler company :P
[22:11:14] <Izem> paulo_: gm
[22:11:22] <fosho> I also have heard that Nim plays well with JavaScript. Is this true?
[22:11:26] <Izem> yes
[22:11:53] <fosho> Ah-that makes my decision then. I'm already familiar with JS so Nim would be probably the best choice for me?
[22:11:57] <Izem> which also reminds me, there's not that many languages with wasm backends
[22:12:01] *** Joins: chomwitt (~chomwitt@athedsl-32487.home.otenet.gr)
[22:12:33] <Izem> go, rust, C, C++, and D have one
[22:12:33] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[22:12:38] <TheRedRipper> Guest2949: pmed the mod hes not letting up because he can see "i have no desire to follow the channels rules"
[22:12:44] <TheRedRipper> all i said was u instead of you
[22:12:57] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:12:59] <user51> if i take a file containing lots of strings, split each string to words by whitespace, and map each substring to an integer, then output the dictionary and say a hex string that allows you to derieve the strings from the original file, does that count as compression, hashing, both, or neither?
[22:13:02] <Guest2949> TheRedRipper Hahahaha. That sounds a lot like Discord.
[22:13:11] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Remote host closed the connection)
[22:13:28] <TheRedRipper> Guest2949 i said "retarded." and left and he set it to 7 xDDDDDDDDDDDDDDD
[22:13:32] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[22:13:48] <TheRedRipper> its like yes, you are superior. huzzah
[22:14:40] *** Quits: rexar89 (~alexi5@170.39.109.213) ()
[22:14:45] *** Joins: maxie (~IceChat95@45.100.3.196)
[22:14:50] <Izem> can't wait to see what kotlin native is like
[22:15:37] <user51> 'wasm' reads more like 'was-machine' rather than 'web-assembly' to me
[22:16:10] <TheRedRipper> i always think of wasabi when i see wasm
[22:17:23] <pyzozord> I tried kotlin for a bit but first line I tried actually throwed at me underlaying java error
[22:17:30] <pyzozord> that was few years ago
[22:18:43] <Izem> yeah it's still pretty new
[22:18:51] <beaky> yes that was my first experience with other jvm lagnuages like clojure and scala
[22:18:58] <beaky> and with their super slow startup and build times
[22:19:14] <Izem> maybe it's time for clojure on graal?
[22:19:21] <beaky> makes even the most template metaprogrammed c++ compile like a speed demon by comparison
[22:19:23] *** Quits: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[22:19:28] <Izem> haha xD
[22:20:00] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[22:20:13] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[22:20:13] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[22:20:13] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:20:45] <pyzozord> I need to do more both depth and breadth learning
[22:20:58] <Izem> how do you do that?
[22:21:23] <pyzozord> i wouldn't know - that's why I need to do more of it :P
[22:21:46] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Client Quit)
[22:21:52] <user51> i prefer dfs
[22:22:05] *** Quits: fosho (~fosho@2a03:1b20:5:f011::a10e) (Quit: Client closed)
[22:22:19] <user51> dfs first search :)
[22:22:26] *** Joins: mnrmnaugh (~mnrmnaugh@pool-96-252-87-182.bstnma.fios.verizon.net)
[22:22:51] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[22:22:52] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[22:22:52] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:23:33] <pyzozord> like study data structures and compilers indepth but also like learn a new language briefly once avery few weeks
[22:23:44] <Izem> oh
[22:23:59] <Izem> that's usually done in a pl book
[22:24:10] <user51> i tried reading about alogirthms
[22:24:29] <user51> they kinda don't make any sense to me at first, but after a while you learn
[22:24:30] <Izem> the one's from the 80s and 90s would discuss 4-5 languages
[22:24:46] <Izem> not sure if that's the focus from the newer ones
[22:24:57] <user51> stuff like mergesort is pretty intuitive to me nowdays
[22:25:27] <Izem> as for data structures, there is the compiler approach like wirth, or just have it be completely seperate
[22:25:36] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[22:25:48] <Izem> I would like to do more data strcutures as well, but to be honest you only need a few
[22:26:08] <user51> i'd still look it up though, just in case. sometimes i wonder if a sort function hides multiple functions inside and chooses one depending on the amount of data to sort
[22:26:57] *** Joins: Akuli (~Akuli@82-203-167-165.bb.dnainternet.fi)
[22:27:09] <pyzozord> for me dijkstra is intuitive, dont really understand why people are intimidated by it
[22:27:33] <Izem> the algorithm?
[22:27:38] <user51> fwiw a lot of my experience is just hands on stuf
[22:27:44] *** Parts: juanjo (riderjj@is.here.for-some.fun) (Leaving)
[22:27:47] <pyzozord> the biggest part of it is the piority queue, and that's done with the binary heap, and i dont remember those thing it does with bubble up and sink down or whatever
[22:27:53] <pyzozord> but otherwise it quite simple
[22:28:06] <user51> i am very likely to fail a lot of actual implementations, but speaking about them theoretically makes sense to me nowdays
[22:28:57] *** Joins: brickfat (~brickfat@user/brickfat)
[22:29:22] <Izem> interestingly enough how you implement data structures is kinda limited by more abstract languages
[22:30:02] <user51> abstractions are.. dunno how to say it, make hard things easy but easy things hard?
[22:30:21] *** Joins: death916 (~death916@c-67-182-183-147.hsd1.ca.comcast.net)
[22:30:29] <Izem> can you do data strucutres in assembly?
[22:30:45] <user51> you're right, i used the wrong idiom
[22:30:58] <Izem> user51: they make poking about the computer more difficult
[22:31:00] <user51> assembly is kinda interesting sometimes
[22:31:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:31:20] *** Quits: nekodesu (~nekonIsL@user/nekobit) (Ping timeout: 256 seconds)
[22:31:28] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[22:31:32] <user51> in a sense that you have little programs connected to the larger one
[22:32:02] *** Joins: nekodesu (~nekonIsL@user/nekobit)
[22:32:05] *** Joins: inky_ (~inky@188.115.247.123)
[22:32:33] <user51> in essense you could argue that many languages apply but the structure of asm makes it much easier to see
[22:32:43] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[22:32:46] *** Quits: pncl (~pncl___@5.245.211.197) (Quit: Leaving)
[22:33:05] <user51> damn, i just made a shift-reduce conflict in the last two messages
[22:33:09] *** Joins: pncl (~pncl___@5.245.211.197)
[22:33:22] *** Joins: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net)
[22:33:22] *** Quits: BlueCannonBall (~optimal@pool-108-49-218-22.bstnma.fios.verizon.net) (Changing host)
[22:33:22] *** Joins: BlueCannonBall (~optimal@user/bluecannonball)
[22:33:49] *** Parts: diophantoz (~dz@user/diophantoz) ()
[22:34:16] *** Quits: pncl (~pncl___@5.245.211.197) (Remote host closed the connection)
[22:34:49] *** Joins: pncl (~pncl___@5.245.211.197)
[22:34:49] <koo6> are C++ coroutines "alright", or are there any signifiicant gotchas, let's say performance-wise?
[22:35:24] <TheRedRipper> µµ
[22:35:31] *** Quits: inky (~inky@37.186.117.147) (Ping timeout: 255 seconds)
[22:36:11] <Izem> koo6: why would there be?
[22:36:48] <koo6> maybethe implementations (gcc, llvm) could still be immature? idk
[22:37:06] <koo6> just figured i'd fish around before diving into them
[22:37:47] <Izem> that's just weird tbh
[22:37:58] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[22:38:44] <koo6> oh well
[22:39:02] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[22:40:53] <pyzozord> Oh that reminds me. I started the subject yesterday, but I have more questions. Is it possible to write C code that that if crashes instead of stopping the program it just jumps to some other instruction? I know that programs: segment fault, stack overflow, divide by 0. I guess there are other reasons why program crash. But if I'm not mistaken they are all just handled as os signals. So it seems
[22:40:59] <pyzozord> reasonable that I had my own handlers for those signals that do not stop execution. Essentially a try/catach
[22:42:00] <pyzozord> I wanted that so that I can safely run .so code without crashing my main program
[22:42:29] <bjs> pyzozord: it depends on what "crash" means
[22:42:50] <koo6> i wouldn't call that safe
[22:42:53] <bjs> pyzozord: most "crashes" are caused because you did some bad thing in C that was unrecoverable (like accessing memory you were not allowed) and it's the OS that killed you, not the C program choosing to quit
[22:43:23] *** Quits: dunkeln (~dunkeln@188.71.231.232) (Ping timeout: 268 seconds)
[22:43:24] <koo6> https://www.tutorialspoint.com/cplusplus/cpp_signal_handling.htm
[22:43:24] <Guest2949> pyzozordI think you may be able to use setjmp and longjmp to handle that
[22:43:38] *** riff-IRC is now known as riff-AIM
[22:43:46] <pyzozord> Guest2949: yeah I was thinking about longjmp too
[22:43:52] *** riff-AIM is now known as riff-ICQ
[22:44:17] <pyzozord> bjs: is it that os kills you or os sends you signal "hey, chill" and kills you if you don't?
[22:44:39] *** riff-ICQ is now known as riff-IRC
[22:44:46] <beaky> straight up killin ur process
[22:45:04] <bjs> pyzozord: it depends.
[22:45:26] <bjs> pyzozord: some things are signals you can handle and jump out of (although, exactly what state the machine is in at that point is unclear, especially for a C program)
[22:45:57] <bjs> some things are straight-up killed without the OS even asking first (e.g. OOM is typically this)
[22:46:04] <Guest2949> Hmmm
[22:46:12] <pyzozord> bjs: what else kills you?
[22:46:15] <Guest2949> That's a good point.
[22:46:21] <Guest2949> LOL pyzozord
[22:46:52] <bjs> pyzozord: well the OS can send signals like SIGSEGV and SIGILL when the process does a "bad" thing
[22:47:15] <beaky> yes i like sigbus too i imagine a bus coming a stopping by
[22:47:17] <pyzozord> bjs: so I can't not die when I get segv?
[22:47:27] *** Quits: mnrmnaugh (~mnrmnaugh@pool-96-252-87-182.bstnma.fios.verizon.net) (Quit: Leaving)
[22:47:42] *** Joins: elnavigator (~elnavigat@105.196.63.39)
[22:48:00] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[22:48:37] *** Quits: Guest2949 (~Guest29@103.5.134.18) (Quit: Client closed)
[22:48:38] <bjs> pyzozord: you can keep the process alive (sometimes) but like I said, and especially when it's a C program, the state of the machine is often very unclear
[22:48:44] <beaky> you can handle it and not die i think but sigkill in particular is where u get striaght'up killed (its what the out of memory killer thing does)
[22:48:57] *** Joins: masber (~masber@178.197.221.182)
[22:49:04] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[22:49:17] <beaky> or if you use kill -9 the only kill command everyone uses
[22:49:22] <beaky> because nobody uses sigstop
[22:49:35] *** Joins: Quacc (~Quacc@cpe-172-88-78-217.socal.res.rr.com)
[22:49:35] *** Quits: Quacc (~Quacc@cpe-172-88-78-217.socal.res.rr.com) (Changing host)
[22:49:35] *** Joins: Quacc (~Quacc@user/quacc)
[22:49:42] <pyzozord> that's fine when they want me dead I should die
[22:49:44] <beaky> or sigterm to ask the process nicely to stop (thats the one you can handle)
[22:49:49] <pyzozord> I just don't wanna die because of internal problems
[22:49:53] <bjs> pyzozord: imagine you `*x = 1; read(*y)`  now if you get a SIGSEGV on reading y, you might think that the write of x already happened but that's not probably not true. and infact the entire state could just be a total mess
[22:50:11] <bjs> probably not true*
[22:50:22] *** Quits: gggp (~gggp@123.113.185.191) (Ping timeout: 255 seconds)
[22:50:44] <pyzozord> bjs: yeah I get that part I think that's not a problem
[22:50:49] <beaky> yes with signals it might not be possible to decide causality that u might be looking for
[22:51:56] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[22:52:18] <pyzozord> i would want to do something like setjmp(); if (do_unsafe_so_stuff()) { /*jump here if so crashed us*/ handle_error } all_cool_here_carry_on()
[22:52:56] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[22:52:57] <pyzozord> im probably using setjmp wrong
[22:54:26] <koo6> https://stackoverflow.com/questions/10202941/segmentation-fault-handling
[22:54:51] <bjs> pyzozord: the most robust way is usually to do the unsafe library stuff in a separate process, maybe mmap some space so it can give you back data
[22:55:00] <koo6> it really seems to be retying the instruction .. interesting
[22:55:04] <bjs> and if it goes wrong then you can just discard the space and drop the process and
[22:55:12] <koo6> ^
[22:55:16] <pyzozord> oh hmm nice idea
[22:55:22] <user51> c syntax can be fun tho
[22:55:24] <pyzozord> just unsafe process
[22:55:49] <user51> *(pointer = &var) = something(&pointer)[0];
[22:55:56] <pyzozord> unsafe so server process
[22:56:05] *** Quits: Izem (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: leaving)
[22:56:20] <pyzozord> could do parallelism that way too
[22:57:07] *** Joins: todda7 (~torstein@240.red-81-39-39.dynamicip.rima-tde.net)
[22:58:00] <InPhase> user51: Pretty sure that's UB.  :)
[22:58:14] <user51> InPhase: really? didn't know
[22:58:31] <InPhase> user51: Assignment is not a sequence point, so the order is not specified for left and right there.
[22:59:13] <pyzozord> how does c++ implement the try/catch stuff
[22:59:15] <InPhase> user51: It's left undefined for optimization purposes, but that slams it into UB if you modify something used on the other side.
[22:59:27] <pyzozord> will it even catch segfaults and divisions by zero?
[22:59:35] <user51> undefined foreign optimization
[22:59:57] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[23:00:35] <user51> InPhase: my thought process was that the rightmost side gets evaluated first, then the resulting value is assigned
[23:00:36] <bjs> pyzozord: it does checks before you do certain operations, and if you do a bad thing it walks up the stack to find a try/catch and it stores a bit of information on the stack that lets it walk back up
[23:00:37] <InPhase> pyzozord: Officially in C++, no.  But you can setup signal handlers on an implementation-specific basis that convert those signals into exception throws.  I've done this for segfault logging.
[23:01:37] *** Joins: pavonia (~user@user/siracusa)
[23:02:02] <InPhase> pyzozord: It's pretty nice to get a stack trace report out of release builds of C++ for a segfault.  It just requires platform-specific code.
[23:02:31] <user51> i wonder if enron would have liked undefined behavior
[23:03:03] <bjs> pyzozord: it's basically entirely a software thing,  the software does checks, creates an exception object and then walks the stack to find a catch that matches it and if it does, it pops off and jumps there to continue. No OS signals or anything involved
[23:03:58] <pyzozord> bjs: I see so those are just runtime checks injected by c++
[23:04:11] <pyzozord> InPhase: ok so that sounds almost perfect
[23:04:20] *** Quits: BlueCannonBall (~optimal@user/bluecannonball) (Quit: Konversation terminated!)
[23:04:21] <pyzozord> (except I prefer c instead of c++)
[23:04:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[23:04:59] <InPhase> pyzozord: Yes.  Standard exceptions are basically just code insertion like bjs said.  What it's about is cleaning up the code so that code is focused on the positive-path and is much cleaner.
[23:05:21] <pyzozord> ok so sounds like that idea of set a jump, do unsafe code, if it triggers a segv, handle the segv, in the segv do the longjmp
[23:05:24] <pyzozord> will work, right?
[23:05:30] <InPhase> pyzozord: Also there's the important benefit that exceptions guarantee errors are handled somewhere.  Errors do not get ignored.
[23:05:35] <bjs> pyzozord: saying it will "work" might be going far
[23:05:39] <bjs> it won't immediately kill the process
[23:05:44] <InPhase> pyzozord: Many many many C bugs are due to missed or skipped error checking.
[23:05:57] <bjs> in very many cases you're likely to just get another SIGV immediately after
[23:06:27] *** Joins: dunkeln (~dunkeln@188.71.231.232)
[23:06:42] <InPhase> pyzozord: In any large C++ program intended to be robust, you assume exceptions will happen, and you put catch-all handlers at opportune recovery points to deal with this in a useful manner.
[23:07:18] <InPhase> pyzozord: Then for the ones you can handle locally with a better recovery, you add an additional catch.  But your catch-alls handle everything else, and you end up dealing with every error in some useful way.
[23:07:22] *** Joins: eXistenZ (~biskit@bzq-109-67-145-67.red.bezeqint.net)
[23:07:37] <edk> not convinced programs with catch-all handlers can claim to be robust, tbh
[23:07:48] <InPhase> edk: More robust than the ones without this!
[23:07:55] <edk> that's debatable
[23:08:07] <edk> if the exception isn't caught you'll at least know they went wrong
[23:08:30] <InPhase> edk: Here's a simple program structure:  You push buttons to do stuff.  A catch-all should report, "That button press didn't work because:  ____"  Then return to where you can try another button press.
[23:08:37] <pyzozord> InPhase: to provide context, that still the continuation of the idea from yesterday. I imagine a MUD game where I can create a new "script.so" and then assign it to some object in the running game. The game will then load the script.so, and execute it depending on the game logic. Whever the game executes something from the so I want to have that safety even if the script.so segvs, it doesn't take
[23:08:43] <pyzozord> down the entire game with it, the game just handles it somehow, forexample unloading the .so and logging the error somewhere
[23:08:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:34e6:e307:f490:7d07) (Remote host closed the connection)
[23:09:04] <edk> InPhase: right, but for all you know the button press did half of something
[23:09:40] <edk> maybe it's rotated an x-ray target out of the way but not switched off a power circuit
[23:09:42] <InPhase> edk: If you used scope-based resource management with a structure that planned ahead for exceptions, that will all be handled automatically at the stack unwinding.
[23:10:00] <edk> resource management will be. you can't manage state that way
[23:10:08] <InPhase> edk: Scope-based resource management should be comprehensive throughout the program design.  Exception handling is central to architecture, and not an afterthought.
[23:10:26] <bjs> edk: a C program probably literally cannot claim such a thing
[23:10:34] <bjs> a Python program probably could be robust in such errors :)
[23:10:44] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Quit: yaboiburner)
[23:10:51] <edk> i claim python is equivalent in robustness to C
[23:10:56] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[23:11:04] <InPhase> edk: If you're used to C programming, then this sort of recovery during unwinding is unthinkable.  But designing FOR it in C++ makes it straightforward.
[23:11:11] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Remote host closed the connection)
[23:11:14] <bjs> edk: C's UB means you cannot recover at all though
[23:11:18] <pyzozord> all I'm really hoping for to get the kind of robustness python has in C
[23:11:24] <bjs> whereas in Python you theoretically could, depending on the circumstances
[23:12:06] <pyzozord> if something goes horribly wrong then so be it, but I think I never really experienced anything else then stack overflows and segmentation faults my entire life
[23:12:14] <edk> once you've triggered UB you're screwed but i'm not convinced you can meaningfully recover from logic errors anyway, all python (or rust)-style safety gives you is more guarantees about the consequences of those errors
[23:12:21] <InPhase> bjs: Python is a little trickier to recover from errors with catch-alls because you don't get deterministic destruction.  So you have to be more careful with state recovery, and include more catches.
[23:12:24] <edk> it can't protect the state of your program
[23:12:44] <edk> 'course, rust also gives you better tools to avoid those errors than either of the other two
[23:12:46] <bjs> InPhase: well it's the other way around surely, if you have a C program with UB you *cannot* recover
[23:12:51] <bjs> there is literally no way in C to get out of UB
[23:12:58] <InPhase> Exceptions are not for handling UB.
[23:13:05] *** Joins: yaboiburner (~yaboiburn@68.235.43.84)
[23:13:06] <edk> InPhase: i feel like you're in write-only mode
[23:13:21] <bjs> InPhase: okay but handling UB is basically what pyzozord is trying to do
[23:13:21] <InPhase> Exceptions CAN handle logic errors, data quality errors, and hardware errors just fine though.
[23:13:50] <edk> everything you've said is about resource management, which is fine, but doesn't encapsulate everything programs need to be consistent about
[23:13:55] *** Joins: Visiter (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[23:14:13] *** Quits: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net) (Remote host closed the connection)
[23:14:23] <InPhase> And I volunteered that I've mapped segfaults to exceptions before.  But I only do that for logging and reporting purposes.  I treat segfault exceptions as fatal errors when I do this, because you really can't trust program state after you've allowed UB to occur.
[23:14:28] <edk> if i'm halfway through changing the state of a system and i throw an exception, there's no amount of raii that can help
[23:14:37] *** Joins: yaboiburner_ (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[23:15:02] <bjs> edk: I mean it depends on the system :P
[23:15:14] <bjs> imagine you screw up an IRC server, you can just delete the database for example :D
[23:15:37] <edk> well in general, that system needs to be reset to a consistent state, and in order to know to reset the system in question you needed to expect me to throw an exception while mutating it
[23:15:46] <edk> a catchall higher up won't do
[23:15:59] <InPhase> You can do a best-effort unwind, but it's unwise to continue even if you've caught and handled a segfault.  Probably 9 times out of 10 you really could recover in practice, but I wouldn't trust it.  I might attempt differently if lives were on the line for a program crash.  But it's not something you can rely on.  Regular exceptions can be implemented in a completely reliable manner with full trust
[23:16:05] <InPhase> in the unwind and recovery.
[23:17:05] <bjs> edk: sure but the difference between Python and C is that Python lets you see that something went wrong and attempt to do something about it. You may not be able in all cases to get back to where you were exactly, but Python at least will allow you to try. My database example is a bit tongue-in-cheek but certainly is an example
[23:17:47] *** Quits: audiocat (~audio@2603-8081-1800-00ad-44ce-b4a0-a90f-8858.res6.spectrum.com) (Ping timeout: 246 seconds)
[23:18:04] <bjs> and there are various ways of doing checkpointing so that you can "recover" back to a previous consistent state. The point I'm making is that a single C program just cannot do that if there's UB, at least not in a way that also isn't just UB itself ;)
[23:18:16] <edk> bjs: right, but catching specific errors in python is, from some angles, equivalent to "don't make mistakes" in C, which is to say inadequate
[23:18:30] *** Quits: yaboiburner (~yaboiburn@68.235.43.84) (Ping timeout: 258 seconds)
[23:18:31] *** yaboiburner_ is now known as yaboiburner
[23:18:43] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[23:19:37] <bjs> edk: no it's not the same,  in C the compiler is allowed to just assume SIGSEGV never happens, it could detect your SIGSEGV handler and NOP it out, it could delete 1/2 your program.  The Python program would at least guarantee you hit an exception handler and be in a consistent state (that is, a consistent *interpreter* state) from which you can actually execute new code reliably
[23:19:44] <edk> exceptions because of exceptional conditions are something else; they're doing what you do with return values in C. which leaves us with logic errors and so on. if you expect an exception to be thrown because of a specific logic error, just omit the logic error
[23:20:01] <pyzozord> are you guys talking about memory state when segv occures? That wouldn't be a problem. The "host" program would wipe all the memory that unsafe code used
[23:20:22] *** Joins: audiocat (~audio@2603-8081-1800-00ad-2acc-6c61-53bd-5d99.res6.spectrum.com)
[23:20:46] <pyzozord> those .so "plugins" will be delt specific amount of memory for themselves and could modify "host" state only via host function, which from the perspective of the plugin are essntially atomic
[23:20:48] <bjs> pyzozord: if that program was e.g. a library call, then it had access to *your* memory, and it was using *your* stack
[23:20:55] <edk> bjs: or if you're not protecting againt a specific logic error you're trying to protect against any arbitrary logic error that might happen, but you can't, because it might leave your program in some kind of wonky state
[23:21:06] <bjs> and *your* compiler was allowed to assume that the library call didn't SEGV, so maybe your program is now in an inconsistent state too
[23:21:15] <bjs> I can foresee many things going wrong with this ...
[23:21:20] <edk> recovery may be possible but there is no hope for you of knowing how to recover because you don't know why you're handling an exception
[23:21:22] <pyzozord> bjs: yeah true, but those would be fairly simple plugins they woul not have any io of their own
[23:21:30] <bjs> pyzozord: plugins?
[23:22:11] *** Joins: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com)
[23:22:23] <pyzozord> I do get what you mean about memory state though, it's good to mention that, but I think in this case it woul be ok, since I would be writing those plugins myself
[23:22:40] <pyzozord> it's essentially there to not crash the host program because I made a typo etc
[23:22:47] <bjs> pyzozord: imagine the library went `printf(*NULL); int* x; *x = 42`  <- if you call this program from your program, you may find that part of *your* memory now has 42 in it
[23:23:06] <edk> pyzozord: if you cause heap corruption in a plugin it will be essentially impossible to recover
[23:23:43] <pyzozord> Oh i see, I do think I've caused some corruptions before
[23:24:04] <bjs> pyzozord: if the library does a bad thing, it could affect you if you're in the same process.  This is why modern systems do things in separate processes
[23:24:37] <pyzozord> yes sounds like separate process is much safer
[23:24:48] <pyzozord> so how does python handle situations like this?
[23:24:58] <edk> it doesn't
[23:25:00] <pyzozord> I guess it doesn't care about heap corruption because it's interpreted?
[23:25:10] <bjs> pyzozord: not because it's interpreted, but because it's designed to just not let you do that
[23:25:16] <edk> you can cause python to have memory errors from pure python!
[23:25:32] <edgar-rft> no, it doesn't care about heap corruption because it's Python :-)
[23:25:33] <edk> you can probably even get code execution out of some of them, but i haven't, not really my area
[23:25:42] <bjs> pyzozord: it puts explicit checks on things, and then does the C++ thing of generating runtime objects and walking the stack
[23:26:30] <bjs> Without any of the UB of C
[23:27:21] <pyzozord> I know, once you have a single UB your program might as well steal your bitcoins and crash
[23:28:06] <bjs> It's a very deliberate decision of Python to not have C-like UB and to instead have explicit checks and exceptions.
[23:28:20] <edk> from memory you can get a very straightforward buffer overflow out of types.CodeType
[23:28:35] <bjs> edk: or just from ctypes and then use C to do the bad thing
[23:28:56] <bjs> and there are some WONTFIX's in the interpreter like stackoverflows from unbounded recursion
[23:28:56] <edk> yes, but that wouldn't be using pure python
[23:29:10] <bjs> edk: well define "pure Python", types.CodeType isn't "pure Python" either :P
[23:29:19] <edk> sure it is, i can get it without importing anything
[23:29:37] <edk> you could imagine a "sandboxed" python interpreter just not allowing you to use ctypes at all, but retaining the data model
[23:30:39] <pyzozord> so separate process is really the only way to be truly protected
[23:30:44] *** Joins: archie (~archie@host-82-49-191-133.retail.telecomitalia.it)
[23:30:44] <bjs> edk: I mean the code objects don't have well-defined co_code attributes, they're just implementation defined black boxes really
[23:30:48] <pyzozord> and that applies for all languages
[23:31:09] <edk> bjs: well obviously python-the-language doesn't have any implementation bugs, by definition
[23:31:25] <bjs> pyzozord: for security concerns too,  it means the library doesn't have access to your memory either which is good
[23:31:34] <bjs> pyzozord: and e.g. why your browser probably has separate processes for each tab
[23:31:40] <pyzozord> shame that this doesn't hold true for threads
[23:31:51] <edk> i'm just saying the reference implementation does, and they've been known for years and never fixed, and you don't need any deliberate escape hatches to get to them
[23:31:51] *** Quits: Visiter (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Lost terminal)
[23:32:01] <bjs> pyzozord: a thread (e.g. on unix) is really just a process that specifically has this bit turned off :)
[23:32:04] <pyzozord> although wouldn't thread protect me against stack smashing/overflows/corruptions?
[23:32:06] <bjs> otherwise they're the same
[23:32:35] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[23:32:49] <edk> pyzozord: threads don't protect you very much against exploits because once an exploit gains control of one thread it can easily use that to do anything it likes to the other threads
[23:32:52] <pyzozord> bjs: the same as separate process or the same as the host process
[23:33:12] <edk> threads are like separate processes except they share address space
[23:33:20] <bjs> pyzozord: no I mean if you're talking unix-y things then a "thread" and a "process" are the same thing underneath
[23:33:31] <bjs> pyzozord: the difference is 1 bit of the flags to clone()
[23:33:34] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:34:12] <pyzozord> so if I run the main program that spawns one extra thread. If that thread does heap corruption or segv, can I recover in my main program?
[23:34:21] <bjs> pyzozord: no because it's in the same memory space
[23:34:49] *** Quits: amigojapan (uid86330@id-86330.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[23:35:04] <edk> segv is the good case; you have an opportunity to exit as safely as you can and start a clean copy of yourself
[23:35:14] <bjs> anything in the same memory space is pretty much doomed because the "bad" program had access to all your memory and really could've done anything to it.  How likely it is to have done that highly depends on the program, what it was doing at the time, how badly it was broken, what compiler was used to compile it and what optimizations were enabled and what day of the week it was :P
[23:35:21] <edk> but the thread can also screw you up with heap corruption or similar
[23:35:49] *** Quits: archie (~archie@host-82-49-191-133.retail.telecomitalia.it) (Quit: Client closed)
[23:36:56] <pyzozord> ok, when my program crashes do I need to drop tcp connections?
[23:36:59] <edk> even if you did know there was something to recover it might not be possible; the information might simply have been destroyed
[23:37:04] <edk> the OS will do that for you
[23:37:13] <pyzozord> is it possible that os will keep the connections alive until my program reboots?
[23:37:20] <edk> no
[23:37:42] *** Joins: m3wzx5 (~m3wzx5@user/m3wzx5)
[23:37:45] <edk> it may leave the sockets around depending on the socket options and the OS and the OS settings and what the other end does, but it won't give them to the next copy of your program
[23:37:58] <edk> really keeping connections open when you crash is much more work than closing them
[23:39:04] *** Joins: ZeroDay (~ZeroDay@gateway/tor-sasl/zeroday)
[23:42:35] *** Quits: dunkeln (~dunkeln@188.71.231.232) (Ping timeout: 268 seconds)
[23:43:04] *** Quits: nekodesu (~nekonIsL@user/nekobit) (Read error: Connection reset by peer)
[23:44:28] *** Joins: nekodesu (~nekonIsL@user/nekobit)
[23:44:30] *** Joins: motherr (~motherr@user/motherr)
[23:46:18] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[23:46:19] <pyzozord> ok, thank you everyone who participated in the discussion to help me. I've learned new things.
[23:48:46] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 252 seconds)
[23:49:04] *** Joins: clark (~rcg@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[23:49:17] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[23:51:45] *** Quits: Thedarkb (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8) (Ping timeout: 255 seconds)
[23:51:45] *** Quits: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:acdb:c983:bbd5:24e8) (Ping timeout: 255 seconds)
[23:51:56] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:b176:7724:1eec:6e9a)
[23:52:01] *** Joins: Thedarkb (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8)
[23:52:25] *** Quits: magla (~gelignite@55d47ecb.access.ecotel.net) (Quit: Stay safe!)
[23:52:27] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 268 seconds)
[23:55:34] *** Quits: pncl (~pncl___@5.245.211.197) (Quit: Leaving)
[23:58:34] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[23:59:49] *** Quits: Matthias1 (~Matthias1@cpe-76-170-236-166.socal.res.rr.com) (Remote host closed the connection)
