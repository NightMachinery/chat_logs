[00:05:41] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 265 seconds)
[00:06:12] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:07:53] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:566c:5feb:f0c8:9c63)
[00:07:54] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:566c:5feb:f0c8:9c63) (Changing host)
[00:07:54] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:09:12] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[00:10:36] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[00:11:01] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[00:15:50] <rpav> back in the days before “quotes”
[00:16:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:18:04] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:22:14] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:44:17] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[00:47:47] *** Quits: magla (~gelignite@55d40eb7.access.ecotel.net) (Quit: Stay safe!)
[00:48:26] *** Quits: paul424 (~tom@ip-37-248-155-206.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:52:53] <LordKalma> hnOsmium0001[m], rpav those are also the LaTeX quotes
[00:52:56] <LordKalma> !fact
[00:52:57] <nolyc> LordKalma: Implementations could decide to store references in a wrapper.
[01:01:36] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6e92:54cb:12e7:3fa1)
[01:03:47] <rpav> LordKalma: right
[01:03:57] <rpav> back before unicode quotes were a thing
[01:04:10] *** Quits: proller (~p@2a02:6b8:b081:7::1:2f) (Ping timeout: 265 seconds)
[01:04:25] <rpav> funky ass TeX quotes, but a lot of stuff was interesting and weird
[01:09:41] <LordKalma> all of latex is pretty primordial
[01:12:08] <rpav> i hate heisenbugs
[01:13:10] <LordKalma> I hate the latex macro system
[01:13:26] <rpav> it's pretty painful
[01:13:41] <LordKalma> trying to "program" anything in is a pain
[01:13:49] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ad12:63d3:cdb6:3c28) (Quit: Konversation terminated!)
[01:13:51] <rpav> for awhile i liked http://savannah.nongnu.org/projects/lout
[01:14:09] <LordKalma> yet you can literally program with it. I've seen an example of a pdf output with N fibonacci numbers
[01:14:12] <rpav> https://en.wikipedia.org/wiki/Lout_(software)
[01:14:15] <LordKalma> computed directly in latex
[01:14:19] <rpav> well sure
[01:14:27] <LordKalma> it's just pain
[01:14:33] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[01:15:17] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[01:15:34] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:16:29] *** Joins: proller (~p@80.240.216.69)
[01:17:30] <PJBoy> lualatex
[01:17:41] <LordKalma> does it have any actual lua?
[01:18:13] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5016:201a:4e0f:3d82) (Ping timeout: 240 seconds)
[01:19:25] <antto> !fact
[01:19:26] <nolyc> antto: Bit-fields straddle allocation units on some machines and not on others.
[01:19:36] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d0a9:bdc9:9223:f85f)
[01:24:18] <johnny> who are the people who use latex, but didnt go to uni?
[01:25:48] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:26:43] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:29:04] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:29:07] <whupdup> rubber manufacturers
[01:29:27] <whupdup> or college dropouts that like formatting documents
[01:30:30] <johnny> they still went to uni tho
[01:30:40] <johnny> the second case i mean
[01:39:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:21] *** ChanServ sets mode: +v npaperbot
[01:40:47] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[01:41:00] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:51:19] <Alipha> People who don't want babies
[01:51:34] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:52:13] <johnny> hah
[01:54:27] *** Joins: proller (~p@2a02:6b8:b081:8810::1:36)
[02:03:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:05:26] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[02:06:02] <very_sneaky> the big adoption that i've seen with latex is for scientific journal article writing. are there others? can't imagine many people who haven't been to college would be contributing in that space
[02:08:08] *** Joins: rajkosto (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs)
[02:08:49] <veverak> johnny: well, it can spread like a virus... I mean they could use it because their company uses it for something
[02:09:16] <johnny> i only know computer nerds who use latex
[02:09:30] <johnny> and every single one of them talks about it how they used it in uni
[02:09:34] *** Joins: aegon_w (~aegon_w@174.127.249.180)
[02:10:04] <aegon_w> PJBoy oh sorry i got the covid booster shot yesterday and i couldn't push anymore, ended up passing out and jsut feelin good enough to go back at it. I have no time to figure out whats up but this is a huge bummer. this has been like 7 months of work invalidated by what i'm still feeling like is some really derpy linking bug or something else
[02:10:11] <aegon_w> i don't see why else like all the other compilers from the same cmake file would be absolutely fine with it but msvc can't link
[02:10:14] <very_sneaky> i like latex because there's no better alternative lol
[02:10:18] <aegon_w> yeah the size of the libs i'm creating and the size of the ones in vcpkg are the same, i've tried x64 and x64 debug
[02:10:29] <aegon_w> theres no more time before the talk but i think the next step is to i guess just start commenting out swaths of code until it compiles, maybe take some time to do a really derpy mvp against cppzmq to make sure that can compile
[02:10:31] <PJBoy> that's all good
[02:10:42] <aegon_w> i've run into link time errors like this with experimental llvm-rocm stuff before but i didn't expect it with a simple c lib
[02:10:59] <aegon_w> bleh
[02:13:27] <RandomReader> oh you're using cmake to build? I thought you were using msbuild
[02:13:41] <aegon_w> i'm using cmake to generate .sln's
[02:13:49] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[02:13:53] <RandomReader> I haven't messed with it myself, but some or all of the project settings may have no effect here, and you'd need to edit the cmake files instead
[02:14:10] <aegon_w> for vs2022, but i've also tried vs2017, and with those both on std++17, std++20
[02:14:24] <RandomReader> which could explain why you have mysterious "sometimes works and sometimes doesn't" issues, especially with the build data caching
[02:14:26] <aegon_w> er, vs2019
[02:14:43] <aegon_w> huh, ithought once cmake generated the .sln file it was fairly hands off
[02:15:09] <RandomReader> the sln file is hieararchical though
[02:15:16] <RandomReader> and who knows what cmake is specifying when it generates
[02:15:26] <RandomReader> (I mean somebody does, but not me)
[02:15:56] <RandomReader> vs2019 and later also have native cmake support
[02:16:12] <RandomReader> anyway, you might try specifying the libraries in cmake directives, and see what happens
[02:16:29] <aegon_w> interesting,  i tried intentionally breaking link settings to see if it was taking the ones from the .sln project and it seemed to be, but that doesn't mean its not also overwriting at some point
[02:17:03] <RandomReader> could also not be the problem at all, just a thought
[02:17:11] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:18:17] *** Quits: rajkosto (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs) (Ping timeout: 252 seconds)
[02:18:18] *** Joins: rajkohaxor (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs)
[02:18:21] <aegon_w> i've never experineced this many odd things from vs, and its requirements for various standards differ pretty durastically
[02:18:40] <aegon_w> almost feel like for cross plat stuff it'd be best to start with vs code and bring it other places, i've never had suprises going that way
[02:21:29] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[02:22:15] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 268 seconds)
[02:22:57] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 265 seconds)
[02:28:44] <johnny> aegon_w, why would vscode help?
[02:29:34] <johnny> you could still use cmake to generate say ninja build files
[02:29:47] <johnny> maybe they'd be easier to understand for you
[02:31:23] <aegon_w> ah, sorry i keep mixing those up, visual studio not vscode
[02:32:53] <johnny> visual studio is never an option for me, so i can't mix them up
[02:40:38] <aegon_w> I'll get to the bottom of it, its just in no way going to be in time for a 4:45 talk :P
[02:40:55] <aegon_w> i actually joked about getting caught offguard by linking hell this weekend
[02:41:46] <aegon_w> I'm not especially a stranger to vs code, i just am double guessing everything I thought I knew because its clearly not lining up in this instance
[02:41:54] <aegon_w> oy! visual studio, not vs code
[02:44:05] <aegon_w> this is me https://github.com/fuag15/project_northstar_openvr_driver the cmake stuff is a little hacky and i didn't need to include the header files explicitly but afaik theres nothing there thats a glaring misunderstanding of cmake / vs
[02:47:55] <aegon_w> bug given the experience yesterday, maybe there is :X
[02:49:31] *** Joins: bitrot (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs)
[02:50:58] *** Quits: bitrot (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs) (Client Quit)
[02:51:14] *** Joins: rajkosto (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs)
[02:51:23] <johnny> i know i'm not gonna pretend to be a cmake expert
[02:51:58] <aegon_w> i'm just dissapointed in myself for not giving more of a buffer between the last feature and prepping for this
[02:52:57] <aegon_w> i'm doing something wrong in windows land. I'm way more comfy with the nix tools for inspecting .so's / .a's so i probably should spend a day just grokking vs developer tools
[02:53:29] *** Quits: rajkohaxor (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs) (Ping timeout: 252 seconds)
[02:53:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:7515:120c:400a:3571) (Quit: Leaving)
[03:03:23] *** Quits: rajkosto (~rajkosto@93-86-99-67.dynamic.isp.telekom.rs) (Ping timeout: 252 seconds)
[03:06:19] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[03:09:41] *** Maximus is now known as Sevalecan
[03:13:57] *** Joins: rajkosto (~rajkosto@178.220.70.86)
[03:15:07] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[03:17:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[03:18:04] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[03:31:15] *** Quits: rajkosto (~rajkosto@178.220.70.86) (Ping timeout: 252 seconds)
[03:33:55] *** Joins: rajkohaxor (~rajkosto@178.220.70.86)
[03:44:05] *** Joins: ferdna (~ferdna@user/ferdna)
[03:47:56] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:53:44] *** Joins: szutt (~szutt@116.37.2.145)
[04:12:37] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:13:50] *** Quits: aegon_w (~aegon_w@174.127.249.180) (Quit: Client closed)
[04:20:23] *** Quits: proller (~p@2a02:6b8:b081:8810::1:36) (Ping timeout: 252 seconds)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:33:53] *** Joins: proller (~p@2a02:6b8:b081:14::1:3a)
[04:38:17] *** Joins: dmenz (~daniel@2804:14d:5cd4:5e94::d)
[04:41:01] *** Quits: rajkohaxor (~rajkosto@178.220.70.86) (Quit: Leaving)
[04:54:37] *** Quits: Enzix (~Enzix@77.105.17.172) (Ping timeout: 240 seconds)
[04:56:39] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[04:58:30] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:04:13] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[05:13:49] *** Quits: dmenz (~daniel@2804:14d:5cd4:5e94::d) (Ping timeout: 240 seconds)
[05:16:52] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[05:18:14] *** Joins: rajkosto (~rajkosto@178.220.70.86)
[05:28:03] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:36:31] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[05:39:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:20] *** ChanServ sets mode: +v npaperbot
[05:43:23] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[05:44:50] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Remote host closed the connection)
[05:47:35] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[05:48:13] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[05:58:55] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[06:06:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:11:52] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[06:17:01] *** Quits: proller (~p@2a02:6b8:b081:14::1:3a) (Ping timeout: 240 seconds)
[06:22:41] *** Quits: emerent (~quassel@p200300cd571d489bba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[06:23:13] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6e92:54cb:12e7:3fa1) (Ping timeout: 252 seconds)
[06:24:22] *** Joins: emerent (~quassel@p200300cd571a8375ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:24:25] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[06:34:44] <smallville7123> im trying to take this https://gist.github.com/mgood7123/c07187ca981488223bd5354d95a821b7 and generate some form of chain from it, but i am not sure how to store and organize and output such information/chain
[06:39:29] <Alipha> smallville7123: not exactly sure what you're going for, but why not returning a value instead of an "out parameter"? `VERTEX_CHAIN foo(VERTEX_CHAIN in)`
[06:41:04] <smallville7123> Alipha: i guess it depends on if the shader language has a concept of references/pointers or not
[06:41:43] <smallville7123> eg if everything is passed by value or by reference
[06:42:49] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[06:44:22] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[06:45:11] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[06:45:17] <smallville7123> it seems like it does
[06:45:50] <smallville7123> https://www.khronos.org/opengl/wiki/Core_Language_(GLSL)#Parameters
[06:45:59] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[06:46:12] <smallville7123> A parameter declared as in means that the value given to that parameter will be copied into the parameter when the function is called
[06:46:19] <smallville7123> A parameter declared as out will not have its value initialized by the caller. The function will modify the parameter, and after the function's execution is complete, the value of the parameter will be copied out into the variable that the user specified when calling the function.
[06:46:26] <smallville7123> The inout declaration combines both. The parameter's value will be initialized by the value supplied by the user, and its final value will be output
[06:50:15] <smallville7123> and it can possess structures as well
[06:50:18] <smallville7123> :)
[06:53:58] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:57:10] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:10:22] <smallville7123> maybe i should just ommit the struct and just require variable declarations instead?
[07:10:41] <smallville7123> and then just append these to a struct when genetating
[07:11:15] *** Quits: frost (~frost@user/frost) (Ping timeout: 252 seconds)
[07:11:18] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:32:27] *** Quits: rajkosto (~rajkosto@178.220.70.86) (Read error: Connection reset by peer)
[07:35:15] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:49:29] *** Joins: white_man_from_t (~whitemanf@2001:470:69fc:105::1:4855)
[07:49:51] <white_man_from_t> how can i open up an iOS .dmg , andit it , repack and restore?
[07:50:10] <white_man_from_t> i got the restore part, really i just cant open it
[07:50:15] <white_man_from_t> ???
[07:58:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:59:41] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:04:49] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:08:50] <RandomReader> I don't think there's an API for it, but you could call out to hdiutil
[08:09:32] <RandomReader> wait iOS? what do you mean by that, exactly?
[08:21:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:32:55] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:43:30] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:57:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:57:18] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:58:48] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 265 seconds)
[09:01:38] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[09:01:46] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:b09c:7c6d:e930:4d7d)
[09:01:50] <smallville7123> wait that wont work
[09:02:00] *** Guest19 is now known as virmaha
[09:02:13] <smallville7123> hmmm
[09:12:11] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[09:14:06] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:18:54] *** Joins: szutt (~szutt@116.37.2.145)
[09:19:35] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (Ping timeout: 265 seconds)
[09:26:13] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[09:31:22] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:34:53] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[09:35:12] <lpapp> hi, I cannot reproduce this on my Mac, any clue why leetcode is facing this issue on their, apparently Linux, machine? https://leetcode.com/submissions/detail/598712539/?from=explore&item_id=1153
[09:39:07] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:39:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:20] *** ChanServ sets mode: +v npaperbot
[09:40:33] <TinoDidriksen> lpapp, that requires login.
[09:40:49] <TinoDidriksen> But you can just run Linux in Docker or a VM.
[09:43:31] <lpapp> TinoDidriksen: https://github.com/lpapp/leetcode/blob/main/array-and-string/two-pointer-technique/two-sum-two.cpp#L20 this function seems to cause an issue for the address sanitiser for the last test case.
[09:44:15] <lpapp> I am trying to set up -fsanitize=address on my local machine. I hope that will be able to reproduce the issue.
[09:45:24] <TinoDidriksen> I definitely question line 24 - the input numbers never exceed 1000?
[09:45:45] <lpapp> never, but not in the failing test case, anyway?
[09:48:28] <lpapp> I wonder if the address sanitizer just raises this all the time when there is a potential call with issues.
[09:48:36] <lpapp> even though, it is never actually called like that.
[09:55:53] <RandomReader> do the line 29 index math yourself (or check with a debugger): what is the result? is that a valid index?
[09:57:05] <RandomReader> aside from asan, you could also switch all the vector access to use .at()
[10:01:23] *** Quits: chozorho (~chozorho@2601:146:300:c30::814d) (Ping timeout: 252 seconds)
[10:03:13] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[10:05:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:11:14] <lpapp> no, it is not meant to be at
[10:11:18] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 265 seconds)
[10:11:19] <lpapp> it is slower for no reason
[10:14:21] <lpapp> RandomReader: cannot see the problem with line 29?
[10:15:32] <lpapp> Hmm, maybe, now, I can see.
[10:17:06] <lpapp> not in the context of the failing test case though
[10:26:18] <lpapp> RandomReader: asan would still complain even with a precondition there, like: if (target - numbers[i] < -1000) continue;
[10:26:56] <lpapp> I wish it could be a little more useful and give actual codeline numbers.
[10:32:17] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[10:37:24] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 265 seconds)
[10:44:13] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d0a9:bdc9:9223:f85f) (Ping timeout: 268 seconds)
[10:57:02] <RandomReader> 1 - -1000 + 1000 = 2001, which is not a valid index, and .at() would catch that
[10:58:24] <RandomReader> using the tools at your disposal to make it work correctly first, and then fast second, is a well-known approach
[10:59:36] *** Joins: frost (~frost@user/frost)
[11:00:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:01:17] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:02:25] <RandomReader> of course I missed that you weren't testing that code at the moment, but the point still stands
[11:06:24] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:10:35] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[11:13:26] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 252 seconds)
[11:14:29] <fiesh> compile with _GLIBCXX_DEBUG and have oob checks enabled by default
[11:27:25] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:27:50] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:34:10] *** Joins: TheSchaf (~TheSchaf@p508b6d1b.dip0.t-ipconnect.de)
[11:37:15] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:39:01] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[11:39:30] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[11:41:12] *** Joins: andreasbuhr (~quassel@p549db00c.dip0.t-ipconnect.de)
[11:44:47] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[11:46:32] *** Joins: malloy (~jimery@116.30.223.163)
[11:47:09] *** Joins: skapata (~Skapata@user/skapata)
[11:48:06] <lpapp> RandomReader: good spot, thanks.
[11:48:21] <lpapp> it should have been if (target - numbers[i] < -1000 or target - numbers[i] > 1000) continue;
[11:48:41] <lpapp> RandomReader: as you can see from the other two functions, I did get it functional first.
[11:48:48] <lpapp> so not sure why you were telling that.
[11:49:08] <lpapp> fiesh: that relies on glibc...
[11:51:52] <fiesh> lpapp: no, on libstdc++
[11:52:39] <lpapp> ??
[11:53:01] <ville> GLIBCXX the "CXX" part is for c++
[11:53:18] <lpapp> GLIBC is posix specific
[11:53:21] <lpapp> or Unix.
[11:53:28] <lpapp> not used by msvc
[11:53:43] *** Joins: Mocp (~Mocp@2409:8970:a81:8e2:fc28:6f59:9b6c:5452)
[11:54:05] *** Joins: Guest31 (~Guest31@2001-4dd3-5263-0-952a-435f-514e-3cc8.ipv6dyn.netcologne.de)
[11:54:12] <ville> it's not GLIBC it's G LIB CXX
[11:54:13] <fiesh> I'm sure msvc also offers some debugging mode that adds out of bound checks to its standard library implementation
[11:54:50] <lpapp> of course, it does, but this is not a portable way to do this.
[11:54:51] <ville> but yes it's specific to the GCC project's standard library implementation of the c++ standard library
[11:55:24] *** Guest31 is now known as limubs
[11:55:35] <ville> (glibc is the name for the GCC project's standard library implementation of the _c_ standard library)
[11:55:53] <lpapp> I know, that is why I said what I said
[11:55:55] <lpapp> it is not good to use that
[11:56:30] <lpapp> with cmake, this may be a better way: add_compile_options(-Wall -Wextra -pedantic -Werror -g -fsanitize=address);add_link_options(-fsanitize=address)
[11:56:32] <ville> that's a somewhat "indirect" thing to say...
[11:57:06] <ville> i would expect _GLIBCXX_DEBUG to not really affect glibc specifically
[11:57:33] <fiesh> I don't think glibc is even affiliated with GCC
[11:58:03] <fiesh> and _GLIBCXX_DEBUG has nothing to do with glibc whatsoever
[11:58:10] <ville> they operate under the GNU project umbrella
[11:58:26] <fiesh> that's true
[12:00:09] <lpapp> yeah, do not use that, sounds like a hack if you need cross-platform portability.
[12:00:29] <RandomReader> .at() is portable and would fire even on leetcode
[12:00:41] <fiesh> and of course means of debugging aren't meant to be portable -- adding the address sanitizer isn't something that should be considered "portable", and having your standard library add debug checks is a much better solution
[12:01:00] <fiesh> and it's not a hack and has nothing to do with portability
[12:01:02] <lpapp> RandomReader: it is also slower
[12:01:09] <RandomReader> it'd also be worth double-checking the input assumptions
[12:01:11] <lpapp> needlessly
[12:01:21] <RandomReader> it's not needless if it helps you find a problem
[12:01:22] <lpapp> because if you write the code correctly in the first place, you do not have to pay the penalty.
[12:01:31] <RandomReader> which leads back to my original comment: use the tools at your disposal
[12:01:53] <fiesh> .at() and operator[] serve two entirely different purposes
[12:02:10] <lpapp> RandomReader: it is needless
[12:02:30] <lpapp> you do not need to pay that performance penalty here, you just need to use a tool like this, not pay the runtime performance penalty all the time.
[12:02:48] <fiesh> yeah and the correct tool would be a standard library's debug mode
[12:02:53] <lpapp> no
[12:03:12] <fiesh> since that debug mode is able to catch more than the address sanitizer
[12:03:24] <fiesh> (in terms of mis-usage with standard containers etc.)
[12:03:35] *** Quits: limubs (~Guest31@2001-4dd3-5263-0-952a-435f-514e-3cc8.ipv6dyn.netcologne.de) (Quit: Client closed)
[12:03:58] *** Joins: limubs82 (~limubs@cgn-89-1-58-17.nc.de)
[12:04:05] <lpapp> except that you do not want debug mode to catch something like this.
[12:04:12] <lpapp> So, conceptually, it is probably even wrong for this use case.
[12:04:13] *** limubs82 is now known as limubs
[12:04:18] <fiesh> aha
[12:04:35] <lpapp> Really, it only needed this check, nothing more.
[12:05:31] <RandomReader> you should save this chat log, and read it again in 10 years or so
[12:05:37] <fiesh> :-)
[12:06:27] <lpapp> no, thanks, do not want to waste my time on things not relevant for my problem :)
[12:06:55] <fiesh> why do you even ask here if you know it better anyway?  seems to be a waste of your time on things not relevant for your problem
[12:07:27] <lpapp> maybe, you should re-read
[12:07:41] <lpapp> we already solved the problem long ago - I honestly do not know what the discussion is about
[12:07:46] <lpapp> I even get asan working locally.
[12:07:50] <lpapp> got*
[12:08:24] <RandomReader> you haven't said anything in here about a solution to the problem
[12:08:32] <RandomReader> as far as anyone else knows, you're still trying to find it
[12:09:35] <lpapp> no... read again
[12:09:46] <lpapp> 09:17 < lpapp> it should have been if (target - numbers[i] < -1000 or target - numbers[i] > 1000) continue;
[12:10:02] <RandomReader> but your test case doesn't even use that function
[12:10:22] <RandomReader> and you were focused on the test case you said was being executed at the time
[12:10:41] <RandomReader> was one of those things incorrect?
[12:10:51] <lpapp> ?
[12:11:03] <lpapp> I was using that function of course that is why I referred to it!
[12:11:08] *** Quits: Mocp (~Mocp@2409:8970:a81:8e2:fc28:6f59:9b6c:5452) (Read error: Connection reset by peer)
[12:11:25] <RandomReader> the posted code never calls it
[12:12:38] <RandomReader> you were talking about that being a test case to reproduce the original error you were seeing, but the test case doesn't execute that function
[12:12:53] <RandomReader> so even thought I saw and mentioned it, as far as I knew, you were still trying to find the problem being tested
[12:13:01] <RandomReader> even though*
[12:17:34] <lpapp> Ah, no.
[12:22:16] *** Joins: robod34 (Username@79.113.195.239)
[12:26:42] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[12:27:47] <udet> what meaning has inheritance in standard layout if there is no support for virtual members and there fore such a thing like "struct A { virtual void foo() = 0; }; struct B : A { void foo() override { do something }; struct C : A { void foo() override { do something else }};" not possible? or can this be acheived in another way which works with standard layout?
[12:27:49] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[12:28:14] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:28:33] <udet> or probably other question, is there any reason why such a construct is not is_pointer_interconvertible_base_of?
[12:29:30] <lpapp> RandomReader: thanks
[12:29:30] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[12:34:04] <RandomReader> standard layout basically means "simple container of data", arranged in such a way that it can be made compatible with other languages (such as C)
[12:35:32] <RandomReader> inheritance involving types that contain no data members is fine, since that means none of them have objects that can alter the layout: the first data member remains in the same location
[12:37:10] <RandomReader> (in practice, that means you can take a C-like data struct and inherit from it to add operators, RAII, etc for C++ use, and still pass a pointer to the base to another language without concern of hidden behavior)
[12:37:53] <RandomReader> polymorphic support may cause the implementation to add data for that purpose (e.g. vtable), so that makes it no longer standard-layout
[12:42:44] *** Quits: virmaha (~Guest19@2601:647:5280:2a50:b09c:7c6d:e930:4d7d) (Quit: Client closed)
[12:42:53] <RandomReader> and I think that answers both of those questions: only standard layout has guarantees that allow for pointer interconvertibility, and having implementation-controlled data means the layout can't be known/standard
[12:45:48] *** Joins: xkuru (~xkuru@user/xkuru)
[12:49:18] *** Joins: Guest3521 (~Guest35@103.170.244.98)
[12:50:53] *** Quits: Guest3521 (~Guest35@103.170.244.98) (Client Quit)
[12:50:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:59:37] <udet> hmmm... probably another approach. is there a possibility to get all dynamically castable base types of a type at compile time?
[13:00:28] <udet> probably as tuple type which then I can loop over?
[13:07:10] <ville> also with the 20 change how = delete works you can inherit from a class that = delete copy and/or move operations, but still construct like an aggregate and it can still be standard layout
[13:09:36] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:09:40] <ville> (but usage of that will look odd: aa{/*for the base class*/{}, /* members */0, 1, 2};)
[13:11:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:14:29] *** Joins: paul424 (~tom@ip-5-172-239-47.multi.internet.cyfrowypolsat.pl)
[13:16:10] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:19:41] <ville> http://coliru.stacked-crooked.com/a/937ccd992365c41d
[13:25:49] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[13:32:44] *** Quits: paul424 (~tom@ip-5-172-239-47.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[13:33:25] <RandomReader> udet - not currentl .., that would probably fall under a "reflection" kind of feature, which doesn't exist yet
[13:33:33] <RandomReader> er, not currently*
[13:33:52] *** Joins: paul424 (~tom@ip-5-172-239-47.multi.internet.cyfrowypolsat.pl)
[13:38:03] *** Quits: limubs (~limubs@cgn-89-1-58-17.nc.de) (Remote host closed the connection)
[13:38:13] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Ping timeout: 240 seconds)
[13:38:23] *** Quits: paul424 (~tom@ip-5-172-239-47.multi.internet.cyfrowypolsat.pl) (Client Quit)
[13:38:51] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[13:39:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:20] *** ChanServ sets mode: +v npaperbot
[13:39:59] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:42:54] *** Joins: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com)
[13:42:54] *** Quits: PJBoy (~PJBoy@host81-158-196-74.range81-158.btcentralplus.com) (Changing host)
[13:42:54] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:43:08] <Haohmaru> !fact
[13:43:09] <nolyc> Haohmaru: The mutex types shall be DefaultConstructible and Destructible.
[13:44:42] *** Joins: Burgundy (~yomon@79.115.213.171)
[13:46:20] <udet> RandomReader, thx
[13:48:13] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:50:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:50:52] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:51:53] *** Joins: pulse (~pulse@user/pulse)
[14:02:01] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 245 seconds)
[14:19:14] *** Joins: proller (~p@2a02:6b8:b081:1::1:33)
[14:21:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[14:22:48] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:29:22] *** Joins: ravan (~ravan@user/ravan)
[14:41:13] *** Joins: DSpider (~DSpider@82.79.237.30)
[14:50:35] *** Joins: seninha (~seninha@user/seninha)
[14:55:25] *** Quits: proller (~p@2a02:6b8:b081:1::1:33) (Ping timeout: 240 seconds)
[14:58:25] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:15:14] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[15:21:23] *** Joins: RazielZ (~Raziel@user/raziel)
[15:25:09] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 252 seconds)
[15:50:06] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[15:50:14] *** Joins: proller (~p@2a02:6b8:0:40c:7894:e2fe:b9f4:1716)
[15:55:22] <Haohmaru> !fact
[15:55:23] <nolyc> Haohmaru: There is no ``reference-to-member'' type in C++.
[15:55:43] *** Quits: yolo (~xxiao@159.89.184.51) (Quit: Lost terminal)
[15:59:27] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:59:56] <mort> !fact
[15:59:57] <nolyc> mort: Fences can have acquire semantics, release semantics, or both.
[16:00:38] *** Joins: pulse (~pulse@user/pulse)
[16:00:39] *** flooded is now known as _flood
[16:02:12] *** Joins: plastico (~plastico@neomutt/plastico)
[16:11:06] <manuels> we cant have dependecy injection containers in c++ because it has to inspect the constructor and c++ does not support reflection, right?
[16:12:45] <mort> what do you mean by "dependency injection containers"
[16:14:04] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[16:18:53] <manuels> https://youtu.be/PniFqdDJfCg?t=548
[16:22:01] <mort> you can certainly do dependency injection in C++ in a bunch of different ways, but yeah, you probably couldn't do it by dynamically seeking that the constructor takes a parameter of type Database
[16:22:40] <mort> seeing*
[16:23:16] <mort> that strikes me as.. not a great way to do dependency injection anyways?
[16:25:48] <mort> I would probably want to pass in dependencies at compile time rather than at runtime
[16:37:32] *** Joins: pah (~pah@user/pah)
[16:37:46] <mort> manuels: I might do something like this: https://godbolt.org/z/zafEznExe
[16:38:27] *** Quits: pa (~pah@user/pah) (Ping timeout: 265 seconds)
[16:38:54] <mort> with c++20, https://godbolt.org/z/f85naoboK
[16:43:08] <comrad> still feeling that c++20 support is limited with the compilers
[16:44:20] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:44:30] *** Quits: DSpider (~DSpider@82.79.237.30) (Quit: Leaving)
[16:44:45] <barometz> I think the idea behind that kind of DI is that not only don't components create their own dependencies, whoever creates the components doesn't need to know either
[16:45:02] <barometz> which is not a terrible idea sort of? but I do like it when my compiler checks my work
[16:45:16] <comrad> DI in Java using Spring was a real breeze
[16:48:27] <mort> https://godbolt.org/z/h9caTndzq this is a slightly more elaborate example with a "database"
[16:48:46] <mort> passing around a dependencies object doesn't seem like such a terrible thing I feel
[16:49:09] <mort> I don't know, maybe it'd be problematic in practice
[16:50:12] <mort> but you still have to care even with the PHP example tho, right? You have to do injector->make("Thingy") rather than new Thingy()
[16:50:35] <mort> so you need to pass around a reference to the injector
[16:51:05] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:54:58] *** pah is now known as pa
[16:59:07] <mort> https://godbolt.org/z/r57fqf97r here you have your syntax sugar to be able to do doer = injector.make<ThingDoer>() rather than ThingDoer doer(injector)
[16:59:40] *** Joins: paule32_ (~paule32@user/paule32)
[16:59:47] <mort> `template<template<typename> typename T, typename... Args>` it's as if it's written deliberately to be as esoteric as possible
[17:01:38] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 256 seconds)
[17:02:44] *** Joins: paule32__ (~paule32@user/paule32)
[17:03:00] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[17:03:24] *** Joins: szutt (~szutt@116.37.2.145)
[17:05:02] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[17:07:27] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[17:28:47] <mort> https://godbolt.org/z/9TG7r7Mob ok this is just trolling at this point
[17:28:54] <mort> but now you can pass template parameters
[17:31:13] <mort> sorry, that was broken, https://godbolt.org/z/d74hxc8Y3 works
[17:34:10] <PJBoy> man I am really struggling with this visual studio cmake integration
[17:34:45] <PJBoy> it keeps adding this `export CFLAGS=-fno-limit-debug-info;export CXXFLAGS=-fno-limit-debug-info;` crap before calling `cmake --build`
[17:34:51] <PJBoy> which breaks the build
[17:35:21] <PJBoy> and I don't see a damn option in the world that disables it
[17:37:54] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:39:08] *** RazielZ is now known as Raziel
[17:39:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:22] *** ChanServ sets mode: +v npaperbot
[17:43:32] <white_man_from_t> dude i hate that fucking app
[17:43:54] <white_man_from_t> it literally will not let me view ANY binaries. it keeps saying it needs more RAM
[17:44:06] <white_man_from_t> Its slow as hell
[17:44:08] <PJBoy> what app?
[17:44:08] <white_man_from_t> i hate it
[17:44:12] <PJBoy> wrong channel?
[17:44:36] <white_man_from_t> i dont like anything from microsoft  we only use linux. everything else is just for testing and expeimenting.
[17:45:16] <PJBoy> cool story
[17:45:50] <white_man_from_t> And i do not at all like linux being integrated into windows 11. oh hell naw. I vote to keep linux as far away from Kill Gates as possible.
[17:46:06] <PJBoy> cool story
[17:46:28] <white_man_from_t> fuck viisual studio code. i use krita , or atom , or kate or neovim
[17:46:48] <PJBoy> cool man
[17:46:52] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[17:47:30] <white_man_from_t> viusal studio code bro
[17:47:43] <white_man_from_t> i was talking to you
[17:47:45] <white_man_from_t> -_-
[17:48:03] <white_man_from_t> this is public.....right?
[17:48:08] <PJBoy> yeah
[17:48:15] <PJBoy> and I wasn't talking about visual studio code
[17:48:36] <white_man_from_t> im sorry. IDE. i guess you kids would call it tody.
[17:48:39] <PJBoy> also linux is already integrated in windows 10 via WSL
[17:48:48] <PJBoy> and bill gates retired from microsoft ages ago
[17:49:05] <white_man_from_t> lol
[17:49:11] <PJBoy> plus if you like linux so much, why would you be mad about integrating it with windows
[17:49:30] <PJBoy> that's just senseless
[17:49:51] <white_man_from_t> should try awk if you havent already, i was recently put on to it
[17:50:10] <PJBoy> what's to try
[17:50:16] <PJBoy> it's a text replacement tool
[17:51:34] <white_man_from_t> <PJBoy> "man I am really struggling..." <- ????
[17:51:37] *** Joins: jkaye (~jkaye@c-71-205-220-154.hsd1.co.comcast.net)
[17:51:52] <PJBoy> I thought I was quite clear
[17:51:54] <white_man_from_t> white_man_from_t: ???
[17:52:01] <white_man_from_t> <PJBoy> "man I am really struggling..." <- ???
[17:52:16] <PJBoy> it's adding some export commands before executing cmake
[17:52:28] <PJBoy> which is some bullshit that I can't figure out how to disable
[17:52:30] <PJBoy> no relation to awk
[17:52:42] <white_man_from_t> interesting.
[17:54:57] <white_man_from_t> 👁️‍🗨️
[17:55:06] <white_man_from_t> 👁️
[17:55:28] * white_man_from_t uploaded an image: (399KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/bpXeTPQnVNZrzwtFQVlzLurU/Temple-Stairs.jpg >
[17:58:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8db1:f08e:3f5b:3312)
[17:59:47] <Juliu> Test
[18:00:54] <Haohmaru> FAIL_SUCCESS
[18:01:28] <Juliu> :(
[18:04:37] <white_man_from_t> would be willing to trade some exploits if anyone has True PurpleTools from Apple
[18:05:08] <white_man_from_t> or bitcoins
[18:05:36] <PJBoy> no one wants to trade with a crackhead
[18:07:23] <Haohmaru> dafuq is this?!
[18:08:04] <Haohmaru> white_man_from_t this is not the dark internet
[18:08:48] <white_man_from_t> desperate
[18:08:51] <white_man_from_t> crack is for niggers
[18:08:57] <white_man_from_t> i mean were desperate
[18:09:07] <white_man_from_t> thanbk you for the respons tho
[18:09:16] <white_man_from_t> you gentlemen have a blessed day.
[18:10:45] * white_man_from_t uploaded an image: (42KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/XYIENyyYcTZpYbTcZrYFWehG/MIGO.jpg >
[18:11:14] <white_man_from_t> Migo said if you dont get that 1984 shit out a here better take yo ass to blockbuster niggi. get a video.
[18:11:53] * Haohmaru kicks white_man_from_t with a big::boot
[18:22:59] *** ChanServ sets mode: +o ville
[18:23:07] *** ChanServ sets mode: +o ville
[18:23:18] *** ville sets mode: +b *!*@001:470:69fc:105::1:4855
[18:23:23] *** white_man_from_t was kicked by ville (white_man_from_t)
[18:23:27] *** ville sets mode: -o ville
[18:23:30] *** Joins: supernova (~quassel@2405:9800:ba11:6207:748a:397:6236:ba28)
[18:23:33] *** Quits: supernova (~quassel@2405:9800:ba11:6207:748a:397:6236:ba28) (Client Quit)
[18:23:50] *** Joins: supernova (~quassel@2405:9800:ba11:6207:748a:397:6236:ba28)
[18:24:08] *** Quits: supernova (~quassel@2405:9800:ba11:6207:748a:397:6236:ba28) (Client Quit)
[18:24:25] *** Joins: supernova (~quassel@2405:9800:ba11:6207:748a:397:6236:ba28)
[18:24:25] *** Quits: supernova (~quassel@2405:9800:ba11:6207:748a:397:6236:ba28) (Client Quit)
[18:25:53] *** Joins: supernova (~quassel@2405:9800:ba11:6207:748a:397:6236:ba28)
[18:26:09] <supernova> folks! How to fix syntax?
[18:26:12] <supernova> static array <array < int, Test::rows >, Test::columns >   TestTable =
[18:26:12] <supernova> {{ 44, 37, 26, 24, 33, 53, 64, 66, 57},
[18:26:12] <supernova>  { 37, 16, 18, 58, 56, 44, 24},
[18:26:12] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[18:26:12] <geordi> error: expected unqualified-id before ',' token
[18:26:13] <supernova>  { 26, 14, 18, 38, 47, 44, 34}};
[18:26:13] <geordi> error: Unexpected `}` after `44, 34}`. Expected balanced code or end of request.
[18:28:20] <Haohmaru> supernova what are you trying to do here? 2D array?
[18:28:26] <Haohmaru> ..using std::array
[18:28:59] <supernova> i want to declare 2D array and manipulate it
[18:30:31] <Haohmaru> tbh i don't know if std::array can do that
[18:30:38] <Haohmaru> check cppreference
[18:31:25] <PJBoy> { array<array<int, 2>, 2> arr{{{0, 1}, {2, 3}}}; }
[18:31:25] <geordi>  
[18:31:28] <PJBoy> need more braces
[18:32:31] <supernova> Thank you!
[18:32:33] <supernova> Works
[18:34:52] *** Joins: rajkosto (~rajkosto@178.220.70.86)
[18:39:11] *** Quits: supernova (~quassel@2405:9800:ba11:6207:748a:397:6236:ba28) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:48:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:49:00] <Haohmaru> PJBoy you cheater
[18:55:15] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[18:55:56] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[18:56:28] <cart_man> Is there a way to make the CPU give an interrupt straight to you app? Perhaps run a callback when the interrupt hits? I was looking at ALARM Signal but I am not sure if that is the right one since its default is to quit the program
[18:57:25] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Ping timeout: 240 seconds)
[18:57:37] <Haohmaru> cart_man what CPU?
[18:58:14] <cart_man> Haohmaru: Hmmm AMD or Intel ... x64 ... Is that what you where looking for?
[18:58:34] <Haohmaru> okay, that's kinda exotic i'd say
[18:58:39] <Haohmaru> low-level stuff
[18:59:26] <cart_man> Haohmaru: Basically I want a timer that runs independantly from my app... Ive seen timer_settimer() also. And when the timer over runs it interrupts with some signal. That would be ideal
[18:59:51] <cart_man> and since the CPU is a big clock ... well
[18:59:52] <Haohmaru> uh, why from the CPU and not from the $OS ?
[19:00:05] <cart_man> Well perhaps the OS. I am still checking the options
[19:00:14] <cart_man> I mean.. of course that would probably be a safer bet
[19:00:20] <Haohmaru> what do you want to achieve with this timer?
[19:00:40] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[19:02:31] <cart_man> I am building an IPC for fun. Thinking I can squeeze some more throughput with a timer
[19:02:40] <cart_man> But.. it will be a great tool to be able to do also
[19:02:43] <cart_man> use`
[19:03:16] <Haohmaru> if it's for fun..
[19:03:29] <Haohmaru> !fun
[19:03:30] <nolyc> #C++ is a topical channel. There is No Fun Allowed in #C++.
[19:03:50] <cart_man> hahaha whow ... how to crush a persons soul
[19:04:06] <rpav> that why we're in #c++-general; much more fun
[19:04:10] <Haohmaru> i know even more ways
[19:04:11] <cart_man> Haohmaru: Ok lets say its not for fun ... but research
[19:04:27] <cart_man> Haohmaru: I am sure... self inflicting ways?
[19:05:09] <Haohmaru> cart_man look into timers for your $OS of choice or use a cross-platform lib which has timers maybe
[19:05:33] <Haohmaru> you could maybe also make something ghetto with std::thread and <chrono>
[19:05:51] <Haohmaru> do you accept jitter? ;P~
[19:08:44] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:09:10] *** Joins: szutt (~szutt@116.37.2.145)
[19:09:42] *** Quits: kapil (~kapil@o-k.website) (Ping timeout: 256 seconds)
[19:10:16] *** Joins: kapil (~kapil@o-k.website)
[19:11:03] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:14:18] *** Joins: seninha (~seninha@user/seninha)
[19:15:09] <cart_man> Haohmaru: Yea sure.
[19:15:23] <cart_man> AS in a play on the accuracy of the interrupt?
[19:15:59] <Alipha> cart_man: any modern OS isn't going to let you hook interrupts directly, unless you create a driver, which sounds like a pain and unnecessary
[19:17:30] <cart_man> Alipha: What about timer_settimer and the likes?
[19:17:39] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:17:41] <cart_man> Is that close to hardware timers as I will get?
[19:21:13] <Haohmaru> if you wanna be close to the hardware..
[19:21:27] * Haohmaru gives cart_man a pic12f509
[19:21:40] <Haohmaru> if you wanna wire in C++ ..
[19:21:56] * Haohmaru gives cart_man an atmega
[19:22:33] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Read error: No route to host)
[19:23:02] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[19:23:32] *** Joins: meator (~meator@user/meator)
[19:25:06] *** Joins: shailangsa (~shailangs@host86-161-220-126.range86-161.btcentralplus.com)
[19:29:30] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:43:22] <cart_man> Alipha: Haohmaru -> https://wandbox.org/permlink/Ua6lW22tHAb3AMLF
[19:44:09] * Haohmaru is not interested
[19:44:12] * Haohmaru has atmega
[19:44:17] <cart_man> Haohmaru: :*(
[19:44:28] <cart_man> atmega ? the MCU?
[19:44:47] <Haohmaru> yes
[19:45:23] <Haohmaru> and i also have atxmega
[19:45:27] <cart_man> Haohmaru: Wish I can do embedded again
[19:45:35] <Haohmaru> why can't you?
[19:46:08] <cart_man> Haohmaru: I can't find a job where I am in Embedded... and then 2 interviews lined up for embedded as I sign a contract for a new job
[19:46:19] <cart_man> fml
[19:46:39] <Haohmaru> just buy an atmega for $fun at $home
[19:47:30] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[19:49:22] <cart_man> Anybody know how ualarm(100,500000); actually works? Is it being processed OS level?
[19:49:32] <cart_man> And my app seems to not worry about it at all
[19:51:46] <cart_man> Haohmaru: I have built an entire robot arm from first principals ... I have tons of Embedded stuff lying around. Its literally my dream job
[19:54:25] *** Quits: andreasbuhr (~quassel@p549db00c.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:54:30] <Alipha> i don't know anything about it, actually, sorry.
[19:58:14] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:58:29] <PJBoy> > This function is obsolete. Use setitimer(2) or POSIX interval timers (timer_create(2), etc.) instead.
[19:58:38] <PJBoy> from the ualarm man page
[19:59:30] <PJBoy> the kernel has a scheduler for calling its various processes
[19:59:40] <PJBoy> one would imagine ualarm et al just hook into that
[20:01:30] *** Joins: cq-work (~Z_Lund@user/cq-work)
[20:01:40] <imMute> cart_man: ualarm asks the kernel to send a signal to your process at some point in the future (and periodically after that)
[20:03:24] <PJBoy> the kernel itself I believe leverages timers available from the CPU or CPU core
[20:03:40] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[20:03:47] <cart_man> Damn... that is exactly what I need
[20:03:48] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[20:04:00] <imMute> yes, it uses a system timer to implement time sharing (preemption) as well as periodic needs.
[20:04:33] <imMute> Linux can use just about damn near any clock source for that and it picks whichever one it thinks is best (even seems to run some tests on each to see how "good" they are)
[20:05:38] *** Quits: proller (~p@2a02:6b8:0:40c:7894:e2fe:b9f4:1716) (Remote host closed the connection)
[20:06:45] *** Joins: proller (~p@2a02:6b8:0:40c:8cd7:256a:5d19:5f55)
[20:09:08] <Haohmaru> !fact
[20:09:09] <nolyc> Haohmaru: A destructor for a class is odr-used if it is potentially invoked.
[20:09:54] * imMute still can't tell if the !fact s are true or trolls.
[20:12:06] <PJBoy> that doesn't look true to you
[20:12:08] <PJBoy> ?
[20:12:37] <imMute> that one does, but  I saw one yesterday that I'm pretty sure was incorrect.
[20:12:54] <PJBoy> ah, if you can recall that'd be cool
[20:13:03] <Haohmaru> pics or it didn't happen.
[20:15:40] <Haohmaru> !odr
[20:15:41] <nolyc> The One Definition Rules state (1) that no translation unit (see !tu) shall contain more than one definition of any variable, function, class type, enumeration type or template, and (2) that every program shall contain exactly one deﬁnition of every non-inline function or object that is used in that program.
[20:15:52] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[20:16:33] <Haohmaru> what's that exotic char there: "ﬁ"
[20:17:42] <imMute> Haohmaru: it's a ligature.
[20:19:22] *** Joins: Snyp (~Snyp@49.207.209.233)
[20:22:58] <PJBoy> that's when you put a ligma and a signature together
[20:23:46] <Haohmaru> ligmanature?
[20:24:22] <PJBoy> ligature >:(
[20:28:12] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:34:56] *** Quits: Snyp (~Snyp@49.207.209.233) (Quit: Textual IRC Client: www.textualapp.com)
[20:53:47] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[20:53:49] <rpav> i think the "same sequence of tokens" thing probably ought to be a (3) there
[20:57:48] *** Quits: proller (~p@2a02:6b8:0:40c:8cd7:256a:5d19:5f55) (Ping timeout: 268 seconds)
[20:58:13] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[20:58:37] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[21:01:22] <OnlineCop> I have a `make` question: I've got a plain Makefile that iterates over subdirectories in a loop with: `for dir in path1 path2 path3; do $(MAKE) -C $$dir; done`. If I run `make --jobs=4`, will that '--jobs' flag get passed into those sub- $(MAKE) processes?
[21:02:14] <imMute> OnlineCop: yes, because you used $(MAKE)
[21:02:49] <OnlineCop> Awesome. I didn't know whether $(MAKE) would pass those along.
[21:13:14] <rpav> dbus seems like a bit of a disaster
[21:23:55] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[21:29:08] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:32:58] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 268 seconds)
[21:37:29] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:39:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:20] *** ChanServ sets mode: +v npaperbot
[21:40:07] *** Joins: magla (~gelignite@55d4e16d.access.ecotel.net)
[21:53:01] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[21:53:56] <Hello72> technically it shares the job server, it doesn't pass it
[21:57:37] *** Joins: proller (~p@2a02:6b8:b081:7212::1:29)
[21:57:51] *** Quits: headline (sid102736@tinside.irccloud.com) (Ping timeout: 245 seconds)
[21:57:51] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 245 seconds)
[21:58:37] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[21:58:46] *** Quits: celphi_ (sid97751@user/celphi) (Read error: Connection reset by peer)
[21:59:08] *** Joins: Youmu (uid129469@user/condy)
[21:59:18] *** Joins: headline (sid102736@id-102736.tinside.irccloud.com)
[22:00:23] *** Joins: celphi_ (sid97751@helmsley.irccloud.com)
[22:13:51] <rpav> hum, i hate it when i want to make something, but just don't discrete-enough goals to really get it started
[22:15:23] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[22:16:19] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Client Quit)
[22:16:33] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Ping timeout: 252 seconds)
[22:18:59] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[22:21:19] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[22:26:17] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:250b:308d:c956:22dd)
[22:26:22] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[22:28:51] <noarb> ./quit
[22:31:32] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Ping timeout: 268 seconds)
[22:33:10] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[22:37:35] *** Quits: rajkosto (~rajkosto@178.220.70.86) (Read error: Connection reset by peer)
[22:38:03] *** Joins: letto (~letto@188.26.158.104)
[22:41:54] *** Joins: chozorho (~chozorho@2601:146:300:c30::88ba)
[22:42:10] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[22:47:31] <cart_man> How does one write into a MMAPed piece of ram? I am trying to write into a mmap going *(first_pos_ptr) = '0' ; But I get seg faults
[22:48:49] <kalven> you write to it like any other memory. if you get a segfault then there might be something wrong with the mapping (or the pointer not pointing to it)
[22:49:02] <TinoDidriksen> Or that you mapped it read-only.
[22:51:11] *** Quits: magla (~gelignite@55d4e16d.access.ecotel.net) (Quit: Stay safe!)
[22:52:37] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:52:44] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[22:58:02] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[22:58:16] <imMute> check the return value too, mmap may return errors.
[22:58:50] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8db1:f08e:3f5b:3312) (Quit: Quit)
[23:00:44] *** Joins: seninha (~seninha@user/seninha)
[23:03:03] <cart_man> imMute: kalven TinoDidriksen -> https://wandbox.org/permlink/ij8vk5LI2blVXdhi
[23:03:11] <cart_man> imMute: Ill quickly check
[23:06:07] <kalven> if you're creating a new file, you probably have to ftruncate it up to the size you want first.. it's been a while since I did these things
[23:06:56] <pinchartl> does anyone know of a generic resource tracker implementation ? I have a custom class that has shared_ptr semantics to wrap file descriptors, and I want to track leaks. I've started writing a custom tracker that captures a backtrace at allocation time, and allows listing the references through an explicit function call, but maybe that's a solved problem already
[23:08:49] <rpav> if you're tracking it, is it really a leak?
[23:09:07] <rpav> in any case, if you want to really track leaks, use Address/LeakSanitizer
[23:09:18] <rpav> they don't require you to track, and they already exist, and do a pretty good job
[23:09:33] <LordKalma> So it's basically official. Rust is Linux's second land
[23:09:35] <LordKalma> Language
[23:09:55] <rpav> ew
[23:10:04] <rpav> i really don't want to have to install rust to build a kernel
[23:10:16] <rpav> not to mention compile times are already long enough
[23:10:41] <kalven> doesn't the kernel compile really quickly on todays machines?
[23:11:31] <rpav> it has a _lot_ of modules etc
[23:11:57] <rpav> like most pure C things compile pretty quickly, but it's a zillion lines of drivers and stuff and that still adds up
[23:12:07] <pinchartl> rpav: it's a leak if a reference still exists when they're all supposed to be released :-) as file descriptors are a much more limited resource than memory, it's important to track that. I suppose that ASAN and valgrind can help indeed, as the object wrapping the fd is allocated in memory, so it will show in memory leak reports
[23:12:22] <kalven> yeah, but most of those drivers are for random arm stuff that isn't relevant in any given build
[23:12:40] <kalven> it's not like you're building *all* the code when building a linux kernel
[23:12:44] <pinchartl> kalven: depends on your kernel configuration. on a threadripper with 48 cores and 128GB of RAM it's certainly reasonable :-)
[23:13:03] <pinchartl> when building a distro kernel you end up building lots of drivers
[23:13:16] <pinchartl> if you tune your config file carefully for your machine, it's much faster
[23:14:03] <rpav> it's pretty useful to keep most USB device drivers (which is a _lot_ of drivers) around, because you can easily end up trying to plug such
[23:14:10] <kalven> https://openbenchmarking.org/test/pts/build-linux-kernel-1.12.0
[23:14:36] <rpav> yeah if you cut out everything you don't have, then it's fairly quick; but then if you get some new thing you're going to be hunting aorund for the combination of stuff required to use it, which is a pita
[23:14:56] <rpav> it's pretty magical to basically have any hardware you throw at the kernel recognized and working without configuration, downloads, installs, etc
[23:15:12] <pinchartl> rpav: in my experience the painful part is to trim down the config to the bare minimum, not having to add a new driver occasionally
[23:15:45] <rpav> eh
[23:16:07] <rpav> pinchartl: i was using that thing where you basically plug all the stuff you care about, and have it spit out a kernel config .. seemed to work fine
[23:16:44] *** Joins: magla (~gelignite@55d4e16d.access.ecotel.net)
[23:17:42] <rpav> er just localmodconfig now? o.O
[23:18:22] <rpav> ah https://github.com/graysky2/modprobed-db might be it too
[23:18:44] <pinchartl> there are a few options, I haven't tried them recently
[23:19:06] <pinchartl> but beside drivers, you also need to pick lots of options related, for instance, to networking, or file systems
[23:19:30] <rpav> i think the latter keeps track of plugged devices so they don't all have to be active for localmodconfig .. it's been a bit, i more or less just use default arch or RT-patched
[23:20:02] <kalven> so how long does it take for you rpav?
[23:21:17] <rpav> dunno been awhile
[23:21:25] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:89d9:5e4e:e450:1642)
[23:21:25] *** Joins: tesuji (~quassel@2a02:908:180:9500:9509:881b:6bdf:4d85)
[23:21:29] <pinchartl> a kernel compilation with a bit of a trimmed down config (not optimized to the last possible extent) takes about 30 minutes for me for my x86 machine
[23:21:42] <rpav> maybe 45-60 minutes, but i have what is sadly an older box now (i7-3930k)
[23:21:47] <pinchartl> it's shorter for embedded configs as I trim them down more aggressively
[23:22:15] <rpav> ah, the days when you could build in a few minutes ;/
[23:22:29] <pinchartl> (i7-8550U @1.80GHz, 16GB of RAM, NVME disk)
[23:23:14] *** Joins: mike18_ (~geri@71-220-52-187.mpls.qwest.net)
[23:23:32] <mike18_> hi why is that not working to detect integer overflow with mult? if ((num / 10) > (numeric_limits<int>::max() / 10)) { overflow ... }
[23:23:58] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[23:25:44] <mike18_> should be: if (num > (numeric_limits<int>::max() / 10)) { overflow ... }
[23:26:05] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:89d9:5e4e:e450:1642) (Client Quit)
[23:26:46] <rpav> pinchartl: should upgrade that ram D:
[23:28:03] <rpav> pinchartl: but trimmed config on that should not take more thna like 5-10min surely, unless you're still building all the drivers?
[23:28:16] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:68eb:9b8c:ed60:d2d2)
[23:28:22] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[23:28:33] <pinchartl> not all drivers, no. an allmodconfig build would take much longer
[23:34:17] <mike18_> can i do that check in 1 if? https://ideone.com/Brdfqi
[23:35:16] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[23:35:34] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[23:35:36] <rpav> try it and see?
[23:35:49] <rpav> (why could you not?)
[23:37:34] *** Joins: wyre_ (~wyre@user/wyre)
[23:39:41] <malinus> Let's say you have a method that is called a lot. Actually it's what uses 80% of the cpu. Is it, in general, more performant to give the data that said method processes as a argument, each time it's called (which is often), or have the method have access to the data as a member?
[23:40:04] *** Joins: MaddHatt1r (~maddhatt@user/maddhatter)
[23:40:07] <malinus> Can anything general even be said about these two approaches, in therms of performance?
[23:40:40] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[23:40:59] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:42:59] <great_taste> how to get the type of an element by index on a tuple? std::decay_t<decltype(std::get<I>(t))>?
[23:44:30] *** Quits: wyre (~wyre@user/wyre) (Remote host closed the connection)
[23:44:31] *** Quits: Dragoon (~Dragoon@user/dragoon) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 260 seconds)
[23:44:31] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Ping timeout: 260 seconds)
[23:51:35] *** Joins: Dragoon (~Dragoon@user/dragoon)
[23:52:08] *** Joins: meator (~meator@user/meator)
[23:52:08] *** Joins: zmt00 (~zmt00@user/zmt00)
[23:52:13] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[23:55:07] <rpav> malinus: very little can generally be said
[23:55:24] <rpav> benchmark what the issue is if it's not evident and fix that
[23:55:25] *** Quits: proller (~p@2a02:6b8:b081:7212::1:29) (Ping timeout: 240 seconds)
[23:56:43] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[23:57:28] <malinus> rpav: this is a framework choice that can't be changed easliy, but I get what you're saying
[23:57:33] <rpav> malinus: for example, if "the method" is a bunch of random virtual overrides and you're calling it across a lot of different structs, likely to be a minor issue at least
[23:57:59] <rpav> if you're passing some giant thing that gets copied by value every time, maybe that too
[23:58:22] <rpav> if it's a straight-up function call to the same code and everything passes in a register, probably very fast
